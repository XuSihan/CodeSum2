[{"methodBody": ["METHOD_START", "{", "return   columnType ;", "}", "METHOD_END"], "methodName": ["getColumnType"], "fileName": "com.facebook.presto.plugin.blackhole.BlackHoleColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.plugin.blackhole.BlackHoleColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . spi . ColumnMetadata ( name ,    columnType )  ;", "}", "METHOD_END"], "methodName": ["toColumnMetadata"], "fileName": "com.facebook.presto.plugin.blackhole.BlackHoleColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   pageProcessingDelay ;", "}", "METHOD_END"], "methodName": ["getPageProcessingDelay"], "fileName": "com.facebook.presto.plugin.blackhole.BlackHoleInsertTableHandle"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( schemas . contains ( schemaName )  )  )     {", "throw   new   SchemaNotFoundException ( schemaName )  ;", "}", "}", "METHOD_END"], "methodName": ["checkSchemaExists"], "fileName": "com.facebook.presto.plugin.blackhole.BlackHoleMetadata"}, {"methodBody": ["METHOD_START", "{", "return   pageProcessingDelay ;", "}", "METHOD_END"], "methodName": ["getPageProcessingDelay"], "fileName": "com.facebook.presto.plugin.blackhole.BlackHoleOutputTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   table ;", "}", "METHOD_END"], "methodName": ["getTable"], "fileName": "com.facebook.presto.plugin.blackhole.BlackHoleOutputTableHandle"}, {"methodBody": ["METHOD_START", "{", "if    (  ( pageProcessingDelayMillis )     >     0  )     {", "return   MoreFutures . toCompletableFuture ( executorService . schedule (  (  )     -  >    ImmutableList . of (  )  ,    pageProcessingDelayMillis ,    TimeUnit . MILLISECONDS )  )  ;", "}", "return    . NON _ BLOCKED ;", "}", "METHOD_END"], "methodName": ["scheduleAppend"], "fileName": "com.facebook.presto.plugin.blackhole.BlackHolePageSink"}, {"methodBody": ["METHOD_START", "{", "checkArgument ( isSupportedType ( type )  ,     \" Unsupported   type    [  % s ]  \"  ,    type )  ;", "Slice   slice ;", "if    ( isVarcharType ( type )  )     {", "slice    =    constantSlice . slice (  0  ,    Math . min (  (  ( VarcharType )     ( type )  )  . getLength (  )  ,    constantSlice . length (  )  )  )  ;", "} else", "if    ( isLongDecimal ( type )  )     {", "slice    =    encodeScaledValue ( ZERO )  ;", "} else    {", "slice    =    constantSlice ;", "}", "BlockBuil   buil ;", "if    ( type   instanceof   FixedWidthType )     {", "buil    =    type . createBlockBuil ( null ,    rowsCount )  ;", "} else    {", "buil    =    type . createBlockBuil ( null ,    rowsCount ,    slice . length (  )  )  ;", "}", "for    ( int   i    =     0  ;    i    <    rowsCount ;    i +  +  )     {", "Class <  ?  >    javaType    =    type . getJavaType (  )  ;", "if    ( javaType    =  =     ( boolean . class )  )     {", "type . writeBoolean ( buil ,    false )  ;", "} else", "if    ( javaType    =  =     ( long . class )  )     {", "type . writeLong ( buil ,     0  )  ;", "} else", "if    ( javaType    =  =     ( double . class )  )     {", "type . writeDouble ( buil ,     0  .  0  )  ;", "} else", "if    ( javaType    =  =     ( Slice . class )  )     {", "requireNonNull ( slice ,     \" slice   is   null \"  )  ;", "type . writeSlice ( buil ,    slice ,     0  ,    slice . length (  )  )  ;", "} else    {", "throw   new   UnsupportedOperationException (  (  \" Unknown   javaType :     \"     +     ( getName (  )  )  )  )  ;", "}", "}", "return   buil . build (  )  ;", "}", "METHOD_END"], "methodName": ["createZeroBlock"], "fileName": "com.facebook.presto.plugin.blackhole.BlackHolePageSourceProvider"}, {"methodBody": ["METHOD_START", "{", "byte [  ]    constantBytes    =    new   byte [ fieldLength ]  ;", "Arrays . fill ( constantBytes ,     (  ( byte )     (  4  2  )  )  )  ;", "Slice   constantSlice    =    Slices . wrappedBuffer ( constantBytes )  ;", "Block [  ]    blocks    =    new   Block [ types . size (  )  ]  ;", "for    ( int   i    =     0  ;    i    <     ( blocks . length )  ;    i +  +  )     {", "blocks [ i ]     =    createZeroBlock ( types . get ( i )  ,    rowsCount ,    constantSlice )  ;", "}", "return   new   spi . Page ( rowsCount ,    blocks )  ;", "}", "METHOD_END"], "methodName": ["generateZeroPage"], "fileName": "com.facebook.presto.plugin.blackhole.BlackHolePageSourceProvider"}, {"methodBody": ["METHOD_START", "{", "return    (  (  ( ImmutableSet .  < Type > of ( TINYINT ,    SMALLINT ,    INTEGER ,    BIGINT ,    REAL ,    DOUBLE ,    BOOLEAN ,    DATE ,    TIMESTAMP ,    VARBINARY )  . contains ( type )  )     |  |     ( isVarcharType ( type )  )  )     |  |     ( isLongDecimal ( type )  )  )     |  |     ( isShortDecimal ( type )  )  ;", "}", "METHOD_END"], "methodName": ["isSupportedType"], "fileName": "com.facebook.presto.plugin.blackhole.BlackHolePageSourceProvider"}, {"methodBody": ["METHOD_START", "{", "return   BlackHoleQueryRunner . createQueryRunner ( ImmutableMap . of (  )  )  ;", "}", "METHOD_END"], "methodName": ["createQueryRunner"], "fileName": "com.facebook.presto.plugin.blackhole.BlackHoleQueryRunner"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    testSessionBuilder (  )  . setCatalog (  \" blackhole \"  )  . setSchema (  \" default \"  )  . build (  )  ;", "Distributed   queryRunner    =    new   Distributed ( session ,     4  ,    extraProperties )  ;", "try    {", "queryRunner . installPlugin ( new   BlackHolePlugin (  )  )  ;", "queryRunner . createCatalog (  \" blackhole \"  ,     \" blackhole \"  ,    ImmutableMap . of (  )  )  ;", "queryRunner . installPlugin ( new   TpchPlugin (  )  )  ;", "queryRunner . createCatalog (  \" tpch \"  ,     \" tpch \"  ,    ImmutableMap . of (  )  )  ;", "return   queryRunner ;", "}    catch    ( Exception   e )     {", "Closeables . closeAllSuppress ( e ,    queryRunner )  ;", "throw   e ;", "}", "}", "METHOD_END"], "methodName": ["createQueryRunner"], "fileName": "com.facebook.presto.plugin.blackhole.BlackHoleQueryRunner"}, {"methodBody": ["METHOD_START", "{", "Logging . initialize (  )  ;", "DistributedQueryRunner   queryRunner    =     . createQueryRunner ( ImmutableMap . of (  \" http - server . http . port \"  ,     \"  8  0  8  0  \"  )  )  ;", "Thread . sleep (  1  0  )  ;", "Logger   log    =    Logger . get (  . class )  ;", "log . info (  \"  =  =  =  =  =  =  =  =    SERVER   STARTED    =  =  =  =  =  =  =  =  \"  )  ;", "log . info (  \"  \\ n =  =  =  =  \\ n % s \\ n =  =  =  =  \"  ,    queryRunner . getCoordinator (  )  . getBaseUrl (  )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.plugin.blackhole.BlackHoleQueryRunner"}, {"methodBody": ["METHOD_START", "{", "return   fieldsLength ;", "}", "METHOD_END"], "methodName": ["getFieldsLength"], "fileName": "com.facebook.presto.plugin.blackhole.BlackHoleSplit"}, {"methodBody": ["METHOD_START", "{", "return   pageProcessingDelay ;", "}", "METHOD_END"], "methodName": ["getPageProcessingDelay"], "fileName": "com.facebook.presto.plugin.blackhole.BlackHoleSplit"}, {"methodBody": ["METHOD_START", "{", "return   pagesCount ;", "}", "METHOD_END"], "methodName": ["getPagesCount"], "fileName": "com.facebook.presto.plugin.blackhole.BlackHoleSplit"}, {"methodBody": ["METHOD_START", "{", "return   rowsPerPage ;", "}", "METHOD_END"], "methodName": ["getRowsPerPage"], "fileName": "com.facebook.presto.plugin.blackhole.BlackHoleSplit"}, {"methodBody": ["METHOD_START", "{", "return   columnHandles ;", "}", "METHOD_END"], "methodName": ["getColumnHandles"], "fileName": "com.facebook.presto.plugin.blackhole.BlackHoleTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   fieldsLength ;", "}", "METHOD_END"], "methodName": ["getFieldsLength"], "fileName": "com.facebook.presto.plugin.blackhole.BlackHoleTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   pageProcessingDelay ;", "}", "METHOD_END"], "methodName": ["getPageProcessingDelay"], "fileName": "com.facebook.presto.plugin.blackhole.BlackHoleTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   pagesPerSplit ;", "}", "METHOD_END"], "methodName": ["getPagesPerSplit"], "fileName": "com.facebook.presto.plugin.blackhole.BlackHoleTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   rowsPerPage ;", "}", "METHOD_END"], "methodName": ["getRowsPerPage"], "fileName": "com.facebook.presto.plugin.blackhole.BlackHoleTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   schemaName ;", "}", "METHOD_END"], "methodName": ["getSchemaName"], "fileName": "com.facebook.presto.plugin.blackhole.BlackHoleTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   splitCount ;", "}", "METHOD_END"], "methodName": ["getSplitCount"], "fileName": "com.facebook.presto.plugin.blackhole.BlackHoleTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   tableName ;", "}", "METHOD_END"], "methodName": ["getTableName"], "fileName": "com.facebook.presto.plugin.blackhole.BlackHoleTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   new   SchemaTableName ( schemaName ,    tableName )  ;", "}", "METHOD_END"], "methodName": ["toSchemaTableName"], "fileName": "com.facebook.presto.plugin.blackhole.BlackHoleTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . spi . ConnectorTableMetadata ( toSchemaTableName (  )  ,    columnHandles . stream (  )  . map ( BlackHoleColumnHandle :  : toColumnMetadata )  . collect ( Collectors . toList (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["toTableMetadata"], "fileName": "com.facebook.presto.plugin.blackhole.BlackHoleTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   fieldsLength ;", "}", "METHOD_END"], "methodName": ["getFieldsLength"], "fileName": "com.facebook.presto.plugin.blackhole.BlackHoleTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "return   pageProcessingDelay ;", "}", "METHOD_END"], "methodName": ["getPageProcessingDelay"], "fileName": "com.facebook.presto.plugin.blackhole.BlackHoleTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "return   pagesPerSplit ;", "}", "METHOD_END"], "methodName": ["getPagesPerSplit"], "fileName": "com.facebook.presto.plugin.blackhole.BlackHoleTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "return   rowsPerPage ;", "}", "METHOD_END"], "methodName": ["getRowsPerPage"], "fileName": "com.facebook.presto.plugin.blackhole.BlackHoleTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "return   splitCount ;", "}", "METHOD_END"], "methodName": ["getSplitCount"], "fileName": "com.facebook.presto.plugin.blackhole.BlackHoleTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( metadata . listTables ( SESSION ,    null )  ,    ImmutableList . of (  )  ,     \" No   table   was   expected \"  )  ;", "}", "METHOD_END"], "methodName": ["assertThatNoTableIsCreated"], "fileName": "com.facebook.presto.plugin.blackhole.TestBlackHoleMetadata"}, {"methodBody": ["METHOD_START", "{", "assertThatNoTableIsCreated (  )  ;", "SchemaTableName   schemaTableName    =    new   SchemaTableName (  \" default \"  ,     \" temp _ table \"  )  ;", "ConnectorOutputTableHandle   table    =    metadata . beginCreateTable ( SESSION ,    new   spi . ConnectorTableMetadata ( schemaTableName ,    ImmutableList . of (  )  ,    tableProperties )  ,    Optional . empty (  )  )  ;", "assertThatNoTableIsCreated (  )  ;", "metadata . finishCreateTable ( SESSION ,    table ,    ImmutableList . of (  )  )  ;", "List < SchemaTableName >    tables    =    metadata . listTables ( SESSION ,    null )  ;", "assertTrue (  (  ( tables . size (  )  )     =  =     1  )  ,     \" Expected   only   one   table .  \"  )  ;", "assertTrue ( tables . get (  0  )  . getTableName (  )  . equals (  \" temp _ table \"  )  ,     \" Expected   table   with   name    ' temp _ table '  \"  )  ;", "}", "METHOD_END"], "methodName": ["tableIsCreatedAfterCommits"], "fileName": "com.facebook.presto.plugin.blackhole.TestBlackHoleMetadata"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( metadata . listSchemaNames ( SESSION )  ,    ImmutableList . of (  \" default \"  )  )  ;", "metadata . createSchema ( SESSION ,     \" test \"  ,    ImmutableMap . of (  )  )  ;", "assertEquals ( metadata . listSchemaNames ( SESSION )  ,    ImmutableList . of (  \" default \"  ,     \" test \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testCreateSchema"], "fileName": "com.facebook.presto.plugin.blackhole.TestBlackHoleMetadata"}, {"methodBody": ["METHOD_START", "{", "SchemaTableName   schemaTableName    =    new   SchemaTableName (  \" schema 1  \"  ,     \" test _ table \"  )  ;", "try    {", "metadata . beginCreateTable ( SESSION ,    new   spi . ConnectorTableMetadata ( schemaTableName ,    ImmutableList . of (  )  ,    tableProperties )  ,    Optional . empty (  )  )  ;", "fail (  \" Should   fail   because   schema   does   not   exist \"  )  ;", "}    catch    ( PrestoException   ex )     {", "assertEquals ( ex . getErrorCode (  )  ,    NOT _ FOUND . toErrorCode (  )  )  ;", "assertTrue ( ex . getMessage (  )  . equals (  \" Schema   schema 1    not   found \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testCreateTableInNotExistSchema"], "fileName": "com.facebook.presto.plugin.blackhole.TestBlackHoleMetadata"}, {"methodBody": ["METHOD_START", "{", "assertTrue (  (  ( listBlackHoleTables (  )  . size (  )  )     =  =     0  )  ,     \" No   blackhole   tables   expected \"  )  ;", "}", "METHOD_END"], "methodName": ["assertThatNoBlackHoleTableIsCreated"], "fileName": "com.facebook.presto.plugin.blackhole.TestBlackHoleSmoke"}, {"methodBody": ["METHOD_START", "{", "assertThatQueryReturnsValue ( sql ,    expected ,    null )  ;", "}", "METHOD_END"], "methodName": ["assertThatQueryReturnsValue"], "fileName": "com.facebook.presto.plugin.blackhole.TestBlackHoleSmoke"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   rows    =     ( session    =  =    null )     ?    queryRunner . execute ( sql )     :    queryRunner . execute ( session ,    sql )  ;", "MaterializedRow   materializedRow    =    Iterables . getOnlyElement ( rows )  ;", "int   fieldCount    =    materializedRow . getFieldCount (  )  ;", "assertTrue (  ( fieldCount    =  =     1  )  ,    String . format (  \" Expected   only   one   column ,    but   got    '  % d '  \"  ,    fieldCount )  )  ;", "Object   value    =    materializedRow . getField (  0  )  ;", "assertEquals ( value ,    expected )  ;", "assertTrue (  (  ( Iterables . getOnlyElement ( rows )  . getFieldCount (  )  )     =  =     1  )  )  ;", "}", "METHOD_END"], "methodName": ["assertThatQueryReturnsValue"], "fileName": "com.facebook.presto.plugin.blackhole.TestBlackHoleSmoke"}, {"methodBody": ["METHOD_START", "{", "assertThatQueryReturnsValue (  \" CREATE   TABLE   nation   as   SELECT    *    FROM   tpch . tiny . nation \"  ,     2  5 L )  ;", "List < QualifiedObjectName >    tableNames    =    liTables (  )  ;", "assertTrue (  (  ( tableNames . size (  )  )     =  =     1  )  ,     \" Expected   only   one   table .  \"  )  ;", "assertTrue ( tableNames . get (  0  )  . getObjectName (  )  . equals (  \" nation \"  )  ,     \" Expected    ' nation '    table .  \"  )  ;", "assertThatQueryReturnsValue (  \" INSERT   INTO   nation   SELECT    *    FROM   tpch . tiny . nation \"  ,     2  5 L )  ;", "assertThatQueryReturnsValue (  \" INSERT   INTO   nation   SELECT    *    FROM   tpch . tiny . nation \"  ,     2  5 L )  ;", "assertThatQueryReturnsValue (  \" SELECT   count (  *  )    FROM   nation \"  ,     0 L )  ;", "assertThatQueryReturnsValue (  \" DROP   TABLE   nation \"  ,    true )  ;", "}", "METHOD_END"], "methodName": ["blackHoleConnectorUsage"], "fileName": "com.facebook.presto.plugin.blackhole.TestBlackHoleSmoke"}, {"methodBody": ["METHOD_START", "{", "assertThatQueryReturnsValue ( String . format (  (  \" CREATE   TABLE   blackhole _ all _ types    (  \"     +     (  (  (  (  (  (  (  (  (  (  (  (  (  \"        _ varchar   VARCHAR (  1  0  )  \"     +     \"  ,     _ bigint   BIGINT \"  )     +     \"  ,     _ integer   INTEGER \"  )     +     \"  ,     _ smallint   SMALLINT \"  )     +     \"  ,     _ tinyint   TINYINT \"  )     +     \"  ,     _ real   REAL \"  )     +     \"  ,     _ double   DOUBLE \"  )     +     \"  ,     _ boolean   BOOLEAN \"  )     +     \"  ,     _ date   DATE \"  )     +     \"  ,     _ timestamp   TIMESTAMP \"  )     +     \"  ,     _ varbinary   VARBINARY \"  )     +     \"  ,     _ decimal _ short   DECIMAL (  3  ,  2  )  \"  )     +     \"  ,     _ decimal _ long   DECIMAL (  3  0  ,  1  0  )  \"  )     +     \"  )    WITH    (     % s    =     1  ,     % s    =     1  ,     % s    =     1     )     \"  )  )  ,    BlackHoleConnector . ROWS _ PER _ PAGE _ PROPERTY ,    BlackHoleConnector . PAGES _ PER _ SPLIT _ PROPERTY ,    BlackHoleConnector . SPLIT _ COUNT _ PROPERTY )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["createBlackholeAllTypesTable"], "fileName": "com.facebook.presto.plugin.blackhole.TestBlackHoleSmoke"}, {"methodBody": ["METHOD_START", "{", "String   createTableSql    =     \" CREATE   TABLE   nation   as   SELECT    *    FROM   tpch . tiny . nation \"  ;", "queryRunner . execute ( createTableSql )  ;", "try    {", "queryRunner . execute ( createTableSql )  ;", "fail (  \" Expected   exception   to   be   thrown   here !  \"  )  ;", "}    catch    ( RuntimeException   ex )     {", "assertTrue ( ex . getMessage (  )  . equals (  \" line    1  :  1  :    Destination   table    ' default . nation '    already   exists \"  )  )  ;", "}    finally    {", "assertThatQueryReturnsValue (  \" DROP   TABLE   nation \"  ,    true )  ;", "}", "}", "METHOD_END"], "methodName": ["createTableWhenTableIsAlreadyCreated"], "fileName": "com.facebook.presto.plugin.blackhole.TestBlackHoleSmoke"}, {"methodBody": ["METHOD_START", "{", "assertThatQueryReturnsValue (  \" CREATE   TABLE   distributed _ test   WITH    (    distributed _ on    =    array [  ' orderkey '  ]     )    AS   SELECT    *    FROM   tpch . tiny . orders \"  ,     1  5  0  0  0 L )  ;", "assertThatQueryReturnsValue (  \" DROP   TABLE   distributed _ test \"  ,    true )  ;", "}", "METHOD_END"], "methodName": ["createTableWithDistribution"], "fileName": "com.facebook.presto.plugin.blackhole.TestBlackHoleSmoke"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    testSessionBuilder (  )  . setCatalog (  \" blackhole \"  )  . setSchema (  \" default \"  )  . build (  )  ;", "assertThatQueryReturnsValue ( String . format (  \" CREATE   TABLE   nation   WITH    (     % s    =     3  ,     % s    =     2  ,     % s    =     1     )    as   SELECT    *    FROM   tpch . tiny . nation \"  ,    BlackHoleConnector . ROWS _ PER _ PAGE _ PROPERTY ,    BlackHoleConnector . PAGES _ PER _ SPLIT _ PROPERTY ,    BlackHoleConnector . SPLIT _ COUNT _ PROPERTY )  ,     2  5 L ,    session )  ;", "assertThatQueryReturnsValue (  \" SELECT   count (  *  )    FROM   nation \"  ,     6 L ,    session )  ;", "assertThatQueryReturnsValue (  \" INSERT   INTO   nation   SELECT    *    FROM   tpch . tiny . nation \"  ,     2  5 L ,    session )  ;", "assertThatQueryReturnsValue (  \" SELECT   count (  *  )    FROM   nation \"  ,     6 L ,    session )  ;", "MaterializedResult   rows    =    queryRunner . execute ( session ,     \" SELECT    *    FROM   nation   LIMIT    1  \"  )  ;", "assertEquals ( rows . getRowCount (  )  ,     1  )  ;", "MaterializedRow   row    =    Iterables . getOnlyElement ( rows )  ;", "assertEquals ( row . getFieldCount (  )  ,     4  )  ;", "assertEquals ( row . getField (  0  )  ,     0 L )  ;", "assertEquals ( row . getField (  1  )  ,     \"  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  \"  )  ;", "assertEquals ( row . getField (  2  )  ,     0 L )  ;", "assertEquals ( row . getField (  3  )  ,     \"  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  \"  )  ;", "assertThatQueryReturnsValue (  \" DROP   TABLE   nation \"  ,    true )  ;", "}", "METHOD_END"], "methodName": ["dataGenerationUsage"], "fileName": "com.facebook.presto.plugin.blackhole.TestBlackHoleSmoke"}, {"methodBody": ["METHOD_START", "{", "assertThatQueryReturnsValue (  \" DROP   TABLE   IF   EXISTS   blackhole _ all _ types \"  ,    true )  ;", "}", "METHOD_END"], "methodName": ["dropBlackholeAllTypesTable"], "fileName": "com.facebook.presto.plugin.blackhole.TestBlackHoleSmoke"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    testSessionBuilder (  )  . setCatalog (  \" blackhole \"  )  . setSchema (  \" default \"  )  . build (  )  ;", "assertThatQueryReturnsValue ( String . format (  (  \" CREATE   TABLE   nation   WITH    (     % s    =     8  ,     % s    =     1  ,     % s    =     1  ,     % s    =     1     )    AS    \"     +     \" SELECT   nationkey ,    name ,    regionkey ,    comment ,     ' abc '    short _ varchar   FROM   tpch . tiny . nation \"  )  ,    BlackHoleConnector . FIELD _ LENGTH _ PROPERTY ,    BlackHoleConnector . ROWS _ PER _ PAGE _ PROPERTY ,    BlackHoleConnector . PAGES _ PER _ SPLIT _ PROPERTY ,    BlackHoleConnector . SPLIT _ COUNT _ PROPERTY )  ,     2  5 L ,    session )  ;", "MaterializedResult   rows    =    queryRunner . execute ( session ,     \" SELECT    *    FROM   nation \"  )  ;", "assertEquals ( rows . getRowCount (  )  ,     1  )  ;", "MaterializedRow   row    =    Iterables . getOnlyElement ( rows )  ;", "assertEquals ( row . getFieldCount (  )  ,     5  )  ;", "assertEquals ( row . getField (  0  )  ,     0 L )  ;", "assertEquals ( row . getField (  1  )  ,     \"  *  *  *  *  *  *  *  *  \"  )  ;", "assertEquals ( row . getField (  2  )  ,     0 L )  ;", "assertEquals ( row . getField (  3  )  ,     \"  *  *  *  *  *  *  *  *  \"  )  ;", "assertEquals ( row . getField (  4  )  ,     \"  *  *  *  \"  )  ;", "assertThatQueryReturnsValue (  \" DROP   TABLE   nation \"  ,    true )  ;", "}", "METHOD_END"], "methodName": ["fieldLength"], "fileName": "com.facebook.presto.plugin.blackhole.TestBlackHoleSmoke"}, {"methodBody": ["METHOD_START", "{", "return   queryRunner . listTables ( queryRunner . getDefaultSession (  )  ,     \" blackhole \"  ,     \" default \"  )  ;", "}", "METHOD_END"], "methodName": ["listBlackHoleTables"], "fileName": "com.facebook.presto.plugin.blackhole.TestBlackHoleSmoke"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    testSessionBuilder (  )  . setCatalog (  \" blackhole \"  )  . setSchema (  \" default \"  )  . build (  )  ;", "try    {", "assertThatQueryReturnsValue ( String . format (  \" CREATE   TABLE   nation   WITH    (     % s    =     3  ,     % s    =     1     )    as   SELECT    *    FROM   tpch . tiny . nation \"  ,    BlackHoleConnector . ROWS _ PER _ PAGE _ PROPERTY ,    BlackHoleConnector . SPLIT _ COUNT _ PROPERTY )  ,     2  5 L ,    session )  ;", "fail (  \" Expected   exception   to   be   thrown   here !  \"  )  ;", "}    catch    ( RuntimeException   ex )     {", "}", "}", "METHOD_END"], "methodName": ["notAllPropertiesSetForDataGeneration"], "fileName": "com.facebook.presto.plugin.blackhole.TestBlackHoleSmoke"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    testSessionBuilder (  )  . setCatalog (  \" blackhole \"  )  . setSchema (  \" default \"  )  . build (  )  ;", "Duration   pageProcessingDelay    =    new   Duration (  1  ,    TimeUnit . SECONDS )  ;", "assertThatQueryReturnsValue ( String . format (  (  \" CREATE   TABLE   nation   WITH    (     % s    =     8  ,     % s    =     1  ,     % s    =     1  ,     % s    =     1  ,     % s    =     '  % s '     )    AS    \"     +     \" SELECT    *    FROM   tpch . tiny . nation \"  )  ,    BlackHoleConnector . FIELD _ LENGTH _ PROPERTY ,    BlackHoleConnector . ROWS _ PER _ PAGE _ PROPERTY ,    BlackHoleConnector . PAGES _ PER _ SPLIT _ PROPERTY ,    BlackHoleConnector . SPLIT _ COUNT _ PROPERTY ,    BlackHoleConnector . PAGE _ PROCESSING _ DELAY ,    pageProcessingDelay )  ,     2  5 L ,    session )  ;", "Stopwatch   stopwatch    =    Stopwatch . createStarted (  )  ;", "assertEquals ( queryRunner . execute ( session ,     \" SELECT    *    FROM   nation \"  )  . getRowCount (  )  ,     1  )  ;", "queryRunner . execute ( session ,     \" INSERT   INTO   nation   SELECT   CAST ( null   AS   BIGINT )  ,    CAST ( null   AS   VARCHAR (  2  5  )  )  ,    CAST ( null   AS   BIGINT )  ,    CAST ( null   AS   VARCHAR (  1  5  2  )  )  \"  )  ;", "stopwatch . stop (  )  ;", "Assertions . assertGreaterThan ( stopwatch . elapsed ( TimeUnit . MILLISECONDS )  ,    pageProcessingDelay . toMillis (  )  )  ;", "assertThatQueryReturnsValue (  \" DROP   TABLE   nation \"  ,    true )  ;", "}", "METHOD_END"], "methodName": ["pageProcessingDelay"], "fileName": "com.facebook.presto.plugin.blackhole.TestBlackHoleSmoke"}, {"methodBody": ["METHOD_START", "{", "queryRunner    =    BlackHoleQueryRunner . createQueryRunner (  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.plugin.blackhole.TestBlackHoleSmoke"}, {"methodBody": ["METHOD_START", "{", "assertThatNoBlackHoleTableIsCreated (  )  ;", "queryRunner . close (  )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.plugin.blackhole.TestBlackHoleSmoke"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( queryRunner . execute (  \" SHOW   SCHEMAS   FROM    )  . getRowCount (  )  ,     2  )  ;", "queryRunner . execute (  \" CREATE   SCHEMA   test \"  )  ;", "assertEquals ( queryRunner . execute (  \" SHOW   SCHEMAS   FROM    )  . getRowCount (  )  ,     3  )  ;", "}", "METHOD_END"], "methodName": ["testCreateSchema"], "fileName": "com.facebook.presto.plugin.blackhole.TestBlackHoleSmoke"}, {"methodBody": ["METHOD_START", "{", "int   tablesBeforeCreate    =    listBlackHoleTables (  )  . size (  )  ;", "String   createTableSql    =     \" CREATE   TABLE   schema 1  . test _ table    ( x   date )  \"  ;", "try    {", "queryRunner . execute ( createTableSql )  ;", "fail (  \" Expected   exception   to   be   thrown   here !  \"  )  ;", "}    catch    ( RuntimeException   ex )     {", "assertTrue ( ex . getMessage (  )  . equals (  \" Schema   schema 1    not   found \"  )  )  ;", "}", "int   tablesAfterCreate    =    listBlackHoleTables (  )  . size (  )  ;", "assertEquals ( tablesBeforeCreate ,    tablesAfterCreate )  ;", "}", "METHOD_END"], "methodName": ["testCreateTableInNotExistSchema"], "fileName": "com.facebook.presto.plugin.blackhole.TestBlackHoleSmoke"}, {"methodBody": ["METHOD_START", "{", "createBlackholeAllTypesTable (  )  ;", "assertThatQueryReturnsValue (  (  \" INSERT   INTO    _ all _ types   VALUES    (  \"     +     (  (  (  (  (  (  (  (  (  (  (  (  \"  ' abc '  ,     \"     +     \" BIGINT    '  1  '  ,     \"  )     +     \" INTEGER    '  2  '  ,     \"  )     +     \" SMALLINT    '  3  '  ,     \"  )     +     \" TINYINT    '  4  '  ,     \"  )     +     \" REAL    '  5  .  1  '  ,     \"  )     +     \" DOUBLE    '  5  .  2  '  ,     \"  )     +     \" true ,     \"  )     +     \" DATE    '  2  0  1  4  -  0  1  -  0  2  '  ,     \"  )     +     \" TIMESTAMP    '  2  0  1  4  -  0  1  -  0  2     1  2  :  1  2  '  ,     \"  )     +     \" cast (  ' bar '    as   varbinary )  ,     \"  )     +     \" DECIMAL    '  3  .  1  4  '  ,     \"  )     +     \" DECIMAL    '  1  2  3  4  5  6  7  8  9  0  .  1  2  3  4  5  6  7  8  9  '  )  \"  )  )  ,     1 L )  ;", "dropBlackholeAllTypesTable (  )  ;", "}", "METHOD_END"], "methodName": ["testInsertAllTypes"], "fileName": "com.facebook.presto.plugin.blackhole.TestBlackHoleSmoke"}, {"methodBody": ["METHOD_START", "{", "createBlackholeAllTypesTable (  )  ;", "MaterializedResult   rows    =    queryRunner . execute (  \" SELECT    *    FROM    _ all _ types \"  )  ;", "assertEquals ( rows . getRowCount (  )  ,     1  )  ;", "MaterializedRow   row    =    Iterables . getOnlyElement ( rows )  ;", "assertEquals ( row . getFieldCount (  )  ,     1  3  )  ;", "assertEquals ( row . getField (  0  )  ,     \"  *  *  *  *  *  *  *  *  *  *  \"  )  ;", "assertEquals ( row . getField (  1  )  ,     0 L )  ;", "assertEquals ( row . getField (  2  )  ,     0  )  ;", "assertEquals ( row . getField (  3  )  ,     (  ( short )     (  0  )  )  )  ;", "assertEquals ( row . getField (  4  )  ,     (  ( byte )     (  0  )  )  )  ;", "assertEquals ( row . getField (  5  )  ,     0  .  0 F )  ;", "assertEquals ( row . getField (  6  )  ,     0  .  0  )  ;", "assertEquals ( row . getField (  7  )  ,    false )  ;", "assertEquals ( row . getField (  8  )  ,    LocalDate . ofEpochDay (  0  )  )  ;", "assertEquals ( row . getField (  9  )  ,    LocalDateTime . of (  1  9  7  0  ,     1  ,     1  ,     0  ,     0  ,     0  )  )  ;", "assertEquals ( row . getField (  1  0  )  ,     \"  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  \"  . getBytes (  )  )  ;", "assertEquals ( row . getField (  1  1  )  ,    new   BigDecimal (  \"  0  .  0  0  \"  )  )  ;", "assertEquals ( row . getField (  1  2  )  ,    new   BigDecimal (  \"  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  .  0  0  0  0  0  0  0  0  0  0  \"  )  )  ;", "dropBlackholeAllTypesTable (  )  ;", "}", "METHOD_END"], "methodName": ["testSelectAllTypes"], "fileName": "com.facebook.presto.plugin.blackhole.TestBlackHoleSmoke"}, {"methodBody": ["METHOD_START", "{", "createBlackholeAllTypesTable (  )  ;", "MaterializedResult   rows    =    queryRunner . execute (  \" SELECT    *    FROM    _ all _ types   where    _ bigint    >     1  0  \"  )  ;", "assertEquals ( rows . getRowCount (  )  ,     0  )  ;", "dropBlackholeAllTypesTable (  )  ;", "}", "METHOD_END"], "methodName": ["testSelectWithUnenforcedConstraint"], "fileName": "com.facebook.presto.plugin.blackhole.TestBlackHoleSmoke"}]