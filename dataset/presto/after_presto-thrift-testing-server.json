[{"methodBody": ["METHOD_START", "{", "return   keys ;", "}", "METHOD_END"], "methodName": ["getKeys"], "fileName": "com.facebook.presto.connector.thrift.server.SplitInfo"}, {"methodBody": ["METHOD_START", "{", "return   lookupColumnNames ;", "}", "METHOD_END"], "methodName": ["getLookupColumnNames"], "fileName": "com.facebook.presto.connector.thrift.server.SplitInfo"}, {"methodBody": ["METHOD_START", "{", "return   partNumber ;", "}", "METHOD_END"], "methodName": ["getPartNumber"], "fileName": "com.facebook.presto.connector.thrift.server.SplitInfo"}, {"methodBody": ["METHOD_START", "{", "return   schemaName ;", "}", "METHOD_END"], "methodName": ["getSchemaName"], "fileName": "com.facebook.presto.connector.thrift.server.SplitInfo"}, {"methodBody": ["METHOD_START", "{", "return   tableName ;", "}", "METHOD_END"], "methodName": ["getTableName"], "fileName": "com.facebook.presto.connector.thrift.server.SplitInfo"}, {"methodBody": ["METHOD_START", "{", "return   totalParts ;", "}", "METHOD_END"], "methodName": ["getTotalParts"], "fileName": "com.facebook.presto.connector.thrift.server.SplitInfo"}, {"methodBody": ["METHOD_START", "{", "return   new   SplitInfo ( schemaName ,    tableName ,     0  ,     0  ,    true ,    lookupColumnNames ,    keys )  ;", "}", "METHOD_END"], "methodName": ["indexSplit"], "fileName": "com.facebook.presto.connector.thrift.server.SplitInfo"}, {"methodBody": ["METHOD_START", "{", "return   indexSplit ;", "}", "METHOD_END"], "methodName": ["isIndexSplit"], "fileName": "com.facebook.presto.connector.thrift.server.SplitInfo"}, {"methodBody": ["METHOD_START", "{", "return   new   SplitInfo ( schemaName ,    tableName ,    partNumber ,    totalParts ,    false ,    ImmutableList . of (  )  ,    ImmutableList . of (  )  )  ;", "}", "METHOD_END"], "methodName": ["normalSplit"], "fileName": "com.facebook.presto.connector.thrift.server.SplitInfo"}, {"methodBody": ["METHOD_START", "{", "ListBasedRecordSet   recordSet    =    new   ListBasedRecordSet ( ImmutableList . of ( Arrays . asList (  \"  1  \"  ,    null ,     \"  3  \"  )  ,    Arrays . asList (  \" ab \"  ,     \" c \"  ,    null )  )  ,    ImmutableList . of ( BIGINT ,    VARCHAR )  )  ;", "assertEquals ( recordSet . getColumnTypes (  )  ,    ImmutableList . of ( BIGINT ,    VARCHAR )  )  ;", "RecordCursor   cursor    =    recordSet . cursor (  )  ;", "assertTrue ( cursor . advanceNextPosition (  )  )  ;", "assertEquals ( cursor . getType (  0  )  ,    BIGINT )  ;", "assertEquals ( cursor . getType (  1  )  ,    VARCHAR )  ;", "assertThrows ( IndexOutOfBoundsException . class ,     (  )     -  >    cursor . getLong (  2  )  )  ;", "assertEquals ( cursor . getLong (  0  )  ,     1 L )  ;", "assertEquals ( cursor . getSlice (  1  )  ,    Slices . utf 8 Slice (  \" ab \"  )  )  ;", "assertTrue ( cursor . advanceNextPosition (  )  )  ;", "assertTrue ( cursor . isNull (  0  )  )  ;", "assertEquals ( cursor . getSlice (  1  )  ,    Slices . utf 8 Slice (  \" c \"  )  )  ;", "assertTrue ( cursor . advanceNextPosition (  )  )  ;", "assertEquals ( cursor . getLong (  0  )  ,     3 L )  ;", "assertTrue ( cursor . isNull (  1  )  )  ;", "assertFalse ( cursor . advanceNextPosition (  )  )  ;", "assertThrows ( IndexOutOfBoundsException . class ,     (  )     -  >    cursor . getLong (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["testCursor"], "fileName": "com.facebook.presto.connector.thrift.server.TestListBasedRecordSet"}, {"methodBody": ["METHOD_START", "{", "ListBasedRecordSet   recordSet    =    new   ListBasedRecordSet ( ImmutableList . of (  )  ,    ImmutableList . of ( BIGINT ,    INTEGER )  )  ;", "assertEquals ( recordSet . getColumnTypes (  )  ,    ImmutableList . of ( BIGINT ,    INTEGER )  )  ;", "RecordCursor   cursor    =    recordSet . cursor (  )  ;", "assertFalse ( cursor . advanceNextPosition (  )  )  ;", "}", "METHOD_END"], "methodName": ["testEmptyCursor"], "fileName": "com.facebook.presto.connector.thrift.server.TestListBasedRecordSet"}, {"methodBody": ["METHOD_START", "{", "List < String >    result    =    new   ArrayList <  >  (  ( end    -    begin )  )  ;", "if    (  ( block . getBigintData (  )  )     !  =    null )     {", "boolean [  ]    nulls    =    block . getBigintData (  )  . getNulls (  )  ;", "long [  ]    longs    =    block . getBigintData (  )  . getLongs (  )  ;", "for    ( int   i    =    begin ;    i    <    end ;    i +  +  )     {", "if    (  ( nulls    !  =    null )     &  &     ( nulls [ i ]  )  )     {", "result . add ( null )  ;", "} else    {", "checkArgument (  ( longs    !  =    null )  ,     \" block   structure   is   incorrect \"  )  ;", "result . add ( String . valueOf ( longs [ i ]  )  )  ;", "}", "}", "} else", "if    (  ( block . getIntegerData (  )  )     !  =    null )     {", "boolean [  ]    nulls    =    block . getIntegerData (  )  . getNulls (  )  ;", "int [  ]    ints    =    block . getIntegerData (  )  . getInts (  )  ;", "for    ( int   i    =    begin ;    i    <    end ;    i +  +  )     {", "if    (  ( nulls    !  =    null )     &  &     ( nulls [ i ]  )  )     {", "result . add ( null )  ;", "} else    {", "checkArgument (  ( ints    !  =    null )  ,     \" block   structure   is   incorrect \"  )  ;", "result . add ( String . valueOf ( ints [ i ]  )  )  ;", "}", "}", "} else", "if    (  ( block . getVarcharData (  )  )     !  =    null )     {", "boolean [  ]    nulls    =    block . getVarcharData (  )  . getNulls (  )  ;", "int [  ]    sizes    =    block . getVarcharData (  )  . getSizes (  )  ;", "byte [  ]    bytes    =    block . getVarcharData (  )  . getBytes (  )  ;", "int   startOffset    =     0  ;", "if    ( sizes    !  =    null )     {", "for    ( int   i    =     0  ;    i    <    begin ;    i +  +  )     {", "if    (  ( nulls    =  =    null )     |  |     (  !  ( nulls [ i ]  )  )  )     {", "startOffset    +  =    sizes [ i ]  ;", "}", "}", "}", "for    ( int   i    =    begin ;    i    <    end ;    i +  +  )     {", "if    (  ( nulls    !  =    null )     &  &     ( nulls [ i ]  )  )     {", "result . add ( null )  ;", "} else    {", "checkArgument (  ( sizes    !  =    null )  ,     \" block   structure   is   incorrect \"  )  ;", "if    (  ( sizes [ i ]  )     =  =     0  )     {", "result . add (  \"  \"  )  ;", "} else    {", "checkArgument (  ( bytes    !  =    null )  )  ;", "result . add ( new   String ( bytes ,    startOffset ,    sizes [ i ]  )  )  ;", "startOffset    +  =    sizes [ i ]  ;", "}", "}", "}", "} else    {", "throw   new   IllegalArgumentException (  \" Only   bigint ,    integer   and   varchar   blocks   are   supported \"  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["blockAsList"], "fileName": "com.facebook.presto.connector.thrift.server.ThriftIndexedTpchService"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < Integer >    builder    =    ImmutableList . builder (  )  ;", "for    ( String   columnName    :    endSchema )     {", "int   i    =    startSchema . iOf ( columnName )  ;", "checkArgument (  ( i    !  =     (  -  1  )  )  ,     \" Column   name   in   end   that   is   not   in   the   start :     % s \"  ,    columnName )  ;", "builder . add ( i )  ;", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["computeRemap"], "fileName": "com.facebook.presto.connector.thrift.server.ThriftIndexedTpchService"}, {"methodBody": ["METHOD_START", "{", "RecordSet   allColumnsOutputRecordSet    =    table . lookupKeys ( keys )  ;", "List < Integer >    outputRemap    =     . computeRemap ( table . getOutputColumns (  )  ,    outputColumnNames )  ;", "return   new   com . facebook . presto . split . MappedRecordSet ( allColumnsOutputRecordSet ,    outputRemap )  ;", "}", "METHOD_END"], "methodName": ["lookupIndexKeys"], "fileName": "com.facebook.presto.connector.thrift.server.ThriftIndexedTpchService"}, {"methodBody": ["METHOD_START", "{", "checkArgument (  ( begin    <  =    end )  ,     \" invalid   interval \"  )  ;", "if    ( begin    =  =    end )     {", "return   ImmutableList . of (  )  ;", "}", "List < PrestoThriftBlock >    blocks    =    page . getColumnBlocks (  )  ;", "List < List < String >  >    result    =    new   ArrayList ( blocks . size (  )  )  ;", "for    ( PrestoThriftBlock   block    :    blocks )     {", "result . add (  . blockAsList ( block ,    begin ,    end )  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["thriftPageToList"], "fileName": "com.facebook.presto.connector.thrift.server.ThriftIndexedTpchService"}, {"methodBody": ["METHOD_START", "{", "Logger   log    =    Logger . get ( ThriftTpchServer . class )  ;", "try    {", "ThriftTpchServer . start ( ImmutableList . of (  )  )  ;", "log . info (  \"  =  =  =  =  =  =  =  =    SERVER   STARTED    =  =  =  =  =  =  =  =  \"  )  ;", "}    catch    ( Throwable   t )     {", "log . error ( t )  ;", "System . exit (  1  )  ;", "}", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.connector.thrift.server.ThriftTpchServer"}, {"methodBody": ["METHOD_START", "{", "Bootstrap   app    =    new   Bootstrap ( ImmutableList .  < Module > builder (  )  . add ( new   DriftNettyServerModule (  )  )  . add ( new   ThriftTpchServerModule (  )  )  . addAll ( Objects . requireNonNull ( extraModules ,     \" extraModules   is   null \"  )  )  . build (  )  )  ;", "app . strictConfig (  )  . initialize (  )  ;", "}", "METHOD_END"], "methodName": ["start"], "fileName": "com.facebook.presto.connector.thrift.server.ThriftTpchServer"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  \" lookup   is   not   supported \"  )  ;", "}", "METHOD_END"], "methodName": ["createLookupPageSource"], "fileName": "com.facebook.presto.connector.thrift.server.ThriftTpchService"}, {"methodBody": ["METHOD_START", "{", "switch    ( splitInfo . getTableName (  )  )     {", "case    \" orders \"     :", "return    . createPageSource ( ORDERS ,    columnNames ,    splitInfo )  ;", "case    \" customer \"     :", "return    . createPageSource ( CUSTOMER ,    columnNames ,    splitInfo )  ;", "case    \" lineitem \"     :", "return    . createPageSource ( LINE _ ITEM ,    columnNames ,    splitInfo )  ;", "case    \" nation \"     :", "return    . createPageSource ( NATION ,    columnNames ,    splitInfo )  ;", "case    \" region \"     :", "return    . createPageSource ( REGION ,    columnNames ,    splitInfo )  ;", "case    \" part \"     :", "return    . createPageSource ( PART ,    columnNames ,    splitInfo )  ;", "default    :", "throw   new   IllegalArgumentException (  (  \" Table   not   setup :     \"     +     ( splitInfo . getTableName (  )  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["createPageSource"], "fileName": "com.facebook.presto.connector.thrift.server.ThriftTpchService"}, {"methodBody": ["METHOD_START", "{", "List < TpchColumn < T >  >    columns    =    columnNames . stream (  )  . map ( table :  : getColumn )  . collect ( Collectors . toList (  )  )  ;", "return   new   spi . RecordPageSource ( createTpchRecordSet ( table ,    columns ,    ThriftTpchService . schemaNameToScaleFactor ( splitInfo . getSchemaName (  )  )  ,    splitInfo . getPartNumber (  )  ,    splitInfo . getTotalParts (  )  ,    TupleDomain . all (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createPageSource"], "fileName": "com.facebook.presto.connector.thrift.server.ThriftTpchService"}, {"methodBody": ["METHOD_START", "{", "throw   new   PrestoThriftServiceException (  \" Index   join   is   not   supported \"  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getIndexSplitsSync"], "fileName": "com.facebook.presto.connector.thrift.server.ThriftTpchService"}, {"methodBody": ["METHOD_START", "{", "return   ImmutableList . of (  )  ;", "}", "METHOD_END"], "methodName": ["getIndexableKeys"], "fileName": "com.facebook.presto.connector.thrift.server.ThriftTpchService"}, {"methodBody": ["METHOD_START", "{", "int   skipPages    =     ( nextToken    !  =    null )     ?    Ints . fromByteArray ( nextToken . getId (  )  )     :     0  ;", ". skipPages ( pageSource ,    skipPages )  ;", "Page   page    =    null ;", "while    (  (  !  ( pageSource . isFinished (  )  )  )     &  &     ( page    =  =    null )  )     {", "page    =    pageSource . getNextPage (  )  ;", "skipPages +  +  ;", "}", "PrestoThriftId   newNextToken    =     ( pageSource . isFinished (  )  )     ?    null    :    new   PrestoThriftId ( Ints . toByteArray ( skipPages )  )  ;", "return    . toThriftPage ( page ,     . types ( tableName ,    columnNames )  ,    newNextToken )  ;", "}", "METHOD_END"], "methodName": ["getRowsInternal"], "fileName": "com.facebook.presto.connector.thrift.server.ThriftTpchService"}, {"methodBody": ["METHOD_START", "{", "SplitInfo   splitInfo    =    ThriftTpchService . SPLIT _ INFO _ CODEC . fromJson ( splitId . getId (  )  )  ;", "checkArgument (  ( maxBytes    >  =     ( DEFAULT _ MAX _ PAGE _ SIZE _ IN _ BYTES )  )  ,     \" requested   maxBytes   is   too   small \"  )  ;", "ConnectorPageSource   pageSource ;", "if    (  !  ( splitInfo . isIndexSplit (  )  )  )     {", "pageSource    =    ThriftTpchService . createPageSource ( splitInfo ,    outputColumns )  ;", "} else    {", "pageSource    =    createLookupPageSource ( splitInfo ,    outputColumns )  ;", "}", "return   ThriftTpchService . getRowsInternal ( pageSource ,    splitInfo . getTableName (  )  ,    outputColumns ,    nextToken . getToken (  )  )  ;", "}", "METHOD_END"], "methodName": ["getRowsSync"], "fileName": "com.facebook.presto.connector.thrift.server.ThriftTpchService"}, {"methodBody": ["METHOD_START", "{", "if    ( schemaNameOrNull    =  =    null )     {", "return    . SCHEMAS ;", "} else", "if    (  . SCHEMAS . contains ( schemaNameOrNull )  )     {", "return   com . google . common . collect . ImmutableList . of ( schemaNameOrNull )  ;", "} else    {", "return   com . google . common . collect . ImmutableList . of (  )  ;", "}", "}", "METHOD_END"], "methodName": ["getSchemaNames"], "fileName": "com.facebook.presto.connector.thrift.server.ThriftTpchService"}, {"methodBody": ["METHOD_START", "{", "int   totalParts    =    ThriftTpchService . DEFAULT _ NUMBER _ OF _ SPLITS ;", "int   partNumber    =     (  ( nextToken . getToken (  )  )     =  =    null )     ?     0     :    Ints . fromByteArray ( nextToken . getToken (  )  . getId (  )  )  ;", "int   numberOfSplits    =    Math . min ( maxSplitCount ,     ( totalParts    -    partNumber )  )  ;", "List < PrestoThriftSplit >    splits    =    new   ArrayList <  >  ( numberOfSplits )  ;", "for    ( int   i    =     0  ;    i    <    numberOfSplits ;    i +  +  )     {", "SplitInfo   splitInfo    =    SplitInfo . normalSplit ( schemaTableName . getSchemaName (  )  ,    schemaTableName . getTableName (  )  ,     ( partNumber    +     1  )  ,    totalParts )  ;", "splits . add ( new   PrestoThriftSplit ( new   PrestoThriftId ( ThriftTpchService . SPLIT _ INFO _ CODEC . toJsonBytes ( splitInfo )  )  ,    ImmutableList . of (  )  )  )  ;", "partNumber +  +  ;", "}", "PrestoThriftId   newNextToken    =     ( partNumber    <    totalParts )     ?    new   PrestoThriftId ( Ints . toByteArray ( partNumber )  )     :    null ;", "return   new   api . PrestoThriftSplitBatch ( splits ,    newNextToken )  ;", "}", "METHOD_END"], "methodName": ["getSplitsSync"], "fileName": "com.facebook.presto.connector.thrift.server.ThriftTpchService"}, {"methodBody": ["METHOD_START", "{", "return   getPrestoType ( column )  . getTypeSignature (  )  . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getTypeString"], "fileName": "com.facebook.presto.connector.thrift.server.ThriftTpchService"}, {"methodBody": ["METHOD_START", "{", "switch    ( schemaName )     {", "case    \" tiny \"     :", "return    0  .  0  1  ;", "case    \" sf 1  \"     :", "return    1  .  0  ;", "}", "ow   new   IllegalArgumentException (  (  \" Schema   is   not   setup :     \"     +    schemaName )  )  ;", "}", "METHOD_END"], "methodName": ["schemaNameToScaleFactor"], "fileName": "com.facebook.presto.connector.thrift.server.ThriftTpchService"}, {"methodBody": ["METHOD_START", "{", "for    ( int   i    =     0  ;    i    <    skipPages ;    i +  +  )     {", "checkState (  (  !  ( pageSource . isFinished (  )  )  )  ,     \" pageSource   is   unexpedly   finished \"  )  ;", "pageSource . getNextPage (  )  ;", "}", "}", "METHOD_END"], "methodName": ["skipPages"], "fileName": "com.facebook.presto.connector.thrift.server.ThriftTpchService"}, {"methodBody": ["METHOD_START", "{", "if    ( page    =  =    null )     {", "checkState (  ( nextToken    =  =    null )  ,     \" there   must   be   no   more   data   when   page   is   null \"  )  ;", "return   new   api . PrestoThriftPageResult ( ImmutableList . of (  )  ,     0  ,    null )  ;", "}", "checkState (  (  ( page . getChannelCount (  )  )     =  =     ( columnTypes . size (  )  )  )  ,     \" number   of   columns   in   a   page   doesn ' t   match   the   one   in   requested   types \"  )  ;", "int   numberOfColumns    =    columnTypes . size (  )  ;", "List < PrestoThriftBlock >    columnBlocks    =    new   ArrayList <  >  ( numberOfColumns )  ;", "for    ( int   i    =     0  ;    i    <    numberOfColumns ;    i +  +  )     {", "columnBlocks . add ( fromBlock ( page . getBlock ( i )  ,    columnTypes . get ( i )  )  )  ;", "}", "return   new   api . PrestoThriftPageResult ( columnBlocks ,    page . getPositionCount (  )  ,    nextToken )  ;", "}", "METHOD_END"], "methodName": ["toThriftPage"], "fileName": "com.facebook.presto.connector.thrift.server.ThriftTpchService"}, {"methodBody": ["METHOD_START", "{", "TpchTable <  ?  >    table    =    TpchTable . getTable ( tableName )  ;", "return   columnNames . stream (  )  . map (  (    name )     -  >    getPType ( table . getColumn ( name )  )  )  . collect ( Collectors . toList (  )  )  ;", "}", "METHOD_END"], "methodName": ["types"], "fileName": "com.facebook.presto.connector.thrift.server.ThriftTpchService"}]