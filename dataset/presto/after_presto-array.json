[{"methodBody": ["METHOD_START", "{", "ReferenceCountMap   map    =    new   ReferenceCountMap (  )  ;", "for    ( int   i    =     0  ;    i    <     (  . NUMBER _ OF _ ENTRIES )  ;    i +  +  )     {", "map . incrementAndGet ( data . slices [ i ]  )  ;", "map . incrementAndGet ( data . slices [ i ]  . getBase (  )  )  ;", "}", "return   map ;", "}", "METHOD_END"], "methodName": ["benchmarkInserts"], "fileName": "com.facebook.presto.array.BenchmarkReferenceCountMap"}, {"methodBody": ["METHOD_START", "{", "Options   options    =    new   OptionsBuilder (  )  . verbosity ( NORMAL )  . warmupMode ( BULK )  . include (  (  (  \"  .  *  \"     +     ( BenchmarkReferenceCountMap . class . getSimpleName (  )  )  )     +     \"  .  *  \"  )  )  . addProfiler ( GCProfiler . class )  . jvmArgs (  \"  - XX :  + UseG 1 GC \"  )  . build (  )  ;", "new   Runner ( options )  . run (  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.array.BenchmarkReferenceCountMap"}, {"methodBody": ["METHOD_START", "{", "return    (  ( int )     ( index    &     ( BigArrays . SEGMENT _ MASK )  )  )  ;", "}", "METHOD_END"], "methodName": ["offset"], "fileName": "com.facebook.presto.array.BigArrays"}, {"methodBody": ["METHOD_START", "{", "return    (  ( int )     ( index    >  >  >     ( BigArrays . SEGMENT _ SHIFT )  )  )  ;", "}", "METHOD_END"], "methodName": ["segment"], "fileName": "com.facebook.presto.array.BigArrays"}, {"methodBody": ["METHOD_START", "{", "array . ensureCapacity ( length )  ;", "}", "METHOD_END"], "methodName": ["ensureCapacity"], "fileName": "com.facebook.presto.array.BlockBigArray"}, {"methodBody": ["METHOD_START", "{", "return   array . get ( index )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "com.facebook.presto.array.BlockBigArray"}, {"methodBody": ["METHOD_START", "{", "Block   currentValue    =    array . get ( index )  ;", "if    ( currentValue    !  =    null )     {", "currentValue . retainedBytesForEachPart (  (    object ,    size )     -  >     {", "if    ( currentValue    =  =    object )     {", "sizeOfBlocks    -  =    size ;", "return ;", "}", "if    (  ( trackedObjects . decrementAndGet ( object )  )     =  =     0  )     {", "sizeOfBlocks    -  =    size ;", "}", "}  )  ;", "}", "if    ( value    !  =    null )     {", "value . retainedBytesForEachPart (  (    object ,    size )     -  >     {", "if    ( value    =  =    object )     {", "sizeOfBlocks    +  =    size ;", "return ;", "}", "if    (  ( trackedObjects . incrementAndGet ( object )  )     =  =     1  )     {", "sizeOfBlocks    +  =    size ;", "}", "}  )  ;", "}", "array . set ( index ,    value )  ;", "}", "METHOD_END"], "methodName": ["set"], "fileName": "com.facebook.presto.array.BlockBigArray"}, {"methodBody": ["METHOD_START", "{", "return    (  (  ( BlockBigArray . INSTANCE _ SIZE )     +     ( array . sizeOf (  )  )  )     +     ( sizeOfBlocks )  )     +     ( trackedObjects . sizeOf (  )  )  ;", "}", "METHOD_END"], "methodName": ["sizeOf"], "fileName": "com.facebook.presto.array.BlockBigArray"}, {"methodBody": ["METHOD_START", "{", "boolean [  ]    newSegment    =    new   boolean [ BigArrays . SEGMENT _ SIZE ]  ;", "if    ( initialValue )     {", "Arrays . fill ( newSegment ,    initialValue )  ;", "}", "array [ segments ]     =    newSegment ;", "capacity    +  =    BigArrays . SEGMENT _ SIZE ;", "( segments )  +  +  ;", "}", "METHOD_END"], "methodName": ["allocateNewSegment"], "fileName": "com.facebook.presto.array.BooleanBigArray"}, {"methodBody": ["METHOD_START", "{", "if    (  ( capacity )     >    length )     {", "return ;", "}", "grow ( length )  ;", "}", "METHOD_END"], "methodName": ["ensureCapacity"], "fileName": "com.facebook.presto.array.BooleanBigArray"}, {"methodBody": ["METHOD_START", "{", "return   array [ BigArrays . segment ( index )  ]  [ BigArrays . offset ( index )  ]  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "com.facebook.presto.array.BooleanBigArray"}, {"methodBody": ["METHOD_START", "{", "int   requiredSegments    =     ( BigArrays . segment ( length )  )     +     1  ;", "if    (  ( array . length )     <    requiredSegments )     {", "array    =    Arrays . copyOf ( array ,    requiredSegments )  ;", "}", "while    (  ( segments )     <    requiredSegments )     {", "allocateNewSegment (  )  ;", "}", "}", "METHOD_END"], "methodName": ["grow"], "fileName": "com.facebook.presto.array.BooleanBigArray"}, {"methodBody": ["METHOD_START", "{", "array [ BigArrays . segment ( index )  ]  [ BigArrays . offset ( index )  ]     =    value ;", "}", "METHOD_END"], "methodName": ["set"], "fileName": "com.facebook.presto.array.BooleanBigArray"}, {"methodBody": ["METHOD_START", "{", "return    (  ( BooleanBigArray . INSTANCE _ SIZE )     +     ( SizeOf . sizeOf ( array )  )  )     +     (  ( segments )     *     ( BooleanBigArray . SIZE _ OF _ SEGMENT )  )  ;", "}", "METHOD_END"], "methodName": ["sizeOf"], "fileName": "com.facebook.presto.array.BooleanBigArray"}, {"methodBody": ["METHOD_START", "{", "byte [  ]    newSegment    =    new   byte [ BigArrays . SEGMENT _ SIZE ]  ;", "if    (  ( initialValue )     !  =     0  )     {", "Arrays . fill ( newSegment ,    initialValue )  ;", "}", "array [ segments ]     =    newSegment ;", "capacity    +  =    BigArrays . SEGMENT _ SIZE ;", "( segments )  +  +  ;", "}", "METHOD_END"], "methodName": ["allocateNewSegment"], "fileName": "com.facebook.presto.array.ByteBigArray"}, {"methodBody": ["METHOD_START", "{", "if    (  ( capacity )     >    length )     {", "return ;", "}", "grow ( length )  ;", "}", "METHOD_END"], "methodName": ["ensureCapacity"], "fileName": "com.facebook.presto.array.ByteBigArray"}, {"methodBody": ["METHOD_START", "{", "return   array [ BigArrays . segment ( index )  ]  [ BigArrays . offset ( index )  ]  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "com.facebook.presto.array.ByteBigArray"}, {"methodBody": ["METHOD_START", "{", "int   requiredSegments    =     ( BigArrays . segment ( length )  )     +     1  ;", "if    (  ( array . length )     <    requiredSegments )     {", "array    =    Arrays . copyOf ( array ,    requiredSegments )  ;", "}", "while    (  ( segments )     <    requiredSegments )     {", "allocateNewSegment (  )  ;", "}", "}", "METHOD_END"], "methodName": ["grow"], "fileName": "com.facebook.presto.array.ByteBigArray"}, {"methodBody": ["METHOD_START", "{", "array [ BigArrays . segment ( index )  ]  [ BigArrays . offset ( index )  ]     =    value ;", "}", "METHOD_END"], "methodName": ["set"], "fileName": "com.facebook.presto.array.ByteBigArray"}, {"methodBody": ["METHOD_START", "{", "return    (  ( ByteBigArray . INSTANCE _ SIZE )     +     ( SizeOf . sizeOf ( array )  )  )     +     (  ( segments )     *     ( ByteBigArray . SIZE _ OF _ SEGMENT )  )  ;", "}", "METHOD_END"], "methodName": ["sizeOf"], "fileName": "com.facebook.presto.array.ByteBigArray"}, {"methodBody": ["METHOD_START", "{", "array [ BigArrays . segment ( index )  ]  [ BigArrays . offset ( index )  ]     +  =    value ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.facebook.presto.array.DoubleBigArray"}, {"methodBody": ["METHOD_START", "{", "double [  ]    newSegment    =    new   double [ BigArrays . SEGMENT _ SIZE ]  ;", "if    (  ( initialValue )     !  =     0  .  0  )     {", "Arrays . fill ( newSegment ,    initialValue )  ;", "}", "array [ segments ]     =    newSegment ;", "capacity    +  =    BigArrays . SEGMENT _ SIZE ;", "( segments )  +  +  ;", "}", "METHOD_END"], "methodName": ["allocateNewSegment"], "fileName": "com.facebook.presto.array.DoubleBigArray"}, {"methodBody": ["METHOD_START", "{", "if    (  ( capacity )     >    length )     {", "return ;", "}", "grow ( length )  ;", "}", "METHOD_END"], "methodName": ["ensureCapacity"], "fileName": "com.facebook.presto.array.DoubleBigArray"}, {"methodBody": ["METHOD_START", "{", "return   array [ BigArrays . segment ( index )  ]  [ BigArrays . offset ( index )  ]  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "com.facebook.presto.array.DoubleBigArray"}, {"methodBody": ["METHOD_START", "{", "int   requiredSegments    =     ( BigArrays . segment ( length )  )     +     1  ;", "if    (  ( array . length )     <    requiredSegments )     {", "array    =    Arrays . copyOf ( array ,    requiredSegments )  ;", "}", "while    (  ( segments )     <    requiredSegments )     {", "allocateNewSegment (  )  ;", "}", "}", "METHOD_END"], "methodName": ["grow"], "fileName": "com.facebook.presto.array.DoubleBigArray"}, {"methodBody": ["METHOD_START", "{", "array [ BigArrays . segment ( index )  ]  [ BigArrays . offset ( index )  ]     =    value ;", "}", "METHOD_END"], "methodName": ["set"], "fileName": "com.facebook.presto.array.DoubleBigArray"}, {"methodBody": ["METHOD_START", "{", "return    (  ( DoubleBigArray . INSTANCE _ SIZE )     +     ( SizeOf . sizeOf ( array )  )  )     +     (  ( segments )     *     ( DoubleBigArray . SIZE _ OF _ SEGMENT )  )  ;", "}", "METHOD_END"], "methodName": ["sizeOf"], "fileName": "com.facebook.presto.array.DoubleBigArray"}, {"methodBody": ["METHOD_START", "{", "array [ BigArrays . segment ( index )  ]  [ BigArrays . offset ( index )  ]     +  =    value ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.facebook.presto.array.IntBigArray"}, {"methodBody": ["METHOD_START", "{", "int [  ]    newSegment    =    new   int [ BigArrays . SEGMENT _ SIZE ]  ;", "if    (  ( initialValue )     !  =     0  )     {", "Arrays . fill ( newSegment ,    initialValue )  ;", "}", "array [ segments ]     =    newSegment ;", "capacity    +  =    BigArrays . SEGMENT _ SIZE ;", "( segments )  +  +  ;", "}", "METHOD_END"], "methodName": ["allocateNewSegment"], "fileName": "com.facebook.presto.array.IntBigArray"}, {"methodBody": ["METHOD_START", "{", "if    (  ( capacity )     >    length )     {", "return ;", "}", "grow ( length )  ;", "}", "METHOD_END"], "methodName": ["ensureCapacity"], "fileName": "com.facebook.presto.array.IntBigArray"}, {"methodBody": ["METHOD_START", "{", "for    ( int [  ]    ints    :    array )     {", "if    ( ints    =  =    null )     {", "return ;", "}", "Arrays . fill ( ints ,    value )  ;", "}", "}", "METHOD_END"], "methodName": ["fill"], "fileName": "com.facebook.presto.array.IntBigArray"}, {"methodBody": ["METHOD_START", "{", "return   array [ BigArrays . segment ( index )  ]  [ BigArrays . offset ( index )  ]  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "com.facebook.presto.array.IntBigArray"}, {"methodBody": ["METHOD_START", "{", "return   array ;", "}", "METHOD_END"], "methodName": ["getSegments"], "fileName": "com.facebook.presto.array.IntBigArray"}, {"methodBody": ["METHOD_START", "{", "int   requiredSegments    =     ( BigArrays . segment ( length )  )     +     1  ;", "if    (  ( array . length )     <    requiredSegments )     {", "array    =    Arrays . copyOf ( array ,    requiredSegments )  ;", "}", "while    (  ( segments )     <    requiredSegments )     {", "allocateNewSegment (  )  ;", "}", "}", "METHOD_END"], "methodName": ["grow"], "fileName": "com.facebook.presto.array.IntBigArray"}, {"methodBody": ["METHOD_START", "{", "( array [ BigArrays . segment ( index )  ]  [ BigArrays . offset ( index )  ]  )  +  +  ;", "}", "METHOD_END"], "methodName": ["increment"], "fileName": "com.facebook.presto.array.IntBigArray"}, {"methodBody": ["METHOD_START", "{", "array [ BigArrays . segment ( index )  ]  [ BigArrays . offset ( index )  ]     =    value ;", "}", "METHOD_END"], "methodName": ["set"], "fileName": "com.facebook.presto.array.IntBigArray"}, {"methodBody": ["METHOD_START", "{", "return    (  ( IntBigArray . INSTANCE _ SIZE )     +     ( SizeOf . sizeOf ( array )  )  )     +     (  ( segments )     *     ( IntBigArray . SIZE _ OF _ SEGMENT )  )  ;", "}", "METHOD_END"], "methodName": ["sizeOf"], "fileName": "com.facebook.presto.array.IntBigArray"}, {"methodBody": ["METHOD_START", "{", "IntBigArrays . quickSort ( array ,    from ,    to ,    comparator )  ;", "}", "METHOD_END"], "methodName": ["sort"], "fileName": "com.facebook.presto.array.IntBigArray"}, {"methodBody": ["METHOD_START", "{", "return    (  ( int )     ( index    &     ( IntBigArrays . SEGMENT _ MASK )  )  )  ;", "}", "METHOD_END"], "methodName": ["displacement"], "fileName": "com.facebook.presto.array.IntBigArrays"}, {"methodBody": ["METHOD_START", "{", "return   array [ IntBigArrays . segment ( index )  ]  [ IntBigArrays . displacement ( index )  ]  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "com.facebook.presto.array.IntBigArrays"}, {"methodBody": ["METHOD_START", "{", "int   ab    =    comp . compare ( IntBigArrays . get ( x ,    a )  ,    IntBigArrays . get ( x ,    b )  )  ;", "int   ac    =    comp . compare ( IntBigArrays . get ( x ,    a )  ,    IntBigArrays . get ( x ,    c )  )  ;", "int   bc    =    comp . compare ( IntBigArrays . get ( x ,    b )  ,    IntBigArrays . get ( x ,    c )  )  ;", "return   ab    <     0     ?    bc    <     0     ?    b    :    ac    <     0     ?    c    :    a    :    bc    >     0     ?    b    :    ac    >     0     ?    c    :    a ;", "}", "METHOD_END"], "methodName": ["med3"], "fileName": "com.facebook.presto.array.IntBigArrays"}, {"methodBody": ["METHOD_START", "{", "final   long   len    =    to    -    from ;", "if    ( len    <     (  . SMALL )  )     {", ". selectionSort ( x ,    from ,    to ,    comp )  ;", "return ;", "}", "long   m    =    from    +     ( len    /     2  )  ;", "if    ( len    >     (  . SMALL )  )     {", "long   l    =    from ;", "long   n    =    to    -     1  ;", "if    ( len    >     (  . MEDIUM )  )     {", "long   s    =    len    /     8  ;", "l    =     . med 3  ( x ,    l ,     ( l    +    s )  ,     ( l    +     (  2     *    s )  )  ,    comp )  ;", "m    =     . med 3  ( x ,     ( m    -    s )  ,    m ,     ( m    +    s )  ,    comp )  ;", "n    =     . med 3  ( x ,     ( n    -     (  2     *    s )  )  ,     ( n    -    s )  ,    n ,    comp )  ;", "}", "m    =     . med 3  ( x ,    l ,    m ,    n ,    comp )  ;", "}", "final   int   v    =     . get ( x ,    m )  ;", "long   a    =    from ;", "long   b    =    a ;", "long   c    =    to    -     1  ;", "long   d    =    c ;", "while    ( true )     {", "int   comparison ;", "while    (  ( b    <  =    c )     &  &     (  ( comparison    =    comp . compare (  . get ( x ,    b )  ,    v )  )     <  =     0  )  )     {", "if    ( comparison    =  =     0  )     {", ". swap ( x ,     ( a +  +  )  ,    b )  ;", "}", "b +  +  ;", "}", "while    (  ( c    >  =    b )     &  &     (  ( comparison    =    comp . compare (  . get ( x ,    c )  ,    v )  )     >  =     0  )  )     {", "if    ( comparison    =  =     0  )     {", ". swap ( x ,    c ,     ( d -  -  )  )  ;", "}", "c -  -  ;", "}", "if    ( b    >    c )     {", "break ;", "}", ". swap ( x ,     ( b +  +  )  ,     ( c -  -  )  )  ;", "}", "long   s ;", "long   n    =    to ;", "s    =    Math . min (  ( a    -    from )  ,     ( b    -    a )  )  ;", ". vecSwap ( x ,    from ,     ( b    -    s )  ,    s )  ;", "s    =    Math . min (  ( d    -    c )  ,     (  ( n    -    d )     -     1  )  )  ;", ". vecSwap ( x ,    b ,     ( n    -    s )  ,    s )  ;", "if    (  ( s    =    b    -    a )     >     1  )     {", ". quickSort ( x ,    from ,     ( from    +    s )  ,    comp )  ;", "}", "if    (  ( s    =    d    -    c )     >     1  )     {", ". quickSort ( x ,     ( n    -    s )  ,    n ,    comp )  ;", "}", "}", "METHOD_END"], "methodName": ["quickSort"], "fileName": "com.facebook.presto.array.IntBigArrays"}, {"methodBody": ["METHOD_START", "{", "return    (  ( int )     ( index    >  >  >     ( BigArrays . SEGMENT _ SHIFT )  )  )  ;", "}", "METHOD_END"], "methodName": ["segment"], "fileName": "com.facebook.presto.array.IntBigArrays"}, {"methodBody": ["METHOD_START", "{", "for    ( long   i    =    from ;    i    <     ( to    -     1  )  ;    i +  +  )     {", "long   m    =    i ;", "for    ( long   j    =    i    +     1  ;    j    <    to ;    j +  +  )     {", "if    (  ( comp . compare (  . get ( a ,    j )  ,     . get ( a ,    m )  )  )     <     0  )     {", "m    =    j ;", "}", "}", "if    ( m    !  =    i )     {", ". swap ( a ,    i ,    m )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["selectionSort"], "fileName": "com.facebook.presto.array.IntBigArrays"}, {"methodBody": ["METHOD_START", "{", "array [ IntBigArrays . segment ( index )  ]  [ IntBigArrays . displacement ( index )  ]     =    value ;", "}", "METHOD_END"], "methodName": ["set"], "fileName": "com.facebook.presto.array.IntBigArrays"}, {"methodBody": ["METHOD_START", "{", "final   int   t    =    array [ IntBigArrays . segment ( first )  ]  [ IntBigArrays . displacement ( first )  ]  ;", "array [ IntBigArrays . segment ( first )  ]  [ IntBigArrays . displacement ( first )  ]     =    array [ IntBigArrays . segment ( second )  ]  [ IntBigArrays . displacement ( second )  ]  ;", "array [ IntBigArrays . segment ( second )  ]  [ IntBigArrays . displacement ( second )  ]     =    t ;", "}", "METHOD_END"], "methodName": ["swap"], "fileName": "com.facebook.presto.array.IntBigArrays"}, {"methodBody": ["METHOD_START", "{", "for    ( int   i    =     0  ;    i    <    n ;    i +  +     ,    a +  +     ,    b +  +  )     {", ". swap ( x ,    a ,    b )  ;", "}", "}", "METHOD_END"], "methodName": ["vecSwap"], "fileName": "com.facebook.presto.array.IntBigArrays"}, {"methodBody": ["METHOD_START", "{", "array [ BigArrays . segment ( index )  ]  [ BigArrays . offset ( index )  ]     +  =    value ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.facebook.presto.array.LongBigArray"}, {"methodBody": ["METHOD_START", "{", "long [  ]    newSegment    =    new   long [ BigArrays . SEGMENT _ SIZE ]  ;", "if    (  ( initialValue )     !  =     0  )     {", "Arrays . fill ( newSegment ,    initialValue )  ;", "}", "array [ segments ]     =    newSegment ;", "capacity    +  =    BigArrays . SEGMENT _ SIZE ;", "( segments )  +  +  ;", "}", "METHOD_END"], "methodName": ["allocateNewSegment"], "fileName": "com.facebook.presto.array.LongBigArray"}, {"methodBody": ["METHOD_START", "{", "if    (  ( capacity )     >    length )     {", "return ;", "}", "grow ( length )  ;", "}", "METHOD_END"], "methodName": ["ensureCapacity"], "fileName": "com.facebook.presto.array.LongBigArray"}, {"methodBody": ["METHOD_START", "{", "return   array [ BigArrays . segment ( index )  ]  [ BigArrays . offset ( index )  ]  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "com.facebook.presto.array.LongBigArray"}, {"methodBody": ["METHOD_START", "{", "int   requiredSegments    =     ( BigArrays . segment ( length )  )     +     1  ;", "if    (  ( array . length )     <    requiredSegments )     {", "array    =    Arrays . copyOf ( array ,    requiredSegments )  ;", "}", "while    (  ( segments )     <    requiredSegments )     {", "allocateNewSegment (  )  ;", "}", "}", "METHOD_END"], "methodName": ["grow"], "fileName": "com.facebook.presto.array.LongBigArray"}, {"methodBody": ["METHOD_START", "{", "( array [ BigArrays . segment ( index )  ]  [ BigArrays . offset ( index )  ]  )  +  +  ;", "}", "METHOD_END"], "methodName": ["increment"], "fileName": "com.facebook.presto.array.LongBigArray"}, {"methodBody": ["METHOD_START", "{", "array [ BigArrays . segment ( index )  ]  [ BigArrays . offset ( index )  ]     =    value ;", "}", "METHOD_END"], "methodName": ["set"], "fileName": "com.facebook.presto.array.LongBigArray"}, {"methodBody": ["METHOD_START", "{", "return    (  ( LongBigArray . INSTANCE _ SIZE )     +     ( SizeOf . sizeOf ( array )  )  )     +     (  ( segments )     *     ( LongBigArray . SIZE _ OF _ SEGMENT )  )  ;", "}", "METHOD_END"], "methodName": ["sizeOf"], "fileName": "com.facebook.presto.array.LongBigArray"}, {"methodBody": ["METHOD_START", "{", "Object [  ]    newSegment    =    new   Object [ BigArrays . SEGMENT _ SIZE ]  ;", "if    (  ( initialValue )     !  =    null )     {", "Arrays . fill ( newSegment ,    initialValue )  ;", "}", "array [ segments ]     =    newSegment ;", "capacity    +  =    BigArrays . SEGMENT _ SIZE ;", "( segments )  +  +  ;", "}", "METHOD_END"], "methodName": ["allocateNewSegment"], "fileName": "com.facebook.presto.array.ObjectBigArray"}, {"methodBody": ["METHOD_START", "{", "if    (  ( capacity )     >    length )     {", "return ;", "}", "grow ( length )  ;", "}", "METHOD_END"], "methodName": ["ensureCapacity"], "fileName": "com.facebook.presto.array.ObjectBigArray"}, {"methodBody": ["METHOD_START", "{", "return    (  ( T )     ( array [ BigArrays . segment ( index )  ]  [ BigArrays . offset ( index )  ]  )  )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "com.facebook.presto.array.ObjectBigArray"}, {"methodBody": ["METHOD_START", "{", "int   requiredSegments    =     ( BigArrays . segment ( length )  )     +     1  ;", "if    (  ( array . length )     <    requiredSegments )     {", "array    =    Arrays . copyOf ( array ,    requiredSegments )  ;", "}", "while    (  ( segments )     <    requiredSegments )     {", "allocateNewSegment (  )  ;", "}", "}", "METHOD_END"], "methodName": ["grow"], "fileName": "com.facebook.presto.array.ObjectBigArray"}, {"methodBody": ["METHOD_START", "{", "array [ BigArrays . segment ( index )  ]  [ BigArrays . offset ( index )  ]     =    value ;", "}", "METHOD_END"], "methodName": ["set"], "fileName": "com.facebook.presto.array.ObjectBigArray"}, {"methodBody": ["METHOD_START", "{", "return    (  ( ObjectBigArray . INSTANCE _ SIZE )     +     ( SizeOf . sizeOf ( array )  )  )     +     (  ( segments )     *     ( ObjectBigArray . SIZE _ OF _ SEGMENT )  )  ;", "}", "METHOD_END"], "methodName": ["sizeOf"], "fileName": "com.facebook.presto.array.ObjectBigArray"}, {"methodBody": ["METHOD_START", "{", "long   hashCode    =    ReferenceCountMap . getHashCode ( key )  ;", "int   previousCount    =    addTo ( hashCode ,     (  -  1  )  )  ;", "if    ( previousCount    =  =     1  )     {", "remove ( hashCode )  ;", "}", "return   previousCount    -     1  ;", "}", "METHOD_END"], "methodName": ["decrementAndGet"], "fileName": "com.facebook.presto.array.ReferenceCountMap"}, {"methodBody": ["METHOD_START", "{", "int   extraIdentity ;", "if    ( key    =  =    null )     {", "extraIdentity    =     0  ;", "} else", "if    ( key   instanceof   spi . block . Block )     {", "extraIdentity    =     (  ( int )     (  (  ( spi . block . Block )     ( key )  )  . getRetainedSizeInBytes (  )  )  )  ;", "} else", "if    ( key   instanceof   io . airlift . slice . Slice )     {", "extraIdentity    =     (  ( int )     (  (  ( io . airlift . slice . Slice )     ( key )  )  . getRetainedSize (  )  )  )  ;", "} else", "if    ( key . getClass (  )  . isArray (  )  )     {", "extraIdentity    =    getLength ( key )  ;", "} else    {", "throw   new   IllegalArgumentException ( String . format (  \" Unsupported   type   for    % s \"  ,    key )  )  ;", "}", "return    (  (  ( long )     ( System . identityHashCode ( key )  )  )     <  <     ( Integer . SIZE )  )     +    extraIdentity ;", "}", "METHOD_END"], "methodName": ["getHashCode"], "fileName": "com.facebook.presto.array.ReferenceCountMap"}, {"methodBody": ["METHOD_START", "{", "return    ( addTo ( ReferenceCountMap . getHashCode ( key )  ,     1  )  )     +     1  ;", "}", "METHOD_END"], "methodName": ["incrementAndGet"], "fileName": "com.facebook.presto.array.ReferenceCountMap"}, {"methodBody": ["METHOD_START", "{", "return    (  (  ( ReferenceCountMap . INSTANCE _ SIZE )     +     ( SizeOf . sizeOf ( key )  )  )     +     ( SizeOf . sizeOf ( value )  )  )     +     ( SizeOf . sizeOf ( used )  )  ;", "}", "METHOD_END"], "methodName": ["sizeOf"], "fileName": "com.facebook.presto.array.ReferenceCountMap"}, {"methodBody": ["METHOD_START", "{", "array [ BigArrays . segment ( index )  ]  [ BigArrays . offset ( index )  ]     +  =    value ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.facebook.presto.array.ShortBigArray"}, {"methodBody": ["METHOD_START", "{", "short [  ]    newSegment    =    new   short [ BigArrays . SEGMENT _ SIZE ]  ;", "if    (  ( initialValue )     !  =     0  )     {", "Arrays . fill ( newSegment ,    initialValue )  ;", "}", "array [ segments ]     =    newSegment ;", "capacity    +  =    BigArrays . SEGMENT _ SIZE ;", "( segments )  +  +  ;", "}", "METHOD_END"], "methodName": ["allocateNewSegment"], "fileName": "com.facebook.presto.array.ShortBigArray"}, {"methodBody": ["METHOD_START", "{", "if    (  ( capacity )     >    length )     {", "return ;", "}", "grow ( length )  ;", "}", "METHOD_END"], "methodName": ["ensureCapacity"], "fileName": "com.facebook.presto.array.ShortBigArray"}, {"methodBody": ["METHOD_START", "{", "return   array [ BigArrays . segment ( index )  ]  [ BigArrays . offset ( index )  ]  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "com.facebook.presto.array.ShortBigArray"}, {"methodBody": ["METHOD_START", "{", "int   requiredSegments    =     ( BigArrays . segment ( length )  )     +     1  ;", "if    (  ( array . length )     <    requiredSegments )     {", "array    =    Arrays . copyOf ( array ,    requiredSegments )  ;", "}", "while    (  ( segments )     <    requiredSegments )     {", "allocateNewSegment (  )  ;", "}", "}", "METHOD_END"], "methodName": ["grow"], "fileName": "com.facebook.presto.array.ShortBigArray"}, {"methodBody": ["METHOD_START", "{", "( array [ BigArrays . segment ( index )  ]  [ BigArrays . offset ( index )  ]  )  +  +  ;", "}", "METHOD_END"], "methodName": ["increment"], "fileName": "com.facebook.presto.array.ShortBigArray"}, {"methodBody": ["METHOD_START", "{", "array [ BigArrays . segment ( index )  ]  [ BigArrays . offset ( index )  ]     =    value ;", "}", "METHOD_END"], "methodName": ["set"], "fileName": "com.facebook.presto.array.ShortBigArray"}, {"methodBody": ["METHOD_START", "{", "return    (  ( ShortBigArray . INSTANCE _ SIZE )     +     ( SizeOf . sizeOf ( array )  )  )     +     (  ( segments )     *     ( ShortBigArray . SIZE _ OF _ SEGMENT )  )  ;", "}", "METHOD_END"], "methodName": ["sizeOf"], "fileName": "com.facebook.presto.array.ShortBigArray"}, {"methodBody": ["METHOD_START", "{", "array . ensureCapacity ( length )  ;", "}", "METHOD_END"], "methodName": ["ensureCapacity"], "fileName": "com.facebook.presto.array.SliceBigArray"}, {"methodBody": ["METHOD_START", "{", "return   array . get ( index )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "com.facebook.presto.array.SliceBigArray"}, {"methodBody": ["METHOD_START", "{", "updateRetainedSize ( index ,    value )  ;", "set ( index ,    value )  ;", "}", "METHOD_END"], "methodName": ["set"], "fileName": "com.facebook.presto.array.SliceBigArray"}, {"methodBody": ["METHOD_START", "{", "return    (  (  ( SliceBigArray . INSTANCE _ SIZE )     +     ( array . sizeOf (  )  )  )     +     ( sizeOfSlices )  )     +     ( trackedSlices . sizeOf (  )  )  ;", "}", "METHOD_END"], "methodName": ["sizeOf"], "fileName": "com.facebook.presto.array.SliceBigArray"}, {"methodBody": ["METHOD_START", "{", "Slice   currentValue    =    array . get ( index )  ;", "if    ( currentValue    !  =    null )     {", "int   baseReferenceCount    =    trackedSlices . decrementAndGet ( currentValue . getBase (  )  )  ;", "int   sliceReferenceCount    =    trackedSlices . decrementAndGet ( currentValue )  ;", "if    ( baseReferenceCount    =  =     0  )     {", "sizeOfSlices    -  =    currentValue . getRetainedSize (  )  ;", "} else", "if    ( sliceReferenceCount    =  =     0  )     {", "sizeOfSlices    -  =     . SLICE _ INSTANCE _ SIZE ;", "}", "}", "if    ( value    !  =    null )     {", "int   baseReferenceCount    =    trackedSlices . incrementAndGet ( value . getBase (  )  )  ;", "int   sliceReferenceCount    =    trackedSlices . incrementAndGet ( value )  ;", "if    ( baseReferenceCount    =  =     1  )     {", "sizeOfSlices    +  =    value . getRetainedSize (  )  ;", "} else", "if    ( sliceReferenceCount    =  =     1  )     {", "sizeOfSlices    +  =     . SLICE _ INSTANCE _ SIZE ;", "}", "}", "}", "METHOD_END"], "methodName": ["updateRetainedSize"], "fileName": "com.facebook.presto.array.SliceBigArray"}, {"methodBody": ["METHOD_START", "{", "int   entries    =     1  2  3  ;", "BlockBuilder   blockBuilder    =    new   IntArrayBlockBuilder ( null ,    entries )  ;", "for    ( int   i    =     0  ;    i    <    entries ;    i +  +  )     {", "blockBuilder . writeInt ( i )  ;", "}", "Block   block    =    blockBuilder . build (  )  ;", "int   arraySize    =     4  5  6  ;", "int   blocks    =     7  8  9  0  ;", "blockBigArray    =    new    (  )  ;", "blockBigArray . ensureCapacity ( arraySize )  ;", "for    ( int   i    =     0  ;    i    <    blocks ;    i +  +  )     {", "blockBigArray . set (  ( i    %    arraySize )  ,    block . getRegion (  0  ,    entries )  )  ;", "}", "ReferenceCountMap   referenceCountMap    =    new   ReferenceCountMap (  )  ;", "referenceCountMap . incrementAndGet ( block )  ;", "long   expectedSize    =     (  (  (  ( ClassLayout . parseClass (  . class )  . instanceSize (  )  )     +     ( referenceCountMap . sizeOf (  )  )  )     +     ( new   ObjectBigArray (  )  . sizeOf (  )  )  )     +     ( block . getRetainedSizeInBytes (  )  )  )     +     (  ( arraySize    -     1  )     *     ( ClassLayout . parseClass ( block . getClass (  )  )  . instanceSize (  )  )  )  ;", "assertEquals ( blockBigArray . sizeOf (  )  ,    expectedSize )  ;", "}", "METHOD_END"], "methodName": ["testRetainedSizeWithOverlappingBlocks"], "fileName": "com.facebook.presto.array.TestBlockBigArray"}, {"methodBody": ["METHOD_START", "{", "sliceBigArray    =    new   SliceBigArray (  )  ;", "sliceBigArray . ensureCapacity (  . CAPACITY )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.array.TestSliceBigArray"}, {"methodBody": ["METHOD_START", "{", "sliceBigArray . set (  0  ,    null )  ;", "assertEquals ( sliceBigArray . sizeOf (  )  ,     . BIG _ ARRAY _ INSTANCE _ SIZE )  ;", "sliceBigArray . set (  0  ,    Slices . wrappedBuffer ( secondBytes ,     2  0  1  ,     1  5  0  1  )  )  ;", "assertEquals ( sliceBigArray . sizeOf (  )  ,     (  (  (  . BIG _ ARRAY _ INSTANCE _ SIZE )     +     ( SizeOf . sizeOf ( secondBytes )  )  )     +     (  . SLICE _ INSTANCE _ SIZE )  )  )  ;", "sliceBigArray . set (  1  ,    Slices . wrappedBuffer ( secondBytes ,     2  0  1  ,     1  5  0  1  )  )  ;", "assertEquals ( sliceBigArray . sizeOf (  )  ,     (  (  (  . BIG _ ARRAY _ INSTANCE _ SIZE )     +     ( SizeOf . sizeOf ( secondBytes )  )  )     +     (  (  . SLICE _ INSTANCE _ SIZE )     *     2  )  )  )  ;", "sliceBigArray . set (  1  ,    null )  ;", "assertEquals ( sliceBigArray . sizeOf (  )  ,     (  (  (  . BIG _ ARRAY _ INSTANCE _ SIZE )     +     ( SizeOf . sizeOf ( secondBytes )  )  )     +     (  . SLICE _ INSTANCE _ SIZE )  )  )  ;", "}", "METHOD_END"], "methodName": ["testNullSlicesRetainedSize"], "fileName": "com.facebook.presto.array.TestSliceBigArray"}, {"methodBody": ["METHOD_START", "{", "sliceBigArray . set (  0  ,    Slices . wrappedBuffer ( firstBytes ,     0  ,     1  0  0  )  )  ;", "sliceBigArray . set (  1  ,    Slices . wrappedBuffer ( secondBytes ,     0  ,     1  0  0  )  )  ;", "assertEquals ( sliceBigArray . sizeOf (  )  ,     (  (  (  (  . BIG _ ARRAY _ INSTANCE _ SIZE )     +     ( SizeOf . sizeOf ( firstBytes )  )  )     +     ( SizeOf . sizeOf ( secondBytes )  )  )     +     (  (  . SLICE _ INSTANCE _ SIZE )     *     2  )  )  )  ;", "sliceBigArray . set (  2  ,    Slices . wrappedBuffer ( firstBytes ,     1  0  0  ,     2  0  0  )  )  ;", "sliceBigArray . set (  3  ,    Slices . wrappedBuffer ( secondBytes ,     2  0  ,     1  5  0  )  )  ;", "assertEquals ( sliceBigArray . sizeOf (  )  ,     (  (  (  (  . BIG _ ARRAY _ INSTANCE _ SIZE )     +     ( SizeOf . sizeOf ( firstBytes )  )  )     +     ( SizeOf . sizeOf ( secondBytes )  )  )     +     (  (  . SLICE _ INSTANCE _ SIZE )     *     4  )  )  )  ;", "sliceBigArray . set (  2  ,    Slices . wrappedBuffer ( firstBytes ,     1  1  ,     1  2  0  0  )  )  ;", "sliceBigArray . set (  3  ,    Slices . wrappedBuffer ( secondBytes ,     2  0  1  ,     1  5  0  1  )  )  ;", "assertEquals ( sliceBigArray . sizeOf (  )  ,     (  (  (  (  . BIG _ ARRAY _ INSTANCE _ SIZE )     +     ( SizeOf . sizeOf ( firstBytes )  )  )     +     ( SizeOf . sizeOf ( secondBytes )  )  )     +     (  (  . SLICE _ INSTANCE _ SIZE )     *     4  )  )  )  ;", "sliceBigArray . set (  0  ,    Slices . wrappedBuffer ( secondBytes ,     1  1  ,     1  2  0  0  )  )  ;", "sliceBigArray . set (  2  ,    Slices . wrappedBuffer ( secondBytes ,     2  0  1  ,     1  5  0  1  )  )  ;", "assertEquals ( sliceBigArray . sizeOf (  )  ,     (  (  (  . BIG _ ARRAY _ INSTANCE _ SIZE )     +     ( SizeOf . sizeOf ( secondBytes )  )  )     +     (  (  . SLICE _ INSTANCE _ SIZE )     *     4  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testRetainedSize"], "fileName": "com.facebook.presto.array.TestSliceBigArray"}, {"methodBody": ["METHOD_START", "{", "Slice   slice    =    Slices . wrappedBuffer ( secondBytes ,     2  0  1  ,     1  5  0  1  )  ;", "for    ( int   i    =     0  ;    i    <     (  . CAPACITY )  ;    i +  +  )     {", "sliceBigArray . set ( i ,    slice )  ;", "assertEquals ( sliceBigArray . sizeOf (  )  ,     (  (  (  . BIG _ ARRAY _ INSTANCE _ SIZE )     +     ( SizeOf . sizeOf ( secondBytes )  )  )     +     (  . SLICE _ INSTANCE _ SIZE )  )  )  ;", "}", "slice    =    Slices . wrappedBuffer ( secondBytes ,     2  0  1  ,     1  5  0  1  )  ;", "sliceBigArray . set (  3  ,    slice )  ;", "assertEquals ( sliceBigArray . sizeOf (  )  ,     (  (  (  . BIG _ ARRAY _ INSTANCE _ SIZE )     +     ( SizeOf . sizeOf ( secondBytes )  )  )     +     (  (  . SLICE _ INSTANCE _ SIZE )     *     2  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSameSliceRetainedSize"], "fileName": "com.facebook.presto.array.TestSliceBigArray"}]