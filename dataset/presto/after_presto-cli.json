[{"methodBody": ["METHOD_START", "{", "int   width    =    AlignedTablePrinter . consoleWidth ( s )  ;", "checkState (  ( width    <  =    maxWidth )  ,     \" string   width   is   greater   than   max   width \"  )  ;", "String   large    =    repeat (  \"     \"  ,     (  ( maxWidth    -    width )     +    padding )  )  ;", "String   small    =    repeat (  \"     \"  ,    padding )  ;", "return   right    ?     ( large    +    s )     +    small    :     ( small    +    s )     +    large ;", "}", "METHOD_END"], "methodName": ["align"], "fileName": "com.facebook.presto.cli.AlignedTablePrinter"}, {"methodBody": ["METHOD_START", "{", "int   width    =    AlignedTablePrinter . consoleWidth ( s )  ;", "checkState (  ( width    <  =    maxWidth )  ,     \" string   width   is   greater   than   max   width \"  )  ;", "int   left    =     ( maxWidth    -    width )     /     2  ;", "int   right    =    maxWidth    -     ( left    +    width )  ;", "return    (  ( repeat (  \"     \"  ,     ( left    +    padding )  )  )     +    s )     +     ( repeat (  \"     \"  ,     ( right    +    padding )  )  )  ;", "}", "METHOD_END"], "methodName": ["center"], "fileName": "com.facebook.presto.cli.AlignedTablePrinter"}, {"methodBody": ["METHOD_START", "{", "return   AlignedTablePrinter . consoleWidth ( new   AnsiString ( s )  )  ;", "}", "METHOD_END"], "methodName": ["consoleWidth"], "fileName": "com.facebook.presto.cli.AlignedTablePrinter"}, {"methodBody": ["METHOD_START", "{", "CharSequence   plain    =    s . getPlain (  )  ;", "n    =     0  ;", "for    (    i    =     0  ;    i    <     ( plain . length (  )  )  ;    i +  +  )     {", "n    +  =    Math . max ( WCWidth . wcwidth ( plain . charAt ( i )  )  ,     0  )  ;", "}", "return   n ;", "}", "METHOD_END"], "methodName": ["consoleWidth"], "fileName": "com.facebook.presto.cli.AlignedTablePrinter"}, {"methodBody": ["METHOD_START", "{", "String   hexDump    =    base 1  6  (  )  . lowerCase (  )  . encode ( bytes )  ;", "return    . HEX _ SPLITTER . split ( hexDump )  ;", "}", "METHOD_END"], "methodName": ["createHexPairs"], "fileName": "com.facebook.presto.cli.AlignedTablePrinter"}, {"methodBody": ["METHOD_START", "{", "return   AlignedTablePrinter . HEX _ BYTE _ JOINER . join ( AlignedTablePrinter . createHexPairs ( bytes )  )  ;", "}", "METHOD_END"], "methodName": ["formatHexDump"], "fileName": "com.facebook.presto.cli.AlignedTablePrinter"}, {"methodBody": ["METHOD_START", "{", "Iterable < String >    hexPairs    =    AlignedTablePrinter . createHexPairs ( bytes )  ;", "Iterable < List < String >  >    hexLines    =    partition ( hexPairs ,    bytesPerLine )  ;", "Iterable < String >    lines    =    transform ( hexLines ,    AlignedTablePrinter . HEX _ BYTE _ JOINER :  : join )  ;", "return   AlignedTablePrinter . HEX _ LINE _ JOINER . join ( lines )  ;", "}", "METHOD_END"], "methodName": ["formatHexDump"], "fileName": "com.facebook.presto.cli.AlignedTablePrinter"}, {"methodBody": ["METHOD_START", "{", "if    ( o    =  =    null )     {", "return    \" NULL \"  ;", "}", "if    ( o   instanceof   byte [  ]  )     {", "return    . formatHexDump (  (  ( byte [  ]  )     ( o )  )  ,     1  6  )  ;", "}", "return   o . toString (  )  ;", "}", "METHOD_END"], "methodName": ["formatValue"], "fileName": "com.facebook.presto.cli.AlignedTablePrinter"}, {"methodBody": ["METHOD_START", "{", "int   n    =     0  ;", "for    ( String   line    :     . LINE _ SPLITTER . split ( s )  )     {", "n    =    Math . max ( n ,     . consoleWidth ( line )  )  ;", "}", "return   n ;", "}", "METHOD_END"], "methodName": ["maxLineLength"], "fileName": "com.facebook.presto.cli.AlignedTablePrinter"}, {"methodBody": ["METHOD_START", "{", "Splitter   splitter    =    Splitter . on (  '  ,  '  )  . trimResults (  )  . omitEmptyStrings (  )  ;", "return   ImmutableSet . copyOf ( splitter . split ( nullToEmpty ( cTagsString )  )  )  ;", "}", "METHOD_END"], "methodName": ["parseClientTags"], "fileName": "com.facebook.presto.cli.ClientOptions"}, {"methodBody": ["METHOD_START", "{", "server    =    server . toLowerCase ( Locale . ENGLISH )  ;", "if    (  ( server . startsWith (  \" http :  /  /  \"  )  )     |  |     ( server . startsWith (  \" https :  /  /  \"  )  )  )     {", "return   URI . create ( server )  ;", "}", "HostAndPort   host    =    HostAndPort . fromString ( server )  ;", "try    {", "return   new   URI (  \" http \"  ,    null ,    host . getHost (  )  ,    host . getPortOrDefault (  8  0  )  ,    null ,    null ,    null )  ;", "}    catch    ( URISyntaxExce   e )     {", "throw   new   IllegalArgumentExce ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["parseServer"], "fileName": "com.facebook.presto.cli.ClientOptions"}, {"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . client . ClientSession ( ClientOptions . parseServer ( server )  ,    user ,    source ,    ClientOptions . parseClientTags ( clientTags )  ,    clientInfo ,    catalog ,    schema ,    TimeZone . getDefault (  )  . getID (  )  ,    Locale . getDefault (  )  ,    ClientOptions . toResourceEstimates ( resourceEstimates )  ,    ClientOptions . toProperties ( sessionProperties )  ,    Collections . emptyMap (  )  ,    null ,    clientRequestTimeout )  ;", "}", "METHOD_END"], "methodName": ["toClientSession"], "fileName": "com.facebook.presto.cli.ClientOptions"}, {"methodBody": ["METHOD_START", "{", "Builder < String ,    String >    builder    =    ImmutableMap . builder (  )  ;", "for    (  . ClientSessionProperty   sessionProperty    :    sessionProperties )     {", "String   name    =    sessionProperty . getName (  )  ;", "if    ( sessionProperty . getCatalog (  )  . isPresent (  )  )     {", "name    =     (  ( sessionProperty . getCatalog (  )  . get (  )  )     +     \"  .  \"  )     +    name ;", "}", "builder . put ( name ,    sessionProperty . getValue (  )  )  ;", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["toProperties"], "fileName": "com.facebook.presto.cli.ClientOptions"}, {"methodBody": ["METHOD_START", "{", "Builder < String ,    String >    builder    =    ImmutableMap . builder (  )  ;", "for    (  . ClientResourceEstimate   estimate    :    estimates )     {", "builder . put ( estimate . getResource (  )  ,    estimate . getEstimate (  )  )  ;", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["toResourceEstimates"], "fileName": "com.facebook.presto.cli.ClientOptions"}, {"methodBody": ["METHOD_START", "{", "return   new   StringsCompleter ( Completion . COMMANDS )  ;", "}", "METHOD_END"], "methodName": ["commandCompleter"], "fileName": "com.facebook.presto.cli.Completion"}, {"methodBody": ["METHOD_START", "{", "return   new   StringsCompleter ( Completion . COMMANDS . stream (  )  . map (  (    s )     -  >    s . toLowerCase ( Locale . ENGLISH )  )  . collect ( Collectors . toSet (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["lowerCaseCommandCompleter"], "fileName": "com.facebook.presto.cli.Completion"}, {"methodBody": ["METHOD_START", "{", "boolean   success    =    true ;", "StatementSplitter   splitter    =    new   StatementSplitter ( query )  ;", "for    ( Statement   split    :    splitter . getCompleteStatements (  )  )     {", "if    (  !  ( isEmptyStatement ( split . statement (  )  )  )  )     {", "if    (  !  (  . process ( queryRunner ,    split . statement (  )  ,    outputFormat ,     (  )     -  >     {", "}  ,    false )  )  )     {", "if    (  ! ignoreErrors )     {", "return   false ;", "}", "success    =    false ;", "}", "}", "}", "if    (  !  ( isEmptyStatement ( splitter . getPartialStatement (  )  )  )  )     {", "System . err . println (  (  \" Non - terminated   statement :     \"     +     ( splitter . getPartialStatement (  )  )  )  )  ;", "return   false ;", "}", "return   success ;", "}", "METHOD_END"], "methodName": ["executeCommand"], "fileName": "com.facebook.presto.cli.Console"}, {"methodBody": ["METHOD_START", "{", "return   Console . getHistory ( new   File ( Configuration . getUserHome (  )  ,     \"  . presto _ history \"  )  )  ;", "}", "METHOD_END"], "methodName": ["getHistory"], "fileName": "com.facebook.presto.cli.Console"}, {"methodBody": ["METHOD_START", "{", "if    (  (  !  ( historyFile . canWrite (  )  )  )     |  |     (  !  ( historyFile . canRead (  )  )  )  )     {", "System . err . printf (  (  \" WARNING :    History   file   is   not   readable / writable :     % s .     \"     +     \" History   will   not   be   available   during   this   session .  % n \"  )  ,    historyFile . getAbsolutePath (  )  )  ;", "MemoryHistory   history    =    new   MemoryHistory (  )  ;", "history . setAutoTrim ( true )  ;", "return   history ;", "}", "MemoryHistory   history ;", "try    {", "history    =    new   FileHistory ( historyFile )  ;", "history . setMaxSize (  1  0  0  0  0  )  ;", "}    catch    ( IOException   e )     {", "System . err . printf (  (  \" WARNING :    Failed   to   load   history   file    (  % s )  :     % s .     \"     +     \" History   will   not   be   available   during   this   session .  % n \"  )  ,    historyFile ,    e . getMessage (  )  )  ;", "history    =    new   MemoryHistory (  )  ;", "}", "history . setAutoTrim ( true )  ;", "return   history ;", "}", "METHOD_END"], "methodName": ["getHistory"], "fileName": "com.facebook.presto.cli.Console"}, {"methodBody": ["METHOD_START", "{", "checkState (  (  ( clientOptions . user )     !  =    null )  ,     \" Username   must   be   specified   along   with   password \"  )  ;", "String   defaultPassword    =    System . getenv (  \" PRESTO _ PASSWORD \"  )  ;", "if    ( defaultPassword    !  =    null )     {", "return   defaultPassword ;", "}", "io   console    =    System . console (  )  ;", "if    ( console    =  =    null )     {", "throw   new   RuntimeException (  \" No   console   from   which   to   read   password \"  )  ;", "}", "char [  ]    password    =    console . readPassword (  \" Password :     \"  )  ;", "if    ( password    !  =    null )     {", "return   new   String ( password )  ;", "}", "return    \"  \"  ;", "}", "METHOD_END"], "methodName": ["getPassword"], "fileName": "com.facebook.presto.cli.Console"}, {"methodBody": ["METHOD_START", "{", "PrintStream   out    =    System . out ;", "PrintStream   err    =    System . err ;", "try    {", "LoggingConfiguration   config    =    new   LoggingConfiguration (  )  ;", "if    ( logLevelsFile    =  =    null )     {", "System . setOut ( new   PrintStream ( nullOutputStream (  )  )  )  ;", "System . setErr ( new   PrintStream ( nullOutputStream (  )  )  )  ;", "config . setEnabled ( false )  ;", "} else    {", "config . setLevelsFile ( logLevelsFile )  ;", "}", "Logging   logging    =    Logging . initialize (  )  ;", "logging . configure ( config )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}    finally    {", "System . setOut ( out )  ;", "System . setErr ( err )  ;", "}", "}", "METHOD_END"], "methodName": ["initializeLogging"], "fileName": "com.facebook.presto.cli.Console"}, {"methodBody": ["METHOD_START", "{", "String   finalSql ;", "try    {", "finalSql    =    QueryPreprocessorprocessQuery ( Optional . ofNullable ( queryRunner . getSession (  )  . getCatalog (  )  )  ,    Optional . ofNullable ( queryRunner . getSession (  )  . getSchema (  )  )  ,    sql )  ;", "}    catch    ( QueryPreprocessorException   e )     {", "System . err . println ( e . getMessage (  )  )  ;", "if    ( queryRunner . isDebug (  )  )     {", "e . printStackTrace (  )  ;", "}", "return   false ;", "}", "try    ( Query   query    =    queryRunner . startQuery ( finalSql )  )     {", "boolean   success    =    query . renderOutput ( System . out ,    outputFormat ,    interactive )  ;", "ClientSession   session    =    queryRunner . getSession (  )  ;", "if    (  ( query . getSetCatalog (  )  . isPresent (  )  )     |  |     ( query . getSetSchema (  )  . isPresent (  )  )  )     {", "session    =    ClientSession . builder ( session )  . withCatalog ( query . getSetCatalog (  )  . orElse ( session . getCatalog (  )  )  )  . withSchema ( query . getSetSchema (  )  . orElse ( session . getSchema (  )  )  )  . build (  )  ;", "schemaChanged . run (  )  ;", "}", "if    (  (  !  ( query . getSetSessionProperties (  )  . isEmpty (  )  )  )     |  |     (  !  ( query . getResetSessionProperties (  )  . isEmpty (  )  )  )  )     {", "Map < String ,    String >    sessionProperties    =    new   HashMap ( session . getProperties (  )  )  ;", "sessionProperties . putAll ( query . getSetSessionProperties (  )  )  ;", "sessionProperties . keySet (  )  . removeAll ( query . getResetSessionProperties (  )  )  ;", "session    =    ClientSession . builder ( session )  . withProperties ( sessionProperties )  . build (  )  ;", "}", "if    (  (  !  ( query . getAddedPreparedStatements (  )  . isEmpty (  )  )  )     |  |     (  !  ( query . getDeallocatedPreparedStatements (  )  . isEmpty (  )  )  )  )     {", "Map < String ,    String > paredStatements    =    new   HashMap ( session . getPreparedStatements (  )  )  ;", "paredStatements . putAll ( query . getAddedPreparedStatements (  )  )  ;", "paredStatements . keySet (  )  . removeAll ( query . getDeallocatedPreparedStatements (  )  )  ;", "session    =    ClientSession . builder ( session )  . withPreparedStatementsparedStatements )  . build (  )  ;", "}", "if    ( query . isClearTransactionId (  )  )     {", "session    =    stripTransactionId ( session )  ;", "}", "if    (  ( query . getStartedTransactionId (  )  )     !  =    null )     {", "session    =    ClientSession . builder ( session )  . withTransactionId ( query . getStartedTransactionId (  )  )  . build (  )  ;", "}", "queryRunner . setSession ( session )  ;", "return   success ;", "}    catch    ( RuntimeException   e )     {", "System . err . println (  (  \" Error   running   command :     \"     +     ( e . getMessage (  )  )  )  )  ;", "if    ( queryRunner . isDebug (  )  )     {", "e . printStackTrace (  )  ;", "}", "return   false ;", "}", "}", "METHOD_END"], "methodName": ["process"], "fileName": "com.facebook.presto.cli.Console"}, {"methodBody": ["METHOD_START", "{", "ClientSession   session    =    clientOptions . toClientSession (  )  ;", "boolean   hasQuery    =     !  ( Strings . isNullOrEmpty ( clientOptions . execute )  )  ;", "boolean   isFromFile    =     !  ( Strings . isNullOrEmpty ( clientOptions . file )  )  ;", "if    (  (  ! hasQuery )     &  &     (  ! isFromFile )  )     {", "Ansi . systemInstall (  )  ;", "}", ". initializeLogging ( clientOptions . logLevelsFile )  ;", "String   query    =    clientOptions . execute ;", "if    ( hasQuery )     {", "query    +  =     \"  ;  \"  ;", "}", "if    ( isFromFile )     {", "if    ( hasQuery )     {", "throw   new   RuntimeException (  \" both    -  - execute   and    -  - file   specified \"  )  ;", "}", "try    {", "query    =    Files . toString ( new   File ( clientOptions . file )  ,    StandardCharsets . UTF _  8  )  ;", "hasQuery    =    true ;", "}    catch    ( IOException   e )     {", "throw   new   RuntimeException ( String . format (  \" Error   reading   from   file    % s :     % s \"  ,    clientOptions . file ,    e . getMessage (  )  )  )  ;", "}", "}", "AtomicBoolean   exiting    =    new   AtomicBoolean (  )  ;", "ThreadInterruptor   interruptor    =    new   ThreadInterruptor (  )  ;", "CountDownLatch   exited    =    new   CountDownLatch (  1  )  ;", "Runtime . getRuntime (  )  . addShutdownHook ( new   Thread (  (  )     -  >     {", "exiting . set ( true )  ;", "interruptor . interrupt (  )  ;", "awaitUninterruptibly ( exited ,     . EXIT _ DELAY . toMillis (  )  ,    TimeUnit . MILLISECONDS )  ;", "}  )  )  ;", "try    ( QueryRunner   queryRunner    =    new   QueryRunner ( session ,    clientOptions . debug ,    Optional . ofNullable ( clientOptions . socksProxy )  ,    Optional . ofNullable ( clientOptions . httpProxy )  ,    Optional . ofNullable ( clientOptions . keystorePath )  ,    Optional . ofNullable ( clientOptions . keystorePassword )  ,    Optional . ofNullable ( clientOptions . truststorePath )  ,    Optional . ofNullable ( clientOptions . truststorePassword )  ,    Optional . ofNullable ( clientOptions . accessToken )  ,    Optional . ofNullable ( clientOptions . user )  ,     ( clientOptions . password    ?    Optional . of ( getPassword (  )  )     :    Optional . empty (  )  )  ,    Optional . ofNullable ( clientOptions . krb 5 Principal )  ,    Optional . ofNullable ( clientOptions . krb 5 RemoteServiceName )  ,    Optional . ofNullable ( clientOptions . krb 5 ConfigPath )  ,    Optional . ofNullable ( clientOptions . krb 5 KeytabPath )  ,    Optional . ofNullable ( clientOptions . krb 5 CredentialCachePath )  ,     (  !  ( clientOptions . krb 5 DisableRemoteServiceHostnameCanonicalization )  )  )  )     {", "if    ( hasQuery )     {", "return    . executeCommand ( queryRunner ,    query ,    clientOptions . outputFormat ,    clientOptions . ignoreErrors )  ;", "}", ". run ( queryRunner ,    exiting )  ;", "return   true ;", "}    finally    {", "exited . countDown (  )  ;", "interruptor . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["run"], "fileName": "com.facebook.presto.cli.Console"}, {"methodBody": ["METHOD_START", "{", "try    ( TableNameCompleter   tableNameCompleter    =    new   TableNameCompleter ( queryRunner )  ; LineReader   reader    =    new   LineReader ( Console . getHistory (  )  ,    Completion . commandCompleter (  )  ,    Completion . lowerCaseCommandCompleter (  )  ,    tableNameCompleter )  )     {", "tableNameCompleter . populateCache (  )  ;", "StringBuilder   buffer    =    new   StringBuilder (  )  ;", "while    (  !  ( exiting . get (  )  )  )     {", "String   prompt    =    Console . PROMPT _ NAME ;", "String   schema    =    queryRunner . getSession (  )  . getSchema (  )  ;", "if    ( schema    !  =    null )     {", "prompt    +  =     \"  :  \"     +    schema ;", "}", "if    (  ( buffer . length (  )  )     >     0  )     {", "prompt    =     ( Strings . repeat (  \"     \"  ,     (  ( prompt . length (  )  )     -     1  )  )  )     +     \"  -  \"  ;", "}", "String   commandPrompt    =    prompt    +     \"  >     \"  ;", "String   line    =    reader . readLine ( commandPrompt )  ;", "if    ( reader . interrupted (  )  )     {", "String   partial    =    squeezeStatement ( buffer . toString (  )  )  ;", "if    (  !  ( partial . isEmpty (  )  )  )     {", "reader . getHistory (  )  . add ( partial )  ;", "}", "buffer    =    new   StringBuilder (  )  ;", "continue ;", "}", "if    ( line    =  =    null )     {", "System . out . println (  )  ;", "return ;", "}", "if    (  ( buffer . length (  )  )     =  =     0  )     {", "String   command    =    line . trim (  )  ;", "if    ( Console . HISTORY _ INDEX _ PATTERN . matcher ( command )  . matches (  )  )     {", "int   historyIndex    =    Integer . parseInt ( command . substring (  1  )  )  ;", "History   history    =    reader . getHistory (  )  ;", "if    (  ( historyIndex    <  =     0  )     |  |     ( historyIndex    >     ( history . index (  )  )  )  )     {", "System . err . println (  \" Command   does   not   exist \"  )  ;", "continue ;", "}", "line    =    history . get (  ( historyIndex    -     1  )  )  . toString (  )  ;", "System . out . println (  ( commandPrompt    +    line )  )  ;", "}", "if    ( command . endsWith (  \"  ;  \"  )  )     {", "command    =    command . substring (  0  ,     (  ( command . length (  )  )     -     1  )  )  . trim (  )  ;", "}", "switch    ( command . toLowerCase ( Locale . ENGLISH )  )     {", "case    \" exit \"     :", "case    \" quit \"     :", "return ;", "case    \" history \"     :", "for    ( History . Entry   entry    :    reader . getHistory (  )  )     {", "System . out . printf (  \"  %  5 d       % s % n \"  ,     (  ( entry . index (  )  )     +     1  )  ,    entry . value (  )  )  ;", "}", "continue ;", "case    \" help \"     :", "System . out . println (  )  ;", "System . out . println ( Help . getHelpText (  )  )  ;", "continue ;", "}", "}", "buffer . append ( line )  . append (  \"  \\ n \"  )  ;", "String   sql    =    buffer . toString (  )  ;", "StatementSplitter   splitter    =    new   StatementSplitter ( sql ,    ImmutableSet . of (  \"  ;  \"  ,     \"  \\  \\ G \"  )  )  ;", "for    ( Statement   split    :    splitter . getCompleteStatements (  )  )     {", "ClientOptions . OutputFormat   outputFormat    =    ClientOptions . OutputFormat . ALIGNED ;", "if    ( split . terminator (  )  . equals (  \"  \\  \\ G \"  )  )     {", "outputFormat    =    ClientOptions . OutputFormat . VERTICAL ;", "}", "Console . process ( queryRunner ,    split . statement (  )  ,    outputFormat ,    tableNameCompleter :  : populateCache ,    true )  ;", "reader . getHistory (  )  . add (  (  ( squeezeStatement ( split . statement (  )  )  )     +     ( split . terminator (  )  )  )  )  ;", "}", "buffer    =    new   StringBuilder (  )  ;", "String   partial    =    splitter . getPartialStatement (  )  ;", "if    (  !  ( partial . isEmpty (  )  )  )     {", "buffer . append ( partial )  . append (  '  \\ n '  )  ;", "}", "}", "}    catch    ( IOException   e )     {", "System . err . println (  (  \" Readline   error :     \"     +     ( e . getMessage (  )  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["runConsole"], "fileName": "com.facebook.presto.cli.Console"}, {"methodBody": ["METHOD_START", "{", "if    ( Boolean . parseBoolean ( System . getProperty (  \" jansi . passthrough \"  )  )  )     {", "return   true ;", "}", "if    ( Boolean . parseBoolean ( System . getProperty (  \" jansi . strip \"  )  )  )     {", "return   false ;", "}", "String   os    =    System . getProperty (  \" os . name \"  )  ;", "if    ( os . startsWith (  \" Windows \"  )  )     {", "return   true ;", "}", "try    {", "if    (  ( isatty ( STDOUT _ FILENO )  )     =  =     0  )     {", "return   false ;", "}", "}    catch    ( NoClassDefFoundError    |    UnsatisfiedLinkError   ignore )     {", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["detectRealTerminal"], "fileName": "com.facebook.presto.cli.ConsolePrinter"}, {"methodBody": ["METHOD_START", "{", "return   TerminalFactory . get (  )  . getWidth (  )  ;", "}", "METHOD_END"], "methodName": ["getWidth"], "fileName": "com.facebook.presto.cli.ConsolePrinter"}, {"methodBody": ["METHOD_START", "{", "return   ConsolePrinter . REAL _ TERMINAL ;", "}", "METHOD_END"], "methodName": ["isRealTerminal"], "fileName": "com.facebook.presto.cli.ConsolePrinter"}, {"methodBody": ["METHOD_START", "{", "if    (  ( lines )     >     0  )     {", "if    ( isRealTerminal (  )  )     {", "out . p ( ansi (  )  . cursorUp ( lines )  . toString (  )  )  ;", "} else    {", "out . p (  '  \\ r '  )  ;", "}", "out . flush (  )  ;", "lines    =     0  ;", "}", "}", "METHOD_END"], "methodName": ["repositionCursor"], "fileName": "com.facebook.presto.cli.ConsolePrinter"}, {"methodBody": ["METHOD_START", "{", "if    ( isRealTerminal (  )  )     {", "out . p ( ansi (  )  . eraseLine ( ALL )  . a ( line )  . a (  '  \\ n '  )  . toString (  )  )  ;", "} else    {", "out . p (  (  '  \\ r '     +    line )  )  ;", "}", "out . flush (  )  ;", "( lines )  +  +  ;", "}", "METHOD_END"], "methodName": ["reprintLine"], "fileName": "com.facebook.presto.cli.ConsolePrinter"}, {"methodBody": ["METHOD_START", "{", "if    (  ( lines )     >     0  )     {", "if    ( isRealTerminal (  )  )     {", "out . p ( ansi (  )  . cursorUp ( lines )  . eraseScreen ( FORWARD )  . toString (  )  )  ;", "} else    {", "out . p (  '  \\ r '  )  ;", "}", "out . flush (  )  ;", "lines    =     0  ;", "}", "}", "METHOD_END"], "methodName": ["resetScreen"], "fileName": "com.facebook.presto.cli.ConsolePrinter"}, {"methodBody": ["METHOD_START", "{", "if    ( writer . checkError (  )  )     {", "throw   new   IOException (  \" error   writing   to   output \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkError"], "fileName": "com.facebook.presto.cli.CsvPrinter"}, {"methodBody": ["METHOD_START", "{", "if    ( o    =  =    null )     {", "return    \"  \"  ;", "}", "if    ( o   instanceof   byte [  ]  )     {", "return   AlignedTable . formatHexDump (  (  ( byte [  ]  )     ( o )  )  )  ;", "}", "return   o . toString (  )  ;", "}", "METHOD_END"], "methodName": ["formatValue"], "fileName": "com.facebook.presto.cli.CsvPrinter"}, {"methodBody": ["METHOD_START", "{", "String [  ]    array    =    new   String [ values . size (  )  ]  ;", "for    ( int   i    =     0  ;    i    <     ( values . size (  )  )  ;    i +  +  )     {", "array [ i ]     =     . formatValue ( values . get ( i )  )  ;", "}", "return   array ;", "}", "METHOD_END"], "methodName": ["toStrings"], "fileName": "com.facebook.presto.cli.CsvPrinter"}, {"methodBody": ["METHOD_START", "{", "return    (  ( dividend    +    divisor )     -     1  )     /    divisor ;", "}", "METHOD_END"], "methodName": ["ceil"], "fileName": "com.facebook.presto.cli.FormatUtils"}, {"methodBody": ["METHOD_START", "{", "double   fractional    =    count ;", "String   unit    =     \"  \"  ;", "if    ( fractional    >     1  0  0  0  )     {", "fractional    /  =     1  0  0  0  ;", "unit    =     \" K \"  ;", "}", "if    ( fractional    >     1  0  0  0  )     {", "fractional    /  =     1  0  0  0  ;", "unit    =     \" M \"  ;", "}", "if    ( fractional    >     1  0  0  0  )     {", "fractional    /  =     1  0  0  0  ;", "unit    =     \" B \"  ;", "}", "if    ( fractional    >     1  0  0  0  )     {", "fractional    /  =     1  0  0  0  ;", "unit    =     \" T \"  ;", "}", "if    ( fractional    >     1  0  0  0  )     {", "fractional    /  =     1  0  0  0  ;", "unit    =     \" Q \"  ;", "}", "return   String . format (  \"  % s % s \"  ,     . getFormat ( fractional )  . format ( fractional )  ,    unit )  ;", "}", "METHOD_END"], "methodName": ["formatCount"], "fileName": "com.facebook.presto.cli.FormatUtils"}, {"methodBody": ["METHOD_START", "{", "double   rate    =    count    /     ( duration . getValue ( TimeUnit . SECONDS )  )  ;", "if    (  ( Double . isNaN ( rate )  )     |  |     ( Double . isInfinite ( rate )  )  )     {", "rate    =     0  ;", "}", "String   rateString    =     . formatCount (  (  ( long )     ( rate )  )  )  ;", "if    ( longForm )     {", "if    ( rateString . endsWith (  \"     \"  )  )     {", "rateString    =    rateString . substring (  0  ,     (  ( rateString . length (  )  )     -     1  )  )  ;", "}", "rateString    +  =     \"  / s \"  ;", "}", "return   rateString ;", "}", "METHOD_END"], "methodName": ["formatCountRate"], "fileName": "com.facebook.presto.cli.FormatUtils"}, {"methodBody": ["METHOD_START", "{", "double   rate    =     ( dataSize . toBytes (  )  )     /     ( duration . getValue ( TimeUnit . SECONDS )  )  ;", "if    (  ( Double . isNaN ( rate )  )     |  |     ( Double . isInfinite ( rate )  )  )     {", "rate    =     0  ;", "}", "String   rateString    =     . formatDataSize ( new   DataSize ( rate ,    BYTE )  ,    false )  ;", "if    ( longForm )     {", "if    (  !  ( rateString . endsWith (  \" B \"  )  )  )     {", "rateString    +  =     \" B \"  ;", "}", "rateString    +  =     \"  / s \"  ;", "}", "return   rateString ;", "}", "METHOD_END"], "methodName": ["formatDataRate"], "fileName": "com.facebook.presto.cli.FormatUtils"}, {"methodBody": ["METHOD_START", "{", "double   fractional    =    size . toBytes (  )  ;", "String   unit    =    null ;", "if    ( fractional    >  =     1  0  2  4  )     {", "fractional    /  =     1  0  2  4  ;", "unit    =     \" K \"  ;", "}", "if    ( fractional    >  =     1  0  2  4  )     {", "fractional    /  =     1  0  2  4  ;", "unit    =     \" M \"  ;", "}", "if    ( fractional    >  =     1  0  2  4  )     {", "fractional    /  =     1  0  2  4  ;", "unit    =     \" G \"  ;", "}", "if    ( fractional    >  =     1  0  2  4  )     {", "fractional    /  =     1  0  2  4  ;", "unit    =     \" T \"  ;", "}", "if    ( fractional    >  =     1  0  2  4  )     {", "fractional    /  =     1  0  2  4  ;", "unit    =     \" P \"  ;", "}", "if    ( unit    =  =    null )     {", "unit    =     \" B \"  ;", "} else", "if    ( longForm )     {", "unit    +  =     \" B \"  ;", "}", "return   String . format (  \"  % s % s \"  ,     . getFormat ( fractional )  . format ( fractional )  ,    unit )  ;", "}", "METHOD_END"], "methodName": ["formatDataSize"], "fileName": "com.facebook.presto.cli.FormatUtils"}, {"methodBody": ["METHOD_START", "{", "int   markerWidth    =     3  ;", "int   range    =    width    -    markerWidth ;", "int   lower    =    tick    %    range ;", "if    (  (  ( tick    /    range )     %     2  )     =  =     1  )     {", "lower    =    range    -    lower ;", "}", "return    (  (  (  ( repeat (  \"     \"  ,    lower )  )     +     \"  <  \"  )     +     ( repeat (  \"  =  \"  ,     ( markerWidth    -     2  )  )  )  )     +     \"  >  \"  )     +     ( repeat (  \"     \"  ,     ( width    -     ( lower    +    markerWidth )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["formatProgressBar"], "fileName": "com.facebook.presto.cli.FormatUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( total    =  =     0  )     {", "return   repeat (  \"     \"  ,    width )  ;", "}", "int   pending    =    Math . max (  0  ,     (  ( total    -    complete )     -    running )  )  ;", "int   completeLength    =    Math . min ( width ,     . ceil (  ( complete    *    width )  ,    total )  )  ;", "int   pendingLength    =    Math . min ( width ,     . ceil (  ( pending    *    width )  ,    total )  )  ;", "int   minRunningLength    =     ( running    >     0  )     ?     1     :     0  ;", "int   runningLength    =    Math . max ( Math . min ( width ,     . ceil (  ( running    *    width )  ,    total )  )  ,    minRunningLength )  ;", "if    (  (  (  ( completeLength    +    runningLength )     +    pendingLength )     !  =    width )     &  &     ( pending    >     0  )  )     {", "pendingLength    =    Math . max (  0  ,     (  ( width    -    completeLength )     -    runningLength )  )  ;", "}", "if    (  (  ( completeLength    +    runningLength )     +    pendingLength )     !  =    width )     {", "runningLength    =    Math . max ( minRunningLength ,     (  ( width    -    completeLength )     -    pendingLength )  )  ;", "}", "if    (  (  (  ( completeLength    +    runningLength )     +    pendingLength )     >    width )     &  &     ( complete    >     0  )  )     {", "completeLength    =    Math . max (  0  ,     (  ( width    -    runningLength )     -    pendingLength )  )  ;", "}", "checkState (  (  (  ( completeLength    +    runningLength )     +    pendingLength )     =  =    width )  ,     \" Expected   completeLength    (  % s )     +    runningLength    (  % s )     +    pendingLength    (  % s )     =  =    width    (  % s )  ,    was    % s   for   complete    =     % s ,    running    =     % s ,    total    =     % s \"  ,    completeLength ,    runningLength ,    pendingLength ,    width ,     (  ( completeLength    +    runningLength )     +    pendingLength )  ,    complete ,    running ,    total )  ;", "return    (  ( repeat (  \"  =  \"  ,    completeLength )  )     +     ( repeat (  \"  >  \"  ,    runningLength )  )  )     +     ( repeat (  \"     \"  ,    pendingLength )  )  ;", "}", "METHOD_END"], "methodName": ["formatProgressBar"], "fileName": "com.facebook.presto.cli.FormatUtils"}, {"methodBody": ["METHOD_START", "{", "int   totalSeconds    =    Ints . saturatedCast ( duration . roundTo ( TimeUnit . SECONDS )  )  ;", "int   minutes    =    totalSeconds    /     6  0  ;", "int   seconds    =    totalSeconds    %     6  0  ;", "return   String . f (  \"  % s :  %  0  2 d \"  ,    minutes ,    seconds )  ;", "}", "METHOD_END"], "methodName": ["formatTime"], "fileName": "com.facebook.presto.cli.FormatUtils"}, {"methodBody": ["METHOD_START", "{", "DecimalFormat   format ;", "if    ( value    <     1  0  )     {", "format    =    new   DecimalFormat (  \"  #  .  #  #  \"  )  ;", "} else", "if    ( value    <     1  0  0  )     {", "format    =    new   DecimalFormat (  \"  #  .  #  \"  )  ;", "} else    {", "format    =    new   DecimalFormat (  \"  #  \"  )  ;", "}", "format . setRoundingMode ( RoundingMode . HALF _ UP )  ;", "return   format ;", "}", "METHOD_END"], "methodName": ["getFormat"], "fileName": "com.facebook.presto.cli.FormatUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( count    !  =     1  )     {", "return   word    +     \" s \"  ;", "}", "return   word ;", "}", "METHOD_END"], "methodName": ["pluralize"], "fileName": "com.facebook.presto.cli.FormatUtils"}, {"methodBody": ["METHOD_START", "{", "return    \"  \"     +     (  (  (  (  (  (  (  (  (  (  (  (  (  \" Supported   commands :  \\ n \"     +     \" QUIT \\ n \"  )     +     \" EXPLAIN    [     (    option    [  ,     .  .  .  ]     )     ]     < query >  \\ n \"  )     +     \"             options :    FORMAT    {    TEXT    |    GRAPHVIZ    }  \\ n \"  )     +     \"                                        TYPE    {    LOGICAL    |    DISTRIBUTED    }  \\ n \"  )     +     \" DESCRIBE    < table >  \\ n \"  )     +     \" SHOW   COLUMNS   FROM    < table >  \\ n \"  )     +     \" SHOW   FUNCTIONS \\ n \"  )     +     \" SHOW   CATALOGS    [ LIKE    < pattern >  ]  \\ n \"  )     +     \" SHOW   SCHEMAS    [ FROM    < catalog >  ]     [ LIKE    < pattern >  ]  \\ n \"  )     +     \" SHOW   TABLES    [ FROM    < schema >  ]     [ LIKE    < pattern >  ]  \\ n \"  )     +     \" SHOW   PARTITIONS   FROM    < table >     [ WHERE    .  .  .  ]     [ ORDER   BY    .  .  .  ]     [ LIMIT   n ]  \\ n \"  )     +     \" USE    [  < catalog >  .  ]  < schema >  \\ n \"  )     +     \"  \"  )  ;", "}", "METHOD_END"], "methodName": ["getHelpText"], "fileName": "com.facebook.presto.cli.Help"}, {"methodBody": ["METHOD_START", "{", "try    {", "turn    ( isatty ( STDIN _ FILENO )  )     =  =     1  ;", "}    catch    ( Throwable   e )     {", "turn   false ;", "}", "}", "METHOD_END"], "methodName": ["hasTerminal"], "fileName": "com.facebook.presto.cli.KeyReader"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( KeyReader . hasTerminal (  )  )  )     {", "return    -  1  ;", "}", "try    {", "InputStream   in    =    new   FileInputStream ( FileDescriptor . in )  ;", "if    (  ( in . available (  )  )     >     0  )     {", "return   in . read (  )  ;", "}", "}    catch    ( IOException   e )     {", "}", "return    -  1  ;", "}", "METHOD_END"], "methodName": ["readKey"], "fileName": "com.facebook.presto.cli.KeyReader"}, {"methodBody": ["METHOD_START", "{", "return   interrupted ;", "}", "METHOD_END"], "methodName": ["interrupted"], "fileName": "com.facebook.presto.cli.LineReader"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( rowBuffer . isEmpty (  )  )  )     {", "printer . printRows ( Collections . unmodifiableList ( rowBuffer )  ,    plete )  ;", "rowBuffer . clear (  )  ;", "}", "}", "METHOD_END"], "methodName": ["flush"], "fileName": "com.facebook.presto.cli.OutputHandler"}, {"methodBody": ["METHOD_START", "{", "if    ( rowBuffer . isEmpty (  )  )     {", "bufferStart    =    System . nanoTime (  )  ;", "}", "rowBuffer . add ( row )  ;", "if    (  ( rowBuffer . size (  )  )     >  =     (  . MAX _ BUFFERED _ ROWS )  )     {", "flush ( false )  ;", "}", "}", "METHOD_END"], "methodName": ["processRow"], "fileName": "com.facebook.presto.cli.OutputHandler"}, {"methodBody": ["METHOD_START", "{", "while    ( client . isRunning (  )  )     {", "Iterable < List < Object >  >    data    =    client . currentData (  )  . getData (  )  ;", "if    ( data    !  =    null )     {", "for    ( List < Object >    row    :    data )     {", "processRow ( Collections . unmodifiableList ( row )  )  ;", "}", "}", "if    (  ( nanosSince ( bufferStart )  . compareTo (  . MAX _ BUFFER _ TIME )  )     >  =     0  )     {", "flush ( false )  ;", "}", "client . advance (  )  ;", "}", "}", "METHOD_END"], "methodName": ["processRows"], "fileName": "com.facebook.presto.cli.OutputHandler"}, {"methodBody": ["METHOD_START", "{", "String   pager    =    System . getenv ( Pager . ENV _ PAGER )  ;", "if    ( pager    =  =    null )     {", "return   Pager . create ( Pager . LESS )  ;", "}", "pager    =    pager . trim (  )  ;", "if    ( pager . isEmpty (  )  )     {", "return   Pager . createNullPager (  )  ;", "}", "return   Pager . create ( ImmutableList . of (  \"  / bin / sh \"  ,     \"  - c \"  ,    pager )  )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "com.facebook.presto.cli.Pager"}, {"methodBody": ["METHOD_START", "{", "try    {", "Process   process    =    new   ProcessBuilder (  )  . command ( command )  . redirectOutput ( ProcessBuilder . Redirect . INHERIT )  . redirectError ( ProcessBuilder . Redirect . INHERIT )  . start (  )  ;", "return   new    ( process . getOutputStream (  )  ,    process )  ;", "}    catch    ( IOException   e )     {", "System . err . println (  (  \" ERROR :    failed   to   open   pager :     \"     +     ( e . getMessage (  )  )  )  )  ;", "return    . createNull (  )  ;", "}", "}", "METHOD_END"], "methodName": ["create"], "fileName": "com.facebook.presto.cli.Pager"}, {"methodBody": ["METHOD_START", "{", "return   new   Pager ( Pager . uncloseableOutputStream ( System . out )  ,    null )  ;", "}", "METHOD_END"], "methodName": ["createNullPager"], "fileName": "com.facebook.presto.cli.Pager"}, {"methodBody": ["METHOD_START", "{", "checkState (  (  ( process )     !  =    null )  ,     \" getFinishFuture   called   on   null   pager \"  )  ;", "CompletableFuture <  ?  >    result    =    new   CompletableFuture <  >  (  )  ;", "new   Thread (  (  )     -  >     {", "try    {", "process . waitFor (  )  ;", "}    catch    ( InterruptedException   e )     {", "}    finally    {", "result . complete ( null )  ;", "}", "}  )  . start (  )  ;", "return   MoreFutures . unmodifiableFuture ( result )  ;", "}", "METHOD_END"], "methodName": ["getFinishFuture"], "fileName": "com.facebook.presto.cli.Pager"}, {"methodBody": ["METHOD_START", "{", "return    ( process )     =  =    null ;", "}", "METHOD_END"], "methodName": ["isNullPager"], "fileName": "com.facebook.presto.cli.Pager"}, {"methodBody": ["METHOD_START", "{", "if    (  (  \" Broken   pipe \"  . equals ( e . getMessage (  )  )  )     |  |     (  \" Stream   closed \"  . equals ( e . getMessage (  )  )  )  )     {", "throw   new   QueryAbortedException ( e )  ;", "}", "throw   e ;", "}", "METHOD_END"], "methodName": ["propagateIOException"], "fileName": "com.facebook.presto.cli.Pager"}, {"methodBody": ["METHOD_START", "{", "return   new   FilterOutputStream ( out )     {", "@ Override", "public   void   close (  )    throws   IOException    {", "flush (  )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["uncloseableOutputStream"], "fileName": "com.facebook.presto.cli.Pager"}, {"methodBody": ["METHOD_START", "{", "Console   console    =    SingleCommand . singleCommand ( Console . class )  . parse ( args )  ;", "if    (  ( console . helpOption . showHelpIfRequested (  )  )     |  |     ( console . versionOption . showVersionIfRequested (  )  )  )     {", "return ;", "}", "System . exit (  ( console . run (  )     ?     0     :     1  )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.cli.Presto"}, {"methodBody": ["METHOD_START", "{", "return   new   OutputHandler ( Query . createOutputPrinter ( format ,    writer ,    fieldNames )  )  ;", "}", "METHOD_END"], "methodName": ["createOutputHandler"], "fileName": "com.facebook.presto.cli.Query"}, {"methodBody": ["METHOD_START", "{", "switch    ( format )     {", "case   ALIGNED    :", "turn   new   AlignedTablePrinter ( fieldNames ,    writer )  ;", "case   VERTICAL    :", "turn   new   VerticalRecordPrinter ( fieldNames ,    writer )  ;", "case   CSV    :", "turn   new   CsvPrinter ( fieldNames ,    writer ,    false )  ;", "case   CSV _ HEADER    :", "turn   new   CsvPrinter ( fieldNames ,    writer ,    true )  ;", "case   TSV    :", "turn   new   TsvPrinter ( fieldNames ,    writer ,    false )  ;", "case   TSV _ HEADER    :", "turn   new   TsvPrinter ( fieldNames ,    writer ,    true )  ;", "case   NULL    :", "turn   new   NullPrinter (  )  ;", "}", "throw   new   RuntimeException (  ( format    +     \"    not   supported \"  )  )  ;", "}", "METHOD_END"], "methodName": ["createOutputPrinter"], "fileName": "com.facebook.presto.cli.Query"}, {"methodBody": ["METHOD_START", "{", "return   new   OutputStreamWriter ( out ,    StandardCharsets . UTF _  8  )  ;", "}", "METHOD_END"], "methodName": ["createWriter"], "fileName": "com.facebook.presto.cli.Query"}, {"methodBody": ["METHOD_START", "{", "try    ( OutputHandler   handler    =    new   OutputHandler ( new   NullPrinter (  )  )  )     {", "handlerocessRows ( client )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["discardResults"], "fileName": "com.facebook.presto.cli.Query"}, {"methodBody": ["METHOD_START", "{", "List < String >    fieldNames    =    Lists . transform ( columns ,    Column :  : getName )  ;", "if    ( interactive )     {", "pageOutput ( format ,    fieldNames )  ;", "} else    {", "sendOutput ( out ,    format ,    fieldNames )  ;", "}", "}", "METHOD_END"], "methodName": ["doRenderResults"], "fileName": "com.facebook.presto.cli.Query"}, {"methodBody": ["METHOD_START", "{", "return   client . getAddedPreparedStatements (  )  ;", "}", "METHOD_END"], "methodName": ["getAddedPreparedStatements"], "fileName": "com.facebook.presto.cli.Query"}, {"methodBody": ["METHOD_START", "{", "return   client . getDeallocatedPreparedStatements (  )  ;", "}", "METHOD_END"], "methodName": ["getDeallocatedPreparedStatements"], "fileName": "com.facebook.presto.cli.Query"}, {"methodBody": ["METHOD_START", "{", "return   client . getResetSessionProperties (  )  ;", "}", "METHOD_END"], "methodName": ["getResetSessionProperties"], "fileName": "com.facebook.presto.cli.Query"}, {"methodBody": ["METHOD_START", "{", "return   client . getSetCatalog (  )  ;", "}", "METHOD_END"], "methodName": ["getSetCatalog"], "fileName": "com.facebook.presto.cli.Query"}, {"methodBody": ["METHOD_START", "{", "return   client . getSetSchema (  )  ;", "}", "METHOD_END"], "methodName": ["getSetSchema"], "fileName": "com.facebook.presto.cli.Query"}, {"methodBody": ["METHOD_START", "{", "return   client . getSetSessionProperties (  )  ;", "}", "METHOD_END"], "methodName": ["getSetSessionProperties"], "fileName": "com.facebook.presto.cli.Query"}, {"methodBody": ["METHOD_START", "{", "return   client . getStartedTransactionId (  )  ;", "}", "METHOD_END"], "methodName": ["getStartedTransactionId"], "fileName": "com.facebook.presto.cli.Query"}, {"methodBody": ["METHOD_START", "{", "return   client . isClearTransactionId (  )  ;", "}", "METHOD_END"], "methodName": ["isClearTransactionId"], "fileName": "com.facebook.presto.cli.Query"}, {"methodBody": ["METHOD_START", "{", "try    ( Pager   pager    =    Pager . create (  )  ; ThreadInterruptor   clientThread    =    new   ThreadInterruptor (  )  ; Writer   writer    =    Query . createWriter ( pager )  ; OutputHandler   handler    =    Query . createOutputHandler ( format ,    writer ,    fieldNames )  )     {", "if    (  !  ( pager . isNullPager (  )  )  )     {", "ignoreUserInterrupt . set ( true )  ;", "pager . getFinishFuture (  )  . thenRun (  (  )     -  >     {", "ignoreUserInterrupt . set ( false )  ;", "client . close (  )  ;", "clientThread . interrupt (  )  ;", "}  )  ;", "}", "handler . processRows ( client )  ;", "}    catch    ( RuntimeException    |    IOException   e )     {", "if    (  ( client . isClientAborted (  )  )     &  &     (  !  ( e   instanceof   QueryAbortedException )  )  )     {", "throw   new   QueryAbortedException ( e )  ;", "}", "throw   e ;", "}", "}", "METHOD_END"], "methodName": ["pageOutput"], "fileName": "com.facebook.presto.cli.Query"}, {"methodBody": ["METHOD_START", "{", "List < String >    lines    =    ImmutableList . copyOf ( Splitter . on (  '  \\ n '  )  . split ( query )  . iterator (  )  )  ;", "String   errorLine    =    lines . get (  (  ( location . getLineNumber (  )  )     -     1  )  )  ;", "String   good    =    errorLine . substring (  0  ,     (  ( location . getColumnNumber (  )  )     -     1  )  )  ;", "String   bad    =    errorLine . substring (  (  ( location . getColumnNumber (  )  )     -     1  )  )  ;", "if    (  (  ( location . getLineNumber (  )  )     =  =     ( lines . size (  )  )  )     &  &     ( bad . trim (  )  . isEmpty (  )  )  )     {", "bad    =     \"     < EOF >  \"  ;", "}", "if    ( ConsolePrinter . REAL _ TERMINAL )     {", "Ansi   ansi    =    Ansi . ansi (  )  ;", "ansi . fg ( CYAN )  ;", "for    ( int   i    =     1  ;    i    <     ( location . getLineNumber (  )  )  ;    i +  +  )     {", "ansi . a ( lines . get (  ( i    -     1  )  )  )  . newline (  )  ;", "}", "ansi . a ( good )  ;", "ansi . fg ( RED )  ;", "ansi . a ( bad )  . newline (  )  ;", "for    ( int   i    =    location . getLineNumber (  )  ;    i    <     ( lines . size (  )  )  ;    i +  +  )     {", "ansi . a ( lines . get ( i )  )  . newline (  )  ;", "}", "ansi . reset (  )  ;", "out . print ( ansi )  ;", "} else    {", "String   prefix    =    String . format (  \" LINE    % s :     \"  ,    location . getLineNumber (  )  )  ;", "String   padding    =    Strings . repeat (  \"     \"  ,     (  ( prefix . length (  )  )     +     (  ( location . getColumnNumber (  )  )     -     1  )  )  )  ;", "out . println (  ( prefix    +    errorLine )  )  ;", "out . println (  ( padding    +     \"  ^  \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["renderErrorLocation"], "fileName": "com.facebook.presto.cli.Query"}, {"methodBody": ["METHOD_START", "{", "QueryStatusInfo   results    =    client . finalStatusInfo (  )  ;", "QueryError   error    =    results . getError (  )  ;", "checkState (  ( error    !  =    null )  )  ;", "out . printf (  \" Query    % s   failed :     % s % n \"  ,    results . getId (  )  ,    error . getMessage (  )  )  ;", "if    (  ( debug )     &  &     (  ( error . getFailureInfo (  )  )     !  =    null )  )     {", "error . getFailureInfo (  )  . toException (  )  . printStackTrace ( out )  ;", "}", "if    (  ( error . getErrorLocation (  )  )     !  =    null )     {", "Query . renderErrorLocation ( client . getQuery (  )  ,    error . getErrorLocation (  )  ,    out )  ;", "}", "out . println (  )  ;", "}", "METHOD_END"], "methodName": ["renderFailure"], "fileName": "com.facebook.presto.cli.Query"}, {"methodBody": ["METHOD_START", "{", "Thread   clientThread    =    Thread . currentThread (  )  ;", "SignalHandler   oldHandler    =    Signal . handle (  . SIGINT ,     (    signal )     -  >     {", "if    (  ( ignoreUserInterrupt . get (  )  )     |  |     ( client . isClientAborted (  )  )  )     {", "return ;", "}", "client . close (  )  ;", "clientThread . interrupt (  )  ;", "}  )  ;", "try    {", "return   renderOutput ( out ,    outputFormat ,    interactive )  ;", "}    finally    {", "Signal . handle (  . SIGINT ,    oldHandler )  ;", "Thread . interrupted (  )  ;", "}", "}", "METHOD_END"], "methodName": ["renderOutput"], "fileName": "com.facebook.presto.cli.Query"}, {"methodBody": ["METHOD_START", "{", "StatusPrinter   statusPrinter    =    null ;", "@ SuppressWarnings (  \" resource \"  )", "PrintStream   errorChannel    =     ( interactive )     ?    out    :    System . err ;", "if    ( interactive )     {", "statusPrinter    =    new   StatusPrinter ( client ,    out ,    debug )  ;", "statusPrinter . printInitialStatusUpdates (  )  ;", "} else    {", "waitForData (  )  ;", "}", "if    (  ( client . isRunning (  )  )     |  |     (  ( client . isFinished (  )  )     &  &     (  ( client . finalStatusInfo (  )  . getError (  )  )     =  =    null )  )  )     {", "StatusInfo   results    =     ( client . isRunning (  )  )     ?    client . currentStatusInfo (  )     :    client . finalStatusInfo (  )  ;", "if    (  ( results . getUpdateType (  )  )     !  =    null )     {", "renderUpdate ( errorChannel ,    results )  ;", "} else", "if    (  ( results . getColumns (  )  )     =  =    null )     {", "errorChannel . printf (  \"     % s   has   no   columns \\ n \"  ,    results . getId (  )  )  ;", "return   false ;", "} else    {", "renderResults ( out ,    outputFormat ,    interactive ,    results . getColumns (  )  )  ;", "}", "}", "checkState (  (  !  ( client . isRunning (  )  )  )  )  ;", "if    ( statusPrinter    !  =    null )     {", "statusPrinter . printFinalInfo (  )  ;", "}", "if    ( client . isClientAborted (  )  )     {", "errorChannel . println (  \"    aborted   by   user \"  )  ;", "return   false ;", "}", "if    ( client . isClientError (  )  )     {", "errorChannel . println (  \"    is   gone    ( server   restarted ?  )  \"  )  ;", "return   false ;", "}", "verify ( client . isFinished (  )  )  ;", "if    (  ( client . finalStatusInfo (  )  . getError (  )  )     !  =    null )     {", "renderFailure ( errorChannel )  ;", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["renderQueryOutput"], "fileName": "com.facebook.presto.cli.Query"}, {"methodBody": ["METHOD_START", "{", "try    {", "doRenderResults ( out ,    outputFormat ,    interactive ,    columns )  ;", "}    catch    ( AbortedException   e )     {", "System . out . println (  \"  ( query   aborted   by   user )  \"  )  ;", "client . close (  )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["renderResults"], "fileName": "com.facebook.presto.cli.Query"}, {"methodBody": ["METHOD_START", "{", "String   status    =    results . getUpdateType (  )  ;", "if    (  ( results . getUpdateCount (  )  )     !  =    null )     {", "long   count    =    results . getUpdateCount (  )  ;", "status    +  =    String . format (  \"  :     % s   row % s \"  ,    count ,     ( count    !  =     1     ?     \" s \"     :     \"  \"  )  )  ;", "}", "out . println ( status )  ;", "discardResults (  )  ;", "}", "METHOD_END"], "methodName": ["renderUpdate"], "fileName": "com.facebook.presto.cli.Query"}, {"methodBody": ["METHOD_START", "{", "try    ( OutputHandler   handler    =    Query . createOutputHandler ( format ,    Query . createWriter ( out )  ,    fieldNames )  )     {", "handler . processRows ( client )  ;", "}", "}", "METHOD_END"], "methodName": ["sendOutput"], "fileName": "com.facebook.presto.cli.Query"}, {"methodBody": ["METHOD_START", "{", "while    (  ( client . isRunning (  )  )     &  &     (  ( client . currentData (  )  . getData (  )  )     =  =    null )  )     {", "client . advance (  )  ;", "}", "}", "METHOD_END"], "methodName": ["waitForData"], "fileName": "com.facebook.presto.cli.Query"}, {"methodBody": ["METHOD_START", "{", "FutureTask < T >    task    =    new   FutureTask <  >  ( callable )  ;", "Thread   thread    =    new   Thread ( task )  ;", "thread . setName ( threadName )  ;", "thread . setDaemon ( true )  ;", "thread . start (  )  ;", "return   task ;", "}", "METHOD_END"], "methodName": ["executeInNewThread"], "fileName": "com.facebook.presto.cli.QueryPreprocessor"}, {"methodBody": ["METHOD_START", "{", "Duration   timeout    =    QueryPreprocessor . DEFAULT _ PREPROCESSOR _ TIMEOUT ;", "String   timeoutEnvironment    =    nullToEmpty ( System . getenv ( QueryPreprocessor . ENV _ PREPROCESSOR _ TIMEOUT )  )  . trim (  )  ;", "if    (  !  ( timeoutEnvironment . isEmpty (  )  )  )     {", "timeout    =    Duration . valueOf ( timeoutEnvironment )  ;", "}", "String   preprocessorCommand    =    System . getenv ( QueryPreprocessor . ENV _ PREPROCESSOR )  ;", "if    (  ( emptyToNull ( preprocessorCommand )  )     =  =    null )     {", "return   query ;", "}", "return   QueryPreprocessor . preprocessQuery ( catalog ,    schema ,    query ,    ImmutableList . of (  \"  / bin / sh \"  ,     \"  - c \"  ,    preprocessorCommand )  ,    timeout )  ;", "}", "METHOD_END"], "methodName": ["preprocessQuery"], "fileName": "com.facebook.presto.cli.QueryPreprocessor"}, {"methodBody": ["METHOD_START", "{", "Thread   clientThread    =    Thread . currentThread (  )  ;", "SignalHandler   oldHandler    =    Signal . handle (  . SIGINT ,     (    signal )     -  >    clientThread . interrupt (  )  )  ;", "try    {", "if    ( ConsolePrinter . REAL _ TERMINAL )     {", "System . out . print (  . PREPROCESSING _ QUERY _ MESSAGE )  ;", "System . out . flush (  )  ;", "}", "return    . preprocessQueryInternal ( catalog ,    schema ,    query ,    preprocessorCommand ,    timeout )  ;", "}    finally    {", "if    ( ConsolePrinter . REAL _ TERMINAL )     {", "System . out . print (  (  (  \"  \\ r \"     +     ( Strings . repeat (  \"     \"  ,     . PREPROCESSING _ QUERY _ MESSAGE . length (  )  )  )  )     +     \"  \\ r \"  )  )  ;", "System . out . flush (  )  ;", "}", "Signal . handle (  . SIGINT ,    oldHandler )  ;", "Thread . interrupted (  )  ;", "}", "}", "METHOD_END"], "methodName": ["preprocessQuery"], "fileName": "com.facebook.presto.cli.QueryPreprocessor"}, {"methodBody": ["METHOD_START", "{", "AtomicReference < Process >    processReference    =    new   AtomicReference <  >  (  )  ;", "Future < String >    task    =     . executeInNewThread (  \" Query   preprocessor \"  ,     (  )     -  >     {", "String   result ;", "int   exitCode ;", "Future < String >    readStderr ;", "try    {", "ProcessBuilder   processBuilder    =    new   ProcessBuilder ( preprocessorCommand )  ;", "processBuilder . environment (  )  . put (  . ENV _ PRESTO _ CATALOG ,    catalog . orElse (  \"  \"  )  )  ;", "processBuilder . environment (  )  . put (  . ENV _ PRESTO _ SCHEMA ,    schema . orElse (  \"  \"  )  )  ;", "Process   process    =    processBuilder . start (  )  ;", "processReference . set ( process )  ;", "Future <  ?  >    writeOutput    =    null ;", "try    {", "writeOutput    =     . executeInNewThread (  \" Query   preprocessor   output \"  ,     (  )     -  >     {", "try    ( OutputStream   outputStream    =    process . getOutputStream (  )  )     {", "outputStream . write ( query . getBytes ( StandardCharsets . UTF _  8  )  )  ;", "}", "return   null ;", "}  )  ;", "readStderr    =     . executeInNewThread (  \" Query   preprocessor   read   stderr \"  ,     (  )     -  >     {", "StringBuilder   builder    =    new   StringBuilder (  )  ;", "try    ( InputStream   inputStream    =    process . getErrorStream (  )  )     {", "CharStreams . copy ( new   InputStreamReader ( inputStream ,    StandardCharsets . UTF _  8  )  ,    builder )  ;", "}    catch    ( IOException    |    RuntimeException   ignored )     {", "}", "return   builder . toString (  )  ;", "}  )  ;", "try    ( InputStream   inputStream    =    process . getInputStream (  )  )     {", "result    =    CharStreams . toString ( new   InputStreamReader ( inputStream ,    StandardCharsets . UTF _  8  )  )  ;", "}", "try    {", "writeOutput . get (  )  ;", "}    catch    ( ExecutionException   e )     {", "throw   e . getCause (  )  ;", "}", "exitCode    =    process . waitFor (  )  ;", "}    finally    {", "process . destroyForcibly (  )  ;", "if    ( writeOutput    !  =    null )     {", "writeOutput . cancel ( true )  ;", "}", "}", "}    catch    ( Exception   e )     {", "throw   e ;", "}    catch    ( InterruptedException   e )     {", "Thread . currentThread (  )  . interrupt (  )  ;", "throw   new   Exception (  \" Interrupted   while   preprocessing   query \"  )  ;", "}    catch    ( Throwable   e )     {", "throw   new   Exception (  (  \" Error   preprocessing   query :     \"     +     ( e . getMessage (  )  )  )  ,    e )  ;", "}", "if    ( exitCode    !  =     0  )     {", "Optional < String >    errorMessage    =    MoreFutures . tryGetFutureValue ( readStderr ,     1  0  0  ,    TimeUnit . MILLISECONDS )  . flatMap (  (    value )     -  >    Optional . ofNullable ( emptyToNull ( value . trim (  )  )  )  )  ;", "throw   new   Exception (  (  (  \" Query   preprocessor   exited    \"     +    exitCode )     +     ( errorMessage . map (  (    message 1  )     -  >     (  \"  \\ n =  =  =  \\ n \"     +    message 1  )     +     \"  \\ n =  =  =  \"  )  . orElse (  \"  \"  )  )  )  )  ;", "}", "return   result ;", "}  )  ;", "try    {", "return   task . get ( timeout . toMillis (  )  ,    TimeUnit . MILLISECONDS )  ;", "}    catch    ( InterruptedException   e )     {", "Thread . currentThread (  )  . interrupt (  )  ;", "throw   new   Exception (  \" Interrupted   while   preprocessing   query \"  )  ;", "}    catch    ( ExecutionException   e )     {", "Throwable   cause    =    e . getCause (  )  ;", "propagateIfPossible ( cause ,    Exception . class )  ;", "throw   new   Exception (  (  \" Error   preprocessing   query :     \"     +     ( cause . getMessage (  )  )  )  ,    cause )  ;", "}    catch    ( TimeoutException   e )     {", "throw   new   Exception (  (  \" Timed   out   waiting   for   query   preprocessor   after    \"     +    timeout )  )  ;", "}    finally    {", "Process   process    =    processReference . get (  )  ;", "if    ( process    !  =    null )     {", "process . destroyForcibly (  )  ;", "}", "task . cancel ( true )  ;", "}", "}", "METHOD_END"], "methodName": ["preprocessQueryInternal"], "fileName": "com.facebook.presto.cli.QueryPreprocessor"}, {"methodBody": ["METHOD_START", "{", "return   session . get (  )  ;", "}", "METHOD_END"], "methodName": ["getSession"], "fileName": "com.facebook.presto.cli.QueryRunner"}, {"methodBody": ["METHOD_START", "{", "return   debug ;", "}", "METHOD_END"], "methodName": ["isDebug"], "fileName": "com.facebook.presto.cli.QueryRunner"}, {"methodBody": ["METHOD_START", "{", "this . session . set ( Objects . requireNonNull ( session ,     \" session   is   null \"  )  )  ;", "}", "METHOD_END"], "methodName": ["setSession"], "fileName": "com.facebook.presto.cli.QueryRunner"}, {"methodBody": ["METHOD_START", "{", "if    (  ( user . isPresent (  )  )     &  &     ( password . isPresent (  )  )  )     {", "checkArgument ( session . getServer (  )  . getScheme (  )  . equalsIgnoreCase (  \" https \"  )  ,     \" Authentication   using   username / password   requires   HTTPS   to   be   enabled \"  )  ;", "clientBuilder . addInterceptor ( basicAuth ( user . get (  )  ,    password . get (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["setupBasicAuth"], "fileName": "com.facebook.presto.cli.QueryRunner"}, {"methodBody": ["METHOD_START", "{", "if    ( accessToken . isPresent (  )  )     {", "checkArgument ( session . getServer (  )  . getScheme (  )  . equalsIgnoreCase (  \" https \"  )  ,     \" Authentication   using   an   access   token   requires   HTTPS   to   be   enabled \"  )  ;", "clientBuilder . addInterceptor ( tokenAuth ( accessToken . get (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["setupTokenAuth"], "fileName": "com.facebook.presto.cli.QueryRunner"}, {"methodBody": ["METHOD_START", "{", "OkHttpClient . Builder   builder    =    httpClient . newBuilder (  )  ;", "sslSetup . accept ( builder )  ;", "OkHttpClient   client    =    builder . build (  )  ;", "return   newStatementClient ( client ,    session ,    q )  ;", "}", "METHOD_END"], "methodName": ["startInternalQuery"], "fileName": "com.facebook.presto.cli.QueryRunner"}, {"methodBody": ["METHOD_START", "{", "return   startInternalQuery ( stripTransactionId ( session . get (  )  )  ,    query )  ;", "}", "METHOD_END"], "methodName": ["startInternalQuery"], "fileName": "com.facebook.presto.cli.QueryRunner"}, {"methodBody": ["METHOD_START", "{", "return   new   Query ( startInternalQuery ( session . get (  )  ,    query )  ,    debug )  ;", "}", "METHOD_END"], "methodName": ["startQuery"], "fileName": "com.facebook.presto.cli.QueryRunner"}, {"methodBody": ["METHOD_START", "{", "return   new   io . airlift . units . DataSize ( bytes ,    BYTE )  ;", "}", "METHOD_END"], "methodName": ["bytes"], "fileName": "com.facebook.presto.cli.StatusPrinter"}, {"methodBody": ["METHOD_START", "{", "return   new   Duration ( millis ,    TimeUnit . MILLISECONDS )  ;", "}", "METHOD_END"], "methodName": ["millis"], "fileName": "com.facebook.presto.cli.StatusPrinter"}, {"methodBody": ["METHOD_START", "{", "if    ( total    =  =     0  )     {", "return    0  ;", "}", "return   Math . min (  1  0  0  ,     (  ( count    *     1  0  0  .  0  )     /    total )  )  ;", "}", "METHOD_END"], "methodName": ["percentage"], "fileName": "com.facebook.presto.cli.StatusPrinter"}, {"methodBody": ["METHOD_START", "{", "Duration   wallTime    =    nanosSince ( start )  ;", "QueryStatusInfo   results    =    client . finalStatusInfo (  )  ;", "StatementStats   stats    =    results . getStats (  )  ;", "int   nodes    =    stats . getNodes (  )  ;", "if    (  ( nodes    =  =     0  )     |  |     (  ( stats . getTotalSplits (  )  )     =  =     0  )  )     {", "return ;", "}", "out . println (  )  ;", "String   querySummary    =    String . format (  \" Query    % s ,     % s ,     %  , d    % s \"  ,    results . getId (  )  ,    stats . getState (  )  ,    nodes ,    FormatUtils . pluralize (  \" node \"  ,    nodes )  )  ;", "out . println ( querySummary )  ;", "if    ( debug )     {", "out . println ( results . getInfoUri (  )  . toString (  )  )  ;", "}", "String   splitsSummary    =    String . format (  \" Splits :     %  , d   total ,     %  , d   done    (  %  .  2 f %  %  )  \"  ,    stats . getTotalSplits (  )  ,    stats . getCompletedSplits (  )  ,    stats . getProgressPercentage (  )  . orElse (  0  .  0  )  )  ;", "out . println ( splitsSummary )  ;", "if    ( debug )     {", "Duration   cpuTime    =     . millis ( stats . getCpuTimeMillis (  )  )  ;", "String   cpuTimeSummary    =    String . format (  \" CPU   Time :     %  .  1 fs   total ,     %  5 s   rows / s ,     %  8 s ,     % d %  %    active \"  ,    cpuTime . getValue ( TimeUnit . SECONDS )  ,    FormatUtils . formatCountRate ( stats . getProcessedRows (  )  ,    cpuTime ,    false )  ,    FormatUtils . formatDataRate (  . bytes ( stats . getProcessedBytes (  )  )  ,    cpuTime ,    true )  ,     (  ( int )     (  . percentage ( stats . getCpuTimeMillis (  )  ,    stats . getWallTimeMillis (  )  )  )  )  )  ;", "out . println ( cpuTimeSummary )  ;", "double   parallelism    =     ( cpuTime . getValue ( TimeUnit . MILLISECONDS )  )     /     ( wallTime . getValue ( TimeUnit . MILLISECONDS )  )  ;", "String   perNodeSummary    =    String . format (  \" Per   Node :     %  .  1 f   parallelism ,     %  5 s   rows / s ,     %  8 s \"  ,     ( parallelism    /    nodes )  ,    FormatUtils . formatCountRate (  (  (  ( double )     ( stats . getProcessedRows (  )  )  )     /    nodes )  ,    wallTime ,    false )  ,    FormatUtils . formatDataRate (  . bytes (  (  ( stats . getProcessedBytes (  )  )     /    nodes )  )  ,    wallTime ,    true )  )  ;", "reprintLine ( perNodeSummary )  ;", "out . println ( String . format (  \" Parallelism :     %  .  1 f \"  ,    parallelism )  )  ;", "}", "String   statsLine    =    String . format (  \"  % s    [  % s   rows ,     % s ]     [  % s   rows / s ,     % s ]  \"  ,    FormatUtils . formatTime ( wallTime )  ,    FormatUtils . formatCount ( stats . getProcessedRows (  )  )  ,    FormatUtils . formatDataSize (  . bytes ( stats . getProcessedBytes (  )  )  ,    true )  ,    FormatUtils . formatCountRate ( stats . getProcessedRows (  )  ,    wallTime ,    false )  ,    FormatUtils . formatDataRate (  . bytes ( stats . getProcessedBytes (  )  )  ,    wallTime ,    true )  )  ;", "out . println ( statsLine )  ;", "out . println (  )  ;", "}", "METHOD_END"], "methodName": ["printFinalInfo"], "fileName": "com.facebook.presto.cli.StatusPrinter"}, {"methodBody": ["METHOD_START", "{", "long   lastPrint    =    System . nanoTime (  )  ;", "try    {", "while    ( client . isRunning (  )  )     {", "try    {", "if    (  ( client . currentData (  )  . getData (  )  )     !  =    null )     {", "return ;", "}", "boolean   update    =     ( nanosSince ( lastPrint )  . getValue ( TimeUnit . SECONDS )  )     >  =     0  .  5  ;", "int   key    =    KeyReader . readKey (  )  ;", "if    ( key    =  =     (  . CTRL _ P )  )     {", "client . cancelLeafStage (  )  ;", "} else", "if    ( key    =  =     (  . CTRL _ C )  )     {", "updateScreen (  )  ;", "update    =    false ;", "client . close (  )  ;", "} else", "if    (  ( Character . toUpperCase ( key )  )     =  =     ' D '  )     {", "debug    =     !  ( debug )  ;", "console . resetScreen (  )  ;", "update    =    true ;", "}", "if    ( update )     {", "updateScreen (  )  ;", "lastPrint    =    System . nanoTime (  )  ;", "}", "client . advance (  )  ;", "}    catch    ( RuntimeException   e )     {", ". log . debug ( e ,     \" error   printing   status \"  )  ;", "if    ( debug )     {", "e . printStackTrace ( out )  ;", "}", "}", "}", "}    finally    {", "console . resetScreen (  )  ;", "}", "}", "METHOD_END"], "methodName": ["printInitialStatusUpdates"], "fileName": "com.facebook.presto.cli.StatusPrinter"}, {"methodBody": ["METHOD_START", "{", "StatementStats   stats    =    results . getStats (  )  ;", "Duration   wallTime    =    nanosSince ( start )  ;", "int   progressPercentage    =     (  ( int )     ( Math . min (  9  9  ,    stats . getProgressPercentage (  )  . orElse (  0  .  0  )  )  )  )  ;", "if    ( console . isRealTerminal (  )  )     {", "reprintLine (  \"  \"  )  ;", "int   terminalWidth    =    console . getWidth (  )  ;", "if    ( terminalWidth    <     7  5  )     {", "reprintLine (  \" WARNING :    Terminal \"  )  ;", "reprintLine (  \" must   be   at   least \"  )  ;", "reprintLine (  \"  8  0    characters   wide \"  )  ;", "reprintLine (  \"  \"  )  ;", "reprintLine ( stats . getState (  )  )  ;", "reprintLine ( String . format (  \"  % s    % d %  %  \"  ,    FormatUtils . formatTime ( wallTime )  ,    progressPercentage )  )  ;", "return ;", "}", "int   nodes    =    stats . getNodes (  )  ;", "String   querySummary    =    String . format (  \" Query    % s ,     % s ,     %  , d    % s ,     %  , d   splits \"  ,    results . getId (  )  ,    stats . getState (  )  ,    nodes ,    FormatUtils . pluralize (  \" node \"  ,    nodes )  ,    stats . getTotalSplits (  )  )  ;", "reprintLine ( querySummary )  ;", "String   url    =    results . getInfoUri (  )  . toString (  )  ;", "if    (  ( debug )     &  &     (  ( url . length (  )  )     <    terminalWidth )  )     {", "reprintLine ( url )  ;", "}", "if    (  ( nodes    =  =     0  )     |  |     (  ( stats . getTotalSplits (  )  )     =  =     0  )  )     {", "return ;", "}", "if    ( debug )     {", "String   splitsSummary    =    String . format (  \" Splits :           %  , d   queued ,     %  , d   running ,     %  , d   done \"  ,    stats . getQueuedSplits (  )  ,    stats . getRunningSplits (  )  ,    stats . getCompletedSplits (  )  )  ;", "reprintLine ( splitsSummary )  ;", "Duration   cpuTime    =     . millis ( stats . getCpuTimeMillis (  )  )  ;", "String   cpuTimeSummary    =    String . format (  \" CPU   Time :     %  .  1 fs   total ,     %  5 s   rows / s ,     %  8 s ,     % d %  %    active \"  ,    cpuTime . getValue ( TimeUnit . SECONDS )  ,    FormatUtils . formatCountRate ( stats . getProcessedRows (  )  ,    cpuTime ,    false )  ,    FormatUtils . formatDataRate (  . bytes ( stats . getProcessedBytes (  )  )  ,    cpuTime ,    true )  ,     (  ( int )     (  . percentage ( stats . getCpuTimeMillis (  )  ,    stats . getWallTimeMillis (  )  )  )  )  )  ;", "reprintLine ( cpuTimeSummary )  ;", "double   parallelism    =     ( cpuTime . getValue ( TimeUnit . MILLISECONDS )  )     /     ( wallTime . getValue ( TimeUnit . MILLISECONDS )  )  ;", "String   perNodeSummary    =    String . format (  \" Per   Node :     %  .  1 f   parallelism ,     %  5 s   rows / s ,     %  8 s \"  ,     ( parallelism    /    nodes )  ,    FormatUtils . formatCountRate (  (  (  ( double )     ( stats . getProcessedRows (  )  )  )     /    nodes )  ,    wallTime ,    false )  ,    FormatUtils . formatDataRate (  . bytes (  (  ( stats . getProcessedBytes (  )  )     /    nodes )  )  ,    wallTime ,    true )  )  ;", "reprintLine ( perNodeSummary )  ;", "reprintLine ( String . format (  \" Parallelism :     %  .  1 f \"  ,    parallelism )  )  ;", "}", "verify (  ( terminalWidth    >  =     7  5  )  )  ;", "int   progressWidth    =     (  ( Math . min ( terminalWidth ,     1  0  0  )  )     -     7  5  )     +     1  7  ;", "if    ( stats . isScheduled (  )  )     {", "String   progressBar    =    FormatUtils . formatProgressBar ( progressWidth ,    stats . getCompletedSplits (  )  ,    Math . max (  0  ,    stats . getRunningSplits (  )  )  ,    stats . getTotalSplits (  )  )  ;", "String   progressLine    =    String . format (  \"  % s    [  %  5 s   rows ,     %  6 s ]     [  %  5 s   rows / s ,     %  8 s ]     [  % s ]     % d %  %  \"  ,    FormatUtils . formatTime ( wallTime )  ,    FormatUtils . formatCount ( stats . getProcessedRows (  )  )  ,    FormatUtils . formatDataSize (  . bytes ( stats . getProcessedBytes (  )  )  ,    true )  ,    FormatUtils . formatCountRate ( stats . getProcessedRows (  )  ,    wallTime ,    false )  ,    FormatUtils . formatDataRate (  . bytes ( stats . getProcessedBytes (  )  )  ,    wallTime ,    true )  ,    progressBar ,    progressPercentage )  ;", "reprintLine ( progressLine )  ;", "} else    {", "String   progressBar    =    FormatUtils . formatProgressBar ( progressWidth ,    Ints . saturatedCast ( nanosSince ( start )  . roundTo ( TimeUnit . SECONDS )  )  )  ;", "String   progressLine    =    String . format (  \"  % s    [  %  5 s   rows ,     %  6 s ]     [  %  5 s   rows / s ,     %  8 s ]     [  % s ]  \"  ,    FormatUtils . formatTime ( wallTime )  ,    FormatUtils . formatCount ( stats . getProcessedRows (  )  )  ,    FormatUtils . formatDataSize (  . bytes ( stats . getProcessedBytes (  )  )  ,    true )  ,    FormatUtils . formatCountRate ( stats . getProcessedRows (  )  ,    wallTime ,    false )  ,    FormatUtils . formatDataRate (  . bytes ( stats . getProcessedBytes (  )  )  ,    wallTime ,    true )  ,    progressBar )  ;", "reprintLine ( progressLine )  ;", "}", "reprintLine (  \"  \"  )  ;", "String   stagesHeader    =    String . format (  \"  %  1  0 s %  1 s       %  5 s       %  6 s       %  5 s       %  7 s       %  6 s       %  5 s       %  5 s \"  ,     \" STAGE \"  ,     \" S \"  ,     \" ROWS \"  ,     \" ROWS / s \"  ,     \" BYTES \"  ,     \" BYTES / s \"  ,     \" QUEUED \"  ,     \" RUN \"  ,     \" DONE \"  )  ;", "reprintLine ( stagesHeader )  ;", "printStageTree ( stats . getRootStage (  )  ,     \"  \"  ,    new   AtomicInteger (  )  )  ;", "} else    {", "String   querySummary    =    String . format (  \" Query    % s    [  % s ]    i [  % s    % s    % s ]    o [  % s    % s    % s ]    splits [  %  , d /  %  , d /  %  , d ]  \"  ,    results . getId (  )  ,    stats . getState (  )  ,    FormatUtils . formatCount ( stats . getProcessedRows (  )  )  ,    FormatUtils . formatDataSize (  . bytes ( stats . getProcessedBytes (  )  )  ,    false )  ,    FormatUtils . formatDataRate (  . bytes ( stats . getProcessedBytes (  )  )  ,    wallTime ,    false )  ,    FormatUtils . formatCount ( stats . getProcessedRows (  )  )  ,    FormatUtils . formatDataSize (  . bytes ( stats . getProcessedBytes (  )  )  ,    false )  ,    FormatUtils . formatDataRate (  . bytes ( stats . getProcessedBytes (  )  )  ,    wallTime ,    false )  ,    stats . getQueuedSplits (  )  ,    stats . getRunningSplits (  )  ,    stats . getCompletedSplits (  )  )  ;", "reprintLine ( querySummary )  ;", "}", "}", "METHOD_END"], "methodName": ["printQueryInfo"], "fileName": "com.facebook.presto.cli.StatusPrinter"}, {"methodBody": ["METHOD_START", "{", "Duration   elapsedTime    =    nanosSince ( start )  ;", "String   id    =    String . valueOf ( stageNumberCounter . getAndIncrement (  )  )  ;", "String   name    =    indent    +    id ;", "name    +  =    Strings . repeat (  \"  .  \"  ,    Math . max (  0  ,     (  1  0     -     ( name . length (  )  )  )  )  )  ;", "String   bytesPerSecond ;", "String   rowsPerSecond ;", "if    ( stage . isDone (  )  )     {", "bytesPerSecond    =    FormatUtils . formatDataRate ( new   io . airlift . units . DataSize (  0  ,    BYTE )  ,    new   Duration (  0  ,    TimeUnit . SECONDS )  ,    false )  ;", "rowsPerSecond    =    FormatUtils . formatCountRate (  0  ,    new   Duration (  0  ,    TimeUnit . SECONDS )  ,    false )  ;", "} else    {", "bytesPerSecond    =    FormatUtils . formatDataRate (  . bytes ( stage . getProcessedBytes (  )  )  ,    elapsedTime ,    false )  ;", "rowsPerSecond    =    FormatUtils . formatCountRate ( stage . getProcessedRows (  )  ,    elapsedTime ,    false )  ;", "}", "String   stageSummary    =    String . format (  \"  %  1  0 s %  1 s       %  5 s       %  6 s       %  5 s       %  7 s       %  6 s       %  5 s       %  5 s \"  ,    name ,     . stageStateCharacter ( stage . getState (  )  )  ,    FormatUtils . formatCount ( stage . getProcessedRows (  )  )  ,    rowsPerSecond ,    FormatUtils . formatDataSize (  . bytes ( stage . getProcessedBytes (  )  )  ,    false )  ,    bytesPerSecond ,    stage . getQueuedSplits (  )  ,    stage . getRunningSplits (  )  ,    stage . getCompletedSplits (  )  )  ;", "reprintLine ( stageSummary )  ;", "for    ( StageStats   subStage    :    stage . getSubStages (  )  )     {", "printStageTree ( subStage ,     ( indent    +     \"        \"  )  ,    stageNumberCounter )  ;", "}", "}", "METHOD_END"], "methodName": ["printStageTree"], "fileName": "com.facebook.presto.cli.StatusPrinter"}, {"methodBody": ["METHOD_START", "{", "console . reprintLine ( line )  ;", "}", "METHOD_END"], "methodName": ["reprintLine"], "fileName": "com.facebook.presto.cli.StatusPrinter"}, {"methodBody": ["METHOD_START", "{", "return    \" FAILED \"  . equals ( state )     ?     ' X '     :    state . charAt (  0  )  ;", "}", "METHOD_END"], "methodName": ["stageStateCharacter"], "fileName": "com.facebook.presto.cli.StatusPrinter"}, {"methodBody": ["METHOD_START", "{", "console . repositionCursor (  )  ;", "printQueryInfo ( client . currentInfo (  )  )  ;", "}", "METHOD_END"], "methodName": ["updateScreen"], "fileName": "com.facebook.presto.cli.StatusPrinter"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < String >    builder    =    ImmutableList . builder (  )  ;", "for    ( String   value    :    values )     {", "if    ( value . startsWith ( prefix )  )     {", "builder . add ( value )  ;", "}", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["filterResults"], "fileName": "com.facebook.presto.cli.TableNameCompleter"}, {"methodBody": ["METHOD_START", "{", "for    ( int   i    =     ( buffer . length (  )  )     -     1  ;    i    >  =     0  ;    i -  -  )     {", "if    ( Character . isWhitesp ( buffer . charAt ( i )  )  )     {", "return   i ;", "}", "}", "return    -  1  ;", "}", "METHOD_END"], "methodName": ["findLastBlank"], "fileName": "com.facebook.presto.cli.TableNameCompleter"}, {"methodBody": ["METHOD_START", "{", "return   queryMetadata (  \" SHOW   FUNCTIONS \"  )  ;", "}", "METHOD_END"], "methodName": ["listFunctions"], "fileName": "com.facebook.presto.cli.TableNameCompleter"}, {"methodBody": ["METHOD_START", "{", "return   queryMetadata ( String . format (  \" SELECT   table _ name   FROM   information _ schema . tables   WHERE   table _ schema    =     '  % s '  \"  ,    schemaName )  )  ;", "}", "METHOD_END"], "methodName": ["listTables"], "fileName": "com.facebook.presto.cli.TableNameCompleter"}, {"methodBody": ["METHOD_START", "{", "String   schemaName    =    queryRunner . getSession (  )  . getSchema (  )  ;", "if    ( schemaName    !  =    null )     {", "executor . execute (  (  )     -  >     {", "functionCache . refresh ( schemaName )  ;", "tableCache . refresh ( schemaName )  ;", "}  )  ;", "}", "}", "METHOD_END"], "methodName": ["populateCache"], "fileName": "com.facebook.presto.cli.TableNameCompleter"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < String >    cache    =    ImmutableList . builder (  )  ;", "try    ( StatementClient   client    =    queryRunner . startInternalQuery ( query )  )     {", "while    (  ( client . isRunning (  )  )     &  &     (  !  ( Thread . currentThread (  )  . isInterrupted (  )  )  )  )     {", "QueryData   results    =    client . currentData (  )  ;", "if    (  ( results . getData (  )  )     !  =    null )     {", "for    ( List < Object >    row    :    results . getData (  )  )     {", "cache . add (  (  ( String )     ( row . get (  0  )  )  )  )  ;", "}", "}", "client . advance (  )  ;", "}", "}", "return   cache . build (  )  ;", "}", "METHOD_END"], "methodName": ["queryMetadata"], "fileName": "com.facebook.presto.cli.TableNameCompleter"}, {"methodBody": ["METHOD_START", "{", "return   s . getBytes ( StandardCharsets . UTF _  8  )  ;", "}", "METHOD_END"], "methodName": ["bytes"], "fileName": "com.facebook.presto.cli.TestAlignedTablePrinter"}, {"methodBody": ["METHOD_START", "{", "return   Arrays . asList ( values )  ;", "}", "METHOD_END"], "methodName": ["row"], "fileName": "com.facebook.presto.cli.TestAlignedTablePrinter"}, {"methodBody": ["METHOD_START", "{", "return   Arrays . asList ( rows )  ;", "}", "METHOD_END"], "methodName": ["rows"], "fileName": "com.facebook.presto.cli.TestAlignedTablePrinter"}, {"methodBody": ["METHOD_START", "{", "StringWriter   writer    =    new   StringWriter (  )  ;", "List < String >    fieldNames    =    ImmutableList . of (  \" first \"  ,     \" last \"  ,     \" quantity \"  )  ;", "OutputPrinter   printer    =    new   AlignedTablePrinter ( fieldNames ,    writer )  ;", "printer . printRows (  . rows (  . row (  \" hello \"  ,     \" world \"  ,     1  2  3  )  ,     . row (  \" a \"  ,    null ,     4  .  5  )  ,     . row (  \" some   long \\ ntext   that \\ ndoes   not \\ nfit   on \\ none   line \"  ,     \" more \\ ntext \"  ,     4  5  6  7  )  ,     . row (  \" bye \"  ,     \" done \"  ,     (  -  1  5  )  )  )  ,    true )  ;", "printer . finish (  )  ;", "String   expected    =     \"  \"     +     (  (  (  (  (  (  (  (  (  (  \"          first          |    last       |    quantity    \\ n \"     +     \"  -  -  -  -  -  -  -  -  -  -  -  +  -  -  -  -  -  -  -  +  -  -  -  -  -  -  -  -  -  -  \\ n \"  )     +     \"    hello                |    world    |                    1  2  3     \\ n \"  )     +     \"    a                            |    NULL       |                    4  .  5     \\ n \"  )     +     \"    some   long +  |    more    +  |                 4  5  6  7     \\ n \"  )     +     \"    text   that +  |    text       |                                \\ n \"  )     +     \"    does   not    +  |                       |                                \\ n \"  )     +     \"    fit   on          +  |                       |                                \\ n \"  )     +     \"    one   line       |                       |                                \\ n \"  )     +     \"    bye                      |    done       |                    -  1  5     \\ n \"  )     +     \"  (  4    rows )  \\ n \"  )  ;", "assertEquals ( writer . getBuffer (  )  . toString (  )  ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testAlignedPrinting"], "fileName": "com.facebook.presto.cli.TestAlignedTablePrinter"}, {"methodBody": ["METHOD_START", "{", "StringWriter   writer    =    new   StringWriter (  )  ;", "List < String >    fieldNames    =    ImmutableList . of (  \" first \"  ,     \" binary \"  ,     \" last \"  )  ;", "OutputPrinter   printer    =    new   AlignedTablePrinter ( fieldNames ,    writer )  ;", "printer . printRows (  . rows (  . row (  \" hello \"  ,     . bytes (  \" hello \"  )  ,     \" world \"  )  ,     . row (  \" a \"  ,     . bytes (  \" some   long   text   that   is   more   than    1  6    bytes \"  )  ,     \" b \"  )  ,     . row (  \" cat \"  ,     . bytes (  \"  \"  )  ,     \" dog \"  )  )  ,    true )  ;", "printer . finish (  )  ;", "String   expected    =     \"  \"     +     (  (  (  (  (  (  (  \"    first    |                                                                binary                                                                   |    last       \\ n \"     +     \"  -  -  -  -  -  -  -  +  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  +  -  -  -  -  -  -  -  \\ n \"  )     +     \"    hello    |     6  8     6  5     6 c    6 c    6 f                                                                                                       |    world    \\ n \"  )     +     \"    a                |     7  3     6 f    6 d    6  5     2  0     6 c    6 f    6 e    6  7     2  0     7  4     6  5     7  8     7  4     2  0     7  4  +  |    b                \\ n \"  )     +     \"                       |     6  8     6  1     7  4     2  0     6  9     7  3     2  0     6 d    6 f    7  2     6  5     2  0     7  4     6  8     6  1     6 e +  |                       \\ n \"  )     +     \"                       |     2  0     3  1     3  6     2  0     6  2     7  9     7  4     6  5     7  3                                                                    |                       \\ n \"  )     +     \"    cat          |                                                                                                                                                     |    dog          \\ n \"  )     +     \"  (  3    rows )  \\ n \"  )  ;", "assertEquals ( writer . getBuffer (  )  . toString (  )  ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testAlignedPrintingHex"], "fileName": "com.facebook.presto.cli.TestAlignedTablePrinter"}, {"methodBody": ["METHOD_START", "{", "StringWriter   writer    =    new   StringWriter (  )  ;", "List < String >    fieldNames    =    ImmutableList . of (  \" first \"  ,     \" last \"  )  ;", "OutputPrinter   printer    =    new    ( fieldNames ,    writer )  ;", "printer . finish (  )  ;", "String   expected    =     \"  \"     +     (  (  \"    first    |    last    \\ n \"     +     \"  -  -  -  -  -  -  -  +  -  -  -  -  -  -  \\ n \"  )     +     \"  (  0    rows )  \\ n \"  )  ;", "assertEquals ( writer . getBuffer (  )  . toString (  )  ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testAlignedPrintingNoRows"], "fileName": "com.facebook.presto.cli.TestAlignedTablePrinter"}, {"methodBody": ["METHOD_START", "{", "StringWriter   writer    =    new   StringWriter (  )  ;", "List < String >    fieldNames    =    ImmutableList . of (  \" first \"  ,     \" last \"  )  ;", "OutputPrinter   printer    =    new   AlignedTablePrinter ( fieldNames ,    writer )  ;", "printer . printRows (  . rows (  . row (  \" a   long   line \\ nwithout   wrapping \"  ,     \" text \"  )  )  ,    true )  ;", "printer . finish (  )  ;", "String   expected    =     \"  \"     +     (  (  (  (  \"                   first                      |    last    \\ n \"     +     \"  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  +  -  -  -  -  -  -  \\ n \"  )     +     \"    a   long   line                   |    text    \\ n \"  )     +     \"    without   wrapping    |                    \\ n \"  )     +     \"  (  1    row )  \\ n \"  )  ;", "assertEquals ( writer . getBuffer (  )  . toString (  )  ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testAlignedPrintingOneRow"], "fileName": "com.facebook.presto.cli.TestAlignedTablePrinter"}, {"methodBody": ["METHOD_START", "{", "StringWriter   writer    =    new   StringWriter (  )  ;", "List < String >    fieldNames    =    ImmutableList . of (  \" go \\ u 7 f 5  1  \"  ,     \" last \"  ,     \" quantity \\ u 7 f 5  1  \"  )  ;", "OutputPrinter   printer    =    new   AlignedTablePrinter ( fieldNames ,    writer )  ;", "printer . printRows (  . rows (  . row (  \" hello \"  ,     \" wide \\ u 7 f 5  1  \"  ,     1  2  3  )  ,     . row (  \" some   long \\ ntext    \\ u 7 f 5  1  \\ ndoes   not \\ u 7 f 5  1  \\ nfit \"  ,     \" more \\ ntext \"  ,     4  5  6  7  )  ,     . row (  \" bye \"  ,     \" done \"  ,     (  -  1  5  )  )  )  ,    true )  ;", "printer . finish (  )  ;", "String   expected    =     \"  \"     +     (  (  (  (  (  (  (  (  \"             go \\ u 7 f 5  1              |       last       |    quantity \\ u 7 f 5  1     \\ n \"     +     \"  -  -  -  -  -  -  -  -  -  -  -  -  +  -  -  -  -  -  -  -  -  +  -  -  -  -  -  -  -  -  -  -  -  -  \\ n \"  )     +     \"    hello                   |    wide \\ u 7 f 5  1     |                          1  2  3     \\ n \"  )     +     \"    some   long    +  |    more       +  |                       4  5  6  7     \\ n \"  )     +     \"    text    \\ u 7 f 5  1           +  |    text          |                                      \\ n \"  )     +     \"    does   not \\ u 7 f 5  1  +  |                          |                                      \\ n \"  )     +     \"    fit                         |                          |                                      \\ n \"  )     +     \"    bye                         |    done          |                          -  1  5     \\ n \"  )     +     \"  (  3    rows )  \\ n \"  )  ;", "assertEquals ( writer . getBuffer (  )  . toString (  )  ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testAlignedPrintingWideCharacters"], "fileName": "com.facebook.presto.cli.TestAlignedTablePrinter"}, {"methodBody": ["METHOD_START", "{", "ClientSession   session    =    new   ClientOptions (  )  . toClientSession (  )  ;", "assertEquals ( session . getServer (  )  . toString (  )  ,     \" http :  /  / localhost :  8  0  8  0  \"  )  ;", "assertEquals ( session . getSource (  )  ,     \" presto - cli \"  )  ;", "}", "METHOD_END"], "methodName": ["testDefault"], "fileName": "com.facebook.presto.cli.TestClientOptions"}, {"methodBody": ["METHOD_START", "{", "new   ClientOptions . ClientSessionProperty (  \"  = value \"  )  ;", "}", "METHOD_END"], "methodName": ["testEmptyPropertyName"], "fileName": "com.facebook.presto.cli.TestClientOptions"}, {"methodBody": ["METHOD_START", "{", "new   ClientOptions . ClientSessionProperty ( Optional . of (  \" cat = alog \"  )  ,     \" name \"  ,     \" value \"  )  ;", "}", "METHOD_END"], "methodName": ["testEqualSignNoAllowedInPropertyCatalog"], "fileName": "com.facebook.presto.cli.TestClientOptions"}, {"methodBody": ["METHOD_START", "{", "new   ClientOptions . ClientSessionProperty (  \"  \\ u 2  6  0  3  = value \"  )  ;", "}", "METHOD_END"], "methodName": ["testInvalidCharsetPropertyName"], "fileName": "com.facebook.presto.cli.TestClientOptions"}, {"methodBody": ["METHOD_START", "{", "new   ClientOptions . ClientSessionProperty (  \" name =  \\ u 2  6  0  3  \"  )  ;", "}", "METHOD_END"], "methodName": ["testInvalidCharsetPropertyValue"], "fileName": "com.facebook.presto.cli.TestClientOptions"}, {"methodBody": ["METHOD_START", "{", "ClientOptions   options    =    new   ClientOptions (  )  ;", "options . server    =     \" x : y \"  ;", "options . toClientSession (  )  ;", "}", "METHOD_END"], "methodName": ["testInvalidServer"], "fileName": "com.facebook.presto.cli.TestClientOptions"}, {"methodBody": ["METHOD_START", "{", "Console   console    =    SingleCommand . singleCommand ( Console . class )  . parse (  \"  -  - resource - estimate \"  ,     \" resource 1  =  1 B \"  ,     \"  -  - resource - estimate \"  ,     \" resource 2  =  2  .  2 h \"  )  ;", "options    =    console . clientOptions ;", "assertEquals ( options . resourceEstimates ,    ImmutableList . of ( new    . ClientResourceEstimate (  \" resource 1  \"  ,     \"  1 B \"  )  ,    new    . ClientResourceEstimate (  \" resource 2  \"  ,     \"  2  .  2 h \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testResourceEstimates"], "fileName": "com.facebook.presto.cli.TestClientOptions"}, {"methodBody": ["METHOD_START", "{", "ClientOptions   options    =    new   ClientOptions (  )  ;", "options . server    =     \" localhost \"  ;", "ClientSession   session    =    options . toClientSession (  )  ;", "assertEquals ( session . getServer (  )  . toString (  )  ,     \" http :  /  / localhost :  8  0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testServerHostOnly"], "fileName": "com.facebook.presto.cli.TestClientOptions"}, {"methodBody": ["METHOD_START", "{", "ClientOptions   options    =    new   ClientOptions (  )  ;", "options . server    =     \" localhost :  8  8  8  8  \"  ;", "ClientSession   session    =    options . toClientSession (  )  ;", "assertEquals ( session . getServer (  )  . toString (  )  ,     \" http :  /  / localhost :  8  8  8  8  \"  )  ;", "}", "METHOD_END"], "methodName": ["testServerHostPort"], "fileName": "com.facebook.presto.cli.TestClientOptions"}, {"methodBody": ["METHOD_START", "{", "ClientOptions   options    =    new   ClientOptions (  )  ;", "options . server    =     \" http :  /  / localhost / foo \"  ;", "ClientSession   session    =    options . toClientSession (  )  ;", "assertEquals ( session . getServer (  )  . toString (  )  ,     \" http :  /  / localhost / foo \"  )  ;", "}", "METHOD_END"], "methodName": ["testServerHttpUri"], "fileName": "com.facebook.presto.cli.TestClientOptions"}, {"methodBody": ["METHOD_START", "{", "ClientOptions   options    =    new   ClientOptions (  )  ;", "options . server    =     \" https :  /  / localhost / foo \"  ;", "ClientSession   session    =    options . toClientSession (  )  ;", "assertEquals ( session . getServer (  )  . toString (  )  ,     \" https :  /  / localhost / foo \"  )  ;", "}", "METHOD_END"], "methodName": ["testServerHttpsUri"], "fileName": "com.facebook.presto.cli.TestClientOptions"}, {"methodBody": ["METHOD_START", "{", "Console   console    =    SingleCommand . singleCommand ( Console . class )  . parse (  \"  -  - session \"  ,     \" system = system - value \"  ,     \"  -  - session \"  ,     \" catalog . name = catalog - property \"  )  ;", "options    =    console . clientOptions ;", "assertEquals ( options . sessionProperties ,    ImmutableList . of ( new    . ClientSessionProperty ( Optional . empty (  )  ,     \" system \"  ,     \" system - value \"  )  ,    new    . ClientSessionProperty ( Optional . of (  \" catalog \"  )  ,     \" name \"  ,     \" catalog - property \"  )  )  )  ;", "assertEquals ( new    . ClientSessionProperty (  \" foo = bar :  = baz \"  )  ,    new    . ClientSessionProperty ( Optional . empty (  )  ,     \" foo \"  ,     \" bar :  = baz \"  )  )  ;", "assertEquals ( new    . ClientSessionProperty (  \" foo =  \"  )  ,    new    . ClientSessionProperty ( Optional . empty (  )  ,     \" foo \"  ,     \"  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testSessionProperties"], "fileName": "com.facebook.presto.cli.TestClientOptions"}, {"methodBody": ["METHOD_START", "{", "ClientOptions   options    =    new   ClientOptions (  )  ;", "options . source    =     \" test \"  ;", "ClientSession   session    =    options . toClientSession (  )  ;", "assertEquals ( session . getSource (  )  ,     \" test \"  )  ;", "}", "METHOD_END"], "methodName": ["testSource"], "fileName": "com.facebook.presto.cli.TestClientOptions"}, {"methodBody": ["METHOD_START", "{", "new   ClientOptions . ClientSessionProperty (  \" foo . bar . baz = value \"  )  ;", "}", "METHOD_END"], "methodName": ["testThreePartPropertyName"], "fileName": "com.facebook.presto.cli.TestClientOptions"}, {"methodBody": ["METHOD_START", "{", "File   historyFile    =    new   File (  \"  /  ?  \"  ,     \"  . history \"  )  ;", "assertFalse ( historyFile . canRead (  )  ,     \" historyFile   is   readable \"  )  ;", "assertFalse ( historyFile . canWrite (  )  ,     \" historyFile   is   writable \"  )  ;", "MemoryHistory   result    =    Console . getHistory ( historyFile )  ;", "assertNotNull ( result ,     \" result   is   null \"  )  ;", "assertFalse (  ( result   instanceof   Fi )  ,     \" result   type   is   Fi \"  )  ;", "}", "METHOD_END"], "methodName": ["testNonExistingHomeFolder"], "fileName": "com.facebook.presto.cli.TestConsoleHistory"}, {"methodBody": ["METHOD_START", "{", "StringWriter   writer    =    new   StringWriter (  )  ;", "List < String >    fieldNames    =    ImmutableList . of (  \" first \"  ,     \" last \"  ,     \" quantity \"  )  ;", "OutputPrinter   printer    =    new    ( fieldNames ,    writer ,    true )  ;", "printer . printRows ( TestAlignedTablePrinter . rows ( TestAlignedTablePrinter . row (  \" hello \"  ,     \" world \"  ,     1  2  3  )  ,    TestAlignedTablePrinter . row (  \" a \"  ,    null ,     4  .  5  )  ,    TestAlignedTablePrinter . row (  \" some   long \\ ntext   that \\ ndoes   not \\ nfit   on \\ none   line \"  ,     \" more \\ ntext \"  ,     4  5  6  7  )  ,    TestAlignedTablePrinter . row (  \" bye \"  ,     \" done \"  ,     (  -  1  5  )  )  )  ,    true )  ;", "printer . finish (  )  ;", "String   expected    =     \"  \"     +     (  (  (  (  (  (  (  (  (  \"  \\  \" first \\  \"  ,  \\  \" last \\  \"  ,  \\  \" quantity \\  \"  \\ n \"     +     \"  \\  \" hello \\  \"  ,  \\  \" world \\  \"  ,  \\  \"  1  2  3  \\  \"  \\ n \"  )     +     \"  \\  \" a \\  \"  ,  \\  \"  \\  \"  ,  \\  \"  4  .  5  \\  \"  \\ n \"  )     +     \"  \\  \" some   long \\ n \"  )     +     \" text   that \\ n \"  )     +     \" does   not \\ n \"  )     +     \" fit   on \\ n \"  )     +     \" one   line \\  \"  ,  \\  \" more \\ n \"  )     +     \" text \\  \"  ,  \\  \"  4  5  6  7  \\  \"  \\ n \"  )     +     \"  \\  \" bye \\  \"  ,  \\  \" done \\  \"  ,  \\  \"  -  1  5  \\  \"  \\ n \"  )  ;", "assertEquals ( writer . getBuffer (  )  . toString (  )  ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testCsvPrinting"], "fileName": "com.facebook.presto.cli.TestCsvPrinter"}, {"methodBody": ["METHOD_START", "{", "StringWriter   writer    =    new   StringWriter (  )  ;", "List < String >    fieldNames    =    ImmutableList . of (  \" first \"  ,     \" last \"  ,     \" quantity \"  )  ;", "OutputPrinter   printer    =    new    ( fieldNames ,    writer ,    false )  ;", "printer . printRows ( TestAlignedTablePrinter . rows ( TestAlignedTablePrinter . row (  \" hello \"  ,     \" world \"  ,     1  2  3  )  ,    TestAlignedTablePrinter . row (  \" a \"  ,    null ,     4  .  5  )  )  ,    true )  ;", "printer . finish (  )  ;", "String   expected    =     \"  \"     +     (  \"  \\  \" hello \\  \"  ,  \\  \" world \\  \"  ,  \\  \"  1  2  3  \\  \"  \\ n \"     +     \"  \\  \" a \\  \"  ,  \\  \"  \\  \"  ,  \\  \"  4  .  5  \\  \"  \\ n \"  )  ;", "assertEquals ( writer . getBuffer (  )  . toString (  )  ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testCsvPrintingNoHeader"], "fileName": "com.facebook.presto.cli.TestCsvPrinter"}, {"methodBody": ["METHOD_START", "{", "StringWriter   writer    =    new   StringWriter (  )  ;", "List < String >    fieldNames    =    ImmutableList . of (  \" first \"  ,     \" last \"  )  ;", "OutputPrinter   printer    =    new    ( fieldNames ,    writer ,    true )  ;", "printer . finish (  )  ;", "assertEquals ( writer . getBuffer (  )  . toString (  )  ,     \"  \\  \" first \\  \"  ,  \\  \" last \\  \"  \\ n \"  )  ;", "}", "METHOD_END"], "methodName": ["testCsvPrintingNoRows"], "fileName": "com.facebook.presto.cli.TestCsvPrinter"}, {"methodBody": ["METHOD_START", "{", "StringWriter   writer    =    new   StringWriter (  )  ;", "List < String >    fieldNames    =    ImmutableList . of (  \" first \"  ,     \" last \"  ,     \" quantity \"  )  ;", "OutputPrinter   printer    =    new    ( fieldNames ,    writer ,    false )  ;", "printer . printRows ( TestAlignedTablePrinter . rows ( TestAlignedTablePrinter . row (  \" hello \"  . getBytes (  )  ,    null ,     1  2  3  )  )  ,    true )  ;", "printer . finish (  )  ;", "String   expected    =     \"  \\  \"  6  8     6  5     6 c    6 c    6 f \\  \"  ,  \\  \"  \\  \"  ,  \\  \"  1  2  3  \\  \"  \\ n \"  ;", "assertEquals ( writer . getBuffer (  )  . toString (  )  ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testCsvVarbinaryPrinting"], "fileName": "com.facebook.presto.cli.TestCsvPrinter"}, {"methodBody": ["METHOD_START", "{", "return   new   QueryRunner ( clientSession ,    false ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["createQueryRunner"], "fileName": "com.facebook.presto.cli.TestQueryRunner"}, {"methodBody": ["METHOD_START", "{", "QueryResults   queryResults    =    new   QueryResults (  \"  2  0  1  6  0  1  2  8  _  2  1  4  7  1  0  _  0  0  0  1  2  _ rk 6  8 b \"  ,    server . url (  \"  / query . html ?  2  0  1  6  0  1  2  8  _  2  1  4  7  1  0  _  0  0  0  1  2  _ rk 6  8 b \"  )  . uri (  )  ,    null ,    null ,    ImmutableList . of ( new   com . facebook . presto . client . Column (  \"  _ col 0  \"  ,    BigintType . BIGINT )  )  ,    ImmutableList . of ( ImmutableList . of (  1  2  3  )  )  ,    StatementStats . builder (  )  . setState (  \" FINISHED \"  )  . build (  )  ,    null ,    null ,    null )  ;", "return   TestQueryRunner . QUERY _ RESULTS _ CODEC . toJson ( queryResults )  ;", "}", "METHOD_END"], "methodName": ["createResults"], "fileName": "com.facebook.presto.cli.TestQueryRunner"}, {"methodBody": ["METHOD_START", "{", "server    =    new   MockWebServer (  )  ;", "server . start (  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.cli.TestQueryRunner"}, {"methodBody": ["METHOD_START", "{", "server . close (  )  ;", "}", "METHOD_END"], "methodName": ["teardown"], "fileName": "com.facebook.presto.cli.TestQueryRunner"}, {"methodBody": ["METHOD_START", "{", "server . enqueue ( new   MockResponse (  )  . setResponseCode (  3  0  7  )  . addHeader ( LOCATION ,    server . url (  \"  / v 1  / statement \"  )  )  . addHeader ( SET _ COOKIE ,     \" a = apple \"  )  )  ;", "server . enqueue ( new   MockResponse (  )  . addHeader ( CONTENT _ TYPE ,     \" application / json \"  )  . setBody ( createResults (  )  )  )  ;", "server . enqueue ( new   MockResponse (  )  . addHeader ( CONTENT _ TYPE ,     \" application / json \"  )  . setBody ( createResults (  )  )  )  ;", "QueryRunner   queryRunner    =    TestQueryRunner . createQueryRunner ( new   ent . ClientSession ( server . url (  \"  /  \"  )  . uri (  )  ,     \" user \"  ,     \" source \"  ,    ImmutableSet . of (  )  ,     \" clientInfo \"  ,     \" catalog \"  ,     \" schema \"  ,     \" America / Los _ Angeles \"  ,    Locale . ENGLISH ,    ImmutableMap . of (  )  ,    ImmutableMap . of (  )  ,    ImmutableMap . of (  )  ,    null ,    new   Duration (  2  ,    TimeUnit . MINUTES )  )  )  ;", "try    ( Query   query    =    queryRunner . startQuery (  \" first   query   will   introduce   a   cookie \"  )  )     {", "query . renderOutput ( new   PrintStream ( nullOutputStream (  )  )  ,    ClientOptions . OutputFormat . CSV ,    false )  ;", "}", "try    ( Query   query    =    queryRunner . startQuery (  \" second   query   should   carry   the   cookie \"  )  )     {", "query . renderOutput ( new   PrintStream ( nullOutputStream (  )  )  ,    ClientOptions . OutputFormat . CSV ,    false )  ;", "}", "assertEquals ( server . takeRequest (  )  . getHeader (  \" Cookie \"  )  ,    null )  ;", "assertEquals ( server . takeRequest (  )  . getHeader (  \" Cookie \"  )  ,     \" a = apple \"  )  ;", "assertEquals ( server . takeRequest (  )  . getHeader (  \" Cookie \"  )  ,     \" a = apple \"  )  ;", "}", "METHOD_END"], "methodName": ["testCookie"], "fileName": "com.facebook.presto.cli.TestQueryRunner"}, {"methodBody": ["METHOD_START", "{", "ClientSession   session    =    new   ClientOptions (  )  . toClientSession (  )  ;", "QueryRunner   runner    =    TestQueryRunner . createQueryRunner ( session )  ;", "completer    =    new    ( runner )  ;", "assertEquals ( completer . complete (  \" SELECT   is _ infi \"  ,     1  4  ,    ImmutableList . of (  )  )  ,     7  )  ;", "}", "METHOD_END"], "methodName": ["testAutoCompleteWithoutSchema"], "fileName": "com.facebook.presto.cli.TestTableNameCompleter"}, {"methodBody": ["METHOD_START", "{", "StringWriter   writer    =    new   StringWriter (  )  ;", "List < String >    fieldNames    =    ImmutableList . of (  \" first \"  ,     \" last \"  ,     \" quantity \"  )  ;", "OutputPrinter   printer    =    new    ( fieldNames ,    writer ,    false )  ;", "printer . printRows ( TestAlignedTablePrinter . rows ( TestAlignedTablePrinter . row (  \" hello \"  . getBytes (  )  ,    null ,     1  2  3  )  )  ,    true )  ;", "printer . finish (  )  ;", "String   expected    =     \"  6  8     6  5     6 c    6 c    6 f \\ t \\ t 1  2  3  \\ n \"  ;", "assertEquals ( writer . getBuffer (  )  . toString (  )  ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testCsvVarbinaryPrinting"], "fileName": "com.facebook.presto.cli.TestTsvPrinter"}, {"methodBody": ["METHOD_START", "{", "StringWriter   writer    =    new   StringWriter (  )  ;", "List < String >    fieldNames    =    ImmutableList . of (  \" first \"  ,     \" last \"  ,     \" quantity \"  )  ;", "OutputPrinter   printer    =    new    ( fieldNames ,    writer ,    true )  ;", "printer . printRows ( TestAlignedTablePrinter . rows ( TestAlignedTablePrinter . row (  \" hello \"  ,     \" world \"  ,     1  2  3  )  ,    TestAlignedTablePrinter . row (  \" a \"  ,    null ,     4  .  5  )  ,    TestAlignedTablePrinter . row (  \" some   long \\ ntext \\ tdone \"  ,     \" more \\ ntext \"  ,     4  5  6  7  )  ,    TestAlignedTablePrinter . row (  \" bye \"  ,     \" done \"  ,     (  -  1  5  )  )  ,    TestAlignedTablePrinter . row (  \" oops \\ u 0  0  0  0 a \\ nb \\ rc \\ bd \\ fe \\ tf \\  \\ g \\ u 0  0  0  1 done \"  ,     \" escape \"  ,     9  )  )  ,    true )  ;", "printer . finish (  )  ;", "String   expected    =     \"  \"     +     (  (  (  (  (  \" first \\ tlast \\ tquantity \\ n \"     +     \" hello \\ tworld \\ t 1  2  3  \\ n \"  )     +     \" a \\ t \\ t 4  .  5  \\ n \"  )     +     \" some   long \\  \\ ntext \\  \\ tdone \\ tmore \\  \\ ntext \\ t 4  5  6  7  \\ n \"  )     +     \" bye \\ tdone \\ t -  1  5  \\ n \"  )     +     \" oops \\  \\  0 a \\  \\ nb \\  \\ rc \\  \\ bd \\  \\ fe \\  \\ tf \\  \\  \\  \\ g \\ u 0  0  0  1 done \\ tescape \\ t 9  \\ n \"  )  ;", "assertEquals ( writer . getBuffer (  )  . toString (  )  ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testTsvPrinting"], "fileName": "com.facebook.presto.cli.TestTsvPrinter"}, {"methodBody": ["METHOD_START", "{", "StringWriter   writer    =    new   StringWriter (  )  ;", "List < String >    fieldNames    =    ImmutableList . of (  \" first \"  ,     \" last \"  ,     \" quantity \"  )  ;", "OutputPrinter   printer    =    new    ( fieldNames ,    writer ,    false )  ;", "printer . printRows ( TestAlignedTablePrinter . rows ( TestAlignedTablePrinter . row (  \" hello \"  ,     \" world \"  ,     1  2  3  )  ,    TestAlignedTablePrinter . row (  \" a \"  ,    null ,     4  .  5  )  )  ,    true )  ;", "printer . finish (  )  ;", "String   expected    =     \"  \"     +     (  \" hello \\ tworld \\ t 1  2  3  \\ n \"     +     \" a \\ t \\ t 4  .  5  \\ n \"  )  ;", "assertEquals ( writer . getBuffer (  )  . toString (  )  ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testTsvPrintingNoHeader"], "fileName": "com.facebook.presto.cli.TestTsvPrinter"}, {"methodBody": ["METHOD_START", "{", "StringWriter   writer    =    new   StringWriter (  )  ;", "List < String >    fieldNames    =    ImmutableList . of (  \" first \"  ,     \" last \"  )  ;", "OutputPrinter   printer    =    new    ( fieldNames ,    writer ,    true )  ;", "printer . finish (  )  ;", "assertEquals ( writer . getBuffer (  )  . toString (  )  ,     \" first \\ tlast \\ n \"  )  ;", "}", "METHOD_END"], "methodName": ["testTsvPrintingNoRows"], "fileName": "com.facebook.presto.cli.TestTsvPrinter"}, {"methodBody": ["METHOD_START", "{", "StringWriter   writer    =    new   StringWriter (  )  ;", "List < String >    fieldNames    =    ImmutableList . of (  \" shippriority \"  )  ;", "OutputPrinter   printer    =    new    ( fieldNames ,    writer )  ;", "printer . printRows ( TestAlignedTablePrinter . rows ( TestAlignedTablePrinter . row (  \" hello \"  )  )  ,    true )  ;", "printer . finish (  )  ;", "String   expected    =     \"  \"     +     (  \"  -  [    RECORD    1     ]  +  -  -  -  -  -  -  \\ n \"     +     \" shippriority    |    hello \\ n \"  )  ;", "assertEquals ( writer . getBuffer (  )  . toString (  )  ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testVerticalLongName"], "fileName": "com.facebook.presto.cli.TestVerticalRecordPrinter"}, {"methodBody": ["METHOD_START", "{", "StringWriter   writer    =    new   StringWriter (  )  ;", "List < String >    fieldNames    =    ImmutableList . of (  \" order _ priority \"  )  ;", "OutputPrinter   printer    =    new    ( fieldNames ,    writer )  ;", "printer . printRows ( TestAlignedTablePrinter . rows ( TestAlignedTablePrinter . row (  \" hello \"  )  )  ,    true )  ;", "printer . finish (  )  ;", "String   expected    =     \"  \"     +     (  \"  -  [    RECORD    1     ]  -  -  +  -  -  -  -  -  -  \\ n \"     +     \" order _ priority    |    hello \\ n \"  )  ;", "assertEquals ( writer . getBuffer (  )  . toString (  )  ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testVerticalLongerName"], "fileName": "com.facebook.presto.cli.TestVerticalRecordPrinter"}, {"methodBody": ["METHOD_START", "{", "StringWriter   writer    =    new   StringWriter (  )  ;", "List < String >    fieldNames    =    ImmutableList . of (  \" first \"  ,     \" last \"  ,     \" quantity \"  )  ;", "OutputPrinter   printer    =    new    ( fieldNames ,    writer )  ;", "printer . printRows ( TestAlignedTablePrinter . rows ( TestAlignedTablePrinter . row (  \" hello \"  ,     \" world \"  ,     1  2  3  )  ,    TestAlignedTablePrinter . row (  \" a \"  ,    null ,     4  .  5  )  ,    TestAlignedTablePrinter . row (  \" some   long \\ ntext   that \\ ndoes   not \\ nfit   on \\ none   line \"  ,     \" more \\ ntext \"  ,     4  5  6  7  )  ,    TestAlignedTablePrinter . row (  \" bye \"  ,     \" done \"  ,     (  -  1  5  )  )  )  ,    true )  ;", "printer . finish (  )  ;", "String   expected    =     \"  \"     +     (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  \"  -  [    RECORD    1     ]  -  -  -  -  -  -  -  \\ n \"     +     \" first             |    hello \\ n \"  )     +     \" last                |    world \\ n \"  )     +     \" quantity    |     1  2  3  \\ n \"  )     +     \"  -  [    RECORD    2     ]  -  -  -  -  -  -  -  \\ n \"  )     +     \" first             |    a \\ n \"  )     +     \" last                |    NULL \\ n \"  )     +     \" quantity    |     4  .  5  \\ n \"  )     +     \"  -  [    RECORD    3     ]  -  -  -  -  -  -  -  \\ n \"  )     +     \" first             |    some   long \\ n \"  )     +     \"                             |    text   that \\ n \"  )     +     \"                             |    does   not \\ n \"  )     +     \"                             |    fit   on \\ n \"  )     +     \"                             |    one   line \\ n \"  )     +     \" last                |    more \\ n \"  )     +     \"                             |    text \\ n \"  )     +     \" quantity    |     4  5  6  7  \\ n \"  )     +     \"  -  [    RECORD    4     ]  -  -  -  -  -  -  -  \\ n \"  )     +     \" first             |    bye \\ n \"  )     +     \" last                |    done \\ n \"  )     +     \" quantity    |     -  1  5  \\ n \"  )  ;", "assertEquals ( writer . getBuffer (  )  . toString (  )  ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testVerticalPrinting"], "fileName": "com.facebook.presto.cli.TestVerticalRecordPrinter"}, {"methodBody": ["METHOD_START", "{", "StringWriter   writer    =    new   StringWriter (  )  ;", "List < String >    fieldNames    =    ImmutableList . of (  \" first \"  ,     \" binary \"  ,     \" last \"  )  ;", "OutputPrinter   printer    =    new    ( fieldNames ,    writer )  ;", "printer . printRows ( TestAlignedTablePrinter . rows ( TestAlignedTablePrinter . row (  \" hello \"  ,    TestAlignedTablePrinter . bytes (  \" hello \"  )  ,     \" world \"  )  ,    TestAlignedTablePrinter . row (  \" a \"  ,    TestAlignedTablePrinter . bytes (  \" some   long   text   that   is   more   than    1  6    bytes \"  )  ,     \" b \"  )  ,    TestAlignedTablePrinter . row (  \" cat \"  ,    TestAlignedTablePrinter . bytes (  \"  \"  )  ,     \" dog \"  )  )  ,    true )  ;", "printer . finish (  )  ;", "String   expected    =     \"  \"     +     (  (  (  (  (  (  (  (  (  (  (  (  (  \"  -  [    RECORD    1     ]  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  \\ n \"     +     \" first       |    hello \\ n \"  )     +     \" binary    |     6  8     6  5     6 c    6 c    6 f \\ n \"  )     +     \" last          |    world \\ n \"  )     +     \"  -  [    RECORD    2     ]  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  \\ n \"  )     +     \" first       |    a \\ n \"  )     +     \" binary    |     7  3     6 f    6 d    6  5     2  0     6 c    6 f    6 e    6  7     2  0     7  4     6  5     7  8     7  4     2  0     7  4  \\ n \"  )     +     \"                       |     6  8     6  1     7  4     2  0     6  9     7  3     2  0     6 d    6 f    7  2     6  5     2  0     7  4     6  8     6  1     6 e \\ n \"  )     +     \"                       |     2  0     3  1     3  6     2  0     6  2     7  9     7  4     6  5     7  3  \\ n \"  )     +     \" last          |    b \\ n \"  )     +     \"  -  [    RECORD    3     ]  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  \\ n \"  )     +     \" first       |    cat \\ n \"  )     +     \" binary    |     \\ n \"  )     +     \" last          |    dog \\ n \"  )  ;", "assertEquals ( writer . getBuffer (  )  . toString (  )  ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testVerticalPrintingHex"], "fileName": "com.facebook.presto.cli.TestVerticalRecordPrinter"}, {"methodBody": ["METHOD_START", "{", "StringWriter   writer    =    new   StringWriter (  )  ;", "List < String >    fieldNames    =    ImmutableList . of (  \" none \"  )  ;", "OutputPrinter   printer    =    new    ( fieldNames ,    writer )  ;", "printer . finish (  )  ;", "assertEquals ( writer . getBuffer (  )  . toString (  )  ,     \"  ( no   rows )  \\ n \"  )  ;", "}", "METHOD_END"], "methodName": ["testVerticalPrintingNoRows"], "fileName": "com.facebook.presto.cli.TestVerticalRecordPrinter"}, {"methodBody": ["METHOD_START", "{", "StringWriter   writer    =    new   StringWriter (  )  ;", "List < String >    fieldNames    =    ImmutableList . of (  \" a \"  )  ;", "OutputPrinter   printer    =    new    ( fieldNames ,    writer )  ;", "printer . printRows ( TestAlignedTablePrinter . rows ( TestAlignedTablePrinter . row (  \" x \"  )  )  ,    true )  ;", "printer . finish (  )  ;", "String   expected    =     \"  \"     +     (  \"  -  [    RECORD    1     ]  \\ n \"     +     \" a    |    x \\ n \"  )  ;", "assertEquals ( writer . getBuffer (  )  . toString (  )  ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testVerticalShortName"], "fileName": "com.facebook.presto.cli.TestVerticalRecordPrinter"}, {"methodBody": ["METHOD_START", "{", "StringWriter   writer    =    new   StringWriter (  )  ;", "List < String >    fieldNames    =    ImmutableList . of (  \" order _ priority \\ u 7 f 5  1  \"  )  ;", "OutputPrinter   printer    =    new    ( fieldNames ,    writer )  ;", "printer . printRows ( TestAlignedTablePrinter . rows ( TestAlignedTablePrinter . row (  \" hello \"  )  )  ,    true )  ;", "printer . finish (  )  ;", "String   expected    =     \"  \"     +     (  \"  -  [    RECORD    1     ]  -  -  -  -  +  -  -  -  -  -  -  \\ n \"     +     \" order _ priority \\ u 7 f 5  1     |    hello \\ n \"  )  ;", "assertEquals ( writer . getBuffer (  )  . toString (  )  ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testVerticalWideCharacterName"], "fileName": "com.facebook.presto.cli.TestVerticalRecordPrinter"}, {"methodBody": ["METHOD_START", "{", "StringWriter   writer    =    new   StringWriter (  )  ;", "List < String >    fieldNames    =    ImmutableList . of (  \" name \"  )  ;", "OutputPrinter   printer    =    new    ( fieldNames ,    writer )  ;", "printer . printRows ( TestAlignedTablePrinter . rows ( TestAlignedTablePrinter . row (  \" hello \\ u 7 f 5  1    bye \"  )  )  ,    true )  ;", "printer . finish (  )  ;", "String   expected    =     \"  \"     +     (  \"  -  [    RECORD    1     ]  -  -  -  -  -  \\ n \"     +     \" name    |    hello \\ u 7 f 5  1    bye \\ n \"  )  ;", "assertEquals ( writer . getBuffer (  )  . toString (  )  ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testVerticalWideCharacterValue"], "fileName": "com.facebook.presto.cli.TestVerticalRecordPrinter"}, {"methodBody": ["METHOD_START", "{", "if    ( processing )     {", "thread . i (  )  ;", "}", "}", "METHOD_END"], "methodName": ["interrupt"], "fileName": "com.facebook.presto.cli.ThreadInterruptor"}, {"methodBody": ["METHOD_START", "{", "switch    ( c )     {", "case    '  \\ u 0  0  0  0  '     :", "sb . append (  '  \\  \\  '  )  . append (  '  0  '  )  ;", "bak ;", "case    '  \\ b '     :", "sb . append (  '  \\  \\  '  )  . append (  ' b '  )  ;", "bak ;", "case    '  \\ f '     :", "sb . append (  '  \\  \\  '  )  . append (  ' f '  )  ;", "bak ;", "case    '  \\ n '     :", "sb . append (  '  \\  \\  '  )  . append (  ' n '  )  ;", "bak ;", "case    '  \\ r '     :", "sb . append (  '  \\  \\  '  )  . append (  ' r '  )  ;", "bak ;", "case    '  \\ t '     :", "sb . append (  '  \\  \\  '  )  . append (  ' t '  )  ;", "bak ;", "case    '  \\  \\  '     :", "sb . append (  '  \\  \\  '  )  . append (  '  \\  \\  '  )  ;", "bak ;", "default    :", "sb . append ( c )  ;", "}", "}", "METHOD_END"], "methodName": ["escapeCharacter"], "fileName": "com.facebook.presto.cli.TsvPrinter"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   sb    =    new   StringBuilder (  )  ;", "Iterator <  ?  >    iter    =    row . iterator (  )  ;", "while    ( iter . hasNext (  )  )     {", "String   s    =    CsvPrinter . formatValue ( iter . next (  )  )  ;", "for    ( int   i    =     0  ;    i    <     ( s . length (  )  )  ;    i +  +  )     {", ". escapeCharacter ( sb ,    s . charAt ( i )  )  ;", "}", "if    ( iter . hasNext (  )  )     {", "sb . append (  '  \\ t '  )  ;", "}", "}", "sb . append (  '  \\ n '  )  ;", "return   sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["formatRow"], "fileName": "com.facebook.presto.cli.TsvPrinter"}, {"methodBody": ["METHOD_START", "{", "if    ( version )     {", "String   clientVersion    =    Pass . getPackage (  )  . getImplementationVersion (  )  ;", "System . out . println (  (  \" Presto   CLI    \"     +     ( firstNonNull ( clientVersion ,     \"  ( version   unknown )  \"  )  )  )  )  ;", "}", "return   version ;", "}", "METHOD_END"], "methodName": ["showVersionIfRequested"], "fileName": "com.facebook.presto.cli.VersionOption"}, {"methodBody": ["METHOD_START", "{", "int   n    =     0  ;", "for    ( String   s    :    strings )     {", "n    =    Math . max ( n ,    AlignedTable . consoleWidth ( s )  )  ;", "}", "return   n ;", "}", "METHOD_END"], "methodName": ["maxWidth"], "fileName": "com.facebook.presto.cli.VerticalRecordPrinter"}]