[{"methodBody": ["METHOD_START", "{", "DateTimeFormatter   formatter    =    TeradataDateFunctions . DATETIME _ FORMATTER _ CACHE . get ( formatString )  . withChronology ( TeradataDateFunctions . CHRONOLOGIES [ session . getTimeZoneKey (  )  . getKey (  )  ]  )  . withLocale ( session . getLocale (  )  )  ;", "try    {", "return   formatter . parseMillis ( dateTime . toString ( StandardCharsets . UTF _  8  )  )  ;", "}    catch    ( IllegalArgumentException   e )     {", "throw   new   com . facebook . presto . spi . PrestoException ( INVALID _ FUNCTION _ ARGUMENT ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["parseMillis"], "fileName": "com.facebook.presto.teradata.functions.TeradataDateFunctions"}, {"methodBody": ["METHOD_START", "{", "DateTimeFormatter   formatter    =    TeradataDateFunctions . DATETIME _ FORMATTER _ CACHE . get ( formatString )  . withChronology ( TeradataDateFunctions . CHRONOLOGIES [ unpackZoneKey ( timestampWithTimeZone )  . getKey (  )  ]  )  . withLocale ( session . getLocale (  )  )  ;", "return   Slices . utf 8 Slice ( formatter . print ( unpackMillisUtc ( timestampWithTimeZone )  )  )  ;", "}", "METHOD_END"], "methodName": ["toChar"], "fileName": "com.facebook.presto.teradata.functions.TeradataDateFunctions"}, {"methodBody": ["METHOD_START", "{", "try    {", "long   millis    =     . parseMillis ( session ,    dateTime ,    formatString )  ;", "return    (  ( long )     ( castToDate . invokeExact ( session ,    millis )  )  )  ;", "}    catch    ( Throwable   t )     {", "throwIfInstanceOf ( t ,    Error . class )  ;", "throwIfInstanceOf ( t ,    PrestoException . class )  ;", "throw   new   PrestoException ( GENERIC _ INTERNAL _ ERROR ,    t )  ;", "}", "}", "METHOD_END"], "methodName": ["toDate"], "fileName": "com.facebook.presto.teradata.functions.TeradataDateFunctions"}, {"methodBody": ["METHOD_START", "{", "return   TeradataDateFunctions . parseMillis ( session ,    dateTime ,    formatString )  ;", "}", "METHOD_END"], "methodName": ["toTimestamp"], "fileName": "com.facebook.presto.teradata.functions.TeradataDateFunctions"}, {"methodBody": ["METHOD_START", "{", "Slice   utf 1  6     =    Slices . wrappedBuffer ( StandardCharsets . UTF _  1  6 BE . encode ( string . toStringUtf 8  (  )  )  )  ;", "String   encoded    =    BaseEncoding . base 1  6  (  )  . encode ( utf 1  6  . getBytes (  )  )  ;", "return   Slices . utf 8 Slice ( encoded )  ;", "}", "METHOD_END"], "methodName": ["char2HexInt"], "fileName": "com.facebook.presto.teradata.functions.TeradataStringFunctions"}, {"methodBody": ["METHOD_START", "{", "try    {", "return    (  ( long )     ( method . invokeExact ( s ,    subs )  )  )  ;", "}    catch    ( Throwable   t )     {", "throwIfInstanceOf ( t ,    Error . class )  ;", "throwIfInstanceOf ( t ,    PrestoException . class )  ;", "throw   new   PrestoException ( GENERIC _ INTERNAL _ ERROR ,    t )  ;", "}", "}", "METHOD_END"], "methodName": ["index"], "fileName": "com.facebook.presto.teradata.functions.TeradataStringFunctions"}, {"methodBody": ["METHOD_START", "{", "try    {", "return    (  ( Slice )     ( method . invokeExact ( utf 8  ,    start )  )  )  ;", "}    catch    ( Throwable   t )     {", "throwIfInstanceOf ( t ,    Error . class )  ;", "throwIfInstanceOf ( t ,    PException . class )  ;", "throw   new   PException ( GENERIC _ INTERNAL _ ERROR ,    t )  ;", "}", "}", "METHOD_END"], "methodName": ["substring"], "fileName": "com.facebook.presto.teradata.functions.TeradataStringFunctions"}, {"methodBody": ["METHOD_START", "{", "try    {", "return    (  ( Slice )     ( method . invokeExact ( utf 8  ,    start ,    length )  )  )  ;", "}    catch    ( Throwable   t )     {", "throwIfInstanceOf ( t ,    Error . class )  ;", "throwIfInstanceOf ( t ,    PException . class )  ;", "throw   new   PException ( GENERIC _ INTERNAL _ ERROR ,    t )  ;", "}", "}", "METHOD_END"], "methodName": ["substring"], "fileName": "com.facebook.presto.teradata.functions.TeradataStringFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction ( projection ,    DATE ,    TestTeradataDateFunctions . sqlDate ( new   DateTime ( year ,    month ,    day ,     0  ,     0  ,    TestTeradataDateFunctions . DATE _ TIME _ ZONE )  )  )  ;", "}", "METHOD_END"], "methodName": ["assertDate"], "fileName": "com.facebook.presto.teradata.functions.TestTeradataDateFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction ( projection ,    TIMESTAMP ,    TestTeradataDateFunctions . toTimestamp ( new   DateTime ( year ,    month ,    day ,    hour ,    minutes ,    seconds ,    TestTeradataDateFunctions . DATE _ TIME _ ZONE )  )  )  ;", "}", "METHOD_END"], "methodName": ["assertTimestamp"], "fileName": "com.facebook.presto.teradata.functions.TestTeradataDateFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction ( projection ,    VARCHAR ,    expected )  ;", "}", "METHOD_END"], "methodName": ["assertVarchar"], "fileName": "com.facebook.presto.teradata.functions.TestTeradataDateFunctions"}, {"methodBody": ["METHOD_START", "{", "functionAssertions . addFunctions ( extractFunctions ( new   TeradataFunctionsPlugin (  )  . getFunctions (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.teradata.functions.TestTeradataDateFunctions"}, {"methodBody": ["METHOD_START", "{", "int   days    =    Math . toIntExact ( castToDate ( TestTeradataDateFunctions . SESSION . toConnectorSession (  )  ,    from . getMillis (  )  )  )  ;", "return   new   SqlDate ( days )  ;", "}", "METHOD_END"], "methodName": ["sqlDate"], "fileName": "com.facebook.presto.teradata.functions.TestTeradataDateFunctions"}, {"methodBody": ["METHOD_START", "{", "assertDate (  \" to _ date (  '  1  9  8  8  /  0  4  /  0  8  '  ,  ' YYYY / MM / DD '  )  \"  ,     1  9  8  8  ,     4  ,     8  )  ;", "assertDate (  \" to _ date (  '  1  9  8  8  /  0  4  /  0  8  '  ,  ' yYYy / mM / Dd '  )  \"  ,     1  9  8  8  ,     4  ,     8  )  ;", "}", "METHOD_END"], "methodName": ["testCaseInsensitive"], "fileName": "com.facebook.presto.teradata.functions.TestTeradataDateFunctions"}, {"methodBody": ["METHOD_START", "{", "DateTime   current    =    new   DateTime (  )  ;", "assertDate (  \" to _ date (  '  1  9  8  8  '  ,  ' yyyy '  )  \"  ,     1  9  8  8  ,    current . getMonthOfYear (  )  ,     1  )  ;", "assertDate (  \" to _ date (  '  0  4  '  ,  ' mm '  )  \"  ,    current . getYear (  )  ,     4  ,     1  )  ;", "assertDate (  \" to _ date (  '  8  '  ,  ' dd '  )  \"  ,    current . getYear (  )  ,    current . getMonthOfYear (  )  ,     8  )  ;", "}", "METHOD_END"], "methodName": ["testDefaultValues"], "fileName": "com.facebook.presto.teradata.functions.TestTeradataDateFunctions"}, {"methodBody": ["METHOD_START", "{", "assertDate (  \" to _ date (  \\  '  1  9  8  8  -  0  4  -  0  8    TEXT \\  '  ,  \\  ' yyyy - mm - dd    \\  \" TEXT \\  \"  \\  '  )  \"  ,     1  9  8  8  ,     4  ,     8  )  ;", "}", "METHOD_END"], "methodName": ["testEscapedText"], "fileName": "com.facebook.presto.teradata.functions.TestTeradataDateFunctions"}, {"methodBody": ["METHOD_START", "{", "assertVarchar (  \" to _ char ( TIMESTAMP    '  1  9  8  8  -  0  4  -  0  8     0  2  :  0  3  :  0  4  '  ,  ' yyyy / mm / dd   hh : mi : ss '  )  \"  ,     \"  1  9  8  8  /  0  4  /  0  8     0  2  :  0  3  :  0  4  \"  )  ;", "assertVarchar (  \" to _ char ( TIMESTAMP    '  1  9  8  8  -  0  4  -  0  8     0  2  :  0  3  :  0  4  '  ,  ' yyyy / mm / dd   hh 2  4  : mi : ss '  )  \"  ,     \"  1  9  8  8  /  0  4  /  0  8     0  2  :  0  3  :  0  4  \"  )  ;", "assertVarchar (  \" to _ char ( TIMESTAMP    '  1  9  8  8  -  0  4  -  0  8     1  4  :  1  5  :  1  6  '  ,  ' yyyy / mm / dd   hh 2  4  : mi : ss '  )  \"  ,     \"  1  9  8  8  /  0  4  /  0  8     1  4  :  1  5  :  1  6  \"  )  ;", "assertVarchar (  \" to _ char ( TIMESTAMP    '  1  9  8  8  -  0  4  -  0  8     1  4  :  1  5  :  1  6     +  0  2  :  0  9  '  ,  ' yyyy / mm / dd   hh 2  4  : mi : ss '  )  \"  ,     \"  1  9  8  8  /  0  4  /  0  8     1  4  :  1  5  :  1  6  \"  )  ;", "assertVarchar (  \" to _ char ( DATE    '  1  9  8  8  -  0  4  -  0  8  '  ,  ' yyyy / mm / dd   hh 2  4  : mi : ss '  )  \"  ,     \"  1  9  8  8  /  0  4  /  0  8     0  0  :  0  0  :  0  0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testMinimalToChar"], "fileName": "com.facebook.presto.teradata.functions.TestTeradataDateFunctions"}, {"methodBody": ["METHOD_START", "{", "assertDate (  \" to _ date (  '  1  9  8  8  /  0  4  /  0  8  '  ,  ' yyyy / mm / dd '  )  \"  ,     1  9  8  8  ,     4  ,     8  )  ;", "assertDate (  \" to _ date (  '  0  4  -  0  8  -  1  9  8  8  '  ,  ' mm - dd - yyyy '  )  \"  ,     1  9  8  8  ,     4  ,     8  )  ;", "assertDate (  \" to _ date (  '  0  4  .  1  9  8  8  ,  0  8  '  ,  ' mm . yyyy , dd '  )  \"  ,     1  9  8  8  ,     4  ,     8  )  ;", "assertDate (  \" to _ date (  '  ;  1  9  8  8  0  4  :  0  8  '  ,  '  ; yyyymm : dd '  )  \"  ,     1  9  8  8  ,     4  ,     8  )  ;", "}", "METHOD_END"], "methodName": ["testMinimalToDate"], "fileName": "com.facebook.presto.teradata.functions.TestTeradataDateFunctions"}, {"methodBody": ["METHOD_START", "{", "assertTimestamp (  \" to _ timestamp (  '  1  9  8  8  /  0  4  /  0  8  '  ,  ' yyyy / mm / dd '  )  \"  ,     1  9  8  8  ,     4  ,     8  ,     0  ,     0  ,     0  )  ;", "assertTimestamp (  \" to _ timestamp (  '  0  4  -  0  8  -  1  9  8  8  '  ,  ' mm - dd - yyyy '  )  \"  ,     1  9  8  8  ,     4  ,     8  ,     0  ,     0  ,     0  )  ;", "assertTimestamp (  \" to _ timestamp (  '  0  4  .  1  9  8  8  ,  0  8  '  ,  ' mm . yyyy , dd '  )  \"  ,     1  9  8  8  ,     4  ,     8  ,     0  ,     0  ,     0  )  ;", "assertTimestamp (  \" to _ timestamp (  '  ;  1  9  8  8  0  4  :  0  8  '  ,  '  ; yyyymm : dd '  )  \"  ,     1  9  8  8  ,     4  ,     8  ,     0  ,     0  ,     0  )  ;", "assertTimestamp (  \" to _ timestamp (  '  1  9  8  8  /  0  4  /  0  8     2  '  ,  ' yyyy / mm / dd   hh '  )  \"  ,     1  9  8  8  ,     4  ,     8  ,     2  ,     0  ,     0  )  ;", "assertTimestamp (  \" to _ timestamp (  '  1  9  8  8  /  0  4  /  0  8     1  4  '  ,  ' yyyy / mm / dd   hh 2  4  '  )  \"  ,     1  9  8  8  ,     4  ,     8  ,     1  4  ,     0  ,     0  )  ;", "assertTimestamp (  \" to _ timestamp (  '  1  9  8  8  /  0  4  /  0  8     1  4  :  1  5  '  ,  ' yyyy / mm / dd   hh 2  4  : mi '  )  \"  ,     1  9  8  8  ,     4  ,     8  ,     1  4  ,     1  5  ,     0  )  ;", "assertTimestamp (  \" to _ timestamp (  '  1  9  8  8  /  0  4  /  0  8     1  4  :  1  5  :  1  6  '  ,  ' yyyy / mm / dd   hh 2  4  : mi : ss '  )  \"  ,     1  9  8  8  ,     4  ,     8  ,     1  4  ,     1  5  ,     1  6  )  ;", "assertTimestamp (  \" to _ timestamp (  '  1  9  8  8  /  0  4  /  0  8     2  :  3  :  4  '  ,  ' yyyy / mm / dd   hh 2  4  : mi : ss '  )  \"  ,     1  9  8  8  ,     4  ,     8  ,     2  ,     3  ,     4  )  ;", "assertTimestamp (  \" to _ timestamp (  '  1  9  8  8  /  0  4  /  0  8     0  2  :  0  3  :  0  4  '  ,  ' yyyy / mm / dd   hh 2  4  : mi : ss '  )  \"  ,     1  9  8  8  ,     4  ,     8  ,     2  ,     3  ,     4  )  ;", "}", "METHOD_END"], "methodName": ["testMinimalToTimestamp"], "fileName": "com.facebook.presto.teradata.functions.TestTeradataDateFunctions"}, {"methodBody": ["METHOD_START", "{", "assertDate (  \" to _ date (  '  8     0  4     1  9  8  8  '  ,  ' dd   mm   yyyy '  )  \"  ,     1  9  8  8  ,     4  ,     8  )  ;", "}", "METHOD_END"], "methodName": ["testWhitespace"], "fileName": "com.facebook.presto.teradata.functions.TestTeradataDateFunctions"}, {"methodBody": ["METHOD_START", "{", "assertVarchar (  \" to _ char ( TIMESTAMP    '  1  9  8  8  -  0  4  -  0  8  '  ,  ' yy '  )  \"  ,     \"  8  8  \"  )  ;", "assertTimestamp (  \" to _ timestamp (  '  8  8  /  0  4  /  0  8  '  ,  ' yy / mm / dd '  )  \"  ,     2  0  8  8  ,     4  ,     8  ,     0  ,     0  ,     0  )  ;", "assert (  \" to _ date (  '  8  8  /  0  4  /  0  8  '  ,  ' yy / mm / dd '  )  \"  ,     2  0  8  8  ,     4  ,     8  )  ;", "}", "METHOD_END"], "methodName": ["testYY"], "fileName": "com.facebook.presto.teradata.functions.TestTeradataDateFunctions"}, {"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . spi . type . SqlTimestamp ( dateTime . getMillis (  )  ,    TestTeradataDateFunctions . SESSION . getTimeZoneKey (  )  )  ;", "}", "METHOD_END"], "methodName": ["toTimestamp"], "fileName": "com.facebook.presto.teradata.functions.TestTeradataDateFunctions"}, {"methodBody": ["METHOD_START", "{", "functionAssertions . addFunctions ( extractFunctions ( new   TeradataFunctionsPlugin (  )  . getFunctions (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.teradata.functions.TestTeradataFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" CHAR 2 HEXINT (  '  1  2  3  '  )  \"  ,    VARCHAR ,     \"  0  0  3  1  0  0  3  2  0  0  3  3  \"  )  ;", "assertFunction (  \" CHAR 2 HEXINT (  ' One   Ring '  )  \"  ,    VARCHAR ,     \"  0  0  4 F 0  0  6 E 0  0  6  5  0  0  2  0  0  0  5  2  0  0  6  9  0  0  6 E 0  0  6  7  \"  )  ;", "}", "METHOD_END"], "methodName": ["testChar2HexInt"], "fileName": "com.facebook.presto.teradata.functions.TestTeradataFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" CHAR 2 HEXINT (  \\  '  \\ u 0  1  0  5  \\  '  )  \"  ,    VARCHAR ,     \"  0  1  0  5  \"  )  ;", "assertFunction (  \" CHAR 2 HEXINT (  \\  '  \\ u 0 ca 0  \\  '  )  \"  ,    VARCHAR ,     \"  0 CA 0  \"  )  ;", "assertFunction (  \" CHAR 2 HEXINT (  \\  '  \\ uff 7  1  \\  '  )  \"  ,    VARCHAR ,     \" FF 7  1  \"  )  ;", "assertFunction (  \" CHAR 2 HEXINT (  \\  '  \\ u 0 ca 0  \\ u 7  6 ca \\ u 0 ca 0  \\  '  )  \"  ,    VARCHAR ,     \"  0 CA 0  7  6 CA 0 CA 0  \"  )  ;", "assertFunction (  \" CHAR 2 HEXINT (  \\  '  (  \\ u 3  0 ce \\ u 0 ca 0  \\ u 7  6 ca \\ u 0 ca 0  )  \\ u 3  0 ce \\ u 5 f 6  1  \\ u 2  5  3 b \\ u 2  5  0  1  \\ u 2  5  3 b \\  '  )  \"  ,    VARCHAR ,     \"  0  0  2  8  3  0 CE 0 CA 0  7  6 CA 0 CA 0  0  0  2  9  3  0 CE 5 F 6  1  2  5  3 B 2  5  0  1  2  5  3 B \"  )  ;", "}", "METHOD_END"], "methodName": ["testChar2HexIntUtf8"], "fileName": "com.facebook.presto.teradata.functions.TestTeradataFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" INDEX (  ' high '  ,     ' ig '  )  \"  ,    BIGINT ,     2 L )  ;", "assertFunction (  \" INDEX (  ' high '  ,     ' igx '  )  \"  ,    BIGINT ,     0 L )  ;", "assertFunction (  \" INDEX (  ' Quadratically '  ,     ' a '  )  \"  ,    BIGINT ,     3 L )  ;", "assertFunction (  \" INDEX (  ' foobar '  ,     ' foobar '  )  \"  ,    BIGINT ,     1 L )  ;", "assertFunction (  \" INDEX (  ' foobar '  ,     ' foobar _ baz '  )  \"  ,    BIGINT ,     0 L )  ;", "assertFunction (  \" INDEX (  ' foobar '  ,     ' obar '  )  \"  ,    BIGINT ,     3 L )  ;", "assertFunction (  \" INDEX (  ' zoo !  '  ,     '  !  '  )  \"  ,    BIGINT ,     4 L )  ;", "assertFunction (  \" INDEX (  ' x '  ,     '  '  )  \"  ,    BIGINT ,     1 L )  ;", "assertFunction (  \" INDEX (  '  '  ,     '  '  )  \"  ,    BIGINT ,     1 L )  ;", "assertFunction (  \" INDEX ( NULL ,     '  '  )  \"  ,    BIGINT ,    null )  ;", "assertFunction (  \" INDEX (  '  '  ,    NULL )  \"  ,    BIGINT ,    null )  ;", "assertFunction (  \" INDEX ( NULL ,    NULL )  \"  ,    BIGINT ,    null )  ;", "}", "METHOD_END"], "methodName": ["testIndex"], "fileName": "com.facebook.presto.teradata.functions.TestTeradataFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" SUBSTRING (  ' Quadratically '  ,     5  )  \"  ,    createVarcharType (  1  3  )  ,     \" ratically \"  )  ;", "assertFunction (  \" SUBSTRING (  ' Quadratically '  ,     5  ,     6  )  \"  ,    createVarcharType (  1  3  )  ,     \" ratica \"  )  ;", "}", "METHOD_END"], "methodName": ["testSubstring"], "fileName": "com.facebook.presto.teradata.functions.TestTeradataFunctions"}, {"methodBody": ["METHOD_START", "{", "DateTimeFormatterBuilder   builder    =    new   DateTimeFormatterBuilder (  )  ;", "for    ( Token   token    :    DateFormatParser . tokenize ( format )  )     {", "switch    ( token . getType (  )  )     {", "case   DateFormat . TEXT    :", "builder . appendLiteral ( token . getText (  )  )  ;", "break ;", "case   DateFormat . DD    :", "builder . appendDayOfMonth (  2  )  ;", "break ;", "case   DateFormat . HH 2  4     :", "builder . appendHourOfDay (  2  )  ;", "break ;", "case   DateFormat . HH    :", "builder . appendHourOfHalfday (  2  )  ;", "break ;", "case   DateFormat . MI    :", "builder . appendMinuteOfHour (  2  )  ;", "break ;", "case   DateFormat . MM    :", "builder . appendMonthOfYear (  2  )  ;", "break ;", "case   DateFormat . SS    :", "builder . appendSecondOfMinute (  2  )  ;", "break ;", "case   DateFormat . YY    :", "builder . appendTwoDigitYear (  2  0  5  0  )  ;", "break ;", "case   DateFormat . YYYY    :", "builder . appendYear (  4  ,     4  )  ;", "break ;", "case   DateFormat . UNRECOGNIZED    :", "default    :", "throw   new   spi . PrestoException ( StandardErrorCode . INVALID _ FUNCTION _ ARGUMENT ,    String . format (  \" Failed   to   tokenize   string    [  % s ]    at   offset    [  % d ]  \"  ,    token . getText (  )  ,    token . getCharPositionInLine (  )  )  )  ;", "}", "}", "try    {", "return   builder . toFormatter (  )  ;", "}    catch    ( UnsupportedOperationException   e )     {", "throw   new   spi . PrestoException ( INVALID _ FUNCTION _ ARGUMENT ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["createDateTimeFormatter"], "fileName": "com.facebook.presto.teradata.functions.dateformat.DateFormatParser"}, {"methodBody": ["METHOD_START", "{", "DateFormat   lexer    =    new   com . facebook . presto . teradata . functions . com . facebook . presto . teradata . functions . DateFormat ( new   ANTLRInputStream ( format )  )  ;", "return   lexer . getAllTokens (  )  ;", "}", "METHOD_END"], "methodName": ["tokenize"], "fileName": "com.facebook.presto.teradata.functions.dateformat.DateFormatParser"}, {"methodBody": ["METHOD_START", "{", "DateTimeFormatter   formatter    =    DateFormatParser . createDateTimeFormatter (  \" yyyy / mm / dd \"  )  ;", "assertEquals ( formatter . parseDateTime (  \"  1  9  8  8  /  0  4  /  0  8  \"  )  ,    new   DateTime (  1  9  8  8  ,     4  ,     8  ,     0  ,     0  )  )  ;", "}", "METHOD_END"], "methodName": ["testCreateDateTimeFormatter"], "fileName": "com.facebook.presto.teradata.functions.dateformat.TestDateFormatParser"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  1  ,    DateFormatParser . tokenize (  \" yy \"  )  . size (  )  )  ;", "assertEquals (  1  ,    DateFormatParser . tokenize (  \" yyyy \"  )  . size (  )  )  ;", "assertEquals (  2  ,    DateFormatParser . tokenize (  \" yyyyyy \"  )  . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["testGreedinessLongFirst"], "fileName": "com.facebook.presto.teradata.functions.dateformat.TestDateFormatParser"}, {"methodBody": ["METHOD_START", "{", "DateFormatParser . createDateTimeFormatter (  \" ala \"  )  ;", "}", "METHOD_END"], "methodName": ["testInvalidTokenCreate1"], "fileName": "com.facebook.presto.teradata.functions.dateformat.TestDateFormatParser"}, {"methodBody": ["METHOD_START", "{", "DateFormatParser . createDateTimeFormatter (  \" yyym / mm / dd \"  )  ;", "}", "METHOD_END"], "methodName": ["testInvalidTokenCreate2"], "fileName": "com.facebook.presto.teradata.functions.dateformat.TestDateFormatParser"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( DateFormatParser . tokenize (  \" ala \"  )  . stream (  )  . map ( Token :  : getType )  . collect ( Collectors . toList (  )  )  ,    Arrays . asList ( UNRECOGNIZED ,    UNRECOGNIZED ,    UNRECOGNIZED )  )  ;", "}", "METHOD_END"], "methodName": ["testInvalidTokenTokenize"], "fileName": "com.facebook.presto.teradata.functions.dateformat.TestDateFormatParser"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( DateFormatParser . tokenize (  \" yyyy   mm \"  )  . stream (  )  . map ( Token :  : getType )  . collect ( Collectors . toList (  )  )  ,    Arrays . asList ( YYYY ,    TEXT ,    MM )  )  ;", "}", "METHOD_END"], "methodName": ["testTokenize"], "fileName": "com.facebook.presto.teradata.functions.dateformat.TestDateFormatParser"}]