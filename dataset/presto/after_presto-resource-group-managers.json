[{"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < ResourceGroupSelector >    selectors    =    ImmutableList . builder (  )  ;", "for    ( SelectorSpec   spec    :    managerSpec . getSelectors (  )  )     {", "validateSelectors ( managerSpec . getRootGroups (  )  ,    spec )  ;", "selectors . add ( new   StaticSelector ( spec . getUserRegex (  )  ,    spec . getSourceRegex (  )  ,    spec . getClientTags (  )  ,    spec . getQueryType (  )  ,    spec . getGroup (  )  )  )  ;", "}", "return   selectors . build (  )  ;", "}", "METHOD_END"], "methodName": ["buildSelectors"], "fileName": "com.facebook.presto.resourceGroups.AbstractResourceConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "if    ( match . getSoftMemoryLimit (  )  . isPresent (  )  )     {", "group . setSoftMemoryLimit ( match . getSoftMemoryLimit (  )  . get (  )  )  ;", "} else    {", "synchronized ( generalPoolMemoryFraction )     {", "double   fraction    =    match . getSoftMemoryLimitFraction (  )  . get (  )  ;", "generalPoolMemoryFraction . put ( group ,    fraction )  ;", "group . setSoftMemoryLimit ( new   io . airlift . units . DataSize (  (  ( generalPoolBytes )     *    fraction )  ,    io . airlift . units . DataSize . Unit . BYTE )  )  ;", "}", "}", "group . setMaxQueuedQueries ( match . getMaxQueued (  )  )  ;", "group . setSoftConcurrencyLimit ( match . getSoftConcurrencyLimit (  )  . orElse ( match . getHardConcurrencyLimit (  )  )  )  ;", "group . setHardConcurrencyLimit ( match . getHardConcurrencyLimit (  )  )  ;", "match . getQueuedTimeLimit (  )  . ifPresent ( group :  : setQueuedTimeLimit )  ;", "match . getRunningTimeLimit (  )  . ifPresent ( group :  : setRunningTimeLimit )  ;", "match . getSchedulingPolicy (  )  . ifPresent ( group :  : setSchedulingPolicy )  ;", "match . getSchedulingWeight (  )  . ifPresent ( group :  : setSchedulingWeight )  ;", "match . getJmxExport (  )  . filter ( Predicate . isEqual ( group . getJmxExport (  )  )  . negate (  )  )  . ifPresent ( group :  : setJmxExport )  ;", "match . getSoftCpuLimit (  )  . ifPresent ( group :  : setSoftCpuLimit )  ;", "match . getHardCpuLimit (  )  . ifPresent ( group :  : setHardCpuLimit )  ;", "if    (  ( match . getSoftCpuLimit (  )  . isPresent (  )  )     |  |     ( match . getHardCpuLimit (  )  . isPresent (  )  )  )     {", "checkState ( getCpuQuotaPeriod (  )  . isPresent (  )  ,     \" Must   specify   hard   CPU   limit   in   addition   to   soft   limit \"  )  ;", "D   limit ;", "if    ( match . getHardCpuLimit (  )  . isPresent (  )  )     {", "limit    =    match . getHardCpuLimit (  )  . get (  )  ;", "} else    {", "limit    =    match . getSoftCpuLimit (  )  . get (  )  ;", "}", "long   rate    =     (  ( long )     ( Math . min (  (  (  1  0  0  0  .  0     *     ( limit . toMillis (  )  )  )     /     (  ( double )     ( getCpuQuotaPeriod (  )  . get (  )  . toMillis (  )  )  )  )  ,    Long . MAX _ VALUE )  )  )  ;", "rate    =    Math . max (  1  ,    rate )  ;", "group . setCpuQuotaGenerationMillisPerSecond ( rate )  ;", "}", "}", "METHOD_END"], "methodName": ["configureGroup"], "fileName": "com.facebook.presto.resourceGroups.AbstractResourceConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "List < ResourceGroupSpec >    candidates    =    getRootGroups (  )  ;", "List < String >    segments    =    group . getId (  )  . getSegments (  )  ;", "ResourceGroupSpec   match    =    null ;", "List < ResourceGroupNameTemplate >    templateId    =    new   ArrayList <  >  (  )  ;", "for    ( int   i    =     0  ;    i    <     ( segments . size (  )  )  ;    i +  +  )     {", "List < ResourceGroupSpec >    nextCandidates    =    null ;", "ResourceGroupSpec   nextCandidatesParent    =    null ;", "for    ( ResourceGroupSpec   candidate    :    candidates )     {", "if    ( candidate . getName (  )  . expandTemplate ( context . getContext (  )  )  . equals ( segments . get ( i )  )  )     {", "templateId . add ( candidate . getName (  )  )  ;", "if    ( i    =  =     (  ( segments . size (  )  )     -     1  )  )     {", "if    ( match    !  =    null )     {", "throw   new   IllegalStateException ( String . format (  \" Ambiguous   configuration   for    % s .    Matches    % s   and    % s \"  ,    group . getId (  )  ,    match . getName (  )  ,    candidate . getName (  )  )  )  ;", "}", "match    =    candidate ;", "} else    {", "if    ( nextCandidatesParent    !  =    null )     {", "throw   new   IllegalStateException ( String . format (  \" Ambiguous   configuration   for    % s .    Matches    % s   and    % s \"  ,    group . getId (  )  ,    nextCandidatesParent . getName (  )  ,    candidate . getName (  )  )  )  ;", "}", "nextCandidates    =    candidate . getSubGroups (  )  ;", "nextCandidatesParent    =    candidate ;", "}", "}", "}", "if    ( nextCandidates    =  =    null )     {", "break ;", "}", "candidates    =    nextCandidates ;", "}", "checkState (  ( match    !  =    null )  ,     \" No   matching   configuration   found   for :     % s \"  ,    group . getId (  )  )  ;", "return   new   AbstractMap . SimpleImmutableEntry <  >  ( ResourceGroupIdTemplate . fromSegments ( templateId )  ,    match )  ;", "}", "METHOD_END"], "methodName": ["getMatchingSpec"], "fileName": "com.facebook.presto.resourceGroups.AbstractResourceConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "try    {", "QueryType . valueOf ( queryType . toUpperCase (  )  )  ;", "}    catch    ( IllegalArgumentExcep   e )     {", "throw   new   IllegalArgumentExcep ( String . format (  \" Selector   specifies   an   invalid   query   type :     % s \"  ,    queryType )  )  ;", "}", "}", "METHOD_END"], "methodName": ["validateQueryType"], "fileName": "com.facebook.presto.resourceGroups.AbstractResourceConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "Queue < ResourceGroupSpec >    groups    =    new   LinkedList <  >  ( managerSpec . getRootGroups (  )  )  ;", "while    (  !  ( groups . isEmpty (  )  )  )     {", "ResourceGroupSpec   group    =    groups . poll (  )  ;", "List < ResourceGroupSpec >    subGroups    =    group . getSubGroups (  )  ;", "groups . addAll ( subGroups )  ;", "if    (  ( group . getSoftCpuLimit (  )  . isPresent (  )  )     |  |     ( group . getHardCpuLimit (  )  . isPresent (  )  )  )     {", "checkArgument ( managerSpec . getCpuQuotaPeriod (  )  . isPresent (  )  ,     \" cpuQuotaPeriod   must   be   specified   to   use   cpu   limits   on   group :     % s \"  ,    group . getName (  )  )  ;", "}", "if    ( group . getSoftCpuLimit (  )  . isPresent (  )  )     {", "checkArgument ( group . getHardCpuLimit (  )  . isPresent (  )  ,     \" Must   specify   hard   CPU   limit   in   addition   to   soft   limit \"  )  ;", "checkArgument (  (  ( group . getSoftCpuLimit (  )  . get (  )  . compareTo ( group . getHardCpuLimit (  )  . get (  )  )  )     <  =     0  )  ,     \" Soft   CPU   limit   cannot   be   greater   than   hard   CPU   limit \"  )  ;", "}", "if    ( group . getSchedulingPolicy (  )  . isPresent (  )  )     {", "switch    ( group . getSchedulingPolicy (  )  . get (  )  )     {", "case   WEIGHTED    :", "case   WEIGHTED _ FAIR    :", "checkArgument (  (  ( subGroups . stream (  )  . allMatch (  (    t )     -  >    t . getSchedulingWeight (  )  . isPresent (  )  )  )     |  |     ( subGroups . stream (  )  . noneMatch (  (    t )     -  >    t . getSchedulingWeight (  )  . isPresent (  )  )  )  )  ,    String . format (  \" Must   specify   scheduling   weight   for   all   sub - groups   of    '  % s '    or   none   of   them \"  ,    group . getName (  )  )  )  ;", "break ;", "case   QUERY _ PRIORITY    :", "case   FAIR    :", "for    ( ResourceGroupSpec   subGroup    :    subGroups )     {", "checkArgument (  (  !  ( subGroup . getSchedulingWeight (  )  . isPresent (  )  )  )  ,    String . format (  \" Must   use    ' weighted '    or    ' weighted _ fair '    scheduling   policy   if   specifying   scheduling   weight   for    '  % s '  \"  ,    group . getName (  )  )  )  ;", "}", "break ;", "default    :", "throw   new   UnsupportedOperationException (  )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["validateRootGroups"], "fileName": "com.facebook.presto.resourceGroups.AbstractResourceConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "spec . getQueryType (  )  . ifPresent ( this :  : validateQueryType )  ;", "List < RNameTemplate >    selectorGroups    =    spec . getGroup (  )  . getSegments (  )  ;", "StringBuilder   fullyQualifiedGroupName    =    new   StringBuilder (  )  ;", "while    (  !  ( selectorGroups . isEmpty (  )  )  )     {", "RNameTemplate   groupName    =    selectorGroups . get (  0  )  ;", "fullyQualifiedGroupName . append ( groupName )  ;", "Optional < RSpec >    match    =    groups . stream (  )  . filter (  (    groupSpec )     -  >    groupSpec . getName (  )  . equals ( groupName )  )  . findFirst (  )  ;", "if    (  !  ( match . isPresent (  )  )  )     {", "throw   new   IllegalArgumentException ( String . format (  \" Selector   refers   to   nonexistent   group :     % s \"  ,    fullyQualifiedGroupName . toString (  )  )  )  ;", "}", "fullyQualifiedGroupName . append (  \"  .  \"  )  ;", "groups    =    match . get (  )  . getSubGroups (  )  ;", "selectorGroups    =    selectorGroups . subList (  1  ,    selectorGroups . size (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["validateSelectors"], "fileName": "com.facebook.presto.resourceGroups.AbstractResourceConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "return   configFile ;", "}", "METHOD_END"], "methodName": ["getConfigFile"], "fileName": "com.facebook.presto.resourceGroups.FileResourceGroupConfig"}, {"methodBody": ["METHOD_START", "{", "this . configFile    =    configFile ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setConfigFile"], "fileName": "com.facebook.presto.resourceGroups.FileResourceGroupConfig"}, {"methodBody": ["METHOD_START", "{", "return   selectors ;", "}", "METHOD_END"], "methodName": ["getSelectors"], "fileName": "com.facebook.presto.resourceGroups.FileResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "return   cpuQuotaPeriod ;", "}", "METHOD_END"], "methodName": ["getCpuQuotaPeriod"], "fileName": "com.facebook.presto.resourceGroups.ManagerSpec"}, {"methodBody": ["METHOD_START", "{", "return   rootGroups ;", "}", "METHOD_END"], "methodName": ["getRootGroups"], "fileName": "com.facebook.presto.resourceGroups.ManagerSpec"}, {"methodBody": ["METHOD_START", "{", "return   selectors ;", "}", "METHOD_END"], "methodName": ["getSelectors"], "fileName": "com.facebook.presto.resourceGroups.ManagerSpec"}, {"methodBody": ["METHOD_START", "{", "ResourceGroupId   id    =    null ;", "for    ( ResourceGroupNameTemplate   segment    :    segments )     {", "String   expanded    =    segment . expandTemplate ( context )  ;", "if    ( id    =  =    null )     {", "id    =    new   ResourceGroupId ( expanded )  ;", "} else    {", "id    =    new   ResourceGroupId ( id ,    expanded )  ;", "}", "}", "return   id ;", "}", "METHOD_END"], "methodName": ["expandTemplate"], "fileName": "com.facebook.presto.resourceGroups.ResourceGroupIdTemplate"}, {"methodBody": ["METHOD_START", "{", "return   new   ResourceGroupIdTemplate ( String . format (  \"  % s .  % s \"  ,    Objects . requireNonNull ( parent ,     \" parent   is   null \"  )  ,    Objects . requireNonNull ( name ,     \" name   is   null \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["forSubGroupNamed"], "fileName": "com.facebook.presto.resourceGroups.ResourceGroupIdTemplate"}, {"methodBody": ["METHOD_START", "{", "return   new   ResourceGroupIdTemplate ( String . join (  \"  .  \"  ,    segments . stream (  )  . map ( ResourceGroupNameTemplate :  : toString )  . collect ( Collectors . toList (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["fromSegments"], "fileName": "com.facebook.presto.resourceGroups.ResourceGroupIdTemplate"}, {"methodBody": ["METHOD_START", "{", "return   ImmutableList . copyOf ( segments )  ;", "}", "METHOD_END"], "methodName": ["getSegments"], "fileName": "com.facebook.presto.resourceGroups.ResourceGroupIdTemplate"}, {"methodBody": ["METHOD_START", "{", "return   segments . stream (  )  . flatMap (  (    s )     -  >    s . getVariableNames (  )  . stream (  )  )  . collect ( toImmutableSet (  )  )  ;", "}", "METHOD_END"], "methodName": ["getVariableNames"], "fileName": "com.facebook.presto.resourceGroups.ResourceGroupIdTemplate"}, {"methodBody": ["METHOD_START", "{", "return   firstNonNull ( Thread . currentThread (  )  . getContextClassLoader (  )  ,    ResourceGroupManagerPlugin . class . getClassLoader (  )  )  ;", "}", "METHOD_END"], "methodName": ["getClassLoader"], "fileName": "com.facebook.presto.resourceGroups.ResourceGroupManagerPlugin"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   builder    =    new   StringBuilder (  )  ;", "for    (  . NameFragment   fragment    :    fragments )     {", "if    ( fragment . isVariable (  )  )     {", "String   value    =    variables . getValue ( fragment . getVariable (  )  )  ;", "checkArgument (  ( value    !  =    null )  ,     \" unresolved   variable    '  % s '    in   resource   group    '  % s '  ,    available :     % s \"  ,    fragment . getVariable (  )  ,    this ,    variables )  ;", "builder . append ( value )  ;", "} else    {", "builder . append ( fragment . getLiteral (  )  )  ;", "}", "}", "return   builder . toString (  )  ;", "}", "METHOD_END"], "methodName": ["expandTemplate"], "fileName": "com.facebook.presto.resourceGroups.ResourceGroupNameTemplate"}, {"methodBody": ["METHOD_START", "{", "return   fragments . stream (  )  . filter ( ResourceGroupNameTemplate . NameFragment :  : isVariable )  . map ( ResourceGroupNameTemplate . NameFragment :  : getVariable )  . collect ( toImmutableSet (  )  )  ;", "}", "METHOD_END"], "methodName": ["getVariableNames"], "fileName": "com.facebook.presto.resourceGroups.ResourceGroupNameTemplate"}, {"methodBody": ["METHOD_START", "{", "return   hardConcurrencyLimit ;", "}", "METHOD_END"], "methodName": ["getHardConcurrencyLimit"], "fileName": "com.facebook.presto.resourceGroups.ResourceGroupSpec"}, {"methodBody": ["METHOD_START", "{", "return   hardCpuLimit ;", "}", "METHOD_END"], "methodName": ["getHardCpuLimit"], "fileName": "com.facebook.presto.resourceGroups.ResourceGroupSpec"}, {"methodBody": ["METHOD_START", "{", "return   jmxExport ;", "}", "METHOD_END"], "methodName": ["getJmxExport"], "fileName": "com.facebook.presto.resourceGroups.ResourceGroupSpec"}, {"methodBody": ["METHOD_START", "{", "return   maxQueued ;", "}", "METHOD_END"], "methodName": ["getMaxQueued"], "fileName": "com.facebook.presto.resourceGroups.ResourceGroupSpec"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.resourceGroups.ResourceGroupSpec"}, {"methodBody": ["METHOD_START", "{", "return   queuedTimeLimit ;", "}", "METHOD_END"], "methodName": ["getQueuedTimeLimit"], "fileName": "com.facebook.presto.resourceGroups.ResourceGroupSpec"}, {"methodBody": ["METHOD_START", "{", "return   runningTimeLimit ;", "}", "METHOD_END"], "methodName": ["getRunningTimeLimit"], "fileName": "com.facebook.presto.resourceGroups.ResourceGroupSpec"}, {"methodBody": ["METHOD_START", "{", "return   schedulingPolicy ;", "}", "METHOD_END"], "methodName": ["getSchedulingPolicy"], "fileName": "com.facebook.presto.resourceGroups.ResourceGroupSpec"}, {"methodBody": ["METHOD_START", "{", "return   schedulingWeight ;", "}", "METHOD_END"], "methodName": ["getSchedulingWeight"], "fileName": "com.facebook.presto.resourceGroups.ResourceGroupSpec"}, {"methodBody": ["METHOD_START", "{", "return   softConcurrencyLimit ;", "}", "METHOD_END"], "methodName": ["getSoftConcurrencyLimit"], "fileName": "com.facebook.presto.resourceGroups.ResourceGroupSpec"}, {"methodBody": ["METHOD_START", "{", "return   softCpuLimit ;", "}", "METHOD_END"], "methodName": ["getSoftCpuLimit"], "fileName": "com.facebook.presto.resourceGroups.ResourceGroupSpec"}, {"methodBody": ["METHOD_START", "{", "return   softMemoryLimit ;", "}", "METHOD_END"], "methodName": ["getSoftMemoryLimit"], "fileName": "com.facebook.presto.resourceGroups.ResourceGroupSpec"}, {"methodBody": ["METHOD_START", "{", "return   softMemoryLimitFraction ;", "}", "METHOD_END"], "methodName": ["getSoftMemoryLimitFraction"], "fileName": "com.facebook.presto.resourceGroups.ResourceGroupSpec"}, {"methodBody": ["METHOD_START", "{", "return   subGroups ;", "}", "METHOD_END"], "methodName": ["getSubGroups"], "fileName": "com.facebook.presto.resourceGroups.ResourceGroupSpec"}, {"methodBody": ["METHOD_START", "{", "if    ( other    =  =    null )     {", "turn   false ;", "}", "turn    (  (  (  (  (  (  (  (  (  (  ( name . equals ( other . name )  )     &  &     ( softMemoryLimit . equals ( other . softMemoryLimit )  )  )     &  &     (  ( maxQueued )     =  =     ( other . maxQueued )  )  )     &  &     ( softConcurncyLimit . equals ( other . softConcurncyLimit )  )  )     &  &     (  ( hardConcurncyLimit )     =  =     ( other . hardConcurncyLimit )  )  )     &  &     ( schedulingPolicy . equals ( other . schedulingPolicy )  )  )     &  &     ( schedulingWeight . equals ( other . schedulingWeight )  )  )     &  &     ( jmxExport . equals ( other . jmxExport )  )  )     &  &     ( softCpuLimit . equals ( other . softCpuLimit )  )  )     &  &     ( hardCpuLimit . equals ( other . hardCpuLimit )  )  )     &  &     ( queuedTimeLimit . equals ( other . queuedTimeLimit )  )  )     &  &     ( runningTimeLimit . equals ( other . runningTimeLimit )  )  ;", "}", "METHOD_END"], "methodName": ["sameConfig"], "fileName": "com.facebook.presto.resourceGroups.ResourceGroupSpec"}, {"methodBody": ["METHOD_START", "{", "return   clientTags ;", "}", "METHOD_END"], "methodName": ["getClientTags"], "fileName": "com.facebook.presto.resourceGroups.SelectorSpec"}, {"methodBody": ["METHOD_START", "{", "return   group ;", "}", "METHOD_END"], "methodName": ["getGroup"], "fileName": "com.facebook.presto.resourceGroups.SelectorSpec"}, {"methodBody": ["METHOD_START", "{", "return   queryType ;", "}", "METHOD_END"], "methodName": ["getQueryType"], "fileName": "com.facebook.presto.resourceGroups.SelectorSpec"}, {"methodBody": ["METHOD_START", "{", "return   sourceRegex ;", "}", "METHOD_END"], "methodName": ["getSourceRegex"], "fileName": "com.facebook.presto.resourceGroups.SelectorSpec"}, {"methodBody": ["METHOD_START", "{", "return   userRegex ;", "}", "METHOD_END"], "methodName": ["getUserRegex"], "fileName": "com.facebook.presto.resourceGroups.SelectorSpec"}, {"methodBody": ["METHOD_START", "{", "Matcher   matcher    =    StaticSelector . NAMED _ GROUPS _ PATTERN . matcher ( pattern . toString (  )  )  ;", "while    ( matcher . find (  )  )     {", "String   name    =    matcher . group (  1  )  ;", "checkArgument (  (  !  ( variables . contains ( name )  )  )  ,     (  (  \" Multiple   definitions   found   for   variable    $  {  \"     +    name )     +     \"  }  \"  )  )  ;", "variables . add ( name )  ;", "}", "}", "METHOD_END"], "methodName": ["addNamedGroups"], "fileName": "com.facebook.presto.resourceGroups.StaticSelector"}, {"methodBody": ["METHOD_START", "{", "for    ( String   key    :    variableNames )     {", "Matcher   keyMatcher    =    pattern . matcher ( candidate )  ;", "if    ( keyMatcher . find (  )  )     {", "try    {", "String   value    =    keyMatcher . g ( key )  ;", "if    ( value    !  =    null )     {", "mapping . put ( key ,    value )  ;", "}", "}    catch    ( IllegalArgumentException   ignored )     {", "}", "}", "}", "}", "METHOD_END"], "methodName": ["addVariableValues"], "fileName": "com.facebook.presto.resourceGroups.StaticSelector"}, {"methodBody": ["METHOD_START", "{", "return   userRegex ;", "}", "METHOD_END"], "methodName": ["getUserRegex"], "fileName": "com.facebook.presto.resourceGroups.StaticSelector"}, {"methodBody": ["METHOD_START", "{", "assertRecordedDefaults ( ConfigAssertions . recordDefaults ( FileResourceGroupConfig . class )  . setConfigFile ( null )  )  ;", "}", "METHOD_END"], "methodName": ["testDefaults"], "fileName": "com.facebook.presto.resourceGroups.TestFileResourceGroupConfig"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    properties    =    new   Builder < String ,    String >  (  )  . put (  \" resource - groups . config - file \"  ,     \"  / test . json \"  )  . build (  )  ;", "expected    =    new    (  )  . setConfigFile (  \"  / test . json \"  )  ;", "assertFullMapping ( properties ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testExplicitPropertyMappings"], "fileName": "com.facebook.presto.resourceGroups.TestFileResourceGroupConfig"}, {"methodBody": ["METHOD_START", "{", "try    {", "parse ( fileName )  ;", "fail (  \" Expected   parsing   to   fail \"  )  ;", "}    catch    ( RuntimeExcep   e )     {", "assertThat ( e . getMessage (  )  )  . matches ( expectedPattern )  ;", "}", "}", "METHOD_END"], "methodName": ["assertFails"], "fileName": "com.facebook.presto.resourceGroups.TestFileResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "Optional < ResourceGroupId >    group    =    tryMatch ( selectors ,    context )  ;", "assertTrue ( group . isPresent (  )  ,     \" match   expected \"  )  ;", "assertEquals ( group . get (  )  . toString (  )  ,    expectedResourceGroup ,    String . format (  \" Expected :     '  % s '    resource   group ,    found :     % s \"  ,    expectedResourceGroup ,    group . get (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["assertMatch"], "fileName": "com.facebook.presto.resourceGroups.TestFileResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "return   this . getClass (  )  . getClassLoader (  )  . getResource ( fileName )  . getPath (  )  ;", "}", "METHOD_END"], "methodName": ["getResourceFilePath"], "fileName": "com.facebook.presto.resourceGroups.TestFileResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "FileResourceGroupConfig   config    =    new   FileResourceGroupConfig (  )  ;", "config . setConfigFile ( getResourceFilePath ( fileName )  )  ;", "return   new    (  (    poolId ,    listener )     -  >     {", "}  ,    config )  ;", "}", "METHOD_END"], "methodName": ["parse"], "fileName": "com.facebook.presto.resourceGroups.TestFileResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "ResourceGroupConfigurationManager < VariableMap >    manager    =    parse (  \" resource _ groups _ config . json \"  )  ;", "ResourceGroupId   globalId    =    new   ResourceGroupId (  \" global \"  )  ;", "ResourceGroup   global    =    new   TestingResourceGroup ( globalId )  ;", "manager . configure ( global ,    new   com . facebook . presto . spi . resourceGroups . SelectionContext ( globalId ,    new   VariableMap ( ImmutableMap . of (  \" USER \"  ,     \" user \"  )  )  )  )  ;", "assertEquals ( global . getSoftMemoryLimit (  )  ,    new   io . airlift . units . DataSize (  1  ,    io . airlift . units . DataSize . Unit . MEGABYTE )  )  ;", "assertEquals ( global . getSoftCpuLimit (  )  ,    new   Duration (  1  ,    TimeUnit . HOURS )  )  ;", "assertEquals ( global . getHardCpuLimit (  )  ,    new   Duration (  1  ,    TimeUnit . DAYS )  )  ;", "assertEquals ( global . getCpuQuotaGenerationMillisPerSecond (  )  ,     (  1  0  0  0     *     2  4  )  )  ;", "assertEquals ( global . getMaxQueuedQueries (  )  ,     1  0  0  0  )  ;", "assertEquals ( global . getHardConcurrencyLimit (  )  ,     1  0  0  )  ;", "assertEquals ( global . getSchedulingPolicy (  )  ,    WEIGHTED )  ;", "assertEquals ( global . getSchedulingWeight (  )  ,     0  )  ;", "assertEquals ( global . getJmxExport (  )  ,    true )  ;", "assertEquals ( global . getQueuedTimeLimit (  )  ,    new   Duration (  1  ,    TimeUnit . HOURS )  )  ;", "assertEquals ( global . getRunningTimeLimit (  )  ,    new   Duration (  1  ,    TimeUnit . HOURS )  )  ;", "ResourceGroupId   subId    =    new   ResourceGroupId ( globalId ,     \" sub \"  )  ;", "ResourceGroup   sub    =    new   TestingResourceGroup ( subId )  ;", "manager . configure ( sub ,    new   com . facebook . presto . spi . resourceGroups . SelectionContext ( subId ,    new   VariableMap ( ImmutableMap . of (  \" USER \"  ,     \" user \"  )  )  )  )  ;", "assertEquals ( sub . getSoftMemoryLimit (  )  ,    new   io . airlift . units . DataSize (  2  ,    io . airlift . units . DataSize . Unit . MEGABYTE )  )  ;", "assertEquals ( sub . getHardConcurrencyLimit (  )  ,     3  )  ;", "assertEquals ( sub . getMaxQueuedQueries (  )  ,     4  )  ;", "assertEquals ( sub . getSchedulingPolicy (  )  ,    null )  ;", "assertEquals ( sub . getSchedulingWeight (  )  ,     5  )  ;", "assertEquals ( sub . getJmxExport (  )  ,    false )  ;", "assertEquals ( global . getQueuedTimeLimit (  )  ,    new   Duration (  1  ,    TimeUnit . HOURS )  )  ;", "assertEquals ( global . getRunningTimeLimit (  )  ,    new   Duration (  1  ,    TimeUnit . HOURS )  )  ;", "}", "METHOD_END"], "methodName": ["testConfiguration"], "fileName": "com.facebook.presto.resourceGroups.TestFileResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "ResourceGroupConfigurationManager < VariableMap >    manager    =    parse (  \" resource _ groups _ config _ extract _ variable . json \"  )  ;", "VariableMap   variableMap    =    new   VariableMap ( ImmutableMap . of (  \" USER \"  ,     \" user \"  ,     \" domain \"  ,     \" prestodb \"  ,     \" region \"  ,     \" us _ east \"  ,     \" cluster \"  ,     \"  1  2  \"  )  )  ;", "ResourceGroupId   globalId    =    new   ResourceGroupId (  \" global \"  )  ;", "manager . configure ( new   TestingResourceGroup ( globalId )  ,    new   com . facebook . presto . spi . resourceGroups . SelectionContext ( globalId ,    variableMap )  )  ;", "ResourceGroupId   childId    =    new   ResourceGroupId ( new   ResourceGroupId (  \" global \"  )  ,     \" prestodb : us _ east :  1  2  \"  )  ;", "TestingResourceGroup   child    =    new   TestingResourceGroup ( childId )  ;", "manager . configure ( child ,    new   com . facebook . presto . spi . resourceGroups . SelectionContext ( childId ,    variableMap )  )  ;", "assertEquals ( child . getHardConcurrencyLimit (  )  ,     3  )  ;", "}", "METHOD_END"], "methodName": ["testExtractVariableConfiguration"], "fileName": "com.facebook.presto.resourceGroups.TestFileResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "assertFails (  \" resource _ groups _ config _ bad _ root . json \"  ,     \" Duplicated   root   group :    global \"  )  ;", "assertFails (  \" resource _ groups _ config _ bad _ sub _ group . json \"  ,     \" Duplicated   sub   group :    sub \"  )  ;", "assertFails (  \" resource _ groups _ config _ bad _ group _ id . json \"  ,     \" Invalid   resource   group   name .     ' glo . bal '    contains   a    '  .  '  \"  )  ;", "assertFails (  \" resource _ groups _ config _ bad _ weighted _ scheduling _ policy . json \"  ,     \" Must   specify   scheduling   weight   for   all   sub - groups   of    ' requests '    or   none   of   them \"  )  ;", "assertFails (  \" resource _ groups _ config _ unused _ field . json \"  ,     \" Unknown   property   at   line    8  :  6  :    maxFoo \"  )  ;", "assertFails (  \" resource _ groups _ config _ bad _ query _ priority _ scheduling _ policy . json \"  ,     \" Must   use    ' weighted '    or    ' weighted _ fair '    scheduling   policy   if   specifying   scheduling   weight   for    ' requests '  \"  )  ;", "assertFails (  \" resource _ groups _ config _ bad _ extract _ variable . json \"  ,     \" Invalid   resource   group   name .  *  \"  )  ;", "}", "METHOD_END"], "methodName": ["testInvalid"], "fileName": "com.facebook.presto.resourceGroups.TestFileResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "parse (  \" resource _ groups _ config _ bad _ query _ type . json \"  )  ;", "}", "METHOD_END"], "methodName": ["testInvalidQueryTypeConfiguration"], "fileName": "com.facebook.presto.resourceGroups.TestFileResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "ResourceGroupConfigurationManager < VariableMap >    manager    =    parse (  \" resource _ groups _ config _ legacy . json \"  )  ;", "ResourceGroupId   globalId    =    new   ResourceGroupId (  \" global \"  )  ;", "ResourceGroup   global    =    new   TestingResourceGroup ( globalId )  ;", "manager . configure ( global ,    new   com . facebook . presto . spi . resourceGroups . SelectionContext ( globalId ,    new   VariableMap ( ImmutableMap . of (  \" USER \"  ,     \" user \"  )  )  )  )  ;", "assertEquals ( global . getSoftMemoryLimit (  )  ,    new   io . airlift . units . DataSize (  3  ,    io . airlift . units . DataSize . Unit . MEGABYTE )  )  ;", "assertEquals ( global . getMaxQueuedQueries (  )  ,     9  9  )  ;", "assertEquals ( global . getHardConcurrencyLimit (  )  ,     4  2  )  ;", "}", "METHOD_END"], "methodName": ["testLegacyConfiguration"], "fileName": "com.facebook.presto.resourceGroups.TestFileResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "parse (  \" resource _ groups _ config _ bad _ selector . json \"  )  ;", "}", "METHOD_END"], "methodName": ["testNonExistentGroup"], "fileName": "com.facebook.presto.resourceGroups.TestFileResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "FileResourceGroupConfigurationManager   manager    =    parse (  \" resource _ groups _ config _ query _ type . json \"  )  ;", "List < ResourceGroupSelector >    selectors    =    manager . getSelectors (  )  ;", "assertMatch ( selectors ,    new   com . facebook . presto . spi . resourceGroups . SelectionCriteria ( true ,     \" test _ user \"  ,    Optional . empty (  )  ,    ImmutableSet . of (  )  ,    Optional . of (  \" select \"  )  )  ,     \" global . select \"  )  ;", "assertMatch ( selectors ,    new   com . facebook . presto . spi . resourceGroups . SelectionCriteria ( true ,     \" test _ user \"  ,    Optional . empty (  )  ,    ImmutableSet . of (  )  ,    Optional . of (  \" explain \"  )  )  ,     \" global . explain \"  )  ;", "assertMatch ( selectors ,    new   com . facebook . presto . spi . resourceGroups . SelectionCriteria ( true ,     \" test _ user \"  ,    Optional . empty (  )  ,    ImmutableSet . of (  )  ,    Optional . of (  \" insert \"  )  )  ,     \" global . insert \"  )  ;", "assertMatch ( selectors ,    new   com . facebook . presto . spi . resourceGroups . SelectionCriteria ( true ,     \" test _ user \"  ,    Optional . empty (  )  ,    ImmutableSet . of (  )  ,    Optional . of (  \" delete \"  )  )  ,     \" global . delete \"  )  ;", "assertMatch ( selectors ,    new   com . facebook . presto . spi . resourceGroups . SelectionCriteria ( true ,     \" test _ user \"  ,    Optional . empty (  )  ,    ImmutableSet . of (  )  ,    Optional . of (  \" describe \"  )  )  ,     \" global . describe \"  )  ;", "assertMatch ( selectors ,    new   com . facebook . presto . spi . resourceGroups . SelectionCriteria ( true ,     \" test _ user \"  ,    Optional . empty (  )  ,    ImmutableSet . of (  )  ,    Optional . of (  \" data _ definition \"  )  )  ,     \" global . data _ definition \"  )  ;", "assertMatch ( selectors ,    new   com . facebook . presto . spi . resourceGroups . SelectionCriteria ( true ,     \" test _ user \"  ,    Optional . empty (  )  ,    ImmutableSet . of (  )  ,    Optional . of (  \" sth _ else \"  )  )  ,     \" global . other \"  )  ;", "}", "METHOD_END"], "methodName": ["testQueryTypeConfiguration"], "fileName": "com.facebook.presto.resourceGroups.TestFileResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "for    ( ResourceGroupSelector   selector    :    selectors )     {", "Optional < SelectionContext < VariableMap >  >    group    =    selector . match ( context )  ;", "if    ( group . isPresent (  )  )     {", "return   group . map ( SelectionContext :  : getResourceGroupId )  ;", "}", "}", "return   Optional . empty (  )  ;", "}", "METHOD_END"], "methodName": ["tryMatch"], "fileName": "com.facebook.presto.resourceGroups.TestFileResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "ResourceGroupIdTemplate   template    =    new   ResourceGroupIdTemplate (  \" test .  $  { USER }  .  $  { SOURCE }  \"  )  ;", "ResourceGroupId   expected    =    new   ResourceGroupId ( new   ResourceGroupId ( new   ResourceGroupId (  \" test \"  )  ,     \" u \"  )  ,     \" s \"  )  ;", "assertEquals ( template . expandTemplate ( new   VariableMap ( ImmutableMap . of (  \" USER \"  ,     \" u \"  ,     \" SOURCE \"  ,     \" s \"  )  )  )  ,    expected )  ;", "template    =    new   ResourceGroupIdTemplate (  \" test .  $  { USER }  \"  )  ;", "assertEquals ( template . expandTemplate ( new   VariableMap ( ImmutableMap . of (  \" USER \"  ,     \" alice . smith \"  ,     \" SOURCE \"  ,     \" s \"  )  )  )  ,    new   ResourceGroupId ( new   ResourceGroupId (  \" test \"  )  ,     \" alice . smith \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testExpansion"], "fileName": "com.facebook.presto.resourceGroups.TestResourceGroupIdTemplate"}, {"methodBody": ["METHOD_START", "{", "ResourceGroupIdTemplate   template    =    new   ResourceGroupIdTemplate (  \" test . pipeline . job _  $  { pipeline }  _ user :  $  { USER }  .  $  { USER }  \"  )  ;", "ResourceGroupId   expected    =    new   ResourceGroupId ( new   ResourceGroupId ( new   ResourceGroupId ( new   ResourceGroupId (  \" test \"  )  ,     \" pipeline \"  )  ,     \" job _ testpipeline _ user : user \"  )  ,     \" user \"  )  ;", "Pattern   sourcePattern    =    Pattern . compile (  \" scheduler . important .  (  ?  < pipeline >  [  ^  \\  \\  [  ]  *  )  .  *  \"  )  ;", "StaticSelector   selector    =    new   StaticSelector ( Optional . empty (  )  ,    Optional . of ( sourcePattern )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    template )  ;", "SelectionCriteria   context    =    new   SelectionCriteria ( true ,     \" user \"  ,    Optional . of (  \" scheduler . important . testpipeline [  5  ]  \"  )  ,    ImmutableSet . of (  )  ,    Optional . empty (  )  )  ;", "assertEquals ( selector . match ( context )  . map ( SelectionContext :  : getResourceGroupId )  ,    Optional . of ( expected )  )  ;", "}", "METHOD_END"], "methodName": ["testExtraction"], "fileName": "com.facebook.presto.resourceGroups.TestResourceGroupIdTemplate"}, {"methodBody": ["METHOD_START", "{", "ResourceGroupIdTemplate   template    =    new   ResourceGroupIdTemplate (  \" test . pipeline .  $  { pipeline }  .  $  { USER }  \"  )  ;", "Pattern   sourcePattern    =    Pattern . compile (  \" scheduler . important .  (  ?  < pipeline >  [  ^  \\  \\  [  ]  *  )  .  *  \"  )  ;", "StaticSelector   selector    =    new   StaticSelector ( Optional . empty (  )  ,    Optional . of ( sourcePattern )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    template )  ;", "SelectionCriteria   context    =    new   SelectionCriteria ( true ,     \" user \"  ,    Optional . of (  \" scheduler . testpipeline [  5  ]  \"  )  ,    ImmutableSet . of (  )  ,    Optional . empty (  )  )  ;", "assertFalse ( selector . match ( context )  . isPresent (  )  )  ;", "}", "METHOD_END"], "methodName": ["testNoMatch"], "fileName": "com.facebook.presto.resourceGroups.TestResourceGroupIdTemplate"}, {"methodBody": ["METHOD_START", "{", "ResourceGroupIdTemplate   template    =    new   ResourceGroupIdTemplate (  \" test . pipeline .  $  { pipeline }  .  $  { SOURCE }  _ s \"  )  ;", "ResourceGroupId   expected    =    new   ResourceGroupId ( new   ResourceGroupId ( new   ResourceGroupId ( new   ResourceGroupId (  \" test \"  )  ,     \" pipeline \"  )  ,     \" testpipeline \"  )  ,     \"  _ s \"  )  ;", "Pattern   userPattern    =    Pattern . compile (  \" scheduler . important .  (  ?  < pipeline >  [  ^  \\  \\  [  ]  *  )  .  *  \"  )  ;", "StaticSelector   selector    =    new   StaticSelector ( Optional . of ( userPattern )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    template )  ;", "SelectionCriteria   context    =    new   SelectionCriteria ( true ,     \" scheduler . important . testpipeline [  5  ]  \"  ,    Optional . empty (  )  ,    ImmutableSet . of (  )  ,    Optional . empty (  )  )  ;", "assertEquals ( selector . match ( context )  . map ( SelectionContext :  : getResourceGroupId )  ,    Optional . of ( expected )  )  ;", "}", "METHOD_END"], "methodName": ["testNoSource"], "fileName": "com.facebook.presto.resourceGroups.TestResourceGroupIdTemplate"}, {"methodBody": ["METHOD_START", "{", "ResourceGroupIdTemplate   template    =    new   ResourceGroupIdTemplate (  \" test . pipeline .  $  { pipeline }  .  $  { user }  \"  )  ;", "Pattern   sourcePattern    =    Pattern . compile (  \" scheduler . important .  (  ?  < pipeline >  [  ^  \\  \\  [  ]  *  )  .  *  \"  )  ;", "StaticSelector   selector    =    new   StaticSelector ( Optional . empty (  )  ,    Optional . of ( sourcePattern )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    template )  ;", "SelectionCriteria   context    =    new   SelectionCriteria ( true ,     \" user \"  ,    Optional . of (  \" scheduler . important . testpipeline [  5  ]  \"  )  ,    ImmutableSet . of (  )  ,    Optional . empty (  )  )  ;", "selector . match ( context )  ;", "}", "METHOD_END"], "methodName": ["testUnresolvedVariableLoadTime"], "fileName": "com.facebook.presto.resourceGroups.TestResourceGroupIdTemplate"}, {"methodBody": ["METHOD_START", "{", "ResourceGroupIdTemplate   template    =    new   ResourceGroupIdTemplate (  \" test . pipeline .  $  { pipeline }  .  $  { USER }  \"  )  ;", "Pattern   sourcePattern    =    Pattern . compile (  \" scheduler . important .  ( testpipeline \\  \\  [  |  (  ?  < pipeline >  [  ^  \\  \\  [  ]  *  )  )  .  *  \"  )  ;", "StaticSelector   selector    =    new   StaticSelector ( Optional . empty (  )  ,    Optional . of ( sourcePattern )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    template )  ;", "SelectionCriteria   context    =    new   SelectionCriteria ( true ,     \" user \"  ,    Optional . of (  \" scheduler . important . testpipeline [  5  ]  \"  )  ,    ImmutableSet . of (  )  ,    Optional . empty (  )  )  ;", "selector . match ( context )  ;", "}", "METHOD_END"], "methodName": ["testUnresolvedVariableRunTime"], "fileName": "com.facebook.presto.resourceGroups.TestResourceGroupIdTemplate"}, {"methodBody": ["METHOD_START", "{", "return   new   SelectionCriteria ( true ,    user ,    Optional . ofNullable ( source )  ,    tags ,    Optional . empty (  )  )  ;", "}", "METHOD_END"], "methodName": ["newSelectionCritera"], "fileName": "com.facebook.presto.resourceGroups.TestStaticSelector"}, {"methodBody": ["METHOD_START", "{", "ResourceGroupId   resourceGroupId    =    new   ResourceGroupId ( new   ResourceGroupId (  \" global \"  )  ,     \" foo \"  )  ;", "selector    =    new    ( Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . of ( ImmutableList . of (  \" tag 1  \"  ,     \" tag 2  \"  )  )  ,    Optional . empty (  )  ,    new   ResourceGroupIdTemplate (  \" global . foo \"  )  )  ;", "assertEquals ( selector . match ( newSelectionCritera (  \" userA \"  ,    null ,    ImmutableSet . of (  \" tag 1  \"  ,     \" tag 2  \"  )  )  )  . map ( SelectionContext :  : getResourceGroupId )  ,    Optional . of ( resourceGroupId )  )  ;", "assertEquals ( selector . match ( newSelectionCritera (  \" userB \"  ,     \" source \"  ,    ImmutableSet . of (  )  )  )  ,    Optional . empty (  )  )  ;", "assertEquals ( selector . match ( newSelectionCritera (  \" A . user \"  ,     \" a   source   b \"  ,    ImmutableSet . of (  \" tag 1  \"  )  )  )  ,    Optional . empty (  )  )  ;", "assertEquals ( selector . match ( newSelectionCritera (  \" A . user \"  ,     \" a   source   b \"  ,    ImmutableSet . of (  \" tag 1  \"  ,     \" tag 2  \"  ,     \" tag 3  \"  )  )  )  . map ( SelectionContext :  : getResourceGroupId )  ,    Optional . of ( resourceGroupId )  )  ;", "}", "METHOD_END"], "methodName": ["testClientTags"], "fileName": "com.facebook.presto.resourceGroups.TestStaticSelector"}, {"methodBody": ["METHOD_START", "{", "ResourceGroupId   resourceGroupId    =    new   ResourceGroupId ( new   ResourceGroupId (  \" global \"  )  ,     \" foo \"  )  ;", "selector    =    new    ( Optional . empty (  )  ,    Optional . of ( Pattern . compile (  \"  .  * source .  *  \"  )  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    new   ResourceGroupIdTemplate (  \" global . foo \"  )  )  ;", "assertEquals ( selector . match ( newSelectionCritera (  \" userA \"  ,    null ,    ImmutableSet . of (  \" tag 1  \"  )  )  )  ,    Optional . empty (  )  )  ;", "assertEquals ( selector . match ( newSelectionCritera (  \" userB \"  ,     \" source \"  ,    ImmutableSet . of (  )  )  )  . map ( SelectionContext :  : getResourceGroupId )  ,    Optional . of ( resourceGroupId )  )  ;", "assertEquals ( selector . match ( newSelectionCritera (  \" A . user \"  ,     \" a   source   b \"  ,    ImmutableSet . of (  \" tag 1  \"  )  )  )  . map ( SelectionContext :  : getResourceGroupId )  ,    Optional . of ( resourceGroupId )  )  ;", "}", "METHOD_END"], "methodName": ["testSourceRegex"], "fileName": "com.facebook.presto.resourceGroups.TestStaticSelector"}, {"methodBody": ["METHOD_START", "{", "ResourceGroupId   resourceGroupId    =    new   ResourceGroupId ( new   ResourceGroupId (  \" global \"  )  ,     \" foo \"  )  ;", "selector    =    new    ( Optional . of ( Pattern . compile (  \" user .  *  \"  )  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    new   ResourceGroupIdTemplate (  \" global . foo \"  )  )  ;", "assertEquals ( selector . match ( newSelectionCritera (  \" userA \"  ,    null ,    ImmutableSet . of (  \" tag 1  \"  )  )  )  . map ( SelectionContext :  : getResourceGroupId )  ,    Optional . of ( resourceGroupId )  )  ;", "assertEquals ( selector . match ( newSelectionCritera (  \" userB \"  ,     \" source \"  ,    ImmutableSet . of (  )  )  )  . map ( SelectionContext :  : getResourceGroupId )  ,    Optional . of ( resourceGroupId )  )  ;", "assertEquals ( selector . match ( newSelectionCritera (  \" A . user \"  ,    null ,    ImmutableSet . of (  \" tag 1  \"  )  )  )  ,    Optional . empty (  )  )  ;", "}", "METHOD_END"], "methodName": ["testUserRegex"], "fileName": "com.facebook.presto.resourceGroups.TestStaticSelector"}, {"methodBody": ["METHOD_START", "{", "return   VariableMap . EMPTY _ VARIABLE _ MAP ;", "}", "METHOD_END"], "methodName": ["emptyVariableMap"], "fileName": "com.facebook.presto.resourceGroups.VariableMap"}, {"methodBody": ["METHOD_START", "{", "return   variables . get ( key )  ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "com.facebook.presto.resourceGroups.VariableMap"}, {"methodBody": ["METHOD_START", "{", "return   configUrl ;", "}", "METHOD_END"], "methodName": ["getConfigDbUrl"], "fileName": "com.facebook.presto.resourceGroups.db.DbResourceGroupConfig"}, {"methodBody": ["METHOD_START", "{", "return   exactMatchSelectorEnabled ;", "}", "METHOD_END"], "methodName": ["getExactMatchSelectorEnabled"], "fileName": "com.facebook.presto.resourceGroups.db.DbResourceGroupConfig"}, {"methodBody": ["METHOD_START", "{", "return   maxRefreshInterval ;", "}", "METHOD_END"], "methodName": ["getMaxRefreshInterval"], "fileName": "com.facebook.presto.resourceGroups.db.DbResourceGroupConfig"}, {"methodBody": ["METHOD_START", "{", "this . configUrl    =    configUrl ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setConfigDbUrl"], "fileName": "com.facebook.presto.resourceGroups.db.DbResourceGroupConfig"}, {"methodBody": ["METHOD_START", "{", "this . exactMatchSelectorEnabled    =    exactMatchSelectorEnabled ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setExactMatchSelectorEnabled"], "fileName": "com.facebook.presto.resourceGroups.db.DbResourceGroupConfig"}, {"methodBody": ["METHOD_START", "{", "this . maxRefreshInterval    =    maxRefreshInterval ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setMaxRefreshInterval"], "fileName": "com.facebook.presto.resourceGroups.db.DbResourceGroupConfig"}, {"methodBody": ["METHOD_START", "{", "Map < ResourceGroupIdTemplate ,    ResourceGroupSpec >    resourceGroupSpecs    =    new   HashMap <  >  (  )  ;", "Set < Long >    rootGroupIds    =    new   HashSet <  >  (  )  ;", "Map < Long ,    ResourceGroupSpec >    resourceGroupSpecMap    =    new   HashMap <  >  (  )  ;", "Map < Long ,    ResourceGroupIdTemplate >    resourceGroupIdTemplateMap    =    new   HashMap <  >  (  )  ;", "Map < Long ,    ResourceGroupSpecBuilder >    recordMap    =    new   HashMap <  >  (  )  ;", "Map < Long ,    Set < Long >  >    subGroupIdsToBuild    =    new   HashMap <  >  (  )  ;", "populateFromDbHelper ( recordMap ,    rootGroupIds ,    resourceGroupIdTemplateMap ,    subGroupIdsToBuild )  ;", "for    ( LinkedList < Long >    queue    =    new   LinkedList <  >  ( rootGroupIds )  ;     !  ( queue . isEmpty (  )  )  ;  )     {", "Long   id    =    queue . pollFirst (  )  ;", "resourceGroupIdTemplateMap . computeIfAbsent ( id ,     (    k )     -  >     {", "ResourceGroupSpecBuilder   builder    =    recordMap . get ( id )  ;", "return   ResourceGroupIdTemplate . forSubGroupNamed ( resourceGroupIdTemplateMap . get ( builder . getParentId (  )  . get (  )  )  ,    builder . getNameTemplate (  )  . toString (  )  )  ;", "}  )  ;", "Set < Long >    childrenToBuild    =    subGroupIdsToBuild . getOrDefault ( id ,    ImmutableSet . of (  )  )  ;", "if    ( childrenToBuild . isEmpty (  )  )     {", "ResourceGroupSpecBuilder   builder    =    recordMap . get ( id )  ;", "ResourceGroupSpec   resourceGroupSpec    =    builder . build (  )  ;", "resourceGroupSpecMap . put ( id ,    resourceGroupSpec )  ;", "resourceGroupSpecs . put ( resourceGroupIdTemplateMap . get ( id )  ,    resourceGroupSpec )  ;", "builder . getParentId (  )  . ifPresent (  (    parentId )     -  >     {", "recordMap . get ( parentId )  . addSubGroup ( resourceGroupSpec )  ;", "subGroupIdsToBuild . get ( parentId )  . remove ( id )  ;", "}  )  ;", "} else    {", "queue . addFirst ( id )  ;", "queue . addAll (  0  ,    childrenToBuild )  ;", "}", "}", "List < ResourceGroupSpec >    rootGroups    =    rootGroupIds . stream (  )  . map ( resourceGroupSpecMap :  : get )  . collect ( Collectors . toList (  )  )  ;", "List < SelectorSpec >    selectors    =    dao . getSelectors ( environment )  . stream (  )  . map (  (    selectorRecord )     -  >    new   SelectorSpec ( selectorRecord . getUserRegex (  )  ,    selectorRecord . getSourceRegex (  )  ,    selectorRecord . getQueryType (  )  ,    selectorRecord . getClientTags (  )  ,    resourceGroupIdTemplateMap . get ( selectorRecord . getResourceGroupId (  )  )  )  )  . collect ( Collectors . toList (  )  )  ;", "ManagerSpec   managerSpec    =    new   ManagerSpec ( rootGroups ,    selectors ,    getCpuQuotaPeriodFromDb (  )  )  ;", "validateRootGroups ( managerSpec )  ;", "return   new   AbstractMap . SimpleImmutableEntry <  >  ( managerSpec ,    resourceGroupSpecs )  ;", "}", "METHOD_END"], "methodName": ["buildSpecsFromDb"], "fileName": "com.facebook.presto.resourceGroups.db.DbResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "for    ( ResourceGroupIdTemplate   resourceGroupIdTemplate    :    changedSpecs )     {", "for    ( ResourceGroupId   resourceGroupId    :    configuredGroups . getOrDefault ( resourceGroupIdTemplate ,    ImmutableList . of (  )  )  )     {", "synchronized ( getRootGroup ( resourceGroupId )  )     {", "configureGroup ( groups . get ( resourceGroupId )  ,    resourceGroupSpecs . get ( resourceGroupIdTemplate )  )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["configureChangedGroups"], "fileName": "com.facebook.presto.resourceGroups.db.DbResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "configExecutor . shutdownNow (  )  ;", "}", "METHOD_END"], "methodName": ["destroy"], "fileName": "com.facebook.presto.resourceGroups.db.DbResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "for    ( ResourceGroupIdTemplate   resourceGroupIdTemplate    :    deletedSpecs )     {", "for    ( ResourceGroupId   resourceGroupId    :    configuredGroups . getOrDefault ( resourceGroupIdTemplate ,    ImmutableList . of (  )  )  )     {", "disableGroup ( groups . get ( resourceGroupId )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["disableDeletedGroups"], "fileName": "com.facebook.presto.resourceGroups.db.DbResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "group . setHardConcurrencyLimit (  0  )  ;", "group . setMaxQueuedQueries (  0  )  ;", "}", "METHOD_END"], "methodName": ["disableGroup"], "fileName": "com.facebook.presto.resourceGroups.db.DbResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "List < ResourceGroupGlobalProperties >    globalProperties    =    dao . getResourceGroupGlobalProperties (  )  ;", "checkState (  (  ( globalProperties . size (  )  )     <  =     1  )  ,     \" There   is   more   than   one   cpu _ quota _ period \"  )  ;", "return    !  ( globalProperties . isEmpty (  )  )     ?    globalProperties . get (  0  )  . getCpuQuotaPeriod (  )     :    Optional . empty (  )  ;", "}", "METHOD_END"], "methodName": ["getCpuQuotaPeriodFromDb"], "fileName": "com.facebook.presto.resourceGroups.db.DbResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "return   refreshFailures ;", "}", "METHOD_END"], "methodName": ["getRefreshFailures"], "fileName": "com.facebook.presto.resourceGroups.db.DbResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "Optional < ResourceGroupId >    parent    =    groupId . getParent (  )  ;", "while    ( parent . isPresent (  )  )     {", "groupId    =    parent . get (  )  ;", "parent    =    groupId . getParent (  )  ;", "}", "return   groups . get ( groupId )  ;", "}", "METHOD_END"], "methodName": ["getRootGroup"], "fileName": "com.facebook.presto.resourceGroups.db.DbResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "if    (  ( lastRefresh . get (  )  )     =  =     0  )     {", "throw   new   spi . PrestoException ( CONFIGURATION _ UNAVAILABLE ,     \" Selectors   cannot   be   fetched   from   database \"  )  ;", "}", "if    ( selectors . get (  )  . isEmpty (  )  )     {", "throw   new   spi . PrestoException ( CONFIGURATION _ INVALID ,     \" No   selectors   are   configured \"  )  ;", "}", "return   selectors . get (  )  ;", "}", "METHOD_END"], "methodName": ["getSelectors"], "fileName": "com.facebook.presto.resourceGroups.db.DbResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "try    {", "Map . Entry < ManagerSpec ,    Map < ResourceGroupIdTemplate ,    ResourceGroupSpec >  >    specsFromDb    =    buildSpecsFromDb (  )  ;", "ManagerSpec   managerSpec    =    specsFromDb . getKey (  )  ;", "Map < ResourceGroupIdTemplate ,    ResourceGroupSpec >    resourceGroupSpecs    =    specsFromDb . getValue (  )  ;", "Set < ResourceGroupIdTemplate >    changedSpecs    =    new   HashSet <  >  (  )  ;", "Set < ResourceGroupIdTemplate >    deletedSpecs    =    Sets . difference ( this . resourceGroupSpecs . keySet (  )  ,    resourceGroupSpecs . keySet (  )  )  ;", "for    ( Map . Entry < ResourceGroupIdTemplate ,    ResourceGroupSpec >    entry    :    resourceGroupSpecs . entrySet (  )  )     {", "if    (  !  ( entry . getValue (  )  . sameConfig ( this . resourceGroupSpecs . get ( entry . getKey (  )  )  )  )  )     {", "changedSpecs . add ( entry . getKey (  )  )  ;", "}", "}", "this . resourceGroupSpecs    =    resourceGroupSpecs ;", "this . cpuQuotaPeriod . set ( managerSpec . getCpuQuotaPeriod (  )  )  ;", "this . rootGroups . set ( managerSpec . getRootGroups (  )  )  ;", "List < ResourceGroupSelector >    selectors    =    buildSelectors ( managerSpec )  ;", "if    ( exactMatchSelectorEnabled )     {", "ImmutableList . Builder < ResourceGroupSelector >    builder    =    ImmutableList . builder (  )  ;", "builder . add ( new   DbSourceExactMatchSelector ( environment ,    dao )  )  ;", "builder . addAll ( selectors )  ;", "this . selectors . set ( builder . build (  )  )  ;", "} else    {", "this . selectors . set ( selectors )  ;", "}", "configureChangedGroups ( changedSpecs )  ;", "disableDeletedGroups ( deletedSpecs )  ;", "if    (  ( lastRefresh . get (  )  )     >     0  )     {", "for    ( ResourceGroupIdTemplate   deleted    :    deletedSpecs )     {", ". log . info (  \" Resource   group   spec   deleted    % s \"  ,    deleted )  ;", "}", "for    ( ResourceGroupIdTemplate   changed    :    changedSpecs )     {", ". log . info (  \" Resource   group   spec    % s   changed   to    % s \"  ,    changed ,    resourceGroupSpecs . get ( changed )  )  ;", "}", "} else    {", ". log . info (  \" Loaded    % s   selectors   and    % s   resource   groups   from   database \"  ,    this . selectors . get (  )  . size (  )  ,    this . resourceGroupSpecs . size (  )  )  ;", "}", "lastRefresh . set ( System . nanoTime (  )  )  ;", "}    catch    ( Throwable   e )     {", "if    (  ( Duration . succinctNanos (  (  ( System . nanoTime (  )  )     -     ( lastRefresh . get (  )  )  )  )  . compareTo ( maxRefreshInterval )  )     >     0  )     {", "lastRefresh . set (  0  )  ;", "}", "refreshFailures . update (  1  )  ;", ". log . error ( e ,     \" Error   loading   configuration   from   db \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["load"], "fileName": "com.facebook.presto.resourceGroups.db.DbResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "List < ResourceGroupSpecBuilder >    records    =    dao . getResourceGroups ( environment )  ;", "for    ( ResourceGroupSpecBuilder   record    :    records )     {", "recordMap . put ( record . getId (  )  ,    record )  ;", "if    (  !  ( record . getParentId (  )  . isPresent (  )  )  )     {", "rootGroupIds . add ( record . getId (  )  )  ;", "resourceGroupIdTemplateMap . put ( record . getId (  )  ,    new   ResourceGroupIdTemplate ( record . getNameTemplate (  )  . toString (  )  )  )  ;", "} else    {", "subGroupIdsToBuild . computeIfAbsent ( record . getParentId (  )  . get (  )  ,     (    k )     -  >    new   HashSet <  >  (  )  )  . add ( record . getId (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["populateFromDbHelper"], "fileName": "com.facebook.presto.resourceGroups.db.DbResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "if    ( started . compareAndSet ( false ,    true )  )     {", "cExecutor . scheduleWithFixedDelay ( this :  : load ,     1  ,     1  ,    TimeUnit . SECONDS )  ;", "}", "}", "METHOD_END"], "methodName": ["start"], "fileName": "com.facebook.presto.resourceGroups.db.DbResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "return   cpuQuotaPeriod ;", "}", "METHOD_END"], "methodName": ["getCpuQuotaPeriod"], "fileName": "com.facebook.presto.resourceGroups.db.ResourceGroupGlobalProperties"}, {"methodBody": ["METHOD_START", "{", "subGroups . add ( subGroup )  ;", "}", "METHOD_END"], "methodName": ["addSubGroup"], "fileName": "com.facebook.presto.resourceGroups.db.ResourceGroupSpecBuilder"}, {"methodBody": ["METHOD_START", "{", "return   new   ResourceGroupSpec ( nameTemplate ,    softMemoryLimit ,    maxQueued ,    softConcurrencyLimit ,    Optional . of ( hardConcurrencyLimit )  ,    Optional . empty (  )  ,    schedulingPolicy ,    schedulingWeight ,    Optional . of ( subGroups . build (  )  )  ,    jmxExport ,    softCpuLimit ,    hardCpuLimit ,    queuedTimeLimit ,    runningTimeLimit )  ;", "}", "METHOD_END"], "methodName": ["build"], "fileName": "com.facebook.presto.resourceGroups.db.ResourceGroupSpecBuilder"}, {"methodBody": ["METHOD_START", "{", "return   hardCpuLimit ;", "}", "METHOD_END"], "methodName": ["getHardCpuLimit"], "fileName": "com.facebook.presto.resourceGroups.db.ResourceGroupSpecBuilder"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "com.facebook.presto.resourceGroups.db.ResourceGroupSpecBuilder"}, {"methodBody": ["METHOD_START", "{", "return   nameTemplate ;", "}", "METHOD_END"], "methodName": ["getNameTemplate"], "fileName": "com.facebook.presto.resourceGroups.db.ResourceGroupSpecBuilder"}, {"methodBody": ["METHOD_START", "{", "return   parentId ;", "}", "METHOD_END"], "methodName": ["getParentId"], "fileName": "com.facebook.presto.resourceGroups.db.ResourceGroupSpecBuilder"}, {"methodBody": ["METHOD_START", "{", "return   softCpuLimit ;", "}", "METHOD_END"], "methodName": ["getSoftCpuLimit"], "fileName": "com.facebook.presto.resourceGroups.db.ResourceGroupSpecBuilder"}, {"methodBody": ["METHOD_START", "{", "return   clientTags ;", "}", "METHOD_END"], "methodName": ["getClientTags"], "fileName": "com.facebook.presto.resourceGroups.db.SelectorRecord"}, {"methodBody": ["METHOD_START", "{", "return   priority ;", "}", "METHOD_END"], "methodName": ["getPriority"], "fileName": "com.facebook.presto.resourceGroups.db.SelectorRecord"}, {"methodBody": ["METHOD_START", "{", "return   queryType ;", "}", "METHOD_END"], "methodName": ["getQueryType"], "fileName": "com.facebook.presto.resourceGroups.db.SelectorRecord"}, {"methodBody": ["METHOD_START", "{", "return   resourceGroupId ;", "}", "METHOD_END"], "methodName": ["getResourceGroupId"], "fileName": "com.facebook.presto.resourceGroups.db.SelectorRecord"}, {"methodBody": ["METHOD_START", "{", "return   sourceRegex ;", "}", "METHOD_END"], "methodName": ["getSourceRegex"], "fileName": "com.facebook.presto.resourceGroups.db.SelectorRecord"}, {"methodBody": ["METHOD_START", "{", "return   userRegex ;", "}", "METHOD_END"], "methodName": ["getUserRegex"], "fileName": "com.facebook.presto.resourceGroups.db.SelectorRecord"}, {"methodBody": ["METHOD_START", "{", "assertRecordedDefaults ( ConfigAssertions . recordDefaults ( DbResourceGroupConfig . class )  . setConfigDbUrl ( null )  . setMaxRefreshInterval ( new   Duration (  1  ,    TimeUnit . HOURS )  )  . setExactMatchSelectorEnabled ( false )  )  ;", "}", "METHOD_END"], "methodName": ["testDefaults"], "fileName": "com.facebook.presto.resourceGroups.db.TestDbResourceGroupConfig"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    properties    =    new   Builder < String ,    String >  (  )  . put (  \" resource - groups . config - db - url \"  ,     \" jdbc : mysql /  / localhost :  3  3  0  6  / config ? user = presto _ admin \"  )  . put (  \" resource - groups . max - refresh - interval \"  ,     \"  1 m \"  )  . put (  \" resource - groups . exact - match - selector - enabled \"  ,     \" true \"  )  . build (  )  ;", "expected    =    new    (  )  . setConfigDbUrl (  \" jdbc : mysql /  / localhost :  3  3  0  6  / config ? user = presto _ admin \"  )  . setMaxRefreshInterval ( new   Duration (  1  ,    TimeUnit . MINUTES )  )  . setExactMatchSelectorEnabled ( true )  ;", "assertFullMapping ( properties ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testExplicitPropertyMappings"], "fileName": "com.facebook.presto.resourceGroups.db.TestDbResourceGroupConfig"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( group . getSoftMemoryLimit (  )  ,    DataSize . valueOf ( softMemoryLimit )  )  ;", "assertEquals ( group . getMaxQueuedQueries (  )  ,    maxQueued )  ;", "assertEquals ( group . getHardConcurrencyLimit (  )  ,    hardConcurrencyLimit )  ;", "assertEquals ( group . getSoftConcurrencyLimit (  )  ,    softConcurrencyLimit )  ;", "assertEquals ( group . getSchedulingPolicy (  )  ,    schedulingPolicy )  ;", "assertEquals ( group . getSchedulingWeight (  )  ,    schedulingWeight )  ;", "assertEquals ( group . getJmxExport (  )  ,    jmxExport )  ;", "assertEquals ( group . getSoftCpuLimit (  )  ,    softCpuLimit )  ;", "assertEquals ( group . getHardCpuLimit (  )  ,    hardCpuLimit )  ;", "assertEquals ( group . getQueuedTimeLimit (  )  ,    queuedTimeLimit )  ;", "assertEquals ( group . getRunningTimeLimit (  )  ,    runningTimeLimit )  ;", "}", "METHOD_END"], "methodName": ["assertEqualsResourceGroup"], "fileName": "com.facebook.presto.resourceGroups.db.TestDbResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "DbResourceGroupConfig   config    =    new   DbResourceGroupConfig (  )  . setConfigDbUrl (  (  (  \" jdbc : h 2  : mem : test _  \"     +    prefix )     +     ( System . nanoTime (  )  )  )  )  ;", "return   new   H 2 DaoProvider ( config )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.resourceGroups.db.TestDbResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "H 2 DaoProvider   daoProvider    =    TestDbResourceGroupConfigurationManager . setup (  \" test _ configuration \"  )  ;", "H 2 ResourceGroupsDao   dao    =    daoProvider . get (  )  ;", "dao . createResourceGroupsGlobalPropertiesTable (  )  ;", "dao . createResourceGroupsTable (  )  ;", "dao . createSelectorsTable (  )  ;", "dao . insertResourceGroupsGlobalProperties (  \" cpu _ quota _ period \"  ,     \"  1 h \"  )  ;", "dao . insertResourceGroup (  1  ,     \" global \"  ,     \"  1 MB \"  ,     1  0  0  0  ,     1  0  0  ,     1  0  0  ,     \" weighted \"  ,    null ,    true ,     \"  1 h \"  ,     \"  1 d \"  ,     \"  1 h \"  ,     \"  1 h \"  ,    null ,    TestDbResourceGroupConfigurationManager . ENVIRONMENT )  ;", "dao . insertResourceGroup (  2  ,     \" sub \"  ,     \"  2 MB \"  ,     4  ,     3  ,     3  ,    null ,     5  ,    null ,    null ,    null ,     \"  1 h \"  ,     \"  1 h \"  ,     1 L ,    TestDbResourceGroupConfigurationManager . ENVIRONMENT )  ;", "dao . insertSelector (  2  ,     1  ,    null ,    null ,    null ,    null )  ;", "DbResourceGroupConfigurationManager   manager    =    new   DbResourceGroupConfigurationManager (  (    poolId ,    listener )     -  >     {", "}  ,    new   DbResourceGroupConfig (  )  ,    daoProvider . get (  )  ,    TestDbResourceGroupConfigurationManager . ENVIRONMENT )  ;", "AtomicBoolean   exported    =    new   AtomicBoolean (  )  ;", "InternalResourceGroup   global    =    new   InternalResourceGroup . RootInternalResourceGroup (  \" global \"  ,     (    group ,    export )     -  >    exported . set ( export )  ,    directExecutor (  )  )  ;", "manager . configure ( global ,    new   com . facebook . presto . spi . resourceGroups . SelectionContext ( global . getId (  )  ,    new   VariableMap ( ImmutableMap . of (  \" USER \"  ,     \" user \"  )  )  )  )  ;", "TestDbResourceGroupConfigurationManager . assertEqualsResourceGroup ( global ,     \"  1 MB \"  ,     1  0  0  0  ,     1  0  0  ,     1  0  0  ,    WEIGHTED ,    DEFAULT _ WEIGHT ,    true ,    new   Duration (  1  ,    TimeUnit . HOURS )  ,    new   Duration (  1  ,    TimeUnit . DAYS )  ,    new   Duration (  1  ,    TimeUnit . HOURS )  ,    new   Duration (  1  ,    TimeUnit . HOURS )  )  ;", "exported . set ( false )  ;", "InternalResourceGroup   sub    =    global . getOrCreateSubGroup (  \" sub \"  )  ;", "manager . configure ( sub ,    new   com . facebook . presto . spi . resourceGroups . SelectionContext ( sub . getId (  )  ,    new   VariableMap ( ImmutableMap . of (  \" USER \"  ,     \" user \"  )  )  )  )  ;", "TestDbResourceGroupConfigurationManager . assertEqualsResourceGroup ( sub ,     \"  2 MB \"  ,     4  ,     3  ,     3  ,    FAIR ,     5  ,    false ,    new   Duration ( Long . MAX _ VALUE ,    TimeUnit . MILLISECONDS )  ,    new   Duration ( Long . MAX _ VALUE ,    TimeUnit . MILLISECONDS )  ,    new   Duration (  1  ,    TimeUnit . HOURS )  ,    new   Duration (  1  ,    TimeUnit . HOURS )  )  ;", "}", "METHOD_END"], "methodName": ["testConfiguration"], "fileName": "com.facebook.presto.resourceGroups.db.TestDbResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "H 2 DaoProvider   daoProvider    =    TestDbResourceGroupConfigurationManager . setup (  \" test _ dup _ roots \"  )  ;", "H 2 ResourceGroupsDao   dao    =    daoProvider . get (  )  ;", "dao . createResourceGroupsGlobalPropertiesTable (  )  ;", "dao . createResourceGroupsTable (  )  ;", "dao . createSelectorsTable (  )  ;", "dao . insertResourceGroup (  1  ,     \" global \"  ,     \"  1 MB \"  ,     1  0  0  0  ,     1  0  0  ,     1  0  0  ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    TestDbResourceGroupConfigurationManager . ENVIRONMENT )  ;", "try    {", "dao . insertResourceGroup (  1  ,     \" global \"  ,     \"  1 MB \"  ,     1  0  0  0  ,     1  0  0  ,     1  0  0  ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    TestDbResourceGroupConfigurationManager . ENVIRONMENT )  ;", "fail (  \" Expected   to   fail \"  )  ;", "}    catch    ( RuntimeException   ex )     {", "assertTrue (  ( ex   instanceof   UnableToExecuteStatementException )  )  ;", "assertTrue (  (  ( ex . getCause (  )  )    instanceof   JdbcSQLException )  )  ;", "assertTrue ( ex . getCause (  )  . getMessage (  )  . startsWith (  \" Unique   index   or   primary   key   violation \"  )  )  ;", "}", "dao . insertSelector (  1  ,     1  ,    null ,    null ,    null ,    null )  ;", "daoProvider    =    TestDbResourceGroupConfigurationManager . setup (  \" test _ dup _ subs \"  )  ;", "dao    =    daoProvider . get (  )  ;", "dao . createResourceGroupsGlobalPropertiesTable (  )  ;", "dao . createResourceGroupsTable (  )  ;", "dao . createSelectorsTable (  )  ;", "dao . insertResourceGroup (  1  ,     \" global \"  ,     \"  1 MB \"  ,     1  0  0  0  ,     1  0  0  ,     1  0  0  ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    TestDbResourceGroupConfigurationManager . ENVIRONMENT )  ;", "dao . insertResourceGroup (  2  ,     \" sub \"  ,     \"  1 MB \"  ,     1  0  0  0  ,     1  0  0  ,     1  0  0  ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,     1 L ,    TestDbResourceGroupConfigurationManager . ENVIRONMENT )  ;", "try    {", "dao . insertResourceGroup (  2  ,     \" sub \"  ,     \"  1 MB \"  ,     1  0  0  0  ,     1  0  0  ,     1  0  0  ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,     1 L ,    TestDbResourceGroupConfigurationManager . ENVIRONMENT )  ;", "}    catch    ( RuntimeException   ex )     {", "assertTrue (  ( ex   instanceof   UnableToExecuteStatementException )  )  ;", "assertTrue (  (  ( ex . getCause (  )  )    instanceof   JdbcSQLException )  )  ;", "assertTrue ( ex . getCause (  )  . getMessage (  )  . startsWith (  \" Unique   index   or   primary   key   violation \"  )  )  ;", "}", "dao . insertSelector (  2  ,     2  ,    null ,    null ,    null ,    null )  ;", "}", "METHOD_END"], "methodName": ["testDuplicates"], "fileName": "com.facebook.presto.resourceGroups.db.TestDbResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "H 2 DaoProvider   daoProvider    =    TestDbResourceGroupConfigurationManager . setup (  \" test _ configuration \"  )  ;", "H 2 ResourceGroupsDao   dao    =    daoProvider . get (  )  ;", "dao . createResourceGroupsGlobalPropertiesTable (  )  ;", "dao . createResourceGroupsTable (  )  ;", "dao . createSelectorsTable (  )  ;", "String   prodEnvironment    =     \" prod \"  ;", "String   devEnvironment    =     \" dev \"  ;", "dao . insertResourceGroupsGlobalProperties (  \" cpu _ quota _ period \"  ,     \"  1 h \"  )  ;", "dao . insertResourceGroup (  1  ,     \" prod _ global \"  ,     \"  1  0 MB \"  ,     1  0  0  0  ,     1  0  0  ,     1  0  0  ,     \" weighted \"  ,    null ,    true ,     \"  1 h \"  ,     \"  1 d \"  ,     \"  1 h \"  ,     \"  1 h \"  ,    null ,    prodEnvironment )  ;", "dao . insertResourceGroup (  2  ,     \" dev _ global \"  ,     \"  1 MB \"  ,     1  0  0  0  ,     1  0  0  ,     1  0  0  ,     \" weighted \"  ,    null ,    true ,     \"  1 h \"  ,     \"  1 d \"  ,     \"  1 h \"  ,     \"  1 h \"  ,    null ,    devEnvironment )  ;", "dao . insertSelector (  1  ,     1  ,     \"  .  * prod _ user .  *  \"  ,    null ,    null ,    null )  ;", "dao . insertSelector (  2  ,     2  ,     \"  .  * dev _ user .  *  \"  ,    null ,    null ,    null )  ;", "DbResourceGroupConfigurationManager   manager    =    new   DbResourceGroupConfigurationManager (  (    poolId ,    listener )     -  >     {", "}  ,    new   DbResourceGroupConfig (  )  ,    daoProvider . get (  )  ,    prodEnvironment )  ;", "List < ResourceGroupSpec >    groups    =    manager . getRootGroups (  )  ;", "assertEquals ( groups . size (  )  ,     1  )  ;", "InternalResourceGroup   prodGlobal    =    new   InternalResourceGroup . RootInternalResourceGroup (  \" prod _ global \"  ,     (    group ,    export )     -  >     {", "}  ,    directExecutor (  )  )  ;", "manager . configure ( prodGlobal ,    new   com . facebook . presto . spi . resourceGroups . SelectionContext ( prodGlobal . getId (  )  ,    new   VariableMap ( ImmutableMap . of (  \" USER \"  ,     \" user \"  )  )  )  )  ;", "TestDbResourceGroupConfigurationManager . assertEqualsResourceGroup ( prodGlobal ,     \"  1  0 MB \"  ,     1  0  0  0  ,     1  0  0  ,     1  0  0  ,    WEIGHTED ,    DEFAULT _ WEIGHT ,    true ,    new   Duration (  1  ,    TimeUnit . HOURS )  ,    new   Duration (  1  ,    TimeUnit . DAYS )  ,    new   Duration (  1  ,    TimeUnit . HOURS )  ,    new   Duration (  1  ,    TimeUnit . HOURS )  )  ;", "assertEquals ( manager . getSelectors (  )  . size (  )  ,     1  )  ;", "ResourceGroupSelector   prodSelector    =    manager . getSelectors (  )  . get (  0  )  ;", "ResourceGroupId   prodResourceGroupId    =    prodSelector . match ( new   com . facebook . presto . spi . resourceGroups . SelectionCriteria ( true ,     \" prod _ user \"  ,    Optional . empty (  )  ,    ImmutableSet . of (  )  ,    Optional . empty (  )  )  )  . get (  )  . getResourceGroupId (  )  ;", "assertEquals ( prodResourceGroupId . toString (  )  ,     \" prod _ global \"  )  ;", "manager    =    new   DbResourceGroupConfigurationManager (  (    poolId ,    listener )     -  >     {", "}  ,    new   DbResourceGroupConfig (  )  ,    daoProvider . get (  )  ,    devEnvironment )  ;", "assertEquals ( groups . size (  )  ,     1  )  ;", "InternalResourceGroup   devGlobal    =    new   InternalResourceGroup . RootInternalResourceGroup (  \" dev _ global \"  ,     (    group ,    export )     -  >     {", "}  ,    directExecutor (  )  )  ;", "manager . configure ( devGlobal ,    new   com . facebook . presto . spi . resourceGroups . SelectionContext ( prodGlobal . getId (  )  ,    new   VariableMap ( ImmutableMap . of (  \" USER \"  ,     \" user \"  )  )  )  )  ;", "TestDbResourceGroupConfigurationManager . assertEqualsResourceGroup ( devGlobal ,     \"  1 MB \"  ,     1  0  0  0  ,     1  0  0  ,     1  0  0  ,    WEIGHTED ,    DEFAULT _ WEIGHT ,    true ,    new   Duration (  1  ,    TimeUnit . HOURS )  ,    new   Duration (  1  ,    TimeUnit . DAYS )  ,    new   Duration (  1  ,    TimeUnit . HOURS )  ,    new   Duration (  1  ,    TimeUnit . HOURS )  )  ;", "assertEquals ( manager . getSelectors (  )  . size (  )  ,     1  )  ;", "ResourceGroupSelector   devSelector    =    manager . getSelectors (  )  . get (  0  )  ;", "ResourceGroupId   devResourceGroupId    =    devSelector . match ( new   com . facebook . presto . spi . resourceGroups . SelectionCriteria ( true ,     \" dev _ user \"  ,    Optional . empty (  )  ,    ImmutableSet . of (  )  ,    Optional . empty (  )  )  )  . get (  )  . getResourceGroupId (  )  ;", "assertEquals ( devResourceGroupId . toString (  )  ,     \" dev _ global \"  )  ;", "}", "METHOD_END"], "methodName": ["testEnvironments"], "fileName": "com.facebook.presto.resourceGroups.db.TestDbResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "H 2 DaoProvider   daoProvider    =    TestDbResourceGroupConfigurationManager . setup (  \" test _ exact _ match _ selector \"  )  ;", "H 2 ResourceGroupsDao   dao    =    daoProvider . get (  )  ;", "dao . createResourceGroupsGlobalPropertiesTable (  )  ;", "dao . createResourceGroupsTable (  )  ;", "dao . createSelectorsTable (  )  ;", "dao . createExactMatchSelectorsTable (  )  ;", "dao . insertResourceGroup (  1  ,     \" global \"  ,     \"  1 MB \"  ,     1  0  0  0  ,     1  0  0  ,     1  0  0  ,     \" weighted \"  ,    null ,    true ,     \"  1 h \"  ,     \"  1 d \"  ,    null ,    null ,    null ,    TestDbResourceGroupConfigurationManager . ENVIRONMENT )  ;", "dao . insertResourceGroup (  2  ,     \" sub \"  ,     \"  2 MB \"  ,     4  ,     3  ,     3  ,    null ,     5  ,    null ,    null ,    null ,    null ,    null ,     1 L ,    TestDbResourceGroupConfigurationManager . ENVIRONMENT )  ;", "dao . insertSelector (  2  ,     1  ,    null ,    null ,    null ,    null )  ;", "dao . insertResourceGroupsGlobalProperties (  \" cpu _ quota _ period \"  ,     \"  1 h \"  )  ;", "DbResourceGroupConfig   config    =    new   DbResourceGroupConfig (  )  ;", "config . setExactMatchSelectorEnabled ( true )  ;", "DbResourceGroupConfigurationManager   manager    =    new   DbResourceGroupConfigurationManager (  (    poolId ,    listener )     -  >     {", "}  ,    config ,    daoProvider . get (  )  ,    TestDbResourceGroupConfigurationManager . ENVIRONMENT )  ;", "manager . load (  )  ;", "assertEquals ( manager . getSelectors (  )  . size (  )  ,     2  )  ;", "assertTrue (  (  ( manager . getSelectors (  )  . get (  0  )  )    instanceof   DbSourceExactMatchSelector )  )  ;", "config . setExactMatchSelectorEnabled ( false )  ;", "manager    =    new   DbResourceGroupConfigurationManager (  (    poolId ,    listener )     -  >     {", "}  ,    config ,    daoProvider . get (  )  ,    TestDbResourceGroupConfigurationManager . ENVIRONMENT )  ;", "manager . load (  )  ;", "assertEquals ( manager . getSelectors (  )  . size (  )  ,     1  )  ;", "assertFalse (  (  ( manager . getSelectors (  )  . get (  0  )  )    instanceof   DbSourceExactMatchSelector )  )  ;", "}", "METHOD_END"], "methodName": ["testExactMatchSelector"], "fileName": "com.facebook.presto.resourceGroups.db.TestDbResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "H 2 DaoProvider   daoProvider    =    TestDbResourceGroupConfigurationManager . setup (  \" selectors \"  )  ;", "H 2 ResourceGroupsDao   dao    =    daoProvider . get (  )  ;", "dao . createResourceGroupsTable (  )  ;", "dao . createSelectorsTable (  )  ;", "dao . insertResourceGroup (  1  ,     \" global \"  ,     \"  1  0  0  %  \"  ,     1  0  0  ,     1  0  0  ,     1  0  0  ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    TestDbResourceGroupConfigurationManager . ENVIRONMENT )  ;", "DbResourceGroupConfigurationManager   manager    =    new   DbResourceGroupConfigurationManager (  (    poolId ,    listener )     -  >     {", "}  ,    new   DbResourceGroupConfig (  )  . setMaxRefreshInterval ( Duration . valueOf (  \"  1 ms \"  )  )  ,    daoProvider . get (  )  ,    TestDbResourceGroupConfigurationManager . ENVIRONMENT )  ;", "manager . getSelectors (  )  ;", "}", "METHOD_END"], "methodName": ["testInvalidConfiguration"], "fileName": "com.facebook.presto.resourceGroups.db.TestDbResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "H 2 DaoProvider   daoProvider    =    TestDbResourceGroupConfigurationManager . setup (  \" test _ missing \"  )  ;", "H 2 ResourceGroupsDao   dao    =    daoProvider . get (  )  ;", "dao . createResourceGroupsGlobalPropertiesTable (  )  ;", "dao . createResourceGroupsTable (  )  ;", "dao . createSelectorsTable (  )  ;", "dao . insertResourceGroup (  1  ,     \" global \"  ,     \"  1 MB \"  ,     1  0  0  0  ,     1  0  0  ,     1  0  0  ,     \" weighted \"  ,    null ,    true ,     \"  1 h \"  ,     \"  1 d \"  ,    null ,    null ,    null ,    TestDbResourceGroupConfigurationManager . ENVIRONMENT )  ;", "dao . insertResourceGroup (  2  ,     \" sub \"  ,     \"  2 MB \"  ,     4  ,     3  ,     3  ,    null ,     5  ,    null ,    null ,    null ,    null ,    null ,     1 L ,    TestDbResourceGroupConfigurationManager . ENVIRONMENT )  ;", "dao . insertResourceGroupsGlobalProperties (  \" cpu _ quota _ period \"  ,     \"  1 h \"  )  ;", "dao . insertSelector (  2  ,     1  ,    null ,    null ,    null ,    null )  ;", "DbResourceGroupConfigurationManager   manager    =    new   DbResourceGroupConfigurationManager (  (    poolId ,    listener )     -  >     {", "}  ,    new   DbResourceGroupConfig (  )  ,    daoProvider . get (  )  ,    TestDbResourceGroupConfigurationManager . ENVIRONMENT )  ;", "InternalResourceGroup   missing    =    new   InternalResourceGroup . RootInternalResourceGroup (  \" missing \"  ,     (    group ,    export )     -  >     {", "}  ,    directExecutor (  )  )  ;", "manager . configure ( missing ,    new   com . facebook . presto . spi . resourceGroups . SelectionContext ( missing . getId (  )  ,    new   VariableMap ( ImmutableMap . of (  \" USER \"  ,     \" user \"  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testMissing"], "fileName": "com.facebook.presto.resourceGroups.db.TestDbResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "H 2 DaoProvider   daoProvider    =    TestDbResourceGroupConfigurationManager . setup (  \" test _ reconfig \"  )  ;", "H 2 ResourceGroupsDao   dao    =    daoProvider . get (  )  ;", "dao . createResourceGroupsGlobalPropertiesTable (  )  ;", "dao . createResourceGroupsTable (  )  ;", "dao . createSelectorsTable (  )  ;", "dao . insertResourceGroup (  1  ,     \" global \"  ,     \"  1 MB \"  ,     1  0  0  0  ,     1  0  0  ,     1  0  0  ,     \" weighted \"  ,    null ,    true ,     \"  1 h \"  ,     \"  1 d \"  ,    null ,    null ,    null ,    TestDbResourceGroupConfigurationManager . ENVIRONMENT )  ;", "dao . insertResourceGroup (  2  ,     \" sub \"  ,     \"  2 MB \"  ,     4  ,     3  ,     3  ,    null ,     5  ,    null ,    null ,    null ,    null ,    null ,     1 L ,    TestDbResourceGroupConfigurationManager . ENVIRONMENT )  ;", "dao . insertSelector (  2  ,     1  ,    null ,    null ,    null ,    null )  ;", "dao . insertResourceGroupsGlobalProperties (  \" cpu _ quota _ period \"  ,     \"  1 h \"  )  ;", "DbResourceGroupConfigurationManager   manager    =    new   DbResourceGroupConfigurationManager (  (    poolId ,    listener )     -  >     {", "}  ,    new   DbResourceGroupConfig (  )  ,    daoProvider . get (  )  ,    TestDbResourceGroupConfigurationManager . ENVIRONMENT )  ;", "manager . start (  )  ;", "AtomicBoolean   exported    =    new   AtomicBoolean (  )  ;", "InternalResourceGroup   global    =    new   InternalResourceGroup . RootInternalResourceGroup (  \" global \"  ,     (    group ,    export )     -  >    exported . set ( export )  ,    directExecutor (  )  )  ;", "manager . configure ( global ,    new   com . facebook . presto . spi . resourceGroups . SelectionContext ( global . getId (  )  ,    new   VariableMap ( ImmutableMap . of (  \" USER \"  ,     \" user \"  )  )  )  )  ;", "InternalResourceGroup   globalSub    =    global . getOrCreateSubGroup (  \" sub \"  )  ;", "manager . configure ( globalSub ,    new   com . facebook . presto . spi . resourceGroups . SelectionContext ( globalSub . getId (  )  ,    new   VariableMap ( ImmutableMap . of (  \" USER \"  ,     \" user \"  )  )  )  )  ;", "TestDbResourceGroupConfigurationManager . assertEqualsResourceGroup ( globalSub ,     \"  2 MB \"  ,     4  ,     3  ,     3  ,    FAIR ,     5  ,    false ,    new   Duration ( Long . MAX _ VALUE ,    TimeUnit . MILLISECONDS )  ,    new   Duration ( Long . MAX _ VALUE ,    TimeUnit . MILLISECONDS )  ,    new   Duration ( Long . MAX _ VALUE ,    TimeUnit . MILLISECONDS )  ,    new   Duration ( Long . MAX _ VALUE ,    TimeUnit . MILLISECONDS )  )  ;", "dao . updateResourceGroup (  2  ,     \" sub \"  ,     \"  3 MB \"  ,     2  ,     1  ,     1  ,     \" weighted \"  ,     6  ,    true ,     \"  1 h \"  ,     \"  1 d \"  ,    null ,    null ,     1 L ,    TestDbResourceGroupConfigurationManager . ENVIRONMENT )  ;", "do    {", "TimeUnit . MILLISECONDS . sleep (  5  0  0  )  ;", "}    while    (  ( globalSub . getJmxExport (  )  )     =  =    false    )  ;", "TestDbResourceGroupConfigurationManager . assertEqualsResourceGroup ( globalSub ,     \"  3 MB \"  ,     2  ,     1  ,     1  ,    WEIGHTED ,     6  ,    true ,    new   Duration (  1  ,    TimeUnit . HOURS )  ,    new   Duration (  1  ,    TimeUnit . DAYS )  ,    new   Duration ( Long . MAX _ VALUE ,    TimeUnit . MILLISECONDS )  ,    new   Duration ( Long . MAX _ VALUE ,    TimeUnit . MILLISECONDS )  )  ;", "dao . deleteSelectors (  2  )  ;", "dao . deleteResourceGroup (  2  )  ;", "do    {", "TimeUnit . MILLISECONDS . sleep (  5  0  0  )  ;", "}    while    (  (  ( globalSub . getMaxQueuedQueries (  )  )     !  =     0  )     |  |     (  ( globalSub . getHardConcurrencyLimit (  )  )     !  =     0  )     )  ;", "}", "METHOD_END"], "methodName": ["testReconfig"], "fileName": "com.facebook.presto.resourceGroups.db.TestDbResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "H 2 DaoProvider   daoProvider    =    TestDbResourceGroupConfigurationManager . setup (  \" selectors \"  )  ;", "H 2 ResourceGroupsDao   dao    =    daoProvider . get (  )  ;", "dao . createResourceGroupsTable (  )  ;", "dao . createSelectorsTable (  )  ;", "dao . insertResourceGroup (  1  ,     \" global \"  ,     \"  1  0  0  %  \"  ,     1  0  0  ,     1  0  0  ,     1  0  0  ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    TestDbResourceGroupConfigurationManager . ENVIRONMENT )  ;", "DbResourceGroupConfigurationManager   manager    =    new   DbResourceGroupConfigurationManager (  (    poolId ,    listener )     -  >     {", "}  ,    new   DbResourceGroupConfig (  )  . setMaxRefreshInterval ( Duration . valueOf (  \"  1 ms \"  )  )  ,    daoProvider . get (  )  ,    TestDbResourceGroupConfigurationManager . ENVIRONMENT )  ;", "dao . dropSelectorsTable (  )  ;", "manager . load (  )  ;", "try    {", "manager . getSelectors (  )  ;", "fail (  \" Expected   unavailable   configuration   exception \"  )  ;", "}    catch    ( Exception   e )     {", "assertEquals ( e . getMessage (  )  ,     \" Selectors   cannot   be   fetched   from   database \"  )  ;", "}", "try    {", "manager . getRootGroups (  )  ;", "fail (  \" Expected   unavailable   configuration   exception \"  )  ;", "}    catch    ( Exception   e )     {", "assertEquals ( e . getMessage (  )  ,     \" Root   groups   cannot   be   fetched   from   database \"  )  ;", "}", "manager . destroy (  )  ;", "}", "METHOD_END"], "methodName": ["testRefreshInterval"], "fileName": "com.facebook.presto.resourceGroups.db.TestDbResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "H 2 DaoProvider   daoProvider    =    TestDbResourceGroupConfigurationManager . setup (  \" selectors \"  )  ;", "H 2 ResourceGroupsDao   dao    =    daoProvider . get (  )  ;", "dao . createResourceGroupsTable (  )  ;", "dao . createSelectorsTable (  )  ;", "dao . insertResourceGroup (  1  ,     \" global \"  ,     \"  1  0  0  %  \"  ,     1  0  0  ,     1  0  0  ,     1  0  0  ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    TestDbResourceGroupConfigurationManager . ENVIRONMENT )  ;", "final   int   numberOfUsers    =     1  0  0  ;", "List < String >    expectedUsers    =    new   ArrayList <  >  (  )  ;", "int [  ]    randomPriorities    =    ThreadLocalRandom . current (  )  . ints (  0  ,     1  0  0  0  )  . distinct (  )  . limit ( numberOfUsers )  . toArray (  )  ;", "for    ( int   i    =     0  ;    i    <    numberOfUsers ;    i +  +  )     {", "int   priority    =    randomPriorities [ i ]  ;", "String   user    =    String . valueOf ( priority )  ;", "dao . insertSelector (  1  ,    priority ,    user ,     \"  .  *  \"  ,    null ,    null )  ;", "expectedUsers . add ( user )  ;", "}", "DbResourceGroupConfigurationManager   manager    =    new   DbResourceGroupConfigurationManager (  (    poolId ,    listener )     -  >     {", "}  ,    new   DbResourceGroupConfig (  )  ,    daoProvider . get (  )  ,    TestDbResourceGroupConfigurationManager . ENVIRONMENT )  ;", "manager . load (  )  ;", "List < ResourceGroupSelector >    selectors    =    manager . getSelectors (  )  ;", "assertEquals ( selectors . size (  )  ,    expectedUsers . size (  )  )  ;", "expectedUsers . sort ( Comparator .  < String > comparingInt ( Integer :  : parseInt )  . reversed (  )  )  ;", "for    ( int   i    =     0  ;    i    <    numberOfUsers ;    i +  +  )     {", "Optional < Pattern >    user    =     (  ( StaticSelector )     ( selectors . get ( i )  )  )  . getUserRegex (  )  ;", "assertTrue ( user . isPresent (  )  )  ;", "assertEquals ( user . get (  )  . pattern (  )  ,    expectedUsers . get ( i )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testSelectorPriority"], "fileName": "com.facebook.presto.resourceGroups.db.TestDbResourceGroupConfigurationManager"}, {"methodBody": ["METHOD_START", "{", "DbResourceGroupConfig   config    =    new   DbResourceGroupConfig (  )  . setConfigDbUrl (  (  \" jdbc : h 2  : mem : test _ db - exact - match - selector \"     +     ( System . nanoTime (  )  )  )  )  ;", "dao    =    new   H 2 DaoProvider ( config )  . get (  )  ;", "dao . creatsTable (  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.resourceGroups.db.TestDbSourceExactMatchSelector"}, {"methodBody": ["METHOD_START", "{", "ResourceGroupId   resourceGroupId 1     =    new   ResourceGroupId ( ImmutableList . of (  \" global \"  ,     \" test \"  ,     \" user \"  ,     \" insert \"  )  )  ;", "ResourceGroupId   resourceGroupId 2     =    new   ResourceGroupId ( ImmutableList . of (  \" global \"  ,     \" test \"  ,     \" user \"  ,     \" select \"  )  )  ;", "dao . insertExactMatchSelector (  \" test \"  ,     \"  @ test @ test _ pipeline \"  ,    INSERT . name (  )  ,     . CODEC . toJson ( resourceGroupId 1  )  )  ;", "dao . insertExactMatchSelector (  \" test \"  ,     \"  @ test @ test _ pipeline \"  ,    SELECT . name (  )  ,     . CODEC . toJson ( resourceGroupId 2  )  )  ;", "DbSourceExactMatchSelector   selector    =    new   DbSourceExactMatchSelector (  \" test \"  ,    dao )  ;", "assertEquals ( selector . match ( new   com . facebook . presto . spi . resourceGroups . SelectionCriteria ( true ,     \" testuser \"  ,    Optional . of (  \"  @ test @ test _ pipeline \"  )  ,    ImmutableSet . of (  \" tag \"  )  ,    Optional . empty (  )  )  )  ,    Optional . empty (  )  )  ;", "assertEquals ( selector . match ( new   com . facebook . presto . spi . resourceGroups . SelectionCriteria ( true ,     \" testuser \"  ,    Optional . of (  \"  @ test @ test _ pipeline \"  )  ,    ImmutableSet . of (  \" tag \"  )  ,    Optional . of ( INSERT . name (  )  )  )  )  . map ( SelectionContext :  : getResourceGroupId )  ,    Optional . of ( resourceGroupId 1  )  )  ;", "assertEquals ( selector . match ( new   com . facebook . presto . spi . resourceGroups . SelectionCriteria ( true ,     \" testuser \"  ,    Optional . of (  \"  @ test @ test _ pipeline \"  )  ,    ImmutableSet . of (  \" tag \"  )  ,    Optional . of ( SELECT . name (  )  )  )  )  . map ( SelectionContext :  : getResourceGroupId )  ,    Optional . of ( resourceGroupId 2  )  )  ;", "assertEquals ( selector . match ( new   com . facebook . presto . spi . resourceGroups . SelectionCriteria ( true ,     \" testuser \"  ,    Optional . of (  \"  @ test @ test _ pipeline \"  )  ,    ImmutableSet . of (  \" tag \"  )  ,    Optional . of ( DELETE . name (  )  )  )  )  ,    Optional . empty (  )  )  ;", "assertEquals ( selector . match ( new   com . facebook . presto . spi . resourceGroups . SelectionCriteria ( true ,     \" testuser \"  ,    Optional . of (  \"  @ test @ test _ new \"  )  ,    ImmutableSet . of (  )  ,    Optional . of ( INSERT . name (  )  )  )  )  ,    Optional . empty (  )  )  ;", "}", "METHOD_END"], "methodName": ["testMatch"], "fileName": "com.facebook.presto.resourceGroups.db.TestDbSourceExactMatchSelector"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( map . size (  )  ,    records . size (  )  )  ;", "for    ( SpecBuilder   record    :    records )     {", "SpecBuilder   expected    =    map . get ( record . getId (  )  )  ;", "assertEquals ( record . build (  )  ,    expected . build (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["compareResourceGroups"], "fileName": "com.facebook.presto.resourceGroups.db.TestResourceGroupsDao"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( map . size (  )  ,    records . size (  )  )  ;", "for    ( SelectorRecord   record    :    records )     {", "SelectorRecord   expected    =    map . get ( record . geId (  )  )  ;", "assertEquals ( record . geId (  )  ,    expected . geId (  )  )  ;", "assertEquals ( record . getUserRegex (  )  . map ( Pattern :  : pattern )  ,    expected . getUserRegex (  )  . map ( Pattern :  : pattern )  )  ;", "assertEquals ( record . getSourceRegex (  )  . map ( Pattern :  : pattern )  ,    expected . getSourceRegex (  )  . map ( Pattern :  : pattern )  )  ;", "}", "}", "METHOD_END"], "methodName": ["compareSelectors"], "fileName": "com.facebook.presto.resourceGroups.db.TestResourceGroupsDao"}, {"methodBody": ["METHOD_START", "{", "DbResourceGroupConfig   config    =    new   DbResourceGroupConfig (  )  . setConfigDbUrl (  (  (  \" jdbc : h 2  : mem : test _  \"     +    prefix )     +     ( System . nanoTime (  )  )  )  )  ;", "return   new   H 2 DaoProvider ( config )  . get (  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.resourceGroups.db.TestResourceGroupsDao"}, {"methodBody": ["METHOD_START", "{", "H 2 ResourceGroupsDao   dao    =    TestResourceGroupsDao . setup (  \" exact _ match _ selector \"  )  ;", "dao . createExactMatchSelectorsTable (  )  ;", "ResourceGroupId   resourceGroupId 1     =    new   ResourceGroupId ( ImmutableList . of (  \" global \"  ,     \" test \"  ,     \" user \"  ,     \" insert \"  )  )  ;", "ResourceGroupId   resourceGroupId 2     =    new   ResourceGroupId ( ImmutableList . of (  \" global \"  ,     \" test \"  ,     \" user \"  ,     \" select \"  )  )  ;", "JsonCodec < ResourceGroupId >    codec    =    JsonCodec . jsonCodec ( ResourceGroupId . class )  ;", "dao . insertExactMatchSelector (  \" test \"  ,     \"  @ test @ test _ pipeline \"  ,    INSERT . name (  )  ,    codec . toJson ( resourceGroupId 1  )  )  ;", "dao . insertExactMatchSelector (  \" test \"  ,     \"  @ test @ test _ pipeline \"  ,    SELECT . name (  )  ,    codec . toJson ( resourceGroupId 2  )  )  ;", "assertNull ( dao . getExactMatchResourceGroup (  \" test \"  ,     \"  @ test @ test _ pipeline \"  ,    null )  )  ;", "assertEquals ( dao . getExactMatchResourceGroup (  \" test \"  ,     \"  @ test @ test _ pipeline \"  ,    INSERT . name (  )  )  ,    codec . toJson ( resourceGroupId 1  )  )  ;", "assertEquals ( dao . getExactMatchResourceGroup (  \" test \"  ,     \"  @ test @ test _ pipeline \"  ,    SELECT . name (  )  )  ,    codec . toJson ( resourceGroupId 2  )  )  ;", "assertNull ( dao . getExactMatchResourceGroup (  \" test \"  ,     \"  @ test @ test _ pipeline \"  ,    DELETE . name (  )  )  )  ;", "assertNull ( dao . getExactMatchResourceGroup (  \" test \"  ,     \" abc \"  ,    INSERT . name (  )  )  )  ;", "assertNull ( dao . getExactMatchResourceGroup (  \" prod \"  ,     \"  @ test @ test _ pipeline \"  ,    INSERT . name (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testExactMatchSelector"], "fileName": "com.facebook.presto.resourceGroups.db.TestResourceGroupsDao"}, {"methodBody": ["METHOD_START", "{", "H 2 ResourceGroupsDao   dao    =    TestResourceGroupsDao . setup (  \" global _ properties \"  )  ;", "dao . createResourceGroupsGlobalPropertiesTable (  )  ;", "dao . insertResourceGroupsGlobalProperties (  \" cpu _ quota _ period \"  ,     \"  1 h \"  )  ;", "ResourceGroupGlobalProperties   globalProperties    =    new   ResourceGroupGlobalProperties ( Optional . of ( Duration . valueOf (  \"  1 h \"  )  )  )  ;", "ResourceGroupGlobalProperties   records    =    dao . getResourceGroupGlobalProperties (  )  . get (  0  )  ;", "assertEquals ( globalProperties ,    records )  ;", "try    {", "dao . insertResourceGroupsGlobalProperties (  \" invalid _ property \"  ,     \"  1 h \"  )  ;", "}    catch    ( UnableToExecuteStatementException   ex )     {", "assertTrue (  (  ( ex . getCause (  )  )    instanceof   JdbcSQLException )  )  ;", "assertTrue ( ex . getCause (  )  . getMessage (  )  . startsWith (  \" Check   constraint   violation :  \"  )  )  ;", "}", "try    {", "dao . updateResourceGroupsGlobalProperties (  \" invalid _ property _ name \"  )  ;", "}    catch    ( UnableToExecuteStatementException   ex )     {", "assertTrue (  (  ( ex . getCause (  )  )    instanceof   JdbcSQLException )  )  ;", "assertTrue ( ex . getCause (  )  . getMessage (  )  . startsWith (  \" Check   constraint   violation :  \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testGlobalResourceGroupProperties"], "fileName": "com.facebook.presto.resourceGroups.db.TestResourceGroupsDao"}, {"methodBody": ["METHOD_START", "{", "dao . deleteResourceGroup (  2  )  ;", "map . remove (  2 L )  ;", ". compareResourceGroups ( map ,    dao . getResourceGroups (  . ENVIRONMENT )  )  ;", "}", "METHOD_END"], "methodName": ["testResourceGroupDelete"], "fileName": "com.facebook.presto.resourceGroups.db.TestResourceGroupsDao"}, {"methodBody": ["METHOD_START", "{", "dao . insertResourceGroup (  1  ,     \" global \"  ,     \"  1  0  0  %  \"  ,     1  0  0  ,     1  0  0  ,     1  0  0  ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    TestResourceGroupsDao . ENVIRONMENT )  ;", "dao . insertResourceGroup (  2  ,     \" bi \"  ,     \"  5  0  %  \"  ,     5  0  ,     5  0  ,     5  0  ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,     1 L ,    TestResourceGroupsDao . ENVIRONMENT )  ;", "List < ResourceGroupSpecBuilder >    records    =    dao . getResourceGroups ( TestResourceGroupsDao . ENVIRONMENT )  ;", "assertEquals ( records . size (  )  ,     2  )  ;", "map . put (  1 L ,    new   ResourceGroupSpecBuilder (  1  ,    new   ResourceGroupNameTemplate (  \" global \"  )  ,     \"  1  0  0  %  \"  ,     1  0  0  ,    Optional . of (  1  0  0  )  ,     1  0  0  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    null )  )  ;", "map . put (  2 L ,    new   ResourceGroupSpecBuilder (  2  ,    new   ResourceGroupNameTemplate (  \" bi \"  )  ,     \"  5  0  %  \"  ,     5  0  ,    Optional . of (  5  0  )  ,     5  0  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . of (  1 L )  )  )  ;", "TestResourceGroupsDao . compareResourceGroups ( map ,    records )  ;", "}", "METHOD_END"], "methodName": ["testResourceGroupInsert"], "fileName": "com.facebook.presto.resourceGroups.db.TestResourceGroupsDao"}, {"methodBody": ["METHOD_START", "{", "dao . updateResourceGroup (  2  ,     \" bi \"  ,     \"  4  0  %  \"  ,     4  0  ,     3  0  ,     3  0  ,    null ,    null ,    true ,    null ,    null ,    null ,    null ,     1 L ,    TestResourceGroupsDao . ENVIRONMENT )  ;", "ResourceGroupSpecBuilder   updated    =    new   ResourceGroupSpecBuilder (  2  ,    new   ResourceGroupNameTemplate (  \" bi \"  )  ,     \"  4  0  %  \"  ,     4  0  ,    Optional . of (  3  0  )  ,     3  0  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . of ( true )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . of (  1 L )  )  ;", "map . put (  2 L ,    updated )  ;", "TestResourceGroupsDao . compareResourceGroups ( map ,    dao . getResourceGroups ( TestResourceGroupsDao . ENVIRONMENT )  )  ;", "}", "METHOD_END"], "methodName": ["testResourceGroupUpdate"], "fileName": "com.facebook.presto.resourceGroups.db.TestResourceGroupsDao"}, {"methodBody": ["METHOD_START", "{", "H 2 ResourceGroupsDao   dao    =    TestResourceGroupsDao . setup (  \" resource _ groups \"  )  ;", "dao . createResourceGroupsTable (  )  ;", "Map < Long ,    ResourceGroupSpecBuilder >    map    =    new   HashMap <  >  (  )  ;", "TestResourceGroupsDao . testResourceGroupInsert ( dao ,    map )  ;", "TestResourceGroupsDao . testResourceGroupUpdate ( dao ,    map )  ;", "TestResourceGroupsDao . testResourceGroupDelete ( dao ,    map )  ;", "}", "METHOD_END"], "methodName": ["testResourceGroups"], "fileName": "com.facebook.presto.resourceGroups.db.TestResourceGroupsDao"}, {"methodBody": ["METHOD_START", "{", "map . remove (  2 L )  ;", "dao . deleteSelector (  2  ,     \" ping .  *  \"  ,     \" ping _ source \"  ,     . LIST _ STRING _ CODEC . toJson ( ImmutableList . of (  \" tag 1  \"  ,     \" tag 2  \"  )  )  )  ;", ". compareSelectors ( map ,    dao . getSelectors (  . ENVIRONMENT )  )  ;", "}", "METHOD_END"], "methodName": ["testSelectorDelete"], "fileName": "com.facebook.presto.resourceGroups.db.TestResourceGroupsDao"}, {"methodBody": ["METHOD_START", "{", "dao . updateSelector (  3  ,    null ,    null ,    null ,     \" admin _ user \"  ,     \"  .  *  \"  ,    TestResourceGroupsDao . LIST _ STRING _ CODEC . toJson ( ImmutableList . of (  \" tag 1  \"  ,     \" tag 2  \"  )  )  )  ;", "SelectorRecord   nullRegexes    =    new   SelectorRecord (  3 L ,     2 L ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  )  ;", "map . put (  3 L ,    nullRegexes )  ;", "TestResourceGroupsDao . compareSelectors ( map ,    dao . getSelectors ( TestResourceGroupsDao . ENVIRONMENT )  )  ;", "dao . deleteSelector (  3  ,    null ,    null ,    null )  ;", "map . remove (  3 L )  ;", "TestResourceGroupsDao . compareSelectors ( map ,    dao . getSelectors ( TestResourceGroupsDao . ENVIRONMENT )  )  ;", "}", "METHOD_END"], "methodName": ["testSelectorDeleteNull"], "fileName": "com.facebook.presto.resourceGroups.db.TestResourceGroupsDao"}, {"methodBody": ["METHOD_START", "{", "map . put (  2 L ,    new   SelectorRecord (  2 L ,     1 L ,    Optional . of ( Pattern . compile (  \" ping _ user \"  )  )  ,    Optional . of ( Pattern . compile (  \"  .  *  \"  )  )  ,    Optional . empty (  )  ,    Optional . empty (  )  )  )  ;", "map . put (  3 L ,    new   SelectorRecord (  3 L ,     2 L ,    Optional . of ( Pattern . compile (  \" admin _ user \"  )  )  ,    Optional . of ( Pattern . compile (  \"  .  *  \"  )  )  ,    Optional . of ( EXPLAIN . name (  )  )  ,    Optional . of ( ImmutableList . of (  \" tag 1  \"  ,     \" tag 2  \"  )  )  )  )  ;", "dao . insertResourceGroup (  1  ,     \" admin \"  ,     \"  1  0  0  %  \"  ,     1  0  0  ,     1  0  0  ,     1  0  0  ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,     . ENVIRONMENT )  ;", "dao . insertResourceGroup (  2  ,     \" ping _ query \"  ,     \"  5  0  %  \"  ,     5  0  ,     5  0  ,     5  0  ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,     1 L ,     . ENVIRONMENT )  ;", "dao . insertResourceGroup (  3  ,     \" config \"  ,     \"  5  0  %  \"  ,     5  0  ,     5  0  ,     5  0  ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,     1 L ,     . ENVIRONMENT )  ;", "dao . insertSelector (  2  ,     1  ,     \" ping _ user \"  ,     \"  .  *  \"  ,    null ,    null )  ;", "dao . insertSelector (  3  ,     2  ,     \" admin _ user \"  ,     \"  .  *  \"  ,    EXPLAIN . name (  )  ,     . LIST _ STRING _ CODEC . toJson ( ImmutableList . of (  \" tag 1  \"  ,     \" tag 2  \"  )  )  )  ;", "List < SelectorRecord >    records    =    dao . getSelectors (  . ENVIRONMENT )  ;", ". compareSelectors ( map ,    records )  ;", "}", "METHOD_END"], "methodName": ["testSelectorInsert"], "fileName": "com.facebook.presto.resourceGroups.db.TestResourceGroupsDao"}, {"methodBody": ["METHOD_START", "{", "if    ( dao    !  =    null )     {", "return ;", "}", "dao . insertSelector (  3  ,     3 L ,     \" user 1  \"  ,     \" pipeline \"  ,    null ,    null )  ;", "map . put (  3 L ,    new   SelectorRecord (  3 L ,     3 L ,    Optional . of ( Pattern . compile (  \" user 1  \"  )  )  ,    Optional . of ( Pattern . compile (  \" pipeline \"  )  )  ,    Optional . empty (  )  ,    Optional . empty (  )  )  )  ;", ". compareSelectors ( map ,    dao . getSelectors (  . ENVIRONMENT )  )  ;", "dao . deleteSelectors (  3 L )  ;", "map . remove (  3 L )  ;", ". compareSelectors ( map ,    dao . getSelectors (  . ENVIRONMENT )  )  ;", "}", "METHOD_END"], "methodName": ["testSelectorMultiDelete"], "fileName": "com.facebook.presto.resourceGroups.db.TestResourceGroupsDao"}, {"methodBody": ["METHOD_START", "{", "dao . updateSelector (  2  ,     \" ping .  *  \"  ,     \" ping _ source \"  ,    TestResourceGroupsDao . LIST _ STRING _ CODEC . toJson ( ImmutableList . of (  \" tag 1  \"  )  )  ,     \" ping _ user \"  ,     \"  .  *  \"  ,    null )  ;", "SelectorRecord   updated    =    new   SelectorRecord (  2  ,     1 L ,    Optional . of ( Pattern . compile (  \" ping .  *  \"  )  )  ,    Optional . of ( Pattern . compile (  \" ping _ source \"  )  )  ,    Optional . empty (  )  ,    Optional . of ( ImmutableList . of (  \" tag 1  \"  )  )  )  ;", "map . put (  2 L ,    updated )  ;", "TestResourceGroupsDao . compareSelectors ( map ,    dao . getSelectors ( TestResourceGroupsDao . ENVIRONMENT )  )  ;", "}", "METHOD_END"], "methodName": ["testSelectorUpdate"], "fileName": "com.facebook.presto.resourceGroups.db.TestResourceGroupsDao"}, {"methodBody": ["METHOD_START", "{", "SelectorRecord   updated    =    new   SelectorRecord (  2  ,     3 L ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  )  ;", "map . put (  2 L ,    updated )  ;", "dao . updateSelector (  2  ,    null ,    null ,    null ,     \" ping .  *  \"  ,     \" ping _ source \"  ,     . LIST _ STRING _ CODEC . toJson ( ImmutableList . of (  \" tag 1  \"  )  )  )  ;", ". compareSelectors ( map ,    dao . getSelectors (  . ENVIRONMENT )  )  ;", "updated    =    new   SelectorRecord (  2  ,     2 L ,    Optional . of ( Pattern . compile (  \" ping .  *  \"  )  )  ,    Optional . of ( Pattern . compile (  \" ping _ source \"  )  )  ,    Optional . of ( EXPLAIN . name (  )  )  ,    Optional . of ( ImmutableList . of (  \" tag 1  \"  ,     \" tag 2  \"  )  )  )  ;", "map . put (  2 L ,    updated )  ;", "dao . updateSelector (  2  ,     \" ping .  *  \"  ,     \" ping _ source \"  ,     . LIST _ STRING _ CODEC . toJson ( ImmutableList . of (  \" tag 1  \"  ,     \" tag 2  \"  )  )  ,    null ,    null ,    null )  ;", ". compareSelectors ( map ,    dao . getSelectors (  . ENVIRONMENT )  )  ;", "}", "METHOD_END"], "methodName": ["testSelectorUpdateNull"], "fileName": "com.facebook.presto.resourceGroups.db.TestResourceGroupsDao"}, {"methodBody": ["METHOD_START", "{", "H 2 ResourceGroupsDao   dao    =    TestResourceGroupsDao . setup (  \" selectors \"  )  ;", "dao . createResourceGroupsTable (  )  ;", "dao . createSelectorsTable (  )  ;", "Map < Long ,    SelectorRecord >    map    =    new   HashMap <  >  (  )  ;", "TestResourceGroupsDao . testSelectorInsert ( dao ,    map )  ;", "TestResourceGroupsDao . testSelectorUpdate ( dao ,    map )  ;", "TestResourceGroupsDao . testSelectorUpdateNull ( dao ,    map )  ;", "TestResourceGroupsDao . testSelectorDelete ( dao ,    map )  ;", "TestResourceGroupsDao . testSelectorDeleteNull ( dao ,    map )  ;", "TestResourceGroupsDao . testSelectorMultiDelete ( dao ,    map )  ;", "}", "METHOD_END"], "methodName": ["testSelectors"], "fileName": "com.facebook.presto.resourceGroups.db.TestResourceGroupsDao"}]