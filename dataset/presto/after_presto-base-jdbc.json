[{"methodBody": ["METHOD_START", "{", "SchemaTableName   schemaTableName    =    tableMetadata . getTable (  )  ;", "String   schema    =    schemaTableName . getSchemaName (  )  ;", "String   table    =    schemaTableName . getTableName (  )  ;", "if    (  !  ( getSchemaNames (  )  . contains ( schema )  )  )     {", "throw   new   PException ( NOT _ FOUND ,     (  \" Schema   not   found :     \"     +    schema )  )  ;", "}", "try    ( Connection   connection    =    connectionFactory . openConnection (  )  )     {", "boolean   uppercase    =    connection . getMetaData (  )  . storesUpperCaseIdentifiers (  )  ;", "if    ( uppercase )     {", "schema    =    schema . toUpperCase ( Locale . ENGLISH )  ;", "table    =    table . toUpperCase ( Locale . ENGLISH )  ;", "}", "String   catalog    =    connection . getCatalog (  )  ;", "String   temporaryName    =    generateTemporaryTableName (  )  ;", "StringBuilder   sql    =    new   StringBuilder (  )  . append (  \" CREATE   TABLE    \"  )  . append ( quoted ( catalog ,    schema ,    temporaryName )  )  . append (  \"     (  \"  )  ;", "ImmutableList . Builder < String >    columnNames    =    ImmutableList . builder (  )  ;", "ImmutableList . Builder < Type >    columnTypes    =    ImmutableList . builder (  )  ;", "ImmutableList . Builder < String >    columnList    =    ImmutableList . builder (  )  ;", "for    ( ColumnMetadata   column    :    tableMetadata . getColumns (  )  )     {", "String   columnName    =    column . getName (  )  ;", "if    ( uppercase )     {", "columnName    =    columnName . toUpperCase ( Locale . ENGLISH )  ;", "}", "columnNames . add ( columnName )  ;", "columnTypes . add ( column . getType (  )  )  ;", "columnList . add ( new   StringBuilder (  )  . append ( quoted ( columnName )  )  . append (  \"     \"  )  . append ( toSqlType ( column . getType (  )  )  )  . toString (  )  )  ;", "}", "Joiner . on (  \"  ,     \"  )  . appendTo ( sql ,    columnList . build (  )  )  ;", "sql . append (  \"  )  \"  )  ;", "execute ( connection ,    sql . toString (  )  )  ;", "return   new   JdbcOutputTableHandle ( connectorId ,    catalog ,    schema ,    table ,    columnNames . build (  )  ,    columnTypes . build (  )  ,    temporaryName )  ;", "}    catch    ( SQLException   e )     {", "throw   new   PException ( JdbcErrorCode . JDBC _ ERROR ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["beginWriteTable"], "fileName": "com.facebook.presto.plugin.jdbc.BaseJdbcClient"}, {"methodBody": ["METHOD_START", "{", "connectionFactory . close (  )  ;", "}", "METHOD_END"], "methodName": ["destroy"], "fileName": "com.facebook.presto.plugin.jdbc.BaseJdbcClient"}, {"methodBody": ["METHOD_START", "{", "if    (  ( name    =  =    null )     |  |     ( escape    =  =    null )  )     {", "return   name ;", "}", "checkArgum (  (  !  ( escape . equals (  \"  _  \"  )  )  )  ,     \" Escape   string   must   not   be    '  _  '  \"  )  ;", "checkArgum (  (  !  ( escape . equals (  \"  %  \"  )  )  )  ,     \" Escape   string   must   not   be    '  %  '  \"  )  ;", "name    =    name . replace ( escape ,     ( escape    +    escape )  )  ;", "name    =    name . replace (  \"  _  \"  ,     ( escape    +     \"  _  \"  )  )  ;", "name    =    name . replace (  \"  %  \"  ,     ( escape    +     \"  %  \"  )  )  ;", "return   name ;", "}", "METHOD_END"], "methodName": ["escapeNamePattern"], "fileName": "com.facebook.presto.plugin.jdbc.BaseJdbcClient"}, {"methodBody": ["METHOD_START", "{", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", ". log . debug (  \" Execute :     % s \"  ,    query )  ;", "statement . execute ( query )  ;", "}", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "com.facebook.presto.plugin.jdbc.BaseJdbcClient"}, {"methodBody": ["METHOD_START", "{", "return    \" tmp _ presto _  \"     +     ( UUID . randomUUID (  )  . toString (  )  . replace (  \"  -  \"  ,     \"  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["generateTemporaryTableName"], "fileName": "com.facebook.presto.plugin.jdbc.BaseJdbcClient"}, {"methodBody": ["METHOD_START", "{", "String   escape    =    metadata . getSearchStringEscape (  )  ;", "return   metadata . getColumns ( tableHandle . getCatalogName (  )  ,     . escapeNamePattern ( tableHandle . getSchemaName (  )  ,    escape )  ,     . escapeNamePattern ( tableHandle . getTableName (  )  ,    escape )  ,    null )  ;", "}", "METHOD_END"], "methodName": ["getColumns"], "fileName": "com.facebook.presto.plugin.jdbc.BaseJdbcClient"}, {"methodBody": ["METHOD_START", "{", "return   new   SchemaTableName ( resultSet . getString (  \" TABLE _ SCHEM \"  )  . toLowerCase ( Locale . ENGLISH )  ,    resultSet . getString (  \" TABLE _ NAME \"  )  . toLowerCase ( Locale . ENGLISH )  )  ;", "}", "METHOD_END"], "methodName": ["getSchemaTableName"], "fileName": "com.facebook.presto.plugin.jdbc.BaseJdbcClient"}, {"methodBody": ["METHOD_START", "{", "DatabaseMetaData   metadata    =    connection . getMetaData (  )  ;", "String   escape    =    metadata . getSearchStringEscape (  )  ;", "return   metadata . getTables ( connection . getCatalog (  )  ,     . escapeNamePattern ( schemaName ,    escape )  ,     . escapeNamePattern ( tableName ,    escape )  ,    new   String [  ]  {     \" TABLE \"  ,     \" VIEW \"     }  )  ;", "}", "METHOD_END"], "methodName": ["getTables"], "fileName": "com.facebook.presto.plugin.jdbc.BaseJdbcClient"}, {"methodBody": ["METHOD_START", "{", "name    =    name . replace ( identifierQuote ,     (  ( identifierQuote )     +     ( identifierQuote )  )  )  ;", "return    (  ( identifierQuote )     +    name )     +     ( identifierQuote )  ;", "}", "METHOD_END"], "methodName": ["quoted"], "fileName": "com.facebook.presto.plugin.jdbc.BaseJdbcClient"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   sb    =    new   StringBuilder (  )  ;", "if    (  !  ( isNullOrEmpty ( catalog )  )  )     {", "sb . append ( quoted ( catalog )  )  . append (  \"  .  \"  )  ;", "}", "if    (  !  ( isNullOrEmpty ( schema )  )  )     {", "sb . append ( quoted ( schema )  )  . append (  \"  .  \"  )  ;", "}", "sb . append ( quoted ( table )  )  ;", "return   sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["quoted"], "fileName": "com.facebook.presto.plugin.jdbc.BaseJdbcClient"}, {"methodBody": ["METHOD_START", "{", "if    ( isVarcharType ( type )  )     {", "VarcharType   varcharType    =     (  ( VarcharType )     ( type )  )  ;", "if    ( varcharType . isUnbounded (  )  )     {", "return    \" varchar \"  ;", "}", "return    (  \" varchar (  \"     +     ( varcharType . getLengthSafe (  )  )  )     +     \"  )  \"  ;", "}", "if    ( type   instanceof   CharType )     {", "if    (  (  (  ( CharType )     ( type )  )  . getLength (  )  )     =  =     ( CharType . MAX _ LENGTH )  )     {", "return    \" char \"  ;", "}", "return    (  \" char (  \"     +     (  (  ( CharType )     ( type )  )  . getLength (  )  )  )     +     \"  )  \"  ;", "}", "if    ( type   instanceof   DecimalType )     {", "return   String . format (  \" decimal (  % s ,     % s )  \"  ,     (  ( DecimalType )     ( type )  )  . getPrecision (  )  ,     (  ( DecimalType )     ( type )  )  . getScale (  )  )  ;", "}", "String   sqlType    =    BaseJdbcClient . SQL _ TYPES . get ( type )  ;", "if    ( sqlType    !  =    null )     {", "return   sqlType ;", "}", "throw   new   spi . PrestoException ( NOT _ SUPPORTED ,     (  \" Unsupported   column   type :     \"     +     ( type . getDisplayName (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["toSqlType"], "fileName": "com.facebook.presto.plugin.jdbc.BaseJdbcClient"}, {"methodBody": ["METHOD_START", "{", "return   connectionPassword ;", "}", "METHOD_END"], "methodName": ["getConnectionPassword"], "fileName": "com.facebook.presto.plugin.jdbc.BaseJdbcConfig"}, {"methodBody": ["METHOD_START", "{", "return   connectionUrl ;", "}", "METHOD_END"], "methodName": ["getConnectionUrl"], "fileName": "com.facebook.presto.plugin.jdbc.BaseJdbcConfig"}, {"methodBody": ["METHOD_START", "{", "return   connectionUser ;", "}", "METHOD_END"], "methodName": ["getConnectionUser"], "fileName": "com.facebook.presto.plugin.jdbc.BaseJdbcConfig"}, {"methodBody": ["METHOD_START", "{", "this . connectionPassword    =    connectionPassword ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setConnectionPassword"], "fileName": "com.facebook.presto.plugin.jdbc.BaseJdbcConfig"}, {"methodBody": ["METHOD_START", "{", "this . connectionUrl    =    connectionUrl ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setConnectionUrl"], "fileName": "com.facebook.presto.plugin.jdbc.BaseJdbcConfig"}, {"methodBody": ["METHOD_START", "{", "this . connectionUser    =    connectionUser ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setConnectionUser"], "fileName": "com.facebook.presto.plugin.jdbc.BaseJdbcConfig"}, {"methodBody": ["METHOD_START", "{", "Properties   connectionProperties    =    new   Properties (  )  ;", "if    (  ( config . getUser (  )  )     !  =    null )     {", "connectionProperties . setProperty (  \" user \"  ,    config . getUser (  )  )  ;", "}", "if    (  ( config . getPassword (  )  )     !  =    null )     {", "connectionProperties . setProperty (  \" password \"  ,    config . getPassword (  )  )  ;", "}", "return   connectionProperties ;", "}", "METHOD_END"], "methodName": ["basicConnectionProperties"], "fileName": "com.facebook.presto.plugin.jdbc.DriverConnectionFactory"}, {"methodBody": ["METHOD_START", "{", "return   getSchemaNames (  )  . contains ( schema )  ;", "}", "METHOD_END"], "methodName": ["schemaExists"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcClient"}, {"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . spi . ColumnMetadata ( columnName ,    columnType )  ;", "}", "METHOD_END"], "methodName": ["getColumnMetadata"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   columnName ;", "}", "METHOD_END"], "methodName": ["getColumnName"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   columnType ;", "}", "METHOD_END"], "methodName": ["getColumnType"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   connectorId ;", "}", "METHOD_END"], "methodName": ["getConnectorId"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   jdbcTypeHandle ;", "}", "METHOD_END"], "methodName": ["getJdbcTypeHandle"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcColumnHandle"}, {"methodBody": ["METHOD_START", "{", "rollbackAction . set ( null )  ;", "}", "METHOD_END"], "methodName": ["clearRollback"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcMetadata"}, {"methodBody": ["METHOD_START", "{", "Optional . ofNullable ( rollbackAction . getAndSet ( null )  )  . ifPresent ( Runnable :  : run )  ;", "}", "METHOD_END"], "methodName": ["rollback"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcMetadata"}, {"methodBody": ["METHOD_START", "{", "checkState ( rollbackAction . compareAndSet ( null ,    action )  ,     \" rollback   action   is   already   set \"  )  ;", "}", "METHOD_END"], "methodName": ["setRollback"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcMetadata"}, {"methodBody": ["METHOD_START", "{", "return   allowDropTable ;", "}", "METHOD_END"], "methodName": ["isAllowDropTable"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcMetadataConfig"}, {"methodBody": ["METHOD_START", "{", "this . allowDropTable    =    allowDropTable ;", "turn   this ;", "}", "METHOD_END"], "methodName": ["setAllowDropTable"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcMetadataConfig"}, {"methodBody": ["METHOD_START", "{", "return   new   JdbcMetadata ( jdbcClient ,    allowDropTable )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcMetadataFactory"}, {"methodBody": ["METHOD_START", "{", "return   catalogName ;", "}", "METHOD_END"], "methodName": ["getCatalogName"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcOutputTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   columnNames ;", "}", "METHOD_END"], "methodName": ["getColumnNames"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcOutputTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   columnTypes ;", "}", "METHOD_END"], "methodName": ["getColumnTypes"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcOutputTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   connectorId ;", "}", "METHOD_END"], "methodName": ["getConnectorId"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcOutputTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   schemaName ;", "}", "METHOD_END"], "methodName": ["getSchemaName"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcOutputTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   tableName ;", "}", "METHOD_END"], "methodName": ["getTableName"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcOutputTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   temporaryTableName ;", "}", "METHOD_END"], "methodName": ["getTemporaryTableName"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcOutputTableHandle"}, {"methodBody": ["METHOD_START", "{", "Block   block    =    page . getBlock ( channel )  ;", "int   parameter    =    channel    +     1  ;", "if    ( block . isNull ( position )  )     {", "statement . setObject ( parameter ,    null )  ;", "return ;", "}", "Type   type    =    columnTypes . get ( channel )  ;", "if    ( BOOLEAN . equals ( type )  )     {", "statement . setBoolean ( parameter ,    type . getBoolean ( block ,    position )  )  ;", "} else", "if    ( BIGINT . equals ( type )  )     {", "statement . setLong ( parameter ,    type . getLong ( block ,    position )  )  ;", "} else", "if    ( INTEGER . equals ( type )  )     {", "statement . setInt ( parameter ,    Math . toIntExact ( type . getLong ( block ,    position )  )  )  ;", "} else", "if    ( SMALLINT . equals ( type )  )     {", "statement . setShort ( parameter ,    com . google . common . primitives . Shorts . checkedCast ( type . getLong ( block ,    position )  )  )  ;", "} else", "if    ( TINYINT . equals ( type )  )     {", "statement . setByte ( parameter ,    com . google . common . primitives . SignedBytes . checkedCast ( type . getLong ( block ,    position )  )  )  ;", "} else", "if    ( DOUBLE . equals ( type )  )     {", "statement . setDouble ( parameter ,    type . getDouble ( block ,    position )  )  ;", "} else", "if    ( REAL . equals ( type )  )     {", "statement . setFloat ( parameter ,    Float . intBitsToFloat ( Math . toIntExact ( type . getLong ( block ,    position )  )  )  )  ;", "} else", "if    ( type   instanceof   spi . type . DecimalType )     {", "statement . setBigDecimal ( parameter ,    readBigDecimal (  (  ( spi . type . DecimalType )     ( type )  )  ,    block ,    position )  )  ;", "} else", "if    (  ( isVarcharType ( type )  )     |  |     ( isCharType ( type )  )  )     {", "statement . setString ( parameter ,    type . getSlice ( block ,    position )  . toStringUtf 8  (  )  )  ;", "} else", "if    ( VARBINARY . equals ( type )  )     {", "statement . setBytes ( parameter ,    type . getSlice ( block ,    position )  . getBytes (  )  )  ;", "} else", "if    ( DATE . equals ( type )  )     {", "long   utcMillis    =    toMillis ( type . getLong ( block ,    position )  )  ;", "long   localMillis    =    getInstanceUTC (  )  . getZone (  )  . getMillisKeepLocal ( getDefault (  )  ,    utcMillis )  ;", "statement . setDate ( parameter ,    new   Date ( localMillis )  )  ;", "} else    {", "throw   new   spi . PrestoException ( NOT _ SUPPORTED ,     (  \" Unsupported   column   type :     \"     +     ( type . getDisplayName (  )  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["appendColumn"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcPageSink"}, {"methodBody": ["METHOD_START", "{", "try    {", "connection . close (  )  ;", "}    catch    ( Throwable   t )     {", "if    ( throwable    !  =    t )     {", "throwable . addSupsed ( t )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["closeWithSuppression"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcPageSink"}, {"methodBody": ["METHOD_START", "{", "return   firstNonNull ( Thread . currentThread (  )  . getContextClassLoader (  )  ,    JdbcPlugin . class . getClassLoader (  )  )  ;", "}", "METHOD_END"], "methodName": ["getClassLoader"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcPlugin"}, {"methodBody": ["METHOD_START", "{", "return   JdbcQueryRunner . createJdbcQueryRunner ( ImmutableList . copyOf ( tables )  )  ;", "}", "METHOD_END"], "methodName": ["createJdbcQueryRunner"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcQueryRunner"}, {"methodBody": ["METHOD_START", "{", "DistributedQueryRunner   queryRunner    =    null ;", "try    {", "queryRunner    =    new   DistributedQueryRunner (  . createSession (  )  ,     3  )  ;", "queryRunner . installPlugin ( new   TpchPlugin (  )  )  ;", "queryRunner . createCatalog (  \" tpch \"  ,     \" tpch \"  )  ;", "Map < String ,    String >    properties    =    TestingH 2 JdbcModule . createProperties (  )  ;", ". createSchema ( properties ,     \" tpch \"  )  ;", "queryRunner . installPlugin ( new   JdbcPlugin (  \" base - jdbc \"  ,    new   TestingH 2 JdbcModule (  )  )  )  ;", "queryRunner . createCatalog (  \" jdbc \"  ,     \" base - jdbc \"  ,    properties )  ;", "copyTpchTables ( queryRunner ,     \" tpch \"  ,    TINY _ SCHEMA _ NAME ,     . createSession (  )  ,    tables )  ;", "return   queryRunner ;", "}    catch    ( Throwable   e )     {", "closeAllSuppress ( e ,    queryRunner )  ;", "throw   e ;", "}", "}", "METHOD_END"], "methodName": ["createJdbcQueryRunner"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcQueryRunner"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    DriverManager . getConnection ( properties . get (  \" connection - url \"  )  )  ; Statement   statement    =    connection . createStatement (  )  )     {", "statement . execute (  (  \" CREATE   SCHEMA    \"     +    schema )  )  ;", "}", "}", "METHOD_END"], "methodName": ["createSchema"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcQueryRunner"}, {"methodBody": ["METHOD_START", "{", "return   testSessionBuilder (  )  . setCatalog (  \" jdbc \"  )  . setSchema ( JdbcQueryRunner . TPCH _ SCHEMA )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["createSession"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcQueryRunner"}, {"methodBody": ["METHOD_START", "{", "try    {", "close (  )  ;", "}    catch    ( Exception   closeException )     {", "if    ( e    !  =    closeException )     {", "e . addSupsed ( closeException )  ;", "}", "}", "return   Throwables . propagate ( e )  ;", "}", "METHOD_END"], "methodName": ["handleSqlException"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcRecordCursor"}, {"methodBody": ["METHOD_START", "{", "return   catalogName ;", "}", "METHOD_END"], "methodName": ["getCatalogName"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcSplit"}, {"methodBody": ["METHOD_START", "{", "return   connectorId ;", "}", "METHOD_END"], "methodName": ["getConnectorId"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcSplit"}, {"methodBody": ["METHOD_START", "{", "return   schemaName ;", "}", "METHOD_END"], "methodName": ["getSchemaName"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcSplit"}, {"methodBody": ["METHOD_START", "{", "return   tableName ;", "}", "METHOD_END"], "methodName": ["getTableName"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcSplit"}, {"methodBody": ["METHOD_START", "{", "return   tupleDomain ;", "}", "METHOD_END"], "methodName": ["getTupleDomain"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcSplit"}, {"methodBody": ["METHOD_START", "{", "return   catalogName ;", "}", "METHOD_END"], "methodName": ["getCatalogName"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   connectorId ;", "}", "METHOD_END"], "methodName": ["getConnectorId"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   schemaName ;", "}", "METHOD_END"], "methodName": ["getSchemaName"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   schemaTableName ;", "}", "METHOD_END"], "methodName": ["getSchemaTableName"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   tableName ;", "}", "METHOD_END"], "methodName": ["getTableName"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   table ;", "}", "METHOD_END"], "methodName": ["getTable"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "return   tupleDomain ;", "}", "METHOD_END"], "methodName": ["getTupleDomain"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "return   uuid ;", "}", "METHOD_END"], "methodName": ["getUuid"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcTransactionHandle"}, {"methodBody": ["METHOD_START", "{", "return   columnSize ;", "}", "METHOD_END"], "methodName": ["getColumnSize"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcTypeHandle"}, {"methodBody": ["METHOD_START", "{", "return   decimalDigits ;", "}", "METHOD_END"], "methodName": ["getDecimalDigits"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcTypeHandle"}, {"methodBody": ["METHOD_START", "{", "return   jdbcType ;", "}", "METHOD_END"], "methodName": ["getJdbcType"], "fileName": "com.facebook.presto.plugin.jdbc.JdbcTypeHandle"}, {"methodBody": ["METHOD_START", "{", "String   json    =    codec . toJson ( object )  ;", "T   copy    =    codec . fromJson ( json )  ;", "assertEquals ( copy ,    object )  ;", "}", "METHOD_END"], "methodName": ["assertJsonRoundTrip"], "fileName": "com.facebook.presto.plugin.jdbc.MetadataUtil"}, {"methodBody": ["METHOD_START", "{", "checkArgument ( QueryBuilder . isAcceptedType ( type )  ,     \" Can ' t   handle   type :     % s \"  ,    type )  ;", "accumulator . add ( new   QueryBuilder . TypeAndValue ( type ,    value )  )  ;", "}", "METHOD_END"], "methodName": ["bindValue"], "fileName": "com.facebook.presto.plugin.jdbc.QueryBuilder"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   sql    =    new   StringBuilder (  )  ;", "String   columnNames    =    columns . stream (  )  . map ( JdbcColumnHandle :  : getColumnName )  . map ( this :  : quote )  . collect ( Collectors . joining (  \"  ,     \"  )  )  ;", "sql . append (  \" SELECT    \"  )  ;", "sql . append ( columnNames )  ;", "if    ( columns . isEmpty (  )  )     {", "sql . append (  \" null \"  )  ;", "}", "sql . append (  \"    FROM    \"  )  ;", "if    (  !  ( isNullOrEmpty ( catalog )  )  )     {", "sql . append ( quote ( catalog )  )  . append (  '  .  '  )  ;", "}", "if    (  !  ( isNullOrEmpty ( schema )  )  )     {", "sql . append ( quote ( schema )  )  . append (  '  .  '  )  ;", "}", "sql . append ( quote ( table )  )  ;", "List < QueryBuilder . TypeAndValue >    accumulator    =    new   ArrayList <  >  (  )  ;", "List < String >    clauses    =    toConjuncts ( columns ,    tupleDomain ,    accumulator )  ;", "if    (  !  ( clauses . isEmpty (  )  )  )     {", "sql . append (  \"    WHERE    \"  )  . append ( Joiner . on (  \"    AND    \"  )  . join ( clauses )  )  ;", "}", "PreparedStatement   statement    =    client . getPreparedStatement ( connection ,    sql . toString (  )  )  ;", "for    ( int   i    =     0  ;    i    <     ( accumulator . size (  )  )  ;    i +  +  )     {", "QueryBuilder . TypeAndValue   typeAndValue    =    accumulator . get ( i )  ;", "if    ( typeAndValue . getType (  )  . equals ( BIGINT )  )     {", "statement . setLong (  ( i    +     1  )  ,     (  ( long )     ( typeAndValue . getValue (  )  )  )  )  ;", "} else", "if    ( typeAndValue . getType (  )  . equals ( IntegerType . INTEGER )  )     {", "statement . setInt (  ( i    +     1  )  ,     (  ( Number )     ( typeAndValue . getValue (  )  )  )  . intValue (  )  )  ;", "} else", "if    ( typeAndValue . getType (  )  . equals ( SmallintType . SMALLINT )  )     {", "statement . setShort (  ( i    +     1  )  ,     (  ( Number )     ( typeAndValue . getValue (  )  )  )  . shortValue (  )  )  ;", "} else", "if    ( typeAndValue . getType (  )  . equals ( TinyintType . TINYINT )  )     {", "statement . setByte (  ( i    +     1  )  ,     (  ( Number )     ( typeAndValue . getValue (  )  )  )  . byteValue (  )  )  ;", "} else", "if    ( typeAndValue . getType (  )  . equals ( DoubleType . DOUBLE )  )     {", "statement . setDouble (  ( i    +     1  )  ,     (  ( double )     ( typeAndValue . getValue (  )  )  )  )  ;", "} else", "if    ( typeAndValue . getType (  )  . equals ( RealType . REAL )  )     {", "statement . setFloat (  ( i    +     1  )  ,    Float . intBitsToFloat (  (  ( Number )     ( typeAndValue . getValue (  )  )  )  . intValue (  )  )  )  ;", "} else", "if    ( typeAndValue . getType (  )  . equals ( BooleanType . BOOLEAN )  )     {", "statement . setBoolean (  ( i    +     1  )  ,     (  ( boolean )     ( typeAndValue . getValue (  )  )  )  )  ;", "} else", "if    ( typeAndValue . getType (  )  . equals ( DateType . DATE )  )     {", "long   millis    =    toMillis (  (  ( long )     ( typeAndValue . getValue (  )  )  )  )  ;", "statement . setDate (  ( i    +     1  )  ,    new   Date ( UTC . getMillisKeepLocal ( getDefault (  )  ,    millis )  )  )  ;", "} else", "if    ( typeAndValue . getType (  )  . equals ( TimeType . TIME )  )     {", "statement . setTime (  ( i    +     1  )  ,    new   Time (  (  ( long )     ( typeAndValue . getValue (  )  )  )  )  )  ;", "} else", "if    ( typeAndValue . getType (  )  . equals ( TimeWithTimeZoneType . TIME _ WITH _ TIME _ ZONE )  )     {", "statement . setTime (  ( i    +     1  )  ,    new   Time ( unpackMillisUtc (  (  ( long )     ( typeAndValue . getValue (  )  )  )  )  )  )  ;", "} else", "if    ( typeAndValue . getType (  )  . equals ( TimestampType . TIMESTAMP )  )     {", "statement . setTimestamp (  ( i    +     1  )  ,    new   Timestamp (  (  ( long )     ( typeAndValue . getValue (  )  )  )  )  )  ;", "} else", "if    ( typeAndValue . getType (  )  . equals ( TimestampWithTimeZoneType . TIMESTAMP _ WITH _ TIME _ ZONE )  )     {", "statement . setTimestamp (  ( i    +     1  )  ,    new   Timestamp ( unpackMillisUtc (  (  ( long )     ( typeAndValue . getValue (  )  )  )  )  )  )  ;", "} else", "if    (  ( typeAndValue . getType (  )  )    instanceof   spi . type . VarcharType )     {", "statement . setString (  ( i    +     1  )  ,     (  ( io . airlift . slice . Slice )     ( typeAndValue . getValue (  )  )  )  . toStringUtf 8  (  )  )  ;", "} else    {", "throw   new   UnsupportedOperationException (  (  \" Can ' t   handle   type :     \"     +     ( typeAndValue . getType (  )  )  )  )  ;", "}", "}", "return   statement ;", "}", "METHOD_END"], "methodName": ["buildSql"], "fileName": "com.facebook.presto.plugin.jdbc.QueryBuilder"}, {"methodBody": ["METHOD_START", "{", "Type   validType    =    Objects . requireNonNull ( type ,     \" type   is   null \"  )  ;", "return    (  (  (  (  (  (  (  (  (  (  (  ( validType . equals ( BIGINT )  )     |  |     ( validType . equals ( TINYINT )  )  )     |  |     ( validType . equals ( SMALLINT )  )  )     |  |     ( validType . equals ( INTEGER )  )  )     |  |     ( validType . equals ( DOUBLE )  )  )     |  |     ( validType . equals ( REAL )  )  )     |  |     ( validType . equals ( BOOLEAN )  )  )     |  |     ( validType . equals ( DATE )  )  )     |  |     ( validType . equals ( TIME )  )  )     |  |     ( validType . equals ( TIME _ WITH _ TIME _ ZONE )  )  )     |  |     ( validType . equals ( TIMESTAMP )  )  )     |  |     ( validType . equals ( TIMESTAMP _ WITH _ TIME _ ZONE )  )  )     |  |     ( validType   instanceof   VarcharType )  ;", "}", "METHOD_END"], "methodName": ["isAcceptedType"], "fileName": "com.facebook.presto.plugin.jdbc.QueryBuilder"}, {"methodBody": ["METHOD_START", "{", "name    =    name . replace ( quote ,     (  ( quote )     +     ( quote )  )  )  ;", "return    (  ( quote )     +    name )     +     ( quote )  ;", "}", "METHOD_END"], "methodName": ["quote"], "fileName": "com.facebook.presto.plugin.jdbc.QueryBuilder"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < String >    builder    =    ImmutableList . builder (  )  ;", "for    ( JdbcColumnHandle   column    :    columns )     {", "Type   type    =    column . getColumnType (  )  ;", "if    (  . isAcceptedType ( type )  )     {", "Domain   domain    =    tupleDomain . getDomains (  )  . get (  )  . get ( column )  ;", "if    ( domain    !  =    null )     {", "builder . add ( toPredicate ( column . getColumnName (  )  ,    domain ,    type ,    accumulator )  )  ;", "}", "}", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["toConjuncts"], "fileName": "com.facebook.presto.plugin.jdbc.QueryBuilder"}, {"methodBody": ["METHOD_START", "{", "checkArgument ( domain . getType (  )  . isOrderable (  )  ,     \" Domain   type   must   be   orderable \"  )  ;", "if    ( domain . getValues (  )  . isNone (  )  )     {", "return   domain . isNullAllowed (  )     ?     ( quote ( columnName )  )     +     \"    IS   NULL \"     :     . ALWAYS _ FALSE ;", "}", "if    ( domain . getValues (  )  . isAll (  )  )     {", "return   domain . isNullAllowed (  )     ?     . ALWAYS _ TRUE    :     ( quote ( columnName )  )     +     \"    IS   NOT   NULL \"  ;", "}", "List < String >    disjuncts    =    new   ArrayList <  >  (  )  ;", "List < Object >    singleValues    =    new   ArrayList <  >  (  )  ;", "for    ( Range   range    :    domain . getValues (  )  . getRanges (  )  . getOrderedRanges (  )  )     {", "checkState (  (  !  ( range . isAll (  )  )  )  )  ;", "if    ( range . isSingleValue (  )  )     {", "singleValues . add ( range . getLow (  )  . getValue (  )  )  ;", "} else    {", "List < String >    rangeConjuncts    =    new   ArrayList <  >  (  )  ;", "if    (  !  ( range . getLow (  )  . isLowerUnbounded (  )  )  )     {", "switch    ( range . getLow (  )  . getBound (  )  )     {", "case   ABOVE    :", "rangeConjuncts . add ( toPredicate ( columnName ,     \"  >  \"  ,    range . getLow (  )  . getValue (  )  ,    type ,    accumulator )  )  ;", "break ;", "case   EXACTLY    :", "rangeConjuncts . add ( toPredicate ( columnName ,     \"  >  =  \"  ,    range . getLow (  )  . getValue (  )  ,    type ,    accumulator )  )  ;", "break ;", "case   BELOW    :", "throw   new   IllegalArgumentException (  \" Low   marker   should   never   use   BELOW   bound \"  )  ;", "default    :", "throw   new   AssertionError (  (  \" Unhandled   bound :     \"     +     ( range . getLow (  )  . getBound (  )  )  )  )  ;", "}", "}", "if    (  !  ( range . getHigh (  )  . isUpperUnbounded (  )  )  )     {", "switch    ( range . getHigh (  )  . getBound (  )  )     {", "case   ABOVE    :", "throw   new   IllegalArgumentException (  \" High   marker   should   never   use   ABOVE   bound \"  )  ;", "case   EXACTLY    :", "rangeConjuncts . add ( toPredicate ( columnName ,     \"  <  =  \"  ,    range . getHigh (  )  . getValue (  )  ,    type ,    accumulator )  )  ;", "break ;", "case   BELOW    :", "rangeConjuncts . add ( toPredicate ( columnName ,     \"  <  \"  ,    range . getHigh (  )  . getValue (  )  ,    type ,    accumulator )  )  ;", "break ;", "default    :", "throw   new   AssertionError (  (  \" Unhandled   bound :     \"     +     ( range . getHigh (  )  . getBound (  )  )  )  )  ;", "}", "}", "checkState (  (  !  ( rangeConjuncts . isEmpty (  )  )  )  )  ;", "disjuncts . add (  (  (  \"  (  \"     +     ( Joiner . on (  \"    AND    \"  )  . join ( rangeConjuncts )  )  )     +     \"  )  \"  )  )  ;", "}", "}", "if    (  ( singleValues . size (  )  )     =  =     1  )     {", "disjuncts . add ( toPredicate ( columnName ,     \"  =  \"  ,    getOnlyElement ( singleValues )  ,    type ,    accumulator )  )  ;", "} else", "if    (  ( singleValues . size (  )  )     >     1  )     {", "for    ( Object   value    :    singleValues )     {", ". bindValue ( value ,    type ,    accumulator )  ;", "}", "String   values    =    Joiner . on (  \"  ,  \"  )  . join ( nCopies ( singleValues . size (  )  ,     \"  ?  \"  )  )  ;", "disjuncts . add (  (  (  (  ( quote ( columnName )  )     +     \"    IN    (  \"  )     +    values )     +     \"  )  \"  )  )  ;", "}", "checkState (  (  !  ( disjuncts . isEmpty (  )  )  )  )  ;", "if    ( domain . isNullAllowed (  )  )     {", "disjuncts . add (  (  ( quote ( columnName )  )     +     \"    IS   NULL \"  )  )  ;", "}", "return    (  \"  (  \"     +     ( Joiner . on (  \"    OR    \"  )  . join ( disjuncts )  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["toPredicate"], "fileName": "com.facebook.presto.plugin.jdbc.QueryBuilder"}, {"methodBody": ["METHOD_START", "{", "QueryBuilder . bindValue ( value ,    type ,    accumulator )  ;", "return    (  (  ( quote ( columnName )  )     +     \"     \"  )     +    operator )     +     \"     ?  \"  ;", "}", "METHOD_END"], "methodName": ["toPredicate"], "fileName": "com.facebook.presto.plugin.jdbc.QueryBuilder"}, {"methodBody": ["METHOD_START", "{", "return   new   ReadMapping ( prestoType ,    readFunction )  ;", "}", "METHOD_END"], "methodName": ["booleanReadMapping"], "fileName": "com.facebook.presto.plugin.jdbc.ReadMapping"}, {"methodBody": ["METHOD_START", "{", "return   new   ReadMapping ( prestoType ,    readFunction )  ;", "}", "METHOD_END"], "methodName": ["doubleReadMapping"], "fileName": "com.facebook.presto.plugin.jdbc.ReadMapping"}, {"methodBody": ["METHOD_START", "{", "return   readFunction ;", "}", "METHOD_END"], "methodName": ["getReadFunction"], "fileName": "com.facebook.presto.plugin.jdbc.ReadMapping"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.facebook.presto.plugin.jdbc.ReadMapping"}, {"methodBody": ["METHOD_START", "{", "return   new   ReadMapping ( prestoType ,    readFunction )  ;", "}", "METHOD_END"], "methodName": ["longReadMapping"], "fileName": "com.facebook.presto.plugin.jdbc.ReadMapping"}, {"methodBody": ["METHOD_START", "{", "return   new   ReadMapping ( prestoType ,    readFunction )  ;", "}", "METHOD_END"], "methodName": ["sliceReadMapping"], "fileName": "com.facebook.presto.plugin.jdbc.ReadMapping"}, {"methodBody": ["METHOD_START", "{", "return   ReadMapping . longReadMapping ( BIGINT ,    ResultSet :  : getLong )  ;", "}", "METHOD_END"], "methodName": ["bigintReadMapping"], "fileName": "com.facebook.presto.plugin.jdbc.StandardReadMappings"}, {"methodBody": ["METHOD_START", "{", "return   ReadMapping . booleanReadMapping ( BOOLEAN ,    ResultSet :  : getBoolean )  ;", "}", "METHOD_END"], "methodName": ["booleanReadMapping"], "fileName": "com.facebook.presto.plugin.jdbc.StandardReadMappings"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( charType ,     \" charType   is   null \"  )  ;", "return    . slice ( charType ,     (    resultSet ,    columnIndex )     -  >    utf 8 Slice ( CharMatcher . is (  '     '  )  . trimTrailingFrom ( resultSet . getString ( columnIndex )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["charReadMapping"], "fileName": "com.facebook.presto.plugin.jdbc.StandardReadMappings"}, {"methodBody": ["METHOD_START", "{", "return   ReadMapping . longReadMapping ( DATE ,     (    resultSet ,    columnIndex )     -  >     {", "long   localMillis    =    resultSet . getDate ( columnIndex )  . getTime (  )  ;", "long   utcMillis    =    ISOChronology . getInstance (  )  . getZone (  )  . getMillisKeepLocal ( UTC ,    localMillis )  ;", "return   MILLISECONDS . toDays ( utcMillis )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["dateReadMapping"], "fileName": "com.facebook.presto.plugin.jdbc.StandardReadMappings"}, {"methodBody": ["METHOD_START", "{", "int   scale    =    decimalType . getScale (  )  ;", "if    ( decimalType . isShort (  )  )     {", "return    . long ( decimalType ,     (    resultSet ,    columnIndex )     -  >    encodeShortScaledValue ( resultSet . getBigDecimal ( columnIndex )  ,    scale )  )  ;", "}", "return    . slice ( decimalType ,     (    resultSet ,    columnIndex )     -  >    encodeScaledValue ( resultSet . getBigDecimal ( columnIndex )  ,    scale )  )  ;", "}", "METHOD_END"], "methodName": ["decimalReadMapping"], "fileName": "com.facebook.presto.plugin.jdbc.StandardReadMappings"}, {"methodBody": ["METHOD_START", "{", "return   ReadMapping . doubleReadMapping ( DOUBLE ,    ResultSet :  : getDouble )  ;", "}", "METHOD_END"], "methodName": ["doubleReadMapping"], "fileName": "com.facebook.presto.plugin.jdbc.StandardReadMappings"}, {"methodBody": ["METHOD_START", "{", "return   ReadMapping . longReadMapping ( INTEGER ,    ResultSet :  : getInt )  ;", "}", "METHOD_END"], "methodName": ["integerReadMapping"], "fileName": "com.facebook.presto.plugin.jdbc.StandardReadMappings"}, {"methodBody": ["METHOD_START", "{", "int   columnSize    =    type . getColumnSize (  )  ;", "switch    ( type . getJdbcType (  )  )     {", "case   Types . BIT    :", "case   Types . BOOLEAN    :", "return   Optional . of (  . booleanReadMapping (  )  )  ;", "case   Types . TINYINT    :", "return   Optional . of (  . tinyintReadMapping (  )  )  ;", "case   Types . SMALLINT    :", "return   Optional . of (  . smallintReadMapping (  )  )  ;", "case   Types . INTEGER    :", "return   Optional . of (  . integerReadMapping (  )  )  ;", "case   Types . BIGINT    :", "return   Optional . of (  . bigintReadMapping (  )  )  ;", "case   Types . REAL    :", "return   Optional . of (  . realReadMapping (  )  )  ;", "case   Types . FLOAT    :", "case   Types . DOUBLE    :", "return   Optional . of (  . doubleReadMapping (  )  )  ;", "case   Types . NUMERIC    :", "case   Types . DECIMAL    :", "int   decimalDigits    =    type . getDecimalDigits (  )  ;", "int   precision    =    columnSize    +     ( Math . max (  (  - decimalDigits )  ,     0  )  )  ;", "if    ( precision    >     ( Decimals . MAX _ PRECISION )  )     {", "return   Optional . empty (  )  ;", "}", "return   Optional . of (  . decimalReadMapping ( createDecimalType ( precision ,    Math . max ( decimalDigits ,     0  )  )  )  )  ;", "case   Types . CHAR    :", "case   Types . NCHAR    :", "int   charLength    =    Math . min ( columnSize ,    MAX _ LENGTH )  ;", "return   Optional . of (  . charReadMapping ( createCharType ( charLength )  )  )  ;", "case   Types . VARCHAR    :", "case   Types . NVARCHAR    :", "case   Types . LONGVARCHAR    :", "case   Types . LONGNVARCHAR    :", "if    ( columnSize    >     ( VarcharType . MAX _ LENGTH )  )     {", "return   Optional . of (  . varcharReadMapping ( createUnboundedVarcharType (  )  )  )  ;", "}", "return   Optional . of (  . varcharReadMapping ( createVarcharType ( columnSize )  )  )  ;", "case   Types . BINARY    :", "case   Types . VARBINARY    :", "case   Types . LONGVARBINARY    :", "return   Optional . of (  . varbinaryReadMapping (  )  )  ;", "case   Types . DATE    :", "return   Optional . of (  . dateReadMapping (  )  )  ;", "case   Types . TIME    :", "return   Optional . of (  . timeReadMapping (  )  )  ;", "case   Types . TIMESTAMP    :", "return   Optional . of (  . timestampReadMapping (  )  )  ;", "}", "return   Optional . empty (  )  ;", "}", "METHOD_END"], "methodName": ["jdbcTypeToPrestoType"], "fileName": "com.facebook.presto.plugin.jdbc.StandardReadMappings"}, {"methodBody": ["METHOD_START", "{", "return   ReadMapping . longReadMapping ( REAL ,     (    resultSet ,    columnIndex )     -  >    floatToRawIntBits ( resultSet . getFloat ( columnIndex )  )  )  ;", "}", "METHOD_END"], "methodName": ["realReadMapping"], "fileName": "com.facebook.presto.plugin.jdbc.StandardReadMappings"}, {"methodBody": ["METHOD_START", "{", "return   ReadMapping . longReadMapping ( SMALLINT ,    ResultSet :  : getShort )  ;", "}", "METHOD_END"], "methodName": ["smallintReadMapping"], "fileName": "com.facebook.presto.plugin.jdbc.StandardReadMappings"}, {"methodBody": ["METHOD_START", "{", "return   ReadMapping . longReadMapping ( TIME ,     (    resultSet ,    columnIndex )     -  >     {", "Time   time    =    resultSet . getTime ( columnIndex )  ;", "return    . UTC _ CHRONOLOGY . millisOfDay (  )  . get ( time . getTime (  )  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["timeReadMapping"], "fileName": "com.facebook.presto.plugin.jdbc.StandardReadMappings"}, {"methodBody": ["METHOD_START", "{", "return   ReadMapping . longReadMapping ( TIMESTAMP ,     (    resultSet ,    columnIndex )     -  >     {", "Timestamp   timestamp    =    resultSet . getTimestamp ( columnIndex )  ;", "return   timestamp . getTime (  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["timestampReadMapping"], "fileName": "com.facebook.presto.plugin.jdbc.StandardReadMappings"}, {"methodBody": ["METHOD_START", "{", "return   ReadMapping . longReadMapping ( TINYINT ,    ResultSet :  : getByte )  ;", "}", "METHOD_END"], "methodName": ["tinyintReadMapping"], "fileName": "com.facebook.presto.plugin.jdbc.StandardReadMappings"}, {"methodBody": ["METHOD_START", "{", "return   ReadMapping . sliceReadMapping ( VARBINARY ,     (    resultSet ,    columnIndex )     -  >    wrappedBuffer ( resultSet . getBytes ( columnIndex )  )  )  ;", "}", "METHOD_END"], "methodName": ["varbinaryReadMapping"], "fileName": "com.facebook.presto.plugin.jdbc.StandardReadMappings"}, {"methodBody": ["METHOD_START", "{", "return   ReadMapping . sliceReadMapping ( varcharType ,     (    resultSet ,    columnIndex )     -  >    utf 8 Slice ( resultSet . getString ( columnIndex )  )  )  ;", "}", "METHOD_END"], "methodName": ["varcharReadMapping"], "fileName": "com.facebook.presto.plugin.jdbc.StandardReadMappings"}, {"methodBody": ["METHOD_START", "{", "ConfigAssertions . assertRecordedDefaults ( ConfigAssertions . recordDefaults ( BaseJdbcConfig . class )  . setConnectionUrl ( null )  . setConnectionUser ( null )  . setConnectionPassword ( null )  )  ;", "}", "METHOD_END"], "methodName": ["testDefaults"], "fileName": "com.facebook.presto.plugin.jdbc.TestBaseJdbcConfig"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    properties    =    new   Builder < String ,    String >  (  )  . put (  \" connection - url \"  ,     \" jdbc : h 2  : mem : config \"  )  . put (  \" connection - user \"  ,     \" user \"  )  . put (  \" connection - password \"  ,     \" password \"  )  . build (  )  ;", "expected    =    new    (  )  . setConnectionUrl (  \" jdbc : h 2  : mem : config \"  )  . setConnectionUser (  \" user \"  )  . setConnectionPassword (  \" password \"  )  ;", "ConfigAssertions . assertFullMapping ( properties ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testExplicitPropertyMappings"], "fileName": "com.facebook.presto.plugin.jdbc.TestBaseJdbcConfig"}, {"methodBody": ["METHOD_START", "{", "database    =    new   TestingDatabase (  )  ;", "catalogName    =    database . getConnection (  )  . getCatalog (  )  ;", "jdbcClient    =    database . ge (  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcClient"}, {"methodBody": ["METHOD_START", "{", "database . close (  )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcClient"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( jdbcClient . getSchemaNames (  )  . containsAll ( ImmutableSet . of (  \" example \"  ,     \" tpch \"  )  )  )  ;", "assertEquals ( jdbcClient . getTableNames (  \" example \"  )  ,    ImmutableList . of ( new   SchemaTableName (  \" example \"  ,     \" numbers \"  )  ,    new   SchemaTableName (  \" example \"  ,     \" view _ source \"  )  ,    new   SchemaTableName (  \" example \"  ,     \" view \"  )  )  )  ;", "assertEquals ( jdbcClient . getTableNames (  \" tpch \"  )  ,    ImmutableList . of ( new   SchemaTableName (  \" tpch \"  ,     \" lineitem \"  )  ,    new   SchemaTableName (  \" tpch \"  ,     \" orders \"  )  )  )  ;", "SchemaTableName   schemaTableName    =    new   SchemaTableName (  \" example \"  ,     \" numbers \"  )  ;", "JdbcTableHandle   table    =    jdbcClient . getTableHandle ( schemaTableName )  ;", "assertNotNull ( table ,     \" table   is   null \"  )  ;", "assertEquals ( table . getCatalogName (  )  ,    catalogName . toUpperCase ( Locale . ENGLISH )  )  ;", "assertEquals ( table . getSchemaName (  )  ,     \" EXAMPLE \"  )  ;", "assertEquals ( table . getTableName (  )  ,     \" NUMBERS \"  )  ;", "assertEquals ( table . getSchemaTableName (  )  ,    schemaTableName )  ;", "assertEquals ( jdbcClient . getColumns (  . session ,    table )  ,    ImmutableList . of ( new   JdbcColumnHandle ( TestingDatabase . CONNECTOR _ ID ,     \" TEXT \"  ,    TestingJdbcTypeHandle . JDBC _ VARCHAR ,    VARCHAR )  ,    new   JdbcColumnHandle ( TestingDatabase . CONNECTOR _ ID ,     \" TEXT _ SHORT \"  ,    TestingJdbcTypeHandle . JDBC _ VARCHAR ,    createVarcharType (  3  2  )  )  ,    new   JdbcColumnHandle ( TestingDatabase . CONNECTOR _ ID ,     \" VALUE \"  ,    TestingJdbcTypeHandle . JDBC _ BIGINT ,    BIGINT )  )  )  ;", "}", "METHOD_END"], "methodName": ["testMetadata"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcClient"}, {"methodBody": ["METHOD_START", "{", "SchemaTableName   schemaTableName    =    new   SchemaTableName (  \" exa _ ple \"  ,     \" table _ with _ float _ col \"  )  ;", "JdbcTableHandle   table    =    jdbcClient . getTableHandle ( schemaTableName )  ;", "assertNotNull ( table ,     \" table   is   null \"  )  ;", "assertEquals ( jdbcClient . getColumns (  . session ,    table )  ,    ImmutableList . of ( new   JdbcColumnHandle ( TestingDatabase . CONNECTOR _ ID ,     \" COL 1  \"  ,    TestingJdbcTypeHandle . JDBC _ BIGINT ,    BIGINT )  ,    new   JdbcColumnHandle ( TestingDatabase . CONNECTOR _ ID ,     \" COL 2  \"  ,    TestingJdbcTypeHandle . JDBC _ DOUBLE ,    DOUBLE )  ,    new   JdbcColumnHandle ( TestingDatabase . CONNECTOR _ ID ,     \" COL 3  \"  ,    TestingJdbcTypeHandle . JDBC _ DOUBLE ,    DOUBLE )  ,    new   JdbcColumnHandle ( TestingDatabase . CONNECTOR _ ID ,     \" COL 4  \"  ,    TestingJdbcTypeHandle . JDBC _ REAL ,    REAL )  )  )  ;", "}", "METHOD_END"], "methodName": ["testMetadataWithFloatAndDoubleCol"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcClient"}, {"methodBody": ["METHOD_START", "{", "SchemaTableName   schemaTableName    =    new   SchemaTableName (  \" exa _ ple \"  ,     \" num _ ers \"  )  ;", "JdbcTableHandle   table    =    jdbcClient . getTableHandle ( schemaTableName )  ;", "assertNotNull ( table ,     \" table   is   null \"  )  ;", "assertEquals ( jdbcClient . getColumns (  . session ,    table )  ,    ImmutableList . of ( new   JdbcColumnHandle ( TestingDatabase . CONNECTOR _ ID ,     \" TE _ T \"  ,    TestingJdbcTypeHandle . JDBC _ VARCHAR ,    VARCHAR )  ,    new   JdbcColumnHandle ( TestingDatabase . CONNECTOR _ ID ,     \" VA % UE \"  ,    TestingJdbcTypeHandle . JDBC _ BIGINT ,    BIGINT )  )  )  ;", "}", "METHOD_END"], "methodName": ["testMetadataWithSchemaPattern"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcClient"}, {"methodBody": ["METHOD_START", "{", "EquivalenceTester . equivalenceTester (  )  . addEquivalentGroup ( new   JdbcColumnHandle (  \" connectorId \"  ,     \" columnName \"  ,    TestingJdbcTypeHandle . JDBC _ VARCHAR ,    VARCHAR )  ,    new   JdbcColumnHandle (  \" connectorId \"  ,     \" columnName \"  ,    TestingJdbcTypeHandle . JDBC _ VARCHAR ,    VARCHAR )  ,    new   JdbcColumnHandle (  \" connectorId \"  ,     \" columnName \"  ,    TestingJdbcTypeHandle . JDBC _ BIGINT ,    BIGINT )  ,    new   JdbcColumnHandle (  \" connectorId \"  ,     \" columnName \"  ,    TestingJdbcTypeHandle . JDBC _ VARCHAR ,    VARCHAR )  )  . addEquivalentGroup ( new   JdbcColumnHandle (  \" connectorIdX \"  ,     \" columnName \"  ,    TestingJdbcTypeHandle . JDBC _ VARCHAR ,    VARCHAR )  ,    new   JdbcColumnHandle (  \" connectorIdX \"  ,     \" columnName \"  ,    TestingJdbcTypeHandle . JDBC _ VARCHAR ,    VARCHAR )  ,    new   JdbcColumnHandle (  \" connectorIdX \"  ,     \" columnName \"  ,    TestingJdbcTypeHandle . JDBC _ BIGINT ,    BIGINT )  ,    new   JdbcColumnHandle (  \" connectorIdX \"  ,     \" columnName \"  ,    TestingJdbcTypeHandle . JDBC _ VARCHAR ,    VARCHAR )  )  . addEquivalentGroup ( new   JdbcColumnHandle (  \" connectorId \"  ,     \" columnNameX \"  ,    TestingJdbcTypeHandle . JDBC _ VARCHAR ,    VARCHAR )  ,    new   JdbcColumnHandle (  \" connectorId \"  ,     \" columnNameX \"  ,    TestingJdbcTypeHandle . JDBC _ VARCHAR ,    VARCHAR )  ,    new   JdbcColumnHandle (  \" connectorId \"  ,     \" columnNameX \"  ,    TestingJdbcTypeHandle . JDBC _ BIGINT ,    BIGINT )  ,    new   JdbcColumnHandle (  \" connectorId \"  ,     \" columnNameX \"  ,    TestingJdbcTypeHandle . JDBC _ VARCHAR ,    VARCHAR )  )  . check (  )  ;", "}", "METHOD_END"], "methodName": ["testEquivalence"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcColumnHandle"}, {"methodBody": ["METHOD_START", "{", "MetadataUtil . assertJsonRoundTrip ( MetadataUtil . COLUMN _ CODEC ,    new   JdbcColumnHandle (  \" connectorId \"  ,     \" columnName \"  ,    TestingJdbcTypeHandle . JDBC _ VARCHAR ,    VARCHAR )  )  ;", "}", "METHOD_END"], "methodName": ["testJsonRoundTrip"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcColumnHandle"}, {"methodBody": ["METHOD_START", "{", "JdbcConnectorFactory   connectorFactory    =    new   JdbcConnectorFactory (  \" test \"  ,    new   TestingH 2 JdbcModule (  )  ,    getClass (  )  . getClassLoader (  )  )  ;", "connectorFactory . create (  \" test \"  ,    TestingH 2 JdbcModule . createProperties (  )  ,    new   TestingConnectorContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["test"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcConnectorFactory"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( metadata . getColumnMetadata ( SESSION ,    tableHandle ,    new   JdbcColumnHandle ( TestingDatabase . CONNECTOR _ ID ,     \" text \"  ,    TestingJdbcTypeHandle . JDBC _ VARCHAR ,    VARCHAR )  )  ,    new   com . facebook . presto . spi . ColumnMetadata (  \" text \"  ,    VARCHAR )  )  ;", "}", "METHOD_END"], "methodName": ["getColumnMetadata"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcMetadata"}, {"methodBody": ["METHOD_START", "{", "ConnectorTableMetadata   tableMetadata    =    metadata . getTableMetadata ( SESSION ,    tableHandle )  ;", "assertEquals ( tableMetadata . getTable (  )  ,    new   SchemaTableName (  \" example \"  ,     \" numbers \"  )  )  ;", "assertEquals ( tableMetadata . getColumns (  )  ,    ImmutableList . of ( new   spi . ColumnMetadata (  \" text \"  ,    VARCHAR )  ,    new   spi . ColumnMetadata (  \" text _ short \"  ,    createVarcharType (  3  2  )  )  ,    new   spi . ColumnMetadata (  \" value \"  ,    BIGINT )  )  )  ;", "JdbcTableHandle   specialTableHandle    =    metadata . getTableHandle ( SESSION ,    new   SchemaTableName (  \" exa _ ple \"  ,     \" num _ ers \"  )  )  ;", "ConnectorTableMetadata   specialTableMetadata    =    metadata . getTableMetadata ( SESSION ,    specialTableHandle )  ;", "assertEquals ( specialTableMetadata . getTable (  )  ,    new   SchemaTableName (  \" exa _ ple \"  ,     \" num _ ers \"  )  )  ;", "assertEquals ( specialTableMetadata . getColumns (  )  ,    ImmutableList . of ( new   spi . ColumnMetadata (  \" te _ t \"  ,    VARCHAR )  ,    new   spi . ColumnMetadata (  \" va % ue \"  ,    BIGINT )  )  )  ;", "unknownTableMetadata ( new   JdbcTableHandle ( TestingDatabase . CONNECTOR _ ID ,    new   SchemaTableName (  \" u \"  ,     \" numbers \"  )  ,    null ,     \" unknown \"  ,     \" unknown \"  )  )  ;", "unknownTableMetadata ( new   JdbcTableHandle ( TestingDatabase . CONNECTOR _ ID ,    new   SchemaTableName (  \" example \"  ,     \" numbers \"  )  ,    null ,     \" example \"  ,     \" unknown \"  )  )  ;", "unknownTableMetadata ( new   JdbcTableHandle ( TestingDatabase . CONNECTOR _ ID ,    new   SchemaTableName (  \" example \"  ,     \" numbers \"  )  ,    null ,     \" unknown \"  ,     \" numbers \"  )  )  ;", "}", "METHOD_END"], "methodName": ["getTableMetadata"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcMetadata"}, {"methodBody": ["METHOD_START", "{", "database    =    new   TestingDatabase (  )  ;", "metadata    =    new    ( database . getJdbcClient (  )  ,    false )  ;", "tableHandle    =    metadata . getTableHandle ( SESSION ,    new   SchemaTableName (  \" example \"  ,     \" numbers \"  )  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcMetadata"}, {"methodBody": ["METHOD_START", "{", "database . close (  )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcMetadata"}, {"methodBody": ["METHOD_START", "{", "metadata . createTable ( SESSION ,    new   com . facebook . presto . spi . ConnectorTableMetadata ( new   SchemaTableName (  \" example \"  ,     \" foo \"  )  ,    ImmutableList . of ( new   com . facebook . presto . spi . ColumnMetadata (  \" text \"  ,    VARCHAR )  )  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["testCreateTable"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcMetadata"}, {"methodBody": ["METHOD_START", "{", "try    {", "metadata . dropTable ( SESSION ,    tableHandle )  ;", "fail (  \" expected   exception \"  )  ;", "}    catch    ( PrestoException   e )     {", "assertEquals ( e . getErrorCode (  )  ,    PERMISSION _ DENIED . toErrorCode (  )  )  ;", "}", "metadata    =    new    ( database . getJdbcClient (  )  ,    true )  ;", "metadata . dropTable ( SESSION ,    tableHandle )  ;", "try    {", "metadata . getTableMetadata ( SESSION ,    tableHandle )  ;", "fail (  \" expected   exception \"  )  ;", "}    catch    ( PrestoException   e )     {", "assertEquals ( e . getErrorCode (  )  ,    NOT _ FOUND . toErrorCode (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testDropTableTable"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcMetadata"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( metadata . getColumnHandles ( SESSION ,    tableHandle )  ,    ImmutableMap . of (  \" text \"  ,    new   JdbcColumnHandle ( TestingDatabase . CONNECTOR _ ID ,     \" TEXT \"  ,    TestingJdbcTypeHandle . JDBC _ VARCHAR ,    VARCHAR )  ,     \" text _ short \"  ,    new   JdbcColumnHandle ( TestingDatabase . CONNECTOR _ ID ,     \" TEXT _ SHORT \"  ,    TestingJdbcTypeHandle . JDBC _ VARCHAR ,    createVarcharType (  3  2  )  )  ,     \" value \"  ,    new   JdbcColumnHandle ( TestingDatabase . CONNECTOR _ ID ,     \" VALUE \"  ,    TestingJdbcTypeHandle . JDBC _ BIGINT ,    BIGINT )  )  )  ;", "unknownTableColumnHandle ( new   JdbcTableHandle ( TestingDatabase . CONNECTOR _ ID ,    new   SchemaTableName (  \" unknown \"  ,     \" unknown \"  )  ,     \" unknown \"  ,     \" unknown \"  ,     \" unknown \"  )  )  ;", "unknownTableColumnHandle ( new   JdbcTableHandle ( TestingDatabase . CONNECTOR _ ID ,    new   SchemaTableName (  \" example \"  ,     \" numbers \"  )  ,    null ,     \" example \"  ,     \" unknown \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testGetColumnHandles"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcMetadata"}, {"methodBody": ["METHOD_START", "{", "JdbcTableHandle   tableHandle    =    metadata . getTableHandle ( SESSION ,    new   SchemaTableName (  \" example \"  ,     \" numbers \"  )  )  ;", "assertEquals ( metadata . getTableHandle ( SESSION ,    new   SchemaTableName (  \" example \"  ,     \" numbers \"  )  )  ,    tableHandle )  ;", "assertNull ( metadata . getTableHandle ( SESSION ,    new   SchemaTableName (  \" example \"  ,     \" unknown \"  )  )  )  ;", "assertNull ( metadata . getTableHandle ( SESSION ,    new   SchemaTableName (  \" unknown \"  ,     \" numbers \"  )  )  )  ;", "assertNull ( metadata . getTableHandle ( SESSION ,    new   SchemaTableName (  \" unknown \"  ,     \" unknown \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testGetTableHandle"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcMetadata"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( metadata . listSchemaNames ( SESSION )  . containsAll ( ImmutableSet . of (  \" example \"  ,     \" tpch \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testListSchemaNames"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcMetadata"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( ImmutableSet . copyOf ( metadata . listTables ( SESSION ,    null )  )  ,    ImmutableSet . of ( new   SchemaTableName (  \" example \"  ,     \" numbers \"  )  ,    new   SchemaTableName (  \" example \"  ,     \" view _ source \"  )  ,    new   SchemaTableName (  \" example \"  ,     \" view \"  )  ,    new   SchemaTableName (  \" tpch \"  ,     \" orders \"  )  ,    new   SchemaTableName (  \" tpch \"  ,     \" lineitem \"  )  ,    new   SchemaTableName (  \" exa _ ple \"  ,     \" table _ with _ float _ col \"  )  ,    new   SchemaTableName (  \" exa _ ple \"  ,     \" num _ ers \"  )  )  )  ;", "assertEquals ( ImmutableSet . copyOf ( metadata . listTables ( SESSION ,     \" example \"  )  )  ,    ImmutableSet . of ( new   SchemaTableName (  \" example \"  ,     \" numbers \"  )  ,    new   SchemaTableName (  \" example \"  ,     \" view _ source \"  )  ,    new   SchemaTableName (  \" example \"  ,     \" view \"  )  )  )  ;", "assertEquals ( ImmutableSet . copyOf ( metadata . listTables ( SESSION ,     \" tpch \"  )  )  ,    ImmutableSet . of ( new   SchemaTableName (  \" tpch \"  ,     \" orders \"  )  ,    new   SchemaTableName (  \" tpch \"  ,     \" lineitem \"  )  )  )  ;", "assertEquals ( ImmutableSet . copyOf ( metadata . listTables ( SESSION ,     \" exa _ ple \"  )  )  ,    ImmutableSet . of ( new   SchemaTableName (  \" exa _ ple \"  ,     \" num _ ers \"  )  ,    new   SchemaTableName (  \" exa _ ple \"  ,     \" table _ with _ float _ col \"  )  )  )  ;", "assertEquals ( ImmutableSet . copyOf ( metadata . listTables ( SESSION ,     \" unknown \"  )  )  ,    ImmutableSet . of (  )  )  ;", "}", "METHOD_END"], "methodName": ["testListTables"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcMetadata"}, {"methodBody": ["METHOD_START", "{", "try    {", "m . getColumnHandles ( SESSION ,    tableHandle )  ;", "fail (  \" Expected   getColumnHandle   of   unknown   table   to   throw   a   TableNotFoundException \"  )  ;", "}    catch    ( TableNotFoundException   ignored )     {", "}", "}", "METHOD_END"], "methodName": ["unknownTableColumnHandle"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcMetadata"}, {"methodBody": ["METHOD_START", "{", "try    {", "metadata . getTable ( SESSION ,    tableHandle )  ;", "fail (  \" Expected   getTable   of   unknown   table   to   throw   a   TableNotFoundException \"  )  ;", "}    catch    ( TableNotFoundException   ignored )     {", "}", "}", "METHOD_END"], "methodName": ["unknownTableMetadata"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcMetadata"}, {"methodBody": ["METHOD_START", "{", "ConfigAssertions . assertRecordedDefaults ( ConfigAssertions . recordDefaults ( JdbcMetadataConfig . class )  . setAllowDropTable ( false )  )  ;", "}", "METHOD_END"], "methodName": ["testDefaults"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcMetadataConfig"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    properties    =    new   Builder < String ,    String >  (  )  . put (  \" allow - drop - table \"  ,     \" true \"  )  . build (  )  ;", "expected    =    new    (  )  . setAllowDropTable ( true )  ;", "ConfigAssertions . assertFullMapping ( properties ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testExplicitPropertyMappings"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcMetadataConfig"}, {"methodBody": ["METHOD_START", "{", "JdbcOutputTableHandle   handle    =    new   JdbcOutputTableHandle (  \" connectorId \"  ,     \" catalog \"  ,     \" schema \"  ,     \" table \"  ,    ImmutableList . of (  \" abc \"  ,     \" xyz \"  )  ,    ImmutableList . of ( VARCHAR ,    VARCHAR )  ,     \" tmp _ table \"  )  ;", "MetadataUtil . assertJsonRoundTrip ( MetadataUtil . OUTPUT _ TABLE _ CODEC ,    handle )  ;", "}", "METHOD_END"], "methodName": ["testJsonRoundTrip"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcOutputTableHandle"}, {"methodBody": ["METHOD_START", "{", "database    =    new   TestingDatabase (  )  ;", "jdbcClient    =    database . getJdbcClient (  )  ;", "columns    =    ImmutableList . of ( new   JdbcColumnHandle (  \" test _ id \"  ,     \" col _  0  \"  ,    TestingJdbcTypeHandle . JDBC _ BIGINT ,    BIGINT )  ,    new   JdbcColumnHandle (  \" test _ id \"  ,     \" col _  1  \"  ,    TestingJdbcTypeHandle . JDBC _ DOUBLE ,    DOUBLE )  ,    new   JdbcColumnHandle (  \" test _ id \"  ,     \" col _  2  \"  ,    TestingJdbcTypeHandle . JDBC _ BOOLEAN ,    BOOLEAN )  ,    new   JdbcColumnHandle (  \" test _ id \"  ,     \" col _  3  \"  ,    TestingJdbcTypeHandle . JDBC _ VARCHAR ,    VARCHAR )  ,    new   JdbcColumnHandle (  \" test _ id \"  ,     \" col _  4  \"  ,    TestingJdbcTypeHandle . JDBC _ DATE ,    DATE )  ,    new   JdbcColumnHandle (  \" test _ id \"  ,     \" col _  5  \"  ,    TestingJdbcTypeHandle . JDBC _ TIME ,    TIME )  ,    new   JdbcColumnHandle (  \" test _ id \"  ,     \" col _  6  \"  ,    TestingJdbcTypeHandle . JDBC _ TIMESTAMP ,    TIMESTAMP )  ,    new   JdbcColumnHandle (  \" test _ id \"  ,     \" col _  7  \"  ,    TestingJdbcTypeHandle . JDBC _ TINYINT ,    TINYINT )  ,    new   JdbcColumnHandle (  \" test _ id \"  ,     \" col _  8  \"  ,    TestingJdbcTypeHandle . JDBC _ SMALLINT ,    SMALLINT )  ,    new   JdbcColumnHandle (  \" test _ id \"  ,     \" col _  9  \"  ,    TestingJdbcTypeHandle . JDBC _ INTEGER ,    INTEGER )  ,    new   JdbcColumnHandle (  \" test _ id \"  ,     \" col _  1  0  \"  ,    TestingJdbcTypeHandle . JDBC _ REAL ,    REAL )  )  ;", "Connection   connection    =    database . getConnection (  )  ;", "try    ( PreparedStatement   preparedStatement    =    connection . prepareStatement (  (  \" create   table    \\  \" test _ table \\  \"     (  \"     +     (  (  (  (  (  (  (  (  (  (  (  (  \"  \"     +     \"  \\  \" col _  0  \\  \"    BIGINT ,     \"  )     +     \"  \\  \" col _  1  \\  \"    DOUBLE ,     \"  )     +     \"  \\  \" col _  2  \\  \"    BOOLEAN ,     \"  )     +     \"  \\  \" col _  3  \\  \"    VARCHAR (  1  2  8  )  ,     \"  )     +     \"  \\  \" col _  4  \\  \"    DATE ,     \"  )     +     \"  \\  \" col _  5  \\  \"    TIME ,     \"  )     +     \"  \\  \" col _  6  \\  \"    TIMESTAMP ,     \"  )     +     \"  \\  \" col _  7  \\  \"    TINYINT ,     \"  )     +     \"  \\  \" col _  8  \\  \"    SMALLINT ,     \"  )     +     \"  \\  \" col _  9  \\  \"    INTEGER ,     \"  )     +     \"  \\  \" col _  1  0  \\  \"    REAL    \"  )     +     \"  )  \"  )  )  )  )     {", "preparedStatement . execute (  )  ;", "String   string    =    new   String (  \" insert   into    \\  \" test _ table \\  \"    values    \"  )  ;", "int   len    =     1  0  0  0  ;", "LocalDateTime   dateTime    =    LocalDateTime . of (  2  0  1  6  ,     3  ,     2  3  ,     1  2  ,     2  3  ,     3  7  )  ;", "for    ( int   i    =     0  ;    i    <    len ;    i +  +  )     {", "string . append ( String . format ( Locale . ENGLISH ,     \"  (  % d ,     % f ,     % b ,     ' test _ str _  % d '  ,     '  % s '  ,     '  % s '  ,     '  % s '  ,     % d ,     % d ,     % d ,     % f )  \"  ,    i ,     (  2  0  0  0  0  0  .  0     +     ( i    /     2  .  0  )  )  ,     (  ( i    %     2  )     =  =     0  )  ,    i ,    Date . valueOf ( dateTime . toLocalDate (  )  )  ,    Time . valueOf ( dateTime . toLocalTime (  )  )  ,    Timestamp . valueOf ( dateTime )  ,     ( i    %     1  2  8  )  ,     (  - i )  ,     ( i    -     1  0  0  )  ,     (  1  0  0  .  0 F    +    i )  )  )  ;", "dateTime    =    dateTime . plusHours (  2  6  )  ;", "if    ( i    !  =     ( len    -     1  )  )     {", "string . append (  \"  ,  \"  )  ;", "}", "}", "try    ( PreparedStatement   preparedStatement 2     =    connection . prepareStatement ( string . toString (  )  )  )     {", "preparedStatement 2  . execute (  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcQueryBuilder"}, {"methodBody": ["METHOD_START", "{", "database . close (  )  ;", "}", "METHOD_END"], "methodName": ["teardown"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcQueryBuilder"}, {"methodBody": ["METHOD_START", "{", "TupleDomain < ColumnHandle >    tupleDomain    =    TupleDomain . withColumnDomains ( ImmutableMap . of ( columns . get (  4  )  ,    Domain . create ( SortedRangeSet . copyOf ( DATE ,    ImmutableList . of ( Range . range ( DATE ,    TestJdbcQueryBuilder . toDays (  2  0  1  6  ,     6  ,     7  )  ,    true ,    TestJdbcQueryBuilder . toDays (  2  0  1  6  ,     6  ,     1  7  )  ,    false )  ,    Range . equal ( DATE ,    TestJdbcQueryBuilder . toDays (  2  0  1  6  ,     6  ,     3  )  )  ,    Range . equal ( DATE ,    TestJdbcQueryBuilder . toDays (  2  0  1  6  ,     1  0  ,     2  1  )  )  )  )  ,    false )  ,    columns . get (  5  )  ,    Domain . create ( SortedRangeSet . copyOf ( TIME ,    ImmutableList . of ( Range . range ( TIME ,    TestJdbcQueryBuilder . toTime (  2  0  1  6  ,     6  ,     7  ,     6  ,     1  2  ,     2  3  )  . getTime (  )  ,    false ,    TestJdbcQueryBuilder . toTime (  2  0  1  6  ,     6  ,     7  ,     8  ,     2  3  ,     3  7  )  . getTime (  )  ,    true )  ,    Range . equal ( TIME ,    TestJdbcQueryBuilder . toTime (  2  0  1  6  ,     6  ,     1  ,     2  ,     3  ,     4  )  . getTime (  )  )  ,    Range . equal ( TIME ,    TestJdbcQueryBuilder . toTime (  2  0  1  6  ,     1  0  ,     2  1  ,     2  0  ,     2  3  ,     3  7  )  . getTime (  )  )  )  )  ,    false )  )  )  ;", "Connection   connection    =    database . getConnection (  )  ;", "try    ( PreparedStatement   preparedStatement    =    new   QueryBuilder (  \"  \\  \"  \"  )  . buildSql ( jdbcClient ,    connection ,     \"  \"  ,     \"  \"  ,     \" test _ table \"  ,    columns ,    tupleDomain )  ; ResultSet   resultSet    =    preparedStatement . executeQuery (  )  )     {", "ImmutableSet . Builder < Date >    dateBuilder    =    ImmutableSet . builder (  )  ;", "ImmutableSet . Builder < Time >    timeBuilder    =    ImmutableSet . builder (  )  ;", "while    ( resultSet . next (  )  )     {", "dateBuilder . add (  (  ( Date )     ( resultSet . getObject (  \" col _  4  \"  )  )  )  )  ;", "timeBuilder . add (  (  ( Time )     ( resultSet . getObject (  \" col _  5  \"  )  )  )  )  ;", "}", "assertEquals ( dateBuilder . build (  )  ,    ImmutableSet . of ( TestJdbcQueryBuilder . toDate (  2  0  1  6  ,     6  ,     7  )  ,    TestJdbcQueryBuilder . toDate (  2  0  1  6  ,     6  ,     1  3  )  ,    TestJdbcQueryBuilder . toDate (  2  0  1  6  ,     1  0  ,     2  1  )  )  )  ;", "assertEquals ( timeBuilder . build (  )  ,    ImmutableSet . of ( TestJdbcQueryBuilder . toTime (  2  0  1  6  ,     6  ,     7  ,     8  ,     2  3  ,     3  7  )  ,    TestJdbcQueryBuilder . toTime (  2  0  1  6  ,     1  0  ,     2  1  ,     2  0  ,     2  3  ,     3  7  )  )  )  ;", "assertContains ( preparedStatement . toString (  )  ,     \"  \\  \" col _  4  \\  \"     >  =     ?  \"  )  ;", "assertContains ( preparedStatement . toString (  )  ,     \"  \\  \" col _  4  \\  \"     <     ?  \"  )  ;", "assertContains ( preparedStatement . toString (  )  ,     \"  \\  \" col _  4  \\  \"    IN    (  ?  ,  ?  )  \"  )  ;", "assertContains ( preparedStatement . toString (  )  ,     \"  \\  \" col _  5  \\  \"     >     ?  \"  )  ;", "assertContains ( preparedStatement . toString (  )  ,     \"  \\  \" col _  5  \\  \"     <  =     ?  \"  )  ;", "assertContains ( preparedStatement . toString (  )  ,     \"  \\  \" col _  5  \\  \"    IN    (  ?  ,  ?  )  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["testBuildSqlWithDateTime"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcQueryBuilder"}, {"methodBody": ["METHOD_START", "{", "TupleDomain < ColumnHandle >    tupleDomain    =    TupleDomain . withColumnDomains ( ImmutableMap . of ( columns . get (  1  0  )  ,    Domain . create ( SortedRangeSet . copyOf ( REAL ,    ImmutableList . of ( Range . equal ( REAL ,     (  ( long )     ( Float . floatToRawIntBits (  (  1  0  0  .  0 F    +     0  )  )  )  )  )  ,    Range . equal ( REAL ,     (  ( long )     ( Float . floatToRawIntBits (  (  1  0  0  .  0  0  8 F    +     0  )  )  )  )  )  ,    Range . equal ( REAL ,     (  ( long )     ( Float . floatToRawIntBits (  (  1  0  0  .  0 F    +     1  4  )  )  )  )  )  )  )  ,    false )  )  )  ;", "Connection   connection    =    database . getConnection (  )  ;", "try    ( PreparedStatement   preparedStatement    =    new    (  \"  \\  \"  \"  )  . buildSql ( jdbcClient ,    connection ,     \"  \"  ,     \"  \"  ,     \" test _ table \"  ,    columns ,    tupleDomain )  ; ResultSet   resultSet    =    preparedStatement . executeQuery (  )  )     {", "ImmutableSet . Builder < Long >    longBuilder    =    ImmutableSet . builder (  )  ;", "ImmutableSet . Builder < Float >    floatBuilder    =    ImmutableSet . builder (  )  ;", "while    ( resultSet . next (  )  )     {", "longBuilder . add (  (  ( Long )     ( resultSet . getObject (  \" col _  0  \"  )  )  )  )  ;", "floatBuilder . add (  (  ( Float )     ( resultSet . getObject (  \" col _  1  0  \"  )  )  )  )  ;", "}", "assertEquals ( longBuilder . build (  )  ,    ImmutableSet . of (  0 L ,     1  4 L )  )  ;", "assertEquals ( floatBuilder . build (  )  ,    ImmutableSet . of (  1  0  0  .  0 F ,     1  1  4  .  0 F )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testBuildSqlWithFloat"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcQueryBuilder"}, {"methodBody": ["METHOD_START", "{", "TupleDomain < ColumnHandle >    tupleDomain    =    TupleDomain . withColumnDomains ( ImmutableMap . of ( columns . get (  3  )  ,    Domain . create ( SortedRangeSet . copyOf ( VARCHAR ,    ImmutableList . of ( Range . range ( VARCHAR ,    utf 8 Slice (  \" test _ str _  7  0  0  \"  )  ,    true ,    utf 8 Slice (  \" test _ str _  7  0  2  \"  )  ,    false )  ,    Range . equal ( VARCHAR ,    utf 8 Slice (  \" test _ str _  1  8  0  \"  )  )  ,    Range . equal ( VARCHAR ,    utf 8 Slice (  \" test _ str _  1  9  6  \"  )  )  )  )  ,    false )  )  )  ;", "Connection   connection    =    database . getConnection (  )  ;", "try    ( PreparedStatement   preparedStatement    =    new    (  \"  \\  \"  \"  )  . buildSql ( jdbcClient ,    connection ,     \"  \"  ,     \"  \"  ,     \" test _ table \"  ,    columns ,    tupleDomain )  ; ResultSet   resultSet    =    preparedStatement . executeQuery (  )  )     {", "ImmutableSet . Builder < String >    builder    =    ImmutableSet . builder (  )  ;", "while    ( resultSet . next (  )  )     {", "builder . add (  (  ( String )     ( resultSet . getObject (  \" col _  3  \"  )  )  )  )  ;", "}", "assertEquals ( builder . build (  )  ,    ImmutableSet . of (  \" test _ str _  7  0  0  \"  ,     \" test _ str _  7  0  1  \"  ,     \" test _ str _  1  8  0  \"  ,     \" test _ str _  1  9  6  \"  )  )  ;", "assertContains ( preparedStatement . toString (  )  ,     \"  \\  \" col _  3  \\  \"     >  =     ?  \"  )  ;", "assertContains ( preparedStatement . toString (  )  ,     \"  \\  \" col _  3  \\  \"     <     ?  \"  )  ;", "assertContains ( preparedStatement . toString (  )  ,     \"  \\  \" col _  3  \\  \"    IN    (  ?  ,  ?  )  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["testBuildSqlWithString"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcQueryBuilder"}, {"methodBody": ["METHOD_START", "{", "TupleDomain < ColumnHandle >    tupleDomain    =    TupleDomain . withColumnDomains ( ImmutableMap . of ( columns . get (  6  )  ,    Domain . create ( SortedRangeSet . copyOf ( TIMESTAMP ,    ImmutableList . of ( Range . equal ( TIMESTAMP ,    TestJdbcQueryBuilder . toTimestamp (  2  0  1  6  ,     6  ,     3  ,     0  ,     2  3  ,     3  7  )  . getTime (  )  )  ,    Range . equal ( TIMESTAMP ,    TestJdbcQueryBuilder . toTimestamp (  2  0  1  6  ,     1  0  ,     1  9  ,     1  6  ,     2  3  ,     3  7  )  . getTime (  )  )  ,    Range . range ( TIMESTAMP ,    TestJdbcQueryBuilder . toTimestamp (  2  0  1  6  ,     6  ,     7  ,     8  ,     2  3  ,     3  7  )  . getTime (  )  ,    false ,    TestJdbcQueryBuilder . toTimestamp (  2  0  1  6  ,     6  ,     9  ,     1  2  ,     2  3  ,     3  7  )  . getTime (  )  ,    true )  )  )  ,    false )  )  )  ;", "Connection   connection    =    database . getConnection (  )  ;", "try    ( PreparedStatement   preparedStatement    =    new   QueryBuilder (  \"  \\  \"  \"  )  . buildSql ( jdbcClient ,    connection ,     \"  \"  ,     \"  \"  ,     \" test _ table \"  ,    columns ,    tupleDomain )  ; ResultSet   resultSet    =    preparedStatement . executeQuery (  )  )     {", "ImmutableSet . Builder < Timestamp >    builder    =    ImmutableSet . builder (  )  ;", "while    ( resultSet . next (  )  )     {", "builder . add (  (  ( Timestamp )     ( resultSet . getObject (  \" col _  6  \"  )  )  )  )  ;", "}", "assertEquals ( builder . build (  )  ,    ImmutableSet . of ( TestJdbcQueryBuilder . toTimestamp (  2  0  1  6  ,     6  ,     3  ,     0  ,     2  3  ,     3  7  )  ,    TestJdbcQueryBuilder . toTimestamp (  2  0  1  6  ,     6  ,     8  ,     1  0  ,     2  3  ,     3  7  )  ,    TestJdbcQueryBuilder . toTimestamp (  2  0  1  6  ,     6  ,     9  ,     1  2  ,     2  3  ,     3  7  )  ,    TestJdbcQueryBuilder . toTimestamp (  2  0  1  6  ,     1  0  ,     1  9  ,     1  6  ,     2  3  ,     3  7  )  )  )  ;", "assertContains ( preparedStatement . toString (  )  ,     \"  \\  \" col _  6  \\  \"     >     ?  \"  )  ;", "assertContains ( preparedStatement . toString (  )  ,     \"  \\  \" col _  6  \\  \"     <  =     ?  \"  )  ;", "assertContains ( preparedStatement . toString (  )  ,     \"  \\  \" col _  6  \\  \"    IN    (  ?  ,  ?  )  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["testBuildSqlWithTimestamp"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcQueryBuilder"}, {"methodBody": ["METHOD_START", "{", "TupleDomain < ColumnHandle >    tupleDomain    =    TupleDomain . withColumnDomains ( ImmutableMap . of ( columns . get (  0  )  ,    Domain . all ( BIGINT )  ,    columns . get (  1  )  ,    Domain . onlyNull ( DOUBLE )  )  )  ;", "Connection   connection    =    database . getConnection (  )  ;", "try    ( PreparedStatement   preparedStatement    =    new    (  \"  \\  \"  \"  )  . buildSql ( jdbcClient ,    connection ,     \"  \"  ,     \"  \"  ,     \" test _ table \"  ,    columns ,    tupleDomain )  ; ResultSet   resultSet    =    preparedStatement . executeQuery (  )  )     {", "assertEquals ( resultSet . next (  )  ,    false )  ;", "}", "}", "METHOD_END"], "methodName": ["testEmptyBuildSql"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcQueryBuilder"}, {"methodBody": ["METHOD_START", "{", "TupleDomain < ColumnHandle >    tupleDomain    =    TupleDomain . withColumnDomains ( ImmutableMap .  < ColumnHandle ,    Domain > builder (  )  . put ( columns . get (  0  )  ,    Domain . create ( SortedRangeSet . copyOf ( BIGINT ,    ImmutableList . of ( Range . equal ( BIGINT ,     1  2  8 L )  ,    Range . equal ( BIGINT ,     1  8  0 L )  ,    Range . equal ( BIGINT ,     2  3  3 L )  ,    Range . lessThan ( BIGINT ,     2  5 L )  ,    Range . range ( BIGINT ,     6  6 L ,    true ,     9  6 L ,    true )  ,    Range . greaterThan ( BIGINT ,     1  9  2 L )  )  )  ,    false )  )  . put ( columns . get (  1  )  ,    Domain . create ( SortedRangeSet . copyOf ( DOUBLE ,    ImmutableList . of ( Range . equal ( DOUBLE ,     2  0  0  0  1  1  .  0  )  ,    Range . equal ( DOUBLE ,     2  0  0  0  1  4  .  0  )  ,    Range . equal ( DOUBLE ,     2  0  0  0  1  7  .  0  )  ,    Range . equal ( DOUBLE ,     2  0  0  1  1  6  .  5  )  ,    Range . range ( DOUBLE ,     2  0  0  0  3  0  .  0  ,    true ,     2  0  0  0  3  6  .  0  ,    true )  ,    Range . range ( DOUBLE ,     2  0  0  0  4  8  .  0  ,    true ,     2  0  0  0  9  9  .  0  ,    true )  )  )  ,    false )  )  . put ( columns . get (  7  )  ,    Domain . create ( SortedRangeSet . copyOf ( TINYINT ,    ImmutableList . of ( Range . range ( TINYINT ,     6  0 L ,    true ,     7  0 L ,    false )  ,    Range . range ( TINYINT ,     5  2 L ,    true ,     5  5 L ,    false )  )  )  ,    false )  )  . put ( columns . get (  8  )  ,    Domain . create ( SortedRangeSet . copyOf ( SMALLINT ,    ImmutableList . of ( Range . range ( SMALLINT ,     (  -  7  5 L )  ,    true ,     (  -  6  8 L )  ,    true )  ,    Range . range ( SMALLINT ,     (  -  2  0  0 L )  ,    true ,     (  -  1  0  0 L )  ,    false )  )  )  ,    false )  )  . put ( columns . get (  9  )  ,    Domain . create ( SortedRangeSet . copyOf ( INTEGER ,    ImmutableList . of ( Range . equal ( INTEGER ,     8  0 L )  ,    Range . equal ( INTEGER ,     9  6 L )  ,    Range . lessThan ( INTEGER ,     0 L )  )  )  ,    false )  )  . put ( columns . get (  2  )  ,    Domain . create ( SortedRangeSet . copyOf ( BOOLEAN ,    ImmutableList . of ( Range . equal ( BOOLEAN ,    true )  )  )  ,    false )  )  . build (  )  )  ;", "Connection   connection    =    database . getConnection (  )  ;", "try    ( PreparedStatement   preparedStatement    =    new    (  \"  \\  \"  \"  )  . buildSql ( jdbcClient ,    connection ,     \"  \"  ,     \"  \"  ,     \" test _ table \"  ,    columns ,    tupleDomain )  ; ResultSet   resultSet    =    preparedStatement . executeQuery (  )  )     {", "ImmutableSet . Builder < Long >    builder    =    ImmutableSet . builder (  )  ;", "while    ( resultSet . next (  )  )     {", "builder . add (  (  ( Long )     ( resultSet . getObject (  \" col _  0  \"  )  )  )  )  ;", "}", "assertEquals ( builder . build (  )  ,    ImmutableSet . of (  6  8 L ,     1  8  0 L ,     1  9  6 L )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testNormalBuildSql"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcQueryBuilder"}, {"methodBody": ["METHOD_START", "{", "return   Date . valueOf ( String . format (  \"  % d -  % d -  % d \"  ,    year ,    month ,    day )  )  ;", "}", "METHOD_END"], "methodName": ["toDate"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcQueryBuilder"}, {"methodBody": ["METHOD_START", "{", "return   ChronoUnit . DAYS . between ( LocalDate . of (  1  9  7  0  ,     1  ,     1  )  ,    LocalDate . of ( year ,    month ,    day )  )  ;", "}", "METHOD_END"], "methodName": ["toDays"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcQueryBuilder"}, {"methodBody": ["METHOD_START", "{", "return   Time . valueOf ( LocalDateTime . of ( year ,    month ,    day ,    hour ,    minute ,    second )  . toLocalTime (  )  )  ;", "}", "METHOD_END"], "methodName": ["toTime"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcQueryBuilder"}, {"methodBody": ["METHOD_START", "{", "return   Timestamp . valueOf ( LocalDateTime . of ( year ,    month ,    day ,    hour ,    minute ,    second )  )  ;", "}", "METHOD_END"], "methodName": ["toTimestamp"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcQueryBuilder"}, {"methodBody": ["METHOD_START", "{", "database    =    new   TestingDatabase (  )  ;", "jdbcClient    =    database . geClient (  )  ;", "split    =    database . getSplit (  \" example \"  ,     \" numbers \"  )  ;", "columnHandles    =    database . getColumnHandles (  \" example \"  ,     \" numbers \"  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcRecordSet"}, {"methodBody": ["METHOD_START", "{", "database . close (  )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcRecordSet"}, {"methodBody": ["METHOD_START", "{", "RecordSet   recordSet    =    new   JdbcRecordSet ( jdbcClient ,    TestJdbcRecordSet . session ,    split ,    ImmutableList . of ( columnHandles . get (  \" value \"  )  ,    columnHandles . get (  \" value \"  )  ,    columnHandles . get (  \" text \"  )  )  )  ;", "try    ( RecordCursor   cursor    =    recordSet . cursor (  )  )     {", "assertEquals ( cursor . getType (  0  )  ,    BIGINT )  ;", "assertEquals ( cursor . getType (  1  )  ,    BIGINT )  ;", "assertEquals ( cursor . getType (  2  )  ,    VARCHAR )  ;", "Map < String ,    Long >    data    =    new   LinkedHashMap <  >  (  )  ;", "while    ( cursor . advanceNextPosition (  )  )     {", "assertEquals ( cursor . getLong (  0  )  ,    cursor . getLong (  1  )  )  ;", "data . put ( cursor . getSlice (  2  )  . toStringUtf 8  (  )  ,    cursor . getLong (  0  )  )  ;", "}", "assertEquals ( data ,    ImmutableMap .  < String ,    Long > builder (  )  . put (  \" one \"  ,     1 L )  . put (  \" two \"  ,     2 L )  . put (  \" three \"  ,     3 L )  . put (  \" ten \"  ,     1  0 L )  . put (  \" eleven \"  ,     1  1 L )  . put (  \" twelve \"  ,     1  2 L )  . build (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testCursorMixedOrder"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcRecordSet"}, {"methodBody": ["METHOD_START", "{", "RecordSet   recordSet    =    new   JdbcRecordSet ( jdbcClient ,    TestJdbcRecordSet . session ,    split ,    ImmutableList . of ( columnHandles . get (  \" text \"  )  ,    columnHandles . get (  \" text _ short \"  )  ,    columnHandles . get (  \" value \"  )  )  )  ;", "try    ( RecordCursor   cursor    =    recordSet . cursor (  )  )     {", "assertEquals ( cursor . getType (  0  )  ,    VARCHAR )  ;", "assertEquals ( cursor . getType (  1  )  ,    createVarcharType (  3  2  )  )  ;", "assertEquals ( cursor . getType (  2  )  ,    BIGINT )  ;", "Map < String ,    Long >    data    =    new   LinkedHashMap <  >  (  )  ;", "while    ( cursor . advanceNextPosition (  )  )     {", "data . put ( cursor . getSlice (  0  )  . toStringUtf 8  (  )  ,    cursor . getLong (  2  )  )  ;", "assertEquals ( cursor . getSlice (  0  )  ,    cursor . getSlice (  1  )  )  ;", "assertFalse ( cursor . isNull (  0  )  )  ;", "assertFalse ( cursor . isNull (  1  )  )  ;", "assertFalse ( cursor . isNull (  2  )  )  ;", "}", "assertEquals ( data ,    ImmutableMap .  < String ,    Long > builder (  )  . put (  \" one \"  ,     1 L )  . put (  \" two \"  ,     2 L )  . put (  \" three \"  ,     3 L )  . put (  \" ten \"  ,     1  0 L )  . put (  \" eleven \"  ,     1  1 L )  . put (  \" twelve \"  ,     1  2 L )  . build (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testCursorSimple"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcRecordSet"}, {"methodBody": ["METHOD_START", "{", "RecordSet   recordSet    =    new   JdbcRecordSet ( jdbcClient ,    TestJdbcRecordSet . session ,    split ,    ImmutableList . of ( new   JdbcColumnHandle (  \" test \"  ,     \" text \"  ,    TestingJdbcTypeHandle . JDBC _ VARCHAR ,    VARCHAR )  ,    new   JdbcColumnHandle (  \" test \"  ,     \" text _ short \"  ,    TestingJdbcTypeHandle . JDBC _ VARCHAR ,    createVarcharType (  3  2  )  )  ,    new   JdbcColumnHandle (  \" test \"  ,     \" value \"  ,    TestingJdbcTypeHandle . JDBC _ BIGINT ,    BIGINT )  )  )  ;", "assertEquals ( recordSet . getColumnTypes (  )  ,    ImmutableList . of ( VARCHAR ,    createVarcharType (  3  2  )  ,    BIGINT )  )  ;", "recordSet    =    new   JdbcRecordSet ( jdbcClient ,    TestJdbcRecordSet . session ,    split ,    ImmutableList . of ( new   JdbcColumnHandle (  \" test \"  ,     \" value \"  ,    TestingJdbcTypeHandle . JDBC _ BIGINT ,    BIGINT )  ,    new   JdbcColumnHandle (  \" test \"  ,     \" text \"  ,    TestingJdbcTypeHandle . JDBC _ VARCHAR ,    VARCHAR )  )  )  ;", "assertEquals ( recordSet . getColumnTypes (  )  ,    ImmutableList . of ( BIGINT ,    VARCHAR )  )  ;", "recordSet    =    new   JdbcRecordSet ( jdbcClient ,    TestJdbcRecordSet . session ,    split ,    ImmutableList . of ( new   JdbcColumnHandle (  \" test \"  ,     \" value \"  ,    TestingJdbcTypeHandle . JDBC _ BIGINT ,    BIGINT )  ,    new   JdbcColumnHandle (  \" test \"  ,     \" value \"  ,    TestingJdbcTypeHandle . JDBC _ BIGINT ,    BIGINT )  ,    new   JdbcColumnHandle (  \" test \"  ,     \" text \"  ,    TestingJdbcTypeHandle . JDBC _ VARCHAR ,    VARCHAR )  )  )  ;", "assertEquals ( recordSet . getColumnTypes (  )  ,    ImmutableList . of ( BIGINT ,    BIGINT ,    VARCHAR )  )  ;", "recordSet    =    new   JdbcRecordSet ( jdbcClient ,    TestJdbcRecordSet . session ,    split ,    ImmutableList . of (  )  )  ;", "assertEquals ( recordSet . getColumnTypes (  )  ,    ImmutableList . of (  )  )  ;", "}", "METHOD_END"], "methodName": ["testGetColumnTypes"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcRecordSet"}, {"methodBody": ["METHOD_START", "{", "RecordSet   recordSet    =    new   JdbcRecordSet ( jdbcClient ,    TestJdbcRecordSet . session ,    split ,    ImmutableList . of ( columnHandles . get (  \" value \"  )  ,    columnHandles . get (  \" value \"  )  ,    columnHandles . get (  \" text \"  )  )  )  ;", "RecordCursor   cursor    =    recordSet . cursor (  )  ;", "cursor . close (  )  ;", "cursor . close (  )  ;", "}", "METHOD_END"], "methodName": ["testIdempotentClose"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcRecordSet"}, {"methodBody": ["METHOD_START", "{", "JdbcTableLayoutHandle   layoutHandle    =    new   JdbcTableLayoutHandle ( jdbcTableHandle ,    domain )  ;", "ConnectorSplitSource   splits    =    jdbcClient . getSplits ( layoutHandle )  ;", "JdbcSplit   split    =     (  ( JdbcSplit )     ( getOnlyElement ( MoreFutures . getFutureValue ( splits . getNextBatch ( NOT _ PARTITIONED ,     1  0  0  0  )  )  . getSplits (  )  )  )  )  ;", "ConnectorTransactionHandle   transaction    =    new   JdbcTransactionHandle (  )  ;", "recordSetProvider    =    new    ( jdbcClient )  ;", "RecordSet   recordSet    =    recordSetProvider . getRecordSet ( transaction ,    SESSION ,    split ,    columns )  ;", "return   recordSet . cursor (  )  ;", "}", "METHOD_END"], "methodName": ["getCursor"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcRecordSetProvider"}, {"methodBody": ["METHOD_START", "{", "database    =    new   TestingDatabase (  )  ;", "jdbcClient    =    database . geClient (  )  ;", "split    =    database . getSplit (  \" example \"  ,     \" numbers \"  )  ;", "table    =    jdbcClient . getTableHandle ( new   SchemaTableName (  \" example \"  ,     \" numbers \"  )  )  ;", "Map < String ,    JdbcColumnHandle >    columns    =    database . getColumnHandles (  \" example \"  ,     \" numbers \"  )  ;", "textColumn    =    columns . get (  \" text \"  )  ;", "textShortColumn    =    columns . get (  \" text _ short \"  )  ;", "valueColumn    =    columns . get (  \" value \"  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcRecordSetProvider"}, {"methodBody": ["METHOD_START", "{", "database . close (  )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcRecordSetProvider"}, {"methodBody": ["METHOD_START", "{", "ConnectorTransactionHandle   transaction    =    new   JdbcTransactionHandle (  )  ;", "recordSetProvider    =    new    ( jdbcClient )  ;", "RecordSet   recordSet    =    recordSetProvider . getRecordSet ( transaction ,    SESSION ,    split ,    ImmutableList . of ( textColumn ,    textShortColumn ,    valueColumn )  )  ;", "assertNotNull ( recordSet ,     \" recordSet   is   null \"  )  ;", "RecordCursor   cursor    =    recordSet . cursor (  )  ;", "assertNotNull ( cursor ,     \" cursor   is   null \"  )  ;", "Map < String ,    Long >    data    =    new   LinkedHashMap <  >  (  )  ;", "while    ( cursor . advanceNextPosition (  )  )     {", "data . put ( cursor . getSlice (  0  )  . toStringUtf 8  (  )  ,    cursor . getLong (  2  )  )  ;", "assertEquals ( cursor . getSlice (  0  )  ,    cursor . getSlice (  1  )  )  ;", "}", "assertEquals ( data ,    ImmutableMap .  < String ,    Long > builder (  )  . put (  \" one \"  ,     1 L )  . put (  \" two \"  ,     2 L )  . put (  \" three \"  ,     3 L )  . put (  \" ten \"  ,     1  0 L )  . put (  \" eleven \"  ,     1  1 L )  . put (  \" twelve \"  ,     1  2 L )  . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["testGetRecordSet"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcRecordSetProvider"}, {"methodBody": ["METHOD_START", "{", "getCursor ( table ,    ImmutableList . of ( textColumn ,    valueColumn )  ,    TupleDomain . withColumnDomains ( ImmutableMap . of ( textColumn ,    Domain . singleValue ( VARCHAR ,    utf 8 Slice (  \" foo \"  )  )  )  )  )  ;", "getCursor ( table ,    ImmutableList . of ( textColumn ,    valueColumn )  ,    TupleDomain . withColumnDomains ( ImmutableMap . of ( textColumn ,    Domain . union ( ImmutableList . of ( Domain . singleValue ( VARCHAR ,    utf 8 Slice (  \" foo \"  )  )  ,    Domain . singleValue ( VARCHAR ,    utf 8 Slice (  \" bar \"  )  )  )  )  )  )  )  ;", "getCursor ( table ,    ImmutableList . of ( textColumn ,    valueColumn )  ,    TupleDomain . withColumnDomains ( ImmutableMap . of ( textColumn ,    Domain . create ( ValueSet . ofRanges ( Range . greaterThan ( VARCHAR ,    utf 8 Slice (  \" foo \"  )  )  )  ,    false )  )  )  )  ;", "getCursor ( table ,    ImmutableList . of ( textColumn ,    valueColumn )  ,    TupleDomain . withColumnDomains ( ImmutableMap . of ( textColumn ,    Domain . create ( ValueSet . ofRanges ( Range . greaterThan ( VARCHAR ,    utf 8 Slice (  \" foo \"  )  )  )  ,    false )  )  )  )  ;", "getCursor ( table ,    ImmutableList . of ( textColumn ,    valueColumn )  ,    TupleDomain . withColumnDomains ( ImmutableMap . of ( textColumn ,    Domain . create ( ValueSet . ofRanges ( Range . lessThanOrEqual ( VARCHAR ,    utf 8 Slice (  \" foo \"  )  )  )  ,    false )  )  )  )  ;", "getCursor ( table ,    ImmutableList . of ( textColumn ,    valueColumn )  ,    TupleDomain . withColumnDomains ( ImmutableMap . of ( textColumn ,    Domain . create ( ValueSet . ofRanges ( Range . lessThan ( VARCHAR ,    utf 8 Slice (  \" foo \"  )  )  )  ,    false )  )  )  )  ;", "getCursor ( table ,    ImmutableList . of ( textColumn ,    valueColumn )  ,    TupleDomain . withColumnDomains ( ImmutableMap . of ( textColumn ,    Domain . onlyNull ( VARCHAR )  )  )  )  ;", "getCursor ( table ,    ImmutableList . of ( textColumn ,    valueColumn )  ,    TupleDomain . withColumnDomains ( ImmutableMap . of ( textColumn ,    Domain . notNull ( VARCHAR )  )  )  )  ;", "getCursor ( table ,    ImmutableList . of ( textColumn ,    valueColumn )  ,    TupleDomain . withColumnDomains ( ImmutableMap . of ( textColumn ,    Domain . union ( ImmutableList . of ( Domain . singleValue ( VARCHAR ,    utf 8 Slice (  \" foo \"  )  )  ,    Domain . onlyNull ( VARCHAR )  )  )  )  )  )  ;", "getCursor ( table ,    ImmutableList . of ( textColumn ,    valueColumn )  ,    TupleDomain . withColumnDomains ( ImmutableMap . of ( textColumn ,    Domain . create ( ValueSet . ofRanges ( Range . range ( VARCHAR ,    utf 8 Slice (  \" bar \"  )  ,    true ,    utf 8 Slice (  \" foo \"  )  ,    true )  )  ,    false )  )  )  )  ;", "getCursor ( table ,    ImmutableList . of ( textColumn ,    textShortColumn ,    valueColumn )  ,    TupleDomain . withColumnDomains ( ImmutableMap . of ( textColumn ,    Domain . create ( ValueSet . ofRanges ( Range . range ( VARCHAR ,    utf 8 Slice (  \" bar \"  )  ,    true ,    utf 8 Slice (  \" foo \"  )  ,    true )  ,    Range . range ( VARCHAR ,    utf 8 Slice (  \" hello \"  )  ,    false ,    utf 8 Slice (  \" world \"  )  ,    false )  )  ,    false )  ,    textShortColumn ,    Domain . create ( ValueSet . ofRanges ( Range . range ( createVarcharType (  3  2  )  ,    utf 8 Slice (  \" bar \"  )  ,    true ,    utf 8 Slice (  \" foo \"  )  ,    true )  ,    Range . range ( createVarcharType (  3  2  )  ,    utf 8 Slice (  \" hello \"  )  ,    false ,    utf 8 Slice (  \" world \"  )  ,    false )  )  ,    false )  )  )  )  ;", "getCursor ( table ,    ImmutableList . of ( textColumn ,    valueColumn )  ,    TupleDomain . withColumnDomains ( ImmutableMap . of ( textColumn ,    Domain . create ( ValueSet . ofRanges ( Range . range ( VARCHAR ,    utf 8 Slice (  \" bar \"  )  ,    true ,    utf 8 Slice (  \" foo \"  )  ,    true )  ,    Range . range ( VARCHAR ,    utf 8 Slice (  \" hello \"  )  ,    false ,    utf 8 Slice (  \" world \"  )  ,    false )  ,    Range . equal ( VARCHAR ,    utf 8 Slice (  \" apple \"  )  )  ,    Range . equal ( VARCHAR ,    utf 8 Slice (  \" banana \"  )  )  ,    Range . equal ( VARCHAR ,    utf 8 Slice (  \" zoo \"  )  )  )  ,    false )  ,    valueColumn ,    Domain . create ( ValueSet . ofRanges ( Range . range ( BIGINT ,     1 L ,    true ,     5 L ,    true )  ,    Range . range ( BIGINT ,     1  0 L ,    false ,     2  0 L ,    false )  )  ,    true )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testTupleDomain"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcRecordSetProvider"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( split . getAddresses (  )  ,    ImmutableList . of (  )  )  ;", "assertEquals ( split . isRemotelyAccessible (  )  ,    true )  ;", "jdbcSplit    =    new    (  \" connectorId \"  ,     \" catalog \"  ,     \" schemaName \"  ,     \" tableName \"  ,    TupleDomain . all (  )  )  ;", "assertEquals ( jdbcSplit . getAddresses (  )  ,    ImmutableList . of (  )  )  ;", "}", "METHOD_END"], "methodName": ["testAddresses"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcSplit"}, {"methodBody": ["METHOD_START", "{", "JsonCodec < JdbcSplit >    codec    =    jsonCodec ( JdbcSplit . class )  ;", "String   json    =    codec . toJson ( split )  ;", "JdbcSplit   copy    =    codec . fromJson ( json )  ;", "assertEquals ( copy . getConnectorId (  )  ,    split . getConnectorId (  )  )  ;", "assertEquals ( copy . getSchemaName (  )  ,    split . getSchemaName (  )  )  ;", "assertEquals ( copy . getTableName (  )  ,    split . getTableName (  )  )  ;", "assertEquals ( copy . getAddresses (  )  ,    ImmutableList . of (  )  )  ;", "assertEquals ( copy . isRemotelyAccessible (  )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["testJsonRoundTrip"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcSplit"}, {"methodBody": ["METHOD_START", "{", "EquivalenceTester . equivalenceTester (  )  . addEquivalentGroup ( new   JdbcTableHandle (  \" connectorId \"  ,    new   SchemaTableName (  \" schema \"  ,     \" table \"  )  ,     \" jdbcCatalog \"  ,     \" jdbcSchema \"  ,     \" jdbcTable \"  )  ,    new   JdbcTableHandle (  \" connectorId \"  ,    new   SchemaTableName (  \" schema \"  ,     \" table \"  )  ,     \" jdbcCatalogX \"  ,     \" jdbcSchema \"  ,     \" jdbcTable \"  )  ,    new   JdbcTableHandle (  \" connectorId \"  ,    new   SchemaTableName (  \" schema \"  ,     \" table \"  )  ,     \" jdbcCatalog \"  ,     \" jdbcSchemaX \"  ,     \" jdbcTable \"  )  ,    new   JdbcTableHandle (  \" connectorId \"  ,    new   SchemaTableName (  \" schema \"  ,     \" table \"  )  ,     \" jdbcCatalog \"  ,     \" jdbcSchema \"  ,     \" jdbcTableX \"  )  )  . addEquivalentGroup ( new   JdbcTableHandle (  \" connectorIdX \"  ,    new   SchemaTableName (  \" schema \"  ,     \" table \"  )  ,     \" jdbcCatalog \"  ,     \" jdbcSchema \"  ,     \" jdbcTable \"  )  ,    new   JdbcTableHandle (  \" connectorIdX \"  ,    new   SchemaTableName (  \" schema \"  ,     \" table \"  )  ,     \" jdbcCatalogX \"  ,     \" jdbcSchema \"  ,     \" jdbcTable \"  )  ,    new   JdbcTableHandle (  \" connectorIdX \"  ,    new   SchemaTableName (  \" schema \"  ,     \" table \"  )  ,     \" jdbcCatalog \"  ,     \" jdbcSchemaX \"  ,     \" jdbcTable \"  )  ,    new   JdbcTableHandle (  \" connectorIdX \"  ,    new   SchemaTableName (  \" schema \"  ,     \" table \"  )  ,     \" jdbcCatalog \"  ,     \" jdbcSchema \"  ,     \" jdbcTableX \"  )  )  . addEquivalentGroup ( new   JdbcTableHandle (  \" connectorId \"  ,    new   SchemaTableName (  \" schemaX \"  ,     \" table \"  )  ,     \" jdbcCatalog \"  ,     \" jdbcSchema \"  ,     \" jdbcTable \"  )  ,    new   JdbcTableHandle (  \" connectorId \"  ,    new   SchemaTableName (  \" schemaX \"  ,     \" table \"  )  ,     \" jdbcCatalogX \"  ,     \" jdbcSchema \"  ,     \" jdbcTable \"  )  ,    new   JdbcTableHandle (  \" connectorId \"  ,    new   SchemaTableName (  \" schemaX \"  ,     \" table \"  )  ,     \" jdbcCatalog \"  ,     \" jdbcSchemaX \"  ,     \" jdbcTable \"  )  ,    new   JdbcTableHandle (  \" connectorId \"  ,    new   SchemaTableName (  \" schemaX \"  ,     \" table \"  )  ,     \" jdbcCatalog \"  ,     \" jdbcSchema \"  ,     \" jdbcTableX \"  )  )  . check (  )  ;", "}", "METHOD_END"], "methodName": ["testEquivalence"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcTableHandle"}, {"methodBody": ["METHOD_START", "{", "MetadataUtil . assertJsonRoundTrip ( MetadataUtil . TABLE _ CODEC ,    new   JdbcTableHandle (  \" connectorId \"  ,    new   SchemaTableName (  \" schema \"  ,     \" table \"  )  ,     \" jdbcCatalog \"  ,     \" jdbcSchema \"  ,     \" jdbcTable \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testJsonRoundTrip"], "fileName": "com.facebook.presto.plugin.jdbc.TestJdbcTableHandle"}, {"methodBody": ["METHOD_START", "{", "JdbcTableHandle   tableHandle    =    jdbcClient . getTableHandle ( new   SchemaTableName ( schemaName ,    tableName )  )  ;", "List < JdbcColumnHandle >    columns    =    jdbcClient . getColumns (  . session ,    tableHandle )  ;", "checkArgument (  ( columns    !  =    null )  ,     \" table   not   found :     % s .  % s \"  ,    schemaName ,    tableName )  ;", "Builder < String ,    JdbcColumnHandle >    columnHandles    =    ImmutableMap . builder (  )  ;", "for    ( JdbcColumnHandle   column    :    columns )     {", "columnHandles . put ( column . getColumnMetadata (  )  . getName (  )  ,    column )  ;", "}", "return   columnHandles . build (  )  ;", "}", "METHOD_END"], "methodName": ["getColumnHandles"], "fileName": "com.facebook.presto.plugin.jdbc.TestingDatabase"}, {"methodBody": ["METHOD_START", "{", "return   connection ;", "}", "METHOD_END"], "methodName": ["getConnection"], "fileName": "com.facebook.presto.plugin.jdbc.TestingDatabase"}, {"methodBody": ["METHOD_START", "{", "return   jdbcClient ;", "}", "METHOD_END"], "methodName": ["getJdbcClient"], "fileName": "com.facebook.presto.plugin.jdbc.TestingDatabase"}, {"methodBody": ["METHOD_START", "{", "JdbcTableHandle   jdbcTableHandle    =    jdbcClient . getTableHandle ( new   SchemaTableName ( schemaName ,    tableName )  )  ;", "JdbcTableLayoutHandle   jdbcLayoutHandle    =    new   JdbcTableLayoutHandle ( jdbcTableHandle ,    TupleDomain . all (  )  )  ;", "ConnectorSplitSource   splits    =    jdbcClient . getSplits ( jdbcLayoutHandle )  ;", "return    (  ( JdbcSplit )     ( getOnlyElement ( MoreFutures . getFutureValue ( splits . getNextBatch ( NOT _ PARTITIONED ,     1  0  0  0  )  )  . getSplits (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getSplit"], "fileName": "com.facebook.presto.plugin.jdbc.TestingDatabase"}, {"methodBody": ["METHOD_START", "{", "return   ImmutableMap .  < String ,    String > builder (  )  . put (  \" connection - url \"  ,    String . format (  \" jdbc : h 2  : mem : test % s ; DB _ CLOSE _ DELAY =  -  1  \"  ,    System . nanoTime (  )  )  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["createProperties"], "fileName": "com.facebook.presto.plugin.jdbc.TestingH2JdbcModule"}, {"methodBody": ["METHOD_START", "{", "return   new   BaseJdbcClient ( id ,    config ,     \"  \\  \"  \"  ,    new   DriverConnectionFactory ( new   Driver (  )  ,    config )  )  ;", "}", "METHOD_END"], "methodName": ["provideJdbcClient"], "fileName": "com.facebook.presto.plugin.jdbc.TestingH2JdbcModule"}]