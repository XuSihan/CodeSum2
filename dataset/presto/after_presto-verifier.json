[{"methodBody": ["METHOD_START", "{", "long   bits    =    Double . doubleToRawLongBits ( value )  ;", "return   bits    ^     (  ( bits    >  >     6  3  )     &     ( Long . MAX _ VALUE )  )  ;", "}", "METHOD_END"], "methodName": ["doubleToSortableLong"], "fileName": "com.facebook.presto.verifier.HumanReadableEventClient"}, {"methodBody": ["METHOD_START", "{", "double   p 5  0     =    HumanReadableEventClient . sortableLongToDouble ( digest . getQuantile (  0  .  5  )  )  ;", "long   count    =     (  ( long )     ( digest . getCount (  )  )  )  ;", "double   countRatio    =     (  1  .  0     *    count )     /    totalCount ;", "String   maxValue    =     ( max    =  =     ( Double . POSITIVE _ INFINITY )  )     ?     \" inf \"     :    String . format (  \"  %  3  .  1 f \"  ,    max )  ;", "return   String . format (  \"  %  3  .  1 f    -     % s       (  %  4  .  2 f )     %  6 d       (  %  4  .  1 f %  %  )  \"  ,    min ,    maxValue ,    p 5  0  ,    count ,     ( countRatio    *     1  0  0  )  )  ;", "}", "METHOD_END"], "methodName": ["formatBucket"], "fileName": "com.facebook.presto.verifier.HumanReadableEventClient"}, {"methodBody": ["METHOD_START", "{", "Double   controlCpuTime    =    queryEvent . getControlCpuTimeSecs (  )  ;", "Double   testCpuTime    =    queryEvent . getTestCpuTimeSecs (  )  ;", "if    (  ( controlCpuTime    =  =    null )     |  |     ( testCpuTime    =  =    null )  )     {", "return   Optional . empty (  )  ;", "}", "if    ( controlCpuTime    <     ( regressionMinCpuTime . getValue ( TimeUnit . SECONDS )  )  )     {", "return   Optional . empty (  )  ;", "}", "double   value    =    testCpuTime    /    controlCpuTime ;", "if    ( Double . isNaN ( value )  )     {", "value    =     1  .  0  ;", "}", "return   Optional . of ( value )  ;", "}", "METHOD_END"], "methodName": ["getCpuRatio"], "fileName": "com.facebook.presto.verifier.HumanReadableEventClient"}, {"methodBody": ["METHOD_START", "{", "if    (  ( Pattern . matches ( skipCpuCheckRegex ,    queryEvent . getTestQuery (  )  )  )     |  |     ( Pattern . matches ( skipCpuCheckRegex ,    queryEvent . getControlQuery (  )  )  )  )     {", "return   false ;", "}", "return   checkCpu ;", "}", "METHOD_END"], "methodName": ["isCheckCpu"], "fileName": "com.facebook.presto.verifier.HumanReadableEventClient"}, {"methodBody": ["METHOD_START", "{", "System . out . println (  \"  -  -  -  -  -  -  -  -  -  -  \"  )  ;", "System . out . println (  (  \" Name :     \"     +     ( query . getName (  )  )  )  )  ;", "System . out . println (  (  \" Schema    ( control )  :     \"     +     ( query . getControlSchema (  )  )  )  )  ;", "System . out . println (  (  \" Schema    ( test )  :     \"     +     ( query . getTestSchema (  )  )  )  )  ;", "System . out . println (  (  \" Valid :     \"     +     (  !  ( query . isFailed (  )  )  )  )  )  ;", "for    ( int   i    =     0  ;    i    <     ( query . getTestSetupQueries (  )  . size (  )  )  ;    i +  +  )     {", "System . out . println ( String . format (  \" Setup   query    ( test )     #  % s :     % s \"  ,    i ,    query . getTestSetupQueries (  )  . get ( i )  )  )  ;", "}", "System . out . println (  (  \" Query    ( test )  :     \"     +     ( query . getTestQuery (  )  )  )  )  ;", "for    ( int   i    =     0  ;    i    <     ( query . getTestTeardownQueries (  )  . size (  )  )  ;    i +  +  )     {", "System . out . println ( String . format (  \" Teardown   query    ( test )     #  % s :     % s \"  ,    i ,    query . getTestTeardownQueries (  )  . get ( i )  )  )  ;", "}", "if    ( query . isFailed (  )  )     {", "System . out . println (  (  \"  \\ nError   message :  \\ n \"     +     ( query . getErrorMessage (  )  )  )  )  ;", "} else    {", "System . out . println (  (  \" Control   Duration    ( secs )  :     \"     +     ( query . getControlWallTimeSecs (  )  )  )  )  ;", "System . out . println (  (  \"          Test   Duration    ( secs )  :     \"     +     ( query . getTestWallTimeSecs (  )  )  )  )  ;", "Optional < Double >    cpuRatio    =    getCpuRatio ( query )  ;", "if    ( cpuRatio . isPresent (  )  )     {", "System . out . println (  (  \" Control   CPU    ( secs )  :     \"     +     ( query . getControlCpuTimeSecs (  )  )  )  )  ;", "System . out . println (  (  \"          Test   CPU    ( secs )  :     \"     +     ( query . getTestCpuTimeSecs (  )  )  )  )  ;", "System . out . println ( String . format (  \"                            CPU   Ratio :     %  .  1 f \\ n \"  ,     (  ( double )     ( cpuRatio . get (  )  )  )  )  )  ;", "}", "}", "System . out . println (  \"  -  -  -  -  -  -  -  -  -  -  \"  )  ;", "}", "METHOD_END"], "methodName": ["printEvent"], "fileName": "com.facebook.presto.verifier.HumanReadableEventClient"}, {"methodBody": ["METHOD_START", "{", "if    ( cpuRatio    <  =     ( HumanReadableEventClient . LARGE _ SPEEDUP )  )     {", "cpuRatioLargeSpeedup . add ( HumanReadableEventClient . doubleToSortableLong ( cpuRatio )  )  ;", "} else", "if    ( cpuRatio    <  =     ( HumanReadableEventClient . SMALL _ SPEEDUP )  )     {", "cpuRatioSmallSpeedup . add ( HumanReadableEventClient . doubleToSortableLong ( cpuRatio )  )  ;", "} else", "if    ( cpuRatio    <  =     ( HumanReadableEventClient . SMALL _ REGRESSION )  )     {", "cpuRatioSmallRegression . add ( HumanReadableEventClient . doubleToSortableLong ( cpuRatio )  )  ;", "} else    {", "cpuRatioLargeRegression . add ( HumanReadableEventClient . doubleToSortableLong ( cpuRatio )  )  ;", "}", "cpuRatioAll . add ( HumanReadableEventClient . doubleToSortableLong ( cpuRatio )  )  ;", "}", "METHOD_END"], "methodName": ["recordCpuRatio"], "fileName": "com.facebook.presto.verifier.HumanReadableEventClient"}, {"methodBody": ["METHOD_START", "{", "value    =    value    ^     (  ( value    >  >     6  3  )     &     ( Long . MAX _ VALUE )  )  ;", "return   Dou . longBitsToDou ( value )  ;", "}", "METHOD_END"], "methodName": ["sortableLongToDouble"], "fileName": "com.facebook.presto.verifier.HumanReadableEventClient"}, {"methodBody": ["METHOD_START", "{", "Cli < Runnable >    verifierParser    =    Cli .  < Runnable > builder (  \" verifier \"  )  . withDescription (  \" Presto   Verifier \"  )  . withDefaultCommand ( Help . class )  . withCommand ( Help . class )  . withCommand ( VerifyCommand . class )  . build (  )  ;", "verifierParser . parse ( args )  . run (  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.verifier.PrestoVerifier"}, {"methodBody": ["METHOD_START", "{", "for    ( String   eventClientType    :    eventClientTypes )     {", "if    ( eventClientType . equals (  \" human - readable \"  )  )     {", "multibindaddBinding (  )  . to ( HumanReadableEventClient . class )  . in ( SINGLETON )  ;", "} else", "if    ( eventClientType . equals (  \" file \"  )  )     {", "multibindaddBinding (  )  . to ( JsonEventClient . class )  . in ( SINGLETON )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["bindEventClientClasses"], "fileName": "com.facebook.presto.verifier.PrestoVerifierModule"}, {"methodBody": ["METHOD_START", "{", "sql    =    sql . replaceAll (  \"  \\ t \"  ,     \"        \"  )  ;", "sql    =    sql . replaceAll (  \"  \\ n +  \"  ,     \"  \\ n \"  )  ;", "sql    =    sql . trim (  )  ;", "while    ( sql . endsWith (  \"  ;  \"  )  )     {", "sql    =    sql . substring (  0  ,     (  ( sql . length (  )  )     -     1  )  )  . trim (  )  ;", "}", "return   sql ;", "}", "METHOD_END"], "methodName": ["clean"], "fileName": "com.facebook.presto.verifier.Query"}, {"methodBody": ["METHOD_START", "{", "return   catalog ;", "}", "METHOD_END"], "methodName": ["getCatalog"], "fileName": "com.facebook.presto.verifier.Query"}, {"methodBody": ["METHOD_START", "{", "return   password ;", "}", "METHOD_END"], "methodName": ["getPassword"], "fileName": "com.facebook.presto.verifier.Query"}, {"methodBody": ["METHOD_START", "{", "return   postQueries ;", "}", "METHOD_END"], "methodName": ["getPostQueries"], "fileName": "com.facebook.presto.verifier.Query"}, {"methodBody": ["METHOD_START", "{", "return   preQueries ;", "}", "METHOD_END"], "methodName": ["getPreQueries"], "fileName": "com.facebook.presto.verifier.Query"}, {"methodBody": ["METHOD_START", "{", "return   query ;", "}", "METHOD_END"], "methodName": ["getQuery"], "fileName": "com.facebook.presto.verifier.Query"}, {"methodBody": ["METHOD_START", "{", "return   schema ;", "}", "METHOD_END"], "methodName": ["getSchema"], "fileName": "com.facebook.presto.verifier.Query"}, {"methodBody": ["METHOD_START", "{", "return   sessionProperties ;", "}", "METHOD_END"], "methodName": ["getSessionProperties"], "fileName": "com.facebook.presto.verifier.Query"}, {"methodBody": ["METHOD_START", "{", "return   username ;", "}", "METHOD_END"], "methodName": ["getUsername"], "fileName": "com.facebook.presto.verifier.Query"}, {"methodBody": ["METHOD_START", "{", "return   control ;", "}", "METHOD_END"], "methodName": ["getControl"], "fileName": "com.facebook.presto.verifier.QueryPair"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.verifier.QueryPair"}, {"methodBody": ["METHOD_START", "{", "return   suite ;", "}", "METHOD_END"], "methodName": ["getSuite"], "fileName": "com.facebook.presto.verifier.QueryPair"}, {"methodBody": ["METHOD_START", "{", "return   test ;", "}", "METHOD_END"], "methodName": ["getTest"], "fileName": "com.facebook.presto.verifier.QueryPair"}, {"methodBody": ["METHOD_START", "{", "return   jsonString    =  =    null    ?    ImmutableList . of (  )     :    QueryPairMapper . queriesJsonCodec . fromJson ( jsonString )  ;", "}", "METHOD_END"], "methodName": ["fromJsonString"], "fileName": "com.facebook.presto.verifier.QueryPairMapper"}, {"methodBody": ["METHOD_START", "{", "return   cpuTime ;", "}", "METHOD_END"], "methodName": ["getCpuTime"], "fileName": "com.facebook.presto.verifier.QueryResult"}, {"methodBody": ["METHOD_START", "{", "return   exception ;", "}", "METHOD_END"], "methodName": ["getException"], "fileName": "com.facebook.presto.verifier.QueryResult"}, {"methodBody": ["METHOD_START", "{", "return   queryId ;", "}", "METHOD_END"], "methodName": ["getQueryId"], "fileName": "com.facebook.presto.verifier.QueryResult"}, {"methodBody": ["METHOD_START", "{", "return   results ;", "}", "METHOD_END"], "methodName": ["getResults"], "fileName": "com.facebook.presto.verifier.QueryResult"}, {"methodBody": ["METHOD_START", "{", "return   state ;", "}", "METHOD_END"], "methodName": ["getState"], "fileName": "com.facebook.presto.verifier.QueryResult"}, {"methodBody": ["METHOD_START", "{", "return   wallTime ;", "}", "METHOD_END"], "methodName": ["getWallTime"], "fileName": "com.facebook.presto.verifier.QueryResult"}, {"methodBody": ["METHOD_START", "{", "if    ( columns . isEmpty (  )  )     {", "throw   new   QueryRewriter . QueryRewriteException (  (  (  \" Table    \"     +    table )     +     \"    has   no   columns \"  )  )  ;", "}", "ImmutableList . Builder < SelectItem >    selectItems    =    ImmutableList . builder (  )  ;", "for    ( QueryRewriter . Column   column    :    columns )     {", "Expression   expression    =    new   Identifier ( column . getName (  )  )  ;", "if    ( column . isApproximateType (  )  )     {", "expression    =    new   sql . tree . FunctionCall ( QualifiedName . of (  \" round \"  )  ,    ImmutableList . of ( expression ,    new   LongLiteral ( Integer . toString ( doublePrecision )  )  )  )  ;", "}", "selectItems . add ( new   SingleColumn ( new   sql . tree . FunctionCall ( QualifiedName . of (  \" checksum \"  )  ,    ImmutableList . of ( expression )  )  )  )  ;", "}", "Select   select    =    new   Select ( false ,    selectItems . build (  )  )  ;", "return   SqlFormatter . formatSql ( new   sql . tree . QuerySpecification ( select ,    Optional . of ( new   sql . tree . Table ( table )  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  )  ,    Optional . empty (  )  )  ;", "}", "METHOD_END"], "methodName": ["checksumSql"], "fileName": "com.facebook.presto.verifier.QueryRewriter"}, {"methodBody": ["METHOD_START", "{", "return    ( rewritePrefix . getSuffix (  )  )     +     ( UUID . randomUUID (  )  . toString (  )  . replace (  \"  -  \"  ,     \"  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["createTemporaryTableName"], "fileName": "com.facebook.presto.verifier.QueryRewriter"}, {"methodBody": ["METHOD_START", "{", "return   SqlFormatter . formatSql ( new   com . facebook . presto . sql . tree . DropTable ( table ,    true )  ,    Optional . empty (  )  )  ;", "}", "METHOD_END"], "methodName": ["dropTableSql"], "fileName": "com.facebook.presto.verifier.QueryRewriter"}, {"methodBody": ["METHOD_START", "{", "String   escapeString    =    connection . getMetaData (  )  . getSearchStringEscape (  )  ;", "return   value . repl ( escapeString ,     ( escapeString    +    escapeString )  )  . repl (  \"  _  \"  ,     ( escapeString    +     \"  _  \"  )  )  . repl (  \"  %  \"  ,     ( escapeString    +     \"  %  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["escapeLikeExpression"], "fileName": "com.facebook.presto.verifier.QueryRewriter"}, {"methodBody": ["METHOD_START", "{", "List < String >    parts    =    new   ArrayList <  >  (  )  ;", "int   originalSize    =    originalName . getOriginalParts (  )  . size (  )  ;", "int   prefixSize    =    rPrefix . getOriginalParts (  )  . size (  )  ;", "if    ( originalSize    >    prefixSize )     {", "parts . addAll ( originalName . getOriginalParts (  )  . subList (  0  ,     ( originalSize    -    prefixSize )  )  )  ;", "}", "parts . addAll ( rPrefix . getOriginalParts (  )  )  ;", "parts . set (  (  ( parts . size (  )  )     -     1  )  ,    createTemporaryTableName (  )  )  ;", "return   QualifiedName . of ( parts )  ;", "}", "METHOD_END"], "methodName": ["generateTemporaryTableName"], "fileName": "com.facebook.presto.verifier.QueryRewriter"}, {"methodBody": ["METHOD_START", "{", "Query   createSelectClause    =    createTableAsSelect . getQuery (  )  ;", "QueryBody   innerQuery    =    createSelectClause . getQueryBody (  )  ;", "Query   zeroRowsQuery ;", "if    ( innerQuery   instanceof   QuerySpecification )     {", "QuerySpecification   querySpecification    =     (  ( QuerySpecification )     ( innerQuery )  )  ;", "innerQuery    =    new   QuerySpecification ( querySpecification . getSelect (  )  ,    querySpecification . getFrom (  )  ,    querySpecification . getWhere (  )  ,    querySpecification . getGroupBy (  )  ,    querySpecification . getHaving (  )  ,    querySpecification . getOrderBy (  )  ,    Optional . of (  \"  0  \"  )  )  ;", "zeroRowsQuery    =    new   Query ( createSelectClause . getWith (  )  ,    innerQuery ,    Optional . empty (  )  ,    Optional . empty (  )  )  ;", "} else    {", "zeroRowsQuery    =    new   Query ( createSelectClause . getWith (  )  ,    innerQuery ,    Optional . empty (  )  ,    Optional . of (  \"  0  \"  )  )  ;", "}", "ImmutableList . Builder <  . Column >    columns    =    ImmutableList . builder (  )  ;", "try    ( Statement   jdbcStatement    =    connection . createStatement (  )  )     {", "ExecutorService   executor    =    Executors . newSingleThreadExecutor (  )  ;", "TimeLimiter   limiter    =    SimpleTimeLimiter . create ( executor )  ;", "Statement   limitedStatement    =    limiter . newProxy ( jdbcStatement ,    Statement . class ,    timeout . toMillis (  )  ,    TimeUnit . MILLISECONDS )  ;", "try    ( ResultSet   resultSet    =    limitedStatement . executeQuery ( SqlFormatter . formatSql ( zeroRowsQuery ,    Optional . empty (  )  )  )  )     {", "ResultSetMetaData   metaData    =    resultSet . getMetaData (  )  ;", "for    ( int   i    =     1  ;    i    <  =     ( metaData . getColumnCount (  )  )  ;    i +  +  )     {", "String   name    =    metaData . getColumnName ( i )  ;", "int   type    =    metaData . getColumnType ( i )  ;", "columns . add ( new    . Column ( name ,     . APPROXIMATE _ TYPES . contains ( type )  )  )  ;", "}", "}    finally    {", "executor . shutdownNow (  )  ;", "}", "}", "return   columns . build (  )  ;", "}", "METHOD_END"], "methodName": ["getColumns"], "fileName": "com.facebook.presto.verifier.QueryRewriter"}, {"methodBody": ["METHOD_START", "{", "ResultSet   columns    =    connection . getMetaData (  )  . getColumns ( catalog ,    QueryRewriter . escapeLikeExpression ( connection ,    schema )  ,    QueryRewriter . escapeLikeExpression ( connection ,    table )  ,    null )  ;", "ImmutableList . Builder < QueryRewriter . Column >    columnBuilder    =    new   ImmutableList . Builder <  >  (  )  ;", "while    ( columns . next (  )  )     {", "String   name    =    columns . getString (  \" COLUMN _ NAME \"  )  ;", "int   type    =    columns . getInt (  \" DATA _ TYPE \"  )  ;", "columnBuilder . add ( new   QueryRewriter . Column ( name ,    QueryRewriter . APPROXIMATE _ TYPES . contains ( type )  )  )  ;", "}", "return   columnBuilder . build (  )  ;", "}", "METHOD_END"], "methodName": ["getColumnsForTable"], "fileName": "com.facebook.presto.verifier.QueryRewriter"}, {"methodBody": ["METHOD_START", "{", "QualifiedName   temporaryTableName    =    generateTemporaryTableName ( statement . getName (  )  )  ;", "Statement   rewritten    =    new   CreateTableAsSelect ( temporaryTableName ,    statement . getQuery (  )  ,    statement . isNotExists (  )  ,    statement . getProperties (  )  ,    statement . isWithData (  )  ,    statement . getColumnAliases (  )  ,    Optional . empty (  )  )  ;", "String   createTableAsSql    =    SqlFormatter . formatSql ( rewritten ,    Optional . empty (  )  )  ;", "String   checksumSql    =    checksumSql ( getColumns ( connection ,    statement )  ,    temporaryTableName )  ;", "String   dropTableSql    =     . dropTableSql ( temporaryTableName )  ;", "return   new   Query ( query . getCatalog (  )  ,    query . getSchema (  )  ,    ImmutableList . of ( createTableAsSql )  ,    checksumSql ,    ImmutableList . of ( dropTableSql )  ,    query . getUsername (  )  ,    query . getPassword (  )  ,    query . getSessionProperties (  )  )  ;", "}", "METHOD_END"], "methodName": ["rewriteCreateTableAsSelect"], "fileName": "com.facebook.presto.verifier.QueryRewriter"}, {"methodBody": ["METHOD_START", "{", "QualifiedName   temporaryTableName    =    generateTemporaryTableName ( statement . getTarget (  )  )  ;", "Statement   createTemporaryTable    =    new   sql . tree . CreateTable ( temporaryTableName ,    ImmutableList . of ( new   sql . tree . LikeClause ( statement . getTarget (  )  ,    Optional . of ( PropertiesOption . INCLUDING )  )  )  ,    true ,    ImmutableList . of (  )  ,    Optional . empty (  )  )  ;", "String   createTemporaryTableSql    =    SqlFormatter . formatSql ( createTemporaryTable ,    Optional . empty (  )  )  ;", "String   insertSql    =    SqlFormatter . formatSql ( new   Insert ( temporaryTableName ,    statement . getColumns (  )  ,    statement . getQuery (  )  )  ,    Optional . empty (  )  )  ;", "String   checksumSql    =    checksumSql ( getColumnsForTable ( connection ,    query . getCatalog (  )  ,    query . getSchema (  )  ,    statement . getTarget (  )  . toString (  )  )  ,    temporaryTableName )  ;", "String   dropTableSql    =    QueryRewriter . dropTableSql ( temporaryTableName )  ;", "return   new   Query ( query . getCatalog (  )  ,    query . getSchema (  )  ,    ImmutableList . of ( createTemporaryTableSql ,    insertSql )  ,    checksumSql ,    ImmutableList . of ( dropTableSql )  ,    query . getUsername (  )  ,    query . getPassword (  )  ,    query . getSessionProperties (  )  )  ;", "}", "METHOD_END"], "methodName": ["rewriteInsertQuery"], "fileName": "com.facebook.presto.verifier.QueryRewriter"}, {"methodBody": ["METHOD_START", "{", "if    (  ( VerifyCommand . statementToQueryType ( parser ,    query . getQuery (  )  )  )     =  =     ( QueryType . READ )  )     {", "return   query ;", "}", "if    (  !  ( query . getPreQueries (  )  . isEmpty (  )  )  )     {", "throw   new   QueryRewriter . QueryRewriteException (  \" Cannot   rewrite   queries   that   use   pre - queries \"  )  ;", "}", "if    (  !  ( query . getPostQueries (  )  . isEmpty (  )  )  )     {", "throw   new   QueryRewriter . QueryRewriteException (  \" Cannot   rewrite   queries   that   use   post - queries \"  )  ;", "}", "Statement   statement    =    parser . createStatement ( query . getQuery (  )  ,    new   sql . parser . ParsingOptions ( DecimalLiteralTreatment . AS _ DOUBLE )  )  ;", "try    ( Connection   connection    =    DriverManager . getConnection ( gatewayUrl ,    usernameOverride . orElse ( query . getUsername (  )  )  ,    passwordOverride . orElse ( query . getPassword (  )  )  )  )     {", "trySetConnectionProperties ( query ,    connection )  ;", "if    ( statement   instanceof   CreateTableAsSelect )     {", "return   rewriteCreateTableAsSelect ( connection ,    query ,     (  ( CreateTableAsSelect )     ( statement )  )  )  ;", "} else", "if    ( statement   instanceof   sql . tree . Insert )     {", "return   rewriteInsertQuery ( connection ,    query ,     (  ( sql . tree . Insert )     ( statement )  )  )  ;", "}", "}", "throw   new   QueryRewriter . QueryRewriteException (  (  \" Unsupported   query   type :     \"     +     ( statement . getClass (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["shadowQuery"], "fileName": "com.facebook.presto.verifier.QueryRewriter"}, {"methodBody": ["METHOD_START", "{", "try    {", "connection . setClientInfo (  \" ApplicationName \"  ,     \"  - rewrite \"  )  ;", "connection . setCatalog ( catalogOverride . orElse ( query . getCatalog (  )  )  )  ;", "connection . setSchema ( schemaOverride . orElse ( query . getSchema (  )  )  )  ;", "}    catch    ( SQLClientInfoException   ignored )     {", "}", "}", "METHOD_END"], "methodName": ["trySetConnectionProperties"], "fileName": "com.facebook.presto.verifier.QueryRewriter"}, {"methodBody": ["METHOD_START", "{", "handle . close (  )  ;", "}", "METHOD_END"], "methodName": ["close"], "fileName": "com.facebook.presto.verifier.TestShadowing"}, {"methodBody": ["METHOD_START", "{", "handle . execute (  \" CREATE   TABLE    \\  \" my _ test _ table \\  \"     ( column 1    BIGINT ,    column 2    DOUBLE )  \"  )  ;", "SqlParser   parser    =    new   SqlParser (  )  ;", "Query   query    =    new   Query ( TestShadowing . CATALOG ,    TestShadowing . SCHEMA ,    ImmutableList . of (  )  ,     \" CREATE   TABLE   my _ test _ table   AS   SELECT    1    column 1  ,    CAST (  '  2  .  0  '    AS   DOUBLE )    column 2    LIMIT    1  \"  ,    ImmutableList . of (  )  ,    null ,    null ,    ImmutableMap . of (  )  )  ;", "QueryRewriter   rewriter    =    new   QueryRewriter ( parser ,    TestShadowing . URL ,    QualifiedName . of (  \" tmp _  \"  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,     1  ,    new   Duration (  1  0  ,    TimeUnit . SECONDS )  )  ;", "Query   rewrittenQuery    =    rewriter . shadowQuery ( query )  ;", "assertEquals ( rewrittenQuery . getPreQueries (  )  . size (  )  ,     1  )  ;", "assertEquals ( rewrittenQuery . getPostQueries (  )  . size (  )  ,     1  )  ;", "CreateTableAsSelect   createTableAs    =     (  ( CreateTableAsSelect )     ( parser . createStatement ( rewrittenQuery . getPreQueries (  )  . get (  0  )  )  )  )  ;", "assertEquals ( createTableAs . getName (  )  . getParts (  )  . size (  )  ,     1  )  ;", "assertTrue ( createTableAs . getName (  )  . getSuffix (  )  . startsWith (  \" tmp _  \"  )  )  ;", "assertFalse ( createTableAs . getName (  )  . getSuffix (  )  . contains (  \" my _ test _ table \"  )  )  ;", "assertEquals ( VerifyCommand . statementToQueryType ( parser ,    rewrittenQuery . getQuery (  )  )  ,    QueryType . READ )  ;", "Table   table    =    new   Table ( createTableAs . getName (  )  )  ;", "SingleColumn   column 1     =    new   SingleColumn ( new   sql . tree . FunctionCall ( QualifiedName . of (  \" checksum \"  )  ,    ImmutableList . of ( new   Identifier (  \" COLUMN 1  \"  )  )  )  )  ;", "SingleColumn   column 2     =    new   SingleColumn ( new   sql . tree . FunctionCall ( QualifiedName . of (  \" checksum \"  )  ,    ImmutableList . of ( new   sql . tree . FunctionCall ( QualifiedName . of (  \" round \"  )  ,    ImmutableList . of ( new   Identifier (  \" COLUMN 2  \"  )  ,    new   LongLiteral (  \"  1  \"  )  )  )  )  )  )  ;", "Select   select    =    new   Select ( false ,    ImmutableList . of ( column 1  ,    column 2  )  )  ;", "QuerySpecification   querySpecification    =    new   QuerySpecification ( select ,    Optional . of ( table )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  )  ;", "assertEquals ( parser . createStatement ( rewrittenQuery . getQuery (  )  )  ,    new   sql . tree . Query ( Optional . empty (  )  ,    querySpecification ,    Optional . empty (  )  ,    Optional . empty (  )  )  )  ;", "assertEquals ( parser . createStatement ( rewrittenQuery . getPostQueries (  )  . get (  0  )  )  ,    new   sql . tree . DropTable ( createTableAs . getName (  )  ,    true )  )  ;", "}", "METHOD_END"], "methodName": ["testCreateTableAsSelect"], "fileName": "com.facebook.presto.verifier.TestShadowing"}, {"methodBody": ["METHOD_START", "{", "handle . execute (  \" CREATE   TABLE    \\  \" my _ test _ table 2  \\  \"     ( column 1    BIGINT ,    column 2    DOUBLE )  \"  )  ;", "SqlParser   parser    =    new   SqlParser (  )  ;", "Query   query    =    new   Query (  . CATALOG ,     . SCHEMA ,    ImmutableList . of (  )  ,     \" CREATE   TABLE   public . my _ test _ table 2    AS   SELECT    1    column 1  ,     2 E 0    column 2  \"  ,    ImmutableList . of (  )  ,    null ,    null ,    ImmutableMap . of (  )  )  ;", "QueryRewriter   rewriter    =    new   QueryRewriter ( parser ,     . URL ,    QualifiedName . of (  \" other _ catalog \"  ,     \" other _ schema \"  ,     \" tmp _  \"  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,     1  ,    new   Duration (  1  0  ,    TimeUnit . SECONDS )  )  ;", "Query   rewrittenQuery    =    rewriter . shadowQuery ( query )  ;", "assertEquals ( rewrittenQuery . getPreQueries (  )  . size (  )  ,     1  )  ;", "CreateTableAsSelect   createTableAs    =     (  ( CreateTableAsSelect )     ( parser . createStatement ( rewrittenQuery . getPreQueries (  )  . get (  0  )  )  )  )  ;", "assertEquals ( createTableAs . getName (  )  . getParts (  )  . size (  )  ,     3  )  ;", "assertEquals ( createTableAs . getName (  )  . getPrefix (  )  . get (  )  ,    QualifiedName . of (  \" other _ catalog \"  ,     \" other _ schema \"  )  )  ;", "assertTrue ( createTableAs . getName (  )  . getSuffix (  )  . startsWith (  \" tmp _  \"  )  )  ;", "assertFalse ( createTableAs . getName (  )  . getSuffix (  )  . contains (  \" my _ test _ table \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testCreateTableAsSelectDifferentCatalog"], "fileName": "com.facebook.presto.verifier.TestShadowing"}, {"methodBody": ["METHOD_START", "{", "handle . execute (  \" CREATE   TABLE    \\  \" test _ insert _ table \\  \"     ( a   BIGINT ,    b   DOUBLE ,    c   VARCHAR )  \"  )  ;", "SqlParser   parser    =    new   SqlParser (  )  ;", "Query   query    =    new   Query ( TestShadowing . CATALOG ,    TestShadowing . SCHEMA ,    ImmutableList . of (  )  ,     \" INSERT   INTO   test _ insert _ table    ( b ,    a ,    c )    values    (  1  .  1  ,     1  ,     ' a '  )  ,     (  2  .  0  ,     2  ,     ' b '  )  ,     (  3  .  1  ,     3  ,     ' c '  )  \"  ,    ImmutableList . of (  )  ,    null ,    null ,    ImmutableMap . of (  )  )  ;", "QueryRewriter   rewriter    =    new   QueryRewriter ( parser ,    TestShadowing . URL ,    QualifiedName . of (  \" other _ catalog \"  ,     \" other _ schema \"  ,     \" tmp _  \"  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,     1  ,    new   Duration (  1  0  ,    TimeUnit . SECONDS )  )  ;", "Query   rewrittenQuery    =    rewriter . shadowQuery ( query )  ;", "assertEquals ( rewrittenQuery . getPreQueries (  )  . size (  )  ,     2  )  ;", "CreateTable   createTable    =     (  ( CreateTable )     ( parser . createStatement ( rewrittenQuery . getPreQueries (  )  . get (  0  )  )  )  )  ;", "assertEquals ( createTable . getName (  )  . getParts (  )  . size (  )  ,     3  )  ;", "assertEquals ( createTable . getName (  )  . getPrefix (  )  . get (  )  ,    QualifiedName . of (  \" other _ catalog \"  ,     \" other _ schema \"  )  )  ;", "assertTrue ( createTable . getName (  )  . getSuffix (  )  . startsWith (  \" tmp _  \"  )  )  ;", "assertFalse ( createTable . getName (  )  . getSuffix (  )  . contains (  \" test _ insert _ table \"  )  )  ;", "Insert   insert    =     (  ( Insert )     ( parser . createStatement ( rewrittenQuery . getPreQueries (  )  . get (  1  )  )  )  )  ;", "assertEquals ( insert . getTarget (  )  ,    createTable . getName (  )  )  ;", "assertEquals ( insert . getColumns (  )  ,    Optional . of ( ImmutableList . of ( QueryUtil . identifier (  \" b \"  )  ,    QueryUtil . identifier (  \" a \"  )  ,    QueryUtil . identifier (  \" c \"  )  )  )  )  ;", "Table   table    =    new   Table ( createTable . getName (  )  )  ;", "SingleColumn   columnA    =    new   SingleColumn ( new   sql . tree . FunctionCall ( QualifiedName . of (  \" checksum \"  )  ,    ImmutableList . of ( new   Identifier (  \" A \"  )  )  )  )  ;", "SingleColumn   columnB    =    new   SingleColumn ( new   sql . tree . FunctionCall ( QualifiedName . of (  \" checksum \"  )  ,    ImmutableList . of ( new   sql . tree . FunctionCall ( QualifiedName . of (  \" round \"  )  ,    ImmutableList . of ( new   Identifier (  \" B \"  )  ,    new   LongLiteral (  \"  1  \"  )  )  )  )  )  )  ;", "SingleColumn   columnC    =    new   SingleColumn ( new   sql . tree . FunctionCall ( QualifiedName . of (  \" checksum \"  )  ,    ImmutableList . of ( new   Identifier (  \" C \"  )  )  )  )  ;", "Select   select    =    new   Select ( false ,    ImmutableList . of ( columnA ,    columnB ,    columnC )  )  ;", "QuerySpecification   querySpecification    =    new   QuerySpecification ( select ,    Optional . of ( table )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  )  ;", "assertEquals ( parser . createStatement ( rewrittenQuery . getQuery (  )  )  ,    new   sql . tree . Query ( Optional . empty (  )  ,    querySpecification ,    Optional . empty (  )  ,    Optional . empty (  )  )  )  ;", "assertEquals ( rewrittenQuery . getPostQueries (  )  . size (  )  ,     1  )  ;", "assertEquals ( parser . createStatement ( rewrittenQuery . getPostQueries (  )  . get (  0  )  )  ,    new   sql . tree . DropTable ( createTable . getName (  )  ,    true )  )  ;", "}", "METHOD_END"], "methodName": ["testInsert"], "fileName": "com.facebook.presto.verifier.TestShadowing"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( Validator . precisionCompare (  0  .  9  0  4  5  ,     0  .  9  0  4  5  0  0  0  0  0  0  0  0  0  0  0  1  ,     3  )  ,     0  )  ;", "assertEquals ( Validator . precisionCompare (  0  .  9  0  4  5  ,     0  .  9  0  4  5  0  0  0  0  0  0  0  0  0  0  0  1  ,     2  )  ,     0  )  ;", "assertEquals ( Validator . precisionCompare (  0  .  9  0  4  1  ,     0  .  9  0  4  2  ,     3  )  ,     0  )  ;", "assertEquals ( Validator . precisionCompare (  0  .  9  0  4  1  ,     0  .  9  0  4  2  ,     4  )  ,     0  )  ;", "assertEquals ( Validator . precisionCompare (  0  .  9  0  4  2  ,     0  .  9  0  4  1  ,     4  )  ,     0  )  ;", "assertEquals ( Validator . precisionCompare (  (  -  0  .  9  0  4  2  )  ,     (  -  0  .  9  0  4  1  )  ,     4  )  ,     0  )  ;", "assertEquals ( Validator . precisionCompare (  (  -  0  .  9  0  4  2  )  ,     (  -  0  .  9  0  4  1  )  ,     3  )  ,     0  )  ;", "assertEquals ( Validator . precisionCompare (  0  .  8  9  9  ,     0  .  9  0  1  ,     3  )  ,     0  )  ;", "assertEquals ( Validator . precisionCompare ( Double . NaN ,    Double . NaN ,     4  )  ,    Double . compare ( Double . NaN ,    Double . NaN )  )  ;", "}", "METHOD_END"], "methodName": ["testDoubleComparison"], "fileName": "com.facebook.presto.verifier.TestValidator"}, {"methodBody": ["METHOD_START", "{", "ConfigAssertions . assertRecordedDefaults ( ConfigAssertions . recordDefaults ( VerifierConfig . class )  . setTestUsernameOverride ( null )  . setControlUsernameOverride ( null )  . setTestPasswordOverride ( null )  . setControlPasswordOverride ( null )  . setSuite ( null )  . setSuites ( null )  . setControlQueryTypes ( Joiner . on (  \"  ,  \"  )  . join ( QueryType . READ ,    QueryType . CREATE ,    QueryType . MODIFY )  )  . setTestQueryTypes ( Joiner . on (  \"  ,  \"  )  . join ( QueryType . READ ,    QueryType . CREATE ,    QueryType . MODIFY )  )  . setSource ( null )  . setRunId ( new   DateTime (  )  . toString (  \" yyyy - MM - dd \"  )  )  . setEventClients (  \" human - readable \"  )  . setThreadCount (  1  0  )  . setQueryDatabase ( null )  . setControlGateway ( null )  . setTestGateway ( null )  . setControlTimeout ( new   Duration (  1  0  ,    TimeUnit . MINUTES )  )  . setTestTimeout ( new   Duration (  1  ,    TimeUnit . HOURS )  )  . setBlacklist (  \"  \"  )  . setWhitelist (  \"  \"  )  . setMaxRowCount (  1  0  0  0  0  )  . setMaxQueries (  1  0  0  0  0  0  0  )  . setAlwaysReport ( false )  . setSuiteRepetitions (  1  )  . setCheckCorrectnessEnabled ( true )  . setCheckCpuEnabled ( true )  . setExplainOnly ( false )  . setSkipCorrectnessRegex (  \"  ^  $  \"  )  . setSkipCpuCheckRegex (  \"  (  ? i )  (  ? s )  .  * LIMIT .  *  \"  )  . setQueryRepetitions (  1  )  . setTestCatalogOverride ( null )  . setTestSchemaOverride ( null )  . setControlCatalogOverride ( null )  . setControlSchemaOverride ( null )  . setQuiet ( false )  . setVerboseResultsComparison ( false )  . setEventLogFile ( null )  . setAdditionalJdbcDriverPath ( null )  . setTestJdbcDriverName ( null )  . setControlJdbcDriverName ( null )  . setDoublePrecision (  3  )  . setRegressionMinCpuTime ( new   Duration (  5  ,    TimeUnit . MINUTES )  )  . setShadowWrites ( true )  . setShadowTestTablePrefix (  \" tmp _ verifier _  \"  )  . setShadowControlTablePrefix (  \" tmp _ verifier _  \"  )  . setControlTeardownRetries (  1  )  . setTestTeardownRetries (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["testDefaults"], "fileName": "com.facebook.presto.verifier.TestVerifierConfig"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    properties    =    new   Builder < String ,    String >  (  )  . put (  \" suites \"  ,     \" my _ suite \"  )  . put (  \" suite \"  ,     \" my _ suite \"  )  . put (  \" control . query - types \"  ,    Joiner . on (  \"  ,  \"  )  . join ( QueryType . CREATE ,    QueryType . MODIFY )  )  . put (  \" test . query - types \"  ,    QueryType . MODIFY . name (  )  )  . put (  \" source \"  ,     \" my _ source \"  )  . put (  \" run - id \"  ,     \" my _ run _ id \"  )  . put (  \" event - client \"  ,     \" file , human - readable \"  )  . put (  \" thread - count \"  ,     \"  1  \"  )  . put (  \" blacklist \"  ,     \"  1  ,  2  \"  )  . put (  \" whitelist \"  ,     \"  3  ,  4  \"  )  . put (  \" verbose - results - comparison \"  ,     \" true \"  )  . put (  \" max - row - count \"  ,     \"  1  \"  )  . put (  \" max - queries \"  ,     \"  1  \"  )  . put (  \" always - report \"  ,     \" true \"  )  . put (  \" suite - repetitions \"  ,     \"  2  \"  )  . put (  \" query - repetitions \"  ,     \"  2  \"  )  . put (  \" check - correctness \"  ,     \" false \"  )  . put (  \" check - cpu \"  ,     \" false \"  )  . put (  \" explain - only \"  ,     \" true \"  )  . put (  \" skip - correctness - regex \"  ,     \" limit \"  )  . put (  \" skip - cpu - check - regex \"  ,     \" LIMIT \"  )  . put (  \" quiet \"  ,     \" true \"  )  . put (  \" event - log - file \"  ,     \"  .  / test \"  )  . put (  \" query - database \"  ,     \" jdbc : mysql :  /  / localhost :  3  3  0  6  / my _ database ? user = my _ username & password = my _ password \"  )  . put (  \" test . username - override \"  ,     \" test _ user \"  )  . put (  \" test . password - override \"  ,     \" test _ password \"  )  . put (  \" test . gateway \"  ,     \" jdbc : presto :  /  / localhost :  8  0  8  0  \"  )  . put (  \" test . timeout \"  ,     \"  1 s \"  )  . put (  \" test . catalog - override \"  ,     \" my _ catalog \"  )  . put (  \" test . schema - override \"  ,     \" my _ schema \"  )  . put (  \" control . username - override \"  ,     \" control _ user \"  )  . put (  \" control . password - override \"  ,     \" control _ password \"  )  . put (  \" control . gateway \"  ,     \" jdbc : presto :  /  / localhost :  8  0  8  1  \"  )  . put (  \" control . timeout \"  ,     \"  1 s \"  )  . put (  \" control . catalog - override \"  ,     \" my _ catalog \"  )  . put (  \" control . schema - override \"  ,     \" my _ schema \"  )  . put (  \" additional - jdbc - driver - path \"  ,     \"  / test / path \"  )  . put (  \" test . jdbc - driver - class \"  ,     \" com . facebook . exampleclass \"  )  . put (  \" control . jdbc - driver - class \"  ,     \" com . facebook . exampleclass \"  )  . put (  \" expected - double - precision \"  ,     \"  5  \"  )  . put (  \" regression . min - cpu - time \"  ,     \"  3  0 s \"  )  . put (  \" shadow - writes . enabled \"  ,     \" false \"  )  . put (  \" shadow - writes . test - table - prefix \"  ,     \" tmp _  \"  )  . put (  \" shadow - writes . control - table - prefix \"  ,     \" schema . tmp _  \"  )  . put (  \" control . teardown - retries \"  ,     \"  5  \"  )  . put (  \" test . teardown - retries \"  ,     \"  7  \"  )  . build (  )  ;", "expected    =    new    (  )  . setTestUsernameOverride (  \" verifier - test \"  )  . setSuites (  \" my _ suite \"  )  . setSuite (  \" my _ suite \"  )  . setControlQueryTypes ( Joiner . on (  \"  ,  \"  )  . join ( QueryType . CREATE ,    QueryType . MODIFY )  )  . setTestQueryTypes ( QueryType . MODIFY . name (  )  )  . setSource (  \" my _ source \"  )  . setRunId (  \" my _ run _ id \"  )  . setEventClients (  \" file , human - readable \"  )  . setThreadCount (  1  )  . setBlacklist (  \"  1  ,  2  \"  )  . setWhitelist (  \"  3  ,  4  \"  )  . setMaxRowCount (  1  )  . setMaxQueries (  1  )  . setAlwaysReport ( true )  . setVerboseResultsComparison ( true )  . setSuiteRepetitions (  2  )  . setQueryRepetitions (  2  )  . setCheckCorrectnessEnabled ( false )  . setCheckCpuEnabled ( false )  . setExplainOnly ( true )  . setSkipCorrectnessRegex (  \" limit \"  )  . setSkipCpuCheckRegex (  \" LIMIT \"  )  . setQuiet ( true )  . setEventLogFile (  \"  .  / test \"  )  . setQueryDatabase (  \" jdbc : mysql :  /  / localhost :  3  3  0  6  / my _ database ? user = my _ username & password = my _ password \"  )  . setTestUsernameOverride (  \" test _ user \"  )  . setTestPasswordOverride (  \" test _ password \"  )  . setTestGateway (  \" jdbc : presto :  /  / localhost :  8  0  8  0  \"  )  . setTestTimeout ( new   Duration (  1  ,    TimeUnit . SECONDS )  )  . setTestCatalogOverride (  \" my _ catalog \"  )  . setTestSchemaOverride (  \" my _ schema \"  )  . setControlUsernameOverride (  \" control _ user \"  )  . setControlPasswordOverride (  \" control _ password \"  )  . setControlGateway (  \" jdbc : presto :  /  / localhost :  8  0  8  1  \"  )  . setControlTimeout ( new   Duration (  1  ,    TimeUnit . SECONDS )  )  . setControlCatalogOverride (  \" my _ catalog \"  )  . setControlSchemaOverride (  \" my _ schema \"  )  . setAdditionalJdbcDriverPath (  \"  / test / path \"  )  . setTestJdbcDriverName (  \" com . facebook . exampleclass \"  )  . setControlJdbcDriverName (  \" com . facebook . exampleclass \"  )  . setDoublePrecision (  5  )  . setRegressionMinCpuTime ( new   Duration (  3  0  ,    TimeUnit . SECONDS )  )  . setShadowWrites ( false )  . setShadowTestTablePrefix (  \" tmp _  \"  )  . setShadowControlTablePrefix (  \" schema . tmp _  \"  )  . setControlTeardownRetries (  5  )  . setTestTeardownRetries (  7  )  ;", "ConfigAssertions . assertFullMapping ( properties ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testExplicitPropertyMappings"], "fileName": "com.facebook.presto.verifier.TestVerifierConfig"}, {"methodBody": ["METHOD_START", "{", "for    ( int   i    =     0  ;    i    <     3  ;    i +  +  )     {", "QueryResult   results    =    executeQueryControl (  )  ;", "if    (  ( results . getState (  )  )     !  =     ( QueryResult . State . SUCCESS )  )     {", "return   false ;", "}", "if    (  !  (  . resultsMatch ( controlResult ,    results ,    precision )  )  )     {", "deterministic    =    false ;", "return   false ;", "}", "}", "for    ( int   i    =     0  ;    i    <     3  ;    i +  +  )     {", "testResult    =    executeQueryTest (  )  ;", "if    (  ( testResult . getState (  )  )     !  =     ( QueryResult . State . SUCCESS )  )     {", "return   false ;", "}", "if    (  !  (  . resultsMatch ( controlResult ,    testResult ,    precision )  )  )     {", "return   false ;", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["checkForDeterministicAndRerunTestQueriesIfNeeded"], "fileName": "com.facebook.presto.verifier.Validator"}, {"methodBody": ["METHOD_START", "{", "int   rowCount    =     0  ;", "int   columnCount    =    resultSet . getMetaData (  )  . getColumnCount (  )  ;", "ImmutableList . Builder < List < Object >  >    rows    =    ImmutableList . builder (  )  ;", "while    ( resultSet . next (  )  )     {", "List < Object >    row    =    new   ArrayList <  >  (  )  ;", "for    ( int   i    =     1  ;    i    <  =    columnCount ;    i +  +  )     {", "Object   object    =    resultSet . getObject ( i )  ;", "if    ( object   instanceof   BigDecimal )     {", "if    (  (  (  ( BigDecimal )     ( object )  )  . scale (  )  )     <  =     0  )     {", "object    =     (  ( BigDecimal )     ( object )  )  . longValueExact (  )  ;", "} else    {", "object    =     (  ( BigDecimal )     ( object )  )  . doubleValue (  )  ;", "}", "}", "if    ( object   instanceof   Array )     {", "object    =     (  ( Array )     ( object )  )  . getArray (  )  ;", "}", "if    ( object   instanceof   byte [  ]  )     {", "object    =    new   SqlVarbinary (  (  ( byte [  ]  )     ( object )  )  )  ;", "}", "row . add ( object )  ;", "}", "rows . add ( Collections . unmodifiableList ( row )  )  ;", "rowCount +  +  ;", "if    ( rowCount    >     ( maxRowCount )  )     {", "throw   new   VException (  (  (  \" More   than    '  \"     +     ( maxRowCount )  )     +     \"  '    rows ,    failing   query \"  )  )  ;", "}", "}", "return   rows . build (  )  ;", "}", "METHOD_END"], "methodName": ["convertJdbcResultSet"], "fileName": "com.facebook.presto.verifier.Validator"}, {"methodBody": ["METHOD_START", "{", "ExecutorService   executor    =    Executors . newSingleThreadExecutor (  )  ;", "TimeLimiter   limiter    =    SimpleTimeLimiter . create ( executor )  ;", "String   queryId    =    null ;", "try    ( Connection   connection    =    DriverManager . getConnection ( url ,    username ,    password )  )     {", "trySetConnectionProperties ( query ,    connection )  ;", "for    ( Map . Entry < String ,    String >    entry    :    sessionProperties . entrySet (  )  )     {", "connection . unwrap ( PrestoConnection . class )  . setSessionProperty ( entry . getKey (  )  ,    entry . getValue (  )  )  ;", "}", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "Stopwatch   stopwatch    =    Stopwatch . createStarted (  )  ;", "Statement   limitedStatement    =    limiter . newProxy ( statement ,    Statement . class ,    timeout . toMillis (  )  ,    TimeUnit . MILLISECONDS )  ;", "if    ( explainOnly )     {", "sql    =     \" EXPLAIN    \"     +    sql ;", "}", "long   start    =    System . nanoTime (  )  ;", "PrestoStatement   prestoStatement    =    limitedStatement . unwrap ( PrestoStatement . class )  ;", ". ProgressMonitor   progressMonitor    =    new    . ProgressMonitor (  )  ;", "prestoStatement . setProgressMonitor ( progressMonitor )  ;", "boolean   isSelectQuery    =    limitedStatement . execute ( sql )  ;", "List < List < Object >  >    results ;", "if    ( isSelectQuery )     {", ". ResultSetConverter   converter    =    limiter . newProxy ( this :  : convertJdbcResultSet ,     . ResultSetConverter . class ,     (  ( timeout . toMillis (  )  )     -     ( stopwatch . elapsed ( TimeUnit . MILLISECONDS )  )  )  ,    TimeUnit . MILLISECONDS )  ;", "results    =    converter . convert ( limitedStatement . getResultSet (  )  )  ;", "} else    {", "results    =    ImmutableList . of ( ImmutableList . of ( limitedStatement . getLargeUpdateCount (  )  )  )  ;", "}", "prestoStatement . clearProgressMonitor (  )  ;", "QueryStats   queryStats    =    progressMonitor . getFinalQueryStats (  )  ;", "if    ( queryStats    =  =    null )     {", "throw   new   VerifierException (  \" Cannot   fetch   query   stats \"  )  ;", "}", "Duration   queryCpuTime    =    new   Duration ( queryStats . getCpuTimeMillis (  )  ,    TimeUnit . MILLISECONDS )  ;", "queryId    =    queryStats . getQueryId (  )  ;", "return   new   QueryResult ( QueryResult . State . SUCCESS ,    null ,    Duration . nanosSince ( start )  ,    queryCpuTime ,    queryId ,    results )  ;", "}", "}    catch    ( SQLException   e )     {", "Exception   exception    =    e ;", "if    (  (  (  \" Error   executing   query \"  . equals ( e . getMessage (  )  )  )     |  |     (  \" Error   fetching   results \"  . equals ( e . getMessage (  )  )  )  )     &  &     (  ( e . getCause (  )  )    instanceof   Exception )  )     {", "exception    =     (  ( Exception )     ( e . getCause (  )  )  )  ;", "}", "QueryResult . State   state    =     (  . isPrestoQueryInvalid ( e )  )     ?    QueryResult . State . INVALID    :    QueryResult . State . FAILED ;", "return   new   QueryResult ( state ,    exception ,    null ,    null ,    null ,    null )  ;", "}    catch    ( VerifierException   e )     {", "return   new   QueryResult ( QueryResult . State . TOO _ MANY _ ROWS ,    e ,    null ,    null ,    null ,    null )  ;", "}    catch    ( UncheckedTimeoutException   e )     {", "return   new   QueryResult ( QueryResult . State . TIMEOUT ,    null ,    null ,    null ,    queryId ,    ImmutableList . of (  )  )  ;", "}    finally    {", "executor . shutdownNow (  )  ;", "}", "}", "METHOD_END"], "methodName": ["executeQuery"], "fileName": "com.facebook.presto.verifier.Validator"}, {"methodBody": ["METHOD_START", "{", "Query   query    =    queryPair . getControl (  )  ;", "QueryResult   queryResult    =    new   QueryResult ( QueryResult . State . INVALID ,    null ,    null ,    null ,    null ,    ImmutableList . of (  )  )  ;", "try    {", "queryResult    =     . setup ( query ,    controlPreQueryResults ,     (    controlPrequery )     -  >    executeQuery ( controlGateway ,    controlUsername ,    controlPassword ,    queryPair . getControl (  )  ,    controlPrequery ,    controlTimeout ,    sessionProperties )  )  ;", "if    (  ( queryResult . getState (  )  )     =  =     ( QueryResult . State . SUCCESS )  )     {", "queryResult    =    executeQuery ( controlGateway ,    controlUsername ,    controlPassword ,    queryPair . getControl (  )  ,    query . getQuery (  )  ,    controlTimeout ,    sessionProperties )  ;", "}", "}    finally    {", "int   retry    =     0  ;", "QueryResult   tearDownResult ;", "do    {", "tearDownResult    =     . tearDown ( query ,    controlPostQueryResults ,     (    controlPostquery )     -  >    executeQuery ( controlGateway ,    controlUsername ,    controlPassword ,    queryPair . getControl (  )  ,    controlPostquery ,    controlTimeout ,    sessionProperties )  )  ;", "if    (  ( tearDownResult . getState (  )  )     =  =     ( QueryResult . State . SUCCESS )  )     {", "break ;", "}", "try    {", "TimeUnit . MINUTES . sleep (  1  )  ;", "}    catch    ( InterruptedException   e )     {", "Thread . currentThread (  )  . interrupt (  )  ;", "break ;", "}", "retry +  +  ;", "}    while    ( retry    <     ( controlTeardownRetries )     )  ;", "queryResult    =     (  ( tearDownResult . getState (  )  )     =  =     ( QueryResult . State . SUCCESS )  )     ?    queryResult    :    tearDownResult ;", "}", "return   queryResult ;", "}", "METHOD_END"], "methodName": ["executeQueryControl"], "fileName": "com.facebook.presto.verifier.Validator"}, {"methodBody": ["METHOD_START", "{", "Query   query    =    queryPair . getTest (  )  ;", "QueryResult   queryResult    =    new   QueryResult ( QueryResult . State . INVALID ,    null ,    null ,    null ,    null ,    ImmutableList . of (  )  )  ;", "try    {", "queryResult    =     . setup ( query ,    testPreQueryResults ,     (    testPrequery )     -  >    executeQuery ( testGateway ,    testUsername ,    testPassword ,    queryPair . getTest (  )  ,    testPrequery ,    testTimeout ,    sessionProperties )  )  ;", "if    (  ( queryResult . getState (  )  )     =  =     ( QueryResult . State . SUCCESS )  )     {", "queryResult    =    executeQuery ( testGateway ,    testUsername ,    testPassword ,    queryPair . getTest (  )  ,    query . getQuery (  )  ,    testTimeout ,    sessionProperties )  ;", "}", "}    finally    {", "int   retry    =     0  ;", "QueryResult   tearDownResult ;", "do    {", "tearDownResult    =     . tearDown ( query ,    testPostQueryResults ,     (    testPostquery )     -  >    executeQuery ( testGateway ,    testUsername ,    testPassword ,    queryPair . getTest (  )  ,    testPostquery ,    testTimeout ,    sessionProperties )  )  ;", "if    (  ( tearDownResult . getState (  )  )     =  =     ( QueryResult . State . SUCCESS )  )     {", "break ;", "}", "try    {", "TimeUnit . MINUTES . sleep (  1  )  ;", "}    catch    ( InterruptedException   e )     {", "Thread . currentThread (  )  . interrupt (  )  ;", "break ;", "}", "retry +  +  ;", "}    while    ( retry    <     ( testTeardownRetries )     )  ;", "queryResult    =     (  ( tearDownResult . getState (  )  )     =  =     ( QueryResult . State . SUCCESS )  )     ?    queryResult    :    tearDownResult ;", "}", "return   queryResult ;", "}", "METHOD_END"], "methodName": ["executeQueryTest"], "fileName": "com.facebook.presto.verifier.Validator"}, {"methodBody": ["METHOD_START", "{", "return   controlPostQueryResults ;", "}", "METHOD_END"], "methodName": ["getControlPostQueryResults"], "fileName": "com.facebook.presto.verifier.Validator"}, {"methodBody": ["METHOD_START", "{", "return   controlPreQueryResults ;", "}", "METHOD_END"], "methodName": ["getControlPreQueryResults"], "fileName": "com.facebook.presto.verifier.Validator"}, {"methodBody": ["METHOD_START", "{", "return   controlResult ;", "}", "METHOD_END"], "methodName": ["getControlResult"], "fileName": "com.facebook.presto.verifier.Validator"}, {"methodBody": ["METHOD_START", "{", "return   queryPair ;", "}", "METHOD_END"], "methodName": ["getQueryPair"], "fileName": "com.facebook.presto.verifier.Validator"}, {"methodBody": ["METHOD_START", "{", "List < List < Object >  >    controlResults    =    controlResult . getResults (  )  ;", "List < List < Object >  >    testResults    =    testResult . getResults (  )  ;", "if    (  (  ( valid (  )  )     |  |     ( controlResults    =  =    null )  )     |  |     ( testResults    =  =    null )  )     {", "return    \"  \"  ;", "}", "Multiset < List < Object >  >    control    =    ImmutableSortedMultiset . copyOf (  . rowComparator ( precision )  ,    controlResults )  ;", "Multiset < List < Object >  >    test    =    ImmutableSortedMultiset . copyOf (  . rowComparator ( precision )  ,    testResults )  ;", "try    {", "Iterable <  . ChangedRow >    diff    =    ImmutableSortedMultiset .  <  . ChangedRow > naturalOrder (  )  . addAll ( Iterables . transform ( Multisets . difference ( control ,    test )  ,     (    row )     -  >    new   ChangedRow ( Changed . REMOVED ,    row ,    precision )  )  )  . addAll ( Iterables . transform ( Multisets . difference ( test ,    control )  ,     (    row )     -  >    new   ChangedRow ( Changed . ADDED ,    row ,    precision )  )  )  . build (  )  ;", "diff    =    Iterables . limit ( diff ,     1  0  0  )  ;", "StringBuilder   sb    =    new   StringBuilder (  )  ;", "sb . append ( String . format (  \" Control    % s   rows ,    Test    % s   rows % n \"  ,    control . size (  )  ,    test . size (  )  )  )  ;", "if    ( verboseResultsComparison )     {", "Joiner . on (  \"  \\ n \"  )  . appendTo ( sb ,    diff )  ;", "} else    {", "sb . append (  \" RESULTS   DO   NOT   MATCH \\ n \"  )  ;", "}", "return   sb . toString (  )  ;", "}    catch    ( TypesDoNotMatchException   e )     {", "return   e . getMessage (  )  ;", "}", "}", "METHOD_END"], "methodName": ["getResultsComparison"], "fileName": "com.facebook.presto.verifier.Validator"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   sb    =    new   StringBuilder (  )  ;", "if    (  ( getControlResult (  )  . getState (  )  )     =  =     ( QueryResult . State . TOO _ MANY _ ROWS )  )     {", "sb . append (  \"  -  -  -  -  -  -  -  -  -  -  \\ n \"  )  ;", "sb . append (  (  (  \" Name :     \"     +     ( queryPair . getName (  )  )  )     +     \"  \\ n \"  )  )  ;", "sb . append (  (  (  \" Schema    ( control )  :     \"     +     ( queryPair . getControl (  )  . getSchema (  )  )  )     +     \"  \\ n \"  )  )  ;", "sb . append (  \" Too   many   rows .  \\ n \"  )  ;", "} else", "if    (  !  ( isDeterministic (  )  )  )     {", "sb . append (  \"  -  -  -  -  -  -  -  -  -  -  \\ n \"  )  ;", "sb . append (  (  (  \" Name :     \"     +     ( queryPair . getName (  )  )  )     +     \"  \\ n \"  )  )  ;", "sb . append (  (  (  \" Schema    ( control )  :     \"     +     ( queryPair . getControl (  )  . getSchema (  )  )  )     +     \"  \\ n \"  )  )  ;", "sb . append (  \" NON   DETERMINISTIC \\ n \"  )  ;", "} else", "if    (  (  ( getControlResult (  )  . getState (  )  )     =  =     ( QueryResult . State . TIMEOUT )  )     |  |     (  ( getTResult (  )  . getState (  )  )     =  =     ( QueryResult . State . TIMEOUT )  )  )     {", "sb . append (  \"  -  -  -  -  -  -  -  -  -  -  \\ n \"  )  ;", "sb . append (  (  (  \" Name :     \"     +     ( queryPair . getName (  )  )  )     +     \"  \\ n \"  )  )  ;", "sb . append (  (  (  \" Schema    ( control )  :     \"     +     ( queryPair . getControl (  )  . getSchema (  )  )  )     +     \"  \\ n \"  )  )  ;", "sb . append (  \" TIMEOUT \\ n \"  )  ;", "} else    {", "sb . append (  \" SKIPPED :     \"  )  ;", "if    (  ( getControlResult (  )  . getException (  )  )     !  =    null )     {", "sb . append ( getControlResult (  )  . getException (  )  . getMessage (  )  )  ;", "}", "}", "return   sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getSkippedMessage"], "fileName": "com.facebook.presto.verifier.Validator"}, {"methodBody": ["METHOD_START", "{", "return   testPostQueryResults ;", "}", "METHOD_END"], "methodName": ["getTestPostQueryResults"], "fileName": "com.facebook.presto.verifier.Validator"}, {"methodBody": ["METHOD_START", "{", "return   testPreQueryResults ;", "}", "METHOD_END"], "methodName": ["getTestPreQueryResults"], "fileName": "com.facebook.presto.verifier.Validator"}, {"methodBody": ["METHOD_START", "{", "return   testResult ;", "}", "METHOD_END"], "methodName": ["getTestResult"], "fileName": "com.facebook.presto.verifier.Validator"}, {"methodBody": ["METHOD_START", "{", "double   absA    =    Math . abs ( a )  ;", "double   absB    =    Math . abs ( b )  ;", "double   diff    =    Math . abs (  ( a    -    b )  )  ;", "if    (  (  !  ( isFinite ( a )  )  )     |  |     (  !  ( isFinite ( b )  )  )  )     {", "return    ( Double . pare ( a ,    b )  )     =  =     0  ;", "}", "if    (  (  ( a    =  =     0  )     |  |     ( b    =  =     0  )  )     |  |     ( diff    <     ( Float . MIN _ NORMAL )  )  )     {", "return   diff    <     ( epsilon    *     ( Float . MIN _ NORMAL )  )  ;", "} else    {", "return    ( diff    /     ( Math . min (  ( absA    +    absB )  ,    Float . MAX _ VALUE )  )  )     <    epsilon ;", "}", "}", "METHOD_END"], "methodName": ["isClose"], "fileName": "com.facebook.presto.verifier.Validator"}, {"methodBody": ["METHOD_START", "{", "if    (  ( valid )     =  =    null )     {", "valid    =    ve (  )  ;", "}", "return   deterministic ;", "}", "METHOD_END"], "methodName": ["isDeterministic"], "fileName": "com.facebook.presto.verifier.Validator"}, {"methodBody": ["METHOD_START", "{", "return    (  (  ( x   instanceof   Byte )     |  |     ( x   instanceof   Short )  )     |  |     ( x   instanceof   Integer )  )     |  |     ( x   instanceof   Long )  ;", "}", "METHOD_END"], "methodName": ["isIntegral"], "fileName": "com.facebook.presto.verifier.Validator"}, {"methodBody": ["METHOD_START", "{", "for    ( Throwable   t    =    e . getCause (  )  ;    t    !  =    null ;    t    =    t . getCause (  )  )     {", "if    ( t . toString (  )  . contains (  \"  . SemanticException :  \"  )  )     {", "return   true ;", "}", "if    ( t . toString (  )  . contains (  \"  . ParsingException :  \"  )  )     {", "return   true ;", "}", "if    ( nullToEmpty ( t . getMessage (  )  )  . matches (  \" Function    .  *    not   registered \"  )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isPrestoQueryInvalid"], "fileName": "com.facebook.presto.verifier.Validator"}, {"methodBody": ["METHOD_START", "{", "return    ( x   instanceof   Float )     |  |     ( x   instanceof   Double )  ;", "}", "METHOD_END"], "methodName": ["isReal"], "fileName": "com.facebook.presto.verifier.Validator"}, {"methodBody": ["METHOD_START", "{", "if    (  ( queryPair . getControl (  )  . getQuery (  )  . isEmpty (  )  )     |  |     ( queryPair . getTest (  )  . getQuery (  )  . isEmpty (  )  )  )     {", "return   true ;", "}", "if    (  ( getControlResult (  )  . getState (  )  )     !  =     ( QueryResult . State . SUCCESS )  )     {", "return   true ;", "}", "if    (  !  ( isDeterministic (  )  )  )     {", "return   true ;", "}", "if    (  ( getTestResult (  )  . getState (  )  )     =  =     ( QueryResult . State . TIMEOUT )  )     {", "return   true ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isSkipped"], "fileName": "com.facebook.presto.verifier.Validator"}, {"methodBody": ["METHOD_START", "{", "return   Validator . isClose ( a ,    b ,    Math . pow (  1  0  ,     (  (  -  1  )     *     ( precision    -     1  )  )  )  )     ?     0     :     -  1  ;", "}", "METHOD_END"], "methodName": ["precisionCompare"], "fileName": "com.facebook.presto.verifier.Validator"}, {"methodBody": ["METHOD_START", "{", "SortedMultiset < List < Object >  >    control    =    ImmutableSortedMultiset . copyOf ( Validator . rowComparator ( precision )  ,    controlResult . getResults (  )  )  ;", "SortedMultiset < List < Object >  >    test    =    ImmutableSortedMultiset . copyOf ( Validator . rowComparator ( precision )  ,    testResult . getResults (  )  )  ;", "try    {", "return   control . equals ( test )  ;", "}    catch    ( TypesDoNotMatchException   e )     {", "return   false ;", "}", "}", "METHOD_END"], "methodName": ["resultsMatch"], "fileName": "com.facebook.presto.verifier.Validator"}, {"methodBody": ["METHOD_START", "{", "preQueryResults . clear (  )  ;", "for    ( String   prequeryString    :    query . getPreQueries (  )  )     {", "QueryResult   queryResult    =    executor . apply ( prequeryString )  ;", "preQueryResults . add ( queryResult )  ;", "if    (  ( queryResult . getState (  )  )     =  =     ( QueryResult . State . TIMEOUT )  )     {", "return   queryResult ;", "} else", "if    (  ( queryResult . getState (  )  )     !  =     ( QueryResult . State . SUCCESS )  )     {", "return   new   QueryResult ( QueryResult . State . FAILED _ TO _ SETUP ,    queryResult . getException (  )  ,    queryResult . getWallTime (  )  ,    queryResult . getCpuTime (  )  ,    queryResult . getQueryId (  )  ,    ImmutableList . of (  )  )  ;", "}", "}", "return   new   QueryResult ( QueryResult . State . SUCCESS ,    null ,    null ,    null ,    null ,    ImmutableList . of (  )  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.verifier.Validator"}, {"methodBody": ["METHOD_START", "{", "postQueryResults . clear (  )  ;", "for    ( String   postqueryString    :    query . getPostQues (  )  )     {", "QueryResult   queryResult    =    executor . apply ( postqueryString )  ;", "postQueryResults . add ( queryResult )  ;", "if    (  ( queryResult . getState (  )  )     !  =     ( QueryResult . State . SUCCESS )  )     {", "return   new   QueryResult ( QueryResult . State . FAILED _ TO _ TEARDOWN ,    queryResult . getException (  )  ,    queryResult . getWallTime (  )  ,    queryResult . getCpuTime (  )  ,    queryResult . getQueryId (  )  ,    ImmutableList . of (  )  )  ;", "}", "}", "return   new   QueryResult ( QueryResult . State . SUCCESS ,    null ,    null ,    null ,    null ,    ImmutableList . of (  )  )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.verifier.Validator"}, {"methodBody": ["METHOD_START", "{", "try    {", "connection . setClientInfo (  \" ApplicationName \"  ,     (  \"  - test :  \"     +     ( queryPair . getName (  )  )  )  )  ;", "connection . setCatalog ( query . getCatalog (  )  )  ;", "connection . setSchema ( query . getSchema (  )  )  ;", "}    catch    ( SQLClientInfoException   ignored )     {", "}", "}", "METHOD_END"], "methodName": ["trySetConnectionProperties"], "fileName": "com.facebook.presto.verifier.Validator"}, {"methodBody": ["METHOD_START", "{", "if    (  ( valid )     =  =    null )     {", "valid    =    ve (  )  ;", "}", "return   valid ;", "}", "METHOD_END"], "methodName": ["valid"], "fileName": "com.facebook.presto.verifier.Validator"}, {"methodBody": ["METHOD_START", "{", "controlResult    =    executeQueryControl (  )  ;", "if    (  ( controlResult . getState (  )  )     =  =     ( QueryResult . State . TOO _ MANY _ ROWS )  )     {", "testResult    =    new   QueryResult ( QueryResult . State . INVALID ,    null ,    null ,    null ,    null ,    ImmutableList . of (  )  )  ;", "return   false ;", "}", "if    (  ( controlResult . getState (  )  )     !  =     ( QueryResult . State . SUCCESS )  )     {", "testResult    =    new   QueryResult ( QueryResult . State . INVALID ,    null ,    null ,    null ,    null ,    ImmutableList . of (  )  )  ;", "return   true ;", "}", "testResult    =    executeQueryTest (  )  ;", "if    (  (  ( controlResult . getState (  )  )     !  =     ( QueryResult . State . SUCCESS )  )     |  |     (  ( testResult . getState (  )  )     !  =     ( QueryResult . State . SUCCESS )  )  )     {", "return   false ;", "}", "if    (  !  ( checkCorrectness )  )     {", "return   true ;", "}", "boolean   matches    =     . resultsMatch ( controlResult ,    testResult ,    precision )  ;", "if    (  (  ! matches )     &  &     ( checkDeterministic )  )     {", "return   checkForDeterministicAndRerunTestQueriesIfNeeded (  )  ;", "}", "return   matches ;", "}", "METHOD_END"], "methodName": ["validate"], "fileName": "com.facebook.presto.verifier.Validator"}, {"methodBody": ["METHOD_START", "{", "String   errorMessage    =    null ;", "QueryPair   queryPair    =    validator . getQueryPair (  )  ;", "QueryResult   control    =    validator . getControlResult (  )  ;", "QueryResult   test    =    validator . getTestResult (  )  ;", "if    (  !  ( validator . valid (  )  )  )     {", "errorMessage    =    String . format (  \" Test   state    % s ,    Control   state    % s \\ n \"  ,    test . getState (  )  ,    control . getState (  )  )  ;", "Exception   e    =    test . getException (  )  ;", "if    (  ( e    !  =    null )     &  &     ( VshouldAddStackTrace ( e )  )  )     {", "errorMessage    +  =    getStackTraceAsString ( e )  ;", "}", "if    (  (  ( control . getState (  )  )     =  =     ( QueryResult . State . SUCCESS )  )     &  &     (  ( test . getState (  )  )     =  =     ( QueryResult . State . SUCCESS )  )  )     {", "errorMessage    +  =    validator . getResultsComparison ( precision )  . trim (  )  ;", "}", "}", "return   new   VueryEvent ( queryPair . getSuite (  )  ,    config . getRunId (  )  ,    config . getSource (  )  ,    queryPair . getName (  )  ,     (  !  ( validator . valid (  )  )  )  ,    queryPair . getTest (  )  . getCatalog (  )  ,    queryPair . getTest (  )  . getSchema (  )  ,    queryPair . getTest (  )  . getPreQueries (  )  ,    queryPair . getTest (  )  . getQuery (  )  ,    queryPair . getTest (  )  . getPostQueries (  )  ,    test . getQueryId (  )  ,    VoptionalDurationToSeconds ( test . getCpuTime (  )  )  ,    VoptionalDurationToSeconds ( test . getWallTime (  )  )  ,    queryPair . getControl (  )  . getCatalog (  )  ,    queryPair . getControl (  )  . getSchema (  )  ,    queryPair . getControl (  )  . getPreQueries (  )  ,    queryPair . getControl (  )  . getQuery (  )  ,    queryPair . getControl (  )  . getPostQueries (  )  ,    control . getQueryId (  )  ,    VoptionalDurationToSeconds ( control . getCpuTime (  )  )  ,    VoptionalDurationToSeconds ( control . getWallTime (  )  )  ,    errorMessage )  ;", "}", "METHOD_END"], "methodName": ["buildEvent"], "fileName": "com.facebook.presto.verifier.Verifier"}, {"methodBody": ["METHOD_START", "{", "if    (  ( Pattern . matches ( config . getSkipCorrectnessRegex (  )  ,    query . getTest (  )  . getQuery (  )  )  )     |  |     ( Pattern . matches ( config . getSkipCorrectnessRegex (  )  ,    query . getControl (  )  . getQuery (  )  )  )  )     {", "return   false ;", "} else    {", "return   config . isCheckCorrectnessEnabled (  )  ;", "}", "}", "METHOD_END"], "methodName": ["isCheckCorrectness"], "fileName": "com.facebook.presto.verifier.Verifier"}, {"methodBody": ["METHOD_START", "{", "return   duration    !  =    null    ?    duration . convertTo ( TimeUnit . SECONDS )  . getValue (  )     :    null ;", "}", "METHOD_END"], "methodName": ["optionalDurationToSeconds"], "fileName": "com.facebook.presto.verifier.Verifier"}, {"methodBody": ["METHOD_START", "{", "ExecutorService   executor    =    Executors . newFixedThreadPool ( threadCount )  ;", "CompletionService < Validator >    completionService    =    new   ExecutorCompletionService <  >  ( executor )  ;", "int   totalQueries    =     ( queries . size (  )  )     *     ( config . getSuiteRepetitions (  )  )  ;", "Vlog . info (  \" Total   Queries :                 % d \"  ,    totalQueries )  ;", "Vlog . info (  \" Whitelisted   Queries :     % s \"  ,    Joiner . on (  '  ,  '  )  . join ( whitelist )  )  ;", "int   queriesSubmitted    =     0  ;", "for    ( int   i    =     0  ;    i    <     ( config . getSuiteRepetitions (  )  )  ;    i +  +  )     {", "for    ( QueryPair   query    :    queries )     {", "for    ( int   j    =     0  ;    j    <     ( config . getQueryRepetitions (  )  )  ;    j +  +  )     {", "if    (  (  !  ( whitelist . isEmpty (  )  )  )     &  &     (  !  ( whitelist . contains ( query . getName (  )  )  )  )  )     {", "Vlog . debug (  \" Query    % s   is   not   whitelisted \"  ,    query . getName (  )  )  ;", "continue ;", "}", "if    ( blacklist . contains ( query . getName (  )  )  )     {", "Vlog . debug (  \" Query    % s   is   blacklisted \"  ,    query . getName (  )  )  ;", "continue ;", "}", "Validator   validator    =    new   Validator ( config . getControlGateway (  )  ,    config . getTestGateway (  )  ,    config . getControlTimeout (  )  ,    config . getTestTimeout (  )  ,    config . getMaxRowCount (  )  ,    config . isExplainOnly (  )  ,    config . getDoublePrecision (  )  ,    isCheckCorrectness ( query )  ,    true ,    config . isVerboseResultsComparison (  )  ,    config . getControlTeardownRetries (  )  ,    config . getTestTeardownRetries (  )  ,    query )  ;", "completionService . submit ( validator :  : valid ,    validator )  ;", "queriesSubmitted +  +  ;", "}", "}", "}", "Vlog . info (  \" Allowed   Queries :                 % d \"  ,    queriesSubmitted )  ;", "Vlog . info (  \" Skipped   Queries :                 % d \"  ,     ( totalQueries    -    queriesSubmitted )  )  ;", "Vlog . info (  \"  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  \"  )  ;", "executor . shutdown (  )  ;", "int   total    =     0  ;", "int   valid    =     0  ;", "int   failed    =     0  ;", "int   skipped    =     0  ;", "double   lastProgress    =     0  ;", "while    ( total    <    queriesSubmitted )     {", "total +  +  ;", "Validator   validator    =    VtakeUnchecked ( completionService )  ;", "if    ( validator . isSkipped (  )  )     {", "if    (  !  ( config . isQuiet (  )  )  )     {", "Vlog . warn (  \"  % s \"  ,    validator . getSkippedMessage (  )  )  ;", "}", "skipped +  +  ;", "continue ;", "}", "if    ( validator . valid (  )  )     {", "valid +  +  ;", "} else    {", "failed +  +  ;", "}", "for    ( EventClient   eventClient    :    eventClients )     {", "eventClient . post ( buildEvent ( validator )  )  ;", "}", "double   progress    =     (  (  ( double )     ( total )  )     /    totalQueries )     *     1  0  0  ;", "if    (  (  !  ( config . isQuiet (  )  )  )     |  |     (  ( progress    -    lastProgress )     >     1  )  )     {", "Vlog . info (  \" Progress :     % s   valid ,     % s   failed ,     % s   skipped ,     %  .  2 f %  %    done \"  ,    valid ,    failed ,    skipped ,    progress )  ;", "lastProgress    =    progress ;", "}", "}", "Vlog . info (  \" Results :     % s    /     % s    (  % s   skipped )  \"  ,    valid ,    failed ,    skipped )  ;", "Vlog . info (  \"  \"  )  ;", "for    ( EventClient   eventClient    :    eventClients )     {", "if    ( eventClient   instanceof   Closeable )     {", "try    {", "(  ( Closeable )     ( eventClient )  )  . close (  )  ;", "}    catch    ( IOException   ignored )     {", "}", "Vlog . info (  \"  \"  )  ;", "}", "}", "return   failed ;", "}", "METHOD_END"], "methodName": ["run"], "fileName": "com.facebook.presto.verifier.Verifier"}, {"methodBody": ["METHOD_START", "{", "if    ( e   instanceof   PrestoException )     {", "ErrorCode   errorCode    =     (  ( PrestoException )     ( e )  )  . getErrorCode (  )  ;", "if    ( VEXPECTED _ ERRORS . contains ( errorCode )  )     {", "return   false ;", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["shouldAddStackTrace"], "fileName": "com.facebook.presto.verifier.Verifier"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   pletionService . take (  )  . get (  )  ;", "}    catch    ( ExecutionException   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["takeUnchecked"], "fileName": "com.facebook.presto.verifier.Verifier"}, {"methodBody": ["METHOD_START", "{", "return   additionalJdbcDriverPath ;", "}", "METHOD_END"], "methodName": ["getAdditionalJdbcDriverPath"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   blacklist ;", "}", "METHOD_END"], "methodName": ["getBlacklist"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   controlCatalogOverride ;", "}", "METHOD_END"], "methodName": ["getControlCatalogOverride"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   controlGateway ;", "}", "METHOD_END"], "methodName": ["getControlGateway"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   controlJdbcDriverName ;", "}", "METHOD_END"], "methodName": ["getControlJdbcDriverName"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   controlPasswordOverride ;", "}", "METHOD_END"], "methodName": ["getControlPasswordOverride"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   controlQueryTypes ;", "}", "METHOD_END"], "methodName": ["getControlQueryTypes"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   controlSchemaOverride ;", "}", "METHOD_END"], "methodName": ["getControlSchemaOverride"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   controlTeardownRetries ;", "}", "METHOD_END"], "methodName": ["getControlTeardownRetries"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   controlTimeout ;", "}", "METHOD_END"], "methodName": ["getControlTimeout"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   controlUsernameOverride ;", "}", "METHOD_END"], "methodName": ["getControlUsernameOverride"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   doublePrecision ;", "}", "METHOD_END"], "methodName": ["getDoublePrecision"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   eventClients ;", "}", "METHOD_END"], "methodName": ["getEventClients"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   eventLogFile ;", "}", "METHOD_END"], "methodName": ["getEventLogFile"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   maxQueries ;", "}", "METHOD_END"], "methodName": ["getMaxQueries"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   maxRowCount ;", "}", "METHOD_END"], "methodName": ["getMaxRowCount"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   queryDatabase ;", "}", "METHOD_END"], "methodName": ["getQueryDatabase"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   queryRepetitions ;", "}", "METHOD_END"], "methodName": ["getQueryRepetitions"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   regressionMinCpuTime ;", "}", "METHOD_END"], "methodName": ["getRegressionMinCpuTime"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   runId ;", "}", "METHOD_END"], "methodName": ["getRunId"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   QualifiedName . of ( Splitter . on (  \"  .  \"  )  . splitToList ( shadowControlTablePrefix )  )  ;", "}", "METHOD_END"], "methodName": ["getShadowControlTablePrefix"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   QualifiedName . of ( Splitter . on (  \"  .  \"  )  . splitToList ( shadowTestTablePrefix )  )  ;", "}", "METHOD_END"], "methodName": ["getShadowTestTablePrefix"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   shadowWrites ;", "}", "METHOD_END"], "methodName": ["getShadowWrites"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   skipCorrectnessRegex ;", "}", "METHOD_END"], "methodName": ["getSkipCorrectnessRegex"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   skipCpuCheckRegex ;", "}", "METHOD_END"], "methodName": ["getSkipCpuCheckRegex"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   source ;", "}", "METHOD_END"], "methodName": ["getSource"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return    ( suites )     =  =    null    ?    null    :    suites . get (  0  )  ;", "}", "METHOD_END"], "methodName": ["getSuite"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   suiteRepetitions ;", "}", "METHOD_END"], "methodName": ["getSuiteRepetitions"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   suites ;", "}", "METHOD_END"], "methodName": ["getSuites"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   testCatalogOverride ;", "}", "METHOD_END"], "methodName": ["getTestCatalogOverride"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   testGateway ;", "}", "METHOD_END"], "methodName": ["getTestGateway"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   testJdbcDriverName ;", "}", "METHOD_END"], "methodName": ["getTestJdbcDriverName"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   testPasswordOverride ;", "}", "METHOD_END"], "methodName": ["getTestPasswordOverride"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   testQueryTypes ;", "}", "METHOD_END"], "methodName": ["getTestQueryTypes"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   testSchemaOverride ;", "}", "METHOD_END"], "methodName": ["getTestSchemaOverride"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   testTeardownRetries ;", "}", "METHOD_END"], "methodName": ["getTestTeardownRetries"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   testTimeout ;", "}", "METHOD_END"], "methodName": ["getTestTimeout"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   testUsernameOverride ;", "}", "METHOD_END"], "methodName": ["getTestUsernameOverride"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   threadCount ;", "}", "METHOD_END"], "methodName": ["getThreadCount"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   whitelist ;", "}", "METHOD_END"], "methodName": ["getWhitelist"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   alwaysReport ;", "}", "METHOD_END"], "methodName": ["isAlwaysReport"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   checkCorrectness ;", "}", "METHOD_END"], "methodName": ["isCheckCorrectnessEnabled"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   checkCpu ;", "}", "METHOD_END"], "methodName": ["isCheckCpuEnabled"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   explainOnly ;", "}", "METHOD_END"], "methodName": ["isExplainOnly"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   quiet ;", "}", "METHOD_END"], "methodName": ["isQuiet"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   verboseResultsComparison ;", "}", "METHOD_END"], "methodName": ["isVerboseResultsComparison"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . additionalJdbcDriverPath    =    path ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setAdditionalJdbcDriverPath"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . alwaysReport    =    alwaysReport ;", "turn   this ;", "}", "METHOD_END"], "methodName": ["setAlwaysReport"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "ImmutableSet . BuildString >    blacklistBuild =    ImmutableSet . build )  ;", "for    ( String   value    :    Splitton (  '  ,  '  )  . trimResults (  )  . omitEmptyStrings (  )  . split ( blacklist )  )     {", "blacklistBuildadd ( value )  ;", "}", "this . blacklist    =    blacklistBuildbuild (  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setBlacklist"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . checkCorrectness    =    checkCorrectness ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setCheckCorrectnessEnabled"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . checkCpu    =    checkCpu ;", "turn   this ;", "}", "METHOD_END"], "methodName": ["setCheckCpuEnabled"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . controlCatalogOverride    =    controlCatalogOverride ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setControlCatalogOverride"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . controlGateway    =    controlGateway ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setControlGateway"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . controlJdbcDriverName    =    controlJdbcDriverName ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setControlJdbcDriverName"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . controlPasswordOverride    =    controlPasswordOverride ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setControlPasswordOverride"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "if    ( Strings . isNullOrEmpty ( types )  )     {", "this . controlQuTypes    =    ImmutableSet . of (  )  ;", "return   this ;", "}", "ImmutableSet . BuildQuType >    build =    ImmutableSet . build )  ;", "for    ( String   value    :    Splitton (  '  ,  '  )  . trimResults (  )  . omitEmptyStrings (  )  . split ( types )  )     {", "buildadd ( QuType . valueOf ( value . toUppase (  )  )  )  ;", "}", "this . controlQuTypes    =    buildbuild (  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setControlQueryTypes"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . controlSchemaOverride    =    controlSchemaOverride ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setControlSchemaOverride"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . controlTeardownRetries    =    controlTeardownRetries ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setControlTeardownRetries"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . controlTimeout    =    controlTimeout ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setControlTimeout"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . controlUsernameOverride    =    controlUsernameOverride ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setControlUsernameOverride"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . doublePrecision    =    doublePrecision ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setDoublePrecision"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( eventClients ,     \" eventClients   is   null \"  )  ;", "ImmutableSet . BuildString >    build =    ImmutableSet . build )  ;", "for    ( String   value    :    Splitton (  '  ,  '  )  . trimResults (  )  . omitEmptyStrings (  )  . split ( eventClients )  )     {", "buildadd ( value )  ;", "}", "this . eventClients    =    buildbuild (  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setEventClients"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . eventLogFile    =    eventLogFile ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setEventLogFile"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . explainOnly    =    explainOnly ;", "turn   this ;", "}", "METHOD_END"], "methodName": ["setExplainOnly"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . maxQueries    =    maxQueries ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setMaxQueries"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . maxRowCount    =    maxRowCount ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setMaxRowCount"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . queryDatabase    =    queryDatabase ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setQueryDatabase"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . queryRepetitions    =    queryRepetitions ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setQueryRepetitions"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . quiet    =    quiet ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setQuiet"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . regressionMinCpuTime    =    regressionMinCpuTime ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setRegressionMinCpuTime"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . runId    =    runId ;", "turn   this ;", "}", "METHOD_END"], "methodName": ["setRunId"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . shadowControlTablePrefix    =    prefix ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setShadowControlTablePrefix"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . shadowTestTablePrefix    =    prefix ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setShadowTestTablePrefix"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . shadowWrites    =    shadowWrites ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setShadowWrites"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . skipCorrectnessRegex    =    skipCorrectnessRegex ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setSkipCorrectnessRegex"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . skipCpuCheckRegex    =    skipCpuCheckRegex ;", "turn   this ;", "}", "METHOD_END"], "methodName": ["setSkipCpuCheckRegex"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . source    =    source ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setSource"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "if    ( suite    =  =    null )     {", "return   this ;", "}", "suites    =    ImmutableList . of ( suite )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setSuite"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . suiteRepetitions    =    suiteRepetitions ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setSuiteRepetitions"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "if    ( Strings . isNullOrEmpty ( suites )  )     {", "return   this ;", "}", "ImmutableList . BuildString >    build =    ImmutableList . build )  ;", "for    ( String   value    :    Splitton (  '  ,  '  )  . trimResults (  )  . omitEmptyStrings (  )  . split ( suites )  )     {", "buildadd ( value )  ;", "}", "this . suites    =    buildbuild (  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setSuites"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . testCatalogOverride    =    testCatalogOverride ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setTestCatalogOverride"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . testGateway    =    testGateway ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setTestGateway"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . testJdbcDriverName    =    testJdbcDriverName ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setTestJdbcDriverName"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . testPasswordOverride    =    testPasswordOverride ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setTestPasswordOverride"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "if    ( Strings . isNullOrEmpty ( types )  )     {", "this . tQueryTypes    =    ImmutableSet . of (  )  ;", "return   this ;", "}", "ImmutableSet . Builder < QueryType >    builder    =    ImmutableSet . builder (  )  ;", "for    ( String   value    :    Splitter . on (  '  ,  '  )  . trimResults (  )  . omitEmptyStrings (  )  . split ( types )  )     {", "builder . add ( QueryType . valueOf ( value . toUpperCase (  )  )  )  ;", "}", "this . tQueryTypes    =    builder . build (  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setTestQueryTypes"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . testSchemaOverride    =    testSchemaOverride ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setTestSchemaOverride"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . testTeardownRetries    =    testTeardownRetries ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setTestTeardownRetries"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . testTimeout    =    testTimeout ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setTestTimeout"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . testUsernameOverride    =    testUsernameOverride ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setTestUsernameOverride"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . threadCount    =    threadCount ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setThreadCount"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "this . verboseResultsComparison    =    verboseResultsComparison ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setVerboseResultsComparison"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "ImmutableSet . BuildString >    whitelistBuild =    ImmutableSet . build )  ;", "for    ( String   value    :    Splitton (  '  ,  '  )  . trimResults (  )  . omitEmptyStrings (  )  . split ( whitelist )  )     {", "whitelistBuildadd ( value )  ;", "}", "this . whitelist    =    whitelistBuildbuild (  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setWhitelist"], "fileName": "com.facebook.presto.verifier.VerifierConfig"}, {"methodBody": ["METHOD_START", "{", "return   controlCatalog ;", "}", "METHOD_END"], "methodName": ["getControlCatalog"], "fileName": "com.facebook.presto.verifier.VerifierQueryEvent"}, {"methodBody": ["METHOD_START", "{", "return   controlCpuTimeSecs ;", "}", "METHOD_END"], "methodName": ["getControlCpuTimeSecs"], "fileName": "com.facebook.presto.verifier.VerifierQueryEvent"}, {"methodBody": ["METHOD_START", "{", "return   controlQuery ;", "}", "METHOD_END"], "methodName": ["getControlQuery"], "fileName": "com.facebook.presto.verifier.VerifierQueryEvent"}, {"methodBody": ["METHOD_START", "{", "return   controlQueryId ;", "}", "METHOD_END"], "methodName": ["getControlQueryId"], "fileName": "com.facebook.presto.verifier.VerifierQueryEvent"}, {"methodBody": ["METHOD_START", "{", "return   controlSchema ;", "}", "METHOD_END"], "methodName": ["getControlSchema"], "fileName": "com.facebook.presto.verifier.VerifierQueryEvent"}, {"methodBody": ["METHOD_START", "{", "return   controlSetupQueries ;", "}", "METHOD_END"], "methodName": ["getControlSetupQueries"], "fileName": "com.facebook.presto.verifier.VerifierQueryEvent"}, {"methodBody": ["METHOD_START", "{", "return   controlTeardownQueries ;", "}", "METHOD_END"], "methodName": ["getControlTeardownQueries"], "fileName": "com.facebook.presto.verifier.VerifierQueryEvent"}, {"methodBody": ["METHOD_START", "{", "return   controlWallTimeSecs ;", "}", "METHOD_END"], "methodName": ["getControlWallTimeSecs"], "fileName": "com.facebook.presto.verifier.VerifierQueryEvent"}, {"methodBody": ["METHOD_START", "{", "return   errorMessage ;", "}", "METHOD_END"], "methodName": ["getErrorMessage"], "fileName": "com.facebook.presto.verifier.VerifierQueryEvent"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.verifier.VerifierQueryEvent"}, {"methodBody": ["METHOD_START", "{", "return   runId ;", "}", "METHOD_END"], "methodName": ["getRunId"], "fileName": "com.facebook.presto.verifier.VerifierQueryEvent"}, {"methodBody": ["METHOD_START", "{", "return   source ;", "}", "METHOD_END"], "methodName": ["getSource"], "fileName": "com.facebook.presto.verifier.VerifierQueryEvent"}, {"methodBody": ["METHOD_START", "{", "return   suite ;", "}", "METHOD_END"], "methodName": ["getSuite"], "fileName": "com.facebook.presto.verifier.VerifierQueryEvent"}, {"methodBody": ["METHOD_START", "{", "return   testCatalog ;", "}", "METHOD_END"], "methodName": ["getTestCatalog"], "fileName": "com.facebook.presto.verifier.VerifierQueryEvent"}, {"methodBody": ["METHOD_START", "{", "return   testCpuTimeSecs ;", "}", "METHOD_END"], "methodName": ["getTestCpuTimeSecs"], "fileName": "com.facebook.presto.verifier.VerifierQueryEvent"}, {"methodBody": ["METHOD_START", "{", "return   testQuery ;", "}", "METHOD_END"], "methodName": ["getTestQuery"], "fileName": "com.facebook.presto.verifier.VerifierQueryEvent"}, {"methodBody": ["METHOD_START", "{", "return   testQueryId ;", "}", "METHOD_END"], "methodName": ["getTestQueryId"], "fileName": "com.facebook.presto.verifier.VerifierQueryEvent"}, {"methodBody": ["METHOD_START", "{", "return   testSchema ;", "}", "METHOD_END"], "methodName": ["getTestSchema"], "fileName": "com.facebook.presto.verifier.VerifierQueryEvent"}, {"methodBody": ["METHOD_START", "{", "return   testSetupQueries ;", "}", "METHOD_END"], "methodName": ["getTestSetupQueries"], "fileName": "com.facebook.presto.verifier.VerifierQueryEvent"}, {"methodBody": ["METHOD_START", "{", "return   testTeardownQueries ;", "}", "METHOD_END"], "methodName": ["getTestTeardownQueries"], "fileName": "com.facebook.presto.verifier.VerifierQueryEvent"}, {"methodBody": ["METHOD_START", "{", "return   testWallTimeSecs ;", "}", "METHOD_END"], "methodName": ["getTestWallTimeSecs"], "fileName": "com.facebook.presto.verifier.VerifierQueryEvent"}, {"methodBody": ["METHOD_START", "{", "return   failed ;", "}", "METHOD_END"], "methodName": ["isFailed"], "fileName": "com.facebook.presto.verifier.VerifierQueryEvent"}, {"methodBody": ["METHOD_START", "{", "return   queries . stream (  )  . map (  (    input )     -  >     {", "Query   test    =    new   Query ( Optional . ofNullable ( config . getTestCatalogOverride (  )  )  . orElse ( input . getTest (  )  . getCatalog (  )  )  ,    Optional . ofNullable ( config . getTestSchemaOverride (  )  )  . orElse ( input . getTest (  )  . getSchema (  )  )  ,    input . getTest (  )  . getPreQueries (  )  ,    input . getTest (  )  . getQuery (  )  ,    input . getTest (  )  . getPostQueries (  )  ,    Optional . ofNullable ( config . getTestUsernameOverride (  )  )  . orElse ( input . getTest (  )  . getUsername (  )  )  ,    Optional . ofNullable ( config . getTestPasswordOverride (  )  )  . orElse ( Optional . ofNullable ( input . getTest (  )  . getPassword (  )  )  . orElse ( null )  )  ,    input . getTest (  )  . getSessionProperties (  )  )  ;", "Query   control    =    new   Query ( Optional . ofNullable ( config . getControlCatalogOverride (  )  )  . orElse ( input . getControl (  )  . getCatalog (  )  )  ,    Optional . ofNullable ( config . getControlSchemaOverride (  )  )  . orElse ( input . getControl (  )  . getSchema (  )  )  ,    input . getControl (  )  . getPreQueries (  )  ,    input . getControl (  )  . getQuery (  )  ,    input . getControl (  )  . getPostQueries (  )  ,    Optional . ofNullable ( config . getControlUsernameOverride (  )  )  . orElse ( input . getControl (  )  . getUsername (  )  )  ,    Optional . ofNullable ( config . getControlPasswordOverride (  )  )  . orElse ( Optional . ofNullable ( input . getControl (  )  . getPassword (  )  )  . orElse ( null )  )  ,    input . getControl (  )  . getSessionProperties (  )  )  ;", "return   new   QueryPair ( input . getSuite (  )  ,    input . getName (  )  ,    test ,    control )  ;", "}  )  . collect ( toImmutableList (  )  )  ;", "}", "METHOD_END"], "methodName": ["applyOverrides"], "fileName": "com.facebook.presto.verifier.VerifyCommand"}, {"methodBody": ["METHOD_START", "{", "return   queries ;", "}", "METHOD_END"], "methodName": ["filterQueries"], "fileName": "com.facebook.presto.verifier.VerifyCommand"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < QueryPair >    builder    =    ImmutableList . builder (  )  ;", "for    ( QueryPair   pair    :    queries )     {", "if    (  (  . queryTypeAllowed ( parser ,    config . getControlQueryTypes (  )  ,    pair . getControl (  )  )  )     &  &     (  . queryTypeAllowed ( parser ,    config . getTestQueryTypes (  )  ,    pair . getTest (  )  )  )  )     {", "builder . add ( pair )  ;", "}", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["filterQueryTypes"], "fileName": "com.facebook.presto.verifier.VerifyCommand"}, {"methodBody": ["METHOD_START", "{", "return   ImmutableList . of (  )  ;", "}", "METHOD_END"], "methodName": ["getAdditionalModules"], "fileName": "com.facebook.presto.verifier.VerifyCommand"}, {"methodBody": ["METHOD_START", "{", "return   new   SqlParserOptions (  )  ;", "}", "METHOD_END"], "methodName": ["getParserOptions"], "fileName": "com.facebook.presto.verifier.VerifyCommand"}, {"methodBody": ["METHOD_START", "{", "VerifierConfig   config    =    injector . getInstance ( VerifierConfig . class )  ;", "return    (  )     -  >    DriverManager . getConnection ( config . getQueryDatabase (  )  )  ;", "}", "METHOD_END"], "methodName": ["getQueryDatabase"], "fileName": "com.facebook.presto.verifier.VerifyCommand"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < URL >    urlList    =    ImmutableList . builder (  )  ;", "File   driPath    =    new   File ( path )  ;", "if    (  !  ( driPath . isDirectory (  )  )  )     {", "urlList . add ( Paths . get ( path )  . toUri (  )  . toURL (  )  )  ;", "return   urlList . build (  )  ;", "}", "File [  ]    files    =    driPath . listFiles (  (    dir ,    name )     -  >     {", "return   name . endsWith (  \"  . jar \"  )  ;", "}  )  ;", "if    ( files    =  =    null )     {", "return   urlList . build (  )  ;", "}", "for    ( File   file    :    files )     {", "if    ( file . isDirectory (  )  )     {", "continue ;", "}", "urlList . add ( Paths . get ( file . getAbsolutePath (  )  )  . toUri (  )  . toURL (  )  )  ;", "}", "return   urlList . build (  )  ;", "}", "METHOD_END"], "methodName": ["getUrls"], "fileName": "com.facebook.presto.verifier.VerifyCommand"}, {"methodBody": ["METHOD_START", "{", "try    {", "try    ( URLClassLoader   classLoader    =    new   URLClassLoader ( urls )  )     {", "Dri   dri    =     (  ( Dri )     ( Class . forName ( jdbcClassName ,    true ,    classLoader )  . getConstructor (  )  . newInstance (  )  )  )  ;", "DriManager . registerDri ( new   ForwardingDri ( dri )  )  ;", "}", "}    catch    ( Exception   e )     {", "throw   Throwables . propagate ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["loadJdbcDriver"], "fileName": "com.facebook.presto.verifier.VerifyCommand"}, {"methodBody": ["METHOD_START", "{", "Set < QueryType >    types    =    EnumSet . noneOf ( QueryType . class )  ;", "try    {", "for    ( String   sql    :    query . getPreQueries (  )  )     {", "types . add (  . statementToQueryType ( parser ,    sql )  )  ;", "}", "types . add (  . statementToQueryType ( parser ,    query . getQuery (  )  )  )  ;", "for    ( String   sql    :    query . getPostQueries (  )  )     {", "types . add (  . statementToQueryType ( parser ,    sql )  )  ;", "}", "}    catch    ( UnsupportedOperationException   e )     {", "return   false ;", "}", "return   allowedTypes . containsAll ( types )  ;", "}", "METHOD_END"], "methodName": ["queryTypeAllowed"], "fileName": "com.facebook.presto.verifier.VerifyCommand"}, {"methodBody": ["METHOD_START", "{", "QueryRewriter   testRewriter    =    new   QueryRewriter ( parser ,    config . getTestGateway (  )  ,    config . getShadowTestTablePrefix (  )  ,    Optional . ofNullable ( config . getTestCatalogOverride (  )  )  ,    Optional . ofNullable ( config . getTestSchemaOverride (  )  )  ,    Optional . ofNullable ( config . getTestUsernameOverride (  )  )  ,    Optional . ofNullable ( config . getTestPasswordOverride (  )  )  ,    config . getDoublePrecision (  )  ,    config . getTestTimeout (  )  )  ;", "QueryRewriter   controlRewriter    =    new   QueryRewriter ( parser ,    config . getControlGateway (  )  ,    config . getShadowControlTablePrefix (  )  ,    Optional . ofNullable ( config . getControlCatalogOverride (  )  )  ,    Optional . ofNullable ( config . getControlSchemaOverride (  )  )  ,    Optional . ofNullable ( config . getControlUsernameOverride (  )  )  ,    Optional . ofNullable ( config . getControlPasswordOverride (  )  )  ,    config . getDoublePrecision (  )  ,    config . getControlTimeout (  )  )  ;", "ImmutableList . Builder < QueryPair >    builder    =    ImmutableList . builder (  )  ;", "for    ( QueryPair   pair    :    queries )     {", "try    {", "Query   testQuery    =    testRewriter . shadowQuery ( pair . getTest (  )  )  ;", "Query   controlQuery    =    controlRewriter . shadowQuery ( pair . getControl (  )  )  ;", "builder . add ( new   QueryPair ( pair . getSuite (  )  ,    pair . getName (  )  ,    testQuery ,    controlQuery )  )  ;", "}    catch    ( SQLException    |    QueryRewriter . QueryRewriteException   e )     {", ". LOG . warn ( e ,     \" Failed   to   rewrite    % s   for   shadowing .    Skipping .  \"  ,    pair . getName (  )  )  ;", "}", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["rewriteQueries"], "fileName": "com.facebook.presto.verifier.VerifyCommand"}, {"methodBody": ["METHOD_START", "{", "if    (  ( configFilename )     !  =    null )     {", "System . setProperty (  \" config \"  ,    configFilename )  ;", "}", "ImmutableList . Builder < Module >    builder    =    ImmutableList .  < Module > builder (  )  . add ( new   PrestoVerifierModule (  )  )  . addAll ( getAdditionalModules (  )  )  ;", "Bootstrap   app    =    new   Bootstrap ( builder . build (  )  )  ;", "Injector   injector ;", "try    {", "injector    =    app . strictConfig (  )  . initialize (  )  ;", "}    catch    ( Exception   e )     {", "throwIfUnchecked ( e )  ;", "throw   new   RuntimeException ( e )  ;", "}", "try    {", "VerifierConfig   config    =    injector . getInstance ( VerifierConfig . class )  ;", "injector . injectMembers ( this )  ;", "Set < String >    supportedEventClients    =    injector . getInstance ( Key . get ( new   com . google . inject . TypeLiteral < Set < String >  >  (  )     {  }  ,    SupportedEventClients . class )  )  ;", "for    ( String   clientType    :    config . getEventClients (  )  )     {", "checkArgument ( supportedEventClients . contains ( clientType )  ,     \" Unsupported   event   client :     % s \"  ,    clientType )  ;", "}", "Set < EventClient >    eventClients    =    injector . getInstance ( Key . get ( new   com . google . inject . TypeLiteral < Set < EventClient >  >  (  )     {  }  )  )  ;", "VerifierDao   dao    =    Jdbi . create ( getQueryDatabase ( injector )  )  . installPlugin ( new   SqlObjectPlugin (  )  )  . onDemand ( VerifierDao . class )  ;", "ImmutableList . Builder < QueryPair >    queriesBuilder    =    ImmutableList . builder (  )  ;", "for    ( String   suite    :    config . getSuites (  )  )     {", "queriesBuilder . addAll ( dao . getQueriesBySuite ( suite ,    config . getMaxQueries (  )  )  )  ;", "}", "List < QueryPair >    queries    =    queriesBuilder . build (  )  ;", "queries    =    VerifyCommand . applyOverrides ( config ,    queries )  ;", "queries    =    VerifyCommand . filterQueryTypes ( new   sql . parser . SqlParser ( getParserOptions (  )  )  ,    config ,    queries )  ;", "queries    =    filterQueries ( queries )  ;", "if    ( config . getShadowWrites (  )  )     {", "Sets . SetView < QueryType >    allowedTypes    =    Sets . union ( config . getTestQueryTypes (  )  ,    config . getControlQueryTypes (  )  )  ;", "checkArgument (  (  !  ( Sets . intersection ( allowedTypes ,    ImmutableSet . of ( QueryType . CREATE ,    QueryType . MODIFY )  )  . isEmpty (  )  )  )  ,     \" CREATE   or   MODIFY   queries   must   be   allowed   in   test   or   control   to   use   write   shadowing \"  )  ;", "queries    =    VerifyCommand . rewriteQueries ( new   sql . parser . SqlParser ( getParserOptions (  )  )  ,    config ,    queries )  ;", "}", "if    (  ( config . getAdditionalJdbcDriverPath (  )  )     !  =    null )     {", "List < URL >    urlList    =    VerifyCommand . getUrls ( config . getAdditionalJdbcDriverPath (  )  )  ;", "URL [  ]    urls    =    new   URL [ urlList . size (  )  ]  ;", "urlList . toArray ( urls )  ;", "if    (  ( config . getTestJdbcDriverName (  )  )     !  =    null )     {", "VerifyCommand . loadJdbcDriver ( urls ,    config . getTestJdbcDriverName (  )  )  ;", "}", "if    (  ( config . getControlJdbcDriverName (  )  )     !  =    null )     {", "VerifyCommand . loadJdbcDriver ( urls ,    config . getControlJdbcDriverName (  )  )  ;", "}", "}", "int   numFailedQueries    =    new   Verifier ( System . out ,    config ,    eventClients )  . run ( queries )  ;", "System . exit (  ( numFailedQueries    >     0     ?     1     :     0  )  )  ;", "}    catch    ( InterruptedException    |    MalformedURLException   e )     {", "throwIfUnchecked ( e )  ;", "throw   new   RuntimeException ( e )  ;", "}    finally    {", "try    {", "injector . getInstance ( LifeCycleManager . class )  . stop (  )  ;", "}    catch    ( Exception   e )     {", "throwIfUnchecked ( e )  ;", "throw   new   RuntimeException ( e )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["run"], "fileName": "com.facebook.presto.verifier.VerifyCommand"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   VerifyCommand . statementToQueryType ( parser . createStatement ( sql ,    new   sql . parser . ParsingOptions ( DecimalLiteralTreatment . AS _ DOUBLE )  )  )  ;", "}    catch    ( RuntimeException   e )     {", "throw   new   UnsupportedOperationException (  )  ;", "}", "}", "METHOD_END"], "methodName": ["statementToQueryType"], "fileName": "com.facebook.presto.verifier.VerifyCommand"}, {"methodBody": ["METHOD_START", "{", "if    ( statement   instanceof   AddColumn )     {", "return   QueryType . MODIFY ;", "}", "if    ( statement   instanceof   CreateTable )     {", "return   QueryType . CREATE ;", "}", "if    ( statement   instanceof   CreateTableAsSelect )     {", "return   QueryType . CREATE ;", "}", "if    ( statement   instanceof   CreateView )     {", "if    (  (  ( CreateView )     ( statement )  )  . isReplace (  )  )     {", "return   QueryType . MODIFY ;", "}", "return   QueryType . CREATE ;", "}", "if    ( statement   instanceof   Delete )     {", "return   QueryType . MODIFY ;", "}", "if    ( statement   instanceof   DropTable )     {", "return   QueryType . MODIFY ;", "}", "if    ( statement   instanceof   DropView )     {", "return   QueryType . MODIFY ;", "}", "if    ( statement   instanceof   Explain )     {", "if    (  (  ( Explain )     ( statement )  )  . isAnalyze (  )  )     {", "return    . statementToQueryType (  (  ( Explain )     ( statement )  )  . getStatement (  )  )  ;", "}", "return   QueryType . READ ;", "}", "if    ( statement   instanceof   Insert )     {", "return   QueryType . MODIFY ;", "}", "if    ( statement   instanceof   Query )     {", "return   QueryType . READ ;", "}", "if    ( statement   instanceof   RenameColumn )     {", "return   QueryType . MODIFY ;", "}", "if    ( statement   instanceof   DropColumn )     {", "return   QueryType . MODIFY ;", "}", "if    ( statement   instanceof   RenameTable )     {", "return   QueryType . MODIFY ;", "}", "if    ( statement   instanceof   ShowCatalogs )     {", "return   QueryType . READ ;", "}", "if    ( statement   instanceof   ShowColumns )     {", "return   QueryType . READ ;", "}", "if    ( statement   instanceof   ShowFunctions )     {", "return   QueryType . READ ;", "}", "if    ( statement   instanceof   ShowPartitions )     {", "return   QueryType . READ ;", "}", "if    ( statement   instanceof   ShowSchemas )     {", "return   QueryType . READ ;", "}", "if    ( statement   instanceof   ShowSession )     {", "return   QueryType . READ ;", "}", "if    ( statement   instanceof   ShowTables )     {", "return   QueryType . READ ;", "}", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["statementToQueryType"], "fileName": "com.facebook.presto.verifier.VerifyCommand"}]