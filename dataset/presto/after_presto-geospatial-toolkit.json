[{"methodBody": ["METHOD_START", "{", "return   GeometrySerde . deserialize ( data . complexGeometryCollectionSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeComplexGeometryCollection"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . deserializeEnvelope ( data . complexGeometryCollectionSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeComplexGeometryCollectionEnvelope"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . deserialize ( data . complexLineStringSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeComplexLineString"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . deserializeEnvelope ( data . complexLineStringSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeComplexLineStringEnvelope"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . deserialize ( data . complexMultiLineStringSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeComplexMultiLineString"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . deserializeEnvelope ( data . complexMultiLineStringSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeComplexMultiLineStringEnvelope"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . deserialize ( data . complexMultiPolygonSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeComplexMultiPolygon"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . deserializeEnvelope ( data . complexMultiPolygonSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeComplexMultiPolygonEnvelope"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . deserialize ( data . complexMultipointSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeComplexMultipoint"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . deserializeEnvelope ( data . complexMultipointSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeComplexMultipointEnvelope"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . deserialize ( data . complexPolygonSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeComplexPolygon"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . deserializeEnvelope ( data . complexPolygonSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeComplexPolygonEnvelope"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . deserialize ( data . pointSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializePoint"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . deserializeEnvelope ( data . pointSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializePointEnvelope"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . deserialize ( data . simpleGeometryCollectionSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeSimpleGeometryCollection"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . deserializeEnvelope ( data . simpleGeometryCollectionSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeSimpleGeometryCollectionEnvelope"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . deserialize ( data . simpleLineStringSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeSimpleLineString"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . deserializeEnvelope ( data . simpleLineStringSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeSimpleLineStringEnvelope"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . deserialize ( data . simpleMultiLineStringSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeSimpleMultiLineString"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . deserializeEnvelope ( data . simpleMultiLineStringSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeSimpleMultiLineStringEnvelope"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . deserialize ( data . simpleMultiPolygonSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeSimpleMultiPolygon"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . deserializeEnvelope ( data . simpleMultiPolygonSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeSimpleMultiPolygonEnvelope"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . deserialize ( data . simpleMultipointSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeSimpleMultipoint"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . deserializeEnvelope ( data . simpleMultipointSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeSimpleMultipointEnvelope"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . deserialize ( data . simplePolygonSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeSimplePolygon"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . deserializeEnvelope ( data . simplePolygonSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeSimplePolygonEnvelope"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "Options   options    =    new   OptionsBuilder (  )  . verbosity ( NORMAL )  . include (  (  (  \"  .  *  \"     +     ( BenchmarkGeometrySerde . class . getSimpleName (  )  )  )     +     \"  .  *  \"  )  )  . build (  )  ;", "new   Runner ( options )  . run (  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . serialize ( data . complexGeometryCollection )  ;", "}", "METHOD_END"], "methodName": ["serializeComplexGeometryCollection"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . serialize ( data . complexLineString )  ;", "}", "METHOD_END"], "methodName": ["serializeComplexLineString"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . serialize ( data . complexMultiLineString )  ;", "}", "METHOD_END"], "methodName": ["serializeComplexMultiLineString"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . serialize ( data . complexMultiPolygon )  ;", "}", "METHOD_END"], "methodName": ["serializeComplexMultiPolygon"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . serialize ( data . complexMultipoint )  ;", "}", "METHOD_END"], "methodName": ["serializeComplexMultipoint"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . serialize ( data . complexPolygon )  ;", "}", "METHOD_END"], "methodName": ["serializeComplexPolygon"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . serialize ( data . point )  ;", "}", "METHOD_END"], "methodName": ["serializePoint"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . serialize ( data . simpleGeometryCollection )  ;", "}", "METHOD_END"], "methodName": ["serializeSimpleGeometryCollection"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . serialize ( data . simpleLineString )  ;", "}", "METHOD_END"], "methodName": ["serializeSimpleLineString"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . serialize ( data . simpleMultiLineString )  ;", "}", "METHOD_END"], "methodName": ["serializeSimpleMultiLineString"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . serialize ( data . simpleMultiPolygon )  ;", "}", "METHOD_END"], "methodName": ["serializeSimpleMultiPolygon"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . serialize ( data . simpleMultipoint )  ;", "}", "METHOD_END"], "methodName": ["serializeSimpleMultipoint"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . serialize ( data . simplePolygon )  ;", "}", "METHOD_END"], "methodName": ["serializeSimplePolygon"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   Resources . toString ( getResource ( resource )  ,    StandardCharsets . UTF _  8  )  ;", "}    catch    ( IOExcep   e )     {", "throw   new   UncheckedIOExcep ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["readResource"], "fileName": "com.facebook.presto.geospatial.BenchmarkGeometrySerializationData"}, {"methodBody": ["METHOD_START", "{", "return   JtsGeometrySerde . deserialize ( data . complexGeometryCollectionSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeComplexGeometryCollection"], "fileName": "com.facebook.presto.geospatial.BenchmarkJtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   JtsGeometrySerde . deserialize ( data . complexLineStringSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeComplexLineString"], "fileName": "com.facebook.presto.geospatial.BenchmarkJtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   JtsGeometrySerde . deserialize ( data . complexMultiLineStringSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeComplexMultiLineString"], "fileName": "com.facebook.presto.geospatial.BenchmarkJtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   JtsGeometrySerde . deserialize ( data . complexMultiPolygonSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeComplexMultiPolygon"], "fileName": "com.facebook.presto.geospatial.BenchmarkJtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   JtsGeometrySerde . deserialize ( data . complexMultipointSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeComplexMultipoint"], "fileName": "com.facebook.presto.geospatial.BenchmarkJtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   JtsGeometrySerde . deserialize ( data . complexPolygonSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeComplexPolygon"], "fileName": "com.facebook.presto.geospatial.BenchmarkJtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   JtsGeometrySerde . deserialize ( data . pointSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializePoint"], "fileName": "com.facebook.presto.geospatial.BenchmarkJtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   JtsGeometrySerde . deserialize ( data . simpleGeometryCollectionSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeSimpleGeometryCollection"], "fileName": "com.facebook.presto.geospatial.BenchmarkJtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   JtsGeometrySerde . deserialize ( data . simpleLineStringSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeSimpleLineString"], "fileName": "com.facebook.presto.geospatial.BenchmarkJtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   JtsGeometrySerde . deserialize ( data . simpleMultiLineStringSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeSimpleMultiLineString"], "fileName": "com.facebook.presto.geospatial.BenchmarkJtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   JtsGeometrySerde . deserialize ( data . simpleMultiPolygonSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeSimpleMultiPolygon"], "fileName": "com.facebook.presto.geospatial.BenchmarkJtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   JtsGeometrySerde . deserialize ( data . simpleMultipointSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeSimpleMultipoint"], "fileName": "com.facebook.presto.geospatial.BenchmarkJtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   JtsGeometrySerde . deserialize ( data . simplePolygonSerialized )  ;", "}", "METHOD_END"], "methodName": ["deserializeSimplePolygon"], "fileName": "com.facebook.presto.geospatial.BenchmarkJtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   new   WKTReader (  )  . read ( text )  ;", "}    catch    ( ParseException   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["fromText"], "fileName": "com.facebook.presto.geospatial.BenchmarkJtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "Options   options    =    new   OptionsBuilder (  )  . verbosity ( NORMAL )  . include (  (  (  \"  .  *  \"     +     ( BenchmarkJtsGeometrySerde . class . getSimpleName (  )  )  )     +     \"  .  *  \"  )  )  . build (  )  ;", "new   Runner ( options )  . run (  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.geospatial.BenchmarkJtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   JtsGeometrySerde . serialize ( data . complexGeometryCollection )  ;", "}", "METHOD_END"], "methodName": ["serializeComplexGeometryCollection"], "fileName": "com.facebook.presto.geospatial.BenchmarkJtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   JtsGeometrySerde . serialize ( data . complexLineString )  ;", "}", "METHOD_END"], "methodName": ["serializeComplexLineString"], "fileName": "com.facebook.presto.geospatial.BenchmarkJtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   JtsGeometrySerde . serialize ( data . complexMultiLineString )  ;", "}", "METHOD_END"], "methodName": ["serializeComplexMultiLineString"], "fileName": "com.facebook.presto.geospatial.BenchmarkJtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   JtsGeometrySerde . serialize ( data . complexMultiPolygon )  ;", "}", "METHOD_END"], "methodName": ["serializeComplexMultiPolygon"], "fileName": "com.facebook.presto.geospatial.BenchmarkJtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   JtsGeometrySerde . serialize ( data . complexMultipoint )  ;", "}", "METHOD_END"], "methodName": ["serializeComplexMultipoint"], "fileName": "com.facebook.presto.geospatial.BenchmarkJtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   JtsGeometrySerde . serialize ( data . complexPolygon )  ;", "}", "METHOD_END"], "methodName": ["serializeComplexPolygon"], "fileName": "com.facebook.presto.geospatial.BenchmarkJtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   JtsGeometrySerde . serialize ( data . point )  ;", "}", "METHOD_END"], "methodName": ["serializePoint"], "fileName": "com.facebook.presto.geospatial.BenchmarkJtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   JtsGeometrySerde . serialize ( data . simpleGeometryCollection )  ;", "}", "METHOD_END"], "methodName": ["serializeSimpleGeometryCollection"], "fileName": "com.facebook.presto.geospatial.BenchmarkJtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   JtsGeometrySerde . serialize ( data . simpleLineString )  ;", "}", "METHOD_END"], "methodName": ["serializeSimpleLineString"], "fileName": "com.facebook.presto.geospatial.BenchmarkJtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   JtsGeometrySerde . serialize ( data . simpleMultiLineString )  ;", "}", "METHOD_END"], "methodName": ["serializeSimpleMultiLineString"], "fileName": "com.facebook.presto.geospatial.BenchmarkJtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   JtsGeometrySerde . serialize ( data . simpleMultiPolygon )  ;", "}", "METHOD_END"], "methodName": ["serializeSimpleMultiPolygon"], "fileName": "com.facebook.presto.geospatial.BenchmarkJtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   JtsGeometrySerde . serialize ( data . simpleMultipoint )  ;", "}", "METHOD_END"], "methodName": ["serializeSimpleMultipoint"], "fileName": "com.facebook.presto.geospatial.BenchmarkJtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   JtsGeometrySerde . serialize ( data . simplePolygon )  ;", "}", "METHOD_END"], "methodName": ["serializeSimplePolygon"], "fileName": "com.facebook.presto.geospatial.BenchmarkJtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "Geometry . Type   type    =    geometry . getType (  )  ;", "switch    ( type )     {", "case   Polygon    :", "{", "if    (  (  ! multiType )     &  &     (  (  (  ( Polygon )     ( geometry )  )  . getExteriorRingCount (  )  )     <  =     1  )  )     {", "return   new   OGCPolygon (  (  ( Polygon )     ( geometry )  )  ,    null )  ;", "}", "return   new   OGCMultiPolygon (  (  ( Polygon )     ( geometry )  )  ,    null )  ;", "}", "case   Polyline    :", "{", "if    (  (  ! multiType )     &  &     (  (  (  ( Polyline )     ( geometry )  )  . getPathCount (  )  )     <  =     1  )  )     {", "return   new   OGCLineString (  (  ( Polyline )     ( geometry )  )  ,     0  ,    null )  ;", "}", "return   new   OGCMultiLineString (  (  ( Polyline )     ( geometry )  )  ,    null )  ;", "}", "case   MultiPoint    :", "{", "if    (  (  ! multiType )     &  &     (  (  (  ( MultiPoint )     ( geometry )  )  . getPointCount (  )  )     <  =     1  )  )     {", "if    ( geometry . isEmpty (  )  )     {", "return   new   OGCPoint ( new   Point (  )  ,    null )  ;", "}", "return   new   OGCPoint (  (  ( MultiPoint )     ( geometry )  )  . getPoint (  0  )  ,    null )  ;", "}", "return   new   OGCMultiPoint (  (  ( MultiPoint )     ( geometry )  )  ,    null )  ;", "}", "case   Point    :", "{", "if    (  ! multiType )     {", "return   new   OGCPoint (  (  ( Point )     ( geometry )  )  ,    null )  ;", "}", "return   new   OGCMultiPoint (  (  ( Point )     ( geometry )  )  ,    null )  ;", "}", "case   Envelope    :", "{", "Polygon   polygon    =    new   Polygon (  )  ;", "polygon . addEnvelope (  (  ( Envelope )     ( geometry )  )  ,    false )  ;", "return   new   OGCPolygon ( polygon ,    null )  ;", "}", "default    :", "throw   new   IllegalArgumentException (  (  \" Unexpected   geometry   type :     \"     +    type )  )  ;", "}", "}", "METHOD_END"], "methodName": ["createFromEsriGeometry"], "fileName": "com.facebook.presto.geospatial.GeometrySerde"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( shape ,     \" shape   is   null \"  )  ;", "BasicSliceInput   input    =    shape . getInput (  )  ;", "verify (  (  ( input . available (  )  )     >     0  )  )  ;", "int   length    =     ( input . available (  )  )     -     1  ;", "GeometryType   type    =    GeometryType . getForCode ( input . readByte (  )  )  ;", "return    . readGeometry ( input ,    shape ,    type ,    length )  ;", "}", "METHOD_END"], "methodName": ["deserialize"], "fileName": "com.facebook.presto.geospatial.GeometrySerde"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( shape ,     \" shape   is   null \"  )  ;", "BasicSliceInput   input    =    shape . getInput (  )  ;", "if    (  ( input . available (  )  )     =  =     0  )     {", "return   null ;", "}", "int   length    =     ( input . available (  )  )     -     1  ;", "GeometryType   type    =    GeometryType . getForCode ( input . readByte (  )  )  ;", "return    . getEnvelope ( input ,    type ,    length )  ;", "}", "METHOD_END"], "methodName": ["deserializeEnvelope"], "fileName": "com.facebook.presto.geospatial.GeometrySerde"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( shape ,     \" shape   is   null \"  )  ;", "BasicSliceInput   input    =    shape . getInput (  )  ;", "verify (  (  ( input . available (  )  )     >     0  )  )  ;", "return   Type . getForCode ( input . readByte (  )  )  ;", "}", "METHOD_END"], "methodName": ["deserializeType"], "fileName": "com.facebook.presto.geospatial.GeometrySerde"}, {"methodBody": ["METHOD_START", "{", "switch    ( type )     {", "case   POINT    :", "return    . getPointEnvelope ( input )  ;", "case   MULTI _ POINT    :", "case   LINE _ STRING    :", "case   MULTI _ LINE _ STRING    :", "case   POLYGON    :", "case   MULTI _ POLYGON    :", "return    . getSimpleGeometryEnvelope ( input ,    length )  ;", "case   GEOMETRY _ COLLECTION    :", "return    . getGeometryCollectionOverallEnvelope ( input )  ;", "case   ENVELOPE    :", "return    . readEnvelope ( input )  ;", "default    :", "throw   new   IllegalArgumentException (  (  \" Unexpected   type :     \"     +    type )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getEnvelope"], "fileName": "com.facebook.presto.geospatial.GeometrySerde"}, {"methodBody": ["METHOD_START", "{", "Envelope   overallEnvelope    =    null ;", "while    (  ( input . available (  )  )     >     0  )     {", "int   length    =     ( input . readInt (  )  )     -     1  ;", "GeometryType   type    =    GeometryType . getForCode ( input . readByte (  )  )  ;", "Envelope   envelope    =     . getEnvelope ( input ,    type ,    length )  ;", "overallEnvelope    =     . merge ( overallEnvelope ,    envelope )  ;", "}", "return   overallEnvelope ;", "}", "METHOD_END"], "methodName": ["getGeometryCollectionOverallEnvelope"], "fileName": "com.facebook.presto.geospatial.GeometrySerde"}, {"methodBody": ["METHOD_START", "{", "double   x    =    input . readDouble (  )  ;", "double   y    =    input . readDouble (  )  ;", "if    (  ( Double . isNaN ( x )  )     |  |     ( Double . isNaN ( y )  )  )     {", "return   null ;", "}", "return   new   Envelope ( x ,    y ,    x ,    y )  ;", "}", "METHOD_END"], "methodName": ["getPointEnvelope"], "fileName": "com.facebook.presto.geospatial.GeometrySerde"}, {"methodBody": ["METHOD_START", "{", "input . readInt (  )  ;", "double   xMin    =    input . readDouble (  )  ;", "double   yMin    =    input . readDouble (  )  ;", "double   xMax    =    input . readDouble (  )  ;", "double   yMax    =    input . readDouble (  )  ;", "int   skipLength    =     ( length    -     (  4     *     ( Double . BYTES )  )  )     -     ( Integer . BYTES )  ;", "verify (  (  ( input . skip ( skipLength )  )     =  =    skipLength )  )  ;", "if    (  (  (  ( Utils . isEsriNaN ( xMin )  )     |  |     ( Utils . isEsriNaN ( yMin )  )  )     |  |     ( Utils . isEsriNaN ( xMax )  )  )     |  |     ( Utils . isEsriNaN ( yMax )  )  )     {", "return   null ;", "}", "return   new   Envelope ( xMin ,    yMin ,    xMax ,    yMax )  ;", "}", "METHOD_END"], "methodName": ["getSimpleGeometryEnvelope"], "fileName": "com.facebook.presto.geospatial.GeometrySerde"}, {"methodBody": ["METHOD_START", "{", "if    ( left    =  =    null )     {", "turn   right ;", "} else", "if    ( right    =  =    null )     {", "turn   left ;", "} else    {", "right . merge ( left )  ;", "}", "turn   right ;", "}", "METHOD_END"], "methodName": ["merge"], "fileName": "com.facebook.presto.geospatial.GeometrySerde"}, {"methodBody": ["METHOD_START", "{", "verify (  (  ( input . available (  )  )     >     0  )  )  ;", "double   xMin    =    input . readDouble (  )  ;", "double   yMin    =    input . readDouble (  )  ;", "double   xMax    =    input . readDouble (  )  ;", "double   yMax    =    input . readDouble (  )  ;", "return   new   Envelope ( xMin ,    yMin ,    xMax ,    yMax )  ;", "}", "METHOD_END"], "methodName": ["readEnvelope"], "fileName": "com.facebook.presto.geospatial.GeometrySerde"}, {"methodBody": ["METHOD_START", "{", "switch    ( type )     {", "case   POINT    :", "return    . readPoint ( input )  ;", "case   MULTI _ POINT    :", "case   LINE _ STRING    :", "case   MULTI _ LINE _ STRING    :", "case   POLYGON    :", "case   MULTI _ POLYGON    :", "return    . readSimpleGeometry ( input ,    inputSlice ,    type ,    length )  ;", "case   GEOMETRY _ COLLECTION    :", "return    . readGeometryCollection ( input ,    inputSlice )  ;", "case   ENVELOPE    :", "return    . createFromEsriGeometry (  . readEnvelope ( input )  ,    false )  ;", "default    :", "throw   new   IllegalArgumentException (  (  \" Unexpected   type :     \"     +    type )  )  ;", "}", "}", "METHOD_END"], "methodName": ["readGeometry"], "fileName": "com.facebook.presto.geospatial.GeometrySerde"}, {"methodBody": ["METHOD_START", "{", "List < OGCGeometry >    geometries    =    new   ArrayList <  >  (  )  ;", "while    (  ( input . available (  )  )     >     0  )     {", "int   length    =     ( input . readInt (  )  )     -     1  ;", "GeometryType   type    =    GeometryType . getForCode ( input . readByte (  )  )  ;", "geometries . add (  . readGeometry ( input ,    inputSlice ,    type ,    length )  )  ;", "}", "return   new   com . esri . core . geometry . ogc . OGCConcreteGeometryCollection ( geometries ,    null )  ;", "}", "METHOD_END"], "methodName": ["readGeometryCollection"], "fileName": "com.facebook.presto.geospatial.GeometrySerde"}, {"methodBody": ["METHOD_START", "{", "double   x    =    input . readDouble (  )  ;", "double   y    =    input . readDouble (  )  ;", "Point   point ;", "if    (  ( Double . isNaN ( x )  )     |  |     ( Double . isNaN ( y )  )  )     {", "point    =    new   Point (  )  ;", "} else    {", "point    =    new   Point ( x ,    y )  ;", "}", "return   new   com . esri . core . g . ogc . OGCPoint ( point ,    null )  ;", "}", "METHOD_END"], "methodName": ["readPoint"], "fileName": "com.facebook.presto.geospatial.GeometrySerde"}, {"methodBody": ["METHOD_START", "{", "int   currentPosition    =    Math . toIntExact ( input . position (  )  )  ;", "ByteBuffer   geometryBuffer    =    inputSlice . toByteBuffer ( currentPosition ,    length )  . slice (  )  ;", "input . setPosition (  ( currentPosition    +    length )  )  ;", "Geometry   esriGeometry    =    OperatorImportFromESRIShape . local (  )  . execute (  0  ,    Unknown ,    geometryBuffer )  ;", "return    . createFromEsriGeometry ( esriGeometry ,    type . isMultitype (  )  )  ;", "}", "METHOD_END"], "methodName": ["readSimpleGeometry"], "fileName": "com.facebook.presto.geospatial.GeometrySerde"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( envelope ,     \" envelope   is   null \"  )  ;", "verify (  (  !  ( envelope . isEmpty (  )  )  )  )  ;", "DynamicSliceOutput   output    =    new   DynamicSliceOutput (  1  0  0  )  ;", "output . appendByte ( Type . ENVELOPE . code (  )  )  ;", "output . appendDouble ( envelope . getXMin (  )  )  ;", "output . appendDouble ( envelope . getYMin (  )  )  ;", "output . appendDouble ( envelope . getXMax (  )  )  ;", "output . appendDouble ( envelope . getYMax (  )  )  ;", "return   output . slice (  )  ;", "}", "METHOD_END"], "methodName": ["serialize"], "fileName": "com.facebook.presto.geospatial.GeometrySerde"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( input ,     \" input   is   null \"  )  ;", "DynamicSliceOutput   output    =    new   DynamicSliceOutput (  1  0  0  )  ;", ". writeGeometry ( output ,    input )  ;", "return   output . slice (  )  ;", "}", "METHOD_END"], "methodName": ["serialize"], "fileName": "com.facebook.presto.geospatial.GeometrySerde"}, {"methodBody": ["METHOD_START", "{", "GeometryType   type    =    GeometryType . getForEsriGeometryType ( geometry . geometryType (  )  )  ;", "switch    ( type )     {", "case   POINT    :", ". writePoint ( output ,    geometry )  ;", "break ;", "case   MULTI _ POINT    :", "case   LINE _ STRING    :", "case   MULTI _ LINE _ STRING    :", "case   POLYGON    :", "case   MULTI _ POLYGON    :", ". writeSimpleGeometry ( output ,    type ,    geometry )  ;", "break ;", "case   GEOMETRY _ COLLECTION    :", "{", "verify (  ( geometry   instanceof   OGCConcreteGeometryCollection )  )  ;", ". writeGeometryCollection ( output ,     (  ( OGCConcreteGeometryCollection )     ( geometry )  )  )  ;", "break ;", "}", "default    :", "throw   new   IllegalArgumentException (  (  \" Unexpected   type :     \"     +    type )  )  ;", "}", "}", "METHOD_END"], "methodName": ["writeGeometry"], "fileName": "com.facebook.presto.geospatial.GeometrySerde"}, {"methodBody": ["METHOD_START", "{", "output . appendByte ( GeometryType . GEOMETRY _ COLLECTION . code (  )  )  ;", "for    ( int   geometryIndex    =     0  ;    geometryIndex    <     ( collection . numGeometries (  )  )  ;    geometryIndex +  +  )     {", "OGCGeometry   geometry    =    collection . geometryN ( geometryIndex )  ;", "int   startPosition    =    output . size (  )  ;", "output . appendInt (  0  )  ;", ". writeGeometry ( output ,    geometry )  ;", "int   endPosition    =    output . size (  )  ;", "int   length    =     ( endPosition    -    startPosition )     -     ( Integer . BYTES )  ;", "output . getUnderlyingSlice (  )  . setInt ( startPosition ,    length )  ;", "}", "}", "METHOD_END"], "methodName": ["writeGeometryCollection"], "fileName": "com.facebook.presto.geospatial.GeometrySerde"}, {"methodBody": ["METHOD_START", "{", "Geometry   esriGeometry    =    geometry . getEsriGeometry (  )  ;", "verify (  ( esriGeometry   instanceof   Point )  ,     \" geometry   is   expected   to   be   an   instance   of   Point \"  )  ;", "Point   point    =     (  ( Point )     ( esriGeometry )  )  ;", "verify (  (  (  (  !  ( point . hasAttribute ( Z )  )  )     &  &     (  !  ( point . hasAttribute ( M )  )  )  )     &  &     (  !  ( point . hasAttribute ( ID )  )  )  )  ,     \" Only    2 D   points   with   no   ID   nor   M   attribute   are   supported \"  )  ;", "output . appendByte ( GeometryType . POINT . code (  )  )  ;", "if    (  !  ( point . isEmpty (  )  )  )     {", "output . appendDouble ( point . getX (  )  )  ;", "output . appendDouble ( point . getY (  )  )  ;", "} else    {", "output . appendDouble ( Double . NaN )  ;", "output . appendDouble ( Double . NaN )  ;", "}", "}", "METHOD_END"], "methodName": ["writePoint"], "fileName": "com.facebook.presto.geospatial.GeometrySerde"}, {"methodBody": ["METHOD_START", "{", "output . appendByte ( type . code (  )  )  ;", "esri    =    Objects . requireNonNull ( geometry . getEsri (  )  ,     \" esri   is   null \"  )  ;", "byte [  ]    shape    =    geometryToEsriShape ( esri )  ;", "output . appendBytes ( shape )  ;", "}", "METHOD_END"], "methodName": ["writeSimpleGeometry"], "fileName": "com.facebook.presto.geospatial.GeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   code ;", "}", "METHOD_END"], "methodName": ["code"], "fileName": "com.facebook.presto.geospatial.GeometryType"}, {"methodBody": ["METHOD_START", "{", "switch    ( code )     {", "case    0     :", "return    . POINT ;", "case    1     :", "return    . MULTI _ POINT ;", "case    2     :", "return    . LINE _ STRING ;", "case    3     :", "return    . MULTI _ LINE _ STRING ;", "case    4     :", "return    . POLYGON ;", "case    5     :", "return    . MULTI _ POLYGON ;", "case    6     :", "return    . GEOMETRY _ COLLECTION ;", "case    7     :", "return    . ENVELOPE ;", "default    :", "throw   new   IllegalArgumentException (  (  \" Invalid   type   code :     \"     +    code )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getForCode"], "fileName": "com.facebook.presto.geospatial.GeometryType"}, {"methodBody": ["METHOD_START", "{", "return   GeometryType . getForInternalLibraryName ( type )  ;", "}", "METHOD_END"], "methodName": ["getForEsriGeometryType"], "fileName": "com.facebook.presto.geospatial.GeometryType"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( type ,     \" type   is   null \"  )  ;", "switch    ( type )     {", "case    \" Point \"     :", "return    . POINT ;", "case    \" MultiPoint \"     :", "return    . MULTI _ POINT ;", "case    \" LineString \"     :", "return    . LINE _ STRING ;", "case    \" MultiLineString \"     :", "return    . MULTI _ LINE _ STRING ;", "case    \" Polygon \"     :", "return    . POLYGON ;", "case    \" MultiPolygon \"     :", "return    . MULTI _ POLYGON ;", "case    \" GeometryCollection \"     :", "return    . GEOMETRY _ COLLECTION ;", "default    :", "throw   new   IllegalArgumentException (  (  \" Invalid   Geometry   Type :     \"     +    type )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getForInternalLibraryName"], "fileName": "com.facebook.presto.geospatial.GeometryType"}, {"methodBody": ["METHOD_START", "{", "return   GeometryType . getForInternalLibraryName ( type )  ;", "}", "METHOD_END"], "methodName": ["getForJtsGeometryType"], "fileName": "com.facebook.presto.geospatial.GeometryType"}, {"methodBody": ["METHOD_START", "{", "return   multitype ;", "}", "METHOD_END"], "methodName": ["isMultitype"], "fileName": "com.facebook.presto.geospatial.GeometryType"}, {"methodBody": ["METHOD_START", "{", "return    ( Double . isNaN ( d )  )     |  |     ( Double . isNaN ( GeometryUtils . translateFromAVNaN ( d )  )  )  ;", "}", "METHOD_END"], "methodName": ["isEsriNaN"], "fileName": "com.facebook.presto.geospatial.GeometryUtils"}, {"methodBody": ["METHOD_START", "{", "return   n    <     (  -  1  .  0 E 3  8  )     ?     0  .  0     /     0  .  0     :    n ;", "}", "METHOD_END"], "methodName": ["translateFromAVNaN"], "fileName": "com.facebook.presto.geospatial.GeometryUtils"}, {"methodBody": ["METHOD_START", "{", "return   Double . isNaN ( n )     ?     -  ( Double . MAX _ VALUE )     :    n ;", "}", "METHOD_END"], "methodName": ["translateToAVNaN"], "fileName": "com.facebook.presto.geospatial.GeometryUtils"}, {"methodBody": ["METHOD_START", "{", "boolean   isClockwise    =    JtsGeometrySerde . isClockwise ( coordinates ,    start ,    end )  ;", "if    (  ( isShell    &  &     (  ! isClockwise )  )     |  |     (  (  ! isShell )     &  &    isClockwise )  )     {", "JtsGeometrySerde . reverse ( coordinates ,    start ,    end )  ;", "}", "}", "METHOD_END"], "methodName": ["canonicalizePolygonCoordinates"], "fileName": "com.facebook.presto.geospatial.JtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "for    ( int   part    =     0  ;    part    <     (  ( partIndexes . length )     -     1  )  ;    part +  +  )     {", ". canonicalizePolygonCoordinates ( coordinates ,    partIndexes [ part ]  ,    partIndexes [  ( part    +     1  )  ]  ,    shellPart [ part ]  )  ;", "}", "if    (  ( partIndexes . length )     >     0  )     {", ". canonicalizePolygonCoordinates ( coordinates ,    partIndexes [  (  ( partIndexes . length )     -     1  )  ]  ,    coordinates . length ,    shellPart [  (  ( partIndexes . length )     -     1  )  ]  )  ;", "}", "}", "METHOD_END"], "methodName": ["canonicalizePolygonCoordinates"], "fileName": "com.facebook.presto.geospatial.JtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( shape ,     \" shape   is   null \"  )  ;", "BasicSliceInput   input    =    shape . getInput (  )  ;", "verify (  (  ( input . available (  )  )     >     0  )  )  ;", "GeometryType   type    =    GeometryType . getForCode ( input . readByte (  )  )  ;", "return    . readGeometry ( input ,    type )  ;", "}", "METHOD_END"], "methodName": ["deserialize"], "fileName": "com.facebook.presto.geospatial.JtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "return   JtsGeometrySerde . isClockwise ( coordinates ,     0  ,    coordinates . length )  ;", "}", "METHOD_END"], "methodName": ["isClockwise"], "fileName": "com.facebook.presto.geospatial.JtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "double   area    =     0  ;", "for    ( int   i    =    start    +     1  ;    i    <    end ;    i +  +  )     {", "area    +  =     (  ( coordinates [ i ]  . x )     -     ( coordinates [  ( i    -     1  )  ]  . x )  )     *     (  ( coordinates [ i ]  . y )     +     ( coordinates [  ( i    -     1  )  ]  . y )  )  ;", "}", "area    +  =     (  ( coordinates [ start ]  . x )     -     ( coordinates [  ( end    -     1  )  ]  . x )  )     *     (  ( coordinates [ start ]  . y )     +     ( coordinates [  ( end    -     1  )  ]  . y )  )  ;", "return   area    >     0  ;", "}", "METHOD_END"], "methodName": ["isClockwise"], "fileName": "com.facebook.presto.geospatial.JtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( input ,     \" input   is   null \"  )  ;", "return   new   Coordinate ( input . readDouble (  )  ,    input . readDouble (  )  )  ;", "}", "METHOD_END"], "methodName": ["readCoordinate"], "fileName": "com.facebook.presto.geospatial.JtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( input ,     \" input   is   null \"  )  ;", "verify (  ( count    >     0  )  )  ;", "Coordinate [  ]    coordinates    =    new   Coordinate [ count ]  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "coordinates [ i ]     =     . readCoordinate ( input )  ;", "}", "return   coordinates ;", "}", "METHOD_END"], "methodName": ["readCoordinates"], "fileName": "com.facebook.presto.geospatial.JtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "verify (  (  ( input . available (  )  )     >     0  )  )  ;", "double   xMin    =    input . readDouble (  )  ;", "double   yMin    =    input . readDouble (  )  ;", "double   xMax    =    input . readDouble (  )  ;", "double   yMax    =    input . readDouble (  )  ;", "Coordinate [  ]    coordinates    =    new   Coordinate [  5  ]  ;", "coordinates [  0  ]     =    new   Coordinate ( xMin ,    yMin )  ;", "coordinates [  1  ]     =    new   Coordinate ( xMin ,    yMax )  ;", "coordinates [  2  ]     =    new   Coordinate ( xMax ,    yMax )  ;", "coordinates [  3  ]     =    new   Coordinate ( xMax ,    yMin )  ;", "coordinates [  4  ]     =    coordinates [  0  ]  ;", "return    . GEOMETRY _ FACTORY . createPolygon ( coordinates )  ;", "}", "METHOD_END"], "methodName": ["readEnvelope"], "fileName": "com.facebook.presto.geospatial.JtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "switch    ( type )     {", "case   POINT    :", "return    . readPoint ( input )  ;", "case   MULTI _ POINT    :", "return    . readMultiPoint ( input )  ;", "case   LINE _ STRING    :", "return    . readPolyline ( input ,    false )  ;", "case   MULTI _ LINE _ STRING    :", "return    . readPolyline ( input ,    true )  ;", "case   POLYGON    :", "return    . readPolygon ( input ,    false )  ;", "case   MULTI _ POLYGON    :", "return    . readPolygon ( input ,    true )  ;", "case   GEOMETRY _ COLLECTION    :", "return    . readGeometryCollection ( input )  ;", "case   ENVELOPE    :", "return    . readEnvelope ( input )  ;", "default    :", "throw   new   UnsupportedOperationException (  (  \" Unexpected   type :     \"     +    type )  )  ;", "}", "}", "METHOD_END"], "methodName": ["readGeometry"], "fileName": "com.facebook.presto.geospatial.JtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "List < Geometry >    geometries    =    new   ArrayList <  >  (  )  ;", "while    (  ( input . available (  )  )     >     0  )     {", "input . readInt (  )  ;", "GeometryType   type    =    GeometryType . getForCode ( input . readByte (  )  )  ;", "geometries . add (  . readGeometry ( input ,    type )  )  ;", "}", "return    . GEOMETRY _ FACTORY . createGeometryCollection ( geometries . toArray ( new   Geometry [  0  ]  )  )  ;", "}", "METHOD_END"], "methodName": ["readGeometryCollection"], "fileName": "com.facebook.presto.geospatial.JtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "JtsGeometrySerde . skipEsriType ( input )  ;", "JtsGeometrySerde . skipEnvelope ( input )  ;", "int   pointCount    =    input . readInt (  )  ;", "Point [  ]    points    =    new   Point [ pointCount ]  ;", "for    ( int   i    =     0  ;    i    <    pointCount ;    i +  +  )     {", "points [ i ]     =    JtsGeometrySerde . readPoint ( input )  ;", "}", "return   JtsGeometrySerde . GEOMETRY _ FACTORY . createMultiPoint ( points )  ;", "}", "METHOD_END"], "methodName": ["readMultiPoint"], "fileName": "com.facebook.presto.geospatial.JtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "Coordinate   coordinates    =    JtsGeometrySerde . readCoordinate ( input )  ;", "if    (  ( Double . isNaN ( coordinates . x )  )     |  |     ( Double . isNaN ( coordinates . y )  )  )     {", "return   JtsGeometrySerde . GEOMETRY _ FACTORY . createPoint (  )  ;", "}", "return   JtsGeometrySerde . GEOMETRY _ FACTORY . createPoint ( coordinates )  ;", "}", "METHOD_END"], "methodName": ["readPoint"], "fileName": "com.facebook.presto.geospatial.JtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "JtsGeometrySerde . skipEsriType ( input )  ;", "JtsGeometrySerde . skipEnvelope ( input )  ;", "int   partCount    =    input . readInt (  )  ;", "if    ( partCount    =  =     0  )     {", "if    ( multitype )     {", "return   JtsGeometrySerde . GEOMETRY _ FACTORY . createMultiPolygon (  )  ;", "}", "return   JtsGeometrySerde . GEOMETRY _ FACTORY . createPolygon (  )  ;", "}", "int   pointCount    =    input . readInt (  )  ;", "int [  ]    startIndexes    =    new   int [ partCount ]  ;", "for    ( int   i    =     0  ;    i    <    partCount ;    i +  +  )     {", "startIndexes [ i ]     =    input . readInt (  )  ;", "}", "int [  ]    partLengths    =    new   int [ partCount ]  ;", "if    ( partCount    >     1  )     {", "partLengths [  0  ]     =    startIndexes [  1  ]  ;", "for    ( int   i    =     1  ;    i    <     ( partCount    -     1  )  ;    i +  +  )     {", "partLengths [ i ]     =     ( startIndexes [  ( i    +     1  )  ]  )     -     ( startIndexes [ i ]  )  ;", "}", "}", "partLengths [  ( partCount    -     1  )  ]     =    pointCount    -     ( startIndexes [  ( partCount    -     1  )  ]  )  ;", "LinearRing   shell    =    null ;", "List < LinearRing >    holes    =    new   ArrayList <  >  (  )  ;", "List < Polygon >    polygons    =    new   ArrayList <  >  (  )  ;", "for    ( int   i    =     0  ;    i    <    partCount ;    i +  +  )     {", "Coordinate [  ]    coordinates    =    JtsGeometrySerde . readCoordinates ( input ,    partLengths [ i ]  )  ;", "if    ( JtsGeometrySerde . isClockwise ( coordinates )  )     {", "if    ( shell    !  =    null )     {", "polygons . add ( JtsGeometrySerde . GEOMETRY _ FACTORY . createPolygon ( shell ,    holes . toArray ( new   LinearRing [  0  ]  )  )  )  ;", "holes . clear (  )  ;", "} else    {", "verify ( holes . isEmpty (  )  ,     \" shell   is   null   but   holes   found \"  )  ;", "}", "shell    =    JtsGeometrySerde . GEOMETRY _ FACTORY . createLinearRing ( coordinates )  ;", "} else    {", "verify (  ( shell    !  =    null )  ,     \" shell   is   null   but   hole   found \"  )  ;", "holes . add ( JtsGeometrySerde . GEOMETRY _ FACTORY . createLinearRing ( coordinates )  )  ;", "}", "}", "polygons . add ( JtsGeometrySerde . GEOMETRY _ FACTORY . createPolygon ( shell ,    holes . toArray ( new   LinearRing [  0  ]  )  )  )  ;", "if    ( multitype )     {", "return   JtsGeometrySerde . GEOMETRY _ FACTORY . createMultiPolygon ( polygons . toArray ( new   Polygon [  0  ]  )  )  ;", "}", "return   getOnlyElement ( polygons )  ;", "}", "METHOD_END"], "methodName": ["readPolygon"], "fileName": "com.facebook.presto.geospatial.JtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "JtsGeometrySerde . skipEsriType ( input )  ;", "JtsGeometrySerde . skipEnvelope ( input )  ;", "int   partCount    =    input . readInt (  )  ;", "if    ( partCount    =  =     0  )     {", "if    ( multitype )     {", "return   JtsGeometrySerde . GEOMETRY _ FACTORY . createMultiLineString (  )  ;", "}", "return   JtsGeometrySerde . GEOMETRY _ FACTORY . createLineString (  )  ;", "}", "int   pointCount    =    input . readInt (  )  ;", "int [  ]    startIndexes    =    new   int [ partCount ]  ;", "for    ( int   i    =     0  ;    i    <    partCount ;    i +  +  )     {", "startIndexes [ i ]     =    input . readInt (  )  ;", "}", "int [  ]    partLengths    =    new   int [ partCount ]  ;", "if    ( partCount    >     1  )     {", "partLengths [  0  ]     =    startIndexes [  1  ]  ;", "for    ( int   i    =     1  ;    i    <     ( partCount    -     1  )  ;    i +  +  )     {", "partLengths [ i ]     =     ( startIndexes [  ( i    +     1  )  ]  )     -     ( startIndexes [ i ]  )  ;", "}", "}", "partLengths [  ( partCount    -     1  )  ]     =    pointCount    -     ( startIndexes [  ( partCount    -     1  )  ]  )  ;", "LineString [  ]    lineStrings    =    new   LineString [ partCount ]  ;", "for    ( int   i    =     0  ;    i    <    partCount ;    i +  +  )     {", "lineStrings [ i ]     =    JtsGeometrySerde . GEOMETRY _ FACTORY . createLineString ( JtsGeometrySerde . readCoordinates ( input ,    partLengths [ i ]  )  )  ;", "}", "if    ( multitype )     {", "return   JtsGeometrySerde . GEOMETRY _ FACTORY . createMultiLineString ( lineStrings )  ;", "}", "verify (  (  ( lineStrings . length )     =  =     1  )  )  ;", "return   lineStrings [  0  ]  ;", "}", "METHOD_END"], "methodName": ["readPolyline"], "fileName": "com.facebook.presto.geospatial.JtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "verify (  ( start    <  =    end )  ,     \" start   must   be   less   or   equal   than   end \"  )  ;", "for    ( int   i    =    start ;    i    <     ( start    +     (  ( end    -    start )     /     2  )  )  ;    i +  +  )     {", "Coordinate   buffer    =    coordinates [ i ]  ;", "coordinates [ i ]     =    coordinates [  (  (  ( start    +    end )     -    i )     -     1  )  ]  ;", "coordinates [  (  (  ( start    +    end )     -    i )     -     1  )  ]     =    buffer ;", "}", "}", "METHOD_END"], "methodName": ["reverse"], "fileName": "com.facebook.presto.geospatial.JtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( geometry ,     \" input   is   null \"  )  ;", "DynamicSliceOutput   output    =    new   DynamicSliceOutput (  1  0  0  )  ;", ". writeGeometry ( geometry ,    output )  ;", "return   output . slice (  )  ;", "}", "METHOD_END"], "methodName": ["serialize"], "fileName": "com.facebook.presto.geospatial.JtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( input ,     \" input   is   null \"  )  ;", "int   skipLength    =     4     *     ( SizeOf . SIZE _ OF _ DOUBLE )  ;", "verify (  (  ( input . skip ( skipLength )  )     =  =    skipLength )  )  ;", "}", "METHOD_END"], "methodName": ["skipEnvelope"], "fileName": "com.facebook.presto.geospatial.JtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "input . readInt (  )  ;", "}", "METHOD_END"], "methodName": ["skipEsriType"], "fileName": "com.facebook.presto.geospatial.JtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "output . writeDouble ( GeometryUtils . translateToAVNaN ( coordinate . x )  )  ;", "output . writeDouble ( GeometryUtils . translateToAVNaN ( coordinate . y )  )  ;", "}", "METHOD_END"], "methodName": ["writeCoordinate"], "fileName": "com.facebook.presto.geospatial.JtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "for    ( Coordinate   coordinate    :    coordinates )     {", ". writeCoordinate ( coordinate ,    output )  ;", "}", "}", "METHOD_END"], "methodName": ["writeCoordinates"], "fileName": "com.facebook.presto.geospatial.JtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "if    ( geometry . isEmpty (  )  )     {", "for    ( int   i    =     0  ;    i    <     4  ;    i +  +  )     {", "output . writeDouble ( Double . NaN )  ;", "}", "return ;", "}", "Envelope   envelope    =    geometry . getEnvelopeInternal (  )  ;", "output . writeDouble ( envelope . getMinX (  )  )  ;", "output . writeDouble ( envelope . getMinY (  )  )  ;", "output . writeDouble ( envelope . getMaxX (  )  )  ;", "output . writeDouble ( envelope . getMaxY (  )  )  ;", "}", "METHOD_END"], "methodName": ["writeEnvelope"], "fileName": "com.facebook.presto.geospatial.JtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "switch    ( geometry . getGeometryType (  )  )     {", "case    \" Point \"     :", ". writePoint (  (  ( Point )     ( geometry )  )  ,    output )  ;", "break ;", "case    \" MultiPoint \"     :", ". writeMultiPoint (  (  ( MultiPoint )     ( geometry )  )  ,    output )  ;", "break ;", "case    \" LineString \"     :", ". writePolyline ( geometry ,    output ,    false )  ;", "break ;", "case    \" MultiLineString \"     :", ". writePolyline ( geometry ,    output ,    true )  ;", "break ;", "case    \" Polygon \"     :", ". writePolygon ( geometry ,    output ,    false )  ;", "break ;", "case    \" MultiPolygon \"     :", ". writePolygon ( geometry ,    output ,    true )  ;", "break ;", "case    \" GeometryCollection \"     :", ". writeGeometryCollection ( geometry ,    output )  ;", "break ;", "default    :", "throw   new   IllegalArgumentException (  (  \" Unsupported   geometry   type    :     \"     +     ( geometry . getGeometryType (  )  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["writeGeometry"], "fileName": "com.facebook.presto.geospatial.JtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "output . appendByte ( GeometryType . GEOMETRY _ COLLECTION . code (  )  )  ;", "for    ( int   geometryIndex    =     0  ;    geometryIndex    <     ( collection . getNumGeometries (  )  )  ;    geometryIndex +  +  )     {", "Geometry   geometry    =    collection . getGeometryN ( geometryIndex )  ;", "int   startPosition    =    output . size (  )  ;", "output . appendInt (  0  )  ;", ". writeGeometry ( geometry ,    output )  ;", "int   endPosition    =    output . size (  )  ;", "int   length    =     ( endPosition    -    startPosition )     -     ( Integer . BYTES )  ;", "output . getUnderlyingSlice (  )  . setInt ( startPosition ,    length )  ;", "}", "}", "METHOD_END"], "methodName": ["writeGeometryCollection"], "fileName": "com.facebook.presto.geospatial.JtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "output . writeByte ( GeometryType . MULTI _ POINT . code (  )  )  ;", "output . writeInt (  . EsriShapeType . MULTI _ POINT . code )  ;", ". writeEnvelope ( geometry ,    output )  ;", "output . writeInt ( geometry . getNumPoints (  )  )  ;", "for    ( Coordinate   coordinate    :    geometry . getCoordinates (  )  )     {", ". writeCoordinate ( coordinate ,    output )  ;", "}", "}", "METHOD_END"], "methodName": ["writeMultiPoint"], "fileName": "com.facebook.presto.geospatial.JtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "output . writeByte ( GeometryType . POINT . code (  )  )  ;", "if    (  !  ( point . isEmpty (  )  )  )     {", ". writeCoordinate ( point . getCoordinate (  )  ,    output )  ;", "} else    {", "output . writeDouble ( Double . NaN )  ;", "output . writeDouble ( Double . NaN )  ;", "}", "}", "METHOD_END"], "methodName": ["writePoint"], "fileName": "com.facebook.presto.geospatial.JtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "int   numGeometries    =    geometry . getNumGeometries (  )  ;", "int   numParts    =     0  ;", "int   numPoints    =    geometry . getNumPoints (  )  ;", "for    ( int   i    =     0  ;    i    <    numGeometries ;    i +  +  )     {", "Polygon   polygon    =     (  ( Polygon )     ( geometry . getGeometryN ( i )  )  )  ;", "if    (  ( polygon . getNumPoints (  )  )     >     0  )     {", "numParts    +  =     ( polygon . getNumInteriorRing (  )  )     +     1  ;", "}", "}", "if    ( multitype )     {", "output . writeByte ( GeometryType . MULTI _ POLYGON . code (  )  )  ;", "} else    {", "output . writeByte ( GeometryType . POLYGON . code (  )  )  ;", "}", "output . writeInt (  . EsriShapeType . POLYGON . code )  ;", ". writeEnvelope ( geometry ,    output )  ;", "output . writeInt ( numParts )  ;", "output . writeInt ( numPoints )  ;", "if    ( numParts    =  =     0  )     {", "return ;", "}", "int [  ]    partIndexes    =    new   int [ numParts ]  ;", "boolean [  ]    shellPart    =    new   boolean [ numParts ]  ;", "int   currentPart    =     0  ;", "int   currentPoint    =     0  ;", "for    ( int   i    =     0  ;    i    <    numGeometries ;    i +  +  )     {", "Polygon   polygon    =     (  ( Polygon )     ( geometry . getGeometryN ( i )  )  )  ;", "partIndexes [ currentPart ]     =    currentPoint ;", "shellPart [ currentPart ]     =    true ;", "currentPart +  +  ;", "currentPoint    +  =    polygon . getExteriorRing (  )  . getNumPoints (  )  ;", "int   holesCount    =    polygon . getNumInteriorRing (  )  ;", "for    ( int   holeIndex    =     0  ;    holeIndex    <    holesCount ;    holeIndex +  +  )     {", "partIndexes [ currentPart ]     =    currentPoint ;", "shellPart [ currentPart ]     =    false ;", "currentPart +  +  ;", "currentPoint    +  =    polygon . getInteriorRingN ( holeIndex )  . getNumPoints (  )  ;", "}", "}", "for    ( int   partIndex    :    partIndexes )     {", "output . writeInt ( partIndex )  ;", "}", "Coordinate [  ]    coordinates    =    geometry . getCoordinates (  )  ;", ". canonicalizePolygonCoordinates ( coordinates ,    partIndexes ,    shellPart )  ;", ". writeCoordinates ( coordinates ,    output )  ;", "}", "METHOD_END"], "methodName": ["writePolygon"], "fileName": "com.facebook.presto.geospatial.JtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "int   numParts ;", "int   numPoints    =    geometry . getNumPoints (  )  ;", "if    ( multitype )     {", "numParts    =    geometry . getNumGeometries (  )  ;", "output . writeByte ( GeometryType . MULTI _ LINE _ STRING . code (  )  )  ;", "} else    {", "numParts    =     ( numPoints    >     0  )     ?     1     :     0  ;", "output . writeByte ( GeometryType . LINE _ STRING . code (  )  )  ;", "}", "output . writeInt (  . EsriShapeType . POLYLINE . code )  ;", ". writeEnvelope ( geometry ,    output )  ;", "output . writeInt ( numParts )  ;", "output . writeInt ( numPoints )  ;", "int   partIndex    =     0  ;", "for    ( int   i    =     0  ;    i    <    numParts ;    i +  +  )     {", "output . writeInt ( partIndex )  ;", "partIndex    +  =    geometry . getGeometryN ( i )  . getNumPoints (  )  ;", "}", ". writeCoordinates ( geometry . getCoordinates (  )  ,    output )  ;", "}", "METHOD_END"], "methodName": ["writePolyline"], "fileName": "com.facebook.presto.geospatial.JtsGeometrySerde"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( GeometrySerde . deserializeEnvelope ( TestGeometrySerialization . geometryFromText ( geometry )  )  ,    expectedEnvelope )  ;", "}", "METHOD_END"], "methodName": ["assertDeserializeEnvelope"], "fileName": "com.facebook.presto.geospatial.TestGeometrySerialization"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( GeometrySerde . deserializeType ( TestGeometrySerialization . geometryFromText ( wkt )  )  ,    expectedType )  ;", "}", "METHOD_END"], "methodName": ["assertDeserializeType"], "fileName": "com.facebook.presto.geospatial.TestGeometrySerialization"}, {"methodBody": ["METHOD_START", "{", "actual . setSpatialReference ( null )  ;", "expected . setSpatialReference ( null )  ;", ". ensureEnvelopeLoaded ( actual )  ;", ". ensureEnvelopeLoaded ( expected )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["assertGeometryEquals"], "fileName": "com.facebook.presto.geospatial.TestGeometrySerialization"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( actual . norm (  )  ,    expected . norm (  )  )  ;", "}", "METHOD_END"], "methodName": ["assertGeometryEquals"], "fileName": "com.facebook.presto.geospatial.TestGeometrySerialization"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   new   WKTReader (  )  . read ( wkt )  ;", "}    catch    ( ParseExcep   e )     {", "throw   new   RuntimeExcep ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["createJtsGeometry"], "fileName": "com.facebook.presto.geospatial.TestGeometrySerialization"}, {"methodBody": ["METHOD_START", "{", "geometry . envelope (  )  ;", "}", "METHOD_END"], "methodName": ["ensureEnvelopeLoaded"], "fileName": "com.facebook.presto.geospatial.TestGeometrySerialization"}, {"methodBody": ["METHOD_START", "{", "return   GeometrySerde . serialize ( OGCGeometry . fromText ( wkt )  )  ;", "}", "METHOD_END"], "methodName": ["geometryFromText"], "fileName": "com.facebook.presto.geospatial.TestGeometrySerialization"}, {"methodBody": ["METHOD_START", "{", "TestGeometrySerialization . assertDeserializeEnvelope (  \" MULTIPOINT    (  2  0     2  0  ,     2  5     2  5  )  \"  ,    new   Envelope (  2  0  ,     2  0  ,     2  5  ,     2  5  )  )  ;", "TestGeometrySerialization . assertDeserializeEnvelope (  \" MULTILINESTRING    (  (  1     1  ,     5     1  )  ,     (  2     4  ,     4     4  )  )  \"  ,    new   Envelope (  1  ,     1  ,     5  ,     4  )  )  ;", "TestGeometrySerialization . assertDeserializeEnvelope (  \" POLYGON    (  (  0     0  ,     0     4  ,     4     0  )  )  \"  ,    new   Envelope (  0  ,     0  ,     4  ,     4  )  )  ;", "TestGeometrySerialization . assertDeserializeEnvelope (  \" MULTIPOLYGON    (  (  (  0     0     ,     0     2  ,     2     2  ,     2     0  )  )  ,     (  (  2     2  ,     2     4  ,     4     4  ,     4     2  )  )  )  \"  ,    new   Envelope (  0  ,     0  ,     4  ,     4  )  )  ;", "TestGeometrySerialization . assertDeserializeEnvelope (  \" GEOMETRYCOLLECTION    ( POINT    (  3     7  )  ,    LINESTRING    (  4     6  ,     7     1  0  )  )  \"  ,    new   Envelope (  3  ,     6  ,     7  ,     1  0  )  )  ;", "TestGeometrySerialization . assertDeserializeEnvelope (  \" POLYGON   EMPTY \"  ,    null )  ;", "TestGeometrySerialization . assertDeserializeEnvelope (  \" POINT    (  1     2  )  \"  ,    new   Envelope (  1  ,     2  ,     1  ,     2  )  )  ;", "TestGeometrySerialization . assertDeserializeEnvelope (  \" POINT   EMPTY \"  ,    null )  ;", "TestGeometrySerialization . assertDeserializeEnvelope (  \" GEOMETRYCOLLECTION    ( GEOMETRYCOLLECTION    ( POINT    (  2     7  )  ,    LINESTRING    (  4     6  ,     7     1  0  )  )  ,    POINT    (  3     7  )  ,    LINESTRING    (  4     6  ,     7     1  0  )  )  \"  ,    new   Envelope (  2  ,     6  ,     7  ,     1  0  )  )  ;", "}", "METHOD_END"], "methodName": ["testDeserializeEnvelope"], "fileName": "com.facebook.presto.geospatial.TestGeometrySerialization"}, {"methodBody": ["METHOD_START", "{", "TestGeometrySerialization . assertDeserializeType (  \" POINT    (  1     2  )  \"  ,    GeometryType . POINT )  ;", "TestGeometrySerialization . assertDeserializeType (  \" POINT   EMPTY \"  ,    GeometryType . POINT )  ;", "TestGeometrySerialization . assertDeserializeType (  \" MULTIPOINT    (  2  0     2  0  ,     2  5     2  5  )  \"  ,    GeometryType . MULTI _ POINT )  ;", "TestGeometrySerialization . assertDeserializeType (  \" MULTIPOINT   EMPTY \"  ,    GeometryType . MULTI _ POINT )  ;", "TestGeometrySerialization . assertDeserializeType (  \" LINESTRING    (  1     1  ,     5     1  ,     6     2  )  )  \"  ,    GeometryType . LINE _ STRING )  ;", "TestGeometrySerialization . assertDeserializeType (  \" LINESTRING   EMPTY \"  ,    GeometryType . LINE _ STRING )  ;", "TestGeometrySerialization . assertDeserializeType (  \" MULTILINESTRING    (  (  1     1  ,     5     1  )  ,     (  2     4  ,     4     4  )  )  \"  ,    GeometryType . MULTI _ LINE _ STRING )  ;", "TestGeometrySerialization . assertDeserializeType (  \" MULTILINESTRING   EMPTY \"  ,    GeometryType . MULTI _ LINE _ STRING )  ;", "TestGeometrySerialization . assertDeserializeType (  \" POLYGON    (  (  0     0  ,     0     4  ,     4     0  )  )  \"  ,    GeometryType . POLYGON )  ;", "TestGeometrySerialization . assertDeserializeType (  \" POLYGON   EMPTY \"  ,    GeometryType . POLYGON )  ;", "TestGeometrySerialization . assertDeserializeType (  \" MULTIPOLYGON    (  (  (  0     0     ,     0     2  ,     2     2  ,     2     0  )  )  ,     (  (  2     2  ,     2     4  ,     4     4  ,     4     2  )  )  )  \"  ,    GeometryType . MULTI _ POLYGON )  ;", "TestGeometrySerialization . assertDeserializeType (  \" MULTIPOLYGON   EMPTY \"  ,    GeometryType . MULTI _ POLYGON )  ;", "TestGeometrySerialization . assertDeserializeType (  \" GEOMETRYCOLLECTION    ( POINT    (  3     7  )  ,    LINESTRING    (  4     6  ,     7     1  0  )  )  \"  ,    GeometryType . GEOMETRY _ COLLECTION )  ;", "TestGeometrySerialization . assertDeserializeType (  \" GEOMETRYCOLLECTION   EMPTY \"  ,    GeometryType . GEOMETRY _ COLLECTION )  ;", "assertEquals ( GeometrySerde . deserializeType ( GeometrySerde . serialize ( new   Envelope (  1  ,     2  ,     3  ,     4  )  )  )  ,    GeometryType . ENVELOPE )  ;", "}", "METHOD_END"], "methodName": ["testDeserializeType"], "fileName": "com.facebook.presto.geospatial.TestGeometrySerialization"}, {"methodBody": ["METHOD_START", "{", "testEnvelopeSerialization ( new   Envelope (  0  ,     0  ,     1  ,     1  )  )  ;", "testEnvelopeSerialization ( new   Envelope (  1  ,     2  ,     3  ,     4  )  )  ;", "testEnvelopeSerialization ( new   Envelope (  1  0  1  0  1  ,     (  -  2  .  0  5  )  ,     (  -  3  0  0  0  0  0  .  0  )  ,     0  )  )  ;", "}", "METHOD_END"], "methodName": ["testEnvelope"], "fileName": "com.facebook.presto.geospatial.TestGeometrySerialization"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( GeometrySerde . deserialize ( GeometrySerde . serialize ( envelope )  )  ,    createFromEsriGeometry ( envelope ,    null )  )  ;", "assertEquals ( GeometrySerde . deserializeEnvelope ( GeometrySerde . serialize ( envelope )  )  ,    envelope )  ;", "assertEquals ( JtsGeometrySerde . serialize ( JtsGeometrySerde . deserialize ( GeometrySerde . serialize ( envelope )  )  )  ,    GeometrySerde . serialize ( createFromEsriGeometry ( envelope ,    null )  )  )  ;", "}", "METHOD_END"], "methodName": ["testEnvelopeSerialization"], "fileName": "com.facebook.presto.geospatial.TestGeometrySerialization"}, {"methodBody": ["METHOD_START", "{", "OGCGeometry   expected    =    OGCGeometry . fromText ( wkt )  ;", "OGCGeometry   actual    =    GeometrySerde . deserialize ( GeometrySerde . serialize ( expected )  )  ;", ". assertGeometryEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testEsriSerialization"], "fileName": "com.facebook.presto.geospatial.TestGeometrySerialization"}, {"methodBody": ["METHOD_START", "{", "TestGeometrySerialization . testSerialization (  \" GEOMETRYCOLLECTION    ( POINT    (  1     2  )  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" GEOMETRYCOLLECTION    ( POINT    (  1     2  )  ,    POINT    (  2     1  )  ,    POINT   EMPTY )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" GEOMETRYCOLLECTION    ( POINT    (  1     2  )  ,    LINESTRING    (  0     0  ,     1     2  ,     3     4  )  ,    POLYGON    (  (  0     0  ,     0     1  ,     1     1  ,     1     0  ,     0     0  )  )  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" GEOMETRYCOLLECTION    ( MULTIPOLYGON    (  (  (  3  0     2  0  ,     4  5     4  0  ,     1  0     4  0  ,     3  0     2  0  )  )  )  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" GEOMETRYCOLLECTION    ( MULTIPOLYGON    (  (  (  3  0     2  0  ,     4  5     4  0  ,     1  0     4  0  ,     3  0     2  0  )  )  ,     (  (  1  5     5  ,     4  0     1  0  ,     1  0     2  0  ,     5     1  0  ,     1  5     5  )  )  )  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" GEOMETRYCOLLECTION    ( MULTIPOLYGON    (  (  (  3  0     2  0  ,     4  5     4  0  ,     1  0     4  0  ,     3  0     2  0  )  )  ,     (  (  1  5     5  ,     4  0     1  0  ,     1  0     2  0  ,     5     1  0  ,     1  5     5  )  )  )  ,    POINT    (  1     2  )  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" GEOMETRYCOLLECTION    ( POINT   EMPTY )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" GEOMETRYCOLLECTION   EMPTY \"  )  ;", "TestGeometrySerialization . testSerialization (  \" GEOMETRYCOLLECTION    ( MULTIPOLYGON    (  (  (  3  0     2  0  ,     4  5     4  0  ,     1  0     4  0  ,     3  0     2  0  )  )  )  ,    GEOMETRYCOLLECTION    ( MULTIPOLYGON    (  (  (  3  0     2  0  ,     4  5     4  0  ,     1  0     4  0  ,     3  0     2  0  )  )  )  )  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testGeometryCollection"], "fileName": "com.facebook.presto.geospatial.TestGeometrySerialization"}, {"methodBody": ["METHOD_START", "{", "Geometry   jtsGeometry    =    TestGeometrySerialization . createJtsGeometry ( wkt )  ;", "OGCGeometry   esriGeometry    =    OGCGeometry . fromText ( wkt )  ;", "Slice   jtsSerialized    =    JtsGeometrySerde . serialize ( jtsGeometry )  ;", "Slice   esriSerialized    =    GeometrySerde . serialize ( esriGeometry )  ;", "assertEquals ( jtsSerialized ,    esriSerialized )  ;", "Geometry   jtsDeserialized    =    JtsGeometrySerde . deserialize ( jtsSerialized )  ;", "TestGeometrySerialization . assertGeometryEquals ( jtsDeserialized ,    jtsGeometry )  ;", "OGCGeometry   esriDeserialized    =    GeometrySerde . deserialize ( esriSerialized )  ;", "TestGeometrySerialization . assertGeometryEquals ( esriDeserialized ,    esriGeometry )  ;", "}", "METHOD_END"], "methodName": ["testJtsSerialization"], "fileName": "com.facebook.presto.geospatial.TestGeometrySerialization"}, {"methodBody": ["METHOD_START", "{", "TestGeometrySerialization . testSerialization (  \" LINESTRING    (  0     1  ,     2     3  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" LINESTRING    (  0     1  ,     2     3  ,     4     5  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" LINESTRING    (  0     1  ,     2     3  ,     4     5  ,     0     1  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" LINESTRING   EMPTY \"  )  ;", "}", "METHOD_END"], "methodName": ["testLineString"], "fileName": "com.facebook.presto.geospatial.TestGeometrySerialization"}, {"methodBody": ["METHOD_START", "{", "TestGeometrySerialization . testSerialization (  \" MULTILINESTRING    (  (  0     1  ,     2     3  ,     4     5  )  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" MULTILINESTRING    (  (  0     1  ,     2     3  ,     4     5  )  ,     (  0     1  ,     2     3  ,     4     5  )  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" MULTILINESTRING    (  (  0     1  ,     2     3  ,     4     5  )  ,     (  0     1  ,     2     3  ,     4     6  )  ,     (  0     1  ,     2     3  ,     4     7  )  ,     (  0     1  ,     2     3  ,     4     7  ,     0     1  )  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" MULTILINESTRING    (  (  0     1  ,     2     3  ,     4     5  )  ,     (  0     1  ,     2     3  ,     4     6  )  ,     (  0     1  ,     2     3  ,     4     7  )  ,     (  0  .  3  3  3     0  .  7  4  ,     0  .  1     0  .  2  ,     2 e 3     4 e -  3  )  ,     (  0  .  3  3  3     0  .  7  4  ,     2 e 3     4 e -  3  )  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" MULTILINESTRING    (  (  0     1  ,     2     3  ,     4     5  )  ,     (  1     1  ,     2     2  )  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" MULTILINESTRING   EMPTY \"  )  ;", "}", "METHOD_END"], "methodName": ["testMultiLineString"], "fileName": "com.facebook.presto.geospatial.TestGeometrySerialization"}, {"methodBody": ["METHOD_START", "{", "TestGeometrySerialization . testSerialization (  \" MULTIPOINT    (  0     0  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" MULTIPOINT    (  0     0  ,     0     0  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" MULTIPOINT    (  0     0  ,     1     1  ,     2     3  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" MULTIPOINT   EMPTY \"  )  ;", "}", "METHOD_END"], "methodName": ["testMultiPoint"], "fileName": "com.facebook.presto.geospatial.TestGeometrySerialization"}, {"methodBody": ["METHOD_START", "{", "TestGeometrySerialization . testSerialization (  \" MULTIPOLYGON    (  (  (  3  0     2  0  ,     4  5     4  0  ,     1  0     4  0  ,     3  0     2  0  )  )  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" MULTIPOLYGON    (  (  (  3  0     2  0  ,     4  5     4  0  ,     1  0     4  0  ,     3  0     2  0  )  )  ,     (  (  3  0     2  0  ,     4  5     4  0  ,     1  0     4  0  ,     3  0     2  0  )  )  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" MULTIPOLYGON    (  (  (  3  0     2  0  ,     4  5     4  0  ,     1  0     4  0  ,     3  0     2  0  )  )  ,     (  (  1  5     5  ,     4  0     1  0  ,     1  0     2  0  ,     1  5     5  )  )  )  ,     (  (  0     0  ,     0     1  ,     1     1  ,     1     0  .  5  ,     1     0  ,     0     0  )  ,     (  0  .  2  5     0  .  2  5  ,     0  .  2  5     0  .  7  5  ,     0  .  7  5     0  .  7  5  ,     0  .  7  5     0  .  2  5  )  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" MULTIPOLYGON    (  (  (  3  0     2  0  ,     4  5     4  0  ,     1  0     4  0  ,     3  0     2  0  )  )  ,     (  (  0     0  ,     0     1  ,     1     1  ,     1     0  ,     0     0  )  ,     (  0  .  7  5     0  .  2  5  ,     0  .  7  5     0  .  7  5  ,     0  .  2  5     0  .  7  5  ,     0  .  2  5     0  .  2  5  ,     0  .  7  5     0  .  2  5  )  )  ,     (  (  1  5     5  ,     4  0     1  0  ,     1  0     2  0  ,     5     1  0  ,     1  5     5  )  )  )  ,     (  (  0     0  ,     0     1  ,     1     1  ,     1     0  )  ,     (  0  .  2  5     0  .  2  5  ,     0  .  2  5     0  .  7  5  ,     0  .  7  5     0  .  7  5  ,     0  .  7  5     0  .  2  5  )  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" MULTIPOLYGON    (  (  (  3  0     2  0  ,     4  5     4  0  ,     1  0     4  0  ,     3  0     2  0  )  )  ,     (  (  0     0  ,     0     1  ,     1     1  ,     1     0  ,     0     0  )  ,     (  0  .  2  5     0  .  2  5  ,     0  .  2  5     0  .  7  5  ,     0  .  7  5     0  .  7  5  ,     0  .  7  5     0  .  2  5  ,     0  .  2  5     0  .  2  5  )  )  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  (  \" MULTIPOLYGON    (  \"     +     (  (  (  (  (  \"  (  (  3  0     2  0  ,     4  5     4  0  ,     1  0     4  0  ,     3  0     2  0  )  )  ,     \"     +     \"  (  (  0     0  ,     0     1  ,     1     1  ,     1     0  ,     0     0  )  ,     (  0  .  7  5     0  .  2  5  ,     0  .  7  5     0  .  7  5  ,     0  .  2  5     0  .  7  5  ,     0  .  2  5     0  .  2  5  ,     0  .  7  5     0  .  2  5  )  )  ,     \"  )     +     \"  (  (  0     0  ,     0     1  ,     1     1  ,     1     0  ,     0     0  )  ,     (  0  .  2  5     0  .  2  5  ,     0  .  2  5     0  .  7  5  ,     0  .  7  5     0  .  7  5  ,     0  .  7  5     0  .  2  5  ,     0  .  2  5     0  .  2  5  )  )  ,     \"  )     +     \"  (  (  0     0  ,     1     0  ,     1     1  ,     0     1  ,     0     0  )  ,     (  0  .  2  5     0  .  2  5  ,     0  .  2  5     0  .  7  5  ,     0  .  7  5     0  .  7  5  ,     0  .  7  5     0  .  2  5  ,     0  .  2  5     0  .  2  5  )  )  ,     \"  )     +     \"  (  (  0     0  ,     1     0  ,     1     1  ,     0     1  ,     0     0  )  ,     (  0  .  7  5     0  .  2  5  ,     0  .  7  5     0  .  7  5  ,     0  .  2  5     0  .  7  5  ,     0  .  2  5     0  .  2  5  ,     0  .  7  5     0  .  2  5  )  )  ,     \"  )     +     \"  (  (  0     0  ,     1     0  ,     1     1  ,     0     1  ,     0     0  )  ,     (  0  .  7  5     0  .  2  5  ,     0  .  7  5     0  .  7  5  ,     0  .  2  5     0  .  7  5  ,     0  .  2  5     0  .  2  5  ,     0  .  7  5     0  .  2  5  )  ,     (  0  .  2  5     0  .  2  5  ,     0  .  2  5     0  .  7  5  ,     0  .  7  5     0  .  7  5  ,     0  .  7  5     0  .  2  5  ,     0  .  2  5     0  .  2  5  )  )  )  \"  )  )  )  ;", "TestGeometrySerialization . testSerialization (  \" MULTIPOLYGON   EMPTY \"  )  ;", "}", "METHOD_END"], "methodName": ["testMultiPolygon"], "fileName": "com.facebook.presto.geospatial.TestGeometrySerialization"}, {"methodBody": ["METHOD_START", "{", "TestGeometrySerialization . testSerialization (  \" POINT    (  1     2  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" POINT    (  -  1     -  2  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" POINT    (  0     0  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" POINT    (  -  2 e 3     -  4 e 3  3  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" POINT   EMPTY \"  )  ;", "}", "METHOD_END"], "methodName": ["testPoint"], "fileName": "com.facebook.presto.geospatial.TestGeometrySerialization"}, {"methodBody": ["METHOD_START", "{", "TestGeometrySerialization . testSerialization (  \" POLYGON    (  (  3  0     1  0  ,     4  0     4  0  ,     2  0     4  0  ,     3  0     1  0  )  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" POLYGON    (  (  3  0     1  0  ,     4  0     4  0  ,     2  0     4  0  ,     1  0     2  0  ,     3  0     1  0  )  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" POLYGON    (  (  0     0  ,     0     1  ,     1     1  ,     1     0  ,     0     0  )  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" POLYGON    (  (  0     0  ,     0     1  ,     1     1  ,     1     0  ,     0     0  )  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" POLYGON    (  (  0     0  ,     1     0  ,     1     1  ,     0     1  ,     0     0  )  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" POLYGON    (  (  0     0  ,     0     1  ,     1     1  ,     1     0  ,     0     0  )  ,     (  0  .  7  5     0  .  2  5  ,     0  .  7  5     0  .  7  5  ,     0  .  2  5     0  .  7  5  ,     0  .  2  5     0  .  2  5  ,     0  .  7  5     0  .  2  5  )  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" POLYGON    (  (  0     0  ,     0     1  ,     1     1  ,     1     0  ,     0     0  )  ,     (  0  .  2  5     0  .  2  5  ,     0  .  2  5     0  .  7  5  ,     0  .  7  5     0  .  7  5  ,     0  .  7  5     0  .  2  5  ,     0  .  2  5     0  .  2  5  )  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" POLYGON    (  (  0     0  ,     0     1  ,     1     1  ,     1     0  ,     0     0  )  ,     (  0  .  2  5     0  .  2  5  ,     0  .  2  5     0  .  7  5  ,     0  .  7  5     0  .  7  5  ,     0  .  7  5     0  .  2  5  ,     0  .  2  5     0  .  2  5  )  ,     (  0  .  7  5     0  .  2  5  ,     0  .  7  5     0  .  7  5  ,     0  .  2  5     0  .  7  5  ,     0  .  2  5     0  .  2  5  ,     0  .  7  5     0  .  2  5  )  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" POLYGON    (  (  0     0  ,     0     1  ,     1     1  ,     1     0  ,     0     0  )  ,     (  0  .  2  5     0  .  2  5  ,     0  .  7  5     0  .  7  5  ,     0  .  2  5     0  .  7  5  ,     0  .  7  5     0  .  2  5  ,     0  .  2  5     0  .  2  5  )  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" POLYGON    (  (  0     0  ,     0     1  ,     1     1  ,     1     0  ,     0     0  )  ,     (  0  .  2  5     0  .  2  5  ,     0  .  7  5     0  .  7  5  ,     0  .  2  5     0  .  7  5  ,     0  .  7  5     0  .  2  5  ,     0  .  2  5     0  .  2  5  )  ,     (  0  .  2  5     0  .  2  5  ,     0  .  7  5     0  .  7  5  ,     0  .  2  5     0  .  7  5  ,     0  .  7  5     0  .  2  5  ,     0  .  2  5     0  .  2  5  )  )  \"  )  ;", "TestGeometrySerialization . testSerialization (  \" POLYGON   EMPTY \"  )  ;", "TestGeometrySerialization . testSerialization (  \" POLYGON    (  (  0     0  ,     0     1  ,     1     1  ,     1     0  ,     0     0  )  ,     (  0  .  2  5     0  .  2  5  ,     0  .  2  5     0  .  7  5  ,     0  .  7  5     0  .  7  5  ,     0  .  7  5     0  .  2  5  ,     0  .  2  5     0  .  2  5  )  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testPolygon"], "fileName": "com.facebook.presto.geospatial.TestGeometrySerialization"}, {"methodBody": ["METHOD_START", "{", "TestGeometrySerialization . testEsriSerialization ( wkt )  ;", "TestGeometrySerialization . testJtsSerialization ( wkt )  ;", "}", "METHOD_END"], "methodName": ["testSerialization"], "fileName": "com.facebook.presto.geospatial.TestGeometrySerialization"}]