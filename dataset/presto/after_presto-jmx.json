[{"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . spi . ColumnMetadata ( columnName ,    columnType )  ;", "}", "METHOD_END"], "methodName": ["getColumnMetadata"], "fileName": "com.facebook.presto.connector.jmx.JmxColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   columnName ;", "}", "METHOD_END"], "methodName": ["getColumnName"], "fileName": "com.facebook.presto.connector.jmx.JmxColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   columnType ;", "}", "METHOD_END"], "methodName": ["getColumnType"], "fileName": "com.facebook.presto.connector.jmx.JmxColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   dumpPeriod ;", "}", "METHOD_END"], "methodName": ["getDumpPeriod"], "fileName": "com.facebook.presto.connector.jmx.JmxConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "return   dumpTables ;", "}", "METHOD_END"], "methodName": ["getDumpTables"], "fileName": "com.facebook.presto.connector.jmx.JmxConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "return   maxEntries ;", "}", "METHOD_END"], "methodName": ["getMaxEntries"], "fileName": "com.facebook.presto.connector.jmx.JmxConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "this . dumpPeriod    =    dumpPeriod ;", "turn   this ;", "}", "METHOD_END"], "methodName": ["setDumpPeriod"], "fileName": "com.facebook.presto.connector.jmx.JmxConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "this . dumpTables    =    Splitter . on ( Pattern . compile (  \"  (  ?  <  !  \\  \\  \\  \\  )  ,  \"  )  )  . omitEmptyStrings (  )  . splitToList ( tableNames )  . stream (  )  . map (  (    part )     -  >    part . replace (  \"  \\  \\  ,  \"  ,     \"  ,  \"  )  )  . collect ( Collectors . toSet (  )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setDumpTables"], "fileName": "com.facebook.presto.connector.jmx.JmxConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "this . dumpTables    =    ImmutableSet . copyOf ( tableNames )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setDumpTables"], "fileName": "com.facebook.presto.connector.jmx.JmxConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "this . maxEntries    =    maxEntries ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setMaxEntries"], "fileName": "com.facebook.presto.connector.jmx.JmxConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "String   lowerCaseTableName    =    tableName . toLowerCase (  )  ;", "checkArgument ( tableDatatainsKey ( lowerCaseTableName )  )  ;", "tableData . get ( lowerCaseTableName )  . add ( row )  ;", "}", "METHOD_END"], "methodName": ["addRow"], "fileName": "com.facebook.presto.connector.jmx.JmxHistoricalData"}, {"methodBody": ["METHOD_START", "{", "String   lowerCaseObjectName    =    objectName . toLowerCase (  )  ;", "if    (  !  ( tableDatatainsKey ( lowerCaseObjectName )  )  )     {", "return   ImmutableList . of (  )  ;", "}", "return   projectRows ( tableData . get ( lowerCaseObjectName )  ,    selectedColumns )  ;", "}", "METHOD_END"], "methodName": ["getRows"], "fileName": "com.facebook.presto.connector.jmx.JmxHistoricalData"}, {"methodBody": ["METHOD_START", "{", "return   tables ;", "}", "METHOD_END"], "methodName": ["getTables"], "fileName": "com.facebook.presto.connector.jmx.JmxHistoricalData"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < List < Object >  >    result    =    ImmutableList . builder (  )  ;", "for    ( List < Object >    row    :    rows )     {", "List < Object >    projectedRow    =    new   ArrayList <  >  (  )  ;", "for    ( Integer   selectedColumn    :    selectedColumns )     {", "projectedRow . add ( row . get ( selectedColumn )  )  ;", "}", "result . add ( projectedRow )  ;", "}", "return   result . build (  )  ;", "}", "METHOD_END"], "methodName": ["projectRows"], "fileName": "com.facebook.presto.connector.jmx.JmxHistoricalData"}, {"methodBody": ["METHOD_START", "{", "return   Arrays . stream ( mbeanInfo . getAttributes (  )  )  . filter ( MBeanAttributeInfo :  : isReadable )  . map (  (    attribute )     -  >    new   JmxColumnHandle ( attribute . getName (  )  ,    JmxMetadata . getColumnType ( attribute )  )  )  ;", "}", "METHOD_END"], "methodName": ["getColumnHandles"], "fileName": "com.facebook.presto.connector.jmx.JmxMetadata"}, {"methodBody": ["METHOD_START", "{", "switch    ( attribute . getType (  )  )     {", "case    \" lean \"     :", "case    \" Boolean \"     :", "return   BOOLEAN ;", "case    \" byte \"     :", "case    \" Byte \"     :", "case    \" short \"     :", "case    \" Short \"     :", "case    \" int \"     :", "case    \" Integer \"     :", "case    \" long \"     :", "case    \" Long \"     :", "return   BIGINT ;", "case    \" Number \"     :", "case    \" float \"     :", "case    \" Float \"     :", "case    \" double \"     :", "case    \" Double \"     :", "return   DOUBLE ;", "}", "return   createUnboundedVarcharType (  )  ;", "}", "METHOD_END"], "methodName": ["getColumnType"], "fileName": "com.facebook.presto.connector.jmx.JmxMetadata"}, {"methodBody": ["METHOD_START", "{", "JmxTableHandle   handle    =    getJmxTableHandle ( tableName )  ;", "if    ( handle    =  =    null )     {", "return   null ;", "}", "ImmutableList . Builder < JmxColumnHandle >    builder    =    ImmutableList . builder (  )  ;", "builder . add ( new   JmxColumnHandle (  . TIMESTAMP _ COLUMN _ NAME ,    TIMESTAMP )  )  ;", "builder . addAll ( handle . getColumnHandles (  )  )  ;", "return   new   JmxTableHandle ( handle . getTableName (  )  ,    handle . getObjectNames (  )  ,    builder . build (  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getJmxHistoryTableHandle"], "fileName": "com.facebook.presto.connector.jmx.JmxMetadata"}, {"methodBody": ["METHOD_START", "{", "try    {", "String   objectNamePattern    =    toPattern ( tableName . getTableName (  )  . toLowerCase ( Locale . ENGLISH )  )  ;", "List < ObjectName >    objectNames    =    mbeanServer . queryNames ( ObjectName . WILDCARD ,    null )  . stream (  )  . filter (  (    name )     -  >    name . getCanonicalName (  )  . toLowerCase ( Locale . ENGLISH )  . matches ( objectNamePattern )  )  . collect ( toImmutableList (  )  )  ;", "if    ( objectNames . isEmpty (  )  )     {", "return   null ;", "}", "List < JmxColumnHandle >    columns    =    new   ArrayList <  >  (  )  ;", "columns . add ( new   JmxColumnHandle (  . NODE _ COLUMN _ NAME ,    createUnboundedVarcharType (  )  )  )  ;", "columns . add ( new   JmxColumnHandle (  . OBJECT _ NAME _ NAME ,    createUnboundedVarcharType (  )  )  )  ;", "for    ( ObjectName   objectName    :    objectNames )     {", "MBeanInfo   mbeanInfo    =    mbeanServer . getMBeanInfo ( objectName )  ;", "getColumnHandles ( mbeanInfo )  . forEach ( columns :  : add )  ;", "}", "columns    =    columns . stream (  )  . distinct (  )  . sorted ( Comparator . comparing ( JmxColumnHandle :  : getColumnName )  )  . collect ( toImmutableList (  )  )  ;", "return   new   JmxTableHandle ( tableName ,    objectNames . stream (  )  . map ( ObjectName :  : toString )  . collect ( toImmutableList (  )  )  ,    columns ,    true )  ;", "}    catch    ( JMException   e )     {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["getJmxTableHandle"], "fileName": "com.facebook.presto.connector.jmx.JmxMetadata"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( tableName ,     \" tableName   is   null \"  )  ;", "if    ( tableName . getSchemaName (  )  . equals (  . JMX _ SCHEMA _ NAME )  )     {", "return   getJmxTableHandle ( tableName )  ;", "} else", "if    ( tableName . getSchemaName (  )  . equals (  . HISTORY _ SCHEMA _ NAME )  )     {", "return   getJmxHistoryTableHandle ( tableName )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getTableHandle"], "fileName": "com.facebook.presto.connector.jmx.JmxMetadata"}, {"methodBody": ["METHOD_START", "{", "Builder < SchemaTableName >    tableNames    =    ImmutableList . builder (  )  ;", "for    ( ObjectName   objectName    :    mbeanServer . queryNames ( ObjectName . WILDCARD ,    null )  )     {", "tableNames . add ( new   SchemaTableName (  . JMX _ SCHEMA _ NAME ,    objectName . getCanonicalName (  )  . toLowerCase ( Locale . ENGLISH )  )  )  ;", "}", "return   tableNames . build (  )  ;", "}", "METHOD_END"], "methodName": ["listJmxTables"], "fileName": "com.facebook.presto.connector.jmx.JmxMetadata"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( tableName . contains (  \"  *  \"  )  )  )     {", "return   Pattern . quote ( new   ObjectName ( tableName )  . getCanonicalName (  )  )  ;", "}", "return   Streams . stream ( Splitter . on (  '  *  '  )  . split ( tableName )  )  . map ( Pattern :  : quote )  . collect ( Colls . joining (  \"  .  *  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["toPattern"], "fileName": "com.facebook.presto.connector.jmx.JmxMetadata"}, {"methodBody": ["METHOD_START", "{", "return    (  ( millis    +     (  ( period )     /     2  )  )     /     ( period )  )     *     ( period )  ;", "}", "METHOD_END"], "methodName": ["roundToPeriod"], "fileName": "com.facebook.presto.connector.jmx.JmxPeriodicSampler"}, {"methodBody": ["METHOD_START", "{", "long   dumpTimestamp    =    roundToPeriod ( System . currentTimeMillis (  )  )  ;", "if    ( dumpTimestamp    <  =     ( lastDumpTimestamp )  )     {", "return ;", "}", "lastDumpTimestamp    =    dumpTimestamp ;", "for    ( JmxTableHandle   tableHandle    :    tableHandles )     {", "try    {", "for    ( String   objectName    :    tableHandle . getObjectNames (  )  )     {", "List < Object >    row    =    jmxRecordSetProvider . getLiveRow ( objectName ,    tableHandle . getColumnHandles (  )  ,    dumpTimestamp )  ;", "jmxHistoricalData . addRow ( tableHandle . getTableName (  )  . getTableName (  )  ,    row )  ;", "}", "}    catch    ( Exception   exception )     {", ". log . error ( exception ,     \" Error   reading   jmx   records \"  )  ;", "}", "}", "schedule (  )  ;", "}", "METHOD_END"], "methodName": ["runUnsafe"], "fileName": "com.facebook.presto.connector.jmx.JmxPeriodicSampler"}, {"methodBody": ["METHOD_START", "{", "long   nextDumpTimestamp    =     ( lastDumpTimestamp )     +     ( period )  ;", "long   nowMillis    =    System . currentTimeMillis (  )  ;", "long   delay    =    nextDumpTimestamp    -    nowMillis ;", "executor . schedule ( this ,    Math . max ( delay ,     0  )  ,    TimeUnit . MILLISECONDS )  ;", "}", "METHOD_END"], "methodName": ["schedule"], "fileName": "com.facebook.presto.connector.jmx.JmxPeriodicSampler"}, {"methodBody": ["METHOD_START", "{", "executor . shutdown (  )  ;", "}", "METHOD_END"], "methodName": ["shutdown"], "fileName": "com.facebook.presto.connector.jmx.JmxPeriodicSampler"}, {"methodBody": ["METHOD_START", "{", "if    (  ( tableHandles . size (  )  )     >     0  )     {", "lastDumpTimestamp    =    roundTo ( System . currentTimeMillis (  )  )  ;", "schedule (  )  ;", "}", "}", "METHOD_END"], "methodName": ["start"], "fileName": "com.facebook.presto.connector.jmx.JmxPeriodicSampler"}, {"methodBody": ["METHOD_START", "{", "DistributedQueryRunner   queryRunner    =    null ;", "try    {", "queryRunner    =    new   DistributedQueryRunner (  . createSession (  )  ,     3  )  ;", "queryRunner . installPlugin ( new   JmxPlugin (  )  )  ;", "queryRunner . createCatalog (  \" jmx \"  ,     \" jmx \"  )  ;", "return   queryRunner ;", "}    catch    ( Throwable   e )     {", "Closeables . closeAllSuppress ( e ,    queryRunner )  ;", "throw   e ;", "}", "}", "METHOD_END"], "methodName": ["createJmxQueryRunner"], "fileName": "com.facebook.presto.connector.jmx.JmxQueryRunner"}, {"methodBody": ["METHOD_START", "{", "return   testSessionBuilder (  )  . setCatalog (  \" jmx \"  )  . setSchema ( JmxMetadata . JMX _ SCHEMA _ NAME )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["createSession"], "fileName": "com.facebook.presto.connector.jmx.JmxQueryRunner"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < Integer >    selectedColumns    =    ImmutableList . builder (  )  ;", "for    ( int   i    =     0  ;    i    <     ( columnHandles . size (  )  )  ;    i +  +  )     {", "JmxColumnHandle   column    =    columnHandles . get ( i )  ;", "if    ( selectedColumnNamestains ( column . getColumnName (  )  )  )     {", "selectedColumns . add ( i )  ;", "}", "}", "return   selectedColumns . build (  )  ;", "}", "METHOD_END"], "methodName": ["calculateSelectedColumns"], "fileName": "com.facebook.presto.connector.jmx.JmxRecordSetProvider"}, {"methodBody": ["METHOD_START", "{", "ObjectName   objectName    =    new   ObjectName ( name )  ;", "String [  ]    columnNamesArray    =    uniqueColumnNames . toArray ( new   String [ uniqueColumnNames . size (  )  ]  )  ;", "Builder < String ,    Optional < Object >  >    attributes    =    ImmutableMap . builder (  )  ;", "for    ( Attribute   attribute    :    mbeanServer . getAttributes ( objectName ,    columnNamesArray )  . asList (  )  )     {", "attributes . put ( attribute . getName (  )  ,    Optional . ofNullable ( attribute . getValue (  )  )  )  ;", "}", "return   attributes . build (  )  ;", "}", "METHOD_END"], "methodName": ["getAttributes"], "fileName": "com.facebook.presto.connector.jmx.JmxRecordSetProvider"}, {"methodBody": ["METHOD_START", "{", "return   columnHandles . stream (  )  . map (  (    column )     -  >     (  ( JmxColumnHandle )     ( column )  )  )  . map ( JmxColumnHandle :  : getColumnName )  . collect ( Collectors . toSet (  )  )  ;", "}", "METHOD_END"], "methodName": ["getColumnNames"], "fileName": "com.facebook.presto.connector.jmx.JmxRecordSetProvider"}, {"methodBody": ["METHOD_START", "{", "return   columnHandles . stream (  )  . map (  (    column )     -  >     (  ( JmxColumnHandle )     ( column )  )  )  . map ( JmxColumnHandle :  : getColumnType )  . collect ( Collectors . toList (  )  )  ;", "}", "METHOD_END"], "methodName": ["getColumnTypes"], "fileName": "com.facebook.presto.connector.jmx.JmxRecordSetProvider"}, {"methodBody": ["METHOD_START", "{", "ImmutableMap < String ,    Optional < Object >  >    attributes    =    getAttributes ( JmxRecordSetProvider . getColumnNames ( columns )  ,    objectName )  ;", "List < Object >    row    =    new   ArrayList <  >  (  )  ;", "for    ( ColumnHandle   column    :    columns )     {", "JmxColumnHandle   jmxColumn    =     (  ( JmxColumnHandle )     ( column )  )  ;", "if    ( jmxColumn . getColumnName (  )  . equals ( JmxMetadata . NODE _ COLUMN _ NAME )  )     {", "row . add ( nodeId )  ;", "} else", "if    ( jmxColumn . getColumnName (  )  . equals ( JmxMetadata . OBJECT _ NAME _ NAME )  )     {", "row . add ( objectName )  ;", "} else", "if    ( jmxColumn . getColumnName (  )  . equals ( JmxMetadata . TIMESTAMP _ COLUMN _ NAME )  )     {", "row . add ( entryTimestamp )  ;", "} else    {", "Optional < Object >    optionalValue    =    attributes . get ( jmxColumn . getColumnName (  )  )  ;", "if    (  ( optionalValue    =  =    null )     |  |     (  !  ( optionalValue . isPresent (  )  )  )  )     {", "row . add ( null )  ;", "} else    {", "Object   value    =    optionalValue . get (  )  ;", "Class <  ?  >    javaType    =    jmxColumn . getColumnType (  )  . getJavaType (  )  ;", "if    ( javaType    =  =     ( boolean . class )  )     {", "if    ( value   instanceof   Boolean )     {", "row . add ( value )  ;", "} else    {", "row . add ( null )  ;", "}", "} else", "if    ( javaType    =  =     ( long . class )  )     {", "if    ( value   instanceof   Number )     {", "row . add (  (  ( Number )     ( value )  )  . longValue (  )  )  ;", "} else    {", "row . add ( null )  ;", "}", "} else", "if    ( javaType    =  =     ( double . class )  )     {", "if    ( value   instanceof   Number )     {", "row . add (  (  ( Number )     ( value )  )  . doubleValue (  )  )  ;", "} else    {", "row . add ( null )  ;", "}", "} else", "if    ( javaType    =  =     ( io . airlift . slice . Slice . class )  )     {", "if    ( value . getClass (  )  . isArray (  )  )     {", "if    (  ( value . getClass (  )  . getComponentType (  )  )     =  =     ( boolean . class )  )     {", "row . add ( toString (  (  ( boolean [  ]  )     ( value )  )  )  )  ;", "} else", "if    (  ( value . getClass (  )  . getComponentType (  )  )     =  =     ( byte . class )  )     {", "row . add ( toString (  (  ( byte [  ]  )     ( value )  )  )  )  ;", "} else", "if    (  ( value . getClass (  )  . getComponentType (  )  )     =  =     ( char . class )  )     {", "row . add ( toString (  (  ( char [  ]  )     ( value )  )  )  )  ;", "} else", "if    (  ( value . getClass (  )  . getComponentType (  )  )     =  =     ( double . class )  )     {", "row . add ( toString (  (  ( double [  ]  )     ( value )  )  )  )  ;", "} else", "if    (  ( value . getClass (  )  . getComponentType (  )  )     =  =     ( float . class )  )     {", "row . add ( toString (  (  ( float [  ]  )     ( value )  )  )  )  ;", "} else", "if    (  ( value . getClass (  )  . getComponentType (  )  )     =  =     ( int . class )  )     {", "row . add ( toString (  (  ( int [  ]  )     ( value )  )  )  )  ;", "} else", "if    (  ( value . getClass (  )  . getComponentType (  )  )     =  =     ( long . class )  )     {", "row . add ( toString (  (  ( long [  ]  )     ( value )  )  )  )  ;", "} else", "if    (  ( value . getClass (  )  . getComponentType (  )  )     =  =     ( short . class )  )     {", "row . add ( toString (  (  ( short [  ]  )     ( value )  )  )  )  ;", "} else    {", "row . add ( toString (  (  ( Object [  ]  )     ( value )  )  )  )  ;", "}", "} else    {", "row . add ( value . toString (  )  )  ;", "}", "}", "}", "}", "}", "return   row ;", "}", "METHOD_END"], "methodName": ["getLiveRow"], "fileName": "com.facebook.presto.connector.jmx.JmxRecordSetProvider"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < List < Object >  >    rows    =    ImmutableList . builder (  )  ;", "for    ( String   objectName    :    tableHandle . getObjectNames (  )  )     {", "rows . add ( getLiveRow ( objectName ,    columns ,     0  )  )  ;", "}", "return   rows . build (  )  ;", "}", "METHOD_END"], "methodName": ["getLiveRows"], "fileName": "com.facebook.presto.connector.jmx.JmxRecordSetProvider"}, {"methodBody": ["METHOD_START", "{", "return   tableHandle ;", "}", "METHOD_END"], "methodName": ["getTableHandle"], "fileName": "com.facebook.presto.connector.jmx.JmxSplit"}, {"methodBody": ["METHOD_START", "{", "return   columnHandles ;", "}", "METHOD_END"], "methodName": ["getColumnHandles"], "fileName": "com.facebook.presto.connector.jmx.JmxTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   objectNames ;", "}", "METHOD_END"], "methodName": ["getObjectNames"], "fileName": "com.facebook.presto.connector.jmx.JmxTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . spi . ConnectorTableMetadata ( tableName ,    ImmutableList . copyOf ( transform ( columnHandles ,    JmxColumnHandle :  : getColumnMetadata )  )  )  ;", "}", "METHOD_END"], "methodName": ["getTableMetadata"], "fileName": "com.facebook.presto.connector.jmx.JmxTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   tableName ;", "}", "METHOD_END"], "methodName": ["getTableName"], "fileName": "com.facebook.presto.connector.jmx.JmxTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   liveData ;", "}", "METHOD_END"], "methodName": ["isLiveData"], "fileName": "com.facebook.presto.connector.jmx.JmxTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   constraint ;", "}", "METHOD_END"], "methodName": ["getConstraint"], "fileName": "com.facebook.presto.connector.jmx.JmxTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "return   table ;", "}", "METHOD_END"], "methodName": ["getTable"], "fileName": "com.facebook.presto.connector.jmx.JmxTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "EquivalenceTester . equivalenceTester (  )  . addEquivalentGroup ( new   JmxColumnHandle (  \" columnName \"  ,    createUnboundedVarcharType (  )  )  ,    new   JmxColumnHandle (  \" columnName \"  ,    createUnboundedVarcharType (  )  )  )  . addEquivalentGroup ( new   JmxColumnHandle (  \" columnNameX \"  ,    createUnboundedVarcharType (  )  )  ,    new   JmxColumnHandle (  \" columnNameX \"  ,    createUnboundedVarcharType (  )  )  )  . addEquivalentGroup ( new   JmxColumnHandle (  \" columnName \"  ,    BIGINT )  ,    new   JmxColumnHandle (  \" columnName \"  ,    BIGINT )  )  . check (  )  ;", "}", "METHOD_END"], "methodName": ["testEquivalence"], "fileName": "com.facebook.presto.connector.jmx.TestJmxColumnHandle"}, {"methodBody": ["METHOD_START", "{", "JmxColumnHandle   handle    =    new   JmxColumnHandle (  \" columnName \"  ,    createUnboundedVarcharType (  )  )  ;", "String   json    =    MetadataUtil . COLUMN _ CODEC . toJson ( handle )  ;", "JmxColumnHandle   copy    =    MetadataUtil . COLUMN _ CODEC . fromJson ( json )  ;", "assertEquals ( copy ,    handle )  ;", "}", "METHOD_END"], "methodName": ["testJsonRoundTrip"], "fileName": "com.facebook.presto.connector.jmx.TestJmxColumnHandle"}, {"methodBody": ["METHOD_START", "{", "ConfigAssertions . assertRecordedDefaults ( ConfigAssertions . recordDefaults ( JmxConnectorConfig . class )  . setDumpTables (  \"  \"  )  . setDumpPeriod ( new   Duration (  1  0  ,    TimeUnit . SECONDS )  )  . setMaxEntries (  (  (  2  4     *     6  0  )     *     6  0  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testDefaults"], "fileName": "com.facebook.presto.connector.jmx.TestJmxConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    properties    =    new   Builder < String ,    String >  (  )  . put (  \" jmx . dump - tables \"  ,     \" table 1  , table \\  \\  , with \\  \\  , commas \"  )  . put (  \" jmx . dump - period \"  ,     \"  1 s \"  )  . put (  \" jmx . max - entries \"  ,     \"  1  0  0  \"  )  . build (  )  ;", "expected    =    new    (  )  . setDumpTables ( ImmutableSet . of (  \" table 1  \"  ,     \" table , with , commas \"  )  )  . setDumpPeriod ( new   Duration (  1  ,    TimeUnit . SECONDS )  )  . setMaxEntries (  1  0  0  )  ;", "ConfigAssertions . assertFullMapping ( properties ,    expected )  ;", "ConfigAssertions . assertDeprecatedEquivalence (  . class ,    properties )  ;", "}", "METHOD_END"], "methodName": ["testExplicitPropertyMappings"], "fileName": "com.facebook.presto.connector.jmx.TestJmxConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "JmxHistoricalData   jmxHistoricalData    =    new   JmxHistoricalData ( TestJmxHistoricalData . MAX _ ENTRIES ,    ImmutableSet . of ( TestJmxHistoricalData . TABLE _ NAME )  )  ;", "List < Integer >    bothColumns    =    ImmutableList . of (  0  ,     1  )  ;", "List < Integer >    secondColumn    =    ImmutableList . of (  1  )  ;", "assertEquals ( jmxHistoricalData . getRows ( TestJmxHistoricalData . TABLE _ NAME ,    bothColumns )  ,    ImmutableList . of (  )  )  ;", "jmxHistoricalData . addRow ( TestJmxHistoricalData . TABLE _ NAME ,    ImmutableList . of (  4  2  ,     \" ala \"  )  )  ;", "assertEquals ( jmxHistoricalData . getRows ( TestJmxHistoricalData . TABLE _ NAME ,    bothColumns )  ,    ImmutableList . of ( ImmutableList .  < Object > of (  4  2  ,     \" ala \"  )  )  )  ;", "assertEquals ( jmxHistoricalData . getRows ( TestJmxHistoricalData . TABLE _ NAME ,    secondColumn )  ,    ImmutableList . of ( ImmutableList .  < Object > of (  \" ala \"  )  )  )  ;", "assertEquals ( jmxHistoricalData . getRows ( TestJmxHistoricalData . NOT _ EXISTING _ TABLE _ NAME ,    bothColumns )  ,    ImmutableList . of (  )  )  ;", "jmxHistoricalData . addRow ( TestJmxHistoricalData . TABLE _ NAME ,    ImmutableList . of (  4  2  ,     \" ala \"  )  )  ;", "jmxHistoricalData . addRow ( TestJmxHistoricalData . TABLE _ NAME ,    ImmutableList . of (  4  2  ,     \" ala \"  )  )  ;", "jmxHistoricalData . addRow ( TestJmxHistoricalData . TABLE _ NAME ,    ImmutableList . of (  4  2  ,     \" ala \"  )  )  ;", "assertEquals ( jmxHistoricalData . getRows ( TestJmxHistoricalData . TABLE _ NAME ,    bothColumns )  . size (  )  ,    TestJmxHistoricalData . MAX _ ENTRIES )  ;", "}", "METHOD_END"], "methodName": ["testAddingRows"], "fileName": "com.facebook.presto.connector.jmx.TestJmxHistoricalData"}, {"methodBody": ["METHOD_START", "{", "JmxHistoricalData   jmxHistoricalData    =    new   JmxHistoricalData ( TestJmxHistoricalData . MAX _ ENTRIES ,    ImmutableSet . of ( TestJmxHistoricalData . TABLE _ NAME . toUpperCase (  )  )  )  ;", "List < Integer >    columns    =    ImmutableList . of (  0  )  ;", "assertEquals ( jmxHistoricalData . getRows ( TestJmxHistoricalData . TABLE _ NAME ,    columns )  ,    ImmutableList . of (  )  )  ;", "assertEquals ( jmxHistoricalData . getRows ( TestJmxHistoricalData . TABLE _ NAME . toUpperCase (  )  ,    columns )  ,    ImmutableList . of (  )  )  ;", "jmxHistoricalData . addRow ( TestJmxHistoricalData . TABLE _ NAME ,    ImmutableList . of (  4  2  )  )  ;", "jmxHistoricalData . addRow ( TestJmxHistoricalData . TABLE _ NAME . toUpperCase (  )  ,    ImmutableList . of (  4  4  )  )  ;", "assertEquals ( jmxHistoricalData . getRows ( TestJmxHistoricalData . TABLE _ NAME ,    columns )  ,    ImmutableList . of ( ImmutableList .  < Object > of (  4  2  )  ,    ImmutableList .  < Object > of (  4  4  )  )  )  ;", "assertEquals ( jmxHistoricalData . getRows ( TestJmxHistoricalData . TABLE _ NAME . toUpperCase (  )  ,    columns )  ,    ImmutableList . of ( ImmutableList .  < Object > of (  4  2  )  ,    ImmutableList .  < Object > of (  4  4  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testCaseInsensitive"], "fileName": "com.facebook.presto.connector.jmx.TestJmxHistoricalData"}, {"methodBody": ["METHOD_START", "{", "JmxTableHandle   handle    =    metadata . getTableHandle ( SESSION ,    new   SchemaTableName ( JmxMetadata . JMX _ SCHEMA _ NAME ,     \" lang :  *  \"  )  )  ;", "assertTrue ( handle . getObjectNames (  )  . contains (  . RUNTIME _ OBJECT )  )  ;", "assertTrue (  (  ( handle . getObjectNames (  )  . size (  )  )     >     1  )  )  ;", "List < JmxColumnHandle >    columns    =    handle . getColumnHandles (  )  ;", "assertTrue ( columns . contains ( new   JmxColumnHandle (  \" node \"  ,    createUnboundedVarcharType (  )  )  )  )  ;", "assertTrue ( columns . contains ( new   JmxColumnHandle (  \" object _ name \"  ,    createUnboundedVarcharType (  )  )  )  )  ;", "assertTrue ( columns . contains ( new   JmxColumnHandle (  \" Name \"  ,    createUnboundedVarcharType (  )  )  )  )  ;", "assertTrue ( columns . contains ( new   JmxColumnHandle (  \" StartTime \"  ,    BIGINT )  )  )  ;", "assertTrue ( metadata . getTableHandle ( SESSION ,    new   SchemaTableName ( JmxMetadata . JMX _ SCHEMA _ NAME ,     \"  * lang : type = Runtime *  \"  )  )  . getObjectNames (  )  . contains (  . RUNTIME _ OBJECT )  )  ;", "assertTrue ( metadata . getTableHandle ( SESSION ,    new   SchemaTableName ( JmxMetadata . JMX _ SCHEMA _ NAME ,     \" lang :  *  = Runtime \"  )  )  . getObjectNames (  )  . contains (  . RUNTIME _ OBJECT )  )  ;", "assertTrue ( metadata . getTableHandle ( SESSION ,    new   SchemaTableName ( JmxMetadata . JMX _ SCHEMA _ NAME ,     \"  *  \"  )  )  . getObjectNames (  )  . contains (  . RUNTIME _ OBJECT )  )  ;", "assertTrue ( metadata . getTableHandle ( SESSION ,    new   SchemaTableName ( JmxMetadata . JMX _ SCHEMA _ NAME ,     \"  *  :  *  \"  )  )  . getObjectNames (  )  . contains (  . RUNTIME _ OBJECT )  )  ;", "}", "METHOD_END"], "methodName": ["testGetCumulativeTableHandle"], "fileName": "com.facebook.presto.connector.jmx.TestJmxMetadata"}, {"methodBody": ["METHOD_START", "{", "JmxTableHandle   handle    =    metadata . getTableHandle ( SESSION ,    TestJmxMetadata . RUNTIME _ TABLE )  ;", "assertEquals ( handle . getObjectNames (  )  ,    ImmutableList . of ( TestJmxMetadata . RUNTIME _ OBJECT )  )  ;", "List < JmxColumnHandle >    columns    =    handle . getColumnHandles (  )  ;", "assertTrue ( columns . contains ( new   JmxColumnHandle (  \" node \"  ,    createUnboundedVarcharType (  )  )  )  )  ;", "assertTrue ( columns . contains ( new   JmxColumnHandle (  \" Name \"  ,    createUnboundedVarcharType (  )  )  )  )  ;", "assertTrue ( columns . contains ( new   JmxColumnHandle (  \" StartTime \"  ,    BIGINT )  )  )  ;", "}", "METHOD_END"], "methodName": ["testGetTableHandle"], "fileName": "com.facebook.presto.connector.jmx.TestJmxMetadata"}, {"methodBody": ["METHOD_START", "{", "JmxTableHandle   handle    =    metadata . getTableHandle ( SESSION ,    TestJmxMetadata . RUNTIME _ HISTORY _ TABLE )  ;", "assertEquals ( handle . getObjectNames (  )  ,    ImmutableList . of ( TestJmxMetadata . RUNTIME _ OBJECT )  )  ;", "List < JmxColumnHandle >    columns    =    handle . getColumnHandles (  )  ;", "assertTrue ( columns . contains ( new   JmxColumnHandle (  \" timestamp \"  ,    TIMESTAMP )  )  )  ;", "assertTrue ( columns . contains ( new   JmxColumnHandle (  \" node \"  ,    createUnboundedVarcharType (  )  )  )  )  ;", "assertTrue ( columns . contains ( new   JmxColumnHandle (  \" Name \"  ,    createUnboundedVarcharType (  )  )  )  )  ;", "assertTrue ( columns . contains ( new   JmxColumnHandle (  \" StartTime \"  ,    BIGINT )  )  )  ;", "}", "METHOD_END"], "methodName": ["testGetTimeTableHandle"], "fileName": "com.facebook.presto.connector.jmx.TestJmxMetadata"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( metadata . listSchemaNames ( SESSION )  ,    ImmutableList . of ( JmxMetadata . JMX _ SCHEMA _ NAME ,    JmxMetadata . HISTORY _ SCHEMA _ NAME )  )  ;", "}", "METHOD_END"], "methodName": ["testListSchemas"], "fileName": "com.facebook.presto.connector.jmx.TestJmxMetadata"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( metadata . listTables ( SESSION ,    JmxMetadata . JMX _ SCHEMA _ NAME )  . contains ( TestJmxMetadata . RUNTIME _ TABLE )  )  ;", "assertTrue ( metadata . listTables ( SESSION ,    JmxMetadata . HISTORY _ SCHEMA _ NAME )  . contains ( TestJmxMetadata . RUNTIME _ HISTORY _ TABLE )  )  ;", "}", "METHOD_END"], "methodName": ["testListTables"], "fileName": "com.facebook.presto.connector.jmx.TestJmxMetadata"}, {"methodBody": ["METHOD_START", "{", "String   name    =    TestJmxQueries . STANDARD _ NAMES . iterator (  )  . next (  )  ;", "MaterializedResult   actual    =    computeActual (  \" SELECT   node _ id   FROM   system . runtime . nodes \"  )  ;", "MaterializedResult   expected    =    computeActual ( String . format (  \" SELECT   DISTINCT   node   FROM    \\  \"  % s \\  \"  \"  ,    name )  )  ;", "assertEqualsIgnoreOrder ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testNodeCount"], "fileName": "com.facebook.presto.connector.jmx.TestJmxQueries"}, {"methodBody": ["METHOD_START", "{", "assertEqualsIgnoreOrder ( computeActual (  \" SELECT   node   FROM    \\  \" nio : type = bufferpool , name = direct \\  \"  \"  )  ,    computeActual (  \" SELECT   node   FROM    \\  \" nio : name = direct , type = bufferpool \\  \"  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testOrderOfParametersIsIgnored"], "fileName": "com.facebook.presto.connector.jmx.TestJmxQueries"}, {"methodBody": ["METHOD_START", "{", "for    ( String   name    :    TestJmxQueries . STANDARD _ NAMES )     {", "computeActual ( String . format (  \" SELECT    *    FROM    \\  \"  % s \\  \"  \"  ,    name )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testQuery"], "fileName": "com.facebook.presto.connector.jmx.TestJmxQueries"}, {"methodBody": ["METHOD_START", "{", "computeActual (  \" SELECT    *    FROM    \\  \"  *  :  *  \\  \"  \"  )  ;", "computeActual (  \" SELECT    *    FROM    \\  \" logging :  *  \\  \"  \"  )  ;", "assertTrue (  (  ( computeActual (  \" SELECT    *    FROM    \\  \" lang :  *  \\  \"  \"  )  . getRowCount (  )  )     >     1  )  )  ;", "assertTrue (  (  ( computeActual (  \" SELECT    *    FROM    \\  \" jAVA . LANg :  *  \\  \"  \"  )  . getRowCount (  )  )     >     1  )  )  ;", "}", "METHOD_END"], "methodName": ["testQueryCumulativeTable"], "fileName": "com.facebook.presto.connector.jmx.TestJmxQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   result    =    computeActual (  \" SHOW   SCHEMAS \"  )  ;", "assertEquals ( result . getOnlyColumnAsSet (  )  ,    ImmutableSet . of ( INFORMATION _ SCHEMA ,    JmxMetadata . JMX _ SCHEMA _ NAME ,    JmxMetadata . HISTORY _ SCHEMA _ NAME )  )  ;", "}", "METHOD_END"], "methodName": ["testShowSchemas"], "fileName": "com.facebook.presto.connector.jmx.TestJmxQueries"}, {"methodBody": ["METHOD_START", "{", "Set < String >    standardNamesLower    =    TestJmxQueries . STANDARD _ NAMES . stream (  )  . map ( String :  : toLowerCase )  . collect ( toImmutableSet (  )  )  ;", "MaterializedResult   result    =    computeActual (  \" SHOW   TABLES \"  )  ;", "assertTrue ( result . getOnlyColumnAsSet (  )  . containsAll ( standardNamesLower )  )  ;", "}", "METHOD_END"], "methodName": ["testShowTables"], "fileName": "com.facebook.presto.connector.jmx.TestJmxQueries"}, {"methodBody": ["METHOD_START", "{", "String   json    =    MetadataUtil . SPLIT _ CODEC . toJson ( TestJmxSplit . SPLIT )  ;", "JmxSplit   copy    =    MetadataUtil . SPLIT _ CODEC . fromJson ( json )  ;", "assertEquals ( copy . getTableHandle (  )  ,    TestJmxSplit . SPLIT . getTableHandle (  )  )  ;", "assertEquals ( copy . getAddresses (  )  ,    TestJmxSplit . SPLIT . getAddresses (  )  )  ;", "assertSame ( copy . getInfo (  )  ,    copy )  ;", "assertEquals ( copy . isRemotelyAccessible (  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["testJsonRoundTrip"], "fileName": "com.facebook.presto.connector.jmx.TestJmxSplit"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( TestJmxSplit . SPLIT . getTableHandle (  )  ,    TestJmxTableHandle . TABLE )  ;", "assertEquals ( TestJmxSplit . SPLIT . getAddresses (  )  ,    TestJmxSplit . ADDRESSES )  ;", "assertSame ( TestJmxSplit . SPLIT . getInfo (  )  ,    TestJmxSplit . SPLIT )  ;", "assertEquals ( TestJmxSplit . SPLIT . isRemotelyAccessible (  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["testSplit"], "fileName": "com.facebook.presto.connector.jmx.TestJmxSplit"}, {"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . metadata . PrestoNode ( hostname ,    URI . create ( String . format (  \" http :  /  /  % s :  8  0  8  0  \"  ,    hostname )  )  ,    NodeVersion . UNKNOWN ,    false )  ;", "}", "METHOD_END"], "methodName": ["createTestingNode"], "fileName": "com.facebook.presto.connector.jmx.TestJmxSplitManager"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < ConnectorSplit >    splits    =    ImmutableList . builder (  )  ;", "while    (  !  ( splitSource . isFinished (  )  )  )     {", "splits . addAll ( splitSource . getNextBatch ( NOT _ PARTITIONED ,     1  0  0  0  )  . get (  )  . getSplits (  )  )  ;", "}", "return   splits . build (  )  ;", "}", "METHOD_END"], "methodName": ["getAllSplits"], "fileName": "com.facebook.presto.connector.jmx.TestJmxSplitManager"}, {"methodBody": ["METHOD_START", "{", "JmxTableHandle   tableHandle    =    metadata . getTableHandle ( SESSION ,    schemaTableName )  ;", "List < ColumnHandle >    columnHandles    =    ImmutableList . copyOf ( metadata . getColumnHandles ( SESSION ,    tableHandle )  . values (  )  )  ;", "ConnectorTableLayoutHandle   layout    =    new   JmxTableLayoutHandle ( tableHandle ,    TupleDomain . all (  )  )  ;", "ConnectorSplitSource   splitSource    =    splitManager . getSplits ( JmxTransactionHandle . INSTANCE ,    SESSION ,    layout ,    UNGROUPED _ SCHEDULING )  ;", "List < ConnectorSplit >    allSplits    =     . getAllSplits ( splitSource )  ;", "assertEquals ( allSplits . size (  )  ,    nodes . size (  )  )  ;", "ConnectorSplit   split    =    allSplits . get (  0  )  ;", "return   recordSetProvider . getRecordSet ( JmxTransactionHandle . INSTANCE ,    SESSION ,    split ,    columnHandles )  ;", "}", "METHOD_END"], "methodName": ["getRecordSet"], "fileName": "com.facebook.presto.connector.jmx.TestJmxSplitManager"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < Long >    result    =    ImmutableList . builder (  )  ;", "try    ( RecordCursor   cursor    =    recordSet . cursor (  )  )     {", "while    ( cursor . advanceNextPosition (  )  )     {", "for    ( int   i    =     0  ;    i    <     ( recordSet . getColumnTypes (  )  . size (  )  )  ;    i +  +  )     {", "cursor . isNull ( i )  ;", "}", "if    ( cursor . isNull (  0  )  )     {", "return   result . build (  )  ;", "}", "assertTrue (  (  ( recordSet . getColumnTypes (  )  . get (  0  )  )    instanceof   TimestampType )  )  ;", "result . add ( cursor . getLong (  0  )  )  ;", "}", "}", "return   result . build (  )  ;", "}", "METHOD_END"], "methodName": ["readTimeStampsFrom"], "fileName": "com.facebook.presto.connector.jmx.TestJmxSplitManager"}, {"methodBody": ["METHOD_START", "{", "jmxConnector . shutdown (  )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.connector.jmx.TestJmxSplitManager"}, {"methodBody": ["METHOD_START", "{", "for    ( SchemaTableName   schemaTableName    :    metadata . listTables ( SESSION ,    JmxMetadata . HISTORY _ SCHEMA _ NAME )  )     {", "List < Long >    timeStamps    =    ImmutableList . of (  )  ;", "for    ( int   waited    =     0  ;    waited    <     (  . TIMEOUT _ TIME )  ;    waited    +  =     . SLEEP _ TIME )     {", "RecordSet   recordSet    =    getRecordSet ( schemaTableName )  ;", "timeStamps    =    readTimeStampsFrom ( recordSet )  ;", "if    (  ( timeStamps . size (  )  )     >  =     2  )     {", "break ;", "}", "Thread . sleep (  . SLEEP _ TIME )  ;", "}", "assertTrue (  (  ( timeStamps . size (  )  )     >  =     2  )  )  ;", "assertTrue (  (  (  ( timeStamps . get (  1  )  )     -     ( timeStamps . get (  0  )  )  )     >  =     (  . JMX _ STATS _ DUMP . toMillis (  )  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testHistoryRecordSetProvider"], "fileName": "com.facebook.presto.connector.jmx.TestJmxSplitManager"}, {"methodBody": ["METHOD_START", "{", "ConnectorTableLayoutHandle   layout    =    new   JmxTableLayoutHandle ( tableHandle ,    TupleDomain . all (  )  )  ;", "ConnectorSplitSource   splitSource    =    splitManager . getSplits ( JmxTransactionHandle . INSTANCE ,    SESSION ,    layout ,    UNGROUPED _ SCHEDULING )  ;", "List < ConnectorSplit >    allSplits    =     . getAllSplits ( splitSource )  ;", "assertEquals ( allSplits . size (  )  ,    nodes . size (  )  )  ;", "Set < String >    actualNodes    =    nodes . stream (  )  . map ( Node :  : getNodeIdentifier )  . collect ( Collectors . toSet (  )  )  ;", "Set < String >    expectedNodes    =    new   HashSet <  >  (  )  ;", "for    ( ConnectorSplit   split    :    allSplits )     {", "List < HostAddress >    addresses    =    split . getAddresses (  )  ;", "assertEquals ( addresses . size (  )  ,     1  )  ;", "expectedNodes . add ( addresses . get (  0  )  . getHostText (  )  )  ;", "}", "assertEquals ( actualNodes ,    expectedNodes )  ;", "}", "METHOD_END"], "methodName": ["testNoPredicate"], "fileName": "com.facebook.presto.connector.jmx.TestJmxSplitManager"}, {"methodBody": ["METHOD_START", "{", "for    ( Node   node    :    nodes )     {", "String   nodeIdentifier    =    node . getNodeIdentifier (  )  ;", "TupleDomain < ColumnHandle >    nodeTupleDomain    =    TupleDomain . fromFixedValues ( ImmutableMap . of ( columnHandle ,    NullableValue . of ( createUnboundedVarcharType (  )  ,    Slices . utf 8 Slice ( nodeIdentifier )  )  )  )  ;", "ConnectorTableLayoutHandle   layout    =    new   JmxTableLayoutHandle ( tableHandle ,    nodeTupleDomain )  ;", "ConnectorSplitSource   splitSource    =    splitManager . getSplits ( JmxTransactionHandle . INSTANCE ,    SESSION ,    layout ,    UNGROUPED _ SCHEDULING )  ;", "List < ConnectorSplit >    allSplits    =     . getAllSplits ( splitSource )  ;", "assertEquals ( allSplits . size (  )  ,     1  )  ;", "assertEquals ( allSplits . get (  0  )  . getAddresses (  )  . size (  )  ,     1  )  ;", "assertEquals ( allSplits . get (  0  )  . getAddresses (  )  . get (  0  )  . getHostText (  )  ,    nodeIdentifier )  ;", "}", "}", "METHOD_END"], "methodName": ["testPredicatePushdown"], "fileName": "com.facebook.presto.connector.jmx.TestJmxSplitManager"}, {"methodBody": ["METHOD_START", "{", "for    ( SchemaTableName   schemaTableName    :    metadata . listTables ( SESSION ,    JmxMetadata . JMX _ SCHEMA _ NAME )  )     {", "RecordSet   recordSet    =    getRecordSet ( schemaTableName )  ;", "try    ( RecordCursor   cursor    =    recordSet . cursor (  )  )     {", "while    ( cursor . advanceNextPosition (  )  )     {", "for    ( int   i    =     0  ;    i    <     ( recordSet . getColumnTypes (  )  . size (  )  )  ;    i +  +  )     {", "cursor . isNull ( i )  ;", "}", "}", "}", "}", "}", "METHOD_END"], "methodName": ["testRecordSetProvider"], "fileName": "com.facebook.presto.connector.jmx.TestJmxSplitManager"}, {"methodBody": ["METHOD_START", "{", "List < JmxColumnHandle >    singleColumn    =    ImmutableList . of ( TestJmxTableHandle . COLUMNS . get (  0  )  )  ;", "EquivalenceTester . equivalenceTester (  )  . addEquivalentGroup ( new   JmxTableHandle ( TestJmxTableHandle . SCHEMA _ TABLE _ NAME ,    ImmutableList . of (  \" name \"  )  ,    TestJmxTableHandle . COLUMNS ,    true )  ,    new   JmxTableHandle ( TestJmxTableHandle . SCHEMA _ TABLE _ NAME ,    ImmutableList . of (  \" name \"  )  ,    TestJmxTableHandle . COLUMNS ,    true )  )  . addEquivalentGroup ( new   JmxTableHandle ( TestJmxTableHandle . SCHEMA _ TABLE _ NAME ,    ImmutableList . of (  \" name \"  )  ,    TestJmxTableHandle . COLUMNS ,    false )  ,    new   JmxTableHandle ( TestJmxTableHandle . SCHEMA _ TABLE _ NAME ,    ImmutableList . of (  \" name \"  )  ,    TestJmxTableHandle . COLUMNS ,    false )  )  . addEquivalentGroup ( new   JmxTableHandle ( TestJmxTableHandle . SCHEMA _ TABLE _ NAME ,    ImmutableList . of (  \" nameX \"  )  ,    TestJmxTableHandle . COLUMNS ,    true )  ,    new   JmxTableHandle ( TestJmxTableHandle . SCHEMA _ TABLE _ NAME ,    ImmutableList . of (  \" nameX \"  )  ,    TestJmxTableHandle . COLUMNS ,    true )  )  . addEquivalentGroup ( new   JmxTableHandle ( TestJmxTableHandle . SCHEMA _ TABLE _ NAME ,    ImmutableList . of (  \" nameX \"  )  ,    TestJmxTableHandle . COLUMNS ,    false )  ,    new   JmxTableHandle ( TestJmxTableHandle . SCHEMA _ TABLE _ NAME ,    ImmutableList . of (  \" nameX \"  )  ,    TestJmxTableHandle . COLUMNS ,    false )  )  . addEquivalentGroup ( new   JmxTableHandle ( TestJmxTableHandle . SCHEMA _ TABLE _ NAME ,    ImmutableList . of (  \" name \"  )  ,    singleColumn ,    true )  ,    new   JmxTableHandle ( TestJmxTableHandle . SCHEMA _ TABLE _ NAME ,    ImmutableList . of (  \" name \"  )  ,    singleColumn ,    true )  )  . addEquivalentGroup ( new   JmxTableHandle ( TestJmxTableHandle . SCHEMA _ TABLE _ NAME ,    ImmutableList . of (  \" name \"  )  ,    singleColumn ,    false )  ,    new   JmxTableHandle ( TestJmxTableHandle . SCHEMA _ TABLE _ NAME ,    ImmutableList . of (  \" name \"  )  ,    singleColumn ,    false )  )  . check (  )  ;", "}", "METHOD_END"], "methodName": ["testEquivalence"], "fileName": "com.facebook.presto.connector.jmx.TestJmxTableHandle"}, {"methodBody": ["METHOD_START", "{", "String   json    =    MetadataUtil . TABLE _ CODEC . toJson ( TestJmxTableHandle . TABLE )  ;", "JmxTableHandle   copy    =    MetadataUtil . TABLE _ CODEC . fromJson ( json )  ;", "assertEquals ( copy ,    TestJmxTableHandle . TABLE )  ;", "}", "METHOD_END"], "methodName": ["testJsonRoundTrip"], "fileName": "com.facebook.presto.connector.jmx.TestJmxTableHandle"}]