[{"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.atop.AtopColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   concurrentReadersPerNode ;", "}", "METHOD_END"], "methodName": ["getConcurrentReadersPerNode"], "fileName": "com.facebook.presto.atop.AtopConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "return   executablePath ;", "}", "METHOD_END"], "methodName": ["getExecutablePath"], "fileName": "com.facebook.presto.atop.AtopConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "return   maxHistoryDays ;", "}", "METHOD_END"], "methodName": ["getMaxHistoryDays"], "fileName": "com.facebook.presto.atop.AtopConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "return   readTimeout ;", "}", "METHOD_END"], "methodName": ["getReadTimeout"], "fileName": "com.facebook.presto.atop.AtopConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "return   security ;", "}", "METHOD_END"], "methodName": ["getSecurity"], "fileName": "com.facebook.presto.atop.AtopConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "return   timeZone ;", "}", "METHOD_END"], "methodName": ["getTimeZone"], "fileName": "com.facebook.presto.atop.AtopConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "return   ZoneId . of ( timeZone )  ;", "}", "METHOD_END"], "methodName": ["getTimeZoneId"], "fileName": "com.facebook.presto.atop.AtopConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "this . concurrentReadersPerNode    =    readers ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setConcurrentReadersPerNode"], "fileName": "com.facebook.presto.atop.AtopConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "this . executablePath    =    path ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setExecutablePath"], "fileName": "com.facebook.presto.atop.AtopConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "this . maxHistoryDays    =    maxHistoryDays ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setMaxHistoryDays"], "fileName": "com.facebook.presto.atop.AtopConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "this . readTimeout    =    timeout ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setReadTimeout"], "fileName": "com.facebook.presto.atop.AtopConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "this . security    =    security ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setSecurity"], "fileName": "com.facebook.presto.atop.AtopConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "this . timeZone    =    id ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setTimeZone"], "fileName": "com.facebook.presto.atop.AtopConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "com.facebook.presto.atop.AtopConnectorId"}, {"methodBody": ["METHOD_START", "{", "return   firstNonNull ( Thread . currentThread (  )  . getContextClassLoader (  )  ,    AtopPlugin . class . getClassLoader (  )  )  ;", "}", "METHOD_END"], "methodName": ["getClassLoader"], "fileName": "com.facebook.presto.atop.AtopPlugin"}, {"methodBody": ["METHOD_START", "{", "executor . shutdownNow (  )  ;", "}", "METHOD_END"], "methodName": ["shutdown"], "fileName": "com.facebook.presto.atop.AtopProcessFactory"}, {"methodBody": ["METHOD_START", "{", "return   date ;", "}", "METHOD_END"], "methodName": ["getDate"], "fileName": "com.facebook.presto.atop.AtopSplit"}, {"methodBody": ["METHOD_START", "{", "return   date . toEpochSecond (  )  ;", "}", "METHOD_END"], "methodName": ["getEpochSeconds"], "fileName": "com.facebook.presto.atop.AtopSplit"}, {"methodBody": ["METHOD_START", "{", "return   host ;", "}", "METHOD_END"], "methodName": ["getHost"], "fileName": "com.facebook.presto.atop.AtopSplit"}, {"methodBody": ["METHOD_START", "{", "return   table ;", "}", "METHOD_END"], "methodName": ["getTable"], "fileName": "com.facebook.presto.atop.AtopSplit"}, {"methodBody": ["METHOD_START", "{", "return   date . getZone (  )  ;", "}", "METHOD_END"], "methodName": ["getTimeZone"], "fileName": "com.facebook.presto.atop.AtopSplit"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < AtopTable . AtopColumn >    columns    =    ImmutableList . builder (  )  ;", "columns . add ( AtopTable . AtopColumn . HOST _ IP )  ;", "columns . add ( AtopTable . AtopColumn . START _ TIME )  ;", "columns . add ( AtopTable . AtopColumn . END _ TIME )  ;", "columns . addAll ( Arrays . asList ( additionalColumns )  )  ;", "return   columns . build (  )  ;", "}", "METHOD_END"], "methodName": ["baseColumnsAnd"], "fileName": "com.facebook.presto.atop.AtopTable"}, {"methodBody": ["METHOD_START", "{", "return   atopLabel ;", "}", "METHOD_END"], "methodName": ["getAtopLabel"], "fileName": "com.facebook.presto.atop.AtopTable"}, {"methodBody": ["METHOD_START", "{", "return   columnIndex . get ( name )  ;", "}", "METHOD_END"], "methodName": ["getColumn"], "fileName": "com.facebook.presto.atop.AtopTable"}, {"methodBody": ["METHOD_START", "{", "return   columns ;", "}", "METHOD_END"], "methodName": ["getColumns"], "fileName": "com.facebook.presto.atop.AtopTable"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.atop.AtopTable"}, {"methodBody": ["METHOD_START", "{", "return   schema ;", "}", "METHOD_END"], "methodName": ["getSchema"], "fileName": "com.facebook.presto.atop.AtopTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   table ;", "}", "METHOD_END"], "methodName": ["getTable"], "fileName": "com.facebook.presto.atop.AtopTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   endTimeConstraint ;", "}", "METHOD_END"], "methodName": ["getEndTimeConstraint"], "fileName": "com.facebook.presto.atop.AtopTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "return   startTimeConstraint ;", "}", "METHOD_END"], "methodName": ["getStartTimeConstraint"], "fileName": "com.facebook.presto.atop.AtopTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "return   tableHandle ;", "}", "METHOD_END"], "methodName": ["getTableHandle"], "fileName": "com.facebook.presto.atop.AtopTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "return   LocalAtopQueryRunner . createQueryRunner ( ImmutableMap . of (  )  ,    TestingAtopFactory . class )  ;", "}", "METHOD_END"], "methodName": ["createQueryRunner"], "fileName": "com.facebook.presto.atop.LocalAtopQueryRunner"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    testSessionBuilder (  )  . setCatalog (  \" atop \"  )  . setSchema (  \" default \"  )  . setTimeZoneKey ( TimeZoneKey . getTimeZoneKey ( TimeZone . getDefault (  )  . getID (  )  )  )  . build (  )  ;", "LocalQueryRunner   queryRunner    =    new   LocalQueryRunner ( session )  ;", "try    {", "AtopConnectorFactory   connectorFactory    =    new   AtopConnectorFactory ( factoryClass ,     . class . getClassLoader (  )  )  ;", "Builder < String ,    String >    properties    =    ImmutableMap .  < String ,    String > builder (  )  . putAll ( catalogProperties )  . put (  \" atop . max - history - days \"  ,     \"  1  \"  )  ;", "queryRunner . createCatalog (  \" atop \"  ,    connectorFactory ,    properties . build (  )  )  ;", "return   queryRunner ;", "}    catch    ( Exception   e )     {", "Closeables . closeAllSuppress ( e ,    queryRunner )  ;", "throw   e ;", "}", "}", "METHOD_END"], "methodName": ["createQueryRunner"], "fileName": "com.facebook.presto.atop.LocalAtopQueryRunner"}, {"methodBody": ["METHOD_START", "{", "ConfigAssertions . assertRecordedDefaults ( ConfigAssertions . recordDefaults ( AtopConnectorConfig . class )  . setExecutablePath (  \" atop \"  )  . setConcurrentReadersPerNode (  1  )  . setSecurity ( AtopConnectorConfig . SECURITY _ NONE )  . setReadTimeout ( new   Duration (  5  ,    TimeUnit . MINUTES )  )  . setMaxHistoryDays (  3  0  )  . setTimeZone ( TimeZone . getDefault (  )  . getID (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testDefaults"], "fileName": "com.facebook.presto.atop.TestAtopConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    properties    =    new   Builder < String ,    String >  (  )  . put (  \" atop . executable - path \"  ,     \"  / test / atop \"  )  . put (  \" atop . concurrent - readers - per - node \"  ,     \"  1  0  \"  )  . put (  \" atop . executable - read - timeout \"  ,     \"  1 m \"  )  . put (  \" atop . security \"  ,     \" file \"  )  . put (  \" atop . max - history - days \"  ,     \"  1  0  \"  )  . put (  \" atop . time - zone \"  ,     \" PST \"  )  . build (  )  ;", "expected    =    new    (  )  . setExecutablePath (  \"  / test / atop \"  )  . setConcurrentReadersPerNode (  1  0  )  . setSecurity (  . SECURITY _ FILE )  . setReadTimeout ( new   Duration (  1  ,    TimeUnit . MINUTES )  )  . setMaxHistoryDays (  1  0  )  . setTimeZone (  \" PST \"  )  ;", "ConfigAssertions . assertFullMapping ( properties ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testExplicitPropertyMappings"], "fileName": "com.facebook.presto.atop.TestAtopConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "byte [  ]    bytes    =    toByteArray ( Resources . getResource ( getClass (  )  ,    name )  )  ;", "Path   path    =    target . toPath (  )  . olve ( new   File ( name )  . getName (  )  )  ;", "Files . write ( path ,    bytes )  ;", "if    (  !  ( path . toFile (  )  . setExecutable ( true )  )  )     {", "throw   new   IOException (  (  \" failed   to   make   executable :     \"     +    path )  )  ;", "}", "}", "METHOD_END"], "methodName": ["copyExecutable"], "fileName": "com.facebook.presto.atop.TestAtopHang"}, {"methodBody": ["METHOD_START", "{", "File   tempPath    =    createTempDir (  )  ;", "copyExecutable (  \" hanging _ sh \"  ,    tempPath )  ;", "queryRunner    =    LocalAtopQueryRunner . createQueryRunner ( ImmutableMap . of (  \" executable - path \"  ,     ( tempPath    +     \"  / hanging _ sh \"  )  ,     \" executable - read - timeout \"  ,     \"  1 s \"  )  ,    AtopProcessFactory . class )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.atop.TestAtopHang"}, {"methodBody": ["METHOD_START", "{", "queryRunner . close (  )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.atop.TestAtopHang"}, {"methodBody": ["METHOD_START", "{", "try    {", "queryRunner . execute (  \" SELECT    *    FROM   disks \"  )  ;", "fail (  )  ;", "}    catch    ( PException   e )     {", "assertEquals ( e . getErrorCode (  )  ,    AtopErrorCode . ATOP _ READ _ TIMEOUT . toErrorCode (  )  ,    e . getMessage (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testTimeout"], "fileName": "com.facebook.presto.atop.TestAtopHang"}, {"methodBody": ["METHOD_START", "{", "AtopPlugin   plugin    =    new   AtopPlugin (  )  ;", "Assertions . assertInstanceOf ( getOnlyElement ( plugin . getConnectorFactories (  )  )  ,    AtopConnectorFactory . class )  ;", "}", "METHOD_END"], "methodName": ["testGetConnectorFactory"], "fileName": "com.facebook.presto.atop.TestAtopPlugin"}, {"methodBody": ["METHOD_START", "{", "return   testSessionBuilder (  )  . setCatalog ( queryRunner . getDefaultSession (  )  . getCatalog (  )  . get (  )  )  . setSchema ( queryRunner . getDefaultSession (  )  . getSchema (  )  . get (  )  )  . setIdentity ( new   Identity ( user ,    Optional . empty (  )  )  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["getSession"], "fileName": "com.facebook.presto.atop.TestAtopSecurity"}, {"methodBody": ["METHOD_START", "{", "String   path    =    this . getClass (  )  . getResource (  \" security . json \"  )  . getPath (  )  ;", "queryRunner    =    LocalAtopQueryRunner . createQueryRunner ( ImmutableMap . of (  \" atop . security \"  ,     \" file \"  ,     \" security . config - file \"  ,    path )  ,    TestingAtopFactory . class )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.atop.TestAtopSecurity"}, {"methodBody": ["METHOD_START", "{", "queryRunner . close (  )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.atop.TestAtopSecurity"}, {"methodBody": ["METHOD_START", "{", "Session   admin    =    getSession (  \" admin \"  )  ;", "queryRunner . exte ( admin ,     \" SELECT    *    FROM   disks \"  )  ;", "}", "METHOD_END"], "methodName": ["testAdminCanRead"], "fileName": "com.facebook.presto.atop.TestAtopSecurity"}, {"methodBody": ["METHOD_START", "{", "Session   bob    =    getSession (  \" bob \"  )  ;", "queryRunner . exte ( bob ,     \" SELECT    *    FROM   disks \"  )  ;", "}", "METHOD_END"], "methodName": ["testNonAdminCannotRead"], "fileName": "com.facebook.presto.atop.TestAtopSecurity"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   rows    =    queryRunner . execute ( sql )  ;", "MaterializedRow   materializedRow    =    Iterables . getOnlyElement ( rows )  ;", "int   fieldCount    =    materializedRow . getFieldCount (  )  ;", "assertTrue (  ( fieldCount    =  =     1  )  ,    String . format (  \" Expected   only   one   column ,    but   got    '  % d '  \"  ,    fieldCount )  )  ;", "Object   value    =    materializedRow . getField (  0  )  ;", "assertEquals ( value ,    expected )  ;", "assertTrue (  (  ( Iterables . getOnlyElement ( rows )  . getFieldCount (  )  )     =  =     1  )  )  ;", "}", "METHOD_END"], "methodName": ["assertThatQueryReturnsValue"], "fileName": "com.facebook.presto.atop.TestAtopSmoke"}, {"methodBody": ["METHOD_START", "{", "queryRunner    =    LocalAtopQueryRunner . createQueryRunner (  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.atop.TestAtopSmoke"}, {"methodBody": ["METHOD_START", "{", "queryRunner . close (  )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.atop.TestAtopSmoke"}, {"methodBody": ["METHOD_START", "{", "assertThatQueryReturnsValue (  \" SELECT   device _ name   FROM   disks   LIMIT    1  \"  ,     \" sda \"  )  ;", "}", "METHOD_END"], "methodName": ["testDisks"], "fileName": "com.facebook.presto.atop.TestAtopSmoke"}, {"methodBody": ["METHOD_START", "{", "assertThatQueryReturnsValue (  \" SELECT   device _ name   FROM   disks   WHERE   start _ time    <    current _ timestamp   LIMIT    1  \"  ,     \" sda \"  )  ;", "}", "METHOD_END"], "methodName": ["testPredicatePushdown"], "fileName": "com.facebook.presto.atop.TestAtopSmoke"}, {"methodBody": ["METHOD_START", "{", "assertThatQueryReturnsValue (  \" SELECT   count (  *  )    FROM   reboots   WHERE   CAST ( power _ on _ time   AS   date )     =    current _ date \"  ,     2 L )  ;", "}", "METHOD_END"], "methodName": ["testReboots"], "fileName": "com.facebook.presto.atop.TestAtopSmoke"}, {"methodBody": ["METHOD_START", "{", "JsonCodec < AtopSplit >    codec    =    JsonCodec . jsonCodec ( AtopSplit . class )  ;", "ZonedDateTime   now    =    ZonedDateTime . now ( ZoneId . of (  \"  +  0  1  :  2  3  \"  )  )  ;", "AtopSplit   split    =    new   AtopSplit ( AtopTable . DISKS ,    HostAddress . fromParts (  \" localhost \"  ,     1  2  3  )  ,    now . toEpochSecond (  )  ,    now . getZone (  )  )  ;", "AtopSplit   decoded    =    codec . fromJson ( codec . toJson ( split )  )  ;", "assertEquals ( decoded . getTable (  )  ,    split . getTable (  )  )  ;", "assertEquals ( decoded . getHost (  )  ,    split . getHost (  )  )  ;", "assertEquals ( decoded . getDate (  )  ,    split . getDate (  )  )  ;", "assertEquals ( decoded . getEpochSeconds (  )  ,    split . getEpochSeconds (  )  )  ;", "assertEquals ( decoded . getTimeZone (  )  ,    split . getTimeZone (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSerialization"], "fileName": "com.facebook.presto.atop.TestAtopSplit"}]