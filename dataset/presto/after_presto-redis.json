[{"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . spi . ColumnMetadata ( name ,    type ,    null ,    hidden )  ;", "}", "METHOD_END"], "methodName": ["getColumnMetadata"], "fileName": "com.facebook.presto.redis.RedisColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   connectorId ;", "}", "METHOD_END"], "methodName": ["getConnectorId"], "fileName": "com.facebook.presto.redis.RedisColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   ordinalPosition ;", "}", "METHOD_END"], "methodName": ["getOrdinalPosition"], "fileName": "com.facebook.presto.redis.RedisColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   hidden ;", "}", "METHOD_END"], "methodName": ["isHidden"], "fileName": "com.facebook.presto.redis.RedisColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   keyDecoder ;", "}", "METHOD_END"], "methodName": ["isKeyDecoder"], "fileName": "com.facebook.presto.redis.RedisColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   defaultSchema ;", "}", "METHOD_END"], "methodName": ["getDefaultSchema"], "fileName": "com.facebook.presto.redis.RedisConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "return   nodes ;", "}", "METHOD_END"], "methodName": ["getNodes"], "fileName": "com.facebook.presto.redis.RedisConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "return   redisConnectTimeout ;", "}", "METHOD_END"], "methodName": ["getRedisConnectTimeout"], "fileName": "com.facebook.presto.redis.RedisConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "return   redisDataBaseIndex ;", "}", "METHOD_END"], "methodName": ["getRedisDataBaseIndex"], "fileName": "com.facebook.presto.redis.RedisConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "return   redisKeyDelimiter ;", "}", "METHOD_END"], "methodName": ["getRedisKeyDelimiter"], "fileName": "com.facebook.presto.redis.RedisConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "return   redisPassword ;", "}", "METHOD_END"], "methodName": ["getRedisPassword"], "fileName": "com.facebook.presto.redis.RedisConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "return   redisScanCount ;", "}", "METHOD_END"], "methodName": ["getRedisScanCount"], "fileName": "com.facebook.presto.redis.RedisConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "return   tableDescriptionDir ;", "}", "METHOD_END"], "methodName": ["getTableDescriptionDir"], "fileName": "com.facebook.presto.redis.RedisConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "return   tableNames ;", "}", "METHOD_END"], "methodName": ["getTableNames"], "fileName": "com.facebook.presto.redis.RedisConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "return   hideInternalColumns ;", "}", "METHOD_END"], "methodName": ["isHideInternalColumns"], "fileName": "com.facebook.presto.redis.RedisConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "return   keyPrefixSchemaTable ;", "}", "METHOD_END"], "methodName": ["isKeyPrefixSchemaTable"], "fileName": "com.facebook.presto.redis.RedisConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "Splitter   splitter    =    Splitter . on (  '  ,  '  )  . omitEmptyStrings (  )  . trimResults (  )  ;", "return   ImmutableSet . copyOf ( transform ( splitter . split ( nodes )  ,     :  : toHostAddress )  )  ;", "}", "METHOD_END"], "methodName": ["parseNodes"], "fileName": "com.facebook.presto.redis.RedisConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "this . defaultSchema    =    defaultSchema ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setDefaultSchema"], "fileName": "com.facebook.presto.redis.RedisConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "this . hideInternalColumns    =    hideInternalColumns ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setHideInternalColumns"], "fileName": "com.facebook.presto.redis.RedisConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "this . keyPrefixSchemaTable    =    keyPrefixSchemaTable ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setKeyPrefixSchemaTable"], "fileName": "com.facebook.presto.redis.RedisConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "this . nodes    =     ( nodes    =  =    null )     ?    null    :    RedisConnectorConfig . parseNodes ( nodes )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setNodes"], "fileName": "com.facebook.presto.redis.RedisConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "this . redisConnectTimeout    =    Duration . valueOf ( redisConnectTimeout )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setRedisConnectTimeout"], "fileName": "com.facebook.presto.redis.RedisConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "this . redisDataBaseIndex    =    redisDataBaseIndex ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setRedisDataBaseIndex"], "fileName": "com.facebook.presto.redis.RedisConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "this . redisKeyDelimiter    =    redisKeyDelimiter . charAt (  0  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setRedisKeyDelimiter"], "fileName": "com.facebook.presto.redis.RedisConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "this . redisPassword    =    redisPassword ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setRedisPassword"], "fileName": "com.facebook.presto.redis.RedisConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "this . redisScanCount    =    redisScanCount ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setRedisScanCount"], "fileName": "com.facebook.presto.redis.RedisConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "this . tableDescriptionDir    =    tableDescriptionDir ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setTableDescriptionDir"], "fileName": "com.facebook.presto.redis.RedisConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "this . tableNames    =    ImmutableSet . copyOf ( Splitter . on (  '  ,  '  )  . omitEmptyStrings (  )  . trimResults (  )  . split ( tableNames )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setTableNames"], "fileName": "com.facebook.presto.redis.RedisConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "return   HostAddress . fromString ( value )  . withDefaultPort ( RedisConnectorConfig . REDIS _ DEFAULT _ PORT )  ;", "}", "METHOD_END"], "methodName": ["toHostAddress"], "fileName": "com.facebook.presto.redis.RedisConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "Multibinder < RedisInternalFieldDescription >    fieldDescriptionBinder    =    Multibinder . newSetBinder ( binder ,    RedisInternalFieldDescription . class )  ;", "fieldDescriptionBinder . addBinding (  )  . toInstance ( fieldDescription )  ;", "}", "METHOD_END"], "methodName": ["bindInternalColumn"], "fileName": "com.facebook.presto.redis.RedisConnectorModule"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( columnHandle ,     \" columnHandle   is   null \"  )  ;", "checkArgument (  ( columnHandle   instanceof   RedisColumnHandle )  ,     \" columnHandle   is   not   an   instance   of   RedisColumnHandle \"  )  ;", "return    (  ( RedisColumnHandle )     ( columnHandle )  )  ;", "}", "METHOD_END"], "methodName": ["convertColumnHandle"], "fileName": "com.facebook.presto.redis.RedisHandleResolver"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( layout ,     \" layout   is   null \"  )  ;", "checkArgument (  ( layout   instanceof   RedisTableLayout )  ,     \" layout   is   not   an   instance   of   RedisTableLayout \"  )  ;", "return    (  ( RedisTableLayout )     ( layout )  )  ;", "}", "METHOD_END"], "methodName": ["convertLayout"], "fileName": "com.facebook.presto.redis.RedisHandleResolver"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( split ,     \" split   is   null \"  )  ;", "checkArgument (  ( split   instanceof   Split )  ,     \" split   is   not   an   instance   of   Split \"  )  ;", "return    (  ( Split )     ( split )  )  ;", "}", "METHOD_END"], "methodName": ["convertSplit"], "fileName": "com.facebook.presto.redis.RedisHandleResolver"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( tableHandle ,     \" tableHandle   is   null \"  )  ;", "checkArgument (  ( tableHandle   instanceof   RedisTableHandle )  ,     \" tableHandle   is   not   an   instance   of   RedisTableHandle \"  )  ;", "return    (  ( RedisTableHandle )     ( tableHandle )  )  ;", "}", "METHOD_END"], "methodName": ["convertTableHandle"], "fileName": "com.facebook.presto.redis.RedisHandleResolver"}, {"methodBody": ["METHOD_START", "{", "return   new   RedisInternalFieldDescription . BooleanRedisFieldValueProvider ( value )  ;", "}", "METHOD_END"], "methodName": ["forBooleanValue"], "fileName": "com.facebook.presto.redis.RedisInternalFieldDescription"}, {"methodBody": ["METHOD_START", "{", "return   new   RedisInternalFieldDescription . BytesRedisFieldValueProvider ( value )  ;", "}", "METHOD_END"], "methodName": ["forByteValue"], "fileName": "com.facebook.presto.redis.RedisInternalFieldDescription"}, {"methodBody": ["METHOD_START", "{", "return   new   RedisInternalFieldDescription . LongRedisFieldValueProvider ( value )  ;", "}", "METHOD_END"], "methodName": ["forLongValue"], "fileName": "com.facebook.presto.redis.RedisInternalFieldDescription"}, {"methodBody": ["METHOD_START", "{", "return   new   RedisColumnHandle ( connectorId ,    index ,    getName (  )  ,    getType (  )  ,    null ,    null ,    null ,    false ,    hidden ,    true )  ;", "}", "METHOD_END"], "methodName": ["getColumnHandle"], "fileName": "com.facebook.presto.redis.RedisInternalFieldDescription"}, {"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . spi . ColumnMetadata ( name ,    type ,    comment ,    hidden )  ;", "}", "METHOD_END"], "methodName": ["getColumnMetadata"], "fileName": "com.facebook.presto.redis.RedisInternalFieldDescription"}, {"methodBody": ["METHOD_START", "{", "return   ImmutableSet . of ( RedisInternalFieldDescription . KEY _ FIELD ,    RedisInternalFieldDescription . VALUE _ FIELD ,    RedisInternalFieldDescription . KEY _ LENGTH _ FIELD ,    RedisInternalFieldDescription . VALUE _ LENGTH _ FIELD ,    RedisInternalFieldDescription . KEY _ CORRUPT _ FIELD ,    RedisInternalFieldDescription . VALUE _ CORRUPT _ FIELD )  ;", "}", "METHOD_END"], "methodName": ["getInternalFields"], "fileName": "com.facebook.presto.redis.RedisInternalFieldDescription"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.redis.RedisInternalFieldDescription"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.facebook.presto.redis.RedisInternalFieldDescription"}, {"methodBody": ["METHOD_START", "{", "RedisJedisManager . log . info (  \" Creating   new   JedisPool   for    % s \"  ,    host )  ;", "return   new   redis . clients . jedis . JedisPool ( jedisPoolConfig ,    host . getHostText (  )  ,    host . getPort (  )  ,    Math . toIntExact ( redisConnectorConfig . getRedisConnectTimeout (  )  . toMillis (  )  )  ,    redisConnectorConfig . getRedisPassword (  )  ,    redisConnectorConfig . getRedisDataBaseIndex (  )  )  ;", "}", "METHOD_END"], "methodName": ["createConsumer"], "fileName": "com.facebook.presto.redis.RedisJedisManager"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( host ,     \" host   is   null \"  )  ;", "try    {", "return   jPoolCache . get ( host )  ;", "}    catch    ( ExecutionException   e )     {", "throw   Throwables . propagate ( e . getCause (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getJedisPool"], "fileName": "com.facebook.presto.redis.RedisJedisManager"}, {"methodBody": ["METHOD_START", "{", "return   redisConnectorConfig ;", "}", "METHOD_END"], "methodName": ["getRedisConnectorConfig"], "fileName": "com.facebook.presto.redis.RedisJedisManager"}, {"methodBody": ["METHOD_START", "{", "for    ( Map . Entry < HostAddress ,    JedisPool >    entry    :    jedisPoolCache . asMap (  )  . entrySet (  )  )     {", "try    {", "entry . getValue (  )  . destroy (  )  ;", "}    catch    ( Exception   e )     {", ". log . warn ( e ,     \" While   destroying   JedisPool    % s :  \"  ,    entry . getKey (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.redis.RedisJedisManager"}, {"methodBody": ["METHOD_START", "{", "if    ( group    !  =    null )     {", "List < RedisTableFieldDescription >    fields    =    group . getFields (  )  ;", "if    ( fields    !  =    null )     {", "for    ( RedisTableFieldDescription   fieldDescription    :    fields )     {", "builder . add ( fieldDescription . getColumn (  )  )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["appendFields"], "fileName": "com.facebook.presto.redis.RedisMetadata"}, {"methodBody": ["METHOD_START", "{", "return   fieldGroup    =  =    null    ?    DummyRowDecoder . NAME    :    fieldGroup . getDataFormat (  )  ;", "}", "METHOD_END"], "methodName": ["getDataFormat"], "fileName": "com.facebook.presto.redis.RedisMetadata"}, {"methodBody": ["METHOD_START", "{", "return   redisTableDescriptionSupplier . get (  )  ;", "}", "METHOD_END"], "methodName": ["getDefinedTables"], "fileName": "com.facebook.presto.redis.RedisMetadata"}, {"methodBody": ["METHOD_START", "{", "RedisTableDescription   table    =    getDefinedTables (  )  . get ( schemaTableName )  ;", "if    ( table    =  =    null )     {", "throw   new   spi . TableNotFoundException ( schemaTableName )  ;", "}", "ImmutableList . Builder < ColumnMetadata >    builder    =    ImmutableList . builder (  )  ;", "appendFields ( builder ,    table . getKey (  )  )  ;", "appendFields ( builder ,    table . getValue (  )  )  ;", "for    ( RedisInternalFieldDescription   fieldDescription    :    internalFieldDescriptions )     {", "builder . add ( fieldDescription . getColumnMetadata ( hideInternalColumns )  )  ;", "}", "return   new   spi . ConnectorTableMetadata ( schemaTableName ,    builder . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["getTableMetadata"], "fileName": "com.facebook.presto.redis.RedisMetadata"}, {"methodBody": ["METHOD_START", "{", "this . tableDescriptionSupplier    =    Optional . of ( Objects . requireNonNull ( tableDescriptionSupplier ,     \" tableDescriptionSupplier   is   null \"  )  )  ;", "}", "METHOD_END"], "methodName": ["setTableDescriptionSupplier"], "fileName": "com.facebook.presto.redis.RedisPlugin"}, {"methodBody": ["METHOD_START", "{", "return   RedisQueryRunner . createRedisQueryRunner ( embeddedRedis ,    dataFormat ,    ImmutableList . copyOf ( tables )  )  ;", "}", "METHOD_END"], "methodName": ["createRedisQueryRunner"], "fileName": "com.facebook.presto.redis.RedisQueryRunner"}, {"methodBody": ["METHOD_START", "{", "DistributedQueryRunner   queryRunner    =    null ;", "try    {", "queryRunner    =    new   DistributedQueryRunner (  . createSession (  )  ,     2  )  ;", "queryRunner . installPlugin ( new   TpchPlugin (  )  )  ;", "queryRunner . createCatalog (  \" tpch \"  ,     \" tpch \"  )  ;", "embeddedRedis . start (  )  ;", "Map < SchemaTableName ,    RedisTableDescription >    tableDescriptions    =     . createTpchTableDescriptions ( queryRunner . getCoordinator (  )  . getMetadata (  )  ,    tables ,    dataFormat )  ;", "RedisTestUtils . installRedisPlugin ( embeddedRedis ,    queryRunner ,    tableDescriptions )  ;", "TestingPrestoClient   prestoClient    =    queryRunner . getClient (  )  ;", ". log . info (  \" Loading   data .  .  .  \"  )  ;", "long   startTime    =    System . nanoTime (  )  ;", "for    ( TpchTable <  ?  >    table    :    tables )     {", ". loadTpchTable ( embeddedRedis ,    prestoClient ,    table ,    dataFormat )  ;", "}", ". log . info (  \" Loading   complete   in    % s \"  ,    Duration . nanosSince ( startTime )  . toString ( TimeUnit . SECONDS )  )  ;", "embeddedRedis . destroyJedisPool (  )  ;", "return   queryRunner ;", "}    catch    ( Throwable   e )     {", "Closeables . closeAllSuppress ( e ,    queryRunner ,    embeddedRedis )  ;", "throw   e ;", "}", "}", "METHOD_END"], "methodName": ["createRedisQueryRunner"], "fileName": "com.facebook.presto.redis.RedisQueryRunner"}, {"methodBody": ["METHOD_START", "{", "return   testSessionBuilder (  )  . setCatalog (  \" redis \"  )  . setSchema ( RedisQueryRunner . TPCH _ SCHEMA )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["createSession"], "fileName": "com.facebook.presto.redis.RedisQueryRunner"}, {"methodBody": ["METHOD_START", "{", "JsonCodec < RedisTableDescription >    tableDescriptionJsonCodec    =    new   com . facebook . presto . redis . util . CodecSupplier ( RedisTableDescription . class ,    metadata )  . get (  )  ;", "Builder < SchemaTableName ,    RedisTableDescription >    tableDescriptions    =    ImmutableMap . builder (  )  ;", "for    ( TpchTable <  ?  >    table    :    tables )     {", "String   tableName    =    table . getTableName (  )  ;", "SchemaTableName   tpchTable    =    new   SchemaTableName ( RedisQueryRunner . TPCH _ SCHEMA ,    tableName )  ;", "tableDescriptions . put ( RedisTestUtils . loadTpchTableDescription ( tableDescriptionJsonCodec ,    tpchTable ,    dataFormat )  )  ;", "}", "return   tableDescriptions . build (  )  ;", "}", "METHOD_END"], "methodName": ["createTpchTableDescriptions"], "fileName": "com.facebook.presto.redis.RedisQueryRunner"}, {"methodBody": ["METHOD_START", "{", "long   start    =    System . nanoTime (  )  ;", "RedisQueryRunner . log . info (  \" Running   import   for    % s \"  ,    table . getTableName (  )  )  ;", "RedisTestUtils . loadTpchTable ( embeddedRedis ,    prestoClient ,    RedisQueryRunner . redisTableName ( table )  ,    new   metadata . QualifiedObjectName (  \" tpch \"  ,    TINY _ SCHEMA _ NAME ,    table . getTableName (  )  . toLowerCase ( Locale . ENGLISH )  )  ,    dataFormat )  ;", "RedisQueryRunner . log . info (  \" Imported    % s   in    % s \"  ,    table . getTableName (  )  ,    Duration . nanosSince ( start )  . convertToMostSuccinctTimeUnit (  )  )  ;", "}", "METHOD_END"], "methodName": ["loadTpchTable"], "fileName": "com.facebook.presto.redis.RedisQueryRunner"}, {"methodBody": ["METHOD_START", "{", "return    (  ( RedisQueryRunner . TPCH _ SCHEMA )     +     \"  :  \"  )     +     ( table . getTableName (  )  . toLowerCase ( Locale . ENGLISH )  )  ;", "}", "METHOD_END"], "methodName": ["redisTableName"], "fileName": "com.facebook.presto.redis.RedisQueryRunner"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    actual    =    getType ( field )  . getJavaType (  )  ;", "checkArgument (  ( actual    =  =    expected )  ,     \" Expected   field    % s   to   be   type    % s   but   is    % s \"  ,    field ,    expected ,    actual )  ;", "}", "METHOD_END"], "methodName": ["checkFieldType"], "fileName": "com.facebook.presto.redis.RedisRecordCursor"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( reported . getAndSet ( true )  )  )     {", ". log . debug (  \" Read   a   total   of    % d   values   with    % d   bytes .  \"  ,    totalValues ,    totalBytes )  ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["endOfData"], "fileName": "com.facebook.presto.redis.RedisRecordCursor"}, {"methodBody": ["METHOD_START", "{", "valueString    =    null ;", "valueMap    =    null ;", "try    ( Jedis   jedis    =    jedisPool . getResource (  )  )     {", "switch    ( split . getValueDataType (  )  )     {", "case   STRING    :", "valueString    =    jedis . get ( keyString )  ;", "if    (  ( valueString )     =  =    null )     {", ". log . warn (  \" Redis   data   modified   while   query   was   running ,    string   value   at   key    % s   deleted \"  ,    keyString )  ;", "return   false ;", "}", "break ;", "case   HASH    :", "valueMap    =    jedis . hgetAll ( keyString )  ;", "if    (  ( valueMap )     =  =    null )     {", ". log . warn (  \" Redis   data   modified   while   query   was   running ,    hash   value   at   key    % s   deleted \"  ,    keyString )  ;", "return   false ;", "}", "break ;", "default    :", ". log . debug (  \" Redis   type   for   key    % s   is   unsupported \"  ,    keyString )  ;", "return   false ;", "}", "}    catch    ( Exception   e )     {", "throw   Throwables . propagate ( e )  ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["fetchData"], "fileName": "com.facebook.presto.redis.RedisRecordCursor"}, {"methodBody": ["METHOD_START", "{", "try    ( Jedis   jedis    =    jedisPool . getResource (  )  )     {", "switch    ( split . getKeyDataType (  )  )     {", "case   STRING    :", "{", "String   cursor    =    SCAN _ POINTER _ START ;", "if    (  ( redisCursor )     !  =    null )     {", "cursor    =    redisCursor . getStringCursor (  )  ;", "}", ". log . debug (  \" Scanning   new   Redis   keys   from   cursor    % s    .     % d   values   read   so   far \"  ,    cursor ,    totalValues )  ;", "redisCursor    =    jedis . scan ( cursor ,    scanParms )  ;", "List < String >    keys    =    redisCursor . getResult (  )  ;", "keysIterator    =    keys . iterator (  )  ;", "}", "break ;", "case   ZSET    :", "Set < String >    keys    =    jedis . zrange ( split . getKeyName (  )  ,    split . getStart (  )  ,    split . getEnd (  )  )  ;", "keysIterator    =    keys . iterator (  )  ;", "break ;", "default    :", ". log . debug (  \" Redis   type   of   key    % s   is   unsupported \"  ,    split . getKeyDataFormat (  )  )  ;", "return   false ;", "}", "}    catch    ( Exception   e )     {", "throw   Throwables . propagate ( e )  ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["fetchKeys"], "fileName": "com.facebook.presto.redis.RedisRecordCursor"}, {"methodBody": ["METHOD_START", "{", "if    (  ( redisCursor )     =  =    null )     {", "return   false ;", "}", "return    !  ( redisCursor . getStringCursor (  )  . equals (  \"  0  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["hasUnscannedData"], "fileName": "com.facebook.presto.redis.RedisRecordCursor"}, {"methodBody": ["METHOD_START", "{", "fetchData ( keyString )  ;", "byte [  ]    keyData    =    keyString . getBytes ( StandardCharsets . UTF _  8  )  ;", "byte [  ]    valueData    =     . EMPTY _ BYTE _ ARRAY ;", "if    (  ( valueString )     !  =    null )     {", "valueData    =    valueString . getBytes ( StandardCharsets . UTF _  8  )  ;", "}", "totalBytes    +  =    valueData . length ;", "( totalValues )  +  +  ;", "Set < FieldValueProvider >    fieldValueProviders    =    new   HashSet <  >  (  )  ;", "fieldValueProviders . add ( RedisInternalFieldDescription . KEY _ FIELD . forByteValue ( keyData )  )  ;", "fieldValueProviders . add ( RedisInternalFieldDescription . VALUE _ FIELD . forByteValue ( valueData )  )  ;", "fieldValueProviders . add ( RedisInternalFieldDescription . KEY _ LENGTH _ FIELD . forLongValue ( keyData . length )  )  ;", "fieldValueProviders . add ( RedisInternalFieldDescription . VALUE _ LENGTH _ FIELD . forLongValue ( valueData . length )  )  ;", "fieldValueProviders . add ( RedisInternalFieldDescription . KEY _ CORRUPT _ FIELD . forBooleanValue ( keyDecoder . decodeRow ( keyData ,    null ,    fieldValueProviders ,    columnHandles ,    keyFieldDecoders )  )  )  ;", "fieldValueProviders . add ( RedisInternalFieldDescription . VALUE _ CORRUPT _ FIELD . forBooleanValue ( valueDecoder . decodeRow ( valueData ,    valueMap ,    fieldValueProviders ,    columnHandles ,    valueFieldDecoders )  )  )  ;", "this . fieldValueProviders    =    new   FieldValueProvider [ columnHandles . size (  )  ]  ;", "for    ( int   i    =     0  ;    i    <     ( columnHandles . size (  )  )  ;    i +  +  )     {", "for    ( FieldValueProvider   fieldValueProvider    :    fieldValueProviders )     {", "if    ( fieldValueProvider . accept ( columnHandles . get ( i )  )  )     {", "this . fieldValueProviders [ i ]     =    fieldValueProvider ;", "break ;", "}", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["nextRow"], "fileName": "com.facebook.presto.redis.RedisRecordCursor"}, {"methodBody": ["METHOD_START", "{", "if    (  ( split . getKeyDataType (  )  )     =  =     ( RedisDataType . STRING )  )     {", "ScanParams   scanParms    =    new   ScanParams (  )  ;", "scanParms . count ( redisJedisManager . getRedisConnectorConfig (  )  . getRedisScanCount (  )  )  ;", "if    ( redisJedisManager . getRedisConnectorConfig (  )  . isKeyPrefixSchemaTable (  )  )     {", "String   keyMatch    =     \"  \"  ;", "if    (  !  ( split . getSchemaName (  )  . equals (  \" default \"  )  )  )     {", "keyMatch    =     ( split . getSchemaName (  )  )     +     ( Character . toString ( redisJedisManager . getRedisConnectorConfig (  )  . getRedisKeyDelimiter (  )  )  )  ;", "}", "keyMatch    =     (  ( keyMatch    +     ( split . getTableName (  )  )  )     +     ( Character . toString ( redisJedisManager . getRedisConnectorConfig (  )  . getRedisKeyDelimiter (  )  )  )  )     +     \"  *  \"  ;", "scanParms . match ( keyMatch )  ;", "}", "return   scanParms ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["setScanParms"], "fileName": "com.facebook.presto.redis.RedisRecordCursor"}, {"methodBody": ["METHOD_START", "{", "return   connectorId ;", "}", "METHOD_END"], "methodName": ["getConnectorId"], "fileName": "com.facebook.presto.redis.RedisSplit"}, {"methodBody": ["METHOD_START", "{", "return   end ;", "}", "METHOD_END"], "methodName": ["getEnd"], "fileName": "com.facebook.presto.redis.RedisSplit"}, {"methodBody": ["METHOD_START", "{", "return   keyDataFormat ;", "}", "METHOD_END"], "methodName": ["getKeyDataFormat"], "fileName": "com.facebook.presto.redis.RedisSplit"}, {"methodBody": ["METHOD_START", "{", "return   keyDataType ;", "}", "METHOD_END"], "methodName": ["getKeyDataType"], "fileName": "com.facebook.presto.redis.RedisSplit"}, {"methodBody": ["METHOD_START", "{", "return   keyName ;", "}", "METHOD_END"], "methodName": ["getKeyName"], "fileName": "com.facebook.presto.redis.RedisSplit"}, {"methodBody": ["METHOD_START", "{", "return   nodes ;", "}", "METHOD_END"], "methodName": ["getNodes"], "fileName": "com.facebook.presto.redis.RedisSplit"}, {"methodBody": ["METHOD_START", "{", "return   schemaName ;", "}", "METHOD_END"], "methodName": ["getSchemaName"], "fileName": "com.facebook.presto.redis.RedisSplit"}, {"methodBody": ["METHOD_START", "{", "return   start ;", "}", "METHOD_END"], "methodName": ["getStart"], "fileName": "com.facebook.presto.redis.RedisSplit"}, {"methodBody": ["METHOD_START", "{", "return   tableName ;", "}", "METHOD_END"], "methodName": ["getTableName"], "fileName": "com.facebook.presto.redis.RedisSplit"}, {"methodBody": ["METHOD_START", "{", "return   valueDataFormat ;", "}", "METHOD_END"], "methodName": ["getValueDataFormat"], "fileName": "com.facebook.presto.redis.RedisSplit"}, {"methodBody": ["METHOD_START", "{", "return   valueDataType ;", "}", "METHOD_END"], "methodName": ["getValueDataType"], "fileName": "com.facebook.presto.redis.RedisSplit"}, {"methodBody": ["METHOD_START", "{", "switch    ( dataFormat )     {", "case    \" hash \"     :", "return   DataType . HASH ;", "case    \" zset \"     :", "return   DataType . ZSET ;", "default    :", "return   DataType . STRING ;", "}", "}", "METHOD_END"], "methodName": ["toRedisDataType"], "fileName": "com.facebook.presto.redis.RedisSplit"}, {"methodBody": ["METHOD_START", "{", "return   key ;", "}", "METHOD_END"], "methodName": ["getKey"], "fileName": "com.facebook.presto.redis.RedisTableDescription"}, {"methodBody": ["METHOD_START", "{", "return   schemaName ;", "}", "METHOD_END"], "methodName": ["getSchemaName"], "fileName": "com.facebook.presto.redis.RedisTableDescription"}, {"methodBody": ["METHOD_START", "{", "return   tableName ;", "}", "METHOD_END"], "methodName": ["getTableName"], "fileName": "com.facebook.presto.redis.RedisTableDescription"}, {"methodBody": ["METHOD_START", "{", "return   value ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "com.facebook.presto.redis.RedisTableDescription"}, {"methodBody": ["METHOD_START", "{", "if    (  ( dir    !  =    null )     &  &     ( dir . isDirectory (  )  )  )     {", "File [  ]    files    =    dir . listFiles (  )  ;", "if    ( files    !  =    null )     {", ". log . debug (  \" Considering   files :     % s \"  ,    Arrays . asList ( files )  )  ;", "return   ImmutableList . copyOf ( files )  ;", "}", "}", "return   ImmutableList . of (  )  ;", "}", "METHOD_END"], "methodName": ["listFiles"], "fileName": "com.facebook.presto.redis.RedisTableDescriptionSupplier"}, {"methodBody": ["METHOD_START", "{", "checkArgument (  (  !  ( isNullOrEmpty ( schemaTableName )  )  )  ,     \" schemaTableName   is   null   or   is   empty \"  )  ;", "List < String >    parts    =    Splitter . on (  '  .  '  )  . splitToList ( schemaTableName )  ;", "checkArgument (  (  ( parts . size (  )  )     =  =     2  )  ,     \" Invalid   schemaTableName :     % s \"  ,    schemaTableName )  ;", "return   new   SchemaTableName ( parts . get (  0  )  ,    parts . get (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["parseTableName"], "fileName": "com.facebook.presto.redis.RedisTableDescriptionSupplier"}, {"methodBody": ["METHOD_START", "{", "return   new   RedisColumnHandle ( connectorId ,    index ,    getName (  )  ,    getType (  )  ,    getMapping (  )  ,    getDataFormat (  )  ,    getFormatHint (  )  ,    keyDecoder ,    isHidden (  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getColumnHandle"], "fileName": "com.facebook.presto.redis.RedisTableFieldDescription"}, {"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . spi . ColumnMetadata ( getName (  )  ,    getType (  )  ,    getComment (  )  ,    isHidden (  )  )  ;", "}", "METHOD_END"], "methodName": ["getColumnMetadata"], "fileName": "com.facebook.presto.redis.RedisTableFieldDescription"}, {"methodBody": ["METHOD_START", "{", "return   comment ;", "}", "METHOD_END"], "methodName": ["getComment"], "fileName": "com.facebook.presto.redis.RedisTableFieldDescription"}, {"methodBody": ["METHOD_START", "{", "return   dataFormat ;", "}", "METHOD_END"], "methodName": ["getDataFormat"], "fileName": "com.facebook.presto.redis.RedisTableFieldDescription"}, {"methodBody": ["METHOD_START", "{", "return   formatHint ;", "}", "METHOD_END"], "methodName": ["getFormatHint"], "fileName": "com.facebook.presto.redis.RedisTableFieldDescription"}, {"methodBody": ["METHOD_START", "{", "return   mapping ;", "}", "METHOD_END"], "methodName": ["getMapping"], "fileName": "com.facebook.presto.redis.RedisTableFieldDescription"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.redis.RedisTableFieldDescription"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.facebook.presto.redis.RedisTableFieldDescription"}, {"methodBody": ["METHOD_START", "{", "return   hidden ;", "}", "METHOD_END"], "methodName": ["isHidden"], "fileName": "com.facebook.presto.redis.RedisTableFieldDescription"}, {"methodBody": ["METHOD_START", "{", "return   dataFormat ;", "}", "METHOD_END"], "methodName": ["getDataFormat"], "fileName": "com.facebook.presto.redis.RedisTableFieldGroup"}, {"methodBody": ["METHOD_START", "{", "return   fields ;", "}", "METHOD_END"], "methodName": ["getFields"], "fileName": "com.facebook.presto.redis.RedisTableFieldGroup"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.redis.RedisTableFieldGroup"}, {"methodBody": ["METHOD_START", "{", "return   connectorId ;", "}", "METHOD_END"], "methodName": ["getConnectorId"], "fileName": "com.facebook.presto.redis.RedisTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   keyDataFormat ;", "}", "METHOD_END"], "methodName": ["getKeyDataFormat"], "fileName": "com.facebook.presto.redis.RedisTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   keyName ;", "}", "METHOD_END"], "methodName": ["getKeyName"], "fileName": "com.facebook.presto.redis.RedisTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   schemaName ;", "}", "METHOD_END"], "methodName": ["getSchemaName"], "fileName": "com.facebook.presto.redis.RedisTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   tableName ;", "}", "METHOD_END"], "methodName": ["getTableName"], "fileName": "com.facebook.presto.redis.RedisTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   valueDataFormat ;", "}", "METHOD_END"], "methodName": ["getValueDataFormat"], "fileName": "com.facebook.presto.redis.RedisTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   new   SchemaTableName ( schemaName ,    tableName )  ;", "}", "METHOD_END"], "methodName": ["toSchemaTableName"], "fileName": "com.facebook.presto.redis.RedisTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   table . getConnectorId (  )  ;", "}", "METHOD_END"], "methodName": ["getConnectorId"], "fileName": "com.facebook.presto.redis.RedisTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "return   table ;", "}", "METHOD_END"], "methodName": ["getTable"], "fileName": "com.facebook.presto.redis.RedisTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "JsonEncoder   jsonEncoder    =    new   JsonEncoder (  )  ;", "try    {", "for    ( long   i    =     0  ;    i    <    count ;    i +  +  )     {", "Object   value    =    ImmutableMap . of (  \" id \"  ,    Long . toString ( i )  ,     \" value \"  ,    UUID . randomUUID (  )  . toString (  )  )  ;", "try    ( Jj =    embeddedRgetJool (  )  . getResource (  )  )     {", "jset (  (  (  ( tableName )     +     \"  :  \"  )     +    i )  ,    jsonEncoder . toString ( value )  )  ;", "}", "}", "}    catch    ( Exception   e )     {", "throw   Throwables . propagate ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["populateData"], "fileName": "com.facebook.presto.redis.TestMinimalFunctionality"}, {"methodBody": ["METHOD_START", "{", "this . tableName    =     \" test _  \"     +     ( UUID . randomUUID (  )  . toString (  )  . replaceAll (  \"  -  \"  ,     \"  _  \"  )  )  ;", "this . queryRunner    =    new   com . facebook . presto . tests . StandaloneQueryRunner (  . SESSION )  ;", "RedisTestUtils . installRedisPlugin ( embeddedRedis ,    queryRunner ,    ImmutableMap .  < SchemaTableName ,    RedisTableDescription > builder (  )  . put ( RedisTestUtils . createEmptyTableDescription ( new   SchemaTableName (  \" default \"  ,    tableName )  )  )  . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["spinUp"], "fileName": "com.facebook.presto.redis.TestMinimalFunctionality"}, {"methodBody": ["METHOD_START", "{", "embeddedRedis    =    EmbeddedRedis . createEmbeddedRedis (  )  ;", "embeddedRedis . start (  )  ;", "}", "METHOD_END"], "methodName": ["startRedis"], "fileName": "com.facebook.presto.redis.TestMinimalFunctionality"}, {"methodBody": ["METHOD_START", "{", "embeddedRedis . close (  )  ;", "}", "METHOD_END"], "methodName": ["stopRedis"], "fileName": "com.facebook.presto.redis.TestMinimalFunctionality"}, {"methodBody": ["METHOD_START", "{", "queryRunner . close (  )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.redis.TestMinimalFunctionality"}, {"methodBody": ["METHOD_START", "{", "QualifiedObjectName   name    =    new   QualifiedObjectName (  \" redis \"  ,     \" default \"  ,    tableName )  ;", "transaction ( queryRunner . getTransactionManager (  )  ,    new   AllowAllAccessControl (  )  )  . singleStatement (  )  . execute (  . SESSION ,     (    session )     -  >     {", "Optional < TableHandle >    handle    =    queryRunner . getServer (  )  . getMetadata (  )  . getTableHandle ( session ,    name )  ;", "assertTrue ( handle . isPresent (  )  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["testTableExists"], "fileName": "com.facebook.presto.redis.TestMinimalFunctionality"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   result    =    queryRunner . execute (  (  \" SELECT   count (  1  )    from    \"     +     ( tableName )  )  )  ;", "MaterializedResult   expected    =    MaterializedResult . resultBuilder (  . SESSION ,    BIGINT )  . row (  0 L )  . build (  )  ;", "assertEquals ( result ,    expected )  ;", "int   count    =     1  0  0  0  ;", "populateData ( count )  ;", "result    =    queryRunner . execute (  (  \" SELECT   count (  1  )    from    \"     +     ( tableName )  )  )  ;", "expected    =    MaterializedResult . resultBuilder (  . SESSION ,    BIGINT )  . row (  (  ( long )     ( count )  )  )  . build (  )  ;", "assertEquals ( result ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testTableHasData"], "fileName": "com.facebook.presto.redis.TestMinimalFunctionality"}, {"methodBody": ["METHOD_START", "{", "ConfigAssertions . assertRecordedDefaults ( ConfigAssertions . recordDefaults ( RedisConnectorConfig . class )  . setNodes (  \"  \"  )  . setDefaultSchema (  \" default \"  )  . setTableNames (  \"  \"  )  . setTableDescriptionDir ( new   File (  \" etc / redis /  \"  )  )  . setKeyPrefixSchemaTable ( false )  . setRedisKeyDelimiter (  \"  :  \"  )  . setRedisConnectTimeout (  \"  2  0  0  0 ms \"  )  . setRedisDataBaseIndex (  0  )  . setRedisPassword ( null )  . setRedisScanCount (  1  0  0  )  . setHideInternalColumns ( true )  )  ;", "}", "METHOD_END"], "methodName": ["testDefaults"], "fileName": "com.facebook.presto.redis.TestRedisConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    properties    =    new   Builder < String ,    String >  (  )  . put (  \" redis . table - description - dir \"  ,     \"  / var / lib / redis \"  )  . put (  \" redis . table - names \"  ,     \" table 1  ,    table 2  ,    table 3  \"  )  . put (  \" redis . default - schema \"  ,     \" redis \"  )  . put (  \" redis . nodes \"  ,     \" localhost :  1  2  3  4  5  , localhost :  2  3  4  5  6  \"  )  . put (  \" redis . key - delimiter \"  ,     \"  ,  \"  )  . put (  \" redis . key - prefix - schema - table \"  ,     \" true \"  )  . put (  \" redis . scan - count \"  ,     \"  2  0  \"  )  . put (  \" redis . hide - internal - columns \"  ,     \" false \"  )  . put (  \" redis . connect - timeout \"  ,     \"  1  0 s \"  )  . put (  \" redis . database - index \"  ,     \"  5  \"  )  . put (  \" redis . password \"  ,     \" secret \"  )  . build (  )  ;", "expected    =    new    (  )  . setTableDescriptionDir ( new   File (  \"  / var / lib / redis \"  )  )  . setTableNames (  \" table 1  ,    table 2  ,    table 3  \"  )  . setDefaultSchema (  \" redis \"  )  . setNodes (  \" localhost :  1  2  3  4  5  ,    localhost :  2  3  4  5  6  \"  )  . setHideInternalColumns ( false )  . setRedisScanCount (  2  0  )  . setRedisConnectTimeout (  \"  1  0 s \"  )  . setRedisDataBaseIndex (  5  )  . setRedisPassword (  \" secret \"  )  . setRedisKeyDelimiter (  \"  ,  \"  )  . setKeyPrefixSchemaTable ( true )  ;", "ConfigAssertions . assertFullMapping ( properties ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testExplicitPropertyMappings"], "fileName": "com.facebook.presto.redis.TestRedisConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "embeddedRedis . close (  )  ;", "}", "METHOD_END"], "methodName": ["destroy"], "fileName": "com.facebook.presto.redis.TestRedisDistributed"}, {"methodBody": ["METHOD_START", "{", "embeddedRedis . close (  )  ;", "}", "METHOD_END"], "methodName": ["destroy"], "fileName": "com.facebook.presto.redis.TestRedisDistributedHash"}, {"methodBody": ["METHOD_START", "{", "embeddedRedis . close (  )  ;", "}", "METHOD_END"], "methodName": ["destroy"], "fileName": "com.facebook.presto.redis.TestRedisIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "RedisPlugin   plugin    =    new   RedisPlugin (  )  ;", "ConnectorFactory   factory    =    getOnlyElement ( plugin . getConnectorFactories (  )  )  ;", "Assertions . assertInstanceOf ( factory ,    RedisConnectorFactory . class )  ;", "Connector   c    =    factory . create (  \" test - connector \"  ,    ImmutableMap .  < String ,    String > builder (  )  . put (  \" redis . table - names \"  ,     \" test \"  )  . put (  \" redis . nodes \"  ,     \" localhost :  6  3  7  9  \"  )  . build (  )  ,    new   TestingConnectorContext (  )  )  ;", "assertNotNull ( c )  ;", "}", "METHOD_END"], "methodName": ["testStartup"], "fileName": "com.facebook.presto.redis.TestRedisPlugin"}, {"methodBody": ["METHOD_START", "{", "return   new   EmbeddedRedis (  )  ;", "}", "METHOD_END"], "methodName": ["createEmbeddedRedis"], "fileName": "com.facebook.presto.redis.util.EmbeddedRedis"}, {"methodBody": ["METHOD_START", "{", "jedisPool . destroy (  )  ;", "}", "METHOD_END"], "methodName": ["destroyJedisPool"], "fileName": "com.facebook.presto.redis.util.EmbeddedRedis"}, {"methodBody": ["METHOD_START", "{", "return    \" localhost \"  ;", "}", "METHOD_END"], "methodName": ["getConnectString"], "fileName": "com.facebook.presto.redis.util.EmbeddedRedis"}, {"methodBody": ["METHOD_START", "{", "return   jedisPool ;", "}", "METHOD_END"], "methodName": ["getJedisPool"], "fileName": "com.facebook.presto.redis.util.EmbeddedRedis"}, {"methodBody": ["METHOD_START", "{", "return   redisServer . getPort (  )  ;", "}", "METHOD_END"], "methodName": ["getPort"], "fileName": "com.facebook.presto.redis.util.EmbeddedRedis"}, {"methodBody": ["METHOD_START", "{", "erver . start (  )  ;", "jedisPool    =    new   clients . jedis . JedisPool ( new   JedisPoolConfig (  )  ,    getConnectString (  )  ,    getPort (  )  )  ;", "}", "METHOD_END"], "methodName": ["start"], "fileName": "com.facebook.presto.redis.util.EmbeddedRedis"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   objectMapper . writeValueAsString ( o )  ;", "}    catch    ( IOException   e )     {", "throw   Throwablesopagate ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "com.facebook.presto.redis.util.JsonEncoder"}, {"methodBody": ["METHOD_START", "{", "RedisTableDescription   tableDescription    =    new   RedisTableDescription ( schemaTableName . getTableName (  )  ,    schemaTableName . getSchemaName (  )  ,    null ,    null )  ;", "return   new   AbstractMap . SimpleImmutableEntry ( schemaTableName ,    tableDescription )  ;", "}", "METHOD_END"], "methodName": ["createEmptyTableDescription"], "fileName": "com.facebook.presto.redis.util.RedisTestUtils"}, {"methodBody": ["METHOD_START", "{", "RedisPlugin   lugin    =    new   RedisPlugin (  )  ;", "lugin . setTableDescriptionSupplier (  (  )     -  >    tableDescriptions )  ;", "queryRunner . installPlugin ( lugin )  ;", "Map < String ,    String >    onfig    =    ImmutableMap . of (  \" nodes \"  ,     (  (  ( embeddedRedis . getConnectString (  )  )     +     \"  :  \"  )     +     ( embeddedRedis . getPort (  )  )  )  ,     \" table - names \"  ,    Joiner . on (  \"  ,  \"  )  . join ( tableDescriptions . keySet (  )  )  ,     \" default - schema \"  ,     \" default \"  ,     \" hide - internal - columns \"  ,     \" true \"  ,     \" key - prefix - schema - table \"  ,     \" true \"  )  ;", "queryRunner . createCatalog (  \"  ,     \"  ,    onfig )  ;", "}", "METHOD_END"], "methodName": ["installRedisPlugin"], "fileName": "com.facebook.presto.redis.util.RedisTestUtils"}, {"methodBody": ["METHOD_START", "{", "RedisLoader   tpchLoader    =    new   RedisLoader ( prestoClient . getServer (  )  ,    prestoClient . getDefaultSession (  )  ,    embeddedRedis . getJedisPool (  )  ,    tableName ,    dataFormat )  ;", "tpchLoader . execute ( String . format (  \" SELECT    *    from    % s \"  ,    tpchTableName )  )  ;", "}", "METHOD_END"], "methodName": ["loadTpchTable"], "fileName": "com.facebook.presto.redis.util.RedisTestUtils"}, {"methodBody": ["METHOD_START", "{", "RedisTableDescription   tpchTemplate ;", "try    ( InputStream   data    =     . class . getResourceAsStream ( String . format (  \"  / tpch /  % s /  % s . json \"  ,    dataFormat ,    schemaTableName . getTableName (  )  )  )  )     {", "tpchTemplate    =    tableDescriptionJsonCodec . fromJson ( ByteStreams . toByteArray ( data )  )  ;", "}", "RedisTableDescription   tableDescription    =    new   RedisTableDescription ( schemaTableName . getTableName (  )  ,    schemaTableName . getSchemaName (  )  ,    tpchTemplate . getKey (  )  ,    tpchTemplate . getValue (  )  )  ;", "return   new   AbstractMap . SimpleImmutableEntry ( schemaTableName ,    tableDescription )  ;", "}", "METHOD_END"], "methodName": ["loadTpchTableDescription"], "fileName": "com.facebook.presto.redis.util.RedisTestUtils"}]