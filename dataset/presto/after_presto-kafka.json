[{"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . spi . ColumnMetadata ( name ,    type ,    null ,    hidden )  ;", "}", "METHOD_END"], "methodName": ["getColumnMetadata"], "fileName": "com.facebook.presto.kafka.KafkaColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   connectorId ;", "}", "METHOD_END"], "methodName": ["getConnectorId"], "fileName": "com.facebook.presto.kafka.KafkaColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   ordinalPosition ;", "}", "METHOD_END"], "methodName": ["getOrdinalPosition"], "fileName": "com.facebook.presto.kafka.KafkaColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   hidden ;", "}", "METHOD_END"], "methodName": ["isHidden"], "fileName": "com.facebook.presto.kafka.KafkaColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   keyDecoder ;", "}", "METHOD_END"], "methodName": ["isKeyDecoder"], "fileName": "com.facebook.presto.kafka.KafkaColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   defaultSchema ;", "}", "METHOD_END"], "methodName": ["getDefaultSchema"], "fileName": "com.facebook.presto.kafka.KafkaConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "return   kafkaBufferSize ;", "}", "METHOD_END"], "methodName": ["getKafkaBufferSize"], "fileName": "com.facebook.presto.kafka.KafkaConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "return   kafkaConnectTimeout ;", "}", "METHOD_END"], "methodName": ["getKafkaConnectTimeout"], "fileName": "com.facebook.presto.kafka.KafkaConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "return   nodes ;", "}", "METHOD_END"], "methodName": ["getNodes"], "fileName": "com.facebook.presto.kafka.KafkaConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "return   tableDescriptionDir ;", "}", "METHOD_END"], "methodName": ["getTableDescriptionDir"], "fileName": "com.facebook.presto.kafka.KafkaConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "return   tableNames ;", "}", "METHOD_END"], "methodName": ["getTableNames"], "fileName": "com.facebook.presto.kafka.KafkaConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "return   hideInternalColumns ;", "}", "METHOD_END"], "methodName": ["isHideInternalColumns"], "fileName": "com.facebook.presto.kafka.KafkaConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "Splitter   splitter    =    Splitter . on (  '  ,  '  )  . omitEmptyStrings (  )  . trimResults (  )  ;", "return   ImmutableSet . copyOf ( transform ( splitter . split ( nodes )  ,     :  : toHostAddress )  )  ;", "}", "METHOD_END"], "methodName": ["parseNodes"], "fileName": "com.facebook.presto.kafka.KafkaConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "this . defaultSchema    =    defaultSchema ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setDefaultSchema"], "fileName": "com.facebook.presto.kafka.KafkaConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "this . hideInternalColumns    =    hideInternalColumns ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setHideInternalColumns"], "fileName": "com.facebook.presto.kafka.KafkaConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "this . kafkaBufferSize    =    DataSize . valueOf ( kafkaBufferSize )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setKafkaBufferSize"], "fileName": "com.facebook.presto.kafka.KafkaConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "this . kafkaConnectTimeout    =    Duration . valueOf ( kafkaConnectTimeout )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setKafkaConnectTimeout"], "fileName": "com.facebook.presto.kafka.KafkaConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "this . nodes    =     ( nodes    =  =    null )     ?    null    :    KafkaConnectorConfig . parseNodes ( nodes )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setNodes"], "fileName": "com.facebook.presto.kafka.KafkaConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "this . tableDescriptionDir    =    tableDescriptionDir ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setTableDescriptionDir"], "fileName": "com.facebook.presto.kafka.KafkaConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "this . tableNames    =    ImmutableSet . copyOf ( Splitter . on (  '  ,  '  )  . omitEmptyStrings (  )  . trimResults (  )  . split ( tableNames )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setTableNames"], "fileName": "com.facebook.presto.kafka.KafkaConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "return   HostAddress . fromString ( value )  . withDefaultPort ( KafkaConnectorConfig . KAFKA _ DEFAULT _ PORT )  ;", "}", "METHOD_END"], "methodName": ["toHostAddress"], "fileName": "com.facebook.presto.kafka.KafkaConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "Multibinder < KafkaInternalFieldDescription >    fieldDescriptionBinder    =    Multibinder . newSetBinder ( binder ,    KafkaInternalFieldDescription . class )  ;", "fieldDescriptionBinder . addBinding (  )  . toInstance ( fieldDescription )  ;", "}", "METHOD_END"], "methodName": ["bindInternalColumn"], "fileName": "com.facebook.presto.kafka.KafkaConnectorModule"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( columnHandle ,     \" columnHandle   is   null \"  )  ;", "checkArgument (  ( columnHandle   instanceof   KafkaColumnHandle )  ,     \" columnHandle   is   not   an   instance   of   KafkaColumnHandle \"  )  ;", "return    (  ( KafkaColumnHandle )     ( columnHandle )  )  ;", "}", "METHOD_END"], "methodName": ["convertColumnHandle"], "fileName": "com.facebook.presto.kafka.KafkaHandleResolver"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( layout ,     \" layout   is   null \"  )  ;", "checkArgument (  ( layout   instanceof   KafkaTableLayout )  ,     \" layout   is   not   an   instance   of   KafkaTableLayout \"  )  ;", "return    (  ( KafkaTableLayout )     ( layout )  )  ;", "}", "METHOD_END"], "methodName": ["convertLayout"], "fileName": "com.facebook.presto.kafka.KafkaHandleResolver"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( split ,     \" split   is   null \"  )  ;", "checkArgument (  ( split   instanceof   Split )  ,     \" split   is   not   an   instance   of   Split \"  )  ;", "return    (  ( Split )     ( split )  )  ;", "}", "METHOD_END"], "methodName": ["convertSplit"], "fileName": "com.facebook.presto.kafka.KafkaHandleResolver"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( tableHandle ,     \" tableHandle   is   null \"  )  ;", "checkArgument (  ( tableHandle   instanceof   KafkaTableHandle )  ,     \" tableHandle   is   not   an   instance   of   KafkaTableHandle \"  )  ;", "return    (  ( KafkaTableHandle )     ( tableHandle )  )  ;", "}", "METHOD_END"], "methodName": ["convertTableHandle"], "fileName": "com.facebook.presto.kafka.KafkaHandleResolver"}, {"methodBody": ["METHOD_START", "{", "return   new   KafkaInternalFieldDescription . BooleanKafkaFieldValueProvider ( value )  ;", "}", "METHOD_END"], "methodName": ["forBooleanValue"], "fileName": "com.facebook.presto.kafka.KafkaInternalFieldDescription"}, {"methodBody": ["METHOD_START", "{", "return   new   KafkaInternalFieldDescription . BytesKafkaFieldValueProvider ( value )  ;", "}", "METHOD_END"], "methodName": ["forByteValue"], "fileName": "com.facebook.presto.kafka.KafkaInternalFieldDescription"}, {"methodBody": ["METHOD_START", "{", "return   new   KafkaInternalFieldDescription . LongKafkaFieldValueProvider ( value )  ;", "}", "METHOD_END"], "methodName": ["forLongValue"], "fileName": "com.facebook.presto.kafka.KafkaInternalFieldDescription"}, {"methodBody": ["METHOD_START", "{", "return   new   KafkaColumnHandle ( connectorId ,    index ,    getName (  )  ,    getType (  )  ,    null ,    null ,    null ,    false ,    hidden ,    true )  ;", "}", "METHOD_END"], "methodName": ["getColumnHandle"], "fileName": "com.facebook.presto.kafka.KafkaInternalFieldDescription"}, {"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . spi . ColumnMetadata ( name ,    type ,    comment ,    hidden )  ;", "}", "METHOD_END"], "methodName": ["getColumnMetadata"], "fileName": "com.facebook.presto.kafka.KafkaInternalFieldDescription"}, {"methodBody": ["METHOD_START", "{", "return   ImmutableSet . of ( KafkaInternalFieldDescription . PARTITION _ ID _ FIELD ,    KafkaInternalFieldDescription . PARTITION _ OFFSET _ FIELD ,    KafkaInternalFieldDescription . SEGMENT _ START _ FIELD ,    KafkaInternalFieldDescription . SEGMENT _ END _ FIELD ,    KafkaInternalFieldDescription . SEGMENT _ COUNT _ FIELD ,    KafkaInternalFieldDescription . KEY _ FIELD ,    KafkaInternalFieldDescription . KEY _ CORRUPT _ FIELD ,    KafkaInternalFieldDescription . KEY _ LENGTH _ FIELD ,    KafkaInternalFieldDescription . MESSAGE _ FIELD ,    KafkaInternalFieldDescription . MESSAGE _ CORRUPT _ FIELD ,    KafkaInternalFieldDescription . MESSAGE _ LENGTH _ FIELD )  ;", "}", "METHOD_END"], "methodName": ["getInternalFields"], "fileName": "com.facebook.presto.kafka.KafkaInternalFieldDescription"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.kafka.KafkaInternalFieldDescription"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.facebook.presto.kafka.KafkaInternalFieldDescription"}, {"methodBody": ["METHOD_START", "{", "return   fieldGroup    =  =    null    ?    DummyRowDecoder . NAME    :    fieldGroup . getDataFormat (  )  ;", "}", "METHOD_END"], "methodName": ["getDataFormat"], "fileName": "com.facebook.presto.kafka.KafkaMetadata"}, {"methodBody": ["METHOD_START", "{", "KafkaTopicDescription   table    =    tableDescriptions . get ( schemaTableName )  ;", "if    ( table    =  =    null )     {", "throw   new   spi . TableNotFoundException ( schemaTableName )  ;", "}", "ImmutableList . Builder < ColumnMetadata >    builder    =    ImmutableList . builder (  )  ;", "KafkaTopicFieldGroup   key    =    table . getKey (  )  ;", "if    ( key    !  =    null )     {", "List < KafkaTopicFieldDescription >    fields    =    key . getFields (  )  ;", "if    ( fields    !  =    null )     {", "for    ( KafkaTopicFieldDescription   fieldDescription    :    fields )     {", "builder . add ( fieldDescription . getColumnMetadata (  )  )  ;", "}", "}", "}", "KafkaTopicFieldGroup   message    =    table . getMessage (  )  ;", "if    ( message    !  =    null )     {", "List < KafkaTopicFieldDescription >    fields    =    message . getFields (  )  ;", "if    ( fields    !  =    null )     {", "for    ( KafkaTopicFieldDescription   fieldDescription    :    fields )     {", "builder . add ( fieldDescription . getColumnMetadata (  )  )  ;", "}", "}", "}", "for    ( KafkaInternalFieldDescription   fieldDescription    :    internalFieldDescriptions )     {", "builder . add ( fieldDescription . getColumnMetadata ( hideInternalColumns )  )  ;", "}", "return   new   spi . ConnectorTableMetadata ( schemaTableName ,    builder . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["getTableMetadata"], "fileName": "com.facebook.presto.kafka.KafkaMetadata"}, {"methodBody": ["METHOD_START", "{", "this . tableDescriptionSupplier    =    Optional . of ( Objects . requireNonNull ( tableDescriptionSupplier ,     \" tableDescriptionSupplier   is   null \"  )  )  ;", "}", "METHOD_END"], "methodName": ["setTableDescriptionSupplier"], "fileName": "com.facebook.presto.kafka.KafkaPlugin"}, {"methodBody": ["METHOD_START", "{", "return   KafkaQueryRunner . createKafkaQueryRunner ( embeddedKafka ,    ImmutableList . copyOf ( tables )  )  ;", "}", "METHOD_END"], "methodName": ["createKafkaQueryRunner"], "fileName": "com.facebook.presto.kafka.KafkaQueryRunner"}, {"methodBody": ["METHOD_START", "{", "DistributedQueryRunner   queryRunner    =    null ;", "try    {", "queryRunner    =    new   DistributedQueryRunner (  . createSession (  )  ,     2  )  ;", "queryRunner . installPlugin ( new   TpchPlugin (  )  )  ;", "queryRunner . createCatalog (  \" tpch \"  ,     \" tpch \"  )  ;", "embeddedKafka . start (  )  ;", "for    ( io . airlift . tpch . TpchTable <  ?  >    table    :    tables )     {", "embeddedKafka . createTopics (  . kafkaTopicName ( table )  )  ;", "}", "Map < SchemaTableName ,    KafkaTopicDescription >    topicDescriptions    =     . createTpchTopicDescriptions ( queryRunner . getCoordinator (  )  . getMetadata (  )  ,    tables )  ;", "TestUtils . installKafkaPlugin ( embeddedKafka ,    queryRunner ,    topicDescriptions )  ;", "TestingPrestoClient   prestoClient    =    queryRunner . getClient (  )  ;", ". log . info (  \" Loading   data .  .  .  \"  )  ;", "long   startTime    =    System . nanoTime (  )  ;", "for    ( io . airlift . tpch . TpchTable <  ?  >    table    :    tables )     {", ". loadTpchTopic ( embeddedKafka ,    prestoClient ,    table )  ;", "}", ". log . info (  \" Loading   complete   in    % s \"  ,    Duration . nanosSince ( startTime )  . toString ( TimeUnit . SECONDS )  )  ;", "return   queryRunner ;", "}    catch    ( Throwable   e )     {", "Closeables . closeAllSuppress ( e ,    queryRunner ,    embeddedKafka )  ;", "throw   e ;", "}", "}", "METHOD_END"], "methodName": ["createKafkaQueryRunner"], "fileName": "com.facebook.presto.kafka.KafkaQueryRunner"}, {"methodBody": ["METHOD_START", "{", "return   testSessionBuilder (  )  . setCatalog (  \" kafka \"  )  . setSchema ( KafkaQueryRunner . TPCH _ SCHEMA )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["createSession"], "fileName": "com.facebook.presto.kafka.KafkaQueryRunner"}, {"methodBody": ["METHOD_START", "{", "JsonCodec < KafkaTopicDescription >    topicDescriptionJsonCodec    =    new   com . facebook . presto . kafka . util . CodecSupplier ( KafkaTopicDescription . class ,    metadata )  . get (  )  ;", "Builder < SchemaTableName ,    KafkaTopicDescription >    topicDescriptions    =    ImmutableMap . builder (  )  ;", "for    ( io . airlift . tpch . TpchTable <  ?  >    table    :    tables )     {", "String   tableName    =    table . getTableName (  )  ;", "SchemaTableName   tpchTable    =    new   SchemaTableName ( KafkaQueryRunner . TPCH _ SCHEMA ,    tableName )  ;", "topicDescriptions . put ( TestUtils . loadTpchTopicDescription ( topicDescriptionJsonCodec ,    tpchTable . toString (  )  ,    tpchTable )  )  ;", "}", "return   topicDescriptions . build (  )  ;", "}", "METHOD_END"], "methodName": ["createTpchTopicDescriptions"], "fileName": "com.facebook.presto.kafka.KafkaQueryRunner"}, {"methodBody": ["METHOD_START", "{", "return    (  ( KafkaQueryRunner . TPCH _ SCHEMA )     +     \"  .  \"  )     +     ( table . getTableName (  )  . toLowerCase ( Locale . ENGLISH )  )  ;", "}", "METHOD_END"], "methodName": ["kafkaTopicName"], "fileName": "com.facebook.presto.kafka.KafkaQueryRunner"}, {"methodBody": ["METHOD_START", "{", "long   start    =    System . nanoTime (  )  ;", "KafkaQueryRunner . log . info (  \" Running   import   for    % s \"  ,    table . getTableName (  )  )  ;", "TestUtils . loadTpchTopic ( embeddedKafka ,    prestoClient ,    KafkaQueryRunner . kafkaTopicName ( table )  ,    new   metadata . QualifiedObjectName (  \" tpch \"  ,    TINY _ SCHEMA _ NAME ,    table . getTableName (  )  . toLowerCase ( Locale . ENGLISH )  )  )  ;", "KafkaQueryRunner . log . info (  \" Imported    % s   in    % s \"  ,     0  ,    table . getTableName (  )  ,    Duration . nanosSince ( start )  . convertToMostSuccinctTimeUnit (  )  )  ;", "}", "METHOD_END"], "methodName": ["loadTpchTopic"], "fileName": "com.facebook.presto.kafka.KafkaQueryRunner"}, {"methodBody": ["METHOD_START", "{", "Logging . initialize (  )  ;", "DistributedQueryRunner   queryRunner    =     . create ( EmbeddedKafka . createEmbeddedKafka (  )  ,    io . airlift . tpch . TpchTable . getTables (  )  )  ;", "Thread . sleep (  1  0  )  ;", "Logger   log    =    Logger . get (  . class )  ;", "log . info (  \"  =  =  =  =  =  =  =  =    SERVER   STARTED    =  =  =  =  =  =  =  =  \"  )  ;", "log . info (  \"  \\ n =  =  =  =  \\ n % s \\ n =  =  =  =  \"  ,    queryRunner . getCoordinator (  )  . getBaseUrl (  )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.kafka.KafkaQueryRunner"}, {"methodBody": ["METHOD_START", "{", "KafkaSimpleConsumerManager . log . info (  \" Creating   new   Consumer   for    % s \"  ,    host )  ;", "return   new   kafka . SimpleConsumer ( host . getHostText (  )  ,    host . getPort (  )  ,    connectTimeoutMillis ,    bufferSizeBytes ,    String . format (  \" presto - kafka -  % s -  % s \"  ,    connectorId ,    nodeManager . getCurrentNode (  )  . getNodeIdentifier (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createConsumer"], "fileName": "com.facebook.presto.kafka.KafkaSimpleConsumerManager"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( host ,     \" host   is   null \"  )  ;", "try    {", "return   cCache . get ( host )  ;", "}    catch    ( ExecutionException   e )     {", "throw   Throwables . propagate ( e . getCause (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getConsumer"], "fileName": "com.facebook.presto.kafka.KafkaSimpleConsumerManager"}, {"methodBody": ["METHOD_START", "{", "for    ( Map . Entry < HostAddress ,    SimpleConsumer >    entry    :    consumerCache . asMap (  )  . entrySet (  )  )     {", "try    {", "entry . getValue (  )  . close (  )  ;", "}    catch    ( Exception   e )     {", ". log . warn ( e ,     \" While   closing   consumer    % s :  \"  ,    entry . getKey (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.kafka.KafkaSimpleConsumerManager"}, {"methodBody": ["METHOD_START", "{", "return   connectorId ;", "}", "METHOD_END"], "methodName": ["getConnectorId"], "fileName": "com.facebook.presto.kafka.KafkaSplit"}, {"methodBody": ["METHOD_START", "{", "return   end ;", "}", "METHOD_END"], "methodName": ["getEnd"], "fileName": "com.facebook.presto.kafka.KafkaSplit"}, {"methodBody": ["METHOD_START", "{", "return   keyDataFormat ;", "}", "METHOD_END"], "methodName": ["getKeyDataFormat"], "fileName": "com.facebook.presto.kafka.KafkaSplit"}, {"methodBody": ["METHOD_START", "{", "return   leader ;", "}", "METHOD_END"], "methodName": ["getLeader"], "fileName": "com.facebook.presto.kafka.KafkaSplit"}, {"methodBody": ["METHOD_START", "{", "return   messageDataFormat ;", "}", "METHOD_END"], "methodName": ["getMessageDataFormat"], "fileName": "com.facebook.presto.kafka.KafkaSplit"}, {"methodBody": ["METHOD_START", "{", "return   partitionId ;", "}", "METHOD_END"], "methodName": ["getPartitionId"], "fileName": "com.facebook.presto.kafka.KafkaSplit"}, {"methodBody": ["METHOD_START", "{", "return   start ;", "}", "METHOD_END"], "methodName": ["getStart"], "fileName": "com.facebook.presto.kafka.KafkaSplit"}, {"methodBody": ["METHOD_START", "{", "return   topicName ;", "}", "METHOD_END"], "methodName": ["getTopicName"], "fileName": "com.facebook.presto.kafka.KafkaSplit"}, {"methodBody": ["METHOD_START", "{", "TopicAndPartition   topicAndPartition    =    new   TopicAndPartition ( topicName ,    partitionId )  ;", "PartitionOffsetRequestInfo   partitionOffsetRequestInfo    =    new   PartitionOffsetRequestInfo ( OffsetRequest . LatestTime (  )  ,    Integer . MAX _ VALUE )  ;", "kafka . OffsetRequest   offsetRequest    =    new   kafka . OffsetRequest ( ImmutableMap . of ( topicAndPartition ,    partitionOffsetRequestInfo )  ,    OffsetRequest . CurrentVersion (  )  ,    consumer . clientId (  )  )  ;", "OffsetResponse   offsetResponse    =    consumer . getOffsetsBefore ( offsetRequest )  ;", "if    ( offsetResponse . hasError (  )  )     {", "short   errorCode    =    offsetResponse . errorCode ( topicName ,    partitionId )  ;", ". log . warn (  \" Offset   response   has   error :     % d \"  ,    errorCode )  ;", "throw   new   PrestoException ( KafkaErrorCode . KAFKA _ SPLIT _ ERROR ,     (  (  \" could   not   fetch   data   from   Kafka ,    error   code   is    '  \"     +    errorCode )     +     \"  '  \"  )  )  ;", "}", "return   offsetResponse . offsets ( topicName ,    partitionId )  ;", "}", "METHOD_END"], "methodName": ["findAllOffsets"], "fileName": "com.facebook.presto.kafka.KafkaSplitManager"}, {"methodBody": ["METHOD_START", "{", "List < T >    list    =    ImmutableList . copyOf ( iterable )  ;", "return   list . get ( ThreadLocalRandcurrent (  )  . nextInt ( list . size (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["selectRandom"], "fileName": "com.facebook.presto.kafka.KafkaSplitManager"}, {"methodBody": ["METHOD_START", "{", "if    (  ( dir    !  =    null )     &  &     ( dir . isDirectory (  )  )  )     {", "File [  ]    files    =    dir . listFiles (  )  ;", "if    ( files    !  =    null )     {", ". log . debug (  \" Considering   files :     % s \"  ,    Arrays . asList ( files )  )  ;", "return   ImmutableList . copyOf ( files )  ;", "}", "}", "return   ImmutableList . of (  )  ;", "}", "METHOD_END"], "methodName": ["listFiles"], "fileName": "com.facebook.presto.kafka.KafkaTableDescriptionSupplier"}, {"methodBody": ["METHOD_START", "{", "checkArgument (  (  !  ( isNullOrEmpty ( schemaTableName )  )  )  ,     \" schemaTableName   is   null   or   is   empty \"  )  ;", "List < String >    parts    =    Splitter . on (  '  .  '  )  . splitToList ( schemaTableName )  ;", "checkArgument (  (  ( parts . size (  )  )     =  =     2  )  ,     \" Invalid   schemaTableName :     % s \"  ,    schemaTableName )  ;", "return   new   SchemaTableName ( parts . get (  0  )  ,    parts . get (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["parseTableName"], "fileName": "com.facebook.presto.kafka.KafkaTableDescriptionSupplier"}, {"methodBody": ["METHOD_START", "{", "return   connectorId ;", "}", "METHOD_END"], "methodName": ["getConnectorId"], "fileName": "com.facebook.presto.kafka.KafkaTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   keyDataFormat ;", "}", "METHOD_END"], "methodName": ["getKeyDataFormat"], "fileName": "com.facebook.presto.kafka.KafkaTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   messageDataFormat ;", "}", "METHOD_END"], "methodName": ["getMessageDataFormat"], "fileName": "com.facebook.presto.kafka.KafkaTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   schemaName ;", "}", "METHOD_END"], "methodName": ["getSchemaName"], "fileName": "com.facebook.presto.kafka.KafkaTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   tableName ;", "}", "METHOD_END"], "methodName": ["getTableName"], "fileName": "com.facebook.presto.kafka.KafkaTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   topicName ;", "}", "METHOD_END"], "methodName": ["getTopicName"], "fileName": "com.facebook.presto.kafka.KafkaTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   new   SchemaTableName ( schemaName ,    tableName )  ;", "}", "METHOD_END"], "methodName": ["toSchemaTableName"], "fileName": "com.facebook.presto.kafka.KafkaTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   table ;", "}", "METHOD_END"], "methodName": ["getTable"], "fileName": "com.facebook.presto.kafka.KafkaTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "return   key ;", "}", "METHOD_END"], "methodName": ["getKey"], "fileName": "com.facebook.presto.kafka.KafkaTopicDescription"}, {"methodBody": ["METHOD_START", "{", "return   message ;", "}", "METHOD_END"], "methodName": ["getMessage"], "fileName": "com.facebook.presto.kafka.KafkaTopicDescription"}, {"methodBody": ["METHOD_START", "{", "return   schemaName ;", "}", "METHOD_END"], "methodName": ["getSchemaName"], "fileName": "com.facebook.presto.kafka.KafkaTopicDescription"}, {"methodBody": ["METHOD_START", "{", "return   tableName ;", "}", "METHOD_END"], "methodName": ["getTableName"], "fileName": "com.facebook.presto.kafka.KafkaTopicDescription"}, {"methodBody": ["METHOD_START", "{", "return   topicName ;", "}", "METHOD_END"], "methodName": ["getTopicName"], "fileName": "com.facebook.presto.kafka.KafkaTopicDescription"}, {"methodBody": ["METHOD_START", "{", "return   new   KafkaColumnHandle ( connectorId ,    index ,    getName (  )  ,    getType (  )  ,    getMapping (  )  ,    getDataFormat (  )  ,    getFormatHint (  )  ,    keyDecoder ,    isHidden (  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getColumnHandle"], "fileName": "com.facebook.presto.kafka.KafkaTopicFieldDescription"}, {"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . spi . ColumnMetadata ( getName (  )  ,    getType (  )  ,    getComment (  )  ,    isHidden (  )  )  ;", "}", "METHOD_END"], "methodName": ["getColumnMetadata"], "fileName": "com.facebook.presto.kafka.KafkaTopicFieldDescription"}, {"methodBody": ["METHOD_START", "{", "return   comment ;", "}", "METHOD_END"], "methodName": ["getComment"], "fileName": "com.facebook.presto.kafka.KafkaTopicFieldDescription"}, {"methodBody": ["METHOD_START", "{", "return   dataFormat ;", "}", "METHOD_END"], "methodName": ["getDataFormat"], "fileName": "com.facebook.presto.kafka.KafkaTopicFieldDescription"}, {"methodBody": ["METHOD_START", "{", "return   formatHint ;", "}", "METHOD_END"], "methodName": ["getFormatHint"], "fileName": "com.facebook.presto.kafka.KafkaTopicFieldDescription"}, {"methodBody": ["METHOD_START", "{", "return   mapping ;", "}", "METHOD_END"], "methodName": ["getMapping"], "fileName": "com.facebook.presto.kafka.KafkaTopicFieldDescription"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.kafka.KafkaTopicFieldDescription"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.facebook.presto.kafka.KafkaTopicFieldDescription"}, {"methodBody": ["METHOD_START", "{", "return   hidden ;", "}", "METHOD_END"], "methodName": ["isHidden"], "fileName": "com.facebook.presto.kafka.KafkaTopicFieldDescription"}, {"methodBody": ["METHOD_START", "{", "return   dataFormat ;", "}", "METHOD_END"], "methodName": ["getDataFormat"], "fileName": "com.facebook.presto.kafka.KafkaTopicFieldGroup"}, {"methodBody": ["METHOD_START", "{", "return   fields ;", "}", "METHOD_END"], "methodName": ["getFields"], "fileName": "com.facebook.presto.kafka.KafkaTopicFieldGroup"}, {"methodBody": ["METHOD_START", "{", "ConfigAssertions . assertRecordedDefaults ( ConfigAssertions . recordDefaults ( KafkaConnectorConfig . class )  . setNodes (  \"  \"  )  . setKafkaConnectTimeout (  \"  1  0 s \"  )  . setKafkaBufferSize (  \"  6  4 kB \"  )  . setDefaultSchema (  \" default \"  )  . setTableNames (  \"  \"  )  . setTableDescriptionDir ( new   File (  \" etc / kafka /  \"  )  )  . setHideInternalColumns ( true )  )  ;", "}", "METHOD_END"], "methodName": ["testDefaults"], "fileName": "com.facebook.presto.kafka.TestKafkaConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    properties    =    new   Builder < String ,    String >  (  )  . put (  \" kafka . table - description - dir \"  ,     \"  / var / lib / kafka \"  )  . put (  \" kafka . table - names \"  ,     \" table 1  ,    table 2  ,    table 3  \"  )  . put (  \" kafka . default - schema \"  ,     \" kafka \"  )  . put (  \" kafka . nodes \"  ,     \" localhost :  1  2  3  4  5  , localhost :  2  3  4  5  6  \"  )  . put (  \" kafka . connect - timeout \"  ,     \"  1 h \"  )  . put (  \" kafka . buffer - size \"  ,     \"  1 MB \"  )  . put (  \" kafka . hide - internal - columns \"  ,     \" false \"  )  . build (  )  ;", "expected    =    new    (  )  . setTableDescriptionDir ( new   File (  \"  / var / lib / kafka \"  )  )  . setTableNames (  \" table 1  ,    table 2  ,    table 3  \"  )  . setDefaultSchema (  \" kafka \"  )  . setNodes (  \" localhost :  1  2  3  4  5  ,    localhost :  2  3  4  5  6  \"  )  . setKafkaConnectTimeout (  \"  1 h \"  )  . setKafkaBufferSize (  \"  1 MB \"  )  . setHideInternalColumns ( false )  ;", "ConfigAssertions . assertFullMapping ( properties ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testExplicitPropertyMappings"], "fileName": "com.facebook.presto.kafka.TestKafkaConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "embeddedKafka . close (  )  ;", "}", "METHOD_END"], "methodName": ["destroy"], "fileName": "com.facebook.presto.kafka.TestKafkaDistributed"}, {"methodBody": ["METHOD_START", "{", "embeddedKafka . close (  )  ;", "}", "METHOD_END"], "methodName": ["destroy"], "fileName": "com.facebook.presto.kafka.TestKafkaIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "KafkaPlugin   plugin    =    new   KafkaPlugin (  )  ;", "ConnectorFactory   factory    =    getOnlyElement ( plugin . getConnectorFactories (  )  )  ;", "Assertions . assertInstanceOf ( factory ,    KafkaConnectorFactory . class )  ;", "Connector   c    =    factory . create (  \" test - connector \"  ,    ImmutableMap .  < String ,    String > builder (  )  . put (  \" kafka . table - names \"  ,     \" test \"  )  . put (  \" kafka . nodes \"  ,     \" localhost :  9  0  9  2  \"  )  . build (  )  ,    new   TestingConnectorContext (  )  )  ;", "assertNotNull ( c )  ;", "}", "METHOD_END"], "methodName": ["testSpinup"], "fileName": "com.facebook.presto.kafka.TestKafkaPlugin"}, {"methodBody": ["METHOD_START", "{", "this . queryRunner    =    new   com . facebook . presto . tests . StandaloneQueryRunner ( TestManySegments . SESSION )  ;", "TestUtils . installKafkaPlugin ( embeddedKafka ,    queryRunner ,    ImmutableMap .  < SchemaTableName ,    KafkaTopicDescription > builder (  )  . put ( TestUtils . createEmptyTopicDescription ( topicName ,    new   SchemaTableName (  \" default \"  ,    topicName )  )  )  . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["spinUp"], "fileName": "com.facebook.presto.kafka.TestManySegments"}, {"methodBody": ["METHOD_START", "{", "embeddedKafka    =    EmbeddedKafka . createEmbeddedKafka (  )  ;", "embeddedKafka . start (  )  ;", "topicName    =     \" test _  \"     +     ( UUID . randomUUID (  )  . toString (  )  . replaceAll (  \"  -  \"  ,     \"  _  \"  )  )  ;", "Properties   topicProperties    =    new   Properties (  )  ;", "topicProperties . setProperty (  \" s . bytes \"  ,     \"  1  0  4  8  5  7  6  \"  )  ;", "embeddedKafka . createTopics (  1  ,     1  ,    topicProperties ,    topicName )  ;", "try    ( EmbeddedKafka . CloseableProducer < Long ,    Object >    producer    =    embeddedKafka . createProducer (  )  )     {", "int   jMax    =     1  0  0  0  0  ;", "int   iMax    =     1  0  0  0  0  0     /    jMax ;", "for    ( long   i    =     0  ;    i    <    iMax ;    i +  +  )     {", "Builder < KeyedMessage < Long ,    Object >  >    builder    =    ImmutableList . builder (  )  ;", "for    ( long   j    =     0  ;    j    <    jMax ;    j +  +  )     {", "builder . add ( new   KeyedMessage < Long ,    Object >  ( topicName ,    i ,    ImmutableMap . of (  \" id \"  ,    Long . toString (  (  ( i    *    iMax )     +    j )  )  ,     \" value \"  ,    UUID . randomUUID (  )  . toString (  )  )  )  )  ;", "}", "producer . send ( builder . build (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["startKafka"], "fileName": "com.facebook.presto.kafka.TestManySegments"}, {"methodBody": ["METHOD_START", "{", "embeddedKafka . close (  )  ;", "}", "METHOD_END"], "methodName": ["stopKafka"], "fileName": "com.facebook.presto.kafka.TestManySegments"}, {"methodBody": ["METHOD_START", "{", "queryRunner . close (  )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.kafka.TestManySegments"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   result    =    queryRunner . execute (  (  \" SELECT   count (  _ message )    from    \"     +     ( topicName )  )  )  ;", "MaterializedResult   expected    =    MaterializedResult . resultBuilder (  . SESSION ,    BIGINT )  . row (  1  0  0  0  0  0 L )  . build (  )  ;", "assertEquals ( result ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testManySegments"], "fileName": "com.facebook.presto.kafka.TestManySegments"}, {"methodBody": ["METHOD_START", "{", "try    ( EmbeddedKafka . CloseableProducer < Long ,    Object >    producer    =    embeddedKafka . createProducer (  )  )     {", "for    ( long   i    =     0  ;    i    <    count ;    i +  +  )     {", "Object   message    =    ImmutableMap . of (  \" id \"  ,    Long . toString ( i )  ,     \" value \"  ,    UUID . randomUUID (  )  . toString (  )  )  ;", "producer . send ( new   producer . KeyedMessage ( topicName ,    i ,    message )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["createMessages"], "fileName": "com.facebook.presto.kafka.TestMinimalFunctionality"}, {"methodBody": ["METHOD_START", "{", "this . topicName    =     \" test _  \"     +     ( UUID . randomUUID (  )  . toString (  )  . replaceAll (  \"  -  \"  ,     \"  _  \"  )  )  ;", "Properties   topicProperties    =    new   Properties (  )  ;", "embeddedKafka . createTopics (  2  ,     1  ,    topicProperties ,    topicName )  ;", "this . queryRunner    =    new   com . facebook . presto . tests . StandaloneQueryRunner (  . SESSION )  ;", "TestUtils . installKafkaPlugin ( embeddedKafka ,    queryRunner ,    ImmutableMap .  < SchemaTableName ,    KafkaTopicDescription > builder (  )  . put ( TestUtils . createEmptyTopicDescription ( topicName ,    new   SchemaTableName (  \" default \"  ,    topicName )  )  )  . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["spinUp"], "fileName": "com.facebook.presto.kafka.TestMinimalFunctionality"}, {"methodBody": ["METHOD_START", "{", "embeddedKafka    =    EmbeddedKafka . createEmbeddedKafka (  )  ;", "embeddedKafka . start (  )  ;", "}", "METHOD_END"], "methodName": ["startKafka"], "fileName": "com.facebook.presto.kafka.TestMinimalFunctionality"}, {"methodBody": ["METHOD_START", "{", "embeddedKafka . close (  )  ;", "}", "METHOD_END"], "methodName": ["stopKafka"], "fileName": "com.facebook.presto.kafka.TestMinimalFunctionality"}, {"methodBody": ["METHOD_START", "{", "queryRunner . close (  )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.kafka.TestMinimalFunctionality"}, {"methodBody": ["METHOD_START", "{", "QualifiedObjectName   name    =    new   QualifiedObjectName (  \" kafka \"  ,     \" default \"  ,    topicName )  ;", "transaction ( queryRunner . getTransactionManager (  )  ,    new   AllowAllAccessControl (  )  )  . singleStatement (  )  . execute (  . SESSION ,     (    session )     -  >     {", "Optional < TableHandle >    handle    =    queryRunner . getServer (  )  . getMetadata (  )  . getTableHandle ( session ,    name )  ;", "assertTrue ( handle . isPresent (  )  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["testTopicExists"], "fileName": "com.facebook.presto.kafka.TestMinimalFunctionality"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   result    =    queryRunner . execute (  (  \" SELECT   count (  1  )    from    \"     +     ( topicName )  )  )  ;", "MaterializedResult   expected    =    MaterializedResult . resultBuilder (  . SESSION ,    BIGINT )  . row (  0 L )  . build (  )  ;", "assertEquals ( result ,    expected )  ;", "int   count    =     1  0  0  0  ;", "createMessages ( topicName ,    count )  ;", "result    =    queryRunner . execute (  (  \" SELECT   count (  1  )    from    \"     +     ( topicName )  )  )  ;", "expected    =    MaterializedResult . resultBuilder (  . SESSION ,    BIGINT )  . row (  (  ( long )     ( count )  )  )  . build (  )  ;", "assertEquals ( result ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testTopicHasData"], "fileName": "com.facebook.presto.kafka.TestMinimalFunctionality"}, {"methodBody": ["METHOD_START", "{", "return   new   EmbeddedKafka ( new   EmbeddedZookeeper (  )  ,    new   Properties (  )  )  ;", "}", "METHOD_END"], "methodName": ["createEmbeddedKafka"], "fileName": "com.facebook.presto.kafka.util.EmbeddedKafka"}, {"methodBody": ["METHOD_START", "{", "return   new   EmbeddedKafka ( new   EmbeddedZookeeper (  )  ,    overrideProperties )  ;", "}", "METHOD_END"], "methodName": ["createEmbeddedKafka"], "fileName": "com.facebook.presto.kafka.util.EmbeddedKafka"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    properties    =    ImmutableMap .  < String ,    String > builder (  )  . put (  \" metadata . broker . list \"  ,    getConnectString (  )  )  . put (  \" serializer . class \"  ,    JsonEncoder . class . getName (  )  )  . put (  \" key . serializer . class \"  ,    NumberEncoder . class . getName (  )  )  . put (  \" partitioner . class \"  ,    NumberPartitioner . class . getName (  )  )  . put (  \" request . required . acks \"  ,     \"  1  \"  )  . build (  )  ;", "ProducerConfig   producerConfig    =    new   ProducerConfig ( TestUtils . toProperties ( properties )  )  ;", "return   new    . CloseableProducer ( producerConfig )  ;", "}", "METHOD_END"], "methodName": ["createProducer"], "fileName": "com.facebook.presto.kafka.util.EmbeddedKafka"}, {"methodBody": ["METHOD_START", "{", "checkState (  (  ( started . get (  )  )     &  &     (  !  ( stopped . get (  )  )  )  )  ,     \" not   started !  \"  )  ;", "ZkClient   zkClient    =    new   ZkClient ( getZookeeperConnectString (  )  ,     3  0  0  0  0  ,     3  0  0  0  0  ,    ZKStringSerializer $  . MODULE $  )  ;", "try    {", "for    ( String   topic    :    topics )     {", "AdminUtils . createTopic ( zkClient ,    topic ,    partitions ,    replication ,    topicProperties )  ;", "}", "}    finally    {", "zkClient . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["createTopics"], "fileName": "com.facebook.presto.kafka.util.EmbeddedKafka"}, {"methodBody": ["METHOD_START", "{", "createTopics (  2  ,     1  ,    new   Properties (  )  ,    topics )  ;", "}", "METHOD_END"], "methodName": ["createTopics"], "fileName": "com.facebook.presto.kafka.util.EmbeddedKafka"}, {"methodBody": ["METHOD_START", "{", "return    \" localhost :  \"     +     ( Integer . toString ( port )  )  ;", "}", "METHOD_END"], "methodName": ["getConnectString"], "fileName": "com.facebook.presto.kafka.util.EmbeddedKafka"}, {"methodBody": ["METHOD_START", "{", "return   port ;", "}", "METHOD_END"], "methodName": ["getPort"], "fileName": "com.facebook.presto.kafka.util.EmbeddedKafka"}, {"methodBody": ["METHOD_START", "{", "return   zookeeper . getConnectString (  )  ;", "}", "METHOD_END"], "methodName": ["getZookeeperConnectString"], "fileName": "com.facebook.presto.kafka.util.EmbeddedKafka"}, {"methodBody": ["METHOD_START", "{", "return   zookeeper . getPort (  )  ;", "}", "METHOD_END"], "methodName": ["getZookeeperPort"], "fileName": "com.facebook.presto.kafka.util.EmbeddedKafka"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( started . getAndSet ( true )  )  )     {", "zookeeper . start (  )  ;", "startup (  )  ;", "}", "}", "METHOD_END"], "methodName": ["start"], "fileName": "com.facebook.presto.kafka.util.EmbeddedKafka"}, {"methodBody": ["METHOD_START", "{", "return    \"  1  2  7  .  0  .  0  .  1  :  \"     +     ( Integer . toString ( port )  )  ;", "}", "METHOD_END"], "methodName": ["getConnectString"], "fileName": "com.facebook.presto.kafka.util.EmbeddedZookeeper"}, {"methodBody": ["METHOD_START", "{", "return   port ;", "}", "METHOD_END"], "methodName": ["getPort"], "fileName": "com.facebook.presto.kafka.util.EmbeddedZookeeper"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( started . getAndSet ( true )  )  )     {", "cnxnFactory . startup ( zkServer )  ;", "}", "}", "METHOD_END"], "methodName": ["start"], "fileName": "com.facebook.presto.kafka.util.EmbeddedZookeeper"}, {"methodBody": ["METHOD_START", "{", "return   new   AbstractMap . SimpleImmutableEntry ( schemaTableName ,    new   KafkaTopicDescription ( schemaTableName . getTableName (  )  ,    schemaTableName . getSchemaName (  )  ,    topicName ,    null ,    null )  )  ;", "}", "METHOD_END"], "methodName": ["createEmptyTopicDescription"], "fileName": "com.facebook.presto.kafka.util.TestUtils"}, {"methodBody": ["METHOD_START", "{", "try    ( ServerSocket   socket    =    new   ServerSocket (  0  )  )     {", "turn   socket . getLocalPort (  )  ;", "}", "}", "METHOD_END"], "methodName": ["findUnusedPort"], "fileName": "com.facebook.presto.kafka.util.TestUtils"}, {"methodBody": ["METHOD_START", "{", "KafkaPlugin   lugin    =    new   KafkaPlugin (  )  ;", "lugin . setTableDescriptionSupplier (  (  )     -  >    topicDescriptions )  ;", "queryRunner . installPlugin ( lugin )  ;", "Map < String ,    String >    onfig    =    ImmutableMap . of (  \" nodes \"  ,    embeddedKafka . getConnectString (  )  ,     \" table - names \"  ,    Joiner . on (  \"  ,  \"  )  . join ( topicDescriptions . keySet (  )  )  ,     \" connect - timeout \"  ,     \"  1  2  0 s \"  ,     \" default - schema \"  ,     \" default \"  )  ;", "queryRunner . createCatalog (  \"  ,     \"  ,    onfig )  ;", "}", "METHOD_END"], "methodName": ["installKafkaPlugin"], "fileName": "com.facebook.presto.kafka.util.TestUtils"}, {"methodBody": ["METHOD_START", "{", "try    ( EmbeddedKafka . CloseableProducer < Long ,    Object >    producer    =    embeddedKafka . createProducer (  )  ; KafkaLoader   tpchLoader    =    new   KafkaLoader ( producer ,    topicName ,    prestoClient . getServer (  )  ,    prestoClient . getDefaultSession (  )  )  )     {", "tpchLoader . execute ( String . format (  \" SELECT    *    from    % s \"  ,    tpchTableName )  )  ;", "}", "}", "METHOD_END"], "methodName": ["loadTpchTopic"], "fileName": "com.facebook.presto.kafka.util.TestUtils"}, {"methodBody": ["METHOD_START", "{", "KafkaTopicDescription   tpchTemplate    =    topicDescriptionJsonCodec . fromJson ( ByteStreams . toByteArray ( TestUtils . class . getResourceAsStream ( String . format (  \"  / tpch /  % s . json \"  ,    schemaTableName . getTableName (  )  )  )  )  )  ;", "return   new   AbstractMap . SimpleImmutableEntry ( schemaTableName ,    new   KafkaTopicDescription ( schemaTableName . getTableName (  )  ,    schemaTableName . getSchemaName (  )  ,    topicName ,    tpchTemplate . getKey (  )  ,    tpchTemplate . getMessage (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["loadTpchTopicDescription"], "fileName": "com.facebook.presto.kafka.util.TestUtils"}, {"methodBody": ["METHOD_START", "{", "Properties   properties    =    new   Properties (  )  ;", "for    ( Map . Entry < String ,    String >    entry    :    map . entrySet (  )  )     {", "properties . setProperty ( entry . getKey (  )  ,    entry . getValue (  )  )  ;", "}", "return   properties ;", "}", "METHOD_END"], "methodName": ["toProperties"], "fileName": "com.facebook.presto.kafka.util.TestUtils"}]