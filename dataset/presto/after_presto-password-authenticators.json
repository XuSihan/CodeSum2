[{"methodBody": ["METHOD_START", "{", "return   authenticate ( credentials . getUser (  )  ,    credentials . getPassword (  )  )  ;", "}", "METHOD_END"], "methodName": ["authenticate"], "fileName": "com.facebook.presto.password.LdapAuthenticator"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    environment    =    createEnvironment ( user ,    password )  ;", "DirContext   context    =    null ;", "try    {", "context    =    JndiUtils . createDirContext ( environment )  ;", "checkForGroupMembership ( user ,    context )  ;", ". log . debug (  \" Authentication   successful   for   user    [  % s ]  \"  ,    user )  ;", "return   new   BasicPrincipal ( user )  ;", "}    catch    ( AuthenticationException   e )     {", ". log . debug (  \" Authentication   failed   for   user    [  % s ]  :     % s \"  ,    user ,    e . getMessage (  )  )  ;", "throw   new   AccessDeniedException (  \" Invalid   credentials \"  )  ;", "}    catch    ( NamingException   e )     {", ". log . debug ( e ,     \" Authentication   error   for   user    [  % s ]  \"  ,    user )  ;", "throw   new   RuntimeException (  \" Authentication   error \"  )  ;", "}    finally    {", "if    ( context    !  =    null )     {", ". closeContext ( context )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["authenticate"], "fileName": "com.facebook.presto.password.LdapAuthenticator"}, {"methodBody": ["METHOD_START", "{", "try    {", ". closeContext ( JndiUtils . createDirContext ( environment )  )  ;", "}    catch    ( NamingException   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["checkEnvironment"], "fileName": "com.facebook.presto.password.LdapAuthenticator"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( groupAuthorizationSearchPattern . isPresent (  )  )  )     {", "return ;", "}", "String   userBase    =    userBaseDistinguishedName . orElseThrow ( VerifyException :  : new )  ;", "String   searchFilter    =     . replaceUser ( groupAuthorizationSearchPattern . get (  )  ,    user )  ;", "SearchControls   searchControls    =    new   SearchControls (  )  ;", "searchControls . setSearchScope ( SearchControls . SUBTREE _ SCOPE )  ;", "boolean   authorized ;", "try    {", "NamingEnumeration < SearchResult >    search    =    context . search ( userBase ,    searchFilter ,    searchControls )  ;", "authorized    =    search . hasMoreElements (  )  ;", "search . close (  )  ;", "}    catch    ( NamingException   e )     {", ". log . debug (  \" Authentication   error   for   user    [  % s ]  :     % s \"  ,    user ,    e . getMessage (  )  )  ;", "throw   new   RuntimeException (  \" Authentication   error \"  )  ;", "}", "if    (  ! authorized )     {", "String   message    =    String . format (  \" User    [  % s ]    not   a   member   of   the   authorized   group \"  ,    user )  ;", ". log . debug ( message )  ;", "throw   new   AccessDeniedException ( message )  ;", "}", "}", "METHOD_END"], "methodName": ["checkForGroupMembership"], "fileName": "com.facebook.presto.password.LdapAuthenticator"}, {"methodBody": ["METHOD_START", "{", "try    {", "context . close (  )  ;", "}    ch    ( NamingException   ignored )     {", "}", "}", "METHOD_END"], "methodName": ["closeContext"], "fileName": "com.facebook.presto.password.LdapAuthenticator"}, {"methodBody": ["METHOD_START", "{", "return   ImmutableMap .  < String ,    String > builder (  )  . putAll ( basicEnvironment )  . put ( Context . SECURITY _ AUTHENTICATION ,     \" simple \"  )  . put ( Context . SECURITY _ PRINCIPAL ,    createPrincipal ( user )  )  . put ( Context . SECURITY _ CREDENTIALS ,    password )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["createEnvironment"], "fileName": "com.facebook.presto.password.LdapAuthenticator"}, {"methodBody": ["METHOD_START", "{", "return   LdapAuthenticator . replaceUser ( userBindSearchPattern ,    user )  ;", "}", "METHOD_END"], "methodName": ["createPrincipal"], "fileName": "com.facebook.presto.password.LdapAuthenticator"}, {"methodBody": ["METHOD_START", "{", "return   pattern . replaceAll (  \"  \\  \\  $  \\  \\  { USER }  \"  ,    user )  ;", "}", "METHOD_END"], "methodName": ["replaceUser"], "fileName": "com.facebook.presto.password.LdapAuthenticator"}, {"methodBody": ["METHOD_START", "{", "return   groupAuthorizationSearchPattern ;", "}", "METHOD_END"], "methodName": ["getGroupAuthorizationSearchPattern"], "fileName": "com.facebook.presto.password.LdapConfig"}, {"methodBody": ["METHOD_START", "{", "return   ldapCacheTtl ;", "}", "METHOD_END"], "methodName": ["getLdapCacheTtl"], "fileName": "com.facebook.presto.password.LdapConfig"}, {"methodBody": ["METHOD_START", "{", "return   ldapUrl ;", "}", "METHOD_END"], "methodName": ["getLdapUrl"], "fileName": "com.facebook.presto.password.LdapConfig"}, {"methodBody": ["METHOD_START", "{", "return   userBaseDistinguishedName ;", "}", "METHOD_END"], "methodName": ["getUserBaseDistinguishedName"], "fileName": "com.facebook.presto.password.LdapConfig"}, {"methodBody": ["METHOD_START", "{", "return   userBindSearchPattern ;", "}", "METHOD_END"], "methodName": ["getUserBindSearchPattern"], "fileName": "com.facebook.presto.password.LdapConfig"}, {"methodBody": ["METHOD_START", "{", "this . groupAuthorizationSearchPattern    =    groupAuthorizationSearchPattern ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setGroupAuthorizationSearchPattern"], "fileName": "com.facebook.presto.password.LdapConfig"}, {"methodBody": ["METHOD_START", "{", "this . ldapCacheTtl    =    ldapCacheTtl ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setLdapCacheTtl"], "fileName": "com.facebook.presto.password.LdapConfig"}, {"methodBody": ["METHOD_START", "{", "this . ldapUrl    =    url ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setLdapUrl"], "fileName": "com.facebook.presto.password.LdapConfig"}, {"methodBody": ["METHOD_START", "{", "this . userBaseDistinguishedName    =    userBaseDistinguishedName ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setUserBaseDistinguishedName"], "fileName": "com.facebook.presto.password.LdapConfig"}, {"methodBody": ["METHOD_START", "{", "this . userBindSearchPattern    =    userBindSearchPattern ;", "turn   this ;", "}", "METHOD_END"], "methodName": ["setUserBindSearchPattern"], "fileName": "com.facebook.presto.password.LdapConfig"}, {"methodBody": ["METHOD_START", "{", "ConfigAssertions . assertRecordedDefaults ( ConfigAssertions . recordDefaults ( LdapConfig . class )  . setLdapUrl ( null )  . setUserBindSearchPattern ( null )  . setUserBaseDistinguishedName ( null )  . setGroupAuthorizationSearchPattern ( null )  . setLdapCacheTtl ( new   Duration (  1  ,    TimeUnit . HOURS )  )  )  ;", "}", "METHOD_END"], "methodName": ["testDefault"], "fileName": "com.facebook.presto.password.TestLdapConfig"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    properties    =    new   Builder < String ,    String >  (  )  . put (  \" ldap . url \"  ,     \" ldaps :  /  / localhost :  6  3  6  \"  )  . put (  \" ldap . user - bind - pattern \"  ,     \" uid =  $  { USER }  , ou = org , dc = test , dc = com \"  )  . put (  \" ldap . user - base - dn \"  ,     \" dc = test , dc = com \"  )  . put (  \" ldap . group - auth - pattern \"  ,     \"  &  ( objectClass = user )  ( memberOf = cn = group )  ( user = username )  \"  )  . put (  \" ldap . cache - ttl \"  ,     \"  2 m \"  )  . build (  )  ;", "expected    =    new    (  )  . setLdapUrl (  \" ldaps :  /  / localhost :  6  3  6  \"  )  . setUserBindSearchPattern (  \" uid =  $  { USER }  , ou = org , dc = test , dc = com \"  )  . setUserBaseDistinguishedName (  \" dc = test , dc = com \"  )  . setGroupAuthorizationSearchPattern (  \"  &  ( objectClass = user )  ( memberOf = cn = group )  ( user = username )  \"  )  . setLdapCacheTtl ( new   Duration (  2  ,    TimeUnit . MINUTES )  )  ;", "ConfigAssertions . assertFullMapping ( properties ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testExplicitConfig"], "fileName": "com.facebook.presto.password.TestLdapConfig"}, {"methodBody": ["METHOD_START", "{", "ValidationAssertions . assertValidates ( new   LdapConfig (  )  . setLdapUrl (  \" ldaps :  /  / localhost \"  )  . setUserBindSearchPattern (  \" uid =  $  { USER }  , ou = org , dc = test , dc = com \"  )  . setUserBaseDistinguishedName (  \" dc = test , dc = com \"  )  . setGroupAuthorizationSearchPattern (  \"  &  ( objectClass = user )  ( memberOf = cn = group )  ( user = username )  \"  )  )  ;", "ValidationAssertions . assertFailsValidation ( new   LdapConfig (  )  . setLdapUrl (  \" ldap :  /  /  \"  )  ,     \" ldapUrl \"  ,     \" LDAP   without   SSL / TLS   unsupported .    Expected   ldaps :  /  /  \"  ,    Pattern . class )  ;", "ValidationAssertions . assertFailsValidation ( new   LdapConfig (  )  . setLdapUrl (  \" localhost \"  )  ,     \" ldapUrl \"  ,     \" LDAP   without   SSL / TLS   unsupported .    Expected   ldaps :  /  /  \"  ,    Pattern . class )  ;", "ValidationAssertions . assertFailsValidation ( new   LdapConfig (  )  . setLdapUrl (  \" ldaps :  / localhost \"  )  ,     \" ldapUrl \"  ,     \" LDAP   without   SSL / TLS   unsupported .    Expected   ldaps :  /  /  \"  ,    Pattern . class )  ;", "ValidationAssertions . assertFailsValidation ( new   LdapConfig (  )  ,     \" ldapUrl \"  ,     \" may   not   be   null \"  ,    NotNull . class )  ;", "ValidationAssertions . assertFailsValidation ( new   LdapConfig (  )  ,     \" userBindSearchPattern \"  ,     \" may   not   be   null \"  ,    NotNull . class )  ;", "}", "METHOD_END"], "methodName": ["testValidation"], "fileName": "com.facebook.presto.password.TestLdapConfig"}, {"methodBody": ["METHOD_START", "{", "return   new   InitialDirContext ( new   Hashtable <  >  ( environment )  )  ;", "}", "METHOD_END"], "methodName": ["createDirContext"], "fileName": "com.facebook.presto.password.jndi.JndiUtils"}]