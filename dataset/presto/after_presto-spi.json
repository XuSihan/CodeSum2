[{"methodBody": ["METHOD_START", "{", "return   catalogName ;", "}", "METHOD_END"], "methodName": ["getCatalogName"], "fileName": "com.facebook.presto.spi.CatalogSchemaName"}, {"methodBody": ["METHOD_START", "{", "return   schemaName ;", "}", "METHOD_END"], "methodName": ["getSchemaName"], "fileName": "com.facebook.presto.spi.CatalogSchemaName"}, {"methodBody": ["METHOD_START", "{", "return   catalogName ;", "}", "METHOD_END"], "methodName": ["getCatalogName"], "fileName": "com.facebook.presto.spi.CatalogSchemaTableName"}, {"methodBody": ["METHOD_START", "{", "return   schemaTableName ;", "}", "METHOD_END"], "methodName": ["getSchemaTableName"], "fileName": "com.facebook.presto.spi.CatalogSchemaTableName"}, {"methodBody": ["METHOD_START", "{", "return   comment ;", "}", "METHOD_END"], "methodName": ["getComment"], "fileName": "com.facebook.presto.spi.ColumnMetadata"}, {"methodBody": ["METHOD_START", "{", "return   extraInfo ;", "}", "METHOD_END"], "methodName": ["getExtraInfo"], "fileName": "com.facebook.presto.spi.ColumnMetadata"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.spi.ColumnMetadata"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.facebook.presto.spi.ColumnMetadata"}, {"methodBody": ["METHOD_START", "{", "return   hidden ;", "}", "METHOD_END"], "methodName": ["isHidden"], "fileName": "com.facebook.presto.spi.ColumnMetadata"}, {"methodBody": ["METHOD_START", "{", "return   columnName ;", "}", "METHOD_END"], "methodName": ["getColumnName"], "fileName": "com.facebook.presto.spi.ColumnNotFoundException"}, {"methodBody": ["METHOD_START", "{", "return   tableName ;", "}", "METHOD_END"], "methodName": ["getTableName"], "fileName": "com.facebook.presto.spi.ColumnNotFoundException"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getIndexHandleClass"], "fileName": "com.facebook.presto.spi.ConnectorHandleResolver"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getInsertTableHandleClass"], "fileName": "com.facebook.presto.spi.ConnectorHandleResolver"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getOutputTableHandleClass"], "fileName": "com.facebook.presto.spi.ConnectorHandleResolver"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getPartitioningHandleClass"], "fileName": "com.facebook.presto.spi.ConnectorHandleResolver"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getTransactionHandleClass"], "fileName": "com.facebook.presto.spi.ConnectorHandleResolver"}, {"methodBody": ["METHOD_START", "{", "return   partitionColumns ;", "}", "METHOD_END"], "methodName": ["getPartitionColumns"], "fileName": "com.facebook.presto.spi.ConnectorNewTableLayout"}, {"methodBody": ["METHOD_START", "{", "return   partitioning ;", "}", "METHOD_END"], "methodName": ["getPartitioning"], "fileName": "com.facebook.presto.spi.ConnectorNewTableLayout"}, {"methodBody": ["METHOD_START", "{", "return    0  ;", "}", "METHOD_END"], "methodName": ["getCompletedBytes"], "fileName": "com.facebook.presto.spi.ConnectorPageSink"}, {"methodBody": ["METHOD_START", "{", "return    0  ;", "}", "METHOD_END"], "methodName": ["getSystemMemoryUsage"], "fileName": "com.facebook.presto.spi.ConnectorPageSink"}, {"methodBody": ["METHOD_START", "{", "return   ConnectorPageSource . NOT _ BLOCKED ;", "}", "METHOD_END"], "methodName": ["isBlocked"], "fileName": "com.facebook.presto.spi.ConnectorPageSource"}, {"methodBody": ["METHOD_START", "{", "return   indexHandle ;", "}", "METHOD_END"], "methodName": ["getIndexHandle"], "fileName": "com.facebook.presto.spi.ConnectorResolvedIndex"}, {"methodBody": ["METHOD_START", "{", "return   unresolvedTupleDomain ;", "}", "METHOD_END"], "methodName": ["getUnresolvedTupleDomain"], "fileName": "com.facebook.presto.spi.ConnectorResolvedIndex"}, {"methodBody": ["METHOD_START", "{", "return   getIdentity (  )  . getUser (  )  ;", "}", "METHOD_END"], "methodName": ["getUser"], "fileName": "com.facebook.presto.spi.ConnectorSession"}, {"methodBody": ["METHOD_START", "{", "return   columns ;", "}", "METHOD_END"], "methodName": ["getColumns"], "fileName": "com.facebook.presto.spi.ConnectorTableLayout"}, {"methodBody": ["METHOD_START", "{", "return   discretePredicates ;", "}", "METHOD_END"], "methodName": ["getDiscretePredicates"], "fileName": "com.facebook.presto.spi.ConnectorTableLayout"}, {"methodBody": ["METHOD_START", "{", "return   handle ;", "}", "METHOD_END"], "methodName": ["getHandle"], "fileName": "com.facebook.presto.spi.ConnectorTableLayout"}, {"methodBody": ["METHOD_START", "{", "return   localProperties ;", "}", "METHOD_END"], "methodName": ["getLocalProperties"], "fileName": "com.facebook.presto.spi.ConnectorTableLayout"}, {"methodBody": ["METHOD_START", "{", "return   predicate ;", "}", "METHOD_END"], "methodName": ["getPredicate"], "fileName": "com.facebook.presto.spi.ConnectorTableLayout"}, {"methodBody": ["METHOD_START", "{", "return   streamPartitioningColumns ;", "}", "METHOD_END"], "methodName": ["getStreamPartitioningColumns"], "fileName": "com.facebook.presto.spi.ConnectorTableLayout"}, {"methodBody": ["METHOD_START", "{", "return   tablePartitioning ;", "}", "METHOD_END"], "methodName": ["getTablePartitioning"], "fileName": "com.facebook.presto.spi.ConnectorTableLayout"}, {"methodBody": ["METHOD_START", "{", "return   layout ;", "}", "METHOD_END"], "methodName": ["getTableLayout"], "fileName": "com.facebook.presto.spi.ConnectorTableLayoutResult"}, {"methodBody": ["METHOD_START", "{", "return   unenforcedConstraint ;", "}", "METHOD_END"], "methodName": ["getUnenforcedConstraint"], "fileName": "com.facebook.presto.spi.ConnectorTableLayoutResult"}, {"methodBody": ["METHOD_START", "{", "return   columns ;", "}", "METHOD_END"], "methodName": ["getColumns"], "fileName": "com.facebook.presto.spi.ConnectorTableMetadata"}, {"methodBody": ["METHOD_START", "{", "return   comment ;", "}", "METHOD_END"], "methodName": ["getComment"], "fileName": "com.facebook.presto.spi.ConnectorTableMetadata"}, {"methodBody": ["METHOD_START", "{", "return   properties ;", "}", "METHOD_END"], "methodName": ["getProperties"], "fileName": "com.facebook.presto.spi.ConnectorTableMetadata"}, {"methodBody": ["METHOD_START", "{", "return   table ;", "}", "METHOD_END"], "methodName": ["getTable"], "fileName": "com.facebook.presto.spi.ConnectorTableMetadata"}, {"methodBody": ["METHOD_START", "{", "return   partitioningColumns ;", "}", "METHOD_END"], "methodName": ["getPartitioningColumns"], "fileName": "com.facebook.presto.spi.ConnectorTablePartitioning"}, {"methodBody": ["METHOD_START", "{", "return   partitioningHandle ;", "}", "METHOD_END"], "methodName": ["getPartitioningHandle"], "fileName": "com.facebook.presto.spi.ConnectorTablePartitioning"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.spi.ConnectorViewDefinition"}, {"methodBody": ["METHOD_START", "{", "return   owner ;", "}", "METHOD_END"], "methodName": ["getOwner"], "fileName": "com.facebook.presto.spi.ConnectorViewDefinition"}, {"methodBody": ["METHOD_START", "{", "return   viewData ;", "}", "METHOD_END"], "methodName": ["getViewData"], "fileName": "com.facebook.presto.spi.ConnectorViewDefinition"}, {"methodBody": ["METHOD_START", "{", "return   column ;", "}", "METHOD_END"], "methodName": ["getColumn"], "fileName": "com.facebook.presto.spi.ConstantProperty"}, {"methodBody": ["METHOD_START", "{", "return   Collections . singleton ( column )  ;", "}", "METHOD_END"], "methodName": ["getColumns"], "fileName": "com.facebook.presto.spi.ConstantProperty"}, {"methodBody": ["METHOD_START", "{", "return   new   Constraint <  >  ( TupleDomain .  < V > none (  )  ,     (    bindings )     -  >    false )  ;", "}", "METHOD_END"], "methodName": ["alwaysFalse"], "fileName": "com.facebook.presto.spi.Constraint"}, {"methodBody": ["METHOD_START", "{", "return   new   Constraint <  >  ( TupleDomain .  < V > all (  )  ,     (    bindings )     -  >    true )  ;", "}", "METHOD_END"], "methodName": ["alwaysTrue"], "fileName": "com.facebook.presto.spi.Constraint"}, {"methodBody": ["METHOD_START", "{", "return   summary ;", "}", "METHOD_END"], "methodName": ["getSummary"], "fileName": "com.facebook.presto.spi.Constraint"}, {"methodBody": ["METHOD_START", "{", "return   predicate ;", "}", "METHOD_END"], "methodName": ["predicate"], "fileName": "com.facebook.presto.spi.Constraint"}, {"methodBody": ["METHOD_START", "{", "return   columns ;", "}", "METHOD_END"], "methodName": ["getColumns"], "fileName": "com.facebook.presto.spi.DiscretePredicates"}, {"methodBody": ["METHOD_START", "{", "return   predicates ;", "}", "METHOD_END"], "methodName": ["getPredicates"], "fileName": "com.facebook.presto.spi.DiscretePredicates"}, {"methodBody": ["METHOD_START", "{", "return   code ;", "}", "METHOD_END"], "methodName": ["getCode"], "fileName": "com.facebook.presto.spi.ErrorCode"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.spi.ErrorCode"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.facebook.presto.spi.ErrorCode"}, {"methodBody": ["METHOD_START", "{", "return   columns ;", "}", "METHOD_END"], "methodName": ["getColumns"], "fileName": "com.facebook.presto.spi.GroupingProperty"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( HostAddress . isValidPort ( port )  )  )     {", "throw   new   IllegalArgumentException (  (  \" Port   is   invalid :     \"     +    port )  )  ;", "}", "HostAddress   parsedHost    =    HostAddress . fromString ( host )  ;", "if    ( parsedHost . hasPort (  )  )     {", "throw   new   IllegalArgumentException (  (  \" host   contains   a   port   declaration :     \"     +    host )  )  ;", "}", "return   new   HostAddress ( parsedHost . host ,    port )  ;", "}", "METHOD_END"], "methodName": ["fromParts"], "fileName": "com.facebook.presto.spi.HostAddress"}, {"methodBody": ["METHOD_START", "{", "if    ( hostPortString    =  =    null )     {", "throw   new   NullPointerException (  \" hostPortString   is   null \"  )  ;", "}", "String   host ;", "String   portString    =    null ;", "if    ( hostPortString . startsWith (  \"  [  \"  )  )     {", "Matcher   matcher    =     . BRACKET _ PATTERN . matcher ( hostPortString )  ;", "if    (  !  ( matcher . matches (  )  )  )     {", "throw   new   IllegalArgumentException (  (  \" Invalid   bracketed   host / port :     \"     +    hostPortString )  )  ;", "}", "host    =    matcher . group (  1  )  ;", "portString    =    matcher . group (  2  )  ;", "} else    {", "int   colonPos    =    hostPortString . indexOf (  '  :  '  )  ;", "if    (  ( colonPos    >  =     0  )     &  &     (  ( hostPortString . indexOf (  '  :  '  ,     ( colonPos    +     1  )  )  )     =  =     (  -  1  )  )  )     {", "host    =    hostPortString . substring (  0  ,    colonPos )  ;", "portString    =    hostPortString . substring (  ( colonPos    +     1  )  )  ;", "} else    {", "host    =    hostPortString ;", "}", "}", "int   port    =     . NO _ PORT ;", "if    (  ( portString    !  =    null )     &  &     (  ( portString . length (  )  )     !  =     0  )  )     {", "if    ( portString . startsWith (  \"  +  \"  )  )     {", "throw   new   IllegalArgumentException (  (  \" Unparseable   port   number :     \"     +    hostPortString )  )  ;", "}", "try    {", "port    =    Integer . parseInt ( portString )  ;", "}    catch    ( NumberFormatException   e )     {", "throw   new   IllegalArgumentException (  (  \" Unparseable   port   number :     \"     +    hostPortString )  )  ;", "}", "if    (  !  (  . isValidPort ( port )  )  )     {", "throw   new   IllegalArgumentException (  (  \" Port   number   out   of   range :     \"     +    hostPortString )  )  ;", "}", "}", "return   new    ( host ,    port )  ;", "}", "METHOD_END"], "methodName": ["fromString"], "fileName": "com.facebook.presto.spi.HostAddress"}, {"methodBody": ["METHOD_START", "{", "String   host    =    httpUri . getHost (  )  ;", "int   port    =    httpUri . getPort (  )  ;", "if    ( port    <     0  )     {", "return    . fromString ( host )  ;", "} else    {", "return    . fromParts ( host ,    port )  ;", "}", "}", "METHOD_END"], "methodName": ["fromUri"], "fileName": "com.facebook.presto.spi.HostAddress"}, {"methodBody": ["METHOD_START", "{", "return   host ;", "}", "METHOD_END"], "methodName": ["getHostText"], "fileName": "com.facebook.presto.spi.HostAddress"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( hasPort (  )  )  )     {", "throw   new   IllegalStateExption (  \" no   port \"  )  ;", "}", "return   port ;", "}", "METHOD_END"], "methodName": ["getPort"], "fileName": "com.facebook.presto.spi.HostAddress"}, {"methodBody": ["METHOD_START", "{", "return   hasPort (  )     ?    port    :    defaultPort ;", "}", "METHOD_END"], "methodName": ["getPortOrDefault"], "fileName": "com.facebook.presto.spi.HostAddress"}, {"methodBody": ["METHOD_START", "{", "return    ( port )     >  =     0  ;", "}", "METHOD_END"], "methodName": ["hasPort"], "fileName": "com.facebook.presto.spi.HostAddress"}, {"methodBody": ["METHOD_START", "{", "return    ( port    >  =     0  )     &  &     ( port    <  =     6  5  5  3  5  )  ;", "}", "METHOD_END"], "methodName": ["isValidPort"], "fileName": "com.facebook.presto.spi.HostAddress"}, {"methodBody": ["METHOD_START", "{", "return   InetAddress . getByName ( getHostText (  )  )  ;", "}", "METHOD_END"], "methodName": ["toInetAddress"], "fileName": "com.facebook.presto.spi.HostAddress"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( HostAddress . isValidPort ( defaultPort )  )  )     {", "throw   new   IllegalArgumentException (  (  \" Port   number   out   of   range :     \"     +    defaultPort )  )  ;", "}", "if    (  ( hasPort (  )  )     |  |     (  ( port )     =  =    defaultPort )  )     {", "return   this ;", "}", "return   new   HostAddress ( host ,    defaultPort )  ;", "}", "METHOD_END"], "methodName": ["withDefaultPort"], "fileName": "com.facebook.presto.spi.HostAddress"}, {"methodBody": ["METHOD_START", "{", "return   InMemoryRecordSet . builder ( tableMetadata . getColumns (  )  )  ;", "}", "METHOD_END"], "methodName": ["builder"], "fileName": "com.facebook.presto.spi.InMemoryRecordSet"}, {"methodBody": ["METHOD_START", "{", "return   new   InMemoryRecordSet . Builder ( columnsTypes )  ;", "}", "METHOD_END"], "methodName": ["builder"], "fileName": "com.facebook.presto.spi.InMemoryRecordSet"}, {"methodBody": ["METHOD_START", "{", "List < Type >    columnTypes    =    new   ArrayList <  >  (  )  ;", "for    ( ColumnMetadata   column    :    columns )     {", "columnTypes . add ( column . getType (  )  )  ;", "}", "return    . builder ( columnTypes )  ;", "}", "METHOD_END"], "methodName": ["builder"], "fileName": "com.facebook.presto.spi.InMemoryRecordSet"}, {"methodBody": ["METHOD_START", "{", "if    (  ! test )     {", "throw   new   IllegalArgumentException ( String . format ( message ,    args )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkArgument"], "fileName": "com.facebook.presto.spi.InMemoryRecordSet"}, {"methodBody": ["METHOD_START", "{", "if    ( value    =  =    null )     {", "throw   new   NullPointerExption ( message )  ;", "}", "}", "METHOD_END"], "methodName": ["checkNotNull"], "fileName": "com.facebook.presto.spi.InMemoryRecordSet"}, {"methodBody": ["METHOD_START", "{", "if    (  ! test )     {", "throw   new   IllegalStateException ( message )  ;", "}", "}", "METHOD_END"], "methodName": ["checkState"], "fileName": "com.facebook.presto.spi.InMemoryRecordSet"}, {"methodBody": ["METHOD_START", "{", "long   completedBytes    =     0  ;", "for    ( Object   value    :    record )     {", "if    ( value    =  =    null )     {", "} else", "if    ( value   instanceof   Boolean )     {", "completedBytes +  +  ;", "} else", "if    ( value   instanceof   Number )     {", "completedBytes    +  =     8  ;", "} else", "if    ( value   instanceof   String )     {", "completedBytes    +  =     (  ( String )     ( value )  )  . length (  )  ;", "} else", "if    ( value   instanceof   byte [  ]  )     {", "completedBytes    +  =     (  ( byte [  ]  )     ( value )  )  . length ;", "} else", "if    ( value   instanceof   block . Block )     {", "completedBytes    +  =     (  ( block . Block )     ( value )  )  . getSizeInBytes (  )  ;", "} else", "if    ( value   instanceof   io . airlift . slice . Slice )     {", "completedBytes    +  =     (  ( io . airlift . slice . Slice )     ( value )  )  . getBytes (  )  . length ;", "} else    {", "throw   new   IllegalArgumentException (  (  \" Unknown   type :     \"     +     ( value . getClass (  )  )  )  )  ;", "}", "}", "return   completedBytes ;", "}", "METHOD_END"], "methodName": ["sizeOf"], "fileName": "com.facebook.presto.spi.InMemoryRecordSet"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( columns . equals ( getColumns (  )  )  )  )     {", "throw   new   IllegalArgumentException ( String . format (  \" Cannot   constrain    % s   with    % s \"  ,    this ,    columns )  )  ;", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["constrain"], "fileName": "com.facebook.presto.spi.LocalProperty"}, {"methodBody": ["METHOD_START", "{", "Set < E >    set    =    new   HashSet <  >  ( getColumns (  )  )  ;", "set . moveAll ( constants )  ;", "if    ( set . isEmpty (  )  )     {", "turn   Optional . empty (  )  ;", "}", "turn   Optional . of ( constrain ( set )  )  ;", "}", "METHOD_END"], "methodName": ["withConstants"], "fileName": "com.facebook.presto.spi.LocalProperty"}, {"methodBody": ["METHOD_START", "{", "Set < Node >    nodes    =    getWorkerNodes (  )  ;", "if    ( nodes . isEmpty (  )  )     {", "throw   new   PException ( StandardErrorCode . NO _ NODES _ AVAILABLE ,     \" No   nodes   available   to   run   query \"  )  ;", "}", "return   nodes ;", "}", "METHOD_END"], "methodName": ["getRequiredWorkerNodes"], "fileName": "com.facebook.presto.spi.NodeManager"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( block ,     \" block   is   null \"  )  ;", "if    (  ( positionCount )     !  =     ( block . getPositionCount (  )  )  )     {", "throw   new   IllegalArgumentException (  \" Block   does   not   have   same   position   count \"  )  ;", "}", "Block [  ]    newBlocks    =    Arrays . copyOf ( blocks ,     (  ( blocks . length )     +     1  )  )  ;", "newBlocks [ blocks . length ]     =    block ;", "return   new    ( newBlocks )  ;", "}", "METHOD_END"], "methodName": ["appendColumn"], "fileName": "com.facebook.presto.spi.Page"}, {"methodBody": ["METHOD_START", "{", "for    ( Blocbloc :    bloc )     {", "blocassureLoaded (  )  ;", "}", "}", "METHOD_END"], "methodName": ["assureLoaded"], "fileName": "com.facebook.presto.spi.Page"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getRetainedSizeInBytes (  )  )     <  =     ( getSizeInBytes (  )  )  )     {", "return ;", "}", "for    ( int   i    =     0  ;    i    <     ( blocks . length )  ;    i +  +  )     {", "Block   block    =    blocks [ i ]  ;", "if    ( block   instanceof   DictionaryBlock )     {", "continue ;", "}", "blocks [ i ]     =    block . copyRegion (  0  ,    block . getPositionCount (  )  )  ;", "}", "Map < DictionaryId ,     . DictionaryBlockIndexes >    dictionaryBlocks    =    getRelatedDictionaryBlocks (  )  ;", "for    (  . DictionaryBlockIndexes   blockIndexes    :    dictionaryBlocks . values (  )  )     {", "List < DictionaryBlock >    compactBlocks    =     . compactRelatedBlocks ( blockIndexes . getBlocks (  )  )  ;", "List < Integer >    indexes    =    blockIndexes . getIndexes (  )  ;", "for    ( int   i    =     0  ;    i    <     ( compactBlocks . size (  )  )  ;    i +  +  )     {", "blocks [ indexes . get ( i )  ]     =    compactBlocks . get ( i )  ;", "}", "}", "long   retainedSize    =     0  ;", "for    ( Block   block    :    blocks )     {", "retainedSize    +  =    block . getRetainedSizeInBytes (  )  ;", "}", "retainedSizeInBytes . set ( retainedSize )  ;", "}", "METHOD_END"], "methodName": ["compact"], "fileName": "com.facebook.presto.spi.Page"}, {"methodBody": ["METHOD_START", "{", "DictionaryBlock   firstDictionaryBlock    =    blocks . get (  0  )  ;", "Block   dictionary    =    firstDictionaryBlock . getDictionary (  )  ;", "int   positionCount    =    firstDictionaryBlock . getPositionCount (  )  ;", "int   dictionarySize    =    dictionary . getPositionCount (  )  ;", "int [  ]    dictionaryPositionsToCopy    =    new   int [ Math . min ( dictionarySize ,    positionCount )  ]  ;", "int [  ]    remapIndex    =    new   int [ dictionarySize ]  ;", "Arrays . fill ( remapIndex ,     (  -  1  )  )  ;", "int   numberOfIndexes    =     0  ;", "for    ( int   i    =     0  ;    i    <    positionCount ;    i +  +  )     {", "int   position    =    firstDictionaryBlock . getId ( i )  ;", "if    (  ( remapIndex [ position ]  )     =  =     (  -  1  )  )     {", "dictionaryPositionsToCopy [ numberOfIndexes ]     =    position ;", "remapIndex [ position ]     =    numberOfIndexes ;", "numberOfIndexes +  +  ;", "}", "}", "if    ( numberOfIndexes    =  =    dictionarySize )     {", "return   blocks ;", "}", "int [  ]    newIds    =     . getNewIds ( positionCount ,    firstDictionaryBlock ,    remapIndex )  ;", "List < DictionaryBlock >    outputDictionaryBlocks    =    new   ArrayList <  >  ( blocks . size (  )  )  ;", "DictionaryId   newDictionaryId    =    DictionaryId . randomDictionaryId (  )  ;", "for    ( DictionaryBlock   dictionaryBlock    :    blocks )     {", "if    (  !  ( firstDictionaryBlock . getDictionarySourceId (  )  . equals ( dictionaryBlock . getDictionarySourceId (  )  )  )  )     {", "throw   new   IllegalArgumentException (  \" dictionarySourceIds   must   be   the   same \"  )  ;", "}", "try    {", "Block   compactDictionary    =    dictionaryBlock . getDictionary (  )  . copyPositions ( dictionaryPositionsToCopy ,     0  ,    numberOfIndexes )  ;", "outputDictionaryBlocks . add ( new   DictionaryBlock ( positionCount ,    compactDictionary ,    newIds ,    true ,    newDictionaryId )  )  ;", "}    catch    ( UnsupportedOperationException   e )     {", "outputDictionaryBlocks . add ( dictionaryBlock )  ;", "}", "}", "return   outputDictionaryBlocks ;", "}", "METHOD_END"], "methodName": ["compactRelatedBlocks"], "fileName": "com.facebook.presto.spi.Page"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( blocks ,     \" blocks   is   null \"  )  ;", "if    (  ( blocks . length )     =  =     0  )     {", "throw   new   IllegalArgumentException (  \" blocks   is   empty \"  )  ;", "}", "return   blocks [  0  ]  . getPositionCount (  )  ;", "}", "METHOD_END"], "methodName": ["determinePositionCount"], "fileName": "com.facebook.presto.spi.Page"}, {"methodBody": ["METHOD_START", "{", "return   blocks [ channel ]  ;", "}", "METHOD_END"], "methodName": ["getBlock"], "fileName": "com.facebook.presto.spi.Page"}, {"methodBody": ["METHOD_START", "{", "return   blocks . length ;", "}", "METHOD_END"], "methodName": ["getChannelCount"], "fileName": "com.facebook.presto.spi.Page"}, {"methodBody": ["METHOD_START", "{", "int [  ]    newIds    =    new   int [ positionCount ]  ;", "for    ( int   i    =     0  ;    i    <    positionCount ;    i +  +  )     {", "int   newId    =    remapIndex [ dictionaryBlocgetId ( i )  ]  ;", "if    ( newId    =  =     (  -  1  )  )     {", "throw   new   IllegalStateException (  \" reference   to   a   non - existent   y \"  )  ;", "}", "newIds [ i ]     =    newId ;", "}", "return   newIds ;", "}", "METHOD_END"], "methodName": ["getNewIds"], "fileName": "com.facebook.presto.spi.Page"}, {"methodBody": ["METHOD_START", "{", "return   positionCount ;", "}", "METHOD_END"], "methodName": ["getPositionCount"], "fileName": "com.facebook.presto.spi.Page"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( retainedPositions ,     \" retainedPositions   is   null \"  )  ;", "Block [  ]    blocks    =    new   Block [ this . blocks . length ]  ;", "Arrays . setAll ( blocks ,     (    i )     -  >    this . blocks [ i ]  . getPositions ( retainedPositions ,    offset ,    length )  )  ;", "return   new    ( length ,    blocks )  ;", "}", "METHOD_END"], "methodName": ["getPositions"], "fileName": "com.facebook.presto.spi.Page"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( positionOffset    <     0  )     |  |     ( length    <     0  )  )     |  |     (  ( positionOffset    +    length )     >     ( positionCount )  )  )     {", "throw   new   IndexOutOfBoundsException ( String . format (  \" Invalid   position    % s   and   length    % s   in   page   with    % s   positions \"  ,    positionOffset ,    length ,    positionCount )  )  ;", "}", "int   channelCount    =    getChannelCount (  )  ;", "Block [  ]    slicedBlocks    =    new   Block [ channelCount ]  ;", "for    ( int   i    =     0  ;    i    <    channelCount ;    i +  +  )     {", "slicedBlocks [ i ]     =    blocks [ i ]  . getRegion ( positionOffset ,    length )  ;", "}", "return   new    ( length ,    slicedBlocks )  ;", "}", "METHOD_END"], "methodName": ["getRegion"], "fileName": "com.facebook.presto.spi.Page"}, {"methodBody": ["METHOD_START", "{", "Map < DictionaryId ,    Page . DictionaryBlockIndexes >    relatedDictionaryBlocks    =    new   HashMap <  >  (  )  ;", "for    ( int   i    =     0  ;    i    <     ( blocks . length )  ;    i +  +  )     {", "Block   block    =    blocks [ i ]  ;", "if    ( block   instanceof   DictionaryBlock )     {", "DictionaryBlock   dictionaryBlock    =     (  ( DictionaryBlock )     ( block )  )  ;", "relatedDictionaryBlocks . computeIfAbsent ( dictionaryBlock . getDictionarySourceId (  )  ,     (    id )     -  >    new   Page . DictionaryBlockIndexes (  )  )  . addBlock ( dictionaryBlock ,    i )  ;", "}", "}", "return   relatedDictionaryBlocks ;", "}", "METHOD_END"], "methodName": ["getRelatedDictionaryBlocks"], "fileName": "com.facebook.presto.spi.Page"}, {"methodBody": ["METHOD_START", "{", "long   retainedSizeInBytes    =    this . retainedSizeInBytes . get (  )  ;", "if    ( retainedSizeInBytes    <     0  )     {", "retainedSizeInBytes    =     (  . INSTANCE _ SIZE )     +     ( SizeOf . sizeOf ( blocks )  )  ;", "for    ( Block   block    :    blocks )     {", "retainedSizeInBytes    +  =    block . getRetainedSizeInBytes (  )  ;", "}", "this . retainedSizeInBytes . set ( retainedSizeInBytes )  ;", "}", "return   retainedSizeInBytes ;", "}", "METHOD_END"], "methodName": ["getRetainedSizeInBytes"], "fileName": "com.facebook.presto.spi.Page"}, {"methodBody": ["METHOD_START", "{", "Block [  ]    singleValueBlocks    =    new   Block [ this . blocks . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( this . blocks . length )  ;    i +  +  )     {", "singleValueBlocks [ i ]     =    this . blocks [ i ]  . getSingleValueBlock ( position )  ;", "}", "return   new    (  1  ,    singleValueBlocks )  ;", "}", "METHOD_END"], "methodName": ["getSingleValuePage"], "fileName": "com.facebook.presto.spi.Page"}, {"methodBody": ["METHOD_START", "{", "long   sizeInBytes    =    this . sizeInBytes . get (  )  ;", "if    ( sizeInBytes    <     0  )     {", "sizeInBytes    =     0  ;", "for    ( Block   block    :    blocks )     {", "sizeInBytes    +  =    block . getSizeInBytes (  )  ;", "}", "this . sizeInBytes . set ( sizeInBytes )  ;", "}", "return   sizeInBytes ;", "}", "METHOD_END"], "methodName": ["getSizeInBytes"], "fileName": "com.facebook.presto.spi.Page"}, {"methodBody": ["METHOD_START", "{", "if    (  ( column . getPositionCount (  )  )     !  =     ( positionCount )  )     {", "throw   new   IllegalArgumentException ( String . format (  \" Column   does   not   have   same   position   count    (  % s )    as   page    (  % s )  \"  ,    column . getPositionCount (  )  ,    positionCount )  )  ;", "}", "Block [  ]    result    =    new   Block [  ( blocks . length )     +     1  ]  ;", "result [  0  ]     =    column ;", "System . arraycopy ( blocks ,     0  ,    result ,     1  ,    blocks . length )  ;", "return   new    ( positionCount ,    result )  ;", "}", "METHOD_END"], "methodName": ["prependColumn"], "fileName": "com.facebook.presto.spi.Page"}, {"methodBody": ["METHOD_START", "{", "if    (  ( blockBuilders . length )     =  =     0  )     {", "return   new   Page ( declaredPositions )  ;", "}", "Block [  ]    blocks    =    new   Block [ blockBuilders . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( blocks . length )  ;    i +  +  )     {", "blocks [ i ]     =    blockBuilders [ i ]  . build (  )  ;", "if    (  ( blocks [ i ]  . getPositionCount (  )  )     !  =     ( declaredPositions )  )     {", "throw   new   IllegalStateException ( String . format (  \" Declared   positions    (  % s )    does   not   match   block    % s ' s   number   of   entries    (  % s )  \"  ,    declaredPositions ,    i ,    blocks [ i ]  . getPositionCount (  )  )  )  ;", "}", "}", "return   new   Page ( blocks )  ;", "}", "METHOD_END"], "methodName": ["build"], "fileName": "com.facebook.presto.spi.PageBuilder"}, {"methodBody": ["METHOD_START", "{", "if    (  ! expression )     {", "throw   new   IllegalArgumentException ( errorMessage )  ;", "}", "}", "METHOD_END"], "methodName": ["checkArgument"], "fileName": "com.facebook.presto.spi.PageBuilder"}, {"methodBody": ["METHOD_START", "{", "( declaredPositions )  +  +  ;", "}", "METHOD_END"], "methodName": ["declarePosition"], "fileName": "com.facebook.presto.spi.PageBuilder"}, {"methodBody": ["METHOD_START", "{", "declaredPositions    +  =    positions ;", "}", "METHOD_END"], "methodName": ["declarePositions"], "fileName": "com.facebook.presto.spi.PageBuilder"}, {"methodBody": ["METHOD_START", "{", "return   blockBuilders [ channel ]  ;", "}", "METHOD_END"], "methodName": ["getBlockBuilder"], "fileName": "com.facebook.presto.spi.PageBuilder"}, {"methodBody": ["METHOD_START", "{", "return   declaredPositions ;", "}", "METHOD_END"], "methodName": ["getPositionCount"], "fileName": "com.facebook.presto.spi.PageBuilder"}, {"methodBody": ["METHOD_START", "{", "long   retainedSizeInBytes    =     0  ;", "for    ( Block   block    :    blocks )     {", "retainedSizeInBytes    +  =    block . getRetainedSizeInBytes (  )  ;", "}", "return   retainedSizeInBytes ;", "}", "METHOD_END"], "methodName": ["getRetainedSizeInBytes"], "fileName": "com.facebook.presto.spi.PageBuilder"}, {"methodBody": ["METHOD_START", "{", "return   pageBuilderStatus . getSizeInBytes (  )  ;", "}", "METHOD_END"], "methodName": ["getSizeInBytes"], "fileName": "com.facebook.presto.spi.PageBuilder"}, {"methodBody": ["METHOD_START", "{", "return   types . get ( channel )  ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.facebook.presto.spi.PageBuilder"}, {"methodBody": ["METHOD_START", "{", "return    ( declaredPositions )     =  =     0  ;", "}", "METHOD_END"], "methodName": ["isEmpty"], "fileName": "com.facebook.presto.spi.PageBuilder"}, {"methodBody": ["METHOD_START", "{", "return    (  ( declaredPositions )     =  =     ( Integer . MAX _ VALUE )  )     |  |     ( pageBuilderStatus . isFull (  )  )  ;", "}", "METHOD_END"], "methodName": ["isFull"], "fileName": "com.facebook.presto.spi.PageBuilder"}, {"methodBody": ["METHOD_START", "{", "return   new   PageBuilder ( declaredPositions ,    pageBuilderStatus . getMaxPageSizeInBytes (  )  ,    types ,    Optional . of ( blockBuilders )  )  ;", "}", "METHOD_END"], "methodName": ["newPageBuilderLike"], "fileName": "com.facebook.presto.spi.PageBuilder"}, {"methodBody": ["METHOD_START", "{", "if    ( isEmpty (  )  )     {", "return ;", "}", "pageBuilderStatus    =    new   Status ( pageBuilderStatus . getMaxPageSizeInBytes (  )  ,    pageBuilderStatus . getMaxBlockSizeInBytes (  )  )  ;", "declaredPositions    =     0  ;", "for    ( int   i    =     0  ;    i    <     ( types . size (  )  )  ;    i +  +  )     {", "blockBuilders [ i ]     =    blockBuilders [ i ]  . newBlockBuilderLike ( pageBuilderStatus . createBlockBuilderStatus (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["reset"], "fileName": "com.facebook.presto.spi.PageBuilder"}, {"methodBody": ["METHOD_START", "{", "return   new   PageBuilder ( Integer . MAX _ VALUE ,    maxPageBytes ,    types ,    Optional . empty (  )  )  ;", "}", "METHOD_END"], "methodName": ["withMaxPageSize"], "fileName": "com.facebook.presto.spi.PageBuilder"}, {"methodBody": ["METHOD_START", "{", "return   Collections . emptyList (  )  ;", "}", "METHOD_END"], "methodName": ["getBlockEncodingFactories"], "fileName": "com.facebook.presto.spi.Plugin"}, {"methodBody": ["METHOD_START", "{", "return   Collections . emptyList (  )  ;", "}", "METHOD_END"], "methodName": ["getConnectorFactories"], "fileName": "com.facebook.presto.spi.Plugin"}, {"methodBody": ["METHOD_START", "{", "return   Collections . emptyList (  )  ;", "}", "METHOD_END"], "methodName": ["getEventListenerFactories"], "fileName": "com.facebook.presto.spi.Plugin"}, {"methodBody": ["METHOD_START", "{", "return   Collections . emptySet (  )  ;", "}", "METHOD_END"], "methodName": ["getFunctions"], "fileName": "com.facebook.presto.spi.Plugin"}, {"methodBody": ["METHOD_START", "{", "return   Collections . emptyList (  )  ;", "}", "METHOD_END"], "methodName": ["getParametricTypes"], "fileName": "com.facebook.presto.spi.Plugin"}, {"methodBody": ["METHOD_START", "{", "return   Collections . emptyList (  )  ;", "}", "METHOD_END"], "methodName": ["getPasswordAuthenticatorFactories"], "fileName": "com.facebook.presto.spi.Plugin"}, {"methodBody": ["METHOD_START", "{", "return   Collections . emptyList (  )  ;", "}", "METHOD_END"], "methodName": ["getResourceGroupConfigurationManagerFactories"], "fileName": "com.facebook.presto.spi.Plugin"}, {"methodBody": ["METHOD_START", "{", "return   Collections . emptyList (  )  ;", "}", "METHOD_END"], "methodName": ["getSessionPropertyConfigurationManagerFactories"], "fileName": "com.facebook.presto.spi.Plugin"}, {"methodBody": ["METHOD_START", "{", "return   Collections . emptyList (  )  ;", "}", "METHOD_END"], "methodName": ["getSystemAccessControlFactories"], "fileName": "com.facebook.presto.spi.Plugin"}, {"methodBody": ["METHOD_START", "{", "return   Collections . emptyList (  )  ;", "}", "METHOD_END"], "methodName": ["getTypes"], "fileName": "com.facebook.presto.spi.Plugin"}, {"methodBody": ["METHOD_START", "{", "return   errorCode ;", "}", "METHOD_END"], "methodName": ["getErrorCode"], "fileName": "com.facebook.presto.spi.PrestoException"}, {"methodBody": ["METHOD_START", "{", "return   remoteHost ;", "}", "METHOD_END"], "methodName": ["getRemoteHost"], "fileName": "com.facebook.presto.spi.PrestoTransportException"}, {"methodBody": ["METHOD_START", "{", "if    (  ! condition )     {", "throw   new   IllegalArgumentException ( String . format ( message ,    messageArgs )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkArgument"], "fileName": "com.facebook.presto.spi.QueryId"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "com.facebook.presto.spi.QueryId"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( id ,     \" id   is   null \"  )  ;", ". checkArgument (  ( expectedParts    >     0  )  ,     \" expectedParts   must   be   at   least    1  \"  )  ;", "Objects . requireNonNull ( name ,     \" name   is   null \"  )  ;", "List < String >    ids    =    Collections . unmodifiableList ( Arrays . asList ( id . split (  \"  \\  \\  .  \"  )  )  )  ;", ". checkArgument (  (  ( ids . size (  )  )     =  =    expectedParts )  ,     \" Invalid    % s    % s \"  ,    name ,    id )  ;", "for    ( String   part    :    ids )     {", ". checkArgument (  (  !  ( part . isEmpty (  )  )  )  ,     \" Invalid   id    % s \"  ,    id )  ;", ". checkArgument (  . ID _ PATTERN . matcher ( part )  . matches (  )  ,     \" Invalid   id    % s \"  ,    id )  ;", "}", "return   ids ;", "}", "METHOD_END"], "methodName": ["parseDottedId"], "fileName": "com.facebook.presto.spi.QueryId"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( id ,     \" id   is   null \"  )  ;", ". checkArgument (  (  !  ( id . isEmpty (  )  )  )  ,     \" id   is   empty \"  )  ;", ". checkArgument (  . ID _ PATTERN . matcher ( id )  . matches (  )  ,     \" Invalid   id    % s \"  ,    id )  ;", "return   id ;", "}", "METHOD_END"], "methodName": ["validateId"], "fileName": "com.facebook.presto.spi.QueryId"}, {"methodBody": ["METHOD_START", "{", "List < String >    ids    =    QueryId . parseDottedId ( queryId ,     1  ,     \" queryId \"  )  ;", "return   new   QueryId ( ids . get (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["valueOf"], "fileName": "com.facebook.presto.spi.QueryId"}, {"methodBody": ["METHOD_START", "{", "return    0  ;", "}", "METHOD_END"], "methodName": ["getSystemMemoryUsage"], "fileName": "com.facebook.presto.spi.RecordCursor"}, {"methodBody": ["METHOD_START", "{", "return   cursor ;", "}", "METHOD_END"], "methodName": ["getCursor"], "fileName": "com.facebook.presto.spi.RecordPageSource"}, {"methodBody": ["METHOD_START", "{", "return   schemaName ;", "}", "METHOD_END"], "methodName": ["getSchemaName"], "fileName": "com.facebook.presto.spi.SchemaNotFoundException"}, {"methodBody": ["METHOD_START", "{", "return   schemaName ;", "}", "METHOD_END"], "methodName": ["getSchemaName"], "fileName": "com.facebook.presto.spi.SchemaTableName"}, {"methodBody": ["METHOD_START", "{", "return   tableName ;", "}", "METHOD_END"], "methodName": ["getTableName"], "fileName": "com.facebook.presto.spi.SchemaTableName"}, {"methodBody": ["METHOD_START", "{", "return   new   SchemaTablePrefix ( schemaName ,    tableName )  ;", "}", "METHOD_END"], "methodName": ["toSchemaTablePrefix"], "fileName": "com.facebook.presto.spi.SchemaTableName"}, {"methodBody": ["METHOD_START", "{", "return   schemaName ;", "}", "METHOD_END"], "methodName": ["getSchemaName"], "fileName": "com.facebook.presto.spi.SchemaTablePrefix"}, {"methodBody": ["METHOD_START", "{", "return   tableName ;", "}", "METHOD_END"], "methodName": ["getTableName"], "fileName": "com.facebook.presto.spi.SchemaTablePrefix"}, {"methodBody": ["METHOD_START", "{", "if    (  ( schemaName )     =  =    null )     {", "return   true ;", "}", "if    (  !  ( schemaName . equals ( sName . getSchemaName (  )  )  )  )     {", "return   false ;", "}", "return    (  ( tableName )     =  =    null )     |  |     ( tableName . equals ( sName . getTableName (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["matches"], "fileName": "com.facebook.presto.spi.SchemaTablePrefix"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( schemaName )     =  =    null )     |  |     (  ( tableName )     =  =    null )  )     {", "throw   new   IllegalStateException (  \" both   schemaName   and   tableName   must   be   set \"  )  ;", "}", "return   new   Name ( schemaName ,    tableName )  ;", "}", "METHOD_END"], "methodName": ["toSchemaTableName"], "fileName": "com.facebook.presto.spi.SchemaTablePrefix"}, {"methodBody": ["METHOD_START", "{", "if    ( value    =  =    null )     {", "throw   new   NullPointerExption (  ( name    +     \"    is   null \"  )  )  ;", "}", "if    ( value . isEmpty (  )  )     {", "throw   new   IllegalArgumentExption (  ( name    +     \"    is   empty \"  )  )  ;", "}", "return   value ;", "}", "METHOD_END"], "methodName": ["checkNotEmpty"], "fileName": "com.facebook.presto.spi.SchemaUtil"}, {"methodBody": ["METHOD_START", "{", "return   column ;", "}", "METHOD_END"], "methodName": ["getColumn"], "fileName": "com.facebook.presto.spi.SortingProperty"}, {"methodBody": ["METHOD_START", "{", "return   Collections . singleton ( column )  ;", "}", "METHOD_END"], "methodName": ["getColumns"], "fileName": "com.facebook.presto.spi.SortingProperty"}, {"methodBody": ["METHOD_START", "{", "return   order ;", "}", "METHOD_END"], "methodName": ["getOrder"], "fileName": "com.facebook.presto.spi.SortingProperty"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["cursor"], "fileName": "com.facebook.presto.spi.SystemTable"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["pageSource"], "fileName": "com.facebook.presto.spi.SystemTable"}, {"methodBody": ["METHOD_START", "{", "return   tableName ;", "}", "METHOD_END"], "methodName": ["getTableName"], "fileName": "com.facebook.presto.spi.TableNotFoundException"}, {"methodBody": ["METHOD_START", "{", "HostAddress   address 1     =    HostAddress . fromParts (  \"  [  1  1  1  1  :  2  2  2  2  :  3  3  3  3  :  4  4  4  4  :  5  5  5  5  :  6  6  6  6  :  7  7  7  7  :  8  8  8  8  ]  \"  ,     1  2  3  4  )  ;", "HostAddress   address 1 NoBrackets    =    HostAddress . fromParts (  \"  1  1  1  1  :  2  2  2  2  :  3  3  3  3  :  4  4  4  4  :  5  5  5  5  :  6  6  6  6  :  7  7  7  7  :  8  8  8  8  \"  ,     1  2  3  4  )  ;", "assertEquals ( address 1  ,    address 1 NoBrackets )  ;", "HostAddress   address 1 FromString    =    HostAddress . fromString (  \"  [  1  1  1  1  :  2  2  2  2  :  3  3  3  3  :  4  4  4  4  :  5  5  5  5  :  6  6  6  6  :  7  7  7  7  :  8  8  8  8  ]  :  1  2  3  4  \"  )  ;", "assertEquals ( address 1  ,    address 1 FromString )  ;", "HostAddress   address 2     =    HostAddress . fromParts (  \"  [  1  1  1  1  :  2  2  2  2  :  3  3  3  3  :  4  4  4  4  :  5  5  5  5  :  6  6  6  6  :  7  7  7  7  :  9  9  9  9  ]  \"  ,     1  2  3  4  )  ;", "assertNotEquals ( address 1  ,    address 2  )  ;", "HostAddress   address 3     =    HostAddress . fromParts (  \"  [  1  1  1  1  :  2  2  2  2  :  3  3  3  3  :  4  4  4  4  :  5  5  5  5  :  6  6  6  6  :  7  7  7  7  :  8  8  8  8  ]  \"  ,     1  2  3  5  )  ;", "assertNotEquals ( address 1  ,    address 3  )  ;", "}", "METHOD_END"], "methodName": ["testEquality"], "fileName": "com.facebook.presto.spi.TestHostAddress"}, {"methodBody": ["METHOD_START", "{", "HostAddress   address    =    HostAddress . fromParts (  \"  [  1  1  1  1  :  2  2  2  2  :  3  3  3  3  :  4  4  4  4  :  5  5  5  5  :  6  6  6  6  :  7  7  7  7  :  8  8  8  8  ]  \"  ,     1  2  3  4  )  ;", "HostAddress   fromParts    =    HostAddress . fromParts ( address . getHostText (  )  ,    address . getPort (  )  )  ;", "assertEquals ( address ,    fromParts )  ;", "HostAddress   fromString    =    HostAddress . fromString ( address . toString (  )  )  ;", "assertEquals ( address ,    fromString )  ;", "assertEquals ( fromParts ,    fromString )  ;", "}", "METHOD_END"], "methodName": ["testRoundTrip"], "fileName": "com.facebook.presto.spi.TestHostAddress"}, {"methodBody": ["METHOD_START", "{", "DynamicSliceOutput   dynamicSliceOutput    =    new   DynamicSliceOutput (  1  6  )  ;", "for    ( int   index    =     0  ;    index    <    length ;    index +  +  )     {", "dynamicSliceOutput . writeByte (  ( length    *     ( index    +     1  )  )  )  ;", "}", "return   dynamicSliceOutput . slice (  )  ;", "}", "METHOD_END"], "methodName": ["createExpectedValue"], "fileName": "com.facebook.presto.spi.TestPage"}, {"methodBody": ["METHOD_START", "{", "Slice [  ]    expectedValues    =    new   Slice [ positionCount ]  ;", "for    ( int   position    =     0  ;    position    <    positionCount ;    position +  +  )     {", "expectedValues [ position ]     =     . createExpectedValue ( position )  ;", "}", "return   expectedValues ;", "}", "METHOD_END"], "methodName": ["createExpectedValues"], "fileName": "com.facebook.presto.spi.TestPage"}, {"methodBody": ["METHOD_START", "{", "BlockBuilder   builder    =    VarbinaryType . VARBINARY . createBlockBuilder ( null ,     1  0  0  )  ;", "for    ( Slice   value    :    values )     {", "Verify . verify (  ( value    !  =    null )  )  ;", "VarbinaryType . VARBINARY . writeSlice ( builder ,    value )  ;", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["createSlicesBlock"], "fileName": "com.facebook.presto.spi.TestPage"}, {"methodBody": ["METHOD_START", "{", "Preconditions . checkArgument (  ( positionCount    >    dictionarySize )  )  ;", "int [  ]    ids    =    new   int [ positionCount ]  ;", "for    ( int   i    =     0  ;    i    <    positionCount ;    i +  +  )     {", "ids [ i ]     =    i    %    dictionarySize ;", "}", "return   ids ;", "}", "METHOD_END"], "methodName": ["getDictionaryIds"], "fileName": "com.facebook.presto.spi.TestPage"}, {"methodBody": ["METHOD_START", "{", "int   positionCount    =     1  0  0  ;", "DictionaryId   commonSourceId    =    DictionaryId . randomDictionaryId (  )  ;", "int   commonDictionaryUsedPositions    =     2  0  ;", "int [  ]    commonDictionaryIds    =     . getDictionaryIds ( positionCount ,    commonDictionaryUsedPositions )  ;", "Slice [  ]    dictionaryValues 1     =     . createExpectedValues (  5  0  )  ;", "Block   dictionary 1     =     . createSlicesBlock ( dictionaryValues 1  )  ;", "DictionaryBlock   commonSourceIdBlock 1     =    new   DictionaryBlock ( positionCount ,    dictionary 1  ,    commonDictionaryIds ,    commonSourceId )  ;", "BlockBuilder   dictionary 2     =    BigintType . BIGINT . createBlockBuilder ( null ,    dictionary 1  . getPositionCount (  )  )  ;", "for    ( Slice   expectedValue    :    dictionaryValues 1  )     {", "BigintType . BIGINT . writeLong ( dictionary 2  ,    expectedValue . length (  )  )  ;", "}", "DictionaryBlock   commonSourceIdBlock 2     =    new   DictionaryBlock ( positionCount ,    dictionary 2  . build (  )  ,    commonDictionaryIds ,    commonSourceId )  ;", "int   otherDictionaryUsedPositions    =     3  0  ;", "int [  ]    otherDictionaryIds    =     . getDictionaryIds ( positionCount ,    otherDictionaryUsedPositions )  ;", "Block   dictionary 3     =     . createSlicesBlock (  . createExpectedValues (  7  0  )  )  ;", "DictionaryBlock   randomSourceIdBlock    =    new   DictionaryBlock ( dictionary 3  ,    otherDictionaryIds )  ;", "Page   page    =    new   Page ( commonSourceIdBlock 1  ,    randomSourceIdBlock ,    commonSourceIdBlock 2  )  ;", "page . compact (  )  ;", "assertTrue (  (  ( DictionaryBlock )     ( page . getBlock (  0  )  )  )  . isCompact (  )  )  ;", "assertTrue (  (  ( DictionaryBlock )     ( page . getBlock (  1  )  )  )  . isCompact (  )  )  ;", "assertTrue (  (  ( DictionaryBlock )     ( page . getBlock (  2  )  )  )  . isCompact (  )  )  ;", "assertEquals (  (  ( DictionaryBlock )     ( page . getBlock (  0  )  )  )  . getDictionary (  )  . getPositionCount (  )  ,    commonDictionaryUsedPositions )  ;", "assertEquals (  (  ( DictionaryBlock )     ( page . getBlock (  1  )  )  )  . getDictionary (  )  . getPositionCount (  )  ,    otherDictionaryUsedPositions )  ;", "assertEquals (  (  ( DictionaryBlock )     ( page . getBlock (  2  )  )  )  . getDictionary (  )  . getPositionCount (  )  ,    commonDictionaryUsedPositions )  ;", "assertNotEquals (  (  ( DictionaryBlock )     ( page . getBlock (  0  )  )  )  . getDictionarySourceId (  )  ,     (  ( DictionaryBlock )     ( page . getBlock (  1  )  )  )  . getDictionarySourceId (  )  )  ;", "assertEquals (  (  ( DictionaryBlock )     ( page . getBlock (  0  )  )  )  . getDictionarySourceId (  )  ,     (  ( DictionaryBlock )     ( page . getBlock (  2  )  )  )  . getDictionarySourceId (  )  )  ;", "}", "METHOD_END"], "methodName": ["testCompactDictionaryBlocks"], "fileName": "com.facebook.presto.spi.TestPage"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( new   Page (  0  )  . getRegion (  0  ,     0  )  . getPositionCount (  )  ,     0  )  ;", "assertEquals ( new   Page (  1  0  )  . getRegion (  5  ,     0  )  . getPositionCount (  )  ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testGetEmptyRegion"], "fileName": "com.facebook.presto.spi.TestPage"}, {"methodBody": ["METHOD_START", "{", "int   entries    =     1  0  ;", "BlockBuilder   blockBuilder    =    BigintType . BIGINT . createBlockBuilder ( null ,    entries )  ;", "for    ( int   i    =     0  ;    i    <    entries ;    i +  +  )     {", "BigintType . BIGINT . writeLong ( blockBuilder ,    i )  ;", "}", "Block   block    =    blockBuilder . build (  )  ;", "page    =    new    ( block ,    block ,    block )  . getPositions ( new   int [  ]  {     0  ,     1  ,     1  ,     1  ,     2  ,     5  ,     5     }  ,     1  ,     5  )  ;", "assertEquals ( page . getPositionCount (  )  ,     5  )  ;", "for    ( int   i    =     0  ;    i    <     3  ;    i +  +  )     {", "assertEquals ( page . getBlock ( i )  . getLong (  0  ,     0  )  ,     1  )  ;", "assertEquals ( page . getBlock ( i )  . getLong (  1  ,     0  )  ,     1  )  ;", "assertEquals ( page . getBlock ( i )  . getLong (  2  ,     0  )  ,     1  )  ;", "assertEquals ( page . getBlock ( i )  . getLong (  3  ,     0  )  ,     2  )  ;", "assertEquals ( page . getBlock ( i )  . getLong (  4  ,     0  )  ,     5  )  ;", "}", "}", "METHOD_END"], "methodName": ["testGetPositions"], "fileName": "com.facebook.presto.spi.TestPage"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( new   Page (  1  0  )  . getRegion (  5  ,     5  )  . getPositionCount (  )  ,     5  )  ;", "}", "METHOD_END"], "methodName": ["testGetRegion"], "fileName": "com.facebook.presto.spi.TestPage"}, {"methodBody": ["METHOD_START", "{", "new   Page (  0  )  . getRegion (  1  ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testGetRegionExceptions"], "fileName": "com.facebook.presto.spi.TestPage"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( new   Page (  1  0  0  )  . getRegion (  0  ,     1  0  )  . getPositionCount (  )  ,     1  0  )  ;", "}", "METHOD_END"], "methodName": ["testGetRegionFromNoColumnPage"], "fileName": "com.facebook.presto.spi.TestPage"}, {"methodBody": ["METHOD_START", "{", "PrestoException   exception    =    new   PrestoException ( new   TestPrestoException . TestErrorCode (  )  ,     \" test \"  )  ;", "assertEquals ( exception . getMessage (  )  ,     \" test \"  )  ;", "exception    =    new   PrestoException ( new   TestPrestoException . TestErrorCode (  )  ,    new   RuntimeException (  \" test 2  \"  )  )  ;", "assertEquals ( exception . getMessage (  )  ,     \" test 2  \"  )  ;", "exception    =    new   PrestoException ( new   TestPrestoException . TestErrorCode (  )  ,    new   RuntimeException (  )  )  ;", "assertEquals ( exception . getMessage (  )  ,     \" test \"  )  ;", "}", "METHOD_END"], "methodName": ["testMessage"], "fileName": "com.facebook.presto.spi.TestPrestoException"}, {"methodBody": ["METHOD_START", "{", "return   error . toErrorCode (  )  . getCode (  )  ;", "}", "METHOD_END"], "methodName": ["code"], "fileName": "com.facebook.presto.spi.TestStandardErrorCode"}, {"methodBody": ["METHOD_START", "{", "Iterator < StandardErrorCode >    iterator    =    Arrays . asList ( StandardErrorCode . values (  )  )  . iterator (  )  ;", "assertTrue ( iterator . hasNext (  )  )  ;", "int   previous    =     . code ( iterator . next (  )  )  ;", "while    ( iterator . hasNext (  )  )     {", "StandardErrorCode   code    =    iterator . next (  )  ;", "int   current    =     . code ( code )  ;", "Assertions . assertGreaterThan ( current ,    previous ,     (  \" Code   is   out   of   order :     \"     +    code )  )  ;", "if    (  ( code    !  =     ( StandardErrorCode . GENERIC _ INTERNAL _ ERROR )  )     &  &     ( code    !  =     ( StandardErrorCode . GENERIC _ INSUFFICIENT _ RESOURCES )  )  )     {", "assertEquals ( current ,     ( previous    +     1  )  ,     (  \" Code   is   not   sequential :     \"     +    code )  )  ;", "}", "previous    =    current ;", "}", "}", "METHOD_END"], "methodName": ["testOrdering"], "fileName": "com.facebook.presto.spi.TestStandardErrorCode"}, {"methodBody": ["METHOD_START", "{", "for    ( StandardErrorCode   errorCode    :    StandardErrorCode . values (  )  )     {", "Assertions . assertLessThan (  . code ( errorCode )  ,     . EXTERNAL _ ERROR _ START )  ;", "}", "}", "METHOD_END"], "methodName": ["testReserved"], "fileName": "com.facebook.presto.spi.TestStandardErrorCode"}, {"methodBody": ["METHOD_START", "{", "Set < Integer >    codes    =    new   HashSet <  >  (  )  ;", "for    ( StandardErrorCode   code    :    StandardErrorCode . values (  )  )     {", "assertTrue ( codes . add (  . code ( code )  )  ,     (  \" Code   already   exists :     \"     +    code )  )  ;", "}", "assertEquals ( codes . size (  )  ,    StandardErrorCode . values (  )  . length )  ;", "}", "METHOD_END"], "methodName": ["testUnique"], "fileName": "com.facebook.presto.spi.TestStandardErrorCode"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.spi.TestingColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   viewName ;", "}", "METHOD_END"], "methodName": ["getViewName"], "fileName": "com.facebook.presto.spi.ViewNotFoundException"}, {"methodBody": ["METHOD_START", "{", "checkReadablePosition ( position )  ;", "int   startValueOffset    =    getOffset ( position )  ;", "int   endValueOffset    =    getOffset (  ( position    +     1  )  )  ;", "return   function . apply ( getValues (  )  ,    startValueOffset ,     ( endValueOffset    -    startValueOffset )  )  ;", "}", "METHOD_END"], "methodName": ["apply"], "fileName": "com.facebook.presto.spi.block.AbstractArrayBlock"}, {"methodBody": ["METHOD_START", "{", "if    (  ( position    <     0  )     |  |     ( position    >  =     ( getPositionCount (  )  )  )  )     {", "throw   new   IllegalArgumentExption (  \" position   is   not   valid \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkReadablePosition"], "fileName": "com.facebook.presto.spi.block.AbstractArrayBlock"}, {"methodBody": ["METHOD_START", "{", "return   getOffsets (  )  [  ( position    +     ( getOffsetBase (  )  )  )  ]  ;", "}", "METHOD_END"], "methodName": ["getOffset"], "fileName": "com.facebook.presto.spi.block.AbstractArrayBlock"}, {"methodBody": ["METHOD_START", "{", "if    (  ( position    <     0  )     |  |     ( position    >  =     ( getPositionCount (  )  )  )  )     {", "throw   new   IllegalArgumentExption (  \" position   is   not   valid \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkReadablePosition"], "fileName": "com.facebook.presto.spi.block.AbstractFixedWidthBlock"}, {"methodBody": ["METHOD_START", "{", "return   fixedSize ;", "}", "METHOD_END"], "methodName": ["getFixedSize"], "fileName": "com.facebook.presto.spi.block.AbstractFixedWidthBlock"}, {"methodBody": ["METHOD_START", "{", "return   position    *     ( fixedSize )  ;", "}", "METHOD_END"], "methodName": ["valueOffset"], "fileName": "com.facebook.presto.spi.block.AbstractFixedWidthBlock"}, {"methodBody": ["METHOD_START", "{", "if    (  ( position    <     0  )     |  |     ( position    >  =     ( getPositionCount (  )  )  )  )     {", "throw   new   IllegalArgumentExption (  \" position   is   not   valid \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkReadablePosition"], "fileName": "com.facebook.presto.spi.block.AbstractMapBlock"}, {"methodBody": ["METHOD_START", "{", "return   getOffsets (  )  [  ( position    +     ( getOffsetBase (  )  )  )  ]  ;", "}", "METHOD_END"], "methodName": ["getOffset"], "fileName": "com.facebook.presto.spi.block.AbstractMapBlock"}, {"methodBody": ["METHOD_START", "{", "if    (  ( position    <     0  )     |  |     ( position    >  =     ( getPositionCount (  )  )  )  )     {", "throw   new   IllegalArgumentExption (  \" position   is   not   valid \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkReadablePosition"], "fileName": "com.facebook.presto.spi.block.AbstractRowBlock"}, {"methodBody": ["METHOD_START", "{", "return   getFieldBlockOffsets (  )  [  ( position    +     ( getOffsetBase (  )  )  )  ]  ;", "}", "METHOD_END"], "methodName": ["getFieldBlockOffset"], "fileName": "com.facebook.presto.spi.block.AbstractRowBlock"}, {"methodBody": ["METHOD_START", "{", "if    (  ( position    <     0  )     |  |     ( position    >  =     ( getPositionCount (  )  )  )  )     {", "throw   new   IllegalArgumentExption (  \" position   is   not   valid \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkReadablePosition"], "fileName": "com.facebook.presto.spi.block.AbstractSingleArrayBlock"}, {"methodBody": ["METHOD_START", "{", "if    (  ( position    <     0  )     |  |     ( position    >  =     ( getPositionCount (  )  )  )  )     {", "throw   new   IllegalArgumentExption (  \" position   is   not   valid \"  )  ;", "}", "return   position    +     ( getOffset (  )  )  ;", "}", "METHOD_END"], "methodName": ["getAbsolutePosition"], "fileName": "com.facebook.presto.spi.block.AbstractSingleMapBlock"}, {"methodBody": ["METHOD_START", "{", "if    (  ( position    <     0  )     |  |     ( position    >  =     ( getPositionCount (  )  )  )  )     {", "throw   new   IllegalArgumentExption (  (  \" position   is   not   valid :     \"     +    position )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkFieldIndex"], "fileName": "com.facebook.presto.spi.block.AbstractSingleRowBlock"}, {"methodBody": ["METHOD_START", "{", "BlockUtil . checkValidPosition ( position ,    getPositionCount (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkReadablePosition"], "fileName": "com.facebook.presto.spi.block.AbstractVariableWidthBlock"}, {"methodBody": ["METHOD_START", "{", "int   valueStart    =    offsets [ arrayOffset ]  ;", "int   valueEnd    =    offsets [  (  ( arrayOffset )     +     ( positionCount )  )  ]  ;", "sizeInBytes    =     ( values . getRegionSizeInBytes ( valueStart ,     ( valueEnd    -    valueStart )  )  )     +     (  (  ( Integer . BYTES )     +     ( Byte . BYTES )  )     *     (  ( long )     ( this . positionCount )  )  )  ;", "}", "METHOD_END"], "methodName": ["calculateSize"], "fileName": "com.facebook.presto.spi.block.ArrayBlock"}, {"methodBody": ["METHOD_START", "{", "ArrayBlock . validateConstructorArguments ( arrayOffset ,    positionCount ,    valueIsNull ,    offsets ,    values )  ;", "return   new   ArrayBlock ( arrayOffset ,    positionCount ,    valueIsNull ,    offsets ,    values )  ;", "}", "METHOD_END"], "methodName": ["createArrayBlockInternal"], "fileName": "com.facebook.presto.spi.block.ArrayBlock"}, {"methodBody": ["METHOD_START", "{", "ArrayBlock . validateConstructorArguments (  0  ,    positionCount ,    valueIsNull ,    arrayOffset ,    values )  ;", "for    ( int   i    =     0  ;    i    <    positionCount ;    i +  +  )     {", "int   offset    =    arrayOffset [ i ]  ;", "int   length    =     ( arrayOffset [  ( i    +     1  )  ]  )     -    offset ;", "if    ( length    <     0  )     {", "throw   new   IllegalArgumentException ( String . format (  \" Offset   is   not   monotonically   ascending .    offsets [  % s ]  =  % s ,    offsets [  % s ]  =  % s \"  ,    i ,    arrayOffset [ i ]  ,     ( i    +     1  )  ,    arrayOffset [  ( i    +     1  )  ]  )  )  ;", "}", "if    (  ( valueIsNull [ i ]  )     &  &     ( length    !  =     0  )  )     {", "throw   new   IllegalArgumentException (  \" A   null   array   must   have   zero   entries \"  )  ;", "}", "}", "return   new   ArrayBlock (  0  ,    positionCount ,    valueIsNull ,    arrayOffset ,    values )  ;", "}", "METHOD_END"], "methodName": ["fromElementBlock"], "fileName": "com.facebook.presto.spi.block.ArrayBlock"}, {"methodBody": ["METHOD_START", "{", "if    ( arrayOffset    <     0  )     {", "throw   new   IllegalArgumentException (  \" arrayOffset   is   negative \"  )  ;", "}", "if    ( positionCount    <     0  )     {", "throw   new   IllegalArgumentException (  \" positionCount   is   negative \"  )  ;", "}", "Objects . requireNonNull ( valueIsNull ,     \" valueIsNull   is   null \"  )  ;", "if    (  (  ( valueIsNull . length )     -    arrayOffset )     <    positionCount )     {", "throw   new   IllegalArgumentException (  \" isNull   length   is   less   than   positionCount \"  )  ;", "}", "Objects . requireNonNull ( offsets ,     \" offsets   is   null \"  )  ;", "if    (  (  ( offsets . length )     -    arrayOffset )     <     ( positionCount    +     1  )  )     {", "throw   new   IllegalArgumentException (  \" offsets   length   is   less   than   positionCount \"  )  ;", "}", "Objects . requireNonNull ( values ,     \" values   is   null \"  )  ;", "}", "METHOD_END"], "methodName": ["validateConstructorArguments"], "fileName": "com.facebook.presto.spi.block.ArrayBlock"}, {"methodBody": ["METHOD_START", "{", "if    (  ( valueIsNull . length )     <  =     ( positionCount )  )     {", "growCapacity (  )  ;", "}", "offsets [  (  ( positionCount )     +     1  )  ]     =    values . getPositionCount (  )  ;", "valueIsNull [ positionCount ]     =    isNull ;", "( positionCount )  +  +  ;", "if    (  ( bStatus )     !  =    null )     {", "bStatus . addBytes (  (  ( Integer . BYTES )     +     ( Byte . BYTES )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["entryAdded"], "fileName": "com.facebook.presto.spi.block.ArrayBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "int   newSize ;", "if    ( initialized )     {", "newSize    =    BlockUtil . calculateNewSize ( valueIsNull . length )  ;", "} else    {", "newSize    =    initialEntryCount ;", "initialized    =    true ;", "}", "valueIsNull    =    s . copyOf ( valueIsNull ,    newSize )  ;", "offsets    =    s . copyOf ( offsets ,     ( newSize    +     1  )  )  ;", "updateDataSize (  )  ;", "}", "METHOD_END"], "methodName": ["growCapacity"], "fileName": "com.facebook.presto.spi.block.ArrayBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "retainedSizeInBytes    =     (  ( ArrayBlockBuilder . INSTANCE _ SIZE )     +     ( SizeOf . sizeOf ( valueIsNull )  )  )     +     ( SizeOf . sizeOf ( offsets )  )  ;", "if    (  ( blockBuilderStatus )     !  =    null )     {", "retainedSizeInBytes    +  =    BlockBuilderStatus . INSTANCE _ SIZE ;", "}", "}", "METHOD_END"], "methodName": ["updateDataSize"], "fileName": "com.facebook.presto.spi.block.ArrayBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException ( getClass (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["bytesCompare"], "fileName": "com.facebook.presto.spi.block.Block"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException ( getClass (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["bytesEqual"], "fileName": "com.facebook.presto.spi.block.Block"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException ( getClass (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["compareTo"], "fileName": "com.facebook.presto.spi.block.Block"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException ( getClass (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "com.facebook.presto.spi.block.Block"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException ( getClass (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["getByte"], "fileName": "com.facebook.presto.spi.block.Block"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException ( getClass (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["getInt"], "fileName": "com.facebook.presto.spi.block.Block"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException ( getClass (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["getLong"], "fileName": "com.facebook.presto.spi.block.Block"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException ( getClass (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["getObject"], "fileName": "com.facebook.presto.spi.block.Block"}, {"methodBody": ["METHOD_START", "{", "BlockUtil . checkArrayRange ( positions ,    offset ,    length )  ;", "return   new   DictionaryBlock ( offset ,    length ,    this ,    positions ,    false ,    DictionaryId . randomDictionaryId (  )  )  ;", "}", "METHOD_END"], "methodName": ["getPositions"], "fileName": "com.facebook.presto.spi.block.Block"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException ( getClass (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["getShort"], "fileName": "com.facebook.presto.spi.block.Block"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException ( getClass (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["getSlice"], "fileName": "com.facebook.presto.spi.block.Block"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getSliceLength"], "fileName": "com.facebook.presto.spi.block.Block"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException ( getClass (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["hash"], "fileName": "com.facebook.presto.spi.block.Block"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException ( getClass (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["writeBytesTo"], "fileName": "com.facebook.presto.spi.block.Block"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException ( getClass (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["appendStructure"], "fileName": "com.facebook.presto.spi.block.BlockBuilder"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException ( getClass (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["appendStructureInternal"], "fileName": "com.facebook.presto.spi.block.BlockBuilder"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException ( getClass (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["beginBlockEntry"], "fileName": "com.facebook.presto.spi.block.BlockBuilder"}, {"methodBody": ["METHOD_START", "{", "return   build (  )  . getPositions ( visiblePositions ,    offset ,    length )  ;", "}", "METHOD_END"], "methodName": ["getPositions"], "fileName": "com.facebook.presto.spi.block.BlockBuilder"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException ( getClass (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["writeByte"], "fileName": "com.facebook.presto.spi.block.BlockBuilder"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException ( getClass (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["writeBytes"], "fileName": "com.facebook.presto.spi.block.BlockBuilder"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException ( getClass (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["writeInt"], "fileName": "com.facebook.presto.spi.block.BlockBuilder"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException ( getClass (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["writeLong"], "fileName": "com.facebook.presto.spi.block.BlockBuilder"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException ( getClass (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["writeShort"], "fileName": "com.facebook.presto.spi.block.BlockBuilder"}, {"methodBody": ["METHOD_START", "{", "currentSize    +  =    bytes ;", "page . addBytes ( bytes )  ;", "if    (  ( currentSize )     >  =     ( maxBlockSizeInBytes )  )     {", "page . setFull (  )  ;", "}", "}", "METHOD_END"], "methodName": ["addBytes"], "fileName": "com.facebook.presto.spi.block.BlockBuilderStatus"}, {"methodBody": ["METHOD_START", "{", "if    ( clazz . isArray (  )  )     {", "throw   new   IllegalArgumentException ( String . format (  \" Cannot   determine   size   of    % s   because   it   contains   an   array \"  ,    clazz . getSimpleName (  )  )  )  ;", "}", "if    ( clazz . isInterface (  )  )     {", "throw   new   IllegalArgumentException ( String . format (  \"  % s   is   an   interface \"  ,    clazz . getSimpleName (  )  )  )  ;", "}", "if    ( Modifier . isAbstract ( clazz . getModifiers (  )  )  )     {", "throw   new   IllegalArgumentException ( String . format (  \"  % s   is   abstract \"  ,    clazz . getSimpleName (  )  )  )  ;", "}", "if    (  !  ( clazz . getSuperclass (  )  . equals ( Object . class )  )  )     {", "throw   new   IllegalArgumentException ( String . format (  \" Cannot   determine   size   of   a   subclass .     % s   extends   from    % s \"  ,    clazz . getSimpleName (  )  ,    clazz . getSuperclass (  )  . getSimpleName (  )  )  )  ;", "}", "int   size    =    ClassLayout . parseClass ( clazz )  . instanceSize (  )  ;", "for    ( Field   field    :    clazz . getDeclaredFields (  )  )     {", "if    (  !  ( field . getType (  )  . isPrimitive (  )  )  )     {", "size    +  =     . deepInstanceSize ( field . getType (  )  )  ;", "}", "}", "return   size ;", "}", "METHOD_END"], "methodName": ["deepInstanceSize"], "fileName": "com.facebook.presto.spi.block.BlockBuilderStatus"}, {"methodBody": ["METHOD_START", "{", "return   maxBlockSizeInBytes ;", "}", "METHOD_END"], "methodName": ["getMaxBlockSizeInBytes"], "fileName": "com.facebook.presto.spi.block.BlockBuilderStatus"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( array 1     =  =    null )     |  |     ( array 2     =  =    null )  )     |  |     (  ( array 1  . length )     !  =     ( array 2  . length )  )  )     {", "throw   new   IllegalArgumentExption (  \" array 1    and   array 2    cannot   be   null   and   should   have   same   length \"  )  ;", "}", "for    ( int   i    =     0  ;    i    <     ( array 1  . length )  ;    i +  +  )     {", "if    (  ( array 1  [ i ]  )     !  =     ( array 2  [ i ]  )  )     {", "return   false ;", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["arraySame"], "fileName": "com.facebook.presto.spi.block.BlockUtil"}, {"methodBody": ["METHOD_START", "{", "long   newBytes    =     (  ( long )     ( Math . ceil (  ( currentBytes    *     ( BlockUtil . BLOCK _ RESET _ SKEW )  )  )  )  )  ;", "if    ( newBytes    >     ( BlockUtil . MAX _ ARRAY _ SIZE )  )     {", "return   BlockUtil . MAX _ ARRAY _ SIZE ;", "}", "return    (  ( int )     ( newBytes )  )  ;", "}", "METHOD_END"], "methodName": ["calculateBlockResetBytes"], "fileName": "com.facebook.presto.spi.block.BlockUtil"}, {"methodBody": ["METHOD_START", "{", "long   newSize    =     (  ( long )     ( Math . ceil (  ( currentSize    *     ( BlockUtil . BLOCK _ RESET _ SKEW )  )  )  )  )  ;", "if    ( newSize    <     ( BlockUtil . DEFAULT _ CAPACITY )  )     {", "newSize    =    BlockUtil . DEFAULT _ CAPACITY ;", "} else", "if    ( newSize    >     ( BlockUtil . MAX _ ARRAY _ SIZE )  )     {", "newSize    =    BlockUtil . MAX _ ARRAY _ SIZE ;", "}", "return    (  ( int )     ( newSize )  )  ;", "}", "METHOD_END"], "methodName": ["calculateBlockResetSize"], "fileName": "com.facebook.presto.spi.block.BlockUtil"}, {"methodBody": ["METHOD_START", "{", "long   newSize    =     (  ( long )     ( currentSize )  )     +     ( currentSize    >  >     1  )  ;", "if    ( newSize    <     (  . DEFAULT _ CAPACITY )  )     {", "newSize    =     . DEFAULT _ CAPACITY ;", "} else", "if    ( newSize    >     (  . MAX _ ARRAY _ SIZE )  )     {", "newSize    =     . MAX _ ARRAY _ SIZE ;", "if    ( newSize    =  =    currentSize )     {", "throw   new   IllegalArgumentException ( String . format (  \" Can   not   grow   array   beyond    '  % s '  \"  ,     . MAX _ ARRAY _ SIZE )  )  ;", "}", "}", "return    (  ( int )     ( newSize )  )  ;", "}", "METHOD_END"], "methodName": ["calculateNewArraySize"], "fileName": "com.facebook.presto.spi.block.BlockUtil"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( array ,     \" array   is   null \"  )  ;", "if    (  (  ( offset    <     0  )     |  |     ( length    <     0  )  )     |  |     (  ( offset    +    length )     >     ( array . length )  )  )     {", "throw   new   IndexOutOfBoundsException ( String . format (  \" Invalid   offset    % s   and   length    % s   in   array   with    % s   elements \"  ,    offset ,    length ,    array . length )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkArrayRange"], "fileName": "com.facebook.presto.spi.block.BlockUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  ( position    <     0  )     |  |     ( position    >  =    positionCount )  )     {", "throw   new   IllegalArgumentException ( String . format (  \" Invalid   position    % s   in      with    % s   positions \"  ,    position ,    positionCount )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkValidPosition"], "fileName": "com.facebook.presto.spi.block.BlockUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( positionOffset    <     0  )     |  |     ( length    <     0  )  )     |  |     (  ( positionOffset    +    length )     >    positionCount )  )     {", "throw   new   IndexOutOfBoundsException ( String . format (  \" Invalid   position    % s   and   length    % s   in      with    % s   positions \"  ,    positionOffset ,    length ,    positionCount )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkValidRegion"], "fileName": "com.facebook.presto.spi.block.BlockUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  ( index    =  =     0  )     &  &     ( length    =  =     ( array . length )  )  )     {", "turn   array ;", "}", "turn   Arrays . copyOfRange ( array ,    index ,     ( index    +    length )  )  ;", "}", "METHOD_END"], "methodName": ["compactArray"], "fileName": "com.facebook.presto.spi.block.BlockUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  ( index    =  =     0  )     &  &     ( length    =  =     ( array . length )  )  )     {", "turn   array ;", "}", "turn   Arrays . copyOfRange ( array ,    index ,     ( index    +    length )  )  ;", "}", "METHOD_END"], "methodName": ["compactArray"], "fileName": "com.facebook.presto.spi.block.BlockUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  ( index    =  =     0  )     &  &     ( length    =  =     ( array . length )  )  )     {", "turn   array ;", "}", "turn   Arrays . copyOfRange ( array ,    index ,     ( index    +    length )  )  ;", "}", "METHOD_END"], "methodName": ["compactArray"], "fileName": "com.facebook.presto.spi.block.BlockUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  ( index    =  =     0  )     &  &     ( length    =  =     ( array . length )  )  )     {", "turn   array ;", "}", "turn   Arrays . copyOfRange ( array ,    index ,     ( index    +    length )  )  ;", "}", "METHOD_END"], "methodName": ["compactArray"], "fileName": "com.facebook.presto.spi.block.BlockUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  ( index    =  =     0  )     &  &     ( length    =  =     ( array . length )  )  )     {", "turn   array ;", "}", "turn   Arrays . copyOfRange ( array ,    index ,     ( index    +    length )  )  ;", "}", "METHOD_END"], "methodName": ["compactArray"], "fileName": "com.facebook.presto.spi.block.BlockUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  ( index    =  =     0  )     &  &     (  ( offsets . length )     =  =     ( length    +     1  )  )  )     {", "turn   offsets ;", "}", "int [  ]    newOffsets    =    new   int [ length    +     1  ]  ;", "for    ( int   i    =     1  ;    i    <  =    length ;    i +  +  )     {", "newOffsets [ i ]     =     ( offsets [  ( index    +    i )  ]  )     -     ( offsets [ index ]  )  ;", "}", "turn   newOffsets ;", "}", "METHOD_END"], "methodName": ["compactOffsets"], "fileName": "com.facebook.presto.spi.block.BlockUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( slice . isCompact (  )  )     &  &     ( index    =  =     0  )  )     &  &     ( length    =  =     ( slice . length (  )  )  )  )     {", "return   slice ;", "}", "return   Slices . copyOf ( slice ,    index ,    length )  ;", "}", "METHOD_END"], "methodName": ["compactSlice"], "fileName": "com.facebook.presto.spi.block.BlockUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  ( position    <     0  )     |  |     ( position    >  =     ( getPositionCount (  )  )  )  )     {", "throw   new   IllegalArgumentExption (  \" position   is   not   valid \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkReadablePosition"], "fileName": "com.facebook.presto.spi.block.ByteArrayBlock"}, {"methodBody": ["METHOD_START", "{", "if    (  ( position    <     0  )     |  |     ( position    >  =     ( getPositionCount (  )  )  )  )     {", "throw   new   IllegalArgumentExption (  \" position   is   not   valid \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkReadablePosition"], "fileName": "com.facebook.presto.spi.block.ByteArrayBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "int   newSize ;", "if    ( initialized )     {", "newSize    =    BlockUtil . calculateNewSize ( values . length )  ;", "} else    {", "newSize    =    initialEntryCount ;", "initialized    =    true ;", "}", "valueIsNull    =    s . copyOf ( valueIsNull ,    newSize )  ;", "values    =    s . copyOf ( values ,    newSize )  ;", "updateDataSize (  )  ;", "}", "METHOD_END"], "methodName": ["growCapacity"], "fileName": "com.facebook.presto.spi.block.ByteArrayBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "retainedSizeInBytes    =     (  ( ByteArrayBlockBuilder . INSTANCE _ SIZE )     +     ( SizeOf . sizeOf ( valueIsNull )  )  )     +     ( SizeOf . sizeOf ( values )  )  ;", "if    (  ( blockBuilderStatus )     !  =    null )     {", "retainedSizeInBytes    +  =    BlockBuilderStatus . INSTANCE _ SIZE ;", "}", "}", "METHOD_END"], "methodName": ["updateDataSize"], "fileName": "com.facebook.presto.spi.block.ByteArrayBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "return   elementsBlock ;", "}", "METHOD_END"], "methodName": ["getElementsBlock"], "fileName": "com.facebook.presto.spi.block.ColumnarArray"}, {"methodBody": ["METHOD_START", "{", "return    ( getOffset (  ( position    +     1  )  )  )     -     ( getOffset ( position )  )  ;", "}", "METHOD_END"], "methodName": ["getLength"], "fileName": "com.facebook.presto.spi.block.ColumnarArray"}, {"methodBody": ["METHOD_START", "{", "return   offsets [  ( position    +     ( offsetsOffset )  )  ]  ;", "}", "METHOD_END"], "methodName": ["getOffset"], "fileName": "com.facebook.presto.spi.block.ColumnarArray"}, {"methodBody": ["METHOD_START", "{", "return   nullCheckBlock . getPositionCount (  )  ;", "}", "METHOD_END"], "methodName": ["getPositionCount"], "fileName": "com.facebook.presto.spi.block.ColumnarArray"}, {"methodBody": ["METHOD_START", "{", "return   nullCheckBlock . isNull ( position )  ;", "}", "METHOD_END"], "methodName": ["isNull"], "fileName": "com.facebook.presto.spi.block.ColumnarArray"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( block ,     \" block   is   null \"  )  ;", "if    ( block   instanceof   DictionaryBlock )     {", "return    . to (  (  ( DictionaryBlock )     ( block )  )  )  ;", "}", "if    ( block   instanceof   RunLengthEncodedBlock )     {", "return    . to (  (  ( RunLengthEncodedBlock )     ( block )  )  )  ;", "}", "if    (  !  ( block   instanceof   AbstractArrayBlock )  )     {", "throw   new   IllegalArgumentException (  (  \" Invalid   array   block :     \"     +     ( block . getClass (  )  . getName (  )  )  )  )  ;", "}", "AbstractArrayBlock   arrayBlock    =     (  ( AbstractArrayBlock )     ( block )  )  ;", "Block   elementsBlock    =    arrayBlock . getValues (  )  ;", "int   elementsOffset    =     0  ;", "int   elementsLength    =     0  ;", "if    (  ( arrayBlock . getPositionCount (  )  )     >     0  )     {", "elementsOffset    =    arrayBlock . getOffset (  0  )  ;", "elementsLength    =     ( arrayBlock . getOffset ( arrayBlock . getPositionCount (  )  )  )     -    elementsOffset ;", "}", "elementsBlock    =    elementsBlock . getRegion ( elementsOffset ,    elementsLength )  ;", "return   new    ( block ,    arrayBlock . getOffsetBase (  )  ,    arrayBlock . getOffsets (  )  ,    elementsBlock )  ;", "}", "METHOD_END"], "methodName": ["toColumnarArray"], "fileName": "com.facebook.presto.spi.block.ColumnarArray"}, {"methodBody": ["METHOD_START", "{", "ColumnarArray   columnarArray    =    ColumnarArray . toColumnarArray ( dictionaryBlock . getDictionary (  )  )  ;", "int [  ]    offsets    =    new   int [  ( dictionaryBlock . getPositionCount (  )  )     +     1  ]  ;", "for    ( int   position    =     0  ;    position    <     ( dictionaryBlock . getPositionCount (  )  )  ;    position +  +  )     {", "int   dictionaryId    =    dictionaryBlock . getId ( position )  ;", "offsets [  ( position    +     1  )  ]     =     ( offsets [ position ]  )     +     ( columnarArray . getLength ( dictionaryId )  )  ;", "}", "int [  ]    dictionaryIds    =    new   int [ offsets [ dictionaryBlock . getPositionCount (  )  ]  ]  ;", "int   nextDictionaryIndex    =     0  ;", "for    ( int   position    =     0  ;    position    <     ( dictionaryBlock . getPositionCount (  )  )  ;    position +  +  )     {", "int   dictionaryId    =    dictionaryBlock . getId ( position )  ;", "int   length    =    columnarArray . getLength ( dictionaryId )  ;", "int   startOffset    =    columnarArray . getOffset ( dictionaryId )  ;", "for    ( int   entryIndex    =     0  ;    entryIndex    <    length ;    entryIndex +  +  )     {", "dictionaryIds [ nextDictionaryIndex ]     =    startOffset    +    entryIndex ;", "nextDictionaryIndex +  +  ;", "}", "}", "return   new   ColumnarArray ( dictionaryBlock ,     0  ,    offsets ,    new   DictionaryBlock ( dictionaryIds . length ,    columnarArray . getElementsBlock (  )  ,    dictionaryIds )  )  ;", "}", "METHOD_END"], "methodName": ["toColumnarArray"], "fileName": "com.facebook.presto.spi.block.ColumnarArray"}, {"methodBody": ["METHOD_START", "{", "ColumnarArray   columnarArray    =    ColumnarArray . toColumnarArray ( rleBlock . getValue (  )  )  ;", "int [  ]    offsets    =    new   int [  ( rleBlock . getPositionCount (  )  )     +     1  ]  ;", "int   valueLength    =    columnarArray . getLength (  0  )  ;", "for    ( int   i    =     0  ;    i    <     ( offsets . length )  ;    i +  +  )     {", "offsets [ i ]     =    i    *    valueLength ;", "}", "int [  ]    dictionaryIds    =    new   int [  ( rleBlock . getPositionCount (  )  )     *    valueLength ]  ;", "int   nextDictionaryIndex    =     0  ;", "for    ( int   position    =     0  ;    position    <     ( rleBlock . getPositionCount (  )  )  ;    position +  +  )     {", "for    ( int   entryIndex    =     0  ;    entryIndex    <    valueLength ;    entryIndex +  +  )     {", "dictionaryIds [ nextDictionaryIndex ]     =    entryIndex ;", "nextDictionaryIndex +  +  ;", "}", "}", "return   new   ColumnarArray ( rleBlock ,     0  ,    offsets ,    new   DictionaryBlock ( dictionaryIds . length ,    columnarArray . getElementsBlock (  )  ,    dictionaryIds )  )  ;", "}", "METHOD_END"], "methodName": ["toColumnarArray"], "fileName": "com.facebook.presto.spi.block.ColumnarArray"}, {"methodBody": ["METHOD_START", "{", "return    ( offsets [  (  ( position    +     1  )     +     ( offsetsOffset )  )  ]  )     -     ( offsets [  ( position    +     ( offsetsOffset )  )  ]  )  ;", "}", "METHOD_END"], "methodName": ["getEntryCount"], "fileName": "com.facebook.presto.spi.block.ColumnarMap"}, {"methodBody": ["METHOD_START", "{", "return   keysBlock ;", "}", "METHOD_END"], "methodName": ["getKeysBlock"], "fileName": "com.facebook.presto.spi.block.ColumnarMap"}, {"methodBody": ["METHOD_START", "{", "return   offsets [  ( position    +     ( offsetsOffset )  )  ]  ;", "}", "METHOD_END"], "methodName": ["getOffset"], "fileName": "com.facebook.presto.spi.block.ColumnarMap"}, {"methodBody": ["METHOD_START", "{", "return   nullCheckBlock . getPositionCount (  )  ;", "}", "METHOD_END"], "methodName": ["getPositionCount"], "fileName": "com.facebook.presto.spi.block.ColumnarMap"}, {"methodBody": ["METHOD_START", "{", "return   valuesBlock ;", "}", "METHOD_END"], "methodName": ["getValuesBlock"], "fileName": "com.facebook.presto.spi.block.ColumnarMap"}, {"methodBody": ["METHOD_START", "{", "return   nullCheckBlock . isNull ( position )  ;", "}", "METHOD_END"], "methodName": ["isNull"], "fileName": "com.facebook.presto.spi.block.ColumnarMap"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( block ,     \" block   is   null \"  )  ;", "if    ( block   instanceof   DictionaryBlock )     {", "return    . to (  (  ( DictionaryBlock )     ( block )  )  )  ;", "}", "if    ( block   instanceof   RunLengthEncodedBlock )     {", "return    . to (  (  ( RunLengthEncodedBlock )     ( block )  )  )  ;", "}", "if    (  !  ( block   instanceof   AbstractMapBlock )  )     {", "throw   new   IllegalArgumentException (  (  \" Invalid   map   block :     \"     +     ( block . getClass (  )  . getName (  )  )  )  )  ;", "}", "AbstractMapBlock   mapBlock    =     (  ( AbstractMapBlock )     ( block )  )  ;", "int   offsetBase    =    mapBlock . getOffsetBase (  )  ;", "int [  ]    offsets    =    mapBlock . getOffsets (  )  ;", "int   firstEntryPosition    =    mapBlock . getOffset (  0  )  ;", "int   totalEntryCount    =     ( mapBlock . getOffset ( block . getPositionCount (  )  )  )     -    firstEntryPosition ;", "Block   keysBlock    =    mapBlock . getKeys (  )  . getRegion ( firstEntryPosition ,    totalEntryCount )  ;", "Block   valuesBlock    =    mapBlock . getValues (  )  . getRegion ( firstEntryPosition ,    totalEntryCount )  ;", "return   new    ( block ,    offsetBase ,    offsets ,    keysBlock ,    valuesBlock )  ;", "}", "METHOD_END"], "methodName": ["toColumnarMap"], "fileName": "com.facebook.presto.spi.block.ColumnarMap"}, {"methodBody": ["METHOD_START", "{", "ColumnarMap   columnarMap    =    ColumnarMap . toColumnarMap ( dictionaryBlock . getDictionary (  )  )  ;", "int [  ]    offsets    =    new   int [  ( dictionaryBlock . getPositionCount (  )  )     +     1  ]  ;", "for    ( int   position    =     0  ;    position    <     ( dictionaryBlock . getPositionCount (  )  )  ;    position +  +  )     {", "int   dictionaryId    =    dictionaryBlock . getId ( position )  ;", "offsets [  ( position    +     1  )  ]     =     ( offsets [ position ]  )     +     ( columnarMap . getEntryCount ( dictionaryId )  )  ;", "}", "int [  ]    dictionaryIds    =    new   int [ offsets [ dictionaryBlock . getPositionCount (  )  ]  ]  ;", "int   nextDictionaryIndex    =     0  ;", "for    ( int   position    =     0  ;    position    <     ( dictionaryBlock . getPositionCount (  )  )  ;    position +  +  )     {", "int   dictionaryId    =    dictionaryBlock . getId ( position )  ;", "int   entryCount    =    columnarMap . getEntryCount ( dictionaryId )  ;", "int   startOffset    =    columnarMap . getOffset ( dictionaryId )  ;", "for    ( int   entryIndex    =     0  ;    entryIndex    <    entryCount ;    entryIndex +  +  )     {", "dictionaryIds [ nextDictionaryIndex ]     =    startOffset    +    entryIndex ;", "nextDictionaryIndex +  +  ;", "}", "}", "return   new   ColumnarMap ( dictionaryBlock ,     0  ,    offsets ,    new   DictionaryBlock ( dictionaryIds . length ,    columnarMap . getKeysBlock (  )  ,    dictionaryIds )  ,    new   DictionaryBlock ( dictionaryIds . length ,    columnarMap . getValuesBlock (  )  ,    dictionaryIds )  )  ;", "}", "METHOD_END"], "methodName": ["toColumnarMap"], "fileName": "com.facebook.presto.spi.block.ColumnarMap"}, {"methodBody": ["METHOD_START", "{", "ColumnarMap   columnarMap    =    ColumnarMap . toColumnarMap ( rleBlock . getValue (  )  )  ;", "int [  ]    offsets    =    new   int [  ( rleBlock . getPositionCount (  )  )     +     1  ]  ;", "int   entryCount    =    columnarMap . getEntryCount (  0  )  ;", "for    ( int   i    =     0  ;    i    <     ( offsets . length )  ;    i +  +  )     {", "offsets [ i ]     =    i    *    entryCount ;", "}", "int [  ]    dictionaryIds    =    new   int [  ( rleBlock . getPositionCount (  )  )     *    entryCount ]  ;", "int   nextDictionaryIndex    =     0  ;", "for    ( int   position    =     0  ;    position    <     ( rleBlock . getPositionCount (  )  )  ;    position +  +  )     {", "for    ( int   entryIndex    =     0  ;    entryIndex    <    entryCount ;    entryIndex +  +  )     {", "dictionaryIds [ nextDictionaryIndex ]     =    entryIndex ;", "nextDictionaryIndex +  +  ;", "}", "}", "return   new   ColumnarMap ( rleBlock ,     0  ,    offsets ,    new   DictionaryBlock ( dictionaryIds . length ,    columnarMap . getKeysBlock (  )  ,    dictionaryIds )  ,    new   DictionaryBlock ( dictionaryIds . length ,    columnarMap . getValuesBlock (  )  ,    dictionaryIds )  )  ;", "}", "METHOD_END"], "methodName": ["toColumnarMap"], "fileName": "com.facebook.presto.spi.block.ColumnarMap"}, {"methodBody": ["METHOD_START", "{", "return   fields [ index ]  ;", "}", "METHOD_END"], "methodName": ["getField"], "fileName": "com.facebook.presto.spi.block.ColumnarRow"}, {"methodBody": ["METHOD_START", "{", "return   fields . length ;", "}", "METHOD_END"], "methodName": ["getFieldCount"], "fileName": "com.facebook.presto.spi.block.ColumnarRow"}, {"methodBody": ["METHOD_START", "{", "return   nullCheckBlock . getPositionCount (  )  ;", "}", "METHOD_END"], "methodName": ["getPositionCount"], "fileName": "com.facebook.presto.spi.block.ColumnarRow"}, {"methodBody": ["METHOD_START", "{", "return   nullCheckBlock . isNull ( position )  ;", "}", "METHOD_END"], "methodName": ["isNull"], "fileName": "com.facebook.presto.spi.block.ColumnarRow"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( block ,     \" block   is   null \"  )  ;", "if    ( block   instanceof   DictionaryBlock )     {", "return    . to (  (  ( DictionaryBlock )     ( block )  )  )  ;", "}", "if    ( block   instanceof   RunLengthEncodedBlock )     {", "return    . to (  (  ( RunLengthEncodedBlock )     ( block )  )  )  ;", "}", "if    (  !  ( block   instanceof   AbstractRowBlock )  )     {", "throw   new   IllegalArgumentException (  (  \" Invalid   row   block :     \"     +     ( block . getClass (  )  . getName (  )  )  )  )  ;", "}", "AbstractRowBlock   rowBlock    =     (  ( AbstractRowBlock )     ( block )  )  ;", "int   firstRowPosition    =    rowBlock . getFieldBlockOffset (  0  )  ;", "int   totalRowCount    =     ( rowBlock . getFieldBlockOffset ( block . getPositionCount (  )  )  )     -    firstRowPosition ;", "Block [  ]    fieldBlocks    =    new   Block [ rowBlock . numFields ]  ;", "for    ( int   i    =     0  ;    i    <     ( fieldBlocks . length )  ;    i +  +  )     {", "fieldBlocks [ i ]     =    rowBlock . getFieldBlocks (  )  [ i ]  . getRegion ( firstRowPosition ,    totalRowCount )  ;", "}", "return   new    ( block ,    fieldBlocks )  ;", "}", "METHOD_END"], "methodName": ["toColumnarRow"], "fileName": "com.facebook.presto.spi.block.ColumnarRow"}, {"methodBody": ["METHOD_START", "{", "Block   dictionary    =    dictionaryBlock . getDictionary (  )  ;", "int [  ]    newDictionaryIndex    =    new   int [ dictionary . getPositionCount (  )  ]  ;", "int   nextNewDictionaryIndex    =     0  ;", "for    ( int   position    =     0  ;    position    <     ( dictionary . getPositionCount (  )  )  ;    position +  +  )     {", "if    (  !  ( dictionary . isNull ( position )  )  )     {", "newDictionaryIndex [ position ]     =    nextNewDictionaryIndex ;", "nextNewDictionaryIndex +  +  ;", "}", "}", "int [  ]    dictionaryIds    =    new   int [ dictionaryBlock . getPositionCount (  )  ]  ;", "int   nonNullPositionCount    =     0  ;", "for    ( int   position    =     0  ;    position    <     ( dictionaryBlock . getPositionCount (  )  )  ;    position +  +  )     {", "if    (  !  ( dictionaryBlock . isNull ( position )  )  )     {", "int   oldDictionaryId    =    dictionaryBlock . getId ( position )  ;", "dictionaryIds [ nonNullPositionCount ]     =    newDictionaryIndex [ oldDictionaryId ]  ;", "nonNullPositionCount +  +  ;", "}", "}", "columnarRow    =     . to ( dictionaryBlock . getDictionary (  )  )  ;", "Block [  ]    fields    =    new   Block [ columnarRow . getFieldCount (  )  ]  ;", "for    ( int   i    =     0  ;    i    <     ( columnarRow . getFieldCount (  )  )  ;    i +  +  )     {", "fields [ i ]     =    new   DictionaryBlock ( nonNullPositionCount ,    columnarRow . getField ( i )  ,    dictionaryIds )  ;", "}", "return   new    ( dictionaryBlock ,    fields )  ;", "}", "METHOD_END"], "methodName": ["toColumnarRow"], "fileName": "com.facebook.presto.spi.block.ColumnarRow"}, {"methodBody": ["METHOD_START", "{", "Block   rleValue    =    rleBlock . getValue (  )  ;", "columnarRow    =     . to ( rleValue )  ;", "Block [  ]    fields    =    new   Block [ columnarRow . getFieldCount (  )  ]  ;", "for    ( int   i    =     0  ;    i    <     ( columnarRow . getFieldCount (  )  )  ;    i +  +  )     {", "Block   nullSuppressedField    =    columnarRow . getField ( i )  ;", "if    ( rleValue . isNull (  0  )  )     {", "if    (  ( nullSuppressedField . getPositionCount (  )  )     !  =     0  )     {", "throw   new   IllegalArgumentException (  \" Invalid   row   block \"  )  ;", "}", "fields [ i ]     =    nullSuppressedField ;", "} else    {", "fields [ i ]     =    new   RunLengthEncodedBlock ( nullSuppressedField ,    rleBlock . getPositionCount (  )  )  ;", "}", "}", "return   new    ( rleBlock ,    fields )  ;", "}", "METHOD_END"], "methodName": ["toColumnarRow"], "fileName": "com.facebook.presto.spi.block.ColumnarRow"}, {"methodBody": ["METHOD_START", "{", "T [  ]    objectsWithNulls    =     (  ( T [  ]  )     ( Array . newInstance ( objects . getClass (  )  . getComponentType (  )  ,     (  (  ( objects . length )     *     2  )     +     1  )  )  )  )  ;", "for    ( int   i    =     0  ;    i    <     ( objects . length )  ;    i +  +  )     {", "objectsWithNulls [  ( i    *     2  )  ]     =    null ;", "objectsWithNulls [  (  ( i    *     2  )     +     1  )  ]     =    objects [ i ]  ;", "}", "objectsWithNulls [  (  ( objectsWithNulls . length )     -     1  )  ]     =    null ;", "return   objectsWithNulls ;", "}", "METHOD_END"], "methodName": ["alternatingNullValues"], "fileName": "com.facebook.presto.spi.block.ColumnarTestUtils"}, {"methodBody": ["METHOD_START", "{", "ColumnarTestUtils . assertBlockPositions ( block ,    expectedValues )  ;", "ColumnarTestUtils . assertBlockPositions ( ColumnarTestUtils . copyBlock ( block )  ,    expectedValues )  ;", "}", "METHOD_END"], "methodName": ["assertBlock"], "fileName": "com.facebook.presto.spi.block.ColumnarTestUtils"}, {"methodBody": ["METHOD_START", "{", "ColumnarTestUtils . assertPositionValue ( block ,    position ,    expectedValue )  ;", "ColumnarTestUtils . assertPositionValue ( block . getSingleValueBlock ( position )  ,     0  ,    expectedValue )  ;", "}", "METHOD_END"], "methodName": ["assertBlockPosition"], "fileName": "com.facebook.presto.spi.block.ColumnarTestUtils"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( block . getPositionCount (  )  ,    expectedValues . length )  ;", "for    ( int   position    =     0  ;    position    <     ( block . getPositionCount (  )  )  ;    position +  +  )     {", ". assertBlockPosition ( block ,    position ,    expectedValues [ position ]  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertBlockPositions"], "fileName": "com.facebook.presto.spi.block.ColumnarTestUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( expectedValue    =  =    null )     {", "assertTrue ( block . isNull ( position )  )  ;", "return ;", "}", "assertFalse ( block . isNull ( position )  )  ;", "if    ( expectedValue   instanceof   Slice )     {", "Slice   expectedSliceValue    =     (  ( Slice )     ( expectedValue )  )  ;", "int   length    =    block . getSliceLength ( position )  ;", "assertEquals ( length ,    expectedSliceValue . length (  )  )  ;", "Slice   actual    =    block . getSlice ( position ,     0  ,    length )  ;", "assertEquals ( actual ,    expectedSliceValue )  ;", "} else", "if    ( expectedValue   instanceof   Slice [  ]  )     {", "Block   actual    =    block . getObject ( position ,    Block . class )  ;", ". assertBlock ( actual ,     (  ( Slice [  ]  )     ( expectedValue )  )  )  ;", "} else", "if    ( expectedValue   instanceof   Slice [  ]  [  ]  )     {", "Block   actual    =    block . getObject ( position ,    Block . class )  ;", ". assertBlock ( actual ,     . flattenMapEntries (  (  ( Slice [  ]  [  ]  )     ( expectedValue )  )  )  )  ;", "} else    {", "throw   new   IllegalArgumentException ( expectedValue . getClass (  )  . getName (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertPositionValue"], "fileName": "com.facebook.presto.spi.block.ColumnarTestUtils"}, {"methodBody": ["METHOD_START", "{", "DynamicSliceOutput   sliceOutput    =    new   DynamicSliceOutput (  1  0  2  4  )  ;", "BlockEncoding   ncoding    =    getEncoding (  )  ;", "ncoding . writeBlock ( sliceOutput ,     ;", "return   ncoding . readBlock ( sliceOutput . slice (  )  . getInput (  )  )  ;", "}", "METHOD_END"], "methodName": ["copyBlock"], "fileName": "com.facebook.presto.spi.block.ColumnarTestUtils"}, {"methodBody": ["METHOD_START", "{", "int [  ]    dictionaryIndexes    =    ColumnarTestUtils . createTestDictionaryIndexes ( block . getPositionCount (  )  )  ;", "return   new   DictionaryBlock ( dictionaryIndexes . length ,    block ,    dictionaryIndexes )  ;", "}", "METHOD_END"], "methodName": ["createTestDictionaryBlock"], "fileName": "com.facebook.presto.spi.block.ColumnarTestUtils"}, {"methodBody": ["METHOD_START", "{", "int [  ]    dictionaryIndexes    =    ColumnarTestUtils . createTestDictionaryIndexes ( expectedValues . length )  ;", "T [  ]    expectedDictionaryValues    =    Arrays . copyOf ( expectedValues ,    dictionaryIndexes . length )  ;", "for    ( int   i    =     0  ;    i    <     ( dictionaryIndexes . length )  ;    i +  +  )     {", "int   dictionaryIndex    =    dictionaryIndexes [ i ]  ;", "T   expectedValue    =    expectedValues [ dictionaryIndex ]  ;", "expectedDictionaryValues [ i ]     =    expectedValue ;", "}", "return   expectedDictionaryValues ;", "}", "METHOD_END"], "methodName": ["createTestDictionaryExpectedValues"], "fileName": "com.facebook.presto.spi.block.ColumnarTestUtils"}, {"methodBody": ["METHOD_START", "{", "int [  ]    dictionaryIndexes    =    new   int [ valueCount    *     2  ]  ;", "for    ( int   i    =     0  ;    i    <    valueCount ;    i +  +  )     {", "dictionaryIndexes [ i ]     =     ( valueCount    -    i )     -     1  ;", "dictionaryIndexes [  ( i    +    valueCount )  ]     =    i ;", "}", "return   dictionaryIndexes ;", "}", "METHOD_END"], "methodName": ["createTestDictionaryIndexes"], "fileName": "com.facebook.presto.spi.block.ColumnarTestUtils"}, {"methodBody": ["METHOD_START", "{", "return   new   RunLengthEncodedBlock ( block . getRegion ( position ,     1  )  ,     1  0  )  ;", "}", "METHOD_END"], "methodName": ["createTestRleBlock"], "fileName": "com.facebook.presto.spi.block.ColumnarTestUtils"}, {"methodBody": ["METHOD_START", "{", "T [  ]    expectedDictionaryValues    =    Arrays . copyOf ( expectedValues ,     1  0  )  ;", "for    ( int   i    =     0  ;    i    <     1  0  ;    i +  +  )     {", "expectedDictionaryValues [ i ]     =    expectedValues [ position ]  ;", "}", "return   expectedDictionaryValues ;", "}", "METHOD_END"], "methodName": ["createTestRleExpectedValues"], "fileName": "com.facebook.presto.spi.block.ColumnarTestUtils"}, {"methodBody": ["METHOD_START", "{", "Slice [  ]    flattened    =    new   Slice [  ( mapEntries . length )     *     2  ]  ;", "for    ( int   i    =     0  ;    i    <     ( mapEntries . length )  ;    i +  +  )     {", "Slice [  ]    mapEntry    =    mapEntries [ i ]  ;", "assertEquals ( mapEntry . length ,     2  )  ;", "flattened [  ( i    *     2  )  ]     =    mapEntry [  0  ]  ;", "flattened [  (  ( i    *     2  )     +     1  )  ]     =    mapEntry [  1  ]  ;", "}", "return   flattened ;", "}", "METHOD_END"], "methodName": ["flattenMapEntries"], "fileName": "com.facebook.presto.spi.block.ColumnarTestUtils"}, {"methodBody": ["METHOD_START", "{", "long   sizeInBytes    =     0  ;", "int   uniqueIds    =     0  ;", "boolean [  ]    seen    =    new   boolean [ d . getPositionCount (  )  ]  ;", "for    ( int   i    =     0  ;    i    <     ( positionCount )  ;    i +  +  )     {", "int   position    =    getId ( i )  ;", "if    (  !  ( seen [ position ]  )  )     {", "if    (  !  ( d . isNull ( position )  )  )     {", "sizeInBytes    +  =    d . getRegionSizeInBytes ( position ,     1  )  ;", "}", "uniqueIds +  +  ;", "seen [ position ]     =    true ;", "}", "}", "this . sizeInBytes    =    sizeInBytes    +     (  ( Integer . BYTES )     *     (  ( long )     ( positionCount )  )  )  ;", "this . uniqueIds    =    uniqueIds ;", "}", "METHOD_END"], "methodName": ["calculateCompactSize"], "fileName": "com.facebook.presto.spi.block.DictionaryBlock"}, {"methodBody": ["METHOD_START", "{", "if    ( isCompact (  )  )     {", "return   this ;", "}", "int   dictionarySize    =    dictionary . getPositionCount (  )  ;", "IntArrayList   dictionaryPositionsToCopy    =    new   IntArrayList ( Math . min ( dictionarySize ,    positionCount )  )  ;", "int [  ]    remapIndex    =    new   int [ dictionarySize ]  ;", "Arrays . fill ( remapIndex ,     (  -  1  )  )  ;", "int   newIndex    =     0  ;", "for    ( int   i    =     0  ;    i    <     ( positionCount )  ;    i +  +  )     {", "int   dictionaryIndex    =    getId ( i )  ;", "if    (  ( remapIndex [ dictionaryIndex ]  )     =  =     (  -  1  )  )     {", "dictionaryPositionsToCopy . add ( dictionaryIndex )  ;", "remapIndex [ dictionaryIndex ]     =    newIndex ;", "newIndex +  +  ;", "}", "}", "if    (  ( dictionaryPositionsToCopy . size (  )  )     =  =    dictionarySize )     {", "return   this ;", "}", "int [  ]    newIds    =    new   int [ positionCount ]  ;", "for    ( int   i    =     0  ;    i    <     ( positionCount )  ;    i +  +  )     {", "int   newId    =    remapIndex [ getId ( i )  ]  ;", "if    ( newId    =  =     (  -  1  )  )     {", "throw   new   IllegalStateException (  \" reference   to   a   non - existent   key \"  )  ;", "}", "newIds [ i ]     =    newId ;", "}", "try    {", "Block   compactDictionary    =    dictionary . copyPositions ( dictionaryPositionsToCopy . elements (  )  ,     0  ,    dictionaryPositionsToCopy . size (  )  )  ;", "return   new    ( positionCount ,    compactDictionary ,    newIds ,    true )  ;", "}    catch    ( UnsupportedOperationException   e )     {", "return   this ;", "}", "}", "METHOD_END"], "methodName": ["compact"], "fileName": "com.facebook.presto.spi.block.DictionaryBlock"}, {"methodBody": ["METHOD_START", "{", "return   dictionary ;", "}", "METHOD_END"], "methodName": ["getDictionary"], "fileName": "com.facebook.presto.spi.block.DictionaryBlock"}, {"methodBody": ["METHOD_START", "{", "return   dictionarySourceId ;", "}", "METHOD_END"], "methodName": ["getDictionarySourceId"], "fileName": "com.facebook.presto.spi.block.DictionaryBlock"}, {"methodBody": ["METHOD_START", "{", "BlockUtil . checkValidPosition ( position ,    positionCount )  ;", "return   ids [  ( position    +     ( idsOffset )  )  ]  ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "com.facebook.presto.spi.block.DictionaryBlock"}, {"methodBody": ["METHOD_START", "{", "return   Slices . wrappedIntArray ( ids ,    idsOffset ,    positionCount )  ;", "}", "METHOD_END"], "methodName": ["getIds"], "fileName": "com.facebook.presto.spi.block.DictionaryBlock"}, {"methodBody": ["METHOD_START", "{", "if    (  ( uniqueIds )     <     0  )     {", "calculateCompactSize (  )  ;", "}", "return    ( uniqueIds )     =  =     ( d . getPositionCount (  )  )  ;", "}", "METHOD_END"], "methodName": ["isCompact"], "fileName": "com.facebook.presto.spi.block.DictionaryBlock"}, {"methodBody": ["METHOD_START", "{", "return   dictionaryEncoding ;", "}", "METHOD_END"], "methodName": ["getDictionaryEncoding"], "fileName": "com.facebook.presto.spi.block.DictionaryBlockEncoding"}, {"methodBody": ["METHOD_START", "{", "return   leastSignificantBits ;", "}", "METHOD_END"], "methodName": ["getLeastSignificantBits"], "fileName": "com.facebook.presto.spi.block.DictionaryId"}, {"methodBody": ["METHOD_START", "{", "return   mostSignificantBits ;", "}", "METHOD_END"], "methodName": ["getMostSignificantBits"], "fileName": "com.facebook.presto.spi.block.DictionaryId"}, {"methodBody": ["METHOD_START", "{", "return   sequenceId ;", "}", "METHOD_END"], "methodName": ["getSequenceId"], "fileName": "com.facebook.presto.spi.block.DictionaryId"}, {"methodBody": ["METHOD_START", "{", "return   new   DictionaryId ( DictionaryId . nodeId . getMostSignificantBits (  )  ,    DictionaryId . nodeId . getLeastSignificantBits (  )  ,    DictionaryId . sequenceGenerator . getAndIncrement (  )  )  ;", "}", "METHOD_END"], "methodName": ["randomDictionaryId"], "fileName": "com.facebook.presto.spi.block.DictionaryId"}, {"methodBody": ["METHOD_START", "{", "boolean [  ]    valueIsNull    =    new   boolean [ positionCount ]  ;", "for    ( int   position    =     0  ;    position    <     ( positionCount    &     (  ~  7  )  )  ;    position    +  =     8  )     {", "byte   value    =    sliceInput . readByte (  )  ;", "valueIsNull [ position ]     =     ( value    &     1  2  8  )     !  =     0  ;", "valueIsNull [  ( position    +     1  )  ]     =     ( value    &     6  4  )     !  =     0  ;", "valueIsNull [  ( position    +     2  )  ]     =     ( value    &     3  2  )     !  =     0  ;", "valueIsNull [  ( position    +     3  )  ]     =     ( value    &     1  6  )     !  =     0  ;", "valueIsNull [  ( position    +     4  )  ]     =     ( value    &     8  )     !  =     0  ;", "valueIsNull [  ( position    +     5  )  ]     =     ( value    &     4  )     !  =     0  ;", "valueIsNull [  ( position    +     6  )  ]     =     ( value    &     2  )     !  =     0  ;", "valueIsNull [  ( position    +     7  )  ]     =     ( value    &     1  )     !  =     0  ;", "}", "if    (  ( positionCount    &     7  )     >     0  )     {", "byte   value    =    sliceInput . readByte (  )  ;", "int   mask    =     1  2  8  ;", "for    ( int   position    =    positionCount    &     (  ~  7  )  ;    position    <    positionCount ;    position +  +  )     {", "valueIsNull [ position ]     =     ( value    &    mask )     !  =     0  ;", "mask    >  >  >  =     1  ;", "}", "}", "return   valueIsNull ;", "}", "METHOD_END"], "methodName": ["decodeNullBits"], "fileName": "com.facebook.presto.spi.block.EncoderUtil"}, {"methodBody": ["METHOD_START", "{", "int   positionCount    =    block . getPositionCount (  )  ;", "for    ( int   position    =     0  ;    position    <     ( positionCount    &     (  ~  7  )  )  ;    position    +  =     8  )     {", "byte   value    =     0  ;", "value    |  =     ( block . isNull ( position )  )     ?     1  2  8     :     0  ;", "value    |  =     ( block . isNull (  ( position    +     1  )  )  )     ?     6  4     :     0  ;", "value    |  =     ( block . isNull (  ( position    +     2  )  )  )     ?     3  2     :     0  ;", "value    |  =     ( block . isNull (  ( position    +     3  )  )  )     ?     1  6     :     0  ;", "value    |  =     ( block . isNull (  ( position    +     4  )  )  )     ?     8     :     0  ;", "value    |  =     ( block . isNull (  ( position    +     5  )  )  )     ?     4     :     0  ;", "value    |  =     ( block . isNull (  ( position    +     6  )  )  )     ?     2     :     0  ;", "value    |  =     ( block . isNull (  ( position    +     7  )  )  )     ?     1     :     0  ;", "sliceOutput . appendByte ( value )  ;", "}", "if    (  ( positionCount    &     7  )     >     0  )     {", "byte   value    =     0  ;", "int   mask    =     1  2  8  ;", "for    ( int   position    =    positionCount    &     (  ~  7  )  ;    position    <    positionCount ;    position +  +  )     {", "value    |  =     ( block . isNull ( position )  )     ?    mask    :     0  ;", "mask    >  >  >  =     1  ;", "}", "sliceOutput . appendByte ( value )  ;", "}", "}", "METHOD_END"], "methodName": ["encodeNullsAsBits"], "fileName": "com.facebook.presto.spi.block.EncoderUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( initialized )  )     {", "initializeCapacity (  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkCapacity"], "fileName": "com.facebook.presto.spi.block.FixedWidthBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "checkCapacity (  )  ;", "valueIsNull . appendByte (  ( isNull    ?     1     :     0  )  )  ;", "( positionCount )  +  +  ;", "if    (  ( bStatus )     !  =    null )     {", "bStatus . addBytes (  (  ( Byte . BYTES )     +     ( fixedSize )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["entryAdded"], "fileName": "com.facebook.presto.spi.block.FixedWidthBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( positionCount )     !  =     0  )     |  |     (  ( currentEntrySize )     !  =     0  )  )     {", "throw   new   IllegalStateException (  (  ( getClass (  )  . getSimpleName (  )  )     +     \"    was   used   before   initialization \"  )  )  ;", "}", "int   initialSliceOutputSize    =     (  ( int )     ( Math . min (  (  (  ( long )     ( fixedSize )  )     *     ( initialEntryCount )  )  ,    Util . MAX _ ARRAY _ SIZE )  )  )  ;", "sliceOutput    =    new   DynamicSliceOutput ( initialSliceOutputSize )  ;", "valueIsNull    =    new   DynamicSliceOutput ( initialEntryCount )  ;", "initialized    =    true ;", "}", "METHOD_END"], "methodName": ["initializeCapacity"], "fileName": "com.facebook.presto.spi.block.FixedWidthBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "return   fixedSize ;", "}", "METHOD_END"], "methodName": ["getFixedSize"], "fileName": "com.facebook.presto.spi.block.FixedWidthBlockEncoding"}, {"methodBody": ["METHOD_START", "{", "if    (  ( position    <     0  )     |  |     ( position    >  =     ( getPositionCount (  )  )  )  )     {", "throw   new   IllegalArgumentException (  \" position   is   not   valid \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkReadablePosition"], "fileName": "com.facebook.presto.spi.block.IntArrayBlock"}, {"methodBody": ["METHOD_START", "{", "if    (  ( position    <     0  )     |  |     ( position    >  =     ( getPositionCount (  )  )  )  )     {", "throw   new   IllegalArgumentException (  \" position   is   not   valid \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkReadablePosition"], "fileName": "com.facebook.presto.spi.block.IntArrayBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "int   newSize ;", "if    ( initialized )     {", "newSize    =    BlockUtil . calculateNewSize ( values . length )  ;", "} else    {", "newSize    =    initialEntryCount ;", "initialized    =    true ;", "}", "valueIsNull    =    s . copyOf ( valueIsNull ,    newSize )  ;", "values    =    s . copyOf ( values ,    newSize )  ;", "updateDataSize (  )  ;", "}", "METHOD_END"], "methodName": ["growCapacity"], "fileName": "com.facebook.presto.spi.block.IntArrayBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "retainedSizeInBytes    =     (  ( IntArrayBlockBuilder . INSTANCE _ SIZE )     +     ( SizeOf . sizeOf ( valueIsNull )  )  )     +     ( SizeOf . sizeOf ( values )  )  ;", "if    (  ( blockBuilderStatus )     !  =    null )     {", "retainedSizeInBytes    +  =    BlockBuilderStatus . INSTANCE _ SIZE ;", "}", "}", "METHOD_END"], "methodName": ["updateDataSize"], "fileName": "com.facebook.presto.spi.block.IntArrayBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "grow (  (  ( size )     +     1  )  )  ;", "a [  (  ( size )  +  +  )  ]     =    element ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.facebook.presto.spi.block.IntArrayList"}, {"methodBody": ["METHOD_START", "{", "return   array ;", "}", "METHOD_END"], "methodName": ["elements"], "fileName": "com.facebook.presto.spi.block.IntArrayList"}, {"methodBody": ["METHOD_START", "{", "if    (  ( array . length )     =  =     ( BlockUtil . MAX _ ARRAY _ SIZE )  )     {", "throw   new   IllegalStateException (  \"    reached   maximum   size \"  )  ;", "}", "if    ( newCapacity    >     ( array . length )  )     {", "int   newLength    =     (  ( int )     ( Math . min ( Math . max (  (  2 L    *     (  ( long )     ( array . length )  )  )  ,     (  ( long )     ( newCapacity )  )  )  ,    BlockUtil . MAX _ ARRAY _ SIZE )  )  )  ;", "array    =    s . copyOf ( array ,    newLength )  ;", "}", "}", "METHOD_END"], "methodName": ["grow"], "fileName": "com.facebook.presto.spi.block.IntArrayList"}, {"methodBody": ["METHOD_START", "{", "return    ( size )     =  =     0  ;", "}", "METHOD_END"], "methodName": ["isEmpty"], "fileName": "com.facebook.presto.spi.block.IntArrayList"}, {"methodBody": ["METHOD_START", "{", "return   size ;", "}", "METHOD_END"], "methodName": ["size"], "fileName": "com.facebook.presto.spi.block.IntArrayList"}, {"methodBody": ["METHOD_START", "{", "assureLoaded (  )  ;", "return    ;", "}", "METHOD_END"], "methodName": ["getBlock"], "fileName": "com.facebook.presto.spi.block.LazyBlock"}, {"methodBody": ["METHOD_START", "{", "return    ( block )     !  =    null ;", "}", "METHOD_END"], "methodName": ["isLoaded"], "fileName": "com.facebook.presto.spi.block.LazyBlock"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . block )     !  =    null )     {", "throw   new   IllegalStateException (  \" block   already   set \"  )  ;", "}", "this . block    =    Objects . requireNonNull ( block ,     \" block   is   null \"  )  ;", "}", "METHOD_END"], "methodName": ["setBlock"], "fileName": "com.facebook.presto.spi.block.LazyBlock"}, {"methodBody": ["METHOD_START", "{", "if    (  ( position    <     0  )     |  |     ( position    >  =     ( getPositionCount (  )  )  )  )     {", "throw   new   IllegalArgumentException (  \" position   is   not   valid \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkReadablePosition"], "fileName": "com.facebook.presto.spi.block.LongArrayBlock"}, {"methodBody": ["METHOD_START", "{", "if    (  ( position    <     0  )     |  |     ( position    >  =     ( getPositionCount (  )  )  )  )     {", "throw   new   IllegalArgumentException (  \" position   is   not   valid \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkReadablePosition"], "fileName": "com.facebook.presto.spi.block.LongArrayBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "int   newSize ;", "if    ( initialized )     {", "newSize    =    BlockUtil . calculateNewSize ( values . length )  ;", "} else    {", "newSize    =    initialEntryCount ;", "initialized    =    true ;", "}", "valueIsNull    =    s . copyOf ( valueIsNull ,    newSize )  ;", "values    =    s . copyOf ( values ,    newSize )  ;", "updateDataSize (  )  ;", "}", "METHOD_END"], "methodName": ["growCapacity"], "fileName": "com.facebook.presto.spi.block.LongArrayBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "retainedSizeInBytes    =     (  ( LongArrayBlockBuilder . INSTANCE _ SIZE )     +     ( SizeOf . sizeOf ( valueIsNull )  )  )     +     ( SizeOf . sizeOf ( values )  )  ;", "if    (  ( blockBuilderStatus )     !  =    null )     {", "retainedSizeInBytes    +  =    BlockBuilderStatus . INSTANCE _ SIZE ;", "}", "}", "METHOD_END"], "methodName": ["updateDataSize"], "fileName": "com.facebook.presto.spi.block.LongArrayBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "int   entriesStart    =    offsets [ startOffset ]  ;", "int   entriesEnd    =    offsets [  (  ( startOffset )     +     ( positionCount )  )  ]  ;", "int   entryCount    =    entriesEnd    -    entriesStart ;", "sizeInBytes    =     (  (  ( keyBlock . getRegionSizeInBytes ( entriesStart ,    entryCount )  )     +     ( valueBlock . getRegionSizeInBytes ( entriesStart ,    entryCount )  )  )     +     (  (  ( Integer . BYTES )     +     ( Byte . BYTES )  )     *     (  ( long )     ( this . positionCount )  )  )  )     +     (  (  ( Integer . BYTES )     *     ( Abstract . HASH _ MULTIPLIER )  )     *     (  ( long )     ( entryCount )  )  )  ;", "}", "METHOD_END"], "methodName": ["calculateSize"], "fileName": "com.facebook.presto.spi.block.MapBlock"}, {"methodBody": ["METHOD_START", "{", "MapBlock . validateConstructorArguments ( startOffset ,    positionCount ,    mapIsNull ,    offsets ,    keyBlock ,    valueBlock ,    keyType ,    keyBlockNativeEquals ,    keyNativeHashCode )  ;", "return   new   MapBlock ( startOffset ,    positionCount ,    mapIsNull ,    offsets ,    keyBlock ,    valueBlock ,    hashTables ,    keyType ,    keyBlockNativeEquals ,    keyNativeHashCode )  ;", "}", "METHOD_END"], "methodName": ["createMapBlockInternal"], "fileName": "com.facebook.presto.spi.block.MapBlock"}, {"methodBody": ["METHOD_START", "{", "MapBlock . validateConstructorArguments (  0  ,    mapIsNull . length ,    mapIsNull ,    offsets ,    keyBlock ,    valueBlock ,    mapType . getKeyType (  )  ,    keyBlockNativeEquals ,    keyNativeHashCode )  ;", "int   mapCount    =    mapIsNull . length ;", "int   elementCount    =    keyBlock . getPositionCount (  )  ;", "int [  ]    hashTables    =    new   int [ elementCount    *     ( AbstractMapBlock . HASH _ MULTIPLIER )  ]  ;", "Arrays . fill ( hashTables ,     (  -  1  )  )  ;", "for    ( int   i    =     0  ;    i    <    mapCount ;    i +  +  )     {", "int   keyOffset    =    offsets [ i ]  ;", "int   keyCount    =     ( offsets [  ( i    +     1  )  ]  )     -    keyOffset ;", "if    ( keyCount    <     0  )     {", "throw   new   IllegalArgumentException ( String . format (  \" Offset   is   not   monotonically   ascending .    offsets [  % s ]  =  % s ,    offsets [  % s ]  =  % s \"  ,    i ,    offsets [ i ]  ,     ( i    +     1  )  ,    offsets [  ( i    +     1  )  ]  )  )  ;", "}", "if    (  ( mapIsNull [ i ]  )     &  &     ( keyCount    !  =     0  )  )     {", "throw   new   IllegalArgumentException (  \" A   null   map   must   have   zero   entries \"  )  ;", "}", "MapBlockBuilder . buildHashTable ( keyBlock ,    keyOffset ,    keyCount ,    keyBlockHashCode ,    hashTables ,     ( keyOffset    *     ( AbstractMapBlock . HASH _ MULTIPLIER )  )  ,     ( keyCount    *     ( AbstractMapBlock . HASH _ MULTIPLIER )  )  )  ;", "}", "return   MapBlock . createMapBlockInternal (  0  ,    mapCount ,    mapIsNull ,    offsets ,    keyBlock ,    valueBlock ,    hashTables ,    mapType . getKeyType (  )  ,    keyBlockNativeEquals ,    keyNativeHashCode )  ;", "}", "METHOD_END"], "methodName": ["fromKeyValueBlock"], "fileName": "com.facebook.presto.spi.block.MapBlock"}, {"methodBody": ["METHOD_START", "{", "if    ( startOffset    <     0  )     {", "throw   new   IllegalArgumentException (  \" startOffset   is   negative \"  )  ;", "}", "if    ( positionCount    <     0  )     {", "throw   new   IllegalArgumentException (  \" positionCount   is   negative \"  )  ;", "}", "Objects . requireNonNull ( mapIsNull ,     \" mapIsNull   is   null \"  )  ;", "if    (  (  ( mapIsNull . length )     -    startOffset )     <    positionCount )     {", "throw   new   IllegalArgumentException (  \" isNull   length   is   less   than   positionCount \"  )  ;", "}", "Objects . requireNonNull ( offsets ,     \" offsets   is   null \"  )  ;", "if    (  (  ( offsets . length )     -    startOffset )     <     ( positionCount    +     1  )  )     {", "throw   new   IllegalArgumentException (  \" offsets   length   is   less   than   positionCount \"  )  ;", "}", "Objects . requireNonNull ( key ,     \" key   is   null \"  )  ;", "Objects . requireNonNull ( value ,     \" value   is   null \"  )  ;", "if    (  ( key . getPositionCount (  )  )     !  =     ( value . getPositionCount (  )  )  )     {", "throw   new   IllegalArgumentException ( String . format (  \" key   and   value   has   different   size :     % s    % s \"  ,    key . getPositionCount (  )  ,    value . getPositionCount (  )  )  )  ;", "}", "Objects . requireNonNull ( keyType ,     \" keyType   is   null \"  )  ;", "Objects . requireNonNull ( keyNativeEquals ,     \" keyNativeEquals   is   null \"  )  ;", "Objects . requireNonNull ( keyNativeHashCode ,     \" keyNativeHashCode   is   null \"  )  ;", "}", "METHOD_END"], "methodName": ["validateConstructorArguments"], "fileName": "com.facebook.presto.spi.block.MapBlock"}, {"methodBody": ["METHOD_START", "{", "for    ( int   i    =     0  ;    i    <    keyCount ;    i +  +  )     {", "if    ( keyBisNull (  ( keyOffset    +    i )  )  )     {", "throw   new   IllegalArgumentException (  \" map   keys   cannot   be   null \"  )  ;", "}", "long   hashCode ;", "try    {", "hashCode    =     (  ( long )     ( keyBashCode . invokeExact ( keyB    ( keyOffset    +    i )  )  )  )  ;", "}    catch    ( Throwable   throwable )     {", "if    ( throwable   instanceof   RuntimeException )     {", "throw    (  ( RuntimeException )     ( throwable )  )  ;", "}", "throw   new   RuntimeException ( throwable )  ;", "}", "int   hash    =     (  ( int )     ( Math . floorMod ( hashCode ,    hashTableSize )  )  )  ;", "while    ( true )     {", "if    (  ( outputHashTable [  ( hashTableOffset    +    hash )  ]  )     =  =     (  -  1  )  )     {", "outputHashTable [  ( hashTableOffset    +    hash )  ]     =    i ;", "break ;", "}", "hash +  +  ;", "if    ( hash    =  =    hashTableSize )     {", "hash    =     0  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["buildHashTable"], "fileName": "com.facebook.presto.spi.block.MapBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( currentEntryOpened )  )     {", "throw   new   IllegalStateException (  \" Expected   entry   to   be   opened   but   was   closed \"  )  ;", "}", "entryAdded ( false )  ;", "currentEntryOpened    =    false ;", "ensureHashTableSize (  )  ;", "int   previousAggregatedEntryCount    =    offsets [  (  ( positionCount )     -     1  )  ]  ;", "int   aggregatedEntryCount    =    offsets [ positionCount ]  ;", "int   entryCount    =    aggregatedEntryCount    -    previousAggregatedEntryCount ;", "int   hashTableOffset    =     ( offsets [  (  ( positionCount )     -     1  )  ]  )     *     ( AbstractMapBlock . HASH _ MULTIPLIER )  ;", "int   hashTableSize    =     (  ( offsets [ positionCount ]  )     -     ( offsets [  (  ( positionCount )     -     1  )  ]  )  )     *     ( AbstractMapBlock . HASH _ MULTIPLIER )  ;", "for    ( int   i    =     0  ;    i    <    hashTableSize ;    i +  +  )     {", "hashTables [  ( hashTableOffset    +    i )  ]     =    providedHashTable [  ( providedHashTableOffset    +    i )  ]  ;", "}", "if    (  ( bStatus )     !  =    null )     {", "bStatus . addBytes (  (  ( entryCount    *     ( AbstractMapBlock . HASH _ MULTIPLIER )  )     *     ( Integer . BYTES )  )  )  ;", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["closeEntry"], "fileName": "com.facebook.presto.spi.block.MapBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "if    (  ( hashTables . length )     <     (  ( offsets [ positionCount ]  )     *     ( AbstractMapBlock . HASH _ MULTIPLIER )  )  )     {", "int   newSize    =    BlockUtil . calculateNewArraySize (  (  ( offsets [ positionCount ]  )     *     ( AbstractMapBlock . HASH _ MULTIPLIER )  )  )  ;", "int   oldSize    =    hashTables . length ;", "hashTables    =    Arrays . copyOf ( hashTables ,    newSize )  ;", "Arrays . fill ( hashTables ,    oldSize ,    hashTables . length ,     (  -  1  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["ensureHashTableSize"], "fileName": "com.facebook.presto.spi.block.MapBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "if    (  ( keyBlockBuilder . getPositionCount (  )  )     !  =     ( valueBlockBuilder . getPositionCount (  )  )  )     {", "throw   new   IllegalStateException ( String . format (  \" keyBlock   and   valueBlock   has   different   size :     % s    % s \"  ,    keyBlockBuilder . getPositionCount (  )  ,    valueBlockBuilder . getPositionCount (  )  )  )  ;", "}", "if    (  ( mapIsNull . length )     <  =     ( positionCount )  )     {", "int   newSize    =    BlockUtil . calculateNewArraySize ( mapIsNull . length )  ;", "mapIsNull    =    Arrays . copyOf ( mapIsNull ,    newSize )  ;", "offsets    =    Arrays . copyOf ( offsets ,     ( newSize    +     1  )  )  ;", "}", "offsets [  (  ( positionCount )     +     1  )  ]     =    keyBlockBuilder . getPositionCount (  )  ;", "mapIsNull [ positionCount ]     =    isNull ;", "( positionCount )  +  +  ;", "if    (  ( blockBuilderStatus )     !  =    null )     {", "blockBuilderStatus . addBytes (  (  ( Integer . BYTES )     +     ( Byte . BYTES )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["entryAdded"], "fileName": "com.facebook.presto.spi.block.MapBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "int [  ]    hashTable    =    new   int [ size ]  ;", "Arrays . fill ( hashTable ,     (  -  1  )  )  ;", "return   hashTable ;", "}", "METHOD_END"], "methodName": ["newNegativeOneFilledArray"], "fileName": "com.facebook.presto.spi.block.MapBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "if    (  ( f . type (  )  . parameterType (  0  )  )     !  =     ( g . type (  )  . returnType (  )  )  )     {", "throw   new   IllegalArgumentException ( String . format (  \" f . parameter (  0  )     !  =    g . return (  )  .    f :     % s      g :     % s \"  ,    f . type (  )  ,    g . type (  )  )  )  ;", "}", "fUTS    =    s . dropArguments ( f ,     1  ,    g . type (  )  . parameterList (  )  )  ;", "return   s . foldArguments ( fUTS ,    g )  ;", "}", "METHOD_END"], "methodName": ["compose"], "fileName": "com.facebook.presto.spi.block.MethodHandleUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  ( f . type (  )  . parameterCount (  )  )     !  =     2  )     {", "throw   new   IllegalArgumentException ( String . format (  \" f . parameterCount    !  =     2  .    f :     % s \"  ,    f . type (  )  )  )  ;", "}", "if    (  ( f . type (  )  . parameterType (  0  )  )     !  =     ( g . type (  )  . returnType (  )  )  )     {", "throw   new   IllegalArgumentException ( String . format (  \" f . parameter (  0  )     !  =    g . return .    f :     % s      g :     % s \"  ,    f . type (  )  ,    g . type (  )  )  )  ;", "}", "if    (  ( f . type (  )  . parameterType (  1  )  )     !  =     ( h . type (  )  . returnType (  )  )  )     {", "throw   new   IllegalArgumentException ( String . format (  \" f . parameter (  0  )     !  =    h . return .    f :     % s      h :     % s \"  ,    f . type (  )  ,    h . type (  )  )  )  ;", "}", "MethodType   typeVTU    =    f . type (  )  . dropParameterTypes (  0  ,     1  )  . appendParameterTypes ( h . type (  )  . parameterList (  )  )  . appendParameterTypes ( f . type (  )  . parameterType (  0  )  )  ;", "fVTU    =    s . permuteArguments ( f ,    typeVTU ,     (  ( h . type (  )  . parameterCount (  )  )     +     1  )  ,     0  )  ;", "fhTU    =    s . foldArguments ( fVTU ,    h )  ;", "int [  ]    reorder    =    new   int [ fhTU . type (  )  . parameterCount (  )  ]  ;", "for    ( int   i    =     0  ;    i    <     (  ( reorder . length )     -     1  )  ;    i +  +  )     {", "reorder [ i ]     =     ( i    +     1  )     +     ( g . type (  )  . parameterCount (  )  )  ;", "}", "reorder [  (  ( reorder . length )     -     1  )  ]     =     0  ;", "MethodType   typeUST    =    f . type (  )  . dropParameterTypes (  1  ,     2  )  . appendParameterTypes ( g . type (  )  . parameterList (  )  )  . appendParameterTypes ( h . type (  )  . parameterList (  )  )  ;", "fhUST    =    s . permuteArguments ( fhTU ,    typeUST ,    reorder )  ;", "return   s . foldArguments ( fhUST ,    g )  ;", "}", "METHOD_END"], "methodName": ["compose"], "fileName": "com.facebook.presto.spi.block.MethodHandleUtil"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   s . lookup (  )  . unreflect ( clazz . getMethod ( name ,    parameterTypes )  )  ;", "}    catch    ( IllegalAccessException    |    NoSuchMethodException   e )     {", "throw   new   PrestoException ( StandardErrorCode . GENERIC _ INTERNAL _ ERROR ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["methodHandle"], "fileName": "com.facebook.presto.spi.block.MethodHandleUtil"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    javaType    =    type . getJavaType (  )  ;", "MethodHandle   methodHandle ;", "if    ( javaType    =  =     ( long . class )  )     {", "methodHandle    =     . GET _ LONG ;", "} else", "if    ( javaType    =  =     ( double . class )  )     {", "methodHandle    =     . GET _ DOUBLE ;", "} else", "if    ( javaType    =  =     ( boolean . class )  )     {", "methodHandle    =     . GET _ BOOLEAN ;", "} else", "if    ( javaType    =  =     ( io . airlift . slice . Slice . class )  )     {", "methodHandle    =     . GET _ SLICE ;", "} else", "if    ( javaType    =  =     ( Block . class )  )     {", "methodHandle    =     . GET _ BLOCK ;", "} else", "if    ( javaType    =  =     ( void . class )  )     {", "methodHandle    =     . GET _ UNKNOWN ;", "} else    {", "throw   new   IllegalArgumentException (  (  (  (  \" Unknown   java   type    \"     +    javaType )     +     \"    from   type    \"  )     +    type )  )  ;", "}", "return   methodHandle . bindTo ( type )  ;", "}", "METHOD_END"], "methodName": ["nativeValueGetter"], "fileName": "com.facebook.presto.spi.block.MethodHandleUtil"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    javaType    =    type . getJavaType (  )  ;", "MethodHandle   methodHandle ;", "if    ( javaType    =  =     ( long . class )  )     {", "methodHandle    =     . WRITE _ LONG ;", "} else", "if    ( javaType    =  =     ( double . class )  )     {", "methodHandle    =     . WRITE _ DOUBLE ;", "} else", "if    ( javaType    =  =     ( boolean . class )  )     {", "methodHandle    =     . WRITE _ BOOLEAN ;", "} else", "if    ( javaType    =  =     ( io . airlift . slice . Slice . class )  )     {", "methodHandle    =     . WRITE _ SLICE ;", "} else", "if    ( javaType    =  =     ( Block . class )  )     {", "methodHandle    =     . WRITE _ BLOCK ;", "} else    {", "throw   new   IllegalArgumentException (  (  (  (  \" Unknown   java   type    \"     +    javaType )     +     \"    from   type    \"  )     +    type )  )  ;", "}", "return   methodHandle . bindTo ( type )  ;", "}", "METHOD_END"], "methodName": ["nativeValueWriter"], "fileName": "com.facebook.presto.spi.block.MethodHandleUtil"}, {"methodBody": ["METHOD_START", "{", "throw   new   IllegalArgumentException (  \" For   UNKNOWN   type ,    getter   should   never   be   invoked   on   Block \"  )  ;", "}", "METHOD_END"], "methodName": ["unknownGetter"], "fileName": "com.facebook.presto.spi.block.MethodHandleUtil"}, {"methodBody": ["METHOD_START", "{", "currentSize    +  =    bytes ;", "}", "METHOD_END"], "methodName": ["addBytes"], "fileName": "com.facebook.presto.spi.block.PageBuilderStatus"}, {"methodBody": ["METHOD_START", "{", "return   new   BlockBuilderStatus ( this ,    maxBlockSizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["createBlockBuilderStatus"], "fileName": "com.facebook.presto.spi.block.PageBuilderStatus"}, {"methodBody": ["METHOD_START", "{", "return   maxBlockSizeInBytes ;", "}", "METHOD_END"], "methodName": ["getMaxBlockSizeInBytes"], "fileName": "com.facebook.presto.spi.block.PageBuilderStatus"}, {"methodBody": ["METHOD_START", "{", "return   maxPageSizeInBytes ;", "}", "METHOD_END"], "methodName": ["getMaxPageSizeInBytes"], "fileName": "com.facebook.presto.spi.block.PageBuilderStatus"}, {"methodBody": ["METHOD_START", "{", "return   currentSize ;", "}", "METHOD_END"], "methodName": ["getSizeInBytes"], "fileName": "com.facebook.presto.spi.block.PageBuilderStatus"}, {"methodBody": ["METHOD_START", "{", "return    ( currentSize )     =  =     0  ;", "}", "METHOD_END"], "methodName": ["isEmpty"], "fileName": "com.facebook.presto.spi.block.PageBuilderStatus"}, {"methodBody": ["METHOD_START", "{", "return    ( full )     |  |     (  ( currentSize )     >  =     ( maxPageSizeInBytes )  )  ;", "}", "METHOD_END"], "methodName": ["isFull"], "fileName": "com.facebook.presto.spi.block.PageBuilderStatus"}, {"methodBody": ["METHOD_START", "{", "this . full    =    true ;", "}", "METHOD_END"], "methodName": ["setFull"], "fileName": "com.facebook.presto.spi.block.PageBuilderStatus"}, {"methodBody": ["METHOD_START", "{", "int   startFieldBlockOffset    =    fieldBlockOffsets [ startOffset ]  ;", "int   endFieldBlockOffset    =    fieldBlockOffsets [  (  ( startOffset )     +     ( positionCount )  )  ]  ;", "int   fieldBlockLength    =    endFieldBlockOffset    -    startFieldBlockOffset ;", "long   sizeInBytes    =     (  ( Integer . BYTES )     +     ( Byte . BYTES )  )     *     (  ( long )     ( positionCount )  )  ;", "for    ( int   i    =     0  ;    i    <     ( numFields )  ;    i +  +  )     {", "sizeInBytes    +  =    fieldBlocks [ i ]  . getRegionSizeInBytes ( startFieldBlockOffset ,    fieldBlockLength )  ;", "}", "this . sizeInBytes    =    sizeInBytes ;", "}", "METHOD_END"], "methodName": ["calculateSize"], "fileName": "com.facebook.presto.spi.block.RowBlock"}, {"methodBody": ["METHOD_START", "{", "RowBlock . validateConstructorArguments ( startOffset ,    positionCount ,    rowIsNull ,    fieldBlockOffsets ,    fieldBlocks )  ;", "return   new   RowBlock ( startOffset ,    positionCount ,    rowIsNull ,    fieldBlockOffsets ,    fieldBlocks )  ;", "}", "METHOD_END"], "methodName": ["createRowBlockInternal"], "fileName": "com.facebook.presto.spi.block.RowBlock"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( rowIsNull ,     \" rowIsNull   is   null \"  )  ;", "int [  ]    fieldBlockOffsets    =    new   int [  ( rowIsNull . length )     +     1  ]  ;", "for    ( int   position    =     0  ;    position    <     ( rowIsNull . length )  ;    position +  +  )     {", "fieldBlockOffsets [  ( position    +     1  )  ]     =     ( fieldBlockOffsets [ position ]  )     +     ( rowIsNull [ position ]     ?     0     :     1  )  ;", "}", ". validateConstructorArguments (  0  ,    rowIsNull . length ,    rowIsNull ,    fieldBlockOffsets ,    fieldBlocks )  ;", "return   new    (  0  ,    rowIsNull . length ,    rowIsNull ,    fieldBlockOffsets ,    fieldBlocks )  ;", "}", "METHOD_END"], "methodName": ["fromFieldBlocks"], "fileName": "com.facebook.presto.spi.block.RowBlock"}, {"methodBody": ["METHOD_START", "{", "if    ( startOffset    <     0  )     {", "throw   new   IllegalArgumentException (  \" arrayOffset   is   negative \"  )  ;", "}", "if    ( positionCount    <     0  )     {", "throw   new   IllegalArgumentException (  \" positionCount   is   negative \"  )  ;", "}", "Objects . requireNonNull ( rowIsNull ,     \" rowIsNull   is   null \"  )  ;", "if    (  (  ( rowIsNull . length )     -    startOffset )     <    positionCount )     {", "throw   new   IllegalArgumentException (  \" rowIsNull   length   is   less   than   positionCount \"  )  ;", "}", "Objects . requireNonNull ( fieldBlockOffsets ,     \" fieldBlockOffsets   is   null \"  )  ;", "if    (  (  ( fieldBlockOffsets . length )     -    startOffset )     <     ( positionCount    +     1  )  )     {", "throw   new   IllegalArgumentException (  \" fieldBlockOffsets   length   is   less   than   positionCount \"  )  ;", "}", "Objects . requireNonNull ( fieldBlocks ,     \" fieldBlocks   is   null \"  )  ;", "if    (  ( fieldBlocks . length )     <  =     0  )     {", "throw   new   IllegalArgumentException (  \" Number   of   fields   in      must   be   positive \"  )  ;", "}", "int   firstFieldBlockPositionCount    =    fieldBlocks [  0  ]  . getPositionCount (  )  ;", "for    ( int   i    =     1  ;    i    <     ( fieldBlocks . length )  ;    i +  +  )     {", "if    ( firstFieldBlockPositionCount    !  =     ( fieldBlocks [ i ]  . getPositionCount (  )  )  )     {", "throw   new   IllegalArgumentException ( String . format (  \" length   of   field   blocks   differ :    field    0  :     % s ,    block    % s :     % s \"  ,    firstFieldBlockPositionCount ,    i ,    fieldBlocks [ i ]  . getPositionCount (  )  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["validateConstructorArguments"], "fileName": "com.facebook.presto.spi.block.RowBlock"}, {"methodBody": ["METHOD_START", "{", "if    (  ( rowIsNull . length )     <  =     ( positionCount )  )     {", "int   newSize    =    BlockUtil . calculateNewArraySize ( rowIsNull . length )  ;", "rowIsNull    =    Arrays . copyOf ( rowIsNull ,    newSize )  ;", "fieldBlockOffsets    =    Arrays . copyOf ( fieldBlockOffsets ,     ( newSize    +     1  )  )  ;", "}", "if    ( isNull )     {", "fieldBlockOffsets [  (  ( positionCount )     +     1  )  ]     =    fieldBlockOffsets [ positionCount ]  ;", "} else    {", "fieldBlockOffsets [  (  ( positionCount )     +     1  )  ]     =     ( fieldBlockOffsets [ positionCount ]  )     +     1  ;", "}", "rowIsNull [ positionCount ]     =    isNull ;", "( positionCount )  +  +  ;", "for    ( int   i    =     0  ;    i    <     ( numFields )  ;    i +  +  )     {", "if    (  ( fields [ i ]  . getPositionCount (  )  )     !  =     ( fieldBlockOffsets [ positionCount ]  )  )     {", "throw   new   IllegalStateException ( String . format (  \" field    % s   has   unexpected   position   count .    Expected :     % s ,    actual :     % s \"  ,    i ,    fieldBlockOffsets [ positionCount ]  ,    fields [ i ]  . getPositionCount (  )  )  )  ;", "}", "}", "if    (  ( blockBuilderStatus )     !  =    null )     {", "blockBuilderStatus . addBytes (  (  ( Integer . BYTES )     +     ( Byte . BYTES )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["entryAdded"], "fileName": "com.facebook.presto.spi.block.RowBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "return   valueBlockEncoding ;", "}", "METHOD_END"], "methodName": ["getValueBlockEncoding"], "fileName": "com.facebook.presto.spi.block.RunLengthBlockEncoding"}, {"methodBody": ["METHOD_START", "{", "if    (  ( position    <     0  )     |  |     ( position    >  =     ( positionCount )  )  )     {", "throw   new   IllegalArgumentException (  \" position   is   not   valid \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkReadablePosition"], "fileName": "com.facebook.presto.spi.block.RunLengthEncodedBlock"}, {"methodBody": ["METHOD_START", "{", "Block   block    =    Utils . nativeValueToBlock ( type ,    value )  ;", "return   new    ( block ,    positionCount )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "com.facebook.presto.spi.block.RunLengthEncodedBlock"}, {"methodBody": ["METHOD_START", "{", "return   value ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "com.facebook.presto.spi.block.RunLengthEncodedBlock"}, {"methodBody": ["METHOD_START", "{", "if    (  ( position    <     0  )     |  |     ( position    >  =     ( getPositionCount (  )  )  )  )     {", "throw   new   IllegalArgumentExption (  \" position   is   not   valid \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkReadablePosition"], "fileName": "com.facebook.presto.spi.block.ShortArrayBlock"}, {"methodBody": ["METHOD_START", "{", "if    (  ( position    <     0  )     |  |     ( position    >  =     ( getPositionCount (  )  )  )  )     {", "throw   new   IllegalArgumentExption (  \" position   is   not   valid \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkReadablePosition"], "fileName": "com.facebook.presto.spi.block.ShortArrayBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "int   newSize ;", "if    ( initialized )     {", "newSize    =    BlockUtil . calculateNewSize ( values . length )  ;", "} else    {", "newSize    =    initialEntryCount ;", "initialized    =    true ;", "}", "valueIsNull    =    s . copyOf ( valueIsNull ,    newSize )  ;", "values    =    s . copyOf ( values ,    newSize )  ;", "updateDataSize (  )  ;", "}", "METHOD_END"], "methodName": ["growCapacity"], "fileName": "com.facebook.presto.spi.block.ShortArrayBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "retainedSizeInBytes    =     (  ( ShortArrayBlockBuilder . INSTANCE _ SIZE )     +     ( SizeOf . sizeOf ( valueIsNull )  )  )     +     ( SizeOf . sizeOf ( values )  )  ;", "if    (  ( blockBuilderStatus )     !  =    null )     {", "retainedSizeInBytes    +  =    BlockBuilderStatus . INSTANCE _ SIZE ;", "}", "}", "METHOD_END"], "methodName": ["updateDataSize"], "fileName": "com.facebook.presto.spi.block.ShortArrayBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "( positionsWritten )  +  +  ;", "}", "METHOD_END"], "methodName": ["entryAdded"], "fileName": "com.facebook.presto.spi.block.SingleArrayBlockWriter"}, {"methodBody": ["METHOD_START", "{", "return   hashTable ;", "}", "METHOD_END"], "methodName": ["getHashTable"], "fileName": "com.facebook.presto.spi.block.SingleMapBlock"}, {"methodBody": ["METHOD_START", "{", "if    ( throwable   instanceof   Error )     {", "throw    (  ( Error )     ( throwable )  )  ;", "}", "if    ( throwable   instanceof   PException )     {", "throw    (  ( PException )     ( throwable )  )  ;", "}", "throw   new   PException ( StandardErrorCode . GENERIC _ INTERNAL _ ERROR ,    throwable )  ;", "}", "METHOD_END"], "methodName": ["handleThrowable"], "fileName": "com.facebook.presto.spi.block.SingleMapBlock"}, {"methodBody": ["METHOD_START", "{", "if    (  ( positionCount )     =  =     0  )     {", "return    -  1  ;", "}", "long   hashCode ;", "try    {", "hashCode    =     (  ( long )     ( keyNativeHashCode . invoke ( nativeValue )  )  )  ;", "}    catch    ( Throwable   throwable )     {", "throw    . handleThrowable ( throwable )  ;", "}", "int   hashTableOffset    =     (  ( offset )     /     2  )     *     ( AbstractMapBlock . HASH _ MULTIPLIER )  ;", "int   hashTableSize    =     (  ( positionCount )     /     2  )     *     ( AbstractMapBlock . HASH _ MULTIPLIER )  ;", "int   hash    =     (  ( int )     ( Math . floorMod ( hashCode ,    hashTableSize )  )  )  ;", "while    ( true )     {", "int   keyPosition    =    hashTable [  ( hashTableOffset    +    hash )  ]  ;", "if    ( keyPosition    =  =     (  -  1  )  )     {", "return    -  1  ;", "}", "boolean   match ;", "try    {", "match    =     (  ( boolean )     ( keyBlockNativeEquals . invoke ( keyBlock ,     (  (  ( offset )     /     2  )     +    keyPosition )  ,    nativeValue )  )  )  ;", "}    catch    ( Throwable   throwable )     {", "throw    . handleThrowable ( throwable )  ;", "}", "if    ( match )     {", "return    ( keyPosition    *     2  )     +     1  ;", "}", "hash +  +  ;", "if    ( hash    =  =    hashTableSize )     {", "hash    =     0  ;", "}", "}", "}", "METHOD_END"], "methodName": ["seekKey"], "fileName": "com.facebook.presto.spi.block.SingleMapBlock"}, {"methodBody": ["METHOD_START", "{", "if    (  ( positionCount )     =  =     0  )     {", "return    -  1  ;", "}", "long   hashCode ;", "try    {", "hashCode    =     (  ( long )     ( keyNativeHashCode . invokeExact ( nativeValue )  )  )  ;", "}    catch    ( Throwable   throwable )     {", "throw    . handleThrowable ( throwable )  ;", "}", "int   hashTableOffset    =     (  ( offset )     /     2  )     *     ( AbstractMapBlock . HASH _ MULTIPLIER )  ;", "int   hashTableSize    =     (  ( positionCount )     /     2  )     *     ( AbstractMapBlock . HASH _ MULTIPLIER )  ;", "int   hash    =     (  ( int )     ( Math . floorMod ( hashCode ,    hashTableSize )  )  )  ;", "while    ( true )     {", "int   keyPosition    =    hashTable [  ( hashTableOffset    +    hash )  ]  ;", "if    ( keyPosition    =  =     (  -  1  )  )     {", "return    -  1  ;", "}", "boolean   match ;", "try    {", "match    =     (  ( boolean )     ( keyBlockNativeEquals . invokeExact ( keyBlock ,     (  (  ( offset )     /     2  )     +    keyPosition )  ,    nativeValue )  )  )  ;", "}    catch    ( Throwable   throwable )     {", "throw    . handleThrowable ( throwable )  ;", "}", "if    ( match )     {", "return    ( keyPosition    *     2  )     +     1  ;", "}", "hash +  +  ;", "if    ( hash    =  =    hashTableSize )     {", "hash    =     0  ;", "}", "}", "}", "METHOD_END"], "methodName": ["seekKeyExact"], "fileName": "com.facebook.presto.spi.block.SingleMapBlock"}, {"methodBody": ["METHOD_START", "{", "if    (  ( positionCount )     =  =     0  )     {", "return    -  1  ;", "}", "long   hashCode ;", "try    {", "hashCode    =     (  ( long )     ( keyNativeHashCode . invokeExact ( nativeValue )  )  )  ;", "}    catch    ( Throwable   throwable )     {", "throw    . handleThrowable ( throwable )  ;", "}", "int   hashTableOffset    =     (  ( offset )     /     2  )     *     ( AbstractMapBlock . HASH _ MULTIPLIER )  ;", "int   hashTableSize    =     (  ( positionCount )     /     2  )     *     ( AbstractMapBlock . HASH _ MULTIPLIER )  ;", "int   hash    =     (  ( int )     ( Math . floorMod ( hashCode ,    hashTableSize )  )  )  ;", "while    ( true )     {", "int   keyPosition    =    hashTable [  ( hashTableOffset    +    hash )  ]  ;", "if    ( keyPosition    =  =     (  -  1  )  )     {", "return    -  1  ;", "}", "boolean   match ;", "try    {", "match    =     (  ( boolean )     ( keyBlockNativeEquals . invokeExact ( keyBlock ,     (  (  ( offset )     /     2  )     +    keyPosition )  ,    nativeValue )  )  )  ;", "}    catch    ( Throwable   throwable )     {", "throw    . handleThrowable ( throwable )  ;", "}", "if    ( match )     {", "return    ( keyPosition    *     2  )     +     1  ;", "}", "hash +  +  ;", "if    ( hash    =  =    hashTableSize )     {", "hash    =     0  ;", "}", "}", "}", "METHOD_END"], "methodName": ["seekKeyExact"], "fileName": "com.facebook.presto.spi.block.SingleMapBlock"}, {"methodBody": ["METHOD_START", "{", "if    (  ( positionCount )     =  =     0  )     {", "return    -  1  ;", "}", "long   hashCode ;", "try    {", "hashCode    =     (  ( long )     ( keyNativeHashCode . invokeExact ( nativeValue )  )  )  ;", "}    catch    ( Throwable   throwable )     {", "throw    . handleThrowable ( throwable )  ;", "}", "int   hashTableOffset    =     (  ( offset )     /     2  )     *     ( AbstractMapBlock . HASH _ MULTIPLIER )  ;", "int   hashTableSize    =     (  ( positionCount )     /     2  )     *     ( AbstractMapBlock . HASH _ MULTIPLIER )  ;", "int   hash    =     (  ( int )     ( Math . floorMod ( hashCode ,    hashTableSize )  )  )  ;", "while    ( true )     {", "int   keyPosition    =    hashTable [  ( hashTableOffset    +    hash )  ]  ;", "if    ( keyPosition    =  =     (  -  1  )  )     {", "return    -  1  ;", "}", "boolean   match ;", "try    {", "match    =     (  ( boolean )     ( keyBlockNativeEquals . invokeExact ( keyBlock ,     (  (  ( offset )     /     2  )     +    keyPosition )  ,    nativeValue )  )  )  ;", "}    catch    ( Throwable   throwable )     {", "throw    . handleThrowable ( throwable )  ;", "}", "if    ( match )     {", "return    ( keyPosition    *     2  )     +     1  ;", "}", "hash +  +  ;", "if    ( hash    =  =    hashTableSize )     {", "hash    =     0  ;", "}", "}", "}", "METHOD_END"], "methodName": ["seekKeyExact"], "fileName": "com.facebook.presto.spi.block.SingleMapBlock"}, {"methodBody": ["METHOD_START", "{", "if    (  ( positionCount )     =  =     0  )     {", "return    -  1  ;", "}", "long   hashCode ;", "try    {", "hashCode    =     (  ( long )     ( keyNativeHashCode . invokeExact ( nativeValue )  )  )  ;", "}    catch    ( Throwable   throwable )     {", "throw    . handleThrowable ( throwable )  ;", "}", "int   hashTableOffset    =     (  ( offset )     /     2  )     *     ( AbstractMapBlock . HASH _ MULTIPLIER )  ;", "int   hashTableSize    =     (  ( positionCount )     /     2  )     *     ( AbstractMapBlock . HASH _ MULTIPLIER )  ;", "int   hash    =     (  ( int )     ( Math . floorMod ( hashCode ,    hashTableSize )  )  )  ;", "while    ( true )     {", "int   keyPosition    =    hashTable [  ( hashTableOffset    +    hash )  ]  ;", "if    ( keyPosition    =  =     (  -  1  )  )     {", "return    -  1  ;", "}", "boolean   match ;", "try    {", "match    =     (  ( boolean )     ( keyBlockNativeEquals . invokeExact ( keyBlock ,     (  (  ( offset )     /     2  )     +    keyPosition )  ,    nativeValue )  )  )  ;", "}    catch    ( Throwable   throwable )     {", "throw    . handleThrowable ( throwable )  ;", "}", "if    ( match )     {", "return    ( keyPosition    *     2  )     +     1  ;", "}", "hash +  +  ;", "if    ( hash    =  =    hashTableSize )     {", "hash    =     0  ;", "}", "}", "}", "METHOD_END"], "methodName": ["seekKeyExact"], "fileName": "com.facebook.presto.spi.block.SingleMapBlock"}, {"methodBody": ["METHOD_START", "{", "if    (  ( positionCount )     =  =     0  )     {", "return    -  1  ;", "}", "long   hashCode ;", "try    {", "hashCode    =     (  ( long )     ( keyNativeHashCode . invokeExact ( nativeValue )  )  )  ;", "}    catch    ( Throwable   throwable )     {", "throw    . handleThrowable ( throwable )  ;", "}", "int   hashTableOffset    =     (  ( offset )     /     2  )     *     ( AbstractMapBlock . HASH _ MULTIPLIER )  ;", "int   hashTableSize    =     (  ( positionCount )     /     2  )     *     ( AbstractMapBlock . HASH _ MULTIPLIER )  ;", "int   hash    =     (  ( int )     ( Math . floorMod ( hashCode ,    hashTableSize )  )  )  ;", "while    ( true )     {", "int   keyPosition    =    hashTable [  ( hashTableOffset    +    hash )  ]  ;", "if    ( keyPosition    =  =     (  -  1  )  )     {", "return    -  1  ;", "}", "boolean   match ;", "try    {", "match    =     (  ( boolean )     ( keyBlockNativeEquals . invokeExact ( keyBlock ,     (  (  ( offset )     /     2  )     +    keyPosition )  ,    nativeValue )  )  )  ;", "}    catch    ( Throwable   throwable )     {", "throw    . handleThrowable ( throwable )  ;", "}", "if    ( match )     {", "return    ( keyPosition    *     2  )     +     1  ;", "}", "hash +  +  ;", "if    ( hash    =  =    hashTableSize )     {", "hash    =     0  ;", "}", "}", "}", "METHOD_END"], "methodName": ["seekKeyExact"], "fileName": "com.facebook.presto.spi.block.SingleMapBlock"}, {"methodBody": ["METHOD_START", "{", "writeToValueNext    =     !  ( writeToValueNext )  ;", "( positionsWritten )  +  +  ;", "}", "METHOD_END"], "methodName": ["entryAdded"], "fileName": "com.facebook.presto.spi.block.SingleMapBlockWriter"}, {"methodBody": ["METHOD_START", "{", "return   rowIndex ;", "}", "METHOD_END"], "methodName": ["getRowIndex"], "fileName": "com.facebook.presto.spi.block.SingleRowBlock"}, {"methodBody": ["METHOD_START", "{", "if    ( fieldBlockBuilderReturned )     {", "throw   new   IllegalStateException (  \" cannot   do   sequential   write   after   getFieldBlockBuilder   is   called \"  )  ;", "}", "if    (  ( currentFieldIndexToWrite )     >  =     ( fieldBlockBuilders . length )  )     {", "throw   new   IllegalStateException (  \" currentFieldIndexToWrite   is   not   valid \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkFieldIndexToWrite"], "fileName": "com.facebook.presto.spi.block.SingleRowBlockWriter"}, {"methodBody": ["METHOD_START", "{", "( currentFieldIndexToWrite )  +  +  ;", "( positionsWritten )  +  +  ;", "}", "METHOD_END"], "methodName": ["entryAdded"], "fileName": "com.facebook.presto.spi.block.SingleRowBlockWriter"}, {"methodBody": ["METHOD_START", "{", "if    (  ( currentFieldIndexToWrite )     !  =     0  )     {", "throw   new   IllegalStateException (  \" field   block   builder   can   only   be   obtained   before   any   sequential   write   has   done \"  )  ;", "}", "fieldBlockBuilderReturned    =    true ;", "return   fieldBlockBuilders [ fieldIndex ]  ;", "}", "METHOD_END"], "methodName": ["getFieldBlockBuilder"], "fileName": "com.facebook.presto.spi.block.SingleRowBlockWriter"}, {"methodBody": ["METHOD_START", "{", "boolean   leftIsNull    =    leftBlock . isNull ( leftPosition )  ;", "boolean   rightIsNull    =    rightBlock . isNull ( rightPosition )  ;", "if    ( leftIsNull    &  &    rightIsNull )     {", "return    0  ;", "}", "if    ( leftIsNull )     {", "return   nullsFirst    ?     -  1     :     1  ;", "}", "if    ( rightIsNull )     {", "return   nullsFirst    ?     1     :     -  1  ;", "}", "int   result    =    type . compareTo ( leftBlock ,    leftPosition ,    rightBlock ,    rightPosition )  ;", "return   ascending    ?    result    :     - result ;", "}", "METHOD_END"], "methodName": ["compareBlockValue"], "fileName": "com.facebook.presto.spi.block.SortOrder"}, {"methodBody": ["METHOD_START", "{", "return   ascending ;", "}", "METHOD_END"], "methodName": ["isAscending"], "fileName": "com.facebook.presto.spi.block.SortOrder"}, {"methodBody": ["METHOD_START", "{", "return   nullsFirst ;", "}", "METHOD_END"], "methodName": ["isNullsFirst"], "fileName": "com.facebook.presto.spi.block.SortOrder"}, {"methodBody": ["METHOD_START", "{", "testIsFull ( new   PageBuilderStatus (  (  ( TestArrayBlockBuilder . THREE _ INTS _ ENTRY _ SIZE )     *     ( TestArrayBlockBuilder . EXPECTED _ ENTRY _ COUNT )  )  ,     1  0  2  4  0  )  )  ;", "testIsFull ( new   PageBuilderStatus (  1  0  2  4  0  ,     (  ( TestArrayBlockBuilder . THREE _ INTS _ ENTRY _ SIZE )     *     ( TestArrayBlockBuilder . EXPECTED _ ENTRY _ COUNT )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testArrayBlockIsFull"], "fileName": "com.facebook.presto.spi.block.TestArrayBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "BlockBuilder   blockBuilder    =    new   ArrayBlockBuilder ( BigintType . BIGINT ,    null ,    TestArrayBlockBuilder . EXPECTED _ ENTRY _ COUNT )  ;", "BlockBuilder   elementBlockWriter    =    blockBuilder . beginBlockEntry (  )  ;", "elementBlockWriter . writeLong (  4  5  )  . closeEntry (  )  ;", "blockBuilder . appendStructure ( new   FixedWidthBlockBuilder (  8  ,     4  )  . writeLong (  1  2  3  )  . closeEntry (  )  . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["testConcurrentWriting"], "fileName": "com.facebook.presto.spi.block.TestArrayBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "BlockBuilder   blockBuilder    =    new   ArrayBlockBuilder ( BigintType . BIGINT ,    pageBuilderStatus . createBlockBuilderStatus (  )  ,    TestArrayBlockBuilder . EXPECTED _ ENTRY _ COUNT )  ;", "assertTrue ( pageBuilderStatus . isEmpty (  )  )  ;", "while    (  !  ( pageBuilderStatus . isFull (  )  )  )     {", "BlockBuilder   elementBuilder    =    blockBuilder . beginBlockEntry (  )  ;", "BigintType . BIGINT . writeLong ( elementBuilder ,     1  2  )  ;", "elementBuilder . appendNull (  )  ;", "BigintType . BIGINT . writeLong ( elementBuilder ,     3  4  )  ;", "blockBuilder . closeEntry (  )  ;", "}", "assertEquals ( blockBuilder . getPositionCount (  )  ,    TestArrayBlockBuilder . EXPECTED _ ENTRY _ COUNT )  ;", "assertEquals ( pageBuilderStatus . isFull (  )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["testIsFull"], "fileName": "com.facebook.presto.spi.block.TestArrayBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "int   expectedEntries    =     1  0  0  0  ;", "BlockBuilder   arrayBlockBuilder    =    new    ( BigintType . BIGINT ,    null ,    expectedEntries )  ;", "long   initialRetainedSize    =    arrayBlockBuilder . getRetainedSizeInBytes (  )  ;", "for    ( int   i    =     0  ;    i    <    expectedEntries ;    i +  +  )     {", "BlockBuilder   arrayElementBuilder    =    arrayBlockBuilder . beginBlockEntry (  )  ;", "BigintType . BIGINT . writeLong ( arrayElementBuilder ,    i )  ;", "arrayBlockBuilder . closeEntry (  )  ;", "}", "assertTrue (  (  ( arrayBlockBuilder . getRetainedSizeInBytes (  )  )     >  =     (  (  ( expectedEntries    *     ( Long . BYTES )  )     +     ( ClassLayout . parseClass ( Long . class )  . instanceSize (  )  )  )     +    initialRetainedSize )  )  )  ;", "}", "METHOD_END"], "methodName": ["testRetainedSizeInBytes"], "fileName": "com.facebook.presto.spi.block.TestArrayBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( type    =  =     ( IntegerType . INTEGER )  )     |  |     ( type    =  =     ( TinyintType . TINYINT )  )  )     |  |     ( type    =  =     ( BigintType . BIGINT )  )  )     {", "return    (  ( long )     ( value )  )  ;", "}", "if    ( type    =  =     ( VarcharType . VARCHAR )  )     {", "return   String . valueOf ( value )  ;", "}", "if    ( type    =  =     ( DoubleType . DOUBLE )  )     {", "return    (  ( double )     ( value )  )  ;", "}", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["castIntegerToObject"], "fileName": "com.facebook.presto.spi.block.TestBlockRetainedSizeBreakdown"}, {"methodBody": ["METHOD_START", "{", "AtomicLong   objectSize    =    new   AtomicLong (  )  ;", "Object 2 LongOpenCustomHashMap < Object >    trackedObjects    =    new   Object 2 LongOpenCustomHashMap ( new    . ObjectStrategy (  )  )  ;", "BiConsumer < Object ,    Long >    consumer    =     (    object ,    size )     -  >     {", "objectSize . addAndGet ( size )  ;", "trackedObjects . addTo ( object ,     1  )  ;", "}  ;", "block . retainedBytesForEachPart ( consumer )  ;", "assertEquals ( objectSize . get (  )  ,    block . getRetainedSizeInBytes (  )  )  ;", "Block   copyBlock    =    block . getRegion (  0  ,     (  ( block . getPositionCount (  )  )     /     2  )  )  ;", "copyBlock . retainedBytesForEachPart ( consumer )  ;", "assertEquals ( objectSize . get (  )  ,     (  ( block . getRetainedSizeInBytes (  )  )     +     ( copyBlock . getRetainedSizeInBytes (  )  )  )  )  ;", "assertEquals ( trackedObjects . getLong ( block )  ,     1  )  ;", "assertEquals ( trackedObjects . getLong ( copyBlock )  ,     1  )  ;", "trackedObjects . remove ( block )  ;", "trackedObjects . remove ( copyBlock )  ;", "for    ( long   value    :    trackedObjects . values (  )  )     {", "assertEquals ( value ,     ( getRegionCreateNewObjects    ?     1     :     2  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkRetainedSize"], "fileName": "com.facebook.presto.spi.block.TestBlockRetainedSizeBreakdown"}, {"methodBody": ["METHOD_START", "{", "int [  ]    offsets    =    new   int [ entries    +     1  ]  ;", "DynamicSliceOutput   dynamicSliceOutput    =    new   DynamicSliceOutput ( entries )  ;", "for    ( int   i    =     0  ;    i    <    entries ;    i +  +  )     {", "dynamicSliceOutput . writeByte ( i )  ;", "offsets [  ( i    +     1  )  ]     =    dynamicSliceOutput . size (  )  ;", "}", "return   new   VariableWidth ( entries ,    dynamicSliceOutput . slice (  )  ,    offsets ,    new   boolean [ entries ]  )  ;", "}", "METHOD_END"], "methodName": ["createVariableWidthBlock"], "fileName": "com.facebook.presto.spi.block.TestBlockRetainedSizeBreakdown"}, {"methodBody": ["METHOD_START", "{", "BlockBuilder   arrayBlockBuilder    =    new   ArrayBlockBuilder ( BigintType . BIGINT ,    null ,    TestBlockRetainedSizeBreakdown . EXPECTED _ ENTRIES )  ;", "for    ( int   i    =     0  ;    i    <     ( TestBlockRetainedSizeBreakdown . EXPECTED _ ENTRIES )  ;    i +  +  )     {", "BlockBuilder   arrayElementBuilder    =    arrayBlockBuilder . beginBlockEntry (  )  ;", "TypeUtils . writeNativeValue ( BigintType . BIGINT ,    arrayElementBuilder ,    TestBlockRetainedSizeBreakdown . castIntegerToObject ( i ,    BigintType . BIGINT )  )  ;", "arrayBlockBuilder . closeEntry (  )  ;", "}", "TestBlockRetainedSizeBreakdown . checkRetainedSize ( arrayBlockBuilder . build (  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["testArrayBlock"], "fileName": "com.facebook.presto.spi.block.TestBlockRetainedSizeBreakdown"}, {"methodBody": ["METHOD_START", "{", "BlockBuilder   blockBuilder    =    new   ByteArrayBlockBuilder ( null ,    TestBlockRetainedSizeBreakdown . EXPECTED _ ENTRIES )  ;", "for    ( int   i    =     0  ;    i    <     ( TestBlockRetainedSizeBreakdown . EXPECTED _ ENTRIES )  ;    i +  +  )     {", "blockBuilder . writeByte ( i )  ;", "}", "TestBlockRetainedSizeBreakdown . checkRetainedSize ( blockBuilder . build (  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["testByteArrayBlock"], "fileName": "com.facebook.presto.spi.block.TestBlockRetainedSizeBreakdown"}, {"methodBody": ["METHOD_START", "{", "Block   keyDictionaryBlock    =    TestBlockRetainedSizeBreakdown . createVariableWidthBlock ( TestBlockRetainedSizeBreakdown . EXPECTED _ ENTRIES )  ;", "int [  ]    keyIds    =    new   int [ TestBlockRetainedSizeBreakdown . EXPECTED _ ENTRIES ]  ;", "for    ( int   i    =     0  ;    i    <     ( keyIds . length )  ;    i +  +  )     {", "keyIds [ i ]     =    i ;", "}", "TestBlockRetainedSizeBreakdown . checkRetainedSize ( new   DictionaryBlock ( TestBlockRetainedSizeBreakdown . EXPECTED _ ENTRIES ,    keyDictionaryBlock ,    keyIds )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["testDictionaryBlock"], "fileName": "com.facebook.presto.spi.block.TestBlockRetainedSizeBreakdown"}, {"methodBody": ["METHOD_START", "{", "BlockBuilder   blockBuilder    =    new   FixedWidthBlockBuilder (  8  ,    null ,    TestBlockRetainedSizeBreakdown . EXPECTED _ ENTRIES )  ;", "TestBlockRetainedSizeBreakdown . writeEntries ( TestBlockRetainedSizeBreakdown . EXPECTED _ ENTRIES ,    blockBuilder ,    DoubleType . DOUBLE )  ;", "TestBlockRetainedSizeBreakdown . checkRetainedSize ( blockBuilder . build (  )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["testFixedWidthBlock"], "fileName": "com.facebook.presto.spi.block.TestBlockRetainedSizeBreakdown"}, {"methodBody": ["METHOD_START", "{", "BlockBuilder   blockBuilder    =    new   IntArrayBlockBuilder ( null ,    TestBlockRetainedSizeBreakdown . EXPECTED _ ENTRIES )  ;", "TestBlockRetainedSizeBreakdown . writeEntries ( TestBlockRetainedSizeBreakdown . EXPECTED _ ENTRIES ,    blockBuilder ,    IntegerType . INTEGER )  ;", "TestBlockRetainedSizeBreakdown . checkRetainedSize ( blockBuilder . build (  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["testIntArrayBlock"], "fileName": "com.facebook.presto.spi.block.TestBlockRetainedSizeBreakdown"}, {"methodBody": ["METHOD_START", "{", "BlockBuilder   blockBuilder    =    new   LongArrayBlockBuilder ( null ,    TestBlockRetainedSizeBreakdown . EXPECTED _ ENTRIES )  ;", "TestBlockRetainedSizeBreakdown . writeEntries ( TestBlockRetainedSizeBreakdown . EXPECTED _ ENTRIES ,    blockBuilder ,    BigintType . BIGINT )  ;", "TestBlockRetainedSizeBreakdown . checkRetainedSize ( blockBuilder . build (  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["testLongArrayBlock"], "fileName": "com.facebook.presto.spi.block.TestBlockRetainedSizeBreakdown"}, {"methodBody": ["METHOD_START", "{", "BlockBuilder   blockBuilder    =    new   LongArrayBlockBuilder ( null ,     1  )  ;", ". writeEntries (  1  ,    blockBuilder ,    BigintType . BIGINT )  ;", ". checkRetainedSize ( new   RunLengthEncodedBlock ( blockBuilder . build (  )  ,     1  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["testRunLengthEncodedBlock"], "fileName": "com.facebook.presto.spi.block.TestBlockRetainedSizeBreakdown"}, {"methodBody": ["METHOD_START", "{", "BlockBuilder   blockBuilder    =    new   ShortArrayBlockBuilder ( null ,    TestBlockRetainedSizeBreakdown . EXPECTED _ ENTRIES )  ;", "for    ( int   i    =     0  ;    i    <     ( TestBlockRetainedSizeBreakdown . EXPECTED _ ENTRIES )  ;    i +  +  )     {", "blockBuilder . writeShort ( i )  ;", "}", "TestBlockRetainedSizeBreakdown . checkRetainedSize ( blockBuilder . build (  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["testShortArrayBlock"], "fileName": "com.facebook.presto.spi.block.TestBlockRetainedSizeBreakdown"}, {"methodBody": ["METHOD_START", "{", "TestBlockRetainedSizeBreakdown . checkRetainedSize ( TestBlockRetainedSizeBreakdown . createVariableWidthBlock ( TestBlockRetainedSizeBreakdown . EXPECTED _ ENTRIES )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["testVariableWidthBlock"], "fileName": "com.facebook.presto.spi.block.TestBlockRetainedSizeBreakdown"}, {"methodBody": ["METHOD_START", "{", "for    ( int   i    =     0  ;    i    <    expectedEntries ;    i +  +  )     {", "TypeUtils . writeNativeValue ( type ,    blockBuilder ,     . castIntegerToObject ( i ,    type )  )  ;", "}", "}", "METHOD_END"], "methodName": ["writeEntries"], "fileName": "com.facebook.presto.spi.block.TestBlockRetainedSizeBreakdown"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( BlockUtil . calculateNewArraySize (  2  0  0  )  ,     3  0  0  )  ;", "assertEquals ( BlockUtil . calculateNewArraySize ( Integer . MAX _ VALUE )  ,    BlockUtil . MAX _ ARRAY _ SIZE )  ;", "try    {", "BlockUtil . calculateNewArraySize ( BlockUtil . MAX _ ARRAY _ SIZE )  ;", "}    catch    ( IllegalArgumentException   e )     {", "assertEquals ( e . getMessage (  )  ,    String . format (  \" Can   not   grow   array   beyond    '  % s '  \"  ,    BlockUtil . MAX _ ARRAY _ SIZE )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testCalculateNewArraySize"], "fileName": "com.facebook.presto.spi.block.TestBlockUtil"}, {"methodBody": ["METHOD_START", "{", "ColumnarArray   columnarArray    =    ColumnarArray . toColumnarArray ( block )  ;", "assertEquals ( columnarArray . getPositionCount (  )  ,    expectedValues . length )  ;", "Block   elementsBlock    =    columnarArray . getElementsBlock (  )  ;", "int   elementsPosition    =     0  ;", "for    ( int   position    =     0  ;    position    <     ( expectedValues . length )  ;    position +  +  )     {", "T   expectedArray    =    expectedValues [ position ]  ;", "assertEquals ( columnarArray . isNull ( position )  ,     ( expectedArray    =  =    null )  )  ;", "assertEquals ( columnarArray . getLength ( position )  ,     ( expectedArray    =  =    null    ?     0     :    Array . getLength ( expectedArray )  )  )  ;", "for    ( int   i    =     0  ;    i    <     ( columnarArray . getLength ( position )  )  ;    i +  +  )     {", "Object   expectedElement    =    Array . get ( expectedArray ,    i )  ;", "ColumnarTestUtils . assertBlockPosition ( elementsBlock ,    elementsPosition ,    expectedElement )  ;", "elementsPosition +  +  ;", "}", "}", "}", "METHOD_END"], "methodName": ["assertColumnarArray"], "fileName": "com.facebook.presto.spi.block.TestColumnarArray"}, {"methodBody": ["METHOD_START", "{", "DictionaryBlock   dictionaryBlock    =    ColumnarTestUtils . createTestDictionaryBlock ( block )  ;", "T [  ]    expectedDictionaryValues    =    ColumnarTestUtils . createTestDictionaryExpectedValues ( expectedValues )  ;", "ColumnarTestUtils . assertBlock ( dictionaryBlock ,    expectedDictionaryValues )  ;", ". assertColumnarArray ( dictionaryBlock ,    expectedDictionaryValues )  ;", ". assertRunLengthEncodedBlock ( dictionaryBlock ,    expectedDictionaryValues )  ;", "}", "METHOD_END"], "methodName": ["assertDictionaryBlock"], "fileName": "com.facebook.presto.spi.block.TestColumnarArray"}, {"methodBody": ["METHOD_START", "{", "for    ( int   position    =     0  ;    position    <     ( block . getPositionCount (  )  )  ;    position +  +  )     {", "RunLengthEncodedBlock   runLengthEncodedBlock    =    ColumnarTestUtils . createTestRleBlock ( block ,    position )  ;", "T [  ]    expectedDictionaryValues    =    ColumnarTestUtils . createTestRleExpectedValues ( expectedValues ,    position )  ;", "ColumnarTestUtils . assertBlock ( runLengthEncodedBlock ,    expectedDictionaryValues )  ;", ". assertColumnarArray ( runLengthEncodedBlock ,    expectedDictionaryValues )  ;", "}", "}", "METHOD_END"], "methodName": ["assertRunLengthEncodedBlock"], "fileName": "com.facebook.presto.spi.block.TestColumnarArray"}, {"methodBody": ["METHOD_START", "{", "BlockBuilder   blockBuilder    =    new   ArrayBlockBuilder ( VarcharType . VARCHAR ,    null ,     1  0  0  ,     1  0  0  )  ;", "for    ( Slice [  ]    expectedValue    :    expectedValues )     {", "if    ( expectedValue    =  =    null )     {", "blockBuilder . appendNull (  )  ;", "} else    {", "BlockBuilder   elementBlockBuilder    =    VarcharType . VARCHAR . createBlockBuilder ( null ,    expectedValue . length )  ;", "for    ( Slice   v    :    expectedValue )     {", "if    ( v    =  =    null )     {", "elementBlockBuilder . appendNull (  )  ;", "} else    {", "VarcharType . VARCHAR . writeSlice ( elementBlockBuilder ,    v )  ;", "}", "}", "blockBuilder . appendStructure ( elementBlockBuilder . build (  )  )  ;", "}", "}", "return   blockBuilder ;", "}", "METHOD_END"], "methodName": ["createBlockBuilderWithValues"], "fileName": "com.facebook.presto.spi.block.TestColumnarArray"}, {"methodBody": ["METHOD_START", "{", "Slice [  ]  [  ]    expectedValues    =    new   Slice [ TestColumnarArray . ARRAY _ SIZES . length ]  [  ]  ;", "for    ( int   i    =     0  ;    i    <     ( TestColumnarArray . ARRAY _ SIZES . length )  ;    i +  +  )     {", "expectedValues [ i ]     =    new   Slice [ TestColumnarArray . ARRAY _ SIZES [ i ]  ]  ;", "for    ( int   j    =     0  ;    j    <     ( TestColumnarArray . ARRAY _ SIZES [ i ]  )  ;    j +  +  )     {", "if    (  ( j    %     3  )     !  =     1  )     {", "expectedValues [ i ]  [ j ]     =    Slices . utf 8 Slice ( String . format (  \"  % d .  % d \"  ,    i ,    j )  )  ;", "}", "}", "}", "BlockBuilder   blockBuilder    =    TestColumnarArray . createBlockBuilderWithValues ( expectedValues )  ;", "TestColumnarArray . verifyBlock ( blockBuilder ,    expectedValues )  ;", "TestColumnarArray . verifyBlock ( blockBuilder . build (  )  ,    expectedValues )  ;", "Slice [  ]  [  ]    expectedValuesWithNull    =    ColumnarTestUtils . alternatingNullValues ( expectedValues )  ;", "BlockBuilder   blockBuilderWithNull    =    TestColumnarArray . createBlockBuilderWithValues ( expectedValuesWithNull )  ;", "TestColumnarArray . verifyBlock ( blockBuilderWithNull ,    expectedValuesWithNull )  ;", "TestColumnarArray . verifyBlock ( blockBuilderWithNull . build (  )  ,    expectedValuesWithNull )  ;", "}", "METHOD_END"], "methodName": ["test"], "fileName": "com.facebook.presto.spi.block.TestColumnarArray"}, {"methodBody": ["METHOD_START", "{", "ColumnarTestUtils . assertBlock ( block ,    expectedValues )  ;", ". assertColumnarArray ( block ,    expectedValues )  ;", ". assertDictionaryBlock ( block ,    expectedValues )  ;", ". assertRunLengthEncodedBlock ( block ,    expectedValues )  ;", "}", "METHOD_END"], "methodName": ["verifyBlock"], "fileName": "com.facebook.presto.spi.block.TestColumnarArray"}, {"methodBody": ["METHOD_START", "{", "ColumnarMap   columnarMap    =    ColumnarMap . toColumnarMap ( block )  ;", "assertEquals ( columnarMap . getPositionCount (  )  ,    expectedValues . length )  ;", "Block   keysBlock    =    columnarMap . getKeysBlock (  )  ;", "Block   valuesBlock    =    columnarMap . getValuesBlock (  )  ;", "int   keysPosition    =     0  ;", "int   valuesPosition    =     0  ;", "for    ( int   position    =     0  ;    position    <     ( expectedValues . length )  ;    position +  +  )     {", "Slice [  ]  [  ]    expectedMap    =    expectedValues [ position ]  ;", "assertEquals ( columnarMap . isNull ( position )  ,     ( expectedMap    =  =    null )  )  ;", "if    ( expectedMap    =  =    null )     {", "assertEquals ( columnarMap . getEntryCount ( position )  ,     0  )  ;", "continue ;", "}", "assertEquals ( columnarMap . getEntryCount ( position )  ,    expectedMap . length )  ;", "for    ( int   i    =     0  ;    i    <     ( columnarMap . getEntryCount ( position )  )  ;    i +  +  )     {", "Slice [  ]    expectedEntry    =    expectedMap [ i ]  ;", "Slice   expectedKey    =    expectedEntry [  0  ]  ;", "ColumnarTestUtils . assertBlockPosition ( keysBlock ,    keysPosition ,    expectedKey )  ;", "keysPosition +  +  ;", "Slice   expectedValue    =    expectedEntry [  1  ]  ;", "ColumnarTestUtils . assertBlockPosition ( valuesBlock ,    valuesPosition ,    expectedValue )  ;", "valuesPosition +  +  ;", "}", "}", "}", "METHOD_END"], "methodName": ["assertColumnarMap"], "fileName": "com.facebook.presto.spi.block.TestColumnarMap"}, {"methodBody": ["METHOD_START", "{", "DictionaryBlock   dictionaryBlock    =    ColumnarTestUtils . createTestDictionaryBlock ( block )  ;", "Slice [  ]  [  ]  [  ]    expectedDictionaryValues    =    ColumnarTestUtils . createTestDictionaryExpectedValues ( expectedValues )  ;", "ColumnarTestUtils . assertBlock ( dictionaryBlock ,    expectedDictionaryValues )  ;", ". assertColumnarMap ( dictionaryBlock ,    expectedDictionaryValues )  ;", ". assertRunLengthEncodedBlock ( dictionaryBlock ,    expectedDictionaryValues )  ;", "}", "METHOD_END"], "methodName": ["assertDictionaryBlock"], "fileName": "com.facebook.presto.spi.block.TestColumnarMap"}, {"methodBody": ["METHOD_START", "{", "for    ( int   position    =     0  ;    position    <     ( block . getPositionCount (  )  )  ;    position +  +  )     {", "RunLengthEncodedBlock   runLengthEncodedBlock    =    ColumnarTestUtils . createTestRleBlock ( block ,    position )  ;", "Slice [  ]  [  ]  [  ]    expectedDictionaryValues    =    ColumnarTestUtils . createTestRleExpectedValues ( expectedValues ,    position )  ;", "ColumnarTestUtils . assertBlock ( runLengthEncodedBlock ,    expectedDictionaryValues )  ;", ". assertColumnarMap ( runLengthEncodedBlock ,    expectedDictionaryValues )  ;", "}", "}", "METHOD_END"], "methodName": ["assertRunLengthEncodedBlock"], "fileName": "com.facebook.presto.spi.block.TestColumnarMap"}, {"methodBody": ["METHOD_START", "{", "return   block . hash ( position ,     0  ,    block . getSliceLength ( position )  )  ;", "}", "METHOD_END"], "methodName": ["blockVarcharHashCode"], "fileName": "com.facebook.presto.spi.block.TestColumnarMap"}, {"methodBody": ["METHOD_START", "{", "BlockBuilder   blockBuilder    =    TestColumnarMap . createMapBuilder (  1  0  0  )  ;", "for    ( Slice [  ]  [  ]    expectedMap    :    expectedValues )     {", "if    ( expectedMap    =  =    null )     {", "blockBuilder . appendNull (  )  ;", "} else    {", "BlockBuilder   entryBuilder    =    blockBuilder . beginBlockEntry (  )  ;", "VarcharType . VARCHAR . createBlockBuilder ( null ,    expectedMap . length )  ;", "for    ( Slice [  ]    entry    :    expectedMap )     {", "Slice   key    =    entry [  0  ]  ;", "assertNotNull ( key )  ;", "VarcharType . VARCHAR . writeSlice ( entryBuilder ,    key )  ;", "Slice   value    =    entry [  1  ]  ;", "if    ( value    =  =    null )     {", "entryBuilder . appendNull (  )  ;", "} else    {", "VarcharType . VARCHAR . writeSlice ( entryBuilder ,    value )  ;", "}", "}", "blockBuilder . closeEntry (  )  ;", "}", "}", "return   blockBuilder ;", "}", "METHOD_END"], "methodName": ["createBlockBuilderWithValues"], "fileName": "com.facebook.presto.spi.block.TestColumnarMap"}, {"methodBody": ["METHOD_START", "{", "return   new   MapBlockBuilder ( VarcharType . VARCHAR ,    VarcharType . VARCHAR ,    MethodHandleUtil . methodHandle ( Slice . class ,     \" equals \"  ,    Object . class )  . asType ( MethodType . methodType ( boolean . class ,    Slice . class ,    Slice . class )  )  ,    MethodHandleUtil . methodHandle ( Slice . class ,     \" hashCode \"  )  . asType ( MethodType . methodType ( long . class ,    Slice . class )  )  ,    MethodHandleUtil . methodHandle ( TestColumnarMap . class ,     \" blockVarcharHashCode \"  ,    Block . class ,    int . class )  ,    null ,    expectedEntries )  ;", "}", "METHOD_END"], "methodName": ["createMapBuilder"], "fileName": "com.facebook.presto.spi.block.TestColumnarMap"}, {"methodBody": ["METHOD_START", "{", "Slice [  ]  [  ]  [  ]    expectedValues    =    new   Slice [ TestColumnarMap . MAP _ SIZES . length ]  [  ]  [  ]  ;", "for    ( int   mapIndex    =     0  ;    mapIndex    <     ( TestColumnarMap . MAP _ SIZES . length )  ;    mapIndex +  +  )     {", "expectedValues [ mapIndex ]     =    new   Slice [ TestColumnarMap . MAP _ SIZES [ mapIndex ]  ]  [  ]  ;", "for    ( int   entryIndex    =     0  ;    entryIndex    <     ( TestColumnarMap . MAP _ SIZES [ mapIndex ]  )  ;    entryIndex +  +  )     {", "Slice [  ]    entry    =    new   Slice [  2  ]  ;", "entry [  0  ]     =    Slices . utf 8 Slice ( String . format (  \" key .  % d .  % d \"  ,    mapIndex ,    entryIndex )  )  ;", "if    (  ( entryIndex    %     3  )     !  =     1  )     {", "entry [  1  ]     =    Slices . utf 8 Slice ( String . format (  \" value .  % d .  % d \"  ,    mapIndex ,    entryIndex )  )  ;", "}", "expectedValues [ mapIndex ]  [ entryIndex ]     =    entry ;", "}", "}", "BlockBuilder   blockBuilder    =    TestColumnarMap . createBlockBuilderWithValues ( expectedValues )  ;", "TestColumnarMap . verifyBlock ( blockBuilder ,    expectedValues )  ;", "TestColumnarMap . verifyBlock ( blockBuilder . build (  )  ,    expectedValues )  ;", "Slice [  ]  [  ]  [  ]    expectedValuesWithNull    =    ColumnarTestUtils . alternatingNullValues ( expectedValues )  ;", "BlockBuilder   blockBuilderWithNull    =    TestColumnarMap . createBlockBuilderWithValues ( expectedValuesWithNull )  ;", "TestColumnarMap . verifyBlock ( blockBuilderWithNull ,    expectedValuesWithNull )  ;", "TestColumnarMap . verifyBlock ( blockBuilderWithNull . build (  )  ,    expectedValuesWithNull )  ;", "}", "METHOD_END"], "methodName": ["test"], "fileName": "com.facebook.presto.spi.block.TestColumnarMap"}, {"methodBody": ["METHOD_START", "{", "ColumnarTestUtils . assertBlock ( block ,    expectedValues )  ;", ". assertColumnarMap ( block ,    expectedValues )  ;", ". assertDictionaryBlock ( block ,    expectedValues )  ;", ". assertRunLengthEncodedBlock ( block ,    expectedValues )  ;", "}", "METHOD_END"], "methodName": ["verifyBlock"], "fileName": "com.facebook.presto.spi.block.TestColumnarMap"}, {"methodBody": ["METHOD_START", "{", "ColumnarRow   columnarRow    =    ColumnarRow . toColumnarRow ( block )  ;", "assertEquals ( columnarRow . getPositionCount (  )  ,    expectedValues . length )  ;", "for    ( int   fieldId    =     0  ;    fieldId    <     (  . FIELD _ COUNT )  ;    fieldId +  +  )     {", "Block   fieldBlock    =    columnarRow . getField ( fieldId )  ;", "int   elementsPosition    =     0  ;", "for    ( int   position    =     0  ;    position    <     ( expectedValues . length )  ;    position +  +  )     {", "T   expectedRow    =    expectedValues [ position ]  ;", "assertEquals ( columnarRow . isNull ( position )  ,     ( expectedRow    =  =    null )  )  ;", "if    ( expectedRow    =  =    null )     {", "continue ;", "}", "Object   expectedElement    =    Array . get ( expectedRow ,    fieldId )  ;", "ColumnarTestUtils . assertBlockPosition ( fieldBlock ,    elementsPosition ,    expectedElement )  ;", "elementsPosition +  +  ;", "}", "}", "}", "METHOD_END"], "methodName": ["assertColumnarRow"], "fileName": "com.facebook.presto.spi.block.TestColumnarRow"}, {"methodBody": ["METHOD_START", "{", "DictionaryBlock   dictionaryBlock    =    ColumnarTestUtils . createTestDictionaryBlock ( block )  ;", "T [  ]    expectedDictionaryValues    =    ColumnarTestUtils . createTestDictionaryExpectedValues ( expectedValues )  ;", "ColumnarTestUtils . assertBlock ( dictionaryBlock ,    expectedDictionaryValues )  ;", ". assertColumnarRow ( dictionaryBlock ,    expectedDictionaryValues )  ;", ". assertRunLengthEncodedBlock ( dictionaryBlock ,    expectedDictionaryValues )  ;", "}", "METHOD_END"], "methodName": ["assertDictionaryBlock"], "fileName": "com.facebook.presto.spi.block.TestColumnarRow"}, {"methodBody": ["METHOD_START", "{", "for    ( int   position    =     0  ;    position    <     ( block . getPositionCount (  )  )  ;    position +  +  )     {", "RunLengthEncodedBlock   runLengthEncodedBlock    =    ColumnarTestUtils . createTestRleBlock ( block ,    position )  ;", "T [  ]    expectedDictionaryValues    =    ColumnarTestUtils . createTestRleExpectedValues ( expectedValues ,    position )  ;", "ColumnarTestUtils . assertBlock ( runLengthEncodedBlock ,    expectedDictionaryValues )  ;", ". assertColumnarRow ( runLengthEncodedBlock ,    expectedDictionaryValues )  ;", "}", "}", "METHOD_END"], "methodName": ["assertRunLengthEncodedBlock"], "fileName": "com.facebook.presto.spi.block.TestColumnarRow"}, {"methodBody": ["METHOD_START", "{", "return   new   RowBlockBuilder ( Collections . nCopies ( TestColumnarRow . FIELD _ COUNT ,    VarcharType . VARCHAR )  ,    blockBuilderStatus ,    expectedEntries )  ;", "}", "METHOD_END"], "methodName": ["createBlockBuilder"], "fileName": "com.facebook.presto.spi.block.TestColumnarRow"}, {"methodBody": ["METHOD_START", "{", "BlockBuilder   blockBuilder    =    TestColumnarRow . createBlockBuilder ( null ,     1  0  0  ,     1  0  0  )  ;", "for    ( Slice [  ]    expectedValue    :    expectedValues )     {", "if    ( expectedValue    =  =    null )     {", "blockBuilder . appendNull (  )  ;", "} else    {", "BlockBuilder   entryBuilder    =    blockBuilder . beginBlockEntry (  )  ;", "for    ( Slice   v    :    expectedValue )     {", "if    ( v    =  =    null )     {", "entryBuilder . appendNull (  )  ;", "} else    {", "VarcharType . VARCHAR . writeSlice ( entryBuilder ,    v )  ;", "}", "}", "blockBuilder . closeEntry (  )  ;", "}", "}", "return   blockBuilder ;", "}", "METHOD_END"], "methodName": ["createBlockBuilderWithValues"], "fileName": "com.facebook.presto.spi.block.TestColumnarRow"}, {"methodBody": ["METHOD_START", "{", "Slice [  ]  [  ]    expectedValues    =    new   Slice [ TestColumnarRow . POSITION _ COUNT ]  [  ]  ;", "for    ( int   i    =     0  ;    i    <     ( TestColumnarRow . POSITION _ COUNT )  ;    i +  +  )     {", "expectedValues [ i ]     =    new   Slice [ TestColumnarRow . FIELD _ COUNT ]  ;", "for    ( int   j    =     0  ;    j    <     ( TestColumnarRow . FIELD _ COUNT )  ;    j +  +  )     {", "if    (  ( j    %     3  )     !  =     1  )     {", "expectedValues [ i ]  [ j ]     =    Slices . utf 8 Slice ( String . format (  \"  % d .  % d \"  ,    i ,    j )  )  ;", "}", "}", "}", "BlockBuilder   blockBuilder    =    TestColumnarRow . createBlockBuilderWithValues ( expectedValues )  ;", "TestColumnarRow . verifyBlock ( blockBuilder ,    expectedValues )  ;", "TestColumnarRow . verifyBlock ( blockBuilder . build (  )  ,    expectedValues )  ;", "Slice [  ]  [  ]    expectedValuesWithNull    =    ColumnarTestUtils . alternatingNullValues ( expectedValues )  ;", "BlockBuilder   blockBuilderWithNull    =    TestColumnarRow . createBlockBuilderWithValues ( expectedValuesWithNull )  ;", "TestColumnarRow . verifyBlock ( blockBuilderWithNull ,    expectedValuesWithNull )  ;", "TestColumnarRow . verifyBlock ( blockBuilderWithNull . build (  )  ,    expectedValuesWithNull )  ;", "}", "METHOD_END"], "methodName": ["test"], "fileName": "com.facebook.presto.spi.block.TestColumnarRow"}, {"methodBody": ["METHOD_START", "{", "ColumnarTestUtils . assertBlock ( block ,    expectedValues )  ;", ". assertColumnarRow ( block ,    expectedValues )  ;", ". assertDictionaryBlock ( block ,    expectedValues )  ;", ". assertRunLengthEncodedBlock ( block ,    expectedValues )  ;", "}", "METHOD_END"], "methodName": ["verifyBlock"], "fileName": "com.facebook.presto.spi.block.TestColumnarRow"}, {"methodBody": ["METHOD_START", "{", "for    ( int   position    =     0  ;    position    <     ( actual . getPositionCount (  )  )  ;    position +  +  )     {", "assertEquals ( type . getObjectValue ( TestingSession . SESSION ,    actual ,    position )  ,    type . getObjectValue ( TestingSession . SESSION ,    expected ,    position )  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertBlockEquals"], "fileName": "com.facebook.presto.spi.block.TestDictionaryBlockEncoding"}, {"methodBody": ["METHOD_START", "{", "int   positionCount    =     4  0  ;", "BlockBuilder   dictionaryBuilder    =    VarcharType . VARCHAR . createBlockBuilder ( null ,     4  )  ;", "VarcharType . VARCHAR . writeString ( dictionaryBuilder ,     \" alice \"  )  ;", "VarcharType . VARCHAR . writeString ( dictionaryBuilder ,     \" bob \"  )  ;", "VarcharType . VARCHAR . writeString ( dictionaryBuilder ,     \" charlie \"  )  ;", "VarcharType . VARCHAR . writeString ( dictionaryBuilder ,     \" dave \"  )  ;", "Block   dictionary    =    dictionaryBuilder . build (  )  ;", "int [  ]    ids    =    new   int [ positionCount ]  ;", "for    ( int   i    =     0  ;    i    <     4  0  ;    i +  +  )     {", "ids [ i ]     =    i    %     4  ;", "}", "BlockEncoding   blockEncoding    =    new   DictionaryBlockEncoding ( new   VariableWidthBlockEncoding (  )  )  ;", "DictionaryBlock   dictionaryBlock    =    new   DictionaryBlock ( dictionary ,    ids )  ;", "DynamicSliceOutput   sliceOutput    =    new   DynamicSliceOutput (  1  0  2  4  )  ;", "blockEncoding . writeBlock ( sliceOutput ,    dictionaryBlock )  ;", "Block   actualBlock    =    blockEncoding . readBlock ( sliceOutput . slice (  )  . getInput (  )  )  ;", "assertTrue (  ( actualBlock   instanceof   DictionaryBlock )  )  ;", "DictionaryBlock   actualDictionaryBlock    =     (  ( DictionaryBlock )     ( actualBlock )  )  ;", ". assertBlockEquals ( VarcharType . VARCHAR ,    actualDictionaryBlock . getDictionary (  )  ,    dictionary )  ;", "for    ( int   position    =     0  ;    position    <     ( actualDictionaryBlock . getPositionCount (  )  )  ;    position +  +  )     {", "assertEquals ( actualDictionaryBlock . getId ( position )  ,    ids [ position ]  )  ;", "}", "assertEquals ( actualDictionaryBlock . getDictionarySourceId (  )  ,    dictionaryBlock . getDictionarySourceId (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRoundTrip"], "fileName": "com.facebook.presto.spi.block.TestDictionaryBlockEncoding"}, {"methodBody": ["METHOD_START", "{", "TestFixedWidthBlockBuilder . testIsFull ( new   PageBuilderStatus (  (  ( TestFixedWidthBlockBuilder . BOOLEAN _ ENTRY _ SIZE )     *     ( TestFixedWidthBlockBuilder . EXPECTED _ ENTRY _ COUNT )  )  ,     1  0  2  4  )  )  ;", "TestFixedWidthBlockBuilder . testIsFull ( new   PageBuilderStatus (  1  0  2  4  ,     (  ( TestFixedWidthBlockBuilder . BOOLEAN _ ENTRY _ SIZE )     *     ( TestFixedWidthBlockBuilder . EXPECTED _ ENTRY _ COUNT )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testFixedBlockIsFull"], "fileName": "com.facebook.presto.spi.block.TestFixedWidthBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "FixedWidthBlockBuilder   blockBuilder    =    new   FixedWidthBlockBuilder ( BooleanType . BOOLEAN . getFixedSize (  )  ,    pageBuilderStatus . createBlockBuilderStatus (  )  ,     1  0  2  4  )  ;", "assertTrue ( pageBuilderStatus . isEmpty (  )  )  ;", "while    (  !  ( pageBuilderStatus . isFull (  )  )  )     {", "BooleanType . BOOLEAN . writeBoolean ( blockBuilder ,    true )  ;", "}", "assertEquals ( blockBuilder . getPositionCount (  )  ,     . EXPECTED _ ENTRY _ COUNT )  ;", "assertEquals ( pageBuilderStatus . isFull (  )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["testIsFull"], "fileName": "com.facebook.presto.spi.block.TestFixedWidthBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "IntArrayList   list    =    new   IntArrayList (  0  )  ;", "for    ( int   i    =     0  ;    i    <     (  . N _ ELEMENTS )  ;     +  + i )     {", "list . add ( i )  ;", "}", "assertEquals ( list . size (  )  ,     . N _ ELEMENTS )  ;", "int [  ]    elements    =    list . elements (  )  ;", "for    ( int   i    =     0  ;    i    <     (  . N _ ELEMENTS )  ;     +  + i )     {", "assertEquals ( elements [ i ]  ,    i )  ;", "}", "}", "METHOD_END"], "methodName": ["testAddsElements"], "fileName": "com.facebook.presto.spi.block.TestIntArrayList"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \"  {  \"     +    s )     +     \"  =  \"  )     +    c )     +     \"  }  \"  ;", "}", "METHOD_END"], "methodName": ["curlyBracket"], "fileName": "com.facebook.presto.spi.block.TestMethodHandleUtil"}, {"methodBody": ["METHOD_START", "{", "return   new   TestMethodHandleUtil . U (  (  ( s 1  . getValue (  )  )     *     ( s 2  . getValue (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["fS2U"], "fileName": "com.facebook.presto.spi.block.TestMethodHandleUtil"}, {"methodBody": ["METHOD_START", "{", "return   new   TestMethodHandleUtil . U (  (  ( t 1  . getValue (  )  )     *     ( t 2  . getValue (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["fT2U"], "fileName": "com.facebook.presto.spi.block.TestMethodHandleUtil"}, {"methodBody": ["METHOD_START", "{", "return   new   TestMethodHandleUtil . V (  (  ( t 1  . getValue (  )  )     *     ( t 2  . getValue (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["fT2V"], "fileName": "com.facebook.presto.spi.block.TestMethodHandleUtil"}, {"methodBody": ["METHOD_START", "{", "return   new   TestMethodHandleUtil . R ( u . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["fU2R"], "fileName": "com.facebook.presto.spi.block.TestMethodHandleUtil"}, {"methodBody": ["METHOD_START", "{", "return   new   TestMethodHandleUtil . R (  (  (  ( u . getValue (  )  )     *     ( s 1  . getValue (  )  )  )     *     ( s 2  . getValue (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["fUS2R"], "fileName": "com.facebook.presto.spi.block.TestMethodHandleUtil"}, {"methodBody": ["METHOD_START", "{", "return   new   TestMethodHandleUtil . R (  (  ( u . getValue (  )  )     *     ( v . getValue (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["fUV2R"], "fileName": "com.facebook.presto.spi.block.TestMethodHandleUtil"}, {"methodBody": ["METHOD_START", "{", "return    (  \"  [  \"     +    s )     +     \"  ]  \"  ;", "}", "METHOD_END"], "methodName": ["squareBracket"], "fileName": "com.facebook.presto.spi.block.TestMethodHandleUtil"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \"  [  \"     +    s )     +     \"  ,  \"  )     +     (  ( long )     ( d )  )  )     +     \"  ]  \"  ;", "}", "METHOD_END"], "methodName": ["squareBracket"], "fileName": "com.facebook.presto.spi.block.TestMethodHandleUtil"}, {"methodBody": ["METHOD_START", "{", "return    (  ( double )     ( x )  )     +    c ;", "}", "METHOD_END"], "methodName": ["sum"], "fileName": "com.facebook.presto.spi.block.TestMethodHandleUtil"}, {"methodBody": ["METHOD_START", "{", "MethodHandle   fUS 2 R    =    MethodHandleUtil . methodHandle ( TestMethodHandleUtil . class ,     \" fUS 2 R \"  ,    TestMethodHandleUtil . U . class ,    TestMethodHandleUtil . S 1  . class ,    TestMethodHandleUtil . S 2  . class )  ;", "MethodHandle   fT 2 U    =    MethodHandleUtil . methodHandle ( TestMethodHandleUtil . class ,     \" fT 2 U \"  ,    TestMethodHandleUtil . T 1  . class ,    TestMethodHandleUtil . T 2  . class )  ;", "MethodHandle   composed    =    MethodHandleUtil . compose ( fUS 2 R ,    fT 2 U )  ;", "assertEquals (  (  ( TestMethodHandleUtil . R )     ( composed . invokeExact ( new   TestMethodHandleUtil . T 1  (  2  )  ,    new   TestMethodHandleUtil . T 2  (  3  )  ,    new   TestMethodHandleUtil . S 1  (  5  )  ,    new   TestMethodHandleUtil . S 2  (  7  )  )  )  )  ,    new   TestMethodHandleUtil . R (  2  1  0  )  )  ;", "}", "METHOD_END"], "methodName": ["testCompose2"], "fileName": "com.facebook.presto.spi.block.TestMethodHandleUtil"}, {"methodBody": ["METHOD_START", "{", "MethodHandle   fU 2 R    =    MethodHandleUtil . methodHandle ( TestMethodHandleUtil . class ,     \" fU 2 R \"  ,    TestMethodHandleUtil . U . class )  ;", "MethodHandle   fT 2 U    =    MethodHandleUtil . methodHandle ( TestMethodHandleUtil . class ,     \" fT 2 U \"  ,    TestMethodHandleUtil . T 1  . class ,    TestMethodHandleUtil . T 2  . class )  ;", "MethodHandle   composed    =    MethodHandleUtil . compose ( fU 2 R ,    fT 2 U )  ;", "assertEquals (  (  ( TestMethodHandleUtil . R )     ( composed . invokeExact ( new   TestMethodHandleUtil . T 1  (  2  )  ,    new   TestMethodHandleUtil . T 2  (  3  )  )  )  )  ,    new   TestMethodHandleUtil . R (  6  )  )  ;", "}", "METHOD_END"], "methodName": ["testCompose2withoutS"], "fileName": "com.facebook.presto.spi.block.TestMethodHandleUtil"}, {"methodBody": ["METHOD_START", "{", "MethodHandle   fUV 2 R    =    MethodHandleUtil . methodHandle ( TestMethodHandleUtil . class ,     \" fUV 2 R \"  ,    TestMethodHandleUtil . U . class ,    TestMethodHandleUtil . V . class )  ;", "MethodHandle   fS 2 U    =    MethodHandleUtil . methodHandle ( TestMethodHandleUtil . class ,     \" fS 2 U \"  ,    TestMethodHandleUtil . S 1  . class ,    TestMethodHandleUtil . S 2  . class )  ;", "MethodHandle   fT 2 V    =    MethodHandleUtil . methodHandle ( TestMethodHandleUtil . class ,     \" fT 2 V \"  ,    TestMethodHandleUtil . T 1  . class ,    TestMethodHandleUtil . T 2  . class )  ;", "MethodHandle   composed    =    MethodHandleUtil . compose ( fUV 2 R ,    fS 2 U ,    fT 2 V )  ;", "assertEquals (  (  ( TestMethodHandleUtil . R )     ( composed . invokeExact ( new   TestMethodHandleUtil . S 1  (  2  )  ,    new   TestMethodHandleUtil . S 2  (  3  )  ,    new   TestMethodHandleUtil . T 1  (  5  )  ,    new   TestMethodHandleUtil . T 2  (  7  )  )  )  )  ,    new   TestMethodHandleUtil . R (  2  1  0  )  )  ;", "}", "METHOD_END"], "methodName": ["testCompose3"], "fileName": "com.facebook.presto.spi.block.TestMethodHandleUtil"}, {"methodBody": ["METHOD_START", "{", "testIsFull ( new   PageBuilderStatus (  (  ( TestVariableWidthBlockBuilder . VARCHAR _ ENTRY _ SIZE )     *     ( TestVariableWidthBlockBuilder . EXPECTED _ ENTRY _ COUNT )  )  ,     1  0  2  4  )  )  ;", "testIsFull ( new   PageBuilderStatus (  1  0  2  4  ,     (  ( TestVariableWidthBlockBuilder . VARCHAR _ ENTRY _ SIZE )     *     ( TestVariableWidthBlockBuilder . EXPECTED _ ENTRY _ COUNT )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testFixedBlockIsFull"], "fileName": "com.facebook.presto.spi.block.TestVariableWidthBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "BlockBuilder   blockBuilder    =    new   VariableWidthBlockBuilder ( pageBuilderStatus . createBlockBuilderStatus (  )  ,     3  2  ,     1  0  2  4  )  ;", "assertTrue ( pageBuilderStatus . isEmpty (  )  )  ;", "while    (  !  ( pageBuilderStatus . isFull (  )  )  )     {", "VarcharType . VARCHAR . writeSlice ( blockBuilder ,    Slices . allocate (  . VARCHAR _ VALUE _ SIZE )  )  ;", "}", "assertEquals ( blockBuilder . getPositionCount (  )  ,     . EXPECTED _ ENTRY _ COUNT )  ;", "assertEquals ( pageBuilderStatus . isFull (  )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["testIsFull"], "fileName": "com.facebook.presto.spi.block.TestVariableWidthBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "int   entries    =     1  2  3  4  5  ;", "double   resetSkew    =     1  .  2  5  ;", "BlockBuilder   blockBuilder    =    new   VariableWidthBlockBuilder ( null ,    entries ,    entries )  ;", "for    ( int   i    =     0  ;    i    <    entries ;    i +  +  )     {", "blockBuilder . writeByte ( i )  ;", "blockBuilder . closeEntry (  )  ;", "}", "blockBuilder    =    blockBuilder . newBlockBuilderLike ( null )  ;", "blockBuilder . writeByte (  1  )  ;", "long   actualArrayBytes    =     ( SizeOf . sizeOf ( new   int [  (  ( int )     ( Math . ceil (  ( resetSkew    *     ( entries    +     1  )  )  )  )  )  ]  )  )     +     ( SizeOf . sizeOf ( new   boolean [  (  ( int )     ( Math . ceil (  ( resetSkew    *    entries )  )  )  )  ]  )  )  ;", "long   actualSliceBytes    =     (  . SLICE _ INSTANCE _ SIZE )     +     ( SizeOf . sizeOf ( new   byte [  (  ( int )     ( Math . ceil (  ( resetSkew    *    entries )  )  )  )  ]  )  )  ;", "assertEquals ( blockBuilder . getRetainedSizeInBytes (  )  ,     (  (  (  . BLOCK _ BUILDER _ INSTANCE _ SIZE )     +    actualSliceBytes )     +    actualArrayBytes )  )  ;", "}", "METHOD_END"], "methodName": ["testNewBlockBuilderLike"], "fileName": "com.facebook.presto.spi.block.TestVariableWidthBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "for    ( int   position    =     0  ;    position    <     ( actual . getPositionCount (  )  )  ;    position +  +  )     {", "assertEquals ( type . getObjectValue ( ingSession . SESSION ,    actual ,    position )  ,    type . getObjectValue ( ingSession . SESSION ,    expected ,    position )  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertBlockEquals"], "fileName": "com.facebook.presto.spi.block.TestVariableWidthBlockEncoding"}, {"methodBody": ["METHOD_START", "{", "BlockBuilder   expectedBlockBuilder    =    VarcharType . VARCHAR . createBlockBuilder ( null ,     4  )  ;", "VarcharType . VARCHAR . writeString ( expectedBlockBuilder ,     \" alice \"  )  ;", "VarcharType . VARCHAR . writeString ( expectedBlockBuilder ,     \" bob \"  )  ;", "VarcharType . VARCHAR . writeString ( expectedBlockBuilder ,     \" charlie \"  )  ;", "VarcharType . VARCHAR . writeString ( expectedBlockBuilder ,     \" dave \"  )  ;", "Block   expectedBlock    =    expectedBlockBuilder . build (  )  ;", "DynamicSliceOutput   sliceOutput    =    new   DynamicSliceOutput (  1  0  2  4  )  ;", "BlockEncoding   blockEncoding    =    new   VariableWidthBlockEncoding (  )  ;", "blockEncoding . writeBlock ( sliceOutput ,    expectedBlock )  ;", "Block   actualBlock    =    blockEncoding . readBlock ( sliceOutput . slice (  )  . getInput (  )  )  ;", ". assertBlockEquals ( VarcharType . VARCHAR ,    actualBlock ,    expectedBlock )  ;", "}", "METHOD_END"], "methodName": ["testRoundTrip"], "fileName": "com.facebook.presto.spi.block.TestVariableWidthBlockEncoding"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( blockEncoding ,     \" blockEncoding   is   null \"  )  ;", "Factory <  ?  >    existingEntry    =    blockEncodings . putIfAbsent ( blockEncoding . getName (  )  ,    blockEncoding )  ;", "Preconditions . checkArgument (  ( existingEntry    =  =    null )  ,     \" Encoding    % s   is   already   registered \"  ,    blockEncoding . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["addBlockEncodingFactory"], "fileName": "com.facebook.presto.spi.block.TestingBlockEncodingSerde"}, {"methodBody": ["METHOD_START", "{", "int   length    =    input . readInt (  )  ;", "byte [  ]    bytes    =    new   byte [ length ]  ;", "input . readBytes ( bytes )  ;", "return   new   Str ( bytes ,    StandardCharsets . UTF _  8  )  ;", "}", "METHOD_END"], "methodName": ["readLengthPrefixedString"], "fileName": "com.facebook.presto.spi.block.TestingBlockEncodingSerde"}, {"methodBody": ["METHOD_START", "{", "byte [  ]    bytes    =    value . getBytes ( StandardCharsets . UTF _  8  )  ;", "output . writeInt ( bytes . length )  ;", "output . writeBytes ( bytes )  ;", "}", "METHOD_END"], "methodName": ["writeLengthPrefixedString"], "fileName": "com.facebook.presto.spi.block.TestingBlockEncodingSerde"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( initialized )  )     {", "initializeCapacity (  )  ;", "}", "if    (  ( valueIsNull . length )     <  =     ( positions )  )     {", "growCapacity (  )  ;", "}", "valueIsNull [ positions ]     =    isNull ;", "offsets [  (  ( positions )     +     1  )  ]     =    sliceOutput . size (  )  ;", "( positions )  +  +  ;", "if    (  ( bStatus )     !  =    null )     {", "bStatus . addBytes (  (  (  ( SizeOf . SIZE _ OF _ BYTE )     +     ( SizeOf . SIZE _ OF _ INT )  )     +    bytesWritten )  )  ;", "}", "}", "METHOD_END"], "methodName": ["entryAdded"], "fileName": "com.facebook.presto.spi.block.VariableWidthBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "return   offsets [ position ]  ;", "}", "METHOD_END"], "methodName": ["getOffset"], "fileName": "com.facebook.presto.spi.block.VariableWidthBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "int   newSize    =    BlockUtil . calculateNewArraySize ( valueIsNull . length )  ;", "valueIsNull    =    Arrays . copyOf ( valueIsNull ,    newSize )  ;", "offsets    =    Arrays . copyOf ( offsets ,     ( newSize    +     1  )  )  ;", "updateArraysDataSize (  )  ;", "}", "METHOD_END"], "methodName": ["growCapacity"], "fileName": "com.facebook.presto.spi.block.VariableWidthBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( positions )     !  =     0  )     |  |     (  ( currentEntrySize )     !  =     0  )  )     {", "throw   new   IllegalStateException (  (  ( getClass (  )  . getSimpleName (  )  )     +     \"    was   used   before   initialization \"  )  )  ;", "}", "initialized    =    true ;", "valueIsNull    =    new   lean [ initialEntryCount ]  ;", "offsets    =    new   int [  ( initialEntryCount )     +     1  ]  ;", "sliceOutput    =    new   DynamicSliceOutput ( initialSliceOutputSize )  ;", "updateArraysDataSize (  )  ;", "}", "METHOD_END"], "methodName": ["initializeCapacity"], "fileName": "com.facebook.presto.spi.block.VariableWidthBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "arraysRetainedSizeInBytes    =     ( SizeOf . sizeOf ( valueIsNull )  )     +     ( SizeOf . sizeOf ( offsets )  )  ;", "}", "METHOD_END"], "methodName": ["updateArraysDataSize"], "fileName": "com.facebook.presto.spi.block.VariableWidthBlockBuilder"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getAccessControl"], "fileName": "com.facebook.presto.spi.connector.Connector"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getIndexProvider"], "fileName": "com.facebook.presto.spi.connector.Connector"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getNodePartitioningProvider"], "fileName": "com.facebook.presto.spi.connector.Connector"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getPageSinkProvider"], "fileName": "com.facebook.presto.spi.connector.Connector"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getPageSourceProvider"], "fileName": "com.facebook.presto.spi.connector.Connector"}, {"methodBody": ["METHOD_START", "{", "return   Collections . emptySet (  )  ;", "}", "METHOD_END"], "methodName": ["getProcedures"], "fileName": "com.facebook.presto.spi.connector.Connector"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getRecordSetProvider"], "fileName": "com.facebook.presto.spi.connector.Connector"}, {"methodBody": ["METHOD_START", "{", "return   Collections . emptyList (  )  ;", "}", "METHOD_END"], "methodName": ["getSchemaProperties"], "fileName": "com.facebook.presto.spi.connector.Connector"}, {"methodBody": ["METHOD_START", "{", "return   Collections . emptyList (  )  ;", "}", "METHOD_END"], "methodName": ["getSessionProperties"], "fileName": "com.facebook.presto.spi.connector.Connector"}, {"methodBody": ["METHOD_START", "{", "return   Collections . emptySet (  )  ;", "}", "METHOD_END"], "methodName": ["getSystemTables"], "fileName": "com.facebook.presto.spi.connector.Connector"}, {"methodBody": ["METHOD_START", "{", "return   Collections . emptyList (  )  ;", "}", "METHOD_END"], "methodName": ["getTableProperties"], "fileName": "com.facebook.presto.spi.connector.Connector"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isSingleStatementWritesOnly"], "fileName": "com.facebook.presto.spi.connector.Connector"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyAddColumn ( tableName . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanAddColumn"], "fileName": "com.facebook.presto.spi.connector.ConnectorAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyCreateSchema ( schemaName )  ;", "}", "METHOD_END"], "methodName": ["checkCanCreateSchema"], "fileName": "com.facebook.presto.spi.connector.ConnectorAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyCreateTable ( tableName . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanCreateTable"], "fileName": "com.facebook.presto.spi.connector.ConnectorAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyCreateView ( viewName . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanCreateView"], "fileName": "com.facebook.presto.spi.connector.ConnectorAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyCreateViewWithSelect ( tableName . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanCreateViewWithSelectFromTable"], "fileName": "com.facebook.presto.spi.connector.ConnectorAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyCreateViewWithSelect ( viewName . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanCreateViewWithSelectFromView"], "fileName": "com.facebook.presto.spi.connector.ConnectorAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyDeleteTable ( tableName . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanDeleteFromTable"], "fileName": "com.facebook.presto.spi.connector.ConnectorAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyDropColumn ( tableName . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanDropColumn"], "fileName": "com.facebook.presto.spi.connector.ConnectorAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyDropSchema ( schemaName )  ;", "}", "METHOD_END"], "methodName": ["checkCanDropSchema"], "fileName": "com.facebook.presto.spi.connector.ConnectorAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyDropTable ( tableName . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanDropTable"], "fileName": "com.facebook.presto.spi.connector.ConnectorAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyDropView ( viewName . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanDropView"], "fileName": "com.facebook.presto.spi.connector.ConnectorAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyGrantTablePrivilege ( privilege . toString (  )  ,    tableName . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanGrantTablePrivilege"], "fileName": "com.facebook.presto.spi.connector.ConnectorAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyInsertTable ( tableName . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanInsertIntoTable"], "fileName": "com.facebook.presto.spi.connector.ConnectorAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyRenameColumn ( tableName . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanRenameColumn"], "fileName": "com.facebook.presto.spi.connector.ConnectorAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyRenameSchema ( schemaName ,    newSchemaName )  ;", "}", "METHOD_END"], "methodName": ["checkCanRenameSchema"], "fileName": "com.facebook.presto.spi.connector.ConnectorAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyRenameTable ( tableName . toString (  )  ,    newTableName . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanRenameTable"], "fileName": "com.facebook.presto.spi.connector.ConnectorAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyRevokeTablePrivilege ( privilege . toString (  )  ,    tableName . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanRevokeTablePrivilege"], "fileName": "com.facebook.presto.spi.connector.ConnectorAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denySelectTable ( tableName . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanSelectFromTable"], "fileName": "com.facebook.presto.spi.connector.ConnectorAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denySelectView ( viewName . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanSelectFromView"], "fileName": "com.facebook.presto.spi.connector.ConnectorAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denySetCatalogSessionProperty ( propertyName )  ;", "}", "METHOD_END"], "methodName": ["checkCanSetCatalogSessionProperty"], "fileName": "com.facebook.presto.spi.connector.ConnectorAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyShowSchemas (  )  ;", "}", "METHOD_END"], "methodName": ["checkCanShowSchemas"], "fileName": "com.facebook.presto.spi.connector.ConnectorAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyShowTablesMetadata ( schemaName )  ;", "}", "METHOD_END"], "methodName": ["checkCanShowTablesMetadata"], "fileName": "com.facebook.presto.spi.connector.ConnectorAccessControl"}, {"methodBody": ["METHOD_START", "{", "return   Collections . emptySet (  )  ;", "}", "METHOD_END"], "methodName": ["filterSchemas"], "fileName": "com.facebook.presto.spi.connector.ConnectorAccessControl"}, {"methodBody": ["METHOD_START", "{", "return   Collections . emptySet (  )  ;", "}", "METHOD_END"], "methodName": ["filterTables"], "fileName": "com.facebook.presto.spi.connector.ConnectorAccessControl"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getNodeManager"], "fileName": "com.facebook.presto.spi.connector.ConnectorContext"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getPageIndexerFactory"], "fileName": "com.facebook.presto.spi.connector.ConnectorContext"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getPageSorter"], "fileName": "com.facebook.presto.spi.connector.ConnectorContext"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getTypeManager"], "fileName": "com.facebook.presto.spi.connector.ConnectorContext"}, {"methodBody": ["METHOD_START", "{", "throw   new   PrestoException ( StandardErrorCode . NOT _ SUPPORTED ,     \" This   connector   does   not   support   adding   columns \"  )  ;", "}", "METHOD_END"], "methodName": ["addColumn"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "throw   new   PrestoException ( StandardErrorCode . NOT _ SUPPORTED ,     \" This   connector   does   not   support   creating   tables   with   data \"  )  ;", "}", "METHOD_END"], "methodName": ["beginCreateTable"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "throw   new   PrestoException ( StandardErrorCode . NOT _ SUPPORTED ,     \" This   connector   does   not   support   deletes \"  )  ;", "}", "METHOD_END"], "methodName": ["beginDelete"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "throw   new   PrestoException ( StandardErrorCode . NOT _ SUPPORTED ,     \" This   connector   does   not   support   inserts \"  )  ;", "}", "METHOD_END"], "methodName": ["beginInsert"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "throw   new   PrestoException ( StandardErrorCode . NOT _ SUPPORTED ,     \" This   connector   does   not   support   creating   schemas \"  )  ;", "}", "METHOD_END"], "methodName": ["createSchema"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "throw   new   PrestoException ( StandardErrorCode . NOT _ SUPPORTED ,     \" This   connector   does   not   support   creating   tables \"  )  ;", "}", "METHOD_END"], "methodName": ["createTable"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "throw   new   PrestoException ( StandardErrorCode . NOT _ SUPPORTED ,     \" This   connector   does   not   support   creating   views \"  )  ;", "}", "METHOD_END"], "methodName": ["createView"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "throw   new   PrestoException ( StandardErrorCode . NOT _ SUPPORTED ,     \" This   connector   does   not   support   column   identity \"  )  ;", "}", "METHOD_END"], "methodName": ["deserializeColumnIdentity"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "throw   new   PrestoException ( StandardErrorCode . NOT _ SUPPORTED ,     \" This   connector   does   not   support   table   identity \"  )  ;", "}", "METHOD_END"], "methodName": ["deserializeTableIdentity"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "throw   new   PrestoException ( StandardErrorCode . NOT _ SUPPORTED ,     \" This   connector   does   not   support   dropping   columns \"  )  ;", "}", "METHOD_END"], "methodName": ["dropColumn"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "throw   new   PrestoException ( StandardErrorCode . NOT _ SUPPORTED ,     \" This   connector   does   not   support   dropping   schemas \"  )  ;", "}", "METHOD_END"], "methodName": ["dropSchema"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "throw   new   PrestoException ( StandardErrorCode . NOT _ SUPPORTED ,     \" This   connector   does   not   support   dropping   tables \"  )  ;", "}", "METHOD_END"], "methodName": ["dropTable"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "throw   new   PrestoException ( StandardErrorCode . NOT _ SUPPORTED ,     \" This   connector   does   not   support   dropping   views \"  )  ;", "}", "METHOD_END"], "methodName": ["dropView"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "throw   new   PrestoException ( StandardErrorCode . GENERIC _ INTERNAL _ ERROR ,     \" ConnectorMetadata   beginCreateTable (  )    is   implemented   without   finishCreateTable (  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["finishCreateTable"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "throw   new   PrestoException ( StandardErrorCode . NOT _ SUPPORTED ,     \" This   connector   does   not   support   deletes \"  )  ;", "}", "METHOD_END"], "methodName": ["finishDelete"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "throw   new   PrestoException ( StandardErrorCode . GENERIC _ INTERNAL _ ERROR ,     \" ConnectorMetadata   beginInsert (  )    is   implemented   without   finishInsert (  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["finishInsert"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "throw   new   PrestoException ( StandardErrorCode . NOT _ SUPPORTED ,     \" This   connector   does   not   support   column   identity \"  )  ;", "}", "METHOD_END"], "methodName": ["getColumnIdentity"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "return   Optional . empty (  )  ;", "}", "METHOD_END"], "methodName": ["getInfo"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "List < ConnectorTableLayout >    layouts    =    getTableLayouts ( session ,    tableHandle ,    new   Constraint <  >  ( TupleDomain . all (  )  ,     (    map )     -  >    true )  ,    Optional . empty (  )  )  . stream (  )  . map ( ConnectorTableLayoutResult :  : getTableLayout )  . filter (  (    layout )     -  >    layout . getTablePartitioning (  )  . isPresent (  )  )  . collect ( Collectors . toList (  )  )  ;", "if    ( layouts . isEmpty (  )  )     {", "return   Optional . empty (  )  ;", "}", "if    (  ( layouts . size (  )  )     >     1  )     {", "throw   new   PrestoException ( StandardErrorCode . NOT _ SUPPORTED ,     \" Tables   with   multiple   layouts   can   not   be   written \"  )  ;", "}", "ConnectorTableLayout   layout    =    layouts . get (  0  )  ;", "ConnectorPartitioningHandle   partitioningHandle    =    layout . getTablePartitioning (  )  . get (  )  . getPartitioningHandle (  )  ;", "Map < ColumnHandle ,    String >    columnNamesByHandle    =    getColumnHandles ( session ,    tableHandle )  . entrySet (  )  . stream (  )  . collect ( Collectors . toMap ( Map . Entry :  : getValue ,    Map . Entry :  : getKey )  )  ;", "List < String >    partitionColumns    =    layout . getTablePartitioning (  )  . get (  )  . getPartitioningColumns (  )  . stream (  )  . map ( columnNamesByHandle :  : get )  . collect ( Collectors . toList (  )  )  ;", "return   Optional . of ( new   ConnectorNewTableLayout ( partitioningHandle ,    partitionColumns )  )  ;", "}", "METHOD_END"], "methodName": ["getInsertLayout"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "return   Optional . empty (  )  ;", "}", "METHOD_END"], "methodName": ["getNewTableLayout"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "return   Optional . empty (  )  ;", "}", "METHOD_END"], "methodName": ["getSystemTable"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "throw   new   PrestoException ( StandardErrorCode . NOT _ SUPPORTED ,     \" This   connector   does   not   support   table   identity \"  )  ;", "}", "METHOD_END"], "methodName": ["getTableIdentity"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "return   TableStatistics . EMPTY _ STATISTICS ;", "}", "METHOD_END"], "methodName": ["getTableStatistics"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "throw   new   PrestoException ( StandardErrorCode . NOT _ SUPPORTED ,     \" This   connector   does   not   support   updates   or   deletes \"  )  ;", "}", "METHOD_END"], "methodName": ["getUpdateRowIdColumnHandle"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "return   Collections . emptyMap (  )  ;", "}", "METHOD_END"], "methodName": ["getViews"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "throw   new   PrestoException ( StandardErrorCode . NOT _ SUPPORTED ,     \" This   connector   does   not   support   grants \"  )  ;", "}", "METHOD_END"], "methodName": ["grantTablePrivileges"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "return   Collections . emptyList (  )  ;", "}", "METHOD_END"], "methodName": ["listTablePrivileges"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "return   Collections . emptyList (  )  ;", "}", "METHOD_END"], "methodName": ["listViews"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "throw   new   PrestoException ( StandardErrorCode . NOT _ SUPPORTED ,     \" This   connector   does   not   support   deletes \"  )  ;", "}", "METHOD_END"], "methodName": ["metadataDelete"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "throw   new   PrestoException ( StandardErrorCode . NOT _ SUPPORTED ,     \" This   connector   does   not   support   renaming   columns \"  )  ;", "}", "METHOD_END"], "methodName": ["renameColumn"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "throw   new   PrestoException ( StandardErrorCode . NOT _ SUPPORTED ,     \" This   connector   does   not   support   renaming   schemas \"  )  ;", "}", "METHOD_END"], "methodName": ["renameSchema"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "throw   new   PrestoException ( StandardErrorCode . NOT _ SUPPORTED ,     \" This   connector   does   not   support   renaming   tables \"  )  ;", "}", "METHOD_END"], "methodName": ["renameTable"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "return   Optional . empty (  )  ;", "}", "METHOD_END"], "methodName": ["resolveIndex"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "throw   new   PrestoException ( StandardErrorCode . NOT _ SUPPORTED ,     \" This   connector   does   not   support   revokes \"  )  ;", "}", "METHOD_END"], "methodName": ["revokeTablePrivileges"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "return   listSchemaNames ( session )  . contains ( schemaName )  ;", "}", "METHOD_END"], "methodName": ["schemaExists"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "throw   new   PrestoException ( StandardErrorCode . NOT _ SUPPORTED ,     \" This   connector   does   not   support   deletes \"  )  ;", "}", "METHOD_END"], "methodName": ["supportsMetadataDelete"], "fileName": "com.facebook.presto.spi.connector.ConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "return   Collections . singletonList ( NotPartitionedPartitionHandle . NOT _ PARTITIONED )  ;", "}", "METHOD_END"], "methodName": ["listPartitionHandles"], "fileName": "com.facebook.presto.spi.connector.ConnectorNodePartitioningProvider"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isCoordinatorOnly"], "fileName": "com.facebook.presto.spi.connector.ConnectorPartitioningHandle"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isSingleNode"], "fileName": "com.facebook.presto.spi.connector.ConnectorPartitioningHandle"}, {"methodBody": ["METHOD_START", "{", "try    ( ThreadContextClassLoader   ignored    =    new   ThreadContextClassLoader ( classLoader )  )     {", "return   delegate . getTableIdentity ( connectorTableHandle )  ;", "}", "}", "METHOD_END"], "methodName": ["getTableIdentity"], "fileName": "com.facebook.presto.spi.connector.classloader.ClassLoaderSafeConnectorMetadata"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( ImmutableSet . copyOf ( clazz . getInterfaces (  )  )  ,    ImmutableSet . of ( iface )  )  ;", "for    ( Method   method    :    iface . getMethods (  )  )     {", "try    {", "Method   override    =    clazz . getDeclaredMethod ( method . getName (  )  ,    method . getParameterTypes (  )  )  ;", "assertEquals ( override . getReturnType (  )  ,    method . getReturnType (  )  )  ;", "}    catch    ( NoSuchMethodException   e )     {", "fail ( String . format (  \"  % s   does   not   override    [  % s ]  \"  ,    clazz . getName (  )  ,    method )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["assertAllMethodsOverridden"], "fileName": "com.facebook.presto.spi.connector.classloader.TestClassLoaderSafeWrappers"}, {"methodBody": ["METHOD_START", "{", "TestClassLoaderSafeWrappers . assertAllMethodsOverridden ( ConnectorMetadata . class ,    ClassLoaderSafeConnectorMetadata . class )  ;", "TestClassLoaderSafeWrappers . assertAllMethodsOverridden ( ConnectorPageSink . class ,    ClassLoaderSafeConnectorPageSink . class )  ;", "TestClassLoaderSafeWrappers . assertAllMethodsOverridden ( ConnectorPageSinkProvider . class ,    ClassLoaderSafeConnectorPageSinkProvider . class )  ;", "TestClassLoaderSafeWrappers . assertAllMethodsOverridden ( ConnectorPageSourceProvider . class ,    ClassLoaderSafeConnectorPageSourceProvider . class )  ;", "TestClassLoaderSafeWrappers . assertAllMethodsOverridden ( ConnectorSplitManager . class ,    ClassLoaderSafeConnectorSplitManager . class )  ;", "TestClassLoaderSafeWrappers . assertAllMethodsOverridden ( ConnectorNodePartitioningProvider . class ,    ClassLoaderSafeNodePartitioningProvider . class )  ;", "}", "METHOD_END"], "methodName": ["testAllMethodsOverridden"], "fileName": "com.facebook.presto.spi.connector.classloader.TestClassLoaderSafeWrappers"}, {"methodBody": ["METHOD_START", "{", "return   context ;", "}", "METHOD_END"], "methodName": ["getContext"], "fileName": "com.facebook.presto.spi.eventlistener.QueryCompletedEvent"}, {"methodBody": ["METHOD_START", "{", "return   createTime ;", "}", "METHOD_END"], "methodName": ["getCreateTime"], "fileName": "com.facebook.presto.spi.eventlistener.QueryCompletedEvent"}, {"methodBody": ["METHOD_START", "{", "return   endTime ;", "}", "METHOD_END"], "methodName": ["getEndTime"], "fileName": "com.facebook.presto.spi.eventlistener.QueryCompletedEvent"}, {"methodBody": ["METHOD_START", "{", "return   executionStartTime ;", "}", "METHOD_END"], "methodName": ["getExecutionStartTime"], "fileName": "com.facebook.presto.spi.eventlistener.QueryCompletedEvent"}, {"methodBody": ["METHOD_START", "{", "return   failureInfo ;", "}", "METHOD_END"], "methodName": ["getFailureInfo"], "fileName": "com.facebook.presto.spi.eventlistener.QueryCompletedEvent"}, {"methodBody": ["METHOD_START", "{", "return   ioMetadata ;", "}", "METHOD_END"], "methodName": ["getIoMetadata"], "fileName": "com.facebook.presto.spi.eventlistener.QueryCompletedEvent"}, {"methodBody": ["METHOD_START", "{", "return   metadata ;", "}", "METHOD_END"], "methodName": ["getMetadata"], "fileName": "com.facebook.presto.spi.eventlistener.QueryCompletedEvent"}, {"methodBody": ["METHOD_START", "{", "return   statistics ;", "}", "METHOD_END"], "methodName": ["getStatistics"], "fileName": "com.facebook.presto.spi.eventlistener.QueryCompletedEvent"}, {"methodBody": ["METHOD_START", "{", "return   catalog ;", "}", "METHOD_END"], "methodName": ["getCatalog"], "fileName": "com.facebook.presto.spi.eventlistener.QueryContext"}, {"methodBody": ["METHOD_START", "{", "return   clientInfo ;", "}", "METHOD_END"], "methodName": ["getClientInfo"], "fileName": "com.facebook.presto.spi.eventlistener.QueryContext"}, {"methodBody": ["METHOD_START", "{", "return   clientTags ;", "}", "METHOD_END"], "methodName": ["getClientTags"], "fileName": "com.facebook.presto.spi.eventlistener.QueryContext"}, {"methodBody": ["METHOD_START", "{", "return   environment ;", "}", "METHOD_END"], "methodName": ["getEnvironment"], "fileName": "com.facebook.presto.spi.eventlistener.QueryContext"}, {"methodBody": ["METHOD_START", "{", "return   principal ;", "}", "METHOD_END"], "methodName": ["getPrincipal"], "fileName": "com.facebook.presto.spi.eventlistener.QueryContext"}, {"methodBody": ["METHOD_START", "{", "return   remoteClientAddress ;", "}", "METHOD_END"], "methodName": ["getRemoteClientAddress"], "fileName": "com.facebook.presto.spi.eventlistener.QueryContext"}, {"methodBody": ["METHOD_START", "{", "return   resourceGroupName ;", "}", "METHOD_END"], "methodName": ["getResourceGroupName"], "fileName": "com.facebook.presto.spi.eventlistener.QueryContext"}, {"methodBody": ["METHOD_START", "{", "return   schema ;", "}", "METHOD_END"], "methodName": ["getSchema"], "fileName": "com.facebook.presto.spi.eventlistener.QueryContext"}, {"methodBody": ["METHOD_START", "{", "return   serverAddress ;", "}", "METHOD_END"], "methodName": ["getServerAddress"], "fileName": "com.facebook.presto.spi.eventlistener.QueryContext"}, {"methodBody": ["METHOD_START", "{", "return   serverVersion ;", "}", "METHOD_END"], "methodName": ["getServerVersion"], "fileName": "com.facebook.presto.spi.eventlistener.QueryContext"}, {"methodBody": ["METHOD_START", "{", "return   sessionProperties ;", "}", "METHOD_END"], "methodName": ["getSessionProperties"], "fileName": "com.facebook.presto.spi.eventlistener.QueryContext"}, {"methodBody": ["METHOD_START", "{", "return   source ;", "}", "METHOD_END"], "methodName": ["getSource"], "fileName": "com.facebook.presto.spi.eventlistener.QueryContext"}, {"methodBody": ["METHOD_START", "{", "return   user ;", "}", "METHOD_END"], "methodName": ["getUser"], "fileName": "com.facebook.presto.spi.eventlistener.QueryContext"}, {"methodBody": ["METHOD_START", "{", "return   userAgent ;", "}", "METHOD_END"], "methodName": ["getUserAgent"], "fileName": "com.facebook.presto.spi.eventlistener.QueryContext"}, {"methodBody": ["METHOD_START", "{", "return   context ;", "}", "METHOD_END"], "methodName": ["getContext"], "fileName": "com.facebook.presto.spi.eventlistener.QueryCreatedEvent"}, {"methodBody": ["METHOD_START", "{", "return   createTime ;", "}", "METHOD_END"], "methodName": ["getCreateTime"], "fileName": "com.facebook.presto.spi.eventlistener.QueryCreatedEvent"}, {"methodBody": ["METHOD_START", "{", "return   metadata ;", "}", "METHOD_END"], "methodName": ["getMetadata"], "fileName": "com.facebook.presto.spi.eventlistener.QueryCreatedEvent"}, {"methodBody": ["METHOD_START", "{", "return   errorCode ;", "}", "METHOD_END"], "methodName": ["getErrorCode"], "fileName": "com.facebook.presto.spi.eventlistener.QueryFailureInfo"}, {"methodBody": ["METHOD_START", "{", "return   failureHost ;", "}", "METHOD_END"], "methodName": ["getFailureHost"], "fileName": "com.facebook.presto.spi.eventlistener.QueryFailureInfo"}, {"methodBody": ["METHOD_START", "{", "return   failureMessage ;", "}", "METHOD_END"], "methodName": ["getFailureMessage"], "fileName": "com.facebook.presto.spi.eventlistener.QueryFailureInfo"}, {"methodBody": ["METHOD_START", "{", "return   failureTask ;", "}", "METHOD_END"], "methodName": ["getFailureTask"], "fileName": "com.facebook.presto.spi.eventlistener.QueryFailureInfo"}, {"methodBody": ["METHOD_START", "{", "return   failureType ;", "}", "METHOD_END"], "methodName": ["getFailureType"], "fileName": "com.facebook.presto.spi.eventlistener.QueryFailureInfo"}, {"methodBody": ["METHOD_START", "{", "return   failuresJson ;", "}", "METHOD_END"], "methodName": ["getFailuresJson"], "fileName": "com.facebook.presto.spi.eventlistener.QueryFailureInfo"}, {"methodBody": ["METHOD_START", "{", "return   inputs ;", "}", "METHOD_END"], "methodName": ["getInputs"], "fileName": "com.facebook.presto.spi.eventlistener.QueryIOMetadata"}, {"methodBody": ["METHOD_START", "{", "return   output ;", "}", "METHOD_END"], "methodName": ["getOutput"], "fileName": "com.facebook.presto.spi.eventlistener.QueryIOMetadata"}, {"methodBody": ["METHOD_START", "{", "return   columns ;", "}", "METHOD_END"], "methodName": ["getColumns"], "fileName": "com.facebook.presto.spi.eventlistener.QueryInputMetadata"}, {"methodBody": ["METHOD_START", "{", "return   connectorId ;", "}", "METHOD_END"], "methodName": ["getConnectorId"], "fileName": "com.facebook.presto.spi.eventlistener.QueryInputMetadata"}, {"methodBody": ["METHOD_START", "{", "return   connectorInfo ;", "}", "METHOD_END"], "methodName": ["getConnectorInfo"], "fileName": "com.facebook.presto.spi.eventlistener.QueryInputMetadata"}, {"methodBody": ["METHOD_START", "{", "return   schema ;", "}", "METHOD_END"], "methodName": ["getSchema"], "fileName": "com.facebook.presto.spi.eventlistener.QueryInputMetadata"}, {"methodBody": ["METHOD_START", "{", "return   table ;", "}", "METHOD_END"], "methodName": ["getTable"], "fileName": "com.facebook.presto.spi.eventlistener.QueryInputMetadata"}, {"methodBody": ["METHOD_START", "{", "return   payload ;", "}", "METHOD_END"], "methodName": ["getPayload"], "fileName": "com.facebook.presto.spi.eventlistener.QueryMetadata"}, {"methodBody": ["METHOD_START", "{", "return   plan ;", "}", "METHOD_END"], "methodName": ["getPlan"], "fileName": "com.facebook.presto.spi.eventlistener.QueryMetadata"}, {"methodBody": ["METHOD_START", "{", "return   query ;", "}", "METHOD_END"], "methodName": ["getQuery"], "fileName": "com.facebook.presto.spi.eventlistener.QueryMetadata"}, {"methodBody": ["METHOD_START", "{", "return   queryId ;", "}", "METHOD_END"], "methodName": ["getQueryId"], "fileName": "com.facebook.presto.spi.eventlistener.QueryMetadata"}, {"methodBody": ["METHOD_START", "{", "return   queryState ;", "}", "METHOD_END"], "methodName": ["getQueryState"], "fileName": "com.facebook.presto.spi.eventlistener.QueryMetadata"}, {"methodBody": ["METHOD_START", "{", "return   transactionId ;", "}", "METHOD_END"], "methodName": ["getTransactionId"], "fileName": "com.facebook.presto.spi.eventlistener.QueryMetadata"}, {"methodBody": ["METHOD_START", "{", "return   uri ;", "}", "METHOD_END"], "methodName": ["getUri"], "fileName": "com.facebook.presto.spi.eventlistener.QueryMetadata"}, {"methodBody": ["METHOD_START", "{", "return   connectorId ;", "}", "METHOD_END"], "methodName": ["getConnectorId"], "fileName": "com.facebook.presto.spi.eventlistener.QueryOutputMetadata"}, {"methodBody": ["METHOD_START", "{", "return   connectorOutputMetadata ;", "}", "METHOD_END"], "methodName": ["getConnectorOutputMetadata"], "fileName": "com.facebook.presto.spi.eventlistener.QueryOutputMetadata"}, {"methodBody": ["METHOD_START", "{", "return   jsonLengthLimitExceeded ;", "}", "METHOD_END"], "methodName": ["getJsonLengthLimitExceeded"], "fileName": "com.facebook.presto.spi.eventlistener.QueryOutputMetadata"}, {"methodBody": ["METHOD_START", "{", "return   schema ;", "}", "METHOD_END"], "methodName": ["getSchema"], "fileName": "com.facebook.presto.spi.eventlistener.QueryOutputMetadata"}, {"methodBody": ["METHOD_START", "{", "return   table ;", "}", "METHOD_END"], "methodName": ["getTable"], "fileName": "com.facebook.presto.spi.eventlistener.QueryOutputMetadata"}, {"methodBody": ["METHOD_START", "{", "return   analysisTime ;", "}", "METHOD_END"], "methodName": ["getAnalysisTime"], "fileName": "com.facebook.presto.spi.eventlistener.QueryStatistics"}, {"methodBody": ["METHOD_START", "{", "return   completedSplits ;", "}", "METHOD_END"], "methodName": ["getCompletedSplits"], "fileName": "com.facebook.presto.spi.eventlistener.QueryStatistics"}, {"methodBody": ["METHOD_START", "{", "return   cpuTime ;", "}", "METHOD_END"], "methodName": ["getCpuTime"], "fileName": "com.facebook.presto.spi.eventlistener.QueryStatistics"}, {"methodBody": ["METHOD_START", "{", "return   cpuTimeDistribution ;", "}", "METHOD_END"], "methodName": ["getCpuTimeDistribution"], "fileName": "com.facebook.presto.spi.eventlistener.QueryStatistics"}, {"methodBody": ["METHOD_START", "{", "return   cumulativeMemory ;", "}", "METHOD_END"], "methodName": ["getCumulativeMemory"], "fileName": "com.facebook.presto.spi.eventlistener.QueryStatistics"}, {"methodBody": ["METHOD_START", "{", "return   distributedPlanningTime ;", "}", "METHOD_END"], "methodName": ["getDistributedPlanningTime"], "fileName": "com.facebook.presto.spi.eventlistener.QueryStatistics"}, {"methodBody": ["METHOD_START", "{", "return   operatorSummaries ;", "}", "METHOD_END"], "methodName": ["getOperatorSummaries"], "fileName": "com.facebook.presto.spi.eventlistener.QueryStatistics"}, {"methodBody": ["METHOD_START", "{", "return   outputBytes ;", "}", "METHOD_END"], "methodName": ["getOutputBytes"], "fileName": "com.facebook.presto.spi.eventlistener.QueryStatistics"}, {"methodBody": ["METHOD_START", "{", "return   outputRows ;", "}", "METHOD_END"], "methodName": ["getOutputRows"], "fileName": "com.facebook.presto.spi.eventlistener.QueryStatistics"}, {"methodBody": ["METHOD_START", "{", "return   peakTotalNonRevocableMemoryBytes ;", "}", "METHOD_END"], "methodName": ["getPeakTotalNonRevocableMemoryBytes"], "fileName": "com.facebook.presto.spi.eventlistener.QueryStatistics"}, {"methodBody": ["METHOD_START", "{", "return   peakUserMemoryBytes ;", "}", "METHOD_END"], "methodName": ["getPeakUserMemoryBytes"], "fileName": "com.facebook.presto.spi.eventlistener.QueryStatistics"}, {"methodBody": ["METHOD_START", "{", "return   queuedTime ;", "}", "METHOD_END"], "methodName": ["getQueuedTime"], "fileName": "com.facebook.presto.spi.eventlistener.QueryStatistics"}, {"methodBody": ["METHOD_START", "{", "return   stageGcStatistics ;", "}", "METHOD_END"], "methodName": ["getStageGcStatistics"], "fileName": "com.facebook.presto.spi.eventlistener.QueryStatistics"}, {"methodBody": ["METHOD_START", "{", "return   totalBytes ;", "}", "METHOD_END"], "methodName": ["getTotalBytes"], "fileName": "com.facebook.presto.spi.eventlistener.QueryStatistics"}, {"methodBody": ["METHOD_START", "{", "return   totalRows ;", "}", "METHOD_END"], "methodName": ["getTotalRows"], "fileName": "com.facebook.presto.spi.eventlistener.QueryStatistics"}, {"methodBody": ["METHOD_START", "{", "return   wallTime ;", "}", "METHOD_END"], "methodName": ["getWallTime"], "fileName": "com.facebook.presto.spi.eventlistener.QueryStatistics"}, {"methodBody": ["METHOD_START", "{", "return   writtenBytes ;", "}", "METHOD_END"], "methodName": ["getWrittenBytes"], "fileName": "com.facebook.presto.spi.eventlistener.QueryStatistics"}, {"methodBody": ["METHOD_START", "{", "return   writtenRows ;", "}", "METHOD_END"], "methodName": ["getWrittenRows"], "fileName": "com.facebook.presto.spi.eventlistener.QueryStatistics"}, {"methodBody": ["METHOD_START", "{", "return   complete ;", "}", "METHOD_END"], "methodName": ["isComplete"], "fileName": "com.facebook.presto.spi.eventlistener.QueryStatistics"}, {"methodBody": ["METHOD_START", "{", "return   peakTaskTotalMemory ;", "}", "METHOD_END"], "methodName": ["peakTaskTotalMemory"], "fileName": "com.facebook.presto.spi.eventlistener.QueryStatistics"}, {"methodBody": ["METHOD_START", "{", "return   createTime ;", "}", "METHOD_END"], "methodName": ["getCreateTime"], "fileName": "com.facebook.presto.spi.eventlistener.SplitCompletedEvent"}, {"methodBody": ["METHOD_START", "{", "return   endTime ;", "}", "METHOD_END"], "methodName": ["getEndTime"], "fileName": "com.facebook.presto.spi.eventlistener.SplitCompletedEvent"}, {"methodBody": ["METHOD_START", "{", "return   failureInfo ;", "}", "METHOD_END"], "methodName": ["getFailureInfo"], "fileName": "com.facebook.presto.spi.eventlistener.SplitCompletedEvent"}, {"methodBody": ["METHOD_START", "{", "return   payload ;", "}", "METHOD_END"], "methodName": ["getPayload"], "fileName": "com.facebook.presto.spi.eventlistener.SplitCompletedEvent"}, {"methodBody": ["METHOD_START", "{", "return   queryId ;", "}", "METHOD_END"], "methodName": ["getQueryId"], "fileName": "com.facebook.presto.spi.eventlistener.SplitCompletedEvent"}, {"methodBody": ["METHOD_START", "{", "return   stageId ;", "}", "METHOD_END"], "methodName": ["getStageId"], "fileName": "com.facebook.presto.spi.eventlistener.SplitCompletedEvent"}, {"methodBody": ["METHOD_START", "{", "return   startTime ;", "}", "METHOD_END"], "methodName": ["getStartTime"], "fileName": "com.facebook.presto.spi.eventlistener.SplitCompletedEvent"}, {"methodBody": ["METHOD_START", "{", "return   statistics ;", "}", "METHOD_END"], "methodName": ["getStatistics"], "fileName": "com.facebook.presto.spi.eventlistener.SplitCompletedEvent"}, {"methodBody": ["METHOD_START", "{", "return   taskId ;", "}", "METHOD_END"], "methodName": ["getTaskId"], "fileName": "com.facebook.presto.spi.eventlistener.SplitCompletedEvent"}, {"methodBody": ["METHOD_START", "{", "return   failureMessage ;", "}", "METHOD_END"], "methodName": ["getFailureMessage"], "fileName": "com.facebook.presto.spi.eventlistener.SplitFailureInfo"}, {"methodBody": ["METHOD_START", "{", "return   failureType ;", "}", "METHOD_END"], "methodName": ["getFailureType"], "fileName": "com.facebook.presto.spi.eventlistener.SplitFailureInfo"}, {"methodBody": ["METHOD_START", "{", "return   completedDataSizeBytes ;", "}", "METHOD_END"], "methodName": ["getCompletedDataSizeBytes"], "fileName": "com.facebook.presto.spi.eventlistener.SplitStatistics"}, {"methodBody": ["METHOD_START", "{", "return   completedPositions ;", "}", "METHOD_END"], "methodName": ["getCompletedPositions"], "fileName": "com.facebook.presto.spi.eventlistener.SplitStatistics"}, {"methodBody": ["METHOD_START", "{", "return   completedReadTime ;", "}", "METHOD_END"], "methodName": ["getCompletedReadTime"], "fileName": "com.facebook.presto.spi.eventlistener.SplitStatistics"}, {"methodBody": ["METHOD_START", "{", "return   cpuTime ;", "}", "METHOD_END"], "methodName": ["getCpuTime"], "fileName": "com.facebook.presto.spi.eventlistener.SplitStatistics"}, {"methodBody": ["METHOD_START", "{", "return   queuedTime ;", "}", "METHOD_END"], "methodName": ["getQueuedTime"], "fileName": "com.facebook.presto.spi.eventlistener.SplitStatistics"}, {"methodBody": ["METHOD_START", "{", "return   timeToFirstByte ;", "}", "METHOD_END"], "methodName": ["getTimeToFirstByte"], "fileName": "com.facebook.presto.spi.eventlistener.SplitStatistics"}, {"methodBody": ["METHOD_START", "{", "return   timeToLastByte ;", "}", "METHOD_END"], "methodName": ["getTimeToLastByte"], "fileName": "com.facebook.presto.spi.eventlistener.SplitStatistics"}, {"methodBody": ["METHOD_START", "{", "return   userTime ;", "}", "METHOD_END"], "methodName": ["getUserTime"], "fileName": "com.facebook.presto.spi.eventlistener.SplitStatistics"}, {"methodBody": ["METHOD_START", "{", "return   wallTime ;", "}", "METHOD_END"], "methodName": ["getWallTime"], "fileName": "com.facebook.presto.spi.eventlistener.SplitStatistics"}, {"methodBody": ["METHOD_START", "{", "return   average ;", "}", "METHOD_END"], "methodName": ["getAverage"], "fileName": "com.facebook.presto.spi.eventlistener.StageCpuDistribution"}, {"methodBody": ["METHOD_START", "{", "return   max ;", "}", "METHOD_END"], "methodName": ["getMax"], "fileName": "com.facebook.presto.spi.eventlistener.StageCpuDistribution"}, {"methodBody": ["METHOD_START", "{", "return   min ;", "}", "METHOD_END"], "methodName": ["getMin"], "fileName": "com.facebook.presto.spi.eventlistener.StageCpuDistribution"}, {"methodBody": ["METHOD_START", "{", "return   p 2  5  ;", "}", "METHOD_END"], "methodName": ["getP25"], "fileName": "com.facebook.presto.spi.eventlistener.StageCpuDistribution"}, {"methodBody": ["METHOD_START", "{", "return   p 5  0  ;", "}", "METHOD_END"], "methodName": ["getP50"], "fileName": "com.facebook.presto.spi.eventlistener.StageCpuDistribution"}, {"methodBody": ["METHOD_START", "{", "return   p 7  5  ;", "}", "METHOD_END"], "methodName": ["getP75"], "fileName": "com.facebook.presto.spi.eventlistener.StageCpuDistribution"}, {"methodBody": ["METHOD_START", "{", "return   p 9  0  ;", "}", "METHOD_END"], "methodName": ["getP90"], "fileName": "com.facebook.presto.spi.eventlistener.StageCpuDistribution"}, {"methodBody": ["METHOD_START", "{", "return   p 9  5  ;", "}", "METHOD_END"], "methodName": ["getP95"], "fileName": "com.facebook.presto.spi.eventlistener.StageCpuDistribution"}, {"methodBody": ["METHOD_START", "{", "return   p 9  9  ;", "}", "METHOD_END"], "methodName": ["getP99"], "fileName": "com.facebook.presto.spi.eventlistener.StageCpuDistribution"}, {"methodBody": ["METHOD_START", "{", "return   stageId ;", "}", "METHOD_END"], "methodName": ["getStageId"], "fileName": "com.facebook.presto.spi.eventlistener.StageCpuDistribution"}, {"methodBody": ["METHOD_START", "{", "return   tasks ;", "}", "METHOD_END"], "methodName": ["getTasks"], "fileName": "com.facebook.presto.spi.eventlistener.StageCpuDistribution"}, {"methodBody": ["METHOD_START", "{", "return   total ;", "}", "METHOD_END"], "methodName": ["getTotal"], "fileName": "com.facebook.presto.spi.eventlistener.StageCpuDistribution"}, {"methodBody": ["METHOD_START", "{", "return   averageFullGcSec ;", "}", "METHOD_END"], "methodName": ["getAverageFullGcSec"], "fileName": "com.facebook.presto.spi.eventlistener.StageGcStatistics"}, {"methodBody": ["METHOD_START", "{", "return   fullGcTasks ;", "}", "METHOD_END"], "methodName": ["getFullGcTasks"], "fileName": "com.facebook.presto.spi.eventlistener.StageGcStatistics"}, {"methodBody": ["METHOD_START", "{", "return   maxFullGcSec ;", "}", "METHOD_END"], "methodName": ["getMaxFullGcSec"], "fileName": "com.facebook.presto.spi.eventlistener.StageGcStatistics"}, {"methodBody": ["METHOD_START", "{", "return   minFullGcSec ;", "}", "METHOD_END"], "methodName": ["getMinFullGcSec"], "fileName": "com.facebook.presto.spi.eventlistener.StageGcStatistics"}, {"methodBody": ["METHOD_START", "{", "return   stageId ;", "}", "METHOD_END"], "methodName": ["getStageId"], "fileName": "com.facebook.presto.spi.eventlistener.StageGcStatistics"}, {"methodBody": ["METHOD_START", "{", "return   tasks ;", "}", "METHOD_END"], "methodName": ["getTasks"], "fileName": "com.facebook.presto.spi.eventlistener.StageGcStatistics"}, {"methodBody": ["METHOD_START", "{", "return   totalFullGcSec ;", "}", "METHOD_END"], "methodName": ["getTotalFullGcSec"], "fileName": "com.facebook.presto.spi.eventlistener.StageGcStatistics"}, {"methodBody": ["METHOD_START", "{", "return   operator ;", "}", "METHOD_END"], "methodName": ["getOperator"], "fileName": "com.facebook.presto.spi.function.OperatorType"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "com.facebook.presto.spi.memory.MemoryPoolId"}, {"methodBody": ["METHOD_START", "{", "return    (  ( maxBytes )     -     ( reservedBytes )  )     -     ( reservedRevocableBytes )  ;", "}", "METHOD_END"], "methodName": ["getFreeBytes"], "fileName": "com.facebook.presto.spi.memory.MemoryPoolInfo"}, {"methodBody": ["METHOD_START", "{", "return   maxBytes ;", "}", "METHOD_END"], "methodName": ["getMaxBytes"], "fileName": "com.facebook.presto.spi.memory.MemoryPoolInfo"}, {"methodBody": ["METHOD_START", "{", "return   queryMemoryReservations ;", "}", "METHOD_END"], "methodName": ["getQueryMemoryReservations"], "fileName": "com.facebook.presto.spi.memory.MemoryPoolInfo"}, {"methodBody": ["METHOD_START", "{", "return   queryMemoryRevocableReservations ;", "}", "METHOD_END"], "methodName": ["getQueryMemoryRevocableReservations"], "fileName": "com.facebook.presto.spi.memory.MemoryPoolInfo"}, {"methodBody": ["METHOD_START", "{", "return   reservedBytes ;", "}", "METHOD_END"], "methodName": ["getReservedBytes"], "fileName": "com.facebook.presto.spi.memory.MemoryPoolInfo"}, {"methodBody": ["METHOD_START", "{", "return   reservedRevocableBytes ;", "}", "METHOD_END"], "methodName": ["getReservedRevocableBytes"], "fileName": "com.facebook.presto.spi.memory.MemoryPoolInfo"}, {"methodBody": ["METHOD_START", "{", "return   new   AllOrNoneValueSet ( type ,    true )  ;", "}", "METHOD_END"], "methodName": ["all"], "fileName": "com.facebook.presto.spi.predicate.AllOrNoneValueSet"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( getType (  )  . equals ( other . getType (  )  )  )  )     {", "throw   new   IllegalArgumentException ( String . format (  \" Mismatched   types :     % s   vs    % s \"  ,    getType (  )  ,    other . getType (  )  )  )  ;", "}", "if    (  !  ( other   instanceof    )  )     {", "throw   new   IllegalArgumentException ( String . format (  \" ValueSet   is   not   a    :     % s \"  ,    other . getClass (  )  )  )  ;", "}", "return    (  (  )     ( other )  )  ;", "}", "METHOD_END"], "methodName": ["checkCompatibility"], "fileName": "com.facebook.presto.spi.predicate.AllOrNoneValueSet"}, {"methodBody": ["METHOD_START", "{", "return    (  )     -  >    all ;", "}", "METHOD_END"], "methodName": ["getAllOrNone"], "fileName": "com.facebook.presto.spi.predicate.AllOrNoneValueSet"}, {"methodBody": ["METHOD_START", "{", "return   new   AllOrNoneValueSet ( type ,    false )  ;", "}", "METHOD_END"], "methodName": ["none"], "fileName": "com.facebook.presto.spi.predicate.AllOrNoneValueSet"}, {"methodBody": ["METHOD_START", "{", "SortedRangeSet   build    =    new   SortedRangeSet . Builder ( BigintType . BIGINT )  . addAll ( data . ranges )  . build (  )  ;", "return   build ;", "}", "METHOD_END"], "methodName": ["benchmarkBuilder"], "fileName": "com.facebook.presto.spi.predicate.BenchmarkSortedRangeSet"}, {"methodBody": ["METHOD_START", "{", "Options   options    =    new   OptionsBuilder (  )  . verbosity ( NORMAL )  . include (  (  (  \"  .  *  \"     +     ( BenchmarkSortedRangeSet . class . getSimpleName (  )  )  )     +     \"  .  *  \"  )  )  . build (  )  ;", "new   Runner ( options )  . run (  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.spi.predicate.BenchmarkSortedRangeSet"}, {"methodBody": ["METHOD_START", "{", "return   new   Domain ( ValueSet . all ( type )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["all"], "fileName": "com.facebook.presto.spi.predicate.Domain"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( getType (  )  . equals ( domain . getType (  )  )  )  )     {", "throw   new   IllegalArgumentException ( String . format (  \" Mismatched      types :     % s   vs    % s \"  ,    getType (  )  ,    domain . getType (  )  )  )  ;", "}", "if    (  ( values . getClass (  )  )     !  =     ( domain . values . getClass (  )  )  )     {", "throw   new   IllegalArgumentException ( String . format (  \" Mismatched      value   set   classes :     % s   vs    % s \"  ,    values . getClass (  )  ,    domain . values . getClass (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkCompatibility"], "fileName": "com.facebook.presto.spi.predicate.Domain"}, {"methodBody": ["METHOD_START", "{", "return   new   Domain ( values . complement (  )  ,     (  !  ( nullAllowed )  )  )  ;", "}", "METHOD_END"], "methodName": ["complement"], "fileName": "com.facebook.presto.spi.predicate.Domain"}, {"methodBody": ["METHOD_START", "{", "checkCompatibility ( other )  ;", "return   this . union ( other )  . equals ( this )  ;", "}", "METHOD_END"], "methodName": ["contains"], "fileName": "com.facebook.presto.spi.predicate.Domain"}, {"methodBody": ["METHOD_START", "{", "return   new   Domain ( values ,    nullAllowed )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "com.facebook.presto.spi.predicate.Domain"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isNullableSingleValue (  )  )  )     {", "throw   new   IllegalStateException (  \"    is   not   a   nullable   single   value \"  )  ;", "}", "if    ( nullAllowed )     {", "return   null ;", "} else    {", "return   values . getSingleValue (  )  ;", "}", "}", "METHOD_END"], "methodName": ["getNullableSingleValue"], "fileName": "com.facebook.presto.spi.predicate.Domain"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSingleValue (  )  )  )     {", "throw   new   IllegalStateException (  \"    is   not   a   single   value \"  )  ;", "}", "return   values . getSingleValue (  )  ;", "}", "METHOD_END"], "methodName": ["getSingleValue"], "fileName": "com.facebook.presto.spi.predicate.Domain"}, {"methodBody": ["METHOD_START", "{", "return   values . getType (  )  ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.facebook.presto.spi.predicate.Domain"}, {"methodBody": ["METHOD_START", "{", "return   values ;", "}", "METHOD_END"], "methodName": ["getValues"], "fileName": "com.facebook.presto.spi.predicate.Domain"}, {"methodBody": ["METHOD_START", "{", "return   value    =  =    null    ?    nullAllowed    :    values . containsValue ( value )  ;", "}", "METHOD_END"], "methodName": ["includesNullableValue"], "fileName": "com.facebook.presto.spi.predicate.Domain"}, {"methodBody": ["METHOD_START", "{", "checkCompatibility ( other )  ;", "return   new    ( values . intersect ( other . getValues (  )  )  ,     (  ( this . isNullAllowed (  )  )     &  &     ( other . isNullAllowed (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["intersect"], "fileName": "com.facebook.presto.spi.predicate.Domain"}, {"methodBody": ["METHOD_START", "{", "return    ( values . isAll (  )  )     &  &     ( nullAllowed )  ;", "}", "METHOD_END"], "methodName": ["isAll"], "fileName": "com.facebook.presto.spi.predicate.Domain"}, {"methodBody": ["METHOD_START", "{", "return    ( values . isNone (  )  )     &  &     (  !  ( nullAllowed )  )  ;", "}", "METHOD_END"], "methodName": ["isNone"], "fileName": "com.facebook.presto.spi.predicate.Domain"}, {"methodBody": ["METHOD_START", "{", "return   nullAllowed ;", "}", "METHOD_END"], "methodName": ["isNullAllowed"], "fileName": "com.facebook.presto.spi.predicate.Domain"}, {"methodBody": ["METHOD_START", "{", "if    ( nullAllowed )     {", "return   values . isNone (  )  ;", "} else    {", "return   values . isSingleValue (  )  ;", "}", "}", "METHOD_END"], "methodName": ["isNullableSingleValue"], "fileName": "com.facebook.presto.spi.predicate.Domain"}, {"methodBody": ["METHOD_START", "{", "return    ( values . isNone (  )  )     &  &     ( nullAllowed )  ;", "}", "METHOD_END"], "methodName": ["isOnlyNull"], "fileName": "com.facebook.presto.spi.predicate.Domain"}, {"methodBody": ["METHOD_START", "{", "return    (  !  ( nullAllowed )  )     &  &     ( values . isSingleValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["isSingleValue"], "fileName": "com.facebook.presto.spi.predicate.Domain"}, {"methodBody": ["METHOD_START", "{", "if    ( values . isEmpty (  )  )     {", "throw   new   IllegalArgumentException (  \" values   cannot   be   empty \"  )  ;", "}", "if    (  ( values . size (  )  )     =  =     1  )     {", "return    . singleValue ( type ,    values . get (  0  )  )  ;", "}", "return   new    ( ValueSet . of ( type ,    values . get (  0  )  ,    values . subList (  1  ,    values . size (  )  )  . toArray (  )  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["multipleValues"], "fileName": "com.facebook.presto.spi.predicate.Domain"}, {"methodBody": ["METHOD_START", "{", "return   new   Domain ( ValueSet . none ( type )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["none"], "fileName": "com.facebook.presto.spi.predicate.Domain"}, {"methodBody": ["METHOD_START", "{", "return   new   Domain ( ValueSet . all ( type )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["notNull"], "fileName": "com.facebook.presto.spi.predicate.Domain"}, {"methodBody": ["METHOD_START", "{", "return   new   Domain ( ValueSet . none ( type )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["onlyNull"], "fileName": "com.facebook.presto.spi.predicate.Domain"}, {"methodBody": ["METHOD_START", "{", "checkCompatibility ( other )  ;", "return    !  ( this . intersect ( other )  . isNone (  )  )  ;", "}", "METHOD_END"], "methodName": ["overlaps"], "fileName": "com.facebook.presto.spi.predicate.Domain"}, {"methodBody": ["METHOD_START", "{", "ValueSet   simplifiedValueSet    =    values . getValuesProcessor (  )  .  < Optional < ValueSet >  > transform (  (    ranges )     -  >     {", "if    (  ( ranges . getOrderedRanges (  )  . size (  )  )     <  =     3  2  )     {", "return   Optional . empty (  )  ;", "}", "return   Optional . of ( ValueSet . ofRanges ( ranges . getSpan (  )  )  )  ;", "}  ,     (    discreteValues )     -  >     {", "if    (  ( discreteValues . getValues (  )  . size (  )  )     <  =     3  2  )     {", "return   Optional . empty (  )  ;", "}", "return   Optional . of ( ValueSet . all ( values . getType (  )  )  )  ;", "}  ,     (    allOrNone )     -  >    Optional . empty (  )  )  . orElse ( values )  ;", "return    . create ( simplifiedValueSet ,    nullAllowed )  ;", "}", "METHOD_END"], "methodName": ["simplify"], "fileName": "com.facebook.presto.spi.predicate.Domain"}, {"methodBody": ["METHOD_START", "{", "return   new   Domain ( ValueSet . of ( type ,    value )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["singleValue"], "fileName": "com.facebook.presto.spi.predicate.Domain"}, {"methodBody": ["METHOD_START", "{", "checkCompatibility ( other )  ;", "return   new    ( values . subtract ( other . getValues (  )  )  ,     (  ( this . isNullAllowed (  )  )     &  &     (  !  ( other . isNullAllowed (  )  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["subtract"], "fileName": "com.facebook.presto.spi.predicate.Domain"}, {"methodBody": ["METHOD_START", "{", "return    (  (  \"  [     \"     +     ( nullAllowed    ?     \" NULL ,     \"     :     \"  \"  )  )     +     ( values . toString ( session )  )  )     +     \"     ]  \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "com.facebook.presto.spi.predicate.Domain"}, {"methodBody": ["METHOD_START", "{", "checkCompatibility ( other )  ;", "return   new    ( values . union ( other . getValues (  )  )  ,     (  ( this . isNullAllowed (  )  )     |  |     ( other . isNullAllowed (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["union"], "fileName": "com.facebook.presto.spi.predicate.Domain"}, {"methodBody": ["METHOD_START", "{", "if    ( domains . isEmpty (  )  )     {", "throw   new   IllegalArgumentException (  \" domains   cannot   be   empty   for   union \"  )  ;", "}", "if    (  ( domains . size (  )  )     =  =     1  )     {", "return   domains . get (  0  )  ;", "}", "boolean   nullAllowed    =    false ;", "List < ValueSet >    valueSets    =    new   ArrayList <  >  ( domains . size (  )  )  ;", "for    (    domain    :    domains )     {", "valueSets . add ( domain . getValues (  )  )  ;", "nullAllowed    =    nullAllowed    |  |     ( domain . nullAllowed )  ;", "}", "ValueSet   unionedValues    =    valueSets . get (  0  )  . union ( valueSets . subList (  1  ,    valueSets . size (  )  )  )  ;", "return   new    ( unionedValues ,    nullAllowed )  ;", "}", "METHOD_END"], "methodName": ["union"], "fileName": "com.facebook.presto.spi.predicate.Domain"}, {"methodBody": ["METHOD_START", "{", "return   new   EquatableValueSet ( type ,    false ,    Collections . emptySet (  )  )  ;", "}", "METHOD_END"], "methodName": ["all"], "fileName": "com.facebook.presto.spi.predicate.EquatableValueSet"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( getType (  )  . equals ( other . getType (  )  )  )  )     {", "throw   new   IllegalStateException ( String . format (  \" Mismatched   types :     % s   vs    % s \"  ,    getType (  )  ,    other . getType (  )  )  )  ;", "}", "if    (  !  ( other   instanceof    )  )     {", "throw   new   IllegalStateException ( String . format (  \" ValueSet   is   not   a    :     % s \"  ,    other . getClass (  )  )  )  ;", "}", "return    (  (  )     ( other )  )  ;", "}", "METHOD_END"], "methodName": ["checkCompatibility"], "fileName": "com.facebook.presto.spi.predicate.EquatableValueSet"}, {"methodBody": ["METHOD_START", "{", "return   new   EquatableValueSet ( type ,    true ,    values . stream (  )  . map (  (    value )     -  >    EquatableValueSet . ValueEntry . create ( type ,    value )  )  . collect ( Collectors . toSet (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["copyOf"], "fileName": "com.facebook.presto.spi.predicate.EquatableValueSet"}, {"methodBody": ["METHOD_START", "{", "return   entries ;", "}", "METHOD_END"], "methodName": ["getEntries"], "fileName": "com.facebook.presto.spi.predicate.EquatableValueSet"}, {"methodBody": ["METHOD_START", "{", "return   Collections . unmodifiableCollection ( entries . stream (  )  . map ( EquatableValueSet . ValueEntry :  : getValue )  . collect ( Collectors . toList (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getValues"], "fileName": "com.facebook.presto.spi.predicate.EquatableValueSet"}, {"methodBody": ["METHOD_START", "{", "return   set 1  . stream (  )  . filter ( set 2  :  : contains )  . collect ( Collectors . toSet (  )  )  ;", "}", "METHOD_END"], "methodName": ["intersect"], "fileName": "com.facebook.presto.spi.predicate.EquatableValueSet"}, {"methodBody": ["METHOD_START", "{", "return   whiteList ;", "}", "METHOD_END"], "methodName": ["isWhiteList"], "fileName": "com.facebook.presto.spi.predicate.EquatableValueSet"}, {"methodBody": ["METHOD_START", "{", "return   new   EquatableValueSet ( type ,    true ,    Collections . emptySet (  )  )  ;", "}", "METHOD_END"], "methodName": ["none"], "fileName": "com.facebook.presto.spi.predicate.EquatableValueSet"}, {"methodBody": ["METHOD_START", "{", "HashSet < EquatableValueSet . ValueEntry >    set    =    new   HashSet <  >  (  (  ( rest . length )     +     1  )  )  ;", "set . add ( EquatableValueSet . ValueEntry . create ( type ,    first )  )  ;", "for    ( Object   value    :    rest )     {", "set . add ( EquatableValueSet . ValueEntry . create ( type ,    value )  )  ;", "}", "return   new   EquatableValueSet ( type ,    true ,    set )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "com.facebook.presto.spi.predicate.EquatableValueSet"}, {"methodBody": ["METHOD_START", "{", "return   set 1  . stream (  )  . filter (  (    value )     -  >     !  ( set 2  . contains ( value )  )  )  . collect ( Collectors . toSet (  )  )  ;", "}", "METHOD_END"], "methodName": ["subtract"], "fileName": "com.facebook.presto.spi.predicate.EquatableValueSet"}, {"methodBody": ["METHOD_START", "{", "return   Stream . concat ( set 1  . stream (  )  ,    set 2  . stream (  )  )  . collect ( Collectors . toSet (  )  )  ;", "}", "METHOD_END"], "methodName": ["union"], "fileName": "com.facebook.presto.spi.predicate.EquatableValueSet"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( type ,     \" type   is   null \"  )  ;", "Objects . requireNonNull ( value ,     \" value   is   null \"  )  ;", "return    . create ( type ,    Optional . of ( value )  ,     . Bound . ABOVE )  ;", "}", "METHOD_END"], "methodName": ["above"], "fileName": "com.facebook.presto.spi.predicate.Marker"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( type ,     \" type   is   null \"  )  ;", "Objects . requireNonNull ( value ,     \" value   is   null \"  )  ;", "return    . create ( type ,    Optional . of ( value )  ,     . Bound . BELOW )  ;", "}", "METHOD_END"], "methodName": ["below"], "fileName": "com.facebook.presto.spi.predicate.Marker"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( type . equals ( marker . getType (  )  )  )  )     {", "throw   new   IllegalArgumentException ( String . format (  \" Mismatched      types :     % s   vs    % s \"  ,    type ,    marker . getType (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkTypeCompatibility"], "fileName": "com.facebook.presto.spi.predicate.Marker"}, {"methodBody": ["METHOD_START", "{", "return   new   Marker ( type ,    value . map (  (    object )     -  >    Utils . nativeValueToBlock ( type ,    object )  )  ,    bound )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "com.facebook.presto.spi.predicate.Marker"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( type ,     \" type   is   null \"  )  ;", "Objects . requireNonNull ( value ,     \" value   is   null \"  )  ;", "return    . create ( type ,    Optional . of ( value )  ,     . Bound . EXACTLY )  ;", "}", "METHOD_END"], "methodName": ["exactly"], "fileName": "com.facebook.presto.spi.predicate.Marker"}, {"methodBody": ["METHOD_START", "{", "return   bound ;", "}", "METHOD_END"], "methodName": ["getBound"], "fileName": "com.facebook.presto.spi.predicate.Marker"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( valueBlock . isPresent (  )  )  )     {", "throw   new   IllegalStateException (  \" No   value   to   get \"  )  ;", "}", "return   type . getObjectValue ( session ,    valueBlock . get (  )  ,     0  )  ;", "}", "METHOD_END"], "methodName": ["getPrintableValue"], "fileName": "com.facebook.presto.spi.predicate.Marker"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.facebook.presto.spi.predicate.Marker"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( valueBlock . isPresent (  )  )  )     {", "throw   new   IllegalStateException (  \" No   value   to   get \"  )  ;", "}", "return   Utils . blockToNativeValue ( type ,    valueBlock . get (  )  )  ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "com.facebook.presto.spi.predicate.Marker"}, {"methodBody": ["METHOD_START", "{", "return   valueBlock ;", "}", "METHOD_END"], "methodName": ["getValueBlock"], "fileName": "com.facebook.presto.spi.predicate.Marker"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( valueBlock . isPresent (  )  )  )     {", "throw   new   IllegalStateException (  \" No   marker   adjacent   to   unbounded \"  )  ;", "}", "switch    ( bound )     {", "case   BELOW    :", "return   new    ( type ,    valueBlock ,     . Bound . EXACTLY )  ;", "case   EXACTLY    :", "return   new    ( type ,    valueBlock ,     . Bound . ABOVE )  ;", "case   ABOVE    :", "throw   new   IllegalStateException (  \" No   greater   marker   adjacent   to   an   ABOVE   bound \"  )  ;", "default    :", "throw   new   AssertionError (  (  \" Unsupported   type :     \"     +     ( bound )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["greaterAdjacent"], "fileName": "com.facebook.presto.spi.predicate.Marker"}, {"methodBody": ["METHOD_START", "{", "checkTypeCompatibility ( other )  ;", "if    (  (  (  ( isUpperUnbounded (  )  )     |  |     ( isLowerUnbounded (  )  )  )     |  |     ( other . isUpperUnbounded (  )  )  )     |  |     ( other . isLowerUnbounded (  )  )  )     {", "return   false ;", "}", "if    (  ( type . compareTo ( valueBlock . get (  )  ,     0  ,    other . valueBlock . get (  )  ,     0  )  )     !  =     0  )     {", "return   false ;", "}", "return    (  (  ( bound )     =  =     (  . Bound . EXACTLY )  )     &  &     (  ( other . bound )     !  =     (  . Bound . EXACTLY )  )  )     |  |     (  (  ( bound )     !  =     (  . Bound . EXACTLY )  )     &  &     (  ( other . bound )     =  =     (  . Bound . EXACTLY )  )  )  ;", "}", "METHOD_END"], "methodName": ["isAdjacent"], "fileName": "com.facebook.presto.spi.predicate.Marker"}, {"methodBody": ["METHOD_START", "{", "return    (  !  ( valueBlock . isPresent (  )  )  )     &  &     (  ( bound )     =  =     ( Marker . Bound . ABOVE )  )  ;", "}", "METHOD_END"], "methodName": ["isLowerUnbounded"], "fileName": "com.facebook.presto.spi.predicate.Marker"}, {"methodBody": ["METHOD_START", "{", "return    (  !  ( valueBlock . isPresent (  )  )  )     &  &     (  ( bound )     =  =     ( Marker . Bound . BELOW )  )  ;", "}", "METHOD_END"], "methodName": ["isUpperUnbounded"], "fileName": "com.facebook.presto.spi.predicate.Marker"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( valueBlock . isPresent (  )  )  )     {", "throw   new   IllegalStateException (  \" No   marker   adjacent   to   unbounded \"  )  ;", "}", "switch    ( bound )     {", "case   BELOW    :", "throw   new   IllegalStateException (  \" No   lesser   marker   adjacent   to   a   BELOW   bound \"  )  ;", "case   EXACTLY    :", "return   new    ( type ,    valueBlock ,     . Bound . BELOW )  ;", "case   ABOVE    :", "return   new    ( type ,    valueBlock ,     . Bound . EXACTLY )  ;", "default    :", "throw   new   AssertionError (  (  \" Unsupported   type :     \"     +     ( bound )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["lesserAdjacent"], "fileName": "com.facebook.presto.spi.predicate.Marker"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( type ,     \" type   is   null \"  )  ;", "return    . create ( type ,    Optional . empty (  )  ,     . Bound . ABOVE )  ;", "}", "METHOD_END"], "methodName": ["lowerUnbounded"], "fileName": "com.facebook.presto.spi.predicate.Marker"}, {"methodBody": ["METHOD_START", "{", "return    ( marker 1  . compareTo ( marker 2  )  )     >  =     0     ?    marker 1     :    marker 2  ;", "}", "METHOD_END"], "methodName": ["max"], "fileName": "com.facebook.presto.spi.predicate.Marker"}, {"methodBody": ["METHOD_START", "{", "return    ( marker 1  . compareTo ( marker 2  )  )     <  =     0     ?    marker 1     :    marker 2  ;", "}", "METHOD_END"], "methodName": ["min"], "fileName": "com.facebook.presto.spi.predicate.Marker"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   buffer    =    new   StringBuilder (  \"  {  \"  )  ;", "buffer . append (  \" type =  \"  )  . append ( type )  ;", "buffer . append (  \"  ,    value =  \"  )  ;", "if    ( isLowerUnbounded (  )  )     {", "buffer . append (  \"  < min >  \"  )  ;", "} else", "if    ( isUpperUnbounded (  )  )     {", "buffer . append (  \"  < max >  \"  )  ;", "} else    {", "buffer . append ( getPrintableValue ( session )  )  ;", "}", "buffer . append (  \"  ,    bound =  \"  )  . append ( bound )  ;", "buffer . append (  \"  }  \"  )  ;", "return   buffer . toString (  )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "com.facebook.presto.spi.predicate.Marker"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( type ,     \" type   is   null \"  )  ;", "return    . create ( type ,    Optional . empty (  )  ,     . Bound . BELOW )  ;", "}", "METHOD_END"], "methodName": ["upperUnbounded"], "fileName": "com.facebook.presto.spi.predicate.Marker"}, {"methodBody": ["METHOD_START", "{", "return   Utils . nativeValueToBlock ( type ,    value )  ;", "}", "METHOD_END"], "methodName": ["asBlock"], "fileName": "com.facebook.presto.spi.predicate.NullableValue"}, {"methodBody": ["METHOD_START", "{", "return   new   NullableValue ( type ,    null )  ;", "}", "METHOD_END"], "methodName": ["asNull"], "fileName": "com.facebook.presto.spi.predicate.NullableValue"}, {"methodBody": ["METHOD_START", "{", "Type   type    =    serializable . getType (  )  ;", "Block   block    =    serializable . getBlock (  )  ;", "return   new    ( type ,     ( block    =  =    null    ?    null    :    Utils . blockToNativeValue ( type ,    block )  )  )  ;", "}", "METHOD_END"], "methodName": ["fromSerializable"], "fileName": "com.facebook.presto.spi.predicate.NullableValue"}, {"methodBody": ["METHOD_START", "{", "return   new   NullableValue . Serializable ( type ,     (  ( value )     =  =    null    ?    null    :    Utils . nativeValueToBlock ( type ,    value )  )  )  ;", "}", "METHOD_END"], "methodName": ["getSerializable"], "fileName": "com.facebook.presto.spi.predicate.NullableValue"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.facebook.presto.spi.predicate.NullableValue"}, {"methodBody": ["METHOD_START", "{", "return   value ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "com.facebook.presto.spi.predicate.NullableValue"}, {"methodBody": ["METHOD_START", "{", "return    ( value )     =  =    null ;", "}", "METHOD_END"], "methodName": ["isNull"], "fileName": "com.facebook.presto.spi.predicate.NullableValue"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( value ,     \" value   is   null \"  )  ;", "return   new    ( type ,    value )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "com.facebook.presto.spi.predicate.NullableValue"}, {"methodBody": ["METHOD_START", "{", "forward . put ( key ,    value )  ;", "backward . put ( value ,    key )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.facebook.presto.spi.predicate.Primitives"}, {"methodBody": ["METHOD_START", "{", "return   Primitives . PRIMITIVE _ TO _ WRAPPER _ TYPE . keySet (  )  ;", "}", "METHOD_END"], "methodName": ["allPrimitiveTypes"], "fileName": "com.facebook.presto.spi.predicate.Primitives"}, {"methodBody": ["METHOD_START", "{", "return   Primitives . WRAPPER _ TO _ PRIMITIVE _ TYPE . keySet (  )  ;", "}", "METHOD_END"], "methodName": ["allWrapperTypes"], "fileName": "com.facebook.presto.spi.predicate.Primitives"}, {"methodBody": ["METHOD_START", "{", "return   Primitives . WRAPPER _ TO _ PRIMITIVE _ TYPE . containsKey ( Objects . requireNonNull ( type )  )  ;", "}", "METHOD_END"], "methodName": ["isWrapperType"], "fileName": "com.facebook.presto.spi.predicate.Primitives"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( type )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "Class < T >    unwrapped    =     (  ( Class < T >  )     (  . WRAPPER _ TO _ PRIMITIVE _ TYPE . get ( type )  )  )  ;", "return   unwrapped    =  =    null    ?    type    :    unwrapped ;", "}", "METHOD_END"], "methodName": ["unwrap"], "fileName": "com.facebook.presto.spi.predicate.Primitives"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( type )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "Class < T >    wrapped    =     (  ( Class < T >  )     (  . PRIMITIVE _ TO _ WRAPPER _ TYPE . get ( type )  )  )  ;", "return   wrapped    =  =    null    ?    type    :    wrapped ;", "}", "METHOD_END"], "methodName": ["wrap"], "fileName": "com.facebook.presto.spi.predicate.Primitives"}, {"methodBody": ["METHOD_START", "{", "return   new   Range ( Marker . lowerUnbounded ( type )  ,    Marker . upperUnbounded ( type )  )  ;", "}", "METHOD_END"], "methodName": ["all"], "fileName": "com.facebook.presto.spi.predicate.Range"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( getType (  )  . equals ( marker . getType (  )  )  )  )     {", "throw   new   IllegalArgumentException ( String . format (  \" Marker   of    % s   does   not   match      of    % s \"  ,    marker . getType (  )  ,    getType (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkTypeCompatibility"], "fileName": "com.facebook.presto.spi.predicate.Range"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( getType (  )  . equals ( range . getType (  )  )  )  )     {", "throw   new   IllegalArgumentException ( String . format (  \" Mismatched      types :     % s   vs    % s \"  ,    getType (  )  ,    range . getType (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkTypeCompatibility"], "fileName": "com.facebook.presto.spi.predicate.Range"}, {"methodBody": ["METHOD_START", "{", "checkTypeCompatibility ( other )  ;", "return    (  ( this . getLow (  )  . pareTo ( other . getLow (  )  )  )     <  =     0  )     &  &     (  ( this . getHigh (  )  . pareTo ( other . getHigh (  )  )  )     >  =     0  )  ;", "}", "METHOD_END"], "methodName": ["contains"], "fileName": "com.facebook.presto.spi.predicate.Range"}, {"methodBody": ["METHOD_START", "{", "return   new   Range ( Marker . exactly ( type ,    value )  ,    Marker . exactly ( type ,    value )  )  ;", "}", "METHOD_END"], "methodName": ["equal"], "fileName": "com.facebook.presto.spi.predicate.Range"}, {"methodBody": ["METHOD_START", "{", "return   high ;", "}", "METHOD_END"], "methodName": ["getHigh"], "fileName": "com.facebook.presto.spi.predicate.Range"}, {"methodBody": ["METHOD_START", "{", "return   low ;", "}", "METHOD_END"], "methodName": ["getLow"], "fileName": "com.facebook.presto.spi.predicate.Range"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isSingleValue (  )  )  )     {", "throw   new   IllegalStateException (  \"    does   not   have   just   a   single   value \"  )  ;", "}", "return   low . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["getSingleValue"], "fileName": "com.facebook.presto.spi.predicate.Range"}, {"methodBody": ["METHOD_START", "{", "return   low . getType (  )  ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.facebook.presto.spi.predicate.Range"}, {"methodBody": ["METHOD_START", "{", "return   new   Range ( Marker . above ( type ,    low )  ,    Marker . upperUnbounded ( type )  )  ;", "}", "METHOD_END"], "methodName": ["greaterThan"], "fileName": "com.facebook.presto.spi.predicate.Range"}, {"methodBody": ["METHOD_START", "{", "return   new   Range ( Marker . exactly ( type ,    low )  ,    Marker . upperUnbounded ( type )  )  ;", "}", "METHOD_END"], "methodName": ["greaterThanOrEqual"], "fileName": "com.facebook.presto.spi.predicate.Range"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( marker ,     \" marker   is   null \"  )  ;", "checkTypeCompatibility ( marker )  ;", "return    (  ( low . pareTo ( marker )  )     <  =     0  )     &  &     (  ( high . pareTo ( marker )  )     >  =     0  )  ;", "}", "METHOD_END"], "methodName": ["includes"], "fileName": "com.facebook.presto.spi.predicate.Range"}, {"methodBody": ["METHOD_START", "{", "checkTypeCompatibility ( other )  ;", "if    (  !  ( this . overlaps ( other )  )  )     {", "throw   new   IllegalArgumentException (  \" Cannot   intersect   non - overlapping   ranges \"  )  ;", "}", "Marker   lowMarker    =    Marker . max ( low ,    other . getLow (  )  )  ;", "Marker   highMarker    =    Marker . min ( high ,    other . getHigh (  )  )  ;", "return   new    ( lowMarker ,    highMarker )  ;", "}", "METHOD_END"], "methodName": ["intersect"], "fileName": "com.facebook.presto.spi.predicate.Range"}, {"methodBody": ["METHOD_START", "{", "return    ( low . isLowerUnbounded (  )  )     &  &     ( high . isUpperUnbounded (  )  )  ;", "}", "METHOD_END"], "methodName": ["isAll"], "fileName": "com.facebook.presto.spi.predicate.Range"}, {"methodBody": ["METHOD_START", "{", "return    (  ( low . getBound (  )  )     =  =     ( Marker . Bound . EXACTLY )  )     &  &     ( low . equals ( high )  )  ;", "}", "METHOD_END"], "methodName": ["isSingleValue"], "fileName": "com.facebook.presto.spi.predicate.Range"}, {"methodBody": ["METHOD_START", "{", "return   new   Range ( Marker . lowerUnbounded ( type )  ,    Marker . below ( type ,    high )  )  ;", "}", "METHOD_END"], "methodName": ["lessThan"], "fileName": "com.facebook.presto.spi.predicate.Range"}, {"methodBody": ["METHOD_START", "{", "return   new   Range ( Marker . lowerUnbounded ( type )  ,    Marker . exactly ( type ,    high )  )  ;", "}", "METHOD_END"], "methodName": ["lessThanOrEqual"], "fileName": "com.facebook.presto.spi.predicate.Range"}, {"methodBody": ["METHOD_START", "{", "checkTypeCompatibility ( other )  ;", "return    (  ( this . getLow (  )  . pareTo ( other . getHigh (  )  )  )     <  =     0  )     &  &     (  ( other . getLow (  )  . pareTo ( this . getHigh (  )  )  )     <  =     0  )  ;", "}", "METHOD_END"], "methodName": ["overlaps"], "fileName": "com.facebook.presto.spi.predicate.Range"}, {"methodBody": ["METHOD_START", "{", "Marker   lowMarker    =     ( lowInclusive )     ?    Marker . exactly ( type ,    low )     :    Marker . above ( type ,    low )  ;", "Marker   highMarker    =     ( highInclusive )     ?    Marker . exactly ( type ,    high )     :    Marker . below ( type ,    high )  ;", "return   new    ( lowMarker ,    highMarker )  ;", "}", "METHOD_END"], "methodName": ["range"], "fileName": "com.facebook.presto.spi.predicate.Range"}, {"methodBody": ["METHOD_START", "{", "checkTypeCompatibility ( other )  ;", "Marker   lowMarker    =    Marker . min ( low ,    other . getLow (  )  )  ;", "Marker   highMarker    =    Marker . max ( high ,    other . getHigh (  )  )  ;", "return   new    ( lowMarker ,    highMarker )  ;", "}", "METHOD_END"], "methodName": ["span"], "fileName": "com.facebook.presto.spi.predicate.Range"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   buffer    =    new   StringBuilder (  )  ;", "if    ( isSingleValue (  )  )     {", "buffer . append (  '  [  '  )  . append ( low . getPrintableValue ( session )  )  . append (  '  ]  '  )  ;", "} else    {", "buffer . append (  (  ( low . getBound (  )  )     =  =     ( Marker . Bound . EXACTLY )     ?     '  [  '     :     '  (  '  )  )  ;", "buffer . append (  ( low . isLowerUnbounded (  )     ?     \"  < min >  \"     :    low . getPrintableValue ( session )  )  )  ;", "buffer . append (  \"  ,     \"  )  ;", "buffer . append (  ( high . isUpperUnbounded (  )     ?     \"  < max >  \"     :    high . getPrintableValue ( session )  )  )  ;", "buffer . append (  (  ( high . getBound (  )  )     =  =     ( Marker . Bound . EXACTLY )     ?     '  ]  '     :     '  )  '  )  )  ;", "}", "return   buffer . toString (  )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "com.facebook.presto.spi.predicate.Range"}, {"methodBody": ["METHOD_START", "{", "return   SortedRangeSet . copyOf ( type ,    Collections . singletonList ( Range . all ( type )  )  )  ;", "}", "METHOD_END"], "methodName": ["all"], "fileName": "com.facebook.presto.spi.predicate.SortedRangeSet"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( getType (  )  . equals ( other . getType (  )  )  )  )     {", "throw   new   IllegalStateException ( String . format (  \" Mismatched   types :     % s   vs    % s \"  ,    getType (  )  ,    other . getType (  )  )  )  ;", "}", "if    (  !  ( other   instanceof    )  )     {", "throw   new   IllegalStateException ( String . format (  \" ValueSet   is   not   a    :     % s \"  ,    other . getClass (  )  )  )  ;", "}", "return    (  (  )     ( other )  )  ;", "}", "METHOD_END"], "methodName": ["checkCompatibility"], "fileName": "com.facebook.presto.spi.predicate.SortedRangeSet"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( getType (  )  . equals ( marker . getType (  )  )  )  )     {", "throw   new   IllegalStateException ( String . format (  \" Marker   of    % s   does   not   match      of    % s \"  ,    marker . getType (  )  ,    getType (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkTypeCompatibility"], "fileName": "com.facebook.presto.spi.predicate.SortedRangeSet"}, {"methodBody": ["METHOD_START", "{", "return   new   SortedRangeSet . Builder ( type )  . addAll ( ranges )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["copyOf"], "fileName": "com.facebook.presto.spi.predicate.SortedRangeSet"}, {"methodBody": ["METHOD_START", "{", "return   SortedRangeSet . copyOf ( type ,     (  ( Iterable < Range >  )     ( ranges )  )  )  ;", "}", "METHOD_END"], "methodName": ["copyOf"], "fileName": "com.facebook.presto.spi.predicate.SortedRangeSet"}, {"methodBody": ["METHOD_START", "{", "return   new   ArrayList <  >  ( lowIndexedRanges . values (  )  )  ;", "}", "METHOD_END"], "methodName": ["getOrderedRanges"], "fileName": "com.facebook.presto.spi.predicate.SortedRangeSet"}, {"methodBody": ["METHOD_START", "{", "return   lowIndexedRanges . size (  )  ;", "}", "METHOD_END"], "methodName": ["getRangeCount"], "fileName": "com.facebook.presto.spi.predicate.SortedRangeSet"}, {"methodBody": ["METHOD_START", "{", "if    ( lowIndexedRanges . isEmpty (  )  )     {", "throw   new   IllegalStateException (  \" Can   not   get   span   if   no   ranges   exist \"  )  ;", "}", "return   lowIndexedRanges . firstEntry (  )  . getValue (  )  . span ( lowIndexedRanges . lastEntry (  )  . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["getSpan"], "fileName": "com.facebook.presto.spi.predicate.SortedRangeSet"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( marker ,     \" marker   is   null \"  )  ;", "checkTypeCompatibility ( marker )  ;", "Map . Entry < Marker ,    Range >    floorEntry    =    lowIndexs . floorEntry ( marker )  ;", "return    ( floorEntry    !  =    null )     &  &     ( floorEntry . getValue (  )  . includes ( marker )  )  ;", "}", "METHOD_END"], "methodName": ["includesMarker"], "fileName": "com.facebook.presto.spi.predicate.SortedRangeSet"}, {"methodBody": ["METHOD_START", "{", "return   SortedRangeSet . copyOf ( type ,    Collections . emptyList (  )  )  ;", "}", "METHOD_END"], "methodName": ["none"], "fileName": "com.facebook.presto.spi.predicate.SortedRangeSet"}, {"methodBody": ["METHOD_START", "{", "List < Range >    rangeList    =    new   ArrayList <  >  (  (  ( rest . length )     +     1  )  )  ;", "rangeList . add ( first )  ;", "for    ( Range   range    :    rest )     {", "rangeList . add ( range )  ;", "}", "return    . copyOf ( first . getType (  )  ,    rangeList )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "com.facebook.presto.spi.predicate.SortedRangeSet"}, {"methodBody": ["METHOD_START", "{", "List < Range >    ranges    =    new   ArrayList <  >  (  (  ( rest . length )     +     1  )  )  ;", "ranges . add ( Range . equal ( type ,    first )  )  ;", "for    ( Object   value    :    rest )     {", "ranges . add ( Range . equal ( type ,    value )  )  ;", "}", "return    . copyOf ( type ,    ranges )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "com.facebook.presto.spi.predicate.SortedRangeSet"}, {"methodBody": ["METHOD_START", "{", "AllOrNoneValueSet   valueSet    =    AllOrNoneValueSet . all ( HyperLogLogType . HYPER _ LOG _ LOG )  ;", "assertEquals ( valueSet . getType (  )  ,    HyperLogLogType . HYPER _ LOG _ LOG )  ;", "assertFalse ( valueSet . isNone (  )  )  ;", "assertTrue ( valueSet . isAll (  )  )  ;", "assertFalse ( valueSet . isSingleValue (  )  )  ;", "assertTrue ( valueSet . containsValue ( EMPTY _ SLICE )  )  ;", "try    {", "valueSet . getSingleValue (  )  ;", "fail (  )  ;", "}    catch    ( Exception   ignored )     {", "}", "}", "METHOD_END"], "methodName": ["testAll"], "fileName": "com.facebook.presto.spi.predicate.TestAllOrNoneValueSet"}, {"methodBody": ["METHOD_START", "{", "AllOrNoneValueSet   all    =    AllOrNoneValueSet . all ( HyperLogLogType . HYPER _ LOG _ LOG )  ;", "AllOrNoneValueSet   none    =    AllOrNoneValueSet . none ( HyperLogLogType . HYPER _ LOG _ LOG )  ;", "assertEquals ( all . complement (  )  ,    none )  ;", "assertEquals ( none . complement (  )  ,    all )  ;", "}", "METHOD_END"], "methodName": ["testComplement"], "fileName": "com.facebook.presto.spi.predicate.TestAllOrNoneValueSet"}, {"methodBody": ["METHOD_START", "{", "AllOrNoneValueSet   all    =    AllOrNoneValueSet . all ( HyperLogLogType . HYPER _ LOG _ LOG )  ;", "AllOrNoneValueSet   none    =    AllOrNoneValueSet . none ( HyperLogLogType . HYPER _ LOG _ LOG )  ;", "assertTrue ( all . contains ( all )  )  ;", "assertTrue ( all . contains ( none )  )  ;", "assertFalse ( none . contains ( all )  )  ;", "assertTrue ( none . contains ( none )  )  ;", "}", "METHOD_END"], "methodName": ["testContains"], "fileName": "com.facebook.presto.spi.predicate.TestAllOrNoneValueSet"}, {"methodBody": ["METHOD_START", "{", "AllOrNoneValueSet   all    =    AllOrNoneValueSet . all ( HyperLogLogType . HYPER _ LOG _ LOG )  ;", "AllOrNoneValueSet   none    =    AllOrNoneValueSet . none ( HyperLogLogType . HYPER _ LOG _ LOG )  ;", "assertEquals ( all . intersect ( all )  ,    all )  ;", "assertEquals ( all . intersect ( none )  ,    none )  ;", "assertEquals ( none . intersect ( all )  ,    none )  ;", "assertEquals ( none . intersect ( none )  ,    none )  ;", "}", "METHOD_END"], "methodName": ["testIntersect"], "fileName": "com.facebook.presto.spi.predicate.TestAllOrNoneValueSet"}, {"methodBody": ["METHOD_START", "{", "TestingTypeManager   typeManager    =    new   TestingTypeManager (  )  ;", "ObjectMapper   mapper    =    new   ObjectMapperProvider (  )  . get (  )  . registerModule ( new   SimpleModule (  )  . addDeserializer ( Type . class ,    new   TestingTypeDeserializer ( typeManager )  )  )  ;", "all    =     . all ( HyperLogLogType . HYPER _ LOG _ LOG )  ;", "assertEquals ( all ,    mapper . readValue ( mapper . writeValueAsString ( all )  ,     . class )  )  ;", "none    =     . none ( HyperLogLogType . HYPER _ LOG _ LOG )  ;", "assertEquals ( none ,    mapper . readValue ( mapper . writeValueAsString ( none )  ,     . class )  )  ;", "}", "METHOD_END"], "methodName": ["testJsonSerialization"], "fileName": "com.facebook.presto.spi.predicate.TestAllOrNoneValueSet"}, {"methodBody": ["METHOD_START", "{", "AllOrNoneValueSet   valueSet    =    AllOrNoneValueSet . none ( HyperLogLogType . HYPER _ LOG _ LOG )  ;", "assertEquals ( valueSet . getType (  )  ,    HyperLogLogType . HYPER _ LOG _ LOG )  ;", "assertTrue ( valueSet . isNone (  )  )  ;", "assertFalse ( valueSet . isAll (  )  )  ;", "assertFalse ( valueSet . isSingleValue (  )  )  ;", "assertFalse ( valueSet . containsValue ( EMPTY _ SLICE )  )  ;", "try    {", "valueSet . getSingleValue (  )  ;", "fail (  )  ;", "}    catch    ( Exception   ignored )     {", "}", "}", "METHOD_END"], "methodName": ["testNone"], "fileName": "com.facebook.presto.spi.predicate.TestAllOrNoneValueSet"}, {"methodBody": ["METHOD_START", "{", "AllOrNoneValueSet   all    =    AllOrNoneValueSet . all ( HyperLogLogType . HYPER _ LOG _ LOG )  ;", "AllOrNoneValueSet   none    =    AllOrNoneValueSet . none ( HyperLogLogType . HYPER _ LOG _ LOG )  ;", "assertTrue ( all . overlaps ( all )  )  ;", "assertFalse ( all . overlaps ( none )  )  ;", "assertFalse ( none . overlaps ( all )  )  ;", "assertFalse ( none . overlaps ( none )  )  ;", "}", "METHOD_END"], "methodName": ["testOverlaps"], "fileName": "com.facebook.presto.spi.predicate.TestAllOrNoneValueSet"}, {"methodBody": ["METHOD_START", "{", "AllOrNoneValueSet   all    =    AllOrNoneValueSet . all ( HyperLogLogType . HYPER _ LOG _ LOG )  ;", "AllOrNoneValueSet   none    =    AllOrNoneValueSet . none ( HyperLogLogType . HYPER _ LOG _ LOG )  ;", "assertEquals ( all . subtract ( all )  ,    none )  ;", "assertEquals ( all . subtract ( none )  ,    all )  ;", "assertEquals ( none . subtract ( all )  ,    none )  ;", "assertEquals ( none . subtract ( none )  ,    none )  ;", "}", "METHOD_END"], "methodName": ["testSubtract"], "fileName": "com.facebook.presto.spi.predicate.TestAllOrNoneValueSet"}, {"methodBody": ["METHOD_START", "{", "AllOrNoneValueSet   all    =    AllOrNoneValueSet . all ( HyperLogLogType . HYPER _ LOG _ LOG )  ;", "AllOrNoneValueSet   none    =    AllOrNoneValueSet . none ( HyperLogLogType . HYPER _ LOG _ LOG )  ;", "assertEquals ( all . union ( all )  ,    all )  ;", "assertEquals ( all . union ( none )  ,    all )  ;", "assertEquals ( none . union ( all )  ,    all )  ;", "assertEquals ( none . union ( none )  ,    none )  ;", "}", "METHOD_END"], "methodName": ["testUnion"], "fileName": "com.facebook.presto.spi.predicate.TestAllOrNoneValueSet"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( first . union ( second )  ,    expected )  ;", "assertEquals (  . union ( ImmutableList . of ( first ,    second )  )  ,    expected )  ;", "}", "METHOD_END"], "methodName": ["assertUnion"], "fileName": "com.facebook.presto.spi.predicate.TestDomain"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( Domain . all ( BigintType . BIGINT )  . contains ( Domain . all ( BigintType . BIGINT )  )  )  ;", "assertTrue ( Domain . all ( BigintType . BIGINT )  . contains ( Domain . none ( BigintType . BIGINT )  )  )  ;", "assertTrue ( Domain . all ( BigintType . BIGINT )  . contains ( Domain . notNull ( BigintType . BIGINT )  )  )  ;", "assertTrue ( Domain . all ( BigintType . BIGINT )  . contains ( Domain . onlyNull ( BigintType . BIGINT )  )  )  ;", "assertTrue ( Domain . all ( BigintType . BIGINT )  . contains ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertFalse ( Domain . none ( BigintType . BIGINT )  . contains ( Domain . all ( BigintType . BIGINT )  )  )  ;", "assertTrue ( Domain . none ( BigintType . BIGINT )  . contains ( Domain . none ( BigintType . BIGINT )  )  )  ;", "assertFalse ( Domain . none ( BigintType . BIGINT )  . contains ( Domain . notNull ( BigintType . BIGINT )  )  )  ;", "assertFalse ( Domain . none ( BigintType . BIGINT )  . contains ( Domain . onlyNull ( BigintType . BIGINT )  )  )  ;", "assertFalse ( Domain . none ( BigintType . BIGINT )  . contains ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertFalse ( Domain . notNull ( BigintType . BIGINT )  . contains ( Domain . all ( BigintType . BIGINT )  )  )  ;", "assertTrue ( Domain . notNull ( BigintType . BIGINT )  . contains ( Domain . none ( BigintType . BIGINT )  )  )  ;", "assertTrue ( Domain . notNull ( BigintType . BIGINT )  . contains ( Domain . notNull ( BigintType . BIGINT )  )  )  ;", "assertFalse ( Domain . notNull ( BigintType . BIGINT )  . contains ( Domain . onlyNull ( BigintType . BIGINT )  )  )  ;", "assertTrue ( Domain . notNull ( BigintType . BIGINT )  . contains ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertFalse ( Domain . onlyNull ( BigintType . BIGINT )  . contains ( Domain . all ( BigintType . BIGINT )  )  )  ;", "assertTrue ( Domain . onlyNull ( BigintType . BIGINT )  . contains ( Domain . none ( BigintType . BIGINT )  )  )  ;", "assertFalse ( Domain . onlyNull ( BigintType . BIGINT )  . contains ( Domain . notNull ( BigintType . BIGINT )  )  )  ;", "assertTrue ( Domain . onlyNull ( BigintType . BIGINT )  . contains ( Domain . onlyNull ( BigintType . BIGINT )  )  )  ;", "assertFalse ( Domain . onlyNull ( BigintType . BIGINT )  . contains ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertFalse ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  . contains ( Domain . all ( BigintType . BIGINT )  )  )  ;", "assertTrue ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  . contains ( Domain . none ( BigintType . BIGINT )  )  )  ;", "assertFalse ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  . contains ( Domain . notNull ( BigintType . BIGINT )  )  )  ;", "assertFalse ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  . contains ( Domain . onlyNull ( BigintType . BIGINT )  )  )  ;", "assertTrue ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  . contains ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  )  ;", "}", "METHOD_END"], "methodName": ["testContains"], "fileName": "com.facebook.presto.spi.predicate.TestDomain"}, {"methodBody": ["METHOD_START", "{", "Domain   domain    =    Domain . all ( TestingIdType . ID )  ;", "assertFalse ( domain . isNone (  )  )  ;", "assertTrue ( domain . isAll (  )  )  ;", "assertFalse ( domain . isSingleValue (  )  )  ;", "assertFalse ( domain . isNullableSingleValue (  )  )  ;", "assertFalse ( domain . isOnlyNull (  )  )  ;", "assertTrue ( domain . isNullAllowed (  )  )  ;", "assertEquals ( domain . getValues (  )  ,    ValueSet . all ( TestingIdType . ID )  )  ;", "assertEquals ( domain . getType (  )  ,    TestingIdType . ID )  ;", "assertTrue ( domain . includesNullableValue (  0 L )  )  ;", "assertTrue ( domain . includesNullableValue ( null )  )  ;", "assertEquals ( domain . complement (  )  ,    Domain . none ( TestingIdType . ID )  )  ;", "}", "METHOD_END"], "methodName": ["testEquatableAll"], "fileName": "com.facebook.presto.spi.predicate.TestDomain"}, {"methodBody": ["METHOD_START", "{", "Domain   domain    =    Domain . none ( TestingIdType . ID )  ;", "assertTrue ( domain . isNone (  )  )  ;", "assertFalse ( domain . isAll (  )  )  ;", "assertFalse ( domain . isSingleValue (  )  )  ;", "assertFalse ( domain . isNullableSingleValue (  )  )  ;", "assertFalse ( domain . isNullAllowed (  )  )  ;", "assertEquals ( domain . getValues (  )  ,    ValueSet . none ( TestingIdType . ID )  )  ;", "assertEquals ( domain . getType (  )  ,    TestingIdType . ID )  ;", "assertFalse ( domain . includesNullableValue (  0 L )  )  ;", "assertFalse ( domain . includesNullableValue ( null )  )  ;", "assertEquals ( domain . complement (  )  ,    Domain . all ( TestingIdType . ID )  )  ;", "}", "METHOD_END"], "methodName": ["testEquatableNone"], "fileName": "com.facebook.presto.spi.predicate.TestDomain"}, {"methodBody": ["METHOD_START", "{", "Domain   domain    =    Domain . notNull ( TestingIdType . ID )  ;", "assertFalse ( domain . isNone (  )  )  ;", "assertFalse ( domain . isAll (  )  )  ;", "assertFalse ( domain . isSingleValue (  )  )  ;", "assertFalse ( domain . isNullableSingleValue (  )  )  ;", "assertFalse ( domain . isOnlyNull (  )  )  ;", "assertFalse ( domain . isNullAllowed (  )  )  ;", "assertEquals ( domain . getValues (  )  ,    ValueSet . all ( TestingIdType . ID )  )  ;", "assertEquals ( domain . getType (  )  ,    TestingIdType . ID )  ;", "assertTrue ( domain . includesNullableValue (  0 L )  )  ;", "assertFalse ( domain . includesNullableValue ( null )  )  ;", "assertEquals ( domain . complement (  )  ,    Domain . onlyNull ( TestingIdType . ID )  )  ;", "}", "METHOD_END"], "methodName": ["testEquatableNotNull"], "fileName": "com.facebook.presto.spi.predicate.TestDomain"}, {"methodBody": ["METHOD_START", "{", "Domain   domain    =    Domain . onlyNull ( TestingIdType . ID )  ;", "assertFalse ( domain . isNone (  )  )  ;", "assertFalse ( domain . isAll (  )  )  ;", "assertFalse ( domain . isSingleValue (  )  )  ;", "assertTrue ( domain . isNullableSingleValue (  )  )  ;", "assertTrue ( domain . isOnlyNull (  )  )  ;", "assertTrue ( domain . isNullAllowed (  )  )  ;", "assertEquals ( domain . getValues (  )  ,    ValueSet . none ( TestingIdType . ID )  )  ;", "assertEquals ( domain . getType (  )  ,    TestingIdType . ID )  ;", "assertFalse ( domain . includesNullableValue (  0 L )  )  ;", "assertTrue ( domain . includesNullableValue ( null )  )  ;", "assertEquals ( domain . complement (  )  ,    Domain . notNull ( TestingIdType . ID )  )  ;", "assertEquals ( domain . getNullableSingleValue (  )  ,    null )  ;", "}", "METHOD_END"], "methodName": ["testEquatableNullOnly"], "fileName": "com.facebook.presto.spi.predicate.TestDomain"}, {"methodBody": ["METHOD_START", "{", "Domain   domain    =    Domain . singleValue ( TestingIdType . ID ,     0 L )  ;", "assertFalse ( domain . isNone (  )  )  ;", "assertFalse ( domain . isAll (  )  )  ;", "assertTrue ( domain . isSingleValue (  )  )  ;", "assertTrue ( domain . isNullableSingleValue (  )  )  ;", "assertFalse ( domain . isOnlyNull (  )  )  ;", "assertFalse ( domain . isNullAllowed (  )  )  ;", "assertEquals ( domain . getValues (  )  ,    ValueSet . of ( TestingIdType . ID ,     0 L )  )  ;", "assertEquals ( domain . getType (  )  ,    TestingIdType . ID )  ;", "assertTrue ( domain . includesNullableValue (  0 L )  )  ;", "assertFalse ( domain . includesNullableValue ( null )  )  ;", "assertEquals ( domain . complement (  )  ,    Domain . create ( ValueSet . of ( TestingIdType . ID ,     0 L )  . complement (  )  ,    true )  )  ;", "assertEquals ( domain . getSingleValue (  )  ,     0 L )  ;", "assertEquals ( domain . getNullableSingleValue (  )  ,     0 L )  ;", "try    {", "Domain . create ( ValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  ,    false )  . getSingleValue (  )  ;", "fail (  )  ;", "}    catch    ( IllegalStateException   e )     {", "}", "}", "METHOD_END"], "methodName": ["testEquatableSingleValue"], "fileName": "com.facebook.presto.spi.predicate.TestDomain"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( Domain . all ( BigintType . BIGINT )  . intersect ( Domain . all ( BigintType . BIGINT )  )  ,    Domain . all ( BigintType . BIGINT )  )  ;", "assertEquals ( Domain . none ( BigintType . BIGINT )  . intersect ( Domain . none ( BigintType . BIGINT )  )  ,    Domain . none ( BigintType . BIGINT )  )  ;", "assertEquals ( Domain . all ( BigintType . BIGINT )  . intersect ( Domain . none ( BigintType . BIGINT )  )  ,    Domain . none ( BigintType . BIGINT )  )  ;", "assertEquals ( Domain . notNull ( BigintType . BIGINT )  . intersect ( Domain . onlyNull ( BigintType . BIGINT )  )  ,    Domain . none ( BigintType . BIGINT )  )  ;", "assertEquals ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  . intersect ( Domain . all ( BigintType . BIGINT )  )  ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  ;", "assertEquals ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  . intersect ( Domain . onlyNull ( BigintType . BIGINT )  )  ,    Domain . none ( BigintType . BIGINT )  )  ;", "assertEquals ( Domain . create ( ValueSet . ofRanges ( Range . equal ( BigintType . BIGINT ,     1 L )  )  ,    true )  . intersect ( Domain . create ( ValueSet . ofRanges ( Range . equal ( BigintType . BIGINT ,     2 L )  )  ,    true )  )  ,    Domain . onlyNull ( BigintType . BIGINT )  )  ;", "assertEquals ( Domain . create ( ValueSet . ofRanges ( Range . equal ( BigintType . BIGINT ,     1 L )  )  ,    true )  . intersect ( Domain . create ( ValueSet . ofRanges ( Range . equal ( BigintType . BIGINT ,     1 L )  ,    Range . equal ( BigintType . BIGINT ,     2 L )  )  ,    false )  )  ,    Domain . singleValue ( BigintType . BIGINT ,     1 L )  )  ;", "}", "METHOD_END"], "methodName": ["testIntersect"], "fileName": "com.facebook.presto.spi.predicate.TestDomain"}, {"methodBody": ["METHOD_START", "{", "TestingTypeManager   typeManager    =    new   TestingTypeManager (  )  ;", "TestingBlockEncodingSerde   blockEncodingSerde    =    new   TestingBlockEncodingSerde ( typeManager )  ;", "ObjectMapper   mapper    =    new   ObjectMapperProvider (  )  . get (  )  . registerModule ( new   SimpleModule (  )  . addDeserializer ( Type . class ,    new   TestingTypeDeserializer ( typeManager )  )  . addSerializer ( Block . class ,    new   TestingBlockJsonSerde . Serializer ( blockEncodingSerde )  )  . addDeserializer ( Block . class ,    new   TestingBlockJsonSerde . Deserializer ( blockEncodingSerde )  )  )  ;", "domain    =     . all ( BigintType . BIGINT )  ;", "assertEquals ( domain ,    mapper . readValue ( mapper . writeValueAsString ( domain )  ,     . class )  )  ;", "domain    =     . none ( DoubleType . DOUBLE )  ;", "assertEquals ( domain ,    mapper . readValue ( mapper . writeValueAsString ( domain )  ,     . class )  )  ;", "domain    =     . notNull ( BooleanType . BOOLEAN )  ;", "assertEquals ( domain ,    mapper . readValue ( mapper . writeValueAsString ( domain )  ,     . class )  )  ;", "domain    =     . notNull ( HyperLogLogType . HYPER _ LOG _ LOG )  ;", "assertEquals ( domain ,    mapper . readValue ( mapper . writeValueAsString ( domain )  ,     . class )  )  ;", "domain    =     . onlyNull ( VarcharType . VARCHAR )  ;", "assertEquals ( domain ,    mapper . readValue ( mapper . writeValueAsString ( domain )  ,     . class )  )  ;", "domain    =     . onlyNull ( HyperLogLogType . HYPER _ LOG _ LOG )  ;", "assertEquals ( domain ,    mapper . readValue ( mapper . writeValueAsString ( domain )  ,     . class )  )  ;", "domain    =     . singleValue ( BigintType . BIGINT ,    Long . MIN _ VALUE )  ;", "assertEquals ( domain ,    mapper . readValue ( mapper . writeValueAsString ( domain )  ,     . class )  )  ;", "domain    =     . singleValue ( TestingIdType . ID ,    Long . MIN _ VALUE )  ;", "assertEquals ( domain ,    mapper . readValue ( mapper . writeValueAsString ( domain )  ,     . class )  )  ;", "domain    =     . create ( ValueSet . ofRanges ( Range . lessThan ( BigintType . BIGINT ,     0 L )  ,    Range . equal ( BigintType . BIGINT ,     1 L )  ,    Range . range ( BigintType . BIGINT ,     2 L ,    true ,     3 L ,    true )  )  ,    true )  ;", "assertEquals ( domain ,    mapper . readValue ( mapper . writeValueAsString ( domain )  ,     . class )  )  ;", "}", "METHOD_END"], "methodName": ["testJsonSerialization"], "fileName": "com.facebook.presto.spi.predicate.TestDomain"}, {"methodBody": ["METHOD_START", "{", "Domain   domain    =    Domain . all ( BigintType . BIGINT )  ;", "assertFalse ( domain . isNone (  )  )  ;", "assertTrue ( domain . isAll (  )  )  ;", "assertFalse ( domain . isSingleValue (  )  )  ;", "assertFalse ( domain . isNullableSingleValue (  )  )  ;", "assertFalse ( domain . isOnlyNull (  )  )  ;", "assertTrue ( domain . isNullAllowed (  )  )  ;", "assertEquals ( domain . getValues (  )  ,    ValueSet . all ( BigintType . BIGINT )  )  ;", "assertEquals ( domain . getType (  )  ,    BigintType . BIGINT )  ;", "assertTrue ( domain . includesNullableValue ( Long . MIN _ VALUE )  )  ;", "assertTrue ( domain . includesNullableValue (  0 L )  )  ;", "assertTrue ( domain . includesNullableValue ( Long . MAX _ VALUE )  )  ;", "assertTrue ( domain . includesNullableValue ( null )  )  ;", "assertEquals ( domain . complement (  )  ,    Domain . none ( BigintType . BIGINT )  )  ;", "}", "METHOD_END"], "methodName": ["testOrderableAll"], "fileName": "com.facebook.presto.spi.predicate.TestDomain"}, {"methodBody": ["METHOD_START", "{", "Domain   domain    =    Domain . none ( BigintType . BIGINT )  ;", "assertTrue ( domain . isNone (  )  )  ;", "assertFalse ( domain . isAll (  )  )  ;", "assertFalse ( domain . isSingleValue (  )  )  ;", "assertFalse ( domain . isNullableSingleValue (  )  )  ;", "assertFalse ( domain . isNullAllowed (  )  )  ;", "assertEquals ( domain . getValues (  )  ,    ValueSet . none ( BigintType . BIGINT )  )  ;", "assertEquals ( domain . getType (  )  ,    BigintType . BIGINT )  ;", "assertFalse ( domain . includesNullableValue ( Long . MIN _ VALUE )  )  ;", "assertFalse ( domain . includesNullableValue (  0 L )  )  ;", "assertFalse ( domain . includesNullableValue ( Long . MAX _ VALUE )  )  ;", "assertFalse ( domain . includesNullableValue ( null )  )  ;", "assertEquals ( domain . complement (  )  ,    Domain . all ( BigintType . BIGINT )  )  ;", "}", "METHOD_END"], "methodName": ["testOrderableNone"], "fileName": "com.facebook.presto.spi.predicate.TestDomain"}, {"methodBody": ["METHOD_START", "{", "Domain   domain    =    Domain . notNull ( BigintType . BIGINT )  ;", "assertFalse ( domain . isNone (  )  )  ;", "assertFalse ( domain . isAll (  )  )  ;", "assertFalse ( domain . isSingleValue (  )  )  ;", "assertFalse ( domain . isNullableSingleValue (  )  )  ;", "assertFalse ( domain . isOnlyNull (  )  )  ;", "assertFalse ( domain . isNullAllowed (  )  )  ;", "assertEquals ( domain . getValues (  )  ,    ValueSet . all ( BigintType . BIGINT )  )  ;", "assertEquals ( domain . getType (  )  ,    BigintType . BIGINT )  ;", "assertTrue ( domain . includesNullableValue ( Long . MIN _ VALUE )  )  ;", "assertTrue ( domain . includesNullableValue (  0 L )  )  ;", "assertTrue ( domain . includesNullableValue ( Long . MAX _ VALUE )  )  ;", "assertFalse ( domain . includesNullableValue ( null )  )  ;", "assertEquals ( domain . complement (  )  ,    Domain . onlyNull ( BigintType . BIGINT )  )  ;", "}", "METHOD_END"], "methodName": ["testOrderableNotNull"], "fileName": "com.facebook.presto.spi.predicate.TestDomain"}, {"methodBody": ["METHOD_START", "{", "Domain   domain    =    Domain . onlyNull ( BigintType . BIGINT )  ;", "assertFalse ( domain . isNone (  )  )  ;", "assertFalse ( domain . isAll (  )  )  ;", "assertFalse ( domain . isSingleValue (  )  )  ;", "assertTrue ( domain . isNullAllowed (  )  )  ;", "assertTrue ( domain . isNullableSingleValue (  )  )  ;", "assertTrue ( domain . isOnlyNull (  )  )  ;", "assertEquals ( domain . getValues (  )  ,    ValueSet . none ( BigintType . BIGINT )  )  ;", "assertEquals ( domain . getType (  )  ,    BigintType . BIGINT )  ;", "assertFalse ( domain . includesNullableValue ( Long . MIN _ VALUE )  )  ;", "assertFalse ( domain . includesNullableValue (  0 L )  )  ;", "assertFalse ( domain . includesNullableValue ( Long . MAX _ VALUE )  )  ;", "assertTrue ( domain . includesNullableValue ( null )  )  ;", "assertEquals ( domain . complement (  )  ,    Domain . notNull ( BigintType . BIGINT )  )  ;", "assertEquals ( domain . getNullableSingleValue (  )  ,    null )  ;", "}", "METHOD_END"], "methodName": ["testOrderableNullOnly"], "fileName": "com.facebook.presto.spi.predicate.TestDomain"}, {"methodBody": ["METHOD_START", "{", "Domain   domain    =    Domain . singleValue ( BigintType . BIGINT ,     0 L )  ;", "assertFalse ( domain . isNone (  )  )  ;", "assertFalse ( domain . isAll (  )  )  ;", "assertTrue ( domain . isSingleValue (  )  )  ;", "assertTrue ( domain . isNullableSingleValue (  )  )  ;", "assertFalse ( domain . isOnlyNull (  )  )  ;", "assertFalse ( domain . isNullAllowed (  )  )  ;", "assertEquals ( domain . getValues (  )  ,    ValueSet . ofRanges ( Range . equal ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertEquals ( domain . getType (  )  ,    BigintType . BIGINT )  ;", "assertFalse ( domain . includesNullableValue ( Long . MIN _ VALUE )  )  ;", "assertTrue ( domain . includesNullableValue (  0 L )  )  ;", "assertFalse ( domain . includesNullableValue ( Long . MAX _ VALUE )  )  ;", "assertEquals ( domain . complement (  )  ,    Domain . create ( ValueSet . ofRanges ( Range . lessThan ( BigintType . BIGINT ,     0 L )  ,    Range . greaterThan ( BigintType . BIGINT ,     0 L )  )  ,    true )  )  ;", "assertEquals ( domain . getSingleValue (  )  ,     0 L )  ;", "assertEquals ( domain . getNullableSingleValue (  )  ,     0 L )  ;", "try    {", "Domain . create ( ValueSet . ofRanges ( Range . range ( BigintType . BIGINT ,     1 L ,    true ,     2 L ,    true )  )  ,    false )  . getSingleValue (  )  ;", "fail (  )  ;", "}    catch    ( IllegalStateException   e )     {", "}", "}", "METHOD_END"], "methodName": ["testOrderableSingleValue"], "fileName": "com.facebook.presto.spi.predicate.TestDomain"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( Domain . all ( BigintType . BIGINT )  . overlaps ( Domain . all ( BigintType . BIGINT )  )  )  ;", "assertFalse ( Domain . all ( BigintType . BIGINT )  . overlaps ( Domain . none ( BigintType . BIGINT )  )  )  ;", "assertTrue ( Domain . all ( BigintType . BIGINT )  . overlaps ( Domain . notNull ( BigintType . BIGINT )  )  )  ;", "assertTrue ( Domain . all ( BigintType . BIGINT )  . overlaps ( Domain . onlyNull ( BigintType . BIGINT )  )  )  ;", "assertTrue ( Domain . all ( BigintType . BIGINT )  . overlaps ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertFalse ( Domain . none ( BigintType . BIGINT )  . overlaps ( Domain . all ( BigintType . BIGINT )  )  )  ;", "assertFalse ( Domain . none ( BigintType . BIGINT )  . overlaps ( Domain . none ( BigintType . BIGINT )  )  )  ;", "assertFalse ( Domain . none ( BigintType . BIGINT )  . overlaps ( Domain . notNull ( BigintType . BIGINT )  )  )  ;", "assertFalse ( Domain . none ( BigintType . BIGINT )  . overlaps ( Domain . onlyNull ( BigintType . BIGINT )  )  )  ;", "assertFalse ( Domain . none ( BigintType . BIGINT )  . overlaps ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertTrue ( Domain . notNull ( BigintType . BIGINT )  . overlaps ( Domain . all ( BigintType . BIGINT )  )  )  ;", "assertFalse ( Domain . notNull ( BigintType . BIGINT )  . overlaps ( Domain . none ( BigintType . BIGINT )  )  )  ;", "assertTrue ( Domain . notNull ( BigintType . BIGINT )  . overlaps ( Domain . notNull ( BigintType . BIGINT )  )  )  ;", "assertFalse ( Domain . notNull ( BigintType . BIGINT )  . overlaps ( Domain . onlyNull ( BigintType . BIGINT )  )  )  ;", "assertTrue ( Domain . notNull ( BigintType . BIGINT )  . overlaps ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertTrue ( Domain . onlyNull ( BigintType . BIGINT )  . overlaps ( Domain . all ( BigintType . BIGINT )  )  )  ;", "assertFalse ( Domain . onlyNull ( BigintType . BIGINT )  . overlaps ( Domain . none ( BigintType . BIGINT )  )  )  ;", "assertFalse ( Domain . onlyNull ( BigintType . BIGINT )  . overlaps ( Domain . notNull ( BigintType . BIGINT )  )  )  ;", "assertTrue ( Domain . onlyNull ( BigintType . BIGINT )  . overlaps ( Domain . onlyNull ( BigintType . BIGINT )  )  )  ;", "assertFalse ( Domain . onlyNull ( BigintType . BIGINT )  . overlaps ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertTrue ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  . overlaps ( Domain . all ( BigintType . BIGINT )  )  )  ;", "assertFalse ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  . overlaps ( Domain . none ( BigintType . BIGINT )  )  )  ;", "assertTrue ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  . overlaps ( Domain . notNull ( BigintType . BIGINT )  )  )  ;", "assertFalse ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  . overlaps ( Domain . onlyNull ( BigintType . BIGINT )  )  )  ;", "assertTrue ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  . overlaps ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  )  ;", "}", "METHOD_END"], "methodName": ["testOverlaps"], "fileName": "com.facebook.presto.spi.predicate.TestDomain"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( Domain . all ( BigintType . BIGINT )  . subtract ( Domain . all ( BigintType . BIGINT )  )  ,    Domain . none ( BigintType . BIGINT )  )  ;", "assertEquals ( Domain . all ( BigintType . BIGINT )  . subtract ( Domain . none ( BigintType . BIGINT )  )  ,    Domain . all ( BigintType . BIGINT )  )  ;", "assertEquals ( Domain . all ( BigintType . BIGINT )  . subtract ( Domain . notNull ( BigintType . BIGINT )  )  ,    Domain . onlyNull ( BigintType . BIGINT )  )  ;", "assertEquals ( Domain . all ( BigintType . BIGINT )  . subtract ( Domain . onlyNull ( BigintType . BIGINT )  )  ,    Domain . notNull ( BigintType . BIGINT )  )  ;", "assertEquals ( Domain . all ( BigintType . BIGINT )  . subtract ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  ,    Domain . create ( ValueSet . ofRanges ( Range . lessThan ( BigintType . BIGINT ,     0 L )  ,    Range . greaterThan ( BigintType . BIGINT ,     0 L )  )  ,    true )  )  ;", "assertEquals ( Domain . none ( BigintType . BIGINT )  . subtract ( Domain . all ( BigintType . BIGINT )  )  ,    Domain . none ( BigintType . BIGINT )  )  ;", "assertEquals ( Domain . none ( BigintType . BIGINT )  . subtract ( Domain . none ( BigintType . BIGINT )  )  ,    Domain . none ( BigintType . BIGINT )  )  ;", "assertEquals ( Domain . none ( BigintType . BIGINT )  . subtract ( Domain . notNull ( BigintType . BIGINT )  )  ,    Domain . none ( BigintType . BIGINT )  )  ;", "assertEquals ( Domain . none ( BigintType . BIGINT )  . subtract ( Domain . onlyNull ( BigintType . BIGINT )  )  ,    Domain . none ( BigintType . BIGINT )  )  ;", "assertEquals ( Domain . none ( BigintType . BIGINT )  . subtract ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  ,    Domain . none ( BigintType . BIGINT )  )  ;", "assertEquals ( Domain . notNull ( BigintType . BIGINT )  . subtract ( Domain . all ( BigintType . BIGINT )  )  ,    Domain . none ( BigintType . BIGINT )  )  ;", "assertEquals ( Domain . notNull ( BigintType . BIGINT )  . subtract ( Domain . none ( BigintType . BIGINT )  )  ,    Domain . notNull ( BigintType . BIGINT )  )  ;", "assertEquals ( Domain . notNull ( BigintType . BIGINT )  . subtract ( Domain . notNull ( BigintType . BIGINT )  )  ,    Domain . none ( BigintType . BIGINT )  )  ;", "assertEquals ( Domain . notNull ( BigintType . BIGINT )  . subtract ( Domain . onlyNull ( BigintType . BIGINT )  )  ,    Domain . notNull ( BigintType . BIGINT )  )  ;", "assertEquals ( Domain . notNull ( BigintType . BIGINT )  . subtract ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  ,    Domain . create ( ValueSet . ofRanges ( Range . lessThan ( BigintType . BIGINT ,     0 L )  ,    Range . greaterThan ( BigintType . BIGINT ,     0 L )  )  ,    false )  )  ;", "assertEquals ( Domain . onlyNull ( BigintType . BIGINT )  . subtract ( Domain . all ( BigintType . BIGINT )  )  ,    Domain . none ( BigintType . BIGINT )  )  ;", "assertEquals ( Domain . onlyNull ( BigintType . BIGINT )  . subtract ( Domain . none ( BigintType . BIGINT )  )  ,    Domain . onlyNull ( BigintType . BIGINT )  )  ;", "assertEquals ( Domain . onlyNull ( BigintType . BIGINT )  . subtract ( Domain . notNull ( BigintType . BIGINT )  )  ,    Domain . onlyNull ( BigintType . BIGINT )  )  ;", "assertEquals ( Domain . onlyNull ( BigintType . BIGINT )  . subtract ( Domain . onlyNull ( BigintType . BIGINT )  )  ,    Domain . none ( BigintType . BIGINT )  )  ;", "assertEquals ( Domain . onlyNull ( BigintType . BIGINT )  . subtract ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  ,    Domain . onlyNull ( BigintType . BIGINT )  )  ;", "assertEquals ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  . subtract ( Domain . all ( BigintType . BIGINT )  )  ,    Domain . none ( BigintType . BIGINT )  )  ;", "assertEquals ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  . subtract ( Domain . none ( BigintType . BIGINT )  )  ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  ;", "assertEquals ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  . subtract ( Domain . notNull ( BigintType . BIGINT )  )  ,    Domain . none ( BigintType . BIGINT )  )  ;", "assertEquals ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  . subtract ( Domain . onlyNull ( BigintType . BIGINT )  )  ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  ;", "assertEquals ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  . subtract ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  ,    Domain . none ( BigintType . BIGINT )  )  ;", "assertEquals ( Domain . create ( ValueSet . ofRanges ( Range . equal ( BigintType . BIGINT ,     1 L )  )  ,    true )  . subtract ( Domain . create ( ValueSet . ofRanges ( Range . equal ( BigintType . BIGINT ,     2 L )  )  ,    true )  )  ,    Domain . singleValue ( BigintType . BIGINT ,     1 L )  )  ;", "assertEquals ( Domain . create ( ValueSet . ofRanges ( Range . equal ( BigintType . BIGINT ,     1 L )  )  ,    true )  . subtract ( Domain . create ( ValueSet . ofRanges ( Range . equal ( BigintType . BIGINT ,     1 L )  ,    Range . equal ( BigintType . BIGINT ,     2 L )  )  ,    false )  )  ,    Domain . onlyNull ( BigintType . BIGINT )  )  ;", "}", "METHOD_END"], "methodName": ["testSubtract"], "fileName": "com.facebook.presto.spi.predicate.TestDomain"}, {"methodBody": ["METHOD_START", "{", "Domain   domain    =    Domain . all ( HyperLogLogType . HYPER _ LOG _ LOG )  ;", "assertFalse ( domain . isNone (  )  )  ;", "assertTrue ( domain . isAll (  )  )  ;", "assertFalse ( domain . isSingleValue (  )  )  ;", "assertFalse ( domain . isNullableSingleValue (  )  )  ;", "assertFalse ( domain . isOnlyNull (  )  )  ;", "assertTrue ( domain . isNullAllowed (  )  )  ;", "assertEquals ( domain . getValues (  )  ,    ValueSet . all ( HyperLogLogType . HYPER _ LOG _ LOG )  )  ;", "assertEquals ( domain . getType (  )  ,    HyperLogLogType . HYPER _ LOG _ LOG )  ;", "assertTrue ( domain . includesNullableValue ( EMPTY _ SLICE )  )  ;", "assertTrue ( domain . includesNullableValue ( null )  )  ;", "assertEquals ( domain . complement (  )  ,    Domain . none ( HyperLogLogType . HYPER _ LOG _ LOG )  )  ;", "}", "METHOD_END"], "methodName": ["testUncomparableAll"], "fileName": "com.facebook.presto.spi.predicate.TestDomain"}, {"methodBody": ["METHOD_START", "{", "Domain   domain    =    Domain . none ( HyperLogLogType . HYPER _ LOG _ LOG )  ;", "assertTrue ( domain . isNone (  )  )  ;", "assertFalse ( domain . isAll (  )  )  ;", "assertFalse ( domain . isSingleValue (  )  )  ;", "assertFalse ( domain . isNullableSingleValue (  )  )  ;", "assertFalse ( domain . isNullAllowed (  )  )  ;", "assertEquals ( domain . getValues (  )  ,    ValueSet . none ( HyperLogLogType . HYPER _ LOG _ LOG )  )  ;", "assertEquals ( domain . getType (  )  ,    HyperLogLogType . HYPER _ LOG _ LOG )  ;", "assertFalse ( domain . includesNullableValue ( EMPTY _ SLICE )  )  ;", "assertFalse ( domain . includesNullableValue ( null )  )  ;", "assertEquals ( domain . complement (  )  ,    Domain . all ( HyperLogLogType . HYPER _ LOG _ LOG )  )  ;", "}", "METHOD_END"], "methodName": ["testUncomparableNone"], "fileName": "com.facebook.presto.spi.predicate.TestDomain"}, {"methodBody": ["METHOD_START", "{", "Domain   domain    =    Domain . notNull ( HyperLogLogType . HYPER _ LOG _ LOG )  ;", "assertFalse ( domain . isNone (  )  )  ;", "assertFalse ( domain . isAll (  )  )  ;", "assertFalse ( domain . isSingleValue (  )  )  ;", "assertFalse ( domain . isNullableSingleValue (  )  )  ;", "assertFalse ( domain . isOnlyNull (  )  )  ;", "assertFalse ( domain . isNullAllowed (  )  )  ;", "assertEquals ( domain . getValues (  )  ,    ValueSet . all ( HyperLogLogType . HYPER _ LOG _ LOG )  )  ;", "assertEquals ( domain . getType (  )  ,    HyperLogLogType . HYPER _ LOG _ LOG )  ;", "assertTrue ( domain . includesNullableValue ( EMPTY _ SLICE )  )  ;", "assertFalse ( domain . includesNullableValue ( null )  )  ;", "assertEquals ( domain . complement (  )  ,    Domain . onlyNull ( HyperLogLogType . HYPER _ LOG _ LOG )  )  ;", "}", "METHOD_END"], "methodName": ["testUncomparableNotNull"], "fileName": "com.facebook.presto.spi.predicate.TestDomain"}, {"methodBody": ["METHOD_START", "{", "Domain   domain    =    Domain . onlyNull ( HyperLogLogType . HYPER _ LOG _ LOG )  ;", "assertFalse ( domain . isNone (  )  )  ;", "assertFalse ( domain . isAll (  )  )  ;", "assertFalse ( domain . isSingleValue (  )  )  ;", "assertTrue ( domain . isNullableSingleValue (  )  )  ;", "assertTrue ( domain . isOnlyNull (  )  )  ;", "assertTrue ( domain . isNullAllowed (  )  )  ;", "assertEquals ( domain . getValues (  )  ,    ValueSet . none ( HyperLogLogType . HYPER _ LOG _ LOG )  )  ;", "assertEquals ( domain . getType (  )  ,    HyperLogLogType . HYPER _ LOG _ LOG )  ;", "assertFalse ( domain . includesNullableValue ( EMPTY _ SLICE )  )  ;", "assertTrue ( domain . includesNullableValue ( null )  )  ;", "assertEquals ( domain . complement (  )  ,    Domain . notNull ( HyperLogLogType . HYPER _ LOG _ LOG )  )  ;", "assertEquals ( domain . getNullableSingleValue (  )  ,    null )  ;", "}", "METHOD_END"], "methodName": ["testUncomparableNullOnly"], "fileName": "com.facebook.presto.spi.predicate.TestDomain"}, {"methodBody": ["METHOD_START", "{", "Domain . singleValue ( HyperLogLogType . HYPER _ LOG _ LOG ,    EMPTY _ SLICE )  ;", "}", "METHOD_END"], "methodName": ["testUncomparableSingleValue"], "fileName": "com.facebook.presto.spi.predicate.TestDomain"}, {"methodBody": ["METHOD_START", "{", "assertUnion ( Domain . all ( BigintType . BIGINT )  ,    Domain . all ( BigintType . BIGINT )  ,    Domain . all ( BigintType . BIGINT )  )  ;", "assertUnion ( Domain . none ( BigintType . BIGINT )  ,    Domain . none ( BigintType . BIGINT )  ,    Domain . none ( BigintType . BIGINT )  )  ;", "assertUnion ( Domain . all ( BigintType . BIGINT )  ,    Domain . none ( BigintType . BIGINT )  ,    Domain . all ( BigintType . BIGINT )  )  ;", "assertUnion ( Domain . notNull ( BigintType . BIGINT )  ,    Domain . onlyNull ( BigintType . BIGINT )  ,    Domain . all ( BigintType . BIGINT )  )  ;", "assertUnion ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  ,    Domain . all ( BigintType . BIGINT )  ,    Domain . all ( BigintType . BIGINT )  )  ;", "assertUnion ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  ,    Domain . notNull ( BigintType . BIGINT )  ,    Domain . notNull ( BigintType . BIGINT )  )  ;", "assertUnion ( Domain . singleValue ( BigintType . BIGINT ,     0 L )  ,    Domain . onlyNull ( BigintType . BIGINT )  ,    Domain . create ( ValueSet . ofRanges ( Range . equal ( BigintType . BIGINT ,     0 L )  )  ,    true )  )  ;", "assertUnion ( Domain . create ( ValueSet . ofRanges ( Range . equal ( BigintType . BIGINT ,     1 L )  )  ,    true )  ,    Domain . create ( ValueSet . ofRanges ( Range . equal ( BigintType . BIGINT ,     2 L )  )  ,    true )  ,    Domain . create ( ValueSet . ofRanges ( Range . equal ( BigintType . BIGINT ,     1 L )  ,    Range . equal ( BigintType . BIGINT ,     2 L )  )  ,    true )  )  ;", "assertUnion ( Domain . create ( ValueSet . ofRanges ( Range . equal ( BigintType . BIGINT ,     1 L )  )  ,    true )  ,    Domain . create ( ValueSet . ofRanges ( Range . equal ( BigintType . BIGINT ,     1 L )  ,    Range . equal ( BigintType . BIGINT ,     2 L )  )  ,    false )  ,    Domain . create ( ValueSet . ofRanges ( Range . equal ( BigintType . BIGINT ,     1 L )  ,    Range . equal ( BigintType . BIGINT ,     2 L )  )  ,    true )  )  ;", "}", "METHOD_END"], "methodName": ["testUnion"], "fileName": "com.facebook.presto.spi.predicate.TestDomain"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( EquatableValueSet . all ( TestingIdType . ID )  . contains ( EquatableValueSet . all ( TestingIdType . ID )  )  )  ;", "assertTrue ( EquatableValueSet . all ( TestingIdType . ID )  . contains ( EquatableValueSet . none ( TestingIdType . ID )  )  )  ;", "assertTrue ( EquatableValueSet . all ( TestingIdType . ID )  . contains ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  )  ;", "assertTrue ( EquatableValueSet . all ( TestingIdType . ID )  . contains ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  )  )  ;", "assertTrue ( EquatableValueSet . all ( TestingIdType . ID )  . contains ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . complement (  )  )  )  ;", "assertFalse ( EquatableValueSet . none ( TestingIdType . ID )  . contains ( EquatableValueSet . all ( TestingIdType . ID )  )  )  ;", "assertTrue ( EquatableValueSet . none ( TestingIdType . ID )  . contains ( EquatableValueSet . none ( TestingIdType . ID )  )  )  ;", "assertFalse ( EquatableValueSet . none ( TestingIdType . ID )  . contains ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  )  ;", "assertFalse ( EquatableValueSet . none ( TestingIdType . ID )  . contains ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  )  )  ;", "assertFalse ( EquatableValueSet . none ( TestingIdType . ID )  . contains ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . complement (  )  )  )  ;", "assertFalse ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . contains ( EquatableValueSet . all ( TestingIdType . ID )  )  )  ;", "assertTrue ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . contains ( EquatableValueSet . none ( TestingIdType . ID )  )  )  ;", "assertTrue ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . contains ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  )  ;", "assertFalse ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . contains ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  )  )  ;", "assertFalse ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . contains ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . complement (  )  )  )  ;", "assertFalse ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . contains ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . complement (  )  )  )  ;", "assertFalse ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . contains ( EquatableValueSet . of ( TestingIdType . ID ,     1 L )  . complement (  )  )  )  ;", "assertFalse ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . contains ( EquatableValueSet . all ( TestingIdType . ID )  )  )  ;", "assertTrue ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . contains ( EquatableValueSet . none ( TestingIdType . ID )  )  )  ;", "assertTrue ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . contains ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  )  ;", "assertTrue ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . contains ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  )  )  ;", "assertFalse ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . contains ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     2 L )  )  )  ;", "assertFalse ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . contains ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . complement (  )  )  )  ;", "assertFalse ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . contains ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . complement (  )  )  )  ;", "assertFalse ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . contains ( EquatableValueSet . of ( TestingIdType . ID ,     1 L )  . complement (  )  )  )  ;", "assertFalse ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . complement (  )  . contains ( EquatableValueSet . all ( TestingIdType . ID )  )  )  ;", "assertTrue ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . complement (  )  . contains ( EquatableValueSet . none ( TestingIdType . ID )  )  )  ;", "assertFalse ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . complement (  )  . contains ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  )  ;", "assertTrue ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . complement (  )  . contains ( EquatableValueSet . of ( TestingIdType . ID ,     (  -  1 L )  )  )  )  ;", "assertFalse ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . complement (  )  . contains ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  )  )  ;", "assertFalse ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . complement (  )  . contains ( EquatableValueSet . of ( TestingIdType . ID ,     (  -  1 L )  )  . complement (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testContains"], "fileName": "com.facebook.presto.spi.predicate.TestEquatableValueSet"}, {"methodBody": ["METHOD_START", "{", "EquatableValueSet   equatables    =    EquatableValueSet . none ( TestingIdType . ID )  ;", "assertEquals ( equatables . getType (  )  ,    TestingIdType . ID )  ;", "assertTrue ( equatables . isNone (  )  )  ;", "assertFalse ( equatables . isAll (  )  )  ;", "assertFalse ( equatables . isSingleValue (  )  )  ;", "assertTrue ( equatables . isWhiteList (  )  )  ;", "assertEquals ( equatables . getValues (  )  . size (  )  ,     0  )  ;", "assertEquals ( equatables . complement (  )  ,    EquatableValueSet . all ( TestingIdType . ID )  )  ;", "assertFalse ( equatables . containsValue (  0 L )  )  ;", "assertFalse ( equatables . containsValue (  1 L )  )  ;", "}", "METHOD_END"], "methodName": ["testEmptySet"], "fileName": "com.facebook.presto.spi.predicate.TestEquatableValueSet"}, {"methodBody": ["METHOD_START", "{", "EquatableValueSet   equatables    =    EquatableValueSet . all ( TestingIdType . ID )  ;", "assertEquals ( equatables . getType (  )  ,    TestingIdType . ID )  ;", "assertFalse ( equatables . isNone (  )  )  ;", "assertTrue ( equatables . isAll (  )  )  ;", "assertFalse ( equatables . isSingleValue (  )  )  ;", "assertFalse ( equatables . isWhiteList (  )  )  ;", "assertEquals ( equatables . getValues (  )  . size (  )  ,     0  )  ;", "assertEquals ( equatables . complement (  )  ,    EquatableValueSet . none ( TestingIdType . ID )  )  ;", "assertTrue ( equatables . containsValue (  0 L )  )  ;", "assertTrue ( equatables . containsValue (  1 L )  )  ;", "}", "METHOD_END"], "methodName": ["testEntireSet"], "fileName": "com.facebook.presto.spi.predicate.TestEquatableValueSet"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . getSingleValue (  )  ,     0 L )  ;", "try    {", "EquatableValueSet . all ( TestingIdType . ID )  . getSingleValue (  )  ;", "fail (  )  ;", "}    catch    ( IllegalStateException   ignored )     {", "}", "}", "METHOD_END"], "methodName": ["testGetSingleValue"], "fileName": "com.facebook.presto.spi.predicate.TestEquatableValueSet"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( EquatableValueSet . none ( TestingIdType . ID )  . intersect ( EquatableValueSet . none ( TestingIdType . ID )  )  ,    EquatableValueSet . none ( TestingIdType . ID )  )  ;", "assertEquals ( EquatableValueSet . all ( TestingIdType . ID )  . intersect ( EquatableValueSet . all ( TestingIdType . ID )  )  ,    EquatableValueSet . all ( TestingIdType . ID )  )  ;", "assertEquals ( EquatableValueSet . none ( TestingIdType . ID )  . intersect ( EquatableValueSet . all ( TestingIdType . ID )  )  ,    EquatableValueSet . none ( TestingIdType . ID )  )  ;", "assertEquals ( EquatableValueSet . none ( TestingIdType . ID )  . intersect ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  ,    EquatableValueSet . none ( TestingIdType . ID )  )  ;", "assertEquals ( EquatableValueSet . all ( TestingIdType . ID )  . intersect ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  ,    EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  ;", "assertEquals ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . intersect ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  ,    EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  ;", "assertEquals ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . intersect ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  ,    EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  ;", "assertEquals ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . complement (  )  . intersect ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  ,    EquatableValueSet . none ( TestingIdType . ID )  )  ;", "assertEquals ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . complement (  )  . intersect ( EquatableValueSet . of ( TestingIdType . ID ,     1 L )  )  ,    EquatableValueSet . of ( TestingIdType . ID ,     1 L )  )  ;", "assertEquals ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . intersect ( EquatableValueSet . of ( TestingIdType . ID ,     1 L )  . complement (  )  )  ,    EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  ;", "assertEquals ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . intersect ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     2 L )  )  ,    EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  ;", "assertEquals ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . complement (  )  . intersect ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     2 L )  )  ,    EquatableValueSet . of ( TestingIdType . ID ,     2 L )  )  ;", "assertEquals ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . complement (  )  . intersect ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     2 L )  . complement (  )  )  ,    EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L ,     2 L )  . complement (  )  )  ;", "}", "METHOD_END"], "methodName": ["testIntersect"], "fileName": "com.facebook.presto.spi.predicate.TestEquatableValueSet"}, {"methodBody": ["METHOD_START", "{", "TestingTypeManager   typeManager    =    new   TestingTypeManager (  )  ;", "TestingBlockEncodingSerde   blockEncodingSerde    =    new   TestingBlockEncodingSerde ( typeManager )  ;", "ObjectMapper   mapper    =    new   ObjectMapperProvider (  )  . get (  )  . registerModule ( new   SimpleModule (  )  . addDeserializer ( Type . class ,    new   TestingTypeDeserializer ( typeManager )  )  . addSerializer ( Block . class ,    new   TestingBlockJsonSerde . Serializer ( blockEncodingSerde )  )  . addDeserializer ( Block . class ,    new   TestingBlockJsonSerde . Deserializer ( blockEncodingSerde )  )  )  ;", "set    =     . all ( TestingIdType . ID )  ;", "assertEquals ( set ,    mapper . readValue ( mapper . writeValueAsString ( set )  ,     . class )  )  ;", "set    =     . none ( TestingIdType . ID )  ;", "assertEquals ( set ,    mapper . readValue ( mapper . writeValueAsString ( set )  ,     . class )  )  ;", "set    =     . of ( TestingIdType . ID ,     1 L )  ;", "assertEquals ( set ,    mapper . readValue ( mapper . writeValueAsString ( set )  ,     . class )  )  ;", "set    =     . of ( TestingIdType . ID ,     1 L ,     2 L )  ;", "assertEquals ( set ,    mapper . readValue ( mapper . writeValueAsString ( set )  ,     . class )  )  ;", "set    =     . of ( TestingIdType . ID ,     1 L ,     2 L )  . complement (  )  ;", "assertEquals ( set ,    mapper . readValue ( mapper . writeValueAsString ( set )  ,     . class )  )  ;", "}", "METHOD_END"], "methodName": ["testJsonSerialization"], "fileName": "com.facebook.presto.spi.predicate.TestEquatableValueSet"}, {"methodBody": ["METHOD_START", "{", "EquatableValueSet   equatables    =    EquatableValueSet . of ( TestingIdType . ID ,     1 L ,     2 L ,     3 L ,     1 L )  ;", "EquatableValueSet   complement    =     (  ( EquatableValueSet )     ( EquatableValueSet . all ( TestingIdType . ID )  . subtract ( equatables )  )  )  ;", "assertEquals ( equatables . getType (  )  ,    TestingIdType . ID )  ;", "assertFalse ( equatables . isNone (  )  )  ;", "assertFalse ( equatables . isAll (  )  )  ;", "assertFalse ( equatables . isSingleValue (  )  )  ;", "assertTrue ( equatables . isWhiteList (  )  )  ;", "assertTrue ( Iterables . elementsEqual ( equatables . getValues (  )  ,    ImmutableList . of (  1 L ,     2 L ,     3 L )  )  )  ;", "assertEquals ( equatables . complement (  )  ,    complement )  ;", "assertFalse ( equatables . containsValue (  0 L )  )  ;", "assertTrue ( equatables . containsValue (  1 L )  )  ;", "assertTrue ( equatables . containsValue (  2 L )  )  ;", "assertTrue ( equatables . containsValue (  3 L )  )  ;", "assertFalse ( equatables . containsValue (  4 L )  )  ;", "assertEquals ( complement . getType (  )  ,    TestingIdType . ID )  ;", "assertFalse ( complement . isNone (  )  )  ;", "assertFalse ( complement . isAll (  )  )  ;", "assertFalse ( complement . isSingleValue (  )  )  ;", "assertFalse ( complement . isWhiteList (  )  )  ;", "assertTrue ( Iterables . elementsEqual ( complement . getValues (  )  ,    ImmutableList . of (  1 L ,     2 L ,     3 L )  )  )  ;", "assertEquals ( complement . complement (  )  ,    equatables )  ;", "assertTrue ( complement . containsValue (  0 L )  )  ;", "assertFalse ( complement . containsValue (  1 L )  )  ;", "assertFalse ( complement . containsValue (  2 L )  )  ;", "assertFalse ( complement . containsValue (  3 L )  )  ;", "assertTrue ( complement . containsValue (  4 L )  )  ;", "}", "METHOD_END"], "methodName": ["testMultipleValues"], "fileName": "com.facebook.presto.spi.predicate.TestEquatableValueSet"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( EquatableValueSet . all ( TestingIdType . ID )  . overlaps ( EquatableValueSet . all ( TestingIdType . ID )  )  )  ;", "assertFalse ( EquatableValueSet . all ( TestingIdType . ID )  . overlaps ( EquatableValueSet . none ( TestingIdType . ID )  )  )  ;", "assertTrue ( EquatableValueSet . all ( TestingIdType . ID )  . overlaps ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  )  ;", "assertTrue ( EquatableValueSet . all ( TestingIdType . ID )  . overlaps ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  )  )  ;", "assertTrue ( EquatableValueSet . all ( TestingIdType . ID )  . overlaps ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . complement (  )  )  )  ;", "assertFalse ( EquatableValueSet . none ( TestingIdType . ID )  . overlaps ( EquatableValueSet . all ( TestingIdType . ID )  )  )  ;", "assertFalse ( EquatableValueSet . none ( TestingIdType . ID )  . overlaps ( EquatableValueSet . none ( TestingIdType . ID )  )  )  ;", "assertFalse ( EquatableValueSet . none ( TestingIdType . ID )  . overlaps ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  )  ;", "assertFalse ( EquatableValueSet . none ( TestingIdType . ID )  . overlaps ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  )  )  ;", "assertFalse ( EquatableValueSet . none ( TestingIdType . ID )  . overlaps ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . complement (  )  )  )  ;", "assertTrue ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . overlaps ( EquatableValueSet . all ( TestingIdType . ID )  )  )  ;", "assertFalse ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . overlaps ( EquatableValueSet . none ( TestingIdType . ID )  )  )  ;", "assertTrue ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . overlaps ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  )  ;", "assertFalse ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . overlaps ( EquatableValueSet . of ( TestingIdType . ID ,     1 L )  )  )  ;", "assertTrue ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . overlaps ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  )  )  ;", "assertFalse ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . overlaps ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . complement (  )  )  )  ;", "assertFalse ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . overlaps ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . complement (  )  )  )  ;", "assertTrue ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . overlaps ( EquatableValueSet . of ( TestingIdType . ID ,     1 L )  . complement (  )  )  )  ;", "assertTrue ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . overlaps ( EquatableValueSet . all ( TestingIdType . ID )  )  )  ;", "assertFalse ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . overlaps ( EquatableValueSet . none ( TestingIdType . ID )  )  )  ;", "assertTrue ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . overlaps ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  )  ;", "assertFalse ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . overlaps ( EquatableValueSet . of ( TestingIdType . ID ,     (  -  1 L )  )  )  )  ;", "assertTrue ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . overlaps ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  )  )  ;", "assertTrue ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . overlaps ( EquatableValueSet . of ( TestingIdType . ID ,     (  -  1 L )  )  . complement (  )  )  )  ;", "assertTrue ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . complement (  )  . overlaps ( EquatableValueSet . all ( TestingIdType . ID )  )  )  ;", "assertFalse ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . complement (  )  . overlaps ( EquatableValueSet . none ( TestingIdType . ID )  )  )  ;", "assertFalse ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . complement (  )  . overlaps ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  )  ;", "assertTrue ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . complement (  )  . overlaps ( EquatableValueSet . of ( TestingIdType . ID ,     (  -  1 L )  )  )  )  ;", "assertFalse ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . complement (  )  . overlaps ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  )  )  ;", "assertTrue ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . complement (  )  . overlaps ( EquatableValueSet . of ( TestingIdType . ID ,     (  -  1 L )  )  . complement (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testOverlaps"], "fileName": "com.facebook.presto.spi.predicate.TestEquatableValueSet"}, {"methodBody": ["METHOD_START", "{", "EquatableValueSet   equatables    =    EquatableValueSet . of ( TestingIdType . ID ,     1  0 L )  ;", "EquatableValueSet   complement    =     (  ( EquatableValueSet )     ( EquatableValueSet . all ( TestingIdType . ID )  . subtract ( equatables )  )  )  ;", "assertEquals ( equatables . getType (  )  ,    TestingIdType . ID )  ;", "assertFalse ( equatables . isNone (  )  )  ;", "assertFalse ( equatables . isAll (  )  )  ;", "assertTrue ( equatables . isSingleValue (  )  )  ;", "assertTrue ( equatables . isWhiteList (  )  )  ;", "assertTrue ( Iterables . elementsEqual ( equatables . getValues (  )  ,    ImmutableList . of (  1  0 L )  )  )  ;", "assertEquals ( equatables . complement (  )  ,    complement )  ;", "assertFalse ( equatables . containsValue (  0 L )  )  ;", "assertFalse ( equatables . containsValue (  1 L )  )  ;", "assertTrue ( equatables . containsValue (  1  0 L )  )  ;", "assertEquals ( complement . getType (  )  ,    TestingIdType . ID )  ;", "assertFalse ( complement . isNone (  )  )  ;", "assertFalse ( complement . isAll (  )  )  ;", "assertFalse ( complement . isSingleValue (  )  )  ;", "assertFalse ( complement . isWhiteList (  )  )  ;", "assertTrue ( Iterables . elementsEqual ( complement . getValues (  )  ,    ImmutableList . of (  1  0 L )  )  )  ;", "assertEquals ( complement . complement (  )  ,    equatables )  ;", "assertTrue ( complement . containsValue (  0 L )  )  ;", "assertTrue ( complement . containsValue (  1 L )  )  ;", "assertFalse ( complement . containsValue (  1  0 L )  )  ;", "}", "METHOD_END"], "methodName": ["testSingleValue"], "fileName": "com.facebook.presto.spi.predicate.TestEquatableValueSet"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( EquatableValueSet . all ( TestingIdType . ID )  . subtract ( EquatableValueSet . all ( TestingIdType . ID )  )  ,    EquatableValueSet . none ( TestingIdType . ID )  )  ;", "assertEquals ( EquatableValueSet . all ( TestingIdType . ID )  . subtract ( EquatableValueSet . none ( TestingIdType . ID )  )  ,    EquatableValueSet . all ( TestingIdType . ID )  )  ;", "assertEquals ( EquatableValueSet . all ( TestingIdType . ID )  . subtract ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  ,    EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . complement (  )  )  ;", "assertEquals ( EquatableValueSet . all ( TestingIdType . ID )  . subtract ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  )  ,    EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . complement (  )  )  ;", "assertEquals ( EquatableValueSet . all ( TestingIdType . ID )  . subtract ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . complement (  )  )  ,    EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  )  ;", "assertEquals ( EquatableValueSet . none ( TestingIdType . ID )  . subtract ( EquatableValueSet . all ( TestingIdType . ID )  )  ,    EquatableValueSet . none ( TestingIdType . ID )  )  ;", "assertEquals ( EquatableValueSet . none ( TestingIdType . ID )  . subtract ( EquatableValueSet . none ( TestingIdType . ID )  )  ,    EquatableValueSet . none ( TestingIdType . ID )  )  ;", "assertEquals ( EquatableValueSet . none ( TestingIdType . ID )  . subtract ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  ,    EquatableValueSet . none ( TestingIdType . ID )  )  ;", "assertEquals ( EquatableValueSet . none ( TestingIdType . ID )  . subtract ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  )  ,    EquatableValueSet . none ( TestingIdType . ID )  )  ;", "assertEquals ( EquatableValueSet . none ( TestingIdType . ID )  . subtract ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . complement (  )  )  ,    EquatableValueSet . none ( TestingIdType . ID )  )  ;", "assertEquals ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . subtract ( EquatableValueSet . all ( TestingIdType . ID )  )  ,    EquatableValueSet . none ( TestingIdType . ID )  )  ;", "assertEquals ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . subtract ( EquatableValueSet . none ( TestingIdType . ID )  )  ,    EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  ;", "assertEquals ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . subtract ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  ,    EquatableValueSet . none ( TestingIdType . ID )  )  ;", "assertEquals ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . subtract ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . complement (  )  )  ,    EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  ;", "assertEquals ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . subtract ( EquatableValueSet . of ( TestingIdType . ID ,     1 L )  )  ,    EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  ;", "assertEquals ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . subtract ( EquatableValueSet . of ( TestingIdType . ID ,     1 L )  . complement (  )  )  ,    EquatableValueSet . none ( TestingIdType . ID )  )  ;", "assertEquals ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . subtract ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  )  ,    EquatableValueSet . none ( TestingIdType . ID )  )  ;", "assertEquals ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . subtract ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . complement (  )  )  ,    EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  ;", "assertEquals ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . complement (  )  . subtract ( EquatableValueSet . all ( TestingIdType . ID )  )  ,    EquatableValueSet . none ( TestingIdType . ID )  )  ;", "assertEquals ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . complement (  )  . subtract ( EquatableValueSet . none ( TestingIdType . ID )  )  ,    EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . complement (  )  )  ;", "assertEquals ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . complement (  )  . subtract ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  ,    EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . complement (  )  )  ;", "assertEquals ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . complement (  )  . subtract ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . complement (  )  )  ,    EquatableValueSet . none ( TestingIdType . ID )  )  ;", "assertEquals ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . complement (  )  . subtract ( EquatableValueSet . of ( TestingIdType . ID ,     1 L )  )  ,    EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . complement (  )  )  ;", "assertEquals ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . complement (  )  . subtract ( EquatableValueSet . of ( TestingIdType . ID ,     1 L )  . complement (  )  )  ,    EquatableValueSet . of ( TestingIdType . ID ,     1 L )  )  ;", "assertEquals ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . complement (  )  . subtract ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  )  ,    EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . complement (  )  )  ;", "assertEquals ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . complement (  )  . subtract ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . complement (  )  )  ,    EquatableValueSet . of ( TestingIdType . ID ,     1 L )  )  ;", "}", "METHOD_END"], "methodName": ["testSubtract"], "fileName": "com.facebook.presto.spi.predicate.TestEquatableValueSet"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( EquatableValueSet . none ( TestingIdType . ID )  . union ( EquatableValueSet . none ( TestingIdType . ID )  )  ,    EquatableValueSet . none ( TestingIdType . ID )  )  ;", "assertEquals ( EquatableValueSet . all ( TestingIdType . ID )  . union ( EquatableValueSet . all ( TestingIdType . ID )  )  ,    EquatableValueSet . all ( TestingIdType . ID )  )  ;", "assertEquals ( EquatableValueSet . none ( TestingIdType . ID )  . union ( EquatableValueSet . all ( TestingIdType . ID )  )  ,    EquatableValueSet . all ( TestingIdType . ID )  )  ;", "assertEquals ( EquatableValueSet . none ( TestingIdType . ID )  . union ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  ,    EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  ;", "assertEquals ( EquatableValueSet . all ( TestingIdType . ID )  . union ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  ,    EquatableValueSet . all ( TestingIdType . ID )  )  ;", "assertEquals ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . union ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  ,    EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  ;", "assertEquals ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . union ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  ,    EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  )  ;", "assertEquals ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . complement (  )  . union ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  )  ,    EquatableValueSet . all ( TestingIdType . ID )  )  ;", "assertEquals ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . complement (  )  . union ( EquatableValueSet . of ( TestingIdType . ID ,     1 L )  )  ,    EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . complement (  )  )  ;", "assertEquals ( EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . union ( EquatableValueSet . of ( TestingIdType . ID ,     1 L )  . complement (  )  )  ,    EquatableValueSet . of ( TestingIdType . ID ,     1 L )  . complement (  )  )  ;", "assertEquals ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . union ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     2 L )  )  ,    EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L ,     2 L )  )  ;", "assertEquals ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . complement (  )  . union ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     2 L )  )  ,    EquatableValueSet . of ( TestingIdType . ID ,     1 L )  . complement (  )  )  ;", "assertEquals ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     1 L )  . complement (  )  . union ( EquatableValueSet . of ( TestingIdType . ID ,     0 L ,     2 L )  . complement (  )  )  ,    EquatableValueSet . of ( TestingIdType . ID ,     0 L )  . complement (  )  )  ;", "}", "METHOD_END"], "methodName": ["testUnion"], "fileName": "com.facebook.presto.spi.predicate.TestEquatableValueSet"}, {"methodBody": ["METHOD_START", "{", "EquatableValueSet . of ( TestingIdType . ID ,     1 L )  . getValues (  )  . clear (  )  ;", "}", "METHOD_END"], "methodName": ["testUnmodifiableCollection"], "fileName": "com.facebook.presto.spi.predicate.TestEquatableValueSet"}, {"methodBody": ["METHOD_START", "{", "Iterator < Object >    iterator    =    EquatableValueSet . of ( TestingIdType . ID ,     1 L )  . getValues (  )  . iterator (  )  ;", "iterator . next (  )  ;", "iterator . remove (  )  ;", "}", "METHOD_END"], "methodName": ["testUnmodifiableIterator"], "fileName": "com.facebook.presto.spi.predicate.TestEquatableValueSet"}, {"methodBody": ["METHOD_START", "{", "EquatableValueSet . of ( TestingIdType . ID ,     1 L )  . getEntries (  )  . clear (  )  ;", "}", "METHOD_END"], "methodName": ["testUnmodifiableValueEntries"], "fileName": "com.facebook.presto.spi.predicate.TestEquatableValueSet"}, {"methodBody": ["METHOD_START", "{", "Iterator < EquatableValueSet . ValueEntry >    iterator    =    EquatableValueSet . of ( TestingIdType . ID ,     1 L )  . getEntries (  )  . iterator (  )  ;", "iterator . next (  )  ;", "iterator . remove (  )  ;", "}", "METHOD_END"], "methodName": ["testUnmodifiableValueEntryIterator"], "fileName": "com.facebook.presto.spi.predicate.TestEquatableValueSet"}, {"methodBody": ["METHOD_START", "{", "ImmutableMap < Marker ,    Integer >    markers    =    ImmutableMap .  < Marker ,    Integer > builder (  )  . put ( Marker . lowerUnbounded ( BigintType . BIGINT )  ,     (  -  1  0  0  0  )  )  . put ( Marker . above ( BigintType . BIGINT ,     0 L )  ,     (  -  1  0  0  )  )  . put ( Marker . below ( BigintType . BIGINT ,     1 L )  ,     (  -  1  )  )  . put ( Marker . exactly ( BigintType . BIGINT ,     1 L )  ,     0  )  . put ( Marker . above ( BigintType . BIGINT ,     1 L )  ,     1  )  . put ( Marker . below ( BigintType . BIGINT ,     2 L )  ,     1  0  0  )  . put ( Marker . upperUnbounded ( BigintType . BIGINT )  ,     1  0  0  0  )  . build (  )  ;", "for    ( Map . Entry < Marker ,    Integer >    entry 1     :    markers . entrySet (  )  )     {", "for    ( Map . Entry < Marker ,    Integer >    entry 2     :    markers . entrySet (  )  )     {", "boolean   adjacent    =    entry 1  . getKey (  )  . isAdjacent ( entry 2  . getKey (  )  )  ;", "boolean   distanceIsOne    =     ( Math . abs (  (  ( entry 1  . getValue (  )  )     -     ( entry 2  . getValue (  )  )  )  )  )     =  =     1  ;", "assertEquals ( adjacent ,    distanceIsOne )  ;", "}", "}", "assertEquals ( Marker . below ( BigintType . BIGINT ,     1 L )  . greaterAdjacent (  )  ,    Marker . exactly ( BigintType . BIGINT ,     1 L )  )  ;", "assertEquals ( Marker . exactly ( BigintType . BIGINT ,     1 L )  . greaterAdjacent (  )  ,    Marker . above ( BigintType . BIGINT ,     1 L )  )  ;", "assertEquals ( Marker . above ( BigintType . BIGINT ,     1 L )  . lesserAdjacent (  )  ,    Marker . exactly ( BigintType . BIGINT ,     1 L )  )  ;", "assertEquals ( Marker . exactly ( BigintType . BIGINT ,     1 L )  . lesserAdjacent (  )  ,    Marker . below ( BigintType . BIGINT ,     1 L )  )  ;", "try    {", "Marker . below ( BigintType . BIGINT ,     1 L )  . lesserAdjacent (  )  ;", "fail (  )  ;", "}    catch    ( IllegalStateException   e )     {", "}", "try    {", "Marker . above ( BigintType . BIGINT ,     1 L )  . greaterAdjacent (  )  ;", "fail (  )  ;", "}    catch    ( IllegalStateException   e )     {", "}", "try    {", "Marker . lowerUnbounded ( BigintType . BIGINT )  . lesserAdjacent (  )  ;", "fail (  )  ;", "}    catch    ( IllegalStateException   e )     {", "}", "try    {", "Marker . lowerUnbounded ( BigintType . BIGINT )  . greaterAdjacent (  )  ;", "fail (  )  ;", "}    catch    ( IllegalStateException   e )     {", "}", "try    {", "Marker . upperUnbounded ( BigintType . BIGINT )  . lesserAdjacent (  )  ;", "fail (  )  ;", "}    catch    ( IllegalStateException   e )     {", "}", "try    {", "Marker . upperUnbounded ( BigintType . BIGINT )  . greaterAdjacent (  )  ;", "fail (  )  ;", "}    catch    ( IllegalStateException   e )     {", "}", "}", "METHOD_END"], "methodName": ["testAdjacency"], "fileName": "com.facebook.presto.spi.predicate.TestMarker"}, {"methodBody": ["METHOD_START", "{", "ImmutableList < Marker >    markers    =    ImmutableList . of ( Marker . lowerUnbounded ( BigintType . BIGINT )  ,    Marker . above ( BigintType . BIGINT ,     0 L )  ,    Marker . below ( BigintType . BIGINT ,     1 L )  ,    Marker . exactly ( BigintType . BIGINT ,     1 L )  ,    Marker . above ( BigintType . BIGINT ,     1 L )  ,    Marker . below ( BigintType . BIGINT ,     2 L )  ,    Marker . upperUnbounded ( BigintType . BIGINT )  )  ;", "assertTrue ( Ordering . natural (  )  . isStrictlyOrdered ( markers )  )  ;", "for    ( int   i    =     0  ;    i    <     ( markers . size (  )  )  ;    i +  +  )     {", "for    ( int   j    =     0  ;    j    <     ( markers . size (  )  )  ;    j +  +  )     {", "assertTrue (  (  ( markers . get ( i )  . compareTo ( markers . get ( j )  )  )     =  =     ( Integer . compare ( i ,    j )  )  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testComparisons"], "fileName": "com.facebook.presto.spi.predicate.TestMarker"}, {"methodBody": ["METHOD_START", "{", "TestingTypeManager   typeManager    =    new   TestingTypeManager (  )  ;", "TestingBlockEncodingSerde   blockEncodingSerde    =    new   TestingBlockEncodingSerde ( typeManager )  ;", "ObjectMapper   mapper    =    new   ObjectMapperProvider (  )  . get (  )  . registerModule ( new   SimpleModule (  )  . addDeserializer ( Type . class ,    new   TestingTypeDeserializer ( typeManager )  )  . addSerializer ( Block . class ,    new   TestingBlockJsonSerde . Serializer ( blockEncodingSerde )  )  . addDeserializer ( Block . class ,    new   TestingBlockJsonSerde . Deserializer ( blockEncodingSerde )  )  )  ;", "marker    =     . above ( BigintType . BIGINT ,     0 L )  ;", "assertEquals ( marker ,    mapper . readValue ( mapper . writeValueAsString ( marker )  ,     . class )  )  ;", "marker    =     . exactly ( VarcharType . VARCHAR ,    Slices . utf 8 Slice (  \" abc \"  )  )  ;", "assertEquals ( marker ,    mapper . readValue ( mapper . writeValueAsString ( marker )  ,     . class )  )  ;", "marker    =     . below ( DoubleType . DOUBLE ,     0  .  1  2  3  )  ;", "assertEquals ( marker ,    mapper . readValue ( mapper . writeValueAsString ( marker )  ,     . class )  )  ;", "marker    =     . exactly ( BooleanType . BOOLEAN ,    true )  ;", "assertEquals ( marker ,    mapper . readValue ( mapper . writeValueAsString ( marker )  ,     . class )  )  ;", "marker    =     . upperUnbounded ( BigintType . BIGINT )  ;", "assertEquals ( marker ,    mapper . readValue ( mapper . writeValueAsString ( marker )  ,     . class )  )  ;", "marker    =     . lowerUnbounded ( BigintType . BIGINT )  ;", "assertEquals ( marker ,    mapper . readValue ( mapper . writeValueAsString ( marker )  ,     . class )  )  ;", "}", "METHOD_END"], "methodName": ["testJsonSerialization"], "fileName": "com.facebook.presto.spi.predicate.TestMarker"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( Marker . lowerUnbounded ( BigintType . BIGINT )  . getType (  )  ,    BigintType . BIGINT )  ;", "assertEquals ( Marker . below ( BigintType . BIGINT ,     1 L )  . getType (  )  ,    BigintType . BIGINT )  ;", "assertEquals ( Marker . exactly ( BigintType . BIGINT ,     1 L )  . getType (  )  ,    BigintType . BIGINT )  ;", "assertEquals ( Marker . above ( BigintType . BIGINT ,     1 L )  . getType (  )  ,    BigintType . BIGINT )  ;", "assertEquals ( Marker . upperUnbounded ( BigintType . BIGINT )  . getType (  )  ,    BigintType . BIGINT )  ;", "}", "METHOD_END"], "methodName": ["testTypes"], "fileName": "com.facebook.presto.spi.predicate.TestMarker"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( Marker . lowerUnbounded ( BigintType . BIGINT )  . isLowerUnbounded (  )  )  ;", "assertFalse ( Marker . lowerUnbounded ( BigintType . BIGINT )  . isUpperUnbounded (  )  )  ;", "assertTrue ( Marker . upperUnbounded ( BigintType . BIGINT )  . isUpperUnbounded (  )  )  ;", "assertFalse ( Marker . upperUnbounded ( BigintType . BIGINT )  . isLowerUnbounded (  )  )  ;", "assertFalse ( Marker . below ( BigintType . BIGINT ,     1 L )  . isLowerUnbounded (  )  )  ;", "assertFalse ( Marker . below ( BigintType . BIGINT ,     1 L )  . isUpperUnbounded (  )  )  ;", "assertFalse ( Marker . exactly ( BigintType . BIGINT ,     1 L )  . isLowerUnbounded (  )  )  ;", "assertFalse ( Marker . exactly ( BigintType . BIGINT ,     1 L )  . isUpperUnbounded (  )  )  ;", "assertFalse ( Marker . above ( BigintType . BIGINT ,     1 L )  . isLowerUnbounded (  )  )  ;", "assertFalse ( Marker . above ( BigintType . BIGINT ,     1 L )  . isUpperUnbounded (  )  )  ;", "}", "METHOD_END"], "methodName": ["testUnbounded"], "fileName": "com.facebook.presto.spi.predicate.TestMarker"}, {"methodBody": ["METHOD_START", "{", "Range   range    =    Range . all ( BigintType . BIGINT )  ;", "assertEquals ( range . getLow (  )  ,    Marker . lowerUnbounded ( BigintType . BIGINT )  )  ;", "assertEquals ( range . getHigh (  )  ,    Marker . upperUnbounded ( BigintType . BIGINT )  )  ;", "assertFalse ( range . isSingleValue (  )  )  ;", "assertTrue ( range . isAll (  )  )  ;", "assertEquals ( range . getType (  )  ,    BigintType . BIGINT )  ;", "assertTrue ( range . includes ( Marker . lowerUnbounded ( BigintType . BIGINT )  )  )  ;", "assertTrue ( range . includes ( Marker . below ( BigintType . BIGINT ,     1 L )  )  )  ;", "assertTrue ( range . includes ( Marker . exactly ( BigintType . BIGINT ,     1 L )  )  )  ;", "assertTrue ( range . includes ( Marker . above ( BigintType . BIGINT ,     1 L )  )  )  ;", "assertTrue ( range . includes ( Marker . upperUnbounded ( BigintType . BIGINT )  )  )  ;", "}", "METHOD_END"], "methodName": ["testAllRange"], "fileName": "com.facebook.presto.spi.predicate.TestRange"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( Range . all ( BigintType . BIGINT )  . contains ( Range . all ( BigintType . BIGINT )  )  )  ;", "assertTrue ( Range . all ( BigintType . BIGINT )  . contains ( Range . equal ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertTrue ( Range . all ( BigintType . BIGINT )  . contains ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertTrue ( Range . equal ( BigintType . BIGINT ,     0 L )  . contains ( Range . equal ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertFalse ( Range . equal ( BigintType . BIGINT ,     0 L )  . contains ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertFalse ( Range . equal ( BigintType . BIGINT ,     0 L )  . contains ( Range . greaterThanOrEqual ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertFalse ( Range . equal ( BigintType . BIGINT ,     0 L )  . contains ( Range . all ( BigintType . BIGINT )  )  )  ;", "assertTrue ( Range . greaterThanOrEqual ( BigintType . BIGINT ,     0 L )  . contains ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertTrue ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  . contains ( Range . greaterThan ( BigintType . BIGINT ,     1 L )  )  )  ;", "assertFalse ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  . contains ( Range . lessThan ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertTrue ( Range . range ( BigintType . BIGINT ,     0 L ,    true ,     2 L ,    true )  . contains ( Range . range ( BigintType . BIGINT ,     1 L ,    true ,     2 L ,    true )  )  )  ;", "assertFalse ( Range . range ( BigintType . BIGINT ,     0 L ,    true ,     2 L ,    true )  . contains ( Range . range ( BigintType . BIGINT ,     1 L ,    true ,     3 L ,    false )  )  )  ;", "}", "METHOD_END"], "methodName": ["testContains"], "fileName": "com.facebook.presto.spi.predicate.TestRange"}, {"methodBody": ["METHOD_START", "{", "Range   range    =    Range . equal ( BigintType . BIGINT ,     1 L )  ;", "assertEquals ( range . getLow (  )  ,    Marker . exactly ( BigintType . BIGINT ,     1 L )  )  ;", "assertEquals ( range . getHigh (  )  ,    Marker . exactly ( BigintType . BIGINT ,     1 L )  )  ;", "assertTrue ( range . isSingleValue (  )  )  ;", "assertFalse ( range . isAll (  )  )  ;", "assertEquals ( range . getType (  )  ,    BigintType . BIGINT )  ;", "assertFalse ( range . includes ( Marker . lowerUnbounded ( BigintType . BIGINT )  )  )  ;", "assertFalse ( range . includes ( Marker . exactly ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertTrue ( range . includes ( Marker . exactly ( BigintType . BIGINT ,     1 L )  )  )  ;", "assertFalse ( range . includes ( Marker . exactly ( BigintType . BIGINT ,     2 L )  )  )  ;", "assertFalse ( range . includes ( Marker . upperUnbounded ( BigintType . BIGINT )  )  )  ;", "}", "METHOD_END"], "methodName": ["testEqualRange"], "fileName": "com.facebook.presto.spi.predicate.TestRange"}, {"methodBody": ["METHOD_START", "{", "try    {", ". greaterThan ( BigintType . BIGINT ,     2 L )  . intersect (  . lessThan ( BigintType . BIGINT ,     2 L )  )  ;", "fail (  )  ;", "}    catch    ( IllegalArgumentException   e )     {", "}", "try    {", ". range ( BigintType . BIGINT ,     1 L ,    true ,     3 L ,    false )  . intersect (  . range ( BigintType . BIGINT ,     3 L ,    true ,     1  0 L ,    false )  )  ;", "fail (  )  ;", "}    catch    ( IllegalArgumentException   e )     {", "}", "}", "METHOD_END"], "methodName": ["testExceptionalIntersect"], "fileName": "com.facebook.presto.spi.predicate.TestRange"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( Range . equal ( BigintType . BIGINT ,     0 L )  . getSingleValue (  )  ,     0 L )  ;", "try    {", "Range . lessThan ( BigintType . BIGINT ,     0 L )  . getSingleValue (  )  ;", "fail (  )  ;", "}    catch    ( IllegalStateException   e )     {", "}", "}", "METHOD_END"], "methodName": ["testGetSingleValue"], "fileName": "com.facebook.presto.spi.predicate.TestRange"}, {"methodBody": ["METHOD_START", "{", "Range   range    =    Range . greaterThanOrEqual ( BigintType . BIGINT ,     1 L )  ;", "assertEquals ( range . getLow (  )  ,    Marker . exactly ( BigintType . BIGINT ,     1 L )  )  ;", "assertEquals ( range . getHigh (  )  ,    Marker . upperUnbounded ( BigintType . BIGINT )  )  ;", "assertFalse ( range . isSingleValue (  )  )  ;", "assertFalse ( range . isAll (  )  )  ;", "assertEquals ( range . getType (  )  ,    BigintType . BIGINT )  ;", "assertFalse ( range . includes ( Marker . lowerUnbounded ( BigintType . BIGINT )  )  )  ;", "assertFalse ( range . includes ( Marker . exactly ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertTrue ( range . includes ( Marker . exactly ( BigintType . BIGINT ,     1 L )  )  )  ;", "assertTrue ( range . includes ( Marker . exactly ( BigintType . BIGINT ,     2 L )  )  )  ;", "assertTrue ( range . includes ( Marker . upperUnbounded ( BigintType . BIGINT )  )  )  ;", "}", "METHOD_END"], "methodName": ["testGreaterThanOrEqualRange"], "fileName": "com.facebook.presto.spi.predicate.TestRange"}, {"methodBody": ["METHOD_START", "{", "Range   range    =    Range . greaterThan ( BigintType . BIGINT ,     1 L )  ;", "assertEquals ( range . getLow (  )  ,    Marker . above ( BigintType . BIGINT ,     1 L )  )  ;", "assertEquals ( range . getHigh (  )  ,    Marker . upperUnbounded ( BigintType . BIGINT )  )  ;", "assertFalse ( range . isSingleValue (  )  )  ;", "assertFalse ( range . isAll (  )  )  ;", "assertEquals ( range . getType (  )  ,    BigintType . BIGINT )  ;", "assertFalse ( range . includes ( Marker . lowerUnbounded ( BigintType . BIGINT )  )  )  ;", "assertFalse ( range . includes ( Marker . exactly ( BigintType . BIGINT ,     1 L )  )  )  ;", "assertTrue ( range . includes ( Marker . exactly ( BigintType . BIGINT ,     2 L )  )  )  ;", "assertTrue ( range . includes ( Marker . upperUnbounded ( BigintType . BIGINT )  )  )  ;", "}", "METHOD_END"], "methodName": ["testGreaterThanRange"], "fileName": "com.facebook.presto.spi.predicate.TestRange"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( Range . greaterThan ( BigintType . BIGINT ,     1 L )  . intersect ( Range . lessThanOrEqual ( BigintType . BIGINT ,     2 L )  )  ,    Range . range ( BigintType . BIGINT ,     1 L ,    false ,     2 L ,    true )  )  ;", "assertEquals ( Range . range ( BigintType . BIGINT ,     1 L ,    true ,     3 L ,    false )  . intersect ( Range . equal ( BigintType . BIGINT ,     2 L )  )  ,    Range . equal ( BigintType . BIGINT ,     2 L )  )  ;", "assertEquals ( Range . range ( BigintType . BIGINT ,     1 L ,    true ,     3 L ,    false )  . intersect ( Range . range ( BigintType . BIGINT ,     2 L ,    false ,     1  0 L ,    false )  )  ,    Range . range ( BigintType . BIGINT ,     2 L ,    false ,     3 L ,    false )  )  ;", "assertEquals ( Range . range ( BigintType . BIGINT ,     1 L ,    true ,     3 L ,    true )  . intersect ( Range . range ( BigintType . BIGINT ,     3 L ,    true ,     1  0 L ,    false )  )  ,    Range . equal ( BigintType . BIGINT ,     3 L )  )  ;", "assertEquals ( Range . all ( BigintType . BIGINT )  . intersect ( Range . equal ( BigintType . BIGINT ,    Long . MAX _ VALUE )  )  ,    Range . equal ( BigintType . BIGINT ,    Long . MAX _ VALUE )  )  ;", "}", "METHOD_END"], "methodName": ["testIntersect"], "fileName": "com.facebook.presto.spi.predicate.TestRange"}, {"methodBody": ["METHOD_START", "{", "new   Range ( Marker . exactly ( BigintType . BIGINT ,     1 L )  ,    Marker . exactly ( BigintType . BIGINT ,     0 L )  )  ;", "}", "METHOD_END"], "methodName": ["testInvertedBounds"], "fileName": "com.facebook.presto.spi.predicate.TestRange"}, {"methodBody": ["METHOD_START", "{", "TestingTypeManager   typeManager    =    new   TestingTypeManager (  )  ;", "TestingBlockEncodingSerde   blockEncodingSerde    =    new   TestingBlockEncodingSerde ( typeManager )  ;", "ObjectMapper   mapper    =    new   ObjectMapperProvider (  )  . get (  )  . registerModule ( new   SimpleModule (  )  . addDeserializer ( Type . class ,    new   TestingTypeDeserializer ( typeManager )  )  . addSerializer ( Block . class ,    new   TestingBlockJsonSerde . Serializer ( blockEncodingSerde )  )  . addDeserializer ( Block . class ,    new   TestingBlockJsonSerde . Deserializer ( blockEncodingSerde )  )  )  ;", "range    =     . all ( BigintType . BIGINT )  ;", "assertEquals ( range ,    mapper . readValue ( mapper . writeValueAsString ( range )  ,     . class )  )  ;", "range    =     . equal ( DoubleType . DOUBLE ,     0  .  1  2  3  )  ;", "assertEquals ( range ,    mapper . readValue ( mapper . writeValueAsString ( range )  ,     . class )  )  ;", "range    =     . greaterThan ( BigintType . BIGINT ,     0 L )  ;", "assertEquals ( range ,    mapper . readValue ( mapper . writeValueAsString ( range )  ,     . class )  )  ;", "range    =     . greaterThanOrEqual ( VarcharType . VARCHAR ,    Slices . utf 8 Slice (  \" abc \"  )  )  ;", "assertEquals ( range ,    mapper . readValue ( mapper . writeValueAsString ( range )  ,     . class )  )  ;", "range    =     . lessThan ( BigintType . BIGINT ,    Long . MAX _ VALUE )  ;", "assertEquals ( range ,    mapper . readValue ( mapper . writeValueAsString ( range )  ,     . class )  )  ;", "range    =     . lessThanOrEqual ( DoubleType . DOUBLE ,    Double . MAX _ VALUE )  ;", "assertEquals ( range ,    mapper . readValue ( mapper . writeValueAsString ( range )  ,     . class )  )  ;", "}", "METHOD_END"], "methodName": ["testJsonSerialization"], "fileName": "com.facebook.presto.spi.predicate.TestRange"}, {"methodBody": ["METHOD_START", "{", "Range   range    =    Range . lessThanOrEqual ( BigintType . BIGINT ,     1 L )  ;", "assertEquals ( range . getLow (  )  ,    Marker . lowerUnbounded ( BigintType . BIGINT )  )  ;", "assertEquals ( range . getHigh (  )  ,    Marker . exactly ( BigintType . BIGINT ,     1 L )  )  ;", "assertFalse ( range . isSingleValue (  )  )  ;", "assertFalse ( range . isAll (  )  )  ;", "assertEquals ( range . getType (  )  ,    BigintType . BIGINT )  ;", "assertTrue ( range . includes ( Marker . lowerUnbounded ( BigintType . BIGINT )  )  )  ;", "assertFalse ( range . includes ( Marker . exactly ( BigintType . BIGINT ,     2 L )  )  )  ;", "assertTrue ( range . includes ( Marker . exactly ( BigintType . BIGINT ,     1 L )  )  )  ;", "assertTrue ( range . includes ( Marker . exactly ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertFalse ( range . includes ( Marker . upperUnbounded ( BigintType . BIGINT )  )  )  ;", "}", "METHOD_END"], "methodName": ["testLessThanOrEqualRange"], "fileName": "com.facebook.presto.spi.predicate.TestRange"}, {"methodBody": ["METHOD_START", "{", "Range   range    =    Range . lessThan ( BigintType . BIGINT ,     1 L )  ;", "assertEquals ( range . getLow (  )  ,    Marker . lowerUnbounded ( BigintType . BIGINT )  )  ;", "assertEquals ( range . getHigh (  )  ,    Marker . below ( BigintType . BIGINT ,     1 L )  )  ;", "assertFalse ( range . isSingleValue (  )  )  ;", "assertFalse ( range . isAll (  )  )  ;", "assertEquals ( range . getType (  )  ,    BigintType . BIGINT )  ;", "assertTrue ( range . includes ( Marker . lowerUnbounded ( BigintType . BIGINT )  )  )  ;", "assertFalse ( range . includes ( Marker . exactly ( BigintType . BIGINT ,     1 L )  )  )  ;", "assertTrue ( range . includes ( Marker . exactly ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertFalse ( range . includes ( Marker . upperUnbounded ( BigintType . BIGINT )  )  )  ;", "}", "METHOD_END"], "methodName": ["testLessThanRange"], "fileName": "com.facebook.presto.spi.predicate.TestRange"}, {"methodBody": ["METHOD_START", "{", "new   Range ( Marker . lowerUnbounded ( BigintType . BIGINT )  ,    Marker . lowerUnbounded ( BigintType . BIGINT )  )  ;", "}", "METHOD_END"], "methodName": ["testLowerUnboundedOnly"], "fileName": "com.facebook.presto.spi.predicate.TestRange"}, {"methodBody": ["METHOD_START", "{", "new   Range ( Marker . exactly ( BigintType . BIGINT ,     1 L )  ,    Marker . exactly ( VarcharType . VARCHAR ,    Slices . utf 8 Slice (  \" a \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testMismatchedTypes"], "fileName": "com.facebook.presto.spi.predicate.TestRange"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( Range . greaterThan ( BigintType . BIGINT ,     1 L )  . overlaps ( Range . lessThanOrEqual ( BigintType . BIGINT ,     2 L )  )  )  ;", "assertFalse ( Range . greaterThan ( BigintType . BIGINT ,     2 L )  . overlaps ( Range . lessThan ( BigintType . BIGINT ,     2 L )  )  )  ;", "assertTrue ( Range . range ( BigintType . BIGINT ,     1 L ,    true ,     3 L ,    false )  . overlaps ( Range . equal ( BigintType . BIGINT ,     2 L )  )  )  ;", "assertTrue ( Range . range ( BigintType . BIGINT ,     1 L ,    true ,     3 L ,    false )  . overlaps ( Range . range ( BigintType . BIGINT ,     2 L ,    false ,     1  0 L ,    false )  )  )  ;", "assertFalse ( Range . range ( BigintType . BIGINT ,     1 L ,    true ,     3 L ,    false )  . overlaps ( Range . range ( BigintType . BIGINT ,     3 L ,    true ,     1  0 L ,    false )  )  )  ;", "assertTrue ( Range . range ( BigintType . BIGINT ,     1 L ,    true ,     3 L ,    true )  . overlaps ( Range . range ( BigintType . BIGINT ,     3 L ,    true ,     1  0 L ,    false )  )  )  ;", "assertTrue ( Range . all ( BigintType . BIGINT )  . overlaps ( Range . equal ( BigintType . BIGINT ,    Long . MAX _ VALUE )  )  )  ;", "}", "METHOD_END"], "methodName": ["testOverlaps"], "fileName": "com.facebook.presto.spi.predicate.TestRange"}, {"methodBody": ["METHOD_START", "{", "Range   range    =    Range . range ( BigintType . BIGINT ,     0 L ,    false ,     2 L ,    true )  ;", "assertEquals ( range . getLow (  )  ,    Marker . above ( BigintType . BIGINT ,     0 L )  )  ;", "assertEquals ( range . getHigh (  )  ,    Marker . exactly ( BigintType . BIGINT ,     2 L )  )  ;", "assertFalse ( range . isSingleValue (  )  )  ;", "assertFalse ( range . isAll (  )  )  ;", "assertEquals ( range . getType (  )  ,    BigintType . BIGINT )  ;", "assertFalse ( range . includes ( Marker . lowerUnbounded ( BigintType . BIGINT )  )  )  ;", "assertFalse ( range . includes ( Marker . exactly ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertTrue ( range . includes ( Marker . exactly ( BigintType . BIGINT ,     1 L )  )  )  ;", "assertTrue ( range . includes ( Marker . exactly ( BigintType . BIGINT ,     2 L )  )  )  ;", "assertFalse ( range . includes ( Marker . exactly ( BigintType . BIGINT ,     3 L )  )  )  ;", "assertFalse ( range . includes ( Marker . upperUnbounded ( BigintType . BIGINT )  )  )  ;", "}", "METHOD_END"], "methodName": ["testRange"], "fileName": "com.facebook.presto.spi.predicate.TestRange"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( Range . range ( BigintType . BIGINT ,     1 L ,    true ,     1 L ,    true )  . isSingleValue (  )  )  ;", "assertFalse ( Range . range ( BigintType . BIGINT ,     1 L ,    true ,     2 L ,    true )  . isSingleValue (  )  )  ;", "assertTrue ( Range . range ( DoubleType . DOUBLE ,     1  .  1  ,    true ,     1  .  1  ,    true )  . isSingleValue (  )  )  ;", "assertTrue ( Range . range ( VarcharType . VARCHAR ,    Slices . utf 8 Slice (  \" a \"  )  ,    true ,    Slices . utf 8 Slice (  \" a \"  )  ,    true )  . isSingleValue (  )  )  ;", "assertTrue ( Range . range ( BooleanType . BOOLEAN ,    true ,    true ,    true ,    true )  . isSingleValue (  )  )  ;", "assertFalse ( Range . range ( BooleanType . BOOLEAN ,    false ,    true ,    true ,    true )  . isSingleValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSingleValue"], "fileName": "com.facebook.presto.spi.predicate.TestRange"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( Range . greaterThan ( BigintType . BIGINT ,     1 L )  . span ( Range . lessThanOrEqual ( BigintType . BIGINT ,     2 L )  )  ,    Range . all ( BigintType . BIGINT )  )  ;", "assertEquals ( Range . greaterThan ( BigintType . BIGINT ,     2 L )  . span ( Range . lessThanOrEqual ( BigintType . BIGINT ,     0 L )  )  ,    Range . all ( BigintType . BIGINT )  )  ;", "assertEquals ( Range . range ( BigintType . BIGINT ,     1 L ,    true ,     3 L ,    false )  . span ( Range . equal ( BigintType . BIGINT ,     2 L )  )  ,    Range . range ( BigintType . BIGINT ,     1 L ,    true ,     3 L ,    false )  )  ;", "assertEquals ( Range . range ( BigintType . BIGINT ,     1 L ,    true ,     3 L ,    false )  . span ( Range . range ( BigintType . BIGINT ,     2 L ,    false ,     1  0 L ,    false )  )  ,    Range . range ( BigintType . BIGINT ,     1 L ,    true ,     1  0 L ,    false )  )  ;", "assertEquals ( Range . greaterThan ( BigintType . BIGINT ,     1 L )  . span ( Range . equal ( BigintType . BIGINT ,     0 L )  )  ,    Range . greaterThanOrEqual ( BigintType . BIGINT ,     0 L )  )  ;", "assertEquals ( Range . greaterThan ( BigintType . BIGINT ,     1 L )  . span ( Range . greaterThanOrEqual ( BigintType . BIGINT ,     1  0 L )  )  ,    Range . greaterThan ( BigintType . BIGINT ,     1 L )  )  ;", "assertEquals ( Range . lessThan ( BigintType . BIGINT ,     1 L )  . span ( Range . lessThanOrEqual ( BigintType . BIGINT ,     1 L )  )  ,    Range . lessThanOrEqual ( BigintType . BIGINT ,     1 L )  )  ;", "assertEquals ( Range . all ( BigintType . BIGINT )  . span ( Range . lessThanOrEqual ( BigintType . BIGINT ,     1 L )  )  ,    Range . all ( BigintType . BIGINT )  )  ;", "}", "METHOD_END"], "methodName": ["testSpan"], "fileName": "com.facebook.presto.spi.predicate.TestRange"}, {"methodBody": ["METHOD_START", "{", "new   Range ( Marker . upperUnbounded ( BigintType . BIGINT )  ,    Marker . upperUnbounded ( BigintType . BIGINT )  )  ;", "}", "METHOD_END"], "methodName": ["testUpperUnboundedOnly"], "fileName": "com.facebook.presto.spi.predicate.TestRange"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( first . union ( second )  ,    expected )  ;", "assertEquals ( first . union ( ImmutableList . of ( first ,    second )  )  ,    expected )  ;", "}", "METHOD_END"], "methodName": ["assertUnion"], "fileName": "com.facebook.presto.spi.predicate.TestSortedRangeSet"}, {"methodBody": ["METHOD_START", "{", "SortedRangeSet   rangeSet    =    SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     1  0 L )  ,    Range . equal ( BigintType . BIGINT ,     0 L )  ,    Range . range ( BigintType . BIGINT ,     9 L ,    true ,     1  1 L ,    false )  ,    Range . equal ( BigintType . BIGINT ,     0 L )  ,    Range . range ( BigintType . BIGINT ,     2 L ,    true ,     4 L ,    true )  ,    Range . range ( BigintType . BIGINT ,     4 L ,    false ,     5 L ,    true )  )  ;", "ImmutableList < Range >    normalizedResult    =    ImmutableList . of ( Range . equal ( BigintType . BIGINT ,     0 L )  ,    Range . range ( BigintType . BIGINT ,     2 L ,    true ,     5 L ,    true )  ,    Range . range ( BigintType . BIGINT ,     9 L ,    true ,     1  1 L ,    false )  )  ;", "SortedRangeSet   complement    =    SortedRangeSet . of ( Range . lessThan ( BigintType . BIGINT ,     0 L )  ,    Range . range ( BigintType . BIGINT ,     0 L ,    false ,     2 L ,    false )  ,    Range . range ( BigintType . BIGINT ,     5 L ,    false ,     9 L ,    false )  ,    Range . greaterThanOrEqual ( BigintType . BIGINT ,     1  1 L )  )  ;", "assertEquals ( rangeSet . getType (  )  ,    BigintType . BIGINT )  ;", "assertFalse ( rangeSet . isNone (  )  )  ;", "assertFalse ( rangeSet . isAll (  )  )  ;", "assertFalse ( rangeSet . isSingleValue (  )  )  ;", "assertTrue ( Iterables . elementsEqual ( rangeSet . getOrderedRanges (  )  ,    normalizedResult )  )  ;", "assertEquals ( rangeSet ,    SortedRangeSet . copyOf ( BigintType . BIGINT ,    normalizedResult )  )  ;", "assertEquals ( rangeSet . getRangeCount (  )  ,     3  )  ;", "assertEquals ( rangeSet . complement (  )  ,    complement )  ;", "assertFalse ( rangeSet . includesMarker ( Marker . lowerUnbounded ( BigintType . BIGINT )  )  )  ;", "assertTrue ( rangeSet . includesMarker ( Marker . exactly ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertFalse ( rangeSet . includesMarker ( Marker . exactly ( BigintType . BIGINT ,     1 L )  )  )  ;", "assertFalse ( rangeSet . includesMarker ( Marker . exactly ( BigintType . BIGINT ,     7 L )  )  )  ;", "assertTrue ( rangeSet . includesMarker ( Marker . exactly ( BigintType . BIGINT ,     9 L )  )  )  ;", "assertFalse ( rangeSet . includesMarker ( Marker . upperUnbounded ( BigintType . BIGINT )  )  )  ;", "}", "METHOD_END"], "methodName": ["testBoundedSet"], "fileName": "com.facebook.presto.spi.predicate.TestSortedRangeSet"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( SortedRangeSet . all ( BigintType . BIGINT )  . contains ( SortedRangeSet . all ( BigintType . BIGINT )  )  )  ;", "assertTrue ( SortedRangeSet . all ( BigintType . BIGINT )  . contains ( SortedRangeSet . none ( BigintType . BIGINT )  )  )  ;", "assertTrue ( SortedRangeSet . all ( BigintType . BIGINT )  . contains ( SortedRangeSet . of ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertTrue ( SortedRangeSet . all ( BigintType . BIGINT )  . contains ( SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     0 L )  ,    Range . equal ( BigintType . BIGINT ,     1 L )  )  )  )  ;", "assertTrue ( SortedRangeSet . all ( BigintType . BIGINT )  . contains ( SortedRangeSet . of ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  )  )  )  ;", "assertTrue ( SortedRangeSet . all ( BigintType . BIGINT )  . contains ( SortedRangeSet . of ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  ,    Range . lessThan ( BigintType . BIGINT ,     0 L )  )  )  )  ;", "assertFalse ( SortedRangeSet . none ( BigintType . BIGINT )  . contains ( SortedRangeSet . all ( BigintType . BIGINT )  )  )  ;", "assertTrue ( SortedRangeSet . none ( BigintType . BIGINT )  . contains ( SortedRangeSet . none ( BigintType . BIGINT )  )  )  ;", "assertFalse ( SortedRangeSet . none ( BigintType . BIGINT )  . contains ( SortedRangeSet . of ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertFalse ( SortedRangeSet . none ( BigintType . BIGINT )  . contains ( SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     0 L )  ,    Range . equal ( BigintType . BIGINT ,     1 L )  )  )  )  ;", "assertFalse ( SortedRangeSet . none ( BigintType . BIGINT )  . contains ( SortedRangeSet . of ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  )  )  )  ;", "assertFalse ( SortedRangeSet . none ( BigintType . BIGINT )  . contains ( SortedRangeSet . of ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  ,    Range . lessThan ( BigintType . BIGINT ,     0 L )  )  )  )  ;", "assertFalse ( SortedRangeSet . of ( BigintType . BIGINT ,     0 L )  . contains ( SortedRangeSet . all ( BigintType . BIGINT )  )  )  ;", "assertTrue ( SortedRangeSet . of ( BigintType . BIGINT ,     0 L )  . contains ( SortedRangeSet . none ( BigintType . BIGINT )  )  )  ;", "assertTrue ( SortedRangeSet . of ( BigintType . BIGINT ,     0 L )  . contains ( SortedRangeSet . of ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertFalse ( SortedRangeSet . of ( BigintType . BIGINT ,     0 L )  . contains ( SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     0 L )  ,    Range . equal ( BigintType . BIGINT ,     1 L )  )  )  )  ;", "assertFalse ( SortedRangeSet . of ( BigintType . BIGINT ,     0 L )  . contains ( SortedRangeSet . of ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  )  )  )  ;", "assertFalse ( SortedRangeSet . of ( BigintType . BIGINT ,     0 L )  . contains ( SortedRangeSet . of ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  ,    Range . lessThan ( BigintType . BIGINT ,     0 L )  )  )  )  ;", "assertTrue ( SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     0 L )  ,    Range . equal ( BigintType . BIGINT ,     1 L )  )  . contains ( SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     1 L )  )  )  )  ;", "assertFalse ( SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     0 L )  ,    Range . equal ( BigintType . BIGINT ,     1 L )  )  . contains ( SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     1 L )  ,    Range . equal ( BigintType . BIGINT ,     2 L )  )  )  )  ;", "assertTrue ( SortedRangeSet . of ( Range . greaterThanOrEqual ( BigintType . BIGINT ,     0 L )  )  . contains ( SortedRangeSet . of ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  )  )  )  ;", "assertFalse ( SortedRangeSet . of ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  )  . contains ( SortedRangeSet . of ( Range . greaterThanOrEqual ( BigintType . BIGINT ,     0 L )  )  )  )  ;", "assertFalse ( SortedRangeSet . of ( Range . lessThan ( BigintType . BIGINT ,     0 L )  )  . contains ( SortedRangeSet . of ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testContains"], "fileName": "com.facebook.presto.spi.predicate.TestSortedRangeSet"}, {"methodBody": ["METHOD_START", "{", "SortedRangeSet   rangeSet    =    SortedRangeSet . none ( BigintType . BIGINT )  ;", "assertEquals ( rangeSet . getType (  )  ,    BigintType . BIGINT )  ;", "assertTrue ( rangeSet . isNone (  )  )  ;", "assertFalse ( rangeSet . isAll (  )  )  ;", "assertFalse ( rangeSet . isSingleValue (  )  )  ;", "assertTrue ( Iterables . isEmpty ( rangeSet . getOrderedRanges (  )  )  )  ;", "assertEquals ( rangeSet . getRangeCount (  )  ,     0  )  ;", "assertEquals ( rangeSet . complement (  )  ,    SortedRangeSet . all ( BigintType . BIGINT )  )  ;", "assertFalse ( rangeSet . includesMarker ( Marker . lowerUnbounded ( BigintType . BIGINT )  )  )  ;", "assertFalse ( rangeSet . includesMarker ( Marker . exactly ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertFalse ( rangeSet . includesMarker ( Marker . upperUnbounded ( BigintType . BIGINT )  )  )  ;", "}", "METHOD_END"], "methodName": ["testEmptySet"], "fileName": "com.facebook.presto.spi.predicate.TestSortedRangeSet"}, {"methodBody": ["METHOD_START", "{", "SortedRangeSet   rangeSet    =    SortedRangeSet . all ( BigintType . BIGINT )  ;", "assertEquals ( rangeSet . getType (  )  ,    BigintType . BIGINT )  ;", "assertFalse ( rangeSet . isNone (  )  )  ;", "assertTrue ( rangeSet . isAll (  )  )  ;", "assertFalse ( rangeSet . isSingleValue (  )  )  ;", "assertEquals ( rangeSet . getRangeCount (  )  ,     1  )  ;", "assertEquals ( rangeSet . complement (  )  ,    SortedRangeSet . none ( BigintType . BIGINT )  )  ;", "assertTrue ( rangeSet . includesMarker ( Marker . lowerUnbounded ( BigintType . BIGINT )  )  )  ;", "assertTrue ( rangeSet . includesMarker ( Marker . exactly ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertTrue ( rangeSet . includesMarker ( Marker . upperUnbounded ( BigintType . BIGINT )  )  )  ;", "}", "METHOD_END"], "methodName": ["testEntireSet"], "fileName": "com.facebook.presto.spi.predicate.TestSortedRangeSet"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( SortedRangeSet . of ( BigintType . BIGINT ,     0 L )  . getSingleValue (  )  ,     0 L )  ;", "try    {", "SortedRangeSet . all ( BigintType . BIGINT )  . getSingleValue (  )  ;", "fail (  )  ;", "}    catch    ( IllegalStateException   e )     {", "}", "}", "METHOD_END"], "methodName": ["testGetSingleValue"], "fileName": "com.facebook.presto.spi.predicate.TestSortedRangeSet"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( SortedRangeSet . none ( BigintType . BIGINT )  . intersect ( SortedRangeSet . none ( BigintType . BIGINT )  )  ,    SortedRangeSet . none ( BigintType . BIGINT )  )  ;", "assertEquals ( SortedRangeSet . all ( BigintType . BIGINT )  . intersect ( SortedRangeSet . all ( BigintType . BIGINT )  )  ,    SortedRangeSet . all ( BigintType . BIGINT )  )  ;", "assertEquals ( SortedRangeSet . none ( BigintType . BIGINT )  . intersect ( SortedRangeSet . all ( BigintType . BIGINT )  )  ,    SortedRangeSet . none ( BigintType . BIGINT )  )  ;", "assertEquals ( SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     1 L )  ,    Range . equal ( BigintType . BIGINT ,     2 L )  ,    Range . equal ( BigintType . BIGINT ,     3 L )  )  . intersect ( SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     2 L )  ,    Range . equal ( BigintType . BIGINT ,     4 L )  )  )  ,    SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     2 L )  )  )  ;", "assertEquals ( SortedRangeSet . all ( BigintType . BIGINT )  . intersect ( SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     2 L )  ,    Range . equal ( BigintType . BIGINT ,     4 L )  )  )  ,    SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     2 L )  ,    Range . equal ( BigintType . BIGINT ,     4 L )  )  )  ;", "assertEquals ( SortedRangeSet . of ( Range . range ( BigintType . BIGINT ,     0 L ,    true ,     4 L ,    false )  )  . intersect ( SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     2 L )  ,    Range . greaterThan ( BigintType . BIGINT ,     3 L )  )  )  ,    SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     2 L )  ,    Range . range ( BigintType . BIGINT ,     3 L ,    false ,     4 L ,    false )  )  )  ;", "assertEquals ( SortedRangeSet . of ( Range . greaterThanOrEqual ( BigintType . BIGINT ,     0 L )  )  . intersect ( SortedRangeSet . of ( Range . lessThanOrEqual ( BigintType . BIGINT ,     0 L )  )  )  ,    SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertEquals ( SortedRangeSet . of ( Range . greaterThanOrEqual ( BigintType . BIGINT ,     (  -  1 L )  )  )  . intersect ( SortedRangeSet . of ( Range . lessThanOrEqual ( BigintType . BIGINT ,     1 L )  )  )  ,    SortedRangeSet . of ( Range . range ( BigintType . BIGINT ,     (  -  1 L )  ,    true ,     1 L ,    true )  )  )  ;", "}", "METHOD_END"], "methodName": ["testIntersect"], "fileName": "com.facebook.presto.spi.predicate.TestSortedRangeSet"}, {"methodBody": ["METHOD_START", "{", "TestingTypeManager   typeManager    =    new   TestingTypeManager (  )  ;", "TestingBlockEncodingSerde   blockEncodingSerde    =    new   TestingBlockEncodingSerde ( typeManager )  ;", "ObjectMapper   mapper    =    new   ObjectMapperProvider (  )  . get (  )  . registerModule ( new   SimpleModule (  )  . addDeserializer ( Type . class ,    new   TestingTypeDeserializer ( typeManager )  )  . addSerializer ( Block . class ,    new   TestingBlockJsonSerde . Serializer ( blockEncodingSerde )  )  . addDeserializer ( Block . class ,    new   TestingBlockJsonSerde . Deserializer ( blockEncodingSerde )  )  )  ;", "set    =     . all ( BigintType . BIGINT )  ;", "assertEquals ( set ,    mapper . readValue ( mapper . writeValueAsString ( set )  ,     . class )  )  ;", "set    =     . none ( DoubleType . DOUBLE )  ;", "assertEquals ( set ,    mapper . readValue ( mapper . writeValueAsString ( set )  ,     . class )  )  ;", "set    =     . of ( VarcharType . VARCHAR ,    Slices . utf 8 Slice (  \" abc \"  )  )  ;", "assertEquals ( set ,    mapper . readValue ( mapper . writeValueAsString ( set )  ,     . class )  )  ;", "set    =     . of ( Range . equal ( BooleanType . BOOLEAN ,    true )  ,    Range . equal ( BooleanType . BOOLEAN ,    false )  )  ;", "assertEquals ( set ,    mapper . readValue ( mapper . writeValueAsString ( set )  ,     . class )  )  ;", "}", "METHOD_END"], "methodName": ["testJsonSerialization"], "fileName": "com.facebook.presto.spi.predicate.TestSortedRangeSet"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( SortedRangeSet . all ( BigintType . BIGINT )  . overlaps ( SortedRangeSet . all ( BigintType . BIGINT )  )  )  ;", "assertFalse ( SortedRangeSet . all ( BigintType . BIGINT )  . overlaps ( SortedRangeSet . none ( BigintType . BIGINT )  )  )  ;", "assertTrue ( SortedRangeSet . all ( BigintType . BIGINT )  . overlaps ( SortedRangeSet . of ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertTrue ( SortedRangeSet . all ( BigintType . BIGINT )  . overlaps ( SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     0 L )  ,    Range . equal ( BigintType . BIGINT ,     1 L )  )  )  )  ;", "assertTrue ( SortedRangeSet . all ( BigintType . BIGINT )  . overlaps ( SortedRangeSet . of ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  )  )  )  ;", "assertTrue ( SortedRangeSet . all ( BigintType . BIGINT )  . overlaps ( SortedRangeSet . of ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  ,    Range . lessThan ( BigintType . BIGINT ,     0 L )  )  )  )  ;", "assertFalse ( SortedRangeSet . none ( BigintType . BIGINT )  . overlaps ( SortedRangeSet . all ( BigintType . BIGINT )  )  )  ;", "assertFalse ( SortedRangeSet . none ( BigintType . BIGINT )  . overlaps ( SortedRangeSet . none ( BigintType . BIGINT )  )  )  ;", "assertFalse ( SortedRangeSet . none ( BigintType . BIGINT )  . overlaps ( SortedRangeSet . of ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertFalse ( SortedRangeSet . none ( BigintType . BIGINT )  . overlaps ( SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     0 L )  ,    Range . equal ( BigintType . BIGINT ,     1 L )  )  )  )  ;", "assertFalse ( SortedRangeSet . none ( BigintType . BIGINT )  . overlaps ( SortedRangeSet . of ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  )  )  )  ;", "assertFalse ( SortedRangeSet . none ( BigintType . BIGINT )  . overlaps ( SortedRangeSet . of ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  ,    Range . lessThan ( BigintType . BIGINT ,     0 L )  )  )  )  ;", "assertTrue ( SortedRangeSet . of ( BigintType . BIGINT ,     0 L )  . overlaps ( SortedRangeSet . all ( BigintType . BIGINT )  )  )  ;", "assertFalse ( SortedRangeSet . of ( BigintType . BIGINT ,     0 L )  . overlaps ( SortedRangeSet . none ( BigintType . BIGINT )  )  )  ;", "assertTrue ( SortedRangeSet . of ( BigintType . BIGINT ,     0 L )  . overlaps ( SortedRangeSet . of ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertTrue ( SortedRangeSet . of ( BigintType . BIGINT ,     0 L )  . overlaps ( SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     0 L )  ,    Range . equal ( BigintType . BIGINT ,     1 L )  )  )  )  ;", "assertFalse ( SortedRangeSet . of ( BigintType . BIGINT ,     0 L )  . overlaps ( SortedRangeSet . of ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  )  )  )  ;", "assertFalse ( SortedRangeSet . of ( BigintType . BIGINT ,     0 L )  . overlaps ( SortedRangeSet . of ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  ,    Range . lessThan ( BigintType . BIGINT ,     0 L )  )  )  )  ;", "assertTrue ( SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     0 L )  ,    Range . equal ( BigintType . BIGINT ,     1 L )  )  . overlaps ( SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     1 L )  )  )  )  ;", "assertFalse ( SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     0 L )  ,    Range . equal ( BigintType . BIGINT ,     1 L )  )  . overlaps ( SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     2 L )  )  )  )  ;", "assertTrue ( SortedRangeSet . of ( Range . greaterThanOrEqual ( BigintType . BIGINT ,     0 L )  )  . overlaps ( SortedRangeSet . of ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  )  )  )  ;", "assertTrue ( SortedRangeSet . of ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  )  . overlaps ( SortedRangeSet . of ( Range . greaterThanOrEqual ( BigintType . BIGINT ,     0 L )  )  )  )  ;", "assertFalse ( SortedRangeSet . of ( Range . lessThan ( BigintType . BIGINT ,     0 L )  )  . overlaps ( SortedRangeSet . of ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testOverlaps"], "fileName": "com.facebook.presto.spi.predicate.TestSortedRangeSet"}, {"methodBody": ["METHOD_START", "{", "SortedRangeSet   rangeSet    =    SortedRangeSet . of ( BigintType . BIGINT ,     1  0 L )  ;", "SortedRangeSet   complement    =    SortedRangeSet . of ( Range . greaterThan ( BigintType . BIGINT ,     1  0 L )  ,    Range . lessThan ( BigintType . BIGINT ,     1  0 L )  )  ;", "assertEquals ( rangeSet . getType (  )  ,    BigintType . BIGINT )  ;", "assertFalse ( rangeSet . isNone (  )  )  ;", "assertFalse ( rangeSet . isAll (  )  )  ;", "assertTrue ( rangeSet . isSingleValue (  )  )  ;", "assertTrue ( Iterables . elementsEqual ( rangeSet . getOrderedRanges (  )  ,    ImmutableList . of ( Range . equal ( BigintType . BIGINT ,     1  0 L )  )  )  )  ;", "assertEquals ( rangeSet . getRangeCount (  )  ,     1  )  ;", "assertEquals ( rangeSet . complement (  )  ,    complement )  ;", "assertFalse ( rangeSet . includesMarker ( Marker . lowerUnbounded ( BigintType . BIGINT )  )  )  ;", "assertTrue ( rangeSet . includesMarker ( Marker . exactly ( BigintType . BIGINT ,     1  0 L )  )  )  ;", "assertFalse ( rangeSet . includesMarker ( Marker . exactly ( BigintType . BIGINT ,     9 L )  )  )  ;", "assertFalse ( rangeSet . includesMarker ( Marker . upperUnbounded ( BigintType . BIGINT )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSingleValue"], "fileName": "com.facebook.presto.spi.predicate.TestSortedRangeSet"}, {"methodBody": ["METHOD_START", "{", "try    {", ". none ( BigintType . BIGINT )  . getSpan (  )  ;", "fail (  )  ;", "}    catch    ( IllegalStateException   e )     {", "}", "assertEquals (  . all ( BigintType . BIGINT )  . getSpan (  )  ,    Range . all ( BigintType . BIGINT )  )  ;", "assertEquals (  . of ( BigintType . BIGINT ,     0 L )  . getSpan (  )  ,    Range . equal ( BigintType . BIGINT ,     0 L )  )  ;", "assertEquals (  . of ( Range . equal ( BigintType . BIGINT ,     0 L )  ,    Range . equal ( BigintType . BIGINT ,     1 L )  )  . getSpan (  )  ,    Range . range ( BigintType . BIGINT ,     0 L ,    true ,     1 L ,    true )  )  ;", "assertEquals (  . of ( Range . equal ( BigintType . BIGINT ,     0 L )  ,    Range . greaterThan ( BigintType . BIGINT ,     1 L )  )  . getSpan (  )  ,    Range . greaterThanOrEqual ( BigintType . BIGINT ,     0 L )  )  ;", "assertEquals (  . of ( Range . lessThan ( BigintType . BIGINT ,     0 L )  ,    Range . greaterThan ( BigintType . BIGINT ,     1 L )  )  . getSpan (  )  ,    Range . all ( BigintType . BIGINT )  )  ;", "}", "METHOD_END"], "methodName": ["testSpan"], "fileName": "com.facebook.presto.spi.predicate.TestSortedRangeSet"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( SortedRangeSet . all ( BigintType . BIGINT )  . subtract ( SortedRangeSet . all ( BigintType . BIGINT )  )  ,    SortedRangeSet . none ( BigintType . BIGINT )  )  ;", "assertEquals ( SortedRangeSet . all ( BigintType . BIGINT )  . subtract ( SortedRangeSet . none ( BigintType . BIGINT )  )  ,    SortedRangeSet . all ( BigintType . BIGINT )  )  ;", "assertEquals ( SortedRangeSet . all ( BigintType . BIGINT )  . subtract ( SortedRangeSet . of ( BigintType . BIGINT ,     0 L )  )  ,    SortedRangeSet . of ( BigintType . BIGINT ,     0 L )  . complement (  )  )  ;", "assertEquals ( SortedRangeSet . all ( BigintType . BIGINT )  . subtract ( SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     0 L )  ,    Range . equal ( BigintType . BIGINT ,     1 L )  )  )  ,    SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     0 L )  ,    Range . equal ( BigintType . BIGINT ,     1 L )  )  . complement (  )  )  ;", "assertEquals ( SortedRangeSet . all ( BigintType . BIGINT )  . subtract ( SortedRangeSet . of ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  )  )  ,    SortedRangeSet . of ( Range . lessThanOrEqual ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertEquals ( SortedRangeSet . none ( BigintType . BIGINT )  . subtract ( SortedRangeSet . all ( BigintType . BIGINT )  )  ,    SortedRangeSet . none ( BigintType . BIGINT )  )  ;", "assertEquals ( SortedRangeSet . none ( BigintType . BIGINT )  . subtract ( SortedRangeSet . none ( BigintType . BIGINT )  )  ,    SortedRangeSet . none ( BigintType . BIGINT )  )  ;", "assertEquals ( SortedRangeSet . none ( BigintType . BIGINT )  . subtract ( SortedRangeSet . of ( BigintType . BIGINT ,     0 L )  )  ,    SortedRangeSet . none ( BigintType . BIGINT )  )  ;", "assertEquals ( SortedRangeSet . none ( BigintType . BIGINT )  . subtract ( SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     0 L )  ,    Range . equal ( BigintType . BIGINT ,     1 L )  )  )  ,    SortedRangeSet . none ( BigintType . BIGINT )  )  ;", "assertEquals ( SortedRangeSet . none ( BigintType . BIGINT )  . subtract ( SortedRangeSet . of ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  )  )  ,    SortedRangeSet . none ( BigintType . BIGINT )  )  ;", "assertEquals ( SortedRangeSet . of ( BigintType . BIGINT ,     0 L )  . subtract ( SortedRangeSet . all ( BigintType . BIGINT )  )  ,    SortedRangeSet . none ( BigintType . BIGINT )  )  ;", "assertEquals ( SortedRangeSet . of ( BigintType . BIGINT ,     0 L )  . subtract ( SortedRangeSet . none ( BigintType . BIGINT )  )  ,    SortedRangeSet . of ( BigintType . BIGINT ,     0 L )  )  ;", "assertEquals ( SortedRangeSet . of ( BigintType . BIGINT ,     0 L )  . subtract ( SortedRangeSet . of ( BigintType . BIGINT ,     0 L )  )  ,    SortedRangeSet . none ( BigintType . BIGINT )  )  ;", "assertEquals ( SortedRangeSet . of ( BigintType . BIGINT ,     0 L )  . subtract ( SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     0 L )  ,    Range . equal ( BigintType . BIGINT ,     1 L )  )  )  ,    SortedRangeSet . none ( BigintType . BIGINT )  )  ;", "assertEquals ( SortedRangeSet . of ( BigintType . BIGINT ,     0 L )  . subtract ( SortedRangeSet . of ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  )  )  ,    SortedRangeSet . of ( BigintType . BIGINT ,     0 L )  )  ;", "assertEquals ( SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     0 L )  ,    Range . equal ( BigintType . BIGINT ,     1 L )  )  . subtract ( SortedRangeSet . all ( BigintType . BIGINT )  )  ,    SortedRangeSet . none ( BigintType . BIGINT )  )  ;", "assertEquals ( SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     0 L )  ,    Range . equal ( BigintType . BIGINT ,     1 L )  )  . subtract ( SortedRangeSet . none ( BigintType . BIGINT )  )  ,    SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     0 L )  ,    Range . equal ( BigintType . BIGINT ,     1 L )  )  )  ;", "assertEquals ( SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     0 L )  ,    Range . equal ( BigintType . BIGINT ,     1 L )  )  . subtract ( SortedRangeSet . of ( BigintType . BIGINT ,     0 L )  )  ,    SortedRangeSet . of ( BigintType . BIGINT ,     1 L )  )  ;", "assertEquals ( SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     0 L )  ,    Range . equal ( BigintType . BIGINT ,     1 L )  )  . subtract ( SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     0 L )  ,    Range . equal ( BigintType . BIGINT ,     1 L )  )  )  ,    SortedRangeSet . none ( BigintType . BIGINT )  )  ;", "assertEquals ( SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     0 L )  ,    Range . equal ( BigintType . BIGINT ,     1 L )  )  . subtract ( SortedRangeSet . of ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  )  )  ,    SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertEquals ( SortedRangeSet . of ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  )  . subtract ( SortedRangeSet . all ( BigintType . BIGINT )  )  ,    SortedRangeSet . none ( BigintType . BIGINT )  )  ;", "assertEquals ( SortedRangeSet . of ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  )  . subtract ( SortedRangeSet . none ( BigintType . BIGINT )  )  ,    SortedRangeSet . of ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertEquals ( SortedRangeSet . of ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  )  . subtract ( SortedRangeSet . of ( BigintType . BIGINT ,     0 L )  )  ,    SortedRangeSet . of ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertEquals ( SortedRangeSet . of ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  )  . subtract ( SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     0 L )  ,    Range . equal ( BigintType . BIGINT ,     1 L )  )  )  ,    SortedRangeSet . of ( Range . range ( BigintType . BIGINT ,     0 L ,    false ,     1 L ,    false )  ,    Range . greaterThan ( BigintType . BIGINT ,     1 L )  )  )  ;", "assertEquals ( SortedRangeSet . of ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  )  . subtract ( SortedRangeSet . of ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  )  )  ,    SortedRangeSet . none ( BigintType . BIGINT )  )  ;", "}", "METHOD_END"], "methodName": ["testSubtract"], "fileName": "com.facebook.presto.spi.predicate.TestSortedRangeSet"}, {"methodBody": ["METHOD_START", "{", "SortedRangeSet   rangeSet    =    SortedRangeSet . of ( Range . greaterThan ( BigintType . BIGINT ,     1  0 L )  ,    Range . lessThanOrEqual ( BigintType . BIGINT ,     0 L )  ,    Range . range ( BigintType . BIGINT ,     2 L ,    true ,     4 L ,    false )  ,    Range . range ( BigintType . BIGINT ,     4 L ,    true ,     6 L ,    false )  ,    Range . range ( BigintType . BIGINT ,     1 L ,    false ,     2 L ,    false )  ,    Range . range ( BigintType . BIGINT ,     9 L ,    false ,     1  1 L ,    false )  )  ;", "ImmutableList < Range >    normalizedResult    =    ImmutableList . of ( Range . lessThanOrEqual ( BigintType . BIGINT ,     0 L )  ,    Range . range ( BigintType . BIGINT ,     1 L ,    false ,     6 L ,    false )  ,    Range . greaterThan ( BigintType . BIGINT ,     9 L )  )  ;", "SortedRangeSet   complement    =    SortedRangeSet . of ( Range . range ( BigintType . BIGINT ,     0 L ,    false ,     1 L ,    true )  ,    Range . range ( BigintType . BIGINT ,     6 L ,    true ,     9 L ,    true )  )  ;", "assertEquals ( rangeSet . getType (  )  ,    BigintType . BIGINT )  ;", "assertFalse ( rangeSet . isNone (  )  )  ;", "assertFalse ( rangeSet . isAll (  )  )  ;", "assertFalse ( rangeSet . isSingleValue (  )  )  ;", "assertTrue ( Iterables . elementsEqual ( rangeSet . getOrderedRanges (  )  ,    normalizedResult )  )  ;", "assertEquals ( rangeSet ,    SortedRangeSet . copyOf ( BigintType . BIGINT ,    normalizedResult )  )  ;", "assertEquals ( rangeSet . getRangeCount (  )  ,     3  )  ;", "assertEquals ( rangeSet . complement (  )  ,    complement )  ;", "assertTrue ( rangeSet . includesMarker ( Marker . lowerUnbounded ( BigintType . BIGINT )  )  )  ;", "assertTrue ( rangeSet . includesMarker ( Marker . exactly ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertTrue ( rangeSet . includesMarker ( Marker . exactly ( BigintType . BIGINT ,     4 L )  )  )  ;", "assertFalse ( rangeSet . includesMarker ( Marker . exactly ( BigintType . BIGINT ,     7 L )  )  )  ;", "assertTrue ( rangeSet . includesMarker ( Marker . upperUnbounded ( BigintType . BIGINT )  )  )  ;", "}", "METHOD_END"], "methodName": ["testUnboundedSet"], "fileName": "com.facebook.presto.spi.predicate.TestSortedRangeSet"}, {"methodBody": ["METHOD_START", "{", "assertUnion ( SortedRangeSet . none ( BigintType . BIGINT )  ,    SortedRangeSet . none ( BigintType . BIGINT )  ,    SortedRangeSet . none ( BigintType . BIGINT )  )  ;", "assertUnion ( SortedRangeSet . all ( BigintType . BIGINT )  ,    SortedRangeSet . all ( BigintType . BIGINT )  ,    SortedRangeSet . all ( BigintType . BIGINT )  )  ;", "assertUnion ( SortedRangeSet . none ( BigintType . BIGINT )  ,    SortedRangeSet . all ( BigintType . BIGINT )  ,    SortedRangeSet . all ( BigintType . BIGINT )  )  ;", "assertUnion ( SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     1 L )  ,    Range . equal ( BigintType . BIGINT ,     2 L )  )  ,    SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     2 L )  ,    Range . equal ( BigintType . BIGINT ,     3 L )  )  ,    SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     1 L )  ,    Range . equal ( BigintType . BIGINT ,     2 L )  ,    Range . equal ( BigintType . BIGINT ,     3 L )  )  )  ;", "assertUnion ( SortedRangeSet . all ( BigintType . BIGINT )  ,    SortedRangeSet . of ( Range . equal ( BigintType . BIGINT ,     0 L )  )  ,    SortedRangeSet . all ( BigintType . BIGINT )  )  ;", "assertUnion ( SortedRangeSet . of ( Range . range ( BigintType . BIGINT ,     0 L ,    true ,     4 L ,    false )  )  ,    SortedRangeSet . of ( Range . greaterThan ( BigintType . BIGINT ,     3 L )  )  ,    SortedRangeSet . of ( Range . greaterThanOrEqual ( BigintType . BIGINT ,     0 L )  )  )  ;", "assertUnion ( SortedRangeSet . of ( Range . greaterThanOrEqual ( BigintType . BIGINT ,     0 L )  )  ,    SortedRangeSet . of ( Range . lessThanOrEqual ( BigintType . BIGINT ,     0 L )  )  ,    SortedRangeSet . of ( Range . all ( BigintType . BIGINT )  )  )  ;", "assertUnion ( SortedRangeSet . of ( Range . greaterThan ( BigintType . BIGINT ,     0 L )  )  ,    SortedRangeSet . of ( Range . lessThan ( BigintType . BIGINT ,     0 L )  )  ,    SortedRangeSet . of ( BigintType . BIGINT ,     0 L )  . complement (  )  )  ;", "}", "METHOD_END"], "methodName": ["testUnion"], "fileName": "com.facebook.presto.spi.predicate.TestSortedRangeSet"}, {"methodBody": ["METHOD_START", "{", "TupleDomain < ColumnHandle >    superSetTupleDomain    =    TupleDomain . withColumnDomains ( superSet )  ;", "TupleDomain < ColumnHandle >    subSetTupleDomain    =    TupleDomain . withColumnDomains ( subSet )  ;", "return   superSetTupleDomain . contains ( subSetTupleDomain )  ;", "}", "METHOD_END"], "methodName": ["contains"], "fileName": "com.facebook.presto.spi.predicate.TestTupleDomain"}, {"methodBody": ["METHOD_START", "{", "TupleDomain < ColumnHandle >    tupleDomain 1     =    TupleDomain . withColumnDomains ( domains 1  )  ;", "TupleDomain < ColumnHandle >    tupleDOmain 2     =    TupleDomain . withColumnDomains ( domains 2  )  ;", "return   tupleDomain 1  . equals ( tupleDOmain 2  )  ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "com.facebook.presto.spi.predicate.TestTupleDomain"}, {"methodBody": ["METHOD_START", "{", "TupleDomain < ColumnHandle >    tupleDomain 1     =    TupleDomain . withColumnDomains ( domains 1  )  ;", "TupleDomain < ColumnHandle >    tupleDOmain 2     =    TupleDomain . withColumnDomains ( domains 2  )  ;", "return   tupleDomain 1  . overlaps ( tupleDOmain 2  )  ;", "}", "METHOD_END"], "methodName": ["overlaps"], "fileName": "com.facebook.presto.spi.predicate.TestTupleDomain"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( TupleDomain . all (  )  . isAll (  )  )  ;", "assertEquals ( TupleDomain .  < ColumnHandle > all (  )  ,    TupleDomain . withColumnDomains ( ImmutableMap . of (  . A ,    Domain . all ( BigintType . BIGINT )  )  )  )  ;", "assertEquals ( TupleDomain .  < ColumnHandle > all (  )  ,    TupleDomain . withColumnDomains ( ImmutableMap .  < ColumnHandle ,    Domain > of (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testAll"], "fileName": "com.facebook.presto.spi.predicate.TestTupleDomain"}, {"methodBody": ["METHOD_START", "{", "TupleDomain < ColumnHandle >    tupleDomain 1     =    TupleDomain . withColumnDomains ( ImmutableMap .  < ColumnHandle ,    Domain > builder (  )  . put ( TestTupleDomain . A ,    Domain . all ( VarcharType . VARCHAR )  )  . put ( TestTupleDomain . B ,    Domain . notNull ( DoubleType . DOUBLE )  )  . put ( TestTupleDomain . C ,    Domain . onlyNull ( BigintType . BIGINT )  )  . put ( TestTupleDomain . D ,    Domain . singleValue ( BigintType . BIGINT ,     1 L )  )  . put ( TestTupleDomain . E ,    Domain . create ( ValueSet . ofRanges ( Range . greaterThanOrEqual ( DoubleType . DOUBLE ,     0  .  0  )  )  ,    true )  )  . build (  )  )  ;", "TupleDomain < ColumnHandle >    tupleDomain 2     =    TupleDomain . withColumnDomains ( ImmutableMap .  < ColumnHandle ,    Domain > builder (  )  . put ( TestTupleDomain . A ,    Domain . singleValue ( VarcharType . VARCHAR ,    Slices . utf 8 Slice (  \" value \"  )  )  )  . put ( TestTupleDomain . B ,    Domain . singleValue ( DoubleType . DOUBLE ,     0  .  0  )  )  . put ( TestTupleDomain . C ,    Domain . notNull ( BigintType . BIGINT )  )  . put ( TestTupleDomain . D ,    Domain . singleValue ( BigintType . BIGINT ,     1 L )  )  . put ( TestTupleDomain . E ,    Domain . create ( ValueSet . ofRanges ( Range . lessThan ( DoubleType . DOUBLE ,     1  0  .  0  )  )  ,    false )  )  . build (  )  )  ;", "TupleDomain < ColumnHandle >    expectedTupleDomain    =    TupleDomain . withColumnDomains ( ImmutableMap .  < ColumnHandle ,    Domain > builder (  )  . put ( TestTupleDomain . A ,    Domain . all ( VarcharType . VARCHAR )  )  . put ( TestTupleDomain . B ,    Domain . notNull ( DoubleType . DOUBLE )  )  . put ( TestTupleDomain . C ,    Domain . all ( BigintType . BIGINT )  )  . put ( TestTupleDomain . D ,    Domain . singleValue ( BigintType . BIGINT ,     1 L )  )  . put ( TestTupleDomain . E ,    Domain . all ( DoubleType . DOUBLE )  )  . build (  )  )  ;", "assertEquals ( TupleDomain . columnWiseUnion ( tupleDomain 1  ,    tupleDomain 2  )  ,    expectedTupleDomain )  ;", "}", "METHOD_END"], "methodName": ["testColumnWiseUnion"], "fileName": "com.facebook.presto.spi.predicate.TestTupleDomain"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( contains ( ImmutableMap . of (  )  ,    ImmutableMap . of (  )  )  )  ;", "assertTrue ( contains ( ImmutableMap . of (  )  ,    ImmutableMap . of (  . A ,    Domain . none ( BigintType . BIGINT )  )  )  )  ;", "assertTrue ( contains ( ImmutableMap . of (  )  ,    ImmutableMap . of (  . A ,    Domain . all ( BigintType . BIGINT )  )  )  )  ;", "assertTrue ( contains ( ImmutableMap . of (  )  ,    ImmutableMap . of (  . A ,    Domain . singleValue ( DoubleType . DOUBLE ,     0  .  0  )  )  )  )  ;", "assertFalse ( contains ( ImmutableMap . of (  . A ,    Domain . none ( BigintType . BIGINT )  )  ,    ImmutableMap . of (  )  )  )  ;", "assertTrue ( contains ( ImmutableMap . of (  . A ,    Domain . none ( BigintType . BIGINT )  )  ,    ImmutableMap . of (  . A ,    Domain . none ( BigintType . BIGINT )  )  )  )  ;", "assertFalse ( contains ( ImmutableMap . of (  . A ,    Domain . none ( BigintType . BIGINT )  )  ,    ImmutableMap . of (  . A ,    Domain . all ( BigintType . BIGINT )  )  )  )  ;", "assertFalse ( contains ( ImmutableMap . of (  . A ,    Domain . none ( BigintType . BIGINT )  )  ,    ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  )  )  ;", "assertTrue ( contains ( ImmutableMap . of (  . A ,    Domain . all ( BigintType . BIGINT )  )  ,    ImmutableMap . of (  )  )  )  ;", "assertTrue ( contains ( ImmutableMap . of (  . A ,    Domain . all ( BigintType . BIGINT )  )  ,    ImmutableMap . of (  . A ,    Domain . none ( BigintType . BIGINT )  )  )  )  ;", "assertTrue ( contains ( ImmutableMap . of (  . A ,    Domain . all ( BigintType . BIGINT )  )  ,    ImmutableMap . of (  . A ,    Domain . all ( BigintType . BIGINT )  )  )  )  ;", "assertTrue ( contains ( ImmutableMap . of (  . A ,    Domain . all ( BigintType . BIGINT )  )  ,    ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  )  )  ;", "assertFalse ( contains ( ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  ,    ImmutableMap . of (  )  )  )  ;", "assertTrue ( contains ( ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  ,    ImmutableMap . of (  . A ,    Domain . none ( BigintType . BIGINT )  )  )  )  ;", "assertFalse ( contains ( ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  ,    ImmutableMap . of (  . A ,    Domain . all ( BigintType . BIGINT )  )  )  )  ;", "assertTrue ( contains ( ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  ,    ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  )  )  ;", "assertFalse ( contains ( ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  ,    ImmutableMap . of (  . B ,    Domain . singleValue ( VarcharType . VARCHAR ,    Slices . utf 8 Slice (  \" value \"  )  )  )  )  )  ;", "assertFalse ( contains ( ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  ,     . B ,    Domain . singleValue ( VarcharType . VARCHAR ,    Slices . utf 8 Slice (  \" value \"  )  )  )  ,    ImmutableMap . of (  . B ,    Domain . singleValue ( VarcharType . VARCHAR ,    Slices . utf 8 Slice (  \" value \"  )  )  )  )  )  ;", "assertTrue ( contains ( ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  ,     . B ,    Domain . singleValue ( VarcharType . VARCHAR ,    Slices . utf 8 Slice (  \" value \"  )  )  )  ,    ImmutableMap . of (  . B ,    Domain . none ( VarcharType . VARCHAR )  )  )  )  ;", "assertTrue ( contains ( ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  ,     . B ,    Domain . singleValue ( VarcharType . VARCHAR ,    Slices . utf 8 Slice (  \" value \"  )  )  )  ,    ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     1 L )  ,     . B ,    Domain . none ( VarcharType . VARCHAR )  )  )  )  ;", "assertTrue ( contains ( ImmutableMap . of (  . B ,    Domain . singleValue ( VarcharType . VARCHAR ,    Slices . utf 8 Slice (  \" value \"  )  )  )  ,    ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  ,     . B ,    Domain . singleValue ( VarcharType . VARCHAR ,    Slices . utf 8 Slice (  \" value \"  )  )  )  )  )  ;", "assertTrue ( contains ( ImmutableMap . of (  . A ,    Domain . all ( BigintType . BIGINT )  ,     . B ,    Domain . singleValue ( VarcharType . VARCHAR ,    Slices . utf 8 Slice (  \" value \"  )  )  )  ,    ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  ,     . B ,    Domain . singleValue ( VarcharType . VARCHAR ,    Slices . utf 8 Slice (  \" value \"  )  )  )  )  )  ;", "assertFalse ( contains ( ImmutableMap . of (  . A ,    Domain . all ( BigintType . BIGINT )  ,     . B ,    Domain . singleValue ( VarcharType . VARCHAR ,    Slices . utf 8 Slice (  \" value \"  )  )  )  ,    ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  ,     . B ,    Domain . singleValue ( VarcharType . VARCHAR ,    Slices . utf 8 Slice (  \" value 2  \"  )  )  )  )  )  ;", "assertTrue ( contains ( ImmutableMap . of (  . A ,    Domain . all ( BigintType . BIGINT )  ,     . B ,    Domain . singleValue ( VarcharType . VARCHAR ,    Slices . utf 8 Slice (  \" value \"  )  )  )  ,    ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  ,     . B ,    Domain . singleValue ( VarcharType . VARCHAR ,    Slices . utf 8 Slice (  \" value 2  \"  )  )  ,     . C ,    Domain . none ( VarcharType . VARCHAR )  )  )  )  ;", "assertFalse ( contains ( ImmutableMap . of (  . A ,    Domain . all ( BigintType . BIGINT )  ,     . B ,    Domain . singleValue ( VarcharType . VARCHAR ,    Slices . utf 8 Slice (  \" value \"  )  )  ,     . C ,    Domain . none ( VarcharType . VARCHAR )  )  ,    ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  ,     . B ,    Domain . singleValue ( VarcharType . VARCHAR ,    Slices . utf 8 Slice (  \" value 2  \"  )  )  )  )  )  ;", "assertTrue ( contains ( ImmutableMap . of (  . A ,    Domain . all ( BigintType . BIGINT )  ,     . B ,    Domain . singleValue ( VarcharType . VARCHAR ,    Slices . utf 8 Slice (  \" value \"  )  )  ,     . C ,    Domain . none ( VarcharType . VARCHAR )  )  ,    ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  ,     . B ,    Domain . none ( VarcharType . VARCHAR )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testContains"], "fileName": "com.facebook.presto.spi.predicate.TestTupleDomain"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( TupleDomain . fromFixedValues ( ImmutableMap . of (  )  )  ,    TupleDomain . all (  )  )  ;", "}", "METHOD_END"], "methodName": ["testEmptySingleValuesMapToDomain"], "fileName": "com.facebook.presto.spi.predicate.TestTupleDomain"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( equals ( ImmutableMap . of (  )  ,    ImmutableMap . of (  )  )  )  ;", "assertTrue ( equals ( ImmutableMap . of (  )  ,    ImmutableMap . of (  . A ,    Domain . all ( BigintType . BIGINT )  )  )  )  ;", "assertFalse ( equals ( ImmutableMap . of (  )  ,    ImmutableMap . of (  . A ,    Domain . none ( BigintType . BIGINT )  )  )  )  ;", "assertFalse ( equals ( ImmutableMap . of (  )  ,    ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  )  )  ;", "assertTrue ( equals ( ImmutableMap . of (  . A ,    Domain . all ( BigintType . BIGINT )  )  ,    ImmutableMap . of (  . A ,    Domain . all ( BigintType . BIGINT )  )  )  )  ;", "assertFalse ( equals ( ImmutableMap . of (  . A ,    Domain . all ( BigintType . BIGINT )  )  ,    ImmutableMap . of (  . A ,    Domain . none ( BigintType . BIGINT )  )  )  )  ;", "assertFalse ( equals ( ImmutableMap . of (  . A ,    Domain . all ( BigintType . BIGINT )  )  ,    ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  )  )  ;", "assertTrue ( equals ( ImmutableMap . of (  . A ,    Domain . none ( BigintType . BIGINT )  )  ,    ImmutableMap . of (  . A ,    Domain . none ( BigintType . BIGINT )  )  )  )  ;", "assertFalse ( equals ( ImmutableMap . of (  . A ,    Domain . none ( BigintType . BIGINT )  )  ,    ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  )  )  ;", "assertTrue ( equals ( ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  ,    ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  )  )  ;", "assertFalse ( equals ( ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  ,    ImmutableMap . of (  . B ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  )  )  ;", "assertFalse ( equals ( ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  ,    ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     1 L )  )  )  )  ;", "assertTrue ( equals ( ImmutableMap . of (  . A ,    Domain . all ( BigintType . BIGINT )  )  ,    ImmutableMap . of (  . B ,    Domain . all ( VarcharType . VARCHAR )  )  )  )  ;", "assertTrue ( equals ( ImmutableMap . of (  . A ,    Domain . none ( BigintType . BIGINT )  )  ,    ImmutableMap . of (  . B ,    Domain . none ( VarcharType . VARCHAR )  )  )  )  ;", "assertTrue ( equals ( ImmutableMap . of (  . A ,    Domain . none ( BigintType . BIGINT )  )  ,    ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  ,     . B ,    Domain . none ( VarcharType . VARCHAR )  )  )  )  ;", "assertFalse ( equals ( ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     1 L )  )  ,    ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  ,     . B ,    Domain . none ( VarcharType . VARCHAR )  )  )  )  ;", "assertTrue ( equals ( ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     1 L )  ,     . C ,    Domain . none ( DoubleType . DOUBLE )  )  ,    ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  ,     . B ,    Domain . none ( VarcharType . VARCHAR )  )  )  )  ;", "assertTrue ( equals ( ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  ,     . B ,    Domain . all ( DoubleType . DOUBLE )  )  ,    ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  ,     . B ,    Domain . all ( DoubleType . DOUBLE )  )  )  )  ;", "assertTrue ( equals ( ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  ,     . B ,    Domain . all ( VarcharType . VARCHAR )  )  ,    ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  ,     . C ,    Domain . all ( DoubleType . DOUBLE )  )  )  )  ;", "assertFalse ( equals ( ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  ,     . B ,    Domain . all ( VarcharType . VARCHAR )  )  ,    ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     1 L )  ,     . C ,    Domain . all ( DoubleType . DOUBLE )  )  )  )  ;", "assertFalse ( equals ( ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  ,     . B ,    Domain . all ( VarcharType . VARCHAR )  )  ,    ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  ,     . C ,    Domain . singleValue ( DoubleType . DOUBLE ,     0  .  0  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testEquals"], "fileName": "com.facebook.presto.spi.predicate.TestTupleDomain"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( TupleDomain . extractFixedValues ( TupleDomain . withColumnDomains ( ImmutableMap .  < ColumnHandle ,    Domain > builder (  )  . put ( TestTupleDomain . A ,    Domain . all ( DoubleType . DOUBLE )  )  . put ( TestTupleDomain . B ,    Domain . singleValue ( VarcharType . VARCHAR ,    Slices . utf 8 Slice (  \" value \"  )  )  )  . put ( TestTupleDomain . C ,    Domain . onlyNull ( BigintType . BIGINT )  )  . put ( TestTupleDomain . D ,    Domain . create ( ValueSet . ofRanges ( Range . equal ( BigintType . BIGINT ,     1 L )  )  ,    true )  )  . build (  )  )  )  . get (  )  ,    ImmutableMap . of ( TestTupleDomain . B ,    NullableValue . of ( VarcharType . VARCHAR ,    Slices . utf 8 Slice (  \" value \"  )  )  ,    TestTupleDomain . C ,    NullableValue . asNull ( BigintType . BIGINT )  )  )  ;", "}", "METHOD_END"], "methodName": ["testExtractFixedValues"], "fileName": "com.facebook.presto.spi.predicate.TestTupleDomain"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( TupleDomain . extractFixedValues ( TupleDomain . all (  )  )  . get (  )  ,    ImmutableMap . of (  )  )  ;", "}", "METHOD_END"], "methodName": ["testExtractFixedValuesFromAll"], "fileName": "com.facebook.presto.spi.predicate.TestTupleDomain"}, {"methodBody": ["METHOD_START", "{", "assertFalse ( TupleDomain . extractFixedValues ( TupleDomain . none (  )  )  . isPresent (  )  )  ;", "}", "METHOD_END"], "methodName": ["testExtractFixedValuesFromNone"], "fileName": "com.facebook.presto.spi.predicate.TestTupleDomain"}, {"methodBody": ["METHOD_START", "{", "TupleDomain < ColumnHandle >    tupleDomain 1     =    TupleDomain . withColumnDomains ( ImmutableMap .  < ColumnHandle ,    Domain > builder (  )  . put ( TestTupleDomain . A ,    Domain . all ( VarcharType . VARCHAR )  )  . put ( TestTupleDomain . B ,    Domain . notNull ( DoubleType . DOUBLE )  )  . put ( TestTupleDomain . C ,    Domain . singleValue ( BigintType . BIGINT ,     1 L )  )  . put ( TestTupleDomain . D ,    Domain . create ( ValueSet . ofRanges ( Range . greaterThanOrEqual ( DoubleType . DOUBLE ,     0  .  0  )  )  ,    true )  )  . build (  )  )  ;", "TupleDomain < ColumnHandle >    tupleDomain 2     =    TupleDomain . withColumnDomains ( ImmutableMap .  < ColumnHandle ,    Domain > builder (  )  . put ( TestTupleDomain . A ,    Domain . singleValue ( VarcharType . VARCHAR ,    Slices . utf 8 Slice (  \" value \"  )  )  )  . put ( TestTupleDomain . B ,    Domain . singleValue ( DoubleType . DOUBLE ,     0  .  0  )  )  . put ( TestTupleDomain . C ,    Domain . singleValue ( BigintType . BIGINT ,     1 L )  )  . put ( TestTupleDomain . D ,    Domain . create ( ValueSet . ofRanges ( Range . lessThan ( DoubleType . DOUBLE ,     1  0  .  0  )  )  ,    false )  )  . build (  )  )  ;", "TupleDomain < ColumnHandle >    expectedTupleDomain    =    TupleDomain . withColumnDomains ( ImmutableMap .  < ColumnHandle ,    Domain > builder (  )  . put ( TestTupleDomain . A ,    Domain . singleValue ( VarcharType . VARCHAR ,    Slices . utf 8 Slice (  \" value \"  )  )  )  . put ( TestTupleDomain . B ,    Domain . singleValue ( DoubleType . DOUBLE ,     0  .  0  )  )  . put ( TestTupleDomain . C ,    Domain . singleValue ( BigintType . BIGINT ,     1 L )  )  . put ( TestTupleDomain . D ,    Domain . create ( ValueSet . ofRanges ( Range . range ( DoubleType . DOUBLE ,     0  .  0  ,    true ,     1  0  .  0  ,    false )  )  ,    false )  )  . build (  )  )  ;", "assertEquals ( tupleDomain 1  . intersect ( tupleDomain 2  )  ,    expectedTupleDomain )  ;", "}", "METHOD_END"], "methodName": ["testIntersection"], "fileName": "com.facebook.presto.spi.predicate.TestTupleDomain"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( TupleDomain . withColumnDomains ( ImmutableMap .  < ColumnHandle ,    Domain > of (  )  )  . isAll (  )  )  ;", "assertFalse ( TupleDomain . withColumnDomains ( ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  )  . isAll (  )  )  ;", "assertTrue ( TupleDomain . withColumnDomains ( ImmutableMap . of (  . A ,    Domain . all ( BigintType . BIGINT )  )  )  . isAll (  )  )  ;", "assertFalse ( TupleDomain . withColumnDomains ( ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  ,     . B ,    Domain . all ( BigintType . BIGINT )  )  )  . isAll (  )  )  ;", "}", "METHOD_END"], "methodName": ["testIsAll"], "fileName": "com.facebook.presto.spi.predicate.TestTupleDomain"}, {"methodBody": ["METHOD_START", "{", "assertFalse ( TupleDomain . withColumnDomains ( ImmutableMap .  < ColumnHandle ,    Domain > of (  )  )  . isNone (  )  )  ;", "assertFalse ( TupleDomain . withColumnDomains ( ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  )  . isNone (  )  )  ;", "assertTrue ( TupleDomain . withColumnDomains ( ImmutableMap . of (  . A ,    Domain . none ( BigintType . BIGINT )  )  )  . isNone (  )  )  ;", "assertFalse ( TupleDomain . withColumnDomains ( ImmutableMap . of (  . A ,    Domain . all ( BigintType . BIGINT )  )  )  . isNone (  )  )  ;", "assertTrue ( TupleDomain . withColumnDomains ( ImmutableMap . of (  . A ,    Domain . all ( BigintType . BIGINT )  ,     . B ,    Domain . none ( BigintType . BIGINT )  )  )  . isNone (  )  )  ;", "}", "METHOD_END"], "methodName": ["testIsNone"], "fileName": "com.facebook.presto.spi.predicate.TestTupleDomain"}, {"methodBody": ["METHOD_START", "{", "TestingTypeManager   typeManager    =    new   TestingTypeManager (  )  ;", "TestingBlockEncodingSerde   blockEncodingSerde    =    new   TestingBlockEncodingSerde ( typeManager )  ;", "ObjectMapper   mapper    =    new   ObjectMapperProvider (  )  . get (  )  . registerModule ( new   SimpleModule (  )  . addDeserializer ( ColumnHandle . class ,    new   JsonDeserializer < ColumnHandle >  (  )     {", "@ Override", "public   ColumnHandle   deserialize ( JsonParser   jsonParser ,    DeserializationContext   deserializationContext )    throws   IOException    {", "return   new   ObjectMapperProvider (  )  . get (  )  . readValue ( jsonParser ,    TestingColumnHandle . class )  ;", "}", "}  )  . addDeserializer ( Type . class ,    new   TestingTypeDeserializer ( typeManager )  )  . addSerializer ( Block . class ,    new   TestingBlockJsonSerde . Serializer ( blockEncodingSerde )  )  . addDeserializer ( Block . class ,    new   TestingBlockJsonSerde . Deserializer ( blockEncodingSerde )  )  )  ;", "TupleDomain < ColumnHandle >    tupleDomain    =    TupleDomain . all (  )  ;", "assertEquals ( tupleDomain ,    mapper . readValue ( mapper . writeValueAsString ( tupleDomain )  ,    new   TypeReference < TupleDomain < ColumnHandle >  >  (  )     {  }  )  )  ;", "tupleDomain    =    TupleDomain . none (  )  ;", "assertEquals ( tupleDomain ,    mapper . readValue ( mapper . writeValueAsString ( tupleDomain )  ,    new   TypeReference < TupleDomain < ColumnHandle >  >  (  )     {  }  )  )  ;", "tupleDomain    =    TupleDomain . fromFixedValues ( ImmutableMap . of (  . A ,    NullableValue . of ( BigintType . BIGINT ,     1 L )  ,     . B ,    NullableValue . asNull ( VarcharType . VARCHAR )  )  )  ;", "assertEquals ( tupleDomain ,    mapper . readValue ( mapper . writeValueAsString ( tupleDomain )  ,    new   TypeReference < TupleDomain < ColumnHandle >  >  (  )     {  }  )  )  ;", "}", "METHOD_END"], "methodName": ["testJsonSerialization"], "fileName": "com.facebook.presto.spi.predicate.TestTupleDomain"}, {"methodBody": ["METHOD_START", "{", "TupleDomain < ColumnHandle >    tupleDomain 1     =    TupleDomain . withColumnDomains ( ImmutableMap . of ( TestTupleDomain . A ,    Domain . all ( DoubleType . DOUBLE )  ,    TestTupleDomain . B ,    Domain . singleValue ( VarcharType . VARCHAR ,    Slices . utf 8 Slice (  \" value \"  )  )  )  )  ;", "TupleDomain < ColumnHandle >    tupleDomain 2     =    TupleDomain . withColumnDomains ( ImmutableMap . of ( TestTupleDomain . A ,    Domain . create ( ValueSet . ofRanges ( Range . greaterThanOrEqual ( DoubleType . DOUBLE ,     0  .  0  )  )  ,    true )  ,    TestTupleDomain . C ,    Domain . singleValue ( BigintType . BIGINT ,     1 L )  )  )  ;", "TupleDomain < ColumnHandle >    expectedTupleDomain    =    TupleDomain . withColumnDomains ( ImmutableMap . of ( TestTupleDomain . A ,    Domain . create ( ValueSet . ofRanges ( Range . greaterThanOrEqual ( DoubleType . DOUBLE ,     0  .  0  )  )  ,    true )  ,    TestTupleDomain . B ,    Domain . singleValue ( VarcharType . VARCHAR ,    Slices . utf 8 Slice (  \" value \"  )  )  ,    TestTupleDomain . C ,    Domain . singleValue ( BigintType . BIGINT ,     1 L )  )  )  ;", "assertEquals ( tupleDomain 1  . intersect ( tupleDomain 2  )  ,    expectedTupleDomain )  ;", "}", "METHOD_END"], "methodName": ["testMismatchedColumnIntersection"], "fileName": "com.facebook.presto.spi.predicate.TestTupleDomain"}, {"methodBody": ["METHOD_START", "{", "TupleDomain < ColumnHandle >    tupleDomain 1     =    TupleDomain . withColumnDomains ( ImmutableMap . of ( TestTupleDomain . A ,    Domain . all ( DoubleType . DOUBLE )  ,    TestTupleDomain . B ,    Domain . singleValue ( VarcharType . VARCHAR ,    Slices . utf 8 Slice (  \" value \"  )  )  )  )  ;", "TupleDomain < ColumnHandle >    tupleDomain 2     =    TupleDomain . withColumnDomains ( ImmutableMap . of ( TestTupleDomain . A ,    Domain . create ( ValueSet . ofRanges ( Range . greaterThanOrEqual ( DoubleType . DOUBLE ,     0  .  0  )  )  ,    true )  ,    TestTupleDomain . C ,    Domain . singleValue ( BigintType . BIGINT ,     1 L )  )  )  ;", "TupleDomain < ColumnHandle >    expectedTupleDomain    =    TupleDomain . withColumnDomains ( ImmutableMap . of ( TestTupleDomain . A ,    Domain . all ( DoubleType . DOUBLE )  )  )  ;", "assertEquals ( TupleDomain . columnWiseUnion ( tupleDomain 1  ,    tupleDomain 2  )  ,    expectedTupleDomain )  ;", "}", "METHOD_END"], "methodName": ["testMismatchedColumnWiseUnion"], "fileName": "com.facebook.presto.spi.predicate.TestTupleDomain"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( TupleDomain . none (  )  . isNone (  )  )  ;", "assertEquals ( TupleDomain .  < ColumnHandle > none (  )  ,    TupleDomain . withColumnDomains ( ImmutableMap . of (  . A ,    Domain . none ( BigintType . BIGINT )  )  )  )  ;", "assertEquals ( TupleDomain .  < ColumnHandle > none (  )  ,    TupleDomain . withColumnDomains ( ImmutableMap . of (  . A ,    Domain . all ( BigintType . BIGINT )  ,     . B ,    Domain . none ( VarcharType . VARCHAR )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testNone"], "fileName": "com.facebook.presto.spi.predicate.TestTupleDomain"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( TupleDomain . columnWiseUnion ( TupleDomain . none (  )  ,    TupleDomain . all (  )  )  ,    TupleDomain . all (  )  )  ;", "assertEquals ( TupleDomain . columnWiseUnion ( TupleDomain . all (  )  ,    TupleDomain . none (  )  )  ,    TupleDomain . all (  )  )  ;", "assertEquals ( TupleDomain . columnWiseUnion ( TupleDomain . none (  )  ,    TupleDomain . none (  )  )  ,    TupleDomain . none (  )  )  ;", "assertEquals ( TupleDomain . columnWiseUnion ( TupleDomain . withColumnDomains ( ImmutableMap . of (  . A ,    Domain . onlyNull ( BigintType . BIGINT )  )  )  ,    TupleDomain . withColumnDomains ( ImmutableMap . of (  . A ,    Domain . notNull ( BigintType . BIGINT )  )  )  )  ,    TupleDomain .  < ColumnHandle > all (  )  )  ;", "}", "METHOD_END"], "methodName": ["testNoneColumnWiseUnion"], "fileName": "com.facebook.presto.spi.predicate.TestTupleDomain"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( TupleDomain . none (  )  . intersect ( TupleDomain . all (  )  )  ,    TupleDomain . none (  )  )  ;", "assertEquals ( TupleDomain . all (  )  . intersect ( TupleDomain . none (  )  )  ,    TupleDomain . none (  )  )  ;", "assertEquals ( TupleDomain . none (  )  . intersect ( TupleDomain . none (  )  )  ,    TupleDomain . none (  )  )  ;", "assertEquals ( TupleDomain . withColumnDomains ( ImmutableMap . of (  . A ,    Domain . onlyNull ( BigintType . BIGINT )  )  )  . intersect ( TupleDomain . withColumnDomains ( ImmutableMap . of (  . A ,    Domain . notNull ( BigintType . BIGINT )  )  )  )  ,    TupleDomain .  < ColumnHandle > none (  )  )  ;", "}", "METHOD_END"], "methodName": ["testNoneIntersection"], "fileName": "com.facebook.presto.spi.predicate.TestTupleDomain"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( overlaps ( ImmutableMap . of (  )  ,    ImmutableMap . of (  )  )  )  ;", "assertTrue ( overlaps ( ImmutableMap . of (  )  ,    ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     0 L )  )  )  )  ;", "assertFalse ( overlaps ( ImmutableMap . of (  )  ,    ImmutableMap . of (  . A ,    Domain . none ( BigintType . BIGINT )  )  )  )  ;", "assertFalse ( overlaps ( ImmutableMap . of (  . A ,    Domain . none ( BigintType . BIGINT )  )  ,    ImmutableMap . of (  . A ,    Domain . none ( BigintType . BIGINT )  )  )  )  ;", "assertTrue ( overlaps ( ImmutableMap . of (  . A ,    Domain . all ( BigintType . BIGINT )  )  ,    ImmutableMap . of (  . A ,    Domain . all ( BigintType . BIGINT )  )  )  )  ;", "assertTrue ( overlaps ( ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     1 L )  )  ,    ImmutableMap . of (  . B ,    Domain . singleValue ( VarcharType . VARCHAR ,    Slices . utf 8 Slice (  \" value \"  )  )  )  )  )  ;", "assertTrue ( overlaps ( ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     1 L )  )  ,    ImmutableMap . of (  . A ,    Domain . all ( BigintType . BIGINT )  )  )  )  ;", "assertFalse ( overlaps ( ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     1 L )  )  ,    ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     2 L )  )  )  )  ;", "assertFalse ( overlaps ( ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     1 L )  ,     . B ,    Domain . singleValue ( BigintType . BIGINT ,     1 L )  )  ,    ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     1 L )  ,     . B ,    Domain . singleValue ( BigintType . BIGINT ,     2 L )  )  )  )  ;", "assertTrue ( overlaps ( ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     1 L )  ,     . B ,    Domain . all ( BigintType . BIGINT )  )  ,    ImmutableMap . of (  . A ,    Domain . singleValue ( BigintType . BIGINT ,     1 L )  ,     . B ,    Domain . singleValue ( BigintType . BIGINT ,     2 L )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testOverlaps"], "fileName": "com.facebook.presto.spi.predicate.TestTupleDomain"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( TupleDomain . fromFixedValues ( ImmutableMap .  < ColumnHandle ,    NullableValue > builder (  )  . put ( TestTupleDomain . A ,    NullableValue . of ( BigintType . BIGINT ,     1 L )  )  . put ( TestTupleDomain . B ,    NullableValue . of ( VarcharType . VARCHAR ,    Slices . utf 8 Slice (  \" value \"  )  )  )  . put ( TestTupleDomain . C ,    NullableValue . of ( DoubleType . DOUBLE ,     0  .  0  1  )  )  . put ( TestTupleDomain . D ,    NullableValue . asNull ( BooleanType . BOOLEAN )  )  . build (  )  )  ,    TupleDomain . withColumnDomains ( ImmutableMap .  < ColumnHandle ,    Domain > builder (  )  . put ( TestTupleDomain . A ,    Domain . singleValue ( BigintType . BIGINT ,     1 L )  )  . put ( TestTupleDomain . B ,    Domain . singleValue ( VarcharType . VARCHAR ,    Slices . utf 8 Slice (  \" value \"  )  )  )  . put ( TestTupleDomain . C ,    Domain . singleValue ( DoubleType . DOUBLE ,     0  .  0  1  )  )  . put ( TestTupleDomain . D ,    Domain . onlyNull ( BooleanType . BOOLEAN )  )  . build (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSingleValuesMapToDomain"], "fileName": "com.facebook.presto.spi.predicate.TestTupleDomain"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Domain >    domains    =    ImmutableMap .  < Integer ,    Domain > builder (  )  . put (  1  ,    Domain . singleValue ( BigintType . BIGINT ,     1 L )  )  . put (  2  ,    Domain . singleValue ( BigintType . BIGINT ,     2 L )  )  . put (  3  ,    Domain . singleValue ( BigintType . BIGINT ,     3 L )  )  . build (  )  ;", "< Integer >    domain    =     . withColumnDomains ( domains )  ;", "< String >    transformed    =    domain . transform ( Object :  : toString )  ;", "Map < String ,    Domain >    expected    =    ImmutableMap .  < String ,    Domain > builder (  )  . put (  \"  1  \"  ,    Domain . singleValue ( BigintType . BIGINT ,     1 L )  )  . put (  \"  2  \"  ,    Domain . singleValue ( BigintType . BIGINT ,     2 L )  )  . put (  \"  3  \"  ,    Domain . singleValue ( BigintType . BIGINT ,     3 L )  )  . build (  )  ;", "assertEquals ( transformed . getDomains (  )  . get (  )  ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testTransform"], "fileName": "com.facebook.presto.spi.predicate.TestTupleDomain"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Domain >    domains    =    ImmutableMap .  < Integer ,    Domain > builder (  )  . put (  1  ,    Domain . singleValue ( BigintType . BIGINT ,     1 L )  )  . put (  2  ,    Domain . singleValue ( BigintType . BIGINT ,     2 L )  )  . put (  3  ,    Domain . singleValue ( BigintType . BIGINT ,     3 L )  )  . build (  )  ;", "< Integer >    domain    =     . withColumnDomains ( domains )  ;", "domain . transform (  (    input )     -  >     \" x \"  )  ;", "}", "METHOD_END"], "methodName": ["testTransformFailsWithNonUniqueMapping"], "fileName": "com.facebook.presto.spi.predicate.TestTupleDomain"}, {"methodBody": ["METHOD_START", "{", "return   TupleDomain . withColumnDomains ( Collections .  < T ,    Domain > emptyMap (  )  )  ;", "}", "METHOD_END"], "methodName": ["all"], "fileName": "com.facebook.presto.spi.predicate.TupleDomain"}, {"methodBody": ["METHOD_START", "{", "List < TupleDomain < T >  >    domains    =    new   ArrayList <  >  (  (  ( rest . length )     +     2  )  )  ;", "domains . add ( first )  ;", "domains . add ( second )  ;", "domains . addAll ( Arrays . asList ( rest )  )  ;", "return   TupleDomain . columnWiseUnion ( domains )  ;", "}", "METHOD_END"], "methodName": ["columnWiseUnion"], "fileName": "com.facebook.presto.spi.predicate.TupleDomain"}, {"methodBody": ["METHOD_START", "{", "if    ( tupleDomains . isEmpty (  )  )     {", "throw   new   IllegalArgumentException (  \" tupleDomains   must   have   at   least   one   element \"  )  ;", "}", "if    (  ( tupleDomains . size (  )  )     =  =     1  )     {", "return   tupleDomains . get (  0  )  ;", "}", "Set < T >    commonColumns    =    new   HashSet <  >  (  )  ;", "boolean   found    =    false ;", "Iterator <  < T >  >    domains    =    tupleDomains . iterator (  )  ;", "while    ( domains . hasNext (  )  )     {", "< T >    domain    =    domains . next (  )  ;", "if    (  !  ( domain . isNone (  )  )  )     {", "found    =    true ;", "commonColumns . addAll ( domain . getDomains (  )  . get (  )  . keySet (  )  )  ;", "break ;", "}", "}", "if    (  ! found )     {", "return    . none (  )  ;", "}", "while    ( domains . hasNext (  )  )     {", "< T >    domain    =    domains . next (  )  ;", "if    (  !  ( domain . isNone (  )  )  )     {", "commonColumns . retainAll ( domain . getDomains (  )  . get (  )  . keySet (  )  )  ;", "}", "}", "Map < T ,    List < Domain >  >    domainsByColumn    =    new   HashMap <  >  ( tupleDomains . size (  )  )  ;", "for    (  < T >    domain    :    tupleDomains )     {", "if    (  !  ( domain . isNone (  )  )  )     {", "for    ( Map . Entry < T ,    Domain >    entry    :    domain . getDomains (  )  . get (  )  . entrySet (  )  )     {", "if    ( commonColumns . contains ( entry . getKey (  )  )  )     {", "List < Domain >    domainForColumn    =    domainsByColumn . get ( entry . getKey (  )  )  ;", "if    ( domainForColumn    =  =    null )     {", "domainForColumn    =    new   ArrayList <  >  (  )  ;", "domainsByColumn . put ( entry . getKey (  )  ,    domainForColumn )  ;", "}", "domainForColumn . add ( entry . getValue (  )  )  ;", "}", "}", "}", "}", "Map < T ,    Domain >    result    =    new   HashMap <  >  ( domainsByColumn . size (  )  )  ;", "for    ( Map . Entry < T ,    List < Domain >  >    entry    :    domainsByColumn . entrySet (  )  )     {", "result . put ( entry . getKey (  )  ,    Domain . union ( entry . getValue (  )  )  )  ;", "}", "return    . withColumnDomains ( result )  ;", "}", "METHOD_END"], "methodName": ["columnWiseUnion"], "fileName": "com.facebook.presto.spi.predicate.TupleDomain"}, {"methodBody": ["METHOD_START", "{", "return    ( other . isNone (  )  )     |  |     ( TupleDomain . columnWiseUnion ( this ,    other )  . equals ( this )  )  ;", "}", "METHOD_END"], "methodName": ["contains"], "fileName": "com.facebook.presto.spi.predicate.TupleDomain"}, {"methodBody": ["METHOD_START", "{", "return   domains . values (  )  . stream (  )  . anyMatch ( Domain :  : isNone )  ;", "}", "METHOD_END"], "methodName": ["containsNoneDomain"], "fileName": "com.facebook.presto.spi.predicate.TupleDomain"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( tupleDomain . getDomains (  )  . isPresent (  )  )  )     {", "return   Optional . empty (  )  ;", "}", "return   Optional . of ( tupleDomain . getDomains (  )  . get (  )  . entrySet (  )  . stream (  )  . filter (  (    entry )     -  >    entry . getValue (  )  . isNullableSingleValue (  )  )  . collect ( Collectors . toMap ( Map . Entry :  : getKey ,     (    entry )     -  >    new   NullableValue ( entry . getValue (  )  . getType (  )  ,    entry . getValue (  )  . getNullableSingleValue (  )  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["extractFixedValues"], "fileName": "com.facebook.presto.spi.predicate.TupleDomain"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( columnDomains . isPresent (  )  )  )     {", "return    . none (  )  ;", "}", "return    . withColumnDomains ( columnDomains . get (  )  . stream (  )  . collect ( Collectors . toMap (  . ColumnDomain :  : getColumn ,     . ColumnDomain :  : getDomain )  )  )  ;", "}", "METHOD_END"], "methodName": ["fromColumnDomains"], "fileName": "com.facebook.presto.spi.predicate.TupleDomain"}, {"methodBody": ["METHOD_START", "{", "return   TupleDomain . withColumnDomains ( fixedValues . entrySet (  )  . stream (  )  . collect ( Collectors . toMap ( Map . Entry :  : getKey ,     (    entry )     -  >     {", "Type   type    =    entry . getValue (  )  . getType (  )  ;", "Object   value    =    entry . getValue (  )  . getValue (  )  ;", "return   value    =  =    null    ?    Domain . onlyNull ( type )     :    Domain . singleValue ( type ,    value )  ;", "}  )  )  )  ;", "}", "METHOD_END"], "methodName": ["fromFixedValues"], "fileName": "com.facebook.presto.spi.predicate.TupleDomain"}, {"methodBody": ["METHOD_START", "{", "return   domains . map (  (    map )     -  >    map . entrySet (  )  . stream (  )  . map (  (    entry )     -  >    new   TupleDomain . ColumnDomain <  >  ( entry . getKey (  )  ,    entry . getValue (  )  )  )  . collect ( Collectors . toList (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getColumnDomains"], "fileName": "com.facebook.presto.spi.predicate.TupleDomain"}, {"methodBody": ["METHOD_START", "{", "return   domains ;", "}", "METHOD_END"], "methodName": ["getDomains"], "fileName": "com.facebook.presto.spi.predicate.TupleDomain"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . isNone (  )  )     |  |     ( other . isNone (  )  )  )     {", "return    . none (  )  ;", "}", "Map < T ,    Domain >    intersected    =    new   HashMap <  >  ( this . getDomains (  )  . get (  )  )  ;", "for    ( Map . Entry < T ,    Domain >    entry    :    other . getDomains (  )  . get (  )  . entrySet (  )  )     {", "Domain   intersectionDomain    =    intersected . get ( entry . getKey (  )  )  ;", "if    ( intersectionDomain    =  =    null )     {", "intersected . put ( entry . getKey (  )  ,    entry . getValue (  )  )  ;", "} else    {", "intersected . put ( entry . getKey (  )  ,    intersectionDomain . intersect ( entry . getValue (  )  )  )  ;", "}", "}", "return    . withColumnDomains ( intersected )  ;", "}", "METHOD_END"], "methodName": ["intersect"], "fileName": "com.facebook.presto.spi.predicate.TupleDomain"}, {"methodBody": ["METHOD_START", "{", "return    ( domains . isPresent (  )  )     &  &     ( domains . get (  )  . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["isAll"], "fileName": "com.facebook.presto.spi.predicate.TupleDomain"}, {"methodBody": ["METHOD_START", "{", "return    !  ( domains . isPresent (  )  )  ;", "}", "METHOD_END"], "methodName": ["isNone"], "fileName": "com.facebook.presto.spi.predicate.TupleDomain"}, {"methodBody": ["METHOD_START", "{", "return   new   TupleDomain <  >  ( Optional . empty (  )  )  ;", "}", "METHOD_END"], "methodName": ["none"], "fileName": "com.facebook.presto.spi.predicate.TupleDomain"}, {"methodBody": ["METHOD_START", "{", "return   domains . entrySet (  )  . stream (  )  . filter (  (    entry )     -  >     !  ( entry . getValue (  )  . isAll (  )  )  )  . collect ( Collectors . toMap ( Map . Entry :  : getKey ,    Map . Entry :  : getValue )  )  ;", "}", "METHOD_END"], "methodName": ["normalizeAndCopy"], "fileName": "com.facebook.presto.spi.predicate.TupleDomain"}, {"methodBody": ["METHOD_START", "{", "return    !  ( this . intersect ( other )  . isNone (  )  )  ;", "}", "METHOD_END"], "methodName": ["overlaps"], "fileName": "com.facebook.presto.spi.predicate.TupleDomain"}, {"methodBody": ["METHOD_START", "{", "if    ( isNone (  )  )     {", "return   this ;", "}", "Map < T ,    Domain >    simplified    =    domains . get (  )  . entrySet (  )  . stream (  )  . collect ( Collectors . toMap ( Map . Entry :  : getKey ,     (    e )     -  >    e . getValue (  )  . simplify (  )  )  )  ;", "return    . withColumnDomains ( simplified )  ;", "}", "METHOD_END"], "methodName": ["simplify"], "fileName": "com.facebook.presto.spi.predicate.TupleDomain"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   buffer    =    new   StringBuilder (  )  . append (  \" TupleDomain :  \"  )  ;", "if    ( isAll (  )  )     {", "buffer . append (  \" ALL \"  )  ;", "} else", "if    ( isNone (  )  )     {", "buffer . append (  \" NONE \"  )  ;", "} else    {", "buffer . append ( domains . get (  )  . entrySet (  )  . stream (  )  . collect ( toMap ( Entry :  : getKey ,     (    entry )     -  >    entry . getValue (  )  . toString ( session )  )  )  )  ;", "}", "return   buffer . toString (  )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "com.facebook.presto.spi.predicate.TupleDomain"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( domains . isPresent (  )  )  )     {", "return    . none (  )  ;", "}", "HashMap < U ,    Domain >    result    =    new   HashMap <  >  ( domains . get (  )  . size (  )  )  ;", "for    ( Map . Entry < T ,    Domain >    entry    :    domains . get (  )  . entrySet (  )  )     {", "U   key    =    function . apply ( entry . getKey (  )  )  ;", "if    ( key    =  =    null )     {", "continue ;", "}", "Domain   previous    =    result . put ( key ,    entry . getValue (  )  )  ;", "if    ( previous    !  =    null )     {", "throw   new   IllegalArgumentException ( String . format (  \" Every   argument   must   have   a   unique   mapping .     % s   maps   to    % s   and    % s \"  ,    entry . getKey (  )  ,    entry . getValue (  )  ,    previous )  )  ;", "}", "}", "return    . withColumnDomains ( result )  ;", "}", "METHOD_END"], "methodName": ["transform"], "fileName": "com.facebook.presto.spi.predicate.TupleDomain"}, {"methodBody": ["METHOD_START", "{", "return   new   TupleDomain <  >  ( Optional . of ( Objects . requireNonNull ( domains ,     \" domains   is   null \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["withColumnDomains"], "fileName": "com.facebook.presto.spi.predicate.TupleDomain"}, {"methodBody": ["METHOD_START", "{", "return   TypeUtils . readNativeValue ( type ,    block ,     0  )  ;", "}", "METHOD_END"], "methodName": ["blockToNativeValue"], "fileName": "com.facebook.presto.spi.predicate.Utils"}, {"methodBody": ["METHOD_START", "{", "if    (  ( object    !  =    null )     &  &     (  !  ( Primitives . wrap ( type . getJavaType (  )  )  . isInstance ( object )  )  )  )     {", "throw   new   IllegalArgumentException ( String . format (  \" Object    '  % s '    does   not   match   type    % s \"  ,    object ,    type . getJavaType (  )  )  )  ;", "}", "BlockBuilder   blockBuilder    =    type . createBlockBuilder ( null ,     1  )  ;", "Type . writeNativeValue ( type ,    blockBuilder ,    object )  ;", "return   blockBuilder . build (  )  ;", "}", "METHOD_END"], "methodName": ["nativeValueToBlock"], "fileName": "com.facebook.presto.spi.predicate.Utils"}, {"methodBody": ["METHOD_START", "{", "if    ( type . isOrderable (  )  )     {", "return   SortedRangeSet . all ( type )  ;", "}", "if    ( type . isComparable (  )  )     {", "return   Equatable . all ( type )  ;", "}", "return   AllOrNone . all ( type )  ;", "}", "METHOD_END"], "methodName": ["all"], "fileName": "com.facebook.presto.spi.predicate.ValueSet"}, {"methodBody": ["METHOD_START", "{", "return   this . union ( other )  . equals ( this )  ;", "}", "METHOD_END"], "methodName": ["contains"], "fileName": "com.facebook.presto.spi.predicate.ValueSet"}, {"methodBody": ["METHOD_START", "{", "if    ( type . isOrderable (  )  )     {", "return   SortedRangeSet . copyOf ( type ,    values . stream (  )  . map (  (    value )     -  >    Range . equal ( type ,    value )  )  . collect ( Collectors . toList (  )  )  )  ;", "}", "if    ( type . isComparable (  )  )     {", "return   Equatable . copyOf ( type ,    values )  ;", "}", "throw   new   IllegalArgumentException (  (  \" Cannot   create   discrete      with   non - comparable   type :     \"     +    type )  )  ;", "}", "METHOD_END"], "methodName": ["copyOf"], "fileName": "com.facebook.presto.spi.predicate.ValueSet"}, {"methodBody": ["METHOD_START", "{", "return   SortedRangeSet . copyOf ( type ,    ranges )  ;", "}", "METHOD_END"], "methodName": ["copyOfRanges"], "fileName": "com.facebook.presto.spi.predicate.ValueSet"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getDiscreteValues"], "fileName": "com.facebook.presto.spi.predicate.ValueSet"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getRanges"], "fileName": "com.facebook.presto.spi.predicate.ValueSet"}, {"methodBody": ["METHOD_START", "{", "if    ( type . isOrderable (  )  )     {", "return   SortedRangeSet . none ( type )  ;", "}", "if    ( type . isComparable (  )  )     {", "return   Equatable . none ( type )  ;", "}", "return   AllOrNone . none ( type )  ;", "}", "METHOD_END"], "methodName": ["none"], "fileName": "com.facebook.presto.spi.predicate.ValueSet"}, {"methodBody": ["METHOD_START", "{", "if    ( type . isOrderable (  )  )     {", "return   SortedRangeSet . of ( type ,    first ,    rest )  ;", "}", "if    ( type . isComparable (  )  )     {", "return   Equatable . of ( type ,    first ,    rest )  ;", "}", "throw   new   IllegalArgumentException (  (  \" Cannot   create   discrete      with   non - comparable   type :     \"     +    type )  )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "com.facebook.presto.spi.predicate.ValueSet"}, {"methodBody": ["METHOD_START", "{", "return   SortedRangeSet . of ( first ,    rest )  ;", "}", "METHOD_END"], "methodName": ["ofRanges"], "fileName": "com.facebook.presto.spi.predicate.ValueSet"}, {"methodBody": ["METHOD_START", "{", "return    !  ( this . intersect ( other )  . isNone (  )  )  ;", "}", "METHOD_END"], "methodName": ["overlaps"], "fileName": "com.facebook.presto.spi.predicate.ValueSet"}, {"methodBody": ["METHOD_START", "{", "return   this . intersect ( other . complement (  )  )  ;", "}", "METHOD_END"], "methodName": ["subtract"], "fileName": "com.facebook.presto.spi.predicate.ValueSet"}, {"methodBody": ["METHOD_START", "{", "ValueSet   current    =    this ;", "for    ( ValueSet   valueSet    :    valueSets )     {", "current    =    current . union ( valueSet )  ;", "}", "return   current ;", "}", "METHOD_END"], "methodName": ["union"], "fileName": "com.facebook.presto.spi.predicate.ValueSet"}, {"methodBody": ["METHOD_START", "{", "if    (  ! assertion )     {", "throw   new   IllegalArgumentExption ( message )  ;", "}", "}", "METHOD_END"], "methodName": ["checkArgument"], "fileName": "com.facebook.presto.spi.procedure.Procedure"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( value ,     ( name    +     \"    is   null \"  )  )  ;", "PcheckArgument (  (  !  ( value . isEmpty (  )  )  )  ,     ( name    +     \"    is   empty \"  )  )  ;", "return   value ;", "}", "METHOD_END"], "methodName": ["checkNotNullOrEmpty"], "fileName": "com.facebook.presto.spi.procedure.Procedure"}, {"methodBody": ["METHOD_START", "{", "return   arguments ;", "}", "METHOD_END"], "methodName": ["getArguments"], "fileName": "com.facebook.presto.spi.procedure.Procedure"}, {"methodBody": ["METHOD_START", "{", "return   methodHandle ;", "}", "METHOD_END"], "methodName": ["getMethodHandle"], "fileName": "com.facebook.presto.spi.procedure.Procedure"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.spi.procedure.Procedure"}, {"methodBody": ["METHOD_START", "{", "return   schema ;", "}", "METHOD_END"], "methodName": ["getSchema"], "fileName": "com.facebook.presto.spi.procedure.Procedure"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getEnvironment"], "fileName": "com.facebook.presto.spi.resourceGroups.ResourceGroupConfigurationManagerContext"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getMemoryPoolManager"], "fileName": "com.facebook.presto.spi.resourceGroups.ResourceGroupConfigurationManagerContext"}, {"methodBody": ["METHOD_START", "{", "List < String >    result    =    new   ArrayList <  >  ( list )  ;", "result . add ( element )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["append"], "fileName": "com.facebook.presto.spi.resourceGroups.ResourceGroupId"}, {"methodBody": ["METHOD_START", "{", "(  ! argument )     {", "throw   new   IllegalArgumentException ( Stringormatormat ,    args )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkArgument"], "fileName": "com.facebook.presto.spi.resourceGroups.ResourceGroupId"}, {"methodBody": ["METHOD_START", "{", "return   segments . get (  (  ( segments . size (  )  )     -     1  )  )  ;", "}", "METHOD_END"], "methodName": ["getLastSegment"], "fileName": "com.facebook.presto.spi.resourceGroups.ResourceGroupId"}, {"methodBody": ["METHOD_START", "{", "if    (  ( segments . size (  )  )     =  =     1  )     {", "return   Optional . empty (  )  ;", "}", "return   Optional . of ( new    ( segments . subList (  0  ,     (  ( segments . size (  )  )     -     1  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getParent"], "fileName": "com.facebook.presto.spi.resourceGroups.ResourceGroupId"}, {"methodBody": ["METHOD_START", "{", "return   new   ResourceGroupId ( segments . get (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["getRoot"], "fileName": "com.facebook.presto.spi.resourceGroups.ResourceGroupId"}, {"methodBody": ["METHOD_START", "{", "return   segments ;", "}", "METHOD_END"], "methodName": ["getSegments"], "fileName": "com.facebook.presto.spi.resourceGroups.ResourceGroupId"}, {"methodBody": ["METHOD_START", "{", "List < String >    descendantSegments    =    descendant . getSegments (  )  ;", "if    (  ( segments . size (  )  )     >  =     ( descendantSegments . size (  )  )  )     {", "return   false ;", "}", "return   descendantSegments . subList (  0  ,    segments . size (  )  )  . equals ( segments )  ;", "}", "METHOD_END"], "methodName": ["isAncestorOf"], "fileName": "com.facebook.presto.spi.resourceGroups.ResourceGroupId"}, {"methodBody": ["METHOD_START", "{", "return   context ;", "}", "METHOD_END"], "methodName": ["getContext"], "fileName": "com.facebook.presto.spi.resourceGroups.SelectionContext"}, {"methodBody": ["METHOD_START", "{", "return   resourceGroupId ;", "}", "METHOD_END"], "methodName": ["getResourceGroupId"], "fileName": "com.facebook.presto.spi.resourceGroups.SelectionContext"}, {"methodBody": ["METHOD_START", "{", "return   queryType ;", "}", "METHOD_END"], "methodName": ["getQueryType"], "fileName": "com.facebook.presto.spi.resourceGroups.SelectionCriteria"}, {"methodBody": ["METHOD_START", "{", "return   source ;", "}", "METHOD_END"], "methodName": ["getSource"], "fileName": "com.facebook.presto.spi.resourceGroups.SelectionCriteria"}, {"methodBody": ["METHOD_START", "{", "return   clientTags ;", "}", "METHOD_END"], "methodName": ["getTags"], "fileName": "com.facebook.presto.spi.resourceGroups.SelectionCriteria"}, {"methodBody": ["METHOD_START", "{", "return   user ;", "}", "METHOD_END"], "methodName": ["getUser"], "fileName": "com.facebook.presto.spi.resourceGroups.SelectionCriteria"}, {"methodBody": ["METHOD_START", "{", "return   authenticated ;", "}", "METHOD_END"], "methodName": ["isAuthenticated"], "fileName": "com.facebook.presto.spi.resourceGroups.SelectionCriteria"}, {"methodBody": ["METHOD_START", "{", "new   ResourceGroupId (  \" test _ test \"  )  ;", "new   ResourceGroupId (  \" test . test \"  )  ;", "new   ResourceGroupId ( new   ResourceGroupId (  \" test \"  )  ,     \" test \"  )  ;", "}", "METHOD_END"], "methodName": ["testBasic"], "fileName": "com.facebook.presto.spi.resourceGroups.TestResourceGroupId"}, {"methodBody": ["METHOD_START", "{", "JsonCodec < ResourceGroupId >    codec    =    JsonCodec . jsonCodec ( ResourceGroupId . class )  ;", "ResourceGroupId   resourceGroupId    =    new   ResourceGroupId ( new   ResourceGroupId (  \" test . test \"  )  ,     \" foo \"  )  ;", "assertEquals ( codec . fromJson ( codec . toJson ( resourceGroupId )  )  ,    resourceGroupId )  ;", "assertEquals ( codec . toJson ( resourceGroupId )  ,     \"  [     \\  \" test . test \\  \"  ,     \\  \" foo \\  \"     ]  \"  )  ;", "assertEquals ( codec . fromJson (  \"  [  \\  \" test . test \\  \"  ,     \\  \" foo \\  \"  ]  \"  )  ,    resourceGroupId )  ;", "}", "METHOD_END"], "methodName": ["testCodec"], "fileName": "com.facebook.presto.spi.resourceGroups.TestResourceGroupId"}, {"methodBody": ["METHOD_START", "{", "ResourceGroupId   root    =    new   ResourceGroupId (  \" root \"  )  ;", "ResourceGroupId   rootA    =    new   ResourceGroupId ( root ,     \" a \"  )  ;", "ResourceGroupId   rootAFoo    =    new   ResourceGroupId ( rootA ,     \" foo \"  )  ;", "ResourceGroupId   rootBar    =    new   ResourceGroupId ( root ,     \" bar \"  )  ;", "assertTrue ( root . isAncestorOf ( rootA )  )  ;", "assertTrue ( root . isAncestorOf ( rootAFoo )  )  ;", "assertTrue ( root . isAncestorOf ( rootBar )  )  ;", "assertTrue ( rootA . isAncestorOf ( rootAFoo )  )  ;", "assertFalse ( rootA . isAncestorOf ( rootBar )  )  ;", "assertFalse ( rootAFoo . isAncestorOf ( rootBar )  )  ;", "assertFalse ( rootBar . isAncestorOf ( rootAFoo )  )  ;", "assertFalse ( rootAFoo . isAncestorOf ( root )  )  ;", "assertFalse ( root . isAncestorOf ( root )  )  ;", "assertFalse ( rootAFoo . isAncestorOf ( rootAFoo )  )  ;", "}", "METHOD_END"], "methodName": ["testIsAncestor"], "fileName": "com.facebook.presto.spi.resourceGroups.TestResourceGroupId"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyAddColumn ( tableName ,    null )  ;", "}", "METHOD_END"], "methodName": ["denyAddColumn"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "throw   new   AccessDeniedException ( String . format (  \" Cannot   add   a   column   to   table    % s % s \"  ,    tableName ,    AccessDeniedException . formatExtraInfo ( extraInfo )  )  )  ;", "}", "METHOD_END"], "methodName": ["denyAddColumn"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyCatalogAccess ( catalogName ,    null )  ;", "}", "METHOD_END"], "methodName": ["denyCatalogAccess"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "throw   new   AccessDeniedException ( String . format (  \" Cannot   access   catalog    % s % s \"  ,    catalogName ,    AccessDeniedException . formatExtraInfo ( extraInfo )  )  )  ;", "}", "METHOD_END"], "methodName": ["denyCatalogAccess"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyCreateSchema ( schemaName ,    null )  ;", "}", "METHOD_END"], "methodName": ["denyCreateSchema"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "throw   new   AccessDeniedException ( String . format (  \" Cannot   create   schema    % s % s \"  ,    schemaName ,    AccessDeniedException . formatExtraInfo ( extraInfo )  )  )  ;", "}", "METHOD_END"], "methodName": ["denyCreateSchema"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyCreateTable ( tableName ,    null )  ;", "}", "METHOD_END"], "methodName": ["denyCreateTable"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "throw   new   AccessDeniedException ( String . format (  \" Cannot   create   table    % s % s \"  ,    tableName ,    AccessDeniedException . formatExtraInfo ( extraInfo )  )  )  ;", "}", "METHOD_END"], "methodName": ["denyCreateTable"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyCreateView ( viewName ,    null )  ;", "}", "METHOD_END"], "methodName": ["denyCreateView"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "throw   new   AccessDeniedException ( String . format (  \" Cannot   create   view    % s % s \"  ,    viewName ,    AccessDeniedException . formatExtraInfo ( extraInfo )  )  )  ;", "}", "METHOD_END"], "methodName": ["denyCreateView"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyCreateViewWithSelect ( sourceName ,    null )  ;", "}", "METHOD_END"], "methodName": ["denyCreateViewWithSelect"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "throw   new   AccessDeniedException ( String . format (  \" Cannot   create   view   that   selects   from    % s % s \"  ,    sourceName ,    AccessDeniedException . formatExtraInfo ( extraInfo )  )  )  ;", "}", "METHOD_END"], "methodName": ["denyCreateViewWithSelect"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyDeleteTable ( tableName ,    null )  ;", "}", "METHOD_END"], "methodName": ["denyDeleteTable"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "throw   new   AccessDeniedException ( String . format (  \" Cannot   delete   from   table    % s % s \"  ,    tableName ,    AccessDeniedException . formatExtraInfo ( extraInfo )  )  )  ;", "}", "METHOD_END"], "methodName": ["denyDeleteTable"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyDropColumn ( tableName ,    null )  ;", "}", "METHOD_END"], "methodName": ["denyDropColumn"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "throw   new   AccessDeniedException ( String . format (  \" Cannot   drop   a   column   from   table    % s % s \"  ,    tableName ,    AccessDeniedException . formatExtraInfo ( extraInfo )  )  )  ;", "}", "METHOD_END"], "methodName": ["denyDropColumn"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyDropSchema ( schemaName ,    null )  ;", "}", "METHOD_END"], "methodName": ["denyDropSchema"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "throw   new   AccessDeniedException ( String . format (  \" Cannot   drop   schema    % s % s \"  ,    schemaName ,    AccessDeniedException . formatExtraInfo ( extraInfo )  )  )  ;", "}", "METHOD_END"], "methodName": ["denyDropSchema"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyDropTable ( tableName ,    null )  ;", "}", "METHOD_END"], "methodName": ["denyDropTable"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "throw   new   AccessDeniedException ( String . format (  \" Cannot   drop   table    % s % s \"  ,    tableName ,    AccessDeniedException . formatExtraInfo ( extraInfo )  )  )  ;", "}", "METHOD_END"], "methodName": ["denyDropTable"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyDropView ( viewName ,    null )  ;", "}", "METHOD_END"], "methodName": ["denyDropView"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "throw   new   AccessDeniedException ( String . format (  \" Cannot   drop   view    % s % s \"  ,    viewName ,    AccessDeniedException . formatExtraInfo ( extraInfo )  )  )  ;", "}", "METHOD_END"], "methodName": ["denyDropView"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyGrantTablePrivilege ( privilege ,    tableName ,    null )  ;", "}", "METHOD_END"], "methodName": ["denyGrantTablePrivilege"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "throw   new   AccessDeniedException ( String . format (  \" Cannot   grant   privilege    % s   on   table    % s % s \"  ,    privilege ,    tableName ,    AccessDeniedException . formatExtraInfo ( extraInfo )  )  )  ;", "}", "METHOD_END"], "methodName": ["denyGrantTablePrivilege"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyInsertTable ( tableName ,    null )  ;", "}", "METHOD_END"], "methodName": ["denyInsertTable"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "throw   new   AccessDeniedException ( String . format (  \" Cannot   insert   into   table    % s % s \"  ,    tableName ,    AccessDeniedException . formatExtraInfo ( extraInfo )  )  )  ;", "}", "METHOD_END"], "methodName": ["denyInsertTable"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyRenameColumn ( tableName ,    null )  ;", "}", "METHOD_END"], "methodName": ["denyRenameColumn"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "throw   new   AccessDeniedException ( String . format (  \" Cannot   rename   a   column   in   table    % s % s \"  ,    tableName ,    AccessDeniedException . formatExtraInfo ( extraInfo )  )  )  ;", "}", "METHOD_END"], "methodName": ["denyRenameColumn"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyRenameSchema ( schemaName ,    newSchemaName ,    null )  ;", "}", "METHOD_END"], "methodName": ["denyRenameSchema"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "throw   new   AccessDeniedException ( String . format (  \" Cannot   rename   schema   from    % s   to    % s % s \"  ,    schemaName ,    newSchemaName ,    AccessDeniedException . formatExtraInfo ( extraInfo )  )  )  ;", "}", "METHOD_END"], "methodName": ["denyRenameSchema"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyRenameTable ( tableName ,    newTableName ,    null )  ;", "}", "METHOD_END"], "methodName": ["denyRenameTable"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "throw   new   AccessDeniedException ( String . format (  \" Cannot   rename   table   from    % s   to    % s % s \"  ,    tableName ,    newTableName ,    AccessDeniedException . formatExtraInfo ( extraInfo )  )  )  ;", "}", "METHOD_END"], "methodName": ["denyRenameTable"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyRevokeTablePrivilege ( privilege ,    tableName ,    null )  ;", "}", "METHOD_END"], "methodName": ["denyRevokeTablePrivilege"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "throw   new   AccessDeniedException ( String . format (  \" Cannot   revoke   privilege    % s   on   table    % s % s \"  ,    privilege ,    tableName ,    AccessDeniedException . formatExtraInfo ( extraInfo )  )  )  ;", "}", "METHOD_END"], "methodName": ["denyRevokeTablePrivilege"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denySelectTable ( tableName ,    null )  ;", "}", "METHOD_END"], "methodName": ["denySelectTable"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "throw   new   AccessDeniedException ( String . format (  \" Cannot   select   from   table    % s % s \"  ,    tableName ,    AccessDeniedException . formatExtraInfo ( extraInfo )  )  )  ;", "}", "METHOD_END"], "methodName": ["denySelectTable"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denySelectView ( viewName ,    null )  ;", "}", "METHOD_END"], "methodName": ["denySelectView"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "throw   new   AccessDeniedException ( String . format (  \" Cannot   select   from   view    % s % s \"  ,    viewName ,    AccessDeniedException . formatExtraInfo ( extraInfo )  )  )  ;", "}", "METHOD_END"], "methodName": ["denySelectView"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "throw   new   AccessDeniedException ( String . format (  \" Cannot   set   catalog   session   property    % s \"  ,    propertyName )  )  ;", "}", "METHOD_END"], "methodName": ["denySetCatalogSessionProperty"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denySetCatalogSessionProperty ( catalogName ,    propertyName ,    null )  ;", "}", "METHOD_END"], "methodName": ["denySetCatalogSessionProperty"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "throw   new   AccessDeniedException ( String . format (  \" Cannot   set   catalog   session   property    % s .  % s % s \"  ,    catalogName ,    propertyName ,    AccessDeniedException . formatExtraInfo ( extraInfo )  )  )  ;", "}", "METHOD_END"], "methodName": ["denySetCatalogSessionProperty"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denySetSystemSessionProperty ( propertyName ,    null )  ;", "}", "METHOD_END"], "methodName": ["denySetSystemSessionProperty"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "throw   new   AccessDeniedException ( String . format (  \" Cannot   set   system   session   property    % s % s \"  ,    propertyName ,    AccessDeniedException . formatExtraInfo ( extraInfo )  )  )  ;", "}", "METHOD_END"], "methodName": ["denySetSystemSessionProperty"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denySetUser ( principal ,    userName ,    null )  ;", "}", "METHOD_END"], "methodName": ["denySetUser"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "throw   new   AccessDeniedException ( String . format (  \" Principal    % s   cannot   become   user    % s % s \"  ,    principal ,    userName ,    AccessDeniedException . formatExtraInfo ( extraInfo )  )  )  ;", "}", "METHOD_END"], "methodName": ["denySetUser"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyShowSchemas ( null )  ;", "}", "METHOD_END"], "methodName": ["denyShowSchemas"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "throw   new   AccessDeniedException ( String . format (  \" Cannot   show   schemas % s \"  ,    AccessDeniedException . formatExtraInfo ( extraInfo )  )  )  ;", "}", "METHOD_END"], "methodName": ["denyShowSchemas"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyShowTablesMetadata ( schemaName ,    null )  ;", "}", "METHOD_END"], "methodName": ["denyShowTablesMetadata"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "throw   new   AccessDeniedException ( String . format (  \" Cannot   show   metadata   of   tables   in    % s % s \"  ,    schemaName ,    AccessDeniedException . formatExtraInfo ( extraInfo )  )  )  ;", "}", "METHOD_END"], "methodName": ["denyShowTablesMetadata"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "if    (  ( extraInfo    =  =    null )     |  |     ( extraInfo . isEmpty (  )  )  )     {", "return    \"  \"  ;", "}", "return    \"  :     \"     +    extraInfo ;", "}", "METHOD_END"], "methodName": ["formatExtraInfo"], "fileName": "com.facebook.presto.spi.security.AccessDeniedException"}, {"methodBody": ["METHOD_START", "{", "return   grantor ;", "}", "METHOD_END"], "methodName": ["getGrantor"], "fileName": "com.facebook.presto.spi.security.GrantInfo"}, {"methodBody": ["METHOD_START", "{", "return   grantee ;", "}", "METHOD_END"], "methodName": ["getIdentity"], "fileName": "com.facebook.presto.spi.security.GrantInfo"}, {"methodBody": ["METHOD_START", "{", "return   privilegeInfo ;", "}", "METHOD_END"], "methodName": ["getPrivilegeInfo"], "fileName": "com.facebook.presto.spi.security.GrantInfo"}, {"methodBody": ["METHOD_START", "{", "return   schemaTableName ;", "}", "METHOD_END"], "methodName": ["getSchemaTableName"], "fileName": "com.facebook.presto.spi.security.GrantInfo"}, {"methodBody": ["METHOD_START", "{", "return   withHierarchy ;", "}", "METHOD_END"], "methodName": ["getWithHierarchy"], "fileName": "com.facebook.presto.spi.security.GrantInfo"}, {"methodBody": ["METHOD_START", "{", "return   principal ;", "}", "METHOD_END"], "methodName": ["getPrincipal"], "fileName": "com.facebook.presto.spi.security.Identity"}, {"methodBody": ["METHOD_START", "{", "return   user ;", "}", "METHOD_END"], "methodName": ["getUser"], "fileName": "com.facebook.presto.spi.security.Identity"}, {"methodBody": ["METHOD_START", "{", "return   privilege ;", "}", "METHOD_END"], "methodName": ["getPrivilege"], "fileName": "com.facebook.presto.spi.security.PrivilegeInfo"}, {"methodBody": ["METHOD_START", "{", "return   grantOption ;", "}", "METHOD_END"], "methodName": ["isGrantOption"], "fileName": "com.facebook.presto.spi.security.PrivilegeInfo"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyCatalogAccess ( catalogName )  ;", "}", "METHOD_END"], "methodName": ["checkCanAccessCatalog"], "fileName": "com.facebook.presto.spi.security.SystemAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyAddColumn ( table . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanAddColumn"], "fileName": "com.facebook.presto.spi.security.SystemAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyCreateSchema ( schema . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanCreateSchema"], "fileName": "com.facebook.presto.spi.security.SystemAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyCreateTable ( table . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanCreateTable"], "fileName": "com.facebook.presto.spi.security.SystemAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyCreateView ( view . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanCreateView"], "fileName": "com.facebook.presto.spi.security.SystemAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyCreateViewWithSelect ( table . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanCreateViewWithSelectFromTable"], "fileName": "com.facebook.presto.spi.security.SystemAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyCreateViewWithSelect ( view . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanCreateViewWithSelectFromView"], "fileName": "com.facebook.presto.spi.security.SystemAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyDeleteTable ( table . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanDeleteFromTable"], "fileName": "com.facebook.presto.spi.security.SystemAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyDropColumn ( table . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanDropColumn"], "fileName": "com.facebook.presto.spi.security.SystemAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyDropSchema ( schema . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanDropSchema"], "fileName": "com.facebook.presto.spi.security.SystemAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyDropTable ( table . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanDropTable"], "fileName": "com.facebook.presto.spi.security.SystemAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyDropView ( view . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanDropView"], "fileName": "com.facebook.presto.spi.security.SystemAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyGrantTablePrivilege ( privilege . toString (  )  ,    table . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanGrantTablePrivilege"], "fileName": "com.facebook.presto.spi.security.SystemAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyInsertTable ( table . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanInsertIntoTable"], "fileName": "com.facebook.presto.spi.security.SystemAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyRenameColumn ( table . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanRenameColumn"], "fileName": "com.facebook.presto.spi.security.SystemAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyRenameSchema ( schema . toString (  )  ,    newSchemaName )  ;", "}", "METHOD_END"], "methodName": ["checkCanRenameSchema"], "fileName": "com.facebook.presto.spi.security.SystemAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyRenameTable ( table . toString (  )  ,    newTable . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanRenameTable"], "fileName": "com.facebook.presto.spi.security.SystemAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyRevokeTablePrivilege ( privilege . toString (  )  ,    table . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanRevokeTablePrivilege"], "fileName": "com.facebook.presto.spi.security.SystemAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denySelectTable ( table . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanSelectFromTable"], "fileName": "com.facebook.presto.spi.security.SystemAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denySelectView ( view . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanSelectFromView"], "fileName": "com.facebook.presto.spi.security.SystemAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denySetCatalogSessionProperty ( propertyName )  ;", "}", "METHOD_END"], "methodName": ["checkCanSetCatalogSessionProperty"], "fileName": "com.facebook.presto.spi.security.SystemAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyShowSchemas (  )  ;", "}", "METHOD_END"], "methodName": ["checkCanShowSchemas"], "fileName": "com.facebook.presto.spi.security.SystemAccessControl"}, {"methodBody": ["METHOD_START", "{", "AccessDeniedException . denyShowTablesMetadata ( schema . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkCanShowTablesMetadata"], "fileName": "com.facebook.presto.spi.security.SystemAccessControl"}, {"methodBody": ["METHOD_START", "{", "return   Collections . emptySet (  )  ;", "}", "METHOD_END"], "methodName": ["filterCatalogs"], "fileName": "com.facebook.presto.spi.security.SystemAccessControl"}, {"methodBody": ["METHOD_START", "{", "return   Collections . emptySet (  )  ;", "}", "METHOD_END"], "methodName": ["filterSchemas"], "fileName": "com.facebook.presto.spi.security.SystemAccessControl"}, {"methodBody": ["METHOD_START", "{", "return   Collections . emptySet (  )  ;", "}", "METHOD_END"], "methodName": ["filterTables"], "fileName": "com.facebook.presto.spi.security.SystemAccessControl"}, {"methodBody": ["METHOD_START", "{", "return   new   PropertyMetadata <  >  ( name ,    description ,    BooleanType . BOOLEAN ,    Boolean . class ,    defaultValue ,    hidden ,    Boolean . class :  : cast ,     (    object )     -  >    object )  ;", "}", "METHOD_END"], "methodName": ["booleanSessionProperty"], "fileName": "com.facebook.presto.spi.session.PropertyMetadata"}, {"methodBody": ["METHOD_START", "{", "return   decoder . apply ( value )  ;", "}", "METHOD_END"], "methodName": ["decode"], "fileName": "com.facebook.presto.spi.session.PropertyMetadata"}, {"methodBody": ["METHOD_START", "{", "return   new   PropertyMetadata <  >  ( name ,    description ,    DoubleType . DOUBLE ,    Double . class ,    defaultValue ,    hidden ,     (    value )     -  >     (  ( Number )     ( value )  )  . doubleValue (  )  ,     (    object )     -  >    object )  ;", "}", "METHOD_END"], "methodName": ["doubleSessionProperty"], "fileName": "com.facebook.presto.spi.session.PropertyMetadata"}, {"methodBody": ["METHOD_START", "{", "return   encoder . apply ( value )  ;", "}", "METHOD_END"], "methodName": ["encode"], "fileName": "com.facebook.presto.spi.session.PropertyMetadata"}, {"methodBody": ["METHOD_START", "{", "return   defaultValue ;", "}", "METHOD_END"], "methodName": ["getDefaultValue"], "fileName": "com.facebook.presto.spi.session.PropertyMetadata"}, {"methodBody": ["METHOD_START", "{", "return   description ;", "}", "METHOD_END"], "methodName": ["getDescription"], "fileName": "com.facebook.presto.spi.session.PropertyMetadata"}, {"methodBody": ["METHOD_START", "{", "return   javaType ;", "}", "METHOD_END"], "methodName": ["getJavaType"], "fileName": "com.facebook.presto.spi.session.PropertyMetadata"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.spi.session.PropertyMetadata"}, {"methodBody": ["METHOD_START", "{", "return   sqlType ;", "}", "METHOD_END"], "methodName": ["getSqlType"], "fileName": "com.facebook.presto.spi.session.PropertyMetadata"}, {"methodBody": ["METHOD_START", "{", "return   new   PropertyMetadata <  >  ( name ,    description ,    IntegerType . INTEGER ,    Integer . class ,    defaultValue ,    hidden ,     (    value )     -  >     (  ( Number )     ( value )  )  . intValue (  )  ,     (    object )     -  >    object )  ;", "}", "METHOD_END"], "methodName": ["integerSessionProperty"], "fileName": "com.facebook.presto.spi.session.PropertyMetadata"}, {"methodBody": ["METHOD_START", "{", "return   hidden ;", "}", "METHOD_END"], "methodName": ["isHidden"], "fileName": "com.facebook.presto.spi.session.PropertyMetadata"}, {"methodBody": ["METHOD_START", "{", "return   new   PropertyMetadata <  >  ( name ,    description ,    BigintType . BIGINT ,    Long . class ,    defaultValue ,    hidden ,     (    value )     -  >     (  ( Number )     ( value )  )  . longValue (  )  ,     (    object )     -  >    object )  ;", "}", "METHOD_END"], "methodName": ["longSessionProperty"], "fileName": "com.facebook.presto.spi.session.PropertyMetadata"}, {"methodBody": ["METHOD_START", "{", "return   new   PropertyMetadata <  >  ( name ,    description ,    VarcharType . VARCHAR ,    String . class ,    defaultValue ,    hidden ,    String . class :  : cast ,     (    object )     -  >    object )  ;", "}", "METHOD_END"], "methodName": ["stringSessionProperty"], "fileName": "com.facebook.presto.spi.session.PropertyMetadata"}, {"methodBody": ["METHOD_START", "{", "return   cpuTime ;", "}", "METHOD_END"], "methodName": ["getCpuTime"], "fileName": "com.facebook.presto.spi.session.ResourceEstimates"}, {"methodBody": ["METHOD_START", "{", "return   executionTime ;", "}", "METHOD_END"], "methodName": ["getExecutionTime"], "fileName": "com.facebook.presto.spi.session.ResourceEstimates"}, {"methodBody": ["METHOD_START", "{", "return   peakMemory ;", "}", "METHOD_END"], "methodName": ["getPeakMemory"], "fileName": "com.facebook.presto.spi.session.ResourceEstimates"}, {"methodBody": ["METHOD_START", "{", "return   clientTags ;", "}", "METHOD_END"], "methodName": ["getClientTags"], "fileName": "com.facebook.presto.spi.session.SessionConfigurationContext"}, {"methodBody": ["METHOD_START", "{", "return   queryType ;", "}", "METHOD_END"], "methodName": ["getQueryType"], "fileName": "com.facebook.presto.spi.session.SessionConfigurationContext"}, {"methodBody": ["METHOD_START", "{", "return   resourceGroupId ;", "}", "METHOD_END"], "methodName": ["getResourceGroupId"], "fileName": "com.facebook.presto.spi.session.SessionConfigurationContext"}, {"methodBody": ["METHOD_START", "{", "return   source ;", "}", "METHOD_END"], "methodName": ["getSource"], "fileName": "com.facebook.presto.spi.session.SessionConfigurationContext"}, {"methodBody": ["METHOD_START", "{", "return   user ;", "}", "METHOD_END"], "methodName": ["getUser"], "fileName": "com.facebook.presto.spi.session.SessionConfigurationContext"}, {"methodBody": ["METHOD_START", "{", "return   new   ColumnStatistics . Builder (  )  ;", "}", "METHOD_END"], "methodName": ["builder"], "fileName": "com.facebook.presto.spi.statistics.ColumnStatistics"}, {"methodBody": ["METHOD_START", "{", "return   nullsFraction ;", "}", "METHOD_END"], "methodName": ["getNullsFraction"], "fileName": "com.facebook.presto.spi.statistics.ColumnStatistics"}, {"methodBody": ["METHOD_START", "{", "return   rangeColumnStatistics . get (  0  )  ;", "}", "METHOD_END"], "methodName": ["getOnlyRangeColumnStatistics"], "fileName": "com.facebook.presto.spi.statistics.ColumnStatistics"}, {"methodBody": ["METHOD_START", "{", "return   value ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "com.facebook.presto.spi.statistics.Estimate"}, {"methodBody": ["METHOD_START", "{", "return   Double . isNaN ( value )  ;", "}", "METHOD_END"], "methodName": ["isValueUnknown"], "fileName": "com.facebook.presto.spi.statistics.Estimate"}, {"methodBody": ["METHOD_START", "{", "if    ( isValueUnknown (  )  )     {", "return   this ;", "} else    {", "return   new    ( mappingFunction . apply ( value )  )  ;", "}", "}", "METHOD_END"], "methodName": ["map"], "fileName": "com.facebook.presto.spi.statistics.Estimate"}, {"methodBody": ["METHOD_START", "{", "return   new   Estimate ( Estimate . UNKNOWN _ VALUE )  ;", "}", "METHOD_END"], "methodName": ["unknownValue"], "fileName": "com.facebook.presto.spi.statistics.Estimate"}, {"methodBody": ["METHOD_START", "{", "return   new   Estimate (  0  )  ;", "}", "METHOD_END"], "methodName": ["zeroValue"], "fileName": "com.facebook.presto.spi.statistics.Estimate"}, {"methodBody": ["METHOD_START", "{", "return   new   RangeColumnStatistics . Builder (  )  ;", "}", "METHOD_END"], "methodName": ["builder"], "fileName": "com.facebook.presto.spi.statistics.RangeColumnStatistics"}, {"methodBody": ["METHOD_START", "{", "return   dataSize ;", "}", "METHOD_END"], "methodName": ["getDataSize"], "fileName": "com.facebook.presto.spi.statistics.RangeColumnStatistics"}, {"methodBody": ["METHOD_START", "{", "return   distinctValuesCount ;", "}", "METHOD_END"], "methodName": ["getDistinctValuesCount"], "fileName": "com.facebook.presto.spi.statistics.RangeColumnStatistics"}, {"methodBody": ["METHOD_START", "{", "return   fraction ;", "}", "METHOD_END"], "methodName": ["getFraction"], "fileName": "com.facebook.presto.spi.statistics.RangeColumnStatistics"}, {"methodBody": ["METHOD_START", "{", "return   highValue ;", "}", "METHOD_END"], "methodName": ["getHighValue"], "fileName": "com.facebook.presto.spi.statistics.RangeColumnStatistics"}, {"methodBody": ["METHOD_START", "{", "return   lowValue ;", "}", "METHOD_END"], "methodName": ["getLowValue"], "fileName": "com.facebook.presto.spi.statistics.RangeColumnStatistics"}, {"methodBody": ["METHOD_START", "{", "return   new   TableStatistics . Builder (  )  ;", "}", "METHOD_END"], "methodName": ["builder"], "fileName": "com.facebook.presto.spi.statistics.TableStatistics"}, {"methodBody": ["METHOD_START", "{", "return   columnStatistics ;", "}", "METHOD_END"], "methodName": ["getColumnStatistics"], "fileName": "com.facebook.presto.spi.statistics.TableStatistics"}, {"methodBody": ["METHOD_START", "{", "return   rowCount ;", "}", "METHOD_END"], "methodName": ["getRowCount"], "fileName": "com.facebook.presto.spi.statistics.TableStatistics"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( supportedLevel . meetsRequirementOf ( requestedLevel )  )  )     {", "throw   new   PrestoException ( StandardErrorCode . UNSUPPORTED _ ISOLATION _ LEVEL ,    String . format (  \" Connector   supported   i   level    % s   does   not   meet   requested   i   level    % s \"  ,    supportedLevel ,    requestedLevel )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkConnectorSupports"], "fileName": "com.facebook.presto.spi.transaction.IsolationLevel"}, {"methodBody": ["METHOD_START", "{", "switch    ( this )     {", "case   READ _ UNCOMMITTED    :", "return   requirement    =  =     (  . READ _ UNCOMMITTED )  ;", "case   READ _ COMMITTED    :", "return    ( requirement    =  =     (  . READ _ UNCOMMITTED )  )     |  |     ( requirement    =  =     (  . READ _ COMMITTED )  )  ;", "case   REPEATABLE _ READ    :", "return    (  ( requirement    =  =     (  . READ _ UNCOMMITTED )  )     |  |     ( requirement    =  =     (  . READ _ COMMITTED )  )  )     |  |     ( requirement    =  =     (  . REPEATABLE _ READ )  )  ;", "case   SERIALIZABLE    :", "return   true ;", "}", "throw   new   AssertionError (  (  \" Unhandled   isolation   level :     \"     +     ( this )  )  )  ;", "}", "METHOD_END"], "methodName": ["meetsRequirementOf"], "fileName": "com.facebook.presto.spi.transaction.IsolationLevel"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( IsolationLevel . READ _ UNCOMMITTED . meetsRequirementOf ( IsolationLevel . READ _ UNCOMMITTED )  )  ;", "assertFalse ( IsolationLevel . READ _ UNCOMMITTED . meetsRequirementOf ( IsolationLevel . READ _ COMMITTED )  )  ;", "assertFalse ( IsolationLevel . READ _ UNCOMMITTED . meetsRequirementOf ( IsolationLevel . REPEATABLE _ READ )  )  ;", "assertFalse ( IsolationLevel . READ _ UNCOMMITTED . meetsRequirementOf ( IsolationLevel . SERIALIZABLE )  )  ;", "assertTrue ( IsolationLevel . READ _ COMMITTED . meetsRequirementOf ( IsolationLevel . READ _ UNCOMMITTED )  )  ;", "assertTrue ( IsolationLevel . READ _ COMMITTED . meetsRequirementOf ( IsolationLevel . READ _ COMMITTED )  )  ;", "assertFalse ( IsolationLevel . READ _ COMMITTED . meetsRequirementOf ( IsolationLevel . REPEATABLE _ READ )  )  ;", "assertFalse ( IsolationLevel . READ _ COMMITTED . meetsRequirementOf ( IsolationLevel . SERIALIZABLE )  )  ;", "assertTrue ( IsolationLevel . REPEATABLE _ READ . meetsRequirementOf ( IsolationLevel . READ _ UNCOMMITTED )  )  ;", "assertTrue ( IsolationLevel . REPEATABLE _ READ . meetsRequirementOf ( IsolationLevel . READ _ COMMITTED )  )  ;", "assertTrue ( IsolationLevel . REPEATABLE _ READ . meetsRequirementOf ( IsolationLevel . REPEATABLE _ READ )  )  ;", "assertFalse ( IsolationLevel . REPEATABLE _ READ . meetsRequirementOf ( IsolationLevel . SERIALIZABLE )  )  ;", "assertTrue ( IsolationLevel . SERIALIZABLE . meetsRequirementOf ( IsolationLevel . READ _ UNCOMMITTED )  )  ;", "assertTrue ( IsolationLevel . SERIALIZABLE . meetsRequirementOf ( IsolationLevel . READ _ COMMITTED )  )  ;", "assertTrue ( IsolationLevel . SERIALIZABLE . meetsRequirementOf ( IsolationLevel . REPEATABLE _ READ )  )  ;", "assertTrue ( IsolationLevel . SERIALIZABLE . meetsRequirementOf ( IsolationLevel . SERIALIZABLE )  )  ;", "}", "METHOD_END"], "methodName": ["testMeetsRequirementOf"], "fileName": "com.facebook.presto.spi.transaction.TestIsolationLevel"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( IsolationLevel . READ _ UNCOMMITTED . toString (  )  ,     \" READ   UNCOMMITTED \"  )  ;", "assertEquals ( IsolationLevel . READ _ COMMITTED . toString (  )  ,     \" READ   COMMITTED \"  )  ;", "assertEquals ( IsolationLevel . REPEATABLE _ READ . toString (  )  ,     \" REPEATABLE   READ \"  )  ;", "assertEquals ( IsolationLevel . SERIALIZABLE . toString (  )  ,     \" SERIALIZABLE \"  )  ;", "}", "METHOD_END"], "methodName": ["testToString"], "fileName": "com.facebook.presto.spi.transaction.TestIsolationLevel"}, {"methodBody": ["METHOD_START", "{", "return    ( Long . rotateLeft (  ( value    *     -  4  4  1  7  2  7  6  7  0  6  8  1  2  5  3  1  8  8  9 L )  ,     3  1  )  )     *     -  7  0  4  6  0  2  9  2  8  8  6  3  4  8  5  6  8  2  5 L ;", "}", "METHOD_END"], "methodName": ["hash"], "fileName": "com.facebook.presto.spi.type.AbstractIntType"}, {"methodBody": ["METHOD_START", "{", "return    ( Long . rotateLeft (  ( value    *     -  4  4  1  7  2  7  6  7  0  6  8  1  2  5  3  1  8  8  9 L )  ,     3  1  )  )     *     -  7  0  4  6  0  2  9  2  8  8  6  3  4  8  5  6  8  2  5 L ;", "}", "METHOD_END"], "methodName": ["hash"], "fileName": "com.facebook.presto.spi.type.AbstractLongType"}, {"methodBody": ["METHOD_START", "{", "List < Object >    values    =    new   ArrayList <  >  ( length )  ;", "for    ( int   i    =     0  ;    i    <    length ;    i +  +  )     {", "values . add ( elementType . getObjectValue ( session ,    block ,     ( i    +    start )  )  )  ;", "}", "return   Collections . unmodifiableList ( values )  ;", "}", "METHOD_END"], "methodName": ["arrayBlockToObjectValues"], "fileName": "com.facebook.presto.spi.type.ArrayType"}, {"methodBody": ["METHOD_START", "{", "return   elementType ;", "}", "METHOD_END"], "methodName": ["getElementType"], "fileName": "com.facebook.presto.spi.type.ArrayType"}, {"methodBody": ["METHOD_START", "{", "return   new   CharType ( length )  ;", "}", "METHOD_END"], "methodName": ["createCharType"], "fileName": "com.facebook.presto.spi.type.CharType"}, {"methodBody": ["METHOD_START", "{", "return   length ;", "}", "METHOD_END"], "methodName": ["getLength"], "fileName": "com.facebook.presto.spi.type.CharType"}, {"methodBody": ["METHOD_START", "{", "writeSlice ( blockBuilder ,    Slices . utf 8 Slice ( value )  )  ;", "}", "METHOD_END"], "methodName": ["writeString"], "fileName": "com.facebook.presto.spi.type.CharType"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( slice ,     \" slice   is   null \"  )  ;", "if    ( length    <     0  )     {", "throw   new   IllegalArgumentException (  \" length   must   be   greater   than   or   equal   to   zero \"  )  ;", "}", "if    (  ( offset    <     0  )     |  |     (  ( offset    +    length )     >     ( slice . length (  )  )  )  )     {", "throw   new   IllegalArgumentException (  \" invalid   offset / length \"  )  ;", "}", "for    ( int   i    =    length    +    offset ;    i    >    offset ;    i -  -  )     {", "if    (  ( slice . getByte (  ( i    -     1  )  )  )     !  =     '     '  )     {", "return   i    -    offset ;", "}", "}", "return    0  ;", "}", "METHOD_END"], "methodName": ["byteCountWithoutTrailingSpace"], "fileName": "com.facebook.presto.spi.type.Chars"}, {"methodBody": ["METHOD_START", "{", "int   truncatedLength    =    Varchars . byteCount ( slice ,    offset ,    length ,    codePointCount )  ;", "return    . byteCountWithoutTrailingSpace ( slice ,    offset ,    truncatedLength )  ;", "}", "METHOD_END"], "methodName": ["byteCountWithoutTrailingSpace"], "fileName": "com.facebook.presto.spi.type.Chars"}, {"methodBody": ["METHOD_START", "{", "if    (  ( left . length (  )  )     <     ( right . length (  )  )  )     {", "return    . compareShorterToLonger ( left ,    right )  ;", "} else    {", "return    -  (  . compareShorterToLonger ( right ,    left )  )  ;", "}", "}", "METHOD_END"], "methodName": ["compareChars"], "fileName": "com.facebook.presto.spi.type.Chars"}, {"methodBody": ["METHOD_START", "{", "for    ( int   i    =     0  ;    i    <     ( shorter . length (  )  )  ;     +  + i )     {", "int   result    =     . compareUnsignedBytes ( shorter . getByte ( i )  ,    longer . getByte ( i )  )  ;", "if    ( result    !  =     0  )     {", "return   result ;", "}", "}", "for    ( int   i    =    shorter . length (  )  ;    i    <     ( longer . length (  )  )  ;     +  + i )     {", "int   result    =     . compareUnsignedBytes (  (  ( byte )     (  '     '  )  )  ,    longer . getByte ( i )  )  ;", "if    ( result    !  =     0  )     {", "return   result ;", "}", "}", "return    0  ;", "}", "METHOD_END"], "methodName": ["compareCharsShorterToLonger"], "fileName": "com.facebook.presto.spi.type.Chars"}, {"methodBody": ["METHOD_START", "{", "return    ( Chars . unsignedByteToInt ( thisByte )  )     -     ( Chars . unsignedByteToInt ( thatByte )  )  ;", "}", "METHOD_END"], "methodName": ["compareUnsignedBytes"], "fileName": "com.facebook.presto.spi.type.Chars"}, {"methodBody": ["METHOD_START", "{", "return   type   instanceof   CharType ;", "}", "METHOD_END"], "methodName": ["isCharType"], "fileName": "com.facebook.presto.spi.type.Chars"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( charType ,     \" charType   is   null \"  )  ;", "return    . padSpaces ( slice ,    charType . getLength (  )  )  ;", "}", "METHOD_END"], "methodName": ["padSpaces"], "fileName": "com.facebook.presto.spi.type.Chars"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( type ,     \" type   is   null \"  )  ;", "if    (  !  (  . isCharType ( type )  )  )     {", "throw   new   IllegalArgumentException (  \" type   must   be   the   instance   of   CharType \"  )  ;", "}", "return    . padSpaces ( slice ,    CharType . class . cast ( type )  )  ;", "}", "METHOD_END"], "methodName": ["padSpaces"], "fileName": "com.facebook.presto.spi.type.Chars"}, {"methodBody": ["METHOD_START", "{", "int   textLength    =    SliceUtf 8  . countCodePoints ( slice )  ;", "if    ( textLength    >    length )     {", "throw   new   IllegalArgumentException (  \" pad   length   is   smaller   than   slice   length \"  )  ;", "}", "if    ( textLength    =  =    length )     {", "return   slice ;", "}", "int   bufferSize    =     (  ( slice . length (  )  )     +    length )     -    textLength ;", "Slice   buffer    =    Slices . allocate ( bufferSize )  ;", "buffer . setBytes (  0  ,    slice )  ;", "for    ( int   i    =    slice . length (  )  ;    i    <    bufferSize ;     +  + i )     {", "buffer . setByte ( i ,     '     '  )  ;", "}", "return   buffer ;", "}", "METHOD_END"], "methodName": ["padSpaces"], "fileName": "com.facebook.presto.spi.type.Chars"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( slice ,     \" slice   is   null \"  )  ;", "return   slice . slice (  0  ,     . byteCountWithoutTrailingSpace ( slice ,     0  ,    slice . length (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["trimTrailingSpaces"], "fileName": "com.facebook.presto.spi.type.Chars"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( charType ,     \" charType   is   null \"  )  ;", "return    . truncateToLengthAndTrimSpaces ( slice ,    charType . getLength (  )  )  ;", "}", "METHOD_END"], "methodName": ["truncateToLengthAndTrimSpaces"], "fileName": "com.facebook.presto.spi.type.Chars"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( type ,     \" type   is   null \"  )  ;", "if    (  !  (  . isCharType ( type )  )  )     {", "throw   new   IllegalArgumentException (  \" type   must   be   the   instance   of   CharType \"  )  ;", "}", "return    . truncateToLengthAndTrimSpaces ( slice ,    CharType . class . cast ( type )  )  ;", "}", "METHOD_END"], "methodName": ["truncateToLengthAndTrimSpaces"], "fileName": "com.facebook.presto.spi.type.Chars"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( slice ,     \" slice   is   null \"  )  ;", "if    ( maxLength    <     0  )     {", "throw   new   IllegalArgumentException (  \" Max   length   must   be   greater   or   equal   than   zero \"  )  ;", "}", "return    . trimTrailingSpaces ( Varchars . truncateToLength ( slice ,    maxLength )  )  ;", "}", "METHOD_END"], "methodName": ["truncateToLengthAndTrimSpaces"], "fileName": "com.facebook.presto.spi.type.Chars"}, {"methodBody": ["METHOD_START", "{", "return   thisByte    &     2  5  5  ;", "}", "METHOD_END"], "methodName": ["unsignedByteToInt"], "fileName": "com.facebook.presto.spi.type.Chars"}, {"methodBody": ["METHOD_START", "{", "return    ( millisUtc    <  <     ( DateTimeEncoding . MILLIS _ SHIFT )  )     |     ( timeZoneKey    &     ( DateTimeEncoding . TIME _ ZONE _ MASK )  )  ;", "}", "METHOD_END"], "methodName": ["pack"], "fileName": "com.facebook.presto.spi.type.DateTimeEncoding"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( timeZoneKey ,     \" timeZoneKey   is   null \"  )  ;", "return    . pack ( millisUtc ,    timeZoneKey . getKey (  )  )  ;", "}", "METHOD_END"], "methodName": ["packDateTimeWithZone"], "fileName": "com.facebook.presto.spi.type.DateTimeEncoding"}, {"methodBody": ["METHOD_START", "{", "return   DateTimeEncoding . packDateTimeWithZone ( millisUtc ,    TimeZoneKey . getTimeZoneKeyForOffset ( offsetMinutes )  )  ;", "}", "METHOD_END"], "methodName": ["packDateTimeWithZone"], "fileName": "com.facebook.presto.spi.type.DateTimeEncoding"}, {"methodBody": ["METHOD_START", "{", "return   DateTimeEncoding . packDateTimeWithZone ( millisUtc ,    TimeZoneKey . getTimeZoneKey ( zoneId )  )  ;", "}", "METHOD_END"], "methodName": ["packDateTimeWithZone"], "fileName": "com.facebook.presto.spi.type.DateTimeEncoding"}, {"methodBody": ["METHOD_START", "{", "return   dateTimeWithTimeZone    >  >     ( DateTimeEncoding . MILLIS _ SHIFT )  ;", "}", "METHOD_END"], "methodName": ["unpackMillisUtc"], "fileName": "com.facebook.presto.spi.type.DateTimeEncoding"}, {"methodBody": ["METHOD_START", "{", "return   TimeZoneKey . getTimeZoneKey (  (  ( short )     ( dateTimeWithTimeZone    &     ( DateTimeEncoding . TIME _ ZONE _ MASK )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["unpackZoneKey"], "fileName": "com.facebook.presto.spi.type.DateTimeEncoding"}, {"methodBody": ["METHOD_START", "{", "return   DateTimeEncoding . pack ( newMillsUtc ,     (  ( short )     ( dateTimeWithTimeZone    &     4  0  9  5  )  )  )  ;", "}", "METHOD_END"], "methodName": ["updateMillisUtc"], "fileName": "com.facebook.presto.spi.type.DateTimeEncoding"}, {"methodBody": ["METHOD_START", "{", "return   object ;", "}", "METHOD_END"], "methodName": ["getObject"], "fileName": "com.facebook.presto.spi.type.DecimalParseResult"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.facebook.presto.spi.type.DecimalParseResult"}, {"methodBody": ["METHOD_START", "{", "List < TypeSignatureParameter >    typeParameters    =    new   ArrayList <  >  (  )  ;", "typeParameters . add ( TypeSignatureParameter . of ( precision )  )  ;", "typeParameters . add ( TypeSignatureParameter . of ( scale )  )  ;", "return   Collections . unmodifiableList ( typeParameters )  ;", "}", "METHOD_END"], "methodName": ["buildTypeParameters"], "fileName": "com.facebook.presto.spi.type.DecimalType"}, {"methodBody": ["METHOD_START", "{", "return   DecimalType . createDecimalType ( DecimalType . DEFAULT _ PRECISION ,    DecimalType . DEFAULT _ SCALE )  ;", "}", "METHOD_END"], "methodName": ["createDecimalType"], "fileName": "com.facebook.presto.spi.type.DecimalType"}, {"methodBody": ["METHOD_START", "{", "return   DecimalType . createDecimalType ( precision ,    DecimalType . DEFAULT _ SCALE )  ;", "}", "METHOD_END"], "methodName": ["createDecimalType"], "fileName": "com.facebook.presto.spi.type.DecimalType"}, {"methodBody": ["METHOD_START", "{", "if    ( precision    <  =     ( Decimals . MAX _ SHORT _ PRECISION )  )     {", "return   new   Short ( precision ,    scale )  ;", "} else    {", "return   new   Long ( precision ,    scale )  ;", "}", "}", "METHOD_END"], "methodName": ["createDecimalType"], "fileName": "com.facebook.presto.spi.type.DecimalType"}, {"methodBody": ["METHOD_START", "{", "return   precision ;", "}", "METHOD_END"], "methodName": ["getPrecision"], "fileName": "com.facebook.presto.spi.type.DecimalType"}, {"methodBody": ["METHOD_START", "{", "return   scale ;", "}", "METHOD_END"], "methodName": ["getScale"], "fileName": "com.facebook.presto.spi.type.DecimalType"}, {"methodBody": ["METHOD_START", "{", "return    ( precision )     <  =     ( Decimals . MAX _ SHORT _ PRECISION )  ;", "}", "METHOD_END"], "methodName": ["isShort"], "fileName": "com.facebook.presto.spi.type.DecimalType"}, {"methodBody": ["METHOD_START", "{", "if    (  ( precision    <  =     0  )     |  |     ( precision    >    maxPrecision )  )     {", "throw   new   PrestoException ( StandardErrorCode . INVALID _ FUNCTION _ ARGUMENT ,     (  (  \" DECIMAL   precision   must   be   in   range    [  1  ,     \"     +     ( s . MAX _ PRECISION )  )     +     \"  ]  \"  )  )  ;", "}", "if    (  ( scale    <     0  )     |  |     ( scale    >    precision )  )     {", "throw   new   PrestoException ( StandardErrorCode . INVALID _ FUNCTION _ ARGUMENT ,     \" DECIMAL   scale   must   be   in   range    [  0  ,    precision ]  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["validatePrecisionScale"], "fileName": "com.facebook.presto.spi.type.DecimalType"}, {"methodBody": ["METHOD_START", "{", "return   Decimals . BIG _ INTEGER _ POWERS _ OF _ TEN [ n ]  ;", "}", "METHOD_END"], "methodName": ["bigIntegerTenToNth"], "fileName": "com.facebook.presto.spi.type.Decimals"}, {"methodBody": ["METHOD_START", "{", "if    (  ! condition )     {", "throw   new   IllegalArgumentException (  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkArgument"], "fileName": "com.facebook.presto.spi.type.Decimals"}, {"methodBody": ["METHOD_START", "{", "if    ( Decimals . overflows ( value )  )     {", "throw   new   PrestoException ( StandardErrorCode . NUMERIC _ VALUE _ OUT _ OF _ RANGE ,    String . format (  \" Value   is   out   of   range :     % s \"  ,    value . toString (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkOverflow"], "fileName": "com.facebook.presto.spi.type.Decimals"}, {"methodBody": ["METHOD_START", "{", "return   UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimalToBigInteger ( valueSlice )  ;", "}", "METHOD_END"], "methodName": ["decodeUnscaledValue"], "fileName": "com.facebook.presto.spi.type.Decimals"}, {"methodBody": ["METHOD_START", "{", "return   Decimals . encodeUnscaledValue ( value . unscaledValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["encodeScaledValue"], "fileName": "com.facebook.presto.spi.type.Decimals"}, {"methodBody": ["METHOD_START", "{", "Decimals . checkArgument (  ( scale    >  =     0  )  )  ;", "return   Decimals . encodeScaledValue ( value . setScale ( scale ,    RoundingMode . UNNECESSARY )  )  ;", "}", "METHOD_END"], "methodName": ["encodeScaledValue"], "fileName": "com.facebook.presto.spi.type.Decimals"}, {"methodBody": ["METHOD_START", "{", "Decimals . checkArgument (  ( scale    >  =     0  )  )  ;", "return   value . setScale ( scale ,    RoundingMode . UNNECESSARY )  . unscaledValue (  )  . longValueExact (  )  ;", "}", "METHOD_END"], "methodName": ["encodeShortScaledValue"], "fileName": "com.facebook.presto.spi.type.Decimals"}, {"methodBody": ["METHOD_START", "{", "return   UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal ( unscaledValue )  ;", "}", "METHOD_END"], "methodName": ["encodeUnscaledValue"], "fileName": "com.facebook.presto.spi.type.Decimals"}, {"methodBody": ["METHOD_START", "{", "return   UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal ( unscaledValue )  ;", "}", "METHOD_END"], "methodName": ["encodeUnscaledValue"], "fileName": "com.facebook.presto.spi.type.Decimals"}, {"methodBody": ["METHOD_START", "{", "String   groupValue    =    matcher . group ( group )  ;", "if    ( groupValue    =  =    null )     {", "groupValue    =     \"  \"  ;", "}", "return   groupValue ;", "}", "METHOD_END"], "methodName": ["getMatcherGroup"], "fileName": "com.facebook.presto.spi.type.Decimals"}, {"methodBody": ["METHOD_START", "{", "return   type   instanceof   LongDecimalType ;", "}", "METHOD_END"], "methodName": ["isLongDecimal"], "fileName": "com.facebook.presto.spi.type.Decimals"}, {"methodBody": ["METHOD_START", "{", "return   type   instanceof   ShortDecimalType ;", "}", "METHOD_END"], "methodName": ["isShortDecimal"], "fileName": "com.facebook.presto.spi.type.Decimals"}, {"methodBody": ["METHOD_START", "{", "return   Decimals . LONG _ POWERS _ OF _ TEN [ n ]  ;", "}", "METHOD_END"], "methodName": ["longTenToNth"], "fileName": "com.facebook.presto.spi.type.Decimals"}, {"methodBody": ["METHOD_START", "{", "return    ( value . precision (  )  )     >    precision ;", "}", "METHOD_END"], "methodName": ["overflows"], "fileName": "com.facebook.presto.spi.type.Decimals"}, {"methodBody": ["METHOD_START", "{", "return    (  ( value . compareTo ( Decimals . MAX _ DECIMAL _ UNSCALED _ VALUE )  )     >     0  )     |  |     (  ( value . compareTo ( Decimals . MIN _ DECIMAL _ UNSCALED _ VALUE )  )     <     0  )  ;", "}", "METHOD_END"], "methodName": ["overflows"], "fileName": "com.facebook.presto.spi.type.Decimals"}, {"methodBody": ["METHOD_START", "{", "return    ( value . abs (  )  . compareTo ( Decimals . bigIntegerTenToNth ( precision )  )  )     >  =     0  ;", "}", "METHOD_END"], "methodName": ["overflows"], "fileName": "com.facebook.presto.spi.type.Decimals"}, {"methodBody": ["METHOD_START", "{", "if    ( precision    >     ( Decimals . MAX _ SHORT _ PRECISION )  )     {", "throw   new   IllegalArgumentException (  (  \" expected   precision   to   be   less   than    \"     +     ( Decimals . MAX _ SHORT _ PRECISION )  )  )  ;", "}", "return    ( Math . abs ( value )  )     >  =     ( Decimals . longTenToNth ( precision )  )  ;", "}", "METHOD_END"], "methodName": ["overflows"], "fileName": "com.facebook.presto.spi.type.Decimals"}, {"methodBody": ["METHOD_START", "{", "return   Decimals . parse ( stringValue ,    false )  ;", "}", "METHOD_END"], "methodName": ["parse"], "fileName": "com.facebook.presto.spi.type.Decimals"}, {"methodBody": ["METHOD_START", "{", "Matcher   matcher    =    Decimals . DECIMAL _ PATTERN . matcher ( stringValue )  ;", "if    (  !  ( matcher . matches (  )  )  )     {", "throw   new   IllegalArgumentException (  (  (  \" Invalid   decimal   value    '  \"     +    stringValue )     +     \"  '  \"  )  )  ;", "}", "String   sign    =    Decimals . getMatcherGroup ( matcher ,     1  )  ;", "if    ( sign . isEmpty (  )  )     {", "sign    =     \"  +  \"  ;", "}", "String   leadingZeros    =    Decimals . getMatcherGroup ( matcher ,     3  )  ;", "String   integralPart    =    Decimals . getMatcherGroup ( matcher ,     4  )  ;", "String   fractionalPart    =    Decimals . getMatcherGroup ( matcher ,     6  )  ;", "if    (  (  ( leadingZeros . isEmpty (  )  )     &  &     ( integralPart . isEmpty (  )  )  )     &  &     ( fractionalPart . isEmpty (  )  )  )     {", "throw   new   IllegalArgumentException (  (  (  \" Invalid   decimal   value    '  \"     +    stringValue )     +     \"  '  \"  )  )  ;", "}", "int   scale    =    fractionalPart . length (  )  ;", "int   precision ;", "if    ( includeLeadingZerosInPrecision )     {", "precision    =     (  ( leadingZeros . length (  )  )     +     ( integralPart . length (  )  )  )     +    scale ;", "} else    {", "precision    =     ( integralPart . length (  )  )     +    scale ;", "if    ( precision    =  =     0  )     {", "precision    =     1  ;", "}", "}", "String   unscaledValue    =     (  ( sign    +    leadingZeros )     +    integralPart )     +    fractionalPart ;", "Object   value ;", "if    ( precision    <  =     ( Decimals . MAX _ SHORT _ PRECISION )  )     {", "value    =    Long . parseLong ( unscaledValue )  ;", "} else    {", "value    =    Decimals . encodeUnscaledValue ( new   BigInteger ( unscaledValue )  )  ;", "}", "return   new   DecimalParseResult ( value ,    DecimalType . createDecimalType ( precision ,    scale )  )  ;", "}", "METHOD_END"], "methodName": ["parse"], "fileName": "com.facebook.presto.spi.type.Decimals"}, {"methodBody": ["METHOD_START", "{", "return   Decimals . parse ( stringValue ,    true )  ;", "}", "METHOD_END"], "methodName": ["parseIncludeLeadingZerosInPrecision"], "fileName": "com.facebook.presto.spi.type.Decimals"}, {"methodBody": ["METHOD_START", "{", "BigInteger   unscaledValue    =     ( type . isShort (  )  )     ?    BigInteger . valueOf ( type . getLong ( block ,    position )  )     :    Decimals . decodeUnscaledValue ( type . getSlice ( block ,    position )  )  ;", "return   new   BigDecimal ( unscaledValue ,    type . getScale (  )  ,    new   MathContext ( type . getPrecision (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["readBigDecimal"], "fileName": "com.facebook.presto.spi.type.Decimals"}, {"methodBody": ["METHOD_START", "{", "value    =    value . setScale ( type . getScale (  )  ,    RoundingMode . UNNECESSARY )  ;", "if    (  ( value . precision (  )  )     >     ( type . getPrecision (  )  )  )     {", "throw   new   IllegalArgumentException (  \" d   precision   larger   than   column   precision \"  )  ;", "}", "return   value ;", "}", "METHOD_END"], "methodName": ["rescale"], "fileName": "com.facebook.presto.spi.type.Decimals"}, {"methodBody": ["METHOD_START", "{", "if    ( toScale    <    fromScale )     {", "throw   new   IllegalArgumentException (  \" target   scale   must   be   larger   than   source   scale \"  )  ;", "}", "return   value . multiply (  . bigIntegerTenToNth (  ( toScale    -    fromScale )  )  )  ;", "}", "METHOD_END"], "methodName": ["rescale"], "fileName": "com.facebook.presto.spi.type.Decimals"}, {"methodBody": ["METHOD_START", "{", "if    ( toScale    <    fromScale )     {", "throw   new   IllegalArgumentException (  \" target   scale   must   be   larger   than   source   scale \"  )  ;", "}", "return   value    *     (  . longTenToNth (  ( toScale    -    fromScale )  )  )  ;", "}", "METHOD_END"], "methodName": ["rescale"], "fileName": "com.facebook.presto.spi.type.Decimals"}, {"methodBody": ["METHOD_START", "{", "return   Decimals . toString ( UnscaledDecimal 1  2  8 Arithmetic . toUnscaledString ( unscaledValue )  ,    scale )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "com.facebook.presto.spi.type.Decimals"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   resultBuilder    =    new   StringBuilder (  )  ;", "if    ( unscaledValueString . startsWith (  \"  -  \"  )  )     {", "resultBuilder . append (  \"  -  \"  )  ;", "unscaledValueString    =    unscaledValueString . substring (  1  )  ;", "}", "if    (  ( unscaledValueString . length (  )  )     <  =    scale )     {", "resultBuilder . append (  \"  0  \"  )  ;", "} else    {", "resultBuilder . append ( unscaledValueString . substring (  0  ,     (  ( unscaledValueString . length (  )  )     -    scale )  )  )  ;", "}", "if    ( scale    >     0  )     {", "resultBuilder . append (  \"  .  \"  )  ;", "if    (  ( unscaledValueString . length (  )  )     <    scale )     {", "for    ( int   i    =     0  ;    i    <     ( scale    -     ( unscaledValueString . length (  )  )  )  ;     +  + i )     {", "resultBuilder . append (  \"  0  \"  )  ;", "}", "resultBuilder . append ( unscaledValueString )  ;", "} else    {", "resultBuilder . append ( unscaledValueString . substring (  (  ( unscaledValueString . length (  )  )     -    scale )  )  )  ;", "}", "}", "return   resultBuilder . toString (  )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "com.facebook.presto.spi.type.Decimals"}, {"methodBody": ["METHOD_START", "{", "return   Decimals . toString ( unscaledValue . toString (  )  ,    scale )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "com.facebook.presto.spi.type.Decimals"}, {"methodBody": ["METHOD_START", "{", "return   Decimals . toString ( Long . toString ( unscaledValue )  ,    scale )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "com.facebook.presto.spi.type.Decimals"}, {"methodBody": ["METHOD_START", "{", "decimalType . writeSlice ( blockBuilder ,    Decimals . encodeScaledValue ( value )  )  ;", "}", "METHOD_END"], "methodName": ["writeBigDecimal"], "fileName": "com.facebook.presto.spi.type.Decimals"}, {"methodBody": ["METHOD_START", "{", "blockBuilder . writeLong ( value )  . closeEntry (  )  ;", "}", "METHOD_END"], "methodName": ["writeShortDecimal"], "fileName": "com.facebook.presto.spi.type.Decimals"}, {"methodBody": ["METHOD_START", "{", "return   MapBlock . fromKeyValueBlock ( mapIsNull ,    offsets ,    keyBlock ,    valueBlock ,    this ,    keyBlockNativeEquals ,    keyNativeHashCode ,    keyBlockHashCode )  ;", "}", "METHOD_END"], "methodName": ["createBlockFromKeyValue"], "fileName": "com.facebook.presto.spi.type.MapType"}, {"methodBody": ["METHOD_START", "{", "return   keyType ;", "}", "METHOD_END"], "methodName": ["getKeyType"], "fileName": "com.facebook.presto.spi.type.MapType"}, {"methodBody": ["METHOD_START", "{", "return   valueType ;", "}", "METHOD_END"], "methodName": ["getValueType"], "fileName": "com.facebook.presto.spi.type.MapType"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.spi.type.NamedType"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.facebook.presto.spi.type.NamedType"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.spi.type.NamedTypeSignature"}, {"methodBody": ["METHOD_START", "{", "return   typeSignature ;", "}", "METHOD_END"], "methodName": ["getTypeSignature"], "fileName": "com.facebook.presto.spi.type.NamedTypeSignature"}, {"methodBody": ["METHOD_START", "{", "for    ( ParameterKind   kind    :    ParameterKind . values (  )  )     {", "if    (  ( kind . oldName . isPresent (  )  )     &  &     ( kind . oldName . get (  )  . equals ( value )  )  )     {", "return   kind ;", "}", "if    ( kind . name (  )  . equals ( value )  )     {", "return   kind ;", "}", "}", "throw   new   IllegalArgumentException (  (  \" Invalid   serialized   ParameterKind   value :     \"     +    value )  )  ;", "}", "METHOD_END"], "methodName": ["fromJsonValue"], "fileName": "com.facebook.presto.spi.type.ParameterKind"}, {"methodBody": ["METHOD_START", "{", "return   oldName . orElse ( name (  )  )  ;", "}", "METHOD_END"], "methodName": ["jsonName"], "fileName": "com.facebook.presto.spi.type.ParameterKind"}, {"methodBody": ["METHOD_START", "{", "List < RowType . Field >    fields    =    types . stream (  )  . map (  (    type )     -  >    new   RowType . Field ( Optional . empty (  )  ,    type )  )  . collect ( Collectors . toList (  )  )  ;", "return   new   RowType ( fields )  ;", "}", "METHOD_END"], "methodName": ["anonymous"], "fileName": "com.facebook.presto.spi.type.RowType"}, {"methodBody": ["METHOD_START", "{", "if    ( isNull )     {", "throw   new   PException ( StandardErrorCode . NOT _ SUPPORTED ,     \" ROW   comparison   not   supported   for   fields   with   null   elements \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkElementNotNull"], "fileName": "com.facebook.presto.spi.type.RowType"}, {"methodBody": ["METHOD_START", "{", "return   new   RowType . Field ( Optional . empty (  )  ,    type )  ;", "}", "METHOD_END"], "methodName": ["field"], "fileName": "com.facebook.presto.spi.type.RowType"}, {"methodBody": ["METHOD_START", "{", "return   new   RowType . Field ( Optional . of ( name )  ,    type )  ;", "}", "METHOD_END"], "methodName": ["field"], "fileName": "com.facebook.presto.spi.type.RowType"}, {"methodBody": ["METHOD_START", "{", "return   new   RowType ( fields )  ;", "}", "METHOD_END"], "methodName": ["from"], "fileName": "com.facebook.presto.spi.type.RowType"}, {"methodBody": ["METHOD_START", "{", "return   fields ;", "}", "METHOD_END"], "methodName": ["getFields"], "fileName": "com.facebook.presto.spi.type.RowType"}, {"methodBody": ["METHOD_START", "{", "int   size    =    fields . size (  )  ;", "if    ( size    =  =     0  )     {", "throw   new   IllegalArgumentException (  \" Row      must   have   at   least    1    field \"  )  ;", "}", "List < TypeSignatureParameter >    parameters    =    fields . stream (  )  . map (  (    field )     -  >    TypeSignatureParameter . of ( new   NamedTypeSignature ( field . getName (  )  ,    field . getType (  )  . getTypeSignature (  )  )  )  )  . collect ( Collectors . toList (  )  )  ;", "return   new   TypeSignature ( StandardTypes . ROW ,    parameters )  ;", "}", "METHOD_END"], "methodName": ["makeSignature"], "fileName": "com.facebook.presto.spi.type.RowType"}, {"methodBody": ["METHOD_START", "{", "return    ( Long . rotateLeft (  ( value    *     -  4  4  1  7  2  7  6  7  0  6  8  1  2  5  3  1  8  8  9 L )  ,     3  1  )  )     *     -  7  0  4  6  0  2  9  2  8  8  6  3  4  8  5  6  8  2  5 L ;", "}", "METHOD_END"], "methodName": ["hash"], "fileName": "com.facebook.presto.spi.type.SmallintType"}, {"methodBody": ["METHOD_START", "{", "return   days ;", "}", "METHOD_END"], "methodName": ["getDays"], "fileName": "com.facebook.presto.spi.type.SqlDate"}, {"methodBody": ["METHOD_START", "{", "return   precision ;", "}", "METHOD_END"], "methodName": ["getPrecision"], "fileName": "com.facebook.presto.spi.type.SqlDecimal"}, {"methodBody": ["METHOD_START", "{", "return   scale ;", "}", "METHOD_END"], "methodName": ["getScale"], "fileName": "com.facebook.presto.spi.type.SqlDecimal"}, {"methodBody": ["METHOD_START", "{", "return   unscaledValue ;", "}", "METHOD_END"], "methodName": ["getUnscaledValue"], "fileName": "com.facebook.presto.spi.type.SqlDecimal"}, {"methodBody": ["METHOD_START", "{", "BigDecimal   bigDecimal    =    new   BigDecimal ( decimalValue )  ;", "return   new    ( bigDecimal . unscaledValue (  )  ,    bigDecimal . precision (  )  ,    bigDecimal . scale (  )  )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "com.facebook.presto.spi.type.SqlDecimal"}, {"methodBody": ["METHOD_START", "{", "return   new   SqlDecimal ( new   BigInteger ( unscaledValue )  ,    precision ,    scale )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "com.facebook.presto.spi.type.SqlDecimal"}, {"methodBody": ["METHOD_START", "{", "return   new   SqlDecimal ( BigInteger . valueOf ( unscaledValue )  ,    precision ,    scale )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "com.facebook.presto.spi.type.SqlDecimal"}, {"methodBody": ["METHOD_START", "{", "return   new   BigDecimal ( unscaledValue ,    scale ,    new   MathContext ( precision )  )  ;", "}", "METHOD_END"], "methodName": ["toBigDecimal"], "fileName": "com.facebook.presto.spi.type.SqlDecimal"}, {"methodBody": ["METHOD_START", "{", "return   millisUtc ;", "}", "METHOD_END"], "methodName": ["getMillisUtc"], "fileName": "com.facebook.presto.spi.type.SqlTime"}, {"methodBody": ["METHOD_START", "{", "return   sessionTimeZoneKey ;", "}", "METHOD_END"], "methodName": ["getSessionTimeZoneKey"], "fileName": "com.facebook.presto.spi.type.SqlTime"}, {"methodBody": ["METHOD_START", "{", "return   millisUtc ;", "}", "METHOD_END"], "methodName": ["getMillisUtc"], "fileName": "com.facebook.presto.spi.type.SqlTimeWithTimeZone"}, {"methodBody": ["METHOD_START", "{", "return   timeZoneKey ;", "}", "METHOD_END"], "methodName": ["getTimeZoneKey"], "fileName": "com.facebook.presto.spi.type.SqlTimeWithTimeZone"}, {"methodBody": ["METHOD_START", "{", "return   millisUtc ;", "}", "METHOD_END"], "methodName": ["getMillisUtc"], "fileName": "com.facebook.presto.spi.type.SqlTimestamp"}, {"methodBody": ["METHOD_START", "{", "return   sessionTimeZoneKey ;", "}", "METHOD_END"], "methodName": ["getSessionTimeZoneKey"], "fileName": "com.facebook.presto.spi.type.SqlTimestamp"}, {"methodBody": ["METHOD_START", "{", "return   millisUtc ;", "}", "METHOD_END"], "methodName": ["getMillisUtc"], "fileName": "com.facebook.presto.spi.type.SqlTimestampWithTimeZone"}, {"methodBody": ["METHOD_START", "{", "return   timeZoneKey ;", "}", "METHOD_END"], "methodName": ["getTimeZoneKey"], "fileName": "com.facebook.presto.spi.type.SqlTimestampWithTimeZone"}, {"methodBody": ["METHOD_START", "{", "return   bytes ;", "}", "METHOD_END"], "methodName": ["getBytes"], "fileName": "com.facebook.presto.spi.type.SqlVarbinary"}, {"methodBody": ["METHOD_START", "{", "ArrayType   type    =    new   ArrayType ( BooleanType . BOOLEAN )  ;", "assertEquals ( type . getDisplayName (  )  ,     \" array ( boolean )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testDisplayName"], "fileName": "com.facebook.presto.spi.type.TestArrayType"}, {"methodBody": ["METHOD_START", "{", "Slice   slice    =    Slices . wrappedBuffer ( actual )  ;", "int   trimmedLength    =     . byteCountWithoutTrailingSpace ( slice ,    offset ,    length )  ;", "byte [  ]    bytes    =    slice . getBytes ( offset ,    trimmedLength )  ;", "assertEquals ( bytes ,    expected )  ;", "}", "METHOD_END"], "methodName": ["assertByteCountWithoutTrailingSpace"], "fileName": "com.facebook.presto.spi.type.TestChars"}, {"methodBody": ["METHOD_START", "{", "Slice   slice    =    Slices . wrappedBuffer ( actual )  ;", "int   truncatedLength    =     . byteCountWithoutTrailingSpace ( slice ,    offset ,    length ,    codePointCount )  ;", "byte [  ]    bytes    =    slice . getBytes ( offset ,    truncatedLength )  ;", "assertEquals ( bytes ,    expected )  ;", "}", "METHOD_END"], "methodName": ["assertByteCountWithoutTrailingSpace"], "fileName": "com.facebook.presto.spi.type.TestChars"}, {"methodBody": ["METHOD_START", "{", "TestChars . assertByteCountWithoutTrailingSpace ( Slices . utf 8 Slice ( actual )  . getBytes (  )  ,    offset ,    length ,    codePointCount ,    Slices . utf 8 Slice ( expected )  . getBytes (  )  )  ;", "}", "METHOD_END"], "methodName": ["assertByteCountWithoutTrailingSpace"], "fileName": "com.facebook.presto.spi.type.TestChars"}, {"methodBody": ["METHOD_START", "{", "TestChars . assertByteCountWithoutTrailingSpace ( Slices . utf 8 Slice ( actual )  . getBytes (  )  ,    offset ,    length ,    Slices . utf 8 Slice ( expected )  . getBytes (  )  )  ;", "}", "METHOD_END"], "methodName": ["assertByteCountWithoutTrailingSpace"], "fileName": "com.facebook.presto.spi.type.TestChars"}, {"methodBody": ["METHOD_START", "{", "try    {", ". byteCountWithoutTrailingSpace ( Slices . utf 8 Slice ( string )  ,    offset ,    maxLength )  ;", "fail (  \" Expected   exception \"  )  ;", "}    catch    ( IllegalArgumentException   expected )     {", "}", "}", "METHOD_END"], "methodName": ["assertByteCountWithoutTrailingSpaceFailure"], "fileName": "com.facebook.presto.spi.type.TestChars"}, {"methodBody": ["METHOD_START", "{", "TestChars . assertByteCountWithoutTrailingSpace (  \" abc   def    \"  ,     1  ,     0  ,     \"  \"  )  ;", "TestChars . assertByteCountWithoutTrailingSpace (  \" abc   def    \"  ,     0  ,     4  ,     \" abc \"  )  ;", "TestChars . assertByteCountWithoutTrailingSpace (  \" abc   def    \"  ,     1  ,     3  ,     \" bc \"  )  ;", "TestChars . assertByteCountWithoutTrailingSpace (  \" abc   def    \"  ,     0  ,     3  ,     \" abc \"  )  ;", "TestChars . assertByteCountWithoutTrailingSpace (  \" abc   def    \"  ,     1  ,     2  ,     \" bc \"  )  ;", "TestChars . assertByteCountWithoutTrailingSpace (  \" abc   def    \"  ,     0  ,     6  ,     \" abc   de \"  )  ;", "TestChars . assertByteCountWithoutTrailingSpace (  \" abc   def    \"  ,     1  ,     7  ,     \" bc   def \"  )  ;", "TestChars . assertByteCountWithoutTrailingSpace (  \" abc   def    \"  ,     0  ,     7  ,     \" abc   def \"  )  ;", "TestChars . assertByteCountWithoutTrailingSpace (  \" abc   def    \"  ,     1  ,     6  ,     \" bc   def \"  )  ;", "TestChars . assertByteCountWithoutTrailingSpace (  \" abc      def    \"  ,     3  ,     1  ,     \"  \"  )  ;", "TestChars . assertByteCountWithoutTrailingSpace (  \" abc      def    \"  ,     3  ,     3  ,     \"       d \"  )  ;", "TestChars . assertByteCountWithoutTrailingSpace (  \" abc      def    \"  ,     3  ,     4  ,     \"       de \"  )  ;", "TestChars . assertByteCountWithoutTrailingSpaceFailure (  \" abc   def    \"  ,     4  ,     9  )  ;", "TestChars . assertByteCountWithoutTrailingSpaceFailure (  \" abc   def    \"  ,     1  2  ,     1  )  ;", "TestChars . assertByteCountWithoutTrailingSpaceFailure (  \" abc   def    \"  ,     (  -  1  )  ,     1  )  ;", "TestChars . assertByteCountWithoutTrailingSpaceFailure (  \" abc   def    \"  ,     1  ,     (  -  1  )  )  ;", "TestChars . assertByteCountWithoutTrailingSpace (  \"                       \"  ,     0  ,     4  ,     \"  \"  )  ;", "TestChars . assertByteCountWithoutTrailingSpace (  \"                       \"  ,     0  ,     0  ,     \"  \"  )  ;", "TestChars . assertByteCountWithoutTrailingSpace ( new   byte [  ]  {     (  ( byte )     (  1  2  9  )  )  ,     (  ( byte )     (  1  2  9  )  )  ,     (  ( byte )     (  1  2  9  )  )     }  ,     0  ,     2  ,    new   byte [  ]  {     (  ( byte )     (  1  2  9  )  )  ,     (  ( byte )     (  1  2  9  )  )     }  )  ;", "TestChars . assertByteCountWithoutTrailingSpace ( new   byte [  ]  {     (  ( byte )     (  1  2  9  )  )  ,     (  ( byte )     (  1  2  9  )  )  ,     (  ( byte )     (  1  2  9  )  )     }  ,     0  ,     1  ,    new   byte [  ]  {     (  ( byte )     (  1  2  9  )  )     }  )  ;", "TestChars . assertByteCountWithoutTrailingSpace ( new   byte [  ]  {     (  ( byte )     (  1  2  9  )  )  ,     (  ( byte )     (  1  2  9  )  )  ,     (  ( byte )     (  1  2  9  )  )     }  ,     0  ,     0  ,    new   byte [  ]  {        }  )  ;", "}", "METHOD_END"], "methodName": ["testByteCountWithoutTrailingSpaces"], "fileName": "com.facebook.presto.spi.type.TestChars"}, {"methodBody": ["METHOD_START", "{", "TestChars . assertByteCountWithoutTrailingSpace (  \" abc   def    \"  ,     1  ,     0  ,     1  ,     \"  \"  )  ;", "TestChars . assertByteCountWithoutTrailingSpace (  \" abc   def    \"  ,     0  ,     3  ,     4  ,     \" abc \"  )  ;", "TestChars . assertByteCountWithoutTrailingSpace (  \" abc   def    \"  ,     0  ,     4  ,     4  ,     \" abc \"  )  ;", "TestChars . assertByteCountWithoutTrailingSpace (  \" abc   def    \"  ,     0  ,     4  ,     3  ,     \" abc \"  )  ;", "TestChars . assertByteCountWithoutTrailingSpace (  \" abc   def    \"  ,     0  ,     5  ,     4  ,     \" abc \"  )  ;", "TestChars . assertByteCountWithoutTrailingSpace ( new   byte [  ]  {     (  ( byte )     (  1  2  9  )  )  ,     (  ( byte )     (  1  2  9  )  )  ,     (  ( byte )     (  '     '  )  )  ,     (  ( byte )     (  1  2  9  )  )     }  ,     0  ,     3  ,     3  ,    new   byte [  ]  {     (  ( byte )     (  1  2  9  )  )  ,     (  ( byte )     (  1  2  9  )  )     }  )  ;", "TestChars . assertByteCountWithoutTrailingSpace ( new   byte [  ]  {     (  ( byte )     (  1  2  9  )  )  ,     (  ( byte )     (  1  2  9  )  )  ,     (  ( byte )     (  '     '  )  )  ,     (  ( byte )     (  1  2  9  )  )     }  ,     0  ,     2  ,     3  ,    new   byte [  ]  {     (  ( byte )     (  1  2  9  )  )  ,     (  ( byte )     (  1  2  9  )  )     }  )  ;", "TestChars . assertByteCountWithoutTrailingSpace ( new   byte [  ]  {     (  ( byte )     (  1  2  9  )  )  ,     (  ( byte )     (  1  2  9  )  )  ,     (  ( byte )     (  '     '  )  )  ,     (  ( byte )     (  1  2  9  )  )     }  ,     0  ,     0  ,     3  ,    new   byte [  ]  {        }  )  ;", "}", "METHOD_END"], "methodName": ["testByteCountWithoutTrailingSpacesWithCodePointLimit"], "fileName": "com.facebook.presto.spi.type.TestChars"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( Slices . utf 8 Slice (  \" a \"  )  ,    Chars . truncateToLengthAndTrimSpaces ( Slices . utf 8 Slice (  \" a   c \"  )  ,     1  )  )  ;", "assertEquals ( Slices . utf 8 Slice (  \" a \"  )  ,    Chars . truncateToLengthAndTrimSpaces ( Slices . utf 8 Slice (  \" a       \"  )  ,     1  )  )  ;", "assertEquals ( Slices . utf 8 Slice (  \" a \"  )  ,    Chars . truncateToLengthAndTrimSpaces ( Slices . utf 8 Slice (  \" abc \"  )  ,     1  )  )  ;", "assertEquals ( Slices . utf 8 Slice (  \"  \"  )  ,    Chars . truncateToLengthAndTrimSpaces ( Slices . utf 8 Slice (  \" a   c \"  )  ,     0  )  )  ;", "assertEquals ( Slices . utf 8 Slice (  \" a   c \"  )  ,    Chars . truncateToLengthAndTrimSpaces ( Slices . utf 8 Slice (  \" a   c    \"  )  ,     3  )  )  ;", "assertEquals ( Slices . utf 8 Slice (  \" a   c \"  )  ,    Chars . truncateToLengthAndTrimSpaces ( Slices . utf 8 Slice (  \" a   c    \"  )  ,     4  )  )  ;", "assertEquals ( Slices . utf 8 Slice (  \" a   c \"  )  ,    Chars . truncateToLengthAndTrimSpaces ( Slices . utf 8 Slice (  \" a   c    \"  )  ,     5  )  )  ;", "assertEquals ( Slices . utf 8 Slice (  \" a   c \"  )  ,    Chars . truncateToLengthAndTrimSpaces ( Slices . utf 8 Slice (  \" a   c \"  )  ,     3  )  )  ;", "assertEquals ( Slices . utf 8 Slice (  \" a   c \"  )  ,    Chars . truncateToLengthAndTrimSpaces ( Slices . utf 8 Slice (  \" a   c \"  )  ,     4  )  )  ;", "assertEquals ( Slices . utf 8 Slice (  \" a   c \"  )  ,    Chars . truncateToLengthAndTrimSpaces ( Slices . utf 8 Slice (  \" a   c \"  )  ,     5  )  )  ;", "assertEquals ( Slices . utf 8 Slice (  \"  \"  )  ,    Chars . truncateToLengthAndTrimSpaces ( Slices . utf 8 Slice (  \"        \"  )  ,     1  )  )  ;", "assertEquals ( Slices . utf 8 Slice (  \"  \"  )  ,    Chars . truncateToLengthAndTrimSpaces ( Slices . utf 8 Slice (  \"  \"  )  ,     1  )  )  ;", "}", "METHOD_END"], "methodName": ["testTruncateToLengthAndTrimSpaces"], "fileName": "com.facebook.presto.spi.type.TestChars"}, {"methodBody": ["METHOD_START", "{", "try    {", ". parse ( text )  ;", "}    catch    ( IllegalArgumentException   e )     {", "String   expectedMessage    =    String . format (  \" Invalid   decimal   value    '  % s '  \"  ,    text )  ;", "if    (  !  ( Objects . equals ( e . getMessage (  )  ,    expectedMessage )  )  )     {", "fail ( String . format (  \" Unexpected   exception ,    exception   with   message    '  % s '    was   expected \"  ,    expectedMessage )  ,    e )  ;", "}", "return ;", "}", "fail (  \" Parse   failure   was   expected \"  )  ;", "}", "METHOD_END"], "methodName": ["assertParseFailure"], "fileName": "com.facebook.presto.spi.type.TestDecimals"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( Decimals . parse ( value )  ,    new   DecimalParseResult ( expectedObject ,    DecimalType . createDecimalType ( expectedPrecision ,    expectedScale )  )  )  ;", "}", "METHOD_END"], "methodName": ["assertParseResult"], "fileName": "com.facebook.presto.spi.type.TestDecimals"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( Decimals . parseIncludeLeadingZerosInPrecision ( value )  ,    new   DecimalParseResult ( expectedObject ,    DecimalType . createDecimalType ( expectedPrecision ,    expectedScale )  )  )  ;", "}", "METHOD_END"], "methodName": ["assertParseResultIncludeLeadingZerosInPrecision"], "fileName": "com.facebook.presto.spi.type.TestDecimals"}, {"methodBody": ["METHOD_START", "{", "return   Decimals . encodeUnscaledValue ( new   BigInteger ( unscaledValue )  )  ;", "}", "METHOD_END"], "methodName": ["encodeUnscaledValue"], "fileName": "com.facebook.presto.spi.type.TestDecimals"}, {"methodBody": ["METHOD_START", "{", "byte [  ]    buffer    =    new   byte [ bytes . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( bytes . length )  ;    i +  +  )     {", "buffer [ i ]     =     . toByteExact ( bytes [ i ]  )  ;", "}", "return   Slices . wrappedBuffer ( buffer )  ;", "}", "METHOD_END"], "methodName": ["sliceFromBytes"], "fileName": "com.facebook.presto.spi.type.TestDecimals"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( Decimals . encodeScaledValue ( new   BigDecimal (  \"  2  .  0  0  \"  )  ,     2  )  ,    TestDecimals . sliceFromBytes (  2  0  0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  )  )  ;", "assertEquals ( Decimals . encodeScaledValue ( new   BigDecimal (  \"  2  .  1  3  \"  )  ,     2  )  ,    TestDecimals . sliceFromBytes (  2  1  3  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  )  )  ;", "assertEquals ( Decimals . encodeScaledValue ( new   BigDecimal (  \"  1  7  2  .  6  0  \"  )  ,     2  )  ,    TestDecimals . sliceFromBytes (  1  0  8  ,     6  7  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  )  )  ;", "assertEquals ( Decimals . encodeScaledValue ( new   BigDecimal (  \"  2  \"  )  ,     2  )  ,    TestDecimals . sliceFromBytes (  2  0  0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  )  )  ;", "assertEquals ( Decimals . encodeScaledValue ( new   BigDecimal (  \"  1  7  2  .  6  \"  )  ,     2  )  ,    TestDecimals . sliceFromBytes (  1  0  8  ,     6  7  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  )  )  ;", "int   minus    =     1  2  8  ;", "assertEquals ( Decimals . encodeScaledValue ( new   BigDecimal (  \"  -  2  .  0  0  \"  )  ,     2  )  ,    TestDecimals . sliceFromBytes (  2  0  0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,    minus )  )  ;", "assertEquals ( Decimals . encodeScaledValue ( new   BigDecimal (  \"  -  2  .  1  3  \"  )  ,     2  )  ,    TestDecimals . sliceFromBytes (  2  1  3  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,    minus )  )  ;", "assertEquals ( Decimals . encodeScaledValue ( new   BigDecimal (  \"  -  2  \"  )  ,     2  )  ,    TestDecimals . sliceFromBytes (  2  0  0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,    minus )  )  ;", "assertEquals ( Decimals . encodeScaledValue ( new   BigDecimal (  \"  -  1  7  2  .  6  0  \"  )  ,     2  )  ,    TestDecimals . sliceFromBytes (  1  0  8  ,     6  7  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,    minus )  )  ;", "}", "METHOD_END"], "methodName": ["testEncodeScaledValue"], "fileName": "com.facebook.presto.spi.type.TestDecimals"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( Decimals . encodeShortScaledValue ( new   BigDecimal (  \"  2  .  0  0  \"  )  ,     2  )  ,     2  0  0 L )  ;", "assertEquals ( Decimals . encodeShortScaledValue ( new   BigDecimal (  \"  2  .  1  3  \"  )  ,     2  )  ,     2  1  3 L )  ;", "assertEquals ( Decimals . encodeShortScaledValue ( new   BigDecimal (  \"  1  7  2  .  6  0  \"  )  ,     2  )  ,     1  7  2  6  0 L )  ;", "assertEquals ( Decimals . encodeShortScaledValue ( new   BigDecimal (  \"  2  \"  )  ,     2  )  ,     2  0  0 L )  ;", "assertEquals ( Decimals . encodeShortScaledValue ( new   BigDecimal (  \"  1  7  2  .  6  \"  )  ,     2  )  ,     1  7  2  6  0 L )  ;", "assertEquals ( Decimals . encodeShortScaledValue ( new   BigDecimal (  \"  -  2  .  0  0  \"  )  ,     2  )  ,     (  -  2  0  0 L )  )  ;", "assertEquals ( Decimals . encodeShortScaledValue ( new   BigDecimal (  \"  -  2  .  1  3  \"  )  ,     2  )  ,     (  -  2  1  3 L )  )  ;", "assertEquals ( Decimals . encodeShortScaledValue ( new   BigDecimal (  \"  -  2  \"  )  ,     2  )  ,     (  -  2  0  0 L )  )  ;", "}", "METHOD_END"], "methodName": ["testEncodeShortScaledValue"], "fileName": "com.facebook.presto.spi.type.TestDecimals"}, {"methodBody": ["METHOD_START", "{", "assertParseResult (  \"  0  \"  ,     0 L ,     1  ,     0  )  ;", "assertParseResult (  \"  0  .  \"  ,     0 L ,     1  ,     0  )  ;", "assertParseResult (  \"  .  0  \"  ,     0 L ,     1  ,     1  )  ;", "assertParseResult (  \"  +  0  \"  ,     0 L ,     1  ,     0  )  ;", "assertParseResult (  \"  -  0  \"  ,     0 L ,     1  ,     0  )  ;", "assertParseResult (  \"  0  0  0  \"  ,     0 L ,     1  ,     0  )  ;", "assertParseResult (  \"  +  0  0  0  \"  ,     0 L ,     1  ,     0  )  ;", "assertParseResult (  \"  -  0  0  0  \"  ,     0 L ,     1  ,     0  )  ;", "assertParseResult (  \"  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  ,     0 L ,     1  ,     0  )  ;", "assertParseResult (  \"  +  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  ,     0 L ,     1  ,     0  )  ;", "assertParseResult (  \"  -  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  ,     0 L ,     1  ,     0  )  ;", "assertParseResult (  \"  1  .  1  \"  ,     1  1 L ,     2  ,     1  )  ;", "assertParseResult (  \"  1  .  \"  ,     1 L ,     1  ,     0  )  ;", "assertParseResult (  \"  +  1  .  1  \"  ,     1  1 L ,     2  ,     1  )  ;", "assertParseResult (  \"  +  1  .  \"  ,     1 L ,     1  ,     0  )  ;", "assertParseResult (  \"  -  1  .  1  \"  ,     (  -  1  1 L )  ,     2  ,     1  )  ;", "assertParseResult (  \"  -  1  .  \"  ,     (  -  1 L )  ,     1  ,     0  )  ;", "assertParseResult (  \"  0  0  0  1  .  1  \"  ,     1  1 L ,     2  ,     1  )  ;", "assertParseResult (  \"  +  0  0  0  1  .  1  \"  ,     1  1 L ,     2  ,     1  )  ;", "assertParseResult (  \"  -  0  0  0  1  .  1  \"  ,     (  -  1  1 L )  ,     2  ,     1  )  ;", "assertParseResult (  \"  0  .  1  \"  ,     1 L ,     1  ,     1  )  ;", "assertParseResult (  \"  .  1  \"  ,     1 L ,     1  ,     1  )  ;", "assertParseResult (  \"  +  0  .  1  \"  ,     1 L ,     1  ,     1  )  ;", "assertParseResult (  \"  +  .  1  \"  ,     1 L ,     1  ,     1  )  ;", "assertParseResult (  \"  -  0  .  1  \"  ,     (  -  1 L )  ,     1  ,     1  )  ;", "assertParseResult (  \"  -  .  1  \"  ,     (  -  1 L )  ,     1  ,     1  )  ;", "assertParseResult (  \"  .  1  \"  ,     1 L ,     1  ,     1  )  ;", "assertParseResult (  \"  +  .  1  \"  ,     1 L ,     1  ,     1  )  ;", "assertParseResult (  \"  -  .  1  \"  ,     (  -  1 L )  ,     1  ,     1  )  ;", "assertParseResult (  \"  0  0  0  .  1  \"  ,     1 L ,     1  ,     1  )  ;", "assertParseResult (  \"  +  0  0  0  .  1  \"  ,     1 L ,     1  ,     1  )  ;", "assertParseResult (  \"  -  0  0  0  .  1  \"  ,     (  -  1 L )  ,     1  ,     1  )  ;", "assertParseResult (  \"  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  \"  ,     1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7 L ,     1  7  ,     0  )  ;", "assertParseResult (  \"  +  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  \"  ,     1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7 L ,     1  7  ,     0  )  ;", "assertParseResult (  \"  -  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  \"  ,     (  -  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7 L )  ,     1  7  ,     0  )  ;", "assertParseResult (  \"  0  0  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  \"  ,     1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7 L ,     1  7  ,     0  )  ;", "assertParseResult (  \"  +  0  0  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  \"  ,     1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7 L ,     1  7  ,     0  )  ;", "assertParseResult (  \"  -  0  0  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  \"  ,     (  -  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7 L )  ,     1  7  ,     0  )  ;", "assertParseResult (  \"  0  .  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  \"  ,     1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7 L ,     1  7  ,     1  7  )  ;", "assertParseResult (  \"  +  0  .  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  \"  ,     1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7 L ,     1  7  ,     1  7  )  ;", "assertParseResult (  \"  -  0  .  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  \"  ,     (  -  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7 L )  ,     1  7  ,     1  7  )  ;", "assertParseResult (  \"  0  0  0  .  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  \"  ,     1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7 L ,     1  7  ,     1  7  )  ;", "assertParseResult (  \"  +  0  0  0  .  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  \"  ,     1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7 L ,     1  7  ,     1  7  )  ;", "assertParseResult (  \"  -  0  0  0  .  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  \"  ,     (  -  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7 L )  ,     1  7  ,     1  7  )  ;", "assertParseResult (  \"  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  .  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  ,     . encodeUnscaledValue (  \"  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  )  ,     3  8  ,     1  8  )  ;", "assertParseResult (  \"  +  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  .  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  ,     . encodeUnscaledValue (  \"  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  )  ,     3  8  ,     1  8  )  ;", "assertParseResult (  \"  -  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  .  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  ,     . encodeUnscaledValue (  \"  -  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  )  ,     3  8  ,     1  8  )  ;", "assertParseResult (  \"  0  0  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  .  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  ,     . encodeUnscaledValue (  \"  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  )  ,     3  8  ,     1  8  )  ;", "assertParseResult (  \"  +  0  0  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  .  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  ,     . encodeUnscaledValue (  \"  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  )  ,     3  8  ,     1  8  )  ;", "assertParseResult (  \"  -  0  0  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  .  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  ,     . encodeUnscaledValue (  \"  -  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  )  ,     3  8  ,     1  8  )  ;", "assertParseResult (  \"  0  .  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  ,     . encodeUnscaledValue (  \"  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  )  ,     3  8  ,     3  8  )  ;", "assertParseResult (  \"  +  0  .  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  ,     . encodeUnscaledValue (  \"  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  )  ,     3  8  ,     3  8  )  ;", "assertParseResult (  \"  -  0  .  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  ,     . encodeUnscaledValue (  \"  -  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  )  ,     3  8  ,     3  8  )  ;", "assertParseResult (  \"  .  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  ,     . encodeUnscaledValue (  \"  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  )  ,     3  8  ,     3  8  )  ;", "assertParseResult (  \"  +  .  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  ,     . encodeUnscaledValue (  \"  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  )  ,     3  8  ,     3  8  )  ;", "assertParseResult (  \"  -  .  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  ,     . encodeUnscaledValue (  \"  -  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  )  ,     3  8  ,     3  8  )  ;", "assertParseResult (  \"  0  0  0  0  .  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  ,     . encodeUnscaledValue (  \"  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  )  ,     3  8  ,     3  8  )  ;", "assertParseResult (  \"  +  0  0  0  0  .  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  ,     . encodeUnscaledValue (  \"  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  )  ,     3  8  ,     3  8  )  ;", "assertParseResult (  \"  -  0  0  0  0  .  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  ,     . encodeUnscaledValue (  \"  -  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  )  ,     3  8  ,     3  8  )  ;", "}", "METHOD_END"], "methodName": ["testParse"], "fileName": "com.facebook.presto.spi.type.TestDecimals"}, {"methodBody": ["METHOD_START", "{", "assertParseResultIncludeLeadingZerosInPrecision (  \"  0  \"  ,     0 L ,     1  ,     0  )  ;", "assertParseResultIncludeLeadingZerosInPrecision (  \"  +  0  \"  ,     0 L ,     1  ,     0  )  ;", "assertParseResultIncludeLeadingZerosInPrecision (  \"  -  0  \"  ,     0 L ,     1  ,     0  )  ;", "assertParseResultIncludeLeadingZerosInPrecision (  \"  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  ,     0 L ,     1  7  ,     0  )  ;", "assertParseResultIncludeLeadingZerosInPrecision (  \"  +  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  ,     0 L ,     1  7  ,     0  )  ;", "assertParseResultIncludeLeadingZerosInPrecision (  \"  -  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  ,     0 L ,     1  7  ,     0  )  ;", "assertParseResultIncludeLeadingZerosInPrecision (  \"  1  .  1  \"  ,     1  1 L ,     2  ,     1  )  ;", "assertParseResultIncludeLeadingZerosInPrecision (  \"  +  1  .  1  \"  ,     1  1 L ,     2  ,     1  )  ;", "assertParseResultIncludeLeadingZerosInPrecision (  \"  -  1  .  1  \"  ,     (  -  1  1 L )  ,     2  ,     1  )  ;", "assertParseResultIncludeLeadingZerosInPrecision (  \"  0  0  0  1  .  1  \"  ,     1  1 L ,     5  ,     1  )  ;", "assertParseResultIncludeLeadingZerosInPrecision (  \"  +  0  0  0  1  .  1  \"  ,     1  1 L ,     5  ,     1  )  ;", "assertParseResultIncludeLeadingZerosInPrecision (  \"  -  0  0  0  1  .  1  \"  ,     (  -  1  1 L )  ,     5  ,     1  )  ;", "assertParseResultIncludeLeadingZerosInPrecision (  \"  0  0  0  \"  ,     0 L ,     3  ,     0  )  ;", "assertParseResultIncludeLeadingZerosInPrecision (  \"  +  0  0  0  \"  ,     0 L ,     3  ,     0  )  ;", "assertParseResultIncludeLeadingZerosInPrecision (  \"  -  0  0  0  \"  ,     (  -  0 L )  ,     3  ,     0  )  ;", "assertParseResultIncludeLeadingZerosInPrecision (  \"  0  0  0  .  1  \"  ,     1 L ,     4  ,     1  )  ;", "assertParseResultIncludeLeadingZerosInPrecision (  \"  +  0  0  0  .  1  \"  ,     1 L ,     4  ,     1  )  ;", "assertParseResultIncludeLeadingZerosInPrecision (  \"  -  0  0  0  .  1  \"  ,     (  -  1 L )  ,     4  ,     1  )  ;", "assertParseResultIncludeLeadingZerosInPrecision (  \"  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  ,     0 L ,     1  8  ,     0  )  ;", "assertParseResultIncludeLeadingZerosInPrecision (  \"  +  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  ,     0 L ,     1  8  ,     0  )  ;", "assertParseResultIncludeLeadingZerosInPrecision (  \"  -  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  ,     0 L ,     1  8  ,     0  )  ;", "assertParseResultIncludeLeadingZerosInPrecision (  \"  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  .  1  2  3  \"  ,     . encodeUnscaledValue (  \"  1  2  3  \"  )  ,     2  1  ,     3  )  ;", "assertParseResultIncludeLeadingZerosInPrecision (  \"  +  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  .  1  2  3  \"  ,     . encodeUnscaledValue (  \"  1  2  3  \"  )  ,     2  1  ,     3  )  ;", "assertParseResultIncludeLeadingZerosInPrecision (  \"  -  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  .  1  2  3  \"  ,     . encodeUnscaledValue (  \"  -  1  2  3  \"  )  ,     2  1  ,     3  )  ;", "}", "METHOD_END"], "methodName": ["testParseIncludeLeadingZerosInPrecision"], "fileName": "com.facebook.presto.spi.type.TestDecimals"}, {"methodBody": ["METHOD_START", "{", "assertParseFailure (  \"  .  \"  )  ;", "assertParseFailure (  \"  +  .  \"  )  ;", "assertParseFailure (  \"  -  .  \"  )  ;", "}", "METHOD_END"], "methodName": ["testRejectNoDigits"], "fileName": "com.facebook.presto.spi.type.TestDecimals"}, {"methodBody": ["METHOD_START", "{", "Preconditions . checkArgument (  (  (  0     <  =    value )     &  &     ( value    <  =     2  5  5  )  )  )  ;", "return    (  ( byte )     ( value )  )  ;", "}", "METHOD_END"], "methodName": ["toByteExact"], "fileName": "com.facebook.presto.spi.type.TestDecimals"}, {"methodBody": ["METHOD_START", "{", "Slice   slice    =    Decimals . encodeScaledValue ( new   BigDecimal ( value )  )  ;", "BlockBuilder   blockBuilder    =    new   VariableWidthBlockBuilder ( null ,     1  ,    slice . length (  )  )  ;", ". TYPE . writeSlice ( blockBuilder ,    slice )  ;", "return   blockBuilder . build (  )  ;", "}", "METHOD_END"], "methodName": ["decimalAsBlock"], "fileName": "com.facebook.presto.spi.type.TestLongDecimalType"}, {"methodBody": ["METHOD_START", "{", "int   actual    =    TestLongDecimalType . TYPE . compareTo ( decimalAsBlock ( decimalA )  ,     0  ,    decimalAsBlock ( decimalB )  ,     0  )  ;", "assertEquals (  (  ( int )     ( Math . signum ( actual )  )  )  ,     (  ( int )     ( Math . signum ( expected )  )  )  ,     (  (  (  \" bad   comparison   result   for    \"     +    decimalA )     +     \"  ,     \"  )     +    decimalB )  )  ;", "}", "METHOD_END"], "methodName": ["testCompare"], "fileName": "com.facebook.presto.spi.type.TestLongDecimalType"}, {"methodBody": ["METHOD_START", "{", "testCompare (  \"  0  \"  ,     \"  -  1  2  3  4  5  6  7  8  9  1  .  1  2  3  4  5  6  7  8  9  0  \"  ,     1  )  ;", "testCompare (  \"  1  2  3  4  5  6  7  8  9  0  .  1  2  3  4  5  6  7  8  9  0  \"  ,     \"  1  2  3  4  5  6  7  8  9  0  .  1  2  3  4  5  6  7  8  9  0  \"  ,     0  )  ;", "testCompare (  \"  1  2  3  4  5  6  7  8  9  0  .  1  2  3  4  5  6  7  8  9  0  \"  ,     \"  1  2  3  4  5  6  7  8  9  0  .  1  2  3  4  5  6  7  8  9  1  \"  ,     (  -  1  )  )  ;", "testCompare (  \"  1  2  3  4  5  6  7  8  9  0  .  1  2  3  4  5  6  7  8  9  0  \"  ,     \"  1  2  3  4  5  6  7  8  9  0  .  1  2  3  4  5  6  7  8  8  9  \"  ,     1  )  ;", "testCompare (  \"  1  2  3  4  5  6  7  8  9  0  .  1  2  3  4  5  6  7  8  9  0  \"  ,     \"  1  2  3  4  5  6  7  8  9  1  .  1  2  3  4  5  6  7  8  9  0  \"  ,     (  -  1  )  )  ;", "testCompare (  \"  1  2  3  4  5  6  7  8  9  0  .  1  2  3  4  5  6  7  8  9  0  \"  ,     \"  1  2  3  4  5  6  7  8  8  9  .  1  2  3  4  5  6  7  8  9  0  \"  ,     1  )  ;", "testCompare (  \"  0  \"  ,     \"  1  2  3  4  5  6  7  8  9  1  .  1  2  3  4  5  6  7  8  9  0  \"  ,     (  -  1  )  )  ;", "testCompare (  \"  1  2  3  4  5  6  7  8  9  0  .  1  2  3  4  5  6  7  8  9  0  \"  ,     \"  0  \"  ,     1  )  ;", "testCompare (  \"  0  \"  ,     \"  0  \"  ,     0  )  ;", "testCompare (  \"  -  1  2  3  4  5  6  7  8  9  0  .  1  2  3  4  5  6  7  8  9  0  \"  ,     \"  -  1  2  3  4  5  6  7  8  9  0  .  1  2  3  4  5  6  7  8  9  0  \"  ,     0  )  ;", "testCompare (  \"  -  1  2  3  4  5  6  7  8  9  0  .  1  2  3  4  5  6  7  8  9  0  \"  ,     \"  -  1  2  3  4  5  6  7  8  9  0  .  1  2  3  4  5  6  7  8  9  1  \"  ,     1  )  ;", "testCompare (  \"  -  1  2  3  4  5  6  7  8  9  0  .  1  2  3  4  5  6  7  8  9  0  \"  ,     \"  -  1  2  3  4  5  6  7  8  9  0  .  1  2  3  4  5  6  7  8  8  9  \"  ,     (  -  1  )  )  ;", "testCompare (  \"  -  1  2  3  4  5  6  7  8  9  0  .  1  2  3  4  5  6  7  8  9  0  \"  ,     \"  -  1  2  3  4  5  6  7  8  9  1  .  1  2  3  4  5  6  7  8  9  0  \"  ,     1  )  ;", "testCompare (  \"  -  1  2  3  4  5  6  7  8  9  0  .  1  2  3  4  5  6  7  8  9  0  \"  ,     \"  -  1  2  3  4  5  6  7  8  8  9  .  1  2  3  4  5  6  7  8  9  0  \"  ,     (  -  1  )  )  ;", "testCompare (  \"  0  \"  ,     \"  -  1  2  3  4  5  6  7  8  9  1  .  1  2  3  4  5  6  7  8  9  0  \"  ,     1  )  ;", "testCompare (  \"  -  1  2  3  4  5  6  7  8  9  0  .  1  2  3  4  5  6  7  8  9  0  \"  ,     \"  0  \"  ,     (  -  1  )  )  ;", "testCompare (  \"  -  1  2  3  4  5  6  7  8  9  0  .  1  2  3  4  5  6  7  8  9  0  \"  ,     \"  1  2  3  4  5  6  7  8  9  0  .  1  2  3  4  5  6  7  8  9  0  \"  ,     (  -  1  )  )  ;", "testCompare (  \"  1  2  3  4  5  6  7  8  9  0  .  1  2  3  4  5  6  7  8  9  0  \"  ,     \"  -  1  2  3  4  5  6  7  8  9  0  .  1  2  3  4  5  6  7  8  9  0  \"  ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testCompareTo"], "fileName": "com.facebook.presto.spi.type.TestLongDecimalType"}, {"methodBody": ["METHOD_START", "{", "MapType   mapType    =    new   MapType ( BigintType . BIGINT ,    VarcharType . createVarcharType (  4  2  )  ,    MethodHandleUtil . methodHandle ( TestMapType . class ,     \" throwUnsupportedOperation \"  )  ,    MethodHandleUtil . methodHandle ( TestMapType . class ,     \" throwUnsupportedOperation \"  )  ,    MethodHandleUtil . methodHandle ( TestMapType . class ,     \" throwUnsupportedOperation \"  )  )  ;", "assertEquals ( mapType . getDisplayName (  )  ,     \" map ( bigint ,    varchar (  4  2  )  )  \"  )  ;", "mapType    =    new   MapType ( BigintType . BIGINT ,    VarcharType . VARCHAR ,    MethodHandleUtil . methodHandle ( TestMapType . class ,     \" throwUnsupportedOperation \"  )  ,    MethodHandleUtil . methodHandle ( TestMapType . class ,     \" throwUnsupportedOperation \"  )  ,    MethodHandleUtil . methodHandle ( TestMapType . class ,     \" throwUnsupportedOperation \"  )  )  ;", "assertEquals ( mapType . getDisplayName (  )  ,     \" map ( bigint ,    varchar )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testMapDisplayName"], "fileName": "com.facebook.presto.spi.type.TestMapType"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["throwUnsupportedOperation"], "fileName": "com.facebook.presto.spi.type.TestMapType"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( TestParameterKind . PARAMETER _ KIND _ CODEC . fromJson (  \"  \\  \" TYPE \\  \"  \"  )  ,    ParameterKind . TYPE )  ;", "assertEquals ( TestParameterKind . PARAMETER _ KIND _ CODEC . fromJson (  \"  \\  \" NAMED _ TYPE \\  \"  \"  )  ,    ParameterKind . NAMED _ TYPE )  ;", "assertEquals ( TestParameterKind . PARAMETER _ KIND _ CODEC . fromJson (  \"  \\  \" LONG \\  \"  \"  )  ,    ParameterKind . LONG )  ;", "assertEquals ( TestParameterKind . PARAMETER _ KIND _ CODEC . fromJson (  \"  \\  \" VARIABLE \\  \"  \"  )  ,    ParameterKind . VARIABLE )  ;", "}", "METHOD_END"], "methodName": ["testDeserializeFromNewFormat"], "fileName": "com.facebook.presto.spi.type.TestParameterKind"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( TestParameterKind . PARAMETER _ KIND _ CODEC . fromJson (  \"  \\  \" TYPE _ SIGNATURE \\  \"  \"  )  ,    ParameterKind . TYPE )  ;", "assertEquals ( TestParameterKind . PARAMETER _ KIND _ CODEC . fromJson (  \"  \\  \" NAMED _ TYPE _ SIGNATURE \\  \"  \"  )  ,    ParameterKind . NAMED _ TYPE )  ;", "assertEquals ( TestParameterKind . PARAMETER _ KIND _ CODEC . fromJson (  \"  \\  \" LONG _ LITERAL \\  \"  \"  )  ,    ParameterKind . LONG )  ;", "assertEquals ( TestParameterKind . PARAMETER _ KIND _ CODEC . fromJson (  \"  \\  \" VARIABLE \\  \"  \"  )  ,    ParameterKind . VARIABLE )  ;", "}", "METHOD_END"], "methodName": ["testDeserializeFromOldFormat"], "fileName": "com.facebook.presto.spi.type.TestParameterKind"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( TestParameterKind . PARAMETER _ KIND _ CODEC . toJson ( ParameterKind . TYPE )  ,     \"  \\  \" TYPE _ SIGNATURE \\  \"  \"  )  ;", "assertEquals ( TestParameterKind . PARAMETER _ KIND _ CODEC . toJson ( ParameterKind . NAMED _ TYPE )  ,     \"  \\  \" NAMED _ TYPE _ SIGNATURE \\  \"  \"  )  ;", "assertEquals ( TestParameterKind . PARAMETER _ KIND _ CODEC . toJson ( ParameterKind . LONG )  ,     \"  \\  \" LONG _ LITERAL \\  \"  \"  )  ;", "assertEquals ( TestParameterKind . PARAMETER _ KIND _ CODEC . toJson ( ParameterKind . VARIABLE )  ,     \"  \\  \" VARIABLE \\  \"  \"  )  ;", "}", "METHOD_END"], "methodName": ["testSerialize"], "fileName": "com.facebook.presto.spi.type.TestParameterKind"}, {"methodBody": ["METHOD_START", "{", "List < RowType . Field >    fields    =    Arrays . asList ( RowType . field (  \" bool _ col \"  ,    BooleanType . BOOLEAN )  ,    RowType . field (  \" double _ col \"  ,    DoubleType . DOUBLE )  ,    RowType . field (  \" array _ col \"  ,    new   ArrayType ( VarcharType . VARCHAR )  )  ,    RowType . field (  \" map _ col \"  ,    new   MapType ( BooleanType . BOOLEAN ,    DoubleType . DOUBLE ,    MethodHandleUtil . methodHandle ( TestRowType . class ,     \" throwUnsupportedOperation \"  )  ,    MethodHandleUtil . methodHandle ( TestRowType . class ,     \" throwUnsupportedOperation \"  )  ,    MethodHandleUtil . methodHandle ( TestRowType . class ,     \" throwUnsupportedOperation \"  )  )  )  )  ;", "RowType   row    =    RowType . from ( fields )  ;", "assertEquals ( row . getDisplayName (  )  ,     \" row ( bool _ col   boolean ,    double _ col   double ,    array _ col   array ( varchar )  ,    map _ col   map ( boolean ,    double )  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testRowDisplayName"], "fileName": "com.facebook.presto.spi.type.TestRowType"}, {"methodBody": ["METHOD_START", "{", "List < Type >    types    =    Arrays . asList ( BooleanType . BOOLEAN ,    DoubleType . DOUBLE ,    new   ArrayType ( VarcharType . VARCHAR )  ,    new   MapType ( BooleanType . BOOLEAN ,    DoubleType . DOUBLE ,    MethodHandleUtil . methodHandle ( TestRowType . class ,     \" throwUnsupportedOperation \"  )  ,    MethodHandleUtil . methodHandle ( TestRowType . class ,     \" throwUnsupportedOperation \"  )  ,    MethodHandleUtil . methodHandle ( TestRowType . class ,     \" throwUnsupportedOperation \"  )  )  )  ;", "RowType   row    =    RowType . anonymous ( types )  ;", "assertEquals ( row . getDisplayName (  )  ,     \" row ( boolean ,    double ,    array ( varchar )  ,    map ( boolean ,    double )  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testRowDisplayNoColumnNames"], "fileName": "com.facebook.presto.spi.type.TestRowType"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["throwUnsupportedOperation"], "fileName": "com.facebook.presto.spi.type.TestRowType"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( new   SqlDecimal ( new   BigInteger (  \"  0  \"  )  ,     2  ,     1  )  . toString (  )  ,     \"  0  .  0  \"  )  ;", "assertEquals ( new   SqlDecimal ( new   BigInteger (  \"  0  \"  )  ,     3  ,     2  )  . toString (  )  ,     \"  0  .  0  0  \"  )  ;", "assertEquals ( new   SqlDecimal ( new   BigInteger (  \"  0  \"  )  ,     6  ,     5  )  . toString (  )  ,     \"  0  .  0  0  0  0  0  \"  )  ;", "assertEquals ( new   SqlDecimal ( new   BigInteger (  \"  0  \"  )  ,     1  0  ,     5  )  . toString (  )  ,     \"  0  .  0  0  0  0  0  \"  )  ;", "assertEquals ( new   SqlDecimal ( new   BigInteger (  \"  1  \"  )  ,     2  ,     1  )  . toString (  )  ,     \"  0  .  1  \"  )  ;", "assertEquals ( new   SqlDecimal ( new   BigInteger (  \"  0  \"  )  ,     3  ,     3  )  . toString (  )  ,     \"  0  .  0  0  0  \"  )  ;", "assertEquals ( new   SqlDecimal ( new   BigInteger (  \"  1  \"  )  ,     1  ,     0  )  . toString (  )  ,     \"  1  \"  )  ;", "assertEquals ( new   SqlDecimal ( new   BigInteger (  \"  1  0  0  0  \"  )  ,     4  ,     3  )  . toString (  )  ,     \"  1  .  0  0  0  \"  )  ;", "assertEquals ( new   SqlDecimal ( new   BigInteger (  \"  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  )  ,     3  8  ,     2  0  )  . toString (  )  ,     \"  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  .  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  )  ;", "assertEquals ( new   SqlDecimal ( new   BigInteger (  \"  -  1  0  \"  )  ,     2  ,     1  )  . toString (  )  ,     \"  -  1  .  0  \"  )  ;", "assertEquals ( new   SqlDecimal ( new   BigInteger (  \"  -  1  0  0  \"  )  ,     3  ,     2  )  . toString (  )  ,     \"  -  1  .  0  0  \"  )  ;", "assertEquals ( new   SqlDecimal ( new   BigInteger (  \"  -  1  0  0  0  0  0  \"  )  ,     6  ,     5  )  . toString (  )  ,     \"  -  1  .  0  0  0  0  0  \"  )  ;", "assertEquals ( new   SqlDecimal ( new   BigInteger (  \"  -  1  0  0  0  0  0  \"  )  ,     1  0  ,     5  )  . toString (  )  ,     \"  -  1  .  0  0  0  0  0  \"  )  ;", "assertEquals ( new   SqlDecimal ( new   BigInteger (  \"  -  1  \"  )  ,     2  ,     1  )  . toString (  )  ,     \"  -  0  .  1  \"  )  ;", "assertEquals ( new   SqlDecimal ( new   BigInteger (  \"  -  1  \"  )  ,     3  ,     3  )  . toString (  )  ,     \"  -  0  .  0  0  1  \"  )  ;", "assertEquals ( new   SqlDecimal ( new   BigInteger (  \"  -  1  \"  )  ,     1  ,     0  )  . toString (  )  ,     \"  -  1  \"  )  ;", "assertEquals ( new   SqlDecimal ( new   BigInteger (  \"  -  1  0  0  0  \"  )  ,     4  ,     3  )  . toString (  )  ,     \"  -  1  .  0  0  0  \"  )  ;", "assertEquals ( new   SqlDecimal ( new   BigInteger (  \"  -  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  )  ,     3  8  ,     2  0  )  . toString (  )  ,     \"  -  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  .  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  )  ;", "}", "METHOD_END"], "methodName": ["testToString"], "fileName": "com.facebook.presto.spi.type.TestSqlDecimal"}, {"methodBody": ["METHOD_START", "{", "try    {", "TimeZoneKey . ge ( zoneId )  ;", "fail (  \" expect   TimeZoneNotSupportedException \"  )  ;", "}    catch    ( TimeZoneNotSupportedException   e )     {", "}", "}", "METHOD_END"], "methodName": ["assertTimeZoneNotSupported"], "fileName": "com.facebook.presto.spi.type.TestTimeZoneKey"}, {"methodBody": ["METHOD_START", "{", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" GMT 0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" GMT +  0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" GMT -  0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" GMT +  0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" GMT -  0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertTimeZoneNotSupported (  \" GMT 7  \"  )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" GMT +  7  \"  )  ,     . PLUS _  7  _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" GMT -  7  \"  )  ,     . MINUS _  7  _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" GMT +  7  \"  )  ,     . PLUS _  7  _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" GMT -  7  \"  )  ,     . MINUS _  7  _ KEY )  ;", "assertTimeZoneNotSupported (  \" UT 0  \"  )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" UT +  0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" UT -  0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" UT +  0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" UT -  0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertTimeZoneNotSupported (  \" UT 7  \"  )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" UT +  7  \"  )  ,     . PLUS _  7  _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" UT -  7  \"  )  ,     . MINUS _  7  _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" UT +  7  \"  )  ,     . PLUS _  7  _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" UT -  7  \"  )  ,     . MINUS _  7  _ KEY )  ;", "assertTimeZoneNotSupported (  \" UTC 0  \"  )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" UTC +  0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" UTC -  0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" UTC +  0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" UTC -  0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertTimeZoneNotSupported (  \" UTC 7  \"  )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" UTC +  7  \"  )  ,     . PLUS _  7  _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" UTC -  7  \"  )  ,     . MINUS _  7  _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" UTC +  7  \"  )  ,     . PLUS _  7  _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" UTC -  7  \"  )  ,     . MINUS _  7  _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" Etc / GMT 0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" Etc / GMT +  0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" Etc / GMT -  0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" Etc / GMT +  0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" Etc / GMT -  0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertTimeZoneNotSupported (  \" Etc / GMT 7  \"  )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" Etc / GMT +  7  \"  )  ,     . MINUS _  7  _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" Etc / GMT -  7  \"  )  ,     . PLUS _  7  _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" Etc / GMT +  7  \"  )  ,     . MINUS _  7  _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" Etc / GMT -  7  \"  )  ,     . PLUS _  7  _ KEY )  ;", "assertTimeZoneNotSupported (  \" Etc / UT 0  \"  )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" Etc / UT +  0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" Etc / UT -  0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" Etc / UT +  0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" Etc / UT -  0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertTimeZoneNotSupported (  \" Etc / UT 7  \"  )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" Etc / UT +  7  \"  )  ,     . PLUS _  7  _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" Etc / UT -  7  \"  )  ,     . MINUS _  7  _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" Etc / UT +  7  \"  )  ,     . PLUS _  7  _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" Etc / UT -  7  \"  )  ,     . MINUS _  7  _ KEY )  ;", "assertTimeZoneNotSupported (  \" Etc / UTC 0  \"  )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" Etc / UTC +  0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" Etc / UTC -  0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" Etc / UTC +  0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" Etc / UTC -  0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertTimeZoneNotSupported (  \" Etc / UTC 7  \"  )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" Etc / UTC +  7  \"  )  ,     . PLUS _  7  _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" Etc / UTC -  7  \"  )  ,     . MINUS _  7  _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" Etc / UTC +  7  \"  )  ,     . PLUS _  7  _ KEY )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey (  \" Etc / UTC -  7  \"  )  ,     . MINUS _  7  _ KEY )  ;", "}", "METHOD_END"], "methodName": ["testHourOffsetZone"], "fileName": "com.facebook.presto.spi.type.TestTimeZoneKey"}, {"methodBody": ["METHOD_START", "{", "boolean   foundMax    =    false ;", "for    ( TimeZoneKey   timeZoneKey    :    TimeZoneKey . ges (  )  )     {", "assertTrue (  (  ( timeZoneKey . getKey (  )  )     <  =     ( TimeZoneKey . MAX _ TIME _ ZONE _ KEY )  )  ,     (  ( timeZoneKey    +     \"    key   is   larger   than   max   key    \"  )     +     ( TimeZoneKey . MAX _ TIME _ ZONE _ KEY )  )  )  ;", "foundMax    =    foundMax    |  |     (  ( timeZoneKey . getKey (  )  )     =  =     ( TimeZoneKey . MAX _ TIME _ ZONE _ KEY )  )  ;", "}", "assertTrue ( foundMax ,     \" Did   not   find   a   time   zone   with   the   MAX _ TIME _ ZONE _ KEY \"  )  ;", "}", "METHOD_END"], "methodName": ["testMaxTimeZoneKey"], "fileName": "com.facebook.presto.spi.type.TestTimeZoneKey"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( TimeZoneKey . UTC _ KEY . getKey (  )  ,     0  )  ;", "assertEquals ( TimeZoneKey . UTC _ KEY . getId (  )  ,     \" UTC \"  )  ;", "assertSame ( TimeZoneKey . ge (  (  ( short )     (  0  )  )  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . ge (  \" UTC \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . ge (  \" Z \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . ge (  \" Zulu \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . ge (  \" zulu \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . ge (  \" ZULU \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . ge (  \" UT \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . ge (  \" UCT \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . ge (  \" Universal \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . ge (  \" GMT \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . ge (  \" GMT 0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . ge (  \" GMT +  0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . ge (  \" GMT -  0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . ge (  \" GMT +  0  0  :  0  0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . ge (  \" GMT -  0  0  :  0  0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . ge (  \"  +  0  0  :  0  0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . ge (  \"  -  0  0  :  0  0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . ge (  \" etc / utc \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . ge (  \" etc / gmt \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . ge (  \" etc / gmt +  0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . ge (  \" etc / gmt +  0  0  :  0  0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . ge (  \" etc / gmt -  0  0  :  0  0  \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . ge (  \" etc / ut \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . ge (  \" etc / UT \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . ge (  \" etc / UCT \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "assertSame ( TimeZoneKey . ge (  \" etc / Universal \"  )  ,    TimeZoneKey . UTC _ KEY )  ;", "}", "METHOD_END"], "methodName": ["testUTC"], "fileName": "com.facebook.presto.spi.type.TestTimeZoneKey"}, {"methodBody": ["METHOD_START", "{", "Hasher   hasher    =    Hashing . murmur 3  _  1  2  8  (  )  . newHasher (  )  ;", "SortedSet < TimeZoneKey >    timeZoneKeysSortedByKey    =    ImmutableSortedSet . copyOf ( new   Comparator < TimeZoneKey >  (  )     {", "@ Override", "public   int   compare ( TimeZoneKey   left ,    TimeZoneKey   right )     {", "return   Short . compare ( left . getKey (  )  ,    right . getKey (  )  )  ;", "}", "}  ,    TimeZoneKey . ges (  )  )  ;", "for    ( TimeZoneKey   timeZoneKey    :    timeZoneKeysSortedByKey )     {", "hasher . putShort ( timeZoneKey . getKey (  )  )  ;", "hasher . putString ( timeZoneKey . getId (  )  ,    StandardCharsets . UTF _  8  )  ;", "}", "assertEquals ( hasher . hash (  )  . asLong (  )  ,     (  -  5  8  3  9  0  1  4  1  4  4  0  8  8  2  9  3  9  3  0 L )  ,     \" zone - index . properties   file   contents   changed !  \"  )  ;", "}", "METHOD_END"], "methodName": ["testZoneKeyData"], "fileName": "com.facebook.presto.spi.type.TestTimeZoneKey"}, {"methodBody": ["METHOD_START", "{", "boolean [  ]    hasValue    =    new   boolean [  ( TimeZoneKey . MAX _ TIME _ ZONE _ KEY )     +     1  ]  ;", "for    ( TimeZoneKey   timeZoneKey    :    TimeZoneKey . ges (  )  )     {", "short   key    =    timeZoneKey . getKey (  )  ;", "assertTrue (  ( key    >  =     0  )  ,     ( timeZoneKey    +     \"    has   a   negative   time   zone   key \"  )  )  ;", "assertFalse ( hasValue [ key ]  ,     (  \" Another   time   zone   has   the   same   zone   key   as    \"     +    timeZoneKey )  )  ;", "hasValue [ key ]     =    true ;", "}", "for    ( int   i    =     0  ;    i    <     ( hasValue . length )  ;    i +  +  )     {", "assertTrue ( hasValue [ i ]  ,     (  \" There   is   no   time   zone   with   key    \"     +    i )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testZoneKeyIdRange"], "fileName": "com.facebook.presto.spi.type.TestTimeZoneKey"}, {"methodBody": ["METHOD_START", "{", "for    ( TimeZoneKey   timeZoneKey    :    TimeZoneKey . getTimeZoneKeys (  )  )     {", "assertSame ( TimeZoneKey . getTimeZoneKey ( timeZoneKey . getKey (  )  )  ,    timeZoneKey )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey ( timeZoneKey . getId (  )  )  ,    timeZoneKey )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey ( timeZoneKey . getId (  )  . toUpperCase ( Locale . ENGLISH )  )  ,    timeZoneKey )  ;", "assertSame ( TimeZoneKey . getTimeZoneKey ( timeZoneKey . getId (  )  . toLowerCase ( Locale . ENGLISH )  )  ,    timeZoneKey )  ;", "}", "}", "METHOD_END"], "methodName": ["testZoneKeyLookup"], "fileName": "com.facebook.presto.spi.type.TestTimeZoneKey"}, {"methodBody": ["METHOD_START", "{", "DynamicSliceOutput   sliceOutput    =    new   DynamicSliceOutput (  1  0  2  4  )  ;", ". writeType ( sliceOutput ,    BooleanType . BOOLEAN )  ;", "Type   actualType    =     . readType ( new   TestingTypeManager (  )  ,    sliceOutput . slice (  )  . getInput (  )  )  ;", "assertEquals ( actualType ,    BooleanType . BOOLEAN )  ;", "}", "METHOD_END"], "methodName": ["testRoundTrip"], "fileName": "com.facebook.presto.spi.type.TestTypeSerde"}, {"methodBody": ["METHOD_START", "{", "return   new   TypeSignature ( StandardTypes . ARRAY ,    TypeSignatureParameter . of ( type )  )  ;", "}", "METHOD_END"], "methodName": ["array"], "fileName": "com.facebook.presto.spi.type.TestTypeSignature"}, {"methodBody": ["METHOD_START", "{", "TestTypeSignature . assertRowSignature ( typeName ,    ImmutableSet . of (  )  ,    expectedSignature )  ;", "}", "METHOD_END"], "methodName": ["assertRowSignature"], "fileName": "com.facebook.presto.spi.type.TestTypeSignature"}, {"methodBody": ["METHOD_START", "{", "TestTypeSignature . assertSignature ( typeName ,    base ,    parameters ,    expected )  ;", "}", "METHOD_END"], "methodName": ["assertRowSignature"], "fileName": "com.facebook.presto.spi.type.TestTypeSignature"}, {"methodBody": ["METHOD_START", "{", "TypeSignature   signature    =    TypeSignature . parseTypeSignature ( typeName ,    literalParameters )  ;", "assertEquals ( signature ,    expectedSignature )  ;", "assertEquals ( signature . toString (  )  ,    typeName )  ;", "}", "METHOD_END"], "methodName": ["assertRowSignature"], "fileName": "com.facebook.presto.spi.type.TestTypeSignature"}, {"methodBody": ["METHOD_START", "{", "TestTypeSignature . assertSignature ( typeName ,    base ,    parameters ,    typeName . replace (  \"  <  \"  ,     \"  (  \"  )  . replace (  \"  >  \"  ,     \"  )  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["assertSignature"], "fileName": "com.facebook.presto.spi.type.TestTypeSignature"}, {"methodBody": ["METHOD_START", "{", "TypeSignature   signature    =    TypeSignature . parseTypeSignature ( typeName )  ;", "assertEquals ( signature . getBase (  )  ,    base )  ;", "assertEquals ( signature . getParameters (  )  . size (  )  ,    parameters . size (  )  )  ;", "for    ( int   i    =     0  ;    i    <     ( signature . getParameters (  )  . size (  )  )  ;    i +  +  )     {", "assertEquals ( signature . getParameters (  )  . get ( i )  . toString (  )  ,    parameters . get ( i )  )  ;", "}", "assertEquals ( signature . toString (  )  ,    expectedTypeName )  ;", "}", "METHOD_END"], "methodName": ["assertSignature"], "fileName": "com.facebook.presto.spi.type.TestTypeSignature"}, {"methodBody": ["METHOD_START", "{", "try    {", ". parse ( typeName )  ;", "fail (  \" Type   signatures   with   zero   parameters   should   fail   to   parse \"  )  ;", "}    catch    ( RuntimeException   e )     {", "}", "}", "METHOD_END"], "methodName": ["assertSignatureFail"], "fileName": "com.facebook.presto.spi.type.TestTypeSignature"}, {"methodBody": ["METHOD_START", "{", "try    {", ". parse ( typeName ,    literalCalculationParameters )  ;", "fail (  \" Type   signatures   with   zero   parameters   should   fail   to   parse \"  )  ;", "}    catch    ( RuntimeException   e )     {", "}", "}", "METHOD_END"], "methodName": ["assertSignatureFail"], "fileName": "com.facebook.presto.spi.type.TestTypeSignature"}, {"methodBody": ["METHOD_START", "{", "return   new   TypeSignature ( StandardTypes . DECIMAL ,    ImmutableList . of ( TypeSignatureParameter . of ( precisionVariable )  ,    TypeSignatureParameter . of ( scaleVariable )  )  )  ;", "}", "METHOD_END"], "methodName": ["decimal"], "fileName": "com.facebook.presto.spi.type.TestTypeSignature"}, {"methodBody": ["METHOD_START", "{", "return   new   NamedTypeSignature ( name ,    value )  ;", "}", "METHOD_END"], "methodName": ["namedParameter"], "fileName": "com.facebook.presto.spi.type.TestTypeSignature"}, {"methodBody": ["METHOD_START", "{", "TestTypeSignature . assertRowSignature (  \" row ( a   bigint , b   varchar )  \"  ,    TestTypeSignature . rowSignature ( TestTypeSignature . namedParameter (  \" a \"  ,    signature (  \" bigint \"  )  )  ,    TestTypeSignature . namedParameter (  \" b \"  ,    varchar (  )  )  )  )  ;", "assertEquals ( TypeSignature . parseTypeSignature (  \" row ( col   iNt )  \"  )  ,    TypeSignature . parseTypeSignature (  \" row ( col   integer )  \"  )  )  ;", "TestTypeSignature . assertRowSignature (  \" ROW ( a   bigint , b   varchar )  \"  ,     \" ROW \"  ,    ImmutableList . of (  \" a   bigint \"  ,     \" b   varchar \"  )  ,     \" row ( a   bigint , b   varchar )  \"  )  ;", "TestTypeSignature . assertRowSignature (  \" row ( a   bigint , b   array ( bigint )  , c   row ( a   bigint )  )  \"  ,    TestTypeSignature . rowSignature ( TestTypeSignature . namedParameter (  \" a \"  ,    signature (  \" bigint \"  )  )  ,    TestTypeSignature . namedParameter (  \" b \"  ,    TestTypeSignature . array ( signature (  \" bigint \"  )  )  )  ,    TestTypeSignature . namedParameter (  \" c \"  ,    TestTypeSignature . rowSignature ( TestTypeSignature . namedParameter (  \" a \"  ,    signature (  \" bigint \"  )  )  )  )  )  )  ;", "TestTypeSignature . assertRowSignature (  \" row ( a   varchar (  1  0  )  , b   row ( a   bigint )  )  \"  ,    TestTypeSignature . rowSignature ( TestTypeSignature . namedParameter (  \" a \"  ,    varchar (  1  0  )  )  ,    TestTypeSignature . namedParameter (  \" b \"  ,    TestTypeSignature . rowSignature ( TestTypeSignature . namedParameter (  \" a \"  ,    signature (  \" bigint \"  )  )  )  )  )  )  ;", "TestTypeSignature . assertRowSignature (  \" array ( row ( col 0    bigint , col 1    double )  )  \"  ,    TestTypeSignature . array ( TestTypeSignature . rowSignature ( TestTypeSignature . namedParameter (  \" col 0  \"  ,    signature (  \" bigint \"  )  )  ,    TestTypeSignature . namedParameter (  \" col 1  \"  ,    signature (  \" double \"  )  )  )  )  )  ;", "TestTypeSignature . assertRowSignature (  \" row ( col 0    array ( row ( col 0    bigint , col 1    double )  )  )  \"  ,    TestTypeSignature . rowSignature ( TestTypeSignature . namedParameter (  \" col 0  \"  ,    TestTypeSignature . array ( TestTypeSignature . rowSignature ( TestTypeSignature . namedParameter (  \" col 0  \"  ,    signature (  \" bigint \"  )  )  ,    TestTypeSignature . namedParameter (  \" col 1  \"  ,    signature (  \" double \"  )  )  )  )  )  )  )  ;", "TestTypeSignature . assertRowSignature (  \" row ( a   decimal ( p 1  , s 1  )  , b   decimal ( p 2  , s 2  )  )  \"  ,    ImmutableSet . of (  \" p 1  \"  ,     \" s 1  \"  ,     \" p 2  \"  ,     \" s 2  \"  )  ,    TestTypeSignature . rowSignature ( TestTypeSignature . namedParameter (  \" a \"  ,    decimal (  \" p 1  \"  ,     \" s 1  \"  )  )  ,    TestTypeSignature . namedParameter (  \" b \"  ,    decimal (  \" p 2  \"  ,     \" s 2  \"  )  )  )  )  ;", "assertEquals ( TypeSignature . parseTypeSignature (  \" row ( a   Int ( p 1  )  )  \"  )  ,    TypeSignature . parseTypeSignature (  \" row ( a   integer ( p 1  )  )  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["parseRowSignature"], "fileName": "com.facebook.presto.spi.type.TestTypeSignature"}, {"methodBody": ["METHOD_START", "{", "TestTypeSignature . assertSignature (  \" bigint \"  ,     \" bigint \"  ,    ImmutableList . of (  )  )  ;", "TestTypeSignature . assertSignature (  \" boolean \"  ,     \" boolean \"  ,    ImmutableList . of (  )  )  ;", "TestTypeSignature . assertSignature (  \" varchar \"  ,     \" varchar \"  ,    ImmutableList . of ( Integer . toString ( VarcharType . UNBOUNDED _ LENGTH )  )  )  ;", "assertEquals ( TypeSignature . parseTypeSignature (  \" int \"  )  ,    TypeSignature . parseTypeSignature (  \" integer \"  )  )  ;", "TestTypeSignature . assertSignature (  \" array ( bigint )  \"  ,     \" array \"  ,    ImmutableList . of (  \" bigint \"  )  )  ;", "assertEquals ( TypeSignature . parseTypeSignature (  \" array ( int )  \"  )  ,    TypeSignature . parseTypeSignature (  \" array ( integer )  \"  )  )  ;", "TestTypeSignature . assertSignature (  \" array ( array ( bigint )  )  \"  ,     \" array \"  ,    ImmutableList . of (  \" array ( bigint )  \"  )  )  ;", "assertEquals ( TypeSignature . parseTypeSignature (  \" array ( array ( int )  )  \"  )  ,    TypeSignature . parseTypeSignature (  \" array ( array ( integer )  )  \"  )  )  ;", "TestTypeSignature . assertSignature (  \" array ( timestamp   with   time   zone )  \"  ,     \" array \"  ,    ImmutableList . of (  \" timestamp   with   time   zone \"  )  )  ;", "TestTypeSignature . assertSignature (  \" map ( bigint , bigint )  \"  ,     \" map \"  ,    ImmutableList . of (  \" bigint \"  ,     \" bigint \"  )  )  ;", "TestTypeSignature . assertSignature (  \" map ( bigint , array ( bigint )  )  \"  ,     \" map \"  ,    ImmutableList . of (  \" bigint \"  ,     \" array ( bigint )  \"  )  )  ;", "TestTypeSignature . assertSignature (  \" map ( bigint , map ( bigint , map ( varchar , bigint )  )  )  \"  ,     \" map \"  ,    ImmutableList . of (  \" bigint \"  ,     \" map ( bigint , map ( varchar , bigint )  )  \"  )  )  ;", "assertSignatureFail (  \" blah (  )  \"  )  ;", "assertSignatureFail (  \" array (  )  \"  )  ;", "assertSignatureFail (  \" map (  )  \"  )  ;", "assertSignatureFail (  \" x \"  ,    ImmutableSet . of (  \" x \"  )  )  ;", "TestTypeSignature . assertSignature (  \" rowxxx ( a )  \"  ,     \" rowxxx \"  ,    ImmutableList . of (  \" a \"  )  )  ;", "}", "METHOD_END"], "methodName": ["parseSignature"], "fileName": "com.facebook.presto.spi.type.TestTypeSignature"}, {"methodBody": ["METHOD_START", "{", "TypeSignature   result    =    TypeSignature . parseTypeSignature (  \" decimal ( X ,  4  2  )  \"  ,    ImmutableSet . of (  \" X \"  )  )  ;", "assertEquals ( result . getParameters (  )  . size (  )  ,     2  )  ;", "assertEquals ( result . getParameters (  )  . get (  0  )  . isVariable (  )  ,    true )  ;", "assertEquals ( result . getParameters (  )  . get (  1  )  . isLongLiteral (  )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["parseSignatureWithLiterals"], "fileName": "com.facebook.presto.spi.type.TestTypeSignature"}, {"methodBody": ["METHOD_START", "{", "TestTypeSignature . assertSignature (  \" foo (  4  2  )  \"  ,     \" foo \"  ,    ImmutableList . of (  \"  4  2  \"  )  )  ;", "TestTypeSignature . assertSignature (  \" varchar (  1  0  )  \"  ,     \" varchar \"  ,    ImmutableList . of (  \"  1  0  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["parseWithLiteralParameters"], "fileName": "com.facebook.presto.spi.type.TestTypeSignature"}, {"methodBody": ["METHOD_START", "{", "return   new   TypeSignature (  \" row \"  ,    transform ( Arrays . asList ( columns )  ,    TypeSignatureParameter :  : of )  )  ;", "}", "METHOD_END"], "methodName": ["rowSignature"], "fileName": "com.facebook.presto.spi.type.TestTypeSignature"}, {"methodBody": ["METHOD_START", "{", "return   new   TypeSignature ( name )  ;", "}", "METHOD_END"], "methodName": ["signature"], "fileName": "com.facebook.presto.spi.type.TestTypeSignature"}, {"methodBody": ["METHOD_START", "{", "assertFalse ( TypeSignature . parseTypeSignature (  \" bigint \"  )  . isCalculated (  )  )  ;", "assertTrue ( TypeSignature . parseTypeSignature (  \" decimal ( p ,    s )  \"  ,    ImmutableSet . of (  \" p \"  ,     \" s \"  )  )  . isCalculated (  )  )  ;", "assertFalse ( TypeSignature . parseTypeSignature (  \" decimal (  2  ,     1  )  \"  )  . isCalculated (  )  )  ;", "assertTrue ( TypeSignature . parseTypeSignature (  \" array ( decimal ( p ,    s )  )  \"  ,    ImmutableSet . of (  \" p \"  ,     \" s \"  )  )  . isCalculated (  )  )  ;", "assertFalse ( TypeSignature . parseTypeSignature (  \" array ( decimal (  2  ,     1  )  )  \"  )  . isCalculated (  )  )  ;", "assertTrue ( TypeSignature . parseTypeSignature (  \" map ( decimal ( p 1  ,    s 1  )  , decimal ( p 2  ,    s 2  )  )  \"  ,    ImmutableSet . of (  \" p 1  \"  ,     \" s 1  \"  ,     \" p 2  \"  ,     \" s 2  \"  )  )  . isCalculated (  )  )  ;", "assertFalse ( TypeSignature . parseTypeSignature (  \" map ( decimal (  2  ,     1  )  , decimal (  3  ,     1  )  )  \"  )  . isCalculated (  )  )  ;", "assertTrue ( TypeSignature . parseTypeSignature (  \" row ( a   decimal ( p 1  , s 1  )  , b   decimal ( p 2  , s 2  )  )  \"  ,    ImmutableSet . of (  \" p 1  \"  ,     \" s 1  \"  ,     \" p 2  \"  ,     \" s 2  \"  )  )  . isCalculated (  )  )  ;", "assertFalse ( TypeSignature . parseTypeSignature (  \" row ( a   decimal (  2  ,  1  )  , b   decimal (  3  ,  2  )  )  \"  )  . isCalculated (  )  )  ;", "}", "METHOD_END"], "methodName": ["testIsCalculated"], "fileName": "com.facebook.presto.spi.type.TestTypeSignature"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( VarcharType . VARCHAR . getTypeSignature (  )  . toString (  )  ,     \" varchar \"  )  ;", "assertEquals ( VarcharType . createVarcharType (  4  2  )  . getTypeSignature (  )  . toString (  )  ,     \" varchar (  4  2  )  \"  )  ;", "assertEquals ( TypeSignature . parseTypeSignature (  \" varchar \"  )  ,    VarcharType . createUnboundedVarcharType (  )  . getTypeSignature (  )  )  ;", "assertEquals ( VarcharType . createUnboundedVarcharType (  )  . getTypeSignature (  )  ,    TypeSignature . parseTypeSignature (  \" varchar \"  )  )  ;", "assertEquals ( TypeSignature . parseTypeSignature (  \" varchar \"  )  . hashCode (  )  ,    VarcharType . createUnboundedVarcharType (  )  . getTypeSignature (  )  . hashCode (  )  )  ;", "assertNotEquals ( VarcharType . createUnboundedVarcharType (  )  . getTypeSignature (  )  ,    TypeSignature . parseTypeSignature (  \" varchar (  1  0  )  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testVarchar"], "fileName": "com.facebook.presto.spi.type.TestTypeSignature"}, {"methodBody": ["METHOD_START", "{", "return   new   TypeSignature ( StandardTypes . VARCHAR ,    TypeSignatureParameter . of ( VarcharType . UNBOUNDED _ LENGTH )  )  ;", "}", "METHOD_END"], "methodName": ["varchar"], "fileName": "com.facebook.presto.spi.type.TestTypeSignature"}, {"methodBody": ["METHOD_START", "{", "return   new   TypeSignature ( StandardTypes . VARCHAR ,    TypeSignatureParameter . of ( length )  )  ;", "}", "METHOD_END"], "methodName": ["varchar"], "fileName": "com.facebook.presto.spi.type.TestTypeSignature"}, {"methodBody": ["METHOD_START", "{", "Slice   result    =    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  )  ;", "long   overflow    =    UnscaledDecimal 1  2  8 Arithmetic . addWithOverflow ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal ( left )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal ( right )  ,    result )  ;", "BigInteger   actual    =    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimalToBigInteger ( result )  ;", "BigInteger   expected    =    left . add ( right )  . remainder (  . TWO . pow (  (  (  ( UnscaledDecimal 1  2  8 Arithmetic . UNSCALED _ DECIMAL _  1  2  8  _ SLICE _ LENGTH )     *     8  )     -     1  )  )  )  ;", "BigInteger   expectedOverflow    =    left . add ( right )  . divide (  . TWO . pow (  (  (  ( UnscaledDecimal 1  2  8 Arithmetic . UNSCALED _ DECIMAL _  1  2  8  _ SLICE _ LENGTH )     *     8  )     -     1  )  )  )  ;", "assertEquals ( actual ,    expected )  ;", "assertEquals ( overflow ,    expectedOverflow . longValueExact (  )  )  ;", "}", "METHOD_END"], "methodName": ["assertAddReturnOverflow"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . compare ( left ,    right )  ,    expectedResult )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . compare ( left . getLong (  0  )  ,    left . getLong ( SizeOf . SIZE _ OF _ LONG )  ,    right . getLong (  0  )  ,    right . getLong ( SizeOf . SIZE _ OF _ LONG )  )  ,    expectedResult )  ;", "}", "METHOD_END"], "methodName": ["assertCompare"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimalToBigInteger ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal ( value )  )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["assertConvertsUnscaledBigIntegerToDecimal"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimalToUnscaledLong ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal ( value )  )  ,    value )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal ( value )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal ( BigInteger . valueOf ( value )  )  )  ;", "}", "METHOD_END"], "methodName": ["assertConvertsUnscaledLongToDecimal"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "Slice   decimal    =    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal ( value )  ;", "try    {", "UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimalToUnscaledLong ( decimal )  ;", "fail (  )  ;", "}    catch    ( ArithmeticException   ignored )     {", "}", "}", "METHOD_END"], "methodName": ["assertDecimalToUnscaledLongOverflows"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "BigInteger   dividendBigInteger    =    Decimals . decodeUnscaledValue ( dividend )  ;", "BigInteger   divisorBigInteger    =    Decimals . decodeUnscaledValue ( divisor )  ;", "BigInteger   rescaledDividend    =    dividendBigInteger . multiply ( Decimals . bigIntegerTenToNth ( dividendRescaleFactor )  )  ;", "BigInteger   rescaledDivisor    =    divisorBigInteger . multiply ( Decimals . bigIntegerTenToNth ( divisorRescaleFactor )  )  ;", "BigInteger [  ]    expectedQuotientAndRemainder    =    rescaledDividend . divideAndRemainder ( rescaledDivisor )  ;", "BigInteger   expectedQuotient    =    expectedQuotientAndRemainder [  0  ]  ;", "BigInteger   expectedRemainder    =    expectedQuotientAndRemainder [  1  ]  ;", "boolean   overflowIsExpected    =     (  ( expectedQuotient . abs (  )  . compareTo ( Decimals . bigIntegerTenToNth (  3  8  )  )  )     >  =     0  )     |  |     (  ( expectedRemainder . abs (  )  . compareTo ( Decimals . bigIntegerTenToNth (  3  8  )  )  )     >  =     0  )  ;", "Slice   quotient    =     . unscaledDecimal (  )  ;", "Slice   remainder    =     . unscaledDecimal (  )  ;", "try    {", ". divide ( dividend ,    dividendRescaleFactor ,    divisor ,    divisorRescaleFactor ,    quotient ,    remainder )  ;", "if    ( overflowIsExpected )     {", "fail (  \" overflow   is   expected \"  )  ;", "}", "}    catch    ( ArithmeticException   e )     {", "if    (  ! overflowIsExpected )     {", "fail (  \" overflow   wasn ' t   expected \"  )  ;", "} else    {", "return ;", "}", "}", "BigInteger   actualQuotient    =    Decimals . decodeUnscaledValue ( quotient )  ;", "BigInteger   actualRemainder    =    Decimals . decodeUnscaledValue ( remainder )  ;", "if    (  ( expectedQuotient . equals ( actualQuotient )  )     &  &     ( expectedRemainder . equals ( actualRemainder )  )  )     {", "return ;", "}", "fail ( String . format (  \"  % s    /     % s    (  [  % s    *     2  ^  % d ]     /     [  % s    *     2  ^  % d ]  )    Expected :     % s (  % s )  .    Actual :     % s (  % s )  \"  ,    rescaledDividend ,    rescaledDivisor ,    dividendBigInteger ,    dividendRescaleFactor ,    divisorBigInteger ,    divisorRescaleFactor ,    expectedQuotient ,    expectedRemainder ,    actualQuotient ,    actualRemainder )  )  ;", "}", "METHOD_END"], "methodName": ["assertDivide"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( Slices . wrappedIntArray ( dividend )  ,     0  ,    Slices . wrappedIntArray ( divisor )  ,     0  )  ;", "}", "METHOD_END"], "methodName": ["assertDivideAllSigns"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivide ( dividend ,    dividendRescaleFactor ,    divisor ,    divisorRescaleFactor )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivide ( dividend ,    dividendRescaleFactor ,    TestUnscaledDecimal 1  2  8 Arithmetic . negate ( divisor )  ,    divisorRescaleFactor )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivide ( TestUnscaledDecimal 1  2  8 Arithmetic . negate ( dividend )  ,    dividendRescaleFactor ,    divisor ,    divisorRescaleFactor )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivide ( TestUnscaledDecimal 1  2  8 Arithmetic . negate ( dividend )  ,    dividendRescaleFactor ,    TestUnscaledDecimal 1  2  8 Arithmetic . negate ( divisor )  ,    divisorRescaleFactor )  ;", "}", "METHOD_END"], "methodName": ["assertDivideAllSigns"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal ( dividend )  ,    dividendRescaleFactor ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal ( divisor )  ,    divisorRescaleFactor )  ;", "}", "METHOD_END"], "methodName": ["assertDivideAllSigns"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( dividend ,     0  ,    divisor ,     0  )  ;", "}", "METHOD_END"], "methodName": ["assertDivideAllSigns"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "Slice   actual    =    Slices . allocate (  (  ( Long . BYTES )     *     4  )  )  ;", ". multiply 2  5  6  ( left ,    right ,    actual )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["assertMultiply256"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "try    {", ". multiply ( left ,    right )  ;", "fail (  )  ;", "}    catch    ( ArithmeticException   ignored )     {", "}", "}", "METHOD_END"], "methodName": ["assertMultiplyOverflows"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "try    {", ". rescale ( decimal ,    rescaleFactor )  ;", "fail (  )  ;", "}    catch    ( ArithmeticException   ignored )     {", "}", "}", "METHOD_END"], "methodName": ["assertRescaleOverflows"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "Slice   decimal    =    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal ( value )  ;", "BigInteger   expectedResult    =    value . multiply (  . TWO . pow ( leftShifts )  )  ;", "UnscaledDecimal 1  2  8 Arithmetic . shiftLeftDestructive ( decimal ,    leftShifts )  ;", "assertEquals ( Decimals . decodeUnscaledValue ( decimal )  ,    expectedResult )  ;", "}", "METHOD_END"], "methodName": ["assertShiftLeft"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "try    {", "assertShiftLeft ( value ,    leftShifts )  ;", "fail (  )  ;", "}    catch    ( Exception   ignored )     {", "}", "}", "METHOD_END"], "methodName": ["assertShiftLeftOverflow"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "Slice   result    =    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  )  ;", "UnscaledDecimal 1  2  8 Arithmetic . shiftRight ( decimal ,    rightShifts ,    roundUp ,    result )  ;", "assertEquals ( result ,    expectedResult )  ;", "}", "METHOD_END"], "methodName": ["assertShiftRight"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "assertShiftRightArray 8  ( value ,    rightShifts ,    false )  ;", "}", "METHOD_END"], "methodName": ["assertShiftRightArray8"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "BigInteger   expectedResult    =    value . shiftRight ( rightShifts )  ;", "if    ( roundUp )     {", "expectedResult    =    expectedResult . add ( BigInteger . ONE )  ;", "}", "int [  ]    ints    =     . toInt 8 Array ( value )  ;", "Slice   result    =    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  )  ;", "UnscaledDecimal 1  2  8 Arithmetic . shiftRightArray 8  ( ints ,    rightShifts ,    result )  ;", "assertEquals ( Decimals . decodeUnscaledValue ( result )  ,    expectedResult )  ;", "}", "METHOD_END"], "methodName": ["assertShiftRightArray8"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "try    {", "assertShiftRightArray 8  ( value ,    rightShifts )  ;", "fail (  )  ;", "}    catch    ( Exception   ignored )     {", "}", "}", "METHOD_END"], "methodName": ["assertShiftRightArray8Overflow"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "try    {", ". unscaledDecimal ( value )  ;", "fail (  )  ;", "}    catch    ( ArithmeticException   ignored )     {", "}", "}", "METHOD_END"], "methodName": ["assertUnscaledBigIntegerToDecimalOverflows"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "Slice   copy    =    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal ( slice )  ;", "UnscaledDecimal 1  2  8 Arithmetic . negate ( copy )  ;", "return   copy ;", "}", "METHOD_END"], "methodName": ["negate"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . add ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . add ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . add ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  2  )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . add ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  1 L    <  <     3  2  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  1 L    <  <     3  2  )  )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . add ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  1 L    <  <     3  1  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  1 L    <  <     3  1  )  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  1 L    <  <     3  2  )  )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . add ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  1 L    <  <     3  2  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  1 L    <  <     3  3  )  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  (  1 L    <  <     3  2  )     +     (  1 L    <  <     3  3  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testAdd"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "assertAddReturnOverflow ( TestUnscaledDecimal 1  2  8 Arithmetic . TWO ,    TestUnscaledDecimal 1  2  8 Arithmetic . TWO )  ;", "assertAddReturnOverflow ( Decimals . MAX _ DECIMAL _ UNSCALED _ VALUE ,    Decimals . MAX _ DECIMAL _ UNSCALED _ VALUE )  ;", "assertAddReturnOverflow ( Decimals . MAX _ DECIMAL _ UNSCALED _ VALUE . negate (  )  ,    Decimals . MAX _ DECIMAL _ UNSCALED _ VALUE )  ;", "assertAddReturnOverflow ( Decimals . MAX _ DECIMAL _ UNSCALED _ VALUE ,    Decimals . MAX _ DECIMAL _ UNSCALED _ VALUE . negate (  )  )  ;", "assertAddReturnOverflow ( Decimals . MAX _ DECIMAL _ UNSCALED _ VALUE . negate (  )  ,    Decimals . MAX _ DECIMAL _ UNSCALED _ VALUE . negate (  )  )  ;", "}", "METHOD_END"], "methodName": ["testAddReturnOverflow"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "TestUnscaledDecimal 1  2  8 Arithmetic . assertCompare ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  ,     0  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertCompare ( TestUnscaledDecimal 1  2  8 Arithmetic . negate ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  ,     0  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertCompare ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  ,    TestUnscaledDecimal 1  2  8 Arithmetic . negate ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  )  ,     0  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertCompare ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  0  )  ,     (  -  1  )  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertCompare ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  0  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  ,     1  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertCompare ( TestUnscaledDecimal 1  2  8 Arithmetic . negate ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  0  )  ,     (  -  1  )  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertCompare ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  0  )  ,    TestUnscaledDecimal 1  2  8 Arithmetic . negate ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  )  ,     1  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertCompare ( TestUnscaledDecimal 1  2  8 Arithmetic . negate ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  )  ,    TestUnscaledDecimal 1  2  8 Arithmetic . MAX _ DECIMAL ,     (  -  1  )  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertCompare ( TestUnscaledDecimal 1  2  8 Arithmetic . MAX _ DECIMAL ,    TestUnscaledDecimal 1  2  8 Arithmetic . negate ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  )  ,     1  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertCompare ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  -  1  0  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  -  1  1  )  )  ,     1  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertCompare ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  -  1  1  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  -  1  1  )  )  ,     0  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertCompare ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  -  1  2  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  -  1  1  )  )  ,     (  -  1  )  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertCompare ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  0  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  1  )  ,     (  -  1  )  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertCompare ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  1  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  1  )  ,     0  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertCompare ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  2  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  1  )  ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testCompare"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDecimalToUnscaledLongOverflows ( BigInteger . valueOf ( Long . MAX _ VALUE )  . add ( BigInteger . ONE )  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDecimalToUnscaledLongOverflows ( BigInteger . valueOf ( Long . MIN _ VALUE )  . subtract ( BigInteger . ONE )  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDecimalToUnscaledLongOverflows ( Decimals . MAX _ DECIMAL _ UNSCALED _ VALUE )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDecimalToUnscaledLongOverflows ( Decimals . MIN _ DECIMAL _ UNSCALED _ VALUE )  ;", "}", "METHOD_END"], "methodName": ["testDecimalToUnscaledLongOverflow"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns (  \"  0  \"  ,     \"  1  0  \"  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns (  \"  5  \"  ,     \"  1  0  \"  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns (  \"  5  0  \"  ,     \"  1  0  0  \"  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns (  \"  9  9  \"  ,     \"  1  0  \"  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns (  \"  9  5  \"  ,     \"  1  0  \"  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns (  \"  9  1  \"  ,     \"  1  0  \"  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns (  \"  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  ,     \"  1  0  \"  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns (  \"  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  ,     \"  3  \"  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns (  \"  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  ,     \"  9  \"  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns (  \"  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  ,     \"  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns (  \"  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  ,     \"  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  \"  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns (  \"  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  ,     \"  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  \"  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     4  ,     3  ,     2  ,     0     }  ,    new   int [  ]  {     4  ,     3  ,     2  ,     1     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     4  ,     3  ,     0  ,     0     }  ,    new   int [  ]  {     4  ,     3  ,     2  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     4  ,     0  ,     0  ,     0     }  ,    new   int [  ]  {     4  ,     3  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     0  ,     0  ,     0  ,     0     }  ,    new   int [  ]  {     4  ,     0  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     1  4  2  3  9  5  7  3  7  8  ,     1  7  6  5  8  2  0  9  1  4  ,     -  1  ,     0     }  ,    new   int [  ]  {     4  ,     6  5  5  3  5  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     1  4  2  3  9  5  7  3  7  8  ,     1  7  6  5  8  2  0  9  1  4  ,     -  1  ,     0     }  ,    new   int [  ]  {     2  0  4  2  4  5  7  7  0  8  ,     0  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     1  4  2  3  9  5  7  3  7  8  ,     -  9  2  5  2  6  3  8  5  8  ,     0  ,     0     }  ,    new   int [  ]  {     2  0  4  2  4  5  7  7  0  8  ,     0  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     -  1  ,     0  ,     0  ,     0     }  ,    new   int [  ]  {     2  0  4  2  4  5  7  7  0  8  ,     0  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     1  4  2  3  9  5  7  3  7  8  ,     -  1  4  4  4  4  3  6  9  9  0  ,     -  9  2  5  2  6  3  8  5  8  ,     1  1  0  6  3  4  5  7  2  5     }  ,    new   int [  ]  {     2  0  4  2  4  5  7  7  0  8  ,     0  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     0  ,     -  1  5  0  9  9  4  9  4  4  ,     0  ,     9  5  6  3  0  1  3  1  2     }  ,    new   int [  ]  {     -  1  7  6  5  8  2  0  9  1  4  ,     0  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     2  6  7  3  8  7  4  0  8  ,     -  1  5  0  9  9  0  2  8  8  ,     -  8  3  8  4  2  0  4  8  ,     9  5  6  3  1  4  8  8  0     }  ,    new   int [  ]  {     -  1  7  6  5  8  2  0  9  1  4  ,     2  0  4  2  4  5  7  7  0  8  ,     -  1  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     2  6  7  3  8  7  4  0  8  ,     -  1  5  0  9  9  0  2  8  8  ,     -  8  3  8  4  2  0  4  8  ,     9  5  6  3  1  4  8  8  0     }  ,    new   int [  ]  {     -  1  7  6  5  8  2  0  9  1  4  ,     -  2  5  6  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     2  6  7  3  8  7  4  0  8  ,     -  1  5  0  9  9  0  2  8  8  ,     -  8  3  8  4  2  0  4  8  ,     9  5  6  3  1  4  8  8  0     }  ,    new   int [  ]  {     -  1  7  6  5  8  2  0  9  1  4  ,     -  1  6  7  7  7  2  1  6  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     2  6  7  3  8  7  4  0  8  ,     -  1  5  0  9  9  0  2  8  8  ,     -  8  3  8  4  2  0  4  8  ,     9  5  6  3  1  4  8  8  0     }  ,    new   int [  ]  {     -  1  7  6  5  8  2  0  9  1  4  ,     2  0  4  2  4  5  7  7  0  8  ,     -  1  ,     2  1  4  7  4  8  3  6  4  7     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     2  6  7  3  8  7  4  0  8  ,     -  1  5  0  9  9  0  2  8  8  ,     -  8  3  8  4  2  0  4  8  ,     9  5  6  3  1  4  8  8  0     }  ,    new   int [  ]  {     -  1  7  6  5  8  2  0  9  1  4  ,     2  0  4  2  4  5  7  7  0  8  ,     1  3  4  2  1  7  7  2  7  9  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     2  6  7  3  8  7  4  0  8  ,     -  1  5  0  9  9  0  2  8  8  ,     -  8  3  8  4  2  0  4  8  ,     9  5  6  3  1  4  8  8  0     }  ,    new   int [  ]  {     -  1  7  6  5  8  2  0  9  1  4  ,     2  0  4  2  4  5  7  7  0  8  ,     6  5  5  3  5  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     1  ,     1  ,     1  ,     2  1  4  7  4  8  3  6  4  7     }  ,    new   int [  ]  {     -  1  ,     1  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     0  ,     -  1  8  7  9  0  4  8  1  9  3  ,     -  1  8  7  9  0  4  8  1  9  3  ,     0     }  ,    new   int [  ]  {     -  1  ,     -  1  8  7  9  0  4  8  1  9  3  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     1  ,     1  ,     -  1  ,     0     }  ,    new   int [  ]  {     -  1  ,     2  1  4  7  4  8  3  6  4  7  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     1  ,     1  ,     -  1  ,     0     }  ,    new   int [  ]  {     -  1  ,     2  1  4  7  4  8  3  6  4  7  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     3  ,     0  ,     -  2  1  4  7  4  8  3  6  4  8  ,     0     }  ,    new   int [  ]  {     1  ,     0  ,     5  3  6  8  7  0  9  1  2  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     3  ,     0  ,     3  2  7  6  8  ,     0     }  ,    new   int [  ]  {     1  ,     0  ,     8  1  9  2  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     0  ,     0  ,     3  2  7  6  8  ,     3  2  7  6  7     }  ,    new   int [  ]  {     1  ,     0  ,     3  2  7  6  8  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     3  ,     0  ,     0  ,     0     }  ,    new   int [  ]  {     2  ,     0  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     3  ,     0  ,     0  ,     0     }  ,    new   int [  ]  {     3  ,     0  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     3  ,     0  ,     0  ,     0     }  ,    new   int [  ]  {     4  ,     0  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     3  ,     0  ,     0  ,     0     }  ,    new   int [  ]  {     -  1  ,     0  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     -  1  ,     0  ,     0  ,     0     }  ,    new   int [  ]  {     1  ,     0  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     -  1  ,     0  ,     0  ,     0     }  ,    new   int [  ]  {     -  1  ,     0  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     -  1  ,     0  ,     0  ,     0     }  ,    new   int [  ]  {     3  ,     0  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     -  1  ,     -  1  ,     0  ,     0     }  ,    new   int [  ]  {     1  ,     0  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     -  1  ,     -  1  ,     0  ,     0     }  ,    new   int [  ]  {     -  1  ,     0  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     -  1  ,     -  2  ,     0  ,     0     }  ,    new   int [  ]  {     -  1  ,     0  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     2  2  1  3  6  ,     4  6  6  0  ,     0  ,     0     }  ,    new   int [  ]  {     3  9  6  1  2  ,     0  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     0  ,     0  ,     0  ,     0     }  ,    new   int [  ]  {     0  ,     1  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     0  ,     7  ,     0  ,     0     }  ,    new   int [  ]  {     0  ,     3  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     5  ,     7  ,     0  ,     0     }  ,    new   int [  ]  {     0  ,     3  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     0  ,     6  ,     0  ,     0     }  ,    new   int [  ]  {     0  ,     2  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     -  2  1  4  7  4  8  3  6  4  8  ,     0  ,     0  ,     0     }  ,    new   int [  ]  {     1  0  7  3  7  4  1  8  2  5  ,     0  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     0  ,     -  2  1  4  7  4  8  3  6  4  8  ,     0  ,     0     }  ,    new   int [  ]  {     1  0  7  3  7  4  1  8  2  5  ,     0  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     0  ,     -  2  1  4  7  4  8  3  6  4  8  ,     0  ,     0     }  ,    new   int [  ]  {     1  ,     1  0  7  3  7  4  1  8  2  4  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     3  0  8  7  4  ,     4  8  3  5  0  ,     0  ,     0     }  ,    new   int [  ]  {     3  0  8  7  4  ,     4  8  3  5  0  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     3  0  8  7  5  ,     4  8  3  5  0  ,     0  ,     0     }  ,    new   int [  ]  {     3  0  8  7  4  ,     4  8  3  5  0  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     3  0  8  7  3  ,     4  8  3  5  0  ,     0  ,     0     }  ,    new   int [  ]  {     3  0  8  7  4  ,     4  8  3  5  0  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     6  5  5  3  5  ,     6  5  5  3  5  ,     0  ,     0     }  ,    new   int [  ]  {     6  5  5  3  5  ,     6  5  5  3  5  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     6  5  5  3  5  ,     6  5  5  3  5  ,     0  ,     0     }  ,    new   int [  ]  {     0  ,     6  5  5  3  5  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     3  5  2  4  3  ,     1  7  7  6  7  ,     2  9  1  ,     0     }  ,    new   int [  ]  {     0  ,     1  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     3  5  2  4  3  ,     1  7  7  6  7  ,     2  9  1  ,     0     }  ,    new   int [  ]  {     0  ,     1  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     0  ,     6  5  5  3  4  ,     3  2  7  6  8  ,     0     }  ,    new   int [  ]  {     6  5  5  3  5  ,     3  2  7  6  8  ,     0  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     3  ,     0  ,     -  2  1  4  7  4  8  3  6  4  8  ,     0     }  ,    new   int [  ]  {     1  ,     0  ,     5  3  6  8  7  0  9  1  2  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     3  ,     0  ,     3  2  7  6  8  ,     0     }  ,    new   int [  ]  {     1  ,     0  ,     8  1  9  2  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     0  ,     0  ,     3  2  7  6  8  ,     3  2  7  6  7     }  ,    new   int [  ]  {     1  ,     0  ,     3  2  7  6  8  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     0  ,     6  5  5  3  4  ,     0  ,     3  2  7  6  8     }  ,    new   int [  ]  {     6  5  5  3  5  ,     0  ,     3  2  7  6  8  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     0  ,     -  2  ,     0  ,     -  2  1  4  7  4  8  3  6  4  8     }  ,    new   int [  ]  {     6  5  5  3  5  ,     0  ,     -  2  1  4  7  4  8  3  6  4  8  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns ( new   int [  ]  {     0  ,     -  2  ,     0  ,     -  2  1  4  7  4  8  3  6  4  8     }  ,    new   int [  ]  {     -  1  ,     0  ,     -  2  1  4  7  4  8  3  6  4  8  ,     0     }  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns (  \"  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  ,     1  0  ,     \"  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  \"  ,     1  0  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns (  \"  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  ,     1  0  ,     \"  1  1  1  1  1  1  1  1  1  1  1  1  \"  ,     2  2  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns (  \"  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  \"  ,     3  7  ,     \"  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  \"  ,     3  7  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns (  \"  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  \"  ,     2  ,     \"  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  \"  ,     1  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns (  \"  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  \"  ,     3  7  ,     \"  9  \"  ,     3  7  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns (  \"  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  \"  ,     3  7  ,     \"  1  \"  ,     3  7  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns (  \"  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  \"  ,     3  7  ,     \"  2  \"  ,     3  7  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns (  \"  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  \"  ,     3  7  ,     \"  2  \"  ,     1  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns (  \"  9  7  7  6  4  4  2  5  6  3  9  3  7  2  2  8  8  7  5  3  7  1  1  8  6  4  8  4  2  4  2  5  4  5  8  6  1  8  \"  ,     3  6  ,     \"  3  2  0  3  9  0  0  6  2  2  9  5  9  9  1  1  1  7  3  3  0  9  4  9  8  6  4  6  8  7  8  9  9  0  1  1  5  5  \"  ,     0  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns (  \"  3  4  3  5  4  5  7  6  6  0  2  3  5  2  6  2  2  8  4  2  4  8  1  6  3  3  7  8  6  8  1  6  2  2  0  2  8  3  \"  ,     0  ,     \"  3  1  1  3  7  5  8  3  1  1  5  1  1  8  5  6  4  9  3  0  5  4  4  8  2  9  8  5  5  6  5  2  2  5  8  0  4  5  \"  ,     0  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns (  \"  9  6  6  9  0  6  1  4  7  5  2  2  8  7  6  9  0  6  3  0  5  9  6  5  1  3  6  0  4  3  7  4  9  9  1  4  7  3  \"  ,     0  ,     \"  1  0  0  3  9  3  5  2  0  4  2  3  7  2  9  0  9  4  8  8  6  9  2  2  2  0  5  2  8  4  9  7  7  5  1  2  2  9  \"  ,     0  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertDivideAllSigns (  \"  8  7  5  6  8  3  5  7  7  1  6  0  9  0  1  1  5  3  7  4  0  2  9  0  4  0  8  7  8  7  5  5  8  9  1  0  7  6  \"  ,     0  ,     \"  4  6  1  0  6  7  1  3  6  0  4  9  9  1  3  3  7  7  9  8  2  0  9  3  4  3  8  1  5  5  7  7  1  4  8  5  8  9  \"  ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testDivide"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . hash ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . hash ( TestUnscaledDecimal 1  2  8 Arithmetic . negate ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  )  )  )  ;", "assertNotEquals ( UnscaledDecimal 1  2  8 Arithmetic . hash ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["testHash"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . isNegative ( TestUnscaledDecimal 1  2  8 Arithmetic . MIN _ DECIMAL )  ,    true )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . isNegative ( TestUnscaledDecimal 1  2  8 Arithmetic . MAX _ DECIMAL )  ,    false )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . isNegative ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["testIsNegative"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . multiply ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  ,    TestUnscaledDecimal 1  2  8 Arithmetic . MAX _ DECIMAL )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . multiply ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  )  ,    TestUnscaledDecimal 1  2  8 Arithmetic . MAX _ DECIMAL )  ,    TestUnscaledDecimal 1  2  8 Arithmetic . MAX _ DECIMAL )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . multiply ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  )  ,    TestUnscaledDecimal 1  2  8 Arithmetic . MIN _ DECIMAL )  ,    TestUnscaledDecimal 1  2  8 Arithmetic . MIN _ DECIMAL )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . multiply ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  -  1  )  )  ,    TestUnscaledDecimal 1  2  8 Arithmetic . MAX _ DECIMAL )  ,    TestUnscaledDecimal 1  2  8 Arithmetic . MIN _ DECIMAL )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . multiply ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  -  1  )  )  ,    TestUnscaledDecimal 1  2  8 Arithmetic . MIN _ DECIMAL )  ,    TestUnscaledDecimal 1  2  8 Arithmetic . MAX _ DECIMAL )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . multiply ( Slices . wrappedIntArray (  -  1  ,     -  1  ,     0  ,     0  )  ,    Slices . wrappedIntArray (  -  1  ,     1  6  7  7  7  2  1  5  ,     0  ,     0  )  )  ,    Slices . wrappedLongArray (  -  7  2  0  5  7  5  9  4  0  3  7  9  2  7  9  3  5 L ,     7  2  0  5  7  5  9  4  0  3  7  9  2  7  9  3  4 L )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . multiply ( Slices . wrappedLongArray (  -  1  0  9  6  9  8  2  4  8  0  8  9  6 L ,     0  )  ,    Slices . wrappedLongArray (  4  1  0  7  3  4  1  3  8  2  7  4  2  7  7  5  2  9  6 L ,     0  )  )  ,    Slices . wrappedLongArray (  2  0  7  9  4  5  0  8  0  7  9  8  4  4  5  5  6  8  0 L ,     4  1  0  7  3  4  1  1  3  8  4  8  9  2  8  9  5  9  0 L )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . multiply ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal ( Integer . MAX _ VALUE )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal ( Integer . MIN _ VALUE )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  (  ( long )     ( Integer . MAX _ VALUE )  )     *     ( Integer . MIN _ VALUE )  )  )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . multiply ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  \"  9  9  9  9  9  9  9  9  9  9  9  9  9  9  \"  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  \"  -  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  \"  -  9  9  9  9  9  9  9  9  9  9  9  9  9  9  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . multiply ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  \"  1  2  3  8  0  8  3  7  2  2  1  7  3  7  3  8  7  4  8  9  3  6  5  7  4  1  6  3  2  7  6  9  9  2  2  8  8  9  \"  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  \"  3  \"  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  \"  3  7  1  4  2  5  1  1  6  6  5  2  1  2  1  6  2  4  6  8  0  9  7  2  2  4  8  9  8  3  0  9  7  6  8  6  6  7  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testMultiply"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "TestUnscaledDecimal 1  2  8 Arithmetic . assertMultiply 2  5  6  ( TestUnscaledDecimal 1  2  8 Arithmetic . MAX _ DECIMAL ,    TestUnscaledDecimal 1  2  8 Arithmetic . MAX _ DECIMAL ,    Slices . wrappedLongArray (  -  1  3  7  4  7  9  9  1  0  2  8  0  1  3  4  6  5  5  9 L ,     -  2  2  3  4  0  5  3  0  0  5  6  5  5  1  7  7  4  6  1 L ,     5  3  2  7  4  9  3  0  6  3  6  7  9  1  2  3  1  2 L ,     1  5  9  3  0  9  1  9  1  1  1  3  2  4  5  2  2  7  7 L )  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertMultiply 2  5  6  ( TestUnscaledDecimal 1  2  8 Arithmetic . MIN _ DECIMAL ,    TestUnscaledDecimal 1  2  8 Arithmetic . MIN _ DECIMAL ,    Slices . wrappedLongArray (  -  1  3  7  4  7  9  9  1  0  2  8  0  1  3  4  6  5  5  9 L ,     -  2  2  3  4  0  5  3  0  0  5  6  5  5  1  7  7  4  6  1 L ,     5  3  2  7  4  9  3  0  6  3  6  7  9  1  2  3  1  2 L ,     1  5  9  3  0  9  1  9  1  1  1  3  2  4  5  2  2  7  7 L )  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertMultiply 2  5  6  ( Slices . wrappedLongArray (  -  1 L ,     1  1  5  2  9  2  1  5  0  4  6  0  6  8  4  6  9  7  5 L )  ,    Slices . wrappedLongArray (  -  1 L ,     1  1  5  2  9  2  1  5  0  4  6  0  6  8  4  6  9  7  5 L )  ,    Slices . wrappedLongArray (  1 L ,     -  2  3  0  5  8  4  3  0  0  9  2  1  3  6  9  3  9  5  2 L ,     -  1 L ,     7  2  0  5  7  5  9  4  0  3  7  9  2  7  9  3  5 L )  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertMultiply 2  5  6  ( Slices . wrappedLongArray (  1  3  1  1  7  6  8  4  6  7  2  9  4  8  9  9  6  9  5 L ,     1  0  7  0  9  3  5  3  6  1  4  9  6  3  6  7  9  0  5 L )  ,    Slices . wrappedLongArray (  -  8  1  9  8  6  1  4  3  1  1  0  4  7  9  0  7  1 L ,     8  1  9  8  5  5  2  9  2  0  5  9  3  1  2  3  0 L )  ,    Slices . wrappedLongArray (  -  4  4  4  6  6  6  6  7  0  9  5  7  3  1  6  6  8  9  7 L ,     -  6  1  6  4  9  6  3  8  3  9  8  9  9  8  2  0  5  8  2 L ,     8  9  4  1  4  0  1  5  6  7  2  8  0  4  6  5  5  5  7 L ,     4  7  5  9  7  1  2  7  1  7  1  4  8  8  2  0 L )  )  ;", "}", "METHOD_END"], "methodName": ["testMultiply256"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . multiply ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  ,     1  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . multiply ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  2  )  ,    Integer . MAX _ VALUE )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  2 L    *     ( Integer . MAX _ VALUE )  )  )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . multiply ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal ( Integer . MAX _ VALUE )  ,     (  -  3  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  (  -  3 L )     *     ( Integer . MAX _ VALUE )  )  )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . multiply ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal ( Integer . MIN _ VALUE )  ,     (  -  3  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  (  -  3 L )     *     ( Integer . MIN _ VALUE )  )  )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . multiply ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  . TWO . pow (  1  0  0  )  . subtract ( BigInteger . ONE )  )  ,     2  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  . TWO . pow (  1  0  1  )  . subtract (  . TWO )  )  )  ;", "}", "METHOD_END"], "methodName": ["testMultiplyByInt"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "TestUnscaledDecimal 1  2  8 Arithmetic . assertMultiplyOverflows ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  \"  9  9  9  9  9  9  9  9  9  9  9  9  9  9  \"  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  \"  -  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  )  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertMultiplyOverflows ( TestUnscaledDecimal 1  2  8 Arithmetic . MAX _ DECIMAL ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  \"  1  0  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testMultiplyOverflow"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( TestUnscaledDecimal 1  2  8 Arithmetic . negate ( TestUnscaledDecimal 1  2  8 Arithmetic . negate ( TestUnscaledDecimal 1  2  8 Arithmetic . MIN _ DECIMAL )  )  ,    TestUnscaledDecimal 1  2  8 Arithmetic . MIN _ DECIMAL )  ;", "assertEquals ( TestUnscaledDecimal 1  2  8 Arithmetic . negate ( TestUnscaledDecimal 1  2  8 Arithmetic . MIN _ DECIMAL )  ,    TestUnscaledDecimal 1  2  8 Arithmetic . MAX _ DECIMAL )  ;", "assertEquals ( TestUnscaledDecimal 1  2  8 Arithmetic . negate ( TestUnscaledDecimal 1  2  8 Arithmetic . MIN _ DECIMAL )  ,    TestUnscaledDecimal 1  2  8 Arithmetic . MAX _ DECIMAL )  ;", "assertEquals ( TestUnscaledDecimal 1  2  8 Arithmetic . negate ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  -  1  )  )  )  ;", "assertEquals ( TestUnscaledDecimal 1  2  8 Arithmetic . negate ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  -  1  )  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  )  )  ;", "assertEquals ( TestUnscaledDecimal 1  2  8 Arithmetic . negate ( TestUnscaledDecimal 1  2  8 Arithmetic . negate ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["testNegate"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( UnscaledDecimal 1  2  8 Arithmetic . overflows ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  \"  1  0  0  \"  )  ,     2  )  )  ;", "assertTrue ( UnscaledDecimal 1  2  8 Arithmetic . overflows ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  \"  -  1  0  0  \"  )  ,     2  )  )  ;", "assertFalse ( UnscaledDecimal 1  2  8 Arithmetic . overflows ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  \"  9  9  \"  )  ,     2  )  )  ;", "assertFalse ( UnscaledDecimal 1  2  8 Arithmetic . overflows ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  \"  -  9  9  \"  )  ,     2  )  )  ;", "}", "METHOD_END"], "methodName": ["testOverflows"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . rescale ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  0  )  ,     0  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  0 L )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . rescale ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  0  )  ,     (  -  2  0  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0 L )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . rescale ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  5  )  ,     (  -  1  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  2  )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . rescale ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  0  5  0  )  ,     (  -  3  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . rescale ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  5  )  ,     1  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  5  0  )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . rescale ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  -  1  4  )  )  ,     (  -  1  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  -  1  )  )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . rescale ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  -  1  4  )  )  ,     1  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  -  1  4  0  )  )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . rescale ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  ,     1  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . rescale ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  5  )  ,     (  -  1  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . rescale ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  0  )  ,     1  0  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  0  0  0  0  0  0  0  0  0  0  0 L )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . rescale ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  \"  1  5  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  )  ,     (  -  2  0  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  2  )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . rescale ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  \"  -  1  4  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  )  ,     (  -  2  0  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  -  1  )  )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . rescale ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  \"  5  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  )  ,     (  -  2  0  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . rescale ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  \"  1  5  0  5  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  )  ,     (  -  1  8  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  5  1  )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . rescale ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  \"  -  1  4  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  )  ,     (  -  1  8  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  -  1  4  0  )  )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . rescale ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal ( BigInteger . ONE . shiftLeft (  6  3  )  )  ,     (  -  1  8  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  9 L )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . rescale ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal ( BigInteger . ONE . shiftLeft (  6  2  )  )  ,     (  -  1  8  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  5 L )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . rescale ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal ( BigInteger . ONE . shiftLeft (  6  2  )  )  ,     (  -  1  9  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0 L )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . rescale (  . MAX _ DECIMAL ,     (  -  1  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal ( Decimals . MAX _ DECIMAL _ UNSCALED _ VALUE . divide ( BigInteger . TEN )  . add ( BigInteger . ONE )  )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . rescale (  . MIN _ DECIMAL ,     (  -  1  0  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal ( Decimals . MIN _ DECIMAL _ UNSCALED _ VALUE . divide ( BigInteger . valueOf (  1  0  0  0  0  0  0  0  0  0  0 L )  )  . subtract ( BigInteger . ONE )  )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . rescale ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  )  ,     3  7  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  \"  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . rescale ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  -  1  )  )  ,     3  7  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  \"  -  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . rescale ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  \"  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  )  ,     (  -  3  7  )  )  ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["testRescale"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "TestUnscaledDecimal 1  2  8 Arithmetic . assertRescaleOverflows ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  )  ,     3  8  )  ;", "}", "METHOD_END"], "methodName": ["testRescaleOverflows"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . shiftLeft ( Slices . wrappedLongArray (  1  3  1  1  7  6  8  4  6  7  2  9  4  8  9  9  6  9  5 L ,     -  1  1  6  2  8  5  0  0  5  3  6  7  9  3  9  8  1  1  1 L )  ,     0  )  ,    Slices . wrappedLongArray (  1  3  1  1  7  6  8  4  6  7  2  9  4  8  9  9  6  9  5 L ,     -  1  1  6  2  8  5  0  0  5  3  6  7  9  3  9  8  1  1  1 L )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . shiftLeft ( Slices . wrappedLongArray (  1  3  1  1  7  6  8  4  6  7  2  9  4  8  9  9  6  9  5 L ,     -  1  1  6  2  8  5  0  0  5  3  6  7  9  3  9  8  1  1  1 L )  ,     1  )  ,    Slices . wrappedLongArray (  2  6  2  3  5  3  6  9  3  4  5  8  9  7  9  9  3  9  0 L ,     -  2  3  2  5  7  0  0  1  0  7  3  5  8  7  9  6  2  2  2 L )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . shiftLeft ( Slices . wrappedLongArray (  1  3  1  1  7  6  8  4  6  7  2  9  4  8  9  9  6  9  5 L ,     6  2  1  2  9  0  4  4  9  6  5  3  7  6  8  0  1 L )  ,     8  )  ,    Slices . wrappedLongArray (  3  7  7  1  3  3  4  3  0  0  7  2  2  3  9  2  8  3  2 L ,     -  2  5  4  1  7  0  8  5  6  2  5  7  3  0  9  0  5  4  2 L )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . shiftLeft ( Slices . wrappedLongArray (  1  3  1  1  7  6  8  4  6  7  2  9  4  8  9  9  6  9  5 L ,     2  0  4  5  5  0  0  8  9  0  3  2  4  8  1 L )  ,     1  6  )  ,    Slices . wrappedLongArray (  6  2  3  0  8  8  9  1  5  2  0  3  5  8  8  0  9  6  0 L ,     -  5  0  4  1  3  4  9  4  3  8  8  7  6  8  7  2  1  4  0 L )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . shiftLeft ( Slices . wrappedLongArray (  1  3  1  1  7  6  8  4  6  7  2  9  4  8  9  9  6  9  5 L ,     2  2  7  1  5  6  0  4  8  1 L )  ,     3  2  )  ,    Slices . wrappedLongArray (  -  8  0  2  2  0  9  1  8  8  4  8  4  9  5  2  8  8  3  2 L ,     -  8  6  9  0  4  6  6  0  9  6  6  2  3  1  0  2  3  4  4 L )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . shiftLeft ( Slices . wrappedLongArray (  1  3  1  1  7  6  8  4  6  7  2  9  4  8  9  9  6  9  5 L ,     0 L )  ,     6  4  )  ,    Slices . wrappedLongArray (  0 L ,     1  3  1  1  7  6  8  4  6  7  2  9  4  8  9  9  6  9  5 L )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . shiftLeft ( Slices . wrappedLongArray (  1  4  7  3  1  7  7  4  6  1  2  1  9  6  8  4  7 L ,     0 L )  ,     (  6  4     +     8  )  )  ,    Slices . wrappedLongArray (  0 L ,     3  7  7  1  3  3  4  3  0  0  7  2  2  3  9  2  8  3  2 L )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . shiftLeft ( Slices . wrappedLongArray (  5  2  7  1  9 L ,     0 L )  ,     (  6  4     +     4  8  )  )  ,    Slices . wrappedLongArray (  0 L ,     -  3  6  0  7  6  6  4  7  7  6  5  0  0  4  7  7  9  5  2 L )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . shiftLeft ( Slices . wrappedLongArray (  1 L ,     0 L )  ,     (  6  4     +     6  3  )  )  ,    Slices . wrappedLongArray (  0 L ,     -  9  2  2  3  3  7  2  0  3  6  8  5  4  7  7  5  8  0  8 L )  )  ;", "}", "METHOD_END"], "methodName": ["testShiftLeft"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "assertShiftLeft ( new   BigInteger (  \"  4  4  6  3  1  9  5  8  0  0  7  8  1  2  5  \"  )  ,     1  9  )  ;", "assertShiftLeft (  . TWO . pow (  1  )  ,     1  0  )  ;", "assertShiftLeft (  . TWO . pow (  5  )  . add (  . TWO . pow (  1  )  )  ,     1  0  )  ;", "assertShiftLeft (  . TWO . pow (  1  )  ,     1  0  0  )  ;", "assertShiftLeft (  . TWO . pow (  5  )  . add (  . TWO . pow (  1  )  )  ,     1  0  0  )  ;", "assertShiftLeft (  . TWO . pow (  7  0  )  ,     3  0  )  ;", "assertShiftLeft (  . TWO . pow (  7  0  )  . add (  . TWO . pow (  1  )  )  ,     3  0  )  ;", "assertShiftLeft (  . TWO . pow (  1  0  6  )  ,     2  0  )  ;", "assertShiftLeft (  . TWO . pow (  1  0  6  )  . add (  . TWO . pow (  1  )  )  ,     2  0  )  ;", "assertShiftLeftOverflow (  . TWO . pow (  2  )  ,     1  2  7  )  ;", "assertShiftLeftOverflow (  . TWO . pow (  6  4  )  ,     6  4  )  ;", "assertShiftLeftOverflow (  . TWO . pow (  1  0  0  )  ,     2  8  )  ;", "}", "METHOD_END"], "methodName": ["testShiftLeftCompareToBigInteger"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . shiftLeftMultiPrecision ( new   int [  ]  {     -  1  5  8  9  2  7  2  2  5  1  ,     1  4  5  2  7  1  7  3  9  7  ,     1  3  9  2  0  4  8  2  9  8  ,     -  1  6  6  6  7  9  8  9  ,     0     }  ,     4  ,     0  )  ,    new   int [  ]  {     -  1  5  8  9  2  7  2  2  5  1  ,     1  4  5  2  7  1  7  3  9  7  ,     1  3  9  2  0  4  8  2  9  8  ,     -  1  6  6  6  7  9  8  9  ,     0     }  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . shiftLeftMultiPrecision ( new   int [  ]  {     -  1  5  8  9  2  7  2  2  5  1  ,     1  4  5  2  7  1  7  3  9  7  ,     1  3  9  2  0  4  8  2  9  8  ,     -  1  6  6  6  7  9  8  9  ,     0     }  ,     5  ,     1  )  ,    new   int [  ]  {     1  1  1  6  4  2  2  7  9  4  ,     -  1  3  8  9  5  3  2  5  0  1  ,     -  1  5  1  0  8  7  0  7  0  0  ,     -  3  3  3  3  5  9  7  8  ,     1     }  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . shiftLeftMultiPrecision ( new   int [  ]  {     -  1  5  8  9  2  7  2  2  5  1  ,     1  4  5  2  7  1  7  3  9  7  ,     1  3  9  2  0  4  8  2  9  8  ,     -  1  6  6  6  7  9  8  9  ,     0     }  ,     5  ,     3  1  )  ,    new   int [  ]  {     -  2  1  4  7  4  8  3  6  4  8  ,     -  7  9  4  6  3  6  1  2  6  ,     7  2  6  3  5  8  6  9  8  ,     -  1  4  5  1  4  5  9  4  9  9  ,     2  1  3  9  1  4  9  6  5  3     }  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . shiftLeftMultiPrecision ( new   int [  ]  {     -  1  5  8  9  2  7  2  2  5  1  ,     1  4  5  2  7  1  7  3  9  7  ,     1  3  9  2  0  4  8  2  9  8  ,     -  1  6  6  6  7  9  8  9  ,     0     }  ,     5  ,     3  2  )  ,    new   int [  ]  {     0  ,     -  1  5  8  9  2  7  2  2  5  1  ,     1  4  5  2  7  1  7  3  9  7  ,     1  3  9  2  0  4  8  2  9  8  ,     -  1  6  6  6  7  9  8  9     }  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . shiftLeftMultiPrecision ( new   int [  ]  {     -  1  5  8  9  2  7  2  2  5  1  ,     1  4  5  2  7  1  7  3  9  7  ,     1  3  9  2  0  4  8  2  9  8  ,     -  1  6  6  6  7  9  8  9  ,     0  ,     0     }  ,     6  ,     3  3  )  ,    new   int [  ]  {     0  ,     1  1  1  6  4  2  2  7  9  4  ,     -  1  3  8  9  5  3  2  5  0  1  ,     -  1  5  1  0  8  7  0  7  0  0  ,     -  3  3  3  3  5  9  7  8  ,     1     }  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . shiftLeftMultiPrecision ( new   int [  ]  {     -  1  5  8  9  2  7  2  2  5  1  ,     1  4  5  2  7  1  7  3  9  7  ,     1  3  9  2  0  4  8  2  9  8  ,     -  1  6  6  6  7  9  8  9  ,     0  ,     0     }  ,     6  ,     3  7  )  ,    new   int [  ]  {     0  ,     6  8  2  8  9  5  5  2  0  ,     -  7  5  7  6  8  3  5  3  2  ,     1  5  9  5  8  7  2  5  8  6  ,     -  5  3  3  3  7  5  6  3  8  ,     3  1     }  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . shiftLeftMultiPrecision ( new   int [  ]  {     -  1  5  8  9  2  7  2  2  5  1  ,     1  4  5  2  7  1  7  3  9  7  ,     1  3  9  2  0  4  8  2  9  8  ,     -  1  6  6  6  7  9  8  9  ,     0  ,     0     }  ,     6  ,     6  4  )  ,    new   int [  ]  {     0  ,     0  ,     -  1  5  8  9  2  7  2  2  5  1  ,     1  4  5  2  7  1  7  3  9  7  ,     1  3  9  2  0  4  8  2  9  8  ,     -  1  6  6  6  7  9  8  9     }  )  ;", "}", "METHOD_END"], "methodName": ["testShiftLeftMultiPrecision"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "TestUnscaledDecimal 1  2  8 Arithmetic . assertShiftRight ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  ,     0  ,    true ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertShiftRight ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  ,     3  3  ,    true ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertShiftRight ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  )  ,     1  ,    true ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  )  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertShiftRight ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  -  4  )  )  ,     1  ,    true ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  -  2  )  )  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertShiftRight ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  1 L    <  <     3  2  )  )  ,     3  2  ,    true ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  )  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertShiftRight ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  1 L    <  <     3  1  )  )  ,     3  2  ,    true ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  )  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertShiftRight ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  1 L    <  <     3  1  )  )  ,     3  2  ,    false ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertShiftRight ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  3 L    <  <     3  3  )  )  ,     3  4  ,    true ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  2  )  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertShiftRight ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  3 L    <  <     3  3  )  )  ,     3  4  ,    false ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  )  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertShiftRight ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal ( BigInteger . valueOf (  9  2  2  3  3  7  2  0  3  6  8  5  4  7  7  5  8  0  7 L )  . setBit (  6  3  )  . setBit (  6  4  )  )  ,     1  ,    true ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal ( BigInteger . ONE . shiftLeft (  6  4  )  )  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertShiftRight ( TestUnscaledDecimal 1  2  8 Arithmetic . MAX _ DECIMAL ,     1  ,    true ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal ( Decimals . MAX _ DECIMAL _ UNSCALED _ VALUE . shiftRight (  1  )  . add ( BigInteger . ONE )  )  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertShiftRight ( TestUnscaledDecimal 1  2  8 Arithmetic . MIN _ DECIMAL ,     1  ,    true ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal ( Decimals . MAX _ DECIMAL _ UNSCALED _ VALUE . shiftRight (  1  )  . add ( BigInteger . ONE )  . negate (  )  )  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertShiftRight ( TestUnscaledDecimal 1  2  8 Arithmetic . MAX _ DECIMAL ,     6  6  ,    true ,    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal ( Decimals . MAX _ DECIMAL _ UNSCALED _ VALUE . shiftRight (  6  6  )  . add ( BigInteger . ONE )  )  )  ;", "}", "METHOD_END"], "methodName": ["testShiftRight"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "assertShiftRightArray 8  ( TestUnscaledDecimal 1  2  8 Arithmetic . TWO . pow (  1  )  ,     0  )  ;", "assertShiftRightArray 8  ( TestUnscaledDecimal 1  2  8 Arithmetic . TWO . pow (  1  )  ,     1  )  ;", "assertShiftRightArray 8  ( TestUnscaledDecimal 1  2  8 Arithmetic . TWO . pow (  1  )  ,     1  0  )  ;", "assertShiftRightArray 8  ( TestUnscaledDecimal 1  2  8 Arithmetic . TWO . pow (  1  5  )  . add ( TestUnscaledDecimal 1  2  8 Arithmetic . TWO . pow (  3  )  )  ,     2  )  ;", "assertShiftRightArray 8  ( TestUnscaledDecimal 1  2  8 Arithmetic . TWO . pow (  1  5  )  . add ( TestUnscaledDecimal 1  2  8 Arithmetic . TWO . pow (  3  )  )  ,     1  0  )  ;", "assertShiftRightArray 8  ( TestUnscaledDecimal 1  2  8 Arithmetic . TWO . pow (  1  5  )  . add ( TestUnscaledDecimal 1  2  8 Arithmetic . TWO . pow (  3  )  )  ,     2  0  )  ;", "assertShiftRightArray 8  ( TestUnscaledDecimal 1  2  8 Arithmetic . TWO . pow (  7  0  )  ,     3  0  )  ;", "assertShiftRightArray 8  ( TestUnscaledDecimal 1  2  8 Arithmetic . TWO . pow (  7  0  )  . subtract ( TestUnscaledDecimal 1  2  8 Arithmetic . TWO . pow (  1  )  )  ,     3  0  ,    true )  ;", "assertShiftRightArray 8  ( TestUnscaledDecimal 1  2  8 Arithmetic . TWO . pow (  7  0  )  ,     3  2  )  ;", "assertShiftRightArray 8  ( TestUnscaledDecimal 1  2  8 Arithmetic . TWO . pow (  7  0  )  . subtract ( TestUnscaledDecimal 1  2  8 Arithmetic . TWO . pow (  1  )  )  ,     3  2  ,    true )  ;", "assertShiftRightArray 8  ( TestUnscaledDecimal 1  2  8 Arithmetic . TWO . pow (  1  2  0  )  ,     7  0  )  ;", "assertShiftRightArray 8  ( TestUnscaledDecimal 1  2  8 Arithmetic . TWO . pow (  1  2  0  )  . subtract ( TestUnscaledDecimal 1  2  8 Arithmetic . TWO . pow (  1  )  )  ,     7  0  ,    true )  ;", "assertShiftRightArray 8  ( TestUnscaledDecimal 1  2  8 Arithmetic . TWO . pow (  1  2  0  )  ,     9  6  )  ;", "assertShiftRightArray 8  ( TestUnscaledDecimal 1  2  8 Arithmetic . TWO . pow (  1  2  0  )  . subtract ( TestUnscaledDecimal 1  2  8 Arithmetic . TWO . pow (  1  )  )  ,     9  6  ,    true )  ;", "assertShiftRightArray 8  ( Decimals . MAX _ DECIMAL _ UNSCALED _ VALUE ,     2  0  ,    true )  ;", "assertShiftRightArray 8  ( Decimals . MAX _ DECIMAL _ UNSCALED _ VALUE . multiply ( Decimals . MAX _ DECIMAL _ UNSCALED _ VALUE )  ,     1  3  0  )  ;", "assertShiftRightArray 8  ( TestUnscaledDecimal 1  2  8 Arithmetic . TWO . pow (  2  5  6  )  . subtract ( BigInteger . ONE )  ,     1  3  0  ,    true )  ;", "assertShiftRightArray 8 Overflow ( TestUnscaledDecimal 1  2  8 Arithmetic . TWO . pow (  1  5  6  )  ,     1  )  ;", "assertShiftRightArray 8 Overflow ( Decimals . MAX _ DECIMAL _ UNSCALED _ VALUE . multiply ( Decimals . MAX _ DECIMAL _ UNSCALED _ VALUE )  ,     2  0  )  ;", "assertShiftRightArray 8 Overflow ( TestUnscaledDecimal 1  2  8 Arithmetic . TWO . pow (  2  5  6  )  . subtract ( BigInteger . ONE )  ,     1  2  9  )  ;", "}", "METHOD_END"], "methodName": ["testShiftRightArray8"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . shiftRightMultiPrecision ( new   int [  ]  {     -  1  5  8  9  2  7  2  2  5  1  ,     1  4  5  2  7  1  7  3  9  7  ,     1  3  9  2  0  4  8  2  9  8  ,     -  1  6  6  6  7  9  8  9  ,     0     }  ,     4  ,     0  )  ,    new   int [  ]  {     -  1  5  8  9  2  7  2  2  5  1  ,     1  4  5  2  7  1  7  3  9  7  ,     1  3  9  2  0  4  8  2  9  8  ,     -  1  6  6  6  7  9  8  9  ,     0     }  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . shiftRightMultiPrecision ( new   int [  ]  {     0  ,     -  1  5  8  9  2  7  2  2  5  1  ,     1  4  5  2  7  1  7  3  9  7  ,     1  3  9  2  0  4  8  2  9  8  ,     -  1  6  6  6  7  9  8  9     }  ,     5  ,     1  )  ,    new   int [  ]  {     -  2  1  4  7  4  8  3  6  4  8  ,     -  7  9  4  6  3  6  1  2  6  ,     7  2  6  3  5  8  6  9  8  ,     -  1  4  5  1  4  5  9  4  9  9  ,     2  1  3  9  1  4  9  6  5  3     }  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . shiftRightMultiPrecision ( new   int [  ]  {     0  ,     -  1  5  8  9  2  7  2  2  5  1  ,     1  4  5  2  7  1  7  3  9  7  ,     1  3  9  2  0  4  8  2  9  8  ,     -  1  6  6  6  7  9  8  9     }  ,     5  ,     3  2  )  ,    new   int [  ]  {     -  1  5  8  9  2  7  2  2  5  1  ,     1  4  5  2  7  1  7  3  9  7  ,     1  3  9  2  0  4  8  2  9  8  ,     -  1  6  6  6  7  9  8  9  ,     0     }  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . shiftRightMultiPrecision ( new   int [  ]  {     0  ,     0  ,     -  1  5  8  9  2  7  2  2  5  1  ,     1  4  5  2  7  1  7  3  9  7  ,     1  3  9  2  0  4  8  2  9  8  ,     -  1  6  6  6  7  9  8  9     }  ,     6  ,     3  3  )  ,    new   int [  ]  {     -  2  1  4  7  4  8  3  6  4  8  ,     -  7  9  4  6  3  6  1  2  6  ,     7  2  6  3  5  8  6  9  8  ,     -  1  4  5  1  4  5  9  4  9  9  ,     2  1  3  9  1  4  9  6  5  3  ,     0     }  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . shiftRightMultiPrecision ( new   int [  ]  {     0  ,     0  ,     -  1  5  8  9  2  7  2  2  5  1  ,     1  4  5  2  7  1  7  3  9  7  ,     1  3  9  2  0  4  8  2  9  8  ,     -  1  6  6  6  7  9  8  9     }  ,     6  ,     3  7  )  ,    new   int [  ]  {     6  7  1  0  8  8  6  4  0  ,     -  1  3  9  1  8  4  2  0  3  8  ,     1  3  8  7  5  7  4  6  9  8  ,     1  5  1  9  8  9  6  5  1  7  ,     1  3  3  6  9  6  8  5  3  ,     0     }  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . shiftRightMultiPrecision ( new   int [  ]  {     0  ,     0  ,     -  1  5  8  9  2  7  2  2  5  1  ,     1  4  5  2  7  1  7  3  9  7  ,     1  3  9  2  0  4  8  2  9  8  ,     -  1  6  6  6  7  9  8  9     }  ,     6  ,     6  4  )  ,    new   int [  ]  {     -  1  5  8  9  2  7  2  2  5  1  ,     1  4  5  2  7  1  7  3  9  7  ,     1  3  9  2  0  4  8  2  9  8  ,     -  1  6  6  6  7  9  8  9  ,     0  ,     0     }  )  ;", "}", "METHOD_END"], "methodName": ["testShiftRightMultiPrecision"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . toUnscaledString ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  )  ,     \"  0  \"  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . toUnscaledString (  . negate ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  0  )  )  )  ,     \"  0  \"  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . toUnscaledString ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  1  )  )  ,     \"  1  \"  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . toUnscaledString ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  (  -  1  )  )  )  ,     \"  -  1  \"  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . toUnscaledString ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  . MAX _ DECIMAL )  )  ,    Decimals . MAX _ DECIMAL _ UNSCALED _ VALUE . toString (  )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . toUnscaledString ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  . MIN _ DECIMAL )  )  ,    Decimals . MIN _ DECIMAL _ UNSCALED _ VALUE . toString (  )  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . toUnscaledString ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  \"  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  )  )  ,     \"  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  )  ;", "assertEquals ( UnscaledDecimal 1  2  8 Arithmetic . toUnscaledString ( UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  \"  -  1  0  0  0  0  0  0  0  0  0  0  0  2  0  0  0  0  0  0  0  0  0  0  0  0  3  0  0  0  0  0  0  0  0  0  0  0  \"  )  )  ,     \"  -  1  0  0  0  0  0  0  0  0  0  0  0  2  0  0  0  0  0  0  0  0  0  0  0  0  3  0  0  0  0  0  0  0  0  0  0  0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testToString"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "TestUnscaledDecimal 1  2  8 Arithmetic . assertConvertsUnscaledBigIntegerToDecimal ( Decimals . MAX _ DECIMAL _ UNSCALED _ VALUE )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertConvertsUnscaledBigIntegerToDecimal ( Decimals . MIN _ DECIMAL _ UNSCALED _ VALUE )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertConvertsUnscaledBigIntegerToDecimal ( BigInteger . ZERO )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertConvertsUnscaledBigIntegerToDecimal ( BigInteger . ONE )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertConvertsUnscaledBigIntegerToDecimal ( BigInteger . ONE . negate (  )  )  ;", "}", "METHOD_END"], "methodName": ["testUnscaledBigIntegerToDecimal"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "TestUnscaledDecimal 1  2  8 Arithmetic . assertUnscaledBigIntegerToDecimalOverflows ( Decimals . MAX _ DECIMAL _ UNSCALED _ VALUE . add ( BigInteger . ONE )  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertUnscaledBigIntegerToDecimalOverflows ( Decimals . MAX _ DECIMAL _ UNSCALED _ VALUE . setBit (  9  5  )  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertUnscaledBigIntegerToDecimalOverflows ( Decimals . MAX _ DECIMAL _ UNSCALED _ VALUE . setBit (  1  2  7  )  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertUnscaledBigIntegerToDecimalOverflows ( Decimals . MIN _ DECIMAL _ UNSCALED _ VALUE . subtract ( BigInteger . ONE )  )  ;", "}", "METHOD_END"], "methodName": ["testUnscaledBigIntegerToDecimalOverflow"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "TestUnscaledDecimal 1  2  8 Arithmetic . assertConvertsUnscaledLongToDecimal (  0  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertConvertsUnscaledLongToDecimal (  1  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertConvertsUnscaledLongToDecimal (  (  -  1  )  )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertConvertsUnscaledLongToDecimal ( Long . MAX _ VALUE )  ;", "TestUnscaledDecimal 1  2  8 Arithmetic . assertConvertsUnscaledLongToDecimal ( Long . MIN _ VALUE )  ;", "}", "METHOD_END"], "methodName": ["testUnscaledLongToDecimal"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "byte [  ]    array    =    new   byte [  ( data . length )     *     4  ]  ;", "ByteBuffer   byteBuffer    =    ByteBuffer . wrap ( array )  ;", "byteBuffer . order ( ByteOrder . LITTLE _ ENDIAN )  ;", "IntBuffer   intBuffer    =    byteBuffer . asIntBuffer (  )  ;", "intBuffer . put ( data )  ;", "Collections . reverse ( Bytes . asList ( array )  )  ;", "array [  0  ]     &  =     ~  (  1     <  <     7  )  ;", "return   new   BigInteger (  (  (  ( array [  0  ]  )     &     (  1     <  <     7  )  )     >     0     ?     -  1     :     1  )  ,    array )  ;", "}", "METHOD_END"], "methodName": ["toBigInteger"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "Slice   slice    =    Slices . wrappedBuffer ( bytes )  ;", "int [  ]    ints    =    new   int [  8  ]  ;", "for    ( int   i    =     0  ;    i    <     ( ints . length )  ;    i +  +  )     {", "ints [ i ]     =    slice . getInt (  (  ( i    *     ( Integer . SIZE )  )     /     ( Byte . SIZE )  )  )  ;", "}", "return   ints ;", "}", "METHOD_END"], "methodName": ["toInt8Array"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "byte [  ]    bigIntegerBytes    =    value . toByteArray (  )  ;", "Collections . reverse ( Bytes . asList ( bigIntegerBytes )  )  ;", "byte [  ]    bytes    =    new   byte [  (  8     *     4  )     +     1  ]  ;", "System . arraycopy ( bigIntegerBytes ,     0  ,    bytes ,     0  ,    bigIntegerBytes . length )  ;", "return    . toInt 8 Array ( bytes )  ;", "}", "METHOD_END"], "methodName": ["toInt8Array"], "fileName": "com.facebook.presto.spi.type.TestUnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "return   AbstractLongType . hash ( DateTimeEncoding . unpackMillisUtc ( block . getLong ( position ,     0  )  )  )  ;", "}", "METHOD_END"], "methodName": ["hash"], "fileName": "com.facebook.presto.spi.type.TimeWithTimeZoneType"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( timeZoneKey ,     \" timeZoneKey   is   null \"  )  ;", "return    (  ( TimeZone )     (  . TIME _ ZONES [ timeZoneKey . getKey (  )  ]  . clone (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getTimeZoneForKey"], "fileName": "com.facebook.presto.spi.type.TimeZoneIndex"}, {"methodBody": ["METHOD_START", "{", "(  ! check )     {", "throw   new   IllegalArgumentException ( Stringormat ( message ,    args )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkArgument"], "fileName": "com.facebook.presto.spi.type.TimeZoneKey"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "com.facebook.presto.spi.type.TimeZoneKey"}, {"methodBody": ["METHOD_START", "{", "return   key ;", "}", "METHOD_END"], "methodName": ["getKey"], "fileName": "com.facebook.presto.spi.type.TimeZoneKey"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( zoneId ,     \" Zone   id   is   null \"  )  ;", ". checkArgument (  (  !  ( zoneId . isEmpty (  )  )  )  ,     \" Zone   id   is   an   empty   string \"  )  ;", "zoneKey    =     . ZONE _ ID _ TO _ KEY . get ( zoneId . toLowerCase ( Locale . ENGLISH )  )  ;", "if    ( zoneKey    =  =    null )     {", "zoneKey    =     . ZONE _ ID _ TO _ KEY . get (  . normalizeZoneId ( zoneId )  )  ;", "}", "if    ( zoneKey    =  =    null )     {", "throw   new   TimeZoneNotSupportedException ( zoneId )  ;", "}", "return   zoneKey ;", "}", "METHOD_END"], "methodName": ["getTimeZoneKey"], "fileName": "com.facebook.presto.spi.type.TimeZoneKey"}, {"methodBody": ["METHOD_START", "{", "TimeZoneKey . checkArgument (  (  ( timeZoneKey    <     ( TimeZoneKey . TIME _ ZONE _ KEYS . length )  )     &  &     (  ( TimeZoneKey . TIME _ ZONE _ KEYS [ timeZoneKey ]  )     !  =    null )  )  ,     \" Invalid   time   zone   key    % d \"  ,    timeZoneKey )  ;", "return   TimeZoneKey . TIME _ ZONE _ KEYS [ timeZoneKey ]  ;", "}", "METHOD_END"], "methodName": ["getTimeZoneKey"], "fileName": "com.facebook.presto.spi.type.TimeZoneKey"}, {"methodBody": ["METHOD_START", "{", "if    ( offsetMinutes    =  =     0  )     {", "return    . UTC _ KEY ;", "}", ". checkArgument (  (  ( offsetMinutes    >  =     (  . OFFSET _ TIME _ ZONE _ MIN )  )     &  &     ( offsetMinutes    <  =     (  . OFFSET _ TIME _ ZONE _ MAX )  )  )  ,     \" Invalid   offset   minutes    % s \"  ,    offsetMinutes )  ;", "timeZoneKey    =     . OFFSET _ TIME _ ZONE _ KEYS [  (  (  ( int )     ( offsetMinutes )  )     -     (  . OFFSET _ TIME _ ZONE _ MIN )  )  ]  ;", "if    ( timeZoneKey    =  =    null )     {", "throw   new   TimeZoneNotSupportedException (  . zoneIdForOffset ( offsetMinutes )  )  ;", "}", "return   timeZoneKey ;", "}", "METHOD_END"], "methodName": ["getTimeZoneKeyForOffset"], "fileName": "com.facebook.presto.spi.type.TimeZoneKey"}, {"methodBody": ["METHOD_START", "{", "return   TimeZoneKey . ZONE _ KEYS ;", "}", "METHOD_END"], "methodName": ["getTimeZoneKeys"], "fileName": "com.facebook.presto.spi.type.TimeZoneKey"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  (  (  (  ( zoneId . equals (  \" utc \"  )  )     |  |     ( zoneId . equals (  \" z \"  )  )  )     |  |     ( zoneId . equals (  \" ut \"  )  )  )     |  |     ( zoneId . equals (  \" uct \"  )  )  )     |  |     ( zoneId . equals (  \" ut \"  )  )  )     |  |     ( zoneId . equals (  \" gmt \"  )  )  )     |  |     ( zoneId . equals (  \" gmt 0  \"  )  )  )     |  |     ( zoneId . equals (  \" greenwich \"  )  )  )     |  |     ( zoneId . equals (  \" universal \"  )  )  )     |  |     ( zoneId . equals (  \" zulu \"  )  )  ;", "}", "METHOD_END"], "methodName": ["isUtcEquivalentName"], "fileName": "com.facebook.presto.spi.type.TimeZoneKey"}, {"methodBody": ["METHOD_START", "{", "return   TimeZoneKey . normalizeZoneId ( zoneId )  . equals (  \" utc \"  )  ;", "}", "METHOD_END"], "methodName": ["isUtcZoneId"], "fileName": "com.facebook.presto.spi.type.TimeZoneKey"}, {"methodBody": ["METHOD_START", "{", "String   zoneId    =    originalZoneId . toLowerCase ( Locale . ENGLISH )  ;", "boolean   startsWithEtc    =    zoneId . startsWith (  \" etc /  \"  )  ;", "if    ( startsWithEtc )     {", "zoneId    =    zoneId . substring (  4  )  ;", "}", "if    (  . isUtcEquivalentName ( zoneId )  )     {", "return    \" utc \"  ;", "}", "int   length    =    zoneId . length (  )  ;", "boolean   startsWithEtcGmt    =    false ;", "if    (  ( length    >     3  )     &  &     (  ( zoneId . startsWith (  \" utc \"  )  )     |  |     ( zoneId . startsWith (  \" gmt \"  )  )  )  )     {", "if    ( startsWithEtc    &  &     ( zoneId . startsWith (  \" gmt \"  )  )  )     {", "startsWithEtcGmt    =    true ;", "}", "zoneId    =    zoneId . substring (  3  )  ;", "length    =    zoneId . length (  )  ;", "} else", "if    (  ( length    >     2  )     &  &     ( zoneId . startsWith (  \" ut \"  )  )  )     {", "zoneId    =    zoneId . substring (  2  )  ;", "length    =    zoneId . length (  )  ;", "}", "if    (  (  \"  +  0  0  :  0  0  \"  . equals ( zoneId )  )     |  |     (  \"  -  0  0  :  0  0  \"  . equals ( zoneId )  )  )     {", "return    \" utc \"  ;", "}", "if    (  ( length    =  =     6  )     &  &     (  ( zoneId . charAt (  3  )  )     =  =     '  :  '  )  )     {", "return   zoneId ;", "}", "if    (  ( length    !  =     2  )     &  &     ( length    !  =     3  )  )     {", "return   originalZoneId ;", "}", "char   signChar    =    zoneId . charAt (  0  )  ;", "if    (  ( signChar    !  =     '  +  '  )     &  &     ( signChar    !  =     '  -  '  )  )     {", "return   originalZoneId ;", "}", "if    ( startsWithEtcGmt )     {", "signChar    =     ( signChar    =  =     '  -  '  )     ?     '  +  '     :     '  -  '  ;", "}", "char   hourTens ;", "char   hourOnes ;", "if    ( length    =  =     2  )     {", "hourTens    =     '  0  '  ;", "hourOnes    =    zoneId . charAt (  1  )  ;", "} else    {", "hourTens    =    zoneId . charAt (  1  )  ;", "hourOnes    =    zoneId . charAt (  2  )  ;", "}", "if    (  (  !  ( Character . isDigit ( hourTens )  )  )     |  |     (  !  ( Character . isDigit ( hourOnes )  )  )  )     {", "return   originalZoneId ;", "}", "if    (  ( hourTens    =  =     '  0  '  )     &  &     ( hourOnes    =  =     '  0  '  )  )     {", "return    \" utc \"  ;", "}", "return    (  (  (  \"  \"     +    signChar )     +    hourTens )     +    hourOnes )     +     \"  :  0  0  \"  ;", "}", "METHOD_END"], "methodName": ["normalizeZoneId"], "fileName": "com.facebook.presto.spi.type.TimeZoneKey"}, {"methodBody": ["METHOD_START", "{", "return   String . format (  \"  % s %  0  2 d :  %  0  2 d \"  ,     ( offset    <     0     ?     \"  -  \"     :     \"  +  \"  )  ,    Math . abs (  ( offset    /     6  0  )  )  ,    Math . abs (  ( offset    %     6  0  )  )  )  ;", "}", "METHOD_END"], "methodName": ["zoneIdForOffset"], "fileName": "com.facebook.presto.spi.type.TimeZoneKey"}, {"methodBody": ["METHOD_START", "{", "return   zoneId ;", "}", "METHOD_END"], "methodName": ["getZoneId"], "fileName": "com.facebook.presto.spi.type.TimeZoneNotSupportedException"}, {"methodBody": ["METHOD_START", "{", "return    ( Long . rotateLeft (  ( value    *     -  4  4  1  7  2  7  6  7  0  6  8  1  2  5  3  1  8  8  9 L )  ,     3  1  )  )     *     -  7  0  4  6  0  2  9  2  8  8  6  3  4  8  5  6  8  2  5 L ;", "}", "METHOD_END"], "methodName": ["hash"], "fileName": "com.facebook.presto.spi.type.TinyintType"}, {"methodBody": ["METHOD_START", "{", "Optional < Type >    commonSuperType    =    getCommonSuperType ( actualType ,    expectedType )  ;", "return    ( commonSuperType . isPresent (  )  )     &  &     ( commonSuperType . get (  )  . equals ( expectedType )  )  ;", "}", "METHOD_END"], "methodName": ["canCoerce"], "fileName": "com.facebook.presto.spi.type.TypeManager"}, {"methodBody": ["METHOD_START", "{", "return   kind ;", "}", "METHOD_END"], "methodName": ["getKind"], "fileName": "com.facebook.presto.spi.type.TypeParameter"}, {"methodBody": ["METHOD_START", "{", "return   getValue ( ParameterKind . LONG ,    Long . class )  ;", "}", "METHOD_END"], "methodName": ["getLongLiteral"], "fileName": "com.facebook.presto.spi.type.TypeParameter"}, {"methodBody": ["METHOD_START", "{", "return   getValue ( ParameterKind . NAMED _ TYPE ,    NamedType . class )  ;", "}", "METHOD_END"], "methodName": ["getNamedType"], "fileName": "com.facebook.presto.spi.type.TypeParameter"}, {"methodBody": ["METHOD_START", "{", "return   getValue ( ParameterKind . TYPE ,    Type . class )  ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.facebook.presto.spi.type.TypeParameter"}, {"methodBody": ["METHOD_START", "{", "if    (  ( kind )     !  =    expectedParameterKind )     {", "throw   new   AssertionError ( String . format (  \" ParameterKind   is    [  % s ]    but   expected    [  % s ]  \"  ,    kind ,    expectedParameterKind )  )  ;", "}", "return   target . cast ( value )  ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "com.facebook.presto.spi.type.TypeParameter"}, {"methodBody": ["METHOD_START", "{", "return   getValue ( ParameterKind . VARIABLE ,    String . class )  ;", "}", "METHOD_END"], "methodName": ["getVariable"], "fileName": "com.facebook.presto.spi.type.TypeParameter"}, {"methodBody": ["METHOD_START", "{", "return    ( kind )     =  =     ( ParameterKind . LONG )  ;", "}", "METHOD_END"], "methodName": ["isLongLiteral"], "fileName": "com.facebook.presto.spi.type.TypeParameter"}, {"methodBody": ["METHOD_START", "{", "return   new   TypeParameter ( ParameterKind . NAMED _ TYPE ,    namedType )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "com.facebook.presto.spi.type.TypeParameter"}, {"methodBody": ["METHOD_START", "{", "return   new   TypeParameter ( ParameterKind . TYPE ,    type )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "com.facebook.presto.spi.type.TypeParameter"}, {"methodBody": ["METHOD_START", "{", "switch    ( parameter . getKind (  )  )     {", "case   TYPE    :", "{", "Type   type    =    typeManager . getType ( parameter . getTypeSignature (  )  )  ;", "if    ( type    =  =    null )     {", "return   null ;", "}", "return    . of ( type )  ;", "}", "case   LONG    :", "return    . of ( parameter . getLongLiteral (  )  )  ;", "case   NAMED _ TYPE    :", "{", "Type   type    =    typeManager . getType ( parameter . getNamedTypeSignature (  )  . getTypeSignature (  )  )  ;", "if    ( type    =  =    null )     {", "return   null ;", "}", "return    . of ( new   NamedType ( parameter . getNamedTypeSignature (  )  . getName (  )  ,    type )  )  ;", "}", "case   VARIABLE    :", "return    . of ( parameter . getVariable (  )  )  ;", "default    :", "throw   new   UnsupportedOperationException ( String . format (  \" Unsupported   parameter    [  % s ]  \"  ,    parameter )  )  ;", "}", "}", "METHOD_END"], "methodName": ["of"], "fileName": "com.facebook.presto.spi.type.TypeParameter"}, {"methodBody": ["METHOD_START", "{", "return   new   TypeParameter ( ParameterKind . VARIABLE ,    variable )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "com.facebook.presto.spi.type.TypeParameter"}, {"methodBody": ["METHOD_START", "{", "return   new   TypeParameter ( ParameterKind . LONG ,    longLiteral )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "com.facebook.presto.spi.type.TypeParameter"}, {"methodBody": ["METHOD_START", "{", "int   length    =    input . readInt (  )  ;", "byte [  ]    bytes    =    new   byte [ length ]  ;", "input . readBytes ( bytes )  ;", "return   new   String ( bytes ,    StandardCharsets . UTF _  8  )  ;", "}", "METHOD_END"], "methodName": ["readLengthPrefixedString"], "fileName": "com.facebook.presto.spi.type.TypeSerde"}, {"methodBody": ["METHOD_START", "{", "if    ( sliceInput    =  =    null )     {", "throw   new   NullPointerException (  \" sliceInput   is   null \"  )  ;", "}", "String   name    =     . readLengthPrefixedString ( sliceInput )  ;", "Type   type    =    typeManager . getType ( TypeSignature . parseTypeSignature ( name )  )  ;", "if    ( type    =  =    null )     {", "throw   new   IllegalArgumentException (  (  \" Unknown   type    \"     +    name )  )  ;", "}", "return   type ;", "}", "METHOD_END"], "methodName": ["readType"], "fileName": "com.facebook.presto.spi.type.TypeSerde"}, {"methodBody": ["METHOD_START", "{", "byte [  ]    bytes    =    string . getBytes ( StandardCharsets . UTF _  8  )  ;", "output . writeInt ( bytes . length )  ;", "output . writeBytes ( bytes )  ;", "}", "METHOD_END"], "methodName": ["writeLengthPrefixedString"], "fileName": "com.facebook.presto.spi.type.TypeSerde"}, {"methodBody": ["METHOD_START", "{", "if    ( sliceOutput    =  =    null )     {", "throw   new   NullPointerException (  \" sliceOutput   is   null \"  )  ;", "}", "if    ( type    =  =    null )     {", "throw   new   NullPointerException (  \" type   is   null \"  )  ;", "}", ". writeLengthPrefixedString ( sliceOutput ,    type . getTypeSignature (  )  . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["writeType"], "fileName": "com.facebook.presto.spi.type.TypeSerde"}, {"methodBody": ["METHOD_START", "{", "String   canonicalBaseName    =    TypeSignature . BASE _ NAME _ ALIAS _ TO _ CANONICAL . get ( baseName )  ;", "if    ( canonicalBaseName    =  =    null )     {", "return   baseName ;", "}", "return   canonicalBaseName ;", "}", "METHOD_END"], "methodName": ["canonicalizeBaseName"], "fileName": "com.facebook.presto.spi.type.TypeSignature"}, {"methodBody": ["METHOD_START", "{", "(  ! argument )     {", "throw   new   IllegalArgumentException ( Stringormatormat ,    args )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkArgument"], "fileName": "com.facebook.presto.spi.type.TypeSignature"}, {"methodBody": ["METHOD_START", "{", "return   base ;", "}", "METHOD_END"], "methodName": ["getBase"], "fileName": "com.facebook.presto.spi.type.TypeSignature"}, {"methodBody": ["METHOD_START", "{", "return   parameters ;", "}", "METHOD_END"], "methodName": ["getParameters"], "fileName": "com.facebook.presto.spi.type.TypeSignature"}, {"methodBody": ["METHOD_START", "{", "List < TypeSignature >    result    =    new   ArrayList <  >  (  )  ;", "for    ( TypeSignatureParameter   parameter    :    parameters )     {", "if    (  ( parameter . getKind (  )  )     !  =     ( ParameterKind . TYPE )  )     {", "throw   new   IllegalStateException ( String . format (  \" Expected   all   parameters   to   be   TypeSignatures   but    [  % s ]    was   found \"  ,    parameter . toString (  )  )  )  ;", "}", "result . add ( parameter . getTypeSignature (  )  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["getTypeParametersAsTypeSignatures"], "fileName": "com.facebook.presto.spi.type.TypeSignature"}, {"methodBody": ["METHOD_START", "{", "return   calculated ;", "}", "METHOD_END"], "methodName": ["isCalculated"], "fileName": "com.facebook.presto.spi.type.TypeSignature"}, {"methodBody": ["METHOD_START", "{", "String   baseName    =    null ;", "int   parameterStart    =     -  1  ;", "int   bracketCount    =     0  ;", "boolean   inFieldName    =    false ;", "List < Parameter >    fields    =    new   ArrayList <  >  (  )  ;", "String   fieldName    =    null ;", "for    ( int   i    =     0  ;    i    <     ( signature . length (  )  )  ;    i +  +  )     {", "char   c    =    signature . charAt ( i )  ;", "if    ( c    =  =     '  (  '  )     {", "if    ( bracketCount    =  =     0  )     {", ". verify (  ( baseName    =  =    null )  ,     \" Expected   baseName   to   be   null \"  )  ;", ". verify (  ( parameterStart    =  =     (  -  1  )  )  ,     \" Expected   parameter   start   to   be    -  1  \"  )  ;", "baseName    =     . canonicalizeBaseName ( signature . substring (  0  ,    i )  )  ;", "parameterStart    =    i    +     1  ;", "inFieldName    =    true ;", "}", "bracketCount +  +  ;", "} else", "if    ( c    =  =     '     '  )     {", "if    (  ( bracketCount    =  =     1  )     &  &    inFieldName )     {", ". checkArgument (  (  ( parameterStart    >  =     0  )     &  &     ( parameterStart    <    i )  )  ,     \" Bad   type   signature :     '  % s '  \"  ,    signature )  ;", "fieldName    =    signature . substring ( parameterStart ,    i )  ;", "parameterStart    =    i    +     1  ;", "inFieldName    =    false ;", "}", "} else", "if    ( c    =  =     '  ,  '  )     {", "if    ( bracketCount    =  =     1  )     {", ". checkArgument (  ( parameterStart    >  =     0  )  ,     \" Bad   type   signature :     '  % s '  \"  ,    signature )  ;", "type    =     . parse ( signature . substring ( parameterStart ,    i )  ,    literalParameters )  ;", "Parameter   parameter    =    Parameter . of ( new   Named ( ofNullable ( fieldName )  ,    type )  )  ;", "fields . add ( parameter )  ;", "parameterStart    =    i    +     1  ;", "inFieldName    =    true ;", "fieldName    =    null ;", "}", "} else", "if    ( c    =  =     '  )  '  )     {", "bracketCount -  -  ;", "if    ( bracketCount    =  =     0  )     {", ". checkArgument (  ( i    =  =     (  ( signature . length (  )  )     -     1  )  )  ,     \" Bad   type   signature :     '  % s '  \"  ,    signature )  ;", ". checkArgument (  ( parameterStart    >  =     0  )  ,     \" Bad   type   signature :     '  % s '  \"  ,    signature )  ;", "type    =     . parse ( signature . substring ( parameterStart ,    i )  ,    literalParameters )  ;", "Parameter   parameter    =    Parameter . of ( new   Named ( ofNullable ( fieldName )  ,    type )  )  ;", "fields . add ( parameter )  ;", "return   new    ( baseName ,    fields )  ;", "}", "}", "}", "throw   new   IllegalArgumentException ( String . format (  \" Bad   type   signature :     '  % s '  \"  ,    signature )  )  ;", "}", "METHOD_END"], "methodName": ["parseRowTypeSignature"], "fileName": "com.facebook.presto.spi.type.TypeSignature"}, {"methodBody": ["METHOD_START", "{", "return   TypeSignature . parseTypeSignature ( signature ,    new   HashSet <  >  (  )  )  ;", "}", "METHOD_END"], "methodName": ["parseTypeSignature"], "fileName": "com.facebook.presto.spi.type.TypeSignature"}, {"methodBody": ["METHOD_START", "{", "if    (  (  !  ( signature . contains (  \"  <  \"  )  )  )     &  &     (  !  ( signature . contains (  \"  (  \"  )  )  )  )     {", "if    ( signature . equalsIgnoreCase ( StandardTypes . VARCHAR )  )     {", "return   VarcharType . createUnboundedVarcharType (  )  . get (  )  ;", "}", ". checkArgument (  (  !  ( literalCalculationParameters . contains ( signature )  )  )  ,     \" Bad   type   signature :     '  % s '  \"  ,    signature )  ;", "return   new    (  . canonicalizeBaseName ( signature )  ,    new   ArrayList <  >  (  )  )  ;", "}", "if    ( signature . toLowerCase ( Locale . ENGLISH )  . startsWith (  (  ( StandardTypes . ROW )     +     \"  (  \"  )  )  )     {", "return    . parseRow ( signature ,    literalCalculationParameters )  ;", "}", "String   baseName    =    null ;", "List < Parameter >    parameters    =    new   ArrayList <  >  (  )  ;", "int   parameterStart    =     -  1  ;", "int   bracketCount    =     0  ;", "for    ( int   i    =     0  ;    i    <     ( signature . length (  )  )  ;    i +  +  )     {", "char   c    =    signature . charAt ( i )  ;", "if    (  ( c    =  =     '  (  '  )     |  |     ( c    =  =     '  <  '  )  )     {", "if    ( bracketCount    =  =     0  )     {", ". verify (  ( baseName    =  =    null )  ,     \" Expected   baseName   to   be   null \"  )  ;", ". verify (  ( parameterStart    =  =     (  -  1  )  )  ,     \" Expected   parameter   start   to   be    -  1  \"  )  ;", "baseName    =     . canonicalizeBaseName ( signature . substring (  0  ,    i )  )  ;", ". checkArgument (  (  !  ( literalCalculationParameters . contains ( baseName )  )  )  ,     \" Bad   type   signature :     '  % s '  \"  ,    signature )  ;", "parameterStart    =    i    +     1  ;", "}", "bracketCount +  +  ;", "} else", "if    (  ( c    =  =     '  )  '  )     |  |     ( c    =  =     '  >  '  )  )     {", "bracketCount -  -  ;", ". checkArgument (  ( bracketCount    >  =     0  )  ,     \" Bad   type   signature :     '  % s '  \"  ,    signature )  ;", "if    ( bracketCount    =  =     0  )     {", ". checkArgument (  ( parameterStart    >  =     0  )  ,     \" Bad   type   signature :     '  % s '  \"  ,    signature )  ;", "parameters . add (  . parseParameter ( signature ,    parameterStart ,    i ,    literalCalculationParameters )  )  ;", "parameterStart    =    i    +     1  ;", "if    ( i    =  =     (  ( signature . length (  )  )     -     1  )  )     {", "return   new    ( baseName ,    parameters )  ;", "}", "}", "} else", "if    ( c    =  =     '  ,  '  )     {", "if    ( bracketCount    =  =     1  )     {", ". checkArgument (  ( parameterStart    >  =     0  )  ,     \" Bad   type   signature :     '  % s '  \"  ,    signature )  ;", "parameters . add (  . parseParameter ( signature ,    parameterStart ,    i ,    literalCalculationParameters )  )  ;", "parameterStart    =    i    +     1  ;", "}", "}", "}", "throw   new   IllegalArgumentException ( String . format (  \" Bad   type   signature :     '  % s '  \"  ,    signature )  )  ;", "}", "METHOD_END"], "methodName": ["parseTypeSignature"], "fileName": "com.facebook.presto.spi.type.TypeSignature"}, {"methodBody": ["METHOD_START", "{", "String   parameterName    =    signature . substring ( begin ,    end )  . trim (  )  ;", "if    ( Character . isDigit ( signature . charAt ( begin )  )  )     {", "return   Parameter . of ( Long . parseLong ( parameterName )  )  ;", "} else", "if    ( literalCalculationParameters . contains ( parameterName )  )     {", "return   Parameter . of ( parameterName )  ;", "} else    {", "return   Parameter . of (  . parse ( parameterName ,    literalCalculationParameters )  )  ;", "}", "}", "METHOD_END"], "methodName": ["parseTypeSignatureParameter"], "fileName": "com.facebook.presto.spi.type.TypeSignature"}, {"methodBody": ["METHOD_START", "{", "TypeSignature . verify ( parameters . stream (  )  . allMatch (  (    parameter )     -  >     ( parameter . getKind (  )  )     =  =     ( ParameterKind . NAMED _ TYPE )  )  ,    String . format (  \" Incorrect   parameters   for   row   type    % s \"  ,    parameters )  )  ;", "String   fields    =    parameters . stream (  )  . map ( TypeSignatureParameter :  : getNamedTypeSignature )  . map (  (    parameter )     -  >     {", "if    ( parameter . getName (  )  . isPresent (  )  )     {", "return   String . format (  \"  % s    % s \"  ,    parameter . getName (  )  . get (  )  ,    parameter . getTypeSignature (  )  . toString (  )  )  ;", "}", "return   parameter . getTypeSignature (  )  . toString (  )  ;", "}  )  . collect ( Collectors . joining (  \"  ,  \"  )  )  ;", "return   String . format (  \" row (  % s )  \"  ,    fields )  ;", "}", "METHOD_END"], "methodName": ["rowToString"], "fileName": "com.facebook.presto.spi.type.TypeSignature"}, {"methodBody": ["METHOD_START", "{", "return   name . chars (  )  . noneMatch (  (    c )     -  >     (  ( c    =  =     '  <  '  )     |  |     ( c    =  =     '  >  '  )  )     |  |     ( c    =  =     '  ,  '  )  )  ;", "}", "METHOD_END"], "methodName": ["validateName"], "fileName": "com.facebook.presto.spi.type.TypeSignature"}, {"methodBody": ["METHOD_START", "{", "if    (  ! argument )     {", "throw   new   AssertionError ( msage )  ;", "}", "}", "METHOD_END"], "methodName": ["verify"], "fileName": "com.facebook.presto.spi.type.TypeSignature"}, {"methodBody": ["METHOD_START", "{", "return   kind ;", "}", "METHOD_END"], "methodName": ["getKind"], "fileName": "com.facebook.presto.spi.type.TypeSignatureParameter"}, {"methodBody": ["METHOD_START", "{", "return   getValue ( ParameterKind . LONG ,    Long . class )  ;", "}", "METHOD_END"], "methodName": ["getLongLiteral"], "fileName": "com.facebook.presto.spi.type.TypeSignatureParameter"}, {"methodBody": ["METHOD_START", "{", "return   getValue ( ParameterKind . NAMED _ TYPE ,    NamedTypeSignature . class )  ;", "}", "METHOD_END"], "methodName": ["getNamedTypeSignature"], "fileName": "com.facebook.presto.spi.type.TypeSignatureParameter"}, {"methodBody": ["METHOD_START", "{", "return   getValue ( ParameterKind . TYPE ,    TypeSignature . class )  ;", "}", "METHOD_END"], "methodName": ["getTypeSignature"], "fileName": "com.facebook.presto.spi.type.TypeSignatureParameter"}, {"methodBody": ["METHOD_START", "{", "switch    ( kind )     {", "case   TYPE    :", "return   Optional . of ( get (  )  )  ;", "case   NAMED _ TYPE    :", "return   Optional . of ( getNamed (  )  . get (  )  )  ;", "default    :", "return   Optional . empty (  )  ;", "}", "}", "METHOD_END"], "methodName": ["getTypeSignatureOrNamedTypeSignature"], "fileName": "com.facebook.presto.spi.type.TypeSignatureParameter"}, {"methodBody": ["METHOD_START", "{", "if    (  ( kind )     !  =    expectedParameterKind )     {", "throw   new   IllegalArgumentException ( String . format (  \" ParameterKind   is    [  % s ]    but   expected    [  % s ]  \"  ,    kind ,    expectedParameterKind )  )  ;", "}", "return   target . cast ( value )  ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "com.facebook.presto.spi.type.TypeSignatureParameter"}, {"methodBody": ["METHOD_START", "{", "return   getValue ( ParameterKind . VARIABLE ,    String . class )  ;", "}", "METHOD_END"], "methodName": ["getVariable"], "fileName": "com.facebook.presto.spi.type.TypeSignatureParameter"}, {"methodBody": ["METHOD_START", "{", "switch    ( kind )     {", "case   TYPE    :", "return   get (  )  . isCalculated (  )  ;", "case   NAMED _ TYPE    :", "return   getNamed (  )  . get (  )  . isCalculated (  )  ;", "case   LONG    :", "return   false ;", "case   VARIABLE    :", "return   true ;", "default    :", "throw   new   IllegalArgumentException (  (  \" Unexpected   parameter   kind :     \"     +     ( kind )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["isCalculated"], "fileName": "com.facebook.presto.spi.type.TypeSignatureParameter"}, {"methodBody": ["METHOD_START", "{", "return    ( kind )     =  =     ( ParameterKind . LONG )  ;", "}", "METHOD_END"], "methodName": ["isLongLiteral"], "fileName": "com.facebook.presto.spi.type.TypeSignatureParameter"}, {"methodBody": ["METHOD_START", "{", "return    ( kind )     =  =     ( ParameterKind . NAMED _ TYPE )  ;", "}", "METHOD_END"], "methodName": ["isNamedTypeSignature"], "fileName": "com.facebook.presto.spi.type.TypeSignatureParameter"}, {"methodBody": ["METHOD_START", "{", "return    ( kind )     =  =     ( ParameterKind . TYPE )  ;", "}", "METHOD_END"], "methodName": ["isTypeSignature"], "fileName": "com.facebook.presto.spi.type.TypeSignatureParameter"}, {"methodBody": ["METHOD_START", "{", "return    ( kind )     =  =     ( ParameterKind . VARIABLE )  ;", "}", "METHOD_END"], "methodName": ["isVariable"], "fileName": "com.facebook.presto.spi.type.TypeSignatureParameter"}, {"methodBody": ["METHOD_START", "{", "return   new   TypeSignatureParameter ( ParameterKind . NAMED _ TYPE ,    namedTypeSignature )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "com.facebook.presto.spi.type.TypeSignatureParameter"}, {"methodBody": ["METHOD_START", "{", "return   new   TypeSignatureParameter ( ParameterKind . TYPE ,    typeSignature )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "com.facebook.presto.spi.type.TypeSignatureParameter"}, {"methodBody": ["METHOD_START", "{", "return   new   TypeSignatureParameter ( ParameterKind . VARIABLE ,    variable )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "com.facebook.presto.spi.type.TypeSignatureParameter"}, {"methodBody": ["METHOD_START", "{", "return   new   TypeSignatureParameter ( ParameterKind . LONG ,    longLiteral )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "com.facebook.presto.spi.type.TypeSignatureParameter"}, {"methodBody": ["METHOD_START", "{", "if    ( isNull )     {", "throw   new   PException ( StandardErrorCode . NOT _ SUPPORTED ,    errorMsg )  ;", "}", "}", "METHOD_END"], "methodName": ["checkElementNotNull"], "fileName": "com.facebook.presto.spi.type.TypeUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( block . isNull ( position )  )     {", "return    . NULL _ HASH _ CODE ;", "}", "return   type . hash ( block ,    position )  ;", "}", "METHOD_END"], "methodName": ["hashPosition"], "fileName": "com.facebook.presto.spi.type.TypeUtils"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    javaType    =    type . getJavaType (  )  ;", "if    ( block . isNull ( position )  )     {", "return   null ;", "}", "if    ( javaType    =  =     ( long . class )  )     {", "return   type . getLong ( block ,    position )  ;", "}", "if    ( javaType    =  =     ( double . class )  )     {", "return   type . getDouble ( block ,    position )  ;", "}", "if    ( javaType    =  =     ( boolean . class )  )     {", "return   type . getBoolean ( block ,    position )  ;", "}", "if    ( javaType    =  =     ( Slice . class )  )     {", "return   type . getSlice ( block ,    position )  ;", "}", "return   type . getObject ( block ,    position )  ;", "}", "METHOD_END"], "methodName": ["readNativeValue"], "fileName": "com.facebook.presto.spi.type.TypeUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( value    =  =    null )     {", "blockBuilder . appendNull (  )  ;", "} else", "if    (  ( getJavaType (  )  )     =  =     ( boolean . class )  )     {", "writeBoolean ( blockBuilder ,     (  ( Boolean )     ( value )  )  )  ;", "} else", "if    (  ( getJavaType (  )  )     =  =     ( double . class )  )     {", "writeDouble ( blockBuilder ,     (  ( Number )     ( value )  )  . doubleValue (  )  )  ;", "} else", "if    (  ( getJavaType (  )  )     =  =     ( long . class )  )     {", "writeLong ( blockBuilder ,     (  ( Number )     ( value )  )  . longValue (  )  )  ;", "} else", "if    (  ( getJavaType (  )  )     =  =     ( io . airlift . slice . Slice . class )  )     {", "io . airlift . slice . Slice   slice ;", "if    ( value   instanceof   byte [  ]  )     {", "slice    =    io . airlift . slice . Slices . wrappedBuffer (  (  ( byte [  ]  )     ( value )  )  )  ;", "} else", "if    ( value   instanceof   String )     {", "slice    =    io . airlift . slice . Slices . utf 8 Slice (  (  ( String )     ( value )  )  )  ;", "} else    {", "slice    =     (  ( io . airlift . slice . Slice )     ( value )  )  ;", "}", "writeSlice ( blockBuilder ,    slice ,     0  ,    slice . length (  )  )  ;", "} else    {", "writeObject ( blockBuilder ,    value )  ;", "}", "}", "METHOD_END"], "methodName": ["writeNativeValue"], "fileName": "com.facebook.presto.spi.type.TypeUtils"}, {"methodBody": ["METHOD_START", "{", "Slice   result    =    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  )  ;", "UnscaledDecimal 1  2  8 Arithmetic . add ( left ,    right ,    result )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "long   overflow    =    UnscaledDecimal 1  2  8 Arithmetic . addWithOverflow ( left ,    right ,    result )  ;", "if    ( overflow    !  =     0  )     {", "UnscaledDecimal 1  2  8 Arithmetic . throwOverflowException (  )  ;", "}", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "int   leftIndex    =    leftOffset    -    length ;", "int   carry    =     0  ;", "for    ( int   rightIndex    =     0  ;    rightIndex    <    length ;    rightIndex +  +     ,    leftIndex +  +  )     {", "long   accumulator    =     (  (  ( left [ leftIndex ]  )     &     (  . LONG _ MASK )  )     +     (  ( right [ rightIndex ]  )     &     (  . LONG _ MASK )  )  )     +     ( carry    &     (  . LONG _ MASK )  )  ;", "left [ leftIndex ]     =     . lowInt ( accumulator )  ;", "carry    =     . highInt ( accumulator )  ;", "}", "left [ leftIndex ]     +  =    carry ;", "}", "METHOD_END"], "methodName": ["addUnsignedMultiPrecision"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "int   l 0     =    UnscaledDecimal 1  2  8 Arithmetic . getInt ( left ,     0  )  ;", "int   l 1     =    UnscaledDecimal 1  2  8 Arithmetic . getInt ( left ,     1  )  ;", "int   l 2     =    UnscaledDecimal 1  2  8 Arithmetic . getInt ( left ,     2  )  ;", "int   l 3     =    UnscaledDecimal 1  2  8 Arithmetic . getInt ( left ,     3  )  ;", "int   r 0     =    UnscaledDecimal 1  2  8 Arithmetic . getInt ( right ,     0  )  ;", "int   r 1     =    UnscaledDecimal 1  2  8 Arithmetic . getInt ( right ,     1  )  ;", "int   r 2     =    UnscaledDecimal 1  2  8 Arithmetic . getInt ( right ,     2  )  ;", "int   r 3     =    UnscaledDecimal 1  2  8 Arithmetic . getInt ( right ,     3  )  ;", "long   intermediateResult ;", "intermediateResult    =     ( l 0     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  )     +     ( r 0     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  )  ;", "int   z 0     =     (  ( int )     ( intermediateResult )  )  ;", "intermediateResult    =     (  ( l 1     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  )     +     ( r 1     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  )  )     +     ( intermediateResult    >  >  >     3  2  )  ;", "int   z 1     =     (  ( int )     ( intermediateResult )  )  ;", "intermediateResult    =     (  ( l 2     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  )     +     ( r 2     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  )  )     +     ( intermediateResult    >  >  >     3  2  )  ;", "int   z 2     =     (  ( int )     ( intermediateResult )  )  ;", "intermediateResult    =     (  ( l 3     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  )     +     ( r 3     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  )  )     +     ( intermediateResult    >  >  >     3  2  )  ;", "int   z 3     =     (  ( int )     ( intermediateResult )  )     &     (  ~  ( UnscaledDecimal 1  2  8 Arithmetic . SIGN _ INT _ MASK )  )  ;", "UnscaledDecimal 1  2  8 Arithmetic . pack ( result ,    z 0  ,    z 1  ,    z 2  ,    z 3  ,    resultNegative )  ;", "return   intermediateResult    >  >     3  1  ;", "}", "METHOD_END"], "methodName": ["addUnsignedReturnOverflow"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "boolean   leftNegative    =    UnscaledDecimal 1  2  8 Arithmetic . isNegative ( left )  ;", "boolean   rightNegative    =    UnscaledDecimal 1  2  8 Arithmetic . isNegative ( right )  ;", "long   overflow    =     0  ;", "if    ( leftNegative    =  =    rightNegative )     {", "overflow    =    UnscaledDecimal 1  2  8 Arithmetic . addUnsignedReturnOverflow ( left ,    right ,    result ,    leftNegative )  ;", "if    ( leftNegative )     {", "overflow    =     - overflow ;", "}", "} else    {", "int   compare    =    UnscaledDecimal 1  2  8 Arithmetic . compareAbsolute ( left ,    right )  ;", "if    ( compare    >     0  )     {", "UnscaledDecimal 1  2  8 Arithmetic . subtractUnsigned ( left ,    right ,    result ,    leftNegative )  ;", "} else", "if    ( compare    <     0  )     {", "UnscaledDecimal 1  2  8 Arithmetic . subtractUnsigned ( right ,    left ,    result ,     (  ! leftNegative )  )  ;", "} else    {", "UnscaledDecimal 1  2  8 Arithmetic . setToZero ( result )  ;", "}", "}", "return   overflow ;", "}", "METHOD_END"], "methodName": ["addWithOverflow"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "if    (  ! condition )     {", "throw   new   IllegalArgumentException (  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkArgument"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "if    (  ! condition )     {", "throw   new   IllegalStateException (  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkState"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "return    (  ( high    &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  )     <  <     3  2 L )     |     ( low    &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  )  ;", "}", "METHOD_END"], "methodName": ["combineInts"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "boolean   leftStrictlyNegative    =    UnscaledDecimal 1  2  8 Arithmetic . isStrictlyNegative ( left )  ;", "boolean   rightStrictlyNegative    =    UnscaledDecimal 1  2  8 Arithmetic . isStrictlyNegative ( right )  ;", "if    ( leftStrictlyNegative    !  =    rightStrictlyNegative )     {", "return   leftStrictlyNegative    ?     -  1     :     1  ;", "} else    {", "return    ( UnscaledDecimal 1  2  8 Arithmetic . compareAbsolute ( left ,    right )  )     *     ( leftStrictlyNegative    ?     -  1     :     1  )  ;", "}", "}", "METHOD_END"], "methodName": ["compare"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "boolean   leftStrictlyNegative    =    UnscaledDecimal 1  2  8 Arithmetic . isStrictlyNegative ( leftRawLow ,    leftRawHigh )  ;", "boolean   rightStrictlyNegative    =    UnscaledDecimal 1  2  8 Arithmetic . isStrictlyNegative ( rightRawLow ,    rightRawHigh )  ;", "if    ( leftStrictlyNegative    !  =    rightStrictlyNegative )     {", "return   leftStrictlyNegative    ?     -  1     :     1  ;", "} else    {", "long   leftHigh    =    UnscaledDecimal 1  2  8 Arithmetic . unpackUnsignedLong ( leftRawHigh )  ;", "long   rightHigh    =    UnscaledDecimal 1  2  8 Arithmetic . unpackUnsignedLong ( rightRawHigh )  ;", "return    ( UnscaledDecimal 1  2  8 Arithmetic . compareUnsigned ( leftRawLow ,    leftHigh ,    rightRawLow ,    rightHigh )  )     *     ( leftStrictlyNegative    ?     -  1     :     1  )  ;", "}", "}", "METHOD_END"], "methodName": ["compare"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "long   leftHigh    =    UnscaledDecimal 1  2  8 Arithmetic . getLong ( left ,     1  )  ;", "long   rightHigh    =    UnscaledDecimal 1  2  8 Arithmetic . getLong ( right ,     1  )  ;", "if    ( leftHigh    !  =    rightHigh )     {", "return   Long . compareUnsigned ( leftHigh ,    rightHigh )  ;", "}", "long   leftLow    =    UnscaledDecimal 1  2  8 Arithmetic . getLong ( left ,     0  )  ;", "long   rightLow    =    UnscaledDecimal 1  2  8 Arithmetic . getLong ( right ,     0  )  ;", "if    ( leftLow    !  =    rightLow )     {", "return   Long . compareUnsigned ( leftLow ,    rightLow )  ;", "}", "return    0  ;", "}", "METHOD_END"], "methodName": ["compareAbsolute"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "if    ( leftRawHigh    !  =    rightRawHigh )     {", "return   Long . pareUnsigned ( leftRawHigh ,    rightRawHigh )  ;", "}", "if    ( leftRawLow    !  =    rightRawLow )     {", "return   Long . pareUnsigned ( leftRawLow ,    rightRawLow )  ;", "}", "return    0  ;", "}", "METHOD_END"], "methodName": ["compareUnsigned"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "UnscaledDecimal 1  2  8 Arithmetic . setRawLong ( to ,     0  ,    UnscaledDecimal 1  2  8 Arithmetic . getRawLong ( from ,     0  )  )  ;", "UnscaledDecimal 1  2  8 Arithmetic . setRawLong ( to ,     1  ,    UnscaledDecimal 1  2  8 Arithmetic . getRawLong ( from ,     1  )  )  ;", "}", "METHOD_END"], "methodName": ["copyUnscaledDecimal"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "int   length    =    digits . length ;", "while    (  ( length    >     0  )     &  &     (  ( digits [  ( length    -     1  )  ]  )     =  =     0  )  )     {", "length -  -  ;", "}", "return   length ;", "}", "METHOD_END"], "methodName": ["digitsInIntegerBase"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "if    ( divisor    =  =     0  )     {", ". throwDivisionByZeroException (  )  ;", "}", ". checkArgument (  ( divisor    >     0  )  )  ;", "long   remainder    =     . getLong ( decimal ,     1  )  ;", "long   high    =    remainder    /    divisor ;", "remainder    %  =    divisor ;", "remainder    =     (  (  . getInt ( decimal ,     1  )  )     &     (  . LONG _ MASK )  )     +     ( remainder    <  <     3  2  )  ;", "int   z 1     =     (  ( int )     ( remainder    /    divisor )  )  ;", "remainder    %  =    divisor ;", "remainder    =     (  (  . getInt ( decimal ,     0  )  )     &     (  . LONG _ MASK )  )     +     ( remainder    <  <     3  2  )  ;", "int   z 0     =     (  ( int )     ( remainder    /    divisor )  )  ;", ". pack ( result ,    z 0  ,    z 1  ,    high ,     . isNegative ( decimal )  )  ;", "return    (  ( int )     ( remainder    %    divisor )  )  ;", "}", "METHOD_END"], "methodName": ["divide"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "UnscaledDecimal 1  2  8 Arithmetic . divide ( UnscaledDecimal 1  2  8 Arithmetic . getRawLong ( dividend ,     0  )  ,    UnscaledDecimal 1  2  8 Arithmetic . getRawLong ( dividend ,     1  )  ,    dividendScaleFactor ,    UnscaledDecimal 1  2  8 Arithmetic . getRawLong ( divisor ,     0  )  ,    UnscaledDecimal 1  2  8 Arithmetic . getRawLong ( divisor ,     1  )  ,    divisorScaleFactor ,    quotient ,    remainder )  ;", "}", "METHOD_END"], "methodName": ["divide"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "if    (  ( UnscaledDecimal 1  2  8 Arithmetic . compare ( divisorLow ,    divisorHigh ,     0  ,     0  )  )     =  =     0  )     {", "UnscaledDecimal 1  2  8 Arithmetic . throwDivisionByZeroException (  )  ;", "}", "if    ( dividendScaleFactor    >  =     ( Decimals . MAX _ PRECISION )  )     {", "UnscaledDecimal 1  2  8 Arithmetic . throwOverflowException (  )  ;", "}", "if    ( divisorScaleFactor    >  =     ( Decimals . MAX _ PRECISION )  )     {", "UnscaledDecimal 1  2  8 Arithmetic . throwOverflowException (  )  ;", "}", "boolean   dividendIsNegative    =    UnscaledDecimal 1  2  8 Arithmetic . isNegative ( dividendLow ,    dividendHigh )  ;", "boolean   divisorIsNegative    =    UnscaledDecimal 1  2  8 Arithmetic . isNegative ( divisorLow ,    divisorHigh )  ;", "boolean   quotientIsNegative    =    dividendIsNegative    !  =    divisorIsNegative ;", "int [  ]    dividend    =    new   int [  (  ( UnscaledDecimal 1  2  8 Arithmetic . NUMBER _ OF _ INTS )     *     2  )     +     1  ]  ;", "dividend [  0  ]     =    UnscaledDecimal 1  2  8 Arithmetic . lowInt ( dividendLow )  ;", "dividend [  1  ]     =    UnscaledDecimal 1  2  8 Arithmetic . highInt ( dividendLow )  ;", "dividend [  2  ]     =    UnscaledDecimal 1  2  8 Arithmetic . lowInt ( dividendHigh )  ;", "dividend [  3  ]     =     ( UnscaledDecimal 1  2  8 Arithmetic . highInt ( dividendHigh )  )     &     (  ~  ( UnscaledDecimal 1  2  8 Arithmetic . SIGN _ INT _ MASK )  )  ;", "if    ( dividendScaleFactor    >     0  )     {", "Slice   sliceDividend    =    Slices . wrappedIntArray ( dividend )  ;", "UnscaledDecimal 1  2  8 Arithmetic . multiply 2  5  6  ( UnscaledDecimal 1  2  8 Arithmetic . POWERS _ OF _ FIVE [ dividendScaleFactor ]  ,    sliceDividend ,    sliceDividend )  ;", "UnscaledDecimal 1  2  8 Arithmetic . shiftLeftMultiPrecision ( dividend ,     (  ( UnscaledDecimal 1  2  8 Arithmetic . NUMBER _ OF _ INTS )     *     2  )  ,    dividendScaleFactor )  ;", "}", "int [  ]    divisor    =    new   int [  ( UnscaledDecimal 1  2  8 Arithmetic . NUMBER _ OF _ INTS )     *     2  ]  ;", "divisor [  0  ]     =    UnscaledDecimal 1  2  8 Arithmetic . lowInt ( divisorLow )  ;", "divisor [  1  ]     =    UnscaledDecimal 1  2  8 Arithmetic . highInt ( divisorLow )  ;", "divisor [  2  ]     =    UnscaledDecimal 1  2  8 Arithmetic . lowInt ( divisorHigh )  ;", "divisor [  3  ]     =     ( UnscaledDecimal 1  2  8 Arithmetic . highInt ( divisorHigh )  )     &     (  ~  ( UnscaledDecimal 1  2  8 Arithmetic . SIGN _ INT _ MASK )  )  ;", "if    ( divisorScaleFactor    >     0  )     {", "Slice   sliceDivisor    =    Slices . wrappedIntArray ( divisor )  ;", "UnscaledDecimal 1  2  8 Arithmetic . multiply 2  5  6  ( UnscaledDecimal 1  2  8 Arithmetic . POWERS _ OF _ FIVE [ divisorScaleFactor ]  ,    sliceDivisor ,    sliceDivisor )  ;", "UnscaledDecimal 1  2  8 Arithmetic . shiftLeftMultiPrecision ( divisor ,     (  ( UnscaledDecimal 1  2  8 Arithmetic . NUMBER _ OF _ INTS )     *     2  )  ,    divisorScaleFactor )  ;", "}", "int [  ]    multiPrecisionQuotient    =    new   int [  ( UnscaledDecimal 1  2  8 Arithmetic . NUMBER _ OF _ INTS )     *     2  ]  ;", "UnscaledDecimal 1  2  8 Arithmetic . divideUnsignedMultiPrecision ( dividend ,    divisor ,    multiPrecisionQuotient )  ;", "UnscaledDecimal 1  2  8 Arithmetic . packUnsigned ( multiPrecisionQuotient ,    quotient )  ;", "UnscaledDecimal 1  2  8 Arithmetic . packUnsigned ( dividend ,    remainder )  ;", "UnscaledDecimal 1  2  8 Arithmetic . setNegative ( quotient ,    quotientIsNegative )  ;", "UnscaledDecimal 1  2  8 Arithmetic . setNegative ( remainder ,    dividendIsNegative )  ;", "UnscaledDecimal 1  2  8 Arithmetic . throwIfOverflows ( quotient )  ;", "UnscaledDecimal 1  2  8 Arithmetic . throwIfOverflows ( remainder )  ;", "}", "METHOD_END"], "methodName": ["divide"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "int   remainder    =    UnscaledDecimal 1  2  8 Arithmetic . divide ( decimal ,    divisor ,    result )  ;", "return   remainder    >  =     ( divisor    >  >     1  )  ;", "}", "METHOD_END"], "methodName": ["divideCheckRound"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "int   v 1     =    divisor [  ( divisorLength    -     1  )  ]  ;", "int   v 0     =    divisor [  ( divisorLength    -     2  )  ]  ;", "for    ( int   reminderIndex    =    dividendLength    -     1  ;    reminderIndex    >  =    divisorLength ;    reminderIndex -  -  )     {", "int   qHat    =     . estimateQuotient ( remainder [ reminderIndex ]  ,    remainder [  ( reminderIndex    -     1  )  ]  ,    remainder [  ( reminderIndex    -     2  )  ]  ,    v 1  ,    v 0  )  ;", "if    ( qHat    !  =     0  )     {", "boolean   overflow    =     . multiplyAndSubtractUnsignedMultiPrecision ( remainder ,    reminderIndex ,    divisor ,    divisorLength ,    qHat )  ;", "if    ( overflow )     {", "qHat -  -  ;", ". addUnsignedMultiPrecision ( remainder ,    reminderIndex ,    divisor ,    divisorLength )  ;", "}", "}", "quotient [  ( reminderIndex    -    divisorLength )  ]     =    qHat ;", "}", "}", "METHOD_END"], "methodName": ["divideKnuthNormalized"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "return   UnscaledDecimal 1  2  8 Arithmetic . divideRoundUp ( UnscaledDecimal 1  2  8 Arithmetic . getRawLong ( dividend ,     0  )  ,    UnscaledDecimal 1  2  8 Arithmetic . getRawLong ( dividend ,     1  )  ,    dividendScaleFactor ,    UnscaledDecimal 1  2  8 Arithmetic . getRawLong ( divisor ,     0  )  ,    UnscaledDecimal 1  2  8 Arithmetic . getRawLong ( divisor ,     1  )  )  ;", "}", "METHOD_END"], "methodName": ["divideRoundUp"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "return   UnscaledDecimal 1  2  8 Arithmetic . divideRoundUp ( UnscaledDecimal 1  2  8 Arithmetic . getRawLong ( dividend ,     0  )  ,    UnscaledDecimal 1  2  8 Arithmetic . getRawLong ( dividend ,     1  )  ,    dividendScaleFactor ,    Math . abs ( divisor )  ,     ( divisor    <     0     ?    UnscaledDecimal 1  2  8 Arithmetic . SIGN _ LONG _ MASK    :     0  )  )  ;", "}", "METHOD_END"], "methodName": ["divideRoundUp"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "return   UnscaledDecimal 1  2  8 Arithmetic . divideRoundUp ( Math . abs ( dividend )  ,     ( dividend    <     0     ?    UnscaledDecimal 1  2  8 Arithmetic . SIGN _ LONG _ MASK    :     0  )  ,    dividendScaleFactor ,    UnscaledDecimal 1  2  8 Arithmetic . getRawLong ( divisor ,     0  )  ,    UnscaledDecimal 1  2  8 Arithmetic . getRawLong ( divisor ,     1  )  )  ;", "}", "METHOD_END"], "methodName": ["divideRoundUp"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "return   UnscaledDecimal 1  2  8 Arithmetic . divideRoundUp ( Math . abs ( dividend )  ,     ( dividend    <     0     ?    UnscaledDecimal 1  2  8 Arithmetic . SIGN _ LONG _ MASK    :     0  )  ,    dividendScaleFactor ,    Math . abs ( divisor )  ,     ( divisor    <     0     ?    UnscaledDecimal 1  2  8 Arithmetic . SIGN _ LONG _ MASK    :     0  )  )  ;", "}", "METHOD_END"], "methodName": ["divideRoundUp"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "Slice   quotient    =    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  )  ;", "Slice   remainder    =    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  )  ;", "UnscaledDecimal 1  2  8 Arithmetic . divide ( dividendLow ,    dividendHigh ,    dividendScaleFactor ,    divisorLow ,    divisorHigh ,     0  ,    quotient ,    remainder )  ;", "boolean   quotientIsNegative    =    UnscaledDecimal 1  2  8 Arithmetic . isNegative ( quotient )  ;", "UnscaledDecimal 1  2  8 Arithmetic . setNegative ( quotient ,    false )  ;", "UnscaledDecimal 1  2  8 Arithmetic . setNegative ( remainder ,    false )  ;", "UnscaledDecimal 1  2  8 Arithmetic . shiftLeftDestructive ( remainder ,     1  )  ;", "long   remainderLow    =    UnscaledDecimal 1  2  8 Arithmetic . getRawLong ( remainder ,     0  )  ;", "long   remainderHigh    =    UnscaledDecimal 1  2  8 Arithmetic . getRawLong ( remainder ,     1  )  ;", "long   divisorHighUnsigned    =    UnscaledDecimal 1  2  8 Arithmetic . unpackUnsignedLong ( divisorHigh )  ;", "if    (  ( UnscaledDecimal 1  2  8 Arithmetic . compareUnsigned ( remainderLow ,    remainderHigh ,    divisorLow ,    divisorHighUnsigned )  )     >  =     0  )     {", "UnscaledDecimal 1  2  8 Arithmetic . incrementUnsafe ( quotient )  ;", "UnscaledDecimal 1  2  8 Arithmetic . throwIfOverflows ( quotient )  ;", "}", "UnscaledDecimal 1  2  8 Arithmetic . setNegative ( quotient ,    quotientIsNegative )  ;", "return   quotient ;", "}", "METHOD_END"], "methodName": ["divideRoundUp"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "if    ( divisor    =  =     1  )     {", "return   dividend ;", "}", "long   unsignedDivisor    =    divisor    &     (  . LONG _ MASK )  ;", "long   quotient    =     ( dividend    >  >  >     1  )     /     ( unsignedDivisor    >  >  >     1  )  ;", "long   remainder    =    dividend    -     ( quotient    *    unsignedDivisor )  ;", "while    ( remainder    <     0  )     {", "remainder    +  =    unsignedDivisor ;", "quotient -  -  ;", "}", "while    ( remainder    >  =    unsignedDivisor )     {", "remainder    -  =    unsignedDivisor ;", "quotient +  +  ;", "}", "return   quotient ;", "}", "METHOD_END"], "methodName": ["divideUnsignedLong"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "if    ( divisor    =  =     0  )     {", ". throwDivisionByZeroException (  )  ;", "}", "if    ( dividendLength    =  =     1  )     {", "long   dividendUnsigned    =     ( dividend [  0  ]  )     &     (  . LONG _ MASK )  ;", "long   divisorUnsigned    =    divisor    &     (  . LONG _ MASK )  ;", "long   quotient    =    dividendUnsigned    /    divisorUnsigned ;", "long   remainder    =    dividendUnsigned    -     ( divisorUnsigned    *    quotient )  ;", "dividend [  0  ]     =     (  ( int )     ( quotient )  )  ;", "return    (  ( int )     ( remainder )  )  ;", "}", "long   divisorUnsigned    =    divisor    &     (  . LONG _ MASK )  ;", "long   remainder    =     0  ;", "for    ( int   dividendIndex    =    dividendLength    -     1  ;    dividendIndex    >  =     0  ;    dividendIndex -  -  )     {", "remainder    =     ( remainder    <  <     3  2  )     +     (  ( dividend [ dividendIndex ]  )     &     (  . LONG _ MASK )  )  ;", "long   quotient    =    remainder    /    divisorUnsigned ;", "dividend [ dividendIndex ]     =     (  ( int )     ( quotient )  )  ;", "remainder    =    remainder    -     ( quotient    *    divisorUnsigned )  ;", "}", "return    (  ( int )     ( remainder )  )  ;", "}", "METHOD_END"], "methodName": ["divideUnsignedMultiPrecision"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "UnscaledDecimal 1  2  8 Arithmetic . checkArgument (  (  ( dividend . length )     =  =     (  (  ( UnscaledDecimal 1  2  8 Arithmetic . NUMBER _ OF _ INTS )     *     2  )     +     1  )  )  )  ;", "UnscaledDecimal 1  2  8 Arithmetic . checkArgument (  (  ( divisor . length )     =  =     (  ( UnscaledDecimal 1  2  8 Arithmetic . NUMBER _ OF _ INTS )     *     2  )  )  )  ;", "UnscaledDecimal 1  2  8 Arithmetic . checkArgument (  (  ( quotient . length )     =  =     (  ( UnscaledDecimal 1  2  8 Arithmetic . NUMBER _ OF _ INTS )     *     2  )  )  )  ;", "int   divisorLength    =    UnscaledDecimal 1  2  8 Arithmetic . digitsInIntegerBase ( divisor )  ;", "int   dividendLength    =    UnscaledDecimal 1  2  8 Arithmetic . digitsInIntegerBase ( dividend )  ;", "if    ( dividendLength    <    divisorLength )     {", "return ;", "}", "if    ( divisorLength    =  =     1  )     {", "int   remainder    =    UnscaledDecimal 1  2  8 Arithmetic . divideUnsignedMultiPrecision ( dividend ,    dividendLength ,    divisor [  0  ]  )  ;", "UnscaledDecimal 1  2  8 Arithmetic . checkState (  (  ( dividend [  (  ( dividend . length )     -     1  )  ]  )     =  =     0  )  )  ;", "System . arraycopy ( dividend ,     0  ,    quotient ,     0  ,    quotient . length )  ;", "Arrays . fill ( dividend ,     0  )  ;", "dividend [  0  ]     =    remainder ;", "return ;", "}", "int   nlz    =    Integer . numberOfLeadingZeros ( divisor [  ( divisorLength    -     1  )  ]  )  ;", "UnscaledDecimal 1  2  8 Arithmetic . shiftLeftMultiPrecision ( divisor ,    divisorLength ,    nlz )  ;", "int   normalizedDividendLength    =    Math . min ( dividend . length ,     ( dividendLength    +     1  )  )  ;", "UnscaledDecimal 1  2  8 Arithmetic . shiftLeftMultiPrecision ( dividend ,    normalizedDividendLength ,    nlz )  ;", "UnscaledDecimal 1  2  8 Arithmetic . divideKnuthNormalized ( dividend ,    normalizedDividendLength ,    divisor ,    divisorLength ,    quotient )  ;", "UnscaledDecimal 1  2  8 Arithmetic . shiftRightMultiPrecision ( dividend ,    normalizedDividendLength ,    nlz )  ;", "}", "METHOD_END"], "methodName": ["divideUnsignedMultiPrecision"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "long   u 2  1     =    UnscaledDecimal 1  2  8 Arithmetic . combineInts ( u 2  ,    u 1  )  ;", "long   qhat ;", "if    ( u 2     =  =    v 1  )     {", "qhat    =     ( UnscaledDecimal 1  2  8 Arithmetic . INT _ BASE )     -     1  ;", "} else", "if    ( u 2  1     >  =     0  )     {", "qhat    =    u 2  1     /     ( v 1     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  )  ;", "} else    {", "qhat    =    UnscaledDecimal 1  2  8 Arithmetic . divideUnsignedLong ( u 2  1  ,    v 1  )  ;", "}", "if    ( qhat    =  =     0  )     {", "return    0  ;", "}", "int   iterations    =     0  ;", "long   rhat    =    u 2  1     -     (  ( v 1     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  )     *    qhat )  ;", "while    (  (  ( Long . compareUnsigned ( rhat ,    UnscaledDecimal 1  2  8 Arithmetic . INT _ BASE )  )     <     0  )     &  &     (  ( Long . compareUnsigned (  (  ( v 0     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  )     *    qhat )  ,    UnscaledDecimal 1  2  8 Arithmetic . combineInts ( UnscaledDecimal 1  2  8 Arithmetic . lowInt ( rhat )  ,    u 0  )  )  )     >     0  )  )     {", "iterations +  +  ;", "qhat -  -  ;", "rhat    +  =    v 1     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "}", "if    ( iterations    >     2  )     {", "throw   new   IllegalStateException (  (  \" qhat   is   greater   than   q   by   more   than    2  :     \"     +    iterations )  )  ;", "}", "return    (  ( int )     ( qhat )  )  ;", "}", "METHOD_END"], "methodName": ["estimateQuotient"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "long   high    =    UnscaledDecimal 1  2  8 Arithmetic . getLong ( decimal ,     1  )  ;", "if    (  ( high    >  =     0  )     &  &     ( high    <     5  4  2  1  0  1  0  8  6  2  4  2  7  5  2  2  1  7  0 L )  )     {", "return   false ;", "} else", "if    ( high    !  =     5  4  2  1  0  1  0  8  6  2  4  2  7  5  2  2  1  7  0 L )     {", "return   true ;", "}", "long   low    =    UnscaledDecimal 1  2  8 Arithmetic . getLong ( decimal ,     0  )  ;", "return    ( low    <     0  )     |  |     ( low    >  =     6  8  7  3  9  9  5  5  1  4  0  0  6  7  3  2  8  0 L )  ;", "}", "METHOD_END"], "methodName": ["exceedsOrEqualTenToThirtyEight"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "int   value    =    UnscaledDecimal 1  2  8 Arithmetic . getRawInt ( decimal ,    index )  ;", "if    ( index    =  =     ( UnscaledDecimal 1  2  8 Arithmetic . SIGN _ INT _ INDEX )  )     {", "value    &  =     ~  ( UnscaledDecimal 1  2  8 Arithmetic . SIGN _ INT _ MASK )  ;", "}", "return   value ;", "}", "METHOD_END"], "methodName": ["getInt"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "long   value    =    UnscaledDecimal 1  2  8 Arithmetic . getRawLong ( decimal ,    index )  ;", "if    ( index    =  =     ( UnscaledDecimal 1  2  8 Arithmetic . SIGN _ LONG _ INDEX )  )     {", "return   UnscaledDecimal 1  2  8 Arithmetic . unpackUnsignedLong ( value )  ;", "}", "return   value ;", "}", "METHOD_END"], "methodName": ["getLong"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "return   UnscaledDecimal 1  2  8 Arithmetic . unsafe . getInt ( decimal . getBase (  )  ,     (  ( decimal . getAddress (  )  )     +     (  ( SizeOf . SIZE _ OF _ INT )     *    index )  )  )  ;", "}", "METHOD_END"], "methodName": ["getRawInt"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "return   UnscaledDecimal 1  2  8 Arithmetic . unsafe . getLong ( decimal . getBase (  )  ,     (  ( decimal . getAddress (  )  )     +     (  ( SizeOf . SIZE _ OF _ LONG )     *    index )  )  )  ;", "}", "METHOD_END"], "methodName": ["getRawLong"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "return   UnscaledDecimal 1  2  8 Arithmetic . hash ( UnscaledDecimal 1  2  8 Arithmetic . getRawLong ( decimal ,     0  )  ,    UnscaledDecimal 1  2  8 Arithmetic . getRawLong ( decimal ,     1  )  )  ;", "}", "METHOD_END"], "methodName": ["hash"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "return    ( XxHash 6  4  . hash ( rawLow )  )     ^     ( XxHash 6  4  . hash ( UnscaledDecimal 1  2  8 Arithmetic . unpackUnsignedLong ( rawHigh )  )  )  ;", "}", "METHOD_END"], "methodName": ["hash"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "return    (  ( int )     ( val    >  >  >     3  2  )  )  ;", "}", "METHOD_END"], "methodName": ["highInt"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "long   low    =    UnscaledDecimal 1  2  8 Arithmetic . getLong ( decimal ,     0  )  ;", "if    ( low    !  =     ( UnscaledDecimal 1  2  8 Arithmetic . ALL _ BITS _ SET _  6  4  )  )     {", "UnscaledDecimal 1  2  8 Arithmetic . setRawLong ( decimal ,     0  ,     ( low    +     1  )  )  ;", "return ;", "}", "long   high    =    UnscaledDecimal 1  2  8 Arithmetic . getLong ( decimal ,     1  )  ;", "UnscaledDecimal 1  2  8 Arithmetic . setNegativeLong ( decimal ,     ( high    +     1  )  ,    UnscaledDecimal 1  2  8 Arithmetic . isNegative ( decimal )  )  ;", "}", "METHOD_END"], "methodName": ["incrementUnsafe"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "return    (  ( UnscaledDecimal 1  2  8 Arithmetic . getRawInt ( decimal ,    UnscaledDecimal 1  2  8 Arithmetic . SIGN _ INT _ INDEX )  )     &     ( UnscaledDecimal 1  2  8 Arithmetic . SIGN _ INT _ MASK )  )     !  =     0  ;", "}", "METHOD_END"], "methodName": ["isNegative"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "return    ( rawHigh    &     ( UnscaledDecimal 1  2  8 Arithmetic . SIGN _ LONG _ MASK )  )     !  =     0  ;", "}", "METHOD_END"], "methodName": ["isNegative"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "return    ( UnscaledDecimal 1  2  8 Arithmetic . isNegative ( decimal )  )     &  &     (  (  ( UnscaledDecimal 1  2  8 Arithmetic . getLong ( decimal ,     0  )  )     !  =     0  )     |  |     (  ( UnscaledDecimal 1  2  8 Arithmetic . getLong ( decimal ,     1  )  )     !  =     0  )  )  ;", "}", "METHOD_END"], "methodName": ["isStrictlyNegative"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "return    ( UnscaledDecimal 1  2  8 Arithmetic . isNegative ( rawLow ,    rawHigh )  )     &  &     (  ( rawLow    !  =     0  )     |  |     (  ( UnscaledDecimal 1  2  8 Arithmetic . unpackUnsignedLong ( rawHigh )  )     !  =     0  )  )  ;", "}", "METHOD_END"], "methodName": ["isStrictlyNegative"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "return    (  ( UnscaledDecimal 1  2  8 Arithmetic . getLong ( decimal ,     0  )  )     =  =     0  )     &  &     (  ( UnscaledDecimal 1  2  8 Arithmetic . getLong ( decimal ,     1  )  )     =  =     0  )  ;", "}", "METHOD_END"], "methodName": ["isZero"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "return    (  ( int )     ( val )  )  ;", "}", "METHOD_END"], "methodName": ["lowInt"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "Slice   result    =    Slices . copyOf ( decimal )  ;", ". multiplyDestructive ( result ,    multiplier )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["multiply"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "Slice   result    =    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  )  ;", "UnscaledDecimal 1  2  8 Arithmetic . multiply ( left ,    right ,    result )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["multiply"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "UnscaledDecimal 1  2  8 Arithmetic . checkArgument (  (  ( result . length (  )  )     =  =     (  ( UnscaledDecimal 1  2  8 Arithmetic . NUMBER _ OF _ LONGS )     *     ( Long . BYTES )  )  )  )  ;", "long   l 0     =     ( UnscaledDecimal 1  2  8 Arithmetic . getInt ( left ,     0  )  )     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "long   l 1     =     ( UnscaledDecimal 1  2  8 Arithmetic . getInt ( left ,     1  )  )     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "long   l 2     =     ( UnscaledDecimal 1  2  8 Arithmetic . getInt ( left ,     2  )  )     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "long   l 3     =     ( UnscaledDecimal 1  2  8 Arithmetic . getInt ( left ,     3  )  )     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "long   r 0     =     ( UnscaledDecimal 1  2  8 Arithmetic . getInt ( right ,     0  )  )     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "long   r 1     =     ( UnscaledDecimal 1  2  8 Arithmetic . getInt ( right ,     1  )  )     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "long   r 2     =     ( UnscaledDecimal 1  2  8 Arithmetic . getInt ( right ,     2  )  )     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "long   r 3     =     ( UnscaledDecimal 1  2  8 Arithmetic . getInt ( right ,     3  )  )     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "if    (  (  (  ( r 3     !  =     0  )     &  &     (  (  ( l 3     |    l 2  )     |    l 1  )     !  =     0  )  )     |  |     (  ( r 2     !  =     0  )     &  &     (  ( l 3     |    l 2  )     !  =     0  )  )  )     |  |     (  ( r 1     !  =     0  )     &  &     ( l 3     !  =     0  )  )  )     {", "UnscaledDecimal 1  2  8 Arithmetic . throwOverflowException (  )  ;", "}", "long   z 0     =     0  ;", "long   z 1     =     0  ;", "long   z 2     =     0  ;", "long   z 3     =     0  ;", "if    ( l 0     !  =     0  )     {", "long   accumulator    =    r 0     *    l 0  ;", "z 0     =    accumulator    &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "accumulator    =     ( accumulator    >  >  >     3  2  )     +     ( r 1     *    l 0  )  ;", "z 1     =    accumulator    &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "accumulator    =     ( accumulator    >  >  >     3  2  )     +     ( r 2     *    l 0  )  ;", "z 2     =    accumulator    &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "accumulator    =     ( accumulator    >  >  >     3  2  )     +     ( r 3     *    l 0  )  ;", "z 3     =    accumulator    &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "if    (  ( accumulator    >  >  >     3  2  )     !  =     0  )     {", "UnscaledDecimal 1  2  8 Arithmetic . throwOverflowException (  )  ;", "}", "}", "if    ( l 1     !  =     0  )     {", "long   accumulator    =     ( r 0     *    l 1  )     +    z 1  ;", "z 1     =    accumulator    &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "accumulator    =     (  ( accumulator    >  >  >     3  2  )     +     ( r 1     *    l 1  )  )     +    z 2  ;", "z 2     =    accumulator    &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "accumulator    =     (  ( accumulator    >  >  >     3  2  )     +     ( r 2     *    l 1  )  )     +    z 3  ;", "z 3     =    accumulator    &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "if    (  ( accumulator    >  >  >     3  2  )     !  =     0  )     {", "UnscaledDecimal 1  2  8 Arithmetic . throwOverflowException (  )  ;", "}", "}", "if    ( l 2     !  =     0  )     {", "long   accumulator    =     ( r 0     *    l 2  )     +    z 2  ;", "z 2     =    accumulator    &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "accumulator    =     (  ( accumulator    >  >  >     3  2  )     +     ( r 1     *    l 2  )  )     +    z 3  ;", "z 3     =    accumulator    &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "if    (  ( accumulator    >  >  >     3  2  )     !  =     0  )     {", "UnscaledDecimal 1  2  8 Arithmetic . throwOverflowException (  )  ;", "}", "}", "if    ( l 3     !  =     0  )     {", "long   accumulator    =     ( r 0     *    l 3  )     +    z 3  ;", "z 3     =    accumulator    &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "if    (  ( accumulator    >  >  >     3  2  )     !  =     0  )     {", "UnscaledDecimal 1  2  8 Arithmetic . throwOverflowException (  )  ;", "}", "}", "UnscaledDecimal 1  2  8 Arithmetic . pack ( result ,     (  ( int )     ( z 0  )  )  ,     (  ( int )     ( z 1  )  )  ,     (  ( int )     ( z 2  )  )  ,     (  ( int )     ( z 3  )  )  ,     (  ( UnscaledDecimal 1  2  8 Arithmetic . isNegative ( left )  )     !  =     ( UnscaledDecimal 1  2  8 Arithmetic . isNegative ( right )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["multiply"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "UnscaledDecimal 1  2  8 Arithmetic . checkArgument (  (  ( result . length (  )  )     >  =     (  (  ( UnscaledDecimal 1  2  8 Arithmetic . NUMBER _ OF _ LONGS )     *     ( Long . BYTES )  )     *     2  )  )  )  ;", "long   l 0     =     ( UnscaledDecimal 1  2  8 Arithmetic . getInt ( left ,     0  )  )     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "long   l 1     =     ( UnscaledDecimal 1  2  8 Arithmetic . getInt ( left ,     1  )  )     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "long   l 2     =     ( UnscaledDecimal 1  2  8 Arithmetic . getInt ( left ,     2  )  )     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "long   l 3     =     ( UnscaledDecimal 1  2  8 Arithmetic . getInt ( left ,     3  )  )     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "long   r 0     =     ( UnscaledDecimal 1  2  8 Arithmetic . getInt ( right ,     0  )  )     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "long   r 1     =     ( UnscaledDecimal 1  2  8 Arithmetic . getInt ( right ,     1  )  )     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "long   r 2     =     ( UnscaledDecimal 1  2  8 Arithmetic . getInt ( right ,     2  )  )     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "long   r 3     =     ( UnscaledDecimal 1  2  8 Arithmetic . getInt ( right ,     3  )  )     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "long   z 0     =     0  ;", "long   z 1     =     0  ;", "long   z 2     =     0  ;", "long   z 3     =     0  ;", "long   z 4     =     0  ;", "long   z 5     =     0  ;", "long   z 6     =     0  ;", "long   z 7     =     0  ;", "if    ( l 0     !  =     0  )     {", "long   accumulator    =    r 0     *    l 0  ;", "z 0     =    accumulator    &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "accumulator    =     ( accumulator    >  >  >     3  2  )     +     ( r 1     *    l 0  )  ;", "z 1     =    accumulator    &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "accumulator    =     ( accumulator    >  >  >     3  2  )     +     ( r 2     *    l 0  )  ;", "z 2     =    accumulator    &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "accumulator    =     ( accumulator    >  >  >     3  2  )     +     ( r 3     *    l 0  )  ;", "z 3     =    accumulator    &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "z 4     =     ( accumulator    >  >  >     3  2  )     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "}", "if    ( l 1     !  =     0  )     {", "long   accumulator    =     ( r 0     *    l 1  )     +    z 1  ;", "z 1     =    accumulator    &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "accumulator    =     (  ( accumulator    >  >  >     3  2  )     +     ( r 1     *    l 1  )  )     +    z 2  ;", "z 2     =    accumulator    &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "accumulator    =     (  ( accumulator    >  >  >     3  2  )     +     ( r 2     *    l 1  )  )     +    z 3  ;", "z 3     =    accumulator    &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "accumulator    =     (  ( accumulator    >  >  >     3  2  )     +     ( r 3     *    l 1  )  )     +    z 4  ;", "z 4     =    accumulator    &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "z 5     =     ( accumulator    >  >  >     3  2  )     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "}", "if    ( l 2     !  =     0  )     {", "long   accumulator    =     ( r 0     *    l 2  )     +    z 2  ;", "z 2     =    accumulator    &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "accumulator    =     (  ( accumulator    >  >  >     3  2  )     +     ( r 1     *    l 2  )  )     +    z 3  ;", "z 3     =    accumulator    &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "accumulator    =     (  ( accumulator    >  >  >     3  2  )     +     ( r 2     *    l 2  )  )     +    z 4  ;", "z 4     =    accumulator    &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "accumulator    =     (  ( accumulator    >  >  >     3  2  )     +     ( r 3     *    l 2  )  )     +    z 5  ;", "z 5     =    accumulator    &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "z 6     =     ( accumulator    >  >  >     3  2  )     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "}", "if    ( l 3     !  =     0  )     {", "long   accumulator    =     ( r 0     *    l 3  )     +    z 3  ;", "z 3     =    accumulator    &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "accumulator    =     (  ( accumulator    >  >  >     3  2  )     +     ( r 1     *    l 3  )  )     +    z 4  ;", "z 4     =    accumulator    &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "accumulator    =     (  ( accumulator    >  >  >     3  2  )     +     ( r 2     *    l 3  )  )     +    z 5  ;", "z 5     =    accumulator    &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "accumulator    =     (  ( accumulator    >  >  >     3  2  )     +     ( r 3     *    l 3  )  )     +    z 6  ;", "z 6     =    accumulator    &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "z 7     =     ( accumulator    >  >  >     3  2  )     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "}", "UnscaledDecimal 1  2  8 Arithmetic . setRawInt ( result ,     0  ,     (  ( int )     ( z 0  )  )  )  ;", "UnscaledDecimal 1  2  8 Arithmetic . setRawInt ( result ,     1  ,     (  ( int )     ( z 1  )  )  )  ;", "UnscaledDecimal 1  2  8 Arithmetic . setRawInt ( result ,     2  ,     (  ( int )     ( z 2  )  )  )  ;", "UnscaledDecimal 1  2  8 Arithmetic . setRawInt ( result ,     3  ,     (  ( int )     ( z 3  )  )  )  ;", "UnscaledDecimal 1  2  8 Arithmetic . setRawInt ( result ,     4  ,     (  ( int )     ( z 4  )  )  )  ;", "UnscaledDecimal 1  2  8 Arithmetic . setRawInt ( result ,     5  ,     (  ( int )     ( z 5  )  )  )  ;", "UnscaledDecimal 1  2  8 Arithmetic . setRawInt ( result ,     6  ,     (  ( int )     ( z 6  )  )  )  ;", "UnscaledDecimal 1  2  8 Arithmetic . setRawInt ( result ,     7  ,     (  ( int )     ( z 7  )  )  )  ;", "}", "METHOD_END"], "methodName": ["multiply256"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "long   unsignedMultiplier    =    multiplier    &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "int   leftIndex    =    leftOffset    -    length ;", "long   multiplyAccumulator    =     0  ;", "long   subtractAccumulator    =    UnscaledDecimal 1  2  8 Arithmetic . INT _ BASE ;", "for    ( int   rightIndex    =     0  ;    rightIndex    <    length ;    rightIndex +  +     ,    leftIndex +  +  )     {", "multiplyAccumulator    =     (  (  ( right [ rightIndex ]  )     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  )     *    unsignedMultiplier )     +    multiplyAccumulator ;", "subtractAccumulator    =     ( subtractAccumulator    +     (  ( left [ leftIndex ]  )     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  )  )     -     (  ( UnscaledDecimal 1  2  8 Arithmetic . lowInt ( multiplyAccumulator )  )     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  )  ;", "multiplyAccumulator    =    multiplyAccumulator    >  >  >     3  2  ;", "left [ leftIndex ]     =    UnscaledDecimal 1  2  8 Arithmetic . lowInt ( subtractAccumulator )  ;", "subtractAccumulator    =     (  ( subtractAccumulator    >  >  >     3  2  )     +     ( UnscaledDecimal 1  2  8 Arithmetic . INT _ BASE )  )     -     1  ;", "}", "subtractAccumulator    +  =     (  ( left [ leftIndex ]  )     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  )     -    multiplyAccumulator ;", "left [ leftIndex ]     =    UnscaledDecimal 1  2  8 Arithmetic . lowInt ( subtractAccumulator )  ;", "return    ( UnscaledDecimal 1  2  8 Arithmetic . highInt ( subtractAccumulator )  )     =  =     0  ;", "}", "METHOD_END"], "methodName": ["multiplyAndSubtractUnsignedMultiPrecision"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "long   l 0     =     ( UnscaledDecimal 1  2  8 Arithmetic . getInt ( decimal ,     0  )  )     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "long   l 1     =     ( UnscaledDecimal 1  2  8 Arithmetic . getInt ( decimal ,     1  )  )     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "long   l 2     =     ( UnscaledDecimal 1  2  8 Arithmetic . getInt ( decimal ,     2  )  )     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "long   l 3     =     ( UnscaledDecimal 1  2  8 Arithmetic . getInt ( decimal ,     3  )  )     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "long   r 0     =     ( Math . abs ( multiplier )  )     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  ;", "long   product ;", "product    =    r 0     *    l 0  ;", "int   z 0     =     (  ( int )     ( product )  )  ;", "product    =     ( r 0     *    l 1  )     +     ( product    >  >  >     3  2  )  ;", "int   z 1     =     (  ( int )     ( product )  )  ;", "product    =     ( r 0     *    l 2  )     +     ( product    >  >  >     3  2  )  ;", "int   z 2     =     (  ( int )     ( product )  )  ;", "product    =     ( r 0     *    l 3  )     +     ( product    >  >  >     3  2  )  ;", "int   z 3     =     (  ( int )     ( product )  )  ;", "if    (  ( product    >  >  >     3  2  )     !  =     0  )     {", "UnscaledDecimal 1  2  8 Arithmetic . throwOverflowException (  )  ;", "}", "boolean   negative    =     ( UnscaledDecimal 1  2  8 Arithmetic . isNegative ( decimal )  )     !  =     ( multiplier    <     0  )  ;", "UnscaledDecimal 1  2  8 Arithmetic . pack ( decimal ,    z 0  ,    z 1  ,    z 2  ,    z 3  ,    negative )  ;", "}", "METHOD_END"], "methodName": ["multiplyDestructive"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "int [  ]    product    =    new   int [  ( UnscaledDecimal 1  2  8 Arithmetic . NUMBER _ OF _ INTS )     *     2  ]  ;", "Slice   multiplicationResult    =    Slices . wrappedIntArray ( product )  ;", "UnscaledDecimal 1  2  8 Arithmetic . multiply 2  5  6  ( decimal ,    multiplier ,    multiplicationResult )  ;", "UnscaledDecimal 1  2  8 Arithmetic . shiftRightArray 8  ( product ,    rightShifts ,    decimal )  ;", "}", "METHOD_END"], "methodName": ["multiplyShiftDestructive"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "UnscaledDecimal 1  2  8 Arithmetic . setNegative ( decimal ,     (  !  ( UnscaledDecimal 1  2  8 Arithmetic . isNegative ( decimal )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["negate"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "if    ( precision    =  =     ( Decimals . MAX _ PRECISION )  )     {", "return    . exceedsOrEqualTenToThirtyEight ( value )  ;", "}", "return    ( precision    <     ( Decimals . MAX _ PRECISION )  )     &  &     (  (  . compareAbsolute ( value ,     . POWERS _ OF _ TEN [ precision ]  )  )     >  =     0  )  ;", "}", "METHOD_END"], "methodName": ["overflows"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "UnscaledDecimal 1  2  8 Arithmetic . setRawInt ( decimal ,     0  ,    v 0  )  ;", "UnscaledDecimal 1  2  8 Arithmetic . setRawInt ( decimal ,     1  ,    v 1  )  ;", "UnscaledDecimal 1  2  8 Arithmetic . setRawInt ( decimal ,     2  ,    v 2  )  ;", "UnscaledDecimal 1  2  8 Arithmetic . setNegativeInt ( decimal ,    v 3  ,    negative )  ;", "}", "METHOD_END"], "methodName": ["pack"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "UnscaledDecimal 1  2  8 Arithmetic . setRawInt ( decimal ,     0  ,    v 0  )  ;", "UnscaledDecimal 1  2  8 Arithmetic . setRawInt ( decimal ,     1  ,    v 1  )  ;", "UnscaledDecimal 1  2  8 Arithmetic . setNegativeLong ( decimal ,    high ,    negative )  ;", "}", "METHOD_END"], "methodName": ["pack"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "UnscaledDecimal 1  2  8 Arithmetic . setRawLong ( decimal ,     0  ,    low )  ;", "UnscaledDecimal 1  2  8 Arithmetic . setNegativeLong ( decimal ,    high ,    negative )  ;", "}", "METHOD_END"], "methodName": ["pack"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "UnscaledDecimal 1  2  8 Arithmetic . pack (  0  ,     0  ,    false ,    result )  ;", "byte [  ]    bytes    =    unscaledValue . abs (  )  . toByteArray (  )  ;", "if    (  (  ( bytes . length )     >     ( UnscaledDecimal 1  2  8 Arithmetic . UNSCALED _ DECIMAL _  1  2  8  _ SLICE _ LENGTH )  )     |  |     (  (  ( bytes . length )     =  =     ( UnscaledDecimal 1  2  8 Arithmetic . UNSCALED _ DECIMAL _  1  2  8  _ SLICE _ LENGTH )  )     &  &     (  (  ( bytes [  0  ]  )     &     ( UnscaledDecimal 1  2  8 Arithmetic . SIGN _ BYTE _ MASK )  )     !  =     0  )  )  )     {", "UnscaledDecimal 1  2  8 Arithmetic . throwOverflowException (  )  ;", "}", "UnscaledDecimal 1  2  8 Arithmetic . reverse ( bytes )  ;", "result . setBytes (  0  ,    bytes )  ;", "if    (  ( unscaledValue . signum (  )  )     <     0  )     {", "UnscaledDecimal 1  2  8 Arithmetic . setNegative ( result ,    true )  ;", "}", "UnscaledDecimal 1  2  8 Arithmetic . throwIfOverflows ( result )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["pack"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "Slice   decimal    =    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  )  ;", "UnscaledDecimal 1  2  8 Arithmetic . pack ( low ,    high ,    negative ,    decimal )  ;", "return   decimal ;", "}", "METHOD_END"], "methodName": ["pack"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "UnscaledDecimal 1  2  8 Arithmetic . setRawLong ( result ,     0  ,    low )  ;", "UnscaledDecimal 1  2  8 Arithmetic . setRawLong ( result ,     1  ,     ( high    |     ( negative    ?    UnscaledDecimal 1  2  8 Arithmetic . SIGN _ LONG _ MASK    :     0  )  )  )  ;", "}", "METHOD_END"], "methodName": ["pack"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "if    (  ( UnscaledDecimal 1  2  8 Arithmetic . digitsInIntegerBase ( digits )  )     >     ( UnscaledDecimal 1  2  8 Arithmetic . NUMBER _ OF _ INTS )  )     {", "UnscaledDecimal 1  2  8 Arithmetic . throwOverflowException (  )  ;", "}", "if    (  (  ( digits [  3  ]  )     &     ( UnscaledDecimal 1  2  8 Arithmetic . SIGN _ INT _ MASK )  )     !  =     0  )     {", "UnscaledDecimal 1  2  8 Arithmetic . throwOverflowException (  )  ;", "}", "UnscaledDecimal 1  2  8 Arithmetic . pack ( decimal ,    digits [  0  ]  ,    digits [  1  ]  ,    digits [  2  ]  ,    digits [  3  ]  ,    false )  ;", "}", "METHOD_END"], "methodName": ["packUnsigned"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "return   UnscaledDecimal 1  2  8 Arithmetic . remainder ( UnscaledDecimal 1  2  8 Arithmetic . getRawLong ( dividend ,     0  )  ,    UnscaledDecimal 1  2  8 Arithmetic . getRawLong ( dividend ,     1  )  ,    dividendScaleFactor ,    UnscaledDecimal 1  2  8 Arithmetic . getRawLong ( divisor ,     0  )  ,    UnscaledDecimal 1  2  8 Arithmetic . getRawLong ( divisor ,     1  )  ,    divisorScaleFactor )  ;", "}", "METHOD_END"], "methodName": ["remainder"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "return   UnscaledDecimal 1  2  8 Arithmetic . remainder ( UnscaledDecimal 1  2  8 Arithmetic . getRawLong ( dividend ,     0  )  ,    UnscaledDecimal 1  2  8 Arithmetic . getRawLong ( dividend ,     1  )  ,    dividendScaleFactor ,    Math . abs ( divisor )  ,     ( divisor    <     0     ?    UnscaledDecimal 1  2  8 Arithmetic . SIGN _ LONG _ MASK    :     0  )  ,    divisorScaleFactor )  ;", "}", "METHOD_END"], "methodName": ["remainder"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "return   UnscaledDecimal 1  2  8 Arithmetic . remainder ( Math . abs ( dividend )  ,     ( dividend    <     0     ?    UnscaledDecimal 1  2  8 Arithmetic . SIGN _ LONG _ MASK    :     0  )  ,    dividendScaleFactor ,    UnscaledDecimal 1  2  8 Arithmetic . getRawLong ( divisor ,     0  )  ,    UnscaledDecimal 1  2  8 Arithmetic . getRawLong ( divisor ,     1  )  ,    divisorScaleFactor )  ;", "}", "METHOD_END"], "methodName": ["remainder"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "return   UnscaledDecimal 1  2  8 Arithmetic . remainder ( Math . abs ( dividend )  ,     ( dividend    <     0     ?    UnscaledDecimal 1  2  8 Arithmetic . SIGN _ LONG _ MASK    :     0  )  ,    dividendScaleFactor ,    Math . abs ( divisor )  ,     ( divisor    <     0     ?    UnscaledDecimal 1  2  8 Arithmetic . SIGN _ LONG _ MASK    :     0  )  ,    divisorScaleFactor )  ;", "}", "METHOD_END"], "methodName": ["remainder"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "Slice   quotient    =    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  )  ;", "Slice   remainder    =    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  )  ;", "UnscaledDecimal 1  2  8 Arithmetic . divide ( dividendLow ,    dividendHigh ,    dividendScaleFactor ,    divisorLow ,    divisorHigh ,    divisorScaleFactor ,    quotient ,    remainder )  ;", "return   remainder ;", "}", "METHOD_END"], "methodName": ["remainder"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "if    ( rescaleFactor    =  =     0  )     {", "return   decimal ;", "} else    {", "Slice   result    =     . unscaledDecimal (  )  ;", ". rescale ( decimal ,    rescaleFactor ,    result )  ;", "return   result ;", "}", "}", "METHOD_END"], "methodName": ["rescale"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "if    ( rescaleFactor    =  =     0  )     {", ". copyUnscaledDecimal ( decimal ,    result )  ;", "} else", "if    ( rescaleFactor    >     0  )     {", "if    ( rescaleFactor    >  =     (  . POWERS _ OF _ TEN . length )  )     {", ". throwOverflowException (  )  ;", "}", ". multiply ( decimal ,     . POWERS _ OF _ TEN [ rescaleFactor ]  ,    result )  ;", "} else    {", ". scaleDownRoundUp ( decimal ,     (  - rescaleFactor )  ,    result )  ;", "}", "}", "METHOD_END"], "methodName": ["rescale"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "if    ( rescaleFactor    =  =     0  )     {", "return   decimal ;", "} else    {", "Slice   result    =     . unscaledDecimal (  )  ;", ". rescaleTruncate ( decimal ,    rescaleFactor ,    result )  ;", "return   result ;", "}", "}", "METHOD_END"], "methodName": ["rescaleTruncate"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "if    ( rescaleFactor    =  =     0  )     {", ". copyUnscaledDecimal ( decimal ,    result )  ;", "} else", "if    ( rescaleFactor    >     0  )     {", "if    ( rescaleFactor    >  =     (  . POWERS _ OF _ TEN . length )  )     {", ". throwOverflowException (  )  ;", "}", ". multiply ( decimal ,     . POWERS _ OF _ TEN [ rescaleFactor ]  ,    result )  ;", "} else    {", ". scaleDownTruncate ( decimal ,     (  - rescaleFactor )  ,    result )  ;", "}", "}", "METHOD_END"], "methodName": ["rescaleTruncate"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "final   int   length    =    a . length ;", "for    ( int   i    =    length    /     2  ;     ( i -  -  )     !  =     0  ;  )     {", "final   byte   t    =    a [  (  ( length    -    i )     -     1  )  ]  ;", "a [  (  ( length    -    i )     -     1  )  ]     =    a [ i ]  ;", "a [ i ]     =    t ;", "}", "return   a ;", "}", "METHOD_END"], "methodName": ["reverse"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "while    ( true )     {", "int   powerFive    =    Math . min ( fiveScale ,     . MAX _ POWER _ OF _ FIVE _ INT )  ;", "fiveScale    -  =    powerFive ;", "int   divisor    =     . POWERS _ OF _ FIVES _ INT [ powerFive ]  ;", ". divide ( decimal ,    divisor ,    result )  ;", "decimal    =    result ;", "if    ( fiveScale    =  =     0  )     {", "return ;", "}", "}", "}", "METHOD_END"], "methodName": ["scaleDownFive"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "long   low    =    UnscaledDecimal 1  2  8 Arithmetic . getLong ( decimal ,     0  )  ;", "long   high    =    UnscaledDecimal 1  2  8 Arithmetic . getLong ( decimal ,     1  )  ;", "if    (  (  ( scaleFactor    <  =     ( UnscaledDecimal 1  2  8 Arithmetic . MAX _ POWER _ OF _ TEN _ LONG )  )     &  &     ( high    =  =     0  )  )     &  &     ( low    >  =     0  )  )     {", "long   divisor    =    Decimals . longTenToNth ( scaleFactor )  ;", "long   newLow    =    low    /    divisor ;", "if    (  ( low    %    divisor )     >  =     ( divisor    >  >     1  )  )     {", "newLow +  +  ;", "}", "UnscaledDecimal 1  2  8 Arithmetic . pack ( result ,    newLow ,     0  ,    UnscaledDecimal 1  2  8 Arithmetic . isNegative ( decimal )  )  ;", "return ;", "}", "if    (  (  ( scaleFactor    -     1  )     /     ( UnscaledDecimal 1  2  8 Arithmetic . MAX _ POWER _ OF _ FIVE _ INT )  )     <     (  ( scaleFactor    -     1  )     /     ( UnscaledDecimal 1  2  8 Arithmetic . MAX _ POWER _ OF _ TEN _ INT )  )  )     {", "UnscaledDecimal 1  2  8 Arithmetic . scaleDownFive ( decimal ,    scaleFactor ,    result )  ;", "UnscaledDecimal 1  2  8 Arithmetic . shiftRightRoundUp ( result ,    scaleFactor ,    result )  ;", "} else    {", "UnscaledDecimal 1  2  8 Arithmetic . scaleDownTenRoundUp ( decimal ,    scaleFactor ,    result )  ;", "}", "}", "METHOD_END"], "methodName": ["scaleDownRoundUp"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "boolean   round ;", "do    {", "int   powerTen    =    Math . min ( tenScale ,     . MAX _ POWER _ OF _ TEN _ INT )  ;", "tenScale    -  =    powerTen ;", "int   divisor    =     . POWERS _ OF _ TEN _ INT [ powerTen ]  ;", "round    =     . divideCheckRound ( decimal ,    divisor ,    result )  ;", "decimal    =    result ;", "}    while    ( tenScale    >     0     )  ;", "if    ( round )     {", ". incrementUnsafe ( decimal )  ;", "}", "}", "METHOD_END"], "methodName": ["scaleDownTenRoundUp"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "do    {", "int   powerTen    =    Math . min ( tenScale ,     . MAX _ POWER _ OF _ TEN _ INT )  ;", "tenScale    -  =    powerTen ;", "int   divisor    =     . POWERS _ OF _ TEN _ INT [ powerTen ]  ;", ". divide ( decimal ,    divisor ,    result )  ;", "decimal    =    result ;", "}    while    ( tenScale    >     0     )  ;", "}", "METHOD_END"], "methodName": ["scaleDownTenTruncate"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "long   low    =    UnscaledDecimal 1  2  8 Arithmetic . getLong ( decimal ,     0  )  ;", "long   high    =    UnscaledDecimal 1  2  8 Arithmetic . getLong ( decimal ,     1  )  ;", "if    (  (  ( scaleFactor    <  =     ( UnscaledDecimal 1  2  8 Arithmetic . MAX _ POWER _ OF _ TEN _ LONG )  )     &  &     ( high    =  =     0  )  )     &  &     ( low    >  =     0  )  )     {", "long   divisor    =    Decimals . longTenToNth ( scaleFactor )  ;", "long   newLow    =    low    /    divisor ;", "UnscaledDecimal 1  2  8 Arithmetic . pack ( result ,    newLow ,     0  ,    UnscaledDecimal 1  2  8 Arithmetic . isNegative ( decimal )  )  ;", "return ;", "}", "if    (  (  ( scaleFactor    -     1  )     /     ( UnscaledDecimal 1  2  8 Arithmetic . MAX _ POWER _ OF _ FIVE _ INT )  )     <     (  ( scaleFactor    -     1  )     /     ( UnscaledDecimal 1  2  8 Arithmetic . MAX _ POWER _ OF _ TEN _ INT )  )  )     {", "UnscaledDecimal 1  2  8 Arithmetic . scaleDownFive ( decimal ,    scaleFactor ,    result )  ;", "UnscaledDecimal 1  2  8 Arithmetic . shiftRightTruncate ( result ,    scaleFactor ,    result )  ;", "} else    {", "UnscaledDecimal 1  2  8 Arithmetic . scaleDownTenTruncate ( decimal ,    scaleFactor ,    result )  ;", "}", "}", "METHOD_END"], "methodName": ["scaleDownTruncate"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "while    ( fiveScale    >     0  )     {", "int   powerFive    =    Math . min ( fiveScale ,     . MAX _ POWER _ OF _ FIVE _ INT )  ;", "fiveScale    -  =    powerFive ;", "int   multiplier    =     . POWERS _ OF _ FIVES _ INT [ powerFive ]  ;", ". multiplyDestructive ( decimal ,    multiplier )  ;", "}", "}", "METHOD_END"], "methodName": ["scaleUpFiveDestructive"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "UnscaledDecimal 1  2  8 Arithmetic . setRawInt ( decimal ,    UnscaledDecimal 1  2  8 Arithmetic . SIGN _ INT _ INDEX ,     (  ( UnscaledDecimal 1  2  8 Arithmetic . getInt ( decimal ,    UnscaledDecimal 1  2  8 Arithmetic . SIGN _ INT _ INDEX )  )     |     ( negative    ?    UnscaledDecimal 1  2  8 Arithmetic . SIGN _ INT _ MASK    :     0  )  )  )  ;", "}", "METHOD_END"], "methodName": ["setNegative"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "if    ( v 3     <     0  )     {", ". throwOverflowException (  )  ;", "}", ". setRawInt ( decimal ,     . SIGN _ INT _ INDEX ,     ( v 3     |     ( negative    ?     . SIGN _ INT _ MASK    :     0  )  )  )  ;", "}", "METHOD_END"], "methodName": ["setNegativeInt"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "UnscaledDecimal 1  2  8 Arithmetic . setRawLong ( decimal ,    UnscaledDecimal 1  2  8 Arithmetic . SIGN _ LONG _ INDEX ,     ( high    |     ( negative    ?    UnscaledDecimal 1  2  8 Arithmetic . SIGN _ LONG _ MASK    :     0  )  )  )  ;", "}", "METHOD_END"], "methodName": ["setNegativeLong"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "UnscaledDecimal 1  2  8 Arithmetic . unsafe . putInt ( decimal . getBase (  )  ,     (  ( decimal . getAddress (  )  )     +     (  ( SizeOf . SIZE _ OF _ INT )     *    index )  )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRawInt"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "UnscaledDecimal 1  2  8 Arithmetic . unsafe . putLong ( decimal . getBase (  )  ,     (  ( decimal . getAddress (  )  )     +     (  ( SizeOf . SIZE _ OF _ LONG )     *    index )  )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRawLong"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "for    ( int   i    =     0  ;    i    <     ( UnscaledDecimal 1  2  8 Arithmetic . NUMBER _ OF _ LONGS )  ;    i +  +  )     {", "UnscaledDecimal 1  2  8 Arithmetic . setRawLong ( decimal ,    i ,     0  )  ;", "}", "}", "METHOD_END"], "methodName": ["setToZero"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "Slice   result    =    Slices . copyOf ( decimal )  ;", ". shiftLeftDestructive ( result ,    leftShifts )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["shiftLeft"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "if    ( leftShifts    =  =     0  )     {", "return ;", "}", "int   wordShifts    =    leftShifts    /     6  4  ;", "int   bitShiftsInWord    =    leftShifts    %     6  4  ;", "int   shiftRestore    =     6  4     -    bitShiftsInWord ;", "if    ( bitShiftsInWord    !  =     0  )     {", "if    (  (  (  . getLong ( decimal ,     (  1     -    wordShifts )  )  )     &     (  (  -  1 L )     <  <    shiftRestore )  )     !  =     0  )     {", ". throwOverflowException (  )  ;", "}", "}", "if    ( wordShifts    =  =     1  )     {", "if    (  (  . getLong ( decimal ,     1  )  )     !  =     0  )     {", ". throwOverflowException (  )  ;", "}", "}", "boolean   negative    =     . isNegative ( decimal )  ;", "long   low ;", "long   high ;", "switch    ( wordShifts )     {", "case    0     :", "low    =     . getLong ( decimal ,     0  )  ;", "high    =     . getLong ( decimal ,     1  )  ;", "break ;", "case    1     :", "low    =     0  ;", "high    =     . getLong ( decimal ,     0  )  ;", "break ;", "default    :", "throw   new   IllegalArgumentException (  )  ;", "}", "if    ( bitShiftsInWord    >     0  )     {", "high    =     ( high    <  <    bitShiftsInWord )     |     ( low    >  >  >    shiftRestore )  ;", "low    =    low    <  <    bitShiftsInWord ;", "}", ". pack ( decimal ,    low ,    high ,    negative )  ;", "}", "METHOD_END"], "methodName": ["shiftLeftDestructive"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "if    ( shifts    =  =     0  )     {", "return   number ;", "}", "int   wordShifts    =    shifts    >  >  >     5  ;", "for    ( int   i    =     0  ;    i    <    wordShifts ;    i +  +  )     {", ". checkState (  (  ( number [  (  ( length    -    i )     -     1  )  ]  )     =  =     0  )  )  ;", "}", "if    ( wordShifts    >     0  )     {", "System . arraycopy ( number ,     0  ,    number ,    wordShifts ,     ( length    -    wordShifts )  )  ;", "Arrays . fill ( number ,     0  ,    wordShifts ,     0  )  ;", "}", "int   bitShifts    =    shifts    &     3  1  ;", "if    ( bitShifts    >     0  )     {", ". checkState (  (  (  ( number [  ( length    -     1  )  ]  )     >  >  >     (  ( Integer . SIZE )     -    bitShifts )  )     =  =     0  )  )  ;", "for    ( int   position    =    length    -     1  ;    position    >     0  ;    position -  -  )     {", "number [ position ]     =     (  ( number [ position ]  )     <  <    bitShifts )     |     (  ( number [  ( position    -     1  )  ]  )     >  >  >     (  ( Integer . SIZE )     -    bitShifts )  )  ;", "}", "number [  0  ]     =     ( number [  0  ]  )     <  <    bitShifts ;", "}", "return   number ;", "}", "METHOD_END"], "methodName": ["shiftLeftMultiPrecision"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "if    ( rightShifts    =  =     0  )     {", ". copyUnscaledDecimal ( decimal ,    result )  ;", "return ;", "}", "int   wordShifts    =    rightShifts    /     6  4  ;", "int   bitShiftsInWord    =    rightShifts    %     6  4  ;", "int   shiftRestore    =     6  4     -    bitShiftsInWord ;", "boolean   roundCarry ;", "if    ( bitShiftsInWord    =  =     0  )     {", "roundCarry    =    roundUp    &  &     (  (  . getLong ( decimal ,     ( wordShifts    -     1  )  )  )     <     0  )  ;", "} else    {", "roundCarry    =    roundUp    &  &     (  (  (  . getLong ( decimal ,    wordShifts )  )     &     (  1 L    <  <     ( bitShiftsInWord    -     1  )  )  )     !  =     0  )  ;", "}", "boolean   negative    =     . isNegative ( decimal )  ;", "long   low ;", "long   high ;", "switch    ( wordShifts )     {", "case    0     :", "low    =     . getLong ( decimal ,     0  )  ;", "high    =     . getLong ( decimal ,     1  )  ;", "break ;", "case    1     :", "low    =     . getLong ( decimal ,     1  )  ;", "high    =     0  ;", "break ;", "default    :", "throw   new   IllegalArgumentException (  )  ;", "}", "if    ( bitShiftsInWord    >     0  )     {", "low    =     ( low    >  >  >    bitShiftsInWord )     |     ( high    <  <    shiftRestore )  ;", "high    =    high    >  >  >    bitShiftsInWord ;", "}", "if    ( roundCarry )     {", "if    ( low    !  =     (  . ALL _ BITS _ SET _  6  4  )  )     {", "low +  +  ;", "} else    {", "low    =     0  ;", "high +  +  ;", "}", "}", ". pack ( result ,    low ,    high ,    negative )  ;", "}", "METHOD_END"], "methodName": ["shiftRight"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "if    (  ( values . length )     !  =     (  ( UnscaledDecimal 1  2  8 Arithmetic . NUMBER _ OF _ INTS )     *     2  )  )     {", "throw   new   IllegalArgumentException (  \" Incorrect   values   length \"  )  ;", "}", "if    ( rightShifts    =  =     0  )     {", "for    ( int   i    =    UnscaledDecimal 1  2  8 Arithmetic . NUMBER _ OF _ INTS ;    i    <     (  2     *     ( UnscaledDecimal 1  2  8 Arithmetic . NUMBER _ OF _ INTS )  )  ;    i +  +  )     {", "if    (  ( values [ i ]  )     !  =     0  )     {", "UnscaledDecimal 1  2  8 Arithmetic . throwOverflowException (  )  ;", "}", "}", "for    ( int   i    =     0  ;    i    <     ( UnscaledDecimal 1  2  8 Arithmetic . NUMBER _ OF _ INTS )  ;    i +  +  )     {", "UnscaledDecimal 1  2  8 Arithmetic . setRawInt ( result ,    i ,    values [ i ]  )  ;", "}", "return ;", "}", "int   wordShifts    =    rightShifts    /     3  2  ;", "int   bitShiftsInWord    =    rightShifts    %     3  2  ;", "int   shiftRestore    =     3  2     -    bitShiftsInWord ;", "boolean   roundCarry ;", "if    ( bitShiftsInWord    =  =     0  )     {", "roundCarry    =     ( values [  ( wordShifts    -     1  )  ]  )     <     0  ;", "} else    {", "roundCarry    =     (  ( values [ wordShifts ]  )     &     (  1     <  <     ( bitShiftsInWord    -     1  )  )  )     !  =     0  ;", "}", "int   r 0     =    values [  (  0     +    wordShifts )  ]  ;", "int   r 1     =    values [  (  1     +    wordShifts )  ]  ;", "int   r 2     =    values [  (  2     +    wordShifts )  ]  ;", "int   r 3     =    values [  (  3     +    wordShifts )  ]  ;", "int   r 4     =     ( wordShifts    >  =     4  )     ?     0     :    values [  (  4     +    wordShifts )  ]  ;", "int   r 5     =     ( wordShifts    >  =     3  )     ?     0     :    values [  (  5     +    wordShifts )  ]  ;", "int   r 6     =     ( wordShifts    >  =     2  )     ?     0     :    values [  (  6     +    wordShifts )  ]  ;", "int   r 7     =     ( wordShifts    >  =     1  )     ?     0     :    values [  (  7     +    wordShifts )  ]  ;", "if    ( bitShiftsInWord    >     0  )     {", "r 0     =     ( r 0     >  >  >    bitShiftsInWord )     |     ( r 1     <  <    shiftRestore )  ;", "r 1     =     ( r 1     >  >  >    bitShiftsInWord )     |     ( r 2     <  <    shiftRestore )  ;", "r 2     =     ( r 2     >  >  >    bitShiftsInWord )     |     ( r 3     <  <    shiftRestore )  ;", "r 3     =     ( r 3     >  >  >    bitShiftsInWord )     |     ( r 4     <  <    shiftRestore )  ;", "}", "if    (  (  (  (  ( r 4     >  >  >    bitShiftsInWord )     !  =     0  )     |  |     ( r 5     !  =     0  )  )     |  |     ( r 6     !  =     0  )  )     |  |     ( r 7     !  =     0  )  )     {", "UnscaledDecimal 1  2  8 Arithmetic . throwOverflowException (  )  ;", "}", "if    ( r 3     <     0  )     {", "UnscaledDecimal 1  2  8 Arithmetic . throwOverflowException (  )  ;", "}", "if    ( roundCarry )     {", "r 0  +  +  ;", "if    ( r 0     =  =     0  )     {", "r 1  +  +  ;", "if    ( r 1     =  =     0  )     {", "r 2  +  +  ;", "if    ( r 2     =  =     0  )     {", "r 3  +  +  ;", "if    ( r 3     <     0  )     {", "UnscaledDecimal 1  2  8 Arithmetic . throwOverflowException (  )  ;", "}", "}", "}", "}", "}", "UnscaledDecimal 1  2  8 Arithmetic . pack ( result ,    r 0  ,    r 1  ,    r 2  ,    r 3  ,    false )  ;", "}", "METHOD_END"], "methodName": ["shiftRightArray8"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "if    ( shifts    =  =     0  )     {", "return   number ;", "}", "int   wordShifts    =    shifts    >  >  >     5  ;", "for    ( int   i    =     0  ;    i    <    wordShifts ;    i +  +  )     {", ". checkState (  (  ( number [ i ]  )     =  =     0  )  )  ;", "}", "if    ( wordShifts    >     0  )     {", "System . arraycopy ( number ,    wordShifts ,    number ,     0  ,     ( length    -    wordShifts )  )  ;", "Arrays . fill ( number ,     ( length    -    wordShifts )  ,    length ,     0  )  ;", "}", "int   bitShifts    =    shifts    &     3  1  ;", "if    ( bitShifts    >     0  )     {", ". checkState (  (  (  ( number [  0  ]  )     <  <     (  ( Integer . SIZE )     -    bitShifts )  )     =  =     0  )  )  ;", "for    ( int   position    =     0  ;    position    <     ( length    -     1  )  ;    position +  +  )     {", "number [ position ]     =     (  ( number [ position ]  )     >  >  >    bitShifts )     |     (  ( number [  ( position    +     1  )  ]  )     <  <     (  ( Integer . SIZE )     -    bitShifts )  )  ;", "}", "number [  ( length    -     1  )  ]     =     ( number [  ( length    -     1  )  ]  )     >  >  >    bitShifts ;", "}", "return   number ;", "}", "METHOD_END"], "methodName": ["shiftRightMultiPrecision"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "UnscaledDecimal 1  2  8 Arithmetic . shiftRight ( decimal ,    rightShifts ,    true ,    result )  ;", "}", "METHOD_END"], "methodName": ["shiftRightRoundUp"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "UnscaledDecimal 1  2  8 Arithmetic . shiftRight ( decimal ,    rightShifts ,    false ,    result )  ;", "}", "METHOD_END"], "methodName": ["shiftRightTruncate"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "Slice   result    =    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal (  )  ;", "UnscaledDecimal 1  2  8 Arithmetic . subtract ( left ,    right ,    result )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["subtract"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "if    (  ( UnscaledDecimal 1  2  8 Arithmetic . isNegative ( left )  )     !  =     ( UnscaledDecimal 1  2  8 Arithmetic . isNegative ( right )  )  )     {", "if    (  ( UnscaledDecimal 1  2  8 Arithmetic . addUnsignedReturnOverflow ( left ,    right ,    result ,    UnscaledDecimal 1  2  8 Arithmetic . isNegative ( left )  )  )     !  =     0  )     {", "UnscaledDecimal 1  2  8 Arithmetic . throwOverflowException (  )  ;", "}", "} else    {", "int   compare    =    UnscaledDecimal 1  2  8 Arithmetic . compareAbsolute ( left ,    right )  ;", "if    ( compare    >     0  )     {", "UnscaledDecimal 1  2  8 Arithmetic . subtractUnsigned ( left ,    right ,    result ,     (  ( UnscaledDecimal 1  2  8 Arithmetic . isNegative ( left )  )     &  &     ( UnscaledDecimal 1  2  8 Arithmetic . isNegative ( right )  )  )  )  ;", "} else", "if    ( compare    <     0  )     {", "UnscaledDecimal 1  2  8 Arithmetic . subtractUnsigned ( right ,    left ,    result ,     (  !  (  ( UnscaledDecimal 1  2  8 Arithmetic . isNegative ( left )  )     &  &     ( UnscaledDecimal 1  2  8 Arithmetic . isNegative ( right )  )  )  )  )  ;", "} else    {", "UnscaledDecimal 1  2  8 Arithmetic . setToZero ( result )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["subtract"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "int   l 0     =    UnscaledDecimal 1  2  8 Arithmetic . getInt ( left ,     0  )  ;", "int   l 1     =    UnscaledDecimal 1  2  8 Arithmetic . getInt ( left ,     1  )  ;", "int   l 2     =    UnscaledDecimal 1  2  8 Arithmetic . getInt ( left ,     2  )  ;", "int   l 3     =    UnscaledDecimal 1  2  8 Arithmetic . getInt ( left ,     3  )  ;", "int   r 0     =    UnscaledDecimal 1  2  8 Arithmetic . getInt ( right ,     0  )  ;", "int   r 1     =    UnscaledDecimal 1  2  8 Arithmetic . getInt ( right ,     1  )  ;", "int   r 2     =    UnscaledDecimal 1  2  8 Arithmetic . getInt ( right ,     2  )  ;", "int   r 3     =    UnscaledDecimal 1  2  8 Arithmetic . getInt ( right ,     3  )  ;", "long   intermediateResult ;", "intermediateResult    =     ( l 0     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  )     -     ( r 0     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  )  ;", "int   z 0     =     (  ( int )     ( intermediateResult )  )  ;", "intermediateResult    =     (  ( l 1     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  )     -     ( r 1     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  )  )     +     ( intermediateResult    >  >     3  2  )  ;", "int   z 1     =     (  ( int )     ( intermediateResult )  )  ;", "intermediateResult    =     (  ( l 2     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  )     -     ( r 2     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  )  )     +     ( intermediateResult    >  >     3  2  )  ;", "int   z 2     =     (  ( int )     ( intermediateResult )  )  ;", "intermediateResult    =     (  ( l 3     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  )     -     ( r 3     &     ( UnscaledDecimal 1  2  8 Arithmetic . LONG _ MASK )  )  )     +     ( intermediateResult    >  >     3  2  )  ;", "int   z 3     =     (  ( int )     ( intermediateResult )  )  ;", "UnscaledDecimal 1  2  8 Arithmetic . pack ( result ,    z 0  ,    z 1  ,    z 2  ,    z 3  ,    resultNegative )  ;", "if    (  ( intermediateResult    >  >     3  2  )     !  =     0  )     {", "throw   new   IllegalStateException ( String . format (  \" Non   empty   carry   over   after   subtracting    [  % d ]  .    right    >    left ?  \"  ,     ( intermediateResult    >  >     3  2  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["subtractUnsigned"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "throw   new   ArithmeticException (  \" Division   by   zero \"  )  ;", "}", "METHOD_END"], "methodName": ["throwDivisionByZeroException"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "if    ( UnscaledDecimal 1  2  8 Arithmetic . exceedsOrEqualTenToThirtyEight ( decimal )  )     {", "UnscaledDecimal 1  2  8 Arithmetic . throwOverflowException (  )  ;", "}", "}", "METHOD_END"], "methodName": ["throwIfOverflows"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "if    ( UnscaledDecimal 1  2  8 Arithmetic . overflows ( value ,    precision )  )     {", "UnscaledDecimal 1  2  8 Arithmetic . throwOverflowException (  )  ;", "}", "}", "METHOD_END"], "methodName": ["throwIfOverflows"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "throw   new   ArithmeticException (  \" Decimal   overflow \"  )  ;", "}", "METHOD_END"], "methodName": ["throwOverflowException"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "if    ( UnscaledDecimal 1  2  8 Arithmetic . isZero ( decimal )  )     {", "return    \"  0  \"  ;", "}", "char [  ]    buffer    =    new   char [  ( Decimals . MAX _ PRECISION )     +     1  ]  ;", "int   index    =    buffer . length ;", "boolean   negative    =    UnscaledDecimal 1  2  8 Arithmetic . isNegative ( decimal )  ;", "decimal    =    UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal ( decimal )  ;", "do    {", "int   remainder    =    UnscaledDecimal 1  2  8 Arithmetic . divide ( decimal ,     1  0  ,    decimal )  ;", "buffer [  (  -  - index )  ]     =     (  ( char )     (  '  0  '     +    remainder )  )  ;", "}    while    (  !  ( UnscaledDecimal 1  2  8 Arithmetic . isZero ( decimal )  )     )  ;", "if    ( negative )     {", "buffer [  (  -  - index )  ]     =     '  -  '  ;", "}", "return   new   String ( buffer ,    index ,     (  ( buffer . length )     -    index )  )  ;", "}", "METHOD_END"], "methodName": ["toUnscaledString"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "return   value    &     (  ~  ( UnscaledDecimal 1  2  8 Arithmetic . SIGN _ LONG _ MASK )  )  ;", "}", "METHOD_END"], "methodName": ["unpackUnsignedLong"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "return   Slices . allocate ( UnscaledDecimal 1  2  8 Arithmetic . UNSCALED _ DECIMAL _  1  2  8  _ SLICE _ LENGTH )  ;", "}", "METHOD_END"], "methodName": ["unscaledDecimal"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "return   Slices . copyOf ( decimal )  ;", "}", "METHOD_END"], "methodName": ["unscaledDecimal"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "return   UnscaledDecimal 1  2  8 Arithmetic . unscaledDecimal ( new   BigInteger ( unscaledValue )  )  ;", "}", "METHOD_END"], "methodName": ["unscaledDecimal"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "Slice   decimal    =    Slices . allocate ( UnscaledDecimal 1  2  8 Arithmetic . UNSCALED _ DECIMAL _  1  2  8  _ SLICE _ LENGTH )  ;", "return   UnscaledDecimal 1  2  8 Arithmetic . pack ( unscaledValue ,    decimal )  ;", "}", "METHOD_END"], "methodName": ["unscaledDecimal"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "long [  ]    longs    =    new   long [ UnscaledDecimal 1  2  8 Arithmetic . NUMBER _ OF _ LONGS ]  ;", "if    ( unscaledValue    <     0  )     {", "longs [  0  ]     =     - unscaledValue ;", "longs [  1  ]     =    UnscaledDecimal 1  2  8 Arithmetic . SIGN _ LONG _ MASK ;", "} else    {", "longs [  0  ]     =    unscaledValue ;", "}", "return   Slices . wrappedLongArray ( longs )  ;", "}", "METHOD_END"], "methodName": ["unscaledDecimal"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "byte [  ]    bytes    =    decimal . getBytes (  0  ,    UnscaledDecimal 1  2  8 Arithmetic . UNSCALED _ DECIMAL _  1  2  8  _ SLICE _ LENGTH )  ;", "UnscaledDecimal 1  2  8 Arithmetic . reverse ( bytes )  ;", "bytes [  0  ]     &  =     ~  ( UnscaledDecimal 1  2  8 Arithmetic . SIGN _ BYTE _ MASK )  ;", "return   new   BigInteger (  ( UnscaledDecimal 1  2  8 Arithmetic . isNegative ( decimal )     ?     -  1     :     1  )  ,    bytes )  ;", "}", "METHOD_END"], "methodName": ["unscaledDecimalToBigInteger"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "long   low    =    UnscaledDecimal 1  2  8 Arithmetic . getLong ( decimal ,     0  )  ;", "long   high    =    UnscaledDecimal 1  2  8 Arithmetic . getLong ( decimal ,     1  )  ;", "boolean   negative    =    UnscaledDecimal 1  2  8 Arithmetic . isNegative ( decimal )  ;", "if    (  ( high    !  =     0  )     |  |     (  (  ( low    >     ( Long . MIN _ VALUE )  )     |  |     (  ! negative )  )     &  &     ( low    <     0  )  )  )     {", "UnscaledDecimal 1  2  8 Arithmetic . throwOverflowException (  )  ;", "}", "return   negative    ?     - low    :    low ;", "}", "METHOD_END"], "methodName": ["unscaledDecimalToUnscaledLong"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "long   low    =    UnscaledDecimal 1  2  8 Arithmetic . getLong ( decimal ,     0  )  ;", "return   UnscaledDecimal 1  2  8 Arithmetic . isNegative ( decimal )     ?     - low    :    low ;", "}", "METHOD_END"], "methodName": ["unscaledDecimalToUnscaledLongUnsafe"], "fileName": "com.facebook.presto.spi.type.UnscaledDecimal128Arithmetic"}, {"methodBody": ["METHOD_START", "{", "return   VarcharType . VARCHAR ;", "}", "METHOD_END"], "methodName": ["createUnboundedVarcharType"], "fileName": "com.facebook.presto.spi.type.VarcharType"}, {"methodBody": ["METHOD_START", "{", "if    (  ( length    >     ( VarcharType . MAX _ LENGTH )  )     |  |     ( length    <     0  )  )     {", "throw   new   IllegalArgumentException (  (  \" Invalid   VARCHAR   length    \"     +    length )  )  ;", "}", "return   new   VarcharType ( length )  ;", "}", "METHOD_END"], "methodName": ["createVarcharType"], "fileName": "com.facebook.presto.spi.type.VarcharType"}, {"methodBody": ["METHOD_START", "{", "return   length ;", "}", "METHOD_END"], "methodName": ["getLength"], "fileName": "com.facebook.presto.spi.type.VarcharType"}, {"methodBody": ["METHOD_START", "{", "if    ( isUnbounded (  )  )     {", "throw   new   IllegalStateException (  \" Cannot   get   size   of   unbounded   VARCHAR .  \"  )  ;", "}", "return   length ;", "}", "METHOD_END"], "methodName": ["getLengthSafe"], "fileName": "com.facebook.presto.spi.type.VarcharType"}, {"methodBody": ["METHOD_START", "{", "return   new   TypeSignature ( StandardTypes . VARCHAR ,    TypeSignatureParameter . of ( param )  )  ;", "}", "METHOD_END"], "methodName": ["getParametrizedVarcharSignature"], "fileName": "com.facebook.presto.spi.type.VarcharType"}, {"methodBody": ["METHOD_START", "{", "return    ( length )     =  =     ( VarcharType . UNBOUNDED _ LENGTH )  ;", "}", "METHOD_END"], "methodName": ["isUnbounded"], "fileName": "com.facebook.presto.spi.type.VarcharType"}, {"methodBody": ["METHOD_START", "{", "writeSlice ( blockBuilder ,    Slices . utf 8 Slice ( value )  )  ;", "}", "METHOD_END"], "methodName": ["writeString"], "fileName": "com.facebook.presto.spi.type.VarcharType"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( slice ,     \" slice   is   null \"  )  ;", "if    ( length    <     0  )     {", "throw   new   IllegalArgumentException (  \" length   must   be   greater   than   or   equal   to   zero \"  )  ;", "}", "if    (  ( offset    <     0  )     |  |     (  ( offset    +    length )     >     ( slice . length (  )  )  )  )     {", "throw   new   IllegalArgumentException (  \" invalid   offset / length \"  )  ;", "}", "if    ( codePointCount    <     0  )     {", "throw   new   IllegalArgumentException (  \" codePointsCount   must   be   greater   than   or   equal   to   zero \"  )  ;", "}", "if    ( codePointCount    =  =     0  )     {", "return    0  ;", "}", "if    ( codePointCount    >    length )     {", "return   length ;", "}", "int   endIndex    =    SliceUtf 8  . offsetOfCodePoint ( slice ,    offset ,    codePointCount )  ;", "if    ( endIndex    <     0  )     {", "return   length ;", "}", "if    ( offset    >    endIndex )     {", "throw   new   AssertionError (  \" offset   cannot   be   smaller   than   or   equal   to   endIndex \"  )  ;", "}", "return   Math . min (  ( endIndex    -    offset )  ,    length )  ;", "}", "METHOD_END"], "methodName": ["byteCount"], "fileName": "com.facebook.presto.spi.type.Varchars"}, {"methodBody": ["METHOD_START", "{", "return   type   instanceof   VarcharType ;", "}", "METHOD_END"], "methodName": ["isVarcharType"], "fileName": "com.facebook.presto.spi.type.Varchars"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( type ,     \" type   is   null \"  )  ;", "if    (  !  (  . isVarcharType ( type )  )  )     {", "throw   new   IllegalArgumentException (  \" type   must   be   the   instance   of   VarcharType \"  )  ;", "}", "return    . truncateToLength ( slice ,    VarcharType . class . cast ( type )  )  ;", "}", "METHOD_END"], "methodName": ["truncateToLength"], "fileName": "com.facebook.presto.spi.type.Varchars"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( varcharType ,     \" varcharType   is   null \"  )  ;", "return    . truncateToLength ( slice ,    varcharType . getLength (  )  )  ;", "}", "METHOD_END"], "methodName": ["truncateToLength"], "fileName": "com.facebook.presto.spi.type.Varchars"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( slice ,     \" slice   is   null \"  )  ;", "if    ( maxLength    <     0  )     {", "throw   new   IllegalArgumentException (  \" Max   length   must   be   greater   or   equal   than   zero \"  )  ;", "}", "if    ( maxLength    =  =     0  )     {", "return   Slices . EMPTY _ SLICE ;", "}", "return   slice . slice (  0  ,     . byteCount ( slice ,     0  ,    slice . length (  )  ,    maxLength )  )  ;", "}", "METHOD_END"], "methodName": ["truncateToLength"], "fileName": "com.facebook.presto.spi.type.Varchars"}, {"methodBody": ["METHOD_START", "{", "Slice   slice    =    Slices . wrappedBuffer ( actual )  ;", "int   truncatedLength    =     . byteCount ( slice ,    offset ,    length ,    codePointCount )  ;", "byte [  ]    bytes    =    slice . getBytes ( offset ,    truncatedLength )  ;", "assertEquals ( bytes ,    expected )  ;", "}", "METHOD_END"], "methodName": ["assertByteCount"], "fileName": "com.facebook.presto.spi.type.VarcharsTest"}, {"methodBody": ["METHOD_START", "{", "VarcharsTest . assertByteCount ( Slices . utf 8 Slice ( actual )  . getBytes (  )  ,    offset ,    length ,    codePointCount ,    expected )  ;", "}", "METHOD_END"], "methodName": ["assertByteCount"], "fileName": "com.facebook.presto.spi.type.VarcharsTest"}, {"methodBody": ["METHOD_START", "{", "VarcharsTest . assertByteCount ( Slices . utf 8 Slice ( actual )  . getBytes (  )  ,    offset ,    length ,    codePointCount ,    Slices . utf 8 Slice ( expected )  . getBytes (  )  )  ;", "}", "METHOD_END"], "methodName": ["assertByteCount"], "fileName": "com.facebook.presto.spi.type.VarcharsTest"}, {"methodBody": ["METHOD_START", "{", "try    {", ". byteCount ( Slices . utf 8 Slice ( string )  ,    offset ,    length ,    codePointCount )  ;", "fail (  \" Expected   exception \"  )  ;", "}    catch    ( IllegalArgumentException   expected )     {", "}", "}", "METHOD_END"], "methodName": ["assertByteCountFailure"], "fileName": "com.facebook.presto.spi.type.VarcharsTest"}, {"methodBody": ["METHOD_START", "{", "VarcharsTest . assertByteCount (  \" abc \"  ,     0  ,     0  ,     1  ,     \"  \"  )  ;", "VarcharsTest . assertByteCount (  \" abc \"  ,     0  ,     1  ,     0  ,     \"  \"  )  ;", "VarcharsTest . assertByteCount (  \" abc \"  ,     1  ,     1  ,     1  ,     \" b \"  )  ;", "VarcharsTest . assertByteCount (  \" abc \"  ,     1  ,     1  ,     2  ,     \" b \"  )  ;", "VarcharsTest . assertByteCount (  \" abc \"  ,     1  ,     2  ,     1  ,     \" b \"  )  ;", "VarcharsTest . assertByteCount (  \" abc \"  ,     1  ,     2  ,     2  ,     \" bc \"  )  ;", "VarcharsTest . assertByteCount (  \" abc \"  ,     1  ,     2  ,     3  ,     \" bc \"  )  ;", "VarcharsTest . assertByteCount (  \" abc \"  ,     0  ,     3  ,     1  ,     \" a \"  )  ;", "VarcharsTest . assertByteCount (  \" abc \"  ,     0  ,     3  ,     5  ,     \" abc \"  )  ;", "VarcharsTest . assertByteCountFailure (  \" abc \"  ,     4  ,     5  ,     1  )  ;", "VarcharsTest . assertByteCountFailure (  \" abc \"  ,     5  ,     0  ,     1  )  ;", "VarcharsTest . assertByteCountFailure (  \" abc \"  ,     (  -  1  )  ,     1  ,     1  )  ;", "VarcharsTest . assertByteCountFailure (  \" abc \"  ,     1  ,     (  -  1  )  ,     1  )  ;", "VarcharsTest . assertByteCountFailure (  \" abc \"  ,     1  ,     1  ,     (  -  1  )  )  ;", "VarcharsTest . assertByteCount (  \"  \u00a7\u00d1  \u00a7\u00d2  \u00a7\u00d3  \"  ,     0  ,     0  ,     1  ,     \"  \"  )  ;", "VarcharsTest . assertByteCount (  \"  \u00a7\u00d1  \u00a7\u00d2  \u00a7\u00d3  \"  ,     0  ,     1  ,     0  ,     \"  \"  )  ;", "VarcharsTest . assertByteCount (  \"  \u00a7\u00d1  \u00a7\u00d2  \u00a7\u00d3  \"  ,     0  ,     2  ,     1  ,     \"  \u00a7\u00d1  \"  )  ;", "VarcharsTest . assertByteCount (  \"  \u00a7\u00d1  \u00a7\u00d2  \u00a7\u00d3  \"  ,     0  ,     4  ,     1  ,     \"  \u00a7\u00d1  \"  )  ;", "VarcharsTest . assertByteCount (  \"  \u00a7\u00d1  \u00a7\u00d2  \u00a7\u00d3  \"  ,     0  ,     1  ,     1  ,    Slices . utf 8 Slice (  \"  \u00a7\u00d1  \"  )  . getBytes (  0  ,     1  )  )  ;", "VarcharsTest . assertByteCount (  \"  \u00a7\u00d1  \u00a7\u00d2  \u00a7\u00d3  \"  ,     2  ,     2  ,     2  ,     \"  \u00a7\u00d2  \"  )  ;", "VarcharsTest . assertByteCount (  \"  \u00a7\u00d1  \u00a7\u00d2  \u00a7\u00d3  \"  ,     2  ,     2  ,     0  ,     \"  \"  )  ;", "VarcharsTest . assertByteCount (  \"  \u00a7\u00d1  \u00a7\u00d2  \u00a7\u00d3  \"  ,     0  ,     3  ,     5  ,    Slices . utf 8 Slice (  \"  \u00a7\u00d1  \u00a7\u00d2  \"  )  . getBytes (  0  ,     3  )  )  ;", "VarcharsTest . assertByteCountFailure (  \"  \u00a7\u00d1  \u00a7\u00d2  \u00a7\u00d3  \"  ,     8  ,     5  ,     1  )  ;", "VarcharsTest . assertByteCount (  \"  \u00a7\u00d1  \u00a7\u00d2  \u00a7\u00d3  \"  ,     1  ,     1  ,     5  ,    Slices . utf 8 Slice (  \"  \u00a7\u00d1  \"  )  . getBytes (  1  ,     1  )  )  ;", "VarcharsTest . assertByteCount (  \"  \u00a7\u00d1  \u00a7\u00d2  \u00a7\u00d3  \"  ,     2  ,     1  ,     5  ,    Slices . utf 8 Slice (  \"  \u00a7\u00d2  \"  )  . getBytes (  0  ,     1  )  )  ;", "VarcharsTest . assertByteCount (  \"  \\ u 6  0  0  0  \\ u 6  0  0  1  \\ u 6  0  0  2  \\ u 6  0  0  3  \"  ,     0  ,     0  ,     2  ,     \"  \"  )  ;", "VarcharsTest . assertByteCount (  \"  \\ u 6  0  0  0  \\ u 6  0  0  1  \\ u 6  0  0  2  \\ u 6  0  0  3  \"  ,     0  ,     1  ,     1  ,    Slices . utf 8 Slice (  \"  \\ u 6  0  0  0  \"  )  . getBytes (  0  ,     1  )  )  ;", "VarcharsTest . assertByteCount (  \"  \\ u 6  0  0  0  \\ u 6  0  0  1  \\ u 6  0  0  2  \\ u 6  0  0  3  \"  ,     0  ,     2  ,     1  ,    Slices . utf 8 Slice (  \"  \\ u 6  0  0  0  \"  )  . getBytes (  0  ,     2  )  )  ;", "VarcharsTest . assertByteCount (  \"  \\ u 6  0  0  0  \\ u 6  0  0  1  \\ u 6  0  0  2  \\ u 6  0  0  3  \"  ,     0  ,     3  ,     1  ,     \"  \\ u 6  0  0  0  \"  )  ;", "VarcharsTest . assertByteCount (  \"  \\ u 6  0  0  0  \\ u 6  0  0  1  \\ u 6  0  0  2  \\ u 6  0  0  3  \"  ,     0  ,     6  ,     1  ,     \"  \\ u 6  0  0  0  \"  )  ;", "VarcharsTest . assertByteCount (  \"  \\ u 6  0  0  0  \\ u 6  0  0  1  \\ u 6  0  0  2  \\ u 6  0  0  3  \"  ,     6  ,     2  ,     4  ,    Slices . utf 8 Slice (  \"  \\ u 6  0  0  2  \"  )  . getBytes (  0  ,     2  )  )  ;", "VarcharsTest . assertByteCount (  \"  \\ u 6  0  0  0  \\ u 6  0  0  1  \\ u 6  0  0  2  \\ u 6  0  0  3  \"  ,     0  ,     1  2  ,     6  ,     \"  \\ u 6  0  0  0  \\ u 6  0  0  1  \\ u 6  0  0  2  \\ u 6  0  0  3  \"  )  ;", "VarcharsTest . assertByteCount (  \"  \\ u 6  0  0  0  \\ u 6  0  0  1  \\ u 6  0  0  2  \\ u 6  0  0  3  \"  ,     1  ,     6  ,     2  ,    Slices . utf 8 Slice (  \"  \\ u 6  0  0  0  \\ u 6  0  0  1  \\ u 6  0  0  2  \"  )  . getBytes (  1  ,     6  )  )  ;", "VarcharsTest . assertByteCount (  \"  \\ u 6  0  0  0  \\ u 6  0  0  1  \\ u 6  0  0  2  \\ u 6  0  0  3  \"  ,     2  ,     6  ,     2  ,    Slices . utf 8 Slice (  \"  \\ u 6  0  0  0  \\ u 6  0  0  1  \\ u 6  0  0  2  \"  )  . getBytes (  2  ,     6  )  )  ;", "VarcharsTest . assertByteCount (  \"  \\ u 6  0  0  0  \\ u 6  0  0  1  \\ u 6  0  0  2  \\ u 6  0  0  3  \"  ,     3  ,     6  ,     2  ,    Slices . utf 8 Slice (  \"  \\ u 6  0  0  0  \\ u 6  0  0  1  \\ u 6  0  0  2  \"  )  . getBytes (  3  ,     6  )  )  ;", "VarcharsTest . assertByteCountFailure (  \"  \\ u 6  0  0  0  \\ u 6  0  0  1  \\ u 6  0  0  2  \\ u 6  0  0  3  \"  ,     2  1  ,     0  ,     1  )  ;", "VarcharsTest . assertByteCount ( new   byte [  ]  {     (  ( byte )     (  1  2  9  )  )  ,     (  ( byte )     (  1  2  9  )  )  ,     (  ( byte )     (  1  2  9  )  )     }  ,     0  ,     2  ,     0  ,    new   byte [  ]  {        }  )  ;", "VarcharsTest . assertByteCount ( new   byte [  ]  {     (  ( byte )     (  1  2  9  )  )  ,     (  ( byte )     (  1  2  9  )  )  ,     (  ( byte )     (  1  2  9  )  )     }  ,     0  ,     2  ,     1  ,    new   byte [  ]  {     (  ( byte )     (  1  2  9  )  )  ,     (  ( byte )     (  1  2  9  )  )     }  )  ;", "VarcharsTest . assertByteCount ( new   byte [  ]  {     (  ( byte )     (  1  2  9  )  )  ,     (  ( byte )     (  1  2  9  )  )  ,     (  ( byte )     (  1  2  9  )  )     }  ,     0  ,     2  ,     3  ,    new   byte [  ]  {     (  ( byte )     (  1  2  9  )  )  ,     (  ( byte )     (  1  2  9  )  )     }  )  ;", "}", "METHOD_END"], "methodName": ["testByteCount"], "fileName": "com.facebook.presto.spi.type.VarcharsTest"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( Varchars . truncateToLength ( Slices . utf 8 Slice (  \" abc \"  )  ,     0  )  ,    Slices . utf 8 Slice (  \"  \"  )  )  ;", "assertEquals ( Varchars . truncateToLength ( Slices . utf 8 Slice (  \" abc \"  )  ,     1  )  ,    Slices . utf 8 Slice (  \" a \"  )  )  ;", "assertEquals ( Varchars . truncateToLength ( Slices . utf 8 Slice (  \" abc \"  )  ,     4  )  ,    Slices . utf 8 Slice (  \" abc \"  )  )  ;", "assertEquals ( Varchars . truncateToLength ( Slices . utf 8 Slice (  \" abcde \"  )  ,     5  )  ,    Slices . utf 8 Slice (  \" abcde \"  )  )  ;", "assertEquals ( Varchars . truncateToLength ( Slices . utf 8 Slice (  \"  \u00a7\u00d1  \u00a7\u00d2  \u00a7\u00d3  \"  )  ,     0  )  ,    Slices . utf 8 Slice (  \"  \"  )  )  ;", "assertEquals ( Varchars . truncateToLength ( Slices . utf 8 Slice (  \"  \u00a7\u00d1  \u00a7\u00d2  \u00a7\u00d3  \"  )  ,     1  )  ,    Slices . utf 8 Slice (  \"  \u00a7\u00d1  \"  )  )  ;", "assertEquals ( Varchars . truncateToLength ( Slices . utf 8 Slice (  \"  \u00a7\u00d1  \u00a7\u00d2  \u00a7\u00d3  \"  )  ,     4  )  ,    Slices . utf 8 Slice (  \"  \u00a7\u00d1  \u00a7\u00d2  \u00a7\u00d3  \"  )  )  ;", "assertEquals ( Varchars . truncateToLength ( Slices . utf 8 Slice (  \"  \u00a7\u00d1  \u00a7\u00d2  \u00a7\u00d3  \u00a7\u00d4  \u00a7\u00d5  \"  )  ,     5  )  ,    Slices . utf 8 Slice (  \"  \u00a7\u00d1  \u00a7\u00d2  \u00a7\u00d3  \u00a7\u00d4  \u00a7\u00d5  \"  )  )  ;", "assertEquals ( Varchars . truncateToLength ( Slices . utf 8 Slice (  \"  \\ ud 8  4  1  \\ udf 0 e \\ ud 8  4  1  \\ udf 3  1  \\ ud 8  4  1  \\ udf 7  9  \\ ud 8  4  3  \\ udc 5  3  \\ ud 8  4  3  \\ udc 7  8  \"  )  ,     0  )  ,    Slices . utf 8 Slice (  \"  \"  )  )  ;", "assertEquals ( Varchars . truncateToLength ( Slices . utf 8 Slice (  \"  \\ ud 8  4  1  \\ udf 0 e \\ ud 8  4  1  \\ udf 3  1  \\ ud 8  4  1  \\ udf 7  9  \\ ud 8  4  3  \\ udc 5  3  \\ ud 8  4  3  \\ udc 7  8  \"  )  ,     1  )  ,    Slices . utf 8 Slice (  \"  \\ ud 8  4  1  \\ udf 0 e \"  )  )  ;", "assertEquals ( Varchars . truncateToLength ( Slices . utf 8 Slice (  \"  \\ ud 8  4  1  \\ udf 0 e \\ ud 8  4  1  \\ udf 3  1  \\ ud 8  4  1  \\ udf 7  9  \"  )  ,     4  )  ,    Slices . utf 8 Slice (  \"  \\ ud 8  4  1  \\ udf 0 e \\ ud 8  4  1  \\ udf 3  1  \\ ud 8  4  1  \\ udf 7  9  \"  )  )  ;", "assertEquals ( Varchars . truncateToLength ( Slices . utf 8 Slice (  \"  \\ ud 8  4  1  \\ udf 0 e \\ ud 8  4  1  \\ udf 3  1  \\ ud 8  4  1  \\ udf 7  9  \\ ud 8  4  3  \\ udc 5  3  \\ ud 8  4  3  \\ udc 7  8  \"  )  ,     5  )  ,    Slices . utf 8 Slice (  \"  \\ ud 8  4  1  \\ udf 0 e \\ ud 8  4  1  \\ udf 3  1  \\ ud 8  4  1  \\ udf 7  9  \\ ud 8  4  3  \\ udc 5  3  \\ ud 8  4  3  \\ udc 7  8  \"  )  )  ;", "assertEquals ( Varchars . truncateToLength ( Slices . utf 8 Slice (  \" abc \"  )  ,    VarcharType . createVarcharType (  1  )  )  ,    Slices . utf 8 Slice (  \" a \"  )  )  ;", "assertEquals ( Varchars . truncateToLength ( Slices . utf 8 Slice (  \" abc \"  )  ,     (  ( Type )     ( VarcharType . createVarcharType (  1  )  )  )  )  ,    Slices . utf 8 Slice (  \" a \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testTruncateToLength"], "fileName": "com.facebook.presto.spi.type.VarcharsTest"}]