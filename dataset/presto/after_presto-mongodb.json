[{"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < MongoCredential >    builder    =    ImmutableList . builder (  )  ;", "for    ( String   userPass    :    userPasses )     {", "List < String >    values    =     . USER _ SPLITTER . splitToList ( userPass )  ;", "checkArgument (  (  ( values . size (  )  )     =  =     3  )  ,     \" Invalid   Credential   format .    Requires   user : password @ collection \"  )  ;", "builder . add ( createCredential ( values . get (  0  )  ,    values . get (  2  )  ,    values . get (  1  )  . toCharArray (  )  )  )  ;", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["buildCredentials"], "fileName": "com.facebook.presto.mongodb.MongoClientConfig"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < ServerAddress >    builder    =    ImmutableList . builder (  )  ;", "for    ( String   hostPort    :    hostPorts )     {", "List < String >    values    =     . PORT _ SPLITTER . splitToList ( hostPort )  ;", "checkArgument (  (  (  ( values . size (  )  )     =  =     1  )     |  |     (  ( values . size (  )  )     =  =     2  )  )  ,     \" Invalid   ServerAddress   format .    Requires   host [  : port ]  \"  )  ;", "try    {", "if    (  ( values . size (  )  )     =  =     1  )     {", "builder . add ( new   ServerAddress ( values . get (  0  )  )  )  ;", "} else    {", "builder . add ( new   ServerAddress ( values . get (  0  )  ,    Integer . parseInt ( values . get (  1  )  )  )  )  ;", "}", "}    catch    ( NumberFormatException   e )     {", "throw   e ;", "}", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["buildSeeds"], "fileName": "com.facebook.presto.mongodb.MongoClientConfig"}, {"methodBody": ["METHOD_START", "{", "return   connectionTimeout ;", "}", "METHOD_END"], "methodName": ["getConnectionTimeout"], "fileName": "com.facebook.presto.mongodb.MongoClientConfig"}, {"methodBody": ["METHOD_START", "{", "return   connectionsPerHost ;", "}", "METHOD_END"], "methodName": ["getConnectionsPerHost"], "fileName": "com.facebook.presto.mongodb.MongoClientConfig"}, {"methodBody": ["METHOD_START", "{", "return   credentials ;", "}", "METHOD_END"], "methodName": ["getCredentials"], "fileName": "com.facebook.presto.mongodb.MongoClientConfig"}, {"methodBody": ["METHOD_START", "{", "return   cursorBatchSize ;", "}", "METHOD_END"], "methodName": ["getCursorBatchSize"], "fileName": "com.facebook.presto.mongodb.MongoClientConfig"}, {"methodBody": ["METHOD_START", "{", "return   implicitRowFieldPrefix ;", "}", "METHOD_END"], "methodName": ["getImplicitRowFieldPrefix"], "fileName": "com.facebook.presto.mongodb.MongoClientConfig"}, {"methodBody": ["METHOD_START", "{", "return   maxWaitTime ;", "}", "METHOD_END"], "methodName": ["getMaxWaitTime"], "fileName": "com.facebook.presto.mongodb.MongoClientConfig"}, {"methodBody": ["METHOD_START", "{", "return   minConnectionsPerHost ;", "}", "METHOD_END"], "methodName": ["getMinConnectionsPerHost"], "fileName": "com.facebook.presto.mongodb.MongoClientConfig"}, {"methodBody": ["METHOD_START", "{", "return   readPreference ;", "}", "METHOD_END"], "methodName": ["getReadPreference"], "fileName": "com.facebook.presto.mongodb.MongoClientConfig"}, {"methodBody": ["METHOD_START", "{", "return   requiredReplicaSetName ;", "}", "METHOD_END"], "methodName": ["getRequiredReplicaSetName"], "fileName": "com.facebook.presto.mongodb.MongoClientConfig"}, {"methodBody": ["METHOD_START", "{", "return   schemaCollection ;", "}", "METHOD_END"], "methodName": ["getSchemaCollection"], "fileName": "com.facebook.presto.mongodb.MongoClientConfig"}, {"methodBody": ["METHOD_START", "{", "return   seeds ;", "}", "METHOD_END"], "methodName": ["getSeeds"], "fileName": "com.facebook.presto.mongodb.MongoClientConfig"}, {"methodBody": ["METHOD_START", "{", "return   socketKeepAlive ;", "}", "METHOD_END"], "methodName": ["getSocketKeepAlive"], "fileName": "com.facebook.presto.mongodb.MongoClientConfig"}, {"methodBody": ["METHOD_START", "{", "return   socketTimeout ;", "}", "METHOD_END"], "methodName": ["getSocketTimeout"], "fileName": "com.facebook.presto.mongodb.MongoClientConfig"}, {"methodBody": ["METHOD_START", "{", "return   this . sslEnabled ;", "}", "METHOD_END"], "methodName": ["getSslEnabled"], "fileName": "com.facebook.presto.mongodb.MongoClientConfig"}, {"methodBody": ["METHOD_START", "{", "return   writeConcern ;", "}", "METHOD_END"], "methodName": ["getWriteConcern"], "fileName": "com.facebook.presto.mongodb.MongoClientConfig"}, {"methodBody": ["METHOD_START", "{", "this . connectionTimeout    =    connectionTimeout ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setConnectionTimeout"], "fileName": "com.facebook.presto.mongodb.MongoClientConfig"}, {"methodBody": ["METHOD_START", "{", "this . connectionsPerHost    =    connectionsPerHost ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setConnectionsPerHost"], "fileName": "com.facebook.presto.mongodb.MongoClientConfig"}, {"methodBody": ["METHOD_START", "{", "this . credentials    =    buildCredentials ( MongoClientConfig . SPLITTER . split ( credentials )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setCredentials"], "fileName": "com.facebook.presto.mongodb.MongoClientConfig"}, {"methodBody": ["METHOD_START", "{", "this . credentials    =    buildCredentials ( Arrays . asList ( credentials )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setCredentials"], "fileName": "com.facebook.presto.mongodb.MongoClientConfig"}, {"methodBody": ["METHOD_START", "{", "this . cursorBatchSize    =    cursorBatchSize ;", "turn   this ;", "}", "METHOD_END"], "methodName": ["setCursorBatchSize"], "fileName": "com.facebook.presto.mongodb.MongoClientConfig"}, {"methodBody": ["METHOD_START", "{", "this . implicitRowFieldPrefix    =    implicitRowFieldPrefix ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setImplicitRowFieldPrefix"], "fileName": "com.facebook.presto.mongodb.MongoClientConfig"}, {"methodBody": ["METHOD_START", "{", "this . maxWaitTime    =    maxWaitTime ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setMaxWaitTime"], "fileName": "com.facebook.presto.mongodb.MongoClientConfig"}, {"methodBody": ["METHOD_START", "{", "this . minConnectionsPerHost    =    minConnectionsPerHost ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setMinConnectionsPerHost"], "fileName": "com.facebook.presto.mongodb.MongoClientConfig"}, {"methodBody": ["METHOD_START", "{", "this . readPreference    =    readPreference ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setReadPreference"], "fileName": "com.facebook.presto.mongodb.MongoClientConfig"}, {"methodBody": ["METHOD_START", "{", "this . requiredReplicaSetName    =    requiredReplicaSetName ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setRequiredReplicaSetName"], "fileName": "com.facebook.presto.mongodb.MongoClientConfig"}, {"methodBody": ["METHOD_START", "{", "this . schemaCollection    =    schemaCollection ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setSchemaCollection"], "fileName": "com.facebook.presto.mongodb.MongoClientConfig"}, {"methodBody": ["METHOD_START", "{", "this . seeds    =    buildSeeds ( MongoClientConfig . SPLITTER . split ( commaSeparatedList )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setSeeds"], "fileName": "com.facebook.presto.mongodb.MongoClientConfig"}, {"methodBody": ["METHOD_START", "{", "this . seeds    =    buildSeeds ( Arrays . asList ( seeds )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setSeeds"], "fileName": "com.facebook.presto.mongodb.MongoClientConfig"}, {"methodBody": ["METHOD_START", "{", "this . socketKeepAlive    =    socketKeepAlive ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setSocketKeepAlive"], "fileName": "com.facebook.presto.mongodb.MongoClientConfig"}, {"methodBody": ["METHOD_START", "{", "this . socketTimeout    =    socketTimeout ;", "turn   this ;", "}", "METHOD_END"], "methodName": ["setSocketTimeout"], "fileName": "com.facebook.presto.mongodb.MongoClientConfig"}, {"methodBody": ["METHOD_START", "{", "this . sslEnabled    =    sslEnabled ;", "turn   this ;", "}", "METHOD_END"], "methodName": ["setSslEnabled"], "fileName": "com.facebook.presto.mongodb.MongoClientConfig"}, {"methodBody": ["METHOD_START", "{", "this . writeConcern    =    writeConcern ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setWriteConcern"], "fileName": "com.facebook.presto.mongodb.MongoClientConfig"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( config ,     \" config   is   null \"  )  ;", "Options . Builder   options    =    Options . builder (  )  ;", "options . connectionsPerHost ( config . getConnectionsPerHost (  )  )  . connectTimeout ( config . getConnectionTimeout (  )  )  . socketTimeout ( config . getSocketTimeout (  )  )  . socketKeepAlive ( config . getSocketKeepAlive (  )  )  . sslEnabled ( config . getSslEnabled (  )  )  . maxWaitTime ( config . getMaxWaitTime (  )  )  . minConnectionsPerHost ( config . getMinConnectionsPerHost (  )  )  . readPreference ( config . getReadPreference (  )  . getReadPreference (  )  )  . writeConcern ( config . getWriteConcern (  )  . getWriteConcern (  )  )  ;", "if    (  ( config . getRequiredReplicaSetName (  )  )     !  =    null )     {", "options . requiredReplicaSetName ( config . getRequiredReplicaSetName (  )  )  ;", "}", "client    =    new    ( config . getSeeds (  )  ,    config . getCredentials (  )  ,    options . build (  )  )  ;", "return   new   MongoSession ( typeManager ,    client ,    config )  ;", "}", "METHOD_END"], "methodName": ["createMongoSession"], "fileName": "com.facebook.presto.mongodb.MongoClientModule"}, {"methodBody": ["METHOD_START", "{", "return   new   Document (  )  . append (  \" name \"  ,    name )  . append (  \" type \"  ,    type . getTypeSignature (  )  . toString (  )  )  . append (  \" hidden \"  ,    hidden )  ;", "}", "METHOD_END"], "methodName": ["getDocument"], "fileName": "com.facebook.presto.mongodb.MongoColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.mongodb.MongoColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.facebook.presto.mongodb.MongoColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   hidden ;", "}", "METHOD_END"], "methodName": ["isHidden"], "fileName": "com.facebook.presto.mongodb.MongoColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . spi . ColumnMetadata ( name ,    type ,    null ,    hidden )  ;", "}", "METHOD_END"], "methodName": ["toColumnMetadata"], "fileName": "com.facebook.presto.mongodb.MongoColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   MongoInsertTableHandle . class ;", "}", "METHOD_END"], "methodName": ["getInsertTableHandleClass"], "fileName": "com.facebook.presto.mongodb.MongoHandleResolver"}, {"methodBody": ["METHOD_START", "{", "return   MongoOutputTableHandle . class ;", "}", "METHOD_END"], "methodName": ["getOutputTableHandleClass"], "fileName": "com.facebook.presto.mongodb.MongoHandleResolver"}, {"methodBody": ["METHOD_START", "{", "return   MongoTableLayoutHandle . class ;", "}", "METHOD_END"], "methodName": ["getTableLayoutHandleClass"], "fileName": "com.facebook.presto.mongodb.MongoHandleResolver"}, {"methodBody": ["METHOD_START", "{", "return   keys ;", "}", "METHOD_END"], "methodName": ["getKeys"], "fileName": "com.facebook.presto.mongodb.MongoIndex"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.mongodb.MongoIndex"}, {"methodBody": ["METHOD_START", "{", "return   unique ;", "}", "METHOD_END"], "methodName": ["isUnique"], "fileName": "com.facebook.presto.mongodb.MongoIndex"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < MongoIndex >    builder    =    ImmutableList . builder (  )  ;", "for    ( Document   index    :    indexes )     {", "Document   key    =     (  ( Document )     ( index . get (  \" key \"  )  )  )  ;", "String   name    =    index . getString (  \" name \"  )  ;", "boolean   unique    =    index . getBoolean (  \" unique \"  ,    false )  ;", "if    ( key . containsKey (  \"  _ fts \"  )  )     {", "continue ;", "}", "builder . add ( new   MongoIndex ( name ,    MongoIndex . parseKey ( key )  ,    unique )  )  ;", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["parse"], "fileName": "com.facebook.presto.mongodb.MongoIndex"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < MongoIndex . MongodbIndexKey >    builder    =    ImmutableList . builder (  )  ;", "for    ( String   name    :    key . keySet (  )  )     {", "Object   value    =    key . get ( name )  ;", "if    ( value   instanceof   Number )     {", "int   order    =     (  ( Number )     ( value )  )  . intValue (  )  ;", "checkState (  (  ( order    =  =     1  )     |  |     ( order    =  =     (  -  1  )  )  )  ,     \" Unknown   index   sort   order \"  )  ;", "builder . add ( new   MongoIndex . MongodbIndexKey ( name ,     ( order    =  =     1     ?    SortOrder . ASC _ NULLS _ LAST    :    SortOrder . DESC _ NULLS _ LAST )  )  )  ;", "} else", "if    ( value   instanceof   String )     {", "builder . add ( new   MongoIndex . MongodbIndexKey ( name ,     (  ( String )     ( value )  )  )  )  ;", "} else    {", "throw   new   UnsupportedOperationException (  (  \" Unknown   index   type :     \"     +     ( value . toString (  )  )  )  )  ;", "}", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["parseKey"], "fileName": "com.facebook.presto.mongodb.MongoIndex"}, {"methodBody": ["METHOD_START", "{", "return   columns ;", "}", "METHOD_END"], "methodName": ["getColumns"], "fileName": "com.facebook.presto.mongodb.MongoInsertTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   schemaTableName ;", "}", "METHOD_END"], "methodName": ["getSchemaTableName"], "fileName": "com.facebook.presto.mongodb.MongoInsertTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   tableMetadata . getColumns (  )  . stream (  )  . map (  (    m )     -  >    new   MongoColumnHandle ( m . getName (  )  ,    m . getType (  )  ,    m . isHidden (  )  )  )  . collect ( Collectors . toList (  )  )  ;", "}", "METHOD_END"], "methodName": ["buildColumnHandles"], "fileName": "com.facebook.presto.mongodb.MongoMetadata"}, {"methodBody": ["METHOD_START", "{", "rollbackAction . set ( null )  ;", "}", "METHOD_END"], "methodName": ["clearRollback"], "fileName": "com.facebook.presto.mongodb.MongoMetadata"}, {"methodBody": ["METHOD_START", "{", "MongoTableHandle   tableHandle    =    mongoSession . getTable ( tableName )  . getTableHandle (  )  ;", "List < ColumnMetadata >    columns    =    ImmutableList . copyOf ( getColumnHandles ( session ,    tableHandle )  . values (  )  . stream (  )  . map ( MongoColumnHandle . class :  : cast )  . map ( MongoColumnHandle :  : toColumnMetadata )  . collect ( Collectors . toList (  )  )  )  ;", "return   new   spi . ConnectorTableMetadata ( tableName ,    columns )  ;", "}", "METHOD_END"], "methodName": ["getTableMetadata"], "fileName": "com.facebook.presto.mongodb.MongoMetadata"}, {"methodBody": ["METHOD_START", "{", "return    (  ( MongoTableHandle )     ( tableHandle )  )  . getSchemaTableName (  )  ;", "}", "METHOD_END"], "methodName": ["getTableName"], "fileName": "com.facebook.presto.mongodb.MongoMetadata"}, {"methodBody": ["METHOD_START", "{", "if    ( schemaNameOrNull    =  =    null )     {", "turn   listSchemaNames ( session )  ;", "}", "turn   ImmutableList . of ( schemaNameOrNull )  ;", "}", "METHOD_END"], "methodName": ["listSchemas"], "fileName": "com.facebook.presto.mongodb.MongoMetadata"}, {"methodBody": ["METHOD_START", "{", "if    (  ( prefix . getTableName (  )  )     =  =    null )     {", "return   listTables ( session ,    prefix . getSchemaName (  )  )  ;", "}", "return   ImmutableList . of ( new   spi . SchemaTableName ( prefix . getSchemaName (  )  ,    prefix . getTableName (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["listTables"], "fileName": "com.facebook.presto.mongodb.MongoMetadata"}, {"methodBody": ["METHOD_START", "{", "Optional . ofNullable ( rollbackAction . getAndSet ( null )  )  . ifPresent ( Runnable :  : run )  ;", "}", "METHOD_END"], "methodName": ["rollback"], "fileName": "com.facebook.presto.mongodb.MongoMetadata"}, {"methodBody": ["METHOD_START", "{", "checkState ( rollbackAction . compareAndSet ( null ,    action )  ,     \" rollback   action   is   already   set \"  )  ;", "}", "METHOD_END"], "methodName": ["setRollback"], "fileName": "com.facebook.presto.mongodb.MongoMetadata"}, {"methodBody": ["METHOD_START", "{", "return   columns ;", "}", "METHOD_END"], "methodName": ["getColumns"], "fileName": "com.facebook.presto.mongodb.MongoOutputTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   schemaTableName ;", "}", "METHOD_END"], "methodName": ["getSchemaTableName"], "fileName": "com.facebook.presto.mongodb.MongoOutputTableHandle"}, {"methodBody": ["METHOD_START", "{", "if    ( block . isNull ( position )  )     {", "if    ( type . equals ( ObjectIdType . OBJECT _ ID )  )     {", "return   new   ObjectId (  )  ;", "}", "return   null ;", "}", "if    ( type . equals ( ObjectIdType . OBJECT _ ID )  )     {", "return   new   ObjectId ( block . getSlice ( position ,     0  ,    block . getSliceLength ( position )  )  . getBytes (  )  )  ;", "}", "if    ( type . equals ( BOOLEAN )  )     {", "return   type . getBoolean ( block ,    position )  ;", "}", "if    ( type . equals ( BIGINT )  )     {", "return   type . getLong ( block ,    position )  ;", "}", "if    ( type . equals ( INTEGER )  )     {", "return    (  ( int )     ( type . getLong ( block ,    position )  )  )  ;", "}", "if    ( type . equals ( SMALLINT )  )     {", "return    (  ( short )     ( type . getLong ( block ,    position )  )  )  ;", "}", "if    ( type . equals ( TINYINT )  )     {", "return    (  ( byte )     ( type . getLong ( block ,    position )  )  )  ;", "}", "if    ( type . equals ( DOUBLE )  )     {", "return   type . getDouble ( block ,    position )  ;", "}", "if    ( isVarcharType ( type )  )     {", "return   type . getSlice ( block ,    position )  . toStringUtf 8  (  )  ;", "}", "if    ( type . equals ( VARBINARY )  )     {", "return   new   Binary ( type . getSlice ( block ,    position )  . getBytes (  )  )  ;", "}", "if    ( type . equals ( DATE )  )     {", "long   days    =    type . getLong ( block ,    position )  ;", "return   new   Date ( TimeUnit . DAYS . toMillis ( days )  )  ;", "}", "if    ( type . equals ( TIME )  )     {", "long   millisUtc    =    type . getLong ( block ,    position )  ;", "return   new   Date ( millisUtc )  ;", "}", "if    ( type . equals ( TIMESTAMP )  )     {", "long   millisUtc    =    type . getLong ( block ,    position )  ;", "return   new   Date ( millisUtc )  ;", "}", "if    ( type . equals ( TIMESTAMP _ WITH _ TIME _ ZONE )  )     {", "long   millisUtc    =    unpackMillisUtc ( type . getLong ( block ,    position )  )  ;", "return   new   Date ( millisUtc )  ;", "}", "if    ( type   instanceof   DecimalType )     {", "DecimalType   decimalType    =     (  ( DecimalType )     ( type )  )  ;", "BigInteger   unscaledValue ;", "if    ( decimalType . isShort (  )  )     {", "unscaledValue    =    BigInteger . valueOf ( decimalType . getLong ( block ,    position )  )  ;", "} else    {", "unscaledValue    =    Decimals . decodeUnscaledValue ( decimalType . getSlice ( block ,    position )  )  ;", "}", "return   new   BigDecimal ( unscaledValue )  ;", "}", "if    ( TypeUtils . isArrayType ( type )  )     {", "Type   elementType    =    type . getTypeParameters (  )  . get (  0  )  ;", "Block   arrayBlock    =    block . getObject ( position ,    Block . class )  ;", "List < Object >    list    =    new   ArrayList ( arrayBlock . getPositionCount (  )  )  ;", "for    ( int   i    =     0  ;    i    <     ( arrayBlock . getPositionCount (  )  )  ;    i +  +  )     {", "Object   element    =    getObjectValue ( elementType ,    arrayBlock ,    i )  ;", "list . add ( element )  ;", "}", "return   Collections . unmodifiableList ( list )  ;", "}", "if    ( TypeUtils . isMapType ( type )  )     {", "Type   keyType    =    type . getTypeParameters (  )  . get (  0  )  ;", "Type   valueType    =    type . getTypeParameters (  )  . get (  1  )  ;", "Block   mapBlock    =    block . getObject ( position ,    Block . class )  ;", "List < Object >    values    =    new   ArrayList (  (  ( mapBlock . getPositionCount (  )  )     /     2  )  )  ;", "for    ( int   i    =     0  ;    i    <     ( mapBlock . getPositionCount (  )  )  ;    i    +  =     2  )     {", "Map < String ,    Object >    mapValue    =    new   HashMap <  >  (  )  ;", "mapValue . put (  \" key \"  ,    getObjectValue ( keyType ,    mapBlock ,    i )  )  ;", "mapValue . put (  \" value \"  ,    getObjectValue ( valueType ,    mapBlock ,     ( i    +     1  )  )  )  ;", "values . add ( mapValue )  ;", "}", "return   Collections . unmodifiableList ( values )  ;", "}", "if    ( TypeUtils . isRowType ( type )  )     {", "Block   rowBlock    =    block . getObject ( position ,    Block . class )  ;", "List < Type >    fieldTypes    =    type . getTypeParameters (  )  ;", "if    (  ( fieldTypes . size (  )  )     !  =     ( rowBlock . getPositionCount (  )  )  )     {", "throw   new   spi . PrestoException ( StandardErrorCode . GENERIC _ INTERNAL _ ERROR ,     \" Expected   row   value   field   count   does   not   match   type   field   count \"  )  ;", "}", "if    ( isImplicitRowType ( type )  )     {", "List < Object >    rowValue    =    new   ArrayList <  >  (  )  ;", "for    ( int   i    =     0  ;    i    <     ( rowBlock . getPositionCount (  )  )  ;    i +  +  )     {", "Object   element    =    getObjectValue ( fieldTypes . get ( i )  ,    rowBlock ,    i )  ;", "rowValue . add ( element )  ;", "}", "return   Collections . unmodifiableList ( rowValue )  ;", "}", "Map < String ,    Object >    rowValue    =    new   HashMap <  >  (  )  ;", "for    ( int   i    =     0  ;    i    <     ( rowBlock . getPositionCount (  )  )  ;    i +  +  )     {", "rowValue . put ( type . getTypeSignature (  )  . getParameters (  )  . get ( i )  . getNamedTypeSignature (  )  . getName (  )  . orElse (  (  \" field \"     +    i )  )  ,    getObjectValue ( fieldTypes . get ( i )  ,    rowBlock ,    i )  )  ;", "}", "return   Collections . unmodifiableMap ( rowValue )  ;", "}", "throw   new   spi . PrestoException ( NOT _ SUPPORTED ,     (  \" unsupported   type :     \"     +    type )  )  ;", "}", "METHOD_END"], "methodName": ["getObjectValue"], "fileName": "com.facebook.presto.mongodb.MongoPageSink"}, {"methodBody": ["METHOD_START", "{", "return   type . getTypeSignature (  )  . getParameters (  )  . stream (  )  . map ( TypeSignatureParameter :  : getNamedTypeSignature )  . map ( NamedTypeSignature :  : getName )  . filter ( Optional :  : isPresent )  . map ( Optional :  : get )  . allMatch (  (    name )     -  >    name . startsWith ( implicitPrefix )  )  ;", "}", "METHOD_END"], "methodName": ["isImplicitRowType"], "fileName": "com.facebook.presto.mongodb.MongoPageSink"}, {"methodBody": ["METHOD_START", "{", "if    ( value    =  =    null )     {", "output . appendNull (  )  ;", "return ;", "}", "Class <  ?  >    javaType    =    type . getJavaType (  )  ;", "try    {", "if    ( javaType    =  =     ( boolean . class )  )     {", "type . writeBoolean ( output ,     (  ( Boolean )     ( value )  )  )  ;", "} else", "if    ( javaType    =  =     ( long . class )  )     {", "if    ( type . equals ( BIGINT )  )     {", "type . writeLong ( output ,     (  ( Number )     ( value )  )  . longValue (  )  )  ;", "} else", "if    ( type . equals ( INTEGER )  )     {", "type . writeLong ( output ,     (  ( Number )     ( value )  )  . intValue (  )  )  ;", "} else", "if    ( type . equals ( DATE )  )     {", "long   utcMillis    =     (  ( Date )     ( value )  )  . getTime (  )  ;", "type . writeLong ( output ,    toDays ( utcMillis )  )  ;", "} else", "if    ( type . equals ( TIME )  )     {", "type . writeLong ( output ,    MongoPageSource . UTC _ CHRONOLOGY . millisOfDay (  )  . get (  (  ( Date )     ( value )  )  . getTime (  )  )  )  ;", "} else", "if    ( type . equals ( TIMESTAMP )  )     {", "type . writeLong ( output ,     (  ( Date )     ( value )  )  . getTime (  )  )  ;", "} else    {", "throw   new   spi . PrestoException ( GENERIC _ INTERNAL _ ERROR ,     (  (  (  \" Unhandled   type   for    \"     +     ( getSimpleName (  )  )  )     +     \"  :  \"  )     +     ( type . getTypeSignature (  )  )  )  )  ;", "}", "} else", "if    ( javaType    =  =     ( double . class )  )     {", "type . writeDouble ( output ,     (  ( Number )     ( value )  )  . doubleValue (  )  )  ;", "} else", "if    ( javaType    =  =     ( io . airlift . slice . Slice . class )  )     {", "writeSlice ( output ,    type ,    value )  ;", "} else", "if    ( javaType    =  =     ( spi . block . Block . class )  )     {", "writeBlock ( output ,    type ,    value )  ;", "} else    {", "throw   new   spi . PrestoException ( GENERIC _ INTERNAL _ ERROR ,     (  (  (  \" Unhandled   type   for    \"     +     ( getSimpleName (  )  )  )     +     \"  :  \"  )     +     ( type . getTypeSignature (  )  )  )  )  ;", "}", "}    catch    ( ClassCastException   ignore )     {", "output . appendNull (  )  ;", "}", "}", "METHOD_END"], "methodName": ["appendTo"], "fileName": "com.facebook.presto.mongodb.MongoPageSource"}, {"methodBody": ["METHOD_START", "{", "if    ( value   instanceof   Collection <  ?  >  )     {", "return    (  \"  [  \"     +     ( String . join (  \"  ,     \"  ,     (  ( Collection <  ?  >  )     ( value )  )  . stream (  )  . map ( this :  : toVarcharValue )  . collect ( Collectors . toList (  )  )  )  )  )     +     \"  ]  \"  ;", "}", "if    ( value   instanceof   Document )     {", "return    (  ( Document )     ( value )  )  . toJson (  )  ;", "}", "return   String . valueOf ( value )  ;", "}", "METHOD_END"], "methodName": ["toVarcharValue"], "fileName": "com.facebook.presto.mongodb.MongoPageSource"}, {"methodBody": ["METHOD_START", "{", "if    ( TypeUtils . isArrayType ( type )  )     {", "if    ( value   instanceof   List <  ?  >  )     {", "BlockBuilder   builder    =    output . beginBlockEntry (  )  ;", "(  ( List <  ?  >  )     ( value )  )  . forEach (  (    element )     -  >    appendTo ( type . getTypeParameters (  )  . get (  0  )  ,    element ,    builder )  )  ;", "output . closeEntry (  )  ;", "return ;", "}", "} else", "if    ( TypeUtils . isMapType ( type )  )     {", "if    ( value   instanceof   List <  ?  >  )     {", "BlockBuilder   builder    =    output . beginBlockEntry (  )  ;", "for    ( Object   element    :     (  ( List <  ?  >  )     ( value )  )  )     {", "if    (  !  ( element   instanceof   Map <  ?  ,     ?  >  )  )     {", "continue ;", "}", "Map <  ?  ,     ?  >    document    =     (  ( Map <  ?  ,     ?  >  )     ( element )  )  ;", "if    (  ( document . containsKey (  \" key \"  )  )     &  &     ( document . containsKey (  \" value \"  )  )  )     {", "appendTo ( type . getTypeParameters (  )  . get (  0  )  ,    document . get (  \" key \"  )  ,    builder )  ;", "appendTo ( type . getTypeParameters (  )  . get (  1  )  ,    document . get (  \" value \"  )  ,    builder )  ;", "}", "}", "output . closeEntry (  )  ;", "return ;", "} else", "if    ( value   instanceof   Map )     {", "BlockBuilder   builder    =    output . beginBlockEntry (  )  ;", "Map <  ?  ,     ?  >    document    =     (  ( Map <  ?  ,     ?  >  )     ( value )  )  ;", "for    ( Entry <  ?  ,     ?  >    entry    :    document . entrySet (  )  )     {", "appendTo ( type . getTypeParameters (  )  . get (  0  )  ,    entry . getKey (  )  ,    builder )  ;", "appendTo ( type . getTypeParameters (  )  . get (  1  )  ,    entry . getValue (  )  ,    builder )  ;", "}", "output . closeEntry (  )  ;", "return ;", "}", "} else", "if    ( TypeUtils . isRowType ( type )  )     {", "if    ( value   instanceof   Map )     {", "Map <  ?  ,     ?  >    mapValue    =     (  ( Map <  ?  ,     ?  >  )     ( value )  )  ;", "BlockBuilder   builder    =    output . beginBlockEntry (  )  ;", "List < String >    fieldNames    =    new   ArrayList <  >  (  )  ;", "for    ( int   i    =     0  ;    i    <     ( type . getTypeSignature (  )  . getParameters (  )  . size (  )  )  ;    i +  +  )     {", "spi . type . TypeSignatureParameter   parameter    =    type . getTypeSignature (  )  . getParameters (  )  . get ( i )  ;", "fieldNames . add ( parameter . getNamedTypeSignature (  )  . getName (  )  . orElse (  (  \" field \"     +    i )  )  )  ;", "}", "checkState (  (  ( fieldNames . size (  )  )     =  =     ( type . getTypeParameters (  )  . size (  )  )  )  ,     \" fieldName   doesn ' t   match   with   type   size    :     % s \"  ,    type )  ;", "for    ( int   index    =     0  ;    index    <     ( type . getTypeParameters (  )  . size (  )  )  ;    index +  +  )     {", "appendTo ( type . getTypeParameters (  )  . get ( index )  ,    mapValue . get ( fieldNames . get ( index )  )  ,    builder )  ;", "}", "output . closeEntry (  )  ;", "return ;", "} else", "if    ( value   instanceof   List <  ?  >  )     {", "List <  ?  >    listValue    =     (  ( List <  ?  >  )     ( value )  )  ;", "BlockBuilder   builder    =    output . beginBlockEntry (  )  ;", "for    ( int   index    =     0  ;    index    <     ( type . getTypeParameters (  )  . size (  )  )  ;    index +  +  )     {", "if    ( index    <     ( listValue . size (  )  )  )     {", "appendTo ( type . getTypeParameters (  )  . get ( index )  ,    listValue . get ( index )  ,    builder )  ;", "} else    {", "builder . appendNull (  )  ;", "}", "}", "output . closeEntry (  )  ;", "return ;", "}", "} else    {", "throw   new   spi . PrestoException ( GENERIC _ INTERNAL _ ERROR ,     (  \" Unhandled   type   for   Block :     \"     +     ( type . getTypeSignature (  )  )  )  )  ;", "}", "output . appendNull (  )  ;", "}", "METHOD_END"], "methodName": ["writeBlock"], "fileName": "com.facebook.presto.mongodb.MongoPageSource"}, {"methodBody": ["METHOD_START", "{", "String   base    =    type . getTypeSignature (  )  . getBase (  )  ;", "if    ( base . equals ( VARCHAR )  )     {", "type . writeSlice ( output ,    utf 8 Slice ( toVarcharValue ( value )  )  )  ;", "} else", "if    ( type . equals ( ObjectIdType . OBJECT _ ID )  )     {", "type . writeSlice ( output ,    wrappedBuffer (  (  ( ObjectId )     ( value )  )  . toByteArray (  )  )  )  ;", "} else", "if    ( type . equals ( VARBINARY )  )     {", "if    ( value   instanceof   Binary )     {", "type . writeSlice ( output ,    wrappedBuffer (  (  ( Binary )     ( value )  )  . getData (  )  )  )  ;", "} else    {", "output . appendNull (  )  ;", "}", "} else    {", "throw   new   spi . PrestoException ( GENERIC _ INTERNAL _ ERROR ,     (  \" Unhandled   type   for   Slice :     \"     +     ( type . getTypeSignature (  )  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["writeSlice"], "fileName": "com.facebook.presto.mongodb.MongoPageSource"}, {"methodBody": ["METHOD_START", "{", "return   MongoQueryRunner . createMongoQueryRunner ( ImmutableList . copyOf ( tables )  )  ;", "}", "METHOD_END"], "methodName": ["createMongoQueryRunner"], "fileName": "com.facebook.presto.mongodb.MongoQueryRunner"}, {"methodBody": ["METHOD_START", "{", "MongoQueryRunner   queryRunner    =    null ;", "try    {", "queryRunner    =    new   MongoQueryRunner ( MongoQueryRunner . createSession (  )  ,     3  )  ;", "queryRunner . installPlugin ( new   TpchPlugin (  )  )  ;", "queryRunner . createCatalog (  \" tpch \"  ,     \" tpch \"  )  ;", "Map < String ,    String >    properties    =    ImmutableMap . of (  \" mongodb . seeds \"  ,     (  (  ( queryRunner . getAddress (  )  . getHostString (  )  )     +     \"  :  \"  )     +     ( queryRunner . getAddress (  )  . getPort (  )  )  )  ,     \" mongodb . socket - keep - alive \"  ,     \" true \"  )  ;", "queryRunner . installPlugin ( new   MongoPlugin (  )  )  ;", "queryRunner . createCatalog (  \" mongodb \"  ,     \" mongodb \"  ,    properties )  ;", "copyTpchTables ( queryRunner ,     \" tpch \"  ,    TINY _ SCHEMA _ NAME ,    MongoQueryRunner . createSession (  )  ,    tables )  ;", "return   queryRunner ;", "}    catch    ( Throwable   e )     {", "Closeables . closeAllSuppress ( e ,    queryRunner )  ;", "throw   e ;", "}", "}", "METHOD_END"], "methodName": ["createMongoQueryRunner"], "fileName": "com.facebook.presto.mongodb.MongoQueryRunner"}, {"methodBody": ["METHOD_START", "{", "return   testSessionBuilder (  )  . setCatalog (  \" mongodb \"  )  . setSchema ( MongoQueryRunner . TPCH _ SCHEMA )  . setTimeZoneKey ( UTC _ KEY )  . setLocale ( Locale . ENGLISH )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["createSession"], "fileName": "com.facebook.presto.mongodb.MongoQueryRunner"}, {"methodBody": ["METHOD_START", "{", "return   address ;", "}", "METHOD_END"], "methodName": ["getAddress"], "fileName": "com.facebook.presto.mongodb.MongoQueryRunner"}, {"methodBody": ["METHOD_START", "{", "return   client ;", "}", "METHOD_END"], "methodName": ["getMongoClient"], "fileName": "com.facebook.presto.mongodb.MongoQueryRunner"}, {"methodBody": ["METHOD_START", "{", "close (  )  ;", "client . close (  )  ;", "sv . shutdown (  )  ;", "}", "METHOD_END"], "methodName": ["shutdown"], "fileName": "com.facebook.presto.mongodb.MongoQueryRunner"}, {"methodBody": ["METHOD_START", "{", "String   name    =    columnMeta . getString ( MongoSession . FIELDS _ NAME _ KEY )  ;", "String   typeString    =    columnMeta . getString ( MongoSession . FIELDS _ TYPE _ KEY )  ;", "boolean   hidden    =    columnMeta . getBoolean ( MongoSession . FIELDS _ HIDDEN _ KEY ,    false )  ;", "Type   type    =    typeManager . getType ( TypeSignature . parseTypeSignature ( typeString )  )  ;", "return   new   MongoColumnHandle ( name ,    type ,    hidden )  ;", "}", "METHOD_END"], "methodName": ["buildColumnHandle"], "fileName": "com.facebook.presto.mongodb.MongoSession"}, {"methodBody": ["METHOD_START", "{", "String   name    =    column . getName (  )  ;", "Type   type    =    column . getType (  )  ;", "if    (  ( domain . getValues (  )  . isNone (  )  )     &  &     ( domain . isNullAllowed (  )  )  )     {", "return    . documentOf ( name ,     . isNullPredicate (  )  )  ;", "}", "if    (  ( domain . getValues (  )  . isAll (  )  )     &  &     (  !  ( domain . isNullAllowed (  )  )  )  )     {", "return    . documentOf ( name ,     . isNotNullPredicate (  )  )  ;", "}", "List < Object >    singleValues    =    new   ArrayList <  >  (  )  ;", "List < Document >    disjuncts    =    new   ArrayList <  >  (  )  ;", "for    ( Range   range    :    domain . getValues (  )  . getRanges (  )  . getOrderedRanges (  )  )     {", "if    ( range . isSingleValue (  )  )     {", "singleValues . add (  . translateValue ( range . getSingleValue (  )  ,    type )  )  ;", "} else    {", "Document   rangeConjuncts    =    new   Document (  )  ;", "if    (  !  ( range . getLow (  )  . isLowerUnbounded (  )  )  )     {", "switch    ( range . getLow (  )  . getBound (  )  )     {", "case   ABOVE    :", "rangeConjuncts . put (  . GT _ OP ,     . translateValue ( range . getLow (  )  . getValue (  )  ,    type )  )  ;", "break ;", "case   EXACTLY    :", "rangeConjuncts . put (  . GTE _ OP ,     . translateValue ( range . getLow (  )  . getValue (  )  ,    type )  )  ;", "break ;", "case   BELOW    :", "throw   new   IllegalArgumentException (  (  \" Low   Marker   should   never   use   BELOW   bound :     \"     +    range )  )  ;", "default    :", "throw   new   AssertionError (  (  \" Unhandled   bound :     \"     +     ( range . getLow (  )  . getBound (  )  )  )  )  ;", "}", "}", "if    (  !  ( range . getHigh (  )  . isUpperUnbounded (  )  )  )     {", "switch    ( range . getHigh (  )  . getBound (  )  )     {", "case   ABOVE    :", "throw   new   IllegalArgumentException (  (  \" High   Marker   should   never   use   ABOVE   bound :     \"     +    range )  )  ;", "case   EXACTLY    :", "rangeConjuncts . put (  . LTE _ OP ,     . translateValue ( range . getHigh (  )  . getValue (  )  ,    type )  )  ;", "break ;", "case   BELOW    :", "rangeConjuncts . put (  . LT _ OP ,     . translateValue ( range . getHigh (  )  . getValue (  )  ,    type )  )  ;", "break ;", "default    :", "throw   new   AssertionError (  (  \" Unhandled   bound :     \"     +     ( range . getHigh (  )  . getBound (  )  )  )  )  ;", "}", "}", "verify (  (  !  ( rangeConjuncts . isEmpty (  )  )  )  )  ;", "disjuncts . add ( rangeConjuncts )  ;", "}", "}", "if    (  ( singleValues . size (  )  )     =  =     1  )     {", "disjuncts . add (  . documentOf (  . EQ _ OP ,    singleValues . get (  0  )  )  )  ;", "} else", "if    (  ( singleValues . size (  )  )     >     1  )     {", "disjuncts . add (  . documentOf (  . IN _ OP ,    singleValues )  )  ;", "}", "if    ( domain . isNullAllowed (  )  )     {", "disjuncts . add (  . isNullPredicate (  )  )  ;", "}", "return    . orPredicate ( disjuncts . stream (  )  . map (  (    disjunct )     -  >    new   Document ( name ,    disjunct )  )  . collect ( Collectors . toList (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["buildPredicate"], "fileName": "com.facebook.presto.mongodb.MongoSession"}, {"methodBody": ["METHOD_START", "{", "Document   query    =    new   Document (  )  ;", "if    ( tupleDomain . getDomains (  )  . isPresent (  )  )     {", "for    ( Map . Entry < ColumnHandle ,    Domain >    entry    :    tupleDomain . getDomains (  )  . get (  )  . entrySet (  )  )     {", "MongoColumnHandle   column    =     (  ( MongoColumnHandle )     ( entry . getKey (  )  )  )  ;", "query . putAll (  . buildPredicate ( column ,    entry . getValue (  )  )  )  ;", "}", "}", "return   query ;", "}", "METHOD_END"], "methodName": ["buildQuery"], "fileName": "com.facebook.presto.mongodb.MongoSession"}, {"methodBody": ["METHOD_START", "{", "for    ( String   name    :    db . listCollectionNames (  )  )     {", "if    ( name . equalsIgnoreCase ( collectionName )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["collectionExists"], "fileName": "com.facebook.presto.mongodb.MongoSession"}, {"methodBody": ["METHOD_START", "{", "createTableMetadata ( name ,    columns )  ;", "}", "METHOD_END"], "methodName": ["createTable"], "fileName": "com.facebook.presto.mongodb.MongoSession"}, {"methodBody": ["METHOD_START", "{", "String   schemaName    =    schemaTableName . getSchemaName (  )  ;", "String   tableName    =    schemaTableName . getTableName (  )  ;", "MongoDatabase   db    =    client . getDatabase ( schemaName )  ;", "Document   metadata    =    new   Document (  . TABLE _ NAME _ KEY ,    tableName )  ;", "ArrayList < Document >    fields    =    new   ArrayList <  >  (  )  ;", "if    (  !  ( columns . stream (  )  . anyMatch (  (    c )     -  >    c . getName (  )  . equals (  \"  _ id \"  )  )  )  )     {", "fields . add ( new   MongoColumnHandle (  \"  _ id \"  ,    ObjectIdType . OBJECT _ ID ,    true )  . getDocument (  )  )  ;", "}", "fields . addAll ( columns . stream (  )  . map ( MongoColumnHandle :  : getDocument )  . collect ( Collectors . toList (  )  )  )  ;", "metadata . append (  . FIELDS _ KEY ,    fields )  ;", "MongoCollection < Document >    schema    =    db . getCollection ( schemaCollection )  ;", "schema . createIndex ( new   Document (  . TABLE _ NAME _ KEY ,     1  )  ,    new   IndexOptions (  )  . unique ( true )  )  ;", "schema . insertOne ( metadata )  ;", "}", "METHOD_END"], "methodName": ["createTableMetadata"], "fileName": "com.facebook.presto.mongodb.MongoSession"}, {"methodBody": ["METHOD_START", "{", "String   schemaName    =    schemaTableName . getSchemaName (  )  ;", "String   tableName    =    schemaTableName . getTableName (  )  ;", "MongoDatabase   db    =    client . getDatabase ( schemaName )  ;", "if    (  !  ( collectionExists ( db ,    tableName )  )  )     {", "return   false ;", "}", "DeleteResult   result    =    db . getCollection ( schemaCollection )  . deleteOne ( new   Document (  . TABLE _ NAME _ KEY ,    tableName )  )  ;", "return    ( result . getDeletedCount (  )  )     =  =     1  ;", "}", "METHOD_END"], "methodName": ["deleteTableMetadata"], "fileName": "com.facebook.presto.mongodb.MongoSession"}, {"methodBody": ["METHOD_START", "{", "return   new   Document ( key ,    value )  ;", "}", "METHOD_END"], "methodName": ["documentOf"], "fileName": "com.facebook.presto.mongodb.MongoSession"}, {"methodBody": ["METHOD_START", "{", "deleteTableMetadata ( tableName )  ;", "getCollect ( tableName )  . drop (  )  ;", "tableCache . invalidate ( tableName )  ;", "}", "METHOD_END"], "methodName": ["dropTable"], "fileName": "com.facebook.presto.mongodb.MongoSession"}, {"methodBody": ["METHOD_START", "{", "Document   output    =    new   Document (  )  ;", "for    ( MongoColumnHandle   column    :    columns )     {", "output . append ( column . getName (  )  ,     1  )  ;", "}", "MongoCollection < Document >    collection    =    getCollection ( split . getSchemaTableName (  )  )  ;", "FindIterable < Document >    iterable    =    collection . find (  . buildQuery ( split . getTupleDomain (  )  )  )  . projection ( output )  ;", "if    (  ( cursorBatchSize )     !  =     0  )     {", "iterable . batchSize ( cursorBatchSize )  ;", "}", "return   iterable . iterator (  )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "com.facebook.presto.mongodb.MongoSession"}, {"methodBody": ["METHOD_START", "{", "return   ImmutableList . copyOf ( client . listDatabaseNames (  )  )  ;", "}", "METHOD_END"], "methodName": ["getAllSchemas"], "fileName": "com.facebook.presto.mongodb.MongoSession"}, {"methodBody": ["METHOD_START", "{", "ImmutableSet . Builder < String >    builder    =    ImmutableSet . builder (  )  ;", "builder . addAll ( ImmutableList . copyOf ( client . getDatabase ( schema )  . listCollectionNames (  )  )  . stream (  )  . filter (  (    name )     -  >     !  ( name . equals ( schemaCollection )  )  )  . filter (  (    name )     -  >     !  (  . SYSTEM _ TABLES . contains ( name )  )  )  . collect ( Collectors . toSet (  )  )  )  ;", "builder . addAll ( getTableMetadataNames ( schema )  )  ;", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["getAllTables"], "fileName": "com.facebook.presto.mongodb.MongoSession"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   cache . get ( key )  ;", "}    catch    ( ExecutExcept    |    UncheckedExecutExcept   e )     {", "Throwable   t    =    e . getCause (  )  ;", "if    ( t    !  =    null )     {", "throwIfInstanceOf ( t ,    exceptClass )  ;", "}", "throw   Throwables . propagate ( t )  ;", "}", "}", "METHOD_END"], "methodName": ["getCacheValue"], "fileName": "com.facebook.presto.mongodb.MongoSession"}, {"methodBody": ["METHOD_START", "{", "return   getCollection ( tableName . getSchemaName (  )  ,    tableName . getTableName (  )  )  ;", "}", "METHOD_END"], "methodName": ["getCollection"], "fileName": "com.facebook.presto.mongodb.MongoSession"}, {"methodBody": ["METHOD_START", "{", "return   client . getDatabase ( schema )  . getCollection ( table )  ;", "}", "METHOD_END"], "methodName": ["getCollection"], "fileName": "com.facebook.presto.mongodb.MongoSession"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( doc . containsKey ( MongoSession . FIELDS _ KEY )  )  )     {", "return   ImmutableList . of (  )  ;", "}", "return    (  ( List < Document >  )     ( doc . get ( MongoSession . FIELDS _ KEY )  )  )  ;", "}", "METHOD_END"], "methodName": ["getColumnMetadata"], "fileName": "com.facebook.presto.mongodb.MongoSession"}, {"methodBody": ["METHOD_START", "{", "return   MongoIndex . parse ( getCollection ( tableName )  . listIndexes (  )  )  ;", "}", "METHOD_END"], "methodName": ["getIndexes"], "fileName": "com.facebook.presto.mongodb.MongoSession"}, {"methodBody": ["METHOD_START", "{", "return   MongoSession . getCacheValue ( tableCache ,    tableName ,    TableNotFoundException . class )  ;", "}", "METHOD_END"], "methodName": ["getTable"], "fileName": "com.facebook.presto.mongodb.MongoSession"}, {"methodBody": ["METHOD_START", "{", "String   schemaName    =    schemaTableName . getSchemaName (  )  ;", "String   tableName    =    schemaTableName . getTableName (  )  ;", "MongoDatabase   db    =    client . getDatabase ( schemaName )  ;", "MongoCollection < Document >    schema    =    db . getCollection ( schemaCollection )  ;", "Document   doc    =    schema . find ( new   Document ( MongoSession . TABLE _ NAME _ KEY ,    tableName )  )  . first (  )  ;", "if    ( doc    =  =    null )     {", "if    (  !  ( collectionExists ( db ,    tableName )  )  )     {", "throw   new   spi . TableNotFoundException ( schemaTableName )  ;", "} else    {", "Document   metadata    =    new   Document ( MongoSession . TABLE _ NAME _ KEY ,    tableName )  ;", "metadata . append ( MongoSession . FIELDS _ KEY ,    guessTableFields ( schemaTableName )  )  ;", "schema . createIndex ( new   Document ( MongoSession . TABLE _ NAME _ KEY ,     1  )  ,    new   IndexOptions (  )  . unique ( true )  )  ;", "schema . insertOne ( metadata )  ;", "return   metadata ;", "}", "}", "return   doc ;", "}", "METHOD_END"], "methodName": ["getTableMetadata"], "fileName": "com.facebook.presto.mongodb.MongoSession"}, {"methodBody": ["METHOD_START", "{", "MongoDatabase   db    =    client . getDatabase ( schemaName )  ;", "MongoCursor < Document >    cursor    =    db . getCollection ( schemaCollection )  . find (  )  . projection ( new   Document (  . TABLE _ NAME _ KEY ,    true )  )  . iterator (  )  ;", "HashSet < String >    names    =    new   HashSet <  >  (  )  ;", "while    ( cursor . hasNext (  )  )     {", "names . add ( cursor . next (  )  . getString (  . TABLE _ NAME _ KEY )  )  ;", "}", "return   names ;", "}", "METHOD_END"], "methodName": ["getTableMetadataNames"], "fileName": "com.facebook.presto.mongodb.MongoSession"}, {"methodBody": ["METHOD_START", "{", "if    ( value    =  =    null )     {", "return   Optional . empty (  )  ;", "}", "TypeSignature   typeSignature    =    null ;", "if    ( value   instanceof   String )     {", "typeSignature    =    createUnboundedVarcharType (  )  . getTypeSignature (  )  ;", "} else", "if    (  ( value   instanceof   Integer )     |  |     ( value   instanceof   Long )  )     {", "typeSignature    =    BIGINT . getTypeSignature (  )  ;", "} else", "if    ( value   instanceof   Boolean )     {", "typeSignature    =    BOOLEAN . getTypeSignature (  )  ;", "} else", "if    (  ( value   instanceof   Float )     |  |     ( value   instanceof   Double )  )     {", "typeSignature    =    DOUBLE . getTypeSignature (  )  ;", "} else", "if    ( value   instanceof   Date )     {", "typeSignature    =    TIMESTAMP . getTypeSignature (  )  ;", "} else", "if    ( value   instanceof   ObjectId )     {", "typeSignature    =    ObjectIdType . OBJECT _ ID . getTypeSignature (  )  ;", "} else", "if    ( value   instanceof   List )     {", "List < Optional < TypeSignature >  >    subTypes    =     (  ( List <  ?  >  )     ( value )  )  . stream (  )  . map ( this :  : guessFieldType )  . collect ( toList (  )  )  ;", "if    (  ( subTypes . isEmpty (  )  )     |  |     ( subTypes . stream (  )  . anyMatch (  (    t )     -  >     !  ( t . isPresent (  )  )  )  )  )     {", "return   Optional . empty (  )  ;", "}", "Set < TypeSignature >    signatures    =    subTypes . stream (  )  . map (  (    t )     -  >    t . get (  )  )  . collect ( toSet (  )  )  ;", "if    (  ( signatures . size (  )  )     =  =     1  )     {", "typeSignature    =    new   TypeSignature ( spi . type . StandardTypes . ARRAY ,    signatures . stream (  )  . map (  (    s )     -  >    spi . type . TypeSignatureParameter . of ( s )  )  . collect ( toList (  )  )  )  ;", "} else    {", "typeSignature    =    new   TypeSignature ( spi . type . StandardTypes . ROW ,    range (  0  ,    subTypes . size (  )  )  . mapToObj (  (    idx )     -  >    spi . type . TypeSignatureParameter . of ( new   spi . type . NamedTypeSignature ( String . format (  \"  % s % d \"  ,    implicitPrefix ,     ( idx    +     1  )  )  ,    subTypes . get ( idx )  . get (  )  )  )  )  . collect ( toList (  )  )  )  ;", "}", "} else", "if    ( value   instanceof   Document )     {", "List < spi . type . TypeSignatureParameter >    parameters    =    new   ArrayList <  >  (  )  ;", "for    ( String   key    :     (  ( Document )     ( value )  )  . keySet (  )  )     {", "Optional < TypeSignature >    fieldType    =    guessFieldType (  (  ( Document )     ( value )  )  . get ( key )  )  ;", "if    (  !  ( fieldType . isPresent (  )  )  )     {", "return   Optional . empty (  )  ;", "}", "parameters . add ( spi . type . TypeSignatureParameter . of ( new   spi . type . NamedTypeSignature ( key ,    fieldType . get (  )  )  )  )  ;", "}", "typeSignature    =    new   TypeSignature ( spi . type . StandardTypes . ROW ,    parameters )  ;", "}", "return   Optional . ofNullable ( typeSignature )  ;", "}", "METHOD_END"], "methodName": ["guessFieldType"], "fileName": "com.facebook.presto.mongodb.MongoSession"}, {"methodBody": ["METHOD_START", "{", "String   schemaName    =    schemaTableName . getSchemaName (  )  ;", "String   tableName    =    schemaTableName . getTableName (  )  ;", "MongoDatabase   db    =    client . getDatabase ( schemaName )  ;", "Document   doc    =    db . getCollection ( tableName )  . find (  )  . first (  )  ;", "if    ( doc    =  =    null )     {", "return   ImmutableList . of (  )  ;", "}", "ImmutableList . Builder < Document >    builder    =    ImmutableList . builder (  )  ;", "for    ( String   key    :    doc . keySet (  )  )     {", "Object   value    =    doc . get ( key )  ;", "Optional < TypeSignature >    fieldType    =    guessFieldType ( value )  ;", "if    ( fieldType . isPresent (  )  )     {", "Document   metadata    =    new   Document (  )  ;", "metadata . append (  . FIELDS _ NAME _ KEY ,    key )  ;", "metadata . append (  . FIELDS _ TYPE _ KEY ,    fieldType . get (  )  . toString (  )  )  ;", "metadata . append (  . FIELDS _ HIDDEN _ KEY ,     (  ( key . equals (  \"  _ id \"  )  )     &  &     ( fieldType . get (  )  . equals ( ObjectIdType . OBJECT _ ID . getTypeSignature (  )  )  )  )  )  ;", "builder . add ( metadata )  ;", "} else    {", ". log . debug (  \" Unable   to   guess   field   type   from    % s    :     % s \"  ,     ( value    =  =    null    ?     \" null \"     :    value . getClass (  )  . getName (  )  )  ,    value )  ;", "}", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["guessTableFields"], "fileName": "com.facebook.presto.mongodb.MongoSession"}, {"methodBody": ["METHOD_START", "{", "return   MongoSession . documentOf ( MongoSession . NOT _ EQ _ OP ,    null )  ;", "}", "METHOD_END"], "methodName": ["isNotNullPredicate"], "fileName": "com.facebook.presto.mongodb.MongoSession"}, {"methodBody": ["METHOD_START", "{", "return   MongoSession . documentOf ( MongoSession . EXISTS _ OP ,    true )  . append ( MongoSession . EQ _ OP ,    null )  ;", "}", "METHOD_END"], "methodName": ["isNullPredicate"], "fileName": "com.facebook.presto.mongodb.MongoSession"}, {"methodBody": ["METHOD_START", "{", "Document   tableMeta    =    getTableMetadata ( tableName )  ;", "ImmutableList . Builder < ColumnHandle >    columnHandles    =    ImmutableList . builder (  )  ;", "for    ( Document   columnMetadata    :    getColumnMetadata ( tableMeta )  )     {", "ColumnHandle   columnHandle    =    buildColumnHandle ( columnMetadata )  ;", "columnHandles . add ( columnHandle )  ;", "}", "TableHandle   tableHandle    =    new   TableHandle ( tableName )  ;", "return   new   Table ( tableHandle ,    columnHandles . build (  )  ,    getIndexes ( tableName )  )  ;", "}", "METHOD_END"], "methodName": ["loadTableSchema"], "fileName": "com.facebook.presto.mongodb.MongoSession"}, {"methodBody": ["METHOD_START", "{", "checkState (  (  !  ( values . isEmpty (  )  )  )  )  ;", "if    (  ( values . size (  )  )     =  =     1  )     {", "return   values . get (  0  )  ;", "}", "return   new   Document (  . OR _ OP ,    values )  ;", "}", "METHOD_END"], "methodName": ["orPredicate"], "fileName": "com.facebook.presto.mongodb.MongoSession"}, {"methodBody": ["METHOD_START", "{", "client . close (  )  ;", "}", "METHOD_END"], "methodName": ["shutdown"], "fileName": "com.facebook.presto.mongodb.MongoSession"}, {"methodBody": ["METHOD_START", "{", "if    ( source   instanceof   Slice )     {", "if    ( type   instanceof   ObjectIdType )     {", "return   new   ObjectId (  (  ( Slice )     ( source )  )  . getBytes (  )  )  ;", "} else    {", "return    (  ( Slice )     ( source )  )  . toStringUtf 8  (  )  ;", "}", "}", "return   source ;", "}", "METHOD_END"], "methodName": ["translateValue"], "fileName": "com.facebook.presto.mongodb.MongoSession"}, {"methodBody": ["METHOD_START", "{", "return   schemaTableName ;", "}", "METHOD_END"], "methodName": ["getSchemaTableName"], "fileName": "com.facebook.presto.mongodb.MongoSplit"}, {"methodBody": ["METHOD_START", "{", "return   tupleDomain ;", "}", "METHOD_END"], "methodName": ["getTupleDomain"], "fileName": "com.facebook.presto.mongodb.MongoSplit"}, {"methodBody": ["METHOD_START", "{", "return   columns ;", "}", "METHOD_END"], "methodName": ["getColumns"], "fileName": "com.facebook.presto.mongodb.MongoTable"}, {"methodBody": ["METHOD_START", "{", "return   indexes ;", "}", "METHOD_END"], "methodName": ["getIndexes"], "fileName": "com.facebook.presto.mongodb.MongoTable"}, {"methodBody": ["METHOD_START", "{", "return   tableHandle ;", "}", "METHOD_END"], "methodName": ["getTableHandle"], "fileName": "com.facebook.presto.mongodb.MongoTable"}, {"methodBody": ["METHOD_START", "{", "return   schemaTableName ;", "}", "METHOD_END"], "methodName": ["getSchemaTableName"], "fileName": "com.facebook.presto.mongodb.MongoTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   table ;", "}", "METHOD_END"], "methodName": ["getTable"], "fileName": "com.facebook.presto.mongodb.MongoTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "return   tupleDomain ;", "}", "METHOD_END"], "methodName": ["getTupleDomain"], "fileName": "com.facebook.presto.mongodb.MongoTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "return   uuid ;", "}", "METHOD_END"], "methodName": ["getUuid"], "fileName": "com.facebook.presto.mongodb.MongoTransactionHandle"}, {"methodBody": ["METHOD_START", "{", "return   Slices . wrappedBuffer ( new   ObjectId (  )  . toByteArray (  )  )  ;", "}", "METHOD_END"], "methodName": ["ObjectId"], "fileName": "com.facebook.presto.mongodb.ObjectIdFunctions"}, {"methodBody": ["METHOD_START", "{", "return   Slices . wrappedBuffer ( new   ObjectId ( CharMatcher . is (  '     '  )  . removeFrom ( value . toStringUtf 8  (  )  )  )  . toByteArray (  )  )  ;", "}", "METHOD_END"], "methodName": ["ObjectId"], "fileName": "com.facebook.presto.mongodb.ObjectIdFunctions"}, {"methodBody": ["METHOD_START", "{", "return    (  ( ObjectIdFunctions . compareTo ( value ,    min )  )     >  =     0  )     &  &     (  ( ObjectIdFunctions . compareTo ( value ,    max )  )     <  =     0  )  ;", "}", "METHOD_END"], "methodName": ["between"], "fileName": "com.facebook.presto.mongodb.ObjectIdFunctions"}, {"methodBody": ["METHOD_START", "{", "return   new   ObjectId ( left . getBytes (  )  )  . compareTo ( new   ObjectId ( right . getBytes (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["compareTo"], "fileName": "com.facebook.presto.mongodb.ObjectIdFunctions"}, {"methodBody": ["METHOD_START", "{", "return   left . equals ( right )  ;", "}", "METHOD_END"], "methodName": ["equal"], "fileName": "com.facebook.presto.mongodb.ObjectIdFunctions"}, {"methodBody": ["METHOD_START", "{", "return    ( ObjectIdFunctions . compareTo ( left ,    right )  )     >     0  ;", "}", "METHOD_END"], "methodName": ["greaterThan"], "fileName": "com.facebook.presto.mongodb.ObjectIdFunctions"}, {"methodBody": ["METHOD_START", "{", "return    ( ObjectIdFunctions . compareTo ( left ,    right )  )     >  =     0  ;", "}", "METHOD_END"], "methodName": ["greaterThanOrEqual"], "fileName": "com.facebook.presto.mongodb.ObjectIdFunctions"}, {"methodBody": ["METHOD_START", "{", "return   new   ObjectId ( value . getBytes (  )  )  . hashCode (  )  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "com.facebook.presto.mongodb.ObjectIdFunctions"}, {"methodBody": ["METHOD_START", "{", "return    ( ObjectIdFunctions . compareTo ( left ,    right )  )     <     0  ;", "}", "METHOD_END"], "methodName": ["lessThan"], "fileName": "com.facebook.presto.mongodb.ObjectIdFunctions"}, {"methodBody": ["METHOD_START", "{", "return    ( ObjectIdFunctions . compareTo ( left ,    right )  )     <  =     0  ;", "}", "METHOD_END"], "methodName": ["lessThanOrEqual"], "fileName": "com.facebook.presto.mongodb.ObjectIdFunctions"}, {"methodBody": ["METHOD_START", "{", "return    !  ( left . equals ( right )  )  ;", "}", "METHOD_END"], "methodName": ["notEqual"], "fileName": "com.facebook.presto.mongodb.ObjectIdFunctions"}, {"methodBody": ["METHOD_START", "{", "return   readPreference ;", "}", "METHOD_END"], "methodName": ["getReadPreference"], "fileName": "com.facebook.presto.mongodb.ReadPreferenceType"}, {"methodBody": ["METHOD_START", "{", "mongoQueryRunner . shutdown (  )  ;", "mongoQueryRunner    =    null ;", "}", "METHOD_END"], "methodName": ["destroy"], "fileName": "com.facebook.presto.mongodb.TestMongoDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "mongoQueryRunner    =     (  ( MongoQueryRunner )     ( getQueryRunner (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.mongodb.TestMongoDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   results    =    getQueryRunner (  )  . execute ( getSession (  )  ,    query )  . toTestTypes (  )  ;", "assertEquals ( results . getRowCount (  )  ,     1  )  ;", "assertEquals ( results . getMaterializedRows (  )  . get (  0  )  . getFieldCount (  )  ,     1  )  ;", "assertNotNull ( results . getMaterializedRows (  )  . get (  0  )  . getField (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["assertOneNotNullResult"], "fileName": "com.facebook.presto.mongodb.TestMongoIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "String   query    =     \"  \"     +     (  (  (  (  (  (  (  (  (  \" CREATE   TABLE   test _ types _ table   AS    \"     +     \" SELECT \"  )     +     \"     ' foo '     _ varchar \"  )     +     \"  ,    cast (  ' bar '    as   varbinary )     _ varbinary \"  )     +     \"  ,    cast (  1    as   bigint )     _ bigint \"  )     +     \"  ,     3  .  1  4 E 0     _ double \"  )     +     \"  ,    true    _ boolean \"  )     +     \"  ,    DATE    '  1  9  8  0  -  0  5  -  0  7  '     _ date \"  )     +     \"  ,    TIMESTAMP    '  1  9  8  0  -  0  5  -  0  7     1  1  :  2  2  :  3  3  .  4  5  6  '     _ timestamp \"  )     +     \"  ,    ObjectId (  ' ffffffffffffffffffffffff '  )     _ objectid \"  )  ;", "assertUpdate ( query ,     1  )  ;", "MaterializedResult   results    =    getQueryRunner (  )  . execute ( getSession (  )  ,     \" SELECT    *    FROM   test _ types _ table \"  )  . toTypes (  )  ;", "assertEquals ( results . getRowCount (  )  ,     1  )  ;", "MaterializedRow   row    =    results . getMaterializedRows (  )  . get (  0  )  ;", "assertEquals ( row . getField (  0  )  ,     \" foo \"  )  ;", "assertEquals ( row . getField (  1  )  ,     \" bar \"  . getBytes ( StandardCharsets . UTF _  8  )  )  ;", "assertEquals ( row . getField (  2  )  ,     1 L )  ;", "assertEquals ( row . getField (  3  )  ,     3  .  1  4  )  ;", "assertEquals ( row . getField (  4  )  ,    true )  ;", "assertEquals ( row . getField (  5  )  ,    LocalDate . of (  1  9  8  0  ,     5  ,     7  )  )  ;", "assertEquals ( row . getField (  6  )  ,    LocalDateTime . of (  1  9  8  0  ,     5  ,     7  ,     1  1  ,     2  2  ,     3  3  ,     4  5  6  0  0  0  0  0  0  )  )  ;", "assertUpdate (  \" DROP   TABLE   test _ types _ table \"  )  ;", "assertFalse ( getQueryRunner (  )  . tableExists ( getSession (  )  ,     \" test _ types _ table \"  )  )  ;", "}", "METHOD_END"], "methodName": ["createTableWithEveryType"], "fileName": "com.facebook.presto.mongodb.TestMongoIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "mongoQueryRunner . shutdown (  )  ;", "mongoQueryRunner    =    null ;", "}", "METHOD_END"], "methodName": ["destroy"], "fileName": "com.facebook.presto.mongodb.TestMongoIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "mongoQueryRunner    =     (  ( MongoQueryRunner )     ( getQueryRunner (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.mongodb.TestMongoIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertUpdate (  \" CREATE   TABLE   tmp _ array 1    AS   SELECT   ARRAY [  1  ,     2  ,    NULL ]    AS   col \"  ,     1  )  ;", "assertQuery (  \" SELECT   col [  2  ]    FROM   tmp _ array 1  \"  ,     \" SELECT    2  \"  )  ;", "assertQuery (  \" SELECT   col [  3  ]    FROM   tmp _ array 1  \"  ,     \" SELECT   NULL \"  )  ;", "assertUpdate (  \" CREATE   TABLE   tmp _ array 2    AS   SELECT   ARRAY [  1  .  0 E 0  ,     2  .  5 E 0  ,     3  .  5 E 0  ]    AS   col \"  ,     1  )  ;", "assertQuery (  \" SELECT   col [  2  ]    FROM   tmp _ array 2  \"  ,     \" SELECT    2  .  5  \"  )  ;", "assertUpdate (  \" CREATE   TABLE   tmp _ array 3    AS   SELECT   ARRAY [  ' puppies '  ,     ' kittens '  ,    NULL ]    AS   col \"  ,     1  )  ;", "assertQuery (  \" SELECT   col [  2  ]    FROM   tmp _ array 3  \"  ,     \" SELECT    ' kittens '  \"  )  ;", "assertQuery (  \" SELECT   col [  3  ]    FROM   tmp _ array 3  \"  ,     \" SELECT   NULL \"  )  ;", "assertUpdate (  \" CREATE   TABLE   tmp _ array 4    AS   SELECT   ARRAY [ TRUE ,    NULL ]    AS   col \"  ,     1  )  ;", "assertQuery (  \" SELECT   col [  1  ]    FROM   tmp _ array 4  \"  ,     \" SELECT   TRUE \"  )  ;", "assertQuery (  \" SELECT   col [  2  ]    FROM   tmp _ array 4  \"  ,     \" SELECT   NULL \"  )  ;", "assertUpdate (  \" CREATE   TABLE   tmp _ array 5    AS   SELECT   ARRAY [ ARRAY [  1  ,     2  ]  ,    NULL ,    ARRAY [  3  ,     4  ]  ]    AS   col \"  ,     1  )  ;", "assertQuery (  \" SELECT   col [  1  ]  [  2  ]    FROM   tmp _ array 5  \"  ,     \" SELECT    2  \"  )  ;", "assertUpdate (  \" CREATE   TABLE   tmp _ array 6    AS   SELECT   ARRAY [ ARRAY [  \\  '  \\  \" hi \\  \"  \\  '  ]  ,    NULL ,    ARRAY [  \\  ' puppies \\  '  ]  ]    AS   col \"  ,     1  )  ;", "assertQuery (  \" SELECT   col [  1  ]  [  1  ]    FROM   tmp _ array 6  \"  ,     \" SELECT    \\  '  \\  \" hi \\  \"  \\  '  \"  )  ;", "assertQuery (  \" SELECT   col [  3  ]  [  1  ]    FROM   tmp _ array 6  \"  ,     \" SELECT    ' puppies '  \"  )  ;", "}", "METHOD_END"], "methodName": ["testArrays"], "fileName": "com.facebook.presto.mongodb.TestMongoIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertUpdate (  \" CREATE   TABLE    \\  \" tmp . dot 1  \\  \"    AS   SELECT    \\  ' foo \\  '     _ varchar \"  ,     1  )  ;", "assertQuery (  \" SELECT    _ varchar   FROM    \\  \" tmp . dot 1  \\  \"  \"  ,     \" SELECT    ' foo '  \"  )  ;", "assertUpdate (  \" DROP   TABLE    \\  \" tmp . dot 1  \\  \"  \"  )  ;", "}", "METHOD_END"], "methodName": ["testCollectionNameContainsDots"], "fileName": "com.facebook.presto.mongodb.TestMongoIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "String   createSql    =     \"  \"     +     (  (  (  (  (  (  (  (  (  (  \" CREATE   TABLE   test _ insert _ types _ table    \"     +     \"  (  \"  )     +     \"       vc   varchar \"  )     +     \"  ,    vb   varbinary \"  )     +     \"  ,    bi   bigint \"  )     +     \"  ,    d   double \"  )     +     \"  ,    b   boolean \"  )     +     \"  ,    dt      date \"  )     +     \"  ,    ts      timestamp \"  )     +     \"  ,    objid   objectid \"  )     +     \"  )  \"  )  ;", "getQueryRunner (  )  . execute ( getSession (  )  ,    createSql )  ;", "String   insertSql    =     \"  \"     +     (  (  (  (  (  (  (  (  (  \" INSERT   INTO   test _ insert _ types _ table    \"     +     \" SELECT \"  )     +     \"     ' foo '     _ varchar \"  )     +     \"  ,    cast (  ' bar '    as   varbinary )     _ varbinary \"  )     +     \"  ,    cast (  1    as   bigint )     _ bigint \"  )     +     \"  ,     3  .  1  4 E 0     _ double \"  )     +     \"  ,    true    _ boolean \"  )     +     \"  ,    DATE    '  1  9  8  0  -  0  5  -  0  7  '     _ date \"  )     +     \"  ,    TIMESTAMP    '  1  9  8  0  -  0  5  -  0  7     1  1  :  2  2  :  3  3  .  4  5  6  '     _ timestamp \"  )     +     \"  ,    ObjectId (  ' ffffffffffffffffffffffff '  )     _ objectid \"  )  ;", "getQueryRunner (  )  . execute ( getSession (  )  ,    insertSql )  ;", "MaterializedResult   results    =    getQueryRunner (  )  . execute ( getSession (  )  ,     \" SELECT    *    FROM   test _ insert _ types _ table \"  )  . toTypes (  )  ;", "assertEquals ( results . getRowCount (  )  ,     1  )  ;", "MaterializedRow   row    =    results . getMaterializedRows (  )  . get (  0  )  ;", "assertEquals ( row . getField (  0  )  ,     \" foo \"  )  ;", "assertEquals ( row . getField (  1  )  ,     \" bar \"  . getBytes ( StandardCharsets . UTF _  8  )  )  ;", "assertEquals ( row . getField (  2  )  ,     1 L )  ;", "assertEquals ( row . getField (  3  )  ,     3  .  1  4  )  ;", "assertEquals ( row . getField (  4  )  ,    true )  ;", "assertEquals ( row . getField (  5  )  ,    LocalDate . of (  1  9  8  0  ,     5  ,     7  )  )  ;", "assertEquals ( row . getField (  6  )  ,    LocalDateTime . of (  1  9  8  0  ,     5  ,     7  ,     1  1  ,     2  2  ,     3  3  ,     4  5  6  0  0  0  0  0  0  )  )  ;", "assertUpdate (  \" DROP   TABLE   test _ insert _ types _ table \"  )  ;", "assertFalse ( getQueryRunner (  )  . tableExists ( getSession (  )  ,     \" test _ insert _ types _ table \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testInsertWithEveryType"], "fileName": "com.facebook.presto.mongodb.TestMongoIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertUpdate (  \" CREATE   TABLE   tmp _ map 1    AS   SELECT   MAP ( ARRAY [  0  ,  1  ]  ,    ARRAY [  2  , NULL ]  )    AS   col \"  ,     1  )  ;", "assertQuery (  \" SELECT   col [  0  ]    FROM   tmp _ map 1  \"  ,     \" SELECT    2  \"  )  ;", "assertQuery (  \" SELECT   col [  1  ]    FROM   tmp _ map 1  \"  ,     \" SELECT   NULL \"  )  ;", "assertUpdate (  \" CREATE   TABLE   tmp _ map 2    AS   SELECT   MAP ( ARRAY [  1  .  0 E 0  ]  ,    ARRAY [  2  .  5 E 0  ]  )    AS   col \"  ,     1  )  ;", "assertQuery (  \" SELECT   col [  1  .  0  ]    FROM   tmp _ map 2  \"  ,     \" SELECT    2  .  5  \"  )  ;", "assertUpdate (  \" CREATE   TABLE   tmp _ map 3    AS   SELECT   MAP ( ARRAY [  ' puppies '  ]  ,    ARRAY [  ' kittens '  ]  )    AS   col \"  ,     1  )  ;", "assertQuery (  \" SELECT   col [  ' puppies '  ]    FROM   tmp _ map 3  \"  ,     \" SELECT    ' kittens '  \"  )  ;", "assertUpdate (  \" CREATE   TABLE   tmp _ map 4    AS   SELECT   MAP ( ARRAY [ TRUE ]  ,    ARRAY [ FALSE ]  )    AS   col \"  ,     \" SELECT    1  \"  )  ;", "assertQuery (  \" SELECT   col [ TRUE ]    FROM   tmp _ map 4  \"  ,     \" SELECT   FALSE \"  )  ;", "assertUpdate (  \" CREATE   TABLE   tmp _ map 5    AS   SELECT   MAP ( ARRAY [  1  .  0 E 0  ]  ,    ARRAY [ ARRAY [  1  ,     2  ]  ]  )    AS   col \"  ,     1  )  ;", "assertQuery (  \" SELECT   col [  1  .  0  ]  [  2  ]    FROM   tmp _ map 5  \"  ,     \" SELECT    2  \"  )  ;", "assertUpdate (  \" CREATE   TABLE   tmp _ map 6    AS   SELECT   MAP ( ARRAY [ DATE    '  2  0  1  4  -  0  9  -  3  0  '  ]  ,    ARRAY [ DATE    '  2  0  1  4  -  0  9  -  2  9  '  ]  )    AS   col \"  ,     1  )  ;", "assertOneNotNullResult (  \" SELECT   col [ DATE    '  2  0  1  4  -  0  9  -  3  0  '  ]    FROM   tmp _ map 6  \"  )  ;", "assertUpdate (  \" CREATE   TABLE   tmp _ map 7    AS   SELECT   MAP ( ARRAY [ TIMESTAMP    '  2  0  0  1  -  0  8  -  2  2     0  3  :  0  4  :  0  5  .  3  2  1  '  ]  ,    ARRAY [ TIMESTAMP    '  2  0  0  1  -  0  8  -  2  2     0  3  :  0  4  :  0  5  .  3  2  1  '  ]  )    AS   col \"  ,     1  )  ;", "assertOneNotNullResult (  \" SELECT   col [ TIMESTAMP    '  2  0  0  1  -  0  8  -  2  2     0  3  :  0  4  :  0  5  .  3  2  1  '  ]    FROM   tmp _ map 7  \"  )  ;", "assertUpdate (  \" CREATE   TABLE   test . tmp _ map 8     ( col   MAP < VARCHAR ,    VARCHAR >  )  \"  )  ;", "mongoQueryRunner . geClient (  )  . getDatabase (  \" test \"  )  . getCollection (  \" tmp _ map 8  \"  )  . insertOne ( new   Document ( ImmutableMap . of (  \" col \"  ,    new   Document ( ImmutableMap . of (  \" key 1  \"  ,     \" value 1  \"  ,     \" key 2  \"  ,     \" value 2  \"  )  )  )  )  )  ;", "assertQuery (  \" SELECT   col [  ' key 1  '  ]    FROM   test . tmp _ map 8  \"  ,     \" SELECT    ' value 1  '  \"  )  ;", "assertUpdate (  \" CREATE   TABLE   test . tmp _ map 9     ( col   VARCHAR )  \"  )  ;", "mongoQueryRunner . geClient (  )  . getDatabase (  \" test \"  )  . getCollection (  \" tmp _ map 9  \"  )  . insertOne ( new   Document ( ImmutableMap . of (  \" col \"  ,    new   Document ( ImmutableMap . of (  \" key 1  \"  ,     \" value 1  \"  ,     \" key 2  \"  ,     \" value 2  \"  )  )  )  )  )  ;", "assertQuery (  \" SELECT   col   FROM   test . tmp _ map 9  \"  ,     \" SELECT    \\  '  {     \\  \" key 1  \\  \"     :     \\  \" value 1  \\  \"  ,     \\  \" key 2  \\  \"     :     \\  \" value 2  \\  \"     }  \\  '  \"  )  ;", "assertUpdate (  \" CREATE   TABLE   test . tmp _ map 1  0     ( col   VARCHAR )  \"  )  ;", "mongoQueryRunner . geClient (  )  . getDatabase (  \" test \"  )  . getCollection (  \" tmp _ map 1  0  \"  )  . insertOne ( new   Document ( ImmutableMap . of (  \" col \"  ,    ImmutableList . of ( new   Document ( ImmutableMap . of (  \" key 1  \"  ,     \" value 1  \"  ,     \" key 2  \"  ,     \" value 2  \"  )  )  ,    new   Document ( ImmutableMap . of (  \" key 3  \"  ,     \" value 3  \"  ,     \" key 4  \"  ,     \" value 4  \"  )  )  )  )  )  )  ;", "assertQuery (  \" SELECT   col   FROM   test . tmp _ map 1  0  \"  ,     \" SELECT    \\  '  [  {     \\  \" key 1  \\  \"     :     \\  \" value 1  \\  \"  ,     \\  \" key 2  \\  \"     :     \\  \" value 2  \\  \"     }  ,     {     \\  \" key 3  \\  \"     :     \\  \" value 3  \\  \"  ,     \\  \" key 4  \\  \"     :     \\  \" value 4  \\  \"     }  ]  \\  '  \"  )  ;", "assertUpdate (  \" CREATE   TABLE   test . tmp _ map 1  1     ( col   VARCHAR )  \"  )  ;", "mongoQueryRunner . geClient (  )  . getDatabase (  \" test \"  )  . getCollection (  \" tmp _ map 1  1  \"  )  . insertOne ( new   Document ( ImmutableMap . of (  \" col \"  ,     1  0  )  )  )  ;", "assertQuery (  \" SELECT   col   FROM   test . tmp _ map 1  1  \"  ,     \" SELECT    '  1  0  '  \"  )  ;", "assertUpdate (  \" CREATE   TABLE   test . tmp _ map 1  2     ( col   VARCHAR )  \"  )  ;", "mongoQueryRunner . geClient (  )  . getDatabase (  \" test \"  )  . getCollection (  \" tmp _ map 1  2  \"  )  . insertOne ( new   Document ( ImmutableMap . of (  \" col \"  ,    Arrays . asList (  1  0  ,    null ,     1  1  )  )  )  )  ;", "assertQuery (  \" SELECT   col   FROM   test . tmp _ map 1  2  \"  ,     \" SELECT    '  [  1  0  ,    null ,     1  1  ]  '  \"  )  ;", "}", "METHOD_END"], "methodName": ["testMaps"], "fileName": "com.facebook.presto.mongodb.TestMongoIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertUpdate (  \" CREATE   TABLE   tmp _ objectid   AS   SELECT   ObjectId (  ' ffffffffffffffffffffffff '  )    AS   id \"  ,     1  )  ;", "assertOneNotNullResult (  \" SELECT   id   FROM   tmp _ objectid   WHERE   id    =    ObjectId (  ' ffffffffffffffffffffffff '  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testObjectIds"], "fileName": "com.facebook.presto.mongodb.TestMongoIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertUpdate (  \" CREATE   TABLE   tmp _ array 7    AS   SELECT   ARRAY [ DATE    '  2  0  1  4  -  0  9  -  3  0  '  ]    AS   col \"  ,     1  )  ;", "assertOneNotNullResult (  \" SELECT   col [  1  ]    FROM   tmp _ array 7  \"  )  ;", "assertUpdate (  \" CREATE   TABLE   tmp _ array 8    AS   SELECT   ARRAY [ TIMESTAMP    '  2  0  0  1  -  0  8  -  2  2     0  3  :  0  4  :  0  5  .  3  2  1  '  ]    AS   col \"  ,     1  )  ;", "assertOneNotNullResult (  \" SELECT   col [  1  ]    FROM   tmp _ array 8  \"  )  ;", "}", "METHOD_END"], "methodName": ["testTemporalArrays"], "fileName": "com.facebook.presto.mongodb.TestMongoIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "server . shutdown (  )  ;", "}", "METHOD_END"], "methodName": ["destory"], "fileName": "com.facebook.presto.mongodb.TestMongoPlugin"}, {"methodBody": ["METHOD_START", "{", "server    =    new   de . bwaldvogel . mongo . MongoServer ( new   MemoryBackend (  )  )  ;", "InetSocketAddress   address    =    server . bind (  )  ;", "seed    =    String . format (  \"  % s :  % d \"  ,    address . getHostString (  )  ,    address . getPort (  )  )  ;", "}", "METHOD_END"], "methodName": ["start"], "fileName": "com.facebook.presto.mongodb.TestMongoPlugin"}, {"methodBody": ["METHOD_START", "{", "MongoPlugin   plugin    =    new   MongoPlugin (  )  ;", "ConnectorFactory   factory    =    getOnlyElement ( plugin . getConnectorFactories (  )  )  ;", "Connector   connector    =    factory . create (  \" test \"  ,    ImmutableMap . of (  \" mongodb . seeds \"  ,    seed )  ,    new   TestingConnectorContext (  )  )  ;", "Type   type    =    getOnlyElement ( plugin . getTypes (  )  )  ;", "assertEquals ( type ,    ObjectIdType . OBJECT _ ID )  ;", "connector . shutdown (  )  ;", "}", "METHOD_END"], "methodName": ["testCreateConnector"], "fileName": "com.facebook.presto.mongodb.TestMongoPlugin"}, {"methodBody": ["METHOD_START", "{", "TupleDomain < ColumnHandle >    tupleDomain    =    TupleDomain . withColumnDomains ( ImmutableMap . of ( TestMongoSession . COL 1  ,    Domain . create ( ValueSet . ofRanges ( range ( BIGINT ,     1  0  0 L ,    false ,     2  0  0 L ,    true )  )  ,    false )  ,    TestMongoSession . COL 2  ,    Domain . singleValue ( createUnboundedVarcharType (  )  ,    utf 8 Slice (  \" a   value \"  )  )  )  )  ;", "Document   query    =    MongoSession . buildQuery ( tupleDomain )  ;", "Document   expected    =    new   Document (  )  . append ( TestMongoSession . COL 1  . getName (  )  ,    new   Document (  )  . append (  \"  $ gt \"  ,     1  0  0 L )  . append (  \"  $ lte \"  ,     2  0  0 L )  )  . append ( TestMongoSession . COL 2  . getName (  )  ,    new   Document (  \"  $ eq \"  ,     \" a   value \"  )  )  ;", "assertEquals ( query ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testBuildQuery"], "fileName": "com.facebook.presto.mongodb.TestMongoSession"}, {"methodBody": ["METHOD_START", "{", "TupleDomain < ColumnHandle >    tupleDomain    =    TupleDomain . withColumnDomains ( ImmutableMap . of ( TestMongoSession . COL 2  ,    Domain . create ( ValueSet . ofRanges ( equal ( createUnboundedVarcharType (  )  ,    utf 8 Slice (  \" hello \"  )  )  ,    equal ( createUnboundedVarcharType (  )  ,    utf 8 Slice (  \" world \"  )  )  )  ,    false )  )  )  ;", "Document   query    =    MongoSession . buildQuery ( tupleDomain )  ;", "Document   expected    =    new   Document ( TestMongoSession . COL 2  . getName (  )  ,    new   Document (  \"  $ in \"  ,    ImmutableList . of (  \" hello \"  ,     \" world \"  )  )  )  ;", "assertEquals ( query ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testBuildQueryIn"], "fileName": "com.facebook.presto.mongodb.TestMongoSession"}, {"methodBody": ["METHOD_START", "{", "TupleDomain < ColumnHandle >    tupleDomain    =    TupleDomain . withColumnDomains ( ImmutableMap . of ( TestMongoSession . COL 1  ,    Domain . create ( ValueSet . ofRanges ( greaterThan ( BIGINT ,     2  0  0 L )  )  ,    true )  )  )  ;", "Document   query    =    MongoSession . buildQuery ( tupleDomain )  ;", "Document   expected    =    new   Document (  \"  $ or \"  ,    Arrays . asList ( new   Document ( TestMongoSession . COL 1  . getName (  )  ,    new   Document (  \"  $ gt \"  ,     2  0  0 L )  )  ,    new   Document ( TestMongoSession . COL 1  . getName (  )  ,    new   Document (  \"  $ exists \"  ,    true )  . append (  \"  $ eq \"  ,    null )  )  )  )  ;", "assertEquals ( query ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testBuildQueryNull"], "fileName": "com.facebook.presto.mongodb.TestMongoSession"}, {"methodBody": ["METHOD_START", "{", "TupleDomain < ColumnHandle >    tupleDomain    =    TupleDomain . withColumnDomains ( ImmutableMap . of ( TestMongoSession . COL 1  ,    Domain . create ( ValueSet . ofRanges ( lessThan ( BIGINT ,     1  0  0 L )  ,    greaterThan ( BIGINT ,     2  0  0 L )  )  ,    false )  )  )  ;", "Document   query    =    MongoSession . buildQuery ( tupleDomain )  ;", "Document   expected    =    new   Document (  \"  $ or \"  ,    Arrays . asList ( new   Document ( TestMongoSession . COL 1  . getName (  )  ,    new   Document (  \"  $ lt \"  ,     1  0  0 L )  )  ,    new   Document ( TestMongoSession . COL 1  . getName (  )  ,    new   Document (  \"  $ gt \"  ,     2  0  0 L )  )  )  )  ;", "assertEquals ( query ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testBuildQueryOr"], "fileName": "com.facebook.presto.mongodb.TestMongoSession"}, {"methodBody": ["METHOD_START", "{", "TupleDomain < ColumnHandle >    tupleDomain    =    TupleDomain . withColumnDomains ( ImmutableMap . of ( TestMongoSession . COL 1  ,    Domain . create ( ValueSet . ofRanges ( range ( createUnboundedVarcharType (  )  ,    utf 8 Slice (  \" hello \"  )  ,    false ,    utf 8 Slice (  \" world \"  )  ,    true )  )  ,    false )  ,    TestMongoSession . COL 2  ,    Domain . create ( ValueSet . ofRanges ( greaterThanOrEqual ( createUnboundedVarcharType (  )  ,    utf 8 Slice (  \" a   value \"  )  )  )  ,    false )  )  )  ;", "Document   query    =    MongoSession . buildQuery ( tupleDomain )  ;", "Document   expected    =    new   Document (  )  . append ( TestMongoSession . COL 1  . getName (  )  ,    new   Document (  )  . append (  \"  $ gt \"  ,     \" hello \"  )  . append (  \"  $ lte \"  ,     \" world \"  )  )  . append ( TestMongoSession . COL 2  . getName (  )  ,    new   Document (  \"  $ gte \"  ,     \" a   value \"  )  )  ;", "assertEquals ( query ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testBuildQueryStringType"], "fileName": "com.facebook.presto.mongodb.TestMongoSession"}, {"methodBody": ["METHOD_START", "{", "MongoSplit   expected    =    new   MongoSplit ( new   SchemaTableName (  \" schema 1  \"  ,     \" table 1  \"  )  ,    TupleDomain . all (  )  ,    ImmutableList . of (  )  )  ;", "String   json    =    codec . toJson ( expected )  ;", "MongoSplit   actual    =    codec . fromJson ( json )  ;", "assertEquals ( actual . getSchemaTableName (  )  ,    expected . getSchemaTableName (  )  )  ;", "assertEquals ( actual . getTupleDomain (  )  ,    TupleDomain .  < ColumnHandle > all (  )  )  ;", "assertEquals ( actual . getAddresses (  )  ,    ImmutableList . of (  )  )  ;", "}", "METHOD_END"], "methodName": ["testJsonRoundTrip"], "fileName": "com.facebook.presto.mongodb.TestMongoSplit"}, {"methodBody": ["METHOD_START", "{", "MongoTableHandle   expected    =    new   MongoTableHandle ( new   SchemaTableName (  \" schema \"  ,     \" table \"  )  )  ;", "String   json    =    codec . toJson ( expected )  ;", "MongoTableHandle   actual    =    codec . fromJson ( json )  ;", "assertEquals ( actual . getSchemaTableName (  )  ,    expected . getSchemaTableName (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRoundTrip"], "fileName": "com.facebook.presto.mongodb.TestMongoTableHandle"}, {"methodBody": ["METHOD_START", "{", "for    ( Predicate < Type >    orPredicate    :    orPredicates )     {", "predicate    =    predicate . or ( orPredicate )  ;", "}", "if    ( predicate . test ( type )  )     {", "return   true ;", "}", "return   type . getTypeParameters (  )  . stream (  )  . anyMatch ( predicate )  ;", "}", "METHOD_END"], "methodName": ["containsType"], "fileName": "com.facebook.presto.mongodb.TypeUtils"}, {"methodBody": ["METHOD_START", "{", "return   type . getTypeSignature (  )  . getBase (  )  . equals ( ARRAY )  ;", "}", "METHOD_END"], "methodName": ["isArrayType"], "fileName": "com.facebook.presto.mongodb.TypeUtils"}, {"methodBody": ["METHOD_START", "{", "return    (  (  ( type . equals ( DATE )  )     |  |     ( type . equals ( TIME )  )  )     |  |     ( type . equals ( TIMESTAMP )  )  )     |  |     ( type . equals ( TIMESTAMP _ WITH _ TIME _ ZONE )  )  ;", "}", "METHOD_END"], "methodName": ["isDateType"], "fileName": "com.facebook.presto.mongodb.TypeUtils"}, {"methodBody": ["METHOD_START", "{", "return   type . getTypeSignature (  )  . getBase (  )  . equals ( MAP )  ;", "}", "METHOD_END"], "methodName": ["isMapType"], "fileName": "com.facebook.presto.mongodb.TypeUtils"}, {"methodBody": ["METHOD_START", "{", "return   type . getTypeSignature (  )  . getBase (  )  . equals ( ROW )  ;", "}", "METHOD_END"], "methodName": ["isRowType"], "fileName": "com.facebook.presto.mongodb.TypeUtils"}, {"methodBody": ["METHOD_START", "{", "return   writeConcern ;", "}", "METHOD_END"], "methodName": ["getWriteConcern"], "fileName": "com.facebook.presto.mongodb.WriteConcernType"}]