[{"methodBody": ["METHOD_START", "{", "return   new   ClientSession . Builder ( clientSession )  ;", "}", "METHOD_END"], "methodName": ["builder"], "fileName": "com.facebook.presto.client.ClientSession"}, {"methodBody": ["METHOD_START", "{", "return   catalog ;", "}", "METHOD_END"], "methodName": ["getCatalog"], "fileName": "com.facebook.presto.client.ClientSession"}, {"methodBody": ["METHOD_START", "{", "return   clientInfo ;", "}", "METHOD_END"], "methodName": ["getClientInfo"], "fileName": "com.facebook.presto.client.ClientSession"}, {"methodBody": ["METHOD_START", "{", "return   clientRequestTimeout ;", "}", "METHOD_END"], "methodName": ["getClientRequestTimeout"], "fileName": "com.facebook.presto.client.ClientSession"}, {"methodBody": ["METHOD_START", "{", "return   clientTags ;", "}", "METHOD_END"], "methodName": ["getClientTags"], "fileName": "com.facebook.presto.client.ClientSession"}, {"methodBody": ["METHOD_START", "{", "return   locale ;", "}", "METHOD_END"], "methodName": ["getLocale"], "fileName": "com.facebook.presto.client.ClientSession"}, {"methodBody": ["METHOD_START", "{", "return   preparedStatements ;", "}", "METHOD_END"], "methodName": ["getPreparedStatements"], "fileName": "com.facebook.presto.client.ClientSession"}, {"methodBody": ["METHOD_START", "{", "return   properties ;", "}", "METHOD_END"], "methodName": ["getProperties"], "fileName": "com.facebook.presto.client.ClientSession"}, {"methodBody": ["METHOD_START", "{", "return   resourceEstimates ;", "}", "METHOD_END"], "methodName": ["getResourceEstimates"], "fileName": "com.facebook.presto.client.ClientSession"}, {"methodBody": ["METHOD_START", "{", "return   schema ;", "}", "METHOD_END"], "methodName": ["getSchema"], "fileName": "com.facebook.presto.client.ClientSession"}, {"methodBody": ["METHOD_START", "{", "return   server ;", "}", "METHOD_END"], "methodName": ["getServer"], "fileName": "com.facebook.presto.client.ClientSession"}, {"methodBody": ["METHOD_START", "{", "return   source ;", "}", "METHOD_END"], "methodName": ["getSource"], "fileName": "com.facebook.presto.client.ClientSession"}, {"methodBody": ["METHOD_START", "{", "return   timeZone ;", "}", "METHOD_END"], "methodName": ["getTimeZone"], "fileName": "com.facebook.presto.client.ClientSession"}, {"methodBody": ["METHOD_START", "{", "return   transactionId ;", "}", "METHOD_END"], "methodName": ["getTransactionId"], "fileName": "com.facebook.presto.client.ClientSession"}, {"methodBody": ["METHOD_START", "{", "return   user ;", "}", "METHOD_END"], "methodName": ["getUser"], "fileName": "com.facebook.presto.client.ClientSession"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isDebug"], "fileName": "com.facebook.presto.client.ClientSession"}, {"methodBody": ["METHOD_START", "{", "return   ClientSession . builder ( session )  . withoutTransactionId (  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["stripTransactionId"], "fileName": "com.facebook.presto.client.ClientSession"}, {"methodBody": ["METHOD_START", "{", "return   arguments ;", "}", "METHOD_END"], "methodName": ["getArguments"], "fileName": "com.facebook.presto.client.ClientTypeSignature"}, {"methodBody": ["METHOD_START", "{", "List < Object >    result    =    new   ArrayList <  >  (  )  ;", "for    ( Parameter   argument    :    arguments )     {", "switch    ( argument . getKind (  )  )     {", "case   NAMED _ TYPE    :", "result . add ( argument . getNamedTypeSignature (  )  . getName (  )  )  ;", "break ;", "default    :", "return   new   ArrayList <  >  (  )  ;", "}", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["getLiteralArguments"], "fileName": "com.facebook.presto.client.ClientTypeSignature"}, {"methodBody": ["METHOD_START", "{", "return   rawType ;", "}", "METHOD_END"], "methodName": ["getRawType"], "fileName": "com.facebook.presto.client.ClientTypeSignature"}, {"methodBody": ["METHOD_START", "{", "List < ClientTypeSignature >    result    =    new   ArrayList <  >  (  )  ;", "for    ( ClientTypeSignatureParameter   argument    :    arguments )     {", "switch    ( argument . getKind (  )  )     {", "case   TYPE    :", "result . add ( argument . getTypeSignature (  )  )  ;", "break ;", "case   NAMED _ TYPE    :", "result . add ( new   ClientTypeSignature ( argument . getNamedTypeSignature (  )  . getTypeSignature (  )  )  )  ;", "break ;", "default    :", "return   new   ArrayList <  >  (  )  ;", "}", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["getTypeArguments"], "fileName": "com.facebook.presto.client.ClientTypeSignature"}, {"methodBody": ["METHOD_START", "{", "switch    ( parameter . getKind (  )  )     {", "case   LONG    :", "throw   new   UnsupportedOperationException (  \" Unexpected   long   type   literal   returned   by   legacy   server \"  )  ;", "case   TYPE    :", "return   TypeSignatureParameter . of (  . toTypeSignature ( parameter . getTypeSignature (  )  )  )  ;", "case   NAMED _ TYPE    :", "return   TypeSignatureParameter . of ( parameter . getNamedTypeSignature (  )  )  ;", "default    :", "throw   new   UnsupportedOperationException (  (  \" Unknown   parameter   kind    \"     +     ( parameter . getKind (  )  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["legacyClientTypeSignatureParameterToTypeSignatureParameter"], "fileName": "com.facebook.presto.client.ClientTypeSignature"}, {"methodBody": ["METHOD_START", "{", "String   fields    =    arguments . stream (  )  . map ( ClientTypeSignatureParameter :  : getNamedTypeSignature )  . map (  (    parameter )     -  >     {", "if    ( parameter . getName (  )  . isPresent (  )  )     {", "return   format (  \"  % s    % s \"  ,    parameter . getName (  )  . get (  )  ,    parameter . getTypeSignature (  )  . toString (  )  )  ;", "}", "return   parameter . getTypeSignature (  )  . toString (  )  ;", "}  )  . collect ( Collectors . joining (  \"  ,  \"  )  )  ;", "return   String . format (  \" row (  % s )  \"  ,    fields )  ;", "}", "METHOD_END"], "methodName": ["rowToString"], "fileName": "com.facebook.presto.client.ClientTypeSignature"}, {"methodBody": ["METHOD_START", "{", "List < TypeSignatureParameter >    parameters    =    signature . getArguments (  )  . stream (  )  . map ( ClientTypeSignature :  : legacyClientTypeSignatureParameterToTypeSignatureParameter )  . collect ( Collectors . toList (  )  )  ;", "return   new   spi . type . TypeSignature ( signature . getRawType (  )  ,    parameters )  ;", "}", "METHOD_END"], "methodName": ["toTypeSignature"], "fileName": "com.facebook.presto.client.ClientTypeSignature"}, {"methodBody": ["METHOD_START", "{", "return   kind ;", "}", "METHOD_END"], "methodName": ["getKind"], "fileName": "com.facebook.presto.client.ClientTypeSignatureParameter"}, {"methodBody": ["METHOD_START", "{", "return   getValue ( LONG ,    Long . class )  ;", "}", "METHOD_END"], "methodName": ["getLongLiteral"], "fileName": "com.facebook.presto.client.ClientTypeSignatureParameter"}, {"methodBody": ["METHOD_START", "{", "return   getValue ( NAMED _ TYPE ,    NamedTypeSignature . class )  ;", "}", "METHOD_END"], "methodName": ["getNamedTypeSignature"], "fileName": "com.facebook.presto.client.ClientTypeSignatureParameter"}, {"methodBody": ["METHOD_START", "{", "return   getValue ( TYPE ,    ClientTypeSignature . class )  ;", "}", "METHOD_END"], "methodName": ["getTypeSignature"], "fileName": "com.facebook.presto.client.ClientTypeSignatureParameter"}, {"methodBody": ["METHOD_START", "{", "return   value ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "com.facebook.presto.client.ClientTypeSignatureParameter"}, {"methodBody": ["METHOD_START", "{", "if    (  ( kind )     !  =    expectedParameterKind )     {", "throw   new   IllegalArgumentException ( String . format (  \" ParameterKind   is    [  % s ]    but   expected    [  % s ]  \"  ,    kind ,    expectedParameterKind )  )  ;", "}", "return   target . cast ( value )  ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "com.facebook.presto.client.ClientTypeSignatureParameter"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.client.Column"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.facebook.presto.client.Column"}, {"methodBody": ["METHOD_START", "{", "return   typeSignature ;", "}", "METHOD_END"], "methodName": ["getTypeSignature"], "fileName": "com.facebook.presto.client.Column"}, {"methodBody": ["METHOD_START", "{", "return   columnNumber ;", "}", "METHOD_END"], "methodName": ["getColumnNumber"], "fileName": "com.facebook.presto.client.ErrorLocation"}, {"methodBody": ["METHOD_START", "{", "return   lineNumber ;", "}", "METHOD_END"], "methodName": ["getLineNumber"], "fileName": "com.facebook.presto.client.ErrorLocation"}, {"methodBody": ["METHOD_START", "{", "return   cause ;", "}", "METHOD_END"], "methodName": ["getCause"], "fileName": "com.facebook.presto.client.FailureInfo"}, {"methodBody": ["METHOD_START", "{", "return   errorLocation ;", "}", "METHOD_END"], "methodName": ["getErrorLocation"], "fileName": "com.facebook.presto.client.FailureInfo"}, {"methodBody": ["METHOD_START", "{", "return   message ;", "}", "METHOD_END"], "methodName": ["getMessage"], "fileName": "com.facebook.presto.client.FailureInfo"}, {"methodBody": ["METHOD_START", "{", "return   stack ;", "}", "METHOD_END"], "methodName": ["getStack"], "fileName": "com.facebook.presto.client.FailureInfo"}, {"methodBody": ["METHOD_START", "{", "return   suppressed ;", "}", "METHOD_END"], "methodName": ["getSuppressed"], "fileName": "com.facebook.presto.client.FailureInfo"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.facebook.presto.client.FailureInfo"}, {"methodBody": ["METHOD_START", "{", "return   FailureInfo . toException ( this )  ;", "}", "METHOD_END"], "methodName": ["toException"], "fileName": "com.facebook.presto.client.FailureInfo"}, {"methodBody": ["METHOD_START", "{", "if    ( failureInfo    =  =    null )     {", "return   null ;", "}", ". FailureException   failure    =    new    . FailureException ( failureInfo . getType (  )  ,    failureInfo . getMessage (  )  ,     . toException ( failureInfo . getCause (  )  )  )  ;", "for    (    suppressed    :    failureInfo . getSuppressed (  )  )     {", "failure . addSuppressed (  . toException ( suppressed )  )  ;", "}", "ImmutableList . Builder < StackTraceElement >    stackTraceBuilder    =    ImmutableList . builder (  )  ;", "for    ( String   stack    :    failureInfo . getStack (  )  )     {", "stackTraceBuilder . add (  . toStackTraceElement ( stack )  )  ;", "}", "ImmutableList < StackTraceElement >    stackTrace    =    stackTraceBuilder . build (  )  ;", "failure . setStackTrace ( stackTrace . toArray ( new   StackTraceElement [ stackTrace . size (  )  ]  )  )  ;", "return   failure ;", "}", "METHOD_END"], "methodName": ["toException"], "fileName": "com.facebook.presto.client.FailureInfo"}, {"methodBody": ["METHOD_START", "{", "Matcher   matcher    =    FailureInfo . STACK _ TRACE _ PATTERN . matcher ( stack )  ;", "if    ( matcher . matches (  )  )     {", "String   declaringClass    =    matcher . group (  1  )  ;", "String   methodName    =    matcher . group (  2  )  ;", "String   fileName    =    matcher . group (  3  )  ;", "int   number    =     -  1  ;", "if    ( fileName . equals (  \" Native   Method \"  )  )     {", "fileName    =    null ;", "number    =     -  2  ;", "} else", "if    (  ( matcher . group (  4  )  )     !  =    null )     {", "number    =    Integer . parseInt ( matcher . group (  4  )  )  ;", "}", "return   new   StackTraceElement ( declaringClass ,    methodName ,    fileName ,    number )  ;", "}", "return   new   StackTraceElement (  \" Unknown \"  ,    stack ,    null ,     (  -  1  )  )  ;", "}", "METHOD_END"], "methodName": ["toStackTraceElement"], "fileName": "com.facebook.presto.client.FailureInfo"}, {"methodBody": ["METHOD_START", "{", "if    ( data    =  =    null )     {", "return   null ;", "}", "Objects . requireNonNull ( columns ,     \" columns   is   null \"  )  ;", "List < TypeSignature >    signatures    =    columns . stream (  )  . map (  (    column )     -  >    parseTypeSignature ( column . getType (  )  )  )  . collect ( Collectors . toList (  )  )  ;", "ImmutableList . Builder < List < Object >  >    rows    =    ImmutableList . builder (  )  ;", "for    ( List < Object >    row    :    data )     {", "checkArgument (  (  ( row . size (  )  )     =  =     ( columns . size (  )  )  )  ,     \" row / column   size   mismatch \"  )  ;", "List < Object >    newRow    =    new   ArrayList <  >  (  )  ;", "for    ( int   i    =     0  ;    i    <     ( row . size (  )  )  ;    i +  +  )     {", "newRow . add (  . fixValue ( signatures . get ( i )  ,    row . get ( i )  )  )  ;", "}", "rows . add ( Collections . unmodifiableList ( newRow )  )  ;", "}", "return   rows . build (  )  ;", "}", "METHOD_END"], "methodName": ["fixData"], "fileName": "com.facebook.presto.client.FixJsonDataUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( value    =  =    null )     {", "return   null ;", "}", "if    ( signature . getBase (  )  . equals ( ARRAY )  )     {", "List < Object >    fixedValue    =    new   ArrayList <  >  (  )  ;", "for    ( Object   object    :    List . class . cast ( value )  )     {", "fixedValue . add (  . fixValue ( signature . getTypeParametersAsTypeSignatures (  )  . get (  0  )  ,    object )  )  ;", "}", "return   fixedValue ;", "}", "if    ( signature . getBase (  )  . equals ( MAP )  )     {", "TypeSignature   keySignature    =    signature . getTypeParametersAsTypeSignatures (  )  . get (  0  )  ;", "TypeSignature   valueSignature    =    signature . getTypeParametersAsTypeSignatures (  )  . get (  1  )  ;", "Map < Object ,    Object >    fixedValue    =    new   HashMap <  >  (  )  ;", "for    ( Map . Entry <  ?  ,     ?  >    entry    :     (  ( Set < Map . Entry <  ?  ,     ?  >  >  )     ( Map . class . cast ( value )  . entrySet (  )  )  )  )     {", "fixedValue . put (  . fixValue ( keySignature ,    entry . getKey (  )  )  ,     . fixValue ( valueSignature ,    entry . getValue (  )  )  )  ;", "}", "return   fixedValue ;", "}", "if    ( signature . getBase (  )  . equals ( ROW )  )     {", "Map < String ,    Object >    fixedValue    =    new   LinkedHashMap <  >  (  )  ;", "List < Object >    listValue    =    List . class . cast ( value )  ;", "checkArgument (  (  ( listValue . size (  )  )     =  =     ( signature . getParameters (  )  . size (  )  )  )  ,     \" Mismatched   data   values   and   row   type \"  )  ;", "for    ( int   i    =     0  ;    i    <     ( listValue . size (  )  )  ;    i +  +  )     {", "TypeSignatureParameter   parameter    =    signature . getParameters (  )  . get ( i )  ;", "checkArgument (  (  ( parameter . getKind (  )  )     =  =     ( ParameterKind . NAMED _ TYPE )  )  ,     \" Unexpected   parameter    [  % s ]    for   row   type \"  ,    parameter )  ;", "NamedTypeSignature   namedTypeSignature    =    parameter . getNamedTypeSignature (  )  ;", "String   key    =    namedTypeSignature . getName (  )  . orElse (  (  \" field \"     +    i )  )  ;", "fixedValue . put ( key ,     . fixValue ( namedTypeSignature . getTypeSignature (  )  ,    listValue . get ( i )  )  )  ;", "}", "return   fixedValue ;", "}", "switch    ( signature . getBase (  )  )     {", "case   BIGINT    :", "if    ( value   instanceof   String )     {", "return   Long . parseLong (  (  ( String )     ( value )  )  )  ;", "}", "return    (  ( Number )     ( value )  )  . longValue (  )  ;", "case   INTEGER    :", "if    ( value   instanceof   String )     {", "return   Integer . parseInt (  (  ( String )     ( value )  )  )  ;", "}", "return    (  ( Number )     ( value )  )  . intValue (  )  ;", "case   SMALLINT    :", "if    ( value   instanceof   String )     {", "return   Short . parseShort (  (  ( String )     ( value )  )  )  ;", "}", "return    (  ( Number )     ( value )  )  . shortValue (  )  ;", "case   TINYINT    :", "if    ( value   instanceof   String )     {", "return   Byte . parseByte (  (  ( String )     ( value )  )  )  ;", "}", "return    (  ( Number )     ( value )  )  . byteValue (  )  ;", "case   DOUBLE    :", "if    ( value   instanceof   String )     {", "return   Double . parseDouble (  (  ( String )     ( value )  )  )  ;", "}", "return    (  ( Number )     ( value )  )  . doubleValue (  )  ;", "case   REAL    :", "if    ( value   instanceof   String )     {", "return   Float . parseFloat (  (  ( String )     ( value )  )  )  ;", "}", "return    (  ( Number )     ( value )  )  . floatValue (  )  ;", "case   BOOLEAN    :", "if    ( value   instanceof   String )     {", "return   Boolean . parseBoolean (  (  ( String )     ( value )  )  )  ;", "}", "return   Boolean . class . cast ( value )  ;", "case   VARCHAR    :", "case   JSON    :", "case   TIME    :", "case   TIME _ WITH _ TIME _ ZONE    :", "case   TIMESTAMP    :", "case   TIMESTAMP _ WITH _ TIME _ ZONE    :", "case   DATE    :", "case   INTERVAL _ YEAR _ TO _ MONTH    :", "case   INTERVAL _ DAY _ TO _ SECOND    :", "case   IPADDRESS    :", "case   DECIMAL    :", "case   CHAR    :", "case   GEOMETRY    :", "return   String . class . cast ( value )  ;", "case   BING _ TILE    :", "return   value ;", "default    :", "if    ( value   instanceof   String )     {", "return   Base 6  4  . getDecoder (  )  . decode (  (  ( String )     ( value )  )  )  ;", "}", "return   value ;", "}", "}", "METHOD_END"], "methodName": ["fixValue"], "fileName": "com.facebook.presto.client.FixJsonDataUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( millis    =  =     ( Long . MIN _ VALUE )  )     {", "return    . LONG _ MIN _ VALUE ;", "}", "String   sign    =     \"  \"  ;", "if    ( millis    <     0  )     {", "sign    =     \"  -  \"  ;", "millis    =     - millis ;", "}", "long   day    =    millis    /     (  . MILLIS _ IN _ DAY )  ;", "millis    %  =     . MILLIS _ IN _ DAY ;", "long   hour    =    millis    /     (  . MILLIS _ IN _ HOUR )  ;", "millis    %  =     . MILLIS _ IN _ HOUR ;", "long   minute    =    millis    /     (  . MILLIS _ IN _ MINUTE )  ;", "millis    %  =     . MILLIS _ IN _ MINUTE ;", "long   second    =    millis    /     (  . MILLIS _ IN _ SECOND )  ;", "millis    %  =     . MILLIS _ IN _ SECOND ;", "return   String . format (  \"  % s % d    %  0  2 d :  %  0  2 d :  %  0  2 d .  %  0  3 d \"  ,    sign ,    day ,    hour ,    minute ,    second ,    millis )  ;", "}", "METHOD_END"], "methodName": ["formatMillis"], "fileName": "com.facebook.presto.client.IntervalDayTime"}, {"methodBody": ["METHOD_START", "{", "if    ( value . equals ( IntervalDayTime . LONG _ MIN _ VALUE )  )     {", "return   Long . MIN _ VALUE ;", "}", "long   signum    =     1  ;", "if    ( value . startsWith (  \"  -  \"  )  )     {", "signum    =     -  1  ;", "value    =    value . substring (  1  )  ;", "}", "Matcher   matcher    =    IntervalDayTime . FORMAT . matcher ( value )  ;", "if    (  !  ( matcher . matches (  )  )  )     {", "throw   new   IllegalArgumentException (  (  \" Invalid   day - time   interval :     \"     +    value )  )  ;", "}", "long   days    =    Long . parseLong ( matcher . group (  1  )  )  ;", "long   hours    =    Long . parseLong ( matcher . group (  2  )  )  ;", "long   minutes    =    Long . parseLong ( matcher . group (  3  )  )  ;", "long   seconds    =    Long . parseLong ( matcher . group (  4  )  )  ;", "long   millis    =    Long . parseLong ( matcher . group (  5  )  )  ;", "return    ( IntervalDayTime . toMillis ( days ,    hours ,    minutes ,    seconds ,    millis )  )     *    signum ;", "}", "METHOD_END"], "methodName": ["parseMillis"], "fileName": "com.facebook.presto.client.IntervalDayTime"}, {"methodBody": ["METHOD_START", "{", "try    {", "long   value    =    millis ;", "value    =    Math . addExact ( value ,    Math . multiplyExact ( day ,     . MILLIS _ IN _ DAY )  )  ;", "value    =    Math . addExact ( value ,    Math . multiplyExact ( hour ,     . MILLIS _ IN _ HOUR )  )  ;", "value    =    Math . addExact ( value ,    Math . multiplyExact ( minute ,     . MILLIS _ IN _ MINUTE )  )  ;", "value    =    Math . addExact ( value ,    Math . multiplyExact ( second ,     . MILLIS _ IN _ SECOND )  )  ;", "return   value ;", "}    catch    ( ArithmeticException   e )     {", "throw   new   IllegalArgumentException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["toMillis"], "fileName": "com.facebook.presto.client.IntervalDayTime"}, {"methodBody": ["METHOD_START", "{", "if    ( months    =  =     ( Integer . MIN _ VALUE )  )     {", "return    . INT _ MIN _ VALUE ;", "}", "String   sign    =     \"  \"  ;", "if    ( months    <     0  )     {", "sign    =     \"  -  \"  ;", "months    =     - months ;", "}", "return   String . format (  \"  % s % d -  % d \"  ,    sign ,     ( months    /     1  2  )  ,     ( months    %     1  2  )  )  ;", "}", "METHOD_END"], "methodName": ["formatMonths"], "fileName": "com.facebook.presto.client.IntervalYearMonth"}, {"methodBody": ["METHOD_START", "{", "if    ( value . equals ( IntervalYearMonth . INT _ MIN _ VALUE )  )     {", "return   Integer . MIN _ VALUE ;", "}", "int   signum    =     1  ;", "if    ( value . startsWith (  \"  -  \"  )  )     {", "signum    =     -  1  ;", "value    =    value . substring (  1  )  ;", "}", "Matcher   matcher    =    IntervalYearMonth . FORMAT . matcher ( value )  ;", "if    (  !  ( matcher . matches (  )  )  )     {", "throw   new   IllegalArgumentException (  (  \" Invalid   year - month   interval :     \"     +    value )  )  ;", "}", "int   years    =    Integer . parseInt ( matcher . group (  1  )  )  ;", "int   months    =    Integer . parseInt ( matcher . group (  2  )  )  ;", "return    ( IntervalYearMonth . toMonths ( years ,    months )  )     *    signum ;", "}", "METHOD_END"], "methodName": ["parseMonths"], "fileName": "com.facebook.presto.client.IntervalYearMonth"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   Math . addExact ( Math . multiplyExact ( year ,     1  2  )  ,    ms )  ;", "}    catch    ( ArithmeticException   e )     {", "throw   new   IllegalArgumentException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["toMonths"], "fileName": "com.facebook.presto.client.IntervalYearMonth"}, {"methodBody": ["METHOD_START", "{", "try    ( Response   response    =    client . newCall ( request )  . execute (  )  )     {", "if    (  (  ( response . code (  )  )     =  =     3  0  7  )     |  |     (  ( response . code (  )  )     =  =     3  0  8  )  )     {", "String   location    =    response . header ( LOCATION )  ;", "if    ( location    !  =    null )     {", "request    =    request . newBuilder (  )  . url ( location )  . build (  )  ;", "return    . execute ( codec ,    client ,    request )  ;", "}", "}", "ResponseBody   responseBody    =    Objects . requireNonNull ( response . body (  )  )  ;", "String   body    =    responseBody . string (  )  ;", "if    (  . isJson ( responseBody . contentType (  )  )  )     {", "return   new    ( response . code (  )  ,    response . message (  )  ,    response . headers (  )  ,    body ,    codec )  ;", "}", "return   new    ( response . code (  )  ,    response . message (  )  ,    response . headers (  )  ,    body )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "com.facebook.presto.client.JsonResponse"}, {"methodBody": ["METHOD_START", "{", "return   exception ;", "}", "METHOD_END"], "methodName": ["getException"], "fileName": "com.facebook.presto.client.JsonResponse"}, {"methodBody": ["METHOD_START", "{", "return   headers ;", "}", "METHOD_END"], "methodName": ["getHeaders"], "fileName": "com.facebook.presto.client.JsonResponse"}, {"methodBody": ["METHOD_START", "{", "return   responseBody ;", "}", "METHOD_END"], "methodName": ["getResponseBody"], "fileName": "com.facebook.presto.client.JsonResponse"}, {"methodBody": ["METHOD_START", "{", "return   statusCode ;", "}", "METHOD_END"], "methodName": ["getStatusCode"], "fileName": "com.facebook.presto.client.JsonResponse"}, {"methodBody": ["METHOD_START", "{", "return   statusMessage ;", "}", "METHOD_END"], "methodName": ["getStatusMessage"], "fileName": "com.facebook.presto.client.JsonResponse"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( hasValue )  )     {", "throw   new   IllegalStateException (  \"    does   not   contain   a   JSON   value \"  ,    exception )  ;", "}", "return   value ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "com.facebook.presto.client.JsonResponse"}, {"methodBody": ["METHOD_START", "{", "return   hasValue ;", "}", "METHOD_END"], "methodName": ["hasValue"], "fileName": "com.facebook.presto.client.JsonResponse"}, {"methodBody": ["METHOD_START", "{", "return    (  ( type    !  =    null )     &  &     (  \" application \"  . equals ( type . type (  )  )  )  )     &  &     (  \" json \"  . equals ( type . subtype (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["isJson"], "fileName": "com.facebook.presto.client.JsonResponse"}, {"methodBody": ["METHOD_START", "{", "String   value    =    nullToEmpty ( System . getenv (  \" KRB 5 CCNAME \"  )  )  ;", "if    ( value . startsWith (  . FILE _ PREFIX )  )     {", "value    =    value . substring (  . FILE _ PREFIX . length (  )  )  ;", "}", "return   Optional . ofNullable ( emptyToNull ( value )  )  ;", "}", "METHOD_END"], "methodName": ["defaultCredentialCachePath"], "fileName": "com.facebook.presto.client.KerberosUtil"}, {"methodBody": ["METHOD_START", "{", "return   version ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "com.facebook.presto.client.NodeVersion"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( user ,     \" user   is   null \"  )  ;", "Objects . requireNonNull ( password ,     \" password   is   null \"  )  ;", "if    ( user . contains (  \"  :  \"  )  )     {", "throw   new   CException (  \" Illegal   character    '  :  '    found   in   username \"  )  ;", "}", "String   credential    =    Credentials . basic ( user ,    password )  ;", "return    (    chain )     -  >    chain . proceed ( chain . request (  )  . newBuilder (  )  . header ( AUTHORIZATION ,    credential )  . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["basicAuth"], "fileName": "com.facebook.presto.client.OkHttpUtil"}, {"methodBody": ["METHOD_START", "{", "KeyStore   trustStore    =    KeyStore . getInstance ( KeyStore . getDefaultType (  )  )  ;", "try    {", "List < X 5  0  9 Certificate >    certificateChain    =    PemReader . readCertificateChain ( trustStorePath )  ;", "if    (  !  ( certificateChain . isEmpty (  )  )  )     {", "trustStore . load ( null ,    null )  ;", "for    ( X 5  0  9 Certificate   certificate    :    certificateChain )     {", "X 5  0  0 Principal   principal    =    certificate . getSubjectX 5  0  0 Principal (  )  ;", "trustStore . setCertificateEntry ( principal . getName (  )  ,    certificate )  ;", "}", "return   trustStore ;", "}", "}    catch    ( IOException    |    GeneralSecurityException   ignored )     {", "}", "try    ( InputStream   in    =    new   FileInputStream ( trustStorePath )  )     {", "trustStore . load ( in ,    trustStorePassword . map ( String :  : toCharArray )  . orElse ( null )  )  ;", "}", "return   trustStore ;", "}", "METHOD_END"], "methodName": ["loadTrustStore"], "fileName": "com.facebook.presto.client.OkHttpUtil"}, {"methodBody": ["METHOD_START", "{", "clientBuilder . cookieJar ( new   JavaNetCookieJar ( new   CookieManager (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["setupCookieJar"], "fileName": "com.facebook.presto.client.OkHttpUtil"}, {"methodBody": ["METHOD_START", "{", "OkHttpUtil . setupProxy ( clientBuilder ,    httpProxy ,    Proxy . Type . HTTP )  ;", "}", "METHOD_END"], "methodName": ["setupHttpProxy"], "fileName": "com.facebook.presto.client.OkHttpUtil"}, {"methodBody": ["METHOD_START", "{", "SpnegoHandler   handler    =    new   SpnegoHandler ( remoteServiceName ,    useCanonicalHostname ,    principal ,    kerberosConfig ,    keytab ,    credentialCache )  ;", "Builder . addInterceptor ( handler )  ;", "Builder . authenticator ( handler )  ;", "}", "METHOD_END"], "methodName": ["setupKerberos"], "fileName": "com.facebook.presto.client.OkHttpUtil"}, {"methodBody": ["METHOD_START", "{", "proxy . map ( OkHttpUtil :  : toUnresolvedAddress )  . map (  (    address )     -  >    new   Proxy ( type ,    address )  )  . ifPresent ( clientBuilder :  : proxy )  ;", "}", "METHOD_END"], "methodName": ["setupProxy"], "fileName": "com.facebook.presto.client.OkHttpUtil"}, {"methodBody": ["METHOD_START", "{", "OkHttpUtil . setupProxy ( clientBuilder ,    socksProxy ,    Proxy . Type . SOCKS )  ;", "}", "METHOD_END"], "methodName": ["setupSocksProxy"], "fileName": "com.facebook.presto.client.OkHttpUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  (  !  ( keyStorePath . isPresent (  )  )  )     &  &     (  !  ( trustStorePath . isPresent (  )  )  )  )     {", "return ;", "}", "try    {", "KeyStore   keyStore    =    null ;", "KeyManager [  ]    keyManagers    =    null ;", "if    ( keyStorePath . isPresent (  )  )     {", "char [  ]    keyManagerPassword ;", "try    {", "keyStore    =    PemReader . loadKeyStore ( new   File ( keyStorePath . get (  )  )  ,    new   File ( keyStorePath . get (  )  )  ,    keyStorePassword )  ;", "keyManagerPassword    =    new   char [  0  ]  ;", "}    catch    ( IOException    |    GeneralSecurityException   ignored )     {", "keyManagerPassword    =    keyStorePassword . map ( String :  : toCharArray )  . orElse ( null )  ;", "keyStore    =    KeyStore . getInstance ( KeyStore . getDefaultType (  )  )  ;", "try    ( InputStream   in    =    new   FileInputStream ( keyStorePath . get (  )  )  )     {", "keyStore . load ( in ,    keyManagerPassword )  ;", "}", "}", ". validateCertificates ( keyStore )  ;", "KeyManagerFactory   keyManagerFactory    =    KeyManagerFactory . getInstance ( KeyManagerFactory . getDefaultAlgorithm (  )  )  ;", "keyManagerFactory . init ( keyStore ,    keyManagerPassword )  ;", "keyManagers    =    keyManagerFactory . getKeyManagers (  )  ;", "}", "KeyStore   trustStore    =    keyStore ;", "if    ( trustStorePath . isPresent (  )  )     {", "trustStore    =     . loadTrustStore ( new   File ( trustStorePath . get (  )  )  ,    trustStorePassword )  ;", "}", "TrustManagerFactory   trustManagerFactory    =    TrustManagerFactory . getInstance ( TrustManagerFactory . getDefaultAlgorithm (  )  )  ;", "trustManagerFactory . init ( trustStore )  ;", "TrustManager [  ]    trustManagers    =    trustManagerFactory . getTrustManagers (  )  ;", "if    (  (  ( trustManagers . length )     !  =     1  )     |  |     (  !  (  ( trustManagers [  0  ]  )    instanceof   X 5  0  9 TrustManager )  )  )     {", "throw   new   RuntimeException (  (  \" Unexpected   default   trust   managers :  \"     +     ( Arrays . toString ( trustManagers )  )  )  )  ;", "}", "X 5  0  9 TrustManager   trustManager    =     (  ( X 5  0  9 TrustManager )     ( trustManagers [  0  ]  )  )  ;", "SSLContext   sslContext    =    SSLContext . getInstance (  \" TLS \"  )  ;", "sslContext . init ( keyManagers ,    new   TrustManager [  ]  {    trustManager    }  ,    null )  ;", "clientBuilder . sslSocketFactory ( sslContext . getSocketFactory (  )  ,    trustManager )  ;", "}    catch    ( GeneralSecurityException    |    IOException   e )     {", "throw   new   ClientException (  (  \" Error   setting   up   SSL :     \"     +     ( e . getMessage (  )  )  )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["setupSsl"], "fileName": "com.facebook.presto.client.OkHttpUtil"}, {"methodBody": ["METHOD_START", "{", "clientBuilder . connectTimeout ( timeout ,    unit )  . readTimeout ( timeout ,    unit )  . writeTimeout ( timeout ,    unit )  ;", "}", "METHOD_END"], "methodName": ["setupTimeouts"], "fileName": "com.facebook.presto.client.OkHttpUtil"}, {"methodBody": ["METHOD_START", "{", "return   InetSocketAddress . createUnresolved ( address . getHost (  )  ,    address . getPort (  )  )  ;", "}", "METHOD_END"], "methodName": ["toUnresolvedAddress"], "fileName": "com.facebook.presto.client.OkHttpUtil"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( accessToken ,     \" accessToken   is   null \"  )  ;", "checkArgum ( CharMatcher . inRange (  (  ( char )     (  3  3  )  )  ,     (  ( char )     (  1  2  6  )  )  )  . matchesAllOf ( accessToken )  )  ;", "return    (    chain )     -  >    chain . proceed ( chain . request (  )  . newBuilder (  )  . addHeader ( AUTHORIZATION ,     (  \" Bearer    \"     +    accessToken )  )  . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["tokenAuth"], "fileName": "com.facebook.presto.client.OkHttpUtil"}, {"methodBody": ["METHOD_START", "{", "return    (    chain )     -  >    chain . proceed ( chain . request (  )  . newBuilder (  )  . header ( USER _ AGENT ,    userAgent )  . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["userAgent"], "fileName": "com.facebook.presto.client.OkHttpUtil"}, {"methodBody": ["METHOD_START", "{", "for    ( String   alias    :    Collections . list ( keyStore . aliases (  )  )  )     {", "if    (  !  ( keyStore . isKeyEntry ( alias )  )  )     {", "continue ;", "}", "Certificate   certificate    =    keyStore . getCertificate ( alias )  ;", "if    (  !  ( certificate   instanceof   X 5  0  9 Certificate )  )     {", "continue ;", "}", "try    {", "(  ( X 5  0  9 Certificate )     ( certificate )  )  . checkValidity (  )  ;", "}    catch    ( CertificateExpiredException   e )     {", "throw   new   CertificateExpiredException (  (  \" KeyStore   certificate   is   expired :     \"     +     ( e . getMessage (  )  )  )  )  ;", "}    catch    ( CertificateNotYetValidException   e )     {", "throw   new   CertificateNotYetValidException (  (  \" KeyStore   certificate   is   not   yet   valid :     \"     +     ( e . getMessage (  )  )  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["validateCertificates"], "fileName": "com.facebook.presto.client.OkHttpUtil"}, {"methodBody": ["METHOD_START", "{", "return   errorCode ;", "}", "METHOD_END"], "methodName": ["getErrorCode"], "fileName": "com.facebook.presto.client.QueryError"}, {"methodBody": ["METHOD_START", "{", "return   errorLocation ;", "}", "METHOD_END"], "methodName": ["getErrorLocation"], "fileName": "com.facebook.presto.client.QueryError"}, {"methodBody": ["METHOD_START", "{", "return   errorName ;", "}", "METHOD_END"], "methodName": ["getErrorName"], "fileName": "com.facebook.presto.client.QueryError"}, {"methodBody": ["METHOD_START", "{", "return   errorType ;", "}", "METHOD_END"], "methodName": ["getErrorType"], "fileName": "com.facebook.presto.client.QueryError"}, {"methodBody": ["METHOD_START", "{", "return   failureInfo ;", "}", "METHOD_END"], "methodName": ["getFailureInfo"], "fileName": "com.facebook.presto.client.QueryError"}, {"methodBody": ["METHOD_START", "{", "return   message ;", "}", "METHOD_END"], "methodName": ["getMessage"], "fileName": "com.facebook.presto.client.QueryError"}, {"methodBody": ["METHOD_START", "{", "return   sqlState ;", "}", "METHOD_END"], "methodName": ["getSqlState"], "fileName": "com.facebook.presto.client.QueryError"}, {"methodBody": ["METHOD_START", "{", "return   environment ;", "}", "METHOD_END"], "methodName": ["getEnvironment"], "fileName": "com.facebook.presto.client.ServerInfo"}, {"methodBody": ["METHOD_START", "{", "return   nodeVersion ;", "}", "METHOD_END"], "methodName": ["getNodeVersion"], "fileName": "com.facebook.presto.client.ServerInfo"}, {"methodBody": ["METHOD_START", "{", "return   uptime ;", "}", "METHOD_END"], "methodName": ["getUptime"], "fileName": "com.facebook.presto.client.ServerInfo"}, {"methodBody": ["METHOD_START", "{", "return   coordinator ;", "}", "METHOD_END"], "methodName": ["isCoordinator"], "fileName": "com.facebook.presto.client.ServerInfo"}, {"methodBody": ["METHOD_START", "{", "String   hostName    =    request . url (  )  . host (  )  ;", "String   principal    =     . makeServicePrincipal ( remoteServiceName ,    hostName ,    useCanonicalHostname )  ;", "byte [  ]    token    =    generateToken ( principal )  ;", "String   credential    =    String . format (  \"  % s    % s \"  ,     . NEGOTIATE ,    Base 6  4  . getEncoder (  )  . encodeToString ( token )  )  ;", "return   request . newBuilder (  )  . header ( AUTHORIZATION ,    credential )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["authenticate"], "fileName": "com.facebook.presto.client.SpnegoHandler"}, {"methodBody": ["METHOD_START", "{", "try    {", "InetAddress   address    =    InetAddress . getByName ( hostName )  ;", "String   fullHostName ;", "if    (  \" localhost \"  . equalsIgnoreCase ( address . getHostName (  )  )  )     {", "fullHostName    =    InetAddress . getLocalHost (  )  . getCanonicalHostName (  )  ;", "} else    {", "fullHostName    =    address . getCanonicalHostName (  )  ;", "}", "if    ( fullHostName . equalsIgnoreCase (  \" localhost \"  )  )     {", "throw   new   CException (  \" Fully   qualified   name   of   localhost   should   not   resolve   to    ' localhost '  .    System   configuration   error ?  \"  )  ;", "}", "return   fullHostName ;", "}    catch    ( UnknownHostException   e )     {", "throw   new   CException (  (  \" Failed   to   resolve   host :     \"     +    hostName )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["canonicalizeServiceHostName"], "fileName": "com.facebook.presto.client.SpnegoHandler"}, {"methodBody": ["METHOD_START", "{", "try    {", "turn   new   Oid ( value )  ;", "}    catch    ( GSSException   e )     {", "throw   new   AssertionError ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["createOid"], "fileName": "com.facebook.presto.client.SpnegoHandler"}, {"methodBody": ["METHOD_START", "{", "LoginContext   loginContext    =    new   LoginContext (  \"  \"  ,    null ,    null ,    new   Configuration (  )     {", "@ Override", "public   AppConfigurationEntry [  ]    getAppConfigurationEntry ( String   name )     {", "Builder < String ,    String >    options    =    ImmutableMap . builder (  )  ;", "options . put (  \" refreshKrb 5 Config \"  ,     \" true \"  )  ;", "options . put (  \" doNotPrompt \"  ,     \" true \"  )  ;", "options . put (  \" useKeyTab \"  ,     \" true \"  )  ;", "if    ( Boolean . getBoolean (  \" debugKerberos \"  )  )     {", "options . put (  \" debug \"  ,     \" true \"  )  ;", "}", "keytab . ifPresent (  (    file )     -  >    options . put (  \" keyTab \"  ,    file . getAbsolutePath (  )  )  )  ;", "credentialCache . ifPresent (  (    file )     -  >     {", "options . put (  \" ticketCache \"  ,    file . getAbsolutePath (  )  )  ;", "options . put (  \" useTicketCache \"  ,     \" true \"  )  ;", "options . put (  \" renewTGT \"  ,     \" true \"  )  ;", "}  )  ;", "principal . ifPresent (  (    value )     -  >    options . put (  \" principal \"  ,    value )  )  ;", "return   new   AppConfigurationEntry [  ]  {    new   AppConfigurationEntry ( Krb 5 LoginModule . class . getName (  )  ,    AppConfigurationEntry . LoginModuleControlFlag . REQUIRED ,    options . build (  )  )     }  ;", "}", "}  )  ;", "loginContext . login (  )  ;", "Subject   subject    =    loginContext . getSubject (  )  ;", "Principal   clientPrincipal    =    subject . getPrincipals (  )  . iterator (  )  . next (  )  ;", "GSSCredential   clientCredential    =    SpnegoHandler . doAs ( subject ,     (  )     -  >    SpnegoHandler . GSS _ MANAGER . createCredential ( SpnegoHandler . GSS _ MANAGER . createName ( clientPrincipal . getName (  )  ,    GSSName . NT _ USER _ NAME )  ,    GSSCredential . DEFAULT _ LIFETIME ,    SpnegoHandler . KERBEROS _ OID ,    GSSCredential . INITIATE _ ONLY )  )  ;", "return   new   SpnegoHandler . Session ( loginContext ,    clientCredential )  ;", "}", "METHOD_END"], "methodName": ["createSession"], "fileName": "com.facebook.presto.client.SpnegoHandler"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   Subject . doAs ( subject ,     (  ( PrivilegedExceptionAction < T >  )     ( action :  : get )  )  )  ;", "}    catch    ( PrivilegedActionException   e )     {", "Throwable   t    =    e . getCause (  )  ;", "throwIfInstanceOf ( t ,    GSSExceptionass )  ;", "throwIfUnchecked ( t )  ;", "throw   new   RuntimeException ( t )  ;", "}", "}", "METHOD_END"], "methodName": ["doAs"], "fileName": "com.facebook.presto.client.SpnegoHandler"}, {"methodBody": ["METHOD_START", "{", "GSSContext   context    =    null ;", "try    {", ". Session   session    =    getSession (  )  ;", "context    =     . doAs ( session . getLoginContext (  )  . getSubject (  )  ,     (  )     -  >     {", "GSSContext   result    =     . GSS _ MANAGER . createContext (  . GSS _ MANAGER . createName ( servicePrincipal ,    GSSName . NT _ HOSTBASED _ SERVICE )  ,     . SPNEGO _ OID ,    session . getClientCredential (  )  ,    GSSContext . INDEFINITE _ LIFETIME )  ;", "result . requestMutualAuth ( true )  ;", "result . requestConf ( true )  ;", "result . requestInteg ( true )  ;", "result . requestCredDeleg ( false )  ;", "return   result ;", "}  )  ;", "byte [  ]    token    =    context . initSecContext ( new   byte [  0  ]  ,     0  ,     0  )  ;", "if    ( token    =  =    null )     {", "throw   new   LoginException (  \" No   token   generated   from   GSS   context \"  )  ;", "}", "return   token ;", "}    catch    ( GSSException    |    LoginException   e )     {", "throw   new   ClientException ( String . format (  \" Kerberos   error   for    [  % s ]  :     % s \"  ,    servicePrincipal ,    e . getMessage (  )  )  ,    e )  ;", "}    finally    {", "try    {", "if    ( context    !  =    null )     {", "context . dispose (  )  ;", "}", "}    catch    ( GSSException   ignored )     {", "}", "}", "}", "METHOD_END"], "methodName": ["generateToken"], "fileName": "com.facebook.presto.client.SpnegoHandler"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( clientSession )     =  =    null )     |  |     ( clientSession . needsRefresh (  )  )  )     {", "clientSession    =    createSession (  )  ;", "}", "return   clientSession ;", "}", "METHOD_END"], "methodName": ["getSession"], "fileName": "com.facebook.presto.client.SpnegoHandler"}, {"methodBody": ["METHOD_START", "{", "return   Splitter . on ( whitespace (  )  )  . split ( value )  . iterator (  )  . next (  )  . equalsIgnoreCase ( SpnegoHandler . NEGOTIATE )  ;", "}", "METHOD_END"], "methodName": ["isNegotiate"], "fileName": "com.facebook.presto.client.SpnegoHandler"}, {"methodBody": ["METHOD_START", "{", "String   serviceHostName    =    hostName ;", "if    ( useCanonicalHostname )     {", "serviceHostName    =     . canonicalizeServiceHostName ( hostName )  ;", "}", "return   String . format (  \"  % s @  % s \"  ,    serviceName ,    serviceHostName . toLowerCase ( Locale . US )  )  ;", "}", "METHOD_END"], "methodName": ["makeServicePrincipal"], "fileName": "com.facebook.presto.client.SpnegoHandler"}, {"methodBody": ["METHOD_START", "{", "return   new   StageStats . Builder (  )  ;", "}", "METHOD_END"], "methodName": ["builder"], "fileName": "com.facebook.presto.client.StageStats"}, {"methodBody": ["METHOD_START", "{", "return   completedSplits ;", "}", "METHOD_END"], "methodName": ["getCompletedSplits"], "fileName": "com.facebook.presto.client.StageStats"}, {"methodBody": ["METHOD_START", "{", "return   cpuTimeMillis ;", "}", "METHOD_END"], "methodName": ["getCpuTimeMillis"], "fileName": "com.facebook.presto.client.StageStats"}, {"methodBody": ["METHOD_START", "{", "return   nodes ;", "}", "METHOD_END"], "methodName": ["getNodes"], "fileName": "com.facebook.presto.client.StageStats"}, {"methodBody": ["METHOD_START", "{", "return   processedBytes ;", "}", "METHOD_END"], "methodName": ["getProcessedBytes"], "fileName": "com.facebook.presto.client.StageStats"}, {"methodBody": ["METHOD_START", "{", "return   processedRows ;", "}", "METHOD_END"], "methodName": ["getProcessedRows"], "fileName": "com.facebook.presto.client.StageStats"}, {"methodBody": ["METHOD_START", "{", "return   queuedSplits ;", "}", "METHOD_END"], "methodName": ["getQueuedSplits"], "fileName": "com.facebook.presto.client.StageStats"}, {"methodBody": ["METHOD_START", "{", "return   runningSplits ;", "}", "METHOD_END"], "methodName": ["getRunningSplits"], "fileName": "com.facebook.presto.client.StageStats"}, {"methodBody": ["METHOD_START", "{", "return   stageId ;", "}", "METHOD_END"], "methodName": ["getStageId"], "fileName": "com.facebook.presto.client.StageStats"}, {"methodBody": ["METHOD_START", "{", "return   state ;", "}", "METHOD_END"], "methodName": ["getState"], "fileName": "com.facebook.presto.client.StageStats"}, {"methodBody": ["METHOD_START", "{", "return   subStages ;", "}", "METHOD_END"], "methodName": ["getSubStages"], "fileName": "com.facebook.presto.client.StageStats"}, {"methodBody": ["METHOD_START", "{", "return   totalSplits ;", "}", "METHOD_END"], "methodName": ["getTotalSplits"], "fileName": "com.facebook.presto.client.StageStats"}, {"methodBody": ["METHOD_START", "{", "return   userTimeMillis ;", "}", "METHOD_END"], "methodName": ["getUserTimeMillis"], "fileName": "com.facebook.presto.client.StageStats"}, {"methodBody": ["METHOD_START", "{", "return   wallTimeMillis ;", "}", "METHOD_END"], "methodName": ["getWallTimeMillis"], "fileName": "com.facebook.presto.client.StageStats"}, {"methodBody": ["METHOD_START", "{", "return   done ;", "}", "METHOD_END"], "methodName": ["isDone"], "fileName": "com.facebook.presto.client.StageStats"}, {"methodBody": ["METHOD_START", "{", "return   new   StatementClientV 1  ( httpClient ,    session ,    query )  ;", "}", "METHOD_END"], "methodName": ["newStatementClient"], "fileName": "com.facebook.presto.client.StatementClientFactory"}, {"methodBody": ["METHOD_START", "{", "HttpUrl   url    =    HttpUrl . get ( session . getServer (  )  )  ;", "if    ( url    =  =    null )     {", "throw   new   ClientException (  (  \" Invalid   server   URL :     \"     +     ( session . getServer (  )  )  )  )  ;", "}", "url    =    url . newBuilder (  )  . encodedPath (  \"  / v 1  / statement \"  )  . build (  )  ;", "Request . Builder   builder    =    prepareRequest ( url )  . post ( RequestBody . create (  . MEDIA _ TYPE _ TEXT ,    query )  )  ;", "if    (  ( session . getSource (  )  )     !  =    null )     {", "builder . addHeader ( PrestoHeaders . PRESTO _ SOURCE ,    session . getSource (  )  )  ;", "}", "if    (  (  ( session . getClientTags (  )  )     !  =    null )     &  &     (  !  ( session . getClientTags (  )  . isEmpty (  )  )  )  )     {", "builder . addHeader ( PrestoHeaders . PRESTO _ CLIENT _ TAGS ,    Joiner . on (  \"  ,  \"  )  . join ( session . getClientTags (  )  )  )  ;", "}", "if    (  ( session . getClientInfo (  )  )     !  =    null )     {", "builder . addHeader ( PrestoHeaders . PRESTO _ CLIENT _ INFO ,    session . getClientInfo (  )  )  ;", "}", "if    (  ( session . getCatalog (  )  )     !  =    null )     {", "builder . addHeader ( PrestoHeaders . PRESTO _ CATALOG ,    session . getCatalog (  )  )  ;", "}", "if    (  ( session . getSchema (  )  )     !  =    null )     {", "builder . addHeader ( PrestoHeaders . PRESTO _ SCHEMA ,    session . getSchema (  )  )  ;", "}", "builder . addHeader ( PrestoHeaders . PRESTO _ TIME _ ZONE ,    session . getTimeZone (  )  . getId (  )  )  ;", "if    (  ( session . getLocale (  )  )     !  =    null )     {", "builder . addHeader ( PrestoHeaders . PRESTO _ LANGUAGE ,    session . getLocale (  )  . toLanguageTag (  )  )  ;", "}", "Map < String ,    String >    property    =    session . getProperties (  )  ;", "for    ( Map . Entry < String ,    String >    entry    :    property . entrySet (  )  )     {", "builder . addHeader ( PrestoHeaders . PRESTO _ SESSION ,     (  (  ( entry . getKey (  )  )     +     \"  =  \"  )     +     ( entry . getValue (  )  )  )  )  ;", "}", "Map < String ,    String >    resourceEstimates    =    session . getResourceEstimates (  )  ;", "for    ( Map . Entry < String ,    String >    entry    :    resourceEstimates . entrySet (  )  )     {", "builder . addHeader ( PrestoHeaders . PRESTO _ RESOURCE _ ESTIMATE ,     (  (  ( entry . getKey (  )  )     +     \"  =  \"  )     +     ( entry . getValue (  )  )  )  )  ;", "}", "Map < String ,    String >    statements    =    session . getPreparedStatements (  )  ;", "for    ( Map . Entry < String ,    String >    entry    :    statements . entrySet (  )  )     {", "builder . addHeader ( PrestoHeaders . PRESTO _ PREPARED _ STATEMENT ,     (  (  (  . urlEncode ( entry . getKey (  )  )  )     +     \"  =  \"  )     +     (  . urlEncode ( entry . getValue (  )  )  )  )  )  ;", "}", "builder . addHeader ( PrestoHeaders . PRESTO _ TRANSACTION _ ID ,     (  ( session . getTransactionId (  )  )     =  =    null    ?     \" NONE \"     :    session . getTransactionId (  )  )  )  ;", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["buildQueryRequest"], "fileName": "com.facebook.presto.client.StatementClientV1"}, {"methodBody": ["METHOD_START", "{", "Request   request    =    prepareRequest ( HttpUrl . get ( uri )  )  . delete (  )  . build (  )  ;", "httpCnewCall ( request )  . enqueue ( new   OkHttpUtil . NullCallback (  )  )  ;", "}", "METHOD_END"], "methodName": ["httpDelete"], "fileName": "com.facebook.presto.client.StatementClientV1"}, {"methodBody": ["METHOD_START", "{", "return    ( state . get (  )  )     =  =     ( StatementClientV 1  . State . CLIENT _ ABORTED )  ;", "}", "METHOD_END"], "methodName": ["isClientAborted"], "fileName": "com.facebook.presto.client.StatementClientV1"}, {"methodBody": ["METHOD_START", "{", "return    ( state . get (  )  )     =  =     ( StatementClientV 1  . State . CLIENT _ ERROR )  ;", "}", "METHOD_END"], "methodName": ["isClientError"], "fileName": "com.facebook.presto.client.StatementClientV1"}, {"methodBody": ["METHOD_START", "{", "return    ( state . get (  )  )     =  =     ( StatementClientV 1  . State . FINISHED )  ;", "}", "METHOD_END"], "methodName": ["isFinished"], "fileName": "com.facebook.presto.client.StatementClientV1"}, {"methodBody": ["METHOD_START", "{", "return    ( state . get (  )  )     =  =     ( StatementClientV 1  . State . RUNNING )  ;", "}", "METHOD_END"], "methodName": ["isRunning"], "fileName": "com.facebook.presto.client.StatementClientV1"}, {"methodBody": ["METHOD_START", "{", "return   new   okhttp 3  . Request . Builder (  )  . addHeader ( PrestoHeaders . PRESTO _ USER ,    user )  . addHeader ( USER _ AGENT ,    StatementClientV 1  . USER _ AGENT _ VALUE )  . url ( url )  ;", "}", "METHOD_END"], "methodName": ["prepareRequest"], "fileName": "com.facebook.presto.client.StatementClientV1"}, {"methodBody": ["METHOD_START", "{", "setCatalog . set ( headers . get ( PrestoHeaders . PRESTO _ SET _ CATALOG )  )  ;", "setSchema . set ( headers . get ( PrestoHeaders . PRESTO _ SET _ SCHEMA )  )  ;", "for    ( String   setSession    :    headers . values ( PrestoHeaders . PRESTO _ SET _ SESSION )  )     {", "List < String >    keyValue    =     . SESSION _ HEADER _ SPLITTER . splitToList ( setSession )  ;", "if    (  ( keyValue . size (  )  )     !  =     2  )     {", "continue ;", "}", "setSessionProperties . put ( keyValue . get (  0  )  ,    keyValue . get (  1  )  )  ;", "}", "resetSessionProperties . addAll ( headers . values ( PrestoHeaders . PRESTO _ CLEAR _ SESSION )  )  ;", "for    ( String   entry    :    headers . values ( PrestoHeaders . PRESTO _ ADDED _ PREPARE )  )     {", "List < String >    keyValue    =     . SESSION _ HEADER _ SPLITTER . splitToList ( entry )  ;", "if    (  ( keyValue . size (  )  )     !  =     2  )     {", "continue ;", "}", "addedPreparedStatements . put (  . urlDecode ( keyValue . get (  0  )  )  ,     . urlDecode ( keyValue . get (  1  )  )  )  ;", "}", "for    ( String   entry    :    headers . values ( PrestoHeaders . PRESTO _ DEALLOCATED _ PREPARE )  )     {", "deallocatedPreparedStatements . add (  . urlDecode ( entry )  )  ;", "}", "String   startedTransactionId    =    headers . get ( PrestoHeaders . PRESTO _ STARTED _ TRANSACTION _ ID )  ;", "if    ( startedTransactionId    !  =    null )     {", "this . startedTransactionId . set ( startedTransactionId )  ;", "}", "if    (  ( headers . get ( PrestoHeaders . PRESTO _ CLEAR _ TRANSACTION _ ID )  )     !  =    null )     {", "clearTransactionId . set ( true )  ;", "}", "currentResults . set ( results )  ;", "}", "METHOD_END"], "methodName": ["processResponse"], "fileName": "com.facebook.presto.client.StatementClientV1"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( response . hasValue (  )  )  )     {", "if    (  ( response . getStatusCode (  )  )     =  =     ( HttpURLConnection . HTTP _ UNAUTHORIZED )  )     {", "return   new   Exception (  (  \" Authentication   failed \"     +     ( Optional . ofNullable ( response . getStatusMessage (  )  )  . map (  (    message )     -  >     \"  :     \"     +    message )  . orElse (  \"  \"  )  )  )  )  ;", "}", "return   new   RuntimeException ( String . format (  \" Error    % s   at    % s   returned   an   invalid   response :     % s    [ Error :     % s ]  \"  ,    task ,    request . url (  )  ,    response ,    response . getResponseBody (  )  )  ,    response . getException (  )  )  ;", "}", "return   new   RuntimeException ( String . format (  \" Error    % s   at    % s   returned   HTTP    % s \"  ,    task ,    request . url (  )  ,    response . getStatusCode (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["requestFailedException"], "fileName": "com.facebook.presto.client.StatementClientV1"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   URLDeder . dede ( value ,     \" UTF -  8  \"  )  ;", "}    catch    ( UnsupportedEndingException   e )     {", "throw   new   AssertionError ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["urlDecode"], "fileName": "com.facebook.presto.client.StatementClientV1"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   URLEnder . ende ( value ,     \" UTF -  8  \"  )  ;", "}    catch    ( UnsupportedEndingException   e )     {", "throw   new   AssertionError ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["urlEncode"], "fileName": "com.facebook.presto.client.StatementClientV1"}, {"methodBody": ["METHOD_START", "{", "return   new   StatementStats . Builder (  )  ;", "}", "METHOD_END"], "methodName": ["builder"], "fileName": "com.facebook.presto.client.StatementStats"}, {"methodBody": ["METHOD_START", "{", "return   completedSplits ;", "}", "METHOD_END"], "methodName": ["getCompletedSplits"], "fileName": "com.facebook.presto.client.StatementStats"}, {"methodBody": ["METHOD_START", "{", "return   cpuTimeMillis ;", "}", "METHOD_END"], "methodName": ["getCpuTimeMillis"], "fileName": "com.facebook.presto.client.StatementStats"}, {"methodBody": ["METHOD_START", "{", "return   elapsedTimeMillis ;", "}", "METHOD_END"], "methodName": ["getElapsedTimeMillis"], "fileName": "com.facebook.presto.client.StatementStats"}, {"methodBody": ["METHOD_START", "{", "return   nodes ;", "}", "METHOD_END"], "methodName": ["getNodes"], "fileName": "com.facebook.presto.client.StatementStats"}, {"methodBody": ["METHOD_START", "{", "return   peakMemoryBytes ;", "}", "METHOD_END"], "methodName": ["getPeakMemoryBytes"], "fileName": "com.facebook.presto.client.StatementStats"}, {"methodBody": ["METHOD_START", "{", "return   processedBytes ;", "}", "METHOD_END"], "methodName": ["getProcessedBytes"], "fileName": "com.facebook.presto.client.StatementStats"}, {"methodBody": ["METHOD_START", "{", "return   processedRows ;", "}", "METHOD_END"], "methodName": ["getProcessedRows"], "fileName": "com.facebook.presto.client.StatementStats"}, {"methodBody": ["METHOD_START", "{", "if    (  (  !  ( scheduled )  )     |  |     (  ( totalSplits )     =  =     0  )  )     {", "return   OptionalDouble . empty (  )  ;", "}", "return   OptionalDouble . of ( Math . min (  1  0  0  ,     (  (  ( pletedSplits )     *     1  0  0  .  0  )     /     ( totalSplits )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getProgressPercentage"], "fileName": "com.facebook.presto.client.StatementStats"}, {"methodBody": ["METHOD_START", "{", "return   queuedSplits ;", "}", "METHOD_END"], "methodName": ["getQueuedSplits"], "fileName": "com.facebook.presto.client.StatementStats"}, {"methodBody": ["METHOD_START", "{", "return   queuedTimeMillis ;", "}", "METHOD_END"], "methodName": ["getQueuedTimeMillis"], "fileName": "com.facebook.presto.client.StatementStats"}, {"methodBody": ["METHOD_START", "{", "return   rootStage ;", "}", "METHOD_END"], "methodName": ["getRootStage"], "fileName": "com.facebook.presto.client.StatementStats"}, {"methodBody": ["METHOD_START", "{", "return   runningSplits ;", "}", "METHOD_END"], "methodName": ["getRunningSplits"], "fileName": "com.facebook.presto.client.StatementStats"}, {"methodBody": ["METHOD_START", "{", "return   state ;", "}", "METHOD_END"], "methodName": ["getState"], "fileName": "com.facebook.presto.client.StatementStats"}, {"methodBody": ["METHOD_START", "{", "return   totalSplits ;", "}", "METHOD_END"], "methodName": ["getTotalSplits"], "fileName": "com.facebook.presto.client.StatementStats"}, {"methodBody": ["METHOD_START", "{", "return   userTimeMillis ;", "}", "METHOD_END"], "methodName": ["getUserTimeMillis"], "fileName": "com.facebook.presto.client.StatementStats"}, {"methodBody": ["METHOD_START", "{", "return   wallTimeMillis ;", "}", "METHOD_END"], "methodName": ["getWallTimeMillis"], "fileName": "com.facebook.presto.client.StatementStats"}, {"methodBody": ["METHOD_START", "{", "return   queued ;", "}", "METHOD_END"], "methodName": ["isQueued"], "fileName": "com.facebook.presto.client.StatementStats"}, {"methodBody": ["METHOD_START", "{", "return   scheduled ;", "}", "METHOD_END"], "methodName": ["isScheduled"], "fileName": "com.facebook.presto.client.StatementStats"}, {"methodBody": ["METHOD_START", "{", "String   json    =    TestClientTypeSignature . CLIENT _ TYPE _ SIGNATURE _ CODEC . toJson ( signature )  ;", "ClientTypeSignature   copy    =    TestClientTypeSignature . CLIENT _ TYPE _ SIGNATURE _ CODEC . fromJson ( json )  ;", "assertEquals ( copy ,    signature )  ;", "}", "METHOD_END"], "methodName": ["assertJsonRoundTrip"], "fileName": "com.facebook.presto.client.TestClientTypeSignature"}, {"methodBody": ["METHOD_START", "{", "ClientTypeSignature   signature    =    new   ClientTypeSignature ( StandardTypes . ARRAY ,    ImmutableList . of ( new   ClientTypeSignatureParameter ( TypeSignatureParameter . of ( BIGINT . getTypeSignature (  )  )  )  )  )  ;", "ClientTypeSignature   legacy    =     . CLIENT _ TYPE _ SIGNATURE _ CODEC . fromJson (  \"  {  \\  \" rawType \\  \"  :  \\  \" array \\  \"  ,  \\  \" literalArguments \\  \"  :  [  ]  ,  \\  \" typeArguments \\  \"  :  [  {  \\  \" rawType \\  \"  :  \\  \" bigint \\  \"  ,  \\  \" literalArguments \\  \"  :  [  ]  ,  \\  \" typeArguments \\  \"  :  [  ]  }  ]  }  \"  )  ;", "assertEquals ( legacy ,    signature )  ;", "}", "METHOD_END"], "methodName": ["testBackwardsCompatible"], "fileName": "com.facebook.presto.client.TestClientTypeSignature"}, {"methodBody": ["METHOD_START", "{", "TypeSignature   bigint    =    BIGINT . getTypeSignature (  )  ;", ". assertJsonRoundTrip ( new   ClientTypeSignature ( bigint )  )  ;", ". assertJsonRoundTrip ( new   ClientTypeSignature (  \" array \"  ,    ImmutableList . of ( new   ClientTypeSignatureParameter ( TypeSignatureParameter . of ( bigint )  )  )  )  )  ;", ". assertJsonRoundTrip ( new   ClientTypeSignature (  \" foo \"  ,    ImmutableList . of ( new   ClientTypeSignatureParameter ( TypeSignatureParameter . of (  4  2  )  )  )  )  )  ;", ". assertJsonRoundTrip ( new   ClientTypeSignature (  \" row \"  ,    ImmutableList . of ( new   ClientTypeSignatureParameter ( TypeSignatureParameter . of ( new   com . facebook . presto . spi . type . NamedTypeSignature (  \" foo \"  ,    bigint )  )  )  ,    new   ClientTypeSignatureParameter ( TypeSignatureParameter . of ( new   com . facebook . presto . spi . type . NamedTypeSignature (  \" bar \"  ,    bigint )  )  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testJsonRoundTrip"], "fileName": "com.facebook.presto.client.TestClientTypeSignature"}, {"methodBody": ["METHOD_START", "{", "List < List < Object >  >    rows    =    newArrayList ( FixJsonDataUtils . fixData ( ImmutableList . of ( new   Column (  \" test \"  ,    parseTypeSignature ( type )  )  )  ,    ImmutableList . of ( ImmutableList . of ( data )  )  )  )  ;", "assertEquals ( rows . size (  )  ,     1  )  ;", "assertEquals ( rows . get (  0  )  . size (  )  ,     1  )  ;", "assertEquals ( rows . get (  0  )  . get (  0  )  ,    expected )  ;", "}", "METHOD_END"], "methodName": ["assertQueryResult"], "fileName": "com.facebook.presto.client.TestFixJsonDataUtils"}, {"methodBody": ["METHOD_START", "{", "assertQueryResult (  \" bigint \"  ,     1  0  0  0  ,     1  0  0  0 L )  ;", "assertQueryResult (  \" integer \"  ,     1  0  0  ,     1  0  0  )  ;", "assertQueryResult (  \" smallint \"  ,     1  0  ,     (  ( short )     (  1  0  )  )  )  ;", "assertQueryResult (  \" tinyint \"  ,     1  ,     (  ( byte )     (  1  )  )  )  ;", "assertQueryResult (  \" lean \"  ,    true ,    true )  ;", "assertQueryResult (  \" date \"  ,     \"  2  0  1  7  -  0  7  -  0  1  \"  ,     \"  2  0  1  7  -  0  7  -  0  1  \"  )  ;", "assertQueryResult (  \" decimal \"  ,     \"  2  .  1  5  \"  ,     \"  2  .  1  5  \"  )  ;", "assertQueryResult (  \" real \"  ,     1  0  0  .  2  3  4  5  6  ,     (  ( float )     (  1  0  0  .  2  3  4  5  6  )  )  )  ;", "assertQueryResult (  \" double \"  ,     1  0  0  .  2  3  4  5  6  ,     1  0  0  .  2  3  4  5  6  )  ;", "assertQueryResult (  \" interval   day   to   second \"  ,     \" INTERVAL    '  2  '    DAY \"  ,     \" INTERVAL    '  2  '    DAY \"  )  ;", "assertQueryResult (  \" interval   year   to   month \"  ,     \" INTERVAL    '  3  '    MONTH \"  ,     \" INTERVAL    '  3  '    MONTH \"  )  ;", "assertQueryResult (  \" timestamp \"  ,     \"  2  0  0  1  -  0  8  -  2  2     0  3  :  0  4  :  0  5  .  3  2  1  \"  ,     \"  2  0  0  1  -  0  8  -  2  2     0  3  :  0  4  :  0  5  .  3  2  1  \"  )  ;", "assertQueryResult (  \" timestamp   with   time   zone \"  ,     \"  2  0  0  1  -  0  8  -  2  2     0  3  :  0  4  :  0  5  .  3  2  1    America / Los _ Angeles \"  ,     \"  2  0  0  1  -  0  8  -  2  2     0  3  :  0  4  :  0  5  .  3  2  1    America / Los _ Angeles \"  )  ;", "assertQueryResult (  \" time \"  ,     \"  0  1  :  0  2  :  0  3  .  4  5  6  \"  ,     \"  0  1  :  0  2  :  0  3  .  4  5  6  \"  )  ;", "assertQueryResult (  \" time   with   time   zone \"  ,     \"  0  1  :  0  2  :  0  3  .  4  5  6    America / Los _ Angeles \"  ,     \"  0  1  :  0  2  :  0  3  .  4  5  6    America / Los _ Angeles \"  )  ;", "assertQueryResult (  \" varbinary \"  ,     \" garbage \"  ,    Base 6  4  . getDecoder (  )  . decode (  \" garbage \"  )  )  ;", "assertQueryResult (  \" varchar \"  ,     \" teststring \"  ,     \" teststring \"  )  ;", "assertQueryResult (  \" char \"  ,     \" abc \"  ,     \" abc \"  )  ;", "assertQueryResult (  \" row ( foo   bigint , bar   bigint )  \"  ,    ImmutableList . of (  1  ,     2  )  ,    ImmutableMap . of (  \" foo \"  ,     1 L ,     \" bar \"  ,     2 L )  )  ;", "assertQueryResult (  \" array ( bigint )  \"  ,    ImmutableList . of (  1  ,     2  ,     4  )  ,    ImmutableList . of (  1 L ,     2 L ,     4 L )  )  ;", "assertQueryResult (  \" map ( bigint , bigint )  \"  ,    ImmutableMap . of (  1  ,     3  ,     2  ,     4  )  ,    ImmutableMap . of (  1 L ,     3 L ,     2 L ,     4 L )  )  ;", "assertQueryResult (  \" json \"  ,     \"  {  \\  \" json \\  \"  :     {  \\  \" a \\  \"  :     1  }  }  \"  ,     \"  {  \\  \" json \\  \"  :     {  \\  \" a \\  \"  :     1  }  }  \"  )  ;", "assertQueryResult (  \" ipaddress \"  ,     \"  1  .  2  .  3  .  4  \"  ,     \"  1  .  2  .  3  .  4  \"  )  ;", "assertQueryResult (  \" Geometry \"  ,     \" POINT    (  1  .  2     3  .  4  )  \"  ,     \" POINT    (  1  .  2     3  .  4  )  \"  )  ;", "assertQueryResult (  \" map ( BingTile , bigint )  \"  ,    ImmutableMap . of (  \" BingTile { x =  1  ,    y =  2  ,    zoom _ level =  1  0  }  \"  ,     1  )  ,    ImmutableMap . of (  \" BingTile { x =  1  ,    y =  2  ,    zoom _ level =  1  0  }  \"  ,     1 L )  )  ;", "}", "METHOD_END"], "methodName": ["testFixData"], "fileName": "com.facebook.presto.client.TestFixJsonDataUtils"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( IntervalDayTime . formatMillis ( millis )  ,    formatted )  ;", "assertEquals ( IntervalDayTime . parseMillis ( formatted )  ,    millis )  ;", "}", "METHOD_END"], "methodName": ["assertMillis"], "fileName": "com.facebook.presto.client.TestIntervalDayTime"}, {"methodBody": ["METHOD_START", "{", "TestIntervalDayTime . assertMillis (  0  ,     \"  0     0  0  :  0  0  :  0  0  .  0  0  0  \"  )  ;", "TestIntervalDayTime . assertMillis (  1  ,     \"  0     0  0  :  0  0  :  0  0  .  0  0  1  \"  )  ;", "TestIntervalDayTime . assertMillis (  (  -  1  )  ,     \"  -  0     0  0  :  0  0  :  0  0  .  0  0  1  \"  )  ;", "TestIntervalDayTime . assertMillis ( IntervalDayTime . toMillis (  1  2  ,     1  3  ,     4  5  ,     5  6  ,     7  8  9  )  ,     \"  1  2     1  3  :  4  5  :  5  6  .  7  8  9  \"  )  ;", "TestIntervalDayTime . assertMillis ( IntervalDayTime . toMillis (  (  -  1  2  )  ,     (  -  1  3  )  ,     (  -  4  5  )  ,     (  -  5  6  )  ,     (  -  7  8  9  )  )  ,     \"  -  1  2     1  3  :  4  5  :  5  6  .  7  8  9  \"  )  ;", "TestIntervalDayTime . assertMillis ( Long . MAX _ VALUE ,     \"  1  0  6  7  5  1  9  9  1  1  6  7     0  7  :  1  2  :  5  5  .  8  0  7  \"  )  ;", "TestIntervalDayTime . assertMillis (  (  ( Long . MIN _ VALUE )     +     1  )  ,     \"  -  1  0  6  7  5  1  9  9  1  1  6  7     0  7  :  1  2  :  5  5  .  8  0  7  \"  )  ;", "TestIntervalDayTime . assertMillis ( Long . MIN _ VALUE ,     \"  -  1  0  6  7  5  1  9  9  1  1  6  7     0  7  :  1  2  :  5  5  .  8  0  8  \"  )  ;", "}", "METHOD_END"], "methodName": ["testFormat"], "fileName": "com.facebook.presto.client.TestIntervalDayTime"}, {"methodBody": ["METHOD_START", "{", "long   days    =     (  ( Long . MAX _ VALUE )     /     ( TimeUnit . DAYS . toMillis (  1  )  )  )     +     1  ;", ". toMillis ( days ,     0  ,     0  ,     0  ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testOverflow"], "fileName": "com.facebook.presto.client.TestIntervalDayTime"}, {"methodBody": ["METHOD_START", "{", "long   days    =     ( Long . MAX _ VALUE )     /     ( TimeUnit . DAYS . toMillis (  1  )  )  ;", "assertEquals (  . toMillis ( days ,     0  ,     0  ,     0  ,     0  )  ,    TimeUnit . DAYS . toMillis ( days )  )  ;", "}", "METHOD_END"], "methodName": ["textMaxDays"], "fileName": "com.facebook.presto.client.TestIntervalDayTime"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( IntervalYearMonth . formatMonths ( months )  ,    formatted )  ;", "assertEquals ( IntervalYearMonth . parseMonths ( formatted )  ,    months )  ;", "}", "METHOD_END"], "methodName": ["assertMonths"], "fileName": "com.facebook.presto.client.TestIntervalYearMonth"}, {"methodBody": ["METHOD_START", "{", "TestIntervalYearMonth . assertMonths (  0  ,     \"  0  -  0  \"  )  ;", "TestIntervalYearMonth . assertMonths ( IntervalYearMonth . toMonths (  0  ,     0  )  ,     \"  0  -  0  \"  )  ;", "TestIntervalYearMonth . assertMonths (  3  ,     \"  0  -  3  \"  )  ;", "TestIntervalYearMonth . assertMonths (  (  -  3  )  ,     \"  -  0  -  3  \"  )  ;", "TestIntervalYearMonth . assertMonths ( IntervalYearMonth . toMonths (  0  ,     3  )  ,     \"  0  -  3  \"  )  ;", "TestIntervalYearMonth . assertMonths ( IntervalYearMonth . toMonths (  0  ,     (  -  3  )  )  ,     \"  -  0  -  3  \"  )  ;", "TestIntervalYearMonth . assertMonths (  2  8  ,     \"  2  -  4  \"  )  ;", "TestIntervalYearMonth . assertMonths (  (  -  2  8  )  ,     \"  -  2  -  4  \"  )  ;", "TestIntervalYearMonth . assertMonths ( IntervalYearMonth . toMonths (  2  ,     4  )  ,     \"  2  -  4  \"  )  ;", "TestIntervalYearMonth . assertMonths ( IntervalYearMonth . toMonths (  (  -  2  )  ,     (  -  4  )  )  ,     \"  -  2  -  4  \"  )  ;", "TestIntervalYearMonth . assertMonths ( Integer . MAX _ VALUE ,     \"  1  7  8  9  5  6  9  7  0  -  7  \"  )  ;", "TestIntervalYearMonth . assertMonths (  (  ( Integer . MIN _ VALUE )     +     1  )  ,     \"  -  1  7  8  9  5  6  9  7  0  -  7  \"  )  ;", "TestIntervalYearMonth . assertMonths ( Integer . MIN _ VALUE ,     \"  -  1  7  8  9  5  6  9  7  0  -  8  \"  )  ;", "}", "METHOD_END"], "methodName": ["testFormat"], "fileName": "com.facebook.presto.client.TestIntervalYearMonth"}, {"methodBody": ["METHOD_START", "{", "int   years    =     ( Integer . MAX _ VALUE )     /     1  2  ;", "assertEquals (  . toMonths ( years ,     0  )  ,     ( years    *     1  2  )  )  ;", "}", "METHOD_END"], "methodName": ["testMaxYears"], "fileName": "com.facebook.presto.client.TestIntervalYearMonth"}, {"methodBody": ["METHOD_START", "{", "int   days    =     (  ( Integer . MAX _ VALUE )     /     1  2  )     +     1  ;", ". toMonths ( days ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testOverflow"], "fileName": "com.facebook.presto.client.TestIntervalYearMonth"}, {"methodBody": ["METHOD_START", "{", "String   json    =    TestServerInfo . SERVER _ INFO _ CODEC . toJson ( serverInfo )  ;", "ServerInfo   copy    =    TestServerInfo . SERVER _ INFO _ CODEC . fromJson ( json )  ;", "assertEquals ( copy ,    serverInfo )  ;", "}", "METHOD_END"], "methodName": ["assertJsonRoundTrip"], "fileName": "com.facebook.presto.client.TestServerInfo"}, {"methodBody": ["METHOD_START", "{", "ServerInfo   newServerInfo    =    new   ServerInfo ( NodeVersion . UNKNOWN ,     \" test \"  ,    true ,    Optional . empty (  )  )  ;", "ServerInfo   legacyServerInfo    =     . SERVER _ INFO _ CODEC . fromJson (  \"  {  \\  \" nodeVersion \\  \"  :  {  \\  \" version \\  \"  :  \\  \"  < unknown >  \\  \"  }  ,  \\  \" environment \\  \"  :  \\  \" test \\  \"  ,  \\  \" coordinator \\  \"  : true }  \"  )  ;", "assertEquals ( newServerInfo ,    legacyServerInfo )  ;", "}", "METHOD_END"], "methodName": ["testBackwardsCompatible"], "fileName": "com.facebook.presto.client.TestServerInfo"}, {"methodBody": ["METHOD_START", "{", "TestServerInfo . assertJsonRoundTrip ( new   ServerInfo ( NodeVersion . UNKNOWN ,     \" test \"  ,    true ,    Optional . of ( Duration . valueOf (  \"  2 m \"  )  )  )  )  ;", "TestServerInfo . assertJsonRoundTrip ( new   ServerInfo ( NodeVersion . UNKNOWN ,     \" test \"  ,    true ,    Optional . empty (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testJsonRoundTrip"], "fileName": "com.facebook.presto.client.TestServerInfo"}]