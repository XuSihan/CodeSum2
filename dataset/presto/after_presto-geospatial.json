[{"methodBody": ["METHOD_START", "{", "return   GeoFunctions . stIntersection ( data . envelope ,    data . otherEnvelope )  ;", "}", "METHOD_END"], "methodName": ["envelopes"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkEnvelopeIntersection"}, {"methodBody": ["METHOD_START", "{", "return   GeoFunctions . stIntersection ( data . geometry ,    data . otherGeometry )  ;", "}", "METHOD_END"], "methodName": ["geometries"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkEnvelopeIntersection"}, {"methodBody": ["METHOD_START", "{", "Options   options    =    new   OptionsBuilder (  )  . verbosity ( NORMAL )  . include (  (  (  \"  .  *  \"     +     ( BenchmarkEnvelopeIntersection . class . getSimpleName (  )  )  )     +     \"  .  *  \"  )  )  . build (  )  ;", "new   Runner ( options )  . run (  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkEnvelopeIntersection"}, {"methodBody": ["METHOD_START", "{", "BenchmarkEnvelopeIntersection . BenchmarkData   data    =    new   BenchmarkEnvelopeIntersection . BenchmarkData (  )  ;", "data . setup (  )  ;", "BenchmarkEnvelopeIntersection   benchmark    =    new   BenchmarkEnvelopeIntersection (  )  ;", "assertEquals ( deserialize ( benchmark . envelopes ( data )  )  ,    deserialize ( benchmark . geometries ( data )  )  )  ;", "}", "METHOD_END"], "methodName": ["validate"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkEnvelopeIntersection"}, {"methodBody": ["METHOD_START", "{", "return   BingTileFunctions . geometryToBingTiles ( data . envelope ,    data . zoomLevel )  ;", "}", "METHOD_END"], "methodName": ["envelopeToBingTiles"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkGeometryToBingTiles"}, {"methodBody": ["METHOD_START", "{", "return   BingTileFunctions . geometryToBingTiles ( data . geometry ,    data . zoomLevel )  ;", "}", "METHOD_END"], "methodName": ["geometryToBingTiles"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkGeometryToBingTiles"}, {"methodBody": ["METHOD_START", "{", "BenchmarkGeometryToBingTiles . BenchmarkData   data    =    new   BenchmarkGeometryToBingTiles . BenchmarkData (  )  ;", "data . setup (  )  ;", "new   BenchmarkGeometryToBingTiles (  )  . geometryToBingTiles ( data )  ;", "Options   options    =    new   OptionsBuilder (  )  . verbosity ( NORMAL )  . include (  (  (  \"  .  *  \"     +     ( BenchmarkGeometryToBingTiles . class . getSimpleName (  )  )  )     +     \"  .  *  \"  )  )  . build (  )  ;", "new   Runner ( options )  . run (  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkGeometryToBingTiles"}, {"methodBody": ["METHOD_START", "{", "return   deserialize ( data . geometry )  ;", "}", "METHOD_END"], "methodName": ["benchmarkDeserialize"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkSTContains"}, {"methodBody": ["METHOD_START", "{", "return   deserializeEnvelope ( data . geometry )  ;", "}", "METHOD_END"], "methodName": ["benchmarkDeserializeEnvelope"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkSTContains"}, {"methodBody": ["METHOD_START", "{", "return   deserializeEnvelope ( data . simpleGeometry )  ;", "}", "METHOD_END"], "methodName": ["deserializeEnvelopeSimpleGeometry"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkSTContains"}, {"methodBody": ["METHOD_START", "{", "return   deserialize ( data . simpleGeometry )  ;", "}", "METHOD_END"], "methodName": ["deserializeSimpleGeometry"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkSTContains"}, {"methodBody": ["METHOD_START", "{", "BenchmarkSTContains . BenchmarkData   data    =    new   BenchmarkSTContains . BenchmarkData (  )  ;", "data . setup (  )  ;", "BenchmarkSTContains   benchmark    =    new   BenchmarkSTContains (  )  ;", "if    (  !  (  (  ( Boolean )     ( benchmark . stContainsInnerPoint ( data )  )  )  . booleanValue (  )  )  )     {", "throw   new   IllegalStateException (  \" ST _ Contains   for   inner   point   expected   to   return   true ,    got   false .  \"  )  ;", "}", "if    (  (  ( Boolean )     ( benchmark . stContainsOuterPointInEnvelope ( data )  )  )  . booleanValue (  )  )     {", "throw   new   IllegalStateException (  \" ST _ Contains   for   outer   point   expected   to   return   false ,    got   true .  \"  )  ;", "}", "Options   options    =    new   OptionsBuilder (  )  . verbosity ( NORMAL )  . include (  (  (  \"  .  *  \"     +     ( BenchmarkSTContains . class . getSimpleName (  )  )  )     +     \"  .  *  \"  )  )  . build (  )  ;", "new   Runner ( options )  . run (  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkSTContains"}, {"methodBody": ["METHOD_START", "{", "return   GeoFunctions . stContains ( data . geometry ,    data . innerPoint )  ;", "}", "METHOD_END"], "methodName": ["stContainsInnerPoint"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkSTContains"}, {"methodBody": ["METHOD_START", "{", "return   data . ogcGeometry . contains ( data . innerOgcPoint )  ;", "}", "METHOD_END"], "methodName": ["stContainsInnerPointDeserialized"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkSTContains"}, {"methodBody": ["METHOD_START", "{", "return   GeoFunctions . stContains ( data . simpleGeometry ,    data . innerPoint )  ;", "}", "METHOD_END"], "methodName": ["stContainsInnerPointSimpleGeometry"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkSTContains"}, {"methodBody": ["METHOD_START", "{", "return   GeoFunctions . stContains ( data . geometry ,    data . outerPointInEnvelope )  ;", "}", "METHOD_END"], "methodName": ["stContainsOuterPointInEnvelope"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkSTContains"}, {"methodBody": ["METHOD_START", "{", "return   data . ogcGeometry . contains ( data . outerOgcPointInEnvelope )  ;", "}", "METHOD_END"], "methodName": ["stContainsOuterPointInEnvelopeDeserialized"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkSTContains"}, {"methodBody": ["METHOD_START", "{", "return   GeoFunctions . stContains ( data . simpleGeometry ,    data . outerPointInEnvelope )  ;", "}", "METHOD_END"], "methodName": ["stContainsOuterPointInEnvelopeSimpleGeometry"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkSTContains"}, {"methodBody": ["METHOD_START", "{", "return   GeoFunctions . stContains ( data . geometry ,    data . outerPointNotInEnvelope )  ;", "}", "METHOD_END"], "methodName": ["stContainsOuterPointNotInEnvelope"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkSTContains"}, {"methodBody": ["METHOD_START", "{", "return   data . ogcGeometry . contains ( data . outerOgcPointNotInEnvelope )  ;", "}", "METHOD_END"], "methodName": ["stContainsOuterPointNotInEnvelopeDeserialized"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkSTContains"}, {"methodBody": ["METHOD_START", "{", "return   GeoFunctions . stContains ( data . simpleGeometry ,    data . outerPointNotInEnvelope )  ;", "}", "METHOD_END"], "methodName": ["stContainsOuterPointNotInEnvelopeSimpleGeometry"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkSTContains"}, {"methodBody": ["METHOD_START", "{", "return   GeoFunctions . stEnvelope ( data . complexGeometry )  ;", "}", "METHOD_END"], "methodName": ["complexGeometry"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkSTEnvelope"}, {"methodBody": ["METHOD_START", "{", "Options   options    =    new   OptionsBuilder (  )  . verbosity ( NORMAL )  . include (  (  (  \"  .  *  \"     +     ( BenchmarkSTEnvelope . class . getSimpleName (  )  )  )     +     \"  .  *  \"  )  )  . build (  )  ;", "new   Runner ( options )  . run (  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkSTEnvelope"}, {"methodBody": ["METHOD_START", "{", "return   GeoFunctions . stEnvelope ( data . simpleGeometry )  ;", "}", "METHOD_END"], "methodName": ["simpleGeometry"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkSTEnvelope"}, {"methodBody": ["METHOD_START", "{", "Options   options    =    new   OptionsBuilder (  )  . verbosity ( NORMAL )  . include (  (  (  \"  .  *  \"     +     ( BenchmarkSTIntersects . class . getSimpleName (  )  )  )     +     \"  .  *  \"  )  )  . build (  )  ;", "new   Runner ( options )  . run (  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkSTIntersects"}, {"methodBody": ["METHOD_START", "{", "return   GeoFunctions . stIntersects ( data . crossingLine ,    data . geometry )  ;", "}", "METHOD_END"], "methodName": ["stIntersectsCrossingLine"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkSTIntersects"}, {"methodBody": ["METHOD_START", "{", "return   GeoFunctions . stIntersects ( data . crossingLine ,    data . simpleGeometry )  ;", "}", "METHOD_END"], "methodName": ["stIntersectsCrossingLineSimpleGeometry"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkSTIntersects"}, {"methodBody": ["METHOD_START", "{", "return   GeoFunctions . stIntersects ( data . innerLine ,    data . geometry )  ;", "}", "METHOD_END"], "methodName": ["stIntersectsInnerLine"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkSTIntersects"}, {"methodBody": ["METHOD_START", "{", "return   GeoFunctions . stIntersects ( data . innerLine ,    data . simpleGeometry )  ;", "}", "METHOD_END"], "methodName": ["stIntersectsInnerLineSimpleGeometry"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkSTIntersects"}, {"methodBody": ["METHOD_START", "{", "return   GeoFunctions . stIntersects ( data . outerLineInEnvelope ,    data . geometry )  ;", "}", "METHOD_END"], "methodName": ["stIntersectsOuterLineInEnvelope"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkSTIntersects"}, {"methodBody": ["METHOD_START", "{", "return   GeoFunctions . stIntersects ( data . outerLineInEnvelope ,    data . simpleGeometry )  ;", "}", "METHOD_END"], "methodName": ["stIntersectsOuterLineInEnvelopeSimpleGeometry"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkSTIntersects"}, {"methodBody": ["METHOD_START", "{", "return   GeoFunctions . stIntersects ( data . outerLineNotInEnvelope ,    data . geometry )  ;", "}", "METHOD_END"], "methodName": ["stIntersectsOuterLineNotInEnvelope"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkSTIntersects"}, {"methodBody": ["METHOD_START", "{", "return   GeoFunctions . stIntersects ( data . outerLineNotInEnvelope ,    data . simpleGeometry )  ;", "}", "METHOD_END"], "methodName": ["stIntersectsOuterLineNotInEnvelopeSimpleGeometry"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkSTIntersects"}, {"methodBody": ["METHOD_START", "{", "BenchmarkSTIntersects . BenchmarkData   data    =    new   BenchmarkSTIntersects . BenchmarkData (  )  ;", "data . setup (  )  ;", "data . validate (  )  ;", "}", "METHOD_END"], "methodName": ["validateBenchmarkData"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkSTIntersects"}, {"methodBody": ["METHOD_START", "{", "return   GeoFunctions . stXMin ( data . complexGeometry )  ;", "}", "METHOD_END"], "methodName": ["complexGeometry"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkSTXMin"}, {"methodBody": ["METHOD_START", "{", "Options   options    =    new   OptionsBuilder (  )  . verbosity ( NORMAL )  . include (  (  (  \"  .  *  \"     +     ( BenchmarkSTXMin . class . getSimpleName (  )  )  )     +     \"  .  *  \"  )  )  . build (  )  ;", "new   Runner ( options )  . run (  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkSTXMin"}, {"methodBody": ["METHOD_START", "{", "return   GeoFunctions . stXMin ( data . simpleGeometry )  ;", "}", "METHOD_END"], "methodName": ["simpleGeometry"], "fileName": "com.facebook.presto.plugin.geospatial.BenchmarkSTXMin"}, {"methodBody": ["METHOD_START", "{", "int   tileX    =     (  ( int )     ( tile    >  >     2  8  )  )  ;", "int   tileY    =     (  ( int )     (  ( tile    %     (  1     <  <     2  8  )  )     >  >     5  )  )  ;", "int   zoomLevel    =     (  ( int )     ( tile    %     (  1     <  <     5  )  )  )  ;", "return   new    ( tileX ,    tileY ,    zoomLevel )  ;", "}", "METHOD_END"], "methodName": ["decode"], "fileName": "com.facebook.presto.plugin.geospatial.BingTile"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  ( long )     ( x )  )     <  <     2  8  )     +     (  ( y )     <  <     5  )  )     +     ( zoomLevel )  ;", "}", "METHOD_END"], "methodName": ["encode"], "fileName": "com.facebook.presto.plugin.geospatial.BingTile"}, {"methodBody": ["METHOD_START", "{", "return   new   BingTile ( x ,    y ,    zoomLevel )  ;", "}", "METHOD_END"], "methodName": ["fromCoordinates"], "fileName": "com.facebook.presto.plugin.geospatial.BingTile"}, {"methodBody": ["METHOD_START", "{", "int   zoomLevel    =    quadKey . length (  )  ;", "checkArgument (  ( zoomLevel    <  =     ( BingTile . MAX _ ZOOM _ LEVEL )  )  )  ;", "int   tileX    =     0  ;", "int   tileY    =     0  ;", "for    ( int   i    =    zoomLevel ;    i    >     0  ;    i -  -  )     {", "int   mask    =     1     <  <     ( i    -     1  )  ;", "switch    ( quadKey . charAt (  ( zoomLevel    -    i )  )  )     {", "case    '  0  '     :", "break ;", "case    '  1  '     :", "tileX    |  =    mask ;", "break ;", "case    '  2  '     :", "tileY    |  =    mask ;", "break ;", "case    '  3  '     :", "tileX    |  =    mask ;", "tileY    |  =    mask ;", "break ;", "default    :", "throw   new   spi . PrestoException ( INVALID _ FUNCTION _ ARGUMENT ,     (  \" Invalid   QuadKey   digit   sequence :     \"     +    quadKey )  )  ;", "}", "}", "return   new   BingTile ( tileX ,    tileY ,    zoomLevel )  ;", "}", "METHOD_END"], "methodName": ["fromQuadKey"], "fileName": "com.facebook.presto.plugin.geospatial.BingTile"}, {"methodBody": ["METHOD_START", "{", "return   x ;", "}", "METHOD_END"], "methodName": ["getX"], "fileName": "com.facebook.presto.plugin.geospatial.BingTile"}, {"methodBody": ["METHOD_START", "{", "return   y ;", "}", "METHOD_END"], "methodName": ["getY"], "fileName": "com.facebook.presto.plugin.geospatial.BingTile"}, {"methodBody": ["METHOD_START", "{", "return   zoomLevel ;", "}", "METHOD_END"], "methodName": ["getZoomLevel"], "fileName": "com.facebook.presto.plugin.geospatial.BingTile"}, {"methodBody": ["METHOD_START", "{", "char [  ]    quadKey    =    new   char [ this . zoomLevel ]  ;", "for    ( int   i    =    this . zoomLevel ;    i    >     0  ;    i -  -  )     {", "char   digit    =     '  0  '  ;", "int   mask    =     1     <  <     ( i    -     1  )  ;", "if    (  (  ( this . x )     &    mask )     !  =     0  )     {", "digit +  +  ;", "}", "if    (  (  ( this . y )     &    mask )     !  =     0  )     {", "digit    +  =     2  ;", "}", "quadKey [  (  ( this . zoomLevel )     -    i )  ]     =    digit ;", "}", "return   Str . valueOf ( quadKey )  ;", "}", "METHOD_END"], "methodName": ["toQuadKey"], "fileName": "com.facebook.presto.plugin.geospatial.BingTile"}, {"methodBody": ["METHOD_START", "{", "BingTileFunctions . checkLatitude ( latitude ,    BingTileFunctions . LATITUDE _ OUT _ OF _ RANGE )  ;", "BingTileFunctions . checkLongitude ( longitude ,    BingTileFunctions . LONGITUDE _ OUT _ OF _ RANGE )  ;", "BingTileFunctions . checkZoomLevel ( zoomLevel )  ;", "return   BingTileFunctions . latitudeLongitudeToTile ( latitude ,    longitude ,    Math . toIntExact ( zoomLevel )  )  . encode (  )  ;", "}", "METHOD_END"], "methodName": ["bingTileAt"], "fileName": "com.facebook.presto.plugin.geospatial.BingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "BingTile   tile    =    BingTile . decode ( input )  ;", "BlockBuilder   tileBlockBuilder    =    INTEGER . createBlockBuilder ( null ,     2  )  ;", "INTEGER . writeLong ( tileBlockBuilder ,    tile . getX (  )  )  ;", "INTEGER . writeLong ( tileBlockBuilder ,    tile . getY (  )  )  ;", "return   tileBlockBuilder . build (  )  ;", "}", "METHOD_END"], "methodName": ["bingTileCoordinates"], "fileName": "com.facebook.presto.plugin.geospatial.BingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "BingTile   tile    =    BingTile . decode ( input )  ;", "return   serialize (  . tileToEnvelope ( tile )  )  ;", "}", "METHOD_END"], "methodName": ["bingTilePolygon"], "fileName": "com.facebook.presto.plugin.geospatial.BingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "return   BingTile . decode ( input )  . getZoomLevel (  )  ;", "}", "METHOD_END"], "methodName": ["bingTileZoomLevel"], "fileName": "com.facebook.presto.plugin.geospatial.BingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  ! condition )     {", "throw   new   spi . PrestoException ( INVALID _ FUNCTION _ ARGUMENT ,    String . format ( formatString ,    args )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkCondition"], "fileName": "com.facebook.presto.plugin.geospatial.BingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "BingTileFunctions . checkCondition (  (  ( coordinate    >  =     0  )     &  &     ( coordinate    <     (  1     <  <    zoomLevel )  )  )  ,     \" XY   coordinates   for   a   Bing   tile   at   zoom   level    % s   must   be   within    [  0  ,     % s )    range \"  ,    zoomLevel ,     (  1     <  <    zoomLevel )  )  ;", "}", "METHOD_END"], "methodName": ["checkCoordinate"], "fileName": "com.facebook.presto.plugin.geospatial.BingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "if    ( pointOrRectangle )     {", ". checkCondition (  ( tileCount    <  =     1  0  0  0  0  0  0  )  ,     \" The   number   of   input   tiles   is   too   large    ( more   than    1 M )    to   compute   a   set   of   covering   Bing   tiles .  \"  )  ;", "} else    {", ". checkCondition (  (  (  ( int )     ( tileCount )  )     =  =    tileCount )  ,     \" The   zoom   level   is   too   high   to   compute   a   set   of   covering   Bing   tiles .  \"  )  ;", "long   complexity    =     0  ;", "try    {", "complexity    =    Math . multiplyExact ( tileCount ,     . getPointCount ( geometry )  )  ;", "}    catch    ( ArithmeticException   e )     {", ". checkCondition ( false ,     (  \" The   zoom   level   is   too   high   or   the   geometry   is   too   complex   to   compute   a   set   of   covering   Bing   tiles .     \"     +     \" Please   use   a   lower   zoom   level   or   convert   the   geometry   to   its   bounding   box   using   the   ST _ Envelope   function .  \"  )  )  ;", "}", ". checkCondition (  ( complexity    <  =     2  5  0  0  0  0  0  0  )  ,     (  \" The   zoom   level   is   too   high   or   the   geometry   is   too   complex   to   compute   a   set   of   covering   Bing   tiles .     \"     +     \" Please   use   a   lower   zoom   level   or   convert   the   geometry   to   its   bounding   box   using   the   ST _ Envelope   function .  \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkGeometryToBingTilesLimits"], "fileName": "com.facebook.presto.plugin.geospatial.BingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "BingTileFunctions . checkCondition (  (  ( latitude    >  =     ( BingTileFunctions . MIN _ LATITUDE )  )     &  &     ( latitude    <  =     ( BingTileFunctions . MAX _ LATITUDE )  )  )  ,    errorMessage )  ;", "}", "METHOD_END"], "methodName": ["checkLatitude"], "fileName": "com.facebook.presto.plugin.geospatial.BingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "BingTileFunctions . checkCondition (  (  ( longitude    >  =     ( BingTileFunctions . MIN _ LONGITUDE )  )     &  &     ( longitude    <  =     ( BingTileFunctions . MAX _ LONGITUDE )  )  )  ,    errorMessage )  ;", "}", "METHOD_END"], "methodName": ["checkLongitude"], "fileName": "com.facebook.presto.plugin.geospatial.BingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "BingTileFunctions . checkCondition (  (  ( quadkey . length (  )  )     >     0  )  ,    BingTileFunctions . QUAD _ KEY _ EMPTY )  ;", "BingTileFunctions . checkCondition (  (  ( quadkey . length (  )  )     <  =     ( BingTile . MAX _ ZOOM _ LEVEL )  )  ,    BingTileFunctions . QUAD _ KEY _ TOO _ LONG )  ;", "}", "METHOD_END"], "methodName": ["checkQuadKey"], "fileName": "com.facebook.presto.plugin.geospatial.BingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "BingTileFunctions . checkCondition (  ( zoomLevel    >     0  )  ,    BingTileFunctions . ZOOM _ LEVEL _ TOO _ SMALL )  ;", "BingTileFunctions . checkCondition (  ( zoomLevel    <  =     ( BingTile . MAX _ ZOOM _ LEVEL )  )  ,    BingTileFunctions . ZOOM _ LEVEL _ TOO _ LARGE )  ;", "}", "METHOD_END"], "methodName": ["checkZoomLevel"], "fileName": "com.facebook.presto.plugin.geospatial.BingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "return   Math . min ( Math . max ( n ,    minValue )  ,    maxValue )  ;", "}", "METHOD_END"], "methodName": ["clip"], "fileName": "com.facebook.presto.plugin.geospatial.BingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "BingTileFunctions . checkZoomLevel ( zoomLevelInput )  ;", "int   zoomLevel    =    Math . toIntExact ( zoomLevelInput )  ;", "OGCGeometry   ogcGeometry    =    deserialize ( input )  ;", "BingTileFunctions . checkCondition (  (  !  ( ogcGeometry . isEmpty (  )  )  )  ,     \" Input   geometry   must   not   be   empty \"  )  ;", "Geometry   geometry    =    ogcGeometry . getEsriGeometry (  )  ;", "Envelope   envelope    =    new   Envelope (  )  ;", "geometry . queryEnvelope ( envelope )  ;", "BingTileFunctions . checkLatitude ( envelope . getYMin (  )  ,    BingTileFunctions . LATITUDE _ SPAN _ OUT _ OF _ RANGE )  ;", "BingTileFunctions . checkLatitude ( envelope . getYMax (  )  ,    BingTileFunctions . LATITUDE _ SPAN _ OUT _ OF _ RANGE )  ;", "BingTileFunctions . checkLongitude ( envelope . getXMin (  )  ,    BingTileFunctions . LONGITUDE _ SPAN _ OUT _ OF _ RANGE )  ;", "BingTileFunctions . checkLongitude ( envelope . getXMax (  )  ,    BingTileFunctions . LONGITUDE _ SPAN _ OUT _ OF _ RANGE )  ;", "boolean   pointOrRectangle    =    BingTileFunctions . isPointOrRectangle ( geometry ,    envelope )  ;", "BingTile   leftUpperTile    =    BingTileFunctions . latitudeLongitudeToTile ( envelope . getYMax (  )  ,    envelope . getXMin (  )  ,    zoomLevel )  ;", "BingTile   rightLowerTile    =    BingTileFunctions . getTileCoveringLowerRightCorner ( envelope ,    zoomLevel )  ;", "long   tileCount    =     (  ( long )     (  (  ( rightLowerTile . getX (  )  )     -     ( leftUpperTile . getX (  )  )  )     +     1  )  )     *     (  (  ( rightLowerTile . getY (  )  )     -     ( leftUpperTile . getY (  )  )  )     +     1  )  ;", "BingTileFunctions . checkGeometryToBingTilesLimits ( geometry ,    pointOrRectangle ,    tileCount )  ;", "BlockBuilder   blockBuilder    =    BIGINT . createBlockBuilder ( null ,    Math . toIntExact ( tileCount )  )  ;", "if    ( pointOrRectangle    |  |     ( zoomLevel    <  =     ( BingTileFunctions . OPTIMIZED _ TILING _ MIN _ ZOOM _ LEVEL )  )  )     {", "for    ( int   x    =    leftUpperTile . getX (  )  ;    x    <  =     ( rightLowerTile . getX (  )  )  ;    x +  +  )     {", "for    ( int   y    =    leftUpperTile . getY (  )  ;    y    <  =     ( rightLowerTile . getY (  )  )  ;    y +  +  )     {", "BingTile   tile    =    BingTile . fromCoordinates ( x ,    y ,    zoomLevel )  ;", "if    ( pointOrRectangle    |  |     (  !  ( disjoint ( BingTileFunctions . tileToEnvelope ( tile )  ,    geometry ,    null )  )  )  )     {", "BIGINT . writeLong ( blockBuilder ,    tile . encode (  )  )  ;", "}", "}", "}", "} else    {", "BingTile [  ]    tiles    =    BingTileFunctions . getTilesInBetween ( leftUpperTile ,    rightLowerTile ,    BingTileFunctions . OPTIMIZED _ TILING _ MIN _ ZOOM _ LEVEL )  ;", "for    ( BingTile   tile    :    tiles )     {", "BingTileFunctions . writeTilesToBlockBuilder ( geometry ,    zoomLevel ,    tile ,    blockBuilder )  ;", "}", "}", "return   blockBuilder . build (  )  ;", "}", "METHOD_END"], "methodName": ["geometryToBingTiles"], "fileName": "com.facebook.presto.plugin.geospatial.BingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "if    ( geometry   instanceof   Point )     {", "return    1  ;", "}", "return    (  ( MultiVertexGeometry )     ( geometry )  )  . getPointCount (  )  ;", "}", "METHOD_END"], "methodName": ["getPointCount"], "fileName": "com.facebook.presto.plugin.geospatial.BingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "BingTile   tile    =    BingTileFunctions . latitudeLongitudeToTile ( envelope . getYMin (  )  ,    envelope . getXMax (  )  ,    zoomLevel )  ;", "int   deltaX    =     0  ;", "int   deltaY    =     0  ;", "Point   upperLeftCorner    =    BingTileFunctions . tileXYToLatitudeLongitude ( tile . getX (  )  ,    tile . getY (  )  ,    tile . getZoomLevel (  )  )  ;", "if    (  ( upperLeftCorner . getX (  )  )     =  =     ( envelope . getXMax (  )  )  )     {", "deltaX    =     -  1  ;", "}", "if    (  ( upperLeftCorner . getY (  )  )     =  =     ( envelope . getYMin (  )  )  )     {", "deltaY    =     -  1  ;", "}", "if    (  ( deltaX    !  =     0  )     |  |     ( deltaY    !  =     0  )  )     {", "return   BingTile . fromCoordinates (  (  ( tile . getX (  )  )     +    deltaX )  ,     (  ( tile . getY (  )  )     +    deltaY )  ,    tile . getZoomLevel (  )  )  ;", "}", "return   tile ;", "}", "METHOD_END"], "methodName": ["getTileCoveringLowerRightCorner"], "fileName": "com.facebook.presto.plugin.geospatial.BingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "checkArgument (  (  ( leftUpperTile . getZoomLevel (  )  )     =  =     ( rightLowerTile . getZoomLevel (  )  )  )  )  ;", "checkArgument (  (  ( leftUpperTile . getZoomLevel (  )  )     >    zoomLevel )  )  ;", "int   divisor    =     1     <  <     (  ( leftUpperTile . getZoomLevel (  )  )     -    zoomLevel )  ;", "int   minX    =     (  ( int )     ( Math . floor (  (  ( leftUpperTile . getX (  )  )     /    divisor )  )  )  )  ;", "int   maxX    =     (  ( int )     ( Math . floor (  (  ( rightLowerTile . getX (  )  )     /    divisor )  )  )  )  ;", "int   minY    =     (  ( int )     ( Math . floor (  (  ( leftUpperTile . getY (  )  )     /    divisor )  )  )  )  ;", "int   maxY    =     (  ( int )     ( Math . floor (  (  ( rightLowerTile . getY (  )  )     /    divisor )  )  )  )  ;", "BingTile [  ]    tiles    =    new   BingTile [  (  ( maxX    -    minX )     +     1  )     *     (  ( maxY    -    minY )     +     1  )  ]  ;", "int   index    =     0  ;", "for    ( int   x    =    minX ;    x    <  =    maxX ;    x +  +  )     {", "for    ( int   y    =    minY ;    y    <  =    maxY ;    y +  +  )     {", "tiles [ index ]     =    BingTile . fromCoordinates ( x ,    y ,     . OPTIMIZED _ TILING _ MIN _ ZOOM _ LEVEL )  ;", "index +  +  ;", "}", "}", "return   tiles ;", "}", "METHOD_END"], "methodName": ["getTilesInBetween"], "fileName": "com.facebook.presto.plugin.geospatial.BingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "if    ( geometry   instanceof   Point )     {", "return   true ;", "}", "if    (  !  ( geometry   instanceof   Polygon )  )     {", "return   false ;", "}", "Polygon   polygon    =     (  ( Polygon )     ( geometry )  )  ;", "if    (  ( polygotPathCount (  )  )     >     1  )     {", "return   false ;", "}", "if    (  ( polygotPointCount (  )  )     !  =     4  )     {", "return   false ;", "}", "Set < Point >    corners    =    new   HashSet <  >  (  )  ;", "corners . add ( new   Point ( envelope . getXMin (  )  ,    envelope . getYMin (  )  )  )  ;", "corners . add ( new   Point ( envelope . getXMin (  )  ,    envelope . getYMax (  )  )  )  ;", "corners . add ( new   Point ( envelope . getXMax (  )  ,    envelope . getYMin (  )  )  )  ;", "corners . add ( new   Point ( envelope . getXMax (  )  ,    envelope . getYMax (  )  )  )  ;", "for    ( int   i    =     0  ;    i    <     4  ;    i +  +  )     {", "Point   point    =    polygotPoint ( i )  ;", "if    (  !  ( corners . contains ( point )  )  )     {", "return   false ;", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["isPointOrRectangle"], "fileName": "com.facebook.presto.plugin.geospatial.BingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "double   x    =     ( longitude    +     1  8  0  )     /     3  6  0  ;", "double   sinLatitude    =    Math . sin (  (  ( latitude    *     ( Math . PI )  )     /     1  8  0  )  )  ;", "double   y    =     0  .  5     -     (  ( Math . log (  (  (  1     +    sinLatitude )     /     (  1     -    sinLatitude )  )  )  )     /     (  4     *     ( Math . PI )  )  )  ;", "int   mapSize    =     . mapSize ( zoomLevel )  ;", "int   tileX    =     (  ( int )     (  . clip (  ( x    *    mapSize )  ,     0  ,     ( mapSize    -     1  )  )  )  )  ;", "int   tileY    =     (  ( int )     (  . clip (  ( y    *    mapSize )  ,     0  ,     ( mapSize    -     1  )  )  )  )  ;", "return   BingTile . fromCoordinates (  ( tileX    /     (  . TILE _ PIXELS )  )  ,     ( tileY    /     (  . TILE _ PIXELS )  )  ,    zoomLevel )  ;", "}", "METHOD_END"], "methodName": ["latitudeLongitudeToTile"], "fileName": "com.facebook.presto.plugin.geospatial.BingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "return    2  5  6     <  <    zoomLevel ;", "}", "METHOD_END"], "methodName": ["mapSize"], "fileName": "com.facebook.presto.plugin.geospatial.BingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "Point   upperLeftCorner    =    BingTileFunctions . tileXYToLatitudeLongitude ( tile . getX (  )  ,    tile . getY (  )  ,    tile . getZoomLevel (  )  )  ;", "Point   lowerRightCorner    =    BingTileFunctions . tileXYToLatitudeLongitude (  (  ( tile . getX (  )  )     +     1  )  ,     (  ( tile . getY (  )  )     +     1  )  ,    tile . getZoomLevel (  )  )  ;", "return   new   com . esri . core . geometry . Envelope ( upperLeftCorner . getX (  )  ,    lowerRightCorner . getY (  )  ,    lowerRightCorner . getX (  )  ,    upperLeftCorner . getY (  )  )  ;", "}", "METHOD_END"], "methodName": ["tileToEnvelope"], "fileName": "com.facebook.presto.plugin.geospatial.BingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "int   mapSize    =    BingTileFunctions . mapSize ( zoomLevel )  ;", "double   x    =     (  ( BingTileFunctions . clip (  ( tileX    *     ( BingTileFunctions . TILE _ PIXELS )  )  ,     0  ,    mapSize )  )     /    mapSize )     -     0  .  5  ;", "double   y    =     0  .  5     -     (  ( BingTileFunctions . clip (  ( tileY    *     ( BingTileFunctions . TILE _ PIXELS )  )  ,     0  ,    mapSize )  )     /    mapSize )  ;", "double   latitude    =     9  0     -     (  (  3  6  0     *     ( Math . atan ( Math . exp (  (  (  (  - y )     *     2  )     *     ( Math . PI )  )  )  )  )  )     /     ( Math . PI )  )  ;", "double   longitude    =     3  6  0     *    x ;", "return   new   Point ( longitude ,    latitude )  ;", "}", "METHOD_END"], "methodName": ["tileXYToLatitudeLongitude"], "fileName": "com.facebook.presto.plugin.geospatial.BingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "BingTileFunctions . checkQuadKey ( quadKey )  ;", "return   BingTile . fromQuadKey ( quadKey . toStringUtf 8  (  )  )  . encode (  )  ;", "}", "METHOD_END"], "methodName": ["toBingTile"], "fileName": "com.facebook.presto.plugin.geospatial.BingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "BingTileFunctions . checkZoomLevel ( zoomLevel )  ;", "BingTileFunctions . checkCoordinate ( tileX ,    zoomLevel )  ;", "BingTileFunctions . checkCoordinate ( tileY ,    zoomLevel )  ;", "return   BingTile . fromCoordinates ( Math . toIntExact ( tileX )  ,    Math . toIntExact ( tileY )  ,    Math . toIntExact ( zoomLevel )  )  . encode (  )  ;", "}", "METHOD_END"], "methodName": ["toBingTile"], "fileName": "com.facebook.presto.plugin.geospatial.BingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "return   Slices . utf 8 Slice ( BingTile . decode ( input )  . toQuadKey (  )  )  ;", "}", "METHOD_END"], "methodName": ["toQuadKey"], "fileName": "com.facebook.presto.plugin.geospatial.BingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "int   tileZoomLevel    =    tile . getZoomLevel (  )  ;", "checkArgument (  ( tileZoomLevel    <  =    zoomLevel )  )  ;", "Envelope   tileEnvelope    =     . tileToEnvelope ( tile )  ;", "if    ( tileZoomLevel    =  =    zoomLevel )     {", "if    (  !  ( disjoint ( tileEnvelope ,    geometry ,    null )  )  )     {", "BIGINT . writeLong ( blockBuilder ,    tile . encode (  )  )  ;", "}", "return ;", "}", "if    ( contains ( geometry ,    tileEnvelope ,    null )  )     {", "int   subTileCount    =     1     <  <     ( zoomLevel    -    tileZoomLevel )  ;", "int   minX    =    subTileCount    *     ( tile . getX (  )  )  ;", "int   minY    =    subTileCount    *     ( tile . getY (  )  )  ;", "for    ( int   x    =    minX ;    x    <     ( minX    +    subTileCount )  ;    x +  +  )     {", "for    ( int   y    =    minY ;    y    <     ( minY    +    subTileCount )  ;    y +  +  )     {", "BIGINT . writeLong ( blockBuilder ,    BingTile . fromCoordinates ( x ,    y ,    zoomLevel )  . encode (  )  )  ;", "}", "}", "return ;", "}", "if    ( disjoint ( tileEnvelope ,    geometry ,    null )  )     {", "return ;", "}", "int   minX    =     2     *     ( tile . getX (  )  )  ;", "int   minY    =     2     *     ( tile . getY (  )  )  ;", "int   nextZoomLevel    =    tileZoomLevel    +     1  ;", "verify (  ( nextZoomLevel    <  =     ( BingTile . MAX _ ZOOM _ LEVEL )  )  )  ;", "for    ( int   x    =    minX ;    x    <     ( minX    +     2  )  ;    x +  +  )     {", "for    ( int   y    =    minY ;    y    <     ( minY    +     2  )  ;    y +  +  )     {", ". writeTilesToBlockBuilder ( geometry ,    zoomLevel ,    BingTile . fromCoordinates ( x ,    y ,    nextZoomLevel )  ,    blockBuilder )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["writeTilesToBlockBuilder"], "fileName": "com.facebook.presto.plugin.geospatial.BingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "return   left    =  =    right ;", "}", "METHOD_END"], "methodName": ["equal"], "fileName": "com.facebook.presto.plugin.geospatial.BingTileOperators"}, {"methodBody": ["METHOD_START", "{", "return   AbstractLongType . hash ( value )  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "com.facebook.presto.plugin.geospatial.BingTileOperators"}, {"methodBody": ["METHOD_START", "{", "return   left    !  =    right ;", "}", "METHOD_END"], "methodName": ["notEqual"], "fileName": "com.facebook.presto.plugin.geospatial.BingTileOperators"}, {"methodBody": ["METHOD_START", "{", "if    (  (  (  ( Double . isNaN ( latitude )  )     |  |     ( Double . isInfinite ( latitude )  )  )     |  |     ( latitude    <     (  -  9  0  )  )  )     |  |     ( latitude    >     9  0  )  )     {", "throw   new   spi . PrestoException ( INVALID _ FUNCTION _ ARGUMENT ,     \" Latitude   must   be   between    -  9  0    and    9  0  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkLatitude"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  (  (  ( Double . isNaN ( longitude )  )     |  |     ( Double . isInfinite ( longitude )  )  )     |  |     ( longitude    <     (  -  1  8  0  )  )  )     |  |     ( longitude    >     1  8  0  )  )     {", "throw   new   spi . PrestoException ( INVALID _ FUNCTION _ ARGUMENT ,     \" Longitude   must   be   between    -  1  8  0    and    1  8  0  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkLongitude"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "double   xSum    =     0  ;", "double   ySum    =     0  ;", "double   weightSum    =     0  ;", "for    ( int   i    =     0  ;    i    <     ( polylinetPathCount (  )  )  ;    i +  +  )     {", "Point   startPoint    =    polylinetPoint ( polylinetPathStart ( i )  )  ;", "Point   endPoint    =    polylinetPoint (  (  ( polylinetPathEnd ( i )  )     -     1  )  )  ;", "double   dx    =     ( endPointtX (  )  )     -     ( startPointtX (  )  )  ;", "double   dy    =     ( endPointtY (  )  )     -     ( startPointtY (  )  )  ;", "double   length    =    Math . sqrt (  (  ( dx    *    dx )     +     ( dy    *    dy )  )  )  ;", "weightSum    +  =    length ;", "xSum    +  =     (  (  ( startPointtX (  )  )     +     ( endPointtX (  )  )  )     *    length )     /     2  ;", "ySum    +  =     (  (  ( startPointtY (  )  )     +     ( endPointtY (  )  )  )     *    length )     /     2  ;", "}", "return   new   Point (  ( xSum    /    weightSum )  ,     ( ySum    /    weightSum )  )  ;", "}", "METHOD_END"], "methodName": ["computeLineCentroid"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "double   xSum    =     0  ;", "double   ySum    =     0  ;", "double   weightSum    =     0  ;", "for    ( int   i    =     0  ;    i    <     ( multiPolygon . numGeometries (  )  )  ;    i +  +  )     {", "Point   centroid    =     . computePolygonCentroid (  (  ( Polygon )     ( multiPolygon . geometryN ( i )  . getEsriGeometry (  )  )  )  )  ;", "Polygon   polygon    =     (  ( Polygon )     ( multiPolygon . geometryN ( i )  . getEsriGeometry (  )  )  )  ;", "double   weight    =    polygon . calculateArea 2 D (  )  ;", "weightSum    +  =    weight ;", "xSum    +  =     ( centroid . getX (  )  )     *    weight ;", "ySum    +  =     ( centroid . getY (  )  )     *    weight ;", "}", "return   new   Point (  ( xSum    /    weightSum )  ,     ( ySum    /    weightSum )  )  ;", "}", "METHOD_END"], "methodName": ["computeMultiPolygonCentroid"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "double   xSum    =     0  ;", "double   ySum    =     0  ;", "for    ( int   i    =     0  ;    i    <     ( multiVertextPointCount (  )  )  ;    i +  +  )     {", "Point   point    =    multiVertextPoint ( i )  ;", "xSum    +  =    pointtX (  )  ;", "ySum    +  =    pointtY (  )  ;", "}", "return   new   Point (  ( xSum    /     ( multiVertextPointCount (  )  )  )  ,     ( ySum    /     ( multiVertextPointCount (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["computePointsCentroid"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "int   pathCount    =    polygon . getPathCount (  )  ;", "if    ( pathCount    =  =     1  )     {", "return    . getPolygonSansHolesCentroid ( polygon )  ;", "}", "double   xSum    =     0  ;", "double   ySum    =     0  ;", "double   areaSum    =     0  ;", "for    ( int   i    =     0  ;    i    <    pathCount ;    i +  +  )     {", "int   startIndex    =    polygon . getPathStart ( i )  ;", "int   endIndex    =    polygon . getPathEnd ( i )  ;", "Polygon   sansHoles    =     . getSubPolygon ( polygon ,    startIndex ,    endIndex )  ;", "Point   centroid    =     . getPolygonSansHolesCentroid ( sansHoles )  ;", "double   area    =    sansHoles . calculateArea 2 D (  )  ;", "xSum    +  =     ( centroid . getX (  )  )     *    area ;", "ySum    +  =     ( centroid . getY (  )  )     *    area ;", "areaSum    +  =    area ;", "}", "return   new   Point (  ( xSum    /    areaSum )  ,     ( ySum    /    areaSum )  )  ;", "}", "METHOD_END"], "methodName": ["computePolygonCentroid"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "Envelope   leftEnvelope    =    deserializeEnvelope ( left )  ;", "Envelope   rightEnvelope    =    deserializeEnvelope ( right )  ;", "if    (  ( leftEnvelope    =  =    null )     |  |     ( rightEnvelope    =  =    null )  )     {", "return   false ;", "}", "return   predicate . apply ( leftEnvelope ,    rightEnvelope )  ;", "}", "METHOD_END"], "methodName": ["envelopes"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "OGCGeometry   geometry ;", "try    {", "geometry    =    OGCGeometry . fromText ( input . toStringUtf 8  (  )  )  ;", "}    catch    ( IllegalArgumentException   e )     {", "throw   new   spi . PrestoException ( INVALID _ FUNCTION _ ARGUMENT ,     (  \" Invalid   WKT :     \"     +     ( input . toStringUtf 8  (  )  )  )  ,    e )  ;", "}", "geometry . setSpatialReference ( null )  ;", "return   geometry ;", "}", "METHOD_END"], "methodName": ["geometryFromText"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "int   pointCount    =    polygon . getPointCount (  )  ;", "double   xSum    =     0  ;", "double   ySum    =     0  ;", "double   signedArea    =     0  ;", "for    ( int   i    =     0  ;    i    <    pointCount ;    i +  +  )     {", "Point   current    =    polygon . getPoint ( i )  ;", "Point   next    =    polygon . getPoint (  (  ( i    +     1  )     %     ( polygon . getPointCount (  )  )  )  )  ;", "double   ladder    =     (  ( current . getX (  )  )     *     ( next . getY (  )  )  )     -     (  ( next . getX (  )  )     *     ( current . getY (  )  )  )  ;", "xSum    +  =     (  ( current . getX (  )  )     +     ( next . getX (  )  )  )     *    ladder ;", "ySum    +  =     (  ( current . getY (  )  )     +     ( next . getY (  )  )  )     *    ladder ;", "signedArea    +  =    ladder    /     2  ;", "}", "return   new   Point (  ( xSum    /     ( signedArea    *     6  )  )  ,     ( ySum    /     ( signedArea    *     6  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getPolygonSansHolesCentroid"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "Polyline   boundary    =    new   Polyline (  )  ;", "boundary . startPath ( polygotPoint ( startIndex )  )  ;", "for    ( int   i    =    startIndex    +     1  ;    i    <    endIndex ;    i +  +  )     {", "Point   current    =    polygotPoint ( i )  ;", "boundary . lineTo ( current )  ;", "}", "final   Polygon   newPolygon    =    new   Polygon (  )  ;", "newPolygon . add ( boundary ,    false )  ;", "return   newPolygon ;", "}", "METHOD_END"], "methodName": ["getSubPolygon"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "GeoFunctions . checkLatitude ( latitude 1  )  ;", "GeoFunctions . checkLongitude ( longitude 1  )  ;", "GeoFunctions . checkLatitude ( latitude 2  )  ;", "GeoFunctions . checkLongitude ( longitude 2  )  ;", "double   radianLatitude 1     =    Math . toRadians ( latitude 1  )  ;", "double   radianLatitude 2     =    Math . toRadians ( latitude 2  )  ;", "double   sin 1     =    Math . sin ( radianLatitude 1  )  ;", "double   cos 1     =    Math . cos ( radianLatitude 1  )  ;", "double   sin 2     =    Math . sin ( radianLatitude 2  )  ;", "double   cos 2     =    Math . cos ( radianLatitude 2  )  ;", "double   deltaLongitude    =     ( Math . toRadians ( longitude 1  )  )     -     ( Math . toRadians ( longitude 2  )  )  ;", "double   cosDeltaLongitude    =    Math . cos ( deltaLongitude )  ;", "double   t 1     =    cos 2     *     ( Math . sin ( deltaLongitude )  )  ;", "double   t 2     =     ( cos 1     *    sin 2  )     -     (  ( sin 1     *    cos 2  )     *    cosDeltaLongitude )  ;", "double   t 3     =     ( sin 1     *    sin 2  )     +     (  ( cos 1     *    cos 2  )     *    cosDeltaLongitude )  ;", "return    ( Math . atan 2  ( Math . sqrt (  (  ( t 1     *    t 1  )     +     ( t 2     *    t 2  )  )  )  ,    t 3  )  )     *     ( GeoFunctions . EARTH _ RADIUS _ KM )  ;", "}", "METHOD_END"], "methodName": ["greatCircleDistance"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "Geometry   geometry    =    JtsGeometrySerde . deserialize ( input )  ;", "if    ( geometry    =  =    null )     {", "return   null ;", "}", "TopologyValidaError   error    =    new   IsValidOp ( geometry )  . getValidaError (  )  ;", "if    ( error    =  =    null )     {", "return   null ;", "}", "return   Slices . utf 8 Slice ( error . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["invalidReason"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "Geometry   line    =    JtsGeometrySerde . deserialize ( lineSlice )  ;", "Geometry   point    =    JtsGeometrySerde . deserialize ( pointSlice )  ;", "if    (  ( line . isEmpty (  )  )     |  |     ( point . isEmpty (  )  )  )     {", "return   null ;", "}", "GeometryType   lineType    =    getForJtsGeometryType ( line . getGeometryType (  )  )  ;", "if    (  ( lineType    !  =     ( LINE _ STRING )  )     &  &     ( lineType    !  =     ( MULTI _ LINE _ STRING )  )  )     {", "throw   new   spi . PrestoException ( INVALID _ FUNCTION _ ARGUMENT ,    String . format (  \" First   argument   to   line _ locate _ point   must   be   a   LineString   or   a   MultiLineString .    Got :     % s \"  ,    line . getGeometryType (  )  )  )  ;", "}", "GeometryType   pointType    =    getForJtsGeometryType ( point . getGeometryType (  )  )  ;", "if    ( pointType    !  =     ( POINT )  )     {", "throw   new   spi . PrestoException ( INVALID _ FUNCTION _ ARGUMENT ,    String . format (  \" Second   argument   to   line _ locate _ point   must   be   a   Point .    Got :     % s \"  ,    point . getGeometryType (  )  )  )  ;", "}", "return   new   LengthIndexedLine ( line )  . indexOf ( point . getCoordinate (  )  )  ;", "}", "METHOD_END"], "methodName": ["lineLocatePoint"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "OGCGeometry   geometry    =    GeoFunctions . geometryFromText ( input )  ;", "GeoFunctions . validateType (  \" ST _ LineFromText \"  ,    geometry ,    EnumSet . of ( LINE _ STRING )  )  ;", "return   serialize ( geometry )  ;", "}", "METHOD_END"], "methodName": ["parseLine"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "if    ( Double . isNaN ( distanceTolerance )  )     {", "throw   new   spi . PrestoException ( INVALID _ FUNCTION _ ARGUMENT ,     \" distanceTolerance   is   NaN \"  )  ;", "}", "if    ( distanceTolerance    <     0  )     {", "throw   new   spi . PrestoException ( INVALID _ FUNCTION _ ARGUMENT ,     \" distanceTolerance   is   negative \"  )  ;", "}", "if    ( distanceTolerance    =  =     0  )     {", "return   input ;", "}", "return   JtsGeometrySerde . serialize ( simplify ( JtsGeometrySerde . deserialize ( input )  ,    distanceTolerance )  )  ;", "}", "METHOD_END"], "methodName": ["simplifyGeometry"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "OGCGeometry   geometry    =    deserialize ( input )  ;", ". validateType (  \" ST _ Area \"  ,    geometry ,    EnumSet . of ( POLYGON ,    MULTI _ POLYGON )  )  ;", "return   geometry . getEsriGeometry (  )  . calculateArea 2 D (  )  ;", "}", "METHOD_END"], "methodName": ["stArea"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "return   Slices . utf 8 Slice ( deserialize ( input )  . asText (  )  )  ;", "}", "METHOD_END"], "methodName": ["stAsText"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "OGCGeometry   geometry    =    deserialize ( input )  ;", "if    (  ( geometry . isEmpty (  )  )     &  &     (  ( GeometryType . getForEsriGeometryType ( geometry . geometryType (  )  )  )     =  =     ( LINE _ STRING )  )  )     {", "return    . EMPTY _ MULTIPOINT ;", "}", "return   serialize ( geometry . boundary (  )  )  ;", "}", "METHOD_END"], "methodName": ["stBoundary"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "if    ( Double . isNaN ( distance )  )     {", "throw   new   spi . PrestoException ( INVALID _ FUNCTION _ ARGUMENT ,     \" distance   is   NaN \"  )  ;", "}", "if    ( distance    <     0  )     {", "throw   new   spi . PrestoException ( INVALID _ FUNCTION _ ARGUMENT ,     \" distance   is   negative \"  )  ;", "}", "if    ( distance    =  =     0  )     {", "return   input ;", "}", "OGCGeometry   geometry    =    deserialize ( input )  ;", "if    ( geometry . isEmpty (  )  )     {", "return   null ;", "}", "return   serialize ( geometry . buffer ( distance )  )  ;", "}", "METHOD_END"], "methodName": ["stBuffer"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "OGCGeometry   geometry    =    deserialize ( input )  ;", "GeoFunctions . validateType (  \" ST _ Centroid \"  ,    geometry ,    EnumSet . of ( POINT ,    MULTI _ POINT ,    LINE _ STRING ,    MULTI _ LINE _ STRING ,    POLYGON ,    MULTI _ POLYGON )  )  ;", "GeometryType   geometryType    =    GeometryType . getForEsriGeometryType ( geometry . geometryType (  )  )  ;", "if    ( geometryType    =  =     ( POINT )  )     {", "return   input ;", "}", "int   pointCount    =     (  ( MultiVertexGeometry )     ( geometry . getEsriGeometry (  )  )  )  . getPointCount (  )  ;", "if    ( pointCount    =  =     0  )     {", "return   serialize ( createFromEsriGeometry ( new   Point (  )  ,    geometry . getEsriSpatialReference (  )  )  )  ;", "}", "Point   centroid ;", "switch    ( geometryType )     {", "case   MULTI _ POINT    :", "centroid    =    GeoFunctions . computePointsCentroid (  (  ( MultiVertexGeometry )     ( geometry . getEsriGeometry (  )  )  )  )  ;", "break ;", "case   LINE _ STRING    :", "case   MULTI _ LINE _ STRING    :", "centroid    =    GeoFunctions . computeLineCentroid (  (  ( Polyline )     ( geometry . getEsriGeometry (  )  )  )  )  ;", "break ;", "case   POLYGON    :", "centroid    =    GeoFunctions . computePolygonCentroid (  (  ( Polygon )     ( geometry . getEsriGeometry (  )  )  )  )  ;", "break ;", "case   MULTI _ POLYGON    :", "centroid    =    GeoFunctions . computeMultiPolygonCentroid (  (  ( OGCMultiPolygon )     ( geometry )  )  )  ;", "break ;", "default    :", "throw   new   spi . PrestoException ( INVALID _ FUNCTION _ ARGUMENT ,     (  \" Unexpected   geometry   type :     \"     +    geometryType )  )  ;", "}", "return   serialize ( createFromEsriGeometry ( centroid ,    geometry . getEsriSpatialReference (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["stCentroid"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( GeoFunctions . envelopes ( left ,    right ,    Envelope :  : contains )  )  )     {", "return   false ;", "}", "OGCGeometry   leftGeometry    =    deserialize ( left )  ;", "OGCGeometry   rightGeometry    =    deserialize ( right )  ;", "GeoFunctions . verifySameSpatialReference ( leftGeometry ,    rightGeometry )  ;", "return   leftGeometry . contains ( rightGeometry )  ;", "}", "METHOD_END"], "methodName": ["stContains"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "return   deserialize ( input )  . coordinateDimension (  )  ;", "}", "METHOD_END"], "methodName": ["stCoordinateDimension"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( GeoFunctions . envelopes ( left ,    right ,    Envelope :  : intersect )  )  )     {", "return   false ;", "}", "OGCGeometry   leftGeometry    =    deserialize ( left )  ;", "OGCGeometry   rightGeometry    =    deserialize ( right )  ;", "GeoFunctions . verifySameSpatialReference ( leftGeometry ,    rightGeometry )  ;", "return   leftGeometry . crosses ( rightGeometry )  ;", "}", "METHOD_END"], "methodName": ["stCrosses"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "OGCGeometry   leftGeometry    =    deserialize ( left )  ;", "OGCGeometry   rightGeometry    =    deserialize ( right )  ;", ". verifySameSpatialReference ( leftGeometry ,    rightGeometry )  ;", "return   serialize ( leftGeometry . difference ( rightGeometry )  )  ;", "}", "METHOD_END"], "methodName": ["stDifference"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "return   deserialize ( input )  . dimension (  )  ;", "}", "METHOD_END"], "methodName": ["stDimension"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( GeoFunctions . envelopes ( left ,    right ,    Envelope :  : intersect )  )  )     {", "return   true ;", "}", "OGCGeometry   leftGeometry    =    deserialize ( left )  ;", "OGCGeometry   rightGeometry    =    deserialize ( right )  ;", "GeoFunctions . verifySameSpatialReference ( leftGeometry ,    rightGeometry )  ;", "return   leftGeometry . disjoint ( rightGeometry )  ;", "}", "METHOD_END"], "methodName": ["stDisjoint"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "OGCGeometry   leftGeometry    =    deserialize ( left )  ;", "OGCGeometry   rightGeometry    =    deserialize ( right )  ;", ". verifySameSpatialReference ( leftGeometry ,    rightGeometry )  ;", "return   leftGeometry . distance ( rightGeometry )  ;", "}", "METHOD_END"], "methodName": ["stDistance"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "OGCGeometry   geometry    =    deserialize ( input )  ;", ". validateType (  \" ST _ EndPoint \"  ,    geometry ,    EnumSet . of ( LINE _ STRING )  )  ;", "if    ( geometry . isEmpty (  )  )     {", "return   null ;", "}", "MultiPath   lines    =     (  ( MultiPath )     ( geometry . getEsriGeometry (  )  )  )  ;", "SpatialReference   reference    =    geometry . getEsriSpatialReference (  )  ;", "return   serialize ( createFromEsriGeometry ( lines . getPoint (  (  ( lines . getPointCount (  )  )     -     1  )  )  ,    reference )  )  ;", "}", "METHOD_END"], "methodName": ["stEndPoint"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "Envelope   envelope    =    deserializeEnvelope ( input )  ;", "if    ( envelope    =  =    null )     {", "return    . EMPTY _ POLYGON ;", "}", "return   serialize ( envelope )  ;", "}", "METHOD_END"], "methodName": ["stEnvelope"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "OGCGeometry   leftGeometry    =    deserialize ( left )  ;", "OGCGeometry   rightGeometry    =    deserialize ( right )  ;", ". verifySameSpatialReference ( leftGeometry ,    rightGeometry )  ;", "return   leftGeometry . equals ( rightGeometry )  ;", "}", "METHOD_END"], "methodName": ["stEquals"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "OGCGeometry   geometry    =    deserialize ( input )  ;", ". validateType (  \" ST _ ExteriorRing \"  ,    geometry ,    EnumSet . of ( POLYGON ,    MULTI _ POLYGON )  )  ;", "if    ( geometry . isEmpty (  )  )     {", "return   null ;", "}", "return   serialize (  (  ( OGCPolygon )     ( geometry )  )  . exteriorRing (  )  )  ;", "}", "METHOD_END"], "methodName": ["stExteriorRing"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "return   serialize ( GeoFunctions . geometryFromText ( input )  )  ;", "}", "METHOD_END"], "methodName": ["stGeometryFromText"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( deserializeType ( left )  )     =  =     ( ENVELOPE )  )     &  &     (  ( deserializeType ( right )  )     =  =     ( ENVELOPE )  )  )     {", "Envelope   leftEnvelope    =    deserializeEnvelope ( left )  ;", "Envelope   rightEnvelope    =    deserializeEnvelope ( right )  ;", "if    (  !  ( leftEnvelope . intersect ( rightEnvelope )  )  )     {", "return    . EMPTY _ POLYGON ;", "}", "Envelope   intersection    =    leftEnvelope ;", "if    (  ( intersection . getXMin (  )  )     =  =     ( intersection . getXMax (  )  )  )     {", "if    (  ( intersection . getYMin (  )  )     =  =     ( intersection . getYMax (  )  )  )     {", "return   serialize ( createFromEsriGeometry ( new   com . esri . core . geometry . Point ( intersection . getXMin (  )  ,    intersection . getXMax (  )  )  ,    null )  )  ;", "}", "return   serialize ( createFromEsriGeometry ( new   Polyline ( new   com . esri . core . geometry . Point ( intersection . getXMin (  )  ,    intersection . getYMin (  )  )  ,    new   com . esri . core . geometry . Point ( intersection . getXMin (  )  ,    intersection . getYMax (  )  )  )  ,    null )  )  ;", "}", "if    (  ( intersection . getYMin (  )  )     =  =     ( intersection . getYMax (  )  )  )     {", "return   serialize ( createFromEsriGeometry ( new   Polyline ( new   com . esri . core . geometry . Point ( intersection . getXMin (  )  ,    intersection . getYMin (  )  )  ,    new   com . esri . core . geometry . Point ( intersection . getXMax (  )  ,    intersection . getYMin (  )  )  )  ,    null )  )  ;", "}", "return   serialize ( intersection )  ;", "}", "OGCGeometry   leftGeometry    =    deserialize ( left )  ;", "OGCGeometry   rightGeometry    =    deserialize ( right )  ;", ". verifySameSpatialReference ( leftGeometry ,    rightGeometry )  ;", "return   serialize ( leftGeometry . intersection ( rightGeometry )  )  ;", "}", "METHOD_END"], "methodName": ["stIntersection"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( GeoFunctions . envelopes ( left ,    right ,    Envelope :  : intersect )  )  )     {", "return   false ;", "}", "OGCGeometry   leftGeometry    =    deserialize ( left )  ;", "OGCGeometry   rightGeometry    =    deserialize ( right )  ;", "GeoFunctions . verifySameSpatialReference ( leftGeometry ,    rightGeometry )  ;", "return   leftGeometry . intersects ( rightGeometry )  ;", "}", "METHOD_END"], "methodName": ["stIntersects"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "OGCGeometry   geometry    =    deserialize ( input )  ;", ". validateType (  \" ST _ IsClosed \"  ,    geometry ,    EnumSet . of ( LINE _ STRING ,    MULTI _ LINE _ STRING )  )  ;", "MultiPath   lines    =     (  ( MultiPath )     ( geometry . getEsriGeometry (  )  )  )  ;", "int   pathCount    =    lines . getPathCount (  )  ;", "for    ( int   i    =     0  ;    i    <    pathCount ;    i +  +  )     {", "Point   start    =    lines . getPoint ( lines . getPathStart ( i )  )  ;", "Point   end    =    lines . getPoint (  (  ( lines . getPathEnd ( i )  )     -     1  )  )  ;", "if    (  !  ( end . equals ( start )  )  )     {", "return   false ;", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["stIsClosed"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "return   deserialize ( input )  . isEmpty (  )  ;", "}", "METHOD_END"], "methodName": ["stIsEmpty"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "OGCGeometry   geometry    =    deserialize ( input )  ;", ". validateType (  \" ST _ IsRing \"  ,    geometry ,    EnumSet . of ( LINE _ STRING )  )  ;", "OGCLineString   line    =     (  ( OGCLineString )     ( geometry )  )  ;", "return    ( line . isClosed (  )  )     &  &     ( line . isSimple (  )  )  ;", "}", "METHOD_END"], "methodName": ["stIsRing"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "OGCGeometry   geometry    =    deserialize ( input )  ;", "return    ( geometry . isEmpty (  )  )     |  |     ( geometry . isSimple (  )  )  ;", "}", "METHOD_END"], "methodName": ["stIsSimple"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "return   JtsGeometrySerde . deserialize ( input )  . isValid (  )  ;", "}", "METHOD_END"], "methodName": ["stIsValid"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "OGCGeometry   geometry    =    deserialize ( input )  ;", ". validateType (  \" ST _ Length \"  ,    geometry ,    EnumSet . of ( LINE _ STRING ,    MULTI _ LINE _ STRING )  )  ;", "return   geometry . getEsriGeometry (  )  . calculateLength 2 D (  )  ;", "}", "METHOD_END"], "methodName": ["stLength"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "OGCGeometry   geometry    =    deserialize ( input )  ;", ". validateType (  \" ST _ NumInteriorRing \"  ,    geometry ,    EnumSet . of ( POLYGON )  )  ;", "if    ( geometry . isEmpty (  )  )     {", "return   null ;", "}", "return   Long . valueOf (  (  ( OGCPolygon )     ( geometry )  )  . numInteriorRing (  )  )  ;", "}", "METHOD_END"], "methodName": ["stNumInteriorRings"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "OGCGeometrymetry    =    deserialize ( input )  ;", "if   metry . getEsriGeometry (  )  . isEmpty (  )  )     {", "return    0  ;", "} else", "if    (  ( GeometryType . getForEsriGeometryTypemetrymetryType (  )  )  )     =  =     ( POINT )  )     {", "return    1  ;", "}", "return    (  ( MultiVertexGeometry )    metry . getEsriGeometry (  )  )  )  . getPointCount (  )  ;", "}", "METHOD_END"], "methodName": ["stNumPoints"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( GeoFunctions . envelopes ( left ,    right ,    Envelope :  : intersect )  )  )     {", "return   false ;", "}", "OGCGeometry   leftGeometry    =    deserialize ( left )  ;", "OGCGeometry   rightGeometry    =    deserialize ( right )  ;", "GeoFunctions . verifySameSpatialReference ( leftGeometry ,    rightGeometry )  ;", "return   leftGeometry . overlaps ( rightGeometry )  ;", "}", "METHOD_END"], "methodName": ["stOverlaps"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "OGCGeometry   geometry    =    createFromEsriGeometry ( new   Point ( x ,    y )  ,    null )  ;", "return   serialize ( geometry )  ;", "}", "METHOD_END"], "methodName": ["stPoint"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "OGCGeometry   geometry    =    GeoFunctions . geometryFromText ( input )  ;", "GeoFunctions . validateType (  \" ST _ Polygon \"  ,    geometry ,    EnumSet . of ( POLYGON )  )  ;", "return   serialize ( geometry )  ;", "}", "METHOD_END"], "methodName": ["stPolygon"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "OGCGeometry   leftGeometry    =    deserialize ( left )  ;", "OGCGeometry   rightGeometry    =    deserialize ( right )  ;", ". verifySameSpatialReference ( leftGeometry ,    rightGeometry )  ;", "return   leftGeometry . relate ( rightGeometry ,    relation . toStringUtf 8  (  )  )  ;", "}", "METHOD_END"], "methodName": ["stRelate"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "OGCGeometry   geometry    =    deserialize ( input )  ;", ". validateType (  \" ST _ StartPoint \"  ,    geometry ,    EnumSet . of ( LINE _ STRING )  )  ;", "if    ( geometry . isEmpty (  )  )     {", "return   null ;", "}", "MultiPath   lines    =     (  ( MultiPath )     ( geometry . getEsriGeometry (  )  )  )  ;", "SpatialReference   reference    =    geometry . getEsriSpatialReference (  )  ;", "return   serialize ( createFromEsriGeometry ( lines . getPoint (  0  )  ,    reference )  )  ;", "}", "METHOD_END"], "methodName": ["stStartPoint"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "OGCGeometry   leftGeometry    =    deserialize ( left )  ;", "OGCGeometry   rightGeometry    =    deserialize ( right )  ;", ". verifySameSpatialReference ( leftGeometry ,    rightGeometry )  ;", "return   serialize ( leftGeometry . symDifference ( rightGeometry )  )  ;", "}", "METHOD_END"], "methodName": ["stSymmetricDifference"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( GeoFunctions . envelopes ( left ,    right ,    Envelope :  : intersect )  )  )     {", "return   false ;", "}", "OGCGeometry   leftGeometry    =    deserialize ( left )  ;", "OGCGeometry   rightGeometry    =    deserialize ( right )  ;", "GeoFunctions . verifySameSpatialReference ( leftGeometry ,    rightGeometry )  ;", "return   leftGeometry . touches ( rightGeometry )  ;", "}", "METHOD_END"], "methodName": ["stTouches"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( GeoFunctions . envelopes ( right ,    left ,    Envelope :  : contains )  )  )     {", "return   false ;", "}", "OGCGeometry   leftGeometry    =    deserialize ( left )  ;", "OGCGeometry   rightGeometry    =    deserialize ( right )  ;", "GeoFunctions . verifySameSpatialReference ( leftGeometry ,    rightGeometry )  ;", "return   leftGeometry . within ( rightGeometry )  ;", "}", "METHOD_END"], "methodName": ["stWithin"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "OGCGeometry   geometry    =    deserialize ( input )  ;", ". validateType (  \" ST _ X \"  ,    geometry ,    EnumSet . of ( POINT )  )  ;", "if    ( geometry . isEmpty (  )  )     {", "return   null ;", "}", "return    (  ( OGCPoint )     ( geometry )  )  . X (  )  ;", "}", "METHOD_END"], "methodName": ["stX"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "Envelope   envelope    =    deserializeEnvelope ( input )  ;", "if    ( envelope    =  =    null )     {", "return   null ;", "}", "return   envelope . getXMax (  )  ;", "}", "METHOD_END"], "methodName": ["stXMax"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "Envelope   envelope    =    deserializeEnvelope ( input )  ;", "if    ( envelope    =  =    null )     {", "return   null ;", "}", "return   envelope . getXMin (  )  ;", "}", "METHOD_END"], "methodName": ["stXMin"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "OGCGeometry   geometry    =    deserialize ( input )  ;", ". validateType (  \" ST _ Y \"  ,    geometry ,    EnumSet . of ( POINT )  )  ;", "if    ( geometry . isEmpty (  )  )     {", "return   null ;", "}", "return    (  ( OGCPoint )     ( geometry )  )  . Y (  )  ;", "}", "METHOD_END"], "methodName": ["stY"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "Envelope   envelope    =    deserializeEnvelope ( input )  ;", "if    ( envelope    =  =    null )     {", "return   null ;", "}", "return   envelope . getYMax (  )  ;", "}", "METHOD_END"], "methodName": ["stYMax"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "Envelope   envelope    =    deserializeEnvelope ( input )  ;", "if    ( envelope    =  =    null )     {", "return   null ;", "}", "return   envelope . getYMin (  )  ;", "}", "METHOD_END"], "methodName": ["stYMin"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "GeometryType   type    =    GeometryType . getForEsriGeometryType ( geometry . geometryType (  )  )  ;", "if    (  !  ( validTypes . contains ( type )  )  )     {", "throw   new   spi . PrestoException ( INVALID _ FUNCTION _ ARGUMENT ,    String . format (  \"  % s   only   applies   to    % s .    Input   type   is :     % s \"  ,    function ,    GeoFunctions . OR _ JOINER . join ( validTypes )  ,    type )  )  ;", "}", "}", "METHOD_END"], "methodName": ["validateType"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "checkArgument ( Objects . equals ( leftGeometry . getEsriSpatialReference (  )  ,    rightGeometry . getEsriSpatialReference (  )  )  ,     \" Input   geometries   must   have   the   same   spatial   reference \"  )  ;", "}", "METHOD_END"], "methodName": ["verifySameSpatialReference"], "fileName": "com.facebook.presto.plugin.geospatial.GeoFunctions"}, {"methodBody": ["METHOD_START", "{", "DistributedQueryRunner   queryRunner    =    new   DistributedQueryRunner ( testSessionBuilder (  )  . build (  )  ,    GeoQueryRunner . DEFAULT _ WORKER _ COUNT ,    extraProperties )  ;", "queryRunner . installPlugin ( new   GeoPlugin (  )  )  ;", "return   queryRunner ;", "}", "METHOD_END"], "methodName": ["createQueryRunner"], "fileName": "com.facebook.presto.plugin.geospatial.GeoQueryRunner"}, {"methodBody": ["METHOD_START", "{", "Logging . initialize (  )  ;", "DistributedQueryRunner   queryRunner    =     . createQueryRunner ( ImmutableMap . of (  \" http - server . http . port \"  ,     \"  8  0  8  0  \"  )  )  ;", "Logger   log    =    Logger . get (  . class )  ;", "log . info (  \"  =  =  =  =  =  =  =  =    SERVER   STARTED    =  =  =  =  =  =  =  =  \"  )  ;", "log . info (  \"  \\ n =  =  =  =  \\ n % s \\ n =  =  =  =  \"  ,    queryRunner . getCoordinator (  )  . getBaseUrl (  )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.plugin.geospatial.GeoQueryRunner"}, {"methodBody": ["METHOD_START", "{", "URL   resource    =    Objects . requireNonNull ( GeometryBenchmarkUtils . class . getClassLoader (  )  . getResource ( path )  ,     (  \" resource   not   found :     \"     +    path )  )  ;", "List < String >    lines    =    readLines ( resource ,    StandardCharsets . UTF _  8  )  ;", "String   line    =    lines . get (  0  )  ;", "String [  ]    parts    =    line . split (  \"  \\  \\  |  \"  )  ;", "return   parts [  0  ]  ;", "}", "METHOD_END"], "methodName": ["loadPolygon"], "fileName": "com.facebook.presto.plugin.geospatial.GeometryBenchmarkUtils"}, {"methodBody": ["METHOD_START", "{", "GeoPlugin   plugin    =    new   GeoPlugin (  )  ;", "for    ( Type   type    :    tTypes (  )  )     {", "functionAssertions . getTypeRegistry (  )  . addType ( type )  ;", "}", "functionAssertions . getMetadata (  )  . addFunctions ( extractFunctions ( tFunctions (  )  )  )  ;", "functionAssertions . getMetadata (  )  . addFunctions ( ImmutableList . of ( APPLY _ FUNCTION )  )  ;", "}", "METHOD_END"], "methodName": ["registerFunctions"], "fileName": "com.facebook.presto.plugin.geospatial.TestBingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" array    [ bing _ tile (  1  ,     2  ,     1  0  )  ,    bing _ tile (  3  ,     4  ,     1  1  )  ]  \"  ,    new   ArrayType ( BingTileType . BING _ TILE )  ,    ImmutableList . of ( BingTile . fromCoordinates (  1  ,     2  ,     1  0  )  ,    BingTile . fromCoordinates (  3  ,     4  ,     1  1  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testArrayOfBingTiles"], "fileName": "com.facebook.presto.plugin.geospatial.TestBingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" bing _ tile _ quadkey ( bing _ tile (  '  2  1  3  '  )  )  \"  ,    VARCHAR ,     \"  2  1  3  \"  )  ;", "assertFunction (  \" bing _ tile _ quadkey ( bing _ tile (  '  1  2  3  0  3  0  1  2  3  0  1  0  1  2  1  '  )  )  \"  ,    VARCHAR ,     \"  1  2  3  0  3  0  1  2  3  0  1  0  1  2  1  \"  )  ;", "assertFunction (  \" bing _ tile _ quadkey ( bing _ tile (  3  ,     5  ,     3  )  )  \"  ,    VARCHAR ,     \"  2  1  3  \"  )  ;", "assertFunction (  \" bing _ tile _ quadkey ( bing _ tile (  2  1  8  4  5  ,     1  3  5  0  6  ,     1  5  )  )  \"  ,    VARCHAR ,     \"  1  2  3  0  3  0  1  2  3  0  1  0  1  2  1  \"  )  ;", "assertInvalidFunction (  \" bing _ tile (  '  '  )  \"  ,     \" QuadKey   must   not   be   empty   string \"  )  ;", "assertInvalidFunction (  \" bing _ tile (  ' test '  )  \"  ,     \" Invalid   QuadKey   digit   sequence :    test \"  )  ;", "assertInvalidFunction (  \" bing _ tile (  '  1  2  3  4  5  '  )  \"  ,     \" Invalid   QuadKey   digit   sequence :     1  2  3  4  5  \"  )  ;", "assertInvalidFunction (  \" bing _ tile (  '  1  0  1  0  1  0  1  0  1  0  1  0  1  0  1  0  1  0  1  0  1  0  1  0  1  0  1  0  1  0  1  0  0  1  0  1  0  1  0  1  0  1  0  0  1  0  1  0  '  )  \"  ,     \" QuadKey   must   be    2  3    characters   or   less \"  )  ;", "assertInvalidFunction (  \" bing _ tile (  1  0  ,     2  ,     3  )  \"  ,     \" XY   coordinates   for   a   Bing   tile   at   zoom   level    3    must   be   within    [  0  ,     8  )    range \"  )  ;", "assertInvalidFunction (  \" bing _ tile (  2  ,     1  0  ,     3  )  \"  ,     \" XY   coordinates   for   a   Bing   tile   at   zoom   level    3    must   be   within    [  0  ,     8  )    range \"  )  ;", "assertInvalidFunction (  \" bing _ tile (  2  ,     7  ,     3  7  )  \"  ,     \" Zoom   level   must   be    <  =     2  3  \"  )  ;", "}", "METHOD_END"], "methodName": ["testBingTile"], "fileName": "com.facebook.presto.plugin.geospatial.TestBingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" bing _ tile _ coordinates ( bing _ tile (  '  2  1  3  '  )  )  . x \"  ,    INTEGER ,     3  )  ;", "assertFunction (  \" bing _ tile _ coordinates ( bing _ tile (  '  2  1  3  '  )  )  . y \"  ,    INTEGER ,     5  )  ;", "assertFunction (  \" bing _ tile _ coordinates ( bing _ tile (  '  1  2  3  0  3  0  1  2  3  0  1  0  1  2  1  '  )  )  . x \"  ,    INTEGER ,     2  1  8  4  5  )  ;", "assertFunction (  \" bing _ tile _ coordinates ( bing _ tile (  '  1  2  3  0  3  0  1  2  3  0  1  0  1  2  1  '  )  )  . y \"  ,    INTEGER ,     1  3  5  0  6  )  ;", "}", "METHOD_END"], "methodName": ["testBingTileCoordinates"], "fileName": "com.facebook.presto.plugin.geospatial.TestBingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ AsText ( bing _ tile _ polygon ( bing _ tile (  '  1  2  3  0  3  0  1  2  3  0  1  0  1  2  1  '  )  )  )  \"  ,    VARCHAR ,     \" POLYGON    (  (  5  9  .  9  9  6  3  3  7  8  9  0  6  2  5     3  0  .  1  1  6  6  2  1  5  8  2  8  1  9  3  7  ,     6  0  .  0  0  7  3  2  4  2  1  8  7  5     3  0  .  1  1  6  6  2  1  5  8  2  8  1  9  3  7  ,     6  0  .  0  0  7  3  2  4  2  1  8  7  5     3  0  .  1  2  6  1  2  4  3  6  4  2  2  4  5  8  ,     5  9  .  9  9  6  3  3  7  8  9  0  6  2  5     3  0  .  1  2  6  1  2  4  3  6  4  2  2  4  5  8  ,     5  9  .  9  9  6  3  3  7  8  9  0  6  2  5     3  0  .  1  1  6  6  2  1  5  8  2  8  1  9  3  7  )  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Centroid ( bing _ tile _ polygon ( bing _ tile (  '  1  2  3  0  3  0  1  2  3  0  1  0  1  2  1  '  )  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  6  0  .  0  0  1  8  3  1  0  4  4  2  2  8  8     3  0  .  1  2  1  3  7  2  9  6  8  2  7  3  8  9  2  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( apply ( bing _ tile _ polygon ( bing _ tile (  1  ,     1  ,     1  )  )  ,    g    -  >    ST _ Point ( ST _ XMax ( g )  ,    ST _ YMin ( g )  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  1  8  0     -  8  5  .  0  5  1  1  2  8  7  7  9  8  0  6  5  9  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( apply ( bing _ tile _ polygon ( bing _ tile (  3  ,     3  ,     2  )  )  ,    g    -  >    ST _ Point ( ST _ XMax ( g )  ,    ST _ YMin ( g )  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  1  8  0     -  8  5  .  0  5  1  1  2  8  7  7  9  8  0  6  5  9  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( apply ( bing _ tile _ polygon ( bing _ tile (  7  ,     7  ,     3  )  )  ,    g    -  >    ST _ Point ( ST _ XMax ( g )  ,    ST _ YMin ( g )  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  1  8  0     -  8  5  .  0  5  1  1  2  8  7  7  9  8  0  6  5  9  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( apply ( bing _ tile _ polygon ( bing _ tile (  1  5  ,     1  5  ,     4  )  )  ,    g    -  >    ST _ Point ( ST _ XMax ( g )  ,    ST _ YMin ( g )  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  1  8  0     -  8  5  .  0  5  1  1  2  8  7  7  9  8  0  6  5  9  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( apply ( bing _ tile _ polygon ( bing _ tile (  3  1  ,     3  1  ,     5  )  )  ,    g    -  >    ST _ Point ( ST _ XMax ( g )  ,    ST _ YMin ( g )  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  1  8  0     -  8  5  .  0  5  1  1  2  8  7  7  9  8  0  6  5  9  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( apply ( bing _ tile _ polygon ( bing _ tile (  0  ,     0  ,     1  )  )  ,    g    -  >    ST _ Point ( ST _ XMax ( g )  ,    ST _ YMin ( g )  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  0     0  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( apply ( bing _ tile _ polygon ( bing _ tile (  1  ,     1  ,     2  )  )  ,    g    -  >    ST _ Point ( ST _ XMax ( g )  ,    ST _ YMin ( g )  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  0     0  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( apply ( bing _ tile _ polygon ( bing _ tile (  3  ,     3  ,     3  )  )  ,    g    -  >    ST _ Point ( ST _ XMax ( g )  ,    ST _ YMin ( g )  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  0     0  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( apply ( bing _ tile _ polygon ( bing _ tile (  7  ,     7  ,     4  )  )  ,    g    -  >    ST _ Point ( ST _ XMax ( g )  ,    ST _ YMin ( g )  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  0     0  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( apply ( bing _ tile _ polygon ( bing _ tile (  1  5  ,     1  5  ,     5  )  )  ,    g    -  >    ST _ Point ( ST _ XMax ( g )  ,    ST _ YMin ( g )  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  0     0  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( apply ( bing _ tile _ polygon ( bing _ tile (  1  ,     1  ,     1  )  )  ,    g    -  >    ST _ Point ( ST _ XMin ( g )  ,    ST _ YMax ( g )  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  0     0  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( apply ( bing _ tile _ polygon ( bing _ tile (  2  ,     2  ,     2  )  )  ,    g    -  >    ST _ Point ( ST _ XMin ( g )  ,    ST _ YMax ( g )  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  0     0  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( apply ( bing _ tile _ polygon ( bing _ tile (  4  ,     4  ,     3  )  )  ,    g    -  >    ST _ Point ( ST _ XMin ( g )  ,    ST _ YMax ( g )  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  0     0  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( apply ( bing _ tile _ polygon ( bing _ tile (  8  ,     8  ,     4  )  )  ,    g    -  >    ST _ Point ( ST _ XMin ( g )  ,    ST _ YMax ( g )  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  0     0  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( apply ( bing _ tile _ polygon ( bing _ tile (  1  6  ,     1  6  ,     5  )  )  ,    g    -  >    ST _ Point ( ST _ XMin ( g )  ,    ST _ YMax ( g )  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  0     0  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( apply ( bing _ tile _ polygon ( bing _ tile (  0  ,     0  ,     1  )  )  ,    g    -  >    ST _ Point ( ST _ XMin ( g )  ,    ST _ YMax ( g )  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  -  1  8  0     8  5  .  0  5  1  1  2  8  7  7  9  8  0  6  5  9  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( apply ( bing _ tile _ polygon ( bing _ tile (  0  ,     0  ,     2  )  )  ,    g    -  >    ST _ Point ( ST _ XMin ( g )  ,    ST _ YMax ( g )  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  -  1  8  0     8  5  .  0  5  1  1  2  8  7  7  9  8  0  6  5  9  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( apply ( bing _ tile _ polygon ( bing _ tile (  0  ,     0  ,     3  )  )  ,    g    -  >    ST _ Point ( ST _ XMin ( g )  ,    ST _ YMax ( g )  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  -  1  8  0     8  5  .  0  5  1  1  2  8  7  7  9  8  0  6  5  9  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( apply ( bing _ tile _ polygon ( bing _ tile (  0  ,     0  ,     4  )  )  ,    g    -  >    ST _ Point ( ST _ XMin ( g )  ,    ST _ YMax ( g )  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  -  1  8  0     8  5  .  0  5  1  1  2  8  7  7  9  8  0  6  5  9  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( apply ( bing _ tile _ polygon ( bing _ tile (  0  ,     0  ,     5  )  )  ,    g    -  >    ST _ Point ( ST _ XMin ( g )  ,    ST _ YMax ( g )  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  -  1  8  0     8  5  .  0  5  1  1  2  8  7  7  9  8  0  6  5  9  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testBingTilePolygon"], "fileName": "com.facebook.presto.plugin.geospatial.TestBingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" bing _ tile _ zoom _ level ( bing _ tile (  '  2  1  3  '  )  )  \"  ,    TINYINT ,     (  ( byte )     (  3  )  )  )  ;", "assertFunction (  \" bing _ tile _ zoom _ level ( bing _ tile (  '  1  2  3  0  3  0  1  2  3  0  1  0  1  2  1  '  )  )  \"  ,    TINYINT ,     (  ( byte )     (  1  5  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testBingTileZoomLevel"], "fileName": "com.facebook.presto.plugin.geospatial.TestBingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" bing _ tile (  3  ,     5  ,     3  )     =    bing _ tile (  3  ,     5  ,     3  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" bing _ tile (  '  2  1  3  '  )     =    bing _ tile (  3  ,     5  ,     3  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" bing _ tile (  '  2  1  3  '  )     =    bing _ tile (  '  2  1  3  '  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" bing _ tile (  3  ,     5  ,     3  )     =    bing _ tile (  3  ,     5  ,     4  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" bing _ tile (  '  2  1  3  '  )     =    bing _ tile (  '  2  1  3  1  '  )  \"  ,    BOOLEAN ,    false )  ;", "}", "METHOD_END"], "methodName": ["testEqual"], "fileName": "com.facebook.presto.plugin.geospatial.TestBingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" transform ( geometry _ to _ bing _ tiles ( ST _ Point (  6  0  ,     3  0  .  1  2  )  ,     1  0  )  ,    x    -  >    bing _ tile _ quadkey ( x )  )  \"  ,    new   com . facebook . presto . spi . type . ArrayType ( VARCHAR )  ,    ImmutableList . of (  \"  1  2  3  0  3  0  1  2  3  0  \"  )  )  ;", "assertFunction (  \" transform ( geometry _ to _ bing _ tiles ( ST _ Point (  6  0  ,     3  0  .  1  2  )  ,     1  5  )  ,    x    -  >    bing _ tile _ quadkey ( x )  )  \"  ,    new   com . facebook . presto . spi . type . ArrayType ( VARCHAR )  ,    ImmutableList . of (  \"  1  2  3  0  3  0  1  2  3  0  1  0  1  2  1  \"  )  )  ;", "assertFunction (  \" transform ( geometry _ to _ bing _ tiles ( ST _ Point (  6  0  ,     3  0  .  1  2  )  ,     1  6  )  ,    x    -  >    bing _ tile _ quadkey ( x )  )  \"  ,    new   com . facebook . presto . spi . type . ArrayType ( VARCHAR )  ,    ImmutableList . of (  \"  1  2  3  0  3  0  1  2  3  0  1  0  1  2  1  2  \"  )  )  ;", "assertFunction (  \" transform ( geometry _ to _ bing _ tiles ( ST _ GeometryFromText (  ' POLYGON    (  (  0     0  ,     0     1  0  ,     1  0     1  0  ,     1  0     0  )  )  '  )  ,     6  )  ,    x    -  >    bing _ tile _ quadkey ( x )  )  \"  ,    new   com . facebook . presto . spi . type . ArrayType ( VARCHAR )  ,    ImmutableList . of (  \"  1  2  2  2  2  0  \"  ,     \"  1  2  2  2  2  2  \"  ,     \"  1  2  2  2  2  1  \"  ,     \"  1  2  2  2  2  3  \"  )  )  ;", "assertFunction (  \" transform ( geometry _ to _ bing _ tiles ( ST _ GeometryFromText (  ' POLYGON    (  (  0     0  ,     0     1  0  ,     1  0     1  0  )  )  '  )  ,     6  )  ,    x    -  >    bing _ tile _ quadkey ( x )  )  \"  ,    new   com . facebook . presto . spi . type . ArrayType ( VARCHAR )  ,    ImmutableList . of (  \"  1  2  2  2  2  0  \"  ,     \"  1  2  2  2  2  2  \"  ,     \"  1  2  2  2  2  1  \"  )  )  ;", "assertFunction (  \" transform ( geometry _ to _ bing _ tiles ( ST _ GeometryFromText (  ' POLYGON    (  (  1  0     1  0  ,     -  1  0     1  0  ,     -  2  0     -  1  5  ,     1  0     1  0  )  )  '  )  ,     3  )  ,    x    -  >    bing _ tile _ quadkey ( x )  )  \"  ,    new   com . facebook . presto . spi . type . ArrayType ( VARCHAR )  ,    ImmutableList . of (  \"  0  3  3  \"  ,     \"  2  1  1  \"  ,     \"  1  2  2  \"  )  )  ;", "assertFunction (  \" transform ( geometry _ to _ bing _ tiles ( ST _ GeometryFromText (  ' POLYGON    (  (  1  0     1  0  ,     -  1  0     1  0  ,     -  2  0     -  1  5  ,     1  0     1  0  )  )  '  )  ,     6  )  ,    x    -  >    bing _ tile _ quadkey ( x )  )  \"  ,    new   com . facebook . presto . spi . type . ArrayType ( VARCHAR )  ,    ImmutableList . of (  \"  2  1  1  1  0  2  \"  ,     \"  2  1  1  1  2  0  \"  ,     \"  0  3  3  3  2  1  \"  ,     \"  0  3  3  3  2  3  \"  ,     \"  2  1  1  1  0  1  \"  ,     \"  2  1  1  1  0  3  \"  ,     \"  2  1  1  1  2  1  \"  ,     \"  0  3  3  3  3  0  \"  ,     \"  0  3  3  3  3  2  \"  ,     \"  2  1  1  1  1  0  \"  ,     \"  2  1  1  1  1  2  \"  ,     \"  0  3  3  3  3  1  \"  ,     \"  0  3  3  3  3  3  \"  ,     \"  2  1  1  1  1  1  \"  ,     \"  1  2  2  2  2  0  \"  ,     \"  1  2  2  2  2  2  \"  ,     \"  1  2  2  2  2  1  \"  )  )  ;", "assertFunction (  \" transform ( geometry _ to _ bing _ tiles ( bing _ tile _ polygon ( bing _ tile (  '  1  2  3  0  3  0  1  2  3  0  '  )  )  ,     1  0  )  ,    x    -  >    bing _ tile _ quadkey ( x )  )  \"  ,    new   com . facebook . presto . spi . type . ArrayType ( VARCHAR )  ,    ImmutableList . of (  \"  1  2  3  0  3  0  1  2  3  0  \"  )  )  ;", "assertFunction (  \" transform ( geometry _ to _ bing _ tiles ( bing _ tile _ polygon ( bing _ tile (  '  1  2  3  0  3  0  1  2  3  0  '  )  )  ,     1  1  )  ,    x    -  >    bing _ tile _ quadkey ( x )  )  \"  ,    new   com . facebook . presto . spi . type . ArrayType ( VARCHAR )  ,    ImmutableList . of (  \"  1  2  3  0  3  0  1  2  3  0  0  \"  ,     \"  1  2  3  0  3  0  1  2  3  0  2  \"  ,     \"  1  2  3  0  3  0  1  2  3  0  1  \"  ,     \"  1  2  3  0  3  0  1  2  3  0  3  \"  )  )  ;", "assertFunction (  \" transform ( geometry _ to _ bing _ tiles ( ST _ Envelope ( ST _ GeometryFromText (  ' LINESTRING    (  5  9  .  7  6  5  6  2  5     2  9  .  8  4  0  6  4  3  8  9  9  8  3  4  4  2  ,     6  0  .  2     3  0  .  1  4  5  1  2  7  1  8  3  3  7  6  1  2  )  '  )  )  ,     1  0  )  ,    x    -  >    bing _ tile _ quadkey ( x )  )  \"  ,    new   com . facebook . presto . spi . type . ArrayType ( VARCHAR )  ,    ImmutableList . of (  \"  1  2  3  0  3  0  1  2  3  0  \"  ,     \"  1  2  3  0  3  0  1  2  3  1  \"  )  )  ;", "assertInvalidFunction (  \" geometry _ to _ bing _ tiles ( ST _ Point (  6  0  0  ,     3  0  .  1  2  )  ,     1  0  )  \"  ,     \" Longitude   span   for   the   geometry   must   be   in    [  -  1  8  0  .  0  0  ,     1  8  0  .  0  0  ]    range \"  )  ;", "assertInvalidFunction (  \" geometry _ to _ bing _ tiles ( ST _ GeometryFromText (  ' POLYGON    (  (  1  0  0  0     1  0  ,     -  1  0     1  0  ,     -  2  0     -  1  5  )  )  '  )  ,     1  0  )  \"  ,     \" Longitude   span   for   the   geometry   must   be   in    [  -  1  8  0  .  0  0  ,     1  8  0  .  0  0  ]    range \"  )  ;", "assertInvalidFunction (  \" geometry _ to _ bing _ tiles ( ST _ Point (  6  0  ,     3  0  0  .  1  2  )  ,     1  0  )  \"  ,     \" Latitude   span   for   the   geometry   must   be   in    [  -  8  5  .  0  5  ,     8  5  .  0  5  ]    range \"  )  ;", "assertInvalidFunction (  \" geometry _ to _ bing _ tiles ( ST _ GeometryFromText (  ' POLYGON    (  (  1  0     1  0  0  0  ,     -  1  0     1  0  ,     -  2  0     -  1  5  )  )  '  )  ,     1  0  )  \"  ,     \" Latitude   span   for   the   geometry   must   be   in    [  -  8  5  .  0  5  ,     8  5  .  0  5  ]    range \"  )  ;", "assertInvalidFunction (  \" geometry _ to _ bing _ tiles ( ST _ Point (  6  0  ,     3  0  .  1  2  )  ,     0  )  \"  ,     \" Zoom   level   must   be    >     0  \"  )  ;", "assertInvalidFunction (  \" geometry _ to _ bing _ tiles ( ST _ Point (  6  0  ,     3  0  .  1  2  )  ,     4  0  )  \"  ,     \" Zoom   level   must   be    <  =     2  3  \"  )  ;", "assertInvalidFunction (  \" geometry _ to _ bing _ tiles ( ST _ Envelope ( ST _ GeometryFromText (  ' LINESTRING    (  0     0  ,     8  0     8  0  )  '  )  )  ,     1  6  )  \"  ,     \" The   number   of   input   tiles   is   too   large    ( more   than    1 M )    to   compute   a   set   of   covering   Bing   tiles .  \"  )  ;", "assertFunction (  \" cardinality ( geometry _ to _ bing _ tiles ( ST _ Envelope ( ST _ GeometryFromText (  ' LINESTRING    (  0     0  ,     8  0     8  0  )  '  )  )  ,     5  )  )  \"  ,    BIGINT ,     1  0  4 L )  ;", "String   filePath    =    this . getClass (  )  . getClassLoader (  )  . getResource (  \" too _ large _ polygon . txt \"  )  . getPath (  )  ;", "String   largeWkt    =    Files . lines ( Paths . get ( filePath )  )  . findFirst (  )  . get (  )  ;", "assertInvalidFunction (  (  (  \" geometry _ to _ bing _ tiles ( ST _ GeometryFromText (  '  \"     +    largeWkt )     +     \"  '  )  ,     1  6  )  \"  )  ,     \" The   zoom   level   is   too   high   or   the   geometry   is   too   complex   to   compute   a   set   of   covering   Bing   tiles .    Please   use   a   lower   zoom   level   or   convert   the   geometry   to   its   bounding   box   using   the   ST _ Envelope   function .  \"  )  ;", "assertFunction (  (  (  \" cardinality ( geometry _ to _ bing _ tiles ( ST _ Envelope ( ST _ GeometryFromText (  '  \"     +    largeWkt )     +     \"  '  )  )  ,     1  6  )  )  \"  )  ,    BIGINT ,     1  9  9  3  9 L )  ;", "assertInvalidFunction (  \" geometry _ to _ bing _ tiles ( ST _ GeometryFromText (  ' POLYGON    (  (  0     0  ,     0     2  0  ,     2  0     2  0  ,     0     0  )  )  '  )  ,     2  0  )  \"  ,     \" The   zoom   level   is   too   high   to   compute   a   set   of   covering   Bing   tiles .  \"  )  ;", "assertFunction (  \" cardinality ( geometry _ to _ bing _ tiles ( ST _ GeometryFromText (  ' POLYGON    (  (  0     0  ,     0     2  0  ,     2  0     2  0  ,     0     0  )  )  '  )  ,     1  4  )  )  \"  ,    BIGINT ,     4  2  8  7  8  7 L )  ;", "}", "METHOD_END"], "methodName": ["testGeometryToBingTiles"], "fileName": "com.facebook.presto.plugin.geospatial.TestBingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "Path   filePath    =    Paths . get ( this . getClass (  )  . getClassLoader (  )  . getResource (  \" large _ polygon . txt \"  )  . getPath (  )  )  ;", "List < String >    lines    =    Files . readAllLines ( filePath )  ;", "for    ( String   line    :    lines )     {", "String [  ]    parts    =    line . split (  \"  \\  \\  |  \"  )  ;", "String   wkt    =    parts [  0  ]  ;", "int   zoomLevel    =    Integer . parseInt ( parts [  1  ]  )  ;", "long   tileCount    =    Long . parseLong ( parts [  2  ]  )  ;", "assert (  (  (  (  (  \" cardinality ( geometry _ to _ bing _ tiles ( ST _ GeometryFromText (  '  \"     +    wkt )     +     \"  '  )  ,     \"  )     +    zoomLevel )     +     \"  )  )  \"  )  ,    BIGINT ,    tileCount )  ;", "}", "}", "METHOD_END"], "methodName": ["testLargeGeometryToBingTiles"], "fileName": "com.facebook.presto.plugin.geospatial.TestBingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" bing _ tile (  3  ,     5  ,     3  )     <  >    bing _ tile (  3  ,     5  ,     3  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" bing _ tile (  '  2  1  3  '  )     <  >    bing _ tile (  3  ,     5  ,     3  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" bing _ tile (  '  2  1  3  '  )     <  >    bing _ tile (  '  2  1  3  '  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" bing _ tile (  3  ,     5  ,     3  )     <  >    bing _ tile (  3  ,     5  ,     4  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" bing _ tile (  '  2  1  3  '  )     <  >    bing _ tile (  '  2  1  3  1  '  )  \"  ,    BOOLEAN ,    true )  ;", "}", "METHOD_END"], "methodName": ["testNotEqual"], "fileName": "com.facebook.presto.plugin.geospatial.TestBingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" bing _ tile _ at (  3  0  .  1  2  ,     6  0  ,     1  5  )  \"  ,    BingTileType . BING _ TILE ,    BingTile . fromCoordinates (  2  1  8  4  5  ,     1  3  5  0  6  ,     1  5  )  )  ;", "assertFunction (  \" bing _ tile _ at (  0  ,     -  0  .  0  0  2  ,     1  )  \"  ,    BingTileType . BING _ TILE ,    BingTile . fromCoordinates (  0  ,     1  ,     1  )  )  ;", "assertFunction (  \" bing _ tile _ at (  1 e 0  /  5  1  2  ,     0  ,     1  )  \"  ,    BingTileType . BING _ TILE ,    BingTile . fromCoordinates (  1  ,     0  ,     1  )  )  ;", "assertFunction (  \" bing _ tile _ at (  1 e 0  /  5  1  2  ,     0  ,     9  )  \"  ,    BingTileType . BING _ TILE ,    BingTile . fromCoordinates (  2  5  6  ,     2  5  5  ,     9  )  )  ;", "assertInvalidFunction (  \" bing _ tile _ at (  3  0  .  1  2  ,     6  0  0  ,     1  5  )  \"  ,     \" Longitude   must   be   between    -  1  8  0  .  0    and    1  8  0  .  0  \"  )  ;", "assertInvalidFunction (  \" bing _ tile _ at (  3  0  0  .  1  2  ,     6  0  ,     1  5  )  \"  ,     \" Latitude   must   be   between    -  8  5  .  0  5  1  1  2  8  7  8    and    8  5  .  0  5  1  1  2  8  7  8  \"  )  ;", "assertInvalidFunction (  \" bing _ tile _ at (  3  0  .  1  2  ,     6  0  ,     0  )  \"  ,     \" Zoom   level   must   be    >     0  \"  )  ;", "assertInvalidFunction (  \" bing _ tile _ at (  3  0  .  1  2  ,     6  0  ,     4  0  )  \"  ,     \" Zoom   level   must   be    <  =     2  3  \"  )  ;", "}", "METHOD_END"], "methodName": ["testPointToBingTile"], "fileName": "com.facebook.presto.plugin.geospatial.TestBingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "ObjectMapper   objectMapper    =    new   ObjectMapper (  )  ;", "tile    =     . fromCoordinates (  1  ,     2  ,     3  )  ;", "String   json    =    objectMapper . writeValueAsString ( tile )  ;", "assertEquals (  \"  {  \\  \" x \\  \"  :  1  ,  \\  \" y \\  \"  :  2  ,  \\  \" zoom \\  \"  :  3  }  \"  ,    json )  ;", "assertEquals ( tile ,    objectMapper . readerFor (  . class )  . readValue ( json )  )  ;", "}", "METHOD_END"], "methodName": ["testSerialization"], "fileName": "com.facebook.presto.plugin.geospatial.TestBingTileFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  (  (  (  (  \" ST _ AsText ( ST _ Intersection ( ST _ Envelope ( ST _ GeometryFromText (  '  \"     +    envelope )     +     \"  '  )  )  ,    ST _ Envelope ( ST _ GeometryFromText (  '  \"  )     +    otherEnvelope )     +     \"  '  )  )  )  )  \"  )  ,    VARCHAR ,    intersection )  ;", "}", "METHOD_END"], "methodName": ["assertEnvelopeIntersection"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  (  (  \" ST _ IsValid ( ST _ GeometryFromText (  '  \"     +    wkt )     +     \"  '  )  )  \"  )  ,    BOOLEAN ,    false )  ;", "assertFunction (  (  (  \" geometry _ invalid _ reason ( ST _ GeometryFromText (  '  \"     +    wkt )     +     \"  '  )  )  \"  )  ,    VARCHAR ,    reason )  ;", "}", "METHOD_END"], "methodName": ["assertInvalidGeometry"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  (  (  \" ST _ IsSimple ( ST _ GeometryFromText (  '  \"     +    text )     +     \"  '  )  )  \"  )  ,    BOOLEAN ,    false )  ;", "}", "METHOD_END"], "methodName": ["assertNotSimpleGeometry"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  (  (  \" ST _ IsSimple ( ST _ GeometryFromText (  '  \"     +    text )     +     \"  '  )  )  \"  )  ,    BOOLEAN ,    true )  ;", "}", "METHOD_END"], "methodName": ["assertSimpleGeometry"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  (  (  \" ST _ IsValid ( ST _ GeometryFromText (  '  \"     +    wkt )     +     \"  '  )  )  \"  )  ,    BOOLEAN ,    true )  ;", "assertFunction (  (  (  \" geometry _ invalid _ reason ( ST _ GeometryFromText (  '  \"     +    wkt )     +     \"  '  )  )  \"  )  ,    VARCHAR ,    null )  ;", "}", "METHOD_END"], "methodName": ["assertValidGeometry"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "GeoPlugin   plugin    =    new   GeoPlugin (  )  ;", "for    ( Type   type    :    tTypes (  )  )     {", "functionAssertions . getTypeRegistry (  )  . addType ( type )  ;", "}", "functionAssertions . getMetadata (  )  . addFunctions ( extractFunctions ( tFunctions (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["registerFunctions"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "BlockBuilder   builder    =    GeometryType . GEOMETRY . createBlockBuilder ( null ,     1  )  ;", "GeometryType . GEOMETRY . writeSlice ( builder ,     . stPoint (  1  .  2  ,     3  .  4  )  )  ;", "Block   block    =    builder . build (  )  ;", "assertEquals (  \" POINT    (  1  .  2     3  .  4  )  \"  ,    GeometryType . GEOMETRY . getObjectValue ( null ,    block ,     0  )  )  ;", "}", "METHOD_END"], "methodName": ["testGeometryGetObjectValue"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" great _ circle _ distance (  3  6  .  1  2  ,     -  8  6  .  6  7  ,     3  3  .  9  4  ,     -  1  1  8  .  4  0  )  \"  ,    DOUBLE ,     2  8  8  6  .  4  4  8  9  7  3  4  3  6  7  0  3  )  ;", "assertFunction (  \" great _ circle _ distance (  3  3  .  9  4  ,     -  1  1  8  .  4  0  ,     3  6  .  1  2  ,     -  8  6  .  6  7  )  \"  ,    DOUBLE ,     2  8  8  6  .  4  4  8  9  7  3  4  3  6  7  0  3  )  ;", "assertFunction (  \" great _ circle _ distance (  4  2  .  3  6  0  1  ,     -  7  1  .  0  5  8  9  ,     4  2  .  4  4  3  0  ,     -  7  1  .  2  2  9  0  )  \"  ,    DOUBLE ,     1  6  .  7  3  4  6  9  7  4  3  4  5  7  4  6  1  )  ;", "assertFunction (  \" great _ circle _ distance (  3  6  .  1  2  ,     -  8  6  .  6  7  ,     3  6  .  1  2  ,     -  8  6  .  6  7  )  \"  ,    DOUBLE ,     0  .  0  )  ;", "assertInvalidFunction (  \" great _ circle _ distance (  1  0  0  ,     2  0  ,     3  0  ,     4  0  )  \"  ,     \" Latitude   must   be   between    -  9  0    and    9  0  \"  )  ;", "assertInvalidFunction (  \" great _ circle _ distance (  1  0  ,     2  0  ,     3  0  0  ,     4  0  )  \"  ,     \" Latitude   must   be   between    -  9  0    and    9  0  \"  )  ;", "assertInvalidFunction (  \" great _ circle _ distance (  1  0  ,     2  0  0  ,     3  0  ,     4  0  )  \"  ,     \" Longitude   must   be   between    -  1  8  0    and    1  8  0  \"  )  ;", "assertInvalidFunction (  \" great _ circle _ distance (  1  0  ,     2  0  ,     3  0  ,     4  0  0  )  \"  ,     \" Longitude   must   be   between    -  1  8  0    and    1  8  0  \"  )  ;", "assertInvalidFunction (  \" great _ circle _ distance ( nan (  )  ,     -  8  6  .  6  7  ,     3  3  .  9  4  ,     -  1  1  8  .  4  0  )  \"  ,     \" Latitude   must   be   between    -  9  0    and    9  0  \"  )  ;", "assertInvalidFunction (  \" great _ circle _ distance ( infinity (  )  ,     -  8  6  .  6  7  ,     3  3  .  9  4  ,     -  1  1  8  .  4  0  )  \"  ,     \" Latitude   must   be   between    -  9  0    and    9  0  \"  )  ;", "assertInvalidFunction (  \" great _ circle _ distance (  3  6  .  1  2  ,    nan (  )  ,     3  3  .  9  4  ,     -  1  1  8  .  4  0  )  \"  ,     \" Longitude   must   be   between    -  1  8  0    and    1  8  0  \"  )  ;", "assertInvalidFunction (  \" great _ circle _ distance (  3  6  .  1  2  ,    infinity (  )  ,     3  3  .  9  4  ,     -  1  1  8  .  4  0  )  \"  ,     \" Longitude   must   be   between    -  1  8  0    and    1  8  0  \"  )  ;", "assertInvalidFunction (  \" great _ circle _ distance (  3  6  .  1  2  ,     -  8  6  .  6  7  ,    nan (  )  ,     -  1  1  8  .  4  0  )  \"  ,     \" Latitude   must   be   between    -  9  0    and    9  0  \"  )  ;", "assertInvalidFunction (  \" great _ circle _ distance (  3  6  .  1  2  ,     -  8  6  .  6  7  ,    infinity (  )  ,     -  1  1  8  .  4  0  )  \"  ,     \" Latitude   must   be   between    -  9  0    and    9  0  \"  )  ;", "assertInvalidFunction (  \" great _ circle _ distance (  3  6  .  1  2  ,     -  8  6  .  6  7  ,     3  3  .  9  4  ,    nan (  )  )  \"  ,     \" Longitude   must   be   between    -  1  8  0    and    1  8  0  \"  )  ;", "assertInvalidFunction (  \" great _ circle _ distance (  3  6  .  1  2  ,     -  8  6  .  6  7  ,     3  3  .  9  4  ,    infinity (  )  )  \"  ,     \" Longitude   must   be   between    -  1  8  0    and    1  8  0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testGreatCircleDistance"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertInvalidFunction (  \" ST _ LineFromText (  ' LINESTRING    (  0     0  ,     1  )  '  )  \"  ,    INVALID _ FUNCTION _ ARGUMENT ,     \" Invalid   WKT :    LINESTRING    (  0     0  ,     1  )  \"  )  ;", "assertInvalidFunction (  \" ST _ GeometryFromText (  ' POLYGON (  0     0  )  '  )  \"  ,    INVALID _ FUNCTION _ ARGUMENT ,     \" Invalid   WKT :    POLYGON (  0     0  )  \"  )  ;", "assertInvalidFunction (  \" ST _ Polygon (  ' POLYGON (  -  1     1  ,     1     -  1  )  '  )  \"  ,    INVALID _ FUNCTION _ ARGUMENT ,     \" Invalid   WKT :    POLYGON (  -  1     1  ,     1     -  1  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testInvalidWKT"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" line _ locate _ point ( ST _ GeometryFromText (  ' LINESTRING    (  0     0  ,     0     1  )  '  )  ,    ST _ Point (  0  ,     0  .  2  )  )  \"  ,    DOUBLE ,     0  .  2  )  ;", "assertFunction (  \" line _ locate _ point ( ST _ GeometryFromText (  ' LINESTRING    (  0     0  ,     0     1  ,     2     1  )  '  )  ,    ST _ Point (  0  ,     0  .  2  )  )  \"  ,    DOUBLE ,     0  .  2  )  ;", "assertFunction (  \" line _ locate _ point ( ST _ GeometryFromText (  ' LINESTRING    (  0     0  ,     0     1  ,     2     1  )  '  )  ,    ST _ Point (  0  .  9  ,     1  )  )  \"  ,    DOUBLE ,     1  .  9  )  ;", "assertFunction (  \" line _ locate _ point ( ST _ GeometryFromText (  ' MULTILINESTRING    (  (  0     0  ,     0     1  )  ,     (  2     2  ,     4     2  )  )  '  )  ,    ST _ Point (  3  ,     1  )  )  \"  ,    DOUBLE ,     2  .  0  )  ;", "assertFunction (  \" line _ locate _ point ( ST _ GeometryFromText (  ' LINESTRING   EMPTY '  )  ,    ST _ Point (  0  ,     1  )  )  \"  ,    DOUBLE ,    null )  ;", "assertFunction (  \" line _ locate _ point ( ST _ GeometryFromText (  ' LINESTRING    (  0     0  ,     0     1  ,     2     1  )  '  )  ,    ST _ GeometryFromText (  ' POINT   EMPTY '  )  )  \"  ,    DOUBLE ,    null )  ;", "assertInvalidFunction (  \" line _ locate _ point ( ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     1     4  ,     4     4  ,     4     1  )  )  '  )  ,    ST _ Point (  0  .  4  ,     1  )  )  \"  ,     \" First   argument   to   line _ locate _ point   must   be   a   LineString   or   a   MultiLineString .    Got :    Polygon \"  )  ;", "assertInvalidFunction (  \" line _ locate _ point ( ST _ GeometryFromText (  ' LINESTRING    (  0     0  ,     0     1  ,     2     1  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     1     4  ,     4     4  ,     4     1  )  )  '  )  )  \"  ,     \" Second   argument   to   line _ locate _ point   must   be   a   Point .    Got :    Polygon \"  )  ;", "}", "METHOD_END"], "methodName": ["testLineLocatePoint"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ Area ( ST _ GeometryFromText (  ' POLYGON    (  (  2     2  ,     2     6  ,     6     6  ,     6     2  )  )  '  )  )  \"  ,    DOUBLE ,     1  6  .  0  )  ;", "assertFunction (  \" ST _ Area ( ST _ GeometryFromText (  ' POLYGON   EMPTY '  )  )  \"  ,    DOUBLE ,     0  .  0  )  ;", "assertInvalidFunction (  \" ST _ Area ( ST _ GeometryFromText (  ' POINT    (  1     4  )  '  )  )  \"  ,     \" ST _ Area   only   applies   to   POLYGON   or   MULTI _ POLYGON .    Input   type   is :    POINT \"  )  ;", "}", "METHOD_END"], "methodName": ["testSTArea"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ AsText ( ST _ Boundary ( ST _ GeometryFromText (  ' POINT    (  1     2  )  '  )  )  )  \"  ,    VARCHAR ,     \" MULTIPOINT   EMPTY \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Boundary ( ST _ GeometryFromText (  ' MULTIPOINT    (  1     2  ,     2     4  ,     3     6  ,     4     8  )  '  )  )  )  \"  ,    VARCHAR ,     \" MULTIPOINT   EMPTY \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Boundary ( ST _ GeometryFromText (  ' LINESTRING   EMPTY '  )  )  )  \"  ,    VARCHAR ,     \" MULTIPOINT   EMPTY \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Boundary ( ST _ GeometryFromText (  ' LINESTRING    (  8     4  ,     5     7  )  '  )  )  )  \"  ,    VARCHAR ,     \" MULTIPOINT    (  (  8     4  )  ,     (  5     7  )  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Boundary ( ST _ GeometryFromText (  ' LINESTRING    (  1  0  0     1  5  0  ,  5  0     6  0  ,     7  0     8  0  ,     1  6  0     1  7  0  )  '  )  )  )  \"  ,    VARCHAR ,     \" MULTIPOINT    (  (  1  0  0     1  5  0  )  ,     (  1  6  0     1  7  0  )  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Boundary ( ST _ GeometryFromText (  ' MULTILINESTRING    (  (  1     1  ,     5     1  )  ,     (  2     4  ,     4     4  )  )  '  )  )  )  \"  ,    VARCHAR ,     \" MULTIPOINT    (  (  1     1  )  ,     (  5     1  )  ,     (  2     4  )  ,     (  4     4  )  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Boundary ( ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     4     1  ,     1     4  )  )  '  )  )  )  \"  ,    VARCHAR ,     \" MULTILINESTRING    (  (  1     1  ,     4     1  ,     1     4  ,     1     1  )  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Boundary ( ST _ GeometryFromText (  ' MULTIPOLYGON    (  (  (  1     1  ,     1     3  ,     3     3  ,     3     1  )  )  ,     (  (  0     0  ,     0     2  ,     2     2  ,     2     0  )  )  )  '  )  )  )  \"  ,    VARCHAR ,     \" MULTILINESTRING    (  (  1     1  ,     3     1  ,     3     3  ,     1     3  ,     1     1  )  ,     (  0     0  ,     2     0  ,     2     2  ,     0     2  ,     0     0  )  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testSTBoundary"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ AsText ( ST _ Buffer ( ST _ Point (  0  ,     0  )  ,     0  .  5  )  )  \"  ,    VARCHAR ,     \" POLYGON    (  (  0  .  5     0  ,     0  .  4  9  8  9  2  9  4  6  1  6  1  9  3  0  1  4     0  .  0  3  2  7  0  1  5  6  4  6  1  5  0  7  1  4  6  ,     0  .  4  9  5  7  2  2  4  3  0  6  8  6  9  0  4  8  6     0  .  0  6  5  2  6  3  0  9  6  1  1  0  0  2  5  7  ,     0  .  4  9  0  3  9  2  6  4  0  2  0  1  6  1  4  9     0  .  0  9  7  5  4  5  1  6  1  0  0  8  0  6  4  0  3  ,     0  .  4  8  2  9  6  2  9  1  3  1  4  4  5  3  3  8     0  .  1  2  9  4  0  9  5  2  2  5  5  1  2  6  0  2  6  ,     0  .  4  7  3  4  6  5  0  6  4  7  4  7  5  5  2  5  7     0  .  1  6  0  7  1  9  7  3  2  6  5  1  5  8  0  6  5  ,     0  .  4  6  1  9  3  9  7  6  6  2  5  5  6  4  3  1  5     0  .  1  9  1  3  4  1  7  1  6  1  8  2  5  4  4  7  2  ,     0  .  4  4  8  4  3  6  3  7  0  7  6  6  3  4  3  9     0  .  2  2  1  1  4  4  3  4  5  1  0  9  5  0  0  4  6  ,     0  .  4  3  3  0  1  2  7  0  1  8  9  2  2  1  9  1  3     0  .  2  4  9  9  9  9  9  9  9  9  9  9  9  9  9  8  ,     0  .  4  1  5  7  3  4  8  0  6  1  5  1  2  7  2  4  5     0  .  2  7  7  7  8  5  1  1  6  5  0  9  8  0  0  9  ,     0  .  3  9  6  6  7  6  6  7  0  1  4  5  6  1  7  4  7     0  .  3  0  4  3  8  0  7  1  4  5  0  4  3  6  0  1  6  ,     0  .  3  7  5  9  1  9  9  0  3  7  3  9  4  8  8  6     0  .  3  2  9  6  7  2  9  0  7  5  5  0  0  3  4  2  6  ,     0  .  3  5  3  5  5  3  3  9  0  5  9  3  2  7  3  7     0  .  3  5  3  5  5  3  3  9  0  5  9  3  2  7  3  6  ,     0  .  3  2  9  6  7  2  9  0  7  5  5  0  0  3  4  3  7     0  .  3  7  5  9  1  9  9  0  3  7  3  9  4  8  8  6  ,     0  .  3  0  4  3  8  0  7  1  4  5  0  4  3  6  0  3     0  .  3  9  6  6  7  6  6  7  0  1  4  5  6  1  7  4  7  ,     0  .  2  7  7  7  8  5  1  1  6  5  0  9  8  0  1  1     0  .  4  1  5  7  3  4  8  0  6  1  5  1  2  7  2  5  ,     0  .  2  4  9  9  9  9  9  9  9  9  9  9  9  9  9  9  7     0  .  4  3  3  0  1  2  7  0  1  8  9  2  2  1  9  2  4  ,     0  .  2  2  1  1  4  4  3  4  5  1  0  9  5  0  0  6  2     0  .  4  4  8  4  3  6  3  7  0  7  6  6  3  4  4  1  ,     0  .  1  9  1  3  4  1  7  1  6  1  8  2  5  4  4  8  6     0  .  4  6  1  9  3  9  7  6  6  2  5  5  6  4  3  3  ,     0  .  1  6  0  7  1  9  7  3  2  6  5  1  5  8  0  7  7     0  .  4  7  3  4  6  5  0  6  4  7  4  7  5  5  2  8  ,     0  .  1  2  9  4  0  9  5  2  2  5  5  1  2  6  0  3  7     0  .  4  8  2  9  6  2  9  1  3  1  4  4  5  3  4  1  6  ,     0  .  0  9  7  5  4  5  1  6  1  0  0  8  0  6  4  1  2     0  .  4  9  0  3  9  2  6  4  0  2  0  1  6  1  5  2  ,     0  .  0  6  5  2  6  3  0  9  6  1  1  0  0  2  5  7  9     0  .  4  9  5  7  2  2  4  3  0  6  8  6  9  0  5  2  ,     0  .  0  3  2  7  0  1  5  6  4  6  1  5  0  7  1  5  3     0  .  4  9  8  9  2  9  4  6  1  6  1  9  3  0  1  7  4  ,     0     0  .  5  ,     -  0  .  0  3  2  7  0  1  5  6  4  6  1  5  0  7  1  4  6     0  .  4  9  8  9  2  9  4  6  1  6  1  9  3  0  1  4  ,     -  0  .  0  6  5  2  6  3  0  9  6  1  1  0  0  2  5  7     0  .  4  9  5  7  2  2  4  3  0  6  8  6  9  0  4  8  6  ,     -  0  .  0  9  7  5  4  5  1  6  1  0  0  8  0  6  4  0  3     0  .  4  9  0  3  9  2  6  4  0  2  0  1  6  1  4  9  ,     -  0  .  1  2  9  4  0  9  5  2  2  5  5  1  2  6  0  2  6     0  .  4  8  2  9  6  2  9  1  3  1  4  4  5  3  3  8  ,     -  0  .  1  6  0  7  1  9  7  3  2  6  5  1  5  8  0  6  5     0  .  4  7  3  4  6  5  0  6  4  7  4  7  5  5  2  5  7  ,     -  0  .  1  9  1  3  4  1  7  1  6  1  8  2  5  4  4  7  2     0  .  4  6  1  9  3  9  7  6  6  2  5  5  6  4  3  1  5  ,     -  0  .  2  2  1  1  4  4  3  4  5  1  0  9  5  0  0  4  6     0  .  4  4  8  4  3  6  3  7  0  7  6  6  3  4  3  9  ,     -  0  .  2  4  9  9  9  9  9  9  9  9  9  9  9  9  9  8     0  .  4  3  3  0  1  2  7  0  1  8  9  2  2  1  9  1  3  ,     -  0  .  2  7  7  7  8  5  1  1  6  5  0  9  8  0  0  9     0  .  4  1  5  7  3  4  8  0  6  1  5  1  2  7  2  4  5  ,     -  0  .  3  0  4  3  8  0  7  1  4  5  0  4  3  6  0  1  6     0  .  3  9  6  6  7  6  6  7  0  1  4  5  6  1  7  4  7  ,     -  0  .  3  2  9  6  7  2  9  0  7  5  5  0  0  3  4  2  6     0  .  3  7  5  9  1  9  9  0  3  7  3  9  4  8  8  6  ,     -  0  .  3  5  3  5  5  3  3  9  0  5  9  3  2  7  3  6     0  .  3  5  3  5  5  3  3  9  0  5  9  3  2  7  3  7  ,     -  0  .  3  7  5  9  1  9  9  0  3  7  3  9  4  8  8  6     0  .  3  2  9  6  7  2  9  0  7  5  5  0  0  3  4  3  7  ,     -  0  .  3  9  6  6  7  6  6  7  0  1  4  5  6  1  7  4  7     0  .  3  0  4  3  8  0  7  1  4  5  0  4  3  6  0  3  ,     -  0  .  4  1  5  7  3  4  8  0  6  1  5  1  2  7  2  5     0  .  2  7  7  7  8  5  1  1  6  5  0  9  8  0  1  1  ,     -  0  .  4  3  3  0  1  2  7  0  1  8  9  2  2  1  9  2  4     0  .  2  4  9  9  9  9  9  9  9  9  9  9  9  9  9  9  7  ,     -  0  .  4  4  8  4  3  6  3  7  0  7  6  6  3  4  4  1     0  .  2  2  1  1  4  4  3  4  5  1  0  9  5  0  0  6  2  ,     -  0  .  4  6  1  9  3  9  7  6  6  2  5  5  6  4  3  3     0  .  1  9  1  3  4  1  7  1  6  1  8  2  5  4  4  8  6  ,     -  0  .  4  7  3  4  6  5  0  6  4  7  4  7  5  5  2  8     0  .  1  6  0  7  1  9  7  3  2  6  5  1  5  8  0  7  7  ,     -  0  .  4  8  2  9  6  2  9  1  3  1  4  4  5  3  4  1  6     0  .  1  2  9  4  0  9  5  2  2  5  5  1  2  6  0  3  7  ,     -  0  .  4  9  0  3  9  2  6  4  0  2  0  1  6  1  5  2     0  .  0  9  7  5  4  5  1  6  1  0  0  8  0  6  4  1  2  ,     -  0  .  4  9  5  7  2  2  4  3  0  6  8  6  9  0  5  2     0  .  0  6  5  2  6  3  0  9  6  1  1  0  0  2  5  7  9  ,     -  0  .  4  9  8  9  2  9  4  6  1  6  1  9  3  0  1  7  4     0  .  0  3  2  7  0  1  5  6  4  6  1  5  0  7  1  5  3  ,     -  0  .  5     0  ,     -  0  .  4  9  8  9  2  9  4  6  1  6  1  9  3  0  1  4     -  0  .  0  3  2  7  0  1  5  6  4  6  1  5  0  7  1  4  6  ,     -  0  .  4  9  5  7  2  2  4  3  0  6  8  6  9  0  4  8  6     -  0  .  0  6  5  2  6  3  0  9  6  1  1  0  0  2  5  7  ,     -  0  .  4  9  0  3  9  2  6  4  0  2  0  1  6  1  4  9     -  0  .  0  9  7  5  4  5  1  6  1  0  0  8  0  6  4  0  3  ,     -  0  .  4  8  2  9  6  2  9  1  3  1  4  4  5  3  3  8     -  0  .  1  2  9  4  0  9  5  2  2  5  5  1  2  6  0  2  6  ,     -  0  .  4  7  3  4  6  5  0  6  4  7  4  7  5  5  2  5  7     -  0  .  1  6  0  7  1  9  7  3  2  6  5  1  5  8  0  6  5  ,     -  0  .  4  6  1  9  3  9  7  6  6  2  5  5  6  4  3  1  5     -  0  .  1  9  1  3  4  1  7  1  6  1  8  2  5  4  4  7  2  ,     -  0  .  4  4  8  4  3  6  3  7  0  7  6  6  3  4  3  9     -  0  .  2  2  1  1  4  4  3  4  5  1  0  9  5  0  0  4  6  ,     -  0  .  4  3  3  0  1  2  7  0  1  8  9  2  2  1  9  1  3     -  0  .  2  4  9  9  9  9  9  9  9  9  9  9  9  9  9  8  ,     -  0  .  4  1  5  7  3  4  8  0  6  1  5  1  2  7  2  4  5     -  0  .  2  7  7  7  8  5  1  1  6  5  0  9  8  0  0  9  ,     -  0  .  3  9  6  6  7  6  6  7  0  1  4  5  6  1  7  4  7     -  0  .  3  0  4  3  8  0  7  1  4  5  0  4  3  6  0  1  6  ,     -  0  .  3  7  5  9  1  9  9  0  3  7  3  9  4  8  8  6     -  0  .  3  2  9  6  7  2  9  0  7  5  5  0  0  3  4  2  6  ,     -  0  .  3  5  3  5  5  3  3  9  0  5  9  3  2  7  3  7     -  0  .  3  5  3  5  5  3  3  9  0  5  9  3  2  7  3  6  ,     -  0  .  3  2  9  6  7  2  9  0  7  5  5  0  0  3  4  3  7     -  0  .  3  7  5  9  1  9  9  0  3  7  3  9  4  8  8  6  ,     -  0  .  3  0  4  3  8  0  7  1  4  5  0  4  3  6  0  3     -  0  .  3  9  6  6  7  6  6  7  0  1  4  5  6  1  7  4  7  ,     -  0  .  2  7  7  7  8  5  1  1  6  5  0  9  8  0  1  1     -  0  .  4  1  5  7  3  4  8  0  6  1  5  1  2  7  2  5  ,     -  0  .  2  4  9  9  9  9  9  9  9  9  9  9  9  9  9  9  7     -  0  .  4  3  3  0  1  2  7  0  1  8  9  2  2  1  9  2  4  ,     -  0  .  2  2  1  1  4  4  3  4  5  1  0  9  5  0  0  6  2     -  0  .  4  4  8  4  3  6  3  7  0  7  6  6  3  4  4  1  ,     -  0  .  1  9  1  3  4  1  7  1  6  1  8  2  5  4  4  8  6     -  0  .  4  6  1  9  3  9  7  6  6  2  5  5  6  4  3  3  ,     -  0  .  1  6  0  7  1  9  7  3  2  6  5  1  5  8  0  7  7     -  0  .  4  7  3  4  6  5  0  6  4  7  4  7  5  5  2  8  ,     -  0  .  1  2  9  4  0  9  5  2  2  5  5  1  2  6  0  3  7     -  0  .  4  8  2  9  6  2  9  1  3  1  4  4  5  3  4  1  6  ,     -  0  .  0  9  7  5  4  5  1  6  1  0  0  8  0  6  4  1  2     -  0  .  4  9  0  3  9  2  6  4  0  2  0  1  6  1  5  2  ,     -  0  .  0  6  5  2  6  3  0  9  6  1  1  0  0  2  5  7  9     -  0  .  4  9  5  7  2  2  4  3  0  6  8  6  9  0  5  2  ,     -  0  .  0  3  2  7  0  1  5  6  4  6  1  5  0  7  1  5  3     -  0  .  4  9  8  9  2  9  4  6  1  6  1  9  3  0  1  7  4  ,     0     -  0  .  5  ,     0  .  0  3  2  7  0  1  5  6  4  6  1  5  0  7  1  4  6     -  0  .  4  9  8  9  2  9  4  6  1  6  1  9  3  0  1  4  ,     0  .  0  6  5  2  6  3  0  9  6  1  1  0  0  2  5  7     -  0  .  4  9  5  7  2  2  4  3  0  6  8  6  9  0  4  8  6  ,     0  .  0  9  7  5  4  5  1  6  1  0  0  8  0  6  4  0  3     -  0  .  4  9  0  3  9  2  6  4  0  2  0  1  6  1  4  9  ,     0  .  1  2  9  4  0  9  5  2  2  5  5  1  2  6  0  2  6     -  0  .  4  8  2  9  6  2  9  1  3  1  4  4  5  3  3  8  ,     0  .  1  6  0  7  1  9  7  3  2  6  5  1  5  8  0  6  5     -  0  .  4  7  3  4  6  5  0  6  4  7  4  7  5  5  2  5  7  ,     0  .  1  9  1  3  4  1  7  1  6  1  8  2  5  4  4  7  2     -  0  .  4  6  1  9  3  9  7  6  6  2  5  5  6  4  3  1  5  ,     0  .  2  2  1  1  4  4  3  4  5  1  0  9  5  0  0  4  6     -  0  .  4  4  8  4  3  6  3  7  0  7  6  6  3  4  3  9  ,     0  .  2  4  9  9  9  9  9  9  9  9  9  9  9  9  9  8     -  0  .  4  3  3  0  1  2  7  0  1  8  9  2  2  1  9  1  3  ,     0  .  2  7  7  7  8  5  1  1  6  5  0  9  8  0  0  9     -  0  .  4  1  5  7  3  4  8  0  6  1  5  1  2  7  2  4  5  ,     0  .  3  0  4  3  8  0  7  1  4  5  0  4  3  6  0  1  6     -  0  .  3  9  6  6  7  6  6  7  0  1  4  5  6  1  7  4  7  ,     0  .  3  2  9  6  7  2  9  0  7  5  5  0  0  3  4  2  6     -  0  .  3  7  5  9  1  9  9  0  3  7  3  9  4  8  8  6  ,     0  .  3  5  3  5  5  3  3  9  0  5  9  3  2  7  3  6     -  0  .  3  5  3  5  5  3  3  9  0  5  9  3  2  7  3  7  ,     0  .  3  7  5  9  1  9  9  0  3  7  3  9  4  8  8  6     -  0  .  3  2  9  6  7  2  9  0  7  5  5  0  0  3  4  3  7  ,     0  .  3  9  6  6  7  6  6  7  0  1  4  5  6  1  7  4  7     -  0  .  3  0  4  3  8  0  7  1  4  5  0  4  3  6  0  3  ,     0  .  4  1  5  7  3  4  8  0  6  1  5  1  2  7  2  5     -  0  .  2  7  7  7  8  5  1  1  6  5  0  9  8  0  1  1  ,     0  .  4  3  3  0  1  2  7  0  1  8  9  2  2  1  9  2  4     -  0  .  2  4  9  9  9  9  9  9  9  9  9  9  9  9  9  9  7  ,     0  .  4  4  8  4  3  6  3  7  0  7  6  6  3  4  4  1     -  0  .  2  2  1  1  4  4  3  4  5  1  0  9  5  0  0  6  2  ,     0  .  4  6  1  9  3  9  7  6  6  2  5  5  6  4  3  3     -  0  .  1  9  1  3  4  1  7  1  6  1  8  2  5  4  4  8  6  ,     0  .  4  7  3  4  6  5  0  6  4  7  4  7  5  5  2  8     -  0  .  1  6  0  7  1  9  7  3  2  6  5  1  5  8  0  7  7  ,     0  .  4  8  2  9  6  2  9  1  3  1  4  4  5  3  4  1  6     -  0  .  1  2  9  4  0  9  5  2  2  5  5  1  2  6  0  3  7  ,     0  .  4  9  0  3  9  2  6  4  0  2  0  1  6  1  5  2     -  0  .  0  9  7  5  4  5  1  6  1  0  0  8  0  6  4  1  2  ,     0  .  4  9  5  7  2  2  4  3  0  6  8  6  9  0  5  2     -  0  .  0  6  5  2  6  3  0  9  6  1  1  0  0  2  5  7  9  ,     0  .  4  9  8  9  2  9  4  6  1  6  1  9  3  0  1  7  4     -  0  .  0  3  2  7  0  1  5  6  4  6  1  5  0  7  1  5  3  ,     0  .  5     0  )  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Buffer ( ST _ LineFromText (  ' LINESTRING    (  0     0  ,     1     1  ,     2     0  .  5  )  '  )  ,     0  .  2  )  )  \"  ,    VARCHAR ,     \" POLYGON    (  (  0     -  0  .  1  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  6  ,     0  .  0  1  3  0  8  0  6  2  5  8  4  6  0  2  8  5  3  7     -  0  .  1  9  9  5  7  1  7  8  4  6  4  7  7  2  0  5  2  ,     0  .  0  2  6  1  0  5  2  3  8  4  4  4  0  1  0  3  6     -  0  .  1  9  8  2  8  8  9  7  2  2  7  4  7  6  1  9  4  ,     0  .  0  3  9  0  1  8  0  6  4  4  0  3  2  2  5  6  4     -  0  .  1  9  6  1  5  7  0  5  6  0  8  0  6  4  5  9  3  ,     0  .  0  5  1  7  6  3  8  0  9  0  2  0  5  0  4  1  5     -  0  .  1  9  3  1  8  5  1  6  5  2  5  7  8  1  3  6  ,     0  .  0  6  4  2  8  7  8  9  3  0  6  0  6  3  2  3  2     -  0  .  1  8  9  3  8  6  0  2  5  8  9  9  0  2  0  9  8  ,     0  .  0  7  6  5  3  6  6  8  6  4  7  3  0  1  7  9  2     -  0  .  1  8  4  7  7  5  9  0  6  5  0  2  2  5  7  2  8  ,     0  .  0  8  8  4  5  7  7  3  8  0  4  3  8  0  0  3     -  0  .  1  7  9  3  7  4  5  4  8  3  0  6  5  3  7  5  4  ,     0  .  0  9  9  9  9  9  9  9  9  9  9  9  9  9  9  8  7     -  0  .  1  7  3  2  0  5  0  8  0  7  5  6  8  8  7  6  7  ,     0  .  1  1  1  1  1  4  0  4  6  6  0  3  9  2  0  4  4     -  0  .  1  6  6  2  9  3  9  2  2  4  6  0  5  0  9  ,     0  .  1  2  1  7  5  2  2  8  5  8  0  1  7  4  4  1  3     -  0  .  1  5  8  6  7  0  6  6  8  0  5  8  2  4  7  0  3  ,     0  .  1  3  1  8  6  9  1  6  3  0  2  0  0  1  3  7  2     -  0  .  1  5  0  3  6  7  9  6  1  4  9  5  7  9  5  4  5  ,     0  .  1  4  1  4  2  1  3  5  6  2  3  7  3  0  9  4  5     -  0  .  1  4  1  4  2  1  3  5  6  2  3  7  3  0  9  4  5  ,     1  .  0  3  9  4  9  0  6  0  9  8  1  6  4  2  6  5     0  .  7  5  6  6  4  7  8  9  7  3  4  1  8  0  7  8  ,     1  .  9  1  0  5  5  7  2  8  0  9  0  0  0  0  8  4     0  .  3  2  1  1  1  4  5  6  1  8  0  0  0  1  6  8  5  ,     1  .  9  1  1  5  4  2  2  6  1  9  5  6  1  9  9  7     0  .  3  2  0  6  2  5  4  5  1  6  9  3  4  6  2  3  5  ,     1  .  9  2  3  4  6  3  3  1  3  5  2  6  9  8  2     0  .  3  1  5  2  2  4  0  9  3  4  9  7  7  4  2  6  6  ,     1  .  9  3  5  7  1  2  1  0  6  9  3  9  3  6  7  7     0  .  3  1  0  6  1  3  9  7  4  1  0  0  9  7  8  9  ,     1  .  9  4  8  2  3  6  1  9  0  9  7  9  4  9  5  9     0  .  3  0  6  8  1  4  8  3  4  7  4  2  1  8  6  3  ,     1  .  9  6  0  9  8  1  9  3  5  5  9  6  7  7  4  4     0  .  3  0  3  8  4  2  9  4  3  9  1  9  3  5  3  9  ,     1  .  9  7  3  8  9  4  7  6  1  5  5  5  9  8  9  6     0  .  3  0  1  7  1  1  0  2  7  7  2  5  2  3  7  9  5  ,     1  .  9  8  6  9  1  9  3  7  4  1  5  3  9  7  1  5     0  .  3  0  0  4  2  8  2  1  5  3  5  2  2  7  9  2  6  ,     2     0  .  3  ,     2  .  0  1  3  0  8  0  6  2  5  8  4  6  0  2  8  8     0  .  3  0  0  4  2  8  2  1  5  3  5  2  2  7  9  4  ,     2  .  0  2  6  1  0  5  2  3  8  4  4  4  0  1     0  .  3  0  1  7  1  1  0  2  7  7  2  5  2  3  8  0  6  ,     2  .  0  3  9  0  1  8  0  6  4  4  0  3  2  2  5  4     0  .  3  0  3  8  4  2  9  4  3  9  1  9  3  5  4  0  7  ,     2  .  0  5  1  7  6  3  8  0  9  0  2  0  5  0  4     0  .  3  0  6  8  1  4  8  3  4  7  4  2  1  8  6  4  6  ,     2  .  0  6  4  2  8  7  8  9  3  0  6  0  6  3  2  3     0  .  3  1  0  6  1  3  9  7  4  1  0  0  9  7  8  9  6  ,     2  .  0  7  6  5  3  6  6  8  6  4  7  3  0  1  8     0  .  3  1  5  2  2  4  0  9  3  4  9  7  7  4  2  7  ,     2  .  0  8  8  4  5  7  7  3  8  0  4  3  8  0  0  3     0  .  3  2  0  6  2  5  4  5  1  6  9  3  4  6  2  4  6  ,     2  .  1     0  .  3  2  6  7  9  4  9  1  9  2  4  3  1  1  2  3  ,     2  .  1  1  1  1  1  4  0  4  6  6  0  3  9  2  0  4     0  .  3  3  3  7  0  6  0  7  7  5  3  9  4  9  1  ,     2  .  1  2  1  7  5  2  2  8  5  8  0  1  7  4  4     0  .  3  4  1  3  2  9  3  3  1  9  4  1  7  5  2  9  7  ,     2  .  1  3  1  8  6  9  1  6  3  0  2  0  0  1  3  5     0  .  3  4  9  6  3  2  0  3  8  5  0  4  2  0  4  5  5  ,     2  .  1  4  1  4  2  1  3  5  6  2  3  7  3  0  9  2     0  .  3  5  8  5  7  8  6  4  3  7  6  2  6  9  0  5  5  ,     2  .  1  5  0  3  6  7  9  6  1  4  9  5  7  9  5  6     0  .  3  6  8  1  3  0  8  3  6  9  7  9  9  8  6  3  ,     2  .  1  5  8  6  7  0  6  6  8  0  5  8  2  4  7     0  .  3  7  8  2  4  7  7  1  4  1  9  8  2  5  5  8  7  ,     2  .  1  6  6  2  9  3  9  2  2  4  6  0  5  0  9     0  .  3  8  8  8  8  5  9  5  3  3  9  6  0  7  9  5  6  ,     2  .  1  7  3  2  0  5  0  8  0  7  5  6  8  8  7  7     0  .  4  ,     2  .  1  7  9  3  7  4  5  4  8  3  0  6  5  3  7  7     0  .  4  1  1  5  4  2  2  6  1  9  5  6  1  9  9  7  5  ,     2  .  1  8  4  7  7  5  9  0  6  5  0  2  2  5  7  4     0  .  4  2  3  4  6  3  3  1  3  5  2  6  9  8  2  1  ,     2  .  1  8  9  3  8  6  0  2  5  8  9  9  0  2  1     0  .  4  3  5  7  1  2  1  0  6  9  3  9  3  6  7  7  ,     2  .  1  9  3  1  8  5  1  6  5  2  5  7  8  1  4     0  .  4  4  8  2  3  6  1  9  0  9  7  9  4  9  5  8  5  ,     2  .  1  9  6  1  5  7  0  5  6  0  8  0  6  4  6  3     0  .  4  6  0  9  8  1  9  3  5  5  9  6  7  7  4  3  6  ,     2  .  1  9  8  2  8  8  9  7  2  2  7  4  7  6  2  3     0  .  4  7  3  8  9  4  7  6  1  5  5  5  9  8  9  7  ,     2  .  1  9  9  5  7  1  7  8  4  6  4  7  7  2  0  7     0  .  4  8  6  9  1  9  3  7  4  1  5  3  9  7  1  4  ,     2  .  2     0  .  5  ,     2  .  1  9  9  5  7  1  7  8  4  6  4  7  7  2  0  7     0  .  5  1  3  0  8  0  6  2  5  8  4  6  0  2  8  5  ,     2  .  1  9  8  2  8  8  9  7  2  2  7  4  7  6  2     0  .  5  2  6  1  0  5  2  3  8  4  4  4  0  1  0  2  ,     2  .  1  9  6  1  5  7  0  5  6  0  8  0  6  4  6     0  .  5  3  9  0  1  8  0  6  4  4  0  3  2  2  5  6  ,     2  .  1  9  3  1  8  5  1  6  5  2  5  7  8  1  3  4     0  .  5  5  1  7  6  3  8  0  9  0  2  0  5  0  4  1  ,     2  .  1  8  9  3  8  6  0  2  5  8  9  9  0  2  1     0  .  5  6  4  2  8  7  8  9  3  0  6  0  6  3  2  3  ,     2  .  1  8  4  7  7  5  9  0  6  5  0  2  2  5  7  4     0  .  5  7  6  5  3  6  6  8  6  4  7  3  0  1  7  9  ,     2  .  1  7  9  3  7  4  5  4  8  3  0  6  5  3  7  7     0  .  5  8  8  4  5  7  7  3  8  0  4  3  8  0  0  2  ,     2  .  1  7  3  2  0  5  0  8  0  7  5  6  8  8  7  7     0  .  5  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  ,     2  .  1  6  6  2  9  3  9  2  2  4  6  0  5  0  9     0  .  6  1  1  1  1  4  0  4  6  6  0  3  9  2  0  4  ,     2  .  1  5  8  6  7  0  6  6  8  0  5  8  2  4  7     0  .  6  2  1  7  5  2  2  8  5  8  0  1  7  4  4  1  ,     2  .  1  5  0  3  6  7  9  6  1  4  9  5  7  9  5  6     0  .  6  3  1  8  6  9  1  6  3  0  2  0  0  1  3  7  ,     2  .  1  4  1  4  2  1  3  5  6  2  3  7  3  0  9  7     0  .  6  4  1  4  2  1  3  5  6  2  3  7  3  0  9  4  ,     2  .  1  3  1  8  6  9  1  6  3  0  2  0  0  1  4     0  .  6  5  0  3  6  7  9  6  1  4  9  5  7  9  5  5  ,     2  .  1  2  1  7  5  2  2  8  5  8  0  1  7  4  4     0  .  6  5  8  6  7  0  6  6  8  0  5  8  2  4  7  ,     2  .  1  1  1  1  1  4  0  4  6  6  0  3  9  2  0  4     0  .  6  6  6  2  9  3  9  2  2  4  6  0  5  0  9  ,     2  .  1     0  .  6  7  3  2  0  5  0  8  0  7  5  6  8  8  7  7  ,     2  .  0  8  9  4  4  2  7  1  9  0  9  9  9  9  1  6     0  .  6  7  8  8  8  5  4  3  8  1  9  9  9  8  3  1  ,     1  .  0  8  9  4  4  2  7  1  9  0  9  9  9  9  1  6     1  .  1  7  8  8  8  5  4  3  8  1  9  9  9  8  3  1  ,     1  .  0  8  8  4  5  7  7  3  8  0  4  3  8  0  0  3     1  .  1  7  9  3  7  4  5  4  8  3  0  6  5  3  7  7  ,     1  .  0  7  6  5  3  6  6  8  6  4  7  3  0  1  8     1  .  1  8  4  7  7  5  9  0  6  5  0  2  2  5  7  4  ,     1  .  0  6  4  2  8  7  8  9  3  0  6  0  6  3  2  3     1  .  1  8  9  3  8  6  0  2  5  8  9  9  0  2  1  ,     1  .  0  5  1  7  6  3  8  0  9  0  2  0  5  0  4  1     1  .  1  9  3  1  8  5  1  6  5  2  5  7  8  1  3  8  ,     1  .  0  3  9  0  1  8  0  6  4  4  0  3  2  2  5  6     1  .  1  9  6  1  5  7  0  5  6  0  8  0  6  4  6  ,     1  .  0  2  6  1  0  5  2  3  8  4  4  4  0  1  0  4     1  .  1  9  8  2  8  8  9  7  2  2  7  4  7  6  2  ,     1  .  0  1  3  0  8  0  6  2  5  8  4  6  0  2  8  8     1  .  1  9  9  5  7  1  7  8  4  6  4  7  7  2  0  7  ,     1     1  .  2  ,     0  .  9  8  6  9  1  9  3  7  4  1  5  3  9  7  1  5     1  .  1  9  9  5  7  1  7  8  4  6  4  7  7  2  0  5  ,     0  .  9  7  3  8  9  4  7  6  1  5  5  5  9  8  9  6     1  .  1  9  8  2  8  8  9  7  2  2  7  4  7  6  1  8  ,     0  .  9  6  0  9  8  1  9  3  5  5  9  6  7  7  4  4     1  .  1  9  6  1  5  7  0  5  6  0  8  0  6  4  5  8  ,     0  .  9  4  8  2  3  6  1  9  0  9  7  9  4  9  5  9     1  .  1  9  3  1  8  5  1  6  5  2  5  7  8  1  3  6  ,     0  .  9  3  5  7  1  2  1  0  6  9  3  9  3  6  7  7     1  .  1  8  9  3  8  6  0  2  5  8  9  9  0  2  1  ,     0  .  9  2  3  4  6  3  3  1  3  5  2  6  9  8  2  1     1  .  1  8  4  7  7  5  9  0  6  5  0  2  2  5  7  4  ,     0  .  9  1  1  5  4  2  2  6  1  9  5  6  1  9  9  7     1  .  1  7  9  3  7  4  5  4  8  3  0  6  5  3  7  7  ,     0  .  9  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1     1  .  1  7  3  2  0  5  0  8  0  7  5  6  8  8  7  7  ,     0  .  8  8  8  8  8  5  9  5  3  3  9  6  0  7  9  6     1  .  1  6  6  2  9  3  9  2  2  4  6  0  5  0  9  ,     0  .  8  7  8  2  4  7  7  1  4  1  9  8  2  5  5  9     1  .  1  5  8  6  7  0  6  6  8  0  5  8  2  4  7  ,     0  .  8  6  8  1  3  0  8  3  6  9  7  9  9  8  6  3     1  .  1  5  0  3  6  7  9  6  1  4  9  5  7  9  5  6  ,     0  .  8  5  8  5  7  8  6  4  3  7  6  2  6  9  0  6     1  .  1  4  1  4  2  1  3  5  6  2  3  7  3  0  9  4  ,     -  0  .  1  4  1  4  2  1  3  5  6  2  3  7  3  0  9  6  7     0  .  1  4  1  4  2  1  3  5  6  2  3  7  3  0  9  5  ,     -  0  .  1  5  0  3  6  7  9  6  1  4  9  5  7  9  5  5  7     0  .  1  3  1  8  6  9  1  6  3  0  2  0  0  1  3  7  2  ,     -  0  .  1  5  8  6  7  0  6  6  8  0  5  8  2  4  6  8     0  .  1  2  1  7  5  2  2  8  5  8  0  1  7  4  4  1  3  ,     -  0  .  1  6  6  2  9  3  9  2  2  4  6  0  5  0  8  9     0  .  1  1  1  1  1  4  0  4  6  6  0  3  9  2  0  4  4  ,     -  0  .  1  7  3  2  0  5  0  8  0  7  5  6  8  8  7  6  7     0  .  0  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  8  ,     -  0  .  1  7  9  3  7  4  5  4  8  3  0  6  5  3  7  6  5     0  .  0  8  8  4  5  7  7  3  8  0  4  3  8  0  0  2  5  ,     -  0  .  1  8  4  7  7  5  9  0  6  5  0  2  2  5  7  4     0  .  0  7  6  5  3  6  6  8  6  4  7  3  0  1  7  9  2  ,     -  0  .  1  8  9  3  8  6  0  2  5  8  9  9  0  2  0  9  8     0  .  0  6  4  2  8  7  8  9  3  0  6  0  6  3  2  3  2  ,     -  0  .  1  9  3  1  8  5  1  6  5  2  5  7  8  1  3  8  2     0  .  0  5  1  7  6  3  8  0  9  0  2  0  5  0  4  1  5  ,     -  0  .  1  9  6  1  5  7  0  5  6  0  8  0  6  4  6  2  6     0  .  0  3  9  0  1  8  0  6  4  4  0  3  2  2  5  6  4  ,     -  0  .  1  9  8  2  8  8  9  7  2  2  7  4  7  6  2  2  8     0  .  0  2  6  1  0  5  2  3  8  4  4  4  0  1  0  3  0  4  ,     -  0  .  1  9  9  5  7  1  7  8  4  6  4  7  7  2  0  7  4     0  .  0  1  3  0  8  0  6  2  5  8  4  6  0  2  8  5  9  3  ,     -  0  .  2  0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  8     0  ,     -  0  .  1  9  9  5  7  1  7  8  4  6  4  7  7  2  0  7  4     -  0  .  0  1  3  0  8  0  6  2  5  8  4  6  0  2  8  5  3  7  ,     -  0  .  1  9  8  2  8  8  9  7  2  2  7  4  7  6  1  8  3     -  0  .  0  2  6  1  0  5  2  3  8  4  4  4  0  1  0  2  4  8  ,     -  0  .  1  9  6  1  5  7  0  5  6  0  8  0  6  4  5  8  2     -  0  .  0  3  9  0  1  8  0  6  4  4  0  3  2  2  5  6  4  ,     -  0  .  1  9  3  1  8  5  1  6  5  2  5  7  8  1  3  3  7     -  0  .  0  5  1  7  6  3  8  0  9  0  2  0  5  0  4  1  5  ,     -  0  .  1  8  9  3  8  6  0  2  5  8  9  9  0  2  0  9  8     -  0  .  0  6  4  2  8  7  8  9  3  0  6  0  6  3  2  3  2  ,     -  0  .  1  8  4  7  7  5  9  0  6  5  0  2  2  5  7  4     -  0  .  0  7  6  5  3  6  6  8  6  4  7  3  0  1  7  9  2  ,     -  0  .  1  7  9  3  7  4  5  4  8  3  0  6  5  3  7  6  5     -  0  .  0  8  8  4  5  7  7  3  8  0  4  3  8  0  0  2  ,     -  0  .  1  7  3  2  0  5  0  8  0  7  5  6  8  8  7  6  7     -  0  .  0  9  9  9  9  9  9  9  9  9  9  9  9  9  9  8  7  ,     -  0  .  1  6  6  2  9  3  9  2  2  4  6  0  5  0  8  9     -  0  .  1  1  1  1  1  4  0  4  6  6  0  3  9  2  0  4  4  ,     -  0  .  1  5  8  6  7  0  6  6  8  0  5  8  2  4  6  8     -  0  .  1  2  1  7  5  2  2  8  5  8  0  1  7  4  4  1  3  ,     -  0  .  1  5  0  3  6  7  9  6  1  4  9  5  7  9  5  5  7     -  0  .  1  3  1  8  6  9  1  6  3  0  2  0  0  1  3  7  2  ,     -  0  .  1  4  1  4  2  1  3  5  6  2  3  7  3  0  9  6  7     -  0  .  1  4  1  4  2  1  3  5  6  2  3  7  3  0  9  4  5  ,     -  0  .  1  3  1  8  6  9  1  6  3  0  2  0  0  1  3  9  5     -  0  .  1  5  0  3  6  7  9  6  1  4  9  5  7  9  5  4  5  ,     -  0  .  1  2  1  7  5  2  2  8  5  8  0  1  7  4  3  9  1     -  0  .  1  5  8  6  7  0  6  6  8  0  5  8  2  4  7  0  3  ,     -  0  .  1  1  1  1  1  4  0  4  6  6  0  3  9  2  0  4  4     -  0  .  1  6  6  2  9  3  9  2  2  4  6  0  5  0  9  ,     -  0  .  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  9     -  0  .  1  7  3  2  0  5  0  8  0  7  5  6  8  8  7  6  7  ,     -  0  .  0  8  8  4  5  7  7  3  8  0  4  3  8  0  0  3     -  0  .  1  7  9  3  7  4  5  4  8  3  0  6  5  3  7  6  5  ,     -  0  .  0  7  6  5  3  6  6  8  6  4  7  3  0  1  7  9  2     -  0  .  1  8  4  7  7  5  9  0  6  5  0  2  2  5  7  4  ,     -  0  .  0  6  4  2  8  7  8  9  3  0  6  0  6  3  2  3  2     -  0  .  1  8  9  3  8  6  0  2  5  8  9  9  0  2  1  1  ,     -  0  .  0  5  1  7  6  3  8  0  9  0  2  0  5  0  4  1  5     -  0  .  1  9  3  1  8  5  1  6  5  2  5  7  8  1  3  7  ,     -  0  .  0  3  9  0  1  8  0  6  4  4  0  3  2  2  5  8  6     -  0  .  1  9  6  1  5  7  0  5  6  0  8  0  6  4  6  0  4  ,     -  0  .  0  2  6  1  0  5  2  3  8  4  4  4  0  1  0  1  3  7     -  0  .  1  9  8  2  8  8  9  7  2  2  7  4  7  6  2  0  5  ,     -  0  .  0  1  3  0  8  0  6  2  5  8  4  6  0  2  8  7  6     -  0  .  1  9  9  5  7  1  7  8  4  6  4  7  7  2  0  7  4  ,     0     -  0  .  1  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  6  )  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Buffer ( ST _ GeometryFromText (  ' POLYGON    (  (  0     0  ,     0     5  ,     5     5  ,     5     0  ,     0     0  )  )  '  )  ,     1  .  2  )  )  \"  ,    VARCHAR ,     \" POLYGON    (  (  -  1  .  2     0  ,     -  1  .  1  9  7  4  3  0  7  0  7  8  8  6  3  2  3  3     -  0  .  0  7  8  4  8  3  7  5  5  0  7  6  1  7  1  5  ,     -  1  .  1  8  9  7  3  3  8  3  3  6  4  8  5  7  1  7     -  0  .  1  5  6  6  3  1  4  3  0  6  6  4  0  6  1  6  8  ,     -  1  .  1  7  6  9  4  2  3  3  6  4  8  3  8  7  5  6     -  0  .  2  3  4  1  0  8  3  8  6  4  1  9  3  5  3  6  6  ,     -  1  .  1  5  9  1  1  0  9  9  1  5  4  6  8  8  1  1     -  0  .  3  1  0  5  8  2  8  5  4  1  2  3  0  2  4  6  ,     -  1  .  1  3  6  3  1  6  1  5  5  3  9  4  1  2  6  1     -  0  .  3  8  5  7  2  7  3  5  8  3  6  3  7  9  3  5  7  ,     -  1  .  1  0  8  6  5  5  4  3  9  0  1  3  5  4  3  5     -  0  .  4  5  9  2  2  0  1  1  8  8  3  8  1  0  7  3  ,     -  1  .  0  7  6  2  4  7  2  8  9  8  3  9  2  2  5  2     -  0  .  5  3  0  7  4  6  4  2  8  2  6  2  8  0  1  ,     -  1  .  0  3  9  2  3  0  4  8  4  5  4  1  3  2  5  8     -  0  .  5  9  9  9  9  9  9  9  9  9  9  9  9  9  9  5  ,     -  0  .  9  9  7  7  6  3  5  3  4  7  6  3  0  5  3  8     -  0  .  6  6  6  6  8  4  2  7  9  6  2  3  5  2  2  2  ,     -  0  .  9  5  2  0  2  4  0  0  8  3  4  9  4  8  1  9     -  0  .  7  3  0  5  1  3  7  1  4  8  1  0  4  6  4  3  ,     -  0  .  9  0  2  2  0  7  7  6  8  9  7  4  7  7  2  5     -  0  .  7  9  1  2  1  4  9  7  8  1  2  0  0  8  2  2  ,     -  0  .  8  4  8  5  2  8  1  3  7  4  2  3  8  5  6  8     -  0  .  8  4  8  5  2  8  1  3  7  4  2  3  8  5  6  7  ,     -  0  .  7  9  1  2  1  4  9  7  8  1  2  0  0  8  2  5     -  0  .  9  0  2  2  0  7  7  6  8  9  7  4  7  7  2  5  ,     -  0  .  7  3  0  5  1  3  7  1  4  8  1  0  4  6  4  7     -  0  .  9  5  2  0  2  4  0  0  8  3  4  9  4  8  1  9  ,     -  0  .  6  6  6  6  8  4  2  7  9  6  2  3  5  2  2  6     -  0  .  9  9  7  7  6  3  5  3  4  7  6  3  0  5  4  ,     -  0  .  5  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9     -  1  .  0  3  9  2  3  0  4  8  4  5  4  1  3  2  6  ,     -  0  .  5  3  0  7  4  6  4  2  8  2  6  2  8  0  1  5     -  1  .  0  7  6  2  4  7  2  8  9  8  3  9  2  2  5  7  ,     -  0  .  4  5  9  2  2  0  1  1  8  8  3  8  1  0  7  6  5     -  1  .  1  0  8  6  5  5  4  3  9  0  1  3  5  4  4  ,     -  0  .  3  8  5  7  2  7  3  5  8  3  6  3  7  9  3  8  5     -  1  .  1  3  6  3  1  6  1  5  5  3  9  4  1  2  6  6  ,     -  0  .  3  1  0  5  8  2  8  5  4  1  2  3  0  2  4  9     -  1  .  1  5  9  1  1  0  9  9  1  5  4  6  8  8  2  ,     -  0  .  2  3  4  1  0  8  3  8  6  4  1  9  3  5  3  9     -  1  .  1  7  6  9  4  2  3  3  6  4  8  3  8  7  6  5  ,     -  0  .  1  5  6  6  3  1  4  3  0  6  6  4  0  6  1  8  8     -  1  .  1  8  9  7  3  3  8  3  3  6  4  8  5  7  2  3  ,     -  0  .  0  7  8  4  8  3  7  5  5  0  7  6  1  7  1  6  7     -  1  .  1  9  7  4  3  0  7  0  7  8  8  6  3  2  4  2  ,     0     -  1  .  2  ,     5     -  1  .  2  ,     5  .  0  7  8  4  8  3  7  5  5  0  7  6  1  7  2     -  1  .  1  9  7  4  3  0  7  0  7  8  8  6  3  2  3  3  ,     5  .  1  5  6  6  3  1  4  3  0  6  6  4  0  6  2     -  1  .  1  8  9  7  3  3  8  3  3  6  4  8  5  7  1  7  ,     5  .  2  3  4  1  0  8  3  8  6  4  1  9  3  5  3     -  1  .  1  7  6  9  4  2  3  3  6  4  8  3  8  7  5  6  ,     5  .  3  1  0  5  8  2  8  5  4  1  2  3  0  2  5     -  1  .  1  5  9  1  1  0  9  9  1  5  4  6  8  8  1  1  ,     5  .  3  8  5  7  2  7  3  5  8  3  6  3  7  9  4     -  1  .  1  3  6  3  1  6  1  5  5  3  9  4  1  2  6  1  ,     5  .  4  5  9  2  2  0  1  1  8  8  3  8  1  0  7  5     -  1  .  1  0  8  6  5  5  4  3  9  0  1  3  5  4  3  5  ,     5  .  5  3  0  7  4  6  4  2  8  2  6  2  8  0  1     -  1  .  0  7  6  2  4  7  2  8  9  8  3  9  2  2  5  2  ,     5  .  6     -  1  .  0  3  9  2  3  0  4  8  4  5  4  1  3  2  5  8  ,     5  .  6  6  6  6  8  4  2  7  9  6  2  3  5  2  3     -  0  .  9  9  7  7  6  3  5  3  4  7  6  3  0  5  3  8  ,     5  .  7  3  0  5  1  3  7  1  4  8  1  0  4  6  4     -  0  .  9  5  2  0  2  4  0  0  8  3  4  9  4  8  1  9  ,     5  .  7  9  1  2  1  4  9  7  8  1  2  0  0  8  2     -  0  .  9  0  2  2  0  7  7  6  8  9  7  4  7  7  2  5  ,     5  .  8  4  8  5  2  8  1  3  7  4  2  3  8  5  7     -  0  .  8  4  8  5  2  8  1  3  7  4  2  3  8  5  6  8  ,     5  .  9  0  2  2  0  7  7  6  8  9  7  4  7  7  2  5     -  0  .  7  9  1  2  1  4  9  7  8  1  2  0  0  8  2  5  ,     5  .  9  5  2  0  2  4  0  0  8  3  4  9  4  8  2     -  0  .  7  3  0  5  1  3  7  1  4  8  1  0  4  6  4  7  ,     5  .  9  9  7  7  6  3  5  3  4  7  6  3  0  5  4     -  0  .  6  6  6  6  8  4  2  7  9  6  2  3  5  2  2  6  ,     6  .  0  3  9  2  3  0  4  8  4  5  4  1  3  2  6     -  0  .  5  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  ,     6  .  0  7  6  2  4  7  2  8  9  8  3  9  2  2  6     -  0  .  5  3  0  7  4  6  4  2  8  2  6  2  8  0  1  5  ,     6  .  1  0  8  6  5  5  4  3  9  0  1  3  5  4  4     -  0  .  4  5  9  2  2  0  1  1  8  8  3  8  1  0  7  6  5  ,     6  .  1  3  6  3  1  6  1  5  5  3  9  4  1  2  7     -  0  .  3  8  5  7  2  7  3  5  8  3  6  3  7  9  3  8  5  ,     6  .  1  5  9  1  1  0  9  9  1  5  4  6  8  8  2     -  0  .  3  1  0  5  8  2  8  5  4  1  2  3  0  2  4  9  ,     6  .  1  7  6  9  4  2  3  3  6  4  8  3  8  7  7     -  0  .  2  3  4  1  0  8  3  8  6  4  1  9  3  5  3  9  ,     6  .  1  8  9  7  3  3  8  3  3  6  4  8  5  7  3     -  0  .  1  5  6  6  3  1  4  3  0  6  6  4  0  6  1  8  8  ,     6  .  1  9  7  4  3  0  7  0  7  8  8  6  3  2  4     -  0  .  0  7  8  4  8  3  7  5  5  0  7  6  1  7  1  6  7  ,     6  .  2     0  ,     6  .  2     5  ,     6  .  1  9  7  4  3  0  7  0  7  8  8  6  3  2  3  6     5  .  0  7  8  4  8  3  7  5  5  0  7  6  1  7  2  ,     6  .  1  8  9  7  3  3  8  3  3  6  4  8  5  7  2     5  .  1  5  6  6  3  1  4  3  0  6  6  4  0  6  2  ,     6  .  1  7  6  9  4  2  3  3  6  4  8  3  8  7  6     5  .  2  3  4  1  0  8  3  8  6  4  1  9  3  5  3  ,     6  .  1  5  9  1  1  0  9  9  1  5  4  6  8  8  1     5  .  3  1  0  5  8  2  8  5  4  1  2  3  0  2  5  ,     6  .  1  3  6  3  1  6  1  5  5  3  9  4  1  2  6     5  .  3  8  5  7  2  7  3  5  8  3  6  3  7  9  4  ,     6  .  1  0  8  6  5  5  4  3  9  0  1  3  5  4  3  5     5  .  4  5  9  2  2  0  1  1  8  8  3  8  1  0  7  5  ,     6  .  0  7  6  2  4  7  2  8  9  8  3  9  2  2  5     5  .  5  3  0  7  4  6  4  2  8  2  6  2  8  0  1  ,     6  .  0  3  9  2  3  0  4  8  4  5  4  1  3  2  6     5  .  6  ,     5  .  9  9  7  7  6  3  5  3  4  7  6  3  0  5  4     5  .  6  6  6  6  8  4  2  7  9  6  2  3  5  2  3  ,     5  .  9  5  2  0  2  4  0  0  8  3  4  9  4  8  2     5  .  7  3  0  5  1  3  7  1  4  8  1  0  4  6  4  ,     5  .  9  0  2  2  0  7  7  6  8  9  7  4  7  7  2  5     5  .  7  9  1  2  1  4  9  7  8  1  2  0  0  8  2  ,     5  .  8  4  8  5  2  8  1  3  7  4  2  3  8  5  7     5  .  8  4  8  5  2  8  1  3  7  4  2  3  8  5  7  ,     5  .  7  9  1  2  1  4  9  7  8  1  2  0  0  8  3     5  .  9  0  2  2  0  7  7  6  8  9  7  4  7  7  2  5  ,     5  .  7  3  0  5  1  3  7  1  4  8  1  0  4  6  4     5  .  9  5  2  0  2  4  0  0  8  3  4  9  4  8  2  ,     5  .  6  6  6  6  8  4  2  7  9  6  2  3  5  2  3     5  .  9  9  7  7  6  3  5  3  4  7  6  3  0  5  4  ,     5  .  6     6  .  0  3  9  2  3  0  4  8  4  5  4  1  3  2  6  ,     5  .  5  3  0  7  4  6  4  2  8  2  6  2  8  0  2     6  .  0  7  6  2  4  7  2  8  9  8  3  9  2  2  6  ,     5  .  4  5  9  2  2  0  1  1  8  8  3  8  1  0  7  5     6  .  1  0  8  6  5  5  4  3  9  0  1  3  5  4  4  ,     5  .  3  8  5  7  2  7  3  5  8  3  6  3  7  9  4     6  .  1  3  6  3  1  6  1  5  5  3  9  4  1  2  7  ,     5  .  3  1  0  5  8  2  8  5  4  1  2  3  0  2  5     6  .  1  5  9  1  1  0  9  9  1  5  4  6  8  8  2  ,     5  .  2  3  4  1  0  8  3  8  6  4  1  9  3  5  4     6  .  1  7  6  9  4  2  3  3  6  4  8  3  8  7  7  ,     5  .  1  5  6  6  3  1  4  3  0  6  6  4  0  6  2     6  .  1  8  9  7  3  3  8  3  3  6  4  8  5  7  3  ,     5  .  0  7  8  4  8  3  7  5  5  0  7  6  1  7  2     6  .  1  9  7  4  3  0  7  0  7  8  8  6  3  2  4  ,     5     6  .  2  ,     0     6  .  2  ,     -  0  .  0  7  8  4  8  3  7  5  5  0  7  6  1  7  1  5     6  .  1  9  7  4  3  0  7  0  7  8  8  6  3  2  3  6  ,     -  0  .  1  5  6  6  3  1  4  3  0  6  6  4  0  6  1  6  8     6  .  1  8  9  7  3  3  8  3  3  6  4  8  5  7  2  ,     -  0  .  2  3  4  1  0  8  3  8  6  4  1  9  3  5  3  6  6     6  .  1  7  6  9  4  2  3  3  6  4  8  3  8  7  6  ,     -  0  .  3  1  0  5  8  2  8  5  4  1  2  3  0  2  4  6     6  .  1  5  9  1  1  0  9  9  1  5  4  6  8  8  1  ,     -  0  .  3  8  5  7  2  7  3  5  8  3  6  3  7  9  3  5  7     6  .  1  3  6  3  1  6  1  5  5  3  9  4  1  2  6  ,     -  0  .  4  5  9  2  2  0  1  1  8  8  3  8  1  0  7  3     6  .  1  0  8  6  5  5  4  3  9  0  1  3  5  4  3  5  ,     -  0  .  5  3  0  7  4  6  4  2  8  2  6  2  8  0  1     6  .  0  7  6  2  4  7  2  8  9  8  3  9  2  2  5  ,     -  0  .  5  9  9  9  9  9  9  9  9  9  9  9  9  9  9  5     6  .  0  3  9  2  3  0  4  8  4  5  4  1  3  2  6  ,     -  0  .  6  6  6  6  8  4  2  7  9  6  2  3  5  2  2  2     5  .  9  9  7  7  6  3  5  3  4  7  6  3  0  5  4  ,     -  0  .  7  3  0  5  1  3  7  1  4  8  1  0  4  6  4  3     5  .  9  5  2  0  2  4  0  0  8  3  4  9  4  8  2  ,     -  0  .  7  9  1  2  1  4  9  7  8  1  2  0  0  8  2  2     5  .  9  0  2  2  0  7  7  6  8  9  7  4  7  7  2  5  ,     -  0  .  8  4  8  5  2  8  1  3  7  4  2  3  8  5  6  7     5  .  8  4  8  5  2  8  1  3  7  4  2  3  8  5  7  ,     -  0  .  9  0  2  2  0  7  7  6  8  9  7  4  7  7  2  5     5  .  7  9  1  2  1  4  9  7  8  1  2  0  0  8  3  ,     -  0  .  9  5  2  0  2  4  0  0  8  3  4  9  4  8  1  9     5  .  7  3  0  5  1  3  7  1  4  8  1  0  4  6  4  ,     -  0  .  9  9  7  7  6  3  5  3  4  7  6  3  0  5  4     5  .  6  6  6  6  8  4  2  7  9  6  2  3  5  2  3  ,     -  1  .  0  3  9  2  3  0  4  8  4  5  4  1  3  2  6     5  .  6  ,     -  1  .  0  7  6  2  4  7  2  8  9  8  3  9  2  2  5  7     5  .  5  3  0  7  4  6  4  2  8  2  6  2  8  0  2  ,     -  1  .  1  0  8  6  5  5  4  3  9  0  1  3  5  4  4     5  .  4  5  9  2  2  0  1  1  8  8  3  8  1  0  7  5  ,     -  1  .  1  3  6  3  1  6  1  5  5  3  9  4  1  2  6  6     5  .  3  8  5  7  2  7  3  5  8  3  6  3  7  9  4  ,     -  1  .  1  5  9  1  1  0  9  9  1  5  4  6  8  8  2     5  .  3  1  0  5  8  2  8  5  4  1  2  3  0  2  5  ,     -  1  .  1  7  6  9  4  2  3  3  6  4  8  3  8  7  6  5     5  .  2  3  4  1  0  8  3  8  6  4  1  9  3  5  4  ,     -  1  .  1  8  9  7  3  3  8  3  3  6  4  8  5  7  2  3     5  .  1  5  6  6  3  1  4  3  0  6  6  4  0  6  2  ,     -  1  .  1  9  7  4  3  0  7  0  7  8  8  6  3  2  4  2     5  .  0  7  8  4  8  3  7  5  5  0  7  6  1  7  2  ,     -  1  .  2     5  ,     -  1  .  2     0  )  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Buffer ( ST _ Point (  0  ,     0  )  ,     0  )  )  \"  ,    VARCHAR ,     \" POINT    (  0     0  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Buffer ( ST _ LineFromText (  ' LINESTRING    (  0     0  ,     1     1  ,     2     0  .  5  )  '  )  ,     0  )  )  \"  ,    VARCHAR ,     \" LINESTRING    (  0     0  ,     1     1  ,     2     0  .  5  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Buffer ( ST _ GeometryFromText (  ' POLYGON    (  (  0     0  ,     0     5  ,     5     5  ,     5     0  ,     0     0  )  )  '  )  ,     0  )  )  \"  ,    VARCHAR ,     \" POLYGON    (  (  0     0  ,     5     0  ,     5     5  ,     0     5  ,     0     0  )  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Buffer ( ST _ Intersection ( ST _ GeometryFromText (  ' MULTILINESTRING    (  (  1     1  ,     5     1  )  ,     (  2     4  ,     4     4  )  )  '  )  ,    ST _ GeometryFromText (  ' MULTILINESTRING    (  (  3     4  ,     6     4  )  ,     (  5     0  ,     5     4  )  )  '  )  )  ,     0  .  2  )  )  \"  ,    VARCHAR ,     \" MULTIPOLYGON    (  (  (  5     0  .  8  ,     5  .  0  1  3  0  8  0  6  2  5  8  4  6  0  2  9     0  .  8  0  0  4  2  8  2  1  5  3  5  2  2  7  9  4  ,     5  .  0  2  6  1  0  5  2  3  8  4  4  4  0  1  1     0  .  8  0  1  7  1  1  0  2  7  7  2  5  2  3  8  ,     5  .  0  3  9  0  1  8  0  6  4  4  0  3  2  2  5     0  .  8  0  3  8  4  2  9  4  3  9  1  9  3  5  4  ,     5  .  0  5  1  7  6  3  8  0  9  0  2  0  5  0  4     0  .  8  0  6  8  1  4  8  3  4  7  4  2  1  8  6  4  ,     5  .  0  6  4  2  8  7  8  9  3  0  6  0  6  3  3     0  .  8  1  0  6  1  3  9  7  4  1  0  0  9  7  8  9  ,     5  .  0  7  6  5  3  6  6  8  6  4  7  3  0  1  8     0  .  8  1  5  2  2  4  0  9  3  4  9  7  7  4  2  7  ,     5  .  0  8  8  4  5  7  7  3  8  0  4  3  8     0  .  8  2  0  6  2  5  4  5  1  6  9  3  4  6  2  3  ,     5  .  1     0  .  8  2  6  7  9  4  9  1  9  2  4  3  1  1  2  3  ,     5  .  1  1  1  1  1  4  0  4  6  6  0  3  9  2     0  .  8  3  3  7  0  6  0  7  7  5  3  9  4  9  1  ,     5  .  1  2  1  7  5  2  2  8  5  8  0  1  7  4  4     0  .  8  4  1  3  2  9  3  3  1  9  4  1  7  5  3  ,     5  .  1  3  1  8  6  9  1  6  3  0  2  0  0  1  3  5     0  .  8  4  9  6  3  2  0  3  8  5  0  4  2  0  4  5  ,     5  .  1  4  1  4  2  1  3  5  6  2  3  7  3  0  9     0  .  8  5  8  5  7  8  6  4  3  7  6  2  6  9  0  6  ,     5  .  1  5  0  3  6  7  9  6  1  4  9  5  7  9  5     0  .  8  6  8  1  3  0  8  3  6  9  7  9  9  8  6  3  ,     5  .  1  5  8  6  7  0  6  6  8  0  5  8  2  4  7     0  .  8  7  8  2  4  7  7  1  4  1  9  8  2  5  5  9  ,     5  .  1  6  6  2  9  3  9  2  2  4  6  0  5  0  9     0  .  8  8  8  8  8  5  9  5  3  3  9  6  0  7  9  6  ,     5  .  1  7  3  2  0  5  0  8  0  7  5  6  8  8  8     0  .  9  ,     5  .  1  7  9  3  7  4  5  4  8  3  0  6  5  3  8     0  .  9  1  1  5  4  2  2  6  1  9  5  6  1  9  9  7  ,     5  .  1  8  4  7  7  5  9  0  6  5  0  2  2  5  7     0  .  9  2  3  4  6  3  3  1  3  5  2  6  9  8  2  1  ,     5  .  1  8  9  3  8  6  0  2  5  8  9  9  0  2  1     0  .  9  3  5  7  1  2  1  0  6  9  3  9  3  6  7  7  ,     5  .  1  9  3  1  8  5  1  6  5  2  5  7  8  1  3     0  .  9  4  8  2  3  6  1  9  0  9  7  9  4  9  5  9  ,     5  .  1  9  6  1  5  7  0  5  6  0  8  0  6  4  6     0  .  9  6  0  9  8  1  9  3  5  5  9  6  7  7  4  4  ,     5  .  1  9  8  2  8  8  9  7  2  2  7  4  7  6  2     0  .  9  7  3  8  9  4  7  6  1  5  5  5  9  8  9  6  ,     5  .  1  9  9  5  7  1  7  8  4  6  4  7  7  2  1     0  .  9  8  6  9  1  9  3  7  4  1  5  3  9  7  1  4  ,     5  .  2     1  ,     5  .  1  9  9  5  7  1  7  8  4  6  4  7  7  2  1     1  .  0  1  3  0  8  0  6  2  5  8  4  6  0  2  8  8  ,     5  .  1  9  8  2  8  8  9  7  2  2  7  4  7  6  2     1  .  0  2  6  1  0  5  2  3  8  4  4  4  0  1  0  4  ,     5  .  1  9  6  1  5  7  0  5  6  0  8  0  6  4  6     1  .  0  3  9  0  1  8  0  6  4  4  0  3  2  2  5  6  ,     5  .  1  9  3  1  8  5  1  6  5  2  5  7  8  1  3     1  .  0  5  1  7  6  3  8  0  9  0  2  0  5  0  4  1  ,     5  .  1  8  9  3  8  6  0  2  5  8  9  9  0  2  1     1  .  0  6  4  2  8  7  8  9  3  0  6  0  6  3  2  3  ,     5  .  1  8  4  7  7  5  9  0  6  5  0  2  2  5  7     1  .  0  7  6  5  3  6  6  8  6  4  7  3  0  1  8  ,     5  .  1  7  9  3  7  4  5  4  8  3  0  6  5  3  7     1  .  0  8  8  4  5  7  7  3  8  0  4  3  8  0  0  3  ,     5  .  1  7  3  2  0  5  0  8  0  7  5  6  8  8  8     1  .  1  ,     5  .  1  6  6  2  9  3  9  2  2  4  6  0  5  0  9     1  .  1  1  1  1  1  4  0  4  6  6  0  3  9  2  0  4  ,     5  .  1  5  8  6  7  0  6  6  8  0  5  8  2  4  7     1  .  1  2  1  7  5  2  2  8  5  8  0  1  7  4  4  1  ,     5  .  1  5  0  3  6  7  9  6  1  4  9  5  7  9  5     1  .  1  3  1  8  6  9  1  6  3  0  2  0  0  1  3  7  ,     5  .  1  4  1  4  2  1  3  5  6  2  3  7  3  0  9     1  .  1  4  1  4  2  1  3  5  6  2  3  7  3  0  9  4  ,     5  .  1  3  1  8  6  9  1  6  3  0  2  0  0  1  3  5     1  .  1  5  0  3  6  7  9  6  1  4  9  5  7  9  5  6  ,     5  .  1  2  1  7  5  2  2  8  5  8  0  1  7  4  4     1  .  1  5  8  6  7  0  6  6  8  0  5  8  2  4  7  ,     5  .  1  1  1  1  1  4  0  4  6  6  0  3  9  2     1  .  1  6  6  2  9  3  9  2  2  4  6  0  5  0  9  1  ,     5  .  1     1  .  1  7  3  2  0  5  0  8  0  7  5  6  8  8  7  7  ,     5  .  0  8  8  4  5  7  7  3  8  0  4  3  8     1  .  1  7  9  3  7  4  5  4  8  3  0  6  5  3  7  7  ,     5  .  0  7  6  5  3  6  6  8  6  4  7  3  0  1  8     1  .  1  8  4  7  7  5  9  0  6  5  0  2  2  5  7  4  ,     5  .  0  6  4  2  8  7  8  9  3  0  6  0  6  3  2     1  .  1  8  9  3  8  6  0  2  5  8  9  9  0  2  1  2  ,     5  .  0  5  1  7  6  3  8  0  9  0  2  0  5  0  4     1  .  1  9  3  1  8  5  1  6  5  2  5  7  8  1  3  8  ,     5  .  0  3  9  0  1  8  0  6  4  4  0  3  2  2  5     1  .  1  9  6  1  5  7  0  5  6  0  8  0  6  4  6  ,     5  .  0  2  6  1  0  5  2  3  8  4  4  4  0  1  1     1  .  1  9  8  2  8  8  9  7  2  2  7  4  7  6  2  ,     5  .  0  1  3  0  8  0  6  2  5  8  4  6  0  2  9     1  .  1  9  9  5  7  1  7  8  4  6  4  7  7  2  0  7  ,     5     1  .  2  ,     4  .  9  8  6  9  1  9  3  7  4  1  5  3  9  7  1     1  .  1  9  9  5  7  1  7  8  4  6  4  7  7  2  0  7  ,     4  .  9  7  3  8  9  4  7  6  1  5  5  5  9  8  9     1  .  1  9  8  2  8  8  9  7  2  2  7  4  7  6  2  ,     4  .  9  6  0  9  8  1  9  3  5  5  9  6  7  7  5     1  .  1  9  6  1  5  7  0  5  6  0  8  0  6  4  6  ,     4  .  9  4  8  2  3  6  1  9  0  9  7  9  4  9  6     1  .  1  9  3  1  8  5  1  6  5  2  5  7  8  1  3  6  ,     4  .  9  3  5  7  1  2  1  0  6  9  3  9  3  6  7     1  .  1  8  9  3  8  6  0  2  5  8  9  9  0  2  1  ,     4  .  9  2  3  4  6  3  3  1  3  5  2  6  9  8  2     1  .  1  8  4  7  7  5  9  0  6  5  0  2  2  5  7  4  ,     4  .  9  1  1  5  4  2  2  6  1  9  5  6  2     1  .  1  7  9  3  7  4  5  4  8  3  0  6  5  3  7  7  ,     4  .  9     1  .  1  7  3  2  0  5  0  8  0  7  5  6  8  8  7  7  ,     4  .  8  8  8  8  8  5  9  5  3  3  9  6  0  8     1  .  1  6  6  2  9  3  9  2  2  4  6  0  5  0  9  ,     4  .  8  7  8  2  4  7  7  1  4  1  9  8  2  5  6     1  .  1  5  8  6  7  0  6  6  8  0  5  8  2  4  7  ,     4  .  8  6  8  1  3  0  8  3  6  9  7  9  9  8  6  5     1  .  1  5  0  3  6  7  9  6  1  4  9  5  7  9  5  6  ,     4  .  8  5  8  5  7  8  6  4  3  7  6  2  6  9  1     1  .  1  4  1  4  2  1  3  5  6  2  3  7  3  0  9  4  ,     4  .  8  4  9  6  3  2  0  3  8  5  0  4  2  0  5     1  .  1  3  1  8  6  9  1  6  3  0  2  0  0  1  3  7  ,     4  .  8  4  1  3  2  9  3  3  1  9  4  1  7  5  3     1  .  1  2  1  7  5  2  2  8  5  8  0  1  7  4  4  1  ,     4  .  8  3  3  7  0  6  0  7  7  5  3  9  4  9  1     1  .  1  1  1  1  1  4  0  4  6  6  0  3  9  2  0  4  ,     4  .  8  2  6  7  9  4  9  1  9  2  4  3  1  1  2     1  .  1  ,     4  .  8  2  0  6  2  5  4  5  1  6  9  3  4  6  2     1  .  0  8  8  4  5  7  7  3  8  0  4  3  8  0  0  3  ,     4  .  8  1  5  2  2  4  0  9  3  4  9  7  7  4  3     1  .  0  7  6  5  3  6  6  8  6  4  7  3  0  1  8  ,     4  .  8  1  0  6  1  3  9  7  4  1  0  0  9  7  9     1  .  0  6  4  2  8  7  8  9  3  0  6  0  6  3  2  3  ,     4  .  8  0  6  8  1  4  8  3  4  7  4  2  1  8  7     1  .  0  5  1  7  6  3  8  0  9  0  2  0  5  0  4  1  ,     4  .  8  0  3  8  4  2  9  4  3  9  1  9  3  5  4     1  .  0  3  9  0  1  8  0  6  4  4  0  3  2  2  5  6  ,     4  .  8  0  1  7  1  1  0  2  7  7  2  5  2  3  8     1  .  0  2  6  1  0  5  2  3  8  4  4  4  0  1  0  4  ,     4  .  8  0  0  4  2  8  2  1  5  3  5  2  2  7  9     1  .  0  1  3  0  8  0  6  2  5  8  4  6  0  2  8  5  ,     4  .  8     1  ,     4  .  8  0  0  4  2  8  2  1  5  3  5  2  2  7  9     0  .  9  8  6  9  1  9  3  7  4  1  5  3  9  7  1  4  ,     4  .  8  0  1  7  1  1  0  2  7  7  2  5  2  3  8     0  .  9  7  3  8  9  4  7  6  1  5  5  5  9  8  9  6  ,     4  .  8  0  3  8  4  2  9  4  3  9  1  9  3  5  4     0  .  9  6  0  9  8  1  9  3  5  5  9  6  7  7  4  3  ,     4  .  8  0  6  8  1  4  8  3  4  7  4  2  1  8  7     0  .  9  4  8  2  3  6  1  9  0  9  7  9  4  9  5  9  ,     4  .  8  1  0  6  1  3  9  7  4  1  0  0  9  7  9     0  .  9  3  5  7  1  2  1  0  6  9  3  9  3  6  7  7  ,     4  .  8  1  5  2  2  4  0  9  3  4  9  7  7  4  3     0  .  9  2  3  4  6  3  3  1  3  5  2  6  9  8  2  ,     4  .  8  2  0  6  2  5  4  5  1  6  9  3  4  6  3     0  .  9  1  1  5  4  2  2  6  1  9  5  6  1  9  9  7  ,     4  .  8  2  6  7  9  4  9  1  9  2  4  3  1  1  2     0  .  8  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  ,     4  .  8  3  3  7  0  6  0  7  7  5  3  9  4  9  1     0  .  8  8  8  8  8  5  9  5  3  3  9  6  0  7  9  6  ,     4  .  8  4  1  3  2  9  3  3  1  9  4  1  7  5  3     0  .  8  7  8  2  4  7  7  1  4  1  9  8  2  5  5  9  ,     4  .  8  4  9  6  3  2  0  3  8  5  0  4  2  0  5     0  .  8  6  8  1  3  0  8  3  6  9  7  9  9  8  6  2  ,     4  .  8  5  8  5  7  8  6  4  3  7  6  2  6  9  1     0  .  8  5  8  5  7  8  6  4  3  7  6  2  6  9  0  4  ,     4  .  8  6  8  1  3  0  8  3  6  9  7  9  9  8  6  5     0  .  8  4  9  6  3  2  0  3  8  5  0  4  2  0  4  4  ,     4  .  8  7  8  2  4  7  7  1  4  1  9  8  2  5  6     0  .  8  4  1  3  2  9  3  3  1  9  4  1  7  5  3  ,     4  .  8  8  8  8  8  5  9  5  3  3  9  6  0  8     0  .  8  3  3  7  0  6  0  7  7  5  3  9  4  9  0  9  ,     4  .  9     0  .  8  2  6  7  9  4  9  1  9  2  4  3  1  1  2  2  ,     4  .  9  1  1  5  4  2  2  6  1  9  5  6  2     0  .  8  2  0  6  2  5  4  5  1  6  9  3  4  6  2  3  ,     4  .  9  2  3  4  6  3  3  1  3  5  2  6  9  8  2     0  .  8  1  5  2  2  4  0  9  3  4  9  7  7  4  2  6  ,     4  .  9  3  5  7  1  2  1  0  6  9  3  9  3  6  8     0  .  8  1  0  6  1  3  9  7  4  1  0  0  9  7  8  8  ,     4  .  9  4  8  2  3  6  1  9  0  9  7  9  4  9  6     0  .  8  0  6  8  1  4  8  3  4  7  4  2  1  8  6  3  ,     4  .  9  6  0  9  8  1  9  3  5  5  9  6  7  7  5     0  .  8  0  3  8  4  2  9  4  3  9  1  9  3  5  3  8  ,     4  .  9  7  3  8  9  4  7  6  1  5  5  5  9  8  9     0  .  8  0  1  7  1  1  0  2  7  7  2  5  2  3  8  ,     4  .  9  8  6  9  1  9  3  7  4  1  5  3  9  7  1     0  .  8  0  0  4  2  8  2  1  5  3  5  2  2  7  9  3  ,     5     0  .  8  )  )  ,     (  (  3     3  .  8  ,     4     3  .  8  ,     4  .  0  1  3  0  8  0  6  2  5  8  4  6  0  2  9     3  .  8  0  0  4  2  8  2  1  5  3  5  2  2  7  9  3  ,     4  .  0  2  6  1  0  5  2  3  8  4  4  4  0  1  1     3  .  8  0  1  7  1  1  0  2  7  7  2  5  2  3  8  ,     4  .  0  3  9  0  1  8  0  6  4  4  0  3  2  2  5     3  .  8  0  3  8  4  2  9  4  3  9  1  9  3  5  4  ,     4  .  0  5  1  7  6  3  8  0  9  0  2  0  5  0  4     3  .  8  0  6  8  1  4  8  3  4  7  4  2  1  8  6  6  ,     4  .  0  6  4  2  8  7  8  9  3  0  6  0  6  3  2     3  .  8  1  0  6  1  3  9  7  4  1  0  0  9  7  9  ,     4  .  0  7  6  5  3  6  6  8  6  4  7  3  0  1  8     3  .  8  1  5  2  2  4  0  9  3  4  9  7  7  4  2  6  ,     4  .  0  8  8  4  5  7  7  3  8  0  4  3  8     3  .  8  2  0  6  2  5  4  5  1  6  9  3  4  6  2  3  ,     4  .  1     3  .  8  2  6  7  9  4  9  1  9  2  4  3  1  1  2  3  ,     4  .  1  1  1  1  1  4  0  4  6  6  0  3  9  2     3  .  8  3  3  7  0  6  0  7  7  5  3  9  4  9  1  ,     4  .  1  2  1  7  5  2  2  8  5  8  0  1  7  4  4     3  .  8  4  1  3  2  9  3  3  1  9  4  1  7  5  3  ,     4  .  1  3  1  8  6  9  1  6  3  0  2  0  0  1  3  5     3  .  8  4  9  6  3  2  0  3  8  5  0  4  2  0  4  4  ,     4  .  1  4  1  4  2  1  3  5  6  2  3  7  3  0  9     3  .  8  5  8  5  7  8  6  4  3  7  6  2  6  9  0  3  ,     4  .  1  5  0  3  6  7  9  6  1  4  9  5  7  9  5     3  .  8  6  8  1  3  0  8  3  6  9  7  9  9  8  6  ,     4  .  1  5  8  6  7  0  6  6  8  0  5  8  2  4  7     3  .  8  7  8  2  4  7  7  1  4  1  9  8  2  5  6  ,     4  .  1  6  6  2  9  3  9  2  2  4  6  0  5  0  9     3  .  8  8  8  8  8  5  9  5  3  3  9  6  0  7  9  6  ,     4  .  1  7  3  2  0  5  0  8  0  7  5  6  8  8  8     3  .  9  ,     4  .  1  7  9  3  7  4  5  4  8  3  0  6  5  3  7     3  .  9  1  1  5  4  2  2  6  1  9  5  6  1  9  9  7  ,     4  .  1  8  4  7  7  5  9  0  6  5  0  2  2  5  7     3  .  9  2  3  4  6  3  3  1  3  5  2  6  9  8  2  ,     4  .  1  8  9  3  8  6  0  2  5  8  9  9  0  2  1     3  .  9  3  5  7  1  2  1  0  6  9  3  9  3  6  7  7  ,     4  .  1  9  3  1  8  5  1  6  5  2  5  7  8  1  3     3  .  9  4  8  2  3  6  1  9  0  9  7  9  4  9  6  ,     4  .  1  9  6  1  5  7  0  5  6  0  8  0  6  4  6     3  .  9  6  0  9  8  1  9  3  5  5  9  6  7  7  4  ,     4  .  1  9  8  2  8  8  9  7  2  2  7  4  7  6  2     3  .  9  7  3  8  9  4  7  6  1  5  5  5  9  9  ,     4  .  1  9  9  5  7  1  7  8  4  6  4  7  7  2  1     3  .  9  8  6  9  1  9  3  7  4  1  5  3  9  7  1  2  ,     4  .  2     4  ,     4  .  1  9  9  5  7  1  7  8  4  6  4  7  7  2  1     4  .  0  1  3  0  8  0  6  2  5  8  4  6  0  2  9  ,     4  .  1  9  8  2  8  8  9  7  2  2  7  4  7  6  2     4  .  0  2  6  1  0  5  2  3  8  4  4  4  0  1  1  ,     4  .  1  9  6  1  5  7  0  5  6  0  8  0  6  4  6     4  .  0  3  9  0  1  8  0  6  4  4  0  3  2  2  5  ,     4  .  1  9  3  1  8  5  1  6  5  2  5  7  8  1  3     4  .  0  5  1  7  6  3  8  0  9  0  2  0  5  0  4  ,     4  .  1  8  9  3  8  6  0  2  5  8  9  9  0  2  1     4  .  0  6  4  2  8  7  8  9  3  0  6  0  6  3  2  ,     4  .  1  8  4  7  7  5  9  0  6  5  0  2  2  5  7     4  .  0  7  6  5  3  6  6  8  6  4  7  3  0  1  8  ,     4  .  1  7  9  3  7  4  5  4  8  3  0  6  5  3  7     4  .  0  8  8  4  5  7  7  3  8  0  4  3  8  ,     4  .  1  7  3  2  0  5  0  8  0  7  5  6  8  8  8     4  .  1  ,     4  .  1  6  6  2  9  3  9  2  2  4  6  0  5  0  9     4  .  1  1  1  1  1  4  0  4  6  6  0  3  9  2  ,     4  .  1  5  8  6  7  0  6  6  8  0  5  8  2  4  7     4  .  1  2  1  7  5  2  2  8  5  8  0  1  7  4  4  ,     4  .  1  5  0  3  6  7  9  6  1  4  9  5  7  9  5     4  .  1  3  1  8  6  9  1  6  3  0  2  0  0  1  3  5  ,     4  .  1  4  1  4  2  1  3  5  6  2  3  7  3  0  9     4  .  1  4  1  4  2  1  3  5  6  2  3  7  3  0  9  ,     4  .  1  3  1  8  6  9  1  6  3  0  2  0  0  1  3  5     4  .  1  5  0  3  6  7  9  6  1  4  9  5  7  9  5  ,     4  .  1  2  1  7  5  2  2  8  5  8  0  1  7  4  4     4  .  1  5  8  6  7  0  6  6  8  0  5  8  2  4  7  ,     4  .  1  1  1  1  1  4  0  4  6  6  0  3  9  2     4  .  1  6  6  2  9  3  9  2  2  4  6  0  5  0  9  ,     4  .  1     4  .  1  7  3  2  0  5  0  8  0  7  5  6  8  8  8  ,     4  .  0  8  8  4  5  7  7  3  8  0  4  3  8     4  .  1  7  9  3  7  4  5  4  8  3  0  6  5  3  7  ,     4  .  0  7  6  5  3  6  6  8  6  4  7  3  0  1  8     4  .  1  8  4  7  7  5  9  0  6  5  0  2  2  5  7  ,     4  .  0  6  4  2  8  7  8  9  3  0  6  0  6  3  2     4  .  1  8  9  3  8  6  0  2  5  8  9  9  0  2  1  ,     4  .  0  5  1  7  6  3  8  0  9  0  2  0  5  0  4     4  .  1  9  3  1  8  5  1  6  5  2  5  7  8  1  3  ,     4  .  0  3  9  0  1  8  0  6  4  4  0  3  2  2  5     4  .  1  9  6  1  5  7  0  5  6  0  8  0  6  4  6  ,     4  .  0  2  6  1  0  5  2  3  8  4  4  4  0  1  1     4  .  1  9  8  2  8  8  9  7  2  2  7  4  7  6  2  ,     4  .  0  1  3  0  8  0  6  2  5  8  4  6  0  2  9     4  .  1  9  9  5  7  1  7  8  4  6  4  7  7  2  1  ,     4     4  .  2  ,     3     4  .  2  ,     2  .  9  8  6  9  1  9  3  7  4  1  5  3  9  7  1  2     4  .  1  9  9  5  7  1  7  8  4  6  4  7  7  2  1  ,     2  .  9  7  3  8  9  4  7  6  1  5  5  5  9  8  9  4     4  .  1  9  8  2  8  8  9  7  2  2  7  4  7  6  2  ,     2  .  9  6  0  9  8  1  9  3  5  5  9  6  7  7  4  6     4  .  1  9  6  1  5  7  0  5  6  0  8  0  6  4  6  ,     2  .  9  4  8  2  3  6  1  9  0  9  7  9  4  9  6     4  .  1  9  3  1  8  5  1  6  5  2  5  7  8  1  3  ,     2  .  9  3  5  7  1  2  1  0  6  9  3  9  3  6  7  7     4  .  1  8  9  3  8  6  0  2  5  8  9  9  0  2  1  ,     2  .  9  2  3  4  6  3  3  1  3  5  2  6  9  8  2     4  .  1  8  4  7  7  5  9  0  6  5  0  2  2  5  7  ,     2  .  9  1  1  5  4  2  2  6  1  9  5  6  1  9  9  7     4  .  1  7  9  3  7  4  5  4  8  3  0  6  5  3  7  ,     2  .  9  0  0  0  0  0  0  0  0  0  0  0  0  0  0  4     4  .  1  7  3  2  0  5  0  8  0  7  5  6  8  8  8  ,     2  .  8  8  8  8  8  5  9  5  3  3  9  6  0  7  9  6     4  .  1  6  6  2  9  3  9  2  2  4  6  0  5  0  9  ,     2  .  8  7  8  2  4  7  7  1  4  1  9  8  2  5  6     4  .  1  5  8  6  7  0  6  6  8  0  5  8  2  4  7  ,     2  .  8  6  8  1  3  0  8  3  6  9  7  9  9  8  6  5     4  .  1  5  0  3  6  7  9  6  1  4  9  5  7  9  5  ,     2  .  8  5  8  5  7  8  6  4  3  7  6  2  6  9  0  8     4  .  1  4  1  4  2  1  3  5  6  2  3  7  3  0  9  ,     2  .  8  4  9  6  3  2  0  3  8  5  0  4  2  0  4  4     4  .  1  3  1  8  6  9  1  6  3  0  2  0  0  1  3  5  ,     2  .  8  4  1  3  2  9  3  3  1  9  4  1  7  5  3     4  .  1  2  1  7  5  2  2  8  5  8  0  1  7  4  4  ,     2  .  8  3  3  7  0  6  0  7  7  5  3  9  4  9  1     4  .  1  1  1  1  1  4  0  4  6  6  0  3  9  2  ,     2  .  8  2  6  7  9  4  9  1  9  2  4  3  1  1  2  3     4  .  1  ,     2  .  8  2  0  6  2  5  4  5  1  6  9  3  4  6  2  3     4  .  0  8  8  4  5  7  7  3  8  0  4  3  8  ,     2  .  8  1  5  2  2  4  0  9  3  4  9  7  7  4  2  6     4  .  0  7  6  5  3  6  6  8  6  4  7  3  0  1  8  ,     2  .  8  1  0  6  1  3  9  7  4  1  0  0  9  7  8  6     4  .  0  6  4  2  8  7  8  9  3  0  6  0  6  3  2  ,     2  .  8  0  6  8  1  4  8  3  4  7  4  2  1  8  6  6     4  .  0  5  1  7  6  3  8  0  9  0  2  0  5  0  4  ,     2  .  8  0  3  8  4  2  9  4  3  9  1  9  3  5  3  7     4  .  0  3  9  0  1  8  0  6  4  4  0  3  2  2  5  ,     2  .  8  0  1  7  1  1  0  2  7  7  2  5  2  3  8     4  .  0  2  6  1  0  5  2  3  8  4  4  4  0  1  1  ,     2  .  8  0  0  4  2  8  2  1  5  3  5  2  2  7  9  3     4  .  0  1  3  0  8  0  6  2  5  8  4  6  0  2  9  ,     2  .  8     4  ,     2  .  8  0  0  4  2  8  2  1  5  3  5  2  2  7  9  3     3  .  9  8  6  9  1  9  3  7  4  1  5  3  9  7  1  2  ,     2  .  8  0  1  7  1  1  0  2  7  7  2  5  2  3  8     3  .  9  7  3  8  9  4  7  6  1  5  5  5  9  9  ,     2  .  8  0  3  8  4  2  9  4  3  9  1  9  3  5  3  7     3  .  9  6  0  9  8  1  9  3  5  5  9  6  7  7  4  6  ,     2  .  8  0  6  8  1  4  8  3  4  7  4  2  1  8  6  6     3  .  9  4  8  2  3  6  1  9  0  9  7  9  4  9  6  ,     2  .  8  1  0  6  1  3  9  7  4  1  0  0  9  7  9     3  .  9  3  5  7  1  2  1  0  6  9  3  9  3  6  7  7  ,     2  .  8  1  5  2  2  4  0  9  3  4  9  7  7  4  2  6     3  .  9  2  3  4  6  3  3  1  3  5  2  6  9  8  2  ,     2  .  8  2  0  6  2  5  4  5  1  6  9  3  4  6  2  3     3  .  9  1  1  5  4  2  2  6  1  9  5  6  1  9  9  7  ,     2  .  8  2  6  7  9  4  9  1  9  2  4  3  1  1  2  3     3  .  9  ,     2  .  8  3  3  7  0  6  0  7  7  5  3  9  4  9  1     3  .  8  8  8  8  8  5  9  5  3  3  9  6  0  7  9  6  ,     2  .  8  4  1  3  2  9  3  3  1  9  4  1  7  5  3     3  .  8  7  8  2  4  7  7  1  4  1  9  8  2  5  6  ,     2  .  8  4  9  6  3  2  0  3  8  5  0  4  2  0  4  4     3  .  8  6  8  1  3  0  8  3  6  9  7  9  9  8  6  5  ,     2  .  8  5  8  5  7  8  6  4  3  7  6  2  6  9  0  8     3  .  8  5  8  5  7  8  6  4  3  7  6  2  6  9  0  8  ,     2  .  8  6  8  1  3  0  8  3  6  9  7  9  9  8  6  5     3  .  8  4  9  6  3  2  0  3  8  5  0  4  2  0  4  4  ,     2  .  8  7  8  2  4  7  7  1  4  1  9  8  2  5  6     3  .  8  4  1  3  2  9  3  3  1  9  4  1  7  5  3  ,     2  .  8  8  8  8  8  5  9  5  3  3  9  6  0  7  9  6     3  .  8  3  3  7  0  6  0  7  7  5  3  9  4  9  1  ,     2  .  9     3  .  8  2  6  7  9  4  9  1  9  2  4  3  1  1  2  3  ,     2  .  9  1  1  5  4  2  2  6  1  9  5  6  1  9  9  7     3  .  8  2  0  6  2  5  4  5  1  6  9  3  4  6  2  3  ,     2  .  9  2  3  4  6  3  3  1  3  5  2  6  9  8  2     3  .  8  1  5  2  2  4  0  9  3  4  9  7  7  4  2  6  ,     2  .  9  3  5  7  1  2  1  0  6  9  3  9  3  6  7  7     3  .  8  1  0  6  1  3  9  7  4  1  0  0  9  7  9  ,     2  .  9  4  8  2  3  6  1  9  0  9  7  9  4  9  6     3  .  8  0  6  8  1  4  8  3  4  7  4  2  1  8  6  ,     2  .  9  6  0  9  8  1  9  3  5  5  9  6  7  7  4  6     3  .  8  0  3  8  4  2  9  4  3  9  1  9  3  5  3  7  ,     2  .  9  7  3  8  9  4  7  6  1  5  5  5  9  8  9  4     3  .  8  0  1  7  1  1  0  2  7  7  2  5  2  3  7  7  ,     2  .  9  8  6  9  1  9  3  7  4  1  5  3  9  7  1  2     3  .  8  0  0  4  2  8  2  1  5  3  5  2  2  7  9  3  ,     3     3  .  8  )  )  )  \"  )  ;", "assertFunction (  \" ST _ Buffer ( ST _ GeometryFromText (  ' POINT   EMPTY '  )  ,     1  )  \"  ,    GeometryType . GEOMETRY ,    null )  ;", "assertInvalidFunction (  \" ST _ Buffer ( ST _ Point (  0  ,     0  )  ,     -  1  .  2  )  \"  ,     \" distance   is   negative \"  )  ;", "assertInvalidFunction (  \" ST _ Buffer ( ST _ Point (  0  ,     0  )  ,     - infinity (  )  )  \"  ,     \" distance   is   negative \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Buffer ( ST _ Point (  0  ,     0  )  ,    infinity (  )  )  )  \"  ,    VARCHAR ,     \" MULTIPOLYGON   EMPTY \"  )  ;", "assertInvalidFunction (  \" ST _ Buffer ( ST _ Point (  0  ,     0  )  ,    nan (  )  )  \"  ,     \" distance   is   NaN \"  )  ;", "}", "METHOD_END"], "methodName": ["testSTBuffer"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ AsText ( ST _ Centroid ( ST _ GeometryFromText (  ' LINESTRING   EMPTY '  )  )  )  \"  ,    VARCHAR ,     \" POINT   EMPTY \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Centroid ( ST _ GeometryFromText (  ' POINT    (  3     5  )  '  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  3     5  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Centroid ( ST _ GeometryFromText (  ' MULTIPOINT    (  1     2  ,     2     4  ,     3     6  ,     4     8  )  '  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  2  .  5     5  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Centroid ( ST _ GeometryFromText (  ' LINESTRING    (  1     1  ,     2     2  ,     3     3  )  '  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  2     2  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Centroid ( ST _ GeometryFromText (  ' MULTILINESTRING    (  (  1     1  ,     5     1  )  ,     (  2     4  ,     4     4  )  )  '  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  3     2  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Centroid ( ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     1     4  ,     4     4  ,     4     1  )  )  '  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  2  .  5     2  .  5  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Centroid ( ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     5     1  ,     3     4  )  )  '  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  3     2  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Centroid ( ST _ GeometryFromText (  ' MULTIPOLYGON    (  (  (  1     1  ,     1     3  ,     3     3  ,     3     1  )  )  ,     (  (  2     4  ,     2     6  ,     6     6  ,     6     4  )  )  )  '  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  3  .  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3  5     4  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Centroid ( ST _ GeometryFromText (  ' POLYGON    (  (  0     0  ,     0     5  ,     5     5  ,     5     0  ,     0     0  )  ,     (  1     1  ,     1     2  ,     2     2  ,     2     1  ,     1     1  )  )  '  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  2  .  5  4  1  6  6  6  6  6  6  6  6  6  6  6  6  5     2  .  5  4  1  6  6  6  6  6  6  6  6  6  6  6  6  5  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testSTCentroid"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ CoordDim ( ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     1     4  ,     4     4  ,     4     1  )  )  '  )  )  \"  ,    TINYINT ,     (  ( byte )     (  2  )  )  )  ;", "assertFunction (  \" ST _ CoordDim ( ST _ GeometryFromText (  ' POLYGON   EMPTY '  )  )  \"  ,    TINYINT ,     (  ( byte )     (  2  )  )  )  ;", "assertFunction (  \" ST _ CoordDim ( ST _ GeometryFromText (  ' LINESTRING   EMPTY '  )  )  \"  ,    TINYINT ,     (  ( byte )     (  2  )  )  )  ;", "assertFunction (  \" ST _ CoordDim ( ST _ GeometryFromText (  ' POINT    (  1     4  )  '  )  )  \"  ,    TINYINT ,     (  ( byte )     (  2  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSTCoordDim"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ Crosses ( ST _ GeometryFromText (  ' POINT    (  2  0     2  0  )  '  )  ,    ST _ GeometryFromText (  ' POINT    (  2  5     2  5  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Crosses ( ST _ GeometryFromText (  ' LINESTRING    (  2  0     2  0  ,     3  0     3  0  )  '  )  ,    ST _ GeometryFromText (  ' POINT    (  2  5     2  5  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Crosses ( ST _ GeometryFromText (  ' LINESTRING    (  2  0     2  0  ,     3  0     3  0  )  '  )  ,    ST _ GeometryFromText (  ' MULTIPOINT    (  2  5     2  5  ,     3  1     3  1  )  '  )  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" ST _ Crosses ( ST _ GeometryFromText (  ' LINESTRING (  0     0  ,     1     1  )  '  )  ,    ST _ GeometryFromText (  ' LINESTRING    (  1     0  ,     0     1  )  '  )  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" ST _ Crosses ( ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     1     4  ,     4     4  ,     4     1  )  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  2     2  ,     2     5  ,     5     5  ,     5     2  )  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Crosses ( ST _ GeometryFromText (  ' MULTIPOLYGON    (  (  (  0     0     ,     0     2  ,     2     2  ,     2     0  )  )  ,     (  (  2     2  ,     2     4  ,     4     4  ,     4     2  )  )  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  2     2  ,     2     3  ,     3     3  ,     3     2  )  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Crosses ( ST _ GeometryFromText (  ' LINESTRING    (  -  2     -  2  ,     6     6  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  0     0  ,     0     4  ,     4     4  ,     4     0  )  )  '  )  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" ST _ Crosses ( ST _ GeometryFromText (  ' POINT    (  2  0     2  0  )  '  )  ,    ST _ GeometryFromText (  ' POINT    (  2  0     2  0  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Crosses ( ST _ GeometryFromText (  ' POLYGON    (  (  0     0  ,     0     4  ,     4     4  ,     4     0  )  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  0     0  ,     0     4  ,     4     4  ,     4     0  )  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Crosses ( ST _ GeometryFromText (  ' POLYGON    (  (  0     0  ,     0     4  ,     4     4  ,     4     0  )  )  '  )  ,    ST _ GeometryFromText (  ' LINESTRING    (  0     0  ,     0     4  ,     4     4  ,     4     0  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "}", "METHOD_END"], "methodName": ["testSTCrosses"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ AsText ( ST _ Difference ( ST _ GeometryFromText (  ' POINT    (  5  0     1  0  0  )  '  )  ,    ST _ GeometryFromText (  ' POINT    (  1  5  0     1  5  0  )  '  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  5  0     1  0  0  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Difference ( ST _ GeometryFromText (  ' MULTIPOINT    (  5  0     1  0  0  ,     5  0     2  0  0  )  '  )  ,    ST _ GeometryFromText (  ' POINT    (  5  0     1  0  0  )  '  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  5  0     2  0  0  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Difference ( ST _ GeometryFromText (  ' LINESTRING    (  5  0     1  0  0  ,     5  0     2  0  0  )  '  )  ,    ST _ GeometryFromText (  ' LINESTRING    (  5  0     5  0  ,     5  0     1  5  0  )  '  )  )  )  \"  ,    VARCHAR ,     \" LINESTRING    (  5  0     1  5  0  ,     5  0     2  0  0  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Difference ( ST _ GeometryFromText (  ' MULTILINESTRING    (  (  1     1  ,     5     1  )  ,     (  2     4  ,     4     4  )  )  '  )  ,    ST _ GeometryFromText (  ' MULTILINESTRING    (  (  2     1  ,     4     1  )  ,     (  3     3  ,     7     3  )  )  '  )  )  )  \"  ,    VARCHAR ,     \" MULTILINESTRING    (  (  1     1  ,     2     1  )  ,     (  4     1  ,     5     1  )  ,     (  2     4  ,     4     4  )  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Difference ( ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     1     4  ,     4     4  ,     4     1  )  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  2     2  ,     2     5  ,     5     5  ,     5     2  )  )  '  )  )  )  \"  ,    VARCHAR ,     \" POLYGON    (  (  1     1  ,     4     1  ,     4     2  ,     2     2  ,     2     4  ,     1     4  ,     1     1  )  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Difference ( ST _ GeometryFromText (  ' MULTIPOLYGON    (  (  (  1     1  ,     1     3  ,     3     3  ,     3     1  )  )  ,     (  (  0     0  ,     0     2  ,     2     2  ,     2     0  )  )  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  0     1  ,     3     1  ,     3     3  ,     0     3  ,     0     1  )  )  '  )  )  )  \"  ,    VARCHAR ,     \" POLYGON    (  (  1     1  ,     0     1  ,     0     0  ,     2     0  ,     2     1  ,     1     1  )  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testSTDifference"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ Dimension ( ST _ GeometryFromText (  ' POLYGON   EMPTY '  )  )  \"  ,    TINYINT ,     (  ( byte )     (  2  )  )  )  ;", "assertFunction (  \" ST _ Dimension ( ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     1     4  ,     4     4  ,     4     1  )  )  '  )  )  \"  ,    TINYINT ,     (  ( byte )     (  2  )  )  )  ;", "assertFunction (  \" ST _ Dimension ( ST _ GeometryFromText (  ' LINESTRING   EMPTY '  )  )  \"  ,    TINYINT ,     (  ( byte )     (  1  )  )  )  ;", "assertFunction (  \" ST _ Dimension ( ST _ GeometryFromText (  ' POINT    (  1     4  )  '  )  )  \"  ,    TINYINT ,     (  ( byte )     (  0  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSTDimension"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ Disjoint ( ST _ GeometryFromText (  ' POINT    (  5  0     1  0  0  )  '  )  ,    ST _ GeometryFromText (  ' POINT    (  1  5  0     1  5  0  )  '  )  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" ST _ Disjoint ( ST _ GeometryFromText (  ' MULTIPOINT    (  5  0     1  0  0  ,     5  0     2  0  0  )  '  )  ,    ST _ GeometryFromText (  ' POINT    (  5  0     1  0  0  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Disjoint ( ST _ GeometryFromText (  ' LINESTRING    (  0     0  ,     0     1  )  '  )  ,    ST _ GeometryFromText (  ' LINESTRING    (  1     1  ,     1     0  )  '  )  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" ST _ Disjoint ( ST _ GeometryFromText (  ' LINESTRING    (  2     1  ,     1     2  )  '  )  ,    ST _ GeometryFromText (  ' LINESTRING    (  3     1  ,     1     3  )  '  )  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" ST _ Disjoint ( ST _ GeometryFromText (  ' LINESTRING    (  1     1  ,     3     3  )  '  )  ,    ST _ GeometryFromText (  ' LINESTRING    (  3     1  ,     1     3  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Disjoint ( ST _ GeometryFromText (  ' LINESTRING    (  5  0     1  0  0  ,     5  0     2  0  0  )  '  )  ,    ST _ GeometryFromText (  ' LINESTRING    (  2  0     1  5  0  ,     1  0  0     1  5  0  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Disjoint ( ST _ GeometryFromText (  ' MULTILINESTRING    (  (  1     1  ,     5     1  )  ,     (  2     4  ,     4     4  )  )  '  )  ,    ST _ GeometryFromText (  ' MULTILINESTRING    (  (  3     4  ,     6     4  )  ,     (  5     0  ,     5     4  )  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Disjoint ( ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     1     3  ,     3     3  ,     3     1  )  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  4     4  ,     4     5  ,     5     5  ,     5     4  )  )  '  )  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" ST _ Disjoint ( ST _ GeometryFromText (  ' MULTIPOLYGON    (  (  (  1     1  ,     1     3  ,     3     3  ,     3     1  )  )  ,     (  (  0     0  ,     0     2  ,     2     2  ,     2     0  )  )  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  0     1  ,     3     1  ,     3     3  ,     0     3  )  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "}", "METHOD_END"], "methodName": ["testSTDisjoint"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ Distance ( ST _ Point (  5  0  ,     1  0  0  )  ,    ST _ Point (  1  5  0  ,     1  5  0  )  )  \"  ,    DOUBLE ,     1  1  1  .  8  0  3  3  9  8  8  7  4  9  8  9  4  8  )  ;", "assertFunction (  \" ST _ Distance ( ST _ Point (  5  0  ,     1  0  0  )  ,    ST _ GeometryFromText (  ' POINT    (  1  5  0     1  5  0  )  '  )  )  \"  ,    DOUBLE ,     1  1  1  .  8  0  3  3  9  8  8  7  4  9  8  9  4  8  )  ;", "assertFunction (  \" ST _ Distance ( ST _ GeometryFromText (  ' POINT    (  5  0     1  0  0  )  '  )  ,    ST _ GeometryFromText (  ' POINT    (  1  5  0     1  5  0  )  '  )  )  \"  ,    DOUBLE ,     1  1  1  .  8  0  3  3  9  8  8  7  4  9  8  9  4  8  )  ;", "assertFunction (  \" ST _ Distance ( ST _ GeometryFromText (  ' MULTIPOINT    (  5  0     1  0  0  ,     5  0     2  0  0  )  '  )  ,    ST _ GeometryFromText (  ' Point    (  5  0     1  0  0  )  '  )  )  \"  ,    DOUBLE ,     0  .  0  )  ;", "assertFunction (  \" ST _ Distance ( ST _ GeometryFromText (  ' LINESTRING    (  5  0     1  0  0  ,     5  0     2  0  0  )  '  )  ,    ST _ GeometryFromText (  ' LINESTRING    (  1  0     1  0  ,     2  0     2  0  )  '  )  )  \"  ,    DOUBLE ,     8  5  .  4  4  0  0  3  7  4  5  3  1  7  5  3  1  )  ;", "assertFunction (  \" ST _ Distance ( ST _ GeometryFromText (  ' MULTILINESTRING    (  (  1     1  ,     5     1  )  ,     (  2     4  ,     4     4  )  )  '  )  ,    ST _ GeometryFromText (  ' LINESTRING    (  1  0     2  0  ,     2  0     5  0  )  '  )  )  \"  ,    DOUBLE ,     1  7  .  0  8  8  0  0  7  4  9  0  6  3  5  0  6  )  ;", "assertFunction (  \" ST _ Distance ( ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     1     3  ,     3     3  ,     3     1  )  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  4     4  ,     4     5  ,     5     5  ,     5     4  )  )  '  )  )  \"  ,    DOUBLE ,     1  .  4  1  4  2  1  3  5  6  2  3  7  3  0  9  5  1  )  ;", "assertFunction (  \" ST _ Distance ( ST _ GeometryFromText (  ' MULTIPOLYGON    (  (  (  1     1  ,     1     3  ,     3     3  ,     3     1  )  )  ,     (  (  0     0  ,     0     2  ,     2     2  ,     2     0  )  )  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  1  0     1  0  0  ,     3  0     1  0  )  )  '  )  )  \"  ,    DOUBLE ,     2  7  .  8  9  2  6  5  1  3  6  1  9  6  2  7  0  6  )  ;", "}", "METHOD_END"], "methodName": ["testSTDistance"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ AsText ( ST _ Envelope ( ST _ GeometryFromText (  ' MULTIPOINT    (  1     2  ,     2     4  ,     3     6  ,     4     8  )  '  )  )  )  \"  ,    VARCHAR ,     \" POLYGON    (  (  1     2  ,     4     2  ,     4     8  ,     1     8  ,     1     2  )  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Envelope ( ST _ GeometryFromText (  ' LINESTRING   EMPTY '  )  )  )  \"  ,    VARCHAR ,     \" POLYGON   EMPTY \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Envelope ( ST _ GeometryFromText (  ' LINESTRING    (  1     1  ,     2     2  ,     1     3  )  '  )  )  )  \"  ,    VARCHAR ,     \" POLYGON    (  (  1     1  ,     2     1  ,     2     3  ,     1     3  ,     1     1  )  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Envelope ( ST _ GeometryFromText (  ' LINESTRING    (  8     4  ,     5     7  )  '  )  )  )  \"  ,    VARCHAR ,     \" POLYGON    (  (  5     4  ,     8     4  ,     8     7  ,     5     7  ,     5     4  )  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Envelope ( ST _ GeometryFromText (  ' MULTILINESTRING    (  (  1     1  ,     5     1  )  ,     (  2     4  ,     4     4  )  )  '  )  )  )  \"  ,    VARCHAR ,     \" POLYGON    (  (  1     1  ,     5     1  ,     5     4  ,     1     4  ,     1     1  )  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Envelope ( ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     4     1  ,     1     4  )  )  '  )  )  )  \"  ,    VARCHAR ,     \" POLYGON    (  (  1     1  ,     4     1  ,     4     4  ,     1     4  ,     1     1  )  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Envelope ( ST _ GeometryFromText (  ' MULTIPOLYGON    (  (  (  1     1  ,     1     3  ,     3     3  ,     3     1  )  )  ,     (  (  0     0  ,     0     2  ,     2     2  ,     2     0  )  )  )  '  )  )  )  \"  ,    VARCHAR ,     \" POLYGON    (  (  0     0  ,     3     0  ,     3     3  ,     0     3  ,     0     0  )  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Envelope ( ST _ GeometryFromText (  ' GEOMETRYCOLLECTION    ( POINT    (  5     1  )  ,    LINESTRING    (  3     4  ,     4     4  )  )  '  )  )  )  \"  ,    VARCHAR ,     \" POLYGON    (  (  3     1  ,     5     1  ,     5     4  ,     3     4  ,     3     1  )  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testSTEnvelope"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ Equals ( ST _ GeometryFromText (  ' POINT    (  5  0     1  0  0  )  '  )  ,    ST _ GeometryFromText (  ' POINT    (  1  5  0     1  5  0  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Equals ( ST _ GeometryFromText (  ' MULTIPOINT    (  5  0     1  0  0  ,     5  0     2  0  0  )  '  )  ,    ST _ GeometryFromText (  ' POINT    (  5  0     1  0  0  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Equals ( ST _ GeometryFromText (  ' LINESTRING    (  0     0  ,     0     1  )  '  )  ,    ST _ GeometryFromText (  ' LINESTRING    (  1     1  ,     1     0  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Equals ( ST _ GeometryFromText (  ' LINESTRING    (  0     0  ,     2     2  )  '  )  ,    ST _ GeometryFromText (  ' LINESTRING    (  0     0  ,     2     2  )  '  )  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" ST _ Equals ( ST _ GeometryFromText (  ' MULTILINESTRING    (  (  1     1  ,     5     1  )  ,     (  2     4  ,     4     4  )  )  '  )  ,    ST _ GeometryFromText (  ' MULTILINESTRING    (  (  3     4  ,     6     4  )  ,     (  5     0  ,     5     4  )  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Equals ( ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     1     3  ,     3     3  ,     3     1  )  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  3     3  ,     3     1  ,     1     1  ,     1     3  )  )  '  )  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" ST _ Equals ( ST _ GeometryFromText (  ' MULTIPOLYGON    (  (  (  1     1  ,     1     3  ,     3     3  ,     3     1  )  )  ,     (  (  0     0  ,     0     2  ,     2     2  ,     2     0  )  )  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  0     1  ,     3     1  ,     3     3  ,     0     3  )  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "}", "METHOD_END"], "methodName": ["testSTEquals"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ AsText ( ST _ ExteriorRing ( ST _ GeometryFromText (  ' POLYGON   EMPTY '  )  )  )  \"  ,    VARCHAR ,    null )  ;", "assertFunction (  \" ST _ AsText ( ST _ ExteriorRing ( ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     1     4  ,     4     1  )  )  '  )  )  )  \"  ,    VARCHAR ,     \" LINESTRING    (  1     1  ,     4     1  ,     1     4  ,     1     1  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ ExteriorRing ( ST _ GeometryFromText (  ' POLYGON    (  (  0     0  ,     0     5  ,     5     5  ,     5     0  ,     0     0  )  ,     (  1     1  ,     1     2  ,     2     2  ,     2     1  ,     1     1  )  )  '  )  )  )  \"  ,    VARCHAR ,     \" LINESTRING    (  0     0  ,     5     0  ,     5     5  ,     0     5  ,     0     0  )  \"  )  ;", "assertInvalidFunction (  \" ST _ AsText ( ST _ ExteriorRing ( ST _ GeometryFromText (  ' LINESTRING    (  1     1  ,     2     2  ,     1     3  )  '  )  )  )  \"  ,     \" ST _ ExteriorRing   only   applies   to   POLYGON   or   MULTI _ POLYGON .    Input   type   is :    LINE _ STRING \"  )  ;", "}", "METHOD_END"], "methodName": ["testSTExteriorRing"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ AsText ( ST _ Intersection ( ST _ GeometryFromText (  ' POINT    (  5  0     1  0  0  )  '  )  ,    ST _ GeometryFromText (  ' POINT    (  1  5  0     1  5  0  )  '  )  )  )  \"  ,    VARCHAR ,     \" MULTIPOLYGON   EMPTY \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Intersection ( ST _ GeometryFromText (  ' MULTIPOINT    (  5  0     1  0  0  ,     5  0     2  0  0  )  '  )  ,    ST _ GeometryFromText (  ' Point    (  5  0     1  0  0  )  '  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  5  0     1  0  0  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Intersection ( ST _ GeometryFromText (  ' LINESTRING    (  5  0     1  0  0  ,     5  0     2  0  0  )  '  )  ,    ST _ GeometryFromText (  ' LINESTRING    (  2  0     1  5  0  ,     1  0  0     1  5  0  )  '  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  5  0     1  5  0  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Intersection ( ST _ GeometryFromText (  ' MULTILINESTRING    (  (  1     1  ,     5     1  )  ,     (  2     4  ,     4     4  )  )  '  )  ,    ST _ GeometryFromText (  ' MULTILINESTRING    (  (  3     4  ,     6     4  )  ,     (  5     0  ,     5     4  )  )  '  )  )  )  \"  ,    VARCHAR ,     \" GEOMETRYCOLLECTION    ( POINT    (  5     1  )  ,    LINESTRING    (  3     4  ,     4     4  )  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Intersection ( ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     1     3  ,     3     3  ,     3     1  )  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  4     4  ,     4     5  ,     5     5  ,     5     4  )  )  '  )  )  )  \"  ,    VARCHAR ,     \" MULTIPOLYGON   EMPTY \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Intersection ( ST _ GeometryFromText (  ' MULTIPOLYGON    (  (  (  1     1  ,     1     3  ,     3     3  ,     3     1  )  )  ,     (  (  0     0  ,     0     2  ,     2     2  ,     2     0  )  )  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  0     1  ,     3     1  ,     3     3  ,     0     3  )  )  '  )  )  )  \"  ,    VARCHAR ,     \" GEOMETRYCOLLECTION    ( LINESTRING    (  1     1  ,     2     1  )  ,    MULTIPOLYGON    (  (  (  0     1  ,     1     1  ,     1     2  ,     0     2  ,     0     1  )  )  ,     (  (  2     1  ,     3     1  ,     3     3  ,     1     3  ,     1     2  ,     2     2  ,     2     1  )  )  )  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Intersection ( ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     1     4  ,     4     4  ,     4     1  )  )  '  )  ,    ST _ GeometryFromText (  ' LINESTRING    (  2     0  ,     2     3  )  '  )  )  )  \"  ,    VARCHAR ,     \" LINESTRING    (  2     1  ,     2     3  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Intersection ( ST _ GeometryFromText (  ' POLYGON    (  (  0     0  ,     0     1  ,     1     1  ,     1     0  ,     0     0  )  )  '  )  ,    ST _ GeometryFromText (  ' LINESTRING    (  0     0  ,     1     -  1  ,     1     2  )  '  )  )  )  \"  ,    VARCHAR ,     \" GEOMETRYCOLLECTION    ( POINT    (  0     0  )  ,    LINESTRING    (  1     0  ,     1     1  )  )  \"  )  ;", "assertEnvelopeIntersection (  \" POLYGON    (  (  0     0  ,     5     0  ,     5     5  ,     0     5  ,     0     0  )  )  \"  ,     \" POLYGON    (  (  0     0  ,     5     0  ,     5     5  ,     0     5  ,     0     0  )  )  \"  ,     \" POLYGON    (  (  0     0  ,     5     0  ,     5     5  ,     0     5  ,     0     0  )  )  \"  )  ;", "assertEnvelopeIntersection (  \" POLYGON    (  (  0     0  ,     5     0  ,     5     5  ,     0     5  ,     0     0  )  )  \"  ,     \" POLYGON    (  (  -  1     4  ,     1     4  ,     1     6  ,     -  1     6  ,     -  1     4  )  )  \"  ,     \" POLYGON    (  (  0     4  ,     1     4  ,     1     5  ,     0     5  ,     0     4  )  )  \"  )  ;", "assertEnvelopeIntersection (  \" POLYGON    (  (  0     0  ,     5     0  ,     5     5  ,     0     5  ,     0     0  )  )  \"  ,     \" POLYGON    (  (  1     4  ,     2     4  ,     2     6  ,     1     6  ,     1     4  )  )  \"  ,     \" POLYGON    (  (  1     4  ,     2     4  ,     2     5  ,     1     5  ,     1     4  )  )  \"  )  ;", "assertEnvelopeIntersection (  \" POLYGON    (  (  0     0  ,     5     0  ,     5     5  ,     0     5  ,     0     0  )  )  \"  ,     \" POLYGON    (  (  4     4  ,     6     4  ,     6     6  ,     4     6  ,     4     4  )  )  \"  ,     \" POLYGON    (  (  4     4  ,     5     4  ,     5     5  ,     4     5  ,     4     4  )  )  \"  )  ;", "assertEnvelopeIntersection (  \" POLYGON    (  (  0     0  ,     5     0  ,     5     5  ,     0     5  ,     0     0  )  )  \"  ,     \" POLYGON    (  (  1  0     1  0  ,     1  1     1  0  ,     1  1     1  1  ,     1  0     1  1  ,     1  0     1  0  )  )  \"  ,     \" POLYGON   EMPTY \"  )  ;", "assertEnvelopeIntersection (  \" POLYGON    (  (  0     0  ,     5     0  ,     5     5  ,     0     5  ,     0     0  )  )  \"  ,     \" POLYGON    (  (  -  1     -  1  ,     0     -  1  ,     0     1  ,     -  1     1  ,     -  1     -  1  )  )  \"  ,     \" LINESTRING    (  0     0  ,     0     1  )  \"  )  ;", "assertEnvelopeIntersection (  \" POLYGON    (  (  0     0  ,     5     0  ,     5     5  ,     0     5  ,     0     0  )  )  \"  ,     \" POLYGON    (  (  1     -  1  ,     2     -  1  ,     2     0  ,     1     0  ,     1     -  1  )  )  \"  ,     \" LINESTRING    (  1     0  ,     2     0  )  \"  )  ;", "assertEnvelopeIntersection (  \" POLYGON    (  (  0     0  ,     5     0  ,     5     5  ,     0     5  ,     0     0  )  )  \"  ,     \" POLYGON    (  (  -  1     -  1  ,     0     -  1  ,     0     0  ,     -  1     0  ,     -  1     -  1  )  )  \"  ,     \" POINT    (  0     0  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testSTIntersection"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ Intersects ( ST _ GeometryFromText (  ' POINT    (  5  0     1  0  0  )  '  )  ,    ST _ GeometryFromText (  ' POINT    (  1  5  0     1  5  0  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Intersects ( ST _ GeometryFromText (  ' MULTIPOINT    (  5  0     1  0  0  ,     5  0     2  0  0  )  '  )  ,    ST _ GeometryFromText (  ' POINT    (  5  0     1  0  0  )  '  )  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" ST _ Intersects ( ST _ GeometryFromText (  ' LINESTRING    (  0     0  ,     0     1  )  '  )  ,    ST _ GeometryFromText (  ' LINESTRING    (  1     1  ,     1     0  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Intersects ( ST _ GeometryFromText (  ' LINESTRING    (  5  0     1  0  0  ,     5  0     2  0  0  )  '  )  ,    ST _ GeometryFromText (  ' LINESTRING    (  2  0     1  5  0  ,     1  0  0     1  5  0  )  '  )  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" ST _ Intersects ( ST _ GeometryFromText (  ' MULTILINESTRING    (  (  1     1  ,     5     1  )  ,     (  2     4  ,     4     4  )  )  '  )  ,    ST _ GeometryFromText (  ' MULTILINESTRING    (  (  3     4  ,     6     4  )  ,     (  5     0  ,     5     4  )  )  '  )  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" ST _ Intersects ( ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     1     3  ,     3     3  ,     3     1  )  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  4     4  ,     4     5  ,     5     5  ,     5     4  )  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Intersects ( ST _ GeometryFromText (  ' MULTIPOLYGON    (  (  (  1     1  ,     1     3  ,     3     3  ,     3     1  )  )  ,     (  (  0     0  ,     0     2  ,     2     2  ,     2     0  )  )  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  0     1  ,     3     1  ,     3     3  ,     0     3  )  )  '  )  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" ST _ Intersects ( ST _ GeometryFromText (  ' POLYGON    (  (  1  6  .  5     5  4  ,     1  6  .  5     5  4  .  1  ,     1  6  .  5  1     5  4  .  1  ,     1  6  .  8     5  4  )  )  '  )  ,    ST _ GeometryFromText (  ' LINESTRING    (  1  6  .  6     5  3  ,     1  6  .  6     5  6  )  '  )  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" ST _ Intersects ( ST _ GeometryFromText (  ' POLYGON    (  (  1  6  .  5     5  4  ,     1  6  .  5     5  4  .  1  ,     1  6  .  5  1     5  4  .  1  ,     1  6  .  8     5  4  )  )  '  )  ,    ST _ GeometryFromText (  ' LINESTRING    (  1  6  .  6  6  6  7     5  4  .  0  5  ,     1  6  .  8  6  6  7     5  4  .  0  5  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Intersects ( ST _ GeometryFromText (  ' POLYGON    (  (  1  6  .  5     5  4  ,     1  6  .  5     5  4  .  1  ,     1  6  .  5  1     5  4  .  1  ,     1  6  .  8     5  4  )  )  '  )  ,    ST _ GeometryFromText (  ' LINESTRING    (  1  6  .  6  6  6  7     5  4  .  2  5  ,     1  6  .  8  6  6  7     5  4  .  2  5  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "}", "METHOD_END"], "methodName": ["testSTIntersects"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ IsClosed ( ST _ GeometryFromText (  ' LINESTRING    (  1     1  ,     2     2  ,     1     3  ,     1     1  )  '  )  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" ST _ IsClosed ( ST _ GeometryFromText (  ' LINESTRING    (  1     1  ,     2     2  ,     1     3  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertInvalidFunction (  \" ST _ IsClosed ( ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     1     4  ,     4     4  ,     4     1  )  )  '  )  )  \"  ,     \" ST _ IsClosed   only   applies   to   LINE _ STRING   or   MULTI _ LINE _ STRING .    Input   type   is :    POLYGON \"  )  ;", "}", "METHOD_END"], "methodName": ["testSTIsClosed"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ IsEmpty ( ST _ GeometryFromText (  ' POINT    (  1  .  5     2  .  5  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ IsEmpty ( ST _ GeometryFromText (  ' POLYGON   EMPTY '  )  )  \"  ,    BOOLEAN ,    true )  ;", "}", "METHOD_END"], "methodName": ["testSTIsEmpty"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ IsRing ( ST _ GeometryFromText (  ' LINESTRING    (  8     4  ,     4     8  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ IsRing ( ST _ GeometryFromText (  ' LINESTRING    (  0     0  ,     1     1  ,     0     2  ,     0     0  )  '  )  )  \"  ,    BOOLEAN ,    true )  ;", "assertInvalidFunction (  \" ST _ IsRing ( ST _ GeometryFromText (  ' POLYGON    (  (  2     0  ,     2     1  ,     3     1  )  )  '  )  )  \"  ,     \" ST _ IsRing   only   applies   to   LINE _ STRING .    Input   type   is :    POLYGON \"  )  ;", "}", "METHOD_END"], "methodName": ["testSTIsRing"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertSimpleGeometry (  \" POINT    (  1  .  5     2  .  5  )  \"  )  ;", "assertSimpleGeometry (  \" MULTIPOINT    (  1     2  ,     2     4  ,     3     6  ,     4     8  )  \"  )  ;", "assertNotSimpleGeometry (  \" MULTIPOINT    (  1     2  ,     2     4  ,     3     6  ,     1     2  )  \"  )  ;", "assertSimpleGeometry (  \" LINESTRING    (  8     4  ,     5     7  )  \"  )  ;", "assertSimpleGeometry (  \" LINESTRING    (  1     1  ,     2     2  ,     1     3  ,     1     1  )  \"  )  ;", "assertNotSimpleGeometry (  \" LINESTRING    (  0     0  ,     1     1  ,     1     0  ,     0     1  )  \"  )  ;", "assertSimpleGeometry (  \" MULTILINESTRING    (  (  1     1  ,     5     1  )  ,     (  2     4  ,     4     4  )  )  \"  )  ;", "assertNotSimpleGeometry (  \" MULTILINESTRING    (  (  1     1  ,     5     1  )  ,     (  2     4  ,     4     0  )  )  \"  )  ;", "assertSimpleGeometry (  \" POLYGON   EMPTY \"  )  ;", "assertSimpleGeometry (  \" POLYGON    (  (  2     0  ,     2     1  ,     3     1  )  )  \"  )  ;", "assertSimpleGeometry (  \" MULTIPOLYGON    (  (  (  1     1  ,     1     3  ,     3     3  ,     3     1  )  )  ,     (  (  2     4  ,     2     6  ,     6     6  ,     6     4  )  )  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testSTIsSimple"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertValidGeometry (  \" POINT   EMPTY \"  )  ;", "assertValidGeometry (  \" MULTIPOINT   EMPTY \"  )  ;", "assertValidGeometry (  \" LINESTRING   EMPTY \"  )  ;", "assertValidGeometry (  \" MULTILINESTRING   EMPTY \"  )  ;", "assertValidGeometry (  \" POLYGON   EMPTY \"  )  ;", "assertValidGeometry (  \" MULTIPOLYGON   EMPTY \"  )  ;", "assertValidGeometry (  \" GEOMETRYCOLLECTION   EMPTY \"  )  ;", "assertValidGeometry (  \" POINT    (  1     2  )  \"  )  ;", "assertValidGeometry (  \" MULTIPOINT    (  1     2  ,     3     4  )  \"  )  ;", "assertValidGeometry (  \" LINESTRING    (  0     0  ,     1     2  ,     3     4  )  \"  )  ;", "assertValidGeometry (  \" MULTILINESTRING    (  (  1     1  ,     5     1  )  ,     (  2     4  ,     4     4  )  )  \"  )  ;", "assertValidGeometry (  \" POLYGON    (  (  0     0  ,     0     1  ,     1     1  ,     1     0  ,     0     0  )  )  \"  )  ;", "assertValidGeometry (  \" MULTIPOLYGON    (  (  (  1     1  ,     1     3  ,     3     3  ,     3     1  )  )  ,     (  (  2     4  ,     2     6  ,     6     6  ,     6     4  )  )  )  \"  )  ;", "assertValidGeometry (  \" GEOMETRYCOLLECTION    ( POINT    (  1     2  )  ,    LINESTRING    (  0     0  ,     1     2  ,     3     4  )  ,    POLYGON    (  (  0     0  ,     0     1  ,     1     1  ,     1     0  ,     0     0  )  )  )  \"  )  ;", "assertInvalidGeometry (  \" POLYGON    (  (  0     0  ,     0     1  ,     1     1  ,     1     0  ,     0     0  )  ,     (  2     2  ,     2     3  ,     3     3  ,     3     2  ,     2     2  )  )  \"  ,     \" Hole   lies   outside   shell   at   or   near   point    (  2  .  0  ,     2  .  0  ,    NaN )  \"  )  ;", "assertInvalidGeometry (  \" POLYGON    (  (  0     0  ,     0     1  ,     2     1  ,     1     1  ,     1     0  ,     0     0  )  )  \"  ,     \" Self - intersection   at   or   near   point    (  1  .  0  ,     1  .  0  ,    NaN )  \"  )  ;", "assertInvalidGeometry (  \" POLYGON    (  (  0     0  ,     0     1  ,     1     1  ,     1     0  ,     0     0  )  ,     (  0     1  ,     1     1  ,     0  .  5     0  .  5  ,     0     1  )  )  \"  ,     \" Self - intersection   at   or   near   point    (  0  .  0  ,     1  .  0  ,    NaN )  \"  )  ;", "assertInvalidGeometry (  \" MULTIPOLYGON    (  (  (  0     0  ,     0     1  ,     1     1  ,     1     0  ,     0     0  )  )  ,     (  (  0  .  5     0  .  5  ,     0  .  5     2  ,     2     2  ,     2     0  .  5  ,     0  .  5     0  .  5  )  )  )  \"  ,     \" Self - intersection   at   or   near   point    (  0  .  5  ,     1  .  0  ,    NaN )  \"  )  ;", "assertInvalidGeometry (  \" GEOMETRYCOLLECTION    ( POINT    (  1     2  )  ,    POLYGON    (  (  0     0  ,     0     1  ,     2     1  ,     1     1  ,     1     0  ,     0     0  )  )  )  \"  ,     \" Self - intersection   at   or   near   point    (  1  .  0  ,     1  .  0  ,    NaN )  \"  )  ;", "assert (  \" ST _ IsValid ( ST _ GeometryFromText ( null )  )  \"  ,    BOOLEAN ,    null )  ;", "assert (  \" geometry _ invalid _ reason ( ST _ GeometryFromText ( null )  )  \"  ,    VARCHAR ,    null )  ;", "}", "METHOD_END"], "methodName": ["testSTIsValid"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ Length ( ST _ GeometryFromText (  ' LINESTRING   EMPTY '  )  )  \"  ,    DOUBLE ,     0  .  0  )  ;", "assertFunction (  \" ST _ Length ( ST _ GeometryFromText (  ' LINESTRING    (  0     0  ,     2     2  )  '  )  )  \"  ,    DOUBLE ,     2  .  8  2  8  4  2  7  1  2  4  7  4  6  1  9  0  3  )  ;", "assertFunction (  \" ST _ Length ( ST _ GeometryFromText (  ' MULTILINESTRING    (  (  1     1  ,     5     1  )  ,     (  2     4  ,     4     4  )  )  '  )  )  \"  ,    DOUBLE ,     6  .  0  )  ;", "assertInvalidFunction (  \" ST _ Length ( ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     1     4  ,     4     4  ,     4     1  )  )  '  )  )  \"  ,     \" ST _ Length   only   applies   to   LINE _ STRING   or   MULTI _ LINE _ STRING .    Input   type   is :    POLYGON \"  )  ;", "}", "METHOD_END"], "methodName": ["testSTLength"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ AsText ( ST _ LineFromText (  ' LINESTRING   EMPTY '  )  )  \"  ,    VARCHAR ,     \" LINESTRING   EMPTY \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ LineFromText (  ' LINESTRING    (  1     1  ,     2     2  ,     1     3  )  '  )  )  \"  ,    VARCHAR ,     \" LINESTRING    (  1     1  ,     2     2  ,     1     3  )  \"  )  ;", "assertInvalidFunction (  \" ST _ AsText ( ST _ LineFromText (  ' MULTILINESTRING   EMPTY '  )  )  \"  ,     \" ST _ LineFromText   only   applies   to   LINE _ STRING .    Input   type   is :    MULTI _ LINE _ STRING \"  )  ;", "assertInvalidFunction (  \" ST _ AsText ( ST _ LineFromText (  ' POLYGON    (  (  1     1  ,     1     4  ,     4     4  ,     4     1  )  )  '  )  )  \"  ,     \" ST _ LineFromText   only   applies   to   LINE _ STRING .    Input   type   is :    POLYGON \"  )  ;", "}", "METHOD_END"], "methodName": ["testSTLineFromText"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ XMax ( ST _ GeometryFromText (  ' POINT    (  1  .  5     2  .  5  )  '  )  )  \"  ,    DOUBLE ,     1  .  5  )  ;", "assertFunction (  \" ST _ YMax ( ST _ GeometryFromText (  ' POINT    (  1  .  5     2  .  5  )  '  )  )  \"  ,    DOUBLE ,     2  .  5  )  ;", "assertFunction (  \" ST _ XMax ( ST _ GeometryFromText (  ' MULTIPOINT    (  1     2  ,     2     4  ,     3     6  ,     4     8  )  '  )  )  \"  ,    DOUBLE ,     4  .  0  )  ;", "assertFunction (  \" ST _ YMax ( ST _ GeometryFromText (  ' MULTIPOINT    (  1     2  ,     2     4  ,     3     6  ,     4     8  )  '  )  )  \"  ,    DOUBLE ,     8  .  0  )  ;", "assertFunction (  \" ST _ XMax ( ST _ GeometryFromText (  ' LINESTRING    (  8     4  ,     5     7  )  '  )  )  \"  ,    DOUBLE ,     8  .  0  )  ;", "assertFunction (  \" ST _ YMax ( ST _ GeometryFromText (  ' LINESTRING    (  8     4  ,     5     7  )  '  )  )  \"  ,    DOUBLE ,     7  .  0  )  ;", "assertFunction (  \" ST _ XMax ( ST _ GeometryFromText (  ' MULTILINESTRING    (  (  1     1  ,     5     1  )  ,     (  2     4  ,     4     4  )  )  '  )  )  \"  ,    DOUBLE ,     5  .  0  )  ;", "assertFunction (  \" ST _ YMax ( ST _ GeometryFromText (  ' MULTILINESTRING    (  (  1     1  ,     5     1  )  ,     (  2     4  ,     4     4  )  )  '  )  )  \"  ,    DOUBLE ,     4  .  0  )  ;", "assertFunction (  \" ST _ XMax ( ST _ GeometryFromText (  ' POLYGON    (  (  2     0  ,     2     1  ,     3     1  )  )  '  )  )  \"  ,    DOUBLE ,     3  .  0  )  ;", "assertFunction (  \" ST _ YMax ( ST _ GeometryFromText (  ' POLYGON    (  (  2     0  ,     2     1  ,     3     1  )  )  '  )  )  \"  ,    DOUBLE ,     1  .  0  )  ;", "assertFunction (  \" ST _ XMax ( ST _ GeometryFromText (  ' MULTIPOLYGON    (  (  (  1     1  ,     1     3  ,     3     3  ,     3     1  )  )  ,     (  (  2     4  ,     2     6  ,     6     6  ,     6     4  )  )  )  '  )  )  \"  ,    DOUBLE ,     6  .  0  )  ;", "assertFunction (  \" ST _ YMax ( ST _ GeometryFromText (  ' MULTIPOLYGON    (  (  (  1     1  ,     1     3  ,     3     3  ,     3     1  )  )  ,     (  (  2     4  ,     2     6  ,     6     1  0  ,     6     4  )  )  )  '  )  )  \"  ,    DOUBLE ,     1  0  .  0  )  ;", "assertFunction (  \" ST _ XMax ( ST _ GeometryFromText (  ' POLYGON   EMPTY '  )  )  \"  ,    DOUBLE ,    null )  ;", "assertFunction (  \" ST _ YMax ( ST _ GeometryFromText (  ' POLYGON   EMPTY '  )  )  \"  ,    DOUBLE ,    null )  ;", "assertFunction (  \" ST _ XMax ( ST _ GeometryFromText (  ' GEOMETRYCOLLECTION    ( POINT    (  5     1  )  ,    LINESTRING    (  3     4  ,     4     4  )  )  '  )  )  \"  ,    DOUBLE ,     5  .  0  )  ;", "assertFunction (  \" ST _ YMax ( ST _ GeometryFromText (  ' GEOMETRYCOLLECTION    ( POINT    (  5     1  )  ,    LINESTRING    (  3     4  ,     4     4  )  )  '  )  )  \"  ,    DOUBLE ,     4  .  0  )  ;", "assertFunction (  \" ST _ XMax ( null )  \"  ,    DOUBLE ,    null )  ;", "assertFunction (  \" ST _ YMax ( null )  \"  ,    DOUBLE ,    null )  ;", "}", "METHOD_END"], "methodName": ["testSTMax"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ XMin ( ST _ GeometryFromText (  ' POINT    (  1  .  5     2  .  5  )  '  )  )  \"  ,    DOUBLE ,     1  .  5  )  ;", "assertFunction (  \" ST _ YMin ( ST _ GeometryFromText (  ' POINT    (  1  .  5     2  .  5  )  '  )  )  \"  ,    DOUBLE ,     2  .  5  )  ;", "assertFunction (  \" ST _ XMin ( ST _ GeometryFromText (  ' MULTIPOINT    (  1     2  ,     2     4  ,     3     6  ,     4     8  )  '  )  )  \"  ,    DOUBLE ,     1  .  0  )  ;", "assertFunction (  \" ST _ YMin ( ST _ GeometryFromText (  ' MULTIPOINT    (  1     2  ,     2     4  ,     3     6  ,     4     8  )  '  )  )  \"  ,    DOUBLE ,     2  .  0  )  ;", "assertFunction (  \" ST _ XMin ( ST _ GeometryFromText (  ' LINESTRING    (  8     4  ,     5     7  )  '  )  )  \"  ,    DOUBLE ,     5  .  0  )  ;", "assertFunction (  \" ST _ YMin ( ST _ GeometryFromText (  ' LINESTRING    (  8     4  ,     5     7  )  '  )  )  \"  ,    DOUBLE ,     4  .  0  )  ;", "assertFunction (  \" ST _ XMin ( ST _ GeometryFromText (  ' MULTILINESTRING    (  (  1     1  ,     5     1  )  ,     (  2     4  ,     4     4  )  )  '  )  )  \"  ,    DOUBLE ,     1  .  0  )  ;", "assertFunction (  \" ST _ YMin ( ST _ GeometryFromText (  ' MULTILINESTRING    (  (  1     2  ,     5     3  )  ,     (  2     4  ,     4     4  )  )  '  )  )  \"  ,    DOUBLE ,     2  .  0  )  ;", "assertFunction (  \" ST _ XMin ( ST _ GeometryFromText (  ' POLYGON    (  (  2     0  ,     2     1  ,     3     1  )  )  '  )  )  \"  ,    DOUBLE ,     2  .  0  )  ;", "assertFunction (  \" ST _ YMin ( ST _ GeometryFromText (  ' POLYGON    (  (  2     0  ,     2     1  ,     3     1  )  )  '  )  )  \"  ,    DOUBLE ,     0  .  0  )  ;", "assertFunction (  \" ST _ XMin ( ST _ GeometryFromText (  ' MULTIPOLYGON    (  (  (  1     1  0  ,     1     3  ,     3     3  ,     3     1  0  )  )  ,     (  (  2     4  ,     2     6  ,     6     6  ,     6     4  )  )  )  '  )  )  \"  ,    DOUBLE ,     1  .  0  )  ;", "assertFunction (  \" ST _ YMin ( ST _ GeometryFromText (  ' MULTIPOLYGON    (  (  (  1     1  0  ,     1     3  ,     3     3  ,     3     1  0  )  )  ,     (  (  2     4  ,     2     6  ,     6     1  0  ,     6     4  )  )  )  '  )  )  \"  ,    DOUBLE ,     3  .  0  )  ;", "assertFunction (  \" ST _ XMin ( ST _ GeometryFromText (  ' POLYGON   EMPTY '  )  )  \"  ,    DOUBLE ,    null )  ;", "assertFunction (  \" ST _ YMin ( ST _ GeometryFromText (  ' POLYGON   EMPTY '  )  )  \"  ,    DOUBLE ,    null )  ;", "assertFunction (  \" ST _ XMin ( ST _ GeometryFromText (  ' GEOMETRYCOLLECTION    ( POINT    (  5     1  )  ,    LINESTRING    (  3     4  ,     4     4  )  )  '  )  )  \"  ,    DOUBLE ,     3  .  0  )  ;", "assertFunction (  \" ST _ YMin ( ST _ GeometryFromText (  ' GEOMETRYCOLLECTION    ( POINT    (  5     1  )  ,    LINESTRING    (  3     4  ,     4     4  )  )  '  )  )  \"  ,    DOUBLE ,     1  .  0  )  ;", "assertFunction (  \" ST _ XMin ( null )  \"  ,    DOUBLE ,    null )  ;", "assertFunction (  \" ST _ YMin ( null )  \"  ,    DOUBLE ,    null )  ;", "}", "METHOD_END"], "methodName": ["testSTMin"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ NumInteriorRing ( ST _ GeometryFromText (  ' POLYGON    (  (  0     0  ,     0     5  ,     5     5  ,     5     0  ,     0     0  )  )  '  )  )  \"  ,    BIGINT ,     0 L )  ;", "assertFunction (  \" ST _ NumInteriorRing ( ST _ GeometryFromText (  ' POLYGON    (  (  0     0  ,     8     0  ,     0     8  ,     0     0  )  ,     (  1     1  ,     1     5  ,     5     1  ,     1     1  )  )  '  )  )  \"  ,    BIGINT ,     1 L )  ;", "assertInvalidFunction (  \" ST _ NumInteriorRing ( ST _ GeometryFromText (  ' LINESTRING    (  8     4  ,     5     7  )  '  )  )  \"  ,     \" ST _ NumInteriorRing   only   applies   to   POLYGON .    Input   type   is :    LINE _ STRING \"  )  ;", "}", "METHOD_END"], "methodName": ["testSTNumInteriorRing"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ NumPoints ( ST _ GeometryFromText (  ' POLYGON    (  (  0     0  ,     8     0  ,     0     8  ,     0     0  )  ,     (  1     1  ,     1     5  ,     5     1  ,     1     1  )  )  '  )  )  \"  ,    BIGINT ,     6 L )  ;", "assertFunction (  \" ST _ NumPoints ( ST _ GeometryFromText (  ' MULTIPOLYGON    (  (  (  1     1  ,     1     3  ,     3     3  ,     3     1  )  )  ,     (  (  2     4  ,     2     6  ,     6     6  ,     6     4  )  )  )  '  )  )  \"  ,    BIGINT ,     8 L )  ;", "assertFunction (  \" ST _ NumPoints ( ST _ GeometryFromText (  ' LINESTRING    (  8     4  ,     5     7  )  '  )  )  \"  ,    BIGINT ,     2 L )  ;", "assertFunction (  \" ST _ NumPoints ( ST _ GeometryFromText (  ' MULTILINESTRING    (  (  1     1  ,     5     1  )  ,     (  2     4  ,     4     4  )  )  '  )  )  \"  ,    BIGINT ,     4 L )  ;", "assertFunction (  \" ST _ NumPoints ( ST _ GeometryFromText (  ' POINT    (  1     2  )  '  )  )  \"  ,    BIGINT ,     1 L )  ;", "assertFunction (  \" ST _ NumPoints ( ST _ GeometryFromText (  ' MULTIPOINT    (  1     2  ,     2     4  ,     3     6  ,     4     8  )  '  )  )  \"  ,    BIGINT ,     4 L )  ;", "assertFunction (  \" ST _ NumPoints ( ST _ GeometryFromText (  ' LINESTRING   EMPTY '  )  )  \"  ,    BIGINT ,     0 L )  ;", "}", "METHOD_END"], "methodName": ["testSTNumPoints"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ Overlaps ( ST _ GeometryFromText (  ' POINT    (  5  0     1  0  0  )  '  )  ,    ST _ GeometryFromText (  ' POINT    (  1  5  0     1  5  0  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Overlaps ( ST _ GeometryFromText (  ' POINT    (  5  0     1  0  0  )  '  )  ,    ST _ GeometryFromText (  ' POINT    (  5  0     1  0  0  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Overlaps ( ST _ GeometryFromText (  ' MULTIPOINT    (  5  0     1  0  0  ,     5  0     2  0  0  )  '  )  ,    ST _ GeometryFromText (  ' POINT    (  5  0     1  0  0  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Overlaps ( ST _ GeometryFromText (  ' LINESTRING    (  0     0  ,     0     1  )  '  )  ,    ST _ GeometryFromText (  ' LINESTRING    (  1     1  ,     1     0  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Overlaps ( ST _ GeometryFromText (  ' MULTILINESTRING    (  (  1     1  ,     5     1  )  ,     (  2     4  ,     4     4  )  )  '  )  ,    ST _ GeometryFromText (  ' MULTILINESTRING    (  (  3     4  ,     6     4  )  ,     (  5     0  ,     5     4  )  )  '  )  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" ST _ Overlaps ( ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     1     4  ,     4     4  ,     4     1  )  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  3     3  ,     3     5  ,     5     5  ,     5     3  )  )  '  )  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" ST _ Overlaps ( ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     1     4  ,     4     4  ,     4     1  )  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     1     4  ,     4     4  ,     4     1  )  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Overlaps ( ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     1     4  ,     4     4  ,     4     1  )  )  '  )  ,    ST _ GeometryFromText (  ' LINESTRING    (  1     1  ,     4     4  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Overlaps ( ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     1     3  ,     3     3  ,     3     1  )  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  4     4  ,     4     5  ,     5     5  ,     5     4  )  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Overlaps ( ST _ GeometryFromText (  ' MULTIPOLYGON    (  (  (  1     1  ,     1     3  ,     3     3  ,     3     1  )  )  ,     (  (  0     0  ,     0     2  ,     2     2  ,     2     0  )  )  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  0     1  ,     3     1  ,     3     3  ,     0     3  )  )  '  )  )  \"  ,    BOOLEAN ,    true )  ;", "}", "METHOD_END"], "methodName": ["testSTOverlaps"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ AsText ( ST _ Point (  1  ,     4  )  )  \"  ,    VARCHAR ,     \" POINT    (  1     4  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Point (  1  2  2  .  3  ,     1  0  .  5  5  )  )  \"  ,    VARCHAR ,     \" POINT    (  1  2  2  .  3     1  0  .  5  5  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testSTPoint"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ AsText ( ST _ Polygon (  ' POLYGON   EMPTY '  )  )  \"  ,    VARCHAR ,     \" POLYGON   EMPTY \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ Polygon (  ' POLYGON    (  (  1     1  ,     1     4  ,     4     4  ,     4     1  )  )  '  )  )  \"  ,    VARCHAR ,     \" POLYGON    (  (  1     1  ,     4     1  ,     4     4  ,     1     4  ,     1     1  )  )  \"  )  ;", "assertInvalidFunction (  \" ST _ AsText ( ST _ Polygon (  ' LINESTRING    (  1     1  ,     2     2  ,     1     3  )  '  )  )  \"  ,     \" ST _ Polygon   only   applies   to   POLYGON .    Input   type   is :    LINE _ STRING \"  )  ;", "}", "METHOD_END"], "methodName": ["testSTPolygon"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ Relate ( ST _ GeometryFromText (  ' LINESTRING    (  0     0  ,     3     3  )  '  )  ,    ST _ GeometryFromText (  ' LINESTRING    (  1     1  ,     4     1  )  '  )  ,     '  *  *  *  * T *  *  *  *  '  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Relate ( ST _ GeometryFromText (  ' POLYGON    (  (  2     0  ,     2     1  ,     3     1  )  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     1     4  ,     4     4  ,     4     1  )  )  '  )  ,     '  *  *  *  * T *  *  *  *  '  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" ST _ Relate ( ST _ GeometryFromText (  ' POLYGON    (  (  2     0  ,     2     1  ,     3     1  )  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     1     4  ,     4     4  ,     4     1  )  )  '  )  ,     ' T *  *  *  *  *  *  *  *  '  )  \"  ,    BOOLEAN ,    false )  ;", "}", "METHOD_END"], "methodName": ["testSTRelate"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ AsText ( ST _ StartPoint ( ST _ GeometryFromText (  ' LINESTRING    (  8     4  ,     4     8  ,     5     6  )  '  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  8     4  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ EndPoint ( ST _ GeometryFromText (  ' LINESTRING    (  8     4  ,     4     8  ,     5     6  )  '  )  )  )  \"  ,    VARCHAR ,     \" POINT    (  5     6  )  \"  )  ;", "assertInvalidFunction (  \" ST _ AsText ( ST _ StartPoint ( ST _ GeometryFromText (  ' POLYGON    (  (  2     0  ,     2     1  ,     3     1  )  )  '  )  )  )  \"  ,     \" ST _ StartPoint   only   applies   to   LINE _ STRING .    Input   type   is :    POLYGON \"  )  ;", "assertInvalidFunction (  \" ST _ AsText ( ST _ EndPoint ( ST _ GeometryFromText (  ' POLYGON    (  (  2     0  ,     2     1  ,     3     1  )  )  '  )  )  )  \"  ,     \" ST _ EndPoint   only   applies   to   LINE _ STRING .    Input   type   is :    POLYGON \"  )  ;", "}", "METHOD_END"], "methodName": ["testSTStartEndPoint"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ AsText ( ST _ SymDifference ( ST _ GeometryFromText (  ' POINT    (  5  0     1  0  0  )  '  )  ,    ST _ GeometryFromText (  ' POINT    (  5  0     1  5  0  )  '  )  )  )  \"  ,    VARCHAR ,     \" MULTIPOINT    (  (  5  0     1  0  0  )  ,     (  5  0     1  5  0  )  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ SymDifference ( ST _ GeometryFromText (  ' MULTIPOINT    (  5  0     1  0  0  ,     6  0     2  0  0  )  '  )  ,    ST _ GeometryFromText (  ' MULTIPOINT    (  6  0     2  0  0  ,     7  0     1  5  0  )  '  )  )  )  \"  ,    VARCHAR ,     \" MULTIPOINT    (  (  5  0     1  0  0  )  ,     (  7  0     1  5  0  )  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ SymDifference ( ST _ GeometryFromText (  ' LINESTRING    (  5  0     1  0  0  ,     5  0     2  0  0  )  '  )  ,    ST _ GeometryFromText (  ' LINESTRING    (  5  0     5  0  ,     5  0     1  5  0  )  '  )  )  )  \"  ,    VARCHAR ,     \" MULTILINESTRING    (  (  5  0     5  0  ,     5  0     1  0  0  )  ,     (  5  0     1  5  0  ,     5  0     2  0  0  )  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ SymDifference ( ST _ GeometryFromText (  ' MULTILINESTRING    (  (  1     1  ,     5     1  )  ,     (  2     4  ,     4     4  )  )  '  )  ,    ST _ GeometryFromText (  ' MULTILINESTRING    (  (  3     4  ,     6     4  )  ,     (  5     0  ,     5     4  )  )  '  )  )  )  \"  ,    VARCHAR ,     \" MULTILINESTRING    (  (  5     0  ,     5     1  )  ,     (  1     1  ,     5     1  )  ,     (  5     1  ,     5     4  )  ,     (  2     4  ,     3     4  )  ,     (  4     4  ,     5     4  )  ,     (  5     4  ,     6     4  )  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ SymDifference ( ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     1     4  ,     4     4  ,     4     1  )  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  2     2  ,     2     5  ,     5     5  ,     5     2  )  )  '  )  )  )  \"  ,    VARCHAR ,     \" MULTIPOLYGON    (  (  (  1     1  ,     4     1  ,     4     2  ,     2     2  ,     2     4  ,     1     4  ,     1     1  )  )  ,     (  (  4     2  ,     5     2  ,     5     5  ,     2     5  ,     2     4  ,     4     4  ,     4     2  )  )  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( ST _ SymDifference ( ST _ GeometryFromText (  ' MULTIPOLYGON    (  (  (  0     0     ,     0     2  ,     2     2  ,     2     0  )  )  ,     (  (  2     2  ,     2     4  ,     4     4  ,     4     2  )  )  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  0     0  ,     0     3  ,     3     3  ,     3     0  )  )  '  )  )  )  \"  ,    VARCHAR ,     \" MULTIPOLYGON    (  (  (  2     0  ,     3     0  ,     3     2  ,     2     2  ,     2     0  )  )  ,     (  (  0     2  ,     2     2  ,     2     3  ,     0     3  ,     0     2  )  )  ,     (  (  3     2  ,     4     2  ,     4     4  ,     2     4  ,     2     3  ,     3     3  ,     3     2  )  )  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testSTSymmetricDifference"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ Touches ( ST _ GeometryFromText (  ' POINT    (  5  0     1  0  0  )  '  )  ,    ST _ GeometryFromText (  ' POINT    (  1  5  0     1  5  0  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Touches ( ST _ GeometryFromText (  ' MULTIPOINT    (  5  0     1  0  0  ,     5  0     2  0  0  )  '  )  ,    ST _ GeometryFromText (  ' POINT    (  5  0     1  0  0  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Touches ( ST _ GeometryFromText (  ' LINESTRING    (  5  0     1  0  0  ,     5  0     2  0  0  )  '  )  ,    ST _ GeometryFromText (  ' LINESTRING    (  2  0     1  5  0  ,     1  0  0     1  5  0  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Touches ( ST _ GeometryFromText (  ' MULTILINESTRING    (  (  1     1  ,     5     1  )  ,     (  2     4  ,     4     4  )  )  '  )  ,    ST _ GeometryFromText (  ' MULTILINESTRING    (  (  3     4  ,     6     4  )  ,     (  5     0  ,     5     4  )  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Touches ( ST _ GeometryFromText (  ' POINT    (  1     2  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     1     4  ,     4     4  ,     4     1  )  )  '  )  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" ST _ Touches ( ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     1     3  ,     3     3  ,     3     1  )  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  4     4  ,     4     5  ,     5     5  ,     5     4  )  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Touches ( ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     1     3  ,     3     3  ,     3     1  )  )  '  )  ,    ST _ GeometryFromText (  ' LINESTRING    (  0     0  ,     1     1  )  '  )  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" ST _ Touches ( ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     1     3  ,     3     3  ,     3     1  )  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  3     3  ,     3     5  ,     5     5  ,     5     3  )  )  '  )  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" ST _ Touches ( ST _ GeometryFromText (  ' MULTIPOLYGON    (  (  (  1     1  ,     1     3  ,     3     3  ,     3     1  )  )  ,     (  (  0     0  ,     0     2  ,     2     2  ,     2     0  )  )  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  0     1  ,     3     1  ,     3     3  ,     0     3  )  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "}", "METHOD_END"], "methodName": ["testSTTouches"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ Within ( ST _ GeometryFromText (  ' POINT    (  5  0     1  0  0  )  '  )  ,    ST _ GeometryFromText (  ' POINT    (  1  5  0     1  5  0  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Within ( ST _ GeometryFromText (  ' POINT    (  5  0     1  0  0  )  '  )  ,    ST _ GeometryFromText (  ' MULTIPOINT    (  5  0     1  0  0  ,     5  0     2  0  0  )  '  )  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" ST _ Within ( ST _ GeometryFromText (  ' LINESTRING    (  5  0     1  0  0  ,     5  0     2  0  0  )  '  )  ,    ST _ GeometryFromText (  ' LINESTRING    (  5  0     5  0  ,     5  0     2  5  0  )  '  )  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" ST _ Within ( ST _ GeometryFromText (  ' MULTILINESTRING    (  (  1     1  ,     5     1  )  ,     (  2     4  ,     4     4  )  )  '  )  ,    ST _ GeometryFromText (  ' MULTILINESTRING    (  (  3     4  ,     6     4  )  ,     (  5     0  ,     5     4  )  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Within ( ST _ GeometryFromText (  ' POINT    (  3     2  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     1     4  ,     4     4  ,     4     1  )  )  '  )  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" ST _ Within ( ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     1     3  ,     3     3  ,     3     1  )  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  0     0  ,     0     4  ,     4     4  ,     4     0  )  )  '  )  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" ST _ Within ( ST _ GeometryFromText (  ' LINESTRING    (  1     1  ,     3     3  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  0     0  ,     0     4  ,     4     4  ,     4     0  )  )  '  )  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" ST _ Within ( ST _ GeometryFromText (  ' MULTIPOLYGON    (  (  (  1     1  ,     1     3  ,     3     3  ,     3     1  )  )  ,     (  (  0     0  ,     0     2  ,     2     2  ,     2     0  )  )  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  0     1  ,     3     1  ,     3     3  ,     0     3  )  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Within ( ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     1     5  ,     5     5  ,     5     1  )  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  0     0  ,     0     4  ,     4     4  ,     4     0  )  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "}", "METHOD_END"], "methodName": ["testSTWithin"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ Y ( ST _ GeometryFromText (  ' POINT   EMPTY '  )  )  \"  ,    DOUBLE ,    null )  ;", "assertFunction (  \" ST _ X ( ST _ GeometryFromText (  ' POINT    (  1     2  )  '  )  )  \"  ,    DOUBLE ,     1  .  0  )  ;", "assertFunction (  \" ST _ Y ( ST _ GeometryFromText (  ' POINT    (  1     2  )  '  )  )  \"  ,    DOUBLE ,     2  .  0  )  ;", "assertInvalidFunction (  \" ST _ Y ( ST _ GeometryFromText (  ' POLYGON    (  (  2     0  ,     2     1  ,     3     1  )  )  '  )  )  \"  ,     \" ST _ Y   only   applies   to   POINT .    Input   type   is :    POLYGON \"  )  ;", "}", "METHOD_END"], "methodName": ["testSTXY"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ AsText ( simplify _ geometry ( ST _ GeometryFromText (  ' POLYGON    (  (  1     0  ,     2     1  ,     3     1  ,     3     1  ,     4     1  ,     1     0  )  )  '  )  ,     1  .  5  )  )  \"  ,    VARCHAR ,     \" POLYGON    (  (  1     0  ,     4     1  ,     2     1  ,     1     0  )  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( simplify _ geometry ( ST _ GeometryFromText (  ' POLYGON    (  (  1     0  ,     1     1  ,     2     1  ,     2     3  ,     3     3  ,     3     1  ,     4     1  ,     4     0  ,     1     0  )  )  '  )  ,     1  .  0  )  )  \"  ,    VARCHAR ,     \" POLYGON    (  (  1     0  ,     4     0  ,     3     3  ,     2     3  ,     1     0  )  )  \"  )  ;", "assertFunction (  \" ST _ AsText ( simplify _ geometry ( ST _ GeometryFromText (  ' POLYGON    (  (  1     0  ,     1     1  ,     2     1  ,     2     3  ,     3     3  ,     3     1  ,     4     1  ,     4     0  ,     1     0  )  )  '  )  ,     0  .  5  )  )  \"  ,    VARCHAR ,     \" POLYGON    (  (  1     0  ,     4     0  ,     4     1  ,     3     1  ,     3     3  ,     2     3  ,     2     1  ,     1     1  ,     1     0  )  )  \"  )  ;", "assertInvalidFunction (  (  \" ST _ AsText ( simplify _ geometry ( ST _ GeometryFromText (  '  \"     +     (  \" POLYGON    (  (  1     0  ,     1     1  ,     2     1  ,     2     3  ,     3     3  ,     3     1  ,     4     1  ,     4     0  ,     1     0  )  )  \"     +     \"  '  )  ,     -  0  .  5  )  )  \"  )  )  ,     \" distanceTolerance   is   negative \"  )  ;", "}", "METHOD_END"], "methodName": ["testSimplifyGeometry"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "assertFunction (  \" ST _ Contains ( ST _ GeometryFromText ( null )  ,    ST _ GeometryFromText (  ' POINT    (  2  5     2  5  )  '  )  )  \"  ,    BOOLEAN ,    null )  ;", "assertFunction (  \" ST _ Contains ( ST _ GeometryFromText (  ' POINT    (  2  0     2  0  )  '  )  ,    ST _ GeometryFromText (  ' POINT    (  2  5     2  5  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Contains ( ST _ GeometryFromText (  ' MULTIPOINT    (  2  0     2  0  ,     2  5     2  5  )  '  )  ,    ST _ GeometryFromText (  ' POINT    (  2  5     2  5  )  '  )  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" ST _ Contains ( ST _ GeometryFromText (  ' LINESTRING    (  2  0     2  0  ,     3  0     3  0  )  '  )  ,    ST _ GeometryFromText (  ' POINT    (  2  5     2  5  )  '  )  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" ST _ Contains ( ST _ GeometryFromText (  ' LINESTRING    (  2  0     2  0  ,     3  0     3  0  )  '  )  ,    ST _ GeometryFromText (  ' MULTIPOINT    (  2  5     2  5  ,     3  1     3  1  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Contains ( ST _ GeometryFromText (  ' LINESTRING    (  2  0     2  0  ,     3  0     3  0  )  '  )  ,    ST _ GeometryFromText (  ' LINESTRING    (  2  5     2  5  ,     2  7     2  7  )  '  )  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" ST _ Contains ( ST _ GeometryFromText (  ' MULTILINESTRING    (  (  1     1  ,     5     1  )  ,     (  2     4  ,     4     4  )  )  '  )  ,    ST _ GeometryFromText (  ' MULTILINESTRING    (  (  3     4  ,     4     4  )  ,     (  2     1  ,     6     1  )  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Contains ( ST _ GeometryFromText (  ' POLYGON    (  (  0     0  ,     0     4  ,     4     4  ,     4     0  )  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  1     1  ,     1     2  ,     2     2  ,     2     1  )  )  '  )  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" ST _ Contains ( ST _ GeometryFromText (  ' POLYGON    (  (  0     0  ,     0     4  ,     4     4  ,     4     0  )  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  -  1     -  1  ,     -  1     2  ,     2     2  ,     2     -  1  )  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Contains ( ST _ GeometryFromText (  ' MULTIPOLYGON    (  (  (  0     0     ,     0     2  ,     2     2  ,     2     0  )  )  ,     (  (  2     2  ,     2     4  ,     4     4  ,     4     2  )  )  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  2     2  ,     2     3  ,     3     3  ,     3     2  )  )  '  )  )  \"  ,    BOOLEAN ,    true )  ;", "assertFunction (  \" ST _ Contains ( ST _ GeometryFromText (  ' LINESTRING    (  2  0     2  0  ,     3  0     3  0  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  0     0  ,     0     4  ,     4     4  ,     4     0  )  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Contains ( ST _ GeometryFromText (  ' LINESTRING   EMPTY '  )  ,    ST _ GeometryFromText (  ' POLYGON    (  (  0     0  ,     0     4  ,     4     4  ,     4     0  )  )  '  )  )  \"  ,    BOOLEAN ,    false )  ;", "assertFunction (  \" ST _ Contains ( ST _ GeometryFromText (  ' LINESTRING    (  2  0     2  0  ,     3  0     3  0  )  '  )  ,    ST _ GeometryFromText (  ' POLYGON   EMPTY '  )  )  \"  ,    BOOLEAN ,    false )  ;", "}", "METHOD_END"], "methodName": ["testStContains"], "fileName": "com.facebook.presto.plugin.geospatial.TestGeoFunctions"}, {"methodBody": ["METHOD_START", "{", "DriverContext   driverContext    =    taskContext . addPipelineContext (  0  ,    true ,    true )  . addDriverContext (  )  ;", "PagesSpatialIndexFactory   pagesSpatialIndexFactory    =    buildIndex ( driverContext ,     (    build ,    probe ,    r )     -  >    build . contains ( probe )  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    buildPages )  ;", "OperatorFactory   joinOperatorFactory    =    new   operator . SpatialJoinOperator . SpatialJoinOperatorFactory (  2  ,    new   PlanNodeId (  \" test \"  )  ,    joinType ,    probePages . getTypes (  )  ,    Ints . asList (  1  )  ,     0  ,    pagesSpatialIndexFactory )  ;", "assertOperatorEquals ( joinOperatorFactory ,    driverContext ,    probePages . build (  )  ,    expected )  ;", "}", "METHOD_END"], "methodName": ["assertSpatialJoin"], "fileName": "com.facebook.presto.plugin.geospatial.TestSpatialJoinOperator"}, {"methodBody": ["METHOD_START", "{", "Optional < JoinFilterFunctionCompiler . JoinFilterFunctionFactory >    filterFunctionFactory    =    filterFunction . map (  (    function )     -  >     (    session ,    addresses ,    channels )     -  >    new   StandardJoinFilterFunction ( function ,    addresses ,    channels )  )  ;", "ValuesOperator . ValuesOperatorFactory   valuesOperatorFactory    =    new   ValuesOperator . ValuesOperatorFactory (  0  ,    new   PlanNodeId (  \" test \"  )  ,    buildPages . getTypes (  )  ,    buildPages . build (  )  )  ;", "SpatialIndexBuilderOperatorFactory   buildOperatorFactory    =    new   SpatialIndexBuilderOperatorFactory (  1  ,    new   PlanNodeId (  \" test \"  )  ,    buildPages . getTypes (  )  ,    Ints . asList (  1  )  ,     0  ,    radiusChannel ,    spatialRelationshipTest ,    filterFunctionFactory ,     1  0  0  0  0  ,    new   TestingFactory ( false )  )  ;", "Driver   driver    =    Driver . createDriver ( driverContext ,    valuesOperatorFactory . createOperator ( driverContext )  ,    buildOperatorFactory . createOperator ( driverContext )  )  ;", "PagesSpatialIndexFactory   pagesSpatialIndexFactory    =    buildOperatorFactory . getPagesSpatialIndexFactory (  )  ;", "ListenableFuture < PagesSpatialIndex >    pagesSpatialIndex    =    pagesSpatialIndexFactory . createPagesSpatialIndex (  )  ;", "while    (  !  ( pagesSpatialIndex . isDone (  )  )  )     {", "driver . process (  )  ;", "}", ". runDriverInThread ( executor ,    driver )  ;", "return   pagesSpatialIndexFactory ;", "}", "METHOD_END"], "methodName": ["buildIndex"], "fileName": "com.facebook.presto.plugin.geospatial.TestSpatialJoinOperator"}, {"methodBody": ["METHOD_START", "{", "return   TestingTaskContext . createTaskContext ( executor ,    scheduledExecutor ,    SessionTestUtils . TEST _ SESSION )  ;", "}", "METHOD_END"], "methodName": ["createTaskContext"], "fileName": "com.facebook.presto.plugin.geospatial.TestSpatialJoinOperator"}, {"methodBody": ["METHOD_START", "{", "executor . execute (  (  )     -  >     {", "if    (  !  ( driver . isFinished (  )  )  )     {", "try    {", "driver . process (  )  ;", "}    catch    ( PrestoException   e )     {", "driver . getDriverContext (  )  . failed ( e )  ;", "throw   e ;", "}", ". runDriverInThread ( executor ,    driver )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["runDriverInThread"], "fileName": "com.facebook.presto.plugin.geospatial.TestSpatialJoinOperator"}, {"methodBody": ["METHOD_START", "{", "executor    =    new   ThreadPoolExecutor (  0  ,    Integer . MAX _ VALUE ,     6  0 L ,    TimeUnit . SECONDS ,    new   SynchronousQueue < Runnable >  (  )  ,    Threads . daemonThreadsNamed (  \" test - executor -  % s \"  )  ,    new   ThreadPoolExecutor . DiscardPolicy (  )  )  ;", "scheduledExecutor    =    Executors . newScheduledThreadPool (  2  ,    Threads . daemonThreadsNamed (  \" test - scheduledExecutor -  % s \"  )  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.plugin.geospatial.TestSpatialJoinOperator"}, {"methodBody": ["METHOD_START", "{", "executor . shutdownNow (  )  ;", "scheduledExecutor . shutdownNow (  )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.plugin.geospatial.TestSpatialJoinOperator"}, {"methodBody": ["METHOD_START", "{", "TaskContext   taskContext    =    createTaskContext (  )  ;", "DriverContext   driverContext    =    taskContext . addPipelineContext (  0  ,    true ,    true )  . addDriverContext (  )  ;", "RowPagesBuilder   buildPages    =    RowPagesBuilder . rowPagesBuilder ( ImmutableList . of ( GeometryType . GEOMETRY ,    VARCHAR ,    DOUBLE )  )  . row ( GeoFunctions . stPoint (  0  ,     0  )  ,     \"  0  _  0  \"  ,     1  .  5  )  . row ( null ,     \" null \"  ,     1  .  5  )  . row ( GeoFunctions . stPoint (  1  ,     0  )  ,     \"  1  _  0  \"  ,     1  .  5  )  . pageBreak (  )  . row ( GeoFunctions . stPoint (  3  ,     0  )  ,     \"  3  _  0  \"  ,     1  .  5  )  . pageBreak (  )  . row ( GeoFunctions . stPoint (  1  0  ,     0  )  ,     \"  1  0  _  0  \"  ,     1  .  5  )  ;", "PagesSpatialIndexFactory   pagesSpatialIndexFactory    =    buildIndex ( driverContext ,     (    build ,    probe ,    r )     -  >     ( build . distance ( probe )  )     <  =     ( r . getAsDouble (  )  )  ,    Optional . of (  2  )  ,    Optional . empty (  )  ,    buildPages )  ;", "RowPagesBuilder   probePages    =    RowPagesBuilder . rowPagesBuilder ( ImmutableList . of ( GeometryType . GEOMETRY ,    VARCHAR )  )  . row ( GeoFunctions . stPoint (  0  ,     1  )  ,     \"  0  _  1  \"  )  . row ( null ,     \" null \"  )  . row ( GeoFunctions . stPoint (  1  ,     1  )  ,     \"  1  _  1  \"  )  . pageBreak (  )  . row ( GeoFunctions . stPoint (  3  ,     1  )  ,     \"  3  _  1  \"  )  . pageBreak (  )  . row ( GeoFunctions . stPoint (  1  0  ,     1  )  ,     \"  1  0  _  1  \"  )  ;", "OperatorFactory   joinOperatorFactory    =    new   operator . SpatialJoinOperator . SpatialJoinOperatorFactory (  2  ,    new   PlanNodeId (  \" test \"  )  ,    INNER ,    probePages . getTypes (  )  ,    Ints . asList (  1  )  ,     0  ,    pagesSpatialIndexFactory )  ;", "MaterializedResult   expected    =    resultBuilder ( taskContext . getSession (  )  ,    ImmutableList . of ( VARCHAR ,    VARCHAR )  )  . row (  \"  0  _  1  \"  ,     \"  0  _  0  \"  )  . row (  \"  0  _  1  \"  ,     \"  1  _  0  \"  )  . row (  \"  1  _  1  \"  ,     \"  0  _  0  \"  )  . row (  \"  1  _  1  \"  ,     \"  1  _  0  \"  )  . row (  \"  3  _  1  \"  ,     \"  3  _  0  \"  )  . row (  \"  1  0  _  1  \"  ,     \"  1  0  _  0  \"  )  . build (  )  ;", "assertOperatorEquals ( joinOperatorFactory ,    driverContext ,    probePages . build (  )  ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testDistanceQuery"], "fileName": "com.facebook.presto.plugin.geospatial.TestSpatialJoinOperator"}, {"methodBody": ["METHOD_START", "{", "TaskContext   taskContext    =    createTaskContext (  )  ;", "RowPagesBuilder   buildPages    =    RowPagesBuilder . rowPagesBuilder ( ImmutableList . of ( GeometryType . GEOMETRY ,    VARCHAR )  )  ;", "RowPagesBuilder   probePages    =    RowPagesBuilder . rowPagesBuilder ( ImmutableList . of ( GeometryType . GEOMETRY ,    VARCHAR )  )  . row (  . POINT _ X ,     \" x \"  )  . row ( null ,     \" null \"  )  . row (  . POINT _ Y ,     \" y \"  )  . pageBreak (  )  . row (  . POINT _ Z ,     \" z \"  )  . pageBreak (  )  . row (  . POINT _ W ,     \" w \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( taskContext . getSession (  )  ,    ImmutableList . of ( VARCHAR ,    VARCHAR )  )  . build (  )  ;", "assertSpatialJoin ( taskContext ,    INNER ,    buildPages ,    probePages ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testEmptyBuild"], "fileName": "com.facebook.presto.plugin.geospatial.TestSpatialJoinOperator"}, {"methodBody": ["METHOD_START", "{", "TaskContext   taskContext    =    createTaskContext (  )  ;", "RowPagesBuilder   buildPages    =    RowPagesBuilder . rowPagesBuilder ( ImmutableList . of ( GeometryType . GEOMETRY ,    VARCHAR )  )  ;", "RowPagesBuilder   probePages    =    RowPagesBuilder . rowPagesBuilder ( ImmutableList . of ( GeometryType . GEOMETRY ,    VARCHAR )  )  . row (  . POINT _ X ,     \" x \"  )  . row ( null ,     \" null \"  )  . row (  . POINT _ Y ,     \" y \"  )  . pageBreak (  )  . row (  . POINT _ Z ,     \" z \"  )  . pageBreak (  )  . row (  . POINT _ W ,     \" w \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( taskContext . getSession (  )  ,    ImmutableList . of ( VARCHAR ,    VARCHAR )  )  . row (  \" x \"  ,    null )  . row (  \" null \"  ,    null )  . row (  \" y \"  ,    null )  . row (  \" z \"  ,    null )  . row (  \" w \"  ,    null )  . build (  )  ;", "assertSpatialJoin ( taskContext ,    LEFT ,    buildPages ,    probePages ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testEmptyBuildLeftJoin"], "fileName": "com.facebook.presto.plugin.geospatial.TestSpatialJoinOperator"}, {"methodBody": ["METHOD_START", "{", "TaskContext   taskContext    =    createTaskContext (  )  ;", "RowPagesBuilder   buildPages    =    RowPagesBuilder . rowPagesBuilder ( ImmutableList . of ( GeometryType . GEOMETRY ,    VARCHAR )  )  . row (  . POLYGON _ A ,     \" A \"  )  . row ( null ,     \" null \"  )  . pageBreak (  )  . row (  . POLYGON _ B ,     \" B \"  )  ;", "RowPagesBuilder   probePages    =    RowPagesBuilder . rowPagesBuilder ( ImmutableList . of ( GeometryType . GEOMETRY ,    VARCHAR )  )  ;", "MaterializedResult   expected    =    resultBuilder ( taskContext . getSession (  )  ,    ImmutableList . of ( VARCHAR ,    VARCHAR )  )  . build (  )  ;", "assertSpatialJoin ( taskContext ,    INNER ,    buildPages ,    probePages ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testEmptyProbe"], "fileName": "com.facebook.presto.plugin.geospatial.TestSpatialJoinOperator"}, {"methodBody": ["METHOD_START", "{", "TaskContext   taskContext    =    createTaskContext (  )  ;", "RowPagesBuilder   buildPages    =    RowPagesBuilder . rowPagesBuilder ( ImmutableList . of ( GeometryType . GEOMETRY ,    VARCHAR )  )  . row (  . POLYGON _ A ,     \" A \"  )  . row ( null ,     \" null \"  )  . pageBreak (  )  . row (  . POLYGON _ B ,     \" B \"  )  ;", "RowPagesBuilder   probePages    =    RowPagesBuilder . rowPagesBuilder ( ImmutableList . of ( GeometryType . GEOMETRY ,    VARCHAR )  )  . row (  . POINT _ X ,     \" x \"  )  . row ( null ,     \" null \"  )  . row (  . POINT _ Y ,     \" y \"  )  . pageBreak (  )  . row (  . POINT _ Z ,     \" z \"  )  . pageBreak (  )  . row (  . POINT _ W ,     \" w \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( taskContext . getSession (  )  ,    ImmutableList . of ( VARCHAR ,    VARCHAR )  )  . row (  \" x \"  ,     \" A \"  )  . row (  \" y \"  ,     \" A \"  )  . row (  \" y \"  ,     \" B \"  )  . row (  \" z \"  ,     \" B \"  )  . build (  )  ;", "assertSpatialJoin ( taskContext ,    INNER ,    buildPages ,    probePages ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testSpatialJoin"], "fileName": "com.facebook.presto.plugin.geospatial.TestSpatialJoinOperator"}, {"methodBody": ["METHOD_START", "{", "TaskContext   taskContext    =    createTaskContext (  )  ;", "RowPagesBuilder   buildPages    =    RowPagesBuilder . rowPagesBuilder ( ImmutableList . of ( GeometryType . GEOMETRY ,    VARCHAR )  )  . row (  . POLYGON _ A ,     \" A \"  )  . row ( null ,     \" null \"  )  . pageBreak (  )  . row (  . POLYGON _ B ,     \" B \"  )  ;", "RowPagesBuilder   probePages    =    RowPagesBuilder . rowPagesBuilder ( ImmutableList . of ( GeometryType . GEOMETRY ,    VARCHAR )  )  . row (  . POINT _ X ,     \" x \"  )  . row ( null ,     \" null \"  )  . row (  . POINT _ Y ,     \" y \"  )  . pageBreak (  )  . row (  . POINT _ Z ,     \" z \"  )  . pageBreak (  )  . row (  . POINT _ W ,     \" w \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( taskContext . getSession (  )  ,    ImmutableList . of ( VARCHAR ,    VARCHAR )  )  . row (  \" x \"  ,     \" A \"  )  . row (  \" null \"  ,    null )  . row (  \" y \"  ,     \" A \"  )  . row (  \" y \"  ,     \" B \"  )  . row (  \" z \"  ,     \" B \"  )  . row (  \" w \"  ,    null )  . build (  )  ;", "assertSpatialJoin ( taskContext ,    LEFT ,    buildPages ,    probePages ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testSpatialLeftJoin"], "fileName": "com.facebook.presto.plugin.geospatial.TestSpatialJoinOperator"}, {"methodBody": ["METHOD_START", "{", "TaskContext   taskContext    =    createTaskContext (  )  ;", "DriverContext   driverContext    =    taskContext . addPipelineContext (  0  ,    true ,    true )  . addDriverContext (  )  ;", "AtomicInteger   filterFunctionCalls    =    new   AtomicInteger (  )  ;", "InternalJoinFilterFunction   filterFunction    =    new    . TestInternalJoinFilterFunction (  (    leftPosition ,    leftPage ,    rightPosition ,    rightPage )     -  >     {", "filterFunctionCalls . incrementAndGet (  )  ;", "driverContext . getYieldSignal (  )  . forceYieldForTesting (  )  ;", "return   true ;", "}  )  ;", "RowPagesBuilder   buildPages    =    RowPagesBuilder . rowPagesBuilder ( ImmutableList . of ( GeometryType . GEOMETRY ,    VARCHAR )  )  . row (  . POLYGON _ A ,     \" A \"  )  . pageBreak (  )  . row (  . POLYGON _ B ,     \" B \"  )  ;", "PagesSpatialIndexFactory   pagesSpatialIndexFactory    =    buildIndex ( driverContext ,     (    build ,    probe ,    r )     -  >    build . contains ( probe )  ,    Optional . empty (  )  ,    Optional . of ( filterFunction )  ,    buildPages )  ;", "RowPagesBuilder   probePages    =    RowPagesBuilder . rowPagesBuilder ( ImmutableList . of ( GeometryType . GEOMETRY ,    VARCHAR )  )  ;", "for    ( int   i    =     0  ;    i    <     1  0  ;    i +  +  )     {", "probePages . row ( GeoFunctions . stPoint (  (  1     +     (  0  .  1     *    i )  )  ,     (  1     +     (  0  .  1     *    i )  )  )  ,     (  \" x \"     +    i )  )  ;", "}", "for    ( int   i    =     0  ;    i    <     1  0  ;    i +  +  )     {", "probePages . row ( GeoFunctions . stPoint (  (  4  .  5     +     (  0  .  0  1     *    i )  )  ,     (  4  .  5     +     (  0  .  0  1     *    i )  )  )  ,     (  \" y \"     +    i )  )  ;", "}", "for    ( int   i    =     0  ;    i    <     1  0  ;    i +  +  )     {", "probePages . row ( GeoFunctions . stPoint (  (  6     +     (  0  .  1     *    i )  )  ,     (  6     +     (  0  .  1     *    i )  )  )  ,     (  \" z \"     +    i )  )  ;", "}", "List < Page >    probeInput    =    probePages . build (  )  ;", "OperatorFactory   joinOperatorFactory    =    new   com . facebook . presto . operator . SpatialJoinOperator . SpatialJoinOperatorFactory (  2  ,    new   PlanNodeId (  \" test \"  )  ,    INNER ,    probePages . getTypes (  )  ,    Ints . asList (  1  )  ,     0  ,    pagesSpatialIndexFactory )  ;", "Operator   operator    =    joinOperatorFactory . createOperator ( driverContext )  ;", "assertTrue ( operator . needsInput (  )  )  ;", "operator . addInput ( probeInput . get (  0  )  )  ;", "operator . finish (  )  ;", "for    ( int   i    =     0  ;    i    <     4  0  ;    i +  +  )     {", "driverContext . getYieldSignal (  )  . setWithDelay (  (  5     *     ( TimeUnit . SECONDS . toNanos (  1  )  )  )  ,    driverContext . getYieldExecutor (  )  )  ;", "assertNull ( operator . getOutput (  )  )  ;", "assertEquals ( filterFunctionCalls . get (  )  ,     ( i    +     1  )  ,     \" Expected   join   to   stop   processing    ( yield )    after   calling   filter   function   once \"  )  ;", "driverContext . getYieldSignal (  )  . reset (  )  ;", "}", "driverContext . getYieldSignal (  )  . setWithDelay (  (  5     *     ( TimeUnit . SECONDS . toNanos (  1  )  )  )  ,    driverContext . getYieldExecutor (  )  )  ;", "Page   output    =    operator . getOutput (  )  ;", "assertNotNull ( output )  ;", "assertEquals ( output . getPositionCount (  )  ,     4  0  )  ;", "}", "METHOD_END"], "methodName": ["testYield"], "fileName": "com.facebook.presto.plugin.geospatial.TestSpatialJoinOperator"}, {"methodBody": ["METHOD_START", "{", "LocalQueryRunner   queryRunner    =    new   LocalQueryRunner ( testSessionBuilder (  )  . build (  )  )  ;", "queryRunner . installP ( new   GeoP (  )  )  ;", "return   queryRunner ;", "}", "METHOD_END"], "methodName": ["createQueryRunner"], "fileName": "com.facebook.presto.plugin.geospatial.TestSpatialJoinPlanning"}, {"methodBody": ["METHOD_START", "{", "assertPlan (  (  (  (  (  (  (  \" SELECT   b . name ,    a . name    \"     +     \" FROM    \"  )     +     ( TestSpatialJoinPlanning . POINTS _ SQL )  )     +     \"  ,     \"  )     +     ( TestSpatialJoinPlanning . POLYGONS _ SQL )  )     +     \"     \"  )     +     \" WHERE   a . name    =    b . name   AND   ST _ Contains ( ST _ GeometryFromText ( wkt )  ,    ST _ Point ( lng ,    lat )  )  \"  )  ,    anyTree ( join ( INNER ,    ImmutableList . of ( equiJoinClause (  \" name _ a \"  ,     \" name _ b \"  )  )  ,    Optional . of (  \" ST _ Contains ( ST _ GeometryFromText ( cast ( wkt   as   varchar )  )  ,    ST _ Point ( lng ,    lat )  )  \"  )  ,    anyTree ( values ( ImmutableMap . of (  \" lng \"  ,     0  ,     \" lat \"  ,     1  ,     \" name _ a \"  ,     2  )  )  )  ,    anyTree ( values ( ImmutableMap . of (  \" wkt \"  ,     0  ,     \" name _ b \"  ,     1  )  )  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testContainsWithEquiClause"], "fileName": "com.facebook.presto.plugin.geospatial.TestSpatialJoinPlanning"}, {"methodBody": ["METHOD_START", "{", "assertPlan (  (  \" SELECT   b . name ,    a . name    \"     +     (  \" FROM    ( VALUES    (  2  .  1  ,     2  .  1  ,     ' x '  )  )    AS   a    ( lng ,    lat ,    name )  ,     ( VALUES    (  2  .  1  ,     2  .  1  ,     ' x '  )  )    AS   b    ( lng ,    lat ,    name )     \"     +     \" WHERE   ST _ Distance ( ST _ Point ( a . lng ,    a . lat )  ,    ST _ Point ( b . lng ,    b . lat )  )     <  =     3  .  1  \"  )  )  ,    anyTree ( spatialJoin (  \" st _ distance ( st _ point _ a ,    st _ point _ b )     <  =    radius \"  ,    project ( ImmutableMap . of (  \" st _ point _ a \"  ,    expression (  \" ST _ Point ( cast ( a _ lng   as   double )  ,    cast ( a _ lat   as   double )  )  \"  )  )  ,    anyTree ( values ( ImmutableMap . of (  \" a _ lng \"  ,     0  ,     \" a _ lat \"  ,     1  )  )  )  )  ,    anyTree ( project ( ImmutableMap . of (  \" st _ point _ b \"  ,    expression (  \" ST _ Point ( cast ( b _ lng   as   double )  ,    cast ( b _ lat   as   double )  )  \"  )  ,     \" radius \"  ,    expression (  \"  3  .  1 e 0  \"  )  )  ,    anyTree ( values ( ImmutableMap . of (  \" b _ lng \"  ,     0  ,     \" b _ lat \"  ,     1  )  )  )  )  )  )  )  )  ;", "assertPlan (  (  \" SELECT   b . name ,    a . name    \"     +     (  \" FROM    ( VALUES    (  2  .  1  ,     2  .  1  ,     ' x '  )  )    AS   a    ( lng ,    lat ,    name )  ,     ( VALUES    (  2  .  1  ,     2  .  1  ,     ' x '  )  )    AS   b    ( lng ,    lat ,    name )     \"     +     \" WHERE   ST _ Distance ( ST _ Point ( a . lng ,    a . lat )  ,    ST _ Point ( b . lng ,    b . lat )  )     <  =     3  0  0     /     (  1  1  1  3  2  1     *    cos ( radians ( b . lat )  )  )  \"  )  )  ,    anyTree ( spatialJoin (  \" st _ distance ( st _ point _ a ,    st _ point _ b )     <  =    radius \"  ,    project ( ImmutableMap . of (  \" st _ point _ a \"  ,    expression (  \" ST _ Point ( cast ( a _ lng   as   double )  ,    cast ( a _ lat   as   double )  )  \"  )  )  ,    anyTree ( values ( ImmutableMap . of (  \" a _ lng \"  ,     0  ,     \" a _ lat \"  ,     1  )  )  )  )  ,    anyTree ( project ( ImmutableMap . of (  \" st _ point _ b \"  ,    expression (  \" ST _ Point ( cast ( b _ lng   as   double )  ,    cast ( b _ lat   as   double )  )  \"  )  ,     \" radius \"  ,    expression (  \"  3 e 2     /     (  1  1  1  .  3  2  1 e 3     *    cos ( radians ( cast ( b _ lat   as   double )  )  )  )  \"  )  )  ,    anyTree ( values ( ImmutableMap . of (  \" b _ lng \"  ,     0  ,     \" b _ lat \"  ,     1  )  )  )  )  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testDistanceQuery"], "fileName": "com.facebook.presto.plugin.geospatial.TestSpatialJoinPlanning"}, {"methodBody": ["METHOD_START", "{", "assertPlan (  (  \" SELECT   b . name ,    a . name    \"     +     (  \" FROM    ( VALUES    (  ' POLYGON    (  (  3  0     1  0  ,     4  0     4  0  ,     2  0     4  0  ,     1  0     2  0  ,     3  0     1  0  )  )  '  ,     ' a '  )  )    AS   a    ( wkt ,    name )  ,     ( VALUES    (  ' POLYGON    (  (  3  0     1  0  ,     4  0     4  0  ,     2  0     4  0  ,     1  0     2  0  ,     3  0     1  0  )  )  '  ,     ' a '  )  )    AS   b    ( wkt ,    name )     \"     +     \" WHERE   a . name    =    b . name   AND   ST _ Intersects ( ST _ GeometryFromText ( a . wkt )  ,    ST _ GeometryFromText ( b . wkt )  )  \"  )  )  ,    anyTree ( join ( INNER ,    ImmutableList . of ( equiJoinClause (  \" name _ a \"  ,     \" name _ b \"  )  )  ,    Optional . of (  \" ST _ Intersects ( ST _ GeometryFromText ( cast ( wkt _ a   as   varchar )  )  ,    ST _ GeometryFromText ( cast ( wkt _ B   as   varchar )  )  )  \"  )  ,    anyTree ( values ( ImmutableMap . of (  \" wkt _ a \"  ,     0  ,     \" name _ a \"  ,     1  )  )  )  ,    anyTree ( values ( ImmutableMap . of (  \" wkt _ b \"  ,     0  ,     \" name _ b \"  ,     1  )  )  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testIntersectsWithEquiClause"], "fileName": "com.facebook.presto.plugin.geospatial.TestSpatialJoinPlanning"}, {"methodBody": ["METHOD_START", "{", "assertPlan (  (  (  (  (  (  (  \" SELECT   b . name ,    a . name    \"     +     \" FROM    \"  )     +     ( TestSpatialJoinPlanning . POINTS _ SQL )  )     +     \"    LEFT   JOIN    \"  )     +     ( TestSpatialJoinPlanning . POLYGONS _ SQL )  )     +     \"     \"  )     +     \" ON   ST _ Contains ( ST _ GeometryFromText ( wkt )  ,    ST _ Point ( lng ,    lat )  )  \"  )  ,    anyTree ( spatialLeftJoin (  \" st _ contains ( st _ geometryfromtext ,    st _ point )  \"  ,    project ( ImmutableMap . of (  \" st _ point \"  ,    expression (  \" ST _ Point ( lng ,    lat )  \"  )  )  ,    anyTree ( values ( ImmutableMap . of (  \" lng \"  ,     0  ,     \" lat \"  ,     1  )  )  )  )  ,    anyTree ( project ( ImmutableMap . of (  \" st _ geometryfromtext \"  ,    expression (  \" ST _ GeometryFromText ( cast ( wkt   as   varchar )  )  \"  )  )  ,    anyTree ( values ( ImmutableMap . of (  \" wkt \"  ,     0  )  )  )  )  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testLeftJoin"], "fileName": "com.facebook.presto.plugin.geospatial.TestSpatialJoinPlanning"}, {"methodBody": ["METHOD_START", "{", "assertPlan (  (  (  (  (  (  (  \" SELECT   b . name ,    a . name    \"     +     \" FROM    \"  )     +     ( TestSpatialJoinPlanning . POINTS _ SQL )  )     +     \"  ,     \"  )     +     ( TestSpatialJoinPlanning . POLYGONS _ SQL )  )     +     \"     \"  )     +     \" WHERE   NOT   ST _ Contains ( ST _ GeometryFromText ( wkt )  ,    ST _ Point ( lng ,    lat )  )  \"  )  ,    anyTree ( filter (  \" NOT   ST _ Contains ( ST _ GeometryFromText ( cast ( wkt   as   varchar )  )  ,    ST _ Point ( lng ,    lat )  )  \"  ,    join ( INNER ,    Collections . emptyList (  )  ,    anyTree ( values ( ImmutableMap . of (  \" lng \"  ,     0  ,     \" lat \"  ,     1  )  )  )  ,    values ( ImmutableMap . of (  \" wkt \"  ,     0  )  )  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testNotContains"], "fileName": "com.facebook.presto.plugin.geospatial.TestSpatialJoinPlanning"}, {"methodBody": ["METHOD_START", "{", "assertPlan (  (  \" SELECT   b . name ,    a . name    \"     +     (  \" FROM    ( VALUES    (  ' POLYGON    (  (  3  0     1  0  ,     4  0     4  0  ,     2  0     4  0  ,     1  0     2  0  ,     3  0     1  0  )  )  '  ,     ' a '  )  )    AS   a    ( wkt ,    name )  ,     ( VALUES    (  ' POLYGON    (  (  3  0     1  0  ,     4  0     4  0  ,     2  0     4  0  ,     1  0     2  0  ,     3  0     1  0  )  )  '  ,     ' a '  )  )    AS   b    ( wkt ,    name )     \"     +     \" WHERE   NOT   ST _ Intersects ( ST _ GeometryFromText ( a . wkt )  ,    ST _ GeometryFromText ( b . wkt )  )  \"  )  )  ,    anyTree ( filter (  \" NOT   ST _ Intersects ( ST _ GeometryFromText ( cast ( wkt _ a   as   varchar )  )  ,    ST _ GeometryFromText ( cast ( wkt _ b   as   varchar )  )  )  \"  ,    join ( INNER ,    Collections . emptyList (  )  ,    anyTree ( values ( ImmutableMap . of (  \" wkt _ a \"  ,     0  ,     \" name _ a \"  ,     1  )  )  )  ,    values ( ImmutableMap . of (  \" wkt _ b \"  ,     0  ,     \" name _ b \"  ,     1  )  )  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testNotIntersects"], "fileName": "com.facebook.presto.plugin.geospatial.TestSpatialJoinPlanning"}, {"methodBody": ["METHOD_START", "{", "assertPlan (  (  (  (  (  (  (  \" SELECT   b . name ,    a . name    \"     +     \" FROM    \"  )     +     ( TestSpatialJoinPlanning . POINTS _ SQL )  )     +     \"  ,     \"  )     +     ( TestSpatialJoinPlanning . POLYGONS _ SQL )  )     +     \"     \"  )     +     \" WHERE   ST _ Contains ( ST _ GeometryFromText ( wkt )  ,    ST _ Point ( lng ,    lat )  )  \"  )  ,    anyTree ( spatialJoin (  \" st _ contains ( st _ geometryfromtext ,    st _ point )  \"  ,    project ( ImmutableMap . of (  \" st _ point \"  ,    expression (  \" ST _ Point ( lng ,    lat )  \"  )  )  ,    anyTree ( values ( ImmutableMap . of (  \" lng \"  ,     0  ,     \" lat \"  ,     1  )  )  )  )  ,    anyTree ( project ( ImmutableMap . of (  \" st _ geometryfromtext \"  ,    expression (  \" ST _ GeometryFromText ( cast ( wkt   as   varchar )  )  \"  )  )  ,    anyTree ( values ( ImmutableMap . of (  \" wkt \"  ,     0  )  )  )  )  )  )  )  )  ;", "assertPlan (  (  (  (  (  (  (  \" SELECT    *     \"     +     \" FROM    ( SELECT   length ( name )  ,     *    FROM    \"  )     +     ( TestSpatialJoinPlanning . POINTS _ SQL )  )     +     \"  )  ,     ( SELECT   length ( name )  ,     *    FROM    \"  )     +     ( TestSpatialJoinPlanning . POLYGONS _ SQL )  )     +     \"  )     \"  )     +     \" WHERE   ST _ Contains ( ST _ GeometryFromText ( wkt )  ,    ST _ Point ( lng ,    lat )  )  \"  )  ,    anyTree ( spatialJoin (  \" st _ contains ( st _ geometryfromtext ,    st _ point )  \"  ,    project ( ImmutableMap . of (  \" st _ point \"  ,    expression (  \" ST _ Point ( lng ,    lat )  \"  )  ,     \" length \"  ,    expression (  \" length ( name )  \"  )  )  ,    anyTree ( values ( ImmutableMap . of (  \" lng \"  ,     0  ,     \" lat \"  ,     1  ,     \" name \"  ,     2  )  )  )  )  ,    anyTree ( project ( ImmutableMap . of (  \" st _ geometryfromtext \"  ,    expression (  \" ST _ GeometryFromText ( cast ( wkt   as   varchar )  )  \"  )  ,     \" length _  2  \"  ,    expression (  \" length ( name _  2  )  \"  )  )  ,    anyTree ( values ( ImmutableMap . of (  \" wkt \"  ,     0  ,     \" name _  2  \"  ,     1  )  )  )  )  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSpatialJoinContains"], "fileName": "com.facebook.presto.plugin.geospatial.TestSpatialJoinPlanning"}, {"methodBody": ["METHOD_START", "{", "assertPlan (  (  \" SELECT   b . name ,    a . name    \"     +     (  \" FROM    ( VALUES    (  ' POLYGON    (  (  3  0     1  0  ,     4  0     4  0  ,     2  0     4  0  ,     1  0     2  0  ,     3  0     1  0  )  )  '  ,     ' a '  )  )    AS   a    ( wkt ,    name )  ,     ( VALUES    (  ' POLYGON    (  (  3  0     1  0  ,     4  0     4  0  ,     2  0     4  0  ,     1  0     2  0  ,     3  0     1  0  )  )  '  ,     ' a '  )  )    AS   b    ( wkt ,    name )     \"     +     \" WHERE   ST _ Intersects ( ST _ GeometryFromText ( a . wkt )  ,    ST _ GeometryFromText ( b . wkt )  )  \"  )  )  ,    anyTree ( spatialJoin (  \" st _ intersects ( geometry _ a ,    geometry _ b )  \"  ,    project ( ImmutableMap . of (  \" geometry _ a \"  ,    expression (  \" ST _ GeometryFromText ( cast ( wkt _ a   as   varchar )  )  \"  )  )  ,    anyTree ( values ( ImmutableMap . of (  \" wkt _ a \"  ,     0  )  )  )  )  ,    anyTree ( project ( ImmutableMap . of (  \" geometry _ b \"  ,    expression (  \" ST _ GeometryFromText ( cast ( wkt _ b   as   varchar )  )  \"  )  )  ,    anyTree ( values ( ImmutableMap . of (  \" wkt _ b \"  ,     0  )  )  )  )  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSpatialJoinIntersects"], "fileName": "com.facebook.presto.plugin.geospatial.TestSpatialJoinPlanning"}, {"methodBody": ["METHOD_START", "{", "DistributedQueryRunner   queryRunner    =    new   DistributedQueryRunner ( testSessionBuilder (  )  . build (  )  ,     4  )  ;", "queryRunner . installP ( new   GeoP (  )  )  ;", "return   queryRunner ;", "}", "METHOD_END"], "methodName": ["createQueryRunner"], "fileName": "com.facebook.presto.plugin.geospatial.TestSpatialJoins"}, {"methodBody": ["METHOD_START", "{", "return   String . format (  (  \" SELECT    % s    +    n    *     % f ,     % s    +    n    *     % f ,     '  % s '     |  |    CAST    ( n   AS   VARCHAR )  ,    n    \"     +     (  \" FROM    ( SELECT   sequence (  1  ,     % s )    as   numbers )     \"     +     \" CROSS   JOIN   UNNEST    ( numbers )    AS   t ( n )  \"  )  )  ,    minX ,     (  ( maxX    -    minX )     /    pointCount )  ,    minY ,     (  ( maxY    -    minY )     /    pointCount )  ,    prefix ,    pointCount )  ;", "}", "METHOD_END"], "methodName": ["generatePointsSql"], "fileName": "com.facebook.presto.plugin.geospatial.TestSpatialJoins"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   a . name ,    b . name    \"     +     (  (  \" FROM    ( VALUES    (  0  ,     0  ,     '  0  _  0  '  )  ,     (  1  ,     0  ,     '  1  _  0  '  )  ,     (  3  ,     0  ,     '  3  _  0  '  )  ,     (  1  0  ,     0  ,     '  1  0  _  0  '  )  )    as   a    ( x ,    y ,    name )  ,     \"     +     \"  ( VALUES    (  0  ,     1  ,     '  0  _  1  '  )  ,     (  1  ,     1  ,     '  1  _  1  '  )  ,     (  3  ,     1  ,     '  3  _  1  '  )  ,     (  1  0  ,     1  ,     '  1  0  _  1  '  )  )    as   b    ( x ,    y ,    name )     \"  )     +     \" WHERE   ST _ Distance ( ST _ Point ( a . x ,    a . y )  ,    ST _ Point ( b . x ,    b . y )  )     <  =     1  .  5  \"  )  )  ,     \" SELECT    *    FROM   VALUES    (  '  0  _  0  '  ,     '  0  _  1  '  )  ,     (  '  0  _  0  '  ,     '  1  _  1  '  )  ,     (  '  1  _  0  '  ,     '  0  _  1  '  )  ,     (  '  1  _  0  '  ,     '  1  _  1  '  )  ,     (  '  3  _  0  '  ,     '  3  _  1  '  )  ,     (  '  1  0  _  0  '  ,     '  1  0  _  1  '  )  \"  )  ;", "assertQuery (  (  \" SELECT   a . name ,    b . name    \"     +     (  (  \" FROM    ( VALUES    (  0  ,     0  ,     '  0  _  0  '  )  ,     (  1  ,     0  ,     '  1  _  0  '  )  ,     (  3  ,     0  ,     '  3  _  0  '  )  ,     (  1  0  ,     0  ,     '  1  0  _  0  '  )  )    as   a    ( x ,    y ,    name )  ,     \"     +     \"  ( VALUES    (  0  ,     1  ,     '  0  _  1  '  )  ,     (  1  ,     1  ,     '  1  _  1  '  )  ,     (  3  ,     1  ,     '  3  _  1  '  )  ,     (  1  0  ,     1  ,     '  1  0  _  1  '  )  )    as   b    ( x ,    y ,    name )     \"  )     +     \" WHERE   ST _ Distance ( ST _ Point ( b . x ,    b . y )  ,    ST _ Point ( a . x ,    a . y )  )     <  =     1  .  5  \"  )  )  ,     \" SELECT    *    FROM   VALUES    (  '  0  _  0  '  ,     '  0  _  1  '  )  ,     (  '  0  _  0  '  ,     '  1  _  1  '  )  ,     (  '  1  _  0  '  ,     '  0  _  1  '  )  ,     (  '  1  _  0  '  ,     '  1  _  1  '  )  ,     (  '  3  _  0  '  ,     '  3  _  1  '  )  ,     (  '  1  0  _  0  '  ,     '  1  0  _  1  '  )  \"  )  ;", "assertQuery (  (  \" SELECT   a . name ,    b . name    \"     +     (  (  \" FROM    ( VALUES    (  0  ,     0  ,     '  0  _  0  '  )  ,     (  1  ,     0  ,     '  1  _  0  '  )  ,     (  3  ,     0  ,     '  3  _  0  '  )  ,     (  1  0  ,     0  ,     '  1  0  _  0  '  )  )    as   a    ( x ,    y ,    name )  ,     \"     +     \"  ( VALUES    (  0  ,     1  ,     '  0  _  1  '  )  ,     (  1  ,     1  ,     '  1  _  1  '  )  ,     (  3  ,     1  ,     '  3  _  1  '  )  ,     (  1  0  ,     1  ,     '  1  0  _  1  '  )  )    as   b    ( x ,    y ,    name )     \"  )     +     \" WHERE   ST _ Distance ( ST _ Point ( a . x ,    a . y )  ,    ST _ Point ( b . x ,    b . y )  )     <  =    sqrt ( b . x    *    b . x    +    b . y    *    b . y )  \"  )  )  ,     \" SELECT    *    FROM   VALUES    (  '  0  _  0  '  ,     '  0  _  1  '  )  ,     (  '  0  _  0  '  ,     '  1  _  1  '  )  ,     (  '  0  _  0  '  ,     '  3  _  1  '  )  ,     (  '  0  _  0  '  ,     '  1  0  _  1  '  )  ,     (  '  1  _  0  '  ,     '  1  _  1  '  )  ,     (  '  1  _  0  '  ,     '  3  _  1  '  )  ,     (  '  1  _  0  '  ,     '  1  0  _  1  '  )  ,     (  '  3  _  0  '  ,     '  3  _  1  '  )  ,     (  '  3  _  0  '  ,     '  1  0  _  1  '  )  ,     (  '  1  0  _  0  '  ,     '  1  0  _  1  '  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testBroadcastDistanceQuery"], "fileName": "com.facebook.presto.plugin.geospatial.TestSpatialJoins"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  (  (  (  (  (  \" SELECT   b . name ,    a . name    \"     +     \" FROM    (  \"  )     +     ( TestSpatialJoins . POINTS _ SQL )  )     +     \"  )    AS   a    ( latitude ,    longitude ,    name ,    id )  ,     (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   b    ( wkt ,    name ,    id )     \"  )     +     \" WHERE   ST _ Contains ( ST _ GeometryFromText ( wkt )  ,    ST _ Point ( longitude ,    latitude )  )  \"  )  ,     \" SELECT    *    FROM    ( VALUES    (  ' a '  ,     ' x '  )  ,     (  ' b '  ,     ' y '  )  ,     (  ' c '  ,     ' y '  )  ,     (  ' d '  ,     ' z '  )  )  \"  )  ;", "assertQuery (  (  (  (  (  (  (  \" SELECT   b . name ,    a . name    \"     +     \" FROM    (  \"  )     +     ( TestSpatialJoins . POINTS _ SQL )  )     +     \"  )    AS   a    ( latitude ,    longitude ,    name ,    id )    JOIN    (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   b    ( wkt ,    name ,    id )     \"  )     +     \" ON   ST _ Contains ( ST _ GeometryFromText ( wkt )  ,    ST _ Point ( longitude ,    latitude )  )  \"  )  ,     \" SELECT    *    FROM    ( VALUES    (  ' a '  ,     ' x '  )  ,     (  ' b '  ,     ' y '  )  ,     (  ' c '  ,     ' y '  )  ,     (  ' d '  ,     ' z '  )  )  \"  )  ;", "assertQuery (  (  (  (  (  (  (  \" SELECT   b . name ,    a . name    \"     +     \" FROM    (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   a    ( wkt ,    name ,    id )  ,     (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   b    ( wkt ,    name ,    id )     \"  )     +     \" WHERE   ST _ Contains ( ST _ GeometryFromText ( b . wkt )  ,    ST _ GeometryFromText ( a . wkt )  )  \"  )  ,     \" SELECT    *    FROM    ( VALUES    (  ' a '  ,     ' a '  )  ,     (  ' b '  ,     ' b '  )  ,     (  ' c '  ,     ' c '  )  ,     (  ' d '  ,     ' d '  )  ,     (  ' c '  ,     ' b '  )  )  \"  )  ;", "assertQuery (  (  (  (  (  (  (  \" SELECT   b . name ,    a . name    \"     +     \" FROM    (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   a    ( wkt ,    name ,    id )    JOIN    (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   b    ( wkt ,    name ,    id )     \"  )     +     \" ON   ST _ Contains ( ST _ GeometryFromText ( b . wkt )  ,    ST _ GeometryFromText ( a . wkt )  )  \"  )  ,     \" SELECT    *    FROM    ( VALUES    (  ' a '  ,     ' a '  )  ,     (  ' b '  ,     ' b '  )  ,     (  ' c '  ,     ' c '  )  ,     (  ' d '  ,     ' d '  )  ,     (  ' c '  ,     ' b '  )  )  \"  )  ;", "assertQuery (  (  (  (  (  (  (  \" SELECT   b . name ,    a . name    \"     +     \" FROM    (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   b    ( wkt ,    name ,    id )  ,     (  \"  )     +     ( TestSpatialJoins . POINTS _ SQL )  )     +     \"  )    AS   a    ( latitude ,    longitude ,    name ,    id )     \"  )     +     \" WHERE   ST _ Contains ( ST _ GeometryFromText ( wkt )  ,    ST _ Point ( longitude ,    latitude )  )  \"  )  ,     \" SELECT    *    FROM    ( VALUES    (  ' a '  ,     ' x '  )  ,     (  ' b '  ,     ' y '  )  ,     (  ' c '  ,     ' y '  )  ,     (  ' d '  ,     ' z '  )  )  \"  )  ;", "assertQuery (  (  (  (  (  (  (  \" SELECT   b . name ,    a . name    \"     +     \" FROM    (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   a    ( wkt ,    name ,    id )  ,     (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   b    ( wkt ,    name ,    id )     \"  )     +     \" WHERE   ST _ Contains ( ST _ GeometryFromText ( a . wkt )  ,    ST _ GeometryFromText ( b . wkt )  )  \"  )  ,     \" SELECT    *    FROM    ( VALUES    (  ' a '  ,     ' a '  )  ,     (  ' b '  ,     ' b '  )  ,     (  ' c '  ,     ' c '  )  ,     (  ' d '  ,     ' d '  )  ,     (  ' b '  ,     ' c '  )  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testBroadcastSpatialJoinContains"], "fileName": "com.facebook.presto.plugin.geospatial.TestSpatialJoins"}, {"methodBody": ["METHOD_START", "{", "assertQueryReturnsEmptyResult (  (  (  (  (  (  (  \" SELECT   b . name ,    a . name    \"     +     \" FROM    (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   a    ( wkt ,    name ,    id )  ,     (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   b    ( wkt ,    name ,    id )     \"  )     +     \" WHERE   b . name    =     ' invalid '    AND   ST _ Contains ( ST _ GeometryFromText ( b . wkt )  ,    ST _ GeometryFromText ( a . wkt )  )  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testBroadcastSpatialJoinContainsWithEmptyBuildSide"], "fileName": "com.facebook.presto.plugin.geospatial.TestSpatialJoins"}, {"methodBody": ["METHOD_START", "{", "assertQueryReturnsEmptyResult (  (  (  (  (  (  (  \" SELECT   b . name ,    a . name    \"     +     \" FROM    (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   a    ( wkt ,    name ,    id )  ,     (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   b    ( wkt ,    name ,    id )     \"  )     +     \" WHERE   a . name    =     ' invalid '    AND   ST _ Contains ( ST _ GeometryFromText ( b . wkt )  ,    ST _ GeometryFromText ( a . wkt )  )  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testBroadcastSpatialJoinContainsWithEmptyProbeSide"], "fileName": "com.facebook.presto.plugin.geospatial.TestSpatialJoins"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  (  (  (  (  (  \" SELECT   b . name ,    a . name    \"     +     \" FROM    (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   a    ( wkt ,    name ,    id )  ,     (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   b    ( wkt ,    name ,    id )     \"  )     +     \" WHERE   ST _ Contains ( ST _ GeometryFromText ( b . wkt )  ,    ST _ GeometryFromText ( a . wkt )  )    AND   a . name    !  =    b . name \"  )  ,     \" SELECT    *    FROM    ( VALUES    (  ' c '  ,     ' b '  )  )  \"  )  ;", "assertQuery (  (  (  (  (  (  (  \" SELECT   b . name ,    a . name    \"     +     \" FROM    (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   a    ( wkt ,    name ,    id )    JOIN    (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   b    ( wkt ,    name ,    id )     \"  )     +     \" ON   ST _ Contains ( ST _ GeometryFromText ( b . wkt )  ,    ST _ GeometryFromText ( a . wkt )  )    AND   a . name    !  =    b . name \"  )  ,     \" SELECT    *    FROM    ( VALUES    (  ' c '  ,     ' b '  )  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testBroadcastSpatialJoinContainsWithExtraConditions"], "fileName": "com.facebook.presto.plugin.geospatial.TestSpatialJoins"}, {"methodBody": ["METHOD_START", "{", "String   pointsX    =    TestSpatialJoins . generatePointsSql (  0  ,     0  ,     1  ,     1  ,     1  0  0  0  0  ,     \" x \"  )  ;", "String   pointsY    =    TestSpatialJoins . generatePointsSql (  2  ,     2  ,     2  .  5  ,     2  .  5  ,     1  0  0  0  0  ,     \" y \"  )  ;", "assertQuery (  (  (  (  (  (  (  (  (  \" SELECT   b . name ,    a . name    \"     +     \" FROM    (  \"  )     +    pointsX )     +     \"    UNION   ALL    \"  )     +    pointsY )     +     \"  )    AS   a    ( latitude ,    longitude ,    name ,    id )  ,     (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   b    ( wkt ,    name ,    id )     \"  )     +     \" WHERE   ST _ Contains ( ST _ GeometryFromText ( wkt )  ,    ST _ Point ( longitude ,    latitude )  )    AND   stateful _ sleeping _ sum (  0  .  0  0  1  ,     1  0  0  ,    a . id ,    b . id )     <  =     3  \"  )  ,     \" SELECT    *    FROM    ( VALUES    (  ' a '  ,     ' x 1  '  )  ,     (  ' a '  ,     ' x 2  '  )  ,     (  ' b '  ,     ' y 1  '  )  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testBroadcastSpatialJoinContainsWithStatefulExtraCondition"], "fileName": "com.facebook.presto.plugin.geospatial.TestSpatialJoins"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  (  (  (  (  (  \" SELECT   a . name ,    b . name    \"     +     \" FROM    (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   a    ( wkt ,    name ,    id )  ,     (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   b    ( wkt ,    name ,    id )     \"  )     +     \" WHERE   ST _ Intersects ( ST _ GeometryFromText ( b . wkt )  ,    ST _ GeometryFromText ( a . wkt )  )  \"  )  ,     (  \" SELECT    *    FROM   VALUES    (  ' a '  ,     ' a '  )  ,     (  ' b '  ,     ' b '  )  ,     (  ' c '  ,     ' c '  )  ,     (  ' d '  ,     ' d '  )  ,     \"     +     \"  (  ' a '  ,     ' c '  )  ,     (  ' c '  ,     ' a '  )  ,     (  ' c '  ,     ' b '  )  ,     (  ' b '  ,     ' c '  )  \"  )  )  ;", "assertQuery (  (  (  (  (  (  (  \" SELECT   a . name ,    b . name    \"     +     \" FROM    (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   a    ( wkt ,    name ,    id )    JOIN    (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   b    ( wkt ,    name ,    id )     \"  )     +     \" ON   ST _ Intersects ( ST _ GeometryFromText ( b . wkt )  ,    ST _ GeometryFromText ( a . wkt )  )  \"  )  ,     (  \" SELECT    *    FROM   VALUES    (  ' a '  ,     ' a '  )  ,     (  ' b '  ,     ' b '  )  ,     (  ' c '  ,     ' c '  )  ,     (  ' d '  ,     ' d '  )  ,     \"     +     \"  (  ' a '  ,     ' c '  )  ,     (  ' c '  ,     ' a '  )  ,     (  ' c '  ,     ' b '  )  ,     (  ' b '  ,     ' c '  )  \"  )  )  ;", "assertQuery (  (  (  (  (  (  (  \" SELECT   a . name ,    b . name    \"     +     \" FROM    (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   a    ( wkt ,    name ,    id )  ,     (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   b    ( wkt ,    name ,    id )     \"  )     +     \" WHERE   ST _ Intersects ( ST _ GeometryFromText ( a . wkt )  ,    ST _ GeometryFromText ( b . wkt )  )  \"  )  ,     (  \" SELECT    *    FROM   VALUES    (  ' a '  ,     ' a '  )  ,     (  ' b '  ,     ' b '  )  ,     (  ' c '  ,     ' c '  )  ,     (  ' d '  ,     ' d '  )  ,     \"     +     \"  (  ' a '  ,     ' c '  )  ,     (  ' c '  ,     ' a '  )  ,     (  ' c '  ,     ' b '  )  ,     (  ' b '  ,     ' c '  )  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testBroadcastSpatialJoinIntersects"], "fileName": "com.facebook.presto.plugin.geospatial.TestSpatialJoins"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  (  (  (  (  (  (  \" SELECT   a . name ,    b . name    \"     +     \" FROM    (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   a    ( wkt ,    name ,    id )  ,     (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   b    ( wkt ,    name ,    id )     \"  )     +     \" WHERE   ST _ Intersects ( ST _ GeometryFromText ( b . wkt )  ,    ST _ GeometryFromText ( a . wkt )  )     \"  )     +     \"          AND   a . name    !  =    b . name \"  )  ,     \" SELECT    *    FROM   VALUES    (  ' a '  ,     ' c '  )  ,     (  ' c '  ,     ' a '  )  ,     (  ' c '  ,     ' b '  )  ,     (  ' b '  ,     ' c '  )  \"  )  ;", "assertQuery (  (  (  (  (  (  (  (  \" SELECT   a . name ,    b . name    \"     +     \" FROM    (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   a    ( wkt ,    name ,    id )    JOIN    (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   b    ( wkt ,    name ,    id )     \"  )     +     \" ON   ST _ Intersects ( ST _ GeometryFromText ( b . wkt )  ,    ST _ GeometryFromText ( a . wkt )  )     \"  )     +     \"          AND   a . name    !  =    b . name \"  )  ,     \" SELECT    *    FROM   VALUES    (  ' a '  ,     ' c '  )  ,     (  ' c '  ,     ' a '  )  ,     (  ' c '  ,     ' b '  )  ,     (  ' b '  ,     ' c '  )  \"  )  ;", "assertQuery (  (  (  (  (  (  (  (  \" SELECT   a . name ,    b . name    \"     +     \" FROM    (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   a    ( wkt ,    name ,    id )  ,     (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   b    ( wkt ,    name ,    id )     \"  )     +     \" WHERE   ST _ Intersects ( ST _ GeometryFromText ( b . wkt )  ,    ST _ GeometryFromText ( a . wkt )  )     \"  )     +     \"          AND   a . name    <    b . name \"  )  ,     \" SELECT    *    FROM   VALUES    (  ' a '  ,     ' c '  )  ,     (  ' b '  ,     ' c '  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testBroadcastSpatialJoinIntersectsWithExtraConditions"], "fileName": "com.facebook.presto.plugin.geospatial.TestSpatialJoins"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  (  (  (  (  (  \" SELECT   a . name ,    b . name    \"     +     \" FROM    (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   a    ( wkt ,    name ,    id )    LEFT   JOIN    (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   b    ( wkt ,    name ,    id )     \"  )     +     \" ON   ST _ Intersects ( ST _ GeometryFromText ( b . wkt )  ,    ST _ GeometryFromText ( a . wkt )  )  \"  )  ,     (  \" SELECT    *    FROM   VALUES    (  ' a '  ,     ' a '  )  ,     (  ' b '  ,     ' b '  )  ,     (  ' c '  ,     ' c '  )  ,     (  ' d '  ,     ' d '  )  ,     \"     +     \"  (  ' a '  ,     ' c '  )  ,     (  ' c '  ,     ' a '  )  ,     (  ' c '  ,     ' b '  )  ,     (  ' b '  ,     ' c '  )  ,     (  ' empty '  ,    null )  ,     (  ' null '  ,    null )  \"  )  )  ;", "assertQuery (  (  (  (  (  \" SELECT   a . name ,    b . name    \"     +     \" FROM    (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   a    ( wkt ,    name ,    id )    LEFT   JOIN    ( VALUES    ( null ,     ' null '  ,     1  )  )    AS   b    ( wkt ,    name ,    id )     \"  )     +     \" ON   ST _ Intersects ( ST _ GeometryFromText ( b . wkt )  ,    ST _ GeometryFromText ( a . wkt )  )  \"  )  ,     \" SELECT    *    FROM   VALUES    (  ' a '  ,    null )  ,     (  ' b '  ,    null )  ,     (  ' c '  ,    null )  ,     (  ' d '  ,    null )  ,     (  ' empty '  ,    null )  ,     (  ' null '  ,    null )  \"  )  ;", "assertQuery (  (  (  (  (  (  (  \" SELECT   a . name ,    b . name    \"     +     \" FROM    (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   a    ( wkt ,    name ,    id )    LEFT   JOIN    (  \"  )     +     ( TestSpatialJoins . POLYGONS _ SQL )  )     +     \"  )    AS   b    ( wkt ,    name ,    id )     \"  )     +     \" ON   a . name    >    b . name   AND   ST _ Intersects ( ST _ GeometryFromText ( b . wkt )  ,    ST _ GeometryFromText ( a . wkt )  )  \"  )  ,     \" SELECT    *    FROM   VALUES    (  ' a '  ,    null )  ,     (  ' b '  ,    null )  ,     (  ' c '  ,     ' a '  )  ,     (  ' c '  ,     ' b '  )  ,     (  ' d '  ,    null )  ,     (  ' empty '  ,    null )  ,     (  ' null '  ,    null )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testBroadcastSpatialLeftJoin"], "fileName": "com.facebook.presto.plugin.geospatial.TestSpatialJoins"}, {"methodBody": ["METHOD_START", "{", "return   tester (  )  . assertThat ( new   com . facebook . presto . sql . planner . iterative . rule . TransformSpatialPredicates . TransformSpatialPredicateToJoin ( tester (  )  . getMetadata (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["assertRuleApplication"], "fileName": "com.facebook.presto.plugin.geospatial.TestTransformSpatialPredicateToJoin"}, {"methodBody": ["METHOD_START", "{", "assertRuleApplication (  )  . on (  (    p )     -  >    p . filter ( PlanBuilder . expression (  \" ST _ Contains ( a ,    b )  \"  )  ,    p . join ( INNER ,    p . values ( p . symbol (  \" a \"  )  )  ,    p . values ( p . symbol (  \" b \"  )  )  )  )  )  . matches ( spatialJoin (  \" ST _ Contains ( a ,    b )  \"  ,    values ( ImmutableMap . of (  \" a \"  ,     0  )  )  ,    values ( ImmutableMap . of (  \" b \"  ,     0  )  )  )  )  ;", "assertRuleApplication (  )  . on (  (    p )     -  >    p . filter ( PlanBuilder . expression (  \" name _  1     !  =    name _  2    AND   ST _ Contains ( a ,    b )  \"  )  ,    p . join ( INNER ,    p . values ( p . symbol (  \" a \"  )  ,    p . symbol (  \" name _  1  \"  )  )  ,    p . values ( p . symbol (  \" b \"  )  ,    p . symbol (  \" name _  2  \"  )  )  )  )  )  . matches ( spatialJoin (  \" name _  1     !  =    name _  2    AND   ST _ Contains ( a ,    b )  \"  ,    values ( ImmutableMap . of (  \" a \"  ,     0  ,     \" name _  1  \"  ,     1  )  )  ,    values ( ImmutableMap . of (  \" b \"  ,     0  ,     \" name _  2  \"  ,     1  )  )  )  )  ;", "assertRuleApplication (  )  . on (  (    p )     -  >    p . filter ( PlanBuilder . expression (  \" ST _ Contains ( a 1  ,    b 1  )    AND   ST _ Contains ( a 2  ,    b 2  )  \"  )  ,    p . join ( INNER ,    p . values ( p . symbol (  \" a 1  \"  )  ,    p . symbol (  \" a 2  \"  )  )  ,    p . values ( p . symbol (  \" b 1  \"  )  ,    p . symbol (  \" b 2  \"  )  )  )  )  )  . matches ( spatialJoin (  \" ST _ Contains ( a 1  ,    b 1  )    AND   ST _ Contains ( a 2  ,    b 2  )  \"  ,    values ( ImmutableMap . of (  \" a 1  \"  ,     0  ,     \" a 2  \"  ,     1  )  )  ,    values ( ImmutableMap . of (  \" b 1  \"  ,     0  ,     \" b 2  \"  ,     1  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testConvertToSpatialJoin"], "fileName": "com.facebook.presto.plugin.geospatial.TestTransformSpatialPredicateToJoin"}, {"methodBody": ["METHOD_START", "{", "testSimpleDistanceQuery (  \" ST _ Distance ( a ,    b )     <  =    r \"  ,     \" ST _ Distance ( a ,    b )     <  =    r \"  )  ;", "testSimpleDistanceQuery (  \" ST _ Distance ( b ,    a )     <  =    r \"  ,     \" ST _ Distance ( b ,    a )     <  =    r \"  )  ;", "testSimpleDistanceQuery (  \" r    >  =    ST _ Distance ( a ,    b )  \"  ,     \" ST _ Distance ( a ,    b )     <  =    r \"  )  ;", "testSimpleDistanceQuery (  \" r    >  =    ST _ Distance ( b ,    a )  \"  ,     \" ST _ Distance ( b ,    a )     <  =    r \"  )  ;", "testSimpleDistanceQuery (  \" ST _ Distance ( a ,    b )     <    r \"  ,     \" ST _ Distance ( a ,    b )     <    r \"  )  ;", "testSimpleDistanceQuery (  \" ST _ Distance ( b ,    a )     <    r \"  ,     \" ST _ Distance ( b ,    a )     <    r \"  )  ;", "testSimpleDistanceQuery (  \" r    >    ST _ Distance ( a ,    b )  \"  ,     \" ST _ Distance ( a ,    b )     <    r \"  )  ;", "testSimpleDistanceQuery (  \" r    >    ST _ Distance ( b ,    a )  \"  ,     \" ST _ Distance ( b ,    a )     <    r \"  )  ;", "testSimpleDistanceQuery (  \" ST _ Distance ( a ,    b )     <  =    r   AND   name _ a    !  =    name _ b \"  ,     \" ST _ Distance ( a ,    b )     <  =    r   AND   name _ a    !  =    name _ b \"  )  ;", "testSimpleDistanceQuery (  \" r    >    ST _ Distance ( a ,    b )    AND   name _ a    !  =    name _ b \"  ,     \" ST _ Distance ( a ,    b )     <    r   AND   name _ a    !  =    name _ b \"  )  ;", "testRadiusExsionInDistanceQuery (  \" ST _ Distance ( a ,    b )     <  =    decimal    '  1  .  2  '  \"  ,     \" ST _ Distance ( a ,    b )     <  =    radius \"  ,     \" decimal    '  1  .  2  '  \"  )  ;", "testRadiusExsionInDistanceQuery (  \" ST _ Distance ( b ,    a )     <  =    decimal    '  1  .  2  '  \"  ,     \" ST _ Distance ( b ,    a )     <  =    radius \"  ,     \" decimal    '  1  .  2  '  \"  )  ;", "testRadiusExsionInDistanceQuery (  \" decimal    '  1  .  2  '     >  =    ST _ Distance ( a ,    b )  \"  ,     \" ST _ Distance ( a ,    b )     <  =    radius \"  ,     \" decimal    '  1  .  2  '  \"  )  ;", "testRadiusExsionInDistanceQuery (  \" decimal    '  1  .  2  '     >  =    ST _ Distance ( b ,    a )  \"  ,     \" ST _ Distance ( b ,    a )     <  =    radius \"  ,     \" decimal    '  1  .  2  '  \"  )  ;", "testRadiusExsionInDistanceQuery (  \" ST _ Distance ( a ,    b )     <    decimal    '  1  .  2  '  \"  ,     \" ST _ Distance ( a ,    b )     <    radius \"  ,     \" decimal    '  1  .  2  '  \"  )  ;", "testRadiusExsionInDistanceQuery (  \" ST _ Distance ( b ,    a )     <    decimal    '  1  .  2  '  \"  ,     \" ST _ Distance ( b ,    a )     <    radius \"  ,     \" decimal    '  1  .  2  '  \"  )  ;", "testRadiusExsionInDistanceQuery (  \" decimal    '  1  .  2  '     >    ST _ Distance ( a ,    b )  \"  ,     \" ST _ Distance ( a ,    b )     <    radius \"  ,     \" decimal    '  1  .  2  '  \"  )  ;", "testRadiusExsionInDistanceQuery (  \" decimal    '  1  .  2  '     >    ST _ Distance ( b ,    a )  \"  ,     \" ST _ Distance ( b ,    a )     <    radius \"  ,     \" decimal    '  1  .  2  '  \"  )  ;", "testRadiusExsionInDistanceQuery (  \" ST _ Distance ( a ,    b )     <  =    decimal    '  1  .  2  '    AND   name _ a    !  =    name _ b \"  ,     \" ST _ Distance ( a ,    b )     <  =    radius   AND   name _ a    !  =    name _ b \"  ,     \" decimal    '  1  .  2  '  \"  )  ;", "testRadiusExsionInDistanceQuery (  \" decimal    '  1  .  2  '     >    ST _ Distance ( a ,    b )    AND   name _ a    !  =    name _ b \"  ,     \" ST _ Distance ( a ,    b )     <    radius   AND   name _ a    !  =    name _ b \"  ,     \" decimal    '  1  .  2  '  \"  )  ;", "testRadiusExsionInDistanceQuery (  \" ST _ Distance ( a ,    b )     <  =     2     *    r \"  ,     \" ST _ Distance ( a ,    b )     <  =    radius \"  ,     \"  2     *    r \"  )  ;", "testRadiusExsionInDistanceQuery (  \" ST _ Distance ( b ,    a )     <  =     2     *    r \"  ,     \" ST _ Distance ( b ,    a )     <  =    radius \"  ,     \"  2     *    r \"  )  ;", "testRadiusExsionInDistanceQuery (  \"  2     *    r    >  =    ST _ Distance ( a ,    b )  \"  ,     \" ST _ Distance ( a ,    b )     <  =    radius \"  ,     \"  2     *    r \"  )  ;", "testRadiusExsionInDistanceQuery (  \"  2     *    r    >  =    ST _ Distance ( b ,    a )  \"  ,     \" ST _ Distance ( b ,    a )     <  =    radius \"  ,     \"  2     *    r \"  )  ;", "testRadiusExsionInDistanceQuery (  \" ST _ Distance ( a ,    b )     <     2     *    r \"  ,     \" ST _ Distance ( a ,    b )     <    radius \"  ,     \"  2     *    r \"  )  ;", "testRadiusExsionInDistanceQuery (  \" ST _ Distance ( b ,    a )     <     2     *    r \"  ,     \" ST _ Distance ( b ,    a )     <    radius \"  ,     \"  2     *    r \"  )  ;", "testRadiusExsionInDistanceQuery (  \"  2     *    r    >    ST _ Distance ( a ,    b )  \"  ,     \" ST _ Distance ( a ,    b )     <    radius \"  ,     \"  2     *    r \"  )  ;", "testRadiusExsionInDistanceQuery (  \"  2     *    r    >    ST _ Distance ( b ,    a )  \"  ,     \" ST _ Distance ( b ,    a )     <    radius \"  ,     \"  2     *    r \"  )  ;", "testRadiusExsionInDistanceQuery (  \" ST _ Distance ( a ,    b )     <  =     2     *    r   AND   name _ a    !  =    name _ b \"  ,     \" ST _ Distance ( a ,    b )     <  =    radius   AND   name _ a    !  =    name _ b \"  ,     \"  2     *    r \"  )  ;", "testRadiusExsionInDistanceQuery (  \"  2     *    r    >    ST _ Distance ( a ,    b )    AND   name _ a    !  =    name _ b \"  ,     \" ST _ Distance ( a ,    b )     <    radius   AND   name _ a    !  =    name _ b \"  ,     \"  2     *    r \"  )  ;", "testPointExsionsInDistanceQuery (  \" ST _ Distance ( ST _ Point ( lng _ a ,    lat _ a )  ,    ST _ Point ( lng _ b ,    lat _ b )  )     <  =     5  \"  ,     \" ST _ Distance ( point _ a ,    point _ b )     <  =    radius \"  ,     \"  5  \"  )  ;", "testPointExsionsInDistanceQuery (  \" ST _ Distance ( ST _ Point ( lng _ b ,    lat _ b )  ,    ST _ Point ( lng _ a ,    lat _ a )  )     <  =     5  \"  ,     \" ST _ Distance ( point _ b ,    point _ a )     <  =    radius \"  ,     \"  5  \"  )  ;", "testPointExsionsInDistanceQuery (  \"  5     >  =    ST _ Distance ( ST _ Point ( lng _ a ,    lat _ a )  ,    ST _ Point ( lng _ b ,    lat _ b )  )  \"  ,     \" ST _ Distance ( point _ a ,    point _ b )     <  =    radius \"  ,     \"  5  \"  )  ;", "testPointExsionsInDistanceQuery (  \"  5     >  =    ST _ Distance ( ST _ Point ( lng _ b ,    lat _ b )  ,    ST _ Point ( lng _ a ,    lat _ a )  )  \"  ,     \" ST _ Distance ( point _ b ,    point _ a )     <  =    radius \"  ,     \"  5  \"  )  ;", "testPointExsionsInDistanceQuery (  \" ST _ Distance ( ST _ Point ( lng _ a ,    lat _ a )  ,    ST _ Point ( lng _ b ,    lat _ b )  )     <     5  \"  ,     \" ST _ Distance ( point _ a ,    point _ b )     <    radius \"  ,     \"  5  \"  )  ;", "testPointExsionsInDistanceQuery (  \" ST _ Distance ( ST _ Point ( lng _ b ,    lat _ b )  ,    ST _ Point ( lng _ a ,    lat _ a )  )     <     5  \"  ,     \" ST _ Distance ( point _ b ,    point _ a )     <    radius \"  ,     \"  5  \"  )  ;", "testPointExsionsInDistanceQuery (  \"  5     >    ST _ Distance ( ST _ Point ( lng _ a ,    lat _ a )  ,    ST _ Point ( lng _ b ,    lat _ b )  )  \"  ,     \" ST _ Distance ( point _ a ,    point _ b )     <    radius \"  ,     \"  5  \"  )  ;", "testPointExsionsInDistanceQuery (  \"  5     >    ST _ Distance ( ST _ Point ( lng _ b ,    lat _ b )  ,    ST _ Point ( lng _ a ,    lat _ a )  )  \"  ,     \" ST _ Distance ( point _ b ,    point _ a )     <    radius \"  ,     \"  5  \"  )  ;", "testPointExsionsInDistanceQuery (  \" ST _ Distance ( ST _ Point ( lng _ a ,    lat _ a )  ,    ST _ Point ( lng _ b ,    lat _ b )  )     <  =     5    AND   name _ a    !  =    name _ b \"  ,     \" ST _ Distance ( point _ a ,    point _ b )     <  =    radius   AND   name _ a    !  =    name _ b \"  ,     \"  5  \"  )  ;", "testPointExsionsInDistanceQuery (  \"  5     >    ST _ Distance ( ST _ Point ( lng _ a ,    lat _ a )  ,    ST _ Point ( lng _ b ,    lat _ b )  )    AND   name _ a    !  =    name _ b \"  ,     \" ST _ Distance ( point _ a ,    point _ b )     <    radius   AND   name _ a    !  =    name _ b \"  ,     \"  5  \"  )  ;", "testPointAndRadiusExsionsInDistanceQuery (  \" ST _ Distance ( ST _ Point ( lng _ a ,    lat _ a )  ,    ST _ Point ( lng _ b ,    lat _ b )  )     <  =     5  0  0     /     (  1  1  1  0  0  0     *    cos ( lat _ b )  )  \"  ,     \" ST _ Distance ( point _ a ,    point _ b )     <  =    radius \"  ,     \"  5  0  0     /     (  1  1  1  0  0  0     *    cos ( lat _ b )  )  \"  )  ;", "testPointAndRadiusExsionsInDistanceQuery (  \" ST _ Distance ( ST _ Point ( lng _ b ,    lat _ b )  ,    ST _ Point ( lng _ a ,    lat _ a )  )     <  =     5  0  0     /     (  1  1  1  0  0  0     *    cos ( lat _ b )  )  \"  ,     \" ST _ Distance ( point _ b ,    point _ a )     <  =    radius \"  ,     \"  5  0  0     /     (  1  1  1  0  0  0     *    cos ( lat _ b )  )  \"  )  ;", "testPointAndRadiusExsionsInDistanceQuery (  \"  5  0  0     /     (  1  1  1  0  0  0     *    cos ( lat _ b )  )     >  =    ST _ Distance ( ST _ Point ( lng _ a ,    lat _ a )  ,    ST _ Point ( lng _ b ,    lat _ b )  )  \"  ,     \" ST _ Distance ( point _ a ,    point _ b )     <  =    radius \"  ,     \"  5  0  0     /     (  1  1  1  0  0  0     *    cos ( lat _ b )  )  \"  )  ;", "testPointAndRadiusExsionsInDistanceQuery (  \"  5  0  0     /     (  1  1  1  0  0  0     *    cos ( lat _ b )  )     >  =    ST _ Distance ( ST _ Point ( lng _ b ,    lat _ b )  ,    ST _ Point ( lng _ a ,    lat _ a )  )  \"  ,     \" ST _ Distance ( point _ b ,    point _ a )     <  =    radius \"  ,     \"  5  0  0     /     (  1  1  1  0  0  0     *    cos ( lat _ b )  )  \"  )  ;", "testPointAndRadiusExsionsInDistanceQuery (  \" ST _ Distance ( ST _ Point ( lng _ a ,    lat _ a )  ,    ST _ Point ( lng _ b ,    lat _ b )  )     <     5  0  0     /     (  1  1  1  0  0  0     *    cos ( lat _ b )  )  \"  ,     \" ST _ Distance ( point _ a ,    point _ b )     <    radius \"  ,     \"  5  0  0     /     (  1  1  1  0  0  0     *    cos ( lat _ b )  )  \"  )  ;", "testPointAndRadiusExsionsInDistanceQuery (  \" ST _ Distance ( ST _ Point ( lng _ b ,    lat _ b )  ,    ST _ Point ( lng _ a ,    lat _ a )  )     <     5  0  0     /     (  1  1  1  0  0  0     *    cos ( lat _ b )  )  \"  ,     \" ST _ Distance ( point _ b ,    point _ a )     <    radius \"  ,     \"  5  0  0     /     (  1  1  1  0  0  0     *    cos ( lat _ b )  )  \"  )  ;", "testPointAndRadiusExsionsInDistanceQuery (  \"  5  0  0     /     (  1  1  1  0  0  0     *    cos ( lat _ b )  )     >    ST _ Distance ( ST _ Point ( lng _ a ,    lat _ a )  ,    ST _ Point ( lng _ b ,    lat _ b )  )  \"  ,     \" ST _ Distance ( point _ a ,    point _ b )     <    radius \"  ,     \"  5  0  0     /     (  1  1  1  0  0  0     *    cos ( lat _ b )  )  \"  )  ;", "testPointAndRadiusExsionsInDistanceQuery (  \"  5  0  0     /     (  1  1  1  0  0  0     *    cos ( lat _ b )  )     >    ST _ Distance ( ST _ Point ( lng _ b ,    lat _ b )  ,    ST _ Point ( lng _ a ,    lat _ a )  )  \"  ,     \" ST _ Distance ( point _ b ,    point _ a )     <    radius \"  ,     \"  5  0  0     /     (  1  1  1  0  0  0     *    cos ( lat _ b )  )  \"  )  ;", "testPointAndRadiusExsionsInDistanceQuery (  \" ST _ Distance ( ST _ Point ( lng _ a ,    lat _ a )  ,    ST _ Point ( lng _ b ,    lat _ b )  )     <  =     5  0  0     /     (  1  1  1  0  0  0     *    cos ( lat _ b )  )    AND   name _ a    !  =    name _ b \"  ,     \" ST _ Distance ( point _ a ,    point _ b )     <  =    radius   AND   name _ a    !  =    name _ b \"  ,     \"  5  0  0     /     (  1  1  1  0  0  0     *    cos ( lat _ b )  )  \"  )  ;", "testPointAndRadiusExsionsInDistanceQuery (  \"  5  0  0     /     (  1  1  1  0  0  0     *    cos ( lat _ b )  )     >    ST _ Distance ( ST _ Point ( lng _ a ,    lat _ a )  ,    ST _ Point ( lng _ b ,    lat _ b )  )    AND   name _ a    !  =    name _ b \"  ,     \" ST _ Distance ( point _ a ,    point _ b )     <    radius   AND   name _ a    !  =    name _ b \"  ,     \"  5  0  0     /     (  1  1  1  0  0  0     *    cos ( lat _ b )  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testDistanceQueries"], "fileName": "com.facebook.presto.plugin.geospatial.TestTransformSpatialPredicateToJoin"}, {"methodBody": ["METHOD_START", "{", "assertRuleApplication (  )  . on (  (    p )     -  >    p . filter ( PlanBuilder . expression (  \" ST _ Contains ( ST _ GeometryFromText (  ' POLYGON    .  .  .  '  )  ,    b )  \"  )  ,    p . join ( INNER ,    p . values (  )  ,    p . values ( p . symbol (  \" b \"  )  )  )  )  )  . doesNotFire (  )  ;", "assertRuleApplication (  )  . on (  (    p )     -  >    p . filter ( PlanBuilder . expression (  \" ST _ Contains ( ST _ GeometryFromText ( wkt )  ,    point )    OR   name _  1     !  =    name _  2  \"  )  ,    p . join ( INNER ,    p . values ( p . symbol (  \" wkt \"  ,    VARCHAR )  ,    p . symbol (  \" name _  1  \"  )  )  ,    p . values ( p . symbol (  \" point \"  ,    GEOMETRY )  ,    p . symbol (  \" name _  2  \"  )  )  )  )  )  . doesNotFire (  )  ;", "assertRuleApplication (  )  . on (  (    p )     -  >    p . filter ( PlanBuilder . expression (  \" NOT   ST _ Contains ( ST _ GeometryFromText ( wkt )  ,    point )  \"  )  ,    p . join ( INNER ,    p . values ( p . symbol (  \" wkt \"  ,    VARCHAR )  ,    p . symbol (  \" name _  1  \"  )  )  ,    p . values ( p . symbol (  \" point \"  ,    GEOMETRY )  ,    p . symbol (  \" name _  2  \"  )  )  )  )  )  . doesNotFire (  )  ;", "assertRuleApplication (  )  . on (  (    p )     -  >    p . filter ( PlanBuilder . expression (  \" ST _ Distance ( a ,    b )     >     5  \"  )  ,    p . join ( INNER ,    p . values ( p . symbol (  \" a \"  ,    GEOMETRY )  )  ,    p . values ( p . symbol (  \" b \"  ,    GEOMETRY )  )  )  )  )  . doesNotFire (  )  ;", "}", "METHOD_END"], "methodName": ["testDoesNotFire"], "fileName": "com.facebook.presto.plugin.geospatial.TestTransformSpatialPredicateToJoin"}, {"methodBody": ["METHOD_START", "{", "assertRuleApplication (  )  . on (  (    p )     -  >    p . filter ( PlanBuilder . expression ( filter )  ,    p . join ( INNER ,    p . values ( p . symbol (  \" lat _ a \"  )  ,    p . symbol (  \" lng _ a \"  )  ,    p . symbol (  \" name _ a \"  )  )  ,    p . values ( p . symbol (  \" lat _ b \"  )  ,    p . symbol (  \" lng _ b \"  )  ,    p . symbol (  \" name _ b \"  )  )  )  )  )  . matches ( spatialJoin ( newFilter ,    project ( ImmutableMap . of (  \" point _ a \"  ,    expression (  \" ST _ Point ( lng _ a ,    lat _ a )  \"  )  )  ,    values ( ImmutableMap . of (  \" lat _ a \"  ,     0  ,     \" lng _ a \"  ,     1  ,     \" name _ a \"  ,     2  )  )  )  ,    project ( ImmutableMap . of (  \" point _ b \"  ,    expression (  \" ST _ Point ( lng _ b ,    lat _ b )  \"  )  )  ,    project ( ImmutableMap . of (  \" radius \"  ,    expression ( radiusExpression )  )  ,    values ( ImmutableMap . of (  \" lat _ b \"  ,     0  ,     \" lng _ b \"  ,     1  ,     \" name _ b \"  ,     2  )  )  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testPointAndRadiusExpressionsInDistanceQuery"], "fileName": "com.facebook.presto.plugin.geospatial.TestTransformSpatialPredicateToJoin"}, {"methodBody": ["METHOD_START", "{", "assertRuleApplication (  )  . on (  (    p )     -  >    p . filter ( PlanBuilder . expression ( filter )  ,    p . join ( INNER ,    p . values ( p . symbol (  \" lat _ a \"  )  ,    p . symbol (  \" lng _ a \"  )  ,    p . symbol (  \" name _ a \"  )  )  ,    p . values ( p . symbol (  \" lat _ b \"  )  ,    p . symbol (  \" lng _ b \"  )  ,    p . symbol (  \" name _ b \"  )  )  )  )  )  . matches ( spatialJoin ( newFilter ,    project ( ImmutableMap . of (  \" point _ a \"  ,    expression (  \" ST _ Point ( lng _ a ,    lat _ a )  \"  )  )  ,    values ( ImmutableMap . of (  \" lat _ a \"  ,     0  ,     \" lng _ a \"  ,     1  ,     \" name _ a \"  ,     2  )  )  )  ,    project ( ImmutableMap . of (  \" point _ b \"  ,    expression (  \" ST _ Point ( lng _ b ,    lat _ b )  \"  )  )  ,    project ( ImmutableMap . of (  \" radius \"  ,    expression ( radiusExpression )  )  ,    values ( ImmutableMap . of (  \" lat _ b \"  ,     0  ,     \" lng _ b \"  ,     1  ,     \" name _ b \"  ,     2  )  )  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testPointExpressionsInDistanceQuery"], "fileName": "com.facebook.presto.plugin.geospatial.TestTransformSpatialPredicateToJoin"}, {"methodBody": ["METHOD_START", "{", "assertRuleApplication (  )  . on (  (    p )     -  >    p . filter ( PlanBuilder . expression (  \" name _  1     !  =    name _  2    AND   ST _ Contains ( ST _ GeometryFromText ( wkt )  ,    ST _ Point ( lng ,    lat )  )  \"  )  ,    p . join ( INNER ,    p . values ( p . symbol (  \" wkt \"  ,    VARCHAR )  ,    p . symbol (  \" name _  1  \"  )  )  ,    p . values ( p . symbol (  \" lat \"  )  ,    p . symbol (  \" lng \"  )  ,    p . symbol (  \" name _  2  \"  )  )  )  )  )  . matches ( spatialJoin (  \" name _  1     !  =    name _  2    AND   ST _ Contains ( st _ geometryfromtext ,    st _ point )  \"  ,    project ( ImmutableMap . of (  \" st _ geometryfromtext \"  ,    expression (  \" ST _ GeometryFromText ( wkt )  \"  )  )  ,    values ( ImmutableMap . of (  \" wkt \"  ,     0  ,     \" name _  1  \"  ,     1  )  )  )  ,    project ( ImmutableMap . of (  \" st _ point \"  ,    expression (  \" ST _ Point ( lng ,    lat )  \"  )  )  ,    values ( ImmutableMap . of (  \" lat \"  ,     0  ,     \" lng \"  ,     1  ,     \" name _  2  \"  ,     2  )  )  )  )  )  ;", "assertRuleApplication (  )  . on (  (    p )     -  >    p . filter ( PlanBuilder . expression (  \" ST _ Contains ( ST _ GeometryFromText ( wkt 1  )  ,    geometry 1  )    AND   ST _ Contains ( ST _ GeometryFromText ( wkt 2  )  ,    geometry 2  )  \"  )  ,    p . join ( INNER ,    p . values ( p . symbol (  \" wkt 1  \"  ,    VARCHAR )  ,    p . symbol (  \" wkt 2  \"  ,    VARCHAR )  )  ,    p . values ( p . symbol (  \" geometry 1  \"  )  ,    p . symbol (  \" geometry 2  \"  )  )  )  )  )  . matches ( spatialJoin (  \" ST _ Contains ( st _ geometryfromtext ,    geometry 1  )    AND   ST _ Contains ( ST _ GeometryFromText ( wkt 2  )  ,    geometry 2  )  \"  ,    project ( ImmutableMap . of (  \" st _ geometryfromtext \"  ,    expression (  \" ST _ GeometryFromText ( wkt 1  )  \"  )  )  ,    values ( ImmutableMap . of (  \" wkt 1  \"  ,     0  ,     \" wkt 2  \"  ,     1  )  )  )  ,    values ( ImmutableMap . of (  \" geometry 1  \"  ,     0  ,     \" geometry 2  \"  ,     1  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testPushDownAnd"], "fileName": "com.facebook.presto.plugin.geospatial.TestTransformSpatialPredicateToJoin"}, {"methodBody": ["METHOD_START", "{", "assertRuleApplication (  )  . on (  (    p )     -  >    p . filter ( PlanBuilder . expression (  \" ST _ Contains ( ST _ GeometryFromText ( wkt )  ,    ST _ Point ( lng ,    lat )  )  \"  )  ,    p . join ( INNER ,    p . values ( p . symbol (  \" wkt \"  ,    VARCHAR )  )  ,    p . values ( p . symbol (  \" lat \"  )  ,    p . symbol (  \" lng \"  )  )  )  )  )  . matches ( spatialJoin (  \" ST _ Contains ( st _ geometryfromtext ,    st _ point )  \"  ,    project ( ImmutableMap . of (  \" st _ geometryfromtext \"  ,    expression (  \" ST _ GeometryFromText ( wkt )  \"  )  )  ,    values ( ImmutableMap . of (  \" wkt \"  ,     0  )  )  )  ,    project ( ImmutableMap . of (  \" st _ point \"  ,    expression (  \" ST _ Point ( lng ,    lat )  \"  )  )  ,    values ( ImmutableMap . of (  \" lat \"  ,     0  ,     \" lng \"  ,     1  )  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testPushDownBothArguments"], "fileName": "com.facebook.presto.plugin.geospatial.TestTransformSpatialPredicateToJoin"}, {"methodBody": ["METHOD_START", "{", "assertRuleApplication (  )  . on (  (    p )     -  >    p . filter ( PlanBuilder . expression (  \" ST _ Contains ( ST _ GeometryFromText ( wkt )  ,    point )  \"  )  ,    p . join ( INNER ,    p . values ( p . symbol (  \" wkt \"  ,    VARCHAR )  )  ,    p . values ( p . symbol (  \" point \"  ,    GEOMETRY )  )  )  )  )  . matches ( spatialJoin (  \" ST _ Contains ( st _ geometryfromtext ,    point )  \"  ,    project ( ImmutableMap . of (  \" st _ geometryfromtext \"  ,    expression (  \" ST _ GeometryFromText ( wkt )  \"  )  )  ,    values ( ImmutableMap . of (  \" wkt \"  ,     0  )  )  )  ,    values ( ImmutableMap . of (  \" point \"  ,     0  )  )  )  )  ;", "assertRuleApplication (  )  . on (  (    p )     -  >    p . filter ( PlanBuilder . expression (  \" ST _ Contains ( ST _ GeometryFromText ( wkt )  ,    ST _ Point (  0  ,     0  )  )  \"  )  ,    p . join ( INNER ,    p . values ( p . symbol (  \" wkt \"  ,    VARCHAR )  )  ,    p . values (  )  )  )  )  . doesNotFire (  )  ;", "}", "METHOD_END"], "methodName": ["testPushDownFirstArgument"], "fileName": "com.facebook.presto.plugin.geospatial.TestTransformSpatialPredicateToJoin"}, {"methodBody": ["METHOD_START", "{", "assertRuleApplication (  )  . on (  (    p )     -  >    p . filter ( PlanBuilder . expression (  \" ST _ Contains ( ST _ GeometryFromText ( wkt )  ,    ST _ Point ( lng ,    lat )  )  \"  )  ,    p . join ( INNER ,    p . values ( p . symbol (  \" lat \"  )  ,    p . symbol (  \" lng \"  )  )  ,    p . values ( p . symbol (  \" wkt \"  ,    VARCHAR )  )  )  )  )  . matches ( spatialJoin (  \" ST _ Contains ( st _ geometryfromtext ,    st _ point )  \"  ,    project ( ImmutableMap . of (  \" st _ point \"  ,    expression (  \" ST _ Point ( lng ,    lat )  \"  )  )  ,    values ( ImmutableMap . of (  \" lat \"  ,     0  ,     \" lng \"  ,     1  )  )  )  ,    project ( ImmutableMap . of (  \" st _ geometryfromtext \"  ,    expression (  \" ST _ GeometryFromText ( wkt )  \"  )  )  ,    values ( ImmutableMap . of (  \" wkt \"  ,     0  )  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testPushDownOppositeOrder"], "fileName": "com.facebook.presto.plugin.geospatial.TestTransformSpatialPredicateToJoin"}, {"methodBody": ["METHOD_START", "{", "assertRuleApplication (  )  . on (  (    p )     -  >    p . filter ( PlanBuilder . expression (  \" ST _ Contains ( polygon ,    ST _ Point ( lng ,    lat )  )  \"  )  ,    p . join ( INNER ,    p . values ( p . symbol (  \" polygon \"  ,    GEOMETRY )  )  ,    p . values ( p . symbol (  \" lat \"  )  ,    p . symbol (  \" lng \"  )  )  )  )  )  . matches ( spatialJoin (  \" ST _ Contains ( polygon ,    st _ point )  \"  ,    values ( ImmutableMap . of (  \" polygon \"  ,     0  )  )  ,    project ( ImmutableMap . of (  \" st _ point \"  ,    expression (  \" ST _ Point ( lng ,    lat )  \"  )  )  ,    values ( ImmutableMap . of (  \" lat \"  ,     0  ,     \" lng \"  ,     1  )  )  )  )  )  ;", "assertRuleApplication (  )  . on (  (    p )     -  >    p . filter ( PlanBuilder . expression (  \" ST _ Contains ( ST _ GeometryFromText (  ' POLYGON    .  .  .  '  )  ,    ST _ Point ( lng ,    lat )  )  \"  )  ,    p . join ( INNER ,    p . values (  )  ,    p . values ( p . symbol (  \" lat \"  )  ,    p . symbol (  \" lng \"  )  )  )  )  )  . doesNotFire (  )  ;", "}", "METHOD_END"], "methodName": ["testPushDownSecondArgument"], "fileName": "com.facebook.presto.plugin.geospatial.TestTransformSpatialPredicateToJoin"}, {"methodBody": ["METHOD_START", "{", "assertRuleApplication (  )  . on (  (    p )     -  >    p . filter ( PlanBuilder . expression ( filter )  ,    p . join ( INNER ,    p . values ( p . symbol (  \" a \"  )  ,    p . symbol (  \" name _ a \"  )  )  ,    p . values ( p . symbol (  \" b \"  )  ,    p . symbol (  \" name _ b \"  )  ,    p . symbol (  \" r \"  )  )  )  )  )  . matches ( spatialJoin ( newFilter ,    values ( ImmutableMap . of (  \" a \"  ,     0  ,     \" name _ a \"  ,     1  )  )  ,    project ( ImmutableMap . of (  \" radius \"  ,    expression ( radiusExpression )  )  ,    values ( ImmutableMap . of (  \" b \"  ,     0  ,     \" name _ b \"  ,     1  ,     \" r \"  ,     2  )  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testRadiusExpressionInDistanceQuery"], "fileName": "com.facebook.presto.plugin.geospatial.TestTransformSpatialPredicateToJoin"}, {"methodBody": ["METHOD_START", "{", "assertRuleApplication (  )  . on (  (    p )     -  >    p . filter ( PlanBuilder . expression ( filter )  ,    p . join ( INNER ,    p . values ( p . symbol (  \" a \"  )  ,    p . symbol (  \" name _ a \"  )  )  ,    p . values ( p . symbol (  \" b \"  )  ,    p . symbol (  \" name _ b \"  )  ,    p . symbol (  \" r \"  )  )  )  )  )  . matches ( spatialJoin ( newFilter ,    values ( ImmutableMap . of (  \" a \"  ,     0  ,     \" name _ a \"  ,     1  )  )  ,    values ( ImmutableMap . of (  \" b \"  ,     0  ,     \" name _ b \"  ,     1  ,     \" r \"  ,     2  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSimpleDistanceQuery"], "fileName": "com.facebook.presto.plugin.geospatial.TestTransformSpatialPredicateToJoin"}, {"methodBody": ["METHOD_START", "{", "return   tester (  )  . assertThat ( new   com . facebook . presto . sql . planner . iterative . rule . TransformSpatialPredicates . TransformSpatialPredicateToLeftJoin ( tester (  )  . getMetadata (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["assertRuleApplication"], "fileName": "com.facebook.presto.plugin.geospatial.TestTransformSpatialPredicateToLeftJoin"}, {"methodBody": ["METHOD_START", "{", "assertRuleApplication (  )  . on (  (    p )     -  >    p . join ( LEFT ,    p . values (  )  ,    p . values ( p . symbol (  \" b \"  )  )  ,    expression (  \" ST _ Contains ( ST _ GeometryFromText (  ' POLYGON    .  .  .  '  )  ,    b )  \"  )  )  )  . doesNotFire (  )  ;", "assertRuleApplication (  )  . on (  (    p )     -  >    p . join ( LEFT ,    p . values ( p . symbol (  \" a \"  )  )  ,    p . values ( p . symbol (  \" b \"  )  )  ,    expression (  \" ST _ Contains ( a ,    b )  \"  )  )  )  . doesNotFire (  )  ;", "assertRuleApplication (  )  . on (  (    p )     -  >    p . join ( LEFT ,    p . values ( p . symbol (  \" wkt \"  ,    VARCHAR )  ,    p . symbol (  \" name _  1  \"  )  )  ,    p . values ( p . symbol (  \" point \"  ,    GEOMETRY )  ,    p . symbol (  \" name _  2  \"  )  )  ,    expression (  \" ST _ Contains ( ST _ GeometryFromText ( wkt )  ,    point )    OR   name _  1     !  =    name _  2  \"  )  )  )  . doesNotFire (  )  ;", "assertRuleApplication (  )  . on (  (    p )     -  >    p . join ( LEFT ,    p . values ( p . symbol (  \" wkt \"  ,    VARCHAR )  ,    p . symbol (  \" name _  1  \"  )  )  ,    p . values ( p . symbol (  \" point \"  ,    GEOMETRY )  ,    p . symbol (  \" name _  2  \"  )  )  ,    expression (  \" NOT   ST _ Contains ( ST _ GeometryFromText ( wkt )  ,    point )  \"  )  )  )  . doesNotFire (  )  ;", "assertRuleApplication (  )  . on (  (    p )     -  >    p . join ( LEFT ,    p . values ( p . symbol (  \" a \"  ,    GEOMETRY )  )  ,    p . values ( p . symbol (  \" b \"  ,    GEOMETRY )  )  ,    expression (  \" ST _ Distance ( a ,    b )     >     5  \"  )  )  )  . doesNotFire (  )  ;", "}", "METHOD_END"], "methodName": ["testDoesNotFire"], "fileName": "com.facebook.presto.plugin.geospatial.TestTransformSpatialPredicateToLeftJoin"}, {"methodBody": ["METHOD_START", "{", "assertRuleApplication (  )  . on (  (    p )     -  >    p . join ( LEFT ,    p . values ( p . symbol (  \" wkt \"  ,    VARCHAR )  ,    p . symbol (  \" name _  1  \"  )  )  ,    p . values ( p . symbol (  \" lat \"  )  ,    p . symbol (  \" lng \"  )  ,    p . symbol (  \" name _  2  \"  )  )  ,    expression (  \" name _  1     !  =    name _  2    AND   ST _ Contains ( ST _ GeometryFromText ( wkt )  ,    ST _ Point ( lng ,    lat )  )  \"  )  )  )  . matches ( spatialLeftJoin (  \" name _  1     !  =    name _  2    AND   ST _ Contains ( st _ geometryfromtext ,    st _ point )  \"  ,    project ( ImmutableMap . of (  \" st _ geometryfromtext \"  ,    PlanMatchPattern . expression (  \" ST _ GeometryFromText ( wkt )  \"  )  )  ,    values ( ImmutableMap . of (  \" wkt \"  ,     0  ,     \" name _  1  \"  ,     1  )  )  )  ,    project ( ImmutableMap . of (  \" st _ point \"  ,    PlanMatchPattern . expression (  \" ST _ Point ( lng ,    lat )  \"  )  )  ,    values ( ImmutableMap . of (  \" lat \"  ,     0  ,     \" lng \"  ,     1  ,     \" name _  2  \"  ,     2  )  )  )  )  )  ;", "assertRuleApplication (  )  . on (  (    p )     -  >    p . join ( LEFT ,    p . values ( p . symbol (  \" wkt 1  \"  ,    VARCHAR )  ,    p . symbol (  \" wkt 2  \"  ,    VARCHAR )  )  ,    p . values ( p . symbol (  \" geometry 1  \"  )  ,    p . symbol (  \" geometry 2  \"  )  )  ,    expression (  \" ST _ Contains ( ST _ GeometryFromText ( wkt 1  )  ,    geometry 1  )    AND   ST _ Contains ( ST _ GeometryFromText ( wkt 2  )  ,    geometry 2  )  \"  )  )  )  . matches ( spatialLeftJoin (  \" ST _ Contains ( st _ geometryfromtext ,    geometry 1  )    AND   ST _ Contains ( ST _ GeometryFromText ( wkt 2  )  ,    geometry 2  )  \"  ,    project ( ImmutableMap . of (  \" st _ geometryfromtext \"  ,    PlanMatchPattern . expression (  \" ST _ GeometryFromText ( wkt 1  )  \"  )  )  ,    values ( ImmutableMap . of (  \" wkt 1  \"  ,     0  ,     \" wkt 2  \"  ,     1  )  )  )  ,    values ( ImmutableMap . of (  \" geometry 1  \"  ,     0  ,     \" geometry 2  \"  ,     1  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testPushDownAnd"], "fileName": "com.facebook.presto.plugin.geospatial.TestTransformSpatialPredicateToLeftJoin"}, {"methodBody": ["METHOD_START", "{", "assertRuleApplication (  )  . on (  (    p )     -  >    p . join ( LEFT ,    p . values ( p . symbol (  \" wkt \"  ,    VARCHAR )  )  ,    p . values ( p . symbol (  \" lat \"  )  ,    p . symbol (  \" lng \"  )  )  ,    expression (  \" ST _ Contains ( ST _ GeometryFromText ( wkt )  ,    ST _ Point ( lng ,    lat )  )  \"  )  )  )  . matches ( spatialLeftJoin (  \" ST _ Contains ( st _ geometryfromtext ,    st _ point )  \"  ,    project ( ImmutableMap . of (  \" st _ geometryfromtext \"  ,    PlanMatchPattern . expression (  \" ST _ GeometryFromText ( wkt )  \"  )  )  ,    values ( ImmutableMap . of (  \" wkt \"  ,     0  )  )  )  ,    project ( ImmutableMap . of (  \" st _ point \"  ,    PlanMatchPattern . expression (  \" ST _ Point ( lng ,    lat )  \"  )  )  ,    values ( ImmutableMap . of (  \" lat \"  ,     0  ,     \" lng \"  ,     1  )  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testPushDownBothArguments"], "fileName": "com.facebook.presto.plugin.geospatial.TestTransformSpatialPredicateToLeftJoin"}, {"methodBody": ["METHOD_START", "{", "assertRuleApplication (  )  . on (  (    p )     -  >    p . join ( LEFT ,    p . values ( p . symbol (  \" wkt \"  ,    VARCHAR )  )  ,    p . values ( p . symbol (  \" point \"  ,    GEOMETRY )  )  ,    expression (  \" ST _ Contains ( ST _ GeometryFromText ( wkt )  ,    point )  \"  )  )  )  . matches ( spatialLeftJoin (  \" ST _ Contains ( st _ geometryfromtext ,    point )  \"  ,    project ( ImmutableMap . of (  \" st _ geometryfromtext \"  ,    PlanMatchPattern . expression (  \" ST _ GeometryFromText ( wkt )  \"  )  )  ,    values ( ImmutableMap . of (  \" wkt \"  ,     0  )  )  )  ,    values ( ImmutableMap . of (  \" point \"  ,     0  )  )  )  )  ;", "assertRuleApplication (  )  . on (  (    p )     -  >    p . join ( LEFT ,    p . values ( p . symbol (  \" wkt \"  ,    VARCHAR )  )  ,    p . values (  )  ,    expression (  \" ST _ Contains ( ST _ GeometryFromText ( wkt )  ,    ST _ Point (  0  ,     0  )  )  \"  )  )  )  . doesNotFire (  )  ;", "}", "METHOD_END"], "methodName": ["testPushDownFirstArgument"], "fileName": "com.facebook.presto.plugin.geospatial.TestTransformSpatialPredicateToLeftJoin"}, {"methodBody": ["METHOD_START", "{", "assertRuleApplication (  )  . on (  (    p )     -  >    p . join ( LEFT ,    p . values ( p . symbol (  \" lat \"  )  ,    p . symbol (  \" lng \"  )  )  ,    p . values ( p . symbol (  \" wkt \"  ,    VARCHAR )  )  ,    expression (  \" ST _ Contains ( ST _ GeometryFromText ( wkt )  ,    ST _ Point ( lng ,    lat )  )  \"  )  )  )  . matches ( spatialLeftJoin (  \" ST _ Contains ( st _ geometryfromtext ,    st _ point )  \"  ,    project ( ImmutableMap . of (  \" st _ point \"  ,    PlanMatchPattern . expression (  \" ST _ Point ( lng ,    lat )  \"  )  )  ,    values ( ImmutableMap . of (  \" lat \"  ,     0  ,     \" lng \"  ,     1  )  )  )  ,    project ( ImmutableMap . of (  \" st _ geometryfromtext \"  ,    PlanMatchPattern . expression (  \" ST _ GeometryFromText ( wkt )  \"  )  )  ,    values ( ImmutableMap . of (  \" wkt \"  ,     0  )  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testPushDownOppositeOrder"], "fileName": "com.facebook.presto.plugin.geospatial.TestTransformSpatialPredicateToLeftJoin"}, {"methodBody": ["METHOD_START", "{", "assertRuleApplication (  )  . on (  (    p )     -  >    p . join ( LEFT ,    p . values ( p . symbol (  \" polygon \"  ,    GEOMETRY )  )  ,    p . values ( p . symbol (  \" lat \"  )  ,    p . symbol (  \" lng \"  )  )  ,    expression (  \" ST _ Contains ( polygon ,    ST _ Point ( lng ,    lat )  )  \"  )  )  )  . matches ( spatialLeftJoin (  \" ST _ Contains ( polygon ,    st _ point )  \"  ,    values ( ImmutableMap . of (  \" polygon \"  ,     0  )  )  ,    project ( ImmutableMap . of (  \" st _ point \"  ,    PlanMatchPattern . expression (  \" ST _ Point ( lng ,    lat )  \"  )  )  ,    values ( ImmutableMap . of (  \" lat \"  ,     0  ,     \" lng \"  ,     1  )  )  )  )  )  ;", "assertRuleApplication (  )  . on (  (    p )     -  >    p . join ( LEFT ,    p . values (  )  ,    p . values ( p . symbol (  \" lat \"  )  ,    p . symbol (  \" lng \"  )  )  ,    expression (  \" ST _ Contains ( ST _ GeometryFromText (  ' POLYGON    .  .  .  '  )  ,    ST _ Point ( lng ,    lat )  )  \"  )  )  )  . doesNotFire (  )  ;", "}", "METHOD_END"], "methodName": ["testPushDownSecondArgument"], "fileName": "com.facebook.presto.plugin.geospatial.TestTransformSpatialPredicateToLeftJoin"}]