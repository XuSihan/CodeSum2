[{"methodBody": ["METHOD_START", "{", "Map < String ,    Pair < String ,    String >  >    mapping    =    new   HashMap <  >  (  )  ;", "for    ( ColumnMetadata   column    :    columns )     {", "Optional < String >    family    =     . getColumnLocalityGroup ( column . getName (  )  ,    groups )  ;", "mapping . put ( column . getName (  )  ,    Pair . of ( family . orElse ( column . getName (  )  )  ,    column . getName (  )  )  )  ;", "}", "return   mapping ;", "}", "METHOD_END"], "methodName": ["autoGenerateMapping"], "fileName": "com.facebook.presto.accumulo.AccumuloClient"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( table . isIndexed (  )  )  )     {", "return ;", "}", "if    (  !  ( tableManager . exists ( table . getIndexTableName (  )  )  )  )     {", "tableManager . createTable ( table . getIndexTableName (  )  )  ;", "}", "if    (  !  ( tableManager . exists ( table . getMetricsTableName (  )  )  )  )     {", "tableManager . createTable ( table . getMetricsTableName (  )  )  ;", "}", "Map < String ,    Set < Text >  >    indexGroups    =    Indexer . getLocalityGroups ( table )  ;", "tableManager . setLocalityGroups ( table . getIndexTableName (  )  ,    indexGroups )  ;", "tableManager . setLocalityGroups ( table . getMetricsTableName (  )  ,    indexGroups )  ;", "for    ( IteratorSetting   setting    :    Indexer . getMetricIterators ( table )  )     {", "tableManager . setIterator ( table . getMetricsTableName (  )  ,    setting )  ;", "}", "}", "METHOD_END"], "methodName": ["createIndexTables"], "fileName": "com.facebook.presto.accumulo.AccumuloClient"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getView ( viewName )  )     !  =    null )     {", "metaManager . deleteViewMetadata ( viewName )  ;", "}", "metaManager . createViewMetadata ( new   View ( viewName . getSchemaName (  )  ,    viewName . getTableName (  )  ,    viewData )  )  ;", "}", "METHOD_END"], "methodName": ["createOrReplaceView"], "fileName": "com.facebook.presto.accumulo.AccumuloClient"}, {"methodBody": ["METHOD_START", "{", "validateCreateTable ( meta )  ;", "Map < String ,    Object >    tableProperties    =    meta . getProperties (  )  ;", "String   rowIdColumn    =     . getRowIdColumn ( meta )  ;", "List < AccumuloColumnHandle >    columns    =     . getColumnHandles ( meta ,    rowIdColumn )  ;", "AccumuloTable   table    =    new   AccumuloTable ( meta . getTable (  )  . getSchemaName (  )  ,    meta . getTable (  )  . getTableName (  )  ,    columns ,    rowIdColumn ,    AccumuloTableProperties . isExternal ( tableProperties )  ,    AccumuloTableProperties . getSerializerClass ( tableProperties )  ,    AccumuloTableProperties . getScanAuthorizations ( tableProperties )  )  ;", "metaManager . createTableMetadata ( table )  ;", "tableManager . ensureNamespace ( table . getSchema (  )  )  ;", "if    (  !  ( tableManager . exists ( table . getFullTableName (  )  )  )  )     {", "tableManager . createAccumuloTable ( table . getFullTableName (  )  )  ;", "}", "setLocalityGroups ( tableProperties ,    table )  ;", "createIndexTables ( table )  ;", "return   table ;", "}", "METHOD_END"], "methodName": ["createTable"], "fileName": "com.facebook.presto.accumulo.AccumuloClient"}, {"methodBody": ["METHOD_START", "{", "if    ( getSchemaNames (  )  . contains ( viewName . getSchemaName (  )  )  )     {", "if    ( getViewNames ( viewName . getSchemaName (  )  )  . contains ( viewName . getTableName (  )  )  )     {", "throw   new   spi . PrestoException ( StandardErrorCode . ALREADY _ EXISTS ,     \" View   already   exists \"  )  ;", "}", "if    ( getTableNames ( viewName . getSchemaName (  )  )  . contains ( viewName . getTableName (  )  )  )     {", "throw   new   spi . PrestoException ( StandardErrorCode . INVALID _ VIEW ,     \" View   already   exists   as   data   table \"  )  ;", "}", "}", "metaManager . createViewMetadata ( new   AccumuloView ( viewName . getSchemaName (  )  ,    viewName . getTableName (  )  ,    viewData )  )  ;", "}", "METHOD_END"], "methodName": ["createView"], "fileName": "com.facebook.presto.accumulo.AccumuloClient"}, {"methodBody": ["METHOD_START", "{", "SchemaTableName   tableName    =    new   SchemaTableName ( table . getSchema (  )  ,    table . getTable (  )  )  ;", "if    (  ( metaManager . getTable ( tableName )  )     !  =    null )     {", "metaManager . deleteTableMetadata ( tableName )  ;", "}", "if    (  !  ( table . isExternal (  )  )  )     {", "String   fullTableName    =    table . getFullTableName (  )  ;", "if    ( tableManager . exists ( fullTableName )  )     {", "tableManager . deleteTable ( fullTableName )  ;", "}", "if    ( table . isIndexed (  )  )     {", "String   indexTableName    =    Indexer . getIndexTableName ( tableName )  ;", "if    ( tableManager . exists ( indexTableName )  )     {", "tableManager . deleteTable ( indexTableName )  ;", "}", "String   metricsTableName    =    Indexer . getMetricsTableName ( tableName )  ;", "if    ( tableManager . exists ( metricsTableName )  )     {", "tableManager . deleteTable ( metricsTableName )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["dropTable"], "fileName": "com.facebook.presto.accumulo.AccumuloClient"}, {"methodBody": ["METHOD_START", "{", "metaManager . deleteViewMetadata ( viewName )  ;", "}", "METHOD_END"], "methodName": ["dropView"], "fileName": "com.facebook.presto.accumulo.AccumuloClient"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Pair < String ,    String >  >    mapping    =    AccumuloTableProperties . getColumnMapping ( meta . getProperties (  )  )  . orElse ( AccumuloClient . autoGenerateMapping ( meta . getColumns (  )  ,    AccumuloTableProperties . getLocalityGroups ( meta . getProperties (  )  )  )  )  ;", "Optional < List < String >  >    indexedColumns    =    AccumuloTableProperties . getIndexColumns ( meta . getProperties (  )  )  ;", "ImmutableList . Builder < AccumuloColumnHandle >    cBuilder    =    ImmutableList . builder (  )  ;", "for    ( int   ordinal    =     0  ;    ordinal    <     ( meta . getColumns (  )  . size (  )  )  ;     +  + ordinal )     {", "ColumnMetadata   cm    =    meta . getColumns (  )  . get ( ordinal )  ;", "if    ( cm . getName (  )  . equalsIgnoreCase ( rowIdColumn )  )     {", "cBuilder . add ( new   AccumuloColumnHandle ( rowIdColumn ,    Optional . empty (  )  ,    Optional . empty (  )  ,    cm . getType (  )  ,    ordinal ,     \" Accumulo   row   ID \"  ,    false )  )  ;", "} else    {", "if    (  !  ( mapping . containsKey ( cm . getName (  )  )  )  )     {", "throw   new   InvalidParameterException ( String . format (  \" Misconfigured   mapping   for   presto   column    % s \"  ,    cm . getName (  )  )  )  ;", "}", "Pair < String ,    String >    famqual    =    mapping . get ( cm . getName (  )  )  ;", "boolean   indexed    =     ( indexedColumns . isPresent (  )  )     &  &     ( indexedColumns . get (  )  . contains ( cm . getName (  )  . toLowerCase ( Locale . ENGLISH )  )  )  ;", "String   comment    =    String . format (  \" Accumulo   column    % s :  % s .    Indexed :     % b \"  ,    famqual . getLeft (  )  ,    famqual . getRight (  )  ,    indexed )  ;", "cBuilder . add ( new   AccumuloColumnHandle ( cm . getName (  )  ,    Optional . of ( famqual . getLeft (  )  )  ,    Optional . of ( famqual . getRight (  )  )  ,    cm . getType (  )  ,    ordinal ,    comment ,    indexed )  )  ;", "}", "}", "return   cBuilder . build (  )  ;", "}", "METHOD_END"], "methodName": ["getColumnHandles"], "fileName": "com.facebook.presto.accumulo.AccumuloClient"}, {"methodBody": ["METHOD_START", "{", "if    ( groups . isPresent (  )  )     {", "for    ( Map . Entry < String ,    Set < String >  >    group    :    groups . get (  )  . entrySet (  )  )     {", "if    ( group . getValue (  )  . contains ( columnName . toLowerCase ( Locale . ENGLISH )  )  )     {", "return   Optional . of ( group . getKey (  )  )  ;", "}", "}", "}", "return   Optional . empty (  )  ;", "}", "METHOD_END"], "methodName": ["getColumnLocalityGroup"], "fileName": "com.facebook.presto.accumulo.AccumuloClient"}, {"methodBody": ["METHOD_START", "{", "try    {", "String   tableId    =    connector . tableOperations (  )  . tableIdMap (  )  . get ( fulltable )  ;", "Scanner   scan    =    connector . createScanner (  \" accumulo . metadata \"  ,    connector . securityOperations (  )  . getUserAuthorizations ( username )  )  ;", "scan . fetchColumnFamily ( new   Text (  \" loc \"  )  )  ;", "scan . setRange ( new   Range (  ( tableId    +     '  <  '  )  )  )  ;", "Optional < String >    location    =    Optional . empty (  )  ;", "for    ( Map . Entry < Key ,    Value >    entry    :    scan )     {", "if    ( location . isPresent (  )  )     {", "throw   new   spi . PrestoException ( StandardErrorCode . FUNCTION _ IMPLEMENTATION _ ERROR ,     \" Scan   for   default   tablet   returned   more   than   one   entry \"  )  ;", "}", "location    =    Optional . of ( entry . getValue (  )  . toString (  )  )  ;", "}", "scan . close (  )  ;", "return   location ;", "}    catch    ( Exception   e )     {", "AccumuloClient . LOG . error (  \" Failed   to   get   tablet   location ,    returning   dummy   location \"  ,    e )  ;", "return   Optional . empty (  )  ;", "}", "}", "METHOD_END"], "methodName": ["getDefaultTabletLocation"], "fileName": "com.facebook.presto.accumulo.AccumuloClient"}, {"methodBody": ["METHOD_START", "{", "Range   accumuloRange ;", "if    ( prestoRange . isAll (  )  )     {", "accumuloRange    =    new   Range (  )  ;", "} else", "if    ( prestoRange . isSingleValue (  )  )     {", "Text   split    =    new   Text ( serializer . encode ( prestoRange . getType (  )  ,    prestoRange . getSingleValue (  )  )  )  ;", "accumuloRange    =    new   Range ( split )  ;", "} else    {", "if    ( prestoRange . getLow (  )  . isLowerUnbounded (  )  )     {", "boolean   inclusive    =     ( prestoRange . getHigh (  )  . getBound (  )  )     =  =     ( spi . predicate . Marker . Bound . EXACTLY )  ;", "Text   split    =    new   Text ( serializer . encode ( prestoRange . getType (  )  ,    prestoRange . getHigh (  )  . getValue (  )  )  )  ;", "accumuloRange    =    new   Range ( null ,    false ,    split ,    inclusive )  ;", "} else", "if    ( prestoRange . getHigh (  )  . isUpperUnbounded (  )  )     {", "boolean   inclusive    =     ( prestoRange . getLow (  )  . getBound (  )  )     =  =     ( spi . predicate . Marker . Bound . EXACTLY )  ;", "Text   split    =    new   Text ( serializer . encode ( prestoRange . getType (  )  ,    prestoRange . getLow (  )  . getValue (  )  )  )  ;", "accumuloRange    =    new   Range ( split ,    inclusive ,    null ,    false )  ;", "} else    {", "boolean   startKeyInclusive    =     ( prestoRange . getLow (  )  . getBound (  )  )     =  =     ( spi . predicate . Marker . Bound . EXACTLY )  ;", "Text   startSplit    =    new   Text ( serializer . encode ( prestoRange . getType (  )  ,    prestoRange . getLow (  )  . getValue (  )  )  )  ;", "boolean   endKeyInclusive    =     ( prestoRange . getHigh (  )  . getBound (  )  )     =  =     ( spi . predicate . Marker . Bound . EXACTLY )  ;", "Text   endSplit    =    new   Text ( serializer . encode ( prestoRange . getType (  )  ,    prestoRange . getHigh (  )  . getValue (  )  )  )  ;", "accumuloRange    =    new   Range ( startSplit ,    startKeyInclusive ,    endSplit ,    endKeyInclusive )  ;", "}", "}", "return   accumuloRange ;", "}", "METHOD_END"], "methodName": ["getRangeFromPrestoRange"], "fileName": "com.facebook.presto.accumulo.AccumuloClient"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( domain . isPresent (  )  )  )     {", "return   ImmutableSet . of ( new   Range (  )  )  ;", "}", "ImmutableSet . Builder < Range >    rangeBuilder    =    ImmutableSet . builder (  )  ;", "for    ( spi . predicate . Range   range    :    domain . get (  )  . getValues (  )  . getRanges (  )  . getOrderedRanges (  )  )     {", "rangeBuilder . add ( AccumuloClient . getRangeFromPrestoRange ( range ,    serializer )  )  ;", "}", "return   rangeBuilder . build (  )  ;", "}", "METHOD_END"], "methodName": ["getRangesFromDomain"], "fileName": "com.facebook.presto.accumulo.AccumuloClient"}, {"methodBody": ["METHOD_START", "{", "Optional < String >    rowIdColumn    =    AccumuloTableProperties . getRowId ( meta . getProperties (  )  )  ;", "return   rowIdColumn . orElse ( meta . getColumns (  )  . get (  0  )  . getName (  )  )  . toLowerCase ( Locale . ENGLISH )  ;", "}", "METHOD_END"], "methodName": ["getRowIdColumn"], "fileName": "com.facebook.presto.accumulo.AccumuloClient"}, {"methodBody": ["METHOD_START", "{", "String   sessionScanUser    =    AccumuloSessionProperties . getScanUsername ( session )  ;", "if    ( sessionScanUser    !  =    null )     {", "Authorizations   scanAuths    =    connector . securityOperations (  )  . getUserAuthorizations ( sessionScanUser )  ;", "AccumuloClient . LOG . debug (  \" Using   session   scan   auths   for   user    % s :     % s \"  ,    sessionScanUser ,    scanAuths )  ;", "return   scanAuths ;", "}", "AccumuloTable   accumuloTable    =    this . getTable ( new   SchemaTableName ( schema ,    table )  )  ;", "if    ( accumuloTable    =  =    null )     {", "throw   new   spi . TableNotFoundException ( new   SchemaTableName ( schema ,    table )  )  ;", "}", "Optional < String >    strAuths    =    accumuloTable . getScanAuthorizations (  )  ;", "if    ( strAuths . isPresent (  )  )     {", "Authorizations   scanAuths    =    new   Authorizations ( Iterables . toArray ( AccumuloClient . COMMA _ SPLITTER . split ( strAuths . get (  )  )  ,    String . class )  )  ;", "AccumuloClient . LOG . debug (  \" scan _ auths   table   property   set ,    using :     % s \"  ,    scanAuths )  ;", "return   scanAuths ;", "}", "AccumuloClient . LOG . debug (  \" scan _ auths   table   property   not   set ,    using   connector   auths :     % s \"  ,    this . auths )  ;", "return   this . auths ;", "}", "METHOD_END"], "methodName": ["getScanAuthorizations"], "fileName": "com.facebook.presto.accumulo.AccumuloClient"}, {"methodBody": ["METHOD_START", "{", "return   metaManager . getSchemaNames (  )  ;", "}", "METHOD_END"], "methodName": ["getSchemaNames"], "fileName": "com.facebook.presto.accumulo.AccumuloClient"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( table ,     \" schema   table   name   is   null \"  )  ;", "return   metaManager . getTable ( table )  ;", "}", "METHOD_END"], "methodName": ["getTable"], "fileName": "com.facebook.presto.accumulo.AccumuloClient"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( schema ,     \" schema   is   null \"  )  ;", "return   metaManager . getTableNames ( schema )  ;", "}", "METHOD_END"], "methodName": ["getTableNames"], "fileName": "com.facebook.presto.accumulo.AccumuloClient"}, {"methodBody": ["METHOD_START", "{", "try    {", "String   tableId    =    connector . tableOperations (  )  . tableIdMap (  )  . get ( table )  ;", "Scanner   scanner    =    connector . createScanner (  \" accumulo . metadata \"  ,    auths )  ;", "scanner . fetchColumnFamily ( new   Text (  \" loc \"  )  )  ;", "Key   defaultTabletRow    =    new   Key (  ( tableId    +     '  <  '  )  )  ;", "Key   start    =    new   Key ( tableId )  ;", "Key   end    =    defaultTabletRow . followingKey ( ROW )  ;", "scanner . setRange ( new   Range ( start ,    end )  )  ;", "Optional < String >    location    =    Optional . empty (  )  ;", "if    ( key    =  =    null )     {", "Iterator < Map . Entry < Key ,    Value >  >    iter    =    scanner . iterator (  )  ;", "if    ( iter . hasNext (  )  )     {", "location    =    Optional . of ( iter . next (  )  . getValue (  )  . toString (  )  )  ;", "}", "} else    {", "Text   splitCompareKey    =    new   Text (  )  ;", "key . getRow ( splitCompareKey )  ;", "Text   scannedCompareKey    =    new   Text (  )  ;", "for    ( Map . Entry < Key ,    Value >    entry    :    scanner )     {", "byte [  ]    keyBytes    =    entry . getKey (  )  . getRow (  )  . copyBytes (  )  ;", "if    (  ( keyBytes [  (  ( keyBytes . length )     -     1  )  ]  )     =  =     '  <  '  )     {", "location    =    Optional . of ( entry . getValue (  )  . toString (  )  )  ;", "break ;", "} else    {", "scannedCompareKey . set ( keyBytes ,     3  ,     (  ( keyBytes . length )     -     3  )  )  ;", "if    (  ( scannedCompareKey . getLength (  )  )     >     0  )     {", "int   compareTo    =    splitCompareKey . compareTo ( scannedCompareKey )  ;", "if    ( compareTo    <  =     0  )     {", "location    =    Optional . of ( entry . getValue (  )  . toString (  )  )  ;", "} else    {", "break ;", "}", "}", "}", "}", "scanner . close (  )  ;", "}", "return   location . isPresent (  )     ?    location    :    getDefaultTabletLocation ( table )  ;", "}    catch    ( Exception   e )     {", ". LOG . error (  \" Failed   to   get   tablet   location ,    returning   dummy   location \"  ,    e )  ;", "return   Optional . empty (  )  ;", "}", "}", "METHOD_END"], "methodName": ["getTabletLocation"], "fileName": "com.facebook.presto.accumulo.AccumuloClient"}, {"methodBody": ["METHOD_START", "{", "try    {", "String   tableName    =    AccumuloTable . getFullTableName ( schema ,    table )  ;", ". LOG . debug (  \" Getting   tablet   splits   for   table    % s \"  ,    tableName )  ;", "Collection < Range >    rowIdRanges    =     . getRangesFromDomain ( rowIdDomain ,    serializer )  ;", "List < TabletSplitMetadata >    tabletSplits    =    new   ArrayList <  >  (  )  ;", "if    ( AccumuloSessionProperties . isOptimizeIndexEnabled ( session )  )     {", "Authorizations   auths    =    getScanAuthorizations ( session ,    schema ,    table )  ;", "if    ( indexLookup . applyIndex ( schema ,    table ,    session ,    constraints ,    rowIdRanges ,    tabletSplits ,    serializer ,    auths )  )     {", "return   tabletSplits ;", "}", "}", "Collection < Range >    splitRanges ;", "if    ( AccumuloSessionProperties . isOptimizeSplitRangesEnabled ( session )  )     {", "splitRanges    =    splitByTabletBoundaries ( tableName ,    rowIdRanges )  ;", "} else    {", "splitRanges    =    rowIdRanges ;", "}", "boolean   fetchTabletLocations    =    AccumuloSessionProperties . isOptimizeLocalityEnabled ( session )  ;", ". LOG . debug (  \" Fetching   tablet   locations :     % s \"  ,    fetchTabletLocations )  ;", "for    ( Range   range    :    splitRanges )     {", "if    ( fetchTabletLocations )     {", "tabletSplits . add ( new   TabletSplitMetadata ( getTabletLocation ( tableName ,    range . getStartKey (  )  )  ,    ImmutableList . of ( range )  )  )  ;", "} else    {", "tabletSplits . add ( new   TabletSplitMetadata ( Optional . empty (  )  ,    ImmutableList . of ( range )  )  )  ;", "}", "}", ". LOG . debug (  \" Number   of   splits   for   table    % s   is    % d   with    % d   ranges \"  ,    tableName ,    tabletSplits . size (  )  ,    splitRanges . size (  )  )  ;", "return   tabletSplits ;", "}    catch    ( Exception   e )     {", "throw   new   PrestoException ( AccumuloErrorCode . UNEXPECTED _ ACCUMULO _ ERROR ,     \" Failed   to   get   splits   from   Accumulo \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["getTabletSplits"], "fileName": "com.facebook.presto.accumulo.AccumuloClient"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( viewName ,     \" schema   table   name   is   null \"  )  ;", "return   metaManager . getView ( viewName )  ;", "}", "METHOD_END"], "methodName": ["getView"], "fileName": "com.facebook.presto.accumulo.AccumuloClient"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( schema ,     \" schema   is   null \"  )  ;", "return   metaManager . getViewNames ( schema )  ;", "}", "METHOD_END"], "methodName": ["getViewNames"], "fileName": "com.facebook.presto.accumulo.AccumuloClient"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( table . getColumns (  )  . stream (  )  . anyMatch (  (    columnHandle )     -  >    columnHandle . getName (  )  . equalsIgnoreCase ( source )  )  )  )     {", "throw   new   spi . PrestoException ( StandardErrorCode . NOT _ FOUND ,    String . format (  \" Failed   to   find   source   column    % s   to   rename   to    % s \"  ,    source ,    target )  )  ;", "}", "ImmutableList . Builder < AccumuloColumnHandle >    newColumnList    =    ImmutableList . builder (  )  ;", "for    ( AccumuloColumnHandle   columnHandle    :    table . getColumns (  )  )     {", "if    ( columnHandle . getName (  )  . equalsIgnoreCase ( source )  )     {", "newColumnList . add ( new   AccumuloColumnHandle ( target ,    columnHandle . getFamily (  )  ,    columnHandle . getQualifier (  )  ,    columnHandle . getType (  )  ,    columnHandle . getOrdinal (  )  ,    columnHandle . getComment (  )  ,    columnHandle . isIndexed (  )  )  )  ;", "} else    {", "newColumnList . add ( columnHandle )  ;", "}", "}", "AccumuloTable   newTable    =    new   AccumuloTable ( table . getSchema (  )  ,    table . getTable (  )  ,    newColumnList . build (  )  ,     ( table . getRowId (  )  . equalsIgnoreCase ( source )     ?    target    :    table . getRowId (  )  )  ,    table . isExternal (  )  ,    table . getSerializerClassName (  )  ,    table . getScanAuthorizations (  )  )  ;", "metaManager . deleteTableMetadata ( new   SchemaTableName ( table . getSchema (  )  ,    table . getTable (  )  )  )  ;", "metaManager . createTableMetadata ( newTable )  ;", "}", "METHOD_END"], "methodName": ["renameColumn"], "fileName": "com.facebook.presto.accumulo.AccumuloClient"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( oldTable . isIndexed (  )  )  )     {", "return ;", "}", "if    (  !  ( tableManager . exists ( oldTable . getIndexTableName (  )  )  )  )     {", "throw   new   PrestoException ( ErrorCode . ACCUMULO _ TABLE _ DNE ,    String . format (  \" Table    % s   does   not   exist \"  ,    oldTable . getIndexTableName (  )  )  )  ;", "}", "if    ( tableManager . exists ( newTable . getIndexTableName (  )  )  )     {", "throw   new   PrestoException ( ErrorCode . ACCUMULO _ TABLE _ EXISTS ,    String . format (  \" Table    % s   already   exists \"  ,    newTable . getIndexTableName (  )  )  )  ;", "}", "if    (  !  ( tableManager . exists ( oldTable . getMetricsTableName (  )  )  )  )     {", "throw   new   PrestoException ( ErrorCode . ACCUMULO _ TABLE _ DNE ,    String . format (  \" Table    % s   does   not   exist \"  ,    oldTable . getMetricsTableName (  )  )  )  ;", "}", "if    ( tableManager . exists ( newTable . getMetricsTableName (  )  )  )     {", "throw   new   PrestoException ( ErrorCode . ACCUMULO _ TABLE _ EXISTS ,    String . format (  \" Table    % s   already   exists \"  ,    newTable . getMetricsTableName (  )  )  )  ;", "}", "tableManager . renameTable ( oldTable . getIndexTableName (  )  ,    newTable . getIndexTableName (  )  )  ;", "tableManager . renameTable ( oldTable . getMetricsTableName (  )  ,    newTable . getMetricsTableName (  )  )  ;", "}", "METHOD_END"], "methodName": ["renameIndexTables"], "fileName": "com.facebook.presto.accumulo.AccumuloClient"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( oldName . getSchemaName (  )  . equals ( newName . getSchemaName (  )  )  )  )     {", "throw   new   PrestoException ( StandardErrorCode . NOT _ SUPPORTED ,     \" Accumulo   does   not   support   renaming   tables   to   different   namespaces    ( schemas )  \"  )  ;", "}", "AccumuloTable   oldTable    =    getTable ( oldName )  ;", "if    ( oldTable    =  =    null )     {", "throw   new   spi . TableNotFoundException ( oldName )  ;", "}", "AccumuloTable   newTable    =    new   AccumuloTable ( oldTable . getSchema (  )  ,    newName . getTableName (  )  ,    oldTable . getColumns (  )  ,    oldTable . getRowId (  )  ,    oldTable . isExternal (  )  ,    oldTable . getSerializerClassName (  )  ,    oldTable . getScanAuthorizations (  )  )  ;", "if    (  !  ( tableManager . exists ( oldTable . getFullTableName (  )  )  )  )     {", "throw   new   PrestoException ( AccumuloErrorCode . ACCUMULO _ TABLE _ DNE ,    String . format (  \" Table    % s   does   not   exist \"  ,    oldTable . getFullTableName (  )  )  )  ;", "}", "if    ( tableManager . exists ( newTable . getFullTableName (  )  )  )     {", "throw   new   PrestoException ( AccumuloErrorCode . ACCUMULO _ TABLE _ EXISTS ,    String . format (  \" Table    % s   already   exists \"  ,    newTable . getFullTableName (  )  )  )  ;", "}", "renameIndexTables ( oldTable ,    newTable )  ;", "tableManager . renameAccumuloTable ( oldTable . getFullTableName (  )  ,    newTable . getFullTableName (  )  )  ;", "metaManager . deleteTableMetadata ( oldTable . getSchemaTableName (  )  )  ;", "metaManager . createTableMetadata ( newTable )  ;", "}", "METHOD_END"], "methodName": ["renameTable"], "fileName": "com.facebook.presto.accumulo.AccumuloClient"}, {"methodBody": ["METHOD_START", "{", "Optional < Map < String ,    Set < String >  >  >    groups    =    AccumuloTableProperties . getLocalityGroups ( tableProperties )  ;", "if    (  !  ( groups . isPresent (  )  )  )     {", ". LOG . debug (  \" No   locality   groups   to   set \"  )  ;", "return ;", "}", "Builder < String ,    Set < Text >  >    localityGroupsBuilder    =    ImmutableMap . builder (  )  ;", "for    ( Map . Entry < String ,    Set < String >  >    g    :    groups . get (  )  . entrySet (  )  )     {", "ImmutableSet . Builder < Text >    familyBuilder    =    ImmutableSet . builder (  )  ;", "for    ( String   col    :    g . getValue (  )  )     {", "AccumuloColumnHandle   handle    =    table . getColumns (  )  . stream (  )  . filter (  (    x )     -  >    x . getName (  )  . equals ( col )  )  . collect ( Collectors . toList (  )  )  . get (  0  )  ;", "familyBuilder . add ( new   Text ( handle . getFamily (  )  . get (  )  )  )  ;", "}", "localityGroupsBuilder . put ( g . getKey (  )  ,    familyBuilder . build (  )  )  ;", "}", "Map < String ,    Set < Text >  >    localityGroups    =    localityGroupsBuilder . build (  )  ;", ". LOG . debug (  \" Setting   locality   groups :     {  }  \"  ,    localityGroups )  ;", "tableManager . setLocalityGroups ( table . getFullTableName (  )  ,    localityGroups )  ;", "}", "METHOD_END"], "methodName": ["setLocalityGroups"], "fileName": "com.facebook.presto.accumulo.AccumuloClient"}, {"methodBody": ["METHOD_START", "{", "ImmutableSet . Builder < Range >    rangeBuilder    =    ImmutableSet . builder (  )  ;", "for    ( Range   range    :    ranges )     {", "if    (  (  (  ( range . getStartKey (  )  )     !  =    null )     &  &     (  ( range . getEndKey (  )  )     !  =    null )  )     &  &     ( range . getStartKey (  )  . equals ( range . getEndKey (  )  )  )  )     {", "rangeBuilder . add ( range )  ;", "} else    {", "rangeBuilder . addAll ( connector . tableOperations (  )  . splitRangeByTablets ( tableName ,    range ,    Integer . MAX _ VALUE )  )  ;", "}", "}", "return   rangeBuilder . build (  )  ;", "}", "METHOD_END"], "methodName": ["splitByTabletBoundaries"], "fileName": "com.facebook.presto.accumulo.AccumuloClient"}, {"methodBody": ["METHOD_START", "{", "ImmutableSet . Builder < String >    columnNameBuilder    =    ImmutableSet . builder (  )  ;", "for    ( ColumnMetadata   column    :    meta . getColumns (  )  )     {", "if    ( Types . isMapType ( column . getType (  )  )  )     {", "if    (  (  (  ( Types . isMapType ( Types . getKeyType ( column . getType (  )  )  )  )     |  |     ( Types . isMapType ( Types . getValueType ( column . getType (  )  )  )  )  )     |  |     ( Types . isArrayType ( Types . getKeyType ( column . getType (  )  )  )  )  )     |  |     ( Types . isArrayType ( Types . getValueType ( column . getType (  )  )  )  )  )     {", "throw   new   spi . PrestoException ( StandardErrorCode . INVALID _ TABLE _ PROPERTY ,     \" Key / value   types   of   a   MAP   column   must   be   plain   types \"  )  ;", "}", "}", "columnNameBuilder . add ( column . getName (  )  . toLowerCase ( Locale . ENGLISH )  )  ;", "}", "if    (  ( columnNameBuilder . build (  )  . size (  )  )     !  =     ( meta . getColumns (  )  . size (  )  )  )     {", "throw   new   spi . PrestoException ( StandardErrorCode . INVALID _ TABLE _ PROPERTY ,     \" Duplicate   column   names   are   not   supported \"  )  ;", "}", "Optional < Map < String ,    Pair < String ,    String >  >  >    columnMapping    =    AccumuloTableProperties . getColumnMapping ( meta . getProperties (  )  )  ;", "if    ( columnMapping . isPresent (  )  )     {", "long   distinctMappings    =    columnMapping . get (  )  . values (  )  . stream (  )  . distinct (  )  . count (  )  ;", "if    ( distinctMappings    !  =     ( columnMapping . get (  )  . size (  )  )  )     {", "throw   new   spi . PrestoException ( StandardErrorCode . INVALID _ TABLE _ PROPERTY ,     (  \" Duplicate   column   family / qualifier   pair   detected   in   column   mapping ,    check   the   value   of    \"     +     ( AccumuloTableProperties . COLUMN _ MAPPING )  )  )  ;", "}", "String   reservedRowIdColumn    =    AccumuloPageSink . ROW _ ID _ COLUMN . toString (  )  ;", "if    (  ( columnMapping . get (  )  . values (  )  . stream (  )  . filter (  (    pair )     -  >     ( pair . getKey (  )  . equals ( reservedRowIdColumn )  )     &  &     ( pair . getValue (  )  . equals ( reservedRowIdColumn )  )  )  . count (  )  )     >     0  )     {", "throw   new   spi . PrestoException ( StandardErrorCode . INVALID _ TABLE _ PROPERTY ,    String . format (  \" Column   familiy / qualifier   mapping   of    % s :  % s   is   reserved \"  ,    reservedRowIdColumn ,    reservedRowIdColumn )  )  ;", "}", "} else", "if    ( AccumuloTableProperties . isExternal ( meta . getProperties (  )  )  )     {", "throw   new   spi . PrestoException ( StandardErrorCode . INVALID _ TABLE _ PROPERTY ,     (  \" Column   generation   for   external   tables   is   not   supported ,    must   specify    \"     +     ( AccumuloTableProperties . COLUMN _ MAPPING )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["validateColumns"], "fileName": "com.facebook.presto.accumulo.AccumuloClient"}, {"methodBody": ["METHOD_START", "{", "AccumuloClient . validateColumns ( meta )  ;", "AccumuloClient . validateLocalityGroups ( meta )  ;", "if    (  !  ( AccumuloTableProperties . isExternal ( meta . getProperties (  )  )  )  )     {", "validateInternalTable ( meta )  ;", "}", "}", "METHOD_END"], "methodName": ["validateCreateTable"], "fileName": "com.facebook.presto.accumulo.AccumuloClient"}, {"methodBody": ["METHOD_START", "{", "String   table    =    AccumuloTable . getFullTableName ( meta . getTable (  )  )  ;", "String   indexTable    =    Indexer . getIndexTableName ( meta . getTable (  )  )  ;", "String   metricsTable    =    Indexer . getMetricsTableName ( meta . getTable (  )  )  ;", "if    ( tableManager . exists ( table )  )     {", "throw   new   PrestoException ( AccumuloErrorCode . ACCUMULO _ TABLE _ EXISTS ,     \" Cannot   create   internal   table   when   an   Accumulo   table   already   exists \"  )  ;", "}", "if    ( AccumuloTableProperties . getIndexColumns ( meta . getProperties (  )  )  . isPresent (  )  )     {", "if    (  ( tableManager . exists ( indexTable )  )     |  |     ( tableManager . exists ( metricsTable )  )  )     {", "throw   new   PrestoException ( AccumuloErrorCode . ACCUMULO _ TABLE _ EXISTS ,     \" Internal   table   is   indexed ,    but   the   index   table   and / or   index   metrics   table ( s )    already   exist \"  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["validateInternalTable"], "fileName": "com.facebook.presto.accumulo.AccumuloClient"}, {"methodBody": ["METHOD_START", "{", "Optional < Map < String ,    Set < String >  >  >    groups    =    AccumuloTableProperties . getLocalityGroups ( meta . getProperties (  )  )  ;", "if    (  !  ( groups . isPresent (  )  )  )     {", "return ;", "}", "String   rowIdColumn    =    AccumuloClient . getRowIdColumn ( meta )  ;", "for    ( Map . Entry < String ,    Set < String >  >    g    :    groups . get (  )  . entrySet (  )  )     {", "if    ( g . getValue (  )  . contains ( rowIdColumn )  )     {", "throw   new   spi . PrestoException ( StandardErrorCode . INVALID _ TABLE _ PROPERTY ,     \" Row   ID   column   cannot   be   in   a   locality   group \"  )  ;", "}", "int   matchingColumns    =     0  ;", "for    ( ColumnMetadata   column    :    meta . getColumns (  )  )     {", "if    ( g . getValue (  )  . contains ( column . getName (  )  . toLowerCase ( Locale . ENGLISH )  )  )     {", "+  + matchingColumns ;", "if    ( matchingColumns    =  =     ( g . getValue (  )  . size (  )  )  )     {", "break ;", "}", "}", "}", "if    ( matchingColumns    !  =     ( g . getValue (  )  . size (  )  )  )     {", "throw   new   spi . PrestoException ( StandardErrorCode . INVALID _ TABLE _ PROPERTY ,     (  \" Unknown   Presto   column   defined   for   locality   group    \"     +     ( g . getKey (  )  )  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["validateLocalityGroups"], "fileName": "com.facebook.presto.accumulo.AccumuloClient"}, {"methodBody": ["METHOD_START", "{", "checkState (  (  ( rollbackAction . get (  )  )     =  =    null )  ,     \" Cannot   begin   a   new   write   while   in   an   existing   one \"  )  ;", "}", "METHOD_END"], "methodName": ["checkNoRollback"], "fileName": "com.facebook.presto.accumulo.AccumuloMetadata"}, {"methodBody": ["METHOD_START", "{", "rollbackAction . set ( null )  ;", "}", "METHOD_END"], "methodName": ["clearRollback"], "fileName": "com.facebook.presto.accumulo.AccumuloMetadata"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( client . getSchemaNames (  )  . contains ( tableName . getSchemaName (  )  )  )  )     {", "return   null ;", "}", "if    (  !  ( this . listViews ( tableName . getSchemaName (  )  )  . contains ( tableName )  )  )     {", "AccumuloTable   table    =    client . getTable ( tableName )  ;", "if    ( table    =  =    null )     {", "return   null ;", "}", "return   new   spi . ConnectorTableMetadata ( tableName ,    table . getColumnsMetadata (  )  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getTableMetadata"], "fileName": "com.facebook.presto.accumulo.AccumuloMetadata"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( prefix . getSchemaName (  )  )     =  =    null )     |  |     (  ( prefix . getTableName (  )  )     =  =    null )  )     {", "return   listTables ( session ,    prefix . getSchemaName (  )  )  ;", "}", "SchemaTableName   table    =    new   SchemaTableName ( prefix . getSchemaName (  )  ,    prefix . getTableName (  )  )  ;", "if    (  ( getTableHandle ( session ,    table )  )     !  =    null )     {", "return   ImmutableList . of ( table )  ;", "}", "return   ImmutableList . of (  )  ;", "}", "METHOD_END"], "methodName": ["listTables"], "fileName": "com.facebook.presto.accumulo.AccumuloMetadata"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < SchemaTableName >    builder    =    ImmutableList . builder (  )  ;", "if    ( schemaNameOrNull    =  =    null )     {", "for    ( String   schema    :    client . getSchemaNames (  )  )     {", "for    ( String   view    :    client . getViewNames ( schema )  )     {", "builder . add ( new   SchemaTableName ( schema ,    view )  )  ;", "}", "}", "} else    {", "for    ( String   view    :    client . getViewNames ( schemaNameOrNull )  )     {", "builder . add ( new   SchemaTableName ( schemaNameOrNull ,    view )  )  ;", "}", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["listViews"], "fileName": "com.facebook.presto.accumulo.AccumuloMetadata"}, {"methodBody": ["METHOD_START", "{", "Runnable   rollbackAction    =    this . rollbackAction . getAndSet ( null )  ;", "if    ( rollbackAction    !  =    null )     {", "rollbackAction . run (  )  ;", "}", "}", "METHOD_END"], "methodName": ["rollback"], "fileName": "com.facebook.presto.accumulo.AccumuloMetadata"}, {"methodBody": ["METHOD_START", "{", "client . dropTable ( table )  ;", "}", "METHOD_END"], "methodName": ["rollbackCreateTable"], "fileName": "com.facebook.presto.accumulo.AccumuloMetadata"}, {"methodBody": ["METHOD_START", "{", "AccumuloTableHandle   handle    =     (  ( AccumuloTableHandle )     ( insertHandle )  )  ;", "throw   new   spi . PrestoException ( StandardErrorCode . NOT _ SUPPORTED ,    String . format (  \" Unable   to   rollback   insert   for   table    % s .  % s .    Some   rows   may   have   been   written .    Please   run   your   insert   again .  \"  ,    handle . getSchema (  )  ,    handle . getTable (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["rollbackInsert"], "fileName": "com.facebook.presto.accumulo.AccumuloMetadata"}, {"methodBody": ["METHOD_START", "{", "checkState ( rollbackAction . compareAndSet ( null ,    action )  ,     \" Should   not   have   to   override   existing   rollback   action \"  )  ;", "}", "METHOD_END"], "methodName": ["setRollback"], "fileName": "com.facebook.presto.accumulo.AccumuloMetadata"}, {"methodBody": ["METHOD_START", "{", "return   new   AccumuloMetadata ( connectorId ,    client )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "com.facebook.presto.accumulo.AccumuloMetadataFactory"}, {"methodBody": ["METHOD_START", "{", "QualifiedObjectName   source    =    new   QualifiedObjectName ( catalog ,    schema ,    table . getTableName (  )  )  ;", "String   target    =    table . getTableName (  )  ;", "@ Language (  \" SQL \"  )", "String   sql ;", "switch    ( target )     {", "case    \" customer \"     :", "sql    =    String . format (  \" CREATE   TABLE    % s   WITH    ( index _ columns    =     ' mktsegment '  )    AS   SELECT    *    FROM    % s \"  ,    target ,    source )  ;", "break ;", "case    \" lineitem \"     :", "sql    =    String . format (  \" CREATE   TABLE    % s   WITH    ( index _ columns    =     ' quantity , discount , returnflag , shipdate , receiptdate , shipinstruct , shipmode '  )    AS   SELECT   UUID (  )    AS   uuid ,     *    FROM    % s \"  ,    target ,    source )  ;", "break ;", "case    \" orders \"     :", "sql    =    String . format (  \" CREATE   TABLE    % s   WITH    ( index _ columns    =     ' orderdate '  )    AS   SELECT    *    FROM    % s \"  ,    target ,    source )  ;", "break ;", "case    \" part \"     :", "sql    =    String . format (  \" CREATE   TABLE    % s   WITH    ( index _ columns    =     ' brand , type , size , container '  )    AS   SELECT    *    FROM    % s \"  ,    target ,    source )  ;", "break ;", "case    \" partsupp \"     :", "sql    =    String . format (  \" CREATE   TABLE    % s   WITH    ( index _ columns    =     ' partkey '  )    AS   SELECT   UUID (  )    AS   uuid ,     *    FROM    % s \"  ,    target ,    source )  ;", "break ;", "case    \" supplier \"     :", "sql    =    String . format (  \" CREATE   TABLE    % s   WITH    ( index _ columns    =     ' name '  )    AS   SELECT    *    FROM    % s \"  ,    target ,    source )  ;", "break ;", "default    :", "sql    =    String . format (  \" CREATE   TABLE    % s   AS   SELECT    *    FROM    % s \"  ,    target ,    source )  ;", "break ;", "}", ". LOG . info (  \" Running   import   for    % s \"  ,    target ,    sql )  ;", ". LOG . info (  \"  % s \"  ,    sql )  ;", "long   start    =    System . nanoTime (  )  ;", "long   rows    =    queryRunner . execute ( session ,    sql )  . getUpdateCount (  )  . getAsLong (  )  ;", ". LOG . info (  \" Imported    % s   rows   for    % s   in    % s \"  ,    rows ,    target ,    nanosSince ( start )  )  ;", "}", "METHOD_END"], "methodName": ["copyTable"], "fileName": "com.facebook.presto.accumulo.AccumuloQueryRunner"}, {"methodBody": ["METHOD_START", "{", "AccumuloQueryRunner . LOG . info (  \" Loading   data   from    % s .  % s .  .  .  \"  ,    sourceCatalog ,    sourceSchema )  ;", "long   startTime    =    System . nanoTime (  )  ;", "for    ( TpchTable <  ?  >    table    :    tables )     {", "AccumuloQueryRunner . copyTable ( queryRunner ,    sourceCatalog ,    session ,    sourceSchema ,    table )  ;", "}", "AccumuloQueryRunner . LOG . info (  \" Loading   from    % s .  % s   complete   in    % s \"  ,    sourceCatalog ,    sourceSchema ,    nanosSince ( startTime )  . toString ( TimeUnit . SECONDS )  )  ;", "}", "METHOD_END"], "methodName": ["copyTpchTables"], "fileName": "com.facebook.presto.accumulo.AccumuloQueryRunner"}, {"methodBody": ["METHOD_START", "{", "DistributedQueryRunner   queryRunner    =    new   DistributedQueryRunner ( AccumuloQueryRunner . createSession (  )  ,     4  ,    extraProperties )  ;", "queryRunner . installPlugin ( new   TpchPlugin (  )  )  ;", "queryRunner . createCatalog (  \" tpch \"  ,     \" tpch \"  )  ;", "queryRunner . installPlugin ( new   AccumuloPlugin (  )  )  ;", "Map < String ,    String >    accumuloProperties    =    ImmutableMap .  < String ,    String > builder (  )  . put ( AccumuloConfig . INSTANCE ,    AccumuloQueryRunner . connector . getInstance (  )  . getInstanceName (  )  )  . put ( AccumuloConfig . ZOOKEEPERS ,    AccumuloQueryRunner . connector . getInstance (  )  . getZooKeepers (  )  )  . put ( AccumuloConfig . USERNAME ,    AccumuloQueryRunner . MAC _ USER )  . put ( AccumuloConfig . PASSWORD ,    AccumuloQueryRunner . MAC _ PASSWORD )  . put ( AccumuloConfig . ZOOKEEPER _ METADATA _ ROOT ,     \"  / presto - accumulo - test \"  )  . build (  )  ;", "queryRunner . createCatalog (  \" accumulo \"  ,     \" accumulo \"  ,    accumuloProperties )  ;", "if    (  !  ( AccumuloQueryRunner . tpchLoaded )  )     {", "AccumuloQueryRunner . copyTpchTables ( queryRunner ,     \" tpch \"  ,    TINY _ SCHEMA _ NAME ,    AccumuloQueryRunner . createSession (  )  ,    TpchTable . getTables (  )  )  ;", "AccumuloQueryRunner . connector . tableOperations (  )  . addSplits (  \" tpch . orders \"  ,    ImmutableSortedSet . of ( new   Text ( new   LexicoderRowSerializer (  )  . encode ( BigintType . BIGINT ,     7  5  0  0 L )  )  )  )  ;", "AccumuloQueryRunner . tpchLoaded    =    true ;", "}", "return   queryRunner ;", "}", "METHOD_END"], "methodName": ["createAccumuloQueryRunner"], "fileName": "com.facebook.presto.accumulo.AccumuloQueryRunner"}, {"methodBody": ["METHOD_START", "{", "File   macDir    =    Files . createTempDirectory (  \" mac -  \"  )  . toFile (  )  ;", ". LOG . info (  \" MAC   is   enabled ,    starting   MiniAccumuloCluster   at    % s \"  ,    macDir )  ;", "MiniAccumuloCluster   accumulo    =    new   MiniAccumuloCluster ( macDir ,     . MAC _ PASSWORD )  ;", "accumulo . getConfig (  )  . setDefaultMemory (  5  1  2  ,    MEGABYTE )  ;", "MiniAccumuloConfigUtil . setConfigClassPath ( accumulo . getConfig (  )  )  ;", "accumulo . start (  )  ;", "Runtime . getRuntime (  )  . addShutdownHook ( new   Thread (  (  )     -  >     {", "try    {", ". LOG . info (  \" Shutting   down   MAC \"  )  ;", "accumulo . stop (  )  ;", "}    catch    ( IOException    |    InterruptedException   e )     {", "Thread . currentThread (  )  . interrupt (  )  ;", "throw   new   PrestoException ( AccumuloErrorCode . MINI _ ACCUMULO ,     \" Failed   to   shut   down   MAC   instance \"  ,    e )  ;", "}", "try    {", ". LOG . info (  \" Cleaning   up   MAC   directory \"  )  ;", "FileUtils . forceDelete ( macDir )  ;", "}    catch    ( IOException   e )     {", "throw   new   PrestoException ( AccumuloErrorCode . MINI _ ACCUMULO ,     \" Failed   to   clean   up   MAC   directory \"  ,    e )  ;", "}", "}  )  )  ;", "return   accumulo ;", "}", "METHOD_END"], "methodName": ["createMiniAccumuloCluster"], "fileName": "com.facebook.presto.accumulo.AccumuloQueryRunner"}, {"methodBody": ["METHOD_START", "{", "return   testSessionBuilder (  )  . setCatalog (  \" accumulo \"  )  . setSchema (  \" tpch \"  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["createSession"], "fileName": "com.facebook.presto.accumulo.AccumuloQueryRunner"}, {"methodBody": ["METHOD_START", "{", "if    (  ( AccumuloQueryRunner . connector )     !  =    null )     {", "return   AccumuloQueryRunner . connector ;", "}", "try    {", "MiniAccumuloCluster   accumulo    =    AccumuloQueryRunner . createMiniAccumuloCluster (  )  ;", "Instance   instance    =    new   ZooKeeperInstance ( accumulo . getInstanceName (  )  ,    accumulo . getZooKeepers (  )  )  ;", "AccumuloQueryRunner . connector    =    instance . getConnector ( AccumuloQueryRunner . MAC _ USER ,    new   PasswordToken ( AccumuloQueryRunner . MAC _ PASSWORD )  )  ;", "AccumuloQueryRunner . LOG . info (  \" Connection   to   MAC   instance    % s   at    % s   established ,    user    % s   password    % s \"  ,    accumulo . getInstanceName (  )  ,    accumulo . getZooKeepers (  )  ,    AccumuloQueryRunner . MAC _ USER ,    AccumuloQueryRunner . MAC _ PASSWORD )  ;", "return   AccumuloQueryRunner . connector ;", "}    catch    ( AccumuloException    |    AccumuloSecurityException    |    InterruptedException    |    IOException   e )     {", "throw   new   PrestoException ( AccumuloErrorCode . UNEXPECTED _ ACCUMULO _ ERROR ,     \" Failed   to   get   connector   to   Accumulo \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["getAccumuloConnector"], "fileName": "com.facebook.presto.accumulo.AccumuloQueryRunner"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < AccumuloColumnConstraint >    constraintBuilder    =    ImmutableList . builder (  )  ;", "for    ( ColumnDomain < ColumnHandle >    columnDomain    :    constraint . getColumnDomains (  )  . get (  )  )     {", "AccumuloColumnHandle   columnHandle    =     (  ( AccumuloColumnHandle )     ( columnDomain . getColumn (  )  )  )  ;", "if    (  !  ( columnHandle . getName (  )  . equals ( rowIdName )  )  )     {", "constraintBuilder . add ( new   AccumuloColumnConstraint ( columnHandle . getName (  )  ,    columnHandle . getFamily (  )  . get (  )  ,    columnHandle . getQualifier (  )  . get (  )  ,    Optional . of ( columnDomain . getDomain (  )  )  ,    columnHandle . isIndexed (  )  )  )  ;", "}", "}", "return   constraintBuilder . build (  )  ;", "}", "METHOD_END"], "methodName": ["getColumnConstraints"], "fileName": "com.facebook.presto.accumulo.AccumuloSplitManager"}, {"methodBody": ["METHOD_START", "{", "if    ( constraint . getColumnDomains (  )  . isPresent (  )  )     {", "for    ( ColumnDomain < ColumnHandle >    cd    :    constraint . getColumnDomains (  )  . get (  )  )     {", "ColumnHandle   col    =     (  ( ColumnHandle )     ( cd . getColumn (  )  )  )  ;", "if    ( col . getName (  )  . equals ( rowIdName )  )     {", "return   Optional . of ( cd . getDomain (  )  )  ;", "}", "}", "}", "return   Optional . empty (  )  ;", "}", "METHOD_END"], "methodName": ["getRangeDomain"], "fileName": "com.facebook.presto.accumulo.AccumuloSplitManager"}, {"methodBody": ["METHOD_START", "{", "try    {", "connector . tableOperations (  )  . create ( table )  ;", "}    catch    ( Exception    |    SecurityException   e )     {", "throw   new   PrestoException ( ErrorCode . UNEXPECTED _ ACCUMULO _ ERROR ,     \" Failed   to   create      table \"  ,    e )  ;", "}    catch    ( TableExistsException   e )     {", "throw   new   PrestoException ( ErrorCode . ACCUMULO _ TABLE _ EXISTS ,     \"    table   already   exists \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["createAccumuloTable"], "fileName": "com.facebook.presto.accumulo.AccumuloTableManager"}, {"methodBody": ["METHOD_START", "{", "try    {", "connector . tableOperations (  )  . delete ( tableName )  ;", "}    catch    ( Exception    |    SecurityException   e )     {", "throw   new   PrestoException ( ErrorCode . UNEXPECTED _ ACCUMULO _ ERROR ,     \" Failed   to   delete      table \"  ,    e )  ;", "}    catch    ( TableNotFoundException   e )     {", "throw   new   PrestoException ( ErrorCode . ACCUMULO _ TABLE _ DNE ,     \" Failed   to   delete      table ,    does   not   exist \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["deleteAccumuloTable"], "fileName": "com.facebook.presto.accumulo.AccumuloTableManager"}, {"methodBody": ["METHOD_START", "{", "try    {", "if    (  (  !  ( schema . equals (  . DEFAULT )  )  )     &  &     (  !  ( connector . namespaceOperations (  )  . exists ( schema )  )  )  )     {", "connector . namespaceOperations (  )  . create ( schema )  ;", "}", "}    catch    ( AccumuloException    |    AccumuloSecurityException   e )     {", "throw   new   PrestoException ( AccumuloErrorCode . UNEXPECTED _ ACCUMULO _ ERROR ,     \" Failed   to   check   for   existence   or   create   Accumulo   namespace \"  ,    e )  ;", "}    catch    ( NamespaceExistsException   e )     {", ". LOG . warn (  (  \" NamespaceExistsException   suppressed   when   creating    \"     +    schema )  )  ;", "}", "}", "METHOD_END"], "methodName": ["ensureNamespace"], "fileName": "com.facebook.presto.accumulo.AccumuloTableManager"}, {"methodBody": ["METHOD_START", "{", "return   connector . tableOperations (  )  . exists ( table )  ;", "}", "METHOD_END"], "methodName": ["exists"], "fileName": "com.facebook.presto.accumulo.AccumuloTableManager"}, {"methodBody": ["METHOD_START", "{", "try    {", "connector . tableOperations (  )  . rename ( oldName ,    newName )  ;", "}    catch    ( SecurityException    |    Exception   e )     {", "throw   new   PrestoException ( ErrorCode . UNEXPECTED _ ACCUMULO _ ERROR ,     \" Failed   to   rename   table \"  ,    e )  ;", "}    catch    ( TableNotFoundException   e )     {", "throw   new   PrestoException ( ErrorCode . ACCUMULO _ TABLE _ DNE ,     \" Failed   to   rename   table ,    old   table   does   not   exist \"  ,    e )  ;", "}    catch    ( TableExistsException   e )     {", "throw   new   PrestoException ( ErrorCode . ACCUMULO _ TABLE _ EXISTS ,     \" Failed   to   rename   table ,    new   table   already   exists \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["renameAccumuloTable"], "fileName": "com.facebook.presto.accumulo.AccumuloTableManager"}, {"methodBody": ["METHOD_START", "{", "try    {", "Map < String ,    EnumSet < IteratorScope >  >    iterators    =    connector . tableOperations (  )  . listIterators ( table )  ;", "if    ( iterators . containsKey ( setting . getName (  )  )  )     {", "connector . tableOperations (  )  . removeIterator ( table ,    setting . getName (  )  ,    iterators . get ( setting . getName (  )  )  )  ;", "}", "connector . tableOperations (  )  . attachIterator ( table ,    setting )  ;", "}    catch    ( SecurityException    |    Exception   e )     {", "throw   new   PrestoException ( ErrorCode . UNEXPECTED _ ACCUMULO _ ERROR ,     (  \" Failed   to   set   iterator   on   table    \"     +    table )  ,    e )  ;", "}    catch    ( TableNotFoundException   e )     {", "throw   new   PrestoException ( ErrorCode . ACCUMULO _ TABLE _ DNE ,     \" Failed   to   set   iterator ,    table   does   not   exist \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["setIterator"], "fileName": "com.facebook.presto.accumulo.AccumuloTableManager"}, {"methodBody": ["METHOD_START", "{", "if    ( groups . isEmpty (  )  )     {", "return ;", "}", "try    {", "connector . tableOperations (  )  . setLocalityGroups ( tableName ,    groups )  ;", ". LOG . debug (  \" Set   locality   groups   for    % s   to    % s \"  ,    tableName ,    groups )  ;", "}    catch    ( AccumuloException    |    AccumuloSecurityException   e )     {", "throw   new   PrestoException ( AccumuloErrorCode . UNEXPECTED _ ACCUMULO _ ERROR ,     \" Failed   to   set   locality   groups \"  ,    e )  ;", "}    catch    ( TableNotFoundException   e )     {", "throw   new   PrestoException ( AccumuloErrorCode . ACCUMULO _ TABLE _ DNE ,     \" Failed   to   set   locality   groups ,    table   does   not   exist \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["setLocalityGroups"], "fileName": "com.facebook.presto.accumulo.AccumuloTableManager"}, {"methodBody": ["METHOD_START", "{", "return   uuid ;", "}", "METHOD_END"], "methodName": ["getUuid"], "fileName": "com.facebook.presto.accumulo.AccumuloTransactionHandle"}, {"methodBody": ["METHOD_START", "{", "try    {", "Field   field    =     . class . getDeclaredField (  \" impl \"  )  ;", "field . setAccessible ( true )  ;", "return    (  ( Impl )     ( field . get ( config )  )  )  ;", "}    catch    ( ReflectiveOperationException   e )     {", "throw   new   AssertionError ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["getConfigImpl"], "fileName": "com.facebook.presto.accumulo.MiniAccumuloConfigUtil"}, {"methodBody": ["METHOD_START", "{", "List < String >    items    =    Splitter . on ( File . pathSeparatorChar )  . splitToList ( ManagementFactory . getRuntimeMXBean (  )  . getClassPath (  )  )  ;", ". getConfigImpl ( config )  . setClasspathItems ( items . toArray ( new   String [  0  ]  )  )  ;", "}", "METHOD_END"], "methodName": ["setConfigClassPath"], "fileName": "com.facebook.presto.accumulo.MiniAccumuloConfigUtil"}, {"methodBody": ["METHOD_START", "{", "SchemaTableName   tableName    =    new   SchemaTableName (  \" default \"  ,     \" test _ create _ table _ empty _ accumulo _ column \"  )  ;", "try    {", "List < ColumnMetadata >    columns    =    ImmutableList . of ( new   ColumnMetadata (  \" id \"  ,    BigintType . BIGINT )  ,    new   ColumnMetadata (  \" a \"  ,    BigintType . BIGINT )  ,    new   ColumnMetadata (  \" b \"  ,    BigintType . BIGINT )  ,    new   ColumnMetadata (  \" c \"  ,    BigintType . BIGINT )  ,    new   ColumnMetadata (  \" d \"  ,    BigintType . BIGINT )  )  ;", "Map < String ,    Object >    properties    =    new   HashMap <  >  (  )  ;", "new   AccumuloTableProperties (  )  . getTableProperties (  )  . forEach (  (    meta )     -  >    properties . put ( meta . getName (  )  ,    meta . getDefaultValue (  )  )  )  ;", "properties . put (  \" external \"  ,    true )  ;", "properties . put (  \" column _ mapping \"  ,     \" a : a : a , b :  : b , c : c :  , d :  :  \"  )  ;", "client . createTable ( new   spi . ConnectorTableMetadata ( tableName ,    columns ,    properties )  )  ;", "assertNotNull ( client . getTable ( tableName )  )  ;", "}    finally    {", "AccumuloTable   table    =    zooKeeperMetadataManager . getTable ( tableName )  ;", "if    ( table    !  =    null )     {", "client . dropTable ( table )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testCreateTableEmptyAccumuloColumn"], "fileName": "com.facebook.presto.accumulo.TestAccumuloClient"}, {"methodBody": ["METHOD_START", "{", "try    {", "assertUpdate (  \" CREATE   TABLE   test _ create _ table _ empty _ columns   WITH    ( column _ mapping    =     ' a : a : a , b :  : b , c : c :  , d :  :  '  ,    index _ columns =  ' a , b , c , d '  )    AS   SELECT    1    id ,     2    a ,     3    b ,     4    c ,     5    d \"  ,     1  )  ;", "asserty (  \" SELECT    *    FROM   test _ create _ table _ empty _ columns \"  ,     \" SELECT    1  ,     2  ,     3  ,     4  ,     5  \"  )  ;", "asserty (  \" SELECT    *    FROM   test _ create _ table _ empty _ columns   WHERE   a    =     2  \"  ,     \" SELECT    1  ,     2  ,     3  ,     4  ,     5  \"  )  ;", "asserty (  \" SELECT    *    FROM   test _ create _ table _ empty _ columns   WHERE   b    =     3  \"  ,     \" SELECT    1  ,     2  ,     3  ,     4  ,     5  \"  )  ;", "asserty (  \" SELECT    *    FROM   test _ create _ table _ empty _ columns   WHERE   c    =     4  \"  ,     \" SELECT    1  ,     2  ,     3  ,     4  ,     5  \"  )  ;", "asserty (  \" SELECT    *    FROM   test _ create _ table _ empty _ columns   WHERE   d    =     5  \"  ,     \" SELECT    1  ,     2  ,     3  ,     4  ,     5  \"  )  ;", "}    finally    {", "assertUpdate (  \" DROP   TABLE   test _ create _ table _ empty _ columns \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["testCreateTableEmptyColumns"], "fileName": "com.facebook.presto.accumulo.TestAccumuloDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "try    {", "assertUpdate (  \" CREATE   TABLE   test _ insert _ duplicate   AS   SELECT    1    a ,     2    b ,     '  3  '    c \"  ,     1  )  ;", "asserty (  \" SELECT   a ,    b ,    c   FROM   test _ insert _ duplicate \"  ,     \" SELECT    1  ,     2  ,     '  3  '  \"  )  ;", "assertUpdate (  \" INSERT   INTO   test _ insert _ duplicate    ( a ,    c )    VALUES    (  1  ,     '  4  '  )  \"  ,     1  )  ;", "assertUpdate (  \" INSERT   INTO   test _ insert _ duplicate    ( a ,    b )    VALUES    (  1  ,     3  )  \"  ,     1  )  ;", "asserty (  \" SELECT   a ,    b ,    c   FROM   test _ insert _ duplicate \"  ,     \" SELECT    1  ,     3  ,     '  4  '  \"  )  ;", "}    finally    {", "assertUpdate (  \" DROP   TABLE   test _ insert _ duplicate \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["testInsertDuplicateRows"], "fileName": "com.facebook.presto.accumulo.TestAccumuloDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   partsupp   WHERE   partkey    =     1  \"  ,     \" SELECT    4  \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   partsupp   WHERE   partkey    =     2  \"  ,     \" SELECT    4  \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   partsupp   WHERE   partkey   IN    (  1  ,     2  )  \"  ,     \" SELECT    8  \"  )  ;", "}", "METHOD_END"], "methodName": ["testMultiInBelowCardinality"], "fileName": "com.facebook.presto.accumulo.TestAccumuloDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "try    {", "assertUpdate (  \" CREATE   TABLE   test _ select _ null _ value   AS   SELECT    1    a ,     2    b ,    CAST ( NULL   AS   BIGINT )    c \"  ,     1  )  ;", "asserty (  \" SELECT    *    FROM   test _ select _ null _ value \"  ,     \" SELECT    1  ,     2  ,    NULL \"  )  ;", "asserty (  \" SELECT   a ,    c   FROM   test _ select _ null _ value \"  ,     \" SELECT    1  ,    NULL \"  )  ;", "}    finally    {", "assertUpdate (  \" DROP   TABLE   test _ select _ null _ value \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["testSelectNullValue"], "fileName": "com.facebook.presto.accumulo.TestAccumuloDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "return   type . getTypeParameters (  )  . get (  0  )  ;", "}", "METHOD_END"], "methodName": ["getElementType"], "fileName": "com.facebook.presto.accumulo.Types"}, {"methodBody": ["METHOD_START", "{", "return   type . getTypeParameters (  )  . get (  0  )  ;", "}", "METHOD_END"], "methodName": ["getKeyType"], "fileName": "com.facebook.presto.accumulo.Types"}, {"methodBody": ["METHOD_START", "{", "return   type . getTypeParameters (  )  . get (  1  )  ;", "}", "METHOD_END"], "methodName": ["getValueType"], "fileName": "com.facebook.presto.accumulo.Types"}, {"methodBody": ["METHOD_START", "{", "return   type . getTypeSignature (  )  . getBase (  )  . equals ( ARRAY )  ;", "}", "METHOD_END"], "methodName": ["isArrayType"], "fileName": "com.facebook.presto.accumulo.Types"}, {"methodBody": ["METHOD_START", "{", "return   type . getTypeSignature (  )  . getBase (  )  . equals ( MAP )  ;", "}", "METHOD_END"], "methodName": ["isMapType"], "fileName": "com.facebook.presto.accumulo.Types"}, {"methodBody": ["METHOD_START", "{", "return   cardinalityCacheExpiration ;", "}", "METHOD_END"], "methodName": ["getCardinalityCacheExpiration"], "fileName": "com.facebook.presto.accumulo.conf.AccumuloConfig"}, {"methodBody": ["METHOD_START", "{", "return   cardinalityCacheSize ;", "}", "METHOD_END"], "methodName": ["getCardinalityCacheSize"], "fileName": "com.facebook.presto.accumulo.conf.AccumuloConfig"}, {"methodBody": ["METHOD_START", "{", "return   this . instance ;", "}", "METHOD_END"], "methodName": ["getInstance"], "fileName": "com.facebook.presto.accumulo.conf.AccumuloConfig"}, {"methodBody": ["METHOD_START", "{", "return   this . password ;", "}", "METHOD_END"], "methodName": ["getPassword"], "fileName": "com.facebook.presto.accumulo.conf.AccumuloConfig"}, {"methodBody": ["METHOD_START", "{", "return   this . username ;", "}", "METHOD_END"], "methodName": ["getUsername"], "fileName": "com.facebook.presto.accumulo.conf.AccumuloConfig"}, {"methodBody": ["METHOD_START", "{", "return   zkMetadataRoot ;", "}", "METHOD_END"], "methodName": ["getZkMetadataRoot"], "fileName": "com.facebook.presto.accumulo.conf.AccumuloConfig"}, {"methodBody": ["METHOD_START", "{", "return   this . zooKeepers ;", "}", "METHOD_END"], "methodName": ["getZooKeepers"], "fileName": "com.facebook.presto.accumulo.conf.AccumuloConfig"}, {"methodBody": ["METHOD_START", "{", "this . cardinalityCacheExpiration    =    cardinalityCacheExpiration ;", "}", "METHOD_END"], "methodName": ["setCardinalityCacheExpiration"], "fileName": "com.facebook.presto.accumulo.conf.AccumuloConfig"}, {"methodBody": ["METHOD_START", "{", "this . cardinalityCacheSize    =    cardinalityCacheSize ;", "}", "METHOD_END"], "methodName": ["setCardinalityCacheSize"], "fileName": "com.facebook.presto.accumulo.conf.AccumuloConfig"}, {"methodBody": ["METHOD_START", "{", "this . instance    =    instance ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setInstance"], "fileName": "com.facebook.presto.accumulo.conf.AccumuloConfig"}, {"methodBody": ["METHOD_START", "{", "this . password    =    password ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setPassword"], "fileName": "com.facebook.presto.accumulo.conf.AccumuloConfig"}, {"methodBody": ["METHOD_START", "{", "this . username    =    username ;", "turn   this ;", "}", "METHOD_END"], "methodName": ["setUsername"], "fileName": "com.facebook.presto.accumulo.conf.AccumuloConfig"}, {"methodBody": ["METHOD_START", "{", "this . zkMetadataRoot    =    zkMetadataRoot ;", "}", "METHOD_END"], "methodName": ["setZkMetadataRoot"], "fileName": "com.facebook.presto.accumulo.conf.AccumuloConfig"}, {"methodBody": ["METHOD_START", "{", "this . zooKeepers    =    zooKeepers ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setZooKeepers"], "fileName": "com.facebook.presto.accumulo.conf.AccumuloConfig"}, {"methodBody": ["METHOD_START", "{", "return   Duration . valueOf ( session . getProperty ( AccumuloSessionProperties . INDEX _ CARDINALITY _ CACHE _ POLLING _ DURATION ,    String . class )  )  ;", "}", "METHOD_END"], "methodName": ["getIndexCardinalityCachePollingDuration"], "fileName": "com.facebook.presto.accumulo.conf.AccumuloSessionProperties"}, {"methodBody": ["METHOD_START", "{", "return   session . getProperty ( AccumuloSessionProperties . INDEX _ LOWEST _ CARDINALITY _ THRESHOLD ,    Double . class )  ;", "}", "METHOD_END"], "methodName": ["getIndexSmallCardThreshold"], "fileName": "com.facebook.presto.accumulo.conf.AccumuloSessionProperties"}, {"methodBody": ["METHOD_START", "{", "return   session . getProperty ( AccumuloSessionProperties . INDEX _ THRESHOLD ,    Double . class )  ;", "}", "METHOD_END"], "methodName": ["getIndexThreshold"], "fileName": "com.facebook.presto.accumulo.conf.AccumuloSessionProperties"}, {"methodBody": ["METHOD_START", "{", "return   session . getProperty ( AccumuloSessionProperties . INDEX _ ROWS _ PER _ SPLIT ,    Integer . class )  ;", "}", "METHOD_END"], "methodName": ["getNumIndexRowsPerSplit"], "fileName": "com.facebook.presto.accumulo.conf.AccumuloSessionProperties"}, {"methodBody": ["METHOD_START", "{", "return   session . getProperty ( AccumuloSessionProperties . SCAN _ USERNAME ,    String . class )  ;", "}", "METHOD_END"], "methodName": ["getScanUsername"], "fileName": "com.facebook.presto.accumulo.conf.AccumuloSessionProperties"}, {"methodBody": ["METHOD_START", "{", "return   sessionProperties ;", "}", "METHOD_END"], "methodName": ["getSessionProperties"], "fileName": "com.facebook.presto.accumulo.conf.AccumuloSessionProperties"}, {"methodBody": ["METHOD_START", "{", "return   session . getProperty ( AccumuloSessionProperties . INDEX _ METRICS _ ENABLED ,    Boolean . class )  ;", "}", "METHOD_END"], "methodName": ["isIndexMetricsEnabled"], "fileName": "com.facebook.presto.accumulo.conf.AccumuloSessionProperties"}, {"methodBody": ["METHOD_START", "{", "return   session . getProperty ( AccumuloSessionProperties . INDEX _ SHORT _ CIRCUIT _ CARDINALITY _ FETCH ,    Boolean . class )  ;", "}", "METHOD_END"], "methodName": ["isIndexShortCircuitEnabled"], "fileName": "com.facebook.presto.accumulo.conf.AccumuloSessionProperties"}, {"methodBody": ["METHOD_START", "{", "return   session . getProperty ( AccumuloSessionProperties . OPTIMIZE _ INDEX _ ENABLED ,    Boolean . class )  ;", "}", "METHOD_END"], "methodName": ["isOptimizeIndexEnabled"], "fileName": "com.facebook.presto.accumulo.conf.AccumuloSessionProperties"}, {"methodBody": ["METHOD_START", "{", "return   session . getProperty ( AccumuloSessionProperties . OPTIMIZE _ LOCALITY _ ENABLED ,    Boolean . class )  ;", "}", "METHOD_END"], "methodName": ["isOptimizeLocalityEnabled"], "fileName": "com.facebook.presto.accumulo.conf.AccumuloSessionProperties"}, {"methodBody": ["METHOD_START", "{", "return   session . getProperty ( AccumuloSessionProperties . OPTIMIZE _ SPLIT _ RANGES _ ENABLED ,    Boolean . class )  ;", "}", "METHOD_END"], "methodName": ["isOptimizeSplitRangesEnabled"], "fileName": "com.facebook.presto.accumulo.conf.AccumuloSessionProperties"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( tableProperties )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "String   strMapping    =     (  ( String )     ( tableProperties . get (  . COLUMN _ MAPPING )  )  )  ;", "if    ( strMapping    =  =    null )     {", "return   Optional . empty (  )  ;", "}", "Builder < String ,    Pair < String ,    String >  >    mapping    =    ImmutableMap . builder (  )  ;", "for    ( String   m    :     . COMMA _ SPLITTER . split ( strMapping )  )     {", "String [  ]    tokens    =    Iterables . toArray (  . COLON _ SPLITTER . split ( m )  ,    String . class )  ;", "checkState (  (  ( tokens . length )     =  =     3  )  ,    String . format (  \" Mapping   of    % s   contains    % d   tokens   instead   of    3  \"  ,    m ,    tokens . length )  )  ;", "mapping . put ( tokens [  0  ]  ,    Pair . of ( tokens [  1  ]  ,    tokens [  2  ]  )  )  ;", "}", "return   Optional . of ( mapping . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["getColumnMapping"], "fileName": "com.facebook.presto.accumulo.conf.AccumuloTableProperties"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( tableProperties )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "String   indexColumns    =     (  ( String )     ( tableProperties . get (  . INDEX _ COLUMNS )  )  )  ;", "if    ( indexColumns    =  =    null )     {", "return   Optional . empty (  )  ;", "}", "return   Optional . of ( Arrays . asList ( StringUtils . split ( indexColumns ,     '  ,  '  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getIndexColumns"], "fileName": "com.facebook.presto.accumulo.conf.AccumuloTableProperties"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( tableProperties )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "String   groupStr    =     (  ( String )     ( tableProperties . get (  . LOCALITY _ GROUPS )  )  )  ;", "if    ( groupStr    =  =    null )     {", "return   Optional . empty (  )  ;", "}", "Builder < String ,    Set < String >  >    groups    =    ImmutableMap . builder (  )  ;", "for    ( String   group    :     . PIPE _ SPLITTER . split ( groupStr )  )     {", "String [  ]    locGroups    =    Iterables . toArray (  . COLON _ SPLITTER . split ( group )  ,    String . class )  ;", "if    (  ( locGroups . length )     !  =     2  )     {", "throw   new   com . facebook . presto . spi . PrestoException ( StandardErrorCode . INVALID _ TABLE _ PROPERTY ,     \" Locality   groups   string   is   malformed .    See   documentation   for   proper   format .  \"  )  ;", "}", "String   grpName    =    locGroups [  0  ]  ;", "ImmutableSet . Builder < String >    colSet    =    ImmutableSet . builder (  )  ;", "for    ( String   f    :     . COMMA _ SPLITTER . split ( locGroups [  1  ]  )  )     {", "colSet . add ( f . toLowerCase ( Locale . ENGLISH )  )  ;", "}", "groups . put ( grpName . toLowerCase ( Locale . ENGLISH )  ,    colSet . build (  )  )  ;", "}", "return   Optional . of ( groups . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["getLocalityGroups"], "fileName": "com.facebook.presto.accumulo.conf.AccumuloTableProperties"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( tableProperties )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "String   rowId    =     (  ( String )     ( tableProperties . get (  . ROW _ ID )  )  )  ;", "return   Optional . ofNullable ( rowId )  ;", "}", "METHOD_END"], "methodName": ["getRowId"], "fileName": "com.facebook.presto.accumulo.conf.AccumuloTableProperties"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( tableProperties )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "String   scanAuths    =     (  ( String )     ( tableProperties . get (  . SCAN _ AUTHS )  )  )  ;", "return   Optional . ofNullable ( scanAuths )  ;", "}", "METHOD_END"], "methodName": ["getScanAuthorizations"], "fileName": "com.facebook.presto.accumulo.conf.AccumuloTableProperties"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( tableProperties )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "String   serializerClass    =     (  ( String )     ( tableProperties . get (  . SERIALIZER )  )  )  ;", "return   serializerClass ;", "}", "METHOD_END"], "methodName": ["getSerializerClass"], "fileName": "com.facebook.presto.accumulo.conf.AccumuloTableProperties"}, {"methodBody": ["METHOD_START", "{", "return   tableProperties ;", "}", "METHOD_END"], "methodName": ["getTableProperties"], "fileName": "com.facebook.presto.accumulo.conf.AccumuloTableProperties"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( tableProperties )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "Boolean   serializerClass    =     (  ( Boolean )     ( tableProperties . get (  . EXTERNAL )  )  )  ;", "return   serializerClass ;", "}", "METHOD_END"], "methodName": ["isExternal"], "fileName": "com.facebook.presto.accumulo.conf.AccumuloTableProperties"}, {"methodBody": ["METHOD_START", "{", "CompletionService < Pair < Long ,    AccumuloColumnConstraint >  >    executor    =    new   ExecutorCompletionService ( executorService )  ;", "idxConstraintRangePairs . asMap (  )  . forEach (  (    key ,    value )     -  >    executor . submit (  (  )     -  >     {", "long   cardinality    =    getColumnCardinality ( schema ,    table ,    auths ,    key . getFamily (  )  ,    key . getQualifier (  )  ,    value )  ;", ". LOG . debug (  \" Cardinality   for   column    % s   is    % s \"  ,    key . getName (  )  ,    cardinality )  ;", "return   Pair . of ( cardinality ,    key )  ;", "}  )  )  ;", "ListMultimap < Long ,    AccumuloColumnConstraint >    cardinalityToConstraints    =    MultimapBuilder . treeKeys (  )  . arrayListValues (  )  . build (  )  ;", "try    {", "boolean   earlyReturn    =    false ;", "int   numTasks    =    idxConstraintRangePairs . asMap (  )  . entrySet (  )  . size (  )  ;", "do    {", "Thread . sleep ( pollingDuration . toMillis (  )  )  ;", "for    ( int   i    =     0  ;    i    <    numTasks ;     +  + i )     {", "Future < Pair < Long ,    AccumuloColumnConstraint >  >    futureCardinality    =    executor . poll (  )  ;", "if    (  ( futureCardinality    !  =    null )     &  &     ( futureCardinality . isDone (  )  )  )     {", "Pair < Long ,    AccumuloColumnConstraint >    columnCardinality    =    futureCardinality . get (  )  ;", "cardinalityToConstraints . put ( columnCardinality . getLeft (  )  ,    columnCardinality . getRight (  )  )  ;", "}", "}", "Optional < Map . Entry < Long ,    AccumuloColumnConstraint >  >    smallestCardinality    =    cardinalityToConstraints . entries (  )  . stream (  )  . findFirst (  )  ;", "if    ( smallestCardinality . isPresent (  )  )     {", "if    (  ( smallestCardinality . get (  )  . getKey (  )  )     <  =    earlyReturnThreshold )     {", ". LOG . info (  \" Cardinality    % s ,    is   below   threshold .    Returning   early   while   other   tasks   finish \"  ,    smallestCardinality )  ;", "earlyReturn    =    true ;", "}", "}", "}    while    (  (  ! earlyReturn )     &  &     (  ( cardinalityToConstraints . entries (  )  . size (  )  )     <    numTasks )     )  ;", "}    catch    ( ExecutionException    |    InterruptedException   e )     {", "if    ( e   instanceof   InterruptedException )     {", "Thread . currentThread (  )  . interrupt (  )  ;", "}", "throw   new   PrestoException ( AccumuloErrorCode . UNEXPECTED _ ACCUMULO _ ERROR ,     \" Exception   when   getting   cardinality \"  ,    e )  ;", "}", "return   ImmutableMultimap . copyOf ( cardinalityToConstraints )  ;", "}", "METHOD_END"], "methodName": ["getCardinalities"], "fileName": "com.facebook.presto.accumulo.index.ColumnCardinalityCache"}, {"methodBody": ["METHOD_START", "{", "ColumnCardinalityCache . LOG . debug (  \" Getting   cardinality   for    % s :  % s \"  ,    family ,    qualifier )  ;", "Collection < ColumnCardinalityCache . CacheKey >    exactRanges    =    colValues . stream (  )  . filter ( ColumnCardinalityCache :  : isExact )  . map (  (    range )     -  >    new   CacheKey ( schema ,    table ,    family ,    qualifier ,    range ,    auths )  )  . collect ( Collectors . toList (  )  )  ;", "ColumnCardinalityCache . LOG . debug (  \" Column   values   contain    % s   exact   ranges   of    % s \"  ,    exactRanges . size (  )  ,    colValues . size (  )  )  ;", "long   sum    =    cache . getAll ( exactRanges )  . values (  )  . stream (  )  . mapToLong ( Long :  : longValue )  . sum (  )  ;", "if    (  ( exactRanges . size (  )  )     !  =     ( colValues . size (  )  )  )     {", "for    ( Range   range    :    colValues )     {", "if    (  !  ( ColumnCardinalityCache . isExact ( range )  )  )     {", "sum    +  =    cache . get ( new   ColumnCardinalityCache . CacheKey ( schema ,    table ,    family ,    qualifier ,    range ,    auths )  )  ;", "}", "}", "}", "return   sum ;", "}", "METHOD_END"], "methodName": ["getColumnCardinality"], "fileName": "com.facebook.presto.accumulo.index.ColumnCardinalityCache"}, {"methodBody": ["METHOD_START", "{", "return    (  (  !  ( range . isInfiniteStartKey (  )  )  )     &  &     (  !  ( range . isInfiniteStopKey (  )  )  )  )     &  &     ( range . getStartKey (  )  . followingKey ( ROW )  . equals ( range . getEndKey (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["isExact"], "fileName": "com.facebook.presto.accumulo.index.ColumnCardinalityCache"}, {"methodBody": ["METHOD_START", "{", "coreExecutor . shutdownNow (  )  ;", "}", "METHOD_END"], "methodName": ["shutdown"], "fileName": "com.facebook.presto.accumulo.index.ColumnCardinalityCache"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( AccumuloSessionProperties . isOptimizeIndexEnabled ( session )  )  )     {", ". LOG . debug (  \" Secondary   index   is   disabled \"  )  ;", "return   false ;", "}", ". LOG . debug (  \" Secondary   index   is   enabled \"  )  ;", "Multimap < AccumuloColumnConstraint ,    Range >    constraintRanges    =     . getIndexedConstraintRanges ( constraints ,    serializer )  ;", "if    ( constraintRanges . isEmpty (  )  )     {", ". LOG . debug (  \" Query   contains   no   constraints   on   indexed   columns ,    skipping   secondary   index \"  )  ;", "return   false ;", "}", "if    (  !  ( AccumuloSessionProperties . isIndexMetricsEnabled ( session )  )  )     {", ". LOG . debug (  \" Use   of   index   metrics   is   disabled \"  )  ;", "List < Range >    indexRanges    =    getIndexRanges ( Indexer . getIndexTableName ( schema ,    table )  ,    constraintRanges ,    rowIdRanges ,    auths )  ;", "if    (  !  ( indexRanges . isEmpty (  )  )  )     {", ". binRanges ( AccumuloSessionProperties . getNumIndexRowsPerSplit ( session )  ,    indexRanges ,    tabletSplits )  ;", ". LOG . debug (  \" Number   of   splits   for    % s .  % s   is    % d   with    % d   ranges \"  ,    schema ,    table ,    tabletSplits . size (  )  ,    indexRanges . size (  )  )  ;", "} else    {", ". LOG . debug (  \" Query   would   return   no   results ,    returning   empty   list   of   splits \"  )  ;", "}", "return   true ;", "} else    {", ". LOG . debug (  \" Use   of   index   metrics   is   enabled \"  )  ;", "return   getRangesWithMetrics ( session ,    schema ,    table ,    constraintRanges ,    rowIdRanges ,    tabletSplits ,    auths )  ;", "}", "}", "METHOD_END"], "methodName": ["applyIndex"], "fileName": "com.facebook.presto.accumulo.index.IndexLookup"}, {"methodBody": ["METHOD_START", "{", "checkArgument (  ( numRangesPerBin    >     0  )  ,     \" number   of   ranges   per   bin   must   positivebe   greater   than   zero \"  )  ;", "int   toAdd    =    splitRanges . size (  )  ;", "int   fromIndex    =     0  ;", "int   toIndex    =    Math . min ( toAdd ,    numRangesPerBin )  ;", "do    {", "Splits . add ( new   TabletSplitMetadata ( Optional . empty (  )  ,    splitRanges . subList ( fromIndex ,    toIndex )  )  )  ;", "toAdd    -  =    toIndex    -    fromIndex ;", "fromIndex    =    toIndex ;", "toIndex    +  =    Math . min ( toAdd ,    numRangesPerBin )  ;", "}    while    ( toAdd    >     0     )  ;", "}", "METHOD_END"], "methodName": ["binRanges"], "fileName": "com.facebook.presto.accumulo.index.IndexLookup"}, {"methodBody": ["METHOD_START", "{", "Set < Range >    finalRanges    =    new   HashSet <  >  (  )  ;", "List < Future < Set < Range >  >  >    tasks    =    new   ArrayList <  >  (  )  ;", "CompletionService < Set < Range >  >    executor    =    new   ExecutorCompletionService ( executorService )  ;", "for    ( Map . Entry < AccumuloColumnConstraint ,    Collection < Range >  >    constraintEntry    :    constraintRanges . asMap (  )  . entrySet (  )  )     {", "tasks . add ( executor . submit (  (  )     -  >     {", "BatchScanner   scan    =    connector . createBatchScanner ( indexTable ,    auths ,     1  0  )  ;", "scan . setRanges ( constraintEntry . getValue (  )  )  ;", "scan . fetchColumnFamily ( new   Text ( Indexer . getIndexColumnFamily ( constraintEntry . getKey (  )  . getFamily (  )  . getBytes (  )  ,    constraintEntry . getKey (  )  . getQualifier (  )  . getBytes (  )  )  . array (  )  )  )  ;", "Text   tmpQualifier    =    new   Text (  )  ;", "Set < Range >    columnRanges    =    new   HashSet <  >  (  )  ;", "for    ( Entry < Key ,    Value >    entry    :    scan )     {", "entry . getKey (  )  . getColumnQualifier ( tmpQualifier )  ;", "if    ( inRange ( tmpQualifier ,    rowIDRanges )  )     {", "columnRanges . add ( new   Range ( tmpQualifier )  )  ;", "}", "}", ". LOG . debug (  \" Retrieved    % d   ranges   for   index   column    % s \"  ,    columnRanges . size (  )  ,    constraintEntry . getKey (  )  . getName (  )  )  ;", "scan . close (  )  ;", "return   columnRanges ;", "}  )  )  ;", "}", "tasks . forEach (  (    future )     -  >     {", "try    {", "if    ( finalRanges . isEmpty (  )  )     {", "finalRanges . addAll ( future . get (  )  )  ;", "} else    {", "finalRanges . retainAll ( future . get (  )  )  ;", "}", "}    catch    ( ExecutionException    |    InterruptedException   e )     {", "if    ( e   instanceof   InterruptedException )     {", "Thread . currentThread (  )  . interrupt (  )  ;", "}", "throw   new   PrestoException ( UNEXPECTED _ ACCUMULO _ ERROR ,     \" Exception   when   getting   index   ranges \"  ,    e . getCause (  )  )  ;", "}", "}  )  ;", "return   ImmutableList . copyOf ( finalRanges )  ;", "}", "METHOD_END"], "methodName": ["getIndexRanges"], "fileName": "com.facebook.presto.accumulo.index.IndexLookup"}, {"methodBody": ["METHOD_START", "{", "Builder < AccumuloColumnConstraint ,    Range >    builder    =    ImmutableListMultimap . builder (  )  ;", "for    ( AccumuloColumnConstraint   columnConstraint    :    constraints )     {", "if    ( columnConstraint . isIndexed (  )  )     {", "for    ( Range   range    :    AccumuloClient . getRangesFromDomain ( columnConstraint . getDomain (  )  ,    serializer )  )     {", "builder . put ( columnConstraint ,    range )  ;", "}", "} else    {", ". LOG . warn (  \" Query   containts   constraint   on   non - indexed   column    % s .    Is   it   worth   indexing ?  \"  ,    columnConstraint . getName (  )  )  ;", "}", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["getIndexedConstraintRanges"], "fileName": "com.facebook.presto.accumulo.index.IndexLookup"}, {"methodBody": ["METHOD_START", "{", "Scanner   scanner    =    connector . createScanner ( metricsTable ,    auths )  ;", "scanner . setRange ( IndexLookup . METRICS _ TABLE _ ROWID _ RANGE )  ;", "scanner . fetchColumn ( Indexer . METRICS _ TABLE _ ROWS _ CF _ AS _ TEXT ,    Indexer . CARDINALITY _ CQ _ AS _ TEXT )  ;", "long   numRows    =     -  1  ;", "for    ( Map . Entry < Key ,    Value >    entry    :    scanner )     {", "if    ( numRows    >     0  )     {", "throw   new   spi . PrestoException ( StandardErrorCode . FUNCTION _ IMPLEMENTATION _ ERROR ,     \" Should   have   received   only   one   entry   when   scanning   for   number   of   rows   in   metrics   table \"  )  ;", "}", "numRows    =    Long . parseLong ( entry . getValue (  )  . toString (  )  )  ;", "}", "scanner . close (  )  ;", "IndexLookup . LOG . debug (  \" Number   of   rows   in   table   is    % d \"  ,    numRows )  ;", "return   numRows ;", "}", "METHOD_END"], "methodName": ["getNumRowsInTable"], "fileName": "com.facebook.presto.accumulo.index.IndexLookup"}, {"methodBody": ["METHOD_START", "{", "String   metricsTable    =    Indexer . getMetricsTableName ( schema ,    table )  ;", "long   numRows    =    getNumRowsInTable ( metricsTable ,    auths )  ;", "Multimap < Long ,    AccumuloColumnConstraint >    cardinalities ;", "if    ( AccumuloSessionProperties . isIndexShortCircuitEnabled ( session )  )     {", "cardinalities    =    cardinalityCache . getCardinalities ( schema ,    table ,    auths ,    constraintRanges ,     (  ( long )     ( numRows    *     ( AccumuloSessionProperties . getIndexSmallCardThreshold ( session )  )  )  )  ,    AccumuloSessionProperties . getIndexCardinalityCachePollingDuration ( session )  )  ;", "} else    {", "cardinalities    =    cardinalityCache . getCardinalities ( schema ,    table ,    auths ,    constraintRanges ,     0  ,    new   Duration (  0  ,    TimeUnit . MILLISECONDS )  )  ;", "}", "Optional < Map . Entry < Long ,    AccumuloColumnConstraint >  >    entry    =    cardinalities . entries (  )  . stream (  )  . findFirst (  )  ;", "if    (  !  ( entry . isPresent (  )  )  )     {", "return   false ;", "}", "Map . Entry < Long ,    AccumuloColumnConstraint >    lowestCardinality    =    entry . get (  )  ;", "String   indexTable    =    Indexer . getIndexTableName ( schema ,    table )  ;", "double   threshold    =    AccumuloSessionProperties . getIndexThreshold ( session )  ;", "List < Range >    indexRanges ;", "if    (  . smallestCardAboveThreshold ( session ,    numRows ,    lowestCardinality . getKey (  )  )  )     {", "if    (  ( cardinalities . size (  )  )     =  =     1  )     {", "long   numEntries    =    lowestCardinality . getKey (  )  ;", "double   ratio    =     (  ( double )     ( numEntries )  )     /     (  ( double )     ( numRows )  )  ;", ". LOG . debug (  \" Use   of   index   would   scan    % s   of    % s   rows ,    ratio    % s .    Threshold    %  2 f ,    Using   for   index   table ?     % s \"  ,    numEntries ,    numRows ,    ratio ,    threshold ,     ( ratio    <    threshold )  )  ;", "if    ( ratio    >  =    threshold )     {", "return   false ;", "}", "}", ". LOG . debug (  \"  % d   indexed   columns ,    intersecting   ranges \"  ,    constraintRanges . size (  )  )  ;", "indexRanges    =    getIndexRanges ( indexTable ,    constraintRanges ,    rowIdRanges ,    auths )  ;", ". LOG . debug (  \" Intersection   results   in    % d   ranges   from   secondary   index \"  ,    indexRanges . size (  )  )  ;", "} else    {", ". LOG . debug (  \" Not   intersecting   columns ,    using   column   with   lowest   cardinality    \"  )  ;", "Builder < AccumuloColumnConstraint ,    Range >    lcBldr    =    ImmutableMultimap . builder (  )  ;", "lcBldr . putAll ( lowestCardinality . getValue (  )  ,    constraintRanges . get ( lowestCardinality . getValue (  )  )  )  ;", "indexRanges    =    getIndexRanges ( indexTable ,    lcBldr . build (  )  ,    rowIdRanges ,    auths )  ;", "}", "if    ( indexRanges . isEmpty (  )  )     {", ". LOG . debug (  \" Query   would   return   no   results ,    returning   empty   list   of   splits \"  )  ;", "return   true ;", "}", "long   numEntries    =    indexRanges . size (  )  ;", "double   ratio    =     (  ( double )     ( numEntries )  )     /     (  ( double )     ( numRows )  )  ;", ". LOG . debug (  \" Use   of   index   would   scan    % d   of    % d   rows ,    ratio    % s .    Threshold    %  2 f ,    Using   for   table ?     % b \"  ,    numEntries ,    numRows ,    ratio ,    threshold ,     ( ratio    <    threshold )  ,    table )  ;", "if    ( ratio    <    threshold )     {", ". binRanges ( AccumuloSessionProperties . getNumIndexRowsPerSplit ( session )  ,    indexRanges ,    tabletSplits )  ;", ". LOG . debug (  \" Number   of   splits   for    % s .  % s   is    % d   with    % d   ranges \"  ,    schema ,    table ,    tabletSplits . size (  )  ,    indexRanges . size (  )  )  ;", "return   true ;", "} else    {", "return   false ;", "}", "}", "METHOD_END"], "methodName": ["getRangesWithMetrics"], "fileName": "com.facebook.presto.accumulo.index.IndexLookup"}, {"methodBody": ["METHOD_START", "{", "Key   kCq    =    new   Key ( text )  ;", "return   ranges . stream (  )  . anyMatch (  (    r )     -  >     (  !  ( r . beforeStartKey ( kCq )  )  )     &  &     (  !  ( r . afterEndKey ( kCq )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["inRange"], "fileName": "com.facebook.presto.accumulo.index.IndexLookup"}, {"methodBody": ["METHOD_START", "{", "coreExecutor . shutdownNow (  )  ;", "}", "METHOD_END"], "methodName": ["shutdown"], "fileName": "com.facebook.presto.accumulo.index.IndexLookup"}, {"methodBody": ["METHOD_START", "{", "double   ratio    =     (  ( double )     ( smallestCardinality )  )     /     (  ( double )     ( numRows )  )  ;", "double   threshold    =    AccumuloSessionProperties . getIndexSmallCardThreshold ( session )  ;", ". LOG . debug (  \" Smallest   cardinality   is    % d ,    num   rows   is    % d ,    ratio   is    %  2 f   with   threshold   of    % f \"  ,    smallestCardinality ,    numRows ,    ratio ,    threshold )  ;", "return   ratio    >    threshold ;", "}", "METHOD_END"], "methodName": ["smallestCardAboveThreshold"], "fileName": "com.facebook.presto.accumulo.index.IndexLookup"}, {"methodBody": ["METHOD_START", "{", "Mutation   indexMutation    =    new   Mutation ( row . array (  )  )  ;", "indexMutation . put ( family . array (  )  ,    qualifier ,    visibility ,    Indexer . EMPTY _ BYTES )  ;", "try    {", "indexWriter . addMutation ( indexMutation )  ;", "}    catch    ( MutationsRejectedException   e )     {", "throw   new   spi . PrestoException ( AccumuloErrorCode . UNEXPECTED _ ACCUMULO _ ERROR ,     \" Index   mutation   rejected   by   server \"  ,    e )  ;", "}", "Indexer . MetricsKey   key    =    new   Indexer . MetricsKey ( row ,    family ,    visibility )  ;", "AtomicLong   count    =    metrics . get ( key )  ;", "if    ( count    =  =    null )     {", "count    =    new   AtomicLong (  0  )  ;", "metrics . put ( key ,    count )  ;", "}", "count . incrementAndGet (  )  ;", "}", "METHOD_END"], "methodName": ["addIndexMutation"], "fileName": "com.facebook.presto.accumulo.index.Indexer"}, {"methodBody": ["METHOD_START", "{", "try    {", "indexWriter . flush (  )  ;", "BatchWriter   metricsWriter    =    connector . createBatchWriter ( table . getMetricsTableName (  )  ,    writerConfig )  ;", "metricsWriter . addMutations ( getMetricsMutations (  )  )  ;", "metricsWriter . close (  )  ;", "metrics . clear (  )  ;", "metrics . put ( Indexer . METRICS _ TABLE _ ROW _ COUNT ,    new   AtomicLong (  0  )  )  ;", "}    catch    ( MutationsRejectedException   e )     {", "throw   new   spi . PrestoException ( AccumuloErrorCode . UNEXPECTED _ ACCUMULO _ ERROR ,     \" Index   mutation   was   rejected   by   server   on   flush \"  ,    e )  ;", "}    catch    ( TableNotFoundException   e )     {", "throw   new   spi . PrestoException ( AccumuloErrorCode . ACCUMULO _ TABLE _ DNE ,     \" Accumulo   table   does   not   exist \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["flush"], "fileName": "com.facebook.presto.accumulo.index.Indexer"}, {"methodBody": ["METHOD_START", "{", "return   ByteBuffer . wrap ( ArrayUtils . addAll ( ArrayUtils . add ( columnFamily ,    Indexer . UNDERSCORE )  ,    columnQualifier )  )  ;", "}", "METHOD_END"], "methodName": ["getIndexColumnFamily"], "fileName": "com.facebook.presto.accumulo.index.Indexer"}, {"methodBody": ["METHOD_START", "{", "return   Indexer . getIndexTableName ( tableName . getSchemaName (  )  ,    tableName . getTableName (  )  )  ;", "}", "METHOD_END"], "methodName": ["getIndexTableName"], "fileName": "com.facebook.presto.accumulo.index.Indexer"}, {"methodBody": ["METHOD_START", "{", "return   schema . equals (  \" default \"  )     ?    table    +     \"  _ idx \"     :     (  ( schema    +     '  .  '  )     +    table )     +     \"  _ idx \"  ;", "}", "METHOD_END"], "methodName": ["getIndexTableName"], "fileName": "com.facebook.presto.accumulo.index.Indexer"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Set < Text >  >    groups    =    new   HashMap <  >  (  )  ;", "for    ( AColumnHandle   columnHandle    :    table . getColumns (  )  . stream (  )  . filter ( AColumnHandle :  : isIndexed )  . collect ( Collectors . toList (  )  )  )     {", "Text   indexColumnFamily    =    new   Text ( Indexer . getIndexColumnFamily ( columnHandle . getFamily (  )  . get (  )  . getBytes ( StandardCharsets . UTF _  8  )  ,    columnHandle . getQualifier (  )  . get (  )  . getBytes ( StandardCharsets . UTF _  8  )  )  . array (  )  )  ;", "groups . put ( indexColumnFamily . toString (  )  ,    ImmutableSet . of ( indexColumnFamily )  )  ;", "}", "return   groups ;", "}", "METHOD_END"], "methodName": ["getLocalityGroups"], "fileName": "com.facebook.presto.accumulo.index.Indexer"}, {"methodBody": ["METHOD_START", "{", "String   cardQualifier    =    new   String ( Indexer . CARDINALITY _ CQ )  ;", "String   rowsFamily    =    new   String ( Indexer . METRICS _ TABLE _ ROWS _ CF . array (  )  )  ;", "StringBuilder   cardBuilder    =    new   StringBuilder (  (  (  ( rowsFamily    +     \"  :  \"  )     +    cardQualifier )     +     \"  ,  \"  )  )  ;", "for    ( String   s    :    Indexer . getLocalityGroups ( table )  . keySet (  )  )     {", "cardBuilder . append ( s )  . append (  \"  :  \"  )  . append ( cardQualifier )  . append (  '  ,  '  )  ;", "}", "cardBuilder . deleteCharAt (  (  ( cardBuilder . length (  )  )     -     1  )  )  ;", "String   firstRowColumn    =     ( rowsFamily    +     \"  :  \"  )     +     ( new   String ( Indexer . METRICS _ TABLE _ FIRST _ ROW _ CQ . array (  )  )  )  ;", "String   lastRowColumn    =     ( rowsFamily    +     \"  :  \"  )     +     ( new   String ( Indexer . METRICS _ TABLE _ LAST _ ROW _ CQ . array (  )  )  )  ;", "IteratorSetting   s 1     =    new   IteratorSetting (  1  ,    SummingCombiner . class ,    ImmutableMap . of (  \" columns \"  ,    cardBuilder . toString (  )  ,     \" type \"  ,     \" STRING \"  )  )  ;", "IteratorSetting   s 2     =    new   IteratorSetting (  2  ,    MinByteArrayCombiner . class ,    ImmutableMap . of (  \" columns \"  ,    firstRowColumn )  )  ;", "IteratorSetting   s 3     =    new   IteratorSetting (  3  ,    MaxByteArrayCombiner . class ,    ImmutableMap . of (  \" columns \"  ,    lastRowColumn )  )  ;", "return   ImmutableList . of ( s 1  ,    s 2  ,    s 3  )  ;", "}", "METHOD_END"], "methodName": ["getMetricIterators"], "fileName": "com.facebook.presto.accumulo.index.Indexer"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < Mutation >    mutationBuilder    =    ImmutableList . builder (  )  ;", "for    ( Map . Entry <  . MetricsKey ,    AtomicLong >    entry    :    metrics . entrySet (  )  )     {", "Mutation   mut    =    new   Mutation ( entry . getKey (  )  . row . array (  )  )  ;", "mut . put ( entry . getKey (  )  . family . array (  )  ,     . CARDINALITY _ CQ ,    entry . getKey (  )  . visibility ,    ENCODER . encode ( entry . getValue (  )  . get (  )  )  )  ;", "mutationBuilder . add ( mut )  ;", "}", "if    (  (  ( firstRow )     !  =    null )     &  &     (  ( lastRow )     !  =    null )  )     {", "Mutation   firstLastMutation    =    new   Mutation (  . METRICS _ TABLE _ ROW _ ID . array (  )  )  ;", "firstLastMutation . put (  . METRICS _ TABLE _ ROWS _ CF . array (  )  ,     . METRICS _ TABLE _ FIRST _ ROW _ CQ . array (  )  ,    firstRow )  ;", "firstLastMutation . put (  . METRICS _ TABLE _ ROWS _ CF . array (  )  ,     . METRICS _ TABLE _ LAST _ ROW _ CQ . array (  )  ,    lastRow )  ;", "mutationBuilder . add ( firstLastMutation )  ;", "}", "return   mutationBuilder . build (  )  ;", "}", "METHOD_END"], "methodName": ["getMetricsMutations"], "fileName": "com.facebook.presto.accumulo.index.Indexer"}, {"methodBody": ["METHOD_START", "{", "return   Indexer . getMetricsTableName ( tableName . getSchemaName (  )  ,    tableName . getTableName (  )  )  ;", "}", "METHOD_END"], "methodName": ["getMetricsTableName"], "fileName": "com.facebook.presto.accumulo.index.Indexer"}, {"methodBody": ["METHOD_START", "{", "return   schema . equals (  \" default \"  )     ?    table    +     \"  _ idx _ metrics \"     :     (  ( schema    +     '  .  '  )     +    table )     +     \"  _ idx _ metrics \"  ;", "}", "METHOD_END"], "methodName": ["getMetricsTableName"], "fileName": "com.facebook.presto.accumulo.index.Indexer"}, {"methodBody": ["METHOD_START", "{", "Scanner   scanner    =    connector . createScanner ( table . getMetricsTableName (  )  ,    auths )  ;", "scanner . setRange ( new   Range ( new   Text ( Indexer . METRICS _ TABLE _ ROW _ ID . array (  )  )  )  )  ;", "Text   family    =    new   Text ( Indexer . METRICS _ TABLE _ ROWS _ CF . array (  )  )  ;", "Text   firstRowQualifier    =    new   Text ( Indexer . METRICS _ TABLE _ FIRST _ ROW _ CQ . array (  )  )  ;", "Text   lastRowQualifier    =    new   Text ( Indexer . METRICS _ TABLE _ LAST _ ROW _ CQ . array (  )  )  ;", "scanner . fetchColumn ( family ,    firstRowQualifier )  ;", "scanner . fetchColumn ( family ,    lastRowQualifier )  ;", "byte [  ]    firstRow    =    null ;", "byte [  ]    lastRow    =    null ;", "for    ( Map . Entry < Key ,    Value >    entry    :    scanner )     {", "if    (  ( entry . getKey (  )  . compareColumnQualifier ( firstRowQualifier )  )     =  =     0  )     {", "firstRow    =    entry . getValue (  )  . get (  )  ;", "}", "if    (  ( entry . getKey (  )  . compareColumnQualifier ( lastRowQualifier )  )     =  =     0  )     {", "lastRow    =    entry . getValue (  )  . get (  )  ;", "}", "}", "scanner . close (  )  ;", "return   Pair . of ( firstRow ,    lastRow )  ;", "}", "METHOD_END"], "methodName": ["getMinMaxRowIds"], "fileName": "com.facebook.presto.accumulo.index.Indexer"}, {"methodBody": ["METHOD_START", "{", "for    ( Mutation   mutation    :    mutations )     {", "( mutation )  ;", "}", "}", "METHOD_END"], "methodName": ["index"], "fileName": "com.facebook.presto.accumulo.index.Indexer"}, {"methodBody": ["METHOD_START", "{", "metrics . get ( Indexer . METRICS _ TABLE _ ROW _ COUNT )  . incrementAndGet (  )  ;", "if    (  (  ( firstRow )     =  =    null )     |  |     (  ( byteArrayComparator . compare ( mutation . getRow (  )  ,    firstRow )  )     <     0  )  )     {", "firstRow    =    mutation . getRow (  )  ;", "}", "if    (  (  ( lastRow )     =  =    null )     |  |     (  ( byteArrayComparator . compare ( mutation . getRow (  )  ,    lastRow )  )     >     0  )  )     {", "lastRow    =    mutation . getRow (  )  ;", "}", "for    ( ColumnUpdate   columnUpdate    :    mutation . getUpdates (  )  )     {", "ByteBuffer   family    =    ByteBuffer . wrap ( columnUpdate . getColumnFamily (  )  )  ;", "Collection < ByteBuffer >    indexQualifiers    =    indexColumns . get ( family )  ;", "if    ( indexQualifiers    !  =    null )     {", "ByteBuffer   qualifier    =    ByteBuffer . wrap ( columnUpdate . getColumnQualifier (  )  )  ;", "if    ( indexQualifiers . contains ( qualifier )  )     {", "ByteBuffer   indexFamily    =    Indexer . getIndexColumnFamily ( columnUpdate . getColumnFamily (  )  ,    columnUpdate . getColumnQualifier (  )  )  ;", "Type   type    =    indexColumnTypes . get ( family )  . get ( qualifier )  ;", "ColumnVisibility   visibility    =    new   ColumnVisibility ( columnUpdate . getColumnVisibility (  )  )  ;", "if    ( Types . isArrayType ( type )  )     {", "Type   elementType    =    Types . getElementType ( type )  ;", "List <  ?  >    elements    =    serializer . decode ( type ,    columnUpdate . getValue (  )  )  ;", "for    ( Object   element    :    elements )     {", "addIndexMutation ( ByteBuffer . wrap ( serializer . encode ( elementType ,    element )  )  ,    indexFamily ,    visibility ,    mutation . getRow (  )  )  ;", "}", "} else    {", "addIndexMutation ( ByteBuffer . wrap ( columnUpdate . getValue (  )  )  ,    indexFamily ,    visibility ,    mutation . getRow (  )  )  ;", "}", "}", "}", "}", "}", "METHOD_END"], "methodName": ["index"], "fileName": "com.facebook.presto.accumulo.index.Indexer"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( row ,    e . getKey (  )  . getRow (  )  . copyBytes (  )  )  ;", "assertEquals ( cf ,    e . getKey (  )  . getColumnFamily (  )  . toString (  )  )  ;", "assertEquals ( cq ,    e . getKey (  )  . getColumnQualifier (  )  . toString (  )  )  ;", "assertEquals ( value ,    e . getValue (  )  . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["assertKeyValuePair"], "fileName": "com.facebook.presto.accumulo.index.TestIndexer"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( row ,    e . getKey (  )  . getRow (  )  . copyBytes (  )  )  ;", "assertEquals ( cf ,    e . getKey (  )  . getColumnFamily (  )  . toString (  )  )  ;", "assertEquals ( cq ,    e . getKey (  )  . getColumnQualifier (  )  . toString (  )  )  ;", "assertEquals ( cv ,    e . getKey (  )  . getColumnVisibility (  )  . toString (  )  )  ;", "assertEquals ( value ,    e . getValue (  )  . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["assertKeyValuePair"], "fileName": "com.facebook.presto.accumulo.index.TestIndexer"}, {"methodBody": ["METHOD_START", "{", "return   s . getBytes ( StandardCharsets . UTF _  8  )  ;", "}", "METHOD_END"], "methodName": ["bytes"], "fileName": "com.facebook.presto.accumulo.index.TestIndexer"}, {"methodBody": ["METHOD_START", "{", "return   TestIndexer . SERIALIZER . encode ( type ,    v )  ;", "}", "METHOD_END"], "methodName": ["encode"], "fileName": "com.facebook.presto.accumulo.index.TestIndexer"}, {"methodBody": ["METHOD_START", "{", "AccumuloColumnHandle   c 1     =    new   AccumuloColumnHandle (  \" id \"  ,    Optional . empty (  )  ,    Optional . empty (  )  ,    VarcharType . VARCHAR ,     0  ,     \"  \"  ,    false )  ;", "AccumuloColumnHandle   c 2     =    new   AccumuloColumnHandle (  \" age \"  ,    Optional . of (  \" cf \"  )  ,    Optional . of (  \" age \"  )  ,    BigintType . BIGINT ,     1  ,     \"  \"  ,    true )  ;", "AccumuloColumnHandle   c 3     =    new   AccumuloColumnHandle (  \" firstname \"  ,    Optional . of (  \" cf \"  )  ,    Optional . of (  \" firstname \"  )  ,    VarcharType . VARCHAR ,     2  ,     \"  \"  ,    true )  ;", "AccumuloColumnHandle   c 4     =    new   AccumuloColumnHandle (  \" arr \"  ,    Optional . of (  \" cf \"  )  ,    Optional . of (  \" arr \"  )  ,    new   spi . type . ArrayType ( VarcharType . VARCHAR )  ,     3  ,     \"  \"  ,    true )  ;", "table    =    new   AccumuloTable (  \" default \"  ,     \" index _ test _ table \"  ,    ImmutableList . of ( c 1  ,    c 2  ,    c 3  ,    c 4  )  ,     \" id \"  ,    true ,    LexicoderRowSerializer . class . getCanonicalName (  )  ,    null )  ;", "m 1     =    new   Mutation ( TestIndexer . M 1  _ ROWID )  ;", "m 1  . put ( TestIndexer . CF ,    TestIndexer . AGE ,    TestIndexer . AGE _ VALUE )  ;", "m 1  . put ( TestIndexer . CF ,    TestIndexer . FIRSTNAME ,    TestIndexer . M 1  _ FNAME _ VALUE )  ;", "m 1  . put ( TestIndexer . CF ,    TestIndexer . SENDERS ,    TestIndexer . M 1  _ ARR _ VALUE )  ;", "m 2     =    new   Mutation ( TestIndexer . M 2  _ ROWID )  ;", "m 2  . put ( TestIndexer . CF ,    TestIndexer . AGE ,    TestIndexer . AGE _ VALUE )  ;", "m 2  . put ( TestIndexer . CF ,    TestIndexer . FIRSTNAME ,    TestIndexer . M 2  _ FNAME _ VALUE )  ;", "m 2  . put ( TestIndexer . CF ,    TestIndexer . SENDERS ,    TestIndexer . M 2  _ ARR _ VALUE )  ;", "ColumnVisibility   visibility 1     =    new   ColumnVisibility (  \" private \"  )  ;", "ColumnVisibility   visibility 2     =    new   ColumnVisibility (  \" moreprivate \"  )  ;", "m 1 v    =    new   Mutation ( TestIndexer . M 1  _ ROWID )  ;", "m 1 v . put ( TestIndexer . CF ,    TestIndexer . AGE ,    visibility 1  ,    TestIndexer . AGE _ VALUE )  ;", "m 1 v . put ( TestIndexer . CF ,    TestIndexer . FIRSTNAME ,    visibility 1  ,    TestIndexer . M 1  _ FNAME _ VALUE )  ;", "m 1 v . put ( TestIndexer . CF ,    TestIndexer . SENDERS ,    visibility 2  ,    TestIndexer . M 1  _ ARR _ VALUE )  ;", "m 2 v    =    new   Mutation ( TestIndexer . M 2  _ ROWID )  ;", "m 2 v . put ( TestIndexer . CF ,    TestIndexer . AGE ,    visibility 1  ,    TestIndexer . AGE _ VALUE )  ;", "m 2 v . put ( TestIndexer . CF ,    TestIndexer . FIRSTNAME ,    visibility 2  ,    TestIndexer . M 2  _ FNAME _ VALUE )  ;", "m 2 v . put ( TestIndexer . CF ,    TestIndexer . SENDERS ,    visibility 2  ,    TestIndexer . M 2  _ ARR _ VALUE )  ;", "}", "METHOD_END"], "methodName": ["setupClass"], "fileName": "com.facebook.presto.accumulo.index.TestIndexer"}, {"methodBody": ["METHOD_START", "{", "Instance   inst    =    new   MockInstance (  )  ;", "Connector   conn    =    inst . getConnector (  \" root \"  ,    new   PasswordToken (  \"  \"  )  )  ;", "conn . tableOperations (  )  . create ( table . getFullTableName (  )  )  ;", "conn . tableOperations (  )  . create ( table . getIndexTableName (  )  )  ;", "conn . tableOperations (  )  . create ( table . getMetricsTableName (  )  )  ;", "for    ( IteratorSetting   s    :    Indexer . getMetricIterators ( table )  )     {", "conn . tableOperations (  )  . attachIterator ( table . getMetricsTableName (  )  ,    s )  ;", "}", "Indexer   indexer    =    new   Indexer ( conn ,    new   Authorizations (  )  ,    table ,    new   BatchWriterConfig (  )  )  ;", "indexer . index ( m 1  )  ;", "indexer . flush (  )  ;", "Scanner   scan    =    conn . createScanner ( table . getIndexTableName (  )  ,    new   Authorizations (  )  )  ;", "scan . setRange ( new   Range (  )  )  ;", "Iterator < Map . Entry < Key ,    Value >  >    iter    =    scan . iterator (  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . AGE _ VALUE ,     \" cf _ age \"  ,     \" row 1  \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" abc \"  )  ,     \" cf _ arr \"  ,     \" row 1  \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . M 1  _ FNAME _ VALUE ,     \" cf _ firstname \"  ,     \" row 1  \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" def \"  )  ,     \" cf _ arr \"  ,     \" row 1  \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" ghi \"  )  ,     \" cf _ arr \"  ,     \" row 1  \"  ,     \"  \"  )  ;", "assertFalse ( iter . hasNext (  )  )  ;", "scan . close (  )  ;", "scan    =    conn . createScanner ( table . getMetricsTableName (  )  ,    new   Authorizations (  )  )  ;", "scan . setRange ( new   Range (  )  )  ;", "iter    =    scan . iterator (  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . AGE _ VALUE ,     \" cf _ age \"  ,     \"  _  _  _ card _  _  _  \"  ,     \"  1  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,    Indexer . METRICS _ TABLE _ ROW _ ID . array (  )  ,     \"  _  _  _ rows _  _  _  \"  ,     \"  _  _  _ card _  _  _  \"  ,     \"  1  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,    Indexer . METRICS _ TABLE _ ROW _ ID . array (  )  ,     \"  _  _  _ rows _  _  _  \"  ,     \"  _  _  _ first _ row _  _  _  \"  ,     \" row 1  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,    Indexer . METRICS _ TABLE _ ROW _ ID . array (  )  ,     \"  _  _  _ rows _  _  _  \"  ,     \"  _  _  _ last _ row _  _  _  \"  ,     \" row 1  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" abc \"  )  ,     \" cf _ arr \"  ,     \"  _  _  _ card _  _  _  \"  ,     \"  1  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . M 1  _ FNAME _ VALUE ,     \" cf _ firstname \"  ,     \"  _  _  _ card _  _  _  \"  ,     \"  1  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" def \"  )  ,     \" cf _ arr \"  ,     \"  _  _  _ card _  _  _  \"  ,     \"  1  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" ghi \"  )  ,     \" cf _ arr \"  ,     \"  _  _  _ card _  _  _  \"  ,     \"  1  \"  )  ;", "assertFalse ( iter . hasNext (  )  )  ;", "scan . close (  )  ;", "indexer . index ( m 2  )  ;", "indexer . close (  )  ;", "scan    =    conn . createScanner ( table . getIndexTableName (  )  ,    new   Authorizations (  )  )  ;", "scan . setRange ( new   Range (  )  )  ;", "iter    =    scan . iterator (  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . AGE _ VALUE ,     \" cf _ age \"  ,     \" row 1  \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . AGE _ VALUE ,     \" cf _ age \"  ,     \" row 2  \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" abc \"  )  ,     \" cf _ arr \"  ,     \" row 1  \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" abc \"  )  ,     \" cf _ arr \"  ,     \" row 2  \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . M 1  _ FNAME _ VALUE ,     \" cf _ firstname \"  ,     \" row 1  \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . M 2  _ FNAME _ VALUE ,     \" cf _ firstname \"  ,     \" row 2  \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" def \"  )  ,     \" cf _ arr \"  ,     \" row 1  \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" ghi \"  )  ,     \" cf _ arr \"  ,     \" row 1  \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" ghi \"  )  ,     \" cf _ arr \"  ,     \" row 2  \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" mno \"  )  ,     \" cf _ arr \"  ,     \" row 2  \"  ,     \"  \"  )  ;", "assertFalse ( iter . hasNext (  )  )  ;", "scan . close (  )  ;", "scan    =    conn . createScanner ( table . getMetricsTableName (  )  ,    new   Authorizations (  )  )  ;", "scan . setRange ( new   Range (  )  )  ;", "iter    =    scan . iterator (  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . AGE _ VALUE ,     \" cf _ age \"  ,     \"  _  _  _ card _  _  _  \"  ,     \"  2  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,    Indexer . METRICS _ TABLE _ ROW _ ID . array (  )  ,     \"  _  _  _ rows _  _  _  \"  ,     \"  _  _  _ card _  _  _  \"  ,     \"  2  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,    Indexer . METRICS _ TABLE _ ROW _ ID . array (  )  ,     \"  _  _  _ rows _  _  _  \"  ,     \"  _  _  _ first _ row _  _  _  \"  ,     \" row 1  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,    Indexer . METRICS _ TABLE _ ROW _ ID . array (  )  ,     \"  _  _  _ rows _  _  _  \"  ,     \"  _  _  _ last _ row _  _  _  \"  ,     \" row 2  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" abc \"  )  ,     \" cf _ arr \"  ,     \"  _  _  _ card _  _  _  \"  ,     \"  2  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . M 1  _ FNAME _ VALUE ,     \" cf _ firstname \"  ,     \"  _  _  _ card _  _  _  \"  ,     \"  1  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . M 2  _ FNAME _ VALUE ,     \" cf _ firstname \"  ,     \"  _  _  _ card _  _  _  \"  ,     \"  1  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" def \"  )  ,     \" cf _ arr \"  ,     \"  _  _  _ card _  _  _  \"  ,     \"  1  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" ghi \"  )  ,     \" cf _ arr \"  ,     \"  _  _  _ card _  _  _  \"  ,     \"  2  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" mno \"  )  ,     \" cf _ arr \"  ,     \"  _  _  _ card _  _  _  \"  ,     \"  1  \"  )  ;", "assertFalse ( iter . hasNext (  )  )  ;", "scan . close (  )  ;", "}", "METHOD_END"], "methodName": ["testMutationIndex"], "fileName": "com.facebook.presto.accumulo.index.TestIndexer"}, {"methodBody": ["METHOD_START", "{", "Instance   inst    =    new   MockInstance (  )  ;", "Connector   conn    =    inst . getConnector (  \" root \"  ,    new   PasswordToken (  \"  \"  )  )  ;", "conn . tableOperations (  )  . create ( table . getFullTableName (  )  )  ;", "conn . tableOperations (  )  . create ( table . getIndexTableName (  )  )  ;", "conn . tableOperations (  )  . create ( table . getMetricsTableName (  )  )  ;", "for    ( IteratorSetting   s    :    Indexer . getMetricIterators ( table )  )     {", "conn . tableOperations (  )  . attachIterator ( table . getMetricsTableName (  )  ,    s )  ;", "}", "Indexer   indexer    =    new   Indexer ( conn ,    new   Authorizations (  )  ,    table ,    new   BatchWriterConfig (  )  )  ;", "indexer . index ( m 1  )  ;", "indexer . index ( m 1 v )  ;", "indexer . flush (  )  ;", "Scanner   scan    =    conn . createScanner ( table . getIndexTableName (  )  ,    new   Authorizations (  \" private \"  ,     \" moreprivate \"  )  )  ;", "scan . setRange ( new   Range (  )  )  ;", "Iterator < Map . Entry < Key ,    Value >  >    iter    =    scan . iterator (  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . AGE _ VALUE ,     \" cf _ age \"  ,     \" row 1  \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . AGE _ VALUE ,     \" cf _ age \"  ,     \" row 1  \"  ,     \" private \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" abc \"  )  ,     \" cf _ arr \"  ,     \" row 1  \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" abc \"  )  ,     \" cf _ arr \"  ,     \" row 1  \"  ,     \" moreprivate \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . M 1  _ FNAME _ VALUE ,     \" cf _ firstname \"  ,     \" row 1  \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . M 1  _ FNAME _ VALUE ,     \" cf _ firstname \"  ,     \" row 1  \"  ,     \" private \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" def \"  )  ,     \" cf _ arr \"  ,     \" row 1  \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" def \"  )  ,     \" cf _ arr \"  ,     \" row 1  \"  ,     \" moreprivate \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" ghi \"  )  ,     \" cf _ arr \"  ,     \" row 1  \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" ghi \"  )  ,     \" cf _ arr \"  ,     \" row 1  \"  ,     \" moreprivate \"  ,     \"  \"  )  ;", "assertFalse ( iter . hasNext (  )  )  ;", "scan . close (  )  ;", "scan    =    conn . createScanner ( table . getMetricsTableName (  )  ,    new   Authorizations (  \" private \"  ,     \" moreprivate \"  )  )  ;", "scan . setRange ( new   Range (  )  )  ;", "iter    =    scan . iterator (  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . AGE _ VALUE ,     \" cf _ age \"  ,     \"  _  _  _ card _  _  _  \"  ,     \"  1  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . AGE _ VALUE ,     \" cf _ age \"  ,     \"  _  _  _ card _  _  _  \"  ,     \" private \"  ,     \"  1  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,    Indexer . METRICS _ TABLE _ ROW _ ID . array (  )  ,     \"  _  _  _ rows _  _  _  \"  ,     \"  _  _  _ card _  _  _  \"  ,     \"  2  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,    Indexer . METRICS _ TABLE _ ROW _ ID . array (  )  ,     \"  _  _  _ rows _  _  _  \"  ,     \"  _  _  _ first _ row _  _  _  \"  ,     \" row 1  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,    Indexer . METRICS _ TABLE _ ROW _ ID . array (  )  ,     \"  _  _  _ rows _  _  _  \"  ,     \"  _  _  _ last _ row _  _  _  \"  ,     \" row 1  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" abc \"  )  ,     \" cf _ arr \"  ,     \"  _  _  _ card _  _  _  \"  ,     \"  1  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" abc \"  )  ,     \" cf _ arr \"  ,     \"  _  _  _ card _  _  _  \"  ,     \" moreprivate \"  ,     \"  1  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . M 1  _ FNAME _ VALUE ,     \" cf _ firstname \"  ,     \"  _  _  _ card _  _  _  \"  ,     \"  1  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . M 1  _ FNAME _ VALUE ,     \" cf _ firstname \"  ,     \"  _  _  _ card _  _  _  \"  ,     \" private \"  ,     \"  1  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" def \"  )  ,     \" cf _ arr \"  ,     \"  _  _  _ card _  _  _  \"  ,     \"  1  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" def \"  )  ,     \" cf _ arr \"  ,     \"  _  _  _ card _  _  _  \"  ,     \" moreprivate \"  ,     \"  1  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" ghi \"  )  ,     \" cf _ arr \"  ,     \"  _  _  _ card _  _  _  \"  ,     \"  1  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" ghi \"  )  ,     \" cf _ arr \"  ,     \"  _  _  _ card _  _  _  \"  ,     \" moreprivate \"  ,     \"  1  \"  )  ;", "assertFalse ( iter . hasNext (  )  )  ;", "scan . close (  )  ;", "indexer . index ( m 2  )  ;", "indexer . index ( m 2 v )  ;", "indexer . close (  )  ;", "scan    =    conn . createScanner ( table . getIndexTableName (  )  ,    new   Authorizations (  \" private \"  ,     \" moreprivate \"  )  )  ;", "scan . setRange ( new   Range (  )  )  ;", "iter    =    scan . iterator (  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . AGE _ VALUE ,     \" cf _ age \"  ,     \" row 1  \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . AGE _ VALUE ,     \" cf _ age \"  ,     \" row 1  \"  ,     \" private \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . AGE _ VALUE ,     \" cf _ age \"  ,     \" row 2  \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . AGE _ VALUE ,     \" cf _ age \"  ,     \" row 2  \"  ,     \" private \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" abc \"  )  ,     \" cf _ arr \"  ,     \" row 1  \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" abc \"  )  ,     \" cf _ arr \"  ,     \" row 1  \"  ,     \" moreprivate \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" abc \"  )  ,     \" cf _ arr \"  ,     \" row 2  \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" abc \"  )  ,     \" cf _ arr \"  ,     \" row 2  \"  ,     \" moreprivate \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . M 1  _ FNAME _ VALUE ,     \" cf _ firstname \"  ,     \" row 1  \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . M 1  _ FNAME _ VALUE ,     \" cf _ firstname \"  ,     \" row 1  \"  ,     \" private \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . M 2  _ FNAME _ VALUE ,     \" cf _ firstname \"  ,     \" row 2  \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . M 2  _ FNAME _ VALUE ,     \" cf _ firstname \"  ,     \" row 2  \"  ,     \" moreprivate \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" def \"  )  ,     \" cf _ arr \"  ,     \" row 1  \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" def \"  )  ,     \" cf _ arr \"  ,     \" row 1  \"  ,     \" moreprivate \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" ghi \"  )  ,     \" cf _ arr \"  ,     \" row 1  \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" ghi \"  )  ,     \" cf _ arr \"  ,     \" row 1  \"  ,     \" moreprivate \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" ghi \"  )  ,     \" cf _ arr \"  ,     \" row 2  \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" ghi \"  )  ,     \" cf _ arr \"  ,     \" row 2  \"  ,     \" moreprivate \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" mno \"  )  ,     \" cf _ arr \"  ,     \" row 2  \"  ,     \"  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" mno \"  )  ,     \" cf _ arr \"  ,     \" row 2  \"  ,     \" moreprivate \"  ,     \"  \"  )  ;", "assertFalse ( iter . hasNext (  )  )  ;", "scan . close (  )  ;", "scan    =    conn . createScanner ( table . getMetricsTableName (  )  ,    new   Authorizations (  \" private \"  ,     \" moreprivate \"  )  )  ;", "scan . setRange ( new   Range (  )  )  ;", "iter    =    scan . iterator (  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . AGE _ VALUE ,     \" cf _ age \"  ,     \"  _  _  _ card _  _  _  \"  ,     \"  2  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . AGE _ VALUE ,     \" cf _ age \"  ,     \"  _  _  _ card _  _  _  \"  ,     \" private \"  ,     \"  2  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,    Indexer . METRICS _ TABLE _ ROW _ ID . array (  )  ,     \"  _  _  _ rows _  _  _  \"  ,     \"  _  _  _ card _  _  _  \"  ,     \"  4  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,    Indexer . METRICS _ TABLE _ ROW _ ID . array (  )  ,     \"  _  _  _ rows _  _  _  \"  ,     \"  _  _  _ first _ row _  _  _  \"  ,     \" row 1  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,    Indexer . METRICS _ TABLE _ ROW _ ID . array (  )  ,     \"  _  _  _ rows _  _  _  \"  ,     \"  _  _  _ last _ row _  _  _  \"  ,     \" row 2  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" abc \"  )  ,     \" cf _ arr \"  ,     \"  _  _  _ card _  _  _  \"  ,     \"  2  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" abc \"  )  ,     \" cf _ arr \"  ,     \"  _  _  _ card _  _  _  \"  ,     \" moreprivate \"  ,     \"  2  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . M 1  _ FNAME _ VALUE ,     \" cf _ firstname \"  ,     \"  _  _  _ card _  _  _  \"  ,     \"  1  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . M 1  _ FNAME _ VALUE ,     \" cf _ firstname \"  ,     \"  _  _  _ card _  _  _  \"  ,     \" private \"  ,     \"  1  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . M 2  _ FNAME _ VALUE ,     \" cf _ firstname \"  ,     \"  _  _  _ card _  _  _  \"  ,     \"  1  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . M 2  _ FNAME _ VALUE ,     \" cf _ firstname \"  ,     \"  _  _  _ card _  _  _  \"  ,     \" moreprivate \"  ,     \"  1  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" def \"  )  ,     \" cf _ arr \"  ,     \"  _  _  _ card _  _  _  \"  ,     \"  1  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" def \"  )  ,     \" cf _ arr \"  ,     \"  _  _  _ card _  _  _  \"  ,     \" moreprivate \"  ,     \"  1  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" ghi \"  )  ,     \" cf _ arr \"  ,     \"  _  _  _ card _  _  _  \"  ,     \"  2  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" ghi \"  )  ,     \" cf _ arr \"  ,     \"  _  _  _ card _  _  _  \"  ,     \" moreprivate \"  ,     \"  2  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" mno \"  )  ,     \" cf _ arr \"  ,     \"  _  _  _ card _  _  _  \"  ,     \"  1  \"  )  ;", ". assertKeyValuePair ( iter . next (  )  ,     . bytes (  \" mno \"  )  ,     \" cf _ arr \"  ,     \"  _  _  _ card _  _  _  \"  ,     \" moreprivate \"  ,     \"  1  \"  )  ;", "assertFalse ( iter . hasNext (  )  )  ;", "scan . close (  )  ;", "}", "METHOD_END"], "methodName": ["testMutationIndexWithVisibilities"], "fileName": "com.facebook.presto.accumulo.index.TestIndexer"}, {"methodBody": ["METHOD_START", "{", "try    {", "if    ( indexer . isPresent (  )  )     {", "indexer . get (  )  . flush (  )  ;", "}", "writer . flush (  )  ;", "}    catch    ( MutationsRejectedException   e )     {", "throw   new   spi . PrestoException ( AccumuloErrorCode . UNEXPECTED _ ACCUMULO _ ERROR ,     \" Mutation   rejected   by   server   on   flush \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["flush"], "fileName": "com.facebook.presto.accumulo.io.AccumuloPageSink"}, {"methodBody": ["METHOD_START", "{", "Type   type    =    field . getType (  )  ;", "if    ( Types . isArrayType ( type )  )     {", "serializer . setArray ( value ,    type ,    field . getArray (  )  )  ;", "} else", "if    ( Types . isMapType ( type )  )     {", "serializer . setMap ( value ,    type ,    field . getMap (  )  )  ;", "} else    {", "if    ( type . equals ( spi . type . BigintType . BIGINT )  )     {", "serializer . setLong ( value ,    field . getLong (  )  )  ;", "} else", "if    ( type . equals ( spi . type . BooleanType . BOOLEAN )  )     {", "serializer . setBoolean ( value ,    field . getBoolean (  )  )  ;", "} else", "if    ( type . equals ( spi . type . DateType . DATE )  )     {", "serializer . setDate ( value ,    field . getDate (  )  )  ;", "} else", "if    ( type . equals ( spi . type . DoubleType . DOUBLE )  )     {", "serializer . setDouble ( value ,    field . getDouble (  )  )  ;", "} else", "if    ( type . equals ( spi . type . IntegerType . INTEGER )  )     {", "serializer . setInt ( value ,    field . getInt (  )  )  ;", "} else", "if    ( type . equals ( spi . type . RealType . REAL )  )     {", "serializer . setFloat ( value ,    field . getFloat (  )  )  ;", "} else", "if    ( type . equals ( spi . type . SmallintType . SMALLINT )  )     {", "serializer . setShort ( value ,    field . getShort (  )  )  ;", "} else", "if    ( type . equals ( spi . type . TimeType . TIME )  )     {", "serializer . setTime ( value ,    field . getTime (  )  )  ;", "} else", "if    ( type . equals ( spi . type . TinyintType . TINYINT )  )     {", "serializer . setByte ( value ,    field . getByte (  )  )  ;", "} else", "if    ( type . equals ( spi . type . TimestampType . TIMESTAMP )  )     {", "serializer . setTimestamp ( value ,    field . getTimestamp (  )  )  ;", "} else", "if    ( type . equals ( spi . type . VarbinaryType . VARBINARY )  )     {", "serializer . setVarbinary ( value ,    field . getVarbinary (  )  )  ;", "} else", "if    ( type   instanceof   spi . type . VarcharType )     {", "serializer . setVarchar ( value ,    field . getVarchar (  )  )  ;", "} else    {", "throw   new   UnsupportedOperationException (  (  \" Unsupported   type    \"     +    type )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["setText"], "fileName": "com.facebook.presto.accumulo.io.AccumuloPageSink"}, {"methodBody": ["METHOD_START", "{", "Text   value    =    new   Text (  )  ;", "Field   rowField    =    row . getField ( rowIdOrdinal )  ;", "if    ( rowField . isNull (  )  )     {", "throw   new   spi . PrestoException ( StandardErrorCode . INVALID _ FUNCTION _ ARGUMENT ,     \" Column   mapped   as   the   Accumulo   row   ID   cannot   be   null \"  )  ;", "}", "AccumuloPageSink . setText ( rowField ,    value ,    serializer )  ;", "Mutation   mutation    =    new   Mutation ( value )  ;", "mutation . put ( AccumuloPageSink . ROW _ ID _ COLUMN ,    AccumuloPageSink . ROW _ ID _ COLUMN ,    new   Value ( value . copyBytes (  )  )  )  ;", "for    ( AccumuloColumnHandle   columnHandle    :    columns )     {", "if    (  ( columnHandle . getOrdinal (  )  )     =  =    rowIdOrdinal )     {", "continue ;", "}", "if    (  !  ( row . getField ( columnHandle . getOrdinal (  )  )  . isNull (  )  )  )     {", "AccumuloPageSink . setText ( row . getField ( columnHandle . getOrdinal (  )  )  ,    value ,    serializer )  ;", "mutation . put ( columnHandle . getFamily (  )  . get (  )  ,    columnHandle . getQualifier (  )  . get (  )  ,    new   Value ( value . copyBytes (  )  )  )  ;", "}", "}", "return   mutation ;", "}", "METHOD_END"], "methodName": ["toMutation"], "fileName": "com.facebook.presto.accumulo.io.AccumuloPageSink"}, {"methodBody": ["METHOD_START", "{", "Type   actual    =    getType ( field )  ;", "for    ( Type   type    :    expected )     {", "if    ( actual . equals ( type )  )     {", "return ;", "}", "}", "throw   new   IllegalArgumentException ( String . format (  \" Expected   field    % s   to   be   a   type   of    % s   but   is    % s \"  ,    field ,    StringUtils . join ( expected ,     \"  ,  \"  )  ,    actual )  )  ;", "}", "METHOD_END"], "methodName": ["checkFieldType"], "fileName": "com.facebook.presto.accumulo.io.AccumuloRecordCursor"}, {"methodBody": ["METHOD_START", "{", "return    ( columnHandles . isEmpty (  )  )     |  |     (  (  ( columnHandles . size (  )  )     =  =     1  )     &  &     ( columnHandles . get (  0  )  . getName (  )  . equals ( rowIdName )  )  )  ;", "}", "METHOD_END"], "methodName": ["retrieveOnlyRowIds"], "fileName": "com.facebook.presto.accumulo.io.AccumuloRecordCursor"}, {"methodBody": ["METHOD_START", "{", "String   sessionScanUser    =    AccumuloSessionProperties . getScanUsername ( session )  ;", "if    ( sessionScanUser    !  =    null )     {", "Authorizations   scanAuths    =    connector . securityOperations (  )  . getUserAuthorizations ( sessionScanUser )  ;", ". LOG . debug (  \" Using   session   scanner   auths   for   user    % s :     % s \"  ,    sessionScanUser ,    scanAuths )  ;", "return   scanAuths ;", "}", "Optional < String >    scanAuths    =    split . getScanAuthorizations (  )  ;", "if    ( scanAuths . isPresent (  )  )     {", "Authorizations   auths    =    new   Authorizations ( Iterables . toArray (  . COMMA _ SPLITTER . split ( scanAuths . get (  )  )  ,    String . class )  )  ;", ". LOG . debug (  \" scan _ auths   table   property   set :     % s \"  ,    auths )  ;", "return   auths ;", "} else    {", "Authorizations   auths    =    connector . securityOperations (  )  . getUserAuthorizations ( username )  ;", ". LOG . debug (  \" scan _ auths   table   property   not   set ,    using   user   auths :     % s \"  ,    auths )  ;", "return   auths ;", "}", "}", "METHOD_END"], "methodName": ["getScanAuthorizations"], "fileName": "com.facebook.presto.accumulo.io.AccumuloRecordSet"}, {"methodBody": ["METHOD_START", "{", "return   columns ;", "}", "METHOD_END"], "methodName": ["getColumns"], "fileName": "com.facebook.presto.accumulo.metadata.AccumuloTable"}, {"methodBody": ["METHOD_START", "{", "return   columnsMetadata ;", "}", "METHOD_END"], "methodName": ["getColumnsMetadata"], "fileName": "com.facebook.presto.accumulo.metadata.AccumuloTable"}, {"methodBody": ["METHOD_START", "{", "return   AccumuloTable . getFullTableName ( schema ,    table )  ;", "}", "METHOD_END"], "methodName": ["getFullTableName"], "fileName": "com.facebook.presto.accumulo.metadata.AccumuloTable"}, {"methodBody": ["METHOD_START", "{", "return   AccumuloTable . getFullTableName ( tableName . getSchemaName (  )  ,    tableName . getTableName (  )  )  ;", "}", "METHOD_END"], "methodName": ["getFullTableName"], "fileName": "com.facebook.presto.accumulo.metadata.AccumuloTable"}, {"methodBody": ["METHOD_START", "{", "return   schema . equals (  \" default \"  )     ?    table    :     ( schema    +     '  .  '  )     +    table ;", "}", "METHOD_END"], "methodName": ["getFullTableName"], "fileName": "com.facebook.presto.accumulo.metadata.AccumuloTable"}, {"methodBody": ["METHOD_START", "{", "return   Indexer . getIndexTableName ( schema ,    table )  ;", "}", "METHOD_END"], "methodName": ["getIndexTableName"], "fileName": "com.facebook.presto.accumulo.metadata.AccumuloTable"}, {"methodBody": ["METHOD_START", "{", "return   Indexer . getMetricsTableName ( schema ,    table )  ;", "}", "METHOD_END"], "methodName": ["getMetricsTableName"], "fileName": "com.facebook.presto.accumulo.metadata.AccumuloTable"}, {"methodBody": ["METHOD_START", "{", "return   rowId ;", "}", "METHOD_END"], "methodName": ["getRowId"], "fileName": "com.facebook.presto.accumulo.metadata.AccumuloTable"}, {"methodBody": ["METHOD_START", "{", "return   this . rowIdOrdinal ;", "}", "METHOD_END"], "methodName": ["getRowIdOrdinal"], "fileName": "com.facebook.presto.accumulo.metadata.AccumuloTable"}, {"methodBody": ["METHOD_START", "{", "return   scanAuthorizations ;", "}", "METHOD_END"], "methodName": ["getScanAuthorizations"], "fileName": "com.facebook.presto.accumulo.metadata.AccumuloTable"}, {"methodBody": ["METHOD_START", "{", "return   schema ;", "}", "METHOD_END"], "methodName": ["getSchema"], "fileName": "com.facebook.presto.accumulo.metadata.AccumuloTable"}, {"methodBody": ["METHOD_START", "{", "return   schemaTableName ;", "}", "METHOD_END"], "methodName": ["getSchemaTableName"], "fileName": "com.facebook.presto.accumulo.metadata.AccumuloTable"}, {"methodBody": ["METHOD_START", "{", "return   serializerClassName ;", "}", "METHOD_END"], "methodName": ["getSerializerClassName"], "fileName": "com.facebook.presto.accumulo.metadata.AccumuloTable"}, {"methodBody": ["METHOD_START", "{", "try    {", "return    (  ( AccumuloRowSerializer )     ( Class . forName ( serializerClassName )  . getConstructor (  )  . newInstance (  )  )  )  ;", "}    catch    ( ClassNotFoundException    |    InstantiationException    |    IllegalAccessException    |    InvocationTargetException    |    NoSuchMethodException   e )     {", "throw   new   spi . PrestoException ( StandardErrorCode . NOT _ FOUND ,     \" Configured   serializer   class   not   found \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["getSerializerInstance"], "fileName": "com.facebook.presto.accumulo.metadata.AccumuloTable"}, {"methodBody": ["METHOD_START", "{", "return   table ;", "}", "METHOD_END"], "methodName": ["getTable"], "fileName": "com.facebook.presto.accumulo.metadata.AccumuloTable"}, {"methodBody": ["METHOD_START", "{", "return   external ;", "}", "METHOD_END"], "methodName": ["isExternal"], "fileName": "com.facebook.presto.accumulo.metadata.AccumuloTable"}, {"methodBody": ["METHOD_START", "{", "return   indexed ;", "}", "METHOD_END"], "methodName": ["isIndexed"], "fileName": "com.facebook.presto.accumulo.metadata.AccumuloTable"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "com.facebook.presto.accumulo.metadata.AccumuloView"}, {"methodBody": ["METHOD_START", "{", "return   schema ;", "}", "METHOD_END"], "methodName": ["getSchema"], "fileName": "com.facebook.presto.accumulo.metadata.AccumuloView"}, {"methodBody": ["METHOD_START", "{", "return   schemaTableName ;", "}", "METHOD_END"], "methodName": ["getSchemaTableName"], "fileName": "com.facebook.presto.accumulo.metadata.AccumuloView"}, {"methodBody": ["METHOD_START", "{", "return   table ;", "}", "METHOD_END"], "methodName": ["getTable"], "fileName": "com.facebook.presto.accumulo.metadata.AccumuloView"}, {"methodBody": ["METHOD_START", "{", "SchemaTableName   tableName    =    table . getSchemaTableName (  )  ;", "String   tablePath    =     . getTablePath ( tableName )  ;", "try    {", "if    (  ( curator . checkExists (  )  . forPath ( tablePath )  )     !  =    null )     {", "throw   new   IOException ( String . format (  \" Metadata   for   table    % s   already   exists \"  ,    tableName )  )  ;", "}", "}    catch    ( Exception   e )     {", "throw   new   PrestoException ( AccumuloErrorCode . ZOOKEEPER _ ERROR ,     \" ZK   error   when   checking   if   table   already   exists \"  ,    e )  ;", "}", "try    {", "curator . create (  )  . creatingParentsIfNeeded (  )  . forPath ( tablePath ,    toJsonBytes ( table )  )  ;", "}    catch    ( Exception   e )     {", "throw   new   PrestoException ( AccumuloErrorCode . ZOOKEEPER _ ERROR ,     \" Error   creating   table   znode   in   ZooKeeper \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["createTableMetadata"], "fileName": "com.facebook.presto.accumulo.metadata.ZooKeeperMetadataManager"}, {"methodBody": ["METHOD_START", "{", "SchemaTableName   tableName    =    view . getSchemaTableName (  )  ;", "String   viewPath    =     . getTablePath ( tableName )  ;", "try    {", "if    (  ( curator . checkExists (  )  . forPath ( viewPath )  )     !  =    null )     {", "throw   new   IOException ( String . format (  \" Metadata   for   view    % s   already   exists \"  ,    tableName )  )  ;", "}", "}    catch    ( Exception   e )     {", "throw   new   PrestoException ( AccumuloErrorCode . ZOOKEEPER _ ERROR ,     \" ZK   error   when   checking   if   view   already   exists \"  ,    e )  ;", "}", "try    {", "curator . create (  )  . creatingParentsIfNeeded (  )  . forPath ( viewPath ,    toJsonBytes ( view )  )  ;", "}    catch    ( Exception   e )     {", "throw   new   PrestoException ( AccumuloErrorCode . ZOOKEEPER _ ERROR ,     \" Error   creating   view   znode   in   ZooKeeper \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["createViewMetadata"], "fileName": "com.facebook.presto.accumulo.metadata.ZooKeeperMetadataManager"}, {"methodBody": ["METHOD_START", "{", "try    {", "curator . delete (  )  . deletingChildrenIfNeeded (  )  . forPath (  . getTablePath ( tableName )  )  ;", "}    catch    ( Exception   e )     {", "throw   new   PrestoException ( AccumuloErrorCode . ZOOKEEPER _ ERROR ,     \" ZK   error   when   deleting   table   metadata \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["deleteTableMetadata"], "fileName": "com.facebook.presto.accumulo.metadata.ZooKeeperMetadataManager"}, {"methodBody": ["METHOD_START", "{", "try    {", "curator . delete (  )  . deletingChildrenIfNeeded (  )  . forPath (  . getTablePath ( tableName )  )  ;", "}    catch    ( Exception   e )     {", "throw   new   PrestoException ( AccumuloErrorCode . ZOOKEEPER _ ERROR ,     \" ZK   error   when   deleting   view   metadata \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["deleteViewMetadata"], "fileName": "com.facebook.presto.accumulo.metadata.ZooKeeperMetadataManager"}, {"methodBody": ["METHOD_START", "{", "try    {", "Set < String >    schemas    =    new   HashSet <  >  (  )  ;", "schemas . addAll ( curator . getChildren (  )  . forPath (  \"  /  \"  )  )  ;", "return   schemas ;", "}    catch    ( Exception   e )     {", "throw   new   PrestoException ( AErrorCode . ZOOKEEPER _ ERROR ,     \" Error   fetching   schemas \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["getSchemaNames"], "fileName": "com.facebook.presto.accumulo.metadata.ZooKeeperMetadataManager"}, {"methodBody": ["METHOD_START", "{", "return   ZooKeeperMetadataManager . getSchemaPath ( tableName . getSchemaName (  )  )  ;", "}", "METHOD_END"], "methodName": ["getSchemaPath"], "fileName": "com.facebook.presto.accumulo.metadata.ZooKeeperMetadataManager"}, {"methodBody": ["METHOD_START", "{", "return    \"  /  \"     +     ( schema . toLowerCase ( Locale . ENGLISH )  )  ;", "}", "METHOD_END"], "methodName": ["getSchemaPath"], "fileName": "com.facebook.presto.accumulo.metadata.ZooKeeperMetadataManager"}, {"methodBody": ["METHOD_START", "{", "try    {", "if    (  ( curator . checkExists (  )  . forPath (  . getTablePath ( stName )  )  )     !  =    null )     {", "return   toAccumuloTable ( curator . getData (  )  . forPath (  . getTablePath ( stName )  )  )  ;", "}", "return   null ;", "}    catch    ( Exception   e )     {", "if    (  ( e   instanceof   KeeperException )     &  &     (  (  (  ( KeeperException )     ( e )  )  . code (  )  )     =  =     ( NONODE )  )  )     {", "return   null ;", "}", "throw   new   PrestoException ( AccumuloErrorCode . ZOOKEEPER _ ERROR ,     \" Error   fetching   table \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["getTable"], "fileName": "com.facebook.presto.accumulo.metadata.ZooKeeperMetadataManager"}, {"methodBody": ["METHOD_START", "{", "String   schemaPath    =    ZooKeeperMetadataManager . getSchemaPath ( schema )  ;", "try    {", "if    (  ( curator . checkExists (  )  . forPath ( schemaPath )  )     =  =    null )     {", "return   ImmutableSet . of (  )  ;", "}", "}    catch    ( Exception   e )     {", "throw   new   PrestoException ( AccumuloErrorCode . ZOOKEEPER _ ERROR ,     \" Error   checking   if   schema   exists \"  ,    e )  ;", "}", "try    {", "return   curator . getChildren (  )  . forPath ( schemaPath )  . stream (  )  . filter (  (    x )     -  >    isAccumuloTable ( new   SchemaTableName ( schema ,    x )  )  )  . collect ( toImmutableSet (  )  )  ;", "}    catch    ( Exception   e )     {", "throw   new   PrestoException ( AccumuloErrorCode . ZOOKEEPER _ ERROR ,     \" Error   fetching   schemas \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["getTableNames"], "fileName": "com.facebook.presto.accumulo.metadata.ZooKeeperMetadataManager"}, {"methodBody": ["METHOD_START", "{", "return    (  ( ZooKeeperMetadataManager . getSchemaPath ( tableName )  )     +     '  /  '  )     +     ( tableName . getTableName (  )  . toLowerCase ( Locale . ENGLISH )  )  ;", "}", "METHOD_END"], "methodName": ["getTablePath"], "fileName": "com.facebook.presto.accumulo.metadata.ZooKeeperMetadataManager"}, {"methodBody": ["METHOD_START", "{", "try    {", "String   tablePath    =     . getTablePath ( stName )  ;", "if    (  ( curator . checkExists (  )  . forPath ( tablePath )  )     !  =    null )     {", "return   toAccumuloView ( curator . getData (  )  . forPath ( tablePath )  )  ;", "}", "return   null ;", "}    catch    ( Exception   e )     {", "if    (  ( e   instanceof   KeeperException )     &  &     (  (  (  ( KeeperException )     ( e )  )  . code (  )  )     =  =     ( NONODE )  )  )     {", "return   null ;", "}", "throw   new   PrestoException ( AccumuloErrorCode . ZOOKEEPER _ ERROR ,     \" Error   fetching   view \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["getView"], "fileName": "com.facebook.presto.accumulo.metadata.ZooKeeperMetadataManager"}, {"methodBody": ["METHOD_START", "{", "String   schemaPath    =    ZooKeeperMetadataManager . getSchemaPath ( schema )  ;", "try    {", "if    (  ( curator . checkExists (  )  . forPath ( schemaPath )  )     =  =    null )     {", "return   ImmutableSet . of (  )  ;", "}", "}    catch    ( Exception   e )     {", "throw   new   PrestoException ( AccumuloErrorCode . ZOOKEEPER _ ERROR ,     \" Error   checking   if   schema   exists \"  ,    e )  ;", "}", "try    {", "return   curator . getChildren (  )  . forPath ( schemaPath )  . stream (  )  . filter (  (    x )     -  >    isAccumuloView ( new   SchemaTableName ( schema ,    x )  )  )  . collect ( toImmutableSet (  )  )  ;", "}    catch    ( Exception   e )     {", "throw   new   PrestoException ( AccumuloErrorCode . ZOOKEEPER _ ERROR ,     \" Error   fetching   schemas \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["getViewNames"], "fileName": "com.facebook.presto.accumulo.metadata.ZooKeeperMetadataManager"}, {"methodBody": ["METHOD_START", "{", "return    !  ( mapper . reader (  )  . readTree ( new   String ( data )  )  . has (  \" data \"  )  )  ;", "}", "METHOD_END"], "methodName": ["isAccumuloTable"], "fileName": "com.facebook.presto.accumulo.metadata.ZooKeeperMetadataManager"}, {"methodBody": ["METHOD_START", "{", "try    {", "String   path    =     . getTablePath ( tableName )  ;", "return    (  ( curator . checkExists (  )  . forPath ( path )  )     !  =    null )     &  &     ( isAccumuloTable ( curator . getData (  )  . forPath ( path )  )  )  ;", "}    catch    ( Exception   e )     {", "if    (  ( e   instanceof   KeeperException )     &  &     (  (  (  ( KeeperException )     ( e )  )  . code (  )  )     =  =     ( NONODE )  )  )     {", "return   false ;", "}", "throw   new   PrestoException ( AccumuloErrorCode . ZOOKEEPER _ ERROR ,     \" Error   checking   if   path    % s   is   an   AccumuloTable   object \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["isAccumuloTable"], "fileName": "com.facebook.presto.accumulo.metadata.ZooKeeperMetadataManager"}, {"methodBody": ["METHOD_START", "{", "return   mapper . reader (  )  . readTree ( new   String ( data )  )  . has (  \" data \"  )  ;", "}", "METHOD_END"], "methodName": ["isAccumuloView"], "fileName": "com.facebook.presto.accumulo.metadata.ZooKeeperMetadataManager"}, {"methodBody": ["METHOD_START", "{", "try    {", "String   path    =     . getTablePath ( tableName )  ;", "return    (  ( curator . checkExists (  )  . forPath ( path )  )     !  =    null )     &  &     ( isAccumuloView ( curator . getData (  )  . forPath ( path )  )  )  ;", "}    catch    ( Exception   e )     {", "if    (  ( e   instanceof   KeeperException )     &  &     (  (  (  ( KeeperException )     ( e )  )  . code (  )  )     =  =     ( NONODE )  )  )     {", "return   false ;", "}", "throw   new   PrestoException ( AccumuloErrorCode . ZOOKEEPER _ ERROR ,     \" Error   checking   if   path   is   an   AccumuloView   object \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["isAccumuloView"], "fileName": "com.facebook.presto.accumulo.metadata.ZooKeeperMetadataManager"}, {"methodBody": ["METHOD_START", "{", "return   mapper . readValue ( new   String ( data )  ,    AccumuloTable . class )  ;", "}", "METHOD_END"], "methodName": ["toAccumuloTable"], "fileName": "com.facebook.presto.accumulo.metadata.ZooKeeperMetadataManager"}, {"methodBody": ["METHOD_START", "{", "return   mapper . readValue ( new   String ( data )  ,    AccumuloView . class )  ;", "}", "METHOD_END"], "methodName": ["toAccumuloView"], "fileName": "com.facebook.presto.accumulo.metadata.ZooKeeperMetadataManager"}, {"methodBody": ["METHOD_START", "{", "return   mapper . writeValueAsBytes ( obj )  ;", "}", "METHOD_END"], "methodName": ["toJsonBytes"], "fileName": "com.facebook.presto.accumulo.metadata.ZooKeeperMetadataManager"}, {"methodBody": ["METHOD_START", "{", "return   domain ;", "}", "METHOD_END"], "methodName": ["getDomain"], "fileName": "com.facebook.presto.accumulo.model.AccumuloColumnConstraint"}, {"methodBody": ["METHOD_START", "{", "return   family ;", "}", "METHOD_END"], "methodName": ["getFamily"], "fileName": "com.facebook.presto.accumulo.model.AccumuloColumnConstraint"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.accumulo.model.AccumuloColumnConstraint"}, {"methodBody": ["METHOD_START", "{", "return   qualifier ;", "}", "METHOD_END"], "methodName": ["getQualifier"], "fileName": "com.facebook.presto.accumulo.model.AccumuloColumnConstraint"}, {"methodBody": ["METHOD_START", "{", "return   indexed ;", "}", "METHOD_END"], "methodName": ["isIndexed"], "fileName": "com.facebook.presto.accumulo.model.AccumuloColumnConstraint"}, {"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . spi . ColumnMetadata ( name ,    type ,    comment ,    false )  ;", "}", "METHOD_END"], "methodName": ["getColumnMetadata"], "fileName": "com.facebook.presto.accumulo.model.AccumuloColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   comment ;", "}", "METHOD_END"], "methodName": ["getComment"], "fileName": "com.facebook.presto.accumulo.model.AccumuloColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   family ;", "}", "METHOD_END"], "methodName": ["getFamily"], "fileName": "com.facebook.presto.accumulo.model.AccumuloColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.accumulo.model.AccumuloColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   ordinal ;", "}", "METHOD_END"], "methodName": ["getOrdinal"], "fileName": "com.facebook.presto.accumulo.model.AccumuloColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   qualifier ;", "}", "METHOD_END"], "methodName": ["getQualifier"], "fileName": "com.facebook.presto.accumulo.model.AccumuloColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.facebook.presto.accumulo.model.AccumuloColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   indexed ;", "}", "METHOD_END"], "methodName": ["isIndexed"], "fileName": "com.facebook.presto.accumulo.model.AccumuloColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   connectorId ;", "}", "METHOD_END"], "methodName": ["getConnectorId"], "fileName": "com.facebook.presto.accumulo.model.AccumuloSplit"}, {"methodBody": ["METHOD_START", "{", "return   constraints ;", "}", "METHOD_END"], "methodName": ["getConstraints"], "fileName": "com.facebook.presto.accumulo.model.AccumuloSplit"}, {"methodBody": ["METHOD_START", "{", "return    ( this . getSchema (  )  . equals (  \" default \"  )     ?     \"  \"     :     ( this . getSchema (  )  )     +     \"  .  \"  )     +     ( this . getTable (  )  )  ;", "}", "METHOD_END"], "methodName": ["getFullTableName"], "fileName": "com.facebook.presto.accumulo.model.AccumuloSplit"}, {"methodBody": ["METHOD_START", "{", "return   hostPort ;", "}", "METHOD_END"], "methodName": ["getHostPort"], "fileName": "com.facebook.presto.accumulo.model.AccumuloSplit"}, {"methodBody": ["METHOD_START", "{", "return   ranges . stream (  )  . map ( WrappedRange :  : getRange )  . collect ( Collectors . toList (  )  )  ;", "}", "METHOD_END"], "methodName": ["getRanges"], "fileName": "com.facebook.presto.accumulo.model.AccumuloSplit"}, {"methodBody": ["METHOD_START", "{", "return   rowId ;", "}", "METHOD_END"], "methodName": ["getRowId"], "fileName": "com.facebook.presto.accumulo.model.AccumuloSplit"}, {"methodBody": ["METHOD_START", "{", "return   scanAuthorizations ;", "}", "METHOD_END"], "methodName": ["getScanAuthorizations"], "fileName": "com.facebook.presto.accumulo.model.AccumuloSplit"}, {"methodBody": ["METHOD_START", "{", "return   schema ;", "}", "METHOD_END"], "methodName": ["getSchema"], "fileName": "com.facebook.presto.accumulo.model.AccumuloSplit"}, {"methodBody": ["METHOD_START", "{", "try    {", "return    (  ( Class <  ?    extends   AccumuloRowSerializer >  )     ( Class . forName ( serializerClassName )  )  )  ;", "}    catch    ( ClassNotFoundException   e )     {", "throw   new   spi . PrestoException ( StandardErrorCode . NOT _ FOUND ,     \" Configured   serializer   class   not   found \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["getSerializerClass"], "fileName": "com.facebook.presto.accumulo.model.AccumuloSplit"}, {"methodBody": ["METHOD_START", "{", "return   this . serializerClassName ;", "}", "METHOD_END"], "methodName": ["getSerializerClassName"], "fileName": "com.facebook.presto.accumulo.model.AccumuloSplit"}, {"methodBody": ["METHOD_START", "{", "return   table ;", "}", "METHOD_END"], "methodName": ["getTable"], "fileName": "com.facebook.presto.accumulo.model.AccumuloSplit"}, {"methodBody": ["METHOD_START", "{", "return   ranges ;", "}", "METHOD_END"], "methodName": ["getWrappedRanges"], "fileName": "com.facebook.presto.accumulo.model.AccumuloSplit"}, {"methodBody": ["METHOD_START", "{", "return   connectorId ;", "}", "METHOD_END"], "methodName": ["getConnectorId"], "fileName": "com.facebook.presto.accumulo.model.AccumuloTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   rowId ;", "}", "METHOD_END"], "methodName": ["getRowId"], "fileName": "com.facebook.presto.accumulo.model.AccumuloTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   scanAuthorizations ;", "}", "METHOD_END"], "methodName": ["getScanAuthorizations"], "fileName": "com.facebook.presto.accumulo.model.AccumuloTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   schema ;", "}", "METHOD_END"], "methodName": ["getSchema"], "fileName": "com.facebook.presto.accumulo.model.AccumuloTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   serializerClassName ;", "}", "METHOD_END"], "methodName": ["getSerializerClassName"], "fileName": "com.facebook.presto.accumulo.model.AccumuloTableHandle"}, {"methodBody": ["METHOD_START", "{", "try    {", "return    (  ( AccumuloRowSerializer )     ( Class . forName ( serializerClassName )  . getConstructor (  )  . newInstance (  )  )  )  ;", "}    catch    ( Exception   e )     {", "throw   new   spi . PrestoException ( StandardErrorCode . NOT _ FOUND ,     \" Configured   serializer   class   not   found \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["getSerializerInstance"], "fileName": "com.facebook.presto.accumulo.model.AccumuloTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   table ;", "}", "METHOD_END"], "methodName": ["getTable"], "fileName": "com.facebook.presto.accumulo.model.AccumuloTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   external ;", "}", "METHOD_END"], "methodName": ["isExternal"], "fileName": "com.facebook.presto.accumulo.model.AccumuloTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   new   SchemaTableName ( schema ,    table )  ;", "}", "METHOD_END"], "methodName": ["toSchemaTableName"], "fileName": "com.facebook.presto.accumulo.model.AccumuloTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   constraint ;", "}", "METHOD_END"], "methodName": ["getConstraint"], "fileName": "com.facebook.presto.accumulo.model.AccumuloTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "return   table ;", "}", "METHOD_END"], "methodName": ["getTable"], "fileName": "com.facebook.presto.accumulo.model.AccumuloTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "if    ( value    =  =    null )     {", "return   null ;", "}", "if    ( Types . isArrayType ( type )  )     {", "if    (  !  ( value   instanceof   Block )  )     {", "throw   new   spi . PrestoException ( StandardErrorCode . FUNCTION _ IMPLEMENTATION _ ERROR ,     (  \" Object   is   not   a   Block ,    but    \"     +     ( value . getClass (  )  )  )  )  ;", "}", "return   value ;", "}", "if    ( Types . isMapType ( type )  )     {", "if    (  !  ( value   instanceof   Block )  )     {", "throw   new   spi . PrestoException ( StandardErrorCode . FUNCTION _ IMPLEMENTATION _ ERROR ,     (  \" Object   is   not   a   Block ,    but    \"     +     ( value . getClass (  )  )  )  )  ;", "}", "return   value ;", "}", "if    ( type . equals ( BigintType . BIGINT )  )     {", "if    (  !  ( value   instanceof   Long )  )     {", "throw   new   spi . PrestoException ( StandardErrorCode . FUNCTION _ IMPLEMENTATION _ ERROR ,     (  \" Object   is   not   a   Long ,    but    \"     +     ( value . getClass (  )  )  )  )  ;", "}", "} else", "if    ( type . equals ( spi . type . IntegerType . INTEGER )  )     {", "if    ( value   instanceof   Long )     {", "return    (  ( Long )     ( value )  )  . intValue (  )  ;", "}", "if    (  !  ( value   instanceof   Integer )  )     {", "throw   new   spi . PrestoException ( StandardErrorCode . FUNCTION _ IMPLEMENTATION _ ERROR ,     (  \" Object   is   not   a   Long   or   Integer ,    but    \"     +     ( value . getClass (  )  )  )  )  ;", "}", "} else", "if    ( type . equals ( spi . type . BooleanType . BOOLEAN )  )     {", "if    (  !  ( value   instanceof   Boolean )  )     {", "throw   new   spi . PrestoException ( StandardErrorCode . FUNCTION _ IMPLEMENTATION _ ERROR ,     (  \" Object   is   not   a   Boolean ,    but    \"     +     ( value . getClass (  )  )  )  )  ;", "}", "return   value ;", "} else", "if    ( type . equals ( spi . type . DateType . DATE )  )     {", "if    ( value   instanceof   Long )     {", "return   new   Date ( toMillis (  (  ( Long )     ( value )  )  )  )  ;", "}", "if    ( value   instanceof   Calendar )     {", "return   new   Date (  (  ( Calendar )     ( value )  )  . getTime (  )  . getTime (  )  )  ;", "}", "if    (  !  ( value   instanceof   Date )  )     {", "throw   new   spi . PrestoException ( StandardErrorCode . FUNCTION _ IMPLEMENTATION _ ERROR ,     (  \" Object   is   not   a   Calendar ,    Date ,    or   Long ,    but    \"     +     ( value . getClass (  )  )  )  )  ;", "}", "} else", "if    ( type . equals ( spi . type . DoubleType . DOUBLE )  )     {", "if    (  !  ( value   instanceof   Double )  )     {", "throw   new   spi . PrestoException ( StandardErrorCode . FUNCTION _ IMPLEMENTATION _ ERROR ,     (  \" Object   is   not   a   Double ,    but    \"     +     ( value . getClass (  )  )  )  )  ;", "}", "} else", "if    ( type . equals ( spi . type . RealType . REAL )  )     {", "if    ( value   instanceof   Long )     {", "return   Float . intBitsToFloat (  (  ( Long )     ( value )  )  . intValue (  )  )  ;", "}", "if    ( value   instanceof   Integer )     {", "return   Float . intBitsToFloat (  (  ( Integer )     ( value )  )  )  ;", "}", "if    (  !  ( value   instanceof   Float )  )     {", "throw   new   spi . PrestoException ( StandardErrorCode . FUNCTION _ IMPLEMENTATION _ ERROR ,     (  \" Object   is   not   a   Float ,    but    \"     +     ( value . getClass (  )  )  )  )  ;", "}", "} else", "if    ( type . equals ( spi . type . SmallintType . SMALLINT )  )     {", "if    ( value   instanceof   Long )     {", "return    (  ( Long )     ( value )  )  . shortValue (  )  ;", "}", "if    ( value   instanceof   Integer )     {", "return    (  ( Integer )     ( value )  )  . shortValue (  )  ;", "}", "if    (  !  ( value   instanceof   Short )  )     {", "throw   new   spi . PrestoException ( StandardErrorCode . FUNCTION _ IMPLEMENTATION _ ERROR ,     (  \" Object   is   not   a   Short ,    but    \"     +     ( value . getClass (  )  )  )  )  ;", "}", "} else", "if    ( type . equals ( spi . type . TimeType . TIME )  )     {", "if    ( value   instanceof   Long )     {", "return   new   Time (  (  ( Long )     ( value )  )  )  ;", "}", "if    (  !  ( value   instanceof   Time )  )     {", "throw   new   spi . PrestoException ( StandardErrorCode . FUNCTION _ IMPLEMENTATION _ ERROR ,     (  \" Object   is   not   a   Long   or   Time ,    but    \"     +     ( value . getClass (  )  )  )  )  ;", "}", "} else", "if    ( type . equals ( spi . type . TimestampType . TIMESTAMP )  )     {", "if    ( value   instanceof   Long )     {", "return   new   Timestamp (  (  ( Long )     ( value )  )  )  ;", "}", "if    (  !  ( value   instanceof   Timestamp )  )     {", "throw   new   spi . PrestoException ( StandardErrorCode . FUNCTION _ IMPLEMENTATION _ ERROR ,     (  \" Object   is   not   a   Long   or   Timestamp ,    but    \"     +     ( value . getClass (  )  )  )  )  ;", "}", "} else", "if    ( type . equals ( spi . type . TinyintType . TINYINT )  )     {", "if    ( value   instanceof   Long )     {", "return    (  ( Long )     ( value )  )  . byteValue (  )  ;", "}", "if    ( value   instanceof   Integer )     {", "return    (  ( Integer )     ( value )  )  . byteValue (  )  ;", "}", "if    ( value   instanceof   Short )     {", "return    (  ( Short )     ( value )  )  . byteValue (  )  ;", "}", "if    (  !  ( value   instanceof   Byte )  )     {", "throw   new   spi . PrestoException ( StandardErrorCode . FUNCTION _ IMPLEMENTATION _ ERROR ,     (  \" Object   is   not   a   Byte ,    but    \"     +     ( value . getClass (  )  )  )  )  ;", "}", "} else", "if    ( type . equals ( spi . type . VarbinaryType . VARBINARY )  )     {", "if    ( value   instanceof   io . airlift . slice . Slice )     {", "return    (  ( io . airlift . slice . Slice )     ( value )  )  . getBytes (  )  ;", "}", "if    (  !  ( value   instanceof   byte [  ]  )  )     {", "throw   new   spi . PrestoException ( StandardErrorCode . FUNCTION _ IMPLEMENTATION _ ERROR ,     (  \" Object   is   not   a   Slice   byte [  ]  ,    but    \"     +     ( value . getClass (  )  )  )  )  ;", "}", "} else", "if    ( type   instanceof   spi . type . VarcharType )     {", "if    ( value   instanceof   io . airlift . slice . Slice )     {", "return   new   String (  (  ( io . airlift . slice . Slice )     ( value )  )  . getBytes (  )  ,    UTF _  8  )  ;", "}", "if    (  !  ( value   instanceof   String )  )     {", "throw   new   spi . PrestoException ( StandardErrorCode . FUNCTION _ IMPLEMENTATION _ ERROR ,     (  \" Object   is   not   a   Slice   or   String ,    but    \"     +     ( value . getClass (  )  )  )  )  ;", "}", "} else    {", "throw   new   spi . PrestoException ( StandardErrorCode . NOT _ SUPPORTED ,     (  \" Unsupported   PrestoType    \"     +    type )  )  ;", "}", "return   value ;", "}", "METHOD_END"], "methodName": ["cleanObject"], "fileName": "com.facebook.presto.accumulo.model.Field"}, {"methodBody": ["METHOD_START", "{", "boolean   retval    =     ( block 1  . getPositionCount (  )  )     =  =     ( block 2  . getPositionCount (  )  )  ;", "for    ( int   i    =     0  ;     ( i    <     ( block 1  . getPositionCount (  )  )  )     &  &    retval ;     +  + i )     {", "if    (  ( block 1    instanceof   ArrayBlock )     &  &     ( block 2    instanceof   ArrayBlock )  )     {", "retval    =     . equals ( block 1  . getObject ( i ,    Block . class )  ,    block 2  . getObject ( i ,    Block . class )  )  ;", "} else    {", "retval    =     ( block 1  . compareTo ( i ,     0  ,    block 1  . getSliceLength ( i )  ,    block 2  ,    i ,     0  ,    block 2  . getSliceLength ( i )  )  )     =  =     0  ;", "}", "}", "return   retval ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "com.facebook.presto.accumulo.model.Field"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Block )     ( value )  )  ;", "}", "METHOD_END"], "methodName": ["getArray"], "fileName": "com.facebook.presto.accumulo.model.Field"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Boolean )     ( value )  )  ;", "}", "METHOD_END"], "methodName": ["getBoolean"], "fileName": "com.facebook.presto.accumulo.model.Field"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Byte )     ( value )  )  ;", "}", "METHOD_END"], "methodName": ["getByte"], "fileName": "com.facebook.presto.accumulo.model.Field"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Date )     ( value )  )  ;", "}", "METHOD_END"], "methodName": ["getDate"], "fileName": "com.facebook.presto.accumulo.model.Field"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Double )     ( value )  )  ;", "}", "METHOD_END"], "methodName": ["getDouble"], "fileName": "com.facebook.presto.accumulo.model.Field"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Float )     ( value )  )  ;", "}", "METHOD_END"], "methodName": ["getFloat"], "fileName": "com.facebook.presto.accumulo.model.Field"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Integer )     ( value )  )  ;", "}", "METHOD_END"], "methodName": ["getInt"], "fileName": "com.facebook.presto.accumulo.model.Field"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Long )     ( value )  )  ;", "}", "METHOD_END"], "methodName": ["getLong"], "fileName": "com.facebook.presto.accumulo.model.Field"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Block )     ( value )  )  ;", "}", "METHOD_END"], "methodName": ["getMap"], "fileName": "com.facebook.presto.accumulo.model.Field"}, {"methodBody": ["METHOD_START", "{", "return   value ;", "}", "METHOD_END"], "methodName": ["getObject"], "fileName": "com.facebook.presto.accumulo.model.Field"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Short )     ( value )  )  ;", "}", "METHOD_END"], "methodName": ["getShort"], "fileName": "com.facebook.presto.accumulo.model.Field"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Time )     ( value )  )  ;", "}", "METHOD_END"], "methodName": ["getTime"], "fileName": "com.facebook.presto.accumulo.model.Field"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Timestamp )     ( value )  )  ;", "}", "METHOD_END"], "methodName": ["getTimestamp"], "fileName": "com.facebook.presto.accumulo.model.Field"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.facebook.presto.accumulo.model.Field"}, {"methodBody": ["METHOD_START", "{", "return    (  ( byte [  ]  )     ( value )  )  ;", "}", "METHOD_END"], "methodName": ["getVarbinary"], "fileName": "com.facebook.presto.accumulo.model.Field"}, {"methodBody": ["METHOD_START", "{", "return    (  ( String )     ( value )  )  ;", "}", "METHOD_END"], "methodName": ["getVarchar"], "fileName": "com.facebook.presto.accumulo.model.Field"}, {"methodBody": ["METHOD_START", "{", "return   indexed ;", "}", "METHOD_END"], "methodName": ["isIndexed"], "fileName": "com.facebook.presto.accumulo.model.Field"}, {"methodBody": ["METHOD_START", "{", "return    ( value )     =  =    null ;", "}", "METHOD_END"], "methodName": ["isNull"], "fileName": "com.facebook.presto.accumulo.model.Field"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( field ,     \" field   is   null \"  )  ;", "fields . add ( field )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addField"], "fileName": "com.facebook.presto.accumulo.model.Row"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( type ,     \" type   is   null \"  )  ;", "fields . add ( new   Field ( value ,    type )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addField"], "fileName": "com.facebook.presto.accumulo.model.Row"}, {"methodBody": ["METHOD_START", "{", "Row   row    =    new   Row (  )  ;", "ImmutableList . Builder < String >    builder    =    ImmutableList . builder (  )  ;", "List < String >    fields    =    builder . addAll ( Splitter . on ( delimiter )  . split ( str )  )  . build (  )  ;", "if    (  ( fields . size (  )  )     !  =     ( schema . getLength (  )  )  )     {", "throw   new   spi . PrestoException ( StandardErrorCode . INVALID _ FUNCTION _ ARGUMENT ,    String . format (  \" Number   of   split   tokens   is   not   equal   to   schema   length .    Expected    % s   received    % s .    Schema :     % s ,    fields    {  % s }  ,    delimiter    % s \"  ,    schema . getLength (  )  ,    fields . size (  )  ,    schema ,    StringUtils . join ( fields ,     \"  ,  \"  )  ,    delimiter )  )  ;", "}", "for    ( int   i    =     0  ;    i    <     ( fields . size (  )  )  ;     +  + i )     {", "Type   type    =    schema . getColumn ( i )  . getType (  )  ;", "row . addField ( Row . valueFromString ( fields . get ( i )  ,    type )  ,    type )  ;", "}", "return   row ;", "}", "METHOD_END"], "methodName": ["fromString"], "fileName": "com.facebook.presto.accumulo.model.Row"}, {"methodBody": ["METHOD_START", "{", "return   fields . get ( i )  ;", "}", "METHOD_END"], "methodName": ["getField"], "fileName": "com.facebook.presto.accumulo.model.Row"}, {"methodBody": ["METHOD_START", "{", "return   fields ;", "}", "METHOD_END"], "methodName": ["getFields"], "fileName": "com.facebook.presto.accumulo.model.Row"}, {"methodBody": ["METHOD_START", "{", "return   fields . size (  )  ;", "}", "METHOD_END"], "methodName": ["length"], "fileName": "com.facebook.presto.accumulo.model.Row"}, {"methodBody": ["METHOD_START", "{", "if    (  ( str    =  =    null )     |  |     ( str . isEmpty (  )  )  )     {", "return   null ;", "} else", "if    ( Types . isArrayType ( type )  )     {", "com . facebook . presto . spi . type . Type   elementType    =    Types . getElementType ( type )  ;", "com . google . common . collect . ImmutableList . Builder < Object >    listBuilder    =    com . google . common . collect . ImmutableList . builder (  )  ;", "for    ( String   element    :    com . google . common . base . Splitter . on (  '  ,  '  )  . split ( str )  )     {", "listBuilder . add ( Row . valueFromString ( element ,    elementType )  )  ;", "}", "return   serializers . AccumuloRowSerializer . getBlockFromArray ( elementType ,    listBuilder . build (  )  )  ;", "} else", "if    ( Types . isMapType ( type )  )     {", "com . facebook . presto . spi . type . Type   keyType    =    Types . getKeyType ( type )  ;", "com . facebook . presto . spi . type . Type   valueType    =    Types . getValueType ( type )  ;", "ImmutableMap . Builder < Object ,    Object >    mapBuilder    =    com . google . common . collect . ImmutableMap . builder (  )  ;", "for    ( String   element    :    com . google . common . base . Splitter . on (  '  ,  '  )  . split ( str )  )     {", "com . google . common . collect . ImmutableList . Builder < String >    builder    =    com . google . common . collect . ImmutableList . builder (  )  ;", "List < String >    keyValue    =    builder . addAll ( com . google . common . base . Splitter . on (  \"  -  >  \"  )  . split ( element )  )  . build (  )  ;", "checkArgument (  (  ( keyValue . size (  )  )     =  =     2  )  ,    String . format (  \" Map   element    % s   has    % d   entries ,    not    2  \"  ,    element ,    keyValue . size (  )  )  )  ;", "mapBuilder . put ( Row . valueFromString ( keyValue . get (  0  )  ,    keyType )  ,    Row . valueFromString ( keyValue . get (  1  )  ,    valueType )  )  ;", "}", "return   serializers . AccumuloRowSerializer . getBlockFromMap ( type ,    mapBuilder . build (  )  )  ;", "} else", "if    ( type . equals ( com . facebook . presto . spi . type . BigintType . BIGINT )  )     {", "return   Long . parseLong ( str )  ;", "} else", "if    ( type . equals ( com . facebook . presto . spi . type . BooleanType . BOOLEAN )  )     {", "return   Boolean . parseBoolean ( str )  ;", "} else", "if    ( type . equals ( com . facebook . presto . spi . type . DateType . DATE )  )     {", "return   new   Date ( Row . DATE _ PARSER . parseDateTime ( str )  . getMillis (  )  )  ;", "} else", "if    ( type . equals ( com . facebook . presto . spi . type . DoubleType . DOUBLE )  )     {", "return   Double . parseDouble ( str )  ;", "} else", "if    ( type . equals ( com . facebook . presto . spi . type . IntegerType . INTEGER )  )     {", "return   Integer . parseInt ( str )  ;", "} else", "if    ( type . equals ( com . facebook . presto . spi . type . RealType . REAL )  )     {", "return   Float . parseFloat ( str )  ;", "} else", "if    ( type . equals ( com . facebook . presto . spi . type . SmallintType . SMALLINT )  )     {", "return   Short . parseShort ( str )  ;", "} else", "if    ( type . equals ( com . facebook . presto . spi . type . TimeType . TIME )  )     {", "return   new   Time ( Row . TIME _ PARSER . parseDateTime ( str )  . getMillis (  )  )  ;", "} else", "if    ( type . equals ( com . facebook . presto . spi . type . TimestampType . TIMESTAMP )  )     {", "return   new   Timestamp ( Row . TIMESTAMP _ PARSER . parseDateTime ( str )  . getMillis (  )  )  ;", "} else", "if    ( type . equals ( com . facebook . presto . spi . type . TinyintType . TINYINT )  )     {", "return   Byte . valueOf ( str )  ;", "} else", "if    ( type . equals ( com . facebook . presto . spi . type . VarbinaryType . VARBINARY )  )     {", "return   str . getBytes ( UTF _  8  )  ;", "} else", "if    ( type   instanceof   com . facebook . presto . spi . type . VarcharType )     {", "return   str ;", "} else    {", "throw   new   com . facebook . presto . spi . PrestoException ( com . facebook . presto . spi . StandardErrorCode . NOT _ SUPPORTED ,     (  \" Unsupported   type    \"     +    type )  )  ;", "}", "}", "METHOD_END"], "methodName": ["valueFromString"], "fileName": "com.facebook.presto.accumulo.model.Row"}, {"methodBody": ["METHOD_START", "{", "return   addColumn ( prestoName ,    family ,    qualifier ,    type ,    false )  ;", "}", "METHOD_END"], "methodName": ["addColumn"], "fileName": "com.facebook.presto.accumulo.model.RowSchema"}, {"methodBody": ["METHOD_START", "{", "columns . add ( new   AccumuloColumnHandle ( prestoName ,    family ,    qualifier ,    type ,    columns . size (  )  ,    String . format (  \" Accumulo   column    % s :  % s .    Indexed :     % b \"  ,    family ,    qualifier ,    indexed )  ,    indexed )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addColumn"], "fileName": "com.facebook.presto.accumulo.model.RowSchema"}, {"methodBody": ["METHOD_START", "{", "columns . add ( new   AccumuloColumnHandle ( name ,    Optional . empty (  )  ,    Optional . empty (  )  ,    type ,    columns . size (  )  ,     \" Accumulo   row   ID \"  ,    false )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addRowId"], "fileName": "com.facebook.presto.accumulo.model.RowSchema"}, {"methodBody": ["METHOD_START", "{", "RowSchema   schema    =    new   RowSchema (  )  ;", "for    ( AccumuloColumnHandle   columnHandle    :    columns )     {", "schema . addColumn ( columnHandle . getName (  )  ,    columnHandle . getFamily (  )  ,    columnHandle . getQualifier (  )  ,    columnHandle . getType (  )  ,    columnHandle . isIndexed (  )  )  ;", "}", "return   schema ;", "}", "METHOD_END"], "methodName": ["fromColumns"], "fileName": "com.facebook.presto.accumulo.model.RowSchema"}, {"methodBody": ["METHOD_START", "{", "checkArgument (  (  ( i    >  =     0  )     &  &     ( i    <     ( columns . size (  )  )  )  )  ,     \" column   index   must   be   non - negative   and   less   than   length \"  )  ;", "return   columns . get ( i )  ;", "}", "METHOD_END"], "methodName": ["getColumn"], "fileName": "com.facebook.presto.accumulo.model.RowSchema"}, {"methodBody": ["METHOD_START", "{", "for    ( AccumuloColumnHandle   columnHandle    :    columns )     {", "if    ( columnHandle . getName (  )  . equals ( name )  )     {", "return   columnHandle ;", "}", "}", "throw   new   spi . PrestoException ( StandardErrorCode . NOT _ FOUND ,     (  \" No   column   with   name    \"     +    name )  )  ;", "}", "METHOD_END"], "methodName": ["getColumn"], "fileName": "com.facebook.presto.accumulo.model.RowSchema"}, {"methodBody": ["METHOD_START", "{", "return   columns ;", "}", "METHOD_END"], "methodName": ["getColumns"], "fileName": "com.facebook.presto.accumulo.model.RowSchema"}, {"methodBody": ["METHOD_START", "{", "return   columns . size (  )  ;", "}", "METHOD_END"], "methodName": ["getLength"], "fileName": "com.facebook.presto.accumulo.model.RowSchema"}, {"methodBody": ["METHOD_START", "{", "return   hostPort ;", "}", "METHOD_END"], "methodName": ["getHostPort"], "fileName": "com.facebook.presto.accumulo.model.TabletSplitMetadata"}, {"methodBody": ["METHOD_START", "{", "return   ranges ;", "}", "METHOD_END"], "methodName": ["getRanges"], "fileName": "com.facebook.presto.accumulo.model.TabletSplitMetadata"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( actual . getAddresses (  )  ,    expected . getAddresses (  )  )  ;", "assertEquals ( actual . getConnectorId (  )  ,    expected . getConnectorId (  )  )  ;", "assertEquals ( actual . getConstraints (  )  ,    expected . getConstraints (  )  )  ;", "assertEquals ( actual . getRowId (  )  ,    expected . getRowId (  )  )  ;", "assertEquals ( actual . getHostPort (  )  ,    expected . getHostPort (  )  )  ;", "assertEquals ( actual . getRanges (  )  ,    expected . getRanges (  )  )  ;", "assertEquals ( actual . getRowId (  )  ,    expected . getRowId (  )  )  ;", "assertEquals ( actual . getScanAuthorizations (  )  ,    expected . getScanAuthorizations (  )  )  ;", "assertEquals ( actual . getSchema (  )  ,    expected . getSchema (  )  )  ;", "assertEquals ( actual . getSerializerClass (  )  ,    expected . getSerializerClass (  )  )  ;", "assertEquals ( actual . getSerializerClassName (  )  ,    expected . getSerializerClassName (  )  )  ;", "assertEquals ( actual . getTable (  )  ,    expected . getTable (  )  )  ;", "}", "METHOD_END"], "methodName": ["assertSplit"], "fileName": "com.facebook.presto.accumulo.model.TestAccumuloSplit"}, {"methodBody": ["METHOD_START", "{", "AccumuloSplit   expected    =    new   AccumuloSplit (  \" accumulo \"  ,     \" schema \"  ,     \" table \"  ,     \" id \"  ,    LexicoderRowSerializer . class . getCanonicalName (  )  ,    ImmutableList . of ( new   Range (  )  ,    new   Range (  \" bar \"  ,     \" foo \"  )  ,    new   Range (  \" bar \"  ,    false ,     \" baz \"  ,    false )  )  . stream (  )  . map ( WrappedRange :  : new )  . collect ( Collectors . toList (  )  )  ,    ImmutableList . of ( new   AccumuloColumnConstraint (  \" id \"  ,     \" fam 1  \"  ,     \" qual 1  \"  ,    Optional . empty (  )  ,    true )  ,    new   AccumuloColumnConstraint (  \" bar \"  ,     \" fam 2  \"  ,     \" qual 2  \"  ,    Optional . empty (  )  ,    true )  )  ,    Optional . of (  \" foo , bar \"  )  ,    Optional . of (  \" localhost :  9  0  0  0  \"  )  )  ;", "String   json    =    codec . toJson ( expected )  ;", "AccumuloSplit   actual    =    codec . fromJson ( json )  ;", ". assertSplit ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testJsonRoundTrip"], "fileName": "com.facebook.presto.accumulo.model.TestAccumuloSplit"}, {"methodBody": ["METHOD_START", "{", "AccumuloSplit   expected    =    new   AccumuloSplit (  \" accumulo \"  ,     \" schema \"  ,     \" table \"  ,     \" id \"  ,    LexicoderRowSerializer . class . getCanonicalName (  )  ,    ImmutableList . of (  )  ,    ImmutableList . of (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  )  ;", "String   json    =    codec . toJson ( expected )  ;", "AccumuloSplit   actual    =    codec . fromJson ( json )  ;", ". assertSplit ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testJsonRoundTripEmptyThings"], "fileName": "com.facebook.presto.accumulo.model.TestAccumuloSplit"}, {"methodBody": ["METHOD_START", "{", "Type   type    =    new   com . facebook . presto . spi . type . ArrayType ( VarcharType . VARCHAR )  ;", "Block   expected    =    AccumuloRowSerializer . getBlockFromArray ( VarcharType . VARCHAR ,    ImmutableList . of (  \" a \"  ,     \" b \"  ,     \" c \"  )  )  ;", "Field   f 1     =    new   Field ( expected ,    type )  ;", "assertEquals ( f 1  . getArray (  )  ,    expected )  ;", "assertEquals ( f 1  . getObject (  )  ,    expected )  ;", "assertEquals ( f 1  . getType (  )  ,    type )  ;", "assertEquals ( f 1  . toString (  )  ,     \" ARRAY    [  ' a '  ,  ' b '  ,  ' c '  ]  \"  )  ;", "Field   f 2     =    new   Field ( f 1  )  ;", "assertEquals ( f 2  ,    f 1  )  ;", "}", "METHOD_END"], "methodName": ["testArray"], "fileName": "com.facebook.presto.accumulo.model.TestField"}, {"methodBody": ["METHOD_START", "{", "Type   type    =    BooleanType . BOOLEAN ;", "f 1     =    new    ( true ,    type )  ;", "assertEquals ( f 1  . getBoolean (  )  . booleanValue (  )  ,    true )  ;", "assertEquals ( f 1  . getObject (  )  ,    true )  ;", "assertEquals ( f 1  . getType (  )  ,    type )  ;", "assertEquals ( f 1  . toString (  )  ,     \" true \"  )  ;", "f 1     =    new    ( false ,    type )  ;", "assertEquals ( f 1  . getBoolean (  )  . booleanValue (  )  ,    false )  ;", "assertEquals ( f 1  . getObject (  )  ,    false )  ;", "assertEquals ( f 1  . getType (  )  ,    type )  ;", "assertEquals ( f 1  . toString (  )  ,     \" false \"  )  ;", "f 2     =    new    ( f 1  )  ;", "assertEquals ( f 2  ,    f 1  )  ;", "}", "METHOD_END"], "methodName": ["testBoolean"], "fileName": "com.facebook.presto.accumulo.model.TestField"}, {"methodBody": ["METHOD_START", "{", "Type   type    =    DateType . DATE ;", "Date   expected    =    new   Date ( new   GregorianCalendar (  1  9  9  9  ,     0  ,     1  )  . getTime (  )  . getTime (  )  )  ;", "f 1     =    new    ( expected ,    type )  ;", "assertEquals ( f 1  . getDate (  )  ,    expected )  ;", "assertEquals ( f 1  . getObject (  )  ,    expected )  ;", "assertEquals ( f 1  . getType (  )  ,    type )  ;", "assertEquals ( f 1  . toString (  )  ,     \" DATE    '  1  9  9  9  -  0  1  -  0  1  '  \"  )  ;", "f 2     =    new    ( f 1  )  ;", "assertEquals ( f 2  ,    f 1  )  ;", "}", "METHOD_END"], "methodName": ["testDate"], "fileName": "com.facebook.presto.accumulo.model.TestField"}, {"methodBody": ["METHOD_START", "{", "Type   type    =    DoubleType . DOUBLE ;", "Double   expected    =     1  2  3  .  4  5  6  7  8  ;", "f 1     =    new    ( expected ,    type )  ;", "assertEquals ( f 1  . getDouble (  )  ,    expected )  ;", "assertEquals ( f 1  . getObject (  )  ,    expected )  ;", "assertEquals ( f 1  . getType (  )  ,    type )  ;", "assertEquals ( f 1  . toString (  )  ,     \"  1  2  3  .  4  5  6  7  8  \"  )  ;", "f 2     =    new    ( f 1  )  ;", "assertEquals ( f 2  ,    f 1  )  ;", "}", "METHOD_END"], "methodName": ["testDouble"], "fileName": "com.facebook.presto.accumulo.model.TestField"}, {"methodBody": ["METHOD_START", "{", "Type   type    =    RealType . REAL ;", "Float   expected    =     1  2  3  .  4  5  6  7  8 F ;", "f 1     =    new    ( expected ,    type )  ;", "assertEquals ( f 1  . getFloat (  )  ,    expected )  ;", "assertEquals ( f 1  . getObject (  )  ,    expected )  ;", "assertEquals ( f 1  . getType (  )  ,    type )  ;", "assertEquals ( f 1  . toString (  )  ,     \"  1  2  3  .  4  5  6  7  8  \"  )  ;", "f 2     =    new    ( f 1  )  ;", "assertEquals ( f 2  ,    f 1  )  ;", "}", "METHOD_END"], "methodName": ["testFloat"], "fileName": "com.facebook.presto.accumulo.model.TestField"}, {"methodBody": ["METHOD_START", "{", "Type   type    =    IntegerType . INTEGER ;", "Integer   expected    =     1  2  3  4  5  6  7  8  ;", "f 1     =    new    ( expected ,    type )  ;", "assertEquals ( f 1  . getInt (  )  ,    expected )  ;", "assertEquals ( f 1  . getObject (  )  ,    expected )  ;", "assertEquals ( f 1  . getType (  )  ,    type )  ;", "assertEquals ( f 1  . toString (  )  ,     \"  1  2  3  4  5  6  7  8  \"  )  ;", "f 2     =    new    ( f 1  )  ;", "assertEquals ( f 2  ,    f 1  )  ;", "}", "METHOD_END"], "methodName": ["testInt"], "fileName": "com.facebook.presto.accumulo.model.TestField"}, {"methodBody": ["METHOD_START", "{", "Type   type    =    BigintType . BIGINT ;", "Long   expected    =     1  2  3  4  5  6  7  8 L ;", "f 1     =    new    ( expected ,    type )  ;", "assertEquals ( f 1  . getLong (  )  ,    expected )  ;", "assertEquals ( f 1  . getObject (  )  ,    expected )  ;", "assertEquals ( f 1  . getType (  )  ,    type )  ;", "assertEquals ( f 1  . toString (  )  ,     \"  1  2  3  4  5  6  7  8  \"  )  ;", "f 2     =    new    ( f 1  )  ;", "assertEquals ( f 2  ,    f 1  )  ;", "}", "METHOD_END"], "methodName": ["testLong"], "fileName": "com.facebook.presto.accumulo.model.TestField"}, {"methodBody": ["METHOD_START", "{", "TypeManager   typeManager    =    new   TypeRegistry (  )  ;", "new   metadata . FunctionRegistry ( typeManager ,    new   block . BlockEncodingManager ( typeManager )  ,    new   FeaturesConfig (  )  )  ;", "Type   type    =    typeManager . getParameterizedType ( MAP ,    ImmutableList . of ( TypeSignatureParameter . of ( VarcharType . VARCHAR . getTypeSignature (  )  )  ,    TypeSignatureParameter . of ( BigintType . BIGINT . getTypeSignature (  )  )  )  )  ;", "Block   expected    =    AccumuloRowSerializer . getBlockFromMap ( type ,    ImmutableMap . of (  \" a \"  ,     1 L ,     \" b \"  ,     2 L ,     \" c \"  ,     3 L )  )  ;", "Field   f 1     =    new   Field ( expected ,    type )  ;", "assertEquals ( f 1  . getMap (  )  ,    expected )  ;", "assertEquals ( f 1  . getObject (  )  ,    expected )  ;", "assertEquals ( f 1  . getType (  )  ,    type )  ;", "assertEquals ( f 1  . toString (  )  ,     \" MAP ( ARRAY    [  ' a '  ,  ' b '  ,  ' c '  ]  ,    ARRAY    [  1  ,  2  ,  3  ]  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testMap"], "fileName": "com.facebook.presto.accumulo.model.TestField"}, {"methodBody": ["METHOD_START", "{", "Type   type    =    SmallintType . SMALLINT ;", "Short   expected    =     1  2  3  4  5  ;", "f 1     =    new    ( expected ,    type )  ;", "assertEquals ( f 1  . getShort (  )  ,    expected )  ;", "assertEquals ( f 1  . getObject (  )  ,    expected )  ;", "assertEquals ( f 1  . getType (  )  ,    type )  ;", "assertEquals ( f 1  . toString (  )  ,     \"  1  2  3  4  5  \"  )  ;", "f 2     =    new    ( f 1  )  ;", "assertEquals ( f 2  ,    f 1  )  ;", "}", "METHOD_END"], "methodName": ["testSmallInt"], "fileName": "com.facebook.presto.accumulo.model.TestField"}, {"methodBody": ["METHOD_START", "{", "Type   type    =    TimeType . TIME ;", "Time   expected    =    new   Time ( new   GregorianCalendar (  1  9  9  9  ,     0  ,     1  ,     1  2  ,     3  0  ,     0  )  . getTime (  )  . getTime (  )  )  ;", "f 1     =    new    ( expected ,    type )  ;", "assertEquals ( f 1  . getTime (  )  ,    expected )  ;", "assertEquals ( f 1  . getObject (  )  ,    expected )  ;", "assertEquals ( f 1  . getType (  )  ,    type )  ;", "assertEquals ( f 1  . toString (  )  ,     \" TIME    '  1  2  :  3  0  :  0  0  '  \"  )  ;", "f 2     =    new    ( f 1  )  ;", "assertEquals ( f 2  ,    f 1  )  ;", "}", "METHOD_END"], "methodName": ["testTime"], "fileName": "com.facebook.presto.accumulo.model.TestField"}, {"methodBody": ["METHOD_START", "{", "Type   type    =    TimestampType . TIMESTAMP ;", "Timestamp   expected    =    new   Timestamp ( new   GregorianCalendar (  1  9  9  9  ,     0  ,     1  ,     1  2  ,     3  0  ,     0  )  . getTime (  )  . getTime (  )  )  ;", "f 1     =    new    ( expected ,    type )  ;", "assertEquals ( f 1  . getTimestamp (  )  ,    expected )  ;", "assertEquals ( f 1  . getObject (  )  ,    expected )  ;", "assertEquals ( f 1  . getType (  )  ,    type )  ;", "assertEquals ( f 1  . toString (  )  ,     \" TIMESTAMP    '  1  9  9  9  -  0  1  -  0  1     1  2  :  3  0  :  0  0  .  0  '  \"  )  ;", "f 2     =    new    ( f 1  )  ;", "assertEquals ( f 2  ,    f 1  )  ;", "}", "METHOD_END"], "methodName": ["testTimestamp"], "fileName": "com.facebook.presto.accumulo.model.TestField"}, {"methodBody": ["METHOD_START", "{", "Type   type    =    TinyintType . TINYINT ;", "Byte   expected    =     1  2  3  ;", "f 1     =    new    ( expected ,    type )  ;", "assertEquals ( f 1  . getByte (  )  ,    expected )  ;", "assertEquals ( f 1  . getObject (  )  ,    expected )  ;", "assertEquals ( f 1  . getType (  )  ,    type )  ;", "assertEquals ( f 1  . toString (  )  ,     \"  1  2  3  \"  )  ;", "f 2     =    new    ( f 1  )  ;", "assertEquals ( f 2  ,    f 1  )  ;", "}", "METHOD_END"], "methodName": ["testTinyInt"], "fileName": "com.facebook.presto.accumulo.model.TestField"}, {"methodBody": ["METHOD_START", "{", "new   Field ( null ,    null )  ;", "}", "METHOD_END"], "methodName": ["testTypeIsNull"], "fileName": "com.facebook.presto.accumulo.model.TestField"}, {"methodBody": ["METHOD_START", "{", "Type   type    =    VarbinaryType . VARBINARY ;", "byte [  ]    expected    =     \" O ' Leary \"  . getBytes ( StandardCharsets . UTF _  8  )  ;", "f 1     =    new    ( expected ,    type )  ;", "assertEquals ( f 1  . getVarbinary (  )  ,    expected )  ;", "assertEquals ( f 1  . getObject (  )  ,    expected )  ;", "assertEquals ( f 1  . getType (  )  ,    type )  ;", "assertEquals ( f 1  . toString (  )  ,     \" CAST (  ' O '  ' Leary '    AS   VARBINARY )  \"  )  ;", "f 2     =    new    ( f 1  )  ;", "assertEquals ( f 2  ,    f 1  )  ;", "}", "METHOD_END"], "methodName": ["testVarbinary"], "fileName": "com.facebook.presto.accumulo.model.TestField"}, {"methodBody": ["METHOD_START", "{", "Type   type    =    VarcharType . VARCHAR ;", "String   expected    =     \" O ' Leary \"  ;", "f 1     =    new    ( expected ,    type )  ;", "assertEquals ( f 1  . getVarchar (  )  ,    expected )  ;", "assertEquals ( f 1  . getObject (  )  ,    expected )  ;", "assertEquals ( f 1  . getType (  )  ,    type )  ;", "assertEquals ( f 1  . toString (  )  ,     \"  ' O '  ' Leary '  \"  )  ;", "f 2     =    new    ( f 1  )  ;", "assertEquals ( f 2  ,    f 1  )  ;", "}", "METHOD_END"], "methodName": ["testVarchar"], "fileName": "com.facebook.presto.accumulo.model.TestField"}, {"methodBody": ["METHOD_START", "{", "Row   r 1     =    new   Row (  )  ;", "r 1  . addField ( new   Field ( AccumuloRowSerializer . getBlockFromArray ( VarcharType . VARCHAR ,    ImmutableList . of (  \" a \"  ,     \" b \"  ,     \" c \"  )  )  ,    new   spi . type . ArrayType ( VarcharType . VARCHAR )  )  )  ;", "r 1  . addField ( true ,    BooleanType . BOOLEAN )  ;", "r 1  . addField ( new   Field ( new   Date ( new   GregorianCalendar (  1  9  9  9  ,     0  ,     1  )  . getTime (  )  . getTime (  )  )  ,    DateType . DATE )  )  ;", "r 1  . addField (  1  2  3  .  4  5  6  7  8  ,    DoubleType . DOUBLE )  ;", "r 1  . addField ( new   Field (  1  2  3  .  4  5  6  7  8 F ,    RealType . REAL )  )  ;", "r 1  . addField (  1  2  3  4  5  6  7  8  ,    IntegerType . INTEGER )  ;", "r 1  . addField ( new   Field (  1  2  3  4  5  6  7  8 L ,    BigintType . BIGINT )  )  ;", "r 1  . addField ( new   Field (  (  ( short )     (  1  2  3  4  5  )  )  ,    SmallintType . SMALLINT )  )  ;", "r 1  . addField ( new   GregorianCalendar (  1  9  9  9  ,     0  ,     1  ,     1  2  ,     3  0  ,     0  )  . getTime (  )  . getTime (  )  ,    TimeType . TIME )  ;", "r 1  . addField ( new   Field ( new   Timestamp ( new   GregorianCalendar (  1  9  9  9  ,     0  ,     1  ,     1  2  ,     3  0  ,     0  )  . getTime (  )  . getTime (  )  )  ,    TimestampType . TIMESTAMP )  )  ;", "r 1  . addField (  (  ( byte )     (  1  2  3  )  )  ,    TinyintType . TINYINT )  ;", "r 1  . addField ( new   Field (  \" O ' Leary \"  . getBytes ( StandardCharsets . UTF _  8  )  ,    VarbinaryType . VARBINARY )  )  ;", "r 1  . addField (  \" O ' Leary \"  ,    VarcharType . VARCHAR )  ;", "r 1  . addField ( null ,    VarcharType . VARCHAR )  ;", "assertEquals ( r 1  . length (  )  ,     1  4  )  ;", "assertEquals ( r 1  . toString (  )  ,     \"  ( ARRAY    [  ' a '  ,  ' b '  ,  ' c '  ]  , true , DATE    '  1  9  9  9  -  0  1  -  0  1  '  ,  1  2  3  .  4  5  6  7  8  ,  1  2  3  .  4  5  6  7  8  ,  1  2  3  4  5  6  7  8  ,  1  2  3  4  5  6  7  8  ,  1  2  3  4  5  , TIME    '  1  2  :  3  0  :  0  0  '  , TIMESTAMP    '  1  9  9  9  -  0  1  -  0  1     1  2  :  3  0  :  0  0  .  0  '  ,  1  2  3  , CAST (  ' O '  ' Leary '    AS   VARBINARY )  ,  ' O '  ' Leary '  , null )  \"  )  ;", "Row   r 2     =    new   Row ( r 1  )  ;", "assertEquals ( r 2  ,    r 1  )  ;", "}", "METHOD_END"], "methodName": ["testRow"], "fileName": "com.facebook.presto.accumulo.model.TestRow"}, {"methodBody": ["METHOD_START", "{", "Row   expected    =    new   Row (  )  ;", "expected . addField ( new   Field ( AccumuloRowSerializer . getBlockFromArray ( VarcharType . VARCHAR ,    ImmutableList . of (  \" a \"  ,     \" b \"  ,     \" c \"  )  )  ,    new   spi . type . ArrayType ( VarcharType . VARCHAR )  )  )  ;", "expected . addField ( true ,    BooleanType . BOOLEAN )  ;", "expected . addField ( new   Field ( new   Date ( new   GregorianCalendar (  1  9  9  9  ,     0  ,     1  )  . getTime (  )  . getTime (  )  )  ,    DateType . DATE )  )  ;", "expected . addField (  1  2  3  .  4  5  6  7  8  ,    DoubleType . DOUBLE )  ;", "expected . addField ( new   Field (  1  2  3  .  4  5  6  7  8 F ,    RealType . REAL )  )  ;", "expected . addField (  1  2  3  4  5  6  7  8  ,    IntegerType . INTEGER )  ;", "expected . addField ( new   Field (  1  2  3  4  5  6  7  8 L ,    BigintType . BIGINT )  )  ;", "expected . addField ( new   Field (  (  ( short )     (  1  2  3  4  5  )  )  ,    SmallintType . SMALLINT )  )  ;", "expected . addField ( new   GregorianCalendar (  1  9  9  9  ,     0  ,     1  ,     1  2  ,     3  0  ,     0  )  . getTime (  )  . getTime (  )  ,    TimeType . TIME )  ;", "expected . addField ( new   Field ( new   Timestamp ( new   GregorianCalendar (  1  9  9  9  ,     0  ,     1  ,     1  2  ,     3  0  ,     0  )  . getTime (  )  . getTime (  )  )  ,    TimestampType . TIMESTAMP )  )  ;", "expected . addField (  (  ( byte )     (  1  2  3  )  )  ,    TinyintType . TINYINT )  ;", "expected . addField ( new   Field (  \" O ' Leary \"  . getBytes ( StandardCharsets . UTF _  8  )  ,    VarbinaryType . VARBINARY )  )  ;", "expected . addField (  \" O ' Leary \"  ,    VarcharType . VARCHAR )  ;", "expected . addField ( null ,    VarcharType . VARCHAR )  ;", "RowSchema   schema    =    new   RowSchema (  )  ;", "schema . addRowId (  \" a \"  ,    new   spi . type . ArrayType ( VarcharType . VARCHAR )  )  ;", "schema . addColumn (  \" b \"  ,    Optional . of (  \" b \"  )  ,    Optional . of (  \" b \"  )  ,    BooleanType . BOOLEAN )  ;", "schema . addColumn (  \" c \"  ,    Optional . of (  \" c \"  )  ,    Optional . of (  \" c \"  )  ,    DateType . DATE )  ;", "schema . addColumn (  \" d \"  ,    Optional . of (  \" d \"  )  ,    Optional . of (  \" d \"  )  ,    DoubleType . DOUBLE )  ;", "schema . addColumn (  \" e \"  ,    Optional . of (  \" e \"  )  ,    Optional . of (  \" e \"  )  ,    RealType . REAL )  ;", "schema . addColumn (  \" f \"  ,    Optional . of (  \" f \"  )  ,    Optional . of (  \" f \"  )  ,    IntegerType . INTEGER )  ;", "schema . addColumn (  \" g \"  ,    Optional . of (  \" g \"  )  ,    Optional . of (  \" g \"  )  ,    BigintType . BIGINT )  ;", "schema . addColumn (  \" h \"  ,    Optional . of (  \" h \"  )  ,    Optional . of (  \" h \"  )  ,    SmallintType . SMALLINT )  ;", "schema . addColumn (  \" i \"  ,    Optional . of (  \" i \"  )  ,    Optional . of (  \" i \"  )  ,    TimeType . TIME )  ;", "schema . addColumn (  \" j \"  ,    Optional . of (  \" j \"  )  ,    Optional . of (  \" j \"  )  ,    TimestampType . TIMESTAMP )  ;", "schema . addColumn (  \" k \"  ,    Optional . of (  \" k \"  )  ,    Optional . of (  \" k \"  )  ,    TinyintType . TINYINT )  ;", "schema . addColumn (  \" l \"  ,    Optional . of (  \" l \"  )  ,    Optional . of (  \" l \"  )  ,    VarbinaryType . VARBINARY )  ;", "schema . addColumn (  \" m \"  ,    Optional . of (  \" m \"  )  ,    Optional . of (  \" m \"  )  ,    VarcharType . VARCHAR )  ;", "schema . addColumn (  \" n \"  ,    Optional . of (  \" n \"  )  ,    Optional . of (  \" n \"  )  ,    VarcharType . VARCHAR )  ;", "Row   actual    =    Row . fromString ( schema ,     \" a , b , c | true |  1  9  9  9  -  0  1  -  0  1  |  1  2  3  .  4  5  6  7  8  |  1  2  3  .  4  5  6  7  8  |  1  2  3  4  5  6  7  8  |  1  2  3  4  5  6  7  8  |  1  2  3  4  5  |  1  2  :  3  0  :  0  0  |  1  9  9  9  -  0  1  -  0  1     1  2  :  3  0  :  0  0  .  0  |  1  2  3  | O ' Leary | O ' Leary |  \"  ,     '  |  '  )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testRowFromString"], "fileName": "com.facebook.presto.accumulo.model.TestRow"}, {"methodBody": ["METHOD_START", "{", "Row   r 1     =    new   Row (  )  ;", "r 1  . addField ( VarcharType . VARCHAR ,    null )  ;", "}", "METHOD_END"], "methodName": ["testRowTypeIsNull"], "fileName": "com.facebook.presto.accumulo.model.TestRow"}, {"methodBody": ["METHOD_START", "{", "Range   exact    =    new   Range (  \" foo \"  )  ;", "Range   range    =    new   Range (  \" bar \"  ,     \" foo \"  )  ;", "Range   exclusiveRange    =    new   Range (  \" asiago \"  ,    false ,     \" bagel \"  ,    false )  ;", "assertEquals (  . fromBytes ( new    ( exact )  . toBytes (  )  )  . getRange (  )  ,    exact )  ;", "assertEquals (  . fromBytes ( new    ( range )  . toBytes (  )  )  . getRange (  )  ,    range )  ;", "assertEquals (  . fromBytes ( new    ( exclusiveRange )  . toBytes (  )  )  . getRange (  )  ,    exclusiveRange )  ;", "}", "METHOD_END"], "methodName": ["testJsonRoundTrip"], "fileName": "com.facebook.presto.accumulo.model.TestWrappedRange"}, {"methodBody": ["METHOD_START", "{", "DataInput   in    =    ByteStreams . newDataInput ( bytes )  ;", "Range   range    =    new   Range (  )  ;", "range . readFields ( in )  ;", "return   new    ( range )  ;", "}", "METHOD_END"], "methodName": ["fromBytes"], "fileName": "com.facebook.presto.accumulo.model.WrappedRange"}, {"methodBody": ["METHOD_START", "{", "return   range ;", "}", "METHOD_END"], "methodName": ["getRange"], "fileName": "com.facebook.presto.accumulo.model.WrappedRange"}, {"methodBody": ["METHOD_START", "{", "ByteArrayDataOutput   out    =    ByteStreams . newDataOutput (  )  ;", "r . write ( out )  ;", "return   out . toByteArray (  )  ;", "}", "METHOD_END"], "methodName": ["toBytes"], "fileName": "com.facebook.presto.accumulo.model.WrappedRange"}, {"methodBody": ["METHOD_START", "{", "return   new   byte [  0  ]  ;", "}", "METHOD_END"], "methodName": ["b"], "fileName": "com.facebook.presto.accumulo.serializers.AbstractTestAccumuloRowSerializer"}, {"methodBody": ["METHOD_START", "{", "return   str . getBytes ( StandardCharsets . UTF _  8  )  ;", "}", "METHOD_END"], "methodName": ["b"], "fileName": "com.facebook.presto.accumulo.serializers.AbstractTestAccumuloRowSerializer"}, {"methodBody": ["METHOD_START", "{", "Mutation   m    =    new   Mutation (  \" row \"  )  ;", "m . put (  . b (  \" a \"  )  ,     . b (  \" a \"  )  ,    data )  ;", "Key   key    =    new   Key (  . b (  \" row \"  )  ,     . b (  \" a \"  )  ,     . b (  \" b \"  )  ,     . b (  )  ,     0  ,    false )  ;", "Value   value    =    new   Value ( data )  ;", "serializer . setMapping (  . COLUMN _ NAME ,     \" a \"  ,     \" b \"  )  ;", "serializer . deserialize ( new   SimpleImmutableEntry ( key ,    value )  )  ;", "}", "METHOD_END"], "methodName": ["deserializeData"], "fileName": "com.facebook.presto.accumulo.serializers.AbstractTestAccumuloRowSerializer"}, {"methodBody": ["METHOD_START", "{", "AccumuloRowSerializer   serializer    =    serializerClass . getConstructor (  )  . newInstance (  )  ;", "Type   type    =    new   com . facebook . presto . spi . type . ArrayType ( VarcharType . VARCHAR )  ;", "List < Object >    expected    =    ImmutableList . of (  \" a \"  ,     \" b \"  ,     \" c \"  )  ;", "byte [  ]    data    =    serializer . encode ( type ,    AccumuloRowSerializer . getBlockFromArray ( VarcharType . VARCHAR ,    expected )  )  ;", "List < Object >    actual    =    serializer . decode ( type ,    data )  ;", "assertEquals ( actual ,    expected )  ;", "deserializeData ( serializer ,    data )  ;", "actual    =    AccumuloRowSerializer . getArrayFromBlock ( VarcharType . VARCHAR ,    serializer . getArray (  . COLUMN _ NAME ,    type )  )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testArray"], "fileName": "com.facebook.presto.accumulo.serializers.AbstractTestAccumuloRowSerializer"}, {"methodBody": ["METHOD_START", "{", "AccumuloRowSerializer   serializer    =    serializerClass . getConstructor (  )  . newInstance (  )  ;", "Type   type    =    BooleanType . BOOLEAN ;", "byte [  ]    data    =    serializer . encode ( type ,    true )  ;", "boolean   actual    =    serializer . decode ( type ,    data )  ;", "assertEquals ( actual ,    true )  ;", "deserializeData ( serializer ,    data )  ;", "actual    =    serializer . getBoolean (  . COLUMN _ NAME )  ;", "assertEquals ( actual ,    true )  ;", "data    =    serializer . encode ( type ,    false )  ;", "actual    =    serializer . decode ( type ,    data )  ;", "assertEquals ( actual ,    false )  ;", "deserializeData ( serializer ,    data )  ;", "actual    =    serializer . getBoolean (  . COLUMN _ NAME )  ;", "assertEquals ( actual ,    false )  ;", "}", "METHOD_END"], "methodName": ["testBoolean"], "fileName": "com.facebook.presto.accumulo.serializers.AbstractTestAccumuloRowSerializer"}, {"methodBody": ["METHOD_START", "{", "Date   expected    =    new   Date ( new   DateTime (  2  0  0  1  ,     2  ,     3  ,     4  ,     5  ,     6  ,    DateTimeZone . UTC )  . getMillis (  )  )  ;", "AccumuloRowSerializer   serializer    =    serializerClass . getConstructor (  )  . newInstance (  )  ;", "byte [  ]    data    =    serializer . encode ( DateType . DATE ,    expected )  ;", "deserializeData ( serializer ,    data )  ;", "Date   actual    =    serializer . getDate (  . COLUMN _ NAME )  ;", "assertEquals ( TimeUnit . MILLISECONDS . toDays ( actual . getTime (  )  )  ,    TimeUnit . MILLISECONDS . toDays ( expected . getTime (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testDate"], "fileName": "com.facebook.presto.accumulo.serializers.AbstractTestAccumuloRowSerializer"}, {"methodBody": ["METHOD_START", "{", "AccumuloRowSerializer   serializer    =    serializerClass . getConstructor (  )  . newInstance (  )  ;", "Type   type    =    DoubleType . DOUBLE ;", "Double   expected    =     1  2  3  .  4  5  6  7  8  ;", "byte [  ]    data    =    serializer . encode ( type ,    expected )  ;", "Double   actual    =    serializer . decode ( type ,    data )  ;", "assertEquals ( actual ,    expected )  ;", "deserializeData ( serializer ,    data )  ;", "actual    =    serializer . getDouble (  . COLUMN _ NAME )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testDouble"], "fileName": "com.facebook.presto.accumulo.serializers.AbstractTestAccumuloRowSerializer"}, {"methodBody": ["METHOD_START", "{", "AccumuloRowSerializer   serializer    =    serializerClass . getConstructor (  )  . newInstance (  )  ;", "Type   type    =    RealType . REAL ;", "Float   expected    =     1  2  3  .  4  5  6  7  8 F ;", "byte [  ]    data    =    serializer . encode ( type ,    expected )  ;", "Float   actual    =     (  ( Double )     ( serializer . decode ( type ,    data )  )  )  . floatValue (  )  ;", "assertEquals ( actual ,    expected )  ;", "deserializeData ( serializer ,    data )  ;", "actual    =    serializer . getFloat (  . COLUMN _ NAME )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testFloat"], "fileName": "com.facebook.presto.accumulo.serializers.AbstractTestAccumuloRowSerializer"}, {"methodBody": ["METHOD_START", "{", "AccumuloRowSerializer   serializer    =    serializerClass . getConstructor (  )  . newInstance (  )  ;", "Type   type    =    IntegerType . INTEGER ;", "Integer   expected    =     1  2  3  4  5  6  ;", "byte [  ]    data    =    serializer . encode ( type ,    expected )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "Integer   actual    =     (  ( Long )     ( serializer . decode ( type ,    data )  )  )  . intValue (  )  ;", "assertEquals ( actual ,    expected )  ;", "deserializeData ( serializer ,    data )  ;", "actual    =    serializer . getInt (  . COLUMN _ NAME )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testInt"], "fileName": "com.facebook.presto.accumulo.serializers.AbstractTestAccumuloRowSerializer"}, {"methodBody": ["METHOD_START", "{", "AccumuloRowSerializer   serializer    =    serializerClass . getConstructor (  )  . newInstance (  )  ;", "Type   type    =    BigintType . BIGINT ;", "Long   expected    =     1  2  3  4  5  6 L ;", "byte [  ]    data    =    serializer . encode ( type ,    expected )  ;", "Long   actual    =    serializer . decode ( type ,    data )  ;", "assertEquals ( actual ,    expected )  ;", "deserializeData ( serializer ,    data )  ;", "actual    =    serializer . getLong (  . COLUMN _ NAME )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testLong"], "fileName": "com.facebook.presto.accumulo.serializers.AbstractTestAccumuloRowSerializer"}, {"methodBody": ["METHOD_START", "{", "TypeManager   typeManager    =    new   TypeRegistry (  )  ;", "new   com . facebook . presto . metadata . FunctionRegistry ( typeManager ,    new   com . facebook . presto . block . BlockEncodingManager ( typeManager )  ,    new   FeaturesConfig (  )  )  ;", "AccumuloRowSerializer   serializer    =    serializerClass . getConstructor (  )  . newInstance (  )  ;", "Type   type    =    typeManager . getParameterizedType ( MAP ,    ImmutableList . of ( TypeSignatureParameter . of ( VarcharType . VARCHAR . getTypeSignature (  )  )  ,    TypeSignatureParameter . of ( BigintType . BIGINT . getTypeSignature (  )  )  )  )  ;", "Map < Object ,    Object >    expected    =    ImmutableMap . of (  \" a \"  ,     1 L ,     \" b \"  ,     2 L ,     \"  3  \"  ,     3 L )  ;", "byte [  ]    data    =    serializer . encode ( type ,    AccumuloRowSerializer . getBlockFromMap ( type ,    expected )  )  ;", "Map < Object ,    Object >    actual    =    serializer . decode ( type ,    data )  ;", "assertEquals ( actual ,    expected )  ;", "deserializeData ( serializer ,    data )  ;", "actual    =    AccumuloRowSerializer . getMapFromBlock ( type ,    serializer . getMap (  . COLUMN _ NAME ,    type )  )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testMap"], "fileName": "com.facebook.presto.accumulo.serializers.AbstractTestAccumuloRowSerializer"}, {"methodBody": ["METHOD_START", "{", "AccumuloRowSerializer   serializer    =    serializerClass . getConstructor (  )  . newInstance (  )  ;", "Type   type    =    SmallintType . SMALLINT ;", "Short   expected    =     1  2  3  4  5  ;", "byte [  ]    data    =    serializer . encode ( type ,    expected )  ;", "Short   actual    =     (  ( Long )     ( serializer . decode ( type ,    data )  )  )  . shortValue (  )  ;", "assertEquals ( actual ,    expected )  ;", "deserializeData ( serializer ,    data )  ;", "actual    =    serializer . getShort (  . COLUMN _ NAME )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testSmallInt"], "fileName": "com.facebook.presto.accumulo.serializers.AbstractTestAccumuloRowSerializer"}, {"methodBody": ["METHOD_START", "{", "AccumuloRowSerializer   serializer    =    serializerClass . getConstructor (  )  . newInstance (  )  ;", "Type   type    =    TimeType . TIME ;", "Time   expected    =    new   Time ( new   Date (  )  . getTime (  )  )  ;", "byte [  ]    data    =    serializer . encode ( type ,    expected )  ;", "Time   actual    =    new   Time ( serializer . decode ( type ,    data )  )  ;", "assertEquals ( actual ,    expected )  ;", "deserializeData ( serializer ,    data )  ;", "actual    =    serializer . getTime (  . COLUMN _ NAME )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testTime"], "fileName": "com.facebook.presto.accumulo.serializers.AbstractTestAccumuloRowSerializer"}, {"methodBody": ["METHOD_START", "{", "AccumuloRowSerializer   serializer    =    serializerClass . getConstructor (  )  . newInstance (  )  ;", "Type   type    =    TimestampType . TIMESTAMP ;", "Timestamp   expected    =    new   Timestamp ( new   Date (  )  . getTime (  )  )  ;", "byte [  ]    data    =    serializer . encode ( type ,    expected )  ;", "Timestamp   actual    =    new   Timestamp ( serializer . decode ( type ,    data )  )  ;", "assertEquals ( actual ,    expected )  ;", "deserializeData ( serializer ,    data )  ;", "actual    =    serializer . getTimestamp (  . COLUMN _ NAME )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testTimestamp"], "fileName": "com.facebook.presto.accumulo.serializers.AbstractTestAccumuloRowSerializer"}, {"methodBody": ["METHOD_START", "{", "AccumuloRowSerializer   serializer    =    serializerClass . getConstructor (  )  . newInstance (  )  ;", "Type   type    =    TinyintType . TINYINT ;", "Byte   expected    =     1  2  3  ;", "byte [  ]    data    =    serializer . encode ( type ,    expected )  ;", "Byte   actual    =     (  ( Long )     ( serializer . decode ( type ,    data )  )  )  . byteValue (  )  ;", "assertEquals ( actual ,    expected )  ;", "deserializeData ( serializer ,    data )  ;", "actual    =    serializer . getByte (  . COLUMN _ NAME )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testTinyInt"], "fileName": "com.facebook.presto.accumulo.serializers.AbstractTestAccumuloRowSerializer"}, {"methodBody": ["METHOD_START", "{", "AccumuloRowSerializer   serializer    =    serializerClass . getConstructor (  )  . newInstance (  )  ;", "Type   type    =    VarbinaryType . VARBINARY ;", "byte [  ]    expected    =     . b ( UUID . randomUUID (  )  . toString (  )  )  ;", "byte [  ]    data    =    serializer . encode ( type ,    expected )  ;", "byte [  ]    actual    =    serializer . decode ( type ,    data )  ;", "assertEquals ( actual ,    expected )  ;", "deserializeData ( serializer ,    data )  ;", "actual    =    serializer . getVarbinary (  . COLUMN _ NAME )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testVarbinary"], "fileName": "com.facebook.presto.accumulo.serializers.AbstractTestAccumuloRowSerializer"}, {"methodBody": ["METHOD_START", "{", "AccumuloRowSerializer   serializer    =    serializerClass . getConstructor (  )  . newInstance (  )  ;", "Type   type    =    VarcharType . VARCHAR ;", "String   expected    =    UUID . randomUUID (  )  . toString (  )  ;", "byte [  ]    data    =    serializer . encode ( type ,    expected )  ;", "String   actual    =    serializer . decode ( type ,    data )  ;", "assertEquals ( actual ,    expected )  ;", "deserializeData ( serializer ,    data )  ;", "actual    =    serializer . getVarchar (  . COLUMN _ NAME )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testVarchar"], "fileName": "com.facebook.presto.accumulo.serializers.AbstractTestAccumuloRowSerializer"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < Object >    arrayBuilder    =    ImmutableList . builder (  )  ;", "for    ( int   i    =     0  ;    i    <     ( block . getPositionCount (  )  )  ;     +  + i )     {", "arrayBuilder . add (  . readObject ( elementType ,    block ,    i )  )  ;", "}", "return   arrayBuilder . build (  )  ;", "}", "METHOD_END"], "methodName": ["getArrayFromBlock"], "fileName": "com.facebook.presto.accumulo.serializers.AccumuloRowSerializer"}, {"methodBody": ["METHOD_START", "{", "BlockBuilder   builder    =    elementType . createBlockBuilder ( null ,    array . size (  )  )  ;", "for    ( Object   item    :    array )     {", ". writeObject ( builder ,    elementType ,    item )  ;", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["getBlockFromArray"], "fileName": "com.facebook.presto.accumulo.serializers.AccumuloRowSerializer"}, {"methodBody": ["METHOD_START", "{", "Type   keyType    =    mapType . getTypeParameters (  )  . get (  0  )  ;", "Type   valueType    =    mapType . getTypeParameters (  )  . get (  1  )  ;", "BlockBuilder   mapBlockBuilder    =    mapType . createBlockBuilder ( null ,     1  )  ;", "BlockBuilder   builder    =    mapBlockBuilder . beginBlockEntry (  )  ;", "for    ( Map . Entry <  ?  ,     ?  >    entry    :    map . entrySet (  )  )     {", ". writeObject ( builder ,    keyType ,    entry . getKey (  )  )  ;", ". writeObject ( builder ,    valueType ,    entry . getValue (  )  )  ;", "}", "mapBlockBuilder . closeEntry (  )  ;", "return    (  ( Block )     ( mapType . getObject ( mapBlockBuilder ,     0  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getBlockFromMap"], "fileName": "com.facebook.presto.accumulo.serializers.AccumuloRowSerializer"}, {"methodBody": ["METHOD_START", "{", "return   new   LexicoderRowSerializer (  )  ;", "}", "METHOD_END"], "methodName": ["getDefault"], "fileName": "com.facebook.presto.accumulo.serializers.AccumuloRowSerializer"}, {"methodBody": ["METHOD_START", "{", "Map < Object ,    Object >    map    =    new   HashMap (  (  ( block . getPositionCount (  )  )     /     2  )  )  ;", "Type   keyType    =    Types . getKeyType ( type )  ;", "Type   valueType    =    Types . getValueType ( type )  ;", "for    ( int   i    =     0  ;    i    <     ( block . getPositionCount (  )  )  ;    i    +  =     2  )     {", "map . put (  . readObject ( keyType ,    block ,    i )  ,     . readObject ( valueType ,    block ,     ( i    +     1  )  )  )  ;", "}", "return   map ;", "}", "METHOD_END"], "methodName": ["getMapFromBlock"], "fileName": "com.facebook.presto.accumulo.serializers.AccumuloRowSerializer"}, {"methodBody": ["METHOD_START", "{", "if    ( Types . isArrayType ( type )  )     {", "Type   elementType    =    Types . getElementType ( type )  ;", "return    . getArrayFromBlock ( elementType ,    block . getObject ( position ,    Block . class )  )  ;", "} else", "if    ( Types . isMapType ( type )  )     {", "return    . getMapFromBlock ( type ,    block . getObject ( position ,    Block . class )  )  ;", "} else    {", "if    (  ( type . getJavaType (  )  )     =  =     ( io . airlift . slice . Slice . class )  )     {", "io . airlift . slice . Slice   slice    =     (  ( io . airlift . slice . Slice )     ( com . facebook . presto . spi . type . TypeUtils . readNativeValue ( type ,    block ,    position )  )  )  ;", "return   type . equals ( VarcharType . VARCHAR )     ?    slice . toStringUtf 8  (  )     :    slice . getBytes (  )  ;", "}", "return   com . facebook . presto . spi . type . TypeUtils . readNativeValue ( type ,    block ,    position )  ;", "}", "}", "METHOD_END"], "methodName": ["readObject"], "fileName": "com.facebook.presto.accumulo.serializers.AccumuloRowSerializer"}, {"methodBody": ["METHOD_START", "{", "if    ( Types . isArrayType ( type )  )     {", "BlockBuilder   arrayBldr    =    builder . beginBlockEntry (  )  ;", "Type   elementType    =    Types . getElementType ( type )  ;", "for    ( Object   item    :     (  ( List <  ?  >  )     ( obj )  )  )     {", ". writeObject ( arrayBldr ,    elementType ,    item )  ;", "}", "builder . closeEntry (  )  ;", "} else", "if    ( Types . isMapType ( type )  )     {", "BlockBuilder   mapBlockBuilder    =    builder . beginBlockEntry (  )  ;", "for    ( Entry <  ?  ,     ?  >    entry    :     (  ( Map <  ?  ,     ?  >  )     ( obj )  )  . entrySet (  )  )     {", ". writeObject ( mapBlockBuilder ,    Types . getKeyType ( type )  ,    entry . getKey (  )  )  ;", ". writeObject ( mapBlockBuilder ,    Types . getValueType ( type )  ,    entry . getValue (  )  )  ;", "}", "builder . closeEntry (  )  ;", "} else    {", "com . facebook . presto . spi . type . TypeUtils . writeNativeValue ( type ,    builder ,    obj )  ;", "}", "}", "METHOD_END"], "methodName": ["writeObject"], "fileName": "com.facebook.presto.accumulo.serializers.AccumuloRowSerializer"}, {"methodBody": ["METHOD_START", "{", "return   columnValues . get ( name )  ;", "}", "METHOD_END"], "methodName": ["getFieldValue"], "fileName": "com.facebook.presto.accumulo.serializers.LexicoderRowSerializer"}, {"methodBody": ["METHOD_START", "{", "if    ( Types . isArrayType ( type )  )     {", "return    . getListLexicoder ( type )  ;", "} else", "if    ( Types . isMapType ( type )  )     {", "return    . getMapLexicoder ( type )  ;", "} else", "if    ( type   instanceof   com . facebook . presto . spi . type . VarcharType )     {", "return    . LEXICODER _ MAP . get ( com . facebook . presto . spi . type . VarcharType . VARCHAR )  ;", "} else    {", "Lexicoder   lexicoder    =     . LEXICODER _ MAP . get ( type )  ;", "if    ( lexicoder    =  =    null )     {", "throw   new   com . facebook . presto . spi . PrestoException ( com . facebook . presto . spi . StandardErrorCode . NOT _ SUPPORTED ,     (  \" No   lexicoder   for   type    \"     +    type )  )  ;", "}", "return   lexicoder ;", "}", "}", "METHOD_END"], "methodName": ["getLexicoder"], "fileName": "com.facebook.presto.accumulo.serializers.LexicoderRowSerializer"}, {"methodBody": ["METHOD_START", "{", "ListLexicoder <  ?  >    listLexicoder    =    LexicoderRowSerializer . LIST _ LEXICODERS . get ( elementType . getTypeSignature (  )  )  ;", "if    ( listLexicoder    =  =    null )     {", "listLexicoder    =    new   ListLexicoder ( LexicoderRowSerializer . getLexicoder ( Types . getElementType ( elementType )  )  )  ;", "LexicoderRowSerializer . LIST _ LEXICODERS . put ( elementType . getTypeSignature (  )  ,    listLexicoder )  ;", "}", "return   listLexicoder ;", "}", "METHOD_END"], "methodName": ["getListLexicoder"], "fileName": "com.facebook.presto.accumulo.serializers.LexicoderRowSerializer"}, {"methodBody": ["METHOD_START", "{", "MapLexicoder <  ?  ,     ?  >    mapLexicoder    =    LexicoderRowSerializer . MAP _ LEXICODERS . get ( type . getTypeSignature (  )  )  ;", "if    ( mapLexicoder    =  =    null )     {", "mapLexicoder    =    new   MapLexicoder ( LexicoderRowSerializer . getLexicoder ( Types . getKeyType ( type )  )  ,    LexicoderRowSerializer . getLexicoder ( Types . getValueType ( type )  )  )  ;", "LexicoderRowSerializer . MAP _ LEXICODERS . put ( type . getTypeSignature (  )  ,    mapLexicoder )  ;", "}", "return   mapLexicoder ;", "}", "METHOD_END"], "methodName": ["getMapLexicoder"], "fileName": "com.facebook.presto.accumulo.serializers.LexicoderRowSerializer"}, {"methodBody": ["METHOD_START", "{", "return   columnValues . get ( name )  . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getFieldValue"], "fileName": "com.facebook.presto.accumulo.serializers.StringRowSerializer"}, {"methodBody": ["METHOD_START", "{", "return   Slices . utf 8 Slice ( UUID . randomUUID (  )  . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["UUID"], "fileName": "com.facebook.presto.accumulo.udf.AccumuloStringFunctions"}, {"methodBody": ["METHOD_START", "{", "if    ( log 4 jLevel . equals ( Level . TRACE )  )     {", "return   FINEST ;", "}", "if    ( log 4 jLevel . equals ( Level . DEBUG )  )     {", "return   FINER ;", "}", "if    ( log 4 jLevel . equals ( Level . INFO )  )     {", "return   INFO ;", "}", "if    ( log 4 jLevel . equals ( Level . WARN )  )     {", "return   WARNING ;", "}", "if    ( log 4 jLevel . equals ( Level . ERROR )  )     {", "return   SEVERE ;", "}", "if    ( log 4 jLevel . equals ( Level . FATAL )  )     {", "return   SEVERE ;", "}", "if    ( log 4 jLevel . equals ( Level . ALL )  )     {", "return   ALL ;", "}", "if    ( log 4 jLevel . equals ( Level . OFF )  )     {", "return   OFF ;", "}", "return   FINE ;", "}", "METHOD_END"], "methodName": ["convertLog4jLevel"], "fileName": "org.apache.log4j.JulAppender"}]