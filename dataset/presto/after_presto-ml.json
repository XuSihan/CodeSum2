[{"methodBody": ["METHOD_START", "{", "return    (  )     -  >    svm . svm _ train ( problem ,    param )  ;", "}", "METHOD_END"], "methodName": ["getTrainingFunction"], "fileName": "com.facebook.presto.ml.AbstractSvmModel"}, {"methodBody": ["METHOD_START", "{", "svm _ node [  ]    nodes    =    new   svm _ node [ features . size (  )  ]  ;", "int   i    =     0  ;", "for    ( Map . Entry < Integer ,    Double >    feature    :    features . getFeatures (  )  . entrySet (  )  )     {", "nodes [ i ]     =    new   svm _ node (  )  ;", "nodes [ i ]  . index    =    feature . getKey (  )  ;", "nodes [ i ]  . value    =    feature . getValue (  )  ;", "i +  +  ;", "}", "return   nodes ;", "}", "METHOD_END"], "methodName": ["toSvmNodes"], "fileName": "com.facebook.presto.ml.AbstractSvmModel"}, {"methodBody": ["METHOD_START", "{", "svm _ problem   problem    =    new   svm _ problem (  )  ;", "List < Double >    labels    =    dataset . getLabels (  )  ;", "problem . l    =    labels . size (  )  ;", "problem . y    =    new   double [ labels . size (  )  ]  ;", "for    ( int   i    =     0  ;    i    <     ( labels . size (  )  )  ;    i +  +  )     {", "problem . y [ i ]     =    labels . get ( i )  ;", "}", "problem . x    =    new   svm _ node [ labels . size (  )  ]  [  ]  ;", "for    ( int   i    =     0  ;    i    <     ( dataset . getDatapoints (  )  . size (  )  )  ;    i +  +  )     {", "problem . x [ i ]     =     . toSvmNodes ( dataset . getDatapoints (  )  . get ( i )  )  ;", "}", "return   problem ;", "}", "METHOD_END"], "methodName": ["toSvmProblem"], "fileName": "com.facebook.presto.ml.AbstractSvmModel"}, {"methodBody": ["METHOD_START", "{", "functionAssertions . getMetadata (  )  . addFunctions ( extractFunctions ( new   MLPlugin (  )  . getFunctions (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["registerFunctions"], "fileName": "com.facebook.presto.ml.AbstractTestMLFunctions"}, {"methodBody": ["METHOD_START", "{", "List < Model >    models    =    ModelUtils . deserializeModels ( data )  ;", "return   new    (  (  ( Classifier )     ( models . get (  0  )  )  )  ,     (  ( FeatureTransformation )     ( models . get (  1  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["deserialize"], "fileName": "com.facebook.presto.ml.ClassifierFeatureTransformer"}, {"methodBody": ["METHOD_START", "{", "return   datapoints ;", "}", "METHOD_END"], "methodName": ["getDatapoints"], "fileName": "com.facebook.presto.ml.Dataset"}, {"methodBody": ["METHOD_START", "{", "return   labelEnumeration ;", "}", "METHOD_END"], "methodName": ["getLabelEnumeration"], "fileName": "com.facebook.presto.ml.Dataset"}, {"methodBody": ["METHOD_START", "{", "return   labels ;", "}", "METHOD_END"], "methodName": ["getLabels"], "fileName": "com.facebook.presto.ml.Dataset"}, {"methodBody": ["METHOD_START", "{", "int   size    =     0  ;", "size    +  =     . mergeMaps ( state . getTruePositives (  )  ,    scratchState . getTruePositives (  )  )  ;", "size    +  =     . mergeMaps ( state . getFalsePositives (  )  ,    scratchState . getFalsePositives (  )  )  ;", "size    +  =     . mergeMaps ( state . getFalseNegatives (  )  ,    scratchState . getFalseNegatives (  )  )  ;", "state . addMemoryUsage ( size )  ;", "}", "METHOD_END"], "methodName": ["combine"], "fileName": "com.facebook.presto.ml.EvaluateClassifierPredictionsAggregation"}, {"methodBody": ["METHOD_START", "{", "if    ( truth . equals ( prediction )  )     {", "String   key    =    truth . toStringUtf 8  (  )  ;", "if    (  !  ( state . getTruePositives (  )  . containsKey ( key )  )  )     {", "state . addMemoryUsage (  (  ( truth . length (  )  )     +     ( SizeOf . SIZE _ OF _ INT )  )  )  ;", "}", "state . getTruePositives (  )  . put ( key ,     (  ( state . getTruePositives (  )  . getOrDefault ( key ,     0  )  )     +     1  )  )  ;", "} else    {", "String   truthKey    =    truth . toStringUtf 8  (  )  ;", "String   predictionKey    =    prediction . toStringUtf 8  (  )  ;", "if    (  !  ( state . getFalsePositives (  )  . containsKey ( predictionKey )  )  )     {", "state . addMemoryUsage (  (  ( prediction . length (  )  )     +     ( SizeOf . SIZE _ OF _ INT )  )  )  ;", "}", "state . getFalsePositives (  )  . put ( predictionKey ,     (  ( state . getFalsePositives (  )  . getOrDefault ( predictionKey ,     0  )  )     +     1  )  )  ;", "if    (  !  ( state . getFalseNegatives (  )  . containsKey ( truthKey )  )  )     {", "state . addMemoryUsage (  (  ( truth . length (  )  )     +     ( SizeOf . SIZE _ OF _ INT )  )  )  ;", "}", "state . getFalseNegatives (  )  . put ( truthKey ,     (  ( state . getFalseNegatives (  )  . getOrDefault ( truthKey ,     0  )  )     +     1  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["input"], "fileName": "com.facebook.presto.ml.EvaluateClassifierPredictionsAggregation"}, {"methodBody": ["METHOD_START", "{", "EvaluateClassifierPredictionsAggregation . input ( state ,    Slices . utf 8 Slice ( String . valueOf ( truth )  )  ,    Slices . utf 8 Slice ( String . valueOf ( prediction )  )  )  ;", "}", "METHOD_END"], "methodName": ["input"], "fileName": "com.facebook.presto.ml.EvaluateClassifierPredictionsAggregation"}, {"methodBody": ["THOD_START", "{", "int   deltaSize    =     0  ;", "for    ( Mapntry < String ,    Integer >    entry    :    other . entrySet (  )  )     {", "if    (  !  ( map . containsKey ( entry . getKey (  )  )  )  )     {", "deltaSize    +  =     ( entry . getKey (  )  . getBytes (  )  . length )     +     ( SizeOf . SI _ OF _ INT )  ;", "}", "map . put ( entry . getKey (  )  ,     (  ( map . getOrDefault ( entry . getKey (  )  ,     0  )  )     +     ( other . getOrDefault ( entry . getKey (  )  ,     0  )  )  )  )  ;", "}", "return   deltaSize ;", "}", "METHOD_END"], "methodName": ["mergeMaps"], "fileName": "com.facebook.presto.ml.EvaluateClassifierPredictionsAggregation"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   sb    =    new   StringBuilder (  )  ;", "long   correct    =    state . getTruePositives (  )  . values (  )  . stream (  )  . reduce (  0  ,    Integer :  : sum )  ;", "long   total    =    correct    +     ( state . getFalsePositives (  )  . values (  )  . stream (  )  . reduce (  0  ,    Integer :  : sum )  )  ;", "sb . append ( String . format ( Locale . US ,     \" Accuracy :     % d /  % d    (  %  .  2 f %  %  )  \\ n \"  ,    correct ,    total ,     (  (  1  0  0  .  0     *    correct )     /     (  ( double )     ( total )  )  )  )  )  ;", "Set < String >    labels    =    union ( union ( state . getTruePositives (  )  . keySet (  )  ,    state . getFalsePositives (  )  . keySet (  )  )  ,    state . getFalseNves (  )  . keySet (  )  )  ;", "for    ( String   label    :    labels )     {", "int   truePositives    =    state . getTruePositives (  )  . getOrDefault ( label ,     0  )  ;", "int   falsePositives    =    state . getFalsePositives (  )  . getOrDefault ( label ,     0  )  ;", "int   falseNves    =    state . getFalseNves (  )  . getOrDefault ( label ,     0  )  ;", "sb . append ( String . format ( Locale . US ,     \" Class    \\  '  % s \\  '  \\ n \"  ,    label )  )  ;", "sb . append ( String . format ( Locale . US ,     \" Precision :     % d /  % d    (  %  .  2 f %  %  )  \\ n \"  ,    truePositives ,     ( truePositives    +    falsePositives )  ,     (  (  1  0  0  .  0     *    truePositives )     /     (  ( double )     ( truePositives    +    falsePositives )  )  )  )  )  ;", "sb . append ( String . format ( Locale . US ,     \" Recall :     % d /  % d    (  %  .  2 f %  %  )  \\ n \"  ,    truePositives ,     ( truePositives    +    falseNves )  ,     (  (  1  0  0  .  0     *    truePositives )     /     (  ( double )     ( truePositives    +    falseNves )  )  )  )  )  ;", "}", "VARCHAR . writeString ( out ,    sb . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["output"], "fileName": "com.facebook.presto.ml.EvaluateClassifierPredictionsAggregation"}, {"methodBody": ["METHOD_START", "{", "SliceInput   input    =    Slices . wrappedBuffer ( modelData )  . getInput (  )  ;", "model    =    new    (  )  ;", "while    ( input . isReadable (  )  )     {", "int   key    =    input . readInt (  )  ;", "model . mins . put ( key ,    input . readDouble (  )  )  ;", "model . maxs . put ( key ,    input . readDouble (  )  )  ;", "}", "return   model ;", "}", "METHOD_END"], "methodName": ["deserialize"], "fileName": "com.facebook.presto.ml.FeatureUnitNormalizer"}, {"methodBody": ["METHOD_START", "{", "return    (  (  ( SizeOf . SIZE _ OF _ DOUBLE )     +     ( SizeOf . SIZE _ OF _ INT )  )     +     (  (  3     *     3  )     *     ( SizeOf . SIZE _ OF _ LONG )  )  )     *     (  ( long )     ( size (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getEstimatedSize"], "fileName": "com.facebook.presto.ml.FeatureVector"}, {"methodBody": ["METHOD_START", "{", "return   features ;", "}", "METHOD_END"], "methodName": ["getFeatures"], "fileName": "com.facebook.presto.ml.FeatureVector"}, {"methodBody": ["METHOD_START", "{", "return   features . size (  )  ;", "}", "METHOD_END"], "methodName": ["size"], "fileName": "com.facebook.presto.ml.FeatureVector"}, {"methodBody": ["METHOD_START", "{", "checkArgument (  (  ( modelData . length )     =  =     0  )  ,     \" modelData   should   be   empty \"  )  ;", "return   new    (  )  ;", "}", "METHOD_END"], "methodName": ["deserialize"], "fileName": "com.facebook.presto.ml.FeatureVectorUnitNormalizer"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  \" LEARN   must   run   on   a   single   machine \"  )  ;", "}", "METHOD_END"], "methodName": ["combine"], "fileName": "com.facebook.presto.ml.LearnClassifierAggregation"}, {"methodBody": ["METHOD_START", "{", "LearnLibSvmClassifierAggregation . input ( state ,    label ,    features ,    Slices . utf 8 Slice (  \"  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["input"], "fileName": "com.facebook.presto.ml.LearnClassifierAggregation"}, {"methodBody": ["METHOD_START", "{", "LearnClassifierAggregation . input ( state ,     (  ( double )     ( label )  )  ,    features )  ;", "}", "METHOD_END"], "methodName": ["input"], "fileName": "com.facebook.presto.ml.LearnClassifierAggregation"}, {"methodBody": ["METHOD_START", "{", "LearnLibSvmClassifierAggregation . output ( state ,    out )  ;", "}", "METHOD_END"], "methodName": ["output"], "fileName": "com.facebook.presto.ml.LearnClassifierAggregation"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  \" LEARN   must   run   on   a   single   machine \"  )  ;", "}", "METHOD_END"], "methodName": ["combine"], "fileName": "com.facebook.presto.ml.LearnLibSvmClassifierAggregation"}, {"methodBody": ["METHOD_START", "{", "state . getLabels (  )  . add ( label )  ;", "FeatureVector   featureVector    =    ModelUtils . toFeatu ( featu )  ;", "state . addMemoryUsage ( featureVector . getEstimatedSize (  )  )  ;", "state . getFeatureVectors (  )  . add ( featureVector )  ;", "state . setParameters ( parameters )  ;", "}", "METHOD_END"], "methodName": ["input"], "fileName": "com.facebook.presto.ml.LearnLibSvmClassifierAggregation"}, {"methodBody": ["METHOD_START", "{", "LearnLibSvmClassifierAggregation . input ( state ,     (  ( double )     ( label )  )  ,    features ,    parameters )  ;", "}", "METHOD_END"], "methodName": ["input"], "fileName": "com.facebook.presto.ml.LearnLibSvmClassifierAggregation"}, {"methodBody": ["METHOD_START", "{", "Dataset   dataset    =    new   Dataset ( state . getLabels (  )  ,    state . getFeatureVectors (  )  ,    state . getLabelEnumeration (  )  . inverse (  )  )  ;", "Model   model    =    new   ClassifierFeatureTransformer ( new    ( LibSvmUtils . parseParameters ( state . getParameters (  )  . toStringUtf 8  (  )  )  )  ,    new   FeatureUnitNormalizer (  )  )  ;", "model . train ( dataset )  ;", "ClassifierType . BIGINT _ CLASSIFIER . writeSlice ( out ,    ModelUtils . serialize ( model )  )  ;", "}", "METHOD_END"], "methodName": ["output"], "fileName": "com.facebook.presto.ml.LearnLibSvmClassifierAggregation"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  \" LEARN   must   run   on   a   single   machine \"  )  ;", "}", "METHOD_END"], "methodName": ["combine"], "fileName": "com.facebook.presto.ml.LearnLibSvmRegressorAggregation"}, {"methodBody": ["METHOD_START", "{", "state . getLabels (  )  . add ( label )  ;", "FeatureVector   featureVector    =    ModelUtils . toFeatu ( featu )  ;", "state . addMemoryUsage ( featureVector . getEstimatedSize (  )  )  ;", "state . getFeatureVectors (  )  . add ( featureVector )  ;", "state . setParameters ( parameters )  ;", "}", "METHOD_END"], "methodName": ["input"], "fileName": "com.facebook.presto.ml.LearnLibSvmRegressorAggregation"}, {"methodBody": ["METHOD_START", "{", "LearnLibSvmRegressorAggregation . input ( state ,     (  ( double )     ( label )  )  ,    features ,    parameters )  ;", "}", "METHOD_END"], "methodName": ["input"], "fileName": "com.facebook.presto.ml.LearnLibSvmRegressorAggregation"}, {"methodBody": ["METHOD_START", "{", "Dataset   dataset    =    new   Dataset ( state . getLabels (  )  ,    state . getFeatureVectors (  )  ,    state . getLabelEnumeration (  )  . inverse (  )  )  ;", "Model   model    =    new   RegressorFeatureTransformer ( new    ( LibSvmUtils . parseParameters ( state . getParameters (  )  . toStringUtf 8  (  )  )  )  ,    new   FeatureUnitNormalizer (  )  )  ;", "model . train ( dataset )  ;", "RegressorType . REGRESSOR . writeSlice ( out ,    ModelUtils . serialize ( model )  )  ;", "}", "METHOD_END"], "methodName": ["output"], "fileName": "com.facebook.presto.ml.LearnLibSvmRegressorAggregation"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  \" LEARN   must   run   on   a   single   machine \"  )  ;", "}", "METHOD_END"], "methodName": ["combine"], "fileName": "com.facebook.presto.ml.LearnLibSvmVarcharClassifierAggregation"}, {"methodBody": ["METHOD_START", "{", "state . getLabels (  )  . add (  (  ( double )     ( state . enumerateLabel ( label . toStringUtf 8  (  )  )  )  )  )  ;", "FeatureVector   featureVector    =    ModelUtils . toFeatu ( featu )  ;", "state . addMemoryUsage ( featureVector . getEstimatedSize (  )  )  ;", "state . getFeatureVectors (  )  . add ( featureVector )  ;", "state . setParameters ( parameters )  ;", "}", "METHOD_END"], "methodName": ["input"], "fileName": "com.facebook.presto.ml.LearnLibSvmVarcharClassifierAggregation"}, {"methodBody": ["METHOD_START", "{", "Dataset   dataset    =    new   Dataset ( state . getLabels (  )  ,    state . getFeatureVectors (  )  ,    state . getLabelEnumeration (  )  . inverse (  )  )  ;", "Model   model    =    new   Stringdapter ( new   ClassifierFeatureTransformer ( new   SvmClassifier ( LibSvmUtils . parseParameters ( state . getParameters (  )  . toStringUtf 8  (  )  )  )  ,    new   FeatureUnitNormalizer (  )  )  )  ;", "model . train ( dataset )  ;", "ClassifierType . VARCHAR _ CLASSIFIER . writeSlice ( out ,    ModelUtils . serialize ( model )  )  ;", "}", "METHOD_END"], "methodName": ["output"], "fileName": "com.facebook.presto.ml.LearnLibSvmVarcharClassifierAggregation"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  \" LEARN   must   run   on   a   single   machine \"  )  ;", "}", "METHOD_END"], "methodName": ["combine"], "fileName": "com.facebook.presto.ml.LearnRegressorAggregation"}, {"methodBody": ["METHOD_START", "{", "LearnLibSvmRegressorAggregation . input ( state ,    label ,    features ,    Slices . utf 8 Slice (  \"  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["input"], "fileName": "com.facebook.presto.ml.LearnRegressorAggregation"}, {"methodBody": ["METHOD_START", "{", "LearnRegressorAggregation . input ( state ,     (  ( double )     ( label )  )  ,    features )  ;", "}", "METHOD_END"], "methodName": ["input"], "fileName": "com.facebook.presto.ml.LearnRegressorAggregation"}, {"methodBody": ["METHOD_START", "{", "LearnLibSvmRegressorAggregation . output ( state ,    out )  ;", "}", "METHOD_END"], "methodName": ["output"], "fileName": "com.facebook.presto.ml.LearnRegressorAggregation"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  \" LEARN   must   run   on   a   single   machine \"  )  ;", "}", "METHOD_END"], "methodName": ["combine"], "fileName": "com.facebook.presto.ml.LearnVarcharClassifierAggregation"}, {"methodBody": ["METHOD_START", "{", "LearnLibSvmVarcharClassifierAggregation . input ( state ,    label ,    features ,    Slices . utf 8 Slice (  \"  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["input"], "fileName": "com.facebook.presto.ml.LearnVarcharClassifierAggregation"}, {"methodBody": ["METHOD_START", "{", "LearnLibSvmVarcharClassifierAggregation . output ( state ,    out )  ;", "}", "METHOD_END"], "methodName": ["output"], "fileName": "com.facebook.presto.ml.LearnVarcharClassifierAggregation"}, {"methodBody": ["METHOD_START", "{", "switch    ( value . toLowerCase ( Locale . ENGLISH )  )     {", "case    \" linear \"     :", "return   svm _ parameter . LINEAR ;", "case    \" poly \"     :", "return   svm _ parameter . POLY ;", "case    \" rbf \"     :", "return   svm _ parameter . RBF ;", "case    \" sigmoid \"     :", "return   svm _ parameter . SIGMOID ;", "default    :", "throw   new   spi . PrestoException ( INVALID _ FUNCTION _ ARGUMENT ,    String . format (  \" Unknown   kernel   type    % s \"  ,    value )  )  ;", "}", "}", "METHOD_END"], "methodName": ["parseKernelType"], "fileName": "com.facebook.presto.ml.LibSvmUtils"}, {"methodBody": ["METHOD_START", "{", "svm _ parameter   params    =    new   svm _ parameter (  )  ;", "params . kernel _ type    =    svm _ parameter . LINEAR ;", "params . degree    =     3  ;", "params . gamma    =     0  ;", "params . coef 0     =     0  ;", "params . nu    =     0  .  5  ;", "params . cache _ size    =     1  0  0  ;", "params . C    =     1  ;", "params . eps    =     0  .  1  ;", "params . p    =     0  .  1  ;", "params . shrinking    =     1  ;", "params . probability    =     0  ;", "params . nr _ weight    =     0  ;", "params . weight _ label    =    new   int [  0  ]  ;", "params . weight    =    new   double [  0  ]  ;", "for    ( String   split    :    Splitter . on (  '  ,  '  )  . omitEmptyStrings (  )  . split ( paramString )  )     {", "String [  ]    pair    =    split . split (  \"  =  \"  )  ;", "checkArgument (  (  ( pair . length )     =  =     2  )  ,     \" Invalid   hyperparameters   string   for   libsvm \"  )  ;", "String   value    =    pair [  1  ]  . trim (  )  ;", "String   key    =    pair [  0  ]  . trim (  )  ;", "switch    ( key )     {", "case    \" kernel \"     :", "params . kernel _ type    =    LibSvmUtils . parseKernelType ( value )  ;", "break ;", "case    \" degree \"     :", "params . degree    =    Integer . parseInt ( value )  ;", "break ;", "case    \" gamma \"     :", "params . gamma    =    Double . parseDouble ( value )  ;", "break ;", "case    \" coef 0  \"     :", "params . coef 0     =    Double . parseDouble ( value )  ;", "break ;", "case    \" C \"     :", "params . C    =    Double . parseDouble ( value )  ;", "break ;", "case    \" nu \"     :", "params . nu    =    Double . parseDouble ( value )  ;", "break ;", "case    \" eps \"     :", "params . eps    =    Double . parseDouble ( value )  ;", "break ;", "default    :", "throw   new   spi . PrestoException ( INVALID _ FUNCTION _ ARGUMENT ,    String . format (  \" Unknown   parameter    % s \"  ,    pair [  0  ]  )  )  ;", "}", "}", "return   params ;", "}", "METHOD_END"], "methodName": ["parseParameters"], "fileName": "com.facebook.presto.ml.LibSvmUtils"}, {"methodBody": ["METHOD_START", "{", "return   featuresHelper ( f 1  )  ;", "}", "METHOD_END"], "methodName": ["features"], "fileName": "com.facebook.presto.ml.MLFeaturesFunctions"}, {"methodBody": ["METHOD_START", "{", "return   featuresHelper ( f 1  ,    f 2  )  ;", "}", "METHOD_END"], "methodName": ["features"], "fileName": "com.facebook.presto.ml.MLFeaturesFunctions"}, {"methodBody": ["METHOD_START", "{", "return   featuresHelper ( f 1  ,    f 2  ,    f 3  )  ;", "}", "METHOD_END"], "methodName": ["features"], "fileName": "com.facebook.presto.ml.MLFeaturesFunctions"}, {"methodBody": ["METHOD_START", "{", "return   featuresHelper ( f 1  ,    f 2  ,    f 3  ,    f 4  )  ;", "}", "METHOD_END"], "methodName": ["features"], "fileName": "com.facebook.presto.ml.MLFeaturesFunctions"}, {"methodBody": ["METHOD_START", "{", "return   featuresHelper ( f 1  ,    f 2  ,    f 3  ,    f 4  ,    f 5  )  ;", "}", "METHOD_END"], "methodName": ["features"], "fileName": "com.facebook.presto.ml.MLFeaturesFunctions"}, {"methodBody": ["METHOD_START", "{", "return   featuresHelper ( f 1  ,    f 2  ,    f 3  ,    f 4  ,    f 5  ,    f 6  )  ;", "}", "METHOD_END"], "methodName": ["features"], "fileName": "com.facebook.presto.ml.MLFeaturesFunctions"}, {"methodBody": ["METHOD_START", "{", "return   featuresHelper ( f 1  ,    f 2  ,    f 3  ,    f 4  ,    f 5  ,    f 6  ,    f 7  )  ;", "}", "METHOD_END"], "methodName": ["features"], "fileName": "com.facebook.presto.ml.MLFeaturesFunctions"}, {"methodBody": ["METHOD_START", "{", "return   featuresHelper ( f 1  ,    f 2  ,    f 3  ,    f 4  ,    f 5  ,    f 6  ,    f 7  ,    f 8  )  ;", "}", "METHOD_END"], "methodName": ["features"], "fileName": "com.facebook.presto.ml.MLFeaturesFunctions"}, {"methodBody": ["METHOD_START", "{", "return   featuresHelper ( f 1  ,    f 2  ,    f 3  ,    f 4  ,    f 5  ,    f 6  ,    f 7  ,    f 8  ,    f 9  )  ;", "}", "METHOD_END"], "methodName": ["features"], "fileName": "com.facebook.presto.ml.MLFeaturesFunctions"}, {"methodBody": ["METHOD_START", "{", "return   featuresHelper ( f 1  ,    f 2  ,    f 3  ,    f 4  ,    f 5  ,    f 6  ,    f 7  ,    f 8  ,    f 9  ,    f 1  0  )  ;", "}", "METHOD_END"], "methodName": ["features"], "fileName": "com.facebook.presto.ml.MLFeaturesFunctions"}, {"methodBody": ["METHOD_START", "{", "if    ( pageBuilder . isFull (  )  )     {", "pageBuilder . reset (  )  ;", "}", "BlockBuilder   mapBlockBuilder    =    pageBuilder . getBlockBuilder (  0  )  ;", "BlockBuilder   blockBuilder    =    mapBlockBuilder . beginBlockEntry (  )  ;", "for    ( int   i    =     0  ;    i    <     ( f . length )  ;    i +  +  )     {", "BIGINT . writeLong ( blockBuilder ,    i )  ;", "DOUBLE . writeDouble ( blockBuilder ,    f [ i ]  )  ;", "}", "mapBlockBuilder . closeEntry (  )  ;", "pageBuilder . declarePosition (  )  ;", "return   mapBlockBuilder . getObject (  (  ( mapBlockBuilder . getPositionCount (  )  )     -     1  )  ,    Block . class )  ;", "}", "METHOD_END"], "methodName": ["featuresHelper"], "fileName": "com.facebook.presto.ml.MLFeaturesFunctions"}, {"methodBody": ["METHOD_START", "{", "FeatureVector   features    =    ModelUtils . toFeatures ( featuresMap )  ;", "Model   model    =     . getOrLoadModel ( modelSlice )  ;", "checkArgument ( model . getType (  )  . equals ( ClassifierType . BIGINT _ CLASSIFIER )  ,     \" model   is   not   a   classifier < bigint >  \"  )  ;", "Classifier < Integer >    classifier    =     (  ( Classifier )     ( model )  )  ;", "return   classifier . classify ( features )  ;", "}", "METHOD_END"], "methodName": ["classify"], "fileName": "com.facebook.presto.ml.MLFunctions"}, {"methodBody": ["METHOD_START", "{", "HashCode   modelHash    =    ModelUtils . modelHash ( slice )  ;", "Model   model    =     . MODEL _ CACHE . getIfPresent ( modelHash )  ;", "if    ( model    =  =    null )     {", "model    =    ModelUtils . deserialize ( slice )  ;", ". MODEL _ CACHE . put ( modelHash ,    model )  ;", "}", "return   model ;", "}", "METHOD_END"], "methodName": ["getOrLoadModel"], "fileName": "com.facebook.presto.ml.MLFunctions"}, {"methodBody": ["METHOD_START", "{", "FeatureVector   features    =    ModelUtils . toFeatures ( featuresMap )  ;", "Model   model    =     . getOrLoadModel ( modelSlice )  ;", "checkArgument ( model . getType (  )  . equals ( RegressorType . REGRESSOR )  ,     \" model   is   not   a   regressor \"  )  ;", "Regressor   regressor    =     (  ( Regressor )     ( model )  )  ;", "return   regressor . regress ( features )  ;", "}", "METHOD_END"], "methodName": ["regress"], "fileName": "com.facebook.presto.ml.MLFunctions"}, {"methodBody": ["METHOD_START", "{", "FeatureVector   features    =    ModelUtils . toFeatures ( featuresMap )  ;", "Model   model    =     . getOrLoadModel ( modelSlice )  ;", "checkArgument ( model . getType (  )  . equals ( ClassifierType . VARCHAR _ CLASSIFIER )  ,     \" model   is   not   a   classifier < varchar >  \"  )  ;", "Classifier < String >    varcharClassifier    =     (  ( Classifier )     ( model )  )  ;", "return   Slices . utf 8 Slice ( varcharClassifier . classify ( features )  )  ;", "}", "METHOD_END"], "methodName": ["varcharClassify"], "fileName": "com.facebook.presto.ml.MLFunctions"}, {"methodBody": ["METHOD_START", "{", "return   ModelUtils . deserialize ( Slices . wrappedBuffer ( data )  )  ;", "}", "METHOD_END"], "methodName": ["deserialize"], "fileName": "com.facebook.presto.ml.ModelUtils"}, {"methodBody": ["METHOD_START", "{", "int   version    =    slice . getInt ( ModelUtils . VERSION _ OFFSET )  ;", "checkArgument (  ( version    =  =     ( ModelUtils . CURRENT _ FORMAT _ VERSION )  )  ,    String . format (  \" Unsupported   version :     % d \"  ,    version )  )  ;", "byte [  ]    modelHashBytes    =    slice . getBytes ( ModelUtils . HASH _ OFFSET ,     3  2  )  ;", "HashCode   expectedHash    =    HashCode . fromBytes ( modelHashBytes )  ;", "HashCode   actualHash    =    Hashing . sha 2  5  6  (  )  . hashBytes ( slice . getBytes ( ModelUtils . ALGORITHM _ OFFSET ,     (  ( slice . length (  )  )     -     ( ModelUtils . ALGORITHM _ OFFSET )  )  )  )  ;", "checkArgument ( actualHash . equals ( expectedHash )  ,     \" model   hash   does   not   match   data \"  )  ;", "int   id    =    slice . getInt ( ModelUtils . ALGORITHM _ OFFSET )  ;", "Class <  ?    extends   Model >    algorithm    =    ModelUtils . MODEL _ SERIALIZATION _ IDS . inverse (  )  . get ( id )  ;", "Objects . requireNonNull ( algorithm ,    String . format (  \" Unsupported   algorith    % d \"  ,    id )  )  ;", "int   hyperparameterLength    =    slice . getInt ( ModelUtils . HYPERPARAMETER _ LENGTH _ OFFSET )  ;", "byte [  ]    hyperparameterBytes    =    slice . getBytes ( ModelUtils . HYPERPARAMETERS _ OFFSET ,    hyperparameterLength )  ;", "int   dataLengthOffset    =     ( ModelUtils . HYPERPARAMETERS _ OFFSET )     +    hyperparameterLength ;", "long   dataLength    =    slice . getLong ( dataLengthOffset )  ;", "int   dataOffset    =    dataLengthOffset    +     ( SizeOf . SIZE _ OF _ LONG )  ;", "byte [  ]    data    =    slice . getBytes ( dataOffset ,     (  ( int )     ( dataLength )  )  )  ;", "try    {", "Method   deserialize    =    algorithm . getMethod (  \" deserialize \"  ,    byte [  ]  . class )  ;", "return    (  ( Model )     ( deserialize . invoke ( null ,    new   Object [  ]  {    data    }  )  )  )  ;", "}    catch    ( NoSuchMethodException    |    InvocationTargetException    |    IllegalAccessException   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["deserialize"], "fileName": "com.facebook.presto.ml.ModelUtils"}, {"methodBody": ["METHOD_START", "{", "Slice   slice    =    Slices . wrappedBuffer ( bytes )  ;", "int   numModels    =    slice . getInt (  0  )  ;", "int   offset    =     ( SizeOf . SIZE _ OF _ INT )     +     (  ( SizeOf . SIZE _ OF _ INT )     *    numModels )  ;", "ImmutableList . Builder < Model >    models    =    ImmutableList . builder (  )  ;", "for    ( int   i    =     0  ;    i    <    numModels ;    i +  +  )     {", "int   length    =    slice . getInt (  (  ( SizeOf . SIZE _ OF _ INT )     *     ( i    +     1  )  )  )  ;", "models . add (  . deserialize ( slice . getBytes ( offset ,    length )  )  )  ;", "offset    +  =    length ;", "}", "return   models . build (  )  ;", "}", "METHOD_END"], "methodName": ["deserializeModels"], "fileName": "com.facebook.presto.ml.ModelUtils"}, {"methodBody": ["METHOD_START", "{", "return   HashCode . fromBytes ( slice . getBytes ( ModelUtils . HASH _ OFFSET ,     3  2  )  )  ;", "}", "METHOD_END"], "methodName": ["modelHash"], "fileName": "com.facebook.presto.ml.ModelUtils"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( model ,     \" model   is   null \"  )  ;", "Integer   id    =     . MODEL _ SERIALIZATION _ IDS . get ( model . getClass (  )  )  ;", "Objects . requireNonNull ( id ,     \" id   is   null \"  )  ;", "int   size    =     . HYPERPARAMETERS _ OFFSET ;", "byte [  ]    hyperparameters    =    new   byte [  0  ]  ;", "size    +  =    hyperparameters . length ;", "int   dataLengthOffset    =    size ;", "size    +  =    SizeOf . SIZE _ OF _ LONG ;", "int   dataOffset    =    size ;", "byte [  ]    data    =    model . getSerializedData (  )  ;", "size    +  =    data . length ;", "Slice   slice    =    Slices . allocate ( size )  ;", "slice . setInt (  . VERSION _ OFFSET ,     . CURRENT _ FORMAT _ VERSION )  ;", "slice . setInt (  . ALGORITHM _ OFFSET ,    id )  ;", "slice . setInt (  . HYPERPARAMETER _ LENGTH _ OFFSET ,    hyperparameters . length )  ;", "slice . setBytes (  . HYPERPARAMETERS _ OFFSET ,    hyperparameters )  ;", "slice . setLong ( dataLengthOffset ,    data . length )  ;", "slice . setBytes ( dataOffset ,    data )  ;", "byte [  ]    modelHash    =    Hashing . sha 2  5  6  (  )  . hashBytes ( slice . getBytes (  . ALGORITHM _ OFFSET ,     (  ( slice . length (  )  )     -     (  . ALGORITHM _ OFFSET )  )  )  )  . asBytes (  )  ;", "checkState (  (  ( modelHash . length )     =  =     3  2  )  ,     \" sha 2  5  6    hash   code   expected   to   be    3  2    bytes \"  )  ;", "slice . setBytes (  . HASH _ OFFSET ,    modelHash )  ;", "return   slice ;", "}", "METHOD_END"], "methodName": ["serialize"], "fileName": "com.facebook.presto.ml.ModelUtils"}, {"methodBody": ["METHOD_START", "{", "List < byte [  ]  >    serializedModels    =    new   ArrayList <  >  (  )  ;", "int   size    =     ( SizeOf . SIZE _ OF _ INT )     +     (  ( SizeOf . SIZE _ OF _ INT )     *     ( models . length )  )  ;", "for    ( Model   model    :    models )     {", "byte [  ]    bytes    =     . serialize ( model )  . getBytes (  )  ;", "size    +  =    bytes . length ;", "serializedModels . add ( bytes )  ;", "}", "Slice   slice    =    Slices . allocate ( size )  ;", "slice . setInt (  0  ,    models . length )  ;", "for    ( int   i    =     0  ;    i    <     ( models . length )  ;    i +  +  )     {", "slice . setInt (  (  ( SizeOf . SIZE _ OF _ INT )     *     ( i    +     1  )  )  ,    serializedModels . get ( i )  . length )  ;", "}", "int   offset    =     ( SizeOf . SIZE _ OF _ INT )     +     (  ( SizeOf . SIZE _ OF _ INT )     *     ( models . length )  )  ;", "for    ( byte [  ]    bytes    :    serializedModels )     {", "slice . setBytes ( offset ,    bytes )  ;", "offset    +  =    bytes . length ;", "}", "return   slice . getBytes (  )  ;", "}", "METHOD_END"], "methodName": ["serializeModels"], "fileName": "com.facebook.presto.ml.ModelUtils"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Double >    features    =    new   HashMap <  >  (  )  ;", "if    ( map    !  =    null )     {", "for    ( int   position    =     0  ;    position    <     ( map . getPositionCount (  )  )  ;    position    +  =     2  )     {", "features . put (  (  ( int )     ( BIGINT . getLong ( map ,    position )  )  )  ,    DOUBLE . getDouble ( map ,     ( position    +     1  )  )  )  ;", "}", "}", "return   new   FeatureVector ( features )  ;", "}", "METHOD_END"], "methodName": ["toFeatures"], "fileName": "com.facebook.presto.ml.ModelUtils"}, {"methodBody": ["METHOD_START", "{", "List < Model >    models    =    ModelUtils . deserializeModels ( data )  ;", "return   new    (  (  ( Regressor )     ( models . get (  0  )  )  )  ,     (  ( FeatureTransformation )     ( models . get (  1  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["deserialize"], "fileName": "com.facebook.presto.ml.RegressorFeatureTransformer"}, {"methodBody": ["METHOD_START", "{", "Slice   slice    =    Slices . wrappedBuffer ( data )  ;", "BasicSliceInput   input    =    slice . getInput (  )  ;", "int   classifierLength    =    input . readInt (  )  ;", "Model   classifier    =    ModelUtils . deserialize ( input . readSlice ( classifierLength )  )  ;", "int   numEnumerations    =    input . readInt (  )  ;", "Builder < Integer ,    String >    builder    =    ImmutableMap . builder (  )  ;", "for    ( int   i    =     0  ;    i    <    numEnumerations ;    i +  +  )     {", "int   key    =    input . readInt (  )  ;", "int   valueLength    =    input . readInt (  )  ;", "String   value    =    input . readSlice ( valueLength )  . toStringUtf 8  (  )  ;", "builder . put ( key ,    value )  ;", "}", "return   new    (  (  ( Classifier )     ( classifier )  )  ,    builder . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["deserialize"], "fileName": "com.facebook.presto.ml.StringClassifierAdapter"}, {"methodBody": ["METHOD_START", "{", "try    {", "svm _ model   model    =    svm . svm _ load _ model ( new   BufferedReader ( new   InputStreamReader ( new   ByteArrayInputStream ( modelData )  )  )  )  ;", "return   new    ( model )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["deserialize"], "fileName": "com.facebook.presto.ml.SvmClassifier"}, {"methodBody": ["METHOD_START", "{", "try    {", "svm _ model   model    =    svm . svm _ load _ model ( new   BufferedReader ( new   InputStreamReader ( new   ByteArrayInputStream ( modelData )  )  )  )  ;", "return   new    ( model )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["deserialize"], "fileName": "com.facebook.presto.ml.SvmRegressor"}, {"methodBody": ["METHOD_START", "{", "return   RowPageBuilder . rowPageBuilder ( BIGINT ,    BIGINT )  . row (  1 L ,     1 L )  . row (  1 L ,     0 L )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["getPage"], "fileName": "com.facebook.presto.ml.TestEvaluateClassifierPredictions"}, {"methodBody": ["METHOD_START", "{", "metadata . addFunctions ( extractFunctions ( new   MLPlugin (  )  . getFunctions (  )  )  )  ;", "InternalAggregationFunction   aggregation    =    metadata . getFunctionRegistry (  )  . getAggregateFunctionImplementation ( new   com . facebook . presto . metadata . Signature (  \" evaluate _ classifier _ predictions \"  ,    AGGREGATE ,    parseTypeSignature ( VARCHAR )  ,    parseTypeSignature ( BIGINT )  ,    parseTypeSignature ( BIGINT )  )  )  ;", "Accumulator   accumulator    =    aggregation . bind ( ImmutableList . of (  0  ,     1  )  ,    Optional . empty (  )  )  . createAccumulator (  )  ;", "accumulator . addInput (  . getPage (  )  )  ;", "BlockBuilder   finalOut    =    accumulator . getFinalType (  )  . createBlockBuilder ( null ,     1  )  ;", "accumulator . evaluateFinal ( finalOut )  ;", "Block   block    =    finalOut . build (  )  ;", "String   output    =    VARCHAR . getSlice ( block ,     0  )  . toStringUtf 8  (  )  ;", "List < String >    parts    =    ImmutableList . copyOf ( Splitter . on (  '  \\ n '  )  . omitEmptyStrings (  )  . split ( output )  )  ;", "assertEquals ( parts . size (  )  ,     7  ,    output )  ;", "assertEquals ( parts . get (  0  )  ,     \" Accuracy :     1  /  2     (  5  0  .  0  0  %  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testEvaluateClassifierPredictions"], "fileName": "com.facebook.presto.ml.TestEvaluateClassifierPredictions"}, {"methodBody": ["METHOD_START", "{", "FeatureTransformation   transformation    =    new   FeatureUnitNormalizer (  )  ;", "Dataset   dataset    =    TestUtils . getDataset (  )  ;", "boolean   valueGreaterThanOne    =    false ;", "for    ( FeatureVector   vector    :    dataset . getDatapoints (  )  )     {", "for    ( double   value    :    vector . getFeatures (  )  . values (  )  )     {", "if    ( value    >     1  )     {", "valueGreaterThanOne    =    true ;", "break ;", "}", "}", "}", "assertTrue ( valueGreaterThanOne )  ;", "transformation . train ( dataset )  ;", "for    ( FeatureVector   vector    :    transformation . transform ( dataset )  . getDatapoints (  )  )     {", "for    ( double   value    :    vector . getFeatures (  )  . values (  )  )     {", "assertTrue (  ( value    <  =     1  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testUnitNormalizer"], "fileName": "com.facebook.presto.ml.TestFeatureTransformations"}, {"methodBody": ["METHOD_START", "{", "FeatureTransformation   transformation    =    new   FeatureUnitNormalizer (  )  ;", "List < Double >    labels    =    new   ArrayList <  >  (  )  ;", "List < FeatureVector >    features    =    new   ArrayList <  >  (  )  ;", "for    ( int   i    =     0  ;    i    <     3  ;    i +  +  )     {", "labels . add (  0  .  0  )  ;", "features . add ( new   FeatureVector (  0  ,     (  ( double )     ( i )  )  )  )  ;", "}", "Dataset   dataset    =    new   Dataset ( labels ,    features ,    ImmutableMap . of (  )  )  ;", "transformation . train ( dataset )  ;", "Set < Double >    featureValues    =    new   HashSet <  >  (  )  ;", "for    ( FeatureVector   vector    :    transformation . transform ( dataset )  . getDatapoints (  )  )     {", "for    ( double   value    :    vector . getFeatures (  )  . values (  )  )     {", "featureValues . add ( value )  ;", "}", "}", "assertEquals ( featureValues ,    ImmutableSet . of (  0  .  0  ,     0  .  5  ,     1  .  0  )  )  ;", "}", "METHOD_END"], "methodName": ["testUnitNormalizerSimple"], "fileName": "com.facebook.presto.ml.TestFeatureTransformations"}, {"methodBody": ["METHOD_START", "{", "accumulator . addInput ( TestLearnAggregations . getPage (  )  )  ;", "BlockBuilder   finalOut    =    accumulator . getFinalType (  )  . createBlockBuilder ( null ,     1  )  ;", "accumulator . evaluateFinal ( finalOut )  ;", "Block   block    =    finalOut . build (  )  ;", "Slice   slice    =    accumulator . getFinalType (  )  . getSlice ( block ,     0  )  ;", "Model   deserialized    =    ModelUtils . deserialize ( slice )  ;", "assertNotNull ( deserialized ,     \" deserialization   failed \"  )  ;", "assertTrue (  ( deserialized   instanceof   Classifier )  ,     \" deserialized   model   is   not   a   classifier \"  )  ;", "}", "METHOD_END"], "methodName": ["assertLearnClassifer"], "fileName": "com.facebook.presto.ml.TestLearnAggregations"}, {"methodBody": ["METHOD_START", "{", "Type   mapType    =    TestLearnAggregations . typeManager . getParameterizedType (  \" map \"  ,    ImmutableList . of ( TypeSignatureParameter . of ( parseTypeSignature ( BIGINT )  )  ,    TypeSignatureParameter . of ( parseTypeSignature ( DOUBLE )  )  )  )  ;", "int   datapoints    =     1  0  0  ;", "RowPageBuilder   builder    =    RowPageBuilder . rowPageBuilder ( BIGINT ,    mapType ,    VARCHAR )  ;", "Random   rand    =    new   Random (  0  )  ;", "for    ( int   i    =     0  ;    i    <    datapoints ;    i +  +  )     {", "long   label    =     (  ( rand . nextDouble (  )  )     <     0  .  5  )     ?     0     :     1  ;", "builder . row ( label ,    mapBlockOf ( BIGINT ,    DOUBLE ,     0 L ,     ( label    +     ( rand . nextGaussian (  )  )  )  )  ,     \" C =  1  \"  )  ;", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["getPage"], "fileName": "com.facebook.presto.ml.TestLearnAggregations"}, {"methodBody": ["METHOD_START", "{", "Type   mapType    =    TestLearnAggregations . typeManager . getParameterizedType (  \" map \"  ,    ImmutableList . of ( TypeSignatureParameter . of ( parseTypeSignature ( BIGINT )  )  ,    TypeSignatureParameter . of ( parseTypeSignature ( DOUBLE )  )  )  )  ;", "InternalAggregationFunction   aggregation    =    generateInternalAggregationFunction ( LearnClassifierAggregation . class ,    ClassifierType . BIGINT _ CLASSIFIER . getTypeSignature (  )  ,    ImmutableList . of ( BIGINT . getTypeSignature (  )  ,    mapType . getTypeSignature (  )  )  ,    TestLearnAggregations . typeManager )  ;", "TestLearnAggregations . assertLearnClassifer ( aggregation . bind ( ImmutableList . of (  0  ,     1  )  ,    Optional . empty (  )  )  . createAccumulator (  )  )  ;", "}", "METHOD_END"], "methodName": ["testLearn"], "fileName": "com.facebook.presto.ml.TestLearnAggregations"}, {"methodBody": ["METHOD_START", "{", "Type   mapType    =    TestLearnAggregations . typeManager . getParameterizedType (  \" map \"  ,    ImmutableList . of ( TypeSignatureParameter . of ( parseTypeSignature ( BIGINT )  )  ,    TypeSignatureParameter . of ( parseTypeSignature ( DOUBLE )  )  )  )  ;", "InternalAggregationFunction   aggregation    =    AggregationFromAnnotationsParser . parseFunctionDefinitionWithTypesConstraint ( LearnLibSvmClassifierAggregation . class ,    ClassifierType . BIGINT _ CLASSIFIER . getTypeSignature (  )  ,    ImmutableList . of ( BIGINT . getTypeSignature (  )  ,    mapType . getTypeSignature (  )  ,    VarcharType . getParametrizedVarcharSignature (  \" x \"  )  )  )  . specialize ( BoundVariables . builder (  )  . setLongVariable (  \" x \"  ,     (  ( long )     ( Integer . MAX _ VALUE )  )  )  . build (  )  ,     3  ,    TestLearnAggregations . typeManager )  ;", "TestLearnAggregations . assertLearnClassifer ( aggregation . bind ( ImmutableList . of (  0  ,     1  ,     2  )  ,    Optional . empty (  )  )  . createAccumulator (  )  )  ;", "}", "METHOD_END"], "methodName": ["testLearnLibSvm"], "fileName": "com.facebook.presto.ml.TestLearnAggregations"}, {"methodBody": ["METHOD_START", "{", "assertCachedInstanceHasBoundedRetainedSize (  \" features (  1  ,     2  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testFeatures"], "fileName": "com.facebook.presto.ml.TestMLFeaturesFunctions"}, {"methodBody": ["METHOD_START", "{", "Session   defaultSession    =    testSessionBuilder (  )  . setCatalog (  \" local \"  )  . setSchema ( TINY _ SCHEMA _ NAME )  . build (  )  ;", "LocalyRunner   localyRunner    =    new   LocalyRunner ( defaultSession )  ;", "localyRunner . createCatalog ( defaultSession . getCatalog (  )  . get (  )  ,    new   TpchConnectorFactory (  1  )  ,    ImmutableMap . of (  )  )  ;", "MLPlugin   plugin    =    new   MLPlugin (  )  ;", "for    ( Type   type    :    plugin . getTypes (  )  )     {", "localyRunner . getTypeManager (  )  . addType ( type )  ;", "}", "for    ( ParametricType   parametricType    :    plugin . getParametricTypes (  )  )     {", "localyRunner . getTypeManager (  )  . addParametricType ( parametricType )  ;", "}", "localyRunner . getMetadata (  )  . addFunctions ( extractFunctions ( new   MLPlugin (  )  . getFunctions (  )  )  )  ;", "return   localyRunner ;", "}", "METHOD_END"], "methodName": ["createLocalQueryRunner"], "fileName": "com.facebook.presto.ml.TestMLQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   classify ( features (  1  ,     2  )  ,    model )     \"     +     \" FROM    ( SELECT   learn _ classifier ( labels ,    features )    AS   model   FROM    ( VALUES    (  1  ,    features (  1  ,     2  )  )  )    t ( labels ,    features )  )    t 2  \"  )  ,     \" SELECT    1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testPrediction"], "fileName": "com.facebook.presto.ml.TestMLQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   classify ( features (  1  ,     2  )  ,    model )     \"     +     \" FROM    ( SELECT   learn _ classifier ( labels ,    features )    AS   model   FROM    ( VALUES    (  ' cat '  ,    features (  1  ,     2  )  )  )    t ( labels ,    features )  )    t 2  \"  )  ,     \" SELECT    ' cat '  \"  )  ;", "}", "METHOD_END"], "methodName": ["testVarcharPrediction"], "fileName": "com.facebook.presto.ml.TestMLQueries"}, {"methodBody": ["METHOD_START", "{", "Model   model    =    new   ClassifierFeatureTransformer ( new   SvmClassifier (  )  ,    new   FeatureVectorUnitNormalizer (  )  )  ;", "model . train ( TestUtils . getDataset (  )  )  ;", "Slice   serialized    =    ModelUtils . serialize ( model )  ;", "Model   deserialized    =    ModelUtils . deserialize ( serialized )  ;", "assertNotNull ( deserialized ,     \" des   failed \"  )  ;", "assertTrue (  ( deserialized   instanceof   ClassifierFeatureTransformer )  ,     \" deserialized   model   is   not   a   classifier   feature   transformer \"  )  ;", "}", "METHOD_END"], "methodName": ["testClassifierFeatureTransformer"], "fileName": "com.facebook.presto.ml.TestModelSerialization"}, {"methodBody": ["METHOD_START", "{", "Model   model    =    new   RegressorFeatureTransformer ( new   SvmRegressor (  )  ,    new   FeatureVectorUnitNormalizer (  )  )  ;", "model . train ( TestUtils . getDataset (  )  )  ;", "Slice   serialized    =    ModelUtils . serialize ( model )  ;", "Model   deserialized    =    ModelUtils . deserialize ( serialized )  ;", "assertNotNull ( deserialized ,     \" des   failed \"  )  ;", "assertTrue (  ( deserialized   instanceof   RegressorFeatureTransformer )  ,     \" deserialized   model   is   not   a   regressor   feature   transformer \"  )  ;", "}", "METHOD_END"], "methodName": ["testRegressorFeatureTransformer"], "fileName": "com.facebook.presto.ml.TestModelSerialization"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  (  ( int )     ( ModelUtils . MODEL _ SERIALIZATION _ IDS . get ( SvmClassifier . class )  )  )  ,     1  )  ;", "assertEquals (  (  ( int )     ( ModelUtils . MODEL _ SERIALIZATION _ IDS . get ( SvmRegressor . class )  )  )  ,     2  )  ;", "assertEquals (  (  ( int )     ( ModelUtils . MODEL _ SERIALIZATION _ IDS . get ( FeatureVectorUnitNormalizer . class )  )  )  ,     3  )  ;", "assertEquals (  (  ( int )     ( ModelUtils . MODEL _ SERIALIZATION _ IDS . get ( ClassifierFeatureTransformer . class )  )  )  ,     4  )  ;", "assertEquals (  (  ( int )     ( ModelUtils . MODEL _ SERIALIZATION _ IDS . get ( RegressorFeatureTransformer . class )  )  )  ,     5  )  ;", "assertEquals (  (  ( int )     ( ModelUtils . MODEL _ SERIALIZATION _ IDS . get ( FeatureUnitNormalizer . class )  )  )  ,     6  )  ;", "assertEquals (  (  ( int )     ( ModelUtils . MODEL _ SERIALIZATION _ IDS . get ( StringClassifierAdapter . class )  )  )  ,     7  )  ;", "}", "METHOD_END"], "methodName": ["testSerializationIds"], "fileName": "com.facebook.presto.ml.TestModelSerialization"}, {"methodBody": ["METHOD_START", "{", "Model   model    =    new   SvmClassifier (  )  ;", "model . train ( TestUtils . getDataset (  )  )  ;", "Slice   serialized    =    ModelUtils . serialize ( model )  ;", "Model   deserialized    =    ModelUtils . deserialize ( serialized )  ;", "assertNotNull ( deserialized ,     \" des   failed \"  )  ;", "assertTrue (  ( deserialized   instanceof   SvmClassifier )  ,     \" deserialized   model   is   not   a   svm \"  )  ;", "}", "METHOD_END"], "methodName": ["testSvmClassifier"], "fileName": "com.facebook.presto.ml.TestModelSerialization"}, {"methodBody": ["METHOD_START", "{", "Model   model    =    new   SvmRegressor (  )  ;", "model . train ( TestUtils . getDataset (  )  )  ;", "Slice   serialized    =    ModelUtils . serialize ( model )  ;", "Model   deserialized    =    ModelUtils . deserialize ( serialized )  ;", "assertNotNull ( deserialized ,     \" des   failed \"  )  ;", "assertTrue (  ( deserialized   instanceof   SvmRegressor )  ,     \" deserialized   model   is   not   a   svm \"  )  ;", "}", "METHOD_END"], "methodName": ["testSvmRegressor"], "fileName": "com.facebook.presto.ml.TestModelSerialization"}, {"methodBody": ["METHOD_START", "{", "Model   model    =    new   StringClassifierAdapter ( new   ClassifierFeatureTransformer ( new   SvmClassifier (  )  ,    new   FeatureVectorUnitNormalizer (  )  )  )  ;", "model . train ( TestUtils . getDataset (  )  )  ;", "Slice   serialized    =    ModelUtils . serialize ( model )  ;", "Model   deserialized    =    ModelUtils . deserialize ( serialized )  ;", "assertNotNull ( deserialized ,     \" des   failed \"  )  ;", "assertTrue (  ( deserialized   instanceof   StringClassifierAdapter )  ,     \" deserialized   model   is   not   a   varchar   classifier   adapter \"  )  ;", "}", "METHOD_END"], "methodName": ["testVarcharClassifierAdapter"], "fileName": "com.facebook.presto.ml.TestModelSerialization"}, {"methodBody": ["METHOD_START", "{", "int   datapoints    =     1  0  0  ;", "List < Double >    labels    =    new   ArrayList <  >  (  )  ;", "List < FeatureVector >    featu    =    new   ArrayList <  >  (  )  ;", "Random   rand    =    new   Random (  0  )  ;", "for    ( int   i    =     0  ;    i    <    datapoints ;    i +  +  )     {", "double   label    =     (  ( rand . nextDouble (  )  )     <     0  .  5  )     ?     0     :     1  ;", "labels . add ( label )  ;", "featu . add ( new   FeatureVector (  0  ,     ( label    +     ( rand . nextGaussian (  )  )  )  )  )  ;", "}", "return   new   Dataset ( labels ,    featu ,    ImmutableMap . of (  0  ,     \" first \"  ,     1  ,     \" second \"  )  )  ;", "}", "METHOD_END"], "methodName": ["getDataset"], "fileName": "com.facebook.presto.ml.TestUtils"}]