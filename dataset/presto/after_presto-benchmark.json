[{"methodBody": ["METHOD_START", "{", "return   benchmarkName ;", "}", "METHOD_END"], "methodName": ["getBenchmarkName"], "fileName": "com.facebook.presto.benchmark.AbstractBenchmark"}, {"methodBody": ["METHOD_START", "{", "return   measuredIterations ;", "}", "METHOD_END"], "methodName": ["getMeasuredIterations"], "fileName": "com.facebook.presto.benchmark.AbstractBenchmark"}, {"methodBody": ["METHOD_START", "{", "return   warmupIterations ;", "}", "METHOD_END"], "methodName": ["getWarmupIterations"], "fileName": "com.facebook.presto.benchmark.AbstractBenchmark"}, {"methodBody": ["METHOD_START", "{", "runBenchmark ( null )  ;", "}", "METHOD_END"], "methodName": ["runBenchmark"], "fileName": "com.facebook.presto.benchmark.AbstractBenchmark"}, {"methodBody": ["METHOD_START", "{", "AverageBenchmarkResults   averageBenchmarkResults    =    new   AverageBenchmarkResults (  )  ;", "setUp (  )  ;", "try    {", "for    ( int   i    =     0  ;    i    <     ( warmupIterations )  ;    i +  +  )     {", "runOnce (  )  ;", "}", "for    ( int   i    =     0  ;    i    <     ( measuredIterations )  ;    i +  +  )     {", "Map < String ,    Long >    results    =    runOnce (  )  ;", "if    ( benchmarkResultHook    !  =    null )     {", "benchmarkResultHook . addResults ( results )  ;", "}", "averageBenchmarkResults . addResults ( results )  ;", "}", "}    catch    ( Throwable   t )     {", "throw   new   RuntimeException (  (  \" Exception   in    \"     +     ( geName (  )  )  )  ,    t )  ;", "}    finally    {", "tearDown (  )  ;", "}", "if    ( benchmarkResultHook    !  =    null )     {", "benchmarkResultHook . finished (  )  ;", "}", "Map < String ,    Double >    resultsAvg    =    averageBenchmarkResults . getAverageResultsValues (  )  ;", "Duration   cpuNanos    =    new   Duration ( resultsAvg . get (  \" cpu _ nanos \"  )  ,    TimeUnit . NANOSECONDS )  ;", "long   inputRows    =    resultsAvg . get (  \" input _ rows \"  )  . longValue (  )  ;", "DataSize   inputBytes    =    new   DataSize ( resultsAvg . get (  \" input _ bytes \"  )  ,    BYTE )  ;", "long   outputRows    =    resultsAvg . get (  \" output _ rows \"  )  . longValue (  )  ;", "DataSize   outputBytes    =    new   DataSize ( resultsAvg . get (  \" output _ bytes \"  )  ,    BYTE )  ;", "DataSize   memory    =    new   DataSize ( resultsAvg . get (  \" peak _ memory \"  )  ,    BYTE )  ;", "System . out . printf (  \"  %  3  5 s    :  :     %  8  .  3 f   cpu   ms    :  :     %  5 s   peak   memory    :  :    in    %  5 s ,        %  6 s ,        %  8 s ,        %  8 s    :  :    out    %  5 s ,        %  6 s ,        %  8 s ,        %  8 s % n \"  ,    geName (  )  ,    cpuNanos . getValue ( TimeUnit . MILLISECONDS )  ,    FormatUtils . formatDataSize ( memory ,    true )  ,    FormatUtils . formatCount ( inputRows )  ,    FormatUtils . formatDataSize ( inputBytes ,    true )  ,    FormatUtils . formatCountRate ( inputRows ,    cpuNanos ,    true )  ,    FormatUtils . formatDataRate ( inputBytes ,    cpuNanos ,    true )  ,    FormatUtils . formatCount ( outputRows )  ,    FormatUtils . formatDataSize ( outputBytes ,    true )  ,    FormatUtils . formatCountRate ( outputRows ,    cpuNanos ,    true )  ,    FormatUtils . formatDataRate ( outputBytes ,    cpuNanos ,    true )  )  ;", "}", "METHOD_END"], "methodName": ["runBenchmark"], "fileName": "com.facebook.presto.benchmark.AbstractBenchmark"}, {"methodBody": ["METHOD_START", "{", "return   localQueryRunner . createHashProjectOperator ( session ,    operatorId ,    planNodeId ,    types )  ;", "}", "METHOD_END"], "methodName": ["createHashProjectOperator"], "fileName": "com.facebook.presto.benchmark.AbstractOperatorBenchmark"}, {"methodBody": ["METHOD_START", "{", "return   localQueryRunner . createTableScanOperator ( session ,    operatorId ,    planNodeId ,    tableName ,    columnNames )  ;", "}", "METHOD_END"], "methodName": ["createTableScanOperator"], "fileName": "com.facebook.presto.benchmark.AbstractOperatorBenchmark"}, {"methodBody": ["METHOD_START", "{", "List < Driver >    drivers    =    createDrivers ( taskContext )  ;", "long   peakMemory    =     0  ;", "lean   done    =    false ;", "while    (  ! done )     {", "lean   processed    =    false ;", "for    ( Driver   driver    :    drivers )     {", "if    (  !  ( driver . isFinished (  )  )  )     {", "driver . process (  )  ;", "long   lastPeakMemory    =    peakMemory ;", "peakMemory    =     (  ( long )     ( taskContext . getTaskStats (  )  . getUserMemoryReservation (  )  . getValue ( BYTE )  )  )  ;", "if    ( peakMemory    <  =    lastPeakMemory )     {", "peakMemory    =    lastPeakMemory ;", "}", "processed    =    true ;", "}", "}", "done    =     ! processed ;", "}", "return   ImmutableMap . of (  \" peak _ memory \"  ,    peakMemory )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "com.facebook.presto.benchmark.AbstractOperatorBenchmark"}, {"methodBody": ["METHOD_START", "{", "List < OperatorFactory >    operatorFactories    =    new   ArrayList ( createOperatorFactories (  )  )  ;", "operatorFactories . add ( new   testing . NullOutputOperator . NullOutputOperatorFactory (  9  9  9  ,    new   PlanNodeId (  \" test \"  )  ,    Iterables . getLast ( operatorFactories )  . getTypes (  )  )  )  ;", "return   new   operator . DriverFactory (  0  ,    true ,    true ,    operatorFactories ,    OptionalInt . empty (  )  ,    PipelineExecutionStrategy . UNGROUPED _ EXECUTION )  ;", "}", "METHOD_END"], "methodName": ["createDriverFactory"], "fileName": "com.facebook.presto.benchmark.AbstractSimpleOperatorBenchmark"}, {"methodBody": ["METHOD_START", "{", "new   ArrayAggregationBenchmark ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.ArrayAggregationBenchmark"}, {"methodBody": ["METHOD_START", "{", "LocalQueryRunner   localQueryRunner    =    BenchmarkQueryRunner . createLocalQueryRunner (  )  ;", "new    . ArrayEqualsBenchmark ( localQueryRunner )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "new    . ArrayLessThanBenchmark ( localQueryRunner )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "new    . ArrayGreaterThanBenchmark ( localQueryRunner )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "new    . ArrayNotEqualBenchmark ( localQueryRunner )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "new    . ArrayLessThanOrEqualBenchmark ( localQueryRunner )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "new    . ArrayGreaterThanOrEqualBenchmark ( localQueryRunner )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.ArrayComparisonBenchmark"}, {"methodBody": ["METHOD_START", "{", "return   Maps . transformValues ( resultsSum ,     (    input )     -  >    String . format (  \"  %  ,  3  .  2 f \"  ,     (  (  1  .  0     *    input )     /     ( resultsCount )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getAverageResultsStrings"], "fileName": "com.facebook.presto.benchmark.AverageBenchmarkResults"}, {"methodBody": ["METHOD_START", "{", "return   Maps . transformValues ( resultsSum ,     (    input )     -  >     (  1  .  0     *    input )     /     ( resultsCount )  )  ;", "}", "METHOD_END"], "methodName": ["getAverageResultsValues"], "fileName": "com.facebook.presto.benchmark.AverageBenchmarkResults"}, {"methodBody": ["METHOD_START", "{", "return   context . getQueryRunner (  )  . execute ( String . format (  \" SELECT    % s   FROM   orders   GROUP   BY   orderstatus \"  ,    context . project )  )  ;", "}", "METHOD_END"], "methodName": ["benchmarkBuildHash"], "fileName": "com.facebook.presto.benchmark.BenchmarkDecimalAggregation"}, {"methodBody": ["METHOD_START", "{", "Options   options    =    new   OptionsBuilder (  )  . verbosity ( NORMAL )  . include (  (  (  \"  .  *  \"     +     ( BenchmarkDecimalAggregation . class . getSimpleName (  )  )  )     +     \"  .  *  \"  )  )  . build (  )  ;", "new   Runner ( options )  . run (  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.BenchmarkDecimalAggregation"}, {"methodBody": ["METHOD_START", "{", "return   context . getQueryRunner (  )  . execute (  \" SELECT   count (  *  )    FROM   t 1    JOIN   t 2    on    ( t 1  . bucket    =    t 2  . bucket )    WHERE   t 1  . val 1     <    t 2  . val 2  \"  )  ;", "}", "METHOD_END"], "methodName": ["benchmarkJoin"], "fileName": "com.facebook.presto.benchmark.BenchmarkInequalityJoin"}, {"methodBody": ["METHOD_START", "{", "return   context . getQueryRunner (  )  . execute (  \" SELECT   count (  *  )    FROM   t 1    JOIN   t 2    on    ( t 1  . bucket    =    t 2  . bucket )    AND   t 1  . val 1     <    t 2  . val 2     +     1  0  \"  )  ;", "}", "METHOD_END"], "methodName": ["benchmarkJoinWithArithmeticInPredicate"], "fileName": "com.facebook.presto.benchmark.BenchmarkInequalityJoin"}, {"methodBody": ["METHOD_START", "{", "return   context . getQueryRunner (  )  . execute (  \" SELECT   count (  *  )    FROM   t 1    JOIN   t 2    on    ( t 1  . bucket    =    t 2  . bucket )    AND   t 1  . val 1     <    sin ( t 2  . val 2  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["benchmarkJoinWithFunctionPredicate"], "fileName": "com.facebook.presto.benchmark.BenchmarkInequalityJoin"}, {"methodBody": ["METHOD_START", "{", "return   context . getQueryRunner (  )  . execute (  \" SELECT   count (  *  )    FROM   t 1    JOIN   t 2    on    ( t 1  . bucket    =    t 2  . bucket )    AND   t 1  . val 1     +     1     <    t 2  . val 2    AND   t 2  . val 2     <    t 1  . val 1     +     5     \"  )  ;", "}", "METHOD_END"], "methodName": ["benchmarkRangePredicateJoin"], "fileName": "com.facebook.presto.benchmark.BenchmarkInequalityJoin"}, {"methodBody": ["METHOD_START", "{", "Options   options    =    new   OptionsBuilder (  )  . verbosity ( NORMAL )  . include (  (  (  \"  .  *  \"     +     ( BenchmarkInequalityJoin . class . getSimpleName (  )  )  )     +     \"  .  *  \"  )  )  . build (  )  ;", "new   Runner ( options )  . run (  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.BenchmarkInequalityJoin"}, {"methodBody": ["METHOD_START", "{", "return   BenchmarkQueryRunner . createLocalQueryRunner ( ImmutableMap . of (  )  )  ;", "}", "METHOD_END"], "methodName": ["createLocalQueryRunner"], "fileName": "com.facebook.presto.benchmark.BenchmarkQueryRunner"}, {"methodBody": ["METHOD_START", "{", "Session . SessionBuilder   sessionBuilder    =    testSessionBuilder (  )  . setCatalog (  \" tpch \"  )  . setSchema ( TINY _ SCHEMA _ NAME )  ;", "extraSessionProperties . forEach ( sessionBuilder :  : setSystemProperty )  ;", "Session   session    =    sessionBuilder . build (  )  ;", "Local   local    =    new   Local ( session )  ;", "local . createCatalog (  \" tpch \"  ,    new   TpchConnectorFactory (  1  )  ,    ImmutableMap . of (  )  )  ;", "return   local ;", "}", "METHOD_END"], "methodName": ["createLocalQueryRunner"], "fileName": "com.facebook.presto.benchmark.BenchmarkQueryRunner"}, {"methodBody": ["METHOD_START", "{", "return   BenchmarkQueryRunner . createLocalQueryRunner ( ImmutableMap . of (  \" optimizer . optimize _ hash _ generation \"  ,     \" true \"  )  )  ;", "}", "METHOD_END"], "methodName": ["createLocalQueryRunnerHashEnabled"], "fileName": "com.facebook.presto.benchmark.BenchmarkQueryRunner"}, {"methodBody": ["METHOD_START", "{", "return   context . getQueryRunner (  )  . execute (  \" SELECT   count (  *  )    FROM   points ,    polygons   WHERE   ST _ Contains ( ST _ GeometryFromText ( wkt )  ,    ST _ Point ( latitude ,    longitude )  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["benchmarkJoin"], "fileName": "com.facebook.presto.benchmark.BenchmarkSpatialJoin"}, {"methodBody": ["METHOD_START", "{", "return   context . getQueryRunner (  )  . execute (  \" SELECT   count (  *  )    FROM    ( SELECT   ST _ Point ( latitude ,    longitude )    as   point   FROM   points )    t 1  ,     ( SELECT   ST _ GeometryFromText ( wkt )    as   geometry   FROM   polygons )    t 2    WHERE   ST _ Contains ( geometry ,    point )  \"  )  ;", "}", "METHOD_END"], "methodName": ["benchmarkUserOptimizedJoin"], "fileName": "com.facebook.presto.benchmark.BenchmarkSpatialJoin"}, {"methodBody": ["METHOD_START", "{", "new   BenchmarkSpatialJoin (  )  . verify (  )  ;", "Options   options    =    new   OptionsBuilder (  )  . verbosity ( NORMAL )  . include (  (  (  \"  .  *  \"     +     ( BenchmarkSpatialJoin . class . getSimpleName (  )  )  )     +     \"  .  *  \"  )  )  . build (  )  ;", "new   Runner ( options )  . run (  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.BenchmarkSpatialJoin"}, {"methodBody": ["METHOD_START", "{", "BenchmarkSpatialJoin . Context   context    =    new   BenchmarkSpatialJoin . Context (  )  ;", "context . setUp (  )  ;", "context . createPointsTable (  )  ;", "BenchmarkSpatialJoin   benchmark    =    new   BenchmarkSpatialJoin (  )  ;", "benchmark . benchmarkJoin ( context )  ;", "benchmark . benchmarkUserOptimizedJoin ( context )  ;", "}", "METHOD_END"], "methodName": ["verify"], "fileName": "com.facebook.presto.benchmark.BenchmarkSpatialJoin"}, {"methodBody": ["METHOD_START", "{", "Session   optimizeHashSession    =    Session . builder ( localQueryRunner . getDefaultSession (  )  )  . setSystemProperty ( SystemSessionProperties . OPTIMIZE _ HASH _ GENERATION ,     \" true \"  )  . build (  )  ;", "return   ImmutableList . of ( new   CountAggregationBlocalQueryRunner )  ,    new   DoubleSumAggregationBlocalQueryRunner )  ,    new   HashAggregationBlocalQueryRunner )  ,    new   PredicateFilterBlocalQueryRunner )  ,    new   RawStreamingBlocalQueryRunner )  ,    new   Top 1  0  0 BlocalQueryRunner )  ,    new   OrderByBlocalQueryRunner )  ,    new   HashBuildBlocalQueryRunner )  ,    new   HashJoinBlocalQueryRunner )  ,    new   HashBuildAndJoinBlocalQueryRunner . getDefaultSession (  )  ,    localQueryRunner )  ,    new   HashBuildAndJoinBoptimizeHashSession ,    localQueryRunner )  ,    new   HandTpchQuery 1  ( localQueryRunner )  ,    new   HandTpchQuery 6  ( localQueryRunner )  ,    new   GroupBySumWithArithmeticSqlBlocalQueryRunner )  ,    new   CountAggregationSqlBlocalQueryRunner )  ,    new   SqlDoubleSumAggregationBlocalQueryRunner )  ,    new   CountWithFilterSqlBlocalQueryRunner )  ,    new   GroupByAggregationSqlBlocalQueryRunner )  ,    new   PredicateFilterSqlBlocalQueryRunner )  ,    new   RawStreamingSqlBlocalQueryRunner )  ,    new   Top 1  0  0 SqlBlocalQueryRunner )  ,    new   SqlHashJoinBlocalQueryRunner )  ,    new   SqlJoinWithPredicateBlocalQueryRunner )  ,    new   LongMaxAggregationSqlBlocalQueryRunner )  ,    new   VarBinaryMaxAggregationSqlBlocalQueryRunner )  ,    new   SqlDistinctMultipleFields ( localQueryRunner )  ,    new   SqlDistinctSingleField ( localQueryRunner )  ,    new   SqlTpchQuery 1  ( localQueryRunner )  ,    new   SqlTpchQuery 6  ( localQueryRunner )  ,    new   SqlLikeBlocalQueryRunner )  ,    new   SqlInBlocalQueryRunner )  ,    new   SqlSemiJoinInPredicateBlocalQueryRunner )  ,    new   SqlRegexpLikeBlocalQueryRunner )  ,    new   SqlApproximatePercentileBlocalQueryRunner )  ,    new   SqlBetweenBlocalQueryRunner )  ,    new   StatisticsBLongVarianceBlocalQueryRunner )  ,    new   StatisticsBLongVariancePopBlocalQueryRunner )  ,    new   StatisticsBDoubleVarianceBlocalQueryRunner )  ,    new   StatisticsBDoubleVariancePopBlocalQueryRunner )  ,    new   StatisticsBLongStdDevBlocalQueryRunner )  ,    new   StatisticsBLongStdDevPopBlocalQueryRunner )  ,    new   StatisticsBDoubleStdDevBlocalQueryRunner )  ,    new   StatisticsBDoubleStdDevPopBlocalQueryRunner )  ,    new   ArrayComparisonBArrayEqualsBlocalQueryRunner )  ,    new   ArrayComparisonBArrayLessThanBlocalQueryRunner )  ,    new   ArrayComparisonBArrayGreaterThanBlocalQueryRunner )  ,    new   ArrayComparisonBArrayNotEqualBlocalQueryRunner )  ,    new   ArrayComparisonBArrayLessThanOrEqualBlocalQueryRunner )  ,    new   ArrayComparisonBArrayGreaterThanOrEqualBlocalQueryRunner )  ,    new   SqlApproximateCountDistinctLongBlocalQueryRunner )  ,    new   SqlApproximateCountDistinctDoubleBlocalQueryRunner )  ,    new   SqlApproximateCountDistinctVarBinaryBlocalQueryRunner )  )  ;", "}", "METHOD_END"], "methodName": ["createBenchmarks"], "fileName": "com.facebook.presto.benchmark.BenchmarkSuite"}, {"methodBody": ["METHOD_START", "{", "File   outputFile    =    new   File ( fileName )  ;", "Fil . createParentDirs ( outputFile )  ;", "return   outputFile ;", "}", "METHOD_END"], "methodName": ["createOutputFile"], "fileName": "com.facebook.presto.benchmark.BenchmarkSuite"}, {"methodBody": ["METHOD_START", "{", "List < AbstractBenchmark >    benchmarks    =    BenchmarkSuite . createBenchmarks ( localQueryRunner )  ;", "BenchmarkSuite . LOGGER . info (  \"  =  =  =    Pre - running   all   benchmarks   for   JVM   warmup    =  =  =  \"  )  ;", "for    ( AbstractBenchmark   benchmark    :    benchmarks )     {", "benchmark . runBenchmark (  )  ;", "}", "BenchmarkSuite . LOGGER . info (  \"  =  =  =    Actually   running   benchmarks   for   metrics    =  =  =  \"  )  ;", "for    ( AbstractBenchmark   benchmark    :    benchmarks )     {", "try    ( OutputStream   jsonOut    =    new   FileOutputStream ( BenchmarkSuite . createOutputFile ( String . format (  \"  % s / json /  % s . json \"  ,    outputDirectory ,    benchmark . getBenchmarkName (  )  )  )  )  ; OutputStream   jsonAvgOut    =    new   FileOutputStream ( BenchmarkSuite . createOutputFile ( String . format (  \"  % s / json - avg /  % s . json \"  ,    outputDirectory ,    benchmark . getBenchmarkName (  )  )  )  )  ; OutputStream   csvOut    =    new   FileOutputStream ( BenchmarkSuite . createOutputFile ( String . format (  \"  % s / csv /  % s . csv \"  ,    outputDirectory ,    benchmark . getBenchmarkName (  )  )  )  )  ; OutputStream   odsOut    =    new   FileOutputStream ( BenchmarkSuite . createOutputFile ( String . format (  \"  % s / ods /  % s . json \"  ,    outputDirectory ,    benchmark . getBenchmarkName (  )  )  )  )  )     {", "benchmark . runBenchmark ( new   BenchmarkSuite . ForwardingBenchmarkResultWriter ( ImmutableList . of ( new   JsonBenchmarkResultWriter ( jsonOut )  ,    new   JsonAvgBenchmarkResultWriter ( jsonAvgOut )  ,    new   SimpleLineBenchmarkResultWriter ( csvOut )  ,    new   OdsBenchmarkResultWriter (  (  \"  \"     +     ( benchmark . getBenchmarkName (  )  )  )  ,    odsOut )  )  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["runAllBenchmarks"], "fileName": "com.facebook.presto.benchmark.BenchmarkSuite"}, {"methodBody": ["METHOD_START", "{", "new   CastJsonParseBenchmark ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.CastJsonParseBenchmark"}, {"methodBody": ["METHOD_START", "{", "new   CountAggregationBenchmark ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.CountAggregationBenchmark"}, {"methodBody": ["METHOD_START", "{", "new   CountAggregationSqlBenchmark ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.CountAggregationSqlBenchmark"}, {"methodBody": ["METHOD_START", "{", "new   CountWithFilterSqlBenchmark ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.CountWithFilterSqlBenchmark"}, {"methodBody": ["METHOD_START", "{", "new   DoubleSumAggregationBenchmark ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.DoubleSumAggregationBenchmark"}, {"methodBody": ["METHOD_START", "{", "double   fractional    =    count ;", "String   unit    =     \"  \"  ;", "if    ( fractional    >     1  0  0  0  )     {", "fractional    /  =     1  0  0  0  ;", "unit    =     \" K \"  ;", "}", "if    ( fractional    >     1  0  0  0  )     {", "fractional    /  =     1  0  0  0  ;", "unit    =     \" M \"  ;", "}", "if    ( fractional    >     1  0  0  0  )     {", "fractional    /  =     1  0  0  0  ;", "unit    =     \" B \"  ;", "}", "if    ( fractional    >     1  0  0  0  )     {", "fractional    /  =     1  0  0  0  ;", "unit    =     \" T \"  ;", "}", "if    ( fractional    >     1  0  0  0  )     {", "fractional    /  =     1  0  0  0  ;", "unit    =     \" Q \"  ;", "}", "return   String . format (  \"  % s % s \"  ,     . getFormat ( fractional )  . format ( fractional )  ,    unit )  ;", "}", "METHOD_END"], "methodName": ["formatCount"], "fileName": "com.facebook.presto.benchmark.FormatUtils"}, {"methodBody": ["METHOD_START", "{", "double   rate    =    count    /     ( duration . getValue ( TimeUnit . SECONDS )  )  ;", "if    (  ( Double . isNaN ( rate )  )     |  |     ( Double . isInfinite ( rate )  )  )     {", "rate    =     0  ;", "}", "String   rateString    =     . formatCount (  (  ( long )     ( rate )  )  )  ;", "if    ( longForm )     {", "if    ( rateString . endsWith (  \"     \"  )  )     {", "rateString    =    rateString . substring (  0  ,     (  ( rateString . length (  )  )     -     1  )  )  ;", "}", "rateString    +  =     \"  / s \"  ;", "}", "return   rateString ;", "}", "METHOD_END"], "methodName": ["formatCountRate"], "fileName": "com.facebook.presto.benchmark.FormatUtils"}, {"methodBody": ["METHOD_START", "{", "double   rate    =     ( dataSize . toBytes (  )  )     /     ( duration . getValue ( TimeUnit . SECONDS )  )  ;", "if    (  ( Double . isNaN ( rate )  )     |  |     ( Double . isInfinite ( rate )  )  )     {", "rate    =     0  ;", "}", "String   rateString    =     . formatDataSize ( new   DataSize ( rate ,    BYTE )  ,    false )  ;", "if    ( longForm )     {", "if    (  !  ( rateString . endsWith (  \" B \"  )  )  )     {", "rateString    +  =     \" B \"  ;", "}", "rateString    +  =     \"  / s \"  ;", "}", "return   rateString ;", "}", "METHOD_END"], "methodName": ["formatDataRate"], "fileName": "com.facebook.presto.benchmark.FormatUtils"}, {"methodBody": ["METHOD_START", "{", "double   fractional    =    size . toBytes (  )  ;", "String   unit    =    null ;", "if    ( fractional    >  =     1  0  2  4  )     {", "fractional    /  =     1  0  2  4  ;", "unit    =     \" K \"  ;", "}", "if    ( fractional    >  =     1  0  2  4  )     {", "fractional    /  =     1  0  2  4  ;", "unit    =     \" M \"  ;", "}", "if    ( fractional    >  =     1  0  2  4  )     {", "fractional    /  =     1  0  2  4  ;", "unit    =     \" G \"  ;", "}", "if    ( fractional    >  =     1  0  2  4  )     {", "fractional    /  =     1  0  2  4  ;", "unit    =     \" T \"  ;", "}", "if    ( fractional    >  =     1  0  2  4  )     {", "fractional    /  =     1  0  2  4  ;", "unit    =     \" P \"  ;", "}", "if    ( unit    =  =    null )     {", "unit    =     \" B \"  ;", "} else", "if    ( longForm )     {", "unit    +  =     \" B \"  ;", "}", "return   String . format (  \"  % s % s \"  ,     . getFormat ( fractional )  . format ( fractional )  ,    unit )  ;", "}", "METHOD_END"], "methodName": ["formatDataSize"], "fileName": "com.facebook.presto.benchmark.FormatUtils"}, {"methodBody": ["METHOD_START", "{", "DecimalFormat   format ;", "if    ( value    <     1  0  )     {", "format    =    new   DecimalFormat (  \"  #  .  #  #  \"  )  ;", "} else", "if    ( value    <     1  0  0  )     {", "format    =    new   DecimalFormat (  \"  #  .  #  \"  )  ;", "} else    {", "format    =    new   DecimalFormat (  \"  #  \"  )  ;", "}", "format . setRoundingMode ( RoundingMode . HALF _ UP )  ;", "return   format ;", "}", "METHOD_END"], "methodName": ["getFormat"], "fileName": "com.facebook.presto.benchmark.FormatUtils"}, {"methodBody": ["METHOD_START", "{", "new   GroupByAggregationSqlBenchmark ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.GroupByAggregationSqlBenchmark"}, {"methodBody": ["METHOD_START", "{", "new   GroupBySumWithArithmeticSqlBenchmark ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.GroupBySumWithArithmeticSqlBenchmark"}, {"methodBody": ["METHOD_START", "{", "new   HandTpchQuery 1  ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.HandTpchQuery1"}, {"methodBody": ["METHOD_START", "{", "new   HandTpchQuery 6  ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.HandTpchQuery6"}, {"methodBody": ["METHOD_START", "{", "new   HashAggregationBenchmark ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.HashAggregationBenchmark"}, {"methodBody": ["METHOD_START", "{", "return   SystemSessionProperties . isOptimizeHashGenerationEnabled ( session )  ;", "}", "METHOD_END"], "methodName": ["isHashEnabled"], "fileName": "com.facebook.presto.benchmark.HashBuildAndJoinBenchmark"}, {"methodBody": ["METHOD_START", "{", "new   HashBuildAndJoinBenchmark ( testSessionBuilder (  )  . build (  )  ,    BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "new   HashBuildAndJoinBenchmark ( testSessionBuilder (  )  . build (  )  ,    BenchmarkQueryRunner . createLocalQueryRunnerHashEnabled (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.HashBuildAndJoinBenchmark"}, {"methodBody": ["METHOD_START", "{", "new   HashBuildBenchmark ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.HashBuildBenchmark"}, {"methodBody": ["METHOD_START", "{", "new   HashJoinBenchmark ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.HashJoinBenchmark"}, {"methodBody": ["METHOD_START", "{", "Long   value    =    results . get ( name )  ;", "if    ( value    =  =    null )     {", "return    0  ;", "}", "return   value ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "com.facebook.presto.benchmark.JsonAvgBenchmarkResultWriter"}, {"methodBody": ["METHOD_START", "{", "new   LongMaxAggregationSqlBenchmark ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.LongMaxAggregationSqlBenchmark"}, {"methodBody": ["METHOD_START", "{", "LocalQueryRunner   localQueryRunner    =    LocalQueryRunner . queryRunnerWithInitialTransaction ( session )  ;", "localQueryRunner . createCatalog (  \" tpch \"  ,    new   TpchConnectorFactory (  1  )  ,    ImmutableMap . of (  )  )  ;", "localQueryRunner . createCatalog (  \" memory \"  ,    new   MemoryConnectorFactory (  )  ,    ImmutableMap . of (  \" memory . max - data - per - node \"  ,     \"  4 GB \"  )  )  ;", "return   localQueryRunner ;", "}", "METHOD_END"], "methodName": ["createMemoryLocalQueryRunner"], "fileName": "com.facebook.presto.benchmark.MemoryLocalQueryRunner"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    localQueryRunner . getDefaultSession (  )  ;", "Metadata   metadata    =    localQueryRunner . getMetadata (  )  ;", "Optional < TableHandle >    tableHandle    =    metadata . getTableHandle ( session ,    QualifiedObjectName . valueOf ( tableName )  )  ;", "assertTrue ( tableHandle . isPresent (  )  ,     (  (  \" Table    \"     +    tableName )     +     \"    does   not   exist \"  )  )  ;", "metadata . dropTable ( session ,    tableHandle . get (  )  )  ;", "}", "METHOD_END"], "methodName": ["dropTable"], "fileName": "com.facebook.presto.benchmark.MemoryLocalQueryRunner"}, {"methodBody": ["METHOD_START", "{", "MemoryPool   memoryPool    =    new   MemoryPool ( new   MemoryPoolId (  \" test \"  )  ,    new   io . airlift . units . DataSize (  2  ,    GIGABYTE )  )  ;", "MemoryPool   systemMemoryPool    =    new   MemoryPool ( new   MemoryPoolId (  \" testSystem \"  )  ,    new   io . airlift . units . DataSize (  2  ,    GIGABYTE )  )  ;", "SpillSpaceTracker   spillSpaceTracker    =    new   SpillSpaceTracker ( new   io . airlift . units . DataSize (  1  ,    GIGABYTE )  )  ;", "QueryContext   queryContext    =    new   QueryContext ( new   QueryId (  \" test \"  )  ,    new   io . airlift . units . DataSize (  1  ,    GIGABYTE )  ,    memoryPool ,    systemMemoryPool ,    new   TestingGcMonitor (  )  ,    localQueryRunner . getExecutor (  )  ,    localQueryRunner . getScheduler (  )  ,    new   io . airlift . units . DataSize (  4  ,    GIGABYTE )  ,    spillSpaceTracker )  ;", "TaskContext   taskContext    =    queryContext . addTaskContext ( new   execution . TaskStateMachine ( new   TaskId (  \" query \"  ,     0  ,     0  )  ,    localQueryRunner . getExecutor (  )  )  ,    localQueryRunner . getDefaultSession (  )  ,    false ,    false )  ;", "ImmutableList . Builder < Page >    output    =    ImmutableList . builder (  )  ;", "List < Driver >    drivers    =    localQueryRunner . createDrivers ( query ,    new   PageConsumerOperator . PageConsumerOutputFactory (  (    types )     -  >    output :  : add )  ,    taskContext )  ;", "boolean   done    =    false ;", "while    (  ! done )     {", "boolean   processed    =    false ;", "for    ( Driver   driver    :    drivers )     {", "if    (  !  ( driver . isFinished (  )  )  )     {", "driver . process (  )  ;", "processed    =    true ;", "}", "}", "done    =     ! processed ;", "}", "return   output . build (  )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "com.facebook.presto.benchmark.MemoryLocalQueryRunner"}, {"methodBody": ["METHOD_START", "{", "localQueryRunner . installPlugin ( plugin )  ;", "}", "METHOD_END"], "methodName": ["installPlugin"], "fileName": "com.facebook.presto.benchmark.MemoryLocalQueryRunner"}, {"methodBody": ["METHOD_START", "{", "new   OrderByBenchmark ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.OrderByBenchmark"}, {"methodBody": ["METHOD_START", "{", "new   PredicateFilterBenchmark ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.PredicateFilterBenchmark"}, {"methodBody": ["METHOD_START", "{", "new   PredicateFilterSqlBenchmark ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.PredicateFilterSqlBenchmark"}, {"methodBody": ["METHOD_START", "{", "new   RawStreamingBenchmark ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.RawStreamingBenchmark"}, {"methodBody": ["METHOD_START", "{", "new   RawStreamingSqlBenchmark ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.RawStreamingSqlBenchmark"}, {"methodBody": ["METHOD_START", "{", "new   SqlApproximateCountDistinctDoubleBenchmark ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.SqlApproximateCountDistinctDoubleBenchmark"}, {"methodBody": ["METHOD_START", "{", "new   SqlApproximateCountDistinctLongBenchmark ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.SqlApproximateCountDistinctLongBenchmark"}, {"methodBody": ["METHOD_START", "{", "new   SqlApproximateCountDistinctVarBinaryBenchmark ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.SqlApproximateCountDistinctVarBinaryBenchmark"}, {"methodBody": ["METHOD_START", "{", "new   SqlApproximatePercentileBenchmark ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.SqlApproximatePercentileBenchmark"}, {"methodBody": ["METHOD_START", "{", "new   SqlBetweenBenchmark ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.SqlBetweenBenchmark"}, {"methodBody": ["METHOD_START", "{", "LocalQueryRunner   queryRunner    =    BenchmarkQueryRunner . createLocalQueryRunner ( ImmutableMap . of (  \" reorder _ joins \"  ,     \" false \"  )  )  ;", "new    ( queryRunner )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "queryRunner . close (  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.SqlConsecutiveJoinBenchmark"}, {"methodBody": ["METHOD_START", "{", "new   SqlDistinctMultipleFields ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.SqlDistinctMultipleFields"}, {"methodBody": ["METHOD_START", "{", "new   SqlDistinctSingleField ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.SqlDistinctSingleField"}, {"methodBody": ["METHOD_START", "{", "new   SqlDoubleSumAggregationBenchmark ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.SqlDoubleSumAggregationBenchmark"}, {"methodBody": ["METHOD_START", "{", "new   SqlHashJoinBenchmark ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.SqlHashJoinBenchmark"}, {"methodBody": ["METHOD_START", "{", "new   SqlInBenchmark ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.SqlInBenchmark"}, {"methodBody": ["METHOD_START", "{", "new   SqlJoinWithPredicateBenchmark ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.SqlJoinWithPredicateBenchmark"}, {"methodBody": ["METHOD_START", "{", "new   SqlLikeBenchmark ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.SqlLikeBenchmark"}, {"methodBody": ["METHOD_START", "{", "new   SqlRegexpLikeBenchmark ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.SqlRegexpLikeBenchmark"}, {"methodBody": ["METHOD_START", "{", "new   SqlSemiJoinInPredicateBenchmark ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.SqlSemiJoinInPredicateBenchmark"}, {"methodBody": ["METHOD_START", "{", "new   SqlTpchQuery 1  ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.SqlTpchQuery1"}, {"methodBody": ["METHOD_START", "{", "new   SqlTpchQuery 6  ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.SqlTpchQuery6"}, {"methodBody": ["METHOD_START", "{", "LocalQueryRunner   localQueryRunner    =    BenchmarkQueryRunner . createLocalQueryRunner (  )  ;", "new    . LongVarianceBenchmark ( localQueryRunner )  . runBenchmark ( new   AverageBenchmarkResults (  )  )  ;", "new    . LongVariancePopBenchmark ( localQueryRunner )  . runBenchmark ( new   AverageBenchmarkResults (  )  )  ;", "new    . DoubleVarianceBenchmark ( localQueryRunner )  . runBenchmark ( new   AverageBenchmarkResults (  )  )  ;", "new    . DoubleVariancePopBenchmark ( localQueryRunner )  . runBenchmark ( new   AverageBenchmarkResults (  )  )  ;", "new    . LongStdDevBenchmark ( localQueryRunner )  . runBenchmark ( new   AverageBenchmarkResults (  )  )  ;", "new    . LongStdDevPopBenchmark ( localQueryRunner )  . runBenchmark ( new   AverageBenchmarkResults (  )  )  ;", "new    . DoubleStdDevBenchmark ( localQueryRunner )  . runBenchmark ( new   AverageBenchmarkResults (  )  )  ;", "new    . DoubleStdDevPopBenchmark ( localQueryRunner )  . runBenchmark ( new   AverageBenchmarkResults (  )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.StatisticsBenchmark"}, {"methodBody": ["METHOD_START", "{", "new   StructuredTypesBenchmark ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.StructuredTypesBenchmark"}, {"methodBody": ["METHOD_START", "{", "try    ( LocalQueryRunner   localQueryRunner    =    BenchmarkQueryRunner . createLocalQueryRunner (  )  )     {", "for    ( Abstrac   benchmark    :    BenchmarkSuite . createBenchmarks ( localQueryRunner )  )     {", "try    {", "benchmark . runOnce (  )  ;", "}    catch    ( RuntimeException   e )     {", "throw   new   AssertionError (  (  \" Error   running    \"     +     ( benchmark . geName (  )  )  )  ,    e )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["smokeTest"], "fileName": "com.facebook.presto.benchmark.TestBenchmarks"}, {"methodBody": ["METHOD_START", "{", "new   Top 1  0  0 Benchmark ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.Top100Benchmark"}, {"methodBody": ["METHOD_START", "{", "new   Top 1  0  0 SqlBenchmark ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.Top100SqlBenchmark"}, {"methodBody": ["METHOD_START", "{", "new   VarBinaryMaxAggregationSqlBenchmark ( BenchmarkQueryRunner . createLocalQueryRunner (  )  )  . runBenchmark ( new   SimpleLineBenchmarkResultWriter ( System . out )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.VarBinaryMaxAggregationSqlBenchmark"}]