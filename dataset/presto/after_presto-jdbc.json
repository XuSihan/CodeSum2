[{"methodBody": ["METHOD_START", "{", "return    (    t )     -  >     {", "try    {", "return   predicate . test ( t )  ;", "}    catch    ( SQLExcep   e )     {", "return   false ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["checkedPredicate"], "fileName": "com.facebook.presto.jdbc.AbstractConnectionProperty"}, {"methodBody": ["METHOD_START", "{", "return   catalogName ;", "}", "METHOD_END"], "methodName": ["getCatalogName"], "fileName": "com.facebook.presto.jdbc.ColumnInfo"}, {"methodBody": ["METHOD_START", "{", "return   columnDisplaySize ;", "}", "METHOD_END"], "methodName": ["getColumnDisplaySize"], "fileName": "com.facebook.presto.jdbc.ColumnInfo"}, {"methodBody": ["METHOD_START", "{", "return   columnLabel ;", "}", "METHOD_END"], "methodName": ["getColumnLabel"], "fileName": "com.facebook.presto.jdbc.ColumnInfo"}, {"methodBody": ["METHOD_START", "{", "return   columnName ;", "}", "METHOD_END"], "methodName": ["getColumnName"], "fileName": "com.facebook.presto.jdbc.ColumnInfo"}, {"methodBody": ["METHOD_START", "{", "return   columnParameterTypes ;", "}", "METHOD_END"], "methodName": ["getColumnParameterTypes"], "fileName": "com.facebook.presto.jdbc.ColumnInfo"}, {"methodBody": ["METHOD_START", "{", "return   columnType ;", "}", "METHOD_END"], "methodName": ["getColumnType"], "fileName": "com.facebook.presto.jdbc.ColumnInfo"}, {"methodBody": ["METHOD_START", "{", "return   columnTypeSignature . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getColumnTypeName"], "fileName": "com.facebook.presto.jdbc.ColumnInfo"}, {"methodBody": ["METHOD_START", "{", "return   columnTypeSignature ;", "}", "METHOD_END"], "methodName": ["getColumnTypeSignature"], "fileName": "com.facebook.presto.jdbc.ColumnInfo"}, {"methodBody": ["METHOD_START", "{", "return   nullable ;", "}", "METHOD_END"], "methodName": ["getNullable"], "fileName": "com.facebook.presto.jdbc.ColumnInfo"}, {"methodBody": ["METHOD_START", "{", "return   precision ;", "}", "METHOD_END"], "methodName": ["getPrecision"], "fileName": "com.facebook.presto.jdbc.ColumnInfo"}, {"methodBody": ["METHOD_START", "{", "return   scale ;", "}", "METHOD_END"], "methodName": ["getScale"], "fileName": "com.facebook.presto.jdbc.ColumnInfo"}, {"methodBody": ["METHOD_START", "{", "return   schemaName ;", "}", "METHOD_END"], "methodName": ["getSchemaName"], "fileName": "com.facebook.presto.jdbc.ColumnInfo"}, {"methodBody": ["METHOD_START", "{", "return   tableName ;", "}", "METHOD_END"], "methodName": ["getTableName"], "fileName": "com.facebook.presto.jdbc.ColumnInfo"}, {"methodBody": ["METHOD_START", "{", "if    ( type . getBase (  )  . equals (  \" array \"  )  )     {", "return   Types . ARRAY ;", "}", "switch    ( type . getBase (  )  )     {", "case    \" lean \"     :", "return   Types . BOOLEAN ;", "case    \" bigint \"     :", "return   Types . BIGINT ;", "case    \" integer \"     :", "return   Types . INTEGER ;", "case    \" smallint \"     :", "return   Types . SMALLINT ;", "case    \" tinyint \"     :", "return   Types . TINYINT ;", "case    \" real \"     :", "return   Types . REAL ;", "case    \" double \"     :", "return   Types . DOUBLE ;", "case    \" varchar \"     :", "return   Types . LONGNVARCHAR ;", "case    \" char \"     :", "return   Types . CHAR ;", "case    \" varbinary \"     :", "return   Types . LONGVARBINARY ;", "case    \" time \"     :", "return   Types . TIME ;", "case    \" time   with   time   zone \"     :", "return   Types . TIME ;", "case    \" timestamp \"     :", "return   Types . TIMESTAMP ;", "case    \" timestamp   with   time   zone \"     :", "return   Types . TIMESTAMP ;", "case    \" date \"     :", "return   Types . DATE ;", "case    \" decimal \"     :", "return   Types . DECIMAL ;", "default    :", "return   Types . JAVA _ OBJECT ;", "}", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.facebook.presto.jdbc.ColumnInfo"}, {"methodBody": ["METHOD_START", "{", "switch    ( typeParameter . getKind (  )  )     {", "case   TYPE    :", "return    . getType ( typeParameter . getTypeSignature (  )  )  ;", "default    :", "return   Types . JAVA _ OBJECT ;", "}", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.facebook.presto.jdbc.ColumnInfo"}, {"methodBody": ["METHOD_START", "{", "return   currency ;", "}", "METHOD_END"], "methodName": ["isCurrency"], "fileName": "com.facebook.presto.jdbc.ColumnInfo"}, {"methodBody": ["METHOD_START", "{", "return   signed ;", "}", "METHOD_END"], "methodName": ["isSigned"], "fileName": "com.facebook.presto.jdbc.ColumnInfo"}, {"methodBody": ["METHOD_START", "{", "builder . setColumnType ( ColumnInfo . getType ( type )  )  ;", "ImmutableList . Builder < Integer >    parameterTypes    =    ImmutableList . builder (  )  ;", "for    ( TypeSignatureParameter   parameter    :    type . getParameters (  )  )     {", "parameterTypes . add ( ColumnInfo . getType ( parameter )  )  ;", "}", "builder . setColumnParameterTypes ( parameterTypes . build (  )  )  ;", "switch    ( type . toString (  )  )     {", "case    \" boolean \"     :", "builder . setColumnDisplaySize (  5  )  ;", "break ;", "case    \" bigint \"     :", "builder . setSigned ( true )  ;", "builder . setPrecision (  1  9  )  ;", "builder . setScale (  0  )  ;", "builder . setColumnDisplaySize (  2  0  )  ;", "break ;", "case    \" integer \"     :", "builder . setSigned ( true )  ;", "builder . setPrecision (  1  0  )  ;", "builder . setScale (  0  )  ;", "builder . setColumnDisplaySize (  1  1  )  ;", "break ;", "case    \" smallint \"     :", "builder . setSigned ( true )  ;", "builder . setPrecision (  5  )  ;", "builder . setScale (  0  )  ;", "builder . setColumnDisplaySize (  6  )  ;", "break ;", "case    \" tinyint \"     :", "builder . setSigned ( true )  ;", "builder . setPrecision (  3  )  ;", "builder . setScale (  0  )  ;", "builder . setColumnDisplaySize (  4  )  ;", "break ;", "case    \" real \"     :", "builder . setSigned ( true )  ;", "builder . setPrecision (  9  )  ;", "builder . setScale (  0  )  ;", "builder . setColumnDisplaySize (  1  6  )  ;", "break ;", "case    \" double \"     :", "builder . setSigned ( true )  ;", "builder . setPrecision (  1  7  )  ;", "builder . setScale (  0  )  ;", "builder . setColumnDisplaySize (  2  4  )  ;", "break ;", "case    \" varchar \"     :", "builder . setSigned ( true )  ;", "builder . setPrecision ( ColumnInfo . VARCHAR _ MAX )  ;", "builder . setScale (  0  )  ;", "builder . setColumnDisplaySize ( ColumnInfo . VARCHAR _ MAX )  ;", "break ;", "case    \" varbinary \"     :", "builder . setSigned ( true )  ;", "builder . setPrecision ( ColumnInfo . VARBINARY _ MAX )  ;", "builder . setScale (  0  )  ;", "builder . setColumnDisplaySize ( ColumnInfo . VARBINARY _ MAX )  ;", "break ;", "case    \" time \"     :", "builder . setSigned ( true )  ;", "builder . setPrecision (  3  )  ;", "builder . setScale (  0  )  ;", "builder . setColumnDisplaySize ( ColumnInfo . TIME _ MAX )  ;", "break ;", "case    \" time   with   time   zone \"     :", "builder . setSigned ( true )  ;", "builder . setPrecision (  3  )  ;", "builder . setScale (  0  )  ;", "builder . setColumnDisplaySize ( ColumnInfo . TIME _ WITH _ TIME _ ZONE _ MAX )  ;", "break ;", "case    \" timestamp \"     :", "builder . setSigned ( true )  ;", "builder . setPrecision (  3  )  ;", "builder . setScale (  0  )  ;", "builder . setColumnDisplaySize ( ColumnInfo . TIMESTAMP _ MAX )  ;", "break ;", "case    \" timestamp   with   time   zone \"     :", "builder . setSigned ( true )  ;", "builder . setPrecision (  3  )  ;", "builder . setScale (  0  )  ;", "builder . setColumnDisplaySize ( ColumnInfo . TIMESTAMP _ WITH _ TIME _ ZONE _ MAX )  ;", "break ;", "case    \" date \"     :", "builder . setSigned ( true )  ;", "builder . setScale (  0  )  ;", "builder . setColumnDisplaySize ( ColumnInfo . DATE _ MAX )  ;", "break ;", "case    \" interval   year   to   month \"     :", "builder . setColumnDisplaySize ( ColumnInfo . TIMESTAMP _ MAX )  ;", "break ;", "case    \" interval   day   to   second \"     :", "builder . setColumnDisplaySize ( ColumnInfo . TIMESTAMP _ MAX )  ;", "break ;", "case    \" decimal \"     :", "builder . setSigned ( true )  ;", "builder . setColumnDisplaySize (  (  ( type . getParameters (  )  . get (  0  )  . getLongLiteral (  )  . intValue (  )  )     +     2  )  )  ;", "builder . setPrecision ( type . getParameters (  )  . get (  0  )  . getLongLiteral (  )  . intValue (  )  )  ;", "builder . setScale ( type . getParameters (  )  . get (  1  )  . getLongLiteral (  )  . intValue (  )  )  ;", "break ;", "}", "}", "METHOD_END"], "methodName": ["setTypeInfo"], "fileName": "com.facebook.presto.jdbc.ColumnInfo"}, {"methodBody": ["METHOD_START", "{", "return   ConnectionProperties . ALL _ PROPERTIES ;", "}", "METHOD_END"], "methodName": ["allProperties"], "fileName": "com.facebook.presto.jdbc.ConnectionProperties"}, {"methodBody": ["METHOD_START", "{", "return   ConnectionProperties . KEY _ LOOKUP . get ( propertiesKey )  ;", "}", "METHOD_END"], "methodName": ["forKey"], "fileName": "com.facebook.presto.jdbc.ConnectionProperties"}, {"methodBody": ["METHOD_START", "{", "return   ConnectionProperties . DEFAULTS ;", "}", "METHOD_END"], "methodName": ["getDefaults"], "fileName": "com.facebook.presto.jdbc.ConnectionProperties"}, {"methodBody": ["METHOD_START", "{", "return   AbstractConnectionProperty . checkedPredicate (  (    properties )     -  >    ConnectionProperties . KERBEROS _ REMOTE _ SERVICE _ NAME . getValue ( properties )  . isPresent (  )  )  ;", "}", "METHOD_END"], "methodName": ["isKerberosEnabled"], "fileName": "com.facebook.presto.jdbc.ConnectionProperties"}, {"methodBody": ["METHOD_START", "{", "return   getValue ( properties )  . orElseThrow (  (  )     -  >    new   SQLException ( String . format (  \" Connection   property    '  % s '    is   required \"  ,    getKey (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getRequiredValue"], "fileName": "com.facebook.presto.jdbc.ConnectionProperty"}, {"methodBody": ["METHOD_START", "{", "if    ( resultSetHoldability    !  =     ( ResultSet . HOLD _ CURSORS _ OVER _ COMMIT )  )     {", "throw   new   SQLFeatureNotSupportedExcep (  \" Result   set   holdability   must   be   HOLD _ CURSORS _ OVER _ COMMIT \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkHoldability"], "fileName": "com.facebook.presto.jdbc.PrestoConnection"}, {"methodBody": ["METHOD_START", "{", "if    ( isClosed (  )  )     {", "throw   new   SQLException (  \"    is   closed \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkOpen"], "fileName": "com.facebook.presto.jdbc.PrestoConnection"}, {"methodBody": ["METHOD_START", "{", "if    ( resultSetType    !  =     ( ResultSet . TYPE _ FORWARD _ ONLY )  )     {", "throw   new   SQLFeatureNotSupportedExcep (  \" Result   set   type   must   be   TYPE _ FORWARD _ ONLY \"  )  ;", "}", "if    ( resultSetConcurrency    !  =     ( ResultSet . CONCUR _ READ _ ONLY )  )     {", "throw   new   SQLFeatureNotSupportedExcep (  \" Result   set   concurrency   must   be   CONCUR _ READ _ ONLY \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkResultSet"], "fileName": "com.facebook.presto.jdbc.PrestoConnection"}, {"methodBody": ["METHOD_START", "{", "switch    ( level )     {", "case    . TRANSACTION _ READ _ UNCOMMITTED    :", "return    \" READ   UNCOMMITTED \"  ;", "case    . TRANSACTION _ READ _ COMMITTED    :", "return    \" READ   COMMITTED \"  ;", "case    . TRANSACTION _ REPEATABLE _ READ    :", "return    \" REPEATABLE   READ \"  ;", "case    . TRANSACTION _ SERIALIZABLE    :", "return    \" SERIALIZABLE \"  ;", "}", "throw   new   SQLException (  (  \" Invalid   transaction   isolation   level :     \"     +    level )  )  ;", "}", "METHOD_END"], "methodName": ["getIsolationLevel"], "fileName": "com.facebook.presto.jdbc.PrestoConnection"}, {"methodBody": ["METHOD_START", "{", "return   locale . get (  )  ;", "}", "METHOD_END"], "methodName": ["getLocale"], "fileName": "com.facebook.presto.jdbc.PrestoConnection"}, {"methodBody": ["METHOD_START", "{", "if    (  ( serverInfo . get (  )  )     =  =    null )     {", "try    {", "serverInfo . set ( queryExecutor . getServerInfo ( httpUri )  )  ;", "}    catch    ( RuntimeExcep   e )     {", "throw   new   SQLExcep (  \" Error   fetching   version   from   server \"  ,    e )  ;", "}", "}", "return   serverInfo . get (  )  ;", "}", "METHOD_END"], "methodName": ["getServerInfo"], "fileName": "com.facebook.presto.jdbc.PrestoConnection"}, {"methodBody": ["METHOD_START", "{", "return   String . format (  \" START   TRANSACTION   ISOLATION   LEVEL    % s ,    READ    % s \"  ,    PrestoConnection . getIsolationLevel ( isolationLevel . get (  )  )  ,     ( readOnly . get (  )     ?     \" ONLY \"     :     \" WRITE \"  )  )  ;", "}", "METHOD_END"], "methodName": ["getStartTransactionSql"], "fileName": "com.facebook.presto.jdbc.PrestoConnection"}, {"methodBody": ["METHOD_START", "{", "return   timeZoneId . get (  )  ;", "}", "METHOD_END"], "methodName": ["getTimeZoneId"], "fileName": "com.facebook.presto.jdbc.PrestoConnection"}, {"methodBody": ["METHOD_START", "{", "return   jdbcUri ;", "}", "METHOD_END"], "methodName": ["getURI"], "fileName": "com.facebook.presto.jdbc.PrestoConnection"}, {"methodBody": ["METHOD_START", "{", "return   user ;", "}", "METHOD_END"], "methodName": ["getUser"], "fileName": "com.facebook.presto.jdbc.PrestoConnection"}, {"methodBody": ["METHOD_START", "{", "this . locale . set ( locale )  ;", "}", "METHOD_END"], "methodName": ["setLocale"], "fileName": "com.facebook.presto.jdbc.PrestoConnection"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( name ,     \" name   is   null \"  )  ;", "Objects . requireNonNull ( value ,     \" value   is   null \"  )  ;", "checkArgument (  (  !  ( name . isEmpty (  )  )  )  ,     \" name   is   empty \"  )  ;", "CharsetEncoder   charsetEncoder    =    StandardCharsets . US _ ASCII . newEncoder (  )  ;", "checkArgument (  (  ( name . indexOf (  '  =  '  )  )     <     0  )  ,     \" Session   property   name   must   not   contain    '  =  '  :     % s \"  ,    name )  ;", "checkArgument ( charsetEncoder . canEncode ( name )  ,     \" Session   property   name   is   not   US _ ASCII :     % s \"  ,    name )  ;", "checkArgument ( charsetEncoder . canEncode ( value )  ,     \" Session   property   value   is   not   US _ ASCII :     % s \"  ,    value )  ;", "sessionProperties . put ( name ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSessionProperty"], "fileName": "com.facebook.presto.jdbc.PrestoConnection"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( timeZoneId ,     \" timeZoneId   is   null \"  )  ;", "this . timeZoneId . set ( timeZoneId )  ;", "}", "METHOD_END"], "methodName": ["setTimeZoneId"], "fileName": "com.facebook.presto.jdbc.PrestoConnection"}, {"methodBody": ["METHOD_START", "{", "return    (  !  ( autoCommit . get (  )  )  )     &  &     (  ( transactionId . get (  )  )     =  =    null )  ;", "}", "METHOD_END"], "methodName": ["shouldStartTransaction"], "fileName": "com.facebook.presto.jdbc.PrestoConnection"}, {"methodBody": ["METHOD_START", "{", "String   source    =    firstNonNull ( clientInfo . get (  \" ApplicationName \"  )  ,     \" presto - jdbc \"  )  ;", "Iterable < String >    clientTags    =    Splitter . on (  '  ,  '  )  . trimResults (  )  . omitEmptyStrings (  )  . split ( nullToEmpty ( clientInfo . get (  \" ClientTags \"  )  )  )  ;", "Map < String ,    String >    allProperties    =    new   HashMap <  >  ( sessionProperties )  ;", "allProperties . putAll ( sessionPropertiesOverride )  ;", "int   millis    =    networkTimeoutMillis . get (  )  ;", "Duration   timeout    =     ( millis    >     0  )     ?    new   Duration ( millis ,    TimeUnit . MILLISECONDS )     :    new   Duration (  9  9  9  ,    TimeUnit . DAYS )  ;", "ClientSession   session    =    new   ClientSession ( httpUri ,    user ,    source ,    ImmutableSet . copyOf ( clientTags )  ,    clientInfo . get (  \" ClientInfo \"  )  ,    catalog . get (  )  ,    schema . get (  )  ,    timeZoneId . get (  )  ,    locale . get (  )  ,    ImmutableMap . of (  )  ,    ImmutableMap . copyOf ( allProperties )  ,    ImmutableMap . copyOf ( preparedStatements )  ,    transactionId . get (  )  ,    timeout )  ;", "return   queryExecutor . startQuery ( session ,    sql )  ;", "}", "METHOD_END"], "methodName": ["startQuery"], "fileName": "com.facebook.presto.jdbc.PrestoConnection"}, {"methodBody": ["METHOD_START", "{", "client . getSetSessionProperties (  )  . forEach ( sessionProperties :  : put )  ;", "client . getResetSessionProperties (  )  . forEach ( sessionProperties :  : remove )  ;", "client . getAddedPreparedStatements (  )  . forEach ( preparedStatements :  : put )  ;", "client . getDeallocatedPreparedStatements (  )  . forEach ( preparedStatements :  : remove )  ;", "client . getSetCatalog (  )  . ifPresent ( catalog :  : set )  ;", "client . getSetSchema (  )  . ifPresent ( schema :  : set )  ;", "if    (  ( client . getStartedTransaId (  )  )     !  =    null )     {", "transaId . set ( client . getStartedTransaId (  )  )  ;", "}", "if    ( client . isClearTransaId (  )  )     {", "transaId . set ( null )  ;", "}", "}", "METHOD_END"], "methodName": ["updateSession"], "fileName": "com.facebook.presto.jdbc.PrestoConnection"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( filters . isEmpty (  )  )  )     {", "out . append (  \"  \\ nWHERE    \"  )  ;", "Joiner . on (  \"    AND    \"  )  . appendTo ( out ,    filters )  ;", "}", "}", "METHOD_END"], "methodName": ["buildFilters"], "fileName": "com.facebook.presto.jdbc.PrestoDatabaseMetaData"}, {"methodBody": ["METHOD_START", "{", "if    ( value    !  =    null )     {", "if    ( value . isEmpty (  )  )     {", "filters . add (  ( columnName    +     \"    IS   NULL \"  )  )  ;", "} else    {", "filters . add (  . stringColumnEquals ( columnName ,    value )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["emptyStringEqualsFilter"], "fileName": "com.facebook.presto.jdbc.PrestoDatabaseMetaData"}, {"methodBody": ["METHOD_START", "{", "if    ( value    !  =    null )     {", "if    ( value . isEmpty (  )  )     {", "filters . add (  ( columnName    +     \"    IS   NULL \"  )  )  ;", "} else    {", "filters . add (  . stringColumnLike ( columnName ,    value )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["emptyStringLikeFilter"], "fileName": "com.facebook.presto.jdbc.PrestoDatabaseMetaData"}, {"methodBody": ["METHOD_START", "{", "String   version    =    getDatabaseProductVersion (  )  ;", "List < String >    parts    =    Splitter . on (  '  .  '  )  . limit (  3  )  . splitToList ( version )  ;", "try    {", "return   Integer . parseInt ( parts . get ( part )  )  ;", "}    catch    ( IndexOutOfBoundsException    |    NumberFormatException   e )     {", "return    0  ;", "}", "}", "METHOD_END"], "methodName": ["getDatabaseVersionPart"], "fileName": "com.facebook.presto.jdbc.PrestoDatabaseMetaData"}, {"methodBody": ["METHOD_START", "{", "if    ( values    =  =    null )     {", "return ;", "}", "if    (  ( values . length )     =  =     0  )     {", "filters . add (  \" false \"  )  ;", "return ;", "}", "StringBuilder   filter    =    new   StringBuilder (  )  ;", "filter . append ( columnName )  . append (  \"    IN    (  \"  )  ;", "for    ( int   i    =     0  ;    i    <     ( values . length )  ;    i +  +  )     {", "if    ( i    >     0  )     {", "filter . append (  \"  ,     \"  )  ;", "}", ". quoteStringLiteral ( filter ,    values [ i ]  )  ;", "}", "filter . append (  \"  )  \"  )  ;", "filters . add ( filter . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["optionalStringInFilter"], "fileName": "com.facebook.presto.jdbc.PrestoDatabaseMetaData"}, {"methodBody": ["METHOD_START", "{", "if    ( value    !  =    null )     {", "filters . add (  . stringColumnLike ( columnName ,    value )  )  ;", "}", "}", "METHOD_END"], "methodName": ["optionalStringLikeFilter"], "fileName": "com.facebook.presto.jdbc.PrestoDatabaseMetaData"}, {"methodBody": ["METHOD_START", "{", "out . append (  '  \\  '  '  )  ;", "for    ( int   i    =     0  ;    i    <     ( value . length (  )  )  ;    i +  +  )     {", "char   c    =    value . charAt ( i )  ;", "out . append ( c )  ;", "if    ( c    =  =     '  \\  '  '  )     {", "out . append (  '  \\  '  '  )  ;", "}", "}", "out . append (  '  \\  '  '  )  ;", "}", "METHOD_END"], "methodName": ["quoteStringLiteral"], "fileName": "com.facebook.presto.jdbc.PrestoDatabaseMetaData"}, {"methodBody": ["METHOD_START", "{", "return   getConnection (  )  . createStatement (  )  . executeQuery ( sql )  ;", "}", "METHOD_END"], "methodName": ["select"], "fileName": "com.facebook.presto.jdbc.PrestoDatabaseMetaData"}, {"methodBody": ["METHOD_START", "{", "return   select (  ( sql    +     \"    LIMIT    0  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["selectEmpty"], "fileName": "com.facebook.presto.jdbc.PrestoDatabaseMetaData"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   filter    =    new   StringBuilder (  )  ;", "filter . append ( columnName )  . append (  \"     =     \"  )  ;", ". quoteStringLiteral ( filter ,    value )  ;", "return   filter . toString (  )  ;", "}", "METHOD_END"], "methodName": ["stringColumnEquals"], "fileName": "com.facebook.presto.jdbc.PrestoDatabaseMetaData"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   filter    =    new   StringBuilder (  )  ;", "filter . append ( columnName )  . append (  \"    LIKE    \"  )  ;", ". quoteStringLiteral ( filter ,    pattern )  ;", "filter . append (  \"    ESCAPE    \"  )  ;", ". quoteStringLiteral ( filter ,     . SEARCH _ STRING _ ESCAPE )  ;", "return   filter . toString (  )  ;", "}", "METHOD_END"], "methodName": ["stringColumnLike"], "fileName": "com.facebook.presto.jdbc.PrestoDatabaseMetaData"}, {"methodBody": ["METHOD_START", "{", "String   scheme    =     ( useSecureConnection )     ?     \" https \"     :     \" http \"  ;", "try    {", "return   new   URI ( scheme ,    null ,    adds . getHost (  )  ,    adds . getPort (  )  ,    null ,    null ,    null )  ;", "}    catch    ( URISyntaxException   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["buildHttpUri"], "fileName": "com.facebook.presto.jdbc.PrestoDriverUri"}, {"methodBody": ["METHOD_START", "{", "return   catalog ;", "}", "METHOD_END"], "methodName": ["getCatalog"], "fileName": "com.facebook.presto.jdbc.PrestoDriverUri"}, {"methodBody": ["METHOD_START", "{", "return   buildHttpUri (  )  ;", "}", "METHOD_END"], "methodName": ["getHttpUri"], "fileName": "com.facebook.presto.jdbc.PrestoDriverUri"}, {"methodBody": ["METHOD_START", "{", "return   uri ;", "}", "METHOD_END"], "methodName": ["getJdbcUri"], "fileName": "com.facebook.presto.jdbc.PrestoDriverUri"}, {"methodBody": ["METHOD_START", "{", "return   properties ;", "}", "METHOD_END"], "methodName": ["getProperties"], "fileName": "com.facebook.presto.jdbc.PrestoDriverUri"}, {"methodBody": ["METHOD_START", "{", "return   schema ;", "}", "METHOD_END"], "methodName": ["getSchema"], "fileName": "com.facebook.presto.jdbc.PrestoDriverUri"}, {"methodBody": ["METHOD_START", "{", "return   ConnectionProperties . USER . getRequiredValue ( properties )  ;", "}", "METHOD_END"], "methodName": ["getUser"], "fileName": "com.facebook.presto.jdbc.PrestoDriverUri"}, {"methodBody": ["METHOD_START", "{", "String   path    =    uri . getPath (  )  ;", "if    (  ( isNullOrEmpty ( uri . getPath (  )  )  )     |  |     ( path . equals (  \"  /  \"  )  )  )     {", "return ;", "}", "if    (  !  ( path . startsWith (  \"  /  \"  )  )  )     {", "throw   new   SQLException (  (  \" Path   does   not   start   with   a   slash :     \"     +     ( uri )  )  )  ;", "}", "path    =    path . substring (  1  )  ;", "List < String >    parts    =    Splitter . on (  \"  /  \"  )  . splitToList ( path )  ;", "if    ( parts . get (  (  ( parts . size (  )  )     -     1  )  )  . isEmpty (  )  )     {", "parts    =    parts . subList (  0  ,     (  ( parts . size (  )  )     -     1  )  )  ;", "}", "if    (  ( parts . size (  )  )     >     2  )     {", "throw   new   SQLException (  (  \" Invalid   path   segments   in   URL :     \"     +     ( uri )  )  )  ;", "}", "if    ( parts . get (  0  )  . isEmpty (  )  )     {", "throw   new   SQLException (  (  \" Catalog   name   is   empty :     \"     +     ( uri )  )  )  ;", "}", "catalog    =    parts . get (  0  )  ;", "if    (  ( parts . size (  )  )     >     1  )     {", "if    ( parts . get (  1  )  . isEmpty (  )  )     {", "throw   new   SQLException (  (  \" Schema   name   is   empty :     \"     +     ( uri )  )  )  ;", "}", "schema    =    parts . get (  1  )  ;", "}", "}", "METHOD_END"], "methodName": ["initCatalogAndSchema"], "fileName": "com.facebook.presto.jdbc.PrestoDriverUri"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    defaults    =    ConnectionProperties . getDefaults (  )  ;", "Map < String ,    String >    urlProperties    =     . parseParameters ( uri . getQuery (  )  )  ;", "Map < String ,    String >    suppliedProperties    =    Maps . fromProperties ( driverProperties )  ;", "for    ( String   key    :    urlProperties . keySet (  )  )     {", "if    ( suppliedProperties . containsKey ( key )  )     {", "throw   new   SQLException ( String . format (  \" Connection   property    '  % s '    is   both   in   the   URL   and   an   argument \"  ,    key )  )  ;", "}", "}", "Properties   result    =    new   Properties (  )  ;", ". setProperties ( result ,    defaults )  ;", ". setProperties ( result ,    urlProperties )  ;", ". setProperties ( result ,    suppliedProperties )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["mergeConnectionProperties"], "fileName": "com.facebook.presto.jdbc.PrestoDriverUri"}, {"methodBody": ["METHOD_START", "{", "URI   uri ;", "try    {", "uri    =    new   URI ( url . substring (  . JDBC _ URL _ START . length (  )  )  )  ;", "}    catch    ( URISyntaxException   e )     {", "throw   new   SQLException (  (  \" Invalid   JDBC   URL :     \"     +    url )  ,    e )  ;", "}", "if    ( isNullOrEmpty ( uri . getHost (  )  )  )     {", "throw   new   SQLException (  (  \" No   host   specified :     \"     +    url )  )  ;", "}", "if    (  ( uri . getPort (  )  )     =  =     (  -  1  )  )     {", "throw   new   SQLException (  (  \" No   port   number   specified :     \"     +    url )  )  ;", "}", "if    (  (  ( uri . getPort (  )  )     <     1  )     |  |     (  ( uri . getPort (  )  )     >     6  5  5  3  5  )  )     {", "throw   new   SQLException (  (  \" Invalid   port   number :     \"     +    url )  )  ;", "}", "return   uri ;", "}", "METHOD_END"], "methodName": ["parseDriverUrl"], "fileName": "com.facebook.presto.jdbc.PrestoDriverUri"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    result    =    new   HashMap <  >  (  )  ;", "if    ( query    !  =    null )     {", "Iterable < String >    queryArgs    =     . QUERY _ SPLITTER . split ( query )  ;", "for    ( String   queryArg    :    queryArgs )     {", "List < String >    parts    =     . ARG _ SPLITTER . splitToList ( queryArg )  ;", "if    (  ( result . put ( parts . get (  0  )  ,    parts . get (  1  )  )  )     !  =    null )     {", "throw   new   SQLException ( String . format (  \" Connection   property    '  % s '    is   in   URL   multiple   times \"  ,    parts . get (  0  )  )  )  ;", "}", "}", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["parseParameters"], "fileName": "com.facebook.presto.jdbc.PrestoDriverUri"}, {"methodBody": ["METHOD_START", "{", "for    ( Map . Entry < String ,    String >    entry    :    values . entrySet (  )  )     {", "properties . setProperty ( entry . getKey (  )  ,    entry . getValue (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["setProperties"], "fileName": "com.facebook.presto.jdbc.PrestoDriverUri"}, {"methodBody": ["METHOD_START", "{", "try    {", "OkHttpUtil . setupCookieJar ( builder )  ;", "OkHttpUtil . setupSocksProxy ( builder ,    ConnectionProperties . SOCKS _ PROXY . getValue ( properties )  )  ;", "OkHttpUtil . setupHttpProxy ( builder ,    ConnectionProperties . HTTP _ PROXY . getValue ( properties )  )  ;", "String   password    =    ConnectionProperties . PASSWORD . getValue ( properties )  . orElse (  \"  \"  )  ;", "if    (  (  !  ( password . isEmpty (  )  )  )     &  &     (  !  ( password . equals (  \"  *  *  * empty *  *  *  \"  )  )  )  )     {", "if    (  !  ( useSecureConnection )  )     {", "throw   new   SQLException (  \" Authentication   using   username / password   requires   SSL   to   be   enabled \"  )  ;", "}", "builder . addInterceptor ( OkHttpUtil . basicAuth ( getUser (  )  ,    password )  )  ;", "}", "if    ( useSecureConnection )     {", "OkHttpUtil . setupSsl ( builder ,    ConnectionProperties . SSL _ KEY _ STORE _ PATH . getValue ( properties )  ,    ConnectionProperties . SSL _ KEY _ STORE _ PASSWORD . getValue ( properties )  ,    ConnectionProperties . SSL _ TRUST _ STORE _ PATH . getValue ( properties )  ,    ConnectionProperties . SSL _ TRUST _ STORE _ PASSWORD . getValue ( properties )  )  ;", "}", "if    ( ConnectionProperties . KERBEROS _ REMOTE _ SERVICE _ NAME . getValue ( properties )  . isent (  )  )     {", "if    (  !  ( useSecureConnection )  )     {", "throw   new   SQLException (  \" Authentication   using   Kerberos   requires   SSL   to   be   enabled \"  )  ;", "}", "OkHttpUtil . setupKerberos ( builder ,    ConnectionProperties . KERBEROS _ REMOTE _ SERVICE _ NAME . getRequiredValue ( properties )  ,    ConnectionProperties . KERBEROS _ USE _ CANONICAL _ HOSTNAME . getRequiredValue ( properties )  ,    ConnectionProperties . KERBEROS _ PRINCIPAL . getValue ( properties )  ,    ConnectionProperties . KERBEROS _ CONFIG _ PATH . getValue ( properties )  ,    ConnectionProperties . KERBEROS _ KEYTAB _ PATH . getValue ( properties )  ,    Optional . ofNullable ( ConnectionProperties . KERBEROS _ CREDENTIAL _ CACHE _ PATH . getValue ( properties )  . orElseGet (  (  )     -  >    KerberosUtil . defaultCredentialCachePath (  )  . map ( File :  : new )  . orElse ( null )  )  )  )  ;", "}", "if    ( ConnectionProperties . ACCESS _ TOKEN . getValue ( properties )  . isent (  )  )     {", "if    (  !  ( useSecureConnection )  )     {", "throw   new   SQLException (  \" Authentication   using   an   access   token   requires   SSL   to   be   enabled \"  )  ;", "}", "builder . addInterceptor ( OkHttpUtil . tokenAuth ( ConnectionProperties . ACCESS _ TOKEN . getValue ( properties )  . get (  )  )  )  ;", "}", "}    catch    ( ClientException   e )     {", "throw   new   SQLException ( e . getMessage (  )  ,    e )  ;", "}    catch    ( RuntimeException   e )     {", "throw   new   SQLException (  \" Error   setting   up   connection \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["setupClient"], "fileName": "com.facebook.presto.jdbc.PrestoDriverUri"}, {"methodBody": ["METHOD_START", "{", "for    ( String   propertyName    :    connectionProperties . stringPropertyNames (  )  )     {", "if    (  ( ConnectionProperties . forKey ( propertyName )  )     =  =    null )     {", "throw   new   SQLException ( String . format (  \" Unrecognized   connection   property    '  % s '  \"  ,    propertyName )  )  ;", "}", "}", "for    ( ConnectionProperty <  ?  >    property    :    ConnectionProperties . allProperties (  )  )     {", "property . validate ( connectionProperties )  ;", "}", "}", "METHOD_END"], "methodName": ["validateConnectionProperties"], "fileName": "com.facebook.presto.jdbc.PrestoDriverUri"}, {"methodBody": ["METHOD_START", "{", "return   milliSeconds ;", "}", "METHOD_END"], "methodName": ["getMilliSeconds"], "fileName": "com.facebook.presto.jdbc.PrestoIntervalDayTime"}, {"methodBody": ["METHOD_START", "{", "return   months ;", "}", "METHOD_END"], "methodName": ["getMonths"], "fileName": "com.facebook.presto.jdbc.PrestoIntervalYearMonth"}, {"methodBody": ["METHOD_START", "{", "if    ( isClosed (  )  )     {", "throw   new   SQLException (  \"    is   closed \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkOpen"], "fileName": "com.facebook.presto.jdbc.PrestoResultSet"}, {"methodBody": ["METHOD_START", "{", "if    (  ( row . get (  )  )     =  =    null )     {", "throw   new   SQLException (  \" Not   on   a   valid   row \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkValidRow"], "fileName": "com.facebook.presto.jdbc.PrestoResultSet"}, {"methodBody": ["METHOD_START", "{", "checkOpen (  )  ;", "checkValidRow (  )  ;", "if    (  ( index    <  =     0  )     |  |     ( index    >     ( rMetaData . getColumnCount (  )  )  )  )     {", "throw   new   SQLException (  (  \" Invalid   column   index :     \"     +    index )  )  ;", "}", "Object   value    =    row . get (  )  . get (  ( index    -     1  )  )  ;", "wasNull . set (  ( value    =  =    null )  )  ;", "return   value ;", "}", "METHOD_END"], "methodName": ["column"], "fileName": "com.facebook.presto.jdbc.PrestoResultSet"}, {"methodBody": ["METHOD_START", "{", "checkOpen (  )  ;", "checkValidRow (  )  ;", "Object   value    =    row . get (  )  . get (  (  ( lumnIndex ( label )  )     -     1  )  )  ;", "wasNull . set (  ( value    =  =    null )  )  ;", "return   value ;", "}", "METHOD_END"], "methodName": ["column"], "fileName": "com.facebook.presto.jdbc.PrestoResultSet"}, {"methodBody": ["METHOD_START", "{", "if    ( label    =  =    null )     {", "throw   new   SQLException (  \" Column   label   is   null \"  )  ;", "}", "Integer   index    =    fieldMap . get ( label . toLowerCase ( Locale . ENGLISH )  )  ;", "if    ( index    =  =    null )     {", "throw   new   SQLException (  (  \" Invalid   column   label :     \"     +    label )  )  ;", "}", "return   index ;", "}", "METHOD_END"], "methodName": ["columnIndex"], "fileName": "com.facebook.presto.jdbc.PrestoResultSet"}, {"methodBody": ["METHOD_START", "{", "checkOpen (  )  ;", "checkValidRow (  )  ;", "if    (  ( index    <  =     0  )     |  |     ( index    >     ( lumnInfoList . size (  )  )  )  )     {", "throw   new   SQLException (  (  \" Invalid   lumn   index :     \"     +    index )  )  ;", "}", "return   lumnInfoList . get (  ( index    -     1  )  )  ;", "}", "METHOD_END"], "methodName": ["columnInfo"], "fileName": "com.facebook.presto.jdbc.PrestoResultSet"}, {"methodBody": ["METHOD_START", "{", "Iterator < T >    rowsIterator    =    concat ( transform ( iterator ,    Iterable :  : iterator )  )  ;", "return   maxRows    >     0     ?    new   LengthLimitedIterator <  >  ( rowsIterator ,    maxRows )     :    rowsIterator ;", "}", "METHOD_END"], "methodName": ["flatten"], "fileName": "com.facebook.presto.jdbc.PrestoResultSet"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < ColumnInfo >    list    =    ImmutableList . builder (  )  ;", "for    ( Column   column    :    columns )     {", "ColumnInfo . Builder   builder    =    new   ColumnInfo . Builder (  )  . setCatalogName (  \"  \"  )  . setSchemaName (  \"  \"  )  . setTableName (  \"  \"  )  . setColumnLabel ( column . getName (  )  )  . setColumnName ( column . getName (  )  )  . setColumnTypeSignature ( parseTypeSignature ( column . getType (  )  . toUpperCase ( Locale . ENGLISH )  )  )  . setNullable ( ColumnInfo . Nullable . UNKNOWN )  . setCurrency ( false )  ;", "ColumnInfo . setTypeInfo ( builder ,    parseTypeSignature ( column . getType (  )  )  )  ;", "list . add ( builder . build (  )  )  ;", "}", "return   list . build (  )  ;", "}", "METHOD_END"], "methodName": ["getColumnInfo"], "fileName": "com.facebook.presto.jdbc.PrestoResultSet"}, {"methodBody": ["METHOD_START", "{", "while    ( client . isRunning (  )  )     {", "QueryStatusInfo   results    =    client . currentStatusInfo (  )  ;", "progressCallback . accept ( QueryStats . create ( results . getId (  )  ,    results . getStats (  )  )  )  ;", "List < Column >    columns    =    results . getColumns (  )  ;", "if    ( columns    !  =    null )     {", "return   columns ;", "}", "client . advance (  )  ;", "}", "verify ( client . isFinished (  )  )  ;", "QueryStatusInfo   results    =    client . finalStatusInfo (  )  ;", "if    (  ( results . getError (  )  )     =  =    null )     {", "throw   new   SQLException ( String . format (  \" Query   has   no   columns    (  #  % s )  \"  ,    results . getId (  )  )  )  ;", "}", "throw    . resultsException ( results )  ;", "}", "METHOD_END"], "methodName": ["getColumns"], "fileName": "com.facebook.presto.jdbc.PrestoResultSet"}, {"methodBody": ["METHOD_START", "{", "Object   value    =    column ( columnIndex )  ;", "if    ( value    =  =    null )     {", "return   null ;", "}", "try    {", "return   new   Date (  . DATE _ FORMATTER . withZone ( localTimeZone )  . parseMillis ( String . valueOf ( value )  )  )  ;", "}    catch    ( IllegalArgumentException   e )     {", "throw   new   SQLException (  (  \" Invalid   date   from   server :     \"     +    value )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["getDate"], "fileName": "com.facebook.presto.jdbc.PrestoResultSet"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Integer >    map    =    new   HashMap <  >  (  )  ;", "for    ( int   i    =     0  ;    i    <     ( lumns . size (  )  )  ;    i +  +  )     {", "String   name    =    lumns . get ( i )  . getName (  )  . toLowerCase ( Locale . ENGLISH )  ;", "if    (  !  ( map . ntainsKey ( name )  )  )     {", "map . put ( name ,     ( i    +     1  )  )  ;", "}", "}", "return   ImmutableMap . pyOf ( map )  ;", "}", "METHOD_END"], "methodName": ["getFieldMap"], "fileName": "com.facebook.presto.jdbc.PrestoResultSet"}, {"methodBody": ["METHOD_START", "{", "Object   value    =    column ( columnIndex )  ;", "if    ( value    =  =    null )     {", "return   null ;", "}", "return   new   IntervalDayTime ( IntervalDayTime . parseMillis ( String . valueOf ( value )  )  )  ;", "}", "METHOD_END"], "methodName": ["getIntervalDayTime"], "fileName": "com.facebook.presto.jdbc.PrestoResultSet"}, {"methodBody": ["METHOD_START", "{", "Object   value    =    column ( columnIndex )  ;", "if    ( value    =  =    null )     {", "return   null ;", "}", "return   new   IntervalYearMonth ( IntervalYearMonth . parseMonths ( String . valueOf ( value )  )  )  ;", "}", "METHOD_END"], "methodName": ["getIntervalYearMonth"], "fileName": "com.facebook.presto.jdbc.PrestoResultSet"}, {"methodBody": ["METHOD_START", "{", "return   queryId ;", "}", "METHOD_END"], "methodName": ["getQueryId"], "fileName": "com.facebook.presto.jdbc.PrestoResultSet"}, {"methodBody": ["METHOD_START", "{", "return   QueryStats . create ( queryId ,    client . getStats (  )  )  ;", "}", "METHOD_END"], "methodName": ["getStats"], "fileName": "com.facebook.presto.jdbc.PrestoResultSet"}, {"methodBody": ["METHOD_START", "{", "Object   value    =    column ( columnIndex )  ;", "if    ( value    =  =    null )     {", "return   null ;", "}", "ColumnInfo   columnInfo    =    columnInfo ( columnIndex )  ;", "if    ( columnInfo . getColumnTypeName (  )  . equalsIgnoreCase (  \" time \"  )  )     {", "try    {", "return   new   Time (  . TIME _ FORMATTER . withZone ( localTimeZone )  . parseMillis ( String . valueOf ( value )  )  )  ;", "}    catch    ( IllegalArgumentException   e )     {", "throw   new   SQLException (  (  \" Invalid   time   from   server :     \"     +    value )  ,    e )  ;", "}", "}", "if    ( columnInfo . getColumnTypeName (  )  . equalsIgnoreCase (  \" time   with   time   zone \"  )  )     {", "try    {", "return   new   Time (  . TIME _ WITH _ TIME _ ZONE _ FORMATTER . parseMillis ( String . valueOf ( value )  )  )  ;", "}    catch    ( IllegalArgumentException   e )     {", "throw   new   SQLException (  (  \" Invalid   time   from   server :     \"     +    value )  ,    e )  ;", "}", "}", "throw   new   IllegalArgumentException (  (  \" Expected   column   to   be   a   time   type   but   is    \"     +     ( columnInfo . getColumnTypeName (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getTime"], "fileName": "com.facebook.presto.jdbc.PrestoResultSet"}, {"methodBody": ["METHOD_START", "{", "Object   value    =    column ( columnIndex )  ;", "if    ( value    =  =    null )     {", "return   null ;", "}", "ColumnInfo   columnInfo    =    columnInfo ( columnIndex )  ;", "if    ( columnInfo . getColumnTypeName (  )  . equalsIgnoreCase (  \" timestamp \"  )  )     {", "try    {", "return   new   Timestamp (  . TIMESTAMP _ FORMATTER . withZone ( localTimeZone )  . parseMillis ( String . valueOf ( value )  )  )  ;", "}    catch    ( IllegalArgumentException   e )     {", "throw   new   SQLException (  (  \" Invalid   timestamp   from   server :     \"     +    value )  ,    e )  ;", "}", "}", "if    ( columnInfo . getColumnTypeName (  )  . equalsIgnoreCase (  \" timestamp   with   time   zone \"  )  )     {", "try    {", "return   new   Timestamp (  . TIMESTAMP _ WITH _ TIME _ ZONE _ FORMATTER . parseMillis ( String . valueOf ( value )  )  )  ;", "}    catch    ( IllegalArgumentException   e )     {", "throw   new   SQLException (  (  \" Invalid   timestamp   from   server :     \"     +    value )  ,    e )  ;", "}", "}", "throw   new   IllegalArgumentException (  (  \" Expected   column   to   be   a   timestamp   type   but   is    \"     +     ( columnInfo . getColumnTypeName (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getTimestamp"], "fileName": "com.facebook.presto.jdbc.PrestoResultSet"}, {"methodBody": ["METHOD_START", "{", "QueryError   error    =    Objects . requireNonNull ( results . getError (  )  )  ;", "String   message    =    String . format (  \" Query   failed    (  #  % s )  :     % s \"  ,    results . getId (  )  ,    error . getMessage (  )  )  ;", "Throwable   cause    =     (  ( error . getFailureInfo (  )  )     =  =    null )     ?    null    :    error . getFailureInfo (  )  . toException (  )  ;", "return   new   SQLException ( message ,    error . getSqlState (  )  ,    error . getErrorCode (  )  ,    cause )  ;", "}", "METHOD_END"], "methodName": ["resultsException"], "fileName": "com.facebook.presto.jdbc.PrestoResultSet"}, {"methodBody": ["METHOD_START", "{", "if    ( value    =  =    null )     {", "return    0  ;", "}", "if    ( value   instanceof   Number )     {", "return    (  ( Number )     ( value )  )  ;", "}", "if    ( value   instanceof   Boolean )     {", "return    (  ( Boolean )     ( value )  )     ?     1     :     0  ;", "}", "throw   new   SQLException (  (  \" Value   is   not   a   number :     \"     +     ( value . getClass (  )  . getCanonicalName (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["toNumber"], "fileName": "com.facebook.presto.jdbc.PrestoResultSet"}, {"methodBody": ["METHOD_START", "{", "if    (  ( column    <  =     0  )     |  |     ( column    >     ( columnInfo . size (  )  )  )  )     {", "throw   new   SQLException (  (  \" Invalid   column   index :     \"     +    column )  )  ;", "}", "return   columnInfo . get (  ( column    -     1  )  )  ;", "}", "METHOD_END"], "methodName": ["column"], "fileName": "com.facebook.presto.jdbc.PrestoResultSetMetaData"}, {"methodBody": ["METHOD_START", "{", "connection (  )  ;", "}", "METHOD_END"], "methodName": ["checkOpen"], "fileName": "com.facebook.presto.jdbc.PrestoStatement"}, {"methodBody": ["METHOD_START", "{", "currentResult . set ( null )  ;", "currentUpdateCount . set (  (  -  1  )  )  ;", "currentUpdateType . set ( null )  ;", "}", "METHOD_END"], "methodName": ["clearCurrentResults"], "fileName": "com.facebook.presto.jdbc.PrestoStatement"}, {"methodBody": ["METHOD_START", "{", "progressCallback . set ( Optional . empty (  )  )  ;", "}", "METHOD_END"], "methodName": ["clearProgressMonitor"], "fileName": "com.facebook.presto.jdbc.PrestoStatement"}, {"methodBody": ["METHOD_START", "{", "ResultSet   resultSet    =    currentResult . getAndSet ( null )  ;", "if    ( resultSet    !  =    null )     {", "resultSet . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["closeResultSet"], "fileName": "com.facebook.presto.jdbc.PrestoStatement"}, {"methodBody": ["METHOD_START", "{", "PrestoConnection   connection    =    this . connection . get (  )  ;", "if    ( connection    =  =    null )     {", "throw   new   SQLException (  \"    is   closed \"  )  ;", "}", "if    ( connection . isClosed (  )  )     {", "throw   new   SQLException (  \" Connection   is   closed \"  )  ;", "}", "return   connection ;", "}", "METHOD_END"], "methodName": ["connection"], "fileName": "com.facebook.presto.jdbc.PrestoStatement"}, {"methodBody": ["METHOD_START", "{", "Builder < String ,    String >    sessionProperties    =    ImmutableMap . builder (  )  ;", "if    (  ( queryTimeoutSeconds . get (  )  )     >     0  )     {", "sessionProperties . put (  \" query _ max _ run _ time \"  ,     (  ( queryTimeoutSeconds . get (  )  )     +     \" s \"  )  )  ;", "}", "return   sessionProperties . build (  )  ;", "}", "METHOD_END"], "methodName": ["getStatementSessionProperties"], "fileName": "com.facebook.presto.jdbc.PrestoStatement"}, {"methodBody": ["METHOD_START", "{", "checkOpen (  )  ;", "return   currUpdateType . get (  )  ;", "}", "METHOD_END"], "methodName": ["getUpdateType"], "fileName": "com.facebook.presto.jdbc.PrestoStatement"}, {"methodBody": ["METHOD_START", "{", "clearCurrentResults (  )  ;", "checkOpen (  )  ;", "Client   client    =    null ;", "ResultSet   resultSet    =    null ;", "try    {", "client    =    connection (  )  . startQuery ( sql ,    getSessionProperties (  )  )  ;", "if    ( client . isFinished (  )  )     {", "QueryStatusInfo   finalStatusInfo    =    client . finalStatusInfo (  )  ;", "if    (  ( finalStatusInfo . getError (  )  )     !  =    null )     {", "throw   PrestoResultSet . resultsException ( finalStatusInfo )  ;", "}", "}", "executingClient . set ( client )  ;", "resultSet    =    new   PrestoResultSet ( client ,    maxRows . get (  )  ,    progressConsumer )  ;", "if    (  ( client . currentStatusInfo (  )  . getUpdateType (  )  )     =  =    null )     {", "currentResult . set ( resultSet )  ;", "return   true ;", "}", "while    ( resultSet . next (  )  )     {", "}", "connection (  )  . updateSession ( client )  ;", "Long   updateCount    =    client . finalStatusInfo (  )  . getUpdateCount (  )  ;", "currentUpdateCount . set (  ( updateCount    !  =    null    ?    updateCount    :     0  )  )  ;", "currentUpdateType . set ( client . finalStatusInfo (  )  . getUpdateType (  )  )  ;", "return   false ;", "}    catch    ( ClientException   e )     {", "throw   new   SQLException ( e . getMessage (  )  ,    e )  ;", "}    catch    ( RuntimeException   e )     {", "throw   new   SQLException (  \" Error   executing   query \"  ,    e )  ;", "}    finally    {", "executingClient . set ( null )  ;", "if    (  ( currentResult . get (  )  )     =  =    null )     {", "if    ( resultSet    !  =    null )     {", "resultSet . close (  )  ;", "}", "if    ( client    !  =    null )     {", "client . close (  )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["internalExecute"], "fileName": "com.facebook.presto.jdbc.PrestoStatement"}, {"methodBody": ["METHOD_START", "{", "progressCallback . set ( Optional . of ( Objects . requireNonNull ( progressMonitor ,     \" progressMonitor   is   null \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["setProgressMonitor"], "fileName": "com.facebook.presto.jdbc.PrestoStatement"}, {"methodBody": ["METHOD_START", "{", "return    (  ( direction    =  =     ( ResultSet . FETCH _ FORWARD )  )     |  |     ( direction    =  =     ( ResultSet . FETCH _ REVERSE )  )  )     |  |     ( direction    =  =     ( ResultSet . FETCH _ UNKNOWN )  )  ;", "}", "METHOD_END"], "methodName": ["validFetchDirection"], "fileName": "com.facebook.presto.jdbc.PrestoStatement"}, {"methodBody": ["METHOD_START", "{", "HttpUrl   url    =    HttpUrl . get ( server )  ;", "if    ( url    =  =    null )     {", "throw   new   ClientException (  (  \" Invalid   server   URL :     \"     +    server )  )  ;", "}", "url    =    url . newBuilder (  )  . encodedPath (  \"  / v 1  / info \"  )  . build (  )  ;", "Request   request    =    new   Request . Builder (  )  . url ( url )  . build (  )  ;", "JsonResponse < ServerInfo >    response    =    JsonResponse . execute (  . SERVER _ INFO _ CODEC ,    httpClient ,    request )  ;", "if    (  !  ( response . hasValue (  )  )  )     {", "throw   new   RuntimeException ( String . format (  \" Request   to    % s   failed :     % s    [ Error :     % s ]  \"  ,    server ,    response ,    response . getResponseBody (  )  )  )  ;", "}", "return   response . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["getServerInfo"], "fileName": "com.facebook.presto.jdbc.QueryExecutor"}, {"methodBody": ["METHOD_START", "{", "return   StatementClientFactory . newStatementClient ( httpClient ,    session ,    query )  ;", "}", "METHOD_END"], "methodName": ["startQuery"], "fileName": "com.facebook.presto.jdbc.QueryExecutor"}, {"methodBody": ["METHOD_START", "{", "return   new   QueryStats ( queryId ,    stats . getState (  )  ,    stats . isQueued (  )  ,    stats . isScheduled (  )  ,    stats . getNodes (  )  ,    stats . getTotalSplits (  )  ,    stats . getQueuedSplits (  )  ,    stats . getRunningSplits (  )  ,    stats . getCompletedSplits (  )  ,    stats . getUserTimeMillis (  )  ,    stats . getCpuTimeMillis (  )  ,    stats . getWallTimeMillis (  )  ,    stats . getQueuedTimeMillis (  )  ,    stats . getElapsedTimeMillis (  )  ,    stats . getProcessedRows (  )  ,    stats . getProcessedBytes (  )  ,    stats . getPeakMemoryBytes (  )  ,    Optional . ofNullable ( stats . getRootStage (  )  )  . map ( StageStats :  : create )  )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "com.facebook.presto.jdbc.QueryStats"}, {"methodBody": ["METHOD_START", "{", "return   completedSplits ;", "}", "METHOD_END"], "methodName": ["getCompletedSplits"], "fileName": "com.facebook.presto.jdbc.QueryStats"}, {"methodBody": ["METHOD_START", "{", "return   cpuTimeMillis ;", "}", "METHOD_END"], "methodName": ["getCpuTimeMillis"], "fileName": "com.facebook.presto.jdbc.QueryStats"}, {"methodBody": ["METHOD_START", "{", "return   elapsedTimeMillis ;", "}", "METHOD_END"], "methodName": ["getElapsedTimeMillis"], "fileName": "com.facebook.presto.jdbc.QueryStats"}, {"methodBody": ["METHOD_START", "{", "return   nodes ;", "}", "METHOD_END"], "methodName": ["getNodes"], "fileName": "com.facebook.presto.jdbc.QueryStats"}, {"methodBody": ["METHOD_START", "{", "return   peakMemoryBytes ;", "}", "METHOD_END"], "methodName": ["getPeakMemoryBytes"], "fileName": "com.facebook.presto.jdbc.QueryStats"}, {"methodBody": ["METHOD_START", "{", "return   processedBytes ;", "}", "METHOD_END"], "methodName": ["getProcessedBytes"], "fileName": "com.facebook.presto.jdbc.QueryStats"}, {"methodBody": ["METHOD_START", "{", "return   processedRows ;", "}", "METHOD_END"], "methodName": ["getProcessedRows"], "fileName": "com.facebook.presto.jdbc.QueryStats"}, {"methodBody": ["METHOD_START", "{", "if    (  (  !  ( scheduled )  )     |  |     (  ( totalSplits )     =  =     0  )  )     {", "return   OptionalDouble . empty (  )  ;", "}", "return   OptionalDouble . of ( Math . min (  1  0  0  ,     (  (  ( pletedSplits )     *     1  0  0  .  0  )     /     ( totalSplits )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getProgressPercentage"], "fileName": "com.facebook.presto.jdbc.QueryStats"}, {"methodBody": ["METHOD_START", "{", "return   queryId ;", "}", "METHOD_END"], "methodName": ["getQueryId"], "fileName": "com.facebook.presto.jdbc.QueryStats"}, {"methodBody": ["METHOD_START", "{", "return   queuedSplits ;", "}", "METHOD_END"], "methodName": ["getQueuedSplits"], "fileName": "com.facebook.presto.jdbc.QueryStats"}, {"methodBody": ["METHOD_START", "{", "return   queuedTimeMillis ;", "}", "METHOD_END"], "methodName": ["getQueuedTimeMillis"], "fileName": "com.facebook.presto.jdbc.QueryStats"}, {"methodBody": ["METHOD_START", "{", "return   rootStage ;", "}", "METHOD_END"], "methodName": ["getRootStage"], "fileName": "com.facebook.presto.jdbc.QueryStats"}, {"methodBody": ["METHOD_START", "{", "return   runningSplits ;", "}", "METHOD_END"], "methodName": ["getRunningSplits"], "fileName": "com.facebook.presto.jdbc.QueryStats"}, {"methodBody": ["METHOD_START", "{", "return   state ;", "}", "METHOD_END"], "methodName": ["getState"], "fileName": "com.facebook.presto.jdbc.QueryStats"}, {"methodBody": ["METHOD_START", "{", "return   totalSplits ;", "}", "METHOD_END"], "methodName": ["getTotalSplits"], "fileName": "com.facebook.presto.jdbc.QueryStats"}, {"methodBody": ["METHOD_START", "{", "return   userTimeMillis ;", "}", "METHOD_END"], "methodName": ["getUserTimeMillis"], "fileName": "com.facebook.presto.jdbc.QueryStats"}, {"methodBody": ["METHOD_START", "{", "return   wallTimeMillis ;", "}", "METHOD_END"], "methodName": ["getWallTimeMillis"], "fileName": "com.facebook.presto.jdbc.QueryStats"}, {"methodBody": ["METHOD_START", "{", "return   queued ;", "}", "METHOD_END"], "methodName": ["isQueued"], "fileName": "com.facebook.presto.jdbc.QueryStats"}, {"methodBody": ["METHOD_START", "{", "return   scheduled ;", "}", "METHOD_END"], "methodName": ["isScheduled"], "fileName": "com.facebook.presto.jdbc.QueryStats"}, {"methodBody": ["METHOD_START", "{", "return   new   StageStats ( stats . getStageId (  )  ,    stats . getState (  )  ,    stats . isDone (  )  ,    stats . getNodes (  )  ,    stats . getTotalSplits (  )  ,    stats . getQueuedSplits (  )  ,    stats . getRunningSplits (  )  ,    stats . getCompletedSplits (  )  ,    stats . getUserTimeMillis (  )  ,    stats . getCpuTimeMillis (  )  ,    stats . getWallTimeMillis (  )  ,    stats . getProcessedRows (  )  ,    stats . getProcessedBytes (  )  ,    stats . getSubStages (  )  . stream (  )  . map ( StageStats :  : create )  . collect ( Collectors . toList (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "com.facebook.presto.jdbc.StageStats"}, {"methodBody": ["METHOD_START", "{", "return   completedSplits ;", "}", "METHOD_END"], "methodName": ["getCompletedSplits"], "fileName": "com.facebook.presto.jdbc.StageStats"}, {"methodBody": ["METHOD_START", "{", "return   cpuTimeMillis ;", "}", "METHOD_END"], "methodName": ["getCpuTimeMillis"], "fileName": "com.facebook.presto.jdbc.StageStats"}, {"methodBody": ["METHOD_START", "{", "return   nodes ;", "}", "METHOD_END"], "methodName": ["getNodes"], "fileName": "com.facebook.presto.jdbc.StageStats"}, {"methodBody": ["METHOD_START", "{", "return   processedBytes ;", "}", "METHOD_END"], "methodName": ["getProcessedBytes"], "fileName": "com.facebook.presto.jdbc.StageStats"}, {"methodBody": ["METHOD_START", "{", "return   processedRows ;", "}", "METHOD_END"], "methodName": ["getProcessedRows"], "fileName": "com.facebook.presto.jdbc.StageStats"}, {"methodBody": ["METHOD_START", "{", "return   queuedSplits ;", "}", "METHOD_END"], "methodName": ["getQueuedSplits"], "fileName": "com.facebook.presto.jdbc.StageStats"}, {"methodBody": ["METHOD_START", "{", "return   runningSplits ;", "}", "METHOD_END"], "methodName": ["getRunningSplits"], "fileName": "com.facebook.presto.jdbc.StageStats"}, {"methodBody": ["METHOD_START", "{", "return   stageId ;", "}", "METHOD_END"], "methodName": ["getStageId"], "fileName": "com.facebook.presto.jdbc.StageStats"}, {"methodBody": ["METHOD_START", "{", "return   state ;", "}", "METHOD_END"], "methodName": ["getState"], "fileName": "com.facebook.presto.jdbc.StageStats"}, {"methodBody": ["METHOD_START", "{", "return   subStages ;", "}", "METHOD_END"], "methodName": ["getSubStages"], "fileName": "com.facebook.presto.jdbc.StageStats"}, {"methodBody": ["METHOD_START", "{", "return   totalSplits ;", "}", "METHOD_END"], "methodName": ["getTotalSplits"], "fileName": "com.facebook.presto.jdbc.StageStats"}, {"methodBody": ["METHOD_START", "{", "return   userTimeMillis ;", "}", "METHOD_END"], "methodName": ["getUserTimeMillis"], "fileName": "com.facebook.presto.jdbc.StageStats"}, {"methodBody": ["METHOD_START", "{", "return   wallTimeMillis ;", "}", "METHOD_END"], "methodName": ["getWallTimeMillis"], "fileName": "com.facebook.presto.jdbc.StageStats"}, {"methodBody": ["METHOD_START", "{", "return   done ;", "}", "METHOD_END"], "methodName": ["isDone"], "fileName": "com.facebook.presto.jdbc.StageStats"}, {"methodBody": ["METHOD_START", "{", "String   url    =    String . format (  \" jdbc : presto :  /  /  % s / hive / default \"  ,    server . getAddress (  )  )  ;", "return   DriverManager . get ( url ,     \" test \"  ,    null )  ;", "}", "METHOD_END"], "methodName": ["createConnection"], "fileName": "com.facebook.presto.jdbc.TestJdbcConnection"}, {"methodBody": ["METHOD_START", "{", "ImmutableSet . Builder < String >    set    =    ImmutableSet . builder (  )  ;", "try    ( Statement   statement    =    c . createStatement (  )  ; ResultSet   rs    =    statement . executeQuery (  \" SHOW   SESSION \"  )  )     {", "while    ( rs . next (  )  )     {", "set . add ( Joiner . on (  '  |  '  )  . join ( rs . getString (  1  )  ,    rs . getString (  2  )  ,    rs . getString (  3  )  )  )  ;", "}", "}", "return   set . build (  )  ;", "}", "METHOD_END"], "methodName": ["listSession"], "fileName": "com.facebook.presto.jdbc.TestJdbcConnection"}, {"methodBody": ["METHOD_START", "{", "ImmutableSet . Builder < String >    set    =    ImmutableSet . builder (  )  ;", "try    ( Statement   statement    =    c . createStatement (  )  ; ResultSet   rs    =    statement . executeQuery (  \" SHOW   TABLES \"  )  )     {", "while    ( rs . next (  )  )     {", "set . add ( rs . getString (  1  )  )  ;", "}", "}", "return   set . build (  )  ;", "}", "METHOD_END"], "methodName": ["listTables"], "fileName": "com.facebook.presto.jdbc.TestJdbcConnection"}, {"methodBody": ["METHOD_START", "{", "Logging . initialize (  )  ;", "server    =    new   TestingPrestoServer (  )  ;", "server . installPlugin ( new   HiveHadoop 2 Plugin (  )  )  ;", "server . createCatalog (  \" hive \"  ,     \" hive - hadoop 2  \"  ,    ImmutableMap .  < String ,    String > builder (  )  . put (  \" hive . metastore \"  ,     \" file \"  )  . put (  \" hive . metastore . catalog . dir \"  ,    server . getBaseDataDir (  )  . resolve (  \" hive \"  )  . toAbsolutePath (  )  . toString (  )  )  . put (  \" hive . security \"  ,     \" sql - standard \"  )  . build (  )  )  ;", "try    (    connection    =    create (  )  ; Statement   statement    =    connection . createStatement (  )  )     {", "statement . execute (  \" CREATE   SCHEMA   default \"  )  ;", "statement . execute (  \" CREATE   SCHEMA   fruit \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["setupServer"], "fileName": "com.facebook.presto.jdbc.TestJdbcConnection"}, {"methodBody": ["METHOD_START", "{", "TestPrestoDriver . closeQuietly ( server )  ;", "}", "METHOD_END"], "methodName": ["teardownServer"], "fileName": "com.facebook.presto.jdbc.TestJdbcConnection"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    createConnection (  )  )     {", "connection . setAutoCommit ( false )  ;", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "statement . execute (  \" CREATE   TABLE   test _ commit    ( x   bigint )  \"  )  ;", "}", "try    ( Connection   otherConnection    =    createConnection (  )  )     {", "assertThat (  . listTables ( otherConnection )  )  . doesNotContain (  \" test _ commit \"  )  ;", "}", "connection . commit (  )  ;", "}", "try    ( Connection   connection    =    createConnection (  )  )     {", "assertThat (  . listTables ( connection )  )  . contains (  \" test _ commit \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["testCommit"], "fileName": "com.facebook.presto.jdbc.TestJdbcConnection"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    createConnection (  )  )     {", "connection . setAutoCommit ( false )  ;", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "statement . execute (  \" CREATE   TABLE   test _ rollback    ( x   bigint )  \"  )  ;", "}", "try    ( Connection   otherConnection    =    createConnection (  )  )     {", "assertThat (  . listTables ( otherConnection )  )  . doesNotContain (  \" test _ rollback \"  )  ;", "}", "connection . rollback (  )  ;", "}", "try    ( Connection   connection    =    createConnection (  )  )     {", "assertThat (  . listTables ( connection )  )  . doesNotContain (  \" test _ rollback \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["testRollback"], "fileName": "com.facebook.presto.jdbc.TestJdbcConnection"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    createConnection (  )  )     {", "assertThat (  . listSession ( connection )  )  . contains (  \" distributed _ join | true | true \"  )  . contains (  \" exchange _ compression | false | false \"  )  ;", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "statement . execute (  \" SET   SESSION   distributed _ join    =    false \"  )  ;", "}", "assertThat (  . listSession ( connection )  )  . contains (  \" distributed _ join | false | true \"  )  . contains (  \" exchange _ compression | false | false \"  )  ;", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "statement . execute (  \" SET   SESSION   exchange _ compression    =    true \"  )  ;", "}", "assertThat (  . listSession ( connection )  )  . contains (  \" distributed _ join | false | true \"  )  . contains (  \" exchange _ compression | true | false \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["testSession"], "fileName": "com.facebook.presto.jdbc.TestJdbcConnection"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    createConnection (  )  )     {", "assertThat ( connection . getCatalog (  )  )  . isEqualTo (  \" hive \"  )  ;", "assertThat ( connection . getSchema (  )  )  . isEqualTo (  \" default \"  )  ;", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "statement . execute (  \" USE   fruit \"  )  ;", "}", "assertThat ( connection . getCatalog (  )  )  . isEqualTo (  \" hive \"  )  ;", "assertThat ( connection . getSchema (  )  )  . isEqualTo (  \" fruit \"  )  ;", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "statement . execute (  \" USE   system . runtime \"  )  ;", "}", "assertThat ( connection . getCatalog (  )  )  . isEqualTo (  \" system \"  )  ;", "assertThat ( connection . getSchema (  )  )  . isEqualTo (  \" runtime \"  )  ;", "assertThat (  . listTables ( connection )  )  . contains (  \" nodes \"  )  ;", "assertThat (  . listTables ( connection )  )  . contains (  \" queries \"  )  ;", "assertThat (  . listTables ( connection )  )  . contains (  \" tasks \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["testUse"], "fileName": "com.facebook.presto.jdbc.TestJdbcConnection"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( statement . getMaxRows (  )  ,    expectedLimit )  ;", "assertEquals ( statement . getLargeMaxRows (  )  ,    expectedLimit )  ;", "}", "METHOD_END"], "methodName": ["assertMaxRowsLimit"], "fileName": "com.facebook.presto.jdbc.TestJdbcResultSet"}, {"methodBody": ["METHOD_START", "{", "try    ( ResultSet   rs    =    statement . executeQuery (  \" SELECT    *    FROM    ( VALUES    (  1  )  ,     (  2  )  ,     (  3  )  ,     (  4  )  ,     (  5  )  ,     (  6  )  ,     (  7  )  )    AS   x    ( a )  \"  )  )     {", "assertEquals (  . countRows ( rs )  ,    expectedCount )  ;", "}", "}", "METHOD_END"], "methodName": ["assertMaxRowsResult"], "fileName": "com.facebook.presto.jdbc.TestJdbcResultSet"}, {"methodBody": ["METHOD_START", "{", "try    ( ResultSet   rs    =    statement . executeQuery (  (  \" SELECT    \"     +    expression )  )  )     {", "ResultSetMetaData   metadata    =    rs . getMetaData (  )  ;", "assertEquals ( metadata . getColumnCount (  )  ,     1  )  ;", "assertEquals ( metadata . getColumnType (  1  )  ,    expectedSqlType )  ;", "assertTrue ( rs . next (  )  )  ;", "assertion . accept ( rs ,     1  )  ;", "assertFalse ( rs . next (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkRepresentation"], "fileName": "com.facebook.presto.jdbc.TestJdbcResultSet"}, {"methodBody": ["METHOD_START", "{", "checkRepresentation ( expression ,    expectedSqlType ,     (    rs ,    column )     -  >    assertEquals ( rs . getObject ( column )  ,    expectedRepresentation )  )  ;", "}", "METHOD_END"], "methodName": ["checkRepresentation"], "fileName": "com.facebook.presto.jdbc.TestJdbcResultSet"}, {"methodBody": ["METHOD_START", "{", "long   count    =     0  ;", "while    ( rs . next (  )  )     {", "count +  +  ;", "}", "return   count ;", "}", "METHOD_END"], "methodName": ["countRows"], "fileName": "com.facebook.presto.jdbc.TestJdbcResultSet"}, {"methodBody": ["METHOD_START", "{", "String   url    =    String . format (  \" jdbc : presto :  /  /  % s \"  ,    server . getAddress (  )  )  ;", "return   DriverManager . getConnection ( url ,     \" test \"  ,    null )  ;", "}", "METHOD_END"], "methodName": ["createConnection"], "fileName": "com.facebook.presto.jdbc.TestJdbcResultSet"}, {"methodBody": ["METHOD_START", "{", "connection    =    createConnection (  )  ;", "statement    =    connection . createStatement (  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.jdbc.TestJdbcResultSet"}, {"methodBody": ["METHOD_START", "{", "Logging . initialize (  )  ;", "server    =    new   TestingPServer (  )  ;", "}", "METHOD_END"], "methodName": ["setupServer"], "fileName": "com.facebook.presto.jdbc.TestJdbcResultSet"}, {"methodBody": ["METHOD_START", "{", "TestPrestoDriver . closeQuietly ( statement )  ;", "TestPrestoDriver . closeQuietly ( connection )  ;", "}", "METHOD_END"], "methodName": ["teardown"], "fileName": "com.facebook.presto.jdbc.TestJdbcResultSet"}, {"methodBody": ["METHOD_START", "{", "TestPrestoDriver . closeQuietly ( server )  ;", "}", "METHOD_END"], "methodName": ["teardownServer"], "fileName": "com.facebook.presto.jdbc.TestJdbcResultSet"}, {"methodBody": ["METHOD_START", "{", "try    ( ResultSet   rs    =    statement . executeQuery (  \" SELECT    1  2  3    x ,     4  5  6    x \"  )  )     {", "ResultSetMetaData   metadata    =    rs . getMetaData (  )  ;", "assertEquals ( metadata . getColumnCount (  )  ,     2  )  ;", "assertEquals ( metadata . getColumnName (  1  )  ,     \" x \"  )  ;", "assertEquals ( metadata . getColumnName (  2  )  ,     \" x \"  )  ;", "assertTrue ( rs . next (  )  )  ;", "assertEquals ( rs . getLong (  1  )  ,     1  2  3 L )  ;", "assertEquals ( rs . getLong (  2  )  ,     4  5  6 L )  ;", "assertEquals ( rs . getLong (  \" x \"  )  ,     1  2  3 L )  ;", "}", "}", "METHOD_END"], "methodName": ["testDuplicateColumnLabels"], "fileName": "com.facebook.presto.jdbc.TestJdbcResultSet"}, {"methodBody": ["METHOD_START", "{", "long   limit    =     ( Integer . MAX _ VALUE )     *     1  0 L ;", "statement . setLargeMaxRows ( limit )  ;", "assertEquals ( statement . getLargeMaxRows (  )  ,    limit )  ;", "assertMaxRows (  7  )  ;", "}", "METHOD_END"], "methodName": ["testLargeMaxRowsLimitLargerThanResult"], "fileName": "com.facebook.presto.jdbc.TestJdbcResultSet"}, {"methodBody": ["METHOD_START", "{", "assertMaxRowsLimit (  0  )  ;", "statement . setLargeMaxRows (  4  )  ;", "assertMaxRowsLimit (  4  )  ;", "assertMaxRows (  4  )  ;", "}", "METHOD_END"], "methodName": ["testLargeMaxRowsLimited"], "fileName": "com.facebook.presto.jdbc.TestJdbcResultSet"}, {"methodBody": ["METHOD_START", "{", "assertMaxRowsLimit (  0  )  ;", "statement . setLargeMaxRows (  0  )  ;", "assertMaxRowsLimit (  0  )  ;", "assertMaxRows (  7  )  ;", "}", "METHOD_END"], "methodName": ["testLargeMaxRowsUnlimited"], "fileName": "com.facebook.presto.jdbc.TestJdbcResultSet"}, {"methodBody": ["METHOD_START", "{", "statement . setLargeMaxRows (  (  ( Integer . MAX _ VALUE )     *     1  0 L )  )  ;", "statement . getMaxRows (  )  ;", "}", "METHOD_END"], "methodName": ["testMaxRowsExceedsLimit"], "fileName": "com.facebook.presto.jdbc.TestJdbcResultSet"}, {"methodBody": ["METHOD_START", "{", "assertMaxRowsLimit (  0  )  ;", "statement . setMaxRows (  1  0  )  ;", "assertMaxRowsLimit (  1  0  )  ;", "assertMaxRows (  7  )  ;", "}", "METHOD_END"], "methodName": ["testMaxRowsLimitLargerThanResult"], "fileName": "com.facebook.presto.jdbc.TestJdbcResultSet"}, {"methodBody": ["METHOD_START", "{", "assertMaxRowsLimit (  0  )  ;", "statement . setMaxRows (  4  )  ;", "assertMaxRowsLimit (  4  )  ;", "assertMaxRows (  4  )  ;", "}", "METHOD_END"], "methodName": ["testMaxRowsLimited"], "fileName": "com.facebook.presto.jdbc.TestJdbcResultSet"}, {"methodBody": ["METHOD_START", "{", "assertMaxRowsLimit (  0  )  ;", "statement . setMaxRows (  0  )  ;", "assertMaxRowsLimit (  0  )  ;", "assertMaxRows (  7  )  ;", "}", "METHOD_END"], "methodName": ["testMaxRowsUnlimited"], "fileName": "com.facebook.presto.jdbc.TestJdbcResultSet"}, {"methodBody": ["METHOD_START", "{", "assertMaxRowsLimit (  0  )  ;", "assertMaxRows (  7  )  ;", "}", "METHOD_END"], "methodName": ["testMaxRowsUnset"], "fileName": "com.facebook.presto.jdbc.TestJdbcResultSet"}, {"methodBody": ["METHOD_START", "{", "checkRepresentation (  \"  1  2  3  \"  ,    Types . INTEGER ,     1  2  3  )  ;", "checkRepresentation (  \"  1  2  3  0  0  0  0  0  0  0  0  \"  ,    Types . BIGINT ,     1  2  3  0  0  0  0  0  0  0  0 L )  ;", "checkRepresentation (  \" REAL    '  1  2  3  .  4  5  '  \"  ,    Types . REAL ,     1  2  3  .  4  5 F )  ;", "checkRepresentation (  \"  1 e -  1  \"  ,    Types . DOUBLE ,     0  .  1  )  ;", "checkRepresentation (  \"  1  .  0 E 0     /     0  .  0 E 0  \"  ,    Types . DOUBLE ,    Double . POSITIVE _ INFINITY )  ;", "checkRepresentation (  \"  0  .  0 E 0     /     0  .  0 E 0  \"  ,    Types . DOUBLE ,    Double . NaN )  ;", "checkRepresentation (  \"  0  .  1  \"  ,    Types . DECIMAL ,    new   BigDecimal (  \"  0  .  1  \"  )  )  ;", "checkRepresentation (  \" true \"  ,    Types . BOOLEAN ,    true )  ;", "checkRepresentation (  \"  ' hello '  \"  ,    Types . LONGNVARCHAR ,     \" hello \"  )  ;", "checkRepresentation (  \" cast (  ' foo '    as   char (  5  )  )  \"  ,    Types . CHAR ,     \" foo       \"  )  ;", "checkRepresentation (  \" ARRAY [  1  ,     2  ]  \"  ,    Types . ARRAY ,     (    rs ,    column )     -  >    assertEquals ( rs . getArray ( column )  . getArray (  )  ,    new   int [  ]  {     1  ,     2     }  )  )  ;", "checkRepresentation (  \" DECIMAL    '  0  .  1  '  \"  ,    Types . DECIMAL ,    new   BigDecimal (  \"  0  .  1  \"  )  )  ;", "checkRepresentation (  \" DATE    '  2  0  1  8  -  0  2  -  1  3  '  \"  ,    Types . DATE ,     (    rs ,    column )     -  >     {", "assertEquals ( rs . getObject ( column )  ,    Date . valueOf ( LocalDate . of (  2  0  1  8  ,     2  ,     1  3  )  )  )  ;", "assertEquals ( rs . getDate ( column )  ,    Date . valueOf ( LocalDate . of (  2  0  1  8  ,     2  ,     1  3  )  )  )  ;", "assertThrows ( IllegalArgumentException . class ,     (  )     -  >    rs . getTime ( column )  )  ;", "assertThrows ( IllegalArgumentException . class ,     (  )     -  >    rs . getTimestamp ( column )  )  ;", "}  )  ;", "checkRepresentation (  \" TIME    '  0  9  :  3  9  :  0  5  '  \"  ,    Types . TIME ,     (    rs ,    column )     -  >     {", "assertEquals ( rs . getObject ( column )  ,    Time . valueOf ( LocalTime . of (  9  ,     3  9  ,     5  )  )  )  ;", "assertThrows (  (  )     -  >    rs . getDate ( column )  )  ;", "assertEquals ( rs . getTime ( column )  ,    Time . valueOf ( LocalTime . of (  9  ,     3  9  ,     5  )  )  )  ;", "assertThrows (  (  )     -  >    rs . getTimestamp ( column )  )  ;", "}  )  ;", "checkRepresentation (  \" TIME    '  0  9  :  3  9  :  0  7     +  0  1  :  0  0  '  \"  ,    Types . TIME ,     (    rs ,    column )     -  >     {", "assertEquals ( rs . getObject ( column )  ,    Time . valueOf ( LocalTime . of (  1  4  ,     9  ,     7  )  )  )  ;", "assertThrows (  (  )     -  >    rs . getDate ( column )  )  ;", "assertEquals ( rs . getTime ( column )  ,    Time . valueOf ( LocalTime . of (  1  4  ,     9  ,     7  )  )  )  ;", "assertThrows (  (  )     -  >    rs . getTimestamp ( column )  )  ;", "}  )  ;", "checkRepresentation (  \" TIMESTAMP    '  2  0  1  8  -  0  2  -  1  3     1  3  :  1  4  :  1  5  .  1  2  3  '  \"  ,    Types . TIMESTAMP ,     (    rs ,    column )     -  >     {", "assertEquals ( rs . getObject ( column )  ,    Timestamp . valueOf ( LocalDateTime . of (  2  0  1  8  ,     2  ,     1  3  ,     1  3  ,     1  4  ,     1  5  ,     1  2  3  0  0  0  0  0  0  )  )  )  ;", "assertThrows (  (  )     -  >    rs . getDate ( column )  )  ;", "assertThrows (  (  )     -  >    rs . getTime ( column )  )  ;", "assertEquals ( rs . getTimestamp ( column )  ,    Timestamp . valueOf ( LocalDateTime . of (  2  0  1  8  ,     2  ,     1  3  ,     1  3  ,     1  4  ,     1  5  ,     1  2  3  0  0  0  0  0  0  )  )  )  ;", "}  )  ;", "checkRepresentation (  \" TIMESTAMP    '  2  0  1  8  -  0  2  -  1  3     1  3  :  1  4  :  1  5  .  2  2  7    Europe / Warsaw '  \"  ,    Types . TIMESTAMP ,     (    rs ,    column )     -  >     {", "assertEquals ( rs . getObject ( column )  ,    Timestamp . valueOf ( LocalDateTime . of (  2  0  1  8  ,     2  ,     1  3  ,     1  7  ,     5  9  ,     1  5  ,     2  2  7  0  0  0  0  0  0  )  )  )  ;", "assertThrows (  (  )     -  >    rs . getDate ( column )  )  ;", "assertThrows (  (  )     -  >    rs . getTime ( column )  )  ;", "assertEquals ( rs . getTimestamp ( column )  ,    Timestamp . valueOf ( LocalDateTime . of (  2  0  1  8  ,     2  ,     1  3  ,     1  7  ,     5  9  ,     1  5  ,     2  2  7  0  0  0  0  0  0  )  )  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["testObjectTypes"], "fileName": "com.facebook.presto.jdbc.TestJdbcResultSet"}, {"methodBody": ["METHOD_START", "{", "try    ( PrestoResultSet   rs    =     (  ( PrestoResultSet )     ( statement . executeQuery (  \" SELECT    1  2  3    x ,     4  5  6    x \"  )  )  )  )     {", "assertNotNull ( rs . getStats (  )  )  ;", "assertTrue ( rs . next (  )  )  ;", "assertNotNull ( rs . getStats (  )  )  ;", "assertFalse ( rs . next (  )  )  ;", "assertNotNull ( rs . getStats (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testStatsExtraction"], "fileName": "com.facebook.presto.jdbc.TestJdbcResultSet"}, {"methodBody": ["METHOD_START", "{", "String   message    =     (  \"    of    \"     +    typeName )     +     \"  :     \"  ;", "assertEquals ( rs . getObject (  \" TYPE _ NAME \"  )  ,    typeName ,     (  \" TYPE _ NAME \"     +    message )  )  ;", "assertEquals ( rs . getObject (  \" DATA _ TYPE \"  )  ,     (  ( long )     ( dataType )  )  ,     (  \" DATA _ TYPE \"     +    message )  )  ;", "assertEquals ( rs . getObject (  \" PRECISION \"  )  ,    precision ,     (  \" PRECISION \"     +    message )  )  ;", "assertEquals ( rs . getObject (  \" LITERAL _ PREFIX \"  )  ,    null ,     (  \" LITERAL _ PREFIX \"     +    message )  )  ;", "assertEquals ( rs . getObject (  \" LITERAL _ SUFFIX \"  )  ,    null ,     (  \" LITERAL _ SUFFIX \"     +    message )  )  ;", "assertEquals ( rs . getObject (  \" CREATE _ PARAMS \"  )  ,    null ,     (  \" CREATE _ PARAMS \"     +    message )  )  ;", "assertEquals ( rs . getObject (  \" NULLABLE \"  )  ,     (  ( long )     (  . typeNullable )  )  ,     (  \" NULLABLE \"     +    message )  )  ;", "assertEquals ( rs . getObject (  \" CASE _ SENSITIVE \"  )  ,    false ,     (  \" CASE _ SENSITIVE \"     +    message )  )  ;", "assertEquals ( rs . getObject (  \" SEARCHABLE \"  )  ,     (  ( long )     (  . typeSearchable )  )  ,     (  \" SEARCHABLE \"     +    message )  )  ;", "assertEquals ( rs . getObject (  \" UNSIGNED _ ATTRIBUTE \"  )  ,    null ,     (  \" UNSIGNED _ ATTRIBUTE \"     +    message )  )  ;", "assertEquals ( rs . getObject (  \" FIXED _ PREC _ SCALE \"  )  ,    false ,     (  \" FIXED _ PREC _ SCALE \"     +    message )  )  ;", "assertEquals ( rs . getObject (  \" AUTO _ INCREMENT \"  )  ,    null ,     (  \" AUTO _ INCREMENT \"     +    message )  )  ;", "assertEquals ( rs . getObject (  \" LOCAL _ TYPE _ NAME \"  )  ,    null ,     (  \" LOCAL _ TYPE _ NAME \"     +    message )  )  ;", "assertEquals ( rs . getObject (  \" MINIMUM _ SCALE \"  )  ,     0 L ,     (  \" MINIMUM _ SCALE \"     +    message )  )  ;", "assertEquals ( rs . getObject (  \" MAXIMUM _ SCALE \"  )  ,     0 L ,     (  \" MAXIMUM _ SCALE \"     +    message )  )  ;", "assertEquals ( rs . getObject (  \" SQL _ DATA _ TYPE \"  )  ,    null ,     (  \" SQL _ DATA _ TYPE \"     +    message )  )  ;", "assertEquals ( rs . getObject (  \" SQL _ DATETIME _ SUB \"  )  ,    null ,     (  \" SQL _ DATETIME _ SUB \"     +    message )  )  ;", "assertEquals ( rs . getObject (  \" NUM _ PREC _ RADIX \"  )  ,    numPrecRadix ,     (  \" NUM _ PREC _ RADIX \"     +    message )  )  ;", "}", "METHOD_END"], "methodName": ["assertColumnSpec"], "fileName": "com.facebook.presto.jdbc.TestPrestoDatabaseMetaData"}, {"methodBody": ["METHOD_START", "{", "Set < QueryId >    queryIdsBefore    =    server . getQueryManager (  )  . getAllQueryInfo (  )  . stream (  )  . map ( QueryInfo :  : getQueryId )  . collect ( toImmutableSet (  )  )  ;", "action . call (  )  ;", "return   server . getQueryManager (  )  . getAllQueryInfo (  )  . stream (  )  . filter (  (    queryInfo )     -  >     !  ( queryIdsBefore . contains ( queryInfo . getQueryId (  )  )  )  )  . map ( QueryInfo :  : getQuery )  . collect ( toImmutableSet (  )  )  ;", "}", "METHOD_END"], "methodName": ["captureQueries"], "fileName": "com.facebook.presto.jdbc.TestPrestoDatabaseMetaData"}, {"methodBody": ["METHOD_START", "{", "String   url    =    String . format (  \" jdbc : presto :  /  /  % s \"  ,    server . getAddress (  )  )  ;", "return   DriverManager . getConnection ( url ,     \" test \"  ,    null )  ;", "}", "METHOD_END"], "methodName": ["createConnection"], "fileName": "com.facebook.presto.jdbc.TestPrestoDatabaseMetaData"}, {"methodBody": ["METHOD_START", "{", "connection    =    createConnection (  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.jdbc.TestPrestoDatabaseMetaData"}, {"methodBody": ["METHOD_START", "{", "Logging . initialize (  )  ;", "server    =    new   TestingServer (  )  ;", "}", "METHOD_END"], "methodName": ["setupServer"], "fileName": "com.facebook.presto.jdbc.TestPrestoDatabaseMetaData"}, {"methodBody": ["METHOD_START", "{", "TestPrestoDriver . closeQuietly ( connection )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.jdbc.TestPrestoDatabaseMetaData"}, {"methodBody": ["METHOD_START", "{", "server . close (  )  ;", "}", "METHOD_END"], "methodName": ["tearDownServer"], "fileName": "com.facebook.presto.jdbc.TestPrestoDatabaseMetaData"}, {"methodBody": ["METHOD_START", "{", "DatabaseMetaData   metaData    =    connection . getMetaData (  )  ;", "ResultSet   typeInfo    =    metaData . getTypeInfo (  )  ;", "while    ( typeInfo . next (  )  )     {", "int   jdbcType    =    typeInfo . getInt (  \" DATA _ TYPE \"  )  ;", "switch    ( jdbcType )     {", "case   Types . BIGINT    :", ". assertColumnSpec ( typeInfo ,    Types . BIGINT ,     1  9 L ,     1  0 L ,     \" bigint \"  )  ;", "break ;", "case   Types . BOOLEAN    :", ". assertColumnSpec ( typeInfo ,    Types . BOOLEAN ,    null ,    null ,     \" boolean \"  )  ;", "break ;", "case   Types . INTEGER    :", ". assertColumnSpec ( typeInfo ,    Types . INTEGER ,     1  0 L ,     1  0 L ,     \" integer \"  )  ;", "break ;", "case   Types . DECIMAL    :", ". assertColumnSpec ( typeInfo ,    Types . DECIMAL ,     3  8 L ,     1  0 L ,     \" decimal \"  )  ;", "break ;", "case   Types . VARCHAR    :", ". assertColumnSpec ( typeInfo ,    Types . VARCHAR ,    null ,    null ,     \" varchar \"  )  ;", "break ;", "case   Types . TIMESTAMP    :", ". assertColumnSpec ( typeInfo ,    Types . TIMESTAMP ,     2  3 L ,    null ,     \" timestamp \"  )  ;", "break ;", "case   Types . DOUBLE    :", ". assertColumnSpec ( typeInfo ,    Types . DOUBLE ,     5  3 L ,     2 L ,     \" double \"  )  ;", "break ;", "}", "}", "}", "METHOD_END"], "methodName": ["testGetTypeInfo"], "fileName": "com.facebook.presto.jdbc.TestPrestoDatabaseMetaData"}, {"methodBody": ["METHOD_START", "{", "DatabaseMetaData   metaData    =    connection . getMetaData (  )  ;", "Set < String >    queries    =    captureQueries (  (  )     -  >     {", "String   schemaPattern    =     (  \" defau \"     +     ( metaData . getSearchStringEscape (  )  )  )     +     \"  _ t \"  ;", "try    ( ResultSet   resultSet    =    metaData . getColumns (  \" blackhole \"  ,    schemaPattern ,    null ,    null )  )     {", "assertFalse ( resultSet . next (  )  ,     \" There   should   be   no   results \"  )  ;", "}", "return   null ;", "}  )  ;", "assertEquals ( queries . size (  )  ,     1  ,     (  \" Expected   exactly   one   query ,    got    \"     +     ( queries . size (  )  )  )  )  ;", "String   query    =    getOnlyElement ( queries )  ;", "Assertions . assertContains ( query ,     \"  _ t '    ESCAPE    '  \"  ,     \" Metadata   query   does   not   contain   ESCAPE \"  )  ;", "}", "METHOD_END"], "methodName": ["testPassEscapeInMetaDataQuery"], "fileName": "com.facebook.presto.jdbc.TestPrestoDatabaseMetaData"}, {"methodBody": ["METHOD_START", "{", "return   elements ;", "}", "METHOD_END"], "methodName": ["array"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "ResultSetMetaData   metadata    =    rs . getMetaData (  )  ;", "assertEquals ( metadata . getColumnCount (  )  ,     2  4  )  ;", "assertEquals ( metadata . getColumnLabel (  1  )  ,     \" TABLE _ CAT \"  )  ;", "assertEquals ( metadata . getColumnType (  1  )  ,    Types . LONGNVARCHAR )  ;", "assertEquals ( metadata . getColumnLabel (  2  )  ,     \" TABLE _ SCHEM \"  )  ;", "assertEquals ( metadata . getColumnType (  2  )  ,    Types . LONGNVARCHAR )  ;", "assertEquals ( metadata . getColumnLabel (  3  )  ,     \" TABLE _ NAME \"  )  ;", "assertEquals ( metadata . getColumnType (  3  )  ,    Types . LONGNVARCHAR )  ;", "assertEquals ( metadata . getColumnLabel (  4  )  ,     \" COLUMN _ NAME \"  )  ;", "assertEquals ( metadata . getColumnType (  4  )  ,    Types . LONGNVARCHAR )  ;", "assertEquals ( metadata . getColumnLabel (  5  )  ,     \" DATA _ TYPE \"  )  ;", "assertEquals ( metadata . getColumnType (  5  )  ,    Types . BIGINT )  ;", "assertEquals ( metadata . getColumnLabel (  6  )  ,     \" TYPE _ NAME \"  )  ;", "assertEquals ( metadata . getColumnType (  6  )  ,    Types . LONGNVARCHAR )  ;", "assertEquals ( metadata . getColumnLabel (  7  )  ,     \" COLUMN _ SIZE \"  )  ;", "assertEquals ( metadata . getColumnType (  7  )  ,    Types . BIGINT )  ;", "assertEquals ( metadata . getColumnLabel (  8  )  ,     \" BUFFER _ LENGTH \"  )  ;", "assertEquals ( metadata . getColumnType (  8  )  ,    Types . BIGINT )  ;", "assertEquals ( metadata . getColumnLabel (  9  )  ,     \" DECIMAL _ DIGITS \"  )  ;", "assertEquals ( metadata . getColumnType (  9  )  ,    Types . BIGINT )  ;", "assertEquals ( metadata . getColumnLabel (  1  0  )  ,     \" NUM _ PREC _ RADIX \"  )  ;", "assertEquals ( metadata . getColumnType (  1  0  )  ,    Types . BIGINT )  ;", "assertEquals ( metadata . getColumnLabel (  1  1  )  ,     \" NULLABLE \"  )  ;", "assertEquals ( metadata . getColumnType (  1  1  )  ,    Types . BIGINT )  ;", "assertEquals ( metadata . getColumnLabel (  1  2  )  ,     \" REMARKS \"  )  ;", "assertEquals ( metadata . getColumnType (  1  2  )  ,    Types . LONGNVARCHAR )  ;", "assertEquals ( metadata . getColumnLabel (  1  3  )  ,     \" COLUMN _ DEF \"  )  ;", "assertEquals ( metadata . getColumnType (  1  3  )  ,    Types . LONGNVARCHAR )  ;", "assertEquals ( metadata . getColumnLabel (  1  4  )  ,     \" SQL _ DATA _ TYPE \"  )  ;", "assertEquals ( metadata . getColumnType (  1  4  )  ,    Types . BIGINT )  ;", "assertEquals ( metadata . getColumnLabel (  1  5  )  ,     \" SQL _ DATETIME _ SUB \"  )  ;", "assertEquals ( metadata . getColumnType (  1  5  )  ,    Types . BIGINT )  ;", "assertEquals ( metadata . getColumnLabel (  1  6  )  ,     \" CHAR _ OCTET _ LENGTH \"  )  ;", "assertEquals ( metadata . getColumnType (  1  6  )  ,    Types . BIGINT )  ;", "assertEquals ( metadata . getColumnLabel (  1  7  )  ,     \" ORDINAL _ POSITION \"  )  ;", "assertEquals ( metadata . getColumnType (  1  7  )  ,    Types . BIGINT )  ;", "assertEquals ( metadata . getColumnLabel (  1  8  )  ,     \" IS _ NULLABLE \"  )  ;", "assertEquals ( metadata . getColumnType (  1  8  )  ,    Types . LONGNVARCHAR )  ;", "assertEquals ( metadata . getColumnLabel (  1  9  )  ,     \" SCOPE _ CATALOG \"  )  ;", "assertEquals ( metadata . getColumnType (  1  9  )  ,    Types . LONGNVARCHAR )  ;", "assertEquals ( metadata . getColumnLabel (  2  0  )  ,     \" SCOPE _ SCHEMA \"  )  ;", "assertEquals ( metadata . getColumnType (  2  0  )  ,    Types . LONGNVARCHAR )  ;", "assertEquals ( metadata . getColumnLabel (  2  1  )  ,     \" SCOPE _ TABLE \"  )  ;", "assertEquals ( metadata . getColumnType (  2  1  )  ,    Types . LONGNVARCHAR )  ;", "assertEquals ( metadata . getColumnLabel (  2  2  )  ,     \" SOURCE _ DATA _ TYPE \"  )  ;", "assertEquals ( metadata . getColumnType (  2  2  )  ,    Types . BIGINT )  ;", "assertEquals ( metadata . getColumnLabel (  2  3  )  ,     \" IS _ AUTOINCREMENT \"  )  ;", "assertEquals ( metadata . getColumnType (  2  3  )  ,    Types . LONGNVARCHAR )  ;", "assertEquals ( metadata . getColumnLabel (  2  4  )  ,     \" IS _ GENERATEDCOLUMN \"  )  ;", "assertEquals ( metadata . getColumnType (  2  4  )  ,    Types . LONGNVARCHAR )  ;", "}", "METHOD_END"], "methodName": ["assertColumnMetadata"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "String   message    =     (  \"    of    \"     +     ( type . getDisplayName (  )  )  )     +     \"  :     \"  ;", "assertTrue ( rs . next (  )  )  ;", "assertEquals ( rs . getObject (  \" DATA _ TYPE \"  )  ,     (  ( long )     ( Type )  )  ,     (  \" DATA _ TYPE \"     +    message )  )  ;", "assertEquals ( rs . getObject (  \" COLUMN _ SIZE \"  )  ,    columnSize ,     (  \" COLUMN _ SIZE \"     +    message )  )  ;", "assertEquals ( rs . getObject (  \" NUM _ PREC _ RADIX \"  )  ,    numPrecRadix ,     (  \" NUM _ PREC _ RADIX \"     +    message )  )  ;", "assertEquals ( rs . getObject (  \" DECIMAL _ DIGITS \"  )  ,    decimalDigits ,     (  \" DECIMAL _ DIGITS \"     +    message )  )  ;", "assertEquals ( rs . getObject (  \" CHAR _ OCTET _ LENGTH \"  )  ,    charOctetLength ,     (  \" CHAR _ OCTET _ LENGTH \"     +    message )  )  ;", "}", "METHOD_END"], "methodName": ["assertColumnSpec"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "List < List < Object >  >    data    =    TestPrestoDriver . readRows ( rs )  ;", "assertEquals ( data . size (  )  ,    expectedSchemas . size (  )  )  ;", "for    ( List < Object >    row    :    data )     {", "assertTrue ( expectedSchemas . contains ( TestPrestoDriver . list (  (  ( String )     ( row . get (  1  )  )  )  ,     (  ( String )     ( row . get (  0  )  )  )  )  )  )  ;", "}", "ResultSetMetaData   metadata    =    rs . getMetaData (  )  ;", "assertEquals ( metadata . getColumnCount (  )  ,     2  )  ;", "assertEquals ( metadata . getColumnLabel (  1  )  ,     \" TABLE _ SCHEM \"  )  ;", "assertEquals ( metadata . getColumnType (  1  )  ,    Types . LONGNVARCHAR )  ;", "assertEquals ( metadata . getColumnLabel (  2  )  ,     \" TABLE _ CATALOG \"  )  ;", "assertEquals ( metadata . getColumnType (  2  )  ,    Types . LONGNVARCHAR )  ;", "}", "METHOD_END"], "methodName": ["assertGetSchemasResult"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "ResultSetMetaData   metadata    =    rs . getMetaData (  )  ;", "assertEquals ( metadata . getColumnCount (  )  ,     1  0  )  ;", "assertEquals ( metadata . getColumnLabel (  1  )  ,     \" TABLE _ CAT \"  )  ;", "assertEquals ( metadata . getColumnType (  1  )  ,    Types . LONGNVARCHAR )  ;", "assertEquals ( metadata . getColumnLabel (  2  )  ,     \" TABLE _ SCHEM \"  )  ;", "assertEquals ( metadata . getColumnType (  2  )  ,    Types . LONGNVARCHAR )  ;", "assertEquals ( metadata . getColumnLabel (  3  )  ,     \" TABLE _ NAME \"  )  ;", "assertEquals ( metadata . getColumnType (  3  )  ,    Types . LONGNVARCHAR )  ;", "assertEquals ( metadata . getColumnLabel (  4  )  ,     \" TABLE _ TYPE \"  )  ;", "assertEquals ( metadata . getColumnType (  4  )  ,    Types . LONGNVARCHAR )  ;", "assertEquals ( metadata . getColumnLabel (  5  )  ,     \" REMARKS \"  )  ;", "assertEquals ( metadata . getColumnType (  5  )  ,    Types . LONGNVARCHAR )  ;", "assertEquals ( metadata . getColumnLabel (  6  )  ,     \" TYPE _ CAT \"  )  ;", "assertEquals ( metadata . getColumnType (  6  )  ,    Types . LONGNVARCHAR )  ;", "assertEquals ( metadata . getColumnLabel (  7  )  ,     \" TYPE _ SCHEM \"  )  ;", "assertEquals ( metadata . getColumnType (  7  )  ,    Types . LONGNVARCHAR )  ;", "assertEquals ( metadata . getColumnLabel (  8  )  ,     \" TYPE _ NAME \"  )  ;", "assertEquals ( metadata . getColumnType (  8  )  ,    Types . LONGNVARCHAR )  ;", "assertEquals ( metadata . getColumnLabel (  9  )  ,     \" SELF _ REFERENCING _ COL _ NAME \"  )  ;", "assertEquals ( metadata . getColumnType (  9  )  ,    Types . LONGNVARCHAR )  ;", "assertEquals ( metadata . getColumnLabel (  1  0  )  ,     \" REF _ GENERATION \"  )  ;", "assertEquals ( metadata . getColumnType (  1  0  )  ,    Types . LONGNVARCHAR )  ;", "}", "METHOD_END"], "methodName": ["assertTableMetadata"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "try    {", "closeable . close (  )  ;", "}    catch    ( Exption   ignored )     {", "}", "}", "METHOD_END"], "methodName": ["closeQuietly"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "String   url    =    String . format (  \" jdbc : presto :  /  /  % s \"  ,    server . getAddress (  )  )  ;", "return   DriverManager . getConnection ( url ,     \" test \"  ,    null )  ;", "}", "METHOD_END"], "methodName": ["createConnection"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "String   url    =    String . format (  \" jdbc : presto :  /  /  % s /  % s \"  ,    server . getAddress (  )  ,    catalog )  ;", "return   DriverManager . getConnection ( url ,     \" test \"  ,    null )  ;", "}", "METHOD_END"], "methodName": ["createConnection"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "String   url    =    String . format (  \" jdbc : presto :  /  /  % s /  % s /  % s \"  ,    server . getAddress (  )  ,    catalog ,    schema )  ;", "return   DriverManager . getConnection ( url ,     \" test \"  ,    null )  ;", "}", "METHOD_END"], "methodName": ["createConnection"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "String   sql    =    String . format (  \" SELECT   state   FROM   system . runtime . queries   WHERE   regexp _ like ( query ,     '  % s $  '  )     /  *     *  /  \"  ,    Pattern . quote ( text )  )  ;", "try    ( Connection   connection    =    createConnection (  )  ; Statement   statement    =    connection . createStatement (  )  ; ResultSet   ultSet    =    statement . executeQuery ( sql )  )     {", "if    (  !  ( ultSet . next (  )  )  )     {", "return   Optional . empty (  )  ;", "}", "QueryState   state    =    QueryState . valueOf ( Objects . requireNonNull ( ultSet . getString (  1  )  )  )  ;", "assertFalse ( ultSet . next (  )  ,     \" Found   multiple   queries \"  )  ;", "return   Optional . of ( state )  ;", "}", "}", "METHOD_END"], "methodName": ["findQueryState"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "String   sql    =    String . format (  \" SELECT   state   FROM   system . runtime . queries   WHERE   query _ id    =     '  % s '  \"  ,    queryId )  ;", "try    ( Connection   connection    =    createConnection (  )  ; Statement   statement    =    connection . createStatement (  )  ; ResultSet   ultSet    =    statement . executeQuery ( sql )  )     {", "assertTrue ( ultSet . next (  )  ,     \" Query   was   not   found \"  )  ;", "return   QueryState . valueOf ( Objects . requireNonNull ( ultSet . getString (  1  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getQueryState"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "return   TestPrestoDriver . list ( TestPrestoDriver . TEST _ CATALOG ,    schema ,    table ,     \" TABLE \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ;", "}", "METHOD_END"], "methodName": ["getTablesRow"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "return   Arrays . asList ( elements )  ;", "}", "METHOD_END"], "methodName": ["list"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < List < Object >  >    rows    =    ImmutableList . builder (  )  ;", "int   columnCount    =    rs . getMetaData (  )  . getColumnCount (  )  ;", "while    ( rs . next (  )  )     {", "List < Object >    row    =    new   ArrayList <  >  (  )  ;", "for    ( int   i    =     1  ;    i    <  =    columnCount ;    i +  +  )     {", "row . add ( rs . getObject ( i )  )  ;", "}", "rows . add ( row )  ;", "}", "return   rows . build (  )  ;", "}", "METHOD_END"], "methodName": ["readRows"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "Logging . initialize (  )  ;", "server    =    new   TestingPrestoServer (  )  ;", "server . installPlugin ( new   TpchPlugin (  )  )  ;", "server . createCatalog (  . TEST _ CATALOG ,     \" tpch \"  )  ;", "server . installPlugin ( new   BlackHolePlugin (  )  )  ;", "server . createCatalog (  \" blackhole \"  ,     \" blackhole \"  )  ;", ". waitForNodeRefresh ( server )  ;", "setupTestTables (  )  ;", "executorService    =    Executors . newCachedThreadPool ( Threads . daemonThreadsNamed (  \" test -  % s \"  )  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    createConnection (  \" blackhole \"  ,     \" blackhole \"  )  ; Statement   statement    =    connection . createStatement (  )  )     {", "assertEquals ( statement . executeUpdate (  \" CREATE   SCHEMA   blackhole . blackhole \"  )  ,     0  )  ;", "assertEquals ( statement . executeUpdate (  \" CREATE   TABLE   t _ table    ( x   bigint )  \"  )  ,     0  )  ;", "assertEquals ( statement . executeUpdate (  (  \" CREATE   TABLE   slow _ t _ table    ( x   bigint )     \"     +     (  (  (  (  (  \" WITH    (  \"     +     \"          split _ count    =     1  ,     \"  )     +     \"          pages _ per _ split    =     1  ,     \"  )     +     \"          rows _ per _ page    =     1  ,     \"  )     +     \"          page _ processing _ delay    =     '  1 m '  \"  )     +     \"  )  \"  )  )  )  ,     0  )  ;", "}", "}", "METHOD_END"], "methodName": ["setupTestTables"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "TestPrestoDriver . closeQuietly ( server )  ;", "executorService . shutdownNow (  )  ;", "}", "METHOD_END"], "methodName": ["teardown"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    createConnection (  \" test \"  ,     \" tiny \"  )  )     {", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "try    ( ResultSet   ignored    =    statement . executeQuery (  \" SELECT    *    FROM   bad _ table \"  )  )     {", "fail (  \" expected   exception \"  )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["testBadQuery"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "List < Connection >    connections    =    new   ArrayList <  >  (  )  ;", "for    ( int   i    =     0  ;    i    <     1  0  0  ;    i +  +  )     {", "Connection   connection    =    createConnection (  )  ;", "connections . add ( connection )  ;", "try    ( Statement   statement    =    connection . createStatement (  )  ; ResultSet   rs    =    statement . executeQuery (  \" SELECT    1  2  3  \"  )  )     {", "assertTrue ( rs . next (  )  )  ;", "}", "}", "for    ( Connection   connection    :    connections )     {", "connection . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["testConnectionResourceHandling"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "String   prefix    =    String . format (  \" jdbc : presto :  /  /  % s \"  ,    server . getAddress (  )  )  ;", "Connection   connection ;", "connection    =    DriverManager . getConnection (  ( prefix    +     \"  / a / b /  \"  )  ,     \" test \"  ,    null )  ;", "assertEquals ( connection . getCatalog (  )  ,     \" a \"  )  ;", "assertEquals ( connection . getSchema (  )  ,     \" b \"  )  ;", "connection    =    DriverManager . getConnection (  ( prefix    +     \"  / a / b \"  )  ,     \" test \"  ,    null )  ;", "assertEquals ( connection . getCatalog (  )  ,     \" a \"  )  ;", "assertEquals ( connection . getSchema (  )  ,     \" b \"  )  ;", "connection    =    DriverManager . getConnection (  ( prefix    +     \"  / a /  \"  )  ,     \" test \"  ,    null )  ;", "assertEquals ( connection . getCatalog (  )  ,     \" a \"  )  ;", "assertNull ( connection . getSchema (  )  )  ;", "connection    =    DriverManager . getConnection (  ( prefix    +     \"  / a \"  )  ,     \" test \"  ,    null )  ;", "assertEquals ( connection . getCatalog (  )  ,     \" a \"  )  ;", "assertNull ( connection . getSchema (  )  )  ;", "connection    =    DriverManager . getConnection (  ( prefix    +     \"  /  \"  )  ,     \" test \"  ,    null )  ;", "assertNull ( connection . getCatalog (  )  )  ;", "assertNull ( connection . getSchema (  )  )  ;", "connection    =    DriverManager . getConnection ( prefix ,     \" test \"  ,    null )  ;", "assertNull ( connection . getCatalog (  )  )  ;", "assertNull ( connection . getSchema (  )  )  ;", "}", "METHOD_END"], "methodName": ["testConnectionStringWithCatalogAndSchema"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    createConnection ( TestPrestoDriver . TEST _ CATALOG )  )     {", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "try    ( ResultSet   rs    =    statement . executeQuery (  (  \"  \"     +     (  (  (  \" SELECT   table _ catalog ,    table _ schema    \"     +     \" FROM   information _ schema . tables    \"  )     +     \" WHERE   table _ schema    =     ' information _ schema '     \"  )     +     \"       AND   table _ name    =     ' tables '  \"  )  )  )  )     {", "ResultSetMetaData   metadata    =    rs . getMetaData (  )  ;", "assertEquals ( metadata . getColumnCount (  )  ,     2  )  ;", "assertEquals ( metadata . getColumnLabel (  1  )  ,     \" table _ catalog \"  )  ;", "assertEquals ( metadata . getColumnLabel (  2  )  ,     \" table _ schema \"  )  ;", "assertTrue ( rs . next (  )  )  ;", "assertEquals ( rs . getString (  \" table _ catalog \"  )  ,    TestPrestoDriver . TEST _ CATALOG )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["testConnectionWithCatalog"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    createConnection ( TestPrestoDriver . TEST _ CATALOG ,     \" information _ schema \"  )  )     {", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "try    ( ResultSet   rs    =    statement . executeQuery (  (  \"  \"     +     (  (  (  \" SELECT   table _ catalog ,    table _ schema    \"     +     \" FROM   tables    \"  )     +     \" WHERE   table _ schema    =     ' information _ schema '     \"  )     +     \"       AND   table _ name    =     ' tables '  \"  )  )  )  )     {", "ResultSetMetaData   metadata    =    rs . getMetaData (  )  ;", "assertEquals ( metadata . getColumnCount (  )  ,     2  )  ;", "assertEquals ( metadata . getColumnLabel (  1  )  ,     \" table _ catalog \"  )  ;", "assertEquals ( metadata . getColumnLabel (  2  )  ,     \" table _ schema \"  )  ;", "assertTrue ( rs . next (  )  )  ;", "assertEquals ( rs . getString (  \" table _ catalog \"  )  ,    TestPrestoDriver . TEST _ CATALOG )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["testConnectionWithCatalogAndSchema"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "try    ( ResultSet   rs    =    statement . executeQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  (  (  \" SELECT    \"     +     \"        1  2  3     _ integer \"  )     +     \"  ,        1  2  3  0  0  0  0  0  0  0  0     _ bigint \"  )     +     \"  ,     ' foo '     _ varchar \"  )     +     \"  ,     0  .  1 E 0     _ double \"  )     +     \"  ,    true    _ lean \"  )     +     \"  ,    cast (  ' hello '    as   varbinary )     _ varbinary \"  )     +     \"  ,    DECIMAL    '  1  2  3  4  5  6  7  8  9  0  .  1  2  3  4  5  6  7  '     _ decimal _ short \"  )     +     \"  ,    DECIMAL    '  .  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  '     _ decimal _ long \"  )     +     \"  ,    approx _ set (  4  2  )     _ hll \"  )     +     \"  ,    cast (  ' foo '    as   char (  5  )  )     _ char \"  )  )  )  )     {", "ResultSetMetaData   metadata    =    rs . getMetaData (  )  ;", "assertEquals ( metadata . getColumnCount (  )  ,     1  0  )  ;", "assertEquals ( metadata . getColumnLabel (  1  )  ,     \"  _ integer \"  )  ;", "assertEquals ( metadata . getColumnType (  1  )  ,    Types . INTEGER )  ;", "assertEquals ( metadata . getColumnLabel (  2  )  ,     \"  _ bigint \"  )  ;", "assertEquals ( metadata . getColumnType (  2  )  ,    Types . BIGINT )  ;", "assertEquals ( metadata . getColumnLabel (  3  )  ,     \"  _ varchar \"  )  ;", "assertEquals ( metadata . getColumnType (  3  )  ,    Types . LONGNVARCHAR )  ;", "assertEquals ( metadata . getColumnLabel (  4  )  ,     \"  _ double \"  )  ;", "assertEquals ( metadata . getColumnType (  4  )  ,    Types . DOUBLE )  ;", "assertEquals ( metadata . getColumnLabel (  5  )  ,     \"  _ lean \"  )  ;", "assertEquals ( metadata . getColumnType (  5  )  ,    Types . BOOLEAN )  ;", "assertEquals ( metadata . getColumnLabel (  6  )  ,     \"  _ varbinary \"  )  ;", "assertEquals ( metadata . getColumnType (  6  )  ,    Types . LONGVARBINARY )  ;", "assertEquals ( metadata . getColumnLabel (  7  )  ,     \"  _ decimal _ short \"  )  ;", "assertEquals ( metadata . getColumnType (  7  )  ,    Types . DECIMAL )  ;", "assertEquals ( metadata . getColumnLabel (  8  )  ,     \"  _ decimal _ long \"  )  ;", "assertEquals ( metadata . getColumnType (  8  )  ,    Types . DECIMAL )  ;", "assertEquals ( metadata . getColumnLabel (  9  )  ,     \"  _ hll \"  )  ;", "assertEquals ( metadata . getColumnType (  9  )  ,    Types . JAVA _ OBJECT )  ;", "assertEquals ( metadata . getColumnLabel (  1  0  )  ,     \"  _ char \"  )  ;", "assertEquals ( metadata . getColumnType (  1  0  )  ,    Types . CHAR )  ;", "assertTrue ( rs . next (  )  )  ;", "assertEquals ( rs . getObject (  1  )  ,     1  2  3  )  ;", "assertEquals ( rs . getObject (  \"  _ integer \"  )  ,     1  2  3  )  ;", "assertEquals ( rs . getInt (  1  )  ,     1  2  3  )  ;", "assertEquals ( rs . getInt (  \"  _ integer \"  )  ,     1  2  3  )  ;", "assertEquals ( rs . getLong (  1  )  ,     1  2  3 L )  ;", "assertEquals ( rs . getLong (  \"  _ integer \"  )  ,     1  2  3 L )  ;", "assertEquals ( rs . getObject (  2  )  ,     1  2  3  0  0  0  0  0  0  0  0 L )  ;", "assertEquals ( rs . getObject (  \"  _ bigint \"  )  ,     1  2  3  0  0  0  0  0  0  0  0 L )  ;", "assertEquals ( rs . getLong (  2  )  ,     1  2  3  0  0  0  0  0  0  0  0 L )  ;", "assertEquals ( rs . getLong (  \"  _ bigint \"  )  ,     1  2  3  0  0  0  0  0  0  0  0 L )  ;", "assertEquals ( rs . getObject (  3  )  ,     \" foo \"  )  ;", "assertEquals ( rs . getObject (  \"  _ varchar \"  )  ,     \" foo \"  )  ;", "assertEquals ( rs . getString (  3  )  ,     \" foo \"  )  ;", "assertEquals ( rs . getString (  \"  _ varchar \"  )  ,     \" foo \"  )  ;", "assertEquals ( rs . getObject (  4  )  ,     0  .  1  )  ;", "assertEquals ( rs . getObject (  \"  _ double \"  )  ,     0  .  1  )  ;", "assertEquals ( rs . getDouble (  4  )  ,     0  .  1  )  ;", "assertEquals ( rs . getDouble (  \"  _ double \"  )  ,     0  .  1  )  ;", "assertEquals ( rs . getObject (  5  )  ,    true )  ;", "assertEquals ( rs . getObject (  \"  _ lean \"  )  ,    true )  ;", "assertEquals ( rs . getBoolean (  5  )  ,    true )  ;", "assertEquals ( rs . getBoolean (  \"  _ lean \"  )  ,    true )  ;", "assertEquals ( rs . getByte (  \"  _ lean \"  )  ,     1  )  ;", "assertEquals ( rs . getShort (  \"  _ lean \"  )  ,     1  )  ;", "assertEquals ( rs . getInt (  \"  _ lean \"  )  ,     1  )  ;", "assertEquals ( rs . getLong (  \"  _ lean \"  )  ,     1 L )  ;", "assertEquals ( rs . getFloat (  \"  _ lean \"  )  ,     1  .  0 F )  ;", "assertEquals ( rs . getDouble (  \"  _ lean \"  )  ,     1  .  0  )  ;", "assertEquals ( rs . getObject (  6  )  ,     \" hello \"  . getBytes ( StandardCharsets . UTF _  8  )  )  ;", "assertEquals ( rs . getObject (  \"  _ varbinary \"  )  ,     \" hello \"  . getBytes ( StandardCharsets . UTF _  8  )  )  ;", "assertEquals ( rs . getBytes (  6  )  ,     \" hello \"  . getBytes ( StandardCharsets . UTF _  8  )  )  ;", "assertEquals ( rs . getBytes (  \"  _ varbinary \"  )  ,     \" hello \"  . getBytes ( StandardCharsets . UTF _  8  )  )  ;", "assertEquals ( rs . getObject (  7  )  ,    new   BigDecimal (  \"  1  2  3  4  5  6  7  8  9  0  .  1  2  3  4  5  6  7  \"  )  )  ;", "assertEquals ( rs . getObject (  \"  _ decimal _ short \"  )  ,    new   BigDecimal (  \"  1  2  3  4  5  6  7  8  9  0  .  1  2  3  4  5  6  7  \"  )  )  ;", "assertEquals ( rs . getBigDecimal (  7  )  ,    new   BigDecimal (  \"  1  2  3  4  5  6  7  8  9  0  .  1  2  3  4  5  6  7  \"  )  )  ;", "assertEquals ( rs . getBigDecimal (  \"  _ decimal _ short \"  )  ,    new   BigDecimal (  \"  1  2  3  4  5  6  7  8  9  0  .  1  2  3  4  5  6  7  \"  )  )  ;", "assertEquals ( rs . getBigDecimal (  7  ,     1  )  ,    new   BigDecimal (  \"  1  2  3  4  5  6  7  8  9  0  .  1  \"  )  )  ;", "assertEquals ( rs . getBigDecimal (  \"  _ decimal _ short \"  ,     1  )  ,    new   BigDecimal (  \"  1  2  3  4  5  6  7  8  9  0  .  1  \"  )  )  ;", "assertEquals ( rs . getObject (  8  )  ,    new   BigDecimal (  \"  .  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  )  )  ;", "assertEquals ( rs . getObject (  \"  _ decimal _ long \"  )  ,    new   BigDecimal (  \"  .  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  )  )  ;", "assertEquals ( rs . getBigDecimal (  8  )  ,    new   BigDecimal (  \"  .  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  )  )  ;", "assertEquals ( rs . getBigDecimal (  \"  _ decimal _ long \"  )  ,    new   BigDecimal (  \"  .  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  \"  )  )  ;", "assertEquals ( rs . getBigDecimal (  8  ,     6  )  ,    new   BigDecimal (  \"  .  1  2  3  4  5  7  \"  )  )  ;", "assertEquals ( rs . getBigDecimal (  \"  _ decimal _ long \"  ,     6  )  ,    new   BigDecimal (  \"  .  1  2  3  4  5  7  \"  )  )  ;", "Assertions . assertInstanceOf ( rs . getObject (  9  )  ,    byte [  ]  . class )  ;", "Assertions . assertInstanceOf ( rs . getObject (  \"  _ hll \"  )  ,    byte [  ]  . class )  ;", "Assertions . assertInstanceOf ( rs . getBytes (  9  )  ,    byte [  ]  . class )  ;", "Assertions . assertInstanceOf ( rs . getBytes (  \"  _ hll \"  )  ,    byte [  ]  . class )  ;", "assertEquals ( rs . getObject (  1  0  )  ,     \" foo       \"  )  ;", "assertEquals ( rs . getObject (  \"  _ char \"  )  ,     \" foo       \"  )  ;", "assertEquals ( rs . getString (  1  0  )  ,     \" foo       \"  )  ;", "assertEquals ( rs . getString (  \"  _ char \"  )  ,     \" foo       \"  )  ;", "assertFalse ( rs . next (  )  )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["testDriverManager"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    createConnection (  \" blackhole \"  ,     \" blackhole \"  )  )     {", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "String   sql    =     \" INSERT   INTO   t _ table   VALUES    (  1  )  \"  ;", "try    {", "statement . executeQuery ( sql )  ;", "fail (  \" expected   exception \"  )  ;", "}    catch    ( SQLException   e )     {", "assertEquals ( e . getMessage (  )  ,     (  \" SQL   statement   is   not   a   query :     \"     +    sql )  )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["testExecuteQueryWithInsert"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    createConnection (  \" blackhole \"  ,     \" blackhole \"  )  )     {", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "assertEquals ( statement . executeUpdate (  \" CREATE   TABLE   t _ execute _ create    ( x   bigint )  \"  )  ,     0  )  ;", "assertNull ( statement . getResultSet (  )  )  ;", "assertEquals ( statement . getUpdateCount (  )  ,     0  )  ;", "assertEquals ( statement . getLargeUpdateCount (  )  ,     0  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testExecuteUpdateWithCreateTable"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    createConnection (  \" blackhole \"  ,     \" blackhole \"  )  )     {", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "assertEquals ( statement . executeUpdate (  \" INSERT   INTO   t _ table   VALUES    (  1  )  ,     (  2  )  \"  )  ,     2  )  ;", "assertNull ( statement . getResultSet (  )  )  ;", "assertEquals ( statement . getUpdateCount (  )  ,     2  )  ;", "assertEquals ( statement . getLargeUpdateCount (  )  ,     2  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testExecuteUpdateWithInsert"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    createConnection (  \" blackhole \"  ,     \" blackhole \"  )  )     {", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "String   sql    =     \" SELECT    1  2  3    x ,     ' foo '    y ,    CAST ( NULL   AS   bigint )    z \"  ;", "try    {", "statement . executeUpdate ( sql )  ;", "fail (  \" expected   exception \"  )  ;", "}    catch    ( SQLException   e )     {", "assertEquals ( e . getMessage (  )  ,     (  \" SQL   is   not   an   update   statement :     \"     +    sql )  )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["testExecuteUpdateWithQuery"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "assertTrue ( statement . execute (  \" SELECT    1  2  3    x ,     ' foo '    y ,    CAST ( NULL   AS   bigint )    z \"  )  )  ;", "ResultSet   rs    =    statement . getResultSet (  )  ;", "assertEquals ( statement . getUpdateCount (  )  ,     (  -  1  )  )  ;", "assertEquals ( statement . getLargeUpdateCount (  )  ,     (  -  1  )  )  ;", "assertTrue ( rs . next (  )  )  ;", "assertEquals ( rs . getLong (  1  )  ,     1  2  3  )  ;", "assertFalse ( rs . wasNull (  )  )  ;", "assertEquals ( rs . getLong (  \" x \"  )  ,     1  2  3  )  ;", "assertFalse ( rs . wasNull (  )  )  ;", "assertEquals ( rs . getLong (  3  )  ,     0  )  ;", "assertTrue ( rs . wasNull (  )  )  ;", "assertEquals ( rs . getLong (  \" z \"  )  ,     0  )  ;", "assertTrue ( rs . wasNull (  )  )  ;", "assertNull ( rs . getObject (  \" z \"  )  )  ;", "assertTrue ( rs . wasNull (  )  )  ;", "assertEquals ( rs . getString (  2  )  ,     \" foo \"  )  ;", "assertFalse ( rs . wasNull (  )  )  ;", "assertEquals ( rs . getString (  \" y \"  )  ,     \" foo \"  )  ;", "assertFalse ( rs . wasNull (  )  )  ;", "assertFalse ( rs . next (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testExecuteWithQuery"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getAttributes ( null ,    null ,    null ,    null )  )     {", "assertFalse ( rs . next (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testGetAttributes"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getCatalogs (  )  )     {", "assertEquals (  . readRows ( rs )  ,     . list (  . list (  \" blackhole \"  )  ,     . list (  \" system \"  )  ,     . list (  . TEST _ CATALOG )  )  )  ;", "ResultSetMetaData   metadata    =    rs . getMetaData (  )  ;", "assertEquals ( metadata . getColumnCount (  )  ,     1  )  ;", "assertEquals ( metadata . getColumnLabel (  1  )  ,     \" TABLE _ CAT \"  )  ;", "assertEquals ( metadata . getColumnType (  1  )  ,    Types . LONGNVARCHAR )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testGetCatalogs"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getColumns ( null ,    null ,     \" tables \"  ,     \" table _ name \"  )  )     {", "TestPrestoDriver . assertColumnMetadata ( rs )  ;", "assertTrue ( rs . next (  )  )  ;", "assertEquals ( rs . getString (  \" TABLE _ CAT \"  )  ,     \" blackhole \"  )  ;", "assertEquals ( rs . getString (  \" TABLE _ SCHEM \"  )  ,     \" information _ schema \"  )  ;", "assertEquals ( rs . getString (  \" TABLE _ NAME \"  )  ,     \" tables \"  )  ;", "assertEquals ( rs . getString (  \" COLUMN _ NAME \"  )  ,     \" table _ name \"  )  ;", "assertEquals ( rs . getInt (  \" DATA _ TYPE \"  )  ,    Types . LONGNVARCHAR )  ;", "assertTrue ( rs . next (  )  )  ;", "assertEquals ( rs . getString (  \" TABLE _ CAT \"  )  ,     \" system \"  )  ;", "assertEquals ( rs . getString (  \" TABLE _ SCHEM \"  )  ,     \" information _ schema \"  )  ;", "assertTrue ( rs . next (  )  )  ;", "assertEquals ( rs . getString (  \" TABLE _ CAT \"  )  ,     \" system \"  )  ;", "assertEquals ( rs . getString (  \" TABLE _ SCHEM \"  )  ,     \" jdbc \"  )  ;", "assertTrue ( rs . next (  )  )  ;", "assertEquals ( rs . getString (  \" TABLE _ CAT \"  )  ,    TestPrestoDriver . TEST _ CATALOG )  ;", "assertEquals ( rs . getString (  \" TABLE _ SCHEM \"  )  ,     \" information _ schema \"  )  ;", "assertFalse ( rs . next (  )  )  ;", "}", "}", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getColumns ( TestPrestoDriver . TEST _ CATALOG ,    null ,     \" tables \"  ,     \" table _ name \"  )  )     {", "TestPrestoDriver . assertColumnMetadata ( rs )  ;", "assertEquals ( TestPrestoDriver . readRows ( rs )  . size (  )  ,     1  )  ;", "}", "}", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getColumns ( null ,     \" information _ schema \"  ,     \" tables \"  ,     \" table _ name \"  )  )     {", "TestPrestoDriver . assertColumnMetadata ( rs )  ;", "assertEquals ( TestPrestoDriver . readRows ( rs )  . size (  )  ,     3  )  ;", "}", "}", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getColumns ( TestPrestoDriver . TEST _ CATALOG ,     \" information _ schema \"  ,     \" tables \"  ,     \" table _ name \"  )  )     {", "TestPrestoDriver . assertColumnMetadata ( rs )  ;", "assertEquals ( TestPrestoDriver . readRows ( rs )  . size (  )  ,     1  )  ;", "}", "}", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getColumns ( TestPrestoDriver . TEST _ CATALOG ,     \" inf %  \"  ,     \" tables \"  ,     \" table _ name \"  )  )     {", "TestPrestoDriver . assertColumnMetadata ( rs )  ;", "assertEquals ( TestPrestoDriver . readRows ( rs )  . size (  )  ,     1  )  ;", "}", "}", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getColumns ( TestPrestoDriver . TEST _ CATALOG ,     \" information _ schema \"  ,     \" tab %  \"  ,     \" table _ name \"  )  )     {", "TestPrestoDriver . assertColumnMetadata ( rs )  ;", "assertEquals ( TestPrestoDriver . readRows ( rs )  . size (  )  ,     2  )  ;", "}", "}", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getColumns ( TestPrestoDriver . TEST _ CATALOG ,     \" information _ schema \"  ,     \" tables \"  ,     \"  % m %  \"  )  )     {", "TestPrestoDriver . assertColumnMetadata ( rs )  ;", "assertTrue ( rs . next (  )  )  ;", "assertEquals ( rs . getString (  \" COLUMN _ NAME \"  )  ,     \" table _ schema \"  )  ;", "assertTrue ( rs . next (  )  )  ;", "assertEquals ( rs . getString (  \" COLUMN _ NAME \"  )  ,     \" table _ name \"  )  ;", "assertFalse ( rs . next (  )  )  ;", "}", "}", "try    ( Connection   connection    =    createConnection (  \" blackhole \"  ,     \" blackhole \"  )  ; Statement   statement    =    connection . createStatement (  )  )     {", "assertEquals ( statement . executeUpdate (  (  \" CREATE   TABLE   test _ get _ columns _ table    (  \"     +     (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  \" c _ boolean   boolean ,     \"     +     \" c _ bigint   bigint ,     \"  )     +     \" c _ integer   integer ,     \"  )     +     \" c _ smallint   smallint ,     \"  )     +     \" c _ tinyint   tinyint ,     \"  )     +     \" c _ real   real ,     \"  )     +     \" c _ double   double ,     \"  )     +     \" c _ varchar _  1  2  3  4    varchar (  1  2  3  4  )  ,     \"  )     +     \" c _ varchar   varchar ,     \"  )     +     \" c _ char _  3  4  5    char (  3  4  5  )  ,     \"  )     +     \" c _ varbinary   varbinary ,     \"  )     +     \" c _ time   time ,     \"  )     +     \" c _ time _ with _ time _ zone   time   with   time   zone ,     \"  )     +     \" c _ timestamp   timestamp ,     \"  )     +     \" c _ timestamp _ with _ time _ zone   timestamp   with   time   zone ,     \"  )     +     \" c _ date   date ,     \"  )     +     \" c _ decimal _  8  _  2    decimal (  8  ,  2  )  ,     \"  )     +     \" c _ decimal _  3  8  _  0    decimal (  3  8  ,  0  )  ,     \"  )     +     \" c _ array   array < bigint >  ,     \"  )     +     \" c _ color   color \"  )     +     \"  )  \"  )  )  )  ,     0  )  ;", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getColumns (  \" blackhole \"  ,     \" blackhole \"  ,     \" test _ get _ columns _ table \"  ,    null )  )     {", "TestPrestoDriver . assertColumnMetadata ( rs )  ;", "TestPrestoDriver . assertColumnSpec ( rs ,    Types . BOOLEAN ,    null ,    null ,    null ,    null ,    BOOLEAN )  ;", "TestPrestoDriver . assertColumnSpec ( rs ,    Types . BIGINT ,     1  9 L ,     1  0 L ,    null ,    null ,    BIGINT )  ;", "TestPrestoDriver . assertColumnSpec ( rs ,    Types . INTEGER ,     1  0 L ,     1  0 L ,    null ,    null ,    INTEGER )  ;", "TestPrestoDriver . assertColumnSpec ( rs ,    Types . SMALLINT ,     5 L ,     1  0 L ,    null ,    null ,    SMALLINT )  ;", "TestPrestoDriver . assertColumnSpec ( rs ,    Types . TINYINT ,     3 L ,     1  0 L ,    null ,    null ,    TINYINT )  ;", "TestPrestoDriver . assertColumnSpec ( rs ,    Types . REAL ,     2  4 L ,     2 L ,    null ,    null ,    REAL )  ;", "TestPrestoDriver . assertColumnSpec ( rs ,    Types . DOUBLE ,     5  3 L ,     2 L ,    null ,    null ,    DOUBLE )  ;", "TestPrestoDriver . assertColumnSpec ( rs ,    Types . LONGNVARCHAR ,     1  2  3  4 L ,    null ,    null ,     1  2  3  4 L ,    createVarcharType (  1  2  3  4  )  )  ;", "TestPrestoDriver . assertColumnSpec ( rs ,    Types . LONGNVARCHAR ,     (  ( long )     ( Integer . MAX _ VALUE )  )  ,    null ,    null ,     (  ( long )     ( Integer . MAX _ VALUE )  )  ,    createUnboundedVarcharType (  )  )  ;", "TestPrestoDriver . assertColumnSpec ( rs ,    Types . CHAR ,     3  4  5 L ,    null ,    null ,     3  4  5 L ,    createCharType (  3  4  5  )  )  ;", "TestPrestoDriver . assertColumnSpec ( rs ,    Types . LONGVARBINARY ,     (  ( long )     ( Integer . MAX _ VALUE )  )  ,    null ,    null ,     (  ( long )     ( Integer . MAX _ VALUE )  )  ,    VARBINARY )  ;", "TestPrestoDriver . assertColumnSpec ( rs ,    Types . TIME ,     8 L ,    null ,    null ,    null ,    TIME )  ;", "TestPrestoDriver . assertColumnSpec ( rs ,    Types . TIME _ WITH _ TIMEZONE ,     1  4 L ,    null ,    null ,    null ,    TIME _ WITH _ TIME _ ZONE )  ;", "TestPrestoDriver . assertColumnSpec ( rs ,    Types . TIMESTAMP ,     2  3 L ,    null ,    null ,    null ,    TIMESTAMP )  ;", "TestPrestoDriver . assertColumnSpec ( rs ,    Types . TIMESTAMP _ WITH _ TIMEZONE ,     2  9 L ,    null ,    null ,    null ,    TIMESTAMP _ WITH _ TIME _ ZONE )  ;", "TestPrestoDriver . assertColumnSpec ( rs ,    Types . DATE ,     1  4 L ,    null ,    null ,    null ,    DATE )  ;", "TestPrestoDriver . assertColumnSpec ( rs ,    Types . DECIMAL ,     8 L ,     1  0 L ,     2 L ,    null ,    createDecimalType (  8  ,     2  )  )  ;", "TestPrestoDriver . assertColumnSpec ( rs ,    Types . DECIMAL ,     3  8 L ,     1  0 L ,     0 L ,    null ,    createDecimalType (  3  8  ,     0  )  )  ;", "TestPrestoDriver . assertColumnSpec ( rs ,    Types . ARRAY ,    null ,    null ,    null ,    null ,    new   spi . type . ArrayType ( BigintType . BIGINT )  )  ;", "TestPrestoDriver . assertColumnSpec ( rs ,    Types . JAVA _ OBJECT ,    null ,    null ,    null ,    null ,    COLOR )  ;", "assertFalse ( rs . next (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testGetColumns"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    createConnection (  )  )     {", "DatabaseMetaData   metaData    =    connection . getMetaData (  )  ;", "assertEquals ( metaData . getDatabaseProductName (  )  ,     \"  \"  )  ;", "assertEquals ( metaData . getDatabaseProductVersion (  )  ,     \" testversion \"  )  ;", "assertEquals ( metaData . getDatabaseMajorVersion (  )  ,     0  )  ;", "assertEquals ( metaData . getDatabaseMinorVersion (  )  ,     0  )  ;", "}", "}", "METHOD_END"], "methodName": ["testGetDatabaseProductVersion"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "Driver   driver    =    DriverManager . getDriver (  \" jdbc : presto :  \"  )  ;", "assertEquals ( driver . getMajorVersion (  )  ,     0  )  ;", "assertEquals ( driver . getMajorVersion (  )  ,     0  )  ;", "try    ( Connection   connection    =    createConnection (  )  )     {", "DatabaseMetaData   metaData    =    connection . getMetaData (  )  ;", "assertEquals ( metaData . getDriverName (  )  ,     . DRIVER _ NAME )  ;", "assertEquals ( metaData . getDriverVersion (  )  ,     \" unknown \"  )  ;", "assertEquals ( metaData . getDriverMajorVersion (  )  ,     0  )  ;", "assertEquals ( metaData . getDriverMinorVersion (  )  ,     0  )  ;", "}", "}", "METHOD_END"], "methodName": ["testGetDriverVersion"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "assertTrue ( statement . execute (  \" SELECT    1  2  3    x ,     ' foo '    y \"  )  )  ;", "statement . getMoreResults ( Statement . KEEP _ CURRENT _ RESULT )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testGetMoreResultsException"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . geocedureColumns ( null ,    null ,    null ,    null )  )     {", "assertFalse ( rs . next (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testGetProcedureColumns"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getProcedu ( null ,    null ,    null )  )     {", "assertFalse ( rs . next (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testGetProcedures"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getPseudoColumns ( null ,    null ,    null ,    null )  )     {", "assertFalse ( rs . next (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testGetPseudoColumns"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "assertTrue ( statement . execute (  \" SELECT    1  2  3    x ,     ' foo '    y \"  )  )  ;", "ResultSet   ult    =    statement . getResultSet (  )  ;", "assertNotNull ( ult )  ;", "assertFalse ( ult . isClosed (  )  )  ;", "statement . getMoreResults (  )  ;", "assertTrue ( ult . isClosed (  )  )  ;", "assertTrue ( statement . execute (  \" SELECT    1  2  3    x ,     ' foo '    y \"  )  )  ;", "ult    =    statement . getResultSet (  )  ;", "assertNotNull ( ult )  ;", "assertFalse ( ult . isClosed (  )  )  ;", "assertTrue ( statement . execute (  \" SELECT    1  2  3    x ,     ' foo '    y \"  )  )  ;", "assertFalse ( statement . getMoreResults ( Statement . CLOSE _ CURRENT _ RESULT )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testGetResultSet"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "List < List < String >  >    system    =    new   ArrayList <  >  (  )  ;", "system . add (  . list (  \" system \"  ,     \" information _ schema \"  )  )  ;", "system . add (  . list (  \" system \"  ,     \" jdbc \"  )  )  ;", "system . add (  . list (  \" system \"  ,     \" metadata \"  )  )  ;", "system . add (  . list (  \" system \"  ,     \" runtime \"  )  )  ;", "List < List < String >  >    blackhole    =    new   ArrayList <  >  (  )  ;", "blackhole . add (  . list (  \" blackhole \"  ,     \" information _ schema \"  )  )  ;", "blackhole . add (  . list (  \" blackhole \"  ,     \" default \"  )  )  ;", "blackhole . add (  . list (  \" blackhole \"  ,     \" blackhole \"  )  )  ;", "List < List < String >  >    test    =    new   ArrayList <  >  (  )  ;", "test . add (  . list (  . TEST _ CATALOG ,     \" information _ schema \"  )  )  ;", "for    ( String   schema    :    TpchMetadata . SCHEMA _ NAMES )     {", "test . add (  . list (  . TEST _ CATALOG ,    schema )  )  ;", "}", "List < List < String >  >    all    =    new   ArrayList <  >  (  )  ;", "all . addAll ( system )  ;", "all . addAll ( test )  ;", "all . addAll ( blackhole )  ;", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getSchemas (  )  )     {", ". assertGetSchemasResult ( rs ,    all )  ;", "}", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getSchemas ( null ,    null )  )     {", ". assertGetSchemasResult ( rs ,    all )  ;", "}", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getSchemas (  . TEST _ CATALOG ,    null )  )     {", ". assertGetSchemasResult ( rs ,    test )  ;", "}", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getSchemas (  \"  \"  ,    null )  )     {", ". assertGetSchemasResult ( rs ,     . list (  )  )  ;", "}", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getSchemas (  . TEST _ CATALOG ,     \" information _ schema \"  )  )     {", ". assertGetSchemasResult ( rs ,     . list (  . list (  . TEST _ CATALOG ,     \" information _ schema \"  )  )  )  ;", "}", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getSchemas ( null ,     \" information _ schema \"  )  )     {", ". assertGetSchemasResult ( rs ,     . list (  . list (  . TEST _ CATALOG ,     \" information _ schema \"  )  ,     . list (  \" blackhole \"  ,     \" information _ schema \"  )  ,     . list (  \" system \"  ,     \" information _ schema \"  )  )  )  ;", "}", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getSchemas ( null ,     \" sf _  \"  )  )     {", ". assertGetSchemasResult ( rs ,     . list (  . list (  . TEST _ CATALOG ,     \" sf 1  \"  )  )  )  ;", "}", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getSchemas ( null ,     \" sf %  \"  )  )     {", "List < List < String >  >    expected    =    test . stream (  )  . filter (  (    item )     -  >    item . get (  1  )  . startsWith (  \" sf \"  )  )  . collect ( Collectors . toList (  )  )  ;", ". assertGetSchemasResult ( rs ,    expected )  ;", "}", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getSchemas (  \" unknown \"  ,    null )  )     {", ". assertGetSchemasResult ( rs ,     . list (  )  )  ;", "}", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getSchemas ( null ,     \" unknown \"  )  )     {", ". assertGetSchemasResult ( rs ,     . list (  )  )  ;", "}", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getSchemas (  . TEST _ CATALOG ,     \" unknown \"  )  )     {", ". assertGetSchemasResult ( rs ,     . list (  )  )  ;", "}", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getSchemas (  \" unknown \"  ,     \" unknown \"  )  )     {", ". assertGetSchemasResult ( rs ,     . list (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testGetSchemas"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getSuperTables ( null ,    null ,    null )  )     {", "assertFalse ( rs . next (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testGetSuperTables"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getSuperTypes ( null ,    null ,    null )  )     {", "assertFalse ( rs . next (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testGetSuperTypes"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   tableTypes    =    connection . getMetaData (  )  . getTableTypes (  )  )     {", "List < List < Object >  >    data    =     . readRows ( tableTypes )  ;", "assertEquals ( data ,     . list (  . list (  \" TABLE \"  )  ,     . list (  \" VIEW \"  )  )  )  ;", "ResultSetMetaData   metadata    =    tableTypes . getMetaData (  )  ;", "assertEquals ( metadata . getColumnCount (  )  ,     1  )  ;", "assertEquals ( metadata . getColumnLabel (  1  )  ,     \" TABLE _ TYPE \"  )  ;", "assertEquals ( metadata . getColumnType (  1  )  ,    Types . LONGNVARCHAR )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testGetTableTypes"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getTables ( null ,    null ,    null ,    null )  )     {", ". assertTableMetadata ( rs )  ;", "Set < List < Object >  >    rows    =    ImmutableSet . copyOf (  . readRows ( rs )  )  ;", "assertTrue ( rows . contains (  . getTablesRow (  \" information _ schema \"  ,     \" tables \"  )  )  )  ;", "assertTrue ( rows . contains (  . getTablesRow (  \" information _ schema \"  ,     \" schemata \"  )  )  )  ;", "}", "}", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getTables (  . TEST _ CATALOG ,    null ,    null ,    null )  )     {", ". assertTableMetadata ( rs )  ;", "Set < List < Object >  >    rows    =    ImmutableSet . copyOf (  . readRows ( rs )  )  ;", "assertTrue ( rows . contains (  . getTablesRow (  \" information _ schema \"  ,     \" tables \"  )  )  )  ;", "assertTrue ( rows . contains (  . getTablesRow (  \" information _ schema \"  ,     \" schemata \"  )  )  )  ;", "}", "}", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getTables (  \"  \"  ,    null ,    null ,    null )  )     {", ". assertTableMetadata ( rs )  ;", "assertEquals (  . readRows ( rs )  . size (  )  ,     0  )  ;", "}", "}", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getTables (  . TEST _ CATALOG ,     \" information _ schema \"  ,    null ,    null )  )     {", ". assertTableMetadata ( rs )  ;", "Set < List < Object >  >    rows    =    ImmutableSet . copyOf (  . readRows ( rs )  )  ;", "assertTrue ( rows . contains (  . getTablesRow (  \" information _ schema \"  ,     \" tables \"  )  )  )  ;", "assertTrue ( rows . contains (  . getTablesRow (  \" information _ schema \"  ,     \" schemata \"  )  )  )  ;", "}", "}", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getTables (  . TEST _ CATALOG ,     \"  \"  ,    null ,    null )  )     {", ". assertTableMetadata ( rs )  ;", "assertEquals (  . readRows ( rs )  . size (  )  ,     0  )  ;", "}", "}", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getTables (  . TEST _ CATALOG ,     \" information _ schema \"  ,     \" tables \"  ,    null )  )     {", ". assertTableMetadata ( rs )  ;", "Set < List < Object >  >    rows    =    ImmutableSet . copyOf (  . readRows ( rs )  )  ;", "assertTrue ( rows . contains (  . getTablesRow (  \" information _ schema \"  ,     \" tables \"  )  )  )  ;", "assertFalse ( rows . contains (  . getTablesRow (  \" information _ schema \"  ,     \" schemata \"  )  )  )  ;", "}", "}", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getTables (  . TEST _ CATALOG ,     \" information _ schema \"  ,     \" tables \"  ,     . array (  \" TABLE \"  )  )  )     {", ". assertTableMetadata ( rs )  ;", "Set < List < Object >  >    rows    =    ImmutableSet . copyOf (  . readRows ( rs )  )  ;", "assertTrue ( rows . contains (  . getTablesRow (  \" information _ schema \"  ,     \" tables \"  )  )  )  ;", "assertFalse ( rows . contains (  . getTablesRow (  \" information _ schema \"  ,     \" schemata \"  )  )  )  ;", "}", "}", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getTables ( null ,     \" information _ schema \"  ,    null ,    null )  )     {", ". assertTableMetadata ( rs )  ;", "Set < List < Object >  >    rows    =    ImmutableSet . copyOf (  . readRows ( rs )  )  ;", "assertTrue ( rows . contains (  . getTablesRow (  \" information _ schema \"  ,     \" tables \"  )  )  )  ;", "assertTrue ( rows . contains (  . getTablesRow (  \" information _ schema \"  ,     \" schemata \"  )  )  )  ;", "}", "}", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getTables ( null ,    null ,     \" tables \"  ,    null )  )     {", ". assertTableMetadata ( rs )  ;", "Set < List < Object >  >    rows    =    ImmutableSet . copyOf (  . readRows ( rs )  )  ;", "assertTrue ( rows . contains (  . getTablesRow (  \" information _ schema \"  ,     \" tables \"  )  )  )  ;", "assertFalse ( rows . contains (  . getTablesRow (  \" information _ schema \"  ,     \" schemata \"  )  )  )  ;", "}", "}", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getTables ( null ,    null ,    null ,     . array (  \" TABLE \"  )  )  )     {", ". assertTableMetadata ( rs )  ;", "Set < List < Object >  >    rows    =    ImmutableSet . copyOf (  . readRows ( rs )  )  ;", "assertTrue ( rows . contains (  . getTablesRow (  \" information _ schema \"  ,     \" tables \"  )  )  )  ;", "assertTrue ( rows . contains (  . getTablesRow (  \" information _ schema \"  ,     \" schemata \"  )  )  )  ;", "}", "}", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getTables (  . TEST _ CATALOG ,     \" inf %  \"  ,     \" tables \"  ,    null )  )     {", ". assertTableMetadata ( rs )  ;", "Set < List < Object >  >    rows    =    ImmutableSet . copyOf (  . readRows ( rs )  )  ;", "assertTrue ( rows . contains (  . getTablesRow (  \" information _ schema \"  ,     \" tables \"  )  )  )  ;", "assertFalse ( rows . contains (  . getTablesRow (  \" information _ schema \"  ,     \" schemata \"  )  )  )  ;", "}", "}", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getTables (  . TEST _ CATALOG ,     \" information _ schema \"  ,     \" tab %  \"  ,    null )  )     {", ". assertTableMetadata ( rs )  ;", "Set < List < Object >  >    rows    =    ImmutableSet . copyOf (  . readRows ( rs )  )  ;", "assertTrue ( rows . contains (  . getTablesRow (  \" information _ schema \"  ,     \" tables \"  )  )  )  ;", "assertFalse ( rows . contains (  . getTablesRow (  \" information _ schema \"  ,     \" schemata \"  )  )  )  ;", "}", "}", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getTables (  \" unknown \"  ,     \" information _ schema \"  ,     \" tables \"  ,     . array (  \" TABLE \"  )  )  )     {", ". assertTableMetadata ( rs )  ;", "assertEquals (  . readRows ( rs )  . size (  )  ,     0  )  ;", "}", "}", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getTables (  . TEST _ CATALOG ,     \" unknown \"  ,     \" tables \"  ,     . array (  \" TABLE \"  )  )  )     {", ". assertTableMetadata ( rs )  ;", "assertEquals (  . readRows ( rs )  . size (  )  ,     0  )  ;", "}", "}", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getTables (  . TEST _ CATALOG ,     \" information _ schema \"  ,     \" unknown \"  ,     . array (  \" TABLE \"  )  )  )     {", ". assertTableMetadata ( rs )  ;", "assertEquals (  . readRows ( rs )  . size (  )  ,     0  )  ;", "}", "}", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getTables (  . TEST _ CATALOG ,     \" information _ schema \"  ,     \" tables \"  ,     . array (  \" unknown \"  )  )  )     {", ". assertTableMetadata ( rs )  ;", "assertEquals (  . readRows ( rs )  . size (  )  ,     0  )  ;", "}", "}", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getTables (  . TEST _ CATALOG ,     \" information _ schema \"  ,     \" tables \"  ,     . array (  \" unknown \"  ,     \" TABLE \"  )  )  )     {", ". assertTableMetadata ( rs )  ;", "Set < List < Object >  >    rows    =    ImmutableSet . copyOf (  . readRows ( rs )  )  ;", "assertTrue ( rows . contains (  . getTablesRow (  \" information _ schema \"  ,     \" tables \"  )  )  )  ;", "assertFalse ( rows . contains (  . getTablesRow (  \" information _ schema \"  ,     \" schemata \"  )  )  )  ;", "}", "}", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getTables (  . TEST _ CATALOG ,     \" information _ schema \"  ,     \" tables \"  ,     . array (  )  )  )     {", ". assertTableMetadata ( rs )  ;", "assertEquals (  . readRows ( rs )  . size (  )  ,     0  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testGetTables"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( ResultSet   rs    =    connection . getMetaData (  )  . getUDTs ( null ,    null ,    null ,    null )  )     {", "assertFalse ( rs . next (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testGetUdts"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "assertTrue ( statement . execute (  \" SELECT    1  2  3    x ,     ' foo '    y \"  )  )  ;", "assertEquals ( statement . getUpdateCount (  )  ,     (  -  1  )  )  ;", "assertEquals ( statement . getLargeUpdateCount (  )  ,     (  -  1  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testGetUpdateCount"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "CountDownLatch   queryStarted    =    new   CountDownLatch (  1  )  ;", "CountDownLatch   queryFinished    =    new   CountDownLatch (  1  )  ;", "AtomicReference < String >    queryId    =    new   AtomicReference <  >  (  )  ;", "AtomicReference < Throwable >    queryFailure    =    new   AtomicReference <  >  (  )  ;", "Future <  ?  >    queryFuture    =    executorService . submit (  (  )     -  >     {", "try    ( Connection   connection    =    createConnection (  \" blackhole \"  ,     \" default \"  )  ; Statement   statement    =    connection . createStatement (  )  ; ResultSet   resultSet    =    statement . executeQuery (  \" SELECT    *    FROM   slow _ test _ table \"  )  )     {", "queryId . set ( resultSet . unwrap ( ResultSet . class )  . getQueryId (  )  )  ;", "queryStarted . countDown (  )  ;", "try    {", "resultSet . next (  )  ;", "}    catch    ( SQLException   t )     {", "queryFailure . set ( t )  ;", "}    finally    {", "queryFinished . countDown (  )  ;", "}", "}", "return   null ;", "}  )  ;", "assertTrue ( queryStarted . await (  1  0  ,    TimeUnit . SECONDS )  )  ;", "assertNotNull ( queryId . get (  )  )  ;", "assertFalse ( getQueryState ( queryId . get (  )  )  . isDone (  )  )  ;", "queryFuture . cancel ( true )  ;", "assertTrue ( queryFinished . await (  1  0  ,    TimeUnit . SECONDS )  )  ;", "assertNotNull ( queryFailure . get (  )  )  ;", "assertEquals ( getQueryState ( queryId . get (  )  )  ,    FAILED )  ;", "}", "METHOD_END"], "methodName": ["testQueryCancelByInterrupt"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "CountDownLatch   queryStarted    =    new   CountDownLatch (  1  )  ;", "CountDownLatch   queryFinished    =    new   CountDownLatch (  1  )  ;", "AtomicReference < String >    queryId    =    new   AtomicReference <  >  (  )  ;", "AtomicReference < Throwable >    queryFailure    =    new   AtomicReference <  >  (  )  ;", "try    ( Connection   connection    =    createConnection (  \" blackhole \"  ,     \" default \"  )  ; Statement   statement    =    connection . createStatement (  )  )     {", "executorService . execute (  (  )     -  >     {", "try    ( ResultSet   resultSet    =    statement . executeQuery (  \" SELECT    *    FROM   slow _ test _ table \"  )  )     {", "queryId . set ( resultSet . unwrap ( ResultSet . class )  . getQueryId (  )  )  ;", "queryStarted . countDown (  )  ;", "resultSet . next (  )  ;", "}    catch    ( SQLException   t )     {", "queryFailure . set ( t )  ;", "}    finally    {", "queryFinished . countDown (  )  ;", "}", "}  )  ;", "queryStarted . await (  1  0  ,    TimeUnit . SECONDS )  ;", "assertNotNull ( queryId . get (  )  )  ;", "assertFalse ( getQueryState ( queryId . get (  )  )  . isDone (  )  )  ;", "statement . cancel (  )  ;", "queryFinished . await (  1  0  ,    TimeUnit . SECONDS )  ;", "assertNotNull ( queryFailure . get (  )  )  ;", "assertEquals ( getQueryState ( queryId . get (  )  )  ,    FAILED )  ;", "}", "}", "METHOD_END"], "methodName": ["testQueryCancelExplicit"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    createConnection (  \" blackhole \"  ,     \" blackhole \"  )  ; Statement   statement    =    connection . createStatement (  )  )     {", "statement . executeUpdate (  (  \" CREATE   TABLE   t _ query _ timeout    ( key   BIGINT )     \"     +     (  (  (  (  (  \" WITH    (  \"     +     \"          split _ count    =     1  ,     \"  )     +     \"          pages _ per _ split    =     1  ,     \"  )     +     \"          rows _ per _ page    =     1  ,     \"  )     +     \"          page _ processing _ delay    =     '  1 m '  \"  )     +     \"  )  \"  )  )  )  ;", "}", "CountDownLatch   queryFinished    =    new   CountDownLatch (  1  )  ;", "AtomicReference < Throwable >    queryFailure    =    new   AtomicReference <  >  (  )  ;", "executorService . submit (  (  )     -  >     {", "try    ( Connection   connection    =    createConnection (  \" blackhole \"  ,     \" default \"  )  ; Statement   statement    =    connection . createStatement (  )  )     {", "statement . setQueryTimeout (  1  )  ;", "try    ( ResultSet   resultSet    =    statement . executeQuery (  \" SELECT    *    FROM   t _ query _ timeout \"  )  )     {", "try    {", "resultSet . next (  )  ;", "}    catch    ( SQLException   t )     {", "queryFailure . set ( t )  ;", "}    finally    {", "queryFinished . countDown (  )  ;", "}", "}", "}", "return   null ;", "}  )  ;", "queryFinished . await (  )  ;", "assertNotNull ( queryFailure . get (  )  )  ;", "Assertions . assertContains ( queryFailure . get (  )  . getMessage (  )  ,     \" Query   exceeded   maximum   time   limit   of    1  .  0  0 s \"  )  ;", "try    ( Connection   connection    =    createConnection (  \" blackhole \"  ,     \" blackhole \"  )  ; Statement   statement    =    connection . createStatement (  )  )     {", "statement . executeUpdate (  \" DROP   TABLE   t _ query _ timeout \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["testQueryTimeout"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "assertTrue ( statement . execute (  \" SELECT    1  2  3    x ,     ' foo '    y \"  )  )  ;", "ResultSet   ult    =    statement . getResultSet (  )  ;", "assertFalse ( ult . isClosed (  )  )  ;", "ult . close (  )  ;", "assertTrue ( ult . isClosed (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testResultSetClose"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "TimeZoneKey   defaultZoneKey    =    TimeZoneKey . getTimeZoneKey ( TimeZone . getDefault (  )  . getID (  )  )  ;", "DateTimeZone   defaultZone    =    DateTimeZone . forTimeZone ( TimeZone . getDefault (  )  )  ;", "String   sql    =     \" SELECT   current _ timezone (  )    zone ,    TIMESTAMP    '  2  0  0  1  -  0  2  -  0  3     3  :  0  4  :  0  5  '    ts \"  ;", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( Statement   statement    =    connection . createStatement (  )  ; ResultSet   rs    =    statement . executeQuery ( sql )  )     {", "assertTrue ( rs . next (  )  )  ;", "assertEquals ( rs . getString (  \" zone \"  )  ,    defaultZoneKey . getId (  )  )  ;", "assertEquals ( rs . getTimestamp (  \" ts \"  )  ,    new   Timestamp ( new   DateTime (  2  0  0  1  ,     2  ,     3  ,     3  ,     4  ,     5  ,    defaultZone )  . getMillis (  )  )  )  ;", "}", "connection . unwrap ( Connection . class )  . setTimeZoneId (  \" UTC \"  )  ;", "try    ( Statement   statement    =    connection . createStatement (  )  ; ResultSet   rs    =    statement . executeQuery ( sql )  )     {", "assertTrue ( rs . next (  )  )  ;", "assertEquals ( rs . getString (  \" zone \"  )  ,     \" UTC \"  )  ;", "assertEquals ( rs . getTimestamp (  \" ts \"  )  ,    new   Timestamp ( new   DateTime (  2  0  0  1  ,     2  ,     3  ,     3  ,     4  ,     5  ,    DateTimeZone . UTC )  . getMillis (  )  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testSetTimeZoneId"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    createConnection (  \" blackhole \"  ,     \" blackhole \"  )  )     {", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "assertFalse ( statement . execute (  \" INSERT   INTO   t _ table   VALUES    (  1  )  ,     (  2  )  \"  )  )  ;", "assertNull ( statement . getResultSet (  )  )  ;", "assertEquals ( statement . getUpdateCount (  )  ,     2  )  ;", "assertEquals ( statement . getLargeUpdateCount (  )  ,     2  )  ;", "assertTrue ( statement . execute (  \" SELECT    1  2  3    x ,     ' foo '    y ,    CAST ( NULL   AS   bigint )    z \"  )  )  ;", "ResultSet   resultSet    =    statement . getResultSet (  )  ;", "assertNotNull ( resultSet )  ;", "assertEquals ( statement . getUpdateCount (  )  ,     (  -  1  )  )  ;", "assertEquals ( statement . getLargeUpdateCount (  )  ,     (  -  1  )  )  ;", "resultSet . close (  )  ;", "assertFalse ( statement . execute (  \" INSERT   INTO   t _ table   VALUES    (  1  )  ,     (  2  )  ,     (  3  )  \"  )  )  ;", "assertNull ( statement . getResultSet (  )  )  ;", "assertEquals ( statement . getUpdateCount (  )  ,     3  )  ;", "assertEquals ( statement . getLargeUpdateCount (  )  ,     3  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testStatementReuse"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "try    ( ResultSet   rs    =    statement . executeQuery (  (  \" SELECT    \"     +     (  (  (  (  (  (  (  (  (  (  (  \"       TIME    '  3  :  0  4  :  0  5  '    as   a \"     +     \"  ,    TIME    '  6  :  0  7  :  0  8     +  0  6  :  1  7  '    as   b \"  )     +     \"  ,    TIME    '  9  :  1  0  :  1  1    Europe / Berlin '    as   c \"  )     +     \"  ,    TIMESTAMP    '  2  0  0  1  -  0  2  -  0  3     3  :  0  4  :  0  5  '    as   d \"  )     +     \"  ,    TIMESTAMP    '  2  0  0  4  -  0  5  -  0  6     6  :  0  7  :  0  8     +  0  6  :  1  7  '    as   e \"  )     +     \"  ,    TIMESTAMP    '  2  0  0  7  -  0  8  -  0  9     9  :  1  0  :  1  1    Europe / Berlin '    as   f \"  )     +     \"  ,    DATE    '  2  0  1  3  -  0  3  -  2  2  '    as   g \"  )     +     \"  ,    INTERVAL    '  1  2  3  -  1  1  '    YEAR   TO   MONTH   as   h \"  )     +     \"  ,    INTERVAL    '  1  1     2  2  :  3  3  :  4  4  .  5  5  5  '    DAY   TO   SECOND   as   i \"  )     +     \"  ,    REAL    '  1  2  3  .  4  5  '    as   j \"  )     +     \"  ,    REAL    ' Infinity '    as   k \"  )     +     \"  \"  )  )  )  )     {", "assertTrue ( rs . next (  )  )  ;", "assertEquals ( rs . getTime (  1  )  ,    new   Time ( new   DateTime (  1  9  7  0  ,     1  ,     1  ,     3  ,     4  ,     5  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getTime (  1  ,     . ASIA _ ORAL _ CALENDAR )  ,    new   Time ( new   DateTime (  1  9  7  0  ,     1  ,     1  ,     3  ,     4  ,     5  ,     . ASIA _ ORAL _ ZONE )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getObject (  1  )  ,    new   Time ( new   DateTime (  1  9  7  0  ,     1  ,     1  ,     3  ,     4  ,     5  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getTime (  \" a \"  )  ,    new   Time ( new   DateTime (  1  9  7  0  ,     1  ,     1  ,     3  ,     4  ,     5  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getTime (  \" a \"  ,     . ASIA _ ORAL _ CALENDAR )  ,    new   Time ( new   DateTime (  1  9  7  0  ,     1  ,     1  ,     3  ,     4  ,     5  ,     . ASIA _ ORAL _ ZONE )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getObject (  \" a \"  )  ,    new   Time ( new   DateTime (  1  9  7  0  ,     1  ,     1  ,     3  ,     4  ,     5  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getTime (  2  )  ,    new   Time ( new   DateTime (  1  9  7  0  ,     1  ,     1  ,     6  ,     7  ,     8  ,    DateTimeZone . forOffsetHoursMinutes (  6  ,     1  7  )  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getTime (  2  ,     . ASIA _ ORAL _ CALENDAR )  ,    new   Time ( new   DateTime (  1  9  7  0  ,     1  ,     1  ,     6  ,     7  ,     8  ,    DateTimeZone . forOffsetHoursMinutes (  6  ,     1  7  )  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getObject (  2  )  ,    new   Time ( new   DateTime (  1  9  7  0  ,     1  ,     1  ,     6  ,     7  ,     8  ,    DateTimeZone . forOffsetHoursMinutes (  6  ,     1  7  )  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getTime (  \" b \"  )  ,    new   Time ( new   DateTime (  1  9  7  0  ,     1  ,     1  ,     6  ,     7  ,     8  ,    DateTimeZone . forOffsetHoursMinutes (  6  ,     1  7  )  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getTime (  \" b \"  ,     . ASIA _ ORAL _ CALENDAR )  ,    new   Time ( new   DateTime (  1  9  7  0  ,     1  ,     1  ,     6  ,     7  ,     8  ,    DateTimeZone . forOffsetHoursMinutes (  6  ,     1  7  )  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getObject (  \" b \"  )  ,    new   Time ( new   DateTime (  1  9  7  0  ,     1  ,     1  ,     6  ,     7  ,     8  ,    DateTimeZone . forOffsetHoursMinutes (  6  ,     1  7  )  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getTime (  3  )  ,    new   Time ( new   DateTime (  1  9  7  0  ,     1  ,     1  ,     9  ,     1  0  ,     1  1  ,    DateTimeZone . forID (  \" Europe / Berlin \"  )  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getTime (  3  ,     . ASIA _ ORAL _ CALENDAR )  ,    new   Time ( new   DateTime (  1  9  7  0  ,     1  ,     1  ,     9  ,     1  0  ,     1  1  ,    DateTimeZone . forID (  \" Europe / Berlin \"  )  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getObject (  3  )  ,    new   Time ( new   DateTime (  1  9  7  0  ,     1  ,     1  ,     9  ,     1  0  ,     1  1  ,    DateTimeZone . forID (  \" Europe / Berlin \"  )  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getTime (  \" c \"  )  ,    new   Time ( new   DateTime (  1  9  7  0  ,     1  ,     1  ,     9  ,     1  0  ,     1  1  ,    DateTimeZone . forID (  \" Europe / Berlin \"  )  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getTime (  \" c \"  ,     . ASIA _ ORAL _ CALENDAR )  ,    new   Time ( new   DateTime (  1  9  7  0  ,     1  ,     1  ,     9  ,     1  0  ,     1  1  ,    DateTimeZone . forID (  \" Europe / Berlin \"  )  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getObject (  \" c \"  )  ,    new   Time ( new   DateTime (  1  9  7  0  ,     1  ,     1  ,     9  ,     1  0  ,     1  1  ,    DateTimeZone . forID (  \" Europe / Berlin \"  )  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getTimestamp (  4  )  ,    new   Timestamp ( new   DateTime (  2  0  0  1  ,     2  ,     3  ,     3  ,     4  ,     5  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getTimestamp (  4  ,     . ASIA _ ORAL _ CALENDAR )  ,    new   Timestamp ( new   DateTime (  2  0  0  1  ,     2  ,     3  ,     3  ,     4  ,     5  ,     . ASIA _ ORAL _ ZONE )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getObject (  4  )  ,    new   Timestamp ( new   DateTime (  2  0  0  1  ,     2  ,     3  ,     3  ,     4  ,     5  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getTimestamp (  \" d \"  )  ,    new   Timestamp ( new   DateTime (  2  0  0  1  ,     2  ,     3  ,     3  ,     4  ,     5  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getTimestamp (  \" d \"  ,     . ASIA _ ORAL _ CALENDAR )  ,    new   Timestamp ( new   DateTime (  2  0  0  1  ,     2  ,     3  ,     3  ,     4  ,     5  ,     . ASIA _ ORAL _ ZONE )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getObject (  \" d \"  )  ,    new   Timestamp ( new   DateTime (  2  0  0  1  ,     2  ,     3  ,     3  ,     4  ,     5  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getTimestamp (  5  )  ,    new   Timestamp ( new   DateTime (  2  0  0  4  ,     5  ,     6  ,     6  ,     7  ,     8  ,    DateTimeZone . forOffsetHoursMinutes (  6  ,     1  7  )  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getTimestamp (  5  ,     . ASIA _ ORAL _ CALENDAR )  ,    new   Timestamp ( new   DateTime (  2  0  0  4  ,     5  ,     6  ,     6  ,     7  ,     8  ,    DateTimeZone . forOffsetHoursMinutes (  6  ,     1  7  )  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getObject (  5  )  ,    new   Timestamp ( new   DateTime (  2  0  0  4  ,     5  ,     6  ,     6  ,     7  ,     8  ,    DateTimeZone . forOffsetHoursMinutes (  6  ,     1  7  )  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getTimestamp (  \" e \"  )  ,    new   Timestamp ( new   DateTime (  2  0  0  4  ,     5  ,     6  ,     6  ,     7  ,     8  ,    DateTimeZone . forOffsetHoursMinutes (  6  ,     1  7  )  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getTimestamp (  \" e \"  ,     . ASIA _ ORAL _ CALENDAR )  ,    new   Timestamp ( new   DateTime (  2  0  0  4  ,     5  ,     6  ,     6  ,     7  ,     8  ,    DateTimeZone . forOffsetHoursMinutes (  6  ,     1  7  )  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getObject (  \" e \"  )  ,    new   Timestamp ( new   DateTime (  2  0  0  4  ,     5  ,     6  ,     6  ,     7  ,     8  ,    DateTimeZone . forOffsetHoursMinutes (  6  ,     1  7  )  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getTimestamp (  6  )  ,    new   Timestamp ( new   DateTime (  2  0  0  7  ,     8  ,     9  ,     9  ,     1  0  ,     1  1  ,    DateTimeZone . forID (  \" Europe / Berlin \"  )  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getTimestamp (  6  ,     . ASIA _ ORAL _ CALENDAR )  ,    new   Timestamp ( new   DateTime (  2  0  0  7  ,     8  ,     9  ,     9  ,     1  0  ,     1  1  ,    DateTimeZone . forID (  \" Europe / Berlin \"  )  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getObject (  6  )  ,    new   Timestamp ( new   DateTime (  2  0  0  7  ,     8  ,     9  ,     9  ,     1  0  ,     1  1  ,    DateTimeZone . forID (  \" Europe / Berlin \"  )  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getTimestamp (  \" f \"  )  ,    new   Timestamp ( new   DateTime (  2  0  0  7  ,     8  ,     9  ,     9  ,     1  0  ,     1  1  ,    DateTimeZone . forID (  \" Europe / Berlin \"  )  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getTimestamp (  \" f \"  ,     . ASIA _ ORAL _ CALENDAR )  ,    new   Timestamp ( new   DateTime (  2  0  0  7  ,     8  ,     9  ,     9  ,     1  0  ,     1  1  ,    DateTimeZone . forID (  \" Europe / Berlin \"  )  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getObject (  \" f \"  )  ,    new   Timestamp ( new   DateTime (  2  0  0  7  ,     8  ,     9  ,     9  ,     1  0  ,     1  1  ,    DateTimeZone . forID (  \" Europe / Berlin \"  )  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getDate (  7  )  ,    new   Date ( new   DateTime (  2  0  1  3  ,     3  ,     2  2  ,     0  ,     0  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getDate (  7  ,     . ASIA _ ORAL _ CALENDAR )  ,    new   Date ( new   DateTime (  2  0  1  3  ,     3  ,     2  2  ,     0  ,     0  ,     . ASIA _ ORAL _ ZONE )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getObject (  7  )  ,    new   Date ( new   DateTime (  2  0  1  3  ,     3  ,     2  2  ,     0  ,     0  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getDate (  \" g \"  )  ,    new   Date ( new   DateTime (  2  0  1  3  ,     3  ,     2  2  ,     0  ,     0  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getDate (  \" g \"  ,     . ASIA _ ORAL _ CALENDAR )  ,    new   Date ( new   DateTime (  2  0  1  3  ,     3  ,     2  2  ,     0  ,     0  ,     . ASIA _ ORAL _ ZONE )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getObject (  \" g \"  )  ,    new   Date ( new   DateTime (  2  0  1  3  ,     3  ,     2  2  ,     0  ,     0  )  . getMillis (  )  )  )  ;", "assertEquals ( rs . getObject (  8  )  ,    new   PrestoIntervalYearMonth (  1  2  3  ,     1  1  )  )  ;", "assertEquals ( rs . getObject (  \" h \"  )  ,    new   PrestoIntervalYearMonth (  1  2  3  ,     1  1  )  )  ;", "assertEquals ( rs . getObject (  9  )  ,    new   PrestoIntervalDayTime (  1  1  ,     2  2  ,     3  3  ,     4  4  ,     5  5  5  )  )  ;", "assertEquals ( rs . getObject (  \" i \"  )  ,    new   PrestoIntervalDayTime (  1  1  ,     2  2  ,     3  3  ,     4  4  ,     5  5  5  )  )  ;", "assertEquals ( rs . getFloat (  1  0  )  ,     1  2  3  .  4  5 F )  ;", "assertEquals ( rs . getObject (  1  0  )  ,     1  2  3  .  4  5 F )  ;", "assertEquals ( rs . getFloat (  \" j \"  )  ,     1  2  3  .  4  5 F )  ;", "assertEquals ( rs . getObject (  \" j \"  )  ,     1  2  3  .  4  5 F )  ;", "assertEquals ( rs . getFloat (  1  1  )  ,    Float . POSITIVE _ INFINITY )  ;", "assertEquals ( rs . getObject (  1  1  )  ,    Float . POSITIVE _ INFINITY )  ;", "assertEquals ( rs . getFloat (  \" k \"  )  ,    Float . POSITIVE _ INFINITY )  ;", "assertEquals ( rs . getObject (  \" k \"  )  ,    Float . POSITIVE _ INFINITY )  ;", "assertFalse ( rs . next (  )  )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["testTypes"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "CountDownLatch   queryFinished    =    new   CountDownLatch (  1  )  ;", "AtomicReference < String >    queryId    =    new   AtomicReference <  >  (  )  ;", "AtomicReference < Throwable >    queryFailure    =    new   AtomicReference <  >  (  )  ;", "String   queryUuid    =     (  \"  /  *     \"     +     ( UUID . randomUUID (  )  . toString (  )  )  )     +     \"     *  /  \"  ;", "try    ( Connection   connection    =    createConnection (  \" blackhole \"  ,     \" default \"  )  ; Statement   statement    =    connection . createStatement (  )  )     {", "executorService . execute (  (  )     -  >     {", "try    {", "statement . executeUpdate (  (  \" CREATE   TABLE   test _ cancel _ create   AS   SELECT    *    FROM   slow _ test _ table    \"     +    queryUuid )  )  ;", "}    catch    ( SQLException   t )     {", "queryFailure . set ( t )  ;", "}    finally    {", "queryFinished . countDown (  )  ;", "}", "}  )  ;", "while    ( true )     {", "Optional < QueryState >    state    =    findQueryState ( queryUuid )  ;", "if    ( state . isent (  )  )     {", "assertFalse ( state . get (  )  . isDone (  )  )  ;", "break ;", "}", "TimeUnit . MILLISECONDS . sleep (  5  0  )  ;", "}", "statement . cancel (  )  ;", "queryFinished . await (  1  0  ,    TimeUnit . SECONDS )  ;", "assertNotNull ( queryFailure . get (  )  )  ;", "assertEquals ( findQueryState ( queryUuid )  ,    Optional . of ( FAILED )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testUpdateCancelExplicit"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   ignored    =    DriverManager . getConnection ( String . format (  \" jdbc : presto :  /  /  % s \"  ,    server . getAddress (  )  )  )  )     {", "fail (  \" expected   exception \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["testUserIsRequired"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "long   start    =    System . nanoTime (  )  ;", "while    (  ( server . refhNodes (  )  . getActiveNodes (  )  . size (  )  )     <     1  )     {", "Assertions . assertLessThan ( nanosSince ( start )  ,    new   Duration (  1  0  ,    TimeUnit . SECONDS )  )  ;", "TimeUnit . MILLISECONDS . sleep (  1  0  )  ;", "}", "}", "METHOD_END"], "methodName": ["waitForNodeRefresh"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriver"}, {"methodBody": ["METHOD_START", "{", "String   url    =    String . format (  \" jdbc : presto :  /  / localhost :  % s \"  ,    server . getHttpsAddress (  )  . getPort (  )  )  ;", "Properties   properties    =    new   Properties (  )  ;", "properties . setProperty (  \" user \"  ,     \" test \"  )  ;", "properties . setProperty (  \" SSL \"  ,     \" true \"  )  ;", "properties . setProperty (  \" SSLTrustStorePath \"  ,    getResource (  \" localhost . truststore \"  )  . getPath (  )  )  ;", "properties . setProperty (  \" SSLTrustStorePassword \"  ,     \" changeit \"  )  ;", "properties . putAll ( additionalProperties )  ;", "return   DriverManager . getConnection ( url ,    properties )  ;", "}", "METHOD_END"], "methodName": ["createConnection"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriverAuth"}, {"methodBody": ["METHOD_START", "{", "Logging . initialize (  )  ;", "URL   resource    =    getClass (  )  . getClassLoader (  )  . getResource (  \"  3  3  . privateKey \"  )  ;", "assertNotNull ( resource ,     \" key   directory   not   found \"  )  ;", "File   keyDir    =    new   File ( resource . getFile (  )  )  . getAbsoluteFile (  )  . getParentFile (  )  ;", "defaultKey    =    Base 6  4  . getMimeDecoder (  )  . decode ( asCharSource ( new   File ( keyDir ,     \" default - key . key \"  )  ,    StandardCharsets . US _ ASCII )  . read (  )  . getBytes ( StandardCharsets . US _ ASCII )  )  ;", "hmac 2  2  2     =    Base 6  4  . getMimeDecoder (  )  . decode ( asCharSource ( new   File ( keyDir ,     \"  2  2  2  . key \"  )  ,    StandardCharsets . US _ ASCII )  . read (  )  . getBytes ( StandardCharsets . US _ ASCII )  )  ;", "privateKey 3  3     =    PemReader . loadPrivateKey ( new   File ( keyDir ,     \"  3  3  . privateKey \"  )  ,    Optional . empty (  )  )  ;", "server    =    new   server . testing . TestingPrestoServer ( true ,    ImmutableMap .  < String ,    String > builder (  )  . put (  \" http - server . authentication . type \"  ,     \" JWT \"  )  . put (  \" http . authentication . jwt . key - file \"  ,    new   File ( keyDir ,     \"  $  { KID }  . key \"  )  . toString (  )  )  . put (  \" http - server . https . enabled \"  ,     \" true \"  )  . put (  \" http - server . https . keystore . path \"  ,    getResource (  \" localhost . keystore \"  )  . getPath (  )  )  . put (  \" http - server . https . keystore . key \"  ,     \" changeit \"  )  . build (  )  ,    null ,    null ,    new   SqlParserOptions (  )  ,    ImmutableList . of (  )  )  ;", "server . installPlugin ( new   TpchPlugin (  )  )  ;", "server . createCatalog ( TestPrestoDriverAuth . TEST _ CATALOG ,     \" tpch \"  )  ;", "TestPrestoDriver . waitForNodeRefresh ( server )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriverAuth"}, {"methodBody": ["METHOD_START", "{", "TestPrestoDriver . closeQuietly ( server )  ;", "}", "METHOD_END"], "methodName": ["teardown"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriverAuth"}, {"methodBody": ["METHOD_START", "{", "String   accessToken    =    Jwts . builder (  )  . setSubject (  \" test \"  )  . signWith ( HS 5  1  2  ,    Base 6  4  . getEncoder (  )  . encodeToString (  \" bad - key \"  . getBytes ( StandardCharsets . US _ ASCII )  )  )  . compact (  )  ;", "try    ( Connection   connection    =    createConnection ( ImmutableMap . of (  \" accessToken \"  ,    accessToken )  )  )     {", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "statement . execute (  \" SELECT    1  2  3  \"  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testFailedBadHmacSignature"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriverAuth"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    createConnection ( ImmutableMap . of (  )  )  )     {", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "statement . execute (  \" SELECT    1  2  3  \"  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testFailedNoToken"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriverAuth"}, {"methodBody": ["METHOD_START", "{", "String   accessToken    =    Jwts . builder (  )  . setSubject (  \" test \"  )  . setHeaderParam ( KEY _ ID ,     \" unknown \"  )  . signWith ( RS 2  5  6  ,    privateKey 3  3  )  . compact (  )  ;", "try    ( Connection   connection    =    createConnection ( ImmutableMap . of (  \" accessToken \"  ,    accessToken )  )  )     {", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "statement . execute (  \" SELECT    1  2  3  \"  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testFailedUnknownPublicKey"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriverAuth"}, {"methodBody": ["METHOD_START", "{", "String   accessToken    =    Jwts . builder (  )  . setSubject (  \" test \"  )  . compact (  )  ;", "try    ( Connection   connection    =    createConnection ( ImmutableMap . of (  \" accessToken \"  ,    accessToken )  )  )     {", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "statement . execute (  \" SELECT    1  2  3  \"  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testFailedUnsigned"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriverAuth"}, {"methodBody": ["METHOD_START", "{", "String   accessToken    =    Jwts . builder (  )  . setSubject (  \" test \"  )  . setHeaderParam ( KEY _ ID ,     \"  4  2  \"  )  . signWith ( RS 2  5  6  ,    privateKey 3  3  )  . compact (  )  ;", "try    ( Connection   connection    =    createConnection ( ImmutableMap . of (  \" accessToken \"  ,    accessToken )  )  )     {", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "statement . execute (  \" SELECT    1  2  3  \"  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testFailedWrongPublicKey"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriverAuth"}, {"methodBody": ["METHOD_START", "{", "String   accessToken    =    Jwts . builder (  )  . setSubject (  \" test \"  )  . signWith ( HS 5  1  2  ,    defaultKey )  . compact (  )  ;", "try    ( Connection   connection    =    createConnection ( ImmutableMap . of (  \" accessToken \"  ,    accessToken )  )  )     {", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "assertTrue ( statement . execute (  \" SELECT    1  2  3  \"  )  )  ;", "ResultSet   rs    =    statement . getResultSet (  )  ;", "assertTrue ( rs . next (  )  )  ;", "assertEquals ( rs . getLong (  1  )  ,     1  2  3  )  ;", "assertFalse ( rs . next (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testSuccessDefaultKey"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriverAuth"}, {"methodBody": ["METHOD_START", "{", "String   accessToken    =    Jwts . builder (  )  . setSubject (  \" test \"  )  . setHeaderParam ( KEY _ ID ,     \"  2  2  2  \"  )  . signWith ( HS 5  1  2  ,    hmac 2  2  2  )  . compact (  )  ;", "try    ( Connection   connection    =    createConnection ( ImmutableMap . of (  \" accessToken \"  ,    accessToken )  )  )     {", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "assertTrue ( statement . execute (  \" SELECT    1  2  3  \"  )  )  ;", "ResultSet   rs    =    statement . getResultSet (  )  ;", "assertTrue ( rs . next (  )  )  ;", "assertEquals ( rs . getLong (  1  )  ,     1  2  3  )  ;", "assertFalse ( rs . next (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testSuccessHmac"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriverAuth"}, {"methodBody": ["METHOD_START", "{", "String   accessToken    =    Jwts . builder (  )  . setSubject (  \" test \"  )  . setHeaderParam ( KEY _ ID ,     \"  3  3  \"  )  . signWith ( RS 2  5  6  ,    privateKey 3  3  )  . compact (  )  ;", "try    ( Connection   connection    =    createConnection ( ImmutableMap . of (  \" accessToken \"  ,    accessToken )  )  )     {", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "assertTrue ( statement . execute (  \" SELECT    1  2  3  \"  )  )  ;", "ResultSet   rs    =    statement . getResultSet (  )  ;", "assertTrue ( rs . next (  )  )  ;", "assertEquals ( rs . getLong (  1  )  ,     1  2  3  )  ;", "assertFalse ( rs . next (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testSuccessPublicKey"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriverAuth"}, {"methodBody": ["METHOD_START", "{", "try    {", ". createDriverUri ( url )  ;", "fail (  \" expected   exception \"  )  ;", "}    catch    ( SQLException   e )     {", "assertNotNull ( e . getMessage (  )  )  ;", "if    (  !  ( e . getMessage (  )  . startsWith ( prefix )  )  )     {", "fail ( String . format (  \" expected :  <  % s >    to   start   with    <  % s >  \"  ,    e . getMessage (  )  ,    prefix )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["assertInvalid"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriverUri"}, {"methodBody": ["METHOD_START", "{", "URI   uri    =    parameters . getHttpUri (  )  ;", "assertEquals ( uri . getPort (  )  ,    port )  ;", "assertEquals ( uri . getScheme (  )  ,    scheme )  ;", "}", "METHOD_END"], "methodName": ["assertUriPortScheme"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriverUri"}, {"methodBody": ["METHOD_START", "{", "Properties   properties    =    new   Properties (  )  ;", "properties . setProperty (  \" user \"  ,     \" test \"  )  ;", "return   new    ( url ,    properties )  ;", "}", "METHOD_END"], "methodName": ["createDriverUri"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriverUri"}, {"methodBody": ["METHOD_START", "{", "PrestoDriverUri   parameters    =    TestPrestoDriverUri . createDriverUri (  \" presto :  /  / localhost :  8  0  8  0  ? password =  \"  )  ;", "assertEquals ( parameters . getProperties (  )  . getProperty (  \" password \"  )  ,     \"  \"  )  ;", "}", "METHOD_END"], "methodName": ["testEmptyPassword"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriverUri"}, {"methodBody": ["METHOD_START", "{", "new   PrestoDriverUri (  \" jdbc : presto :  /  / localhost :  8  0  8  0  ? user =  \"  ,    new   Properties (  )  )  ;", "}", "METHOD_END"], "methodName": ["testEmptyUser"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriverUri"}, {"methodBody": ["METHOD_START", "{", "TestPrestoDriverUri . assertInvalid (  \" jdbc : presto :  /  / localhost /  \"  ,     \" No   port   number   specified :  \"  )  ;", "TestPrestoDriverUri . assertInvalid (  \" jdbc : presto :  /  / localhost :  8  0  8  0  / hive / default / abc \"  ,     \" Invalid   path   segments   in   URL :  \"  )  ;", "TestPrestoDriverUri . assertInvalid (  \" jdbc : presto :  /  / localhost :  8  0  8  0  /  /  \"  ,     \" Catalog   name   is   empty :  \"  )  ;", "TestPrestoDriverUri . assertInvalid (  \" jdbc : presto :  /  / localhost :  8  0  8  0  /  / default \"  ,     \" Catalog   name   is   empty :  \"  )  ;", "TestPrestoDriverUri . assertInvalid (  \" jdbc : presto :  /  / localhost :  8  0  8  0  / a /  /  \"  ,     \" Schema   name   is   empty :  \"  )  ;", "TestPrestoDriverUri . assertInvalid (  \" jdbc : presto :  /  / localhost :  8  0  8  0  / hive / default ? ShoeSize =  1  3  \"  ,     \" Unrecognized   connection   property    ' ShoeSize '  \"  )  ;", "TestPrestoDriverUri . assertInvalid (  \" jdbc : presto :  /  / localhost :  8  0  8  0  / hive / default ? SSL =  \"  ,     \" Connection   property    ' SSL '    value   is   empty \"  )  ;", "TestPrestoDriverUri . assertInvalid (  \" presto :  /  / localhost :  8  0  8  0  / blackhole ? password = a & password = b \"  ,     \" Connection   property    ' password '    is   in   URL   multiple   times \"  )  ;", "TestPrestoDriverUri . assertInvalid (  \" presto :  /  / localhost :  8  0  8  0  / blackhole ? user = test 1  2  3  \"  ,     \" Connection   property    ' user '    is   both   in   the   URL   and   an   argument \"  )  ;", "TestPrestoDriverUri . assertInvalid (  \" presto :  /  / localhost :  8  0  8  0  ? socksProxy = localhost :  1  0  8  0  & httpProxy = localhost :  8  8  8  8  \"  ,     \" Connection   property    ' socksProxy '    is   not   allowed \"  )  ;", "TestPrestoDriverUri . assertInvalid (  \" presto :  /  / localhost :  8  0  8  0  ? httpProxy = localhost :  8  8  8  8  & socksProxy = localhost :  1  0  8  0  \"  ,     \" Connection   property    ' socksProxy '    is   not   allowed \"  )  ;", "TestPrestoDriverUri . assertInvalid (  \" jdbc : presto :  /  / localhost :  8  0  8  0  ? SSL =  0  \"  ,     \" Connection   property    ' SSL '    value   is   invalid :     0  \"  )  ;", "TestPrestoDriverUri . assertInvalid (  \" jdbc : presto :  /  / localhost :  8  0  8  0  ? SSL =  1  \"  ,     \" Connection   property    ' SSL '    value   is   invalid :     1  \"  )  ;", "TestPrestoDriverUri . assertInvalid (  \" jdbc : presto :  /  / localhost :  8  0  8  0  ? SSL =  2  \"  ,     \" Connection   property    ' SSL '    value   is   invalid :     2  \"  )  ;", "TestPrestoDriverUri . assertInvalid (  \" jdbc : presto :  /  / localhost :  8  0  8  0  ? SSL = abc \"  ,     \" Connection   property    ' SSL '    value   is   invalid :    abc \"  )  ;", "TestPrestoDriverUri . assertInvalid (  \" jdbc : presto :  /  / localhost :  8  0  8  0  ? SSL = true & SSLKeyStorePassword = password \"  ,     \" Connection   property    ' SSLKeyStorePassword '    is   not   allowed \"  )  ;", "TestPrestoDriverUri . assertInvalid (  \" jdbc : presto :  /  / localhost :  8  0  8  0  ? SSL = true & SSLTrustStorePassword = password \"  ,     \" Connection   property    ' SSLTrustStorePassword '    is   not   allowed \"  )  ;", "TestPrestoDriverUri . assertInvalid (  \" jdbc : presto :  /  / localhost :  8  0  8  0  ? SSLKeyStorePath = keystore . jks \"  ,     \" Connection   property    ' SSLKeyStorePath '    is   not   allowed \"  )  ;", "TestPrestoDriverUri . assertInvalid (  \" jdbc : presto :  /  / localhost :  8  0  8  0  ? SSLTrustStorePath = truststore . jks \"  ,     \" Connection   property    ' SSLTrustStorePath '    is   not   allowed \"  )  ;", "TestPrestoDriverUri . assertInvalid (  \" jdbc : presto :  /  / localhost :  8  0  8  0  ? SSLKeyStorePassword = password \"  ,     \" Connection   property    ' SSLKeyStorePassword '    is   not   allowed \"  )  ;", "TestPrestoDriverUri . assertInvalid (  \" jdbc : presto :  /  / localhost :  8  0  8  0  ? SSLTrustStorePassword = password \"  ,     \" Connection   property    ' SSLTrustStorePassword '    is   not   allowed \"  )  ;", "TestPrestoDriverUri . assertInvalid (  \" jdbc : presto :  /  / localhost :  8  0  8  0  ? KerberosCredentialCachePath =  / test \"  ,     \" Connection   property    ' KerberosCredentialCachePath '    is   not   allowed \"  )  ;", "}", "METHOD_END"], "methodName": ["testInvalidUrls"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriverUri"}, {"methodBody": ["METHOD_START", "{", "PrestoDriverUri   parameters    =    TestPrestoDriverUri . createDriverUri (  \" presto :  /  / localhost :  8  0  8  0  ? password = secret \"  )  ;", "assertEquals ( parameters . getProperties (  )  . getProperty (  \" password \"  )  ,     \" secret \"  )  ;", "}", "METHOD_END"], "methodName": ["testNonEmptyPassword"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriverUri"}, {"methodBody": ["METHOD_START", "{", "new   PrestoDriverUri (  \" jdbc : presto :  /  / localhost :  8  0  8  0  \"  ,    new   Properties (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRequireUser"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriverUri"}, {"methodBody": ["METHOD_START", "{", "PrestoDriverUri   parameters    =    TestPrestoDriverUri . createDriverUri (  \" presto :  /  / localhost :  8  0  8  0  ? httpProxy = localhost :  5  6  7  8  \"  )  ;", "TestPrestoDriverUri . assertUriPortScheme ( parameters ,     8  0  8  0  ,     \" http \"  )  ;", "Properties   properties    =    parameters . getProperties (  )  ;", "assertEquals ( properties . getProperty ( ConnectionProperties . HTTP _ PROXY . getKey (  )  )  ,     \" localhost :  5  6  7  8  \"  )  ;", "}", "METHOD_END"], "methodName": ["testUriWithHttpProxy"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriverUri"}, {"methodBody": ["METHOD_START", "{", "PrestoDriverUri   parameters    =    TestPrestoDriverUri . createDriverUri (  \" presto :  /  / localhost :  8  0  8  0  ? socksProxy = localhost :  1  2  3  4  \"  )  ;", "TestPrestoDriverUri . assertUriPortScheme ( parameters ,     8  0  8  0  ,     \" http \"  )  ;", "Properties   properties    =    parameters . getProperties (  )  ;", "assertEquals ( properties . getProperty ( ConnectionProperties . SOCKS _ PROXY . getKey (  )  )  ,     \" localhost :  1  2  3  4  \"  )  ;", "}", "METHOD_END"], "methodName": ["testUriWithSocksProxy"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriverUri"}, {"methodBody": ["METHOD_START", "{", "PrestoDriverUri   parameters    =    TestPrestoDriverUri . createDriverUri (  \" presto :  /  / localhost :  8  0  8  0  / blackhole ? SSL = false \"  )  ;", "TestPrestoDriverUri . assertUriPortScheme ( parameters ,     8  0  8  0  ,     \" http \"  )  ;", "}", "METHOD_END"], "methodName": ["testUriWithSslDisabled"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriverUri"}, {"methodBody": ["METHOD_START", "{", "PrestoDriverUri   parameters    =    TestPrestoDriverUri . createDriverUri (  \" presto :  /  / localhost :  4  4  3  / blackhole ? SSL = false \"  )  ;", "TestPrestoDriverUri . assertUriPortScheme ( parameters ,     4  4  3  ,     \" http \"  )  ;", "}", "METHOD_END"], "methodName": ["testUriWithSslDisabledUsing443"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriverUri"}, {"methodBody": ["METHOD_START", "{", "PrestoDriverUri   parameters    =    TestPrestoDriverUri . createDriverUri (  \" presto :  /  / localhost :  8  0  8  0  / blackhole ? SSL = true \"  )  ;", "TestPrestoDriverUri . assertUriPortScheme ( parameters ,     8  0  8  0  ,     \" https \"  )  ;", "Properties   properties    =    parameters . getProperties (  )  ;", "assertNull ( properties . getProperty ( ConnectionProperties . SSL _ TRUST _ STORE _ PATH . getKey (  )  )  )  ;", "assertNull ( properties . getProperty ( ConnectionProperties . SSL _ TRUST _ STORE _ PASSWORD . getKey (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testUriWithSslEnabled"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriverUri"}, {"methodBody": ["METHOD_START", "{", "PrestoDriverUri   parameters    =    TestPrestoDriverUri . createDriverUri (  \" presto :  /  / localhost :  8  0  8  0  / blackhole ? SSL = true & SSLTrustStorePath = truststore . jks & SSLTrustStorePassword = password \"  )  ;", "TestPrestoDriverUri . assertUriPortScheme ( parameters ,     8  0  8  0  ,     \" https \"  )  ;", "Properties   properties    =    parameters . getProperties (  )  ;", "assertEquals ( properties . getProperty ( ConnectionProperties . SSL _ TRUST _ STORE _ PATH . getKey (  )  )  ,     \" truststore . jks \"  )  ;", "assertEquals ( properties . getProperty ( ConnectionProperties . SSL _ TRUST _ STORE _ PASSWORD . getKey (  )  )  ,     \" password \"  )  ;", "}", "METHOD_END"], "methodName": ["testUriWithSslEnabledPassword"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriverUri"}, {"methodBody": ["METHOD_START", "{", "PrestoDriverUri   parameters    =    TestPrestoDriverUri . createDriverUri (  \" presto :  /  / localhost :  8  0  8  0  / blackhole ? SSL = true & SSLTrustStorePath = truststore . jks \"  )  ;", "TestPrestoDriverUri . assertUriPortScheme ( parameters ,     8  0  8  0  ,     \" https \"  )  ;", "Properties   properties    =    parameters . getProperties (  )  ;", "assertEquals ( properties . getProperty ( ConnectionProperties . SSL _ TRUST _ STORE _ PATH . getKey (  )  )  ,     \" truststore . jks \"  )  ;", "assertNull ( properties . getProperty ( ConnectionProperties . SSL _ TRUST _ STORE _ PASSWORD . getKey (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testUriWithSslEnabledPathOnly"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriverUri"}, {"methodBody": ["METHOD_START", "{", "PrestoDriverUri   parameters    =    TestPrestoDriverUri . createDriverUri (  \" presto :  /  / localhost :  4  4  3  / blackhole \"  )  ;", "TestPrestoDriverUri . assertUriPortScheme ( parameters ,     4  4  3  ,     \" https \"  )  ;", "}", "METHOD_END"], "methodName": ["testUriWithSslEnabledUsing443"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriverUri"}, {"methodBody": ["METHOD_START", "{", "PrestoDriverUri   parameters    =    TestPrestoDriverUri . createDriverUri (  \" presto :  /  / localhost :  8  0  8  0  / blackhole \"  )  ;", "TestPrestoDriverUri . assertUriPortScheme ( parameters ,     8  0  8  0  ,     \" http \"  )  ;", "}", "METHOD_END"], "methodName": ["testUriWithoutSsl"], "fileName": "com.facebook.presto.jdbc.TestPrestoDriverUri"}, {"methodBody": ["METHOD_START", "{", "String   url    =    String . format (  \" jdbc : presto :  /  /  % s \"  ,    server . url (  \"  /  \"  )  . uri (  )  . getAuthority (  )  )  ;", "return   DriverManager . getConnection ( url ,     \" test \"  ,    null )  ;", "}", "METHOD_END"], "methodName": ["createConnection"], "fileName": "com.facebook.presto.jdbc.TestProgressMonitor"}, {"methodBody": ["METHOD_START", "{", "List < Column >    columns    =    ImmutableList . of ( new   Column (  \"  _ col 0  \"  ,    BigintType . BIGINT )  )  ;", "return   ImmutableList .  < String > builder (  )  . add ( newQueryResults ( null ,     1  ,    null ,    null ,     \" QUEUED \"  )  )  . add ( newQueryResults (  1  ,     2  ,    columns ,    null ,     \" RUNNING \"  )  )  . add ( newQueryResults (  1  ,     3  ,    columns ,    null ,     \" RUNNING \"  )  )  . add ( newQueryResults (  0  ,     4  ,    columns ,    ImmutableList . of ( ImmutableList . of (  2  5  3  1  6  1  )  )  ,     \" RUNNING \"  )  )  . add ( newQueryResults ( null ,    null ,    columns ,    null ,     \" FINISHED \"  )  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["createResults"], "fileName": "com.facebook.presto.jdbc.TestProgressMonitor"}, {"methodBody": ["METHOD_START", "{", "String   queryId    =     \"  2  0  1  6  0  1  2  8  _  2  1  4  7  1  0  _  0  0  0  1  2  _ rk 6  8 b \"  ;", "QueryResults   queryResults    =    new   QueryResults ( queryId ,    server . url (  (  \"  / query . html ?  \"     +    queryId )  )  . uri (  )  ,     ( partialCancelId    =  =    null    ?    null    :    server . url ( String . format (  \"  / v 1  / stage /  % s .  % s \"  ,    queryId ,    partialCancelId )  )  . uri (  )  )  ,     ( nextUriId    =  =    null    ?    null    :    server . url ( String . format (  \"  / v 1  / statement /  % s /  % s \"  ,    queryId ,    nextUriId )  )  . uri (  )  )  ,    responseColumns ,    data ,    new   StatementStats ( state ,    state . equals (  \" QUEUED \"  )  ,    true ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,    null )  ,    null ,    null ,    null )  ;", "return    . QUERY _ RESULTS _ CODEC . toJson ( queryResults )  ;", "}", "METHOD_END"], "methodName": ["newQueryResults"], "fileName": "com.facebook.presto.jdbc.TestProgressMonitor"}, {"methodBody": ["METHOD_START", "{", "server    =    new   MockWebServer (  )  ;", "server . start (  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.jdbc.TestProgressMonitor"}, {"methodBody": ["METHOD_START", "{", "server . close (  )  ;", "}", "METHOD_END"], "methodName": ["teardown"], "fileName": "com.facebook.presto.jdbc.TestProgressMonitor"}, {"methodBody": ["METHOD_START", "{", "for    ( String   result    :    createResults (  )  )     {", "server . enqueue ( new   MockResponse (  )  . addHeader ( CONTENT _ TYPE ,     \" application / json \"  )  . setBody ( result )  )  ;", "}", "try    ( Connection   connection    =    createConnection (  )  )     {", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "PrestoStatement   prestoStatement    =    statement . unwrap ( PrestoStatement . class )  ;", ". RecordingProgressMonitor   progressMonitor    =    new    . RecordingProgressMonitor (  )  ;", "prestoStatement . setProgressMonitor ( progressMonitor )  ;", "try    ( ResultSet   rs    =    statement . executeQuery (  \" bogus   query   for   testing \"  )  )     {", "ResultSetMetaData   metadata    =    rs . getMetaData (  )  ;", "assertEquals ( metadata . getColumnCount (  )  ,     1  )  ;", "assertEquals ( metadata . getColumnName (  1  )  ,     \"  _ col 0  \"  )  ;", "assertTrue ( rs . next (  )  )  ;", "assertEquals ( rs . getLong (  1  )  ,     2  5  3  1  6  1 L )  ;", "assertEquals ( rs . getLong (  \"  _ col 0  \"  )  ,     2  5  3  1  6  1 L )  ;", "assertFalse ( rs . next (  )  )  ;", "}", "prestoStatement . clearProgressMonitor (  )  ;", "List < QueryStats >    queryStatsList    =    progressMonitor . finish (  )  ;", "Assertions . assertGreaterThanOrEqual ( queryStatsList . size (  )  ,     5  )  ;", "assertEquals ( queryStatsList . get (  0  )  . getState (  )  ,     \" QUEUED \"  )  ;", "assertEquals ( queryStatsList . get (  (  ( queryStatsList . size (  )  )     -     1  )  )  . getState (  )  ,     \" FINISHED \"  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["test"], "fileName": "com.facebook.presto.jdbc.TestProgressMonitor"}, {"methodBody": ["METHOD_START", "{", "server    =    new   MockWebServer (  )  ;", "server . start (  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.jdbc.TestQueryExecutor"}, {"methodBody": ["METHOD_START", "{", "server . close (  )  ;", "}", "METHOD_END"], "methodName": ["teardown"], "fileName": "com.facebook.presto.jdbc.TestQueryExecutor"}, {"methodBody": ["METHOD_START", "{", "ServerInfo   expected    =    new   ServerInfo ( NodeVersion . UNKNOWN ,     \" test \"  ,    true ,    Optional . of ( Duration . valueOf (  \"  2 m \"  )  )  )  ;", "server . enqueue ( new   MockResponse (  )  . addHeader ( CONTENT _ TYPE ,     \" application / json \"  )  . setBody (  . SERVER _ INFO _ CODEC . toJson ( expected )  )  )  ;", "QueryExecutor   executor    =    new   QueryExecutor ( new   OkHttpClient (  )  )  ;", "ServerInfo   actual    =    executor . getServerInfo ( server . url (  \"  / v 1  / info \"  )  . uri (  )  )  ;", "assertEquals ( actual . getEnvironment (  )  ,     \" test \"  )  ;", "assertEquals ( actual . getUptime (  )  ,    Optional . of ( Duration . valueOf (  \"  2 m \"  )  )  )  ;", "assertEquals ( server . getRequestCount (  )  ,     1  )  ;", "assertEquals ( server . takeRequest (  )  . getPath (  )  ,     \"  / v 1  / info \"  )  ;", "}", "METHOD_END"], "methodName": ["testGetServerInfo"], "fileName": "com.facebook.presto.jdbc.TestQueryExecutor"}]