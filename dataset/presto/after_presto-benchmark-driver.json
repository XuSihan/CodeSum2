[{"methodBody": ["METHOD_START", "{", "List < BenchmarkQuery >    queries    =    suite . selectQueries ( this . queries )  ;", "if    ( queries . isEmpty (  )  )     {", "return ;", "}", "Map < String ,    String >    properties    =    new   HashMap <  >  (  )  ;", "properties . putAll ( clientSession . getProperties (  )  )  ;", "properties . putAll ( suite . getSessionProperties (  )  )  ;", "ClientSession   session    =    ClientSession . builder ( clientSession )  . withProperties ( properties )  . build (  )  ;", "List < BenchmarkSchema >    benchmarkSchemas ;", "if    (  !  ( suite . getSchemaNameTemplates (  )  . isEmpty (  )  )  )     {", "List < String >    schemas    =    queryRunner . getSchemas ( session )  ;", "benchmarkSchemas    =    suite . selectSchemas ( schemas )  ;", "} else    {", "benchmarkSchemas    =    ImmutableList . of ( new   BenchmarkSchema ( session . getSchema (  )  )  )  ;", "}", "if    ( benchmarkSchemas . isEmpty (  )  )     {", "return ;", "}", "for    ( BenchmarkSchema   benchmarkSchema    :    benchmarkSchemas )     {", "for    ( BenchmarkQuery   benchmarkQuery    :    queries )     {", "session    =    ClientSession . builder ( session )  . withCatalog ( session . getCatalog (  )  )  . withSchema ( benchmarkSchema . getName (  )  )  . build (  )  ;", "BenchmarkQueryResult   result    =    queryRunner . execute ( suite ,    session ,    benchmarkQuery )  ;", "resultsStore . store ( benchmarkSchema ,    result )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["run"], "fileName": "com.facebook.presto.benchmark.driver.BenchmarkDriver"}, {"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . client . ClientSession ( BenchmarkDriverOptions . parseServer ( server )  ,    user ,     \" presto - benchmark \"  ,    ImmutableSet . of (  )  ,    null ,    catalog ,    schema ,    TimeZone . getDefault (  )  . getID (  )  ,    Locale . getDefault (  )  ,    ImmutableMap . of (  )  ,    BenchmarkDriverOptions . toProperties ( this . sessionProperties )  ,    ImmutableMap . of (  )  ,    null ,    clientRequestTimeout )  ;", "}", "METHOD_END"], "methodName": ["getClientSession"], "fileName": "com.facebook.presto.benchmark.driver.BenchmarkDriverOptions"}, {"methodBody": ["METHOD_START", "{", "server    =    server . toLowerCase ( Locale . ENGLISH )  ;", "if    (  ( server . startsWith (  \" http :  /  /  \"  )  )     |  |     ( server . startsWith (  \" https :  /  /  \"  )  )  )     {", "return   URI . create ( server )  ;", "}", "HostAndPort   host    =    HostAndPort . fromString ( server )  ;", "try    {", "return   new   URI (  \" http \"  ,    null ,    host . getHost (  )  ,    host . getPortOrDefault (  8  0  )  ,    null ,    null ,    null )  ;", "}    catch    ( URISyntaxExce   e )     {", "throw   new   IllegalArgumentExce ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["parseServer"], "fileName": "com.facebook.presto.benchmark.driver.BenchmarkDriverOptions"}, {"methodBody": ["METHOD_START", "{", "Builder < String ,    String >    builder    =    ImmutableMap . builder (  )  ;", "for    (  . ClientSessionProperty   sessionProperty    :    sessionProperties )     {", "String   name    =    sessionProperty . getName (  )  ;", "if    ( sessionProperty . getCatalog (  )  . isPresent (  )  )     {", "name    =     (  ( sessionProperty . getCatalog (  )  . get (  )  )     +     \"  .  \"  )     +    name ;", "}", "builder . put ( name ,    sessionProperty . getValue (  )  )  ;", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["toProperties"], "fileName": "com.facebook.presto.benchmark.driver.BenchmarkDriverOptions"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.benchmark.driver.BenchmarkQuery"}, {"methodBody": ["METHOD_START", "{", "return   sql ;", "}", "METHOD_END"], "methodName": ["getSql"], "fileName": "com.facebook.presto.benchmark.driver.BenchmarkQuery"}, {"methodBody": ["METHOD_START", "{", "return   tags ;", "}", "METHOD_END"], "methodName": ["getTags"], "fileName": "com.facebook.presto.benchmark.driver.BenchmarkQuery"}, {"methodBody": ["METHOD_START", "{", "return    (    query )     -  >    query . getName (  )  ;", "}", "METHOD_END"], "methodName": ["queryNameGetter"], "fileName": "com.facebook.presto.benchmark.driver.BenchmarkQuery"}, {"methodBody": ["METHOD_START", "{", "return   new   BenchmarkQueryResult ( suite ,    benchmarkQuery ,    BenchmarkQueryResult . Status . FAIL ,    Optional . of ( errorMessage )  ,    BenchmarkQueryResult . FAIL _ STAT ,    BenchmarkQueryResult . FAIL _ STAT ,    BenchmarkQueryResult . FAIL _ STAT )  ;", "}", "METHOD_END"], "methodName": ["failResult"], "fileName": "com.facebook.presto.benchmark.driver.BenchmarkQueryResult"}, {"methodBody": ["METHOD_START", "{", "return   benchmarkQuery ;", "}", "METHOD_END"], "methodName": ["getBenchmarkQuery"], "fileName": "com.facebook.presto.benchmark.driver.BenchmarkQueryResult"}, {"methodBody": ["METHOD_START", "{", "return   errorMessage ;", "}", "METHOD_END"], "methodName": ["getErrorMessage"], "fileName": "com.facebook.presto.benchmark.driver.BenchmarkQueryResult"}, {"methodBody": ["METHOD_START", "{", "return   processCpuTimeNanos ;", "}", "METHOD_END"], "methodName": ["getProcessCpuTimeNanos"], "fileName": "com.facebook.presto.benchmark.driver.BenchmarkQueryResult"}, {"methodBody": ["METHOD_START", "{", "return   queryCpuTimeNanos ;", "}", "METHOD_END"], "methodName": ["getQueryCpuTimeNanos"], "fileName": "com.facebook.presto.benchmark.driver.BenchmarkQueryResult"}, {"methodBody": ["METHOD_START", "{", "return   status ;", "}", "METHOD_END"], "methodName": ["getStatus"], "fileName": "com.facebook.presto.benchmark.driver.BenchmarkQueryResult"}, {"methodBody": ["METHOD_START", "{", "return   suite ;", "}", "METHOD_END"], "methodName": ["getSuite"], "fileName": "com.facebook.presto.benchmark.driver.BenchmarkQueryResult"}, {"methodBody": ["METHOD_START", "{", "return   wallTimeNanos ;", "}", "METHOD_END"], "methodName": ["getWallTimeNanos"], "fileName": "com.facebook.presto.benchmark.driver.BenchmarkQueryResult"}, {"methodBody": ["METHOD_START", "{", "return   new   BenchmarkQueryResult ( suite ,    benchmarkQuery ,    BenchmarkQueryResult . Status . PASS ,    Optional . empty (  )  ,    wallTimeNanos ,    processCpuTimeNanos ,    queryCpuTimeNanos )  ;", "}", "METHOD_END"], "methodName": ["passResult"], "fileName": "com.facebook.presto.benchmark.driver.BenchmarkQueryResult"}, {"methodBody": ["METHOD_START", "{", "failures    =     0  ;", "for    ( int   i    =     0  ;    i    <     ( warm )  ;  )     {", "try    {", "execute ( session ,    query . getName (  )  ,    query . getSql (  )  )  ;", "i +  +  ;", "failures    =     0  ;", "}    catch    ( BenchmarkDriverExecutionException   e )     {", "return   esult . failResult ( suite ,    query ,    e . getCause (  )  . getMessage (  )  )  ;", "}    catch    ( Exception   e )     {", "handleFailure ( e )  ;", "}", "}", "double [  ]    wallTimeNanos    =    new   double [ runs ]  ;", "double [  ]    processCpuTimeNanos    =    new   double [ runs ]  ;", "double [  ]    queryCpuTimeNanos    =    new   double [ runs ]  ;", "for    ( int   i    =     0  ;    i    <     ( runs )  ;  )     {", "try    {", "long   startCpuTime    =    getTotalCpuTime (  )  ;", "long   startWallTime    =    System . nanoTime (  )  ;", "StatementStats   statementStats    =    execute ( session ,    query . getName (  )  ,    query . getSql (  )  )  ;", "long   endWallTime    =    System . nanoTime (  )  ;", "long   endCpuTime    =    getTotalCpuTime (  )  ;", "wallTimeNanos [ i ]     =    endWallTime    -    startWallTime ;", "processCpuTimeNanos [ i ]     =    endCpuTime    -    startCpuTime ;", "queryCpuTimeNanos [ i ]     =    TimeUnit . MILLISECONDS . toNanos ( statementStats . getCpuTimeMillis (  )  )  ;", "i +  +  ;", "failures    =     0  ;", "}    catch    ( BenchmarkDriverExecutionException   e )     {", "return   esult . failResult ( suite ,    query ,    e . getCause (  )  . getMessage (  )  )  ;", "}    catch    ( Exception   e )     {", "handleFailure ( e )  ;", "}", "}", "return   esult . passResult ( suite ,    query ,    new   Stat ( wallTimeNanos )  ,    new   Stat ( processCpuTimeNanos )  ,    new   Stat ( queryCpuTimeNanos )  )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "com.facebook.presto.benchmark.driver.BenchmarkQueryRunner"}, {"methodBody": ["METHOD_START", "{", "return   execute ( session ,    query ,     (    queryData )     -  >     {", "}  ,     (    resultsError )     -  >     {", "throw   new   DriverExecutionException ( format (  \" Query    % s   failed :     % s \"  ,    name ,    resultsError . getMessage (  )  )  ,    getCause ( resultsError )  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "com.facebook.presto.benchmark.driver.BenchmarkQueryRunner"}, {"methodBody": ["METHOD_START", "{", "try    ( StatementClient   client    =    newStatementClient ( okHttpClient ,    session ,    query )  )     {", "while    ( client . isRunning (  )  )     {", "queryDataConsumer . accept ( client . currentData (  )  )  ;", "if    (  !  ( client . advance (  )  )  )     {", "break ;", "}", "}", "if    ( client . isClientAborted (  )  )     {", "throw   new   IllegalStateException (  \"    aborted   by   user \"  )  ;", "}", "if    ( client . isClientError (  )  )     {", "throw   new   IllegalStateException (  \"    is   gone    ( server   restarted ?  )  \"  )  ;", "}", "verify ( client . isFinished (  )  )  ;", "Error   resultsError    =    client . finalStatusInfo (  )  . getError (  )  ;", "if    ( resultsError    !  =    null )     {", "queryErrorConsumer . accept ( resultsError )  ;", "}", "return   client . finalStatusInfo (  )  . getStats (  )  ;", "}", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "com.facebook.presto.benchmark.driver.BenchmarkQueryRunner"}, {"methodBody": ["METHOD_START", "{", "Request   request    =    prepareGet (  )  . setUri ( uriBuilderFrom ( server )  . replacePath (  \"  / v 1  / service / presto \"  )  . build (  )  )  . build (  )  ;", "JsonResponseHandler < ServiceDescriptorsRepresentation >    responseHandler    =    createJsonResponseHandler ( JsonCodec . jsonCodec ( ServiceDescriptorsRepresentation . class )  )  ;", "ServiceDescriptorsRepresentation   serviceDescriptors    =    httpClient . execute ( request ,    responseHandler )  ;", "ImmutableList . Builder < URI >    addresses    =    ImmutableList . builder (  )  ;", "for    ( ServiceDescriptor   serviceDescriptor    :    serviceDescriptors . getServiceDescriptors (  )  )     {", "String   httpUri    =    serviceDescriptor . getProperties (  )  . get (  \" http \"  )  ;", "if    ( httpUri    !  =    null )     {", "addresses . add ( URI . create ( httpUri )  )  ;", "}", "}", "return   addresses . build (  )  ;", "}", "METHOD_END"], "methodName": ["getAllNodes"], "fileName": "com.facebook.presto.benchmark.driver.BenchmarkQueryRunner"}, {"methodBody": ["METHOD_START", "{", "if    (  ( queryError . getFailureInfo (  )  )     !  =    null )     {", "return   queryError . getFailureInfo (  )  . toException (  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getCause"], "fileName": "com.facebook.presto.benchmark.driver.BenchmarkQueryRunner"}, {"methodBody": ["METHOD_START", "{", "failures    =     0  ;", "while    ( true )     {", "ImmutableList . Builder < String >    schemas    =    ImmutableList . builder (  )  ;", "AtomicBoolean   success    =    new   AtomicBoolean ( true )  ;", "execute ( session ,     \" show   schemas \"  ,     (    qData )     -  >     {", "if    (  ( qData . getData (  )  )     !  =    null )     {", "for    ( List < Object >    objects    :    qData . getData (  )  )     {", "schemas . add ( objects . get (  0  )  . toString (  )  )  ;", "}", "}", "}  ,     (    qError )     -  >     {", "success . set ( false )  ;", "handleFailure ( getCause ( qError )  )  ;", "}  )  ;", "if    ( success . get (  )  )     {", "return   schemas . build (  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["getSchemas"], "fileName": "com.facebook.presto.benchmark.driver.BenchmarkQueryRunner"}, {"methodBody": ["METHOD_START", "{", "long   totalCpuTime    =     0  ;", "for    ( URI   ser    :    nodes )     {", "URI   addressUri    =    uriBuilderFrom ( ser )  . replacePath (  \"  / v 1  / jmx / mbean / lang : type = OperatingSystem / ProcessCpuTime \"  )  . build (  )  ;", "String   data    =    httpClient . execute ( prepareGet (  )  . setUri ( addressUri )  . build (  )  ,    createStringResponseHandler (  )  )  . getBody (  )  ;", "totalCpuTime    +  =    Long . parseLong ( data . trim (  )  )  ;", "}", "return   TimeUnit . NANOSECONDS . toNanos ( totalCpuTime )  ;", "}", "METHOD_END"], "methodName": ["getTotalCpuTime"], "fileName": "com.facebook.presto.benchmark.driver.BenchmarkQueryRunner"}, {"methodBody": ["METHOD_START", "{", "if    ( debug )     {", "if    ( e    =  =    null )     {", "e    =    new   timeException (  \" Unknown   error \"  )  ;", "}", "e . printStackTrace (  )  ;", "}", "( failures )  +  +  ;", "if    (  ( failures )     >     ( maxFailures )  )     {", "throw   new   timeException (  \" To   many   consecutive   failures \"  )  ;", "}", "try    {", "TimeUnit . SECONDS . sleep (  5  )  ;", "}    catch    ( InterruptedException   interruptedException )     {", "Thread . currentThread (  )  . interrupt (  )  ;", "throw   new   timeException ( interruptedException )  ;", "}", "}", "METHOD_END"], "methodName": ["handleFailure"], "fileName": "com.facebook.presto.benchmark.driver.BenchmarkQueryRunner"}, {"methodBody": ["METHOD_START", "{", "SortedSet < String >    tags    =    new   TreeSet <  >  (  )  ;", "for    ( Suite   suite    :    suites )     {", "for    ( Query   query    :    suite . selectQueries ( queries )  )     {", "tags . addAll ( query . getTags (  )  . keySet (  )  )  ;", "}", "for    ( RegexTemplate   regexTemplate    :    suite . getSchemaNameTemplates (  )  )     {", "tags . addAll ( regexTemplate . getFieldNames (  )  )  ;", "}", "}", "return   ImmutableList . copyOf ( tags )  ;", "}", "METHOD_END"], "methodName": ["getSelectedQueryTagNames"], "fileName": "com.facebook.presto.benchmark.driver.BenchmarkResultsPrinter"}, {"methodBody": ["METHOD_START", "{", "System . out . println ( Joiner . on (  '  \\ t '  )  . join ( values )  )  ;", "}", "METHOD_END"], "methodName": ["printRow"], "fileName": "com.facebook.presto.benchmark.driver.BenchmarkResultsPrinter"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.benchmark.driver.BenchmarkSchema"}, {"methodBody": ["METHOD_START", "{", "return   tags ;", "}", "METHOD_END"], "methodName": ["getTags"], "fileName": "com.facebook.presto.benchmark.driver.BenchmarkSchema"}, {"methodBody": ["METHOD_START", "{", "return   new   BenchmarkResultsPrinter ( suites ,    queries )  ;", "}", "METHOD_END"], "methodName": ["getResultsStore"], "fileName": "com.facebook.presto.benchmark.driver.PrestoBenchmarkDriver"}, {"methodBody": ["METHOD_START", "{", "PrintStream   out    =    System . out ;", "PrintStream   err    =    System . err ;", "try    {", "if    ( debug )     {", "Logging   logging    =    Logging . initialize (  )  ;", "logging . configure ( new   LoggingConfiguration (  )  )  ;", "logging . setLevel (  \"  \"  ,    DEBUG )  ;", "} else    {", "System . setOut ( new   PrintStream ( nullOutputStream (  )  )  )  ;", "System . setErr ( new   PrintStream ( nullOutputStream (  )  )  )  ;", "Logging   logging    =    Logging . initialize (  )  ;", "logging . configure ( new   LoggingConfiguration (  )  )  ;", "logging . disableConsole (  )  ;", "}", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}    finally    {", "System . setOut ( out )  ;", "System . setErr ( err )  ;", "}", "}", "METHOD_END"], "methodName": ["initializeLogging"], "fileName": "com.facebook.presto.benchmark.driver.PrestoBenchmarkDriver"}, {"methodBody": ["METHOD_START", "{", "new   PrestoBenchmarkDriver (  )  . run ( args )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.benchmark.driver.PrestoBenchmarkDriver"}, {"methodBody": ["METHOD_START", "{", "File [  ]    files    =    queriesDir . listFiles (  )  ;", "if    ( files    =  =    null )     {", "return   ImmutableList . of (  )  ;", "}", "Arrays . sort ( files )  ;", "ImmutableList . Builder < Query >    queries    =    ImmutableList . builder (  )  ;", "for    ( File   file    :    files )     {", "String   fileName    =    file . getName (  )  ;", "if    ( fileName . endsWith (  \"  . sql \"  )  )     {", "queries . add ( new   Query ( file )  )  ;", "}", "}", "return   queries . build (  )  ;", "}", "METHOD_END"], "methodName": ["readQueries"], "fileName": "com.facebook.presto.benchmark.driver.PrestoBenchmarkDriver"}, {"methodBody": ["METHOD_START", "{", "PrestoBenchmarkDriver   prestoBenchmarkDriver    =    singleCommand ( PrestoBenchmarkDriver . class )  . parse ( args )  ;", "if    ( prestoBenchmarkDriver . helpOption . showHelpIfRequested (  )  )     {", "return ;", "}", "BenchmarkDriverOptions   driverOptions    =    prestoBenchmarkDriver . benchmarkDriverOptions ;", "PrestoBenchmarkDriver . initializeLogging ( driverOptions . debug )  ;", "List < Suite >    suites    =    Suite . readSuites ( new   File ( driverOptions . suiteConfigFile )  )  ;", "if    (  !  ( driverOptions . suites . isEmpty (  )  )  )     {", "suites    =    suites . stream (  )  . filter (  (    suite )     -  >    driverOptions . suites . contains ( suite . getName (  )  )  )  . collect ( Collectors . toList (  )  )  ;", "}", "suites    =    ImmutableList . copyOf ( suites )  ;", "File   queriesDir    =    new   File ( driverOptions . sqlTemplateDir )  ;", "List < BenchmarkQuery >    allQueries    =    PrestoBenchmarkDriver . readQueries ( queriesDir )  ;", "Set < BenchmarkQuery >    queries ;", "if    ( driverOptions . queries . isEmpty (  )  )     {", "queries    =    suites . stream (  )  . map (  (    suite )     -  >    suite . selectQueries ( allQueries )  )  . flatMap ( List :  : stream )  . collect ( Collectors . toSet (  )  )  ;", "} else    {", "queries    =    driverOptions . queries . stream (  )  . map ( Pattern :  : compile )  . map (  (    pattern )     -  >    allQueries . stream (  )  . filter (  (    query )     -  >    pattern . matcher ( query . getName (  )  )  . matches (  )  )  )  . flatMap ( Function . identity (  )  )  . collect ( Collectors . toSet (  )  )  ;", "}", "BenchmarkResultsStore   resultsStore    =    getResultsStore ( suites ,    queries )  ;", "ClientSession   session    =    driverOptions . getClientSession (  )  ;", "try    ( BenchmarkDriver   benchmarkDriver    =    new   BenchmarkDriver ( resultsStore ,    session ,    queries ,    driverOptions . warm ,    driverOptions . runs ,    driverOptions . debug ,    driverOptions . maxFailures ,    Optional . ofNullable ( driverOptions . socksProxy )  )  )     {", "for    ( Suite   suite    :    suites )     {", "benchmarkDriver . run ( suite )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["run"], "fileName": "com.facebook.presto.benchmark.driver.PrestoBenchmarkDriver"}, {"methodBody": ["METHOD_START", "{", "return   fieldNames ;", "}", "METHOD_END"], "methodName": ["getFieldNames"], "fileName": "com.facebook.presto.benchmark.driver.RegexTemplate"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( value ,     \" value   is   null \"  )  ;", "Matchmatch =    patt . matchvalue )  ;", "if    (  !  ( matchmatches (  )  )  )     {", "return   Optional . empty (  )  ;", "}", "BuildString ,    String >    fieldsBuild =    ImmutableMap . build )  ;", "for    ( int   index    =     0  ;    index    <     ( fieldNames . size (  )  )  ;    index +  +  )     {", "String   fieldName    =    fieldNames . get ( index )  ;", "String   fieldValue    =    matchgroup (  ( index    +     1  )  )  ;", "if    ( fieldValue    !  =    null )     {", "fieldsBuildput ( fieldName ,    fieldValue )  ;", "}", "}", "Map < String ,    String >    fields    =    fieldsBuildbuild (  )  ;", "return   Optional . of ( fields )  ;", "}", "METHOD_END"], "methodName": ["parse"], "fileName": "com.facebook.presto.benchmark.driver.RegexTemplate"}, {"methodBody": ["METHOD_START", "{", "return   mean ;", "}", "METHOD_END"], "methodName": ["getMean"], "fileName": "com.facebook.presto.benchmark.driver.Stat"}, {"methodBody": ["METHOD_START", "{", "return   median ;", "}", "METHOD_END"], "methodName": ["getMedian"], "fileName": "com.facebook.presto.benchmark.driver.Stat"}, {"methodBody": ["METHOD_START", "{", "return   standardDeviation ;", "}", "METHOD_END"], "methodName": ["getStandardDeviation"], "fileName": "com.facebook.presto.benchmark.driver.Stat"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.benchmark.driver.Suite"}, {"methodBody": ["METHOD_START", "{", "return   queryNamePatterns ;", "}", "METHOD_END"], "methodName": ["getQueryNamePatterns"], "fileName": "com.facebook.presto.benchmark.driver.Suite"}, {"methodBody": ["METHOD_START", "{", "return   schemaNameTemplates ;", "}", "METHOD_END"], "methodName": ["getSchemaNameTemplates"], "fileName": "com.facebook.presto.benchmark.driver.Suite"}, {"methodBody": ["METHOD_START", "{", "return   sessionProperties ;", "}", "METHOD_END"], "methodName": ["getSessionProperties"], "fileName": "com.facebook.presto.benchmark.driver.Suite"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( file ,     \" file   is   null \"  )  ;", "checkArgument ( file . canRead (  )  ,     \" Cannot   read   file :     % s \"  ,    file )  ;", "byte [  ]    json    =    Files . readAllBytes ( file . toPath (  )  )  ;", "Map < String ,     . OptionsJson >    options    =    JsonCodec . mapJsonCodec ( String . class ,     . OptionsJson . class )  . fromJson ( json )  ;", "ImmutableList . Builder <  >    runOptions    =    ImmutableList . builder (  )  ;", "for    ( Map . Entry < String ,     . OptionsJson >    entry    :    options . entrySet (  )  )     {", "runOptions . add ( entry . getValue (  )  . to ( entry . getKey (  )  )  )  ;", "}", "return   runOptions . build (  )  ;", "}", "METHOD_END"], "methodName": ["readSuites"], "fileName": "com.facebook.presto.benchmark.driver.Suite"}, {"methodBody": ["METHOD_START", "{", "if    ( getQueryNamePatterns (  )  . isEmpty (  )  )     {", "return   ImmutableList . copyOf ( queries )  ;", "}", "List < BQuery >    filteredQueries    =    stream ( queries )  . filter (  (    query )     -  >    getQueryNamePatterns (  )  . stream (  )  . anyMatch (  (    pattern )     -  >    pattern . matcher ( query . getName (  )  )  . matches (  )  )  )  . collect ( toImmutableList (  )  )  ;", "return   filteredQueries ;", "}", "METHOD_END"], "methodName": ["selectQueries"], "fileName": "com.facebook.presto.benchmark.driver.Suite"}, {"methodBody": ["METHOD_START", "{", "if    ( schemaNameTemplates . isEmpty (  )  )     {", "return   ImmutableList . of (  )  ;", "}", "ImmutableList . Builder < BenchmarkSchema >    Schemas    =    ImmutableList . builder (  )  ;", "for    ( RegexTemplate   schemaNameTemplate    :    schemaNameTemplates )     {", "for    ( String   schema    :    schemas )     {", "Optional < Map < String ,    String >  >    tags    =    schemaNameTemplate . parse ( schema )  ;", "if    ( tags . isPresent (  )  )     {", "Schemas . add ( new   BenchmarkSchema ( schema ,    tags . get (  )  )  )  ;", "}", "}", "}", "return   Schemas . build (  )  ;", "}", "METHOD_END"], "methodName": ["selectSchemas"], "fileName": "com.facebook.presto.benchmark.driver.Suite"}, {"methodBody": ["METHOD_START", "{", "RegexTemplate   regexTemplate    =    new   RegexTemplate (  \" tpch _ sf (  ?  < scale >  .  *  ?  )  _  (  ?  < format >  .  *  ?  )  _  (  ?  < compression >  .  *  ?  )  \"  )  ;", "assertEquals ( regexTemplate . getFieldNames (  )  ,    ImmutableList . of (  \" scale \"  ,     \" format \"  ,     \" compression \"  )  )  ;", "assertEquals ( regexTemplate . parse (  \" tpch _ sf 1  0  0  _ orc _ zlib \"  )  ,    Optional . of ( ImmutableMap . of (  \" scale \"  ,     \"  1  0  0  \"  ,     \" format \"  ,     \" orc \"  ,     \" compression \"  ,     \" zlib \"  )  )  )  ;", "assertEquals ( regexTemplate . parse (  \" foo _ tpch _ sf 1  0  0  _ orc _ zlib \"  )  ,    Optional . empty (  )  )  ;", "assertEquals ( regexTemplate . parse (  \" tpch _ sf 1  0  0  _ orc \"  )  ,    Optional . empty (  )  )  ;", "assertEquals ( regexTemplate . parse (  \"  \"  )  ,    Optional . empty (  )  )  ;", "regexTemplate    =    new   RegexTemplate (  \" tpch _ sf (  ?  < scale >  .  *  ?  )  _  (  ?  < format >  .  *  ?  )  _  (  ?  < compression >  .  *  ?  )  \\  \\  . sql \"  )  ;", "assertEquals ( regexTemplate . parse (  \" tpch _ sf 1  0  0  _ orc _ zlib . sql \"  )  ,    Optional . of ( ImmutableMap . of (  \" scale \"  ,     \"  1  0  0  \"  ,     \" format \"  ,     \" orc \"  ,     \" compression \"  ,     \" zlib \"  )  )  )  ;", "assertEquals ( regexTemplate . parse (  \" tpch _ sf 1  0  0  _ orc _ zlibXsql \"  )  ,    Optional . empty (  )  )  ;", "assertEquals ( regexTemplate . parse (  \" tpch _ sf 1  0  0  _ orc _ zlib . sqlFoo \"  )  ,    Optional . empty (  )  )  ;", "}", "METHOD_END"], "methodName": ["test"], "fileName": "com.facebook.presto.benchmark.driver.TestRegexTemplate"}]