[{"methodBody": ["METHOD_START", "{", "return   columnNameGetter . apply ( tpchColumn )  ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.tpch.ColumnNaming"}, {"methodBody": ["METHOD_START", "{", "assertClose ( toOptional ( actual )  ,    toOptional ( expected )  ,    message )  ;", "}", "METHOD_END"], "methodName": ["assertClose"], "fileName": "com.facebook.presto.tpch.EstimateAssertion"}, {"methodBody": ["METHOD_START", "{", "if    ( actual   instanceof   Slice )     {", "aEquals ( actual . getClass (  )  ,    expected . getClass (  )  ,    message )  ;", "aEquals (  (  ( Slice )     ( actual )  )  . toStringUtf 8  (  )  ,     (  ( Slice )     ( expected )  )  . toStringUtf 8  (  )  )  ;", "} else    {", "double   actualDouble    =    toDouble ( actual )  ;", "double   expectedDouble    =    toDouble ( expected )  ;", "aEquals ( actualDouble ,    expectedDouble ,     ( expectedDouble    *     ( tolerance )  )  ,    message )  ;", "}", "}", "METHOD_END"], "methodName": ["assertClose"], "fileName": "com.facebook.presto.tpch.EstimateAssertion"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( actual . isPresent (  )  ,    expected . isPresent (  )  ,    message )  ;", "if    ( actual . isPresent (  )  )     {", "Object   actualValue    =    actual . get (  )  ;", "Object   expectedValue    =    expected . get (  )  ;", "assertClose ( actualValue ,    expectedValue ,    message )  ;", "}", "}", "METHOD_END"], "methodName": ["assertClose"], "fileName": "com.facebook.presto.tpch.EstimateAssertion"}, {"methodBody": ["METHOD_START", "{", "if    ( object   instanceof   Number )     {", "return    (  ( Number )     ( object )  )  . doubleValue (  )  ;", "} else    {", "String   message    =     \" Can ' t   compare   with   tolerance   objects   of   class    % s .    Use   aEquals .  \"  ;", "throw   new   UnsupportedOperationException ( String . format ( message ,    object . getClass (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["toDouble"], "fileName": "com.facebook.presto.tpch.EstimateAssertion"}, {"methodBody": ["METHOD_START", "{", "return   estimate . isValueUnknown (  )     ?    Optional . empty (  )     :    Optional . of ( estimate . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["toOptional"], "fileName": "com.facebook.presto.tpch.EstimateAssertion"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( Objects . equals ( actual ,    expected )  )  )     {", "fail ( String . format (  \" expected    [  % s ]    but   found    [  % s ]  \"  ,    expected . toString ( session )  ,    actual . toString ( session )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertTupleDomainEquals"], "fileName": "com.facebook.presto.tpch.TestTpchMetadata"}, {"methodBody": ["METHOD_START", "{", "return   createColumnStatistics ( Optional . of ( distinctValuesCount )  ,    Optional . of ( min )  ,    Optional . of ( max )  )  ;", "}", "METHOD_END"], "methodName": ["columnStatistics"], "fileName": "com.facebook.presto.tpch.TestTpchMetadata"}, {"methodBody": ["METHOD_START", "{", "return   createColumnStatistics ( Optional . of ( distinctValuesCount )  ,    Optional . of ( Slices . utf 8 Slice ( min )  )  ,    Optional . of ( Slices . utf 8 Slice ( max )  )  )  ;", "}", "METHOD_END"], "methodName": ["columnStatistics"], "fileName": "com.facebook.presto.tpch.TestTpchMetadata"}, {"methodBody": ["METHOD_START", "{", "List < TupleDomain < ColumnHandle >  >    valueDomains    =    Arrays . stream ( values )  . map (  (    value )     -  >    TestTpchMetadata . fixedValueTupleDomain ( tpchMetadata ,    column ,    Slices . utf 8 Slice ( value )  )  )  . collect ( Collectors . toList (  )  )  ;", "TupleDomain < ColumnHandle >    domain    =    TupleDomain . columnWiseUnion ( valueDomains )  ;", "return   new   spi . Constraint ( domain ,    convertToPredicate ( domain ,    column )  )  ;", "}", "METHOD_END"], "methodName": ["constraint"], "fileName": "com.facebook.presto.tpch.TestTpchMetadata"}, {"methodBody": ["METHOD_START", "{", "Preconditions . checkArgument (  (  ( columns . length )     >     0  )  ,     \" No   columns   given \"  )  ;", "return    (    bindings )     -  >     {", "for    ( TpchColumn   column    :    columns )     {", "ColumnHandle   columnHandle    =    t . toColumnHandle ( column )  ;", "if    ( bindings . containsKey ( columnHandle )  )     {", "NullableValue   nullableValue    =    Objects . requireNonNull ( bindings . get ( columnHandle )  ,     \" binding   is   null \"  )  ;", "if    (  !  ( PredicateUtils . convertToPredicate ( domain ,    t . toColumnHandle ( column )  )  . test ( nullableValue )  )  )     {", "return   false ;", "}", "}", "}", "return   true ;", "}  ;", "}", "METHOD_END"], "methodName": ["convertToPredicate"], "fileName": "com.facebook.presto.tpch.TestTpchMetadata"}, {"methodBody": ["METHOD_START", "{", "return   ColumnStatistics . builder (  )  . addRange (  (    rb )     -  >    rb . setDistinctValuesCount ( distinctValuesCount . map ( Estimate :  : new )  . orElse ( unknownValue (  )  )  )  . setLowValue ( min )  . setHighValue ( max )  . setFraction ( new   Estimate (  1  .  0  )  )  )  . setNullsFraction ( zeroValue (  )  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["createColumnStatistics"], "fileName": "com.facebook.presto.tpch.TestTpchMetadata"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( column ,     \" column   is   null \"  )  ;", "Objects . requireNonNull ( value ,     \" value   is   null \"  )  ;", "return   TupleDomain . fromFixedValues ( ImmutableMap . of ( tpchMetadata . toColumnHandle ( column )  ,    new   spi . predicate . NullableValue ( TpchMetadata . getPrestoType ( column )  ,    value )  )  )  ;", "}", "METHOD_END"], "methodName": ["fixedValueTupleDomain"], "fileName": "com.facebook.presto.tpch.TestTpchMetadata"}, {"methodBody": ["METHOD_START", "{", "return   TupleDomain . fromFixedValues ( ImmutableMap . of ( tpchMetadata . toColumnHandle ( column 1  )  ,    new   com . facebook . presto . spi . predicate . NullableValue ( TpchMetadata . getPrestoType ( column 1  )  ,    value 1  )  ,    tpchMetadata . toColumnHandle ( column 2  )  ,    new   com . facebook . presto . spi . predicate . NullableValue ( TpchMetadata . getPrestoType ( column 2  )  ,    value 2  )  )  )  ;", "}", "METHOD_END"], "methodName": ["fixedValueTupleDomain"], "fileName": "com.facebook.presto.tpch.TestTpchMetadata"}, {"methodBody": ["METHOD_START", "{", "List < ConnectorTableLayoutResult >    tableLayouts    =    tpchMetadata . getTableLayouts ( session ,    tableHandle ,    constraint ,    Optional . empty (  )  )  ;", "return   getOnlyElement ( tableLayouts )  ;", "}", "METHOD_END"], "methodName": ["getTableOnlyLayout"], "fileName": "com.facebook.presto.tpch.TestTpchMetadata"}, {"methodBody": ["METHOD_START", "{", "return   createColumnStatistics ( Optional . of (  (  ( double )     (  0  )  )  )  ,    Optional . empty (  )  ,    Optional . empty (  )  )  ;", "}", "METHOD_END"], "methodName": ["noColumnStatistics"], "fileName": "com.facebook.presto.tpch.TestTpchMetadata"}, {"methodBody": ["METHOD_START", "{", "return   createColumnStatistics ( Optional . empty (  )  ,    Optional . of ( min )  ,    Optional . of ( max )  )  ;", "}", "METHOD_END"], "methodName": ["rangeStatistics"], "fileName": "com.facebook.presto.tpch.TestTpchMetadata"}, {"methodBody": ["METHOD_START", "{", "return   createColumnStatistics ( Optional . empty (  )  ,    Optional . of ( Slices . utf 8 Slice ( min )  )  ,    Optional . of ( Slices . utf 8 Slice ( max )  )  )  ;", "}", "METHOD_END"], "methodName": ["rangeStatistics"], "fileName": "com.facebook.presto.tpch.TestTpchMetadata"}, {"methodBody": ["METHOD_START", "{", "TpchTableHandle   tableHandle    =    tpchMetadata . getTableHandle ( session ,    new   com . facebook . presto . spi . SchemaTableName ( schema ,    table . getTableName (  )  )  )  ;", "TableStatistics   tableStatistics    =    tpchMetadata . getTableStatistics ( session ,    tableHandle ,    constraint )  ;", "ColumnHandle   columnHandle    =    tpchMetadata . getColumnHandles ( session ,    tableHandle )  . get ( column . getSimplifiedColumnName (  )  )  ;", "ColumnStatistics   actual    =    tableStatistics . getColumnStatistics (  )  . get ( columnHandle )  ;", "EstimateAssertion   estimateAssertion    =    new   EstimateAssertion ( TestTpchMetadata . TOLERANCE )  ;", "estimateAssertion . assertClose ( actual . getOnlyRangeColumnStatistics (  )  . getDistinctValuesCount (  )  ,    expected . getOnlyRangeColumnStatistics (  )  . getDistinctValuesCount (  )  ,     \" distinctValuesCount - s   differ \"  )  ;", "estimateAssertion . assertClose ( actual . getOnlyRangeColumnStatistics (  )  . getDataSize (  )  ,    expected . getOnlyRangeColumnStatistics (  )  . getDataSize (  )  ,     \" dataSize - s   differ \"  )  ;", "estimateAssertion . assertClose ( actual . getNullsFraction (  )  ,    expected . getNullsFraction (  )  ,     \" nullsFraction - s   differ \"  )  ;", "estimateAssertion . assertClose ( actual . getOnlyRangeColumnStatistics (  )  . getLowValue (  )  ,    expected . getOnlyRangeColumnStatistics (  )  . getLowValue (  )  ,     \" lowValue - s   differ \"  )  ;", "estimateAssertion . assertClose ( actual . getOnlyRangeColumnStatistics (  )  . getHighValue (  )  ,    expected . getOnlyRangeColumnStatistics (  )  . getHighValue (  )  ,     \" highValue - s   differ \"  )  ;", "}", "METHOD_END"], "methodName": ["testColumnStats"], "fileName": "com.facebook.presto.tpch.TestTpchMetadata"}, {"methodBody": ["METHOD_START", "{", "testColumnStats ( schema ,    table ,    column ,    alwaysTrue (  )  ,    expectedStatistics )  ;", "}", "METHOD_END"], "methodName": ["testColumnStats"], "fileName": "com.facebook.presto.tpch.TestTpchMetadata"}, {"methodBody": ["METHOD_START", "{", "TpchTableHandle   tableHandle    =    tpchMetadata . getTableHandle ( session ,    new   com . facebook . presto . spi . SchemaTableName ( schema ,    table . getTableName (  )  )  )  ;", "TableStatistics   tableStatistics    =    tpchMetadata . getTableStatistics ( session ,    tableHandle ,    alwaysTrue (  )  )  ;", "assertTrue ( tableStatistics . getRowCount (  )  . isValueUnknown (  )  )  ;", "}", "METHOD_END"], "methodName": ["testNoTableStats"], "fileName": "com.facebook.presto.tpch.TestTpchMetadata"}, {"methodBody": ["METHOD_START", "{", "TpchTableHandle   tableHandle    =    tpchMetadata . getTableHandle ( session ,    new   com . facebook . presto . spi . SchemaTableName ( schema ,    table . getTableName (  )  )  )  ;", "TableStatistics   tableStatistics    =    tpchMetadata . getTableStatistics ( session ,    tableHandle ,    constraint )  ;", "double   actualRowCountValue    =    tableStatistics . getRowCount (  )  . getValue (  )  ;", "assertEquals ( tableStatistics . getRowCount (  )  ,    new   Estimate ( actualRowCountValue )  )  ;", "assertEquals ( actualRowCountValue ,    expectedRowCount ,     ( expectedRowCount    *     ( TestTpchMetadata . TOLERANCE )  )  )  ;", "}", "METHOD_END"], "methodName": ["testTableStats"], "fileName": "com.facebook.presto.tpch.TestTpchMetadata"}, {"methodBody": ["METHOD_START", "{", "testTableStats ( schema ,    table ,    alwaysTrue (  )  ,    expectedRowCount )  ;", "}", "METHOD_END"], "methodName": ["testTableStats"], "fileName": "com.facebook.presto.tpch.TestTpchMetadata"}, {"methodBody": ["METHOD_START", "{", "return    (  (  ( orderKey    &     (  ~  3  1  )  )     >  >  >     2  )     |     ( orderKey    &     7  )  )     -     1  ;", "}", "METHOD_END"], "methodName": ["rowNumberFromOrderKey"], "fileName": "com.facebook.presto.tpch.TpchBucketFunction"}, {"methodBody": ["METHOD_START", "{", "return   columnName ;", "}", "METHOD_END"], "methodName": ["getColumnName"], "fileName": "com.facebook.presto.tpch.TpchColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.facebook.presto.tpch.TpchColumnHandle"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   Integer . parseInt ( firstNonNull ( properties . get (  \" splits - per - node \"  )  ,    String . valueOf ( defaultSplitsPerNode )  )  )  ;", "}    catch    ( NumberFormatException   e )     {", "throw   new   IllegalArgumentException (  \" Invalid   property   splits - per - node \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["getSplitsPerNode"], "fileName": "com.facebook.presto.tpch.TpchConnectorFactory"}, {"methodBody": ["METHOD_START", "{", "double   totalRows    =    scaleBase    *    scaleFactor ;", "if    ( totalRows    >     ( Long . MAX _ VALUE )  )     {", "throw   new   IllegalArgumentException (  \" Total   rows   is   larger   than    2  ^  6  4  \"  )  ;", "}", "return    (  ( long )     ( totalRows )  )  ;", "}", "METHOD_END"], "methodName": ["calculateTotalRows"], "fileName": "com.facebook.presto.tpch.TpchMetadata"}, {"methodBody": ["METHOD_START", "{", "ObjectMapper   objectMapper    =    new   ObjectMapper (  )  . registerModule ( new   Jdk 8 Module (  )  )  ;", "TableStatisticsDRepository   tableStatisticsDRepository    =    new   TableStatisticsDRepository ( objectMapper )  ;", "return   new   StatisticsEstimator ( tableStatisticsDRepository )  ;", "}", "METHOD_END"], "methodName": ["createStatisticsEstimator"], "fileName": "com.facebook.presto.tpch.TpchMetadata"}, {"methodBody": ["METHOD_START", "{", "return   nullableValues . stream (  )  . filter ( PredicateUtils . convertToPredicate ( constraint . getSummary (  )  ,    toColumnHandle ( column )  )  )  . filter (  (    value )     -  >    constraint . predicate (  )  . test ( ImmutableMap . of ( toColumnHandle ( column )  ,    value )  )  )  . collect ( Collectors . toSet (  )  )  ;", "}", "METHOD_END"], "methodName": ["filterValues"], "fileName": "com.facebook.presto.tpch.TpchMetadata"}, {"methodBody": ["METHOD_START", "{", "io . airlift . tpch . TpchTable <  ?  >    table    =    io . airlift . tpch . TpchTable . getTable ( tpchTableHandle . getTableName (  )  )  ;", "return   columnHandles . get ( columnNaming . getName ( table . getColumn ( columnName )  )  )  ;", "}", "METHOD_END"], "methodName": ["getColumnHandle"], "fileName": "com.facebook.presto.tpch.TpchMetadata"}, {"methodBody": ["METHOD_START", "{", "TpchColumnType   tpchType    =    column . getType (  )  ;", "switch    ( tpchType . getBase (  )  )     {", "case   IDENTIFIER    :", "return   BIGINT ;", "case   INTEGER    :", "return   INTEGER ;", "case   DATE    :", "return   DATE ;", "case   DOUBLE    :", "return   DOUBLE ;", "case   VARCHAR    :", "return   createVarcharType (  (  ( int )     (  ( long )     ( tpchType . getPrecision (  )  . get (  )  )  )  )  )  ;", "}", "throw   new   IllegalArgumentException (  (  \" Unsupported   type    \"     +    tpchType )  )  ;", "}", "METHOD_END"], "methodName": ["getPrestoType"], "fileName": "com.facebook.presto.tpch.TpchMetadata"}, {"methodBody": ["METHOD_START", "{", "List < String >    schemaNames ;", "if    ( schemaNameOrNull    =  =    null )     {", "schemaNames    =    listSchemaNames ( session )  ;", "} else", "if    (  (  . schemaNameToScaleFactor ( schemaNameOrNull )  )     >     0  )     {", "schemaNames    =    com . google . common . collect . ImmutableList . of ( schemaNameOrNull )  ;", "} else    {", "schemaNames    =    com . google . common . collect . ImmutableList . of (  )  ;", "}", "return   schemaNames ;", "}", "METHOD_END"], "methodName": ["getSchemaNames"], "fileName": "com.facebook.presto.tpch.TpchMetadata"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < ColumnMetadata >    columns    =    ImmutableList . builder (  )  ;", "for    ( TpchColumn <  ?    extends   TpchEntity >    column    :    tpchTable . getColumns (  )  )     {", "columns . add ( new   ColumnMetadata ( columnNaming . getName ( column )  ,    TpchMetadata . getPrestoType ( column )  )  )  ;", "}", "columns . add ( new   ColumnMetadata ( TpchMetadata . ROW _ NUMBER _ COLUMN _ NAME ,    BIGINT ,    null ,    true )  )  ;", "SchemaTableName   tableName    =    new   SchemaTableName ( schemaName ,    tpchTable . getTableName (  )  )  ;", "return   new   spi . ConnectorTableMetadata ( tableName ,    columns . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["getTableMetadata"], "fileName": "com.facebook.presto.tpch.TpchMetadata"}, {"methodBody": ["METHOD_START", "{", "return    \" sf \"     +    scaleFactor ;", "}", "METHOD_END"], "methodName": ["scaleFactorSchemaName"], "fileName": "com.facebook.presto.tpch.TpchMetadata"}, {"methodBody": ["METHOD_START", "{", "if    ( TpchMetadata . TINY _ SCHEMA _ NAME . equals ( schemaName )  )     {", "return   TpchMetadata . TINY _ SCALE _ FACTOR ;", "}", "if    (  !  ( schemaName . startsWith (  \" sf \"  )  )  )     {", "return    -  1  ;", "}", "try    {", "return   Double . parseDouble ( schemaName . substring (  2  )  )  ;", "}    catch    ( Exception   ignored )     {", "return    -  1  ;", "}", "}", "METHOD_END"], "methodName": ["schemaNameToScaleFactor"], "fileName": "com.facebook.presto.tpch.TpchMetadata"}, {"methodBody": ["METHOD_START", "{", "return   new   TpchColumnHandle ( columnNaming . getName ( column )  ,    TpchMetadata . getPrestoType ( column )  )  ;", "}", "METHOD_END"], "methodName": ["toColumnHandle"], "fileName": "com.facebook.presto.tpch.TpchMetadata"}, {"methodBody": ["METHOD_START", "{", "return   ColumnStatistics . builder (  )  . addRange (  (    rangeBuilder )     -  >    rangeBuilder . setDistinctValuesCount ( stats . getDistinctValuesCount (  )  . map ( Estimate :  : new )  . orElse ( Estimate . unknownValue (  )  )  )  . setLowValue ( stats . getMin (  )  . map (  (    value )     -  >    toPrestoValue ( value ,    columnType )  )  )  . setHighValue ( stats . getMax (  )  . map (  (    value )     -  >    toPrestoValue ( value ,    columnType )  )  )  . setFraction ( new   Estimate (  1  )  )  )  . setNullsFraction ( Estimate . zeroValue (  )  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["toColumnStatistics"], "fileName": "com.facebook.presto.tpch.TpchMetadata"}, {"methodBody": ["METHOD_START", "{", "if    ( columnType   instanceof   VarcharType )     {", "return   Slices . utf 8 Slice (  (  ( String )     ( Value )  )  )  ;", "}", "if    (  (  ( columnType . equals ( BIGINT )  )     |  |     ( columnType . equals ( INTEGER )  )  )     |  |     ( columnType . equals ( DATE )  )  )     {", "return    (  ( Number )     ( Value )  )  . longValue (  )  ;", "}", "if    ( columnType . equals ( DOUBLE )  )     {", "return    (  ( Number )     ( Value )  )  . doubleValue (  )  ;", "}", "throw   new   IllegalArgumentException (  (  \" unsupported   column   type    \"     +    columnType )  )  ;", "}", "METHOD_END"], "methodName": ["toPrestoValue"], "fileName": "com.facebook.presto.tpch.TpchMetadata"}, {"methodBody": ["METHOD_START", "{", "TableStatistics . Builder   builder    =    TableStatistics . builder (  )  . setRowCount ( new   Estimate ( tableStatisticsData . getRowCount (  )  )  )  ;", "tableStatisticsData . getColumns (  )  . forEach (  (    columnName ,    stats )     -  >     {", "TpchColumnHandle   columnHandle    =     (  ( TpchColumnHandle )     ( getColumnHandle ( TableHandle ,    columnHandles ,    columnName )  )  )  ;", "builder . setColumnStatistics ( columnHandle ,    toColumnStatistics ( stats ,    columnHandle . getType (  )  )  )  ;", "}  )  ;", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["toTableStatistics"], "fileName": "com.facebook.presto.tpch.TpchMetadata"}, {"methodBody": ["METHOD_START", "{", "return   TupleDomain . withColumnDomains ( predicate . entrySet (  )  . stream (  )  . collect ( Collectors . toMap ( Map . Entry :  : getKey ,     (    entry )     -  >     {", "Type   type    =    entry . getKey (  )  . getType (  )  ;", "return   entry . getValue (  )  . stream (  )  . map (  (    nullableValue )     -  >    Domain . singleValue ( type ,    nullableValue . getValue (  )  )  )  . reduce ( Domain :  : union )  . orElse ( Domain . none ( type )  )  ;", "}  )  )  )  ;", "}", "METHOD_END"], "methodName": ["toTupleDomain"], "fileName": "com.facebook.presto.tpch.TpchMetadata"}, {"methodBody": ["METHOD_START", "{", "return   table ;", "}", "METHOD_END"], "methodName": ["getTable"], "fileName": "com.facebook.presto.tpch.TpchPartitioningHandle"}, {"methodBody": ["METHOD_START", "{", "return   totalRows ;", "}", "METHOD_END"], "methodName": ["getTotalRows"], "fileName": "com.facebook.presto.tpch.TpchPartitioningHandle"}, {"methodBody": ["METHOD_START", "{", "return   TpchRecordSet . createTpchRecordSet ( table ,    table . getColumns (  )  ,    scaleFactor ,     1  ,     1  ,    TupleDomain . all (  )  )  ;", "}", "METHOD_END"], "methodName": ["createTpchRecordSet"], "fileName": "com.facebook.presto.tpch.TpchRecordSet"}, {"methodBody": ["METHOD_START", "{", "return   new   TpchRecordSet ( table . createGenerator ( scaleFactor ,    part ,    partCount )  ,    table ,    columns ,    predicate )  ;", "}", "METHOD_END"], "methodName": ["createTpchRecordSet"], "fileName": "com.facebook.presto.tpch.TpchRecordSet"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < TpchColumn < E >  >    builder    =    ImmutableList . builder (  )  ;", "for    ( ColumnHandle   column    :    columns )     {", "String   columnName    =     (  ( TpchColumnHandle )     ( column )  )  . getColumnName (  )  ;", "if    ( columnName . equalsIgnoreCase ( TpchMetadata . ROW _ NUMBER _ COLUMN _ NAME )  )     {", "builder . add ( new    . RowNumberTpchColumn < E >  (  )  )  ;", "} else    {", "builder . add ( table . getColumn ( columnName )  )  ;", "}", "}", "return   TpchRecordSet . createTpchRecordSet ( table ,    builder . build (  )  ,    scaleFactor ,     ( partNumber    +     1  )  ,    totalParts ,    predicate )  ;", "}", "METHOD_END"], "methodName": ["getRecordSet"], "fileName": "com.facebook.presto.tpch.TpchRecordSetProvider"}, {"methodBody": ["METHOD_START", "{", "return   partNumber ;", "}", "METHOD_END"], "methodName": ["getPartNumber"], "fileName": "com.facebook.presto.tpch.TpchSplit"}, {"methodBody": ["METHOD_START", "{", "return   predicate ;", "}", "METHOD_END"], "methodName": ["getPredicate"], "fileName": "com.facebook.presto.tpch.TpchSplit"}, {"methodBody": ["METHOD_START", "{", "return   tableHandle ;", "}", "METHOD_END"], "methodName": ["getTableHandle"], "fileName": "com.facebook.presto.tpch.TpchSplit"}, {"methodBody": ["METHOD_START", "{", "return   totalParts ;", "}", "METHOD_END"], "methodName": ["getTotalParts"], "fileName": "com.facebook.presto.tpch.TpchSplit"}, {"methodBody": ["METHOD_START", "{", "return   connectorId ;", "}", "METHOD_END"], "methodName": ["getConnectorId"], "fileName": "com.facebook.presto.tpch.TpchTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   scaleFactor ;", "}", "METHOD_END"], "methodName": ["getScaleFactor"], "fileName": "com.facebook.presto.tpch.TpchTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   tableName ;", "}", "METHOD_END"], "methodName": ["getTableName"], "fileName": "com.facebook.presto.tpch.TpchTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   table . getConnectorId (  )  ;", "}", "METHOD_END"], "methodName": ["getConnectorId"], "fileName": "com.facebook.presto.tpch.TpchTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "return   predicate ;", "}", "METHOD_END"], "methodName": ["getPredicate"], "fileName": "com.facebook.presto.tpch.TpchTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "return   table ;", "}", "METHOD_END"], "methodName": ["getTable"], "fileName": "com.facebook.presto.tpch.TpchTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "return   new   ColumnStatisticsData ( Optional . empty (  )  ,    Optional . empty (  )  ,    Optional . empty (  )  )  ;", "}", "METHOD_END"], "methodName": ["empty"], "fileName": "com.facebook.presto.tpch.statistics.ColumnStatisticsData"}, {"methodBody": ["METHOD_START", "{", "return   distinctValuesCount ;", "}", "METHOD_END"], "methodName": ["getDistinctValuesCount"], "fileName": "com.facebook.presto.tpch.statistics.ColumnStatisticsData"}, {"methodBody": ["METHOD_START", "{", "return   max ;", "}", "METHOD_END"], "methodName": ["getMax"], "fileName": "com.facebook.presto.tpch.statistics.ColumnStatisticsData"}, {"methodBody": ["METHOD_START", "{", "return   min ;", "}", "METHOD_END"], "methodName": ["getMin"], "fileName": "com.facebook.presto.tpch.statistics.ColumnStatisticsData"}, {"methodBody": ["METHOD_START", "{", "return   new   ColumnStatisticsData ( Optional . of (  0 L )  ,    Optional . empty (  )  ,    Optional . empty (  )  )  ;", "}", "METHOD_END"], "methodName": ["zero"], "fileName": "com.facebook.presto.tpch.statistics.ColumnStatisticsData"}, {"methodBody": ["METHOD_START", "{", "return    ( nonNullValues . size (  )  )     >     0     ?    Optional . of ( nonNullValues . last (  )  )     :    Optional . empty (  )  ;", "}", "METHOD_END"], "methodName": ["getHighestValue"], "fileName": "com.facebook.presto.tpch.statistics.ColumnStatisticsRecorder"}, {"methodBody": ["METHOD_START", "{", "return    ( nonNullValues . size (  )  )     >     0     ?    Optional . of ( nonNullValues . first (  )  )     :    Optional . empty (  )  ;", "}", "METHOD_END"], "methodName": ["getLowestValue"], "fileName": "com.facebook.presto.tpch.statistics.ColumnStatisticsRecorder"}, {"methodBody": ["METHOD_START", "{", "return   new   ColumnStatisticsData ( Optional . of ( getUniqueValuesCount (  )  )  ,    getLowestValue (  )  ,    getHighestValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["getRecording"], "fileName": "com.facebook.presto.tpch.statistics.ColumnStatisticsRecorder"}, {"methodBody": ["METHOD_START", "{", "return   nonNullValues . size (  )  ;", "}", "METHOD_END"], "methodName": ["getUniqueValuesCount"], "fileName": "com.facebook.presto.tpch.statistics.ColumnStatisticsRecorder"}, {"methodBody": ["METHOD_START", "{", "if    ( value    !  =    null )     {", "nonNullValues . add ( value )  ;", "}", "}", "METHOD_END"], "methodName": ["record"], "fileName": "com.facebook.presto.tpch.statistics.ColumnStatisticsRecorder"}, {"methodBody": ["METHOD_START", "{", "return   new   TableStatisticsData (  (  ( left . getRowCount (  )  )     +     ( right . getRowCount (  )  )  )  ,    addPartitionStats ( left . getColumns (  )  ,    right . getColumns (  )  ,    partitionColumn )  )  ;", "}", "METHOD_END"], "methodName": ["addPartitionStats"], "fileName": "com.facebook.presto.tpch.statistics.StatisticsEstimator"}, {"methodBody": ["METHOD_START", "{", "return   leftColumns . entrySet (  )  . stream (  )  . collect ( toImmutableMap ( Map . Entry :  : getKey ,     (    entry )     -  >     {", "String   columnName    =    entry . getKey (  )  ;", "ColumnData   leftStats    =    entry . getValue (  )  ;", "ColumnData   rightStats    =    rightColumns . get ( columnName )  ;", "return   new   ColumnData ( addUniqueValuesCount ( partitionColumn ,    columnName ,    leftStats ,    rightStats )  ,    combine ( leftStats . getMin (  )  ,    rightStats . getMin (  )  ,    this :  : min )  ,    combine ( leftStats . getMax (  )  ,    rightStats . getMax (  )  ,    this :  : max )  )  ;", "}  )  )  ;", "}", "METHOD_END"], "methodName": ["addPartitionStats"], "fileName": "com.facebook.presto.tpch.statistics.StatisticsEstimator"}, {"methodBody": ["METHOD_START", "{", "return   Optionals . combine ( leftStats . getDistinctValuesCount (  )  ,    rightStats . getDistinctValuesCount (  )  ,     (    a ,    b )     -  >    a    +    b )  . filter (  (    v )     -  >    columnName . equals ( partitionColumn . getColumnName (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["addUniqueValuesCount"], "fileName": "com.facebook.presto.tpch.statistics.StatisticsEstimator"}, {"methodBody": ["METHOD_START", "{", "String   schemaName    =     \" sf \"     +    scaleFactor ;", "if    ( columnValuesRestrictions . isEmpty (  )  )     {", "return   tableStatisticsDataRepository . load ( schemaName ,    tpchTable ,    Optional . empty (  )  ,    Optional . empty (  )  )  ;", "} else", "if    ( columnValuesRestrictions . values (  )  . stream (  )  . allMatch ( List :  : isEmpty )  )     {", "return   Optional . of ( zeroStatistics ( tpchTable )  )  ;", "} else    {", "checkArgument (  (  ( columnValuesRestrictions . size (  )  )     <  =     1  )  ,     \" Can   only   estimate   stats   when   at   most   one   column   has   value   restrictions \"  )  ;", "TpchColumn <  ?  >    partitionColumn    =    getOnlyElement ( columnValuesRestrictions . keySet (  )  )  ;", "List < Object >    partitionValues    =    columnValuesRestrictions . get ( partitionColumn )  ;", "TableStatisticsData   result    =    zeroStatistics ( tpchTable )  ;", "for    ( Object   partitionValue    :    partitionValues )     {", "io . airlift . slice . Slice   value    =    util . Types . checkType ( partitionValue ,    io . airlift . slice . Slice . class ,     \" Only   string    ( Slice )    partition   values   supported   for   now \"  )  ;", "Optional < TableStatisticsData >    tableStatisticsData    =    tableStatisticsDataRepository . load ( schemaName ,    tpchTable ,    Optional . of ( partitionColumn )  ,    Optional . of ( value . toStringUtf 8  (  )  )  )  ;", "if    (  !  ( tableStatisticsData . isPresent (  )  )  )     {", "return   Optional . empty (  )  ;", "}", "result    =    addPartitionStats ( result ,    tableStatisticsData . get (  )  ,    partitionColumn )  ;", "}", "return   Optional . of ( result )  ;", "}", "}", "METHOD_END"], "methodName": ["estimateStats"], "fileName": "com.facebook.presto.tpch.statistics.StatisticsEstimator"}, {"methodBody": ["METHOD_START", "{", "Types . checkSameType ( l ,    r )  ;", "Comparable   left    =    Types . checkType ( l ,    Comparable . class )  ;", "Comparable   right    =    Types . checkType ( r ,    Comparable . class )  ;", "return    ( left . pareTo ( right )  )     >     0     ?    left    :    right ;", "}", "METHOD_END"], "methodName": ["max"], "fileName": "com.facebook.presto.tpch.statistics.StatisticsEstimator"}, {"methodBody": ["METHOD_START", "{", "Types . checkSameType ( l ,    r )  ;", "Comparable   left    =    Types . checkType ( l ,    Comparable . class )  ;", "Comparable   right    =    Types . checkType ( r ,    Comparable . class )  ;", "return    ( left . pareTo ( right )  )     <     0     ?    left    :    right ;", "}", "METHOD_END"], "methodName": ["min"], "fileName": "com.facebook.presto.tpch.statistics.StatisticsEstimator"}, {"methodBody": ["METHOD_START", "{", "return   new   TableStatisticsData (  0  ,    table . getColumns (  )  . stream (  )  . collect ( toImmutableMap ( TpchColumn :  : getColumnName ,     (    column )     -  >    ColumnStatisticsData . zero (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["zeroStatistics"], "fileName": "com.facebook.presto.tpch.statistics.StatisticsEstimator"}, {"methodBody": ["METHOD_START", "{", "return   columns ;", "}", "METHOD_END"], "methodName": ["getColumns"], "fileName": "com.facebook.presto.tpch.statistics.TableStatisticsData"}, {"methodBody": ["METHOD_START", "{", "return   rowCount ;", "}", "METHOD_END"], "methodName": ["getRowCount"], "fileName": "com.facebook.presto.tpch.statistics.TableStatisticsData"}, {"methodBody": ["METHOD_START", "{", "checkArgument (  (  ( partitionColumn . isPresent (  )  )     =  =     ( partitionValue . isPresent (  )  )  )  )  ;", "return   Optionals . withBoth ( partitionColumn ,    partitionValue ,     (    column ,    value )     -  >     (  ( column . getColumnName (  )  )     +     \"  .  \"  )     +    value )  ;", "}", "METHOD_END"], "methodName": ["getPartitionDescription"], "fileName": "com.facebook.presto.tpch.statistics.TableStatisticsDataRepository"}, {"methodBody": ["METHOD_START", "{", "String   filename    =    tableStatisticsDataFilename ( table ,    partitionColumn ,    partitionValue )  ;", "String   resourcePath    =     (  (  (  \"  / tpch / statistics /  \"     +    schemaName )     +     \"  /  \"  )     +    filename )     +     \"  . json \"  ;", "URL   resource    =    getClass (  )  . getResource ( resourcePath )  ;", "if    ( resource    =  =    null )     {", "return   Optional . empty (  )  ;", "}", "try    {", "return   Optional . of ( objectMapper . readValue ( resource ,     . class )  )  ;", "}    catch    ( Exception   e )     {", "throw   new   RuntimeException ( String . format (  \" Failed   to   parse   stats   from   resource    [  % s ]  \"  ,    resourcePath )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["load"], "fileName": "com.facebook.presto.tpch.statistics.TableStatisticsDataRepository"}, {"methodBody": ["METHOD_START", "{", "String   filename    =    tableStatisticsDataFilename ( table ,    partitionColumn ,    partitionValue )  ;", "Path   path    =    Paths . get (  \" presto - tpch \"  ,     \" src \"  ,     \" main \"  ,     \" resources \"  ,     \" tpch \"  ,     \" statistics \"  ,    schemaName ,     ( filename    +     \"  . json \"  )  )  ;", "writeStatistics ( path ,    statisticsData )  ;", "}", "METHOD_END"], "methodName": ["save"], "fileName": "com.facebook.presto.tpch.statistics.TableStatisticsDataRepository"}, {"methodBody": ["METHOD_START", "{", "Optional < String >    partitionDescription    =    getPartitionDescription ( partitionColumn ,    partitionValue )  ;", "return    ( table . getName (  )  )     +     ( partitionDescription . map (  (    value )     -  >     \"  .  \"     +    value )  . orElse (  \"  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["tableStatisticsDataFilename"], "fileName": "com.facebook.presto.tpch.statistics.TableStatisticsDataRepository"}, {"methodBody": ["METHOD_START", "{", "File   file    =    path . toFile (  )  ;", "file . getParentFile (  )  . mkdirs (  )  ;", "try    {", "objectMapper . writerWithDefaultPrettyPrinter (  )  . writeValue ( file ,    t )  ;", "try    ( FileWriter   fileWriter    =    new   FileWriter ( file ,    true )  )     {", "fileWriter . append (  '  \\ n '  )  ;", "}", "}    catch    ( IOException   e )     {", "throw   new   RuntimeException (  \" Could   not   save   table   statistics   data \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["writeStatistics"], "fileName": "com.facebook.presto.tpch.statistics.TableStatisticsDataRepository"}, {"methodBody": ["METHOD_START", "{", "return   columns . stream (  )  . collect ( toImmutableMap ( Function . identity (  )  ,     (    column )     -  >    new   ColumnStatisticsRecorder (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createStatisticsRecorders"], "fileName": "com.facebook.presto.tpch.statistics.TableStatisticsRecorder"}, {"methodBody": ["METHOD_START", "{", "TpchColumnType . Base   baseType    =    column . getType (  )  . getBase (  )  ;", "switch    ( baseType )     {", "case   IDENTIFIER    :", "return   column . getIdentifier ( row )  ;", "case   INTEGER    :", "return   column . getInteger ( row )  ;", "case   DATE    :", "return   column . getDate ( row )  ;", "case   DOUBLE    :", "return   column . getDouble ( row )  ;", "case   VARCHAR    :", "return   column . getString ( row )  ;", "}", "throw   new   UnsupportedOperationException ( String . format (  \" Unsupported   TPCH   base   type    [  % s ]  \"  ,    baseType )  )  ;", "}", "METHOD_END"], "methodName": ["getTpchValue"], "fileName": "com.facebook.presto.tpch.statistics.TableStatisticsRecorder"}, {"methodBody": ["METHOD_START", "{", "Iterable < E >    rows    =    tpchTable . createGenerator ( scaleFactor ,     1  ,     1  )  ;", "return   record ( rows ,    tpchTable . getColumns (  )  ,    constraint )  ;", "}", "METHOD_END"], "methodName": ["recordStatistics"], "fileName": "com.facebook.presto.tpch.statistics.TableStatisticsRecorder"}, {"methodBody": ["METHOD_START", "{", "Map < TpchColumn < E >  ,    ColumnStatisticsRecorder >    statisticsRecorders    =    createStatisticsRecorders ( columns )  ;", "long   rowCount    =     0  ;", "for    ( E   row    :    rows )     {", "if    ( constraint . test ( row )  )     {", "rowCount +  +  ;", "for    ( TpchColumn < E >    column    :    columns )     {", "Comparable <  ?  >    value    =    getTpchValue ( row ,    column )  ;", "statisticsRecorders . get ( column )  . record ( value )  ;", "}", "}", "}", "Map < String ,    ColumnStatisticsData >    columnSampleStatistics    =    statisticsRecorders . entrySet (  )  . stream (  )  . collect ( toImmutableMap (  (    e )     -  >    e . getKey (  )  . getColumnName (  )  ,     (    e )     -  >    e . getValue (  )  . getRecording (  )  )  )  ;", "return   new   TableStatisticsData ( rowCount ,    columnSampleStatistics )  ;", "}", "METHOD_END"], "methodName": ["recordStatistics"], "fileName": "com.facebook.presto.tpch.statistics.TableStatisticsRecorder"}, {"methodBody": ["METHOD_START", "{", "computeAndOutputStatsFor ( schemaName ,    table ,     (    row )     -  >    true ,    Optional . empty (  )  ,    Optional . empty (  )  )  ;", "}", "METHOD_END"], "methodName": ["computeAndOutputStatsFor"], "fileName": "com.facebook.presto.tpch.statistics.TpchStatisticsRecorder"}, {"methodBody": ["METHOD_START", "{", "Predicate < E >    predicate    =     (    row )     -  >    partitionColumn . getString ( row )  . equals ( partitionValue )  ;", "computeAndOutputsFor ( schemaName ,    table ,    predicate ,    Optional . of ( partitionColumn )  ,    Optional . of ( partitionValue )  )  ;", "}", "METHOD_END"], "methodName": ["computeAndOutputStatsFor"], "fileName": "com.facebook.presto.tpch.statistics.TpchStatisticsRecorder"}, {"methodBody": ["METHOD_START", "{", "double   scaleFactor    =    TpchMetadata . schemaNameToScaleFactor ( schemaName )  ;", "long   start    =    System . nanoTime (  )  ;", "TableStatisticsData   statisticsData    =    table . recordStatistics ( table ,    predicate ,    scaleFactor )  ;", "long   duration    =     (  ( System . nanoTime (  )  )     -    start )     /     1  0  0  0  0  0  0  ;", "System . out . println ( String . format (  \" Finished   stats   recording   for    % s [  % s ]    sf    % s ,    took    % s   ms \"  ,    table . getTableName (  )  ,    partitionValue . orElse (  \"  \"  )  ,    scaleFactor ,    duration )  )  ;", "tableStatisticsDataRepository . save ( schemaName ,    table ,    partitionColumn ,    partitionValue ,    statisticsData )  ;", "}", "METHOD_END"], "methodName": ["computeAndOutputStatsFor"], "fileName": "com.facebook.presto.tpch.statistics.TpchStatisticsRecorder"}, {"methodBody": ["METHOD_START", "{", "return   new   ObjectMapper (  )  . registerModule ( new   Jdk 8 Module (  )  )  ;", "}", "METHOD_END"], "methodName": ["createObjectMapper"], "fileName": "com.facebook.presto.tpch.statistics.TpchStatisticsRecorder"}, {"methodBody": ["METHOD_START", "{", "TpchStatisticsRecorder   tool    =    new   TpchStatisticsRecorder ( new   TableStatisticsRecorder (  )  ,    new   TableStatisticsDataRepository ( TpchStatisticsRecorder . createObjectMapper (  )  )  )  ;", "TpchStatisticsRecorder . SUPPORTED _ SCHEMAS . forEach (  (    schemaName )     -  >     {", "io . airlift . tpch . TpchTable . getTables (  )  . forEach (  (    table )     -  >    tool . computeAndOutputStatsFor ( schemaName ,    table )  )  ;", "Stream . of (  \" F \"  ,     \" O \"  ,     \" P \"  )  . forEach (  (    partitionValue )     -  >    tool . computeAndOutputStatsFor ( schemaName ,    ORDERS ,    ORDER _ STATUS ,    partitionValue )  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.tpch.statistics.TpchStatisticsRecorder"}, {"methodBody": ["METHOD_START", "{", "if    (  ( left . isPresent (  )  )     &  &     ( right . isPresent (  )  )  )     {", "return    . of ( combiner . apply ( left . get (  )  ,    right . get (  )  )  )  ;", "} else", "if    ( left . isPresent (  )  )     {", "return   left ;", "} else    {", "return   right ;", "}", "}", "METHOD_END"], "methodName": ["combine"], "fileName": "com.facebook.presto.tpch.util.Optionals"}, {"methodBody": ["METHOD_START", "{", "return   left . flatMap (  (    l )     -  >    right . map (  (    r )     -  >    binaryFunction . apply ( l ,    r )  )  )  ;", "}", "METHOD_END"], "methodName": ["withBoth"], "fileName": "com.facebook.presto.tpch.util.Optionals"}, {"methodBody": ["METHOD_START", "{", "TupleDomain < ColumnHandle >    columnPredicate    =    PredicateUtils . filterColumns ( predicate ,    columnHandle :  : equals )  ;", "return    (    nullableValue )     -  >    columnPredicate . contains ( TupleDomain . fromFixedValues ( ImmutableMap . of ( columnHandle ,    nullableValue )  )  )  ;", "}", "METHOD_END"], "methodName": ["convertToPredicate"], "fileName": "com.facebook.presto.tpch.util.PredicateUtils"}, {"methodBody": ["METHOD_START", "{", "return   predicate . transform (  (    columnHandle )     -  >     {", "TpchColumnHandle   tpchColumnHandle    =     (  ( TpchColumnHandle )     ( columnHandle )  )  ;", "if    ( filter . test ( tpchColumnHandle )  )     {", "return   tpchColumnHandle ;", "}", "return   null ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["filterColumns"], "fileName": "com.facebook.presto.tpch.util.PredicateUtils"}, {"methodBody": ["METHOD_START", "{", "return   PredicateUtils . filterColumns ( predicate ,     (    tpchColumnHandle )     -  >     !  ( tpchColumnHandle . equals ( columnHandle )  )  )  ;", "}", "METHOD_END"], "methodName": ["filterOutColumnFromPredicate"], "fileName": "com.facebook.presto.tpch.util.PredicateUtils"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    leftClass    =    left . getClass (  )  ;", "Class <  ?  >    rightClass    =    right . getClass (  )  ;", "checkArgument ( leftClass . equals ( rightClass )  ,     \" Values   must   be   of   same   t ,    got    [  % s    :     % s ]    and    [  % s    :     % s ]  \"  ,    left ,    leftClass ,    right ,    rightClass )  ;", "}", "METHOD_END"], "methodName": ["checkSameType"], "fileName": "com.facebook.presto.tpch.util.Types"}, {"methodBody": ["METHOD_START", "{", "return   Types . checkType ( object ,    expectedClass ,     \" Expected   an   object   of   type    [  % s ]  \"  ,    expectedClass . getCanonicalName (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkType"], "fileName": "com.facebook.presto.tpch.util.Types"}, {"methodBody": ["METHOD_START", "{", "checkArgument ( expectedClass . isInstance ( object )  ,    messageTemplate ,    arguments )  ;", "return   expectedClass . cast ( object )  ;", "}", "METHOD_END"], "methodName": ["checkType"], "fileName": "com.facebook.presto.tpch.util.Types"}]