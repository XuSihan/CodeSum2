[{"methodBody": ["METHOD_START", "{", "assertClose ( toOptional ( actual )  ,    toOptional ( expected )  ,    message )  ;", "}", "METHOD_END"], "methodName": ["assertClose"], "fileName": "com.facebook.presto.tpcds.EstimateAssertion"}, {"methodBody": ["METHOD_START", "{", "if    ( actual   instanceof   Slice )     {", "aEquals ( actual . getClass (  )  ,    expected . getClass (  )  ,    message )  ;", "aEquals (  (  ( Slice )     ( actual )  )  . toStringUtf 8  (  )  ,     (  ( Slice )     ( expected )  )  . toStringUtf 8  (  )  )  ;", "} else    {", "double   actualDouble    =    toDouble ( actual )  ;", "double   expectedDouble    =    toDouble ( expected )  ;", "aEquals ( actualDouble ,    expectedDouble ,     ( expectedDouble    *     ( tolerance )  )  ,    message )  ;", "}", "}", "METHOD_END"], "methodName": ["assertClose"], "fileName": "com.facebook.presto.tpcds.EstimateAssertion"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( actual . isPresent (  )  ,    expected . isPresent (  )  ,    message )  ;", "if    ( actual . isPresent (  )  )     {", "Object   actualValue    =    actual . get (  )  ;", "Object   expectedValue    =    expected . get (  )  ;", "assertClose ( actualValue ,    expectedValue ,    message )  ;", "}", "}", "METHOD_END"], "methodName": ["assertClose"], "fileName": "com.facebook.presto.tpcds.EstimateAssertion"}, {"methodBody": ["METHOD_START", "{", "if    ( object   instanceof   Number )     {", "return    (  ( Number )     ( object )  )  . doubleValue (  )  ;", "} else    {", "String   message    =     \" Can ' t   compare   with   tolerance   objects   of   class    % s .    Use   aEquals .  \"  ;", "throw   new   UnsupportedOperationException ( String . format ( message ,    object . getClass (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["toDouble"], "fileName": "com.facebook.presto.tpcds.EstimateAssertion"}, {"methodBody": ["METHOD_START", "{", "return   estimate . isValueUnknown (  )     ?    Optional . empty (  )     :    Optional . of ( estimate . getValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["toOptional"], "fileName": "com.facebook.presto.tpcds.EstimateAssertion"}, {"methodBody": ["METHOD_START", "{", "computeActual ( sql )  ;", "}", "METHOD_END"], "methodName": ["assertQuerySucceeds"], "fileName": "com.facebook.presto.tpcds.TestTpcds"}, {"methodBody": ["METHOD_START", "{", "String   longValues    =    IntStream . range (  0  ,     5  0  0  0  )  . mapToObj ( Integer :  : toString )  . collect ( Collectors . joining (  \"  ,     \"  )  )  ;", "assertQuery (  \" SELECT   typeof ( i _ current _ price )    FROM   item   LIMIT    1  \"  ,     \" VALUES    ' decimal (  7  ,  2  )  '  \"  )  ;", "assertQuerySucceeds (  (  (  \" SELECT   i _ current _ price   FROM   item   WHERE   i _ current _ price   IN    (  \"     +    longValues )     +     \"  )  \"  )  )  ;", "assertQuerySucceeds (  (  (  \" SELECT   i _ current _ price   FROM   item   WHERE   i _ current _ price   NOT   IN    (  \"     +    longValues )     +     \"  )  \"  )  )  ;", "assertQuerySucceeds (  (  (  \" SELECT   i _ current _ price   FROM   item   WHERE   i _ current _ price   IN    ( i _ wholesale _ cost ,     \"     +    longValues )     +     \"  )  \"  )  )  ;", "assertQuerySucceeds (  (  (  \" SELECT   i _ current _ price   FROM   item   WHERE   i _ current _ price   NOT   IN    ( i _ wholesale _ cost ,     \"     +    longValues )     +     \"  )  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testLargeInWithShortDecimal"], "fileName": "com.facebook.presto.tpcds.TestTpcds"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  (  \" SELECT   c _ first _ name ,    c _ last _ name ,    ca _ address _ sk ,    ca _ gmt _ offset    \"     +     (  \" FROM   customer   JOIN   customer _ address   ON   c _ current _ addr _ sk    =    ca _ address _ sk    \"     +     \" WHERE   ca _ address _ sk    =     4  \"  )  )  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    actual . getTypes (  )  )  . row (  \" James                                              \"  ,     \" Brown                                                                            \"  ,     4 L ,    new   BigDecimal (  \"  -  7  .  0  0  \"  )  )  . build (  )  ;", "assertEquals ( expected ,    actual )  ;", "actual    =    computeActual (  (  \" SELECT   c _ first _ name ,    c _ last _ name    \"     +     (  \" FROM   customer   JOIN   customer _ address   ON   c _ current _ addr _ sk    =    ca _ address _ sk    \"     +     \" WHERE   ca _ address _ sk    =     4    AND   ca _ gmt _ offset    =    DECIMAL    '  -  7  .  0  0  '  \"  )  )  )  ;", "expected    =    resultBuilder ( getSession (  )  ,    actual . getTypes (  )  )  . row (  \" James                                              \"  ,     \" Brown                                                                            \"  )  . build (  )  ;", "assertEquals ( expected ,    actual )  ;", "}", "METHOD_END"], "methodName": ["testSelect"], "fileName": "com.facebook.presto.tpcds.TestTpcds"}, {"methodBody": ["METHOD_START", "{", "TestTpcdsMetadataStatistics . estimateAssertion . assertClose ( actual . getNullsFraction (  )  ,    expected . getNullsFraction (  )  ,     \" Null   fraction   does   not   match \"  )  ;", "RangeColumnStatistics   actualRange    =    actual . getOnlyRangeColumnStatistics (  )  ;", "RangeColumnStatistics   expectedRange    =    expected . getOnlyRangeColumnStatistics (  )  ;", "if    ( expectedRange . getFraction (  )  . isValueUnknown (  )  )     {", "assertTrue ( actualRange . getFraction (  )  . isValueUnknown (  )  )  ;", "} else    {", "TestTpcdsMetadataStatistics . estimateAssertion . assertClose ( actualRange . getFraction (  )  ,    expectedRange . getFraction (  )  ,     \" Fraction   does   not   match \"  )  ;", "}", "if    ( expectedRange . getDataSize (  )  . isValueUnknown (  )  )     {", "assertTrue ( actualRange . getDataSize (  )  . isValueUnknown (  )  )  ;", "} else    {", "TestTpcdsMetadataStatistics . estimateAssertion . assertClose ( actualRange . getDataSize (  )  ,    expectedRange . getDataSize (  )  ,     \" Data   size   does   not   match \"  )  ;", "}", "if    ( expectedRange . getDistinctValuesCount (  )  . isValueUnknown (  )  )     {", "assertTrue ( actualRange . getDistinctValuesCount (  )  . isValueUnknown (  )  )  ;", "} else    {", "TestTpcdsMetadataStatistics . estimateAssertion . assertClose ( actualRange . getDistinctValuesCount (  )  ,    expectedRange . getDistinctValuesCount (  )  ,     \" Distinct   values   count   does   not   match \"  )  ;", "}", "assertEquals ( actualRange . getLowValue (  )  ,    expectedRange . getLowValue (  )  )  ;", "assertEquals ( actualRange . getHighValue (  )  ,    expectedRange . getHighValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["assertColumnStatistics"], "fileName": "com.facebook.presto.tpcds.TestTpcdsMetadataStatistics"}, {"methodBody": ["METHOD_START", "{", "Stream . of (  \" sf 0  .  0  0  1  \"  ,     \" sf 0  .  1  \"  ,     \" sf 1  0  \"  )  . forEach (  (    schemaName )     -  >    Table . getBaseTables (  )  . forEach (  (    table )     -  >     {", "SchemaTableName   schemaTableName    =    new   SchemaTableName ( schemaName ,    table . getName (  )  )  ;", "ConnectorTableHandle   tableHandle    =    metadata . getTableHandle (  . session ,    schemaTableName )  ;", "TableStatistics   tableStatistics    =    metadata . getTableStatistics (  . session ,    tableHandle ,    alwaysTrue (  )  )  ;", "assertTrue ( tableStatistics . getRowCount (  )  . isValueUnknown (  )  )  ;", "assertTrue ( tableStatistics . getColumnStatistics (  )  . isEmpty (  )  )  ;", "}  )  )  ;", "}", "METHOD_END"], "methodName": ["testNoTableStatsForNotSupportedSchema"], "fileName": "com.facebook.presto.tpcds.TestTpcdsMetadataStatistics"}, {"methodBody": ["METHOD_START", "{", "SchemaTableName   schemaTableName    =    new   SchemaTableName (  \" sf 1  \"  ,    WEB _ SITE . getName (  )  )  ;", "ConnectorTableHandle   tableHandle    =    metadata . getTableHandle (  . session ,    schemaTableName )  ;", "TableStatistics   tableStatistics    =    metadata . getTableStatistics (  . session ,    tableHandle ,    alwaysTrue (  )  )  ;", "Map < String ,    ColumnHandle >    columnHandles    =    metadata . getColumnHandles (  . session ,    tableHandle )  ;", "assertColumnStatistics ( tableStatistics . getColumnStatistics (  )  . get ( columnHandles . get ( WEB _ REC _ END _ DATE . getName (  )  )  )  ,    ColumnStatistics . builder (  )  . setNullsFraction ( new   Estimate (  0  .  5  )  )  . addRange (  (    range )     -  >    range . setFraction ( new   Estimate (  0  .  5  )  )  . setDistinctValuesCount ( new   Estimate (  3  )  )  . setLowValue ( Optional . of (  1  0  8  1  9 L )  )  . setHighValue ( Optional . of (  1  1  5  4  9 L )  )  . build (  )  )  . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["testNullFraction"], "fileName": "com.facebook.presto.tpcds.TestTpcdsMetadataStatistics"}, {"methodBody": ["METHOD_START", "{", "SchemaTableName   schemaTableName    =    new   SchemaTableName (  \" sf 1  \"  ,    CALL _ CENTER . getName (  )  )  ;", "ConnectorTableHandle   tableHandle    =    metadata . getTableHandle (  . session ,    schemaTableName )  ;", "TableStatistics   tableStatistics    =    metadata . getTableStatistics (  . session ,    tableHandle ,    alwaysTrue (  )  )  ;", ". estimateAssertion . assertClose ( tableStatistics . getRowCount (  )  ,    new   Estimate (  6  )  ,     \" Row   count   does   not   match \"  )  ;", "Map < String ,    ColumnHandle >    columnHandles    =    metadata . getColumnHandles (  . session ,    tableHandle )  ;", "for    ( ColumnHandle   column    :    columnHandles . values (  )  )     {", "assertTrue ( tableStatistics . getColumnStatistics (  )  . containsKey ( column )  )  ;", "assertNotNull ( tableStatistics . getColumnStatistics (  )  . get ( column )  )  ;", "}", "assertColumnStatistics ( tableStatistics . getColumnStatistics (  )  . get ( columnHandles . get ( CC _ CALL _ CENTER _ SK . getName (  )  )  )  ,    ColumnStatistics . builder (  )  . setNullsFraction ( new   Estimate (  0  )  )  . addRange (  (    range )     -  >    range . setFraction ( new   Estimate (  1  .  0  )  )  . setDistinctValuesCount ( new   Estimate (  6  )  )  . setLowValue ( Optional . of (  1 L )  )  . setHighValue ( Optional . of (  6 L )  )  . build (  )  )  . build (  )  )  ;", "assertColumnStatistics ( tableStatistics . getColumnStatistics (  )  . get ( columnHandles . get ( CC _ CALL _ CENTER _ ID . getName (  )  )  )  ,    ColumnStatistics . builder (  )  . setNullsFraction ( new   Estimate (  0  )  )  . addRange (  (    range )     -  >    range . setFraction ( new   Estimate (  1  .  0  )  )  . setDistinctValuesCount ( new   Estimate (  3  )  )  . setLowValue ( Optional . of ( Slices . utf 8 Slice (  \" AAAAAAAABAAAAAAA \"  )  )  )  . setHighValue ( Optional . of ( Slices . utf 8 Slice (  \" AAAAAAAAEAAAAAAA \"  )  )  )  . build (  )  )  . build (  )  )  ;", "assertColumnStatistics ( tableStatistics . getColumnStatistics (  )  . get ( columnHandles . get ( CC _ ZIP . getName (  )  )  )  ,    ColumnStatistics . builder (  )  . setNullsFraction ( new   Estimate (  0  )  )  . addRange (  (    range )     -  >    range . setFraction ( new   Estimate (  1  .  0  )  )  . setDistinctValuesCount ( new   Estimate (  1  )  )  . setLowValue ( Optional . of ( Slices . utf 8 Slice (  \"  3  1  9  0  4  \"  )  )  )  . setHighValue ( Optional . of ( Slices . utf 8 Slice (  \"  3  1  9  0  4  \"  )  )  )  . build (  )  )  . build (  )  )  ;", "assertColumnStatistics ( tableStatistics . getColumnStatistics (  )  . get ( columnHandles . get ( CC _ GMT _ OFFSET . getName (  )  )  )  ,    ColumnStatistics . builder (  )  . setNullsFraction ( new   Estimate (  0  )  )  . addRange (  (    range )     -  >    range . setFraction ( new   Estimate (  1  .  0  )  )  . setDistinctValuesCount ( new   Estimate (  1  )  )  . setLowValue ( Optional . of (  (  -  5  0  0 L )  )  )  . setHighValue ( Optional . of (  (  -  5  0  0 L )  )  )  . build (  )  )  . build (  )  )  ;", "assertColumnStatistics ( tableStatistics . getColumnStatistics (  )  . get ( columnHandles . get ( CC _ REC _ START _ DATE . getName (  )  )  )  ,    ColumnStatistics . builder (  )  . setNullsFraction ( new   Estimate (  0  )  )  . addRange (  (    range )     -  >    range . setFraction ( new   Estimate (  1  )  )  . setDistinctValuesCount ( new   Estimate (  4  )  )  . setLowValue ( Optional . of (  1  0  2  2  7 L )  )  . setHighValue ( Optional . of (  1  1  6  8  8 L )  )  . build (  )  )  . build (  )  )  ;", "assertColumnStatistics ( tableStatistics . getColumnStatistics (  )  . get ( columnHandles . get ( CC _ CLOSED _ DATE _ SK . getName (  )  )  )  ,    ColumnStatistics . builder (  )  . setNullsFraction ( new   Estimate (  1  )  )  . addRange (  (    range )     -  >    range . setFraction ( new   Estimate (  0  )  )  . setDistinctValuesCount ( new   Estimate (  0  )  )  . setLowValue ( Optional . empty (  )  )  . setHighValue ( Optional . empty (  )  )  . build (  )  )  . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["testTableStatsDetails"], "fileName": "com.facebook.presto.tpcds.TestTpcdsMetadataStatistics"}, {"methodBody": ["METHOD_START", "{", "Stream . of (  \" sf 0  .  0  1  \"  ,     \" tiny \"  ,     \" sf 1  \"  ,     \" sf 1  .  0  0  0  \"  )  . forEach (  (    schemaName )     -  >    Table . getBaseTables (  )  . forEach (  (    table )     -  >     {", "SchemaTableName   schemaTableName    =    new   SchemaTableName ( schemaName ,    table . getName (  )  )  ;", "ConnectorTableHandle   tableHandle    =    metadata . getTableHandle (  . session ,    schemaTableName )  ;", "TableStatistics   tableStatistics    =    metadata . getTableStatistics (  . session ,    tableHandle ,    alwaysTrue (  )  )  ;", "assertFalse ( tableStatistics . getRowCount (  )  . isValueUnknown (  )  )  ;", "for    ( ColumnHandle   column    :    metadata . getColumnHandles (  . session ,    tableHandle )  . values (  )  )     {", "assertTrue ( tableStatistics . getColumnStatistics (  )  . containsKey ( column )  )  ;", "assertNotNull ( tableStatistics . getColumnStatistics (  )  . get ( column )  )  ;", "TpcdsColumnHandle   tpcdsColumn    =     (  ( TpcdsColumnHandle )     ( column )  )  ;", "Optional < Object >    low    =    tableStatistics . getColumnStatistics (  )  . get ( column )  . getOnlyRangeColumnStatistics (  )  . getLowValue (  )  ;", "if    ( low . isPresent (  )  )     {", "assertEquals ( low . get (  )  . getClass (  )  ,    Primitives . wrap ( tpcdsColumn . getType (  )  . getJavaType (  )  )  )  ;", "}", "Optional < Object >    high    =    tableStatistics . getColumnStatistics (  )  . get ( column )  . getOnlyRangeColumnStatistics (  )  . getLowValue (  )  ;", "if    ( high . isPresent (  )  )     {", "assertEquals ( high . get (  )  . getClass (  )  ,    Primitives . wrap ( tpcdsColumn . getType (  )  . getJavaType (  )  )  )  ;", "}", "}", "}  )  )  ;", "}", "METHOD_END"], "methodName": ["testTableStatsExistenceSupportedSchema"], "fileName": "com.facebook.presto.tpcds.TestTpcdsMetadataStatistics"}, {"methodBody": ["METHOD_START", "{", "return   columnName ;", "}", "METHOD_END"], "methodName": ["getColumnName"], "fileName": "com.facebook.presto.tpcds.TpcdsColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.facebook.presto.tpcds.TpcdsColumnHandle"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   Integer . parseInt ( firstNonNull ( properties . get (  \" splits - per - node \"  )  ,    String . valueOf ( defaultSplitsPerNode )  )  )  ;", "}    catch    ( NumberFormatException   e )     {", "throw   new   IllegalArgumentException (  \" Invalid   property   splits - per - node \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["getSplitsPerNode"], "fileName": "com.facebook.presto.tpcds.TpcdsConnectorFactory"}, {"methodBody": ["METHOD_START", "{", "return   Boolean . parseBoolean ( firstNonNull ( properties . get (  \" tpcds . with - no - sexism \"  )  ,    String . valueOf ( false )  )  )  ;", "}", "METHOD_END"], "methodName": ["isWithNoSexism"], "fileName": "com.facebook.presto.tpcds.TpcdsConnectorFactory"}, {"methodBody": ["METHOD_START", "{", "switch    ( tpcdsType . getBase (  )  )     {", "case   IDENTIFIER    :", "return   BigintType . BIGINT ;", "case   INTEGER    :", "return   IntegerType . INTEGER ;", "case   DATE    :", "return   DateType . DATE ;", "case   DECIMAL    :", "return   createDecimalType ( tpcdsType . getPrecision (  )  . get (  )  ,    tpcdsType . getScale (  )  . get (  )  )  ;", "case   CHAR    :", "return   createCharType ( tpcdsType . getPrecision (  )  . get (  )  )  ;", "case   VARCHAR    :", "return   createVarcharType ( tpcdsType . getPrecision (  )  . get (  )  )  ;", "case   TIME    :", "return   TimeType . TIME ;", "}", "throw   new   IllegalArgumentException (  (  \" Unsupported   TPC - DS   type    \"     +    tpcdsType )  )  ;", "}", "METHOD_END"], "methodName": ["getPrestoType"], "fileName": "com.facebook.presto.tpcds.TpcdsMetadata"}, {"methodBody": ["METHOD_START", "{", "if    ( schemaNameOrNull    =  =    null )     {", "return   listSchemaNames ( session )  ;", "} else", "if    (  (  . schemaNameToScaleFactor ( schemaNameOrNull )  )     >     0  )     {", "return   ImmutableList . of ( schemaNameOrNull )  ;", "}", "return   ImmutableList . of (  )  ;", "}", "METHOD_END"], "methodName": ["getSchemaNames"], "fileName": "com.facebook.presto.tpcds.TpcdsMetadata"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < ColumnMetadata >    columns    =    ImmutableList . builder (  )  ;", "for    ( Column   column    :    tpcdsTable . getColumns (  )  )     {", "columns . add ( new   ColumnMetadata ( column . getName (  )  ,    TpcdsMetadata . getPrestoType ( column . getType (  )  )  )  )  ;", "}", "SchemaTableName   tableName    =    new   SchemaTableName ( schemaName ,    tpcdsTable . getName (  )  )  ;", "return   new   spi . ConnectorTableMetadata ( tableName ,    columns . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["getTableMetadata"], "fileName": "com.facebook.presto.tpcds.TpcdsMetadata"}, {"methodBody": ["METHOD_START", "{", "return    \" sf \"     +    scaleFactor ;", "}", "METHOD_END"], "methodName": ["scaleFactorSchemaName"], "fileName": "com.facebook.presto.tpcds.TpcdsMetadata"}, {"methodBody": ["METHOD_START", "{", "if    ( TpcdsMetadata . TINY _ SCHEMA _ NAME . equals ( schemaName )  )     {", "return   TpcdsMetadata . TINY _ SCALE _ FACTOR ;", "}", "if    (  !  ( schemaName . startsWith (  \" sf \"  )  )  )     {", "return    -  1  ;", "}", "try    {", "return   Double . parseDouble ( schemaName . substring (  2  )  )  ;", "}    catch    ( Exception   ignored )     {", "return    -  1  ;", "}", "}", "METHOD_END"], "methodName": ["schemaNameToScaleFactor"], "fileName": "com.facebook.presto.tpcds.TpcdsMetadata"}, {"methodBody": ["METHOD_START", "{", "return   table ;", "}", "METHOD_END"], "methodName": ["getTable"], "fileName": "com.facebook.presto.tpcds.TpcdsPartitioningHandle"}, {"methodBody": ["METHOD_START", "{", "return   totalRows ;", "}", "METHOD_END"], "methodName": ["getTotalRows"], "fileName": "com.facebook.presto.tpcds.TpcdsPartitioningHandle"}, {"methodBody": ["METHOD_START", "{", "return   TpcdsQueryRunner . createQueryRunner ( ImmutableMap . of (  )  )  ;", "}", "METHOD_END"], "methodName": ["createQueryRunner"], "fileName": "com.facebook.presto.tpcds.TpcdsQueryRunner"}, {"methodBody": ["METHOD_START", "{", "return   TpcdsQueryRunner . createQueryRunner ( extraProperties ,    ImmutableMap . of (  )  )  ;", "}", "METHOD_END"], "methodName": ["createQueryRunner"], "fileName": "com.facebook.presto.tpcds.TpcdsQueryRunner"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    testSessionBuilder (  )  . setSource (  \" test \"  )  . setCatalog (  \" tpcds \"  )  . setSchema (  \" sf 1  \"  )  . build (  )  ;", "Distributed   queryRunner    =    Distributed . builder ( session )  . setNodeCount (  4  )  . setExtraProperties ( extraProperties )  . setCoordinatorProperties ( coordinatorProperties )  . build (  )  ;", "try    {", "queryRunner . installPlugin ( new   TpcdsPlugin (  )  )  ;", "queryRunner . createCatalog (  \" tpcds \"  ,     \" tpcds \"  )  ;", "return   queryRunner ;", "}    catch    ( Exception   e )     {", "queryRunner . close (  )  ;", "throw   e ;", "}", "}", "METHOD_END"], "methodName": ["createQueryRunner"], "fileName": "com.facebook.presto.tpcds.TpcdsQueryRunner"}, {"methodBody": ["METHOD_START", "{", "Logging . initialize (  )  ;", "DistributedQueryRunner   queryRunner    =     . createQueryRunner ( ImmutableMap . of (  \" http - server . http . port \"  ,     \"  8  0  8  0  \"  )  )  ;", "Thread . sleep (  1  0  )  ;", "Logger   log    =    Logger . get (  . class )  ;", "log . info (  \"  =  =  =  =  =  =  =  =    SERVER   STARTED    =  =  =  =  =  =  =  =  \"  )  ;", "log . info (  \"  \\ n =  =  =  =  \\ n % s \\ n =  =  =  =  \"  ,    queryRunner . getCoordinator (  )  . getBaseUrl (  )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.tpcds.TpcdsQueryRunner"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < Column >    builder    =    ImmutableList . builder (  )  ;", "for    ( ColumnHandle   column    :    columns )     {", "String   columnName    =     (  ( TpcdsColumnHandle )     ( column )  )  . getColumnName (  )  ;", "builder . add ( table . getColumn ( columnName )  )  ;", "}", "Session   session    =    Session . getDefaultSession (  )  . withScale ( scaleFactor )  . withParallelism ( totalParts )  . withChunkNumber (  ( partNumber    +     1  )  )  . withTable ( table )  . withNoSexism ( noSexism )  ;", "Results   results    =    constructResults ( table ,    session )  ;", "return   new    ( results ,    builder . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["getRecordSet"], "fileName": "com.facebook.presto.tpcds.TpcdsRecordSetProvider"}, {"methodBody": ["METHOD_START", "{", "return   partNumber ;", "}", "METHOD_END"], "methodName": ["getPartNumber"], "fileName": "com.facebook.presto.tpcds.TpcdsSplit"}, {"methodBody": ["METHOD_START", "{", "return   tableHandle ;", "}", "METHOD_END"], "methodName": ["getTableHandle"], "fileName": "com.facebook.presto.tpcds.TpcdsSplit"}, {"methodBody": ["METHOD_START", "{", "return   totalParts ;", "}", "METHOD_END"], "methodName": ["getTotalParts"], "fileName": "com.facebook.presto.tpcds.TpcdsSplit"}, {"methodBody": ["METHOD_START", "{", "return   noSexism ;", "}", "METHOD_END"], "methodName": ["isNoSexism"], "fileName": "com.facebook.presto.tpcds.TpcdsSplit"}, {"methodBody": ["METHOD_START", "{", "return   scaleFactor ;", "}", "METHOD_END"], "methodName": ["getScaleFactor"], "fileName": "com.facebook.presto.tpcds.TpcdsTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   tableName ;", "}", "METHOD_END"], "methodName": ["getTableName"], "fileName": "com.facebook.presto.tpcds.TpcdsTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   table ;", "}", "METHOD_END"], "methodName": ["getTable"], "fileName": "com.facebook.presto.tpcds.TpcdsTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "return   distinctValuesCount ;", "}", "METHOD_END"], "methodName": ["getDistinctValuesCount"], "fileName": "com.facebook.presto.tpcds.statistics.ColumnStatisticsData"}, {"methodBody": ["METHOD_START", "{", "return   max ;", "}", "METHOD_END"], "methodName": ["getMax"], "fileName": "com.facebook.presto.tpcds.statistics.ColumnStatisticsData"}, {"methodBody": ["METHOD_START", "{", "return   min ;", "}", "METHOD_END"], "methodName": ["getMin"], "fileName": "com.facebook.presto.tpcds.statistics.ColumnStatisticsData"}, {"methodBody": ["METHOD_START", "{", "return   nullsCount ;", "}", "METHOD_END"], "methodName": ["getNullsCount"], "fileName": "com.facebook.presto.tpcds.statistics.ColumnStatisticsData"}, {"methodBody": ["METHOD_START", "{", "return   nonNullValues . size (  )  ;", "}", "METHOD_END"], "methodName": ["getDistinctValuesCount"], "fileName": "com.facebook.presto.tpcds.statistics.ColumnStatisticsRecorder"}, {"methodBody": ["METHOD_START", "{", "return    ( nonNullValues . size (  )  )     >     0     ?    Optional . of ( nonNullValues . last (  )  )     :    Optional . empty (  )  ;", "}", "METHOD_END"], "methodName": ["getHighestValue"], "fileName": "com.facebook.presto.tpcds.statistics.ColumnStatisticsRecorder"}, {"methodBody": ["METHOD_START", "{", "return    ( nonNullValues . size (  )  )     >     0     ?    Optional . of ( nonNullValues . first (  )  )     :    Optional . empty (  )  ;", "}", "METHOD_END"], "methodName": ["getLowestValue"], "fileName": "com.facebook.presto.tpcds.statistics.ColumnStatisticsRecorder"}, {"methodBody": ["METHOD_START", "{", "return   nullsCount ;", "}", "METHOD_END"], "methodName": ["getNullsCount"], "fileName": "com.facebook.presto.tpcds.statistics.ColumnStatisticsRecorder"}, {"methodBody": ["METHOD_START", "{", "return   new   ColumnStatisticsData ( getDistinctValuesCount (  )  ,    getNullsCount (  )  ,    getLowestValue (  )  ,    getHighestValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["getRecording"], "fileName": "com.facebook.presto.tpcds.statistics.ColumnStatisticsRecorder"}, {"methodBody": ["METHOD_START", "{", "if    ( value    !  =    null )     {", "nonNullValues . add ( value )  ;", "} else    {", "( nullsCount )  +  +  ;", "}", "}", "METHOD_END"], "methodName": ["record"], "fileName": "com.facebook.presto.tpcds.statistics.ColumnStatisticsRecorder"}, {"methodBody": ["METHOD_START", "{", "return   columns ;", "}", "METHOD_END"], "methodName": ["getColumns"], "fileName": "com.facebook.presto.tpcds.statistics.TableStatisticsData"}, {"methodBody": ["METHOD_START", "{", "return   rowCount ;", "}", "METHOD_END"], "methodName": ["getRowCount"], "fileName": "com.facebook.presto.tpcds.statistics.TableStatisticsData"}, {"methodBody": ["METHOD_START", "{", "schemaName    =    normalizeSchemaName ( schemaName )  ;", "String   filename    =    table . getName (  )  ;", "String   resourcePath    =     (  (  (  \"  / tpcds /  /  \"     +    schemaName )     +     \"  /  \"  )     +    filename )     +     \"  . json \"  ;", "return   readStatistics ( resourcePath )  ;", "}", "METHOD_END"], "methodName": ["load"], "fileName": "com.facebook.presto.tpcds.statistics.TableStatisticsDataRepository"}, {"methodBody": ["METHOD_START", "{", "return   schemaName . trim (  )  . replaceAll (  \"  \\  \\  .  0  +  $  \"  ,     \"  \"  )  ;", "}", "METHOD_END"], "methodName": ["normalizeSchemaName"], "fileName": "com.facebook.presto.tpcds.statistics.TableStatisticsDataRepository"}, {"methodBody": ["METHOD_START", "{", "URL   resource    =    getClass (  )  . getResource ( resourcePath )  ;", "if    ( resource    =  =    null )     {", "return   Optional . empty (  )  ;", "}", "try    {", "return   Optional . of ( objectMapper . readValue ( resource ,     . class )  )  ;", "}    catch    ( Exception   e )     {", "throw   new   RuntimeException ( String . format (  \" Failed   to   parse   stats   from   resource    [  % s ]  \"  ,    resourcePath )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["readStatistics"], "fileName": "com.facebook.presto.tpcds.statistics.TableStatisticsDataRepository"}, {"methodBody": ["METHOD_START", "{", "schemaName    =    normalizeSchemaName ( schemaName )  ;", "String   filename    =    table . getName (  )  ;", "Path   path    =    Paths . get (  \" presto - tpcds \"  ,     \" src \"  ,     \" main \"  ,     \" resources \"  ,     \" tpcds \"  ,     \" statistics \"  ,    schemaName ,     ( filename    +     \"  . json \"  )  )  ;", "writeStatistics ( path ,    s )  ;", "}", "METHOD_END"], "methodName": ["save"], "fileName": "com.facebook.presto.tpcds.statistics.TableStatisticsDataRepository"}, {"methodBody": ["METHOD_START", "{", "File   file    =    path . toFile (  )  ;", "file . getParentFile (  )  . mkdirs (  )  ;", "try    {", "objectMapper . writerWithDefaultPrettyPrinter (  )  . writeValue ( file ,    t )  ;", "try    ( FileWriter   fileWriter    =    new   FileWriter ( file ,    true )  )     {", "fileWriter . append (  '  \\ n '  )  ;", "}", "}    catch    ( IOException   e )     {", "throw   new   RuntimeException (  \" Could   not   save   table   statistics   data \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["writeStatistics"], "fileName": "com.facebook.presto.tpcds.statistics.TableStatisticsDataRepository"}, {"methodBody": ["METHOD_START", "{", "return   columns . stream (  )  . map (  (    column )     -  >    new   ColumnStatisticsRecorder (  )  )  . collect ( toImmutableList (  )  )  ;", "}", "METHOD_END"], "methodName": ["createStatisticsRecorders"], "fileName": "com.facebook.presto.tpcds.statistics.TableStatisticsRecorder"}, {"methodBody": ["METHOD_START", "{", "if    ( recordCursor . isNull ( columnId )  )     {", "return   null ;", "}", "Column   column    =    columns . get ( columnId )  ;", "ColumnType . Base   baseType    =    column . getType (  )  . getBase (  )  ;", "switch    ( baseType )     {", "case   IDENTIFIER    :", "case   INTEGER    :", "case   DATE    :", "case   TIME    :", "case   DECIMAL    :", "return   recordCursor . getLong ( columnId )  ;", "case   VARCHAR    :", "case   CHAR    :", "return   recordCursor . getSlice ( columnId )  . toStringAscii (  )  ;", "}", "throw   new   UnsupportedOperationException ( String . format (  \" Unsupported   TPCDS   base   type    [  % s ]  \"  ,    baseType )  )  ;", "}", "METHOD_END"], "methodName": ["getPrestoValue"], "fileName": "com.facebook.presto.tpcds.statistics.TableStatisticsRecorder"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    Session . getDefaultSession (  )  . withScale ( scaleFactor )  . withParallelism (  1  )  . withNoSexism ( false )  ;", "List < Column >    columns    =    ImmutableList . copyOf ( table . getColumns (  )  )  ;", "RecordCursor   recordCursor    =    new   TpcdsRecordSet ( Results . constructResults ( table ,    session )  ,    columns )  . cursor (  )  ;", "List < ColumnStatisticsRecorder >    statisticsRecorders    =    creats ( columns )  ;", "long   rowCount    =     0  ;", "while    ( recordCursor . advanceNextPosition (  )  )     {", "rowCount +  +  ;", "for    ( int   columnId    =     0  ;    columnId    <     ( columns . size (  )  )  ;    columnId +  +  )     {", "Comparable <  ?  >    value    =    getPrestoValue ( recordCursor ,    columns ,    columnId )  ;", "statisticsRecorders . get ( columnId )  . record ( value )  ;", "}", "}", "Map < String ,    ColumnStatisticsData >    columnSampleStatistics    =    IntStream . range (  0  ,    columns . size (  )  )  . boxed (  )  . collect ( toImmutableMap (  (    i )     -  >    columns . get ( i )  . getName (  )  ,     (    i )     -  >    statisticsRecorders . get ( i )  . getRecording (  )  )  )  ;", "return   new   TableStatisticsData ( rowCount ,    columnSampleStatistics )  ;", "}", "METHOD_END"], "methodName": ["recordStatistics"], "fileName": "com.facebook.presto.tpcds.statistics.TableStatisticsRecorder"}, {"methodBody": ["METHOD_START", "{", "Session   defaultSession    =    testSessionBuilder (  )  . setCatalog (  \" tpcds \"  )  . setSchema (  \" sf 1  \"  )  . setSystemProperty ( SystemSessionProperties . ENABLE _ NEW _ STATS _ CALCULATOR ,     \" true \"  )  . build (  )  ;", "queryRunner    =    new   esting . LocalQueryRunner ( defaultSession )  ;", "queryRunner . createCatalog (  \" tpcds \"  ,    new   TpcdsConnectorFactory (  )  ,    Collections . emptyMap (  )  )  ;", "statisticsAssertion    =    new   ests . statistics . StatisticsAssertion ( queryRunner )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.tpcds.statistics.TestTpcdsLocalStats"}, {"methodBody": ["METHOD_START", "{", "statisticsAssertion    =    null ;", "if    (  ( queryRunner )     !  =    null )     {", "queryRunner . close (  )  ;", "queryRunner    =    null ;", "}", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.tpcds.statistics.TestTpcdsLocalStats"}, {"methodBody": ["METHOD_START", "{", "statisticsAssertion . check (  \" SELECT    *    FROM   customer _ demographics   WHERE   cd _ marital _ status    =     ' D '  \"  ,     (    checks )     -  >    checks . estimate ( OUTPUT _ ROW _ COUNT ,    defaultTolerance (  )  )  . estimate ( distinctValuesCount (  \" cd _ marital _ status \"  )  ,    noError (  )  )  )  ;", "statisticsAssertion . check (  \" SELECT    *    FROM   customer _ demographics   WHERE    ' D '     =    cd _ marital _ status \"  ,     (    checks )     -  >    checks . estimate ( OUTPUT _ ROW _ COUNT ,    defaultTolerance (  )  )  . estimate ( distinctValuesCount (  \" cd _ marital _ status \"  )  ,    noError (  )  )  )  ;", "statisticsAssertion . check (  \" SELECT    *    FROM   item   WHERE   i _ category    =     ' Women                                                                                                                                        '  \"  ,     (    checks )     -  >    checks . estimate ( OUTPUT _ ROW _ COUNT ,    defaultTolerance (  )  )  )  ;", "statisticsAssertion . check (  \" SELECT    *    FROM   item   WHERE    ' Women                                                                                                                                        '     =    i _ category \"  ,     (    checks )     -  >    checks . estimate ( OUTPUT _ ROW _ COUNT ,    defaultTolerance (  )  )  )  ;", "statisticsAssertion . check (  \" SELECT    *    FROM   item   WHERE   i _ category    =    cast (  ' Women '    as   char (  5  0  )  )  \"  ,     (    checks )     -  >    checks . estimate ( OUTPUT _ ROW _ COUNT ,    defaultTolerance (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testCharComparison"], "fileName": "com.facebook.presto.tpcds.statistics.TestTpcdsLocalStats"}, {"methodBody": ["METHOD_START", "{", "statisticsAssertion . check (  \" SELECT    *    FROM   customer _ address   WHERE   ca _ gmt _ offset    =     -  7  \"  ,     (    checks )     -  >    checks . estimate ( OUTPUT _ ROW _ COUNT ,    relativeError (  0  .  6  )  )  . estimate ( distinctValuesCount (  \" ca _ gmt _ offset \"  )  ,    noError (  )  )  )  ;", "statisticsAssertion . check (  \" SELECT    *    FROM   customer _ address   WHERE    -  7     =    ca _ gmt _ offset \"  ,     (    checks )     -  >    checks . estimate ( OUTPUT _ ROW _ COUNT ,    relativeError (  0  .  6  )  )  . estimate ( distinctValuesCount (  \" ca _ gmt _ offset \"  )  ,    noError (  )  )  )  ;", "statisticsAssertion . check (  \" SELECT    *    FROM   customer _ address   WHERE   ca _ gmt _ offset    =     ( decimal    '  -  7  .  0  '  )  \"  ,     (    checks )     -  >    checks . estimate ( OUTPUT _ ROW _ COUNT ,    relativeError (  0  .  6  )  )  . estimate ( distinctValuesCount (  \" ca _ gmt _ offset \"  )  ,    noError (  )  )  )  ;", "statisticsAssertion . check (  \" SELECT    *    FROM   customer _ address   WHERE   ca _ gmt _ offset    =     -  7  .  0  \"  ,     (    checks )     -  >    checks . estimate ( OUTPUT _ ROW _ COUNT ,    relativeError (  0  .  6  )  )  )  ;", "statisticsAssertion . check (  \" SELECT    *    FROM   promotion   WHERE   p _ cost    <     1  \"  ,     (    checks )     -  >    checks . estimate ( OUTPUT _ ROW _ COUNT ,    noError (  )  )  )  ;", "statisticsAssertion . check (  \" SELECT    *    FROM   promotion   WHERE    1     >    p _ cost \"  ,     (    checks )     -  >    checks . estimate ( OUTPUT _ ROW _ COUNT ,    noError (  )  )  )  ;", "statisticsAssertion . check (  \" SELECT    *    FROM   promotion   WHERE   p _ cost    <     2  0  0  0  .  0  \"  ,     (    checks )     -  >    checks . estimate ( OUTPUT _ ROW _ COUNT ,    noError (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testDecimalComparison"], "fileName": "com.facebook.presto.tpcds.statistics.TestTpcdsLocalStats"}, {"methodBody": ["METHOD_START", "{", "statisticsAssertion . check (  \" SELECT    *    FROM   item \"  ,     (    checks )     -  >    checks . estimate ( OUTPUT _ ROW _ COUNT ,    defaultTolerance (  )  )  . verifyExactColumnStatistics (  \" i _ item _ sk \"  )  . verifyCharacterColumnStatistics (  \" i _ item _ id \"  ,    noError (  )  )  . verifyColumnStatistics (  \" i _ brand _ id \"  ,    absoluteError (  0  .  0  1  )  )  . verifyCharacterColumnStatistics (  \" i _ color \"  ,    absoluteError (  0  .  0  1  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testTableScanStats"], "fileName": "com.facebook.presto.tpcds.statistics.TestTpcdsLocalStats"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( table ,     \" table   is   null \"  )  ;", "Objects . requireNonNull ( schemaName ,     \" schemaName   is   null \"  )  ;", "double   scaleFactor    =    TpcdsMetadata . schemaNameToScaleFactor ( schemaName )  ;", "System . out . print ( String . format (  \" Recording   stats   for    % s .  % s    .  .  .  \"  ,    schemaName ,    table . getName (  )  )  )  ;", "long   start    =    System . nanoTime (  )  ;", "TableStatisticsData   statisticsData    =    table . recordStatistics ( table ,    scaleFactor )  ;", "long   duration    =     (  ( System . nanoTime (  )  )     -    start )     /     1  0  0  0  0  0  0  ;", "System . out . println ( String . format (  \"  \\ tfinished   in    % s   ms \"  ,    duration )  )  ;", "tableStatisticsDataRepository . save ( schemaName ,    table ,    statisticsData )  ;", "}", "METHOD_END"], "methodName": ["computeAndOutputStatsFor"], "fileName": "com.facebook.presto.tpcds.statistics.TpcdsStatisticsRecorder"}, {"methodBody": ["METHOD_START", "{", "TpcdsStatisticsRecorder   tool    =    new   TpcdsStatisticsRecorder ( new   TableStatisticsRecorder (  )  ,    new   TableStatisticsDataRepository (  )  )  ;", "TpcdsStatisticsRecorder . SUPPORTED _ SCHEMAS . forEach (  (    schemaName )     -  >    Table . getBaseTables (  )  . stream (  )  . forEach (  (    table )     -  >    tool . computeAndOutputStatsFor ( schemaName ,    table )  )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.tpcds.statistics.TpcdsStatisticsRecorder"}, {"methodBody": ["METHOD_START", "{", "Optional < TableStatisticsData >    statisticsDataOptional    =    statisticsDataRepository . load ( schemaName ,    table )  ;", "return   statisticsDataOptional . map (  (    statisticsData )     -  >    toTableStatistics ( columnHandles ,    statisticsData )  )  . orElse ( EMPTY _ STATISTICS )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "com.facebook.presto.tpcds.statistics.TpcdsTableStatisticsFactory"}, {"methodBody": ["METHOD_START", "{", "ColumnStatistics . Builder   columnStatistics    =    ColumnStatistics . builder (  )  ;", "long   nullCount    =    columnStatisticsData . getNullsCount (  )  ;", "columnStatistics . setNullsFraction ( new   Estimate (  (  (  ( double )     ( nullCount )  )     /    rowCount )  )  )  ;", "columnStatistics . addRange (  (    builder )     -  >    builder . setLowValue ( columnStatisticsData . getMin (  )  . map (  (    value )     -  >    toPrestoValue ( value ,    type )  )  )  . setHighValue ( columnStatisticsData . getMax (  )  . map (  (    value )     -  >    toPrestoValue ( value ,    type )  )  )  . setDistinctValuesCount ( new   Estimate ( columnStatisticsData . getDistinctValuesCount (  )  )  )  . setFraction ( new   Estimate (  (  (  (  ( double )     ( rowCount )  )     -    nullCount )     /    rowCount )  )  )  . build (  )  )  ;", "return   columnStatistics . build (  )  ;", "}", "METHOD_END"], "methodName": ["toColumnStatistics"], "fileName": "com.facebook.presto.tpcds.statistics.TpcdsTableStatisticsFactory"}, {"methodBody": ["METHOD_START", "{", "if    ( type   instanceof   VarcharType )     {", "return   Slices . utf 8 Slice (  (  ( String )     ( tpcdsValue )  )  )  ;", "} else", "if    ( type   instanceof   spi . type . CharType )     {", "return   truncateToLengthAndTrimSpaces ( Slices . utf 8 Slice (  (  ( String )     ( tpcdsValue )  )  )  ,    type )  ;", "} else", "if    (  ( tpcdsValue   instanceof   String )     &  &     ( type . equals ( DATE )  )  )     {", "return   parse (  (  ( CharSequence )     ( tpcdsValue )  )  )  . toEpochDay (  )  ;", "} else", "if    (  (  (  ( type . equals ( BIGINT )  )     |  |     ( type . equals ( INTEGER )  )  )     |  |     ( type . equals ( DATE )  )  )     |  |     (  ( type   instanceof   spi . type . DecimalType )     &  &     ( isShortDecimal ( type )  )  )  )     {", "return    (  ( Number )     ( tpcdsValue )  )  . longValue (  )  ;", "} else", "if    ( type . equals ( DOUBLE )  )     {", "return    (  ( Number )     ( tpcdsValue )  )  . doubleValue (  )  ;", "} else", "if    ( type . equals ( TimeType . TIME )  )     {", "return    (  ( Number )     ( tpcdsValue )  )  . longValue (  )  ;", "}", "throw   new   IllegalArgumentException (  (  \" unsupported   column   type    \"     +    type )  )  ;", "}", "METHOD_END"], "methodName": ["toPrestoValue"], "fileName": "com.facebook.presto.tpcds.statistics.TpcdsTableStatisticsFactory"}, {"methodBody": ["METHOD_START", "{", "long   rowCount    =    statisticsData . getRowCount (  )  ;", ". Builder   tableStatistics    =     . builder (  )  . setRowCount ( new   Estimate ( rowCount )  )  ;", "if    ( rowCount    >     0  )     {", "Map < String ,    ColumnStatisticsData >    columnsData    =    statisticsData . getColumns (  )  ;", "for    ( Map . Entry < String ,    ColumnHandle >    entry    :    columnHandles . entrySet (  )  )     {", "TpcdsColumnHandle   columnHandle    =     (  ( TpcdsColumnHandle )     ( entry . getValue (  )  )  )  ;", "tableStatistics . setColumnStatistics ( entry . getValue (  )  ,    toColumnStatistics ( columnsData . get ( entry . getKey (  )  )  ,    columnHandle . getType (  )  ,    rowCount )  )  ;", "}", "}", "return   tableStatistics . build (  )  ;", "}", "METHOD_END"], "methodName": ["toTableStatistics"], "fileName": "com.facebook.presto.tpcds.statistics.TpcdsTableStatisticsFactory"}]