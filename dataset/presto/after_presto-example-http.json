[{"methodBody": ["METHOD_START", "{", "return   schemas . get (  )  . keySet (  )  ;", "}", "METHOD_END"], "methodName": ["getSchemaNames"], "fileName": "com.facebook.presto.example.ExampleClient"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( schema ,     \" schema   is   null \"  )  ;", "Objects . requireNonNull ( tableName ,     \" tableName   is   null \"  )  ;", "Map < String ,    Table >    tables    =    schemas . get (  )  . get ( schema )  ;", "if    ( tables    =  =    null )     {", "return   null ;", "}", "return   tables . get ( tableName )  ;", "}", "METHOD_END"], "methodName": ["getTable"], "fileName": "com.facebook.presto.example.ExampleClient"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( schema ,     \" schema   is   null \"  )  ;", "Map < String ,    Table >    tables    =    schemas . get (  )  . get ( schema )  ;", "if    ( tables    =  =    null )     {", "return   ImmutableSet . of (  )  ;", "}", "return   tables . keySet (  )  ;", "}", "METHOD_END"], "methodName": ["getTableNames"], "fileName": "com.facebook.presto.example.ExampleClient"}, {"methodBody": ["METHOD_START", "{", "URL   result    =    metadataUri . toURL (  )  ;", "String   json    =    Resources . toString ( result ,    StandardCharsets . UTF _  8  )  ;", "Map < String ,    List < ExampleTable >  >    catalog    =    catalogCodec . fromJson ( json )  ;", "return   ImmutableMap . copyOf ( transformValues ( catalog ,     . resolveAndIndexTables ( metadataUri )  )  )  ;", "}", "METHOD_END"], "methodName": ["lookupSchemas"], "fileName": "com.facebook.presto.example.ExampleClient"}, {"methodBody": ["METHOD_START", "{", "return    (    tables )     -  >     {", "Iterable < Table >    resolvedTables    =    transform ( tables ,    tableUriResolver ( metadataUri )  )  ;", "return   ImmutableMap . copyOf ( uniqueIndex ( resolvedTables ,    Table :  : getName )  )  ;", "}  ;", "}", "METHOD_END"], "methodName": ["resolveAndIndexTables"], "fileName": "com.facebook.presto.example.ExampleClient"}, {"methodBody": ["METHOD_START", "{", "return    (  )     -  >     {", "try    {", "return   lupSchemas ( metadataUri ,    catalogCodec )  ;", "}    catch    (    e )     {", "throw   new    < e > UncheckedIOException (  )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["schemasSupplier"], "fileName": "com.facebook.presto.example.ExampleClient"}, {"methodBody": ["METHOD_START", "{", "return    (    table )     -  >     {", "List < URI >    sources    =    ImmutableList . copyOf ( transform ( table . getSources (  )  ,    baseUri :  : resolve )  )  ;", "return   new   Table ( table . getName (  )  ,    table . getColumns (  )  ,    sources )  ;", "}  ;", "}", "METHOD_END"], "methodName": ["tableUriResolver"], "fileName": "com.facebook.presto.example.ExampleClient"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.example.ExampleColumn"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.facebook.presto.example.ExampleColumn"}, {"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . spi . ColumnMetadata ( columnName ,    columnType )  ;", "}", "METHOD_END"], "methodName": ["getColumnMetadata"], "fileName": "com.facebook.presto.example.ExampleColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   columnName ;", "}", "METHOD_END"], "methodName": ["getColumnName"], "fileName": "com.facebook.presto.example.ExampleColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   columnType ;", "}", "METHOD_END"], "methodName": ["getColumnType"], "fileName": "com.facebook.presto.example.ExampleColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   connectorId ;", "}", "METHOD_END"], "methodName": ["getConnectorId"], "fileName": "com.facebook.presto.example.ExampleColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   ordinalPosition ;", "}", "METHOD_END"], "methodName": ["getOrdinalPosition"], "fileName": "com.facebook.presto.example.ExampleColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   metadata ;", "}", "METHOD_END"], "methodName": ["getMetadata"], "fileName": "com.facebook.presto.example.ExampleConfig"}, {"methodBody": ["METHOD_START", "{", "this . metadata    =    metadata ;", "turn   this ;", "}", "METHOD_END"], "methodName": ["setMetadata"], "fileName": "com.facebook.presto.example.ExampleConfig"}, {"methodBody": ["METHOD_START", "{", "return   baseUri . resolve ( s )  ;", "}", "METHOD_END"], "methodName": ["resolve"], "fileName": "com.facebook.presto.example.ExampleHttpServer"}, {"methodBody": ["METHOD_START", "{", "lifeCycleManager . stop (  )  ;", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "com.facebook.presto.example.ExampleHttpServer"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( listSchemaNames (  )  . contains ( tableName . getSchemaName (  )  )  )  )     {", "return   null ;", "}", "ExampleTable   table    =    exampleClient . getTable ( tableName . getSchemaName (  )  ,    tableName . getTableName (  )  )  ;", "if    ( table    =  =    null )     {", "return   null ;", "}", "return   new   spi . ConnectorTableMetadata ( tableName ,    table . getColumnsMetadata (  )  )  ;", "}", "METHOD_END"], "methodName": ["getTableMetadata"], "fileName": "com.facebook.presto.example.ExampleMetadata"}, {"methodBody": ["METHOD_START", "{", "return   ImmutableList . copyOf ( exampleClient . getSchemaNames (  )  )  ;", "}", "METHOD_END"], "methodName": ["listSchemaNames"], "fileName": "com.facebook.presto.example.ExampleMetadata"}, {"methodBody": ["METHOD_START", "{", "if    (  ( prefix . getSchemaName (  )  )     =  =    null )     {", "return   listTables ( session ,    prefix . getSchemaName (  )  )  ;", "}", "return   ImmutableList . of ( new   spi . SchemaTableName ( prefix . getSchemaName (  )  ,    prefix . getTableName (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["listTables"], "fileName": "com.facebook.presto.example.ExampleMetadata"}, {"methodBody": ["METHOD_START", "{", "Type   actual    =    getType ( field )  ;", "checkArgument ( actual . equals ( expected )  ,     \" Expected   field    % s   to   be   type    % s   but   is    % s \"  ,    field ,    expected ,    actual )  ;", "}", "METHOD_END"], "methodName": ["checkFieldType"], "fileName": "com.facebook.presto.example.ExampleRecordCursor"}, {"methodBody": ["METHOD_START", "{", "checkState (  (  ( fields )     !  =    null )  ,     \" Cursor   has   not   been   advanced   yet \"  )  ;", "int   columnIndex    =    fieldToColumnIndex [ field ]  ;", "return   fields . get ( columnIndex )  ;", "}", "METHOD_END"], "methodName": ["getFieldValue"], "fileName": "com.facebook.presto.example.ExampleRecordCursor"}, {"methodBody": ["METHOD_START", "{", "return   connectorId ;", "}", "METHOD_END"], "methodName": ["getConnectorId"], "fileName": "com.facebook.presto.example.ExampleSplit"}, {"methodBody": ["METHOD_START", "{", "return   schemaName ;", "}", "METHOD_END"], "methodName": ["getSchemaName"], "fileName": "com.facebook.presto.example.ExampleSplit"}, {"methodBody": ["METHOD_START", "{", "return   tableName ;", "}", "METHOD_END"], "methodName": ["getTableName"], "fileName": "com.facebook.presto.example.ExampleSplit"}, {"methodBody": ["METHOD_START", "{", "return   uri ;", "}", "METHOD_END"], "methodName": ["getUri"], "fileName": "com.facebook.presto.example.ExampleSplit"}, {"methodBody": ["METHOD_START", "{", "return   columns ;", "}", "METHOD_END"], "methodName": ["getColumns"], "fileName": "com.facebook.presto.example.ExampleTable"}, {"methodBody": ["METHOD_START", "{", "return   columnsMetadata ;", "}", "METHOD_END"], "methodName": ["getColumnsMetadata"], "fileName": "com.facebook.presto.example.ExampleTable"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.example.ExampleTable"}, {"methodBody": ["METHOD_START", "{", "return   sources ;", "}", "METHOD_END"], "methodName": ["getSources"], "fileName": "com.facebook.presto.example.ExampleTable"}, {"methodBody": ["METHOD_START", "{", "return   connectorId ;", "}", "METHOD_END"], "methodName": ["getConnectorId"], "fileName": "com.facebook.presto.example.ExampleTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   schemaName ;", "}", "METHOD_END"], "methodName": ["getSchemaName"], "fileName": "com.facebook.presto.example.ExampleTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   tableName ;", "}", "METHOD_END"], "methodName": ["getTableName"], "fileName": "com.facebook.presto.example.ExampleTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   new   SchemaTableName ( schemaName ,    tableName )  ;", "}", "METHOD_END"], "methodName": ["toSchemaTableName"], "fileName": "com.facebook.presto.example.ExampleTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   table ;", "}", "METHOD_END"], "methodName": ["getTable"], "fileName": "com.facebook.presto.example.ExampleTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "URL   metadataUrl    =    Resources . getResource ( TestExampleClient . class ,     \"  / example - data / example - metadata . json \"  )  ;", "assertNotNull ( metadataUrl ,     \" metadataUrl   is   null \"  )  ;", "URI   metadata    =    metadataUrl . toURI (  )  ;", "ExampleClient   client    =    new   ExampleClient ( new   ExampleConfig (  )  . setMetadata ( metadata )  ,    MetadataUtil . CATALOG _ CODEC )  ;", "assertEquals ( client . getSchemaNames (  )  ,    ImmutableSet . of (  \" example \"  ,     \" tpch \"  )  )  ;", "assertEquals ( client . getTableNames (  \" example \"  )  ,    ImmutableSet . of (  \" numbers \"  )  )  ;", "assertEquals ( client . getTableNames (  \" tpch \"  )  ,    ImmutableSet . of (  \" orders \"  ,     \" lineitem \"  )  )  ;", "ExampleTable   table    =    client . getTable (  \" example \"  ,     \" numbers \"  )  ;", "assertNotNull ( table ,     \" table   is   null \"  )  ;", "assertEquals ( table . getName (  )  ,     \" numbers \"  )  ;", "assertEquals ( table . getColumns (  )  ,    ImmutableList . of ( new   ExampleColumn (  \" text \"  ,    createUnboundedVarcharType (  )  )  ,    new   ExampleColumn (  \" value \"  ,    BIGINT )  )  )  ;", "assertEquals ( table . getSources (  )  ,    ImmutableList . of ( metadata . resolve (  \" numbers -  1  . csv \"  )  ,    metadata . resolve (  \" numbers -  2  . csv \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testMetadata"], "fileName": "com.facebook.presto.example.TestExampleClient"}, {"methodBody": ["METHOD_START", "{", "EquivalenceTester . equivalenceTester (  )  . addEquivalentGroup ( new   ExampleColumnHandle (  \" connectorId \"  ,     \" columnName \"  ,    createUnboundedVarcharType (  )  ,     0  )  ,    new   ExampleColumnHandle (  \" connectorId \"  ,     \" columnName \"  ,    createUnboundedVarcharType (  )  ,     0  )  ,    new   ExampleColumnHandle (  \" connectorId \"  ,     \" columnName \"  ,    BIGINT ,     0  )  ,    new   ExampleColumnHandle (  \" connectorId \"  ,     \" columnName \"  ,    createUnboundedVarcharType (  )  ,     1  )  )  . addEquivalentGroup ( new   ExampleColumnHandle (  \" connectorIdX \"  ,     \" columnName \"  ,    createUnboundedVarcharType (  )  ,     0  )  ,    new   ExampleColumnHandle (  \" connectorIdX \"  ,     \" columnName \"  ,    createUnboundedVarcharType (  )  ,     0  )  ,    new   ExampleColumnHandle (  \" connectorIdX \"  ,     \" columnName \"  ,    BIGINT ,     0  )  ,    new   ExampleColumnHandle (  \" connectorIdX \"  ,     \" columnName \"  ,    createUnboundedVarcharType (  )  ,     1  )  )  . addEquivalentGroup ( new   ExampleColumnHandle (  \" connectorId \"  ,     \" columnNameX \"  ,    createUnboundedVarcharType (  )  ,     0  )  ,    new   ExampleColumnHandle (  \" connectorId \"  ,     \" columnNameX \"  ,    createUnboundedVarcharType (  )  ,     0  )  ,    new   ExampleColumnHandle (  \" connectorId \"  ,     \" columnNameX \"  ,    BIGINT ,     0  )  ,    new   ExampleColumnHandle (  \" connectorId \"  ,     \" columnNameX \"  ,    createUnboundedVarcharType (  )  ,     1  )  )  . check (  )  ;", "}", "METHOD_END"], "methodName": ["testEquivalence"], "fileName": "com.facebook.presto.example.TestExampleColumnHandle"}, {"methodBody": ["METHOD_START", "{", "String   json    =    MetadataUtil . COLUMN _ CODEC . toJson ( columnHandle )  ;", "copy    =    MetadataUtil . COLUMN _ CODEC . fromJson ( json )  ;", "assertEquals ( copy ,    columnHandle )  ;", "}", "METHOD_END"], "methodName": ["testJsonRoundTrip"], "fileName": "com.facebook.presto.example.TestExampleColumnHandle"}, {"methodBody": ["METHOD_START", "{", "ConfigAssertions . assertRecordedDefaults ( ConfigAssertions . recordDefaults ( ExampleConfig . class )  . setMetadata ( null )  )  ;", "}", "METHOD_END"], "methodName": ["testDefaults"], "fileName": "com.facebook.presto.example.TestExampleConfig"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    properties    =    new   Builder < String ,    String >  (  )  . put (  \" metadata - uri \"  ,     \" file :  /  / test . json \"  )  . build (  )  ;", "expected    =    new    (  )  . setMetadata ( URI . create (  \" file :  /  / test . json \"  )  )  ;", "ConfigAssertions . assertFullMapping ( properties ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testExplicitPropertyMappings"], "fileName": "com.facebook.presto.example.TestExampleConfig"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( metadata . getColumnMetadata ( SESSION ,    TestExampleMetadata . NUMBERS _ TABLE _ HANDLE ,    new   ExampleColumnHandle ( TestExampleMetadata . CONNECTOR _ ID ,     \" text \"  ,    createUnboundedVarcharType (  )  ,     0  )  )  ,    new   com . facebook . presto . spi . ColumnMetadata (  \" text \"  ,    createUnboundedVarcharType (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getColumnMetadata"], "fileName": "com.facebook.presto.example.TestExampleMetadata"}, {"methodBody": ["METHOD_START", "{", "ConnectorTableMetadata   tableMetadata    =    metadata . getTableMetadata ( SESSION ,    TestExampleMetadata . NUMBERS _ TABLE _ HANDLE )  ;", "assertEquals ( tableMetadata . getTable (  )  ,    new   SchemaTableName (  \" example \"  ,     \" numbers \"  )  )  ;", "assertEquals ( tableMetadata . getColumns (  )  ,    ImmutableList . of ( new   spi . ColumnMetadata (  \" text \"  ,    createUnboundedVarcharType (  )  )  ,    new   spi . ColumnMetadata (  \" value \"  ,    BIGINT )  )  )  ;", "assertNull ( metadata . getTableMetadata ( SESSION ,    new   ExampleTableHandle ( TestExampleMetadata . CONNECTOR _ ID ,     \" unknown \"  ,     \" unknown \"  )  )  )  ;", "assertNull ( metadata . getTableMetadata ( SESSION ,    new   ExampleTableHandle ( TestExampleMetadata . CONNECTOR _ ID ,     \" example \"  ,     \" unknown \"  )  )  )  ;", "assertNull ( metadata . getTableMetadata ( SESSION ,    new   ExampleTableHandle ( TestExampleMetadata . CONNECTOR _ ID ,     \" unknown \"  ,     \" numbers \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getTableMetadata"], "fileName": "com.facebook.presto.example.TestExampleMetadata"}, {"methodBody": ["METHOD_START", "{", "URL   metadataUrl    =    Resources . getResource ( TestExampleClient . class ,     \"  / example - data / example - metadata . json \"  )  ;", "assertNotNull ( metadataUrl ,     \" metadataUrl   is   null \"  )  ;", "metadataUri    =    metadataUrl . toURI (  )  ;", "ExampleClient   client    =    new   ExampleClient ( new   ExampleConfig (  )  . setMetadata ( metadataUri )  ,    MetadataUtil . CATALOG _ CODEC )  ;", "metadata    =    new   ExampleMetadata ( new   ExampleConnectorId (  . CONNECTOR _ ID )  ,    client )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.example.TestExampleMetadata"}, {"methodBody": ["METHOD_START", "{", "metadata . createTable ( SESSION ,    new   com . facebook . presto . spi . ConnectorTableMetadata ( new   SchemaTableName (  \" example \"  ,     \" foo \"  )  ,    ImmutableList . of ( new   com . facebook . presto . spi . ColumnMetadata (  \" text \"  ,    createUnboundedVarcharType (  )  )  )  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["testCreateTable"], "fileName": "com.facebook.presto.example.TestExampleMetadata"}, {"methodBody": ["METHOD_START", "{", "metadata . dropTable ( SESSION ,    TestExampleMetadata . NUMBERS _ TABLE _ HANDLE )  ;", "}", "METHOD_END"], "methodName": ["testDropTableTable"], "fileName": "com.facebook.presto.example.TestExampleMetadata"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( metadata . getColumnHandles ( SESSION ,    TestExampleMetadata . NUMBERS _ TABLE _ HANDLE )  ,    ImmutableMap . of (  \" text \"  ,    new   ExampleColumnHandle ( TestExampleMetadata . CONNECTOR _ ID ,     \" text \"  ,    createUnboundedVarcharType (  )  ,     0  )  ,     \" value \"  ,    new   ExampleColumnHandle ( TestExampleMetadata . CONNECTOR _ ID ,     \" value \"  ,    BIGINT ,     1  )  )  )  ;", "try    {", "metadata . getColumnHandles ( SESSION ,    new   ExampleTableHandle ( TestExampleMetadata . CONNECTOR _ ID ,     \" unknown \"  ,     \" unknown \"  )  )  ;", "fail (  \" Expected   getColumnHandle   of   unknown   table   to   throw   a   TableNotFoundException \"  )  ;", "}    catch    ( TableNotFoundException   expected )     {", "}", "try    {", "metadata . getColumnHandles ( SESSION ,    new   ExampleTableHandle ( TestExampleMetadata . CONNECTOR _ ID ,     \" example \"  ,     \" unknown \"  )  )  ;", "fail (  \" Expected   getColumnHandle   of   unknown   table   to   throw   a   TableNotFoundException \"  )  ;", "}    catch    ( TableNotFoundException   expected )     {", "}", "}", "METHOD_END"], "methodName": ["testGetColumnHandles"], "fileName": "com.facebook.presto.example.TestExampleMetadata"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( metadata . getTableHandle ( SESSION ,    new   SchemaTableName (  \" example \"  ,     \" numbers \"  )  )  ,    TestExampleMetadata . NUMBERS _ TABLE _ HANDLE )  ;", "assertNull ( metadata . getTableHandle ( SESSION ,    new   SchemaTableName (  \" example \"  ,     \" unknown \"  )  )  )  ;", "assertNull ( metadata . getTableHandle ( SESSION ,    new   SchemaTableName (  \" unknown \"  ,     \" numbers \"  )  )  )  ;", "assertNull ( metadata . getTableHandle ( SESSION ,    new   SchemaTableName (  \" unknown \"  ,     \" unknown \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testGetTableHandle"], "fileName": "com.facebook.presto.example.TestExampleMetadata"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( metadata . listSchemaNames ( SESSION )  ,    ImmutableSet . of (  \" example \"  ,     \" tpch \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testListSchemaNames"], "fileName": "com.facebook.presto.example.TestExampleMetadata"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( ImmutableSet . copyOf ( metadata . listTables ( SESSION ,    null )  )  ,    ImmutableSet . of ( new   SchemaTableName (  \" example \"  ,     \" numbers \"  )  ,    new   SchemaTableName (  \" tpch \"  ,     \" orders \"  )  ,    new   SchemaTableName (  \" tpch \"  ,     \" lineitem \"  )  )  )  ;", "assertEquals ( ImmutableSet . copyOf ( metadata . listTables ( SESSION ,     \" example \"  )  )  ,    ImmutableSet . of ( new   SchemaTableName (  \" example \"  ,     \" numbers \"  )  )  )  ;", "assertEquals ( ImmutableSet . copyOf ( metadata . listTables ( SESSION ,     \" tpch \"  )  )  ,    ImmutableSet . of ( new   SchemaTableName (  \" tpch \"  ,     \" orders \"  )  ,    new   SchemaTableName (  \" tpch \"  ,     \" lineitem \"  )  )  )  ;", "assertEquals ( ImmutableSet . copyOf ( metadata . listTables ( SESSION ,     \" unknown \"  )  )  ,    ImmutableSet . of (  )  )  ;", "}", "METHOD_END"], "methodName": ["testListTables"], "fileName": "com.facebook.presto.example.TestExampleMetadata"}, {"methodBody": ["METHOD_START", "{", "exampleHttpServer    =    new   ExampleHttpServer (  )  ;", "dataUri    =    exampleHttpServer . resolve (  \"  / example - data / numbers -  2  . csv \"  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.example.TestExampleRecordSet"}, {"methodBody": ["METHOD_START", "{", "if    (  ( exampleHttpServer )     !  =    null )     {", "exampleHttpServer . stop (  )  ;", "}", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.example.TestExampleRecordSet"}, {"methodBody": ["METHOD_START", "{", "RecordSet   recordSet    =    new   ExampleRecordSet ( new   ExampleSplit (  \" test \"  ,     \" schema \"  ,     \" table \"  ,    dataUri )  ,    ImmutableList . of ( new   ExampleColumnHandle (  \" test \"  ,     \" value \"  ,    BIGINT ,     1  )  ,    new   ExampleColumnHandle (  \" test \"  ,     \" value \"  ,    BIGINT ,     1  )  ,    new   ExampleColumnHandle (  \" test \"  ,     \" text \"  ,    createUnboundedVarcharType (  )  ,     0  )  )  )  ;", "RecordCursor   cursor    =    recordSet . cursor (  )  ;", "Map < String ,    Long >    data    =    new   LinkedHashMap <  >  (  )  ;", "while    ( cursor . advanceNextPosition (  )  )     {", "assertEquals ( cursor . getLong (  0  )  ,    cursor . getLong (  1  )  )  ;", "data . put ( cursor . getSlice (  2  )  . toStringUtf 8  (  )  ,    cursor . getLong (  0  )  )  ;", "}", "assertEquals ( data ,    ImmutableMap .  < String ,    Long > builder (  )  . put (  \" ten \"  ,     1  0 L )  . put (  \" eleven \"  ,     1  1 L )  . put (  \" twelve \"  ,     1  2 L )  . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["testCursorMixedOrder"], "fileName": "com.facebook.presto.example.TestExampleRecordSet"}, {"methodBody": ["METHOD_START", "{", "RecordSet   recordSet    =    new   ExampleRecordSet ( new   ExampleSplit (  \" test \"  ,     \" schema \"  ,     \" table \"  ,    dataUri )  ,    ImmutableList . of ( new   ExampleColumnHandle (  \" test \"  ,     \" text \"  ,    createUnboundedVarcharType (  )  ,     0  )  ,    new   ExampleColumnHandle (  \" test \"  ,     \" value \"  ,    BIGINT ,     1  )  )  )  ;", "RecordCursor   cursor    =    recordSet . cursor (  )  ;", "assertEquals ( cursor . getType (  0  )  ,    createUnboundedVarcharType (  )  )  ;", "assertEquals ( cursor . getType (  1  )  ,    BIGINT )  ;", "Map < String ,    Long >    data    =    new   LinkedHashMap <  >  (  )  ;", "while    ( cursor . advanceNextPosition (  )  )     {", "data . put ( cursor . getSlice (  0  )  . toStringUtf 8  (  )  ,    cursor . getLong (  1  )  )  ;", "assertFalse ( cursor . isNull (  0  )  )  ;", "assertFalse ( cursor . isNull (  1  )  )  ;", "}", "assertEquals ( data ,    ImmutableMap .  < String ,    Long > builder (  )  . put (  \" ten \"  ,     1  0 L )  . put (  \" eleven \"  ,     1  1 L )  . put (  \" twelve \"  ,     1  2 L )  . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["testCursorSimple"], "fileName": "com.facebook.presto.example.TestExampleRecordSet"}, {"methodBody": ["METHOD_START", "{", "RecordSet   recordSet    =    new   ExampleRecordSet ( new   ExampleSplit (  \" test \"  ,     \" schema \"  ,     \" table \"  ,    dataUri )  ,    ImmutableList . of ( new   ExampleColumnHandle (  \" test \"  ,     \" text \"  ,    createUnboundedVarcharType (  )  ,     0  )  ,    new   ExampleColumnHandle (  \" test \"  ,     \" value \"  ,    BIGINT ,     1  )  )  )  ;", "assertEquals ( recordSet . getColumnTypes (  )  ,    ImmutableList . of ( createUnboundedVarcharType (  )  ,    BIGINT )  )  ;", "recordSet    =    new   ExampleRecordSet ( new   ExampleSplit (  \" test \"  ,     \" schema \"  ,     \" table \"  ,    dataUri )  ,    ImmutableList . of ( new   ExampleColumnHandle (  \" test \"  ,     \" value \"  ,    BIGINT ,     1  )  ,    new   ExampleColumnHandle (  \" test \"  ,     \" text \"  ,    createUnboundedVarcharType (  )  ,     0  )  )  )  ;", "assertEquals ( recordSet . getColumnTypes (  )  ,    ImmutableList . of ( BIGINT ,    createUnboundedVarcharType (  )  )  )  ;", "recordSet    =    new   ExampleRecordSet ( new   ExampleSplit (  \" test \"  ,     \" schema \"  ,     \" table \"  ,    dataUri )  ,    ImmutableList . of ( new   ExampleColumnHandle (  \" test \"  ,     \" value \"  ,    BIGINT ,     1  )  ,    new   ExampleColumnHandle (  \" test \"  ,     \" value \"  ,    BIGINT ,     1  )  ,    new   ExampleColumnHandle (  \" test \"  ,     \" text \"  ,    createUnboundedVarcharType (  )  ,     0  )  )  )  ;", "assertEquals ( recordSet . getColumnTypes (  )  ,    ImmutableList . of ( BIGINT ,    BIGINT ,    createUnboundedVarcharType (  )  )  )  ;", "recordSet    =    new   ExampleRecordSet ( new   ExampleSplit (  \" test \"  ,     \" schema \"  ,     \" table \"  ,    dataUri )  ,    ImmutableList . of (  )  )  ;", "assertEquals ( recordSet . getColumnTypes (  )  ,    ImmutableList . of (  )  )  ;", "}", "METHOD_END"], "methodName": ["testGetColumnTypes"], "fileName": "com.facebook.presto.example.TestExampleRecordSet"}, {"methodBody": ["METHOD_START", "{", "exampleHttpServer    =    new   ExampleHttpServer (  )  ;", "dataUri    =    exampleHttpServer . resolve (  \"  / example - data / numbers -  2  . csv \"  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.example.TestExampleRecordSetProvider"}, {"methodBody": ["METHOD_START", "{", "if    (  ( exampleHttpServer )     !  =    null )     {", "exampleHttpServer . stop (  )  ;", "}", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.example.TestExampleRecordSetProvider"}, {"methodBody": ["METHOD_START", "{", "ExampleRecordSetProvider   recordSetProvider    =    new   ExampleRecordSetProvider ( new   ExampleConnectorId (  \" test \"  )  )  ;", "RecordSet   recordSet    =    recordSetProvider . getRecordSet ( ExampleTransactionHandle . INSTANCE ,    SESSION ,    new   ExampleSplit (  \" test \"  ,     \" schema \"  ,     \" table \"  ,    dataUri )  ,    ImmutableList . of ( new   ExampleColumnHandle (  \" test \"  ,     \" text \"  ,    createUnboundedVarcharType (  )  ,     0  )  ,    new   ExampleColumnHandle (  \" test \"  ,     \" value \"  ,    BIGINT ,     1  )  )  )  ;", "assertNotNull ( recordSet ,     \" recordSet   is   null \"  )  ;", "RecordCursor   cursor    =    recordSet . cursor (  )  ;", "assertNotNull ( cursor ,     \" cursor   is   null \"  )  ;", "Map < String ,    Long >    data    =    new   LinkedHashMap <  >  (  )  ;", "while    ( cursor . advanceNextPosition (  )  )     {", "data . put ( cursor . getSlice (  0  )  . toStringUtf 8  (  )  ,    cursor . getLong (  1  )  )  ;", "}", "assertEquals ( data ,    ImmutableMap .  < String ,    Long > builder (  )  . put (  \" ten \"  ,     1  0 L )  . put (  \" eleven \"  ,     1  1 L )  . put (  \" twelve \"  ,     1  2 L )  . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["testGetRecordSet"], "fileName": "com.facebook.presto.example.TestExampleRecordSetProvider"}, {"methodBody": ["METHOD_START", "{", "ExampleSplit   httpSplit    =    new   ExampleSplit (  \" connectorId \"  ,     \" schemaName \"  ,     \" tableName \"  ,    URI . create (  \" http :  /  / example . com / example \"  )  )  ;", "assertEquals ( httpSplit . getAddresses (  )  ,    ImmutableList . of ( HostAddress . fromString (  \" example . com \"  )  )  )  ;", "assertEquals ( httpSplit . isRemotelyAccessible (  )  ,    true )  ;", "httpSplit    =    new   ExampleSplit (  \" connectorId \"  ,     \" schemaName \"  ,     \" tableName \"  ,    URI . create (  \" http :  /  / example . com :  8  0  8  0  / example \"  )  )  ;", "assertEquals ( httpSplit . getAddresses (  )  ,    ImmutableList . of ( HostAddress . fromParts (  \" example . com \"  ,     8  0  8  0  )  )  )  ;", "assertEquals ( httpSplit . isRemotelyAccessible (  )  ,    true )  ;", "ExampleSplit   httpsSplit    =    new   ExampleSplit (  \" connectorId \"  ,     \" schemaName \"  ,     \" tableName \"  ,    URI . create (  \" https :  /  / example . com / example \"  )  )  ;", "assertEquals ( httpsSplit . getAddresses (  )  ,    ImmutableList . of ( HostAddress . fromString (  \" example . com \"  )  )  )  ;", "assertEquals ( httpsSplit . isRemotelyAccessible (  )  ,    true )  ;", "httpsSplit    =    new   ExampleSplit (  \" connectorId \"  ,     \" schemaName \"  ,     \" tableName \"  ,    URI . create (  \" https :  /  / example . com :  8  4  4  3  / example \"  )  )  ;", "assertEquals ( httpsSplit . getAddresses (  )  ,    ImmutableList . of ( HostAddress . fromParts (  \" example . com \"  ,     8  4  4  3  )  )  )  ;", "assertEquals ( httpsSplit . isRemotelyAccessible (  )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["testAddresses"], "fileName": "com.facebook.presto.example.TestExampleSplit"}, {"methodBody": ["METHOD_START", "{", "JsonCodec < ExampleSplit >    codec    =    jsonCodec ( ExampleSplit . class )  ;", "String   json    =    codec . toJson ( split )  ;", "ExampleSplit   copy    =    codec . fromJson ( json )  ;", "assertEquals ( copy . getConnectorId (  )  ,    split . getConnectorId (  )  )  ;", "assertEquals ( copy . getSchemaName (  )  ,    split . getSchemaName (  )  )  ;", "assertEquals ( copy . getTableName (  )  ,    split . getTableName (  )  )  ;", "assertEquals ( copy . getUri (  )  ,    split . getUri (  )  )  ;", "assertEquals ( copy . getAddresses (  )  ,    ImmutableList . of ( HostAddress . fromString (  \"  1  2  7  .  0  .  0  .  1  \"  )  )  )  ;", "assertEquals ( copy . isRemotelyAccessible (  )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["testJsonRoundTrip"], "fileName": "com.facebook.presto.example.TestExampleSplit"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( exampleTable . getColumnsMetadata (  )  ,    ImmutableList . of ( new   com . facebook . presto . spi . ColumnMetadata (  \" a \"  ,    createUnboundedVarcharType (  )  )  ,    new   com . facebook . presto . spi . ColumnMetadata (  \" b \"  ,    BIGINT )  )  )  ;", "}", "METHOD_END"], "methodName": ["testColumnMetadata"], "fileName": "com.facebook.presto.example.TestExampleTable"}, {"methodBody": ["METHOD_START", "{", "String   json    =    MetadataUtil . TABLE _ CODEC . toJson ( exampleTable )  ;", "exampleTableCopy    =    MetadataUtil . TABLE _ CODEC . fromJson ( json )  ;", "assertEquals ( exampleTableCopy . getName (  )  ,    exampleTable . getName (  )  )  ;", "assertEquals ( exampleTableCopy . getColumns (  )  ,    exampleTable . getColumns (  )  )  ;", "assertEquals ( exampleTableCopy . getSources (  )  ,    exampleTable . getSources (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRoundTrip"], "fileName": "com.facebook.presto.example.TestExampleTable"}, {"methodBody": ["METHOD_START", "{", "EquivalenceTester . equivalenceTester (  )  . addEquivalentGroup ( new   ExampleTableHandle (  \" connector \"  ,     \" schema \"  ,     \" table \"  )  ,    new   ExampleTableHandle (  \" connector \"  ,     \" schema \"  ,     \" table \"  )  )  . addEquivalentGroup ( new   ExampleTableHandle (  \" connectorX \"  ,     \" schema \"  ,     \" table \"  )  ,    new   ExampleTableHandle (  \" connectorX \"  ,     \" schema \"  ,     \" table \"  )  )  . addEquivalentGroup ( new   ExampleTableHandle (  \" connector \"  ,     \" schemaX \"  ,     \" table \"  )  ,    new   ExampleTableHandle (  \" connector \"  ,     \" schemaX \"  ,     \" table \"  )  )  . addEquivalentGroup ( new   ExampleTableHandle (  \" connector \"  ,     \" schema \"  ,     \" tableX \"  )  ,    new   ExampleTableHandle (  \" connector \"  ,     \" schema \"  ,     \" tableX \"  )  )  . check (  )  ;", "}", "METHOD_END"], "methodName": ["testEquivalence"], "fileName": "com.facebook.presto.example.TestExampleTableHandle"}, {"methodBody": ["METHOD_START", "{", "JsonCodec < ExampleTableHandle >    codec    =    jsonCodec ( ExampleTableHandle . class )  ;", "String   json    =    codec . toJson ( tableHandle )  ;", "ExampleTableHandle   copy    =    codec . fromJson ( json )  ;", "assertEquals ( copy ,    tableHandle )  ;", "}", "METHOD_END"], "methodName": ["testJsonRoundTrip"], "fileName": "com.facebook.presto.example.TestExampleTableHandle"}]