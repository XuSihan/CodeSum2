[{"methodBody": ["METHOD_START", "{", "Properties   connectionProperties    =    basicConnectionProperties ( config )  ;", "connectionProperties . setProperty (  \" useInformationSchema \"  ,     \" true \"  )  ;", "connectionProperties . setProperty (  \" nullCatalogMeansCurrent \"  ,     \" false \"  )  ;", "connectionProperties . setProperty (  \" useUnicode \"  ,     \" true \"  )  ;", "connectionProperties . setProperty (  \" characterEncoding \"  ,     \" utf 8  \"  )  ;", "connectionProperties . setProperty (  \" tinyInt 1 isBit \"  ,     \" false \"  )  ;", "if    ( mySqlConfig . isAutoReconnect (  )  )     {", "connectionProperties . setProperty (  \" autoReconnect \"  ,    String . valueOf ( mySqlConfig . isAutoReconnect (  )  )  )  ;", "connectionProperties . setProperty (  \" maxReconnects \"  ,    String . valueOf ( mySqlConfig . getMaxReconnects (  )  )  )  ;", "}", "if    (  ( mySqlConfig . getConnectionTimeout (  )  )     !  =    null )     {", "connectionProperties . setProperty (  \" connectTimeout \"  ,    String . valueOf ( mySqlConfig . getConnectionTimeout (  )  . toMillis (  )  )  )  ;", "}", "return   new   jdbc . DriverConnectionFactory ( new   Driver (  )  ,    config . getConnectionUrl (  )  ,    connectionProperties )  ;", "}", "METHOD_END"], "methodName": ["connectionFactory"], "fileName": "com.facebook.presto.plugin.mysql.MySqlClient"}, {"methodBody": ["METHOD_START", "{", "try    {", "Driver   driver    =    new   Driver (  )  ;", "Properties   urlProperties    =    driver . parseURL ( connectionUrl ,    null )  ;", "checkArgument (  ( urlProperties    !  =    null )  ,     \" Invalid   JDBC   URL   for   QL   connector \"  )  ;", "checkArgument (  (  ( driver . database ( urlProperties )  )     =  =    null )  ,     \" Database    ( catalog )    must   not   be   specified   in   JDBC   URL   for   QL   connector \"  )  ;", "}    catch    ( SQLException   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["ensureCatalogIsEmpty"], "fileName": "com.facebook.presto.plugin.mysql.MySqlClientModule"}, {"methodBody": ["METHOD_START", "{", "return   connectionTimeout ;", "}", "METHOD_END"], "methodName": ["getConnectionTimeout"], "fileName": "com.facebook.presto.plugin.mysql.MySqlConfig"}, {"methodBody": ["METHOD_START", "{", "return   maxReconnects ;", "}", "METHOD_END"], "methodName": ["getMaxReconnects"], "fileName": "com.facebook.presto.plugin.mysql.MySqlConfig"}, {"methodBody": ["METHOD_START", "{", "return   autoReconnect ;", "}", "METHOD_END"], "methodName": ["isAutoReconnect"], "fileName": "com.facebook.presto.plugin.mysql.MySqlConfig"}, {"methodBody": ["METHOD_START", "{", "this . autoReconnect    =    autoReconnect ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setAutoReconnect"], "fileName": "com.facebook.presto.plugin.mysql.MySqlConfig"}, {"methodBody": ["METHOD_START", "{", "this . connectionTimeout    =    connectionTimeout ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setConnectionTimeout"], "fileName": "com.facebook.presto.plugin.mysql.MySqlConfig"}, {"methodBody": ["METHOD_START", "{", "this . maxReconnects    =    maxReconnects ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setMaxReconnects"], "fileName": "com.facebook.presto.plugin.mysql.MySqlConfig"}, {"methodBody": ["METHOD_START", "{", "return   MySqlQueryRunner . createMySqlQueryRunner ( server ,    ImmutableList . copyOf ( tables )  )  ;", "}", "METHOD_END"], "methodName": ["createMySqlQueryRunner"], "fileName": "com.facebook.presto.plugin.mysql.MySqlQueryRunner"}, {"methodBody": ["METHOD_START", "{", "DistributedQueryRunner   queryRunner    =    null ;", "try    {", "queryRunner    =    new   DistributedQueryRunner (  . createSession (  )  ,     3  )  ;", "queryRunner . installPlugin ( new   TpchPlugin (  )  )  ;", "queryRunner . createCatalog (  \" tpch \"  ,     \" tpch \"  )  ;", "Map < String ,    String >    properties    =    ImmutableMap .  < String ,    String > builder (  )  . put (  \" connection - url \"  ,    server . getJdbcUrl (  )  )  . put (  \" allow - drop - table \"  ,     \" true \"  )  . build (  )  ;", "queryRunner . installPlugin ( new   MySqlPlugin (  )  )  ;", "queryRunner . createCatalog (  \" mysql \"  ,     \" mysql \"  ,    properties )  ;", "copyTpchTables ( queryRunner ,     \" tpch \"  ,    TINY _ SCHEMA _ NAME ,     . createSession (  )  ,    tables )  ;", "return   queryRunner ;", "}    catch    ( Throwable   e )     {", "Closeables . closeAllSuppress ( e ,    queryRunner ,    server )  ;", "throw   e ;", "}", "}", "METHOD_END"], "methodName": ["createMySqlQueryRunner"], "fileName": "com.facebook.presto.plugin.mysql.MySqlQueryRunner"}, {"methodBody": ["METHOD_START", "{", "return   testSessionBuilder (  )  . setCatalog (  \" mysql \"  )  . setSchema ( MySqlQueryRunner . TPCH _ SCHEMA )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["createSession"], "fileName": "com.facebook.presto.plugin.mysql.MySqlQueryRunner"}, {"methodBody": ["METHOD_START", "{", "assertRecordedDefaults ( recordDefaults ( MySqlConfig . class )  . setAutoReconnect ( true )  . setMaxReconnects (  3  )  . setConnectionTimeout ( new   Duration (  1  0  ,    TimeUnit . SECONDS )  )  )  ;", "}", "METHOD_END"], "methodName": ["testDefaults"], "fileName": "com.facebook.presto.plugin.mysql.TestMySqlConfig"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    properties    =    new   Builder < String ,    String >  (  )  . put (  \" mysql . auto - reconnect \"  ,     \" false \"  )  . put (  \" mysql . max - reconnects \"  ,     \"  4  \"  )  . put (  \" mysql . connection - timeout \"  ,     \"  4 s \"  )  . build (  )  ;", "expected    =    new    (  )  . setAutoReconnect ( false )  . setMaxReconnects (  4  )  . setConnectionTimeout ( new   Duration (  4  ,    TimeUnit . SECONDS )  )  ;", "assertFullMapping ( properties ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testExplicitPropertyMappings"], "fileName": "com.facebook.presto.plugin.mysql.TestMySqlConfig"}, {"methodBody": ["METHOD_START", "{", "mysqlServer . close (  )  ;", "}", "METHOD_END"], "methodName": ["destroy"], "fileName": "com.facebook.presto.plugin.mysql.TestMySqlDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "mysqlServer . close (  )  ;", "}", "METHOD_END"], "methodName": ["destroy"], "fileName": "com.facebook.presto.plugin.mysql.TestMySqlIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    DriverManager . getConnection ( mysqlServer . getJdbcUrl (  )  )  ; Statement   statement    =    connection . createStatement (  )  )     {", "statement . execute ( sql )  ;", "}", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "com.facebook.presto.plugin.mysql.TestMySqlIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertUpdate (  \" CREATE   TABLE   test _ drop   AS   SELECT    1  2  3    x \"  ,     1  )  ;", "assertTrue ( getQueryRunner (  )  . tableExists ( getSession (  )  ,     \" test _ drop \"  )  )  ;", "assertUpdate (  \" DROP   TABLE   test _ drop \"  )  ;", "assertFalse ( getQueryRunner (  )  . tableExists ( getSession (  )  ,     \" test _ drop \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testDropTable"], "fileName": "com.facebook.presto.plugin.mysql.TestMySqlIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "execute (  \" CREATE   TABLE   tpch . test _ insert    ( x   bigint ,    y   varchar (  1  0  0  )  )  \"  )  ;", "assertUpdate (  \" INSERT   INTO   test _ insert   VALUES    (  1  2  3  ,     ' test '  )  \"  ,     1  )  ;", "assertQuery (  \" SELECT    *    FROM   test _ insert \"  ,     \" SELECT    1  2  3    x ,     ' test '    y \"  )  ;", "assertUpdate (  \" DROP   TABLE   test _ insert \"  )  ;", "}", "METHOD_END"], "methodName": ["testInsert"], "fileName": "com.facebook.presto.plugin.mysql.TestMySqlIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "execute (  \" CREATE   TABLE   tpch . mysql _ test _ tinyint 1     ( c _ tinyint   tinyint (  1  )  )  \"  )  ;", "MaterializedResult   actual    =    computeActual (  \" SHOW   COLUMNS   FROM   mysql _ test _ tinyint 1  \"  )  ;", "MaterializedResult   expected    =    MaterializedResult . resultBuilder ( getSession (  )  ,    VARCHAR ,    VARCHAR ,    VARCHAR ,    VARCHAR )  . row (  \" c _ tinyint \"  ,     \" tinyint \"  ,     \"  \"  ,     \"  \"  )  . build (  )  ;", "assertEquals ( actual ,    expected )  ;", "execute (  \" INSERT   INTO   tpch . mysql _ test _ tinyint 1    VALUES    (  1  2  7  )  ,     (  -  1  2  8  )  \"  )  ;", "MaterializedResult   materializedRows    =    computeActual (  \" SELECT    *    FROM   tpch . mysql _ test _ tinyint 1    WHERE   c _ tinyint    =     1  2  7  \"  )  ;", "assertEquals ( materializedRows . getRowCount (  )  ,     1  )  ;", "MaterializedRow   row    =    getOnlyElement ( materializedRows )  ;", "assertEquals ( row . getFields (  )  . size (  )  ,     1  )  ;", "assertEquals ( row . getField (  0  )  ,     (  ( byte )     (  1  2  7  )  )  )  ;", "assertUpdate (  \" DROP   TABLE   mysql _ test _ tinyint 1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testMySqlTinyint1"], "fileName": "com.facebook.presto.plugin.mysql.TestMySqlIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    testSessionBuilder (  )  . setCatalog (  \" mysql \"  )  . setSchema (  \" test _ database \"  )  . build (  )  ;", "assertFalse ( getQueryRunner (  )  . tableExists ( session ,     \" test _ table \"  )  )  ;", "assertUpdate ( session ,     \" CREATE   TABLE   test _ table   AS   SELECT    1  2  3    x \"  ,     1  )  ;", "assertTrue ( getQueryRunner (  )  . tableExists ( session ,     \" test _ table \"  )  )  ;", "assertQuery ( session ,     \" SELECT    *    FROM   test _ table \"  ,     \" SELECT    1  2  3  \"  )  ;", "assertUpdate ( session ,     \" DROP   TABLE   test _ table \"  )  ;", "assertFalse ( getQueryRunner (  )  . tableExists ( session ,     \" test _ table \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testNameEscaping"], "fileName": "com.facebook.presto.plugin.mysql.TestMySqlIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "execute (  \" CREATE   OR   REPLACE   VIEW   tpch . test _ view   AS   SELECT    *    FROM   tpch . orders \"  )  ;", "assertQuery (  \" SELECT   orderkey   FROM   test _ view \"  ,     \" SELECT   orderkey   FROM   orders \"  )  ;", "execute (  \" DROP   VIEW   IF   EXISTS   tpch . test _ view \"  )  ;", "}", "METHOD_END"], "methodName": ["testViews"], "fileName": "com.facebook.presto.plugin.mysql.TestMySqlIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "Plugin   plugin    =    new   MySqlPlugin (  )  ;", "ConnectorFactory   factory    =    getOnlyElement ( plugin . getConnectorFactories (  )  )  ;", "factory . create (  \" test \"  ,    ImmutableMap . of (  \" connection - url \"  ,     \" jdbc : mysql :  /  / test \"  )  ,    new   TestingConnectorContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["testCreateConnector"], "fileName": "com.facebook.presto.plugin.mysql.TestMySqlPlugin"}, {"methodBody": ["METHOD_START", "{", "return   DataTypeTest . create (  )  . addRoundTrip ( decimalDataType (  3  ,     0  )  ,    new   BigDecimal (  \"  1  9  3  \"  )  )  . addRoundTrip ( decimalDataType (  3  ,     0  )  ,    new   BigDecimal (  \"  1  9  \"  )  )  . addRoundTrip ( decimalDataType (  3  ,     0  )  ,    new   BigDecimal (  \"  -  1  9  3  \"  )  )  . addRoundTrip ( decimalDataType (  3  ,     1  )  ,    new   BigDecimal (  \"  1  0  .  0  \"  )  )  . addRoundTrip ( decimalDataType (  3  ,     1  )  ,    new   BigDecimal (  \"  1  0  .  1  \"  )  )  . addRoundTrip ( decimalDataType (  3  ,     1  )  ,    new   BigDecimal (  \"  -  1  0  .  1  \"  )  )  . addRoundTrip ( decimalDataType (  4  ,     2  )  ,    new   BigDecimal (  \"  2  \"  )  )  . addRoundTrip ( decimalDataType (  4  ,     2  )  ,    new   BigDecimal (  \"  2  .  3  \"  )  )  . addRoundTrip ( decimalDataType (  2  4  ,     2  )  ,    new   BigDecimal (  \"  2  \"  )  )  . addRoundTrip ( decimalDataType (  2  4  ,     2  )  ,    new   BigDecimal (  \"  2  .  3  \"  )  )  . addRoundTrip ( decimalDataType (  2  4  ,     2  )  ,    new   BigDecimal (  \"  1  2  3  4  5  6  7  8  9  .  3  \"  )  )  . addRoundTrip ( decimalDataType (  2  4  ,     4  )  ,    new   BigDecimal (  \"  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  .  3  1  \"  )  )  . addRoundTrip ( decimalDataType (  3  0  ,     5  )  ,    new   BigDecimal (  \"  3  1  4  1  5  9  2  6  5  3  5  8  9  7  9  3  2  3  8  4  6  2  6  4  3  .  3  8  3  2  7  \"  )  )  . addRoundTrip ( decimalDataType (  3  0  ,     5  )  ,    new   BigDecimal (  \"  -  3  1  4  1  5  9  2  6  5  3  5  8  9  7  9  3  2  3  8  4  6  2  6  4  3  .  3  8  3  2  7  \"  )  )  . addRoundTrip ( decimalDataType (  3  8  ,     0  )  ,    new   BigDecimal (  \"  2  7  1  8  2  8  1  8  2  8  4  5  9  0  4  5  2  3  5  3  6  0  2  8  7  4  7  1  3  5  2  6  6  2  4  9  7  7  \"  )  )  . addRoundTrip ( decimalDataType (  3  8  ,     0  )  ,    new   BigDecimal (  \"  -  2  7  1  8  2  8  1  8  2  8  4  5  9  0  4  5  2  3  5  3  6  0  2  8  7  4  7  1  3  5  2  6  6  2  4  9  7  7  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["decimalTests"], "fileName": "com.facebook.presto.plugin.mysql.TestMySqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "mysqlServer . close (  )  ;", "}", "METHOD_END"], "methodName": ["destroy"], "fileName": "com.facebook.presto.plugin.mysql.TestMySqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "return   DataTypeTest . create (  )  . addRoundTrip ( charDataType (  \" char \"  ,     1  )  ,     \"  \"  )  . addRoundTrip ( charDataType (  \" char \"  ,     1  )  ,     \" a \"  )  . addRoundTrip ( charDataType (  1  )  ,     \"  \"  )  . addRoundTrip ( charDataType (  1  )  ,     \" a \"  )  . addRoundTrip ( charDataType (  8  )  ,     \" abc \"  )  . addRoundTrip ( charDataType (  8  )  ,     \"  1  2  3  4  5  6  7  8  \"  )  . addRoundTrip ( charDataType (  2  5  5  )  ,    repeat (  \" a \"  ,     2  5  5  )  )  ;", "}", "METHOD_END"], "methodName": ["mysqlCharTypeTest"], "fileName": "com.facebook.presto.plugin.mysql.TestMySqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "JdbcSqlExecutor   mysqlUnicodeExecutor    =    new   JdbcSqlExecutor (  (  ( mysqlServer . getJdbcUrl (  )  )     +     \"  & useUnicode = true & characterEncoding = utf 8  \"  )  )  ;", "return   new   tests . datatype . CreateAndInsertDataSetup ( mysqlUnicodeExecutor ,    tableNamePrefix )  ;", "}", "METHOD_END"], "methodName": ["mysqlCreateAndInsert"], "fileName": "com.facebook.presto.plugin.mysql.TestMySqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "return   new   CreateAsSelectDataSetup ( new   com . facebook . presto . tests . sql . PrestoSqlExecutor ( getQueryRunner (  )  )  ,    tableNamePrefix )  ;", "}", "METHOD_END"], "methodName": ["prestoCreateAsSelect"], "fileName": "com.facebook.presto.plugin.mysql.TestMySqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "DataTypeTest . create (  )  . addRoundTrip ( bigintDataType (  )  ,     1  2  3  4  5  6  7  8  9  0  1  2 L )  . addRoundTrip ( integerDataType (  )  ,     1  2  3  4  5  6  7  8  9  0  )  . addRoundTrip ( smallintDataType (  )  ,     (  ( short )     (  3  2  4  5  6  )  )  )  . addRoundTrip ( tinyintDataType (  )  ,     (  ( byte )     (  1  2  5  )  )  )  . addRoundTrip ( doubleDataType (  )  ,     1  2  3  .  4  5  )  . addRoundTrip ( realDataType (  )  ,     1  2  3  .  4  5 F )  . execute ( getQueryRunner (  )  ,    prestoCreateAsSelect (  \" test _ basic _ types \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testBasicTypes"], "fileName": "com.facebook.presto.plugin.mysql.TestMySqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "ZoneId   jvmZone    =    ZoneId . systemDefault (  )  ;", "checkState ( jvmZone . getId (  )  . equals (  \" America / Bahia _ Banderas \"  )  ,     \" This   test   assumes   certain   JVM   time   zone \"  )  ;", "LocalDate   dateOfLocalTimeChangeForwardAtMidnightInJvmZone    =    LocalDate . of (  1  9  7  0  ,     1  ,     1  )  ;", "verify ( jvmZone . getRules (  )  . getValidOffsets ( dateOfLocalTimeChangeForwardAtMidnightInJvmZone . atStartOfDay (  )  )  . isEmpty (  )  )  ;", "ZoneId   someZone    =    ZoneId . of (  \" Europe / Vilnius \"  )  ;", "LocalDate   dateOfLocalTimeChangeForwardAtMidnightInSomeZone    =    LocalDate . of (  1  9  8  3  ,     4  ,     1  )  ;", "verify ( someZone . getRules (  )  . getValidOffsets ( dateOfLocalTimeChangeForwardAtMidnightInSomeZone . atStartOfDay (  )  )  . isEmpty (  )  )  ;", "LocalDate   dateOfLocalTimeChangeBackwardAtMidnightInSomeZone    =    LocalDate . of (  1  9  8  3  ,     1  0  ,     1  )  ;", "verify (  (  ( someZone . getRules (  )  . getValidOffsets ( dateOfLocalTimeChangeBackwardAtMidnightInSomeZone . atStartOfDay (  )  . minusMinutes (  1  )  )  . size (  )  )     =  =     2  )  )  ;", "DataTypeTest   testCases    =    DataTypeTest . create (  )  . addRoundTrip ( dateDataType (  )  ,    LocalDate . of (  1  9  5  2  ,     4  ,     3  )  )  . addRoundTrip ( dateDataType (  )  ,    LocalDate . of (  1  9  7  0  ,     1  ,     1  )  )  . addRoundTrip ( dateDataType (  )  ,    LocalDate . of (  1  9  7  0  ,     2  ,     3  )  )  . addRoundTrip ( dateDataType (  )  ,    LocalDate . of (  2  0  1  7  ,     7  ,     1  )  )  . addRoundTrip ( dateDataType (  )  ,    LocalDate . of (  2  0  1  7  ,     1  ,     1  )  )  . addRoundTrip ( dateDataType (  )  ,    dateOfLocalTimeChangeForwardAtMidnightInJvmZone )  . addRoundTrip ( dateDataType (  )  ,    dateOfLocalTimeChangeForwardAtMidnightInSomeZone )  . addRoundTrip ( dateDataType (  )  ,    dateOfLocalTimeChangeBackwardAtMidnightInSomeZone )  ;", "for    ( String   timeZoneId    :    ImmutableList . of ( UTC _ KEY . getId (  )  ,    jvmZone . getId (  )  ,    someZone . getId (  )  )  )     {", "Session   session    =    Session . builder ( getQueryRunner (  )  . getDefaultSession (  )  )  . setTimeZoneKey ( TimeZoneKey . getTimeZoneKey ( timeZoneId )  )  . build (  )  ;", "testCases . execute ( getQueryRunner (  )  ,    session ,    mysqlCreateAndInsert (  \" tpch . test _ date \"  )  )  ;", "testCases . execute ( getQueryRunner (  )  ,    session ,    CreateAsSelect (  \" test _ date \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testDate"], "fileName": "com.facebook.presto.plugin.mysql.TestMySqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "testUnsupportedDataType (  \" decimal (  5  0  ,  0  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testDecimalExceedingPrecisionMax"], "fileName": "com.facebook.presto.plugin.mysql.TestMySqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "mysqlCharTypeTest (  )  . execute ( getQueryRunner (  )  ,    mysqlCreateAndInsert (  \" tpch . mysql _ test _ parameterized _ char \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testMySqlCreatedParameterizedChar"], "fileName": "com.facebook.presto.plugin.mysql.TestMySqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "DataTypeTest . create (  )  . addRoundTrip ( charDataType (  1  ,    TestMySqlTypeMapping . CHARACTER _ SET _ UTF 8  )  ,     \"  \\ u 6  5  3 b \"  )  . addRoundTrip ( charDataType (  5  ,    TestMySqlTypeMapping . CHARACTER _ SET _ UTF 8  )  ,     \"  \\ u 6  5  3 b \\ u 6 bbb \"  )  . addRoundTrip ( charDataType (  5  ,    TestMySqlTypeMapping . CHARACTER _ SET _ UTF 8  )  ,     \"  \\ u 6  5  3 b \\ u 6 bbb \\ u 6 a 5 f \\ u 5  2 d 5  \\ u 9  6  8 a \"  )  . execute ( getQueryRunner (  )  ,    mysqlCreateAndInsert (  \" tpch . mysql _ test _ parameterized _ varchar \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testMySqlCreatedParameterizedCharUnicode"], "fileName": "com.facebook.presto.plugin.mysql.TestMySqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "DataTypeTest . create (  )  . addRoundTrip ( stringDataType (  \" tinytext \"  ,    createVarcharType (  2  5  5  )  )  ,     \" a \"  )  . addRoundTrip ( stringDataType (  \" text \"  ,    createVarcharType (  6  5  5  3  5  )  )  ,     \" b \"  )  . addRoundTrip ( stringDataType (  \" mediumtext \"  ,    createVarcharType (  1  6  7  7  7  2  1  5  )  )  ,     \" c \"  )  . addRoundTrip ( stringDataType (  \" longtext \"  ,    createUnboundedVarcharType (  )  )  ,     \" d \"  )  . addRoundTrip ( varcharDataType (  3  2  )  ,     \" e \"  )  . addRoundTrip ( varcharDataType (  2  0  0  0  0  )  ,     \" f \"  )  . execute ( getQueryRunner (  )  ,    mysqlCreateAndInsert (  \" tpch . mysql _ test _ parameterized _ varchar \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testMySqlCreatedParameterizedVarchar"], "fileName": "com.facebook.presto.plugin.mysql.TestMySqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "String   sampleUnicodeText    =     \"  \\ u 6  5  3 b \\ u 6 bbb \\ u 6 a 5 f \\ u 5  2 d 5  \\ u 9  6  8 a \"  ;", "DataTypeTest . create (  )  . addRoundTrip ( stringDataType (  (  \" tinytext    \"     +     (  . CHARACTER _ SET _ UTF 8  )  )  ,    createVarcharType (  2  5  5  )  )  ,    sampleUnicodeText )  . addRoundTrip ( stringDataType (  (  \" text    \"     +     (  . CHARACTER _ SET _ UTF 8  )  )  ,    createVarcharType (  6  5  5  3  5  )  )  ,    sampleUnicodeText )  . addRoundTrip ( stringDataType (  (  \" mediumtext    \"     +     (  . CHARACTER _ SET _ UTF 8  )  )  ,    createVarcharType (  1  6  7  7  7  2  1  5  )  )  ,    sampleUnicodeText )  . addRoundTrip ( stringDataType (  (  \" longtext    \"     +     (  . CHARACTER _ SET _ UTF 8  )  )  ,    createUnboundedVarcharType (  )  )  ,    sampleUnicodeText )  . addRoundTrip ( varcharDataType ( sampleUnicodeText . length (  )  ,     . CHARACTER _ SET _ UTF 8  )  ,    sampleUnicodeText )  . addRoundTrip ( varcharDataType (  3  2  ,     . CHARACTER _ SET _ UTF 8  )  ,    sampleUnicodeText )  . addRoundTrip ( varcharDataType (  2  0  0  0  0  ,     . CHARACTER _ SET _ UTF 8  )  ,    sampleUnicodeText )  . execute ( getQueryRunner (  )  ,    mysqlCreateAndInsert (  \" tpch . mysql _ test _ parameterized _ varchar _ unicode \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testMySqlCreatedParameterizedVarcharUnicode"], "fileName": "com.facebook.presto.plugin.mysql.TestMySqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "decimalTests (  )  . execute ( getQueryRunner (  )  ,    mysqlCreateAndInsert (  \" tpch . test _ decimal \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testMysqlCreatedDecimal"], "fileName": "com.facebook.presto.plugin.mysql.TestMySqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "decimalTests (  )  . execute ( getQueryRunner (  )  ,    prestoCreateAsSelect (  \" test _ decimal \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testPrestoCreatedDecimal"], "fileName": "com.facebook.presto.plugin.mysql.TestMySqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "mysqlCharTypeTest (  )  . execute ( getQueryRunner (  )  ,    prestoCreateAsSelect (  \" mysql _ test _ parameterized _ char \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testPrestoCreatedParameterizedChar"], "fileName": "com.facebook.presto.plugin.mysql.TestMySqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "DataTypeTest . create (  )  . addRoundTrip ( stringDataType (  \" varchar (  1  0  )  \"  ,    createVarcharType (  2  5  5  )  )  ,     \" text _ a \"  )  . addRoundTrip ( stringDataType (  \" varchar (  2  5  5  )  \"  ,    createVarcharType (  2  5  5  )  )  ,     \" text _ b \"  )  . addRoundTrip ( stringDataType (  \" varchar (  2  5  6  )  \"  ,    createVarcharType (  6  5  5  3  5  )  )  ,     \" text _ c \"  )  . addRoundTrip ( stringDataType (  \" varchar (  6  5  5  3  5  )  \"  ,    createVarcharType (  6  5  5  3  5  )  )  ,     \" text _ d \"  )  . addRoundTrip ( stringDataType (  \" varchar (  6  5  5  3  6  )  \"  ,    createVarcharType (  1  6  7  7  7  2  1  5  )  )  ,     \" text _ e \"  )  . addRoundTrip ( stringDataType (  \" varchar (  1  6  7  7  7  2  1  5  )  \"  ,    createVarcharType (  1  6  7  7  7  2  1  5  )  )  ,     \" text _ f \"  )  . addRoundTrip ( stringDataType (  \" varchar (  1  6  7  7  7  2  1  6  )  \"  ,    createUnboundedVarcharType (  )  )  ,     \" text _ g \"  )  . addRoundTrip ( stringDataType (  (  (  \" varchar (  \"     +     ( VarcharType . MAX _ LENGTH )  )     +     \"  )  \"  )  ,    createUnboundedVarcharType (  )  )  ,     \" text _ h \"  )  . addRoundTrip ( stringDataType (  \" varchar \"  ,    createUnboundedVarcharType (  )  )  ,     \" unbounded \"  )  . execute ( getQueryRunner (  )  ,    prestoCreateAsSelect (  \" presto _ test _ parameterized _ varchar \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testPrestoCreatedParameterizedVarchar"], "fileName": "com.facebook.presto.plugin.mysql.TestMySqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "JdbcSqlExecutor   jdbcSqlExecutor    =    new   JdbcSqlExecutor ( mysqlServer . getJdbcUrl (  )  )  ;", "jdbcSqlExecutor . execute ( String . format (  \" CREATE   TABLE   tpch . test _ unsupported _ data _ type ( supported _ column   varchar (  5  )  ,    unsupported _ column    % s )  \"  ,    databaseDataType )  )  ;", "try    {", "assertQuery (  \" SELECT   COLUMN _ NAME   FROM   INFORMATION _ SCHEMA . COLUMNS   WHERE   TABLE _ SCHEMA    =     ' tpch '    AND   TABLE _ NAME    =     ' test _ unsupported _ data _ type '  \"  ,     \" VALUES    ' supported _ column '  \"  )  ;", "}    finally    {", "jdbcSqlExecutor . execute (  \" DROP   TABLE   tpch . test _ unsupported _ data _ type \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["testUnsupportedDataType"], "fileName": "com.facebook.presto.plugin.mysql.TestMySqlTypeMapping"}]