[{"methodBody": ["METHOD_START", "{", "return   PostgreSqlQueryRunner . createPostgreSqlQueryRunner ( server ,    ImmutableList . copyOf ( tables )  )  ;", "}", "METHOD_END"], "methodName": ["createPostgreSqlQueryRunner"], "fileName": "com.facebook.presto.plugin.postgresql.PostgreSqlQueryRunner"}, {"methodBody": ["METHOD_START", "{", "DistributedQueryRunner   queryRunner    =    null ;", "try    {", "queryRunner    =    new   DistributedQueryRunner (  . createSession (  )  ,     3  )  ;", "queryRunner . installPlugin ( new   TpchPlugin (  )  )  ;", "queryRunner . createCatalog (  \" tpch \"  ,     \" tpch \"  )  ;", "Map < String ,    String >    properties    =    ImmutableMap .  < String ,    String > builder (  )  . put (  \" connection - url \"  ,    server . getJdbcUrl (  )  )  . put (  \" allow - drop - table \"  ,     \" true \"  )  . build (  )  ;", ". createSchema ( server . getJdbcUrl (  )  ,     \" tpch \"  )  ;", "queryRunner . installPlugin ( new   PostgreSqlPlugin (  )  )  ;", "queryRunner . createCatalog (  \" postgresql \"  ,     \" postgresql \"  ,    properties )  ;", "copyTpchTables ( queryRunner ,     \" tpch \"  ,    TINY _ SCHEMA _ NAME ,     . createSession (  )  ,    tables )  ;", "return   queryRunner ;", "}    catch    ( Throwable   e )     {", "Closeables . closeAllSuppress ( e ,    queryRunner ,    server )  ;", "throw   e ;", "}", "}", "METHOD_END"], "methodName": ["createPostgreSqlQueryRunner"], "fileName": "com.facebook.presto.plugin.postgresql.PostgreSqlQueryRunner"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    DriverManager . getConnection ( url )  ; Statement   statement    =    connection . createStatement (  )  )     {", "statement . execute (  (  \" CREATE   SCHEMA    \"     +    schema )  )  ;", "}", "}", "METHOD_END"], "methodName": ["createSchema"], "fileName": "com.facebook.presto.plugin.postgresql.PostgreSqlQueryRunner"}, {"methodBody": ["METHOD_START", "{", "return   testSessionBuilder (  )  . setCatalog (  \" postgresql \"  )  . setSchema ( PostgreSqlQueryRunner . TPCH _ SCHEMA )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["createSession"], "fileName": "com.facebook.presto.plugin.postgresql.PostgreSqlQueryRunner"}, {"methodBody": ["METHOD_START", "{", "postgreSqlServer . close (  )  ;", "}", "METHOD_END"], "methodName": ["destroy"], "fileName": "com.facebook.presto.plugin.postgresql.TestPostgreSqlDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "postgreSqlServer . close (  )  ;", "}", "METHOD_END"], "methodName": ["destroy"], "fileName": "com.facebook.presto.plugin.postgresql.TestPostgreSqlIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    DriverManager . getConnection ( postgreSqlServer . getJdbcUrl (  )  )  ; Statement   statement    =    connection . createStatement (  )  )     {", "statement . execute ( sql )  ;", "}", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "com.facebook.presto.plugin.postgresql.TestPostgreSqlIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertUpdate (  \" CREATE   TABLE   test _ drop   AS   SELECT    1  2  3    x \"  ,     1  )  ;", "assertTrue ( getQueryRunner (  )  . tableExists ( getSession (  )  ,     \" test _ drop \"  )  )  ;", "assertUpdate (  \" DROP   TABLE   test _ drop \"  )  ;", "assertFalse ( getQueryRunner (  )  . tableExists ( getSession (  )  ,     \" test _ drop \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testDropTable"], "fileName": "com.facebook.presto.plugin.postgresql.TestPostgreSqlIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "execute (  \" CREATE   SERVER   devnull   FOREIGN   DATA   WRAPPER   file _ fdw \"  )  ;", "execute (  \" CREATE   FOREIGN   TABLE   tpch . t _ ft    ( x   bigint )    SERVER   devnull   OPTIONS    ( filename    '  / dev / null '  )  \"  )  ;", "assertTrue ( getQueryRunner (  )  . tableExists ( getSession (  )  ,     \" t _ ft \"  )  )  ;", "computeActual (  \" SELECT    *    FROM   t _ ft \"  )  ;", "execute (  \" DROP   FOREIGN   TABLE   tpch . t _ ft \"  )  ;", "execute (  \" DROP   SERVER   devnull \"  )  ;", "}", "METHOD_END"], "methodName": ["testForeignTable"], "fileName": "com.facebook.presto.plugin.postgresql.TestPostgreSqlIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "execute (  \" CREATE   TABLE   tpch . test _ insert    ( x   bigint ,    y   varchar (  1  0  0  )  )  \"  )  ;", "assertUpdate (  \" INSERT   INTO   test _ insert   VALUES    (  1  2  3  ,     ' test '  )  \"  ,     1  )  ;", "assertQuery (  \" SELECT    *    FROM   test _ insert \"  ,     \" SELECT    1  2  3    x ,     ' test '    y \"  )  ;", "assertUpdate (  \" DROP   TABLE   test _ insert \"  )  ;", "}", "METHOD_END"], "methodName": ["testInsert"], "fileName": "com.facebook.presto.plugin.postgresql.TestPostgreSqlIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "execute (  \" CREATE   MATERIALIZED   VIEW   tpch . test _ mv   as   SELECT    *    FROM   tpch . orders \"  )  ;", "assertTrue ( getQueryRunner (  )  . tableExists ( getSession (  )  ,     \" test _ mv \"  )  )  ;", "assertQuery (  \" SELECT   orderkey   FROM   test _ mv \"  ,     \" SELECT   orderkey   FROM   orders \"  )  ;", "execute (  \" DROP   MATERIALIZED   VIEW   tpch . test _ mv \"  )  ;", "}", "METHOD_END"], "methodName": ["testMaterializedView"], "fileName": "com.facebook.presto.plugin.postgresql.TestPostgreSqlIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "String   unsupportedDataType    =     \" interval \"  ;", "String   supportedDataType    =     \" varchar (  5  )  \"  ;", "try    ( AutoCloseable   ignore 1     =    withTable (  \" tpch . no _ supported _ columns \"  ,    String . format (  \"  ( c    % s )  \"  ,    unsupportedDataType )  )  ; AutoCloseable   ignore 2     =    withTable (  \" tpch . supported _ columns \"  ,    String . format (  \"  ( good    % s )  \"  ,    supportedDataType )  )  ; AutoCloseable   ignore 3     =    withTable (  \" tpch . no _ columns \"  ,     \"  (  )  \"  )  )     {", "assertThat ( computeActual (  \" SHOW   TABLES \"  )  . getOnlyColumnAsSet (  )  )  . contains (  \" orders \"  ,     \" no _ supported _ columns \"  ,     \" supported _ columns \"  ,     \" no _ columns \"  )  ;", "assertQueryFails (  \" SELECT   c   FROM   no _ supported _ columns \"  ,     \" Table    ' tpch . no _ supported _ columns '    not   found \"  )  ;", "assertQueryFails (  \" SELECT    *    FROM   no _ supported _ columns \"  ,     \" Table    ' tpch . no _ supported _ columns '    not   found \"  )  ;", "assertQueryFails (  \" SELECT    ' a '    FROM   no _ supported _ columns \"  ,     \" Table    ' tpch . no _ supported _ columns '    not   found \"  )  ;", "assertQueryFails (  \" SELECT   c   FROM   no _ columns \"  ,     \" Table    ' tpch . no _ columns '    not   found \"  )  ;", "assertQueryFails (  \" SELECT    *    FROM   no _ columns \"  ,     \" Table    ' tpch . no _ columns '    not   found \"  )  ;", "assertQueryFails (  \" SELECT    ' a '    FROM   no _ columns \"  ,     \" Table    ' tpch . no _ columns '    not   found \"  )  ;", "assertQueryFails (  \" SELECT   c   FROM   non _ existent \"  ,     \"  .  *    Table    .  * tpch . non _ existent .  *    does   not   exist \"  )  ;", "assertQueryFails (  \" SELECT    *    FROM   non _ existent \"  ,     \"  .  *    Table    .  * tpch . non _ existent .  *    does   not   exist \"  )  ;", "assertQueryFails (  \" SELECT    ' a '    FROM   non _ existent \"  ,     \"  .  *    Table    .  * tpch . non _ existent .  *    does   not   exist \"  )  ;", "assertQuery (  \" SHOW   COLUMNS   FROM   no _ supported _ columns \"  ,     \" SELECT    ' nothing '    WHERE   false \"  )  ;", "assertQuery (  \" SHOW   COLUMNS   FROM   no _ columns \"  ,     \" SELECT    ' nothing '    WHERE   false \"  )  ;", "assertQuery (  \" SHOW   TABLES \"  ,     \" VALUES    ' orders '  ,     ' no _ supported _ columns '  ,     ' supported _ columns '  ,     ' no _ columns '  \"  )  ;", "assertQuery (  \" SELECT   table _ name   FROM   inform _ schema . tables   WHERE   table _ schema    =     ' tpch '  \"  ,     \" VALUES    ' orders '  ,     ' no _ supported _ columns '  ,     ' supported _ columns '  ,     ' no _ columns '  \"  )  ;", "assertQuery (  \" SHOW   COLUMNS   FROM   supported _ columns \"  ,     \" VALUES    (  ' good '  ,     ' varchar (  5  )  '  ,     '  '  ,     '  '  )  \"  )  ;", "computeActual (  \" SELECT   column _ name   FROM   inform _ schema . columns   WHERE   table _ schema    =     ' tpch '  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["testTableWithNoSupportedColumns"], "fileName": "com.facebook.presto.plugin.postgresql.TestPostgreSqlIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "execute (  \" CREATE   OR   REPLACE   VIEW   tpch . test _ view   AS   SELECT    *    FROM   tpch . orders \"  )  ;", "assertTrue ( getQueryRunner (  )  . tableExists ( getSession (  )  ,     \" test _ view \"  )  )  ;", "assertQuery (  \" SELECT   orderkey   FROM   test _ view \"  ,     \" SELECT   orderkey   FROM   orders \"  )  ;", "execute (  \" DROP   VIEW   IF   EXISTS   tpch . test _ view \"  )  ;", "}", "METHOD_END"], "methodName": ["testViews"], "fileName": "com.facebook.presto.plugin.postgresql.TestPostgreSqlIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "execute ( String . format (  \" CREATE   TABLE    % s % s \"  ,    tableName ,    tableDefinition )  )  ;", "return    (  )     -  >     {", "try    {", "execute ( String . format (  \" DROP   TABLE    % s \"  ,    tableName )  )  ;", "}    catch    ( SQLException   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["withTable"], "fileName": "com.facebook.presto.plugin.postgresql.TestPostgreSqlIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "Plugin   plugin    =    new   PostgreSqlPlugin (  )  ;", "ConnectorFactory   factory    =    getOnlyElement ( plugin . getConnectorFactories (  )  )  ;", "factory . create (  \" test \"  ,    ImmutableMap . of (  \" connection - url \"  ,     \" test \"  )  ,    new   TestingConnectorContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["testCreateConnector"], "fileName": "com.facebook.presto.plugin.postgresql.TestPostgreSqlPlugin"}, {"methodBody": ["METHOD_START", "{", "return   DataType . dataType (  \" bytea \"  ,    VARBINARY ,     (    bytes )     -  >    format (  \" bytea   E \\  '  \\  \\  \\  \\ x % s \\  '  \"  ,    base 1  6  (  )  . encode ( bytes )  )  ,    Function . identity (  )  )  ;", "}", "METHOD_END"], "methodName": ["byteaDataType"], "fileName": "com.facebook.presto.plugin.postgresql.TestPostgreSqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "return   DataTypeTest . create (  )  . addRoundTrip ( decimalDataType (  3  ,     0  )  ,    new   BigDecimal (  \"  1  9  3  \"  )  )  . addRoundTrip ( decimalDataType (  3  ,     0  )  ,    new   BigDecimal (  \"  1  9  \"  )  )  . addRoundTrip ( decimalDataType (  3  ,     0  )  ,    new   BigDecimal (  \"  -  1  9  3  \"  )  )  . addRoundTrip ( decimalDataType (  3  ,     1  )  ,    new   BigDecimal (  \"  1  0  .  0  \"  )  )  . addRoundTrip ( decimalDataType (  3  ,     1  )  ,    new   BigDecimal (  \"  1  0  .  1  \"  )  )  . addRoundTrip ( decimalDataType (  3  ,     1  )  ,    new   BigDecimal (  \"  -  1  0  .  1  \"  )  )  . addRoundTrip ( decimalDataType (  4  ,     2  )  ,    new   BigDecimal (  \"  2  \"  )  )  . addRoundTrip ( decimalDataType (  4  ,     2  )  ,    new   BigDecimal (  \"  2  .  3  \"  )  )  . addRoundTrip ( decimalDataType (  2  4  ,     2  )  ,    new   BigDecimal (  \"  2  \"  )  )  . addRoundTrip ( decimalDataType (  2  4  ,     2  )  ,    new   BigDecimal (  \"  2  .  3  \"  )  )  . addRoundTrip ( decimalDataType (  2  4  ,     2  )  ,    new   BigDecimal (  \"  1  2  3  4  5  6  7  8  9  .  3  \"  )  )  . addRoundTrip ( decimalDataType (  2  4  ,     4  )  ,    new   BigDecimal (  \"  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  .  3  1  \"  )  )  . addRoundTrip ( decimalDataType (  3  0  ,     5  )  ,    new   BigDecimal (  \"  3  1  4  1  5  9  2  6  5  3  5  8  9  7  9  3  2  3  8  4  6  2  6  4  3  .  3  8  3  2  7  \"  )  )  . addRoundTrip ( decimalDataType (  3  0  ,     5  )  ,    new   BigDecimal (  \"  -  3  1  4  1  5  9  2  6  5  3  5  8  9  7  9  3  2  3  8  4  6  2  6  4  3  .  3  8  3  2  7  \"  )  )  . addRoundTrip ( decimalDataType (  3  8  ,     0  )  ,    new   BigDecimal (  \"  2  7  1  8  2  8  1  8  2  8  4  5  9  0  4  5  2  3  5  3  6  0  2  8  7  4  7  1  3  5  2  6  6  2  4  9  7  7  \"  )  )  . addRoundTrip ( decimalDataType (  3  8  ,     0  )  ,    new   BigDecimal (  \"  -  2  7  1  8  2  8  1  8  2  8  4  5  9  0  4  5  2  3  5  3  6  0  2  8  7  4  7  1  3  5  2  6  6  2  4  9  7  7  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["decimalTests"], "fileName": "com.facebook.presto.plugin.postgresql.TestPostgreSqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "postgreSqlServer . close (  )  ;", "}", "METHOD_END"], "methodName": ["destroy"], "fileName": "com.facebook.presto.plugin.postgresql.TestPostgreSqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "return   new   CreateAndInsertDataSetup ( new   com . facebook . presto . tests . sql . JdbcSqlExecutor ( postgreSqlServer . getJdbcUrl (  )  )  ,    tableNamePrefix )  ;", "}", "METHOD_END"], "methodName": ["postgresCreateAndInsert"], "fileName": "com.facebook.presto.plugin.postgresql.TestPostgreSqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "return   new   CreateAsSelectDataSetup ( new   com . facebook . presto . tests . sql . PrestoSqlExecutor ( getQueryRunner (  )  )  ,    tableNamePrefix )  ;", "}", "METHOD_END"], "methodName": ["prestoCreateAsSelect"], "fileName": "com.facebook.presto.plugin.postgresql.TestPostgreSqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "DataTypeTest . create (  )  . addRoundTrip ( booleanDataType (  )  ,    true )  . addRoundTrip ( booleanDataType (  )  ,    false )  . addRoundTrip ( bigintDataType (  )  ,     1  2  3  4  5  6  7  8  9  0  1  2 L )  . addRoundTrip ( integerDataType (  )  ,     1  2  3  4  5  6  7  8  9  0  )  . addRoundTrip ( smallintDataType (  )  ,     (  ( short )     (  3  2  4  5  6  )  )  )  . addRoundTrip ( doubleDataType (  )  ,     1  2  3  .  4  5  )  . addRoundTrip ( realDataType (  )  ,     1  2  3  .  4  5 F )  . execute ( getQueryRunner (  )  ,    prestoCreateAsSelect (  \" test _ basic _ types \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testBasicTypes"], "fileName": "com.facebook.presto.plugin.postgresql.TestPostgreSqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "ZoneId   jvmZone    =    ZoneId . systemDefault (  )  ;", "checkState ( jvmZone . getId (  )  . equals (  \" America / Bahia _ Banderas \"  )  ,     \" This   test   assumes   certain   JVM   time   zone \"  )  ;", "LocalDate   dateOfLocalTimeChangeForwardAtMidnightInJvmZone    =    LocalDate . of (  1  9  7  0  ,     1  ,     1  )  ;", "verify ( jvmZone . getRules (  )  . getValidOffsets ( dateOfLocalTimeChangeForwardAtMidnightInJvmZone . atStartOfDay (  )  )  . isEmpty (  )  )  ;", "ZoneId   someZone    =    ZoneId . of (  \" Europe / Vilnius \"  )  ;", "LocalDate   dateOfLocalTimeChangeForwardAtMidnightInSomeZone    =    LocalDate . of (  1  9  8  3  ,     4  ,     1  )  ;", "verify ( someZone . getRules (  )  . getValidOffsets ( dateOfLocalTimeChangeForwardAtMidnightInSomeZone . atStartOfDay (  )  )  . isEmpty (  )  )  ;", "LocalDate   dateOfLocalTimeChangeBackwardAtMidnightInSomeZone    =    LocalDate . of (  1  9  8  3  ,     1  0  ,     1  )  ;", "verify (  (  ( someZone . getRules (  )  . getValidOffsets ( dateOfLocalTimeChangeBackwardAtMidnightInSomeZone . atStartOfDay (  )  . minusMinutes (  1  )  )  . size (  )  )     =  =     2  )  )  ;", "DataTypeTest   testCases    =    DataTypeTest . create (  )  . addRoundTrip ( dateDataType (  )  ,    LocalDate . of (  1  9  5  2  ,     4  ,     3  )  )  . addRoundTrip ( dateDataType (  )  ,    LocalDate . of (  1  9  7  0  ,     1  ,     1  )  )  . addRoundTrip ( dateDataType (  )  ,    LocalDate . of (  1  9  7  0  ,     2  ,     3  )  )  . addRoundTrip ( dateDataType (  )  ,    LocalDate . of (  2  0  1  7  ,     7  ,     1  )  )  . addRoundTrip ( dateDataType (  )  ,    LocalDate . of (  2  0  1  7  ,     1  ,     1  )  )  . addRoundTrip ( dateDataType (  )  ,    dateOfLocalTimeChangeForwardAtMidnightInJvmZone )  . addRoundTrip ( dateDataType (  )  ,    dateOfLocalTimeChangeForwardAtMidnightInSomeZone )  . addRoundTrip ( dateDataType (  )  ,    dateOfLocalTimeChangeBackwardAtMidnightInSomeZone )  ;", "for    ( String   timeZoneId    :    ImmutableList . of ( UTC _ KEY . getId (  )  ,    jvmZone . getId (  )  ,    someZone . getId (  )  )  )     {", "Session   session    =    Session . builder ( getQueryRunner (  )  . getDefaultSession (  )  )  . setTimeZoneKey ( TimeZoneKey . getTimeZoneKey ( timeZoneId )  )  . build (  )  ;", "testCases . execute ( getQueryRunner (  )  ,    session ,    CreateAndInsert (  \" tpch . test _ date \"  )  )  ;", "testCases . execute ( getQueryRunner (  )  ,    session ,    prestoCreateAsSelect (  \" test _ date \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testDate"], "fileName": "com.facebook.presto.plugin.postgresql.TestPostgreSqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "testUnsupportedDataType (  \" decimal (  5  0  ,  0  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testDecimalExceedingPrecisionMax"], "fileName": "com.facebook.presto.plugin.postgresql.TestPostgreSqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "unicodeDataTypeTest ( DataType :  : charDataType )  . execute ( getQueryRunner (  )  ,    postgresCreateAndInsert (  \" tpch . postgresql _ test _ parameterized _ char _ unicode \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testPostgreSqlCreatedParameterizedCharUnicode"], "fileName": "com.facebook.presto.plugin.postgresql.TestPostgreSqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "varcharDataTypeTest (  )  . execute ( getQueryRunner (  )  ,    postgresCreateAndInsert (  \" tpch . postgresql _ test _ parameterized _ varchar \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testPostgreSqlCreatedParameterizedVarchar"], "fileName": "com.facebook.presto.plugin.postgresql.TestPostgreSqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "unicodeVarcharDateTypeTest (  )  . execute ( getQueryRunner (  )  ,    postgresCreateAndInsert (  \" tpch . postgresql _ test _ parameterized _ varchar _ unicode \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testPostgreSqlCreatedParameterizedVarcharUnicode"], "fileName": "com.facebook.presto.plugin.postgresql.TestPostgreSqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "decimalTests (  )  . execute ( getQueryRunner (  )  ,    postgresCreateAndInsert (  \" tpch . test _ decimal \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testPostgresSqlCreatedDecimal"], "fileName": "com.facebook.presto.plugin.postgresql.TestPostgreSqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "decimalTests (  )  . execute ( getQueryRunner (  )  ,    prestoCreateAsSelect (  \" test _ decimal \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testPrestoCreatedDecimal"], "fileName": "com.facebook.presto.plugin.postgresql.TestPostgreSqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "unicodeDataTypeTest ( DataType :  : charDataType )  . execute ( getQueryRunner (  )  ,    prestoCreateAsSelect (  \" postgresql _ test _ parameterized _ char _ unicode \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testPrestoCreatedParameterizedCharUnicode"], "fileName": "com.facebook.presto.plugin.postgresql.TestPostgreSqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "varcharDataTypeTest (  )  . execute ( getQueryRunner (  )  ,    prestoCreateAsSelect (  \" presto _ test _ parameterized _ varchar \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testPrestoCreatedParameterizedVarchar"], "fileName": "com.facebook.presto.plugin.postgresql.TestPostgreSqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "unicodeVarcharDateTypeTest (  )  . execute ( getQueryRunner (  )  ,    prestoCreateAsSelect (  \" postgresql _ test _ parameterized _ varchar _ unicode \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testPrestoCreatedParameterizedVarcharUnicode"], "fileName": "com.facebook.presto.plugin.postgresql.TestPostgreSqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "JdbcSqlExecutor   jdbcSqlExecutor    =    new   JdbcSqlExecutor ( postgreSqlServer . getJdbcUrl (  )  )  ;", "jdbcSqlExecutor . execute ( String . format (  \" CREATE   TABLE   tpch . test _ unsupported _ data _ type ( key   varchar (  5  )  ,    unsupported _ column    % s )  \"  ,    databaseDataType )  )  ;", "try    {", "assertQuery (  \" SELECT   COLUMN _ NAME   FROM   INFORMATION _ SCHEMA . COLUMNS   WHERE   TABLE _ SCHEMA    =     ' tpch '    AND   TABLE _ NAME    =     ' test _ unsupported _ data _ type '  \"  ,     \" VALUES    ' key '  \"  )  ;", "}    finally    {", "jdbcSqlExecutor . execute (  \" DROP   TABLE   tpch . test _ unsupported _ data _ type \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["testUnsupportedDataType"], "fileName": "com.facebook.presto.plugin.postgresql.TestPostgreSqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "varbinaryTestCases ( varbinaryDataType (  )  )  . execute ( getQueryRunner (  )  ,    prestoCreateAsSelect (  \" test _ varbinary \"  )  )  ;", "varbinaryTestCases (  . byteaDataType (  )  )  . execute ( getQueryRunner (  )  ,    postgresCreateAndInsert (  \" tpch . test _ varbinary \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testVarbinary"], "fileName": "com.facebook.presto.plugin.postgresql.TestPostgreSqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "String   sampleUnicodeText    =     \"  \\ u 6  5  3 b \\ u 6 bbb \\ u 6 a 5 f \\ u 5  2 d 5  \\ u 9  6  8 a \"  ;", "String   sampleFourByteUnicodeCharacter    =     \"  \\ ud 8  3 d \\ ude 0  2  \"  ;", "return   DataType . create (  )  . addRoundTrip ( dataTypeFactory . apply ( sampleUnicodeText . length (  )  )  ,    sampleUnicodeText )  . addRoundTrip ( dataTypeFactory . apply (  3  2  )  ,    sampleUnicodeText )  . addRoundTrip ( dataTypeFactory . apply (  2  0  0  0  0  )  ,    sampleUnicodeText )  . addRoundTrip ( dataTypeFactory . apply (  1  )  ,    sampleFourByteUnicodeCharacter )  ;", "}", "METHOD_END"], "methodName": ["unicodeDataTypeTest"], "fileName": "com.facebook.presto.plugin.postgresql.TestPostgreSqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "return   unicodeDataTypeTest ( DataType :  : varcharDataType )  . addRoundTrip ( varcharDataType (  )  ,     \"  \\ u 0  4  1 d \\ u 0  4  4  3  ,     \\ u 0  4  3 f \\ u 0  4  3 e \\ u 0  4  3  3  \\ u 0  4  3 e \\ u 0  4  3  4  \\ u 0  4  3  8  !  \"  )  ;", "}", "METHOD_END"], "methodName": ["unicodeVarcharDateTypeTest"], "fileName": "com.facebook.presto.plugin.postgresql.TestPostgreSqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "return   DataTypeTest . create (  )  . addRoundTrip ( varbinaryDataType ,     \" hello \"  . getBytes ( StandardCharsets . UTF _  8  )  )  . addRoundTrip ( varbinaryDataType ,     \" Pi ? kna    ?  ? ka   w    \u2013|  \u00be\u00a9  \u00b6\u00bc  \"  . getBytes ( StandardCharsets . UTF _  8  )  )  . addRoundTrip ( varbinaryDataType ,     \" Bag   full   of    ?  \"  . getBytes ( StandardCharsets . UTF _  1  6 LE )  )  . addRoundTrip ( varbinaryDataType ,    null )  . addRoundTrip ( varbinaryDataType ,    new   byte [  ]  {        }  )  . addRoundTrip ( varbinaryDataType ,    new   byte [  ]  {     0  ,     1  ,     2  ,     3  ,     4  ,     5  ,     6  ,     7  ,     8  ,     1  3  ,     -  7  ,     5  4  ,     1  2  2  ,     -  8  9  ,     0  ,     0  ,     0     }  )  ;", "}", "METHOD_END"], "methodName": ["varbinaryTestCases"], "fileName": "com.facebook.presto.plugin.postgresql.TestPostgreSqlTypeMapping"}, {"methodBody": ["METHOD_START", "{", "return   DataTypeTest . create (  )  . addRoundTrip ( varcharDataType (  1  0  )  ,     \" text _ a \"  )  . addRoundTrip ( varcharDataType (  2  5  5  )  ,     \" text _ b \"  )  . addRoundTrip ( varcharDataType (  6  5  5  3  5  )  ,     \" text _ d \"  )  . addRoundTrip ( varcharDataType (  1  0  4  8  5  7  6  0  )  ,     \" text _ f \"  )  . addRoundTrip ( varcharDataType (  )  ,     \" unbounded \"  )  ;", "}", "METHOD_END"], "methodName": ["varcharDataTypeTest"], "fileName": "com.facebook.presto.plugin.postgresql.TestPostgreSqlTypeMapping"}]