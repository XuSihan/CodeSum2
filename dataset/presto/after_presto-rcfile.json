[{"methodBody": ["METHOD_START", "{", "BigInteger   decimalStep    =    new   BigInteger ( step )  ;", "List < SqlDecimal >    values    =    new   ArrayList <  >  (  )  ;", "BigInteger   nextValue    =    new   BigInteger ( start )  ;", "for    ( int   i    =     0  ;    i    <    items ;    i +  +  )     {", "values . add ( new   SqlDecimal ( nextValue ,    cision ,    scale )  )  ;", "nextValue    =    nextValue . add ( decimalStep )  ;", "}", "return   values ;", "}", "METHOD_END"], "methodName": ["decimalSequence"], "fileName": "com.facebook.presto.rcfile.AbstractTestRcFileReader"}, {"methodBody": ["METHOD_START", "{", "List < Double >    values    =    new   ArrayList <  >  (  )  ;", "double   nextValue    =    start ;", "for    ( int   i    =     0  ;    i    <    items ;    i +  +  )     {", "values . add ( nextValue )  ;", "nextValue    +  =    step ;", "}", "return   values ;", "}", "METHOD_END"], "methodName": ["doubleSequence"], "fileName": "com.facebook.presto.rcfile.AbstractTestRcFileReader"}, {"methodBody": ["METHOD_START", "{", "return   ContiguousSet . create ( Range . openClosed ( lowerInclusive ,    upperExclusive )  ,    DiscreteDomain . integers (  )  )  ;", "}", "METHOD_END"], "methodName": ["intsBetween"], "fileName": "com.facebook.presto.rcfile.AbstractTestRcFileReader"}, {"methodBody": ["METHOD_START", "{", "return   ContiguousSet . create ( Range . openClosed ( lowerInclusive ,    upperExclusive )  ,    DiscreteDomain . longs (  )  )  ;", "}", "METHOD_END"], "methodName": ["longsBetween"], "fileName": "com.facebook.presto.rcfile.AbstractTestRcFileReader"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( DateTimeZone . getDefault (  )  ,    RcFileTester . HIVE _ STORAGE _ TIME _ ZONE )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.rcfile.AbstractTestRcFileReader"}, {"methodBody": ["METHOD_START", "{", "tester . testRoundTrip ( VARBINARY ,    AbstractTestRcFileReader . intsBetween (  0  ,     3  0  0  0  0  )  . stream (  )  . filter (  (    i )     -  >     ( i    %     1  9  )     =  =     0  )  . map ( Object :  : toString )  . map (  (    string )     -  >    string . getBytes ( StandardCharsets . UTF _  8  )  )  . map ( SqlVarbinary :  : new )  . collect ( Collectors . toList (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testBinarySequence"], "fileName": "com.facebook.presto.rcfile.AbstractTestRcFileReader"}, {"methodBody": ["METHOD_START", "{", "tester . testRoundTrip ( BOOLEAN ,    limit ( cycle ( ImmutableList . of ( true ,    false ,    false )  )  ,     3  0  0  0  )  )  ;", "}", "METHOD_END"], "methodName": ["testBooleanSequence"], "fileName": "com.facebook.presto.rcfile.AbstractTestRcFileReader"}, {"methodBody": ["METHOD_START", "{", "tester . testRoundTrip ( TINYINT ,    AbstractTestRcFileReader . intsBetween (  (  -  3  1  2  3  4  )  ,     3  1  2  3  4  )  . stream (  )  . filter (  (    i )     -  >     ( i    %     1  1  )     =  =     0  )  . map ( Integer :  : byteValue )  . collect ( Collectors . toList (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testByteSequence"], "fileName": "com.facebook.presto.rcfile.AbstractTestRcFileReader"}, {"methodBody": ["METHOD_START", "{", "tester . testRoundTrip ( DATE ,    AbstractTestRcFileReader . intsBetween (  (  -  3  1  2  3  4  )  ,     3  1  2  3  4  )  . stream (  )  . filter (  (    i )     -  >     ( i    %     1  1  )     =  =     0  )  . map ( SqlDate :  : new )  . collect ( Collectors . toList (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testDateSequence"], "fileName": "com.facebook.presto.rcfile.AbstractTestRcFileReader"}, {"methodBody": ["METHOD_START", "{", "tester . testRoundTrip ( AbstractTestRcFileReader . DECIMAL _ TYPE _ PRECISION _  2  ,    AbstractTestRcFileReader . decimalSequence (  \"  -  3  0  \"  ,     \"  1  \"  ,     6  0  ,     2  ,     1  )  )  ;", "tester . testRoundTrip ( AbstractTestRcFileReader . DECIMAL _ TYPE _ PRECISION _  4  ,    AbstractTestRcFileReader . decimalSequence (  \"  -  3  0  0  0  \"  ,     \"  6  \"  ,     1  0  0  0  ,     4  ,     2  )  )  ;", "tester . testRoundTrip ( AbstractTestRcFileReader . DECIMAL _ TYPE _ PRECISION _  8  ,    AbstractTestRcFileReader . decimalSequence (  \"  -  3  0  0  0  0  0  0  \"  ,     \"  6  0  0  0  \"  ,     1  0  0  0  ,     8  ,     4  )  )  ;", "tester . testRoundTrip ( AbstractTestRcFileReader . DECIMAL _ TYPE _ PRECISION _  1  7  ,    AbstractTestRcFileReader . decimalSequence (  \"  -  3  0  0  0  0  0  0  0  0  0  0  \"  ,     \"  6  0  0  0  0  0  0  0  \"  ,     1  0  0  0  ,     1  7  ,     8  )  )  ;", "tester . testRoundTrip ( AbstractTestRcFileReader . DECIMAL _ TYPE _ PRECISION _  1  8  ,    AbstractTestRcFileReader . decimalSequence (  \"  -  3  0  0  0  0  0  0  0  0  0  0  \"  ,     \"  6  0  0  0  0  0  0  0  \"  ,     1  0  0  0  ,     1  8  ,     8  )  )  ;", "tester . testRoundTrip ( AbstractTestRcFileReader . DECIMAL _ TYPE _ PRECISION _  3  8  ,    AbstractTestRcFileReader . decimalSequence (  \"  -  3  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  ,     \"  6  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  \"  ,     1  0  0  0  ,     3  8  ,     1  6  )  )  ;", "}", "METHOD_END"], "methodName": ["testDecimalSequence"], "fileName": "com.facebook.presto.rcfile.AbstractTestRcFileReader"}, {"methodBody": ["METHOD_START", "{", "tester . testRoundTrip ( DOUBLE ,    AbstractTestRcFileReader . doubleSequence (  (  -  5  0  0  .  1  2  )  ,     1  ,     3  0  0  0  )  )  ;", "}", "METHOD_END"], "methodName": ["testDoubleSequence"], "fileName": "com.facebook.presto.rcfile.AbstractTestRcFileReader"}, {"methodBody": ["METHOD_START", "{", "tester . testRoundTrip ( VARBINARY ,    Collections . nCopies (  3  0  0  0  ,    new   SqlVarbinary ( new   byte [  0  ]  )  )  ,    RcFileTester . Format . BINARY )  ;", "}", "METHOD_END"], "methodName": ["testEmptyBinarySequence"], "fileName": "com.facebook.presto.rcfile.AbstractTestRcFileReader"}, {"methodBody": ["METHOD_START", "{", "tester . testRoundTrip ( VARCHAR ,    Collections . nCopies (  3  0  0  0  ,     \"  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testEmptyStringSequence"], "fileName": "com.facebook.presto.rcfile.AbstractTestRcFileReader"}, {"methodBody": ["METHOD_START", "{", "tester . testRoundTrip ( REAL ,    AbstractTestRcFileReader . doubleSequence (  (  -  5  0  0  .  1  2 F )  ,     1  .  0 F ,     3  0  0  0  )  . stream (  )  . map ( Double :  : floatValue )  . collect ( Collectors . toList (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testFloatSequence"], "fileName": "com.facebook.presto.rcfile.AbstractTestRcFileReader"}, {"methodBody": ["METHOD_START", "{", "tester . testRoundTrip ( INTEGER ,    AbstractTestRcFileReader . intsBetween (  (  -  3  1  2  3  4  )  ,     3  1  2  3  4  )  . stream (  )  . filter (  (    i )     -  >     ( i    %     1  1  )     =  =     0  )  . collect ( Collectors . toList (  )  )  )  ;", "tester . testRoundTrip ( INTEGER ,    AbstractTestRcFileReader . intsBetween ( Integer . MIN _ VALUE ,     (  ( Integer . MIN _ VALUE )     +     1  0  0  0  )  )  )  ;", "tester . testRoundTrip ( INTEGER ,    AbstractTestRcFileReader . intsBetween (  (  ( Integer . MAX _ VALUE )     -     1  0  0  0  )  ,    Integer . MAX _ VALUE )  )  ;", "}", "METHOD_END"], "methodName": ["testIntSequence"], "fileName": "com.facebook.presto.rcfile.AbstractTestRcFileReader"}, {"methodBody": ["METHOD_START", "{", "tester . testRoundTrip ( BIGINT ,    AbstractTestRcFileReader . longsBetween (  (  -  3  1  2  3  4  )  ,     3  1  2  3  4  )  . stream (  )  . filter (  (    i )     -  >     ( i    %     1  1  )     =  =     0  )  . collect ( Collectors . toList (  )  )  )  ;", "tester . testRoundTrip ( BIGINT ,    AbstractTestRcFileReader . longsBetween ( Long . MIN _ VALUE ,     (  ( Long . MIN _ VALUE )     +     1  0  0  0  )  )  )  ;", "tester . testRoundTrip ( BIGINT ,    AbstractTestRcFileReader . longsBetween (  (  ( Long . MAX _ VALUE )     -     1  0  0  0  )  ,    Long . MAX _ VALUE )  )  ;", "}", "METHOD_END"], "methodName": ["testLongSequence"], "fileName": "com.facebook.presto.rcfile.AbstractTestRcFileReader"}, {"methodBody": ["METHOD_START", "{", "tester . testRoundTrip ( VARCHAR ,    ImmutableList . of (  )  )  ;", "}", "METHOD_END"], "methodName": ["testNoData"], "fileName": "com.facebook.presto.rcfile.AbstractTestRcFileReader"}, {"methodBody": ["METHOD_START", "{", "tester . testRoundTrip ( SMALLINT ,    AbstractTestRcFileReader . intsBetween (  (  -  3  1  2  3  4  )  ,     3  1  2  3  4  )  . stream (  )  . filter (  (    i )     -  >     ( i    %     1  1  )     =  =     0  )  . map ( Integer :  : shortValue )  . collect ( Collectors . toList (  )  )  )  ;", "tester . testRoundTrip ( SMALLINT ,    AbstractTestRcFileReader . intsBetween ( Short . MIN _ VALUE ,     (  ( Short . MIN _ VALUE )     +     1  0  0  0  )  )  . stream (  )  . map ( Integer :  : shortValue )  . collect ( Collectors . toList (  )  )  )  ;", "tester . testRoundTrip ( SMALLINT ,    AbstractTestRcFileReader . intsBetween (  (  ( Short . MAX _ VALUE )     -     1  0  0  0  )  ,    Short . MAX _ VALUE )  . stream (  )  . map ( Integer :  : shortValue )  . collect ( Collectors . toList (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testShortSequence"], "fileName": "com.facebook.presto.rcfile.AbstractTestRcFileReader"}, {"methodBody": ["METHOD_START", "{", "tester . testRoundTrip ( VARCHAR ,    AbstractTestRcFileReader . intsBetween (  0  ,     3  1  2  3  4  )  . stream (  )  . filter (  (    i )     -  >     ( i    %     1  9  )     =  =     0  )  . map ( Object :  : toString )  . collect ( Collectors . toList (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testStringSequence"], "fileName": "com.facebook.presto.rcfile.AbstractTestRcFileReader"}, {"methodBody": ["METHOD_START", "{", "tester . testRoundTrip ( TIMESTAMP ,    AbstractTestRcFileReader . intsBetween (  (  -  3  1  2  3  4  )  ,     3  1  2  3  4  )  . stream (  )  . filter (  (    i )     -  >     ( i    %     1  9  )     =  =     0  )  . map (  (    timestamp )     -  >    new    < UTC _ KEY > SqlTimestamp ( timestamp )  )  . collect ( Collectors . toList (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testTimestampSequence"], "fileName": "com.facebook.presto.rcfile.AbstractTestRcFileReader"}, {"methodBody": ["METHOD_START", "{", "ensureWritableBytes ( Math . min ( BufferedOutputStreamSliceOutput . CHUNK _ SIZE ,    length )  )  ;", "return   Math . min ( length ,     (  ( BufferedOutputStreamSliceOutput . CHUNK _ SIZE )     -     ( bufferPosition )  )  )  ;", "}", "METHOD_END"], "methodName": ["ensureBatchSize"], "fileName": "com.facebook.presto.rcfile.BufferedOutputStreamSliceOutput"}, {"methodBody": ["METHOD_START", "{", "if    ( minWritableBytes    >     ( getFreeBufferLength (  )  )  )     {", "flushBufferTo (  )  ;", "}", "}", "METHOD_END"], "methodName": ["ensureWritableBytes"], "fileName": "com.facebook.presto.rcfile.BufferedOutputStreamSliceOutput"}, {"methodBody": ["METHOD_START", "{", "writeToOutputStream ( buffer ,     0  ,    bufferPosition )  ;", "bufferOffset    +  =    bufferPosition ;", "bufferPosition    =     0  ;", "}", "METHOD_END"], "methodName": ["flushBufferToOutputStream"], "fileName": "com.facebook.presto.rcfile.BufferedOutputStreamSliceOutput"}, {"methodBody": ["METHOD_START", "{", "return    ( BufferedOutputStreamSliceOutput . CHUNK _ SIZE )     -     ( bufferPosition )  ;", "}", "METHOD_END"], "methodName": ["getFreeBufferLength"], "fileName": "com.facebook.presto.rcfile.BufferedOutputStreamSliceOutput"}, {"methodBody": ["METHOD_START", "{", "try    {", "o . write ( source ,    sourceIndex ,    length )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["writeToOutputStream"], "fileName": "com.facebook.presto.rcfile.BufferedOutputStreamSliceOutput"}, {"methodBody": ["METHOD_START", "{", "try    {", "source . getBytes ( sourceIndex ,    o ,    length )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["writeToOutputStream"], "fileName": "com.facebook.presto.rcfile.BufferedOutputStreamSliceOutput"}, {"methodBody": ["METHOD_START", "{", "closedSlices . add ( slice . slice (  0  ,    bufferPosition )  )  ;", "buffer    =    chunkSupplier . get (  )  ;", "slice    =    Slices . wrappedBuffer ( buffer )  ;", "streamOffset    +  =    bufferPosition ;", "bufferPosition    =     0  ;", "}", "METHOD_END"], "methodName": ["closeChunk"], "fileName": "com.facebook.presto.rcfile.ChunkedSliceOutput"}, {"methodBody": ["METHOD_START", "{", "checkArgument (  ( minWritableBytes    <  =     ( ChunkedSliceOutput . MAX _ UNUSED _ BUFFER _ SIZE )  )  )  ;", "if    (  (  ( bufferPosition )     +    minWritableBytes )     >     ( slice . length (  )  )  )     {", "closeChunk (  )  ;", "}", "}", "METHOD_END"], "methodName": ["ensureWritableBytes"], "fileName": "com.facebook.presto.rcfile.ChunkedSliceOutput"}, {"methodBody": ["METHOD_START", "{", "return   ImmutableList .  < Slice > builder (  )  . addAll ( closedSlices )  . add ( Slices . copyOf ( slice ,     0  ,    bufferPosition )  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["getSlices"], "fileName": "com.facebook.presto.rcfile.ChunkedSliceOutput"}, {"methodBody": ["METHOD_START", "{", "ensureWritableBytes ( Math . min ( ChunkedSliceOutput . MAX _ UNUSED _ BUFFER _ SIZE ,    length )  )  ;", "return   Math . min ( length ,     (  ( slice . length (  )  )     -     ( bufferPosition )  )  )  ;", "}", "METHOD_END"], "methodName": ["tryEnsureBatchSize"], "fileName": "com.facebook.presto.rcfile.ChunkedSliceOutput"}, {"methodBody": ["METHOD_START", "{", "return    ( offset [  ( position    +     1  )  ]  )     -     ( offset [ position ]  )  ;", "}", "METHOD_END"], "methodName": ["getLength"], "fileName": "com.facebook.presto.rcfile.ColumnData"}, {"methodBody": ["METHOD_START", "{", "return   offset [ position ]  ;", "}", "METHOD_END"], "methodName": ["getOffset"], "fileName": "com.facebook.presto.rcfile.ColumnData"}, {"methodBody": ["METHOD_START", "{", "return   slice ;", "}", "METHOD_END"], "methodName": ["getSlice"], "fileName": "com.facebook.presto.rcfile.ColumnData"}, {"methodBody": ["METHOD_START", "{", "return    ( offset . length )     -     1  ;", "}", "METHOD_END"], "methodName": ["rowCount"], "fileName": "com.facebook.presto.rcfile.ColumnData"}, {"methodBody": ["METHOD_START", "{", "try    {", "Class <  ?    extends   Compression >    codecClass    =    classLoader . loadClass ( codecName )  . asSubclass ( Compression . class )  ;", "Constructor <  ?    extends   Compression >    constructor    =    codecClass . getDeclaredConstructor (  )  ;", "constructor . setAccessible ( true )  ;", "Compression   codec    =    constructor . newInstance (  )  ;", "if    ( codec   instanceof   Configurable )     {", "(  ( Configurable )     ( codec )  )  . setConf ( new   Configuration ( false )  )  ;", "}", "return   codec ;", "}    catch    ( ReflectiveOperationException   e )     {", "throw   new   IllegalArgumentException (  (  \" Unknown   codec :     \"     +    codecName )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["createCompressionCodec"], "fileName": "com.facebook.presto.rcfile.HadoopCodecFactory"}, {"methodBody": ["METHOD_START", "{", "return   PageSplitterUtil . splitPage ( page ,    maxPageSizeInBytes ,    Long . MAX _ VALUE )  ;", "}", "METHOD_END"], "methodName": ["splitPage"], "fileName": "com.facebook.presto.rcfile.PageSplitterUtil"}, {"methodBody": ["METHOD_START", "{", "checkArgument (  (  ( page . getPositionCount (  )  )     >     0  )  ,     \" page   is   empty \"  )  ;", "checkArgument (  ( maxPageSizeInBytes    >     0  )  ,     \" maxPageSizeInBytes   must   be    >     0  \"  )  ;", "if    (  (  (  ( page . getSizeInBytes (  )  )     =  =    previousPageSize )     |  |     (  ( page . getSizeInBytes (  )  )     <  =    maxPageSizeInBytes )  )     |  |     (  ( page . getPositionCount (  )  )     =  =     1  )  )     {", "return   ImmutableList . of ( page )  ;", "}", "ImmutableList . Builder < Page >    outputPages    =    ImmutableList . builder (  )  ;", "long   previousSize    =    page . getSizeInBytes (  )  ;", "int   positionCount    =    page . getPositionCount (  )  ;", "int   half    =    positionCount    /     2  ;", "Page   leftHalf    =    page . getRegion (  0  ,    half )  ;", "outputPages . addAll (  . splitPage ( leftHalf ,    maxPageSizeInBytes ,    previousSize )  )  ;", "Page   rightHalf    =    page . getRegion ( half ,     ( positionCount    -    half )  )  ;", "outputPages . addAll (  . splitPage ( rightHalf ,    maxPageSizeInBytes ,    previousSize )  )  ;", "return   outputPages . build (  )  ;", "}", "METHOD_END"], "methodName": ["splitPage"], "fileName": "com.facebook.presto.rcfile.PageSplitterUtil"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( type ,     \" type   is   null \"  )  ;", "if    ( type   instanceof   VarcharType )     {", "return    . calculateTruncationLength (  (  ( VarcharType )     ( type )  )  . getLength (  )  ,    slice ,    offset ,    length )  ;", "}", "if    ( type   instanceof   CharType )     {", "int   truncationLength    =     . calculateTruncationLength (  (  ( CharType )     ( type )  )  . getLength (  )  ,    slice ,    offset ,    length )  ;", "while    (  ( truncationLength    >     0  )     &  &     (  ( slice . getByte (  (  ( offset    +    truncationLength )     -     1  )  )  )     =  =     '     '  )  )     {", "truncationLength -  -  ;", "}", "return   truncationLength ;", "}", "return   length ;", "}", "METHOD_END"], "methodName": ["calculateTruncationLength"], "fileName": "com.facebook.presto.rcfile.RcFileDecoderUtils"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( slice ,     \" slice   is   null \"  )  ;", "if    ( maxCharacterCount    <     0  )     {", "throw   new   IllegalArgumentException (  \" Max   length   must   be   greater   or   equal   than   zero \"  )  ;", "}", "if    ( length    <  =    maxCharacterCount )     {", "return   length ;", "}", "int   indexEnd    =    SliceUtf 8  . offsetOfCPoint ( slice ,    offset ,    maxCharacterCount )  ;", "if    ( indexEnd    <     0  )     {", "return   length ;", "}", "return   indexEnd    -    offset ;", "}", "METHOD_END"], "methodName": ["calculateTruncationLength"], "fileName": "com.facebook.presto.rcfile.RcFileDecoderUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( value    >  =     (  -  1  1  2  )  )     {", "turn    1  ;", "}", "if    ( value    <     (  -  1  2  0  )  )     {", "turn    (  -  1  1  9  )     -    value ;", "}", "turn    (  -  1  1  1  )     -    value ;", "}", "METHOD_END"], "methodName": ["decodeVIntSize"], "fileName": "com.facebook.presto.rcfile.RcFileDecoderUtils"}, {"methodBody": ["METHOD_START", "{", "return   RcFileDecoderUtils . decodeVIntSize ( slice . getByte ( offset )  )  ;", "}", "METHOD_END"], "methodName": ["decodeVIntSize"], "fileName": "com.facebook.presto.rcfile.RcFileDecoderUtils"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( dataSource ,     \" dataSource   is   null \"  )  ;", "checkArgument (  ( offset    >  =     0  )  ,     \" offset   is   negative \"  )  ;", "checkArgument (  ( length    >  =     1  )  ,     \" length   must   be   at   least    1  \"  )  ;", "checkArgument (  (  ( offset    +    length )     <  =     ( dataSource . getSize (  )  )  )  ,     \" offset   plus   length   is   greater   than   data   size \"  )  ;", "Slice   sync    =    Slices . allocate (  (  (  ( SizeOf . SIZE _ OF _ INT )     +     ( SizeOf . SIZE _ OF _ LONG )  )     +     ( SizeOf . SIZE _ OF _ LONG )  )  )  ;", "sync . setInt (  0  ,     -  1  )  ;", "sync . setLong ( SizeOf . SIZE _ OF _ INT ,    syncFirst )  ;", "sync . setLong (  (  ( SizeOf . SIZE _ OF _ INT )     +     ( SizeOf . SIZE _ OF _ LONG )  )  ,    syncSecond )  ;", "byte [  ]    buffer    =    new   byte [ Math . toIntExact ( Math . min (  (  1     <  <     2  2  )  ,     ( length    +     (  (  . SYNC _ SEQUENCE _ LENGTH )     -     1  )  )  )  )  ]  ;", "Slice   bufferSlice    =    Slices . wrappedBuffer ( buffer )  ;", "for    ( long   position    =     0  ;    position    <    length ;    position    +  =     ( bufferSlice . length (  )  )     -     (  (  . SYNC _ SEQUENCE _ LENGTH )     -     1  )  )     {", "int   bufferSize    =    Math . toIntExact ( Math . min ( buffer . length ,     (  ( length    +     (  (  . SYNC _ SEQUENCE _ LENGTH )     -     1  )  )     -    position )  )  )  ;", "bufferSize    =    Math . toIntExact ( Math . min ( bufferSize ,     (  (  ( dataSource . getSize (  )  )     -    offset )     -    position )  )  )  ;", "dataSource . readFully (  ( offset    +    position )  ,    buffer ,     0  ,    bufferSize )  ;", "int   index    =    bufferSlice . indexOf ( sync )  ;", "if    ( index    >  =     0  )     {", "if    (  ( position    +    index )     <    length )     {", "long   startOfSyncSequence    =     ( offset    +    position )     +    index ;", "return   startOfSyncSequence ;", "} else    {", "return    -  1  ;", "}", "}", "}", "return    -  1  ;", "}", "METHOD_END"], "methodName": ["findFirstSyncPosition"], "fileName": "com.facebook.presto.rcfile.RcFileDecoderUtils"}, {"methodBody": ["METHOD_START", "{", "return    ( value    <     (  -  1  2  0  )  )     |  |     (  ( value    >  =     (  -  1  1  2  )  )     &  &     ( value    <     0  )  )  ;", "}", "METHOD_END"], "methodName": ["isNegativeVInt"], "fileName": "com.facebook.presto.rcfile.RcFileDecoderUtils"}, {"methodBody": ["METHOD_START", "{", "return   RcFileDecoderUtils . isNegativeVInt ( slice . getByte ( offset )  )  ;", "}", "METHOD_END"], "methodName": ["isNegativeVInt"], "fileName": "com.facebook.presto.rcfile.RcFileDecoderUtils"}, {"methodBody": ["METHOD_START", "{", "byte   firstByte    =    slice . getByte ( start )  ;", "int   length    =     . decodeVIntSize ( firstByte )  ;", "if    ( length    =  =     1  )     {", "return   firstByte ;", "}", "return    . readVIntInternal ( slice ,    start ,    length )  ;", "}", "METHOD_END"], "methodName": ["readVInt"], "fileName": "com.facebook.presto.rcfile.RcFileDecoderUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( length    =  =     1  )     {", "return   slice . getByte ( start )  ;", "}", "return    . readVIntInternal ( slice ,    start ,    length )  ;", "}", "METHOD_END"], "methodName": ["readVInt"], "fileName": "com.facebook.presto.rcfile.RcFileDecoderUtils"}, {"methodBody": ["METHOD_START", "{", "byte   firstByte    =    in . readByte (  )  ;", "int   length    =     . decodeVIntSize ( firstByte )  ;", "if    ( length    =  =     1  )     {", "return   firstByte ;", "}", "long   value    =     0  ;", "for    ( int   i    =     1  ;    i    <    length ;    i +  +  )     {", "value    <  <  =     8  ;", "value    |  =     ( in . readByte (  )  )     &     2  5  5  ;", "}", "return    . isNegativeVInt ( firstByte )     ?     ~ value    :    value ;", "}", "METHOD_END"], "methodName": ["readVInt"], "fileName": "com.facebook.presto.rcfile.RcFileDecoderUtils"}, {"methodBody": ["METHOD_START", "{", "long   value    =     0  ;", "for    ( int   i    =     1  ;    i    <    length ;    i +  +  )     {", "value    <  <  =     8  ;", "value    |  =     ( slice . getByte (  ( start    +    i )  )  )     &     2  5  5  ;", "}", "return    . isNegativeVInt ( slice . getByte ( start )  )     ?     ~ value    :    value ;", "}", "METHOD_END"], "methodName": ["readVIntInternal"], "fileName": "com.facebook.presto.rcfile.RcFileDecoderUtils"}, {"methodBody": ["METHOD_START", "{", "RcFileDecoderUtils . writeVInt ( out ,    slice . length (  )  )  ;", "out . writeBytes ( slice )  ;", "}", "METHOD_END"], "methodName": ["writeLengthPrefixedString"], "fileName": "com.facebook.presto.rcfile.RcFileDecoderUtils"}, {"methodBody": ["METHOD_START", "{", "if    (  ( value    >  =     (  -  1  1  2  )  )     &  &     ( value    <  =     1  2  7  )  )     {", "out . writeByte ( value )  ;", "return ;", "}", "int   length    =     -  1  1  2  ;", "if    ( value    <     0  )     {", "value    ^  =     -  1  ;", "length    =     -  1  2  0  ;", "}", "int   tmp    =    value ;", "wh    ( tmp    !  =     0  )     {", "tmp    =    tmp    >  >     8  ;", "length -  -  ;", "}", "out . writeByte ( length )  ;", "length    =     ( length    <     (  -  1  2  0  )  )     ?     -  ( length    +     1  2  0  )     :     -  ( length    +     1  1  2  )  ;", "for    ( int   idx    =    length ;    idx    !  =     0  ;    idx -  -  )     {", "int   shiftBits    =     ( idx    -     1  )     *     8  ;", "out . writeByte (  (  ( value    >  >    shiftBits )     &     2  5  5  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["writeVInt"], "fileName": "com.facebook.presto.rcfile.RcFileDecoderUtils"}, {"methodBody": ["METHOD_START", "{", "if    (  ( value    >  =     (  -  1  1  2  )  )     &  &     ( value    <  =     1  2  7  )  )     {", "out . writeByte (  (  ( byte )     ( value )  )  )  ;", "return ;", "}", "int   length    =     -  1  1  2  ;", "if    ( value    <     0  )     {", "value    ^  =     -  1  ;", "length    =     -  1  2  0  ;", "}", "long   tmp    =    value ;", "wh    ( tmp    !  =     0  )     {", "tmp    =    tmp    >  >     8  ;", "length -  -  ;", "}", "out . writeByte ( length )  ;", "length    =     ( length    <     (  -  1  2  0  )  )     ?     -  ( length    +     1  2  0  )     :     -  ( length    +     1  1  2  )  ;", "for    ( int   idx    =    length ;    idx    !  =     0  ;    idx -  -  )     {", "int   shiftBits    =     ( idx    -     1  )     *     8  ;", "long   mask    =     2  5  5 L    <  <    shiftBits ;", "out . writeByte (  (  ( byte )     (  ( value    &    mask )     >  >    shiftBits )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["writeVLong"], "fileName": "com.facebook.presto.rcfile.RcFileDecoderUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( BOOLEAN . equals ( type )  )     {", "return   booleanEncoding ( type )  ;", "}", "if    ( TINYINT . equals ( type )  )     {", "return   byteEncoding ( type )  ;", "}", "if    ( SMALLINT . equals ( type )  )     {", "return   shortEncoding ( type )  ;", "}", "if    ( INTEGER . equals ( type )  )     {", "return   intEncoding ( type )  ;", "}", "if    ( BIGINT . equals ( type )  )     {", "return   longEncoding ( type )  ;", "}", "if    ( type   instanceof   DecimalType )     {", "return   decimalEncoding ( type )  ;", "}", "if    ( REAL . equals ( type )  )     {", "return   floatEncoding ( type )  ;", "}", "if    ( DOUBLE . equals ( type )  )     {", "return   doubleEncoding ( type )  ;", "}", "if    (  ( type   instanceof   VarcharType )     |  |     ( type   instanceof   CharType )  )     {", "return   stringEncoding ( type )  ;", "}", "if    ( VARBINARY . equals ( type )  )     {", "return   binaryEncoding ( type )  ;", "}", "if    ( DATE . equals ( type )  )     {", "return   dateEncoding ( type )  ;", "}", "if    ( TIMESTAMP . equals ( type )  )     {", "return   timestampEncoding ( type )  ;", "}", "String   baseType    =    type . getTypeSignature (  )  . getBase (  )  ;", "if    ( ARRAY . equals ( baseType )  )     {", "ColumnEncoding   elementType    =    getEncoding ( type . getTypeParameters (  )  . get (  0  )  )  ;", "return   listEncoding ( type ,    elementType )  ;", "}", "if    ( MAP . equals ( baseType )  )     {", "ColumnEncoding   keyType    =    getEncoding ( type . getTypeParameters (  )  . get (  0  )  )  ;", "ColumnEncoding   valueType    =    getEncoding ( type . getTypeParameters (  )  . get (  1  )  )  ;", "return   mapEncoding ( type ,    keyType ,    valueType )  ;", "}", "if    ( ROW . equals ( baseType )  )     {", "return   structEncoding ( type ,    type . getTypeParameters (  )  . stream (  )  . map ( this :  : getEncoding )  . collect ( Collectors . toList (  )  )  )  ;", "}", "throw   new   spi . PrestoException ( NOT _ SUPPORTED ,     (  \" unsupported   type :     \"     +    type )  )  ;", "}", "METHOD_END"], "methodName": ["getEncoding"], "fileName": "com.facebook.presto.rcfile.RcFileEncoding"}, {"methodBody": ["METHOD_START", "{", "if    ( closed )     {", "return    -  1  ;", "}", "rowGroupPosition    +  =    ColumnData . MAX _ SIZE ;", "currentChunkRowCount    =    Math . min ( ColumnData . MAX _ SIZE ,     (  ( rowGroupRowCount )     -     ( rowGroupPosition )  )  )  ;", "if    (  ( currentChunkRowCount )     >     0  )     {", "validateWritePageChecksum (  )  ;", "return   currentChunkRowCount ;", "}", "if    (  ( input . remaining (  )  )     =  =     0  )     {", "close (  )  ;", "return    -  1  ;", "}", "verify (  (  ( input . remaining (  )  )     >  =     ( SizeOf . SIZE _ OF _ INT )  )  ,     \" RCFile   truncated    % s \"  ,    dataSource . getId (  )  )  ;", "int   unusedRowGroupSize    =    Integer . reverseBytes ( input . readInt (  )  )  ;", "if    ( unusedRowGroupSize    =  =     (  -  1  )  )     {", "verify (  (  ( input . remaining (  )  )     >  =     (  (  ( SizeOf . SIZE _ OF _ LONG )     +     ( SizeOf . SIZE _ OF _ LONG )  )     +     ( SizeOf . SIZE _ OF _ INT )  )  )  ,     \" RCFile   truncated    % s \"  ,    dataSource . getId (  )  )  ;", "if    (  (  ( input . position (  )  )     -     ( SizeOf . SIZE _ OF _ INT )  )     >  =     ( end )  )     {", "close (  )  ;", "return    -  1  ;", "}", "verify (  (  (  ( syncFirst )     =  =     ( input . readLong (  )  )  )     &  &     (  ( syncSecond )     =  =     ( input . readLong (  )  )  )  )  ,     \" Invalid   sync   in   RCFile    % s \"  ,    dataSource . getId (  )  )  ;", "unusedRowGroupSize    =    Integer . reverseBytes ( input . readInt (  )  )  ;", "} else", "if    (  ( rowsRead )     >     0  )     {", "validateWrite (  (    writeValidation )     -  >    false ,     \" Expected   sync   sequence   for   every   row   group   except   the   first   one \"  )  ;", "}", "verify (  ( unusedRowGroupSize    >     0  )  ,     \" Invalid   uncompressed   row   group   length    % s \"  ,    unusedRowGroupSize )  ;", "int   uncompressedHeaderSize    =    Integer . reverseBytes ( input . readInt (  )  )  ;", "int   compressedHeaderSize    =    Integer . reverseBytes ( input . readInt (  )  )  ;", "if    ( compressedHeaderSize    >     ( compressedHeaderBuffer . length (  )  )  )     {", "compressedHeaderBuffer    =    Slices . allocate ( compressedHeaderSize )  ;", "}", "input . readBytes ( compressedHeaderBuffer ,     0  ,    compressedHeaderSize )  ;", "Slice   header ;", "if    (  ( decompressor )     !  =    null )     {", "if    (  ( headerBuffer . length (  )  )     <    uncompressedHeaderSize )     {", "headerBuffer    =    Slices . allocate ( uncompressedHeaderSize )  ;", "}", "Slice   buffer    =    headerBuffer . slice (  0  ,    uncompressedHeaderSize )  ;", "decompressor . decompress ( compressedHeaderBuffer ,    buffer )  ;", "header    =    buffer ;", "} else    {", "verify (  ( compressedHeaderSize    =  =    uncompressedHeaderSize )  ,     \" Invalid   RCFile    % s \"  ,    dataSource . getId (  )  )  ;", "header    =    compressedHeaderBuffer ;", "}", "BasicSliceInput   headerInput    =    header . getInput (  )  ;", "rowGroupRowCount    =    Math . toIntExact ( DecoderUtils . readVInt ( headerInput )  )  ;", "rowsRead    +  =    rowGroupRowCount ;", "rowGroupPosition    =     0  ;", "currentChunkRowCount    =    Math . min ( ColumnData . MAX _ SIZE ,    rowGroupRowCount )  ;", "int   totalCompressedDataSize    =     0  ;", "for    ( int   columnIndex    =     0  ;    columnIndex    <     ( columnCount )  ;    columnIndex +  +  )     {", "int   compressedDataSize    =    Math . toIntExact ( DecoderUtils . readVInt ( headerInput )  )  ;", "totalCompressedDataSize    +  =    compressedDataSize ;", "int   uncompressedDataSize    =    Math . toIntExact ( DecoderUtils . readVInt ( headerInput )  )  ;", "if    (  (  ( decompressor )     =  =    null )     &  &     ( compressedDataSize    !  =    uncompressedDataSize )  )     {", "throw   corrupt (  \" Invalid   RCFile    % s \"  ,    dataSource . getId (  )  )  ;", "}", "int   lengthsSize    =    Math . toIntExact ( DecoderUtils . readVInt ( headerInput )  )  ;", "Slice   lengthsBuffer    =    headerInput . readSlice ( lengthsSize )  ;", "if    ( readColumns . containsKey ( columnIndex )  )     {", "Slice   dataBuffer    =    input . readSlice ( compressedDataSize )  ;", "columns [ columnIndex ]  . setBuffers ( lengthsBuffer ,    dataBuffer ,    uncompressedDataSize )  ;", "} else    {", "skipFully ( input ,    compressedDataSize )  ;", "}", "}", "verify (  ( unusedRowGroupSize    =  =     ( totalCompressedDataSize    +    uncompressedHeaderSize )  )  ,     \" Invalid   row   group   size \"  )  ;", "validateWriteRowGroupChecksum (  )  ;", "validateWritePageChecksum (  )  ;", "return   currentChunkRowCount ;", "}", "METHOD_END"], "methodName": ["advance"], "fileName": "com.facebook.presto.rcfile.RcFileReader"}, {"methodBody": ["METHOD_START", "{", "try    {", "close (  )  ;", "}    catch    ( IOExption   ignored )     {", "}", "}", "METHOD_END"], "methodName": ["closeQuietly"], "fileName": "com.facebook.presto.rcfile.RcFileReader"}, {"methodBody": ["METHOD_START", "{", "closeQuietly (  )  ;", "return   new   CorruptionException ( messageFormat ,    args )  ;", "}", "METHOD_END"], "methodName": ["corrupt"], "fileName": "com.facebook.presto.rcfile.RcFileReader"}, {"methodBody": ["METHOD_START", "{", "return   dataSource . getReadBytes (  )  ;", "}", "METHOD_END"], "methodName": ["getBytesRead"], "fileName": "com.facebook.presto.rcfile.RcFileReader"}, {"methodBody": ["METHOD_START", "{", "return   columnCount ;", "}", "METHOD_END"], "methodName": ["getColumnCount"], "fileName": "com.facebook.presto.rcfile.RcFileReader"}, {"methodBody": ["METHOD_START", "{", "return   dataSource . getId (  )  ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "com.facebook.presto.rcfile.RcFileReader"}, {"methodBody": ["METHOD_START", "{", "return   length ;", "}", "METHOD_END"], "methodName": ["getLength"], "fileName": "com.facebook.presto.rcfile.RcFileReader"}, {"methodBody": ["METHOD_START", "{", "return   metadata ;", "}", "METHOD_END"], "methodName": ["getMetadata"], "fileName": "com.facebook.presto.rcfile.RcFileReader"}, {"methodBody": ["METHOD_START", "{", "return   dataSource . getReadTimeNanos (  )  ;", "}", "METHOD_END"], "methodName": ["getReadTimeNanos"], "fileName": "com.facebook.presto.rcfile.RcFileReader"}, {"methodBody": ["METHOD_START", "{", "return   rowsRead ;", "}", "METHOD_END"], "methodName": ["getRowsRead"], "fileName": "com.facebook.presto.rcfile.RcFileReader"}, {"methodBody": ["METHOD_START", "{", "Slice   sync    =    Slices . allocate (  (  ( SizeOf . SIZE _ OF _ LONG )     +     ( SizeOf . SIZE _ OF _ LONG )  )  )  ;", "sync . setLong (  0  ,    synrst )  ;", "sync . setLong ( SizeOf . SIZE _ OF _ LONG ,    syncSecond )  ;", "return   sync ;", "}", "METHOD_END"], "methodName": ["getSync"], "fileName": "com.facebook.presto.rcfile.RcFileReader"}, {"methodBody": ["METHOD_START", "{", "return   version ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "com.facebook.presto.rcfile.RcFileReader"}, {"methodBody": ["METHOD_START", "{", "checkArgument ( readColumns . containsKey ( columnIndex )  ,     \" Column    % s   is   not   being   read \"  ,    columnIndex )  ;", "checkState (  (  ( currentChunkRowCount )     >     0  )  ,     \" No   more   data \"  )  ;", "if    ( columnIndex    >  =     ( columns . length )  )     {", "Type   type    =    readColumns . get ( columnIndex )  ;", "Block   nullBlock    =    type . createBlockBuilder ( null ,     1  ,     0  )  . appendNull (  )  . build (  )  ;", "return   new   spi . block . RunLengthEncodedBlock ( nullBlock ,    currentChunkRowCount )  ;", "}", "return   columns [ columnIndex ]  . readBlock ( rowGroupPosition ,    currentChunkRowCount )  ;", "}", "METHOD_END"], "methodName": ["readBlock"], "fileName": "com.facebook.presto.rcfile.RcFileReader"}, {"methodBody": ["METHOD_START", "{", "int   length    =    Math . toIntExact ( RcFileDecoderUtils . readVInt ( in )  )  ;", "verify (  ( length    <  =     (  . MAX _ METADATA _ STRING _ LENGTH )  )  ,     \" Metadata   string   value   is   too   long    (  % s )    in   RCFile    % s \"  ,    length ,    in )  ;", "return   in . readSlice ( length )  ;", "}", "METHOD_END"], "methodName": ["readLengthPrefixedString"], "fileName": "com.facebook.presto.rcfile.RcFileReader"}, {"methodBody": ["METHOD_START", "{", "long   startOfSyncSequence    =    RcFileDecoderUtils . findFirstSyncPosition ( dataSource ,    offset ,    length ,    syncFirst ,    syncSecond )  ;", "if    ( startOfSyncSequence    <     0  )     {", "closeQuietly (  )  ;", "return ;", "}", "input . setPosition ( startOfSyncSequence )  ;", "}", "METHOD_END"], "methodName": ["seekToFirstRowGroupInRange"], "fileName": "com.facebook.presto.rcfile.RcFileReader"}, {"methodBody": ["METHOD_START", "{", "Builder < Integer ,    Type >    readTypes    =    ImmutableMap . builder (  )  ;", "for    ( int   columnIndex    =     0  ;    columnIndex    <     ( types . size (  )  )  ;    columnIndex +  +  )     {", "readTypes . put ( columnIndex ,    types . get ( columnIndex )  )  ;", "}", "try    (    rcFileReader    =    new    ( input ,    encoding ,    readTypes . build (  )  ,    codecFactory ,     0  ,    input . getSize (  )  ,    new   io . airlift . units . DataSize (  8  ,    Unit . MEGABYTE )  ,    Optional . of ( writeValidation )  )  )     {", "while    (  ( rcFileReader . advance (  )  )     >  =     0  )     {", "}", "}    catch    ( RcFileCorruptionException   e )     {", "throw   e ;", "}    catch    ( IOException   e )     {", "throw   new   RcFileCorruptionException ( e ,     \" Validation   failed \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["validateFile"], "fileName": "com.facebook.presto.rcfile.RcFileReader"}, {"methodBody": ["METHOD_START", "{", "if    (  ( writeValidation . isPresent (  )  )     &  &     (  !  ( test . test ( writeValidation . get (  )  )  )  )  )     {", "throw   corrupt (  (  \" Write   validation   failed :     \"     +    messageFormat )  ,    args )  ;", "}", "}", "METHOD_END"], "methodName": ["validateWrite"], "fileName": "com.facebook.presto.rcfile.RcFileReader"}, {"methodBody": ["METHOD_START", "{", "if    ( writeChecksumBuilder . isPresent (  )  )     {", "Block [  ]    blocks    =    new   Block [ columns . length ]  ;", "for    ( int   columnIndex    =     0  ;    columnIndex    <     ( columns . length )  ;    columnIndex +  +  )     {", "blocks [ columnIndex ]     =    readBlock ( columnIndex )  ;", "}", "writeChecksumBuilder . get (  )  . addPage ( new   spi . Page ( currentChunkRowCount ,    blocks )  )  ;", "}", "}", "METHOD_END"], "methodName": ["validateWritePageChecksum"], "fileName": "com.facebook.presto.rcfile.RcFileReader"}, {"methodBody": ["METHOD_START", "{", "if    ( writeChecksumBuilder . isPresent (  )  )     {", "writeChecksumBuilder . get (  )  . addRowGroup ( rowGroupRowCount )  ;", "}", "}", "METHOD_END"], "methodName": ["validateWriteRowGroupChecksum"], "fileName": "com.facebook.presto.rcfile.RcFileReader"}, {"methodBody": ["METHOD_START", "{", "if    (  ! expression )     {", "throw   corrupt ( messageFormat ,    args )  ;", "}", "}", "METHOD_END"], "methodName": ["verify"], "fileName": "com.facebook.presto.rcfile.RcFileReader"}, {"methodBody": ["METHOD_START", "{", "if    ( actual    =  =    null )     {", "assertNull ( expected )  ;", "return ;", "}", "String   baseType    =    type . getTypeSignature (  )  . getBase (  )  ;", "if    ( ARRAY . equals ( baseType )  )     {", "List <  ?  >    actualArray    =     (  ( List <  ?  >  )     ( actual )  )  ;", "List <  ?  >    expectedArray    =     (  ( List <  ?  >  )     ( expected )  )  ;", "assertEquals ( actualArray . size (  )  ,    expectedArray . size (  )  )  ;", "Type   elementType    =    type . getTypeParameters (  )  . get (  0  )  ;", "for    ( int   i    =     0  ;    i    <     ( actualArray . size (  )  )  ;    i +  +  )     {", "Object   actualElement    =    actualArray . get ( i )  ;", "Object   expectedElement    =    expectedArray . get ( i )  ;", ". assertColumnValueEquals ( elementType ,    actualElement ,    expectedElement )  ;", "}", "} else", "if    ( MAP . equals ( baseType )  )     {", "Map <  ?  ,     ?  >    actualMap    =     (  ( Map <  ?  ,     ?  >  )     ( actual )  )  ;", "Map <  ?  ,     ?  >    expectedMap    =     (  ( Map <  ?  ,     ?  >  )     ( expected )  )  ;", "assertEquals ( actualMap . size (  )  ,    expectedMap . size (  )  )  ;", "Type   keyType    =    type . getTypeParameters (  )  . get (  0  )  ;", "Type   valueType    =    type . getTypeParameters (  )  . get (  1  )  ;", "List < Entry <  ?  ,     ?  >  >    expectedEntries    =    new   ArrayList <  >  ( expectedMap . entrySet (  )  )  ;", "for    ( Entry <  ?  ,     ?  >    actualEntry    :    actualMap . entrySet (  )  )     {", "for    ( Iterator < Entry <  ?  ,     ?  >  >    iterator    =    expectedEntries . iterator (  )  ;    iterator . hasNext (  )  ;  )     {", "Entry <  ?  ,     ?  >    expectedEntry    =    iterator . next (  )  ;", "try    {", ". assertColumnValueEquals ( keyType ,    actualEntry . getKey (  )  ,    expectedEntry . getKey (  )  )  ;", ". assertColumnValueEquals ( valueType ,    actualEntry . getValue (  )  ,    expectedEntry . getValue (  )  )  ;", "iterator . remove (  )  ;", "}    catch    ( AssertionError   ignored )     {", "}", "}", "}", "assertTrue ( expectedEntries . isEmpty (  )  ,     (  \" Unmatched   entries    \"     +    expectedEntries )  )  ;", "} else", "if    ( ROW . equals ( baseType )  )     {", "List < Type >    fieldTypes    =    type . getTypeParameters (  )  ;", "List <  ?  >    actualRow    =     (  ( List <  ?  >  )     ( actual )  )  ;", "List <  ?  >    expectedRow    =     (  ( List <  ?  >  )     ( expected )  )  ;", "assertEquals ( actualRow . size (  )  ,    fieldTypes . size (  )  )  ;", "assertEquals ( actualRow . size (  )  ,    expectedRow . size (  )  )  ;", "for    ( int   fieldId    =     0  ;    fieldId    <     ( actualRow . size (  )  )  ;    fieldId +  +  )     {", "Type   fieldType    =    fieldTypes . get ( fieldId )  ;", "Object   actualElement    =    actualRow . get ( fieldId )  ;", "Object   expectedElement    =    expectedRow . get ( fieldId )  ;", ". assertColumnValueEquals ( fieldType ,    actualElement ,    expectedElement )  ;", "}", "} else", "if    ( type . equals ( DOUBLE )  )     {", "Double   actualDouble    =     (  ( Double )     ( actual )  )  ;", "Double   expectedDouble    =     (  ( Double )     ( expected )  )  ;", "if    ( actualDouble . isNaN (  )  )     {", "assertTrue ( expectedDouble . isNaN (  )  ,     \" expected   double   to   be   NaN \"  )  ;", "} else    {", "assertEquals ( actualDouble ,    expectedDouble ,     0  .  0  0  1  )  ;", "}", "} else", "if    (  !  ( equals ( actual ,    expected )  )  )     {", "assertEquals ( actual ,    expected )  ;", "}", "}", "METHOD_END"], "methodName": ["assertColumnValueEquals"], "fileName": "com.facebook.presto.rcfile.RcFileTester"}, {"methodBody": ["METHOD_START", "{", "try    ( RcFileReader   recordReader    =    RcFileTester . createRcFileReader ( tempFile ,    type ,    format . getVectorEncoding (  )  )  )     {", "RcFileTester . assertIndexOf ( recordReader ,    tempFile . getFile (  )  )  ;", "assertEquals ( recordReader . getMetadata (  )  ,    ImmutableMap . builder (  )  . putAll ( metadata )  . put (  \" hive . io . rcfile . column . number \"  ,     \"  1  \"  )  . build (  )  )  ;", "Iterator <  ?  >    iterator    =    expectedValues . iterator (  )  ;", "int   totalCount    =     0  ;", "for    ( int   batchSize    =    recordReader . advance (  )  ;    batchSize    >  =     0  ;    batchSize    =    Math . toIntExact ( recordReader . advance (  )  )  )     {", "totalCount    +  =    batchSize ;", "if    ( readLastBatchOnly    &  &     ( totalCount    =  =     ( expectedValues . size (  )  )  )  )     {", "assertEquals ( advance ( iterator ,    batchSize )  ,    batchSize )  ;", "} else    {", "Block   block    =    recordReader . readBlock (  0  )  ;", "List < Object >    data    =    new   ArrayList ( block . getPositionCount (  )  )  ;", "for    ( int   position    =     0  ;    position    <     ( block . getPositionCount (  )  )  ;    position +  +  )     {", "data . add ( type . getObjectValue ( SESSION ,    block ,    position )  )  ;", "}", "for    ( int   i    =     0  ;    i    <    batchSize ;    i +  +  )     {", "assertTrue ( iterator . hasNext (  )  )  ;", "Object   expected    =    iterator . next (  )  ;", "Object   actual    =    data . get ( i )  ;", "RcFileTester . assertColumnValueEquals ( type ,    actual ,    expected )  ;", "}", "}", "}", "assertFalse ( iterator . hasNext (  )  )  ;", "assertEquals ( recordReader . getRowsRead (  )  ,    totalCount )  ;", "}", "}", "METHOD_END"], "methodName": ["assertFileContentsNew"], "fileName": "com.facebook.presto.rcfile.RcFileTester"}, {"methodBody": ["METHOD_START", "{", "JobConf   configuration    =    new   JobConf ( new   Configuration ( false )  )  ;", "configuration . set ( READ _ COLUMN _ IDS _ CONF _ STR ,     \"  0  \"  )  ;", "configuration . setBoolean ( READ _ ALL _ COLUMNS ,    false )  ;", "Properties   schema    =    new   Properties (  )  ;", "schema . setProperty ( META _ TABLE _ COLUMNS ,     \" test \"  )  ;", "schema . setProperty ( META _ TABLE _ COLUMN _ TYPES ,     . getJavaObjectInspector ( type )  . getTypeName (  )  )  ;", "@ SuppressWarnings (  \" deprecation \"  )", "Deserializer   deserializer ;", "if    ( format    =  =     (  . Format . BINARY )  )     {", "deserializer    =    new   LazyBinaryColumnarSerDe (  )  ;", "} else    {", "deserializer    =    new   ColumnarSerDe (  )  ;", "}", "deserializer . initialize ( configuration ,    schema )  ;", "configuration . set ( SERIALIZATION _ LIB ,    deserializer . getClass (  )  . getName (  )  )  ;", "InputFormat < K ,    V >    inputFormat    =    new   RCFileInputFormat (  )  ;", "RecordReader < K ,    V >    recordReader    =    inputFormat . getRecordReader ( new   FileSplit ( new   Path ( tempFile . getFile (  )  . getAbsolutePath (  )  )  ,     0  ,    tempFile . getFile (  )  . length (  )  ,     (  ( String [  ]  )     ( null )  )  )  ,    configuration ,    NULL )  ;", "K   key    =    recordReader . createKey (  )  ;", "V   value    =    recordReader . createValue (  )  ;", "StructObjectInspector   rowInspector    =     (  ( StructObjectInspector )     ( deserializer . getObjectInspector (  )  )  )  ;", "StructField   field    =    rowInspector . getStructFieldRef (  \" test \"  )  ;", "Iterator <  ?  >    iterator    =    expectedValues . iterator (  )  ;", "while    ( recordReader . next ( key ,    value )  )     {", "Object   expectedValue    =    iterator . next (  )  ;", "Object   rowData    =    deserializer . deserialize ( value )  ;", "Object   actualValue    =    rowInspector . getStructFieldData ( rowData ,    field )  ;", "actualValue    =     . decodeRecordReaderValue ( type ,    actualValue )  ;", ". assertColumnValueEquals ( type ,    actualValue ,    expectedValue )  ;", "}", "assertFalse ( iterator . hasNext (  )  )  ;", "}", "METHOD_END"], "methodName": ["assertFileContentsOld"], "fileName": "com.facebook.presto.rcfile.RcFileTester"}, {"methodBody": ["METHOD_START", "{", "List < Long >    syncPositionsBruteForce    =    RcFileTester . getSyncPositionsBruteForce ( recordReader ,    file )  ;", "List < Long >    syncPositionsSimple    =    RcFileTester . getSyncPositionsSimple ( recordReader ,    file )  ;", "assertEquals ( syncPositionsBruteForce ,    syncPositionsSimple )  ;", "}", "METHOD_END"], "methodName": ["assertIndexOf"], "fileName": "com.facebook.presto.rcfile.RcFileTester"}, {"methodBody": ["METHOD_START", "{", "List <  ?  >    finalValues    =    Lists . newArrayList ( writeValues )  ;", "Set <  . Format >    formats    =    new   LinkedHashSet <  >  ( this . formats )  ;", "formats . removeAll ( skipFormats )  ;", "for    (  . Format   format    :    formats )     {", "for    (  . Compression   compression    :    compressions )     {", "try    (  . TempFile   tempFile    =    new    . TempFile (  )  )     {", ". writeRcFileColumnOld ( tempFile . getFile (  )  ,    format ,    compression ,    type ,    finalValues . iterator (  )  )  ;", ". assertFileContentsNew ( type ,    tempFile ,    format ,    finalValues ,    false ,    ImmutableMap . of (  )  )  ;", "}", "try    (  . TempFile   tempFile    =    new    . TempFile (  )  )     {", "Map < String ,    String >    metadata    =    ImmutableMap . of ( String . valueOf ( ThreadLocalRandom . current (  )  . nextLong (  )  )  ,    String . valueOf ( ThreadLocalRandom . current (  )  . nextLong (  )  )  )  ;", ". writeRcFileColumnNew ( tempFile . getFile (  )  ,    format ,    compression ,    type ,    finalValues . iterator (  )  ,    metadata )  ;", ". assertFileContentsOld ( type ,    tempFile ,    format ,    finalValues )  ;", "Map < String ,    String >    expectedMetadata    =    ImmutableMap .  < String ,    String > builder (  )  . putAll ( metadata )  . put ( RcFileWriter . PRESTO _ RCFILE _ WRITER _ VERSION _ METADATA _ KEY ,    RcFileWriter . PRESTO _ RCFILE _ WRITER _ VERSION )  . build (  )  ;", ". assertFileContentsNew ( type ,    tempFile ,    format ,    finalValues ,    false ,    expectedMetadata )  ;", "if    ( readLastBatchOnlyEnabled )     {", ". assertFileContentsNew ( type ,    tempFile ,    format ,    finalValues ,    true ,    expectedMetadata )  ;", "}", "}", "}", "}", "}", "METHOD_END"], "methodName": ["assertRoundTrip"], "fileName": "com.facebook.presto.rcfile.RcFileTester"}, {"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . spi . type . ArrayType ( type )  ;", "}", "METHOD_END"], "methodName": ["createListType"], "fileName": "com.facebook.presto.rcfile.RcFileTester"}, {"methodBody": ["METHOD_START", "{", "return    (  ( MapType )     ( RcFileTester . TYPE _ MANAGER . getParameterizedType ( MAP ,    ImmutableList . of ( TypeSignatureParameter . of ( type . getTypeSignature (  )  )  ,    TypeSignatureParameter . of ( type . getTypeSignature (  )  )  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createMapType"], "fileName": "com.facebook.presto.rcfile.RcFileTester"}, {"methodBody": ["METHOD_START", "{", "RcFileDataSource   rcFileDataSource    =    new   FileRcFileDataSource ( tempFile . getFile (  )  )  ;", "RcFileReader   rcFileReader    =    new   RcFileReader ( rcFileDataSource ,    encoding ,    ImmutableMap . of (  0  ,    type )  ,    new   AircompressorCodecFactory ( new   HadoopCodecFactory (  . class . getClassLoader (  )  )  )  ,     0  ,    tempFile . getFile (  )  . length (  )  ,    new   io . airlift . units . DataSize (  8  ,    Unit . MEGABYTE )  )  ;", "assertEquals ( rcFileReader . getColumnCount (  )  ,     1  )  ;", "return   rcFileReader ;", "}", "METHOD_END"], "methodName": ["createRcFileReader"], "fileName": "com.facebook.presto.rcfile.RcFileTester"}, {"methodBody": ["METHOD_START", "{", "JobConf   jobConf    =    new   JobConf ( false )  ;", "Optional < String >    codecName    =    compression . getCodecName (  )  ;", "codecName . ifPresent (  (    s )     -  >    jobConf . set ( COMPRESS _ CODEC ,    s )  )  ;", "return   new   RCFileOutputFormat (  )  . getHiveRecordWriter ( jobConf ,    new   Path ( outputFile . toURI (  )  )  ,    Text . class ,    codecName . isPresent (  )  ,     . createTableProperties (  \" test \"  ,    columnObjectInspector . getTypeName (  )  )  ,     (  )     -  >     {", "}  )  ;", "}", "METHOD_END"], "methodName": ["createRcFileWriterOld"], "fileName": "com.facebook.presto.rcfile.RcFileTester"}, {"methodBody": ["METHOD_START", "{", "return   RowType . from ( ImmutableList . of ( RowType . field (  \" a \"  ,    type )  ,    RowType . field (  \" b \"  ,    type )  ,    RowType . field (  \" c \"  ,    type )  )  )  ;", "}", "METHOD_END"], "methodName": ["createRowType"], "fileName": "com.facebook.presto.rcfile.RcFileTester"}, {"methodBody": ["METHOD_START", "{", "return   getStandardStructObjectInspector ( ImmutableList . of ( name )  ,    ImmutableList . of ( objectInspector )  )  ;", "}", "METHOD_END"], "methodName": ["createSettableStructObjectInspector"], "fileName": "com.facebook.presto.rcfile.RcFileTester"}, {"methodBody": ["METHOD_START", "{", "Properties   orderTableProperties    =    new   Properties (  )  ;", "orderTableProperties . setProperty (  \" columns \"  ,    name )  ;", "orderTableProperties . setProperty (  \" columns . types \"  ,    type )  ;", "orderTableProperties . setProperty (  \" inputformat \"  ,    RCFileInputFormat . class . getName (  )  )  ;", "return   orderTableProperties ;", "}", "METHOD_END"], "methodName": ["createTableProperties"], "fileName": "com.facebook.presto.rcfile.RcFileTester"}, {"methodBody": ["METHOD_START", "{", "Type   elementType    =    type . getTypeParameters (  )  . get (  0  )  ;", "return   list . stream (  )  . map (  (    element )     -  >     . decodeRecordReaderValue ( elementType ,    element )  )  . collect ( Collectors . toList (  )  )  ;", "}", "METHOD_END"], "methodName": ["decodeRecordReaderList"], "fileName": "com.facebook.presto.rcfile.RcFileTester"}, {"methodBody": ["METHOD_START", "{", "Type   keyType    =    type . getTypeParameters (  )  . get (  0  )  ;", "Type   valueType    =    type . getTypeParameters (  )  . get (  1  )  ;", "Map < Object ,    Object >    newMap    =    new   HashMap <  >  (  )  ;", "for    ( Map . Entry <  ?  ,     ?  >    entry    :    map . entrySet (  )  )     {", "newMap . put (  . decodeRecordReaderValue ( keyType ,    entry . getKey (  )  )  ,     . decodeRecordReaderValue ( valueType ,    entry . getValue (  )  )  )  ;", "}", "return   newMap ;", "}", "METHOD_END"], "methodName": ["decodeRecordReaderMap"], "fileName": "com.facebook.presto.rcfile.RcFileTester"}, {"methodBody": ["METHOD_START", "{", "List < Type >    fieldTypes    =    type . getTypeParameters (  )  ;", "List < Object >    newFields    =    new   ArrayList <  >  ( fields . size (  )  )  ;", "for    ( int   i    =     0  ;    i    <     ( fields . size (  )  )  ;    i +  +  )     {", "Type   fieldType    =    fieldTypes . get ( i )  ;", "Object   field    =    fields . get ( i )  ;", "newFields . add (  . decodeRecordReaderValue ( fieldType ,    field )  )  ;", "}", "return   newFields ;", "}", "METHOD_END"], "methodName": ["decodeRecordReaderStruct"], "fileName": "com.facebook.presto.rcfile.RcFileTester"}, {"methodBody": ["METHOD_START", "{", "if    ( actualValue   instanceof   LazyPrimitive )     {", "actualValue    =     (  ( LazyPrimitive <  ?  ,     ?  >  )     ( actualValue )  )  . getWritableObject (  )  ;", "}", "if    ( actualValue   instanceof   BooleanWritable )     {", "actualValue    =     (  ( BooleanWritable )     ( actualValue )  )  . get (  )  ;", "} else", "if    ( actualValue   instanceof   ByteWritable )     {", "actualValue    =     (  ( ByteWritable )     ( actualValue )  )  . get (  )  ;", "} else", "if    ( actualValue   instanceof   BytesWritable )     {", "actualValue    =    new   spi . type . SqlVarbinary (  (  ( BytesWritable )     ( actualValue )  )  . copyBytes (  )  )  ;", "} else", "if    ( actualValue   instanceof   DateWritable )     {", "actualValue    =    new   spi . type . SqlDate (  (  ( DateWritable )     ( actualValue )  )  . getDays (  )  )  ;", "} else", "if    ( actualValue   instanceof   DoubleWritable )     {", "actualValue    =     (  ( DoubleWritable )     ( actualValue )  )  . get (  )  ;", "} else", "if    ( actualValue   instanceof   FloatWritable )     {", "actualValue    =     (  ( FloatWritable )     ( actualValue )  )  . get (  )  ;", "} else", "if    ( actualValue   instanceof   IntWritable )     {", "actualValue    =     (  ( IntWritable )     ( actualValue )  )  . get (  )  ;", "} else", "if    ( actualValue   instanceof   LongWritable )     {", "actualValue    =     (  ( LongWritable )     ( actualValue )  )  . get (  )  ;", "} else", "if    ( actualValue   instanceof   ShortWritable )     {", "actualValue    =     (  ( ShortWritable )     ( actualValue )  )  . get (  )  ;", "} else", "if    ( actualValue   instanceof   HiveDecimalWritable )     {", "spi . type . DecimalType   decimalType    =     (  ( spi . type . DecimalType )     ( type )  )  ;", "HiveDecimalWritable   writable    =     (  ( HiveDecimalWritable )     ( actualValue )  )  ;", "BigInteger   rescaledValue    =    rescale ( writable . getHiveDecimal (  )  . unscaledValue (  )  ,    writable . getScale (  )  ,    decimalType . getScale (  )  )  ;", "actualValue    =    new   spi . type . SqlDecimal ( rescaledValue ,    decimalType . getPrecision (  )  ,    decimalType . getScale (  )  )  ;", "} else", "if    ( actualValue   instanceof   Text )     {", "actualValue    =    actualValue . toString (  )  ;", "} else", "if    ( actualValue   instanceof   TimestampWritable )     {", "TimestampWritable   timestamp    =     (  ( TimestampWritable )     ( actualValue )  )  ;", "actualValue    =    new   spi . type . SqlTimestamp (  (  (  ( timestamp . getSeconds (  )  )     *     1  0  0  0  )     +     (  ( timestamp . getNanos (  )  )     /     1  0  0  0  0  0  0 L )  )  ,    UTC _ KEY )  ;", "} else", "if    ( actualValue   instanceof   StructObject )     {", "StructObject   structObject    =     (  ( StructObject )     ( actualValue )  )  ;", "actualValue    =    RcFileTester . decodeRecordReaderStruct ( type ,    structObject . getFieldsAsList (  )  )  ;", "} else", "if    ( actualValue   instanceof   LazyBinaryArray )     {", "actualValue    =    RcFileTester . decodeRecordReaderList ( type ,     (  ( LazyBinaryArray )     ( actualValue )  )  . getList (  )  )  ;", "} else", "if    ( actualValue   instanceof   LazyBinaryMap )     {", "actualValue    =    RcFileTester . decodeRecordReaderMap ( type ,     (  ( LazyBinaryMap )     ( actualValue )  )  . getMap (  )  )  ;", "} else", "if    ( actualValue   instanceof   LazyArray )     {", "actualValue    =    RcFileTester . decodeRecordReaderList ( type ,     (  ( LazyArray )     ( actualValue )  )  . getList (  )  )  ;", "} else", "if    ( actualValue   instanceof   LazyMap )     {", "actualValue    =    RcFileTester . decodeRecordReaderMap ( type ,     (  ( LazyMap )     ( actualValue )  )  . getMap (  )  )  ;", "} else", "if    ( actualValue   instanceof   List )     {", "actualValue    =    RcFileTester . decodeRecordReaderList ( type ,     (  ( List <  ?  >  )     ( actualValue )  )  )  ;", "}", "return   actualValue ;", "}", "METHOD_END"], "methodName": ["decodeRecordReaderValue"], "fileName": "com.facebook.presto.rcfile.RcFileTester"}, {"methodBody": ["METHOD_START", "{", "RcFileTester   rcFileTester    =    new   RcFileTester (  )  ;", "rcFileTester . structTestsEnabled    =    true ;", "rcFileTester . mapTestsEnabled    =    true ;", "rcFileTester . listTestsEnabled    =    true ;", "rcFileTester . complexStructuralTestsEnabled    =    true ;", "rcFileTester . readLastBatchOnlyEnabled    =    true ;", "rcFileTester . formats    =    ImmutableSet . copyOf ( RcFileTester . Format . values (  )  )  ;", "rcFileTester . compressions    =    ImmutableSet . of ( RcFileTester . Compression . NONE ,    RcFileTester . Compression . LZ 4  ,    RcFileTester . Compression . ZLIB ,    RcFileTester . Compression . BZIP 2  )  ;", "return   rcFileTester ;", "}", "METHOD_END"], "methodName": ["fullTestRcFileReader"], "fileName": "com.facebook.presto.rcfile.RcFileTester"}, {"methodBody": ["METHOD_START", "{", "if    ( type . equals ( BOOLEAN )  )     {", "return   javaBooleanObjectInspector ;", "} else", "if    ( type . equals ( BIGINT )  )     {", "return   javaLongObjectInspector ;", "} else", "if    ( type . equals ( INTEGER )  )     {", "return   javaIntObjectInspector ;", "} else", "if    ( type . equals ( SMALLINT )  )     {", "return   javaShortObjectInspector ;", "} else", "if    ( type . equals ( TINYINT )  )     {", "return   javaByteObjectInspector ;", "} else", "if    ( type . equals ( REAL )  )     {", "return   javaFloatObjectInspector ;", "} else", "if    ( type . equals ( DOUBLE )  )     {", "return   javaDoubleObjectInspector ;", "} else", "if    ( type   instanceof   spi . type . VarcharType )     {", "return   javaStringObjectInspector ;", "} else", "if    ( type . equals ( VARBINARY )  )     {", "return   javaByteArrayObjectInspector ;", "} else", "if    ( type . equals ( DATE )  )     {", "return   javaDateObjectInspector ;", "} else", "if    ( type . equals ( TIMESTAMP )  )     {", "return   javaTimestampObjectInspector ;", "} else", "if    ( type   instanceof   spi . type . DecimalType )     {", "spi . type . DecimalType   decimalType    =     (  ( spi . type . DecimalType )     ( type )  )  ;", "return   getPrimitiveJavaObjectInspector ( new   DecimalTypeInfo ( decimalType . getPrecision (  )  ,    decimalType . getScale (  )  )  )  ;", "} else", "if    ( type . getTypeSignature (  )  . getBase (  )  . equals ( ARRAY )  )     {", "return   getStandardListObjectInspector ( RcFileTester . getJavaObjectInspector ( type . getTypeParameters (  )  . get (  0  )  )  )  ;", "} else", "if    ( type . getTypeSignature (  )  . getBase (  )  . equals ( MAP )  )     {", "ObjectInspector   keyObjectInspector    =    RcFileTester . getJavaObjectInspector ( type . getTypeParameters (  )  . get (  0  )  )  ;", "ObjectInspector   valueObjectInspector    =    RcFileTester . getJavaObjectInspector ( type . getTypeParameters (  )  . get (  1  )  )  ;", "return   getStandardMapObjectInspector ( keyObjectInspector ,    valueObjectInspector )  ;", "} else", "if    ( type . getTypeSignature (  )  . getBase (  )  . equals ( ROW )  )     {", "return   getStandardStructObjectInspector ( type . getTypeSignature (  )  . getParameters (  )  . stream (  )  . map (  (    parameter )     -  >    parameter . getNamedTypeSignature (  )  . getName (  )  . get (  )  )  . collect ( toList (  )  )  ,    type . getTypeParameters (  )  . stream (  )  . map ( RcFileTester :  : getJavaObjectInspector )  . collect ( toList (  )  )  )  ;", "}", "throw   new   IllegalArgumentException (  (  \" unsupported   type :     \"     +    type )  )  ;", "}", "METHOD_END"], "methodName": ["getJavaObjectInspector"], "fileName": "com.facebook.presto.rcfile.RcFileTester"}, {"methodBody": ["METHOD_START", "{", "Slice   slice    =    Slices . allocate (  (  ( int )     ( file . length (  )  )  )  )  ;", "try    ( InputStream   in    =    new   FileInputStream ( file )  )     {", "slice . setBytes (  0  ,    in ,    slice . length (  )  )  ;", "}    catch    ( IOException   e )     {", "throw   Throwables . propagate ( e )  ;", "}", "List < Long >    syncPositionsBruteForce    =    new   ArrayList <  >  (  )  ;", "Slice   sync    =    Slices . allocate (  (  (  ( SizeOf . SIZE _ OF _ INT )     +     ( SizeOf . SIZE _ OF _ LONG )  )     +     ( SizeOf . SIZE _ OF _ LONG )  )  )  ;", "sync . setInt (  0  ,     (  -  1  )  )  ;", "sync . setBytes ( SizeOf . SIZE _ OF _ INT ,    recordReader . getSync (  )  )  ;", "long   syncPosition    =     0  ;", "while    ( syncPosition    >  =     0  )     {", "syncPosition    =    slice . indexOf ( sync ,     (  ( int )     ( syncPosition )  )  )  ;", "if    ( syncPosition    >     0  )     {", "syncPositionsBruteForce . add ( syncPosition )  ;", "syncPosition +  +  ;", "}", "}", "return   syncPositionsBruteForce ;", "}", "METHOD_END"], "methodName": ["getSyncPositionsBruteForce"], "fileName": "com.facebook.presto.rcfile.RcFileTester"}, {"methodBody": ["METHOD_START", "{", "List < Long >    syncPositions    =    new   ArrayList <  >  (  )  ;", "Slice   sync    =    recordReader . getSync (  )  ;", "long   syncFirst    =    sync . getLong (  0  )  ;", "long   syncSecond    =    sync . getLong (  8  )  ;", "long   syncPosition    =     0  ;", "try    ( DataSource   dataSource    =    new   FileDataSource ( file )  )     {", "while    ( syncPosition    >  =     0  )     {", "syncPosition    =    DecoderUtils . findFirstSyncPosition ( dataSource ,    syncPosition ,     (  ( file . length (  )  )     -    syncPosition )  ,    syncFirst ,    syncSecond )  ;", "if    ( syncPosition    >     0  )     {", "assertEquals ( DecoderUtils . findFirstSyncPosition ( dataSource ,    syncPosition ,     1  ,    syncFirst ,    syncSecond )  ,    syncPosition )  ;", "assertEquals ( DecoderUtils . findFirstSyncPosition ( dataSource ,    syncPosition ,     2  ,    syncFirst ,    syncSecond )  ,    syncPosition )  ;", "assertEquals ( DecoderUtils . findFirstSyncPosition ( dataSource ,    syncPosition ,     1  0  ,    syncFirst ,    syncSecond )  ,    syncPosition )  ;", "assertEquals ( DecoderUtils . findFirstSyncPosition ( dataSource ,     ( syncPosition    -     1  )  ,     1  ,    syncFirst ,    syncSecond )  ,     (  -  1  )  )  ;", "assertEquals ( DecoderUtils . findFirstSyncPosition ( dataSource ,     ( syncPosition    -     2  )  ,     2  ,    syncFirst ,    syncSecond )  ,     (  -  1  )  )  ;", "assertEquals ( DecoderUtils . findFirstSyncPosition ( dataSource ,     ( syncPosition    +     1  )  ,     1  ,    syncFirst ,    syncSecond )  ,     (  -  1  )  )  ;", "syncPositions . add ( syncPosition )  ;", "syncPosition +  +  ;", "}", "}", "}", "return   syncPositions ;", "}", "METHOD_END"], "methodName": ["getSyncPositionsSimple"], "fileName": "com.facebook.presto.rcfile.RcFileTester"}, {"methodBody": ["METHOD_START", "{", "return    (  )     -  >    new   com . google . common . collect . AbstractIterator < T >  (  )     {", "private   final   Iterator < T >    delegate    =    iterable . iterator (  )  ;", "private   int   position ;", "@ Override", "protected   T   computeNext (  )     {", "( position )  +  +  ;", "if    (  ( position )     >    n )     {", "position    =     0  ;", "return   null ;", "}", "if    (  !  ( delegate . hasNext (  )  )  )     {", "return   endOfData (  )  ;", "}", "return   delegate . next (  )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["insertNullEvery"], "fileName": "com.facebook.presto.rcfile.RcFileTester"}, {"methodBody": ["METHOD_START", "{", "if    ( value    =  =    null )     {", "return   null ;", "}", "if    ( type . equals ( BOOLEAN )  )     {", "return   value ;", "} else", "if    ( type . equals ( TINYINT )  )     {", "return    (  ( Number )     ( value )  )  . byteValue (  )  ;", "} else", "if    ( type . equals ( SMALLINT )  )     {", "return    (  ( Number )     ( value )  )  . shortValue (  )  ;", "} else", "if    ( type . equals ( INTEGER )  )     {", "return    (  ( Number )     ( value )  )  . intValue (  )  ;", "} else", "if    ( type . equals ( BIGINT )  )     {", "return    (  ( Number )     ( value )  )  . longValue (  )  ;", "} else", "if    ( type . equals ( REAL )  )     {", "return    (  ( Number )     ( value )  )  . floatValue (  )  ;", "} else", "if    ( type . equals ( DOUBLE )  )     {", "return    (  ( Number )     ( value )  )  . doubleValue (  )  ;", "} else", "if    ( type   instanceof   spi . type . VarcharType )     {", "return   value ;", "} else", "if    ( type . equals ( VARBINARY )  )     {", "return    (  ( spi . type . SqlVarbinary )     ( value )  )  . getBytes (  )  ;", "} else", "if    ( type . equals ( DATE )  )     {", "int   days    =     (  ( spi . type . SqlDate )     ( value )  )  . getDays (  )  ;", "LocalDate   localDate    =    ofEpochDay ( days )  ;", "ZonedDateTime   zonedDateTime    =    localDate . atStartOfDay ( systemDefault (  )  )  ;", "long   millis    =     ( zonedDateTime . toEpochSecond (  )  )     *     1  0  0  0  ;", "Date   date    =    new   Date (  0  )  ;", "date . setTime ( millis )  ;", "return   date ;", "} else", "if    ( type . equals ( TIMESTAMP )  )     {", "long   millisUtc    =     (  ( int )     (  (  ( spi . type . SqlTimestamp )     ( value )  )  . getMillisUtc (  )  )  )  ;", "return   new   Timestamp ( millisUtc )  ;", "} else", "if    ( type   instanceof   spi . type . DecimalType )     {", "return   create (  (  ( spi . type . SqlDecimal )     ( value )  )  . toBigDecimal (  )  )  ;", "} else", "if    ( type . getTypeSignature (  )  . getBase (  )  . equals ( ARRAY )  )     {", "Type   elementType    =    type . getTypeParameters (  )  . get (  0  )  ;", "return    (  ( List <  ?  >  )     ( value )  )  . stream (  )  . map (  (    element )     -  >    RcFileTester . preprocessWriteValueOld ( elementType ,    element )  )  . collect ( toList (  )  )  ;", "} else", "if    ( type . getTypeSignature (  )  . getBase (  )  . equals ( MAP )  )     {", "Type   keyType    =    type . getTypeParameters (  )  . get (  0  )  ;", "Type   valueType    =    type . getTypeParameters (  )  . get (  1  )  ;", "Map < Object ,    Object >    newMap    =    new   HashMap <  >  (  )  ;", "for    ( Entry <  ?  ,     ?  >    entry    :     (  ( Map <  ?  ,     ?  >  )     ( value )  )  . entrySet (  )  )     {", "newMap . put ( RcFileTester . preprocessWriteValueOld ( keyType ,    entry . getKey (  )  )  ,    RcFileTester . preprocessWriteValueOld ( valueType ,    entry . getValue (  )  )  )  ;", "}", "return   newMap ;", "} else", "if    ( type . getTypeSignature (  )  . getBase (  )  . equals ( ROW )  )     {", "List <  ?  >    fieldValues    =     (  ( List <  ?  >  )     ( value )  )  ;", "List < Type >    fieldTypes    =    type . getTypeParameters (  )  ;", "List < Object >    newStruct    =    new   ArrayList <  >  (  )  ;", "for    ( int   fieldId    =     0  ;    fieldId    <     ( fieldValues . size (  )  )  ;    fieldId +  +  )     {", "newStruct . add ( RcFileTester . preprocessWriteValueOld ( fieldTypes . get ( fieldId )  ,    fieldValues . get ( fieldId )  )  )  ;", "}", "return   newStruct ;", "}", "throw   new   IllegalArgumentException (  (  \" unsupported   type :     \"     +    type )  )  ;", "}", "METHOD_END"], "methodName": ["preprocessWriteValueOld"], "fileName": "com.facebook.presto.rcfile.RcFileTester"}, {"methodBody": ["METHOD_START", "{", "RcFileTester   rcFileTester    =    new   RcFileTester (  )  ;", "rcFileTester . structTestsEnabled    =    true ;", "rcFileTester . mapTestsEnabled    =    true ;", "rcFileTester . listTestsEnabled    =    true ;", "rcFileTester . complexStructuralTestsEnabled    =    false ;", "rcFileTester . readLastBatchOnlyEnabled    =    false ;", "rcFileTester . formats    =    ImmutableSet . copyOf ( RcFileTester . Format . values (  )  )  ;", "rcFileTester . compressions    =    ImmutableSet . of ( RcFileTester . Compression . SNAPPY )  ;", "return   rcFileTester ;", "}", "METHOD_END"], "methodName": ["quickTestRcFileReader"], "fileName": "com.facebook.presto.rcfile.RcFileTester"}, {"methodBody": ["METHOD_START", "{", "testRoundTripType ( RcFileTester . createListType ( type )  ,    transform ( RcFileTester . insertNullEvery (  5  ,    writeValues )  ,    RcFileTester :  : toHiveList )  ,    skipFormats )  ;", "}", "METHOD_END"], "methodName": ["testListRoundTrip"], "fileName": "com.facebook.presto.rcfile.RcFileTester"}, {"methodBody": ["METHOD_START", "{", "Object   nullKeyWrite    =    Iterables . getFirst ( writeValues ,    null )  ;", "testRoundTripType (  . createMapType ( type )  ,    transform (  . insertNullEvery (  5  ,    writeValues )  ,     (    value )     -  >    toHiveMap ( nullKeyWrite ,    value )  )  ,    skipFormats )  ;", "}", "METHOD_END"], "methodName": ["testMapRoundTrip"], "fileName": "com.facebook.presto.rcfile.RcFileTester"}, {"methodBody": ["METHOD_START", "{", "ImmutableSet < RcFileTester . Format >    skipFormatsSet    =    ImmutableSet . copyOf ( skipFormats )  ;", "testRoundTripType ( type ,    writeValues ,    skipFormatsSet )  ;", "assertRoundTrip ( type ,    transform ( writeValues ,    constant ( null )  )  ,    skipFormatsSet )  ;", "if    ( structTestsEnabled )     {", "testStructRoundTrip ( type ,    writeValues ,    skipFormatsSet )  ;", "}", "if    ( complexStructuralTestsEnabled )     {", "Iterable < Object >    simpleStructs    =    transform ( RcFileTester . insertNullEvery (  5  ,    writeValues )  ,    RcFileTester :  : toHiveStruct )  ;", "testRoundTripType ( RowType . from ( ImmutableList . of ( RowType . field (  \" field \"  ,    RcFileTester . createRowType ( type )  )  )  )  ,    transform ( simpleStructs ,    Collections :  : singletonList )  ,    skipFormatsSet )  ;", "}", "if    ( mapTestsEnabled )     {", "testMapRoundTrip ( type ,    writeValues ,    skipFormatsSet )  ;", "}", "if    ( listTestsEnabled )     {", "testListRoundTrip ( type ,    writeValues ,    skipFormatsSet )  ;", "}", "if    ( complexStructuralTestsEnabled )     {", "testListRoundTrip ( RcFileTester . createListType ( type )  ,    transform ( writeValues ,    RcFileTester :  : toHiveList )  ,    skipFormatsSet )  ;", "}", "}", "METHOD_END"], "methodName": ["testRoundTrip"], "fileName": "com.facebook.presto.rcfile.RcFileTester"}, {"methodBody": ["METHOD_START", "{", "assertRoundTrip ( type ,    RcFileTester . insertNullEvery (  5  ,    writeValues )  ,    skipFormats )  ;", "}", "METHOD_END"], "methodName": ["testRoundTripType"], "fileName": "com.facebook.presto.rcfile.RcFileTester"}, {"methodBody": ["METHOD_START", "{", "testRoundTripType ( RcFileTester . createRowType ( type )  ,    transform ( RcFileTester . insertNullEvery (  5  ,    writeValues )  ,    RcFileTester :  : toHiveStruct )  ,    skipFormats )  ;", "}", "METHOD_END"], "methodName": ["testStructRoundTrip"], "fileName": "com.facebook.presto.rcfile.RcFileTester"}, {"methodBody": ["METHOD_START", "{", "ArrayList < Object >    list    =    new   ArrayList <  >  (  4  )  ;", "for    ( int   i    =     0  ;    i    <     4  ;    i +  +  )     {", "list . add ( input )  ;", "}", "return   list ;", "}", "METHOD_END"], "methodName": ["toHiveList"], "fileName": "com.facebook.presto.rcfile.RcFileTester"}, {"methodBody": ["METHOD_START", "{", "M < Object ,    Object >    m    =    new   HashM <  >  (  )  ;", "if    ( iut    =  =    null )     {", "mut ( nullKeyValue ,    null )  ;", "} else    {", "mut ( iut ,    iut )  ;", "}", "return   m ;", "}", "METHOD_END"], "methodName": ["toHiveMap"], "fileName": "com.facebook.presto.rcfile.RcFileTester"}, {"methodBody": ["METHOD_START", "{", "List < Object >    data    =    new   ArrayList <  >  (  )  ;", "data . add ( input )  ;", "data . add ( input )  ;", "data . add ( input )  ;", "return   data ;", "}", "METHOD_END"], "methodName": ["toHiveStruct"], "fileName": "com.facebook.presto.rcfile.RcFileTester"}, {"methodBody": ["METHOD_START", "{", "OutputStreamSliceOutput   output    =    new   OutputStreamSliceOutput ( new   FileOutputStream ( outputFile )  )  ;", "AircompressorCodecFactory   codecFactory    =    new   AircompressorCodecFactory ( new   HadoopCodecFactory ( RcFileTester . class . getClassLoader (  )  )  )  ;", "RcFileWriter   writer    =    new   RcFileWriter ( output ,    ImmutableList . of ( type )  ,    format . getVectorEncoding (  )  ,    compression . getCodecName (  )  ,    codecFactory ,    metadata ,    new   io . airlift . units . DataSize (  1  0  0  ,    Unit . KILOBYTE )  ,    new   io . airlift . units . DataSize (  2  0  0  ,    Unit . KILOBYTE )  ,    true )  ;", "BlockBuilder   blockBuilder    =    type . createBlockBuilder ( null ,     1  0  2  4  )  ;", "while    ( values . hasNext (  )  )     {", "Object   value    =    values . next (  )  ;", "RcFileTester . writeValue ( type ,    blockBuilder ,    value )  ;", "}", "writer . write ( new   spi . Page ( blockBuilder . build (  )  )  )  ;", "writer . close (  )  ;", "writer . validate ( new   FileRcFileDataSource ( outputFile )  )  ;", "return   new   io . airlift . units . DataSize ( output . size (  )  ,    Unit . BYTE )  ;", "}", "METHOD_END"], "methodName": ["writeRcFileColumnNew"], "fileName": "com.facebook.presto.rcfile.RcFileTester"}, {"methodBody": ["METHOD_START", "{", "ObjectInspector   columnObjectInspector    =    RcFileTester . getJavaObjectInspector ( type )  ;", "RecordWriter   recordWriter    =    RcFileTester . createRcFileWriterOld ( outputFile ,    compression ,    columnObjectInspector )  ;", "SettableStructObjectInspector   objectInspector    =    RcFileTester . createSettableStructObjectInspector (  \" test \"  ,    columnObjectInspector )  ;", "Object   row    =    objectInspector . create (  )  ;", "List < StructField >    fields    =    ImmutableList . copyOf ( objectInspector . getAllStructFieldRefs (  )  )  ;", "@ SuppressWarnings (  \" deprecation \"  )", "Serializer   serializer    =    format . createSerializer (  )  ;", "Properties   tableProperties    =    new   Properties (  )  ;", "tableProperties . setProperty (  \" columns \"  ,     \" test \"  )  ;", "tableProperties . setProperty (  \" columns . types \"  ,    objectInspector . getTypeName (  )  )  ;", "serializer . initialize ( new   JobConf ( false )  ,    tableProperties )  ;", "while    ( values . hasNext (  )  )     {", "Object   value    =    values . next (  )  ;", "value    =    RcFileTester . preprocessWriteValueOld ( type ,    value )  ;", "objectInspector . setStructFieldData ( row ,    fields . get (  0  )  ,    value )  ;", "Writable   record    =    serializer . serialize ( row ,    objectInspector )  ;", "recordWriter . write ( record )  ;", "}", "recordWriter . close ( false )  ;", "return   new   io . airlift . units . DataSize ( outputFile . length (  )  ,    Unit . BYTE )  . convertToMostSuccinctDataSize (  )  ;", "}", "METHOD_END"], "methodName": ["writeRcFileColumnOld"], "fileName": "com.facebook.presto.rcfile.RcFileTester"}, {"methodBody": ["METHOD_START", "{", "if    ( value    =  =    null )     {", "blockBuilder . appendNull (  )  ;", "} else    {", "if    ( BOOLEAN . equals ( type )  )     {", "type . writeBoolean ( blockBuilder ,     (  ( Boolean )     ( value )  )  )  ;", "} else", "if    ( TINYINT . equals ( type )  )     {", "type . writeLong ( blockBuilder ,     (  ( Number )     ( value )  )  . longValue (  )  )  ;", "} else", "if    ( SMALLINT . equals ( type )  )     {", "type . writeLong ( blockBuilder ,     (  ( Number )     ( value )  )  . longValue (  )  )  ;", "} else", "if    ( INTEGER . equals ( type )  )     {", "type . writeLong ( blockBuilder ,     (  ( Number )     ( value )  )  . longValue (  )  )  ;", "} else", "if    ( BIGINT . equals ( type )  )     {", "type . writeLong ( blockBuilder ,     (  ( Number )     ( value )  )  . longValue (  )  )  ;", "} else", "if    ( spi . type . Decimals . isShortDecimal ( type )  )     {", "type . writeLong ( blockBuilder ,     (  ( spi . type . SqlDecimal )     ( value )  )  . toBigDecimal (  )  . unscaledValue (  )  . longValue (  )  )  ;", "} else", "if    ( spi . type . Decimals . isLongDecimal ( type )  )     {", "type . writeSlice ( blockBuilder ,    spi . type . Decimals . encodeUnscaledValue (  (  ( spi . type . SqlDecimal )     ( value )  )  . toBigDecimal (  )  . unscaledValue (  )  )  )  ;", "} else", "if    ( REAL . equals ( type )  )     {", "type . writeLong ( blockBuilder ,    Float . floatToIntBits (  (  ( Float )     ( value )  )  )  )  ;", "} else", "if    ( DOUBLE . equals ( type )  )     {", "type . writeDouble ( blockBuilder ,     (  ( Number )     ( value )  )  . doubleValue (  )  )  ;", "} else", "if    ( VARCHAR . equals ( type )  )     {", "type . writeSlice ( blockBuilder ,    io . airlift . slice . Slices . utf 8 Slice (  (  ( String )     ( value )  )  )  )  ;", "} else", "if    ( VARBINARY . equals ( type )  )     {", "type . writeSlice ( blockBuilder ,    io . airlift . slice . Slices . wrappedBuffer (  (  ( spi . type . SqlVarbinary )     ( value )  )  . getBytes (  )  )  )  ;", "} else", "if    ( DATE . equals ( type )  )     {", "long   days    =     (  ( spi . type . SqlDate )     ( value )  )  . getDays (  )  ;", "type . writeLong ( blockBuilder ,    days )  ;", "} else", "if    ( TIMESTAMP . equals ( type )  )     {", "long   millis    =     (  ( spi . type . SqlTimestamp )     ( value )  )  . getMillisUtc (  )  ;", "type . writeLong ( blockBuilder ,    millis )  ;", "} else    {", "String   baseType    =    type . getTypeSignature (  )  . getBase (  )  ;", "if    ( ARRAY . equals ( baseType )  )     {", "List <  ?  >    array    =     (  ( List <  ?  >  )     ( value )  )  ;", "Type   elementType    =    type . getTypeParameters (  )  . get (  0  )  ;", "BlockBuilder   arrayBlockBuilder    =    blockBuilder . beginBlockEntry (  )  ;", "for    ( Object   elementValue    :    array )     {", "RcFileTester . writeValue ( elementType ,    arrayBlockBuilder ,    elementValue )  ;", "}", "blockBuilder . closeEntry (  )  ;", "} else", "if    ( MAP . equals ( baseType )  )     {", "Map <  ?  ,     ?  >    map    =     (  ( Map <  ?  ,     ?  >  )     ( value )  )  ;", "Type   keyType    =    type . getTypeParameters (  )  . get (  0  )  ;", "Type   valueType    =    type . getTypeParameters (  )  . get (  1  )  ;", "BlockBuilder   mapBlockBuilder    =    blockBuilder . beginBlockEntry (  )  ;", "for    ( Entry <  ?  ,     ?  >    entry    :    map . entrySet (  )  )     {", "RcFileTester . writeValue ( keyType ,    mapBlockBuilder ,    entry . getKey (  )  )  ;", "RcFileTester . writeValue ( valueType ,    mapBlockBuilder ,    entry . getValue (  )  )  ;", "}", "blockBuilder . closeEntry (  )  ;", "} else", "if    ( ROW . equals ( baseType )  )     {", "List <  ?  >    array    =     (  ( List <  ?  >  )     ( value )  )  ;", "List < Type >    fieldTypes    =    type . getTypeParameters (  )  ;", "BlockBuilder   rowBlockBuilder    =    blockBuilder . beginBlockEntry (  )  ;", "for    ( int   fieldId    =     0  ;    fieldId    <     ( fieldTypes . size (  )  )  ;    fieldId +  +  )     {", "Type   fieldType    =    fieldTypes . get ( fieldId )  ;", "RcFileTester . writeValue ( fieldType ,    rowBlockBuilder ,    array . get ( fieldId )  )  ;", "}", "blockBuilder . closeEntry (  )  ;", "} else    {", "throw   new   IllegalArgumentException (  (  \" Unsupported   type    \"     +    type )  )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["writeValue"], "fileName": "com.facebook.presto.rcfile.RcFileTester"}, {"methodBody": ["METHOD_START", "{", "return   checksum ;", "}", "METHOD_END"], "methodName": ["getChecksum"], "fileName": "com.facebook.presto.rcfile.RcFileWriteValidation"}, {"methodBody": ["METHOD_START", "{", "return   codecClassName ;", "}", "METHOD_END"], "methodName": ["getCodecClassName"], "fileName": "com.facebook.presto.rcfile.RcFileWriteValidation"}, {"methodBody": ["METHOD_START", "{", "return   metadata ;", "}", "METHOD_END"], "methodName": ["getMetadata"], "fileName": "com.facebook.presto.rcfile.RcFileWriteValidation"}, {"methodBody": ["METHOD_START", "{", "return   syncFirst ;", "}", "METHOD_END"], "methodName": ["getSyncFirst"], "fileName": "com.facebook.presto.rcfile.RcFileWriteValidation"}, {"methodBody": ["METHOD_START", "{", "return   syncSecond ;", "}", "METHOD_END"], "methodName": ["getSyncSecond"], "fileName": "com.facebook.presto.rcfile.RcFileWriteValidation"}, {"methodBody": ["METHOD_START", "{", "return   version ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "com.facebook.presto.rcfile.RcFileWriteValidation"}, {"methodBody": ["METHOD_START", "{", "bufferedRows    +  =    page . getPositionCount (  )  ;", "bufferedSize    =     0  ;", "for    ( int   i    =     0  ;    i    <     ( page . getChannelCount (  )  )  ;    i +  +  )     {", "Block   block    =    page . getBlock ( i )  ;", "columnEncoders [ i ]  . wBlock ( block )  ;", "bufferedSize    +  =    columnEncoders [ i ]  . getBufferedSize (  )  ;", "}", "recordValidation (  (    validation )     -  >    validation . addPage ( page )  )  ;", "if    (  ( bufferedSize )     >  =     ( targetMinRowGroupSize )  )     {", "wRowGroup (  )  ;", "}", "}", "METHOD_END"], "methodName": ["bufferPage"], "fileName": "com.facebook.presto.rcfile.RcFileWriter"}, {"methodBody": ["METHOD_START", "{", "long   retainedSize    =     0  ;", "retainedSize    +  =    output . getRetainedSize (  )  ;", "retainedSize    +  =    keySectionOutput . getRetainedSize (  )  ;", "for    (  . ColumnEncoder   columnEncoder    :    columnEncoders )     {", "retainedSize    +  =    columnEncoder . getRetainedSizeInBytes (  )  ;", "}", "return   retainedSize ;", "}", "METHOD_END"], "methodName": ["getRetainedSizeInBytes"], "fileName": "com.facebook.presto.rcfile.RcFileWriter"}, {"methodBody": ["METHOD_START", "{", "if    (  ( validationBuilder )     !  =    null )     {", "task . accept ( validationBuilder )  ;", "}", "}", "METHOD_END"], "methodName": ["recordValidation"], "fileName": "com.facebook.presto.rcfile.RcFileWriter"}, {"methodBody": ["METHOD_START", "{", "checkState (  (  ( validationBuilder )     !  =    null )  ,     \" validation   is   not   enabled \"  )  ;", "Reader . validateFile ( validationBuilder . build (  )  ,    input ,    encoding ,    types ,    codecFactory )  ;", "}", "METHOD_END"], "methodName": ["validate"], "fileName": "com.facebook.presto.rcfile.RcFileWriter"}, {"methodBody": ["METHOD_START", "{", "if    (  ( page . getPositionCount (  )  )     =  =     0  )     {", "return ;", "}", "List < Page >    pages    =    PageSplitUtil . splitPage ( page ,    targetMaxRowGroupSize )  ;", "for    ( Page   splitPage    :    pages )     {", "bufferPage ( splitPage )  ;", "}", "}", "METHOD_END"], "methodName": ["write"], "fileName": "com.facebook.presto.rcfile.RcFileWriter"}, {"methodBody": ["METHOD_START", "{", "RcFileDecoderUtils . writeLengthPrefixedString ( output ,    Slices . utf 8 Slice ( key )  )  ;", "RcFileDecoderUtils . writeLengthPrefixedString ( output ,    Slices . utf 8 Slice ( value )  )  ;", "recordValidation (  (    validation )     -  >    validation . addMetadataProperty ( key ,    value )  )  ;", "}", "METHOD_END"], "methodName": ["writeMetadataProperty"], "fileName": "com.facebook.presto.rcfile.RcFileWriter"}, {"methodBody": ["METHOD_START", "{", "if    (  ( bufferedRows )     =  =     0  )     {", "return ;", "}", "if    (  ( totalRowCount )     !  =     0  )     {", "output . writeInt (  (  -  1  )  )  ;", "output . writeLong ( syncFirst )  ;", "output . writeLong ( syncSecond )  ;", "}", "for    (  . ColumnEncoder   columnEncoder    :    columnEncoders )     {", "columnEncoder . closeColumn (  )  ;", "}", "int   valueLength    =     0  ;", "keySectionOutput    =    keySectionOutput . createRecycledCompressedSliceOutput (  )  ;", "try    {", "RcFileDecoderUtils . writeVInt ( keySectionOutput ,    bufferedRows )  ;", "recordValidation (  (    validation )     -  >    validation . addRowGroup ( bufferedRows )  )  ;", "for    (  . ColumnEncoder   columnEncoder    :    columnEncoders )     {", "valueLength    +  =    columnEncoder . getCompressedSize (  )  ;", "RcFileDecoderUtils . writeVInt ( keySectionOutput ,    columnEncoder . getCompressedSize (  )  )  ;", "RcFileDecoderUtils . writeVInt ( keySectionOutput ,    columnEncoder . getUncompressedSize (  )  )  ;", "Slice   lengthData    =    columnEncoder . getLengthData (  )  ;", "RcFileDecoderUtils . writeVInt ( keySectionOutput ,    lengthData . length (  )  )  ;", "keySectionOutput . writeBytes ( lengthData )  ;", "}", "}    finally    {", "keySectionOutput . close (  )  ;", "}", "output . writeInt ( Integer . reverseBytes (  (  ( keySectionOutput . size (  )  )     +    valueLength )  )  )  ;", "output . writeInt ( Integer . reverseBytes ( keySectionOutput . size (  )  )  )  ;", "output . writeInt ( Integer . reverseBytes ( keySectionOutput . getCompressedSize (  )  )  )  ;", "for    ( Slice   slice    :    keySectionOutput . getCompressedSlices (  )  )     {", "output . writeBytes ( slice )  ;", "}", "for    (  . ColumnEncoder   columnEncoder    :    columnEncoders )     {", "List < Slice >    slices    =    columnEncoder . getCompressedData (  )  ;", "for    ( Slice   slice    :    slices )     {", "output . writeBytes ( slice )  ;", "}", "columnEncoder . reset (  )  ;", "}", "totalRowCount    +  =    bufferedRows ;", "bufferedSize    =     0  ;", "bufferedRows    =     0  ;", "}", "METHOD_END"], "methodName": ["writeRowGroup"], "fileName": "com.facebook.presto.rcfile.RcFileWriter"}, {"methodBody": ["METHOD_START", "{", "int   length    =     6  5  5  3  6  ;", "byte [  ]    inputArray    =    new   byte [ length ]  ;", "for    ( int   i    =     0  ;    i    <    length ;    i +  +  )     {", "inputArray [ i ]     =     (  ( byte )     ( i    %     1  2  8  )  )  ;", "}", "int [  ]    offsets    =    new   int [  ]  {     0  ,     1  0  0  ,     5  4  5  ,     1  0  2  4  ,     2  0  4  9  ,     2  0  5  0  ,     2  0  5  1  ,     2  1  5  1  ,     1  0  4  8  0  ,     2  0  0  4  2  ,     2  0  1  0  0  ,     4  0  0  0  1  ,     6  5  5  3  6     }  ;", ". MockOutputStream   byteOutputStream    =    new    . MockOutputStream ( length )  ;", "BufferedOutputStreamSliceOutput   output    =    new   BufferedOutputStreamSliceOutput ( byteOutputStream )  ;", "for    ( int   i    =     0  ;    i    <     (  ( offsets . length )     -     1  )  ;    i +  +  )     {", "output . writeBytes ( inputArray ,    offsets [ i ]  ,     (  ( offsets [  ( i    +     1  )  ]  )     -     ( offsets [ i ]  )  )  )  ;", "}", "output . flush (  )  ;", "assertEquals ( byteOutputStream . toByteArray (  )  ,    inputArray )  ;", "byteOutputStream . close (  )  ;", "byteOutputStream    =    new    . MockOutputStream ( length )  ;", "Slice   inputSlice    =    Slices . wrappedBuffer ( inputArray )  ;", "output    =    new   BufferedOutputStreamSliceOutput ( byteOutputStream )  ;", "for    ( int   i    =     0  ;    i    <     (  ( offsets . length )     -     1  )  ;    i +  +  )     {", "output . writeBytes ( inputSlice ,    offsets [ i ]  ,     (  ( offsets [  ( i    +     1  )  ]  )     -     ( offsets [ i ]  )  )  )  ;", "}", "output . flush (  )  ;", "assertEquals ( byteOutputStream . toByteArray (  )  ,    inputArray )  ;", "byteOutputStream . close (  )  ;", "}", "METHOD_END"], "methodName": ["testWriteBytes"], "fileName": "com.facebook.presto.rcfile.TestBufferedOutputStreamSliceOutput"}, {"methodBody": ["METHOD_START", "{", "Slice   oldBytes    =    TestRcFileDecoderUtils . writeVintOld ( output ,    value )  ;", "long   readValueOld    =    WritableUtils . readVLong ( oldBytes . getInput (  )  )  ;", "assertEquals ( readValueOld ,    value )  ;", "long   readValueNew    =    RcFileDecoderUtils . readVInt ( oldBytes ,     0  )  ;", "assertEquals ( readValueNew ,    value )  ;", "long   readValueNewStream    =    RcFileDecoderUtils . readVInt ( oldBytes . getInput (  )  )  ;", "assertEquals ( readValueNewStream ,    value )  ;", "}", "METHOD_END"], "methodName": ["assertVIntRoundTrip"], "fileName": "com.facebook.presto.rcfile.TestRcFileDecoderUtils"}, {"methodBody": ["METHOD_START", "{", "Slice   slice    =    Slices . allocate (  1  0  0  )  ;", "SliceOutput   output    =    slice . getOutput (  )  ;", ". assertVIntRoundTrip ( output ,     0  )  ;", ". assertVIntRoundTrip ( output ,     1  )  ;", ". assertVIntRoundTrip ( output ,     (  -  1  )  )  ;", ". assertVIntRoundTrip ( output ,    Integer . MAX _ VALUE )  ;", ". assertVIntRoundTrip ( output ,     (  ( Integer . MAX _ VALUE )     +     1 L )  )  ;", ". assertVIntRoundTrip ( output ,     (  ( Integer . MAX _ VALUE )     -     1 L )  )  ;", ". assertVIntRoundTrip ( output ,    Integer . MIN _ VALUE )  ;", ". assertVIntRoundTrip ( output ,     (  ( Integer . MIN _ VALUE )     +     1 L )  )  ;", ". assertVIntRoundTrip ( output ,     (  ( Integer . MIN _ VALUE )     -     1 L )  )  ;", ". assertVIntRoundTrip ( output ,    Long . MAX _ VALUE )  ;", ". assertVIntRoundTrip ( output ,     (  ( Long . MAX _ VALUE )     -     1  )  )  ;", ". assertVIntRoundTrip ( output ,     (  ( Long . MIN _ VALUE )     +     1  )  )  ;", "for    ( int   value    =     -  1  0  0  0  0  0  ;    value    <     1  0  0  0  0  0  ;    value +  +  )     {", ". assertVIntRoundTrip ( output ,    value )  ;", "}", "}", "METHOD_END"], "methodName": ["testVInt"], "fileName": "com.facebook.presto.rcfile.TestRcFileDecoderUtils"}, {"methodBody": ["METHOD_START", "{", "output . reset (  )  ;", "WritableUtils . writeVLong ( output ,    value )  ;", "Slice   vLongOld    =    Slices . copyOf ( output . slice (  )  )  ;", "output . reset (  )  ;", ". writeVLong ( output ,    value )  ;", "Slice   vLongNew    =    Slices . copyOf ( output . slice (  )  )  ;", "assertEquals ( vLongNew ,    vLongOld )  ;", "if    ( value    =  =     (  ( int )     ( value )  )  )     {", "output . reset (  )  ;", "WritableUtils . writeVInt ( output ,     (  ( int )     ( value )  )  )  ;", "Slice   vIntOld    =    Slices . copyOf ( output . slice (  )  )  ;", "assertEquals ( vIntOld ,    vLongOld )  ;", "output . reset (  )  ;", ". writeVInt ( output ,     (  ( int )     ( value )  )  )  ;", "Slice   vIntNew    =    Slices . copyOf ( output . slice (  )  )  ;", "assertEquals ( vIntNew ,    vLongOld )  ;", "}", "return   vLongOld ;", "}", "METHOD_END"], "methodName": ["writeVintOld"], "fileName": "com.facebook.presto.rcfile.TestRcFileDecoderUtils"}, {"methodBody": ["METHOD_START", "{", "List < Integer >    allValues    =    segments . stream (  )  . map ( TestRcFileReaderManual . Segment :  : getValues )  . flatMap ( List :  : stream )  . collect ( Collectors . toList (  )  )  ;", "assertEquals ( allValues ,    TestRcFileReaderManual . readValues ( file ,     0  ,    file . length (  )  )  )  ;", "for    ( TestRcFileReaderManual . Segment   segment    :    segments )     {", "assertEquals ( segment . getValues (  )  ,    TestRcFileReaderManual . readValues ( file ,    segment . getOffset (  )  ,    segment . getLength (  )  )  )  ;", "assertEquals ( segment . getValues (  )  ,    TestRcFileReaderManual . readValues ( file ,    segment . getOffset (  )  ,     1  )  )  ;", "assertEquals ( segment . getValues (  )  ,    TestRcFileReaderManual . readValues ( file ,     (  ( segment . getOffset (  )  )     -     1  )  ,     2  )  )  ;", "assertEquals ( ImmutableList . of (  )  ,    TestRcFileReaderManual . readValues ( file ,     (  ( segment . getOffset (  )  )     +     1  )  ,     1  )  )  ;", "assertEquals ( ImmutableList . of (  )  ,    TestRcFileReaderManual . readValues ( file ,     (  ( segment . getOffset (  )  )     +     1  )  ,     (  ( segment . getLength (  )  )     -     1  )  )  )  ;", "for    ( int   rowGroupOffset    :    segment . getRowGroupSegmentOffsets (  )  )     {", "assertEquals ( segment . getValues (  )  ,    TestRcFileReaderManual . readValues ( file ,    segment . getOffset (  )  ,    rowGroupOffset )  )  ;", "assertEquals ( segment . getValues (  )  ,    TestRcFileReaderManual . readValues ( file ,    segment . getOffset (  )  ,     ( rowGroupOffset    -     1  )  )  )  ;", "assertEquals ( segment . getValues (  )  ,    TestRcFileReaderManual . readValues ( file ,    segment . getOffset (  )  ,     ( rowGroupOffset    +     1  )  )  )  ;", "assertEquals ( ImmutableList . of (  )  ,    TestRcFileReaderManual . readValues ( file ,     (  ( segment . getOffset (  )  )     +    rowGroupOffset )  ,     (  ( segment . getLength (  )  )     -    rowGroupOffset )  )  )  ;", "}", "}", "for    ( int   startSegmentIndex    =     0  ;    startSegmentIndex    <     ( segments . size (  )  )  ;    startSegmentIndex +  +  )     {", "TestRcFileReaderManual . Segment   startSegment    =    segments . get ( startSegmentIndex )  ;", "for    ( int   endSegmentIndex    =    startSegmentIndex ;    endSegmentIndex    <     ( segments . size (  )  )  ;    endSegmentIndex +  +  )     {", "TestRcFileReaderManual . Segment   endSegment    =    segments . get ( endSegmentIndex )  ;", "List < Integer >    segmentsValues    =    segments . subList ( startSegmentIndex ,     ( endSegmentIndex    +     1  )  )  . stream (  )  . map ( TestRcFileReaderManual . Segment :  : getValues )  . flatMap ( List :  : stream )  . collect ( Collectors . toList (  )  )  ;", "assertEquals ( segmentsValues ,    TestRcFileReaderManual . readValues ( file ,    startSegment . getOffset (  )  ,     (  (  ( endSegment . getOffset (  )  )     +     ( endSegment . getLength (  )  )  )     -     ( startSegment . getOffset (  )  )  )  )  )  ;", "assertEquals ( segmentsValues ,    TestRcFileReaderManual . readValues ( file ,    startSegment . getOffset (  )  ,     (  (  ( endSegment . getOffset (  )  )     +     1  )     -     ( startSegment . getOffset (  )  )  )  )  )  ;", "assertEquals ( segmentsValues ,    TestRcFileReaderManual . readValues ( file ,     (  ( startSegment . getOffset (  )  )     -     1  )  ,     (  (  (  ( endSegment . getOffset (  )  )     +     1  )     +     ( endSegment . getLength (  )  )  )     -     ( startSegment . getOffset (  )  )  )  )  )  ;", "assertEquals ( segmentsValues ,    TestRcFileReaderManual . readValues ( file ,     (  ( startSegment . getOffset (  )  )     -     1  )  ,     (  (  (  ( endSegment . getOffset (  )  )     +     1  )     +     1  )     -     ( startSegment . getOffset (  )  )  )  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["assertFileSegments"], "fileName": "com.facebook.presto.rcfile.TestRcFileReaderManual"}, {"methodBody": ["METHOD_START", "{", "if    ( offset    <     0  )     {", "length    +  =    offset ;", "offset    =     0  ;", "}", "if    (  ( offset    +    length )     >     ( data . length (  )  )  )     {", "length    =     ( data . length (  )  )     -    offset ;", "}", "RcFileReader   reader    =    new   RcFileReader ( new    . SliceRcFileDataSource ( data )  ,    new   BinaryRcFileEncoding (  )  ,    ImmutableMap . of (  0  ,    SMALLINT )  ,    new    . BogusRcFileCodecFactory (  )  ,    offset ,    length ,    new   io . airlift . units . DataSize (  8  ,    Unit . MEGABYTE )  )  ;", "ImmutableList . Builder < Integer >    values    =    ImmutableList . builder (  )  ;", "while    (  ( reader . advance (  )  )     >  =     0  )     {", "Block   block    =    reader . readBlock (  0  )  ;", "for    ( int   position    =     0  ;    position    <     ( block . getPositionCount (  )  )  ;    position +  +  )     {", "values . add (  (  ( int )     ( SMALLINT . getLong ( block ,    position )  )  )  )  ;", "}", "}", "return   values . build (  )  ;", "}", "METHOD_END"], "methodName": ["readValues"], "fileName": "com.facebook.presto.rcfile.TestRcFileReaderManual"}, {"methodBody": ["METHOD_START", "{", "SliceOutput   output    =    new   DynamicSliceOutput (  (  1  0     *     1  0  2  4  )  )  ;", "List <  . Segment >    segments    =    ImmutableList . of (  . writeSegment ( output ,    ImmutableList . of ( ImmutableList . of (  0  ,     2  ,     3  ,     4  )  ,    ImmutableList . of (  1  0  ,     1  2  ,     1  3  )  )  )  ,     . writeSegment ( output ,    ImmutableList . of ( ImmutableList . of (  2  0  ,     2  2  )  ,    ImmutableList . of (  3  0  ,     3  3  )  ,    ImmutableList . of (  4  0  ,     4  4  )  )  )  ,     . writeSegment ( output ,    ImmutableList . of ( ImmutableList . of (  1  0  0  ,     1  0  1  ,     1  0  2  )  )  )  )  ;", ". assertFileSegments ( output . slice (  )  ,    segments )  ;", "}", "METHOD_END"], "methodName": ["testNoStartSync"], "fileName": "com.facebook.presto.rcfile.TestRcFileReaderManual"}, {"methodBody": ["METHOD_START", "{", "SliceOutput   output    =    new   DynamicSliceOutput (  (  1  0     *     1  0  2  4  )  )  ;", "List <  . Segment >    segments    =    ImmutableList . of (  . writeSegment ( output ,    ImmutableList . of (  )  )  ,     . writeSegment ( output ,    ImmutableList . of ( ImmutableList . of (  0  ,     2  ,     3  ,     4  )  ,    ImmutableList . of (  1  0  ,     1  2  ,     1  3  )  )  )  ,     . writeSegment ( output ,    ImmutableList . of ( ImmutableList . of (  2  0  ,     2  2  )  ,    ImmutableList . of (  3  0  ,     3  3  )  ,    ImmutableList . of (  4  0  ,     4  4  )  )  )  ,     . writeSegment ( output ,    ImmutableList . of ( ImmutableList . of (  1  0  0  ,     1  0  1  ,     1  0  2  )  )  )  )  ;", ". assertFileSegments ( output . slice (  )  ,    segments )  ;", "}", "METHOD_END"], "methodName": ["testStartSync"], "fileName": "com.facebook.presto.rcfile.TestRcFileReaderManual"}, {"methodBody": ["METHOD_START", "{", "output . writeBytes ( TestRcFileReaderManual . RCFILE _ MAGIC )  ;", "output . writeByte ( TestRcFileReaderManual . CURRENT _ VERSION )  ;", "output . writeBoolean ( false )  ;", "output . writeInt ( Integer . reverseBytes (  1  )  )  ;", "output . writeByte ( TestRcFileReaderManual . COLUMN _ COUNT _ METADATA _ KEY . length (  )  )  ;", "output . writeBytes ( TestRcFileReaderManual . COLUMN _ COUNT _ METADATA _ KEY )  ;", "output . writeByte (  1  )  ;", "output . writeByte (  '  1  '  )  ;", "output . writeLong ( TestRcFileReaderManual . syncFirst )  ;", "output . writeLong ( TestRcFileReaderManual . syncSecond )  ;", "}", "METHOD_END"], "methodName": ["writeFileHeader"], "fileName": "com.facebook.presto.rcfile.TestRcFileReaderManual"}, {"methodBody": ["METHOD_START", "{", "checkArgument (  (  ( shortValues . size (  )  )     <     3  2  )  )  ;", "int   columnLengthsLength    =    shortValues . size (  )  ;", "int   keySectionLength    =     4     +    columnLengthsLength ;", "int   columnDataLength    =     ( shortValues . size (  )  )     *     2  ;", "output . writeInt ( Integer . reverseBytes (  ( keySectionLength    +    columnDataLength )  )  )  ;", "output . writeInt ( Integer . reverseBytes ( keySectionLength )  )  ;", "output . writeInt ( Integer . reverseBytes ( keySectionLength )  )  ;", "output . writeByte ( shortValues . size (  )  )  ;", "output . writeByte ( columnDataLength )  ;", "output . writeByte ( columnDataLength )  ;", "output . writeByte ( columnLengthsLength )  ;", "for    ( int   ignored    :    shortValues )     {", "output . write (  2  )  ;", "}", "for    ( int   value    :    shortValues )     {", "output . writeShort ( Short . reverseBytes (  (  ( short )     ( value )  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["writeRowGroup"], "fileName": "com.facebook.presto.rcfile.TestRcFileReaderManual"}, {"methodBody": ["METHOD_START", "{", "int   offset    =    output . size (  )  ;", "if    ( offset    =  =     0  )     {", ". writeFileHeader ( output )  ;", "} else    {", ". writeSync ( output )  ;", "}", "ImmutableList . Builder < Integer >    rowGroupOffsets    =    ImmutableList . builder (  )  ;", "for    ( List < Integer >    rowGroup    :    rowGroups )     {", "rowGroupOffsets . add (  (  ( output . size (  )  )     -    offset )  )  ;", ". writeRowGroup ( output ,    rowGroup )  ;", "}", "int   length    =     ( output . size (  )  )     -    offset ;", "return   new    . Segment ( rowGroups . stream (  )  . flatMap ( List :  : stream )  . collect ( Collectors . toList (  )  )  ,    offset ,    length ,    rowGroupOffsets . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["writeSegment"], "fileName": "com.facebook.presto.rcfile.TestRcFileReaderManual"}, {"methodBody": ["METHOD_START", "{", "output . writeInt (  (  -  1  )  )  ;", "output . writeLong (  . syncFirst )  ;", "output . writeLong (  . syncSecond )  ;", "}", "METHOD_END"], "methodName": ["writeSync"], "fileName": "com.facebook.presto.rcfile.TestRcFileReaderManual"}, {"methodBody": ["METHOD_START", "{", "if    ( value    <     0  )     {", "value    =     ~ value ;", "}", "return    (  (  ( Long . SIZE )     -     ( Long . numberOfLeadingZeros ( value )  )  )     /     (  . BITS _ IN _ BYTE )  )     +     1  ;", "}", "METHOD_END"], "methodName": ["getWriteByteCount"], "fileName": "com.facebook.presto.rcfile.binary.DecimalEncoding"}, {"methodBody": ["METHOD_START", "{", "int   scale    =    Math . toIntExact ( RcFileDecoderUtils . readVInt ( slice ,    offset )  )  ;", "offset    +  =    RcFileDecoderUtils . decodeVIntSize ( slice ,    offset )  ;", "int   length    =    Math . toIntExact ( RcFileDecoderUtils . readVInt ( slice ,    offset )  )  ;", "offset    +  =    RcFileDecoderUtils . decodeVIntSize ( slice ,    offset )  ;", "checkState (  ( length    <  =     8  )  )  ;", "if    (  ( slice . getByte ( offset )  )     >  =     0  )     {", "resultSlice . setLong (  0  ,     0 L )  ;", "} else    {", "resultSlice . setLong (  0  ,     -  1 L )  ;", "}", "resultSlice . setBytes (  (  8     -    length )  ,    slice ,    offset ,    length )  ;", "long   value    =    Long . reverseBytes ( resultSlice . getLong (  0  )  )  ;", "if    ( scale    !  =     ( type . getScale (  )  )  )     {", "return   rescale ( value ,    scale ,    type . getScale (  )  )  ;", "}", "return   value ;", "}", "METHOD_END"], "methodName": ["parseLong"], "fileName": "com.facebook.presto.rcfile.binary.DecimalEncoding"}, {"methodBody": ["METHOD_START", "{", "int   scale    =    Math . toIntExact ( RcFileDecoderUtils . readVInt ( slice ,    offset )  )  ;", "offset    +  =    RcFileDecoderUtils . decodeVIntSize ( slice ,    offset )  ;", "int   length    =    Math . toIntExact ( RcFileDecoderUtils . readVInt ( slice ,    offset )  )  ;", "offset    +  =    RcFileDecoderUtils . decodeVIntSize ( slice ,    offset )  ;", "checkState (  ( length    <  =     (  . BYTES _ IN _ LONG _ DECIMAL )  )  )  ;", "if    (  ( slice . getByte ( offset )  )     >  =     0  )     {", "resultSlice . setLong (  0  ,     0 L )  ;", "resultSlice . setLong (  8  ,     0 L )  ;", "} else    {", "resultSlice . setLong (  0  ,     -  1 L )  ;", "resultSlice . setLong (  8  ,     -  1 L )  ;", "}", "resultSlice . setBytes (  (  (  . BYTES _ IN _ LONG _ DECIMAL )     -    length )  ,    slice ,    offset ,    length )  ;", "BigInteger   decimal    =    new   BigInteger ( resultBytes )  ;", "if    ( scale    !  =     ( type . getScale (  )  )  )     {", "decimal    =    Decimals . rescale ( decimal ,    scale ,    type . getScale (  )  )  ;", "}", "return   Decimals . encodeUnscaledValue ( decimal )  ;", "}", "METHOD_END"], "methodName": ["parseSlice"], "fileName": "com.facebook.presto.rcfile.binary.DecimalEncoding"}, {"methodBody": ["METHOD_START", "{", "RcFileDecoderUtils . writeVInt ( output ,    type . getScale (  )  )  ;", "int   length    =     . getWriteByteCount ( value )  ;", "RcFileDecoderUtils . writeVInt ( output ,    length )  ;", "for    ( int   i    =    length    -     1  ;    i    >  =     0  ;    i -  -  )     {", "output . writeByte (  (  ( int )     ( value    >  >     ( i    *     8  )  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["writeLong"], "fileName": "com.facebook.presto.rcfile.binary.DecimalEncoding"}, {"methodBody": ["METHOD_START", "{", "RcFileDecoderUtils . writeVInt ( output ,    type . getScale (  )  )  ;", "BigInteger   decimal    =    Decimals . decodeUnscaledValue ( block . getSlice ( position ,     0  ,     . BYTES _ IN _ LONG _ DECIMAL )  )  ;", "byte [  ]    decimalBytes    =    decimal . toByteArray (  )  ;", "RcFileDecoderUtils . writeVInt ( output ,    decimalBytes . length )  ;", "for    ( byte   decimalByte    :    decimalBytes )     {", "output . write ( decimalByte )  ;", "}", "}", "METHOD_END"], "methodName": ["writeSlice"], "fileName": "com.facebook.presto.rcfile.binary.DecimalEncoding"}, {"methodBody": ["METHOD_START", "{", "if    ( nanos    <     0  )     {", "nanos    =     (  - nanos )     -     1  ;", "}", "int   nanosDigits    =     (  ( int )     ( Math . floor ( Math . log 1  0  ( nanos )  )  )  )     +     1  ;", "int   temp    =     0  ;", "wh    ( nanos    !  =     0  )     {", "temp    *  =     1  0  ;", "temp    +  =    nanos    %     1  0  ;", "nanos    /  =     1  0  ;", "}", "nanos    =    temp ;", "if    ( nanosDigits    <     9  )     {", "nanos    *  =    Math . pow (  1  0  ,     (  9     -    nanosDigits )  )  ;", "}", "return   nanos ;", "}", "METHOD_END"], "methodName": ["decodeNanos"], "fileName": "com.facebook.presto.rcfile.binary.TimestampEncoding"}, {"methodBody": ["METHOD_START", "{", "int   lowest 3  1 BitsOfSecondsAndFlag    =    Integer . reverseBytes ( slice . getInt ( offset )  )  ;", "long   seconds    =    lowest 3  1 BitsOfSecondsAndFlag    &     2  1  4  7  4  8  3  6  4  7  ;", "offset    +  =    SizeOf . SIZE _ OF _ INT ;", "int   nanos    =     0  ;", "if    ( lowest 3  1 BitsOfSecondsAndFlag    <     0  )     {", "byte   nanosFirstByte    =    slice . getByte ( offset )  ;", "int   nanosLength    =    RcFileDecoderUtils . decodeVIntSize ( nanosFirstByte )  ;", "nanos    =     (  ( int )     ( RcFileDecoderUtils . readVInt ( slice ,    offset ,    nanosLength )  )  )  ;", "nanos    =     . decodeNanos ( nanos )  ;", "if    ( RcFileDecoderUtils . isNegativeVInt ( nanosFirstByte )  )     {", "long   highBits    =    RcFileDecoderUtils . readVInt ( slice ,     ( offset    +    nanosLength )  )  ;", "seconds    |  =    highBits    <  <     3  1  ;", "}", "}", "long   millis    =     ( seconds    *     1  0  0  0  )     +     ( nanos    /     1  0  0  0  0  0  0  )  ;", "return   millis ;", "}", "METHOD_END"], "methodName": ["getTimestamp"], "fileName": "com.facebook.presto.rcfile.binary.TimestampEncoding"}, {"methodBody": ["METHOD_START", "{", "return    ( b    >  >     7  )     !  =     0  ;", "}", "METHOD_END"], "methodName": ["hasNanosVInt"], "fileName": "com.facebook.presto.rcfile.binary.TimestampEncoding"}, {"methodBody": ["METHOD_START", "{", "int   decimal    =     0  ;", "if    ( nanos    !  =     0  )     {", "int   counter    =     0  ;", "wh    ( counter    <     9  )     {", "decimal    *  =     1  0  ;", "decimal    +  =    nanos    %     1  0  ;", "nanos    /  =     1  0  ;", "counter +  +  ;", "}", "}", "return   decimal ;", "}", "METHOD_END"], "methodName": ["reverseDecimal"], "fileName": "com.facebook.presto.rcfile.binary.TimestampEncoding"}, {"methodBody": ["METHOD_START", "{", "long   seconds    =    Math . floorDiv ( millis ,     1  0  0  0  )  ;", "int   nanos    =    Math . toIntExact (  (  ( Math . floorMod ( millis ,     1  0  0  0  )  )     *     1  0  0  0  0  0  0  )  )  ;", ". writeTimestamp ( seconds ,    nanos ,    output )  ;", "}", "METHOD_END"], "methodName": ["writeTimestamp"], "fileName": "com.facebook.presto.rcfile.binary.TimestampEncoding"}, {"methodBody": ["METHOD_START", "{", "boolean   hasSecondsHigh 3  2     =     ( seconds    <     0  )     |  |     ( seconds    >     ( Integer . MAX _ VALUE )  )  ;", "int   nanosReversed    =     . reverseDecimal ( nanos )  ;", "int   secondsLow 3  2     =     (  ( int )     ( seconds )  )  ;", "if    (  ( nanosReversed    =  =     0  )     &  &     (  ! hasSecondsHigh 3  2  )  )     {", "secondsLow 3  2     &  =     2  1  4  7  4  8  3  6  4  7  ;", "} else    {", "secondsLow 3  2     |  =     -  2  1  4  7  4  8  3  6  4  8  ;", "}", "output . writeInt ( Integer . reverseBytes ( secondsLow 3  2  )  )  ;", "if    ( hasSecondsHigh 3  2     |  |     ( nanosReversed    !  =     0  )  )     {", "int   value    =     ( hasSecondsHigh 3  2  )     ?     ~ nanosReversed    :    nanosReversed ;", "RcFileDecoderUtils . writeVInt ( output ,    value )  ;", "}", "if    ( hasSecondsHigh 3  2  )     {", "int   secondsHigh 3  2     =     (  ( int )     ( seconds    >  >     3  1  )  )  ;", "RcFileDecoderUtils . writeVInt ( output ,    secondsHigh 3  2  )  ;", "}", "}", "METHOD_END"], "methodName": ["writeTimestamp"], "fileName": "com.facebook.presto.rcfile.binary.TimestampEncoding"}, {"methodBody": ["METHOD_START", "{", "return   separators [ depth ]  ;", "}", "METHOD_END"], "methodName": ["getSeparator"], "fileName": "com.facebook.presto.rcfile.text.BlockEncoding"}, {"methodBody": ["METHOD_START", "{", "return    (  ( escapeByte )     !  =    null )     &  &     ( currentByte    =  =     ( escapeByte )  )  ;", "}", "METHOD_END"], "methodName": ["isEscapeByte"], "fileName": "com.facebook.presto.rcfile.text.BlockEncoding"}, {"methodBody": ["METHOD_START", "{", "return   nullSequence . equals (  0  ,    nullSequence . length (  )  ,    slice ,    offset ,    length )  ;", "}", "METHOD_END"], "methodName": ["isNullSequence"], "fileName": "com.facebook.presto.rcfile.text.BlockEncoding"}, {"methodBody": ["METHOD_START", "{", "if    ( type . getBoolean ( block ,    position )  )     {", "output . writeBytes (  . TRUE )  ;", "} else    {", "output . writeBytes (  . FALSE )  ;", "}", "}", "METHOD_END"], "methodName": ["encodeValue"], "fileName": "com.facebook.presto.rcfile.text.BooleanEncoding"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  ( length    =  =     5  )     &  &     (  ( BooleanEncoding . toUpperCase ( slice . getByte (  ( start    +     0  )  )  )  )     =  =     ' F '  )  )     &  &     (  ( BooleanEncoding . toUpperCase ( slice . getByte (  ( start    +     1  )  )  )  )     =  =     ' A '  )  )     &  &     (  ( BooleanEncoding . toUpperCase ( slice . getByte (  ( start    +     2  )  )  )  )     =  =     ' L '  )  )     &  &     (  ( BooleanEncoding . toUpperCase ( slice . getByte (  ( start    +     3  )  )  )  )     =  =     ' S '  )  )     &  &     (  ( BooleanEncoding . toUpperCase ( slice . getByte (  ( start    +     4  )  )  )  )     =  =     ' E '  )  ;", "}", "METHOD_END"], "methodName": ["isFalse"], "fileName": "com.facebook.presto.rcfile.text.BooleanEncoding"}, {"methodBody": ["METHOD_START", "{", "return    ( b    >  =     ' a '  )     &  &     ( b    <  =     ' z '  )  ;", "}", "METHOD_END"], "methodName": ["isLowerCase"], "fileName": "com.facebook.presto.rcfile.text.BooleanEncoding"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  ( length    =  =     4  )     &  &     (  ( BooleanEncoding . toUpperCase ( slice . getByte (  ( start    +     0  )  )  )  )     =  =     ' T '  )  )     &  &     (  ( BooleanEncoding . toUpperCase ( slice . getByte (  ( start    +     1  )  )  )  )     =  =     ' R '  )  )     &  &     (  ( BooleanEncoding . toUpperCase ( slice . getByte (  ( start    +     2  )  )  )  )     =  =     ' U '  )  )     &  &     (  ( BooleanEncoding . toUpperCase ( slice . getByte (  ( start    +     3  )  )  )  )     =  =     ' E '  )  ;", "}", "METHOD_END"], "methodName": ["isTrue"], "fileName": "com.facebook.presto.rcfile.text.BooleanEncoding"}, {"methodBody": ["METHOD_START", "{", "return   BooleanEncoding . isLowerCase ( b )     ?     (  ( byte )     ( b    -     3  2  )  )     :    b ;", "}", "METHOD_END"], "methodName": ["toUpperCase"], "fileName": "com.facebook.presto.rcfile.text.BooleanEncoding"}, {"methodBody": ["METHOD_START", "{", "long   days    =    type . getLong ( block ,    position )  ;", "long   millis    =    TimeUnit . DAYS . toMillis ( days )  ;", "buffer . setLength (  0  )  ;", ". HIVE _ DATE _ PARSER . printTo ( buffer ,    millis )  ;", "for    ( int   index    =     0  ;    index    <     ( buffer . length (  )  )  ;    index +  +  )     {", "output . writeByte ( buffer . charAt ( index )  )  ;", "}", "}", "METHOD_END"], "methodName": ["encodeValue"], "fileName": "com.facebook.presto.rcfile.text.DateEncoding"}, {"methodBody": ["METHOD_START", "{", "long   millis    =    DateEncoding . HIVE _ DATE _ PARSER . parseMillis ( slice . toStringAscii ( offset ,    length )  )  ;", "return   Math . toIntExact ( TimeUnit . MILLISECONDS . toDays ( millis )  )  ;", "}", "METHOD_END"], "methodName": ["parseDate"], "fileName": "com.facebook.presto.rcfile.text.DateEncoding"}, {"methodBody": ["METHOD_START", "{", "if    ( isShortDecimal ( type )  )     {", "output . writeBytes ( Slices . utf 8 Slice ( Decimals . toString ( type . getLong ( block ,    position )  ,    type . getScale (  )  )  )  )  ;", "} else    {", "output . writeBytes ( Slices . utf 8 Slice ( Decimals . toString ( type . getSlice ( block ,    position )  ,    type . getScale (  )  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["encodeValue"], "fileName": "com.facebook.presto.rcfile.text.DecimalEncoding"}, {"methodBody": ["METHOD_START", "{", "checkArgument (  ( length    <     ( buffer . length )  )  )  ;", "for    ( int   i    =     0  ;    i    <    length ;    i +  +  )     {", "buffer [ i ]     =     (  ( char )     ( slice . getByte (  ( offset    +    i )  )  )  )  ;", "}", "Big   decimal    =    new   Big ( buffer ,     0  ,    length )  ;", "checkState (  (  ( decimal . scale (  )  )     <  =     ( type . getScale (  )  )  )  ,     \" Read   decimal   value   scale   larger   than   column   scale \"  )  ;", "decimal    =    decimal . setScale ( type . getScale (  )  ,    RoundingMode . HALF _ UP )  ;", "checkState (  (  ( decimal . precision (  )  )     <  =     ( type . getPrecision (  )  )  )  ,     \" Read   decimal   precision   larger   than   column   precision \"  )  ;", "return   decimal ;", "}", "METHOD_END"], "methodName": ["parseBigDecimal"], "fileName": "com.facebook.presto.rcfile.text.DecimalEncoding"}, {"methodBody": ["METHOD_START", "{", "BigDecimal   decimal    =    parseBigDecimal ( slice ,    offset ,    length )  ;", "return   decimal . unscaledValue (  )  . longValue (  )  ;", "}", "METHOD_END"], "methodName": ["parseLong"], "fileName": "com.facebook.presto.rcfile.text.DecimalEncoding"}, {"methodBody": ["METHOD_START", "{", "BigDecimal   decimal    =    parseBigDecimal ( slice ,    offset ,    length )  ;", "return   encodeUnscaledValue ( decimal . unscaledValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["parseSlice"], "fileName": "com.facebook.presto.rcfile.text.DecimalEncoding"}, {"methodBody": ["METHOD_START", "{", "double   value    =    type . getDouble ( block ,    position )  ;", "buffer . setLength (  0  )  ;", "buffer . append ( value )  ;", "for    ( int   index    =     0  ;    index    <     ( buffer . length (  )  )  ;    index +  +  )     {", "output . writeByte ( buffer . charAt ( index )  )  ;", "}", "}", "METHOD_END"], "methodName": ["encodeValue"], "fileName": "com.facebook.presto.rcfile.text.DoubleEncoding"}, {"methodBody": ["METHOD_START", "{", "try    {", "return    . parse ( slice . toStringAscii ( start ,    length )  )  ;", "}    catch    ( NumberFormatException   e )     {", "throw   new   RcFileCorruptionException ( e ,     \" Invalid   double   value \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["parseDouble"], "fileName": "com.facebook.presto.rcfile.text.DoubleEncoding"}, {"methodBody": ["METHOD_START", "{", "try    {", "return    . parse ( slice . toStringAscii ( start ,    length )  )  ;", "}    catch    ( NumberFormatException   e )     {", "throw   new   RcFileCorruptionException ( e ,     \" Invalid   float   value \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["parseFloat"], "fileName": "com.facebook.presto.rcfile.text.FloatEncoding"}, {"methodBody": ["METHOD_START", "{", "if    ( nullSequence . equals (  0  ,    nullSequence . length (  )  ,    slice ,    offset ,    length )  )     {", "blockBuilder . appendNull (  )  ;", "} else    {", "elemen . decodeValueInto (  ( depth    +     1  )  ,    blockBuilder ,    slice ,    offset ,    length )  ;", "}", "}", "METHOD_END"], "methodName": ["decodeElementValueInto"], "fileName": "com.facebook.presto.rcfile.text.ListEncoding"}, {"methodBody": ["METHOD_START", "{", "if    ( slice . equals ( start ,    length ,    LongEncoding . MIN _ LONG ,     0  ,    LongEncoding . MIN _ LONG . length (  )  )  )     {", "return   Long . MIN _ VALUE ;", "}", "int   limit    =    start    +    length ;", "int   sign ;", "if    (  ( slice . getByte ( start )  )     =  =     '  -  '  )     {", "sign    =     -  1  ;", "start +  +  ;", "} else    {", "sign    =     1  ;", "}", "long   value    =     ( slice . getByte ( start )  )     -     (  ( int )     (  '  0  '  )  )  ;", "start +  +  ;", "while    ( start    <    limit )     {", "value    =     ( value    *     1  0  )     +     (  ( slice . getByte ( start )  )     -     (  ( int )     (  '  0  '  )  )  )  ;", "start +  +  ;", "}", "return   value    *    sign ;", "}", "METHOD_END"], "methodName": ["parseLong"], "fileName": "com.facebook.presto.rcfile.text.LongEncoding"}, {"methodBody": ["METHOD_START", "{", "int   keyLength ;", "if    ( keyValueSeparatorPosition    =  =     (  -  1  )  )     {", "keyLength    =    length ;", "} else    {", "keyLength    =    keyValueSeparatorPosition    -    offset ;", "}", "if    ( isNullSequence ( slice ,    offset ,    keyLength )  )     {", "return ;", "}", "key . decodeValueInto (  ( depth    +     2  )  ,    builder ,    slice ,    offset ,    keyLength )  ;", "if    ( keyValueSeparatorPosition    =  =     (  -  1  )  )     {", "builder . appendNull (  )  ;", "} else    {", "int   valueOffset    =    keyValueSeparatorPosition    +     1  ;", "int   valueLength    =     ( length    -    keyLength )     -     1  ;", "if    ( isNullSequence ( slice ,    valueOffset ,    valueLength )  )     {", "builder . appendNull (  )  ;", "} else    {", "value . decodeValueInto (  ( depth    +     2  )  ,    builder ,    slice ,    valueOffset ,    valueLength )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["decodeEntryInto"], "fileName": "com.facebook.presto.rcfile.text.MapEncoding"}, {"methodBody": ["METHOD_START", "{", "Slice   slice    =    columnData . getSlice (  )  ;", "if    (  ( slice . indexOfByte ( escapeByte )  )     <     0  )     {", "return   columnData ;", "}", "Slice   newSlice    =    Slices . allocate ( slice . length (  )  )  ;", "SliceOutput   output    =    newSlice . getOutput (  )  ;", "int [  ]    newOffsets    =    new   int [  ( columnData . rowCount (  )  )     +     1  ]  ;", "for    ( int   row    =     0  ;    row    <     ( columnData . rowCount (  )  )  ;    row +  +  )     {", "int   offset    =    columnData . getOffset ( row )  ;", "int   length    =    columnData . getLength ( row )  ;", "for    ( int   i    =     0  ;    i    <    length ;    i +  +  )     {", "byte   value    =    slice . getByte (  ( offset    +    i )  )  ;", "if    (  ( value    =  =    escapeByte )     &  &     (  ( i    +     1  )     <    length )  )     {", "i +  +  ;", "value    =    slice . getByte (  ( offset    +    i )  )  ;", "}", "output . write ( value )  ;", "}", "newOffsets [  ( row    +     1  )  ]     =    output . size (  )  ;", "}", "return   new   ColumnData ( newOffsets ,    output . slice (  )  )  ;", "}", "METHOD_END"], "methodName": ["unescape"], "fileName": "com.facebook.presto.rcfile.text.StringEncoding"}, {"methodBody": ["METHOD_START", "{", "if    ( fieldIndex    >     ( structFields . size (  )  )  )     {", "return ;", "}", "if    ( isNullSequence ( slice ,    offset ,    length )  )     {", "builder . appendNull (  )  ;", "} else    {", "structFields . get ( fieldIndex )  . decodeValueInto (  ( depth    +     1  )  ,    builder ,    slice ,    offset ,    length )  ;", "}", "}", "METHOD_END"], "methodName": ["decodeElementValueInto"], "fileName": "com.facebook.presto.rcfile.text.StructEncoding"}, {"methodBody": ["METHOD_START", "{", "return   dateTimeFormatter . parseMillis ( new   String ( slice . getBytes ( offset ,    length )  ,     0  )  )  ;", "}", "METHOD_END"], "methodName": ["parseTimestamp"], "fileName": "com.facebook.presto.rcfile.text.TimestampEncoding"}]