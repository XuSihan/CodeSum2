[{"methodBody": ["METHOD_START", "{", "return   ImmutableMap . of (  )  ;", "}", "METHOD_END"], "methodName": ["getBackupProviders"], "fileName": "com.facebook.presto.raptor.PluginInfo"}, {"methodBody": ["METHOD_START", "{", "return   new   DatabaseMetadataModule (  )  ;", "}", "METHOD_END"], "methodName": ["getMetadataModule"], "fileName": "com.facebook.presto.raptor.PluginInfo"}, {"methodBody": ["METHOD_START", "{", "return    \" raptor \"  ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.raptor.PluginInfo"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    testSessionBuilder (  )  . setCatalog (  \" raptor \"  )  . setSchema (  \" benchmark \"  )  . build (  )  ;", "LocalQueryRunner   localQueryRunner    =    new   LocalQueryRunner ( session )  ;", "localQueryRunner . createCatalog (  \" tpch \"  ,    new   TpchConnectorFactory (  1  )  ,    ImmutableMap . of (  )  )  ;", "ConnectorFactory   raptorConnectorFactory    =    getOnlyElement ( new   RaptorPlugin (  )  . getConnectorFactories (  )  )  ;", "Map < String ,    String >    config    =     . createRaptorConfig (  . TPCH _ CACHE _ DIR )  ;", "localQueryRunner . createCatalog (  \" raptor \"  ,    raptorConnectorFactory ,    config )  ;", "if    (  !  ( localQueryRunner . tableExists ( session ,     \" orders \"  )  )  )     {", "localQueryRunner . execute (  \" CREATE   TABLE   orders   AS   SELECT    *    FROM   tpch . sf 1  . orders \"  )  ;", "}", "if    (  !  ( localQueryRunner . tableExists ( session ,     \" lineitem \"  )  )  )     {", "localQueryRunner . execute (  \" CREATE   TABLE   lineitem   AS   SELECT    *    FROM   tpch . sf 1  . lineitem \"  )  ;", "}", "return   localQueryRunner ;", "}", "METHOD_END"], "methodName": ["createLocalQueryRunner"], "fileName": "com.facebook.presto.raptor.RaptorBenchmarkQueryRunner"}, {"methodBody": ["METHOD_START", "{", "File   dataDir    =    new   File ( cacheDir )  ;", "File   databaseDir    =    new   File ( dataDir ,     \" db \"  )  ;", "return   ImmutableMap .  < String ,    String > builder (  )  . put (  \" metadata . db . type \"  ,     \" h 2  \"  )  . put (  \" metadata . db . filename \"  ,    databaseDir . getAbsolutePath (  )  )  . put (  \" storage . data - directory \"  ,    dataDir . getAbsolutePath (  )  )  . put (  \" storage . coms \"  ,     \" false \"  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["createRaptorConfig"], "fileName": "com.facebook.presto.raptor.RaptorBenchmarkQueryRunner"}, {"methodBody": ["METHOD_START", "{", "String   outputDirectory    =    Objects . requireNonNull ( System . getProperty (  \" outputDirectory \"  )  ,     \" Must   specify    - DoutputDirectory =  .  .  .  \"  )  ;", "try    ( LocalQueryRunner   localQueryRunner    =     . createLocalQueryRunner (  )  )     {", "new   com . facebook . presto . benchmark . BenchmarkSuite ( localQueryRunner ,    outputDirectory )  . runAllBenchmarks (  )  ;", "}", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.raptor.RaptorBenchmarkQueryRunner"}, {"methodBody": ["METHOD_START", "{", "return    (    block ,    position )     -  >    XxHash 6  4  . hash ( BIGINT . getLong ( block ,    position )  )  ;", "}", "METHOD_END"], "methodName": ["bigintHashFunction"], "fileName": "com.facebook.presto.raptor.RaptorBucketFunction"}, {"methodBody": ["METHOD_START", "{", "if    ( type . equals ( BIGINT )  )     {", "return    . bigintHashFunction (  )  ;", "}", "if    ( type . equals ( INTEGER )  )     {", "return    . intHashFunction (  )  ;", "}", "if    ( isVarcharType ( type )  )     {", "return    . varcharHashFunction (  )  ;", "}", "throw   new   com . facebook . presto . spi . PrestoException ( NOT _ SUPPORTED ,     (  \" Bucketing   is   supported   for   bigint ,    integer   and   varchar ,    not    \"     +     ( type . getDisplayName (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getHashFunction"], "fileName": "com.facebook.presto.raptor.RaptorBucketFunction"}, {"methodBody": ["METHOD_START", "{", "return    (    block ,    position )     -  >    XxHash 6  4  . hash ( INTEGER . getLong ( block ,    position )  )  ;", "}", "METHOD_END"], "methodName": ["intHashFunction"], "fileName": "com.facebook.presto.raptor.RaptorBucketFunction"}, {"methodBody": ["METHOD_START", "{", "RaptorBucketFunction . getHashFunction ( type )  ;", "}", "METHOD_END"], "methodName": ["validateBucketType"], "fileName": "com.facebook.presto.raptor.RaptorBucketFunction"}, {"methodBody": ["METHOD_START", "{", "return    (    block ,    position )     -  >    XxHash 6  4  . hash ( block . getSlice ( position ,     0  ,    block . getSliceLength ( position )  )  )  ;", "}", "METHOD_END"], "methodName": ["varcharHashFunction"], "fileName": "com.facebook.presto.raptor.RaptorBucketFunction"}, {"methodBody": ["METHOD_START", "{", "return   new   RaptorColumnHandle ( connectorId ,    RaptorColumnHandle . BUCKET _ NUMBER _ COLUMN _ NAME ,    RaptorColumnHandle . BUCKET _ NUMBER _ COLUMN _ ID ,    INTEGER )  ;", "}", "METHOD_END"], "methodName": ["bucketNumberColumnHandle"], "fileName": "com.facebook.presto.raptor.RaptorColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   columnId ;", "}", "METHOD_END"], "methodName": ["getColumnId"], "fileName": "com.facebook.presto.raptor.RaptorColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   columnName ;", "}", "METHOD_END"], "methodName": ["getColumnName"], "fileName": "com.facebook.presto.raptor.RaptorColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   columnType ;", "}", "METHOD_END"], "methodName": ["getColumnType"], "fileName": "com.facebook.presto.raptor.RaptorColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   connectorId ;", "}", "METHOD_END"], "methodName": ["getConnectorId"], "fileName": "com.facebook.presto.raptor.RaptorColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   RaptorColumnHandle . isBucketNumberColumn ( columnId )  ;", "}", "METHOD_END"], "methodName": ["isBucketNumber"], "fileName": "com.facebook.presto.raptor.RaptorColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   columnId    =  =     ( RaptorColumnHandle . BUCKET _ NUMBER _ COLUMN _ ID )  ;", "}", "METHOD_END"], "methodName": ["isBucketNumberColumn"], "fileName": "com.facebook.presto.raptor.RaptorColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   columnId    <     0  ;", "}", "METHOD_END"], "methodName": ["isHiddenColumn"], "fileName": "com.facebook.presto.raptor.RaptorColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   RaptorColumnHandle . isShardRowIdColumn ( columnId )  ;", "}", "METHOD_END"], "methodName": ["isShardRowId"], "fileName": "com.facebook.presto.raptor.RaptorColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   columnId    =  =     ( RaptorColumnHandle . SHARD _ ROW _ ID _ COLUMN _ ID )  ;", "}", "METHOD_END"], "methodName": ["isShardRowIdColumn"], "fileName": "com.facebook.presto.raptor.RaptorColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   RaptorColumnHandle . isShardUuidColumn ( columnId )  ;", "}", "METHOD_END"], "methodName": ["isShardUuid"], "fileName": "com.facebook.presto.raptor.RaptorColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   columnId    =  =     ( RaptorColumnHandle . SHARD _ UUID _ COLUMN _ ID )  ;", "}", "METHOD_END"], "methodName": ["isShardUuidColumn"], "fileName": "com.facebook.presto.raptor.RaptorColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   new   RaptorColumnHandle ( connectorId ,    RaptorColumnHandle . SHARD _ ROW _ ID _ COLUMN _ NAME ,    RaptorColumnHandle . SHARD _ ROW _ ID _ COLUMN _ ID ,    BIGINT )  ;", "}", "METHOD_END"], "methodName": ["shardRowIdHandle"], "fileName": "com.facebook.presto.raptor.RaptorColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   new   RaptorColumnHandle ( connectorId ,    RaptorColumnHandle . SHARD _ UUID _ COLUMN _ NAME ,    RaptorColumnHandle . SHARD _ UUID _ COLUMN _ ID ,    RaptorColumnHandle . SHARD _ UUID _ COLUMN _ TYPE )  ;", "}", "METHOD_END"], "methodName": ["shardUuidColumnHandle"], "fileName": "com.facebook.presto.raptor.RaptorColumnHandle"}, {"methodBody": ["METHOD_START", "{", "checkArgument (  (  ( bytes . length )     >  =     ( Byte . BYTES )  )  ,     \" bytes   for   RaptorColumnIdentity   is   corrupt \"  )  ;", "ByteArrayDataInput   input    =    newDataInput ( bytes )  ;", "byte   version    =    input . readByte (  )  ;", "if    (  ( version    =  =     ( RaptorColumnIdentity . CURRENT _ VERSION )  )     &  &     (  ( bytes . length )     =  =     ( RaptorColumnIdentity . SERIALIZED _ SIZE )  )  )     {", "long   columnId    =    input . readLong (  )  ;", "return   new   RaptorColumnIdentity ( columnId )  ;", "}", "throw   new   com . facebook . presto . spi . PrestoException ( CORRUPT _ SERIALIZED _ IDENTITY ,     (  \" RaptorColumnIdentity   is   corrupt :     \"     +     ( base 1  6  (  )  . lowerCase (  )  . encode ( bytes )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["deserialize"], "fileName": "com.facebook.presto.raptor.RaptorColumnIdentity"}, {"methodBody": ["METHOD_START", "{", "dao . blockMaintenance ( tableId )  ;", "verify ( deletions . put ( tableId ,    transactionId )  )  ;", "}", "METHOD_END"], "methodName": ["beginDelete"], "fileName": "com.facebook.presto.raptor.RaptorConnector"}, {"methodBody": ["METHOD_START", "{", "deletions . entries (  )  . stream (  )  . filter (  (    entry )     -  >    entry . getValue (  )  . equals ( transactionId )  )  . findFirst (  )  . ifPresent (  (    entry )     -  >     {", "long   tableId    =    entry . getKey (  )  ;", "deletions . remove ( tableId ,    transactionId )  ;", "if    (  !  ( deletions . containsKey ( tableId )  )  )     {", "unblockMaintenance ( tableId )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["finishDelete"], "fileName": "com.facebook.presto.raptor.RaptorConnector"}, {"methodBody": ["METHOD_START", "{", "if    ( coordinator )     {", "dao . unblockAllMaintenance (  )  ;", "}", "}", "METHOD_END"], "methodName": ["start"], "fileName": "com.facebook.presto.raptor.RaptorConnector"}, {"methodBody": ["METHOD_START", "{", "try    {", "dao . unblockMaintenance ( tableId )  ;", "}    catch    ( Throwable   t )     {", ". log . warn ( t ,     \" Failed   to   unblock   maintenance   for   table   ID    % s ,    will   retry \"  ,    tableId )  ;", "unblockMaintenanceExecutor . schedule (  (  )     -  >    unblockMaintenance ( tableId )  ,     2  ,    TimeUnit . SECONDS )  ;", "}", "}", "METHOD_END"], "methodName": ["unblockMaintenance"], "fileName": "com.facebook.presto.raptor.RaptorConnector"}, {"methodBody": ["METHOD_START", "{", "return   bucketColumnHandles ;", "}", "METHOD_END"], "methodName": ["getBucketColumnHandles"], "fileName": "com.facebook.presto.raptor.RaptorInsertTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   bucketCount ;", "}", "METHOD_END"], "methodName": ["getBucketCount"], "fileName": "com.facebook.presto.raptor.RaptorInsertTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   columnHandles ;", "}", "METHOD_END"], "methodName": ["getColumnHandles"], "fileName": "com.facebook.presto.raptor.RaptorInsertTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   columnTypes ;", "}", "METHOD_END"], "methodName": ["getColumnTypes"], "fileName": "com.facebook.presto.raptor.RaptorInsertTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   connectorId ;", "}", "METHOD_END"], "methodName": ["getConnectorId"], "fileName": "com.facebook.presto.raptor.RaptorInsertTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   externalBatchId ;", "}", "METHOD_END"], "methodName": ["getExternalBatchId"], "fileName": "com.facebook.presto.raptor.RaptorInsertTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   sortColumnHandles ;", "}", "METHOD_END"], "methodName": ["getSortColumnHandles"], "fileName": "com.facebook.presto.raptor.RaptorInsertTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   sortOrders ;", "}", "METHOD_END"], "methodName": ["getSortOrders"], "fileName": "com.facebook.presto.raptor.RaptorInsertTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   tableId ;", "}", "METHOD_END"], "methodName": ["getTableId"], "fileName": "com.facebook.presto.raptor.RaptorInsertTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   temporalColumnHandle ;", "}", "METHOD_END"], "methodName": ["getTemporalColumnHandle"], "fileName": "com.facebook.presto.raptor.RaptorInsertTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   transactionId ;", "}", "METHOD_END"], "methodName": ["getTransactionId"], "fileName": "com.facebook.presto.raptor.RaptorInsertTableHandle"}, {"methodBody": ["METHOD_START", "{", "currentTransactionId . set ( null )  ;", "}", "METHOD_END"], "methodName": ["clearRollback"], "fileName": "com.facebook.presto.raptor.RaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < RaptorColumnHandle >    columnHandles    =    ImmutableList . builder (  )  ;", "for    ( String   column    :    bucketColumns )     {", "if    (  !  ( columnHandleMap . containsKey ( column )  )  )     {", "throw   new   spi . PrestoException ( NOT _ FOUND ,     (  \" Bucketing   column   does   not   exist :     \"     +    column )  )  ;", "}", "columnHandles . add ( columnHandleMap . get ( column )  )  ;", "}", "return   columnHandles . build (  )  ;", "}", "METHOD_END"], "methodName": ["getBucketColumnHandles"], "fileName": "com.facebook.presto.raptor.RaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "return   dao . listBucketColumns ( tableId )  . stream (  )  . map ( this :  : getRaptorColumnHandle )  . collect ( Collectors . toList (  )  )  ;", "}", "METHOD_END"], "methodName": ["getBucketColumnHandles"], "fileName": "com.facebook.presto.raptor.RaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "Distribution   distribution    =    dao . getDistribution ( distributionId )  ;", "if    ( distribution    =  =    null )     {", "throw   new   PrestoException ( RaptorErrorCode . RAPTOR _ ERROR ,     (  \" Distribution   ID   does   not   exist :     \"     +    distributionId )  )  ;", "}", "List < RaptorColumnHandle >    bucketColumnHandles    =     . getBucketColumnHandles ( RaptorTableProperties . getBucketColumns ( properties )  ,    columnHandleMap )  ;", "return   new    . DistributionInfo ( distributionId ,    distribution . getBucketCount (  )  ,    bucketColumnHandles )  ;", "}", "METHOD_END"], "methodName": ["getDistributionInfo"], "fileName": "com.facebook.presto.raptor.RaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "String   types    =    Distribution . serializeColumnTypes ( columnTypes )  ;", "DatabaseUtil . runIgnoringConstraintViolation (  (  )     -  >    dao . insertDistribution ( name ,    types ,    bucketCount )  )  ;", "Distribution   distribution    =    dao . getDistribution ( name )  ;", "if    ( distribution    =  =    null )     {", "throw   new   PrestoException ( ErrorCode . RAPTOR _ ERROR ,     \" Distribution   does   not   exist   after   insert \"  )  ;", "}", "return   distribution ;", "}", "METHOD_END"], "methodName": ["getOrCreateDistribution"], "fileName": "com.facebook.presto.raptor.RaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "OptionalInt   bucketCount    =    RaptorTableProperties . getBucketCount ( properties )  ;", "List < RaptorColumnHandle >    bucketColumnHandles    =    RaptorMetadata . getBucketColumnHandles ( RaptorTableProperties . getBucketColumns ( properties )  ,    columnHandleMap )  ;", "if    (  ( bucketCount . isPresent (  )  )     &  &     ( bucketColumnHandles . isEmpty (  )  )  )     {", "throw   new   spi . PrestoException ( INVALID _ TABLE _ PROPERTY ,    String . format (  \" Must   specify    '  % s '    along   with    '  % s '  \"  ,    RaptorTableProperties . BUCKETED _ ON _ PROPERTY ,    RaptorTableProperties . BUCKET _ COUNT _ PROPERTY )  )  ;", "}", "if    (  (  !  ( bucketCount . isPresent (  )  )  )     &  &     (  !  ( bucketColumnHandles . isEmpty (  )  )  )  )     {", "throw   new   spi . PrestoException ( INVALID _ TABLE _ PROPERTY ,    String . format (  \" Must   specify    '  % s '    along   with    '  % s '  \"  ,    RaptorTableProperties . BUCKET _ COUNT _ PROPERTY ,    RaptorTableProperties . BUCKETED _ ON _ PROPERTY )  )  ;", "}", "ImmutableList . Builder < Type >    bucketColumnTypes    =    ImmutableList . builder (  )  ;", "for    ( RaptorColumnHandle   column    :    bucketColumnHandles )     {", "RaptorBucketFunction . validateBucketType ( column . getColumnType (  )  )  ;", "bucketColumnTypes . add ( column . getColumnType (  )  )  ;", "}", "long   distributionId ;", "String   distributionName    =    RaptorTableProperties . getDistributionName ( properties )  ;", "if    ( distributionName    !  =    null )     {", "if    ( bucketColumnHandles . isEmpty (  )  )     {", "throw   new   spi . PrestoException ( INVALID _ TABLE _ PROPERTY ,    String . format (  \" Must   specify    '  % s '    along   with    '  % s '  \"  ,    RaptorTableProperties . BUCKETED _ ON _ PROPERTY ,    RaptorTableProperties . DISTRIBUTION _ NAME _ PROPERTY )  )  ;", "}", "Distribution   distribution    =    dao . getDistribution ( distributionName )  ;", "if    ( distribution    =  =    null )     {", "if    (  !  ( bucketCount . isPresent (  )  )  )     {", "throw   new   spi . PrestoException ( INVALID _ TABLE _ PROPERTY ,     \" Distribution   does   not   exist   and   bucket   count   is   not   specified \"  )  ;", "}", "distribution    =    getOrCreateDistribution ( distributionName ,    bucketColumnTypes . build (  )  ,    bucketCount . getAsInt (  )  )  ;", "}", "distributionId    =    distribution . getId (  )  ;", "if    (  ( bucketCount . isPresent (  )  )     &  &     (  ( distribution . getBucketCount (  )  )     !  =     ( bucketCount . getAsInt (  )  )  )  )     {", "throw   new   spi . PrestoException ( INVALID _ TABLE _ PROPERTY ,     \" Bucket   count   must   match   distribution \"  )  ;", "}", "if    (  !  ( distribution . getColumnTypes (  )  . equals ( bucketColumnTypes . build (  )  )  )  )     {", "throw   new   spi . PrestoException ( INVALID _ TABLE _ PROPERTY ,     \" Bucket   column   types   must   match   distribution \"  )  ;", "}", "} else", "if    ( bucketCount . isPresent (  )  )     {", "String   types    =    Distribution . serializeColumnTypes ( bucketColumnTypes . build (  )  )  ;", "distributionId    =    dao . insertDistribution ( null ,    types ,    bucketCount . getAsInt (  )  )  ;", "} else    {", "return   Optional . empty (  )  ;", "}", "shardManager . createBuckets ( distributionId ,    bucketCount . getAsInt (  )  )  ;", "return   Optional . of ( new   RaptorMetadata . DistributionInfo ( distributionId ,    bucketCount . getAsInt (  )  ,    bucketColumnHandles )  )  ;", "}", "METHOD_END"], "methodName": ["getOrCreateDistribution"], "fileName": "com.facebook.presto.raptor.RaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "return   new   RaptorPartitioningHandle ( distributionId ,    shardManager . getBucketAssignments ( distributionId )  )  ;", "}", "METHOD_END"], "methodName": ["getPartitioningHandle"], "fileName": "com.facebook.presto.raptor.RaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "return   new   RaptorColumnHandle ( connectorId ,    tableColumn . getColumnName (  )  ,    tableColumn . getColumnId (  )  ,    tableColumn . getDataType (  )  )  ;", "}", "METHOD_END"], "methodName": ["getRaptorColumnHandle"], "fileName": "com.facebook.presto.raptor.RaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < RaptorColumnHandle >    columnHandles    =    ImmutableList . builder (  )  ;", "for    ( String   column    :    sortColumns )     {", "if    (  !  ( columnHandleMap . containsKey ( column )  )  )     {", "throw   new   spi . PrestoException ( NOT _ FOUND ,     (  \" Ordering   column   does   not   exist :     \"     +    column )  )  ;", "}", "columnHandles . add ( columnHandleMap . get ( column )  )  ;", "}", "return   columnHandles . build (  )  ;", "}", "METHOD_END"], "methodName": ["getSortColumnHandles"], "fileName": "com.facebook.presto.raptor.RaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "return   dao . listSortColumns ( tableId )  . stream (  )  . map ( this :  : getRaptorColumnHandle )  . collect ( Collectors . toList (  )  )  ;", "}", "METHOD_END"], "methodName": ["getSortColumnHandles"], "fileName": "com.facebook.presto.raptor.RaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( tableName ,     \" tableName   is   null \"  )  ;", "Table   table    =    dao . getTableInformation ( tableName . getSchemaName (  )  ,    tableName . getTableName (  )  )  ;", "if    ( table    =  =    null )     {", "return   null ;", "}", "List < TableColumn >    tableColumns    =    dao . listTableColumns ( table . getTableId (  )  )  ;", "checkArgument (  (  !  ( tableColumns . isEmpty (  )  )  )  ,     \" Table    % s   does   not   have   any   columns \"  ,    tableName )  ;", "return   new   TableHandle ( connectorId ,    tableName . getSchemaName (  )  ,    tableName . getTableName (  )  ,    table . getTableId (  )  ,    table . getDistributionId (  )  ,    table . getDistributionName (  )  ,    table . getBucketCount (  )  ,    table . isOrganized (  )  ,    OptionalLong . empty (  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTableHandle"], "fileName": "com.facebook.presto.raptor.RaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( handle . getDistributionId (  )  . isPresent (  )  )  )     {", "return   new   ConnectorTableLayout ( new   RaptorTableLayoutHandle ( handle ,    constraint ,    Optional . empty (  )  )  )  ;", "}", "List < RaptorColumnHandle >    bucketColumnHandles    =    getBucketColumnHandles ( handle . getTableId (  )  )  ;", "RaptorPartitioningHandle   partitioning    =    getPartitioningHandle ( handle . getDistributionId (  )  . getAsLong (  )  )  ;", "boolean   oneSplitPerBucket    =     ( handle . getBucketCount (  )  . getAsInt (  )  )     >  =     ( RaptorSessionProperties . getOneSplitPerBucketThreshold ( session )  )  ;", "return   new   ConnectorTableLayout ( new   RaptorTableLayoutHandle ( handle ,    constraint ,    Optional . of ( partitioning )  )  ,    Optional . empty (  )  ,    TupleDomain . all (  )  ,    Optional . of ( new   spi . ConnectorTablePartitioning ( partitioning ,    ImmutableList . copyOf ( bucketColumnHandles )  )  )  ,     ( oneSplitPerBucket    ?    Optional . of ( ImmutableSet . copyOf ( bucketColumnHandles )  )     :    Optional . empty (  )  )  ,    Optional . empty (  )  ,    ImmutableList . of (  )  )  ;", "}", "METHOD_END"], "methodName": ["getTableLayout"], "fileName": "com.facebook.presto.raptor.RaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "if    ( temporalColumn    =  =    null )     {", "return   Optional . empty (  )  ;", "}", "RaptorColumnHandle   handle    =    columnHandleMap . get ( temporalColumn )  ;", "if    ( handle    =  =    null )     {", "throw   new   spi . PrestoException ( NOT _ FOUND ,     (  \" Temporal   column   does   not   exist :     \"     +    temporalColumn )  )  ;", "}", "return   Optional . of ( handle )  ;", "}", "METHOD_END"], "methodName": ["getTemporalColumnHandle"], "fileName": "com.facebook.presto.raptor.RaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . spi . ColumnMetadata ( name ,    type ,    null ,    true )  ;", "}", "METHOD_END"], "methodName": ["hiddenColumn"], "fileName": "com.facebook.presto.raptor.RaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "return   fragments . stream (  )  . map (  (    fragment )     -  >    RaptorMetadata . SHARD _ INFO _ CODEC . fromJson ( fragment . getBytes (  )  )  )  . collect ( Collectors . toList (  )  )  ;", "}", "METHOD_END"], "methodName": ["parseFragments"], "fileName": "com.facebook.presto.raptor.RaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "Long   transactionId    =    currentTransactionId . getAndSet ( null )  ;", "if    ( transactionId    !  =    null )     {", "shardManager . rollbackTransaction ( transactionId )  ;", "}", "}", "METHOD_END"], "methodName": ["rollback"], "fileName": "com.facebook.presto.raptor.RaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "checkState ( currentTransactionId . compareAndSet ( null ,    transactionId )  ,     \" current   transaction   ID   already   set \"  )  ;", "}", "METHOD_END"], "methodName": ["setTransactionId"], "fileName": "com.facebook.presto.raptor.RaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "return    !  ( getViews ( session ,    viewName . toSchemaTablePrefix (  )  )  . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["viewExists"], "fileName": "com.facebook.presto.raptor.RaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "return   new   RaptorMetadata ( connectorId ,    dbi ,    shardManager ,    beginDeleteForTableId )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "com.facebook.presto.raptor.RaptorMetadataFactory"}, {"methodBody": ["METHOD_START", "{", "DBI   dbi    =    new   DBI ( connectionFactory )  ;", "dbi . registerMapper ( new   TableColumn . Mapper ( typeManager )  )  ;", "dbi . registerMapper ( new   Distribution . Mapper ( typeManager )  )  ;", "SchemaDaoUtil . createTablesWithRetry ( dbi )  ;", "return   dbi ;", "}", "METHOD_END"], "methodName": ["createDBI"], "fileName": "com.facebook.presto.raptor.RaptorModule"}, {"methodBody": ["METHOD_START", "{", "return   nodeManager :  : getWorkerNodes ;", "}", "METHOD_END"], "methodName": ["createNodeSupplier"], "fileName": "com.facebook.presto.raptor.RaptorModule"}, {"methodBody": ["METHOD_START", "{", "return   bucketColumnHandles ;", "}", "METHOD_END"], "methodName": ["getBucketColumnHandles"], "fileName": "com.facebook.presto.raptor.RaptorOutputTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   bucketCount ;", "}", "METHOD_END"], "methodName": ["getBucketCount"], "fileName": "com.facebook.presto.raptor.RaptorOutputTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   columnHandles ;", "}", "METHOD_END"], "methodName": ["getColumnHandles"], "fileName": "com.facebook.presto.raptor.RaptorOutputTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   columnTypes ;", "}", "METHOD_END"], "methodName": ["getColumnTypes"], "fileName": "com.facebook.presto.raptor.RaptorOutputTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   connectorId ;", "}", "METHOD_END"], "methodName": ["getConnectorId"], "fileName": "com.facebook.presto.raptor.RaptorOutputTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   distributionId ;", "}", "METHOD_END"], "methodName": ["getDistributionId"], "fileName": "com.facebook.presto.raptor.RaptorOutputTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   schemaName ;", "}", "METHOD_END"], "methodName": ["getSchemaName"], "fileName": "com.facebook.presto.raptor.RaptorOutputTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   sortColumnHandles ;", "}", "METHOD_END"], "methodName": ["getSortColumnHandles"], "fileName": "com.facebook.presto.raptor.RaptorOutputTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   sortOrders ;", "}", "METHOD_END"], "methodName": ["getSortOrders"], "fileName": "com.facebook.presto.raptor.RaptorOutputTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   tableName ;", "}", "METHOD_END"], "methodName": ["getTableName"], "fileName": "com.facebook.presto.raptor.RaptorOutputTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   temporalColumnHandle ;", "}", "METHOD_END"], "methodName": ["getTemporalColumnHandle"], "fileName": "com.facebook.presto.raptor.RaptorOutputTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   transactionId ;", "}", "METHOD_END"], "methodName": ["getTransactionId"], "fileName": "com.facebook.presto.raptor.RaptorOutputTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   organized ;", "}", "METHOD_END"], "methodName": ["isOrganized"], "fileName": "com.facebook.presto.raptor.RaptorOutputTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   new   PageBuffer ( maxBufferBytes ,    storageManager . createStoragePageSink ( transactionId ,    bucketNumber ,    columnIds ,    columnTypes ,    true )  ,    columnTypes ,    sortFields ,    sortOrders ,    pageSorter )  ;", "}", "METHOD_END"], "methodName": ["createPageBuffer"], "fileName": "com.facebook.presto.raptor.RaptorPageSink"}, {"methodBody": ["METHOD_START", "{", "return   columnHandles . stream (  )  . map ( RaptorColumnHandle :  : getColumnId )  . collect ( Collectors . toList (  )  )  ;", "}", "METHOD_END"], "methodName": ["toColumnIds"], "fileName": "com.facebook.presto.raptor.RaptorPageSinkProvider"}, {"methodBody": ["METHOD_START", "{", "List < RaptorColumnHandle >    columnHandles    =    columns . stream (  )  . map ( RaptorColumnHandle . class :  : cast )  . collect ( Collectors . toList (  )  )  ;", "List < Long >    columnIds    =    columnHandles . stream (  )  . map ( RaptorColumnHandle :  : getColumnId )  . collect ( Collectors . toList (  )  )  ;", "List < Type >    columnTypes    =    columnHandles . stream (  )  . map ( RaptorColumnHandle :  : getColumnType )  . collect ( Collectors . toList (  )  )  ;", "return   storageManager . get ( shardUuid ,    bucketNumber ,    columnIds ,    columnTypes ,    predicate ,    attributes ,    transactionId )  ;", "}", "METHOD_END"], "methodName": ["createPageSource"], "fileName": "com.facebook.presto.raptor.RaptorPageSourceProvider"}, {"methodBody": ["METHOD_START", "{", "return   bucketToNode ;", "}", "METHOD_END"], "methodName": ["getBucketToNode"], "fileName": "com.facebook.presto.raptor.RaptorPartitioningHandle"}, {"methodBody": ["METHOD_START", "{", "return   distributionId ;", "}", "METHOD_END"], "methodName": ["getDistributionId"], "fileName": "com.facebook.presto.raptor.RaptorPartitioningHandle"}, {"methodBody": ["METHOD_START", "{", "ClassLoader   classLoader    =    RaptorPlugin . class . getClassLoader (  )  ;", "ServiceLoader < PluginInfo >    loader    =    ServiceLoader . load ( PluginInfo . class ,    classLoader )  ;", "List < PluginInfo >    list    =    ImmutableList . copyOf ( loader )  ;", "return   list . isEmpty (  )     ?    new   PluginInfo (  )     :    getOnlyElement ( list )  ;", "}", "METHOD_END"], "methodName": ["getPluginInfo"], "fileName": "com.facebook.presto.raptor.RaptorPlugin"}, {"methodBody": ["METHOD_START", "{", "QualifiedObjectName   source    =    new   QualifiedObjectName ( catalog ,    schema ,    table . getTableName (  )  )  ;", "String   target    =    table . getTableName (  )  ;", "String   with    =     ( properties . isEmpty (  )  )     ?     \"  \"     :    String . format (  \"    WITH    (  % s )  \"  ,    properties )  ;", "@ Language (  \" SQL \"  )", "String   sql    =    String . format (  \" CREATE   TABLE    % s % s   AS   SELECT    *    FROM    % s \"  ,    target ,    with ,    source )  ;", ". log . info (  \" Running   import   for    % s \"  ,    target )  ;", "long   start    =    System . nanoTime (  )  ;", "long   rows    =    queryRunner . execute ( session ,    sql )  . getUpdateCount (  )  . getAsLong (  )  ;", ". log . info (  \" Imported    % s   rows   for    % s   in    % s \"  ,    rows ,    target ,    nanosSince ( start )  )  ;", "}", "METHOD_END"], "methodName": ["copyTable"], "fileName": "com.facebook.presto.raptor.RaptorQueryRunner"}, {"methodBody": ["METHOD_START", "{", "String   schema    =    TINY _ SCHEMA _ NAME ;", "if    (  ! bucketed )     {", "copyTpchTables ( queryRunner ,    catalog ,    schema ,    session ,    TpchTable . getTables (  )  )  ;", "return ;", "}", "Map < TpchTable <  ?  >  ,    String >    tables    =    ImmutableMap .  < TpchTable <  ?  >  ,    String > builder (  )  . put ( ORDERS ,     \" bucket _ count    =     2  5  ,    bucketed _ on    =    ARRAY [  ' orderkey '  ]  ,    distribution _ name    =     ' order '  \"  )  . put ( LINE _ ITEM ,     \" bucket _ count    =     2  5  ,    bucketed _ on    =    ARRAY [  ' orderkey '  ]  ,    distribution _ name    =     ' order '  \"  )  . put ( PART ,     \" bucket _ count    =     2  0  ,    bucketed _ on    =    ARRAY [  ' partkey '  ]  ,    distribution _ name    =     ' part '  \"  )  . put ( PART _ SUPPLIER ,     \" bucket _ count    =     2  0  ,    bucketed _ on    =    ARRAY [  ' partkey '  ]  ,    distribution _ name    =     ' part '  \"  )  . put ( SUPPLIER ,     \" bucket _ count    =     1  0  ,    bucketed _ on    =    ARRAY [  ' suppkey '  ]  \"  )  . put ( CUSTOMER ,     \" bucket _ count    =     1  0  ,    bucketed _ on    =    ARRAY [  ' custkey '  ]  \"  )  . put ( NATION ,     \"  \"  )  . put ( REGION ,     \"  \"  )  . build (  )  ;", ". log . info (  \" Loading   data   from    % s .  % s .  .  .  \"  ,    catalog ,    schema )  ;", "long   startTime    =    System . nanoTime (  )  ;", "for    ( Map . Entry < TpchTable <  ?  >  ,    String >    entry    :    tables . entrySet (  )  )     {", ". copyTable ( queryRunner ,    catalog ,    session ,    schema ,    entry . getKey (  )  ,    entry . getValue (  )  )  ;", "}", ". log . info (  \" Loading   from    % s .  % s   complete   in    % s \"  ,    catalog ,    schema ,    nanosSince ( startTime )  )  ;", "}", "METHOD_END"], "methodName": ["copyTables"], "fileName": "com.facebook.presto.raptor.RaptorQueryRunner"}, {"methodBody": ["METHOD_START", "{", "return   RaptorQueryRunner . createRaptorQueryRunner ( extraProperties ,    loadTpch ,    bucketed ,    ImmutableMap . of (  )  )  ;", "}", "METHOD_END"], "methodName": ["createRaptorQueryRunner"], "fileName": "com.facebook.presto.raptor.RaptorQueryRunner"}, {"methodBody": ["METHOD_START", "{", "DistributedQueryRunner   queryRunner    =    new   DistributedQueryRunner ( RaptorQueryRunner . createSession (  \" tpch \"  )  ,     2  ,    extraProperties )  ;", "queryRunner . installPlugin ( new   TpchPlugin (  )  )  ;", "queryRunner . createCatalog (  \" tpch \"  ,     \" tpch \"  )  ;", "queryRunner . installPlugin ( new   RaptorPlugin (  )  )  ;", "File   baseDir    =    queryRunner . getCoordinator (  )  . getBaseDataDir (  )  . toFile (  )  ;", "Map < String ,    String >    raptorProperties    =    ImmutableMap .  < String ,    String > builder (  )  . putAll ( extraRaptorProperties )  . put (  \" metadata . db . type \"  ,     \" h 2  \"  )  . put (  \" metadata . db . connections . max \"  ,     \"  1  0  0  \"  )  . put (  \" metadata . db . filename \"  ,    new   File ( baseDir ,     \" db \"  )  . getAbsolutePath (  )  )  . put (  \" storage . data - directory \"  ,    new   File ( baseDir ,     \" data \"  )  . getAbsolutePath (  )  )  . put (  \" storage . max - shard - rows \"  ,     \"  2  0  0  0  \"  )  . put (  \" backup . provider \"  ,     \" file \"  )  . put (  \" backup . directory \"  ,    new   File ( baseDir ,     \" backup \"  )  . getAbsolutePath (  )  )  . build (  )  ;", "queryRunner . createCatalog (  \" raptor \"  ,     \" raptor \"  ,    raptorProperties )  ;", "if    ( loadTpch )     {", "RaptorQueryRunner . copyTables ( queryRunner ,     \" tpch \"  ,    RaptorQueryRunner . createSession (  )  ,    bucketed )  ;", "}", "return   queryRunner ;", "}", "METHOD_END"], "methodName": ["createRaptorQueryRunner"], "fileName": "com.facebook.presto.raptor.RaptorQueryRunner"}, {"methodBody": ["METHOD_START", "{", "return   RaptorQueryRunner . createSession (  \" tpch \"  )  ;", "}", "METHOD_END"], "methodName": ["createSession"], "fileName": "com.facebook.presto.raptor.RaptorQueryRunner"}, {"methodBody": ["METHOD_START", "{", "SessionPropertyManager   sessionPropertyManager    =    new   SessionPropertyManager (  )  ;", "sessionPropertyManager . addConnectorSessionProperties ( new   ConnectorId (  \"  \"  )  ,    new   RaptorSessionProperties ( new   StorageManagerConfig (  )  )  . getSessionProperties (  )  )  ;", "return   testSessionBuilder ( sessionPropertyManager )  . setCatalog (  \"  \"  )  . setSchema ( schema )  . setSystemProperty (  \" enable _ intermediate _ aggregations \"  ,     \" true \"  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["createSession"], "fileName": "com.facebook.presto.raptor.RaptorQueryRunner"}, {"methodBody": ["METHOD_START", "{", "Logging . initialize (  )  ;", "Map < String ,    String >    properties    =    ImmutableMap . of (  \" http - server . http . port \"  ,     \"  8  0  8  0  \"  )  ;", "DistributedQueryRunner   queryRunner    =     . create ( properties ,    false ,    false )  ;", "Thread . sleep (  1  0  )  ;", "Logger   log    =    Logger . get (  . class )  ;", "log . info (  \"  =  =  =  =  =  =  =  =    SERVER   STARTED    =  =  =  =  =  =  =  =  \"  )  ;", "log . info (  \"  \\ n =  =  =  =  \\ n % s \\ n =  =  =  =  \"  ,    queryRunner . getCoordinator (  )  . getBaseUrl (  )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.raptor.RaptorQueryRunner"}, {"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . spi . session . PropertyMetadata ( name ,    description ,    createUnboundedVarcharType (  )  ,    DataSize . class ,    defaultValue ,    hidden ,     (    value )     -  >    DataSize . valueOf (  (  ( String )     ( value )  )  )  ,    DataSize :  : toString )  ;", "}", "METHOD_END"], "methodName": ["dataSizeSessionProperty"], "fileName": "com.facebook.presto.raptor.RaptorSessionProperties"}, {"methodBody": ["METHOD_START", "{", "return   Optional . ofNullable ( session . getProperty ( RaptorSessionProperties . EXTERNAL _ BATCH _ ID ,    String . class )  )  ;", "}", "METHOD_END"], "methodName": ["getExternalBatchId"], "fileName": "com.facebook.presto.raptor.RaptorSessionProperties"}, {"methodBody": ["METHOD_START", "{", "return   session . getProperty ( RaptorSessionProperties . ONE _ SPLIT _ PER _ BUCKET _ THRESHOLD ,    Integer . class )  ;", "}", "METHOD_END"], "methodName": ["getOneSplitPerBucketThreshold"], "fileName": "com.facebook.presto.raptor.RaptorSessionProperties"}, {"methodBody": ["METHOD_START", "{", "return   session . getProperty ( RaptorSessionProperties . READER _ MAX _ MERGE _ DISTANCE ,    DataSize . class )  ;", "}", "METHOD_END"], "methodName": ["getReaderMaxMergeDistance"], "fileName": "com.facebook.presto.raptor.RaptorSessionProperties"}, {"methodBody": ["METHOD_START", "{", "return   session . getProperty ( RaptorSessionProperties . READER _ MAX _ READ _ SIZE ,    DataSize . class )  ;", "}", "METHOD_END"], "methodName": ["getReaderMaxReadSize"], "fileName": "com.facebook.presto.raptor.RaptorSessionProperties"}, {"methodBody": ["METHOD_START", "{", "return   session . getProperty ( RaptorSessionProperties . READER _ STREAM _ BUFFER _ SIZE ,    DataSize . class )  ;", "}", "METHOD_END"], "methodName": ["getReaderStreamBufferSize"], "fileName": "com.facebook.presto.raptor.RaptorSessionProperties"}, {"methodBody": ["METHOD_START", "{", "return   sessionProperties ;", "}", "METHOD_END"], "methodName": ["getSessionProperties"], "fileName": "com.facebook.presto.raptor.RaptorSessionProperties"}, {"methodBody": ["METHOD_START", "{", "return   session . getProperty ( RaptorSessionProperties . READER _ LAZY _ READ _ SMALL _ RANGES ,    Boolean . class )  ;", "}", "METHOD_END"], "methodName": ["isReaderLazyReadSmallRanges"], "fileName": "com.facebook.presto.raptor.RaptorSessionProperties"}, {"methodBody": ["METHOD_START", "{", "return   bucketNumber ;", "}", "METHOD_END"], "methodName": ["getBucketNumber"], "fileName": "com.facebook.presto.raptor.RaptorSplit"}, {"methodBody": ["METHOD_START", "{", "return   connectorId ;", "}", "METHOD_END"], "methodName": ["getConnectorId"], "fileName": "com.facebook.presto.raptor.RaptorSplit"}, {"methodBody": ["METHOD_START", "{", "return   effectivePredicate ;", "}", "METHOD_END"], "methodName": ["getEffectivePredicate"], "fileName": "com.facebook.presto.raptor.RaptorSplit"}, {"methodBody": ["METHOD_START", "{", "return   shardUuids ;", "}", "METHOD_END"], "methodName": ["getShardUuids"], "fileName": "com.facebook.presto.raptor.RaptorSplit"}, {"methodBody": ["METHOD_START", "{", "return   transactionId ;", "}", "METHOD_END"], "methodName": ["getTransactionId"], "fileName": "com.facebook.presto.raptor.RaptorSplit"}, {"methodBody": ["METHOD_START", "{", "executor . shutdownNow (  )  ;", "}", "METHOD_END"], "methodName": ["destroy"], "fileName": "com.facebook.presto.raptor.RaptorSplitManager"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < HostAddress >    nodes    =    ImmutableList . builder (  )  ;", "for    ( String   id    :    nodeIdentifiers )     {", "Node   node    =    nodeMap . get ( id )  ;", "if    ( node    !  =    null )     {", "nodes . add ( node . getHostAndPort (  )  )  ;", "}", "}", "return   nodes . build (  )  ;", "}", "METHOD_END"], "methodName": ["getAddressesForNodes"], "fileName": "com.facebook.presto.raptor.RaptorSplitManager"}, {"methodBody": ["METHOD_START", "{", "List < T >    list    =    ImmutableList . copyOf ( elements )  ;", "return   list . get ( ThreadLocalRandcurrent (  )  . nextInt ( list . size (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["selectRandom"], "fileName": "com.facebook.presto.raptor.RaptorSplitManager"}, {"methodBody": ["METHOD_START", "{", "return   tupleDomain . transform (  (    handle )     -  >     (  ( RaptorColumnHandle )     ( handle )  )  )  ;", "}", "METHOD_END"], "methodName": ["toRaptorTupleDomain"], "fileName": "com.facebook.presto.raptor.RaptorSplitManager"}, {"methodBody": ["METHOD_START", "{", "return   bucketCount ;", "}", "METHOD_END"], "methodName": ["getBucketCount"], "fileName": "com.facebook.presto.raptor.RaptorTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   connectorId ;", "}", "METHOD_END"], "methodName": ["getConnectorId"], "fileName": "com.facebook.presto.raptor.RaptorTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   distributionId ;", "}", "METHOD_END"], "methodName": ["getDistributionId"], "fileName": "com.facebook.presto.raptor.RaptorTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   distributionName ;", "}", "METHOD_END"], "methodName": ["getDistributionName"], "fileName": "com.facebook.presto.raptor.RaptorTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   schemaName ;", "}", "METHOD_END"], "methodName": ["getSchemaName"], "fileName": "com.facebook.presto.raptor.RaptorTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   tableId ;", "}", "METHOD_END"], "methodName": ["getTableId"], "fileName": "com.facebook.presto.raptor.RaptorTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   tableName ;", "}", "METHOD_END"], "methodName": ["getTableName"], "fileName": "com.facebook.presto.raptor.RaptorTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   transactionId ;", "}", "METHOD_END"], "methodName": ["getTransactionId"], "fileName": "com.facebook.presto.raptor.RaptorTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   delete ;", "}", "METHOD_END"], "methodName": ["isDelete"], "fileName": "com.facebook.presto.raptor.RaptorTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   organized ;", "}", "METHOD_END"], "methodName": ["isOrganized"], "fileName": "com.facebook.presto.raptor.RaptorTableHandle"}, {"methodBody": ["METHOD_START", "{", "checkArgument (  (  ( bytes . length )     >  =     ( Byte . BYTES )  )  ,     \" bytes   for   RaptorTableIdentity   is   corrupt \"  )  ;", "ByteArrayDataInput   input    =    newDataInput ( bytes )  ;", "byte   version    =    input . readByte (  )  ;", "if    (  ( version    =  =     ( RaptorTableIdentity . CURRENT _ VERSION )  )     &  &     (  ( bytes . length )     =  =     ( RaptorTableIdentity . SERIALIZED _ SIZE )  )  )     {", "long   tableId    =    input . readLong (  )  ;", "return   new   RaptorTableIdentity ( tableId )  ;", "}", "throw   new   spi . PrestoException ( CORRUPT _ SERIALIZED _ IDENTITY ,     (  \" RaptorTableIdentity   is   corrupt :     \"     +     ( base 1  6  (  )  . lowerCase (  )  . encode ( bytes )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["deserialize"], "fileName": "com.facebook.presto.raptor.RaptorTableIdentity"}, {"methodBody": ["METHOD_START", "{", "return   constraint ;", "}", "METHOD_END"], "methodName": ["getConstraint"], "fileName": "com.facebook.presto.raptor.RaptorTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "return   partitioning ;", "}", "METHOD_END"], "methodName": ["getPartitioning"], "fileName": "com.facebook.presto.raptor.RaptorTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "return   table ;", "}", "METHOD_END"], "methodName": ["getTable"], "fileName": "com.facebook.presto.raptor.RaptorTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "return   RaptorTableProperties . stringList ( tableProperties . get ( RaptorTableProperties . BUCKETED _ ON _ PROPERTY )  )  ;", "}", "METHOD_END"], "methodName": ["getBucketColumns"], "fileName": "com.facebook.presto.raptor.RaptorTableProperties"}, {"methodBody": ["METHOD_START", "{", "Integer   value    =     (  ( Integer )     ( tableProperties . get ( RaptorTableProperties . BUCKET _ COUNT _ PROPERTY )  )  )  ;", "return   value    !  =    null    ?    OptionalInt . of ( value )     :    OptionalInt . empty (  )  ;", "}", "METHOD_END"], "methodName": ["getBucketCount"], "fileName": "com.facebook.presto.raptor.RaptorTableProperties"}, {"methodBody": ["METHOD_START", "{", "return    (  ( String )     ( tableProperties . get ( RaptorTableProperties . DISTRIBUTION _ NAME _ PROPERTY )  )  )  ;", "}", "METHOD_END"], "methodName": ["getDistributionName"], "fileName": "com.facebook.presto.raptor.RaptorTableProperties"}, {"methodBody": ["METHOD_START", "{", "return   RaptorTableProperties . stringList ( tableProperties . get ( RaptorTableProperties . ORDERING _ PROPERTY )  )  ;", "}", "METHOD_END"], "methodName": ["getSortColumns"], "fileName": "com.facebook.presto.raptor.RaptorTableProperties"}, {"methodBody": ["METHOD_START", "{", "return   tableProperties ;", "}", "METHOD_END"], "methodName": ["getTableProperties"], "fileName": "com.facebook.presto.raptor.RaptorTableProperties"}, {"methodBody": ["METHOD_START", "{", "return    (  ( String )     ( tableProperties . get ( RaptorTableProperties . TEMPORAL _ COLUMN _ PROPERTY )  )  )  ;", "}", "METHOD_END"], "methodName": ["getTemporalColumn"], "fileName": "com.facebook.presto.raptor.RaptorTableProperties"}, {"methodBody": ["METHOD_START", "{", "Boolean   value    =     (  ( Boolean )     ( tableProperties . get ( RaptorTableProperties . ORGANIZED _ PROPERTY )  )  )  ;", "return   value    =  =    null    ?    false    :    value ;", "}", "METHOD_END"], "methodName": ["isOrganized"], "fileName": "com.facebook.presto.raptor.RaptorTableProperties"}, {"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . spi . session . PropertyMetadata ( name ,    description ,    createUnboundedVarcharType (  )  ,    String . class ,    null ,    false ,     (    value )     -  >     (  ( String )     ( value )  )  . toLowerCase ( Locale . ENGLISH )  ,     (    value )     -  >    value )  ;", "}", "METHOD_END"], "methodName": ["lowerCaseStringSessionProperty"], "fileName": "com.facebook.presto.raptor.RaptorTableProperties"}, {"methodBody": ["METHOD_START", "{", "return   value    =  =    null    ?    ImmutableList . of (  )     :     (  ( List < String >  )     ( value )  )  ;", "}", "METHOD_END"], "methodName": ["stringList"], "fileName": "com.facebook.presto.raptor.RaptorTableProperties"}, {"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . spi . session . PropertyMetadata ( name ,    description ,    typeManager . getParameterizedType ( ARRAY ,    ImmutableList . of ( TypeSignatureParameter . of ( createUnboundedVarcharType (  )  . getTypeSignature (  )  )  )  )  ,    List . class ,    ImmutableList . of (  )  ,    false ,     (    value )     -  >    ImmutableList . copyOf ( stringList ( value )  . stream (  )  . map (  (    s )     -  >    s . toLowerCase ( Locale . ENGLISH )  )  . collect ( toList (  )  )  )  ,     (    value )     -  >    value )  ;", "}", "METHOD_END"], "methodName": ["stringListSessionProperty"], "fileName": "com.facebook.presto.raptor.RaptorTableProperties"}, {"methodBody": ["METHOD_START", "{", "return   uuid ;", "}", "METHOD_END"], "methodName": ["getUuid"], "fileName": "com.facebook.presto.raptor.RaptorTransactionHandle"}, {"methodBody": ["METHOD_START", "{", "return   new   RaptorBucketFunction ( bucketCount ,    ImmutableList . copyOf ( types )  )  ;", "}", "METHOD_END"], "methodName": ["bucketFunction"], "fileName": "com.facebook.presto.raptor.TestRaptorBucketFunction"}, {"methodBody": ["METHOD_START", "{", "return   function . getBucket ( new   com . facebook . presto . spi . Page ( blocks )  ,     0  )  ;", "}", "METHOD_END"], "methodName": ["getBucket"], "fileName": "com.facebook.presto.raptor.TestRaptorBucketFunction"}, {"methodBody": ["METHOD_START", "{", "BucketFunction   function    =    TestRaptorBucketFunction . bucketFunction (  5  0  ,    BIGINT )  ;", "assertEquals ( TestRaptorBucketFunction . getBucket ( function ,    createLongsBlock (  1  2  3  4  5  6  7  8  9  0  1  2 L )  )  ,     1  2  )  ;", "assertEquals ( TestRaptorBucketFunction . getBucket ( function ,    createLongsBlock (  4  5  4  3  4  5  3  2  5  )  )  ,     1  6  )  ;", "assertEquals ( TestRaptorBucketFunction . getBucket ( function ,    createLongsBlock (  3  6  5  3  6  3  )  )  ,     4  2  )  ;", "assertEquals ( TestRaptorBucketFunction . getBucket ( function ,    createLongsBlock (  4  5  6  4  5  7  4  7  )  )  ,     4  1  )  ;", "assertEquals ( TestRaptorBucketFunction . getBucket ( function ,    createLongsBlock (  3  2  4  4  )  )  ,     2  9  )  ;", "function    =    TestRaptorBucketFunction . bucketFunction (  2  ,    BIGINT )  ;", "assertEquals ( TestRaptorBucketFunction . getBucket ( function ,    createLongsBlock (  1  2  3  4  5  6  7  8  9  0  1  2 L )  )  ,     0  )  ;", "assertEquals ( TestRaptorBucketFunction . getBucket ( function ,    createLongsBlock (  4  5  4  3  4  5  3  2  5  )  )  ,     0  )  ;", "assertEquals ( TestRaptorBucketFunction . getBucket ( function ,    createLongsBlock (  3  6  5  3  6  3  )  )  ,     0  )  ;", "assertEquals ( TestRaptorBucketFunction . getBucket ( function ,    createLongsBlock (  4  5  6  4  5  7  4  7  )  )  ,     1  )  ;", "assertEquals ( TestRaptorBucketFunction . getBucket ( function ,    createLongsBlock (  3  2  4  4  )  )  ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testBigint"], "fileName": "com.facebook.presto.raptor.TestRaptorBucketFunction"}, {"methodBody": ["METHOD_START", "{", "BucketFunction   function    =    TestRaptorBucketFunction . bucketFunction (  5  0  ,    INTEGER )  ;", "assertEquals ( TestRaptorBucketFunction . getBucket ( function ,    createIntsBlock (  4  5  4  3  4  5  3  2  5  )  )  ,     1  6  )  ;", "assertEquals ( TestRaptorBucketFunction . getBucket ( function ,    createIntsBlock (  3  6  5  3  6  3  )  )  ,     4  2  )  ;", "assertEquals ( TestRaptorBucketFunction . getBucket ( function ,    createIntsBlock (  4  5  6  4  5  7  4  7  )  )  ,     4  1  )  ;", "assertEquals ( TestRaptorBucketFunction . getBucket ( function ,    createIntsBlock (  3  2  4  4  )  )  ,     2  9  )  ;", "}", "METHOD_END"], "methodName": ["testInteger"], "fileName": "com.facebook.presto.raptor.TestRaptorBucketFunction"}, {"methodBody": ["METHOD_START", "{", "BucketFunction   function    =    TestRaptorBucketFunction . bucketFunction (  5  0  ,    createUnboundedVarcharType (  )  )  ;", "assertEquals ( TestRaptorBucketFunction . getBucket ( function ,    createStringsBlock (  \" lorem   ipsum \"  )  )  ,     2  )  ;", "assertEquals ( TestRaptorBucketFunction . getBucket ( function ,    createStringsBlock (  \" lorem \"  )  )  ,     2  6  )  ;", "assertEquals ( TestRaptorBucketFunction . getBucket ( function ,    createStringsBlock (  \" ipsum \"  )  )  ,     3  )  ;", "assertEquals ( TestRaptorBucketFunction . getBucket ( function ,    createStringsBlock (  \" hello \"  )  )  ,     1  9  )  ;", "}", "METHOD_END"], "methodName": ["testVarchar"], "fileName": "com.facebook.presto.raptor.TestRaptorBucketFunction"}, {"methodBody": ["METHOD_START", "{", "BucketFunction   function    =    TestRaptorBucketFunction . bucketFunction (  5  0  ,    createUnboundedVarcharType (  )  ,    BIGINT )  ;", "assertEquals ( TestRaptorBucketFunction . getBucket ( function ,    createStringsBlock (  \" lorem   ipsum \"  )  ,    createLongsBlock (  1  2  3  4  5  6  7  8  9  0  1  2 L )  )  ,     2  4  )  ;", "assertEquals ( TestRaptorBucketFunction . getBucket ( function ,    createStringsBlock (  \" lorem \"  )  ,    createLongsBlock (  4  5  4  3  4  5  3  2  5  )  )  ,     3  2  )  ;", "assertEquals ( TestRaptorBucketFunction . getBucket ( function ,    createStringsBlock (  \" ipsum \"  )  ,    createLongsBlock (  3  6  5  3  6  3  )  )  ,     2  1  )  ;", "assertEquals ( TestRaptorBucketFunction . getBucket ( function ,    createStringsBlock (  \" hello \"  )  ,    createLongsBlock (  4  5  6  4  5  7  4  7  )  )  ,     3  4  )  ;", "assertEquals ( TestRaptorBucketFunction . getBucket ( function ,    createStringsBlock (  \" world \"  )  ,    createLongsBlock (  3  2  4  4  )  )  ,     4  )  ;", "}", "METHOD_END"], "methodName": ["testVarcharBigint"], "fileName": "com.facebook.presto.raptor.TestRaptorBucketFunction"}, {"methodBody": ["METHOD_START", "{", "ConnectorSession   session    =    new   com . facebook . presto . testing . TestingConnectorSession (  \" user \"  ,    Optional . of (  \" test \"  )  ,    getTimeZoneKey ( userTimeZone )  ,    Locale . ENGLISH ,    System . currentTimeMillis (  )  ,    new   RaptorSessionProperties ( new   StorageManagerConfig (  )  )  . getSessionProperties (  )  ,    ImmutableMap . of (  )  ,    true )  ;", "ConnectorTransactionHandle   transaction    =    connector . beginTransaction ( READ _ COMMITTED ,    false )  ;", "connector . getMetadata ( transaction )  . createTable ( SESSION ,    new   com . facebook . presto . spi . ConnectorTableMetadata ( new   SchemaTableName (  \" test \"  ,     \" test \"  )  ,    ImmutableList . of ( new   com . facebook . presto . spi . ColumnMetadata (  \" id \"  ,    BIGINT )  ,    new   com . facebook . presto . spi . ColumnMetadata (  \" time \"  ,    temporalType )  )  ,    ImmutableMap . of ( RaptorTableProperties . TEMPORAL _ COLUMN _ PROPERTY ,     \" time \"  )  )  ,    false )  ;", "connector . commit ( transaction )  ;", "ConnectorTransactionHandle   txn 1     =    connector . beginTransaction ( READ _ COMMITTED ,    false )  ;", "ConnectorTableHandle   handle 1     =    TestRaptorConnector . getTableHandle ( connector . getMetadata ( txn 1  )  ,     \" test \"  )  ;", "ConnectorInsertTableHandle   insertTableHandle    =    connector . getMetadata ( txn 1  )  . beginInsert ( session ,    handle 1  )  ;", "ConnectorPageSink   raptorPageSink    =    connector . getPageSinkProvider (  )  . createPageSink ( txn 1  ,    session ,    insertTableHandle )  ;", "Object   timestamp 1     =    null ;", "Object   timestamp 2     =    null ;", "if    ( temporalType . equals ( TIMESTAMP )  )     {", "timestamp 1     =    new   com . facebook . presto . spi . type . SqlTimestamp ( parseTimestampLiteral ( getTimeZoneKey ( userTimeZone )  ,    min )  ,    getTimeZoneKey ( userTimeZone )  )  ;", "timestamp 2     =    new   com . facebook . presto . spi . type . SqlTimestamp ( parseTimestampLiteral ( getTimeZoneKey ( userTimeZone )  ,    max )  ,    getTimeZoneKey ( userTimeZone )  )  ;", "} else", "if    ( temporalType . equals ( DATE )  )     {", "timestamp 1     =    new   com . facebook . presto . spi . type . SqlDate ( parseDate ( min )  )  ;", "timestamp 2     =    new   com . facebook . presto . spi . type . SqlDate ( parseDate ( max )  )  ;", "}", "Page   inputPage    =    MaterializedResult . resultBuilder ( session ,    ImmutableList . of ( BIGINT ,    temporalType )  )  . row (  1 L ,    timestamp 1  )  . row (  2 L ,    timestamp 2  )  . build (  )  . toPage (  )  ;", "raptorPageSink . appendPage ( inputPage )  ;", "Collection < Slice >    shards    =    raptorPageSink . finish (  )  . get (  )  ;", "assertEquals ( shards . size (  )  ,    expectedSplits )  ;", "connector . getMetadata ( txn 1  )  . dropTable ( session ,    handle 1  )  ;", "connector . commit ( txn 1  )  ;", "}", "METHOD_END"], "methodName": ["assertSplitShard"], "fileName": "com.facebook.presto.raptor.TestRaptorConnector"}, {"methodBody": ["METHOD_START", "{", "ConnectorTransactionHandle   transaction    =    connector . beginTransaction ( READ _ COMMITTED ,    false )  ;", "connector . getMetadata ( transaction )  . createTable ( SESSION ,    new   spi . ConnectorTableMetadata ( new   SchemaTableName (  \" test \"  ,    name )  ,    ImmutableList . of ( new   spi . ColumnMetadata (  \" id \"  ,    BIGINT )  )  )  ,    false )  ;", "connector . commit ( transaction )  ;", "transaction    =    connector . beginTransaction ( READ _ COMMITTED ,    false )  ;", "ConnectorTableHandle   tableHandle    =    TestRaptorConnector . getTableHandle ( connector . getMetadata ( transaction )  ,    name )  ;", "connector . commit ( transaction )  ;", "return    (  ( RaptorTableHandle )     ( tableHandle )  )  . getTableId (  )  ;", "}", "METHOD_END"], "methodName": ["createTable"], "fileName": "com.facebook.presto.raptor.TestRaptorConnector"}, {"methodBody": ["METHOD_START", "{", "return   metadata . getTableHandle ( SESSION ,    new   SchemaTableName (  \" test \"  ,    name )  )  ;", "}", "METHOD_END"], "methodName": ["getTableHandle"], "fileName": "com.facebook.presto.raptor.TestRaptorConnector"}, {"methodBody": ["METHOD_START", "{", "TypeRegistry   typeRegistry    =    new   TypeRegistry (  )  ;", "DBI   dbi    =    new   DBI (  (  \" jdbc : h 2  : mem : test \"     +     ( System . nanoTime (  )  )  )  )  ;", "dbi . registerMapper ( new   TableColumn . Mapper ( typeRegistry )  )  ;", "dummyHandle    =    dbi . open (  )  ;", "metadataDao    =    dbi . onDemand ( MetadataDao . class )  ;", "SchemaDaoUtil . createTablesWithRetry ( dbi )  ;", "dataDir    =    Files . createTempDir (  )  ;", "RaptorConnectorId   connectorId    =    new   RaptorConnectorId (  \" test \"  )  ;", "NodeManager   nodeManager    =    new   TestingNodeManager (  )  ;", "NodeSupplier   nodeSupplier    =    nodeManager :  : getWorkerNodes ;", "ShardManager   shardManager    =    TestDatabaseShardManager . createShardManager ( dbi )  ;", "StorageManager   storageManager    =    TestOrcStorageManager . createOrcStorageManager ( dbi ,    dataDir )  ;", "StorageManagerConfig   config    =    new   StorageManagerConfig (  )  ;", "connector    =    new   RaptorConnector ( new   io . airlift . bootstrap . LifeCycleManager ( ImmutableList . of (  )  ,    null )  ,    new   TestingNodeManager (  )  ,    new   RaptorMetadataFactory ( connectorId ,    dbi ,    shardManager )  ,    new   RaptorSplitManager ( connectorId ,    nodeSupplier ,    shardManager ,    false )  ,    new   RaptorPageSourceProvider ( storageManager )  ,    new   RaptorPageSinkProvider ( storageManager ,    new   PagesIndexPageSorter ( new   PagesIndex . TestingFactory ( false )  )  ,    new   TemporalFunction ( DateTimeZone . forID (  \" America / Los _ Angeles \"  )  )  ,    config )  ,    new   RaptorNodePartitioningProvider ( nodeSupplier )  ,    new   RaptorSessionProperties ( config )  ,    new   RaptorTableProperties ( typeRegistry )  ,    ImmutableSet . of (  )  ,    new   AllowAllAccessControl (  )  ,    dbi )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.raptor.TestRaptorConnector"}, {"methodBody": ["METHOD_START", "{", "dummyHandle . close (  )  ;", "deleteRecursively ( dataDir . Path (  )  ,    ALLOW _ INSECURE )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.raptor.TestRaptorConnector"}, {"methodBody": ["METHOD_START", "{", "long   tableId 1     =    createTable (  \" test 1  \"  )  ;", "long   tableId 2     =    createTable (  \" test 2  \"  )  ;", "assertFalse ( metadataDao . isMaintenanceBlockedLocked ( tableId 1  )  )  ;", "assertFalse ( metadataDao . isMaintenanceBlockedLocked ( tableId 2  )  )  ;", "ConnectorTransactionHandle   txn 1     =    connector . beginTransaction ( READ _ COMMITTED ,    false )  ;", "ConnectorTableHandle   handle 1     =     . getTableHandle ( connector . getMetadata ( txn 1  )  ,     \" test 1  \"  )  ;", "connector . getMetadata ( txn 1  )  . beginDelete ( SESSION ,    handle 1  )  ;", "assertTrue ( metadataDao . isMaintenanceBlockedLocked ( tableId 1  )  )  ;", "assertFalse ( metadataDao . isMaintenanceBlockedLocked ( tableId 2  )  )  ;", "ConnectorTransactionHandle   txn 2     =    connector . beginTransaction ( READ _ COMMITTED ,    false )  ;", "ConnectorTableHandle   handle 2     =     . getTableHandle ( connector . getMetadata ( txn 2  )  ,     \" test 2  \"  )  ;", "connector . getMetadata ( txn 2  )  . beginDelete ( SESSION ,    handle 2  )  ;", "assertTrue ( metadataDao . isMaintenanceBlockedLocked ( tableId 1  )  )  ;", "assertTrue ( metadataDao . isMaintenanceBlockedLocked ( tableId 2  )  )  ;", "ConnectorTransactionHandle   txn 3     =    connector . beginTransaction ( READ _ COMMITTED ,    false )  ;", "ConnectorTableHandle   handle 3     =     . getTableHandle ( connector . getMetadata ( txn 3  )  ,     \" test 1  \"  )  ;", "connector . getMetadata ( txn 3  )  . beginDelete ( SESSION ,    handle 3  )  ;", "assertTrue ( metadataDao . isMaintenanceBlockedLocked ( tableId 1  )  )  ;", "assertTrue ( metadataDao . isMaintenanceBlockedLocked ( tableId 2  )  )  ;", "connector . commit ( txn 1  )  ;", "assertTrue ( metadataDao . isMaintenanceBlockedLocked ( tableId 1  )  )  ;", "assertTrue ( metadataDao . isMaintenanceBlockedLocked ( tableId 2  )  )  ;", "connector . rollback ( txn 3  )  ;", "assertFalse ( metadataDao . isMaintenanceBlockedLocked ( tableId 1  )  )  ;", "assertTrue ( metadataDao . isMaintenanceBlockedLocked ( tableId 2  )  )  ;", "connector . commit ( txn 2  )  ;", "assertFalse ( metadataDao . isMaintenanceBlockedLocked ( tableId 1  )  )  ;", "assertFalse ( metadataDao . isMaintenanceBlockedLocked ( tableId 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testMaintenanceBlocked"], "fileName": "com.facebook.presto.raptor.TestRaptorConnector"}, {"methodBody": ["METHOD_START", "{", "long   tableId    =    createTable (  \" test \"  )  ;", "assertFalse ( metadataDao . isMaintenanceBlockedLocked ( tableId )  )  ;", "metadataDao . blockMaintenance ( tableId )  ;", "assertTrue ( metadataDao . isMaintenanceBlockedLocked ( tableId )  )  ;", "c . start (  )  ;", "assertFalse ( metadataDao . isMaintenanceBlockedLocked ( tableId )  )  ;", "}", "METHOD_END"], "methodName": ["testMaintenanceUnblockedOnStart"], "fileName": "com.facebook.presto.raptor.TestRaptorConnector"}, {"methodBody": ["METHOD_START", "{", "assertSplitShard ( DATE ,     \"  2  0  0  1  -  0  8  -  2  2  \"  ,     \"  2  0  0  1  -  0  8  -  2  2  \"  ,     \" UTC \"  ,     1  )  ;", "assertSplitShard ( DATE ,     \"  2  0  0  1  -  0  8  -  2  2  \"  ,     \"  2  0  0  1  -  0  8  -  2  2  \"  ,     \" America / Los _ Angel \"  ,     1  )  ;", "assertSplitShard ( TIMESTAMP ,     \"  2  0  0  1  -  0  8  -  2  2     0  0  :  0  0  :  0  1  .  0  0  0  \"  ,     \"  2  0  0  1  -  0  8  -  2  2     2  3  :  5  9  :  0  1  .  0  0  0  \"  ,     \" UTC \"  ,     2  )  ;", "assertSplitShard ( TIMESTAMP ,     \"  2  0  0  1  -  0  8  -  2  2     0  0  :  0  0  :  0  1  .  0  0  0  \"  ,     \"  2  0  0  1  -  0  8  -  2  2     2  3  :  5  9  :  0  1  .  0  0  0  \"  ,     \" America / Los _ Angel \"  ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testTemporalShardSplit"], "fileName": "com.facebook.presto.raptor.TestRaptorConnector"}, {"methodBody": ["METHOD_START", "{", "assertUpdate (  (  \"  \"     +     (  (  \" CREATE   TABLE   test _ bucket _ number    \"     +     \" WITH    ( bucket _ count    =     5  0  ,    bucketed _ on    =    ARRAY    [  ' orderkey '  ]  )     \"  )     +     \" AS   SELECT    *    FROM   orders \"  )  )  ,     \" SELECT   count (  *  )    FROM   orders \"  )  ;", "MaterializedResult   actualResults    =    computeActual (  \" SELECT   DISTINCT    \\  \"  $ bucket _ number \\  \"    FROM   test _ bucket _ number \"  )  ;", "assertEquals ( actualResults . getTypes (  )  ,    ImmutableList . of ( INTEGER )  )  ;", "Set < Object >    actual    =    actualResults . getMaterializedRows (  )  . stream (  )  . map (  (    row )     -  >    row . getField (  0  )  )  . collect ( Collectors . toSet (  )  )  ;", "assertEquals ( actual ,    IntStream . range (  0  ,     5  0  )  . boxed (  )  . collect ( Collectors . toSet (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testBucketNumberHiddenColumn"], "fileName": "com.facebook.presto.raptor.TestRaptorIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertUpdate (  (  \"  \"     +     (  (  \" CREATE   TABLE   orders _ bucketed _ mixed    \"     +     \" WITH    ( bucket _ count    =     5  0  ,    bucketed _ on    =    ARRAY    [  ' custkey '  ,     ' clerk '  ,     ' shippriority '  ]  )     \"  )     +     \" AS   SELECT    *    FROM   orders \"  )  )  ,     \" SELECT   count (  *  )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT    *    FROM   orders _ bucketed _ mixed \"  ,     \" SELECT    *    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   count (  *  )    FROM   orders _ bucketed _ mixed \"  ,     \" SELECT   count (  *  )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   count ( DISTINCT    \\  \"  $ shard _ uuid \\  \"  )    FROM   orders _ bucketed _ mixed \"  ,     \" SELECT    5  0  \"  )  ;", "assertQuery (  \" SELECT   count ( DISTINCT    \\  \"  $ bucket _ number \\  \"  )    FROM   orders _ bucketed _ mixed \"  ,     \" SELECT    5  0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testBucketingMixedTypes"], "fileName": "com.facebook.presto.raptor.TestRaptorIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertUpdate (  \" CREATE   TABLE   array _ test   AS   SELECT   ARRAY    [  1  ,     2  ,     3  ]    AS   c \"  ,     1  )  ;", "assertQuery (  \" SELECT   cardinality ( c )    FROM   array _ test \"  ,     \" SELECT    3  \"  )  ;", "assertUpdate (  \" DROP   TABLE   array _ test \"  )  ;", "}", "METHOD_END"], "methodName": ["testCreateArrayTable"], "fileName": "com.facebook.presto.raptor.TestRaptorIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertUpdate (  (  \"  \"     +     (  (  \" CREATE   TABLE   orders _ bucketed    \"     +     \" WITH    ( bucket _ count    =     5  0  ,    bucketed _ on    =    ARRAY    [  ' orderkey '  ]  )     \"  )     +     \" AS   SELECT    *    FROM   orders \"  )  )  ,     \" SELECT   count (  *  )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT    *    FROM   orders _ bucketed \"  ,     \" SELECT    *    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   count (  *  )    FROM   orders _ bucketed \"  ,     \" SELECT   count (  *  )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   count ( DISTINCT    \\  \"  $ shard _ uuid \\  \"  )    FROM   orders _ bucketed \"  ,     \" SELECT    5  0  \"  )  ;", "assertQuery (  \" SELECT   count ( DISTINCT    \\  \"  $ bucket _ number \\  \"  )    FROM   orders _ bucketed \"  ,     \" SELECT    5  0  \"  )  ;", "assertUpdate (  \" INSERT   INTO   orders _ bucketed   SELECT    *    FROM   orders \"  ,     \" SELECT   count (  *  )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT    *    FROM   orders _ bucketed \"  ,     \" SELECT    *    FROM   orders   UNION   ALL   SELECT    *    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   count (  *  )    FROM   orders _ bucketed \"  ,     \" SELECT   count (  *  )     *     2    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   count ( DISTINCT    \\  \"  $ shard _ uuid \\  \"  )    FROM   orders _ bucketed \"  ,     \" SELECT    5  0     *     2  \"  )  ;", "assertQuery (  \" SELECT   count ( DISTINCT    \\  \"  $ bucket _ number \\  \"  )    FROM   orders _ bucketed \"  ,     \" SELECT    5  0  \"  )  ;", "assertQuery (  \" SELECT   count (  *  )    FROM   orders _ bucketed   a   JOIN   orders _ bucketed   b   USING    ( orderkey )  \"  ,     \" SELECT   count (  *  )     *     4    FROM   orders \"  )  ;", "assertUpdate (  \" DELETE   FROM   orders _ bucketed   WHERE   orderkey    =     3  7  \"  ,     2  )  ;", "assertQuery (  \" SELECT   count (  *  )    FROM   orders _ bucketed \"  ,     \" SELECT    ( count (  *  )     *     2  )     -     2    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   count ( DISTINCT    \\  \"  $ shard _ uuid \\  \"  )    FROM   orders _ bucketed \"  ,     \" SELECT    5  0     *     2  \"  )  ;", "assertQuery (  \" SELECT   count ( DISTINCT    \\  \"  $ bucket _ number \\  \"  )    FROM   orders _ bucketed \"  ,     \" SELECT    5  0  \"  )  ;", "assertUpdate (  \" DROP   TABLE   orders _ bucketed \"  )  ;", "}", "METHOD_END"], "methodName": ["testCreateBucketedTable"], "fileName": "com.facebook.presto.raptor.TestRaptorIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertUpdate (  (  \"  \"     +     (  (  (  (  \" CREATE   TABLE   orders _ bucketed _ original    (  \"     +     \"       orderkey   bigint \"  )     +     \"  ,    custkey   bigint \"  )     +     \"  )     \"  )     +     \" WITH    ( bucket _ count    =     5  0  ,    bucketed _ on    =    ARRAY [  ' orderkey '  ]  )  \"  )  )  )  ;", "assertUpdate (  (  \"  \"     +     (  (  (  \" CREATE   TABLE   orders _ bucketed _ like    (  \"     +     \"       orderdate   date \"  )     +     \"  ,    LIKE   orders _ bucketed _ original   INCLUDING   PROPERTIES \"  )     +     \"  )  \"  )  )  )  ;", "assertUpdate (  \" INSERT   INTO   orders _ bucketed _ like   SELECT   orderdate ,    orderkey ,    custkey   FROM   orders \"  ,     \" SELECT   count (  *  )    FROM   orders \"  )  ;", "assertUpdate (  \" INSERT   INTO   orders _ bucketed _ like   SELECT   orderdate ,    orderkey ,    custkey   FROM   orders \"  ,     \" SELECT   count (  *  )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   count ( DISTINCT    \\  \"  $ shard _ uuid \\  \"  )    FROM   orders _ bucketed _ like \"  ,     \" SELECT    5  0     *     2  \"  )  ;", "assertUpdate (  \" DROP   TABLE   orders _ bucketed _ original \"  )  ;", "assertUpdate (  \" DROP   TABLE   orders _ bucketed _ like \"  )  ;", "}", "METHOD_END"], "methodName": ["testCreateBucketedTableLike"], "fileName": "com.facebook.presto.raptor.TestRaptorIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertUpdate (  \" CREATE   VIEW   view _ already _ exists   AS   SELECT    1    a \"  )  ;", "assertQueryFails (  \" CREATE   TABLE   view _ already _ exists ( a   ier )  \"  ,     \" View   already   exists :    tpch . view _ already _ exists \"  )  ;", "assertQueryFails (  \" CREATE   TABLE   View _ Already _ Exists ( a   ier )  \"  ,     \" View   already   exists :    tpch . view _ already _ exists \"  )  ;", "assertQueryFails (  \" CREATE   TABLE   view _ already _ exists   AS   SELECT    1    a \"  ,     \" View   already   exists :    tpch . view _ already _ exists \"  )  ;", "assertQueryFails (  \" CREATE   TABLE   View _ Already _ Exists   AS   SELECT    1    a \"  ,     \" View   already   exists :    tpch . view _ already _ exists \"  )  ;", "assertUpdate (  \" DROP   VIEW   view _ already _ exists \"  )  ;", "}", "METHOD_END"], "methodName": ["testCreateTableViewAlreadyExists"], "fileName": "com.facebook.presto.raptor.TestRaptorIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertUpdate (  \" CREATE   TABLE   table _ already _ exists    ( id   integer )  \"  )  ;", "assertQueryFails (  \" CREATE   VIEW   table _ already _ exists   AS   SELECT    1    a \"  ,     \" Table   already   exists :    tpch . table _ already _ exists \"  )  ;", "assertQueryFails (  \" CREATE   VIEW   Table _ Already _ Exists   AS   SELECT    1    a \"  ,     \" Table   already   exists :    tpch . table _ already _ exists \"  )  ;", "assertQueryFails (  \" CREATE   OR   REPLACE   VIEW   table _ already _ exists   AS   SELECT    1    a \"  ,     \" Table   already   exists :    tpch . table _ already _ exists \"  )  ;", "assertQueryFails (  \" CREATE   OR   REPLACE   VIEW   Table _ Already _ Exists   AS   SELECT    1    a \"  ,     \" Table   already   exists :    tpch . table _ already _ exists \"  )  ;", "assertUpdate (  \" DROP   TABLE   table _ already _ exists \"  )  ;", "}", "METHOD_END"], "methodName": ["testCreateViewTableAlreadyExists"], "fileName": "com.facebook.presto.raptor.TestRaptorIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertUpdate (  \" CREATE   TABLE   test _ decimal ( short _ decimal   DECIMAL (  5  ,  2  )  ,    long _ decimal   DECIMAL (  2  5  ,  2  0  )  )  \"  )  ;", "assertUpdate (  \" INSERT   INTO   test _ decimal   VALUES ( DECIMAL    '  1  2  3  .  4  5  '  ,    DECIMAL    '  1  2  3  4  5  .  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  '  )  \"  ,     \" VALUES (  1  )  \"  )  ;", "assertUpdate (  \" INSERT   INTO   test _ decimal   VALUES ( NULL ,    NULL )  \"  ,     \" VALUES (  1  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM   test _ decimal \"  ,     \" VALUES    (  1  2  3  .  4  5  ,     1  2  3  4  5  .  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  )  ,     ( NULL ,    NULL )  \"  )  ;", "assertUpdate (  \" DROP   TABLE   test _ decimal \"  )  ;", "}", "METHOD_END"], "methodName": ["testInsertSelectDecimal"], "fileName": "com.facebook.presto.raptor.TestRaptorIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertUpdate (  \" CREATE   TABLE   map _ test   AS   SELECT   MAP ( ARRAY    [  1  ,     2  ,     3  ]  ,    ARRAY    [  ' hi '  ,     ' bye '  ,    NULL ]  )    AS   c \"  ,     1  )  ;", "assertQuery (  \" SELECT   c [  1  ]    FROM   map _ test \"  ,     \" SELECT    ' hi '  \"  )  ;", "assertQuery (  \" SELECT   c [  3  ]    FROM   map _ test \"  ,     \" SELECT   NULL \"  )  ;", "assertUpdate (  \" DROP   TABLE   map _ test \"  )  ;", "}", "METHOD_END"], "methodName": ["testMapTable"], "fileName": "com.facebook.presto.raptor.TestRaptorIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertUpdate (  \" CREATE   TABLE   test _ shard _ uuid   AS   SELECT   orderdate ,    orderkey   FROM   orders \"  ,     \" SELECT   count (  *  )    FROM   orders \"  )  ;", "MaterializedResult   actualResults    =    computeActual (  \" SELECT    *  ,     \\  \"  $ shard _ uuid \\  \"    FROM   test _ shard _ uuid \"  )  ;", "assertEquals ( actualResults . getTypes (  )  ,    ImmutableList . of ( DATE ,    BIGINT ,    ColumnHandle . SHARD _ UUID _ COLUMN _ TYPE )  )  ;", "UUID   arbitraryUuid    =    null ;", "for    ( MaterializedRow   row    :    actualResults . getMaterializedRows (  )  )     {", "Object   uuid    =    row . getField (  2  )  ;", "Assertions . assertInstanceOf ( uuid ,    String . class )  ;", "arbitraryUuid    =    UUID . fromString (  (  ( String )     ( uuid )  )  )  ;", "}", "assertNotNull ( arbitraryUuid )  ;", "actualResults    =    computeActual ( String . format (  \" SELECT    *    FROM   test _ shard _ uuid   where    \\  \"  $ shard _ uuid \\  \"     =     \\  '  % s \\  '  \"  ,    arbitraryUuid )  )  ;", "assertNotEquals ( actualResults . getMaterializedRows (  )  . size (  )  ,     0  )  ;", "actualResults    =    computeActual (  \" SELECT    *    FROM   test _ shard _ uuid   where    \\  \"  $ shard _ uuid \\  \"     =     \\  ' foo \\  '  \"  )  ;", "assertEquals ( actualResults . getMaterializedRows (  )  . size (  )  ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testShardUuidHiddenColumn"], "fileName": "com.facebook.presto.raptor.TestRaptorIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( computeActual (  \" SELECT   count ( DISTINCT   orderdate )     >  =     2    FROM   orders   WHERE   orderdate    <    date    '  1  9  9  2  -  0  2  -  0  8  '  \"  )  . getOnlyValue (  )  ,    true )  ;", "assertUpdate (  (  \" CREATE   TABLE   test _ shard _ temporal _ date    \"     +     (  (  (  \" WITH    ( temporal _ column    =     ' orderdate '  )    AS    \"     +     \" SELECT   orderdate ,    orderkey    \"  )     +     \" FROM   orders    \"  )     +     \" WHERE   orderdate    <    date    '  1  9  9  2  -  0  2  -  0  8  '  \"  )  )  ,     (  \" SELECT   count (  *  )     \"     +     (  \" FROM   orders    \"     +     \" WHERE   orderdate    <    date    '  1  9  9  2  -  0  2  -  0  8  '  \"  )  )  )  ;", "MaterializedResult   results    =    computeActual (  \" SELECT   orderdate ,     \\  \"  $ shard _ uuid \\  \"    FROM   test _ shard _ temporal _ date \"  )  ;", "SetMultimap < String ,    LocalDate >    shardDateMap    =    HashMultimap . create (  )  ;", "for    ( MaterializedRow   row    :    results . getMaterializedRows (  )  )     {", "shardDateMap . put (  (  ( String )     ( row . getField (  1  )  )  )  ,     (  ( LocalDate )     ( row . getField (  0  )  )  )  )  ;", "}", "for    ( Collec < LocalDate >    dates    :    shardDateMap . asMap (  )  . values (  )  )     {", "assertEquals ( dates . size (  )  ,     1  )  ;", "}", "assertQuery (  \" SELECT   orderdate ,    orderkey   FROM   test _ shard _ temporal _ date \"  ,     \" SELECT   orderdate ,    orderkey   FROM   orders   WHERE   orderdate    <    date    '  1  9  9  2  -  0  2  -  0  8  '  \"  )  ;", "}", "METHOD_END"], "methodName": ["testShardingByTemporalDateColumn"], "fileName": "com.facebook.presto.raptor.TestRaptorIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( computeActual (  \" SELECT   count ( DISTINCT   orderdate )     >  =     2    FROM   orders   WHERE   orderdate    <    date    '  1  9  9  2  -  0  2  -  0  8  '  \"  )  . getOnlyValue (  )  ,    true )  ;", "assertUpdate (  (  \" CREATE   TABLE   test _ shard _ temporal _ date _ bucketed    \"     +     (  (  (  \" WITH    ( temporal _ column    =     ' orderdate '  ,    bucket _ count    =     1  0  ,    bucketed _ on    =    ARRAY    [  ' orderkey '  ]  )    AS    \"     +     \" SELECT   orderdate ,    orderkey    \"  )     +     \" FROM   orders    \"  )     +     \" WHERE   orderdate    <    date    '  1  9  9  2  -  0  2  -  0  8  '  \"  )  )  ,     (  \" SELECT   count (  *  )     \"     +     (  \" FROM   orders    \"     +     \" WHERE   orderdate    <    date    '  1  9  9  2  -  0  2  -  0  8  '  \"  )  )  )  ;", "MaterializedResult   results    =    computeActual (  \" SELECT   orderdate ,     \\  \"  $ shard _ uuid \\  \"    FROM   test _ shard _ temporal _ date _ bucketed \"  )  ;", "SetMultimap < String ,    LocalDate >    shardDateMap    =    HashMultimap . create (  )  ;", "for    ( MaterializedRow   row    :    results . getMaterializedRows (  )  )     {", "shardDateMap . put (  (  ( String )     ( row . getField (  1  )  )  )  ,     (  ( LocalDate )     ( row . getField (  0  )  )  )  )  ;", "}", "for    ( Collec < LocalDate >    dates    :    shardDateMap . asMap (  )  . values (  )  )     {", "assertEquals ( dates . size (  )  ,     1  )  ;", "}", "assertQuery (  \" SELECT   orderdate ,    orderkey   FROM   test _ shard _ temporal _ date _ bucketed \"  ,     \" SELECT   orderdate ,    orderkey   FROM   orders   WHERE   orderdate    <    date    '  1  9  9  2  -  0  2  -  0  8  '  \"  )  ;", "}", "METHOD_END"], "methodName": ["testShardingByTemporalDateColumnBucketed"], "fileName": "com.facebook.presto.raptor.TestRaptorIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( computeActual (  \" SELECT   count ( DISTINCT   orderdate )     >  =     2    FROM   orders   WHERE   orderdate    <    date    '  1  9  9  2  -  0  2  -  0  8  '  \"  )  . getOnlyValue (  )  ,    true )  ;", "assertUpdate (  \" CREATE   TABLE   test _ shard _ temporal _ timestamp ( col 1    BIGINT ,    col 2    TIMESTAMP )    WITH    ( temporal _ column    =     ' col 2  '  )  \"  )  ;", "int   rows    =     2  0  ;", "StringJoiner   joiner    =    new   StringJoiner (  \"  ,     \"  ,     \" INSERT   INTO   test _ shard _ temporal _ timestamp   VALUES    \"  ,     \"  \"  )  ;", "for    ( int   i    =     0  ;    i    <    rows ;    i +  +  )     {", "joiner . add ( String . format (  \"  (  % s ,    TIMESTAMP    '  2  0  1  6  -  0  8  -  0  8     0  1  :  0  0  '     +    interval    '  % s '    hour )  \"  ,    i ,     ( i    *     4  )  )  )  ;", "}", "assertUpdate ( joiner . toString (  )  ,    String . format (  \" VALUES (  % s )  \"  ,    rows )  )  ;", "MaterializedResult   results    =    computeActual (  \" SELECT   format _ datetime ( col 2  ,     \\  ' yyyyMMdd \\  '  )  ,     \\  \"  $ shard _ uuid \\  \"    FROM   test _ shard _ temporal _ timestamp \"  )  ;", "assertEquals ( results . getRowCount (  )  ,    rows )  ;", "SetMultimap < String ,    String >    shardDateMap    =    HashMultimap . create (  )  ;", "for    ( MaterializedRow   row    :    results . getMaterializedRows (  )  )     {", "shardDateMap . put (  (  ( String )     ( row . getField (  1  )  )  )  ,     (  ( String )     ( row . getField (  0  )  )  )  )  ;", "}", "for    ( Collec < String >    dates    :    shardDateMap . asMap (  )  . values (  )  )     {", "assertEquals ( dates . size (  )  ,     1  )  ;", "}", "Assers . assertLessThan ( shardDateMap . size (  )  ,    rows )  ;", "}", "METHOD_END"], "methodName": ["testShardingByTemporalTimestampColumn"], "fileName": "com.facebook.presto.raptor.TestRaptorIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( computeActual (  \" SELECT   count ( DISTINCT   orderdate )     >  =     2    FROM   orders   WHERE   orderdate    <    date    '  1  9  9  2  -  0  2  -  0  8  '  \"  )  . getOnlyValue (  )  ,    true )  ;", "assertUpdate (  (  \"  \"     +     (  \" CREATE   TABLE   test _ shard _ temporal _ timestamp _ bucketed ( col 1    BIGINT ,    col 2    TIMESTAMP )     \"     +     \" WITH    ( temporal _ column    =     ' col 2  '  ,    bucket _ count    =     3  ,    bucketed _ on    =    ARRAY    [  ' col 1  '  ]  )  \"  )  )  )  ;", "int   rows    =     1  0  0  ;", "StringJoiner   joiner    =    new   StringJoiner (  \"  ,     \"  ,     \" INSERT   INTO   test _ shard _ temporal _ timestamp _ bucketed   VALUES    \"  ,     \"  \"  )  ;", "for    ( int   i    =     0  ;    i    <    rows ;    i +  +  )     {", "joiner . add ( String . format (  \"  (  % s ,    TIMESTAMP    '  2  0  1  6  -  0  8  -  0  8     0  1  :  0  0  '     +    interval    '  % s '    hour )  \"  ,    i ,    i )  )  ;", "}", "assertUpdate ( joiner . toString (  )  ,    String . format (  \" VALUES (  % s )  \"  ,    rows )  )  ;", "MaterializedResult   results    =    computeActual (  (  \"  \"     +     (  \" SELECT   format _ datetime ( col 2  ,     \\  ' yyyyMMdd \\  '  )  ,     \\  \"  $ shard _ uuid \\  \"     \"     +     \" FROM   test _ shard _ temporal _ timestamp _ bucketed \"  )  )  )  ;", "assertEquals ( results . getRowCount (  )  ,    rows )  ;", "SetMultimap < String ,    String >    shardDateMap    =    HashMultimap . create (  )  ;", "for    ( MaterializedRow   row    :    results . getMaterializedRows (  )  )     {", "shardDateMap . put (  (  ( String )     ( row . getField (  1  )  )  )  ,     (  ( String )     ( row . getField (  0  )  )  )  )  ;", "}", "for    ( Collec < String >    dates    :    shardDateMap . asMap (  )  . values (  )  )     {", "assertEquals ( dates . size (  )  ,     1  )  ;", "}", "Assers . assertLessThan ( shardDateMap . size (  )  ,    rows )  ;", "}", "METHOD_END"], "methodName": ["testShardingByTemporalTimestampColumnBucketed"], "fileName": "com.facebook.presto.raptor.TestRaptorIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  \" SELECT   table _ schema ,    table _ name ,    sum ( row _ count )  \\ n \"     +     \" FROM   system . shards \\ n \"  )     +     \" WHERE   table _ schema    =     \\  ' tpch \\  '  \\ n \"  )     +     \"       AND   table _ name   IN    (  \\  ' orders \\  '  ,     \\  ' lineitem \\  '  )  \\ n \"  )     +     \" GROUP   BY    1  ,     2  \"  )  )  ,     (  \"  \"     +     (  (  \" SELECT    \\  ' tpch \\  '  ,     \\  ' orders \\  '  ,     ( SELECT   count (  *  )    FROM   orders )  \\ n \"     +     \" UNION   ALL \\ n \"  )     +     \" SELECT    ' tpch '  ,     ' lineitem '  ,     ( SELECT   count (  *  )    FROM   lineitem )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testShardsSystemTable"], "fileName": "com.facebook.presto.raptor.TestRaptorIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( computeActual (  \" SELECT   count (  *  )     >  =     1    FROM   orders   WHERE   orderdate   BETWEEN   date    '  1  9  9  2  -  0  1  -  0  1  '    AND   date    '  1  9  9  2  -  0  2  -  0  8  '  \"  )  . getOnlyValue (  )  ,    true )  ;", "assertUpdate (  (  \" CREATE   TABLE   test _ shards _ system _ table _ date _ temporal \\ n \"     +     (  (  (  \" WITH    ( temporal _ column    =     \\  ' orderdate \\  '  )    AS \\ n \"     +     \" SELECT   orderdate ,    orderkey \\ n \"  )     +     \" FROM   orders \\ n \"  )     +     \" WHERE   orderdate   BETWEEN   date    '  1  9  9  2  -  0  1  -  0  1  '    AND   date    '  1  9  9  2  -  0  2  -  0  8  '  \"  )  )  ,     (  \" SELECT   count (  *  )  \\ n \"     +     (  \" FROM   orders \\ n \"     +     \" WHERE   orderdate   BETWEEN   date    '  1  9  9  2  -  0  1  -  0  1  '    AND   date    '  1  9  9  2  -  0  2  -  0  8  '  \"  )  )  )  ;", "assertUpdate (  (  \" CREATE   TABLE   test _ shards _ system _ table _ timestamp _ temporal \\ n \"     +     (  (  \" WITH    ( temporal _ column    =     \\  ' ordertimestamp \\  '  )    AS \\ n \"     +     \" SELECT   CAST    ( orderdate   AS   TIMESTAMP )    AS   ordertimestamp ,    orderkey \\ n \"  )     +     \" FROM   test _ shards _ system _ table _ date _ temporal \"  )  )  ,     (  \" SELECT   count (  *  )  \\ n \"     +     (  \" FROM   orders \\ n \"     +     \" WHERE   orderdate   BETWEEN   date    '  1  9  9  2  -  0  1  -  0  1  '    AND   date    '  1  9  9  2  -  0  2  -  0  8  '  \"  )  )  )  ;", "assertEquals ( computeActual (  (  \"  \"     +     (  (  (  (  (  (  \" SELECT   count (  *  )  \\ n \"     +     \" FROM   system . shards \\ n \"  )     +     \" WHERE   table _ schema    =     \\  ' tpch \\  '  \\ n \"  )     +     \" AND   table _ name    =     \\  ' test _ shards _ system _ table _ date _ temporal \\  '  \\ n \"  )     +     \" AND   NOT    \\ n \"  )     +     \"  ( min _ timestamp   IS   NULL   AND   max _ timestamp   IS   NULL \\ n \"  )     +     \" AND   min _ date   IS   NOT   NULL   AND   max _ date   IS   NOT   NULL )  \"  )  )  )  . getOnlyValue (  )  ,     0 L )  ;", "assertEquals ( computeActual (  (  \"  \"     +     (  (  (  (  (  (  \" SELECT   count (  *  )  \\ n \"     +     \" FROM   system . shards \\ n \"  )     +     \" WHERE   table _ schema    =     \\  ' tpch \\  '  \\ n \"  )     +     \" AND   table _ name    =     \\  ' test _ shards _ system _ table _ timestamp _ temporal \\  '  \\ n \"  )     +     \" AND   NOT \\ n \"  )     +     \"  ( min _ date   IS   NULL   AND   max _ date   IS   NULL \\ n \"  )     +     \" AND   min _ timestamp   IS   NOT   NULL   AND   max _ timestamp   IS   NOT   NULL )  \"  )  )  )  . getOnlyValue (  )  ,     0 L )  ;", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  \" SELECT   table _ schema ,    table _ name ,    sum ( row _ count )  \\ n \"     +     \" FROM   system . shards    \\ n \"  )     +     \" WHERE   table _ schema    =     \\  ' tpch \\  '  \\ n \"  )     +     \" AND   table _ name    =     \\  ' test _ shards _ system _ table _ date _ temporal \\  '  \\ n \"  )     +     \" AND   min _ date    >  =    date    \\  '  1  9  9  2  -  0  1  -  0  1  \\  '  \\ n \"  )     +     \" AND   max _ date    <  =    date    \\  '  1  9  9  2  -  0  2  -  0  8  \\  '  \\ n \"  )     +     \" GROUP   BY    1  ,     2  \"  )  )  ,     (  \"  \"     +     (  \" SELECT    \\  ' tpch \\  '  ,     \\  ' test _ shards _ system _ table _ date _ temporal \\  '  ,  \\ n \"     +     \"  ( SELECT   count (  *  )    FROM   orders   WHERE   orderdate   BETWEEN   date    '  1  9  9  2  -  0  1  -  0  1  '    AND   date    '  1  9  9  2  -  0  2  -  0  8  '  )  \"  )  )  )  ;", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  \" SELECT   table _ schema ,    table _ name ,    sum ( row _ count )  \\ n \"     +     \" FROM   system . shards    \\ n \"  )     +     \" WHERE   table _ schema    =     \\  ' tpch \\  '  \\ n \"  )     +     \" AND   table _ name    =     \\  ' test _ shards _ system _ table _ timestamp _ temporal \\  '  \\ n \"  )     +     \" AND   min _ timestamp    >  =    timestamp    \\  '  1  9  9  2  -  0  1  -  0  1  \\  '  \\ n \"  )     +     \" AND   max _ timestamp    <  =    timestamp    \\  '  1  9  9  2  -  0  2  -  0  8  \\  '  \\ n \"  )     +     \" GROUP   BY    1  ,     2  \"  )  )  ,     (  \"  \"     +     (  \" SELECT    \\  ' tpch \\  '  ,     \\  ' test _ shards _ system _ table _ timestamp _ temporal \\  '  ,  \\ n \"     +     \"  ( SELECT   count (  *  )    FROM   orders   WHERE   orderdate   BETWEEN   date    '  1  9  9  2  -  0  1  -  0  1  '    AND   date    '  1  9  9  2  -  0  2  -  0  8  '  )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testShardsSystemTableWithTemporalColumn"], "fileName": "com.facebook.presto.raptor.TestRaptorIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "String   createTableSql    =    String . format (  (  \"  \"     +     (  (  (  (  (  (  (  (  (  (  (  (  (  (  \" CREATE   TABLE    % s .  % s .  % s    (  \\ n \"     +     \"          c 1    bigint ,  \\ n \"  )     +     \"          c 2    double ,  \\ n \"  )     +     \"           \\  \" c    3  \\  \"    varchar ,  \\ n \"  )     +     \"           \\  \" c \\  '  4  \\  \"    array ( bigint )  ,  \\ n \"  )     +     \"          c 5    map ( bigint ,    varchar )  ,  \\ n \"  )     +     \"          c 6    bigint ,  \\ n \"  )     +     \"          c 7    timestamp \\ n \"  )     +     \"  )  \\ n \"  )     +     \" WITH    (  \\ n \"  )     +     \"          bucket _ count    =     3  2  ,  \\ n \"  )     +     \"          bucketed _ on    =    ARRAY [  \\  ' c 1  \\  '  ,  \\  ' c 6  \\  '  ]  ,  \\ n \"  )     +     \"          ordering    =    ARRAY [  \\  ' c 6  \\  '  ,  \\  ' c 1  \\  '  ]  ,  \\ n \"  )     +     \"          temporal _ column    =     \\  ' c 7  \\  '  \\ n \"  )     +     \"  )  \"  )  )  ,    getSession (  )  . getCatalog (  )  . get (  )  ,    getSession (  )  . getSchema (  )  . get (  )  ,     \" test _ show _ create _ table \"  )  ;", "assertUpdate ( createTableSql )  ;", "MaterializedResult   actualResult    =    computeActual (  \" SHOW   CREATE   TABLE   test _ show _ create _ table \"  )  ;", "assertEquals ( getOnlyElement ( actualResult . getOnlyColumnAsSet (  )  )  ,    createTableSql )  ;", "actualResult    =    computeActual (  (  (  \" SHOW   CREATE   TABLE    \"     +     ( getSession (  )  . getSchema (  )  . get (  )  )  )     +     \"  . test _ show _ create _ table \"  )  )  ;", "assertEquals ( getOnlyElement ( actualResult . getOnlyColumnAsSet (  )  )  ,    createTableSql )  ;", "actualResult    =    computeActual (  (  (  (  (  \" SHOW   CREATE   TABLE    \"     +     ( getSession (  )  . getCatalog (  )  . get (  )  )  )     +     \"  .  \"  )     +     ( getSession (  )  . getSchema (  )  . get (  )  )  )     +     \"  . test _ show _ create _ table \"  )  )  ;", "assertEquals ( getOnlyElement ( actualResult . getOnlyColumnAsSet (  )  )  ,    createTableSql )  ;", "createTableSql    =    String . format (  (  \"  \"     +     (  (  (  (  (  (  (  (  (  (  (  (  (  (  \" CREATE   TABLE    % s .  % s .  % s    (  \\ n \"     +     \"          c 1    bigint ,  \\ n \"  )     +     \"          c 2    double ,  \\ n \"  )     +     \"           \\  \" c    3  \\  \"    varchar ,  \\ n \"  )     +     \"           \\  \" c \\  '  4  \\  \"    array ( bigint )  ,  \\ n \"  )     +     \"          c 5    map ( bigint ,    varchar )  ,  \\ n \"  )     +     \"          c 6    bigint ,  \\ n \"  )     +     \"          c 7    timestamp \\ n \"  )     +     \"  )  \\ n \"  )     +     \" WITH    (  \\ n \"  )     +     \"          bucket _ count    =     3  2  ,  \\ n \"  )     +     \"          bucketed _ on    =    ARRAY [  \\  ' c 1  \\  '  ,  \\  ' c 6  \\  '  ]  ,  \\ n \"  )     +     \"          ordering    =    ARRAY [  \\  ' c 6  \\  '  ,  \\  ' c 1  \\  '  ]  ,  \\ n \"  )     +     \"          organized    =    true \\ n \"  )     +     \"  )  \"  )  )  ,    getSession (  )  . getCatalog (  )  . get (  )  ,    getSession (  )  . getSchema (  )  . get (  )  ,     \" test _ show _ create _ table _ organized \"  )  ;", "assertUpdate ( createTableSql )  ;", "actualResult    =    computeActual (  \" SHOW   CREATE   TABLE   test _ show _ create _ table _ organized \"  )  ;", "assertEquals ( getOnlyElement ( actualResult . getOnlyColumnAsSet (  )  )  ,    createTableSql )  ;", "actualResult    =    computeActual (  (  (  \" SHOW   CREATE   TABLE    \"     +     ( getSession (  )  . getSchema (  )  . get (  )  )  )     +     \"  . test _ show _ create _ table _ organized \"  )  )  ;", "assertEquals ( getOnlyElement ( actualResult . getOnlyColumnAsSet (  )  )  ,    createTableSql )  ;", "actualResult    =    computeActual (  (  (  (  (  \" SHOW   CREATE   TABLE    \"     +     ( getSession (  )  . getCatalog (  )  . get (  )  )  )     +     \"  .  \"  )     +     ( getSession (  )  . getSchema (  )  . get (  )  )  )     +     \"  . test _ show _ create _ table _ organized \"  )  )  ;", "assertEquals ( getOnlyElement ( actualResult . getOnlyColumnAsSet (  )  )  ,    createTableSql )  ;", "createTableSql    =    String . format (  (  \"  \"     +     (  (  (  (  (  (  \" CREATE   TABLE    % s .  % s .  % s    (  \\ n \"     +     \"           \\  \" c \\  \"  \\  \"  1  \\  \"    bigint ,  \\ n \"  )     +     \"          c 2    double ,  \\ n \"  )     +     \"           \\  \" c    3  \\  \"    varchar ,  \\ n \"  )     +     \"           \\  \" c \\  '  4  \\  \"    array ( bigint )  ,  \\ n \"  )     +     \"          c 5    map ( bigint ,    varchar )  \\ n \"  )     +     \"  )  \"  )  )  ,    getSession (  )  . getCatalog (  )  . get (  )  ,    getSession (  )  . getSchema (  )  . get (  )  ,     \"  \\  \" test _ show _ create _ table \\  \"  \\  \"  2  \\  \"  \"  )  ;", "assertUpdate ( createTableSql )  ;", "actualResult    =    computeActual (  \" SHOW   CREATE   TABLE    \\  \" test _ show _ create _ table \\  \"  \\  \"  2  \\  \"  \"  )  ;", "assertEquals ( getOnlyElement ( actualResult . getOnlyColumnAsSet (  )  )  ,    createTableSql )  ;", "}", "METHOD_END"], "methodName": ["testShowCreateTable"], "fileName": "com.facebook.presto.raptor.TestRaptorIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "computeActual (  \" CREATE   TABLE   test _ table _ properties _  1     ( foo   BIGINT ,    bar   BIGINT ,    ds   DATE )    WITH    ( ordering = array [  ' foo '  ,  ' bar '  ]  ,    temporal _ column =  ' ds '  )  \"  )  ;", "computeActual (  \" CREATE   TABLE   test _ table _ properties _  2     ( foo   BIGINT ,    bar   BIGINT ,    ds   DATE )    WITH    ( ORDERING = array [  ' foo '  ,  ' bar '  ]  ,    TEMPORAL _ COLUMN =  ' ds '  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testTableProperties"], "fileName": "com.facebook.presto.raptor.TestRaptorIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  \" SELECT   table _ schema ,    table _ name ,    sum ( row _ count )  \\ n \"     +     \" FROM   system . table _ stats \\ n \"  )     +     \" WHERE   table _ schema    =     \\  ' tpch \\  '  \\ n \"  )     +     \"       AND   table _ name   IN    (  \\  ' orders \\  '  ,     \\  ' lineitem \\  '  )  \\ n \"  )     +     \" GROUP   BY    1  ,     2  \"  )  )  ,     (  \"  \"     +     (  (  \" SELECT    \\  ' tpch \\  '  ,     \\  ' orders \\  '  ,     ( SELECT   count (  *  )    FROM   orders )  \\ n \"     +     \" UNION   ALL \\ n \"  )     +     \" SELECT    ' tpch '  ,     ' lineitem '  ,     ( SELECT   count (  *  )    FROM   lineitem )  \"  )  )  )  ;", "assertQuery (  (  \"  \"     +     (  (  (  (  (  \" SELECT \\ n \"     +     \"       bool _ and ( row _ count    >  =    shard _ count )  \\ n \"  )     +     \"  ,    bool _ and ( update _ time    >  =    create _ time )  \\ n \"  )     +     \"  ,    bool _ and ( table _ version    >  =     1  )  \\ n \"  )     +     \" FROM   system . table _ stats \\ n \"  )     +     \" WHERE   row _ count    >     0  \"  )  )  ,     \" SELECT   true ,    true ,    true \"  )  ;", "assertUpdate (  \" CREATE   TABLE   test _ table _ stats    ( x   bigint )  \"  )  ;", "@ Language (  \" SQL \"  )", "String   sql    =     \"  \"     +     (  (  (  (  \" SELECT   create _ time ,    update _ time ,    table _ version ,  \"     +     \"       shard _ count ,    row _ count ,    uncomsed _ size \\ n \"  )     +     \" FROM   system . table _ stats \\ n \"  )     +     \" WHERE   table _ schema    =     \\  ' tpch \\  '  \\ n \"  )     +     \"       AND   table _ name    =     ' test _ table _ stats '  \"  )  ;", "MaterializedRow   row    =    getOnlyElement ( computeActual ( sql )  . getMaterializedRows (  )  )  ;", "LocalDateTime   createTime    =     (  ( LocalDateTime )     ( row . getField (  0  )  )  )  ;", "LocalDateTime   updateTime 1     =     (  ( LocalDateTime )     ( row . getField (  1  )  )  )  ;", "assertEquals ( createTime ,    updateTime 1  )  ;", "assertEquals ( row . getField (  2  )  ,     1 L )  ;", "assertEquals ( row . getField (  3  )  ,     0 L )  ;", "assertEquals ( row . getField (  4  )  ,     0 L )  ;", "long   size 1     =     (  ( long )     ( row . getField (  5  )  )  )  ;", "assertUpdate (  \" INSERT   INTO   test _ table _ stats   VALUES    (  1  )  ,     (  2  )  ,     (  3  )  ,     (  4  )  \"  ,     4  )  ;", "row    =    getOnlyElement ( computeActual ( sql )  . getMaterializedRows (  )  )  ;", "assertEquals ( row . getField (  0  )  ,    createTime )  ;", "LocalDateTime   updateTime 2     =     (  ( LocalDateTime )     ( row . getField (  1  )  )  )  ;", "Assertions . assertLessThan ( updateTime 1  ,    updateTime 2  )  ;", "assertEquals ( row . getField (  2  )  ,     2 L )  ;", "Assertions . assertGreaterThanOrEqual (  (  ( Long )     ( row . getField (  3  )  )  )  ,     1 L )  ;", "assertEquals ( row . getField (  4  )  ,     4 L )  ;", "long   size 2     =     (  ( long )     ( row . getField (  5  )  )  )  ;", "Assertions . assertGreaterThan ( size 2  ,    size 1  )  ;", "assertUpdate (  \" DELETE   FROM   test _ table _ stats   WHERE   x   IN    (  2  ,     4  )  \"  ,     2  )  ;", "row    =    getOnlyElement ( computeActual ( sql )  . getMaterializedRows (  )  )  ;", "assertEquals ( row . getField (  0  )  ,    createTime )  ;", "LocalDateTime   updateTime 3     =     (  ( LocalDateTime )     ( row . getField (  1  )  )  )  ;", "Assertions . assertLessThan ( updateTime 2  ,    updateTime 3  )  ;", "assertEquals ( row . getField (  2  )  ,     3 L )  ;", "Assertions . assertGreaterThanOrEqual (  (  ( Long )     ( row . getField (  3  )  )  )  ,     1 L )  ;", "assertEquals ( row . getField (  4  )  ,     2 L )  ;", "long   size 3     =     (  ( long )     ( row . getField (  5  )  )  )  ;", "Assertions . assertLessThan ( size 3  ,    size 2  )  ;", "assertUpdate (  \" ALTER   TABLE   test _ table _ stats   ADD   COLUMN   y   bigint \"  )  ;", "row    =    getOnlyElement ( computeActual ( sql )  . getMaterializedRows (  )  )  ;", "assertEquals ( row . getField (  0  )  ,    createTime )  ;", "Assertions . assertLessThan ( updateTime 3  ,     (  ( LocalDateTime )     ( row . getField (  1  )  )  )  )  ;", "assertEquals ( row . getField (  2  )  ,     4 L )  ;", "assertEquals ( row . getField (  4  )  ,     2 L )  ;", "assertEquals ( row . getField (  5  )  ,    size 3  )  ;", "assertUpdate (  \" DROP   TABLE   test _ table _ stats \"  )  ;", "}", "METHOD_END"], "methodName": ["testTableStatsSystemTable"], "fileName": "com.facebook.presto.raptor.TestRaptorIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertUpdate (  (  \"  \"     +     \" CREATE   TABLE   system _ tables _ test 0     ( c 0  0    timestamp ,    c 0  1    varchar ,    c 0  2    double ,    c 0  3    bigint ,    c 0  4    bigint )  \"  )  )  ;", "assertUpdate (  (  \"  \"     +     (  \" CREATE   TABLE   system _ tables _ test 1     ( c 1  0    timestamp ,    c 1  1    varchar ,    c 1  2    double ,    c 1  3    bigint ,    c 1  4    bigint )     \"     +     \" WITH    ( temporal _ column    =     ' c 1  0  '  )  \"  )  )  )  ;", "assertUpdate (  (  \"  \"     +     (  \" CREATE   TABLE   system _ tables _ test 2     ( c 2  0    timestamp ,    c 2  1    varchar ,    c 2  2    double ,    c 2  3    bigint ,    c 2  4    bigint )     \"     +     \" WITH    ( temporal _ column    =     ' c 2  0  '  ,    ordering    =    ARRAY [  ' c 2  2  '  ,     ' c 2  1  '  ]  )  \"  )  )  )  ;", "assertUpdate (  (  \"  \"     +     (  \" CREATE   TABLE   system _ tables _ test 3     ( c 3  0    timestamp ,    c 3  1    varchar ,    c 3  2    double ,    c 3  3    bigint ,    c 3  4    bigint )     \"     +     \" WITH    ( temporal _ column    =     ' c 3  0  '  ,    bucket _ count    =     4  0  ,    bucketed _ on    =    ARRAY    [  ' c 3  4  '  ,     ' c 3  3  '  ]  )  \"  )  )  )  ;", "assertUpdate (  (  \"  \"     +     (  \" CREATE   TABLE   system _ tables _ test 4     ( c 4  0    timestamp ,    c 4  1    varchar ,    c 4  2    double ,    c 4  3    bigint ,    c 4  4    bigint )     \"     +     \" WITH    ( temporal _ column    =     ' c 4  0  '  ,    ordering    =    ARRAY [  ' c 4  1  '  ,     ' c 4  2  '  ]  ,    distribution _ name    =     ' test _ distribution '  ,    bucket _ count    =     5  0  ,    bucketed _ on    =    ARRAY    [  ' c 4  3  '  ,     ' c 4  4  '  ]  )  \"  )  )  )  ;", "assertUpdate (  (  \"  \"     +     (  \" CREATE   TABLE   system _ tables _ test 5     ( c 5  0    timestamp ,    c 5  1    varchar ,    c 5  2    double ,    c 5  3    bigint ,    c 5  4    bigint )     \"     +     \" WITH    ( ordering    =    ARRAY [  ' c 5  1  '  ,     ' c 5  2  '  ]  ,    distribution _ name    =     ' test _ distribution '  ,    bucket _ count    =     5  0  ,    bucketed _ on    =    ARRAY    [  ' c 5  3  '  ,     ' c 5  4  '  ]  ,    organized    =    true )  \"  )  )  )  ;", "MaterializedResult   actualResults    =    computeActual (  \" SELECT    *    FROM   system . tables \"  )  ;", "assertEquals ( actualResults . getTypes (  )  ,    ImmutableList . builder (  )  . add ( VARCHAR )  . add ( VARCHAR )  . add ( VARCHAR )  . add ( new   spi . type . ArrayType ( VARCHAR )  )  . add ( VARCHAR )  . add ( BIGINT )  . add ( new   spi . type . ArrayType ( VARCHAR )  )  . add ( BOOLEAN )  . build (  )  )  ;", "Map < String ,    MaterializedRow >    map    =    actualResults . getMaterializedRows (  )  . stream (  )  . filter (  (    row )     -  >     (  ( String )     ( row . getField (  1  )  )  )  . startsWith (  \" system _ tables _ test \"  )  )  . collect ( toImmutableMap (  (    row )     -  >     (  ( String )     ( row . getField (  1  )  )  )  ,    Function . identity (  )  )  )  ;", "assertEquals ( map . size (  )  ,     6  )  ;", "assertEquals ( map . get (  \" system _ tables _ test 0  \"  )  . getFields (  )  ,    Arrays . asList (  \" tpch \"  ,     \" system _ tables _ test 0  \"  ,    null ,    null ,    null ,    null ,    null ,    Boolean . FALSE )  )  ;", "assertEquals ( map . get (  \" system _ tables _ test 1  \"  )  . getFields (  )  ,    Arrays . asList (  \" tpch \"  ,     \" system _ tables _ test 1  \"  ,     \" c 1  0  \"  ,    null ,    null ,    null ,    null ,    Boolean . FALSE )  )  ;", "assertEquals ( map . get (  \" system _ tables _ test 2  \"  )  . getFields (  )  ,    Arrays . asList (  \" tpch \"  ,     \" system _ tables _ test 2  \"  ,     \" c 2  0  \"  ,    ImmutableList . of (  \" c 2  2  \"  ,     \" c 2  1  \"  )  ,    null ,    null ,    null ,    Boolean . FALSE )  )  ;", "assertEquals ( map . get (  \" system _ tables _ test 3  \"  )  . getFields (  )  ,    Arrays . asList (  \" tpch \"  ,     \" system _ tables _ test 3  \"  ,     \" c 3  0  \"  ,    null ,    null ,     4  0 L ,    ImmutableList . of (  \" c 3  4  \"  ,     \" c 3  3  \"  )  ,    Boolean . FALSE )  )  ;", "assertEquals ( map . get (  \" system _ tables _ test 4  \"  )  . getFields (  )  ,    Arrays . asList (  \" tpch \"  ,     \" system _ tables _ test 4  \"  ,     \" c 4  0  \"  ,    ImmutableList . of (  \" c 4  1  \"  ,     \" c 4  2  \"  )  ,     \" test _ distribution \"  ,     5  0 L ,    ImmutableList . of (  \" c 4  3  \"  ,     \" c 4  4  \"  )  ,    Boolean . FALSE )  )  ;", "assertEquals ( map . get (  \" system _ tables _ test 5  \"  )  . getFields (  )  ,    Arrays . asList (  \" tpch \"  ,     \" system _ tables _ test 5  \"  ,    null ,    ImmutableList . of (  \" c 5  1  \"  ,     \" c 5  2  \"  )  ,     \" test _ distribution \"  ,     5  0 L ,    ImmutableList . of (  \" c 5  3  \"  ,     \" c 5  4  \"  )  ,    Boolean . TRUE )  )  ;", "actualResults    =    computeActual (  \" SELECT    *    FROM   system . tables   WHERE   table _ schema    =     ' tpch '  \"  )  ;", "long   actualRowCount    =    actualResults . getMaterializedRows (  )  . stream (  )  . filter (  (    row )     -  >     (  ( String )     ( row . getField (  1  )  )  )  . startsWith (  \" system _ tables _ test \"  )  )  . count (  )  ;", "assertEquals ( actualRowCount ,     6  )  ;", "actualResults    =    computeActual (  \" SELECT    *    FROM   system . tables   WHERE   table _ name    =     ' system _ tables _ test 3  '  \"  )  ;", "assertEquals ( actualResults . getMaterializedRows (  )  . size (  )  ,     1  )  ;", "actualResults    =    computeActual (  \" SELECT    *    FROM   system . tables   WHERE   table _ schema    =     ' tpch '    and   table _ name    =     ' system _ tables _ test 3  '  \"  )  ;", "assertEquals ( actualResults . getMaterializedRows (  )  . size (  )  ,     1  )  ;", "actualResults    =    computeActual (  (  \"  \"     +     (  (  \" SELECT   distribution _ name ,    bucket _ count ,    bucketing _ columns ,    ordering _ columns ,    temporal _ column ,    organized    \"     +     \" FROM   system . tables    \"  )     +     \" WHERE   table _ schema    =     ' tpch '    and   table _ name    =     ' system _ tables _ test 3  '  \"  )  )  )  ;", "assertEquals ( actualResults . getTypes (  )  ,    ImmutableList . of ( VARCHAR ,    BIGINT ,    new   spi . type . ArrayType ( VARCHAR )  ,    new   spi . type . ArrayType ( VARCHAR )  ,    VARCHAR ,    BOOLEAN )  )  ;", "assertEquals ( actualResults . getMaterializedRows (  )  . size (  )  ,     1  )  ;", "assertUpdate (  \" DROP   TABLE   system _ tables _ test 0  \"  )  ;", "assertUpdate (  \" DROP   TABLE   system _ tables _ test 1  \"  )  ;", "assertUpdate (  \" DROP   TABLE   system _ tables _ test 2  \"  )  ;", "assertUpdate (  \" DROP   TABLE   system _ tables _ test 3  \"  )  ;", "assertUpdate (  \" DROP   TABLE   system _ tables _ test 4  \"  )  ;", "assertUpdate (  \" DROP   TABLE   system _ tables _ test 5  \"  )  ;", "assertEquals ( computeActual (  \" SELECT    *    FROM   system . tables   WHERE   table _ schema   IN    (  ' foo '  ,     ' bar '  )  \"  )  . getRowCount (  )  ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testTablesSystemTable"], "fileName": "com.facebook.presto.raptor.TestRaptorIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  \" SELECT   count ( DISTINCT   bucket _ number )  \\ n \"     +     \" FROM   system . shards \\ n \"  )     +     \" WHERE   table _ schema    =     \\  ' tpch \\  '  \\ n \"  )     +     \"       AND   table _ name    =     ' orders '  \"  )  )  ,     \" SELECT    2  5  \"  )  ;", "}", "METHOD_END"], "methodName": ["testShardsSystemTableBucketNumber"], "fileName": "com.facebook.presto.raptor.TestRaptorIntegrationSmokeTestBucketed"}, {"methodBody": ["METHOD_START", "{", "DistributedQueryRunner   queryRunner    =    new   DistributedQueryRunner ( RaptorQueryRunner . createSession (  \" tpch \"  )  ,     2  )  ;", "queryRunner . installPlugin ( new   TpchPlugin (  )  )  ;", "queryRunner . createCatalog (  \" tpch \"  ,     \" tpch \"  )  ;", "queryRunner . installPlugin ( new   RaptorPlugin (  )  )  ;", "File   baseDir    =    queryRunner . getCoordinator (  )  . getBaseDataDir (  )  . toFile (  )  ;", "Map < String ,    String >    raptorProperties    =    ImmutableMap .  < String ,    String > builder (  )  . put (  \" metadata . db . type \"  ,     \" mysql \"  )  . put (  \" metadata . db . url \"  ,    mysqlUrl )  . put (  \" storage . data - directory \"  ,    new   File ( baseDir ,     \" data \"  )  . getAbsolutePath (  )  )  . put (  \" storage . max - shard - rows \"  ,     \"  2  0  0  0  \"  )  . put (  \" backup . provider \"  ,     \" file \"  )  . put (  \" backup . directory \"  ,    new   File ( baseDir ,     \" backup \"  )  . getAbsolutePath (  )  )  . build (  )  ;", "queryRunner . createCatalog (  \" raptor \"  ,     \" raptor \"  ,    raptorProperties )  ;", "RaptorQueryRunner . copyTables ( queryRunner ,     \" tpch \"  ,    RaptorQueryRunner . createSession (  )  ,    false )  ;", "return   queryRunner ;", "}", "METHOD_END"], "methodName": ["createRaptorMySqlQueryRunner"], "fileName": "com.facebook.presto.raptor.TestRaptorIntegrationSmokeTestMySql"}, {"methodBody": ["METHOD_START", "{", "mysqlServer . close (  )  ;", "}", "METHOD_END"], "methodName": ["destroy"], "fileName": "com.facebook.presto.raptor.TestRaptorIntegrationSmokeTestMySql"}, {"methodBody": ["METHOD_START", "{", "for    ( Plugin   plugin    :    ServiceLoader . load ( Plugin . class )  )     {", "if    ( clazz . isInstance ( plugin )  )     {", "return    (  ( T )     ( plugin )  )  ;", "}", "}", "throw   new   AssertionError (  (  \" did   not   find   plugin :     \"     +     ( clazz . getName (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["loadPlugin"], "fileName": "com.facebook.presto.raptor.TestRaptorPlugin"}, {"methodBody": ["METHOD_START", "{", "RaptorPlugin   plugin    =    TestRaptorPlugin . loadPlugin ( RaptorPlugin . class )  ;", "ConnectorFactory   factory    =    getOnlyElement ( plugin . getConnectorFactories (  )  )  ;", "Assertions . assertInstanceOf ( factory ,    RaptorConnectorFactory . class )  ;", "File   tmpDir    =    Files . createTempDir (  )  ;", "try    {", "Map < String ,    String >    config    =    ImmutableMap .  < String ,    String > builder (  )  . put (  \" metadata . db . type \"  ,     \" h 2  \"  )  . put (  \" metadata . db . filename \"  ,    tmpDir . getAbsolutePath (  )  )  . put (  \" storage . data - directory \"  ,    tmpDir . getAbsolutePath (  )  )  . build (  )  ;", "factory . create (  \" test \"  ,    config ,    new   TestingConnectorContext (  )  )  ;", "}    finally    {", "deleteRecursively ( tmpDir . toPath (  )  ,    ALLOW _ INSECURE )  ;", "}", "}", "METHOD_END"], "methodName": ["testPlugin"], "fileName": "com.facebook.presto.raptor.TestRaptorPlugin"}, {"methodBody": ["METHOD_START", "{", "File   file 1     =    new   File ( temporary ,     \" file 1  \"  )  ;", "Files . write (  \" hello   world \"  ,    file 1  ,    StandardCharsets . UTF _  8  )  ;", "UUID   uuid 1     =    UUID . randomUUID (  )  ;", ". assertFalse ( store . shardExists ( uuid 1  )  )  ;", "store . backupShard ( uuid 1  ,    file 1  )  ;", ". assertTrue ( store . shardExists ( uuid 1  )  )  ;", "File   file 2     =    new   File ( temporary ,     \" file 2  \"  )  ;", "Files . write (  \" bye   bye \"  ,    file 2  ,    StandardCharsets . UTF _  8  )  ;", "UUID   uuid 2     =    UUID . randomUUID (  )  ;", ". assertFalse ( store . shardExists ( uuid 2  )  )  ;", "store . backupShard ( uuid 2  ,    file 2  )  ;", ". assertTrue ( store . shardExists ( uuid 2  )  )  ;", "File   restore 1     =    new   File ( temporary ,     \" restore 1  \"  )  ;", "store . restoreShard ( uuid 1  ,    restore 1  )  ;", ". assertEquals ( readAllBytes ( file 1  . toPath (  )  )  ,    readAllBytes ( restore 1  . toPath (  )  )  )  ;", "File   restore 2     =    new   File ( temporary ,     \" restore 2  \"  )  ;", "store . restoreShard ( uuid 2  ,    restore 2  )  ;", ". assertEquals ( readAllBytes ( file 2  . toPath (  )  )  ,    readAllBytes ( restore 2  . toPath (  )  )  )  ;", ". assertFalse ( store . shardExists ( UUID . randomUUID (  )  )  )  ;", ". assertTrue ( store . shardExists ( uuid 1  )  )  ;", ". assertTrue ( store . shardExists ( uuid 2  )  )  ;", "store . deleteShard ( uuid 1  )  ;", "store . deleteShard ( uuid 1  )  ;", ". assertFalse ( store . shardExists ( uuid 1  )  )  ;", ". assertTrue ( store . shardExists ( uuid 2  )  )  ;", "store . deleteShard ( UUID . randomUUID (  )  )  ;", "}", "METHOD_END"], "methodName": ["testBackupStore"], "fileName": "com.facebook.presto.raptor.backup.AbstractTestBackupStore"}, {"methodBody": ["METHOD_START", "{", "return   backupThreads ;", "}", "METHOD_END"], "methodName": ["getBackupThreads"], "fileName": "com.facebook.presto.raptor.backup.BackupConfig"}, {"methodBody": ["METHOD_START", "{", "return   provider ;", "}", "METHOD_END"], "methodName": ["getProvider"], "fileName": "com.facebook.presto.raptor.backup.BackupConfig"}, {"methodBody": ["METHOD_START", "{", "return   timeout ;", "}", "METHOD_END"], "methodName": ["getTimeout"], "fileName": "com.facebook.presto.raptor.backup.BackupConfig"}, {"methodBody": ["METHOD_START", "{", "return   timeoutThreads ;", "}", "METHOD_END"], "methodName": ["getTimeoutThreads"], "fileName": "com.facebook.presto.raptor.backup.BackupConfig"}, {"methodBody": ["METHOD_START", "{", "this . backupThreads    =    backupThreads ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setBackupThreads"], "fileName": "com.facebook.presto.raptor.backup.BackupConfig"}, {"methodBody": ["METHOD_START", "{", "this . provider    =    provider ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setProvider"], "fileName": "com.facebook.presto.raptor.backup.BackupConfig"}, {"methodBody": ["METHOD_START", "{", "this . timeout    =    timeout ;", "turn   this ;", "}", "METHOD_END"], "methodName": ["setTimeout"], "fileName": "com.facebook.presto.raptor.backup.BackupConfig"}, {"methodBody": ["METHOD_START", "{", "this . timeoutThreads    =    timeoutThreads ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setTimeoutThreads"], "fileName": "com.facebook.presto.raptor.backup.BackupConfig"}, {"methodBody": ["METHOD_START", "{", "return   pendingBackups . get (  )  ;", "}", "METHOD_END"], "methodName": ["getPendingBackupCount"], "fileName": "com.facebook.presto.raptor.backup.BackupManager"}, {"methodBody": ["METHOD_START", "{", "return   stats ;", "}", "METHOD_END"], "methodName": ["getStats"], "fileName": "com.facebook.presto.raptor.backup.BackupManager"}, {"methodBody": ["METHOD_START", "{", "executorService . shutdownNow (  )  ;", "}", "METHOD_END"], "methodName": ["shutdown"], "fileName": "com.facebook.presto.raptor.backup.BackupManager"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( uuid ,     \" uuid   is   null \"  )  ;", "Objects . requireNonNull ( source ,     \" source   is   null \"  )  ;", "if    (  !  ( backupStore . isPresent (  )  )  )     {", "return   CompletableFuture . completedFuture ( null )  ;", "}", "pendingBackups . incrementAndGet (  )  ;", "CompletableFuture <  ?  >    future    =    CompletableFuture . runAsync ( new    . BackgroundBackup ( uuid ,    source )  ,    executorService )  ;", "future . whenComplete (  (    none ,    throwable )     -  >    pendingBackups . decrementAndGet (  )  )  ;", "return   future ;", "}", "METHOD_END"], "methodName": ["submit"], "fileName": "com.facebook.presto.raptor.backup.BackupManager"}, {"methodBody": ["METHOD_START", "{", "if    ( store    =  =    null )     {", "return   Optional . empty (  )  ;", "}", "Store   proxy    =    new   TimeoutStore ( store ,    connectorId . toString (  )  ,    config . getTimeout (  )  ,    config . getTimeoutThreads (  )  )  ;", "lifeCycleManager . addInstance ( proxy )  ;", "Store   managed    =    new   ManagedStore ( proxy )  ;", "exporter . export ( generatedNameOf ( Store . class ,    connectorId . toString (  )  )  ,    managed )  ;", "return   Optional . of ( managed )  ;", "}", "METHOD_END"], "methodName": ["createBackupStore"], "fileName": "com.facebook.presto.raptor.backup.BackupModule"}, {"methodBody": ["METHOD_START", "{", "return   failures ;", "}", "METHOD_END"], "methodName": ["getFailures"], "fileName": "com.facebook.presto.raptor.backup.BackupOperationStats"}, {"methodBody": ["METHOD_START", "{", "return   successes ;", "}", "METHOD_END"], "methodName": ["getSuccesses"], "fileName": "com.facebook.presto.raptor.backup.BackupOperationStats"}, {"methodBody": ["METHOD_START", "{", "return   time ;", "}", "METHOD_END"], "methodName": ["getTime"], "fileName": "com.facebook.presto.raptor.backup.BackupOperationStats"}, {"methodBody": ["METHOD_START", "{", "return   timeouts ;", "}", "METHOD_END"], "methodName": ["getTimeouts"], "fileName": "com.facebook.presto.raptor.backup.BackupOperationStats"}, {"methodBody": ["METHOD_START", "{", "un (  (  )     -  >     {", "unnableun (  )  ;", "etn   null ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["run"], "fileName": "com.facebook.presto.raptor.backup.BackupOperationStats"}, {"methodBody": ["METHOD_START", "{", "try    ( TimeStat . BlockTimer   ignored    =    time . time (  )  )     {", "V   value    =    supplier . get (  )  ;", "successes . update (  1  )  ;", "return   value ;", "}    catch    ( PException   e )     {", "if    ( e . getErrorCode (  )  . equals ( RaptorErrorCode . RAPTOR _ BACKUP _ NOT _ FOUND . toErrorCode (  )  )  )     {", "successes . update (  1  )  ;", "} else", "if    ( e . getErrorCode (  )  . equals ( RaptorErrorCode . RAPTOR _ BACKUP _ TIMEOUT . toErrorCode (  )  )  )     {", "timeouts . update (  1  )  ;", "} else    {", "failures . update (  1  )  ;", "}", "throw   e ;", "}", "}", "METHOD_END"], "methodName": ["run"], "fileName": "com.facebook.presto.raptor.backup.BackupOperationStats"}, {"methodBody": ["METHOD_START", "{", "return   backupDirectory ;", "}", "METHOD_END"], "methodName": ["getBackupDirectory"], "fileName": "com.facebook.presto.raptor.backup.FileBackupConfig"}, {"methodBody": ["METHOD_START", "{", "this . backupDirectory    =    backupDirectory ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setBackupDirectory"], "fileName": "com.facebook.presto.raptor.backup.FileBackupConfig"}, {"methodBody": ["METHOD_START", "{", "try    ( InputStream   in    =    new   FileInputStream ( source )  ; FileOutputStream   out    =    new   FileOutputStream ( target )  )     {", "byte [  ]    buffer    =    new   byte [  1  2  8     *     1  0  2  4  ]  ;", "while    ( true )     {", "int   n    =    in . read ( buffer )  ;", "if    ( n    =  =     (  -  1  )  )     {", "break ;", "}", "out . write ( buffer ,     0  ,    n )  ;", "}", "out . flush (  )  ;", "out . getFD (  )  . sync (  )  ;", "}", "}", "METHOD_END"], "methodName": ["copyFile"], "fileName": "com.facebook.presto.raptor.backup.FileBackupStore"}, {"methodBody": ["METHOD_START", "{", "if    (  (  !  ( dir . mkdirs (  )  )  )     &  &     (  !  ( dir . isDirectory (  )  )  )  )     {", "throw   new   PException ( RaptorErrorCode . RAPTOR _ BACKUP _ ERROR ,     (  \" Failed   creating   directories :     \"     +    dir )  )  ;", "}", "}", "METHOD_END"], "methodName": ["createDirectories"], "fileName": "com.facebook.presto.raptor.backup.FileBackupStore"}, {"methodBody": ["METHOD_START", "{", "return   FileStorageService . getFileSystemPath ( baseDir ,    uuid )  ;", "}", "METHOD_END"], "methodName": ["getBackupFile"], "fileName": "com.facebook.presto.raptor.backup.FileBackupStore"}, {"methodBody": ["METHOD_START", "{", "FileBackupStore . createDirectories ( baseDir )  ;", "}", "METHOD_END"], "methodName": ["start"], "fileName": "com.facebook.presto.raptor.backup.FileBackupStore"}, {"methodBody": ["METHOD_START", "{", "return   uri ;", "}", "METHOD_END"], "methodName": ["getUri"], "fileName": "com.facebook.presto.raptor.backup.HttpBackupConfig"}, {"methodBody": ["METHOD_START", "{", "this . uri    =    uri ;", "turn   this ;", "}", "METHOD_END"], "methodName": ["setUri"], "fileName": "com.facebook.presto.raptor.backup.HttpBackupConfig"}, {"methodBody": ["METHOD_START", "{", "URI   uri    =    config . getUri (  )  ;", "return    (  )     -  >    uri ;", "}", "METHOD_END"], "methodName": ["createBackupUriSupplier"], "fileName": "com.facebook.presto.raptor.backup.HttpBackupModule"}, {"methodBody": ["METHOD_START", "{", "return   nodeInfo . getEnvironment (  )  ;", "}", "METHOD_END"], "methodName": ["createEnvironment"], "fileName": "com.facebook.presto.raptor.backup.HttpBackupModule"}, {"methodBody": ["METHOD_START", "{", "throw   new   RuntimeException (  (  \" Request   failed   with   HTTP   status    \"     +     ( response . getStatusCode (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["badResponse"], "fileName": "com.facebook.presto.raptor.backup.HttpBackupStore"}, {"methodBody": ["METHOD_START", "{", "return    ( response . getStatusCode (  )  )     =  =     ( GONE . code (  )  )  ;", "}", "METHOD_END"], "methodName": ["isGone"], "fileName": "com.facebook.presto.raptor.backup.HttpBackupStore"}, {"methodBody": ["METHOD_START", "{", "return    ( response . getStatusCode (  )  )     =  =     ( NOT _ FOUND . code (  )  )  ;", "}", "METHOD_END"], "methodName": ["isNotFound"], "fileName": "com.facebook.presto.raptor.backup.HttpBackupStore"}, {"methodBody": ["METHOD_START", "{", "return    (  ( response . getStatusCode (  )  )     =  =     ( OK . code (  )  )  )     |  |     (  ( response . getStatusCode (  )  )     =  =     ( NO _ CONTENT . code (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["isOk"], "fileName": "com.facebook.presto.raptor.backup.HttpBackupStore"}, {"methodBody": ["METHOD_START", "{", "return   uriBuilderFrom ( baseUriSupplier . get (  )  )  . appendPath ( uuid . toString (  )  . toLowerCase ( Locale . ENGLISH )  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["shardUri"], "fileName": "com.facebook.presto.raptor.backup.HttpBackupStore"}, {"methodBody": ["METHOD_START", "{", "try    ( InputStream   in    =    new   FileInputStream ( file )  )     {", "return   XxHash 6  4  . hash ( in )  ;", "}    catch    ( IOException   e )     {", "throw   new   PException ( RaptorErrorCode . RAPTOR _ BACKUP _ ERROR ,     (  \" Failed   to   read   file :     \"     +    file )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["xxHash64"], "fileName": "com.facebook.presto.raptor.backup.HttpBackupStore"}, {"methodBody": ["METHOD_START", "{", "return   backupShard ;", "}", "METHOD_END"], "methodName": ["getBackupShard"], "fileName": "com.facebook.presto.raptor.backup.ManagedBackupStore"}, {"methodBody": ["METHOD_START", "{", "return   deleteShard ;", "}", "METHOD_END"], "methodName": ["getDeleteShard"], "fileName": "com.facebook.presto.raptor.backup.ManagedBackupStore"}, {"methodBody": ["METHOD_START", "{", "return   restoreShard ;", "}", "METHOD_END"], "methodName": ["getRestoreShard"], "fileName": "com.facebook.presto.raptor.backup.ManagedBackupStore"}, {"methodBody": ["METHOD_START", "{", "return   shardExists ;", "}", "METHOD_END"], "methodName": ["getShardExists"], "fileName": "com.facebook.presto.raptor.backup.ManagedBackupStore"}, {"methodBody": ["METHOD_START", "{", "ConfigAssertions . assertRecordedDefaults ( ConfigAssertions . recordDefaults ( BackupConfig . class )  . setProvider ( null )  . setTimeoutThreads (  1  0  0  0  )  . setTimeout ( new   Duration (  1  ,    TimeUnit . MINUTES )  )  . setBackupThreads (  5  )  )  ;", "}", "METHOD_END"], "methodName": ["testDefaults"], "fileName": "com.facebook.presto.raptor.backup.TestBackupConfig"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    properties    =    new   Builder < String ,    String >  (  )  . put (  \" backup . provider \"  ,     \" file \"  )  . put (  \" backup . timeout \"  ,     \"  4  2 s \"  )  . put (  \" backup . timeout - threads \"  ,     \"  1  3  \"  )  . put (  \" backup . threads \"  ,     \"  3  \"  )  . build (  )  ;", "expected    =    new    (  )  . setProvider (  \" file \"  )  . setTimeout ( new   Duration (  4  2  ,    TimeUnit . SECONDS )  )  . setTimeoutThreads (  1  3  )  . setBackupThreads (  3  )  ;", "ConfigAssertions . assertFullMapping ( properties ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testExplicitPropertyMappings"], "fileName": "com.facebook.presto.raptor.backup.TestBackupConfig"}, {"methodBody": ["METHOD_START", "{", "BackupStats   stats    =    backupManager . getStats (  )  ;", "assertEquals ( stats . getBackupSuccess (  )  . getTotalCount (  )  ,    successCount )  ;", "assertEquals ( stats . getBackupFailure (  )  . getTotalCount (  )  ,    failureCount )  ;", "assertEquals ( stats . getBackupCorruption (  )  . getTotalCount (  )  ,    corruptionCount )  ;", "}", "METHOD_END"], "methodName": ["assertBackupStats"], "fileName": "com.facebook.presto.raptor.backup.TestBackupManager"}, {"methodBody": ["METHOD_START", "{", "File   staging    =    storageService . getStagingFile ( UUID . randomUUID (  )  )  . getParentFile (  )  ;", "assertEquals ( staging . list (  )  ,    new   String [  ]  {        }  )  ;", "}", "METHOD_END"], "methodName": ["assertEmptyStagingDirectory"], "fileName": "com.facebook.presto.raptor.backup.TestBackupManager"}, {"methodBody": ["METHOD_START", "{", "temporary    =    createTempDir (  )  ;", "FileBackupStore   fileStore    =    new   FileBackupStore ( new   File ( temporary ,     \" backup \"  )  )  ;", "fileStore . start (  )  ;", "backupStore    =    new    . TestingBackupStore ( fileStore )  ;", "storageService    =    new   FileStorageService ( new   File ( temporary ,     \" data \"  )  )  ;", "storageService . start (  )  ;", "backupManager    =    new   BackupManager ( Optional . of ( backupStore )  ,    storageService ,     5  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.raptor.backup.TestBackupManager"}, {"methodBody": ["METHOD_START", "{", "deleteRecursively ( temporary . toPath (  )  ,    ALLOW _ INSECURE )  ;", "b . shutdown (  )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.raptor.backup.TestBackupManager"}, {"methodBody": ["METHOD_START", "{", "assertEmptyStagingDirectory (  )  ;", "assertBackupStats (  0  ,     0  ,     0  )  ;", "File   file    =    new   File ( temporary ,     \" corrupt \"  )  ;", "Files . write (  \" hello   world \"  ,    file ,    StandardCharsets . UTF _  8  )  ;", "try    {", "backupManager . submit (  . CORRUPTION _ UUID ,    file )  . get (  1  ,    TimeUnit . SECONDS )  ;", "fail (  \" expected   exception \"  )  ;", "}    catch    ( ExecutionException   wrapper )     {", "PrestoException   e    =     (  ( PrestoException )     ( wrapper . getCause (  )  )  )  ;", "assertEquals ( e . getErrorCode (  )  ,    RaptorErrorCode . RAPTOR _ BACKUP _ CORRUPTION . toErrorCode (  )  )  ;", "assertEquals ( e . getMessage (  )  ,     (  \" Backup   is   corrupt   after   write :     \"     +     (  . CORRUPTION _ UUID )  )  )  ;", "}", "File   quarantineBase    =    storageService . getQuarantineFile (  . CORRUPTION _ UUID )  ;", "assertFile ( new   File (  (  ( quarantineBase . getPath (  )  )     +     \"  . original \"  )  )  )  ;", "assertFile ( new   File (  (  ( quarantineBase . getPath (  )  )     +     \"  . restored \"  )  )  )  ;", "assertBackupStats (  0  ,     1  ,     1  )  ;", "assertEmptyStagingDirectory (  )  ;", "}", "METHOD_END"], "methodName": ["testCorruption"], "fileName": "com.facebook.presto.raptor.backup.TestBackupManager"}, {"methodBody": ["METHOD_START", "{", "assertEmptyStagingDirectory (  )  ;", "assertBackupStats (  0  ,     0  ,     0  )  ;", "File   file    =    new   File ( temporary ,     \" failure \"  )  ;", "Files . write (  \" hello   world \"  ,    file ,    StandardCharsets . UTF _  8  )  ;", "try    {", "backupManager . submit (  . FAILURE _ UUID ,    file )  . get (  1  ,    TimeUnit . SECONDS )  ;", "fail (  \" expected   exception \"  )  ;", "}    catch    ( ExecutionException   wrapper )     {", "PrestoException   e    =     (  ( PrestoException )     ( wrapper . getCause (  )  )  )  ;", "assertEquals ( e . getErrorCode (  )  ,    RaptorErrorCode . RAPTOR _ BACKUP _ ERROR . toErrorCode (  )  )  ;", "assertEquals ( e . getMessage (  )  ,     \" Backup   failed   for   testing \"  )  ;", "}", "assertBackupStats (  0  ,     1  ,     0  )  ;", "assertEmptyStagingDirectory (  )  ;", "}", "METHOD_END"], "methodName": ["testFailure"], "fileName": "com.facebook.presto.raptor.backup.TestBackupManager"}, {"methodBody": ["METHOD_START", "{", "assertEmptyStagingDirectory (  )  ;", "assertBackupStats (  0  ,     0  ,     0  )  ;", "List < CompletableFuture <  ?  >  >    futures    =    new   ArrayList <  >  (  )  ;", "List < UUID >    uuids    =    new   ArrayList <  >  (  5  )  ;", "for    ( int   i    =     0  ;    i    <     5  ;    i +  +  )     {", "File   file    =    new   File ( temporary ,     (  \" file \"     +    i )  )  ;", "Files . write (  \" hello   world \"  ,    file ,    StandardCharsets . UTF _  8  )  ;", "uuids . add ( UUID . randomUUID (  )  )  ;", "futures . add ( b . submit ( uuids . get ( i )  ,    file )  )  ;", "}", "futures . forEach ( CompletableFuture :  : join )  ;", "for    ( UUID   uuid    :    uuids )     {", "assertTrue ( backupStore . shardExists ( uuid )  )  ;", "}", "assertBackupStats (  5  ,     0  ,     0  )  ;", "assertEmptyStagingDirectory (  )  ;", "}", "METHOD_END"], "methodName": ["testSimple"], "fileName": "com.facebook.presto.raptor.backup.TestBackupManager"}, {"methodBody": ["METHOD_START", "{", "ConfigAssertions . assertRecordedDefaults ( ConfigAssertions . recordDefaults ( FileBackupConfig . class )  . setBackupDirectory ( null )  )  ;", "}", "METHOD_END"], "methodName": ["testDefaults"], "fileName": "com.facebook.presto.raptor.backup.TestFileBackupConfig"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    properties    =    new   Builder < String ,    String >  (  )  . put (  \" backup . directory \"  ,     \"  / backup \"  )  . build (  )  ;", "expected    =    new    (  )  . setBackupDirectory ( new   File (  \"  / backup \"  )  )  ;", "ConfigAssertions . assertFullMapping ( properties ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testExplicitPropertyMappings"], "fileName": "com.facebook.presto.raptor.backup.TestFileBackupConfig"}, {"methodBody": ["METHOD_START", "{", "temporary    =    createTempDir (  )  ;", "store    =    new    ( new   File ( temporary ,     \" backup \"  )  )  ;", "store . start (  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.raptor.backup.TestFileBackupStore"}, {"methodBody": ["METHOD_START", "{", "deleteRecursively ( temporary . toPath (  )  ,    ALLOW _ INSECURE )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.raptor.backup.TestFileBackupStore"}, {"methodBody": ["METHOD_START", "{", "UUID   uuid    =    UUID . fromString (  \"  7  0  1 e 1 a 7  9  -  7  4 f 7  -  4 f 5  6  - b 4  3  8  - b 4  1 e 8 e 7 d 0  1  9 d \"  )  ;", "File   expected    =    new   File ( temporary ,    String . format (  \"  /  7  0  /  1 e /  % s . orc \"  ,    uuid )  )  ;", "assertEquals ( store . getBackupFile ( uuid )  ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testFilePaths"], "fileName": "com.facebook.presto.raptor.backup.TestFileBackupStore"}, {"methodBody": ["METHOD_START", "{", "ConfigAssertions . assertRecordedDefaults ( ConfigAssertions . recordDefaults ( HttpBackupConfig . class )  . setUri ( null )  )  ;", "}", "METHOD_END"], "methodName": ["testDefaults"], "fileName": "com.facebook.presto.raptor.backup.TestHttpBackupConfig"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    properties    =    new   Builder < String ,    String >  (  )  . put (  \" backup . http . uri \"  ,     \" http :  /  / example . net :  8  0  8  0  \"  )  . build (  )  ;", "expected    =    new    (  )  . setUri ( URI . create (  \" http :  /  / example . net :  8  0  8  0  \"  )  )  ;", "ConfigAssertions . assertFullMapping ( properties ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testExplicitPropertyMappings"], "fileName": "com.facebook.presto.raptor.backup.TestHttpBackupConfig"}, {"methodBody": ["METHOD_START", "{", "temporary    =    createTempDir (  )  ;", "Map < String ,    String >    properties    =    ImmutableMap .  < String ,    String > builder (  )  . put (  \" backup . http . uri \"  ,     \" http :  /  / localhost :  8  0  8  0  \"  )  . build (  )  ;", "Bootstrap   app    =    new   Bootstrap ( new   TestingNodeModule (  )  ,    new   TestingHttpServerModule (  )  ,    new   JsonModule (  )  ,    new   JaxrsModule ( true )  ,     (    binder )     -  >    jaxrsBinder ( binder )  . bind (  . class )  ,    override ( new   HttpBackupModule (  )  )  . with ( new    . TestingModule (  )  )  )  ;", "Injector   injector    =    app . strictConfig (  )  . setRequiredConfigurationProperties ( properties )  . doNotInitializeLogging (  )  . quiet (  )  . initialize (  )  ;", "lifeCycleManager    =    injector . getInstance ( LifeCycleManager . class )  ;", "store    =    injector . getInstance ( BackupStore . class )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.raptor.backup.TestHttpBackupStore"}, {"methodBody": ["METHOD_START", "{", "deleteRecursively ( temporary . toPath (  )  ,    ALLOW _ INSECURE )  ;", "if    (  ( lifeCycleManager )     !  =    null )     {", "lifeCycleManager . p (  )  ;", "}", "}", "METHOD_END"], "methodName": ["teardown"], "fileName": "com.facebook.presto.raptor.backup.TestHttpBackupStore"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( this . environment . equals ( environment )  )  )     {", "throw   new   WebApplicationException ( ponse . status ( FORBIDDEN )  . build (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkEnvironment"], "fileName": "com.facebook.presto.raptor.backup.TestingHttpBackupResource"}, {"methodBody": ["METHOD_START", "{", "checkEnvironment ( environment )  ;", "if    (  !  ( shards . containsKey ( uuid )  )  )     {", "return   ponse . status ( NOT _ FOUND )  . build (  )  ;", "}", "if    (  ( shards . get ( uuid )  )     =  =    null )     {", "return   ponse . status ( GONE )  . build (  )  ;", "}", "shards . put ( uuid ,    null )  ;", "return   ponse . noContent (  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["deleteRequest"], "fileName": "com.facebook.presto.raptor.backup.TestingHttpBackupResource"}, {"methodBody": ["METHOD_START", "{", "checkEnvironment ( environment )  ;", "if    (  !  ( shards . containsKey ( uuid )  )  )     {", "return   ponse . status ( NOT _ FOUND )  . build (  )  ;", "}", "byte [  ]    bytes    =    shards . get ( uuid )  ;", "if    ( bytes    =  =    null )     {", "return   ponse . status ( GONE )  . build (  )  ;", "}", "return   ponse . ok ( bytes )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["getRequest"], "fileName": "com.facebook.presto.raptor.backup.TestingHttpBackupResource"}, {"methodBody": ["METHOD_START", "{", "checkEnvironment ( environment )  ;", "if    (  !  ( shards . containsKey ( uuid )  )  )     {", "return   ponse . status ( NOT _ FOUND )  . build (  )  ;", "}", "if    (  ( shards . get ( uuid )  )     =  =    null )     {", "return   ponse . status ( GONE )  . build (  )  ;", "}", "return   ponse . noContent (  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["headRequest"], "fileName": "com.facebook.presto.raptor.backup.TestingHttpBackupResource"}, {"methodBody": ["METHOD_START", "{", "checkEnvironment ( environment )  ;", "if    (  (  ( request . getContentLength (  )  )     <     0  )     |  |     (  ( bytes . length )     !  =     ( request . getContentLength (  )  )  )  )     {", "return   Response . status ( BAD _ REQUEST )  . build (  )  ;", "}", "if    (  ( Long . parseUnsignedLong ( hexHash ,     1  6  )  )     !  =     ( XxHash 6  4  . hash ( Slices . wrappedBuffer ( bytes )  )  )  )     {", "return   Response . status ( BAD _ REQUEST )  . build (  )  ;", "}", "if    ( shards . containsKey ( uuid )  )     {", "byte [  ]    exi    =    shards . get ( uuid )  ;", "if    (  ( exi    =  =    null )     |  |     (  !  ( Arrays . equals ( bytes ,    exi )  )  )  )     {", "return   Response . status ( FORBIDDEN )  . build (  )  ;", "}", "}", "shards . put ( uuid ,    bytes )  ;", "return   Response . noContent (  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["putRequest"], "fileName": "com.facebook.presto.raptor.backup.TestingHttpBackupResource"}, {"methodBody": ["METHOD_START", "{", "executor . shutdownNow (  )  ;", "}", "METHOD_END"], "methodName": ["shutdown"], "fileName": "com.facebook.presto.raptor.backup.TimeoutBackupStore"}, {"methodBody": ["METHOD_START", "{", "executor    =    new   io . airlift . concurrent . ExecutorServiceAdapter ( new   BoundedExecutor ( executor ,    maxThreads )  )  ;", "TimeLimiter   limiter    =    SimpleTimeLimiter . create ( executor )  ;", "return   limiter . newProxy ( target ,    clazz ,    t . toMillis (  )  ,    TimeUnit . MILLISECONDS )  ;", "}", "METHOD_END"], "methodName": ["timeLimited"], "fileName": "com.facebook.presto.raptor.backup.TimeoutBackupStore"}, {"methodBody": ["METHOD_START", "{", "throw   new   PrestoException ( RaptorErrorCode . RAPTOR _ BACKUP _ TIMEOUT ,     (  ( message    +     \"  :     \"  )     +    uuid )  )  ;", "}", "METHOD_END"], "methodName": ["timeoutException"], "fileName": "com.facebook.presto.raptor.backup.TimeoutBackupStore"}, {"methodBody": ["METHOD_START", "{", "if    ( offlineNodes . contains ( nodeIdentifier )  )     {", "return ;", "}", "long   now    =    ticker . read (  )  ;", "long   start    =    delayedNodes . computeIfAbsent ( nodeIdentifier ,     (    key )     -  >    now )  ;", "Duration   delay    =    new   Duration (  ( now    -    start )  ,    TimeUnit . NANOSECONDS )  ;", "if    (  ( delay . compareTo ( reassignmentDelay )  )     <     0  )     {", "throw   new   spi . PrestoException ( RaptorErrorCode . RAPTOR _ REASSIGNMENT _ DELAY ,    String . format (  \" Reassignment   delay   is   in   effect   for   node    % s    ( elapsed :     % s )  \"  ,    nodeIdentifier ,    delay . convertToMostSuccinctTimeUnit (  )  )  )  ;", "}", "if    ( lastOfflined . isPresent (  )  )     {", "delay    =    new   Duration (  ( now    -     ( lastOfflined . getAsLong (  )  )  )  ,    TimeUnit . NANOSECONDS )  ;", "if    (  ( delay . compareTo ( reassignmentInterval )  )     <     0  )     {", "throw   new   spi . PrestoException ( RaptorErrorCode . RAPTOR _ REASSIGNMENT _ THROTTLE ,    String . format (  \" Reassignment   throttle   is   in   effect   for   node    % s    ( elapsed :     % s )  \"  ,    nodeIdentifier ,    delay . convertToMostSuccinctTimeUnit (  )  )  )  ;", "}", "}", "delayedNodes . remove ( nodeIdentifier )  ;", "offlineNodes . add ( nodeIdentifier )  ;", "lastOfflined    =    OptionalLong . of ( now )  ;", "}", "METHOD_END"], "methodName": ["checkAssignFrom"], "fileName": "com.facebook.presto.raptor.metadata.AssignmentLimiter"}, {"methodBody": ["METHOD_START", "{", "Set < String >    onlineNodes    =    nodeSupplier . getWorkerNodes (  )  . stream (  )  . map ( Node :  : getNodeIdentifier )  . collect ( Collectors . toSet (  )  )  ;", "synchronized ( this )     {", "delayedNodes . keySet (  )  . removeAll ( onlineNodes )  ;", "offlineNodes . removeAll ( onlineNodes )  ;", "}", "}", "METHOD_END"], "methodName": ["clearOnlineNodes"], "fileName": "com.facebook.presto.raptor.metadata.AssignmentLimiter"}, {"methodBody": ["METHOD_START", "{", "scheduler . shutdownNow (  )  ;", "}", "METHOD_END"], "methodName": ["shutdown"], "fileName": "com.facebook.presto.raptor.metadata.AssignmentLimiter"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( started . getAndSet ( true )  )  )     {", "scheduler . scheduleWithFixedDelay (  (  )     -  >     {", "try    {", "clearOnlineNodes (  )  ;", "}    catch    ( Throwable   t )     {", ". log . error ( t ,     \" Error   clearing   online   nodes \"  )  ;", "}", "}  ,     2  ,     2  ,    TimeUnit . SECONDS )  ;", "}", "}", "METHOD_END"], "methodName": ["start"], "fileName": "com.facebook.presto.raptor.metadata.AssignmentLimiter"}, {"methodBody": ["METHOD_START", "{", "return   bucketNumber ;", "}", "METHOD_END"], "methodName": ["getBucketNumber"], "fileName": "com.facebook.presto.raptor.metadata.BucketNode"}, {"methodBody": ["METHOD_START", "{", "return   nodeIdentifier ;", "}", "METHOD_END"], "methodName": ["getNodeIdentifier"], "fileName": "com.facebook.presto.raptor.metadata.BucketNode"}, {"methodBody": ["METHOD_START", "{", "return   bucketNumber ;", "}", "METHOD_END"], "methodName": ["getBucketNumber"], "fileName": "com.facebook.presto.raptor.metadata.BucketShards"}, {"methodBody": ["METHOD_START", "{", "return   shards ;", "}", "METHOD_END"], "methodName": ["getShards"], "fileName": "com.facebook.presto.raptor.metadata.BucketShards"}, {"methodBody": ["METHOD_START", "{", "return   new   ColumnInfo ( handle . getColumnId (  )  ,    handle . getColumnType (  )  )  ;", "}", "METHOD_END"], "methodName": ["fromHandle"], "fileName": "com.facebook.presto.raptor.metadata.ColumnInfo"}, {"methodBody": ["METHOD_START", "{", "return   columnId ;", "}", "METHOD_END"], "methodName": ["getColumnId"], "fileName": "com.facebook.presto.raptor.metadata.ColumnInfo"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.facebook.presto.raptor.metadata.ColumnInfo"}, {"methodBody": ["METHOD_START", "{", "return   bucketOrdinalPosition ;", "}", "METHOD_END"], "methodName": ["getBucketOrdinalPosition"], "fileName": "com.facebook.presto.raptor.metadata.ColumnMetadataRow"}, {"methodBody": ["METHOD_START", "{", "return   columnId ;", "}", "METHOD_END"], "methodName": ["getColumnId"], "fileName": "com.facebook.presto.raptor.metadata.ColumnMetadataRow"}, {"methodBody": ["METHOD_START", "{", "return   columnName ;", "}", "METHOD_END"], "methodName": ["getColumnName"], "fileName": "com.facebook.presto.raptor.metadata.ColumnMetadataRow"}, {"methodBody": ["METHOD_START", "{", "return   sortOrdinalPosition ;", "}", "METHOD_END"], "methodName": ["getSortOrdinalPosition"], "fileName": "com.facebook.presto.raptor.metadata.ColumnMetadataRow"}, {"methodBody": ["METHOD_START", "{", "return   tableId ;", "}", "METHOD_END"], "methodName": ["getTableId"], "fileName": "com.facebook.presto.raptor.metadata.ColumnMetadataRow"}, {"methodBody": ["METHOD_START", "{", "return   columnId ;", "}", "METHOD_END"], "methodName": ["getColumnId"], "fileName": "com.facebook.presto.raptor.metadata.ColumnStats"}, {"methodBody": ["METHOD_START", "{", "return   max ;", "}", "METHOD_END"], "methodName": ["getMax"], "fileName": "com.facebook.presto.raptor.metadata.ColumnStats"}, {"methodBody": ["METHOD_START", "{", "return   min ;", "}", "METHOD_END"], "methodName": ["getMin"], "fileName": "com.facebook.presto.raptor.metadata.ColumnStats"}, {"methodBody": ["METHOD_START", "{", "return   databaseType ;", "}", "METHOD_END"], "methodName": ["getDatabaseType"], "fileName": "com.facebook.presto.raptor.metadata.DatabaseConfig"}, {"methodBody": ["METHOD_START", "{", "this . databaseType    =    databaseType ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setDatabaseType"], "fileName": "com.facebook.presto.raptor.metadata.DatabaseConfig"}, {"methodBody": ["METHOD_START", "{", "binder . bind ( DatabaseMetadataModule . daoSupplierTypeToken ( baseType )  )  . toProvider ( new   DatabaseMetadataModule . DaoSupplierProvider ( type )  )  . in ( SINGLETON )  ;", "}", "METHOD_END"], "methodName": ["bindDaoSupplier"], "fileName": "com.facebook.presto.raptor.metadata.DatabaseMetadataModule"}, {"methodBody": ["METHOD_START", "{", "return   dataSource :  : getConnection ;", "}", "METHOD_END"], "methodName": ["createConnectionFactory"], "fileName": "com.facebook.presto.raptor.metadata.DatabaseMetadataModule"}, {"methodBody": ["METHOD_START", "{", "Type   javaType    =    new   com . google . common . reflect . TypeToken < com . facebook . presto . raptor . util . DaoSupplier < T >  >  (  )     {  }  . where ( new   com . google . common . reflect . TypeParameter < T >  (  )     {  }  ,    com . google . common . reflect . TypeToken . of ( type )  )  . getType (  )  ;", "return    (  ( TypeLiteral < com . facebook . presto . raptor . util . DaoSupplier <  ?    extends   T >  >  )     ( TypeLiteral . get ( javaType )  )  )  ;", "}", "METHOD_END"], "methodName": ["daoSupplierTypeToken"], "fileName": "com.facebook.presto.raptor.metadata.DatabaseMetadataModule"}, {"methodBody": ["METHOD_START", "{", "return   connection   instanceof   JdbcConnection    ?     1     :     1  0  0  0  ;", "}", "METHOD_END"], "methodName": ["batchSize"], "fileName": "com.facebook.presto.raptor.metadata.DatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "int   i    =     1  ;", "f    ( long   value    :    values )     {", "statement . setLong ( i ,    value )  ;", "i +  +  ;", "}", "}", "METHOD_END"], "methodName": ["bindLongs"], "fileName": "com.facebook.presto.raptor.metadata.DatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "int   i    =     1  ;", "f    ( UUID   uuid    :    uuids )     {", "statement . setBytes ( i ,    UuidUtil . uuidToBytes ( uuid )  )  ;", "i +  +  ;", "}", "}", "METHOD_END"], "methodName": ["bindUuids"], "fileName": "com.facebook.presto.raptor.metadata.DatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "if    (  ( dao . finalizeTransaction ( transactionId ,    true )  )     !  =     1  )     {", "if    ( Boolean . TRUE . equals ( dao . transactionSuccessful ( transactionId )  )  )     {", "return   false ;", "}", "throw   new   spi . PrestoException ( TRANSACTION _ CONFLICT ,     \" Transaction   commit   failed .    Please   retry   the   operation .  \"  )  ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["commitTransaction"], "fileName": "com.facebook.presto.raptor.metadata.DatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "List < T >    list    =    new   ArrayList <  >  ( collection )  ;", "Collections . shuffle ( list )  ;", "return   Iterables . cycle ( list )  . itera (  )  ;", "}", "METHOD_END"], "methodName": ["cyclingShuffledIterator"], "fileName": "com.facebook.presto.raptor.metadata.DatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "String   args    =    Joiner . on (  \"  ,  \"  )  . join ( Collections . nCopies ( shardUuids . size (  )  ,     \"  ?  \"  )  )  ;", "ImmutableSet . Builder < Long >    shardIdSet    =    ImmutableSet . builder (  )  ;", "long   rowCount    =     0  ;", "long   compressedSize    =     0  ;", "long   uncompressedSize    =     0  ;", "String   selectShards    =    String . format (  (  \"  \"     +     (  (  \" SELECT   shard _ id ,    row _ count ,    compressed _ size ,    uncompressed _ size \\ n \"     +     \" FROM   shards \\ n \"  )     +     \" WHERE   shard _ uuid   IN    (  % s )  \"  )  )  ,    args )  ;", "try    ( PreparedStatement   statement    =    handle . getConnection (  )  . prepareStatement ( selectShards )  )     {", ". bindUuids ( statement ,    shardUuids )  ;", "try    ( ResultSet   rs    =    statement . executeQuery (  )  )     {", "while    ( rs . next (  )  )     {", "shardIdSet . add ( rs . getLong (  \" shard _ id \"  )  )  ;", "rowCount    +  =    rs . getLong (  \" row _ count \"  )  ;", "compressedSize    +  =    rs . getLong (  \" compressed _ size \"  )  ;", "uncompressedSize    +  =    rs . getLong (  \" uncompressed _ size \"  )  ;", "}", "}", "}", "Set < Long >    shardIds    =    shardIdSet . build (  )  ;", "if    (  ( shardIds . size (  )  )     !  =     ( shardUuids . size (  )  )  )     {", "throw    . transactionConflict (  )  ;", "}", "ShardDao   dao    =    shardDaoSupplier . attach ( handle )  ;", "dao . insertDeletedShards ( shardUuids )  ;", "String   where    =     (  \"    WHERE   shard _ id   IN    (  \"     +    args )     +     \"  )  \"  ;", "String   deleteFromShardNodes    =     \" DELETE   FROM   shard _ nodes    \"     +    where ;", "String   deleteFromShards    =     \" DELETE   FROM   shards    \"     +    where ;", "String   deleteFromShardIndex    =     (  \" DELETE   FROM    \"     +     (  . shardIndexTable ( tableId )  )  )     +    where ;", "try    ( PreparedStatement   statement    =    handle . getConnection (  )  . prepareStatement ( deleteFromShardNodes )  )     {", ". bindLongs ( statement ,    shardIds )  ;", "statement . executeUpdate (  )  ;", "}", "for    ( String   sql    :    Arrays . asList ( deleteFromShards ,    deleteFromShardIndex )  )     {", "try    ( PreparedStatement   statement    =    handle . getConnection (  )  . prepareStatement ( sql )  )     {", ". bindLongs ( statement ,    shardIds )  ;", "if    (  ( statement . executeUpdate (  )  )     !  =     ( shardIds . size (  )  )  )     {", "throw    . transactionConflict (  )  ;", "}", "}", "}", "return   new    . ShardStats ( rowCount ,    compressedSize ,    uncompressedSize )  ;", "}", "METHOD_END"], "methodName": ["deleteShardsAndIndex"], "fileName": "com.facebook.presto.raptor.metadata.DatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "String   sql    =    String . format (  \" SELECT   node _ ids   FROM    % s   WHERE   shard _ uuid    =     ?    FOR   UPDATE \"  ,    DatabaseShardManager . shardIndexTable ( tableId )  )  ;", "byte [  ]    nodeArray    =    handle . createQuery ( sql )  . bind (  0  ,    UuidUtil . uuidToBytes ( shardUuid )  )  . map ( FIRST )  . first (  )  ;", "return   ArrayUtil . intArrayFromBytes ( nodeArray )  ;", "}", "METHOD_END"], "methodName": ["fetchLockedNodeIds"], "fileName": "com.facebook.presto.raptor.metadata.DatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "return   dao . getBucketNodes ( distributionId )  ;", "}", "METHOD_END"], "methodName": ["getBuckets"], "fileName": "com.facebook.presto.raptor.metadata.DatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "Set < String >    nodeIds    =    nodeSupplier . getWorkerNodes (  )  . stream (  )  . map ( Node :  : getNodeIdentifier )  . collect ( Collectors . toSet (  )  )  ;", "if    ( nodeIds . isEmpty (  )  )     {", "throw   new   spi . PrestoException ( NO _ NODES _ AVAILABLE ,     \" No   nodes   available   for   bucket   assignments \"  )  ;", "}", "return   nodeIds ;", "}", "METHOD_END"], "methodName": ["getNodeIdentifiers"], "fileName": "com.facebook.presto.raptor.metadata.DatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   nodeIdCache . getUnchecked ( nodeIdentifier )  ;", "}    catch    ( UncheckedExecutionException    |    ExecutionError   e )     {", "throw   Throwablesopagate ( e . getCause (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getOrCreateNodeId"], "fileName": "com.facebook.presto.raptor.metadata.DatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "checkArgument (  (  ( shardIds . size (  )  )     =  =     ( shards . size (  )  )  )  ,     \" lists   are   not   the   same   size \"  )  ;", "String   sql    =     \" INSERT   INTO   shard _ nodes    ( shard _ id ,    node _ id )    VALUES    (  ?  ,     ?  )  \"  ;", "try    ( PreparedStatement   statement    =    connection . prepareStatement ( sql )  )     {", "for    ( int   i    =     0  ;    i    <     ( shards . size (  )  )  ;    i +  +  )     {", "for    ( String   identifier    :    shards . get ( i )  . getNodeIdentifiers (  )  )     {", "statement . setLong (  1  ,    shardIds . get ( i )  )  ;", "statement . setInt (  2  ,    nodeIds . get ( identifier )  )  ;", "statement . addBatch (  )  ;", "}", "}", "statement . executeBatch (  )  ;", "}", "}", "METHOD_END"], "methodName": ["insertShardNodes"], "fileName": "com.facebook.presto.raptor.metadata.DatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "String   sql    =     \"  \"     +     (  \" INSERT   INTO   shards    ( shard _ uuid ,    table _ id ,    create _ time ,    row _ count ,    compressed _ size ,    uncompressed _ size ,    xxhash 6  4  ,    bucket _ number )  \\ n \"     +     \" VALUES    (  ?  ,     ?  ,    CURRENT _ TIMESTAMP ,     ?  ,     ?  ,     ?  ,     ?  ,     ?  )  \"  )  ;", "try    ( PreparedStatement   statement    =    connection . prepareStatement ( sql ,    Statement . RETURN _ GENERATED _ KEYS )  )     {", "for    ( ShardInfo   shard    :    shards )     {", "statement . setBytes (  1  ,    UuidUtil . uuidToBytes ( shard . getShardUuid (  )  )  )  ;", "statement . setLong (  2  ,    tableId )  ;", "statement . setLong (  3  ,    shard . getRowCount (  )  )  ;", "statement . setLong (  4  ,    shard . getCompressedSize (  )  )  ;", "statement . setLong (  5  ,    shard . getUncompressedSize (  )  )  ;", "statement . setLong (  6  ,    shard . getXxhash 6  4  (  )  )  ;", "Util . bindOptionalInt ( statement ,     7  ,    shard . getBucketNumber (  )  )  ;", "statement . addBatch (  )  ;", "}", "statement . executeBatch (  )  ;", "ImmutableList . Builder < Long >    builder    =    ImmutableList . builder (  )  ;", "try    ( ResultSet   keys    =    statement . getGeneratedKeys (  )  )     {", "while    ( keys . next (  )  )     {", "builder . add ( keys . getLong (  1  )  )  ;", "}", "}", "List < Long >    shardIds    =    builder . build (  )  ;", "if    (  ( shardIds . size (  )  )     !  =     ( shards . size (  )  )  )     {", "throw   new   PrestoException ( RaptorErrorCode . RAPTOR _ ERROR ,     \" Wrong   number   of   generated   keys   for   inserted   shards \"  )  ;", "}", "return   shardIds ;", "}", "}", "METHOD_END"], "methodName": ["insertShards"], "fileName": "com.facebook.presto.raptor.metadata.DatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "if    ( shards . isEmpty (  )  )     {", "return ;", "}", "boolean   bucketed    =    shards . iterator (  )  . next (  )  . getBucketNumber (  )  . isPresent (  )  ;", "Connection   connection    =    handle . getConnection (  )  ;", "try    ( IndexInserter   indexInserter    =    new   IndexInserter ( connection ,    tableId ,    columns )  )     {", "for    ( List < ShardInfo >    batch    :    partition ( shards ,     . batchSize ( connection )  )  )     {", "List < Long >    shardIds    =     . insertShards ( connection ,    tableId ,    batch )  ;", "if    (  ! bucketed )     {", ". insertShardNodes ( connection ,    nodeIds ,    shardIds ,    batch )  ;", "}", "for    ( int   i    =     0  ;    i    <     ( batch . size (  )  )  ;    i +  +  )     {", "ShardInfo   shard    =    batch . get ( i )  ;", "Set < Integer >    shardNodes    =    shard . getNodeIdentifiers (  )  . stream (  )  . map ( nodeIds :  : get )  . collect ( Collectors . toSet (  )  )  ;", "indexInserter . insert ( shardIds . get ( i )  ,    shard . getShardUuid (  )  ,    shard . getBucketNumber (  )  ,    shardNodes ,    shard . getColumnStats (  )  )  ;", "}", "indexInserter . execute (  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["insertShardsAndIndex"], "fileName": "com.facebook.presto.raptor.metadata.DatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "Set < String >    nodeIds    =    getNodeIdentifiers (  )  ;", "Iterator < String >    nodeIterator    =     . cyclingShuffledIterator ( nodeIds )  ;", "Builder < Integer ,    String >    assignments    =    ImmutableMap . builder (  )  ;", "for    ( BucketNode   bucketNode    :    getBuckets ( distributionId )  )     {", "int   bucket    =    bucketNode . getBucketNumber (  )  ;", "String   nodeId    =    bucketNode . getNodeIdentifier (  )  ;", "if    (  !  ( nodeIds . contains ( nodeId )  )  )     {", "if    (  ( nanosSince ( startTime )  . compareTo ( startupGracePeriod )  )     <     0  )     {", "throw   new   com . facebook . presto . spi . PrestoException ( SERVER _ STARTING _ UP ,     \" Cannot   reassign   buckets   while   server   is   starting \"  )  ;", "}", "assignmentLimiter . checkAssignFrom ( nodeId )  ;", "String   oldNodeId    =    nodeId ;", "nodeId    =    nodeIterator . next (  )  ;", "dao . updateBucketNode ( distributionId ,    bucket ,    getOrCreateNodeId ( nodeId )  )  ;", ". log . info (  \" Reassigned   bucket    % s   for   distribution   ID    % s   from    % s   to    % s \"  ,    bucket ,    distributionId ,    oldNodeId ,    nodeId )  ;", "}", "assignments . put ( bucket ,    nodeId )  ;", "}", "return   assignments . build (  )  ;", "}", "METHOD_END"], "methodName": ["loadBucketAssignments"], "fileName": "com.facebook.presto.raptor.metadata.DatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "Integer   id    =    dao . getNodeId ( nodeIdentifier )  ;", "if    ( id    !  =    null )     {", "return   id ;", "}", "DatabaseUtil . runIgnoringConstraintViolation (  (  )     -  >    dao . insertNode ( nodeIdentifier )  )  ;", "id    =    dao . getNodeId ( nodeIdentifier )  ;", "if    ( id    =  =    null )     {", "throw   new   spi . PrestoException ( GENERIC _ INTERNAL _ ERROR ,     \" node   does   not   exist   after   insert \"  )  ;", "}", "return   id ;", "}", "METHOD_END"], "methodName": ["loadNodeId"], "fileName": "com.facebook.presto.raptor.metadata.DatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "if    (  ( handle . attach ( MetadataDao . class )  . getLockedTableId ( tableId )  )     =  =    null )     {", "throw    . transactionConflict (  )  ;", "}", "}", "METHOD_END"], "methodName": ["lockTable"], "fileName": "com.facebook.presto.raptor.metadata.DatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "checkArgument (  ( columnId    >  =     0  )  ,     \" invalid   columnId    % s \"  ,    columnId )  ;", "return   String . format (  \" c % s _ max \"  ,    columnId )  ;", "}", "METHOD_END"], "methodName": ["maxColumn"], "fileName": "com.facebook.presto.raptor.metadata.DatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "checkArgument (  ( columnId    >  =     0  )  ,     \" invalid   columnId    % s \"  ,    columnId )  ;", "return   String . format (  \" c % s _ min \"  ,    columnId )  ;", "}", "METHOD_END"], "methodName": ["minColumn"], "fileName": "com.facebook.presto.raptor.metadata.DatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "return   new   io . airlift . units . Duration (  (  ( ticker . read (  )  )     -    nanos )  ,    TimeUnit . NANOSECONDS )  ;", "}", "METHOD_END"], "methodName": ["nanosSince"], "fileName": "com.facebook.presto.raptor.metadata.DatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "int   maxAttempts    =     5  ;", "for    ( int   attempt    =     1  ;    attempt    <  =    maxAttempts ;    attempt +  +  )     {", "try    {", "dbi . useTransaction (  (    handle ,    status )     -  >     {", "ShardDao   dao    =    shardDaoSupplier . attach ( handle )  ;", "if    ( commitTransaction ( dao ,    transactionId )  )     {", "callback . useHandle ( handle )  ;", "dao . deleteCreatedShards ( transactionId )  ;", "}", "}  )  ;", "return ;", "}    catch    ( DBIException   e )     {", "if    ( DatabaseUtil . isTransactionCacheFullError ( e )  )     {", "throw   DatabaseUtil . metadataError ( e ,     \" Transaction   too   large \"  )  ;", "}", "if    (  ( e . getCause (  )  )     !  =    null )     {", "throwIfInstanceOf ( e . getCause (  )  ,    PrestoException . class )  ;", "}", "if    ( attempt    =  =    maxAttempts )     {", "throw   DatabaseUtil . metadataError ( e )  ;", "}", ". log . warn ( e ,     \" Failed   to   commit   shards   on   attempt    % d ,    will   retry .  \"  ,    attempt )  ;", "try    {", "TimeUnit . SECONDS . sleep ( Math . multiplyExact ( attempt ,     2  )  )  ;", "}    catch    ( InterruptedException   ie )     {", "throw   DatabaseUtil . metadataError ( ie )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["runCommit"], "fileName": "com.facebook.presto.raptor.metadata.DatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "return    ( DatabaseShardManager . INDEX _ TABLE _ PREFIX )     +    tableId ;", "}", "METHOD_END"], "methodName": ["shardIndexTable"], "fileName": "com.facebook.presto.raptor.metadata.DatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "return   new   DatabaseShardManager . ShardStats ( shards . stream (  )  . mapToLong ( ShardInfo :  : getRowCount )  . sum (  )  ,    shards . stream (  )  . mapToLong ( ShardInfo :  : getCompressedSize )  . sum (  )  ,    shards . stream (  )  . mapToLong ( ShardInfo :  : getUncompressedSize )  . sum (  )  )  ;", "}", "METHOD_END"], "methodName": ["shardStats"], "fileName": "com.facebook.presto.raptor.metadata.DatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "JDBCType   jdbcType    =    ColumnIndexStatsUtils . jdbcType ( type )  ;", "if    ( jdbcType    !  =    null )     {", "switch    ( jdbcType )     {", "case   BOOLEAN    :", "return    \" boolean \"  ;", "case   BIGINT    :", "return    \" bigint \"  ;", "case   DOUBLE    :", "return    \" double \"  ;", "case   INTEGER    :", "return    \" int \"  ;", "case   VARBINARY    :", "return   String . format (  \" varbinary (  % s )  \"  ,    Stats . MAX _ BINARY _ INDEX _ SIZE )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["sqlColumnType"], "fileName": "com.facebook.presto.raptor.metadata.DatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "Set < String >    identifiers    =    shards . stream (  )  . map ( ShardInfo :  : getNodeIdentifiers )  . flatMap ( Collection :  : stream )  . collect ( Collectors . toSet (  )  )  ;", "return   Maps . toMap ( identifiers ,    this :  : getOrCreateNodeId )  ;", "}", "METHOD_END"], "methodName": ["toNodeIdMap"], "fileName": "com.facebook.presto.raptor.metadata.DatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . spi . PrestoException ( TRANSACTION _ CONFLICT ,     \" Table   was   updated   by   a   different   transaction .    Please   retry   the   operation .  \"  )  ;", "}", "METHOD_END"], "methodName": ["transactionConflict"], "fileName": "com.facebook.presto.raptor.metadata.DatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "String   sql    =    String . format (  \" UPDATE    % s   SET   node _ ids    =     ?    WHERE   shard _ uuid    =     ?  \"  ,    DatabaseShardManager . shardIndexTable ( tableId )  )  ;", "handle . execute ( sql ,    ArrayUtil . intArrayToBytes ( nodeIds )  ,    UuidUtil . uuidToBytes ( shardUuid )  )  ;", "}", "METHOD_END"], "methodName": ["updateNodeIds"], "fileName": "com.facebook.presto.raptor.metadata.DatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "return   bucketCount ;", "}", "METHOD_END"], "methodName": ["getBucketCount"], "fileName": "com.facebook.presto.raptor.metadata.Distribution"}, {"methodBody": ["METHOD_START", "{", "return   columnTypes ;", "}", "METHOD_END"], "methodName": ["getColumnTypes"], "fileName": "com.facebook.presto.raptor.metadata.Distribution"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "com.facebook.presto.raptor.metadata.Distribution"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.raptor.metadata.Distribution"}, {"methodBody": ["METHOD_START", "{", "return   Distribution . LIST _ CODEC . toJson ( columnTypes . stream (  )  . map (  (    type )     -  >    type . getTypeSignature (  )  . toString (  )  )  . collect ( Collectors . toList (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["serializeColumnTypes"], "fileName": "com.facebook.presto.raptor.metadata.Distribution"}, {"methodBody": ["METHOD_START", "{", "if    ( value   instanceof   String )     {", "return   Slices . utf 8 Slice (  (  ( String )     ( value )  )  )  ;", "}", "return   value ;", "}", "METHOD_END"], "methodName": ["convert"], "fileName": "com.facebook.presto.raptor.metadata.IndexInserter"}, {"methodBody": ["METHOD_START", "{", "statement . executeBatch (  )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "com.facebook.presto.raptor.metadata.IndexInserter"}, {"methodBody": ["METHOD_START", "{", "statement . setLong (  1  ,    shardId )  ;", "statement . setBytes (  2  ,    UuidUtil . uuidToBytes ( shardUuid )  )  ;", "if    ( bucketed )     {", "checkArgument ( bucketNumber . isPresent (  )  ,     \" shard   bucket   missing   for   bucketed   table \"  )  ;", "statement . setInt (  3  ,    bucketNumber . getAsInt (  )  )  ;", "} else    {", "checkArgument (  (  !  ( bucketNumber . isPresent (  )  )  )  ,     \" shard   bucket   present   for   non - bucketed   table \"  )  ;", "statement . setBytes (  3  ,    ArrayUtil . intArrayToBytes ( nodeIds )  )  ;", "}", "for    ( ColumnInfo   column    :    columns )     {", "int   index    =    indexes . get ( column . getColumnId (  )  )  ;", "int   type    =    types . get ( column . getColumnId (  )  )  . getVendorTypeNumber (  )  ;", "statement . setNull ( index ,    type )  ;", "statement . setNull (  ( index    +     1  )  ,    type )  ;", "}", "for    ( ColumnStats   column    :    stats )     {", "int   index    =    indexes . get ( column . getColumnId (  )  )  ;", "JDBCType   type    =    types . get ( column . getColumnId (  )  )  ;", "ShardPredicate . bindValue ( statement ,    type ,     . convert ( column . getMin (  )  )  ,    index )  ;", "ShardPredicate . bindValue ( statement ,    type ,     . convert ( column . getMax (  )  )  ,     ( index    +     1  )  )  ;", "}", "statement . addBatch (  )  ;", "}", "METHOD_END"], "methodName": ["insert"], "fileName": "com.facebook.presto.raptor.metadata.IndexInserter"}, {"methodBody": ["METHOD_START", "{", "return   url ;", "}", "METHOD_END"], "methodName": ["getUrl"], "fileName": "com.facebook.presto.raptor.metadata.JdbcDatabaseConfig"}, {"methodBody": ["METHOD_START", "{", "this . url    =    url ;", "turn   this ;", "}", "METHOD_END"], "methodName": ["setUrl"], "fileName": "com.facebook.presto.raptor.metadata.JdbcDatabaseConfig"}, {"methodBody": ["METHOD_START", "{", "return   reassignmentDelay ;", "}", "METHOD_END"], "methodName": ["getReassignmentDelay"], "fileName": "com.facebook.presto.raptor.metadata.MetadataConfig"}, {"methodBody": ["METHOD_START", "{", "return   reassignmentInterval ;", "}", "METHOD_END"], "methodName": ["getReassignmentInterval"], "fileName": "com.facebook.presto.raptor.metadata.MetadataConfig"}, {"methodBody": ["METHOD_START", "{", "return   startupGracePeriod ;", "}", "METHOD_END"], "methodName": ["getStartupGracePeriod"], "fileName": "com.facebook.presto.raptor.metadata.MetadataConfig"}, {"methodBody": ["METHOD_START", "{", "this . reassignmentDelay    =    reassignmentDelay ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setReassignmentDelay"], "fileName": "com.facebook.presto.raptor.metadata.MetadataConfig"}, {"methodBody": ["METHOD_START", "{", "this . reassignmentInterval    =    reassignmentInterval ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setReassignmentInterval"], "fileName": "com.facebook.presto.raptor.metadata.MetadataConfig"}, {"methodBody": ["METHOD_START", "{", "this . startupGracePeriod    =    startupGracePeriod ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setStartupGracePeriod"], "fileName": "com.facebook.presto.raptor.metadata.MetadataConfig"}, {"methodBody": ["METHOD_START", "{", "return   nodeIdentifier ;", "}", "METHOD_END"], "methodName": ["getNodeIdentifier"], "fileName": "com.facebook.presto.raptor.metadata.NodeSize"}, {"methodBody": ["METHOD_START", "{", "return   sizeInBytes ;", "}", "METHOD_END"], "methodName": ["getSizeInBytes"], "fileName": "com.facebook.presto.raptor.metadata.NodeSize"}, {"methodBody": ["METHOD_START", "{", "return   nodeId ;", "}", "METHOD_END"], "methodName": ["getNodeId"], "fileName": "com.facebook.presto.raptor.metadata.RaptorNode"}, {"methodBody": ["METHOD_START", "{", "return   nodeIdentifier ;", "}", "METHOD_END"], "methodName": ["getNodeIdentifier"], "fileName": "com.facebook.presto.raptor.metadata.RaptorNode"}, {"methodBody": ["METHOD_START", "{", "dao . createTableDistributions (  )  ;", "dao . createTableTables (  )  ;", "dao . createTableColumns (  )  ;", "dao . createTableViews (  )  ;", "dao . createTableNodes (  )  ;", "dao . createTableShards (  )  ;", "dao . createTableShardNodes (  )  ;", "dao . createTableExternalBats (  )  ;", "dao . createTableTransactions (  )  ;", "dao . createTableCreatedShards (  )  ;", "dao . createTableDeletedShards (  )  ;", "dao . createTableBuckets (  )  ;", "dao . createTableShardOrganizerJobs (  )  ;", "}", "METHOD_END"], "methodName": ["createTables"], "fileName": "com.facebook.presto.raptor.metadata.SchemaDaoUtil"}, {"methodBody": ["METHOD_START", "{", "Duration   delay    =    new   Duration (  2  ,    TimeUnit . SECONDS )  ;", "while    ( true )     {", "try    ( Handle   handle    =    dbi . open (  )  )     {", ". createTables ( handle . attach ( SchemaDao . class )  )  ;", "return ;", "}    catch    ( UnableToObtainConnectionException   e )     {", ". log . warn (  \" Failed   to   connect   to   database .    Will   retry   again   in    % s .    Exception :     % s \"  ,    delay ,    e . getMessage (  )  )  ;", ". sleep ( delay )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["createTablesWithRetry"], "fileName": "com.facebook.presto.raptor.metadata.SchemaDaoUtil"}, {"methodBody": ["METHOD_START", "{", "try    {", "Thad . sleep ( duration . toMillis (  )  )  ;", "}    catch    ( InterruptedException   e )     {", "Thad . curntThad (  )  . interrupt (  )  ;", "throw   new   RuntimeException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["sleep"], "fileName": "com.facebook.presto.raptor.metadata.SchemaDaoUtil"}, {"methodBody": ["METHOD_START", "{", "dao . abortOldTransactions ( ShardCleaner . maxTimestamp ( maxTransactionAge )  )  ;", "}", "METHOD_END"], "methodName": ["abortOldTransactions"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleaner"}, {"methodBody": ["METHOD_START", "{", "Set < UUID >    processing    =    newConcurrentHashSet (  )  ;", "BlockingQueue < UUID >    completed    =    new   LinkedBlockingQueue <  >  (  )  ;", "boolean   fill    =    true ;", "while    (  !  ( Thread . currentThread (  )  . isInterrupted (  )  )  )     {", "Set < UUID >    uuids    =    ImmutableSet . of (  )  ;", "if    ( fill    &  &     (  ( processing . size (  )  )     <     ( ShardDao . CLEANABLE _ SHARDS _ BATCH _ SIZE )  )  )     {", "uuids    =    dao . getCleanableShardsBatch (  . maxTimestamp ( backupCleanTime )  )  ;", "fill    =    false ;", "}", "if    (  ( uuids . isEmpty (  )  )     &  &     ( processing . isEmpty (  )  )  )     {", "break ;", "}", "uuids    =    ImmutableSet . copyOf ( difference ( uuids ,    processing )  )  ;", "processing . addAll ( uuids )  ;", "for    ( UUID   uuid    :    uuids )     {", "CompletableFuture . runAsync (  (  )     -  >    backupStore . get (  )  . deleteShard ( uuid )  ,    backupExecutor )  . thenAccept (  (    v )     -  >    completed . add ( uuid )  )  . whenComplete (  (    v ,    e )     -  >     {", "if    ( e    !  =    null )     {", ". log . error ( e ,     \" Error   cleaning   backup   shard :     % s \"  ,    uuid )  ;", "backupJobErrors . update (  1  )  ;", "processing . remove ( uuid )  ;", "}", "}  )  ;", "}", "int   desired    =    Math . min (  1  0  0  ,    processing . size (  )  )  ;", "Collection < UUID >    done    =     . drain ( completed ,    desired ,     1  0  0  ,    TimeUnit . MILLISECONDS )  ;", "if    ( done . isEmpty (  )  )     {", "continue ;", "}", "processing . removeAll ( done )  ;", "dao . deleteCleanedShards ( done )  ;", "backupShardsCleaned . update ( done . size (  )  )  ;", "fill    =    true ;", "}", "}", "METHOD_END"], "methodName": ["cleanBackupShards"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleaner"}, {"methodBody": ["METHOD_START", "{", "Set < UUID >    local    =    getLocalShards (  )  ;", "Set < UUID >    assigned    =    dao . getNodeShards ( currentNode ,    null )  . stream (  )  . map ( ShardMetadata :  : getShardUuid )  . collect ( Collectors . toSet (  )  )  ;", "for    ( UUID   uuid    :    assigned )     {", "shardsToClean . remove ( uuid )  ;", "}", "for    ( UUID   uuid    :    local )     {", "if    (  !  ( assigned . contains ( uuid )  )  )     {", "shardsToClean . putIfAbsent ( uuid ,    ticker . read (  )  )  ;", "}", "}", "long   threshold    =     ( ticker . read (  )  )     -     ( localCleanTime . roundTo ( TimeUnit . NANOSECONDS )  )  ;", "Set < UUID >    deletions    =    shardsToClean . entrySet (  )  . stream (  )  . filter (  (    entry )     -  >     ( entry . getValue (  )  )     <    threshold )  . map ( Map . Entry :  : getKey )  . collect ( Collectors . toSet (  )  )  ;", "if    ( deletions . isEmpty (  )  )     {", "return ;", "}", "for    ( UUID   uuid    :    deletions )     {", ". deleteFile ( storageService . getStorageFile ( uuid )  )  ;", "shardsToClean . remove ( uuid )  ;", "}", "localShardsCleaned . update ( deletions . size (  )  )  ;", ". log . info (  \" Cleaned    % s   local   shards \"  ,    deletions . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["cleanLocalShards"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleaner"}, {"methodBody": ["METHOD_START", "{", "Set < UUID >    assigned    =    dao . getNodeShards ( currentNode ,    null )  . stream (  )  . map ( ShardMetadata :  : getShardUuid )  . collect ( Collectors . toSet (  )  )  ;", "Set < UUID >    deletions    =    Sets . difference ( local ,    assigned )  ;", "for    ( UUID   uuid    :    deletions )     {", ". deleteFile ( storageService . getStorageFile ( uuid )  )  ;", "}", "localShardsCleaned . update ( deletions . size (  )  )  ;", ". log . info (  \" Cleaned    % s   local   shards   immediately \"  ,    deletions . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["cleanLocalShardsImmediately"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleaner"}, {"methodBody": ["METHOD_START", "{", "file . delete (  )  ;", "}", "METHOD_END"], "methodName": ["deleteFile"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleaner"}, {"methodBody": ["METHOD_START", "{", "while    (  !  ( Thread . currentThread (  )  . isInterrupted (  )  )  )     {", "int   deleted    =    dao . deleteOldCompletedTransactions (  . maxTimestamp ( maxCompletedTransactionAge )  )  ;", "if    ( deleted    <     ( ShardDao . CLEANUP _ TRANSACTIONS _ BATCH _ SIZE )  )     {", "break ;", "}", "}", "}", "METHOD_END"], "methodName": ["deleteOldCompletedTransactions"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleaner"}, {"methodBody": ["METHOD_START", "{", "while    (  !  ( Thread . currentThread (  )  . isInterrupted (  )  )  )     {", "List < UUID >    shards    =    dao . getOldCreatedsBatch (  )  ;", "if    ( shards . isEmpty (  )  )     {", "break ;", "}", "dao . insertDeleteds ( shards )  ;", "dao . deleteCreateds ( shards )  ;", "backupsQueued . update ( shards . size (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["deleteOldShards"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleaner"}, {"methodBody": ["METHOD_START", "{", "long   start    =    System . nanoTime (  )  ;", "Collection < T >    ult    =    new   ArrayList <  >  (  )  ;", "while    ( true )     {", "queue . drainTo ( ult )  ;", "if    (  ( ult . size (  )  )     >  =    desired )     {", "return   ult ;", "}", "long   elapsedNanos    =     ( System . nanoTime (  )  )     -    start ;", "long   remainingNanos    =     ( unit . toNanos ( timeout )  )     -    elapsedNanos ;", "if    ( remainingNanos    <  =     0  )     {", "return   ult ;", "}", "try    {", "T   value    =    queue . poll ( remainingNanos ,    TimeUnit . NANOSECONDS )  ;", "if    ( value    !  =    null )     {", "ult . add ( value )  ;", "}", "}    catch    ( InterruptedException   e )     {", "Thread . currentThread (  )  . interrupt (  )  ;", "return   ult ;", "}", "}", "}", "METHOD_END"], "methodName": ["drain"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleaner"}, {"methodBody": ["METHOD_START", "{", "return   backupJobErrors ;", "}", "METHOD_END"], "methodName": ["getBackupJobErrors"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleaner"}, {"methodBody": ["METHOD_START", "{", "return   backupShardsCleaned ;", "}", "METHOD_END"], "methodName": ["getBackupShardsCleaned"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleaner"}, {"methodBody": ["METHOD_START", "{", "return   backupShardsQueued ;", "}", "METHOD_END"], "methodName": ["getBackupShardsQueued"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleaner"}, {"methodBody": ["METHOD_START", "{", "return   localJobErrors ;", "}", "METHOD_END"], "methodName": ["getLocalJobErrors"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleaner"}, {"methodBody": ["METHOD_START", "{", "return   storageService . getStorageShards (  )  ;", "}", "METHOD_END"], "methodName": ["getLocalShards"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleaner"}, {"methodBody": ["METHOD_START", "{", "return   localShardsCleaned ;", "}", "METHOD_END"], "methodName": ["getLocalShardsCleaned"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleaner"}, {"methodBody": ["METHOD_START", "{", "return   transactionJobErrors ;", "}", "METHOD_END"], "methodName": ["getTransactionJobErrors"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleaner"}, {"methodBody": ["METHOD_START", "{", "return   new   Timestamp (  (  ( System . currentTimeMillis (  )  )     -     ( duration . toMillis (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["maxTimestamp"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleaner"}, {"methodBody": ["METHOD_START", "{", "try    {", "cleanBackupShards (  )  ;", "}    catch    ( Throwable   t )     {", ". log . error ( t ,     \" Error   cleaning   backup   shards \"  )  ;", "backupJobErrors . update (  1  )  ;", "}", "}", "METHOD_END"], "methodName": ["runBackupCleanup"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleaner"}, {"methodBody": ["METHOD_START", "{", "try    {", "cleanLocalShards (  )  ;", "}    catch    ( Throwable   t )     {", ". log . error ( t ,     \" Error   cleaning   local   shards \"  )  ;", "localJobErrors . update (  1  )  ;", "}", "}", "METHOD_END"], "methodName": ["runLocalCleanup"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleaner"}, {"methodBody": ["METHOD_START", "{", "try    {", "cleanLocalShardsImmediately ( local )  ;", "}    catch    ( Throwable   t )     {", ". log . error ( t ,     \" Error   cleaning   local   shards \"  )  ;", "localJobErrors . update (  1  )  ;", "}", "}", "METHOD_END"], "methodName": ["runLocalCleanupImmediately"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleaner"}, {"methodBody": ["METHOD_START", "{", "scheduler . scheduleWithFixedDelay ( this :  : runBackupCleanup ,     0  ,    backupCleanerInterval . toMillis (  )  ,    TimeUnit . MILLISECONDS )  ;", "}", "METHOD_END"], "methodName": ["scheduleBackupCleanup"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleaner"}, {"methodBody": ["METHOD_START", "{", "Set < UUID >    local    =    getLocalShards (  )  ;", "scheduler . submit (  (  )     -  >     {", "waitJitterTime (  )  ;", "runLocalCleanupImmediately ( local )  ;", "}  )  ;", "scheduler . scheduleWithFixedDelay (  (  )     -  >     {", "waitJitterTime (  )  ;", "runLocalCleanup (  )  ;", "}  ,     0  ,    localInterval . toMillis (  )  ,    TimeUnit . MILLISECONDS )  ;", "}", "METHOD_END"], "methodName": ["scheduleLocalCleanup"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleaner"}, {"methodBody": ["METHOD_START", "{", "scheduler . shutdownNow (  )  ;", "backupExecushutdownNow (  )  ;", "}", "METHOD_END"], "methodName": ["shutdown"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleaner"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( started . getAndSet ( true )  )  )     {", "startJobs (  )  ;", "}", "}", "METHOD_END"], "methodName": ["start"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleaner"}, {"methodBody": ["METHOD_START", "{", "scheduler . submit ( this :  : runBackupCleanup )  ;", "}", "METHOD_END"], "methodName": ["startBackupCleanup"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleaner"}, {"methodBody": ["METHOD_START", "{", "if    ( coordinator )     {", "startTransactionup (  )  ;", "if    ( backupStore . isPresent (  )  )     {", "scheduleBackupup (  )  ;", "}", "}", "if    ( backupStore . isPresent (  )  )     {", "scheduleLocalup (  )  ;", "}", "}", "METHOD_END"], "methodName": ["startJobs"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleaner"}, {"methodBody": ["METHOD_START", "{", "scheduler . submit ( this :  : runLocalCleanup )  ;", "}", "METHOD_END"], "methodName": ["startLocalCleanup"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleaner"}, {"methodBody": ["METHOD_START", "{", "scheduler . submit (  (  )     -  >     {", "runLocalCleanupImmediately ( getLocals (  )  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["startLocalCleanupImmediately"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleaner"}, {"methodBody": ["METHOD_START", "{", "scheduler . scheduleWithFixedDelay (  (  )     -  >     {", "try    {", "abortOldTransactions (  )  ;", "deleteOldCompletedTransactions (  )  ;", "deleteOldShards (  )  ;", "}    catch    (    t )     {", ". log . error ( t ,     \" Error   cleaning   transactions \"  )  ;", "transactionJobErrors . update (  1  )  ;", "}", "}  ,     0  ,    transactionCleanerInterval . toMillis (  )  ,    TimeUnit . MILLISECONDS )  ;", "}", "METHOD_END"], "methodName": ["startTransactionCleanup"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleaner"}, {"methodBody": ["METHOD_START", "{", "try    {", "long   interval    =    this . localInterval . roundTo ( TimeUnit . SECONDS )  ;", "TimeUnit . SECONDS . sleep ( ThreadLocalRandom . current (  )  . nextLong (  1  ,    interval )  )  ;", "}    catch    ( InterruptedException   e )     {", "Thread . currentThread (  )  . interrupt (  )  ;", "}", "}", "METHOD_END"], "methodName": ["waitJitterTime"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleaner"}, {"methodBody": ["METHOD_START", "{", "return   backupCleanTime ;", "}", "METHOD_END"], "methodName": ["getBackupCleanTime"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleanerConfig"}, {"methodBody": ["METHOD_START", "{", "return   backupCleanerInterval ;", "}", "METHOD_END"], "methodName": ["getBackupCleanerInterval"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleanerConfig"}, {"methodBody": ["METHOD_START", "{", "return   backupDeletionThreads ;", "}", "METHOD_END"], "methodName": ["getBackupDeletionThreads"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleanerConfig"}, {"methodBody": ["METHOD_START", "{", "return   localCleanTime ;", "}", "METHOD_END"], "methodName": ["getLocalCleanTime"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleanerConfig"}, {"methodBody": ["METHOD_START", "{", "return   localCleanerInterval ;", "}", "METHOD_END"], "methodName": ["getLocalCleanerInterval"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleanerConfig"}, {"methodBody": ["METHOD_START", "{", "return   maxCompletedTransactionAge ;", "}", "METHOD_END"], "methodName": ["getMaxCompletedTransactionAge"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleanerConfig"}, {"methodBody": ["METHOD_START", "{", "return   maxTransactionAge ;", "}", "METHOD_END"], "methodName": ["getMaxTransactionAge"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleanerConfig"}, {"methodBody": ["METHOD_START", "{", "return   transactionCleanerInterval ;", "}", "METHOD_END"], "methodName": ["getTransactionCleanerInterval"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleanerConfig"}, {"methodBody": ["METHOD_START", "{", "this . backupCleanTime    =    backupCleanTime ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setBackupCleanTime"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleanerConfig"}, {"methodBody": ["METHOD_START", "{", "this . backupCleanerInterval    =    backupCleanerInterval ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setBackupCleanerInterval"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleanerConfig"}, {"methodBody": ["METHOD_START", "{", "this . backupDeletionThreads    =    backupDeletionThreads ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setBackupDeletionThreads"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleanerConfig"}, {"methodBody": ["METHOD_START", "{", "this . localCleanTime    =    localCleanTime ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setLocalCleanTime"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleanerConfig"}, {"methodBody": ["METHOD_START", "{", "this . localCleanerInterval    =    localCleanerInterval ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setLocalCleanerInterval"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleanerConfig"}, {"methodBody": ["METHOD_START", "{", "this . maxCompletedTransactionAge    =    maxCompletedTransactionAge ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setMaxCompletedTransactionAge"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleanerConfig"}, {"methodBody": ["METHOD_START", "{", "this . maxTransactionAge    =    maxTransactionAge ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setMaxTransactionAge"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleanerConfig"}, {"methodBody": ["METHOD_START", "{", "this . transactionCleanerInterval    =    transactionCleanerInterval ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setTransactionCleanerInterval"], "fileName": "com.facebook.presto.raptor.metadata.ShardCleanerConfig"}, {"methodBody": ["METHOD_START", "{", "return   newShards ;", "}", "METHOD_END"], "methodName": ["getNewShards"], "fileName": "com.facebook.presto.raptor.metadata.ShardDelta"}, {"methodBody": ["METHOD_START", "{", "return   oldShardUuids ;", "}", "METHOD_END"], "methodName": ["getOldShardUuids"], "fileName": "com.facebook.presto.raptor.metadata.ShardDelta"}, {"methodBody": ["METHOD_START", "{", "return   bucketNumber ;", "}", "METHOD_END"], "methodName": ["getBucketNumber"], "fileName": "com.facebook.presto.raptor.metadata.ShardInfo"}, {"methodBody": ["METHOD_START", "{", "return   columnStats ;", "}", "METHOD_END"], "methodName": ["getColumnStats"], "fileName": "com.facebook.presto.raptor.metadata.ShardInfo"}, {"methodBody": ["METHOD_START", "{", "return   compressedSize ;", "}", "METHOD_END"], "methodName": ["getCompressedSize"], "fileName": "com.facebook.presto.raptor.metadata.ShardInfo"}, {"methodBody": ["METHOD_START", "{", "return   nodeIdentifiers ;", "}", "METHOD_END"], "methodName": ["getNodeIdentifiers"], "fileName": "com.facebook.presto.raptor.metadata.ShardInfo"}, {"methodBody": ["METHOD_START", "{", "return   rowCount ;", "}", "METHOD_END"], "methodName": ["getRowCount"], "fileName": "com.facebook.presto.raptor.metadata.ShardInfo"}, {"methodBody": ["METHOD_START", "{", "return   shardUuid ;", "}", "METHOD_END"], "methodName": ["getShardUuid"], "fileName": "com.facebook.presto.raptor.metadata.ShardInfo"}, {"methodBody": ["METHOD_START", "{", "return   uncompressedSize ;", "}", "METHOD_END"], "methodName": ["getUncompressedSize"], "fileName": "com.facebook.presto.raptor.metadata.ShardInfo"}, {"methodBody": ["METHOD_START", "{", "return   xxhash 6  4  ;", "}", "METHOD_END"], "methodName": ["getXxhash64"], "fileName": "com.facebook.presto.raptor.metadata.ShardInfo"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( resultSet . next (  )  )  )     {", "return   endOfData (  )  ;", "}", "UUID   shardUuid    =    UuidUtil . uuidFromBytes ( resultSet . getBytes (  \" shard _ uuid \"  )  )  ;", "Set < String >    nodeIdentifiers ;", "OptionalInt   bucketNumber    =    OptionalInt . empty (  )  ;", "if    (  ( bucketToNode )     !  =    null )     {", "int   bucket    =    resultSet . getInt (  \" bucket _ number \"  )  ;", "bucketNumber    =    OptionalInt . of ( bucket )  ;", "nodeIdentifiers    =    ImmutableSet . of ( getBucketNode ( bucket )  )  ;", "} else    {", "List < Integer >    nodeIds    =    ArrayUtil . intArrayFromBytes ( resultSet . getBytes (  \" node _ ids \"  )  )  ;", "nodeIdentifiers    =    getNodeIdentifiers ( nodeIds ,    shardUuid )  ;", "}", "Nodes   shard    =    new   Nodes ( shardUuid ,    nodeIdentifiers )  ;", "return   new   Buckets ( bucketNumber ,    ImmutableSet . of ( shard )  )  ;", "}", "METHOD_END"], "methodName": ["compute"], "fileName": "com.facebook.presto.raptor.metadata.ShardIterator"}, {"methodBody": ["METHOD_START", "{", "if    ( resultSet . isAfterLast (  )  )     {", "return   endOfData (  )  ;", "}", "if    ( first )     {", "first    =    false ;", "if    (  !  ( resultSet . next (  )  )  )     {", "return   endOfData (  )  ;", "}", "}", "int   bucketNumber    =    resultSet . getInt (  \" bucket _ number \"  )  ;", "ImmutableSet . Builder < Nodes >    shards    =    ImmutableSet . builder (  )  ;", "do    {", "UUID   shardUuid    =    UuidUtil . uuidFromBytes ( resultSet . getBytes (  \" shard _ uuid \"  )  )  ;", "int   bucket    =    resultSet . getInt (  \" bucket _ number \"  )  ;", "Set < String >    nodeIdentifiers    =    ImmutableSet . of ( getBucketNode ( bucket )  )  ;", "shards . add ( new   Nodes ( shardUuid ,    nodeIdentifiers )  )  ;", "}    while    (  ( resultSet . next (  )  )     &  &     (  ( resultSet . getInt (  \" bucket _ number \"  )  )     =  =    bucketNumber )     )  ;", "return   new   Buckets ( OptionalInt . of ( bucketNumber )  ,    shards . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["computeMerged"], "fileName": "com.facebook.presto.raptor.metadata.ShardIterator"}, {"methodBody": ["METHOD_START", "{", "String   node    =    dao . getNodeIdentifier ( id )  ;", "if    ( node    =  =    null )     {", "throw   new   PException ( RaptorErrorCode . RAPTOR _ ERROR ,    String . format (  \" Missing   node   ID    [  % s ]    for   shard :     % s \"  ,    id ,    shardUuid )  )  ;", "}", "return   node ;", "}", "METHOD_END"], "methodName": ["fetchNode"], "fileName": "com.facebook.presto.raptor.metadata.ShardIterator"}, {"methodBody": ["METHOD_START", "{", "for    ( RaptorNode   node    :    dao . getNodes (  )  )     {", "nodeMap . put ( node . getNodeId (  )  ,    node . getNodeIdentifier (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["fetchNodes"], "fileName": "com.facebook.presto.raptor.metadata.ShardIterator"}, {"methodBody": ["METHOD_START", "{", "String   node    =    bucketToNode . get ( bucket )  ;", "if    ( node    =  =    null )     {", "throw   new   PException ( RaptorErrorCode . RAPTOR _ ERROR ,     (  \" No   node   mapping   for   bucket :     \"     +    bucket )  )  ;", "}", "return   node ;", "}", "METHOD_END"], "methodName": ["getBucketNode"], "fileName": "com.facebook.presto.raptor.metadata.ShardIterator"}, {"methodBody": ["METHOD_START", "{", "Function < Integer ,    String >    fetchNode    =     (    id )     -  >    fetchNode ( id ,    shardUuid )  ;", "return   nodeIds . stream (  )  . map (  (    id )     -  >    nodeMap . computeIfAbsent ( id ,    fetchNode )  )  . collect ( Collectors . toSet (  )  )  ;", "}", "METHOD_END"], "methodName": ["getNodeIdentifiers"], "fileName": "com.facebook.presto.raptor.metadata.ShardIterator"}, {"methodBody": ["METHOD_START", "{", "return   bucketNumber ;", "}", "METHOD_END"], "methodName": ["getBucketNumber"], "fileName": "com.facebook.presto.raptor.metadata.ShardMetadata"}, {"methodBody": ["METHOD_START", "{", "return   compressedSize ;", "}", "METHOD_END"], "methodName": ["getCompressedSize"], "fileName": "com.facebook.presto.raptor.metadata.ShardMetadata"}, {"methodBody": ["METHOD_START", "{", "return   rangeEnd ;", "}", "METHOD_END"], "methodName": ["getRangeEnd"], "fileName": "com.facebook.presto.raptor.metadata.ShardMetadata"}, {"methodBody": ["METHOD_START", "{", "return   rangeStart ;", "}", "METHOD_END"], "methodName": ["getRangeStart"], "fileName": "com.facebook.presto.raptor.metadata.ShardMetadata"}, {"methodBody": ["METHOD_START", "{", "return   rowCount ;", "}", "METHOD_END"], "methodName": ["getRowCount"], "fileName": "com.facebook.presto.raptor.metadata.ShardMetadata"}, {"methodBody": ["METHOD_START", "{", "return   shardId ;", "}", "METHOD_END"], "methodName": ["getShardId"], "fileName": "com.facebook.presto.raptor.metadata.ShardMetadata"}, {"methodBody": ["METHOD_START", "{", "return   shardUuid ;", "}", "METHOD_END"], "methodName": ["getShardUuid"], "fileName": "com.facebook.presto.raptor.metadata.ShardMetadata"}, {"methodBody": ["METHOD_START", "{", "return   tableId ;", "}", "METHOD_END"], "methodName": ["getTableId"], "fileName": "com.facebook.presto.raptor.metadata.ShardMetadata"}, {"methodBody": ["METHOD_START", "{", "return   uncompressedSize ;", "}", "METHOD_END"], "methodName": ["getUncompressedSize"], "fileName": "com.facebook.presto.raptor.metadata.ShardMetadata"}, {"methodBody": ["METHOD_START", "{", "return   xxhash 6  4  ;", "}", "METHOD_END"], "methodName": ["getXxhash64"], "fileName": "com.facebook.presto.raptor.metadata.ShardMetadata"}, {"methodBody": ["METHOD_START", "{", "return   new   ShardMetadata ( tableId ,    shardId ,    shardUuid ,    bucketNumber ,    rowCount ,    compressedSize ,    uncompressedSize ,    xxhash 6  4  ,    OptionalLong . of ( rangeStart )  ,    OptionalLong . of ( rangeEnd )  )  ;", "}", "METHOD_END"], "methodName": ["withTimeRange"], "fileName": "com.facebook.presto.raptor.metadata.ShardMetadata"}, {"methodBody": ["METHOD_START", "{", "return   nodeIdentifier ;", "}", "METHOD_END"], "methodName": ["getNodeIdentifier"], "fileName": "com.facebook.presto.raptor.metadata.ShardNode"}, {"methodBody": ["METHOD_START", "{", "return   shardUuid ;", "}", "METHOD_END"], "methodName": ["getShardUuid"], "fileName": "com.facebook.presto.raptor.metadata.ShardNode"}, {"methodBody": ["METHOD_START", "{", "return   nodeId ;", "}", "METHOD_END"], "methodName": ["getNodeId"], "fileName": "com.facebook.presto.raptor.metadata.ShardNodeId"}, {"methodBody": ["METHOD_START", "{", "return   shardUuid ;", "}", "METHOD_END"], "methodName": ["getShardUuid"], "fileName": "com.facebook.presto.raptor.metadata.ShardNodeId"}, {"methodBody": ["METHOD_START", "{", "return   nodeIdentifiers ;", "}", "METHOD_END"], "methodName": ["getNodeIdentifiers"], "fileName": "com.facebook.presto.raptor.metadata.ShardNodes"}, {"methodBody": ["METHOD_START", "{", "return   shardUuid ;", "}", "METHOD_END"], "methodName": ["getShardUuid"], "fileName": "com.facebook.presto.raptor.metadata.ShardNodes"}, {"methodBody": ["METHOD_START", "{", "for    ( int   i    =     0  ;    i    <     ( types . size (  )  )  ;    i +  +  )     {", "JDBCType   type    =    types . get ( i )  ;", "Object   value    =    values . get ( i )  ;", ". bindValue ( statement ,    type ,    value ,     ( i    +     1  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["bind"], "fileName": "com.facebook.presto.raptor.metadata.ShardPredicate"}, {"methodBody": ["METHOD_START", "{", "if    ( value    =  =    null )     {", "statement . setNull ( index ,    type . getVendorTypeNumber (  )  )  ;", "return ;", "}", "switch    ( type )     {", "case   BOOLEAN    :", "statement . setBoolean ( index ,     (  ( boolean )     ( value )  )  )  ;", "return ;", "case   INTEGER    :", "statement . setInt ( index ,     (  ( Number )     ( value )  )  . intValue (  )  )  ;", "return ;", "case   BIGINT    :", "statement . setLong ( index ,     (  ( Number )     ( value )  )  . longValue (  )  )  ;", "return ;", "case   DOUBLE    :", "statement . setDouble ( index ,     (  ( Number )     ( value )  )  . doubleValue (  )  )  ;", "return ;", "case   VARBINARY    :", "statement . setBytes ( index ,    ShardStats . truncateIndexValue (  (  ( Slice )     ( value )  )  )  . getBytes (  )  )  ;", "return ;", "}", "throw   new   spi . PrestoException ( GENERIC _ INTERNAL _ ERROR ,     (  \" Unhandled   type :     \"     +    type )  )  ;", "}", "METHOD_END"], "methodName": ["bindValue"], "fileName": "com.facebook.presto.raptor.metadata.ShardPredicate"}, {"methodBody": ["METHOD_START", "{", "StringJoiner   predicate    =    new   StringJoiner (  \"    AND    \"  )  . setEmptyValue (  \" true \"  )  ;", "ImmutableList . Builder < JDBCType >    types    =    ImmutableList . builder (  )  ;", "ImmutableList . Builder < Object >    values    =    ImmutableList . builder (  )  ;", "for    ( Map . Entry < RaptorColumnHandle ,    Domain >    entry    :    tupleDomain . getDomains (  )  . get (  )  . entrySet (  )  )     {", "Domain   domain    =    entry . getValue (  )  ;", "if    (  ( domain . isNullAllowed (  )  )     |  |     ( domain . isAll (  )  )  )     {", "continue ;", "}", "RaptorColumnHandle   handle    =    entry . getKey (  )  ;", "Type   type    =    handle . getColumnType (  )  ;", "JDBCType   jdbcType    =    ColumnIndexStatsUtils . jdbcType ( type )  ;", "if    ( jdbcType    =  =    null )     {", "continue ;", "}", "if    ( handle . isShardUuid (  )  )     {", "predicate . add ( create ( types ,    values ,    domain ,    jdbcType )  )  ;", "continue ;", "}", "if    (  !  ( domain . getType (  )  . isOrderable (  )  )  )     {", "continue ;", "}", "Ranges   ranges    =    domain . getValues (  )  . getRanges (  )  ;", "if    (  ( ranges . getRangeCount (  )  )     !  =     1  )     {", "continue ;", "}", "Range   range    =    getOnlyElement ( ranges . getOrderedRanges (  )  )  ;", "Object   minValue    =    null ;", "Object   maxValue    =    null ;", "if    ( range . isSingleValue (  )  )     {", "minValue    =    range . getSingleValue (  )  ;", "maxValue    =    range . getSingleValue (  )  ;", "} else    {", "if    (  !  ( range . getLow (  )  . isLowerUnbounded (  )  )  )     {", "minValue    =    range . getLow (  )  . getValue (  )  ;", "}", "if    (  !  ( range . getHigh (  )  . isUpperUnbounded (  )  )  )     {", "maxValue    =    range . getHigh (  )  . getValue (  )  ;", "}", "}", "String   min ;", "String   max ;", "if    ( handle . isBucketNumber (  )  )     {", "if    (  ! bucketed )     {", "predicate . add (  \" false \"  )  ;", "continue ;", "}", "min    =     \" bucket _ number \"  ;", "max    =     \" bucket _ number \"  ;", "} else    {", "min    =    DatabaseShardManager . minColumn ( handle . getColumnId (  )  )  ;", "max    =    DatabaseShardManager . maxColumn ( handle . getColumnId (  )  )  ;", "}", "if    ( minValue    !  =    null )     {", "predicate . add ( String . format (  \"  (  % s    >  =     ?    OR    % s   IS   NULL )  \"  ,    max ,    max )  )  ;", "types . add ( jdbcType )  ;", "values . add ( minValue )  ;", "}", "if    ( maxValue    !  =    null )     {", "predicate . add ( String . format (  \"  (  % s    <  =     ?    OR    % s   IS   NULL )  \"  ,    min ,    min )  )  ;", "types . add ( jdbcType )  ;", "values . add ( maxValue )  ;", "}", "}", "return   new    ( predicate . toString (  )  ,    types . build (  )  ,    values . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "com.facebook.presto.raptor.metadata.ShardPredicate"}, {"methodBody": ["METHOD_START", "{", "List < Range >    ranges    =    domain . getValues (  )  . getRanges (  )  . getOrderedRanges (  )  ;", "if    (  ( ranges . isEmpty (  )  )     |  |     (  !  ( ranges . stream (  )  . allMatch ( Range :  : isSingleValue )  )  )  )     {", "return    \" true \"  ;", "}", "ImmutableList . Builder < Object >    valuesBuilder    =    ImmutableList . builder (  )  ;", "ImmutableList . Builder < JDBCType >    typesBuilder    =    ImmutableList . builder (  )  ;", "StringJoiner   range    =    new   StringJoiner (  \"    OR    \"  )  ;", "for    ( Range   range    :    ranges )     {", "Slice   uuidText    =     (  ( Slice )     ( range . getSingleValue (  )  )  )  ;", "try    {", "Slice   uuidBytes    =    UuidUtil . uuidStringToBytes ( uuidText )  ;", "typesBuilder . add ( jdbcType )  ;", "valuesBuilder . add ( uuidBytes )  ;", "}    catch    ( IllegalArgumentException   e )     {", "return    \" true \"  ;", "}", "range . add (  \" shard _ uuid    =     ?  \"  )  ;", "}", "types . addAll ( typesBuilder . build (  )  )  ;", "values . addAll ( valuesBuilder . build (  )  )  ;", "return   range . toString (  )  ;", "}", "METHOD_END"], "methodName": ["createShardPredicate"], "fileName": "com.facebook.presto.raptor.metadata.ShardPredicate"}, {"methodBody": ["METHOD_START", "{", "return   predicate ;", "}", "METHOD_END"], "methodName": ["getPredicate"], "fileName": "com.facebook.presto.raptor.metadata.ShardPredicate"}, {"methodBody": ["METHOD_START", "{", "return   types ;", "}", "METHOD_END"], "methodName": ["getTypes"], "fileName": "com.facebook.presto.raptor.metadata.ShardPredicate"}, {"methodBody": ["METHOD_START", "{", "return   values ;", "}", "METHOD_END"], "methodName": ["getValues"], "fileName": "com.facebook.presto.raptor.metadata.ShardPredicate"}, {"methodBody": ["METHOD_START", "{", "return   bucketCount ;", "}", "METHOD_END"], "methodName": ["getBucketCount"], "fileName": "com.facebook.presto.raptor.metadata.Table"}, {"methodBody": ["METHOD_START", "{", "return   distributionId ;", "}", "METHOD_END"], "methodName": ["getDistributionId"], "fileName": "com.facebook.presto.raptor.metadata.Table"}, {"methodBody": ["METHOD_START", "{", "return   distributionName ;", "}", "METHOD_END"], "methodName": ["getDistributionName"], "fileName": "com.facebook.presto.raptor.metadata.Table"}, {"methodBody": ["METHOD_START", "{", "return   tableId ;", "}", "METHOD_END"], "methodName": ["getTableId"], "fileName": "com.facebook.presto.raptor.metadata.Table"}, {"methodBody": ["METHOD_START", "{", "return   temporalColumnId ;", "}", "METHOD_END"], "methodName": ["getTemporalColumnId"], "fileName": "com.facebook.presto.raptor.metadata.Table"}, {"methodBody": ["METHOD_START", "{", "return   organized ;", "}", "METHOD_END"], "methodName": ["isOrganized"], "fileName": "com.facebook.presto.raptor.metadata.Table"}, {"methodBody": ["METHOD_START", "{", "return   bucketOrdinal ;", "}", "METHOD_END"], "methodName": ["getBucketOrdinal"], "fileName": "com.facebook.presto.raptor.metadata.TableColumn"}, {"methodBody": ["METHOD_START", "{", "return   columnId ;", "}", "METHOD_END"], "methodName": ["getColumnId"], "fileName": "com.facebook.presto.raptor.metadata.TableColumn"}, {"methodBody": ["METHOD_START", "{", "return   columnName ;", "}", "METHOD_END"], "methodName": ["getColumnName"], "fileName": "com.facebook.presto.raptor.metadata.TableColumn"}, {"methodBody": ["METHOD_START", "{", "return   dataType ;", "}", "METHOD_END"], "methodName": ["getDataType"], "fileName": "com.facebook.presto.raptor.metadata.TableColumn"}, {"methodBody": ["METHOD_START", "{", "return   ordinalPosition ;", "}", "METHOD_END"], "methodName": ["getOrdinalPosition"], "fileName": "com.facebook.presto.raptor.metadata.TableColumn"}, {"methodBody": ["METHOD_START", "{", "return   sortOrdinal ;", "}", "METHOD_END"], "methodName": ["getSortOrdinal"], "fileName": "com.facebook.presto.raptor.metadata.TableColumn"}, {"methodBody": ["METHOD_START", "{", "return   table ;", "}", "METHOD_END"], "methodName": ["getTable"], "fileName": "com.facebook.presto.raptor.metadata.TableColumn"}, {"methodBody": ["METHOD_START", "{", "return   temporal ;", "}", "METHOD_END"], "methodName": ["isTemporal"], "fileName": "com.facebook.presto.raptor.metadata.TableColumn"}, {"methodBody": ["METHOD_START", "{", "return   new   ColumnInfo ( columnId ,    dataType )  ;", "}", "METHOD_END"], "methodName": ["toColumnInfo"], "fileName": "com.facebook.presto.raptor.metadata.TableColumn"}, {"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . spi . ColumnMetadata ( columnName ,    dataType )  ;", "}", "METHOD_END"], "methodName": ["toColumnMetadata"], "fileName": "com.facebook.presto.raptor.metadata.TableColumn"}, {"methodBody": ["METHOD_START", "{", "return   columns ;", "}", "METHOD_END"], "methodName": ["getColumns"], "fileName": "com.facebook.presto.raptor.metadata.TableMetadata"}, {"methodBody": ["METHOD_START", "{", "return   sortColumnIds ;", "}", "METHOD_END"], "methodName": ["getSortColumnIds"], "fileName": "com.facebook.presto.raptor.metadata.TableMetadata"}, {"methodBody": ["METHOD_START", "{", "return   tableId ;", "}", "METHOD_END"], "methodName": ["getTableId"], "fileName": "com.facebook.presto.raptor.metadata.TableMetadata"}, {"methodBody": ["METHOD_START", "{", "return   bucketCount ;", "}", "METHOD_END"], "methodName": ["getBucketCount"], "fileName": "com.facebook.presto.raptor.metadata.TableMetadataRow"}, {"methodBody": ["METHOD_START", "{", "return   distributionName ;", "}", "METHOD_END"], "methodName": ["getDistributionName"], "fileName": "com.facebook.presto.raptor.metadata.TableMetadataRow"}, {"methodBody": ["METHOD_START", "{", "return   schemaName ;", "}", "METHOD_END"], "methodName": ["getSchemaName"], "fileName": "com.facebook.presto.raptor.metadata.TableMetadataRow"}, {"methodBody": ["METHOD_START", "{", "return   tableId ;", "}", "METHOD_END"], "methodName": ["getTableId"], "fileName": "com.facebook.presto.raptor.metadata.TableMetadataRow"}, {"methodBody": ["METHOD_START", "{", "return   tableName ;", "}", "METHOD_END"], "methodName": ["getTableName"], "fileName": "com.facebook.presto.raptor.metadata.TableMetadataRow"}, {"methodBody": ["METHOD_START", "{", "return   temporalColumnId ;", "}", "METHOD_END"], "methodName": ["getTemporalColumnId"], "fileName": "com.facebook.presto.raptor.metadata.TableMetadataRow"}, {"methodBody": ["METHOD_START", "{", "return   organized ;", "}", "METHOD_END"], "methodName": ["isOrganized"], "fileName": "com.facebook.presto.raptor.metadata.TableMetadataRow"}, {"methodBody": ["METHOD_START", "{", "return   compressedSize ;", "}", "METHOD_END"], "methodName": ["getCompressedSize"], "fileName": "com.facebook.presto.raptor.metadata.TableStatsRow"}, {"methodBody": ["METHOD_START", "{", "return   createTime ;", "}", "METHOD_END"], "methodName": ["getCreateTime"], "fileName": "com.facebook.presto.raptor.metadata.TableStatsRow"}, {"methodBody": ["METHOD_START", "{", "return   rowCount ;", "}", "METHOD_END"], "methodName": ["getRowCount"], "fileName": "com.facebook.presto.raptor.metadata.TableStatsRow"}, {"methodBody": ["METHOD_START", "{", "return   schemaName ;", "}", "METHOD_END"], "methodName": ["getSchemaName"], "fileName": "com.facebook.presto.raptor.metadata.TableStatsRow"}, {"methodBody": ["METHOD_START", "{", "return   shardCount ;", "}", "METHOD_END"], "methodName": ["getShardCount"], "fileName": "com.facebook.presto.raptor.metadata.TableStatsRow"}, {"methodBody": ["METHOD_START", "{", "return   tableName ;", "}", "METHOD_END"], "methodName": ["getTableName"], "fileName": "com.facebook.presto.raptor.metadata.TableStatsRow"}, {"methodBody": ["METHOD_START", "{", "return   tableVersion ;", "}", "METHOD_END"], "methodName": ["getTableVersion"], "fileName": "com.facebook.presto.raptor.metadata.TableStatsRow"}, {"methodBody": ["METHOD_START", "{", "return   uncompressedSize ;", "}", "METHOD_END"], "methodName": ["getUncompressedSize"], "fileName": "com.facebook.presto.raptor.metadata.TableStatsRow"}, {"methodBody": ["METHOD_START", "{", "return   updateTime ;", "}", "METHOD_END"], "methodName": ["getUpdateTime"], "fileName": "com.facebook.presto.raptor.metadata.TableStatsRow"}, {"methodBody": ["METHOD_START", "{", "try    {", "l . checkAssignFrom ( node )  ;", "fail (  \" expected   exception \"  )  ;", "}    catch    ( PrestoException   e )     {", "assertEquals ( e . getErrorCode (  )  ,    expected . toErrorCode (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertCheckFails"], "fileName": "com.facebook.presto.raptor.metadata.TestAssignmentLimiter"}, {"methodBody": ["METHOD_START", "{", "TestingTicker   ticker    =    new   TestingTicker (  )  ;", "AssignmentLimiter   limiter    =    new   AssignmentLimiter ( ImmutableSet :  : of ,    ticker ,    new   Duration (  5  ,    TimeUnit . MINUTES )  ,    new   Duration (  1  0  ,    TimeUnit . MINUTES )  )  ;", ". assertCheckFails ( limiter ,     \" A \"  ,    RaptorErrorCode . RAPTOR _ REASSIGNMENT _ DELAY )  ;", "ticker . increment (  1  ,    TimeUnit . MINUTES )  ;", ". assertCheckFails ( limiter ,     \" A \"  ,    RaptorErrorCode . RAPTOR _ REASSIGNMENT _ DELAY )  ;", ". assertCheckFails ( limiter ,     \" B \"  ,    RaptorErrorCode . RAPTOR _ REASSIGNMENT _ DELAY )  ;", "ticker . increment (  4  ,    TimeUnit . MINUTES )  ;", "limiter . checkAssignFrom (  \" A \"  )  ;", ". assertCheckFails ( limiter ,     \" B \"  ,    RaptorErrorCode . RAPTOR _ REASSIGNMENT _ DELAY )  ;", "ticker . increment (  1  ,    TimeUnit . MINUTES )  ;", ". assertCheckFails ( limiter ,     \" B \"  ,    RaptorErrorCode . RAPTOR _ REASSIGNMENT _ THROTTLE )  ;", ". assertCheckFails ( limiter ,     \" C \"  ,    RaptorErrorCode . RAPTOR _ REASSIGNMENT _ DELAY )  ;", "ticker . increment (  8  ,    TimeUnit . MINUTES )  ;", ". assertCheckFails ( limiter ,     \" B \"  ,    RaptorErrorCode . RAPTOR _ REASSIGNMENT _ THROTTLE )  ;", ". assertCheckFails ( limiter ,     \" C \"  ,    RaptorErrorCode . RAPTOR _ REASSIGNMENT _ THROTTLE )  ;", "ticker . increment (  1  ,    TimeUnit . MINUTES )  ;", "limiter . checkAssignFrom (  \" B \"  )  ;", ". assertCheckFails ( limiter ,     \" C \"  ,    RaptorErrorCode . RAPTOR _ REASSIGNMENT _ THROTTLE )  ;", "ticker . increment (  9  ,    TimeUnit . MINUTES )  ;", ". assertCheckFails ( limiter ,     \" C \"  ,    RaptorErrorCode . RAPTOR _ REASSIGNMENT _ THROTTLE )  ;", "ticker . increment (  1  ,    TimeUnit . MINUTES )  ;", "limiter . checkAssignFrom (  \" A \"  )  ;", "ticker . increment (  5  ,    TimeUnit . MINUTES )  ;", "limiter . checkAssignFrom (  \" A \"  )  ;", "limiter . checkAssignFrom (  \" B \"  )  ;", "limiter . checkAssignFrom (  \" C \"  )  ;", "}", "METHOD_END"], "methodName": ["testLimiter"], "fileName": "com.facebook.presto.raptor.metadata.TestAssignmentLimiter"}, {"methodBody": ["METHOD_START", "{", "ConfigAssertions . assertRecordedDefaults ( ConfigAssertions . recordDefaults ( DatabaseConfig . class )  . setDatabaseType ( null )  )  ;", "}", "METHOD_END"], "methodName": ["testDefaults"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseConfig"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    properties    =    ImmutableMap .  < String ,    String > builder (  )  . put (  \" metadata . db . type \"  ,     \" h 2  \"  )  . build (  )  ;", "expected    =    new    (  )  . setDatabaseType (  \" h 2  \"  )  ;", "ConfigAssertions . assertFullMapping ( properties ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testExplicitPropertyMappings"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseConfig"}, {"methodBody": ["METHOD_START", "{", "try    ( Statement   statement    =    dummyHandle . getConnection (  )  . createStatement (  )  )     {", "try    ( ResultSet   rs    =    statement . executeQuery ( String . format (  \" SELECT    *    FROM    % s   LIMIT    0  \"  ,     . shardIndexTable ( tableId )  )  )  )     {", "return   rs . getMetaData (  )  . getColumnCount (  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["columnCount"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "return   Domain . create ( ValueSet . ofRanges ( first ,    ranges )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["createDomain"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "return   TestDatabaseShardManager . createShardManager ( dbi ,    ImmutableSet :  : of ,    systemTicker (  )  )  ;", "}", "METHOD_END"], "methodName": ["createShardManager"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "return   TestDatabaseShardManager . createShardManager ( dbi ,    nodeSupplier ,    systemTicker (  )  )  ;", "}", "METHOD_END"], "methodName": ["createShardManager"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "DaoSupplier < ShardDao >    shardDaoSupplier    =    new   DaoSupplier ( dbi ,    H 2 ShardDao . class )  ;", "AssignmentLimiter   assignmentLimiter    =    new   AssignmentLimiter ( nodeSupplier ,    ticker ,    new   MetadataConfig (  )  )  ;", "return   new    ( dbi ,    shardDaoSupplier ,    nodeSupplier ,    assignmentLimiter ,    ticker ,    new   Duration (  1  ,    TimeUnit . DAYS )  )  ;", "}", "METHOD_END"], "methodName": ["createShardManager"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "return   dbi . onDemand ( MetadataDao . class )  . insertTable (  \" test \"  ,    name ,    false ,    false ,    null ,     0  )  ;", "}", "METHOD_END"], "methodName": ["createTable"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . metadata . PrestoNode ( UUID . randomUUID (  )  . toString (  )  ,    URI . create (  \" http :  /  / test \"  )  ,    NodeVersion . UNKNOWN ,    false )  ;", "}", "METHOD_END"], "methodName": ["createTestingNode"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "return   LocalDate . of ( year ,    month ,    day )  . toEpochDay (  )  ;", "}", "METHOD_END"], "methodName": ["date"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "try    ( ResultIterator < BucketShards >    iterator    =    shardManager . getShardNodes ( tableId ,    predicate )  )     {", "return   ImmutableSet . copyOf ( concat ( transform ( iterator ,     (    i )     -  >    i . getShards (  )  . iterator (  )  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getShardNodes"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "return   nodes . stream (  )  . map ( Node :  : getNodeIdentifier )  . collect ( Collectors . toSet (  )  )  ;", "}", "METHOD_END"], "methodName": ["nodeIds"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "dbi    =    new   DBI (  (  \" jdbc : h 2  : mem : test \"     +     ( System . nanoTime (  )  )  )  )  ;", "dummyHandle    =    dbi . open (  )  ;", "SchemaDaoUtil . createTablesWithRetry ( dbi )  ;", "dataDir    =    Files . createTempDir (  )  ;", "shardManager    =     . createShardManager ( dbi )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "return   new   TestDatabaseShardManager . ShardAssertion ( tableId )  ;", "}", "METHOD_END"], "methodName": ["shardAssertion"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "return   TestDatabaseShardManager . shardInfo ( shardUuid ,    nodeIdentifier ,    ImmutableList . of (  )  )  ;", "}", "METHOD_END"], "methodName": ["shardInfo"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "return   new   ShardInfo ( shardUuid ,    OptionalInt . empty (  )  ,    ImmutableSet . of ( nodeId )  ,    columnStats ,     0  ,     0  ,     0  ,     0  )  ;", "}", "METHOD_END"], "methodName": ["shardInfo"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "dummyHandle . close (  )  ;", "deleteRecursively ( Dir . toPath (  )  ,    ALLOW _ INSECURE )  ;", "}", "METHOD_END"], "methodName": ["teardown"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "long   tableId    =    createTable (  \" test \"  )  ;", "List < ColumnInfo >    columns    =    ImmutableList . of ( new   ColumnInfo (  1  ,    BIGINT )  )  ;", "s . createTable ( tableId ,    columns ,    false ,    OptionalLong . empty (  )  )  ;", "int   before    =    columnCount ( tableId )  ;", "s . addColumn ( tableId ,    columns . get (  0  )  )  ;", "int   after    =    columnCount ( tableId )  ;", "assertEquals ( after ,    before )  ;", "}", "METHOD_END"], "methodName": ["testAddDuplicateColumn"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "long   tableId    =    createTable (  \" test \"  )  ;", "List < ColumnInfo >    columns    =    ImmutableList . of ( new   ColumnInfo (  1  ,    BIGINT )  )  ;", "s . createTable ( tableId ,    columns ,    false ,    OptionalLong . empty (  )  )  ;", "int   before    =    columnCount ( tableId )  ;", "ColumnInfo   newColumn    =    new   ColumnInfo (  2  ,    BIGINT )  ;", "s . addColumn ( tableId ,    newColumn )  ;", "int   after    =    columnCount ( tableId )  ;", "assertEquals ( after ,     ( before    +     2  )  )  ;", "}", "METHOD_END"], "methodName": ["testAddNewColumn"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "long   tableId    =    createTable (  \" test \"  )  ;", "UUID   shard    =    UUID . randomUUID (  )  ;", "List < ShardInfo >    shardNodes    =    ImmutableList . of (  . shardInfo ( shard ,     \" node 1  \"  )  )  ;", "List < ColumnInfo >    columns    =    ImmutableList . of ( new   ColumnInfo (  1  ,    BIGINT )  )  ;", "shardManager . createTable ( tableId ,    columns ,    false ,    OptionalLong . empty (  )  )  ;", "long   transactionId    =    shardManager . beginTransaction (  )  ;", "shardManager . commitShards ( transactionId ,    tableId ,    columns ,    shardNodes ,    Optional . empty (  )  ,     0  )  ;", "ShardNodes   actual    =    getOnlyElement ( getShardNodes ( tableId ,    TupleDomain . all (  )  )  )  ;", "assertEquals ( actual ,    new   ShardNodes ( shard ,    ImmutableSet . of (  \" node 1  \"  )  )  )  ;", "try    {", "shardManager . assignShard ( tableId ,    shard ,     \" node 2  \"  ,    true )  ;", "fail (  \" expected   exception \"  )  ;", "}    catch    ( PrestoException   e )     {", "assertEquals ( e . getErrorCode (  )  ,    SERVER _ STARTING _ UP . toErrorCode (  )  )  ;", "}", "shardManager . assignShard ( tableId ,    shard ,     \" node 2  \"  ,    false )  ;", "actual    =    getOnlyElement ( getShardNodes ( tableId ,    TupleDomain . all (  )  )  )  ;", "assertEquals ( actual ,    new   ShardNodes ( shard ,    ImmutableSet . of (  \" node 1  \"  ,     \" node 2  \"  )  )  )  ;", "shardManager . assignShard ( tableId ,    shard ,     \" node 2  \"  ,    false )  ;", "shardManager . unassignShard ( tableId ,    shard ,     \" node 1  \"  )  ;", "actual    =    getOnlyElement ( getShardNodes ( tableId ,    TupleDomain . all (  )  )  )  ;", "assertEquals ( actual ,    new   ShardNodes ( shard ,    ImmutableSet . of (  \" node 2  \"  )  )  )  ;", "shardManager . unassignShard ( tableId ,    shard ,     \" node 1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testAssignShard"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "Node   node 1     =    TestDatabaseShardManager . createTestingNode (  )  ;", "Node   node 2     =    TestDatabaseShardManager . createTestingNode (  )  ;", "Node   node 3     =    TestDatabaseShardManager . createTestingNode (  )  ;", "TestingTicker   ticker    =    new   TestingTicker (  )  ;", "MetadataDao   metadataDao    =    dbi . onDemand ( MetadataDao . class )  ;", "int   bucketCount    =     1  3  ;", "long   distributionId    =    metadataDao . insertDistribution ( null ,     \" test \"  ,    bucketCount )  ;", "Set < Node >    originalNodes    =    ImmutableSet . of ( node 1  ,    node 2  )  ;", "ShardManager   shardManager    =    TestDatabaseShardManager . createShardManager ( dbi ,     (  )     -  >    originalNodes ,    ticker )  ;", "shardManager . createBuckets ( distributionId ,    bucketCount )  ;", "Map < Integer ,    String >    assignments    =    shardManager . getBucketAssignments ( distributionId )  ;", "assertEquals ( assignments . size (  )  ,    bucketCount )  ;", "assertEquals ( ImmutableSet . copyOf ( assignments . values (  )  )  ,    TestDatabaseShardManager . nodeIds ( originalNodes )  )  ;", "Set < Node >    newNodes    =    ImmutableSet . of ( node 1  ,    node 3  )  ;", "shardManager    =    TestDatabaseShardManager . createShardManager ( dbi ,     (  )     -  >    newNodes ,    ticker )  ;", "try    {", "shardManager . getBucketAssignments ( distributionId )  ;", "fail (  \" expected   exception \"  )  ;", "}    catch    ( PrestoException   e )     {", "assertEquals ( e . getErrorCode (  )  ,    SERVER _ STARTING _ UP . toErrorCode (  )  )  ;", "}", "ticker . increment (  2  ,    TimeUnit . DAYS )  ;", "assignments    =    shardManager . getBucketAssignments ( distributionId )  ;", "assertEquals ( assignments . size (  )  ,    bucketCount )  ;", "assertEquals ( ImmutableSet . copyOf ( assignments . values (  )  )  ,    TestDatabaseShardManager . nodeIds ( newNodes )  )  ;", "}", "METHOD_END"], "methodName": ["testBucketAssignments"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "long   tableId    =    createTable (  \" test \"  )  ;", "List < ShardInfo >    shards    =    ImmutableList .  < ShardInfo > builder (  )  . add (  . shardInfo ( UUID . randomUUID (  )  ,     \" node 1  \"  )  )  . add (  . shardInfo ( UUID . randomUUID (  )  ,     \" node 1  \"  )  )  . add (  . shardInfo ( UUID . randomUUID (  )  ,     \" node 2  \"  )  )  . build (  )  ;", "List < ColumnInfo >    columns    =    ImmutableList . of ( new   ColumnInfo (  1  ,    BIGINT )  )  ;", "shardManager . createTable ( tableId ,    columns ,    false ,    OptionalLong . empty (  )  )  ;", "long   transactionId    =    shardManager . beginTransaction (  )  ;", "shardManager . commitShards ( transactionId ,    tableId ,    columns ,    shards ,    Optional . empty (  )  ,     0  )  ;", "Set < ShardNodes >    actual    =    getShardNodes ( tableId ,    TupleDomain . all (  )  )  ;", "assertEquals ( actual ,     . toShardNodes ( shards )  )  ;", "}", "METHOD_END"], "methodName": ["testCommit"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "long   tableId    =    createTable (  \" test \"  )  ;", "List < ColumnInfo >    columns    =    ImmutableList . of ( new   ColumnInfo (  1  ,    BIGINT )  )  ;", "s . createTable ( tableId ,    columns ,    false ,    OptionalLong . empty (  )  )  ;", "try    ( ResultIterator < BucketShards >    iterator    =    s . getShardNodes ( tableId ,    TupleDomain . all (  )  )  )     {", "assertFalse ( iterator . hasNext (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testEmptyTable"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "long   tableId    =    createTable (  \" test \"  )  ;", "List < ColumnInfo >    columns    =    ImmutableList . of ( new   ColumnInfo (  1  ,    BIGINT )  )  ;", "s . createTable ( tableId ,    columns ,    true ,    OptionalLong . empty (  )  )  ;", "try    ( ResultIterator < BucketShards >    iterator    =    s . getShardNodesBucketed ( tableId ,    true ,    ImmutableMap . of (  )  ,    TupleDomain . all (  )  )  )     {", "assertFalse ( iterator . hasNext (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testEmptyTableBucketed"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "long   tableId    =    createTable (  \" test \"  )  ;", "Optional < String >    externalBatchId    =    Optional . of (  \" foo \"  )  ;", "List < ShardInfo >    shards    =    ImmutableList . of (  . shardInfo ( UUID . randomUUID (  )  ,     \" node 1  \"  )  )  ;", "List < ColumnInfo >    columns    =    ImmutableList . of ( new   ColumnInfo (  1  ,    BIGINT )  )  ;", "shardManager . createTable ( tableId ,    columns ,    false ,    OptionalLong . empty (  )  )  ;", "long   transactionId    =    shardManager . beginTransaction (  )  ;", "shardManager . commitShards ( transactionId ,    tableId ,    columns ,    shards ,    externalBatchId ,     0  )  ;", "shards    =    ImmutableList . of (  . shardInfo ( UUID . randomUUID (  )  ,     \" node 1  \"  )  )  ;", "try    {", "transactionId    =    shardManager . beginTransaction (  )  ;", "shardManager . commitShards ( transactionId ,    tableId ,    columns ,    shards ,    externalBatchId ,     0  )  ;", "fail (  \" expected   external   batch   exception \"  )  ;", "}    catch    ( PrestoException   e )     {", "assertEquals ( e . getErrorCode (  )  ,    RaptorErrorCode . RAPTOR _ EXTERNAL _ BATCH _ ALREADY _ EXISTS . toErrorCode (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testExternalBatches"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "long   tableId    =    createTable (  \" test \"  )  ;", "UUID   shard 1     =    UUID . randomUUID (  )  ;", "UUID   shard 2     =    UUID . randomUUID (  )  ;", "List < ShardInfo >    shardNodes    =    ImmutableList . of (  . shardInfo ( shard 1  ,     \" node 1  \"  )  ,     . shardInfo ( shard 2  ,     \" node 1  \"  )  )  ;", "List < ColumnInfo >    columns    =    ImmutableList . of ( new   ColumnInfo (  1  ,    BIGINT )  )  ;", "shardManager . createTable ( tableId ,    columns ,    false ,    OptionalLong . empty (  )  )  ;", "long   transactionId    =    shardManager . beginTransaction (  )  ;", "shardManager . commitShards ( transactionId ,    tableId ,    columns ,    shardNodes ,    Optional . empty (  )  ,     0  )  ;", "Set < UUID >    actual    =    shardManager . getExistingShardUuids ( tableId ,    ImmutableSet . of ( shard 1  ,    shard 2  ,    UUID . randomUUID (  )  )  )  ;", "Set < UUID >    expected    =    ImmutableSet . of ( shard 1  ,    shard 2  )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testGetExistingShards"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "long   tableId    =    createTable (  \" test \"  )  ;", "OptionalInt   bucketNumber    =    OptionalInt . empty (  )  ;", "UUID   shard 1     =    UUID . randomUUID (  )  ;", "UUID   shard 2     =    UUID . randomUUID (  )  ;", "List < ShardInfo >    shardNodes    =    ImmutableList . of ( new   ShardInfo ( shard 1  ,    bucketNumber ,    ImmutableSet . of (  \" node 1  \"  )  ,    ImmutableList . of (  )  ,     3  ,     3  3  ,     3  3  3  ,     0  )  ,    new   ShardInfo ( shard 2  ,    bucketNumber ,    ImmutableSet . of (  \" node 1  \"  )  ,    ImmutableList . of (  )  ,     5  ,     5  5  ,     5  5  5  ,     0  )  )  ;", "List < ColumnInfo >    columns    =    ImmutableList . of ( new   ColumnInfo (  1  ,    BIGINT )  )  ;", "s . createTable ( tableId ,    columns ,    false ,    OptionalLong . empty (  )  )  ;", "long   transactionId    =    s . beginTransaction (  )  ;", "s . commitShards ( transactionId ,    tableId ,    columns ,    shardNodes ,    Optional . empty (  )  ,     0  )  ;", "assertEquals ( getShardNodes ( tableId ,    TupleDomain . all (  )  )  ,    ImmutableSet . of ( new   ShardNodes ( shard 1  ,    ImmutableSet . of (  \" node 1  \"  )  )  ,    new   ShardNodes ( shard 2  ,    ImmutableSet . of (  \" node 1  \"  )  )  )  )  ;", "assertEquals ( s . getNodeBytes (  )  ,    ImmutableMap . of (  \" node 1  \"  ,     8  8 L )  )  ;", "s . assignShard ( tableId ,    shard 1  ,     \" node 2  \"  ,    false )  ;", "assertEquals ( getShardNodes ( tableId ,    TupleDomain . all (  )  )  ,    ImmutableSet . of ( new   ShardNodes ( shard 1  ,    ImmutableSet . of (  \" node 1  \"  ,     \" node 2  \"  )  )  ,    new   ShardNodes ( shard 2  ,    ImmutableSet . of (  \" node 1  \"  )  )  )  )  ;", "assertEquals ( s . getNodeBytes (  )  ,    ImmutableMap . of (  \" node 1  \"  ,     8  8 L ,     \" node 2  \"  ,     3  3 L )  )  ;", "}", "METHOD_END"], "methodName": ["testGetNodeBytes"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "long   tableId    =    createTable (  \" test \"  )  ;", "List < ColumnInfo >    columns    =    ImmutableList . of ( new   ColumnInfo (  1  ,    BIGINT )  )  ;", "List < String >    nodes    =    ImmutableList . of (  \" node 1  \"  ,     \" node 2  \"  ,     \" node 3  \"  )  ;", "ImmutableList . Builder < ShardInfo >    inputShards    =    ImmutableList . builder (  )  ;", "Multimap < String ,    UUID >    nodeShardMap    =    HashMultimap . create (  )  ;", "for    ( String   node    :    nodes )     {", "UUID   uuid    =    UUID . randomUUID (  )  ;", "nodeShardMap . put ( node ,    uuid )  ;", "inputShards . add (  . shardInfo ( uuid ,    node )  )  ;", "}", "shardManager . createTable ( tableId ,    columns ,    false ,    OptionalLong . empty (  )  )  ;", "long   transactionId    =    shardManager . beginTransaction (  )  ;", "shardManager . commitShards ( transactionId ,    tableId ,    columns ,    inputShards . build (  )  ,    Optional . empty (  )  ,     0  )  ;", "for    ( String   node    :    nodes )     {", "Set < ShardMetadata >    shardMetadata    =    shardManager . getNodeShards ( node )  ;", "Set < UUID >    expectedUuids    =    ImmutableSet . copyOf ( nodeShardMap . get ( node )  )  ;", "Set < UUID >    actualUuids    =    shardMetadata . stream (  )  . map ( ShardMetadata :  : getShardUuid )  . collect ( Collectors . toSet (  )  )  ;", "assertEquals ( actualUuids ,    expectedUuids )  ;", "}", "}", "METHOD_END"], "methodName": ["testGetNodeTableShards"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "long   tableId    =    createTable (  \" test \"  )  ;", "List < ColumnInfo >    columns    =    ImmutableList . of ( new   ColumnInfo (  1  ,    BIGINT )  )  ;", "Set < UUID >    oldShards    =    ImmutableSet . of ( UUID . randomUUID (  )  )  ;", "dbi . onDemand ( MetadataDao . class )  . blockMaintenance ( tableId )  ;", "long   transactionId    =    s . beginTransaction (  )  ;", "try    {", "s . replaceShardUuids ( transactionId ,    tableId ,    columns ,    oldShards ,    ImmutableSet . of (  )  ,    OptionalLong . empty (  )  )  ;", "fail (  \" expected   exception \"  )  ;", "}    catch    ( PrestoException   e )     {", "assertEquals ( e . getErrorCode (  )  ,    TRANSACTION _ CONFLICT . toErrorCode (  )  )  ;", "assertEquals ( e . getMessage (  )  ,     \" Maintenance   is   blocked   for   table \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["testMaintenanceBlocked"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "long   tableId    =    createTable (  \" test \"  )  ;", "List < ColumnInfo >    columns    =    ImmutableList . of ( new   ColumnInfo (  1  ,    BIGINT )  )  ;", "List < String >    nodes    =    ImmutableList . of (  \" node 1  \"  ,     \" node 2  \"  ,     \" node 3  \"  )  ;", "List < UUID >    originalUuids    =    ImmutableList . of ( UUID . randomUUID (  )  ,    UUID . randomUUID (  )  ,    UUID . randomUUID (  )  )  ;", "List < ShardInfo >    oldShards    =    ImmutableList .  < ShardInfo > builder (  )  . add (  . shardInfo ( originalUuids . get (  0  )  ,    nodes . get (  0  )  )  )  . add (  . shardInfo ( originalUuids . get (  1  )  ,    nodes . get (  1  )  )  )  . add (  . shardInfo ( originalUuids . get (  2  )  ,    nodes . get (  2  )  )  )  . build (  )  ;", "shardManager . createTable ( tableId ,    columns ,    false ,    OptionalLong . empty (  )  )  ;", "long   transactionId    =    shardManager . beginTransaction (  )  ;", "shardManager . commitShards ( transactionId ,    tableId ,    columns ,    oldShards ,    Optional . empty (  )  ,     0  )  ;", "List < UUID >    expectedUuids    =    ImmutableList . of ( UUID . randomUUID (  )  ,    UUID . randomUUID (  )  )  ;", "List < ShardInfo >    newShards    =    ImmutableList .  < ShardInfo > builder (  )  . add (  . shardInfo ( expectedUuids . get (  0  )  ,    nodes . get (  0  )  )  )  . add (  . shardInfo ( expectedUuids . get (  1  )  ,    nodes . get (  0  )  )  )  . build (  )  ;", "Set < ShardMetadata >    shardMetadata    =    shardManager . getNodeShards ( nodes . get (  0  )  )  ;", "Set < UUID >    replacedUuids    =    shardMetadata . stream (  )  . map ( ShardMetadata :  : getShardUuid )  . collect ( Collectors . toSet (  )  )  ;", "transactionId    =    shardManager . beginTransaction (  )  ;", "shardManager . replaceShardUuids ( transactionId ,    tableId ,    columns ,    replacedUuids ,    newShards ,    OptionalLong . of (  0  )  )  ;", "shardMetadata    =    shardManager . getNodeShards ( nodes . get (  0  )  )  ;", "Set < UUID >    actualUuids    =    shardMetadata . stream (  )  . map ( ShardMetadata :  : getShardUuid )  . collect ( Collectors . toSet (  )  )  ;", "assertEquals ( actualUuids ,    ImmutableSet . copyOf ( expectedUuids )  )  ;", "Set < UUID >    expectedAllUuids    =    new   HashSet <  >  ( originalUuids )  ;", "expectedAllUuids . removeAll ( replacedUuids )  ;", "expectedAllUuids . addAll ( expectedUuids )  ;", "Set < BucketShards >    shardNodes    =    ImmutableSet . copyOf ( shardManager . getShardNodes ( tableId ,    TupleDomain . all (  )  )  )  ;", "Set < UUID >    actualAllUuids    =    shardNodes . stream (  )  . map ( BucketShards :  : getShards )  . flatMap ( Collection :  : stream )  . map ( ShardNodes :  : getShardUuid )  . collect ( Collectors . toSet (  )  )  ;", "assertEquals ( actualAllUuids ,    expectedAllUuids )  ;", "newShards    =    ImmutableList . of (  . shardInfo ( UUID . randomUUID (  )  ,    nodes . get (  0  )  )  )  ;", "try    {", "transactionId    =    shardManager . beginTransaction (  )  ;", "shardManager . replaceShardUuids ( transactionId ,    tableId ,    columns ,    replacedUuids ,    newShards ,    OptionalLong . of (  0  )  )  ;", "fail (  \" expected   exception \"  )  ;", "}    catch    ( PrestoException   e )     {", "assertEquals ( e . getErrorCode (  )  ,    TRANSACTION _ CONFLICT . toErrorCode (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testReplaceShardUuids"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "long   tableId    =    createTable (  \" test \"  )  ;", "List < ColumnInfo >    columns    =    ImmutableList . of ( new   ColumnInfo (  1  ,    BIGINT )  )  ;", "List < ShardInfo >    shards    =    ImmutableList . of (  . shardInfo ( UUID . randomUUID (  )  ,     \" node 1  \"  )  )  ;", "shardManager . createTable ( tableId ,    columns ,    false ,    OptionalLong . empty (  )  )  ;", "long   transactionId    =    shardManager . beginTransaction (  )  ;", "shardManager . rollbackTransaction ( transactionId )  ;", "try    {", "shardManager . commitShards ( transactionId ,    tableId ,    columns ,    shards ,    Optional . empty (  )  ,     0  )  ;", "fail (  \" expected   exception \"  )  ;", "}    catch    ( PrestoException   e )     {", "assertEquals ( e . getErrorCode (  )  ,    TRANSACTION _ CONFLICT . toErrorCode (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testRollback"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "ShardInfo   shard 1     =    TestDatabaseShardManager . shardInfo ( UUID . randomUUID (  )  ,     \" node 1  \"  ,    ImmutableList .  < ColumnStats > builder (  )  . add ( new   ColumnStats (  1  ,     5  ,     1  0  )  )  . add ( new   ColumnStats (  2  ,     (  -  2  0  .  0  )  ,     2  0  .  0  )  )  . add ( new   ColumnStats (  3  ,    TestDatabaseShardManager . date (  2  0  1  3  ,     5  ,     1  1  )  ,    TestDatabaseShardManager . date (  2  0  1  3  ,     6  ,     1  3  )  )  )  . add ( new   ColumnStats (  4  ,    TestDatabaseShardManager . timestamp (  2  0  1  3  ,     5  ,     1  1  ,     4  ,     5  ,     6  )  ,    TestDatabaseShardManager . timestamp (  2  0  1  3  ,     6  ,     1  3  ,     7  ,     8  ,     9  )  )  )  . add ( new   ColumnStats (  5  ,     \" hello \"  ,     \" world \"  )  )  . add ( new   ColumnStats (  6  ,    false ,    true )  )  . build (  )  )  ;", "ShardInfo   shard 2     =    TestDatabaseShardManager . shardInfo ( UUID . randomUUID (  )  ,     \" node 2  \"  ,    ImmutableList .  < ColumnStats > builder (  )  . add ( new   ColumnStats (  1  ,     2  ,     8  )  )  . add ( new   ColumnStats (  2  ,    null ,     5  0  .  0  )  )  . add ( new   ColumnStats (  3  ,    TestDatabaseShardManager . date (  2  0  1  2  ,     1  ,     1  )  ,    TestDatabaseShardManager . date (  2  0  1  2  ,     1  2  ,     3  1  )  )  )  . add ( new   ColumnStats (  4  ,    TestDatabaseShardManager . timestamp (  2  0  1  2  ,     1  ,     1  ,     2  ,     3  ,     4  )  ,    TestDatabaseShardManager . timestamp (  2  0  1  2  ,     1  2  ,     3  1  ,     5  ,     6  ,     7  )  )  )  . add ( new   ColumnStats (  5  ,     \" cat \"  ,     \" dog \"  )  )  . add ( new   ColumnStats (  6  ,    true ,    true )  )  . build (  )  )  ;", "ShardInfo   shard 3     =    TestDatabaseShardManager . shardInfo ( UUID . randomUUID (  )  ,     \" node 3  \"  ,    ImmutableList .  < ColumnStats > builder (  )  . add ( new   ColumnStats (  1  ,     1  5  ,     2  0  )  )  . add ( new   ColumnStats (  2  ,    null ,    null )  )  . add ( new   ColumnStats (  3  ,    TestDatabaseShardManager . date (  2  0  1  3  ,     4  ,     1  )  ,    TestDatabaseShardManager . date (  2  0  1  3  ,     6  ,     1  )  )  )  . add ( new   ColumnStats (  4  ,    TestDatabaseShardManager . timestamp (  2  0  1  3  ,     4  ,     1  ,     8  ,     7  ,     6  )  ,    TestDatabaseShardManager . timestamp (  2  0  1  3  ,     6  ,     1  ,     6  ,     5  ,     4  )  )  )  . add ( new   ColumnStats (  5  ,     \" grape \"  ,     \" orange \"  )  )  . add ( new   ColumnStats (  6  ,    false ,    false )  )  . build (  )  )  ;", "List < ShardInfo >    shards    =    ImmutableList .  < ShardInfo > builder (  )  . add ( shard 1  )  . add ( shard 2  )  . add ( shard 3  )  . build (  )  ;", "List < ColumnInfo >    columns    =    ImmutableList .  < ColumnInfo > builder (  )  . add ( new   ColumnInfo (  1  ,    BIGINT )  )  . add ( new   ColumnInfo (  2  ,    DOUBLE )  )  . add ( new   ColumnInfo (  3  ,    DATE )  )  . add ( new   ColumnInfo (  4  ,    TIMESTAMP )  )  . add ( new   ColumnInfo (  5  ,    createVarcharType (  1  0  )  )  )  . add ( new   ColumnInfo (  6  ,    BOOLEAN )  )  . add ( new   ColumnInfo (  7  ,    VARBINARY )  )  . build (  )  ;", "RaptorColumnHandle   c 1     =    new   RaptorColumnHandle (  \" raptor \"  ,     \" c 1  \"  ,     1  ,    BIGINT )  ;", "RaptorColumnHandle   c 2     =    new   RaptorColumnHandle (  \" raptor \"  ,     \" c 2  \"  ,     2  ,    DOUBLE )  ;", "RaptorColumnHandle   c 3     =    new   RaptorColumnHandle (  \" raptor \"  ,     \" c 3  \"  ,     3  ,    DATE )  ;", "RaptorColumnHandle   c 4     =    new   RaptorColumnHandle (  \" raptor \"  ,     \" c 4  \"  ,     4  ,    TIMESTAMP )  ;", "RaptorColumnHandle   c 5     =    new   RaptorColumnHandle (  \" raptor \"  ,     \" c 5  \"  ,     5  ,    createVarcharType (  1  0  )  )  ;", "RaptorColumnHandle   c 6     =    new   RaptorColumnHandle (  \" raptor \"  ,     \" c 6  \"  ,     6  ,    BOOLEAN )  ;", "long   tableId    =    createTable (  \" test \"  )  ;", "shardManager . createTable ( tableId ,    columns ,    false ,    OptionalLong . empty (  )  )  ;", "long   transactionId    =    shardManager . beginTransaction (  )  ;", "shardManager . commitShards ( transactionId ,    tableId ,    columns ,    shards ,    Optional . empty (  )  ,     0  )  ;", "shardAssertion ( tableId )  . expected ( shards )  ;", "shardAssertion ( tableId )  . equal ( c 1  ,    BIGINT ,     3 L )  . expected ( shard 2  )  ;", "shardAssertion ( tableId )  . equal ( c 1  ,    BIGINT ,     8 L )  . expected ( shard 1  ,    shard 2  )  ;", "shardAssertion ( tableId )  . equal ( c 1  ,    BIGINT ,     9 L )  . expected ( shard 1  )  ;", "shardAssertion ( tableId )  . equal ( c 1  ,    BIGINT ,     1  3 L )  . expected (  )  ;", "shardAssertion ( tableId )  . between ( c 1  ,    BIGINT ,     8 L ,     1  4 L )  . expected ( shard 1  ,    shard 2  )  ;", "shardAssertion ( tableId )  . between ( c 1  ,    BIGINT ,     8 L ,     1  5 L )  . expected ( shards )  ;", "shardAssertion ( tableId )  . between ( c 1  ,    BIGINT ,     8 L ,     1  6 L )  . expected ( shards )  ;", "shardAssertion ( tableId )  . between ( c 1  ,    BIGINT ,     1  2 L ,     1  4 L )  . expected (  )  ;", "shardAssertion ( tableId )  . between ( c 1  ,    BIGINT ,     5 L ,     1  0 L )  . expected ( shard 1  ,    shard 2  )  ;", "shardAssertion ( tableId )  . between ( c 1  ,    BIGINT ,     1  6 L ,     1  8 L )  . expected ( shard 3  )  ;", "shardAssertion ( tableId )  . between ( c 1  ,    BIGINT ,     1 L ,     2  5 L )  . expected ( shards )  ;", "shardAssertion ( tableId )  . between ( c 1  ,    BIGINT ,     4 L ,     1  2 L )  . expected ( shard 1  ,    shard 2  )  ;", "shardAssertion ( tableId )  . range ( c 1  ,    lessThan ( BIGINT ,     5 L )  )  . expected ( shard 1  ,    shard 2  )  ;", "shardAssertion ( tableId )  . range ( c 1  ,    lessThan ( BIGINT ,     4 L )  )  . expected ( shard 2  )  ;", "shardAssertion ( tableId )  . range ( c 1  ,    lessThan ( BIGINT ,     1  1 L )  )  . expected ( shard 1  ,    shard 2  )  ;", "shardAssertion ( tableId )  . range ( c 1  ,    lessThan ( BIGINT ,     2  5 L )  )  . expected ( shards )  ;", "shardAssertion ( tableId )  . range ( c 1  ,    greaterThan ( BIGINT ,     1 L )  )  . expected ( shards )  ;", "shardAssertion ( tableId )  . range ( c 1  ,    greaterThan ( BIGINT ,     8 L )  )  . expected ( shards )  ;", "shardAssertion ( tableId )  . range ( c 1  ,    greaterThan ( BIGINT ,     9 L )  )  . expected ( shard 1  ,    shard 3  )  ;", "shardAssertion ( tableId )  . between ( c 1  ,    BIGINT ,     (  -  2  5 L )  ,     2  5 L )  . between ( c 2  ,    DOUBLE ,     (  -  1  0  0  0  .  0  )  ,     1  0  0  0  .  0  )  . between ( c 3  ,    BIGINT ,     0 L ,     5  0  0  0  0 L )  . between ( c 4  ,    TIMESTAMP ,     0 L ,    TestDatabaseShardManager . timestamp (  2  0  1  5  ,     1  ,     2  ,     3  ,     4  ,     5  )  )  . between ( c 5  ,    createVarcharType (  1  0  )  ,    Slices . utf 8 Slice (  \" a \"  )  ,    Slices . utf 8 Slice (  \" zzzzz \"  )  )  . between ( c 6  ,    BOOLEAN ,    false ,    true )  . expected ( shards )  ;", "shardAssertion ( tableId )  . between ( c 1  ,    BIGINT ,     4 L ,     1  2 L )  . between ( c 3  ,    DATE ,    TestDatabaseShardManager . date (  2  0  1  3  ,     3  ,     3  )  ,    TestDatabaseShardManager . date (  2  0  1  3  ,     5  ,     2  5  )  )  . expected ( shard 1  )  ;", "shardAssertion ( tableId )  . equal ( c 2  ,    DOUBLE ,     2  5  .  0  )  . expected ( shard 2  ,    shard 3  )  ;", "shardAssertion ( tableId )  . equal ( c 2  ,    DOUBLE ,     5  0  .  1  )  . expected ( shard 3  )  ;", "shardAssertion ( tableId )  . equal ( c 3  ,    DATE ,    TestDatabaseShardManager . date (  2  0  1  3  ,     5  ,     1  2  )  )  . expected ( shard 1  ,    shard 3  )  ;", "shardAssertion ( tableId )  . range ( c 4  ,    greaterThan ( TIMESTAMP ,    TestDatabaseShardManager . timestamp (  2  0  1  3  ,     1  ,     1  ,     0  ,     0  ,     0  )  )  )  . expected ( shard 1  ,    shard 3  )  ;", "shardAssertion ( tableId )  . between ( c 5  ,    createVarcharType (  1  0  )  ,    Slices . utf 8 Slice (  \" cow \"  )  ,    Slices . utf 8 Slice (  \" milk \"  )  )  . expected ( shards )  ;", "shardAssertion ( tableId )  . equal ( c 5  ,    createVarcharType (  1  0  )  ,    Slices . utf 8 Slice (  \" fruit \"  )  )  . expected (  )  ;", "shardAssertion ( tableId )  . equal ( c 5  ,    createVarcharType (  1  0  )  ,    Slices . utf 8 Slice (  \" pear \"  )  )  . expected ( shard 1  )  ;", "shardAssertion ( tableId )  . equal ( c 5  ,    createVarcharType (  1  0  )  ,    Slices . utf 8 Slice (  \" cat \"  )  )  . expected ( shard 2  )  ;", "shardAssertion ( tableId )  . range ( c 5  ,    greaterThan ( createVarcharType (  1  0  )  ,    Slices . utf 8 Slice (  \" gum \"  )  )  )  . expected ( shard 1  ,    shard 3  )  ;", "shardAssertion ( tableId )  . range ( c 5  ,    lessThan ( createVarcharType (  1  0  )  ,    Slices . utf 8 Slice (  \" air \"  )  )  )  . expected (  )  ;", "shardAssertion ( tableId )  . equal ( c 6  ,    BOOLEAN ,    true )  . expected ( shard 1  ,    shard 2  )  ;", "shardAssertion ( tableId )  . equal ( c 6  ,    BOOLEAN ,    false )  . expected ( shard 1  ,    shard 3  )  ;", "shardAssertion ( tableId )  . range ( c 6  ,    greaterThanOrEqual ( BOOLEAN ,    false )  )  . expected ( shards )  ;", "shardAssertion ( tableId )  . range ( c 6  ,    lessThan ( BOOLEAN ,    true )  )  . expected ( shards )  ;", "shardAssertion ( tableId )  . range ( c 6  ,    lessThan ( BOOLEAN ,    false )  )  . expected ( shard 1  ,    shard 3  )  ;", "shardAssertion ( tableId )  . domain ( c 1  ,    TestDatabaseShardManager . createDomain ( lessThan ( BIGINT ,     0 L )  ,    greaterThan ( BIGINT ,     2  5 L )  )  )  . expected ( shards )  ;", "}", "METHOD_END"], "methodName": ["testShardPruning"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "ShardInfo   shard    =    TestDatabaseShardManager . shardInfo ( UUID . randomUUID (  )  ,     \" node \"  )  ;", "List < ShardInfo >    shards    =    ImmutableList . of ( shard )  ;", "long   tableId    =    createTable (  \" test \"  )  ;", "List < ColumnInfo >    columns    =    ImmutableList . of ( new   ColumnInfo (  1  ,    BIGINT )  )  ;", "RaptorColumnHandle   c 1     =    new   RaptorColumnHandle (  \" raptor \"  ,     \" c 1  \"  ,     1  ,    BIGINT )  ;", "shardManager . createTable ( tableId ,    columns ,    false ,    OptionalLong . empty (  )  )  ;", "long   transactionId    =    shardManager . beginTransaction (  )  ;", "shardManager . commitShards ( transactionId ,    tableId ,    columns ,    shards ,    Optional . empty (  )  ,     0  )  ;", "shardAssertion ( tableId )  . expected ( shards )  ;", "shardAssertion ( tableId )  . equal ( c 1  ,    BIGINT ,     3 L )  . expected ( shards )  ;", "}", "METHOD_END"], "methodName": ["testShardPruningNoStats"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "String   prefix    =    repeat (  \" x \"  ,    ShardStats . MAX _ BINARY _ INDEX _ SIZE )  ;", "ColumnStats   stats    =    new   ColumnStats (  1  ,     ( prefix    +     \" a \"  )  ,     ( prefix    +     \" z \"  )  )  ;", "ShardInfo   shard    =     . shardInfo ( UUID . randomUUID (  )  ,     \" node \"  ,    ImmutableList . of ( stats )  )  ;", "List < ShardInfo >    shards    =    ImmutableList . of ( shard )  ;", "List < ColumnInfo >    columns    =    ImmutableList . of ( new   ColumnInfo (  1  ,    createVarcharType (  1  0  )  )  )  ;", "RaptorColumnHandle   c 1     =    new   RaptorColumnHandle (  \" raptor \"  ,     \" c 1  \"  ,     1  ,    createVarcharType (  1  0  )  )  ;", "long   tableId    =    createTable (  \" test \"  )  ;", "shardManager . createTable ( tableId ,    columns ,    false ,    OptionalLong . empty (  )  )  ;", "long   transactionId    =    shardManager . beginTransaction (  )  ;", "shardManager . commitShards ( transactionId ,    tableId ,    columns ,    shards ,    Optional . empty (  )  ,     0  )  ;", "shardAssertion ( tableId )  . expected ( shards )  ;", "shardAssertion ( tableId )  . equal ( c 1  ,    createVarcharType (  1  0  )  ,    Slices . utf 8 Slice ( prefix )  )  . expected ( shards )  ;", "shardAssertion ( tableId )  . equal ( c 1  ,    createVarcharType (  1  0  )  ,    Slices . utf 8 Slice (  ( prefix    +     \" c \"  )  )  )  . expected ( shards )  ;", "shardAssertion ( tableId )  . range ( c 1  ,    lessThan ( createVarcharType (  1  0  )  ,    Slices . utf 8 Slice (  ( prefix    +     \" c \"  )  )  )  )  . expected ( shards )  ;", "shardAssertion ( tableId )  . range ( c 1  ,    greaterThan ( createVarcharType (  1  0  )  ,    Slices . utf 8 Slice (  ( prefix    +     \" zzz \"  )  )  )  )  . expected ( shards )  ;", "shardAssertion ( tableId )  . between ( c 1  ,    createVarcharType (  1  0  )  ,    Slices . utf 8 Slice (  \" w \"  )  ,    Slices . utf 8 Slice (  \" y \"  )  )  . expected ( shards )  ;", "shardAssertion ( tableId )  . range ( c 1  ,    greaterThan ( createVarcharType (  1  0  )  ,    Slices . utf 8 Slice (  \" x \"  )  )  )  . expected ( shards )  ;", "shardAssertion ( tableId )  . between ( c 1  ,    createVarcharType (  1  0  )  ,    Slices . utf 8 Slice (  \" x \"  )  ,    Slices . utf 8 Slice (  \" x \"  )  )  . expected (  )  ;", "shardAssertion ( tableId )  . range ( c 1  ,    lessThan ( createVarcharType (  1  0  )  ,    Slices . utf 8 Slice (  \" w \"  )  )  )  . expected (  )  ;", "shardAssertion ( tableId )  . range ( c 1  ,    lessThan ( createVarcharType (  1  0  )  ,    Slices . utf 8 Slice (  \" x \"  )  )  )  . expected (  )  ;", "shardAssertion ( tableId )  . range ( c 1  ,    greaterThan ( createVarcharType (  1  0  )  ,    Slices . utf 8 Slice (  \" y \"  )  )  )  . expected (  )  ;", "Slice   shorter    =    Slices . utf 8 Slice ( prefix . substring (  0  ,     (  ( prefix . length (  )  )     -     1  )  )  )  ;", "shardAssertion ( tableId )  . equal ( c 1  ,    createVarcharType (  1  0  )  ,    shorter )  . expected (  )  ;", "shardAssertion ( tableId )  . range ( c 1  ,    lessThan ( createVarcharType (  1  0  )  ,    shorter )  )  . expected (  )  ;", "shardAssertion ( tableId )  . range ( c 1  ,    greaterThan ( createVarcharType (  1  0  )  ,    shorter )  )  . expected ( shards )  ;", "}", "METHOD_END"], "methodName": ["testShardPruningTruncatedValues"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "long   tableId    =    createTable (  \" test \"  )  ;", "List < ColumnInfo >    columns    =    ImmutableList . of ( new   ColumnInfo (  1  ,    TIMESTAMP )  )  ;", "s . createTable ( tableId ,    columns ,    false ,    OptionalLong . of (  1  )  )  ;", "long   tableId 2     =    createTable (  \" test 2  \"  )  ;", "List < ColumnInfo >    columns 2     =    ImmutableList . of ( new   ColumnInfo (  1  ,    TIMESTAMP )  )  ;", "s . createTable ( tableId 2  ,    columns 2  ,    true ,    OptionalLong . of (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["testTemporalColumnTableCreation"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "return   ZonedDateTime . of ( year ,    month ,    day ,    hour ,    minute ,    second ,     0  ,    ZoneOffset . UTC )  . toInstant (  )  . toEpochMilli (  )  ;", "}", "METHOD_END"], "methodName": ["timestamp"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "return   shards . stream (  )  . map (  (    shard )     -  >    new   ShardNodes ( shard . getShardUuid (  )  ,    shard . getNodeIdentifiers (  )  )  )  . collect ( Collectors . toSet (  )  )  ;", "}", "METHOD_END"], "methodName": ["toShardNodes"], "fileName": "com.facebook.presto.raptor.metadata.TestDatabaseShardManager"}, {"methodBody": ["METHOD_START", "{", "ConfigAssertions . assertRecordedDefaults ( ConfigAssertions . recordDefaults ( JdbcDatabaseConfig . class )  . setUrl ( null )  )  ;", "}", "METHOD_END"], "methodName": ["testDefaults"], "fileName": "com.facebook.presto.raptor.metadata.TestJdbcDatabaseConfig"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    properties    =    ImmutableMap .  < String ,    String > builder (  )  . put (  \" metadata . db . url \"  ,     \" jdbc : test :  /  / example . net / test \"  )  . build (  )  ;", "expected    =    new    (  )  . setUrl (  \" jdbc : test :  /  / example . net / test \"  )  ;", "ConfigAssertions . assertFullMapping ( properties ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testExplicitPropertyMappings"], "fileName": "com.facebook.presto.raptor.metadata.TestJdbcDatabaseConfig"}, {"methodBody": ["METHOD_START", "{", "ConfigAssertions . assertRecordedDefaults ( ConfigAssertions . recordDefaults ( MetadataConfig . class )  . setStartupGracePeriod ( new   Duration (  5  ,    TimeUnit . MINUTES )  )  . setReassignmentDelay ( new   Duration (  0  ,    TimeUnit . MINUTES )  )  . setReassignmentInterval ( new   Duration (  0  ,    TimeUnit . MINUTES )  )  )  ;", "}", "METHOD_END"], "methodName": ["testDefaults"], "fileName": "com.facebook.presto.raptor.metadata.TestMetadataConfig"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    properties    =    new   Builder < String ,    String >  (  )  . put (  \" raptor . startup - grace - period \"  ,     \"  4  2 m \"  )  . put (  \" raptor . reassignment - delay \"  ,     \"  6 m \"  )  . put (  \" raptor . reassignment - interval \"  ,     \"  7 m \"  )  . build (  )  ;", "expected    =    new    (  )  . setStartupGracePeriod ( new   Duration (  4  2  ,    TimeUnit . MINUTES )  )  . setReassignmentDelay ( new   Duration (  6  ,    TimeUnit . MINUTES )  )  . setReassignmentInterval ( new   Duration (  7  ,    TimeUnit . MINUTES )  )  ;", "ConfigAssertions . assertFullMapping ( properties ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testExplicitPropertyMappings"], "fileName": "com.facebook.presto.raptor.metadata.TestMetadataConfig"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( info . getTableId (  )  ,    tableId )  ;", "assertEquals ( info . getDistributionId (  )  ,    OptionalLong . empty (  )  )  ;", "assertEquals ( info . getDistributionName (  )  ,    Optional . empty (  )  )  ;", "assertEquals ( info . getBucketCount (  )  ,    OptionalInt . empty (  )  )  ;", "assertEquals ( info . getTemporalColumnId (  )  ,    OptionalLong . empty (  )  )  ;", "}", "METHOD_END"], "methodName": ["assertTable"], "fileName": "com.facebook.presto.raptor.metadata.TestMetadataDao"}, {"methodBody": ["METHOD_START", "{", "IDBI   dbi    =    new   DBI (  (  \" jdbc : h 2  : mem : test \"     +     ( System . nanoTime (  )  )  )  )  ;", "dummyHandle    =    dbi . open (  )  ;", "dao    =    dbi . onDemand (  . class )  ;", "SchemaDaoUtil . createTablesWithRetry ( dbi )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.raptor.metadata.TestMetadataDao"}, {"methodBody": ["METHOD_START", "{", "dummyHandle . close (  )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.raptor.metadata.TestMetadataDao"}, {"methodBody": ["METHOD_START", "{", "Long   columnId    =     1 L ;", "long   tableId    =    dao . insertTable (  \" schema 1  \"  ,     \" table 1  \"  ,    true ,    false ,    null ,     0  )  ;", "dao . insertColumn ( tableId ,    columnId ,     \" col 1  \"  ,     1  ,     \" bigint \"  ,    null ,    null )  ;", "Table   info    =    dao . getTableInformation ( tableId )  ;", ". assertTable ( info ,    tableId )  ;", "info    =    dao . getTableInformation (  \" schema 1  \"  ,     \" table 1  \"  )  ;", ". assertTable ( info ,    tableId )  ;", "}", "METHOD_END"], "methodName": ["testGetTableInformation"], "fileName": "com.facebook.presto.raptor.metadata.TestMetadataDao"}, {"methodBody": ["METHOD_START", "{", "Long   columnId    =     1 L ;", "long   tableId    =    dao . insertTable (  \" schema 1  \"  ,     \" table 1  \"  ,    true ,    false ,    null ,     0  )  ;", "dao . insertColumn ( tableId ,    columnId ,     \" col 1  \"  ,     1  ,     \" bigint \"  ,    null ,    null )  ;", "Long   temporalColumnId    =    dao . getTemporalColumnId ( tableId )  ;", "assertNull ( temporalColumnId )  ;", "dao . upeTemporalColumnId ( tableId ,    columnId )  ;", "temporalColumnId    =    dao . getTemporalColumnId ( tableId )  ;", "assertNotNull ( temporalColumnId )  ;", "assertEquals ( temporalColumnId ,    columnId )  ;", "long   tableId 2     =    dao . insertTable (  \" schema 1  \"  ,     \" table 2  \"  ,    true ,    false ,    null ,     0  )  ;", "Long   columnId 2     =    dao . getTemporalColumnId ( tableId 2  )  ;", "assertNull ( columnId 2  )  ;", "}", "METHOD_END"], "methodName": ["testTemporalColumn"], "fileName": "com.facebook.presto.raptor.metadata.TestMetadataDao"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( actual . getTable (  )  ,    expected . getTable (  )  )  ;", "assertEquals ( actual . getColumnId (  )  ,    expected . getColumnId (  )  )  ;", "assertEquals ( actual . getColumnName (  )  ,    expected . getColumnName (  )  )  ;", "assertEquals ( actual . getDType (  )  ,    expected . getDType (  )  )  ;", "assertEquals ( actual . getOrdinalPosition (  )  ,    expected . getOrdinalPosition (  )  )  ;", "assertEquals ( actual . getBucketOrdinal (  )  ,    expected . getBucketOrdinal (  )  )  ;", "assertEquals ( actual . getSortOrdinal (  )  ,    expected . getSortOrdinal (  )  )  ;", "assertEquals ( actual . isTemporal (  )  ,    expected . isTemporal (  )  )  ;", "}", "METHOD_END"], "methodName": ["assertTableColumnEqual"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( actual . size (  )  ,    expected . size (  )  )  ;", "for    ( int   i    =     0  ;    i    <     ( actual . size (  )  )  ;    i +  +  )     {", ". assertTableColumnEqual ( actual . get ( i )  ,    expected . get ( i )  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertTableColumnsEqual"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( actual . getTable (  )  ,    expected . getTable (  )  )  ;", "List < ColumnM   actualColumns    =    actual . getColumns (  )  . stream (  )  . filter (  (    columnM    -  >     !  ( columnMisHidden (  )  )  )  . collect ( Collectors . toList (  )  )  ;", "List < ColumnM   expectedColumns    =    expected . getColumns (  )  ;", "assertEquals ( actualColumns . size (  )  ,    expectedColumns . size (  )  )  ;", "for    ( int   i    =     0  ;    i    <     ( actualColumns . size (  )  )  ;    i +  +  )     {", "ColumnMactualColumn    =    actualColumns . get ( i )  ;", "ColumnMexpectedColumn    =    expectedColumns . get ( i )  ;", "assertEquals ( actualColumn . getName (  )  ,    expectedColumn . getName (  )  )  ;", "assertEquals ( actualColumn . getType (  )  ,    expectedColumn . getType (  )  )  ;", "}", "assertEquals ( actual . getProperties (  )  ,    expected . getProperties (  )  )  ;", "}", "METHOD_END"], "methodName": ["assertTableEqual"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "y    {", "unnableun (  )  ;", "fail (  \" expected   exception \"  )  ;", "}    catch    ( Towable   t )     {", "asstEquals ( t . getMessage (  )  ,    message )  ;", "}", "}", "METHOD_END"], "methodName": ["assertThrows"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "if    (  ! operties . isEmpty (  )  )  )     {", "for    ( Map . Entry < String ,    Object >    entry    : operties . entrySet (  )  )     {", "builderoperty ( entry . getKey (  )  ,    entry . getValue (  )  )  ;", "}", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["buildTable"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "dummyHandle . close (  )  ;", "}", "METHOD_END"], "methodName": ["cleanupDatabase"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "return   TestRaptorMetadata . buildTable ( properties ,    tableMetadataBuilder ( TestRaptorMetadata . DEFAULT _ TEST _ LINEITEMS )  . column (  \" orderkey \"  ,    BIGINT )  . column (  \" partkey \"  ,    BIGINT )  . column (  \" quantity \"  ,    DOUBLE )  . column (  \" price \"  ,    DOUBLE )  )  ;", "}", "METHOD_END"], "methodName": ["getLineItemsTable"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "return   TestRaptorMetadata . getOrdersTable ( ImmutableMap . of (  )  )  ;", "}", "METHOD_END"], "methodName": ["getOrdersTable"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "return   TestRaptorMetadata . buildTable ( properties ,    tableMetadataBuilder ( TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  . column (  \" orderkey \"  ,    BIGINT )  . column (  \" custkey \"  ,    BIGINT )  . column (  \" totalprice \"  ,    DOUBLE )  . column (  \" orderdate \"  ,    DATE )  )  ;", "}", "METHOD_END"], "methodName": ["getOrdersTable"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "try    ( Handle   handle    =    dbi . open (  )  )     {", "return   handle . createQuery (  \" SELECT   distribution _ id   FROM   tables   WHERE   table _ id    =     ?  \"  )  . bind (  0  ,    tableId )  . map ( FIRST ) irst (  )  ;", "}", "}", "METHOD_END"], "methodName": ["getTableDistributionId"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "TypeRegistry   typeRegistry    =    new   TypeRegistry (  )  ;", "dbi    =    new   DBI (  (  \" jdbc : h 2  : mem : test \"     +     ( System . nanoTime (  )  )  )  )  ;", "dbi . registerMapper ( new   TableColumn . Mapper ( typeRegistry )  )  ;", "dbi . registerMapper ( new   Distribution . Mapper ( typeRegistry )  )  ;", "dummyHandle    =    dbi . open (  )  ;", "SchemaDaoUtil . createTablesWithRetry ( dbi )  ;", "RaptorConnectorId   connectorId    =    new   RaptorConnectorId (  \" raptor \"  )  ;", "NodeManager   nodeManager    =    new   TestingNodeManager (  )  ;", "NodeSupplier   nodeSupplier    =    nodeManager :  : getWorkerNodes ;", "shardManager    =    TestDatabaseShardManager . createShardManager ( dbi ,    nodeSupplier ,    systemTicker (  )  )  ;", "metadata    =    new    ( connectorId . toString (  )  ,    dbi ,    shardManager )  ;", "}", "METHOD_END"], "methodName": ["setupDatabase"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "assertNull ( metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  )  ;", "metadata . createTable ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . buildTable ( ImmutableMap . of (  )  ,    tableMetadataBuilder ( TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  . column (  \" orderkey \"  ,    BIGINT )  . column (  \" price \"  ,    BIGINT )  )  ,    false )  ;", "ConnectorTableHandle   tableHandle    =    metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  ;", "Assertions . assertInstanceOf ( tableHandle ,    RaptorTableHandle . class )  ;", "RaptorTableHandle   raptorTableHandle    =     (  ( RaptorTableHandle )     ( tableHandle )  )  ;", "metadata . addColumn ( TestRaptorMetadata . SESSION ,    raptorTableHandle ,    new   spi . ColumnMetadata (  \" new _ col \"  ,    BIGINT )  )  ;", "assertNotNull ( metadata . getColumnHandles ( TestRaptorMetadata . SESSION ,    raptorTableHandle )  . get (  \" new _ col \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testAddColumn"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "assertNull ( metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  )  ;", "metadata . createTable ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . buildTable ( ImmutableMap . of (  )  ,    tableMetadataBuilder ( TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  . column (  \" orderkey \"  ,    BIGINT )  . column (  \" price \"  ,    BIGINT )  )  ,    false )  ;", "ConnectorTableHandle   tableHandle    =    metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  ;", "Assertions . assertInstanceOf ( tableHandle ,    RaptorTableHandle . class )  ;", "RaptorTableHandle   raptorTableHandle    =     (  ( RaptorTableHandle )     ( tableHandle )  )  ;", "ColumnHandle   column    =    metadata . getColumnHandles ( TestRaptorMetadata . SESSION ,    tableHandle )  . get (  \" orderkey \"  )  ;", "metadata . dropColumn ( TestRaptorMetadata . SESSION ,    raptorTableHandle ,    column )  ;", "metadata . addColumn ( TestRaptorMetadata . SESSION ,    raptorTableHandle ,    new   spi . ColumnMetadata (  \" new _ col \"  ,    BIGINT )  )  ;", "assertNull ( metadata . getColumnHandles ( TestRaptorMetadata . SESSION ,    tableHandle )  . get (  \" orderkey \"  )  )  ;", "assertNotNull ( metadata . getColumnHandles ( TestRaptorMetadata . SESSION ,    raptorTableHandle )  . get (  \" new _ col \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testAddColumnAfterDropColumn"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "metadata . createTable ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . getOrdersTable (  )  ,    false )  ;", "ConnectorTableHandle   connectorTableHandle    =    metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  ;", "Map < String ,    ColumnHandle >    columnHandles    =    metadata . getColumnHandles ( TestRaptorMetadata . SESSION ,    connectorTableHandle )  ;", "ColumnIdentity   orderKeyColumnIdentity    =    metadata . getColumnIdentity ( columnHandles . get (  \" orderkey \"  )  )  ;", "byte [  ]    bytes    =    orderKeyColumnIdentity . serialize (  )  ;", "assertEquals ( orderKeyColumnIdentity ,    metadata . deserializeColumnIdentity ( bytes )  )  ;", "byte   version    =     1  ;", "long   columnId    =     1  2  3  4  5  6  7  8  9  0  1  2 L ;", "ByteArrayDataOutput   dataOutput    =    newDataOutput (  )  ;", "dataOutput . writeByte ( version )  ;", "dataOutput . writeLong ( columnId )  ;", "byte [  ]    testBytes    =    dataOutput . toByteArray (  )  ;", "ColumnIdentity   testColumnIdentity    =    metadata . deserializeColumnIdentity ( testBytes )  ;", "assertEquals ( testColumnIdentity ,    new   RaptorColumnIdentity ( columnId )  )  ;", "}", "METHOD_END"], "methodName": ["testColumnIdentity"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "assertNull ( metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  )  ;", "ConnectorTableMetadata   ordersTable    =    TestRaptorMetadata . getOrdersTable ( ImmutableMap . of ( RaptorTableProperties . BUCKET _ COUNT _ PROPERTY ,     1  6  ,    RaptorTableProperties . BUCKETED _ ON _ PROPERTY ,    ImmutableList . of (  \" custkey \"  ,     \" orderkey \"  )  )  )  ;", "metadata . createTable ( TestRaptorMetadata . SESSION ,    ordersTable ,    false )  ;", "ConnectorTableHandle   tableHandle    =    metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  ;", "Assertions . assertInstanceOf ( tableHandle ,    RaptorTableHandle . class )  ;", "RaptorTableHandle   raptorTableHandle    =     (  ( RaptorTableHandle )     ( tableHandle )  )  ;", "assertEquals ( raptorTableHandle . getTableId (  )  ,     1  )  ;", "long   tableId    =    raptorTableHandle . getTableId (  )  ;", "MetadataDao   metadataDao    =    dbi . onDemand ( MetadataDao . class )  ;", "TestRaptorMetadata . assertTableColumnsEqual ( metadataDao . listBucketColumns ( tableId )  ,    ImmutableList . of ( new   TableColumn ( TestRaptorMetadata . DEFAULT _ TEST _ ORDERS ,     \" custkey \"  ,    BIGINT ,     2  ,     1  ,    OptionalInt . of (  0  )  ,    OptionalInt . empty (  )  ,    false )  ,    new   TableColumn ( TestRaptorMetadata . DEFAULT _ TEST _ ORDERS ,     \" orderkey \"  ,    BIGINT ,     1  ,     0  ,    OptionalInt . of (  1  )  ,    OptionalInt . empty (  )  ,    false )  )  )  ;", "assertEquals ( raptorTableHandle . getBucketCount (  )  ,    OptionalInt . of (  1  6  )  )  ;", "assertEquals ( getTableDistributionId ( tableId )  ,    Long . valueOf (  1  )  )  ;", "metadata . dropTable ( TestRaptorMetadata . SESSION ,    tableHandle )  ;", "metadata . createTable ( TestRaptorMetadata . SESSION ,    ordersTable ,    false )  ;", "tableId    =     (  ( RaptorTableHandle )     ( metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  )  )  . getTableId (  )  ;", "assertEquals ( tableId ,     2  )  ;", "assertEquals ( getTableDistributionId ( tableId )  ,    Long . valueOf (  2  )  )  ;", "}", "METHOD_END"], "methodName": ["testCreateBucketedTable"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "assertNull ( metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  )  ;", "ConnectorTableMetadata   ordersTable    =    TestRaptorMetadata . getOrdersTable ( ImmutableMap . of ( RaptorTableProperties . BUCKET _ COUNT _ PROPERTY ,     3  2  ,    RaptorTableProperties . BUCKETED _ ON _ PROPERTY ,    ImmutableList . of (  \" orderkey \"  ,     \" custkey \"  )  )  )  ;", "ConnectorNewTableLayout   layout    =    metadata . getNewTableLayout ( TestRaptorMetadata . SESSION ,    ordersTable )  . get (  )  ;", "assertEquals ( layout . getPartitionColumns (  )  ,    ImmutableList . of (  \" orderkey \"  ,     \" custkey \"  )  )  ;", "Assertions . assertInstanceOf ( layout . getPartitioning (  )  ,    RaptorPartitioningHandle . class )  ;", "RaptorPartitioningHandle   partitioning    =     (  ( RaptorPartitioningHandle )     ( layout . getPartitioning (  )  )  )  ;", "assertEquals ( partitioning . getDistributionId (  )  ,     1  )  ;", "ConnectorOutputTableHandle   outputHandle    =    metadata . beginCreateTable ( TestRaptorMetadata . SESSION ,    ordersTable ,    Optional . of ( layout )  )  ;", "metadata . finishCreateTable ( TestRaptorMetadata . SESSION ,    outputHandle ,    ImmutableList . of (  )  )  ;", "ConnectorTableHandle   tableHandle    =    metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  ;", "Assertions . assertInstanceOf ( tableHandle ,    RaptorTableHandle . class )  ;", "RaptorTableHandle   raptorTableHandle    =     (  ( RaptorTableHandle )     ( tableHandle )  )  ;", "assertEquals ( raptorTableHandle . getTableId (  )  ,     1  )  ;", "long   tableId    =    raptorTableHandle . getTableId (  )  ;", "MetadataDao   metadataDao    =    dbi . onDemand ( MetadataDao . class )  ;", "TestRaptorMetadata . assertTableColumnsEqual ( metadataDao . listBucketColumns ( tableId )  ,    ImmutableList . of ( new   TableColumn ( TestRaptorMetadata . DEFAULT _ TEST _ ORDERS ,     \" orderkey \"  ,    BIGINT ,     1  ,     0  ,    OptionalInt . of (  0  )  ,    OptionalInt . empty (  )  ,    false )  ,    new   TableColumn ( TestRaptorMetadata . DEFAULT _ TEST _ ORDERS ,     \" custkey \"  ,    BIGINT ,     2  ,     1  ,    OptionalInt . of (  1  )  ,    OptionalInt . empty (  )  ,    false )  )  )  ;", "assertEquals ( raptorTableHandle . getBucketCount (  )  ,    OptionalInt . of (  3  2  )  )  ;", "assertEquals ( getTableDistributionId ( tableId )  ,    Long . valueOf (  1  )  )  ;", "metadata . dropTable ( TestRaptorMetadata . SESSION ,    tableHandle )  ;", "}", "METHOD_END"], "methodName": ["testCreateBucketedTableAsSelect"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "MetadataDao   metadataDao    =    dbi . onDemand ( MetadataDao . class )  ;", "assertNull ( metadata . getTableHandle (  . SESSION ,     . DEFAULT _ TEST _ ORDERS )  )  ;", "ConnectorTableMetadata   table    =     . getOrdersTable ( ImmutableMap . of ( RaptorTableProperties . BUCKET _ COUNT _ PROPERTY ,     1  6  ,    RaptorTableProperties . BUCKETED _ ON _ PROPERTY ,    ImmutableList . of (  \" orderkey \"  )  ,    RaptorTableProperties . DISTRIBUTION _ NAME _ PROPERTY ,     \" orders \"  )  )  ;", "metadata . createTable (  . SESSION ,    table ,    false )  ;", "ConnectorTableHandle   tableHandle    =    metadata . getTableHandle (  . SESSION ,     . DEFAULT _ TEST _ ORDERS )  ;", "Assertions . assertInstanceOf ( tableHandle ,    RaptorTableHandle . class )  ;", "RaptorTableHandle   raptorTableHandle    =     (  ( RaptorTableHandle )     ( tableHandle )  )  ;", "long   tableId    =    raptorTableHandle . getTableId (  )  ;", "assertEquals ( raptorTableHandle . getTableId (  )  ,     1  )  ;", ". assertTableColumnsEqual ( metadataDao . listBucketColumns ( tableId )  ,    ImmutableList . of ( new   TableColumn (  . DEFAULT _ TEST _ ORDERS ,     \" orderkey \"  ,    BIGINT ,     1  ,     0  ,    OptionalInt . of (  0  )  ,    OptionalInt . empty (  )  ,    false )  )  )  ;", "assertEquals ( raptorTableHandle . getBucketCount (  )  ,    OptionalInt . of (  1  6  )  )  ;", "assertEquals ( getTableDistributionId ( tableId )  ,    Long . valueOf (  1  )  )  ;", "assertNull ( metadata . getTableHandle (  . SESSION ,     . DEFAULT _ TEST _ LINEITEMS )  )  ;", "table    =     . getLineItemsTable ( ImmutableMap . of ( RaptorTableProperties . BUCKET _ COUNT _ PROPERTY ,     1  6  ,    RaptorTableProperties . BUCKETED _ ON _ PROPERTY ,    ImmutableList . of (  \" orderkey \"  )  ,    RaptorTableProperties . DISTRIBUTION _ NAME _ PROPERTY ,     \" orders \"  )  )  ;", "metadata . createTable (  . SESSION ,    table ,    false )  ;", "tableHandle    =    metadata . getTableHandle (  . SESSION ,     . DEFAULT _ TEST _ LINEITEMS )  ;", "Assertions . assertInstanceOf ( tableHandle ,    RaptorTableHandle . class )  ;", "raptorTableHandle    =     (  ( RaptorTableHandle )     ( tableHandle )  )  ;", "tableId    =    raptorTableHandle . getTableId (  )  ;", "assertEquals ( tableId ,     2  )  ;", ". assertTableColumnsEqual ( metadataDao . listBucketColumns ( tableId )  ,    ImmutableList . of ( new   TableColumn (  . DEFAULT _ TEST _ LINEITEMS ,     \" orderkey \"  ,    BIGINT ,     1  ,     0  ,    OptionalInt . of (  0  )  ,    OptionalInt . empty (  )  ,    false )  )  )  ;", "assertEquals ( raptorTableHandle . getBucketCount (  )  ,    OptionalInt . of (  1  6  )  )  ;", "assertEquals ( getTableDistributionId ( tableId )  ,    Long . valueOf (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["testCreateBucketedTableExistingDistribution"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "assertNull ( metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  )  ;", "metadata . createTable ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . getOrdersTable (  )  ,    false )  ;", "ConnectorTableHandle   tableHandle    =    metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  ;", "Assertions . assertInstanceOf ( tableHandle ,    RaptorTableHandle . class )  ;", "assertEquals (  (  ( RaptorTableHandle )     ( tableHandle )  )  . getTableId (  )  ,     1  )  ;", "ConnectorTableMetadata   table    =    metadata . getTableMetadata ( TestRaptorMetadata . SESSION ,    tableHandle )  ;", "TestRaptorMetadata . assertTableEqual ( table ,    TestRaptorMetadata . getOrdersTable (  )  )  ;", "ColumnHandle   columnHandle    =    metadata . getColumnHandles ( TestRaptorMetadata . SESSION ,    tableHandle )  . get (  \" orderkey \"  )  ;", "Assertions . assertInstanceOf ( columnHandle ,    RaptorColumnHandle . class )  ;", "assertEquals (  (  ( RaptorColumnHandle )     ( columnHandle )  )  . getColumnId (  )  ,     1  )  ;", "ColumnMetadata   columnMetadata    =    metadata . getColumnMetadata ( TestRaptorMetadata . SESSION ,    tableHandle ,    columnHandle )  ;", "assertNotNull ( columnMetadata )  ;", "assertEquals ( columnMetadata . getName (  )  ,     \" orderkey \"  )  ;", "assertEquals ( columnMetadata . getType (  )  ,    BIGINT )  ;", "}", "METHOD_END"], "methodName": ["testCreateTable"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "SchemaTableName   test    =    new   SchemaTableName (  \" test \"  ,     \" test _ view \"  )  ;", "metadata . createView (  . SESSION ,    test ,     \" aaa \"  ,    true )  ;", "metadata . createView (  . SESSION ,    test ,     \" bbb \"  ,    true )  ;", "assertEquals ( metadata . getViews (  . SESSION ,    test . toSchemaTablePrefix (  )  )  . get ( test )  . getViewData (  )  ,     \" bbb \"  )  ;", "}", "METHOD_END"], "methodName": ["testCreateViewWithReplace"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "SchemaTableName   test    =    new   SchemaTableName (  \" test \"  ,     \" test _ view \"  )  ;", "try    {", "metadata . createView (  . SESSION ,    test ,     \" test \"  ,    false )  ;", "}    catch    ( Exception   e )     {", "fail (  \" should   have   succeeded \"  )  ;", "}", "metadata . createView (  . SESSION ,    test ,     \" test \"  ,    false )  ;", "}", "METHOD_END"], "methodName": ["testCreateViewWithoutReplace"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "assertNull ( metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  )  ;", "metadata . createTable ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . buildTable ( ImmutableMap . of (  )  ,    tableMetadataBuilder ( TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  . column (  \" orderkey \"  ,    BIGINT )  . column (  \" price \"  ,    BIGINT )  )  ,    false )  ;", "ConnectorTableHandle   tableHandle    =    metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  ;", "Assertions . assertInstanceOf ( tableHandle ,    RaptorTableHandle . class )  ;", "RaptorTableHandle   raptorTableHandle    =     (  ( RaptorTableHandle )     ( tableHandle )  )  ;", "ColumnHandle   lastColumn    =    metadata . getColumnHandles ( TestRaptorMetadata . SESSION ,    tableHandle )  . get (  \" orderkey \"  )  ;", "metadata . dropColumn ( TestRaptorMetadata . SESSION ,    raptorTableHandle ,    lastColumn )  ;", "assertNull ( metadata . getColumnHandles ( TestRaptorMetadata . SESSION ,    tableHandle )  . get (  \" orderkey \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testDropColumn"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "assertNull ( metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  )  ;", "Map < String ,    Object >    properties    =    ImmutableMap . of ( RaptorTableProperties . BUCKET _ COUNT _ PROPERTY ,     1  6  ,    RaptorTableProperties . BUCKETED _ ON _ PROPERTY ,    ImmutableList . of (  \" orderkey \"  )  ,    RaptorTableProperties . ORDERING _ PROPERTY ,    ImmutableList . of (  \" totalprice \"  )  ,    RaptorTableProperties . TEMPORAL _ COLUMN _ PROPERTY ,     \" orderdate \"  )  ;", "ConnectorTableMetadata   ordersTable    =    TestRaptorMetadata . buildTable ( properties ,    tableMetadataBuilder ( TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  . column (  \" orderkey \"  ,    BIGINT )  . column (  \" totalprice \"  ,    DOUBLE )  . column (  \" orderdate \"  ,    DATE )  . column (  \" highestid \"  ,    BIGINT )  )  ;", "metadata . createTable ( TestRaptorMetadata . SESSION ,    ordersTable ,    false )  ;", "ConnectorTableHandle   ordersTableHandle    =    metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  ;", "Assertions . assertInstanceOf ( ordersTableHandle ,    RaptorTableHandle . class )  ;", "RaptorTableHandle   ordersRaptorTableHandle    =     (  ( RaptorTableHandle )     ( ordersTableHandle )  )  ;", "assertEquals ( ordersRaptorTableHandle . getTableId (  )  ,     1  )  ;", "Assertions . assertInstanceOf ( ordersRaptorTableHandle ,    RaptorTableHandle . class )  ;", "ColumnHandle   bucketColumn    =    metadata . getColumnHandles ( TestRaptorMetadata . SESSION ,    ordersRaptorTableHandle )  . get (  \" orderkey \"  )  ;", "TestRaptorMetadata . assertThrows (  \" Cannot   drop   bucket   columns \"  ,     (  )     -  >    metadata . dropColumn ( TestRaptorMetadata . SESSION ,    ordersTableHandle ,    bucketColumn )  )  ;", "ColumnHandle   sortColumn    =    metadata . getColumnHandles ( TestRaptorMetadata . SESSION ,    ordersRaptorTableHandle )  . get (  \" totalprice \"  )  ;", "TestRaptorMetadata . assertThrows (  \" Cannot   drop   sort   columns \"  ,     (  )     -  >    metadata . dropColumn ( TestRaptorMetadata . SESSION ,    ordersTableHandle ,    sortColumn )  )  ;", "ColumnHandle   temporalColumn    =    metadata . getColumnHandles ( TestRaptorMetadata . SESSION ,    ordersRaptorTableHandle )  . get (  \" orderdate \"  )  ;", "TestRaptorMetadata . assertThrows (  \" Cannot   drop   the   temporal   column \"  ,     (  )     -  >    metadata . dropColumn ( TestRaptorMetadata . SESSION ,    ordersTableHandle ,    temporalColumn )  )  ;", "ColumnHandle   highestColumn    =    metadata . getColumnHandles ( TestRaptorMetadata . SESSION ,    ordersRaptorTableHandle )  . get (  \" highestid \"  )  ;", "TestRaptorMetadata . assertThrows (  \" Cannot   drop   the   column   which   has   the   largest   column   ID   in   the   table \"  ,     (  )     -  >    metadata . dropColumn ( TestRaptorMetadata . SESSION ,    ordersTableHandle ,    highestColumn )  )  ;", "}", "METHOD_END"], "methodName": ["testDropColumnDisallowed"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "assertNull ( metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  )  ;", "ConnectorTableMetadata   ordersTable    =    TestRaptorMetadata . getOrdersTable ( ImmutableMap . of ( RaptorTableProperties . ORDERING _ PROPERTY ,    ImmutableList . of (  \" orderdatefoo \"  )  )  )  ;", "metadata . createTable ( TestRaptorMetadata . SESSION ,    ordersTable ,    false )  ;", "fail (  \" Expected   createTable   to   fail \"  )  ;", "}", "METHOD_END"], "methodName": ["testInvalidOrderingColumns"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "assertNull ( metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  )  ;", "metadata . createTable ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . getOrdersTable ( ImmutableMap . of ( RaptorTableProperties . ORGANIZED _ PROPERTY ,    true )  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["testInvalidOrderingOrganization"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "assertNull ( metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  )  ;", "ConnectorTableMetadata   ordersTable    =    TestRaptorMetadata . getOrdersTable ( ImmutableMap . of ( RaptorTableProperties . TEMPORAL _ COLUMN _ PROPERTY ,     \" foo \"  )  )  ;", "metadata . createTable ( TestRaptorMetadata . SESSION ,    ordersTable ,    false )  ;", "fail (  \" Expected   createTable   to   fail \"  )  ;", "}", "METHOD_END"], "methodName": ["testInvalidTemporalColumn"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "assertNull ( metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  )  ;", "metadata . createTable ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . getOrdersTable ( ImmutableMap . of ( RaptorTableProperties . TEMPORAL _ COLUMN _ PROPERTY ,     \" orderkey \"  )  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["testInvalidTemporalColumnType"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "assertNull ( metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  )  ;", "metadata . createTable ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . getOrdersTable ( ImmutableMap . of ( RaptorTableProperties . TEMPORAL _ COLUMN _ PROPERTY ,     \" orderdate \"  ,    RaptorTableProperties . ORGANIZED _ PROPERTY ,    true )  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["testInvalidTemporalOrganization"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "metadata . createTable ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . getOrdersTable (  )  ,    false )  ;", "Map < SchemaTableName ,    List < ColumnMetadata >  >    columns    =    metadata . listTableColumns ( TestRaptorMetadata . SESSION ,    new   SchemaTablePrefix (  )  )  ;", "assertEquals ( columns ,    ImmutableMap . of ( TestRaptorMetadata . DEFAULT _ TEST _ ORDERS ,    TestRaptorMetadata . getOrdersTable (  )  . getColumns (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testListTableColumns"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "metadata . createTable ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . getOrdersTable (  )  ,    false )  ;", "Map < SchemaTableName ,    List < ColumnMetadata >  >    filterCatalog    =    metadata . listTableColumns ( TestRaptorMetadata . SESSION ,    new   SchemaTablePrefix (  )  )  ;", "Map < SchemaTableName ,    List < ColumnMetadata >  >    filterSchema    =    metadata . listTableColumns ( TestRaptorMetadata . SESSION ,    new   SchemaTablePrefix (  \" test \"  )  )  ;", "Map < SchemaTableName ,    List < ColumnMetadata >  >    filterTable    =    metadata . listTableColumns ( TestRaptorMetadata . SESSION ,    new   SchemaTablePrefix (  \" test \"  ,     \" orders \"  )  )  ;", "assertEquals ( filterCatalog ,    filterSchema )  ;", "assertEquals ( filterCatalog ,    filterTable )  ;", "}", "METHOD_END"], "methodName": ["testListTableColumnsFiltering"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "metadata . createTable ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . getOrdersTable (  )  ,    false )  ;", "List < SchemaTableName >    tables    =    metadata . listTables ( TestRaptorMetadata . SESSION ,    null )  ;", "assertEquals ( tables ,    ImmutableList . of ( TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  )  ;", "}", "METHOD_END"], "methodName": ["testListTables"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "assertNull ( metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  )  ;", "metadata . createTable ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . getOrdersTable (  )  ,    false )  ;", "ConnectorTableHandle   tableHandle    =    metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  ;", "Assertions . assertInstanceOf ( tableHandle ,    RaptorTableHandle . class )  ;", "RaptorTableHandle   raptorTableHandle    =     (  ( RaptorTableHandle )     ( tableHandle )  )  ;", "ColumnHandle   columnHandle    =    metadata . getColumnHandles ( TestRaptorMetadata . SESSION ,    tableHandle )  . get (  \" orderkey \"  )  ;", "metadata . renameColumn ( TestRaptorMetadata . SESSION ,    raptorTableHandle ,    columnHandle ,     \" orderkey _ renamed \"  )  ;", "assertNull ( metadata . getColumnHandles ( TestRaptorMetadata . SESSION ,    tableHandle )  . get (  \" orderkey \"  )  )  ;", "assertNotNull ( metadata . getColumnHandles ( TestRaptorMetadata . SESSION ,    tableHandle )  . get (  \" orderkey _ renamed \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testRenameColumn"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "assertNull ( metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  )  ;", "metadata . createTable ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . getOrdersTable (  )  ,    false )  ;", "ConnectorTableHandle   tableHandle    =    metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  ;", "Assertions . assertInstanceOf ( tableHandle ,    RaptorTableHandle . class )  ;", "RaptorTableHandle   raptorTableHandle    =     (  ( RaptorTableHandle )     ( tableHandle )  )  ;", "SchemaTableName   renamedTable    =    new   SchemaTableName ( raptorTableHandle . getSchemaName (  )  ,     \" orders _ renamed \"  )  ;", "metadata . renameTable ( TestRaptorMetadata . SESSION ,    raptorTableHandle ,    renamedTable )  ;", "assertNull ( metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  )  ;", "ConnectorTableHandle   renamedTableHandle    =    metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    renamedTable )  ;", "assertNotNull ( renamedTableHandle )  ;", "assertEquals (  (  ( RaptorTableHandle )     ( renamedTableHandle )  )  . getTableName (  )  ,    renamedTable . getTableName (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRenameTable"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "assertNull ( metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  )  ;", "ConnectorTableMetadata   ordersTable    =    TestRaptorMetadata . getOrdersTable ( ImmutableMap . of ( RaptorTableProperties . ORDERING _ PROPERTY ,    ImmutableList . of (  \" orderdate \"  ,     \" custkey \"  )  )  )  ;", "metadata . createTable ( TestRaptorMetadata . SESSION ,    ordersTable ,    false )  ;", "ConnectorTableHandle   tableHandle    =    metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  ;", "Assertions . assertInstanceOf ( tableHandle ,    RaptorTableHandle . class )  ;", "RaptorTableHandle   raptorTableHandle    =     (  ( RaptorTableHandle )     ( tableHandle )  )  ;", "assertEquals ( raptorTableHandle . getTableId (  )  ,     1  )  ;", "long   tableId    =    raptorTableHandle . getTableId (  )  ;", "MetadataDao   metadataDao    =    dbi . onDemand ( MetadataDao . class )  ;", "List < TableColumn >    sortColumns    =    metadataDao . listSortColumns ( tableId )  ;", "TestRaptorMetadata . assertTableColumnsEqual ( sortColumns ,    ImmutableList . of ( new   TableColumn ( TestRaptorMetadata . DEFAULT _ TEST _ ORDERS ,     \" orderdate \"  ,    DATE ,     4  ,     3  ,    OptionalInt . empty (  )  ,    OptionalInt . of (  0  )  ,    false )  ,    new   TableColumn ( TestRaptorMetadata . DEFAULT _ TEST _ ORDERS ,     \" custkey \"  ,    BIGINT ,     2  ,     1  ,    OptionalInt . empty (  )  ,    OptionalInt . of (  1  )  ,    false )  )  )  ;", "assertEquals ( metadataDao . getTemporalColumnId ( tableId )  ,    null )  ;", "metadata . dropTable ( TestRaptorMetadata . SESSION ,    tableHandle )  ;", "}", "METHOD_END"], "methodName": ["testSortOrderProperty"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "metadata . createTable ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . getOrdersTable (  )  ,    false )  ;", "ConnectorTableHandle   connectorTableHandle    =    metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  ;", "TableIdentity   tableIdentity    =    metadata . getTableIdentity ( connectorTableHandle )  ;", "byte [  ]    bytes    =    tableIdentity . serialize (  )  ;", "assertEquals ( tableIdentity ,    metadata . deserializeTableIdentity ( bytes )  )  ;", "byte   version    =     1  ;", "long   tableId    =     1  2  3  4  5  6  7  8 L ;", "ByteArrayDataOutput   dataOutput    =    newDataOutput (  )  ;", "dataOutput . writeByte ( version )  ;", "dataOutput . writeLong ( tableId )  ;", "byte [  ]    testBytes    =    dataOutput . toByteArray (  )  ;", "TableIdentity   testTableIdentity    =    metadata . deserializeTableIdentity ( testBytes )  ;", "assertEquals ( testTableIdentity ,    new   RaptorTableIdentity ( tableId )  )  ;", "}", "METHOD_END"], "methodName": ["testTableIdentity"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "assertNull ( metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  )  ;", "ConnectorTableMetadata   ordersTable    =    TestRaptorMetadata . getOrdersTable ( ImmutableMap . of ( RaptorTableProperties . ORDERING _ PROPERTY ,    ImmutableList . of (  \" orderdate \"  ,     \" custkey \"  )  ,    RaptorTableProperties . TEMPORAL _ COLUMN _ PROPERTY ,     \" orderdate \"  )  )  ;", "metadata . createTable ( TestRaptorMetadata . SESSION ,    ordersTable ,    false )  ;", "ConnectorTableHandle   tableHandle    =    metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  ;", "Assertions . assertInstanceOf ( tableHandle ,    RaptorTableHandle . class )  ;", "RaptorTableHandle   raptorTableHandle    =     (  ( RaptorTableHandle )     ( tableHandle )  )  ;", "assertEquals ( raptorTableHandle . getTableId (  )  ,     1  )  ;", "long   tableId    =    raptorTableHandle . getTableId (  )  ;", "MetadataDao   metadataDao    =    dbi . onDemand ( MetadataDao . class )  ;", "List < TableColumn >    sortColumns    =    metadataDao . listSortColumns ( tableId )  ;", "TestRaptorMetadata . assertTableColumnsEqual ( sortColumns ,    ImmutableList . of ( new   TableColumn ( TestRaptorMetadata . DEFAULT _ TEST _ ORDERS ,     \" orderdate \"  ,    DATE ,     4  ,     3  ,    OptionalInt . empty (  )  ,    OptionalInt . of (  0  )  ,    true )  ,    new   TableColumn ( TestRaptorMetadata . DEFAULT _ TEST _ ORDERS ,     \" custkey \"  ,    BIGINT ,     2  ,     1  ,    OptionalInt . empty (  )  ,    OptionalInt . of (  1  )  ,    false )  )  )  ;", "assertEquals ( metadataDao . getTemporalColumnId ( tableId )  ,    Long . valueOf (  4  )  )  ;", "assertFalse ( metadataDao . getTableInformation ( tableId )  . isOrganized (  )  )  ;", "metadata . dropTable ( TestRaptorMetadata . SESSION ,    tableHandle )  ;", "}", "METHOD_END"], "methodName": ["testTableProperties"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "assertNull ( metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  )  ;", "ConnectorTableMetadata   ordersTable    =    TestRaptorMetadata . getOrdersTable ( ImmutableMap . of ( RaptorTableProperties . ORDERING _ PROPERTY ,    ImmutableList . of (  \" orderdate \"  ,     \" custkey \"  )  ,    RaptorTableProperties . ORGANIZED _ PROPERTY ,    true )  )  ;", "metadata . createTable ( TestRaptorMetadata . SESSION ,    ordersTable ,    false )  ;", "ConnectorTableHandle   tableHandle    =    metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  ;", "Assertions . assertInstanceOf ( tableHandle ,    RaptorTableHandle . class )  ;", "RaptorTableHandle   raptorTableHandle    =     (  ( RaptorTableHandle )     ( tableHandle )  )  ;", "assertEquals ( raptorTableHandle . getTableId (  )  ,     1  )  ;", "long   tableId    =    raptorTableHandle . getTableId (  )  ;", "MetadataDao   metadataDao    =    dbi . onDemand ( MetadataDao . class )  ;", "List < TableColumn >    sortColumns    =    metadataDao . listSortColumns ( tableId )  ;", "TestRaptorMetadata . assertTableColumnsEqual ( sortColumns ,    ImmutableList . of ( new   TableColumn ( TestRaptorMetadata . DEFAULT _ TEST _ ORDERS ,     \" orderdate \"  ,    DATE ,     4  ,     3  ,    OptionalInt . empty (  )  ,    OptionalInt . of (  0  )  ,    false )  ,    new   TableColumn ( TestRaptorMetadata . DEFAULT _ TEST _ ORDERS ,     \" custkey \"  ,    BIGINT ,     2  ,     1  ,    OptionalInt . empty (  )  ,    OptionalInt . of (  1  )  ,    false )  )  )  ;", "assertTrue ( metadataDao . getTableInformation ( tableId )  . isOrganized (  )  )  ;", "metadata . dropTable ( TestRaptorMetadata . SESSION ,    tableHandle )  ;", "}", "METHOD_END"], "methodName": ["testTablePropertiesWithOrganization"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "assertNull ( metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  )  ;", "ConnectorTableMetadata   ordersTable    =    TestRaptorMetadata . getOrdersTable ( ImmutableMap . of ( RaptorTableProperties . TEMPORAL _ COLUMN _ PROPERTY ,     \" orderdate \"  )  )  ;", "metadata . createTable ( TestRaptorMetadata . SESSION ,    ordersTable ,    false )  ;", "ConnectorTableHandle   tableHandle    =    metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  ;", "Assertions . assertInstanceOf ( tableHandle ,    RaptorTableHandle . class )  ;", "RaptorTableHandle   raptorTableHandle    =     (  ( RaptorTableHandle )     ( tableHandle )  )  ;", "assertEquals ( raptorTableHandle . getTableId (  )  ,     1  )  ;", "long   tableId    =    raptorTableHandle . getTableId (  )  ;", "MetadataDao   metadataDao    =    dbi . onDemand ( MetadataDao . class )  ;", "List < TableColumn >    sortColumns    =    metadataDao . listSortColumns ( tableId )  ;", "assertEquals ( sortColumns . size (  )  ,     0  )  ;", "assertEquals ( sortColumns ,    ImmutableList . of (  )  )  ;", "assertEquals ( metadataDao . getTemporalColumnId ( tableId )  ,    Long . valueOf (  4  )  )  ;", "metadata . dropTable ( TestRaptorMetadata . SESSION ,    tableHandle )  ;", "}", "METHOD_END"], "methodName": ["testTemporalColumn"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "long   transactionId    =     1  ;", "ConnectorOutputTableHandle   outputHandle    =    metadata . beginCreateTable (  . SESSION ,     . getOrdersTable (  )  ,    Optional . empty (  )  )  ;", "assertTrue ( transactionExists ( transactionId )  )  ;", "assertNull ( transactionSuccessful ( transactionId )  )  ;", "shardManager . rollbackTransaction ( transactionId )  ;", "assertTrue ( transactionExists ( transactionId )  )  ;", "assertFalse ( transactionSuccessful ( transactionId )  )  ;", "try    {", "metadata . finishCreateTable (  . SESSION ,    outputHandle ,    ImmutableList . of (  )  )  ;", "fail (  \" expected   exception \"  )  ;", "}    catch    ( PrestoException   e )     {", "assertEquals ( e . getErrorCode (  )  ,    TRANSACTION _ CONFLICT . toErrorCode (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testTransactionAbort"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "long   transactionId    =     1  ;", "metadata . createTable (  . SESSION ,     . getOrdersTable (  )  ,    false )  ;", "assertTrue ( transactionSuccessful ( transactionId )  )  ;", "transactionId +  +  ;", "ConnectorTableHandle   tableHandle    =    metadata . getTableHandle (  . SESSION ,     . DEFAULT _ TEST _ ORDERS )  ;", "tableHandle    =    metadata . beginDelete (  . SESSION ,    tableHandle )  ;", "Assertions . assertInstanceOf ( tableHandle ,    RaptorTableHandle . class )  ;", "RaptorTableHandle   raptorTableHandle    =     (  ( RaptorTableHandle )     ( tableHandle )  )  ;", "assertEquals ( raptorTableHandle . getTableId (  )  ,     1  )  ;", "assertEquals ( raptorTableHandle . getTransactionId (  )  ,    OptionalLong . of ( transactionId )  )  ;", "assertTrue ( transactionExists ( transactionId )  )  ;", "assertNull ( transactionSuccessful ( transactionId )  )  ;", "metadata . rollback (  )  ;", "assertTrue ( transactionExists ( transactionId )  )  ;", "assertFalse ( transactionSuccessful ( transactionId )  )  ;", "transactionId +  +  ;", "tableHandle    =    metadata . beginDelete (  . SESSION ,    tableHandle )  ;", "assertTrue ( transactionExists ( transactionId )  )  ;", "assertNull ( transactionSuccessful ( transactionId )  )  ;", "metadata . finishDelete (  . SESSION ,    tableHandle ,    ImmutableList . of (  )  )  ;", "assertTrue ( transactionExists ( transactionId )  )  ;", "assertTrue ( transactionSuccessful ( transactionId )  )  ;", "}", "METHOD_END"], "methodName": ["testTransactionDelete"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "long   transactionId    =     1  ;", "metadata . createTable (  . SESSION ,     . getOrdersTable (  )  ,    false )  ;", "assertTrue ( transactionSuccessful ( transactionId )  )  ;", "transactionId +  +  ;", "ConnectorTableHandle   tableHandle    =    metadata . getTableHandle (  . SESSION ,     . DEFAULT _ TEST _ ORDERS )  ;", "ConnectorInsertTableHandle   insertHandle    =    metadata . beginInsert (  . SESSION ,    tableHandle )  ;", "assertTrue ( transactionExists ( transactionId )  )  ;", "assertNull ( transactionSuccessful ( transactionId )  )  ;", "metadata . finishInsert (  . SESSION ,    insertHandle ,    ImmutableList . of (  )  )  ;", "assertTrue ( transactionExists ( transactionId )  )  ;", "assertTrue ( transactionSuccessful ( transactionId )  )  ;", "}", "METHOD_END"], "methodName": ["testTransactionInsert"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "metadata . createTable ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . getOrdersTable (  )  ,    false )  ;", "ConnectorTableHandle   tableHandle    =    metadata . getTableHandle ( TestRaptorMetadata . SESSION ,    TestRaptorMetadata . DEFAULT _ TEST _ ORDERS )  ;", "Assertions . assertInstanceOf ( tableHandle ,    RaptorTableHandle . class )  ;", "assertFalse (  (  ( RaptorTableHandle )     ( tableHandle )  )  . getTransactionId (  )  . isPresent (  )  )  ;", "}", "METHOD_END"], "methodName": ["testTransactionSelect"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "long   transactionId    =     1  ;", "ConnectorOutputTableHandle   outputHandle    =    metadata . beginCreateTable (  . SESSION ,     . getOrdersTable (  )  ,    Optional . empty (  )  )  ;", "assertTrue ( transactionExists ( transactionId )  )  ;", "assertNull ( transactionSuccessful ( transactionId )  )  ;", "metadata . finishCreateTable (  . SESSION ,    outputHandle ,    ImmutableList . of (  )  )  ;", "assertTrue ( transactionExists ( transactionId )  )  ;", "assertTrue ( transactionSuccessful ( transactionId )  )  ;", "}", "METHOD_END"], "methodName": ["testTransactionTableWrite"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "SchemaTableName   test 1     =    new   SchemaTableName (  \" test \"  ,     \" test _ view 1  \"  )  ;", "SchemaTableName   test 2     =    new   SchemaTableName (  \" test \"  ,     \" test _ view 2  \"  )  ;", "metadata . createView (  . SESSION ,    test 1  ,     \" test 1  \"  ,    false )  ;", "metadata . createView (  . SESSION ,    test 2  ,     \" test 2  \"  ,    false )  ;", "List < SchemaTableName >    list    =    metadata . listViews (  . SESSION ,     \" test \"  )  ;", "Assertions . assertEqualsIgnoreOrder ( list ,    ImmutableList . of ( test 1  ,    test 2  )  )  ;", "Map < SchemaTableName ,    ConnectorViewDefinition >    views    =    metadata . getViews (  . SESSION ,    new   SchemaTablePrefix (  \" test \"  )  )  ;", "assertEquals ( views . keySet (  )  ,    ImmutableSet . of ( test 1  ,    test 2  )  )  ;", "assertEquals ( views . get ( test 1  )  . getViewData (  )  ,     \" test 1  \"  )  ;", "assertEquals ( views . get ( test 2  )  . getViewData (  )  ,     \" test 2  \"  )  ;", "metadata . dropView (  . SESSION ,    test 1  )  ;", "views    =    metadata . getViews (  . SESSION ,    new   SchemaTablePrefix (  \" test \"  )  )  ;", "assertEquals ( views . keySet (  )  ,    ImmutableSet . of ( test 2  )  )  ;", "metadata . dropView (  . SESSION ,    test 2  )  ;", "views    =    metadata . getViews (  . SESSION ,    new   SchemaTablePrefix (  \" test \"  )  )  ;", "assertTrue ( views . isEmpty (  )  )  ;", "views    =    metadata . getViews (  . SESSION ,    new   SchemaTablePrefix (  )  )  ;", "assertTrue ( views . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["testViews"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "try    ( Handle   handle    =    dbi . open (  )  )     {", "return   handle . createQuery (  \" SELECT   unt (  *  )    FROM   transactions   WHERE   transaction _ id    =     ?  \"  )  . bind (  0  ,    transactionId )  . map ( FIRST )  . first (  )  ;", "}", "}", "METHOD_END"], "methodName": ["transactionExists"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "try    ( Handle   handle    =    dbi . open (  )  )     {", "return    (  ( Boolean )     ( handle . createQuery (  \" SELECT   succesul   FROM   transactions   WHERE   transaction _ id    =     ?  \"  )  . bind (  0  ,    transactionId ) irst (  )  . get (  \" succesul \"  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["transactionSuccessful"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorMetadata"}, {"methodBody": ["METHOD_START", "{", "dummyHandle . execute (  \" DELETE   FROM   shard _ nodes \"  )  ;", "dummyHandle . execute ( String . format (  \" UPDATE    % s   SET   node _ ids    =     '  '  \"  ,    DatabaseShard . shardIndexTable ( tableId )  )  )  ;", "}", "METHOD_END"], "methodName": ["deleteShardNodes"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorSplitManager"}, {"methodBody": ["METHOD_START", "{", "ConnectorTransactionHandle   transaction    =    new   RaptorTransactionHandle (  )  ;", "return   s . getSplits ( transaction ,    SESSION ,    layout . getTableLayout (  )  . getHandle (  )  ,    UNGROUPED _ SCHEDULING )  ;", "}", "METHOD_END"], "methodName": ["getSplits"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorSplitManager"}, {"methodBody": ["METHOD_START", "{", "return   MoreFutures . getFutureValue ( source . getNextBatch ( NOT _ PARTITIONED ,    maxSize )  )  . getSplits (  )  ;", "}", "METHOD_END"], "methodName": ["getSplits"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorSplitManager"}, {"methodBody": ["METHOD_START", "{", "TypeRegistry   typeRegistry    =    new   TypeRegistry (  )  ;", "DBI   dbi    =    new   DBI (  (  \" jdbc : h 2  : mem : test \"     +     ( System . nanoTime (  )  )  )  )  ;", "dbi . registerMapper ( new   TableColumn . Mapper ( typeRegistry )  )  ;", "dummyHandle    =    dbi . open (  )  ;", "SchemaDaoUtil . createTablesWithRetry ( dbi )  ;", "temporary    =    createTempDir (  )  ;", "AssignmentLimiter   assignmentLimiter    =    new   AssignmentLimiter ( ImmutableSet :  : of ,    systemTicker (  )  ,    new   MetadataConfig (  )  )  ;", "shardManager    =    new   DatabaseShardManager ( dbi ,    new   util . DaoSupplier ( dbi ,    ShardDao . class )  ,    ImmutableSet :  : of ,    assignmentLimiter ,    systemTicker (  )  ,    new   Duration (  0  ,    TimeUnit . MINUTES )  )  ;", "TestingNodeManager   nodeManager    =    new   TestingNodeManager (  )  ;", "NodeSupplier   nodeSupplier    =    nodeManager :  : getWorkerNodes ;", "String   nodeName    =    UUID . randomUUID (  )  . toString (  )  ;", "nodeManager . addNode ( new   com . facebook . presto . metadata . PrestoNode ( nodeName ,    new   URI (  \" http :  /  /  1  2  7  .  0  .  0  .  1  /  \"  )  ,    NodeVersion . UNKNOWN ,    false )  )  ;", "RaptorConnectorId   connectorId    =    new   RaptorConnectorId (  \" raptor \"  )  ;", "metadata    =    new   RaptorMetadata ( connectorId . toString (  )  ,    dbi ,    shardManager )  ;", "metadata . createTable ( SESSION ,    TestRaptorSplitManager . TEST _ TABLE ,    false )  ;", "tableHandle    =    metadata . getTableHandle ( SESSION ,    TestRaptorSplitManager . TEST _ TABLE . getTable (  )  )  ;", "List < ShardInfo >    shards    =    ImmutableList .  < ShardInfo > builder (  )  . add ( TestDatabaseShardManager . shardInfo ( UUID . randomUUID (  )  ,    nodeName )  )  . add ( TestDatabaseShardManager . shardInfo ( UUID . randomUUID (  )  ,    nodeName )  )  . add ( TestDatabaseShardManager . shardInfo ( UUID . randomUUID (  )  ,    nodeName )  )  . add ( TestDatabaseShardManager . shardInfo ( UUID . randomUUID (  )  ,    nodeName )  )  . build (  )  ;", "tableId    =     (  ( RaptorTableHandle )     ( tableHandle )  )  . getTableId (  )  ;", "List < ColumnInfo >    columns    =    metadata . getColumnHandles ( SESSION ,    tableHandle )  . values (  )  . stream (  )  . map ( RaptorColumnHandle . class :  : cast )  . map ( ColumnInfo :  : fromHandle )  . collect ( Collectors . toList (  )  )  ;", "long   transactionId    =    shardManager . beginTransaction (  )  ;", "shardManager . commitShards ( transactionId ,    tableId ,    columns ,    shards ,    Optional . empty (  )  ,     0  )  ;", "raptorSplitManager    =    new   RaptorSplitManager ( connectorId ,    nodeSupplier ,    shardManager ,    false )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorSplitManager"}, {"methodBody": ["METHOD_START", "{", "dummyHandle . close (  )  ;", "deleteRecursively ( temporary . toPath (  )  ,    ALLOW _ INSECURE )  ;", "}", "METHOD_END"], "methodName": ["teardown"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorSplitManager"}, {"methodBody": ["METHOD_START", "{", "TestingNodeManager   nodeManager    =    new   TestingNodeManager (  )  ;", "RaptorConnectorId   connectorId    =    new   RaptorConnectorId (  \" raptor \"  )  ;", "NodeSupplier   nodeSupplier    =    nodeManager :  : getWorkerNodes ;", "PrestoNode   node    =    new   PrestoNode ( UUID . randomUUID (  )  . toString (  )  ,    new   URI (  \" http :  /  /  1  2  7  .  0  .  0  .  1  /  \"  )  ,    NodeVersion . UNKNOWN ,    false )  ;", "nodeManager . addNode ( node )  ;", "RaptorSplitManager   raptorSplitManagerWithBackup    =    new   RaptorSplitManager ( connectorId ,    nodeSupplier ,    shardManager ,    true )  ;", "deleteShardNodes (  )  ;", "ConnectorTableLayoutResult   layout    =    getOnlyElement ( metadata . getTableLayouts ( SESSION ,    tableHandle ,    Constraint . alwaysTrue (  )  ,    Optional . empty (  )  )  )  ;", "ConnectorSplitSource   partitionSplit    =     . getSplits ( raptorSplitManagerWithBackup ,    layout )  ;", "List < ConnectorSplit >    batch    =     . getSplits ( partitionSplit ,     1  )  ;", "assertEquals ( getOnlyElement ( getOnlyElement ( batch )  . getAddresses (  )  )  ,    node . getHostAndPort (  )  )  ;", "}", "METHOD_END"], "methodName": ["testAssignRandomNodeWhenBackupAvailable"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorSplitManager"}, {"methodBody": ["METHOD_START", "{", "deleteShardNodes (  )  ;", "ConnectorTableLayoutResult   layout    =    getOnlyElement ( metadata . getTableLayouts ( SESSION ,    tableHandle ,    Constraint . alwaysTrue (  )  ,    Optional . empty (  )  )  )  ;", "ConnectorSplitSource   splitSource    =     . getSplits ( raptorSplitManager ,    layout )  ;", ". getSplits ( splitSource ,     1  0  0  0  )  ;", "}", "METHOD_END"], "methodName": ["testNoHostForShard"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorSplitManager"}, {"methodBody": ["METHOD_START", "{", "deleteShardNodes (  )  ;", "RaptorSplitManager   raptorSplitManagerWithBackup    =    new   RaptorSplitManager ( new   RaptorConnectorId (  \" fbraptor \"  )  ,    ImmutableSet :  : of ,    shardManager ,    true )  ;", "ConnectorTableLayoutResult   layout    =    getOnlyElement ( metadata . getTableLayouts ( SESSION ,    tableHandle ,    Constraint . alwaysTrue (  )  ,    Optional . empty (  )  )  )  ;", "ConnectorSplitSource   splitSource    =     . getSplits ( raptorSplitManagerWithBackup ,    layout )  ;", ". getSplits ( splitSource ,     1  0  0  0  )  ;", "}", "METHOD_END"], "methodName": ["testNoNodes"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorSplitManager"}, {"methodBody": ["METHOD_START", "{", "List < ConnectorTableLayoutResult >    layouts    =    metadata . getTableLayouts ( SESSION ,    tableHandle ,    Constraint . alwaysTrue (  )  ,    Optional . empty (  )  )  ;", "assertEquals ( layouts . size (  )  ,     1  )  ;", "ConnectorTableLayoutResult   layout    =    getOnlyElement ( layouts )  ;", "Assertions . assertInstanceOf ( layout . getTableLayout (  )  . getHandle (  )  ,    RaptorTableLayoutHandle . class )  ;", "ConnectorSplitSource   splitSource    =     . getSplits ( raptorSplitManager ,    layout )  ;", "int   splitCount    =     0  ;", "while    (  !  ( splitSource . isFinished (  )  )  )     {", "splitCount    +  =     . getSplits ( splitSource ,     1  0  0  0  )  . size (  )  ;", "}", "assertEquals ( splitCount ,     4  )  ;", "}", "METHOD_END"], "methodName": ["testSanity"], "fileName": "com.facebook.presto.raptor.metadata.TestRaptorSplitManager"}, {"methodBody": ["METHOD_START", "{", "Assertions . assertEqualsIgnoreOrder ( select ( sql )  ,    Arrays . asList ( rows )  )  ;", "}", "METHOD_END"], "methodName": ["assertQuery"], "fileName": "com.facebook.presto.raptor.metadata.TestShardCleaner"}, {"methodBody": ["METHOD_START", "{", "for    ( UUID   uuid    :    uuids )     {", "File   file    =    new   File ( temporary ,     (  \" empty -  \"     +     ( UUID . randomUUID (  )  )  )  )  ;", "assertTrue ( file . createNewFile (  )  )  ;", "backupStore . backup ( uuid ,    file )  ;", "}", "}", "METHOD_END"], "methodName": ["createShardBackups"], "fileName": "com.facebook.presto.raptor.metadata.TestShardCleaner"}, {"methodBody": ["METHOD_START", "{", "File   file    =    storageService . getStorageFile ( uuid )  ;", "storageService . createParents ( file )  ;", "assertTrue ( file . createNewFile (  )  )  ;", "}", "METHOD_END"], "methodName": ["createShardFile"], "fileName": "com.facebook.presto.raptor.metadata.TestShardCleaner"}, {"methodBody": ["METHOD_START", "{", "return   Arrays . asList ( values )  ;", "}", "METHOD_END"], "methodName": ["row"], "fileName": "com.facebook.presto.raptor.metadata.TestShardCleaner"}, {"methodBody": ["METHOD_START", "{", "return   dbi . withHandle (  (    handle )     -  >    handle . createQuery ( sql )  . map (  (    index ,    rs ,    context )     -  >     {", "int   count    =    rs . getMData (  )  . getColumnCount (  )  ;", "List < Object >    row    =    new   ArrayList <  >  ( count )  ;", "for    ( int   i    =     1  ;    i    <  =    count ;    i +  +  )     {", "Object   value    =    rs . getObject ( i )  ;", "if    ( value   instanceof   byte [  ]  )     {", "value    =    uuidFromBytes (  (  ( byte [  ]  )     ( value )  )  )  ;", "}", "row . add ( value )  ;", "}", "return   row ;", "}  )  . list (  )  )  ;", "}", "METHOD_END"], "methodName": ["select"], "fileName": "com.facebook.presto.raptor.metadata.TestShardCleaner"}, {"methodBody": ["METHOD_START", "{", "dbi    =    new   DBI (  (  \" jdbc : h 2  : mem : test \"     +     ( System . nanoTime (  )  )  )  )  ;", "dummyHandle    =    dbi . open (  )  ;", "SchemaDaoUtil . createTablesWithRetry ( dbi )  ;", "temporary    =    createTempDir (  )  ;", "File   directory    =    new   File ( temporary ,     \" data \"  )  ;", "storageService    =    new   FileStorageService ( directory )  ;", "storageService . start (  )  ;", "File   backupDirectory    =    new   File ( temporary ,     \" backup \"  )  ;", "backupStore    =    new   FileBackupStore ( backupDirectory )  ;", "(  ( FileBackupStore )     ( backupStore )  )  . start (  )  ;", "ticker    =    new   TestingTicker (  )  ;", "ShardCleanerConfig   config    =    new   ShardCleanerConfig (  )  ;", "cleaner    =    new   ShardCleaner ( new   util . DaoSupplier ( dbi ,    H 2 ShardDao . class )  ,     \" node 1  \"  ,    true ,    ticker ,    storageService ,    Optional . of ( backupStore )  ,    config . getMaxTransactionAge (  )  ,    config . getTransactionCleanerInterval (  )  ,    config . getLocalCleanerInterval (  )  ,    config . getLocalCleanTime (  )  ,    config . getBackupCleanerInterval (  )  ,    config . getBackupCleanTime (  )  ,    config . getBackupDeletionThreads (  )  ,    config . getMaxCompletedTransactionAge (  )  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.raptor.metadata.TestShardCleaner"}, {"methodBody": ["METHOD_START", "{", "return   backupStore . shardExists ( uuid )  ;", "}", "METHOD_END"], "methodName": ["shardBackupExists"], "fileName": "com.facebook.presto.raptor.metadata.TestShardCleaner"}, {"methodBody": ["METHOD_START", "{", "return   storageService . getStorageFile ( uuid )  . exists (  )  ;", "}", "METHOD_END"], "methodName": ["shardFileExists"], "fileName": "com.facebook.presto.raptor.metadata.TestShardCleaner"}, {"methodBody": ["METHOD_START", "{", "if    (  ( dummyHandle )     !  =    null )     {", "dummyHandle . close (  )  ;", "}", "deleteRecursively ( temporary . toPath (  )  ,    ALLOW _ INSECURE )  ;", "}", "METHOD_END"], "methodName": ["teardown"], "fileName": "com.facebook.presto.raptor.metadata.TestShardCleaner"}, {"methodBody": ["METHOD_START", "{", "TestShardCleaner . TestingDao   dao    =    dbi . onDemand ( TestShardCleaner . TestingDao . class )  ;", "long   now    =    System . currentTimeMillis (  )  ;", "long   txn 1     =    dao . insertTransaction ( new   Timestamp (  ( now    -     ( TimeUnit . HOURS . toMillis (  2  6  )  )  )  )  )  ;", "long   txn 2     =    dao . insertTransaction ( new   Timestamp (  ( now    -     ( TimeUnit . HOURS . toMillis (  2  5  )  )  )  )  )  ;", "long   txn 3     =    dao . insertTransaction ( new   Timestamp ( now )  )  ;", "ShardDao   shardDao    =    dbi . onDemand ( ShardDao . class )  ;", "assertEquals ( shardDao . finalizeTransaction ( txn 1  ,    true )  ,     1  )  ;", "assertQuery (  \" SELECT   transaction _ id ,    successful   FROM   transactions \"  ,    TestShardCleaner . row ( txn 1  ,    true )  ,    TestShardCleaner . row ( txn 2  ,    null )  ,    TestShardCleaner . row ( txn 3  ,    null )  )  ;", "cleaner . abortOldTransactions (  )  ;", "assertQuery (  \" SELECT   transaction _ id ,    successful   FROM   transactions \"  ,    TestShardCleaner . row ( txn 1  ,    true )  ,    TestShardCleaner . row ( txn 2  ,    false )  ,    TestShardCleaner . row ( txn 3  ,    null )  )  ;", "}", "METHOD_END"], "methodName": ["testAbortOldTransactions"], "fileName": "com.facebook.presto.raptor.metadata.TestShardCleaner"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( cleaner . getBackupShardsCleaned (  )  . getTotalCount (  )  ,     0  )  ;", ". TestingDao   dao    =    dbi . onDemand (  . TestingDao . class )  ;", "UUID   shard 1     =    UUID . randomUUID (  )  ;", "UUID   shard 2     =    UUID . randomUUID (  )  ;", "UUID   shard 3     =    UUID . randomUUID (  )  ;", "long   now    =    System . currentTimeMillis (  )  ;", "Timestamp   time 1     =    new   Timestamp (  ( now    -     ( TimeUnit . HOURS . toMillis (  2  5  )  )  )  )  ;", "Timestamp   time 2     =    new   Timestamp (  ( now    -     ( TimeUnit . HOURS . toMillis (  2  3  )  )  )  )  ;", "dao . insertDeletedShard ( shard 1  ,    time 1  )  ;", "dao . insertDeletedShard ( shard 2  ,    time 1  )  ;", "dao . insertDeletedShard ( shard 3  ,    time 2  )  ;", "createShardBackups ( shard 1  ,    shard 2  ,    shard 3  )  ;", "cleaner . cleanBackupShards (  )  ;", "assertEquals ( cleaner . getBackupShardsCleaned (  )  . getTotalCount (  )  ,     2  )  ;", "assertFalse ( shardBackupExists ( shard 1  )  )  ;", "assertFalse ( shardBackupExists ( shard 2  )  )  ;", "assertTrue ( shardBackupExists ( shard 3  )  )  ;", "assertQuery (  \" SELECT   shard _ uuid   FROM   deleted _ shards \"  ,     . row ( shard 3  )  )  ;", "}", "METHOD_END"], "methodName": ["testCleanBackupShards"], "fileName": "com.facebook.presto.raptor.metadata.TestShardCleaner"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( cleaner . getLocalShardsCleaned (  )  . getTotalCount (  )  ,     0  )  ;", "TestingShardDao   shardDao    =    dbi . onDemand ( TestingShardDao . class )  ;", "MetadataDao   metadataDao    =    dbi . onDemand ( MetadataDao . class )  ;", "long   tableId    =    metadataDao . insertTable (  \" test \"  ,     \" test \"  ,    false ,    false ,    null ,     0  )  ;", "UUID   shard 1     =    UUID . randomUUID (  )  ;", "UUID   shard 2     =    UUID . randomUUID (  )  ;", "UUID   shard 3     =    UUID . randomUUID (  )  ;", "UUID   shard 4     =    UUID . randomUUID (  )  ;", "Set < UUID >    shards    =    ImmutableSet . of ( shard 1  ,    shard 2  ,    shard 3  ,    shard 4  )  ;", "for    ( UUID   shard    :    shards )     {", "shardDao . insertShard ( shard ,    tableId ,    null ,     0  ,     0  ,     0  ,     0  )  ;", "createShardFile ( shard )  ;", "assertTrue ( shardFileExists ( shard )  )  ;", "}", "int   node 1     =    shardDao . insertNode (  \" node 1  \"  )  ;", "int   node 2     =    shardDao . insertNode (  \" node 2  \"  )  ;", "shardDao . insertShardNode ( shard 1  ,    node 1  )  ;", "shardDao . insertShardNode ( shard 4  ,    node 2  )  ;", "cleaner . cleanLocalShards (  )  ;", "assertEquals ( cleaner . getLocalShardsCleaned (  )  . getTotalCount (  )  ,     0  )  ;", "for    ( UUID   shard    :    shards )     {", "assertTrue ( shardFileExists ( shard )  )  ;", "}", "shardDao . insertShardNode ( shard 3  ,    node 1  )  ;", "Duration   cleanTime    =    new   Config (  )  . getLocalCleanTime (  )  ;", "ticker . increment (  (  ( cleanTime . toMillis (  )  )     +     1  )  ,    TimeUnit . MILLISECONDS )  ;", "cleaner . cleanLocalShards (  )  ;", "assertEquals ( cleaner . getLocalShardsCleaned (  )  . getTotalCount (  )  ,     2  )  ;", "assertTrue ( shardFileExists ( shard 1  )  )  ;", "assertFalse ( shardFileExists ( shard 2  )  )  ;", "assertTrue ( shardFileExists ( shard 3  )  )  ;", "assertFalse ( shardFileExists ( shard 4  )  )  ;", "}", "METHOD_END"], "methodName": ["testCleanLocalShards"], "fileName": "com.facebook.presto.raptor.metadata.TestShardCleaner"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( cleaner . getLocalShardsCleaned (  )  . getTotalCount (  )  ,     0  )  ;", "TestingShardDao   shardDao    =    dbi . onDemand ( TestingShardDao . class )  ;", "MetadataDao   Dao    =    dbi . onDemand ( MetadataDao . class )  ;", "long   tableId    =    Dao . insertTable (  \" test \"  ,     \" test \"  ,    false ,    false ,    null ,     0  )  ;", "UUID   shard 1     =    UUID . randomUUID (  )  ;", "UUID   shard 2     =    UUID . randomUUID (  )  ;", "UUID   shard 3     =    UUID . randomUUID (  )  ;", "Set < UUID >    shards    =    ImmutableSet . of ( shard 1  ,    shard 2  ,    shard 3  )  ;", "for    ( UUID   shard    :    shards )     {", "shardDao . insertShard ( shard ,    tableId ,    null ,     0  ,     0  ,     0  ,     0  )  ;", "createShardFile ( shard )  ;", "assertTrue ( shardFileExists ( shard )  )  ;", "}", "int   node 1     =    shardDao . insertNode (  \" node 1  \"  )  ;", "int   node 2     =    shardDao . insertNode (  \" node 2  \"  )  ;", "shardDao . insertShardNode ( shard 1  ,    node 1  )  ;", "shardDao . insertShardNode ( shard 3  ,    node 2  )  ;", "Set < UUID >    local    =    cleaner . getLocalShards (  )  ;", "cleaner . cleanLocalShardsImmediately ( local )  ;", "assertEquals ( cleaner . getLocalShardsCleaned (  )  . getTotalCount (  )  ,     2  )  ;", "assertTrue ( shardFileExists ( shard 1  )  )  ;", "assertFalse ( shardFileExists ( shard 2  )  )  ;", "assertFalse ( shardFileExists ( shard 3  )  )  ;", "}", "METHOD_END"], "methodName": ["testCleanLocalShardsImmediately"], "fileName": "com.facebook.presto.raptor.metadata.TestShardCleaner"}, {"methodBody": ["METHOD_START", "{", "TestShardCleaner . TestingDao   dao    =    dbi . onDemand ( TestShardCleaner . TestingDao . class )  ;", "ShardDao   shardDao    =    dbi . onDemand ( ShardDao . class )  ;", "long   now    =    System . currentTimeMillis (  )  ;", "Timestamp   yesterdayStart    =    new   Timestamp (  ( now    -     ( TimeUnit . HOURS . toMillis (  2  7  )  )  )  )  ;", "Timestamp   yesterdayEnd    =    new   Timestamp (  ( now    -     ( TimeUnit . HOURS . toMillis (  2  6  )  )  )  )  ;", "Timestamp   todayEnd    =    new   Timestamp (  ( now    -     ( TimeUnit . HOURS . toMillis (  1  )  )  )  )  ;", "long   txn 1     =    dao . insertTransaction ( yesterdayStart )  ;", "long   txn 2     =    dao . insertTransaction ( yesterdayStart )  ;", "long   txn 3     =    dao . insertTransaction ( yesterdayStart )  ;", "long   txn 4     =    dao . insertTransaction ( yesterdayStart )  ;", "long   txn 5     =    dao . insertTransaction ( new   Timestamp ( now )  )  ;", "long   txn 6     =    dao . insertTransaction ( new   Timestamp ( now )  )  ;", "assertEquals ( shardDao . finalizeTransaction ( txn 1  ,    true )  ,     1  )  ;", "assertEquals ( shardDao . finalizeTransaction ( txn 2  ,    false )  ,     1  )  ;", "assertEquals ( shardDao . finalizeTransaction ( txn 3  ,    false )  ,     1  )  ;", "assertEquals ( shardDao . finalizeTransaction ( txn 5  ,    true )  ,     1  )  ;", "assertEquals ( shardDao . finalizeTransaction ( txn 6  ,    false )  ,     1  )  ;", "assertEquals ( dao . updateTransactionEndTime ( txn 1  ,    yesterdayEnd )  ,     1  )  ;", "assertEquals ( dao . updateTransactionEndTime ( txn 2  ,    yesterdayEnd )  ,     1  )  ;", "assertEquals ( dao . updateTransactionEndTime ( txn 3  ,    yesterdayEnd )  ,     1  )  ;", "assertEquals ( dao . updateTransactionEndTime ( txn 5  ,    todayEnd )  ,     1  )  ;", "assertEquals ( dao . updateTransactionEndTime ( txn 6  ,    todayEnd )  ,     1  )  ;", "shardDao . insertCreatedShard ( UUID . randomUUID (  )  ,    txn 2  )  ;", "shardDao . insertCreatedShard ( UUID . randomUUID (  )  ,    txn 2  )  ;", "assertQuery (  \" SELECT   transaction _ id ,    successful ,    end _ time   FROM   transactions \"  ,    TestShardCleaner . row ( txn 1  ,    true ,    yesterdayEnd )  ,    TestShardCleaner . row ( txn 2  ,    false ,    yesterdayEnd )  ,    TestShardCleaner . row ( txn 3  ,    false ,    yesterdayEnd )  ,    TestShardCleaner . row ( txn 4  ,    null ,    null )  ,    TestShardCleaner . row ( txn 5  ,    true ,    todayEnd )  ,    TestShardCleaner . row ( txn 6  ,    false ,    todayEnd )  )  ;", "cleaner . deleteOldCompletedTransactions (  )  ;", "assertQuery (  \" SELECT   transaction _ id ,    successful ,    end _ time   FROM   transactions \"  ,    TestShardCleaner . row ( txn 2  ,    false ,    yesterdayEnd )  ,    TestShardCleaner . row ( txn 4  ,    null ,    null )  ,    TestShardCleaner . row ( txn 5  ,    true ,    todayEnd )  ,    TestShardCleaner . row ( txn 6  ,    false ,    todayEnd )  )  ;", "}", "METHOD_END"], "methodName": ["testDeleteOldCompletedTransactions"], "fileName": "com.facebook.presto.raptor.metadata.TestShardCleaner"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( cleaner . getBackupShardsQueued (  )  . getTotalCount (  )  ,     0  )  ;", "ShardDao   dao    =    dbi . onDemand ( ShardDao . class )  ;", "UUID   shard 1     =    UUID . randomUUID (  )  ;", "UUID   shard 2     =    UUID . randomUUID (  )  ;", "UUID   shard 3     =    UUID . randomUUID (  )  ;", "long   txn 1     =    dao . insertTransaction (  )  ;", "assertEquals ( dao . finalizeTransaction ( txn 1  ,    false )  ,     1  )  ;", "dao . insertCreatedShard ( shard 1  ,    txn 1  )  ;", "dao . insertCreatedShard ( shard 2  ,    txn 1  )  ;", "long   txn 2     =    dao . insertTransaction (  )  ;", "dao . insertCreatedShard ( shard 3  ,    txn 2  )  ;", "assertQuery (  \" SELECT   shard _ uuid ,    transaction _ id   FROM   created _ shards \"  ,     . row ( shard 1  ,    txn 1  )  ,     . row ( shard 2  ,    txn 1  )  ,     . row ( shard 3  ,    txn 2  )  )  ;", "assertQuery (  \" SELECT   shard _ uuid   FROM   deleted _ shards \"  )  ;", "cleaner . deleteOldShards (  )  ;", "assertEquals ( cleaner . getBackupShardsQueued (  )  . getTotalCount (  )  ,     2  )  ;", "assertQuery (  \" SELECT   shard _ uuid ,    transaction _ id   FROM   created _ shards \"  ,     . row ( shard 3  ,    txn 2  )  )  ;", "assertQuery (  \" SELECT   shard _ uuid   FROM   deleted _ shards \"  ,     . row ( shard 1  )  ,     . row ( shard 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testDeleteOldShards"], "fileName": "com.facebook.presto.raptor.metadata.TestShardCleaner"}, {"methodBody": ["METHOD_START", "{", "ConfigAssertions . assertRecordedDefaults ( ConfigAssertions . recordDefaults ( ShardCleanerConfig . class )  . setMaxTransactionAge ( new   Duration (  1  ,    TimeUnit . DAYS )  )  . setTransactionCleanerInterval ( new   Duration (  1  0  ,    TimeUnit . MINUTES )  )  . setLocalCleanerInterval ( new   Duration (  1  ,    TimeUnit . HOURS )  )  . setLocalCleanTime ( new   Duration (  4  ,    TimeUnit . HOURS )  )  . setBackupCleanerInterval ( new   Duration (  5  ,    TimeUnit . MINUTES )  )  . setBackupCleanTime ( new   Duration (  1  ,    TimeUnit . DAYS )  )  . setBackupDeletionThreads (  5  0  )  . setMaxCompletedTransactionAge ( new   Duration (  1  ,    TimeUnit . DAYS )  )  )  ;", "}", "METHOD_END"], "methodName": ["testDefaults"], "fileName": "com.facebook.presto.raptor.metadata.TestShardCleanerConfig"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    properties    =    new   Builder < String ,    String >  (  )  . put (  \" raptor . max - transaction - age \"  ,     \"  4  2 m \"  )  . put (  \" raptor . transaction - cleaner - interval \"  ,     \"  4  3 m \"  )  . put (  \" raptor . local - cleaner - interval \"  ,     \"  3  1 m \"  )  . put (  \" raptor . local - clean - time \"  ,     \"  3  2 m \"  )  . put (  \" raptor . backup - cleaner - interval \"  ,     \"  3  4 m \"  )  . put (  \" raptor . backup - clean - time \"  ,     \"  3  5 m \"  )  . put (  \" raptor . backup - deletion - threads \"  ,     \"  3  7  \"  )  . put (  \" raptor . max - completed - transaction - age \"  ,     \"  3  9 m \"  )  . build (  )  ;", "expected    =    new    (  )  . setMaxTransactionAge ( new   Duration (  4  2  ,    TimeUnit . MINUTES )  )  . setTransactionCleanerInterval ( new   Duration (  4  3  ,    TimeUnit . MINUTES )  )  . setLocalCleanerInterval ( new   Duration (  3  1  ,    TimeUnit . MINUTES )  )  . setLocalCleanTime ( new   Duration (  3  2  ,    TimeUnit . MINUTES )  )  . setBackupCleanerInterval ( new   Duration (  3  4  ,    TimeUnit . MINUTES )  )  . setBackupCleanTime ( new   Duration (  3  5  ,    TimeUnit . MINUTES )  )  . setBackupDeletionThreads (  3  7  )  . setMaxCompletedTransactionAge ( new   Duration (  3  9  ,    TimeUnit . MINUTES )  )  ;", "ConfigAssertions . assertFullMapping ( properties ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testExplicitPropertyMappings"], "fileName": "com.facebook.presto.raptor.metadata.TestShardCleanerConfig"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( nodes . contains ( new   ShardNode ( shardUuid ,    nodeName )  )  )  ;", "}", "METHOD_END"], "methodName": ["assertContainsShardNode"], "fileName": "com.facebook.presto.raptor.metadata.TestShardDao"}, {"methodBody": ["METHOD_START", "{", "return   dbi . onDemand ( MetadataDao . class )  . insertTable (  \" test \"  ,    name ,    false ,    false ,    null ,     0  )  ;", "}", "METHOD_END"], "methodName": ["createTable"], "fileName": "com.facebook.presto.raptor.metadata.TestShardDao"}, {"methodBody": ["METHOD_START", "{", "dbi    =    new   DBI (  (  \" jdbc : h 2  : mem : test \"     +     ( System . nanoTime (  )  )  )  )  ;", "dummyHandle    =    dbi . open (  )  ;", "dao    =    dbi . onDemand ( Testing . class )  ;", "SchemaDaoUtil . createTablesWithRetry ( dbi )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.raptor.metadata.TestShardDao"}, {"methodBody": ["METHOD_START", "{", "dummyHandle . close (  )  ;", "}", "METHOD_END"], "methodName": ["teardown"], "fileName": "com.facebook.presto.raptor.metadata.TestShardDao"}, {"methodBody": ["METHOD_START", "{", "assertFalse ( dao . externalBatchExists (  \" foo \"  )  )  ;", "assertFalse ( dao . externalBatchExists (  \" bar \"  )  )  ;", "dao . insertExternalBatch (  \" foo \"  )  ;", "assertTrue ( dao . externalBatchExists (  \" foo \"  )  )  ;", "assertFalse ( dao . externalBatchExists (  \" bar \"  )  )  ;", "try    {", "dao . insertExternalBatch (  \" foo \"  )  ;", "fail (  \" expected   exception \"  )  ;", "}    catch    ( UnableToExecuteStatementException   e )     {", "Assertions . assertInstanceOf ( e . getCause (  )  ,    SQLException . class )  ;", "assertTrue (  (  ( SQLException )     ( e . getCause (  )  )  )  . getSQLState (  )  . startsWith (  \"  2  3  \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testExternalBatches"], "fileName": "com.facebook.presto.raptor.metadata.TestShardDao"}, {"methodBody": ["METHOD_START", "{", "long   transactionId    =    dao . insertTransaction (  )  ;", "dao . insertCreated ( UUID . randomUUID (  )  ,    transactionId )  ;", "dao . deleteCreateds ( transactionId )  ;", "}", "METHOD_END"], "methodName": ["testInsertCreatedShard"], "fileName": "com.facebook.presto.raptor.metadata.TestShardDao"}, {"methodBody": ["METHOD_START", "{", "dao . insertDeletedShards ( ImmutableList . of ( UUID . randomUUID (  )  ,    UUID . randomUUID (  )  )  )  ;", "dao . insertDeletedShards (  0  )  ;", "}", "METHOD_END"], "methodName": ["testInsertDeletedShards"], "fileName": "com.facebook.presto.raptor.metadata.TestShardDao"}, {"methodBody": ["METHOD_START", "{", "long   tableId    =    createTable (  \" test \"  )  ;", "UUID   shardUuid    =    UUID . randomUUID (  )  ;", "long   shardId    =    dao . insertShard ( shardUuid ,    tableId ,    null ,     1  3  ,     4  2  ,     8  4  ,     1  2  3  4  )  ;", "ShardM   shard    =    dao . getShard ( shardUuid )  ;", "assertNotNull ( shard )  ;", "assertEquals ( shard . getTableId (  )  ,    tableId )  ;", "assertEquals ( shard . getShardId (  )  ,    shardId )  ;", "assertEquals ( shard . getShardUuid (  )  ,    shardUuid )  ;", "assertEquals ( shard . getRowCount (  )  ,     1  3  )  ;", "assertEquals ( shard . getCompressedSize (  )  ,     4  2  )  ;", "assertEquals ( shard . getUncompressedSize (  )  ,     8  4  )  ;", "assertEquals ( shard . getXxhash 6  4  (  )  ,    OptionalLong . of (  1  2  3  4  )  )  ;", "}", "METHOD_END"], "methodName": ["testInsertShard"], "fileName": "com.facebook.presto.raptor.metadata.TestShardDao"}, {"methodBody": ["METHOD_START", "{", "int   nodeId    =    dao . insertNode (  \" node \"  )  ;", "long   tableId    =    createTable (  \" test \"  )  ;", "UUID   shard    =    UUID . randomUUID (  )  ;", "dao . inser ( shard ,    tableId ,    null ,     0  ,     0  ,     0  ,     0  )  ;", "dao . inserNode ( shard ,    nodeId )  ;", "assertEquals ( dao . geNodes ( tableId )  ,    ImmutableList . of ( new   ShardNode ( shard ,     \" node \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testInsertShardNodeUsingShardUuid"], "fileName": "com.facebook.presto.raptor.metadata.TestShardDao"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( dao . getAllNodesInUse (  )  ,    ImmutableSet . of (  )  )  ;", "String   nodeName    =    UUIDndomUUID (  )  . toString (  )  ;", "int   nodeId    =    dao . insertNode ( nodeName )  ;", "assertEquals ( dao . getNodeId ( nodeName )  ,     (  ( Integer )     ( nodeId )  )  )  ;", "assertEquals ( dao . getAllNodesInUse (  )  ,    ImmutableSet . of ( nodeName )  )  ;", "}", "METHOD_END"], "methodName": ["testNodeInsert"], "fileName": "com.facebook.presto.raptor.metadata.TestShardDao"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( dao . getAllNodesInUse (  )  ,    ImmutableSet . of (  )  )  ;", "String   nodeName 1     =    UUID . randomUUID (  )  . toString (  )  ;", "int   nodeId 1     =    dao . insertNode ( nodeName 1  )  ;", "String   nodeName 2     =    UUID . randomUUID (  )  . toString (  )  ;", "int   nodeId 2     =    dao . insertNode ( nodeName 2  )  ;", "assertEquals ( dao . getAllNodesInUse (  )  ,    ImmutableSet . of ( nodeName 1  ,    nodeName 2  )  )  ;", "UUID   shardUuid 1     =    UUID . randomUUID (  )  ;", "UUID   shardUuid 2     =    UUID . randomUUID (  )  ;", "UUID   shardUuid 3     =    UUID . randomUUID (  )  ;", "UUID   shardUuid 4     =    UUID . randomUUID (  )  ;", "UUID   shardUuid 5     =    UUID . randomUUID (  )  ;", "MetadataDao   Dao    =    dbi . onDemand ( MetadataDao . class )  ;", "int   bucketCount    =     2  0  ;", "long   distributionId    =    Dao . insertDistribution (  \" test \"  ,     \" bigint \"  ,    bucketCount )  ;", "for    ( int   i    =     0  ;    i    <    bucketCount ;    i +  +  )     {", "Integer   nodeId    =     (  ( i    %     2  )     =  =     0  )     ?    nodeId 1     :    nodeId 2  ;", "dao . insertBuckets ( distributionId ,    ImmutableList . of ( i )  ,    ImmutableList . of ( nodeId )  )  ;", "}", "long   plainTableId    =    Dao . insertTable (  \" test \"  ,     \" plain \"  ,    false ,    false ,    null ,     0  )  ;", "long   bucketedTableId    =    Dao . insertTable (  \" test \"  ,     \" bucketed \"  ,    false ,    false ,    distributionId ,     0  )  ;", "long   shardId 1     =    dao . insertShard ( shardUuid 1  ,    plainTableId ,    null ,     1  ,     1  1  ,     1  1  1  ,     8  8  8  1  1  1  )  ;", "long   shardId 2     =    dao . insertShard ( shardUuid 2  ,    plainTableId ,    null ,     2  ,     2  2  ,     2  2  2  ,     8  8  8  2  2  2  )  ;", "long   shardId 3     =    dao . insertShard ( shardUuid 3  ,    bucketedTableId ,     8  ,     3  ,     3  3  ,     3  3  3  ,     8  8  8  3  3  3  )  ;", "long   shardId 4     =    dao . insertShard ( shardUuid 4  ,    bucketedTableId ,     9  ,     4  ,     4  4  ,     4  4  4  ,     8  8  8  4  4  4  )  ;", "long   shardId 5     =    dao . insertShard ( shardUuid 5  ,    bucketedTableId ,     7  ,     5  ,     5  5  ,     5  5  5  ,     8  8  8  5  5  5  )  ;", "OptionalInt   noBucket    =    OptionalInt . empty (  )  ;", "OptionalLong   noRange    =    OptionalLong . empty (  )  ;", "ShardMetadata   shard 1     =    new   ShardMetadata ( plainTableId ,    shardId 1  ,    shardUuid 1  ,    noBucket ,     1  ,     1  1  ,     1  1  1  ,    OptionalLong . of (  8  8  8  1  1  1  )  ,    noRange ,    noRange )  ;", "ShardMetadata   shard 2     =    new   ShardMetadata ( plainTableId ,    shardId 2  ,    shardUuid 2  ,    noBucket ,     2  ,     2  2  ,     2  2  2  ,    OptionalLong . of (  8  8  8  2  2  2  )  ,    noRange ,    noRange )  ;", "ShardMetadata   shard 3     =    new   ShardMetadata ( bucketedTableId ,    shardId 3  ,    shardUuid 3  ,    OptionalInt . of (  8  )  ,     3  ,     3  3  ,     3  3  3  ,    OptionalLong . of (  8  8  8  3  3  3  )  ,    noRange ,    noRange )  ;", "ShardMetadata   shard 4     =    new   ShardMetadata ( bucketedTableId ,    shardId 4  ,    shardUuid 4  ,    OptionalInt . of (  9  )  ,     4  ,     4  4  ,     4  4  4  ,    OptionalLong . of (  8  8  8  4  4  4  )  ,    noRange ,    noRange )  ;", "ShardMetadata   shard 5     =    new   ShardMetadata ( bucketedTableId ,    shardId 5  ,    shardUuid 5  ,    OptionalInt . of (  7  )  ,     5  ,     5  5  ,     5  5  5  ,    OptionalLong . of (  8  8  8  5  5  5  )  ,    noRange ,    noRange )  ;", "assertEquals ( dao . getShards ( plainTableId )  ,    ImmutableList . of ( shardUuid 1  ,    shardUuid 2  )  )  ;", "assertEquals ( dao . getShards ( bucketedTableId )  ,    ImmutableList . of ( shardUuid 3  ,    shardUuid 4  ,    shardUuid 5  )  )  ;", "assertEquals ( dao . getNodeShards ( nodeName 1  ,    null )  ,    ImmutableSet . of ( shard 3  )  )  ;", "assertEquals ( dao . getNodeShards ( nodeName 2  ,    null )  ,    ImmutableSet . of ( shard 4  ,    shard 5  )  )  ;", "assertEquals ( dao . getNodeSizes (  )  ,    ImmutableSet . of ( new   NodeSize ( nodeName 1  ,     3  3  )  ,    new   NodeSize ( nodeName 2  ,     (  4  4     +     5  5  )  )  )  )  ;", "dao . insertShardNode ( shardId 1  ,    nodeId 1  )  ;", "dao . insertShardNode ( shardId 2  ,    nodeId 1  )  ;", "dao . insertShardNode ( shardId 1  ,    nodeId 2  )  ;", "assertEquals ( dao . getNodeShards ( nodeName 1  ,    null )  ,    ImmutableSet . of ( shard 1  ,    shard 2  ,    shard 3  )  )  ;", "assertEquals ( dao . getNodeShards ( nodeName 2  ,    null )  ,    ImmutableSet . of ( shard 1  ,    shard 4  ,    shard 5  )  )  ;", "assertEquals ( dao . getNodeSizes (  )  ,    ImmutableSet . of ( new   NodeSize ( nodeName 1  ,     (  (  1  1     +     2  2  )     +     3  3  )  )  ,    new   NodeSize ( nodeName 2  ,     (  (  1  1     +     4  4  )     +     5  5  )  )  )  )  ;", "dao . dropShardNodes ( plainTableId )  ;", "assertEquals ( dao . getNodeShards ( nodeName 1  ,    null )  ,    ImmutableSet . of ( shard 3  )  )  ;", "assertEquals ( dao . getNodeShards ( nodeName 2  ,    null )  ,    ImmutableSet . of ( shard 4  ,    shard 5  )  )  ;", "assertEquals ( dao . getNodeSizes (  )  ,    ImmutableSet . of ( new   NodeSize ( nodeName 1  ,     3  3  )  ,    new   NodeSize ( nodeName 2  ,     (  4  4     +     5  5  )  )  )  )  ;", "dao . dropShards ( plainTableId )  ;", "dao . dropShards ( bucketedTableId )  ;", "assertEquals ( dao . getShards ( plainTableId )  ,    ImmutableList . of (  )  )  ;", "assertEquals ( dao . getShards ( bucketedTableId )  ,    ImmutableList . of (  )  )  ;", "assertEquals ( dao . getNodeSizes (  )  ,    ImmutableSet . of (  )  )  ;", "}", "METHOD_END"], "methodName": ["testNodeShards"], "fileName": "com.facebook.presto.raptor.metadata.TestShardDao"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( dao . getAllNodesInUse (  )  ,    ImmutableSet . of (  )  )  ;", "String   nodeName 1     =    UUID . randomUUID (  )  . toString (  )  ;", "int   nodeId 1     =    dao . insertNode ( nodeName 1  )  ;", "assertEquals ( dao . getAllNodesInUse (  )  ,    ImmutableSet . of ( nodeName 1  )  )  ;", "String   nodeName 2     =    UUID . randomUUID (  )  . toString (  )  ;", "int   nodeId 2     =    dao . insertNode ( nodeName 2  )  ;", "assertEquals ( dao . getAllNodesInUse (  )  ,    ImmutableSet . of ( nodeName 1  ,    nodeName 2  )  )  ;", "long   tableId    =    createTable (  \" test \"  )  ;", "UUID   shardUuid 1     =    UUID . randomUUID (  )  ;", "UUID   shardUuid 2     =    UUID . randomUUID (  )  ;", "UUID   shardUuid 3     =    UUID . randomUUID (  )  ;", "UUID   shardUuid 4     =    UUID . randomUUID (  )  ;", "long   shardId 1     =    dao . insertShard ( shardUuid 1  ,    tableId ,    null ,     0  ,     0  ,     0  ,     0  )  ;", "long   shardId 2     =    dao . insertShard ( shardUuid 2  ,    tableId ,    null ,     0  ,     0  ,     0  ,     0  )  ;", "long   shardId 3     =    dao . insertShard ( shardUuid 3  ,    tableId ,    null ,     0  ,     0  ,     0  ,     0  )  ;", "long   shardId 4     =    dao . insertShard ( shardUuid 4  ,    tableId ,    null ,     0  ,     0  ,     0  ,     0  )  ;", "List < UUID >    shards    =    dao . getShards ( tableId )  ;", "assertEquals ( shards . size (  )  ,     4  )  ;", "assertTrue ( shards . contains ( shardUuid 1  )  )  ;", "assertTrue ( shards . contains ( shardUuid 2  )  )  ;", "assertTrue ( shards . contains ( shardUuid 3  )  )  ;", "assertTrue ( shards . contains ( shardUuid 4  )  )  ;", "assertEquals ( dao . getShardNodes ( tableId )  . size (  )  ,     0  )  ;", "dao . insertShardNode ( shardId 1  ,    nodeId 1  )  ;", "dao . insertShardNode ( shardId 1  ,    nodeId 2  )  ;", "dao . insertShardNode ( shardId 2  ,    nodeId 1  )  ;", "dao . insertShardNode ( shardId 3  ,    nodeId 1  )  ;", "dao . insertShardNode ( shardId 4  ,    nodeId 1  )  ;", "dao . insertShardNode ( shardId 4  ,    nodeId 2  )  ;", "assertEquals ( dao . getShards ( tableId )  ,    shards )  ;", "List < ShardNode >    shardNodes    =    dao . getShardNodes ( tableId )  ;", "assertEquals ( shardNodes . size (  )  ,     6  )  ;", ". assertContainsShardNode ( shardNodes ,    nodeName 1  ,    shardUuid 1  )  ;", ". assertContainsShardNode ( shardNodes ,    nodeName 2  ,    shardUuid 1  )  ;", ". assertContainsShardNode ( shardNodes ,    nodeName 1  ,    shardUuid 2  )  ;", ". assertContainsShardNode ( shardNodes ,    nodeName 1  ,    shardUuid 3  )  ;", ". assertContainsShardNode ( shardNodes ,    nodeName 1  ,    shardUuid 4  )  ;", ". assertContainsShardNode ( shardNodes ,    nodeName 2  ,    shardUuid 4  )  ;", "}", "METHOD_END"], "methodName": ["testShardSelection"], "fileName": "com.facebook.presto.raptor.metadata.TestShardDao"}, {"methodBody": ["METHOD_START", "{", "TupleDomain < RaptorColumnHandle >    tupleDomain    =    withColumnDomains ( ImmutableMap . of ( RaptorColumnHandle . bucketNumberColumnHandle (  \" test \"  )  ,    create ( SortedRangeSet . copyOf ( INTEGER ,    ImmutableList . of ( equal ( INTEGER ,     1 L )  )  )  ,    false )  )  )  ;", "shardPredicate    =     . create ( tupleDomain ,    true )  ;", "assertEquals ( shardPredicate . getPredicate (  )  ,     \"  ( bucket _ number    >  =     ?    OR   bucket _ number   IS   NULL )    AND    ( bucket _ number    <  =     ?    OR   bucket _ number   IS   NULL )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testBucketNumber"], "fileName": "com.facebook.presto.raptor.metadata.TestShardPredicate"}, {"methodBody": ["METHOD_START", "{", "TupleDomain < RaptorColumnHandle >    tupleDomain    =    withColumnDomains ( ImmutableMap . of ( RaptorColumnHandle . bucketNumberColumnHandle (  \" test \"  )  ,    create ( SortedRangeSet . copyOf ( INTEGER ,    ImmutableList . of ( equal ( INTEGER ,     1 L )  )  )  ,    false )  )  )  ;", "shardPredicate    =     . create ( tupleDomain ,    false )  ;", "assertEquals ( shardPredicate . getPredicate (  )  ,     \" false \"  )  ;", "}", "METHOD_END"], "methodName": ["testBucketNumberForNonBucketed"], "fileName": "com.facebook.presto.raptor.metadata.TestShardPredicate"}, {"methodBody": ["METHOD_START", "{", "Slice   uuid 0     =    Slices . utf 8 Slice ( UUID . randomUUID (  )  . toString (  )  )  ;", "Slice   uuid 1     =    Slices . utf 8 Slice ( UUID . randomUUID (  )  . toString (  )  )  ;", "TupleDomain < RaptorColumnHandle >    tupleDomain    =    withColumnDomains ( ImmutableMap . of ( RaptorColumnHandle . shardUuidColumnHandle (  \" test \"  )  ,    create ( SortedRangeSet . copyOf ( VARCHAR ,    ImmutableList . of ( equal ( VARCHAR ,    uuid 0  )  ,    equal ( VARCHAR ,    uuid 1  )  )  )  ,    false )  )  )  ;", "ShardPredicate   shardPredicate    =    ShardPredicate . create ( tupleDomain ,     . bucketed )  ;", "assertEquals ( shardPredicate . getPredicate (  )  ,     \" shard _ uuid    =     ?    OR   shard _ uuid    =     ?  \"  )  ;", "assertEquals ( shardPredicate . getTypes (  )  ,    ImmutableList . of ( JDBCType . VARBINARY ,    JDBCType . VARBINARY )  )  ;", "assertEquals ( ImmutableSet . copyOf ( shardPredicate . getValues (  )  )  ,    ImmutableSet . of ( UuidUtil . uuidStringToBytes ( uuid 0  )  ,    UuidUtil . uuidStringToBytes ( uuid 1  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testDiscreteShardUuidPredicate"], "fileName": "com.facebook.presto.raptor.metadata.TestShardPredicate"}, {"methodBody": ["METHOD_START", "{", "Slice   uuid 0     =    Slices . utf 8 Slice (  \" test 1  \"  )  ;", "Slice   uuid 1     =    Slices . utf 8 Slice (  \" test 2  \"  )  ;", "TupleDomain < RaptorColumnHandle >    tupleDomain    =    withColumnDomains ( ImmutableMap . of ( RaptorColumnHandle . shardUuidColumnHandle (  \" test \"  )  ,    create ( SortedRangeSet . copyOf ( VARCHAR ,    ImmutableList . of ( equal ( VARCHAR ,    uuid 0  )  ,    equal ( VARCHAR ,    uuid 1  )  )  )  ,    false )  )  )  ;", "ShardPredicate   shardPredicate    =    ShardPredicate . create ( tupleDomain ,     . bucketed )  ;", "assertEquals ( shardPredicate . getPredicate (  )  ,     \" true \"  )  ;", "}", "METHOD_END"], "methodName": ["testInvalidUuid"], "fileName": "com.facebook.presto.raptor.metadata.TestShardPredicate"}, {"methodBody": ["METHOD_START", "{", "Slice   uuid 0     =    Slices . utf 8 Slice ( UUID . randomUUID (  )  . toString (  )  )  ;", "TupleDomain < RaptorColumnHandle >    tupleDomain    =    withColumnDomains ( ImmutableMap . of ( RaptorColumnHandle . shardUuidColumnHandle (  \" test \"  )  ,    create ( SortedRangeSet . copyOf ( VARCHAR ,    ImmutableList . of ( greaterThanOrEqual ( VARCHAR ,    uuid 0  )  )  )  ,    false )  )  )  ;", "ShardPredicate   shardPredicate    =    ShardPredicate . create ( tupleDomain ,     . bucketed )  ;", "assertEquals ( shardPredicate . getPredicate (  )  ,     \" true \"  )  ;", "}", "METHOD_END"], "methodName": ["testRangeShardUuidPredicate"], "fileName": "com.facebook.presto.raptor.metadata.TestShardPredicate"}, {"methodBody": ["METHOD_START", "{", "String   uuid    =    UUID . randomUUID (  )  . toString (  )  ;", "TupleDomain < RaptorColumnHandle >    tupleDomain    =    withColumnDomains ( ImmutableMap . of ( RaptorColumnHandle . shardUuidColumnHandle (  \" test \"  )  ,    singleValue ( VARCHAR ,    Slices . utf 8 Slice ( uuid )  )  )  )  ;", "ShardPredicate   shardPredicate    =    ShardPredicate . create ( tupleDomain ,     . bucketed )  ;", "assertEquals ( shardPredicate . getPredicate (  )  ,     \" shard _ uuid    =     ?  \"  )  ;", "assertEquals ( shardPredicate . getTypes (  )  ,    ImmutableList . of ( JDBCType . VARBINARY )  )  ;", "assertEquals ( shardPredicate . getValues (  )  ,    ImmutableList . of ( UuidUtil . uuidStringToBytes ( Slices . utf 8 Slice ( uuid )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSimpleShardUuidPredicate"], "fileName": "com.facebook.presto.raptor.metadata.TestShardPredicate"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "com.facebook.presto.raptor.metadata.ViewResult"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.raptor.metadata.ViewResult"}, {"methodBody": ["METHOD_START", "{", "return   securitySystem ;", "}", "METHOD_END"], "methodName": ["getSecuritySystem"], "fileName": "com.facebook.presto.raptor.security.RaptorSecurityConfig"}, {"methodBody": ["METHOD_START", "{", "this . securitySystem    =    securitySystem ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setSecuritySystem"], "fileName": "com.facebook.presto.raptor.security.RaptorSecurityConfig"}, {"methodBody": ["METHOD_START", "{", "install ( ConditionalModule . installModuleIf ( RaptorSecurityConfig . class ,     (    security )     -  >    name . equalsIgnoreCase ( security . getSecuritySystem (  )  )  ,    module )  )  ;", "}", "METHOD_END"], "methodName": ["bindSecurityModule"], "fileName": "com.facebook.presto.raptor.security.RaptorSecurityModule"}, {"methodBody": ["METHOD_START", "{", "return   testSessionBuilder (  )  . setCatalog ( queryRunner . getDefaultSession (  )  . getCatalog (  )  . get (  )  )  . setSchema ( queryRunner . getDefaultSession (  )  . getSchema (  )  . get (  )  )  . setIdentity ( new   Identity ( user ,    Optional . empty (  )  )  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["getSession"], "fileName": "com.facebook.presto.raptor.security.TestRaptorFileBasedSecurity"}, {"methodBody": ["METHOD_START", "{", "String   path    =    this . getClass (  )  . getResource (  \" security . json \"  )  . getPath (  )  ;", "queryRunner    =    RaptorQueryRunner . createRaptorQueryRunner ( ImmutableMap . of (  )  ,    true ,    false ,    ImmutableMap . of (  \" security . config - file \"  ,    path ,     \"  \"  ,     \" file \"  )  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.raptor.security.TestRaptorFileBasedSecurity"}, {"methodBody": ["METHOD_START", "{", "queryRunner . close (  )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.raptor.security.TestRaptorFileBasedSecurity"}, {"methodBody": ["METHOD_START", "{", "Session   admin    =    getSession (  \" user \"  )  ;", "queryRunner . exte ( admin ,     \" SELECT    *    FROM   orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testAdminCanRead"], "fileName": "com.facebook.presto.raptor.security.TestRaptorFileBasedSecurity"}, {"methodBody": ["METHOD_START", "{", "Session   bob    =    getSession (  \" bob \"  )  ;", "queryRunner . exte ( bob ,     \" SELECT    *    FROM   orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testNonAdminCannotRead"], "fileName": "com.facebook.presto.raptor.security.TestRaptorFileBasedSecurity"}, {"methodBody": ["METHOD_START", "{", "queryRunner    =    RaptorQueryRunner . createRaptorQueryRunner ( ImmutableMap . of (  )  ,    false ,    false ,    ImmutableMap . of (  \" raptor . security \"  ,     \" read - only \"  )  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.raptor.security.TestRaptorReadOnlySecurity"}, {"methodBody": ["METHOD_START", "{", "queryRunner . close (  )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.raptor.security.TestRaptorReadOnlySecurity"}, {"methodBody": ["METHOD_START", "{", "queryRunner . execute (  \" CREATE   TABLE   test _ create    ( a   bigint ,    b   double ,    c   varchar )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testCannotWrite"], "fileName": "com.facebook.presto.raptor.security.TestRaptorReadOnlySecurity"}, {"methodBody": ["METHOD_START", "{", "ConfigAssertions . assertRecordedDefaults ( ConfigAssertions . recordDefaults ( RaptorSecurityConfig . class )  . setSecuritySystem (  \" none \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testDefaults"], "fileName": "com.facebook.presto.raptor.security.TestRaptorSecurityConfig"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    properties    =    new   Builder < String ,    String >  (  )  . put (  \" raptor . security \"  ,     \" read - only \"  )  . build (  )  ;", "expected    =    new    (  )  . setSecuritySystem (  \" read - only \"  )  ;", "ConfigAssertions . assertFullMapping ( properties ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testExplicitPropertyMappings"], "fileName": "com.facebook.presto.raptor.security.TestRaptorSecurityConfig"}, {"methodBody": ["METHOD_START", "{", "DataSize   rate    =    ShardRecoveryManager . dataRate ( size ,    duration )  . convertToMostSuccinctDataSize (  )  ;", "copyToBackupBytesPerSecond . add ( Math . round ( rate . toBytes (  )  )  )  ;", "copyTohardSizeBytes . add ( size . toBytes (  )  )  ;", "copyToBackupTimeInMilliSeconds . add ( duration . toMillis (  )  )  ;", "}", "METHOD_END"], "methodName": ["addCopyShardDataRate"], "fileName": "com.facebook.presto.raptor.storage.BackupStats"}, {"methodBody": ["METHOD_START", "{", "queuedTimeMilliSeconds . add ( queuedTime . toMillis (  )  )  ;", "}", "METHOD_END"], "methodName": ["addQueuedTime"], "fileName": "com.facebook.presto.raptor.storage.BackupStats"}, {"methodBody": ["METHOD_START", "{", "return   backupCorruption ;", "}", "METHOD_END"], "methodName": ["getBackupCorruption"], "fileName": "com.facebook.presto.raptor.storage.BackupStats"}, {"methodBody": ["METHOD_START", "{", "return   backupFailure ;", "}", "METHOD_END"], "methodName": ["getBackupFailure"], "fileName": "com.facebook.presto.raptor.storage.BackupStats"}, {"methodBody": ["METHOD_START", "{", "return   backupSuccess ;", "}", "METHOD_END"], "methodName": ["getBackupSuccess"], "fileName": "com.facebook.presto.raptor.storage.BackupStats"}, {"methodBody": ["METHOD_START", "{", "return   copyToBackupBytesPerSecond ;", "}", "METHOD_END"], "methodName": ["getCopyToBackupBytesPerSecond"], "fileName": "com.facebook.presto.raptor.storage.BackupStats"}, {"methodBody": ["METHOD_START", "{", "return   copyToBackupShardSizeBytes ;", "}", "METHOD_END"], "methodName": ["getCopyToBackupShardSizeBytes"], "fileName": "com.facebook.presto.raptor.storage.BackupStats"}, {"methodBody": ["METHOD_START", "{", "return   copyToBackupTimeInMilliSeconds ;", "}", "METHOD_END"], "methodName": ["getCopyToBackupTimeInMilliSeconds"], "fileName": "com.facebook.presto.raptor.storage.BackupStats"}, {"methodBody": ["METHOD_START", "{", "return   queuedTimeMilliSeconds ;", "}", "METHOD_END"], "methodName": ["getQueuedTimeMilliSeconds"], "fileName": "com.facebook.presto.raptor.storage.BackupStats"}, {"methodBody": ["METHOD_START", "{", "backupCorruption . update (  1  )  ;", "}", "METHOD_END"], "methodName": ["incrementBackupCorruption"], "fileName": "com.facebook.presto.raptor.storage.BackupStats"}, {"methodBody": ["METHOD_START", "{", "backupFailure . update (  1  )  ;", "}", "METHOD_END"], "methodName": ["incrementBackupFailure"], "fileName": "com.facebook.presto.raptor.storage.BackupStats"}, {"methodBody": ["METHOD_START", "{", "backupSuccess . update (  1  )  ;", "}", "METHOD_END"], "methodName": ["incrementBackupSuccess"], "fileName": "com.facebook.presto.raptor.storage.BackupStats"}, {"methodBody": ["METHOD_START", "{", "BucketBalancer . log . info (  \" Bucket   balancer   started .    Computing   assignments .  .  .  \"  )  ;", "Multimap < String ,    BucketBalancer . BucketAssignment >    sourceToAssignmentChanges    =    BucketBalancer . computeAssignmentChanges ( fetchClusterState (  )  )  ;", "BucketBalancer . log . info (  \" Moving   buckets .  .  .  \"  )  ;", "int   moves    =    updateAssignments ( sourceToAssignmentChanges )  ;", "BucketBalancer . log . info (  \" Bucket   balancing   finished .    Moved    % s   buckets .  \"  ,    moves )  ;", "return   moves ;", "}", "METHOD_END"], "methodName": ["balance"], "fileName": "com.facebook.presto.raptor.storage.BucketBalancer"}, {"methodBody": ["METHOD_START", "{", "Multimap < String ,    BucketBalancer . BucketAssignment >    sourceToAllocationChanges    =    HashMultimap . create (  )  ;", "Map < String ,    Long >    allocationBytes    =    new   HashMap <  >  ( clusterState . getAssignedBytes (  )  )  ;", "Set < String >    activeNodes    =    clusterState . getActiveNodes (  )  ;", "for    ( Distribution   distribution    :    clusterState . getDistributionAssignments (  )  . keySet (  )  )     {", "Multiset < String >    allocationCounts    =    HashMultiset . create (  )  ;", "Collection < BucketBalancer . BucketAssignment >    distributionAssignments    =    clusterState . getDistributionAssignments (  )  . get ( distribution )  ;", "distributionAssignments . stream (  )  . map ( BucketBalancer . BucketAssignment :  : getNodeIdentifier )  . forEach ( allocationCounts :  : add )  ;", "int   currentMin    =    allocationBytes . keySet (  )  . stream (  )  . mapToInt ( allocationCounts :  : count )  . min (  )  . getAsInt (  )  ;", "int   currentMax    =    allocationBytes . keySet (  )  . stream (  )  . mapToInt ( allocationCounts :  : count )  . max (  )  . getAsInt (  )  ;", "int   numBuckets    =    distributionAssignments . size (  )  ;", "int   targetMin    =     (  ( int )     ( Math . floor (  (  ( numBuckets    *     1  .  0  )     /     ( clusterState . getActiveNodes (  )  . size (  )  )  )  )  )  )  ;", "int   targetMax    =     (  ( int )     ( Math . ceil (  (  ( numBuckets    *     1  .  0  )     /     ( clusterState . getActiveNodes (  )  . size (  )  )  )  )  )  )  ;", "BucketBalancer . log . info (  \" Distribution    % s :    Current   bucket   skew :    min    % s ,    max    % s .    Target   bucket   skew :    min    % s ,    max    % s \"  ,    distribution . getId (  )  ,    currentMin ,    currentMax ,    targetMin ,    targetMax )  ;", "for    ( String   source    :    ImmutableSet . copyOf ( allocationCounts )  )     {", "List < BucketBalancer . BucketAssignment >    existingAssignments    =    distributionAssignments . stream (  )  . filter (  (    assignment )     -  >    assignment . getNodeIdentifier (  )  . equals ( source )  )  . collect ( Collectors . toList (  )  )  ;", "for    ( BucketBalancer . BucketAssignment   existingAssignment    :    existingAssignments )     {", "if    (  ( activeNodes . contains ( source )  )     &  &     (  ( allocationCounts . count ( source )  )     <  =    targetMin )  )     {", "break ;", "}", "String   target    =    activeNodes . stream (  )  . filter (  (    candidate )     -  >     (  !  ( candidate . equals ( source )  )  )     &  &     (  ( allocationCounts . count ( candidate )  )     <    targetMax )  )  . sorted ( Comparator . comparingInt ( allocationCounts :  : count )  )  . min ( Comparator . comparingDouble ( allocationBytes :  : get )  )  . orElseThrow (  (  )     -  >    new   VerifyException (  \" unable   to   find   target   for   rebalancing \"  )  )  ;", "long   bucketSize    =    clusterState . getDistributionBucketSize (  )  . get ( distribution )  ;", "if    (  ( activeNodes . contains ( source )  )     &  &     (  (  ( allocationCounts . count ( source )  )     =  =    targetMax )     &  &     (  ( allocationCounts . count ( target )  )     =  =    targetMin )  )  )     {", "break ;", "}", "allocationCounts . remove ( source )  ;", "allocationCounts . add ( target )  ;", "allocationBytes . compute ( source ,     (    k ,    v )     -  >    v    -    bucketSize )  ;", "allocationBytes . compute ( target ,     (    k ,    v )     -  >    v    +    bucketSize )  ;", "sourceToAllocationChanges . put ( existingAssignment . getNodeIdentifier (  )  ,    new   BucketBalancer . BucketAssignment ( existingAssignment . getDistributionId (  )  ,    existingAssignment . getBucketNumber (  )  ,    target )  )  ;", "}", "}", "}", "return   sourceToAllocationChanges ;", "}", "METHOD_END"], "methodName": ["computeAssignmentChanges"], "fileName": "com.facebook.presto.raptor.storage.BucketBalancer"}, {"methodBody": ["METHOD_START", "{", "Set < String >    activeNodes    =    nodeSupplier . getWorkerNodes (  )  . stream (  )  . map ( Node :  : getNodeIdentifier )  . collect ( Collectors . toSet (  )  )  ;", "Map < String ,    Long >    assignedNodeSize    =    new   HashMap <  >  ( activeNodes . stream (  )  . collect ( Collectors . toMap (  (    node )     -  >    node ,     (    node )     -  >     0 L )  )  )  ;", "Builder < Distribution ,     . BucketAssignment >    distributionAssignments    =    ImmutableMultimap . builder (  )  ;", "ImmutableMap . Builder < Distribution ,    Long >    distributionBucketSize    =    ImmutableMap . builder (  )  ;", "for    ( Distribution   distribution    :    shardManager . getDistributions (  )  )     {", "long   distributionSize    =    shardManager . getDistributionSizeInBytes ( distribution . getId (  )  )  ;", "long   bucketSize    =     (  ( long )     (  1  .  0     *    distributionSize )  )     /     ( distribution . getBucketCount (  )  )  ;", "distributionBucketSize . put ( distribution ,    bucketSize )  ;", "for    ( BucketNode   bucketNode    :    shardManager . getBucketNodes ( distribution . getId (  )  )  )     {", "String   node    =    bucketNode . getNodeIdentifier (  )  ;", "distributionAssignments . put ( distribution ,    new    . BucketAssignment ( distribution . getId (  )  ,    bucketNode . getBucketNumber (  )  ,    node )  )  ;", "assignedNodeSize . merge ( node ,    bucketSize ,    Math :  : addExact )  ;", "}", "}", "return   new    . ClusterState ( activeNodes ,    assignedNodeSize ,    distributionAssignments . build (  )  ,    distributionBucketSize . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["fetchClusterState"], "fileName": "com.facebook.presto.raptor.storage.BucketBalancer"}, {"methodBody": ["METHOD_START", "{", "return   bucketsBalanced ;", "}", "METHOD_END"], "methodName": ["getBucketsBalanced"], "fileName": "com.facebook.presto.raptor.storage.BucketBalancer"}, {"methodBody": ["METHOD_START", "{", "return   jobErrors ;", "}", "METHOD_END"], "methodName": ["getJobErrors"], "fileName": "com.facebook.presto.raptor.storage.BucketBalancer"}, {"methodBody": ["METHOD_START", "{", "try    {", "balance (  )  ;", "}    catch    ( Throwable   t )     {", ". log . error ( t ,     \" Error   balancing   buckets \"  )  ;", "jobErrors . update (  1  )  ;", "}", "}", "METHOD_END"], "methodName": ["runBalanceJob"], "fileName": "com.facebook.presto.raptor.storage.BucketBalancer"}, {"methodBody": ["METHOD_START", "{", "executor . shutdownNow (  )  ;", "}", "METHOD_END"], "methodName": ["shutdown"], "fileName": "com.facebook.presto.raptor.storage.BucketBalancer"}, {"methodBody": ["METHOD_START", "{", "if    (  (  (  ( enabled )     &  &     ( backupAvailable )  )     &  &     ( coordinator )  )     &  &     (  !  ( started . getAndSet ( true )  )  )  )     {", "executor . scheduleWithFixedDelay ( this :  : runJob ,    interval . toMillis (  )  ,    interval . toMillis (  )  ,    TimeUnit . MILLISECONDS )  ;", "}", "}", "METHOD_END"], "methodName": ["start"], "fileName": "com.facebook.presto.raptor.storage.BucketBalancer"}, {"methodBody": ["METHOD_START", "{", "executor . submit ( this :  : runBalanceJob )  ;", "}", "METHOD_END"], "methodName": ["startBalanceJob"], "fileName": "com.facebook.presto.raptor.storage.BucketBalancer"}, {"methodBody": ["METHOD_START", "{", "List < String >    sourceNodes    =    sourceToAllocationChanges . asMap (  )  . entrySet (  )  . stream (  )  . sorted (  (    a ,    b )     -  >    Integer . compare ( b . getValue (  )  . size (  )  ,    a . getValue (  )  . size (  )  )  )  . map ( Map . Entry :  : getKey )  . collect ( Collectors . toList (  )  )  ;", "int   moves    =     0  ;", "for    ( String   source    :    sourceNodes )     {", "for    (  . BucketAssignment   reassignment    :    sourceToAllocationChanges . get ( source )  )     {", "shardManager . updateBucketAssignment ( reassignment . getDistributionId (  )  ,    reassignment . getBucketNumber (  )  ,    reassignment . getNodeIdentifier (  )  )  ;", "bucketsBalanced . update (  1  )  ;", "moves +  +  ;", ". log . info (  \" Distribution    % s :    Moved   bucket    % s   from    % s   to    % s \"  ,    reassignment . getDistributionId (  )  ,    reassignment . getBucketNumber (  )  ,    source ,    reassignment . getNodeIdentifier (  )  )  ;", "}", "}", "return   moves ;", "}", "METHOD_END"], "methodName": ["updateAssignments"], "fileName": "com.facebook.presto.raptor.storage.BucketBalancer"}, {"methodBody": ["METHOD_START", "{", "return   balancerInterval ;", "}", "METHOD_END"], "methodName": ["getBalancerInterval"], "fileName": "com.facebook.presto.raptor.storage.BucketBalancerConfig"}, {"methodBody": ["METHOD_START", "{", "return   balancerEnabled ;", "}", "METHOD_END"], "methodName": ["isBalancerEnabled"], "fileName": "com.facebook.presto.raptor.storage.BucketBalancerConfig"}, {"methodBody": ["METHOD_START", "{", "this . balancerEnabled    =    balancerEnabled ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setBalancerEnabled"], "fileName": "com.facebook.presto.raptor.storage.BucketBalancerConfig"}, {"methodBody": ["METHOD_START", "{", "this . balancerInterval    =    balancerInterval ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setBalancerInterval"], "fileName": "com.facebook.presto.raptor.storage.BucketBalancerConfig"}, {"methodBody": ["METHOD_START", "{", "if    ( type . equals ( BOOLEAN )  )     {", "return   JDBCType . BOOLEAN ;", "}", "if    (  ( type . equals ( BIGINT )  )     |  |     ( type . equals ( TIMESTAMP )  )  )     {", "return   JDBCType . BIGINT ;", "}", "if    ( type . equals ( INTEGER )  )     {", "return   JDBCType . INTEGER ;", "}", "if    ( type . equals ( DOUBLE )  )     {", "return   JDBCType . DOUBLE ;", "}", "if    ( type . equals ( DATE )  )     {", "return   JDBCType . INTEGER ;", "}", "if    ( type   instanceof   VarcharType )     {", "return   JDBCType . VARBINARY ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["jdbcType"], "fileName": "com.facebook.presto.raptor.storage.ColumnIndexStatsUtils"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( dir . exists (  )  )  )     {", "return ;", "}", "[  ]    files    =    dir . lists (  )  ;", "if    ( files    =  =    null )     {", "throw   new   IOException (  (  \" Failed   to   list   directory :     \"     +    dir )  )  ;", "}", "for    (    file    :    files )     {", "s . deleteIfExists ( file . toPath (  )  )  ;", "}", "s . deleteIfExists ( dir . toPath (  )  )  ;", "}", "METHOD_END"], "methodName": ["deleteDirectory"], "fileName": "com.facebook.presto.raptor.storage.FileStorageService"}, {"methodBody": ["METHOD_START", "{", "List < File >    files    =    FileStorageService . listFiles ( baseStagingDir ,    null )  ;", "if    (  !  ( files . isEmpty (  )  )  )     {", "new   Thread (  (  )     -  >     {", "for    ( File   file    :    files )     {", "try    {", "Files . deleteIfExists ( file . toPath (  )  )  ;", "}    catch    ( IOException   e )     {", "FileStorageService . log . warn ( e ,     \" Failed   to   delete   file :     % s \"  ,    file . getAbsolutePath (  )  )  ;", "}", "}", "}  ,     \" background - staging - delete \"  )  . start (  )  ;", "}", "}", "METHOD_END"], "methodName": ["deleteStagingFilesAsync"], "fileName": "com.facebook.presto.raptor.storage.FileStorageService"}, {"methodBody": ["METHOD_START", "{", "String   uuid    =    shardUuid . toString (  )  . toLowerCase ( Locale . ENGLISH )  ;", "return   base . toPath (  )  . resolve ( uuid . substring (  0  ,     2  )  )  . resolve ( uuid . substring (  2  ,     4  )  )  . resolve (  ( uuid    +     (  . FILE _ EXTENSION )  )  )  . toFile (  )  ;", "}", "METHOD_END"], "methodName": ["getFileSystemPath"], "fileName": "com.facebook.presto.raptor.storage.FileStorageService"}, {"methodBody": ["METHOD_START", "{", "return    ( file . isDirectory (  )  )     &  &     ( FileStorageService . HEX _ DIRECTORY . matcher ( file . getName (  )  )  . matches (  )  )  ;", "}", "METHOD_END"], "methodName": ["isHexDirectory"], "fileName": "com.facebook.presto.raptor.storage.FileStorageService"}, {"methodBody": ["METHOD_START", "{", "File [  ]    files    =    dir . listFiles ( filter )  ;", "if    ( files    =  =    null )     {", "return   ImmutableList . of (  )  ;", "}", "return   ImmutableList . copyOf ( files )  ;", "}", "METHOD_END"], "methodName": ["listFiles"], "fileName": "com.facebook.presto.raptor.storage.FileStorageService"}, {"methodBody": ["METHOD_START", "{", "FileStorageService . deleteDirectory ( baseStagingDir )  ;", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "com.facebook.presto.raptor.storage.FileStorageService"}, {"methodBody": ["METHOD_START", "{", "if    ( name . endsWith ( FileStorageService . FILE _ EXTENSION )  )     {", "name    =    name . substring (  0  ,     (  ( name . length (  )  )     -     ( FileStorageService . FILE _ EXTENSION . length (  )  )  )  )  ;", "return   FileStorageService . uuidFromString ( name )  ;", "}", "return   Optional . empty (  )  ;", "}", "METHOD_END"], "methodName": ["uuidFromFileName"], "fileName": "com.facebook.presto.raptor.storage.FileStorageService"}, {"methodBody": ["METHOD_START", "{", "try    {", "turn   Optional . of ( UUID . fromString ( value )  )  ;", "}    catch    ( IllegalArgumentException   e )     {", "turn   Optional . empty (  )  ;", "}", "}", "METHOD_END"], "methodName": ["uuidFromString"], "fileName": "com.facebook.presto.raptor.storage.FileStorageService"}, {"methodBody": ["METHOD_START", "{", "return   ImmutableList . copyOf ( shards )  ;", "}", "METHOD_END"], "methodName": ["getShards"], "fileName": "com.facebook.presto.raptor.storage.InMemoryShardRecorder"}, {"methodBody": ["METHOD_START", "{", "return   columnTypes ;", "}", "METHOD_END"], "methodName": ["getColumnTypes"], "fileName": "com.facebook.presto.raptor.storage.OrcFileMetadata"}, {"methodBody": ["METHOD_START", "{", "return   new   Path ( input . toURI (  )  )  ;", "}", "METHOD_END"], "methodName": ["path"], "fileName": "com.facebook.presto.raptor.storage.OrcFileRewriter"}, {"methodBody": ["METHOD_START", "{", "try    ( ThreadContextClassLoader   ignored    =    new   ThreadContextClassLoader ( FileSystem . class . getClassLoader (  )  )  ; FileSystem   fileSystem    =    new   SyncingFileSystem ( OrcFileRewriter . CONFIGURATION )  )     {", "Reader   reader    =    createReader ( fileSystem ,    OrcFileRewriter . path ( input )  )  ;", "if    (  ( reader . getNumberOfRows (  )  )     <     ( rowsToDelete . length (  )  )  )     {", "throw   new   IOException (  \" File   has   fewer   rows   than   deletion   vector \"  )  ;", "}", "int   deleteRowCount    =    rowsToDelete . cardinality (  )  ;", "if    (  ( reader . getNumberOfRows (  )  )     =  =    deleteRowCount )     {", "return   new   OrcFileRewriter . OrcFileInfo (  0  ,     0  )  ;", "}", "if    (  ( reader . getNumberOfRows (  )  )     >  =     ( Integer . MAX _ VALUE )  )     {", "throw   new   IOException (  \" File   has   too   many   rows \"  )  ;", "}", "int   inputRowCount    =    Math . toIntExact ( reader . getNumberOfRows (  )  )  ;", "WriterOptions   writerOptions    =    new   OrcWriterOptions ( OrcFileRewriter . CONFIGURATION )  . memory ( new   NullMemoryManager ( OrcFileRewriter . CONFIGURATION )  )  . fileSystem ( fileSystem )  . compress ( reader . getCompression (  )  )  . inspector ( reader . getObjectInspector (  )  )  ;", "long   start    =    System . nanoTime (  )  ;", "try    ( Closer < RecordReader ,    IOException >    recordReader    =    Closer . closer ( reader . rows (  )  ,    RecordReader :  : close )  ; Closer < Writer ,    IOException >    writer    =    Closer . closer ( createWriter ( OrcFileRewriter . path ( output )  ,    writerOptions )  ,    Writer :  : close )  )     {", "if    ( reader . hasMetadataValue ( OrcFileMetadata . KEY )  )     {", "ByteBuffer   orcFileMetadata    =    reader . getMetadataValue ( OrcFileMetadata . KEY )  ;", "writer . get (  )  . addUserMetadata ( OrcFileMetadata . KEY ,    orcFileMetadata )  ;", "}", "OrcFileRewriter . OrcFileInfo   fileInfo    =    OrcFileRewriter . rewrite ( recordReader . get (  )  ,    writer . get (  )  ,    rowsToDelete ,    inputRowCount )  ;", "OrcFileRewriter . log . debug (  \" Rewrote   file    % s   in    % s    ( input   rows :     % s ,    output   rows :     % s )  \"  ,    input . getName (  )  ,    nanosSince ( start )  ,    inputRowCount ,     ( inputRowCount    -    deleteRowCount )  )  ;", "return   fileInfo ;", "}", "}", "}", "METHOD_END"], "methodName": ["rewrite"], "fileName": "com.facebook.presto.raptor.storage.OrcFileRewriter"}, {"methodBody": ["METHOD_START", "{", "Object   object    =    null ;", "int   row    =     0  ;", "long   rowCount    =     0  ;", "long   uncompressedSize    =     0  ;", "row    =    rowsToDelete . nextClearBit ( row )  ;", "if    ( row    <    inputRowCount )     {", "reader . seekToRow ( row )  ;", "}", "while    ( row    <    inputRowCount )     {", "if    ( Thread . currentThread (  )  . isInterrupted (  )  )     {", "throw   new   InterruptedIOException (  )  ;", "}", "if    (  ( reader . getRowNumber (  )  )     <    row )     {", "reader . next ( object )  ;", "continue ;", "}", "object    =    reader . next ( object )  ;", "writer . addRow ( object )  ;", "rowCount +  +  ;", "uncompressedSize    +  =     . uncompressedSize ( object )  ;", "row    =    rowsToDelete . nextClearBit (  ( row    +     1  )  )  ;", "}", "return   new    . OrcFileInfo ( rowCount ,    uncompressedSize )  ;", "}", "METHOD_END"], "methodName": ["rewrite"], "fileName": "com.facebook.presto.raptor.storage.OrcFileRewriter"}, {"methodBody": ["METHOD_START", "{", "if    ( object   instanceof   OrcStruct )     {", "OrcStruct   struct    =     (  ( OrcStruct )     ( object )  )  ;", "int   size    =     0  ;", "for    ( int   i    =     0  ;    i    <     ( struct . getNumFields (  )  )  ;    i +  +  )     {", "size    +  =     . uncompressedSize ( getFieldValue ( struct ,    i )  )  ;", "}", "return   size ;", "}", "if    (  ( object    =  =    null )     |  |     ( object   instanceof   BooleanWritable )  )     {", "return   SizeOf . SIZE _ OF _ BYTE ;", "}", "if    ( object   instanceof   LongWritable )     {", "return   SizeOf . SIZE _ OF _ LONG ;", "}", "if    ( object   instanceof   DoubleWritable )     {", "return   SizeOf . SIZE _ OF _ DOUBLE ;", "}", "if    ( object   instanceof   Text )     {", "return    (  ( Text )     ( object )  )  . getLength (  )  ;", "}", "if    ( object   instanceof   BytesWritable )     {", "return    (  ( BytesWritable )     ( object )  )  . getLength (  )  ;", "}", "if    ( object   instanceof   List <  ?  >  )     {", "int   size    =     0  ;", "for    ( Object   element    :     (  ( Iterable <  ?  >  )     ( object )  )  )     {", "size    +  =     . uncompressedSize ( element )  ;", "}", "return   size ;", "}", "if    ( object   instanceof   Map <  ?  ,     ?  >  )     {", "int   size    =     0  ;", "for    ( Map . Entry <  ?  ,     ?  >    entry    :     (  ( Map <  ?  ,     ?  >  )     ( object )  )  . entrySet (  )  )     {", "size    +  =     . uncompressedSize ( entry . getKey (  )  )  ;", "size    +  =     . uncompressedSize ( entry . getValue (  )  )  ;", "}", "return   size ;", "}", "throw   new   IOException (  (  \" Unhandled   ORC   object :     \"     +     ( object . getClass (  )  . getName (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["uncompressedSize"], "fileName": "com.facebook.presto.raptor.storage.OrcFileRewriter"}, {"methodBody": ["METHOD_START", "{", "for    ( Pp :    p )     {", "for    ( int   position    =     0  ;    position    <     ( pgetPositionCount (  )  )  ;    position +  +  )     {", "appendRow ( Row . extractRow ( p   position ,    columnTypes )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["appendPages"], "fileName": "com.facebook.presto.raptor.storage.OrcFileWriter"}, {"methodBody": ["METHOD_START", "{", "checkArgument (  (  ( pageIndexes . length )     =  =     ( positionIndexes . length )  )  ,     \" pageIndexes   and   positionIndexes   do   not   match \"  )  ;", "for    ( int   i    =     0  ;    i    <     ( pageIndexes . length )  ;    i +  +  )     {", "Page   page    =    inputPages . get ( pageIndexes [ i ]  )  ;", "appendRow ( Row . extractRow ( page ,    positionIndexes [ i ]  ,    columnTypes )  )  ;", "}", "}", "METHOD_END"], "methodName": ["appendPages"], "fileName": "com.facebook.presto.raptor.storage.OrcFileWriter"}, {"methodBody": ["METHOD_START", "{", "List < Object >    columns    =    row . getColumns (  )  ;", "checkArgument (  (  ( columns . size (  )  )     =  =     ( columnTypes . size (  )  )  )  )  ;", "for    ( int   channel    =     0  ;    channel    <     ( columns . size (  )  )  ;    channel +  +  )     {", "tableInspector . setStructFieldData ( orcRow ,    structFields . get ( channel )  ,    columns . get ( channel )  )  ;", "}", "try    {", "record . write ( serializer . serialize ( orcRow ,    tableInspector )  )  ;", "}    catch    ( IOException   e )     {", "throw   new   PrestoException ( RaptorErrorCode . RAPTOR _ ERROR ,     \" Failed   to   write   record \"  ,    e )  ;", "}", "( rowCount )  +  +  ;", "uncompressedSize    +  =    row . getSizeInBytes (  )  ;", "}", "METHOD_END"], "methodName": ["appendRow"], "fileName": "com.facebook.presto.raptor.storage.OrcFileWriter"}, {"methodBody": ["METHOD_START", "{", "return   new   OrcFile . WriterCallback (  )     {", "@ Override", "public   void   preStripeWrite ( OrcFile . WriterContext   context )     {", "}", "@ Override", "public   void   preFooterWrite ( OrcFile . WriterContext   context )     {", "Builder < Long ,    TypeSignature >    columnTypesMap    =    ImmutableMap . builder (  )  ;", "for    ( int   i    =     0  ;    i    <     ( columnIds . size (  )  )  ;    i +  +  )     {", "columnTypesMap . put ( columnIds . get ( i )  ,    columnTypes . get ( i )  . getTypeSignature (  )  )  ;", "}", "byte [  ]    bytes    =     . METADATA _ CODEC . toJsonBytes ( new   OrcFileMetadata ( columnTypesMap . build (  )  )  )  ;", "context . getWriter (  )  . addUserMetadata ( OrcFileMetadata . KEY ,    ByteBuffer . wrap ( bytes )  )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["createFileMetadataCallback"], "fileName": "com.facebook.presto.raptor.storage.OrcFileWriter"}, {"methodBody": ["METHOD_START", "{", "try    ( ThreadContextClassLoader   ignored    =    new   ThreadContextClassLoader ( FileSystem . class . getClassLoader (  )  )  ; FileSystem   fileSystem    =    new   SyncingFileSystem ( OrcFileWriter . CONFIGURATION )  )     {", "OrcFile . WriterOptions   options    =    new   OrcWriterOptions ( OrcFileWriter . CONFIGURATION )  . memory ( new   NullMemoryManager ( OrcFileWriter . CONFIGURATION )  )  . fileSystem ( fileSystem )  . compress ( SNAPPY )  ;", "if    ( writeMetadata )     {", "options . callback ( OrcFileWriter . createFileMetadataCallback ( columnIds ,    columnTypes )  )  ;", "}", "return   OrcFileWriter . WRITER _ CONSTRUCTOR . newInstance ( target ,    options )  ;", "}    catch    ( ReflectiveOperationException    |    IOException   e )     {", "throw   new   PrestoException ( RaptorErrorCode . RAPTOR _ ERROR ,     \" Failed   to   create   writer \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["createRecordWriter"], "fileName": "com.facebook.presto.raptor.storage.OrcFileWriter"}, {"methodBody": ["METHOD_START", "{", "OrcSerde   serde    =    new   OrcSerde (  )  ;", "serde . initialize (  . CONFIGURATION ,    properties )  ;", "return   serde ;", "}", "METHOD_END"], "methodName": ["createSerializer"], "fileName": "com.facebook.presto.raptor.storage.OrcFileWriter"}, {"methodBody": ["METHOD_START", "{", "Category   category    =    typeInfo . getCategory (  )  ;", "if    ( category    =  =     ( PRIMITIVE )  )     {", "return   getPrimitiveJavaObjectInspector ( getPrimitiveTypeInfo ( typeInfo . getTypeName (  )  )  )  ;", "}", "if    ( category    =  =     ( LIST )  )     {", "ListTypeInfo   listTypeInfo    =     (  ( ListTypeInfo )     ( typeInfo )  )  ;", "return   getStandardListObjectInspector ( OrcFileWriter . getJavaObjectInspector ( listTypeInfo . getListElementTypeInfo (  )  )  )  ;", "}", "if    ( category    =  =     ( MAP )  )     {", "MapTypeInfo   mapTypeInfo    =     (  ( MapTypeInfo )     ( typeInfo )  )  ;", "return   getStandardMapObjectInspector ( OrcFileWriter . getJavaObjectInspector ( mapTypeInfo . getMapKeyTypeInfo (  )  )  ,    OrcFileWriter . getJavaObjectInspector ( mapTypeInfo . getMapValueTypeInfo (  )  )  )  ;", "}", "throw   new   spi . PrestoException ( GENERIC _ INTERNAL _ ERROR ,     (  \" Unhandled   storage   type :     \"     +    category )  )  ;", "}", "METHOD_END"], "methodName": ["getJavaObjectInspector"], "fileName": "com.facebook.presto.raptor.storage.OrcFileWriter"}, {"methodBody": ["METHOD_START", "{", "return   types . stream (  )  . map ( StorageType :  : getHiveTypeName )  . map ( TypeInfoUtils :  : getTypeInfoFromTypeString )  . map ( OrcFileWriter :  : getJavaObjectInspector )  . collect ( Collectors . toList (  )  )  ;", "}", "METHOD_END"], "methodName": ["getJavaObjectInspectors"], "fileName": "com.facebook.presto.raptor.storage.OrcFileWriter"}, {"methodBody": ["METHOD_START", "{", "try    {", "String   writerClassName    =     ( OrcOutputFormat . class . getName (  )  )     +     \"  $ OrcRecord \"  ;", "Constructor <  ?    extends   Record >    constructor    =    OrcOutputFormat . class . getClassLoader (  )  . loadClass ( writerClassName )  . asSubclass ( Record . class )  . getDeclaredConstructor ( Path . class ,    Options . class )  ;", "constructor . setAccessible ( true )  ;", "return   constructor ;", "}    catch    ( ReflectiveOperationException   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["getOrcWriterConstructor"], "fileName": "com.facebook.presto.raptor.storage.OrcFileWriter"}, {"methodBody": ["METHOD_START", "{", "return   rowCount ;", "}", "METHOD_END"], "methodName": ["getRowCount"], "fileName": "com.facebook.presto.raptor.storage.OrcFileWriter"}, {"methodBody": ["METHOD_START", "{", "return   uncompressedSize ;", "}", "METHOD_END"], "methodName": ["getUncompressedSize"], "fileName": "com.facebook.presto.raptor.storage.OrcFileWriter"}, {"methodBody": ["METHOD_START", "{", "return    ( new   HashSet <  >  ( items )  . size (  )  )     =  =     ( items . size (  )  )  ;", "}", "METHOD_END"], "methodName": ["isUnique"], "fileName": "com.facebook.presto.raptor.storage.OrcFileWriter"}, {"methodBody": ["METHOD_START", "{", "if    ( type   instanceof   DecimalType )     {", "DecimalType   decimalType    =     (  ( DecimalType )     ( type )  )  ;", "return   StorageType . decimal ( decimalType . getPrecision (  )  ,    decimalType . getScale (  )  )  ;", "}", "Class <  ?  >    javaType    =    type . getJavaType (  )  ;", "if    ( javaType    =  =     ( boolean . class )  )     {", "return   StorageType . BOOLEAN ;", "}", "if    ( javaType    =  =     ( long . class )  )     {", "return   StorageType . LONG ;", "}", "if    ( javaType    =  =     ( double . class )  )     {", "return   StorageType . DOUBLE ;", "}", "if    ( javaType    =  =     ( Slice . class )  )     {", "if    ( type   instanceof   VarcharType )     {", "return   StorageType . STRING ;", "}", "if    ( type . equals ( VARBINARY )  )     {", "return   StorageType . BYTES ;", "}", "}", "if    ( Types . isArrayType ( type )  )     {", "return   StorageType . arrayOf ( OrcFileWriter . toStorageType ( type . getTypeParameters (  )  . get (  0  )  )  )  ;", "}", "if    ( Types . isMapType ( type )  )     {", "return   StorageType . mapOf ( OrcFileWriter . toStorageType ( type . getTypeParameters (  )  . get (  0  )  )  ,    OrcFileWriter . toStorageType ( type . getTypeParameters (  )  . get (  1  )  )  )  ;", "}", "throw   new   spi . PrestoException ( NOT _ SUPPORTED ,     (  \" No   storage   type   for   type :     \"     +    type )  )  ;", "}", "METHOD_END"], "methodName": ["toStorageType"], "fileName": "com.facebook.presto.raptor.storage.OrcFileWriter"}, {"methodBody": ["METHOD_START", "{", "return   columnTypes . stream (  )  . map ( OrcFileWriter :  : toStorageType )  . collect ( Collectors . toList (  )  )  ;", "}", "METHOD_END"], "methodName": ["toStorageTypes"], "fileName": "com.facebook.presto.raptor.storage.OrcFileWriter"}, {"methodBody": ["METHOD_START", "{", "BlockBuilder   builder    =    BIGINT . createFixedSizeBlockBuilder ( count )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "BIGINT . writeLong ( builder ,     ( start    +    i )  )  ;", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["buildSequenceBlock"], "fileName": "com.facebook.presto.raptor.storage.OrcPageSource"}, {"methodBody": ["METHOD_START", "{", "Block   block    =    nativeValueToBlock ( type ,    value )  ;", "return   new   spi . block . RunLengthEncodedBlock ( block ,    MAX _ BATCH _ SIZE )  ;", "}", "METHOD_END"], "methodName": ["buildSingleValueBlock"], "fileName": "com.facebook.presto.raptor.storage.OrcPageSource"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( throwable ,     \" throwable   is   null \"  )  ;", "try    {", "close (  )  ;", "}    catch    ( RuntimeException   e )     {", "if    ( throwable    !  =    e )     {", "throwable . addSupsed ( e )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["closeWithSuppression"], "fileName": "com.facebook.presto.raptor.storage.OrcPageSource"}, {"methodBody": ["METHOD_START", "{", "try    {", "closblclos )  ;", "}    catch    ( IOExction   ignor )     {", "}", "}", "METHOD_END"], "methodName": ["closeQuietly"], "fileName": "com.facebook.presto.raptor.storage.OrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "Builder < Long ,    Integer >    map    =    ImmutableMap . builder (  )  ;", "for    ( int   i    =     0  ;    i    <     ( columnNames . size (  )  )  ;    i +  +  )     {", "map . put ( Long . valueOf ( columnNames . get ( i )  )  ,    i )  ;", "}", "return   map . build (  )  ;", "}", "METHOD_END"], "methodName": ["columnIdIndex"], "fileName": "com.facebook.presto.raptor.storage.OrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "try    ( OrcDataSource   dataSource    =    OrcStorageManager . fileOrcDataSource ( defaultReaderAttributes ,    file )  )     {", "OrcReader   reader    =    new   OrcReader ( dataSource ,    ORC ,    defaultReaderAttributes . getMaxMergeDistance (  )  ,    defaultReaderAttributes . getMaxReadSize (  )  ,    OrcStorageManager . HUGE _ MAX _ READ _ BLOCK _ SIZE )  ;", "ImmutableList . Builder < ColumnStats >    list    =    ImmutableList . builder (  )  ;", "for    ( ColumnInfo   info    :    getColumnInfo ( reader )  )     {", "ShardStats . computeColumnStats ( reader ,    info . getColumnId (  )  ,    info . getType (  )  )  . ifPresent ( list :  : add )  ;", "}", "return   list . build (  )  ;", "}    catch    ( IOException   e )     {", "throw   new   PrestoException ( RaptorErrorCode . RAPTOR _ ERROR ,     (  \" Failed   to   read   file :     \"     +    file )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["computeShardStats"], "fileName": "com.facebook.presto.raptor.storage.OrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "return   new   ShardInfo ( shardUuid ,    bucketNumber ,    nodes ,    computeShardStats ( file )  ,    rowCount ,    file . length (  )  ,    uncompressedSize ,    OrcStorageManager . xxhash 6  4  ( file )  )  ;", "}", "METHOD_END"], "methodName": ["createShardInfo"], "fileName": "com.facebook.presto.raptor.storage.OrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "return    (    rowsToDelete )     -  >     {", "if    ( rowsToDelete . isEmpty (  )  )     {", "return   CompletableFuture . pletedFuture ( ImmutableList . of (  )  )  ;", "}", "return   CompletableFuture . supplyAsync (  (  )     -  >    rewriteShard ( transactionId ,    bucketNumber ,    shardUuid ,    rowsToDelete )  ,    deletionExecutor )  ;", "}  ;", "}", "METHOD_END"], "methodName": ["createShardRewriter"], "fileName": "com.facebook.presto.raptor.storage.OrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . orc . FileOrcDataSource ( file ,    readerAttributes . getMaxMergeDistance (  )  ,    readerAttributes . getMaxReadSize (  )  ,    readerAttributes . getStreamBufferSize (  )  ,    readerAttributes . isLazyReadSmallRanges (  )  )  ;", "}", "METHOD_END"], "methodName": ["fileOrcDataSource"], "fileName": "com.facebook.presto.raptor.storage.OrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "Optional < OrcFileMetadata >    metadata    =    OrcStorageManager . getOrcFileMetadata ( reader )  ;", "if    ( metadata . isPresent (  )  )     {", "return   getColumnInfoFromOrcUserMetadata ( metadata . get (  )  )  ;", "}", "return   getColumnInfoFromOrcColumnTypes ( reader . getColumnNames (  )  ,    reader . getFooter (  )  . getTypes (  )  )  ;", "}", "METHOD_END"], "methodName": ["getColumnInfo"], "fileName": "com.facebook.presto.raptor.storage.OrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "Type   rowType    =    getType ( orcColumnTypes ,     0  )  ;", "if    (  ( orcColumnNames . size (  )  )     !  =     ( rowType . getTypeParameters (  )  . size (  )  )  )     {", "throw   new   PException ( RaptorErrorCode . RAPTOR _ ERROR ,     \" Column   names   and   types   do   not   match \"  )  ;", "}", "ImmutableList . Builder < ColumnInfo >    list    =    ImmutableList . builder (  )  ;", "for    ( int   i    =     0  ;    i    <     ( orcColumnNames . size (  )  )  ;    i +  +  )     {", "list . add ( new   ColumnInfo ( Long . parseLong ( orcColumnNames . get ( i )  )  ,    rowType . getTypeParameters (  )  . get ( i )  )  )  ;", "}", "return   list . build (  )  ;", "}", "METHOD_END"], "methodName": ["getColumnInfoFromOrcColumnTypes"], "fileName": "com.facebook.presto.raptor.storage.OrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "return   orcFileMetadata . getColumnTypes (  )  . entrySet (  )  . stream (  )  . sorted ( Map . Entry . comparingByKey (  )  )  . map (  (    entry )     -  >    new   ColumnInfo ( entry . getKey (  )  ,    typeManager . getType ( entry . getValue (  )  )  )  )  . collect ( Collectors . toList (  )  )  ;", "}", "METHOD_END"], "methodName": ["getColumnInfoFromOrcUserMetadata"], "fileName": "com.facebook.presto.raptor.storage.OrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "return   Optional . ofNullable ( reader . getFooter (  )  . getUserMetadata (  )  . get ( OrcFileMetadata . KEY )  )  . map (  (    slice )     -  >    OrcStorageManager . METADATA _ CODEC . fromJson ( slice . getBytes (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getOrcFileMetadata"], "fileName": "com.facebook.presto.raptor.storage.OrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < ColumnReference < RaptorColumnHandle >  >    columns    =    ImmutableList . builder (  )  ;", "for    ( RaptorColumnHandle   column    :    effectivePredicate . getDomains (  )  . get (  )  . keySet (  )  )     {", "Integer   index    =    indexMap . get ( column . getColumnId (  )  )  ;", "if    ( index    !  =    null )     {", "columns . add ( new   ColumnReference ( column ,    index ,    column . getColumnType (  )  )  )  ;", "}", "}", "return   new   orc . TupleDomainOrcPredicate ( effectivePredicate ,    columns . build (  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPredicate"], "fileName": "com.facebook.presto.raptor.storage.OrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "OrcType   type    =    types . get ( index )  ;", "switch    ( type . getOrcTypeKind (  )  )     {", "case   BOOLEAN    :", "return   BOOLEAN ;", "case   LONG    :", "return   BIGINT ;", "case   DOUBLE    :", "return   DOUBLE ;", "case   STRING    :", "return   createUnboundedVarcharType (  )  ;", "case   VARCHAR    :", "return   createVarcharType ( type . getLength (  )  . get (  )  )  ;", "case   CHAR    :", "return   createCharType ( type . getLength (  )  . get (  )  )  ;", "case   BINARY    :", "return   VARBINARY ;", "case   DECIMAL    :", "return   DecimalType . createDecimalType ( type . getPrecision (  )  . get (  )  ,    type . getScale (  )  . get (  )  )  ;", "case   LIST    :", "TypeSignature   elementType    =    getType ( types ,    type . getFieldTypeIndex (  0  )  )  . getTypeSignature (  )  ;", "return   typeManager . getParameterizedType ( ARRAY ,    ImmutableList . of ( TypeSignatureParameter . of ( elementType )  )  )  ;", "case   MAP    :", "TypeSignature   keyType    =    getType ( types ,    type . getFieldTypeIndex (  0  )  )  . getTypeSignature (  )  ;", "TypeSignature   valueType    =    getType ( types ,    type . getFieldTypeIndex (  1  )  )  . getTypeSignature (  )  ;", "return   typeManager . getParameterizedType ( MAP ,    ImmutableList . of ( TypeSignatureParameter . of ( keyType )  ,    TypeSignatureParameter . of ( valueType )  )  )  ;", "case   STRUCT    :", "List < String >    fieldNames    =    type . getFieldNames (  )  ;", "ImmutableList . Builder < TypeSignatureParameter >    fieldTypes    =    ImmutableList . builder (  )  ;", "for    ( int   i    =     0  ;    i    <     ( type . getFieldCount (  )  )  ;    i +  +  )     {", "fieldTypes . add ( TypeSignatureParameter . of ( new   spi . type . NamedTypeSignature ( fieldNames . get ( i )  ,    getType ( types ,    type . getFieldTypeIndex ( i )  )  . getTypeSignature (  )  )  )  )  ;", "}", "return   typeManager . getParameterizedType ( ROW ,    fieldTypes . build (  )  )  ;", "}", "throw   new   spi . PrestoException ( RaptorErrorCode . RAPTOR _ ERROR ,     (  \" Unhandled   ORC   type :     \"     +    type )  )  ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.facebook.presto.raptor.storage.OrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "File   file    =    storageService . getStorageFile ( shardUuid )  . getAbsoluteFile (  )  ;", "if    (  (  !  ( file . exists (  )  )  )     &  &     ( backupStore . isPresent (  )  )  )     {", "try    {", "Future <  ?  >    future    =    recoveryManager . recoverShard ( shardUuid )  ;", "future . get ( recoveryTimeout . toMillis (  )  ,    TimeUnit . MILLISECONDS )  ;", "}    catch    ( InterruptedException   e )     {", "Thread . currentThread (  )  . interrupt (  )  ;", "throw   new   RuntimeException ( e )  ;", "}    catch    ( ExecutionException   e )     {", "if    (  ( e . getCause (  )  )     !  =    null )     {", "throwIfInstanceOf ( e . getCause (  )  ,    PrestoException . class )  ;", "}", "throw   new   PrestoException ( RaptorErrorCode . RAPTOR _ RECOVERY _ ERROR ,     (  \" Error   recovering   shard    \"     +    shardUuid )  ,    e . getCause (  )  )  ;", "}    catch    ( TimeoutException   e )     {", "throw   new   PrestoException ( RaptorErrorCode . RAPTOR _ RECOVERY _ TIMEOUT ,     (  \" Shard   is   being   recovered   from   backup .    Please   retry   in   a   few   minutes :     \"     +    shardUuid )  )  ;", "}", "}", "try    {", "return    . fileOrcDataSource ( readerAttributes ,    file )  ;", "}    catch    ( IOException   e )     {", "throw   new   PrestoException ( RaptorErrorCode . RAPTOR _ ERROR ,     (  \" Failed   to   open   shard   file :     \"     +    file )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["openShard"], "fileName": "com.facebook.presto.raptor.storage.OrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   OrcFileRewriter . rewrite ( input ,    output ,    rowsToDelete )  ;", "}    catch    ( IOException   e )     {", "throw   new   PException ( RaptorErrorCode . RAPTOR _ ERROR ,     (  \" Failed   to   rewrite   shard   file :     \"     +    input )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["rewriteFile"], "fileName": "com.facebook.presto.raptor.storage.OrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "if    ( rowsToDelete . isEmpty (  )  )     {", "return   ImmutableList . of (  )  ;", "}", "UUID   newShardUuid    =    UUID . randomUUID (  )  ;", "File   input    =    storageService . getStorageFile ( shardUuid )  ;", "File   output    =    storageService . getStagingFile ( newShardUuid )  ;", "OrcFileRewriter . OrcFileInfo   info    =     . rewriteFile ( input ,    output ,    rowsToDelete )  ;", "long   rowCount    =    info . getRowCount (  )  ;", "if    ( rowCount    =  =     0  )     {", "return    . shardDelta ( shardUuid ,    Optional . empty (  )  )  ;", "}", "shardRecorder . recordCreatedShard ( transactionId ,    newShardUuid )  ;", "MoreFutures . getFutureValue ( backupManager . submit ( newShardUuid ,    output )  )  ;", "Set < String >    nodes    =    ImmutableSet . of ( nodeId )  ;", "long   uncompressedSize    =    info . getUncompressedSize (  )  ;", "ShardInfo   shard    =    createShardInfo ( newShardUuid ,    bucketNumber ,    output ,    nodes ,    rowCount ,    uncompressedSize )  ;", "writeShard ( newShardUuid )  ;", "return    . shardDelta ( shardUuid ,    Optional . of ( shard )  )  ;", "}", "METHOD_END"], "methodName": ["rewriteShard"], "fileName": "com.facebook.presto.raptor.storage.OrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "List < ShardInfo >    newShards    =    shardInfo . map ( ImmutableList :  : of )  . orElse ( ImmutableList . of (  )  )  ;", "ShardDelta   delta    =    new   ShardDelta ( ImmutableList . of ( oldShardUuid )  ,    newShards )  ;", "return   ImmutableList . of ( Slices . wrappedBuffer (  . SHARD _ DELTA _ CODEC . toJsonBytes ( delta )  )  )  ;", "}", "METHOD_END"], "methodName": ["shardDelta"], "fileName": "com.facebook.presto.raptor.storage.OrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "deletionExecutor . shutdownNow (  )  ;", "commitExecutor . shutdown (  )  ;", "}", "METHOD_END"], "methodName": ["shutdown"], "fileName": "com.facebook.presto.raptor.storage.OrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "if    ( RaptorColumnHandle . isShardRowIdColumn ( columnId )  )     {", "return   OrcPageSource . ROWID _ COLUMN ;", "}", "if    ( RaptorColumnHandle . isShardUuidColumn ( columnId )  )     {", "return   OrcPageSource . SHARD _ UUID _ COLUMN ;", "}", "if    ( RaptorColumnHandle . isBucketNumberColumn ( columnId )  )     {", "return   OrcPageSource . BUCKET _ NUMBER _ COLUMN ;", "}", "throw   new   PrestoException ( RaptorErrorCode . RAPTOR _ ERROR ,     (  \" Invalid   column   ID :     \"     +    columnId )  )  ;", "}", "METHOD_END"], "methodName": ["toSpecialIndex"], "fileName": "com.facebook.presto.raptor.storage.OrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "if    (  ( backupStore . isPresent (  )  )     &  &     (  !  ( backupStore . get (  )  . shardExists ( shardUuid )  )  )  )     {", "throw   new   PrestoException ( RaptorErrorCode . RAPTOR _ ERROR ,     \" Backup   does   not   exist   after   write \"  )  ;", "}", "File   stagingFile    =    Service . getStagingFile ( shardUuid )  ;", "File   File    =    Service . getStorageFile ( shardUuid )  ;", "Service . createParents ( File )  ;", "try    {", "Files . move ( stagingFile . toPath (  )  ,    File . toPath (  )  ,    StandardCopyOption . ATOMIC _ MOVE )  ;", "}    catch    ( IOException   e )     {", "throw   new   PrestoException ( RaptorErrorCode . RAPTOR _ ERROR ,     \" Failed   to   move   shard   file \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["writeShard"], "fileName": "com.facebook.presto.raptor.storage.OrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "try    ( InputStream   in    =    new   FileInputStream ( file )  )     {", "return   XxHash 6  4  . hash ( in )  ;", "}    catch    ( IOException   e )     {", "throw   new   PException ( RaptorErrorCode . RAPTOR _ ERROR ,     (  \" Failed   to   read   file :     \"     +    file )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["xxhash64"], "fileName": "com.facebook.presto.raptor.storage.OrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "OrcReader   orcReader    =    new   OrcReader ( dataSource ,    ORC ,    new   io . airlift . units . DataSize (  1  ,    Unit . MEGABYTE )  ,    new   io . airlift . units . DataSize (  1  ,    Unit . MEGABYTE )  ,    new   io . airlift . units . DataSize (  1  ,    Unit . MEGABYTE )  )  ;", "List < String >    columnNames    =    orcReader . getColumnNames (  )  ;", "assertEquals ( columnNames . size (  )  ,    columnIds . size (  )  )  ;", "Map < Integer ,    Type >    includedColumns    =    new   HashMap <  >  (  )  ;", "int   ordinal    =     0  ;", "for    ( long   columnId    :    columnIds )     {", "assertEquals ( columnNames . get ( ordinal )  ,    String . valueOf ( columnId )  )  ;", "includedColumns . put ( ordinal ,    types . get ( ordinal )  )  ;", "ordinal +  +  ;", "}", "return    . createRecordReader ( orcReader ,    includedColumns )  ;", "}", "METHOD_END"], "methodName": ["createReader"], "fileName": "com.facebook.presto.raptor.storage.OrcTestingUtil"}, {"methodBody": ["METHOD_START", "{", "OrcReader   orcReader    =    new   OrcReader ( dataSource ,    ORC ,    new   io . airlift . units . DataSize (  1  ,    Unit . MEGABYTE )  ,    new   io . airlift . units . DataSize (  1  ,    Unit . MEGABYTE )  ,    new   io . airlift . units . DataSize (  1  ,    Unit . MEGABYTE )  )  ;", "assertEquals ( orcReader . getColumnNames (  )  . size (  )  ,     0  )  ;", "return    . createRecordReader ( orcReader ,    ImmutableMap . of (  )  )  ;", "}", "METHOD_END"], "methodName": ["createReaderNoRows"], "fileName": "com.facebook.presto.raptor.storage.OrcTestingUtil"}, {"methodBody": ["METHOD_START", "{", "return   orcReader . createRecordReader ( includedColumns ,    TRUE ,    UTC ,    newSimpleAggregatedMemoryContext (  )  )  ;", "}", "METHOD_END"], "methodName": ["createRecordReader"], "fileName": "com.facebook.presto.raptor.storage.OrcTestingUtil"}, {"methodBody": ["METHOD_START", "{", "return   new   FileOrcDataSource ( file ,    new   io . airlift . units . DataSize (  1  ,    Unit . MEGABYTE )  ,    new   io . airlift . units . DataSize (  1  ,    Unit . MEGABYTE )  ,    new   io . airlift . units . DataSize (  1  ,    Unit . MEGABYTE )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["fileOrcDataSource"], "fileName": "com.facebook.presto.raptor.storage.OrcTestingUtil"}, {"methodBody": ["METHOD_START", "{", "checkArgument (  (  ( b    >  =     0  )     &  &     ( b    <  =     2  5  5  )  )  ,     \" octet   not   in   range :     % s \"  ,    b )  ;", "return    (  ( byte )     ( b )  )  ;", "}", "METHOD_END"], "methodName": ["octet"], "fileName": "com.facebook.presto.raptor.storage.OrcTestingUtil"}, {"methodBody": ["METHOD_START", "{", "byte [  ]    bytes    =    new   byte [ values . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( bytes . length )  ;    i +  +  )     {", "bytes [ i ]     =     . octet ( values [ i ]  )  ;", "}", "return   bytes ;", "}", "METHOD_END"], "methodName": ["octets"], "fileName": "com.facebook.presto.raptor.storage.OrcTestingUtil"}, {"methodBody": ["METHOD_START", "{", "return   new   ReaderAttributes ( RaptorSessionProperties . getReaderMaxMergeDistance ( session )  ,    RaptorSessionProperties . getReaderMaxReadSize ( session )  ,    RaptorSessionProperties . getReaderStreamBufferSize ( session )  ,    RaptorSessionProperties . isReaderLazyReadSmallRanges ( session )  )  ;", "}", "METHOD_END"], "methodName": ["from"], "fileName": "com.facebook.presto.raptor.storage.ReaderAttributes"}, {"methodBody": ["METHOD_START", "{", "return   maxMergeDistance ;", "}", "METHOD_END"], "methodName": ["getMaxMergeDistance"], "fileName": "com.facebook.presto.raptor.storage.ReaderAttributes"}, {"methodBody": ["METHOD_START", "{", "return   maxReadSize ;", "}", "METHOD_END"], "methodName": ["getMaxReadSize"], "fileName": "com.facebook.presto.raptor.storage.ReaderAttributes"}, {"methodBody": ["METHOD_START", "{", "return   streamBufferSize ;", "}", "METHOD_END"], "methodName": ["getStreamBufferSize"], "fileName": "com.facebook.presto.raptor.storage.ReaderAttributes"}, {"methodBody": ["METHOD_START", "{", "return   lazyReadSmallRanges ;", "}", "METHOD_END"], "methodName": ["isLazyReadSmallRanges"], "fileName": "com.facebook.presto.raptor.storage.ReaderAttributes"}, {"methodBody": ["METHOD_START", "{", "checkArgument (  (  ( page . getChannelCount (  )  )     =  =     ( types . size (  )  )  )  ,     \" channelCount   does   not   match \"  )  ;", "checkArgument (  ( position    <     ( page . getPositionCount (  )  )  )  ,     \" Requested   position    % s   from   a   page   with   positionCount    % s    \"  ,    position ,    page . getPositionCount (  )  )  ;", "Row . RowBuilder   rowBuilder    =    new   Row . RowBuilder ( page . getChannelCount (  )  )  ;", "for    ( int   channel    =     0  ;    channel    <     ( page . getChannelCount (  )  )  ;    channel +  +  )     {", "Block   block    =    page . getBlock ( channel )  ;", "Type   type    =    types . get ( channel )  ;", "long   size ;", "Object   value    =    Row . getNativeContainerValue ( type ,    block ,    position )  ;", "if    ( value    =  =    null )     {", "size    =    SizeOf . SIZE _ OF _ BYTE ;", "} else", "if    (  ( type . getJavaType (  )  )     =  =     ( boolean . class )  )     {", "size    =    SizeOf . SIZE _ OF _ BYTE ;", "} else", "if    (  ( type . getJavaType (  )  )     =  =     ( long . class )  )     {", "size    =    SizeOf . SIZE _ OF _ LONG ;", "} else", "if    (  ( type . getJavaType (  )  )     =  =     ( double . class )  )     {", "size    =    SizeOf . SIZE _ OF _ DOUBLE ;", "} else", "if    (  ( type . getJavaType (  )  )     =  =     ( io . airlift . slice . Slice . class )  )     {", "size    =     (  ( io . airlift . slice . Slice )     ( value )  )  . length (  )  ;", "} else", "if    (  ( type . getJavaType (  )  )     =  =     ( Block . class )  )     {", "size    =     (  ( Block )     ( value )  )  . getSizeInBytes (  )  ;", "} else    {", "throw   new   AssertionError (  (  \" Unimplemented   type :     \"     +    type )  )  ;", "}", "rowBuilder . add ( Row . nativeContainerToOrcValue ( type ,    value )  ,    size )  ;", "}", "Row   row    =    rowBuilder . build (  )  ;", "verify (  (  ( row . getColumns (  )  . size (  )  )     =  =     ( types . size (  )  )  )  ,     \" Column   count   in   row :     % s   Expected   column   count :     % s \"  ,    row . getColumns (  )  . size (  )  ,    types . size (  )  )  ;", "return   row ;", "}", "METHOD_END"], "methodName": ["extractRow"], "fileName": "com.facebook.presto.raptor.storage.Row"}, {"methodBody": ["METHOD_START", "{", "return   columns ;", "}", "METHOD_END"], "methodName": ["getColumns"], "fileName": "com.facebook.presto.raptor.storage.Row"}, {"methodBody": ["METHOD_START", "{", "if    ( block . isNull ( position )  )     {", "return   null ;", "} else", "if    (  ( type . getJavaType (  )  )     =  =     ( lean . class )  )     {", "return   type . getBoolean ( block ,    position )  ;", "} else", "if    (  ( type . getJavaType (  )  )     =  =     ( long . class )  )     {", "return   type . getLong ( block ,    position )  ;", "} else", "if    (  ( type . getJavaType (  )  )     =  =     ( double . class )  )     {", "return   type . getDouble ( block ,    position )  ;", "} else", "if    (  ( type . getJavaType (  )  )     =  =     ( io . airlift . slice . Slice . class )  )     {", "return   type . getSlice ( block ,    position )  ;", "} else", "if    (  ( type . getJavaType (  )  )     =  =     ( Block . class )  )     {", "return   type . getObject ( block ,    position )  ;", "} else    {", "throw   new   AssertionError (  (  \" Unimplemented   type :     \"     +    type )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getNativeContainerValue"], "fileName": "com.facebook.presto.raptor.storage.Row"}, {"methodBody": ["METHOD_START", "{", "return   sizeInBytes ;", "}", "METHOD_END"], "methodName": ["getSizeInBytes"], "fileName": "com.facebook.presto.raptor.storage.Row"}, {"methodBody": ["METHOD_START", "{", "if    ( nativeValue    =  =    null )     {", "return   null ;", "}", "if    ( type   instanceof   DecimalType )     {", "BigInteger   unscaledValue ;", "DecimalType   decimalType    =     (  ( DecimalType )     ( type )  )  ;", "if    ( decimalType . isShort (  )  )     {", "unscaledValue    =    BigInteger . valueOf (  (  ( long )     ( nativeValue )  )  )  ;", "} else    {", "unscaledValue    =    Decimals . decodeUnscaledValue (  (  ( Slice )     ( nativeValue )  )  )  ;", "}", "return   HiveDecimal . create ( unscaledValue ,    decimalType . getScale (  )  )  ;", "}", "if    (  ( type . getJavaType (  )  )     =  =     ( boolean . class )  )     {", "return   nativeValue ;", "}", "if    (  ( type . getJavaType (  )  )     =  =     ( long . class )  )     {", "return   nativeValue ;", "}", "if    (  ( type . getJavaType (  )  )     =  =     ( double . class )  )     {", "return   nativeValue ;", "}", "if    (  ( type . getJavaType (  )  )     =  =     ( Slice . class )  )     {", "Slice   slice    =     (  ( Slice )     ( nativeValue )  )  ;", "return   type   instanceof   VarcharType    ?    slice . toStringUtf 8  (  )     :    slice . getBytes (  )  ;", "}", "if    ( Types . isArrayType ( type )  )     {", "Block   arrayBlock    =     (  ( Block )     ( nativeValue )  )  ;", "Type   elementType    =    type . getTypeParameters (  )  . get (  0  )  ;", "List < Object >    list    =    new   ArrayList <  >  (  )  ;", "for    ( int   i    =     0  ;    i    <     ( arrayBlock . getPositionCount (  )  )  ;    i +  +  )     {", "list . add ( Row . nativeContainerToOrcValue ( elementType ,    Row . getNativeContainerValue ( elementType ,    arrayBlock ,    i )  )  )  ;", "}", "return   list ;", "}", "if    ( Types . isMapType ( type )  )     {", "Block   mapBlock    =     (  ( Block )     ( nativeValue )  )  ;", "Type   keyType    =    type . getTypeParameters (  )  . get (  0  )  ;", "Type   valueType    =    type . getTypeParameters (  )  . get (  1  )  ;", "Map < Object ,    Object >    map    =    new   HashMap <  >  (  )  ;", "for    ( int   i    =     0  ;    i    <     ( mapBlock . getPositionCount (  )  )  ;    i    +  =     2  )     {", "Object   key    =    Row . nativeContainerToOrcValue ( keyType ,    Row . getNativeContainerValue ( keyType ,    mapBlock ,    i )  )  ;", "Object   value    =    Row . nativeContainerToOrcValue ( valueType ,    Row . getNativeContainerValue ( valueType ,    mapBlock ,     ( i    +     1  )  )  )  ;", "map . put ( key ,    value )  ;", "}", "return   map ;", "}", "throw   new   spi . PrestoException ( GENERIC _ INTERNAL _ ERROR ,     (  \" Unimplemented   type :     \"     +    type )  )  ;", "}", "METHOD_END"], "methodName": ["nativeContainerToOrcValue"], "fileName": "com.facebook.presto.raptor.storage.Row"}, {"methodBody": ["METHOD_START", "{", "return   jobErrors ;", "}", "METHOD_END"], "methodName": ["getJobErrors"], "fileName": "com.facebook.presto.raptor.storage.ShardEjector"}, {"methodBody": ["METHOD_START", "{", "return   shardsEjected ;", "}", "METHOD_END"], "methodName": ["getShardsEjected"], "fileName": "com.facebook.presto.raptor.storage.ShardEjector"}, {"methodBody": ["METHOD_START", "{", "checkArgument (  (  !  ( nodes . isEmpty (  )  )  )  )  ;", "if    (  ( nodes . size (  )  )     =  =     1  )     {", "return   nodes . keySet (  )  . itera (  )  . next (  )  ;", "}", "List < String >    candidates    =    new   ArrayList <  >  ( nodes . keySet (  )  )  ;", "Collections . shuffle ( candidates )  ;", "String   first    =    candidates . get (  0  )  ;", "String   second    =    candidates . get (  1  )  ;", "return    ( nodes . get ( first )  )     <  =     ( nodes . get ( second )  )     ?    first    :    second ;", "}", "METHOD_END"], "methodName": ["pickCandidateNode"], "fileName": "com.facebook.presto.raptor.storage.ShardEjector"}, {"methodBody": ["METHOD_START", "{", "while    (  !  ( nodes . isEmpty (  )  )  )     {", "String   node    =     . pickCandidateNode ( nodes )  ;", "if    (  (  ( nodes . get ( node )  )     +    shardSize )     <  =    maxSize )     {", "return   node ;", "}", "nodes . remove ( node )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["pickTargetNode"], "fileName": "com.facebook.presto.raptor.storage.ShardEjector"}, {"methodBody": ["METHOD_START", "{", "checkState ( backupStore . isPresent (  )  ,     \" backup   store   must   be   present \"  )  ;", "Map < String ,    Long >    nodes    =    shardManager . getNodeBytes (  )  ;", "Set < String >    activeNodes    =    nodeSupplier . getWorkerNodes (  )  . stream (  )  . map ( Node :  : getNodeIdentifier )  . collect ( Collectors . toSet (  )  )  ;", "nodes    =    new   HashMap ( filterKeys ( nodes ,    activeNodes :  : contains )  )  ;", "if    ( nodes . isEmpty (  )  )     {", "return ;", "}", "if    (  !  ( nodes . containsKey ( currentNode )  )  )     {", "return ;", "}", "long   nodeSize    =    nodes . get ( currentNode )  ;", "long   averageSize    =    Math . round ( nodes . values (  )  . stream (  )  . mapToLong ( Long :  : longValue )  . average (  )  . getAsDouble (  )  )  ;", "long   maxSize    =    Math . round (  ( averageSize    *     1  .  0  1  )  )  ;", "if    ( nodeSize    <  =    maxSize )     {", "return ;", "}", "nodes    =    new   HashMap ( filterValues ( nodes ,     (    size )     -  >    size    <  =    averageSize )  )  ;", "List < ShardMetadata >    shards    =    shardManager . getNodeShards ( currentNode )  . stream (  )  . filter (  (    shard )     -  >     !  ( shard . getBucketNumber (  )  . isPresent (  )  )  )  . sorted ( Comparator . comparingLong ( ShardMetadata :  : getCompressedSize )  . reversed (  )  )  . collect ( Collectors . toList (  )  )  ;", "Queue < ShardMetadata >    queue    =    new   ArrayDeque <  >  ( shards )  ;", "while    (  ( nodeSize    >    maxSize )     &  &     (  !  ( queue . isEmpty (  )  )  )  )     {", "ShardMetadata   shard    =    queue . remove (  )  ;", "long   shardSize    =    shard . getCompressedSize (  )  ;", "UUID   shardUuid    =    shard . getShardUuid (  )  ;", "if    (  !  ( backupStore . get (  )  . shardExists ( shardUuid )  )  )     {", ". log . warn (  \" No   backup   for   shard :     % s \"  ,    shardUuid )  ;", "}", "String   target    =     . pickTargetNode ( nodes ,    shardSize ,    averageSize )  ;", "if    ( target    =  =    null )     {", "return ;", "}", "long   targetSize    =    nodes . get ( target )  ;", ". log . info (  \" Moving   shard    % s   to   node    % s    ( shard :     % s ,    node :     % s ,    average :     % s ,    target :     % s )  \"  ,    shardUuid ,    target ,    shardSize ,    nodeSize ,    averageSize ,    targetSize )  ;", "shardsEjected . update (  1  )  ;", "nodes . put ( target ,     ( targetSize    +    shardSize )  )  ;", "nodeSize    -  =    shardSize ;", "shardManager . assignShard ( shard . getTableId (  )  ,    shardUuid ,    target ,    false )  ;", "shardManager . unassignShard ( shard . getTableId (  )  ,    shardUuid ,    currentNode )  ;", "File   file    =    storageService . getStorageFile ( shardUuid )  ;", "if    (  ( file . exists (  )  )     &  &     (  !  ( file . delete (  )  )  )  )     {", ". log . warn (  \" Failed   to   delete   shard   file :     % s \"  ,    file )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["process"], "fileName": "com.facebook.presto.raptor.storage.ShardEjector"}, {"methodBody": ["METHOD_START", "{", "executor . shutdownNow (  )  ;", "}", "METHOD_END"], "methodName": ["shutdown"], "fileName": "com.facebook.presto.raptor.storage.ShardEjector"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( backupStore . isPresent (  )  )  )     {", "return ;", "}", "if    (  !  ( started . getAndSet ( true )  )  )     {", "startJob (  )  ;", "}", "}", "METHOD_END"], "methodName": ["start"], "fileName": "com.facebook.presto.raptor.storage.ShardEjector"}, {"methodBody": ["METHOD_START", "{", "executor . scheduleWithFixedDelay (  (  )     -  >     {", "try    {", "long   interval    =    this . interval . roundTo ( SECONDS )  ;", "SECONDS . sleep ( ThreadLocalRandom . current (  )  . nextLong (  1  ,    interval )  )  ;", "process (  )  ;", "}    catch    (    e )     {", "Thread . currentThread (  )  . interrupt (  )  ;", "}    catch    (    t )     {", ". log . error ( t ,     \" Error   ejecting   shards \"  )  ;", "jobErrors . update (  1  )  ;", "}", "}  ,     0  ,    interval . toMillis (  )  ,    TimeUnit . MILLISECONDS )  ;", "}", "METHOD_END"], "methodName": ["startJob"], "fileName": "com.facebook.presto.raptor.storage.ShardEjector"}, {"methodBody": ["METHOD_START", "{", "double   rate    =     ( size . toBytes (  )  )     /     ( duration . getValue ( TimeUnit . SECONDS )  )  ;", "if    (  ( Double . isNaN ( rate )  )     |  |     ( Double . isInfinite ( rate )  )  )     {", "rate    =     0  ;", "}", "return   succinctDataSize ( rate ,    Unit . BYTE )  ;", "}", "METHOD_END"], "methodName": ["dataRate"], "fileName": "com.facebook.presto.raptor.storage.ShardRecoveryManager"}, {"methodBody": ["METHOD_START", "{", "try    {", "for    ( ShardMetadata   shard    :    getMissingShards (  )  )     {", "stats . incrementBackgroundShardRecovery (  )  ;", "Futures . addCallback ( shardQueue . submit ( new    . MissingShard ( shard . getShardUuid (  )  ,    shard . getCompressedSize (  )  ,    shard . getXxhash 6  4  (  )  ,    false )  )  ,     . failureCallback (  (    t )     -  >     . log . warn ( t ,     \" Error   recovering   shard :     % s \"  ,    shard . getShardUuid (  )  )  )  )  ;", "}", "}    catch    ( Throwable   t )     {", ". log . error ( t ,     \" Error   creating   shard   recovery   tasks \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["enqueueMissingShards"], "fileName": "com.facebook.presto.raptor.storage.ShardRecoveryManager"}, {"methodBody": ["METHOD_START", "{", "return   new   com . google . common . util . concurrent . FutureCallback < T >  (  )     {", "@ Override", "public   void   onSuccess ( T   result )     {", "}", "@ Override", "public   void   onFailure ( Throwable   throwable )     {", "callback . accept ( throwable )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["failureCallback"], "fileName": "com.facebook.presto.raptor.storage.ShardRecoveryManager"}, {"methodBody": ["METHOD_START", "{", "return   shardManager . getNodeShards ( nodeIdentifier )  . stream (  )  . filter (  (    shard )     -  >    shardNeedsRecovery ( shard . getShardUuid (  )  ,    shard . getCompressedSize (  )  )  )  . collect ( Collectors . toSet (  )  )  ;", "}", "METHOD_END"], "methodName": ["getMissingShards"], "fileName": "com.facebook.presto.raptor.storage.ShardRecoveryManager"}, {"methodBody": ["METHOD_START", "{", "File   file    =    storageService . getQuarantineFile ( shardUuid )  ;", "return   new   File (  (  (  ( file . getPath (  )  )     +     \"  . corrupt .  \"  )     +     ( System . currentTimeMillis (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getQuarantineFile"], "fileName": "com.facebook.presto.raptor.storage.ShardRecoveryManager"}, {"methodBody": ["METHOD_START", "{", "return   stats ;", "}", "METHOD_END"], "methodName": ["getStats"], "fileName": "com.facebook.presto.raptor.storage.ShardRecoveryManager"}, {"methodBody": ["METHOD_START", "{", "return    (  ( file . length (  )  )     !  =    size )     |  |     (  ( xxhash 6  4  . isPresent (  )  )     &  &     (  ( OrcStorageManager . xxhash 6  4  ( file )  )     !  =     ( xxhash 6  4  . getAsLong (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["isFileCorrupt"], "fileName": "com.facebook.presto.raptor.storage.ShardRecoveryManager"}, {"methodBody": ["METHOD_START", "{", "missingShardExecutor . submit ( this :  : enqueueMissingShards )  ;", "}", "METHOD_END"], "methodName": ["recoverMissingShards"], "fileName": "com.facebook.presto.raptor.storage.ShardRecoveryManager"}, {"methodBody": ["METHOD_START", "{", "ShardMetadata   shard    =    shardManager . getShard ( shardUuid )  ;", "if    ( shard    =  =    null )     {", "throw   new   PrestoException ( RaptorErrorCode . RAPTOR _ ERROR ,     (  \" Shard   does   not   exist   in   database :     \"     +    shardUuid )  )  ;", "}", "stats . incrementActiveShardRecovery (  )  ;", "return   shardQueue . submit ( new    . MissingShard ( shardUuid ,    shard . getCompressedSize (  )  ,    shard . getXxhash 6  4  (  )  ,    true )  )  ;", "}", "METHOD_END"], "methodName": ["recoverShard"], "fileName": "com.facebook.presto.raptor.storage.ShardRecoveryManager"}, {"methodBody": ["METHOD_START", "{", "File   storageFile    =    storageService . getStorageFile ( shardUuid )  ;", "if    (  !  ( backupStore . get (  )  . shardExists ( shardUuid )  )  )     {", "stats . incrementShardRecoveryBackupNotFound (  )  ;", "throw   new   PrestoException ( RaptorErrorCode . RAPTOR _ RECOVERY _ ERROR ,     (  \" No   backup   file   found   for   shard :     \"     +    shardUuid )  )  ;", "}", "if    ( storageFile . exists (  )  )     {", "if    (  !  (  . isFileCorrupt ( storageFile ,    shardSize ,    shardXxhash 6  4  )  )  )     {", "return ;", "}", "stats . incrementCorruptLocalFile (  )  ;", "File   quarantine    =    getQuarantineFile ( shardUuid )  ;", ". log . error (  \" Local   file   is   corrupt .    Quarantining   local   file :     % s \"  ,    quarantine )  ;", "if    (  !  ( storageFile . renameTo ( quarantine )  )  )     {", ". log . warn (  \" Quarantine   of   corrupt   local   file   failed :     % s \"  ,    shardUuid )  ;", "storageFile . delete (  )  ;", "}", "}", "File   stagingFile    =     . temporarySuffix ( storageService . getStagingFile ( shardUuid )  )  ;", "storageService . createParents ( stagingFile )  ;", ". log . info (  \" Copying   shard    % s   from   backup .  .  .  \"  ,    shardUuid )  ;", "long   start    =    System . nanoTime (  )  ;", "try    {", "backupStore . get (  )  . restoreShard ( shardUuid ,    stagingFile )  ;", "}    catch    ( PrestoException   e )     {", "stats . incrementShardRecoveryFailure (  )  ;", "stagingFile . delete (  )  ;", "throw   e ;", "}", "Duration   duration    =    nanosSince ( start )  ;", "DataSize   size    =    succinctBytes ( stagingFile . length (  )  )  ;", "DataSize   rate    =     . dataRate ( size ,    duration )  . convertToMostSuccinctDataSize (  )  ;", "stats . addShardRecoveryDataRate ( rate ,    size ,    duration )  ;", ". log . info (  \" Copied   shard    % s   from   backup   in    % s    (  % s   at    % s / s )  \"  ,    shardUuid ,    duration ,    size ,    rate )  ;", "storageService . createParents ( storageFile )  ;", "try    {", "Files . move ( stagingFile . toPath (  )  ,    storageFile . toPath (  )  ,    StandardCopyOption . ATOMIC _ MOVE )  ;", "}    catch    ( FileAlreadyExistsException   e )     {", "}    catch    ( IOException   e )     {", "stats . incrementShardRecoveryFailure (  )  ;", "throw   new   PrestoException ( RaptorErrorCode . RAPTOR _ RECOVERY _ ERROR ,     (  \" Failed   to   move   shard :     \"     +    shardUuid )  ,    e )  ;", "}    finally    {", "stagingFile . delete (  )  ;", "}", "if    (  !  ( storageFile . exists (  )  )  )     {", "stats . incrementShardRecoveryFailure (  )  ;", "throw   new   PrestoException ( RaptorErrorCode . RAPTOR _ RECOVERY _ ERROR ,     (  \" File   does   not   exist   after   recovery :     \"     +    shardUuid )  )  ;", "}", "if    (  . isFileCorrupt ( storageFile ,    shardSize ,    shardXxhash 6  4  )  )     {", "stats . incrementShardRecoveryFailure (  )  ;", "stats . incrementCorruptRecoveredFile (  )  ;", "File   quarantine    =    getQuarantineFile ( shardUuid )  ;", ". log . error (  \" Local   file   is   corrupt   after   recovery .    Quarantining   local   file :     % s \"  ,    quarantine )  ;", "if    (  !  ( storageFile . renameTo ( quarantine )  )  )     {", ". log . warn (  \" Quarantine   of   corrupt   recovered   file   failed :     % s \"  ,    shardUuid )  ;", "storageFile . delete (  )  ;", "}", "throw   new   PrestoException ( RaptorErrorCode . RAPTOR _ BACKUP _ CORRUPTION ,     (  \" Backup   is   corrupt   after   read :     \"     +    shardUuid )  )  ;", "}", "stats . incrementShardRecoverySuccess (  )  ;", "}", "METHOD_END"], "methodName": ["restoreFromBackup"], "fileName": "com.facebook.presto.raptor.storage.ShardRecoveryManager"}, {"methodBody": ["METHOD_START", "{", "missingShardExecutor . scheduleWithFixedDelay (  (  )     -  >     {", "try    {", "long   interval    =    missingShardDisInterval . roundTo ( SECONDS )  ;", "SECONDS . sleep ( ThreadLocalRandom . current (  )  . nextLong (  1  ,    interval )  )  ;", "}    catch    (    e )     {", "Thread . currentThread (  )  . interrupt (  )  ;", "}", "enqueueMissingShards (  )  ;", "}  ,     0  ,    missingShardDisInterval . toMillis (  )  ,    TimeUnit . MILLISECONDS )  ;", "}", "METHOD_END"], "methodName": ["scheduleRecoverMissingShards"], "fileName": "com.facebook.presto.raptor.storage.ShardRecoveryManager"}, {"methodBody": ["METHOD_START", "{", "File   storageFile    =    storageService . getStorageFile ( shardUuid )  ;", "return    (  !  ( storageFile . exists (  )  )  )     |  |     (  ( storageFile . length (  )  )     !  =    shardSize )  ;", "}", "METHOD_END"], "methodName": ["shardNeedsRecovery"], "fileName": "com.facebook.presto.raptor.storage.ShardRecoveryManager"}, {"methodBody": ["METHOD_START", "{", "executorService . shutdownNow (  )  ;", "missingExecutor . shutdownNow (  )  ;", "}", "METHOD_END"], "methodName": ["shutdown"], "fileName": "com.facebook.presto.raptor.storage.ShardRecoveryManager"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( backupStore . isPresent (  )  )  )     {", "return ;", "}", "if    ( started . compareAndSet ( false ,    true )  )     {", "scheduleMissingShards (  )  ;", "}", "}", "METHOD_END"], "methodName": ["start"], "fileName": "com.facebook.presto.raptor.storage.ShardRecoveryManager"}, {"methodBody": ["METHOD_START", "{", "return   new   File (  (  (  ( file . getPath (  )  )     +     \"  . tmp -  \"  )     +     ( UUID . randomUUID (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["temporarySuffix"], "fileName": "com.facebook.presto.raptor.storage.ShardRecoveryManager"}, {"methodBody": ["METHOD_START", "{", "shardRecoveryBytesPerSecond . add ( Math . round ( rate . toBytes (  )  )  )  ;", "shardSizeBytes . add ( size . toBytes (  )  )  ;", "shardRecoveryTimeInMilliSeconds . add ( duration . toMillis (  )  )  ;", "}", "METHOD_END"], "methodName": ["addShardRecoveryDataRate"], "fileName": "com.facebook.presto.raptor.storage.ShardRecoveryStats"}, {"methodBody": ["METHOD_START", "{", "return   activeShardRecovery ;", "}", "METHOD_END"], "methodName": ["getActiveShardRecovery"], "fileName": "com.facebook.presto.raptor.storage.ShardRecoveryStats"}, {"methodBody": ["METHOD_START", "{", "return   backgroundShardRecovery ;", "}", "METHOD_END"], "methodName": ["getBackgroundShardRecovery"], "fileName": "com.facebook.presto.raptor.storage.ShardRecoveryStats"}, {"methodBody": ["METHOD_START", "{", "return   corruptLocalFile ;", "}", "METHOD_END"], "methodName": ["getCorruptLocalFile"], "fileName": "com.facebook.presto.raptor.storage.ShardRecoveryStats"}, {"methodBody": ["METHOD_START", "{", "return   corruptRecoveredFile ;", "}", "METHOD_END"], "methodName": ["getCorruptRecoveredFile"], "fileName": "com.facebook.presto.raptor.storage.ShardRecoveryStats"}, {"methodBody": ["METHOD_START", "{", "return   shardRecoveryBackupNotFound ;", "}", "METHOD_END"], "methodName": ["getShardRecoveryBackupNotFound"], "fileName": "com.facebook.presto.raptor.storage.ShardRecoveryStats"}, {"methodBody": ["METHOD_START", "{", "return   shardRecoveryBytesPerSecond ;", "}", "METHOD_END"], "methodName": ["getShardRecoveryBytesPerSecond"], "fileName": "com.facebook.presto.raptor.storage.ShardRecoveryStats"}, {"methodBody": ["METHOD_START", "{", "return   shardRecoveryFailure ;", "}", "METHOD_END"], "methodName": ["getShardRecoveryFailure"], "fileName": "com.facebook.presto.raptor.storage.ShardRecoveryStats"}, {"methodBody": ["METHOD_START", "{", "return   shardRecoveryShardSizeBytes ;", "}", "METHOD_END"], "methodName": ["getShardRecoveryShardSizeBytes"], "fileName": "com.facebook.presto.raptor.storage.ShardRecoveryStats"}, {"methodBody": ["METHOD_START", "{", "return   shardRecoverySuccess ;", "}", "METHOD_END"], "methodName": ["getShardRecoverySuccess"], "fileName": "com.facebook.presto.raptor.storage.ShardRecoveryStats"}, {"methodBody": ["METHOD_START", "{", "return   shardRecoveryTimeInMilliSeconds ;", "}", "METHOD_END"], "methodName": ["getShardRecoveryTimeInMilliSeconds"], "fileName": "com.facebook.presto.raptor.storage.ShardRecoveryStats"}, {"methodBody": ["METHOD_START", "{", "activeShardRecovery . update (  1  )  ;", "}", "METHOD_END"], "methodName": ["incrementActiveShardRecovery"], "fileName": "com.facebook.presto.raptor.storage.ShardRecoveryStats"}, {"methodBody": ["METHOD_START", "{", "backgroundShardRecovery . update (  1  )  ;", "}", "METHOD_END"], "methodName": ["incrementBackgroundShardRecovery"], "fileName": "com.facebook.presto.raptor.storage.ShardRecoveryStats"}, {"methodBody": ["METHOD_START", "{", "corruptLocalFile . update (  1  )  ;", "}", "METHOD_END"], "methodName": ["incrementCorruptLocalFile"], "fileName": "com.facebook.presto.raptor.storage.ShardRecoveryStats"}, {"methodBody": ["METHOD_START", "{", "corruptRecoveredFile . update (  1  )  ;", "}", "METHOD_END"], "methodName": ["incrementCorruptRecoveredFile"], "fileName": "com.facebook.presto.raptor.storage.ShardRecoveryStats"}, {"methodBody": ["METHOD_START", "{", "shardRecoveryBackupNotFound . update (  1  )  ;", "}", "METHOD_END"], "methodName": ["incrementShardRecoveryBackupNotFound"], "fileName": "com.facebook.presto.raptor.storage.ShardRecoveryStats"}, {"methodBody": ["METHOD_START", "{", "shardRecoveryFailure . update (  1  )  ;", "}", "METHOD_END"], "methodName": ["incrementShardRecoveryFailure"], "fileName": "com.facebook.presto.raptor.storage.ShardRecoveryStats"}, {"methodBody": ["METHOD_START", "{", "shardRecoverySuccess . update (  1  )  ;", "}", "METHOD_END"], "methodName": ["incrementShardRecoverySuccess"], "fileName": "com.facebook.presto.raptor.storage.ShardRecoveryStats"}, {"methodBody": ["METHOD_START", "{", "int   index    =    columnNames . indexOf ( String . valueOf ( columnId )  )  ;", "if    ( index    =  =     (  -  1  )  )     {", "throw   new   PException ( RaptorErrorCode . RAPTOR _ ERROR ,     (  \" Missing   column   ID :     \"     +    columnId )  )  ;", "}", "return   index ;", "}", "METHOD_END"], "methodName": ["columnIndex"], "fileName": "com.facebook.presto.raptor.storage.ShardStats"}, {"methodBody": ["METHOD_START", "{", "return   Optional . ofNullable ( ShardStats . doComputeColumnStats ( orcReader ,    columnId ,    type )  )  ;", "}", "METHOD_END"], "methodName": ["computeColumnStats"], "fileName": "com.facebook.presto.raptor.storage.ShardStats"}, {"methodBody": ["METHOD_START", "{", "int   columnIndex    =    ShardStats . columnIndex ( orcReader . getColumnNames (  )  ,    columnId )  ;", "OrcRecordReader   reader    =    orcReader . createRecordReader ( ImmutableMap . of ( columnIndex ,    type )  ,    TRUE ,    UTC ,    newSimpleAggregatedMemoryContext (  )  )  ;", "if    ( type . equals ( BOOLEAN )  )     {", "return   ShardStats . indexBoolean ( type ,    reader ,    columnIndex ,    columnId )  ;", "}", "if    (  (  ( type . equals ( BIGINT )  )     |  |     ( type . equals ( DATE )  )  )     |  |     ( type . equals ( TIMESTAMP )  )  )     {", "return   ShardStats . indexLong ( type ,    reader ,    columnIndex ,    columnId )  ;", "}", "if    ( type . equals ( DOUBLE )  )     {", "return   ShardStats . indexDouble ( type ,    reader ,    columnIndex ,    columnId )  ;", "}", "if    ( type   instanceof   VarcharType )     {", "return   ShardStats . indexString ( type ,    reader ,    columnIndex ,    columnId )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["doComputeColumnStats"], "fileName": "com.facebook.presto.raptor.storage.ShardStats"}, {"methodBody": ["METHOD_START", "{", "boolean   minSet    =    false ;", "boolean   maxSet    =    false ;", "boolean   min    =    false ;", "boolean   max    =    false ;", "while    ( true )     {", "int   batchSize    =    reader . nextBatch (  )  ;", "if    ( batchSize    <  =     0  )     {", "break ;", "}", "Block   block    =    reader . readBlock ( type ,    columnIndex )  ;", "for    ( int   i    =     0  ;    i    <    batchSize ;    i +  +  )     {", "if    ( block . isNull ( i )  )     {", "continue ;", "}", "boolean   value    =    type . getBoolean ( block ,    i )  ;", "if    (  (  ! minSet )     |  |     (  ( Boolean . compare ( value ,    min )  )     <     0  )  )     {", "minSet    =    true ;", "min    =    value ;", "}", "if    (  (  ! maxSet )     |  |     (  ( Boolean . compare ( value ,    max )  )     >     0  )  )     {", "maxSet    =    true ;", "max    =    value ;", "}", "}", "}", "return   new   Column ( columnId ,     ( minSet    ?    min    :    null )  ,     ( maxSet    ?    max    :    null )  )  ;", "}", "METHOD_END"], "methodName": ["indexBoolean"], "fileName": "com.facebook.presto.raptor.storage.ShardStats"}, {"methodBody": ["METHOD_START", "{", "boolean   minSet    =    false ;", "boolean   maxSet    =    false ;", "double   min    =     0  ;", "double   max    =     0  ;", "while    ( true )     {", "int   batchSize    =    reader . nextBatch (  )  ;", "if    ( batchSize    <  =     0  )     {", "break ;", "}", "Block   block    =    reader . readBlock ( type ,    columnIndex )  ;", "for    ( int   i    =     0  ;    i    <    batchSize ;    i +  +  )     {", "if    ( block . isNull ( i )  )     {", "continue ;", "}", "double   value    =    type . getDouble ( block ,    i )  ;", "if    ( Double . isNaN ( value )  )     {", "continue ;", "}", "if    ( value    =  =     (  -  0  .  0  )  )     {", "value    =     0  .  0  ;", "}", "if    (  (  ! minSet )     |  |     ( value    <    min )  )     {", "minSet    =    true ;", "min    =    value ;", "}", "if    (  (  ! maxSet )     |  |     ( value    >    max )  )     {", "maxSet    =    true ;", "max    =    value ;", "}", "}", "}", "if    ( Double . isInfinite ( min )  )     {", "minSet    =    false ;", "}", "if    ( Double . isInfinite ( max )  )     {", "maxSet    =    false ;", "}", "return   new   Column ( columnId ,     ( minSet    ?    min    :    null )  ,     ( maxSet    ?    max    :    null )  )  ;", "}", "METHOD_END"], "methodName": ["indexDouble"], "fileName": "com.facebook.presto.raptor.storage.ShardStats"}, {"methodBody": ["METHOD_START", "{", "boolean   minSet    =    false ;", "boolean   maxSet    =    false ;", "long   min    =     0  ;", "long   max    =     0  ;", "while    ( true )     {", "int   batchSize    =    reader . nextBatch (  )  ;", "if    ( batchSize    <  =     0  )     {", "break ;", "}", "Block   block    =    reader . readBlock ( type ,    columnIndex )  ;", "for    ( int   i    =     0  ;    i    <    batchSize ;    i +  +  )     {", "if    ( block . isNull ( i )  )     {", "continue ;", "}", "long   value    =    type . getLong ( block ,    i )  ;", "if    (  (  ! minSet )     |  |     ( value    <    min )  )     {", "minSet    =    true ;", "min    =    value ;", "}", "if    (  (  ! maxSet )     |  |     ( value    >    max )  )     {", "maxSet    =    true ;", "max    =    value ;", "}", "}", "}", "return   new   Column ( columnId ,     ( minSet    ?    min    :    null )  ,     ( maxSet    ?    max    :    null )  )  ;", "}", "METHOD_END"], "methodName": ["indexLong"], "fileName": "com.facebook.presto.raptor.storage.ShardStats"}, {"methodBody": ["METHOD_START", "{", "boolean   minSet    =    false ;", "boolean   maxSet    =    false ;", "Slice   min    =    null ;", "Slice   max    =    null ;", "while    ( true )     {", "int   batchSize    =    reader . nextBatch (  )  ;", "if    ( batchSize    <  =     0  )     {", "break ;", "}", "Block   block    =    reader . readBlock ( type ,    columnIndex )  ;", "for    ( int   i    =     0  ;    i    <    batchSize ;    i +  +  )     {", "if    ( block . isNull ( i )  )     {", "continue ;", "}", "Slice   slice    =    type . getSlice ( block ,    i )  ;", "slice    =     . truncateIndexValue ( slice )  ;", "if    (  (  ! minSet )     |  |     (  ( slice . compareTo ( min )  )     <     0  )  )     {", "minSet    =    true ;", "min    =    slice ;", "}", "if    (  (  ! maxSet )     |  |     (  ( slice . compareTo ( max )  )     >     0  )  )     {", "maxSet    =    true ;", "max    =    slice ;", "}", "}", "}", "return   new   ColumnStats ( columnId ,     ( minSet    ?    min . toStringUtf 8  (  )     :    null )  ,     ( maxSet    ?    max . toStringUtf 8  (  )     :    null )  )  ;", "}", "METHOD_END"], "methodName": ["indexString"], "fileName": "com.facebook.presto.raptor.storage.ShardStats"}, {"methodBody": ["METHOD_START", "{", "if    (  ( slice . length (  )  )     >     ( ShardStats . MAX _ BINARY _ INDEX _ SIZE )  )     {", "return   slice . slice (  0  ,    ShardStats . MAX _ BINARY _ INDEX _ SIZE )  ;", "}", "return   slice ;", "}", "METHOD_END"], "methodName": ["truncateIndexValue"], "fileName": "com.facebook.presto.raptor.storage.ShardStats"}, {"methodBody": ["METHOD_START", "{", "return   getPageSource ( shardUuid ,    bucketNumber ,    columnIds ,    columnTypes ,    effectivePredicate ,    readerAttributes ,    OptionalLong . empty (  )  )  ;", "}", "METHOD_END"], "methodName": ["getPageSource"], "fileName": "com.facebook.presto.raptor.storage.StorageManager"}, {"methodBody": ["METHOD_START", "{", "return   compactionInterval ;", "}", "METHOD_END"], "methodName": ["getCompactionInterval"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "return   dataDirectory ;", "}", "METHOD_END"], "methodName": ["getDataDirectory"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "return   deletionThreads ;", "}", "METHOD_END"], "methodName": ["getDeletionThreads"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "return   maxBufferSize ;", "}", "METHOD_END"], "methodName": ["getMaxBufferSize"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "return   maxShardRows ;", "}", "METHOD_END"], "methodName": ["getMaxShardRows"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "return   maxShardSize ;", "}", "METHOD_END"], "methodName": ["getMaxShardSize"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "return   minAvailableSpace ;", "}", "METHOD_END"], "methodName": ["getMinAvailableSpace"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "return   missingShardDiscoveryInterval ;", "}", "METHOD_END"], "methodName": ["getMissingShardDiscoveryInterval"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "return   oneSplitPerBucketThreshold ;", "}", "METHOD_END"], "methodName": ["getOneSplitPerBucketThreshold"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "return   orcMaxMergeDistance ;", "}", "METHOD_END"], "methodName": ["getOrcMaxMergeDistance"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "return   orcMaxReadSize ;", "}", "METHOD_END"], "methodName": ["getOrcMaxReadSize"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "return   orcStreamBufferSize ;", "}", "METHOD_END"], "methodName": ["getOrcStreamBufferSize"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "return   organizationInterval ;", "}", "METHOD_END"], "methodName": ["getOrganizationInterval"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "return   organizationThreads ;", "}", "METHOD_END"], "methodName": ["getOrganizationThreads"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "return   recoveryThreads ;", "}", "METHOD_END"], "methodName": ["getRecoveryThreads"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "return   DateTimeZone . forTimeZone ( TimeZone . getTimeZone ( shardDayBoundaryTimeZone )  )  ;", "}", "METHOD_END"], "methodName": ["getShardDayBoundaryTimeZone"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "return   shardEjectorInterval ;", "}", "METHOD_END"], "methodName": ["getShardEjectorInterval"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "return   shardRecoveryTimeout ;", "}", "METHOD_END"], "methodName": ["getShardRecoveryTimeout"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "return   compactionEnabled ;", "}", "METHOD_END"], "methodName": ["isCompactionEnabled"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "return   orcLazyReadSmallRanges ;", "}", "METHOD_END"], "methodName": ["isOrcLazyReadSmallRanges"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "return   organizationEnabled ;", "}", "METHOD_END"], "methodName": ["isOrganizationEnabled"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "this . compactionEnabled    =    compactionEnabled ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setCompactionEnabled"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "this . compactionInterval    =    compactionInterval ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setCompactionInterval"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "this . dataDirectory    =    dataDirectory ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setDataDirectory"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "this . deletionThreads    =    deletionThreads ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setDeletionThreads"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "this . maxBufferSize    =    maxBufferSize ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setMaxBufferSize"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "this . maxShardRows    =    maxShardRows ;", "turn   this ;", "}", "METHOD_END"], "methodName": ["setMaxShardRows"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "this . maxShardSize    =    maxShardSize ;", "turn   this ;", "}", "METHOD_END"], "methodName": ["setMaxShardSize"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "this . minAvailableSpace    =    minAvailableSpace ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setMinAvailableSpace"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "this . missingShardDiscoveryInterval    =    missingShardDiscoveryInterval ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setMissingShardDiscoveryInterval"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "this . oneSplitPerBucketThreshold    =    oneSplitPerBucketThreshold ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setOneSplitPerBucketThreshold"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "this . orcLazyReadSmallRanges    =    orcLazyReadSmallRanges ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setOrcLazyReadSmallRanges"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "this . orcMaxMergeDistance    =    orcMaxMergeDistance ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setOrcMaxMergeDistance"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "this . orcMaxReadSize    =    orcMaxReadSize ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setOrcMaxReadSize"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "this . orcStreamBufferSize    =    orcStreamBufferSize ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setOrcStreamBufferSize"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "this . organizationEnabled    =    organizationEnabled ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setOrganizationEnabled"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "this . organizationInterval    =    organizationInterval ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setOrganizationInterval"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "this . organizationThreads    =    organizationThreads ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setOrganizationThreads"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "this . recoveryThreads    =    recoveryThreads ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setRecoveryThreads"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "this . shardDayBoundaryTimeZone    =    timeZone ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setShardDayBoundaryTimeZone"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "this . shardEjectorInterval    =    shardEjectorInterval ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setShardEjectorInterval"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "this . shardRecoveryTimeout    =    shardRecoveryTimeout ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setShardRecoveryTimeout"], "fileName": "com.facebook.presto.raptor.storage.StorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "return   new   StorageType ( String . format (  \"  % s <  % s >  \"  ,    LIST _ TYPE _ NAME ,    elementStorageType . getHiveTypeName (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["arrayOf"], "fileName": "com.facebook.presto.raptor.storage.StorageType"}, {"methodBody": ["METHOD_START", "{", "return   new   StorageType ( String . format (  \"  % s (  % d ,  % d )  \"  ,    DECIMAL _ TYPE _ NAME ,    precision ,    scale )  )  ;", "}", "METHOD_END"], "methodName": ["decimal"], "fileName": "com.facebook.presto.raptor.storage.StorageType"}, {"methodBody": ["METHOD_START", "{", "return   hiveTypeName ;", "}", "METHOD_END"], "methodName": ["getHiveTypeName"], "fileName": "com.facebook.presto.raptor.storage.StorageType"}, {"methodBody": ["METHOD_START", "{", "return   new   StorageType ( String . format (  \"  % s <  % s ,  % s >  \"  ,    MAP _ TYPE _ NAME ,    keyStorageType . getHiveTypeName (  )  ,    valueStorageType . getHiveTypeName (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["mapOf"], "fileName": "com.facebook.presto.raptor.storage.StorageType"}, {"methodBody": ["METHOD_START", "{", "int   actualMoves    =    balancer . balance (  )  ;", "assertEquals ( actualMoves ,    expectedMoves )  ;", ". ClusterState   clusterState    =    balancer . fetchClusterState (  )  ;", "for    ( Distribution   distribution    :    clusterState . getDistributionAssignments (  )  . keySet (  )  )     {", "Multiset < String >    allocationCounts    =    HashMultiset . create (  )  ;", "clusterState . getDistributionAssignments (  )  . get ( distribution )  . stream (  )  . map (  . BucketAssignment :  : getNodeIdentifier )  . forEach ( allocationCounts :  : add )  ;", "double   bucketsPerNode    =     (  1  .  0     *     ( allocationCounts . size (  )  )  )     /     ( clusterState . getActiveNodes (  )  . size (  )  )  ;", "for    ( String   node    :    allocationCounts )     {", "Assertions . assertGreaterThanOrEqual ( allocationCounts . count ( node )  ,     (  ( int )     ( Math . floor ( bucketsPerNode )  )  )  ,     ( node    +     \"    has   fewer   buckets   than   expected \"  )  )  ;", "Assertions . assertLessThanOrEqual ( allocationCounts . count ( node )  ,     (  ( int )     ( Math . ceil ( bucketsPerNode )  )  )  ,     ( node    +     \"    has   more   buckets   than   expected \"  )  )  ;", "}", "}", "assertEquals ( balancer . balance (  )  ,     0  )  ;", "}", "METHOD_END"], "methodName": ["assertBalancing"], "fileName": "com.facebook.presto.raptor.storage.TestBucketBalancer"}, {"methodBody": ["METHOD_START", "{", "return   new   BucketNode ( bucketNumber ,    nodeIdentifier )  ;", "}", "METHOD_END"], "methodName": ["bucketNode"], "fileName": "com.facebook.presto.raptor.storage.TestBucketBalancer"}, {"methodBody": ["METHOD_START", "{", "checkArgument (  (  ( nodes . size (  )  )     =  =     ( buckets . length )  )  )  ;", "ImmutableList . Builder < BucketNode >    assignments    =    ImmutableList . builder (  )  ;", "int   bucketNumber    =     0  ;", "for    ( int   i    =     0  ;    i    <     ( buckets . length )  ;    i +  +  )     {", "for    ( int   j    =     0  ;    j    <     ( buckets [ i ]  )  ;    j +  +  )     {", "shardManager . updateBucketAssignment ( distributionId ,    bucketNumber ,    nodes . get ( i )  )  ;", "assignments . add (  . bucketNode ( bucketNumber ,    nodes . get ( i )  )  )  ;", "bucketNumber +  +  ;", "}", "}", "return   assignments . build (  )  ;", "}", "METHOD_END"], "methodName": ["createAssignments"], "fileName": "com.facebook.presto.raptor.storage.TestBucketBalancer"}, {"methodBody": ["METHOD_START", "{", "return   createBucketedTable ( tableName ,    distributionId ,    DataSize . valueOf (  \"  0 B \"  )  )  ;", "}", "METHOD_END"], "methodName": ["createBucketedTable"], "fileName": "com.facebook.presto.raptor.storage.TestBucketBalancer"}, {"methodBody": ["METHOD_START", "{", "MetadataDao   dao    =    dbi . onDemand ( MetadataDao . class )  ;", "long   tableId    =    dao . insertTable (  \" test \"  ,    tableName ,    false ,    false ,    distributionId ,     0  )  ;", "List < ColumnInfo >    columnsA    =    ImmutableList . of ( new   ColumnInfo (  1  ,    BIGINT )  )  ;", "shardManager . createTable ( tableId ,    columnsA ,    false ,    OptionalLong . empty (  )  )  ;", "metadataDao . updateTableStats ( tableId ,     1  0  2  4  ,     (  (  1  0  2  4     *     1  0  2  4  )     *     1  0  2  4  )  ,    comsedSize . toBytes (  )  ,     (  ( comsedSize . toBytes (  )  )     *     2  )  )  ;", "return   tableId ;", "}", "METHOD_END"], "methodName": ["createBucketedTable"], "fileName": "com.facebook.presto.raptor.storage.TestBucketBalancer"}, {"methodBody": ["METHOD_START", "{", "MetadataDao   dao    =    dbi . onDemand ( MetadataDao . class )  ;", "long   distributionId    =    dao . insertDistribution ( distributionName ,    Distribution . serializeColumnTypes ( ImmutableList . of ( BIGINT )  )  ,    bucketCount )  ;", "shardManager . creates ( distributionId ,    bucketCount )  ;", "return   distributionId ;", "}", "METHOD_END"], "methodName": ["createDistribution"], "fileName": "com.facebook.presto.raptor.storage.TestBucketBalancer"}, {"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . metadata . PrestoNode ( nodeIdentifier ,    URI . create (  \" http :  /  / test \"  )  ,    NodeVersion . UNKNOWN ,    false )  ;", "}", "METHOD_END"], "methodName": ["createTestingNode"], "fileName": "com.facebook.presto.raptor.storage.TestBucketBalancer"}, {"methodBody": ["METHOD_START", "{", "TypeRegistry   typeRegistry    =    new   TypeRegistry (  )  ;", "dbi    =    new   DBI (  (  \" jdbc : h 2  : mem : test \"     +     ( System . nanoTime (  )  )  )  )  ;", "dbi . registerMapper ( new   Distribution . Mapper ( typeRegistry )  )  ;", "dummyHandle    =    dbi . open (  )  ;", "SchemaDaoUtil . createTablesWithRetry ( dbi )  ;", "metadataDao    =    dbi . onDemand ( MetadataDao . class )  ;", "nodeManager    =    new   testing . TestingNodeManager ( TestBucketBalancer . AVAILABLE _ WORKERS . stream (  )  . map ( TestBucketBalancer :  : createTestingNode )  . collect ( Collectors . toList (  )  )  )  ;", "NodeSupplier   nodeSupplier    =    nodeManager :  : getWorkerNodes ;", "shardManager    =    TestDatabaseShardManager . createShardManager ( dbi ,    nodeSupplier )  ;", "balancer    =    new   BucketBalancer ( nodeSupplier ,    shardManager ,    true ,    new   Duration (  1  ,    TimeUnit . DAYS )  ,    true ,    true ,     \" test \"  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.raptor.storage.TestBucketBalancer"}, {"methodBody": ["METHOD_START", "{", "if    (  ( dummyHandle )     !  =    null )     {", "dummyHandle . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["teardown"], "fileName": "com.facebook.presto.raptor.storage.TestBucketBalancer"}, {"methodBody": ["METHOD_START", "{", "long   distributionA    =    createDistribution (  \" distA \"  ,     1  7  )  ;", "createBucketedTable (  \" testA \"  ,    distributionA )  ;", "createAssignments ( distributionA ,     . AVAILABLE _ WORKERS ,     1  1  ,     3  ,     1  ,     1  ,     1  )  ;", "long   distributionB    =    createDistribution (  \" distB \"  ,     1  0  )  ;", "createBucketedTable (  \" testB \"  ,    distributionB )  ;", "createAssignments ( distributionB ,     . AVAILABLE _ WORKERS ,     8  ,     2  ,     0  ,     0  ,     0  )  ;", "long   distributionC    =    createDistribution (  \" distC \"  ,     4  )  ;", "createBucketedTable (  \" testC \"  ,    distributionC )  ;", "createAssignments ( distributionC ,     . AVAILABLE _ WORKERS ,     2  ,     2  ,     0  ,     0  ,     0  )  ;", ". assertBalancing ( balancer ,     1  5  )  ;", "}", "METHOD_END"], "methodName": ["testMultipleDistributionUnbalanced"], "fileName": "com.facebook.presto.raptor.storage.TestBucketBalancer"}, {"methodBody": ["METHOD_START", "{", "long   distributionA    =    createDistribution (  \" distA \"  ,     4  )  ;", "createBucketedTable (  \" testA \"  ,    distributionA ,    DataSize . valueOf (  \"  4 B \"  )  )  ;", "createAssignments ( distributionA ,     . AVAILABLE _ WORKERS ,     1  ,     1  ,     1  ,     1  ,     0  )  ;", "long   distributionB    =    createDistribution (  \" distB \"  ,     4  )  ;", "createBucketedTable (  \" testB \"  ,    distributionB ,    DataSize . valueOf (  \"  4 B \"  )  )  ;", "createAssignments ( distributionB ,     . AVAILABLE _ WORKERS ,     1  ,     1  ,     1  ,     0  ,     1  )  ;", "long   distributionC    =    createDistribution (  \" distC \"  ,     2  )  ;", "createBucketedTable (  \" testC \"  ,    distributionC ,    DataSize . valueOf (  \"  2 B \"  )  )  ;", "createAssignments ( distributionC ,     . AVAILABLE _ WORKERS ,     0  ,     0  ,     0  ,     2  ,     0  )  ;", ". assertBalancing ( balancer ,     1  )  ;", "assertEquals ( balancer . fetchClusterState (  )  . getAssignedBytes (  )  . values (  )  . stream (  )  . distinct (  )  . count (  )  ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testMultipleDistributionUnbalancedWithDiskSpace"], "fileName": "com.facebook.presto.raptor.storage.TestBucketBalancer"}, {"methodBody": ["METHOD_START", "{", "long   distributionA    =    createDistribution (  \" distA \"  ,     4  )  ;", "createBucketedTable (  \" testA \"  ,    distributionA ,    DataSize . valueOf (  \"  4 B \"  )  )  ;", "createAssignments ( distributionA ,     . AVAILABLE _ WORKERS ,     1  ,     1  ,     1  ,     1  ,     0  )  ;", "long   distributionB    =    createDistribution (  \" distB \"  ,     4  )  ;", "createBucketedTable (  \" testB \"  ,    distributionB ,    DataSize . valueOf (  \"  4 B \"  )  )  ;", "createAssignments ( distributionB ,     . AVAILABLE _ WORKERS ,     2  ,     1  ,     1  ,     0  ,     0  )  ;", ". assertBalancing ( balancer ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testMultipleDistributionUnbalancedWithDiskSpace2"], "fileName": "com.facebook.presto.raptor.storage.TestBucketBalancer"}, {"methodBody": ["METHOD_START", "{", "long   distributionA    =    createDistribution (  \" distA \"  ,     4  )  ;", "createBucketedTable (  \" testA \"  ,    distributionA ,    DataSize . valueOf (  \"  4 B \"  )  )  ;", "createAssignments ( distributionA ,     . AVAILABLE _ WORKERS ,     4  ,     0  ,     0  ,     0  ,     0  )  ;", "long   distributionB    =    createDistribution (  \" distB \"  ,     4  )  ;", "createBucketedTable (  \" testB \"  ,    distributionB ,    DataSize . valueOf (  \"  4 B \"  )  )  ;", "createAssignments ( distributionB ,     . AVAILABLE _ WORKERS ,     4  ,     0  ,     0  ,     0  ,     0  )  ;", "long   distributionC    =    createDistribution (  \" distC \"  ,     4  )  ;", "createBucketedTable (  \" testC \"  ,    distributionC ,    DataSize . valueOf (  \"  4 B \"  )  )  ;", "createAssignments ( distributionC ,     . AVAILABLE _ WORKERS ,     4  ,     0  ,     0  ,     0  ,     0  )  ;", "long   distributionD    =    createDistribution (  \" distD \"  ,     4  )  ;", "createBucketedTable (  \" testD \"  ,    distributionD ,    DataSize . valueOf (  \"  4 B \"  )  )  ;", "createAssignments ( distributionD ,     . AVAILABLE _ WORKERS ,     4  ,     0  ,     0  ,     0  ,     0  )  ;", "long   distributionE    =    createDistribution (  \" distE \"  ,     4  )  ;", "createBucketedTable (  \" testE \"  ,    distributionE ,    DataSize . valueOf (  \"  4 B \"  )  )  ;", "createAssignments ( distributionE ,     . AVAILABLE _ WORKERS ,     4  ,     0  ,     0  ,     0  ,     0  )  ;", ". assertBalancing ( balancer ,     1  5  )  ;", "}", "METHOD_END"], "methodName": ["testMultipleDistributionUnbalancedWorstCase"], "fileName": "com.facebook.presto.raptor.storage.TestBucketBalancer"}, {"methodBody": ["METHOD_START", "{", "long   distributionId    =    createDistribution (  \" distA \"  ,     1  6  )  ;", "createBucketedTable (  \" testA \"  ,    distributionId )  ;", "createBucketedTable (  \" testB \"  ,    distributionId )  ;", "createAssignments ( distributionId ,     . AVAILABLE _ WORKERS ,     4  ,     3  ,     3  ,     3  ,     3  )  ;", ". assertBalancing ( balancer ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testSingleDistributionBalanced"], "fileName": "com.facebook.presto.raptor.storage.TestBucketBalancer"}, {"methodBody": ["METHOD_START", "{", "long   distributionId    =    createDistribution (  \" distA \"  ,     1  6  )  ;", "createBucketedTable (  \" testA \"  ,    distributionId )  ;", "createBucketedTable (  \" testB \"  ,    distributionId )  ;", "createAssignments ( distributionId ,     . AVAILABLE _ WORKERS ,     4  ,     4  ,     3  ,     3  ,     2  )  ;", ". assertBalancing ( balancer ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testSingleDistributionSlightlyUnbalanced"], "fileName": "com.facebook.presto.raptor.storage.TestBucketBalancer"}, {"methodBody": ["METHOD_START", "{", "long   distributionId    =    createDistribution (  \" distA \"  ,     1  6  )  ;", "createBucketedTable (  \" testA \"  ,    distributionId )  ;", "createBucketedTable (  \" testB \"  ,    distributionId )  ;", "createAssignments ( distributionId ,     . AVAILABLE _ WORKERS ,     1  0  ,     3  ,     1  ,     1  ,     1  )  ;", ". assertBalancing ( balancer ,     6  )  ;", "}", "METHOD_END"], "methodName": ["testSingleDistributionUnbalanced"], "fileName": "com.facebook.presto.raptor.storage.TestBucketBalancer"}, {"methodBody": ["METHOD_START", "{", "long   distributionId    =    createDistribution (  \" distA \"  ,     1  6  )  ;", "createBucketedTable (  \" testA \"  ,    distributionId )  ;", "createBucketedTable (  \" testB \"  ,    distributionId )  ;", "ImmutableList < String >    nodes    =    ImmutableList .  < String > builder (  )  . addAll (  . AVAILABLE _ WORKERS )  . add (  \" node 6  \"  )  . build (  )  ;", "createAssignments ( distributionId ,    nodes ,     1  1  ,     1  ,     1  ,     1  ,     1  ,     1  )  ;", ". assertBalancing ( balancer ,     8  )  ;", "}", "METHOD_END"], "methodName": ["testSingleDistributionUnbalancedWithDeadNode"], "fileName": "com.facebook.presto.raptor.storage.TestBucketBalancer"}, {"methodBody": ["METHOD_START", "{", "long   distributionId    =    createDistribution (  \" distA \"  ,     1  6  )  ;", "createBucketedTable (  \" testA \"  ,    distributionId )  ;", "createBucketedTable (  \" testB \"  ,    distributionId )  ;", "createAssignments ( distributionId ,     . AVAILABLE _ WORKERS ,     1  2  ,     1  ,     1  ,     1  ,     1  )  ;", "nodeManager . addNode (  . createTestingNode (  \" node 6  \"  )  )  ;", ". assertBalancing ( balancer ,     9  )  ;", "}", "METHOD_END"], "methodName": ["testSingleDistributionUnbalancedWithNewNode"], "fileName": "com.facebook.presto.raptor.storage.TestBucketBalancer"}, {"methodBody": ["METHOD_START", "{", "ConfigAssertions . assertRecordedDefaults ( ConfigAssertions . recordDefaults ( BucketBalancerConfig . class )  . setBalancerEnabled ( true )  . setBalancerInterval ( new   Duration (  6  ,    TimeUnit . HOURS )  )  )  ;", "}", "METHOD_END"], "methodName": ["testDefaults"], "fileName": "com.facebook.presto.raptor.storage.TestBucketBalancerConfig"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    properties    =    new   Builder < String ,    String >  (  )  . put (  \" storage . balancer - enabled \"  ,     \" false \"  )  . put (  \" storage . balancer - interval \"  ,     \"  5 h \"  )  . build (  )  ;", "expected    =    new    (  )  . setBalancerEnabled ( false )  . setBalancerInterval ( new   Duration (  5  ,    TimeUnit . HOURS )  )  ;", "ConfigAssertions . assertFullMapping ( properties ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testExplicitPropertyMappings"], "fileName": "com.facebook.presto.raptor.storage.TestBucketBalancerConfig"}, {"methodBody": ["METHOD_START", "{", "temporary    =    createTempDir (  )  ;", "store    =    new    ( temporary )  ;", "store . start (  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.raptor.storage.TestFileStorageService"}, {"methodBody": ["METHOD_START", "{", "deleteRecursively ( temporary . toPath (  )  ,    ALLOW _ INSECURE )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.raptor.storage.TestFileStorageService"}, {"methodBody": ["METHOD_START", "{", "UUID   uuid    =    UUID . fromString (  \"  7  0  1 e 1 a 7  9  -  7  4 f 7  -  4 f 5  6  - b 4  3  8  - b 4  1 e 8 e 7 d 0  1  9 d \"  )  ;", "File   staging    =    new   File ( temporary ,    String . format (  \" staging /  % s . orc \"  ,    uuid )  )  ;", "File       =    new   File ( temporary ,    String . format (  \"  /  7  0  /  1 e /  % s . orc \"  ,    uuid )  )  ;", "File   quarantine    =    new   File ( temporary ,    String . format (  \" quarantine /  % s . orc \"  ,    uuid )  )  ;", "assertEquals ( store . getStagingFile ( uuid )  ,    staging )  ;", "assertEquals ( store . getStorageFile ( uuid )  ,     )  ;", "assertEquals ( store . getQuarantineFile ( uuid )  ,    quarantine )  ;", "}", "METHOD_END"], "methodName": ["testFilePaths"], "fileName": "com.facebook.presto.raptor.storage.TestFileStorageService"}, {"methodBody": ["METHOD_START", "{", "UUID   uuid    =    UUID . fromString (  \"  7  0  1 e 1 a 7  9  -  7  4 f 7  -  4 f 5  6  - b 4  3  8  - b 4  1 e 8 e 7 d 0  1  9 d \"  )  ;", "File   expected    =    new   File (  \"  / test \"  ,    String . format (  \"  7  0  /  1 e /  % s . orc \"  ,    uuid )  )  ;", "assertEquals (  . getFileSystemPath ( new   File (  \"  / test \"  )  ,    uuid )  ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testGetFileSystemPath"], "fileName": "com.facebook.presto.raptor.storage.TestFileStorageService"}, {"methodBody": ["METHOD_START", "{", "Set < UUID >    shards    =    ImmutableSet .  < UUID > builder (  )  . add ( UUID . fromString (  \"  9 e 7 abb 5  1  -  5  6 b 5  -  4  1  8  0  -  9  1  6  4  - ad 0  8 ddfe 7 c 6  3  \"  )  )  . add ( UUID . fromString (  \" bbfc 3  8  9  5  -  1 c 3 d -  4 bf 4  - bca 4  -  7 b 1  1  9  8 b 1  7  5  9 e \"  )  )  . build (  )  ;", "for    ( UUID   shard    :    shards )     {", "File   file    =    store . getStorageFile ( shard )  ;", "store . createParents ( file )  ;", "assertTrue ( file . createNewFile (  )  )  ;", "}", "File   storage    =    new   File ( temporary ,     \" storage \"  )  ;", "assertTrue ( new   File ( storage ,     \" abc \"  )  . mkdir (  )  )  ;", "assertTrue ( new   File ( storage ,     \" ab / cd \"  )  . mkdirs (  )  )  ;", "assertTrue ( new   File ( storage ,    String . format (  \" ab / cd /  % s . junk \"  ,    UUID . randomUUID (  )  )  )  . createNewFile (  )  )  ;", "assertTrue ( new   File ( storage ,     \" ab / cd / junk . orc \"  )  . createNewFile (  )  )  ;", "assertEquals ( store . gethards (  )  ,    shards )  ;", "}", "METHOD_END"], "methodName": ["testGetStorageShards"], "fileName": "com.facebook.presto.raptor.storage.TestFileStorageService"}, {"methodBody": ["METHOD_START", "{", "File   staging    =    new   File ( temporary ,     \" staging \"  )  ;", "File       =    new   File ( temporary ,     \"  \"  )  ;", "File   quarantine    =    new   File ( temporary ,     \" quarantine \"  )  ;", "assertDirectory ( staging )  ;", "assertDirectory (  )  ;", "assertDirectory ( quarantine )  ;", "File   file    =    store . getStagingFile ( UUID . randomUUID (  )  )  ;", "store . createParents ( file )  ;", "assertFalse ( file . exists (  )  )  ;", "assertTrue ( file . createNewFile (  )  )  ;", "assertFile ( file )  ;", "store . stop (  )  ;", "assertFalse ( file . exists (  )  )  ;", "assertFalse ( staging . exists (  )  )  ;", "assertDirectory (  )  ;", "assertDirectory ( quarantine )  ;", "}", "METHOD_END"], "methodName": ["testStop"], "fileName": "com.facebook.presto.raptor.storage.TestFileStorageService"}, {"methodBody": ["METHOD_START", "{", "ShardRecoveryManager . MissingShardComparator   comparator    =    new   ShardRecoveryManager . MissingShardComparator (  )  ;", "assertEquals ( comparator . compare ( new    . DummyMissingShardRunnable ( false )  ,    new    . DummyMissingShardRunnable ( false )  )  ,     0  )  ;", "assertEquals ( comparator . compare ( new    . DummyMissingShardRunnable ( false )  ,    new    . DummyMissingShardRunnable ( true )  )  ,     1  )  ;", "assertEquals ( comparator . compare ( new    . DummyMissingShardRunnable ( true )  ,    new    . DummyMissingShardRunnable ( false )  )  ,     (  -  1  )  )  ;", "assertEquals ( comparator . compare ( new    . DummyMissingShardRunnable ( true )  ,    new    . DummyMissingShardRunnable ( true )  )  ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testOrdering"], "fileName": "com.facebook.presto.raptor.storage.TestMissingShardComparator"}, {"methodBody": ["METHOD_START", "{", "temporary    =    createTempDir (  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.raptor.storage.TestOrcFileRewriter"}, {"methodBody": ["METHOD_START", "{", "deleteRecursively ( temporary . toPath (  )  ,    ALLOW _ INSECURE )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.raptor.storage.TestOrcFileRewriter"}, {"methodBody": ["METHOD_START", "{", "TypeManager   typeManager    =    new   TypeRegistry (  )  ;", "new   metadata . FunctionRegistry ( typeManager ,    new   block . BlockEncodingManager ( typeManager )  ,    new   FeaturesConfig (  )  )  ;", "ArrayType   arrayType    =    new   ArrayType ( BIGINT )  ;", "ArrayType   arrayOfArrayType    =    new   ArrayType ( arrayType )  ;", "Type   mapType    =    typeManager . getParameterizedType ( MAP ,    ImmutableList . of ( TypeSignatureParameter . of ( createVarcharType (  5  )  . getTypeSignature (  )  )  ,    TypeSignatureParameter . of ( BOOLEAN . getTypeSignature (  )  )  )  )  ;", "List < Long >    columnIds    =    ImmutableList . of (  3 L ,     7 L ,     9 L ,     1  0 L ,     1  1 L )  ;", "List < Type >    columnTypes    =    ImmutableList . of ( BIGINT ,    createVarcharType (  2  0  )  ,    arrayType ,    mapType ,    arrayOfArrayType )  ;", "File   file    =    new   File ( temporary ,    UUID . randomUUID (  )  . toString (  )  )  ;", "try    ( OrcFileWriter   writer    =    new   OrcFileWriter ( columnIds ,    columnTypes ,    file )  )     {", "List < Page >    pages    =    RowPagesBuilder . rowPagesBuilder ( columnTypes )  . row (  1  2  3 L ,     \" hello \"  ,    arrayBlockOf ( BIGINT ,     1  ,     2  )  ,    mapBlockOf ( createVarcharType (  5  )  ,    BOOLEAN ,     \" k 1  \"  ,    true )  ,    arrayBlockOf ( arrayType ,    arrayBlockOf ( BIGINT ,     5  )  )  )  . row (  7  7  7 L ,     \" sky \"  ,    arrayBlockOf ( BIGINT ,     3  ,     4  )  ,    mapBlockOf ( createVarcharType (  5  )  ,    BOOLEAN ,     \" k 2  \"  ,    false )  ,    arrayBlockOf ( arrayType ,    arrayBlockOf ( BIGINT ,     6  )  )  )  . row (  4  5  6 L ,     \" bye \"  ,    arrayBlockOf ( BIGINT ,     5  ,     6  )  ,    mapBlockOf ( createVarcharType (  5  )  ,    BOOLEAN ,     \" k 3  \"  ,    true )  ,    arrayBlockOf ( arrayType ,    arrayBlockOf ( BIGINT ,     7  )  )  )  . row (  8  8  8 L ,     \" world \"  ,    arrayBlockOf ( BIGINT ,     7  ,     8  )  ,    mapBlockOf ( createVarcharType (  5  )  ,    BOOLEAN ,     \" k 4  \"  ,    true )  ,    arrayBlockOf ( arrayType ,    null ,    arrayBlockOf ( BIGINT ,     8  )  ,    null )  )  . row (  9  9  9 L ,     \" done \"  ,    arrayBlockOf ( BIGINT ,     9  ,     1  0  )  ,    mapBlockOf ( createVarcharType (  5  )  ,    BOOLEAN ,     \" k 5  \"  ,    true )  ,    arrayBlockOf ( arrayType ,    arrayBlockOf ( BIGINT ,     9  ,     1  0  )  )  )  . build (  )  ;", "writer . appendPages ( pages )  ;", "}", "try    ( OrcDataSource   dataSource    =    OrcTestingUtil . fileOrcDataSource ( file )  )     {", "OrcRecordReader   reader    =    OrcTestingUtil . createReader ( dataSource ,    columnIds ,    columnTypes )  ;", "assertEquals ( reader . getReaderRowCount (  )  ,     5  )  ;", "assertEquals ( reader . getFileRowCount (  )  ,     5  )  ;", "assertEquals ( reader . getSplitLength (  )  ,    file . length (  )  )  ;", "assertEquals ( reader . nextBatch (  )  ,     5  )  ;", "Block   column 0     =    reader . readBlock ( BIGINT ,     0  )  ;", "assertEquals ( column 0  . getPositionCount (  )  ,     5  )  ;", "for    ( int   i    =     0  ;    i    <     5  ;    i +  +  )     {", "assertEquals ( column 0  . isNull ( i )  ,    false )  ;", "}", "assertEquals ( BIGINT . getLong ( column 0  ,     0  )  ,     1  2  3 L )  ;", "assertEquals ( BIGINT . getLong ( column 0  ,     1  )  ,     7  7  7 L )  ;", "assertEquals ( BIGINT . getLong ( column 0  ,     2  )  ,     4  5  6 L )  ;", "assertEquals ( BIGINT . getLong ( column 0  ,     3  )  ,     8  8  8 L )  ;", "assertEquals ( BIGINT . getLong ( column 0  ,     4  )  ,     9  9  9 L )  ;", "Block   column 1     =    reader . readBlock ( createVarcharType (  2  0  )  ,     1  )  ;", "assertEquals ( column 1  . getPositionCount (  )  ,     5  )  ;", "for    ( int   i    =     0  ;    i    <     5  ;    i +  +  )     {", "assertEquals ( column 1  . isNull ( i )  ,    false )  ;", "}", "assertEquals ( createVarcharType (  2  0  )  . getSlice ( column 1  ,     0  )  ,    Slices . utf 8 Slice (  \" hello \"  )  )  ;", "assertEquals ( createVarcharType (  2  0  )  . getSlice ( column 1  ,     1  )  ,    Slices . utf 8 Slice (  \" sky \"  )  )  ;", "assertEquals ( createVarcharType (  2  0  )  . getSlice ( column 1  ,     2  )  ,    Slices . utf 8 Slice (  \" bye \"  )  )  ;", "assertEquals ( createVarcharType (  2  0  )  . getSlice ( column 1  ,     3  )  ,    Slices . utf 8 Slice (  \" world \"  )  )  ;", "assertEquals ( createVarcharType (  2  0  )  . getSlice ( column 1  ,     4  )  ,    Slices . utf 8 Slice (  \" done \"  )  )  ;", "Block   column 2     =    reader . readBlock ( arrayType ,     2  )  ;", "assertEquals ( column 2  . getPositionCount (  )  ,     5  )  ;", "for    ( int   i    =     0  ;    i    <     5  ;    i +  +  )     {", "assertEquals ( column 2  . isNull ( i )  ,    false )  ;", "}", "assertTrue ( arrayBlocksEqual ( BIGINT ,    arrayType . getObject ( column 2  ,     0  )  ,    arrayBlockOf ( BIGINT ,     1  ,     2  )  )  )  ;", "assertTrue ( arrayBlocksEqual ( BIGINT ,    arrayType . getObject ( column 2  ,     1  )  ,    arrayBlockOf ( BIGINT ,     3  ,     4  )  )  )  ;", "assertTrue ( arrayBlocksEqual ( BIGINT ,    arrayType . getObject ( column 2  ,     2  )  ,    arrayBlockOf ( BIGINT ,     5  ,     6  )  )  )  ;", "assertTrue ( arrayBlocksEqual ( BIGINT ,    arrayType . getObject ( column 2  ,     3  )  ,    arrayBlockOf ( BIGINT ,     7  ,     8  )  )  )  ;", "assertTrue ( arrayBlocksEqual ( BIGINT ,    arrayType . getObject ( column 2  ,     4  )  ,    arrayBlockOf ( BIGINT ,     9  ,     1  0  )  )  )  ;", "Block   column 3     =    reader . readBlock ( mapType ,     3  )  ;", "assertEquals ( column 3  . getPositionCount (  )  ,     5  )  ;", "for    ( int   i    =     0  ;    i    <     5  ;    i +  +  )     {", "assertEquals ( column 3  . isNull ( i )  ,    false )  ;", "}", "assertTrue ( mapBlocksEqual ( createVarcharType (  5  )  ,    BOOLEAN ,    arrayType . getObject ( column 3  ,     0  )  ,    mapBlockOf ( createVarcharType (  5  )  ,    BOOLEAN ,     \" k 1  \"  ,    true )  )  )  ;", "assertTrue ( mapBlocksEqual ( createVarcharType (  5  )  ,    BOOLEAN ,    arrayType . getObject ( column 3  ,     1  )  ,    mapBlockOf ( createVarcharType (  5  )  ,    BOOLEAN ,     \" k 2  \"  ,    false )  )  )  ;", "assertTrue ( mapBlocksEqual ( createVarcharType (  5  )  ,    BOOLEAN ,    arrayType . getObject ( column 3  ,     2  )  ,    mapBlockOf ( createVarcharType (  5  )  ,    BOOLEAN ,     \" k 3  \"  ,    true )  )  )  ;", "assertTrue ( mapBlocksEqual ( createVarcharType (  5  )  ,    BOOLEAN ,    arrayType . getObject ( column 3  ,     3  )  ,    mapBlockOf ( createVarcharType (  5  )  ,    BOOLEAN ,     \" k 4  \"  ,    true )  )  )  ;", "assertTrue ( mapBlocksEqual ( createVarcharType (  5  )  ,    BOOLEAN ,    arrayType . getObject ( column 3  ,     4  )  ,    mapBlockOf ( createVarcharType (  5  )  ,    BOOLEAN ,     \" k 5  \"  ,    true )  )  )  ;", "Block   column 4     =    reader . readBlock ( arrayOfArrayType ,     4  )  ;", "assertEquals ( column 4  . getPositionCount (  )  ,     5  )  ;", "for    ( int   i    =     0  ;    i    <     5  ;    i +  +  )     {", "assertEquals ( column 4  . isNull ( i )  ,    false )  ;", "}", "assertTrue ( arrayBlocksEqual ( arrayType ,    arrayOfArrayType . getObject ( column 4  ,     0  )  ,    arrayBlockOf ( arrayType ,    arrayBlockOf ( BIGINT ,     5  )  )  )  )  ;", "assertTrue ( arrayBlocksEqual ( arrayType ,    arrayOfArrayType . getObject ( column 4  ,     1  )  ,    arrayBlockOf ( arrayType ,    arrayBlockOf ( BIGINT ,     6  )  )  )  )  ;", "assertTrue ( arrayBlocksEqual ( arrayType ,    arrayOfArrayType . getObject ( column 4  ,     2  )  ,    arrayBlockOf ( arrayType ,    arrayBlockOf ( BIGINT ,     7  )  )  )  )  ;", "assertTrue ( arrayBlocksEqual ( arrayType ,    arrayOfArrayType . getObject ( column 4  ,     3  )  ,    arrayBlockOf ( arrayType ,    null ,    arrayBlockOf ( BIGINT ,     8  )  ,    null )  )  )  ;", "assertTrue ( arrayBlocksEqual ( arrayType ,    arrayOfArrayType . getObject ( column 4  ,     4  )  ,    arrayBlockOf ( arrayType ,    arrayBlockOf ( BIGINT ,     9  ,     1  0  )  )  )  )  ;", "assertEquals ( reader . nextBatch (  )  ,     (  -  1  )  )  ;", "OrcFileMetadata   orcFileMetadata    =    TestOrcFileRewriter . METADATA _ CODEC . fromJson ( reader . getUserMetadata (  )  . get ( OrcFileMetadata . KEY )  . getBytes (  )  )  ;", "assertEquals ( orcFileMetadata ,    new   OrcFileMetadata ( ImmutableMap .  < Long ,    TypeSignature > builder (  )  . put (  3 L ,    BIGINT . getTypeSignature (  )  )  . put (  7 L ,    createVarcharType (  2  0  )  . getTypeSignature (  )  )  . put (  9 L ,    arrayType . getTypeSignature (  )  )  . put (  1  0 L ,    mapType . getTypeSignature (  )  )  . put (  1  1 L ,    arrayOfArrayType . getTypeSignature (  )  )  . build (  )  )  )  ;", "}", "BitSet   rowsToDelete    =    new   BitSet (  5  )  ;", "rowsToDelete . set (  1  )  ;", "rowsToDelete . set (  3  )  ;", "rowsToDelete . set (  4  )  ;", "File   newFile    =    new   File ( temporary ,    UUID . randomUUID (  )  . toString (  )  )  ;", "OrcFileRewriter . OrcFileInfo   info    =    OrcFileRewriter . rewrite ( file ,    newFile ,    rowsToDelete )  ;", "assertEquals ( info . getRowCount (  )  ,     2  )  ;", "assertEquals ( info . getUncompressedSize (  )  ,     7  8  )  ;", "try    ( OrcDataSource   dataSource    =    OrcTestingUtil . fileOrcDataSource ( newFile )  )     {", "OrcRecordReader   reader    =    OrcTestingUtil . createReader ( dataSource ,    columnIds ,    columnTypes )  ;", "assertEquals ( reader . getReaderRowCount (  )  ,     2  )  ;", "assertEquals ( reader . getFileRowCount (  )  ,     2  )  ;", "assertEquals ( reader . getSplitLength (  )  ,    newFile . length (  )  )  ;", "assertEquals ( reader . nextBatch (  )  ,     2  )  ;", "Block   column 0     =    reader . readBlock ( BIGINT ,     0  )  ;", "assertEquals ( column 0  . getPositionCount (  )  ,     2  )  ;", "for    ( int   i    =     0  ;    i    <     2  ;    i +  +  )     {", "assertEquals ( column 0  . isNull ( i )  ,    false )  ;", "}", "assertEquals ( BIGINT . getLong ( column 0  ,     0  )  ,     1  2  3 L )  ;", "assertEquals ( BIGINT . getLong ( column 0  ,     1  )  ,     4  5  6 L )  ;", "Block   column 1     =    reader . readBlock ( createVarcharType (  2  0  )  ,     1  )  ;", "assertEquals ( column 1  . getPositionCount (  )  ,     2  )  ;", "for    ( int   i    =     0  ;    i    <     2  ;    i +  +  )     {", "assertEquals ( column 1  . isNull ( i )  ,    false )  ;", "}", "assertEquals ( createVarcharType (  2  0  )  . getSlice ( column 1  ,     0  )  ,    Slices . utf 8 Slice (  \" hello \"  )  )  ;", "assertEquals ( createVarcharType (  2  0  )  . getSlice ( column 1  ,     1  )  ,    Slices . utf 8 Slice (  \" bye \"  )  )  ;", "Block   column 2     =    reader . readBlock ( arrayType ,     2  )  ;", "assertEquals ( column 2  . getPositionCount (  )  ,     2  )  ;", "for    ( int   i    =     0  ;    i    <     2  ;    i +  +  )     {", "assertEquals ( column 2  . isNull ( i )  ,    false )  ;", "}", "assertTrue ( arrayBlocksEqual ( BIGINT ,    arrayType . getObject ( column 2  ,     0  )  ,    arrayBlockOf ( BIGINT ,     1  ,     2  )  )  )  ;", "assertTrue ( arrayBlocksEqual ( BIGINT ,    arrayType . getObject ( column 2  ,     1  )  ,    arrayBlockOf ( BIGINT ,     5  ,     6  )  )  )  ;", "Block   column 3     =    reader . readBlock ( mapType ,     3  )  ;", "assertEquals ( column 3  . getPositionCount (  )  ,     2  )  ;", "for    ( int   i    =     0  ;    i    <     2  ;    i +  +  )     {", "assertEquals ( column 3  . isNull ( i )  ,    false )  ;", "}", "assertTrue ( mapBlocksEqual ( createVarcharType (  5  )  ,    BOOLEAN ,    arrayType . getObject ( column 3  ,     0  )  ,    mapBlockOf ( createVarcharType (  5  )  ,    BOOLEAN ,     \" k 1  \"  ,    true )  )  )  ;", "assertTrue ( mapBlocksEqual ( createVarcharType (  5  )  ,    BOOLEAN ,    arrayType . getObject ( column 3  ,     1  )  ,    mapBlockOf ( createVarcharType (  5  )  ,    BOOLEAN ,     \" k 3  \"  ,    true )  )  )  ;", "Block   column 4     =    reader . readBlock ( arrayOfArrayType ,     4  )  ;", "assertEquals ( column 4  . getPositionCount (  )  ,     2  )  ;", "for    ( int   i    =     0  ;    i    <     2  ;    i +  +  )     {", "assertEquals ( column 4  . isNull ( i )  ,    false )  ;", "}", "assertTrue ( arrayBlocksEqual ( arrayType ,    arrayOfArrayType . getObject ( column 4  ,     0  )  ,    arrayBlockOf ( arrayType ,    arrayBlockOf ( BIGINT ,     5  )  )  )  )  ;", "assertTrue ( arrayBlocksEqual ( arrayType ,    arrayOfArrayType . getObject ( column 4  ,     1  )  ,    arrayBlockOf ( arrayType ,    arrayBlockOf ( BIGINT ,     7  )  )  )  )  ;", "assertEquals ( reader . nextBatch (  )  ,     (  -  1  )  )  ;", "OrcFileMetadata   orcFileMetadata    =    TestOrcFileRewriter . METADATA _ CODEC . fromJson ( reader . getUserMetadata (  )  . get ( OrcFileMetadata . KEY )  . getBytes (  )  )  ;", "assertEquals ( orcFileMetadata ,    new   OrcFileMetadata ( ImmutableMap .  < Long ,    TypeSignature > builder (  )  . put (  3 L ,    BIGINT . getTypeSignature (  )  )  . put (  7 L ,    createVarcharType (  2  0  )  . getTypeSignature (  )  )  . put (  9 L ,    arrayType . getTypeSignature (  )  )  . put (  1  0 L ,    mapType . getTypeSignature (  )  )  . put (  1  1 L ,    arrayOfArrayType . getTypeSignature (  )  )  . build (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testRewrite"], "fileName": "com.facebook.presto.raptor.storage.TestOrcFileRewriter"}, {"methodBody": ["METHOD_START", "{", "List < Long >    columnIds    =    ImmutableList . of (  3 L )  ;", "List < Type >    columnTypes    =    ImmutableList . of ( BIGINT )  ;", "File   file    =    new   File ( temporary ,    UUID . randomUUID (  )  . toString (  )  )  ;", "try    ( OrcFileWriter   writer    =    new   OrcFileWriter ( columnIds ,    columnTypes ,    file )  )     {", "writer . appendPages ( RowPagesBuilder . rowPagesBuilder ( columnTypes )  . row (  1  2  3 L )  . row (  4  5  6 L )  . build (  )  )  ;", "}", "BitSet   rowsToDelete    =    new   BitSet (  )  ;", "rowsToDelete . set (  0  )  ;", "rowsToDelete . set (  1  )  ;", "File   newFile    =    new   File ( temporary ,    UUID . randomUUID (  )  . toString (  )  )  ;", ". OrcFileInfo   info    =     . rewrite ( file ,    newFile ,    rowsToDelete )  ;", "assertEquals ( info . getRowCount (  )  ,     0  )  ;", "assertEquals ( info . getUncompressedSize (  )  ,     0  )  ;", "assertFalse ( newFile . exists (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRewriteAllRowsDeleted"], "fileName": "com.facebook.presto.raptor.storage.TestOrcFileRewriter"}, {"methodBody": ["METHOD_START", "{", "List < Long >    columnIds    =    ImmutableList . of (  3 L )  ;", "List < Type >    columnTypes    =    ImmutableList . of ( BIGINT )  ;", "File   file    =    new   File ( temporary ,    UUID . randomUUID (  )  . toString (  )  )  ;", "try    ( OrcFileWriter   writer    =    new   OrcFileWriter ( columnIds ,    columnTypes ,    file )  )     {", "writer . appendPages ( RowPagesBuilder . rowPagesBuilder ( columnTypes )  . row (  1  2  3 L )  . row (  4  5  6 L )  . build (  )  )  ;", "}", "BitSet   rowsToDelete    =    new   BitSet (  )  ;", "File   newFile    =    new   File ( temporary ,    UUID . randomUUID (  )  . toString (  )  )  ;", ". OrcFileInfo   info    =     . rewrite ( file ,    newFile ,    rowsToDelete )  ;", "assertEquals ( info . getRowCount (  )  ,     2  )  ;", "assertEquals ( info . getUncompressedSize (  )  ,     1  6  )  ;", "assertEquals ( Files . readAllBytes ( newFile . toPath (  )  )  ,    Files . readAllBytes ( file . toPath (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testRewriteNoRowsDeleted"], "fileName": "com.facebook.presto.raptor.storage.TestOrcFileRewriter"}, {"methodBody": ["METHOD_START", "{", "List < Long >    columnIds    =    ImmutableList . of (  3 L ,     7 L )  ;", "List < Type >    columnTypes    =    ImmutableList . of ( BIGINT ,    createVarcharType (  2  0  )  )  ;", "File   file    =    new   File ( temporary ,    UUID . randomUUID (  )  . toString (  )  )  ;", "try    ( OrcFileWriter   writer    =    new   OrcFileWriter ( columnIds ,    columnTypes ,    file ,    false )  )     {", "List < Page >    pages    =    RowPagesBuilder . rowPagesBuilder ( columnTypes )  . row (  1  2  3 L ,     \" hello \"  )  . row (  7  7  7 L ,     \" sky \"  )  . build (  )  ;", "writer . appendPages ( pages )  ;", "}", "try    ( OrcDataSource   dataSource    =    OrcTestingUtil . fileOrcDataSource ( file )  )     {", "OrcRecordReader   reader    =    OrcTestingUtil . createReader ( dataSource ,    columnIds ,    columnTypes )  ;", "assertEquals ( reader . getReaderRowCount (  )  ,     2  )  ;", "assertEquals ( reader . getFileRowCount (  )  ,     2  )  ;", "assertEquals ( reader . getSplitLength (  )  ,    file . length (  )  )  ;", "assertEquals ( reader . nextBatch (  )  ,     2  )  ;", "Block   column 0     =    reader . readBlock ( BIGINT ,     0  )  ;", "assertEquals ( column 0  . getPositionCount (  )  ,     2  )  ;", "for    ( int   i    =     0  ;    i    <     2  ;    i +  +  )     {", "assertEquals ( column 0  . isNull ( i )  ,    false )  ;", "}", "assertEquals ( BIGINT . getLong ( column 0  ,     0  )  ,     1  2  3 L )  ;", "assertEquals ( BIGINT . getLong ( column 0  ,     1  )  ,     7  7  7 L )  ;", "Block   column 1     =    reader . readBlock ( createVarcharType (  2  0  )  ,     1  )  ;", "assertEquals ( column 1  . getPositionCount (  )  ,     2  )  ;", "for    ( int   i    =     0  ;    i    <     2  ;    i +  +  )     {", "assertEquals ( column 1  . isNull ( i )  ,    false )  ;", "}", "assertEquals ( createVarcharType (  2  0  )  . getSlice ( column 1  ,     0  )  ,    Slices . utf 8 Slice (  \" hello \"  )  )  ;", "assertEquals ( createVarcharType (  2  0  )  . getSlice ( column 1  ,     1  )  ,    Slices . utf 8 Slice (  \" sky \"  )  )  ;", "assertFalse ( reader . getUserMetadata (  )  . containsKey ( OrcFileMetadata . KEY )  )  ;", "}", "BitSet   rowsToDelete    =    new   BitSet (  5  )  ;", "rowsToDelete . set (  1  )  ;", "File   newFile    =    new   File ( temporary ,    UUID . randomUUID (  )  . toString (  )  )  ;", ". OrcFileInfo   info    =     . rewrite ( file ,    newFile ,    rowsToDelete )  ;", "assertEquals ( info . getRowCount (  )  ,     1  )  ;", "assertEquals ( info . getUncompressedSize (  )  ,     1  3  )  ;", "try    ( OrcDataSource   dataSource    =    OrcTestingUtil . fileOrcDataSource ( newFile )  )     {", "OrcRecordReader   reader    =    OrcTestingUtil . createReader ( dataSource ,    columnIds ,    columnTypes )  ;", "assertEquals ( reader . getReaderRowCount (  )  ,     1  )  ;", "assertEquals ( reader . getFileRowCount (  )  ,     1  )  ;", "assertEquals ( reader . getSplitLength (  )  ,    newFile . length (  )  )  ;", "assertEquals ( reader . nextBatch (  )  ,     1  )  ;", "Block   column 0     =    reader . readBlock ( BIGINT ,     0  )  ;", "assertEquals ( column 0  . getPositionCount (  )  ,     1  )  ;", "assertEquals ( column 0  . isNull (  0  )  ,    false )  ;", "assertEquals ( BIGINT . getLong ( column 0  ,     0  )  ,     1  2  3 L )  ;", "Block   column 1     =    reader . readBlock ( createVarcharType (  2  0  )  ,     1  )  ;", "assertEquals ( column 1  . getPositionCount (  )  ,     1  )  ;", "assertEquals ( column 1  . isNull (  0  )  ,    false )  ;", "assertEquals ( createVarcharType (  2  0  )  . getSlice ( column 1  ,     0  )  ,    Slices . utf 8 Slice (  \" hello \"  )  )  ;", "assertFalse ( reader . getUserMetadata (  )  . containsKey ( OrcFileMetadata . KEY )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testRewriteWithoutMetadata"], "fileName": "com.facebook.presto.raptor.storage.TestOrcFileRewriter"}, {"methodBody": ["METHOD_START", "{", "List < Long >    columnIds    =    ImmutableList . of (  1 L ,     2 L ,     3 L ,     4 L ,     5 L )  ;", "List < Type >    columnTypes    =    ImmutableList . of ( BOOLEAN ,    BIGINT ,    DOUBLE ,    createVarcharType (  1  0  )  ,    VARBINARY )  ;", "File   file    =    new   File ( temporary ,    UUID . randomUUID (  )  . toString (  )  )  ;", "try    ( OrcFileWriter   writer    =    new   OrcFileWriter ( columnIds ,    columnTypes ,    file )  )     {", "List < Page >    pages    =    RowPagesBuilder . rowPagesBuilder ( columnTypes )  . row ( true ,     1  2  3 L ,     9  8  .  7  ,     \" hello \"  ,    Slices . utf 8 Slice (  \" abc \"  )  )  . row ( false ,     4  5  6 L ,     6  5  .  4  ,     \" world \"  ,    Slices . utf 8 Slice (  \" xyz \"  )  )  . row ( null ,    null ,    null ,    null ,    null )  . build (  )  ;", "writer . appendPages ( pages )  ;", "}", "File   newFile    =    new   File ( temporary ,    UUID . randomUUID (  )  . toString (  )  )  ;", ". OrcFileInfo   info    =     . rewrite ( file ,    newFile ,    new   BitSet (  )  )  ;", "assertEquals ( info . getRowCount (  )  ,     3  )  ;", "assertEquals ( info . getUncompressedSize (  )  ,     5  5  )  ;", "}", "METHOD_END"], "methodName": ["testUncompressedSize"], "fileName": "com.facebook.presto.raptor.storage.TestOrcFileRewriter"}, {"methodBody": ["METHOD_START", "{", "for    ( ColumnStats   stats    :    list )     {", "if    (  ( stats . getColumnId (  )  )     =  =    columnId )     {", "assertEquals ( stats . getMin (  )  ,    min )  ;", "assertEquals ( stats . getMax (  )  ,    max )  ;", "return ;", "}", "}", "fail ( String . format (  \" no   stats   for   column :     % s :     % s \"  ,    columnId ,    list )  )  ;", "}", "METHOD_END"], "methodName": ["assertColumnStats"], "fileName": "com.facebook.presto.raptor.storage.TestOrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( hash ( actual ,    md 5  (  )  )  ,    hash ( expected ,    md 5  (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["assertFileEquals"], "fileName": "com.facebook.presto.raptor.storage.TestOrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "for    ( ColumnStats   stats    :    list )     {", "assertNotEquals ( stats . getColumnId (  )  ,    columnId )  ;", "}", "}", "METHOD_END"], "methodName": ["assertNoColumnStats"], "fileName": "com.facebook.presto.raptor.storage.TestOrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < Long >    list    =    ImmutableList . builder (  )  ;", "for    ( long   i    =     1  ;    i    <  =     ( columnTypes . size (  )  )  ;    i +  +  )     {", "list . add ( i )  ;", "}", "List < Long >    columnIds    =    list . build (  )  ;", "OrcStorageManager   manager    =    createOrcStorageManager (  )  ;", "StoragePageSink   sink    =     . createStoragePageSink ( manager ,    columnIds ,    columnTypes )  ;", "sink . appendPages ( com . facebook . presto . RowPagesBuilder . rowPagesBuilder ( columnTypes )  . rows ( rows )  . build (  )  )  ;", "List < ShardInfo >    shards    =    MoreFutures . getFutureValue ( sink . commit (  )  )  ;", "assertEquals ( shards . size (  )  ,     1  )  ;", "return   Iterables . getOnlyElement ( shards )  . getColumnStats (  )  ;", "}", "METHOD_END"], "methodName": ["columnStats"], "fileName": "com.facebook.presto.raptor.storage.TestOrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "return   createOrcStorageManager ( TestOrcStorageManager . MAX _ SHARD _ ROWS ,    TestOrcStorageManager . MAX _ FILE _ SIZE )  ;", "}", "METHOD_END"], "methodName": ["createOrcStorageManager"], "fileName": "com.facebook.presto.raptor.storage.TestOrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "return   new   OrcStorageManager ( TestOrcStorageManager . CURRENT _ NODE ,    storageService ,    backupStore ,    TestOrcStorageManager . READER _ ATTRIBUTES ,    new   BackupManager ( backupStore ,    storageService ,     1  )  ,    recoveryManager ,    shardRecorder ,    new   TypeRegistry (  )  ,    TestOrcStorageManager . CONNECTOR _ ID ,    TestOrcStorageManager . DELETION _ THREADS ,    TestOrcStorageManager . SHARD _ RECOVERY _ TIMEOUT ,    maxShardRows ,    maxFileSize ,    new   DataSize (  0  ,    Unit . BYTE )  )  ;", "}", "METHOD_END"], "methodName": ["createOrcStorageManager"], "fileName": "com.facebook.presto.raptor.storage.TestOrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "return   TestOrcStorageManager . createOrcStorageManager ( storageService ,    backupStore ,    recoveryManager ,    shardRecorder ,    maxShardRows ,    maxFileSize )  ;", "}", "METHOD_END"], "methodName": ["createOrcStorageManager"], "fileName": "com.facebook.presto.raptor.storage.TestOrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "return   TestOrcStorageManager . createOrcStorageManager ( dbi ,    temporary ,    TestOrcStorageManager . MAX _ SHARD _ ROWS )  ;", "}", "METHOD_END"], "methodName": ["createOrcStorageManager"], "fileName": "com.facebook.presto.raptor.storage.TestOrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "File   directory    =    new   File ( temporary ,     \" data \"  )  ;", "StorageService   storageService    =    new   FileStorageService ( directory )  ;", "storageService . start (  )  ;", "File   backupDirectory    =    new   File ( temporary ,     \" backup \"  )  ;", "FileBackupStore   fileBackupStore    =    new   FileBackupStore ( backupDirectory )  ;", "fileBackupStore . start (  )  ;", "Optional < BackupStore >    backupStore    =    Optional . of ( fileBackupStore )  ;", "ShardManager   shardManager    =    TestDatabaseShardManager . createShardManager ( dbi )  ;", "ShardRecoveryManager   recoveryManager    =    new   ShardRecoveryManager ( storageService ,    backupStore ,    new   TestingNodeManager (  )  ,    shardManager ,     . MISSING _ SHARD _ DISCOVERY ,     1  0  )  ;", "return    . createOrcStorageManager ( storageService ,    backupStore ,    recoveryManager ,    new   InMemoryShardRecorder (  )  ,    maxShardRows ,     . MAX _ FILE _ SIZE )  ;", "}", "METHOD_END"], "methodName": ["createOrcStorageManager"], "fileName": "com.facebook.presto.raptor.storage.TestOrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "long   transactionId    =    TestOrcStorageManager . TRANSACTION _ ID ;", "return   manager . createStoragePageSink ( transactionId ,    OptionalInt . empty (  )  ,    columnIds ,    columnTypes ,    false )  ;", "}", "METHOD_END"], "methodName": ["createStoragePageSink"], "fileName": "com.facebook.presto.raptor.storage.TestOrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "return   manager . getPageSource ( uuid ,    OptionalInt . empty (  )  ,    columnIds ,    columnTypes ,    tupleDomain ,    TestOrcStorageManager . READER _ ATTRIBUTES )  ;", "}", "METHOD_END"], "methodName": ["getPageSource"], "fileName": "com.facebook.presto.raptor.storage.TestOrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "return   values ;", "}", "METHOD_END"], "methodName": ["row"], "fileName": "com.facebook.presto.raptor.storage.TestOrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "temporary    =    createTempDir (  )  ;", "File   directory    =    new   File ( temporary ,     \" data \"  )  ;", "storageService    =    new   FileStorageService ( directory )  ;", "storageService . start (  )  ;", "File   backupDirectory    =    new   File ( temporary ,     \" backup \"  )  ;", "fileBackupStore    =    new   FileBackupStore ( backupDirectory )  ;", "fileBackupStore . start (  )  ;", "backupStore    =    Optional . of ( fileBackupStore )  ;", "IDBI   dbi    =    new   DBI (  (  \" jdbc : h 2  : mem : test \"     +     ( System . nanoTime (  )  )  )  )  ;", "dummyHandle    =    dbi . open (  )  ;", "SchemaDaoUtil . createTablesWithRetry ( dbi )  ;", "ShardManager   shardManager    =    TestDatabaseShardManager . createShardManager ( dbi )  ;", "Duration   discoveryInterval    =    new   Duration (  5  ,    TimeUnit . MINUTES )  ;", "recoveryManager    =    new   ShardRecoveryManager ( storageService ,    backupStore ,    nod ,    shardManager ,    discoveryInterval ,     1  0  )  ;", "shardRecorder    =    new   InMemoryShardRecorder (  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.raptor.storage.TestOrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "return   new   SqlVarbinary ( bytes )  ;", "}", "METHOD_END"], "methodName": ["sqlBinary"], "fileName": "com.facebook.presto.raptor.storage.TestOrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "DateTime   date    =    new   DateTime ( year ,    month ,    day ,     0  ,     0  ,     0  ,     0  ,    UTC )  ;", "return   new   com . facebook . presto . spi . type . SqlDate ( Days . daysBetween (  . EPOCH ,    date )  . getDays (  )  )  ;", "}", "METHOD_END"], "methodName": ["sqlDate"], "fileName": "com.facebook.presto.raptor.storage.TestOrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "DateTime   dateTime    =    new   DateTime ( year ,    month ,    day ,    hour ,    minute ,    second ,     0  ,    UTC )  ;", "return   new   spi . type . SqlTimestamp ( dateTime . getMillis (  )  ,    UTC _ KEY )  ;", "}", "METHOD_END"], "methodName": ["sqlTimestamp"], "fileName": "com.facebook.presto.raptor.storage.TestOrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "if    (  ( dummyHandle )     !  =    null )     {", "dummyHandle . close (  )  ;", "}", "deleteRecursively ( tempry . toPath (  )  ,    ALLOW _ INSECURE )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.raptor.storage.TestOrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "List < Long >    columnIds    =    ImmutableList . of (  3 L ,     7 L )  ;", "List < Type >    columnTypes    =    ImmutableList . of ( BIGINT ,    createVarcharType (  5  )  )  ;", "List < Page >    pages    =    RowPagesBuilder . rowPagesBuilder ( columnTypes )  . row (  1  2  3 L ,     \" hello \"  )  . row (  4  5  6 L ,     \" bye \"  )  . build (  )  ;", "OrcStorageManager   manager    =    createOrcStorageManager (  2  0  ,    new   io . airlift . units . DataSize (  1  ,    Unit . BYTE )  )  ;", "StoragePageSink   sink    =     . createStoragePageSink ( manager ,    columnIds ,    columnTypes )  ;", "sink . appendPages ( pages )  ;", "assertTrue ( sink . isFull (  )  )  ;", "}", "METHOD_END"], "methodName": ["testMaxFileSize"], "fileName": "com.facebook.presto.raptor.storage.TestOrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "OrcStorageManager   manager    =    createOrcStorageManager (  2  ,    new   io . airlift . units . DataSize (  2  ,    Unit . MEGABYTE )  )  ;", "List < Long >    columnIds    =    ImmutableList . of (  3 L ,     7 L )  ;", "List < Type >    columnTypes    =    ImmutableList . of ( BIGINT ,    createVarcharType (  1  0  )  )  ;", "StoragePageSink   sink    =     . createStoragePageSink ( manager ,    columnIds ,    columnTypes )  ;", "List < Page >    pages    =    RowPagesBuilder . rowPagesBuilder ( columnTypes )  . row (  1  2  3 L ,     \" hello \"  )  . row (  4  5  6 L ,     \" bye \"  )  . build (  )  ;", "sink . appendPages ( pages )  ;", "assertTrue ( sink . isFull (  )  )  ;", "}", "METHOD_END"], "methodName": ["testMaxShardRows"], "fileName": "com.facebook.presto.raptor.storage.TestOrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "OrcStorageManager   manager    =    createOrcStorageManager (  )  ;", "List < Long >    columnIds    =    ImmutableList . of (  2 L ,     4 L ,     6 L ,     7 L ,     8 L ,     9 L )  ;", "List < Type >    columnTypes    =    ImmutableList . of ( BIGINT ,    createVarcharType (  1  0  )  ,    VARBINARY ,    DATE ,    BOOLEAN ,    DOUBLE )  ;", "byte [  ]    bytes 1     =    OrcTestingUtil . octets (  0  ,     2  5  4  ,     2  5  5  )  ;", "byte [  ]    bytes 3     =    OrcTestingUtil . octets (  1  ,     2  ,     2  5  ,     1  2  8  )  ;", "StoragePageSink   sink    =     . createStoragePageSink ( manager ,    columnIds ,    columnTypes )  ;", "Object [  ]  [  ]    doubles    =    new   Object [  ]  [  ]  {    new   Object [  ]  {     8  8  1 L ,     \"  - inf \"  ,    null ,    null ,    null ,    Double . NEGATIVE _ INFINITY    }  ,    new   Object [  ]  {     8  8  2 L ,     \"  + inf \"  ,    null ,    null ,    null ,    Double . POSITIVE _ INFINITY    }  ,    new   Object [  ]  {     8  8  3 L ,     \" nan \"  ,    null ,    null ,    null ,    Double . NaN    }  ,    new   Object [  ]  {     8  8  4 L ,     \" min \"  ,    null ,    null ,    null ,    Double . MIN _ VALUE    }  ,    new   Object [  ]  {     8  8  5 L ,     \" max \"  ,    null ,    null ,    null ,    Double . MAX _ VALUE    }  ,    new   Object [  ]  {     8  8  6 L ,     \" pzero \"  ,    null ,    null ,    null ,     0  .  0     }  ,    new   Object [  ]  {     8  8  7 L ,     \" nzero \"  ,    null ,    null ,    null ,     -  0  .  0     }     }  ;", "List < Page >    pages    =    RowPagesBuilder . rowPagesBuilder ( columnTypes )  . row (  1  2  3 L ,     \" hello \"  ,    Slices . wrappedBuffer ( bytes 1  )  ,     . sqlDate (  2  0  0  1  ,     8  ,     2  2  )  . getDays (  )  ,    true ,     1  2  3  .  4  5  )  . row ( null ,    null ,    null ,    null ,    null ,    null )  . row (  4  5  6 L ,     \" bye \"  ,    Slices . wrappedBuffer ( bytes 3  )  ,     . sqlDate (  2  0  0  5  ,     4  ,     2  2  )  . getDays (  )  ,    false ,     9  8  7  .  6  5  )  . rows ( doubles )  . build (  )  ;", "sink . appendPages ( pages )  ;", "List < ShardInfo >    shards    =    MoreFutures . getFutureValue ( sink . commit (  )  )  ;", "assertEquals ( shards . size (  )  ,     1  )  ;", "UUID   uuid    =    Iterables . getOnlyElement ( shards )  . getShardUuid (  )  ;", "MaterializedResult   expected    =    resultBuilder ( SESSION ,    columnTypes )  . row (  1  2  3 L ,     \" hello \"  ,     . sqlBinary ( bytes 1  )  ,     . sqlDate (  2  0  0  1  ,     8  ,     2  2  )  ,    true ,     1  2  3  .  4  5  )  . row ( null ,    null ,    null ,    null ,    null ,    null )  . row (  4  5  6 L ,     \" bye \"  ,     . sqlBinary ( bytes 3  )  ,     . sqlDate (  2  0  0  5  ,     4  ,     2  2  )  ,    false ,     9  8  7  .  6  5  )  . rows ( doubles )  . build (  )  ;", "TupleDomain < RaptorColumnHandle >    tupleDomain    =    TupleDomain . all (  )  ;", "try    ( ConnectorPageSource   pageSource    =     . getPageSource ( manager ,    columnIds ,    columnTypes ,    uuid ,    tupleDomain )  )     {", "MaterializedResult   result    =    materializeSourceDataStream ( SESSION ,    pageSource ,    columnTypes )  ;", "assertEquals ( result . getRowCount (  )  ,    expected . getRowCount (  )  )  ;", "assertEquals ( result ,    expected )  ;", "}", "tupleDomain    =    TupleDomain . fromFixedValues ( ImmutableMap .  < RaptorColumnHandle ,    NullableValue > builder (  )  . put ( new   RaptorColumnHandle (  \" test \"  ,     \" c 1  \"  ,     2  ,    BIGINT )  ,    NullableValue . of ( BIGINT ,     1  2  4 L )  )  . build (  )  )  ;", "try    ( ConnectorPageSource   pageSource    =     . getPageSource ( manager ,    columnIds ,    columnTypes ,    uuid ,    tupleDomain )  )     {", "MaterializedResult   result    =    materializeSourceDataStream ( SESSION ,    pageSource ,    columnTypes )  ;", "assertEquals ( result . getRowCount (  )  ,    expected . getRowCount (  )  )  ;", "}", "tupleDomain    =    TupleDomain . fromFixedValues ( ImmutableMap .  < RaptorColumnHandle ,    NullableValue > builder (  )  . put ( new   RaptorColumnHandle (  \" test \"  ,     \" c 1  \"  ,     2  ,    BIGINT )  ,    NullableValue . of ( BIGINT ,     1  2  2 L )  )  . build (  )  )  ;", "try    ( ConnectorPageSource   pageSource    =     . getPageSource ( manager ,    columnIds ,    columnTypes ,    uuid ,    tupleDomain )  )     {", "MaterializedResult   result    =    materializeSourceDataStream ( SESSION ,    pageSource ,    columnTypes )  ;", "assertEquals ( result . getRowCount (  )  ,     0  )  ;", "}", "}", "METHOD_END"], "methodName": ["testReader"], "fileName": "com.facebook.presto.raptor.storage.TestOrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "OrcStorageManager   manager    =    createOrcStorageManager (  )  ;", "long   transactionId    =     . TRANSACTION _ ID ;", "List < Long >    columnIds    =    ImmutableList . of (  3 L ,     7 L )  ;", "List < Type >    columnTypes    =    ImmutableList . of ( BIGINT ,    createVarcharType (  1  0  )  )  ;", "StoragePageSink   sink    =     . createStoragePageSink ( manager ,    columnIds ,    columnTypes )  ;", "List < Page >    pages    =    RowPagesBuilder . rowPagesBuilder ( columnTypes )  . row (  1  2  3 L ,     \" hello \"  )  . row (  4  5  6 L ,     \" bye \"  )  . build (  )  ;", "sink . appendPages ( pages )  ;", "List < ShardInfo >    shards    =    MoreFutures . getFutureValue ( sink . commit (  )  )  ;", "assertEquals ( shardRecorder . getShards (  )  . size (  )  ,     1  )  ;", "BitSet   rowsToDelete    =    new   BitSet (  )  ;", "rowsToDelete . set (  0  )  ;", "Collection < Slice >    fragments    =    manager . rewriteShard ( transactionId ,    OptionalInt . empty (  )  ,    shards . get (  0  )  . getShardUuid (  )  ,    rowsToDelete )  ;", "Slice   shardDelta    =    Iterables . getOnlyElement ( fragments )  ;", "ShardDelta   shardDeltas    =    jsonCodec ( ShardDelta . class )  . fromJson ( shardDelta . getBytes (  )  )  ;", "ShardInfo   shardInfo    =    Iterables . getOnlyElement ( shardDeltas . getNewShards (  )  )  ;", "assertEquals ( shardInfo . getRowCount (  )  ,     1  )  ;", "File   storageFile    =    storageService . getStorageFile ( shardInfo . getShardUuid (  )  )  ;", "File   backupFile    =    fileBackupStore . getBackupFile ( shardInfo . getShardUuid (  )  )  ;", ". assertFileEquals ( storageFile ,    backupFile )  ;", "List < InMemoryShardRecorder . RecordedShard >    recordedShards    =    shardRecorder . getShards (  )  ;", "assertEquals ( recordedShards . size (  )  ,     2  )  ;", "assertEquals ( recordedShards . get (  1  )  . getTransactionId (  )  ,     . TRANSACTION _ ID )  ;", "assertEquals ( recordedShards . get (  1  )  . getShardUuid (  )  ,    shardInfo . getShardUuid (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRewriter"], "fileName": "com.facebook.presto.raptor.storage.TestOrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "List < ColumnStats >    stats    =    columnStats ( TestOrcStorageManager . types ( BIGINT )  ,    TestOrcStorageManager . row (  2 L )  ,    TestOrcStorageManager . row (  (  -  3 L )  )  ,    TestOrcStorageManager . row (  5 L )  )  ;", "TestOrcStorageManager . assertColumnStats ( stats ,     1  ,     (  -  3 L )  ,     5 L )  ;", "}", "METHOD_END"], "methodName": ["testShardStatsBigint"], "fileName": "com.facebook.presto.raptor.storage.TestOrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "List < ColumnStats >    stats    =    columnStats ( TestOrcStorageManager . types ( BIGINT ,    DOUBLE )  ,    TestOrcStorageManager . row (  (  -  3 L )  ,     6  .  6  )  ,    TestOrcStorageManager . row (  5 L ,     (  -  4  .  1  )  )  )  ;", "TestOrcStorageManager . assertColumnStats ( stats ,     1  ,     (  -  3 L )  ,     5 L )  ;", "TestOrcStorageManager . assertColumnStats ( stats ,     2  ,     (  -  4  .  1  )  ,     6  .  6  )  ;", "}", "METHOD_END"], "methodName": ["testShardStatsBigintDouble"], "fileName": "com.facebook.presto.raptor.storage.TestOrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "List < ColumnStats >    stats    =    columnStats ( TestOrcStorageManager . types ( BIGINT ,    VARBINARY )  ,    TestOrcStorageManager . row (  5 L ,    Slices . wrappedBuffer ( OrcTestingUtil . octets (  0  )  )  )  ,    TestOrcStorageManager . row (  3 L ,    Slices . wrappedBuffer ( OrcTestingUtil . octets (  1  )  )  )  )  ;", "TestOrcStorageManager . assertColumnStats ( stats ,     1  ,     3 L ,     5 L )  ;", "TestOrcStorageManager . assertNoColumnStats ( stats ,     2  )  ;", "}", "METHOD_END"], "methodName": ["testShardStatsBigintVarbinary"], "fileName": "com.facebook.presto.raptor.storage.TestOrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "long   minDate    =    TestOrcStorageManager . sqlDate (  2  0  0  1  ,     8  ,     2  2  )  . getDays (  )  ;", "long   maxDate    =    TestOrcStorageManager . sqlDate (  2  0  0  5  ,     4  ,     2  2  )  . getDays (  )  ;", "long   maxTimestamp    =    TestOrcStorageManager . sqlTimestamp (  2  0  0  2  ,     4  ,     1  3  ,     6  ,     7  ,     8  )  . getMillisUtc (  )  ;", "long   minTimestamp    =    TestOrcStorageManager . sqlTimestamp (  2  0  0  1  ,     3  ,     1  5  ,     9  ,     1  0  ,     1  1  )  . getMillisUtc (  )  ;", "List < ColumnStats >    stats    =    columnStats ( TestOrcStorageManager . types ( DATE ,    TIMESTAMP )  ,    TestOrcStorageManager . row ( minDate ,    maxTimestamp )  ,    TestOrcStorageManager . row ( maxDate ,    minTimestamp )  )  ;", "TestOrcStorageManager . assertColumnStats ( stats ,     1  ,    minDate ,    maxDate )  ;", "TestOrcStorageManager . assertColumnStats ( stats ,     2  ,    minTimestamp ,    maxTimestamp )  ;", "}", "METHOD_END"], "methodName": ["testShardStatsDateTimestamp"], "fileName": "com.facebook.presto.raptor.storage.TestOrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "List < ColumnStats >    stats    =    columnStats ( TestOrcStorageManager . types ( DOUBLE )  ,    TestOrcStorageManager . row (  2  .  5  )  ,    TestOrcStorageManager . row (  (  -  4  .  1  )  )  ,    TestOrcStorageManager . row (  6  .  6  )  )  ;", "TestOrcStorageManager . assertColumnStats ( stats ,     1  ,     (  -  4  .  1  )  ,     6  .  6  )  ;", "}", "METHOD_END"], "methodName": ["testShardStatsDouble"], "fileName": "com.facebook.presto.raptor.storage.TestOrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "List < ColumnStats >    stats    =    columnStats ( TestOrcStorageManager . types ( DOUBLE )  ,    TestOrcStorageManager . row (  3  .  2  )  ,    TestOrcStorageManager . row ( Double . MIN _ VALUE )  ,    TestOrcStorageManager . row (  4  .  5  )  )  ;", "TestOrcStorageManager . assertColumnStats ( stats ,     1  ,    Double . MIN _ VALUE ,     4  .  5  )  ;", "stats    =    columnStats ( TestOrcStorageManager . types ( DOUBLE )  ,    TestOrcStorageManager . row (  3  .  2  )  ,    TestOrcStorageManager . row ( Double . MAX _ VALUE )  ,    TestOrcStorageManager . row (  4  .  5  )  )  ;", "TestOrcStorageManager . assertColumnStats ( stats ,     1  ,     3  .  2  ,    Double . MAX _ VALUE )  ;", "}", "METHOD_END"], "methodName": ["testShardStatsDoubleMinMax"], "fileName": "com.facebook.presto.raptor.storage.TestOrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "List < ColumnStats >    stats    =    columnStats ( TestOrcStorageManager . types ( DOUBLE )  ,    TestOrcStorageManager . row (  3  .  2  )  ,    TestOrcStorageManager . row ( Double . NEGATIVE _ INFINITY )  ,    TestOrcStorageManager . row (  4  .  5  )  )  ;", "TestOrcStorageManager . assertColumnStats ( stats ,     1  ,    null ,     4  .  5  )  ;", "stats    =    columnStats ( TestOrcStorageManager . types ( DOUBLE )  ,    TestOrcStorageManager . row (  3  .  2  )  ,    TestOrcStorageManager . row ( Double . POSITIVE _ INFINITY )  ,    TestOrcStorageManager . row (  4  .  5  )  )  ;", "TestOrcStorageManager . assertColumnStats ( stats ,     1  ,     3  .  2  ,    null )  ;", "stats    =    columnStats ( TestOrcStorageManager . types ( DOUBLE )  ,    TestOrcStorageManager . row (  3  .  2  )  ,    TestOrcStorageManager . row ( Double . NaN )  ,    TestOrcStorageManager . row (  4  .  5  )  )  ;", "TestOrcStorageManager . assertColumnStats ( stats ,     1  ,     3  .  2  ,     4  .  5  )  ;", "}", "METHOD_END"], "methodName": ["testShardStatsDoubleNotFinite"], "fileName": "com.facebook.presto.raptor.storage.TestOrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "List < ColumnStats >    stats    =    columnStats ( TestOrcStorageManager . types ( createVarcharType (  1  0  )  )  ,    TestOrcStorageManager . row ( Slices . utf 8 Slice (  \" hello \"  )  )  ,    TestOrcStorageManager . row ( Slices . utf 8 Slice (  \" bye \"  )  )  ,    TestOrcStorageManager . row ( Slices . utf 8 Slice (  \" foo \"  )  )  )  ;", "TestOrcStorageManager . assertColumnStats ( stats ,     1  ,     \" bye \"  ,     \" hello \"  )  ;", "}", "METHOD_END"], "methodName": ["testShardStatsVarchar"], "fileName": "com.facebook.presto.raptor.storage.TestOrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "OrcStorageManager   manager    =    createOrcStorageManager (  )  ;", "List < Long >    columnIds    =    ImmutableList . of (  3 L ,     7 L )  ;", "List < Type >    columnTypes    =    ImmutableList . of ( BIGINT ,    createVarcharType (  1  0  )  )  ;", "StoragePageSink   sink    =     . createStoragePageSink ( manager ,    columnIds ,    columnTypes )  ;", "List < Page >    pages    =    RowPagesBuilder . rowPagesBuilder ( columnTypes )  . row (  1  2  3 L ,     \" hello \"  )  . row (  4  5  6 L ,     \" bye \"  )  . build (  )  ;", "sink . appendPages ( pages )  ;", "assertEquals ( shardRecorder . getShards (  )  . size (  )  ,     0  )  ;", "sink . flush (  )  ;", "List < InMemoryShardRecorder . RecordedShard >    recordedShards    =    shardRecorder . getShards (  )  ;", "assertEquals ( recordedShards . size (  )  ,     1  )  ;", "List < ShardInfo >    shards    =    MoreFutures . getFutureValue ( sink . commit (  )  )  ;", "assertEquals ( shards . size (  )  ,     1  )  ;", "ShardInfo   shardInfo    =    Iterables . getOnlyElement ( shards )  ;", "UUID   shardUuid    =    shardInfo . getShardUuid (  )  ;", "File   file    =    storageService . getStorageFile ( shardUuid )  ;", "File   backupFile    =    fileBackupStore . getBackupFile ( shardUuid )  ;", "assertEquals ( recordedShards . get (  0  )  . getTransactionId (  )  ,     . TRANSACTION _ ID )  ;", "assertEquals ( recordedShards . get (  0  )  . getShardUuid (  )  ,    shardUuid )  ;", "assertEquals ( shardInfo . getRowCount (  )  ,     2  )  ;", "assertEquals ( shardInfo . getCompressedSize (  )  ,    file . length (  )  )  ;", "assertEquals ( shardInfo . getXxhash 6  4  (  )  ,    OrcStorageManager . xxhash 6  4  ( file )  )  ;", "assertFile ( file ,     \" primary   shard \"  )  ;", "assertFile ( backupFile ,     \" backup   shard \"  )  ;", ". assertFileEquals ( file ,    backupFile )  ;", "assertTrue ( file . delete (  )  )  ;", "assertTrue ( file . getParentFile (  )  . delete (  )  )  ;", "assertFalse ( file . exists (  )  )  ;", "recoveryManager . restoreFromBackup ( shardUuid ,    shardInfo . getCompressedSize (  )  ,    OptionalLong . of ( shardInfo . getXxhash 6  4  (  )  )  )  ;", "try    ( OrcDataSource   dataSource    =    manager . openShard ( shardUuid ,     . READER _ ATTRIBUTES )  )     {", "OrcRecordReader   reader    =    OrcTestingUtil . createReader ( dataSource ,    columnIds ,    columnTypes )  ;", "assertEquals ( reader . nextBatch (  )  ,     2  )  ;", "Block   column 0     =    reader . readBlock ( BIGINT ,     0  )  ;", "assertEquals ( column 0  . isNull (  0  )  ,    false )  ;", "assertEquals ( column 0  . isNull (  1  )  ,    false )  ;", "assertEquals ( BIGINT . getLong ( column 0  ,     0  )  ,     1  2  3 L )  ;", "assertEquals ( BIGINT . getLong ( column 0  ,     1  )  ,     4  5  6 L )  ;", "Block   column 1     =    reader . readBlock ( createVarcharType (  1  0  )  ,     1  )  ;", "assertEquals ( createVarcharType (  1  0  )  . getSlice ( column 1  ,     0  )  ,    Slices . utf 8 Slice (  \" hello \"  )  )  ;", "assertEquals ( createVarcharType (  1  0  )  . getSlice ( column 1  ,     1  )  ,    Slices . utf 8 Slice (  \" bye \"  )  )  ;", "assertEquals ( reader . nextBatch (  )  ,     (  -  1  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testWriter"], "fileName": "com.facebook.presto.raptor.storage.TestOrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "File   staging    =    new   File ( new   File ( temporary ,     \" data \"  )  ,     \" staging \"  )  ;", "assertDirectory ( staging )  ;", "assertEquals ( staging . list (  )  ,    new   String [  ]  {        }  )  ;", "OrcStorageManager   manager    =    createOrcStorageManager (  )  ;", "List < Long >    columnIds    =    ImmutableList . of (  3 L ,     7 L )  ;", "List < Type >    columnTypes    =    ImmutableList . of ( BIGINT ,    createVarcharType (  1  0  )  )  ;", "StoragePageSink   sink    =     . createStoragePageSink ( manager ,    columnIds ,    columnTypes )  ;", "List < Page >    pages    =    RowPagesBuilder . rowPagesBuilder ( columnTypes )  . row (  1  2  3 L ,     \" hello \"  )  . row (  4  5  6 L ,     \" bye \"  )  . build (  )  ;", "sink . appendPages ( pages )  ;", "sink . flush (  )  ;", "String [  ]    files    =    staging . list (  )  ;", "assertNotNull ( files )  ;", "String   stagingFile    =    Arrays . stream ( files )  . filter (  (    file )     -  >    file . endsWith (  \"  . orc \"  )  )  . findFirst (  )  . orElseThrow (  (  )     -  >    new   AssertionError (  \" file   not   found   in   staging \"  )  )  ;", "sink . rollback (  )  ;", "files    =    staging . list (  )  ;", "assertNotNull ( files )  ;", "assertTrue ( Arrays . stream ( files )  . noneMatch ( stagingFile :  : equals )  )  ;", "}", "METHOD_END"], "methodName": ["testWriterRollback"], "fileName": "com.facebook.presto.raptor.storage.TestOrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "return   ImmutableList . copyOf ( types )  ;", "}", "METHOD_END"], "methodName": ["types"], "fileName": "com.facebook.presto.raptor.storage.TestOrcStorageManager"}, {"methodBody": ["METHOD_START", "{", "Node   currentNode    =    TestShardEjector . createTestingNode ( current )  ;", "TestingNodeManager   nodeManager    =    new   TestingNodeManager ( currentNode )  ;", "for    ( String   other    :    others )     {", "nodeManager . addNode ( TestShardEjector . createTestingNode ( other )  )  ;", "}", "return   nodeManager ;", "}", "METHOD_END"], "methodName": ["createNodeManager"], "fileName": "com.facebook.presto.raptor.storage.TestShardEjector"}, {"methodBody": ["METHOD_START", "{", "return   dbi . onDemand ( MetadataDao . class )  . insertTable (  \" test \"  ,    name ,    false ,    false ,    null ,     0  )  ;", "}", "METHOD_END"], "methodName": ["createTable"], "fileName": "com.facebook.presto.raptor.storage.TestShardEjector"}, {"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . metadata . PrestoNode ( identifier ,    URI . create (  \" http :  /  / test \"  )  ,    NodeVersion . UNKNOWN ,    false )  ;", "}", "METHOD_END"], "methodName": ["createTestingNode"], "fileName": "com.facebook.presto.raptor.storage.TestShardEjector"}, {"methodBody": ["METHOD_START", "{", "dbi    =    new   DBI (  (  \" jdbc : h 2  : mem : test \"     +     ( System . nanoTime (  )  )  )  )  ;", "dummyHandle    =    dbi . open (  )  ;", "SchemaDaoUtil . createTablesWithRetry ( dbi )  ;", "shardManager    =    TestDatabaseShardManager . createShardManager ( dbi )  ;", "dataDir    =    createTempDir (  )  ;", "Service    =    new   FileStorageService ( dataDir )  ;", "Service . start (  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.raptor.storage.TestShardEjector"}, {"methodBody": ["METHOD_START", "{", "return   new   ShardInfo ( UUID . randomUUID (  )  ,    OptionalInt . empty (  )  ,    ImmutableSet . of ( node )  ,    ImmutableList . of (  )  ,     1  ,    size ,     ( size    *     2  )  ,     0  )  ;", "}", "METHOD_END"], "methodName": ["shardInfo"], "fileName": "com.facebook.presto.raptor.storage.TestShardEjector"}, {"methodBody": ["METHOD_START", "{", "if    (  ( dummyHandl    !  =    null )     {", "dummyHandlclos )  ;", "}", "if    (  ( dataDir )     !  =    null )     {", "dursivy ( dataDir . toPath (  )  ,    ALLOW _ INSECURE )  ;", "}", "}", "METHOD_END"], "methodName": ["teardown"], "fileName": "com.facebook.presto.raptor.storage.TestShardEjector"}, {"methodBody": ["METHOD_START", "{", "NodeManager   nodeManager    =    TestShardEjector . createNodeManager (  \" node 1  \"  ,     \" node 2  \"  ,     \" node 3  \"  ,     \" node 4  \"  ,     \" node 5  \"  )  ;", "ShardEjector   ejector    =    new   ShardEjector ( nodeManager . getCurrentNode (  )  . getNodeIdentifier (  )  ,    nodeManager :  : getWorkerNodes ,    shardManager ,    storageService ,    new   Duration (  1  ,    TimeUnit . HOURS )  ,    Optional . of ( new   TestShardEjector . TestingBackupStore (  )  )  ,     \" test \"  )  ;", "List < ShardInfo >    shards    =    ImmutableList .  < ShardInfo > builder (  )  . add ( TestShardEjector . shardInfo (  \" node 1  \"  ,     1  4  )  )  . add ( TestShardEjector . shardInfo (  \" node 1  \"  ,     1  3  )  )  . add ( TestShardEjector . shardInfo (  \" node 1  \"  ,     1  2  )  )  . add ( TestShardEjector . shardInfo (  \" node 1  \"  ,     1  1  )  )  . add ( TestShardEjector . shardInfo (  \" node 1  \"  ,     1  0  )  )  . add ( TestShardEjector . shardInfo (  \" node 1  \"  ,     1  0  )  )  . add ( TestShardEjector . shardInfo (  \" node 1  \"  ,     1  0  )  )  . add ( TestShardEjector . shardInfo (  \" node 1  \"  ,     1  0  )  )  . add ( TestShardEjector . shardInfo (  \" node 2  \"  ,     5  )  )  . add ( TestShardEjector . shardInfo (  \" node 2  \"  ,     5  )  )  . add ( TestShardEjector . shardInfo (  \" node 3  \"  ,     1  0  )  )  . add ( TestShardEjector . shardInfo (  \" node 4  \"  ,     1  0  )  )  . add ( TestShardEjector . shardInfo (  \" node 5  \"  ,     1  0  )  )  . add ( TestShardEjector . shardInfo (  \" node 6  \"  ,     2  0  0  )  )  . build (  )  ;", "long   tableId    =    createTable (  \" test \"  )  ;", "List < ColumnInfo >    columns    =    ImmutableList . of ( new   ColumnInfo (  1  ,    BIGINT )  )  ;", "shardManager . createTable ( tableId ,    columns ,    false ,    OptionalLong . empty (  )  )  ;", "long   transactionId    =    shardManager . beginTransaction (  )  ;", "shardManager . commitShards ( transactionId ,    tableId ,    columns ,    shards ,    Optional . empty (  )  ,     0  )  ;", "for    ( ShardInfo   shard    :    shards . subList (  0  ,     8  )  )     {", "File   file    =    storageService . getStorageFile ( shard . getShardUuid (  )  )  ;", "storageService . createParents ( file )  ;", "assertTrue ( file . createNewFile (  )  )  ;", "}", "ejector . process (  )  ;", "shardManager . getShardNodes ( tableId ,    TupleDomain . all (  )  )  ;", "Set < UUID >    ejectedShards    =    shards . subList (  0  ,     4  )  . stream (  )  . map ( ShardInfo :  : getShardUuid )  . collect ( Collectors . toSet (  )  )  ;", "Set < UUID >    keptShards    =    shards . subList (  4  ,     8  )  . stream (  )  . map ( ShardInfo :  : getShardUuid )  . collect ( Collectors . toSet (  )  )  ;", "Set < UUID >    remaining    =    TestShardEjector . uuids ( shardManager . getNodeShards (  \" node 1  \"  )  )  ;", "for    ( UUID   uuid    :    ejectedShards )     {", "assertFalse ( remaining . contains ( uuid )  )  ;", "assertFalse ( storageService . getStorageFile ( uuid )  . exists (  )  )  ;", "}", "assertEquals ( remaining ,    keptShards )  ;", "for    ( UUID   uuid    :    keptShards )     {", "assertTrue ( storageService . getStorageFile ( uuid )  . exists (  )  )  ;", "}", "Set < UUID >    others    =    ImmutableSet .  < UUID > builder (  )  . addAll ( TestShardEjector . uuids ( shardManager . getNodeShards (  \" node 2  \"  )  )  )  . addAll ( TestShardEjector . uuids ( shardManager . getNodeShards (  \" node 3  \"  )  )  )  . addAll ( TestShardEjector . uuids ( shardManager . getNodeShards (  \" node 4  \"  )  )  )  . addAll ( TestShardEjector . uuids ( shardManager . getNodeShards (  \" node 5  \"  )  )  )  . build (  )  ;", "assertTrue ( others . containsAll ( ejectedShards )  )  ;", "}", "METHOD_END"], "methodName": ["testEjector"], "fileName": "com.facebook.presto.raptor.storage.TestShardEjector"}, {"methodBody": ["METHOD_START", "{", "return   metadata . stream (  )  . map ( ShardMetadata :  : getShardUuid )  . collect ( Collectors . toSet (  )  )  ;", "}", "METHOD_END"], "methodName": ["uuids"], "fileName": "com.facebook.presto.raptor.storage.TestShardEjector"}, {"methodBody": ["METHOD_START", "{", "return   new   ShardRecoveryManager ( storageService ,    backupStore ,    new   TestingNodeManager (  )  ,    shardManager ,    new   Duration (  5  ,    TimeUnit . MINUTES )  ,     1  0  )  ;", "}", "METHOD_END"], "methodName": ["createShardRecoveryManager"], "fileName": "com.facebook.presto.raptor.storage.TestShardRecovery"}, {"methodBody": ["METHOD_START", "{", "String [  ]    files    =    path . list (  )  ;", "assertNotNull ( files )  ;", "return   ImmutableList . copyOf ( files )  ;", "}", "METHOD_END"], "methodName": ["listFiles"], "fileName": "com.facebook.presto.raptor.storage.TestShardRecovery"}, {"methodBody": ["METHOD_START", "{", "temporary    =    createTempDir (  )  ;", "File   directory    =    new   File ( temporary ,     \" data \"  )  ;", "File   backupDirectory    =    new   File ( temporary ,     \" backup \"  )  ;", "backupStore    =    new   FileBackupStore ( backupDirectory )  ;", "backupStore . start (  )  ;", "storageService    =    new   FileStorageService ( directory )  ;", "storageService . start (  )  ;", "IDBI   dbi    =    new   DBI (  (  \" jdbc : h 2  : mem : test \"     +     ( System . nanoTime (  )  )  )  )  ;", "dummyHandle    =    dbi . open (  )  ;", "SchemaDaoUtil . createTablesWithRetry ( dbi )  ;", "ShardManager   shardManager    =    TestDatabaseShardManager . createShardManager ( dbi )  ;", "recoveryManager    =     . createShardRecoveryManager ( storageService ,    Optional . of ( backupStore )  ,    shardManager )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.raptor.storage.TestShardRecovery"}, {"methodBody": ["METHOD_START", "{", "if    (  ( dummyHandle )     !  =    null )     {", "dummyHandle . close (  )  ;", "}", "deleteRecursively ( tempry . toPath (  )  ,    ALLOW _ INSECURE )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.raptor.storage.TestShardRecovery"}, {"methodBody": ["METHOD_START", "{", "recoveryManager . restoreFromBackup ( UUID . randomUUID (  )  ,     0  ,    OptionalLong . empty (  )  )  ;", "}", "METHOD_END"], "methodName": ["testNoBackupException"], "fileName": "com.facebook.presto.raptor.storage.TestShardRecovery"}, {"methodBody": ["METHOD_START", "{", "UUID   shardUuid    =    UUID . randomUUID (  )  ;", "File   file    =    Service . getStorageFile ( shardUuid )  ;", "File   tempFile    =    File . createTempFile (  \" tmp \"  ,    null ,    temporary )  ;", "Files . write (  \" test   data \"  ,    tempFile ,    StandardCharsets . UTF _  8  )  ;", "backupStore . backupShard ( shardUuid ,    tempFile )  ;", "assertTrue ( backupStore . shardExists ( shardUuid )  )  ;", "File   backupFile    =    backupStore . getBackupFile ( shardUuid )  ;", "assertTrue ( backupFile . exists (  )  )  ;", "assertEquals ( backupFile . length (  )  ,    tempFile . length (  )  )  ;", "assertFalse ( file . exists (  )  )  ;", "recoveryManager . restoreFromBackup ( shardUuid ,    tempFile . length (  )  ,    OptionalLong . empty (  )  )  ;", "assertTrue ( file . exists (  )  )  ;", "assertEquals ( file . length (  )  ,    tempFile . length (  )  )  ;", "}", "METHOD_END"], "methodName": ["testShardRecovery"], "fileName": "com.facebook.presto.raptor.storage.TestShardRecovery"}, {"methodBody": ["METHOD_START", "{", "UUID   shardUuid    =    UUID . randomUUID (  )  ;", "File   storageFile    =    storageService . getStorageFile ( shardUuid )  ;", "storageService . createParents ( storageFile )  ;", "Files . write (  \" test   data \"  ,    storageFile ,    StandardCharsets . UTF _  8  )  ;", "long   size    =    storageFile . length (  )  ;", "long   xxhash 6  4     =    OrcStorageManager . xxhash 6  4  ( storageFile )  ;", "backupStore . backupShard ( shardUuid ,    storageFile )  ;", "assertTrue ( backupStore . shardExists ( shardUuid )  )  ;", "File   backupFile    =    backupStore . getBackupFile ( shardUuid )  ;", "assertTrue ( Files . equal ( storageFile ,    backupFile )  )  ;", "Files . write (  \" test   xata \"  ,    backupFile ,    StandardCharsets . UTF _  8  )  ;", "assertTrue ( backupFile . exists (  )  )  ;", "assertEquals ( storageFile . length (  )  ,    backupFile . length (  )  )  ;", "assertFalse ( Files . equal ( storageFile ,    backupFile )  )  ;", "assertTrue ( storageFile . delete (  )  )  ;", "assertFalse ( storageFile . exists (  )  )  ;", "try    {", "recoveryManager . restoreFromBackup ( shardUuid ,    size ,    OptionalLong . of ( xxhash 6  4  )  )  ;", "fail (  \" expected   exception \"  )  ;", "}    catch    ( PrestoException   e )     {", "assertEquals ( e . getErrorCode (  )  ,    RaptorErrorCode . RAPTOR _ BACKUP _ CORRUPTION . toErrorCode (  )  )  ;", "assertEquals ( e . getMessage (  )  ,     (  \" Backup   is   corrupt   after   read :     \"     +    shardUuid )  )  ;", "}", "List < String >    quarantined    =     . listFiles ( storageService . getQuarantineFile ( shardUuid )  . getParentFile (  )  )  ;", "assertEquals ( quarantined . size (  )  ,     1  )  ;", "assertTrue ( getOnlyElement ( quarantined )  . startsWith (  ( shardUuid    +     \"  . orc . corrupt \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testShardRecoveryBackupChecksumMismatch"], "fileName": "com.facebook.presto.raptor.storage.TestShardRecovery"}, {"methodBody": ["METHOD_START", "{", "UUID   shardUuid    =    UUID . randomUUID (  )  ;", "File   tempFile    =    File . createTempFile (  \" tmp \"  ,    null ,    temporary )  ;", "Files . write (  \" test   data \"  ,    tempFile ,    StandardCharsets . UTF _  8  )  ;", "backupStore . backupShard ( shardUuid ,    tempFile )  ;", "assertTrue ( backupStore . shardExists ( shardUuid )  )  ;", "File   backupFile    =    backupStore . getBackupFile ( shardUuid )  ;", "assertTrue ( Files . equal ( tempFile ,    backupFile )  )  ;", "File   storageFile    =    storageService . getStorageFile ( shardUuid )  ;", "storageService . createParents ( storageFile )  ;", "Files . write (  \" test   xata \"  ,    storageFile ,    StandardCharsets . UTF _  8  )  ;", "assertTrue ( storageFile . exists (  )  )  ;", "assertEquals ( storageFile . length (  )  ,    tempFile . length (  )  )  ;", "assertFalse ( Files . equal ( storageFile ,    tempFile )  )  ;", "recoveryManager . restoreFromBackup ( shardUuid ,    tempFile . length (  )  ,    OptionalLong . of ( OrcStorageManager . xxhash 6  4  ( tempFile )  )  )  ;", "assertTrue ( storageFile . exists (  )  )  ;", "assertTrue ( Files . equal ( storageFile ,    tempFile )  )  ;", "List < String >    quarantined    =     . listFiles ( storageService . getQuarantineFile ( shardUuid )  . getParentFile (  )  )  ;", "assertEquals ( quarantined . size (  )  ,     1  )  ;", "assertTrue ( getOnlyElement ( quarantined )  . startsWith (  ( shardUuid    +     \"  . orc . corrupt \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testShardRecoveryExistingFileChecksumMismatch"], "fileName": "com.facebook.presto.raptor.storage.TestShardRecovery"}, {"methodBody": ["METHOD_START", "{", "UUID   shardUuid    =    UUID . randomUUID (  )  ;", "File   tempFile    =    File . createTempFile (  \" tmp \"  ,    null ,    temporary )  ;", "Files . write (  \" test   data \"  ,    tempFile ,    StandardCharsets . UTF _  8  )  ;", "backupStore . backupShard ( shardUuid ,    tempFile )  ;", "assertTrue ( backupStore . shardExists ( shardUuid )  )  ;", "File   backupFile    =    backupStore . getBackupFile ( shardUuid )  ;", "assertTrue ( Files . equal ( tempFile ,    backupFile )  )  ;", "File   storageFile    =    storageService . getStorageFile ( shardUuid )  ;", "storageService . createParents ( storageFile )  ;", "Files . write (  \" bad   data \"  ,    storageFile ,    StandardCharsets . UTF _  8  )  ;", "assertTrue ( storageFile . exists (  )  )  ;", "assertNotEquals ( storageFile . length (  )  ,    tempFile . length (  )  )  ;", "assertFalse ( Files . equal ( storageFile ,    tempFile )  )  ;", "recoveryManager . restoreFromBackup ( shardUuid ,    tempFile . length (  )  ,    OptionalLong . empty (  )  )  ;", "assertTrue ( storageFile . exists (  )  )  ;", "assertTrue ( Files . equal ( storageFile ,    tempFile )  )  ;", "List < String >    quarantined    =     . listFiles ( storageService . getQuarantineFile ( shardUuid )  . getParentFile (  )  )  ;", "assertEquals ( quarantined . size (  )  ,     1  )  ;", "assertTrue ( getOnlyElement ( quarantined )  . startsWith (  ( shardUuid    +     \"  . orc . corrupt \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testShardRecoveryExistingFileSizeMismatch"], "fileName": "com.facebook.presto.raptor.storage.TestShardRecovery"}, {"methodBody": ["METHOD_START", "{", "directory    =    createTempDir (  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.raptor.storage.TestShardWriter"}, {"methodBody": ["METHOD_START", "{", "deleteRecursively ( directory . toPath (  )  ,    ALLOW _ INSECURE )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.raptor.storage.TestShardWriter"}, {"methodBody": ["METHOD_START", "{", "TypeManager   typeManager    =    new   TypeRegistry (  )  ;", "new   metadata . FunctionRegistry ( typeManager ,    new   block . BlockEncodingManager ( typeManager )  ,    new   FeaturesConfig (  )  )  ;", "List < Long >    columnIds    =    ImmutableList . of (  1 L ,     2 L ,     4 L ,     6 L ,     7 L ,     8 L ,     9 L ,     1  0 L )  ;", "ArrayType   arrayType    =    new   ArrayType ( BIGINT )  ;", "ArrayType   arrayOfArrayType    =    new   ArrayType ( arrayType )  ;", "Type   mapType    =    typeManager . getParameterizedType ( MAP ,    ImmutableList . of ( TypeSignatureParameter . of ( createVarcharType (  1  0  )  . getTypeSignature (  )  )  ,    TypeSignatureParameter . of ( BOOLEAN . getTypeSignature (  )  )  )  )  ;", "List < Type >    columnTypes    =    ImmutableList . of ( BIGINT ,    createVarcharType (  1  0  )  ,    VARBINARY ,    DOUBLE ,    BOOLEAN ,    arrayType ,    mapType ,    arrayOfArrayType )  ;", "File   file    =    new   File ( directory ,     (  ( System . nanoTime (  )  )     +     \"  . orc \"  )  )  ;", "byte [  ]    bytes 1     =    OrcTestingUtil . octets (  0  ,     2  5  4  ,     2  5  5  )  ;", "byte [  ]    bytes 3     =    OrcTestingUtil . octets (  1  ,     2  ,     2  5  ,     1  2  8  )  ;", "RowPagesBuilder   rowPagesBuilder    =    RowPagesBuilder . rowPagesBuilder ( columnTypes )  . row (  1  2  3 L ,     \" hello \"  ,    Slices . wrappedBuffer ( bytes 1  )  ,     1  2  3  .  4  5  6  ,    true ,    arrayBlockOf ( BIGINT ,     1  ,     2  )  ,    mapBlockOf ( createVarcharType (  5  )  ,    BOOLEAN ,     \" k 1  \"  ,    true )  ,    arrayBlockOf ( arrayType ,    arrayBlockOf ( BIGINT ,     5  )  )  )  . row ( null ,     \" world \"  ,    null ,    Double . POSITIVE _ INFINITY ,    null ,    arrayBlockOf ( BIGINT ,     3  ,    null )  ,    mapBlockOf ( createVarcharType (  5  )  ,    BOOLEAN ,     \" k 2  \"  ,    null )  ,    arrayBlockOf ( arrayType ,    null ,    arrayBlockOf ( BIGINT ,     6  ,     7  )  )  )  . row (  4  5  6 L ,     \" bye    \\ u 2  6  0  3  \"  ,    Slices . wrappedBuffer ( bytes 3  )  ,    Double . NaN ,    false ,    arrayBlockOf ( BIGINT )  ,    mapBlockOf ( createVarcharType (  5  )  ,    BOOLEAN ,     \" k 3  \"  ,    false )  ,    arrayBlockOf ( arrayType ,    arrayBlockOf ( BIGINT )  )  )  ;", "try    ( ThreadContextClassLoader   ignored    =    new   ThreadContextClassLoader ( new   TestShardWriter . EmptyClassLoader (  )  )  ; OrcFileWriter   writer    =    new   OrcFileWriter ( columnIds ,    columnTypes ,    file )  )     {", "writer . appendPages ( rowPagesBuilder . build (  )  )  ;", "}", "try    ( OrcDataSource   dataSource    =    OrcTestingUtil . fileOrcDataSource ( file )  )     {", "OrcRecordReader   reader    =    OrcTestingUtil . createReader ( dataSource ,    columnIds ,    columnTypes )  ;", "assertEquals ( reader . getReaderRowCount (  )  ,     3  )  ;", "assertEquals ( reader . getReaderPosition (  )  ,     0  )  ;", "assertEquals ( reader . getFileRowCount (  )  ,    reader . getReaderRowCount (  )  )  ;", "assertEquals ( reader . getFilePosition (  )  ,    reader . getFilePosition (  )  )  ;", "assertEquals ( reader . nextBatch (  )  ,     3  )  ;", "assertEquals ( reader . getReaderPosition (  )  ,     0  )  ;", "assertEquals ( reader . getFilePosition (  )  ,    reader . getFilePosition (  )  )  ;", "Block   column 0     =    reader . readBlock ( BIGINT ,     0  )  ;", "assertEquals ( column 0  . isNull (  0  )  ,    false )  ;", "assertEquals ( column 0  . isNull (  1  )  ,    true )  ;", "assertEquals ( column 0  . isNull (  2  )  ,    false )  ;", "assertEquals ( BIGINT . getLong ( column 0  ,     0  )  ,     1  2  3 L )  ;", "assertEquals ( BIGINT . getLong ( column 0  ,     2  )  ,     4  5  6 L )  ;", "Block   column 1     =    reader . readBlock ( createVarcharType (  1  0  )  ,     1  )  ;", "assertEquals ( createVarcharType (  1  0  )  . getSlice ( column 1  ,     0  )  ,    Slices . utf 8 Slice (  \" hello \"  )  )  ;", "assertEquals ( createVarcharType (  1  0  )  . getSlice ( column 1  ,     1  )  ,    Slices . utf 8 Slice (  \" world \"  )  )  ;", "assertEquals ( createVarcharType (  1  0  )  . getSlice ( column 1  ,     2  )  ,    Slices . utf 8 Slice (  \" bye    \\ u 2  6  0  3  \"  )  )  ;", "Block   column 2     =    reader . readBlock ( VARBINARY ,     2  )  ;", "assertEquals ( VARBINARY . getSlice ( column 2  ,     0  )  ,    Slices . wrappedBuffer ( bytes 1  )  )  ;", "assertEquals ( column 2  . isNull (  1  )  ,    true )  ;", "assertEquals ( VARBINARY . getSlice ( column 2  ,     2  )  ,    Slices . wrappedBuffer ( bytes 3  )  )  ;", "Block   column 3     =    reader . readBlock ( DOUBLE ,     3  )  ;", "assertEquals ( column 3  . isNull (  0  )  ,    false )  ;", "assertEquals ( column 3  . isNull (  1  )  ,    false )  ;", "assertEquals ( column 3  . isNull (  2  )  ,    false )  ;", "assertEquals ( DOUBLE . getDouble ( column 3  ,     0  )  ,     1  2  3  .  4  5  6  )  ;", "assertEquals ( DOUBLE . getDouble ( column 3  ,     1  )  ,    Double . POSITIVE _ INFINITY )  ;", "assertEquals ( DOUBLE . getDouble ( column 3  ,     2  )  ,    Double . NaN )  ;", "Block   column 4     =    reader . readBlock ( BOOLEAN ,     4  )  ;", "assertEquals ( column 4  . isNull (  0  )  ,    false )  ;", "assertEquals ( column 4  . isNull (  1  )  ,    true )  ;", "assertEquals ( column 4  . isNull (  2  )  ,    false )  ;", "assertEquals ( BOOLEAN . getBoolean ( column 4  ,     0  )  ,    true )  ;", "assertEquals ( BOOLEAN . getBoolean ( column 4  ,     2  )  ,    false )  ;", "Block   column 5     =    reader . readBlock ( arrayType ,     5  )  ;", "assertEquals ( column 5  . getPositionCount (  )  ,     3  )  ;", "assertTrue ( arrayBlocksEqual ( BIGINT ,    arrayType . getObject ( column 5  ,     0  )  ,    arrayBlockOf ( BIGINT ,     1  ,     2  )  )  )  ;", "assertTrue ( arrayBlocksEqual ( BIGINT ,    arrayType . getObject ( column 5  ,     1  )  ,    arrayBlockOf ( BIGINT ,     3  ,    null )  )  )  ;", "assertTrue ( arrayBlocksEqual ( BIGINT ,    arrayType . getObject ( column 5  ,     2  )  ,    arrayBlockOf ( BIGINT )  )  )  ;", "Block   column 6     =    reader . readBlock ( mapType ,     6  )  ;", "assertEquals ( column 6  . getPositionCount (  )  ,     3  )  ;", "assertTrue ( mapBlocksEqual ( createVarcharType (  5  )  ,    BOOLEAN ,    arrayType . getObject ( column 6  ,     0  )  ,    mapBlockOf ( createVarcharType (  5  )  ,    BOOLEAN ,     \" k 1  \"  ,    true )  )  )  ;", "Block   object    =    arrayType . getObject ( column 6  ,     1  )  ;", "Block   k 2     =    mapBlockOf ( createVarcharType (  5  )  ,    BOOLEAN ,     \" k 2  \"  ,    null )  ;", "assertTrue ( mapBlocksEqual ( createVarcharType (  5  )  ,    BOOLEAN ,    object ,    k 2  )  )  ;", "assertTrue ( mapBlocksEqual ( createVarcharType (  5  )  ,    BOOLEAN ,    arrayType . getObject ( column 6  ,     2  )  ,    mapBlockOf ( createVarcharType (  5  )  ,    BOOLEAN ,     \" k 3  \"  ,    false )  )  )  ;", "Block   column 7     =    reader . readBlock ( arrayOfArrayType ,     7  )  ;", "assertEquals ( column 7  . getPositionCount (  )  ,     3  )  ;", "assertTrue ( arrayBlocksEqual ( arrayType ,    arrayOfArrayType . getObject ( column 7  ,     0  )  ,    arrayBlockOf ( arrayType ,    arrayBlockOf ( BIGINT ,     5  )  )  )  )  ;", "assertTrue ( arrayBlocksEqual ( arrayType ,    arrayOfArrayType . getObject ( column 7  ,     1  )  ,    arrayBlockOf ( arrayType ,    null ,    arrayBlockOf ( BIGINT ,     6  ,     7  )  )  )  )  ;", "assertTrue ( arrayBlocksEqual ( arrayType ,    arrayOfArrayType . getObject ( column 7  ,     2  )  ,    arrayBlockOf ( arrayType ,    arrayBlockOf ( BIGINT )  )  )  )  ;", "assertEquals ( reader . nextBatch (  )  ,     (  -  1  )  )  ;", "assertEquals ( reader . getReaderPosition (  )  ,     3  )  ;", "assertEquals ( reader . getFilePosition (  )  ,    reader . getFilePosition (  )  )  ;", "OrcFileMetadata   orcFileMetadata    =    TestShardWriter . METADATA _ CODEC . fromJson ( reader . getUserMetadata (  )  . get ( OrcFileMetadata . KEY )  . getBytes (  )  )  ;", "assertEquals ( orcFileMetadata ,    new   OrcFileMetadata ( ImmutableMap .  < Long ,    TypeSignature > builder (  )  . put (  1 L ,    BIGINT . getTypeSignature (  )  )  . put (  2 L ,    createVarcharType (  1  0  )  . getTypeSignature (  )  )  . put (  4 L ,    VARBINARY . getTypeSignature (  )  )  . put (  6 L ,    DOUBLE . getTypeSignature (  )  )  . put (  7 L ,    BOOLEAN . getTypeSignature (  )  )  . put (  8 L ,    arrayType . getTypeSignature (  )  )  . put (  9 L ,    mapType . getTypeSignature (  )  )  . put (  1  0 L ,    arrayOfArrayType . getTypeSignature (  )  )  . build (  )  )  )  ;", "}", "File   crcFile    =    new   File ( file . getParentFile (  )  ,     (  (  \"  .  \"     +     ( file . getName (  )  )  )     +     \"  . crc \"  )  )  ;", "assertFalse ( crcFile . exists (  )  )  ;", "}", "METHOD_END"], "methodName": ["testWriter"], "fileName": "com.facebook.presto.raptor.storage.TestShardWriter"}, {"methodBody": ["METHOD_START", "{", "List < Long >    columnIds    =    ImmutableList . of (  1 L )  ;", "List < Type >    columnTypes    =    ImmutableList . of ( BIGINT )  ;", "File   file    =    new   File ( directory ,     (  ( System . nanoTime (  )  )     +     \"  . orc \"  )  )  ;", "try    ( OrcFile   ignored    =    new   OrcFile ( columnIds ,    columnTypes ,    file )  )     {", "}", "try    ( OrcDataSource   dataSource    =    OrcTestingUtil . fileOrcDataSource ( file )  )     {", "OrcRecordReader   reader    =    OrcTestingUtil . createReaderNoRows ( dataSource )  ;", "assertEquals ( reader . getReaderRowCount (  )  ,     0  )  ;", "assertEquals ( reader . getReaderPosition (  )  ,     0  )  ;", "assertEquals ( reader . nextBatch (  )  ,     (  -  1  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testWriterZeroRows"], "fileName": "com.facebook.presto.raptor.storage.TestShardWriter"}, {"methodBody": ["METHOD_START", "{", "ConfigAssertions . assertRecordedDefaults ( ConfigAssertions . recordDefaults ( StorageManagerConfig . class )  . setDataDirectory ( null )  . setMinAvailableSpace ( new   io . airlift . units . DataSize (  0  ,    Unit . BYTE )  )  . setOrcMaxMergeDistance ( new   io . airlift . units . DataSize (  1  ,    Unit . MEGABYTE )  )  . setOrcMaxReadSize ( new   io . airlift . units . DataSize (  8  ,    Unit . MEGABYTE )  )  . setOrcStreamBufferSize ( new   io . airlift . units . DataSize (  8  ,    Unit . MEGABYTE )  )  . setOrcLazyReadSmallRanges ( true )  . setDeletionThreads ( Math . max (  1  ,     (  ( Runtime . getRuntime (  )  . availableProcessors (  )  )     /     2  )  )  )  . setShardRecoveryTimeout ( new   Duration (  3  0  ,    TimeUnit . SECONDS )  )  . setMissingShardDiscoveryInterval ( new   Duration (  5  ,    TimeUnit . MINUTES )  )  . setCompactionInterval ( new   Duration (  1  ,    TimeUnit . HOURS )  )  . setShardEjectorInterval ( new   Duration (  4  ,    TimeUnit . HOURS )  )  . setRecoveryThreads (  1  0  )  . setOrganizationThreads (  5  )  . setCompactionEnabled ( true )  . setOrganizationEnabled ( true )  . setOrganizationInterval ( new   Duration (  7  ,    TimeUnit . DAYS )  )  . setMaxShardRows (  1  0  0  0  0  0  0  )  . setMaxShardSize ( new   io . airlift . units . DataSize (  2  5  6  ,    Unit . MEGABYTE )  )  . setMaxBufferSize ( new   io . airlift . units . DataSize (  2  5  6  ,    Unit . MEGABYTE )  )  . setOneSplitPerBucketThreshold (  0  )  . setShardDayBoundaryTimeZone ( UTC _ KEY . getId (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testDefaults"], "fileName": "com.facebook.presto.raptor.storage.TestStorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    properties    =    new   Builder < String ,    String >  (  )  . put (  \" storage . data - directory \"  ,     \"  / data \"  )  . put (  \" storage . min - available - space \"  ,     \"  1  2  3 GB \"  )  . put (  \" storage . orc . max - merge - distance \"  ,     \"  1  6 kB \"  )  . put (  \" storage . orc . max - read - size \"  ,     \"  1  6 kB \"  )  . put (  \" storage . orc . stream - buffer - size \"  ,     \"  1  6 kB \"  )  . put (  \" storage . orc . lazy - read - small - ranges \"  ,     \" false \"  )  . put (  \" storage . max - deletion - threads \"  ,     \"  9  9  9  \"  )  . put (  \" storage . shard - recovery - timeout \"  ,     \"  1 m \"  )  . put (  \" storage . missing - shard - discovery - interval \"  ,     \"  4 m \"  )  . put (  \" storage . compaction - enabled \"  ,     \" false \"  )  . put (  \" storage . compaction - interval \"  ,     \"  4 h \"  )  . put (  \" storage . organization - enabled \"  ,     \" false \"  )  . put (  \" storage . organization - interval \"  ,     \"  4 h \"  )  . put (  \" storage . ejector - interval \"  ,     \"  9 h \"  )  . put (  \" storage . max - recovery - threads \"  ,     \"  1  2  \"  )  . put (  \" storage . max - organization - threads \"  ,     \"  1  2  \"  )  . put (  \" storage . max - shard - rows \"  ,     \"  1  0  0  0  0  \"  )  . put (  \" storage . max - shard - size \"  ,     \"  1  0 MB \"  )  . put (  \" storage . max - buffer - size \"  ,     \"  5  1  2 MB \"  )  . put (  \" storage . one - split - per - bucket - threshold \"  ,     \"  4  \"  )  . put (  \" storage . shard - day - boundary - time - zone \"  ,     \" PST \"  )  . build (  )  ;", "expected    =    new    (  )  . setDataDirectory ( new   File (  \"  / data \"  )  )  . setMinAvailableSpace ( new   io . airlift . units . DataSize (  1  2  3  ,    Unit . GIGABYTE )  )  . setOrcMaxMergeDistance ( new   io . airlift . units . DataSize (  1  6  ,    Unit . KILOBYTE )  )  . setOrcMaxReadSize ( new   io . airlift . units . DataSize (  1  6  ,    Unit . KILOBYTE )  )  . setOrcStreamBufferSize ( new   io . airlift . units . DataSize (  1  6  ,    Unit . KILOBYTE )  )  . setOrcLazyReadSmallRanges ( false )  . setDeletionThreads (  9  9  9  )  . setShardRecoveryTimeout ( new   Duration (  1  ,    TimeUnit . MINUTES )  )  . setMissingShardDiscoveryInterval ( new   Duration (  4  ,    TimeUnit . MINUTES )  )  . setCompactionEnabled ( false )  . setCompactionInterval ( new   Duration (  4  ,    TimeUnit . HOURS )  )  . setOrganizationEnabled ( false )  . setOrganizationInterval ( new   Duration (  4  ,    TimeUnit . HOURS )  )  . setShardEjectorInterval ( new   Duration (  9  ,    TimeUnit . HOURS )  )  . setRecoveryThreads (  1  2  )  . setOrganizationThreads (  1  2  )  . setMaxShardRows (  1  0  0  0  0  )  . setMaxShardSize ( new   io . airlift . units . DataSize (  1  0  ,    Unit . MEGABYTE )  )  . setMaxBufferSize ( new   io . airlift . units . DataSize (  5  1  2  ,    Unit . MEGABYTE )  )  . setOneSplitPerBucketThreshold (  4  )  . setShardDayBoundaryTimeZone (  \" PST \"  )  ;", "ConfigAssertions . assertFullMapping ( properties ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testExplicitPropertyMappings"], "fileName": "com.facebook.presto.raptor.storage.TestStorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "ValidationAssertions . assertFailsValidation ( new   StorageManagerConfig (  )  . setDataDirectory ( null )  ,     \" dataDirectory \"  ,     \" may   not   be   null \"  ,    NotNull . class )  ;", "}", "METHOD_END"], "methodName": ["testValidations"], "fileName": "com.facebook.presto.raptor.storage.TestStorageManagerConfig"}, {"methodBody": ["METHOD_START", "{", "long   tableId    =    tableInfo . getTableId (  )  ;", "List < ShardIndexInfo >    shards    =    shardIndexInfos . stream (  )  . sorted (  . getShardIndexInfoComparator ( tableInfo )  )  . collect ( Collectors . toCollection ( ArrayList :  : new )  )  ;", "long   consumedBytes    =     0  ;", "long   consumedRows    =     0  ;", "ImmutableSet . Builder < ShardIndexInfo >    builder    =    ImmutableSet . builder (  )  ;", "ImmutableSet . Builder < OrganizationSet >    compactionSets    =    ImmutableSet . builder (  )  ;", "for    ( ShardIndexInfo   shard    :    shards )     {", "if    (  (  ( consumedBytes    +     ( shard . getUncompressedSize (  )  )  )     >     ( maxShardSize . toBytes (  )  )  )     |  |     (  ( consumedRows    +     ( shard . getRowCount (  )  )  )     >     ( maxShardRows )  )  )     {", "Set < ShardIndexInfo >    shardsToCompact    =    builder . build (  )  ;", "if    (  ( shardsToCompact . size (  )  )     >     1  )     {", "compactionSets . add ( ShardOrganizerUtil . createOrganizationSet ( tableId ,    shardsToCompact )  )  ;", "}", "builder    =    ImmutableSet . builder (  )  ;", "consumedBytes    =     0  ;", "consumedRows    =     0  ;", "}", "builder . add ( shard )  ;", "consumedBytes    +  =    shard . getUncompressedSize (  )  ;", "consumedRows    +  =    shard . getRowCount (  )  ;", "}", "Set < ShardIndexInfo >    shardsToCompact    =    builder . build (  )  ;", "if    (  ( shardsToCompact . size (  )  )     >     1  )     {", "compactionSets . add ( ShardOrganizerUtil . createOrganizationSet ( tableId ,    shardsToCompact )  )  ;", "}", "return   compactionSets . build (  )  ;", "}", "METHOD_END"], "methodName": ["buildCompactionSets"], "fileName": "com.facebook.presto.raptor.storage.organization.CompactionSetCreator"}, {"methodBody": ["METHOD_START", "{", "Collection < Collection < ShardIndexInfo >  >    shardsByDaysBuckets    =    ShardOrganizerUtil . getShardsByDaysBuckets ( tableInfo ,    shards ,    temporalFunction )  ;", "ImmutableSet . Builder < OrganizationSet >    compactionSets    =    ImmutableSet . builder (  )  ;", "for    ( Collection < ShardIndexInfo >    shardInfos    :    shardsByDaysBuckets )     {", "compactionSets . addAll ( builds ( tableInfo ,    ImmutableSet . copyOf ( shardInfos )  )  )  ;", "}", "return   compactionSets . build (  )  ;", "}", "METHOD_END"], "methodName": ["createCompactionSets"], "fileName": "com.facebook.presto.raptor.storage.organization.CompactionSetCreator"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( tableInfo . getTemporalColumnId (  )  . isPresent (  )  )  )     {", "return   rator . comparing ( ShardIndexInfo :  : getUncompressedSize )  ;", "}", "return   rator . comparing (  (    info )     -  >    info . getTemporalRange (  )  . get (  )  ,    rator . comparing ( ShardRange :  : getMinTuple )  . thenring ( ShardRange :  : getMaxTuple )  )  ;", "}", "METHOD_END"], "methodName": ["getShardIndexInfoComparator"], "fileName": "com.facebook.presto.raptor.storage.organization.CompactionSetCreator"}, {"methodBody": ["METHOD_START", "{", "List < TableColumn >    sortColumns    =    metadataDao . listSortColumns ( tableId )  ;", "List < Long >    sortColumnIds    =    sortColumns . stream (  )  . map ( TableColumn :  : getColumnId )  . collect ( Collecs . toList (  )  )  ;", "List < ColumnInfo >    columns    =    metadataDao . listTableColumns ( tableId )  . stream (  )  . map ( TableColumn :  : toColumnInfo )  . collect ( Collecs . toList (  )  )  ;", "return   new   TableMetadata ( tableId ,    columns ,    sortColumnIds )  ;", "}", "METHOD_END"], "methodName": ["getTableMetadata"], "fileName": "com.facebook.presto.raptor.storage.organization.OrganizationJob"}, {"methodBody": ["METHOD_START", "{", "if    ( tableMetadata . getSortColumnIds (  )  . isEmpty (  )  )     {", "return   compaccompact ( transactionId ,    bucketNumber ,    shardUuids ,    tableMetadata . getColumns (  )  )  ;", "}", "return   compaccompactSorted ( transactionId ,    bucketNumber ,    shardUuids ,    tableMetadata . getColumns (  )  ,    tableMetadata . getSortColumnIds (  )  ,    Collections . nCopies ( tableMetadata . getSortColumnIds (  )  . size (  )  ,    ASC _ NULLS _ FIRST )  )  ;", "}", "METHOD_END"], "methodName": ["performCompaction"], "fileName": "com.facebook.presto.raptor.storage.organization.OrganizationJob"}, {"methodBody": ["METHOD_START", "{", "long   transactionId    =    shardManager . beginTransaction (  )  ;", "try    {", "runJob ( transactionId ,    bucketNumber ,    tableId ,    shardUuids )  ;", "}    catch    ( Throwable   e )     {", "shardManager . rollbackTransaction ( transactionId )  ;", "throw   e ;", "}", "}", "METHOD_END"], "methodName": ["runJob"], "fileName": "com.facebook.presto.raptor.storage.organization.OrganizationJob"}, {"methodBody": ["METHOD_START", "{", "TableMetadata   metadata    =    getTableMetadata ( tableId )  ;", "List < ShardInfo >    newShards    =    performCompaction ( transactionId ,    bucketNumber ,    shardUuids ,    metadata )  ;", ". log . info (  \" Compacted   shards    % s   into    % s \"  ,    shardUuids ,    newShards . stream (  )  . map ( ShardInfo :  : getShardUuid )  . collect ( Collectors . toList (  )  )  )  ;", "shardManager . replaceShardUuids ( transactionId ,    tableId ,    metadata . getColumns (  )  ,    shardUuids ,    newShards ,    OptionalLong . empty (  )  )  ;", "}", "METHOD_END"], "methodName": ["runJob"], "fileName": "com.facebook.presto.raptor.storage.organization.OrganizationJob"}, {"methodBody": ["METHOD_START", "{", "return   bucketNumber ;", "}", "METHOD_END"], "methodName": ["getBucketNumber"], "fileName": "com.facebook.presto.raptor.storage.organization.OrganizationSet"}, {"methodBody": ["METHOD_START", "{", "return   shards ;", "}", "METHOD_END"], "methodName": ["getShards"], "fileName": "com.facebook.presto.raptor.storage.organization.OrganizationSet"}, {"methodBody": ["METHOD_START", "{", "return   tableId ;", "}", "METHOD_END"], "methodName": ["getTableId"], "fileName": "com.facebook.presto.raptor.storage.organization.OrganizationSet"}, {"methodBody": ["METHOD_START", "{", "ShardCompactionManager . log . info (  \" Discovering   shards   that   need   compaction .  .  .  \"  )  ;", "Set < ShardMetadata >    allShards    =    shardManager . getNodeShards ( currentNodeIdentifier )  ;", "ListMultimap < Long ,    ShardMetadata >    tableShards    =    Multimaps . index ( allShards ,    ShardMetadata :  : getTableId )  ;", "for    ( Map . Entry < Long ,    List < ShardMetadata >  >    entry    :    Multimaps . asMap ( tableShards )  . entrySet (  )  )     {", "long   tableId    =    entry . getKey (  )  ;", "if    (  !  ( metadataDao . isCompactionEligible ( tableId )  )  )     {", "continue ;", "}", "List < ShardMetadata >    shards    =    entry . getValue (  )  ;", "Collection < OrganizationSet >    organizationSets    =    filterAndCreateCompactionSets ( tableId ,    shards )  ;", "ShardCompactionManager . log . info (  \" Created    % s   organization   set ( s )    for   table   ID    % s \"  ,    size (  )  ,    tableId )  ;", "for    ( OrganizationSet   set    :    organizationSets )     {", "enqueue ( set )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["discoverShards"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardCompactionManager"}, {"methodBody": ["METHOD_START", "{", "Table   tableInfo    =    metadataDao . getTableInformation ( tableId )  ;", "OptionalLong   temporalColumnId    =    tableInfo . getTemporalColumnId (  )  ;", "if    ( temporalColumnId . isPresent (  )  )     {", "TableColumn   tableColumn    =    metadataDao . getTableColumn ( tableId ,    temporalColumnId . getAsLong (  )  )  ;", "if    (  !  (  . isValidTemporalColumn ( tableId ,    tableColumn . getDataType (  )  )  )  )     {", "return   ImmutableSet . of (  )  ;", "}", "}", "Set < ShardMetadata >    filteredShards    =    tableShards . stream (  )  . filter ( this :  : needsCompaction )  . filter (  (    shard )     -  >     !  ( inProgress ( shard . getShardUuid (  )  )  )  )  . collect ( Collectors . toSet (  )  )  ;", "Collection < ShardIndexInfo >    shardIndexInfos    =    ShardOrganizerUtil . getOrganizationEligibleShards ( dbi ,    metadataDao ,    tableInfo ,    filteredShards ,    false )  ;", "if    ( tableInfo . getTemporalColumnId (  )  . isPresent (  )  )     {", "Set < ShardIndexInfo >    temporalShards    =    shardIndexInfos . stream (  )  . filter (  (    shard )     -  >    shard . getTemporalRange (  )  . isPresent (  )  )  . collect ( Collectors . toSet (  )  )  ;", "return   compactionSetCreator . createCompactionSets ( tableInfo ,    temporalShards )  ;", "}", "return   compactionSetCreator . createCompactionSets ( tableInfo ,    shardIndexInfos )  ;", "}", "METHOD_END"], "methodName": ["filterAndCreateCompactionSets"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardCompactionManager"}, {"methodBody": ["METHOD_START", "{", "if    (  (  !  ( type . equals ( DATE )  )  )     &  &     (  !  ( type . equals ( TIMESTAMP )  )  )  )     {", ". log . warn (  \" Temporal   column   type   of   table   ID    % s   set   incorrectly   to    % s \"  ,    tableId ,    type )  ;", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["isValidTemporalColumn"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardCompactionManager"}, {"methodBody": ["METHOD_START", "{", "if    (  ( shard . getUncompressedSize (  )  )     <     (  ( ShardCompactionManager . FILL _ FACTOR )     *     ( maxShardSize . toBytes (  )  )  )  )     {", "return   true ;", "}", "if    (  ( shard . getRowCount (  )  )     <     (  ( ShardCompactionManager . FILL _ FACTOR )     *     ( maxShardRows )  )  )     {", "return   true ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["needsCompaction"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardCompactionManager"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( compactionEnabled )  )     {", "return ;", "}", "shutdown . set ( true )  ;", "compactionDiscoveryService . shutdown (  )  ;", "}", "METHOD_END"], "methodName": ["shutdown"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardCompactionManager"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( compactionEnabled )  )     {", "return ;", "}", "if    (  !  ( discoveryStarted . getAndSet ( true )  )  )     {", "startDiscovery (  )  ;", "}", "}", "METHOD_END"], "methodName": ["start"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardCompactionManager"}, {"methodBody": ["METHOD_START", "{", "compactionDiscoveryService . scheduleWithFixedDelay (  (  )     -  >     {", "try    {", "long   interval    =     (  ( long )     ( compactionDiscoveryInterval . convertTo ( SECONDS )  . getValue (  )  )  )  ;", "SECONDS . sleep ( ThreadLocalRandom . current (  )  . nextLong (  1  ,    interval )  )  ;", "discoverShards (  )  ;", "}    catch    (    e )     {", "Thread . currentThread (  )  . interrupt (  )  ;", "}    catch    (    t )     {", ". log . error ( t ,     \" Error   discovering   shards   to   compact \"  )  ;", "}", "}  ,     0  ,    compactionDiscoveryInterval . toMillis (  )  ,    TimeUnit . MILLISECONDS )  ;", "}", "METHOD_END"], "methodName": ["startDiscovery"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardCompactionManager"}, {"methodBody": ["METHOD_START", "{", "for    ( UUID   uuid    :    uuids )     {", "try    ( ConnectorPageSource   pageSource    =    storageManager . getPageSource ( uuid ,    bucketNumber ,    columnIds ,    columnTypes ,    TupleDomain . all (  )  ,    readerAttributes )  )     {", "while    (  !  ( pageSource . isFinished (  )  )  )     {", "Page   page    =    pageSource . getNextPage (  )  ;", "if    (  . isNullOrEmptyPage ( page )  )     {", "continue ;", "}", "storagePageSink . appendPages ( ImmutableList . of ( page )  )  ;", "if    ( storagePageSink . isFull (  )  )     {", "storagePageSink . flush (  )  ;", "}", "}", "}", "}", "return   MoreFutures . getFutureValue ( storagePageSink . commit (  )  )  ;", "}", "METHOD_END"], "methodName": ["compact"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardCompactor"}, {"methodBody": ["METHOD_START", "{", "long   start    =    System . nanoTime (  )  ;", "List < Long >    columnIds    =    columns . stream (  )  . map ( ColumnInfo :  : getColumnId )  . collect ( Collectors . toList (  )  )  ;", "List < Type >    columnTypes    =    columns . stream (  )  . map ( ColumnInfo :  : getType )  . collect ( Collectors . toList (  )  )  ;", "StoragePageSink   PageSink    =    Manager . createStoragePageSink ( transactionId ,    bucketNumber ,    columnIds ,    columnTypes ,    false )  ;", "List < ShardInfo >    shardInfos ;", "try    {", "shardInfos    =    compact ( PageSink ,    bucketNumber ,    uuids ,    columnIds ,    columnTypes )  ;", "}    catch    ( IOException    |    RuntimeException   e )     {", "PageSink . rollback (  )  ;", "throw   e ;", "}", "updateStats ( uuids . size (  )  ,    shardInfos . size (  )  ,    nanosSince ( start )  . toMillis (  )  )  ;", "return   shardInfos ;", "}", "METHOD_END"], "methodName": ["compact"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardCompactor"}, {"methodBody": ["METHOD_START", "{", "checkArgument (  (  ( sortColumnIds . size (  )  )     =  =     ( sortOrders . size (  )  )  )  ,     \" sortColumnIds   and   sortOrders   must   be   of   the   same   size \"  )  ;", "long   start    =    System . nanoTime (  )  ;", "List < Long >    columnIds    =    columns . stream (  )  . map ( ColumnInfo :  : getColumnId )  . collect ( Collectors . toList (  )  )  ;", "List < Type >    columnTypes    =    columns . stream (  )  . map ( ColumnInfo :  : getType )  . collect ( Collectors . toList (  )  )  ;", "checkArgument ( columnIds . containsAll ( sortColumnIds )  ,     \" sortColumnIds   must   be   a   subset   of   columnIds \"  )  ;", "List < Integer >    sortIndexes    =    sortColumnIds . stream (  )  . map ( columnIds :  : indexOf )  . collect ( Collectors . toList (  )  )  ;", "Queue <  . SortedRowSource >    rowSources    =    new   PriorityQueue <  >  (  )  ;", "StoragePageSink   outputPageSink    =    storageManager . createStoragePageSink ( transactionId ,    bucketNumber ,    columnIds ,    columnTypes ,    false )  ;", "try    {", "for    ( UUID   uuid    :    uuids )     {", "ConnectorPageSource   pageSource    =    storageManager . getPageSource ( uuid ,    bucketNumber ,    columnIds ,    columnTypes ,    TupleDomain . all (  )  ,    readerAttributes )  ;", ". SortedRowSource   rowSource    =    new    . SortedRowSource ( pageSource ,    columnTypes ,    sortIndexes ,    sortOrders )  ;", "rowSources . add ( rowSource )  ;", "}", "while    (  !  ( rowSources . isEmpty (  )  )  )     {", ". SortedRowSource   rowSource    =    rowSources . poll (  )  ;", "if    (  !  ( rowSource . hasNext (  )  )  )     {", "rowSource . close (  )  ;", "continue ;", "}", "outputPageSink . appendRow ( rowSource . next (  )  )  ;", "if    ( outputPageSink . isFull (  )  )     {", "outputPageSink . flush (  )  ;", "}", "rowSources . add ( rowSource )  ;", "}", "outputPageSink . flush (  )  ;", "List < ShardInfo >    shardInfos    =    MoreFutures . getFutureValue ( outputPageSink . commit (  )  )  ;", "updateStats ( uuids . size (  )  ,    shardInfos . size (  )  ,    nanosSince ( start )  . toMillis (  )  )  ;", "return   shardInfos ;", "}    catch    ( IOException    |    RuntimeException   e )     {", "outputPageSink . rollback (  )  ;", "throw   e ;", "}    finally    {", "rowSources . forEach (  . SortedRowSource :  : closeQuietly )  ;", "}", "}", "METHOD_END"], "methodName": ["compactSorted"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardCompactor"}, {"methodBody": ["METHOD_START", "{", "return   compactionLatencyMillis ;", "}", "METHOD_END"], "methodName": ["getCompactionLatencyMillis"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardCompactor"}, {"methodBody": ["METHOD_START", "{", "return   inputShards ;", "}", "METHOD_END"], "methodName": ["getInputShards"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardCompactor"}, {"methodBody": ["METHOD_START", "{", "return   inputShardsPerCompaction ;", "}", "METHOD_END"], "methodName": ["getInputShardsPerCompaction"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardCompactor"}, {"methodBody": ["METHOD_START", "{", "return   outputShards ;", "}", "METHOD_END"], "methodName": ["getOutputShards"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardCompactor"}, {"methodBody": ["METHOD_START", "{", "return   outputShardsPerCompaction ;", "}", "METHOD_END"], "methodName": ["getOutputShardsPerCompaction"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardCompactor"}, {"methodBody": ["METHOD_START", "{", "return   sortedCompactionLatencyMillis ;", "}", "METHOD_END"], "methodName": ["getSortedCompactionLatencyMillis"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardCompactor"}, {"methodBody": ["METHOD_START", "{", "return    ( nextPage    =  =    null )     |  |     (  ( nextPage . getPositionCount (  )  )     =  =     0  )  ;", "}", "METHOD_END"], "methodName": ["isNullOrEmptyPage"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardCompactor"}, {"methodBody": ["METHOD_START", "{", "inputShards . update ( inputShardsCount )  ;", "outputShards . update ( outputShardsCount )  ;", "inputShardsPerion . add ( inputShardsCount )  ;", "outputShardsPerion . add ( outputShardsCount )  ;", "compactionLatencyMillis . add ( latency )  ;", "}", "METHOD_END"], "methodName": ["updateStats"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardCompactor"}, {"methodBody": ["METHOD_START", "{", "return   bucketNumber ;", "}", "METHOD_END"], "methodName": ["getBucketNumber"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardIndexInfo"}, {"methodBody": ["METHOD_START", "{", "return   rowCount ;", "}", "METHOD_END"], "methodName": ["getRowCount"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardIndexInfo"}, {"methodBody": ["METHOD_START", "{", "return   shardUuid ;", "}", "METHOD_END"], "methodName": ["getShardUuid"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardIndexInfo"}, {"methodBody": ["METHOD_START", "{", "return   sortRange ;", "}", "METHOD_END"], "methodName": ["getSortRange"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardIndexInfo"}, {"methodBody": ["METHOD_START", "{", "return   tableId ;", "}", "METHOD_END"], "methodName": ["getTableId"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardIndexInfo"}, {"methodBody": ["METHOD_START", "{", "return   temporalRange ;", "}", "METHOD_END"], "methodName": ["getTemporalRange"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardIndexInfo"}, {"methodBody": ["METHOD_START", "{", "return   uncompressedSize ;", "}", "METHOD_END"], "methodName": ["getUncompressedSize"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardIndexInfo"}, {"methodBody": ["METHOD_START", "{", "return   ShardOrganizerUtil . getShardsByDaysBuckets ( tableInfo ,    shards ,    temporalFunction )  . stream (  )  . map (  (    indexInfos )     -  >    ShardOrganizationManager . getOverlappingOrganizationSets ( tableInfo ,    indexInfos )  )  . flatMap ( Collection :  : stream )  . collect ( Collectors . toSet (  )  )  ;", "}", "METHOD_END"], "methodName": ["createOrganizationSets"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardOrganizationManager"}, {"methodBody": ["METHOD_START", "{", "Set < Long >    enabledTableIds    =    metadataDao . getOrganizationEligibleTables (  )  ;", "Set < TableOrganizationInfo >    tableOrganizationInfo    =    getNodeTableOrganizationInfo ( currentNodeIdentifier )  ;", "Map < Long ,    TableOrganizationInfo >    organizationInfos    =    Maps . uniqueIndex ( tableOrganizationInfo ,    TableOrganizationInfo :  : getTableId )  ;", "difference ( enabledTableIds ,    keySet (  )  )  . forEach (  (    tableId )     -  >    insertNode ( currentNodeIdentifier ,    tableId )  )  ;", "ImmutableSet . Builder < Long >    tableIds    =    ImmutableSet . builder (  )  ;", "for    ( Long   tableId    :    enabledTableIds )     {", "TableOrganizationInfo   info    =    get ( tableId )  ;", "if    (  ( info    =  =    null )     |  |     ( shouldRunOrganization ( info )  )  )     {", "tableIds . add ( tableId )  ;", "}", "}", "return   tableIds . build (  )  ;", "}", "METHOD_END"], "methodName": ["discoverAndInitializeTablesToOrganize"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardOrganizationManager"}, {"methodBody": ["METHOD_START", "{", "if    (  ( shards . size (  )  )     <  =     1  )     {", "return   ImmutableSet . of (  )  ;", "}", "List < ShardIndexInfo >    sortedShards    =    shards . stream (  )  . sorted (  (    o 1  ,    o 2  )     -  >     {", "ShardRange   sortRange 1     =    o 1  . getSortRange (  )  . get (  )  ;", "ShardRange   sortRange 2     =    o 2  . getSortRange (  )  . get (  )  ;", "return   ComparisonChain . start (  )  . compare ( sortRange 1  . getMinTuple (  )  ,    sortRange 2  . getMinTuple (  )  )  . compare ( sortRange 2  . getMaxTuple (  )  ,    sortRange 1  . getMaxTuple (  )  )  . result (  )  ;", "}  )  . collect ( Collectors . toList (  )  )  ;", "Set < Set >    organizationSets    =    new   HashSet <  >  (  )  ;", "ImmutableSet . Builder < ShardIndexInfo >    builder    =    ImmutableSet . builder (  )  ;", "builder . add ( sortedShards . get (  0  )  )  ;", "int   previousRange    =     0  ;", "int   nextRange    =    previousRange    +     1  ;", "while    ( nextRange    <     ( sortedShards . size (  )  )  )     {", "ShardRange   sortRange 1     =    sortedShards . get ( previousRange )  . getSortRange (  )  . get (  )  ;", "ShardRange   sortRange 2     =    sortedShards . get ( nextRange )  . getSortRange (  )  . get (  )  ;", "if    (  ( sortRange 1  . overlaps ( sortRange 2  )  )     &  &     (  !  ( sortRange 1  . adjacent ( sortRange 2  )  )  )  )     {", "builder . add ( sortedShards . get ( nextRange )  )  ;", "if    (  !  ( sortRange 1  . encloses ( sortRange 2  )  )  )     {", "previousRange    =    nextRange ;", "}", "} else    {", "Set < ShardIndexInfo >    indexInfos    =    builder . build (  )  ;", "if    (  ( indexInfos . size (  )  )     >     1  )     {", "add ( ShardOrganizerUtil . createSet ( tableInfo . getTableId (  )  ,    indexInfos )  )  ;", "}", "builder    =    ImmutableSet . builder (  )  ;", "previousRange    =    nextRange ;", "builder . add ( sortedShards . get ( previousRange )  )  ;", "}", "nextRange +  +  ;", "}", "Set < ShardIndexInfo >    indexInfos    =    builder . build (  )  ;", "if    (  ( indexInfos . size (  )  )     >     1  )     {", "add ( ShardOrganizerUtil . createSet ( tableInfo . getTableId (  )  ,    indexInfos )  )  ;", "}", "return   organizationSets ;", "}", "METHOD_END"], "methodName": ["getOverlappingOrganizationSets"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardOrganizationManager"}, {"methodBody": ["METHOD_START", "{", "Set < ShardMetadata >    shardMetadatas    =    shardManager . getNodeShards ( currentNodeIdentifier ,    tableId )  ;", "Table   tableInfo    =    metadataDao . getTableInformation ( tableId )  ;", "Set < ShardMetadata >    filteredShards    =    shardMetadatas . stream (  )  . filter (  (    shard )     -  >     !  ( inProgress ( shard . getShardUuid (  )  )  )  )  . collect ( Collectors . toSet (  )  )  ;", "Collection < ShardIndexInfo >    indexInfos    =    ShardOrganizerUtil . getOrganizationEligibleShards ( dbi ,    metadataDao ,    tableInfo ,    filteredShards ,    true )  ;", "Set < OrganizationSet >    organizationSets    =     . createOrganizationSets ( temporalFunction ,    tableInfo ,    indexInfos )  ;", "if    ( isEmpty (  )  )     {", "return ;", "}", ". log . info (  \" Created    % s   organization   set ( s )    from    % s   shards   for   table   ID    % s \"  ,    size (  )  ,    filteredShards . size (  )  ,    tableId )  ;", "long   lastStartTime    =    System . currentTimeMillis (  )  ;", "tablesInProgress . add ( tableId )  ;", "ImmutableList . Builder < CompletableFuture <  ?  >  >    futures    =    ImmutableList . builder (  )  ;", "for    ( OrganizationSet   organizationSet    :    organizationSets )     {", "futures . add ( enqueue ( organizationSet )  )  ;", "}", "MoreFutures . allAsList ( futures . build (  )  )  . whenComplete (  (    value ,    throwable )     -  >     {", "tablesInProgress . remove ( tableId )  ;", "updateLastStartTime ( currentNodeIdentifier ,    tableId ,    lastStartTime )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["runOrganization"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardOrganizationManager"}, {"methodBody": ["METHOD_START", "{", "if    ( tablesInProgress . contains ( info . getTableId (  )  )  )     {", "return   false ;", "}", "if    (  !  ( info . getLastStartTimeMillis (  )  . isPresent (  )  )  )     {", "return   true ;", "}", "return    (  ( System . currentTimeMillis (  )  )     -     ( info . getLastStartTimeMillis (  )  . getAsLong (  )  )  )     >  =     ( IntervalMillis )  ;", "}", "METHOD_END"], "methodName": ["shouldRunOrganization"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardOrganizationManager"}, {"methodBody": ["METHOD_START", "{", "discoveryService . shutdownNow (  )  ;", "}", "METHOD_END"], "methodName": ["shutdown"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardOrganizationManager"}, {"methodBody": ["METHOD_START", "{", "if    (  (  !  ( enabled )  )     |  |     ( started . getAndSet ( true )  )  )     {", "return ;", "}", "startDiscovery (  )  ;", "}", "METHOD_END"], "methodName": ["start"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardOrganizationManager"}, {"methodBody": ["METHOD_START", "{", "discoveryService . scheduleWithFixedDelay (  (  )     -  >     {", "try    {", "TimeUnit . SECONDS . sleep ( ThreadLocalRandom . current (  )  . nextLong (  1  ,     (  5     *     6  0  )  )  )  ;", ". log . info (  \" Running   shard   \"  )  ;", "submitJobs ( discoverAndInitializeTablesToOrganize (  )  )  ;", "}    catch    ( InterruptedException   e )     {", "Thread . currentThread (  )  . interrupt (  )  ;", "}    catch    ( Throwable   t )     {", ". log . error ( t ,     \" Error   running   shard   organizer \"  )  ;", "}", "}  ,     0  ,     5  ,    TimeUnit . MINUTES )  ;", "}", "METHOD_END"], "methodName": ["startDiscovery"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardOrganizationManager"}, {"methodBody": ["METHOD_START", "{", "tableIds . forEach ( this :  : runOrganization )  ;", "}", "METHOD_END"], "methodName": ["submitJobs"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardOrganizationManager"}, {"methodBody": ["METHOD_START", "{", "shardsInProgress . addAll ( getShards (  )  )  ;", "return   CompletableFuture . runAsync ( jobFactory . create ( organizationSet )  ,    executorService )  . whenComplete (  (    none ,    throwable )     -  >     {", "shardsInProgress . removeAll ( getShards (  )  )  ;", "if    ( throwable    =  =    null )     {", "successCount . update (  1  )  ;", "} else    {", ". log . warn ( throwable ,     \" Error   running   organization   job \"  )  ;", "failureCount . update (  1  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["enqueue"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardOrganizer"}, {"methodBody": ["METHOD_START", "{", "return   executorMBean ;", "}", "METHOD_END"], "methodName": ["getExecutor"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardOrganizer"}, {"methodBody": ["METHOD_START", "{", "return   failureCount ;", "}", "METHOD_END"], "methodName": ["getFailureCount"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardOrganizer"}, {"methodBody": ["METHOD_START", "{", "return   shardsInProgress . size (  )  ;", "}", "METHOD_END"], "methodName": ["getShardsInProgress"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardOrganizer"}, {"methodBody": ["METHOD_START", "{", "return   successCount ;", "}", "METHOD_END"], "methodName": ["getSuccessCount"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardOrganizer"}, {"methodBody": ["METHOD_START", "{", "return   shardsInProgress . contains ( shardUuid )  ;", "}", "METHOD_END"], "methodName": ["inProgress"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardOrganizer"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( shutdown . getAndSet ( true )  )  )     {", "execuService . shutdownNow (  )  ;", "}", "}", "METHOD_END"], "methodName": ["shutdown"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardOrganizer"}, {"methodBody": ["METHOD_START", "{", "Set < UUID >    uuids    =    shardsToCompact . stream (  )  . map ( ShardIndexInfo :  : getShardUuid )  . collect ( Collectors . toSet (  )  )  ;", "Set < OptionalInt >    bucketNumber    =    shardsToCompact . stream (  )  . map ( ShardIndexInfo :  : getBucketNumber )  . collect ( Collectors . toSet (  )  )  ;", "checkArgument (  (  ( bucketNumber . size (  )  )     =  =     1  )  )  ;", "return   new   OSet ( tableId ,    uuids ,    getOnlyElement ( bucketNumber )  )  ;", "}", "METHOD_END"], "methodName": ["createOrganizationSet"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardOrganizerUtil"}, {"methodBody": ["METHOD_START", "{", "Map < Long ,    ShardMetadata >    shardsById    =    uniqueIndex ( shards ,    ShardMetadata :  : getShardId )  ;", "long   tableId    =    tableInfo . getTableId (  )  ;", "ImmutableList . Builder < String >    columnsBuilder    =    ImmutableList . builder (  )  ;", "columnsBuilder . add (  \" shard _ id \"  )  ;", "Optional < TableColumn >    temporalColumn    =    Optional . empty (  )  ;", "if    ( tableInfo . getTemporalColumnId (  )  . isPresent (  )  )     {", "long   temporalColumnId    =    tableInfo . getTemporalColumnId (  )  . getAsLong (  )  ;", "temporalColumn    =    Optional . of ( metadataDao . getTableColumn ( tableId ,    temporalColumnId )  )  ;", "columnsBuilder . add ( DatabaseShardManager . minColumn ( temporalColumnId )  ,    DatabaseShardManager . maxColumn ( temporalColumnId )  )  ;", "}", "Optional < List < TableColumn >  >    sortColumns    =    Optional . empty (  )  ;", "if    ( includeSortColumns )     {", "sortColumns    =    Optional . of ( metadataDao . listSortColumns ( tableId )  )  ;", "for    ( TableColumn   column    :    sortColumns . get (  )  )     {", "columnsBuilder . add ( DatabaseShardManager . minColumn ( column . getColumnId (  )  )  ,    DatabaseShardManager . maxColumn ( column . getColumnId (  )  )  )  ;", "}", "}", "String   columnToSelect    =    Joiner . on (  \"  ,  \\ n \"  )  . join ( columnsBuilder . build (  )  )  ;", "ImmutableList . Builder < ShardIndexInfo >    indexInfoBuilder    =    ImmutableList . builder (  )  ;", "try    ( Connection   connection    =    dbi . open (  )  . getConnection (  )  )     {", "for    ( List < ShardMetadata >    partitionedShards    :    partition ( shards ,     1  0  0  0  )  )     {", "String   shardIds    =    Joiner . on (  \"  ,  \"  )  . join ( Collections . nCopies ( partitionedShards . size (  )  ,     \"  ?  \"  )  )  ;", "String   sql    =    String . format (  (  \"  \"     +     (  (  \" SELECT    % s \\ n \"     +     \" FROM    % s \\ n \"  )     +     \" WHERE   shard _ id   IN    (  % s )  \"  )  )  ,    columnToSelect ,    DatabaseShardManager . shardIndexTable ( tableId )  ,    shardIds )  ;", "try    ( PreparedStatement   statement    =    connection . prepareStatement ( sql )  )     {", "for    ( int   i    =     0  ;    i    <     ( partitionedShards . size (  )  )  ;    i +  +  )     {", "statement . setLong (  ( i    +     1  )  ,    partitionedShards . get ( i )  . getShardId (  )  )  ;", "}", "try    ( ResultSet   resultSet    =    statement . executeQuery (  )  )     {", "while    ( resultSet . next (  )  )     {", "long   shardId    =    resultSet . getLong (  \" shard _ id \"  )  ;", "Optional < ShardRange >    sortRange    =    Optional . empty (  )  ;", "if    ( includeSortColumns )     {", "sortRange    =     . getShardRange ( sortColumns . get (  )  ,    resultSet )  ;", "if    (  !  ( sortRange . isPresent (  )  )  )     {", "continue ;", "}", "}", "Optional < ShardRange >    temporalRange    =    Optional . empty (  )  ;", "if    ( temporalColumn . isPresent (  )  )     {", "temporalRange    =     . getShardRange ( ImmutableList . of ( temporalColumn . get (  )  )  ,    resultSet )  ;", "if    (  !  ( temporalRange . isPresent (  )  )  )     {", "continue ;", "}", "}", "ShardMetadata   shardMetadata    =    shardsById . get ( shardId )  ;", "indexInfoBuilder . add (  . toShardIndexInfo ( shardMetadata ,    temporalRange ,    sortRange )  )  ;", "}", "}", "}", "}", "}    catch    ( SQLException   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "return   indexInfoBuilder . build (  )  ;", "}", "METHOD_END"], "methodName": ["getOrganizationEligibleShards"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardOrganizerUtil"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < Object >    minValuesBuilder    =    ImmutableList . builder (  )  ;", "ImmutableList . Builder < Object >    maxValuesBuilder    =    ImmutableList . builder (  )  ;", "ImmutableList . Builder < Type >    typeBuilder    =    ImmutableList . builder (  )  ;", "for    ( TableColumn   tableColumn    :    columns )     {", "long   columnId    =    tableColumn . getColumnId (  )  ;", "Type   type    =    tableColumn . getDataType (  )  ;", "Object   min    =     . getValue ( resultSet ,    type ,    DatabaseShardManager . minColumn ( columnId )  )  ;", "Object   max    =     . getValue ( resultSet ,    type ,    DatabaseShardManager . maxColumn ( columnId )  )  ;", "if    (  ( min    =  =    null )     |  |     ( max    =  =    null )  )     {", "return   Optional . empty (  )  ;", "}", "minValuesBuilder . add ( min )  ;", "maxValuesBuilder . add ( max )  ;", "typeBuilder . add ( type )  ;", "}", "List < Type >    types    =    typeBuilder . build (  )  ;", "Tuple   minTuple    =    new   Tuple ( types ,    minValuesBuilder . build (  )  )  ;", "Tuple   maxTuple    =    new   Tuple ( types ,    maxValuesBuilder . build (  )  )  ;", "return   Optional . of ( ShardRange . of ( minTuple ,    maxTuple )  )  ;", "}", "METHOD_END"], "methodName": ["getShardRange"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardOrganizerUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( shards . isEmpty (  )  )     {", "return   ImmutableList . of (  )  ;", "}", "if    (  (  !  ( tableInfo . getBucketCount (  )  . isPresent (  )  )  )     &  &     (  !  ( tableInfo . getTemporalColumnId (  )  . isPresent (  )  )  )  )     {", "return   ImmutableList . of ( shards )  ;", "}", "if    (  ( tableInfo . getBucketCount (  )  . isPresent (  )  )     &  &     (  !  ( tableInfo . getTemporalColumnId (  )  . isPresent (  )  )  )  )     {", "return   Multimaps . index ( shards ,     (    shard )     -  >    shard . getBucketNumber (  )  . getAsInt (  )  )  . asMap (  )  . values (  )  ;", "}", "Builder < Long ,    IndexInfo >    shardsByDaysBuilder    =    ImmutableMultimap . builder (  )  ;", "shards . stream (  )  . filter (  (    shard )     -  >    shard . getTemporalRange (  )  . isPresent (  )  )  . forEach (  (    shard )     -  >     {", "long   day    =    temporalFunction . getDayFromRange ( shard . getTemporalRange (  )  . get (  )  )  ;", "shardsByDaysBuilder . put ( day ,    shard )  ;", "}  )  ;", "Collection < Collection < IndexInfo >  >    byDays    =    shardsByDaysBuilder . build (  )  . asMap (  )  . values (  )  ;", "if    (  !  ( tableInfo . getBucketCount (  )  . isPresent (  )  )  )     {", "return   byDays ;", "}", "ImmutableList . Builder < Collection < IndexInfo >  >    sets    =    ImmutableList . builder (  )  ;", "for    ( Collection < IndexInfo >    s    :    byDays )     {", "sets . addAll ( Multimaps . index ( s ,    IndexInfo :  : getBucketNumber )  . asMap (  )  . values (  )  )  ;", "}", "return   sets . build (  )  ;", "}", "METHOD_END"], "methodName": ["getShardsByDaysBuckets"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardOrganizerUtil"}, {"methodBody": ["METHOD_START", "{", "JDBCType   jdbcType    =    ColumnIndexStatsUtils . jdbcType ( type )  ;", "Object   value    =     . getValue ( resultSet ,    type ,    columnName ,    jdbcType )  ;", "return   resultSet . wasNull (  )     ?    null    :    value ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardOrganizerUtil"}, {"methodBody": ["METHOD_START", "{", "switch    ( jdbcType )     {", "case   BOOLEAN    :", "return   resultSet . getBoolean ( columnName )  ;", "case   INTEGER    :", "return   resultSet . getInt ( columnName )  ;", "case   BIGINT    :", "return   resultSet . getLong ( columnName )  ;", "case   DOUBLE    :", "return   resultSet . getDouble ( columnName )  ;", "case   VARBINARY    :", "return   Slices . wrappedBuffer ( resultSet . getBytes ( columnName )  )  . toStringUtf 8  (  )  ;", "}", "throw   new   IllegalArgumentExcep (  (  \" Unhandled   type :     \"     +    type )  )  ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardOrganizerUtil"}, {"methodBody": ["METHOD_START", "{", "return   new   ShardIndexInfo ( shardMetadata . getTableId (  )  ,    shardMetadata . getBucketNumber (  )  ,    shardMetadata . getShardUuid (  )  ,    shardMetadata . getRowCount (  )  ,    shardMetadata . getUncompressedSize (  )  ,    sortRange ,    temporalRange )  ;", "}", "METHOD_END"], "methodName": ["toShardIndexInfo"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardOrganizerUtil"}, {"methodBody": ["METHOD_START", "{", "Object   o 1 Min    =    this . getMinTuple (  )  . getValues (  )  . get (  0  )  ;", "Object   o 1 Max    =    this . getMaxTuple (  )  . getValues (  )  . get (  0  )  ;", "Object   o 2 Min    =    other . getMinTuple (  )  . getValues (  )  . get (  0  )  ;", "Object   o 2 Max    =    other . getMaxTuple (  )  . getValues (  )  . get (  0  )  ;", "return    ( o 1 Max . equals ( o 2 Min )  )     |  |     ( o 2 Max . equals ( o 1 Min )  )  ;", "}", "METHOD_END"], "methodName": ["adjacent"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardRange"}, {"methodBody": ["METHOD_START", "{", "return    (  ( this . getMinTuple (  )  . compareTo ( other . getMinTuple (  )  )  )     <  =     0  )     &  &     (  ( this . getMaxTuple (  )  . compareTo ( other . getMaxTuple (  )  )  )     >  =     0  )  ;", "}", "METHOD_END"], "methodName": ["encloses"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardRange"}, {"methodBody": ["METHOD_START", "{", "return   maxTuple ;", "}", "METHOD_END"], "methodName": ["getMaxTuple"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardRange"}, {"methodBody": ["METHOD_START", "{", "return   minTuple ;", "}", "METHOD_END"], "methodName": ["getMinTuple"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardRange"}, {"methodBody": ["METHOD_START", "{", "return   new   ShardRange ( min ,    max )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardRange"}, {"methodBody": ["METHOD_START", "{", "return    (  ( this . getMinTuple (  )  . compareTo ( other . getMaxTuple (  )  )  )     <  =     0  )     &  &     (  ( other . getMinTuple (  )  . compareTo ( this . getMaxTuple (  )  )  )     <  =     0  )  ;", "}", "METHOD_END"], "methodName": ["overlaps"], "fileName": "com.facebook.presto.raptor.storage.organization.ShardRange"}, {"methodBody": ["METHOD_START", "{", "return   lastStartTimeMillis ;", "}", "METHOD_END"], "methodName": ["getLastStartTimeMillis"], "fileName": "com.facebook.presto.raptor.storage.organization.TableOrganizationInfo"}, {"methodBody": ["METHOD_START", "{", "return   tableId ;", "}", "METHOD_END"], "methodName": ["getTableId"], "fileName": "com.facebook.presto.raptor.storage.organization.TableOrganizationInfo"}, {"methodBody": ["METHOD_START", "{", "int   startDay    =    Math . toIntExact ( Duration . ofMillis ( rangeStart )  . toDays (  )  )  ;", "int   endDay    =    Math . toIntExact ( Duration . ofMillis ( rangeEnd )  . toDays (  )  )  ;", "if    ( startDay    =  =    endDay )     {", "return   Math . toIntExact ( startDay )  ;", "}", "if    (  ( endDay    -    startDay )     >     1  )     {", "return   startDay    +     1  ;", "}", "long   millisInStartDay    =     ( Duration . ofDays ( endDay )  . toMillis (  )  )     -    rangeStart ;", "long   millisInEndDay    =    rangeEnd    -     ( Duration . ofDays ( endDay )  . toMillis (  )  )  ;", "return   millisInStartDay    >  =    millisInEndDay    ?    startDay    :    endDay ;", "}", "METHOD_END"], "methodName": ["determineDay"], "fileName": "com.facebook.presto.raptor.storage.organization.TemporalFunction"}, {"methodBody": ["METHOD_START", "{", "if    ( type . equals ( DATE )  )     {", "return   Math . toIntExact ( DATE . getLong ( block ,    position )  )  ;", "}", "if    ( type . equals ( TIMESTAMP )  )     {", "long   millis    =    TIMESTAMP . getLong ( block ,    position )  ;", "long   local    =    timeZone . convertUTCToLocal ( millis )  ;", "long   days    =    TimeUnit . MILLISECONDS . toDays ( local )  ;", "return   Math . toIntExact ( days )  ;", "}", "throw   new   IllegalArgumentException (  (  \" Wrong   type   for   t   column :     \"     +    type )  )  ;", "}", "METHOD_END"], "methodName": ["getDay"], "fileName": "com.facebook.presto.raptor.storage.organization.TemporalFunction"}, {"methodBody": ["METHOD_START", "{", "Tuple   min    =    range . getMinTuple (  )  ;", "Tuple   max    =    range . getMaxTuple (  )  ;", "checkArgument ( getOnlyElement ( min . getTypes (  )  )  . equals ( getOnlyElement ( max . getTypes (  )  )  )  ,     \" type   of   min   and   max   is   not   same \"  )  ;", "Type   type    =    getOnlyElement ( min . getTypes (  )  )  ;", "if    ( type . equals ( DATE )  )     {", "return    (  ( int )     ( getOnlyElement ( min . getValues (  )  )  )  )  ;", "}", "if    ( type . equals ( TIMESTAMP )  )     {", "long   minValue    =    timeZone . convertUTCToLocal (  (  ( long )     ( getOnlyElement ( min . getValues (  )  )  )  )  )  ;", "long   maxValue    =    timeZone . convertUTCToLocal (  (  ( long )     ( getOnlyElement ( max . getValues (  )  )  )  )  )  ;", "return    . determineDay ( minValue ,    maxValue )  ;", "}", "throw   new   IllegalArgumentException (  (  \" Wrong   type   for   shard   range :     \"     +    type )  )  ;", "}", "METHOD_END"], "methodName": ["getDayFromRange"], "fileName": "com.facebook.presto.raptor.storage.organization.TemporalFunction"}, {"methodBody": ["METHOD_START", "{", "ImmutableSet . Builder < UUID >    builder    =    ImmutableSet . builder (  )  ;", "for    ( int   index    :    indexes )     {", "builder . add ( inputShards . get ( index )  . getShardUuid (  )  )  ;", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["extractIndexes"], "fileName": "com.facebook.presto.raptor.storage.organization.TestCompactionSetCreator"}, {"methodBody": ["METHOD_START", "{", "return   new   ShardIndexInfo (  1  ,    OptionalInt . of ( bucketNumber )  ,    UUID . randomUUID (  )  ,     1  ,     1  ,    Optional . empty (  )  ,    Optional . empty (  )  )  ;", "}", "METHOD_END"], "methodName": ["shardWithBucket"], "fileName": "com.facebook.presto.raptor.storage.organization.TestCompactionSetCreator"}, {"methodBody": ["METHOD_START", "{", "return   new   ShardIndexInfo (  1  ,    OptionalInt . empty (  )  ,    UUID . randomUUID (  )  ,    rows ,    size ,    Optional . empty (  )  ,    Optional . empty (  )  )  ;", "}", "METHOD_END"], "methodName": ["shardWithSize"], "fileName": "com.facebook.presto.raptor.storage.organization.TestCompactionSetCreator"}, {"methodBody": ["METHOD_START", "{", "if    ( type . equals ( DATE )  )     {", "return   new   ShardIndexInfo (  1  ,    bucketNumber ,    UUID . randomUUID (  )  ,     1  ,     1  ,    Optional . empty (  )  ,    Optional . of ( ShardRanf ( new   Tuple ( type ,    start . intValue (  )  )  ,    new   Tuple ( type ,    end . intValue (  )  )  )  )  )  ;", "}", "return   new   ShardIndexInfo (  1  ,    bucketNumber ,    UUID . randomUUID (  )  ,     1  ,     1  ,    Optional . empty (  )  ,    Optional . of ( ShardRanf ( new   Tuple ( type ,    start )  ,    new   Tuple ( type ,    end )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["shardWithTemporalBucket"], "fileName": "com.facebook.presto.raptor.storage.organization.TestCompactionSetCreator"}, {"methodBody": ["METHOD_START", "{", "return   TestCompactionSetCreator . shardWithTemporalBucket ( OptionalInt . empty (  )  ,    type ,    start ,    end )  ;", "}", "METHOD_END"], "methodName": ["shardWithTemporalRange"], "fileName": "com.facebook.presto.raptor.storage.organization.TestCompactionSetCreator"}, {"methodBody": ["METHOD_START", "{", "List < ShardIndexInfo >    inputShards    =    ImmutableList . of ( TestCompactionSetCreator . shardWithBucket (  1  )  ,    TestCompactionSetCreator . shardWithBucket (  2  )  ,    TestCompactionSetCreator . shardWithBucket (  2  )  ,    TestCompactionSetCreator . shardWithBucket (  1  )  ,    TestCompactionSetCreator . shardWithBucket (  2  )  ,    TestCompactionSetCreator . shardWithBucket (  1  )  )  ;", "long   tableId    =    TestCompactionSetCreator . bucketedTableInfo . getTableId (  )  ;", "Set < OrganizationSet >    actual    =    compactionSetCreator . createCompactionSets ( TestCompactionSetCreator . bucketedTableInfo ,    inputShards )  ;", "assertEquals ( actual . size (  )  ,     2  )  ;", "Set < OrganizationSet >    expected    =    ImmutableSet . of ( new   OrganizationSet ( tableId ,    TestCompactionSetCreator . extractIndexes ( inputShards ,     0  ,     3  ,     5  )  ,    OptionalInt . of (  1  )  )  ,    new   OrganizationSet ( tableId ,    TestCompactionSetCreator . extractIndexes ( inputShards ,     1  ,     2  ,     4  )  ,    OptionalInt . of (  2  )  )  )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testBucketedTableCompaction"], "fileName": "com.facebook.presto.raptor.storage.organization.TestCompactionSetCreator"}, {"methodBody": ["METHOD_START", "{", "long   day 1     =     1  ;", "long   day 2     =     2  ;", "long   day 3     =     3  ;", "long   day 4     =     4  ;", "List < ShardIndexInfo >    inputShards    =    ImmutableList . of (  . shardWithTemporalBucket ( OptionalInt . of (  1  )  ,    DATE ,    day 1  ,    day 1  )  ,     . shardWithTemporalBucket ( OptionalInt . of (  2  )  ,    DATE ,    day 2  ,    day 2  )  ,     . shardWithTemporalBucket ( OptionalInt . of (  1  )  ,    DATE ,    day 1  ,    day 1  )  ,     . shardWithTemporalBucket ( OptionalInt . of (  2  )  ,    DATE ,    day 2  ,    day 2  )  ,     . shardWithTemporalBucket ( OptionalInt . of (  1  )  ,    DATE ,    day 3  ,    day 3  )  ,     . shardWithTemporalBucket ( OptionalInt . of (  2  )  ,    DATE ,    day 4  ,    day 4  )  )  ;", "long   tableId    =     . bucketedTemporalTableInfo . getTableId (  )  ;", "Set < OrganizationSet >    actual    =    compactionSetCreator . createCompactionSets (  . bucketedTemporalTableInfo ,    inputShards )  ;", "assertEquals ( actual . size (  )  ,     2  )  ;", "Set < OrganizationSet >    expected    =    ImmutableSet . of ( new   OrganizationSet ( tableId ,     . extractIndexes ( inputShards ,     0  ,     2  )  ,    OptionalInt . of (  1  )  )  ,    new   OrganizationSet ( tableId ,     . extractIndexes ( inputShards ,     1  ,     3  )  ,    OptionalInt . of (  2  )  )  )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testBucketedTemporalTableCompaction"], "fileName": "com.facebook.presto.raptor.storage.organization.TestCompactionSetCreator"}, {"methodBody": ["METHOD_START", "{", "List < ShardIndexInfo >    inputShards    =    ImmutableList . of ( TestCompactionSetCreator . shardWithSize (  1  0  ,     1  0  )  ,    TestCompactionSetCreator . shardWithSize (  1  0  ,     1  0  )  ,    TestCompactionSetCreator . shardWithSize (  1  0  ,     1  0  )  )  ;", "Set < OrganizationSet >    compactionSets    =    compactionSetCreator . createCompactionSets ( TestCompactionSetCreator . tableInfo ,    inputShards )  ;", "assertEquals ( compactionSets . size (  )  ,     1  )  ;", "assertEquals ( getOnlyElement ( compactionSets )  . getShards (  )  ,    TestCompactionSetCreator . extractIndexes ( inputShards ,     0  ,     1  ,     2  )  )  ;", "}", "METHOD_END"], "methodName": ["testNonTemporalOrganizationSetSimple"], "fileName": "com.facebook.presto.raptor.storage.organization.TestCompactionSetCreator"}, {"methodBody": ["METHOD_START", "{", "List < ShardIndexInfo >    inputShards    =    ImmutableList . of ( TestCompactionSetCreator . shardWithSize (  5  0  ,     1  0  )  ,    TestCompactionSetCreator . shardWithSize (  1  0  0  ,     1  0  )  ,    TestCompactionSetCreator . shardWithSize (  2  0  ,     1  0  )  ,    TestCompactionSetCreator . shardWithSize (  3  0  ,     1  0  )  )  ;", "Set < OrganizationSet >    compactionSets    =    compactionSetCreator . createCompactionSets ( TestCompactionSetCreator . tableInfo ,    inputShards )  ;", "Set < UUID >    actual    =    new   HashSet <  >  (  )  ;", "for    ( OrganizationSet   set    :    compactionSets )     {", "actual . addAll ( set . getShards (  )  )  ;", "}", "assertTrue ( TestCompactionSetCreator . extractIndexes ( inputShards ,     0  ,     2  ,     3  )  . containsAll ( actual )  )  ;", "}", "METHOD_END"], "methodName": ["testNonTemporalRowCountBasedOrganizationSet"], "fileName": "com.facebook.presto.raptor.storage.organization.TestCompactionSetCreator"}, {"methodBody": ["METHOD_START", "{", "List < ShardIndexInfo >    inputShards    =    ImmutableList . of ( TestCompactionSetCreator . shardWithSize (  1  0  ,     7  0  )  ,    TestCompactionSetCreator . shardWithSize (  1  0  ,     2  0  )  ,    TestCompactionSetCreator . shardWithSize (  1  0  ,     3  0  )  ,    TestCompactionSetCreator . shardWithSize (  1  0  ,     1  2  0  )  )  ;", "Set < OrganizationSet >    compactionSets    =    compactionSetCreator . createCompactionSets ( TestCompactionSetCreator . tableInfo ,    inputShards )  ;", "Set < UUID >    actual    =    new   HashSet <  >  (  )  ;", "for    ( OrganizationSet   set    :    compactionSets )     {", "actual . addAll ( set . getShards (  )  )  ;", "}", "assertTrue ( TestCompactionSetCreator . extractIndexes ( inputShards ,     0  ,     1  ,     2  )  . containsAll ( actual )  )  ;", "}", "METHOD_END"], "methodName": ["testNonTemporalSizeBasedOrganizationSet"], "fileName": "com.facebook.presto.raptor.storage.organization.TestCompactionSetCreator"}, {"methodBody": ["METHOD_START", "{", "long   day 1     =    Duration . ofNanos ( System . nanoTime (  )  )  . toDays (  )  ;", "long   day 2     =    day 1     +     1  ;", "long   day 3     =    day 1     +     2  ;", "List < ShardIndexInfo >    inputShards    =    ImmutableList . of (  . shardWithTemporalRange ( DATE ,    day 1  ,    day 1  )  ,     . shardWithTemporalRange ( DATE ,    day 2  ,    day 2  )  ,     . shardWithTemporalRange ( DATE ,    day 3  ,    day 3  )  ,     . shardWithTemporalRange ( DATE ,    day 1  ,    day 3  )  ,     . shardWithTemporalRange ( DATE ,    day 2  ,    day 3  )  ,     . shardWithTemporalRange ( DATE ,    day 1  ,    day 2  )  )  ;", "long   tableId    =     . temporalTableInfo . getTableId (  )  ;", "Set < OrganizationSet >    actual    =    compactionSetCreator . createCompactionSets (  . temporalTableInfo ,    inputShards )  ;", "assertEquals ( actual . size (  )  ,     2  )  ;", "Set < OrganizationSet >    expected    =    ImmutableSet . of ( new   OrganizationSet ( tableId ,     . extractIndexes ( inputShards ,     0  ,     3  ,     5  )  ,    OptionalInt . empty (  )  )  ,    new   OrganizationSet ( tableId ,     . extractIndexes ( inputShards ,     1  ,     4  )  ,    OptionalInt . empty (  )  )  )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testTemporalCompactionDate"], "fileName": "com.facebook.presto.raptor.storage.organization.TestCompactionSetCreator"}, {"methodBody": ["METHOD_START", "{", "long   day 1     =    Duration . ofDays ( Duration . ofNanos ( System . nanoTime (  )  )  . toDays (  )  )  . toMillis (  )  ;", "long   day 2     =    Duration . ofDays (  (  ( Duration . ofMillis ( day 1  )  . toDays (  )  )     +     1  )  )  . toMillis (  )  ;", "long   day 3     =    Duration . ofDays (  (  ( Duration . ofMillis ( day 1  )  . toDays (  )  )     +     2  )  )  . toMillis (  )  ;", "List < ShardIndexInfo >    inputShards    =    ImmutableList . of (  . shardWithTemporalRange ( TIMESTAMP ,    day 1  ,    day 1  )  ,     . shardWithTemporalRange ( TIMESTAMP ,    day 2  ,    day 2  )  ,     . shardWithTemporalRange ( TIMESTAMP ,    day 2  ,    day 2  )  ,     . shardWithTemporalRange ( TIMESTAMP ,    day 1  ,    day 1  )  ,     . shardWithTemporalRange ( TIMESTAMP ,    day 3  ,    day 3  )  )  ;", "Set < OrganizationSet >    actual    =    compactionSetCreator . createCompactionSets (  . temporalTableInfo ,    inputShards )  ;", "assertEquals ( actual . size (  )  ,     2  )  ;", "Set < OrganizationSet >    expected    =    ImmutableSet . of ( new   OrganizationSet (  . temporalTableInfo . getTableId (  )  ,     . extractIndexes ( inputShards ,     0  ,     3  )  ,    OptionalInt . empty (  )  )  ,    new   OrganizationSet (  . temporalTableInfo . getTableId (  )  ,     . extractIndexes ( inputShards ,     1  ,     2  )  ,    OptionalInt . empty (  )  )  )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testTemporalCompactionNoCompactionAcrossDays"], "fileName": "com.facebook.presto.raptor.storage.organization.TestCompactionSetCreator"}, {"methodBody": ["METHOD_START", "{", "long   day 1     =    Duration . ofDays ( Duration . ofNanos ( System . nanoTime (  )  )  . toDays (  )  )  . toMillis (  )  ;", "long   day 2     =    Duration . ofDays (  (  ( Duration . ofMillis ( day 1  )  . toDays (  )  )     +     1  )  )  . toMillis (  )  ;", "long   day 3     =    Duration . ofDays (  (  ( Duration . ofMillis ( day 1  )  . toDays (  )  )     +     2  )  )  . toMillis (  )  ;", "long   day 4     =    Duration . ofDays (  (  ( Duration . ofMillis ( day 1  )  . toDays (  )  )     +     3  )  )  . toMillis (  )  ;", "List < ShardIndexInfo >    inputShards    =    ImmutableList . of (  . shardWithTemporalRange ( TIMESTAMP ,    day 1  ,    day 3  )  ,     . shardWithTemporalRange ( TIMESTAMP ,    day 2  ,    day 2  )  ,     . shardWithTemporalRange ( TIMESTAMP ,    day 1  ,    day 1  )  ,     . shardWithTemporalRange ( TIMESTAMP ,     ( day 1     +     1  0  0  )  ,     ( day 2     +     1  0  0  )  )  ,     . shardWithTemporalRange ( TIMESTAMP ,     ( day 1     -     1  0  0  )  ,     ( day 2     -     1  0  0  )  )  ,     . shardWithTemporalRange ( TIMESTAMP ,     ( day 2     -     1  0  0  )  ,     ( day 3     -     1  0  0  )  )  ,     . shardWithTemporalRange ( TIMESTAMP ,    day 1  ,    day 4  )  )  ;", "long   tableId    =     . temporalTableInfo . getTableId (  )  ;", "Set < OrganizationSet >    compactionSets    =    compactionSetCreator . createCompactionSets (  . temporalTableInfo ,    inputShards )  ;", "assertEquals ( compactionSets . size (  )  ,     2  )  ;", "Set < OrganizationSet >    expected    =    ImmutableSet . of ( new   OrganizationSet ( tableId ,     . extractIndexes ( inputShards ,     0  ,     1  ,     5  ,     6  )  ,    OptionalInt . empty (  )  )  ,    new   OrganizationSet ( tableId ,     . extractIndexes ( inputShards ,     2  ,     3  ,     4  )  ,    OptionalInt . empty (  )  )  )  ;", "assertEquals ( compactionSets ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testTemporalCompactionSpanningDays"], "fileName": "com.facebook.presto.raptor.storage.organization.TestCompactionSetCreator"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   inputRows    =    getMaterializedRows ( ImmutableList . copyOf ( inputUuids )  ,    columnIds ,    columnTypes )  ;", "MaterializedResult   outputRows    =    getMaterializedRows ( ImmutableList . copyOf ( outputUuids )  ,    columnIds ,    columnTypes )  ;", "assertEqualsIgnoreOrder ( outputRows ,    inputRows )  ;", "}", "METHOD_END"], "methodName": ["assertShardEqualsIgnoreOrder"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardCompactor"}, {"methodBody": ["METHOD_START", "{", "List < Page >    inputPages    =    getPages ( inputUuids ,    columnIds ,    columnTypes )  ;", "List < Type >    sortTypes    =    sortIndexes . stream (  )  . map ( columnTypes :  : get )  . collect ( Collectors . toList (  )  )  ;", "MaterializedResult   inputRowsSorted    =     . sortAndMaterialize ( inputPages ,    columnTypes ,    sortIndexes ,    sortOrders ,    sortTypes )  ;", "MaterializedResult   outputRows    =     . extractColumns ( getMaterializedRows ( outputUuids ,    columnIds ,    columnTypes )  ,    sortIndexes ,    sortTypes )  ;", "assertEquals ( outputRows ,    inputRowsSorted )  ;", "}", "METHOD_END"], "methodName": ["assertShardEqualsSorted"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardCompactor"}, {"methodBody": ["METHOD_START", "{", "return    ( totalRows    %     ( TestShardCompactor . MAX _ SHARD _ ROWS )  )     !  =     0     ?     ( totalRows    /     ( TestShardCompactor . MAX _ SHARD _ ROWS )  )     +     1     :    totalRows    /     ( TestShardCompactor . MAX _ SHARD _ ROWS )  ;", "}", "METHOD_END"], "methodName": ["computeExpectedOutputShards"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardCompactor"}, {"methodBody": ["METHOD_START", "{", "int   rowCount    =     1  0  ;", "int   pCount    =     1  0  ;", "int [  ]  [  ]    initialValues    =    new   int [  ]  [  ]  {    new   int [  ]  {     1  7  ,     1  5  ,     1  6  ,     1  8  ,     1  4     }  ,    new   int [  ]  {     5  9  ,     5  5  ,     5  4  ,     5  3  ,     5  8     }     }  ;", "ImmutableList . Builder < P >    ps    =    ImmutableList . builder (  )  ;", "for    ( int   i    =     0  ;    i    <    pCount ;    i +  +  )     {", "ps . add ( SequencePBuilder . createSequenceP ( columnTypes ,    rowCount ,    initialValues [  ( i    %     2  )  ]  )  )  ;", "}", "return   ps . build (  )  ;", "}", "METHOD_END"], "methodName": ["createPages"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardCompactor"}, {"methodBody": ["METHOD_START", "{", "StoragePageSink   sink    =    TestShardCompactor . createStoragePageSink ( storageManager ,    columnIds ,    columnTypes )  ;", "for    ( int   i    =     0  ;    i    <    shardCount ;    i +  +  )     {", "sink . appendPages ( TestShardCompactor . createPages ( columnTypes )  )  ;", "sink . flush (  )  ;", "}", "return   MoreFutures . getFutureValue ( sink . commit (  )  )  ;", "}", "METHOD_END"], "methodName": ["createShards"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardCompactor"}, {"methodBody": ["METHOD_START", "{", "List < Page >    pages    =    TestShardCompactor . createPages ( columnTypes )  ;", "long [  ]    orderedAddresses    =    TestShardCompactor . PAGE _ SORTER . sort ( columnTypes ,    pages ,    sortChannels ,    sortOrders ,     1  0  0  0  0  )  ;", "int [  ]    orderedPageIndex    =    new   int [ orderedAddresses . length ]  ;", "int [  ]    orderedPositionIndex    =    new   int [ orderedAddresses . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( orderedAddresses . length )  ;    i +  +  )     {", "orderedPageIndex [ i ]     =    TestShardCompactor . PAGE _ SORTER . decodePageIndex ( orderedAddresses [ i ]  )  ;", "orderedPositionIndex [ i ]     =    TestShardCompactor . PAGE _ SORTER . decodePositionIndex ( orderedAddresses [ i ]  )  ;", "}", "sink . appendPages ( pages ,    orderedPageIndex ,    orderedPositionIndex )  ;", "sink . flush (  )  ;", "}", "METHOD_END"], "methodName": ["createSortedShard"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardCompactor"}, {"methodBody": ["METHOD_START", "{", "StoragePageSink   sink    =    TestShardCompactor . createStoragePageSink ( storageManager ,    columnIds ,    columnTypes )  ;", "for    ( int   shardNum    =     0  ;    shardNum    <    shardCount ;    shardNum +  +  )     {", "TestShardCompactor . createSortedShard ( columnTypes ,    sortChannels ,    sortOrders ,    sink )  ;", "}", "return   MoreFutures . getFutureValue ( sink . commit (  )  )  ;", "}", "METHOD_END"], "methodName": ["createSortedShards"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardCompactor"}, {"methodBody": ["METHOD_START", "{", "long   transactionId    =     1  ;", "return   manager . createSPageSink ( transactionId ,    OptionalInt . empty (  )  ,    columnIds ,    columnTypes ,    false )  ;", "}", "METHOD_END"], "methodName": ["createStoragePageSink"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardCompactor"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < MaterializedRow >    rows    =    ImmutableList . builder (  )  ;", "for    ( MaterializedRow   row    :    materializedRows )     {", "Object [  ]    values    =    new   Object [ indexes . size (  )  ]  ;", "for    ( int   i    =     0  ;    i    <     ( indexes . size (  )  )  ;    i +  +  )     {", "values [ i ]     =    row . getField ( indexes . get ( i )  )  ;", "}", "rows . add ( new   MaterializedRow ( MaterializedResult . DEFAULT _ PRECISION ,    values )  )  ;", "}", "return   new   MaterializedResult ( rows . build (  )  ,    types )  ;", "}", "METHOD_END"], "methodName": ["extractColumns"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardCompactor"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < ColumnInfo >    columnInfos    =    ImmutableList . builder (  )  ;", "for    ( int   i    =     0  ;    i    <     ( columnIds . size (  )  )  ;    i +  +  )     {", "columnInfos . add ( new   ColumnInfo ( columnIds . get ( i )  ,    columnTypes . get ( i )  )  )  ;", "}", "return   columnInfos . build (  )  ;", "}", "METHOD_END"], "methodName": ["getColumnInfo"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardCompactor"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult . Builder   rows    =    MaterializedResult . resultBuilder ( SESSION ,    columnTypes )  ;", "for    ( UUID   uuid    :    uuids )     {", "try    ( ConnePageSource   pageSource    =    getPageSource ( columnIds ,    columnTypes ,    uuid )  )     {", "MaterializedResult   result    =    materializeSourceDataStream ( SESSION ,    pageSource ,    columnTypes )  ;", "rows . rows ( result . getMaterializedRows (  )  )  ;", "}", "}", "return   rows . build (  )  ;", "}", "METHOD_END"], "methodName": ["getMaterializedRows"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardCompactor"}, {"methodBody": ["METHOD_START", "{", "return   storageManager . getPageSource ( uuid ,    OptionalInt . empty (  )  ,    columnIds ,    columnTypes ,    TupleDomain . all (  )  ,    TestShardCompactor . READER _ ATTRIBUTES )  ;", "}", "METHOD_END"], "methodName": ["getPageSource"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardCompactor"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < Page >    pages    =    ImmutableList . builder (  )  ;", "for    ( UUID   uuid    :    uuids )     {", "try    ( ConnePageSource   pageSource    =    getPageSource ( columnIds ,    columnTypes ,    uuid )  )     {", "while    (  !  ( pageSource . isFinished (  )  )  )     {", "Page   outputPage    =    pageSource . getNextPage (  )  ;", "if    ( outputPage    =  =    null )     {", "break ;", "}", "outputPage . assureLoaded (  )  ;", "pages . add ( outputPage )  ;", "}", "}", "}", "return   pages . build (  )  ;", "}", "METHOD_END"], "methodName": ["getPages"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardCompactor"}, {"methodBody": ["METHOD_START", "{", "temporary    =    createTempDir (  )  ;", "IDBI   dbi    =    new   DBI (  (  \" jdbc : h 2  : mem : test \"     +     ( System . nanoTime (  )  )  )  )  ;", "dummyHandle    =    dbi . open (  )  ;", "storageManager    =    TestOrcStorageManager . createOrcStorageManager ( dbi ,    temporary ,     . MAX _ SHARD _ ROWS )  ;", "compactor    =    new   ShardCompactor ( storageManager ,     . READER _ ATTRIBUTES )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardCompactor"}, {"methodBody": ["METHOD_START", "{", "long [  ]    orderedAddresses    =    TestShardCompactor . PAGE _ SORTER . sort ( columnTypes ,    pages ,    sortIndexes ,    sortOrders ,     1  0  0  0  0  )  ;", "PageBuilder   pageBuilder    =    new   PageBuilder ( columnTypes )  ;", "for    ( long   orderedAddress    :    orderedAddresses )     {", "int   pageIndex    =    TestShardCompactor . PAGE _ SORTER . decodePageIndex ( orderedAddress )  ;", "int   positionIndex    =    TestShardCompactor . PAGE _ SORTER . decodePositionIndex ( orderedAddress )  ;", "Page   page    =    pages . get ( pageIndex )  ;", "pageBuilder . declarePosition (  )  ;", "for    ( int   i    =     0  ;    i    <     ( columnTypes . size (  )  )  ;    i +  +  )     {", "columnTypes . get ( i )  . appendTo ( page . getBlock ( i )  ,    positionIndex ,    pageBuilder . getBlockBuilder ( i )  )  ;", "}", "}", "Page   buildPage    =    pageBuilder . build (  )  ;", "Block [  ]    outputBlocks    =    new   Block [ buildPage . getChannelCount (  )  ]  ;", "for    ( int   i    =     0  ;    i    <     ( sortIndexes . size (  )  )  ;    i +  +  )     {", "outputBlocks [ i ]     =    buildPage . getBlock ( sortIndexes . get ( i )  )  ;", "}", "MaterializedResult . Builder   resultBuilder    =    MaterializedResult . resultBuilder ( SESSION ,    sortTypes )  ;", "resultBuilder . page ( new   Page ( outputBlocks )  )  ;", "return   resultBuilder . build (  )  ;", "}", "METHOD_END"], "methodName": ["sortAndMaterialize"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardCompactor"}, {"methodBody": ["METHOD_START", "{", "if    (  ( dummyHandle )     !  =    null )     {", "dummyHandle . close (  )  ;", "}", "deleteRecursively ( tempry . toPath (  )  ,    ALLOW _ INSECURE )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardCompactor"}, {"methodBody": ["METHOD_START", "{", "List < Long >    columnIds    =    ImmutableList . of (  3 L ,     7 L ,     2 L ,     1 L ,     5 L )  ;", "List < Type >    columnTypes    =    ImmutableList . of ( BIGINT ,    createVarcharType (  2  0  )  ,    DOUBLE ,    DATE ,    TIMESTAMP )  ;", "List < ShardInfo >    inputShards    =     . createShards ( storageManager ,    columnIds ,    columnTypes ,     3  )  ;", "assertEquals ( inputShards . size (  )  ,     3  )  ;", "long   totalRows    =    inputShards . stream (  )  . mapToLong ( ShardInfo :  : getRowCount )  . sum (  )  ;", "long   expectedOutputShards    =     . computeExpectedOutputShards ( totalRows )  ;", "Set < UUID >    inputUuids    =    inputShards . stream (  )  . map ( ShardInfo :  : getShardUuid )  . collect ( Collectors . toSet (  )  )  ;", "long   transactionId    =     1  ;", "List < ShardInfo >    outputShards    =    compactor . compact ( transactionId ,    OptionalInt . empty (  )  ,    inputUuids ,     . getColumnInfo ( columnIds ,    columnTypes )  )  ;", "assertEquals ( outputShards . size (  )  ,    expectedOutputShards )  ;", "Set < UUID >    outputUuids    =    outputShards . stream (  )  . map ( ShardInfo :  : getShardUuid )  . collect ( Collectors . toSet (  )  )  ;", "assertShardEqualsIgnoreOrder ( inputUuids ,    outputUuids ,    columnIds ,    columnTypes )  ;", "}", "METHOD_END"], "methodName": ["testShardCompactor"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardCompactor"}, {"methodBody": ["METHOD_START", "{", "List < Type >    columnTypes    =    ImmutableList . of ( BIGINT ,    createVarcharType (  2  0  )  ,    DATE ,    TIMESTAMP ,    DOUBLE )  ;", "List < Long >    columnIds    =    ImmutableList . of (  3 L ,     7 L ,     2 L ,     1 L ,     5 L )  ;", "List < Long >    sortColumnIds    =    ImmutableList . of (  1 L ,     2 L ,     3 L ,     5 L ,     7 L )  ;", "List < SortOrder >    sortOrders    =    Collections . nCopies ( sortColumnIds . size (  )  ,    ASC _ NULLS _ FIRST )  ;", "List < Integer >    sortIndexes    =    sortColumnIds . stream (  )  . map ( columnIds :  : indexOf )  . collect ( Collectors . toList (  )  )  ;", "List < ShardInfo >    inputShards    =     . createSortedShards ( storageManager ,    columnIds ,    columnTypes ,    sortIndexes ,    sortOrders ,     2  )  ;", "assertEquals ( inputShards . size (  )  ,     2  )  ;", "long   totalRows    =    inputShards . stream (  )  . mapToLong ( ShardInfo :  : getRowCount )  . sum (  )  ;", "long   expectedOutputShards    =     . computeExpectedOutputShards ( totalRows )  ;", "Set < UUID >    inputUuids    =    inputShards . stream (  )  . map ( ShardInfo :  : getShardUuid )  . collect ( Collectors . toSet (  )  )  ;", "long   transactionId    =     1  ;", "List < ShardInfo >    outputShards    =    compactor . compactSorted ( transactionId ,    OptionalInt . empty (  )  ,    inputUuids ,     . getColumnInfo ( columnIds ,    columnTypes )  ,    sortColumnIds ,    sortOrders )  ;", "List < UUID >    outputUuids    =    outputShards . stream (  )  . map ( ShardInfo :  : getShardUuid )  . collect ( Collectors . toList (  )  )  ;", "assertEquals ( outputShards . size (  )  ,    expectedOutputShards )  ;", "assertShardEqualsSorted ( inputUuids ,    outputUuids ,    columnIds ,    columnTypes ,    sortIndexes ,    sortOrders )  ;", "}", "METHOD_END"], "methodName": ["testShardCompactorSorted"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardCompactor"}, {"methodBody": ["METHOD_START", "{", "return   new   ShardOrganizationManager ( dbi ,     \" node 1  \"  ,    TestDatabaseShardManager . createShardManager ( dbi )  ,    TestShardOrganizer . createShardOrganizer (  )  ,    TestShardOrganizationManager . TEMPORAL _ FUNCTION ,    true ,    new   Duration ( intervalMillis ,    TimeUnit . MILLISECONDS )  )  ;", "}", "METHOD_END"], "methodName": ["createShardOrganizationManager"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardOrganizationManager"}, {"methodBody": ["METHOD_START", "{", "dbi    =    new   DBI (  (  \" jdbc : h 2  : mem : test \"     +     ( System . nanoTime (  )  )  )  )  ;", "dummyHandle    =    dbi . open (  )  ;", "metadataDao    =    dbi . onDemand ( MetadataDao . class )  ;", "organizerDao    =    dbi . onDemand ( erDao . class )  ;", "SchemaDaoUtil . createTablesWithRetry ( dbi )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardOrganizationManager"}, {"methodBody": ["METHOD_START", "{", "return   new   ShardIndexInfo (  1  ,    OptionalInt . of ( bucketNumber )  ,    UUID . randomUUID (  )  ,     1  ,     1  ,    Optional . of ( sortRange )  ,    Optional . empty (  )  )  ;", "}", "METHOD_END"], "methodName": ["shardWithSortRange"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardOrganizationManager"}, {"methodBody": ["METHOD_START", "{", "return   new   ShardIndexInfo (  1  ,    OptionalInt . of ( bucketNumber )  ,    UUID . randomUUID (  )  ,     1  ,     1  ,    Optional . of ( sortRange )  ,    Optional . of ( temporalRange )  )  ;", "}", "METHOD_END"], "methodName": ["shardWithTemporalRange"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardOrganizationManager"}, {"methodBody": ["METHOD_START", "{", "dummyHandle . close (  )  ;", "}", "METHOD_END"], "methodName": ["teardown"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardOrganizationManager"}, {"methodBody": ["METHOD_START", "{", "long   table 1     =    metadataDao . insertTable (  \" schema \"  ,     \" table 1  \"  ,    false ,    true ,    null ,     0  )  ;", "metadataDao . insertColumn ( table 1  ,     1  ,     \" foo \"  ,     1  ,     \" bigint \"  ,     1  ,    null )  ;", "metadataDao . insertTable (  \" schema \"  ,     \" table 2  \"  ,    false ,    true ,    null ,     0  )  ;", "metadataDao . insertTable (  \" schema \"  ,     \" table 3  \"  ,    false ,    false ,    null ,     0  )  ;", "assertEquals ( metadataDao . getEligibleTables (  )  ,    ImmutableSet . of ( table 1  )  )  ;", "}", "METHOD_END"], "methodName": ["testOrganizationEligibleTables"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardOrganizationManager"}, {"methodBody": ["METHOD_START", "{", "long   timestamp    =     1 L ;", "int   day    =     1  ;", "List < ShardIndexInfo >    shards    =    ImmutableList . of (  . shardWithSortRange (  1  ,    ShardRange . of ( new   Tuple (  . types ,     5 L ,     \" hello \"  ,    day ,    timestamp )  ,    new   Tuple (  . types ,     1  0 L ,     \" hello \"  ,    day ,    timestamp )  )  )  ,     . shardWithSortRange (  1  ,    ShardRange . of ( new   Tuple (  . types ,     7 L ,     \" hello \"  ,    day ,    timestamp )  ,    new   Tuple (  . types ,     1  0 L ,     \" hello \"  ,    day ,    timestamp )  )  )  ,     . shardWithSortRange (  1  ,    ShardRange . of ( new   Tuple (  . types ,     6 L ,     \" hello \"  ,    day ,    timestamp )  ,    new   Tuple (  . types ,     9 L ,     \" hello \"  ,    day ,    timestamp )  )  )  ,     . shardWithSortRange (  1  ,    ShardRange . of ( new   Tuple (  . types ,     1 L ,     \" hello \"  ,    day ,    timestamp )  ,    new   Tuple (  . types ,     5 L ,     \" hello \"  ,    day ,    timestamp )  )  )  )  ;", "Set < OrganizationSet >    actual    =    ShardOrganizationManager . createOrganizationSets (  . TEMPORAL _ FUNCTION ,     . tableInfo ,    shards )  ;", "assertEquals ( actual . size (  )  ,     1  )  ;", "assertEquals ( getOnlyElement ( actual )  . getShards (  )  ,    TestCompactionSetCreator . extractIndexes ( shards ,     0  ,     1  ,     2  )  )  ;", "}", "METHOD_END"], "methodName": ["testSimple"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardOrganizationManager"}, {"methodBody": ["METHOD_START", "{", "List < Type >    temporalType    =    ImmutableList . of ( DATE )  ;", "List < Type >    types    =    ImmutableList . of ( BIGINT )  ;", "int   day 1     =     1  ;", "int   day 2     =     2  ;", "int   day 4     =     4  ;", "int   day 5     =     5  ;", "List < ShardIndexInfo >    shards    =    ImmutableList . of (  . shardWithTemporalRange (  1  ,    ShardRange . of ( new   Tuple ( types ,     5 L )  ,    new   Tuple ( types ,     1  0 L )  )  ,    ShardRange . of ( new   Tuple ( temporalType ,    day 1  )  ,    new   Tuple ( temporalType ,    day 2  )  )  )  ,     . shardWithTemporalRange (  1  ,    ShardRange . of ( new   Tuple ( types ,     7 L )  ,    new   Tuple ( types ,     1  0 L )  )  ,    ShardRange . of ( new   Tuple ( temporalType ,    day 4  )  ,    new   Tuple ( temporalType ,    day 5  )  )  )  ,     . shardWithTemporalRange (  1  ,    ShardRange . of ( new   Tuple ( types ,     6 L )  ,    new   Tuple ( types ,     9 L )  )  ,    ShardRange . of ( new   Tuple ( temporalType ,    day 1  )  ,    new   Tuple ( temporalType ,    day 2  )  )  )  ,     . shardWithTemporalRange (  1  ,    ShardRange . of ( new   Tuple ( types ,     4 L )  ,    new   Tuple ( types ,     8 L )  )  ,    ShardRange . of ( new   Tuple ( temporalType ,    day 4  )  ,    new   Tuple ( temporalType ,    day 5  )  )  )  )  ;", "Set < OrganizationSet >    organizationSets    =    ShardOrganizationManager . createOrganizationSets (  . TEMPORAL _ FUNCTION ,     . temporalTableInfo ,    shards )  ;", "Set < Set < UUID >  >    actual    =    stream (  )  . map ( OrganizationSet :  : getShards )  . collect ( Collectors . toSet (  )  )  ;", "assertEquals ( size (  )  ,     2  )  ;", "assertEquals ( actual ,    ImmutableSet . of ( TestCompactionSetCreator . extractIndexes ( shards ,     0  ,     2  )  ,    TestCompactionSetCreator . extractIndexes ( shards ,     1  ,     3  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSimpleTemporal"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardOrganizationManager"}, {"methodBody": ["METHOD_START", "{", "long   table 1     =    metadataDao . insertTable (  \" schema \"  ,     \" table 1  \"  ,    false ,    true ,    null ,     0  )  ;", "metadataDao . insertColumn ( table 1  ,     1  ,     \" foo \"  ,     1  ,     \" bigint \"  ,     1  ,    null )  ;", "long   table 2     =    metadataDao . insertTable (  \" schema \"  ,     \" table 2  \"  ,    false ,    true ,    null ,     0  )  ;", "metadataDao . insertColumn ( table 2  ,     1  ,     \" foo \"  ,     1  ,     \" bigint \"  ,     1  ,    null )  ;", "metadataDao . insertTable (  \" schema \"  ,     \" table 3  \"  ,    false ,    false ,    null ,     0  )  ;", "long   intervalMillis    =     1  0  0  ;", "organizationManager    =    create ( intervalMillis )  ;", "Set < Long >    actual    =    discoverAndInitializeTablesToOrganize (  )  ;", "assertEquals ( actual ,    ImmutableSet . of ( table 1  ,    table 2  )  )  ;", "long   updateTime    =    System . currentTimeMillis (  )  ;", "updateLastStartTime (  \" node 1  \"  ,    table 1  ,    updateTime )  ;", "updateLastStartTime (  \" node 1  \"  ,    table 2  ,    updateTime )  ;", "long   start    =    System . nanoTime (  )  ;", "while    (  ( discoverAndInitializeTablesToOrganize (  )  . isEmpty (  )  )     &  &     (  ( nanosSince ( start )  . toMillis (  )  )     <     ( intervalMillis    +     1  0  0  0  )  )  )     {", "TimeUnit . MILLISECONDS . sleep (  1  0  )  ;", "}", "assertEquals ( discoverAndInitializeTablesToOrganize (  )  ,    ImmutableSet . of ( table 1  ,    table 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testTableDiscovery"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardOrganizationManager"}, {"methodBody": ["METHOD_START", "{", "return   new   ShardOrganizer ( new   TestShardOrganizer . MockJobFactory (  )  ,     1  )  ;", "}", "METHOD_END"], "methodName": ["createShardOrganizer"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardOrganizer"}, {"methodBody": ["METHOD_START", "{", "ShardOrganizer   organizer    =    TestShardOrganizer . createShardOrganizer (  )  ;", "Set < UUID >    shards    =    ImmutableSet . of ( UUID . randomUUID (  )  )  ;", "OrganizationSet   organizationSet    =    new   OrganizationSet (  1 L ,    shards ,    OptionalInt . empty (  )  )  ;", "enqueue ( organizationSet )  ;", "assertTrue ( inProgress ( getOnlyElement ( shards )  )  )  ;", "assertEquals ( getShardsInProgress (  )  ,     1  )  ;", "while    ( inProgress ( getOnlyElement ( shards )  )  )     {", "TimeUnit . MILLISECONDS . sleep (  1  0  )  ;", "}", "assertFalse ( inProgress ( getOnlyElement ( shards )  )  )  ;", "assertEquals ( getShardsInProgress (  )  ,     0  )  ;", "shutdown (  )  ;", "}", "METHOD_END"], "methodName": ["testShardOrganizerInProgress"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardOrganizer"}, {"methodBody": ["METHOD_START", "{", "long   tableId    =    tableInfo . getTableId (  )  ;", "Type   temporalType    =    temporalColumn . getDataType (  )  ;", "ImmutableList . Builder < ShardIndexInfo >    builder    =    ImmutableList . builder (  )  ;", "for    ( ShardInfo   shard    :    shards )     {", "ColumnStats   temporalColumnStats    =    shard . getColumnStats (  )  . stream (  )  . filter (  (    columnStats )     -  >     ( columnStats . getColumnId (  )  )     =  =     ( temporalColumn . getColumnId (  )  )  )  . findFirst (  )  . get (  )  ;", "if    (  (  ( temporalColumnStats . getMin (  )  )     =  =    null )     |  |     (  ( temporalColumnStats . getMax (  )  )     =  =    null )  )     {", "continue ;", "}", "Optional < ShardRange >    sortRange    =    Optional . empty (  )  ;", "if    ( sortColumns . isPresent (  )  )     {", "Map < Long ,    ColumnStats >    columnIdToStats    =    Maps . uniqueIndex ( shard . getColumnStats (  )  ,    ColumnStats :  : getColumnId )  ;", "ImmutableList . Builder < Type >    typesBuilder    =    ImmutableList . builder (  )  ;", "ImmutableList . Builder < Object >    minBuilder    =    ImmutableList . builder (  )  ;", "ImmutableList . Builder < Object >    maxBuilder    =    ImmutableList . builder (  )  ;", "boolean   isShardEligible    =    true ;", "for    ( TableColumn   sortColumn    :    sortColumns . get (  )  )     {", "ColumnStats   columnStats    =    columnIdToStats . get ( sortColumn . getColumnId (  )  )  ;", "typesBuilder . add ( sortColumn . getDataType (  )  )  ;", "if    (  (  ( columnStats . getMin (  )  )     =  =    null )     |  |     (  ( columnStats . getMax (  )  )     =  =    null )  )     {", "isShardEligible    =    false ;", "break ;", "}", "minBuilder . add ( columnStats . getMin (  )  )  ;", "maxBuilder . add ( columnStats . getMax (  )  )  ;", "}", "if    (  ! isShardEligible )     {", "continue ;", "}", "List < Type >    types    =    typesBuilder . build (  )  ;", "List < Object >    minValues    =    minBuilder . build (  )  ;", "List < Object >    maxValues    =    maxBuilder . build (  )  ;", "sortRange    =    Optional . of ( ShardRange . of ( new   Tuple ( types ,    minValues )  ,    new   Tuple ( types ,    maxValues )  )  )  ;", "}", "builder . add ( new   ShardIndexInfo ( tableId ,    OptionalInt . empty (  )  ,    shard . geUuid (  )  ,    shard . getRowCount (  )  ,    shard . getUncompressedSize (  )  ,    sortRange ,    Optional . of ( ShardRange . of ( new   Tuple ( temporalType ,    temporalColumnStats . getMin (  )  )  ,    new   Tuple ( temporalType ,    temporalColumnStats . getMax (  )  )  )  )  )  )  ;", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["getShardIndexInfo"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardOrganizerUtil"}, {"methodBody": ["METHOD_START", "{", "dbi    =    new   DBI (  (  \" jdbc : h 2  : mem : test \"     +     ( System . nanoTime (  )  )  )  )  ;", "dbi . registerMapper ( new   TableColumn . Mapper ( new   TypeRegistry (  )  )  )  ;", "dummyHandle    =    dbi . open (  )  ;", "SchemaDaoUtil . createTablesWithRetry ( dbi )  ;", "dataDir    =    Files . createTempDir (  )  ;", "metadata    =    new   RaptorMetadata (  \"  \"  ,    dbi ,    TestDatabaseShardManager . createShardManager ( dbi )  )  ;", "metadataDao    =    dbi . onDemand ( MetadataDao . class )  ;", "shardManager    =    TestDatabaseShardManager . createShardManager ( dbi )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardOrganizerUtil"}, {"methodBody": ["METHOD_START", "{", "dummyHandle . close (  )  ;", "deleteRecursively ( dataDir . toPath (  )  ,    ALLOW _ INSECURE )  ;", "}", "METHOD_END"], "methodName": ["teardown"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardOrganizerUtil"}, {"methodBody": ["METHOD_START", "{", "int   day 1     =     1  1  1  1  ;", "int   day 2     =     2  2  2  2  ;", "SchemaTableName   tableName    =    new   SchemaTableName (  \" default \"  ,     \" test \"  )  ;", "metadata . createTable ( SESSION ,    tableMetadataBuilder ( tableName )  . column (  \" orderkey \"  ,    BIGINT )  . column (  \" orderdate \"  ,    DATE )  . column (  \" orderstatus \"  ,    createVarcharType (  3  )  )  . property (  \" ordering \"  ,    ImmutableList . of (  \" orderstatus \"  ,     \" orderkey \"  )  )  . property (  \" temporal _ column \"  ,     \" orderdate \"  )  . build (  )  ,    false )  ;", "Table   tableInfo    =    metadataDao . getTableInformation ( tableName . getSchemaName (  )  ,    tableName . getTableName (  )  )  ;", "List < TableColumn >    tableColumns    =    metadataDao . listTableColumns ( tableInfo . getTableId (  )  )  ;", "Map < String ,    TableColumn >    tableColumnMap    =    Maps . uniqueIndex ( tableColumns ,    TableColumn :  : getColumnName )  ;", "long   orderDate    =    tableColumnMap . get (  \" orderdate \"  )  . getColumnId (  )  ;", "long   orderKey    =    tableColumnMap . get (  \" orderkey \"  )  . getColumnId (  )  ;", "long   orderStatus    =    tableColumnMap . get (  \" orderstatus \"  )  . getColumnId (  )  ;", "List < ShardInfo >    shards    =    ImmutableList .  < ShardInfo > builder (  )  . add ( TestDatabaseShardManager . shardInfo ( UUID . randomUUID (  )  ,     \" node 1  \"  ,    ImmutableList . of ( new   ColumnStats ( orderDate ,    day 1  ,     ( day 1     +     1  0  )  )  ,    new   ColumnStats ( orderKey ,     1  3 L ,     1  4 L )  ,    new   ColumnStats ( orderStatus ,     \" aaa \"  ,     \" abc \"  )  )  )  )  . add ( TestDatabaseShardManager . shardInfo ( UUID . randomUUID (  )  ,     \" node 1  \"  ,    ImmutableList . of ( new   ColumnStats ( orderDate ,    day 2  ,     ( day 2     +     1  0  0  )  )  ,    new   ColumnStats ( orderKey ,     2 L ,     2  0 L )  ,    new   ColumnStats ( orderStatus ,     \" aaa \"  ,     \" abc \"  )  )  )  )  . add ( TestDatabaseShardManager . shardInfo ( UUID . randomUUID (  )  ,     \" node 1  \"  ,    ImmutableList . of ( new   ColumnStats ( orderDate ,    day 1  ,    day 2  )  ,    new   ColumnStats ( orderKey ,     2 L ,     1  1 L )  ,    new   ColumnStats ( orderStatus ,     \" aaa \"  ,     \" abc \"  )  )  )  )  . add ( TestDatabaseShardManager . shardInfo ( UUID . randomUUID (  )  ,     \" node 1  \"  ,    ImmutableList . of ( new   ColumnStats ( orderDate ,    day 1  ,    day 2  )  ,    new   ColumnStats ( orderKey ,     2 L ,    null )  ,    new   ColumnStats ( orderStatus ,     \" aaa \"  ,     \" abc \"  )  )  )  )  . add ( TestDatabaseShardManager . shardInfo ( UUID . randomUUID (  )  ,     \" node 1  \"  ,    ImmutableList . of ( new   ColumnStats ( orderDate ,    day 1  ,    null )  ,    new   ColumnStats ( orderKey ,     2 L ,     1  1 L )  ,    new   ColumnStats ( orderStatus ,     \" aaa \"  ,     \" abc \"  )  )  )  )  . build (  )  ;", "long   transactionId    =    shardManager . beginTransaction (  )  ;", "shardManager . commitShards ( transactionId ,    tableInfo . getTableId (  )  ,     . COLUMNS ,    shards ,    Optional . empty (  )  ,     0  )  ;", "Set < ShardMetadata >    shardMetadatas    =    shardManager . getNodeShards (  \" node 1  \"  )  ;", "Long   temporalColumnId    =    metadataDao . getTemporalColumnId ( tableInfo . getTableId (  )  )  ;", "TableColumn   temporalColumn    =    metadataDao . getTableColumn ( tableInfo . getTableId (  )  ,    temporalColumnId )  ;", "Set < ShardIndexInfo >    actual    =    ImmutableSet . copyOf ( ShardOrganizerUtil . getOrganizationEligibleShards ( dbi ,    metadataDao ,    tableInfo ,    shardMetadatas ,    false )  )  ;", "List < ShardIndexInfo >    expected    =     . getShardIndexInfo ( tableInfo ,    shards ,    temporalColumn ,    Optional . empty (  )  )  ;", "assertEquals ( actual ,    expected )  ;", "List < TableColumn >    sortColumns    =    metadataDao . listSortColumns ( tableInfo . getTableId (  )  )  ;", "Set < ShardIndexInfo >    actualSortRange    =    ImmutableSet . copyOf ( ShardOrganizerUtil . getOrganizationEligibleShards ( dbi ,    metadataDao ,    tableInfo ,    shardMetadatas ,    true )  )  ;", "List < ShardIndexInfo >    expectedSortRange    =     . getShardIndexInfo ( tableInfo ,    shards ,    temporalColumn ,    Optional . of ( sortColumns )  )  ;", "assertEquals ( actualSortRange ,    expectedSortRange )  ;", "}", "METHOD_END"], "methodName": ["testGetOrganizationEligibleShards"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardOrganizerUtil"}, {"methodBody": ["METHOD_START", "{", "List < Type >    types 1     =    ImmutableList . of ( BIGINT )  ;", "range 1     =     . of ( new   Tuple ( types 1  ,     2 L )  ,    new   Tuple ( types 1  ,     5 L )  )  ;", "adjacentRange 1     =     . of ( new   Tuple ( types 1  ,     5 L )  ,    new   Tuple ( types 1  ,     1  0 L )  )  ;", "assertFalse ( range 1  . adjacent ( range 1  )  )  ;", "assertTrue ( adjacentRange 1  . adjacent ( range 1  )  )  ;", "assertTrue ( range 1  . adjacent ( adjacentRange 1  )  )  ;", "List < Type >    types 2     =    ImmutableList . of ( BIGINT ,    VARCHAR )  ;", "range 2     =     . of ( new   Tuple ( types 2  ,     2 L ,     \" aaa \"  )  ,    new   Tuple ( types 2  ,     5 L ,     \" ccc \"  )  )  ;", "adjacentRange 2     =     . of ( new   Tuple ( types 2  ,     5 L ,     \" ccc \"  )  ,    new   Tuple ( types 2  ,     1  0 L ,     \" ccc \"  )  )  ;", "subsetAdjacentRange 2     =     . of ( new   Tuple ( types 2  ,     5 L ,     \" ddd \"  )  ,    new   Tuple ( types 2  ,     1  0 L ,     \" ccc \"  )  )  ;", "overlapsRange 2     =     . of ( new   Tuple ( types 2  ,     3 L ,     \" aaa \"  )  ,    new   Tuple ( types 2  ,     1  0 L ,     \" ccc \"  )  )  ;", "notAdjacentRange 2     =     . of ( new   Tuple ( types 2  ,     6 L ,     \" ccc \"  )  ,    new   Tuple ( types 2  ,     1  0 L ,     \" ccc \"  )  )  ;", "assertTrue ( adjacentRange 2  . adjacent ( range 2  )  )  ;", "assertTrue ( subsetAdjacentRange 2  . adjacent ( range 2  )  )  ;", "assertFalse ( overlapsRange 2  . adjacent ( range 2  )  )  ;", "assertFalse ( notAdjacentRange 2  . adjacent ( range 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testAdjacentRange"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardRange"}, {"methodBody": ["METHOD_START", "{", "List < Type >    types    =    ImmutableList . of ( BIGINT ,    VARCHAR ,    BOOLEAN ,    TIMESTAMP )  ;", "range    =     . of ( new   Tuple ( types ,     2 L ,     \" aaa \"  ,    true ,     1 L )  ,    new   Tuple ( types ,     5 L ,     \" ccc \"  ,    false ,     2 L )  )  ;", "assertTrue ( range . encloses ( range )  )  ;", "}", "METHOD_END"], "methodName": ["testEnclosesIsSymmetric"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardRange"}, {"methodBody": ["METHOD_START", "{", "List < Type >    types 1     =    ImmutableList . of ( BIGINT )  ;", "range 1     =     . of ( new   Tuple ( types 1  ,     2 L )  ,    new   Tuple ( types 1  ,     5 L )  )  ;", "enclosesRange 1     =     . of ( new   Tuple ( types 1  ,     1 L )  ,    new   Tuple ( types 1  ,     1  0 L )  )  ;", "notEnclosesRange 1     =     . of ( new   Tuple ( types 1  ,     1 L )  ,    new   Tuple ( types 1  ,     4 L )  )  ;", "assertTrue ( enclosesRange 1  . encloses ( range 1  )  )  ;", "assertFalse ( notEnclosesRange 1  . encloses ( range 1  )  )  ;", "List < Type >    types 2     =    ImmutableList . of ( BIGINT ,    VARCHAR )  ;", "range 2     =     . of ( new   Tuple ( types 2  ,     2 L ,     \" aaa \"  )  ,    new   Tuple ( types 2  ,     5 L ,     \" ccc \"  )  )  ;", "enclosesRange 2     =     . of ( new   Tuple ( types 2  ,     1 L ,     \" ccc \"  )  ,    new   Tuple ( types 2  ,     1  0 L ,     \" ccc \"  )  )  ;", "notEnclosesRange 2     =     . of ( new   Tuple ( types 2  ,     2 L ,     \" aaa \"  )  ,    new   Tuple ( types 2  ,     5 L ,     \" bbb \"  )  )  ;", "assertTrue ( range 2  . encloses ( range 2  )  )  ;", "assertTrue ( enclosesRange 2  . encloses ( range 2  )  )  ;", "assertFalse ( notEnclosesRange 2  . encloses ( range 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testEnclosingRange"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardRange"}, {"methodBody": ["METHOD_START", "{", "List < Type >    types 1     =    ImmutableList . of ( BIGINT )  ;", "range 1     =     . of ( new   Tuple ( types 1  ,     2 L )  ,    new   Tuple ( types 1  ,     5 L )  )  ;", "enclosesRange 1     =     . of ( new   Tuple ( types 1  ,     1 L )  ,    new   Tuple ( types 1  ,     1  0 L )  )  ;", "overlapsRange 1     =     . of ( new   Tuple ( types 1  ,     1 L )  ,    new   Tuple ( types 1  ,     4 L )  )  ;", "notOverlapsRange 1     =     . of ( new   Tuple ( types 1  ,     6 L )  ,    new   Tuple ( types 1  ,     8 L )  )  ;", "assertTrue ( enclosesRange 1  . overlaps ( range 1  )  )  ;", "assertTrue ( overlapsRange 1  . overlaps ( range 1  )  )  ;", "assertFalse ( notOverlapsRange 1  . overlaps ( range 1  )  )  ;", "List < Type >    types 2     =    ImmutableList . of ( BIGINT ,    VARCHAR )  ;", "range 2     =     . of ( new   Tuple ( types 2  ,     2 L ,     \" aaa \"  )  ,    new   Tuple ( types 2  ,     5 L ,     \" ccc \"  )  )  ;", "enclosesRange 2     =     . of ( new   Tuple ( types 2  ,     1 L ,     \" ccc \"  )  ,    new   Tuple ( types 2  ,     1  0 L ,     \" ccc \"  )  )  ;", "overlapsRange 2     =     . of ( new   Tuple ( types 2  ,     2 L ,     \" aaa \"  )  ,    new   Tuple ( types 2  ,     5 L ,     \" bbb \"  )  )  ;", "notOverlapsRange 2     =     . of ( new   Tuple ( types 2  ,     6 L ,     \" aaa \"  )  ,    new   Tuple ( types 2  ,     8 L ,     \" bbb \"  )  )  ;", "assertTrue ( enclosesRange 2  . encloses ( range 2  )  )  ;", "assertTrue ( overlapsRange 2  . overlaps ( range 2  )  )  ;", "assertFalse ( notOverlapsRange 2  . overlaps ( range 2  )  )  ;", "}", "METHOD_END"], "methodName": ["testOverlappingRange"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardRange"}, {"methodBody": ["METHOD_START", "{", "List < Type >    types    =    ImmutableList . of ( BIGINT ,    VARCHAR ,    BOOLEAN ,    TIMESTAMP )  ;", "range    =     . of ( new   Tuple ( types ,     2 L ,     \" aaa \"  ,    true ,     1 L )  ,    new   Tuple ( types ,     5 L ,     \" ccc \"  ,    false ,     2 L )  )  ;", "assertTrue ( range . overlaps ( range )  )  ;", "}", "METHOD_END"], "methodName": ["testOverlapsIsSymmetric"], "fileName": "com.facebook.presto.raptor.storage.organization.TestShardRange"}, {"methodBody": ["METHOD_START", "{", "return   ShardRange . of ( new   Tuple ( DATE ,    start )  ,    new   Tuple ( DATE ,    end )  )  ;", "}", "METHOD_END"], "methodName": ["dateRange"], "fileName": "com.facebook.presto.raptor.storage.organization.TestTemporalFunction"}, {"methodBody": ["METHOD_START", "{", "BlockBuilder   blockBuilder    =    DATE . createBlockBuilder ( null ,     2  )  ;", "DATE . writeLong ( blockBuilder ,     1  3  )  ;", "DATE . writeLong ( blockBuilder ,     4  2  )  ;", "Block   block    =    blockBuilder . build (  )  ;", "TemporalFunction   temporalFunction    =    new   TemporalFunction (  . PST )  ;", "assertEquals ( temporalFunction . getDay ( DATE ,    block ,     0  )  ,     1  3  )  ;", "assertEquals ( temporalFunction . getDay ( DATE ,    block ,     1  )  ,     4  2  )  ;", "}", "METHOD_END"], "methodName": ["testDateBlock"], "fileName": "com.facebook.presto.raptor.storage.organization.TestTemporalFunction"}, {"methodBody": ["METHOD_START", "{", "TemporalFunction   temporalFunction    =    new   TemporalFunction ( UTC )  ;", "assertEquals ( temporalFunction . getDayFromRange (  . dateRange (  2  ,     2  )  )  ,     2  )  ;", "assertEquals ( temporalFunction . getDayFromRange (  . dateRange (  1  3  ,     1  3  )  )  ,     1  3  )  ;", "assertEquals ( temporalFunction . getDayFromRange (  . dateRange (  2  ,     5  )  )  ,     2  )  ;", "temporalFunction    =    new   TemporalFunction (  . PST )  ;", "assertEquals ( temporalFunction . getDayFromRange (  . dateRange (  2  ,     2  )  )  ,     2  )  ;", "assertEquals ( temporalFunction . getDayFromRange (  . dateRange (  2  ,     5  )  )  ,     2  )  ;", "}", "METHOD_END"], "methodName": ["testDateShardRange"], "fileName": "com.facebook.presto.raptor.storage.organization.TestTemporalFunction"}, {"methodBody": ["METHOD_START", "{", "BlockBuilder   blockBuilder    =    TIMESTAMP . createBlockBuilder ( null ,     4  )  ;", "TIMESTAMP . writeLong ( blockBuilder ,     . UTC _ TIME . getMillis (  )  )  ;", "TIMESTAMP . writeLong ( blockBuilder ,     (  (  . UTC _ TIME . getMillis (  )  )     +     ( Duration . ofHours (  2  3  )  . toMillis (  )  )  )  )  ;", "TIMESTAMP . writeLong ( blockBuilder ,     . PST _ TIME . getMillis (  )  )  ;", "TIMESTAMP . writeLong ( blockBuilder ,     (  (  . PST _ TIME . getMillis (  )  )     +     ( Duration . ofHours (  2  3  )  . toMillis (  )  )  )  )  ;", "Block   block    =    blockBuilder . build (  )  ;", "TemporalFunction   temporalFunction    =    new   TemporalFunction ( UTC )  ;", "assertEquals ( temporalFunction . getDay ( TIMESTAMP ,    block ,     0  )  ,     1  )  ;", "assertEquals ( temporalFunction . getDay ( TIMESTAMP ,    block ,     1  )  ,     1  )  ;", "assertEquals ( temporalFunction . getDay ( TIMESTAMP ,    block ,     2  )  ,     1  )  ;", "assertEquals ( temporalFunction . getDay ( TIMESTAMP ,    block ,     3  )  ,     2  )  ;", "temporalFunction    =    new   TemporalFunction (  . PST )  ;", "assertEquals ( temporalFunction . getDay ( TIMESTAMP ,    block ,     0  )  ,     0  )  ;", "assertEquals ( temporalFunction . getDay ( TIMESTAMP ,    block ,     1  )  ,     1  )  ;", "assertEquals ( temporalFunction . getDay ( TIMESTAMP ,    block ,     2  )  ,     1  )  ;", "assertEquals ( temporalFunction . getDay ( TIMESTAMP ,    block ,     3  )  ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testTimestampBlock"], "fileName": "com.facebook.presto.raptor.storage.organization.TestTemporalFunction"}, {"methodBody": ["METHOD_START", "{", "TemporalFunction   temporalFunction    =    new   TemporalFunction ( UTC )  ;", "assertEquals ( temporalFunction . getDayFromRange (  . timeRange (  . UTC _ TIME . getMillis (  )  ,    Duration . ofDays (  1  )  )  )  ,     1  )  ;", "assertEquals ( temporalFunction . getDayFromRange (  . timeRange (  . UTC _ TIME . getMillis (  )  ,    Duration . ofDays (  2  )  )  )  ,     2  )  ;", "assertEquals ( temporalFunction . getDayFromRange (  . timeRange (  (  (  . UTC _ TIME . getMillis (  )  )     +     ( Duration . ofHours (  1  1  )  . toMillis (  )  )  )  ,    Duration . ofHours (  2  4  )  )  )  ,     1  )  ;", "assertEquals ( temporalFunction . getDayFromRange (  . timeRange (  (  (  . UTC _ TIME . getMillis (  )  )     +     ( Duration . ofHours (  1  3  )  . toMillis (  )  )  )  ,    Duration . ofHours (  2  4  )  )  )  ,     2  )  ;", "assertEquals ( temporalFunction . getDayFromRange (  . timeRange (  . PST _ TIME . getMillis (  )  ,    Duration . ofDays (  1  )  )  )  ,     1  )  ;", "assertEquals ( temporalFunction . getDayFromRange (  . timeRange (  . PST _ TIME . getMillis (  )  ,    Duration . ofDays (  2  )  )  )  ,     2  )  ;", "assertEquals ( temporalFunction . getDayFromRange (  . timeRange (  (  (  . PST _ TIME . getMillis (  )  )     +     ( Duration . ofHours (  1  1  )  . toMillis (  )  )  )  ,    Duration . ofHours (  2  4  )  )  )  ,     2  )  ;", "assertEquals ( temporalFunction . getDayFromRange (  . timeRange (  (  (  . PST _ TIME . getMillis (  )  )     +     ( Duration . ofHours (  1  3  )  . toMillis (  )  )  )  ,    Duration . ofHours (  2  4  )  )  )  ,     2  )  ;", "temporalFunction    =    new   TemporalFunction (  . PST )  ;", "assertEquals ( temporalFunction . getDayFromRange (  . timeRange (  . UTC _ TIME . getMillis (  )  ,    Duration . ofDays (  1  )  )  )  ,     1  )  ;", "assertEquals ( temporalFunction . getDayFromRange (  . timeRange (  . UTC _ TIME . getMillis (  )  ,    Duration . ofDays (  2  )  )  )  ,     1  )  ;", "assertEquals ( temporalFunction . getDayFromRange (  . timeRange (  (  (  . UTC _ TIME . getMillis (  )  )     +     ( Duration . ofHours (  1  1  )  . toMillis (  )  )  )  ,    Duration . ofHours (  2  4  )  )  )  ,     1  )  ;", "assertEquals ( temporalFunction . getDayFromRange (  . timeRange (  (  (  . UTC _ TIME . getMillis (  )  )     +     ( Duration . ofHours (  1  3  )  . toMillis (  )  )  )  ,    Duration . ofHours (  2  4  )  )  )  ,     1  )  ;", "assertEquals ( temporalFunction . getDayFromRange (  . timeRange (  . PST _ TIME . getMillis (  )  ,    Duration . ofDays (  1  )  )  )  ,     1  )  ;", "assertEquals ( temporalFunction . getDayFromRange (  . timeRange (  . PST _ TIME . getMillis (  )  ,    Duration . ofDays (  2  )  )  )  ,     2  )  ;", "assertEquals ( temporalFunction . getDayFromRange (  . timeRange (  (  (  . PST _ TIME . getMillis (  )  )     +     ( Duration . ofHours (  1  1  )  . toMillis (  )  )  )  ,    Duration . ofHours (  2  4  )  )  )  ,     1  )  ;", "assertEquals ( temporalFunction . getDayFromRange (  . timeRange (  (  (  . PST _ TIME . getMillis (  )  )     +     ( Duration . ofHours (  1  3  )  . toMillis (  )  )  )  ,    Duration . ofHours (  2  4  )  )  )  ,     2  )  ;", "}", "METHOD_END"], "methodName": ["testTimestampShardRange"], "fileName": "com.facebook.presto.raptor.storage.organization.TestTemporalFunction"}, {"methodBody": ["METHOD_START", "{", "return   ShardRange . of ( new   Tuple ( TIMESTAMP ,    start )  ,    new   Tuple ( TIMESTAMP ,     ( start    +     ( duration . toMillis (  )  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["timeRange"], "fileName": "com.facebook.presto.raptor.storage.organization.TestTemporalFunction"}, {"methodBody": ["METHOD_START", "{", "List < Type >    types    =    ImmutableList . of ( BIGINT ,    VARCHAR ,    BOOLEAN ,    DOUBLE ,    DATE ,    TIMESTAMP )  ;", "tuple 1     =    new    ( types ,    ImmutableList . of (  1 L ,     \" hello \"  ,    false ,     1  .  2  ,     1  1  1  1  1  ,     1  1  1  2  )  )  ;", "equalTo 1     =    new    ( types ,    ImmutableList . of (  1 L ,     \" hello \"  ,    false ,     1  .  2  ,     1  1  1  1  1  ,     1  1  1  2  )  )  ;", "greaterThan 1     =    new    ( types ,    ImmutableList . of (  1 L ,     \" hello \"  ,    false ,     1  .  2  ,     1  1  1  1  1  ,     1  1  1  3  )  )  ;", "lessThan 1     =    new    ( types ,    ImmutableList . of (  1 L ,     \" hello \"  ,    false ,     1  .  2  ,     1  1  1  1  1  ,     1  1  1  1  )  )  ;", "assertEquals ( tuple 1  . compareTo ( equalTo 1  )  ,     0  )  ;", "Assertions . assertLessThan ( tuple 1  . compareTo ( greaterThan 1  )  ,     0  )  ;", "Assertions . assertGreaterThan ( tuple 1  . compareTo ( lessThan 1  )  ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testComparableTuple"], "fileName": "com.facebook.presto.raptor.storage.organization.TestTuple"}, {"methodBody": ["METHOD_START", "{", "List < Type >    types 1     =    ImmutableList . of ( createVarcharType (  3  )  )  ;", "List < Type >    types 2     =    ImmutableList . of ( createVarcharType (  4  )  )  ;", "tuple 1     =    new    ( types 1  ,    ImmutableList . of (  \" abc \"  )  )  ;", "tuple 2     =    new    ( types 2  ,    ImmutableList . of (  \" abcd \"  )  )  ;", "tuple 1  . compareTo ( tuple 2  )  ;", "}", "METHOD_END"], "methodName": ["testMismatchedTypes"], "fileName": "com.facebook.presto.raptor.storage.organization.TestTuple"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Comparable < T >  )     ( o 1  )  )  . compareTo (  (  ( T )     ( o 2  )  )  )  ;", "}", "METHOD_END"], "methodName": ["compare"], "fileName": "com.facebook.presto.raptor.storage.organization.Tuple"}, {"methodBody": ["METHOD_START", "{", "return   types ;", "}", "METHOD_END"], "methodName": ["getTypes"], "fileName": "com.facebook.presto.raptor.storage.organization.Tuple"}, {"methodBody": ["METHOD_START", "{", "return   values ;", "}", "METHOD_END"], "methodName": ["getValues"], "fileName": "com.facebook.presto.raptor.storage.organization.Tuple"}, {"methodBody": ["METHOD_START", "{", "if    ( pageBuilder . isFull (  )  )     {", "pages . add ( pageBuilder . build (  )  )  ;", "pageBuilder . reset (  )  ;", "}", "pageBuilder . declarePosition (  )  ;", "channel    =     0  ;", "}", "METHOD_END"], "methodName": ["beginRow"], "fileName": "com.facebook.presto.raptor.systemtables.PageListBuilder"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( pageBuilder . isEmpty (  )  )  )     {", "pages . add ( pageBuilder . build (  )  )  ;", "pageBuilder . reset (  )  ;", "}", "return   pages . build (  )  ;", "}", "METHOD_END"], "methodName": ["build"], "fileName": "com.facebook.presto.raptor.systemtables.PageListBuilder"}, {"methodBody": ["METHOD_START", "{", "int   currentChannel    =    channel ;", "( channel )  +  +  ;", "return   page . getBlock ( currentChannel )  ;", "}", "METHOD_END"], "methodName": ["nextBlockBuilder"], "fileName": "com.facebook.presto.raptor.systemtables.PageListBuilder"}, {"methodBody": ["METHOD_START", "{", "Type   type    =    valueBuffer . getType (  )  ;", "if    ( valueBuffer . isNull (  )  )     {", "preparedStatement . setNull ( parameterIndex ,     . typeToSqlType ( type )  )  ;", "} else", "if    (  ( type . getJavaType (  )  )     =  =     ( long . class )  )     {", "preparedStatement . setLong ( parameterIndex ,    valueBuffer . getLong (  )  )  ;", "} else", "if    (  ( type . getJavaType (  )  )     =  =     ( double . class )  )     {", "preparedStatement . setDouble ( parameterIndex ,    valueBuffer . getDouble (  )  )  ;", "} else", "if    (  ( type . getJavaType (  )  )     =  =     ( boolean . class )  )     {", "preparedStatement . setBoolean ( parameterIndex ,    valueBuffer . getBoolean (  )  )  ;", "} else", "if    (  (  ( type . getJavaType (  )  )     =  =     ( io . airlift . slice . Slice . class )  )     &  &    isUuid )     {", "preparedStatement . setBytes ( parameterIndex ,    valueBuffer . getSlice (  )  . getBytes (  )  )  ;", "} else", "if    (  ( type . getJavaType (  )  )     =  =     ( io . airlift . slice . Slice . class )  )     {", "preparedStatement . setString ( parameterIndex ,    new   String ( valueBuffer . getSlice (  )  . getBytes (  )  )  )  ;", "} else    {", "throw   new   IllegalArgumentException (  (  \" Unknown   Java   type :     \"     +     ( type . getJavaType (  )  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["bindField"], "fileName": "com.facebook.presto.raptor.systemtables.PreparedStatementBuilder"}, {"methodBody": ["METHOD_START", "{", "checkArgument (  (  !  ( isNullOrEmpty ( sql )  )  )  ,     \" sql   is   null   or   empty \"  )  ;", "List < ValueBuffer >    bindValues    =    new   ArrayList <  >  (  2  5  6  )  ;", "sql    +  =     . getWhereClause ( tupleDomain ,    columnNames ,    types ,    uuidColumnIndexes ,    bindValues )  ;", "PreparedStatement   statement    =    connection . prepareStatement ( sql ,    ResultSet . TYPE _ FORWARD _ ONLY ,    ResultSet . CONCUR _ READ _ ONLY )  ;", "DatabaseUtil . enableStreamingResults ( statement )  ;", "int   bindIndex    =     1  ;", "for    ( ValueBuffer   value    :    bindValues )     {", ". bindField ( value ,    statement ,    bindIndex ,    uuidColumnIndexes . contains ( value . getColumnIndex (  )  )  )  ;", "bindIndex +  +  ;", "}", "return   statement ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "com.facebook.presto.raptor.systemtables.PreparedStatementBuilder"}, {"methodBody": ["METHOD_START", "{", "if    ( uuidColumnIndexes . contains ( columnIndex )  )     {", "return   UuidUtil . uuidToBytes ( UUID . fromString (  (  ( Slice )     ( value )  )  . toStringUtf 8  (  )  )  )  ;", "}", "return   value ;", "}", "METHOD_END"], "methodName": ["getBindValue"], "fileName": "com.facebook.presto.raptor.systemtables.PreparedStatementBuilder"}, {"methodBody": ["METHOD_START", "{", "if    ( tupleDomain . isNone (  )  )     {", "return    \"  \"  ;", "}", "ImmutableList . Builder < String >    conjunctsBuilder    =    ImmutableList . builder (  )  ;", "Map < Integer ,    Domain >    domainMap    =    tupleDomain . getDomains (  )  . get (  )  ;", "for    ( Map . Entry < Integer ,    Domain >    entry    :    domainMap . entrySet (  )  )     {", "int   index    =    entry . getKey (  )  ;", "String   columnName    =    columnNames . get ( index )  ;", "Type   type    =    types . get ( index )  ;", "conjunctsBuilder . add (  . toPredicate ( index ,    columnName ,    type ,    entry . getValue (  )  ,    uuidColumnIndexes ,    bindValues )  )  ;", "}", "List < String >    conjuncts    =    conjunctsBuilder . build (  )  ;", "if    ( conjuncts . isEmpty (  )  )     {", "return    \"  \"  ;", "}", "StringBuilder   where    =    new   StringBuilder (  \" WHERE    \"  )  ;", "return   Joiner . on (  \"    AND \\ n \"  )  . appendTo ( where ,    conjuncts )  . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getWhereClause"], "fileName": "com.facebook.presto.raptor.systemtables.PreparedStatementBuilder"}, {"methodBody": ["METHOD_START", "{", "return   String . format (  \"  % s    % s    ?  \"  ,    columnName ,    operator )  ;", "}", "METHOD_END"], "methodName": ["toBindPredicate"], "fileName": "com.facebook.presto.raptor.systemtables.PreparedStatementBuilder"}, {"methodBody": ["METHOD_START", "{", "if    ( domain . getValues (  )  . isAll (  )  )     {", "return   domain . isNullAllowed (  )     ?     \" TRUE \"     :    columnName    +     \"    IS   NOT   NULL \"  ;", "}", "if    ( domain . getValues (  )  . isNone (  )  )     {", "return   domain . isNullAllowed (  )     ?    columnName    +     \"    IS   NULL \"     :     \" FALSE \"  ;", "}", "return   domain . getValues (  )  . getValuesProcessor (  )  . transform (  (    ranges )     -  >     {", "List < String >    disjuncts    =    new   ArrayList <  >  (  )  ;", "List < Object >    singleValues    =    new   ArrayList <  >  (  )  ;", "for    ( Range   range    :    ranges . getOrderedRanges (  )  )     {", "check (  (  !  ( range . isAll (  )  )  )  )  ;", "if    ( range . isSingleValue (  )  )     {", "singleValues . add ( range . getLow (  )  . getValue (  )  )  ;", "} else    {", "List < String >    rangeConjuncts    =    new   ArrayList <  >  (  )  ;", "if    (  !  ( range . getLow (  )  . isLowerUnbounded (  )  )  )     {", "Object   bindValue    =    getBindValue ( columnIndex ,    uuidColumnIndexes ,    range . getLow (  )  . getValue (  )  )  ;", "switch    ( range . getLow (  )  . getBound (  )  )     {", "case   ABOVE    :", "rangeConjuncts . add ( toBindPredicate ( columnName ,     \"  >  \"  )  )  ;", "bindValues . add ( ValueBuffer . create ( columnIndex ,    type ,    bindValue )  )  ;", "break ;", "case   EXACTLY    :", "rangeConjuncts . add ( toBindPredicate ( columnName ,     \"  >  =  \"  )  )  ;", "bindValues . add ( ValueBuffer . create ( columnIndex ,    type ,    bindValue )  )  ;", "break ;", "case   BELOW    :", "throw   new   VerifyException (  \" Low   Marker   should   never   use   BELOW   bound \"  )  ;", "default    :", "throw   new   AssertionError (  (  \" Unhandled   bound :     \"     +     ( range . getLow (  )  . getBound (  )  )  )  )  ;", "}", "}", "if    (  !  ( range . getHigh (  )  . isUpperUnbounded (  )  )  )     {", "Object   bindValue    =    getBindValue ( columnIndex ,    uuidColumnIndexes ,    range . getHigh (  )  . getValue (  )  )  ;", "switch    ( range . getHigh (  )  . getBound (  )  )     {", "case   ABOVE    :", "throw   new   VerifyException (  \" High   Marker   should   never   use   ABOVE   bound \"  )  ;", "case   EXACTLY    :", "rangeConjuncts . add ( toBindPredicate ( columnName ,     \"  <  =  \"  )  )  ;", "bindValues . add ( ValueBuffer . create ( columnIndex ,    type ,    bindValue )  )  ;", "break ;", "case   BELOW    :", "rangeConjuncts . add ( toBindPredicate ( columnName ,     \"  <  \"  )  )  ;", "bindValues . add ( ValueBuffer . create ( columnIndex ,    type ,    bindValue )  )  ;", "break ;", "default    :", "throw   new   AssertionError (  (  \" Unhandled   bound :     \"     +     ( range . getHigh (  )  . getBound (  )  )  )  )  ;", "}", "}", "check (  (  !  ( rangeConjuncts . isEmpty (  )  )  )  )  ;", "disjuncts . add (  (  (  \"  (  \"     +     ( Joiner . on (  \"    AND    \"  )  . join ( rangeConjuncts )  )  )     +     \"  )  \"  )  )  ;", "}", "}", "if    (  ( singleValues . size (  )  )     =  =     1  )     {", "disjuncts . add ( toBindPredicate ( columnName ,     \"  =  \"  )  )  ;", "bindValues . add ( ValueBuffer . create ( columnIndex ,    type ,    getBindValue ( columnIndex ,    uuidColumnIndexes ,    getOnlyElement ( singleValues )  )  )  )  ;", "} else", "if    (  ( singleValues . size (  )  )     >     1  )     {", "disjuncts . add (  (  (  ( columnName    +     \"    IN    (  \"  )     +     ( Joiner . on (  \"  ,  \"  )  . join ( nCopies ( singleValues . size (  )  ,     \"  ?  \"  )  )  )  )     +     \"  )  \"  )  )  ;", "for    ( Object   singleValue    :    singleValues )     {", "bindValues . add ( ValueBuffer . create ( columnIndex ,    type ,    getBindValue ( columnIndex ,    uuidColumnIndexes ,    singleValue )  )  )  ;", "}", "}", "check (  (  !  ( disjuncts . isEmpty (  )  )  )  )  ;", "if    ( domain . isNullAllowed (  )  )     {", "disjuncts . add (  ( columnName    +     \"    IS   NULL \"  )  )  ;", "}", "return    (  \"  (  \"     +     ( Joiner . on (  \"    OR    \"  )  . join ( disjuncts )  )  )     +     \"  )  \"  ;", "}  ,     (    discreteValues )     -  >     {", "String   values    =    Joiner . on (  \"  ,  \"  )  . join ( nCopies ( discreteValues . getValues (  )  . size (  )  ,     \"  ?  \"  )  )  ;", "String   predicate    =     (  (  ( columnName    +     ( discreteValues . isWhiteList (  )     ?     \"  \"     :     \"    NOT \"  )  )     +     \"    IN    (  \"  )     +    values )     +     \"  )  \"  ;", "for    ( Object   value    :    discreteValues . getValues (  )  )     {", "bindValues . add ( ValueBuffer . create ( columnIndex ,    type ,    getBindValue ( columnIndex ,    uuidColumnIndexes ,    value )  )  )  ;", "}", "if    ( domain . isNullAllowed (  )  )     {", "predicate    =     (  (  (  \"  (  \"     +    predicate )     +     \"    OR    \"  )     +    columnName )     +     \"    IS   NULL )  \"  ;", "}", "return   predicate ;", "}  ,     (    allOrNone )     -  >     {", "throw   new   IllegalException (  \" Case   should   not   be   reachable \"  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["toPredicate"], "fileName": "com.facebook.presto.raptor.systemtables.PreparedStatementBuilder"}, {"methodBody": ["METHOD_START", "{", "if    ( type . equals ( BIGINT )  )     {", "return   Types . BIGINT ;", "}", "if    ( type . equals ( DOUBLE )  )     {", "return   Types . DOUBLE ;", "}", "if    ( type . equals ( BOOLEAN )  )     {", "return   Types . BOOLEAN ;", "}", "if    ( isVarcharType ( type )  )     {", "return   Types . VARCHAR ;", "}", "if    ( type . equals ( VARBINARY )  )     {", "return   Types . VARBINARY ;", "}", "throw   new   IllegalArguException (  (  \" Unknown   type :     \"     +    type )  )  ;", "}", "METHOD_END"], "methodName": ["typeToSqlType"], "fileName": "com.facebook.presto.raptor.systemtables.PreparedStatementBuilder"}, {"methodBody": ["METHOD_START", "{", "checkArgument (  ( resultSet    !  =    null )  ,     \" resultSet   is   null \"  )  ;", "int   completedBytes    =     0  ;", "for    ( int   i    =     0  ;    i    <     ( types . size (  )  )  ;    i +  +  )     {", "Class <  ?  >    javaType    =    types . get ( i )  . getJavaType (  )  ;", "if    ( javaType    =  =     ( boolean . class )  )     {", "booleans [ i ]     =    resultSet . getBoolean (  ( i    +     1  )  )  ;", "nulls [ i ]     =    resultSet . wasNull (  )  ;", "if    (  !  ( nulls [ i ]  )  )     {", "completedBytes    +  =    SizeOf . SIZE _ OF _ BYTE ;", "}", "} else", "if    ( javaType    =  =     ( long . class )  )     {", "longs [ i ]     =    resultSet . getLong (  ( i    +     1  )  )  ;", "nulls [ i ]     =    resultSet . wasNull (  )  ;", "if    (  !  ( nulls [ i ]  )  )     {", "completedBytes    +  =    SizeOf . SIZE _ OF _ LONG ;", "}", "} else", "if    ( javaType    =  =     ( double . class )  )     {", "doubles [ i ]     =    resultSet . getDouble (  ( i    +     1  )  )  ;", "nulls [ i ]     =    resultSet . wasNull (  )  ;", "if    (  !  ( nulls [ i ]  )  )     {", "completedBytes    +  =    SizeOf . SIZE _ OF _ DOUBLE ;", "}", "} else", "if    ( javaType    =  =     ( io . airlift . slice . Slice . class )  )     {", "if    ( uuidColumns . contains ( i )  )     {", "byte [  ]    bytes    =    resultSet . getBytes (  ( i    +     1  )  )  ;", "nulls [ i ]     =    resultSet . wasNull (  )  ;", "strings [ i ]     =     ( nulls [ i ]  )     ?    null    :    util . UuidUtil . uuidFromBytes ( bytes )  . toString (  )  . toLowerCase ( ENGLISH )  ;", "} else", "if    ( hexColumns . contains ( i )  )     {", "long   value    =    resultSet . getLong (  ( i    +     1  )  )  ;", "nulls [ i ]     =    resultSet . wasNull (  )  ;", "strings [ i ]     =     ( nulls [ i ]  )     ?    null    :    String . format (  \"  %  0  1  6 x \"  ,    value )  ;", "} else    {", "String   value    =    resultSet . getString (  ( i    +     1  )  )  ;", "nulls [ i ]     =    resultSet . wasNull (  )  ;", "strings [ i ]     =     ( nulls [ i ]  )     ?    null    :    value ;", "}", "if    (  !  ( nulls [ i ]  )  )     {", "completedBytes    +  =    strings [ i ]  . length (  )  ;", "}", "} else    {", "throw   new   com . google . common . base . VerifyException (  (  \" Unknown   Java   type :     \"     +    javaType )  )  ;", "}", "}", "return   completedBytes ;", "}", "METHOD_END"], "methodName": ["extractValues"], "fileName": "com.facebook.presto.raptor.systemtables.ResultSetValues"}, {"methodBody": ["METHOD_START", "{", "return   booleans [ field ]  ;", "}", "METHOD_END"], "methodName": ["getBoolean"], "fileName": "com.facebook.presto.raptor.systemtables.ResultSetValues"}, {"methodBody": ["METHOD_START", "{", "return   doubles [ field ]  ;", "}", "METHOD_END"], "methodName": ["getDouble"], "fileName": "com.facebook.presto.raptor.systemtables.ResultSetValues"}, {"methodBody": ["METHOD_START", "{", "return   longs [ field ]  ;", "}", "METHOD_END"], "methodName": ["getLong"], "fileName": "com.facebook.presto.raptor.systemtables.ResultSetValues"}, {"methodBody": ["METHOD_START", "{", "return   Slices . wrappedBuffer ( strings [ field ]  . getBytes (  )  )  ;", "}", "METHOD_END"], "methodName": ["getSlice"], "fileName": "com.facebook.presto.raptor.systemtables.ResultSetValues"}, {"methodBody": ["METHOD_START", "{", "return   nulls [ field ]  ;", "}", "METHOD_END"], "methodName": ["isNull"], "fileName": "com.facebook.presto.raptor.systemtables.ResultSetValues"}, {"methodBody": ["METHOD_START", "{", "checkState (  (  !  ( closed )  )  ,     \" cursor   is   closed \"  )  ;", "Type   type    =    getType ( field )  ;", "checkArgument (  (  ( type . getJavaType (  )  )     =  =    clazz )  ,     \" Type    % s   cannot   be   read   as    % s \"  ,    type ,    clazz . getSimpleName (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkFieldType"], "fileName": "com.facebook.presto.raptor.systemtables.ShardMetadataRecordCursor"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    this . connection ; Statement   statement    =    this . statement ; ResultSet   resultSet    =    this . resultSet )     {", "}    catch    ( SQLException   ignored )     {", "}", "}", "METHOD_END"], "methodName": ["closeCurrentResultSet"], "fileName": "com.facebook.presto.raptor.systemtables.ShardMetadataRecordCursor"}, {"methodBody": ["METHOD_START", "{", "return   String . format (  (  \" SELECT    % s \\ nFROM    % s   x \\ n \"     +     (  \" JOIN   shards   ON    ( x . shard _ id    =    shards . shard _ id   AND   shards . table _ id    =     % s )  \\ n \"     +     \" JOIN   tables   ON    ( tables . table _ id    =     % s )  \\ n \"  )  )  ,    Joiner . on (  \"  ,     \"  )  . join ( columnNames )  ,    DatabaseShardManager . shardIndexTable ( tableId )  ,    tableId ,    tableId )  ;", "}", "METHOD_END"], "methodName": ["constructSqlTemplate"], "fileName": "com.facebook.presto.raptor.systemtables.ShardMetadataRecordCursor"}, {"methodBody": ["METHOD_START", "{", "return   ImmutableList .  < String > builder (  )  . add (  \" tables . schema _ name \"  )  . add (  \" tables . table _ name \"  )  . add (  (  (  \" shards \"     +     \"  .  \"  )     +     ( ShardMetadataRecordCursor . COLUMNS . get (  2  )  . getName (  )  )  )  )  . add (  (  (  \" shards \"     +     \"  .  \"  )     +     ( ShardMetadataRecordCursor . COLUMNS . get (  3  )  . getName (  )  )  )  )  . add (  (  (  \" shards \"     +     \"  .  \"  )     +     ( ShardMetadataRecordCursor . COLUMNS . get (  4  )  . getName (  )  )  )  )  . add (  (  (  \" shards \"     +     \"  .  \"  )     +     ( ShardMetadataRecordCursor . COLUMNS . get (  5  )  . getName (  )  )  )  )  . add (  (  (  \" shards \"     +     \"  .  \"  )     +     ( ShardMetadataRecordCursor . COLUMNS . get (  6  )  . getName (  )  )  )  )  . add (  (  (  \" shards \"     +     \"  .  \"  )     +     ( ShardMetadataRecordCursor . COLUMNS . get (  7  )  . getName (  )  )  )  )  . add ( ShardMetadataRecordCursor . MIN _ TIMESTAMP )  . add ( ShardMetadataRecordCursor . MAX _ TIMESTAMP )  . add ( ShardMetadataRecordCursor . MIN _ DATE )  . add ( ShardMetadataRecordCursor . MAX _ DATE )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["createQualifiedColumnNames"], "fileName": "com.facebook.presto.raptor.systemtables.ShardMetadataRecordCursor"}, {"methodBody": ["METHOD_START", "{", "List < ColumnMetadata >    columns    =    tableMetadata . getColumns (  )  ;", "for    ( int   i    =     0  ;    i    <     ( columns . size (  )  )  ;    i +  +  )     {", "if    ( columns . get ( i )  . getName (  )  . equals ( columnName )  )     {", "return   i ;", "}", "}", "throw   new   IllegalArgumentException ( String . format (  \" Column    % s   not   found \"  ,    columnName )  )  ;", "}", "METHOD_END"], "methodName": ["getColumnIndex"], "fileName": "com.facebook.presto.raptor.systemtables.ShardMetadataRecordCursor"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < String >    builder    =    ImmutableList . builder (  )  ;", "for    ( String   column    :    columnNames )     {", "switch    ( column )     {", "case    . MIN _ TIMESTAMP    :", "builder . add ( minTimestampColumn )  ;", "break ;", "case    . MAX _ TIMESTAMP    :", "builder . add ( maxTimestampColumn )  ;", "break ;", "case    . MIN _ DATE    :", "builder . add ( minDateColumn )  ;", "break ;", "case    . MAX _ DATE    :", "builder . add ( maxDateColumn )  ;", "break ;", "default    :", "builder . add ( column )  ;", "break ;", "}", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["getMappedColumnNames"], "fileName": "com.facebook.presto.raptor.systemtables.ShardMetadataRecordCursor"}, {"methodBody": ["METHOD_START", "{", "closeCurrentResultSet (  )  ;", "if    (  !  ( tableIds . hasNext (  )  )  )     {", "return   null ;", "}", "Long   tableId    =    tableIds . next (  )  ;", "Long   columnId    =    metadataDao . getTemporalColumnId ( tableId )  ;", "List < String >    columnNames ;", "if    ( columnId    =  =    null )     {", "columnNames    =    getMappedColumnNames (  \" null \"  ,     \" null \"  ,     \" null \"  ,     \" null \"  )  ;", "} else    {", "Type   temporalType    =    metadataDao . getTableColumn ( tableId ,    columnId )  . getDataType (  )  ;", "if    ( temporalType . equals ( DATE )  )     {", "columnNames    =    getMappedColumnNames (  \" null \"  ,     \" null \"  ,    DatabaseShardManager . minColumn ( columnId )  ,    DatabaseShardManager . maxColumn ( columnId )  )  ;", "} else", "if    ( temporalType . equals ( TIMESTAMP )  )     {", "columnNames    =    getMappedColumnNames ( DatabaseShardManager . minColumn ( columnId )  ,    DatabaseShardManager . maxColumn ( columnId )  ,     \" null \"  ,     \" null \"  )  ;", "} else    {", "throw   new   com . facebook . presto . spi . PrestoException ( RaptorErrorCode . RAPTOR _ CORRUPT _ METADATA ,     (  \" Temporal   column   should   be   of   type   date   or   timestamp ,    not    \"     +     ( temporalType . getDisplayName (  )  )  )  )  ;", "}", "}", "try    {", "connection    =    dbi . open (  )  . getConnection (  )  ;", "statement    =    PreparedStatementBuilder . create ( connection ,    ShardMetadataRecordCursor . constructSqlTemplate ( columnNames ,    tableId )  ,    columnNames ,    ShardMetadataRecordCursor . TYPES ,    ImmutableSet . of ( ShardMetadataRecordCursor . getColumnIndex ( ShardMetadataRecordCursor . SHARD _ METADATA ,    ShardMetadataRecordCursor . SHARD _ UUID )  )  ,    tupleDomain )  ;", "return   statement . executeQuery (  )  ;", "}    catch    ( SQLException    |    DBIException   e )     {", "close (  )  ;", "throw   DatabaseUtil . metadataError ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["getNextResultSet"], "fileName": "com.facebook.presto.raptor.systemtables.ShardMetadataRecordCursor"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Slice )     ( value )  )  . toStringUtf 8  (  )  ;", "}", "METHOD_END"], "methodName": ["getStringValue"], "fileName": "com.facebook.presto.raptor.systemtables.ShardMetadataRecordCursor"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    Domain >    domains    =    tupleDomain . getDomains (  )  . get (  )  ;", "Domain   schemaNameDomain    =    domains . get (  . getColumnIndex (  . SHARD _ METADATA ,     . SCHEMA _ NAME )  )  ;", "Domain   tableNameDomain    =    domains . get (  . getColumnIndex (  . SHARD _ METADATA ,     . TABLE _ NAME )  )  ;", "List < String >    values    =    new   ArrayList <  >  (  )  ;", "StringBuilder   sql    =    new   StringBuilder (  \" SELECT   table _ id   FROM   tables    \"  )  ;", "if    (  ( schemaNameDomain    !  =    null )     |  |     ( tableNameDomain    !  =    null )  )     {", "sql . append (  \" WHERE    \"  )  ;", "List < String >    predicates    =    new   ArrayList <  >  (  )  ;", "if    (  ( tableNameDomain    !  =    null )     &  &     ( tableNameDomain . isSingleValue (  )  )  )     {", "predicates . add (  \" table _ name    =     ?  \"  )  ;", "values . add (  . getStringValue ( tableNameDomain . getSingleValue (  )  )  )  ;", "}", "if    (  ( schemaNameDomain    !  =    null )     &  &     ( schemaNameDomain . isSingleValue (  )  )  )     {", "predicates . add (  \" schema _ name    =     ?  \"  )  ;", "values . add (  . getStringValue ( schemaNameDomain . getSingleValue (  )  )  )  ;", "}", "sql . append ( Joiner . on (  \"    AND    \"  )  . join ( predicates )  )  ;", "}", "ImmutableList . Builder < Long >    tableIds    =    ImmutableList . builder (  )  ;", "try    ( Connection   connection    =    dbi . open (  )  . getConnection (  )  ; PreparedStatement   statement    =    connection . prepareStatement ( sql . toString (  )  )  )     {", "for    ( int   i    =     0  ;    i    <     ( values . size (  )  )  ;    i +  +  )     {", "statement . setString (  ( i    +     1  )  ,    values . get ( i )  )  ;", "}", "try    ( ResultSet   resultSet    =    statement . executeQuery (  )  )     {", "while    ( resultSet . next (  )  )     {", "tableIds . add ( resultSet . getLong (  \" table _ id \"  )  )  ;", "}", "}", "}    catch    ( SQLException    |    DBIException   e )     {", "throw   DatabaseUtil . metadataError ( e )  ;", "}", "return   tableIds . build (  )  . iterator (  )  ;", "}", "METHOD_END"], "methodName": ["getTableIds"], "fileName": "com.facebook.presto.raptor.systemtables.ShardMetadataRecordCursor"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    NullableValue >    domainValues    =    extractFixedValues ( tupleDomain )  . orElse ( ImmutableMap . of (  )  )  ;", "String   schemaName    =     . getStringValue ( domainValues . get (  . getColumnIndex ( tableMetadata ,     . SCHEMA _ NAME )  )  )  ;", "String   tableName    =     . getStringValue ( domainValues . get (  . getColumnIndex ( tableMetadata ,     . TABLE _ NAME )  )  )  ;", "PageListBuilder   pageBuilder    =    new   PageListBuilder ( tableMetadata . getColumns (  )  . stream (  )  . map ( ColumnMetadata :  : getType )  . collect ( Collectors . toList (  )  )  )  ;", "List < TableMetadataRow >    tableRows    =    dao . getTableMetadataRows ( schemaName ,    tableName )  ;", "PeekingIterator < ColumnMetadataRow >    columnRowIterator    =    peekingIterator ( dao . getColumnMetadataRows ( schemaName ,    tableName )  . iterator (  )  )  ;", "for    ( TableMetadataRow   tableRow    :    tableRows )     {", "while    (  ( columnRowIterator . hasNext (  )  )     &  &     (  ( columnRowIterator . peek (  )  . getTableId (  )  )     <     ( tableRow . getTableId (  )  )  )  )     {", "columnRowIterator . next (  )  ;", "}", "String   temporalColumnName    =    null ;", "SortedMap < Integer ,    String >    sortColumnNames    =    new   TreeMap <  >  (  )  ;", "SortedMap < Integer ,    String >    bucketColumnNames    =    new   TreeMap <  >  (  )  ;", "OptionalLong   temporalColumnId    =    tableRow . getTemporalColumnId (  )  ;", "while    (  ( columnRowIterator . hasNext (  )  )     &  &     (  ( columnRowIterator . peek (  )  . getTableId (  )  )     =  =     ( tableRow . getTableId (  )  )  )  )     {", "ColumnMetadataRow   columnRow    =    columnRowIterator . next (  )  ;", "if    (  ( temporalColumnId . isPresent (  )  )     &  &     (  ( columnRow . getColumnId (  )  )     =  =     ( temporalColumnId . getAsLong (  )  )  )  )     {", "temporalColumnName    =    columnRow . getColumnName (  )  ;", "}", "OptionalInt   sortOrdinalPosition    =    columnRow . getSortOrdinalPosition (  )  ;", "if    ( sortOrdinalPosition . isPresent (  )  )     {", "sortColumnNames . put ( sortOrdinalPosition . getAsInt (  )  ,    columnRow . getColumnName (  )  )  ;", "}", "OptionalInt   bucketOrdinalPosition    =    columnRow . getBucketOrdinalPosition (  )  ;", "if    ( bucketOrdinalPosition . isPresent (  )  )     {", "bucketColumnNames . put ( bucketOrdinalPosition . getAsInt (  )  ,    columnRow . getColumnName (  )  )  ;", "}", "}", "pageBuilder . beginRow (  )  ;", "VARCHAR . writeSlice ( pageBuilder . nextBlockBuilder (  )  ,    Slices . utf 8 Slice ( tableRow . getSchemaName (  )  )  )  ;", "VARCHAR . writeSlice ( pageBuilder . nextBlockBuilder (  )  ,    Slices . utf 8 Slice ( tableRow . getTableName (  )  )  )  ;", "if    ( temporalColumnId . isPresent (  )  )     {", "if    ( temporalColumnName    =  =    null )     {", "throw   new   PrestoException ( RaptorErrorCode . RAPTOR _ CORRUPT _ METADATA ,    String . format (  \" Table   ID    % s   has   corrupt   metadata    ( invalid   temporal   column   ID )  \"  ,    tableRow . getTableId (  )  )  )  ;", "}", "VARCHAR . writeSlice ( pageBuilder . nextBlockBuilder (  )  ,    Slices . utf 8 Slice ( temporalColumnName )  )  ;", "} else    {", "pageBuilder . nextBlockBuilder (  )  . appendNull (  )  ;", "}", ". writeArray ( pageBuilder . nextBlockBuilder (  )  ,    sortColumnNames . values (  )  )  ;", "Optional < String >    distributionName    =    tableRow . getDistributionName (  )  ;", "if    ( distributionName . isPresent (  )  )     {", "VARCHAR . writeSlice ( pageBuilder . nextBlockBuilder (  )  ,    Slices . utf 8 Slice ( distributionName . get (  )  )  )  ;", "} else    {", "pageBuilder . nextBlockBuilder (  )  . appendNull (  )  ;", "}", "OptionalInt   bucketCount    =    tableRow . getBucketCount (  )  ;", "if    ( bucketCount . isPresent (  )  )     {", "BIGINT . writeLong ( pageBuilder . nextBlockBuilder (  )  ,    bucketCount . getAsInt (  )  )  ;", "} else    {", "pageBuilder . nextBlockBuilder (  )  . appendNull (  )  ;", "}", ". writeArray ( pageBuilder . nextBlockBuilder (  )  ,    bucketColumnNames . values (  )  )  ;", "BOOLEAN . writeBoolean ( pageBuilder . nextBlockBuilder (  )  ,    tableRow . isOrganized (  )  )  ;", "}", "return   pageBuilder . build (  )  ;", "}", "METHOD_END"], "methodName": ["buildPages"], "fileName": "com.facebook.presto.raptor.systemtables.TableMetadataSystemTable"}, {"methodBody": ["METHOD_START", "{", "List < ColumnMetadata >    columns    =    tableMetadata . getColumns (  )  ;", "for    ( int   i    =     0  ;    i    <     ( columns . size (  )  )  ;    i +  +  )     {", "if    ( columns . get ( i )  . getName (  )  . equals ( columnName )  )     {", "return   i ;", "}", "}", "throw   new   IllegalArgumentException ( String . format (  \" Column    % s   not   found \"  ,    columnName )  )  ;", "}", "METHOD_END"], "methodName": ["getColumnIndex"], "fileName": "com.facebook.presto.raptor.systemtables.TableMetadataSystemTable"}, {"methodBody": ["METHOD_START", "{", "if    (  ( value    =  =    null )     |  |     ( value . isNull (  )  )  )     {", "turn   null ;", "}", "turn    (  ( Slice )     ( value . getValue (  )  )  )  . toStringUtf 8  (  )  ;", "}", "METHOD_END"], "methodName": ["getStringValue"], "fileName": "com.facebook.presto.raptor.systemtables.TableMetadataSystemTable"}, {"methodBody": ["METHOD_START", "{", "if    ( values . isEmpty (  )  )     {", "blockBuilder . appendNull (  )  ;", "} else    {", "BlockBuilder   array    =    blockBuilder . beginBlockEntry (  )  ;", "for    ( String   value    :    values )     {", "VARCHAR . writeSlice ( array ,    Slices . utf 8 Slice ( value )  )  ;", "}", "blockBuilder . closeEntry (  )  ;", "}", "}", "METHOD_END"], "methodName": ["writeArray"], "fileName": "com.facebook.presto.raptor.systemtables.TableMetadataSystemTable"}, {"methodBody": ["METHOD_START", "{", "Map < Integer ,    NullableValue >    domainValues    =    extractFixedValues ( tupleDomain )  . orElse ( ImmutableMap . of (  )  )  ;", "String   schemaName    =    TableMetadataSystemTable . getStringValue ( domainValues . get ( TableMetadataSystemTable . getColumnIndex (  . METADATA ,     . SCHEMA _ NAME )  )  )  ;", "String   tableName    =    TableMetadataSystemTable . getStringValue ( domainValues . get ( TableMetadataSystemTable . getColumnIndex (  . METADATA ,     . TABLE _ NAME )  )  )  ;", "PageListBuilder   pageBuilder    =    new   PageListBuilder (  . METADATA . getColumns (  )  . stream (  )  . map ( ColumnMetadata :  : getType )  . collect ( Collectors . toList (  )  )  )  ;", "for    ( TableStatsRow   row    :    dao . getTableStatsRows ( schemaName ,    tableName )  )     {", "pageBuilder . beginRow (  )  ;", "VARCHAR . writeSlice ( pageBuilder . nextBlockBuilder (  )  ,    Slices . utf 8 Slice ( row . getSchemaName (  )  )  )  ;", "VARCHAR . writeSlice ( pageBuilder . nextBlockBuilder (  )  ,    Slices . utf 8 Slice ( row . getTableName (  )  )  )  ;", "TIMESTAMP . writeLong ( pageBuilder . nextBlockBuilder (  )  ,    row . getCreateTime (  )  )  ;", "TIMESTAMP . writeLong ( pageBuilder . nextBlockBuilder (  )  ,    row . getUpdateTime (  )  )  ;", "BIGINT . writeLong ( pageBuilder . nextBlockBuilder (  )  ,    row . getTableVersion (  )  )  ;", "BIGINT . writeLong ( pageBuilder . nextBlockBuilder (  )  ,    row . getShardCount (  )  )  ;", "BIGINT . writeLong ( pageBuilder . nextBlockBuilder (  )  ,    row . getRowCount (  )  )  ;", "BIGINT . writeLong ( pageBuilder . nextBlockBuilder (  )  ,    row . getCompressedSize (  )  )  ;", "BIGINT . writeLong ( pageBuilder . nextBlockBuilder (  )  ,    row . getUncompressedSize (  )  )  ;", "}", "return   pageBuilder . build (  )  ;", "}", "METHOD_END"], "methodName": ["buildPages"], "fileName": "com.facebook.presto.raptor.systemtables.TableStatsSystemTable"}, {"methodBody": ["METHOD_START", "{", "List < Type >    types    =    columns . stream (  )  . map ( ColumnMetadata :  : getType )  . collect ( Collectors . toList (  )  )  ;", "ImmutableList . Builder < MaterializedRow >    rowBuilder    =    ImmutableList . builder (  )  ;", "for    ( int   i    =     0  ;    i    <     ( types . size (  )  )  ;    i +  +  )     {", "assertEquals ( cursor . getType ( i )  ,    types . get ( i )  )  ;", "}", "while    ( cursor . advanceNextPosition (  )  )     {", "List < Object >    values    =    new   ArrayList <  >  (  )  ;", "for    ( int   i    =     0  ;    i    <     ( columns . size (  )  )  ;    i +  +  )     {", "Type   type    =    columns . get ( i )  . getType (  )  ;", "Class <  ?  >    javaType    =    type . getJavaType (  )  ;", "if    ( cursor . isNull ( i )  )     {", "values . add ( null )  ;", "} else", "if    ( javaType    =  =     ( boolean . class )  )     {", "values . add ( cursor . getBoolean ( i )  )  ;", "} else", "if    ( javaType    =  =     ( long . class )  )     {", "values . add ( cursor . getLong ( i )  )  ;", "} else", "if    ( javaType    =  =     ( double . class )  )     {", "values . add ( cursor . getDouble ( i )  )  ;", "} else", "if    ( javaType    =  =     ( io . airlift . slice . Slice . class )  )     {", "values . add ( cursor . getSlice ( i )  )  ;", "}", "}", "rowBuilder . add ( new   MaterializedRow ( DEFAULT _ PRECISION ,    values )  )  ;", "}", "return   rowBuilder . build (  )  ;", "}", "METHOD_END"], "methodName": ["getMaterializedResults"], "fileName": "com.facebook.presto.raptor.systemtables.TestShardMetadataRecordCursor"}, {"methodBody": ["METHOD_START", "{", "this . dbi    =    new   DBI (  (  \" jdbc : h 2  : mem : test \"     +     ( System . nanoTime (  )  )  )  )  ;", "this . dbi . registerMapper ( new   TableColumn . Mapper ( new   TypeRegistry (  )  )  )  ;", "this . dummyHandle    =    dbi . open (  )  ;", "SchemaDaoUtil . createTablesWithRetry ( dbi )  ;", "this . metadata    =    new   RaptorMetadata (  \" raptor \"  ,    dbi ,    TestDatabaseShardManager . createShardManager ( dbi )  )  ;", "metadata . createTable ( SESSION ,    tableMetadataBuilder (  . DEFAULT _ TEST _ ORDERS )  . column (  \" orderkey \"  ,    BIGINT )  . column (  \" orderdate \"  ,    DATE )  . property (  \" temporal _ column \"  ,     \" orderdate \"  )  . build (  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.raptor.systemtables.TestShardMetadataRecordCursor"}, {"methodBody": ["METHOD_START", "{", "dummyHandle . close (  )  ;", "}", "METHOD_END"], "methodName": ["teardown"], "fileName": "com.facebook.presto.raptor.systemtables.TestShardMetadataRecordCursor"}, {"methodBody": ["METHOD_START", "{", "metadata . createTable ( SESSION ,    tableMetadataBuilder ( new   SchemaTableName (  \" other \"  ,     \" orders \"  )  )  . column (  \" orderkey \"  ,    BIGINT )  . build (  )  ,    false )  ;", "metadata . createTable ( SESSION ,    tableMetadataBuilder ( new   SchemaTableName (  \" schema 1  \"  ,     \" foo \"  )  )  . column (  \" orderkey \"  ,    BIGINT )  . build (  )  ,    false )  ;", "TupleDomain < Integer >    tupleDomain    =    TupleDomain . withColumnDomains ( ImmutableMap .  < Integer ,    Domain > builder (  )  . put (  1  ,    Domain . singleValue ( createVarcharType (  1  0  )  ,    Slices . utf 8 Slice (  \" orders \"  )  )  )  . build (  )  )  ;", "MetadataDao   metadataDao    =    dummyHandle . attach ( MetadataDao . class )  ;", "Set < Long >    actual    =    ImmutableSet . copyOf (  . getTableIds ( dbi ,    tupleDomain )  )  ;", "Set < Long >    expected    =    ImmutableSet . of ( metadataDao . getTableInformation (  \" other \"  ,     \" orders \"  )  . getTableId (  )  ,    metadataDao . getTableInformation (  \" test \"  ,     \" orders \"  )  . getTableId (  )  )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testNoSchemaFilter"], "fileName": "com.facebook.presto.raptor.systemtables.TestShardMetadataRecordCursor"}, {"methodBody": ["METHOD_START", "{", "metadata . createTable ( SESSION ,    tableMetadataBuilder ( new   SchemaTableName (  \" test \"  ,     \" orders 2  \"  )  )  . column (  \" orderkey \"  ,    BIGINT )  . build (  )  ,    false )  ;", "metadata . createTable ( SESSION ,    tableMetadataBuilder ( new   SchemaTableName (  \" schema 1  \"  ,     \" foo \"  )  )  . column (  \" orderkey \"  ,    BIGINT )  . build (  )  ,    false )  ;", "TupleDomain < Integer >    tupleDomain    =    TupleDomain . withColumnDomains ( ImmutableMap .  < Integer ,    Domain > builder (  )  . put (  0  ,    Domain . singleValue ( createVarcharType (  1  0  )  ,    Slices . utf 8 Slice (  \" test \"  )  )  )  . build (  )  )  ;", "MetadataDao   metadataDao    =    dummyHandle . attach ( MetadataDao . class )  ;", "Set < Long >    actual    =    ImmutableSet . copyOf (  . getTableIds ( dbi ,    tupleDomain )  )  ;", "Set < Long >    expected    =    ImmutableSet . of ( metadataDao . getTableInformation (  \" test \"  ,     \" orders \"  )  . getTableId (  )  ,    metadataDao . getTableInformation (  \" test \"  ,     \" orders 2  \"  )  . getTableId (  )  )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testNoTableFilter"], "fileName": "com.facebook.presto.raptor.systemtables.TestShardMetadataRecordCursor"}, {"methodBody": ["METHOD_START", "{", "ShardManager   shardManager    =    TestDatabaseShardManager . createShardManager ( dbi )  ;", "long   tableId    =     1  ;", "OptionalInt   bucketNumber    =    OptionalInt . empty (  )  ;", "UUID   uuid 1     =    UUID . randomUUID (  )  ;", "UUID   uuid 2     =    UUID . randomUUID (  )  ;", "UUID   uuid 3     =    UUID . randomUUID (  )  ;", "ShardInfo   shardInfo 1     =    new   ShardInfo ( uuid 1  ,    bucketNumber ,    ImmutableSet . of (  \" node 1  \"  )  ,    ImmutableList . of (  )  ,     1  ,     1  0  ,     1  0  0  ,     4  6  6  0  )  ;", "ShardInfo   shardInfo 2     =    new   ShardInfo ( uuid 2  ,    bucketNumber ,    ImmutableSet . of (  \" node 2  \"  )  ,    ImmutableList . of (  )  ,     2  ,     2  0  ,     2  0  0  ,     -  3  8  1  9  4  1  0  1  0  5  0  2  1  1  2  0  7  8  5 L )  ;", "ShardInfo   shardInfo 3     =    new   ShardInfo ( uuid 3  ,    bucketNumber ,    ImmutableSet . of (  \" node 3  \"  )  ,    ImmutableList . of (  )  ,     3  ,     3  0  ,     3  0  0  ,     -  8  1  9  8  6  1  4  3  1  1  0  4  7  9  0  7  1 L )  ;", "List < ShardInfo >    shards    =    ImmutableList . of ( shardInfo 1  ,    shardInfo 2  ,    shardInfo 3  )  ;", "long   transactionId    =    shardManager . beginTransaction (  )  ;", "shardManager . commitShards ( transactionId ,    tableId ,    ImmutableList . of ( new   ColumnInfo (  1  ,    BIGINT )  ,    new   ColumnInfo (  2  ,    DATE )  )  ,    shards ,    Optional . empty (  )  ,     0  )  ;", "Slice   schema    =    Slices . utf 8 Slice (  . DEFAULT _ TEST _ ORDERS . getSchemaName (  )  )  ;", "Slice   table    =    Slices . utf 8 Slice (  . DEFAULT _ TEST _ ORDERS . getTableName (  )  )  ;", "DateTime   date 1     =    DateTime . parse (  \"  2  0  1  5  -  0  1  -  0  1 T 0  0  :  0  0  \"  )  ;", "DateTime   date 2     =    DateTime . parse (  \"  2  0  1  5  -  0  1  -  0  2 T 0  0  :  0  0  \"  )  ;", "TupleDomain < Integer >    tupleDomain    =    TupleDomain . withColumnDomains ( ImmutableMap .  < Integer ,    Domain > builder (  )  . put (  0  ,    Domain . singleValue ( createVarcharType (  1  0  )  ,    schema )  )  . put (  1  ,    Domain . create ( ValueSet . ofRanges ( lessThanOrEqual ( createVarcharType (  1  0  )  ,    table )  )  ,    true )  )  . put (  8  ,    Domain . create ( ValueSet . ofRanges ( lessThanOrEqual ( BIGINT ,    date 1  . getMillis (  )  )  ,    greaterThan ( BIGINT ,    date 2  . getMillis (  )  )  )  ,    true )  )  . put (  9  ,    Domain . create ( ValueSet . ofRanges ( lessThanOrEqual ( BIGINT ,    date 1  . getMillis (  )  )  ,    greaterThan ( BIGINT ,    date 2  . getMillis (  )  )  )  ,    true )  )  . build (  )  )  ;", "List < MaterializedRow >    actual ;", "try    ( RecordCursor   cursor    =    new   ShardMetadataSystemTable ( dbi )  . cursor ( null ,    SESSION ,    tupleDomain )  )     {", "actual    =     . getMaterializedResults ( cursor ,    ShardMetadataRecordCursor . SHARD _ METADATA . getColumns (  )  )  ;", "}", "assertEquals ( actual . size (  )  ,     3  )  ;", "List < MaterializedRow >    expected    =    ImmutableList . of ( new   MaterializedRow ( DEFAULT _ PRECISION ,    schema ,    table ,    Slices . utf 8 Slice ( uuid 1  . toString (  )  )  ,    null ,     1  0  0 L ,     1  0 L ,     1 L ,    Slices . utf 8 Slice (  \"  0  0  0  0  0  0  0  0  0  0  0  0  1  2  3  4  \"  )  ,    null ,    null ,    null ,    null )  ,    new   MaterializedRow ( DEFAULT _ PRECISION ,    schema ,    table ,    Slices . utf 8 Slice ( uuid 2  . toString (  )  )  ,    null ,     2  0  0 L ,     2  0 L ,     2 L ,    Slices . utf 8 Slice (  \" cafebabedeadbeef \"  )  ,    null ,    null ,    null ,    null )  ,    new   MaterializedRow ( DEFAULT _ PRECISION ,    schema ,    table ,    Slices . utf 8 Slice ( uuid 3  . toString (  )  )  ,    null ,     3  0  0 L ,     3  0 L ,     3 L ,    Slices . utf 8 Slice (  \" fedcba 0  9  8  7  6  5  4  3  2  1  \"  )  ,    null ,    null ,    null ,    null )  )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testSimple"], "fileName": "com.facebook.presto.raptor.systemtables.TestShardMetadataRecordCursor"}, {"methodBody": ["METHOD_START", "{", "if    ( value    =  =    null )     {", "return   new    ( columnIndex ,    type ,    null )  ;", "}", "return   new    ( columnIndex ,    type ,     . normalizeValue ( type ,    value )  )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "com.facebook.presto.raptor.systemtables.ValueBuffer"}, {"methodBody": ["METHOD_START", "{", "checkState (  (  !  ( isNull (  )  )  )  )  ;", "checkArgument (  (  ( type . getJavaType (  )  )     =  =     ( boolean . class )  )  ,     \" Type    % s   cannot   be   read   as   boolean \"  ,    type )  ;", "return    (  ( Boolean )     ( v )  )  ;", "}", "METHOD_END"], "methodName": ["getBoolean"], "fileName": "com.facebook.presto.raptor.systemtables.ValueBuffer"}, {"methodBody": ["METHOD_START", "{", "return   columnIndex ;", "}", "METHOD_END"], "methodName": ["getColumnIndex"], "fileName": "com.facebook.presto.raptor.systemtables.ValueBuffer"}, {"methodBody": ["METHOD_START", "{", "checkState (  (  !  ( isNull (  )  )  )  )  ;", "checkArgument (  (  ( type . getJavaType (  )  )     =  =     ( double . class )  )  ,     \" Type    % s   cannot   be   read   as   double \"  ,    type )  ;", "return    (  ( Double )     ( v )  )  ;", "}", "METHOD_END"], "methodName": ["getDouble"], "fileName": "com.facebook.presto.raptor.systemtables.ValueBuffer"}, {"methodBody": ["METHOD_START", "{", "checkState (  (  !  ( isNull (  )  )  )  )  ;", "checkArgument (  (  ( type . getJavaType (  )  )     =  =     ( long . class )  )  ,     \" Type    % s   cannot   be   read   as   long \"  ,    type )  ;", "return    (  ( Long )     ( v )  )  ;", "}", "METHOD_END"], "methodName": ["getLong"], "fileName": "com.facebook.presto.raptor.systemtables.ValueBuffer"}, {"methodBody": ["METHOD_START", "{", "checkState (  (  !  ( isNull (  )  )  )  )  ;", "checkArgument (  (  ( type . getJavaType (  )  )     =  =     ( Slice . class )  )  ,     \" Type    % s   cannot   be   read   as   Slice \"  ,    type )  ;", "return    (  ( Slice )     ( v )  )  ;", "}", "METHOD_END"], "methodName": ["getSlice"], "fileName": "com.facebook.presto.raptor.systemtables.ValueBuffer"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.facebook.presto.raptor.systemtables.ValueBuffer"}, {"methodBody": ["METHOD_START", "{", "checkState (  (  !  ( isNull (  )  )  )  )  ;", "return   v ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "com.facebook.presto.raptor.systemtables.ValueBuffer"}, {"methodBody": ["METHOD_START", "{", "return    ( value )     =  =    null ;", "}", "METHOD_END"], "methodName": ["isNull"], "fileName": "com.facebook.presto.raptor.systemtables.ValueBuffer"}, {"methodBody": ["METHOD_START", "{", "if    ( value    =  =    null )     {", "return   value ;", "}", "Class <  ?  >    javaType    =    type . getJavaType (  )  ;", "if    ( isPrimitive (  )  )     {", "checkArgument ( Primitives . wrap ( javaType )  . isInstance ( value )  ,     \" Type    % s   incompatible   with    % s \"  ,    type ,    value )  ;", "return   value ;", "}", "if    ( javaType    =  =     ( Slice . class )  )     {", "if    ( value   instanceof   Slice )     {", "return   value ;", "}", "if    ( value   instanceof   String )     {", "return   Slices . utf 8 Slice (  (  ( String )     ( value )  )  )  ;", "}", "if    ( value   instanceof   byte [  ]  )     {", "return   Slices . wrapped (  (  ( byte [  ]  )     ( value )  )  )  ;", "}", "}", "throw   new   IllegalArgumentException ( String . format (  \" Type    % s   incompatible   with    % s \"  ,    type ,    value )  )  ;", "}", "METHOD_END"], "methodName": ["normalizeValue"], "fileName": "com.facebook.presto.raptor.systemtables.ValueBuffer"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < Integer >    list    =    ImmutableList . builder (  )  ;", "ByteBuffer   buffer    =    ByteBuffer . w ( bytes )  ;", "while    ( buffer . hasRemaining (  )  )     {", "list . add ( buffer . getInt (  )  )  ;", "}", "return   list . build (  )  ;", "}", "METHOD_END"], "methodName": ["intArrayFromBytes"], "fileName": "com.facebook.presto.raptor.util.ArrayUtil"}, {"methodBody": ["METHOD_START", "{", "ByteBuffer   buffer    =    ByteBuffer . allocate (  (  ( values . size (  )  )     *     ( Integer . BYTES )  )  )  ;", "for    ( int   value    :    values )     {", "buffer . putInt ( value )  ;", "}", "return   buffer . a (  )  ;", "}", "METHOD_END"], "methodName": ["intArrayToBytes"], "fileName": "com.facebook.presto.raptor.util.ArrayUtil"}, {"methodBody": ["METHOD_START", "{", "return   new   Closer <  >  ( delegate ,    cleaner )  ;", "}", "METHOD_END"], "methodName": ["closer"], "fileName": "com.facebook.presto.raptor.util.Closer"}, {"methodBody": ["METHOD_START", "{", "return   delegate ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "com.facebook.presto.raptor.util.Closer"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( current )     =  =    null )     &  &     ( iterator . hasNext (  )  )  )     {", "current    =    iterator . next (  )  ;", "}", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.raptor.util.ConcatPageSource"}, {"methodBody": ["METHOD_START", "{", "return   handle . attach ( type )  ;", "}", "METHOD_END"], "methodName": ["attach"], "fileName": "com.facebook.presto.raptor.util.DaoSupplier"}, {"methodBody": ["METHOD_START", "{", "return   dao ;", "}", "METHOD_END"], "methodName": ["onDemand"], "fileName": "com.facebook.presto.raptor.util.DaoSupplier"}, {"methodBody": ["METHOD_START", "{", "if    ( value . isPresent (  )  )     {", "statement . setInt ( index ,    value . getAsInt (  )  )  ;", "} else    {", "statement . setNull ( index ,    Types . INTEGER )  ;", "}", "}", "METHOD_END"], "methodName": ["bindOptionalInt"], "fileName": "com.facebook.presto.raptor.util.DatabaseUtil"}, {"methodBody": ["METHOD_START", "{", "DatabaseUtil . runTransaction ( dbi ,     (    handle ,    status )     -  >     {", "callback . accept ( handle . attach ( daoType )  )  ;", "return   null ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["daoTransaction"], "fileName": "com.facebook.presto.raptor.util.DatabaseUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( statement . isWrapperFor ( Statement . class )  )     {", "statement . unwrap ( Statement . class )  . enableStreamingResults (  )  ;", "}", "}", "METHOD_END"], "methodName": ["enableStreamingResults"], "fileName": "com.facebook.presto.raptor.util.DatabaseUtil"}, {"methodBody": ["METHOD_START", "{", "int   value    =    rs . getInt ( name )  ;", "turn   rs . wasNull (  )     ?    OptionalInt . empty (  )     :    OptionalInt . of ( value )  ;", "}", "METHOD_END"], "methodName": ["getOptionalInt"], "fileName": "com.facebook.presto.raptor.util.DatabaseUtil"}, {"methodBody": ["METHOD_START", "{", "long   value    =    rs . getLong ( name )  ;", "turn   rs . wasNull (  )     ?    OptionalLong . empty (  )     :    OptionalLong . of ( value )  ;", "}", "METHOD_END"], "methodName": ["getOptionalLong"], "fileName": "com.facebook.presto.raptor.util.DatabaseUtil"}, {"methodBody": ["METHOD_START", "{", "return    (    s )     -  >    Arrays . stream ( s )  . map ( StackTraceElement :  : getClassName )  . anyMatch (  (    t )     -  >    t . startsWith (  \" com . mysql . jdbc .  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["isMySQLException"], "fileName": "com.facebook.presto.raptor.util.DatabaseUtil"}, {"methodBody": ["METHOD_START", "{", "return   DatabaseUtil . sqlCodeStartsWith ( e ,     \"  4  2  \"  )  ;", "}", "METHOD_END"], "methodName": ["isSyntaxOrAccessError"], "fileName": "com.facebook.presto.raptor.util.DatabaseUtil"}, {"methodBody": ["METHOD_START", "{", "return   DatabaseUtil . mySqlErrorCodeMatches ( e ,    MysqlErrorNumbers . ER _ TRANS _ CACHE _ FULL )  ;", "}", "METHOD_END"], "methodName": ["isTransactionCacheFullError"], "fileName": "com.facebook.presto.raptor.util.DatabaseUtil"}, {"methodBody": ["METHOD_START", "{", "return   DatabaseUtil . metadataError ( cause ,     \" Failed   to   perform   metadata   operation \"  )  ;", "}", "METHOD_END"], "methodName": ["metadataError"], "fileName": "com.facebook.presto.raptor.util.DatabaseUtil"}, {"methodBody": ["METHOD_START", "{", "return   new   PrestoException ( RaptorErrorCode . RAPTOR _ METADATA _ ERROR ,    message ,    cause )  ;", "}", "METHOD_END"], "methodName": ["metadataError"], "fileName": "com.facebook.presto.raptor.util.DatabaseUtil"}, {"methodBody": ["METHOD_START", "{", "return   Throwables . getCausalChain ( e )  . stream (  )  . filter ( SQLException . class :  : isInstance )  . map ( SQLException . class :  : cast )  . filter (  (    t )     -  >     ( t . getErrorCode (  )  )     =  =    errorCode )  . map ( Throwable :  : getStackTrace )  . anyMatch ( DatabaseUtil . isMySQLException (  )  )  ;", "}", "METHOD_END"], "methodName": ["mySqlErrorCodeMatches"], "fileName": "com.facebook.presto.raptor.util.DatabaseUtil"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( dbi ,     \" dbi   is   null \"  )  ;", "return   newProxy ( daoType ,     (    proxy ,    method ,    args )     -  >     {", "try    ( Handle   handle    =    dbi . open (  )  )     {", "T   dao    =    handle . attach ( daoType )  ;", "return   method . invoke ( dao ,    args )  ;", "}    catch    (    e )     {", "throw   metadError ( e )  ;", "}    catch    (    e )     {", "throw   metadError ( e . getCause (  )  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["onDemandDao"], "fileName": "com.facebook.presto.raptor.util.DatabaseUtil"}, {"methodBody": ["METHOD_START", "{", "try    {", "task . run (  )  ;", "}    catch    ( RuntimeException   e )     {", "if    (  !  (  . sqlCodeStartsWith ( e ,     \"  2  3  \"  )  )  )     {", "throw   e ;", "}", "}", "}", "METHOD_END"], "methodName": ["runIgnoringConstraintViolation"], "fileName": "com.facebook.presto.raptor.util.DatabaseUtil"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   dbi . inTransaction ( callback )  ;", "}    catch    ( DBIException   e )     {", "if    (  ( e . getCause (  )  )     !  =    null )     {", "throwIfInstanceOf ( e . getCause (  )  ,    PrestoException . class )  ;", "}", "throw    . metadataError ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["runTransaction"], "fileName": "com.facebook.presto.raptor.util.DatabaseUtil"}, {"methodBody": ["METHOD_START", "{", "for    ( Throwable   throwable    :    Throwables . getCausalChain ( e )  )     {", "if    ( throwable   instanceof   SQLException )     {", "String   state    =     (  ( SQLException )     ( throwable )  )  . getSQLState (  )  ;", "if    (  ( state    !  =    null )     &  &     ( state . startsWith ( code )  )  )     {", "return   true ;", "}", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["sqlCodeStartsWith"], "fileName": "com.facebook.presto.raptor.util.DatabaseUtil"}, {"methodBody": ["METHOD_START", "{", "( value    =  =    null )     {", "throw   new   NullPointerException ( Stringormat (  \"  % s   is   null \"  ,    name )  )  ;", "}", "checkArgument ( value . equals ( value . toLowerCase ( Locale . ENGLISH )  )  ,     \"  % s   is   not   lowercase \"  ,    name )  ;", "return   value ;", "}", "METHOD_END"], "methodName": ["checkLowerCase"], "fileName": "com.facebook.presto.raptor.util.MetadataUtil"}, {"methodBody": ["METHOD_START", "{", "return   MetadataUtil . checkLowerCase ( schemaName ,     \" schemaName \"  )  ;", "}", "METHOD_END"], "methodName": ["checkSchemaName"], "fileName": "com.facebook.presto.raptor.util.MetadataUtil"}, {"methodBody": ["METHOD_START", "{", "return   MetadataUtil . checkLowerCase ( tableName ,     \" tableName \"  )  ;", "}", "METHOD_END"], "methodName": ["checkTableName"], "fileName": "com.facebook.presto.raptor.util.MetadataUtil"}, {"methodBody": ["METHOD_START", "{", "flushIfNecessary ( page . getPositionCount (  )  )  ;", "pages . add ( page )  ;", "usedMemoryBytes    +  =    page . getSizeInBytes (  )  ;", "rowCount    +  =    page . getPositionCount (  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.facebook.presto.raptor.util.PageBuffer"}, {"methodBody": ["METHOD_START", "{", "long [  ]    addresses    =    pageSorter . sort ( columnTypes ,    pages ,    sortFields ,    sortOrders ,    Math . toIntExact ( rowCount )  )  ;", "int [  ]    pageIndex    =    new   int [ addresses . length ]  ;", "int [  ]    positionIndex    =    new   int [ addresses . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( addresses . length )  ;    i +  +  )     {", "pageIndex [ i ]     =    pageSorter . decodeIndex ( addresses [ i ]  )  ;", "positionIndex [ i ]     =    pageSorter . decodePositionIndex ( addresses [ i ]  )  ;", "}", "storageSink . appends ( pages ,    pageIndex ,    positionIndex )  ;", "}", "METHOD_END"], "methodName": ["appendSorted"], "fileName": "com.facebook.presto.raptor.util.PageBuffer"}, {"methodBody": ["METHOD_START", "{", "return    (  ( usedMemoryBytes )     <     ( maxMemoryBytes )  )     &  &     (  (  ( rowCount )     +    rowsToAdd )     <     ( Integer . MAX _ VALUE )  )  ;", "}", "METHOD_END"], "methodName": ["canAddRows"], "fileName": "com.facebook.presto.raptor.util.PageBuffer"}, {"methodBody": ["METHOD_START", "{", "if    ( pages . isEmpty (  )  )     {", "return ;", "}", "if    ( sortFields . isEmpty (  )  )     {", "storageSink . appends ( pages )  ;", "} else    {", "appendSorted (  )  ;", "}", "storageSink . flush (  )  ;", "pages . clear (  )  ;", "rowCount    =     0  ;", "usedMemoryBytes    =     0  ;", "}", "METHOD_END"], "methodName": ["flush"], "fileName": "com.facebook.presto.raptor.util.PageBuffer"}, {"methodBody": ["METHOD_START", "{", "if    (  ( storagePageSink . isFull (  )  )     |  |     (  !  ( canAddRows ( rowsToAdd )  )  )  )     {", "flush (  )  ;", "}", "}", "METHOD_END"], "methodName": ["flushIfNecessary"], "fileName": "com.facebook.presto.raptor.util.PageBuffer"}, {"methodBody": ["METHOD_START", "{", "return   storagePageSink ;", "}", "METHOD_END"], "methodName": ["getStoragePageSink"], "fileName": "com.facebook.presto.raptor.util.PageBuffer"}, {"methodBody": ["METHOD_START", "{", "return   usedMemoryBytes ;", "}", "METHOD_END"], "methodName": ["getUsedMemoryBytes"], "fileName": "com.facebook.presto.raptor.util.PageBuffer"}, {"methodBody": ["METHOD_START", "{", "int   size    =    queueSize . incrementAndGet (  )  ;", "if    ( size    >     ( maxThreads )  )     {", "return ;", "}", "do    {", "try    {", "queue . poll (  )  . run (  )  ;", "}    catch    ( Throwable   e )     {", ". log . error ( e ,     \" Task   failed \"  )  ;", "}", "}    while    (  ( queueSize . getAndDecrement (  )  )     >     ( maxThreads )     )  ;", "}", "METHOD_END"], "methodName": ["executeOrMerge"], "fileName": "com.facebook.presto.raptor.util.PrioritizedFifoExecutor"}, {"methodBody": ["METHOD_START", "{", "PrioritizedFifoExecutor . FifoRunnableTask < T >    fifoTask    =    new   PrioritizedFifoExecutor . FifoRunnableTask <  >  ( task ,    sequenceNumber . incrementAndGet (  )  ,    taskComparator )  ;", "queue . add ( fifoTask )  ;", "executorService . submit ( triggerTask )  ;", "return   fifoTask ;", "}", "METHOD_END"], "methodName": ["submit"], "fileName": "com.facebook.presto.raptor.util.PrioritizedFifoExecutor"}, {"methodBody": ["METHOD_START", "{", "executor    =    Executors . newCachedThreadPool (  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.raptor.util.TestPrioritizedFifoExecutor"}, {"methodBody": ["METHOD_START", "{", "executor . shutdownNow (  )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.raptor.util.TestPrioritizedFifoExecutor"}, {"methodBody": ["METHOD_START", "{", "PrioritizedFifoExecutor < Runnable >    boundedExecutor    =    new   PrioritizedFifoExecutor <  >  ( executor ,    maxThreads ,    TestPrioritizedFifoExecutor . DUMMY _ COMPARATOR )  ;", "AtomicInteger   activeThreadCount    =    new   AtomicInteger (  )  ;", "CountDownLatch   startLatch    =    new   CountDownLatch (  1  )  ;", "CountDownLatch   completeLatch    =    new   CountDownLatch ( totalTasks )  ;", "AtomicBoolean   failed    =    new   AtomicBoolean (  )  ;", "for    ( int   i    =     0  ;    i    <    totalTasks ;    i +  +  )     {", "boundedExecutor . submit (  (  )     -  >     {", "try    {", "awaitUninterruptibly ( startLatch )  ;", "int   count    =    activeThreadCount . incrementAndGet (  )  ;", "if    (  ( count    <     1  )     |  |     ( count    >    maxThreads )  )     {", "failed . set ( true )  ;", "}", "activeThreadCount . decrementAndGet (  )  ;", "}    finally    {", "completeLatch . countDown (  )  ;", "}", "}  )  ;", "}", "startLatch . countDown (  )  ;", "awaitUninterruptibly ( completeLatch ,     1  ,    TimeUnit . MINUTES )  ;", "assertFalse ( failed . get (  )  )  ;", "}", "METHOD_END"], "methodName": ["testBound"], "fileName": "com.facebook.presto.raptor.util.TestPrioritizedFifoExecutor"}, {"methodBody": ["METHOD_START", "{", "PrioritizedFifoExecutor < Runnable >    executor    =    new   PrioritizedFifoExecutor <  >  ( this . executor ,     1  ,    TestPrioritizedFifoExecutor . DUMMY _ COMPARATOR )  ;", "int   totalTasks    =     1  0  0  0  0  0  ;", "AtomicInteger   counter    =    new   AtomicInteger (  )  ;", "CountDownLatch   startLatch    =    new   CountDownLatch (  1  )  ;", "CountDownLatch   completeLatch    =    new   CountDownLatch ( totalTasks )  ;", "List < Future <  ?  >  >    futures    =    new   ArrayList <  >  (  )  ;", "for    ( int   i    =     0  ;    i    <    totalTasks ;    i +  +  )     {", "int   taskNumber    =    i ;", "futures . add ( executor . submit (  (  )     -  >     {", "try    {", "awaitUninterruptibly ( startLatch ,     1  ,    TimeUnit . MINUTES )  ;", "assertFalse ( futures . get ( taskNumber )  . isDone (  )  )  ;", "int   initialCount    =    counter . get (  )  ;", "counter . set (  ( initialCount    +     1  )  )  ;", "}    finally    {", "completeLatch . countDown (  )  ;", "}", "}  )  )  ;", "}", "for    ( Future <  ?  >    future    :    futures )     {", "assertFalse ( future . isDone (  )  )  ;", "}", "startLatch . countDown (  )  ;", "awaitUninterruptibly ( completeLatch ,     1  ,    TimeUnit . MINUTES )  ;", "assertEquals ( counter . get (  )  ,    totalTasks )  ;", "futures . get (  (  ( futures . size (  )  )     -     1  )  )  . get (  1  ,    TimeUnit . MINUTES )  ;", "for    ( Future <  ?  >    future    :    futures )     {", "assertTrue ( future . isDone (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testCounter"], "fileName": "com.facebook.presto.raptor.util.TestPrioritizedFifoExecutor"}, {"methodBody": ["METHOD_START", "{", "testBound (  2  ,     1  0  0  0  0  0  )  ;", "}", "METHOD_END"], "methodName": ["testDoubleThreadBound"], "fileName": "com.facebook.presto.raptor.util.TestPrioritizedFifoExecutor"}, {"methodBody": ["METHOD_START", "{", "testBound (  1  ,     1  0  0  0  0  0  )  ;", "}", "METHOD_END"], "methodName": ["testSingleThreadBound"], "fileName": "com.facebook.presto.raptor.util.TestPrioritizedFifoExecutor"}, {"methodBody": ["METHOD_START", "{", "return   type . getTypeSignature (  )  . getBase (  )  . equals ( ARRAY )  ;", "}", "METHOD_END"], "methodName": ["isArrayType"], "fileName": "com.facebook.presto.raptor.util.Types"}, {"methodBody": ["METHOD_START", "{", "return   type . getTypeSignature (  )  . getBase (  )  . equals ( MAP )  ;", "}", "METHOD_END"], "methodName": ["isMapType"], "fileName": "com.facebook.presto.raptor.util.Types"}, {"methodBody": ["METHOD_START", "{", "ByteBuffer   buffer    =    ByteBuffer . wrap ( bytes )  ;", "long   msb    =    buffer . getLong (  )  ;", "long   lsb    =    buffer . getLong (  )  ;", "return   new   UUID ( msb ,    lsb )  ;", "}", "METHOD_END"], "methodName": ["uuidFromBytes"], "fileName": "com.facebook.presto.raptor.util.UuidUtil"}, {"methodBody": ["METHOD_START", "{", "UUID   uuid    =    UUID . fromString ( uuidSlice . toStringUtf 8  (  )  )  ;", "byte [  ]    bytes    =     . uuidToBytes ( uuid )  ;", "return   Slices . wrappedBuffer ( bytes )  ;", "}", "METHOD_END"], "methodName": ["uuidStringToBytes"], "fileName": "com.facebook.presto.raptor.util.UuidUtil"}, {"methodBody": ["METHOD_START", "{", "return   ByteBuffer . allocate (  1  6  )  . putLong ( uuid . getMostSignificantBits (  )  )  . putLong ( uuid . getLeastSignificantBits (  )  )  . array (  )  ;", "}", "METHOD_END"], "methodName": ["uuidToBytes"], "fileName": "com.facebook.presto.raptor.util.UuidUtil"}]