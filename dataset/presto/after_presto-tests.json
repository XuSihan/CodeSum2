[{"methodBody": ["METHOD_START", "{", "BenchmarkInformationSchema . BenchmarkData   data    =    new   BenchmarkInformationSchema . BenchmarkData (  )  ;", "data . setup (  )  ;", "try    {", "new   BenchmarkInformationSchema (  )  . queryInformationSchema ( data )  ;", "}    finally    {", "data . tearDown (  )  ;", "}", "Options   options    =    new   OptionsBuilder (  )  . verbosity ( NORMAL )  . include (  (  (  \"  .  *  \"     +     ( BenchmarkInformationSchema . class . getSimpleName (  )  )  )     +     \"  .  *  \"  )  )  . build (  )  ;", "new   Runner ( options )  . run (  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.connector.informationschema.BenchmarkInformationSchema"}, {"methodBody": ["METHOD_START", "{", "return   benchmarkData . queryRunner . execute ( benchmarkData . query )  ;", "}", "METHOD_END"], "methodName": ["queryInformationSchema"], "fileName": "com.facebook.presto.connector.informationschema.BenchmarkInformationSchema"}, {"methodBody": ["METHOD_START", "{", "metadata . resetCounters (  )  ;", "computeActual ( q )  ;", "assertEquals ( metadata . begin . get (  )  ,     1  )  ;", "assertEquals ( metadata . end . get (  )  ,     1  )  ;", "metadata . resetCounters (  )  ;", "}", "METHOD_END"], "methodName": ["assertBeginQuery"], "fileName": "com.facebook.presto.execution.TestBeginQuery"}, {"methodBody": ["METHOD_START", "{", "metadata . resetCounters (  )  ;", "computeActual ( q )  ;", "assertEquals ( metadata . begin . get (  )  ,     0  )  ;", "assertEquals ( metadata . end . get (  )  ,     0  )  ;", "metadata . resetCounters (  )  ;", "}", "METHOD_END"], "methodName": ["assertNoBeginQuery"], "fileName": "com.facebook.presto.execution.TestBeginQuery"}, {"methodBody": ["METHOD_START", "{", "metadata . clear (  )  ;", "}", "METHOD_END"], "methodName": ["beforeMethod"], "fileName": "com.facebook.presto.execution.TestBeginQuery"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    testSessionBuilder (  )  . setCatalog (  \" test \"  )  . setSchema (  \" default \"  )  . build (  )  ;", "return   new   DistributedRunner ( session ,     1  )  ;", "}", "METHOD_END"], "methodName": ["createQueryRunner"], "fileName": "com.facebook.presto.execution.TestBeginQuery"}, {"methodBody": ["METHOD_START", "{", "metadata    =    new   TestBeginQuery . TestMetadata (  )  ;", "getQueryRunner (  )  . installPlugin ( new   TestBeginQuery . TestPlugin ( metadata )  )  ;", "getQueryRunner (  )  . installPlugin ( new   TpchPlugin (  )  )  ;", "getQueryRunner (  )  . createCatalog (  \" test \"  ,     \" test \"  ,    ImmutableMap . of (  )  )  ;", "getQueryRunner (  )  . createCatalog (  \" tpch \"  ,     \" tpch \"  ,    ImmutableMap . of (  )  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.execution.TestBeginQuery"}, {"methodBody": ["METHOD_START", "{", "assertNoBeginQuery (  \" CREATE   TABLE   nation   AS   SELECT    *    FROM   tpch . tiny . nation \"  )  ;", "}", "METHOD_END"], "methodName": ["testCreateTableAsSelect"], "fileName": "com.facebook.presto.execution.TestBeginQuery"}, {"methodBody": ["METHOD_START", "{", "assertNoBeginQuery (  \" CREATE   TABLE   nation   AS   SELECT    *    FROM   tpch . tiny . nation \"  )  ;", "asser (  \" CREATE   TABLE   nation _ copy   AS   SELECT    *    FROM   nation \"  )  ;", "}", "METHOD_END"], "methodName": ["testCreateTableAsSelectSameConnector"], "fileName": "com.facebook.presto.execution.TestBeginQuery"}, {"methodBody": ["METHOD_START", "{", "assertNoBeginQuery (  \" CREATE   TABLE   nation   AS   SELECT    *    FROM   tpch . tiny . nation \"  )  ;", "asser (  \" INSERT   INTO   nation   SELECT    *    FROM   tpch . tiny . nation \"  )  ;", "asser (  \" INSERT   INTO   nation   VALUES    (  1  2  3  4  5  ,     ' name '  ,     5  4  3  2  1  ,     ' comment '  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testInsert"], "fileName": "com.facebook.presto.execution.TestBeginQuery"}, {"methodBody": ["METHOD_START", "{", "assertNoBeginQuery (  \" CREATE   TABLE   nation   AS   SELECT    *    FROM   tpch . tiny . nation \"  )  ;", "asser (  \" INSERT   INTO   nation   SELECT    *    FROM   nation \"  )  ;", "}", "METHOD_END"], "methodName": ["testInsertSelectSameConnector"], "fileName": "com.facebook.presto.execution.TestBeginQuery"}, {"methodBody": ["METHOD_START", "{", "assertNoBeginQuery (  \" CREATE   TABLE   nation   AS   SELECT    *    FROM   tpch . tiny . nation \"  )  ;", "asser (  \" SELECT    *    FROM   nation \"  )  ;", "}", "METHOD_END"], "methodName": ["testSelect"], "fileName": "com.facebook.presto.execution.TestBeginQuery"}, {"methodBody": ["METHOD_START", "{", "return   this . getClass (  )  . getClassLoader (  )  . getResource ( fileName )  . getPath (  )  ;", "}", "METHOD_END"], "methodName": ["getResourceFilePath"], "fileName": "com.facebook.presto.execution.TestEventListener"}, {"methodBody": ["METHOD_START", "{", "generatedEvents . initialize ( numEventsExpected )  ;", "MaterializedResult   result    =    queryRunnere ( session ,    sql )  ;", "generatedEvents . waitForEvents (  1  0  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["runQueryAndWaitForEvents"], "fileName": "com.facebook.presto.execution.TestEventListener"}, {"methodBody": ["METHOD_START", "{", "session    =    testSessionBuilder (  )  . setSystemProperty (  \" task _ concurrency \"  ,     \"  1  \"  )  . setCatalog (  \" tpch \"  )  . setSchema (  \" tiny \"  )  . setClientInfo (  \"  {  \\  \" clientVersion \\  \"  :  \\  \" testVersion \\  \"  }  \"  )  . build (  )  ;", "queryRunner    =    new   DistributedQueryRunner ( session ,     1  )  ;", "queryRunner . installPlugin ( new   TpchPlugin (  )  )  ;", "queryRunner . installPlugin ( new   Plugin . TestingEventListenerPlugin ( generatedEvents )  )  ;", "queryRunner . installPlugin ( new   ResourceGroupManagerPlugin (  )  )  ;", "queryRunner . createCatalog (  \" tpch \"  ,     \" tpch \"  ,    ImmutableMap . of (  \" tpch . splits - per - node \"  ,    Integer . toString (  . SPLITS _ PER _ NODE )  )  )  ;", "queryRunner . getCoordinator (  )  . getResourceGroupManager (  )  . get (  )  . setConfigurationManager (  \" file \"  ,    ImmutableMap . of (  \" resource - groups . config - file \"  ,    getResourceFilePath (  \" resource _ groups _ config _ simple . json \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.execution.TestEventListener"}, {"methodBody": ["METHOD_START", "{", "queryRunner . close (  )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.execution.TestEventListener"}, {"methodBody": ["METHOD_START", "{", "runQueryAndWaitForEvents (  \" SELECT    1  \"  ,     3  )  ;", "QueryCreatedEvent   queryCreatedEvent    =    getOnlyElement ( generatedEvents . getQueryCreatedEvents (  )  )  ;", "assertEquals ( queryCreatedEvent . getContext (  )  . getServerVersion (  )  ,     \" testversion \"  )  ;", "assertEquals ( queryCreatedEvent . getContext (  )  . getServerAddress (  )  ,     \"  1  2  7  .  0  .  0  .  1  \"  )  ;", "assertEquals ( queryCreatedEvent . getContext (  )  . getEnvironment (  )  ,     \" testing \"  )  ;", "assertEquals ( queryCreatedEvent . getContext (  )  . getClientInfo (  )  . get (  )  ,     \"  {  \\  \" clientVersion \\  \"  :  \\  \" testVersion \\  \"  }  \"  )  ;", "assertEquals ( queryCreatedEvent . getMetadata (  )  . getQuery (  )  ,     \" SELECT    1  \"  )  ;", "QueryCompletedEvent   queryCompletedEvent    =    getOnlyElement ( generatedEvents . getQueryCompletedEvents (  )  )  ;", "assertTrue ( queryCompletedEvent . getContext (  )  . getResourceGroupName (  )  . isPresent (  )  )  ;", "assertEquals ( queryCompletedEvent . getContext (  )  . getResourceGroupName (  )  . get (  )  ,     \" global . user - user \"  )  ;", "assertEquals ( queryCompletedEvent . getStatistics (  )  . getTotalRows (  )  ,     0 L )  ;", "assertEquals ( queryCompletedEvent . getContext (  )  . getClientInfo (  )  . get (  )  ,     \"  {  \\  \" clientVersion \\  \"  :  \\  \" testVersion \\  \"  }  \"  )  ;", "assertEquals ( queryCreatedEvent . getMetadata (  )  . getQueryId (  )  ,    queryCompletedEvent . getMetadata (  )  . getQueryId (  )  )  ;", "List < SplitCompletedEvent >    splitCompletedEvents    =    generatedEvents . getSplitCompletedEvents (  )  ;", "assertEquals ( splitCompletedEvents . get (  0  )  . getQueryId (  )  ,    queryCompletedEvent . getMetadata (  )  . getQueryId (  )  )  ;", "assertEquals ( splitCompletedEvents . get (  0  )  . getStatistics (  )  . getCompletedPositions (  )  ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testConstantQuery"], "fileName": "com.facebook.presto.execution.TestEventListener"}, {"methodBody": ["METHOD_START", "{", "int   expectedEvents    =     (  (  (  1     +     1  )     +     ( TestEventListener . SPLITS _ PER _ NODE )  )     +     1  )     +     1  ;", "runQueryAndWaitForEvents (  \" SELECT   sum ( linenumber )    FROM   lineitem \"  ,    expectedEvents )  ;", "QueryCreatedEvent   queryCreatedEvent    =    getOnlyElement ( generatedEvents . getQueryCreatedEvents (  )  )  ;", "assertEquals ( queryCreatedEvent . getContext (  )  . getServerVersion (  )  ,     \" testversion \"  )  ;", "assertEquals ( queryCreatedEvent . getContext (  )  . getServerAddress (  )  ,     \"  1  2  7  .  0  .  0  .  1  \"  )  ;", "assertEquals ( queryCreatedEvent . getContext (  )  . getEnvironment (  )  ,     \" testing \"  )  ;", "assertEquals ( queryCreatedEvent . getContext (  )  . getClientInfo (  )  . get (  )  ,     \"  {  \\  \" clientVersion \\  \"  :  \\  \" testVersion \\  \"  }  \"  )  ;", "assertEquals ( queryCreatedEvent . getMetadata (  )  . getQuery (  )  ,     \" SELECT   sum ( linenumber )    FROM   lineitem \"  )  ;", "QueryCompletedEvent   queryCompletedEvent    =    getOnlyElement ( generatedEvents . getQueryCompletedEvents (  )  )  ;", "assertTrue ( queryCompletedEvent . getContext (  )  . getResourceGroupName (  )  . isPresent (  )  )  ;", "assertEquals ( queryCompletedEvent . getContext (  )  . getResourceGroupName (  )  . get (  )  ,     \" global . user - user \"  )  ;", "assertEquals ( queryCompletedEvent . getIoMetadata (  )  . getOutput (  )  ,    Optional . empty (  )  )  ;", "assertEquals ( queryCompletedEvent . getIoMetadata (  )  . getInputs (  )  . size (  )  ,     1  )  ;", "assertEquals ( queryCompletedEvent . getContext (  )  . getClientInfo (  )  . get (  )  ,     \"  {  \\  \" clientVersion \\  \"  :  \\  \" testVersion \\  \"  }  \"  )  ;", "assertEquals ( getOnlyElement ( queryCompletedEvent . getIoMetadata (  )  . getInputs (  )  )  . getConnectorId (  )  ,     \" tpch \"  )  ;", "assertEquals ( queryCreatedEvent . getMetadata (  )  . getQueryId (  )  ,    queryCompletedEvent . getMetadata (  )  . getQueryId (  )  )  ;", "assertEquals ( queryCompletedEvent . getStatistics (  )  . getCompletedSplits (  )  ,     (  ( TestEventListener . SPLITS _ PER _ NODE )     +     2  )  )  ;", "List < SplitCompletedEvent >    splitCompletedEvents    =    generatedEvents . getSplitCompletedEvents (  )  ;", "assertEquals ( splitCompletedEvents . size (  )  ,     (  ( TestEventListener . SPLITS _ PER _ NODE )     +     2  )  )  ;", "Set < String >    actual    =    splitCompletedEvents . stream (  )  . map ( SplitCompletedEvent :  : getQueryId )  . collect ( Collectors . toSet (  )  )  ;", "assertEquals ( actual ,    ImmutableSet . of ( queryCompletedEvent . getMetadata (  )  . getQueryId (  )  )  )  ;", "long   actualCompletedPositions    =    splitCompletedEvents . stream (  )  . filter (  (    e )     -  >     !  ( e . getStageId (  )  . endsWith (  \"  .  0  \"  )  )  )  . mapToLong (  (    e )     -  >    e . getStatistics (  )  . getCompletedPositions (  )  )  . sum (  )  ;", "MaterializedResult   result    =    runQueryAndWaitForEvents (  \" SELECT   count (  *  )    FROM   lineitem \"  ,    expectedEvents )  ;", "long   expectedCompletedPositions    =     (  ( long )     ( result . getMaterializedRows (  )  . get (  0  )  . getField (  0  )  )  )  ;", "assertEquals ( actualCompletedPositions ,    expectedCompletedPositions )  ;", "assertEquals ( queryCompletedEvent . getStatistics (  )  . getTotalRows (  )  ,    expectedCompletedPositions )  ;", "}", "METHOD_END"], "methodName": ["testNormalQuery"], "fileName": "com.facebook.presto.execution.TestEventListener"}, {"methodBody": ["METHOD_START", "{", "int   expectedEvents    =     (  (  (  1     +     1  )     +     ( TestEventListener . SPLITS _ PER _ NODE )  )     +     1  )     +     1  ;", "MaterializedResult   result    =    runQueryAndWaitForEvents (  \" SELECT    1    FROM   lineitem \"  ,    expectedEvents )  ;", "QueryCreatedEvent   queryCreatedEvent    =    getOnlyElement ( generatedEvents . getQueryCreatedEvents (  )  )  ;", "QueryCompletedEvent   queryCompletedEvent    =    getOnlyElement ( generatedEvents . getQueryCompletedEvents (  )  )  ;", "QueryStats   queryStats    =    queryRunner . getQueryInfo ( new   spi . QueryId ( queryCreatedEvent . getMetadata (  )  . getQueryId (  )  )  )  . getQueryStats (  )  ;", "assertTrue (  (  ( queryStats . getOutputDataSize (  )  . toBytes (  )  )     >     0 L )  )  ;", "assertTrue (  (  ( queryCompletedEvent . getStatistics (  )  . getOutputBytes (  )  )     >     0 L )  )  ;", "assertEquals ( result . getRowCount (  )  ,    queryStats . getOutputPositions (  )  )  ;", "assertEquals ( result . getRowCount (  )  ,    queryCompletedEvent . getStatistics (  )  . getOutputRows (  )  )  ;", "runQueryAndWaitForEvents (  \" SELECT   COUNT (  1  )    FROM   lineitem \"  ,    expectedEvents )  ;", "queryCreatedEvent    =    getOnlyElement ( generatedEvents . getQueryCreatedEvents (  )  )  ;", "queryCompletedEvent    =    getOnlyElement ( generatedEvents . getQueryCompletedEvents (  )  )  ;", "queryStats    =    queryRunner . getQueryInfo ( new   spi . QueryId ( queryCreatedEvent . getMetadata (  )  . getQueryId (  )  )  )  . getQueryStats (  )  ;", "assertTrue (  (  ( queryStats . getOutputDataSize (  )  . toBytes (  )  )     >     0 L )  )  ;", "assertTrue (  (  ( queryCompletedEvent . getStatistics (  )  . getOutputBytes (  )  )     >     0 L )  )  ;", "assertEquals (  1 L ,    queryStats . getOutputPositions (  )  )  ;", "assertEquals (  1 L ,    queryCompletedEvent . getStatistics (  )  . getOutputRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testOutputStats"], "fileName": "com.facebook.presto.execution.TestEventListener"}, {"methodBody": ["METHOD_START", "{", "queryRunner . getCoordinator (  )  . getQueryManager (  )  . cancelQuery ( queryId )  ;", "}", "METHOD_END"], "methodName": ["cancelQuery"], "fileName": "com.facebook.presto.execution.TestQueryRunnerUtil"}, {"methodBody": ["METHOD_START", "{", "return   queryRunner . getCoordinator (  )  . getQueryManager (  )  . createQuery ( new   TestingSessionContext ( session )  ,    sql )  . getQueryId (  )  ;", "}", "METHOD_END"], "methodName": ["createQuery"], "fileName": "com.facebook.presto.execution.TestQueryRunnerUtil"}, {"methodBody": ["METHOD_START", "{", "DistributedQueryRunner   queryRunner    =    DistributedQueryRunner . builder ( testSessionBuilder (  )  . build (  )  )  . setNodeCount (  2  )  . build (  )  ;", "try    {", "queryRunner . installPlugin ( new   TpchPlugin (  )  )  ;", "queryRunner . createCatalog (  \" tpch \"  ,     \" tpch \"  )  ;", "return   queryRunner ;", "}    catch    ( Exception   e )     {", "queryRunner . close (  )  ;", "throw   e ;", "}", "}", "METHOD_END"], "methodName": ["createQueryRunner"], "fileName": "com.facebook.presto.execution.TestQueryRunnerUtil"}, {"methodBody": ["METHOD_START", "{", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    queryId ,    ImmutableSet . of ( expectedQueryState )  )  ;", "}", "METHOD_END"], "methodName": ["waitForQueryState"], "fileName": "com.facebook.presto.execution.TestQueryRunnerUtil"}, {"methodBody": ["METHOD_START", "{", "QueryManager   queryManager    =    queryRunner . getCoordinator (  )  . getQueryManager (  )  ;", "do    {", "for    ( QueryInfo   queryInfo    :    queryManager . getAllQueryInfo (  )  )     {", "if    (  ( queryInfo . getState (  )  )     =  =     ( QueryState . RUNNING )  )     {", "queryManager . recordHeartbeat ( queryInfo . getQueryId (  )  )  ;", "}", "}", "TimeUnit . MILLISECONDS . sleep (  5  0  0  )  ;", "}    while    (  !  ( expectedQueryStates . contains ( queryManager . getQueryInfo ( queryId )  . getState (  )  )  )     )  ;", "}", "METHOD_END"], "methodName": ["waitForQueryState"], "fileName": "com.facebook.presto.execution.TestQueryRunnerUtil"}, {"methodBody": ["METHOD_START", "{", "QueryId   queryId    =    TestQueryRunnerUtil . createQuery ( queryRunner ,    session ,    query )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    queryId ,    ImmutableSet . of ( QueryState . RUNNING ,    QueryState . FINISHED )  )  ;", "Optional < String >    resourceGroupName    =    queryRunner . getCoordinator (  )  . getQueryManager (  )  . getQueryInfo ( queryId )  . getResourceGroupName (  )  ;", "assertTrue ( resourceGroupName . isPresent (  )  ,     \" Query   should   have   a   resource   group \"  )  ;", "assertEquals ( resourceGroupName . get (  )  . toString (  )  ,    expectedResourceGroup ,    String . format (  \" Expected :     '  % s '    resource   group ,    found :     % s \"  ,    expectedResourceGroup ,    resourceGroupName . get (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["assertResourceGroup"], "fileName": "com.facebook.presto.execution.TestQueues"}, {"methodBody": ["METHOD_START", "{", "return   TestQueryRunnerUtil . createQuery ( queryRunner ,    TestQueues . newAdhocSession (  )  ,    TestQueues . LONG _ LASTING _ QUERY )  ;", "}", "METHOD_END"], "methodName": ["createAdHocQuery"], "fileName": "com.facebook.presto.execution.TestQueues"}, {"methodBody": ["METHOD_START", "{", "return   TestQueryRunnerUtil . createQuery ( queryRunner ,    TestQueues . newSession (  \" backfill \"  ,    ImmutableSet . of (  )  )  ,    TestQueues . LONG _ LASTING _ QUERY )  ;", "}", "METHOD_END"], "methodName": ["createBackfill"], "fileName": "com.facebook.presto.execution.TestQueues"}, {"methodBody": ["METHOD_START", "{", "return   TestQueryRunnerUtil . createQuery ( queryRunner ,    TestQueues . newSession (  \" dashboard \"  ,    ImmutableSet . of (  )  )  ,    TestQueues . LONG _ LASTING _ QUERY )  ;", "}", "METHOD_END"], "methodName": ["createDashboardQuery"], "fileName": "com.facebook.presto.execution.TestQueues"}, {"methodBody": ["METHOD_START", "{", "return   TestQueryRunnerUtil . createQuery ( queryRunner ,    TestQueues . newSession (  \" scheduled \"  ,    ImmutableSet . of (  )  )  ,    TestQueues . LONG _ LASTING _ QUERY )  ;", "}", "METHOD_END"], "methodName": ["createScheduledQuery"], "fileName": "com.facebook.presto.execution.TestQueues"}, {"methodBody": ["METHOD_START", "{", "return   this . getClass (  )  . getClassLoader (  )  . getResource ( fileName )  . getPath (  )  ;", "}", "METHOD_END"], "methodName": ["getResourceFilePath"], "fileName": "com.facebook.presto.execution.TestQueues"}, {"methodBody": ["METHOD_START", "{", "return   TestQueues . newSession (  \" adhoc \"  ,    ImmutableSet . of (  )  )  ;", "}", "METHOD_END"], "methodName": ["newAdhocSession"], "fileName": "com.facebook.presto.execution.TestQueues"}, {"methodBody": ["METHOD_START", "{", "return   TestQueues . newSession (  \" reject \"  ,    ImmutableSet . of (  )  )  ;", "}", "METHOD_END"], "methodName": ["newRejectionSession"], "fileName": "com.facebook.presto.execution.TestQueues"}, {"methodBody": ["METHOD_START", "{", "return   testSessionBuilder (  )  . setCatalog (  \" tpch \"  )  . setSchema (  \" sf 1  0  0  0  0  0  \"  )  . setSource ( source )  . setClientTags ( clientTags )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["newSession"], "fileName": "com.facebook.presto.execution.TestQueues"}, {"methodBody": ["METHOD_START", "{", "return   TestQueues . newSession (  \" sessionWithTags \"  ,    clientTags )  ;", "}", "METHOD_END"], "methodName": ["newSessionWithTags"], "fileName": "com.facebook.presto.execution.TestQueues"}, {"methodBody": ["METHOD_START", "{", "try    ( DistributedQueryRunner   queryRunner    =    TestQueryRunnerUtil . createQueryRunner (  )  )     {", "queryRunner . installPlugin ( new   ResourceGroupManagerPlugin (  )  )  ;", "queryRunner . getCoordinator (  )  . getResourceGroupManager (  )  . get (  )  . setConfigurationManager (  \" file \"  ,    ImmutableMap . of (  \" resource - groups . config - file \"  ,    getResourceFilePath (  \" resource _ groups _ client _ tags _ based _ config . json \"  )  )  )  ;", "assertResourceGroup ( queryRunner ,     . newSessionWithTags ( ImmutableSet . of (  \" a \"  )  )  ,     . LONG _ LASTING _ QUERY ,     \" global . a . default \"  )  ;", "assertResourceGroup ( queryRunner ,     . newSessionWithTags ( ImmutableSet . of (  \" b \"  )  )  ,     . LONG _ LASTING _ QUERY ,     \" global . b \"  )  ;", "assertResourceGroup ( queryRunner ,     . newSessionWithTags ( ImmutableSet . of (  \" a \"  ,     \" c \"  )  )  ,     . LONG _ LASTING _ QUERY ,     \" global . a . c \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["testClientTagsBasedSelection"], "fileName": "com.facebook.presto.execution.TestQueues"}, {"methodBody": ["METHOD_START", "{", "try    ( DistributedQueryRunner   queryRunner    =    TestQueryRunnerUtil . createQueryRunner (  )  )     {", "queryRunner . installPlugin ( new   ResourceGroupManagerPlugin (  )  )  ;", "queryRunner . getCoordinator (  )  . getResourceGroupManager (  )  . get (  )  . setConfigurationManager (  \" file \"  ,    ImmutableMap . of (  \" resource - groups . config - file \"  ,    getResourceFilePath (  \" resource _ groups _ config _ soft _ limits . json \"  )  )  )  ;", "QueryId   scheduled 1     =    createScheduledQuery ( queryRunner )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    scheduled 1  ,    QueryState . RUNNING )  ;", "QueryId   scheduled 2     =    createScheduledQuery ( queryRunner )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    scheduled 2  ,    QueryState . RUNNING )  ;", "QueryId   scheduled 3     =    createScheduledQuery ( queryRunner )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    scheduled 3  ,    QueryState . RUNNING )  ;", "QueryId   backfill 1     =    createBackfill ( queryRunner )  ;", "QueryId   scheduled 4     =    createScheduledQuery ( queryRunner )  ;", "TestQueryRunnerUtil . cancelQuery ( queryRunner ,    scheduled 1  )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    backfill 1  ,    QueryState . RUNNING )  ;", "TestQueryRunnerUtil . cancelQuery ( queryRunner ,    scheduled 2  )  ;", "TestQueryRunnerUtil . cancelQuery ( queryRunner ,    scheduled 3  )  ;", "TestQueryRunnerUtil . cancelQuery ( queryRunner ,    scheduled 4  )  ;", "QueryId   backfill 2     =    createBackfill ( queryRunner )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    backfill 2  ,    QueryState . RUNNING )  ;", "QueryId   backfill 3     =    createBackfill ( queryRunner )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    backfill 3  ,    QueryState . RUNNING )  ;", "QueryId   backfill 4     =    createBackfill ( queryRunner )  ;", "QueryId   scheduled 5     =    createScheduledQuery ( queryRunner )  ;", "TestQueryRunnerUtil . cancelQuery ( queryRunner ,    backfill 1  )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    scheduled 5  ,    QueryState . RUNNING )  ;", "TestQueryRunnerUtil . cancelQuery ( queryRunner ,    backfill 2  )  ;", "TestQueryRunnerUtil . cancelQuery ( queryRunner ,    backfill 3  )  ;", "TestQueryRunnerUtil . cancelQuery ( queryRunner ,    backfill 4  )  ;", "TestQueryRunnerUtil . cancelQuery ( queryRunner ,    scheduled 5  )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    scheduled 5  ,    QueryState . FAILED )  ;", "}", "}", "METHOD_END"], "methodName": ["testExceedSoftLimits"], "fileName": "com.facebook.presto.execution.TestQueues"}, {"methodBody": ["METHOD_START", "{", "try    ( DistributedQueryRunner   queryRunner    =    TpchQueryRunnerBuilder . builder (  )  . build (  )  )     {", "queryRunner . installPlugin ( new   ResourceGroupManagerPlugin (  )  )  ;", "queryRunner . getCoordinator (  )  . getResourceGroupManager (  )  . get (  )  . setConfigurationManager (  \" file \"  ,    ImmutableMap . of (  \" resource - groups . config - file \"  ,    getResourceFilePath (  \" resource _ groups _ query _ type _ based _ config . json \"  )  )  )  ;", "assertResourceGroup ( queryRunner ,     . newAdhocSession (  )  ,     . LONG _ LASTING _ QUERY ,     \" global . select \"  )  ;", "assertResourceGroup ( queryRunner ,     . newAdhocSession (  )  ,     \" SHOW   TABLES \"  ,     \" global . describe \"  )  ;", "assertResourceGroup ( queryRunner ,     . newAdhocSession (  )  ,     (  \" EXPLAIN    \"     +     (  . LONG _ LASTING _ QUERY )  )  ,     \" global . explain \"  )  ;", "assertResourceGroup ( queryRunner ,     . newAdhocSession (  )  ,     \" DESCRIBE   lineitem \"  ,     \" global . describe \"  )  ;", "assertResourceGroup ( queryRunner ,     . newAdhocSession (  )  ,     (  \" RESET   SESSION    \"     +     ( SystemSessionProperties . HASH _ PARTITION _ COUNT )  )  ,     \" global . data _ definition \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["testQueryTypeBasedSelection"], "fileName": "com.facebook.presto.execution.TestQueues"}, {"methodBody": ["METHOD_START", "{", "try    ( DistributedQueryRunner   queryRunner    =    TestQueryRunnerUtil . createQueryRunner (  )  )     {", "queryRunner . installPlugin ( new   ResourceGroupManagerPlugin (  )  )  ;", "queryRunner . getCoordinator (  )  . getResourceGroupManager (  )  . get (  )  . setConfigurationManager (  \" file \"  ,    ImmutableMap . of (  \" resource - groups . config - file \"  ,    getResourceFilePath (  \" resource _ groups _ config _ dashboard . json \"  )  )  )  ;", "QueryId   queryId    =    TestQueryRunnerUtil . createQuery ( queryRunner ,     . newRejectionSession (  )  ,     . LONG _ LASTING _ QUERY )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    queryId ,    QueryState . FAILED )  ;", "QueryManager   queryManager    =    queryRunner . getCoordinator (  )  . getQueryManager (  )  ;", "assertEquals ( queryManager . getQueryInfo ( queryId )  . getErrorCode (  )  ,    QUERY _ REJECTED . toErrorCode (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testRejection"], "fileName": "com.facebook.presto.execution.TestQueues"}, {"methodBody": ["METHOD_START", "{", "try    ( DistributedQueryRunner   queryRunner    =    TestQueryRunnerUtil . createQueryRunner (  )  )     {", "queryRunner . installPlugin ( new   ResourceGroupManagerPlugin (  )  )  ;", "queryRunner . getCoordinator (  )  . getResourceGroupManager (  )  . get (  )  . setConfigurationManager (  \" file \"  ,    ImmutableMap . of (  \" resource - groups . config - file \"  ,    getResourceFilePath (  \" resource _ groups _ config _ dashboard . json \"  )  )  )  ;", "QueryId   firstDashboardQuery    =    createDashboardQuery ( queryRunner )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    firstDashboardQuery ,    QueryState . RUNNING )  ;", "QueryId   secondDashboardQuery    =    createDashboardQuery ( queryRunner )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    secondDashboardQuery ,    QueryState . QUEUED )  ;", "QueryId   firstNonDashboardQuery    =    createAdHocQuery ( queryRunner )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    firstNonDashboardQuery ,    QueryState . RUNNING )  ;", "QueryId   secondNonDashboardQuery    =    createAdHocQuery ( queryRunner )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    secondNonDashboardQuery ,    QueryState . RUNNING )  ;", "TestQueryRunnerUtil . cancelQuery ( queryRunner ,    firstDashboardQuery )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    firstDashboardQuery ,    QueryState . FAILED )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    secondDashboardQuery ,    QueryState . RUNNING )  ;", "}", "}", "METHOD_END"], "methodName": ["testResourceGroupManager"], "fileName": "com.facebook.presto.execution.TestQueues"}, {"methodBody": ["METHOD_START", "{", "testRejection (  )  ;", "}", "METHOD_END"], "methodName": ["testResourceGroupManagerRejection"], "fileName": "com.facebook.presto.execution.TestQueues"}, {"methodBody": ["METHOD_START", "{", "try    ( DistributedQueryRunner   queryRunner    =    TestQueryRunnerUtil . createQueryRunner (  )  )     {", "queryRunner . installPlugin ( new   ResourceGroupManagerPlugin (  )  )  ;", "queryRunner . getCoordinator (  )  . getResourceGroupManager (  )  . get (  )  . setConfigurationManager (  \" file \"  ,    ImmutableMap . of (  \" resource - groups . config - file \"  ,    getResourceFilePath (  \" resource _ groups _ config _ dashboard . json \"  )  )  )  ;", "QueryId   firstDashboardQuery    =    createDashboardQuery ( queryRunner )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    firstDashboardQuery ,    QueryState . RUNNING )  ;", "QueryId   secondDashboardQuery    =    createDashboardQuery ( queryRunner )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    secondDashboardQuery ,    QueryState . QUEUED )  ;", "QueryId   thirdDashboardQuery    =    createDashboardQuery ( queryRunner )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    thirdDashboardQuery ,    QueryState . FAILED )  ;", "}", "}", "METHOD_END"], "methodName": ["testResourceGroupManagerWithTooManyQueriesScheduled"], "fileName": "com.facebook.presto.execution.TestQueues"}, {"methodBody": ["METHOD_START", "{", "try    ( DistributedQueryRunner   queryRunner    =    TestQueryRunnerUtil . createQueryRunner (  )  )     {", "queryRunner . installPlugin ( new   ResourceGroupManagerPlugin (  )  )  ;", "queryRunner . getCoordinator (  )  . getResourceGroupManager (  )  . get (  )  . setConfigurationManager (  \" file \"  ,    ImmutableMap . of (  \" resource - groups . config - file \"  ,    getResourceFilePath (  \" resource _ groups _ config _ dashboard . json \"  )  )  )  ;", "QueryId   firstDashboardQuery    =    createDashboardQuery ( queryRunner )  ;", "QueryId   secondDashboardQuery    =    createDashboardQuery ( queryRunner )  ;", "ImmutableSet < QueryState >    queuedOrRunning    =    ImmutableSet . of ( QueryState . QUEUED ,    QueryState . RUNNING )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    firstDashboardQuery ,    queuedOrRunning )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    secondDashboardQuery ,    queuedOrRunning )  ;", "}", "}", "METHOD_END"], "methodName": ["testResourceGroupManagerWithTwoDashboardQueriesRequestedAtTheSameTime"], "fileName": "com.facebook.presto.execution.TestQueues"}, {"methodBody": ["METHOD_START", "{", "return   this . getClass (  )  . getClassLoader (  )  . getResource ( fileName )  . getPath (  )  ;", "}", "METHOD_END"], "methodName": ["getResourceFilePath"], "fileName": "com.facebook.presto.execution.resourceGroups.TestResourceGroupIntegration"}, {"methodBody": ["METHOD_START", "{", "return   queryRunner . getCoordinator (  )  . getResourceGroupManager (  )  . orElseThrow (  (  )     -  >    new   IllegalArgumentException (  \" no   resource   group   manager \"  )  )  ;", "}", "METHOD_END"], "methodName": ["getResourceGroupManager"], "fileName": "com.facebook.presto.execution.resourceGroups.TestResourceGroupIntegration"}, {"methodBody": ["METHOD_START", "{", "try    ( DistributedQueryRunner   queryRunner    =    TpchQueryRunnerBuilder . builder (  )  . build (  )  )     {", "queryRunner . installPlugin ( new   ResourceGroupManagerPlugin (  )  )  ;", ". getResourceGroupManager ( queryRunner )  . setConfigurationManager (  \" file \"  ,    ImmutableMap . of (  \" resource - groups . config - file \"  ,    getResourceFilePath (  \" resource _ groups _ memory _ percentage . json \"  )  )  )  ;", "queryRunner . execute (  \" SELECT   COUNT (  *  )  ,    clerk   FROM   orders   GROUP   BY   clerk \"  )  ;", ". waitForGlobalResourceGroup ( queryRunner )  ;", "}", "}", "METHOD_END"], "methodName": ["testMemoryFraction"], "fileName": "com.facebook.presto.execution.resourceGroups.TestResourceGroupIntegration"}, {"methodBody": ["METHOD_START", "{", "try    ( DistributedQueryRunner   queryRunner    =    TpchQueryRunnerBuilder . builder (  )  . build (  )  )     {", "queryRunner . installPlugin ( new   ResourceGroupManagerPlugin (  )  )  ;", "InternalResourceGroupManager <  ?  >    manager    =     . getResourceGroupManager ( queryRunner )  ;", "manager . setConfigurationManager (  \" file \"  ,    ImmutableMap . of (  \" resource - groups . config - file \"  ,    getResourceFilePath (  \" resource _ groups _ config _ dashboard . json \"  )  )  )  ;", "queryRunner . execute ( testSessionBuilder (  )  . setCatalog (  \" tpch \"  )  . setSchema (  \" tiny \"  )  . setSource (  \" dashboard - foo \"  )  . build (  )  ,     \" SELECT   COUNT (  *  )  ,    clerk   FROM   orders   GROUP   BY   clerk \"  )  ;", "List < ResourceGroupInfo >    path    =    manager . getPathToRoot ( new   ResourceGroupId ( new   ResourceGroupId ( new   ResourceGroupId (  \" global \"  )  ,     \" user - user \"  )  ,     \" dashboard - user \"  )  )  ;", "assertEquals ( path . size (  )  ,     3  )  ;", "assertTrue (  (  ( path . get (  1  )  . getSubGroups (  )  )     !  =    null )  )  ;", "assertEquals ( path . get (  2  )  . getId (  )  ,    new   ResourceGroupId (  \" global \"  )  )  ;", "assertEquals ( path . get (  2  )  . getHardConcurrencyLimit (  )  ,     1  0  0  )  ;", "assertEquals ( path . get (  2  )  . getRunningQueries (  )  ,    null )  ;", "}", "}", "METHOD_END"], "methodName": ["testPathToRoot"], "fileName": "com.facebook.presto.execution.resourceGroups.TestResourceGroupIntegration"}, {"methodBody": ["METHOD_START", "{", "long   startTime    =    System . nanoTime (  )  ;", "while    ( true )     {", "TimeUnit . SECONDS . sleep (  1  )  ;", "ResourceGroupInfo   global    =     . getResourceGroupManager ( queryRunner )  . getResourceGroupInfo ( new   ResourceGroupId (  \" global \"  )  )  ;", "if    (  ( global . getSoftMemoryLimit (  )  . toBytes (  )  )     >     0  )     {", "break ;", "}", "Assertions . assertLessThan ( nanosSince ( startTime )  . roundTo ( TimeUnit . SECONDS )  ,     6  0 L )  ;", "}", "}", "METHOD_END"], "methodName": ["waitForGlobalResourceGroup"], "fileName": "com.facebook.presto.execution.resourceGroups.TestResourceGroupIntegration"}, {"methodBody": ["METHOD_START", "{", "return   firstNonNull ( Thread . currentThread (  )  . getContextClassLoader (  )  ,    H 2 ResourceGroupManagerPlugin . class . getClassLoader (  )  )  ;", "}", "METHOD_END"], "methodName": ["getClassLoader"], "fileName": "com.facebook.presto.execution.resourceGroups.db.H2ResourceGroupManagerPlugin"}, {"methodBody": ["METHOD_START", "{", "return   context . getEnvironment (  )  ;", "}", "METHOD_END"], "methodName": ["getEnvironment"], "fileName": "com.facebook.presto.execution.resourceGroups.db.H2ResourceGroupsModule"}, {"methodBody": ["METHOD_START", "{", "return   testSessionBuilder (  )  . setCatalog (  \" tpch \"  )  . setSchema (  \" sf 1  0  0  0  0  0  \"  )  . setSource (  \" adhoc \"  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["adhocSession"], "fileName": "com.facebook.presto.execution.resourceGroups.db.H2TestUtil"}, {"methodBody": ["METHOD_START", "{", "return   H 2 TestUtil . createQueryRunner ( dbConfigUrl ,    dao ,    H 2 TestUtil . TEST _ ENVIRONMENT )  ;", "}", "METHOD_END"], "methodName": ["createQueryRunner"], "fileName": "com.facebook.presto.execution.resourceGroups.db.H2TestUtil"}, {"methodBody": ["METHOD_START", "{", "DistributedQueryRunner   queryRunner    =    DistributedQueryRunner . builder ( testSessionBuilder (  )  . setCatalog (  \" tpch \"  )  . setSchema (  \" tiny \"  )  . build (  )  )  . setNodeCount (  2  )  . setEnvironment ( environment )  . build (  )  ;", "try    {", "Plugin   h 2 RManagerPlugin    =    new   H 2 RManagerPlugin (  )  ;", "queryRunner . installPlugin ( h 2 RManagerPlugin )  ;", "queryRunner . getCoordinator (  )  . getRManager (  )  . get (  )  . setConfigurationManager ( H 2 TestUtil . CONFIGURATION _ MANAGER _ TYPE ,    ImmutableMap . of (  \" resource - groups . config - db - url \"  ,    dbConfigUrl ,     \" node . environment \"  ,    environment )  )  ;", "queryRunner . installPlugin ( new   TpchPlugin (  )  )  ;", "queryRunner . createCatalog (  \" tpch \"  ,     \" tpch \"  )  ;", "H 2 TestUtil . setup ( queryRunner ,    dao ,    environment )  ;", "return   queryRunner ;", "}    catch    ( Exception   e )     {", "queryRunner . close (  )  ;", "throw   e ;", "}", "}", "METHOD_END"], "methodName": ["createQueryRunner"], "fileName": "com.facebook.presto.execution.resourceGroups.db.H2TestUtil"}, {"methodBody": ["METHOD_START", "{", "return   testSessionBuilder (  )  . setCatalog (  \" tpch \"  )  . setSchema (  \" sf 1  0  0  0  0  0  \"  )  . setSource (  \" dashboard \"  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["dashboardSession"], "fileName": "com.facebook.presto.execution.resourceGroups.db.H2TestUtil"}, {"methodBody": ["METHOD_START", "{", "DbResourceGroupConfig   dbResourceGroupConfig    =    new   DbResourceGroupConfig (  )  . setConfigDbUrl ( url )  ;", "H 2 ResourceGroupsDao   dao    =    new   com . facebook . prestoDaoProvider ( dbResourceGroupConfig )  . get (  )  ;", "dao . createResourceGroupsTable (  )  ;", "dao . createSelectorsTable (  )  ;", "dao . createResourceGroupsGlobalPropertiesTable (  )  ;", "return   dao ;", "}", "METHOD_END"], "methodName": ["getDao"], "fileName": "com.facebook.presto.execution.resourceGroups.db.H2TestUtil"}, {"methodBody": ["METHOD_START", "{", "return    \" jdbc : h 2  : mem : test _  \"     +     ( Math . abs ( new   Random (  )  . nextLong (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getDbConfigUrl"], "fileName": "com.facebook.presto.execution.resourceGroups.db.H2TestUtil"}, {"methodBody": ["METHOD_START", "{", "try    {", "return    (  ( DbRConfigurationManager )     ( queryRunner . getCoordinator (  )  . getRManager (  )  . get (  )  . getConfigurationManager (  )  )  )  . getSelectors (  )  ;", "}    catch    ( PrestoException   e )     {", "if    (  ( e . getErrorCode (  )  )     =  =     ( CONFIGURATION _ INVALID . toErrorCode (  )  )  )     {", "return   ImmutableList . of (  )  ;", "}", "throw   e ;", "}", "}", "METHOD_END"], "methodName": ["getSelectors"], "fileName": "com.facebook.presto.execution.resourceGroups.db.H2TestUtil"}, {"methodBody": ["METHOD_START", "{", "String   dbConfigUrl    =    H 2 TestUtil . getDbConfigUrl (  )  ;", "H 2 RDao   dao    =    H 2 TestUtil . getDao ( dbConfigUrl )  ;", "return   H 2 TestUtil . createQueryRunner ( dbConfigUrl ,    dao )  ;", "}", "METHOD_END"], "methodName": ["getSimpleQueryRunner"], "fileName": "com.facebook.presto.execution.resourceGroups.db.H2TestUtil"}, {"methodBody": ["METHOD_START", "{", "return   testSessionBuilder (  )  . setCatalog (  \" tpch \"  )  . setSchema (  \" sf 1  0  0  0  0  0  \"  )  . setSource (  \" reject \"  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["rejectingSession"], "fileName": "com.facebook.presto.execution.resourceGroups.db.H2TestUtil"}, {"methodBody": ["METHOD_START", "{", "dao . insertResourceGroupsGlobalProperties (  \" cpu _ quota _ period \"  ,     \"  1 h \"  )  ;", "dao . insertResourceGroup (  1  ,     \" global \"  ,     \"  1 MB \"  ,     1  0  0  ,     1  0  0  0  ,     1  0  0  0  ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    H 2 TestUtil . TEST _ ENVIRONMENT )  ;", "dao . insertResourceGroup (  2  ,     \" bi -  $  { USER }  \"  ,     \"  1 MB \"  ,     3  ,     2  ,     2  ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,     1 L ,    H 2 TestUtil . TEST _ ENVIRONMENT )  ;", "dao . insertResourceGroup (  3  ,     \" user -  $  { USER }  \"  ,     \"  1 MB \"  ,     3  ,     3  ,     3  ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,     1 L ,    H 2 TestUtil . TEST _ ENVIRONMENT )  ;", "dao . insertResourceGroup (  4  ,     \" adhoc -  $  { USER }  \"  ,     \"  1 MB \"  ,     3  ,     3  ,     3  ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,     3 L ,    H 2 TestUtil . TEST _ ENVIRONMENT )  ;", "dao . insertResourceGroup (  5  ,     \" dashboard -  $  { USER }  \"  ,     \"  1 MB \"  ,     1  ,     1  ,     1  ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,     3 L ,    H 2 TestUtil . TEST _ ENVIRONMENT )  ;", "dao . insertResourceGroup (  6  ,     \" no - queueing \"  ,     \"  1 MB \"  ,     0  ,     1  ,     1  ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    H 2 TestUtil . TEST _ ENVIRONMENT _  2  )  ;", "dao . insertResourceGroup (  7  ,     \" explain \"  ,     \"  1 MB \"  ,     0  ,     1  ,     1  ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    H 2 TestUtil . TEST _ ENVIRONMENT )  ;", "dao . insertSelector (  2  ,     1  0  0  0  0  ,     \" user .  *  \"  ,     \" test \"  ,    null ,    null )  ;", "dao . insertSelector (  4  ,     1  0  0  0  ,     \" user .  *  \"  ,     \"  (  ? i )  .  * adhoc .  *  \"  ,    null ,    null )  ;", "dao . insertSelector (  5  ,     1  0  0  ,     \" user .  *  \"  ,     \"  (  ? i )  .  * dashboard .  *  \"  ,    null ,    null )  ;", "dao . insertSelector (  4  ,     1  0  ,     \" user .  *  \"  ,    null ,    null ,    H 2 TestUtil . CLIENT _ TAGS _ CODEC . toJson ( ImmutableList . of (  \" tag 1  \"  ,     \" tag 2  \"  )  )  )  ;", "dao . insertSelector (  2  ,     1  ,     \" user .  *  \"  ,    null ,    null ,    H 2 TestUtil . CLIENT _ TAGS _ CODEC . toJson ( ImmutableList . of (  \" tag 1  \"  )  )  )  ;", "dao . insertSelector (  6  ,     6  ,     \"  .  *  \"  ,     \"  .  *  \"  ,    null ,    null )  ;", "dao . insertSelector (  7  ,     1  0  0  0  0  0  ,    null ,    null ,    EXPLAIN . name (  )  ,    null )  ;", "int   expectedSelectors    =     6  ;", "if    ( environment . equals ( H 2 TestUtil . TEST _ ENVIRONMENT _  2  )  )     {", "expectedSelectors    =     1  ;", "}", "while    (  ( H 2 TestUtil . getSelectors ( queryRunner )  . size (  )  )     !  =    expectedSelectors )     {", "TimeUnit . MILLISECONDS . sleep (  5  0  0  )  ;", "}", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.execution.resourceGroups.db.H2TestUtil"}, {"methodBody": ["METHOD_START", "{", "H 2 TestUtil . waitForQueryCount ( queryRunner ,    QueryState . TERMINAL _ QUERY _ STATES ,    expectedCount )  ;", "}", "METHOD_END"], "methodName": ["waitForCompleteQueryCount"], "fileName": "com.facebook.presto.execution.resourceGroups.db.H2TestUtil"}, {"methodBody": ["METHOD_START", "{", "QueryManager   queryManager    =    queryRunner . getCoordinator (  )  . getQueryManager (  )  ;", "while    (  ( queryManager . getAllQueryInfo (  )  . stream (  )  . filter (  (    q )     -  >    countingStates . contains ( q . getState (  )  )  )  . count (  )  )     !  =    expectedCount )     {", "TimeUnit . MILLISECONDS . sleep (  5  0  0  )  ;", "}", "}", "METHOD_END"], "methodName": ["waitForQueryCount"], "fileName": "com.facebook.presto.execution.resourceGroups.db.H2TestUtil"}, {"methodBody": ["METHOD_START", "{", "H 2 TestUtil . waitForQueryCount ( queryRunner ,    ImmutableSet . of ( QueryState . RUNNING )  ,    expectedCount )  ;", "}", "METHOD_END"], "methodName": ["waitForRunningQueryCount"], "fileName": "com.facebook.presto.execution.resourceGroups.db.H2TestUtil"}, {"methodBody": ["METHOD_START", "{", "String   dbConfigUrl    =    H 2 TestUtil . getDbConfigUrl (  )  ;", "H 2 ResourceGroupsDao   dao    =    H 2 TestUtil . getDao ( dbConfigUrl )  ;", "try    ( DistributedQueryRunner   runner    =    H 2 TestUtil . createQueryRunner ( dbConfigUrl ,    dao ,    H 2 TestUtil . TEST _ ENVIRONMENT )  )     {", "QueryId   firstQuery    =    TestQueryRunnerUtil . createQuery ( runner ,    H 2 TestUtil . adhocSession (  )  ,     . LONG _ LASTING _ QUERY )  ;", "TestQueryRunnerUtil . waitForQueryState ( runner ,    firstQuery ,    QueryState . RUNNING )  ;", "QueryId   secondQuery    =    TestQueryRunnerUtil . createQuery ( runner ,    H 2 TestUtil . adhocSession (  )  ,     . LONG _ LASTING _ QUERY )  ;", "TestQueryRunnerUtil . waitForQueryState ( runner ,    secondQuery ,    QueryState . RUNNING )  ;", "}", "}", "METHOD_END"], "methodName": ["testEnvironment1"], "fileName": "com.facebook.presto.execution.resourceGroups.db.TestEnvironments"}, {"methodBody": ["METHOD_START", "{", "String   dbConfigUrl    =    H 2 TestUtil . getDbConfigUrl (  )  ;", "H 2 ResourceGroupsDao   dao    =    H 2 TestUtil . getDao ( dbConfigUrl )  ;", "try    ( DistributedQueryRunner   runner    =    H 2 TestUtil . createQueryRunner ( dbConfigUrl ,    dao ,    H 2 TestUtil . TEST _ ENVIRONMENT _  2  )  )     {", "QueryId   firstQuery    =    TestQueryRunnerUtil . createQuery ( runner ,    H 2 TestUtil . adhocSession (  )  ,     . LONG _ LASTING _ QUERY )  ;", "TestQueryRunnerUtil . waitForQueryState ( runner ,    firstQuery ,    QueryState . RUNNING )  ;", "QueryId   secondQuery    =    TestQueryRunnerUtil . createQuery ( runner ,    H 2 TestUtil . adhocSession (  )  ,     . LONG _ LASTING _ QUERY )  ;", "TestQueryRunnerUtil . waitForQueryState ( runner ,    secondQuery ,    QueryState . FAILED )  ;", "}", "}", "METHOD_END"], "methodName": ["testEnvironment2"], "fileName": "com.facebook.presto.execution.resourceGroups.db.TestEnvironments"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    testSessionBuilder (  )  . setCatalog (  \" tpch \"  )  . setSchema (  \" sf 1  0  0  0  0  0  \"  )  . setSource (  \" client _ tags \"  )  . setClientTags ( clientTags )  . build (  )  ;", "QueryId   queryId    =    TestQueryRunnerUtil . createQuery ( queryRunner ,    session ,    TestQueuesDb . LONG _ LASTING _ QUERY )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    queryId ,    ImmutableSet . of ( QueryState . RUNNING ,    QueryState . FINISHED )  )  ;", "Optional < String >    Name    =    queryRunner . getCoordinator (  )  . getQueryManager (  )  . getQueryInfo ( queryId )  . getResourceGroupName (  )  ;", "assertTrue ( Name . isPresent (  )  ,     \" Query   should   have   a   resource   group \"  )  ;", "assertEquals ( Name . get (  )  ,    expectedResourceGroup ,    String . format (  \" Expected :     '  % s '    resource   group ,    found :     % s \"  ,    expectedResourceGroup ,    Name . get (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["assertResourceGroupWithClientTags"], "fileName": "com.facebook.presto.execution.resourceGroups.db.TestQueuesDb"}, {"methodBody": ["METHOD_START", "{", "String   dbConfigUrl    =    H 2 TestUtil . getDbConfigUrl (  )  ;", "dao    =    H 2 TestUtil . getDao ( dbConfigUrl )  ;", "queryRunner    =    H 2 TestUtil . createQueryRunner ( dbConfigUrl ,    dao )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.execution.resourceGroups.db.TestQueuesDb"}, {"methodBody": ["METHOD_START", "{", "QueryManager   queryManager    =    queryRunner . getCoordinator (  )  . getQueryManager (  )  ;", "queryManager . getAllQueryInfo (  )  . forEach (  (    queryInfo )     -  >    queryManager . cancelQuery ( queryInfo . getQueryId (  )  )  )  ;", "queryRunner . close (  )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.execution.resourceGroups.db.TestQueuesDb"}, {"methodBody": ["METHOD_START", "{", "QueryId   firstDashboardQuery    =    TestQueryRunnerUtil . createQuery ( queryRunner ,    H 2 TestUtil . dashboardSession (  )  ,    TestQueuesDb . LONG _ LASTING _ QUERY )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    firstDashboardQuery ,    QueryState . RUNNING )  ;", "H 2 TestUtil . waitForRunningQueryCount ( queryRunner ,     1  )  ;", "QueryId   secondDashboardQuery    =    TestQueryRunnerUtil . createQuery ( queryRunner ,    H 2 TestUtil . dashboardSession (  )  ,    TestQueuesDb . LONG _ LASTING _ QUERY )  ;", "TimeUnit . MILLISECONDS . sleep (  2  0  0  0  )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    secondDashboardQuery ,    QueryState . QUEUED )  ;", "H 2 TestUtil . waitForRunningQueryCount ( queryRunner ,     1  )  ;", "dao . updateResourceGroup (  3  ,     \" user -  $  { USER }  \"  ,     \"  1 MB \"  ,     3  ,     4  ,     4  ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,     1 L ,    H 2 TestUtil . TEST _ ENVIRONMENT )  ;", "dao . updateResourceGroup (  5  ,     \" dashboard -  $  { USER }  \"  ,     \"  1 MB \"  ,     1  ,     2  ,     2  ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,     3 L ,    H 2 TestUtil . TEST _ ENVIRONMENT )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    secondDashboardQuery ,    QueryState . RUNNING )  ;", "QueryId   thirdDashboardQuery    =    TestQueryRunnerUtil . createQuery ( queryRunner ,    H 2 TestUtil . dashboardSession (  )  ,    TestQueuesDb . LONG _ LASTING _ QUERY )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    thirdDashboardQuery ,    QueryState . QUEUED )  ;", "H 2 TestUtil . waitForRunningQueryCount ( queryRunner ,     2  )  ;", "QueryId   firstNonDashboardQuery    =    TestQueryRunnerUtil . createQuery ( queryRunner ,    H 2 TestUtil . adhocSession (  )  ,    TestQueuesDb . LONG _ LASTING _ QUERY )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    firstNonDashboardQuery ,    QueryState . RUNNING )  ;", "H 2 TestUtil . waitForRunningQueryCount ( queryRunner ,     3  )  ;", "QueryId   secondNonDashboardQuery    =    TestQueryRunnerUtil . createQuery ( queryRunner ,    H 2 TestUtil . adhocSession (  )  ,    TestQueuesDb . LONG _ LASTING _ QUERY )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    secondNonDashboardQuery ,    QueryState . RUNNING )  ;", "H 2 TestUtil . waitForRunningQueryCount ( queryRunner ,     4  )  ;", "TestQueryRunnerUtil . cancelQuery ( queryRunner ,    firstDashboardQuery )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    firstDashboardQuery ,    QueryState . FAILED )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    thirdDashboardQuery ,    QueryState . RUNNING )  ;", "H 2 TestUtil . waitForRunningQueryCount ( queryRunner ,     4  )  ;", "H 2 TestUtil . waitForCompleteQueryCount ( queryRunner ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testBasic"], "fileName": "com.facebook.presto.execution.resourceGroups.db.TestQueuesDb"}, {"methodBody": ["METHOD_START", "{", "assertResourceGroupWithClientTags ( ImmutableSet . of (  \" tag 1  \"  )  ,     \" global . bi - user \"  )  ;", "assertResourceGroupWithClientTags ( ImmutableSet . of (  \" tag 1  \"  ,     \" tag 2  \"  )  ,     \" global . user - user . adhoc - user \"  )  ;", "}", "METHOD_END"], "methodName": ["testClientTagsBasedSelection"], "fileName": "com.facebook.presto.execution.resourceGroups.db.TestQueuesDb"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    testSessionBuilder (  )  . setCatalog (  \" tpch \"  )  . setSchema (  \" sf 1  0  0  0  0  0  \"  )  . setSource (  \" dashboard \"  )  . setSystemProperty ( SystemSessionProperties . QUERY _ MAX _ EXECUTION _ TIME ,     \"  1 ms \"  )  . build (  )  ;", "QueryManager   queryManager    =    queryRunner . getCoordinator (  )  . getQueryManager (  )  ;", "InternalRManager   manager    =    queryRunner . getCoordinator (  )  . getRManager (  )  . get (  )  ;", "DbRConfigurationManager   dbConfigurationManager    =     (  ( DbRConfigurationManager )     ( manager . getConfigurationManager (  )  )  )  ;", "QueryId   firstQuery    =    TestQueryRunnerUtil . createQuery ( queryRunner ,    session ,    TestQueuesDb . LONG _ LASTING _ QUERY )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    firstQuery ,    QueryState . FAILED )  ;", "assertEquals ( queryManager . getQueryInfo ( firstQuery )  . getErrorCode (  )  ,    EXCEEDED _ TIME _ LIMIT . toErrorCode (  )  )  ;", "Assertions . assertContains ( queryManager . getQueryInfo ( firstQuery )  . getFailureInfo (  )  . getMessage (  )  ,     \" Query   exceeded   the   maximum   execution   time   limit   of    1  .  0  0 ms \"  )  ;", "dao . updateR (  5  ,     \" dashboard -  $  { USER }  \"  ,     \"  1 MB \"  ,     1  ,    null ,     0  ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,     3 L ,    H 2 TestUtil . TEST _ ENVIRONMENT )  ;", "dbConfigurationManager . load (  )  ;", "QueryId   secondQuery    =    TestQueryRunnerUtil . createQuery ( queryRunner ,    session ,    TestQueuesDb . LONG _ LASTING _ QUERY )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    secondQuery ,    QueryState . QUEUED )  ;", "Thread . sleep (  5  0  0  0  )  ;", "assertEquals ( queryManager . getQueryInfo ( secondQuery )  . getState (  )  ,    QueryState . QUEUED )  ;", "dao . updateR (  5  ,     \" dashboard -  $  { USER }  \"  ,     \"  1 MB \"  ,     1  ,    null ,     1  ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,     3 L ,    H 2 TestUtil . TEST _ ENVIRONMENT )  ;", "dbConfigurationManager . load (  )  ;", "queryManager . cancelQuery ( firstQuery )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    secondQuery ,    QueryState . FAILED )  ;", "}", "METHOD_END"], "methodName": ["testQueryExecutionTimeLimit"], "fileName": "com.facebook.presto.execution.resourceGroups.db.TestQueuesDb"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    testSessionBuilder (  )  . setCatalog (  \" tpch \"  )  . setSchema (  \" sf 1  0  0  0  0  0  \"  )  . build (  )  ;", "QueryId   queryId    =    TestQueryRunnerUtil . createQuery ( queryRunner ,    session ,     (  \" EXPLAIN    \"     +     ( TestQueuesDb . LONG _ LASTING _ QUERY )  )  )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    queryId ,    ImmutableSet . of ( QueryState . RUNNING ,    QueryState . FINISHED )  )  ;", "Optional < String >    Name    =    queryRunner . getCoordinator (  )  . getQueryManager (  )  . getQueryInfo ( queryId )  . getResourceGroupName (  )  ;", "assertTrue ( Name . isPresent (  )  ,     \" Query   should   have   a   resource   group \"  )  ;", "assertEquals ( Name . get (  )  ,     \" explain \"  )  ;", "}", "METHOD_END"], "methodName": ["testQueryTypeBasedSelection"], "fileName": "com.facebook.presto.execution.resourceGroups.db.TestQueuesDb"}, {"methodBody": ["METHOD_START", "{", "dao . updateResourceGroup (  5  ,     \" dashboard -  $  { USER }  \"  ,     \"  1 MB \"  ,     1  ,     1  ,     1  ,    null ,    null ,    null ,    null ,    null ,     \"  5 s \"  ,    null ,     3 L ,    H 2 TestUtil . TEST _ ENVIRONMENT )  ;", "QueryId   firstDashboardQuery    =    TestQueryRunnerUtil . createQuery ( queryRunner ,    H 2 TestUtil . dashboardSession (  )  ,    TestQueuesDb . LONG _ LASTING _ QUERY )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    firstDashboardQuery ,    QueryState . RUNNING )  ;", "QueryId   secondDashboardQuery    =    TestQueryRunnerUtil . createQuery ( queryRunner ,    H 2 TestUtil . dashboardSession (  )  ,    TestQueuesDb . LONG _ LASTING _ QUERY )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    secondDashboardQuery ,    QueryState . QUEUED )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    secondDashboardQuery ,    QueryState . FAILED )  ;", "}", "METHOD_END"], "methodName": ["testQueuedTimeLimit"], "fileName": "com.facebook.presto.execution.resourceGroups.db.TestQueuesDb"}, {"methodBody": ["METHOD_START", "{", "InternalResourceGroupManager   manager    =    queryRunner . getCoordinator (  )  . getResourceGroupManager (  )  . get (  )  ;", "DbResourceGroupConfigurationManager   dbConfigurationManager    =     (  ( DbResourceGroupConfigurationManager )     ( manager . getConfigurationManager (  )  )  )  ;", "QueryId   queryId    =    TestQueryRunnerUtil . createQuery ( queryRunner ,    H 2 TestUtil . rejectingSession (  )  ,    TestQueuesDb . LONG _ LASTING _ QUERY )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    queryId ,    QueryState . FAILED )  ;", "QueryManager   queryManager    =    queryRunner . getCoordinator (  )  . getQueryManager (  )  ;", "assertEquals ( queryManager . getQueryInfo ( queryId )  . getErrorCode (  )  ,    QUERY _ REJECTED . toErrorCode (  )  )  ;", "int   selectorCount    =    H 2 TestUtil . getSelectors ( queryRunner )  . size (  )  ;", "dao . insertSelector (  4  ,     1  0  0  0  0  0  ,     \" user .  *  \"  ,     \"  (  ? i )  .  * reject .  *  \"  ,    null ,    null )  ;", "dbConfigurationManager . load (  )  ;", "assertEquals ( H 2 TestUtil . getSelectors ( queryRunner )  . size (  )  ,     ( selectorCount    +     1  )  )  ;", "queryId    =    TestQueryRunnerUtil . createQuery ( queryRunner ,    H 2 TestUtil . rejectingSession (  )  ,    TestQueuesDb . LONG _ LASTING _ QUERY )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    queryId ,    QueryState . RUNNING )  ;", "dao . deleteSelector (  4  ,     \" user .  *  \"  ,     \"  (  ? i )  .  * reject .  *  \"  ,    null )  ;", "dbConfigurationManager . load (  )  ;", "queryId    =    TestQueryRunnerUtil . createQuery ( queryRunner ,    H 2 TestUtil . rejectingSession (  )  ,    TestQueuesDb . LONG _ LASTING _ QUERY )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    queryId ,    QueryState . FAILED )  ;", "}", "METHOD_END"], "methodName": ["testRejection"], "fileName": "com.facebook.presto.execution.resourceGroups.db.TestQueuesDb"}, {"methodBody": ["METHOD_START", "{", "queryRunner . execute (  \" SELECT   COUNT (  *  )  ,    clerk   FROM   orders   GROUP   BY   clerk \"  )  ;", "while    ( true )     {", "RInfo   global    =    queryRunner . getCoordinator (  )  . getRManager (  )  . get (  )  . getRInfo ( new   RId ( new   RId (  \" global \"  )  ,     \" bi - user \"  )  )  ;", "if    (  ( global . getSoftMemoryLimit (  )  . toBytes (  )  )     >     0  )     {", "break ;", "}", "TimeUnit . SECONDS . sleep (  2  )  ;", "}", "}", "METHOD_END"], "methodName": ["testRunningQuery"], "fileName": "com.facebook.presto.execution.resourceGroups.db.TestQueuesDb"}, {"methodBody": ["METHOD_START", "{", "dao . updateResourceGroup (  5  ,     \" dashboard -  $  { USER }  \"  ,     \"  1 MB \"  ,     1  ,     1  ,     1  ,    null ,    null ,    null ,    null ,    null ,    null ,     \"  3 s \"  ,     3 L ,    H 2 TestUtil . TEST _ ENVIRONMENT )  ;", "QueryId   firstDashboardQuery    =    TestQueryRunnerUtil . createQuery ( queryRunner ,    H 2 TestUtil . dashboardSession (  )  ,    TestQueuesDb . LONG _ LASTING _ QUERY )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    firstDashboardQuery ,    QueryState . FAILED )  ;", "}", "METHOD_END"], "methodName": ["testRunningTimeLimit"], "fileName": "com.facebook.presto.execution.resourceGroups.db.TestQueuesDb"}, {"methodBody": ["METHOD_START", "{", "InternalResourceGroupManager   manager    =    queryRunner . getCoordinator (  )  . getResourceGroupManager (  )  . get (  )  ;", "QueryManager   queryManager    =    queryRunner . getCoordinator (  )  . getQueryManager (  )  ;", "DbResourceGroupConfigurationManager   dbConfigurationManager    =     (  ( DbResourceGroupConfigurationManager )     ( manager . getConfigurationManager (  )  )  )  ;", "QueryId   firstQuery    =    TestQueryRunnerUtil . createQuery ( queryRunner ,    H 2 TestUtil . dashboardSession (  )  ,    TestQueuesDb . LONG _ LASTING _ QUERY )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    firstQuery ,    QueryState . RUNNING )  ;", "Optional < String >        =    queryManager . getQueryInfo ( firstQuery )  . getResourceGroupName (  )  ;", "assertTrue (  . isPresent (  )  )  ;", "assertEquals (  . get (  )  ,     \" global . user - user . dashboard - user \"  )  ;", "dao . insertResourceGroup (  8  ,     \" reject - all - queries \"  ,     \"  1 MB \"  ,     0  ,     0  ,     0  ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,     3 L ,    H 2 TestUtil . TEST _ ENVIRONMENT )  ;", "dao . insertSelector (  8  ,     2  0  0  ,     \" user .  *  \"  ,     \"  (  ? i )  .  * dashboard .  *  \"  ,    null ,    null )  ;", "dbConfigurationManager . load (  )  ;", "QueryId   secondQuery    =    TestQueryRunnerUtil . createQuery ( queryRunner ,    H 2 TestUtil . dashboardSession (  )  ,    TestQueuesDb . LONG _ LASTING _ QUERY )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    secondQuery ,    QueryState . FAILED )  ;", "=    queryManager . getQueryInfo ( secondQuery )  . getResourceGroupName (  )  ;", "assertTrue (  . isPresent (  )  )  ;", "assertEquals (  . get (  )  ,     \" global . user - user . reject - all - queries \"  )  ;", "}", "METHOD_END"], "methodName": ["testSelectorPriority"], "fileName": "com.facebook.presto.execution.resourceGroups.db.TestQueuesDb"}, {"methodBody": ["METHOD_START", "{", "QueryId   firstDashboardQuery    =    TestQueryRunnerUtil . createQuery ( queryRunner ,    H 2 TestUtil . dashboardSession (  )  ,    TestQueuesDb . LONG _ LASTING _ QUERY )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    firstDashboardQuery ,    QueryState . RUNNING )  ;", "QueryId   secondDashboardQuery    =    TestQueryRunnerUtil . createQuery ( queryRunner ,    H 2 TestUtil . dashboardSession (  )  ,    TestQueuesDb . LONG _ LASTING _ QUERY )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    secondDashboardQuery ,    QueryState . QUEUED )  ;", "QueryId   thirdDashboardQuery    =    TestQueryRunnerUtil . createQuery ( queryRunner ,    H 2 TestUtil . dashboardSession (  )  ,    TestQueuesDb . LONG _ LASTING _ QUERY )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    thirdDashboardQuery ,    QueryState . FAILED )  ;", "dao . updateResourceGroup (  3  ,     \" user -  $  { USER }  \"  ,     \"  1 MB \"  ,     3  ,     4  ,     4  ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,     1 L ,    H 2 TestUtil . TEST _ ENVIRONMENT )  ;", "dao . updateResourceGroup (  5  ,     \" dashboard -  $  { USER }  \"  ,     \"  1 MB \"  ,     1  ,     2  ,     2  ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,     3 L ,    H 2 TestUtil . TEST _ ENVIRONMENT )  ;", "InternalResourceGroupManager   manager    =    queryRunner . getCoordinator (  )  . getResourceGroupManager (  )  . get (  )  ;", "DbResourceGroupConfigurationManager   dbConfigurationManager    =     (  ( DbResourceGroupConfigurationManager )     ( manager . getConfigurationManager (  )  )  )  ;", "dbConfigurationManager . load (  )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    secondDashboardQuery ,    QueryState . RUNNING )  ;", "thirdDashboardQuery    =    TestQueryRunnerUtil . createQuery ( queryRunner ,    H 2 TestUtil . dashboardSession (  )  ,    TestQueuesDb . LONG _ LASTING _ QUERY )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    thirdDashboardQuery ,    QueryState . QUEUED )  ;", "dao . updateResourceGroup (  5  ,     \" dashboard -  $  { USER }  \"  ,     \"  1 MB \"  ,     1  ,     1  ,     1  ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,     3 L ,    H 2 TestUtil . TEST _ ENVIRONMENT )  ;", "dbConfigurationManager . load (  )  ;", "TestQueryRunnerUtil . cancelQuery ( queryRunner ,    firstDashboardQuery )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    firstDashboardQuery ,    QueryState . FAILED )  ;", "TimeUnit . MILLISECONDS . sleep (  2  0  0  0  )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    thirdDashboardQuery ,    QueryState . QUEUED )  ;", "}", "METHOD_END"], "methodName": ["testTooManyQueries"], "fileName": "com.facebook.presto.execution.resourceGroups.db.TestQueuesDb"}, {"methodBody": ["METHOD_START", "{", "QueryId   firstDashboardQuery    =    TestQueryRunnerUtil . createQuery ( queryRunner ,    H 2 TestUtil . dashboardSession (  )  ,    TestQueuesDb . LONG _ LASTING _ QUERY )  ;", "QueryId   secondDashboardQuery    =    TestQueryRunnerUtil . createQuery ( queryRunner ,    H 2 TestUtil . dashboardSession (  )  ,    TestQueuesDb . LONG _ LASTING _ QUERY )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    firstDashboardQuery ,    QueryState . RUNNING )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    secondDashboardQuery ,    QueryState . QUEUED )  ;", "}", "METHOD_END"], "methodName": ["testTwoQueriesAtSameTime"], "fileName": "com.facebook.presto.execution.resourceGroups.db.TestQueuesDb"}, {"methodBody": ["METHOD_START", "{", "try    ( DistributedQueryRunner   queryRunner    =    H 2 TestUtil . getSimpleQueryRunner (  )  )     {", "queryRunner . execute (  \" SELECT   COUNT (  *  )  ,    clerk   FROM   orders   GROUP   BY   clerk \"  )  ;", "Integration . waitForGlobalResourceGroup ( queryRunner )  ;", "}", "}", "METHOD_END"], "methodName": ["testMemoryFraction"], "fileName": "com.facebook.presto.execution.resourceGroups.db.TestResourceGroupDbIntegration"}, {"methodBody": ["METHOD_START", "{", "boolean   allDriversBlocked    =    current . stream (  )  . flatMap (  (    query )     -  >    getAllStages ( query . getOutputStage (  )  )  . stream (  )  )  . flatMap (  (    stage )     -  >    stage . getTasks (  )  . stream (  )  )  . flatMap (  (    task )     -  >    task . getStats (  )  . getPipelines (  )  . stream (  )  )  . flatMap (  (    pipeline )     -  >    pipeline . getDrivers (  )  . stream (  )  )  . allMatch ( DriverStats :  : isFullyBlocked )  ;", "boolean   waitingForMemory    =    current . stream (  )  . allMatch (  :  : atLeastOneOperatorWaitingForMemory )  ;", "return   allDriversBlocked    &  &    waitingForMemory ;", "}", "METHOD_END"], "methodName": ["allQueriesBlocked"], "fileName": "com.facebook.presto.memory.TestMemoryManager"}, {"methodBody": ["METHOD_START", "{", "return   StageInfo . getAllStages ( query . getOutputStage (  )  )  . stream (  )  . flatMap (  (    stage )     -  >    stage . getTasks (  )  . stream (  )  )  . map ( TaskInfo :  : getStats )  . anyMatch (  (    task )     -  >    task . getBlockedReasons (  )  . contains ( WAITING _ FOR _ MEMORY )  )  ;", "}", "METHOD_END"], "methodName": ["atLeastOneOperatorWaitingForMemory"], "fileName": "com.facebook.presto.memory.TestMemoryManager"}, {"methodBody": ["METHOD_START", "{", "DistributedQueryRunner   queryRunner    =    new   DistributedQueryRunner ( session ,     2  ,    properties )  ;", "try    {", "queryRunner . installPlugin ( new   TpchPlugin (  )  )  ;", "queryRunner . createCatalog (  \" tpch \"  ,     \" tpch \"  )  ;", "return   queryRunner ;", "}    catch    ( Exception   e )     {", "queryRunner . close (  )  ;", "throw   e ;", "}", "}", "METHOD_END"], "methodName": ["createQueryRunner"], "fileName": "com.facebook.presto.memory.TestMemoryManager"}, {"methodBody": ["METHOD_START", "{", "executor . shutdownNow (  )  ;", "}", "METHOD_END"], "methodName": ["shutdown"], "fileName": "com.facebook.presto.memory.TestMemoryManager"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    properties    =    ImmutableMap .  < String ,    String > builder (  )  . put (  \" task . verbose - stats \"  ,     \" true \"  )  . build (  )  ;", "try    ( DistributedQueryRunner   queryRunner    =     . createQueryRunner (  . TINY _ SESSION ,    properties )  )     {", "QueryId   fakeQueryId    =    new   QueryId (  \" fake \"  )  ;", "for    ( TestingPrestoServer   server    :    queryRunner . getServers (  )  )     {", "for    ( MemoryPool   pool    :    server . getLocalMemoryManager (  )  . getPools (  )  )     {", "assertTrue ( pool . tryReserve ( fakeQueryId ,    pool . getMaxBytes (  )  )  )  ;", "}", "}", "List < Future <  ?  >  >    queryFutures    =    new   ArrayList <  >  (  )  ;", "for    ( int   i    =     0  ;    i    <     2  ;    i +  +  )     {", "queryFutures . add ( executor . submit (  (  )     -  >    queryRunner . execute (  \" SELECT   COUNT (  *  )  ,    clerk   FROM   orders   GROUP   BY   clerk \"  )  )  )  ;", "}", "ClusterMemoryManager   memoryManager    =    queryRunner . getCoordinator (  )  . getClusterMemoryManager (  )  ;", "ClusterMemoryPool   reservedPool ;", "while    (  ( reservedPool    =    memoryManager . getPools (  )  . get ( LocalMemoryManager . RESERVED _ POOL )  )     =  =    null )     {", "TimeUnit . MILLISECONDS . sleep (  1  0  )  ;", "}", "ClusterMemoryPool   generalPool    =    memoryManager . getPools (  )  . get ( LocalMemoryManager . GENERAL _ POOL )  ;", "assertNotNull ( generalPool )  ;", "while    (  (  (  (  ( generalPool . getAssignedQueries (  )  )     !  =     1  )     |  |     (  ( reservedPool . getAssignedQueries (  )  )     !  =     1  )  )     |  |     (  ( generalPool . getBlockedNodes (  )  )     !  =     2  )  )     |  |     (  ( reservedPool . getBlockedNodes (  )  )     !  =     2  )  )     {", "TimeUnit . MILLISECONDS . sleep (  1  0  )  ;", "}", "List < QueryInfo >    currentQueryInfos    =    queryRunner . getCoordinator (  )  . getQueryManager (  )  . getAllQueryInfo (  )  ;", "for    ( QueryInfo   info    :    currentQueryInfos )     {", "assertFalse ( info . getState (  )  . isDone (  )  )  ;", "}", "assertEquals ( currentQueryInfos . size (  )  ,     2  )  ;", "assertNotEquals ( currentQueryInfos . get (  0  )  . getMemoryPool (  )  ,    currentQueryInfos . get (  1  )  . getMemoryPool (  )  )  ;", "while    (  !  (  . allQueriesBlocked ( currentQueryInfos )  )  )     {", "TimeUnit . MILLISECONDS . sleep (  1  0  )  ;", "currentQueryInfos    =    queryRunner . getCoordinator (  )  . getQueryManager (  )  . getAllQueryInfo (  )  ;", "for    ( QueryInfo   info    :    currentQueryInfos )     {", "assertFalse ( info . getState (  )  . isDone (  )  )  ;", "}", "}", "for    ( TestingPrestoServer   server    :    queryRunner . getServers (  )  )     {", "MemoryPool   reserved    =    server . getLocalMemoryManager (  )  . getPool ( LocalMemoryManager . RESERVED _ POOL )  ;", "reserved . free ( fakeQueryId ,    reserved . getMaxBytes (  )  )  ;", "assertTrue (  (  ( reserved . getFreeBytes (  )  )     >     0  )  )  ;", "MemoryPool   system    =    server . getLocalMemoryManager (  )  . getPool ( LocalMemoryManager . SYSTEM _ POOL )  ;", "system . free ( fakeQueryId ,    system . getMaxBytes (  )  )  ;", "assertTrue (  (  ( system . getFreeBytes (  )  )     >     0  )  )  ;", "}", "for    ( Future <  ?  >    query    :    queryFutures )     {", "query . get (  )  ;", "}", "List < QueryInfo >    queryInfos    =    queryRunner . getCoordinator (  )  . getQueryManager (  )  . getAllQueryInfo (  )  ;", "for    ( QueryInfo   info    :    queryInfos )     {", "assertEquals ( info . getState (  )  ,    QueryState . FINISHED )  ;", "}", "for    ( TestingPrestoServer   worker    :    queryRunner . getServers (  )  )     {", "MemoryPool   reserved    =    worker . getLocalMemoryManager (  )  . getPool ( LocalMemoryManager . RESERVED _ POOL )  ;", "assertEquals ( reserved . getMaxBytes (  )  ,    reserved . getFreeBytes (  )  )  ;", "MemoryPool   general    =    worker . getLocalMemoryManager (  )  . getPool ( LocalMemoryManager . GENERAL _ POOL )  ;", "general . free ( fakeQueryId ,    general . getMaxBytes (  )  )  ;", "assertEquals ( general . getMaxBytes (  )  ,    general . getFreeBytes (  )  )  ;", "MemoryPool   system    =    worker . getLocalMemoryManager (  )  . getPool ( LocalMemoryManager . SYSTEM _ POOL )  ;", "assertEquals ( system . getMaxBytes (  )  ,    system . getFreeBytes (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testClusterPools"], "fileName": "com.facebook.presto.memory.TestMemoryManager"}, {"methodBody": ["METHOD_START", "{", "testNoLeak (  \" SELECT   clerk   FROM   orders \"  )  ;", "testNoLeak (  \" SELECT   COUNT (  *  )  ,    clerk   FROM   orders   WHERE   orderstatus =  ' O '    GROUP   BY   clerk \"  )  ;", "}", "METHOD_END"], "methodName": ["testNoLeak"], "fileName": "com.facebook.presto.memory.TestMemoryManager"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    properties    =    ImmutableMap .  < String ,    String > builder (  )  . put (  \" task . verbose - stats \"  ,     \" true \"  )  . build (  )  ;", "try    ( DistributedQueryRunner   queryRunner    =     . createQueryRunner (  . TINY _ SESSION ,    properties )  )     {", "executor . submit (  (  )     -  >    queryRunner . execute ( query )  )  . get (  )  ;", "List < QueryInfo >    queryInfos    =    queryRunner . getCoordinator (  )  . getQueryManager (  )  . getAllQueryInfo (  )  ;", "for    ( QueryInfo   info    :    queryInfos )     {", "assertEquals ( info . getState (  )  ,    QueryState . FINISHED )  ;", "}", "for    ( TestingPrestoServer   worker    :    queryRunner . getServers (  )  )     {", "MemoryPool   reserved    =    worker . getLocalMemoryManager (  )  . getPool ( LocalMemoryManager . RESERVED _ POOL )  ;", "assertEquals ( reserved . getMaxBytes (  )  ,    reserved . getFreeBytes (  )  )  ;", "MemoryPool   general    =    worker . getLocalMemoryManager (  )  . getPool ( LocalMemoryManager . GENERAL _ POOL )  ;", "assertEquals ( general . getMaxBytes (  )  ,    general . getFreeBytes (  )  )  ;", "MemoryPool   system    =    worker . getLocalMemoryManager (  )  . getPool ( LocalMemoryManager . SYSTEM _ POOL )  ;", "assertEquals ( system . getMaxBytes (  )  ,    system . getFreeBytes (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testNoLeak"], "fileName": "com.facebook.presto.memory.TestMemoryManager"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    properties    =    ImmutableMap .  < String ,    String > builder (  )  . put (  \" task . verbose - stats \"  ,     \" true \"  )  . put (  \" query . low - memory - killer . delay \"  ,     \"  5 s \"  )  . put (  \" query . low - memory - killer . policy \"  ,     \" total - reservation \"  )  . build (  )  ;", "try    ( DistributedQueryRunner   queryRunner    =     . createQueryRunner (  . TINY _ SESSION ,    properties )  )     {", "QueryId   fakeQueryId    =    new   QueryId (  \" fake \"  )  ;", "for    ( TestingPrestoServer   server    :    queryRunner . getServers (  )  )     {", "for    ( MemoryPool   pool    :    server . getLocalMemoryManager (  )  . getPools (  )  )     {", "assertTrue ( pool . tryReserve ( fakeQueryId ,    pool . getMaxBytes (  )  )  )  ;", "}", "}", "List < Future <  ?  >  >    queryFutures    =    new   ArrayList <  >  (  )  ;", "for    ( int   i    =     0  ;    i    <     2  ;    i +  +  )     {", "queryFutures . add ( executor . submit (  (  )     -  >    queryRunner . execute (  \" SELECT   COUNT (  *  )  ,    clerk   FROM   orders   GROUP   BY   clerk \"  )  )  )  ;", "}", "boolean   queryDone    =    false ;", "while    (  ! queryDone )     {", "for    ( QueryInfo   info    :    queryRunner . getCoordinator (  )  . getQueryManager (  )  . getAllQueryInfo (  )  )     {", "if    ( info . getState (  )  . isDone (  )  )     {", "assertNotNull ( info . getErrorCode (  )  )  ;", "assertEquals ( info . getErrorCode (  )  . getCode (  )  ,    CLUSTER _ OUT _ OF _ MEMORY . toErrorCode (  )  . getCode (  )  )  ;", "queryDone    =    true ;", "break ;", "}", "}", "TimeUnit . MILLISECONDS . sleep (  1  0  )  ;", "}", "for    ( TestingPrestoServer   server    :    queryRunner . getServers (  )  )     {", "MemoryPool   reserved    =    server . getLocalMemoryManager (  )  . getPool ( LocalMemoryManager . RESERVED _ POOL )  ;", "reserved . free ( fakeQueryId ,    reserved . getMaxBytes (  )  )  ;", "assertTrue (  (  ( reserved . getFreeBytes (  )  )     >     0  )  )  ;", "}", "for    ( Future <  ?  >    query    :    queryFutures )     {", "query . get (  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["testOutOfMemoryKiller"], "fileName": "com.facebook.presto.memory.TestMemoryManager"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    properties    =    ImmutableMap .  < String ,    String > builder (  )  . put (  \" task . max - partial - aggregation - memory \"  ,     \"  1 B \"  )  . put (  \" query . max - memory \"  ,     \"  1 kB \"  )  . build (  )  ;", "try    ( QueryRunner   queryRunner    =     . createQueryRunner (  . SESSION ,    properties )  )     {", "queryRunner . execute (  . SESSION ,     \" SELECT   COUNT (  *  )  ,    repeat ( orderstatus ,     1  0  0  0  )    FROM   orders   GROUP   BY    2  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["testQueryMemoryLimit"], "fileName": "com.facebook.presto.memory.TestMemoryManager"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    properties    =    ImmutableMap .  < String ,    String > builder (  )  . put (  \" task . max - partial - aggregation - memory \"  ,     \"  1 B \"  )  . put (  \" query . max - memory - per - node \"  ,     \"  1 kB \"  )  . build (  )  ;", "try    ( QueryRunner   queryRunner    =     . createQueryRunner (  . SESSION ,    properties )  )     {", "queryRunner . execute (  . SESSION ,     \" SELECT   COUNT (  *  )  ,    repeat ( orderstatus ,     1  0  0  0  )    FROM   orders   GROUP   BY    2  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["testQueryMemoryPerNodeLimit"], "fileName": "com.facebook.presto.memory.TestMemoryManager"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    properties    =    ImmutableMap .  < String ,    String > builder (  )  . put (  \" query . max - memory - per - node \"  ,     \"  1 kB \"  )  . put (  \" query . max - memory \"  ,     \"  1 kB \"  )  . build (  )  ;", "try    ( DistributedQueryRunner   queryRunner    =     . createQueryRunner (  . TINY _ SESSION ,    properties )  )     {", "try    {", "queryRunner . execute (  \" SELECT   COUNT (  *  )  ,    clerk   FROM   orders   GROUP   BY   clerk \"  )  ;", "fail (  )  ;", "}    catch    ( RuntimeException   e )     {", "}", "Session   session    =    testSessionBuilder (  )  . setCatalog (  \" tpch \"  )  . setSchema (  \" tiny \"  )  . setSystemProperty ( SystemSessionProperties . RESOURCE _ OVERCOMMIT ,     \" true \"  )  . build (  )  ;", "queryRunner . execute ( session ,     \" SELECT   COUNT (  *  )  ,    clerk   FROM   orders   GROUP   BY   clerk \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["testResourceOverCommit"], "fileName": "com.facebook.presto.memory.TestMemoryManager"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  \" SELECT    \"     +     \"             orderkey    +     1  ,    orderkey    +     2  ,    orderkey    +     3  ,    orderkey    +     4  ,    orderkey    +     5  ,     \"  )     +     \"             orderkey    +     6  ,    orderkey    +     7  ,    orderkey    +     8  ,    orderkey    +     9  ,    orderkey    +     1  0  ,     \"  )     +     \"             count (  *  )     \"  )     +     \" FROM   orders    \"  )     +     \" GROUP   BY    \"  )     +     \"             orderkey    +     1  ,    orderkey    +     2  ,    orderkey    +     3  ,    orderkey    +     4  ,    orderkey    +     5  ,     \"  )     +     \"             orderkey    +     6  ,    orderkey    +     7  ,    orderkey    +     8  ,    orderkey    +     9  ,    orderkey    +     1  0  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["test15WayGroupBy"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   sum ( x )    FILTER    ( WHERE   y    >     4  )    FROM    ( VALUES    (  1  ,     3  )  ,     (  2  ,     4  )  ,     (  2  ,     4  )  ,     (  4  ,     5  )  )    t    ( x ,    y )  \"  ,     \" SELECT    4  \"  )  ;", "assertQuery (  \" SELECT   sum ( x )    FILTER    ( WHERE   x    >     1  )  ,    sum ( y )    FILTER    ( WHERE   y    >     4  )    FROM    ( VALUES    (  1  ,     3  )  ,     (  2  ,     4  )  ,     (  2  ,     4  )  ,     (  4  ,     5  )  )    t    ( x ,    y )  \"  ,     \" SELECT    8  ,     5  \"  )  ;", "assertQuery (  \" SELECT   sum ( x )    FILTER    ( WHERE   x    >     1  )  ,    sum ( x )    FROM    ( VALUES    (  1  )  ,     (  2  )  ,     (  2  )  ,     (  4  )  )    t    ( x )  \"  ,     \" SELECT    8  ,     9  \"  )  ;", "assertQuery (  \" SELECT   unt (  *  )    FILTER    ( WHERE   x    >     1  )  ,    sum ( x )    FROM    ( VALUES    (  1  ,     3  )  ,     (  2  ,     4  )  ,     (  2  ,     4  )  ,     (  4  ,     5  )  )    t    ( x ,    y )  \"  ,     \" SELECT    3  ,     9  \"  )  ;", "assertQuery (  \" SELECT   unt (  *  )    FILTER    ( WHERE   x    >     1  )  ,    unt ( DISTINCT   y )    FROM    ( VALUES    (  1  ,     1  0  )  ,     (  2  ,     1  0  )  ,     (  3  ,     1  0  )  ,     (  4  ,     2  0  )  )    t    ( x ,    y )  \"  ,     \" SELECT    3  ,     2  \"  )  ;", "assertQuery (  (  \"  \"     +     (  \" SELECT   sum ( b )    FILTER    ( WHERE   true )     \"     +     \" FROM    ( SELECT   unt (  *  )    FILTER    ( WHERE   true )    AS   b )  \"  )  )  ,     \" SELECT    1  \"  )  ;", "assertQuery (  \" SELECT   unt (  1  )    FILTER    ( WHERE   orderstatus    =     ' O '  )    FROM   orders \"  ,     \" SELECT   unt (  *  )    FROM   orders   WHERE   orderstatus    =     ' O '  \"  )  ;", "}", "METHOD_END"], "methodName": ["testAggregationFilter"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    1  .  0     /    COUNT (  *  )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   cukey ,     1  .  0     /    COUNT (  *  )    FROM   orders   GROUP   BY   cukey \"  )  ;", "}", "METHOD_END"], "methodName": ["testAggregationImplicitCoercion"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  (  \"  \"     +     (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  \" SELECT \\ n \"     +     \"       value \\ n \"  )     +     \" FROM \\ n \"  )     +     \"  (  \\ n \"  )     +     \"             SELECT \\ n \"  )     +     \"                         key \\ n \"  )     +     \"             FROM \\ n \"  )     +     \"                          ( VALUES    \\  ' match \\  '  )    AS   a ( key )  \\ n \"  )     +     \"                         LEFT   JOIN    ( SELECT    *    FROM    ( VALUES    (  0  )  )    LIMIT    0  )    AS   x ( ignored )  \\ n \"  )     +     \"                         ON   TRUE \\ n \"  )     +     \"             GROUP   BY    1  \\ n \"  )     +     \"  )    a \\ n \"  )     +     \" RIGHT   JOIN \\ n \"  )     +     \"  (  \\ n \"  )     +     \"             VALUES \\ n \"  )     +     \"              (  \\  ' match \\  '  ,     \\  ' value \\  '  )  ,  \\ n \"  )     +     \"              (  \\  ' no - match \\  '  ,     \\  ' value \\  '  )  \\ n \"  )     +     \"  )    AS   b ( key ,    value )  \\ n \"  )     +     \" ON   a . key    =    b . key \\ n \"  )     +     \" GROUP   BY    1  \\ n \"  )  )  ,     \" VALUES    ' value '  \"  )  ;", "}", "METHOD_END"], "methodName": ["testAggregationOverRightJoinOverSingleStreamProbe"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT    *     \"     +     (  (  (  (  \" FROM   nation   n 1     \"     +     \" WHERE    ( n 1  . nationkey    >     (     \"  )     +     \" SELECT   avg ( nationkey )     \"  )     +     \" FROM   nation   n 2     \"  )     +     \" WHERE   n 1  . regionkey = n 2  . regionkey )  )  \"  )  )  )  ;", "assertQuery (  (  \" SELECT   max ( name )  ,    min ( name )  ,    count ( nationkey )     +     1  ,    count ( nationkey )     \"     +     (  (  (  (  (  \" FROM    ( SELECT   DISTINCT   regionkey   FROM   region )    AS   r 1     \"     +     \" LEFT   JOIN    \"  )     +     \" nation    \"  )     +     \" ON   r 1  . regionkey    =    nation . regionkey    \"  )     +     \" GROUP   BY   r 1  . regionkey    \"  )     +     \" HAVING   sum ( nationkey )     <     2  0  \"  )  )  )  ;", "assertQuery (  (  \" SELECT   DISTINCT   r 1  . regionkey    \"     +     (  (  (  \" FROM    ( SELECT   regionkey   FROM   region   INTERSECT   SELECT   regionkey   FROM   region   WHERE   regionkey    <     4  )    AS   r 1     \"     +     \" LEFT   JOIN    \"  )     +     \" nation    \"  )     +     \" ON   r 1  . regionkey    =    nation . regionkey \"  )  )  )  ;", "assertQuery (  (  \" SELECT   max ( nationkey )     \"     +     (  (  (  (  \" FROM    ( SELECT   regionkey   FROM   region   EXCEPT   SELECT   regionkey   FROM   region   WHERE   regionkey    <     4  )    AS   r 1     \"     +     \" LEFT   JOIN    \"  )     +     \" nation    \"  )     +     \" ON   r 1  . regionkey    =    nation . regionkey    \"  )     +     \" GROUP   BY   r 1  . regionkey \"  )  )  )  ;", "assertQuery (  (  \" SELECT   max ( nationkey )     \"     +     (  (  (  (  \" FROM    ( VALUES   CAST    (  1    AS   BIGINT )  )    v 1  ( col 1  )     \"     +     \" LEFT   JOIN    \"  )     +     \" nation    \"  )     +     \" ON   v 1  . col 1     =    nation . regionkey    \"  )     +     \" GROUP   BY   v 1  . col 1  \"  )  )  ,     \" VALUES    2  4  \"  )  ;", "}", "METHOD_END"], "methodName": ["testAggregationPushedBelowOuterJoin"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   a ,    count (  1  )    FROM    ( VALUES    1  ,     2  ,     3  ,     2  )    t ( a )    GROUP   BY   a   HAVING   count (  1  )     >     1  \"  ,     \" SELECT    2  ,     2  \"  )  ;", "}", "METHOD_END"], "methodName": ["testAggregationWithHaving"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   sum ( totalprice    *     2  )     -    sum ( totalprice )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   sum ( totalprice    *     2  )     +    sum ( totalprice    *     2  )    FROM   orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testAggregationWithProjection"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   APPROX _ PERCENTILE (  0  .  1 E 0  ,    x )  ,    AVG ( x )  ,    MIN ( x )    FROM    ( values    1  ,     1  ,     1  )    t ( x )  \"  ,     \" SELECT    0  .  1  ,     1  .  0  ,     1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testAggregationWithSomeArgumentCasts"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   approx _ distinct ( custkey )    FROM   orders \"  ,     \" SELECT    9  9  6  \"  )  ;", "assertQuery (  \" SELECT   approx _ distinct ( custkey ,     0  .  0  2  3  )    FROM   orders \"  ,     \" SELECT    9  9  6  \"  )  ;", "assertQuery (  \" SELECT   approx _ distinct ( CAST ( custkey   AS   DOUBLE )  )    FROM   orders \"  ,     \" SELECT    1  0  3  1  \"  )  ;", "assertQuery (  \" SELECT   approx _ distinct ( CAST ( custkey   AS   DOUBLE )  ,     0  .  0  2  3  )    FROM   orders \"  ,     \" SELECT    1  0  3  1  \"  )  ;", "assertQuery (  \" SELECT   approx _ distinct ( CAST ( custkey   AS   VARCHAR )  )    FROM   orders \"  ,     \" SELECT    1  0  1  1  \"  )  ;", "assertQuery (  \" SELECT   approx _ distinct ( CAST ( custkey   AS   VARCHAR )  ,     0  .  0  2  3  )    FROM   orders \"  ,     \" SELECT    1  0  1  1  \"  )  ;", "assertQuery (  \" SELECT   approx _ distinct ( to _ utf 8  ( CAST ( custkey   AS   VARCHAR )  )  )    FROM   orders \"  ,     \" SELECT    1  0  1  1  \"  )  ;", "assertQuery (  \" SELECT   approx _ distinct ( to _ utf 8  ( CAST ( custkey   AS   VARCHAR )  )  ,     0  .  0  2  3  )    FROM   orders \"  ,     \" SELECT    1  0  1  1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testApproximateCountDistinct"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  \" SELECT   orderstatus ,    approx _ distinct ( custkey )    FROM   orders   GROUP   BY   orderstatus \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    actual . getTypes (  )  )  . row (  \" O \"  ,     9  9  5 L )  . row (  \" F \"  ,     9  9  3 L )  . row (  \" P \"  ,     3  0  3 L )  . build (  )  ;", "QueryAsser . assertEqualsIgnoreOrder ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testApproximateCountDistinctGroupBy"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  \" SELECT   orderstatus ,    approx _ distinct ( custkey ,     0  .  0  2  3  )    FROM   orders   GROUP   BY   orderstatus \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    actual . getTypes (  )  )  . row (  \" O \"  ,     9  9  5 L )  . row (  \" F \"  ,     9  9  3 L )  . row (  \" P \"  ,     3  0  3 L )  . build (  )  ;", "QueryAsser . assertEqualsIgnoreOrder ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testApproximateCountDistinctGroupByWithStandardError"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   COUNT ( DISTINCT   custkey )  ,     \"     +     (  (  (  \" SUM ( DISTINCT   custkey )  ,     \"     +     \" SUM ( DISTINCT   custkey    +     1  .  0 E 0  )  ,     \"  )     +     \" AVG ( DISTINCT   custkey )  ,     \"  )     +     \" VARIANCE ( DISTINCT   custkey )    FROM   orders \"  )  )  ,     (  \" SELECT   COUNT (  *  )  ,     \"     +     (  (  (  \" SUM ( custkey )  ,     \"     +     \" SUM ( custkey    +     1  .  0  )  ,     \"  )     +     \" AVG ( custkey )  ,     \"  )     +     \" VARIANCE ( custkey )    FROM    ( SELECT   DISTINCT   custkey   FROM   orders )    t \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testComplexDistinct"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   WHERE   tax    <    discount \"  )  ;", "}", "METHOD_END"], "methodName": ["testCountAllWithComparison"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   orders   WHERE   orderstatus    =     ' F '  \"  )  ;", "}", "METHOD_END"], "methodName": ["testCountAllWithPredicate"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT ( true )    FROM   orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testCountBoolean"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT ( DISTINCT   custkey    +     1  )    FROM   orders \"  ,     \" SELECT   COUNT (  *  )    FROM    ( SELECT   DISTINCT   custkey    +     1    FROM   orders )    t \"  )  ;", "assertQuery (  \" SELECT   COUNT ( DISTINCT   linenumber )  ,    COUNT (  *  )    from   lineitem   where   linenumber    <     0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testCountDistinct"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   WHERE   tax    <    discount   AND   tax    >     0  .  0  1    AND   discount    <     0  .  0  5  \"  )  ;", "}", "METHOD_END"], "methodName": ["testCountWithAndPredicate"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   orders   WHERE   COALESCE ( NULLIF ( orderstatus ,     ' F '  )  ,     ' bar '  )     =     ' bar '  \"  ,     \" SELECT   COUNT (  *  )    FROM   orders   WHERE   orderstatus    =     ' F '  \"  )  ;", "}", "METHOD_END"], "methodName": ["testCountWithCoalescePredicate"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM    ( SELECT   orderkey   FROM   lineitem )    x \"  )  ;", "}", "METHOD_END"], "methodName": ["testCountWithInlineView"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   orders   WHERE   NULLIF ( orderstatus ,     ' F '  )    IS   NOT   NULL \"  ,     \" SELECT   COUNT (  *  )    FROM   orders   WHERE   orderstatus    <  >     ' F '     \"  )  ;", "}", "METHOD_END"], "methodName": ["testCountWithIsNotNullPredicate"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   orders   WHERE   NULLIF ( orderstatus ,     ' F '  )    IS   NULL \"  ,     \" SELECT   COUNT (  *  )    FROM   orders   WHERE   orderstatus    =     ' F '     \"  )  ;", "}", "METHOD_END"], "methodName": ["testCountWithIsNullPredicate"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   WHERE   NOT   tax    <    discount \"  )  ;", "}", "METHOD_END"], "methodName": ["testCountWithNotPredicate"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   orders   WHERE   NULLIF ( orderstatus ,     ' F '  )     =    orderstatus    \"  )  ;", "}", "METHOD_END"], "methodName": ["testCountWithNullIfPredicate"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   WHERE   NULL \"  )  ;", "}", "METHOD_END"], "methodName": ["testCountWithNullPredicate"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   WHERE   tax    <     0  .  0  1    OR   discount    >     0  .  0  5  \"  )  ;", "}", "METHOD_END"], "methodName": ["testCountWithOrPredicate"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   linenumber ,    suppkey ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   CUBE    ( linenumber ,    suppkey )  \"  ,     (  \" SELECT   linenumber ,    suppkey ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   linenumber ,    suppkey   UNION   ALL    \"     +     (  (  \" SELECT   linenumber ,    NULL ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   linenumber   UNION   ALL    \"     +     \" SELECT   NULL ,    suppkey ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   suppkey   UNION   ALL    \"  )     +     \" SELECT   NULL ,    NULL ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testCube"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   linenumber ,    suppkey ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   WHERE   quantity    <     0    GROUP   BY   CUBE    ( linenumber ,    suppkey )  \"  ,     (  \" SELECT   linenumber ,    suppkey ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   WHERE   quantity    <     0    GROUP   BY   linenumber ,    suppkey   UNION   ALL    \"     +     (  (  \" SELECT   linenumber ,    NULL ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   WHERE   quantity    <     0    GROUP   BY   linenumber   UNION   ALL    \"     +     \" SELECT   NULL ,    suppkey ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   WHERE   quantity    <     0    GROUP   BY   suppkey   UNION   ALL    \"  )     +     \" SELECT   NULL ,    NULL ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   WHERE   quantity    <     0  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testCubeNoInput"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT ( DISTINCT   clerk )    AS   count ,    orderdate   FROM   orders   GROUP   BY   orderdate   ORDER   BY   count ,    orderdate \"  )  ;", "}", "METHOD_END"], "methodName": ["testDistinctGroupBy"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT ( DISTINCT   clerk )    FROM   orders   WHERE   LENGTH ( clerk )     >     5  \"  )  ;", "}", "METHOD_END"], "methodName": ["testDistinctWhere"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   max ( orderstatus )  ,    COUNT ( orderkey )  ,    sum ( DISTINCT   orderkey )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   custkey ,    orderstatus ,    avg ( shippriority )  ,    SUM ( DISTINCT   orderkey )    FROM   orders   GROUP   BY   custkey ,    orderstatus \"  )  ;", "assertQuery (  (  \" SELECT   s ,    MAX ( custkey )  ,    SUM ( a )    FROM    (  \"     +     (  (  \"             SELECT   custkey ,    avg ( shippriority )    AS   a ,    SUM ( DISTINCT   orderkey )    AS   s   FROM   orders   GROUP   BY   custkey ,    orderstatus \"     +     \"  )     \"  )     +     \" GROUP   BY   s \"  )  )  )  ;", "assertQuery (  \" SELECT   max ( orderstatus )  ,    COUNT ( DISTINCT   orderkey )  ,    sum ( DISTINCT   orderkey )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   max ( orderstatus )  ,    COUNT ( DISTINCT   shippriority )  ,    sum ( DISTINCT   orderkey )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   COUNT ( tan ( shippriority )  )  ,    sum ( DISTINCT   orderkey )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   count ( DISTINCT   a )  ,    max ( b )    FROM    ( VALUES    ( row (  1  ,     2  )  ,     3  )  )    t ( a ,    b )  \"  ,     \" VALUES    (  1  ,     3  )  \"  )  ;", "assertQuery (  \" SELECT   shippriority ,    MAX ( orderstatus )  ,    SUM ( DISTINCT   shippriority )    FROM   orders   GROUP   BY   shippriority \"  )  ;", "assertQuery (  \" SELECT   shippriority ,    COUNT ( shippriority )  ,    SUM ( DISTINCT   orderkey )    FROM   orders   GROUP   BY   shippriority \"  )  ;", "assertQuery (  \" SELECT   shippriority ,    COUNT ( shippriority )  ,    SUM ( DISTINCT   shippriority )    FROM   orders   GROUP   BY   shippriority \"  )  ;", "assertQuery (  \" SELECT   clerk ,    shippriority ,    MAX ( orderstatus )  ,    SUM ( DISTINCT   shippriority )    FROM   orders   GROUP   BY   clerk ,    shippriority \"  )  ;", "assertQuery (  \" SELECT   clerk ,    shippriority ,    COUNT ( shippriority )  ,    SUM ( DISTINCT   orderkey )    FROM   orders   GROUP   BY   clerk ,    shippriority \"  )  ;", "assertQuery (  \" SELECT   clerk ,    shippriority ,    COUNT ( shippriority )  ,    SUM ( DISTINCT   shippriority )    FROM   orders   GROUP   BY   clerk ,    shippriority \"  )  ;", "}", "METHOD_END"], "methodName": ["testExtractDistinctAggregationOptimizer"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   sum ( custkey )  ,    max ( orderstatus )  ,    min ( c )    FROM    ( SELECT   orderstatus ,    custkey ,    COUNT (  *  )    c   FROM   orders   GROUP   BY   orderstatus ,    custkey )    T \"  )  ;", "}", "METHOD_END"], "methodName": ["testGroupAggregationOverNestedGroupByAggregation"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   col [  1  ]  ,    count   FROM    ( SELECT   ARRAY [ custkey ]    col ,    COUNT (  *  )    count   FROM   orders   GROUP   BY    1    ORDER   BY    1  )  \"  ,     \" SELECT   custkey ,    COUNT (  *  )    FROM   orders   GROUP   BY   custkey   ORDER   BY   custkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testGroupByArray"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   orderkey   BETWEEN    1    AND    1  0  0    FROM   orders   GROUP   BY   orderkey   BETWEEN    1    AND    1  0  0     \"  )  ;", "assertQuery (  \" SELECT   CAST ( orderkey   BETWEEN    1    AND    1  0  0    AS   BIGINT )    FROM   orders   GROUP   BY   orderkey \"  )  ;", "assertQuery (  \" SELECT   CAST (  5  0    BETWEEN   orderkey   AND    1  0  0    AS   BIGINT )    FROM   orders   GROUP   BY   orderkey \"  )  ;", "assertQuery (  \" SELECT   CAST (  5  0    BETWEEN    1    AND   orderkey   AS   BIGINT )    FROM   orders   GROUP   BY   orderkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testGroupByBetween"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   CASE   orderstatus   WHEN    \\  ' O \\  '    THEN    \\  ' a \\  '    ELSE    \\  ' b \\  '    END ,    count (  *  )  \\ n \"     +     (  \" FROM   orders \\ n \"     +     \" GROUP   BY   CASE   orderstatus   WHEN    ' O '    THEN    ' a '    ELSE    ' b '    END \"  )  )  )  ;", "assertQuery (  (  \" SELECT   CASE   orderstatus   WHEN    \\  ' O \\  '    THEN    \\  ' a \\  '    ELSE    \\  ' b \\  '    END ,    count (  *  )  \\ n \"     +     (  \" FROM   orders \\ n \"     +     \" GROUP   BY    1  \"  )  )  ,     (  \" SELECT   CASE   orderstatus   WHEN    \\  ' O \\  '    THEN    \\  ' a \\  '    ELSE    \\  ' b \\  '    END ,    count (  *  )  \\ n \"     +     (  \" FROM   orders \\ n \"     +     \" GROUP   BY   CASE   orderstatus   WHEN    ' O '    THEN    ' a '    ELSE    ' b '    END \"  )  )  )  ;", "assertQuery (  (  \" SELECT   CASE   orderstatus   WHEN    \\  ' O \\  '    THEN    \\  ' a \\  '    ELSE    \\  ' b \\  '    END ,    count (  *  )  \\ n \"     +     (  \" FROM   orders \\ n \"     +     \" GROUP   BY   orderstatus \"  )  )  )  ;", "assertQuery (  (  \" SELECT   CASE    \\  ' O \\  '    WHEN   orderstatus   THEN    \\  ' a \\  '    ELSE    \\  ' b \\  '    END ,    count (  *  )  \\ n \"     +     (  \" FROM   orders \\ n \"     +     \" GROUP   BY   orderstatus \"  )  )  )  ;", "assertQuery (  (  \" SELECT   CASE    1    WHEN    1    THEN   orderstatus   ELSE    \\  ' x \\  '    END ,    count (  *  )  \\ n \"     +     (  \" FROM   orders \\ n \"     +     \" GROUP   BY   orderstatus \"  )  )  )  ;", "assertQuery (  (  \" SELECT   CASE    1    WHEN    1    THEN    \\  ' x \\  '    ELSE   orderstatus   END ,    count (  *  )  \\ n \"     +     (  \" FROM   orders \\ n \"     +     \" GROUP   BY   orderstatus \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupByCase"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   CASE   orderstatus   WHEN    \\  ' O \\  '    THEN    \\  ' a \\  '    END ,    count (  *  )  \\ n \"     +     (  \" FROM   orders \\ n \"     +     \" GROUP   BY   CASE   orderstatus   WHEN    ' O '    THEN    ' a '    END \"  )  )  )  ;", "assertQuery (  (  \" SELECT   CASE   orderstatus   WHEN    \\  ' O \\  '    THEN    \\  ' a \\  '    END ,    count (  *  )  \\ n \"     +     (  \" FROM   orders \\ n \"     +     \" GROUP   BY   orderstatus \"  )  )  )  ;", "assertQuery (  (  \" SELECT   CASE    \\  ' O \\  '    WHEN   orderstatus   THEN    \\  ' a \\  '    END ,    count (  *  )  \\ n \"     +     (  \" FROM   orders \\ n \"     +     \" GROUP   BY   orderstatus \"  )  )  )  ;", "assertQuery (  (  \" SELECT   CASE    1    WHEN    1    THEN   orderstatus   END ,    count (  *  )  \\ n \"     +     (  \" FROM   orders \\ n \"     +     \" GROUP   BY   orderstatus \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupByCaseNoElse"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   CAST ( orderkey   AS   VARCHAR )  ,    count (  *  )    FROM   orders   GROUP   BY   CAST ( orderkey   AS   VARCHAR )  \"  )  ;", "assertQuery (  \" SELECT   CAST ( orderkey   AS   VARCHAR )  ,    count (  *  )    FROM   orders   GROUP   BY    1  \"  ,     \" SELECT   CAST ( orderkey   AS   VARCHAR )  ,    count (  *  )    FROM   orders   GROUP   BY   CAST ( orderkey   AS   VARCHAR )  \"  )  ;", "assertQuery (  \" SELECT   CAST ( orderkey   AS   VARCHAR )  ,    count (  *  )    FROM   orders   GROUP   BY   orderkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testGroupByCast"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COALESCE ( orderkey ,    custkey )  ,    count (  *  )    FROM   orders   GROUP   BY   COALESCE ( orderkey ,    custkey )  \"  )  ;", "assertQuery (  \" SELECT   COALESCE ( orderkey ,    custkey )  ,    count (  *  )    FROM   orders   GROUP   BY    1  \"  ,     \" SELECT   COALESCE ( orderkey ,    custkey )  ,    count (  *  )    FROM   orders   GROUP   BY   COALESCE ( orderkey ,    custkey )  \"  )  ;", "assertQuery (  \" SELECT   COALESCE ( orderkey ,     1  )  ,    count (  *  )    FROM   orders   GROUP   BY   orderkey \"  )  ;", "assertQuery (  \" SELECT   COALESCE (  1  ,    orderkey )  ,    count (  *  )    FROM   orders   GROUP   BY   orderkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testGroupByCoalesce"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   MAP _ KEYS ( x )  [  1  ]    FROM    ( VALUES   MAP ( ARRAY [  ' a '  ]  ,    ARRAY [ ARRAY [  1  ]  ]  )  ,    MAP ( ARRAY [  ' b '  ]  ,    ARRAY [ ARRAY [  2  ]  ]  )  )    t ( x )    GROUP   BY   x \"  ,     \" VALUES    ' a '  ,     ' b '  \"  )  ;", "}", "METHOD_END"], "methodName": ["testGroupByComplexMap"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   orderstatus ,    COUNT (  *  )    FROM   orders   GROUP   BY   orderstatus \"  ,     \" SELECT   orderstatus ,    CAST ( COUNT (  *  )    AS   INTEGER )    FROM   orders   GROUP   BY   orderstatus \"  )  ;", "}", "METHOD_END"], "methodName": ["testGroupByCount"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY    (  )  \"  ,     \" SELECT   SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem \"  )  ;", "}", "METHOD_END"], "methodName": ["testGroupByEmptyGroupingSet"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   EXTRACT ( YEAR   FROM   now (  )  )  ,    count (  *  )    FROM   orders   GROUP   BY   EXTRACT ( YEAR   FROM   now (  )  )  \"  )  ;", "assertQuery (  \" SELECT   EXTRACT ( YEAR   FROM   now (  )  )  ,    count (  *  )    FROM   orders   GROUP   BY    1  \"  ,     \" SELECT   EXTRACT ( YEAR   FROM   now (  )  )  ,    count (  *  )    FROM   orders   GROUP   BY   EXTRACT ( YEAR   FROM   now (  )  )  \"  )  ;", "assertQuery (  \" SELECT   EXTRACT ( YEAR   FROM   now (  )  )  ,    count (  *  )    FROM   orders   GROUP   BY   now (  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testGroupByExtract"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   IF ( orderkey   between    1    and    5  ,     ' orders '  ,     ' others '  )  ,    sum ( totalprice )    FROM   orders   GROUP   BY    1  \"  ,     (  \" SELECT   CASE   WHEN   orderkey   BETWEEN    1    AND    5    THEN    \\  ' orders \\  '    ELSE    \\  ' others \\  '    END ,    sum ( totalprice )  \\ n \"     +     (  \" FROM   orders \\ n \"     +     \" GROUP   BY   CASE   WHEN   orderkey   BETWEEN    1    AND    5    THEN    ' orders '    ELSE    ' others '    END \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupByIf"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   col [  1  ]  ,    count   FROM    ( SELECT   MAP ( ARRAY [  1  ]  ,    ARRAY [ custkey ]  )    col ,    COUNT (  *  )    count   FROM   orders   GROUP   BY    1  )  \"  ,     \" SELECT   custkey ,    COUNT (  *  )    FROM   orders   GROUP   BY   custkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testGroupByMap"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   custkey ,    orderstatus ,    COUNT (  *  )    FROM   orders   GROUP   BY   custkey ,    orderstatus \"  )  ;", "}", "METHOD_END"], "methodName": ["testGroupByMultipleFields"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   custkey ,    orderstatus ,    MAX ( orderkey )    FROM   orders   WHERE   orderkey    =     1    GROUP   BY   custkey ,    orderstatus \"  )  ;", "}", "METHOD_END"], "methodName": ["testGroupByMultipleFieldsWithPredicateOnAggregationArgument"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   custkey   FROM   orders   GROUP   BY   custkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testGroupByNoAggregations"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  \" SELECT   count (  *  )  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT   CAST ( null   AS   VARCHAR )    constant ,    orderdate \\ n \"  )     +     \"       FROM   orders \\ n \"  )     +     \"  )    a \\ n \"  )     +     \" group   by   constant ,    orderdate \\ n \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupByNullConstant"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   NULLIF ( orderkey ,    custkey )  ,    count (  *  )    FROM   orders   GROUP   BY   NULLIF ( orderkey ,    custkey )  \"  )  ;", "assertQuery (  \" SELECT   NULLIF ( orderkey ,    custkey )  ,    count (  *  )    FROM   orders   GROUP   BY    1  \"  ,     \" SELECT   NULLIF ( orderkey ,    custkey )  ,    count (  *  )    FROM   orders   GROUP   BY   NULLIF ( orderkey ,    custkey )  \"  )  ;", "assertQuery (  \" SELECT   NULLIF ( orderkey ,     1  )  ,    count (  *  )    FROM   orders   GROUP   BY   orderkey \"  )  ;", "assertQuery (  \" SELECT   NULLIF (  1  ,    orderkey )  ,    count (  *  )    FROM   orders   GROUP   BY   orderkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testGroupByNullIf"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   orderdate ,    c ,    count (  *  )    FROM    ( SELECT   orderdate ,    count (  *  )    c   FROM   orders   GROUP   BY   orderdate )    GROUP   BY   orderdate ,    c \"  )  ;", "}", "METHOD_END"], "methodName": ["testGroupByOnSupersetOfPartitioning"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   orderstatus ,    sum ( totalprice )    FROM   orders   GROUP   BY    1  \"  ,     \" SELECT   orderstatus ,    sum ( totalprice )    FROM   orders   GROUP   BY   orderstatus \"  )  ;", "}", "METHOD_END"], "methodName": ["testGroupByOrdinal"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   sum ( custkey )    FROM   orders   GROUP   BY   orderstatus ,    orderstatus \"  )  ;", "assertQuery (  \" SELECT   count (  *  )    FROM    ( SELECT   orderstatus   a ,    orderstatus   b   FROM   orders )    GROUP   BY   a ,    b \"  )  ;", "}", "METHOD_END"], "methodName": ["testGroupByRepeatedField"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   partkey ,    COUNT ( DISTINCT   shipdate )  ,    SUM ( linenumber )    FROM   lineitem   GROUP   BY   partkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testGroupByRequireIntegerCoercion"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   col . col 1  ,    count   FROM    ( SELECT   CAST ( row ( custkey ,    custkey )    AS   row ( col 0    bigint ,    col 1    bigint )  )    col ,    COUNT (  *  )    count   FROM   orders   GROUP   BY    1  )  \"  ,     \" SELECT   custkey ,    COUNT (  *  )    FROM   orders   GROUP   BY   custkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testGroupByRow"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   CASE   WHEN   orderstatus    =     \\  ' O \\  '    THEN    \\  ' a \\  '    ELSE    \\  ' b \\  '    END ,    count (  *  )  \\ n \"     +     (  \" FROM   orders \\ n \"     +     \" GROUP   BY   CASE   WHEN   orderstatus    =     ' O '    THEN    ' a '    ELSE    ' b '    END \"  )  )  )  ;", "assertQuery (  (  \" SELECT   CASE   WHEN   orderstatus    =     \\  ' O \\  '    THEN    \\  ' a \\  '    ELSE    \\  ' b \\  '    END ,    count (  *  )  \\ n \"     +     (  \" FROM   orders \\ n \"     +     \" GROUP   BY    1  \"  )  )  ,     (  \" SELECT   CASE   WHEN   orderstatus    =     \\  ' O \\  '    THEN    \\  ' a \\  '    ELSE    \\  ' b \\  '    END ,    count (  *  )  \\ n \"     +     (  \" FROM   orders \\ n \"     +     \" GROUP   BY   CASE   WHEN   orderstatus    =     ' O '    THEN    ' a '    ELSE    ' b '    END \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupBySearchedCase"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   CASE   WHEN   orderstatus    =     \\  ' O \\  '    THEN    \\  ' a \\  '    END ,    count (  *  )  \\ n \"     +     (  \" FROM   orders \\ n \"     +     \" GROUP   BY   CASE   WHEN   orderstatus    =     ' O '    THEN    ' a '    END \"  )  )  )  ;", "assertQuery (  (  \" SELECT   CASE   WHEN   orderstatus    =     \\  ' O \\  '    THEN    \\  ' a \\  '    END ,    count (  *  )  \\ n \"     +     (  \" FROM   orders \\ n \"     +     \" GROUP   BY    1  \"  )  )  ,     (  \" SELECT   CASE   WHEN   orderstatus    =     \\  ' O \\  '    THEN    \\  ' a \\  '    END ,    count (  *  )  \\ n \"     +     (  \" FROM   orders \\ n \"     +     \" GROUP   BY   CASE   WHEN   orderstatus    =     ' O '    THEN    ' a '    END \"  )  )  )  ;", "assertQuery (  (  \" SELECT   CASE   WHEN   true   THEN   orderstatus   END ,    count (  *  )  \\ n \"     +     (  \" FROM   orders \\ n \"     +     \" GROUP   BY   orderstatus \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupBySearchedCaseNoElse"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   suppkey ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   suppkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testGroupBySum"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   orderdate   x ,    COUNT (  *  )    FROM   orders   GROUP   BY   orderdate \"  ,     \" SELECT   orderdate   x ,    CAST ( COUNT (  *  )    AS   INTEGER )    FROM   orders   GROUP   BY   orderdate \"  )  ;", "}", "METHOD_END"], "methodName": ["testGroupByWithAlias"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   key ,    COUNT (  *  )    FROM    (  \"     +     (  (  (  (  (  (  \" SELECT   CASE    \"     +     \"       WHEN   orderkey    %     3     =     0    THEN   NULL    \"  )     +     \"       WHEN   orderkey    %     5     =     0    THEN    0     \"  )     +     \"       ELSE   orderkey    \"  )     +     \"       END   AS   key    \"  )     +     \" FROM   lineitem )     \"  )     +     \" GROUP   BY   key \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupByWithNulls"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    *    FROM    ( SELECT   orderkey   FROM   orders )    t   GROUP   BY   orderkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testGroupByWithWildcard"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   orderstatus   FROM   orders   GROUP   BY   orderstatus \"  )  ;", "}", "METHOD_END"], "methodName": ["testGroupByWithoutAggregation"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   orderkey ,    partkey ,    suppkey ,    linenumber ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   orderkey ,    partkey ,    ROLLUP    ( suppkey ,    linenumber )  ,    CUBE    ( linenumber )  \"  ,     (  \" SELECT   orderkey ,    partkey ,    suppkey ,    linenumber ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   orderkey ,    suppkey ,    linenumber   UNION   ALL    \"     +     (  (  (  (  \" SELECT   orderkey ,    partkey ,    suppkey ,    linenumber ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   orderkey ,    partkey ,    suppkey ,    linenumber   UNION   ALL    \"     +     \" SELECT   orderkey ,    partkey ,    NULL ,    linenumber ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   orderkey ,    partkey ,    linenumber   UNION   ALL    \"  )     +     \" SELECT   orderkey ,    partkey ,    suppkey ,    linenumber ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   orderkey ,    partkey ,    suppkey ,    linenumber   UNION   ALL    \"  )     +     \" SELECT   orderkey ,    partkey ,    suppkey ,    NULL ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   orderkey ,    partkey ,    suppkey   UNION   ALL    \"  )     +     \" SELECT   orderkey ,    partkey ,    NULL ,    NULL ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   orderkey ,    partkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupingCombinationsAll"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   orderkey ,    partkey ,    suppkey ,    linenumber ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   DISTINCT   orderkey ,    partkey ,    ROLLUP    ( suppkey ,    linenumber )  ,    CUBE    ( linenumber )  \"  ,     (  \" SELECT   orderkey ,    partkey ,    suppkey ,    linenumber ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   orderkey ,    suppkey ,    linenumber   UNION   ALL    \"     +     (  (  \" SELECT   orderkey ,    partkey ,    NULL ,    linenumber ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   orderkey ,    partkey ,    linenumber   UNION   ALL    \"     +     \" SELECT   orderkey ,    partkey ,    suppkey ,    NULL ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   orderkey ,    partkey ,    suppkey   UNION   ALL    \"  )     +     \" SELECT   orderkey ,    partkey ,    NULL ,    NULL ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   orderkey ,    partkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupingCombinationsDistinct"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   suppkey ,    month ( shipdate )  ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   month ( shipdate )  ,    ROLLUP ( suppkey )  \"  ,     (  \" SELECT   suppkey ,    month ( shipdate )  ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   month ( shipdate )  ,    suppkey   UNION   ALL    \"     +     \" SELECT   NULL ,    month ( shipdate )  ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   month ( shipdate )  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupingSetMixedExpressionAndColumn"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   suppkey ,    month ( shipdate )  ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY    2  ,    ROLLUP ( suppkey )  \"  ,     (  \" SELECT   suppkey ,    month ( shipdate )  ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   month ( shipdate )  ,    suppkey   UNION   ALL    \"     +     \" SELECT   NULL ,    month ( shipdate )  ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   month ( shipdate )  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupingSetMixedExpressionAndOrdinal"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT    *    FROM    (  \"     +     (  \" SELECT   COALESCE ( orderpriority ,     ' ALL '  )  ,    COALESCE ( shippriority ,     -  1  )    sp   FROM    (  \"     +     \" SELECT   orderpriority ,    shippriority ,    COUNT (  1  )    FROM   orders   GROUP   BY   GROUPING   SETS    (  ( orderpriority )  ,     ( shippriority )  )  )  )    WHERE   sp =  -  1  \"  )  )  ,     \" SELECT   orderpriority ,     -  1    FROM   orders   GROUP   BY   orderpriority \"  )  ;", "}", "METHOD_END"], "methodName": ["testGroupingSetPredicatePushdown"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   COUNT _ IF ( x   IS   NULL )    FROM    (  \"     +     (  \" SELECT   x ,    y ,    COUNT ( z )    FROM    ( SELECT   CAST ( lineitem . orderkey   AS   BIGINT )    x ,    lineitem . linestatus   y ,    SUM ( lineitem . quantity )    z   FROM   lineitem    \"     +     \" JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   GROUP   BY    1  ,     2  )    GROUP   BY   GROUPING   SETS    (  ( x ,    y )  ,     (  )  )  )  \"  )  )  ,     \" SELECT    1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testGroupingSetSubsetAndPartitioning"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   linenumber ,    suppkey ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   GROUPING   SETS    (  ( linenumber ,    suppkey )  ,     ( suppkey )  )  \"  ,     (  \" SELECT   linenumber ,    suppkey ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   linenumber ,    suppkey   UNION    \"     +     \" SELECT   NULL ,    suppkey ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   suppkey \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupingSets"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   orderpriority ,    COUNT ( orderpriority )    FROM   orders   GROUP   BY   ROLLUP    ( orderpriority )  \"  ,     (  \" SELECT   orderpriority ,    COUNT ( orderpriority )    FROM   orders   GROUP   BY   orderpriority   UNION    \"     +     \" SELECT   NULL ,    COUNT ( orderpriority )    FROM   orders \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupingSetsAggregateOnGroupedColumn"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   lna ,    lnb ,    SUM ( quantity )     \"     +     (  \" FROM    ( SELECT   linenumber   lna ,    linenumber   lnb ,    CAST ( quantity   AS   BIGINT )    quantity   FROM   lineitem )     \"     +     \" GROUP   BY   GROUPING   SETS    (  ( lna ,    lnb )  ,     ( lna )  ,     ( lnb )  ,     (  )  )  \"  )  )  ,     (  \" SELECT   linenumber ,    linenumber ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   linenumber   UNION   ALL    \"     +     (  (  \" SELECT   linenumber ,    NULL ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   linenumber   UNION   ALL    \"     +     \" SELECT   NULL ,    linenumber ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   linenumber   UNION   ALL    \"  )     +     \" SELECT   NULL ,    NULL ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupingSetsAliasedGroupingColumns"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   linenumber ,    suppkey ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   GROUPING   SETS    (  ( linenumber ,    suppkey )  ,     (  )  )  \"  ,     (  \" SELECT   linenumber ,    suppkey ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   linenumber ,    suppkey   UNION    \"     +     \" SELECT   NULL ,    NULL ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupingSetsGrandTotalSet"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   linenumber ,    suppkey ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   GROUPING   SETS    (  (  )  ,     ( linenumber )  ,     ( linenumber ,    suppkey )  )  \"  ,     (  \" SELECT   linenumber ,    suppkey ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   linenumber ,    suppkey   UNION   ALL    \"     +     (  \" SELECT   linenumber ,    NULL ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   linenumber   UNION   ALL    \"     +     \" SELECT   NULL ,    NULL ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupingSetsGrandTotalSetFirst"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   linenumber ,    suppkey ,    SUM ( suppkey )  ,    COUNT ( linenumber )  ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   GROUPING   SETS    (  ( linenumber ,    suppkey )  ,     (  )  )  \"  ,     (  \" SELECT   linenumber ,    suppkey ,    SUM ( suppkey )  ,    COUNT ( linenumber )  ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   linenumber ,    suppkey   UNION    \"     +     \" SELECT   NULL ,    NULL ,    SUM ( suppkey )  ,    COUNT ( linenumber )  ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupingSetsMultipleAggregatesOnGroupedColumn"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   linenumber ,    suppkey ,    COUNT ( CAST ( quantity   AS   BIGINT )  )  ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   GROUPING   SETS    (  ( linenumber ,    suppkey )  ,     (  )  )  \"  ,     (  \" SELECT   linenumber ,    suppkey ,    COUNT ( CAST ( quantity   AS   BIGINT )  )  ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   linenumber ,    suppkey   UNION    \"     +     \" SELECT   NULL ,    NULL ,    COUNT ( CAST ( quantity   AS   BIGINT )  )  ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupingSetsMultipleAggregatesOnUngroupedColumn"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   linenumber ,    suppkey ,    COUNT ( linenumber )  ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   GROUPING   SETS    (  ( linenumber ,    suppkey )  ,     (  )  )  \"  ,     (  \" SELECT   linenumber ,    suppkey ,    COUNT ( linenumber )  ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   linenumber ,    suppkey   UNION    \"     +     \" SELECT   NULL ,    NULL ,    COUNT ( linenumber )  ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupingSetsMultipleAggregatesWithGroupedColumns"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   GROUPING   SETS    (  (  )  ,     (  )  )  \"  ,     (  \" SELECT   SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   UNION   ALL    \"     +     \" SELECT   SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupingSetsMultipleGrandTotalSets"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   WHERE   quantity    <     0    GROUP   BY   GROUPING   SETS    (  (  )  ,     (  )  )  \"  ,     (  \" SELECT   SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   WHERE   quantity    <     0    UNION   ALL    \"     +     \" SELECT   SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   WHERE   quantity    <     0  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupingSetsMultipleGrandTotalSetsNoInput"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   linenumber ,    suppkey ,    SUM ( CAST ( quantity   AS   BIGINT )  )     \"     +     (  (  \" FROM   lineitem    \"     +     \" WHERE   quantity    <     0     \"  )     +     \" GROUP   BY   GROUPING   SETS    (  ( linenumber ,    suppkey )  ,     ( suppkey )  )  \"  )  )  ,     (  \" SELECT   linenumber ,    suppkey ,    SUM ( CAST ( quantity   AS   BIGINT )  )     \"     +     (  (  (  (  (  (  (  \" FROM   lineitem    \"     +     \" WHERE   quantity    <     0     \"  )     +     \" GROUP   BY   linenumber ,    suppkey    \"  )     +     \" UNION    \"  )     +     \" SELECT   NULL ,    suppkey ,    SUM ( CAST ( quantity   AS   BIGINT )  )     \"  )     +     \" FROM   lineitem    \"  )     +     \" WHERE   quantity    <     0     \"  )     +     \" GROUP   BY   suppkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupingSetsNoInput"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   GROUPING   SETS    (  (  )  )  \"  ,     \" SELECT   SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem \"  )  ;", "}", "METHOD_END"], "methodName": ["testGroupingSetsOnlyGrandTotalSet"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   linenumber ,    suppkey ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   GROUPING   SETS    (  (  )  ,     ( linenumber ,    suppkey )  ,     (  )  ,     ( linenumber ,    suppkey )  )  \"  ,     (  \" SELECT   linenumber ,    suppkey ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   linenumber ,    suppkey   UNION   ALL    \"     +     (  (  \" SELECT   NULL ,    NULL ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   UNION   ALL    \"     +     \" SELECT   linenumber ,    suppkey ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   linenumber ,    suppkey   UNION   ALL    \"  )     +     \" SELECT   NULL ,    NULL ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupingSetsRepeatedSetsAll"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   linenumber ,    suppkey ,    SUM ( CAST ( quantity   AS   BIGINT )  )     \"     +     (  (  \" FROM   lineitem    \"     +     \" WHERE   quantity    <     0     \"  )     +     \" GROUP   BY   GROUPING   SETS    (  (  )  ,     ( linenumber ,    suppkey )  ,     (  )  ,     ( linenumber ,    suppkey )  )  \"  )  )  ,     (  \" SELECT   linenumber ,    suppkey ,    SUM ( CAST ( quantity   AS   BIGINT )  )     \"     +     (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  \" FROM   lineitem    \"     +     \" WHERE   quantity    <     0     \"  )     +     \" GROUP   BY   linenumber ,    suppkey    \"  )     +     \" UNION   ALL    \"  )     +     \" SELECT   NULL ,    NULL ,    SUM ( CAST ( quantity   AS   BIGINT )  )     \"  )     +     \" FROM   lineitem    \"  )     +     \" WHERE   quantity    <     0     \"  )     +     \" UNION   ALL    \"  )     +     \" SELECT   linenumber ,    suppkey ,    SUM ( CAST ( quantity   AS   BIGINT )  )     \"  )     +     \" FROM   lineitem    \"  )     +     \" WHERE   quantity    <     0     \"  )     +     \" GROUP   BY   linenumber ,    suppkey    \"  )     +     \" UNION   ALL    \"  )     +     \" SELECT   NULL ,    NULL ,    SUM ( CAST ( quantity   AS   BIGINT )  )     \"  )     +     \" FROM   lineitem    \"  )     +     \" WHERE   quantity    <     0  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupingSetsRepeatedSetsAllNoInput"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   linenumber ,    suppkey ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   DISTINCT   GROUPING   SETS    (  (  )  ,     ( linenumber ,    suppkey )  ,     (  )  ,     ( linenumber ,    suppkey )  )  \"  ,     (  \" SELECT   linenumber ,    suppkey ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   linenumber ,    suppkey   UNION   ALL    \"     +     \" SELECT   NULL ,    NULL ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupingSetsRepeatedSetsDistinct"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   linenumber ,    suppkey ,    SUM ( CAST ( quantity   AS   BIGINT )  )     \"     +     (  (  \" FROM   lineitem    \"     +     \" WHERE   quantity    <     0     \"  )     +     \" GROUP   BY   GROUPING   SETS    (  ( linenumber ,    suppkey )  ,     ( suppkey )  ,     (  )  )  \"  )  )  ,     (  \" SELECT   linenumber ,    suppkey ,    SUM ( CAST ( quantity   AS   BIGINT )  )     \"     +     (  (  (  (  (  (  (  (  (  (  (  \" FROM   lineitem    \"     +     \" WHERE   quantity    <     0     \"  )     +     \" GROUP   BY   linenumber ,    suppkey    \"  )     +     \" UNION    \"  )     +     \" SELECT   NULL ,    suppkey ,    SUM ( CAST ( quantity   AS   BIGINT )  )     \"  )     +     \" FROM   lineitem    \"  )     +     \" WHERE   quantity    <     0     \"  )     +     \" GROUP   BY   suppkey    \"  )     +     \" UNION    \"  )     +     \" SELECT   NULL ,    NULL ,    SUM ( CAST ( quantity   AS   BIGINT )  )     \"  )     +     \" FROM   lineitem    \"  )     +     \" WHERE   quantity    <     0  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupingSetsWithGlobalAggregationNoInput"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   linenumber ,    suppkey ,    SUM ( DISTINCT   CAST ( quantity   AS   BIGINT )  )  ,    COUNT ( DISTINCT   linestatus )    FROM   lineitem   GROUP   BY   GROUPING   SETS    (  ( linenumber ,    suppkey )  ,     ( suppkey )  )  \"  ,     (  \" SELECT   linenumber ,    suppkey ,    SUM ( DISTINCT   CAST ( quantity   AS   BIGINT )  )  ,    COUNT ( DISTINCT   linestatus )    FROM   lineitem   GROUP   BY   linenumber ,    suppkey   UNION    \"     +     \" SELECT   NULL ,    suppkey ,    SUM ( DISTINCT   CAST ( quantity   AS   BIGINT )  )  ,    COUNT ( DISTINCT   linestatus )    FROM   lineitem   GROUP   BY   suppkey \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupingSetsWithMultipleDistinct"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   linenumber ,    COUNT ( DISTINCT   linenumber )  ,    SUM ( DISTINCT   suppkey )    FROM    \"     +     (  \"  ( SELECT    *    FROM   lineitem   WHERE   linenumber %  2     =     0    UNION   ALL   SELECT    *    FROM   lineitem   WHERE   linenumber %  2     =     1  )     \"     +     \" GROUP   BY   GROUPING   SETS    (  ( linenumber )  ,     (  )  )  \"  )  )  ,     (  \" SELECT   linenumber ,     1  ,    SUM ( DISTINCT   suppkey )    FROM   lineitem   GROUP   BY   linenumber   UNION   ALL    \"     +     \" SELECT   NULL ,    COUNT ( DISTINCT   linenumber )  ,    SUM ( DISTINCT   suppkey )    FROM   lineitem \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupingSetsWithMultipleDistinctAndUnion"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   linenumber ,    suppkey ,    SUM ( DISTINCT   CAST ( quantity   AS   BIGINT )  )  ,    COUNT ( DISTINCT   linestatus )     \"     +     (  (  \" FROM   lineitem    \"     +     \" WHERE   quantity    <     0     \"  )     +     \" GROUP   BY   GROUPING   SETS    (  ( linenumber ,    suppkey )  ,     ( suppkey )  )  \"  )  )  ,     (  \" SELECT   linenumber ,    suppkey ,    SUM ( DISTINCT   CAST ( quantity   AS   BIGINT )  )  ,    COUNT ( DISTINCT   linestatus )     \"     +     (  (  (  (  (  (  (  \" FROM   lineitem    \"     +     \" WHERE   quantity    <     0     \"  )     +     \" GROUP   BY   linenumber ,    suppkey    \"  )     +     \" UNION    \"  )     +     \" SELECT   NULL ,    suppkey ,    SUM ( DISTINCT   CAST ( quantity   AS   BIGINT )  )  ,    COUNT ( DISTINCT   linestatus )     \"  )     +     \" FROM   lineitem    \"  )     +     \" WHERE   quantity    <     0     \"  )     +     \" GROUP   BY   suppkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupingSetsWithMultipleDistinctNoInput"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   linenumber ,    suppkey ,    SUM ( DISTINCT   CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   GROUPING   SETS    (  ( linenumber ,    suppkey )  ,     ( suppkey )  )  \"  ,     (  \" SELECT   linenumber ,    suppkey ,    SUM ( DISTINCT   CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   linenumber ,    suppkey   UNION    \"     +     \" SELECT   NULL ,    suppkey ,    SUM ( DISTINCT   CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   suppkey \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupingSetsWithSingleDistinct"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   suppkey ,    COUNT ( DISTINCT   linenumber )    FROM    \"     +     (  \"  ( SELECT    *    FROM   lineitem   WHERE   linenumber %  2     =     0    UNION   ALL   SELECT    *    FROM   lineitem   WHERE   linenumber %  2     =     1  )     \"     +     \" GROUP   BY   GROUPING   SETS    (  ( suppkey )  ,     (  )  )  \"  )  )  ,     (  \" SELECT   suppkey ,    COUNT ( DISTINCT   linenumber )    FROM   lineitem   GROUP   BY   suppkey   UNION   ALL    \"     +     \" SELECT   NULL ,    COUNT ( DISTINCT   linenumber )    FROM   lineitem \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupingSetsWithSingleDistinctAndUnion"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   linenumber ,    COUNT ( DISTINCT   linenumber )    FROM    \"     +     (  \"  ( SELECT    *    FROM   lineitem   WHERE   linenumber %  2     =     0    UNION   ALL   SELECT    *    FROM   lineitem   WHERE   linenumber %  2     =     1  )     \"     +     \" GROUP   BY   GROUPING   SETS    (  ( linenumber )  ,     (  )  )  \"  )  )  ,     (  \" SELECT   DISTINCT   linenumber ,     1    FROM   lineitem   UNION   ALL    \"     +     \" SELECT   NULL ,    COUNT ( DISTINCT   linenumber )    FROM   lineitem \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupingSetsWithSingleDistinctAndUnionGroupedArguments"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   lines ,    COUNT (  *  )    FROM    ( SELECT   orderkey ,    COUNT (  *  )    lines   FROM   lineitem   GROUP   BY   orderkey )    U   GROUP   BY   lines \"  )  ;", "}", "METHOD_END"], "methodName": ["testHistogram"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT ( DISTINCT   orderstatus )  ,    SUM ( DISTINCT   custkey )    FROM   orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testMultipleDifferentDistinct"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT ( DISTINCT   custkey )  ,    SUM ( DISTINCT   custkey )    FROM   orders \"  ,     \" SELECT   COUNT (  *  )  ,    SUM ( custkey )    FROM    ( SELECT   DISTINCT   custkey   FROM   orders )    t \"  )  ;", "}", "METHOD_END"], "methodName": ["testMultipleDistinct"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM    ( SELECT   orderkey ,    COUNT (  *  )    FROM   lineitem   GROUP   BY   orderkey )    x \"  )  ;", "}", "METHOD_END"], "methodName": ["testNestedCount"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   custkey ,    sum ( t )    FROM    ( SELECT   custkey ,    count (  *  )    t   FROM   orders   GROUP   BY   custkey )    GROUP   BY   custkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testNestedGroupByWithSameKey"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   orderpriority ,    custkey ,    array _ agg ( orderstatus   ORDER   BY   orderstatus )    FILTER    ( WHERE   custkey    >     5  0  0  )  \"     +     (  (  \" FROM   orders    \"     +     \" WHERE   orderkey   IN    (  1  ,     2  ,     3  ,     4  ,     5  )     \"  )     +     \" GROUP   BY   GROUPING   SETS    (  (  )  ,     ( orderpriority )  ,     ( orderpriority ,    custkey )  )  \"  )  )  ,     (  \" VALUES    \"     +     (  (  (  (  (  (  (  \"  ( NULL ,    NULL    ,     (  ' F '  ,     ' O '  ,     ' O '  )  )  ,  \"     +     \"  (  '  5  - LOW '  ,    NULL    ,     (  ' F '  ,     ' O '  )  )  ,  \"  )     +     \"  (  '  1  - URGENT '  ,    NULL    ,     (  ' O '  )  )  ,  \"  )     +     \"  (  '  5  - LOW '  ,     3  7  0     ,    NULL )  ,  \"  )     +     \"  (  '  5  - LOW '  ,     1  2  3  4  ,     (  ' F '  )  )  ,  \"  )     +     \"  (  '  5  - LOW '  ,     1  3  6  9  ,     (  ' O '  )  )  ,  \"  )     +     \"  (  '  5  - LOW '  ,     4  4  5     ,    NULL )  ,  \"  )     +     \"  (  '  1  - URGENT '  ,     7  8  1     ,     (  ' O '  )  )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testOrderedAggregations"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   orderstatus ,    a ,    custkey ,    b   FROM    ( SELECT   custkey ,    orderstatus ,     - COUNT (  *  )    a ,    MAX ( orderkey )    b   FROM   orders   WHERE   orderkey    =     1    GROUP   BY   custkey ,    orderstatus )    T \"  )  ;", "}", "METHOD_END"], "methodName": ["testReorderOutputsOfGroupByAggregation"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   linenumber ,    suppkey ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   ROLLUP    ( linenumber ,    suppkey )  \"  ,     (  \" SELECT   linenumber ,    suppkey ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   linenumber ,    suppkey   UNION   ALL    \"     +     (  \" SELECT   linenumber ,    NULL ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem   GROUP   BY   linenumber   UNION   ALL    \"     +     \" SELECT   NULL ,    NULL ,    SUM ( CAST ( quantity   AS   BIGINT )  )    FROM   lineitem \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testRollup"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   max ( a )  ,    max ( b )    FROM    ( SELECT   custkey   a ,    custkey   b   FROM   orders )    x \"  )  ;", "}", "METHOD_END"], "methodName": ["testSameInputToAggregates"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   custkey ,    orderstatus ,    COUNT ( DISTINCT   orderkey )    FROM   orders   GROUP   BY   custkey ,    orderstatus \"  )  ;", "assertQuery (  \" SELECT   custkey ,    orderstatus ,    COUNT ( DISTINCT   orderkey )  ,    SUM ( DISTINCT   orderkey )    FROM   orders   GROUP   BY   custkey ,    orderstatus \"  )  ;", "assertQuery (  (  \"  \"     +     (  (  (  (  (  \" SELECT   custkey ,    COUNT ( DISTINCT   orderstatus )    FROM    (  \"     +     \"          SELECT   orders . custkey   AS   custkey ,    orders . orderstatus   AS   orderstatus    \"  )     +     \"          FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   orders . orderkey    =    lineitem . partkey    \"  )     +     \"          GROUP   BY   orders . custkey ,    orders . orderstatus \"  )     +     \"  )     \"  )     +     \" GROUP   BY   custkey \"  )  )  )  ;", "assertQuery (  \" SELECT   custkey ,    COUNT ( DISTINCT   orderkey )  ,    COUNT ( DISTINCT   orderstatus )    FROM   orders   GROUP   BY   custkey \"  )  ;", "assertQuery (  \" SELECT   SUM ( DISTINCT   x )    FROM    ( SELECT   custkey ,    COUNT ( DISTINCT   orderstatus )    x   FROM   orders   GROUP   BY   custkey )    t \"  )  ;", "}", "METHOD_END"], "methodName": ["testSingleDistinctOptimizer"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   linenumber ,    SUM ( CAST ( quantity   AS   BIGINT )  )     \"     +     (  \" FROM   lineitem    \"     +     \" GROUP   BY   GROUPING   SETS    ( linenumber )  \"  )  )  ,     (  \" SELECT   linenumber ,    SUM ( CAST ( quantity   AS   BIGINT )  )     \"     +     (  \" FROM   lineitem    \"     +     \" GROUP   BY   linenumber \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSingleGroupingSet"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   orderstatus ,    sum ( CAST ( NULL   AS   BIGINT )  )    FROM   orders   GROUP   BY   orderstatus \"  )  ;", "}", "METHOD_END"], "methodName": ["testSumOfNulls"], "fileName": "com.facebook.presto.tests.AbstractTestAggregations"}, {"methodBody": ["METHOD_START", "{", "assertUpdate ( session ,     (  (  (  \" CREATE   TABLE    \"     +    table )     +     \"    AS    \"  )     +    query )  ,    rowCountQuery )  ;", "assertQuery ( session ,     (  \" SELECT    *    FROM    \"     +    table )  ,    expecy )  ;", "assertUpdate ( session ,     (  \" DROP   TABLE    \"     +    table )  )  ;", "assertFalse ( getQueryRunner (  )  . tableExists ( session ,    table )  )  ;", "}", "METHOD_END"], "methodName": ["assertCreateTableAsSelect"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "assertCreateTableAsSelect ( getSession (  )  ,    table ,    query ,    query ,    rowCountQuery )  ;", "}", "METHOD_END"], "methodName": ["assertCreateTableAsSelect"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "assertCreateTableAsSelect ( getSession (  )  ,    table ,    query ,    expectedQuery ,    rowCountQuery )  ;", "}", "METHOD_END"], "methodName": ["assertCreateTableAsSelect"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "String   value    =     (  ( String )     ( computeActual ( query )  . getOnlyValue (  )  )  )  ;", "assertTrue ( value . matches (  \"  (  ? s :  .  *  ) CPU :  .  *  ,    Input :  .  *  ,    Output (  ? s :  .  *  )  \"  )  ,    String . format (  \" Expected   output   to   contain    \\  \" CPU :  .  *  ,    Input :  .  *  ,    Output \\  \"  ,    but   it   is    % s \"  ,    value )  )  ;", "}", "METHOD_END"], "methodName": ["assertExplainAnalyze"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "long   start    =    System . nanoTime (  )  ;", "while    (  !  ( Thread . currentThread (  )  . isInterrup (  )  )  )     {", "try    {", "assertion . run (  )  ;", "return ;", "}    catch    ( AssertionError   e )     {", "if    (  ( nanosSince ( start )  . compareTo ( timeout )  )     >     0  )     {", "throw   e ;", "}", "}", "sleepUninterruptibly (  5  0  ,    TimeUnit . MILLISECONDS )  ;", "}", "}", "METHOD_END"], "methodName": ["assertUntilTimeout"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["supportsViews"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "assertUpdate (  \" CREATE   TABLE   test _ add _ column   AS   SELECT    1  2  3    x \"  ,     1  )  ;", "assertUpdate (  \" CREATE   TABLE   test _ add _ column _ a   AS   SELECT    2  3  4    x ,     1  1  1    a \"  ,     1  )  ;", "assertUpdate (  \" CREATE   TABLE   test _ add _ column _ ab   AS   SELECT    3  4  5    x ,     2  2  2    a ,     3  3  .  3 E 0    b \"  ,     1  )  ;", "assertQueryFails (  \" ALTER   TABLE   test _ add _ column   ADD   COLUMN   x   bigint \"  ,     \"  .  *    Column    ' x '    already   exists \"  )  ;", "assertQueryFails (  \" ALTER   TABLE   test _ add _ column   ADD   COLUMN   X   bigint \"  ,     \"  .  *    Column    ' X '    already   exists \"  )  ;", "assertUpdate (  \" ALTER   TABLE   test _ add _ column   ADD   COLUMN   a   bigint \"  )  ;", "assertUpdate (  \" INSERT   INTO   test _ add _ column   SELECT    *    FROM   test _ add _ column _ a \"  ,     1  )  ;", "MaterializedResult   materializedRows    =    computeActual (  \" SELECT   x ,    a   FROM   test _ add _ column   ORDER   BY   x \"  )  ;", "assertEquals ( materializedRows . getMaterializedRows (  )  . get (  0  )  . getField (  0  )  ,     1  2  3  )  ;", "assertEquals ( materializedRows . getMaterializedRows (  )  . get (  0  )  . getField (  1  )  ,    null )  ;", "assertEquals ( materializedRows . getMaterializedRows (  )  . get (  1  )  . getField (  0  )  ,     2  3  4  )  ;", "assertEquals ( materializedRows . getMaterializedRows (  )  . get (  1  )  . getField (  1  )  ,     1  1  1 L )  ;", "assertUpdate (  \" ALTER   TABLE   test _ add _ column   ADD   COLUMN   b   double \"  )  ;", "assertUpdate (  \" INSERT   INTO   test _ add _ column   SELECT    *    FROM   test _ add _ column _ ab \"  ,     1  )  ;", "materializedRows    =    computeActual (  \" SELECT   x ,    a ,    b   FROM   test _ add _ column   ORDER   BY   x \"  )  ;", "assertEquals ( materializedRows . getMaterializedRows (  )  . get (  0  )  . getField (  0  )  ,     1  2  3  )  ;", "assertEquals ( materializedRows . getMaterializedRows (  )  . get (  0  )  . getField (  1  )  ,    null )  ;", "assertEquals ( materializedRows . getMaterializedRows (  )  . get (  0  )  . getField (  2  )  ,    null )  ;", "assertEquals ( materializedRows . getMaterializedRows (  )  . get (  1  )  . getField (  0  )  ,     2  3  4  )  ;", "assertEquals ( materializedRows . getMaterializedRows (  )  . get (  1  )  . getField (  1  )  ,     1  1  1 L )  ;", "assertEquals ( materializedRows . getMaterializedRows (  )  . get (  1  )  . getField (  2  )  ,    null )  ;", "assertEquals ( materializedRows . getMaterializedRows (  )  . get (  2  )  . getField (  0  )  ,     3  4  5  )  ;", "assertEquals ( materializedRows . getMaterializedRows (  )  . get (  2  )  . getField (  1  )  ,     2  2  2 L )  ;", "assertEquals ( materializedRows . getMaterializedRows (  )  . get (  2  )  . getField (  2  )  ,     3  3  .  3  )  ;", "assertUpdate (  \" DROP   TABLE   test _ add _ column \"  )  ;", "assertUpdate (  \" DROP   TABLE   test _ add _ column _ a \"  )  ;", "assertUpdate (  \" DROP   TABLE   test _ add _ column _ ab \"  )  ;", "assertFalse ( getQueryRunner (  )  . tableExists ( getSession (  )  ,     \" test _ add _ column \"  )  )  ;", "assertFalse ( getQueryRunner (  )  . tableExists ( getSession (  )  ,     \" test _ add _ column _ a \"  )  )  ;", "assertFalse ( getQueryRunner (  )  . tableExists ( getSession (  )  ,     \" test _ add _ column _ ab \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testAddColumn"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "AbstractTestQueryFramework . skipTestUnless ( supportsViews (  )  )  ;", "assertUpdate (  \" CREATE   TABLE   test _ table _  1    AS   SELECT    ' abcdefg '    a \"  ,     1  )  ;", "assertUpdate (  \" CREATE   VIEW   test _ view _  1    AS   SELECT   a   FROM   test _ table _  1  \"  )  ;", "assertQuery (  \" SELECT    *    FROM   test _ view _  1  \"  ,     \" VALUES    ' abcdefg '  \"  )  ;", "assertUpdate (  \" DROP   TABLE   test _ table _  1  \"  )  ;", "assertUpdate (  \" CREATE   TABLE   test _ table _  1    AS   SELECT    ' abc '    a \"  ,     1  )  ;", "assertQuery (  \" SELECT    *    FROM   test _ view _  1  \"  ,     \" VALUES    ' abc '  \"  )  ;", "assertUpdate (  \" DROP   VIEW   test _ view _  1  \"  )  ;", "assertUpdate (  \" DROP   TABLE   test _ table _  1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testCompatibleTypeChangeForView"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "AbstractTestQueryFramework . skipTestUnless ( supportsViews (  )  )  ;", "assertUpdate (  \" CREATE   TABLE   test _ table _  2    AS   SELECT   BIGINT    '  1  '    v \"  ,     1  )  ;", "assertUpdate (  \" CREATE   VIEW   test _ view _  2    AS   SELECT    *    FROM   test _ table _  2  \"  )  ;", "assertQuery (  \" SELECT    *    FROM   test _ view _  2  \"  ,     \" VALUES    1  \"  )  ;", "assertUpdate (  \" DROP   TABLE   test _ table _  2  \"  )  ;", "assertUpdate (  \" CREATE   TABLE   test _ table _  2    AS   SELECT   INTEGER    '  1  '    v \"  ,     1  )  ;", "assertQuery (  \" SELECT    *    FROM   test _ view _  2    WHERE   v    =     1  \"  ,     \" VALUES    1  \"  )  ;", "assertUpdate (  \" DROP   VIEW   test _ view _  2  \"  )  ;", "assertUpdate (  \" DROP   TABLE   test _ table _  2  \"  )  ;", "}", "METHOD_END"], "methodName": ["testCompatibleTypeChangeForView2"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    Session . builder ( getSession (  )  )  . setSystemProperty ( OPTIMIZE _ DISTINCT _ AGGREGATIONS ,     \" true \"  )  . build (  )  ;", "asserty ( session ,     (  \" WITH   t ( a ,    b )    AS    ( VALUES    (  1  ,    INTERVAL    '  1  '    SECOND )  )     \"     +     \" SELECT   count ( DISTINCT   a )  ,    CAST ( max ( b )    AS   VARCHAR )    FROM   t \"  )  ,     \" VALUES    (  1  ,     '  0     0  0  :  0  0  :  0  1  .  0  0  0  '  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testComplexCast"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "assertUpdate (  \" CREATE   TABLE   test _ create    ( a   bigint ,    b   double ,    c   varchar )  \"  )  ;", "assertTrue ( getQueryRunner (  )  . tableExists ( getSession (  )  ,     \" test _ create \"  )  )  ;", "assertTableColumnNames (  \" test _ create \"  ,     \" a \"  ,     \" b \"  ,     \" c \"  )  ;", "assertUpdate (  \" DROP   TABLE   test _ create \"  )  ;", "assertFalse ( getQueryRunner (  )  . tableExists ( getSession (  )  ,     \" test _ create \"  )  )  ;", "assertUpdate (  \" CREATE   TABLE   test _ create _ table _ if _ not _ exists    ( a   bigint ,    b   varchar ,    c   double )  \"  )  ;", "assertTrue ( getQueryRunner (  )  . tableExists ( getSession (  )  ,     \" test _ create _ table _ if _ not _ exists \"  )  )  ;", "assertTableColumnNames (  \" test _ create _ table _ if _ not _ exists \"  ,     \" a \"  ,     \" b \"  ,     \" c \"  )  ;", "assertUpdate (  \" CREATE   TABLE   IF   NOT   EXISTS   test _ create _ table _ if _ not _ exists    ( d   bigint ,    e   varchar )  \"  )  ;", "assertTrue ( getQueryRunner (  )  . tableExists ( getSession (  )  ,     \" test _ create _ table _ if _ not _ exists \"  )  )  ;", "assertTableColumnNames (  \" test _ create _ table _ if _ not _ exists \"  ,     \" a \"  ,     \" b \"  ,     \" c \"  )  ;", "assertUpdate (  \" DROP   TABLE   test _ create _ table _ if _ not _ exists \"  )  ;", "assertFalse ( getQueryRunner (  )  . tableExists ( getSession (  )  ,     \" test _ create _ table _ if _ not _ exists \"  )  )  ;", "assertUpdate (  \" CREATE   TABLE   test _ create _ original    ( a   bigint ,    b   double ,    c   varchar )  \"  )  ;", "assertTrue ( getQueryRunner (  )  . tableExists ( getSession (  )  ,     \" test _ create _ original \"  )  )  ;", "assertTableColumnNames (  \" test _ create _ original \"  ,     \" a \"  ,     \" b \"  ,     \" c \"  )  ;", "assertUpdate (  \" CREATE   TABLE   test _ create _ like    ( LIKE   test _ create _ original ,    d   boolean ,    e   varchar )  \"  )  ;", "assertTrue ( getQueryRunner (  )  . tableExists ( getSession (  )  ,     \" test _ create _ like \"  )  )  ;", "assertTableColumnNames (  \" test _ create _ like \"  ,     \" a \"  ,     \" b \"  ,     \" c \"  ,     \" d \"  ,     \" e \"  )  ;", "assertUpdate (  \" DROP   TABLE   test _ create _ original \"  )  ;", "assertFalse ( getQueryRunner (  )  . tableExists ( getSession (  )  ,     \" test _ create _ original \"  )  )  ;", "assertUpdate (  \" DROP   TABLE   test _ create _ like \"  )  ;", "assertFalse ( getQueryRunner (  )  . tableExists ( getSession (  )  ,     \" test _ create _ like \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testCreateTable"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "assertUpdate (  \" CREATE   TABLE   test _ create _ table _ as _ if _ not _ exists    ( a   bigint ,    b   double )  \"  )  ;", "assertTrue ( getQueryRunner (  )  . tableExists ( getSession (  )  ,     \" test _ create _ table _ as _ if _ not _ exists \"  )  )  ;", "assertTableColumnNames (  \" test _ create _ table _ as _ if _ not _ exists \"  ,     \" a \"  ,     \" b \"  )  ;", "assertUpdate (  \" CREATE   TABLE   IF   NOT   EXISTS   test _ create _ table _ as _ if _ not _ exists   AS   SELECT   orderkey ,    discount   FROM   lineitem \"  ,     0  )  ;", "assertTrue ( getQueryRunner (  )  . tableExists ( getSession (  )  ,     \" test _ create _ table _ as _ if _ not _ exists \"  )  )  ;", "assertTableColumnNames (  \" test _ create _ table _ as _ if _ not _ exists \"  ,     \" a \"  ,     \" b \"  )  ;", "assertUpdate (  \" DROP   TABLE   test _ create _ table _ as _ if _ not _ exists \"  )  ;", "assertFalse ( getQueryRunner (  )  . tableExists ( getSession (  )  ,     \" test _ create _ table _ as _ if _ not _ exists \"  )  )  ;", "assertCreateTableAsSelect (  \" test _ select \"  ,     \" SELECT   orderdate ,    orderkey ,    totalprice   FROM   orders \"  ,     \" SELECT   count (  *  )    FROM   orders \"  )  ;", "assertCreateTableAsSelect (  \" test _ group \"  ,     \" SELECT   orderstatus ,    sum ( totalprice )    x   FROM   orders   GROUP   BY   orderstatus \"  ,     \" SELECT   count ( DISTINCT   orderstatus )    FROM   orders \"  )  ;", "assertCreateTableAsSelect (  \" test _ join \"  ,     \" SELECT   count (  *  )    x   FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey \"  ,     \" SELECT    1  \"  )  ;", "assertCreateTableAsSelect (  \" test _ limit \"  ,     \" SELECT   orderkey   FROM   orders   ORDER   BY   orderkey   LIMIT    1  0  \"  ,     \" SELECT    1  0  \"  )  ;", "assertCreateTableAsSelect (  \" test _ unicode \"  ,     \" SELECT    \\  '  \\ u 2  6  0  3  \\  '    unicode \"  ,     \" SELECT    1  \"  )  ;", "assertCreateTableAsSelect (  \" test _ with _ data \"  ,     \" SELECT    *    FROM   orders   WITH   DATA \"  ,     \" SELECT    *    FROM   orders \"  ,     \" SELECT   count (  *  )    FROM   orders \"  )  ;", "assertCreateTableAsSelect (  \" test _ with _ no _ data \"  ,     \" SELECT    *    FROM   orders   WITH   NO   DATA \"  ,     \" SELECT    *    FROM   orders   LIMIT    0  \"  ,     \" SELECT    0  \"  )  ;", "assertCreateTableAsSelect (  \" test _ union _ all \"  ,     (  \" SELECT   orderdate ,    orderkey ,    totalprice   FROM   orders   WHERE   orderkey    %     2     =     0    UNION   ALL    \"     +     \" SELECT   orderdate ,    orderkey ,    totalprice   FROM   orders   WHERE   orderkey    %     2     =     1  \"  )  ,     \" SELECT   orderdate ,    orderkey ,    totalprice   FROM   orders \"  ,     \" SELECT   count (  *  )    FROM   orders \"  )  ;", "assertCreateTableAsSelect ( Session . builder ( getSession (  )  )  . setSystemProperty (  \" red _ writes \"  ,     \" true \"  )  . build (  )  ,     \" test _ union _ all \"  ,     (  \" SELECT   orderdate ,    orderkey ,    totalprice   FROM   orders   UNION   ALL    \"     +     \" SELECT   DATE    '  2  0  0  0  -  0  1  -  0  1  '  ,     1  2  3  4  5  6  7  8  9  0  ,     1  .  2  3  \"  )  ,     (  \" SELECT   orderdate ,    orderkey ,    totalprice   FROM   orders   UNION   ALL    \"     +     \" SELECT   DATE    '  2  0  0  0  -  0  1  -  0  1  '  ,     1  2  3  4  5  6  7  8  9  0  ,     1  .  2  3  \"  )  ,     \" SELECT   count (  *  )     +     1    FROM   orders \"  )  ;", "assertCreateTableAsSelect ( Session . builder ( getSession (  )  )  . setSystemProperty (  \" red _ writes \"  ,     \" false \"  )  . build (  )  ,     \" test _ union _ all \"  ,     (  \" SELECT   orderdate ,    orderkey ,    totalprice   FROM   orders   UNION   ALL    \"     +     \" SELECT   DATE    '  2  0  0  0  -  0  1  -  0  1  '  ,     1  2  3  4  5  6  7  8  9  0  ,     1  .  2  3  \"  )  ,     (  \" SELECT   orderdate ,    orderkey ,    totalprice   FROM   orders   UNION   ALL    \"     +     \" SELECT   DATE    '  2  0  0  0  -  0  1  -  0  1  '  ,     1  2  3  4  5  6  7  8  9  0  ,     1  .  2  3  \"  )  ,     \" SELECT   count (  *  )     +     1    FROM   orders \"  )  ;", "assertExplainAnalyze (  \" EXPLAIN   ANALYZE   CREATE   TABLE   analyze _ test   AS   SELECT   orderstatus   FROM   orders \"  )  ;", "assertQuery (  \" SELECT    *    from   analyze _ test \"  ,     \" SELECT   orderstatus   FROM   orders \"  )  ;", "assertUpdate (  \" DROP   TABLE   analyze _ test \"  )  ;", "}", "METHOD_END"], "methodName": ["testCreateTableAsSelect"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "assertUpdate (  \" CREATE   TABLE   test _ delete   AS   SELECT    *    FROM   orders \"  ,     \" SELECT   count (  *  )    FROM   orders \"  )  ;", "assertUpdate (  \" DELETE   FROM   test _ delete   WHERE   orderkey    %     2     =     0  \"  ,     \" SELECT   count (  *  )    FROM   orders   WHERE   orderkey    %     2     =     0  \"  )  ;", "assertQuery (  \" SELECT    *    FROM   test _ delete \"  ,     \" SELECT    *    FROM   orders   WHERE   orderkey    %     2     <  >     0  \"  )  ;", "assertUpdate (  \" DELETE   FROM   test _ delete \"  ,     \" SELECT   count (  *  )    FROM   orders   WHERE   orderkey    %     2     <  >     0  \"  )  ;", "assertQuery (  \" SELECT    *    FROM   test _ delete \"  ,     \" SELECT    *    FROM   orders   LIMIT    0  \"  )  ;", "assertUpdate (  \" DROP   TABLE   test _ delete \"  )  ;", "assertUpdate (  \" CREATE   TABLE   test _ delete   AS   SELECT    *    FROM   orders \"  ,     \" SELECT   count (  *  )    FROM   orders \"  )  ;", "assertUpdate (  \" DELETE   FROM   test _ delete   WHERE   custkey    <  =     1  0  0  \"  ,     \" SELECT   count (  *  )    FROM   orders   WHERE   custkey    <  =     1  0  0  \"  )  ;", "assertQuery (  \" SELECT    *    FROM   test _ delete \"  ,     \" SELECT    *    FROM   orders   WHERE   custkey    >     1  0  0  \"  )  ;", "assertUpdate (  \" DELETE   FROM   test _ delete   WHERE   custkey    <  =     3  0  0  \"  ,     \" SELECT   count (  *  )    FROM   orders   WHERE   custkey    >     1  0  0    AND   custkey    <  =     3  0  0  \"  )  ;", "assertQuery (  \" SELECT    *    FROM   test _ delete \"  ,     \" SELECT    *    FROM   orders   WHERE   custkey    >     3  0  0  \"  )  ;", "assertUpdate (  \" DELETE   FROM   test _ delete   WHERE   custkey    <  =     5  0  0  \"  ,     \" SELECT   count (  *  )    FROM   orders   WHERE   custkey    >     3  0  0    AND   custkey    <  =     5  0  0  \"  )  ;", "assertQuery (  \" SELECT    *    FROM   test _ delete \"  ,     \" SELECT    *    FROM   orders   WHERE   custkey    >     5  0  0  \"  )  ;", "assertUpdate (  \" DROP   TABLE   test _ delete \"  )  ;", "assertUpdate (  \" CREATE   TABLE   test _ delete   AS   SELECT    *    FROM   orders \"  ,     \" SELECT   count (  *  )    FROM   orders \"  )  ;", "assertUpdate (  \" DELETE   FROM   test _ delete   WHERE   orderstatus    =     ' O '  \"  ,     \" SELECT   count (  *  )    FROM   orders   WHERE   orderstatus    =     ' O '  \"  )  ;", "assertQuery (  \" SELECT    *    FROM   test _ delete \"  ,     \" SELECT    *    FROM   orders   WHERE   orderstatus    <  >     ' O '  \"  )  ;", "assertUpdate (  \" DROP   TABLE   test _ delete \"  )  ;", "assertUpdate (  \" CREATE   TABLE   test _ delete   AS   SELECT    *    FROM   orders \"  ,     \" SELECT   count (  *  )    FROM   orders \"  )  ;", "assertUpdate (  \" DELETE   FROM   test _ delete   WHERE   rand (  )     <     0  \"  ,     0  )  ;", "assertUpdate (  \" DELETE   FROM   test _ delete   WHERE   orderkey    <     0  \"  ,     0  )  ;", "assertUpdate (  \" DROP   TABLE   test _ delete \"  )  ;", "assertUpdate (  \" CREATE   TABLE   test _ delete   AS   SELECT    *    FROM   orders \"  ,     \" SELECT   count (  *  )    FROM   orders \"  )  ;", "assertUpdate (  \" DELETE   FROM   test _ delete   WHERE   orderkey    >     5    AND   orderkey    <     4  \"  ,     0  )  ;", "assertUpdate (  \" DROP   TABLE   test _ delete \"  )  ;", "assertUpdate (  \" CREATE   TABLE   test _ delete   AS   SELECT    *    FROM   lineitem \"  ,     \" SELECT   count (  *  )    FROM   lineitem \"  )  ;", "assertUpdate (  \" DELETE   FROM   test _ delete   WHERE   orderkey   IN    ( SELECT   orderkey   FROM   orders   WHERE   orderstatus    =     ' F '  )  \"  ,     \" SELECT   count (  *  )    FROM   lineitem   WHERE   orderkey   IN    ( SELECT   orderkey   FROM   orders   WHERE   orderstatus    =     ' F '  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM   test _ delete \"  ,     \" SELECT    *    FROM   lineitem   WHERE   orderkey   IN    ( SELECT   orderkey   FROM   orders   WHERE   orderstatus    <  >     ' F '  )  \"  )  ;", "assertUpdate (  \" DROP   TABLE   test _ delete \"  )  ;", "assertUpdate (  \" CREATE   TABLE   test _ delete   AS   SELECT    *    FROM   lineitem \"  ,     \" SELECT   count (  *  )    FROM   lineitem \"  )  ;", "assertUpdate (  (  \" DELETE   FROM   test _ delete \\ n \"     +     (  \" WHERE   orderkey   IN    ( SELECT   orderkey   FROM   orders   WHERE   orderstatus    =     \\  ' F \\  '  )  \\ n \"     +     \"       AND   orderkey   IN    ( SELECT   orderkey   FROM   orders   WHERE   custkey    %     5     =     0  )  \\ n \"  )  )  ,     (  \" SELECT   count (  *  )    FROM   lineitem \\ n \"     +     (  \" WHERE   orderkey   IN    ( SELECT   orderkey   FROM   orders   WHERE   orderstatus    =     \\  ' F \\  '  )  \\ n \"     +     \"       AND   orderkey   IN    ( SELECT   orderkey   FROM   orders   WHERE   custkey    %     5     =     0  )  \"  )  )  )  ;", "assertQuery (  \" SELECT    *    FROM   test _ delete \"  ,     (  \" SELECT    *    FROM   lineitem \\ n \"     +     (  \" WHERE   orderkey   IN    ( SELECT   orderkey   FROM   orders   WHERE   orderstatus    <  >     \\  ' F \\  '  )  \\ n \"     +     \"       OR   orderkey   IN    ( SELECT   orderkey   FROM   orders   WHERE   custkey    %     5     <  >     0  )  \"  )  )  )  ;", "assertUpdate (  \" DROP   TABLE   test _ delete \"  )  ;", "assertUpdate (  \" CREATE   TABLE   test _ delete   AS   SELECT    *    FROM   orders \"  ,     \" SELECT   count (  *  )    FROM   orders \"  )  ;", "assertUpdate (  (  \" DELETE   FROM   test _ delete \\ n \"     +     \" WHERE    ( orderkey   IN    ( SELECT   CASE   WHEN   orderkey    %     3     =     0    THEN   NULL   ELSE   orderkey   END   FROM   lineitem )  )    IS   NULL \\ n \"  )  ,     (  \" SELECT   count (  *  )    FROM   orders \\ n \"     +     \" WHERE    ( orderkey   IN    ( SELECT   CASE   WHEN   orderkey    %     3     =     0    THEN   NULL   ELSE   orderkey   END   FROM   lineitem )  )    IS   NULL \\ n \"  )  )  ;", "assertQuery (  \" SELECT    *    FROM   test _ delete \"  ,     (  \" SELECT    *    FROM   orders \\ n \"     +     \" WHERE    ( orderkey   IN    ( SELECT   CASE   WHEN   orderkey    %     3     =     0    THEN   NULL   ELSE   orderkey   END   FROM   lineitem )  )    IS   NOT   NULL \\ n \"  )  )  ;", "assertUpdate (  \" DROP   TABLE   test _ delete \"  )  ;", "assertUpdate (  \" CREATE   TABLE   test _ delete   AS   SELECT    *    FROM   orders \"  ,     \" SELECT   count (  *  )    FROM   orders \"  )  ;", "assertUpdate (  \" DELETE   FROM   test _ delete   WHERE   orderkey    =     ( SELECT   orderkey   FROM   orders   ORDER   BY   orderkey   LIMIT    1  )  \"  ,     1  )  ;", "assertUpdate (  \" DELETE   FROM   test _ delete   WHERE   orderkey    =     ( SELECT   orderkey   FROM   orders   WHERE   false )  \"  ,     0  )  ;", "assertUpdate (  \" DELETE   FROM   test _ delete   WHERE   EXISTS ( SELECT    1    WHERE   false )  \"  ,     0  )  ;", "assertUpdate (  \" DELETE   FROM   test _ delete   WHERE   EXISTS ( SELECT    1  )  \"  ,     \" SELECT   count (  *  )     -     1    FROM   orders \"  )  ;", "assertUpdate (  \" DROP   TABLE   test _ delete \"  )  ;", "assertExplainAnalyze (  \" EXPLAIN   ANALYZE   CREATE   TABLE   analyze _ test   AS   SELECT   CAST ( orderstatus   AS   VARCHAR (  1  5  )  )    orderstatus   FROM   orders \"  )  ;", "assertQuery (  \" SELECT    *    from   analyze _ test \"  ,     \" SELECT   orderstatus   FROM   orders \"  )  ;", "assertExplainAnalyze (  \" EXPLAIN   ANALYZE   INSERT   INTO   analyze _ test   SELECT   clerk   FROM   orders \"  )  ;", "assertQuery (  \" SELECT    *    from   analyze _ test \"  ,     \" SELECT   orderstatus   FROM   orders   UNION   ALL   SELECT   clerk   FROM   orders \"  )  ;", "assertExplainAnalyze (  \" EXPLAIN   ANALYZE   DELETE   FROM   analyze _ test   WHERE   TRUE \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    from   analyze _ test \"  ,     \" SELECT    0  \"  )  ;", "assertUpdate (  \" DROP   TABLE   analyze _ test \"  )  ;", "}", "METHOD_END"], "methodName": ["testDelete"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "assertUpdate (  \" CREATE   TABLE   test _ drop _ column   AS   SELECT    1  2  3    x ,     1  1  1    a \"  ,     1  )  ;", "assertUpdate (  \" ALTER   TABLE   test _ drop _ column   DROP   COLUMN   x \"  )  ;", "assertQueryFails (  \" SELECT   x   FROM   test _ drop _ column \"  ,     \"  .  *    Column    ' x '    cannot   be   resolved \"  )  ;", "assertQueryFails (  \" ALTER   TABLE   test _ drop _ column   DROP   COLUMN   a \"  ,     \"  .  *    Cannot   drop   the   only   column   in   a   table \"  )  ;", "}", "METHOD_END"], "methodName": ["testDropColumn"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "assertFalse ( getQueryRunner (  )  . tableExists ( getSession (  )  ,     \" test _ drop _ if _ exists \"  )  )  ;", "assertUpdate (  \" DROP   TABLE   IF   EXISTS   test _ drop _ if _ exists \"  )  ;", "assertFalse ( getQueryRunner (  )  . tableExists ( getSession (  )  ,     \" test _ drop _ if _ exists \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testDropTableIfExists"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "assertExplainAnalyze (  \" EXPLAIN   ANALYZE   SELECT    *    FROM   orders \"  )  ;", "assertExplainAnalyze (  \" EXPLAIN   ANALYZE   SELECT   count (  *  )  ,    clerk   FROM   orders   GROUP   BY   clerk \"  )  ;", "assertExplainAnalyze (  (  \" EXPLAIN   ANALYZE   SELECT   x    +    y   FROM    (  \"     +     (  \"          SELECT   orderdate ,    COUNT (  *  )    x   FROM   orders   GROUP   BY   orderdate )    a   JOIN    (  \"     +     \"          SELECT   orderdate ,    COUNT (  *  )    y   FROM   orders   GROUP   BY   orderdate )    b   ON   a . orderdate    =    b . orderdate \"  )  )  )  ;", "assertExplainAnalyze (  (  \"  \"     +     (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  \" EXPLAIN   ANALYZE   SELECT    *  ,    o 2  . custkey \\ n \"     +     \"       IN    (  \\ n \"  )     +     \"             SELECT   orderkey \\ n \"  )     +     \"             FROM   lineitem \\ n \"  )     +     \"             WHERE   orderkey    %     5     =     0  )  \\ n \"  )     +     \" FROM    ( SELECT    *    FROM   orders   WHERE   custkey    %     2  5  6     =     0  )    o 1  \\ n \"  )     +     \" JOIN    ( SELECT    *    FROM   orders   WHERE   custkey    %     2  5  6     =     0  )    o 2  \\ n \"  )     +     \"       ON    ( o 1  . orderkey   IN    ( SELECT   orderkey   FROM   lineitem   WHERE   orderkey    %     4     =     0  )  )     =     ( o 2  . orderkey   IN    ( SELECT   orderkey   FROM   lineitem   WHERE   orderkey    %     4     =     0  )  )  \\ n \"  )     +     \" WHERE   o 1  . orderkey \\ n \"  )     +     \"       IN    (  \\ n \"  )     +     \"             SELECT   orderkey \\ n \"  )     +     \"             FROM   lineitem \\ n \"  )     +     \"             WHERE   orderkey    %     4     =     0  )  \\ n \"  )     +     \" ORDER   BY   o 1  . orderkey \\ n \"  )     +     \"       IN    (  \\ n \"  )     +     \"             SELECT   orderkey \\ n \"  )     +     \"             FROM   lineitem \\ n \"  )     +     \"             WHERE   orderkey    %     7     =     0  )  \"  )  )  )  ;", "assertExplainAnalyze (  \" EXPLAIN   ANALYZE   SELECT   count (  *  )  ,    clerk   FROM   orders   GROUP   BY   clerk   UNION   ALL   SELECT   sum ( orderkey )  ,    clerk   FROM   orders   GROUP   BY   clerk \"  )  ;", "assertExplainAnalyze (  \" EXPLAIN   ANALYZE   SHOW   COLUMNS   FROM   orders \"  )  ;", "assertExplainAnalyze (  \" EXPLAIN   ANALYZE   EXPLAIN   SELECT   count (  *  )    FROM   orders \"  )  ;", "assertExplainAnalyze (  \" EXPLAIN   ANALYZE   EXPLAIN   ANALYZE   SELECT   count (  *  )    FROM   orders \"  )  ;", "assertExplainAnalyze (  \" EXPLAIN   ANALYZE   SHOW   FUNCTIONS \"  )  ;", "assertExplainAnalyze (  \" EXPLAIN   ANALYZE   SHOW   TABLES \"  )  ;", "assertExplainAnalyze (  \" EXPLAIN   ANALYZE   SHOW   SCHEMAS \"  )  ;", "assertExplainAnalyze (  \" EXPLAIN   ANALYZE   SHOW   CATALOGS \"  )  ;", "assertExplainAnalyze (  \" EXPLAIN   ANALYZE   SHOW   SESSION \"  )  ;", "}", "METHOD_END"], "methodName": ["testExplainAnalyze"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "computeActual (  \" EXPLAIN   ANALYZE   DROP   TABLE   orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testExplainAnalyzeDDL"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "assertExplainAnalyze (  \" EXPLAIN   ANALYZE   VERBOSE   SELECT    *    FROM   orders \"  )  ;", "assertExplainAnalyze (  \" EXPLAIN   ANALYZE   VERBOSE   SELECT   rank (  )    OVER    ( PARTITION   BY   orderkey   ORDER   BY   clerk   DESC )    FROM   orders \"  )  ;", "assertExplainAnalyze (  \" EXPLAIN   ANALYZE   VERBOSE   SELECT   rank (  )    OVER    ( PARTITION   BY   orderkey   ORDER   BY   clerk   DESC )    FROM   orders   WHERE   orderkey    <     0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testExplainAnalyzeVerbose"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "@ Language (  \" SQL \"  )", "String   query    =     \" SELECT   orderdate ,    orderkey ,    totalprice   FROM   orders \"  ;", "assertUpdate (  (  (  \" CREATE   TABLE    _ insert   AS    \"     +    query )     +     \"    WITH   NO   DATA \"  )  ,     0  )  ;", "assertQuery (  \" SELECT   count (  *  )    FROM    _ insert \"  ,     \" SELECT    0  \"  )  ;", "assertUpdate (  (  \" INSERT   INTO    _ insert    \"     +    query )  ,     \" SELECT   count (  *  )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT    *    FROM    _ insert \"  ,    query )  ;", "assertUpdate (  \" INSERT   INTO    _ insert    ( orderkey )    VALUES    (  -  1  )  \"  ,     1  )  ;", "assertUpdate (  \" INSERT   INTO    _ insert    ( orderkey )    VALUES    ( null )  \"  ,     1  )  ;", "assertUpdate (  \" INSERT   INTO    _ insert    ( orderdate )    VALUES    ( DATE    '  2  0  0  1  -  0  1  -  0  1  '  )  \"  ,     1  )  ;", "assertUpdate (  \" INSERT   INTO    _ insert    ( orderkey ,    orderdate )    VALUES    (  -  2  ,    DATE    '  2  0  0  1  -  0  1  -  0  2  '  )  \"  ,     1  )  ;", "assertUpdate (  \" INSERT   INTO    _ insert    ( orderdate ,    orderkey )    VALUES    ( DATE    '  2  0  0  1  -  0  1  -  0  3  '  ,     -  3  )  \"  ,     1  )  ;", "assertUpdate (  \" INSERT   INTO    _ insert    ( totalprice )    VALUES    (  1  2  3  4  )  \"  ,     1  )  ;", "assertQuery (  \" SELECT    *    FROM    _ insert \"  ,     (  (  (  (  (  ( query    +     \"    UNION   ALL   SELECT   null ,     -  1  ,    null \"  )     +     \"    UNION   ALL   SELECT   null ,    null ,    null \"  )     +     \"    UNION   ALL   SELECT   DATE    '  2  0  0  1  -  0  1  -  0  1  '  ,    null ,    null \"  )     +     \"    UNION   ALL   SELECT   DATE    '  2  0  0  1  -  0  1  -  0  2  '  ,     -  2  ,    null \"  )     +     \"    UNION   ALL   SELECT   DATE    '  2  0  0  1  -  0  1  -  0  3  '  ,     -  3  ,    null \"  )     +     \"    UNION   ALL   SELECT   null ,    null ,     1  2  3  4  \"  )  )  ;", "assertUpdate (  (  \" INSERT   INTO    _ insert    ( orderkey ,    orderdate ,    totalprice )     \"     +     (  (  \" SELECT   orderkey ,    orderdate ,    totalprice   FROM   orders    \"     +     \" UNION   ALL    \"  )     +     \" SELECT   orderkey ,    orderdate ,    totalprice   FROM   orders \"  )  )  ,     \" SELECT    2     *    count (  *  )    FROM   orders \"  )  ;", "assertUpdate (  \" DROP   TABLE    _ insert \"  )  ;", "assertUpdate (  \" CREATE   TABLE    _ insert    ( a   ARRAY < DOUBLE >  ,    b   ARRAY < BIGINT >  )  \"  )  ;", "assertUpdate (  \" INSERT   INTO    _ insert    ( a )    VALUES    ( ARRAY [ null ]  )  \"  ,     1  )  ;", "assertUpdate (  \" INSERT   INTO    _ insert    ( a )    VALUES    ( ARRAY [  1  2  3  4  ]  )  \"  ,     1  )  ;", "assertQuery (  \" SELECT   a [  1  ]    FROM    _ insert \"  ,     \" VALUES    ( null )  ,     (  1  2  3  4  )  \"  )  ;", "assertQueryFails (  \" INSERT   INTO    _ insert    ( b )    VALUES    ( ARRAY [  1  .  2  3 E 1  ]  )  \"  ,     \" Insert   query   has   mismatched   column   types :     .  *  \"  )  ;", "assertUpdate (  \" DROP   TABLE    _ insert \"  )  ;", "}", "METHOD_END"], "methodName": ["testInsert"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "super . testJoinWithStatefulFilterFunction (  )  ;", "Session   session    =    Session . builder ( getSession (  )  )  . setSystemProperty ( DISTRIBUTED _ JOIN ,     \" true \"  )  . build (  )  ;", "long   joinOutputRowCount    =     6  0  1  7  5  ;", "assertQuery ( session ,    String . format (  \" SELECT   count (  *  )    FROM   lineitem   l   LEFT   OUTER   JOIN   orders   o   ON   l . orderkey    =    o . orderkey   AND   stateful _ sleeping _ sum (  % s ,     1  0  0  ,    l . linenumber ,    o . shippriority )     >     0  \"  ,     (  (  1  0     *     1  .  0  )     /    joinOutputRowCount )  )  ,    String . format (  \" VALUES    % s \"  ,    joinOutputRowCount )  )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithStatefulFilterFunction"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT    \"     +     ( Joiner . on (  \"    AND    \"  )  . join ( Collections . nCopies (  5  0  0  ,     \"  1     =     1  \"  )  )  )  )  ,     \" SELECT   true \"  )  ;", "}", "METHOD_END"], "methodName": ["testLargeQuerySuccess"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "AbstractTestQueryFramework . skipTestUnless ( supportsViews (  )  )  ;", "assertAccessDenied (  (  (  \" SET   SESSION    \"     +     ( SystemSessionProperties . QUERY _ MAX _ MEMORY )  )     +     \"     =     '  1  0 MB '  \"  )  ,     (  \" Cannot   set   system   session   property    \"     +     ( SystemSessionProperties . QUERY _ MAX _ MEMORY )  )  ,    privilege ( SystemSessionProperties . QUERY _ MAX _ MEMORY ,    TestingPrivilegeType . SET _ SESSION )  )  ;", "assertAccessDenied (  \" CREATE   TABLE   foo    ( pk   bigint )  \"  ,     \" Cannot   create   table    .  *  . foo .  *  \"  ,    privilege (  \" foo \"  ,    TestingPrivilegeType . CREATE _ TABLE )  )  ;", "assertAccessDenied (  \" DROP   TABLE   orders \"  ,     \" Cannot   drop   table    .  *  . orders .  *  \"  ,    privilege (  \" orders \"  ,    TestingPrivilegeType . DROP _ TABLE )  )  ;", "assertAccessDenied (  \" ALTER   TABLE   orders   RENAME   TO   foo \"  ,     \" Cannot   rename   table    .  *  . orders .  *    to    .  *  . foo .  *  \"  ,    privilege (  \" orders \"  ,    TestingPrivilegeType . RENAME _ TABLE )  )  ;", "assertAccessDenied (  \" ALTER   TABLE   orders   ADD   COLUMN   foo   bigint \"  ,     \" Cannot   add   a   column   to   table    .  *  . orders .  *  \"  ,    privilege (  \" orders \"  ,    TestingPrivilegeType . ADD _ COLUMN )  )  ;", "assertAccessDenied (  \" ALTER   TABLE   orders   DROP   COLUMN   foo \"  ,     \" Cannot   drop   a   column   from   table    .  *  . orders .  *  \"  ,    privilege (  \" orders \"  ,    TestingPrivilegeType . DROP _ COLUMN )  )  ;", "assertAccessDenied (  \" ALTER   TABLE   orders   RENAME   COLUMN   orderkey   TO   foo \"  ,     \" Cannot   rename   a   column   in   table    .  *  . orders .  *  \"  ,    privilege (  \" orders \"  ,    TestingPrivilegeType . RENAME _ COLUMN )  )  ;", "assertAccessDenied (  \" CREATE   VIEW   foo   as   SELECT    *    FROM   orders \"  ,     \" Cannot   create   view    .  *  . foo .  *  \"  ,    privilege (  \" foo \"  ,    TestingPrivilegeType . CREATE _ VIEW )  )  ;", "try    {", "assertAccessDenied (  \" SELECT    1  \"  ,     (  (  \" Principal    .  *    cannot   become   user    \"     +     ( getSession (  )  . getUser (  )  )  )     +     \"  .  *  \"  )  ,    privilege ( getSession (  )  . getUser (  )  ,    TestingPrivilegeType . SET _ USER )  )  ;", "}    catch    ( AssertionError   e )     {", "Assertions . assertContains ( e . getMessage (  )  ,     \" statusCode =  4  0  3  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["testNonQueryAccessControl"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "QueryManager   queryManager    =     (  ( DistributedQueryRunner )     ( getQueryRunner (  )  )  )  . getCoordinator (  )  . getQueryManager (  )  ;", "executeExclusively (  (  )     -  >     {", ". assertUntilTimeout (  (  )     -  >    assertEquals ( queryManager . getAllQueryInfo (  )  . stream (  )  . filter (  (    info )     -  >     !  ( info . isFinalQueryInfo (  )  )  )  . collect ( toList (  )  )  ,    ImmutableList . of (  )  )  ,    new   Duration (  1  ,    TimeUnit . MINUTES )  )  ;", "long   beforeCompletedQueriesCount    =    waitUntilStable (  (  )     -  >    queryManager . getStats (  )  . getCompletedQueries (  )  . getTotalCount (  )  ,    new   Duration (  5  ,    TimeUnit . SECONDS )  )  ;", "long   beforeSubmittedQueriesCount    =    queryManager . getStats (  )  . getSubmittedQueries (  )  . getTotalCount (  )  ;", "assertUpdate (  \" CREATE   TABLE   test _ query _ logging _ count   AS   SELECT    1    foo _  1  ,     2    foo _  2  _  4  \"  ,     1  )  ;", "assertQuery (  \" SELECT   foo _  1  ,    foo _  2  _  4    FROM   test _ query _ logging _ count \"  ,     \" SELECT    1  ,     2  \"  )  ;", "assertUpdate (  \" DROP   TABLE   test _ query _ logging _ count \"  )  ;", "assertQueryFails (  \" SELECT    *    FROM   test _ query _ logging _ count \"  ,     \"  .  * Table    .  *    does   not   exist \"  )  ;", ". assertUntilTimeout (  (  )     -  >    assertEquals (  (  ( queryManager . getStats (  )  . getCompletedQueries (  )  . getTotalCount (  )  )     -    beforeCompletedQueriesCount )  ,     4  )  ,    new   Duration (  1  ,    TimeUnit . MINUTES )  )  ;", "assertEquals (  (  ( queryManager . getStats (  )  . getSubmittedQueries (  )  . getTotalCount (  )  )     -    beforeSubmittedQueriesCount )  ,     4  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["testQueryLoggingCount"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "assertUpdate (  \" CREATE   TABLE   test _ rename _ column   AS   SELECT    1  2  3    x \"  ,     1  )  ;", "assertUpdate (  \" ALTER   TABLE   test _ rename _ column   RENAME   COLUMN   x   TO   y \"  )  ;", "MaterializedResult   materializedRows    =    computeActual (  \" SELECT   y   FROM   test _ rename _ column \"  )  ;", "assertEquals ( getOnlyElement ( materializedRows . getMaterializedRows (  )  )  . getField (  0  )  ,     1  2  3  )  ;", "assertUpdate (  \" ALTER   TABLE   test _ rename _ column   RENAME   COLUMN   y   TO   Z \"  )  ;", "materializedRows    =    computeActual (  \" SELECT   z   FROM   test _ rename _ column \"  )  ;", "assertEquals ( getOnlyElement ( materializedRows . getMaterializedRows (  )  )  . getField (  0  )  ,     1  2  3  )  ;", "assertUpdate (  \" DROP   TABLE   test _ rename _ column \"  )  ;", "assertFalse ( getQueryRunner (  )  . tableExists ( getSession (  )  ,     \" test _ rename _ column \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testRenameColumn"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "assertUpdate (  \" CREATE   TABLE   test _ rename   AS   SELECT    1  2  3    x \"  ,     1  )  ;", "assertUpdate (  \" ALTER   TABLE   test _ rename   RENAME   TO   test _ rename _ new \"  )  ;", "MaterializedResult   materializedRows    =    computeActual (  \" SELECT   x   FROM   test _ rename _ new \"  )  ;", "assertEquals ( getOnlyElement ( materializedRows . getMaterializedRows (  )  )  . getField (  0  )  ,     1  2  3  )  ;", "assertUpdate (  \" ALTER   TABLE   test _ rename _ new   RENAME   TO   TEST _ RENAME \"  )  ;", "materializedRows    =    computeActual (  \" SELECT   x   FROM   test _ rename \"  )  ;", "assertEquals ( getOnlyElement ( materializedRows . getMaterializedRows (  )  )  . getField (  0  )  ,     1  2  3  )  ;", "assertUpdate (  \" DROP   TABLE   test _ rename \"  )  ;", "assertFalse ( getQueryRunner (  )  . tableExists ( getSession (  )  ,     \" test _ rename \"  )  )  ;", "assertFalse ( getQueryRunner (  )  . tableExists ( getSession (  )  ,     \" test _ rename _ new \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testRenameTable"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   result    =    computeActual ( getSession (  )  ,     \" RESET   SESSION   test _ string \"  )  ;", "assertTrue (  (  ( Boolean )     ( getOnlyElement ( result )  . getField (  0  )  )  )  )  ;", "assertEquals ( result . getResetSessionProperties (  )  ,    ImmutableSet . of (  \" test _ string \"  )  )  ;", "result    =    computeActual ( getSession (  )  ,    String . format (  \" RESET   SESSION    % s . connector _ string \"  ,    TESTING _ CATALOG )  )  ;", "assertTrue (  (  ( Boolean )     ( getOnlyElement ( result )  . getField (  0  )  )  )  )  ;", "assertEquals ( result . getResetSessionProperties (  )  ,    ImmutableSet . of (  (  ( TESTING _ CATALOG )     +     \"  . connector _ string \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testResetSession"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   result    =    computeActual (  \" SET   SESSION   test _ string    =     ' bar '  \"  )  ;", "assertTrue (  (  ( Boolean )     ( getOnlyElement ( result )  . getField (  0  )  )  )  )  ;", "assertEquals ( result . getSetSessionProperties (  )  ,    ImmutableMap . of (  \" test _ string \"  ,     \" bar \"  )  )  ;", "result    =    computeActual ( String . format (  \" SET   SESSION    % s . connector _ long    =     9  9  9  \"  ,    TESTING _ CATALOG )  )  ;", "assertTrue (  (  ( Boolean )     ( getOnlyElement ( result )  . getField (  0  )  )  )  )  ;", "assertEquals ( result . getSetSessionProperties (  )  ,    ImmutableMap . of (  (  ( TESTING _ CATALOG )     +     \"  . connector _ long \"  )  ,     \"  9  9  9  \"  )  )  ;", "result    =    computeActual ( String . format (  \" SET   SESSION    % s . connector _ string    =     ' baz '  \"  ,    TESTING _ CATALOG )  )  ;", "assertTrue (  (  ( Boolean )     ( getOnlyElement ( result )  . getField (  0  )  )  )  )  ;", "assertEquals ( result . getSetSessionProperties (  )  ,    ImmutableMap . of (  (  ( TESTING _ CATALOG )     +     \"  . connector _ string \"  )  ,     \" baz \"  )  )  ;", "result    =    computeActual ( String . format (  \" SET   SESSION    % s . connector _ string    =     ' ban '     |  |     ' ana '  \"  ,    TESTING _ CATALOG )  )  ;", "assertTrue (  (  ( Boolean )     ( getOnlyElement ( result )  . getField (  0  )  )  )  )  ;", "assertEquals ( result . getSetSessionProperties (  )  ,    ImmutableMap . of (  (  ( TESTING _ CATALOG )     +     \"  . connector _ string \"  )  ,     \" banana \"  )  )  ;", "result    =    computeActual ( String . format (  \" SET   SESSION    % s . connector _ long    =     4  4  4  \"  ,    TESTING _ CATALOG )  )  ;", "assertTrue (  (  ( Boolean )     ( getOnlyElement ( result )  . getField (  0  )  )  )  )  ;", "assertEquals ( result . getSetSessionProperties (  )  ,    ImmutableMap . of (  (  ( TESTING _ CATALOG )     +     \"  . connector _ long \"  )  ,     \"  4  4  4  \"  )  )  ;", "result    =    computeActual ( String . format (  \" SET   SESSION    % s . connector _ long    =     1  1  1     +     1  1  1  \"  ,    TESTING _ CATALOG )  )  ;", "assertTrue (  (  ( Boolean )     ( getOnlyElement ( result )  . getField (  0  )  )  )  )  ;", "assertEquals ( result . getSetSessionProperties (  )  ,    ImmutableMap . of (  (  ( TESTING _ CATALOG )     +     \"  . connector _ long \"  )  ,     \"  2  2  2  \"  )  )  ;", "result    =    computeActual ( String . format (  \" SET   SESSION    % s . connector _ boolean    =     1  1  1     <     3  \"  ,    TESTING _ CATALOG )  )  ;", "assertTrue (  (  ( Boolean )     ( getOnlyElement ( result )  . getField (  0  )  )  )  )  ;", "assertEquals ( result . getSetSessionProperties (  )  ,    ImmutableMap . of (  (  ( TESTING _ CATALOG )     +     \"  . connector _ boolean \"  )  ,     \" false \"  )  )  ;", "result    =    computeActual ( String . format (  \" SET   SESSION    % s . connector _ double    =     1  1  .  1  \"  ,    TESTING _ CATALOG )  )  ;", "assertTrue (  (  ( Boolean )     ( getOnlyElement ( result )  . getField (  0  )  )  )  )  ;", "assertEquals ( result . getSetSessionProperties (  )  ,    ImmutableMap . of (  (  ( TESTING _ CATALOG )     +     \"  . connector _ double \"  )  ,     \"  1  1  .  1  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testSetSession"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   result    =    computeActual (  \" SHOW   SCHEMAS   FROM   tpch \"  )  ;", "assertTrue ( result . getOnlyColumnAsSet (  )  . containsAll ( ImmutableSet . of ( INFORMATION _ SCHEMA ,     \" tiny \"  ,     \" sf 1  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testShowSchemasFromOther"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "assertUpdate (  \" CREATE   TABLE   test _ symbol _ aliasing   AS   SELECT    1    foo _  1  ,     2    foo _  2  _  4  \"  ,     1  )  ;", "assertQuery (  \" SELECT   foo _  1  ,    foo _  2  _  4    FROM   test _ symbol _ aliasing \"  ,     \" SELECT    1  ,     2  \"  )  ;", "assertUpdate (  \" DROP   TABLE   test _ symbol _ aliasing \"  )  ;", "}", "METHOD_END"], "methodName": ["testSymbolAliasing"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   fullSample    =    computeActual (  \" SELECT   orderkey   FROM   orders   TABLESAMPLE   SYSTEM    (  1  0  0  )  \"  )  ;", "MaterializedResult   emptySample    =    computeActual (  \" SELECT   orderkey   FROM   orders   TABLESAMPLE   SYSTEM    (  0  )  \"  )  ;", "MaterializedResult   all    =    computeActual (  \" SELECT   orderkey   FROM   orders \"  )  ;", "yAssertions . assertContains ( all ,    fullSample )  ;", "assertEquals ( emptySample . getMaterializedRows (  )  . size (  )  ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testTableSampleSystemBoundaryValues"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "AbstractTestQueryFramework . skipTestUnless ( supportsViews (  )  )  ;", "@ Language (  \" SQL \"  )", "String   query    =     \" SELECT   orderkey ,    orderstatus ,    totalprice    /     2    half   FROM   orders \"  ;", "assertUpdate (  \" CREATE   VIEW   test _ view   AS   SELECT    1  2  3    x \"  )  ;", "assertUpdate (  (  \" CREATE   OR   REPLACE   VIEW   test _ view   AS    \"     +    query )  )  ;", "assertQuery (  \" SELECT    *    FROM   test _ view \"  ,    query )  ;", "assertQuery (  \" SELECT    *    FROM   test _ view   a   JOIN   test _ view   b   on   a . orderkey    =    b . orderkey \"  ,    String . format (  \" SELECT    *    FROM    (  % s )    a   JOIN    (  % s )    b   ON   a . orderkey    =    b . orderkey \"  ,    query ,    query )  )  ;", "assertQuery (  \" WITH   orders   AS    ( SELECT    *    FROM   orders   LIMIT    0  )    SELECT    *    FROM   test _ view \"  ,    query )  ;", "String   name    =    String . format (  \"  % s .  % s . test _ view \"  ,    getSession (  )  . getCatalog (  )  . get (  )  ,    getSession (  )  . getSchema (  )  . get (  )  )  ;", "assertQuery (  (  \" SELECT    *    FROM    \"     +    name )  ,    query )  ;", "assertUpdate (  \" DROP   VIEW   test _ view \"  )  ;", "}", "METHOD_END"], "methodName": ["testView"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "AbstractTestQueryFramework . skipTestUnless ( supportsViews (  )  )  ;", "Session   viewOwnerSession    =    TestingSession . testSessionBuilder (  )  . setIdentity ( new   Identity (  \" test _ view _ access _ owner \"  ,    Optional . empty (  )  )  )  . setCatalog ( getSession (  )  . getCatalog (  )  . get (  )  )  . setSchema ( getSession (  )  . getSchema (  )  . get (  )  )  . build (  )  ;", "assertAccessAllowed ( viewOwnerSession ,     \" CREATE   VIEW   test _ view _ access   AS   SELECT    *    FROM   orders \"  ,    privilege (  \" orders \"  ,    TestingPrivilegeType . CREATE _ VIEW _ WITH _ SELECT _ TABLE )  )  ;", "assertAccessDenied (  \" SELECT    *    FROM   test _ view _ access \"  ,     \" Cannot   select   from   table    .  *  . orders .  *  \"  ,    privilege ( viewOwnerSession . getUser (  )  ,     \" orders \"  ,    TestingPrivilegeType . CREATE _ VIEW _ WITH _ SELECT _ TABLE )  )  ;", "assertAccessAllowed ( viewOwnerSession ,     \" SELECT    *    FROM   test _ view _ access \"  ,    privilege ( viewOwnerSession . getUser (  )  ,     \" orders \"  ,    TestingPrivilegeType . CREATE _ VIEW _ WITH _ SELECT _ TABLE )  )  ;", "assertAccessAllowed (  \" SELECT    *    FROM   test _ view _ access \"  ,    privilege ( getSession (  )  . getUser (  )  ,     \" orders \"  ,    TestingPrivilegeType . CREATE _ VIEW _ WITH _ SELECT _ TABLE )  )  ;", "assertAccessAllowed (  \" SELECT    *    FROM   test _ view _ access \"  ,    privilege ( getSession (  )  . getUser (  )  ,     \" orders \"  ,    TestingPrivilegeType . SELECT _ TABLE )  )  ;", "Session   nestedViewOwnerSession    =    TestingSession . testSessionBuilder (  )  . setIdentity ( new   Identity (  \" test _ nested _ view _ access _ owner \"  ,    Optional . empty (  )  )  )  . setCatalog ( getSession (  )  . getCatalog (  )  . get (  )  )  . setSchema ( getSession (  )  . getSchema (  )  . get (  )  )  . build (  )  ;", "assertAccessAllowed ( nestedViewOwnerSession ,     \" CREATE   VIEW   test _ nested _ view _ access   AS   SELECT    *    FROM   test _ view _ access \"  ,    privilege (  \" test _ view _ access \"  ,    TestingPrivilegeType . CREATE _ VIEW _ WITH _ SELECT _ VIEW )  )  ;", "assertAccessDenied (  \" SELECT    *    FROM   test _ nested _ view _ access \"  ,     \" Cannot   select   from   view    .  *  . test _ view _ access .  *  \"  ,    privilege ( nestedViewOwnerSession . getUser (  )  ,     \" test _ view _ access \"  ,    TestingPrivilegeType . CREATE _ VIEW _ WITH _ SELECT _ VIEW )  )  ;", "assertAccessAllowed (  \" SELECT    *    FROM   test _ nested _ view _ access \"  ,    privilege ( getSession (  )  . getUser (  )  ,     \" test _ view _ access \"  ,    TestingPrivilegeType . CREATE _ VIEW _ WITH _ SELECT _ VIEW )  )  ;", "assertAccessAllowed (  \" SELECT    *    FROM   test _ nested _ view _ access \"  ,    privilege ( getSession (  )  . getUser (  )  ,     \" test _ view _ access \"  ,    TestingPrivilegeType . SELECT _ VIEW )  )  ;", "assertAccessAllowed ( nestedViewOwnerSession ,     \" DROP   VIEW   test _ nested _ view _ access \"  )  ;", "assertAccessAllowed ( viewOwnerSession ,     \" DROP   VIEW   test _ view _ access \"  )  ;", "}", "METHOD_END"], "methodName": ["testViewAccessControl"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "AbstractTestQueryFramework . skipTestUnless ( supportsViews (  )  )  ;", "computeActual (  \" CREATE   VIEW   test _ view _ uppercase   AS   SELECT   X   FROM    ( SELECT    1  2  3    X )  \"  )  ;", "computeActual (  \" CREATE   VIEW   test _ view _ mixedcase   AS   SELECT   XyZ   FROM    ( SELECT    4  5  6    XyZ )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM   test _ view _ uppercase \"  ,     \" SELECT   X   FROM    ( SELECT    1  2  3    X )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM   test _ view _ mixedcase \"  ,     \" SELECT   XyZ   FROM    ( SELECT    4  5  6    XyZ )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testViewCaseSensitivity"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "AbstractTestQueryFramework . skipTestUnless ( supportsViews (  )  )  ;", "@ Language (  \" SQL \"  )", "String   query    =     \" SELECT   BIGINT    '  1  2  3  '    x ,     ' foo '    y \"  ;", "assertUpdate (  (  \" CREATE   VIEW   meta _ test _ view   AS    \"     +    query )  )  ;", "MaterializedResult   actual    =    computeActual ( String . format (  \" SELECT   table _ name ,    table _ type   FROM   information _ schema . tables   WHERE   table _ schema    =     '  % s '  \"  ,    getSession (  )  . getSchema (  )  . get (  )  )  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    actual . getTypes (  )  )  . row (  \" customer \"  ,     \" BASE   TABLE \"  )  . row (  \" lineitem \"  ,     \" BASE   TABLE \"  )  . row (  \" meta _ test _ view \"  ,     \" VIEW \"  )  . row (  \" nation \"  ,     \" BASE   TABLE \"  )  . row (  \" orders \"  ,     \" BASE   TABLE \"  )  . row (  \" part \"  ,     \" BASE   TABLE \"  )  . row (  \" partsupp \"  ,     \" BASE   TABLE \"  )  . row (  \" region \"  ,     \" BASE   TABLE \"  )  . row (  \" supplier \"  ,     \" BASE   TABLE \"  )  . build (  )  ;", "QueryAssertions . assertContains ( actual ,    expected )  ;", "actual    =    computeActual (  \" SHOW   TABLES \"  )  ;", "MaterializedResult . Builder   builder    =    resultBuilder ( getSession (  )  ,    actual . getTypes (  )  )  ;", "for    ( MaterializedRow   row    :    expected . getMaterializedRows (  )  )     {", "builder . row ( row . getField (  0  )  )  ;", "}", "expected    =    builder . build (  )  ;", "QueryAssertions . assertContains ( actual ,    expected )  ;", "actual    =    computeActual ( String . format (  \" SELECT   table _ name ,    view _ definition   FROM   information _ schema . views   WHERE   table _ schema    =     '  % s '  \"  ,    getSession (  )  . getSchema (  )  . get (  )  )  )  ;", "expected    =    resultBuilder ( getSession (  )  ,    actual . getTypes (  )  )  . row (  \" meta _ test _ view \"  ,    formatSqlText ( query )  )  . build (  )  ;", "QueryAssertions . assertContains ( actual ,    expected )  ;", "actual    =    computeActual (  \" SHOW   COLUMNS   FROM   meta _ test _ view \"  )  ;", "expected    =    resultBuilder ( getSession (  )  ,    VARCHAR ,    VARCHAR ,    VARCHAR ,    VARCHAR )  . row (  \" x \"  ,     \" bigint \"  ,     \"  \"  ,     \"  \"  )  . row (  \" y \"  ,     \" varchar (  3  )  \"  ,     \"  \"  ,     \"  \"  )  . build (  )  ;", "assertEquals ( actual ,    expected )  ;", "String   expectedSql    =    formatSqlText ( String . format (  \" CREATE   VIEW    % s .  % s .  % s   AS    % s \"  ,    getSession (  )  . getCatalog (  )  . get (  )  ,    getSession (  )  . getSchema (  )  . get (  )  ,     \" meta _ test _ view \"  ,    query )  )  . trim (  )  ;", "actual    =    computeActual (  \" SHOW   CREATE   VIEW   meta _ test _ view \"  )  ;", "assertEquals ( getOnlyElement ( actual . getOnlyColumnAsSet (  )  )  ,    expectedSql )  ;", "assertUpdate (  \" DROP   VIEW   meta _ test _ view \"  )  ;", "}", "METHOD_END"], "methodName": ["testViewMetadata"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "String   sql    =     \" CREATE   TABLE   test _ written _ stats   AS   SELECT    *    FROM   nation \"  ;", "yRunner   distributedQueryRunner    =     (  ( yRunner )     ( getQueryRunner (  )  )  )  ;", "ResultWithQueryId < MaterializedResult >    resultResultWithQueryId    =    distributedQueryRunner . executeWithQueryId ( getSession (  )  ,    sql )  ;", "QueryInfo   queryInfo    =    distributedQueryRunner . getQueryInfo ( resultResultWithQueryId . getQueryId (  )  )  ;", "assertEquals ( queryInfo . getQueryStats (  )  . getOutputPositions (  )  ,     1 L )  ;", "assertEquals ( queryInfo . getQueryStats (  )  . getWrittenPositions (  )  ,     2  5 L )  ;", "assertTrue (  (  ( queryInfo . getQueryStats (  )  . getLogicalWrittenDataSize (  )  . toBytes (  )  )     >     0 L )  )  ;", "sql    =     \" INSERT   INTO   test _ written _ stats   SELECT    *    FROM   nation   LIMIT    1  0  \"  ;", "resultResultWithQueryId    =    distributedQueryRunner . executeWithQueryId ( getSession (  )  ,    sql )  ;", "queryInfo    =    distributedQueryRunner . getQueryInfo ( resultResultWithQueryId . getQueryId (  )  )  ;", "assertEquals ( queryInfo . getQueryStats (  )  . getOutputPositions (  )  ,     1 L )  ;", "assertEquals ( queryInfo . getQueryStats (  )  . getWrittenPositions (  )  ,     1  0 L )  ;", "assertTrue (  (  ( queryInfo . getQueryStats (  )  . getLogicalWrittenDataSize (  )  . toBytes (  )  )     >     0 L )  )  ;", "assertUpdate (  \" DROP   TABLE   test _ written _ stats \"  )  ;", "}", "METHOD_END"], "methodName": ["testWrittenStats"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "T   lastValue    =    computation . get (  )  ;", "long   start    =    System . nanoTime (  )  ;", "while    (  (  !  ( Thread . currentThread (  )  . isInterrupted (  )  )  )     &  &     (  ( nanosSince ( start )  . compareTo ( timeout )  )     <     0  )  )     {", "sleepUninterruptibly (  1  0  0  ,    TimeUnit . MILLISECONDS )  ;", "T   currentValue    =    computation . get (  )  ;", "if    ( currentValue . equals ( lastValue )  )     {", "return   currentValue ;", "}", "lastValue    =    currentValue ;", "}", "throw   new   UncheckedTimeoutException (  )  ;", "}", "METHOD_END"], "methodName": ["waitUntilStable"], "fileName": "com.facebook.presto.tests.AbstractTestDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "LocalDateTime   localTimeThatDidNotExist    =    LocalDateTime . of (  1  9  8  6  ,     1  ,     1  ,     0  ,     1  0  )  ;", "checkState ( ZoneId . systemDefault (  )  . getRules (  )  . getValidOffsets ( localTimeThatDidNotExist )  . isEmpty (  )  ,     \" This      assumes   certain   JVM   time   zone \"  )  ;", "@ Language (  \" SQL \"  )", "String   sql    =    DateTimeFormatter . ofPattern (  \"  ' SELECT   TIMESTAMP    '  '  ' uuuu - MM - dd   HH : mm : ss '  '  \"  )  . format ( localTimeThatDidNotExist )  ;", "assertEquals ( computeScalar ( sql )  ,    localTimeThatDidNotExist )  ;", "assertQuery ( sql )  ;", "LocalDate   localDateThatDidNotHaveMidnight    =    LocalDate . of (  1  9  8  6  ,     1  ,     1  )  ;", "checkState ( ZoneId . systemDefault (  )  . getRules (  )  . getValidOffsets ( localDateThatDidNotHaveMidnight . atStartOfDay (  )  )  . isEmpty (  )  ,     \" This      assumes   certain   JVM   time   zone \"  )  ;", "sql    =    DateTimeFormatter . ofPattern (  \"  ' SELECT   DATE    '  '  ' uuuu - MM - dd '  '  \"  )  . format ( localDateThatDidNotHaveMidnight )  ;", "assertEquals ( computeScalar ( sql )  ,    localDateThatDidNotHaveMidnight )  ;", "assertQuery ( sql )  ;", "}", "METHOD_END"], "methodName": ["testLocallyUnrepresentableTimeLiterals"], "fileName": "com.facebook.presto.tests.AbstractTestEngineOnlyQueries"}, {"methodBody": ["METHOD_START", "{", "Session   chicago    =    Session . builder ( getSession (  )  )  . setTimeZoneKey ( TimeZoneKey . getTimeZoneKey (  \" America / Chicago \"  )  )  . build (  )  ;", "Session   kathmandu    =    Session . builder ( getSession (  )  )  . setTimeZoneKey ( TimeZoneKey . getTimeZoneKey (  \" Asia / Kathmandu \"  )  )  . build (  )  ;", "assertEquals ( computeScalar (  \" SELECT   DATE    '  2  0  1  3  -  0  3  -  2  2  '  \"  )  ,    LocalDate . of (  2  0  1  3  ,     3  ,     2  2  )  )  ;", "asserty (  \" SELECT   DATE    '  2  0  1  3  -  0  3  -  2  2  '  \"  )  ;", "asserty ( chicago ,     \" SELECT   DATE    '  2  0  1  3  -  0  3  -  2  2  '  \"  )  ;", "asserty ( kathmandu ,     \" SELECT   DATE    '  2  0  1  3  -  0  3  -  2  2  '  \"  )  ;", "assertEquals ( computeScalar (  \" SELECT   TIME    '  3  :  0  4  :  0  5  '  \"  )  ,    LocalTime . of (  3  ,     4  ,     5  ,     0  )  )  ;", "assertEquals ( computeScalar (  \" SELECT   TIME    '  3  :  0  4  :  0  5  .  1  2  3  '  \"  )  ,    LocalTime . of (  3  ,     4  ,     5  ,     1  2  3  0  0  0  0  0  0  )  )  ;", "asserty (  \" SELECT   TIME    '  3  :  0  4  :  0  5  '  \"  )  ;", "asserty (  \" SELECT   TIME    '  0  :  0  4  :  0  5  '  \"  )  ;", "assertEquals ( computeScalar (  \" SELECT   TIME    '  0  1  :  0  2  :  0  3  .  4  0  0    Z '  \"  )  ,    OffsetTime . of (  1  ,     2  ,     3  ,     4  0  0  0  0  0  0  0  0  ,    ZoneOffset . UTC )  )  ;", "assertEquals ( computeScalar (  \" SELECT   TIME    '  0  1  :  0  2  :  0  3  .  4  0  0    UTC '  \"  )  ,    OffsetTime . of (  1  ,     2  ,     3  ,     4  0  0  0  0  0  0  0  0  ,    ZoneOffset . UTC )  )  ;", "assertEquals ( computeScalar (  \" SELECT   TIME    '  3  :  0  4  :  0  5     +  0  6  :  0  0  '  \"  )  ,    OffsetTime . of (  3  ,     4  ,     5  ,     0  ,    ZoneOffset . ofHoursMinutes (  6  ,     0  )  )  )  ;", "assertEquals ( computeScalar (  \" SELECT   TIME    '  3  :  0  4  :  0  5     +  0  5  0  7  '  \"  )  ,    OffsetTime . of (  3  ,     4  ,     5  ,     0  ,    ZoneOffset . ofHoursMinutes (  5  ,     7  )  )  )  ;", "assertEquals ( computeScalar (  \" SELECT   TIME    '  3  :  0  4  :  0  5     +  0  3  '  \"  )  ,    OffsetTime . of (  3  ,     4  ,     5  ,     0  ,    ZoneOffset . ofHoursMinutes (  3  ,     0  )  )  )  ;", "assertEquals ( computeScalar (  \" SELECT   TIMESTAMP    '  1  9  6  0  -  0  1  -  2  2     3  :  0  4  :  0  5  '  \"  )  ,    LocalDateTime . of (  1  9  6  0  ,     1  ,     2  2  ,     3  ,     4  ,     5  )  )  ;", "assertEquals ( computeScalar (  \" SELECT   TIMESTAMP    '  1  9  6  0  -  0  1  -  2  2     3  :  0  4  :  0  5  .  1  2  3  '  \"  )  ,    LocalDateTime . of (  1  9  6  0  ,     1  ,     2  2  ,     3  ,     4  ,     5  ,     1  2  3  0  0  0  0  0  0  )  )  ;", "asserty (  \" SELECT   TIMESTAMP    '  1  9  6  0  -  0  1  -  2  2     3  :  0  4  :  0  5  '  \"  )  ;", "asserty (  \" SELECT   TIMESTAMP    '  1  9  6  0  -  0  1  -  2  2     3  :  0  4  :  0  5  .  1  2  3  '  \"  )  ;", "assertEquals ( computeScalar (  \" SELECT   TIMESTAMP    '  1  9  6  0  -  0  1  -  2  2     3  :  0  4  :  0  5     +  0  6  :  0  0  '  \"  )  ,    ZonedDateTime . of (  1  9  6  0  ,     1  ,     2  2  ,     3  ,     4  ,     5  ,     0  ,    ZoneOffset . ofHoursMinutes (  6  ,     0  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testTimeLiterals"], "fileName": "com.facebook.presto.tests.AbstractTestEngineOnlyQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT    *  \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     8     =     0  )    l \\ n \"  )     +     \" JOIN   orders   o \\ n \"  )     +     \"       ON   l . orderkey    =    o . orderkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testBasicIndexJoin"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM   orders   o    \"  )     +     \" JOIN    (  \\ n \"  )     +     \"       SELECT    *  \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     8     =     0  )    l \\ n \"  )     +     \"       ON   o . orderkey    =    l . orderkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testBasicIndexJoinReverseCandidates"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT   CASE   WHEN   suppkey    %     2     =     0    THEN   orderkey   ELSE   NULL   END   AS   orderkey \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     8     =     0  )    l \\ n \"  )     +     \" JOIN   orders   o \\ n \"  )     +     \"       ON   l . orderkey    =    o . orderkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testBasicIndexJoinWithNullKeys"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT    *  \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     8     =     0  )    l \\ n \"  )     +     \" LEFT   JOIN   orders   o \\ n \"  )     +     \"       ON   l . orderkey    =    o . orderkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testBasicLeftIndexJoin"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  \" SELECT   COUNT (  *  )  \\ n \"     +     \" FROM   orders   o    \"  )     +     \" RIGHT   JOIN    (  \\ n \"  )     +     \"       SELECT    *  \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     8     =     0  )    l \\ n \"  )     +     \"       ON   o . orderkey    =    l . orderkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testBasicRightIndexJoin"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT   orderkey ,    CASE   WHEN   suppkey    %     2     =     0    THEN    \\  ' F \\  '    ELSE    \\  ' O \\  '    END   AS   orderstatus \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     8     =     0  )    l \\ n \"  )     +     \" JOIN   orders   o 1  \\ n \"  )     +     \"       ON   l . orderkey    =    o 1  . orderkey   AND   l . orderstatus    =    o 1  . orderstatus \\ n \"  )     +     \" JOIN   orders   o 2  \\ n \"  )     +     \"       ON   o 1  . custkey    %     1  0  2  4     =    o 2  . orderkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testChainedIndexJoin"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT    *  \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     8     =     0  )    x \\ n \"  )     +     \" JOIN    (  \\ n \"  )     +     \"       SELECT   o 1  . orderkey   as   orderkey ,    o 2  . custkey   as   custkey \\ n \"  )     +     \"       FROM   orders   o 1  \\ n \"  )     +     \"       JOIN   orders   o 2  \\ n \"  )     +     \"             ON   o 1  . orderkey    =    o 2  . orderkey )    y \\ n \"  )     +     \"       ON   x . orderkey    =    y . orderkey \\ n \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testComposableIndexJoins"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT   orderkey \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     8     =     0  )    l \\ n \"  )     +     \" JOIN   orders   o \\ n \"  )     +     \"       ON   l . orderkey    =    o . orderkey \\ n \"  )     +     \" WHERE   o . orderstatus    =     \\  ' F \\  '  \\ n \"  )     +     \"       AND   o . custkey    %     2     =     0  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testCompoundPredicateDerivedKey"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   name   FROM   sys . example \"  ,     \" SELECT    ' test '    AS   name \"  )  ;", "MaterializedResult   result    =    computeActual (  \" SHOW   SCHEMAS \"  )  ;", "assertTrue ( result . getOnlyColumnAsSet (  )  . containsAll ( ImmutableSet . of (  \" sf 1  0  0  \"  ,     \" tiny \"  ,     \" sys \"  )  )  )  ;", "result    =    computeActual (  \" SHOW   TABLES   FROM   sys \"  )  ;", "assertEquals ( result . getOnlyColumnAsSet (  )  ,    ImmutableSet . of (  \" example \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testExampleSystemTable"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT    *  \\ n \"  )     +     \"       FROM   orders \\ n \"  )     +     \"       WHERE   orderkey    %     1  0  0  0  0     =     0  )    o 1  \\ n \"  )     +     \" JOIN    (  \\ n \"  )     +     \"       SELECT    *  \\ n \"  )     +     \"       FROM   orders \\ n \"  )     +     \"       WHERE   orderkey    %     4     =     0  )    o 2  \\ n \"  )     +     \"       ON   o 1  . orderstatus    =    o 2  . orderstatus   AND   o 1  . shippriority    =    o 2  . shippriority \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testHighCardinalityIndexJoinResult"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT    *  ,    custkey    %     4    AS   x ,    custkey    %     2    AS   y \\ n \"  )     +     \"       FROM   orders \\ n \"  )     +     \"       WHERE   orderkey    %     1  0  0  0  0     =     0  )    o 1  \\ n \"  )     +     \" JOIN    (  \\ n \"  )     +     \"       SELECT    *  ,    custkey    %     5    AS   x ,    custkey    %     3    AS   y \\ n \"  )     +     \"       FROM   orders \\ n \"  )     +     \"       WHERE   orderkey    %     4     =     0  )    o 2  \\ n \"  )     +     \"       ON   o 1  . orderstatus    =    o 2  . orderstatus   AND   o 1  . shippriority    =    o 2  . shippriority   AND   o 1  . x    =    o 2  . x   AND   o 1  . y    =    o 2  . y \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testHighCardinalityReducedIndexProbeKey"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  \" SELECT   x ,    y ,    COUNT (  *  )  \\ n \"     +     \" FROM    ( SELECT   orderkey ,     0    AS   x   FROM   orders )    a    \\ n \"  )     +     \" JOIN    ( SELECT   orderkey ,     1    AS   y   FROM   orders )    b    \\ n \"  )     +     \" ON   a . orderkey    =    b . orderkey \\ n \"  )     +     \" GROUP   BY    1  ,     2  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testIndexJoinConstantPropagation"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT    *  \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     8     =     0  )    l \\ n \"  )     +     \" JOIN    (  \\ n \"  )     +     \"       SELECT   orderkey ,    COUNT (  *  )  \\ n \"  )     +     \"       FROM   orders \\ n \"  )     +     \"       WHERE   custkey    %     8     =     0  \\ n \"  )     +     \"       GROUP   BY   orderkey \\ n \"  )     +     \"       ORDER   BY   orderkey )    o \\ n \"  )     +     \"       ON   l . orderkey    =    o . orderkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testIndexJoinThroughAggregation"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT    *  \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     8     =     0  )    l \\ n \"  )     +     \" JOIN    (  \\ n \"  )     +     \"       SELECT   shippriority ,    orderkey ,    COUNT (  *  )  \\ n \"  )     +     \"       FROM   orders \\ n \"  )     +     \"       WHERE   custkey    %     8     =     0  \\ n \"  )     +     \"       GROUP   BY   shippriority ,    orderkey \\ n \"  )     +     \"       ORDER   BY   orderkey )    o \\ n \"  )     +     \"       ON   l . orderkey    =    o . orderkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testIndexJoinThroughMultiKeyAggregation"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT    *  \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     1  6     =     0  )    l \\ n \"  )     +     \" JOIN    (  \\ n \"  )     +     \"       SELECT    *  ,    COUNT (  *  )    OVER    ( PARTITION   BY   orderkey )  \\ n \"  )     +     \"       FROM   orders )    o \\ n \"  )     +     \"       ON   l . orderkey    =    o . orderkey \"  )  )  ,     (  \"  \"     +     (  (  (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT    *  \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     1  6     =     0  )    l \\ n \"  )     +     \" JOIN    (  \\ n \"  )     +     \"       SELECT    *  ,     1  \\ n \"  )     +     \"       FROM   orders )    o \\ n \"  )     +     \"       ON   l . orderkey    =    o . orderkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testIndexJoinThroughWindow"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT    *  \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     1  6     =     0  )    l \\ n \"  )     +     \" JOIN    (  \\ n \"  )     +     \"       SELECT    *  ,    COUNT (  *  )    OVER    ( PARTITION   BY   orderkey )  ,    SUM ( orderkey )    OVER    ( PARTITION   BY   orderkey )  \\ n \"  )     +     \"       FROM   orders )    o \\ n \"  )     +     \"       ON   l . orderkey    =    o . orderkey \"  )  )  ,     (  \"  \"     +     (  (  (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT    *  \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     1  6     =     0  )    l \\ n \"  )     +     \" JOIN    (  \\ n \"  )     +     \"       SELECT    *  ,     1  ,    orderkey   as   o \\ n \"  )     +     \"       FROM   orders )    o \\ n \"  )     +     \"       ON   l . orderkey    =    o . orderkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testIndexJoinThroughWindowDoubleAggregation"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT    *  \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     1  6     =     0  )    l \\ n \"  )     +     \" JOIN    (  \\ n \"  )     +     \"       SELECT    *  ,    COUNT (  *  )    OVER    ( PARTITION   BY   orderkey ,    custkey )  \\ n \"  )     +     \"       FROM   orders )    o \\ n \"  )     +     \"       ON   l . orderkey    =    o . orderkey \"  )  )  ,     (  \"  \"     +     (  (  (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT    *  \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     1  6     =     0  )    l \\ n \"  )     +     \" JOIN    (  \\ n \"  )     +     \"       SELECT    *  ,     1  \\ n \"  )     +     \"       FROM   orders )    o \\ n \"  )     +     \"       ON   l . orderkey    =    o . orderkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testIndexJoinThroughWindowPartialPartition"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   orders . custkey    =     1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithNonJoinExpression"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT   orderkey ,    CASE   WHEN   suppkey    %     2     =     0    THEN    \\  ' F \\  '    ELSE    \\  ' O \\  '    END   AS   orderstatus \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     8     =     0  )    l \\ n \"  )     +     \" JOIN   orders   o \\ n \"  )     +     \"       ON   l . orderkey    =    o . orderkey   AND   l . orderstatus    =    o . orderstatus \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testMultiKeyIndexJoinAligned"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT   orderkey ,    CASE   WHEN   suppkey    %     2     =     0    THEN    \\  ' F \\  '    ELSE    \\  ' O \\  '    END   AS   orderstatus \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     8     =     0  )    l \\ n \"  )     +     \" JOIN   orders   o \\ n \"  )     +     \"       ON   l . orderstatus    =    o . orderstatus   AND   l . orderkey    =    o . orderkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testMultiKeyIndexJoinUnaligned"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT    *  \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     1  6     =     0  )    l \\ n \"  )     +     \" JOIN    (  \\ n \"  )     +     \"       SELECT    *  ,    COUNT (  *  )    OVER    ( PARTITION   BY   orderkey   ORDER   BY   custkey )  \\ n \"  )     +     \"       FROM   orders )    o \\ n \"  )     +     \"       ON   l . orderkey    =    o . orderkey \"  )  )  ,     (  \"  \"     +     (  (  (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT    *  \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     1  6     =     0  )    l \\ n \"  )     +     \" JOIN    (  \\ n \"  )     +     \"       SELECT    *  ,     1  \\ n \"  )     +     \"       FROM   orders )    o \\ n \"  )     +     \"       ON   l . orderkey    =    o . orderkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testNoIndexJoinThroughWindowWithOrderBy"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  \" SELECT   l . orderkey ,    o . c \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT    *  \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     1  6     =     0  )    l \\ n \"  )     +     \" JOIN    (  \\ n \"  )     +     \"       SELECT    *  ,    COUNT (  *  )    OVER    ( PARTITION   BY   orderkey   ROWS    1    PRECEDING )    as   c \\ n \"  )     +     \"       FROM   orders )    o \\ n \"  )     +     \"       ON   l . orderkey    =    o . orderkey \"  )  )  ,     (  \"  \"     +     (  (  (  (  (  (  (  (  \" SELECT   l . orderkey ,    o . c \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT    *  \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     1  6     =     0  )    l \\ n \"  )     +     \" JOIN    (  \\ n \"  )     +     \"       SELECT    *  ,     1    as   c \\ n \"  )     +     \"       FROM   orders )    o \\ n \"  )     +     \"       ON   l . orderkey    =    o . orderkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testNoIndexJoinThroughWindowWithRowFrame"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT    *  \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     1  6     =     0  )    l \\ n \"  )     +     \" JOIN    (  \\ n \"  )     +     \"       SELECT    *  ,    row _ number (  )    OVER    ( PARTITION   BY   orderkey )  \\ n \"  )     +     \"       FROM   orders )    o \\ n \"  )     +     \"       ON   l . orderkey    =    o . orderkey \"  )  )  ,     (  \"  \"     +     (  (  (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT    *  \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     1  6     =     0  )    l \\ n \"  )     +     \" JOIN    (  \\ n \"  )     +     \"       SELECT    *  ,     1  \\ n \"  )     +     \"       FROM   orders )    o \\ n \"  )     +     \"       ON   l . orderkey    =    o . orderkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testNoIndexJoinThroughWindowWithRowNumberFunction"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT    *  \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     8     =     0  )    x \\ n \"  )     +     \" JOIN    (  \\ n \"  )     +     \"       SELECT   l . orderkey   as   orderkey ,    o . custkey   as   custkey \\ n \"  )     +     \"       FROM   lineitem   l \\ n \"  )     +     \"       JOIN   orders   o \\ n \"  )     +     \"             ON   l . orderkey    =    o . orderkey )    y \\ n \"  )     +     \"       ON   x . orderkey    =    y . orderkey \\ n \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testNonComposableIndexJoins"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   lineitem . quantity    +    length ( orders . comment )     >     7  \"  )  ;", "}", "METHOD_END"], "methodName": ["testNonEquiJoin"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM   orders   o    \"  )     +     \" LEFT   JOIN    (  \\ n \"  )     +     \"       SELECT    *  \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     8     =     0  )    l \\ n \"  )     +     \"       ON   o . orderkey    =    l . orderkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testNonIndexLeftJoin"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  \" SELECT   COUNT (  *  )  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT    *  \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     8     =     0  )    l \\ n \"  )     +     \" RIGHT   JOIN   orders   o \\ n \"  )     +     \"       ON   l . orderkey    =    o . orderkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testNonIndexRightJoin"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT    *  \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     8     =     0  )    l \\ n \"  )     +     \" JOIN    (  \\ n \"  )     +     \"       SELECT   orderkey    %     2    as   orderkey \\ n \"  )     +     \"       FROM   orders )    o \\ n \"  )     +     \"       ON   l . orderkey    =    o . orderkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testNonIndexableKeys"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   LEFT   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   lineitem . quantity    >     5    WHERE   orders . orderkey   IS   NULL \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   orders   RIGHT   OUTER   JOIN   lineitem   ON   lineitem . orderkey    =    orders . orderkey   AND   lineitem . quantity    >     5    WHERE   orders . orderkey   IS   NULL \"  )  ;", "}", "METHOD_END"], "methodName": ["testOuterNonEquiJoins"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT    *  \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     8     =     0  )    l \\ n \"  )     +     \" JOIN   orders   o \\ n \"  )     +     \"       ON   l . orderkey    %     1  0  2  4     =    o . orderkey   AND   l . partkey    %     1  0  2  4     =    o . orderkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testOverlappingIndexJoinLookupSymbol"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT    *  \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     8     =     0  )    l \\ n \"  )     +     \" JOIN   orders   o \\ n \"  )     +     \"       ON   l . orderkey    =    o . orderkey   AND   l . orderkey    =    o . custkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testOverlappingIndexJoinProbeSymbol"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT    *  \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     8     =     0  )    l \\ n \"  )     +     \" LEFT   JOIN   orders   o \\ n \"  )     +     \"       ON   l . orderkey    %     1  0  2  4     =    o . orderkey   AND   l . partkey    %     1  0  2  4     =    o . orderkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testOverlappingSourceOuterIndexJoinLookupSymbol"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT    *  \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     8     =     0  )    l \\ n \"  )     +     \" LEFT   JOIN   orders   o \\ n \"  )     +     \"       ON   l . orderkey    =    o . orderkey   AND   l . orderkey    =    o . custkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testOverlappingSourceOuterIndexJoinProbeSymbol"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT   orderkey \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     8     =     0  )    l \\ n \"  )     +     \" JOIN   orders   o \\ n \"  )     +     \"       ON   l . orderkey    =    o . orderkey \\ n \"  )     +     \" WHERE   o . orderstatus    =     ' F '  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testPredicateDerivedKey"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" select   count (  *  )    from    ( values    (  1  )  ,     ( cast ( null   as   bigint )  )  )    x ( orderkey )    join   orders   using    ( orderkey )  \"  ,     \" select   count (  *  )    from   orders   where   orderkey    =     1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testProbeNullInReadahead"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT   orderkey    %     6  4    AS   a ,    suppkey    %     2    AS   b \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     8     =     0  )    l \\ n \"  )     +     \" JOIN    (  \\ n \"  )     +     \"       SELECT   orderkey   AS   a ,    SUM ( LENGTH ( comment )  )     %     2    AS   b \\ n \"  )     +     \"       FROM   orders \\ n \"  )     +     \"       GROUP   BY   orderkey )    o \\ n \"  )     +     \"       ON   l . a    =    o . a   AND   l . b    =    o . b \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testReducedIndexProbeKey"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT   orderkey    %     6  4    AS   a ,    suppkey    %     2    AS   b ,    orderkey   AS   c ,    linenumber    %     2    AS   d \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     7     =     0  )    l \\ n \"  )     +     \" JOIN    (  \\ n \"  )     +     \"       SELECT   t 1  . a   AS   a ,    t 1  . b   AS   b ,    t 2  . orderkey   AS   c ,    SUM ( LENGTH ( t 2  . comment )  )     %     2    AS   d \\ n \"  )     +     \"       FROM    (  \\ n \"  )     +     \"             SELECT   orderkey   AS   a ,    custkey    %     3    AS   b \\ n \"  )     +     \"             FROM   orders \\ n \"  )     +     \"        )    t 1  \\ n \"  )     +     \"       JOIN   orders   t 2    ON   t 1  . a    =     ( t 2  . orderkey    %     1  0  0  0  )  \\ n \"  )     +     \"       WHERE   t 1  . a    %     1  0  0  0     =     0  \\ n \"  )     +     \"       GROUP   BY   t 1  . a ,    t 1  . b ,    t 2  . orderkey )    o \\ n \"  )     +     \"       ON   l . a    =    o . a   AND   l . b    =    o . b   AND   l . c    =    o . c   AND   l . d    =    o . d \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testReducedIndexProbeKeyComplexQueryShapes"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT   orderkey    %     6  4    AS   a ,     ( suppkey    %     2  )     +     1    AS   b \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     8     =     0  )    l \\ n \"  )     +     \" JOIN    (  \\ n \"  )     +     \"       SELECT   orderkey   AS   a ,    SUM ( LENGTH ( comment )  )     %     2    AS   b \\ n \"  )     +     \"       FROM   orders \\ n \"  )     +     \"       GROUP   BY   orderkey )    o \\ n \"  )     +     \"       ON   l . a    =    o . a   AND   l . b    =    o . b \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testReducedIndexProbeKeyNegativeCaching"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT    *  \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     8     =     0  )    l \\ n \"  )     +     \" JOIN   orders   o \\ n \"  )     +     \"       ON   l . orderkey    =    o . orderkey   AND   l . orderkey    =    o . orderkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testRepeatedIndexJoinClause"], "fileName": "com.facebook.presto.tests.AbstractTestIndexedQueries"}, {"methodBody": ["METHOD_START", "{", "String   orderDateType ;", "if    ( dateSupported )     {", "orderDateType    =     \" date \"  ;", "} else    {", "orderDateType    =     \" varchar \"  ;", "}", "if    ( parametrizedVarchar )     {", "return   MaterializedResult . resultBuilder ( getQueryRunner (  )  . getDefaultSession (  )  ,    VARCHAR ,    VARCHAR ,    VARCHAR ,    VARCHAR )  . row (  \" orderkey \"  ,     \" bigint \"  ,     \"  \"  ,     \"  \"  )  . row (  \" custkey \"  ,     \" bigint \"  ,     \"  \"  ,     \"  \"  )  . row (  \" orderstatus \"  ,     \" varchar \"  ,     \"  \"  ,     \"  \"  )  . row (  \" totalprice \"  ,     \" double \"  ,     \"  \"  ,     \"  \"  )  . row (  \" orderdate \"  ,    orderDateType ,     \"  \"  ,     \"  \"  )  . row (  \" orderpriority \"  ,     \" varchar \"  ,     \"  \"  ,     \"  \"  )  . row (  \" clerk \"  ,     \" varchar \"  ,     \"  \"  ,     \"  \"  )  . row (  \" shippriority \"  ,     \" ier \"  ,     \"  \"  ,     \"  \"  )  . row (  \" comment \"  ,     \" varchar \"  ,     \"  \"  ,     \"  \"  )  . build (  )  ;", "} else    {", "return   MaterializedResult . resultBuilder ( getQueryRunner (  )  . getDefaultSession (  )  ,    VARCHAR ,    VARCHAR ,    VARCHAR ,    VARCHAR )  . row (  \" orderkey \"  ,     \" bigint \"  ,     \"  \"  ,     \"  \"  )  . row (  \" custkey \"  ,     \" bigint \"  ,     \"  \"  ,     \"  \"  )  . row (  \" orderstatus \"  ,     \" varchar (  1  )  \"  ,     \"  \"  ,     \"  \"  )  . row (  \" totalprice \"  ,     \" double \"  ,     \"  \"  ,     \"  \"  )  . row (  \" orderdate \"  ,    orderDateType ,     \"  \"  ,     \"  \"  )  . row (  \" orderpriority \"  ,     \" varchar (  1  5  )  \"  ,     \"  \"  ,     \"  \"  )  . row (  \" clerk \"  ,     \" varchar (  1  5  )  \"  ,     \"  \"  ,     \"  \"  )  . row (  \" shippriority \"  ,     \" ier \"  ,     \"  \"  ,     \"  \"  )  . row (  \" comment \"  ,     \" varchar (  7  9  )  \"  ,     \"  \"  ,     \"  \"  )  . build (  )  ;", "}", "}", "METHOD_END"], "methodName": ["getExpectedTableDescription"], "fileName": "com.facebook.presto.tests.AbstractTestIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   SUM ( orderkey )    FROM   ORDERS \"  )  ;", "assertQuery (  \" SELECT   SUM ( totalprice )    FROM   ORDERS \"  )  ;", "assertQuery (  \" SELECT   MAX ( ment )    FROM   ORDERS \"  )  ;", "}", "METHOD_END"], "methodName": ["testAggregateSingleColumn"], "fileName": "com.facebook.presto.tests.AbstractTestIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   shippriority ,    clerk ,    totalprice   FROM   ORDERS \"  )  ;", "}", "METHOD_END"], "methodName": ["testColumnsInReverseOrder"], "fileName": "com.facebook.presto.tests.AbstractTestIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   ORDERS \"  )  ;", "}", "METHOD_END"], "methodName": ["testCountAll"], "fileName": "com.facebook.presto.tests.AbstractTestIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actualColumns    =    computeActual (  \" DESC   ORDERS \"  )  . toTestTypes (  )  ;", "List < MaterializedResult >    expectedColumnsPossibilities    =    ImmutableList . of ( getExpectedTableDescription ( true ,    true )  ,    getExpectedTableDescription ( true ,    false )  ,    getExpectedTableDescription ( false ,    true )  ,    getExpectedTableDescription ( false ,    false )  )  ;", "assertTrue ( expectedColumnsPossibilities . contains ( actualColumns )  ,    String . format (  \"  % s   not   in    % s \"  ,    actualColumns ,    expectedColumnsPossibilities )  )  ;", "}", "METHOD_END"], "methodName": ["testDescribeTable"], "fileName": "com.facebook.presto.tests.AbstractTestIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  \" CREATE   TABLE   test    ( a   integer ,    a   integer )  \"  ,     \" line    1  :  3  1  :    Column   name    ' a '    specified   more   than   once \"  )  ;", "assertQueryFails (  \" CREATE   TABLE   test    ( a   integer ,    orderkey   integer ,    LIKE   orders   INCLUDING   PROPERTIES )  \"  ,     \" line    1  :  4  9  :    Column   name    ' orderkey '    specified   more   than   once \"  )  ;", "assertQueryFails (  \" CREATE   TABLE   test    ( a   integer ,    A   integer )  \"  ,     \" line    1  :  3  1  :    Column   name    ' A '    specified   more   than   once \"  )  ;", "assertQueryFails (  \" CREATE   TABLE   test    ( a   integer ,    OrderKey   integer ,    LIKE   orders   INCLUDING   PROPERTIES )  \"  ,     \" line    1  :  4  9  :    Column   name    ' orderkey '    specified   more   than   once \"  )  ;", "}", "METHOD_END"], "methodName": ["testDuplicatedRowCreateTable"], "fileName": "com.facebook.presto.tests.AbstractTestIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    *    FROM   ORDERS   WHERE   orderkey    =     1  0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testExactPredicate"], "fileName": "com.facebook.presto.tests.AbstractTestIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    *    FROM   ORDERS   WHERE   orderkey   IN    (  1  0  ,     1  1  ,     2  0  ,     2  1  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testInListPredicate"], "fileName": "com.facebook.presto.tests.AbstractTestIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    *    FROM   ORDERS   WHERE   orderkey    =     1  0    OR   orderkey   IS   NULL \"  )  ;", "}", "METHOD_END"], "methodName": ["testIsNullPredicate"], "fileName": "com.facebook.presto.tests.AbstractTestIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    *    FROM   ORDERS   WHERE   orderkey   BETWEEN    1  0    AND    5  0    or   orderkey   BETWEEN    1  0  0    AND    1  5  0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testMultipleRangesPredicate"], "fileName": "com.facebook.presto.tests.AbstractTestIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    *    FROM   ORDERS   WHERE   orderkey   BETWEEN    1  0    AND    5  0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testRangePredicate"], "fileName": "com.facebook.presto.tests.AbstractTestIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    *    FROM   ORDERS \"  )  ;", "}", "METHOD_END"], "methodName": ["testSelectAll"], "fileName": "com.facebook.presto.tests.AbstractTestIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "String   catalog    =    getSession (  )  . getCatalog (  )  . get (  )  ;", "String   schema    =    getSession (  )  . getSchema (  )  . get (  )  ;", "String   schemaPattern    =    schema . replaceAll (  \"  .  $  \"  ,     \"  _  \"  )  ;", "@ Language (  \" SQL \"  )", "String   ordersTableWithColumns    =     \" VALUES    \"     +     (  (  (  (  (  (  (  (  \"  (  ' orders '  ,     ' orderkey '  )  ,     \"     +     \"  (  ' orders '  ,     ' custkey '  )  ,     \"  )     +     \"  (  ' orders '  ,     ' orderstatus '  )  ,     \"  )     +     \"  (  ' orders '  ,     ' totalprice '  )  ,     \"  )     +     \"  (  ' orders '  ,     ' orderdate '  )  ,     \"  )     +     \"  (  ' orders '  ,     ' orderpriority '  )  ,     \"  )     +     \"  (  ' orders '  ,     ' clerk '  )  ,     \"  )     +     \"  (  ' orders '  ,     ' shippriority '  )  ,     \"  )     +     \"  (  ' orders '  ,     ' comment '  )  \"  )  ;", "assertQuery (  (  (  \" SELECT   table _ schema   FROM   inform _ schema . columns   WHERE   table _ schema    =     '  \"     +    schema )     +     \"  '    GROUP   BY   table _ schema \"  )  ,     (  (  \" VALUES    '  \"     +    schema )     +     \"  '  \"  )  )  ;", "assertQuery (  \" SELECT   table _ name   FROM   inform _ schema . columns   WHERE   table _ name    =     ' orders '    GROUP   BY   table _ name \"  ,     \" VALUES    ' orders '  \"  )  ;", "assertQuery (  (  (  \" SELECT   table _ name ,    column _ name   FROM   inform _ schema . columns   WHERE   table _ schema    =     '  \"     +    schema )     +     \"  '    AND   table _ name    =     ' orders '  \"  )  ,    ordersTableWithColumns )  ;", "assertQuery (  (  (  \" SELECT   table _ name ,    column _ name   FROM   inform _ schema . columns   WHERE   table _ schema    =     '  \"     +    schema )     +     \"  '    AND   table _ name   LIKE    '  % rders '  \"  )  ,    ordersTableWithColumns )  ;", "assertQuery (  (  (  \" SELECT   table _ name ,    column _ name   FROM   inform _ schema . columns   WHERE   table _ schema   LIKE    '  \"     +    schemaPattern )     +     \"  '    AND   table _ name   LIKE    '  _ rder _  '  \"  )  ,    ordersTableWithColumns )  ;", "assertQuery (  (  (  (  (  (  \" SELECT   table _ name ,    column _ name   FROM   inform _ schema . columns    \"     +     \" WHERE   table _ catalog    =     '  \"  )     +    catalog )     +     \"  '    AND   table _ schema    =     '  \"  )     +    schema )     +     \"  '    AND   table _ name   LIKE    '  % orders %  '  \"  )  ,    ordersTableWithColumns )  ;", "assertQuery (  \" SELECT   column _ name   FROM   inform _ schema . columns   WHERE   table _ catalog    =     ' something _ else '  \"  ,     \" SELECT    '  '    WHERE   false \"  )  ;", "}", "METHOD_END"], "methodName": ["testSelectInformationSchemaColumns"], "fileName": "com.facebook.presto.tests.AbstractTestIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "String   catalog    =    getSession (  )  . getCatalog (  )  . get (  )  ;", "String   schema    =    getSession (  )  . getSchema (  )  . get (  )  ;", "String   schemaPattern    =    schema . replaceAll (  \"  ^  .  \"  ,     \"  _  \"  )  ;", "assertQuery (  (  (  \" SELECT   table _ name   FROM   inform _ schema . tables   WHERE   table _ schema    =     '  \"     +    schema )     +     \"  '    AND   table _ name    =     ' orders '  \"  )  ,     \" VALUES    ' orders '  \"  )  ;", "assertQuery (  (  (  \" SELECT   table _ name   FROM   inform _ schema . tables   WHERE   table _ schema   LIKE    '  \"     +    schema )     +     \"  '    AND   table _ name   LIKE    '  % rders '  \"  )  ,     \" VALUES    ' orders '  \"  )  ;", "assertQuery (  (  (  \" SELECT   table _ name   FROM   inform _ schema . tables   WHERE   table _ schema   LIKE    '  \"     +    schemaPattern )     +     \"  '    AND   table _ name   LIKE    '  % rders '  \"  )  ,     \" VALUES    ' orders '  \"  )  ;", "assertQuery (  (  (  (  (  (  \" SELECT   table _ name   FROM   inform _ schema . tables    \"     +     \" WHERE   table _ catalog    =     '  \"  )     +    catalog )     +     \"  '    AND   table _ schema   LIKE    '  \"  )     +    schema )     +     \"  '    AND   table _ name   LIKE    '  % orders '  \"  )  ,     \" VALUES    ' orders '  \"  )  ;", "assertQuery (  \" SELECT   table _ name   FROM   inform _ schema . tables   WHERE   table _ catalog    =     ' something _ else '  \"  ,     \" SELECT    '  '    WHERE   false \"  )  ;", "}", "METHOD_END"], "methodName": ["testSelectInformationSchemaTables"], "fileName": "com.facebook.presto.tests.AbstractTestIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actualSchemas    =    computeActual (  \" SHOW   SCHEMAS \"  )  . toTestTypes (  )  ;", "MaterializedResult . Builder   resultBuilder    =    MaterializedResult . resultBuilder ( getQueryRunner (  )  . getDefaultSession (  )  ,    VARCHAR )  . row ( getQueryRunner (  )  . getDefaultSession (  )  . getSchema (  )  . orElse (  \" tpch \"  )  )  ;", "QueryAssertions . assertContains ( actualSchemas ,    resultBuilder . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["testShowSchemas"], "fileName": "com.facebook.presto.tests.AbstractTestIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actualTables    =    computeActual (  \" SHOW   TABLES \"  )  . toTestTypes (  )  ;", "MaterializedResult   expectedTables    =    MaterializedResult . resultBuilder ( getQueryRunner (  )  . getDefaultSession (  )  ,    VARCHAR )  . row (  \" orders \"  )  . build (  )  ;", "QueryAssertions . assertContains ( actualTables ,    expectedTables )  ;", "}", "METHOD_END"], "methodName": ["testShowTables"], "fileName": "com.facebook.presto.tests.AbstractTestIntegrationSmokeTest"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    Session . builder ( getSession (  )  )  . addPreparedStatement (  \" my _ query \"  ,    sql )  . build (  )  ;", "MaterializedResult   actual    =    computeActual ( session ,     \" DESCRIBE   OUTPUT   my _ query \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( session ,    VARCHAR ,    VARCHAR ,    VARCHAR ,    VARCHAR ,    VARCHAR ,    BIGINT ,    BOOLEAN )  . build (  )  ;", "yAssertions . assertEqualsIgnoreOrder ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["assertDescribeOutputEmpty"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    Session . builder ( getSession (  )  )  . addPreparedStatement (  \" my _ query \"  ,    sql )  . build (  )  ;", "MaterializedResult   actual    =    computeActual ( session ,     \" DESCRIBE   OUTPUT   my _ query \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( session ,    VARCHAR ,    VARCHAR ,    VARCHAR ,    VARCHAR ,    VARCHAR ,    BIGINT ,    BOOLEAN )  . row (  \" rows \"  ,     \"  \"  ,     \"  \"  ,     \"  \"  ,     \" bigint \"  ,     8  ,    false )  . build (  )  ;", "yAssertions . assertEqualsIgnoreOrder ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["assertDescribeOutputRowCount"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertExplainDdl ( query ,    query )  ;", "}", "METHOD_END"], "methodName": ["assertExplainDdl"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   result    =    computeActual (  (  \" EXPLAIN    \"     +    query )  )  ;", "assertEquals ( getOnlyElement ( result . getOnlyColumnAsSet (  )  )  ,    expected )  ;", "}", "METHOD_END"], "methodName": ["assertExplainDdl"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "return   Session . builder ( getSession (  )  )  . setSystemProperty ( SystemSessionProperties . REORDER _ JOINS ,     \" false \"  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["noJoinReordering"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "return   QueryTemplate . queryTemplate (  \" SELECT    % value %     % operator %     % quantifier %     ( SELECT    *    FROM    (  % subquery %  )  )  \"  )  . replaceAll ( QueryTemplate . parameter (  \" subquery \"  )  . of (  \" SELECT    1    WHERE   false \"  ,     \" SELECT   CAST ( NULL   AS   INTEGER )  \"  ,     \" VALUES    (  1  )  ,     ( NULL )  \"  )  ,    QueryTemplate . parameter (  \" quantifier \"  )  . of (  \" ALL \"  ,     \" ANY \"  )  ,    QueryTemplate . parameter (  \" value \"  )  . of (  \"  1  \"  ,     \" NULL \"  )  ,    QueryTemplate . parameter (  \" operator \"  )  . of (  \"  =  \"  ,     \"  !  =  \"  ,     \"  <  \"  ,     \"  >  \"  ,     \"  <  =  \"  ,     \"  >  =  \"  )  )  . collect ( toDataProvider (  )  )  ;", "}", "METHOD_END"], "methodName": ["qualifiedComparisonsCornerCases"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   result    =    computeActual (  \" SELECT   INTERVAL    '  3  0  '    DAY \"  )  ;", "assertEquals ( result . getRowCount (  )  ,     1  )  ;", "assertEquals ( result . getMaterializedRows (  )  . get (  0  )  . getField (  0  )  ,    new   SqlIntervalDayTime (  3  0  ,     0  ,     0  ,     0  ,     0  )  )  ;", "result    =    computeActual (  (  (  \" SELECT   INTERVAL    '  \"     +     ( Short . MAX _ VALUE )  )     +     \"  '    YEAR \"  )  )  ;", "assertEquals ( result . getRowCount (  )  ,     1  )  ;", "assertEquals ( result . getMaterializedRows (  )  . get (  0  )  . getField (  0  )  ,    new   SqlIntervalYearMonth ( Short . MAX _ VALUE ,     0  )  )  ;", "}", "METHOD_END"], "methodName": ["selectLargeInterval"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   NULL \"  )  ;", "}", "METHOD_END"], "methodName": ["selectNull"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertAccessDenied (  \" SELECT   COUNT ( true )    FROM   orders \"  ,     \" Cannot   select   from   table    .  *  . orders .  *  \"  ,    privilege (  \" orders \"  ,    TestingPrivilegeType . SELECT _ TABLE )  )  ;", "assertAccessDenied (  \" INSERT   INTO   orders   SELECT    *    FROM   orders \"  ,     \" Cannot   insert   into   table    .  *  . orders .  *  \"  ,    privilege (  \" orders \"  ,    TestingPrivilegeType . INSERT _ TABLE )  )  ;", "assertAccessDenied (  \" DELETE   FROM   orders \"  ,     \" Cannot   delete   from   table    .  *  . orders .  *  \"  ,    privilege (  \" orders \"  ,    TestingPrivilegeType . DELETE _ TABLE )  )  ;", "assertAccessDenied (  \" CREATE   TABLE   foo   AS   SELECT    *    FROM   orders \"  ,     \" Cannot   create   table    .  *  . foo .  *  \"  ,    privilege (  \" foo \"  ,    TestingPrivilegeType . CREATE _ TABLE )  )  ;", "}", "METHOD_END"], "methodName": ["testAccessControl"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   clerk ,    min ( totalprice )  ,    max ( totalprice )  ,    min ( nullvalue )  ,    max ( nullvalue )     \"     +     (  \" FROM    ( SELECT   clerk ,    totalprice ,    null   AS   nullvalue   FROM   orders )     \"     +     \" GROUP   BY   clerk \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testAggregationOverUnknown"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   x ,    y   FROM    ( SELECT   orderkey   x ,    custkey   y   FROM   orders )    U \"  )  ;", "}", "METHOD_END"], "methodName": ["testAliasedInInlineView"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  \" SELECT    *  ,    orderkey \\ n \"     +     \"       NOT   IN    (  \\ n \"  )     +     \"             SELECT   orderkey \\ n \"  )     +     \"             FROM   lineitem \\ n \"  )     +     \"             WHERE   orderkey    %     3     =     0  )  \\ n \"  )     +     \" FROM   orders \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testAntiJoin"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" WITH   empty   AS    ( SELECT    1    WHERE   FALSE )     \"     +     \" SELECT    3    FROM    ( VALUES    1  )    WHERE   NULL   NOT   IN    ( SELECT    *    FROM   empty )  \"  )  ,     \" VALUES    3  \"  )  ;", "assertQuery (  (  \" WITH   empty   AS    ( SELECT    1    WHERE   FALSE )     \"     +     \" SELECT   x   FROM    ( VALUES   NULL )    t ( x )    WHERE   x   NOT   IN    ( SELECT    *    FROM   empty )  \"  )  ,     \" VALUES   NULL \"  )  ;", "}", "METHOD_END"], "methodName": ["testAntiJoinNullHandling"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   raw    =    computeActual (  \" SELECT   orderstatus ,    orderkey ,    totalprice   FROM   orders \"  )  ;", "Multimap < String ,    Long >    orderKeyByStatus    =    ArrayListMultimap . create (  )  ;", "Multimap < String ,    Double >    totalPriceByStatus    =    ArrayListMultimap . create (  )  ;", "for    ( MaterializedRow   row    :    raw . getMaterializedRows (  )  )     {", "orderKeyByStatus . put (  (  ( String )     ( row . getField (  0  )  )  )  ,     (  ( Number )     ( row . getField (  1  )  )  )  . longValue (  )  )  ;", "totalPriceByStatus . put (  (  ( String )     ( row . getField (  0  )  )  )  ,     (  ( Double )     ( row . getField (  2  )  )  )  )  ;", "}", "MaterializedResult   actual    =    computeActual (  (  \"  \"     +     (  (  (  (  (  (  \" SELECT   orderstatus ,     \"     +     \"          approx _ percentile ( orderkey ,     0  .  5  )  ,     \"  )     +     \"          approx _ percentile ( totalprice ,     0  .  5  )  ,  \"  )     +     \"          approx _ percentile ( orderkey ,     2  ,     0  .  5  )  ,  \"  )     +     \"          approx _ percentile ( totalprice ,     2  ,     0  .  5  )  \\ n \"  )     +     \" FROM   orders \\ n \"  )     +     \" GROUP   BY   orderstatus \"  )  )  )  ;", "for    ( MaterializedRow   row    :    actual . getMaterializedRows (  )  )     {", "String   status    =     (  ( String )     ( row . getField (  0  )  )  )  ;", "Long   orderKey    =     (  ( Number )     ( row . getField (  1  )  )  )  . longValue (  )  ;", "Double   totalPrice    =     (  ( Double )     ( row . getField (  2  )  )  )  ;", "Long   orderKeyWeighted    =     (  ( Number )     ( row . getField (  3  )  )  )  . longValue (  )  ;", "Double   totalPriceWeighted    =     (  ( Double )     ( row . getField (  4  )  )  )  ;", "List < Long >    orderKeys    =    Ordering . natural (  )  . sortedCopy ( orderKeyByStatus . get ( status )  )  ;", "List < Double >    totalPrices    =    Ordering . natural (  )  . sortedCopy ( totalPriceByStatus . get ( status )  )  ;", "assertTrue (  ( orderKey    >  =     ( orderKeys . get (  (  ( int )     (  0  .  4  9     *     ( orderKeys . size (  )  )  )  )  )  )  )  )  ;", "assertTrue (  ( orderKey    <  =     ( orderKeys . get (  (  ( int )     (  0  .  5  1     *     ( orderKeys . size (  )  )  )  )  )  )  )  )  ;", "assertTrue (  ( orderKeyWeighted    >  =     ( orderKeys . get (  (  ( int )     (  0  .  4  9     *     ( orderKeys . size (  )  )  )  )  )  )  )  )  ;", "assertTrue (  ( orderKeyWeighted    <  =     ( orderKeys . get (  (  ( int )     (  0  .  5  1     *     ( orderKeys . size (  )  )  )  )  )  )  )  )  ;", "assertTrue (  ( totalPrice    >  =     ( totalPrices . get (  (  ( int )     (  0  .  4  9     *     ( totalPrices . size (  )  )  )  )  )  )  )  )  ;", "assertTrue (  ( totalPrice    <  =     ( totalPrices . get (  (  ( int )     (  0  .  5  1     *     ( totalPrices . size (  )  )  )  )  )  )  )  )  ;", "assertTrue (  ( totalPriceWeighted    >  =     ( totalPrices . get (  (  ( int )     (  0  .  4  9     *     ( totalPrices . size (  )  )  )  )  )  )  )  )  ;", "assertTrue (  ( totalPriceWeighted    <  =     ( totalPrices . get (  (  ( int )     (  0  .  5  1     *     ( totalPrices . size (  )  )  )  )  )  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testApproxPercentile"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  \" SELECT   cardinality ( approx _ set ( custkey )  )    FROM   orders \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    BIGINT )  . row (  1  0  0  2 L )  . build (  )  ;", "assertEquals ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testApproxSetBigint"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  (  \"  \"     +     (  (  \" SELECT   orderstatus ,    cardinality ( approx _ set ( custkey )  )     \"     +     \" FROM   orders    \"  )     +     \" GROUP   BY   orderstatus \"  )  )  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    actual . getTypes (  )  )  . row (  \" O \"  ,     1  0  0  1 L )  . row (  \" F \"  ,     9  9  8 L )  . row (  \" P \"  ,     3  0  4 L )  . build (  )  ;", "yAssertions . assertEqualsIgnoreOrder ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testApproxSetBigintGroupBy"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  \" SELECT   cardinality ( approx _ set ( CAST ( custkey   AS   DOUBLE )  )  )    FROM   orders \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    BIGINT )  . row (  1  0  1  4 L )  . build (  )  ;", "assertEquals ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testApproxSetDouble"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  (  \"  \"     +     (  (  \" SELECT   orderstatus ,    cardinality ( approx _ set ( CAST ( custkey   AS   DOUBLE )  )  )     \"     +     \" FROM   orders    \"  )     +     \" GROUP   BY   orderstatus \"  )  )  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    actual . getTypes (  )  )  . row (  \" O \"  ,     1  0  1  1 L )  . row (  \" F \"  ,     1  0  1  1 L )  . row (  \" P \"  ,     3  0  4 L )  . build (  )  ;", "yAssertions . assertEqualsIgnoreOrder ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testApproxSetDoubleGroupBy"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  (  \"  \"     +     (  (  \" SELECT   orderstatus ,    cardinality ( approx _ set ( IF ( custkey    %     2     <  >     0  ,    custkey )  )  )     \"     +     \" FROM   orders    \"  )     +     \" GROUP   BY   orderstatus \"  )  )  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    actual . getTypes (  )  )  . row (  \" O \"  ,     4  9  9 L )  . row (  \" F \"  ,     4  9  6 L )  . row (  \" P \"  ,     1  5  3 L )  . build (  )  ;", "yAssertions . assertEqualsIgnoreOrder ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testApproxSetGroupByWithNulls"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  (  \"  \"     +     (  (  \" SELECT   orderstatus ,    cardinality ( approx _ set ( IF ( orderstatus    !  =     ' O '  ,    custkey )  )  )     \"     +     \" FROM   orders    \"  )     +     \" GROUP   BY   orderstatus \"  )  )  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    actual . getTypes (  )  )  . row (  \" O \"  ,    null )  . row (  \" F \"  ,     9  9  8 L )  . row (  \" P \"  ,     3  0  4 L )  . build (  )  ;", "yAssertions . assertEqualsIgnoreOrder ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testApproxSetGroupByWithOnlyNullsInOneGroup"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  \" SELECT   cardinality ( approx _ set ( null )  )    FROM   orders \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    actual . getTypes (  )  )  . row ( new   Object [  ]  {    null    }  )  . build (  )  ;", "assertEquals ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testApproxSetOnlyNulls"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  \" SELECT   cardinality ( approx _ set ( CAST ( custkey   AS   VARCHAR )  )  )    FROM   orders \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    BIGINT )  . row (  1  0  2  4 L )  . build (  )  ;", "assertEquals ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testApproxSetVarchar"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  (  \"  \"     +     (  (  \" SELECT   orderstatus ,    cardinality ( approx _ set ( CAST ( custkey   AS   VARCHAR )  )  )     \"     +     \" FROM   orders    \"  )     +     \" GROUP   BY   orderstatus \"  )  )  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    actual . getTypes (  )  )  . row (  \" O \"  ,     1  0  2  1 L )  . row (  \" F \"  ,     1  0  1  9 L )  . row (  \" P \"  ,     3  0  4 L )  . build (  )  ;", "yAssertions . assertEqualsIgnoreOrder ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testApproxSetVarcharGroupBy"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  \" SELECT   cardinality ( approx _ set ( IF ( orderstatus    =     ' O '  ,    custkey )  )  )    FROM   orders \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    actual . getTypes (  )  )  . row (  1  0  0  1 L )  . build (  )  ;", "assertEquals ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testApproxSetWithNulls"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    - custkey   FROM   orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testArithmeticNegation"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   clerk ,    cardinality ( array _ agg ( orderkey )  )    FROM   orders   GROUP   BY   clerk \"  ,     \" SELECT   clerk ,    count (  *  )    FROM   orders   GROUP   BY   clerk \"  )  ;", "}", "METHOD_END"], "methodName": ["testArrayAgg"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "List < Integer >    expected    =    IntStream . rangeClosed (  1  ,     5  0  0  )  . boxed (  )  . collect ( Collectors . toList (  )  )  ;", "Set < List < Integer >  >    distinctResults    =    new   HashSet <  >  (  )  ;", "distinctResults . add ( expected )  ;", "for    ( int   i    =     0  ;    i    <     3  ;    i +  +  )     {", "MaterializedResult   results    =    computeActual ( String . format (  \" SELECT   shuffle ( ARRAY    % s )    FROM   orders   LIMIT    1  0  \"  ,    expected )  )  ;", "List < MaterializedRow >    rows    =    results . getMaterializedRows (  )  ;", "assertTrue (  (  ( rows . size (  )  )     =  =     1  0  )  )  ;", "for    ( MaterializedRow   row    :    rows )     {", "List < Integer >    actual    =     (  ( List < Integer >  )     ( row . getField (  0  )  )  )  ;", "yAssertions . assertEqualsIgnoreOrder ( actual ,    expected )  ;", "distinctResults . add ( actual )  ;", "}", "}", "assertTrue (  (  ( distinctResults . size (  )  )     >  =     2  4  )  ,     \" shuffle   must   produce   at   least    2  4    distinct   results \"  )  ;", "}", "METHOD_END"], "methodName": ["testArrayShuffle"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   a [  1  ]    FROM    ( SELECT   ARRAY [ orderkey ]    AS   a   FROM   orders   ORDER   BY   orderkey )    t \"  ,     \" SELECT   orderkey   FROM   orders \"  )  ;", "assertQuery (  \" SELECT   a [  1     +    CAST ( round ( rand (  )  )    AS   BIGINT )  ]    FROM    ( SELECT   ARRAY [ orderkey ,    orderkey ]    AS   a   FROM   orders   ORDER   BY   orderkey )    t \"  ,     \" SELECT   orderkey   FROM   orders \"  )  ;", "assertQuery (  \" SELECT   a [  1  ]     +     1    FROM    ( SELECT   ARRAY [ orderkey ]    AS   a   FROM   orders   ORDER   BY   orderkey )    t \"  ,     \" SELECT   orderkey    +     1    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   a [  1  ]    FROM    ( SELECT   ARRAY [ orderkey    +     1  ]    AS   a   FROM   orders   ORDER   BY   orderkey )    t \"  ,     \" SELECT   orderkey    +     1    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   a [  1  ]  [  1  ]    FROM    ( SELECT   ARRAY [ ARRAY [ orderkey    +     1  ]  ]    AS   a   FROM   orders   ORDER   BY   orderkey )    t \"  ,     \" SELECT   orderkey    +     1    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   CARDINALITY ( a )    FROM    ( SELECT   ARRAY [ orderkey ,    orderkey    +     1  ]    AS   a   FROM   orders   ORDER   BY   orderkey )    t \"  ,     \" SELECT    2    FROM   orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testArrays"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "String   unionLineitem 5  0 Times    =    IntStream . range (  0  ,     5  0  )  . mapToObj (  (    i )     -  >     \" SELECT    *    FROM   lineitem \"  )  . collect ( Collectors . joining (  \"    UNION   ALL    \"  )  )  ;", "assery (  (  (  (  (  \" SELECT   count (  *  )    FROM    (  \"     +     (  (  (  \" SELECT    *    FROM    (  \"     +     \"          SELECT    ( SELECT   count (  *  )    WHERE   c    =     1  )     \"  )     +     \"          FROM    ( SELECT   CASE   orderkey   WHEN    1    THEN   orderkey   ELSE    1    END    \"  )     +     \"                      FROM    (  \"  )  )     +    unionLineitem 5  0 Times )     +     \"  )  )    o ( c )  )    result ( a )     \"  )     +     \" WHERE   a    =     1  )  \"  )  ,     \" VALUES    3  0  0  8  7  5  0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testAssignUniqueId"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( computeScalar (  \" SELECT   TIMESTAMP    '  2  0  1  2  -  1  0  -  3  1     0  1  :  0  0  '    AT   TIME   ZONE   INTERVAL    '  0  7  :  0  9  '    hour   to   minute \"  )  ,    zonedDateTime (  \"  2  0  1  2  -  1  0  -  3  1     0  8  :  0  9  :  0  0  .  0  0  0     +  0  7  :  0  9  \"  )  )  ;", "assertEquals ( computeScalar (  \" SELECT   TIMESTAMP    '  2  0  1  2  -  1  0  -  3  1     0  1  :  0  0  '    AT   TIME   ZONE    ' Asia / Oral '  \"  )  ,    zonedDateTime (  \"  2  0  1  2  -  1  0  -  3  1     0  6  :  0  0  :  0  0  .  0  0  0    Asia / Oral \"  )  )  ;", "assertEquals ( computeScalar (  \" SELECT   MIN ( x )    AT   TIME   ZONE    ' America / Chicago '    FROM    ( VALUES   TIMESTAMP    '  1  9  7  0  -  0  1  -  0  1     0  0  :  0  1  :  0  0  +  0  0  :  0  0  '  )    t ( x )  \"  )  ,    zonedDateTime (  \"  1  9  6  9  -  1  2  -  3  1     1  8  :  0  1  :  0  0  .  0  0  0    America / Chicago \"  )  )  ;", "assertEquals ( computeScalar (  \" SELECT   TIMESTAMP    '  2  0  1  2  -  1  0  -  3  1     0  1  :  0  0  '    AT   TIME   ZONE    '  +  0  7  :  0  9  '  \"  )  ,    zonedDateTime (  \"  2  0  1  2  -  1  0  -  3  1     0  8  :  0  9  :  0  0  .  0  0  0     +  0  7  :  0  9  \"  )  )  ;", "assertEquals ( computeScalar (  \" SELECT   TIMESTAMP    '  2  0  1  2  -  1  0  -  3  1     0  1  :  0  0    UTC '    AT   TIME   ZONE    ' America / Los _ Angeles '  \"  )  ,    zonedDateTime (  \"  2  0  1  2  -  1  0  -  3  0     1  8  :  0  0  :  0  0  .  0  0  0    America / Los _ Angeles \"  )  )  ;", "assertEquals ( computeScalar (  \" SELECT   TIMESTAMP    '  2  0  1  2  -  1  0  -  3  1     0  1  :  0  0  '    AT   TIME   ZONE    ' America / Los _ Angeles '  \"  )  ,    zonedDateTime (  \"  2  0  1  2  -  1  0  -  3  0     1  8  :  0  0  :  0  0  .  0  0  0    America / Los _ Angeles \"  )  )  ;", "assertEquals ( computeActual (  \" SELECT   x   AT   TIME   ZONE    ' America / Los _ Angeles '    FROM    ( values   TIMESTAMP    '  1  9  7  0  -  0  1  -  0  1     0  0  :  0  1  :  0  0  +  0  0  :  0  0  '  ,    TIMESTAMP    '  1  9  7  0  -  0  1  -  0  1     0  8  :  0  1  :  0  0  +  0  8  :  0  0  '  ,    TIMESTAMP    '  1  9  6  9  -  1  2  -  3  1     1  6  :  0  1  :  0  0  -  0  8  :  0  0  '  )    t ( x )  \"  )  . getOnlyColumnAsSet (  )  ,    ImmutableSet . of ( zonedDateTime (  \"  1  9  6  9  -  1  2  -  3  1     1  6  :  0  1  :  0  0  .  0  0  0    America / Los _ Angeles \"  )  )  )  ;", "assertEquals ( computeActual (  \" SELECT   x   AT   TIME   ZONE    ' America / Los _ Angeles '    FROM    ( values   TIMESTAMP    '  1  9  7  0  -  0  1  -  0  1     0  0  :  0  1  :  0  0  '  ,    TIMESTAMP    '  1  9  7  0  -  0  1  -  0  1     0  8  :  0  1  :  0  0  '  ,    TIMESTAMP    '  1  9  6  9  -  1  2  -  3  1     1  6  :  0  1  :  0  0  '  )    t ( x )  \"  )  . getOnlyColumn (  )  . collect ( Collectors . toList (  )  )  ,    ImmutableList . of ( zonedDateTime (  \"  1  9  6  9  -  1  2  -  3  1     1  6  :  0  1  :  0  0  .  0  0  0    America / Los _ Angeles \"  )  ,    zonedDateTime (  \"  1  9  7  0  -  0  1  -  0  1     0  0  :  0  1  :  0  0  .  0  0  0    America / Los _ Angeles \"  )  ,    zonedDateTime (  \"  1  9  6  9  -  1  2  -  3  1     0  8  :  0  1  :  0  0  .  0  0  0    America / Los _ Angeles \"  )  )  )  ;", "assertEquals ( computeScalar (  \" SELECT   min ( x )    AT   TIME   ZONE    ' America / Los _ Angeles '    FROM    ( values   TIMESTAMP    '  1  9  7  0  -  0  1  -  0  1     0  0  :  0  1  :  0  0  +  0  0  :  0  0  '  ,    TIMESTAMP    '  1  9  7  0  -  0  1  -  0  1     0  8  :  0  1  :  0  0  +  0  8  :  0  0  '  ,    TIMESTAMP    '  1  9  6  9  -  1  2  -  3  1     1  6  :  0  1  :  0  0  -  0  8  :  0  0  '  )    t ( x )  \"  )  ,    zonedDateTime (  \"  1  9  6  9  -  1  2  -  3  1     1  6  :  0  1  :  0  0  .  0  0  0    America / Los _ Angeles \"  )  )  ;", "assertEquals ( computeScalar (  \" SELECT   TIMESTAMP    '  2  0  1  2  -  1  0  -  3  1     0  1  :  0  0  '    AT   TIME   ZONE    ' America / Los _ Angeles '    AT   TIME   ZONE    ' UTC '  \"  )  ,    zonedDateTime (  \"  2  0  1  2  -  1  0  -  3  1     0  1  :  0  0  :  0  0  .  0  0  0    UTC \"  )  )  ;", "assertEquals ( computeScalar (  \" SELECT   TIMESTAMP    '  2  0  1  2  -  1  0  -  3  1     0  1  :  0  0  '    AT   TIME   ZONE    ' Asia / Tokyo '    AT   TIME   ZONE    ' America / Los _ Angeles '  \"  )  ,    zonedDateTime (  \"  2  0  1  2  -  1  0  -  3  0     1  8  :  0  0  :  0  0  .  0  0  0    America / Los _ Angeles \"  )  )  ;", "assertEquals ( computeScalar (  \" SELECT   TIMESTAMP    '  2  0  1  2  -  1  0  -  3  1     0  1  :  0  0  '    AT   TIME   ZONE    ' America / Los _ Angeles '    AT   TIME   ZONE    ' Asia / Shanghai '  \"  )  ,    zonedDateTime (  \"  2  0  1  2  -  1  0  -  3  1     0  9  :  0  0  :  0  0  .  0  0  0    Asia / Shanghai \"  )  )  ;", "assertEquals ( computeScalar (  \" SELECT   min ( x )    AT   TIME   ZONE    ' America / Los _ Angeles '    AT   TIME   ZONE    ' UTC '    FROM    ( values   TIMESTAMP    '  1  9  7  0  -  0  1  -  0  1     0  0  :  0  1  :  0  0  +  0  0  :  0  0  '  ,    TIMESTAMP    '  1  9  7  0  -  0  1  -  0  1     0  8  :  0  1  :  0  0  +  0  8  :  0  0  '  ,    TIMESTAMP    '  1  9  6  9  -  1  2  -  3  1     1  6  :  0  1  :  0  0  -  0  8  :  0  0  '  )    t ( x )  \"  )  ,    zonedDateTime (  \"  1  9  7  0  -  0  1  -  0  1     0  0  :  0  1  :  0  0  .  0  0  0    UTC \"  )  )  ;", "assertEquals ( computeScalar (  \" SELECT    *    FROM    ( VALUES   TIMESTAMP    '  2  0  1  2  -  1  0  -  3  1     0  1  :  0  0  '    AT   TIME   ZONE    ' Asia / Oral '  )  \"  )  ,    zonedDateTime (  \"  2  0  1  2  -  1  0  -  3  1     0  6  :  0  0  :  0  0  .  0  0  0    Asia / Oral \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testAtTimeZone"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   AVG ( totalprice )    FROM   orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testAverageAll"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery ( noJoinReordering (  )  ,     \" SELECT    *    FROM   lineitem   LEFT   JOIN    ( SELECT    *    FROM   orders   WHERE   orderkey    %     2     =     0  )    a   ON   lineitem . orderkey    =    a . orderkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testBuildFilteredLeftJoin"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery ( noJoinReordering (  )  ,     \" SELECT   custkey ,    linestatus ,    tax ,    totalprice ,    orderstatus   FROM    ( SELECT    *    FROM   lineitem   WHERE   orderkey    %     2     =     0  )    a   RIGHT   JOIN   orders   ON   a . orderkey    =    orders . orderkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testBuildFilteredRightJoin"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   A .  *    FROM   orders   a \"  )  ;", "}", "METHOD_END"], "methodName": ["testCaseInsensitiveAliasedRelation"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   x   FROM    ( SELECT   orderkey   X   FROM   orders )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testCaseInsensitiveAttribute"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  \" SELECT   orderkey   X   FROM   orders   ORDER   BY   x \"  )  ;", "}", "METHOD_END"], "methodName": ["testCaseInsensitiveOutputAliasInOrderBy"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   a . Col 0    FROM    ( VALUES   row ( cast ( ROW (  1  ,  2  )    AS   ROW ( col 0    integer ,    col 1    integer )  )  )  )    AS   t    ( a )  \"  ,     \" SELECT    1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testCaseInsensitiveRowFieldReference"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   orderkey ,    CASE   orderstatus   WHEN    ' O '    THEN    ' a '    END   FROM   orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testCaseNoElse"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  \" SELECT   orderkey ,    CASE   orderstatus   WHEN    ' O '    THEN    ' a '    WHEN    '  1  '    THEN    2    END   FROM   orders \"  ,     \"  \\  \\ Qline    1  :  6  7  :    All   CASE   results   must   be   the   same   type :    varchar (  1  )  \\  \\ E \"  )  ;", "}", "METHOD_END"], "methodName": ["testCaseNoElseInconsistentResultType"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \"    SELECT   CASE   x   WHEN    1    THEN   CAST (  1    AS   decimal (  4  ,  1  )  )    WHEN    2    THEN   CAST (  1    AS   decimal (  4  ,  2  )  )    ELSE   CAST (  1    AS   decimal (  4  ,  3  )  )    END   FROM    ( values    1  )    t ( x )  \"  ,     \" SELECT    1  .  0  0  0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testCaseWithSupertypeCast"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   CAST (  '  1  '    AS   BIGINT )  \"  )  ;", "assertQuery (  \" SELECT   CAST ( totalprice   AS   BIGINT )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   CAST ( orderkey   AS   DOUBLE )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   CAST ( orderkey   AS   VARCHAR )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   CAST ( orderkey   AS   BOOLEAN )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   try _ cast (  '  1  '    AS   BIGINT )  \"  ,     \" SELECT   CAST (  '  1  '    AS   BIGINT )  \"  )  ;", "assertQuery (  \" SELECT   try _ cast ( totalprice   AS   BIGINT )    FROM   orders \"  ,     \" SELECT   CAST ( totalprice   AS   BIGINT )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   try _ cast ( orderkey   AS   DOUBLE )    FROM   orders \"  ,     \" SELECT   CAST ( orderkey   AS   DOUBLE )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   try _ cast ( orderkey   AS   VARCHAR )    FROM   orders \"  ,     \" SELECT   CAST ( orderkey   AS   VARCHAR )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   try _ cast ( orderkey   AS   BOOLEAN )    FROM   orders \"  ,     \" SELECT   CAST ( orderkey   AS   BOOLEAN )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   try _ cast (  ' foo '    AS   BIGINT )  \"  ,     \" SELECT   CAST ( null   AS   BIGINT )  \"  )  ;", "assertQuery (  \" SELECT   try _ cast ( clerk   AS   BIGINT )    FROM   orders \"  ,     \" SELECT   CAST ( null   AS   BIGINT )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   try _ cast ( orderkey    *    orderkey   AS   VARCHAR )    FROM   orders \"  ,     \" SELECT   CAST ( orderkey    *    orderkey   AS   VARCHAR )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   try _ cast ( try _ cast ( orderkey   AS   VARCHAR )    AS   BIGINT )    FROM   orders \"  ,     \" SELECT   orderkey   FROM   orders \"  )  ;", "assertQuery (  \" SELECT   try _ cast ( clerk   AS   VARCHAR )     |  |    try _ cast ( clerk   AS   VARCHAR )    FROM   orders \"  ,     \" SELECT   clerk    |  |    clerk   FROM   orders \"  )  ;", "assertQuery (  \" SELECT   coalesce ( try _ cast (  ' foo '    AS   BIGINT )  ,     4  5  6  )  \"  ,     \" SELECT    4  5  6  \"  )  ;", "assertQuery (  \" SELECT   coalesce ( try _ cast ( clerk   AS   BIGINT )  ,     4  5  6  )    FROM   orders \"  ,     \" SELECT    4  5  6    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   CAST ( x   AS   BIGINT )    FROM    ( VALUES    1  ,     2  ,     3  ,    NULL )    t    ( x )  \"  ,     \" VALUES    1  ,     2  ,     3  ,    NULL \"  )  ;", "assertQuery (  \" SELECT   try _ cast ( x   AS   BIGINT )    FROM    ( VALUES    1  ,     2  ,     3  ,    NULL )    t    ( x )  \"  ,     \" VALUES    1  ,     2  ,     3  ,    NULL \"  )  ;", "}", "METHOD_END"], "methodName": ["testCast"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  \" SELECT   orderkey   FROM   orders   UNION    ( SELECT   custkey   FROM   orders   UNION   SELECT   linenumber   FROM   lineitem )    UNION   ALL   SELECT   orderkey   FROM   lineitem   ORDER   BY   orderkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testChainedUnionsWithOrder"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   to _ hex ( checksum (  0  )  )  \"  ,     \" SELECT    '  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  '  \"  )  ;", "}", "METHOD_END"], "methodName": ["testChecksum"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   length ( NULL )  \"  )  ;", "assertQuery (  \" SELECT   CAST (  ' abc '    AS   VARCHAR (  2  5  5  )  )     |  |    CAST (  ' abc '    AS   VARCHAR (  2  5  2  )  )  \"  )  ;", "assertQuery (  \" SELECT   CAST (  ' abc '    AS   VARCHAR (  2  5  5  )  )     |  |     ' abc '  \"  )  ;", "assertQuery (  \" SELECT   CAST (  1  .  1    AS   DECIMAL (  3  8  ,  1  )  )     +    NULL \"  )  ;", "assertQuery (  \" SELECT   CAST (  2  9  2    AS   DECIMAL (  3  8  ,  1  )  )     +    CAST (  2  9  2  .  1    AS   DECIMAL (  5  ,  1  )  )  \"  )  ;", "QueryAssertions . assertEqualsIgnoreOrder ( computeActual (  \" SELECT   ARRAY [ CAST (  2  8  2    AS   DECIMAL (  2  2  ,  1  )  )  ,    CAST (  2  8  2    AS   DECIMAL (  1  0  ,  1  )  )  ]     |  |    CAST (  2  9  2    AS   DECIMAL (  5  ,  1  )  )  \"  )  ,    computeActual (  \" SELECT   ARRAY [ CAST (  2  8  2    AS   DECIMAL (  2  2  ,  1  )  )  ,    CAST (  2  8  2    AS   DECIMAL (  1  0  ,  1  )  )  ,    CAST (  2  9  2    AS   DECIMAL (  5  ,  1  )  )  ]  \"  )  )  ;", "assertQuery (  \" SELECT   CAST (  1  .  1    AS   DECIMAL (  3  8  ,  1  )  )     +    CAST (  2  9  2    AS   BIGINT )  \"  )  ;", "assertQuery (  \" SELECT   CAST (  2  9  2    AS   DECIMAL (  3  8  ,  1  )  )     =    CAST (  2  9  2    AS   BIGINT )  \"  )  ;", "QueryAssertions . assertEqualsIgnoreOrder ( computeActual (  \" SELECT   ARRAY [ CAST (  2  8  2    AS   DECIMAL (  2  2  ,  1  )  )  ,    CAST (  2  8  2    AS   DECIMAL (  1  0  ,  1  )  )  ]     |  |    CAST (  2  9  2    AS   BIGINT )  \"  )  ,    computeActual (  \" SELECT   ARRAY [ CAST (  2  8  2    AS   DECIMAL (  2  2  ,  1  )  )  ,    CAST (  2  8  2    AS   DECIMAL (  1  0  ,  1  )  )  ,    CAST (  2  9  2    AS   DECIMAL (  1  9  ,  0  )  )  ]  \"  )  )  ;", "assertQuery (  \" SELECT   CAST (  1  .  1    AS   DECIMAL (  3  8  ,  1  )  )     +    CAST (  1  .  1    AS   DOUBLE )  \"  )  ;", "assertQuery (  \" SELECT   CAST (  1  .  1    AS   DECIMAL (  3  8  ,  1  )  )     =    CAST (  1  .  1    AS   DOUBLE )  \"  )  ;", "assertQuery (  \" SELECT   SIN ( CAST (  1  .  1    AS   DECIMAL (  3  8  ,  1  )  )  )  \"  )  ;", "QueryAssertions . assertEqualsIgnoreOrder ( computeActual (  \" SELECT   ARRAY [ CAST (  2  8  2  .  1    AS   DOUBLE )  ,    CAST (  2  8  3  .  2    AS   DOUBLE )  ]     |  |    CAST (  1  0  1  .  3    AS   DECIMAL (  5  ,  1  )  )  \"  )  ,    computeActual (  \" SELECT   ARRAY [ CAST (  2  8  2  .  1    AS   DOUBLE )  ,    CAST (  2  8  3  .  2    AS   DOUBLE )  ,    CAST (  1  0  1  .  3    AS   DOUBLE )  ]  \"  )  )  ;", "assertQuery (  \" SELECT   CAST (  1  .  1    AS   DECIMAL (  3  8  ,  1  )  )     +    CAST (  2  9  2    AS   INTEGER )  \"  )  ;", "assertQuery (  \" SELECT   CAST (  2  9  2    AS   DECIMAL (  3  8  ,  1  )  )     =    CAST (  2  9  2    AS   INTEGER )  \"  )  ;", "QueryAssertions . assertEqualsIgnoreOrder ( computeActual (  \" SELECT   ARRAY [ CAST (  2  8  2    AS   DECIMAL (  2  2  ,  1  )  )  ,    CAST (  2  8  2    AS   DECIMAL (  1  0  ,  1  )  )  ]     |  |    CAST (  2  9  2    AS   INTEGER )  \"  )  ,    computeActual (  \" SELECT   ARRAY [ CAST (  2  8  2    AS   DECIMAL (  2  2  ,  1  )  )  ,    CAST (  2  8  2    AS   DECIMAL (  1  0  ,  1  )  )  ,    CAST (  2  9  2    AS   DECIMAL (  1  9  ,  0  )  )  ]  \"  )  )  ;", "assertQuery (  \" SELECT   CAST (  1  .  1    AS   DECIMAL (  3  8  ,  1  )  )     +    CAST ( CAST (  1  2  1    AS   DECIMAL (  3  0  ,  1  )  )    AS   TINYINT )  \"  )  ;", "assertQuery (  \" SELECT   CAST (  2  9  2    AS   DECIMAL (  3  8  ,  1  )  )     =    CAST ( CAST (  1  2  1    AS   DECIMAL (  3  0  ,  1  )  )    AS   TINYINT )  \"  )  ;", "assertQuery (  \" SELECT   CAST (  1  .  1    AS   DECIMAL (  3  8  ,  1  )  )     +    CAST ( CAST (  1  2  1    AS   DECIMAL (  3  0  ,  1  )  )    AS   SMALLINT )  \"  )  ;", "assertQuery (  \" SELECT   CAST (  2  9  2    AS   DECIMAL (  3  8  ,  1  )  )     =    CAST ( CAST (  1  2  1    AS   DECIMAL (  3  0  ,  1  )  )    AS   SMALLINT )  \"  )  ;", "assertQuery (  (  \" SELECT    *    FROM    (  \"     +     (  (  (  (  (  (  (  (  (  (  (  \"       SELECT   t 2  . x    |  |    t 2  . z   cc   FROM    (  \"     +     \"             SELECT    *  \"  )     +     \"             FROM    ( VALUES    ( CAST (  ' a '    AS   VARCHAR )  ,    CAST (  ' c '    AS   VARCHAR )  )  )    t ( x ,    z )  \"  )     +     \"        )    t 2  \"  )     +     \"       JOIN    (  \"  )     +     \"             SELECT    *  \"  )     +     \"             FROM    ( VALUES    ( CAST (  ' a '    AS   VARCHAR )  ,    CAST (  ' c '    AS   VARCHAR )  )  )    u ( x ,    z )  \"  )     +     \"             WHERE   z =  ' c '  \"  )     +     \"        )    u 2  \"  )     +     \"       ON   t 2  . z    =    u 2  . z \"  )     +     \"  )    tt    \"  )     +     \" WHERE   cc    =     ' ac '  \"  )  )  ,     \" SELECT    ' ac '  \"  )  ;", "assertQuery (  (  \" SELECT    *    FROM    (  \"     +     (  (  (  (  (  (  (  (  (  (  (  \"       SELECT   greatest    ( t . x ,    t . z )    cc   FROM    (  \"     +     \"             SELECT    *  \"  )     +     \"             FROM    ( VALUES    ( VARCHAR    ' a '  ,    VARCHAR    ' c '  )  )    t ( x ,    z )  \"  )     +     \"        )    t \"  )     +     \"       JOIN    (  \"  )     +     \"             SELECT    *  \"  )     +     \"             FROM    ( VALUES    ( VARCHAR    ' a '  ,    VARCHAR    ' c '  )  )    u ( x ,    z )  \"  )     +     \"             WHERE   z =  ' c '  \"  )     +     \"        )    u \"  )     +     \"       ON   t . z    =    u . z \"  )     +     \"  )  \"  )     +     \" WHERE   cc    =     ' c '  \"  )  )  ,     \" SELECT    ' c '  \"  )  ;", "assertQuery (  (  \" SELECT   cc [  1  ]  ,    cc [  2  ]    FROM    (  \"     +     (  (  (  (  (  (  (  (  (  (  (  \"    SELECT    *    FROM    (  \"     +     \"       SELECT   array [ t . x ,    t . z ]    cc   FROM    (  \"  )     +     \"             SELECT    *  \"  )     +     \"             FROM    ( VALUES    ( VARCHAR    ' a '  ,    VARCHAR    ' c '  )  )    t ( x ,    z )  \"  )     +     \"        )    t \"  )     +     \"       JOIN    (  \"  )     +     \"             SELECT    *  \"  )     +     \"             FROM    ( VALUES    ( VARCHAR    ' a '  ,    VARCHAR    ' c '  )  )    u ( x ,    z )  \"  )     +     \"             WHERE   z =  ' c '  \"  )     +     \"        )    u \"  )     +     \"       ON   t . z    =    u . z )  \"  )     +     \"    WHERE   cc    =    array [  ' a '  ,     ' c '  ]  )  \"  )  )  ,     \" SELECT    ' a '  ,     ' c '  \"  )  ;", "assertQuery (  (  \" SELECT   c    =     ' x '  \"     +     (  (  (  (  \" FROM    (  \"     +     \"             SELECT    ' x '    AS   c \"  )     +     \"             UNION   ALL \"  )     +     \"             SELECT    ' yy '    AS   c \"  )     +     \"  )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testCoercions"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   count (  *  )    FROM    (  ( SELECT    *    FROM   orders )    union   all    ( SELECT    *    FROM   orders )  )    JOIN   orders   USING    ( orderkey )  \"  ,     \" SELECT    2     *    count (  *  )    FROM   orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testColocatedJoinWithLocalUnion"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   x ,    T . y ,    z    +     1    FROM    ( SELECT   custkey ,    orderstatus ,    totalprice   FROM   orders )    T    ( x ,    y ,    z )  \"  ,     \" SELECT   custkey ,    orderstatus ,    totalprice    +     1    FROM   orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testColumnAliases"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  (  \" SELECT   sum ( orderkey )  ,    row _ number (  )    OVER    ( ORDER   BY   orderkey )     \"     +     (  (  (  (  (  \" FROM   orders    \"     +     \" WHERE   orderkey    <  =     1  0     \"  )     +     \" GROUP   BY   orderkey    \"  )     +     \" HAVING   sum ( orderkey )     >  =     3     \"  )     +     \" ORDER   BY   orderkey   DESC    \"  )     +     \" LIMIT    3  \"  )  )  ,     \" VALUES    (  7  ,     5  )  ,     (  6  ,     4  )  ,     (  5  ,     3  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testComplexQuery"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    '  1  2  '     |  |     '  3  4  '  \"  )  ;", "}", "METHOD_END"], "methodName": ["testConcatOperator"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   EXISTS ( SELECT    1    FROM    ( VALUES    1  ,     1  ,     1  ,     2  ,     2  ,     3  ,     4  )    i ( a )    WHERE   i . a    <    o . a   AND   i . a    <     4  )     \"     +     \" FROM    ( VALUES    0  ,     3  ,     3  ,     5  )    o ( a )  \"  )  ,     \" VALUES   false ,    true ,    true ,    true \"  )  ;", "assertQuery (  (  \" SELECT   count (  *  )    FROM   orders   o    \"     +     \" WHERE   EXISTS ( SELECT    1    FROM   orders   i   WHERE   o . orderkey    <    i . orderkey   AND   i . orderkey    %     1  0  0  0     =     0  )  \"  )  ,     \" VALUES    1  4  9  9  9  \"  )  ;", "assertQuery (  (  \" SELECT   orderkey   FROM   orders   o   ORDER   BY    \"     +     (  \" EXISTS ( SELECT    1    FROM   orders   i   WHERE   o . orderkey    <    i . orderkey   AND   i . orderkey    %     1  0  0  0  0     =     0  )  \"     +     \" LIMIT    1  \"  )  )  ,     \" VALUES    6  0  0  0  0  \"  )  ;", "assertQuery (  (  \" SELECT   max ( o . orderdate )  ,    o . orderkey ,     \"     +     (  \" EXISTS ( SELECT    1    FROM   orders   i   WHERE   o . orderkey    <    i . orderkey   AND   i . orderkey    %     1  0  0  0  0     =     0  )     \"     +     \" FROM   orders   o   GROUP   BY   o . orderkey   ORDER   BY   o . orderkey   LIMIT    1  \"  )  )  ,     \" VALUES    (  '  1  9  9  6  -  0  1  -  0  2  '  ,     1  ,    true )  \"  )  ;", "assertQuery (  (  \" SELECT   max ( o . orderdate )  ,    o . orderkey    \"     +     (  (  (  \" FROM   orders   o    \"     +     \" GROUP   BY   o . orderkey    \"  )     +     \" HAVING   EXISTS ( SELECT    1    FROM   orders   i   WHERE   o . orderkey    <    i . orderkey   AND   i . orderkey    %     1  0  0  0  0     =     0  )  \"  )     +     \" ORDER   BY   o . orderkey   LIMIT    1  \"  )  )  ,     \" VALUES    (  '  1  9  9  6  -  0  1  -  0  2  '  ,     1  )  \"  )  ;", "assertQuery (  (  \" SELECT   max ( o . orderdate )  ,    o . orderkey   FROM   orders   o    \"     +     (  \" GROUP   BY   o . orderkey ,    EXISTS ( SELECT    1    FROM   orders   i   WHERE   o . orderkey    <    i . orderkey   AND   i . orderkey    %     1  0  0  0  0     =     0  )  \"     +     \" ORDER   BY   o . orderkey   LIMIT    1  \"  )  )  ,     \" VALUES    (  '  1  9  9  6  -  0  1  -  0  2  '  ,     1  )  \"  )  ;", "assertQuery (  (  \" SELECT   count (  *  )     \"     +     (  (  \" FROM    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    1  0  )    o 1     \"     +     \" JOIN    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    5  )    o 2     \"  )     +     \" ON   NOT   EXISTS ( SELECT    1    FROM   orders   i   WHERE   o 1  . orderkey    <    o 2  . orderkey   AND   i . orderkey    %     1  0  0  0  0     =     0  )  \"  )  )  )  ;", "assertQueryFails (  (  \" SELECT   count (  *  )    FROM   orders   o 1    LEFT   JOIN   orders   o 2     \"     +     \" ON   NOT   EXISTS ( SELECT    1    FROM   orders   i   WHERE   o 1  . orderkey    <    o 2  . orderkey )  \"  )  ,     \" line    .  *  :    Correlated   subquery   in   given   context   is   not   supported \"  )  ;", "assertQuery (  (  \" SELECT   count (  *  )    FROM   orders   o    \"     +     \" WHERE    ( SELECT    *    FROM    ( SELECT   EXISTS ( SELECT    1    FROM   orders   i   WHERE   o . orderkey    <    i . orderkey   AND   i . orderkey    %     1  0  0  0  0     =     0  )  )  )  \"  )  ,     \" VALUES    1  4  9  9  9  \"  )  ;", "}", "METHOD_END"], "methodName": ["testCorrelatedExistsSubqueries"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   EXISTS ( SELECT    1    WHERE   o . orderkey    =     1  )    FROM   orders   o \"  )  ;", "assertQuery (  \" SELECT   EXISTS ( SELECT   null   WHERE   o . orderkey    =     1  )    FROM   orders   o \"  )  ;", "assertQuery (  \" SELECT   count (  *  )    FROM   orders   o   WHERE   EXISTS ( SELECT    1    WHERE   o . orderkey    =     0  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM   orders   o   ORDER   BY   EXISTS ( SELECT    1    WHERE   o . orderkey    =     0  )  \"  )  ;", "assertQuery (  (  \" SELECT   count (  *  )    FROM   orders   o    \"     +     \" WHERE   EXISTS    ( SELECT   avg ( l . orderkey )    FROM   lineitem   l   WHERE   o . orderkey    =    l . orderkey )  \"  )  )  ;", "assertQueryFails (  (  \" SELECT   count (  *  )    FROM   orders   o    \"     +     \" WHERE   EXISTS    ( SELECT   avg ( l . orderkey )    FROM   lineitem   l   WHERE   o . orderkey    =    l . orderkey   GROUP   BY   l . linenumber )  \"  )  ,     . UNSUPPORTED _ CORRELATED _ SUBQUERY _ ERROR _ MSG )  ;", "assertQueryFails (  (  \" SELECT   count (  *  )    FROM   orders   o    \"     +     \" WHERE   EXISTS    ( SELECT   count (  *  )    FROM   lineitem   l   WHERE   o . orderkey    =    l . orderkey   HAVING   count (  *  )     >     3  )  \"  )  ,     . UNSUPPORTED _ CORRELATED _ SUBQUERY _ ERROR _ MSG )  ;", "assertQuery (  \" SELECT   EXISTS ( SELECT    1    WHERE   a    =     1  )    FROM    ( VALUES    1  ,     1  ,     2  ,     3  )    t ( a )  \"  ,     \" VALUES   true ,    true ,    false ,    false \"  )  ;", "assertQuery (  (  \" SELECT   max ( o . totalprice )  ,    o . orderkey ,    EXISTS ( SELECT    1    WHERE   o . orderkey    =     0  )     \"     +     \" FROM   orders   o   GROUP   BY   o . orderkey \"  )  )  ;", "assertQuery (  (  \" SELECT   max ( o . totalprice )  ,    o . orderkey    \"     +     \" FROM   orders   o   GROUP   BY   o . orderkey   HAVING   EXISTS    ( SELECT    1    WHERE   o . orderkey    =     0  )  \"  )  )  ;", "assertQuery (  (  \" SELECT   max ( o . totalprice )  ,    o . orderkey    \"     +     \" FROM   orders   o   GROUP   BY   o . orderkey ,    EXISTS    ( SELECT    1    WHERE   o . orderkey    =     0  )  \"  )  )  ;", "assertQuery (  (  \" SELECT   count (  *  )     \"     +     (  (  \" FROM    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    1  0  )    o 1     \"     +     \" JOIN    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    5  )    o 2     \"  )     +     \" ON   NOT   EXISTS ( SELECT    1    WHERE   o 1  . orderkey    =    o 2  . orderkey )  \"  )  )  )  ;", "assertQueryFails (  (  \" SELECT   count (  *  )    FROM   orders   o 1    LEFT   JOIN   orders   o 2     \"     +     \" ON   NOT   EXISTS ( SELECT    1    WHERE   o 1  . orderkey    =    o 2  . orderkey )  \"  )  ,     \" line    .  *  :    Correlated   subquery   in   given   context   is   not   supported \"  )  ;", "assertQuery (  \" SELECT   count (  *  )    FROM   orders   o   WHERE    ( SELECT    *    FROM    ( SELECT   EXISTS ( SELECT    1    WHERE   o . orderkey    =     0  )  )  )  \"  ,     \" SELECT   count (  *  )    FROM   orders   o   WHERE   o . orderkey    =     0  \"  )  ;", "assertQuery (  \" SELECT   count (  *  )    FROM   customer   WHERE   NOT   EXISTS ( SELECT    *    FROM   orders   WHERE   orders . custkey = customer . custkey )  \"  ,     \" VALUES    5  0  0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testCorrelatedExistsSubqueriesWithEqualityPredicatesInWhere"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   EXISTS ( SELECT   o . orderkey )    FROM   orders   o \"  )  ;", "assertQuery (  \" SELECT   count (  *  )    FROM   orders   o   WHERE   EXISTS ( SELECT   o . orderkey )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM   orders   o   ORDER   BY   EXISTS ( SELECT   o . orderkey )  \"  )  ;", "assertQuery (  \" SELECT   max ( o . totalprice )  ,    o . orderkey ,    EXISTS ( SELECT   o . orderkey )    FROM   orders   o   GROUP   BY   o . orderkey \"  )  ;", "assertQuery (  (  \" SELECT   max ( o . totalprice )  ,    o . orderkey    \"     +     \" FROM   orders   o   GROUP   BY   o . orderkey   HAVING   EXISTS    ( SELECT   o . orderkey )  \"  )  )  ;", "assertQuery (  \" SELECT   max ( o . totalprice )  ,    o . orderkey   FROM   orders   o   GROUP   BY   o . orderkey ,    EXISTS    ( SELECT   o . orderkey )  \"  )  ;", "assertQuery (  (  \" SELECT    *    FROM   orders   o   JOIN    ( SELECT    *    FROM   lineitem   ORDER   BY   orderkey   LIMIT    2  )    l    \"     +     \" ON   NOT   EXISTS ( SELECT   o . orderkey    =    l . orderkey )  \"  )  )  ;", "assertQuery (  \" SELECT   count (  *  )    FROM   orders   o   WHERE    ( SELECT    *    FROM    ( SELECT   EXISTS ( SELECT   o . orderkey )  )  )  \"  ,     \" VALUES    1  5  0  0  0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testCorrelatedExistsSubqueriesWithPrunedCorrelationSymbols"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   orderkey ,    clerk   IN    ( SELECT   clerk   FROM   orders   s   WHERE   s . custkey    =    o . custkey   AND   s . orderkey    <    o . orderkey )    FROM   orders   o \"  )  ;", "assertQuery (  \" SELECT   orderkey   FROM   orders   o   WHERE   clerk   IN    ( SELECT   clerk   FROM   orders   s   WHERE   s . custkey    =    o . custkey   AND   s . orderkey    <    o . orderkey )  \"  )  ;", "assertQuery (  (  \" SELECT   t 1  . a ,    t 1  . b ,     \"     +     (  (  (  (  \"       t 1  . b   in    ( SELECT   t 2  . b    \"     +     \"             FROM    ( values    (  2  ,     3  )  ,     (  2  ,     4  )  ,     (  3  ,     0  )  ,     (  3  0  , NULL )  )    t 2  ( a ,    b )     \"  )     +     \"             WHERE   t 1  . a    -     5     <  =    t 2  . a   and   t 2  . a    <  =    t 1  . a   and    0     <  =    t 2  . a )     \"  )     +     \" from    ( values    (  1  ,  1  )  ,     (  2  ,  4  )  ,     (  3  ,  5  )  ,     (  4  , NULL )  ,     (  3  0  ,  2  )  ,     (  4  0  , NULL )     )    t 1  ( a ,    b )     \"  )     +     \" order   by   t 1  . a \"  )  )  ,     \" VALUES    (  1  ,  1  , FALSE )  ,     (  2  ,  4  , TRUE )  ,     (  3  ,  5  , FALSE )  ,     (  4  , NULL , NULL )  ,     (  3  0  ,  2  , NULL )  ,     (  4  0  , NULL , FALSE )  \"  )  ;", "assertQueryFails (  \" SELECT   orderkey   FROM   orders   o   WHERE   clerk   IN    ( SELECT   clerk   FROM   orders   s   WHERE   s . custkey    =    o . custkey   AND   s . orderkey    <    o . orderkey   ORDER   BY    1    LIMIT    1  )  \"  ,     . UNSUPPORTED _ CORRELATED _ SUBQUERY _ ERROR _ MSG )  ;", "assertQueryFails (  \" SELECT    1    IN    ( SELECT   l . orderkey )    FROM   lineitem   l \"  ,     . UNSUPPORTED _ CORRELATED _ SUBQUERY _ ERROR _ MSG )  ;", "assertQueryFails (  \" SELECT    1    IN    ( SELECT    2     *    l . orderkey )    FROM   lineitem   l \"  ,     . UNSUPPORTED _ CORRELATED _ SUBQUERY _ ERROR _ MSG )  ;", "assertQueryFails (  \" SELECT    *    FROM   lineitem   l   WHERE    1    IN    ( SELECT    2     *    l . orderkey )  \"  ,     . UNSUPPORTED _ CORRELATED _ SUBQUERY _ ERROR _ MSG )  ;", "assertQueryFails (  \" SELECT    *    FROM   lineitem   l   ORDER   BY    1    IN    ( SELECT    2     *    l . orderkey )  \"  ,     . UNSUPPORTED _ CORRELATED _ SUBQUERY _ ERROR _ MSG )  ;", "assertQueryFails (  \" SELECT   max ( l . quantity )  ,     2     *    l . orderkey ,     1    IN    ( SELECT   l . orderkey )    FROM   lineitem   l   GROUP   BY   l . orderkey \"  ,     . UNSUPPORTED _ CORRELATED _ SUBQUERY _ ERROR _ MSG )  ;", "assertQueryFails (  \" SELECT   max ( l . quantity )  ,     2     *    l . orderkey   FROM   lineitem   l   GROUP   BY   l . orderkey   HAVING   max ( l . quantity )    IN    ( SELECT   l . orderkey )  \"  ,     . UNSUPPORTED _ CORRELATED _ SUBQUERY _ ERROR _ MSG )  ;", "assertQueryFails (  \" SELECT   max ( l . quantity )  ,     2     *    l . orderkey   FROM   lineitem   l   GROUP   BY   l . orderkey ,     1    IN    ( SELECT   l . orderkey )  \"  ,     . UNSUPPORTED _ CORRELATED _ SUBQUERY _ ERROR _ MSG )  ;", "assertQueryFails (  \" SELECT    *    FROM   lineitem   l 1    JOIN   lineitem   l 2    ON   l 1  . orderkey   IN    ( SELECT   l 2  . orderkey )  \"  ,     . UNSUPPORTED _ CORRELATED _ SUBQUERY _ ERROR _ MSG )  ;", "assertQueryFails (  \" SELECT    *    FROM   lineitem   l   WHERE    ( SELECT    *    FROM    ( SELECT    1    IN    ( SELECT    2     *    l . orderkey )  )  )  \"  ,     . UNSUPPORTED _ CORRELATED _ SUBQUERY _ ERROR _ MSG )  ;", "assertQueryFails (  \" SELECT    *    FROM   lineitem   l   WHERE   true   IN    ( SELECT    1    IN    ( SELECT    2     *    l . orderkey )  )  \"  ,     . UNSUPPORTED _ CORRELATED _ SUBQUERY _ ERROR _ MSG )  ;", "}", "METHOD_END"], "methodName": ["testCorrelatedInPredicateSubqueries"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  \" SELECT    ( SELECT   l . orderkey )    FROM   lineitem   l \"  ,     \" line    1  .  9  :    Given   correlated   subquery   is   not   supported \"  )  ;", "assertQueryFails (  \" SELECT    ( SELECT    2     *    l . orderkey )    FROM   lineitem   l \"  ,     . UNSUPPORTED _ CORRELATED _ SUBQUERY _ ERROR _ MSG )  ;", "assertQueryFails (  \" SELECT    *    FROM   lineitem   l   WHERE    1     =     ( SELECT    2     *    l . orderkey )  \"  ,     . UNSUPPORTED _ CORRELATED _ SUBQUERY _ ERROR _ MSG )  ;", "assertQueryFails (  \" SELECT    *    FROM   lineitem   l   ORDER   BY    ( SELECT    2     *    l . orderkey )  \"  ,     . UNSUPPORTED _ CORRELATED _ SUBQUERY _ ERROR _ MSG )  ;", "assertQueryFails (  \" SELECT   max ( l . quantity )  ,     2     *    l . orderkey ,     ( SELECT   l . orderkey )    FROM   lineitem   l   GROUP   BY   l . orderkey \"  ,     . UNSUPPORTED _ CORRELATED _ SUBQUERY _ ERROR _ MSG )  ;", "assertQueryFails (  \" SELECT   max ( l . quantity )  ,     2     *    l . orderkey   FROM   lineitem   l   GROUP   BY   l . orderkey   HAVING   max ( l . quantity )     <     ( SELECT   l . orderkey )  \"  ,     . UNSUPPORTED _ CORRELATED _ SUBQUERY _ ERROR _ MSG )  ;", "assertQueryFails (  \" SELECT   max ( l . quantity )  ,     2     *    l . orderkey   FROM   lineitem   l   GROUP   BY   l . orderkey ,     ( SELECT   l . orderkey )  \"  ,     . UNSUPPORTED _ CORRELATED _ SUBQUERY _ ERROR _ MSG )  ;", "assertQueryFails (  \" SELECT    *    FROM   lineitem   l 1    JOIN   lineitem   l 2    ON   l 1  . orderkey =     ( SELECT   l 2  . orderkey )  \"  ,     . UNSUPPORTED _ CORRELATED _ SUBQUERY _ ERROR _ MSG )  ;", "assertQueryFails (  \" SELECT    ( SELECT   l 3  .  *    FROM   lineitem   l 2    CROSS   JOIN    ( SELECT   l 1  . orderkey )    l 3    LIMIT    1  )    FROM   lineitem   l 1  \"  ,     . UNSUPPORTED _ CORRELATED _ SUBQUERY _ ERROR _ MSG )  ;", "assertQueryFails (  \" SELECT    *    FROM   lineitem   l   WHERE    2     *    l . orderkey    =     ( SELECT    *    FROM    ( SELECT   l . orderkey )  )  \"  ,     . UNSUPPORTED _ CORRELATED _ SUBQUERY _ ERROR _ MSG )  ;", "assertQueryFails (  \" SELECT    *    FROM   lineitem   l   WHERE    1     =     ( SELECT    ( SELECT    2     *    l . orderkey )  )  \"  ,     \" line    1  .  3  7  :    Given   correlated   subquery   is   not   supported \"  )  ;", "assertQueryFails (  \" SELECT    ( SELECT   count (  *  )    FROM    ( VALUES    (  7  ,  1  )  )    t ( orderkey ,    value )    WHERE   orderkey    =    corr _ key   LIMIT    1  )    FROM    ( values    7  )    t ( corr _ key )  \"  ,     . UNSUPPORTED _ CORRELATED _ SUBQUERY _ ERROR _ MSG )  ;", "}", "METHOD_END"], "methodName": ["testCorrelatedScalarSubqueries"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT    ( SELECT   round (  3     *    avg ( i . a )  )    FROM    ( VALUES    1  ,     1  ,     1  ,     2  ,     2  ,     3  ,     4  )    i ( a )    WHERE   i . a    <    o . a   AND   i . a    <     4  )     \"     +     \" FROM    ( VALUES    0  ,     3  ,     3  ,     5  )    o ( a )  \"  )  ,     \" VALUES   null ,     4  ,     4  ,     5  \"  )  ;", "assertQuery (  (  \" SELECT   count (  *  )    FROM   orders   o    \"     +     (  \" WHERE    ( SELECT   avg ( i . orderkey )    FROM   orders   i    \"     +     \" WHERE   o . orderkey    <    i . orderkey   AND   i . orderkey    %     1  0  0  0  0     =     0  )     >     1  0  0  \"  )  )  ,     \" VALUES    1  4  9  9  9  \"  )  ;", "assertQuery (  (  \" SELECT   orderkey   FROM   orders   o    \"     +     (  (  (  \" ORDER   BY    \"     +     \"           ( SELECT   avg ( i . orderkey )    FROM   orders   i   WHERE   o . orderkey    <    i . orderkey   AND   i . orderkey    %     1  0  0  0  0     =     0  )  ,     \"  )     +     \"          orderkey    \"  )     +     \" LIMIT    1  \"  )  )  ,     \" VALUES    1  \"  )  ;", "assertQuery (  (  \" SELECT   max ( o . orderdate )  ,    o . orderkey ,     \"     +     (  \"  ( SELECT   avg ( i . orderkey )    FROM   orders   i   WHERE   o . orderkey    <    i . orderkey   AND   i . orderkey    %     1  0  0  0  0     =     0  )     \"     +     \" FROM   orders   o   GROUP   BY   o . orderkey   ORDER   BY   o . orderkey   LIMIT    1  \"  )  )  ,     \" VALUES    (  '  1  9  9  6  -  0  1  -  0  2  '  ,     1  ,     4  0  0  0  0  )  \"  )  ;", "assertQuery (  (  \" SELECT   max ( o . orderdate )  ,    o . orderkey    \"     +     (  (  (  \" FROM   orders   o    \"     +     \" GROUP   BY   o . orderkey    \"  )     +     \" HAVING    4  0  0  0  0     <     ( SELECT   avg ( i . orderkey )    FROM   orders   i   WHERE   o . orderkey    <    i . orderkey   AND   i . orderkey    %     1  0  0  0  0     =     0  )  \"  )     +     \" ORDER   BY   o . orderkey   LIMIT    1  \"  )  )  ,     \" VALUES    (  '  1  9  9  6  -  0  7  -  2  4  '  ,     2  0  0  0  0  )  \"  )  ;", "assertQuery (  (  \" SELECT   max ( o . orderdate )  ,    o . orderkey   FROM   orders   o    \"     +     (  \" GROUP   BY   o . orderkey ,     ( SELECT   avg ( i . orderkey )    FROM   orders   i   WHERE   o . orderkey    <    i . orderkey   AND   i . orderkey    %     1  0  0  0  0     =     0  )  \"     +     \" ORDER   BY   o . orderkey   LIMIT    1  \"  )  )  ,     \" VALUES    (  '  1  9  9  6  -  0  1  -  0  2  '  ,     1  )  \"  )  ;", "assertQuery (  (  \" SELECT   count (  *  )     \"     +     (  (  \" FROM    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    1  0  )    o 1     \"     +     \" JOIN    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    5  )    o 2     \"  )     +     \" ON   NOT    1     =     ( SELECT   avg ( i . orderkey )    FROM   orders   i   WHERE   o 1  . orderkey    <    o 2  . orderkey   AND   i . orderkey    %     1  0  0  0  0     =     0  )  \"  )  )  )  ;", "assertQueryFails (  (  \" SELECT   count (  *  )    FROM   orders   o 1    LEFT   JOIN   orders   o 2     \"     +     \" ON   NOT    1     =     ( SELECT   avg ( i . orderkey )    FROM   orders   i   WHERE   o 1  . orderkey    <    o 2  . orderkey )  \"  )  ,     \" line    .  *  :    Correlated   subquery   in   given   context   is   not   supported \"  )  ;", "assertQuery (  (  \" SELECT   count (  *  )    FROM   orders   o    \"     +     (  \" WHERE    1  0  0     <     ( SELECT    *     \"     +     \" FROM    ( SELECT    ( SELECT   avg ( i . orderkey )    FROM   orders   i   WHERE   o . orderkey    <    i . orderkey   AND   i . orderkey    %     1  0  0  0  0     =     0  )  )  )  \"  )  )  ,     \" VALUES    1  4  9  9  9  \"  )  ;", "assertQuery (  (  \" SELECT    \"     +     (  (  (  (  (  (  \"  ( SELECT   avg ( regionkey )     \"     +     \"    FROM   nation   n 2  \"  )     +     \"    WHERE   n 2  . nationkey    =    n 1  . nationkey )  ,  \"  )     +     \"  ( SELECT   avg ( regionkey )  \"  )     +     \"    FROM   nation   n 3  \"  )     +     \"    WHERE   n 3  . nationkey    =    n 1  . nationkey )  \"  )     +     \" FROM   nation   n 1  \"  )  )  )  ;", "assertQuery (  (  \" SELECT \"     +     (  (  (  (  (  (  \"  ( SELECT   avg ( regionkey )  \"     +     \"    FROM   nation   n 2     \"  )     +     \"    WHERE   n 2  . nationkey    =    n 1  . nationkey )  ,  \"  )     +     \"  ( SELECT   avg ( regionkey )  +  1     \"  )     +     \"    FROM   nation   n 3     \"  )     +     \"    WHERE   n 3  . nationkey    =    n 1  . nationkey )  \"  )     +     \" FROM   nation   n 1  \"  )  )  )  ;", "assertQuery (  (  \" SELECT    *     \"     +     (  \" FROM    ( VALUES    (  0  )  ,  (     1  )  ,     (  2  )  ,     (  7  )  )    AS   v 1  ( c 1  )     \"     +     \" WHERE   v 1  . c 1     >     ( SELECT   count ( c 1  )    FROM    ( VALUES    (  0  )  ,  (     1  )  ,     (  2  )  )    AS   v 2  ( c 1  )    WHERE   v 1  . c 1     =    v 2  . c 1  )  \"  )  )  ,     \" VALUES    (  2  )  ,     (  7  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testCorrelatedScalarSubqueriesWithScalarAggregation"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    ( SELECT   count (  *  )    WHERE   o . orderkey    =     1  )    FROM   orders   o \"  )  ;", "assertQuery (  \" SELECT   count (  *  )    FROM   orders   o   WHERE    1     =     ( SELECT   count (  *  )    WHERE   o . orderkey    =     0  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM   orders   o   ORDER   BY    ( SELECT   count (  *  )    WHERE   o . orderkey    =     0  )  \"  )  ;", "assertQuery (  (  \" SELECT   count (  *  )    FROM   nation   n   WHERE    \"     +     \"  ( SELECT   count (  *  )    FROM   region   r   WHERE   n . regionkey    =    r . regionkey )     >     1  \"  )  )  ;", "assertQueryFails (  (  \" SELECT   count (  *  )    FROM   nation   n   WHERE    \"     +     \"  ( SELECT   avg ( a )    FROM    ( SELECT   count (  *  )    FROM   region   r   WHERE   n . regionkey    =    r . regionkey )    t ( a )  )     >     1  \"  )  ,     . UNSUPPORTED _ CORRELATED _ SUBQUERY _ ERROR _ MSG )  ;", "assertQuery (  \" SELECT    ( SELECT   count (  *  )    WHERE   a    =     1  )    FROM    ( VALUES    1  ,     1  ,     2  ,     3  )    t ( a )  \"  ,     \" VALUES   true ,    true ,    false ,    false \"  )  ;", "assertQuery (  (  \" SELECT   max ( o . totalprice )  ,    o . orderkey ,     ( SELECT   count (  *  )    WHERE   o . orderkey    =     0  )     \"     +     \" FROM   orders   o   GROUP   BY   o . orderkey \"  )  )  ;", "assertQuery (  (  \" SELECT   max ( o . totalprice )  ,    o . orderkey    \"     +     \" FROM   orders   o   GROUP   BY   o . orderkey   HAVING    1     =     ( SELECT   count (  *  )    WHERE   o . orderkey    =     0  )  \"  )  )  ;", "assertQuery (  (  \" SELECT   max ( o . totalprice )  ,    o . orderkey   FROM   orders   o    \"     +     \" GROUP   BY   o . orderkey ,     ( SELECT   count (  *  )    WHERE   o . orderkey    =     0  )  \"  )  )  ;", "assertQuery (  (  \" SELECT   count (  *  )     \"     +     (  (  \" FROM    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    1  0  )    o 1     \"     +     \" JOIN    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    5  )    o 2     \"  )     +     \" ON   NOT    1     =     ( SELECT   count (  *  )    WHERE   o 1  . orderkey    =    o 2  . orderkey )  \"  )  )  )  ;", "assertQueryFails (  (  \" SELECT   count (  *  )    FROM   orders   o 1    LEFT   JOIN   orders   o 2     \"     +     \" ON   NOT    1     =     ( SELECT   count (  *  )    WHERE   o 1  . orderkey    =    o 2  . orderkey )  \"  )  ,     \" line    .  *  :    Correlated   subquery   in   given   context   is   not   supported \"  )  ;", "assertQuery (  (  \" SELECT   count (  *  )    FROM   orders   o    \"     +     \" WHERE    1     =     ( SELECT    *    FROM    ( SELECT    ( SELECT   count (  *  )    WHERE   o . orderkey    =     0  )  )  )  \"  )  ,     \" SELECT   count (  *  )    FROM   orders   o   WHERE   o . orderkey    =     0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testCorrelatedScalarSubqueriesWithScalarAggregationAndEqualityPredicatesInWhere"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   COUNT (  4  2  )    FROM   orders \"  ,     \" SELECT   COUNT (  *  )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   COUNT (  4  2     +     4  2  )    FROM   orders \"  ,     \" SELECT   COUNT (  *  )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   COUNT ( null )    FROM   orders \"  ,     \" SELECT    0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testCountAll"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT ( orderkey )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   COUNT ( orderstatus )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   COUNT ( orderdate )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   COUNT (  1  )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   COUNT ( NULLIF ( orderstatus ,     ' F '  )  )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   COUNT ( CAST ( NULL   AS   BIGINT )  )    FROM   orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testCountColumn"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "List < MaterializedRow >    rows    =    computeActual (  \" SELECT   count (  *  )    FROM   system . runtime . nodes \"  )  . getMaterializedRows (  )  ;", "assertEquals (  (  ( Long )     ( rows . get (  0  )  . getField (  0  )  )  )  . longValue (  )  ,    getNodeCount (  )  )  ;", "}", "METHOD_END"], "methodName": ["testCountOnInternalTables"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  \" SELECT   a . custkey ,    b . orderkey    \"     +     \" FROM    ( SELECT    *    FROM   orders   WHERE   orderkey    <     1  0  0  )    a    \"  )     +     \" CROSS   JOIN    ( SELECT    *    FROM   lineitem   WHERE   orderkey    <     0  )    b \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testCrossJoinEmptyBuildPage"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  \" SELECT   a . custkey ,    b . orderkey    \"     +     \" FROM    ( SELECT    *    FROM   orders   WHERE   orderkey    <     0  )    a    \"  )     +     \" CROSS   JOIN    ( SELECT    *    FROM   lineitem   WHERE   orderkey    <     1  0  0  )    b \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testCrossJoinEmptyProbePage"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  \" SELECT   t . c    \"     +     \" FROM    ( SELECT    1  )     \"  )     +     \" CROSS   JOIN    ( SELECT    0    AS   c   UNION   ALL   SELECT    1  )    t \"  )  )  )  ;", "assertQuery (  (  \"  \"     +     (  (  \" SELECT   a ,    b    \"     +     \" FROM    ( VALUES    (  1  ,     1  )  )     \"  )     +     \" CROSS   JOIN    ( SELECT    0    AS   a ,     0    AS   b   UNION   ALL   SELECT    1  ,     1  )    t \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testCrossJoinUnion"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  \" SELECT   col ,    COUNT (  *  )  \\ n \"     +     \" FROM    (  (  \\ n \"  )     +     \"             SELECT   ARRAY [  1  ,     2  ]    AS   a \\ n \"  )     +     \"             UNION   ALL \\ n \"  )     +     \"             SELECT   ARRAY [  1  ,     3  ]    AS   a )       unionresult \\ n \"  )     +     \"       CROSS   JOIN   UNNEST ( unionresult . a )    t ( col )  )  \\ n \"  )     +     \" GROUP   BY   col \"  )  )  ,     \" SELECT    *    FROM   VALUES    (  1  ,     2  )  ,     (  2  ,     1  )  ,     (  3  ,     1  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testCrossJoinUnnestWithUnion"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   a ,    b   FROM    ( VALUES    (  1  )  ,     (  2  )  )    t    ( a )    CROSS   JOIN    ( VALUES    (  1  )  ,     (  3  )  )    u    ( b )  \"  ,     \" SELECT    *    FROM    ( VALUES       (  1  ,     1  )  ,     (  1  ,     3  )  ,     (  2  ,     1  )  ,     (  2  ,     3  )  )  \"  )  ;", "assertQuery (  \" SELECT   a ,    b   FROM    ( VALUES    (  1  )  ,     (  2  )  ,     ( null )  )    t    ( a )  ,     ( VALUES    (  1  1  )  ,     ( null )  ,     (  1  3  )  )    u    ( b )  \"  ,     \" SELECT    *    FROM    ( VALUES    (  1  ,     1  1  )  ,     (  1  ,    null )  ,     (  1  ,     1  3  )  ,     (  2  ,     1  1  )  ,     (  2  ,    null )  ,     (  2  ,     1  3  )  ,     ( null ,     1  1  )  ,     ( null ,    null )  ,     ( null ,     1  3  )  )  \"  )  ;", "assertQuery (  \" SELECT   a ,    b   FROM    ( VALUES    (  ' AA '  )  ,     (  ' BB '  )  ,     ( null )  )    t    ( a )  ,     ( VALUES    (  '  1  1  1  '  )  ,     ( null )  ,     (  '  3  3  3  '  )  )    u    ( b )  \"  ,     \" SELECT    *    FROM    ( VALUES    (  ' AA '  ,     '  1  1  1  '  )  ,     (  ' AA '  ,    null )  ,     (  ' AA '  ,     '  3  3  3  '  )  ,     (  ' BB '  ,     '  1  1  1  '  )  ,     (  ' BB '  ,    null )  ,     (  ' BB '  ,     '  3  3  3  '  )  ,     ( null ,     '  1  1  1  '  )  ,     ( null ,    null )  ,     ( null ,     '  3  3  3  '  )  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testCrossJoinWithNulls"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  \" SELECT   a . custkey ,    b . orderkey    \"     +     \" FROM    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    5  )    a    \"  )     +     \" CROSS   JOIN    ( SELECT    *    FROM   lineitem   ORDER   BY   orderkey   LIMIT    5  )    b \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testCrossJoins"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  \" SELECT    *     \"     +     \" FROM    ( SELECT    ' AAA '    a 1  ,     1  1    b 1  ,     3  3  .  3    c 1  ,    true   AS   d 1  ,     2  1    e 1  )    x    \"  )     +     \" CROSS   JOIN    ( SELECT    4  4  4  4  .  4    a 2  ,    false   AS   b 2  ,     ' BBB '    c 2  ,     2  2    d 2  )    y \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testCrossJoinsDifferentDataTypes"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  \" SELECT   a ,    b ,    c ,    d    \"     +     \" FROM    ( VALUES    (  1  ,     ' a '  )  ,     (  2  ,     ' b '  )  ,     (  3  ,     ' c '  )  ,     (  4  ,     ' d '  )  )    t 1     ( a ,    b )     \"  )     +     \" CROSS   JOIN    ( VALUES    (  1  ,     1  .  1  )  ,     (  3  ,     3  .  3  )  ,     (  5  ,     5  .  5  )  )    t 2     ( c ,    d )     \"  )     +     \" WHERE   t 1  . a    >    t 2  . c \"  )  )  ,     \" SELECT    *    FROM    ( VALUES       (  2  ,     ' b '  ,     1  ,     1  .  1  )  ,     (  3  ,     ' c '  ,     1  ,     1  .  1  )  ,     (  4  ,     ' d '  ,     1  ,     1  .  1  )  ,     (  4  ,     ' d '  ,     3  ,     3  .  3  )  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testCrossJoinsWithWhereClause"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   custom _ add ( orderkey ,    custkey )    FROM   orders \"  ,     \" SELECT   orderkey    +    custkey   FROM   orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testCustomAdd"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "@ Language (  \" SQL \"  )", "String   sql    =     \"  \"     +     (  (  (  (  (  (  (  \" SELECT   orderstatus ,    clerk ,    sales \\ n \"     +     \"  ,    cum _ rank (  )    OVER    ( PARTITION   BY   orderstatus   ORDER   BY   sales   DESC )    rnk \\ n \"  )     +     \" FROM    (  \\ n \"  )     +     \"       SELECT   orderstatus ,    clerk ,    sum ( totalprice )    sales \\ n \"  )     +     \"       FROM   orders \\ n \"  )     +     \"       GROUP   BY   orderstatus ,    clerk \\ n \"  )     +     \"  )  \\ n \"  )     +     \" ORDER   BY   orderstatus ,    clerk \"  )  ;", "assertEquals ( computeActual ( sql )  ,    computeActual ( sql . replace (  \" cum _ rank \"  ,     \" rank \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testCustomRank"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "@ Language (  \" SQL \"  )", "String   sql    =     \" SELECT   orderstatus ,    custom _ sum ( orderkey )    FROM   orders   GROUP   BY   orderstatus \"  ;", "assery ( sql ,    sql . replace (  \" custom _ sum \"  ,     \" sum \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testCustomSum"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "Session   decimalLiteral    =    Session . builder ( getSession (  )  )  . setSystemProperty ( PARSE _ DECIMAL _ LITERALS _ AS _ DOUBLE ,     \" false \"  )  . build (  )  ;", "MaterializedResult   decimalColumnResult    =    puteActual ( decimalLiteral ,     \" SELECT    1  .  0  \"  )  ;", "assertEquals ( decimalColumnResult . getRowCount (  )  ,     1  )  ;", "assertEquals ( decimalColumnResult . getTypes (  )  . get (  0  )  ,    createDecimalType (  2  ,     1  )  )  ;", "assertEquals ( decimalColumnResult . getMaterializedRows (  )  . get (  0  )  . getField (  0  )  ,    new   BigDecimal (  \"  1  .  0  \"  )  )  ;", "Session   doubleLiteral    =    Session . builder ( getSession (  )  )  . setSystemProperty ( PARSE _ DECIMAL _ LITERALS _ AS _ DOUBLE ,     \" true \"  )  . build (  )  ;", "MaterializedResult   doubleColumnResult    =    puteActual ( doubleLiteral ,     \" SELECT    1  .  0  \"  )  ;", "assertEquals ( doubleColumnResult . getRowCount (  )  ,     1  )  ;", "assertEquals ( doubleColumnResult . getTypes (  )  . get (  0  )  ,    DOUBLE )  ;", "assertEquals ( doubleColumnResult . getMaterializedRows (  )  . get (  0  )  . getField (  0  )  ,     1  .  0  )  ;", "}", "METHOD_END"], "methodName": ["testDefaultDecimalLiteralSwitch"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "String   query    =     \" SELECT    *    FROM   orders \"  ;", "MaterializedResult   result    =    computeActual (  (  \" EXPLAIN    ( FORMAT   GRAPHVIZ )     \"     +    query )  )  ;", "assertEquals ( getOnlyElement ( result . getOnlyColumnAsSet (  )  )  ,    getGraphvizExplainPlan ( query ,    LOGICAL )  )  ;", "}", "METHOD_END"], "methodName": ["testDefaultExplainGraphvizFormat"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "String   query    =     \" SELECT    *    FROM   orders \"  ;", "MaterializedResult   result    =    computeActual (  (  \" EXPLAIN    \"     +    query )  )  ;", "assertEquals ( getOnlyElement ( result . getOnlyColumnAsSet (  )  )  ,    getExplainPlan ( query ,    LOGICAL )  )  ;", "}", "METHOD_END"], "methodName": ["testDefaultExplainTextFormat"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "String   sql    =     \" WITH    \"     +     (  (  (  (  (  (  \" t 1    AS    (  \"     +     \" SELECT   extendedprice   FROM   lineitem   ORDER   BY   orderkey ,    partkey   LIMIT    2  )  ,  \"  )     +     \" t 2    AS    (  \"  )     +     \" SELECT   extendedprice ,    sum ( extendedprice )    OVER (  )    AS   x   FROM   t 1  )  ,  \"  )     +     \" t 3    AS    (  \"  )     +     \" SELECT   max ( x )    OVER (  )    FROM   t 2  )     \"  )     +     \" SELECT    *    FROM   t 3  \"  )  ;", "assery ( sql ,     \" VALUES    5  9  6  4  5  .  3  6  ,     5  9  6  4  5  .  3  6  \"  )  ;", "}", "METHOD_END"], "methodName": ["testDependentWindows"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  \" SELECT   orders . custkey ,    orders . orderkey    \"     +     \" FROM   orders    \"  )     +     \" WHERE   orders . custkey    >    orders . orderkey   AND   orders . custkey    <     2  0  0  .  3  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testDereferenceInComparison"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  \" SELECT   COUNT ( DISTINCT   custkey )     \"     +     \" FROM    (     \"  )     +     \"       SELECT   x . custkey    \"  )     +     \"       FROM   orders   x    \"  )     +     \"       WHERE   custkey    <     1  0  0     \"  )     +     \"  )    t \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testDereferenceInFunctionCall"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  \" SELECT   x    \"     +     \" FROM    (  \"  )     +     \"          SELECT   a . x \"  )     +     \"          FROM    ( VALUES    1  ,     2  ,     3  )    a ( x )  \"  )     +     \"  )     \"  )     +     \" GROUP   BY   x \"  )  )  ,     \" SELECT    *    FROM   VALUES    1  ,     2  ,     3  \"  )  ;", "assertQuery (  (  \"  \"     +     (  (  (  (  (  \" SELECT   t 2  .  *  ,    max ( t 1  . b )    AS   max _ b    \"     +     \" FROM    ( VALUES    (  1  ,     ' a '  )  ,        (  2  ,     ' b '  )  ,     (  1  ,     ' c '  )  ,     (  3  ,     ' d '  )  )    t 1  ( a ,    b )     \"  )     +     \" INNER   JOIN    \"  )     +     \"  ( VALUES    1  ,     2  ,     3  ,     4  )    t 2  ( a )     \"  )     +     \" ON   t 1  . a    =    t 2  . a    \"  )     +     \" GROUP   BY   t 2  . a \"  )  )  ,     \" SELECT    *    FROM   VALUES    (  1  ,     ' c '  )  ,     (  2  ,     ' b '  )  ,     (  3  ,     ' d '  )  \"  )  ;", "assertQuery (  (  \"  \"     +     (  (  (  (  (  \" SELECT   t 2  .  *  ,    max ( t 1  . b 1  )    AS   max _ b 1     \"     +     \" FROM    ( VALUES    (  1  ,     ' a '  )  ,        (  2  ,     ' b '  )  ,     (  1  ,     ' c '  )  ,     (  3  ,     ' d '  )  )    t 1  ( a 1  ,    b 1  )     \"  )     +     \" INNER   JOIN    \"  )     +     \"  ( VALUES    (  1  ,     1  1  ,     1  1  1  )  ,     (  2  ,     2  2  ,     2  2  2  )  ,     (  3  ,     3  3  ,     3  3  3  )  ,     (  4  ,     4  4  ,     4  4  4  )  )    t 2  ( a 2  ,    b 2  ,    c 2  )     \"  )     +     \" ON   t 1  . a 1     =    t 2  . a 2     \"  )     +     \" GROUP   BY   t 2  . a 2  ,    t 2  . b 2  ,    t 2  . c 2  \"  )  )  ,     \" SELECT    *    FROM   VALUES    (  1  ,     1  1  ,     1  1  1  ,     ' c '  )  ,     (  2  ,     2  2  ,     2  2  2  ,     ' b '  )  ,     (  3  ,     3  3  ,     3  3  3  ,     ' d '  )  \"  )  ;", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  (  (  (  \" SELECT   custkey ,    orders 2     \"     +     \" FROM    (  \"  )     +     \"          SELECT   x . custkey ,    SUM ( x . orders )     +     1    orders 2     \"  )     +     \"          FROM    (     \"  )     +     \"                   SELECT   x . custkey ,    COUNT ( x . orderkey )    orders    \"  )     +     \"                   FROM   orders   x    \"  )     +     \"                   WHERE   x . custkey    <     1  0  0     \"  )     +     \"                   GROUP   BY   x . custkey    \"  )     +     \"           )    x    \"  )     +     \"          GROUP   BY   x . custkey \"  )     +     \"  )     \"  )     +     \" ORDER   BY   custkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testDereferenceInSubquery"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    Session . builder ( getSession (  )  )  . addPreparedStatement (  \" my _ query \"  ,     \" SELECT    ?    FROM   nation   WHERE   nationkey    =     ?    and   name    <     ?  \"  )  . build (  )  ;", "MaterializedResult   actual    =    computeActual ( session ,     \" DESCRIBE   INPUT   my _ query \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( session ,    BIGINT ,    VARCHAR )  . row (  0  ,     \" unknown \"  )  . row (  1  ,     \" bigint \"  )  . row (  2  ,     \" varchar \"  )  . build (  )  ;", "yAssertions . assertEqualsIgnoreOrder ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testDescribeInput"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    Session . builder ( getSession (  )  )  . addPreparedStatement (  \" my _ query \"  ,     \" SELECT    *    FROM   nation \"  )  . build (  )  ;", "MaterializedResult   actual    =    computeActual ( session ,     \" DESCRIBE   INPUT   my _ query \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( session ,    UNKNOWN ,    UNKNOWN )  . build (  )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testDescribeInputNoParameters"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  \" DESCRIBE   INPUT   my _ query \"  ,     \" Prepared   statement   not   found :    my _ query \"  )  ;", "}", "METHOD_END"], "methodName": ["testDescribeInputNoSuchQuery"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    Session . builder ( getSession (  )  )  . addPreparedStatement (  \" my _ query \"  ,     \" SELECT   count (  *  )     +     ?    FROM   nation \"  )  . build (  )  ;", "MaterializedResult   actual    =    computeActual ( session ,     \" DESCRIBE   INPUT   my _ query \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( session ,    BIGINT ,    VARCHAR )  . row (  0  ,     \" bigint \"  )  . build (  )  ;", "yAssertions . assertEqualsIgnoreOrder ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testDescribeInputWithAggregation"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    Session . builder ( getSession (  )  )  . addPreparedStatement (  \" my _ query \"  ,     \" SELECT    *    FROM   nation \"  )  . build (  )  ;", "MaterializedResult   actual    =    computeActual ( session ,     \" DESCRIBE   OUTPUT   my _ query \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( session ,    VARCHAR ,    VARCHAR ,    VARCHAR ,    VARCHAR ,    VARCHAR ,    BIGINT ,    BOOLEAN )  . row (  \" nationkey \"  ,    session . getCatalog (  )  . get (  )  ,    session . getSchema (  )  . get (  )  ,     \" nation \"  ,     \" bigint \"  ,     8  ,    false )  . row (  \" name \"  ,    session . getCatalog (  )  . get (  )  ,    session . getSchema (  )  . get (  )  ,     \" nation \"  ,     \" varchar (  2  5  )  \"  ,     0  ,    false )  . row (  \" regionkey \"  ,    session . getCatalog (  )  . get (  )  ,    session . getSchema (  )  . get (  )  ,     \" nation \"  ,     \" bigint \"  ,     8  ,    false )  . row (  \" comment \"  ,    session . getCatalog (  )  . get (  )  ,    session . getSchema (  )  . get (  )  ,     \" nation \"  ,     \" varchar (  1  5  2  )  \"  ,     0  ,    false )  . build (  )  ;", "yAssertions . assertEqualsIgnoreOrder ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testDescribeOutput"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    Session . builder ( getSession (  )  )  . addPreparedStatement (  \" my _ query \"  ,     \" SELECT    1  ,    name ,    regionkey   AS   my _ alias   FROM   nation \"  )  . build (  )  ;", "MaterializedResult   actual    =    computeActual ( session ,     \" DESCRIBE   OUTPUT   my _ query \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( session ,    VARCHAR ,    VARCHAR ,    VARCHAR ,    VARCHAR ,    VARCHAR ,    BIGINT ,    BOOLEAN )  . row (  \"  _ col 0  \"  ,     \"  \"  ,     \"  \"  ,     \"  \"  ,     \" integer \"  ,     4  ,    false )  . row (  \" name \"  ,    session . getCatalog (  )  . get (  )  ,    session . getSchema (  )  . get (  )  ,     \" nation \"  ,     \" varchar (  2  5  )  \"  ,     0  ,    false )  . row (  \" my _ alias \"  ,    session . getCatalog (  )  . get (  )  ,    session . getSchema (  )  . get (  )  ,     \" nation \"  ,     \" bigint \"  ,     8  ,    true )  . build (  )  ;", "yAssertions . assertEqualsIgnoreOrder ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testDescribeOutputNamedAndUnnamed"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  \" DESCRIBE   OUTPUT   my _ query \"  ,     \" Prepared   statement   not   found :    my _ query \"  )  ;", "}", "METHOD_END"], "methodName": ["testDescribeOutputNoSuchQuery"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertDescribeOutputRowCount (  \" CREATE   TABLE   foo   AS   SELECT    *    FROM   nation \"  )  ;", "assertDescribeOutputRowCount (  \" DELETE   FROM   orders \"  )  ;", "assertDescribeOutputEmpty (  \" CALL   foo (  )  \"  )  ;", "assertDescribeOutputEmpty (  \" SET   SESSION   optimize _ hash _ generation = false \"  )  ;", "assertDescribeOutputEmpty (  \" RESET   SESSION   optimize _ hash _ generation \"  )  ;", "assertDescribeOutputEmpty (  \" START   TRANSACTION \"  )  ;", "assertDescribeOutputEmpty (  \" COMMIT \"  )  ;", "assertDescribeOutputEmpty (  \" ROLLBACK \"  )  ;", "assertDescribeOutputEmpty (  \" GRANT   INSERT   ON   foo   TO   bar \"  )  ;", "assertDescribeOutputEmpty (  \" REVOKE   INSERT   ON   foo   FROM   bar \"  )  ;", "assertDescribeOutputEmpty (  \" CREATE   SCHEMA   foo \"  )  ;", "assertDescribeOutputEmpty (  \" ALTER   SCHEMA   foo   RENAME   TO   bar \"  )  ;", "assertDescribeOutputEmpty (  \" DROP   SCHEMA   foo \"  )  ;", "assertDescribeOutputEmpty (  \" CREATE   TABLE   foo    ( x   bigint )  \"  )  ;", "assertDescribeOutputEmpty (  \" ALTER   TABLE   foo   ADD   COLUMN   y   bigint \"  )  ;", "assertDescribeOutputEmpty (  \" ALTER   TABLE   foo   RENAME   TO   bar \"  )  ;", "assertDescribeOutputEmpty (  \" DROP   TABLE   foo \"  )  ;", "assertDescribeOutputEmpty (  \" CREATE   VIEW   foo   AS   SELECT    *    FROM   nation \"  )  ;", "assertDescribeOutputEmpty (  \" DROP   VIEW   foo \"  )  ;", "assertDescribeOutputEmpty (  \" PREPARE      FROM   SELECT    *    FROM   orders \"  )  ;", "assertDescribeOutputEmpty (  \" EXECUTE    \"  )  ;", "assertDescribeOutputEmpty (  \" DEALLOCATE   PREPARE    \"  )  ;", "}", "METHOD_END"], "methodName": ["testDescribeOutputNonSelect"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    Session . builder ( getSession (  )  )  . addPreparedStatement (  \" my _ query \"  ,     \" SELECT   count (  *  )    AS   this _ is _ aliased ,     1     +     2    FROM   nation \"  )  . build (  )  ;", "MaterializedResult   actual    =    computeActual ( session ,     \" DESCRIBE   OUTPUT   my _ query \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( session ,    VARCHAR ,    VARCHAR ,    VARCHAR ,    VARCHAR ,    VARCHAR ,    BIGINT ,    BOOLEAN )  . row (  \" this _ is _ aliased \"  ,     \"  \"  ,     \"  \"  ,     \"  \"  ,     \" bigint \"  ,     8  ,    true )  . row (  \"  _ col 1  \"  ,     \"  \"  ,     \"  \"  ,     \"  \"  ,     \" integer \"  ,     4  ,    false )  . build (  )  ;", "yAssertions . assertEqualsIgnoreOrder ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testDescribeOutputOnAliasedColumnsAndExpressions"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    Session . builder ( getSession (  )  )  . addPreparedStatement (  \" my _ query \"  ,     \" SHOW   TABLES \"  )  . build (  )  ;", "MaterializedResult   actual    =    computeActual ( session ,     \" DESCRIBE   OUTPUT   my _ query \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( session ,    VARCHAR ,    VARCHAR ,    VARCHAR ,    VARCHAR ,    VARCHAR ,    BIGINT ,    BOOLEAN )  . row (  \" Table \"  ,    session . getCatalog (  )  . get (  )  ,     \" information _ schema \"  ,     \" tables \"  ,     \" varchar \"  ,     0  ,    true )  . build (  )  ;", "yAssertions . assertEqualsIgnoreOrder ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testDescribeOutputShowTables"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   DISTINCT   custkey   FROM   orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testDistinct"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   COUNT ( DISTINCT   clerk )    AS   count    \"     +     (  (  \" FROM   orders    \"     +     \" GROUP   BY   orderdate    \"  )     +     \" HAVING   COUNT ( DISTINCT   clerk )     >     1  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testDistinctHaving"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   COUNT ( DISTINCT   CAST ( b . quantity   AS   BIGINT )  )  ,    a . orderstatus    \"     +     (  (  (  \" FROM   orders   a    \"     +     \" JOIN   lineitem   b    \"  )     +     \" ON   a . orderkey    =    b . orderkey    \"  )     +     \" GROUP   BY   a . orderstatus \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testDistinctJoin"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  \" SELECT   DISTINCT   orderstatus ,    custkey    \"     +     \" FROM    ( SELECT   orderstatus ,    custkey   FROM   orders   ORDER   BY   orderkey   LIMIT    1  0  )     \"  )     +     \" LIMIT    1  0  \"  )  )  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM    ( SELECT   DISTINCT   orderstatus ,    custkey   FROM   orders   LIMIT    1  0  )  \"  )  ;", "assertQuery (  \" SELECT   DISTINCT   custkey ,    orderstatus   FROM   orders   WHERE   custkey    =     1  2  6  8    LIMIT    2  \"  )  ;", "assertQuery (  (  \"  \"     +     (  (  \" SELECT   DISTINCT   x    \"     +     \" FROM    ( VALUES    1  )    t ( x )    JOIN    ( VALUES    1  0  ,     2  0  )    u ( a )    ON   t . x    <    u . a    \"  )     +     \" LIMIT    1  0  0  \"  )  )  ,     \" SELECT    1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testDistinctLimit"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   DISTINCT   custkey ,    orderstatus   FROM   orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testDistinctMultipleFields"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  (  \" SELECT   RANK (  )    OVER    ( PARTITION   BY   orderdate   ORDER   BY   COUNT ( DISTINCT   clerk )  )    rnk    \"     +     (  (  (  \" FROM   orders    \"     +     \" GROUP   BY   orderdate ,    custkey    \"  )     +     \" ORDER   BY   rnk    \"  )     +     \" LIMIT    1  \"  )  )  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    BIGINT )  . row (  1 L )  . build (  )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testDistinctWindow"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  \" SELECT   DISTINCT   custkey   FROM   orders   ORDER   BY   custkey   LIMIT    1  0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testDistinctWithOrderBy"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  \" SELECT   DISTINCT   custkey   FROM   orders   ORDER   BY   orderkey   LIMIT    1  0  \"  ,     \" line    1  :  1  :    For   SELECT   DISTINCT ,    ORDER   BY   expressions   must   appear   in   select   list \"  )  ;", "}", "METHOD_END"], "methodName": ["testDistinctWithOrderByNotInSelect"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "String   query    =     \" SELECT    *    FROM   orders \"  ;", "MaterializedResult   result    =    computeActual (  (  \" EXPLAIN    ( TYPE   DISTRIBUTED )     \"     +    query )  )  ;", "assertEquals ( getOnlyElement ( result . getOnlyColumnAsSet (  )  )  ,    getExplainPlan ( query ,    DISTRIBUTED )  )  ;", "}", "METHOD_END"], "methodName": ["testDistributedExplain"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "String   query    =     \" SELECT    *    FROM   orders \"  ;", "MaterializedResult   result    =    computeActual (  (  \" EXPLAIN    ( TYPE   DISTRIBUTED ,    FORMAT   GRAPHVIZ )     \"     +    query )  )  ;", "assertEquals ( getOnlyElement ( result . getOnlyColumnAsSet (  )  )  ,    getGraphvizExplainPlan ( query ,    DISTRIBUTED )  )  ;", "}", "METHOD_END"], "methodName": ["testDistributedExplainGraphvizFormat"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "String   query    =     \" SELECT    *    FROM   orders \"  ;", "MaterializedResult   result    =    computeActual (  (  \" EXPLAIN    ( TYPE   DISTRIBUTED ,    FORMAT   TEXT )     \"     +    query )  )  ;", "assertEquals ( getOnlyElement ( result . getOnlyColumnAsSet (  )  )  ,    getExplainPlan ( query ,    DISTRIBUTED )  )  ;", "}", "METHOD_END"], "methodName": ["testDistributedExplainTextFormat"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM    ( SELECT    *    FROM   lineitem   WHERE   orderkey    %     1  0  2  4     =     0  )    lineitem   LEFT   JOIN    ( SELECT    *    FROM   orders   WHERE   orderkey    %     1  0  2  4     =     0  )    orders   ON   lineitem . orderkey    =     1  0  2  4  \"  )  ;", "}", "METHOD_END"], "methodName": ["testDoubleFilteredLeftJoinWithLeftConstantEquality"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM    ( SELECT    *    FROM   lineitem   WHERE   orderkey    %     1  0  2  4     =     0  )    lineitem   LEFT   JOIN    ( SELECT    *    FROM   orders   WHERE   orderkey    %     1  0  2  4     =     0  )    orders   ON   orders . orderkey    =     1  0  2  4  \"  )  ;", "}", "METHOD_END"], "methodName": ["testDoubleFilteredLeftJoinWithRightConstantEquality"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM    ( SELECT    *    FROM   lineitem   WHERE   orderkey    %     1  0  2  4     =     0  )    lineitem   RIGHT   JOIN    ( SELECT    *    FROM   orders   WHERE   orderkey    %     1  0  2  4     =     0  )    orders   ON   lineitem . orderkey    =     1  0  2  4  \"  )  ;", "}", "METHOD_END"], "methodName": ["testDoubleFilteredRightJoinWithLeftConstantEquality"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM    ( SELECT    *    FROM   lineitem   WHERE   orderkey    %     1  0  2  4     =     0  )    lineitem   RIGHT   JOIN    ( SELECT    *    FROM   orders   WHERE   orderkey    %     1  0  2  4     =     0  )    orders   ON   orders . orderkey    =     1  0  2  4  \"  )  ;", "}", "METHOD_END"], "methodName": ["testDoubleFilteredRightJoinWithRightConstantEquality"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  \" SELECT    *    FROM    ( VALUES   INTEGER    '  3  '  ,    INTEGER    '  2  '  ,    INTEGER    '  1  '  )    t ( a )    ORDER   BY   a   ASC ,    a   DESC \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    INTEGER )  . row (  1  )  . row (  2  )  . row (  3  )  . build (  )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testDuplicateColumnsInOrderByClause"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  \" SELECT   a ,    row _ number (  )    OVER    ( ORDER   BY   a   ASC ,    a   DESC )    FROM    ( VALUES    3  ,     2  ,     1  )    t ( a )  \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    BIGINT ,    BIGINT )  . row (  1  ,     1 L )  . row (  2  ,     2 L )  . row (  3  ,     3 L )  . build (  )  ;", "yAssertions . assertEqualsIgnoreOrder ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testDuplicateColumnsInWindowOrderByClause"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    *    FROM    ( SELECT   orderkey ,    orderkey   FROM   orders )  \"  ,     \" SELECT   orderkey ,    orderkey   FROM   orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testDuplicateFields"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  \" SELECT   cardinality ( empty _ approx _ set (  )  )  \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    BIGINT )  . row (  0 L )  . build (  )  ;", "assertEquals ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testEmptyApproxSet"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   val   FROM    ( SELECT   DISTINCT   vals   FROM    ( values    ( array [  2  ]  )  )    t ( vals )    WHERE   false )    tmp   CROSS   JOIN   unnest ( tmp . vals )    tt ( val )  \"  ,     \" SELECT    1    WHERE    1  =  2  \"  )  ;", "}", "METHOD_END"], "methodName": ["testEmptyInputForUnnest"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   regionkey   FROM   nation   WHERE   nationkey    <     7     \"     +     \" EXCEPT   SELECT   regionkey   FROM   nation   WHERE   nationkey    >     2  1  \"  )  )  ;", "assertQuery (  (  \" SELECT   regionkey   FROM   nation   WHERE   nationkey    <     7     \"     +     \" EXCEPT   DISTINCT   SELECT   regionkey   FROM   nation   WHERE   nationkey    >     2  1  \"  )  ,     \" VALUES    0  ,     4  \"  )  ;", "assertQuery (  (  \" WITH   wnation   AS    ( SELECT   nationkey ,    regionkey   FROM   nation )     \"     +     (  \" SELECT   regionkey   FROM   wnation   WHERE   nationkey    <     7     \"     +     \" EXCEPT   SELECT   regionkey   FROM   wnation   WHERE   nationkey    >     2  1  \"  )  )  ,     \" VALUES    0  ,     4  \"  )  ;", "assertQuery (  (  \" SELECT   num   FROM    ( SELECT    1    AS   num   FROM   nation   WHERE   nationkey =  1  0     \"     +     \" EXCEPT   SELECT    2    FROM   nation   WHERE   nationkey =  2  0  )    T \"  )  )  ;", "assertQuery (  (  \" SELECT   nationkey ,    nationkey    /     2    FROM    ( SELECT   nationkey   FROM   nation   WHERE   nationkey    <     1  0     \"     +     \" EXCEPT   SELECT   nationkey   FROM   nation   WHERE   nationkey    >     4  )    T   WHERE   nationkey    %     2     =     0  \"  )  )  ;", "assertQuery (  (  \" SELECT   regionkey   FROM    ( SELECT   regionkey   FROM   nation   WHERE   nationkey    <     7     \"     +     (  \" EXCEPT   SELECT   regionkey   FROM   nation   WHERE   nationkey    >     2  1  )     \"     +     \" UNION   SELECT    3  \"  )  )  )  ;", "assertQuery (  (  \" SELECT   regionkey   FROM    ( SELECT   regionkey   FROM   nation   WHERE   nationkey    <     7     \"     +     (  \" UNION   SELECT   regionkey   FROM   nation   WHERE   nationkey    >     2  1  )     \"     +     \" EXCEPT   SELECT    1  \"  )  )  )  ;", "assertQuery (  (  \" SELECT   regionkey   FROM    ( SELECT   regionkey   FROM   nation   WHERE   nationkey    <     7     \"     +     (  \" EXCEPT   SELECT   regionkey   FROM   nation   WHERE   nationkey    >     2  1  )     \"     +     \" UNION   ALL   SELECT    4  \"  )  )  )  ;", "assertQuery (  (  \" SELECT    *    FROM    ( VALUES    1  ,     2  )     \"     +     \" EXCEPT   SELECT    *    FROM    ( VALUES    3  .  0  ,     2  )  \"  )  )  ;", "assertQuery (  \" SELECT   NULL ,    NULL   EXCEPT   SELECT   NULL ,    NULL   FROM   nation \"  )  ;", "assertQuery (  (  \"  ( SELECT    *    FROM    ( VALUES    1  )    EXCEPT   SELECT    *    FROM    ( VALUES    0  )  )  \"     +     \" EXCEPT    ( SELECT    *    FROM    ( VALUES    1  )    EXCEPT   SELECT    *    FROM    ( VALUES    1  )  )  \"  )  )  ;", "MaterializedResult   emptyResult    =    computeActual (  \" SELECT    0    EXCEPT    ( SELECT   regionkey   FROM   nation   WHERE   nationkey    <  1  0  )  \"  )  ;", "assertEquals ( emptyResult . getMaterializedRows (  )  . size (  )  ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testExcept"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  \" SELECT    *    FROM    ( VALUES    1  ,     2  ,     3  ,     4  )    EXCEPT   ALL   SELECT    *    FROM    ( VALUES    3  ,     4  )  \"  ,     \" line    1  :  3  5  :    EXCEPT   ALL   not   yet   implemented \"  )  ;", "}", "METHOD_END"], "methodName": ["testExceptAllFails"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   nation   EXCEPT   SELECT   COUNT ( regionkey )    FROM   nation   WHERE   regionkey    <     3    HAVING   SUM ( regionkey )    IS   NOT   NULL \"  )  ;", "assertQuery (  \" SELECT   SUM ( nationkey )  ,    COUNT ( name )    FROM    ( SELECT   nationkey ,    name   FROM   nation   WHERE   nationkey    <     6    EXCEPT   SELECT   regionkey ,    name   FROM   nation )    n \"  )  ;", "assertQuery (  \"  ( SELECT   SUM ( nationkey )    FROM   nation   GROUP   BY   regionkey   ORDER   BY    1    LIMIT    2  )    EXCEPT   SELECT   COUNT (  *  )     *     2    FROM   nation \"  )  ;", "assertQuery (  \" SELECT   COUNT ( a )    FROM    ( SELECT   nationkey   AS   a   FROM    ( SELECT   nationkey   FROM   nation   EXCEPT   SELECT   regionkey   FROM   nation )    n 1    EXCEPT   SELECT   regionkey   FROM   nation )    n 2  \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )  ,    SUM (  2  )  ,    regionkey   FROM    ( SELECT   nationkey ,    regionkey   FROM   nation   EXCEPT   SELECT   regionkey ,    regionkey   FROM   nation )    n   GROUP   BY   regionkey   HAVING   regionkey    <     3  \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM    ( SELECT   nationkey   FROM   nation   EXCEPT   SELECT    1  0  )    n 1    EXCEPT   SELECT   regionkey   FROM   nation \"  )  ;", "}", "METHOD_END"], "methodName": ["testExceptWithAggregation"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT    *    FROM    \\ n \"     +     (  (  (  \"        ( SELECT   orderkey    +     1    orderkey   FROM    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    1  0  0  )  )    o    \\ n \"     +     \" JOIN    \\ n \"  )     +     \"        ( SELECT   orderkey    +     1    orderkey   FROM    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    1  0  0  )  )    o 1     \\ n \"  )     +     \" ON    ( o . orderkey    =    o 1  . orderkey )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testExchangeWithProjectionPushDown"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    Session . builder ( getSession (  )  )  . addPreparedStatement (  \" my _ query \"  ,     \" SELECT    1  2  3  ,     ' abc '  \"  )  . build (  )  ;", "assery ( session ,     \" EXECUTE   my _ query \"  ,     \" SELECT    1  2  3  ,     ' abc '  \"  )  ;", "}", "METHOD_END"], "methodName": ["testExecute"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  \" EXECUTE   my _ query \"  ,     \" Prepared   statement   not   found :    my _ query \"  )  ;", "}", "METHOD_END"], "methodName": ["testExecuteNoSuchQuery"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "String   query    =     \" SELECT   a    +     1  ,    count (  ?  )    FROM    ( VALUES    1  ,     2  ,     3  ,     2  )    t 1  ( a )    JOIN    ( VALUES    1  ,     2  ,     3  ,     4  )    t 2  ( b )    ON   b    <     ?    WHERE   a    <     ?    GROUP   BY   a    +     1    HAVING   count (  1  )     >     ?  \"  ;", "Session   session    =    Session . builder ( getSession (  )  )  . addPreparedStatement (  \" my _ query \"  ,    query )  . build (  )  ;", "assery ( session ,     \" EXECUTE   my _ query   USING    1  ,     5  ,     4  ,     0  \"  ,     \" VALUES    (  2  ,     4  )  ,     (  3  ,     8  )  ,     (  4  ,     4  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testExecuteUsing"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "String   query    =     \" SELECT    *    FROM    ( VALUES    1  )    t ( a )    JOIN    ( VALUES    2  )    u ( a )    ON   t . a    +    u . a    <     ?  \"  ;", "Session   session    =    Session . builder ( getSession (  )  )  . addPreparedStatement (  \" my _ query \"  ,    query )  . build (  )  ;", "assery ( session ,     \" EXECUTE   my _ query   USING    5  \"  ,     \" VALUES    (  1  ,     2  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testExecuteUsingComplexJoinCriteria"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "String   query    =     \" SELECT    ?    in    ( SELECT   orderkey   FROM   orders )  \"  ;", "Session   session    =    Session . builder ( getSession (  )  )  . addPreparedStatement (  \" my _ query \"  ,    query )  . build (  )  ;", "assery ( session ,     \" EXECUTE   my _ query   USING    1  0  \"  ,     \" SELECT    1  0    in    ( SELECT   orderkey   FROM   orders )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testExecuteUsingWithSubquery"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "String   query    =     \" SELECT    *     \"     +     (  (  (  (  (  \" FROM    \"     +     \"              ( VALUES    ?  ,  2  ,  3  )    t ( x )     \"  )     +     \"       JOIN    \"  )     +     \"              ( VALUES    1  ,  2  ,  3  )    t 2  ( y )     \"  )     +     \"       ON    \"  )     +     \"  ( x   in    ( VALUES    1  ,  2  ,  ?  )  )     =     ( y   in    ( VALUES    1  ,  2  ,  3  )  )    AND    ( x   in    ( VALUES    1  ,  ?  )  )     =     ( y   in    ( VALUES    1  ,  2  )  )  \"  )  ;", "Session   session    =    Session . builder ( getSession (  )  )  . addPreparedStatement (  \" my _ query \"  ,    query )  . build (  )  ;", "assery ( session ,     \" EXECUTE   my _ query   USING    1  ,     3  ,     2  \"  ,     \" VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  ,     (  2  ,  2  )  ,     (  2  ,  1  )  ,     (  3  ,  3  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testExecuteUsingWithSubqueryInJoin"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "try    {", "String   query    =     \" SELECT   a    +     ?  ,    count (  1  )    FROM    ( VALUES    1  ,     2  ,     3  ,     2  )    t ( a )    GROUP   BY   a    +     ?  \"  ;", "Session   session    =    Session . builder ( getSession (  )  )  . addPreparedStatement (  \" my _ query \"  ,    query )  . build (  )  ;", "computeActual ( session ,     \" EXECUTE   my _ query   USING    1  ,     1  \"  )  ;", "fail (  \" parameters   in   GROUP   BY   and   SELECT   should   fail \"  )  ;", "}    catch    ( SemanticException   e )     {", "assertEquals ( e . getCode (  )  ,    MUST _ BE _ AGGREGATE _ OR _ GROUP _ BY )  ;", "}    catch    ( RuntimeException   e )     {", "assertEquals ( e . getMessage (  )  ,     \" line    1  :  1  0  :     '  ( a    +     ?  )  '    must   be   an   aggregate   exsion   or   appear   in   GROUP   BY   clause \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["testExecuteWithParametersInGroupBy"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   EXISTS ( SELECT   NOT   EXISTS ( SELECT   EXISTS ( SELECT    1  )  )  )  \"  )  ;", "assertQuery (  (  \" SELECT   COUNT (  *  )    FROM   lineitem   WHERE    \"     +     \" EXISTS ( SELECT   max ( orderkey )    FROM   orders )  \"  )  )  ;", "assertQuery (  (  \" SELECT   COUNT (  *  )    FROM   lineitem   WHERE    \"     +     \" NOT   EXISTS ( SELECT   max ( orderkey )    FROM   orders )  \"  )  )  ;", "assertQuery (  (  \" SELECT   COUNT (  *  )    FROM   lineitem   WHERE    \"     +     \" NOT   EXISTS ( SELECT   orderkey   FROM   orders   WHERE   false )  \"  )  )  ;", "assertQuery (  (  \" SELECT   COUNT (  *  )    FROM   lineitem   WHERE    \"     +     \" EXISTS ( SELECT   orderkey   FROM   orders   WHERE   false )  \"  )  )  ;", "assertQuery (  (  \" SELECT   COUNT (  *  )    FROM   lineitem   WHERE    \"     +     \" NOT   EXISTS ( SELECT   orderkey   FROM   orders   WHERE   false )  \"  )  )  ;", "assertQuery (  \" SELECT    ( EXISTS ( SELECT    1  )  )    IN    ( false )  \"  ,     \" SELECT   false \"  )  ;", "assertQuery (  \" SELECT    ( NOT   EXISTS ( SELECT    1  )  )    IN    ( false )  \"  ,     \" SELECT   true \"  )  ;", "assertQuery (  \" SELECT    ( EXISTS ( SELECT    1  )  )    IN    ( true ,    false )  \"  ,     \" SELECT   true \"  )  ;", "assertQuery (  \" SELECT    ( NOT   EXISTS ( SELECT    1  )  )    IN    ( true ,    false )  \"  ,     \" SELECT   true \"  )  ;", "assertQuery (  \" SELECT    ( EXISTS ( SELECT    1    WHERE   false )  )    IN    ( true ,    false )  \"  ,     \" SELECT   true \"  )  ;", "assertQuery (  \" SELECT    ( NOT   EXISTS ( SELECT    1    WHERE   false )  )    IN    ( true ,    false )  \"  ,     \" SELECT   true \"  )  ;", "assertQuery (  \" SELECT    ( EXISTS ( SELECT    1    WHERE   false )  )    IN    ( false )  \"  ,     \" SELECT   true \"  )  ;", "assertQuery (  \" SELECT    ( NOT   EXISTS ( SELECT    1    WHERE   false )  )    IN    ( false )  \"  ,     \" SELECT   false \"  )  ;", "assertQuery (  \" SELECT    ( EXISTS ( SELECT    1  )  )     =     ( EXISTS ( SELECT    1  )  )    WHERE   NOT   EXISTS ( SELECT    1  )  \"  ,     \" SELECT   true   WHERE   false \"  )  ;", "assertQuery (  \" SELECT    ( EXISTS ( SELECT    1  )  )     =     ( EXISTS ( SELECT    3  )  )    WHERE   NOT   EXISTS ( SELECT    1    WHERE   false )  \"  ,     \" SELECT   true \"  )  ;", "assertQuery (  (  \" SELECT   COUNT (  *  )    FROM   lineitem   WHERE    \"     +     (  (  \"  ( EXISTS ( SELECT   min ( orderkey )    FROM   orders )  )  \"     +     \"  =  \"  )     +     \"  ( NOT   EXISTS ( SELECT   orderkey   FROM   orders   WHERE   false )  )  \"  )  )  ,     \" SELECT   count (  *  )    FROM   lineitem \"  )  ;", "assertQuery (  \" SELECT   EXISTS ( SELECT    1  )  ,    EXISTS ( SELECT    1  )  ,    EXISTS ( SELECT    3  )  ,    NOT   EXISTS ( SELECT    1  )  ,    NOT   EXISTS ( SELECT    1    WHERE   false )  \"  )  ;", "assertQuery (  (  \" SELECT   DISTINCT   orderkey   FROM   lineitem    \"     +     \" WHERE   EXISTS ( SELECT   avg ( orderkey )    FROM   orders )  \"  )  )  ;", "QueryTemplate . Parameter   joinType    =    QueryTemplate . parameter (  \" join _ type \"  )  ;", "QueryTemplate . Parameter   condition    =    QueryTemplate . parameter (  \" condition \"  )  ;", "QueryTemplate   queryTemplate    =    QueryTemplate . queryTemplate (  (  \" SELECT   o 1  . orderkey ,    COUNT (  *  )     \"     +     (  \" FROM   orders   o 1     % join _ type %    JOIN    ( SELECT    *    FROM   orders   LIMIT    1  0  )    o 2    ON    % condition %     \"     +     \" GROUP   BY   o 1  . orderkey   ORDER   BY   o 1  . orderkey   LIMIT    5  \"  )  )  ,    joinType ,    condition )  ;", "List < QueryTemplate . Parameter >    conditions    =    condition . of (  \" EXISTS ( SELECT   avg ( orderkey )    FROM   orders )  \"  ,     \"  ( SELECT   avg ( orderkey )    FROM   orders )     >     3  \"  )  ;", "for    ( QueryTemplate . Parameter   actualCondition    :    conditions )     {", "for    ( QueryTemplate . Parameter   actualJoinType    :    joinType . of (  \"  \"  ,     \" LEFT \"  ,     \" RIGHT \"  )  )     {", "assertQuery ( queryTemplate . replace ( actualJoinType ,    actualCondition )  )  ;", "}", "assertQuery ( queryTemplate . replace ( joinType . of (  \" FULL \"  )  ,    actualCondition )  ,     \" VALUES    (  1  ,     1  0  )  ,     (  2  ,     1  0  )  ,     (  3  ,     1  0  )  ,     (  4  ,     1  0  )  ,     (  5  ,     1  0  )  \"  )  ;", "}", "assertQuery (  \" SELECT   orderkey ,    totalprice   FROM   orders   ORDER   BY   EXISTS ( SELECT    2  )  \"  )  ;", "assertQuery (  \" SELECT   orderkey ,    totalprice   FROM   orders   ORDER   BY   NOT ( EXISTS ( SELECT    2  )  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testExistsSubquery"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   linenumber ,    min ( orderkey )  ,    EXISTS ( SELECT   orderkey   FROM   orders   WHERE   orderkey    <     7  )  \"     +     (  \" FROM   lineitem    \"     +     \" GROUP   BY   linenumber \"  )  )  )  ;", "assertQuery (  (  \" SELECT   linenumber ,    min ( orderkey )  ,    EXISTS ( SELECT   orderkey   FROM   orders   WHERE   orderkey    <     7  )  \"     +     (  \" FROM   lineitem    \"     +     \" GROUP   BY   linenumber ,    EXISTS ( SELECT   orderkey   FROM   orders   WHERE   orderkey    <     7  )  \"  )  )  )  ;", "assertQuery (  (  \" SELECT   linenumber ,    min ( orderkey )     \"     +     (  \" FROM   lineitem    \"     +     \" GROUP   BY   linenumber ,    EXISTS ( SELECT   orderkey   FROM   orders   WHERE   orderkey    <     7  )  \"  )  )  )  ;", "assertQuery (  (  \" SELECT   linenumber ,    min ( orderkey )     \"     +     (  (  \" FROM   lineitem    \"     +     \" GROUP   BY   linenumber    \"  )     +     \" HAVING   EXISTS ( SELECT   orderkey   FROM   orders   WHERE   orderkey    <     7  )  \"  )  )  )  ;", "assertQuery (  (  \" SELECT   linenumber ,    min ( orderkey )  ,    EXISTS ( SELECT   orderkey   FROM   orders   WHERE   orderkey    <     7  )  \"     +     (  (  \" FROM   lineitem    \"     +     \" GROUP   BY   linenumber ,    EXISTS ( SELECT   orderkey   FROM   orders   WHERE   orderkey    <     7  )  \"  )     +     \" HAVING   EXISTS ( SELECT   orderkey   FROM   orders   WHERE   orderkey    <     7  )  \"  )  )  )  ;", "assertQuery (  (  \" SELECT   linenumber ,    min ( orderkey )  ,    EXISTS ( SELECT   orderkey   FROM   orders   WHERE   orderkey    <     7  )  \"     +     (  \" FROM   lineitem    \"     +     \" GROUP   BY   linenumber ,    EXISTS ( SELECT   orderkey   FROM   orders   WHERE   orderkey    <     1  7  )  \"  )  )  )  ;", "assertQuery (  (  \" SELECT   linenumber ,    max ( orderkey )  ,    EXISTS ( SELECT   orderkey   FROM   orders   WHERE   orderkey    <     5  )  \"     +     (  (  \" FROM   lineitem    \"     +     \" GROUP   BY   linenumber    \"  )     +     \" HAVING   EXISTS ( SELECT   orderkey   FROM   orders   WHERE   orderkey    <     7  )  \"  )  )  )  ;", "assertQuery (  (  \" SELECT   linenumber ,    min ( orderkey )  ,    EXISTS ( SELECT   orderkey   FROM   orders   WHERE   orderkey    <     1  7  )  \"     +     (  (  \" FROM   lineitem    \"     +     \" GROUP   BY   linenumber ,    EXISTS ( SELECT   orderkey   FROM   orders   WHERE   orderkey    <     1  7  )  \"  )     +     \" HAVING   EXISTS ( SELECT   orderkey   FROM   orders   WHERE   orderkey    <     2  7  )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testExistsSubqueryWithGroupBy"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertExplainDdl (  \" CREATE   TABLE   foo    ( pk   bigint )  \"  ,     \" CREATE   TABLE   foo \"  )  ;", "assertExplainDdl (  \" CREATE   VIEW   foo   AS   SELECT    *    FROM   orders \"  ,     \" CREATE   VIEW   foo \"  )  ;", "assertExplainDdl (  \" DROP   TABLE   orders \"  )  ;", "assertExplainDdl (  \" DROP   VIEW   view \"  )  ;", "assertExplainDdl (  \" ALTER   TABLE   orders   RENAME   TO   new _ name \"  )  ;", "assertExplainDdl (  \" ALTER   TABLE   orders   RENAME   COLUMN   orderkey   TO   new _ column _ name \"  )  ;", "assertExplainDdl (  \" SET   SESSION   foo    =     ' bar '  \"  )  ;", "assertExplainDdl (  \" PREPARE   my _ qy   FROM   SELECT    *    FROM   orders \"  ,     \" PREPARE   my _ qy \"  )  ;", "assertExplainDdl (  \" DEALLOCATE   PREPARE   my _ qy \"  )  ;", "assertExplainDdl (  \" RESET   SESSION   foo \"  )  ;", "assertExplainDdl (  \" START   TRANSACTION \"  )  ;", "assertExplainDdl (  \" COMMIT \"  )  ;", "assertExplainDdl (  \" ROLLBACK \"  )  ;", "}", "METHOD_END"], "methodName": ["testExplainDdl"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    Session . builder ( getSession (  )  )  . addPreparedStatement (  \" my _ query \"  ,     \" SELECT    *    FROM   orders \"  )  . build (  )  ;", "MaterializedResult   result    =    computeActual ( session ,     \" EXPLAIN    ( TYPE   LOGICAL )    EXECUTE   my _ query \"  )  ;", "assertEquals ( getOnlyElement ( result . getOnlyColumnAsSet (  )  )  ,    getExplainPlan (  \" SELECT    *    FROM   orders \"  ,    LOGICAL )  )  ;", "}", "METHOD_END"], "methodName": ["testExplainExecute"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    Session . builder ( getSession (  )  )  . addPreparedStatement (  \" my _ query \"  ,     \" SELECT    *    FROM   orders   WHERE   orderkey    <     ?  \"  )  . build (  )  ;", "MaterializedResult   result    =    computeActual ( session ,     \" EXPLAIN    ( TYPE   LOGICAL )    EXECUTE   my _ query   USING    7  \"  )  ;", "assertEquals ( getOnlyElement ( result . getOnlyColumnAsSet (  )  )  ,    getExplainPlan (  \" SELECT    *    FROM   orders   WHERE   orderkey    <     7  \"  ,    LOGICAL )  )  ;", "}", "METHOD_END"], "methodName": ["testExplainExecuteWithUsing"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "String   query    =     \" EXPLAIN   SELECT    *    FROM   orders \"  ;", "MaterializedResult   result    =    computeActual (  (  \" EXPLAIN    \"     +    query )  )  ;", "assertEquals ( getOnlyElement ( result . getOnlyColumnAsSet (  )  )  ,    getExplainPlan ( query ,    LOGICAL )  )  ;", "}", "METHOD_END"], "methodName": ["testExplainOfExplain"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "String   query    =     \" EXPLAIN   ANALYZE   SELECT    *    FROM   orders \"  ;", "MaterializedResult   result    =    computeActual (  (  \" EXPLAIN    \"     +    query )  )  ;", "assertEquals ( getOnlyElement ( result . getOnlyColumnAsSet (  )  )  ,    getExplainPlan ( query ,    LOGICAL )  )  ;", "}", "METHOD_END"], "methodName": ["testExplainOfExplainAnalyze"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    Session . builder ( getSession (  )  )  . addPreparedStatement (  \" my _ query \"  ,     \" SET   SESSION   foo    =     ?  \"  )  . build (  )  ;", "MaterializedResult   result    =    computeActual ( session ,     \" EXPLAIN    ( TYPE   LOGICAL )    EXECUTE   my _ query   USING    7  \"  )  ;", "assertEquals ( getOnlyElement ( result . getOnlyColumnAsSet (  )  )  ,     \" SET   SESSION   foo    =     7  \"  )  ;", "}", "METHOD_END"], "methodName": ["testExplainSetSessionWithUsing"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   result    =    computeActual (  \" EXPLAIN    ( TYPE   VALIDATE )    SELECT    1  \"  )  ;", "assertEquals ( result . getOnlyValue (  )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["testExplainValidate"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "computeActual (  \" EXPLAIN    ( TYPE   VALIDATE )    SELECT   x \"  )  ;", "}", "METHOD_END"], "methodName": ["testExplainValidateThrows"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    *    FROM    ( SELECT   count (  *  )    FROM   orders )    WHERE    0  =  1  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( SELECT   count (  *  )    FROM   orders )    WHERE   null \"  )  ;", "}", "METHOD_END"], "methodName": ["testFilterPushdownWithAggregation"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   FULL   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   WHERE   lineitem . orderkey   IS   NOT   NULL \"  ,     \" SELECT   COUNT (  *  )    FROM   lineitem   LEFT   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   WHERE   lineitem . orderkey   IS   NOT   NULL \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   FULL   JOIN   orders   ON   lineitem . orderkey    =    orders . custkey   WHERE   lineitem . orderkey   IS   NOT   NULL \"  ,     \" SELECT   COUNT (  *  )    FROM   lineitem   LEFT   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . custkey   WHERE   lineitem . orderkey   IS   NOT   NULL \"  )  ;", "}", "METHOD_END"], "methodName": ["testFullJoinNormalizedToLeft"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   FULL   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   WHERE   orders . orderkey   IS   NOT   NULL \"  ,     \" SELECT   COUNT (  *  )    FROM   lineitem   RIGHT   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey      WHERE   orders . orderkey   IS   NOT   NULL \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   FULL   JOIN   orders   ON   lineitem . orderkey    =    orders . custkey   WHERE   orders . custkey   IS   NOT   NULL \"  ,     \" SELECT   COUNT (  *  )    FROM   lineitem   RIGHT   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . custkey      WHERE   orders . custkey   IS   NOT   NULL \"  )  ;", "}", "METHOD_END"], "methodName": ["testFullJoinNormalizedToRight"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery ( noJoinReordering (  )  ,     \" WITH   small _ part   AS    ( SELECT    *    FROM   part   WHERE   name    =     ' a '  )    SELECT   lineitem . orderkey   FROM   lineitem   FULL   OUTER   JOIN   small _ part   ON   lineitem . partkey    =    small _ part . partkey \"  ,     \" WITH   small _ part   AS    ( SELECT    *    FROM   part   WHERE   name    =     ' a '  )    SELECT   lineitem . orderkey   FROM   lineitem   LEFT   JOIN   small _ part   ON   lineitem . partkey    =    small _ part . partkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testFullJoinWithEmptyBuildSide"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM    ( SELECT    *    FROM   lineitem   WHERE   orderkey    %     1  0  2  4     =     0  )    lineitem   FULL   JOIN   orders   ON   orders . orderkey    =     1  0  2  4  \"  ,     (  \" SELECT   COUNT (  *  )    FROM    (  \"     +     (  (  (  (  \" SELECT   lineitem . orderkey ,    orders . orderkey   AS   o 2    FROM    ( SELECT    *    FROM   lineitem   WHERE   orderkey    %     1  0  2  4     =     0  )    lineitem   LEFT   OUTER   JOIN   orders   ON   orders . orderkey    =     1  0  2  4     \"     +     \" UNION   ALL    \"  )     +     \" SELECT   lineitem . orderkey ,    orders . orderkey   AS   o 2    FROM    ( SELECT    *    FROM   lineitem   WHERE   orderkey    %     1  0  2  4     =     0  )    lineitem   RIGHT   OUTER   JOIN   orders   ON   orders . orderkey    =     1  0  2  4     \"  )     +     \" WHERE   lineitem . orderkey   IS   NULL \"  )     +     \"  )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testFullJoinWithLeftConstantEquality"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM    ( SELECT    *    FROM   lineitem   WHERE   orderkey    %     1  0  2  4     =     0  )    lineitem   FULL   JOIN   orders   ON   lineitem . orderkey    =     1  0  2  4  \"  ,     (  \" SELECT   COUNT (  *  )    FROM    (  \"     +     (  (  (  (  \" SELECT   lineitem . orderkey ,    orders . orderkey   AS   o 2    FROM    ( SELECT    *    FROM   lineitem   WHERE   orderkey    %     1  0  2  4     =     0  )    lineitem   LEFT   OUTER   JOIN   orders   ON   lineitem . orderkey    =     1  0  2  4     \"     +     \" UNION   ALL    \"  )     +     \" SELECT   lineitem . orderkey ,    orders . orderkey   AS   o 2    FROM    ( SELECT    *    FROM   lineitem   WHERE   orderkey    %     1  0  2  4     =     0  )    lineitem   RIGHT   OUTER   JOIN   orders   ON   lineitem . orderkey    =     1  0  2  4     \"  )     +     \" WHERE   lineitem . orderkey   IS   NULL \"  )     +     \"  )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testFullJoinWithRightConstantEquality"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  (  \" SELECT   orderkey ,    COUNT (  *  )    OVER    ( PARTITION   BY   orderkey )     \"     +     (  \" FROM    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    1  0  )     \"     +     \" ORDER   BY   orderkey   LIMIT    5  \"  )  )  ,     \" VALUES    (  1  ,     1  )  ,     (  2  ,     1  )  ,     (  3  ,     1  )  ,     (  4  ,     1  )  ,     (  5  ,     1  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testFullPrePartitionedWindowFunction"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  (  \" SELECT   orderkey ,    COUNT (  *  )    OVER    ( ORDER   BY   orderkey )     \"     +     (  \" FROM    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    1  0  )     \"     +     \" ORDER   BY   orderkey   LIMIT    5  \"  )  )  ,     \" VALUES    (  1  ,     1  )  ,     (  2  ,     2  )  ,     (  3  ,     3  )  ,     (  4  ,     4  )  ,     (  5  ,     5  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testFullPreSortedWindowFunction"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  (  \" SELECT   orderkey ,    custkey ,    COUNT (  *  )    OVER    ( PARTITION   BY   orderkey   ORDER   BY   custkey )     \"     +     (  \" FROM    ( SELECT    *    FROM   orders   ORDER   BY   orderkey ,    custkey   LIMIT    1  0  )     \"     +     \" ORDER   BY   orderkey   LIMIT    5  \"  )  )  ,     (  \" VALUES    (  1  ,     3  7  0  ,     1  )  ,     \"     +     (  (  (  \"  (  2  ,     7  8  1  ,     1  )  ,     \"     +     \"  (  3  ,     1  2  3  4  ,     1  )  ,     \"  )     +     \"  (  4  ,     1  3  6  9  ,     1  )  ,     \"  )     +     \"  (  5  ,     4  4  5  ,     1  )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testFullyPartitionedAndFullySortedWindowFunction"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  (  \" SELECT   orderkey ,    custkey ,    orderPriority ,    COUNT (  *  )    OVER    ( PARTITION   BY   orderkey   ORDER   BY   custkey ,    orderPriority )     \"     +     (  \" FROM    ( SELECT    *    FROM   orders   ORDER   BY   orderkey ,    custkey   LIMIT    1  0  )     \"     +     \" ORDER   BY   orderkey   LIMIT    5  \"  )  )  ,     (  \" VALUES    (  1  ,     3  7  0  ,     '  5  - LOW '  ,     1  )  ,     \"     +     (  (  (  \"  (  2  ,     7  8  1  ,     '  1  - URGENT '  ,     1  )  ,     \"     +     \"  (  3  ,     1  2  3  4  ,     '  5  - LOW '  ,     1  )  ,     \"  )     +     \"  (  4  ,     1  3  6  9  ,     '  5  - LOW '  ,     1  )  ,     \"  )     +     \"  (  5  ,     4  4  5  ,     '  5  - LOW '  ,     1  )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testFullyPartitionedAndPartiallySortedWindowFunction"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  \" SELECT   greatest ( rgb (  2  5  5  ,     0  ,     0  )  )  \"  ,     \"  \\  \\ Qline    1  :  8  :    Unexpected   parameters    ( color )    for   function   greatest .    Expected :    greatest ( E )    E : orderable \\  \\ E .  *  \"  )  ;", "}", "METHOD_END"], "methodName": ["testFunctionArgumentTypeConstraint"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  \" SELECT   length (  1  )  \"  ,     \"  \\  \\ Qline    1  :  8  :    Unexpected   parameters    ( integer )    for   function   length .    Expected :  \\  \\ E .  *  \"  )  ;", "}", "METHOD_END"], "methodName": ["testFunctionNotRegistered"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT   custkey 1  ,    orderstatus 1  ,    SUM ( totalprice 1  )    totalprice ,    MAX ( custkey 2  )    maxcustkey \\ n \"  )     +     \"       FROM    (  \\ n \"  )     +     \"             SELECT    *  \\ n \"  )     +     \"             FROM    (  \\ n \"  )     +     \"                   SELECT   custkey   custkey 1  ,    orderstatus   orderstatus 1  ,    CAST ( totalprice   AS   BIGINT )    totalprice 1  ,    orderkey   orderkey 1  \\ n \"  )     +     \"                   FROM   orders \\ n \"  )     +     \"              )    orders 1     \\ n \"  )     +     \"             JOIN    (  \\ n \"  )     +     \"                   SELECT   custkey   custkey 2  ,    orderstatus   orderstatus 2  ,    CAST ( totalprice   AS   BIGINT )    totalprice 2  ,    orderkey   orderkey 2  \\ n \"  )     +     \"                   FROM   orders \\ n \"  )     +     \"              )    orders 2    ON   orders 1  . orderkey 1     =    orders 2  . orderkey 2  \\ n \"  )     +     \"        )     \\ n \"  )     +     \"       GROUP   BY   custkey 1  ,    orderstatus 1  \\ n \"  )     +     \"  )  \\ n \"  )     +     \" WHERE   custkey 1     =    maxcustkey \\ n \"  )     +     \" AND   maxcustkey    %     2     =     0     \\ n \"  )     +     \" AND   orderstatus 1     =     \\  ' F \\  '  \\ n \"  )     +     \" AND   totalprice    >     1  0  0  0  0  \\ n \"  )     +     \" ORDER   BY   custkey 1  ,    orderstatus 1  ,    totalprice ,    maxcustkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupByKeyPredicatePushdown"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  \" SELECT   custkey ,    SUM ( totalprice )    FROM   orders   GROUP   BY   custkey   ORDER   BY   SUM ( totalprice )    DESC   LIMIT    1  0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testGroupByOrderByLimit"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   a ,    b   AS   t ,    sum ( c )  ,    grouping ( a ,    b )     +    grouping ( a )     \"     +     (  (  \" FROM    ( VALUES    (  ' h '  ,     ' j '  ,     1  1  )  ,     (  ' k '  ,     ' l '  ,     7  )  )    AS   t    ( a ,    b ,    c )     \"     +     \" GROUP   BY   GROUPING   SETS    (     ( a )  ,     ( b )  )     \"  )     +     \" ORDER   BY   grouping ( b )    ASC \"  )  )  ,     \" VALUES    ( NULL ,     ' j '  ,     1  1  ,     3  )  ,     ( NULL ,     ' l '  ,     7  ,     3  )  ,     (  ' h '  ,    NULL ,     1  1  ,     1  )  ,     (  ' k '  ,    NULL ,     7  ,     1  )  \"  )  ;", "assertQuery (  \" SELECT   a ,    sum ( b )  ,    grouping ( a )    FROM    ( VALUES    (  ' h '  ,     1  1  ,     0  )  ,     (  ' k '  ,     7  ,     0  )  )    AS   t    ( a ,    b ,    c )    GROUP   BY   GROUPING   SETS    ( a )  \"  ,     \" VALUES    (  ' h '  ,     1  1  ,     0  )  ,     (  ' k '  ,     7  ,     0  )  \"  )  ;", "assertQuery (  \" SELECT   a ,    b ,    sum ( c )  ,    grouping ( a ,    b )    FROM    ( VALUES    (  ' h '  ,     ' j '  ,     1  1  )  ,     (  ' k '  ,     ' l '  ,     7  )     )    AS   t    ( a ,    b ,    c )    GROUP   BY   GROUPING   SETS    (     ( a )  ,     ( b )  )    HAVING   grouping ( a ,    b )     >     1     \"  ,     \" VALUES    ( NULL ,     ' j '  ,     1  1  ,     2  )  ,     ( NULL ,     ' l '  ,     7  ,     2  )  \"  )  ;", "assertQuery (  \" SELECT   a ,    grouping ( a )     *     1  .  0    FROM    ( VALUES    (  1  )     )    AS   t    ( a )    GROUP   BY   a \"  ,     \" VALUES    (  1  ,     0  .  0  )  \"  )  ;", "assertQuery (  \" SELECT   a ,    grouping ( a )  ,    grouping ( a )    FROM    ( VALUES    (  1  )     )    AS   t    ( a )    GROUP   BY   a \"  ,     \" VALUES    (  1  ,     0  ,     0  )  \"  )  ;", "assertQuery (  \" SELECT   grouping ( a )    FROM    ( VALUES    (  ' h '  ,     ' j '  ,     1  1  )  ,     (  ' k '  ,     ' l '  ,     7  )  )    AS   t    ( a ,    b ,    c )    GROUP   BY   GROUPING   SETS    ( a , c )  ,    c *  2  \"  ,     \" VALUES    (  0  )  ,     (  1  )  ,     (  0  )  ,     (  1  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testGrouping"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   orderkey ,    custkey ,    sum ( agg _ price )    AS   outer _ sum ,    grouping ( orderkey ,    custkey )  ,    g    \"     +     (  (  (  (  (  (  (  \" FROM    \"     +     \"              ( SELECT   orderkey ,    custkey ,    sum ( totalprice )    AS   agg _ price ,    grouping ( custkey ,    orderkey )    AS   g    \"  )     +     \"                         FROM   orders    \"  )     +     \"                         GROUP   BY   orderkey ,    custkey    \"  )     +     \"                         ORDER   BY   agg _ price   ASC    \"  )     +     \"                         LIMIT    5  )    AS   t    \"  )     +     \" GROUP   BY   GROUPING   SETS    (  ( orderkey ,    custkey )  ,    g )     \"  )     +     \" ORDER   BY   outer _ sum \"  )  )  ,     (  \" VALUES    (  3  5  2  7  1  ,     3  3  4  ,     8  7  4  .  8  9  ,     0  ,    NULL )  ,     \"     +     (  (  (  (  \"                       (  2  8  6  4  7  ,     1  3  5  1  ,     9  2  4  .  3  3  ,     0  ,    NULL )  ,     \"     +     \"                       (  5  8  1  4  5  ,     8  6  2  ,     9  2  9  .  0  3  ,     0  ,    NULL )  ,     \"  )     +     \"                       (  8  3  5  4  ,     6  3  4  ,     9  7  4  .  0  4  ,     0  ,    NULL )  ,     \"  )     +     \"                       (  3  7  4  1  5  ,     3  0  1  ,     9  8  6  .  6  3  ,     0  ,    NULL )  ,     \"  )     +     \"                       ( NULL ,    NULL ,     4  6  8  8  .  9  2  ,     3  ,     0  )  \"  )  )  )  ;", "assertQuery (  (  \" SELECT   orderkey ,    custkey ,    g ,    sum ( agg _ price )    AS   outer _ sum ,    grouping ( orderkey ,    custkey )     \"     +     (  (  (  (  (  (  \" FROM    \"     +     \"              ( SELECT   orderkey ,    custkey ,    sum ( totalprice )    AS   agg _ price ,    grouping ( custkey ,    orderkey )    AS   g    \"  )     +     \"                FROM   orders    \"  )     +     \"                GROUP   BY   GROUPING   SETS    (  ( custkey )  ,     ( orderkey )  )     \"  )     +     \"                ORDER   BY   agg _ price   ASC    \"  )     +     \"                LIMIT    5  )    AS   t    \"  )     +     \" GROUP   BY   orderkey ,    custkey ,    g \"  )  )  ,     (  \" VALUES    (  2  8  6  4  7  ,    NULL ,     2  ,     9  2  4  .  3  3  ,     0  )  ,     \"     +     (  (  (  \"                       (  8  3  5  4  ,    NULL ,     2  ,     9  7  4  .  0  4  ,     0  )  ,     \"     +     \"                       (  3  7  4  1  5  ,    NULL ,     2  ,     9  8  6  .  6  3  ,     0  )  ,     \"  )     +     \"                       (  5  8  1  4  5  ,    NULL ,     2  ,     9  2  9  .  0  3  ,     0  )  ,     \"  )     +     \"                       (  3  5  2  7  1  ,    NULL ,     2  ,     8  7  4  .  8  9  ,     0  )  \"  )  )  )  ;", "assertQuery (  (  \" SELECT   orderkey ,    custkey ,    sum ( agg _ price )    AS   outer _ sum ,    grouping ( orderkey ,    custkey )     \"     +     (  (  (  (  (  (  (  \" FROM    \"     +     \"           ( SELECT   orderkey ,    custkey ,    sum ( totalprice )    AS   agg _ price    \"  )     +     \"             FROM   orders    \"  )     +     \"             GROUP   BY   GROUPING   SETS    (  ( custkey )  ,     ( orderkey )  )     \"  )     +     \"             ORDER   BY   agg _ price   ASC   NULLS   FIRST )    AS   t    \"  )     +     \" GROUP   BY   orderkey ,    custkey    \"  )     +     \" ORDER   BY   outer _ sum   ASC   NULLS   FIRST    \"  )     +     \" LIMIT    5  \"  )  )  ,     (  \" VALUES    (  3  5  2  7  1  ,    NULL ,     8  7  4  .  8  9  ,     0  )  ,     \"     +     (  (  (  \"                       (  2  8  6  4  7  ,    NULL ,     9  2  4  .  3  3  ,     0  )  ,     \"     +     \"                       (  5  8  1  4  5  ,    NULL ,     9  2  9  .  0  3  ,     0  )  ,     \"  )     +     \"                       (  8  3  5  4  ,       NULL ,     9  7  4  .  0  4  ,     0  )  ,     \"  )     +     \"                       (  3  7  4  1  5  ,    NULL ,     9  8  6  .  6  3  ,     0  )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupingInTableSubquery"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   orderkey ,    custkey ,    sum ( totalprice )  ,    grouping ( orderkey )  + grouping ( custkey )    AS   g ,     \"     +     (  (  (  (  (  \"                      rank (  )    OVER    ( PARTITION   BY   grouping ( orderkey )  + grouping ( custkey )  ,     \"     +     \"                      CASE   WHEN   grouping ( orderkey )     =     0    THEN   custkey   END   ORDER   BY   orderkey   ASC )    AS   r    \"  )     +     \" FROM   orders    \"  )     +     \" GROUP   BY   ROLLUP    ( orderkey ,    custkey )     \"  )     +     \" ORDER   BY   orderkey ,    custkey    \"  )     +     \" LIMIT    1  0  \"  )  )  ,     (  \" VALUES    (  1  ,     3  7  0  ,     1  7  2  7  9  9  .  4  9  ,     0  ,     1  )  ,     \"     +     (  (  (  (  (  (  (  (  \"                       (  1  ,    NULL ,     1  7  2  7  9  9  .  4  9  ,     1  ,     1  )  ,     \"     +     \"                       (  2  ,     7  8  1  ,     3  8  4  2  6  .  0  9  ,     0  ,     1  )  ,     \"  )     +     \"                       (  2  ,    NULL ,     3  8  4  2  6  .  0  9  ,     1  ,     2  )  ,     \"  )     +     \"                       (  3  ,     1  2  3  4  ,     2  0  5  6  5  4  .  3  0  ,     0  ,     1  )  ,     \"  )     +     \"                       (  3  ,    NULL ,     2  0  5  6  5  4  .  3  0  ,     1  ,     3  )  ,     \"  )     +     \"                       (  4  ,     1  3  6  9  ,     5  6  0  0  0  .  9  1  ,     0  ,     1  )  ,     \"  )     +     \"                       (  4  ,    NULL ,     5  6  0  0  0  .  9  1  ,     1  ,     4  )  ,     \"  )     +     \"                       (  5  ,     4  4  5  ,     1  0  5  3  6  7  .  6  7  ,     0  ,     1  )  ,     \"  )     +     \"                       (  5  ,    NULL ,     1  0  5  3  6  7  .  6  7  ,     1  ,     5  )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupingInWindowFunction"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "String   fortyLetterSequence    =     \" aa ,    ab ,    ac ,    ad ,    ae ,    af ,    ag ,    ah ,    ai ,    aj ,    ak ,    al ,    am ,    an ,    ao ,    ap ,    aq ,    ar ,    asa ,    at ,    au ,    av ,    aw ,    ax ,    ay ,    az ,     \"     +     \" ba ,    bb ,    bc ,    bd ,    be ,    bf ,    bg ,    bh ,    bi ,    bj ,    bk ,    bl ,    bm ,    bn \"  ;", "String   fortyIntegers    =     \"  1  ,     2  ,     3  ,     4  ,     5  ,     6  ,     7  ,     8  ,     9  ,     1  0  ,     1  1  ,     1  2  ,     1  3  ,     1  4  ,     1  5  ,     1  6  ,     1  7  ,     1  8  ,     1  9  ,     2  0  ,     2  1  ,     2  2  ,     2  3  ,     2  4  ,     2  5  ,     2  6  ,     2  7  ,     2  8  ,     2  9  ,     3  0  ,     \"     +     \"  3  1  ,     3  2  ,     3  3  ,     3  4  ,     3  5  ,     3  6  ,     3  7  ,     3  8  ,     3  9  ,     4  0  \"  ;", "String   groupingSet 1     =     \" at ,    ab ,    am ,    bg ,    bn ,    ai ,    an \"  ;", "String   groupingSet 2     =     \" bb ,    ad ,    ae ,    bc ,    be ,    aj \"  ;", "String   query    =    String . format (  \" SELECT   grouping (  % s )    FROM    ( VALUES    (  % s )  )    AS   t (  % s )    GROUP   BY   GROUPING   SETS    (  (  % s )  ,     (  % s )  ,     (  % s )  )  \"  ,    fortyLetterSequence ,    fortyIntegers ,    fortyLetterSequence ,    fortyLetterSequence ,    groupingSet 1  ,    groupingSet 2  )  ;", "assery ( query ,     \" VALUES    (  0  )  ,     (  8  2  2  2  8  3  8  6  1  8  8  6  )  ,     (  9  9  5  3  5  8  6  6  4  1  9  1  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testGroupingWithFortyArguments"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   orderstatus ,    sum ( totalprice )    FROM   orders   GROUP   BY   orderstatus   HAVING   orderstatus    =     ' O '  \"  )  ;", "}", "METHOD_END"], "methodName": ["testHaving"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   custkey ,    sum ( orderkey )    FROM   orders   GROUP   BY   custkey   HAVING   sum ( orderkey )     >     4  0  0  0  0  0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testHaving2"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   custkey ,    sum ( totalprice )     *     2    FROM   orders   GROUP   BY   custkey \"  )  ;", "assertQuery (  \" SELECT   custkey ,    avg ( totalprice    +     5  )    FROM   orders   GROUP   BY   custkey \"  )  ;", "assertQuery (  \" SELECT   custkey ,    sum ( totalprice )     *     2    FROM   orders   GROUP   BY   custkey   HAVING   avg ( totalprice    +     5  )     >     1  0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testHaving3"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   sum ( orderkey )    FROM   orders   HAVING   sum ( orderkey )     >     4  0  0  0  0  0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testHavingWithoutGroupBy"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   sum ( IF ( orderstatus    =     ' F '  ,    totalprice ,     0  .  0  )  )    FROM   orders \"  ,     \" SELECT   sum ( CASE   WHEN   orderstatus    =     ' F '    THEN   totalprice   ELSE    0  .  0    END )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   sum ( IF ( orderstatus    =     ' Z '  ,    totalprice )  )    FROM   orders \"  ,     \" SELECT   sum ( CASE   WHEN   orderstatus    =     ' Z '    THEN   totalprice   END )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   sum ( IF ( orderstatus    =     ' F '  ,    NULL ,    totalprice )  )    FROM   orders \"  ,     \" SELECT   sum ( CASE   WHEN   orderstatus    =     ' F '    THEN   NULL   ELSE   totalprice   END )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   IF ( orderstatus    =     ' Z '  ,    orderkey    /     0  ,    orderkey )    FROM   orders \"  ,     \" SELECT   CASE   WHEN   orderstatus    =     ' Z '    THEN   orderkey    /     0    ELSE   orderkey   END   FROM   orders \"  )  ;", "assertQuery (  \" SELECT   sum ( IF ( NULLIF ( orderstatus ,     ' F '  )     <  >     ' F '  ,    totalprice ,     5  .  1  )  )    FROM   orders \"  ,     \" SELECT   sum ( CASE   WHEN   NULLIF ( orderstatus ,     ' F '  )     <  >     ' F '    THEN   totalprice   ELSE    5  .  1    END )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   if ( true ,    CAST (  1    AS   decimal (  2  ,  1  )  )  ,     1  )  \"  ,     \" SELECT    1  .  0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testIfExpression"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  \" SELECT    *    FROM    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    3  )    a ,     \"     +     \"  ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    4  )    b \"  )  )  )  ;", "assertQuery (  (  \"  \"     +     (  \" SELECT    *    FROM    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    5  )    a ,     \"     +     \"  ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    2  )    b \"  )  )  )  ;", "assertQuery (  (  \"  \"     +     (  (  \" SELECT    *    FROM    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    5  )    a ,     \"     +     \"  ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    5  )    b ,     \"  )     +     \"  ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    5  )    c    \"  )  )  )  ;", "assertQuery (  (  \"  \"     +     (  (  (  \" SELECT   l . orderkey ,    l . linenumber    \"     +     \" FROM   orders   o   INNER   JOIN   lineitem   l    \"  )     +     \" ON   o . custkey    =    l . linenumber    \"  )     +     \" WHERE   o . custkey   IN    (  5  )    AND   l . orderkey   IN    (  7  5  2  2  )  \"  )  )  )  ;", "assertQuery (  (  \"  \"     +     (  (  (  \" SELECT   o . custkey    \"     +     \" FROM   orders   o   INNER   JOIN   lineitem   l    \"  )     +     \" ON   o . custkey    =    l . linenumber    \"  )     +     \" WHERE   o . custkey   IN    (  5  )    AND   l . orderkey   IN    (  7  5  2  2  )  \"  )  )  )  ;", "assertQuery (  (  \"  \"     +     (  (  (  \" SELECT   COUNT (  *  )     \"     +     \" FROM   orders   o   INNER   JOIN   lineitem   l    \"  )     +     \" ON   o . custkey    =    l . linenumber    \"  )     +     \" WHERE   o . custkey   IN    (  5  )    AND   l . orderkey   IN    (  7  5  2  2  )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testImplicitCrossJoin"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   orderkey   FROM   orders   WHERE   orderkey   IN    (  1  ,     2  ,     3  )  \"  )  ;", "assertQuery (  \" SELECT   orderkey   FROM   orders   WHERE   orderkey   IN    (  1  .  5  ,     2  .  3  )  \"  ,     \" SELECT   orderkey   FROM   orders   LIMIT    0  \"  )  ;", "assertQuery (  \" SELECT   orderkey   FROM   orders   WHERE   orderkey   IN    (  1  ,     2 E 0  ,     3  )  \"  )  ;", "assertQuery (  \" SELECT   orderkey   FROM   orders   WHERE   totalprice   IN    (  1  ,     2  ,     3  )  \"  )  ;", "assertQuery (  \" SELECT   x   FROM    ( values    3  ,     1  0  0  )    t ( x )    WHERE   x   IN    (  2  1  4  7  4  8  3  6  4  9  )  \"  ,     \" SELECT    *    WHERE   false \"  )  ;", "assertQuery (  \" SELECT   x   FROM    ( values    3  ,     1  0  0  ,     2  1  4  7  4  8  3  6  4  8  ,     2  1  4  7  4  8  3  6  4  9  ,     2  1  4  7  4  8  3  6  5  0  )    t ( x )    WHERE   x   IN    (  2  1  4  7  4  8  3  6  4  8  ,     2  1  4  7  4  8  3  6  5  0  )  \"  ,     \" values    2  1  4  7  4  8  3  6  4  8  ,     2  1  4  7  4  8  3  6  5  0  \"  )  ;", "assertQuery (  \" SELECT   x   FROM    ( values    3  ,     1  0  0  ,     2  1  4  7  4  8  3  6  4  8  ,     2  1  4  7  4  8  3  6  4  9  ,     2  1  4  7  4  8  3  6  5  0  )    t ( x )    WHERE   x   IN    (  3  ,     4  ,     2  1  4  7  4  8  3  6  4  8  ,     2  1  4  7  4  8  3  6  5  0  )  \"  ,     \" values    3  ,     2  1  4  7  4  8  3  6  4  8  ,     2  1  4  7  4  8  3  6  5  0  \"  )  ;", "assertQuery (  \" SELECT   x   FROM    ( values    1  ,     2  ,     3  )    t ( x )    WHERE   x   IN    (  1     +    CAST ( rand (  )     <     0    AS   bigint )  ,     2     +    CAST ( rand (  )     <     0    AS   bigint )  )  \"  ,     \" values    1  ,     2  \"  )  ;", "assertQuery (  \" SELECT   x   FROM    ( values    1  ,     2  ,     3  ,     4  )    t ( x )    WHERE   x   IN    (  1     +    CAST ( rand (  )     <     0    AS   bigint )  ,     2     +    CAST ( rand (  )     <     0    AS   bigint )  ,     4  )  \"  ,     \" values    1  ,     2  ,     4  \"  )  ;", "assertQuery (  \" SELECT   x   FROM    ( values    1  ,     2  ,     3  ,     4  )    t ( x )    WHERE   x   IN    (  4  ,     2  ,     1  )  \"  ,     \" values    1  ,     2  ,     4  \"  )  ;", "assertQuery (  \" SELECT   x   FROM    ( values    1  ,     2  ,     3  ,     2  1  4  7  4  8  3  6  4  8  )    t ( x )    WHERE   x   IN    (  1     +    CAST ( rand (  )     <     0    AS   bigint )  ,     2     +    CAST ( rand (  )     <     0    AS   bigint )  ,     2  1  4  7  4  8  3  6  4  8  )  \"  ,     \" values    1  ,     2  ,     2  1  4  7  4  8  3  6  4  8  \"  )  ;", "assertQuery (  \" SELECT   x   IN    (  0  )    FROM    ( values    4  2  9  4  9  6  7  2  9  6  )    t ( x )  \"  ,     \" values   false \"  )  ;", "assertQuery (  \" SELECT   x   IN    (  0  ,     4  2  9  4  9  6  7  2  9  7     +    CAST ( rand (  )     <     0    AS   bigint )  )    FROM    ( values    4  2  9  4  9  6  7  2  9  6  ,     4  2  9  4  9  6  7  2  9  7  )    t ( x )  \"  ,     \" values   false ,    true \"  )  ;", "assertQuery (  \" SELECT   NULL   in    (  1  ,     2  ,     3  )  \"  ,     \" values   null \"  )  ;", "assertQuery (  \" SELECT    1    in    (  1  ,    NULL ,     3  )  \"  ,     \" values   true \"  )  ;", "assertQuery (  \" SELECT    2    in    (  1  ,    NULL ,     3  )  \"  ,     \" values   null \"  )  ;", "assertQuery (  \" SELECT   x   FROM    ( values   DATE    '  1  9  7  0  -  0  1  -  0  1  '  ,    DATE    '  1  9  7  0  -  0  1  -  0  3  '  )    t ( x )    WHERE   x   IN    ( DATE    '  1  9  7  0  -  0  1  -  0  1  '  )  \"  ,     \" values   DATE    '  1  9  7  0  -  0  1  -  0  1  '  \"  )  ;", "assertEquals ( computeActual (  \" SELECT   x   FROM    ( values   TIMESTAMP    '  1  9  7  0  -  0  1  -  0  1     0  0  :  0  1  :  0  0  +  0  0  :  0  0  '  ,    TIMESTAMP    '  1  9  7  0  -  0  1  -  0  1     0  8  :  0  1  :  0  0  +  0  8  :  0  0  '  ,    TIMESTAMP    '  1  9  7  0  -  0  1  -  0  1     0  0  :  0  1  :  0  0  +  0  8  :  0  0  '  )    t ( x )    WHERE   x   IN    ( TIMESTAMP    '  1  9  7  0  -  0  1  -  0  1     0  0  :  0  1  :  0  0  +  0  0  :  0  0  '  )  \"  )  . getOnlyColumn (  )  . collect ( Collectors . toList (  )  )  ,    ImmutableList . of ( zonedDateTime (  \"  1  9  7  0  -  0  1  -  0  1     0  0  :  0  1  :  0  0  .  0  0  0    UTC \"  )  ,    zonedDateTime (  \"  1  9  7  0  -  0  1  -  0  1     0  8  :  0  1  :  0  0  .  0  0  0     +  0  8  :  0  0  \"  )  )  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM    ( values    1  )    t ( x )    WHERE   x   IN    ( null ,     0  )  \"  ,     \" SELECT    0  \"  )  ;", "assertQuery (  \" SELECT   d   IN    ( DECIMAL    '  2  .  0  '  ,    DECIMAL    '  3  0  .  0  '  )    FROM    ( VALUES    (  2  .  0 E 0  )  )    t ( d )  \"  ,     \" SELECT   true \"  )  ;", "}", "METHOD_END"], "methodName": ["testIn"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   a   FROM    ( VALUES    (  1  )  ,  (  2  )  )    t ( a )    WHERE   a   IN    \"     +     \"  ( SELECT   b   FROM    ( VALUES    ( ARRAY [  2  ]  )  )    AS   t 1     ( a )    CROSS   JOIN   UNNEST ( a )    AS   t 2  ( b )  )  \"  )  ,     \" SELECT    2  \"  )  ;", "}", "METHOD_END"], "methodName": ["testInSubqueryWithCrossJoin"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   CASE   WHEN   false   THEN    1    IN    ( VALUES    2  )    END \"  ,     \" SELECT   NULL \"  )  ;", "assertQuery (  \" SELECT   x   FROM    ( VALUES    2  )    t ( x )    WHERE   MAP ( ARRAY [  8  5  8  9  9  3  4  5  9  2  ]  ,    ARRAY [ x ]  )    IN    ( VALUES   MAP ( ARRAY [  8  5  8  9  9  3  4  5  9  2  ]  , ARRAY [  2  ]  )  )  \"  ,     \" SELECT    2  \"  )  ;", "assertQuery (  \" SELECT   a   IN    ( VALUES    2  )  ,    a   FROM    ( VALUES    (  2  )  )    t ( a )  \"  ,     \" SELECT   TRUE ,     2  \"  )  ;", "}", "METHOD_END"], "methodName": ["testInUncorrelatedSubquery"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   table _ name   FROM   information _ schema . tables   WHERE   table _ name    =     ' orders '    LIMIT    1  \"  ,     \" SELECT    ' orders '    table _ name \"  )  ;", "assertQuery (  \" SELECT   table _ name   FROM   information _ schema . columns   WHERE   data _ type    =     ' bigint '    AND   table _ name    =     ' customer '    and   column _ name    =     ' custkey '    LIMIT    1  \"  ,     \" SELECT    ' customer '    table _ name \"  )  ;", "}", "METHOD_END"], "methodName": ["testInformationSchemaFiltering"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   orderkey ,    custkey   FROM    ( SELECT   orderkey ,    custkey   FROM   orders )    U \"  )  ;", "}", "METHOD_END"], "methodName": ["testInlineView"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   x    +     1  ,    y   FROM    ( SELECT   orderkey    *     1  0    x ,    custkey   y   FROM   orders )    u \"  )  ;", "}", "METHOD_END"], "methodName": ["testInlineViewWithProjections"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual ( noJoinReordering (  )  ,     (  \" WITH   small _ part   AS    ( SELECT    *    FROM   part   WHERE   name    =     ' a '  )     \"     +     \" SELECT   lineitem . orderkey   FROM   lineitem   INNER   JOIN   small _ part   ON   lineitem . partkey    =    small _ part . partkey \"  )  )  ;", "assertEquals ( actual . getRowCount (  )  ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testInnerJoinWithEmptyBuildSide"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery ( noJoinReordering (  )  ,     \" WITH   small _ part   AS    ( SELECT    *    FROM   part   WHERE   name    =     ' a '  )    SELECT   lineitem . orderkey   FROM   small _ part   INNER   JOIN   lineitem   ON   small _ part . partkey    =    lineitem . partkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testInnerJoinWithEmptyProbeSide"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   regionkey   FROM   nation   WHERE   nationkey    <     7     \"     +     \" INTERSECT   SELECT   regionkey   FROM   nation   WHERE   nationkey    >     2  1  \"  )  )  ;", "assertQuery (  (  \" SELECT   regionkey   FROM   nation   WHERE   nationkey    <     7     \"     +     \" INTERSECT   DISTINCT   SELECT   regionkey   FROM   nation   WHERE   nationkey    >     2  1  \"  )  ,     \" VALUES    1  ,     3  \"  )  ;", "assertQuery (  (  \" WITH   wnation   AS    ( SELECT   nationkey ,    regionkey   FROM   nation )     \"     +     (  \" SELECT   regionkey   FROM   wnation   WHERE   nationkey    <     7     \"     +     \" INTERSECT   SELECT   regionkey   FROM   wnation   WHERE   nationkey    >     2  1  \"  )  )  ,     \" VALUES    1  ,     3  \"  )  ;", "assertQuery (  (  \" SELECT   num   FROM    ( SELECT    1    AS   num   FROM   nation   WHERE   nationkey =  1  0     \"     +     \" INTERSECT   SELECT    1    FROM   nation   WHERE   nationkey =  2  0  )    T \"  )  )  ;", "assertQuery (  (  \" SELECT   nationkey ,    nationkey    /     2    FROM    ( SELECT   nationkey   FROM   nation   WHERE   nationkey    <     1  0     \"     +     \" INTERSECT   SELECT   nationkey   FROM   nation   WHERE   nationkey    >     4  )    T   WHERE   nationkey    %     2     =     0  \"  )  )  ;", "assertQuery (  (  \" SELECT   regionkey   FROM    ( SELECT   regionkey   FROM   nation   WHERE   nationkey    <     7     \"     +     (  \" INTERSECT   SELECT   regionkey   FROM   nation   WHERE   nationkey    >     2  1  )     \"     +     \" UNION   SELECT    4  \"  )  )  )  ;", "assertQuery (  (  \" SELECT   regionkey   FROM    ( SELECT   regionkey   FROM   nation   WHERE   nationkey    <     7     \"     +     (  \" UNION   SELECT   regionkey   FROM   nation   WHERE   nationkey    >     2  1  )     \"     +     \" INTERSECT   SELECT    1  \"  )  )  )  ;", "assertQuery (  (  \" SELECT   regionkey   FROM    ( SELECT   regionkey   FROM   nation   WHERE   nationkey    <     7     \"     +     (  \" INTERSECT   SELECT   regionkey   FROM   nation   WHERE   nationkey    >     2  1  )     \"     +     \" UNION   ALL   SELECT    3  \"  )  )  )  ;", "assertQuery (  (  \" SELECT   regionkey   FROM    ( SELECT   regionkey   FROM   nation   WHERE   nationkey    <     7     \"     +     (  \" INTERSECT   SELECT   regionkey   FROM   nation   WHERE   nationkey    >     2  1  )     \"     +     \" UNION   ALL   SELECT    3  \"  )  )  )  ;", "assertQuery (  (  \" SELECT    *    FROM    ( VALUES    1  ,     2  )     \"     +     \" INTERSECT   SELECT    *    FROM    ( VALUES    1  .  0  ,     2  )  \"  )  ,     \" VALUES    1  .  0  ,     2  .  0  \"  )  ;", "assertQuery (  \" SELECT   NULL ,    NULL   INTERSECT   SELECT   NULL ,    NULL   FROM   nation \"  )  ;", "MaterializedResult   emptyResult    =    computeActual (  \" SELECT    1  0  0    INTERSECT    ( SELECT   regionkey   FROM   nation   WHERE   nationkey    <  1  0  )  \"  )  ;", "assertEquals ( emptyResult . getMaterializedRows (  )  . size (  )  ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testIntersect"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  \" SELECT    *    FROM    ( VALUES    1  ,     2  ,     3  ,     4  )    INTERSECT   ALL   SELECT    *    FROM    ( VALUES    3  ,     4  )  \"  ,     \" line    1  :  3  5  :    INTERSECT   ALL   not   yet   implemented \"  )  ;", "}", "METHOD_END"], "methodName": ["testIntersectAllFails"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   nation   INTERSECT   SELECT   COUNT ( regionkey )    FROM   nation   HAVING   SUM ( regionkey )    IS   NOT   NULL \"  )  ;", "assertQuery (  \" SELECT   SUM ( nationkey )  ,    COUNT ( name )    FROM    ( SELECT   nationkey , name   FROM   nation   INTERSECT   SELECT   regionkey ,    name   FROM   nation )    n \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )     *     2    FROM   nation   INTERSECT    ( SELECT   SUM ( nationkey )    FROM   nation   GROUP   BY   regionkey   ORDER   BY    1    LIMIT    2  )  \"  )  ;", "assertQuery (  \" SELECT   COUNT ( a )    FROM    ( SELECT   nationkey   AS   a   FROM    ( SELECT   nationkey   FROM   nation   INTERSECT   SELECT   regionkey   FROM   nation )    n 1    INTERSECT   SELECT   regionkey   FROM   nation )    n 2  \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )  ,    SUM (  2  )  ,    regionkey   FROM    ( SELECT   nationkey ,    regionkey   FROM   nation   INTERSECT   SELECT   regionkey ,    regionkey   FROM   nation )    n   GROUP   BY   regionkey \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM    ( SELECT   nationkey   FROM   nation   INTERSECT   SELECT    2  )    n 1    INTERSECT   SELECT   regionkey   FROM   nation \"  )  ;", "}", "METHOD_END"], "methodName": ["testIntersectWithAggregation"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  \" SELECT   CAST (  1    AS   DATE )  \"  ,     \" line    1  :  8  :    Cannot   cast   integer   to   date \"  )  ;", "}", "METHOD_END"], "methodName": ["testInvalidCast"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  (  \" SELECT   CAST ( totalprice   AS   BIGINT )  ,  \\ n \"     +     (  \" CAST (  2  0  1  5    AS   DATE )  ,  \\ n \"     +     \" CAST ( orderkey   AS   DOUBLE )    FROM   orders \"  )  )  ,     \" line    2  :  1  :    Cannot   cast   integer   to   date \"  )  ;", "}", "METHOD_END"], "methodName": ["testInvalidCastInMultilineQuery"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  \" SELECT    *    FROM   lineitem   l   JOIN    ( SELECT   orderkey _  1  ,    custkey   FROM   orders )    o   on   l . orderkey    =    o . orderkey _  1  \"  ,     \" line    1  :  3  9  :    Column    ' orderkey _  1  '    cannot   be   resolved \"  )  ;", "}", "METHOD_END"], "methodName": ["testInvalidColumn"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  \" SELECT   CAST ( null   AS   array ( foo )  )  \"  ,     \"  \\  \\ Qline    1  :  8  :    Unknown   type :    array ( foo )  \\  \\ E \"  )  ;", "}", "METHOD_END"], "methodName": ["testInvalidType"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  \" SELECT   ARRAY [  1  ,     2  ,     ' a '  ]  \"  ,     \"  \\  \\ Qline    1  :  2  0  :    All   ARRAY   elements   must   be   the   same   type :    integer \\  \\ E \"  )  ;", "}", "METHOD_END"], "methodName": ["testInvalidTypeArray"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  \" SELECT    ' a '    BETWEEN    3    AND    ' z '  \"  ,     \"  \\  \\ Qline    1  :  1  2  :    Cannot   check   if   varchar (  1  )    is   BETWEEN   integer   and   varchar (  1  )  \\  \\ E \"  )  ;", "}", "METHOD_END"], "methodName": ["testInvalidTypeBetweenOperator"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  \" SELECT    (  ' a '     |  |     ' z '  )     +     (  3     *     4  )     /     5  \"  ,     \"  \\  \\ Qline    1  :  2  1  :     \\  '  +  \\  '    cannot   be   applied   to   varchar ,    integer \\  \\ E \"  )  ;", "}", "METHOD_END"], "methodName": ["testInvalidTypeInfixOperator"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   x    +    y   FROM    (  \"     +     (  \"          SELECT   orderdate ,    COUNT (  *  )    x   FROM   orders   GROUP   BY   orderdate )    a   JOIN    (  \"     +     \"          SELECT   orderdate ,    COUNT (  *  )    y   FROM   orders   GROUP   BY   orderdate )    b   ON   a . orderdate    =    b . orderdate \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testJoinAggregations"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   orders   t   JOIN    ( SELECT    *    FROM   orders   LIMIT    1  )    t 2    ON   sin ( t 2  . custkey )     =     0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinCoercion"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   o . clerk ,    avg ( o . shippriority )  ,    COUNT ( l . linenumber )    FROM   orders   o   LEFT   OUTER   JOIN   lineitem   l   ON   o . orderkey = l . orderkey   AND   o . shippriority =  1    GROUP   BY   o . clerk \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinCoercionOnEqualityComparison"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  \" SELECT   x ,    y ,    COUNT (  *  )  \\ n \"     +     \" FROM    ( SELECT   orderkey ,     0    AS   x   FROM   orders )    a    \\ n \"  )     +     \" JOIN    ( SELECT   orderkey ,     1    AS   y   FROM   orders )    b    \\ n \"  )     +     \" ON   a . orderkey    =    b . orderkey \\ n \"  )     +     \" GROUP   BY    1  ,     2  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testJoinConstantPropagation"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    *    FROM    ( VALUES    (  1  .  0  ,     2  .  0  )  )    x    ( a ,    b )    JOIN    ( VALUES    (  1  ,     3  )  )    y    ( a ,    b )    ON   x . a    =    y . a \"  ,     \" VALUES    (  1  .  0  ,     2  .  0  ,     1  ,     3  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    (  1  ,     2  )  )    x    ( a ,    b )    JOIN    ( VALUES    ( SMALLINT    '  1  '  ,    SMALLINT    '  3  '  )  )    y    ( a ,    b )    ON   x . a    =    y . a \"  ,     \" VALUES    (  1  ,     2  ,     1  ,     3  )  \"  )  ;", "assertQuery ( String . format (  (  \" SELECT    *    FROM    \"     +     (  (  \"           ( VALUES    ( CAST (  1    AS   DECIMAL (  %  1  $ d ,  0  )  )  ,     2  )  )    x    ( a ,    b )     ,     \"     +     \"           ( VALUES    ( CAST (  0    AS   DECIMAL (  %  1  $ d ,  0  )  )  ,    SMALLINT    '  3  '  )  )    y    ( a ,    b )     \"  )     +     \"    WHERE   x . a    =    y . a    +     1  \"  )  )  ,    MAX _ SHORT _ PRECISION )  ,     \" VALUES    (  1  ,     2  ,     0  ,     3  )  \"  )  ;", "assertQuery ( String . format (  (  \" SELECT    *    FROM    \"     +     (  (  (  \"           ( VALUES    ( CAST (  1    AS   DECIMAL (  %  1  $ d ,  0  )  )  ,     2  )  )    x    ( a ,    b )     \"     +     \"          INNER   JOIN    \"  )     +     \"           ( VALUES    ( CAST (  0    AS   DECIMAL (  %  1  $ d ,  0  )  )  ,    SMALLINT    '  3  '  )  )    y    ( a ,    b )     \"  )     +     \"          ON   x . a    =    y . a    +     1  \"  )  )  ,    MAX _ SHORT _ PRECISION )  ,     \" VALUES    (  1  ,     2  ,     0  ,     3  )  \"  )  ;", "assertQuery ( String . format (  (  \" SELECT    *    FROM    \"     +     (  (  \"           ( VALUES    ( CAST (  1    AS   DECIMAL (  %  1  $ d ,  0  )  )  ,     2  )  )    x    ( a ,    b )     \"     +     \"          LEFT   JOIN    ( VALUES    ( CAST (  0    AS   DECIMAL (  %  1  $ d ,  0  )  )  ,    SMALLINT    '  3  '  )  )    y    ( a ,    b )     \"  )     +     \"          ON   x . a    =    y . a    +     1  \"  )  )  ,    MAX _ SHORT _ PRECISION )  ,     \" VALUES    (  1  ,     2  ,     0  ,     3  )  \"  )  ;", "assertQuery ( String . format (  (  \" SELECT    *    FROM    \"     +     (  (  \"           ( VALUES   CAST (  1    AS   decimal (  % d ,  0  )  )  )    t 1     ( a )  ,     \"     +     \"           ( VALUES   CAST (  1    AS   decimal (  % d ,  0  )  )  )    t 2     ( b )     \"  )     +     \"          WHERE   a    =    b \"  )  )  ,    MAX _ SHORT _ PRECISION ,     (  ( Decimals . MAX _ SHORT _ PRECISION )     +     1  )  )  ,     \" VALUES    (  1  ,     1  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinCriteriaCoercion"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   lineitem . orderkey    =    orders . custkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinDoubleClauseWithLeftOverlap"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   orders . orderkey    =    lineitem . partkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinDoubleClauseWithRightOverlap"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  \" SELECT    *    FROM   orders   a    \"     +     \"          JOIN    ( SELECT    *    FROM   orders   WHERE   orderkey   IS   NULL )    b    \"  )     +     \"          ON   a . orderkey    =    b . orderkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testJoinEffectivePredicateWithNoRanges"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  \" SELECT    *    FROM    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    5  )    a    \"     +     \"          JOIN    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    5  )    b    \"  )     +     \"          ON    1  2  3     =     1  2  3  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testJoinOnConstantExpression"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   lineitem . shipdate    =    orders . orderdate \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinOnMultipleFields"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   COUNT (  *  )  \\ n \"     +     (  (  (  \" FROM    ( SELECT    *    FROM   lineitem   WHERE   orderkey    %     1  6     =     0    AND   partkey    %     2     =     0  )    lineitem \\ n \"     +     \" JOIN    ( SELECT    *    FROM   orders   WHERE   orderkey    %     1  6     =     0    AND   custkey    %     2     =     0  )    orders \\ n \"  )     +     \" ON   lineitem . orderkey    %     8     =    orders . orderkey    %     8    AND   lineitem . linenumber    %     2     =     0  \\ n \"  )     +     \" WHERE   orders . custkey    %     8     <     7    AND   orders . custkey    %     8     =    lineitem . orderkey    %     8    AND   lineitem . suppkey    %     7     >    orders . custkey    %     7  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testJoinPredicateMoveAround"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  \" SELECT   COUNT (  *  )  \\ n \"     +     \" FROM   lineitem    \\ n \"  )     +     \" JOIN    (  \\ n \"  )     +     \"       SELECT    *    FROM   orders \\ n \"  )     +     \"  )    orders    \\ n \"  )     +     \" ON   lineitem . orderkey    =    orders . orderkey    \\ n \"  )     +     \" WHERE   orders . orderkey    %     4     =     0  \\ n \"  )     +     \"       AND   lineitem . suppkey    >    orders . orderkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testJoinPredicatePushdown"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM \\ n \"  )     +     \"        ( SELECT   orderkey ,    abs ( orderkey )    a   FROM   orders )    t \\ n \"  )     +     \" JOIN \\ n \"  )     +     \"        ( SELECT   orderkey ,    abs ( orderkey )    a   FROM   orders )    u \\ n \"  )     +     \" ON \\ n \"  )     +     \"       t . orderkey    =    u . orderkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testJoinProjectionPushDown"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM    ( SELECT    *    FROM   lineitem )    JOIN    ( SELECT    *    FROM   orders )    USING    ( orderkey )  \"  ,     \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinUnaliasedSubqueries"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   USING    ( orderkey )  \"  ,     \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinUsing"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN    ( SELECT   orderkey ,    orderdate   shipdate   FROM   orders )    T   USING    ( orderkey ,    shipdate )  \"  ,     \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   lineitem . shipdate    =    orders . orderdate \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinUsingMultipleFields"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   b   FROM    ( VALUES    1  ,     2  )    t 1  ( a )    RIGHT   OUTER   JOIN    ( VALUES    1  0  ,     1  1  )    t 2  ( b )    ON   b    >     1  0  \"  ,     \" VALUES    (  1  0  )  ,     (  1  1  )  ,     (  1  1  )  \"  )  ;", "assertQuery (  \" SELECT   a   FROM    ( VALUES    1  ,     2  )    t 1  ( a )    RIGHT   OUTER   JOIN    ( VALUES    1  0  ,     1  1  )    t 2  ( b )    ON   a    >     1  \"  ,     \" VALUES    (  2  )  ,     (  2  )  \"  )  ;", "assertQuery (  \" SELECT   b   FROM    ( VALUES    1  ,     2  )    t 1  ( a )    LEFT   OUTER   JOIN    ( VALUES    1  0  ,     1  1  )    t 2  ( b )    ON   b    >     1  0  \"  ,     \" VALUES    (  1  1  )  ,     (  1  1  )  \"  )  ;", "assertQuery (  \" SELECT   a   FROM    ( VALUES    1  ,     2  )    t 1  ( a )    LEFT   OUTER   JOIN    ( VALUES    1  0  ,     1  1  )    t 2  ( b )    ON   a    >     1  \"  ,     \" VALUES    (  1  )  ,     (  2  )  ,     (  2  )  \"  )  ;", "assertQuery (  \" SELECT   a   FROM    ( VALUES    1  ,     2  )    t 1  ( a )    JOIN    ( VALUES    1  0  ,     1  1  )    t 2  ( b )    ON   a    >     1  \"  ,     \" VALUES    (  2  )  ,     (  2  )  \"  )  ;", "assertQuery (  \" SELECT   b   FROM    ( VALUES    1  ,     2  )    t 1  ( a )    JOIN    ( VALUES    1  0  ,     1  1  )    t 2  ( b )    ON   b    >     1  0  \"  ,     \" VALUES    (  1  1  )  ,     (  1  1  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinUsingSymbolsFromJustOneSideOfJoin"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    *    FROM    ( lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey )    x \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithAlias"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  \" SELECT   count (  *  )     >     0    FROM   nation   JOIN   region   ON   CAST (  ( CASE   WHEN    ( TRUE   IS   NOT   NULL )    THEN    ' a '    ELSE    ' a '    END )    AS   char (  1  )  )     =    CAST (  ' a '    AS   char (  2  )  )  \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    BOOLEAN )  . row ( false )  . build (  )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithCanonicalizedConstantFalseExpressionWithCoercion"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   count (  *  )     >     0    FROM   nation   JOIN   region   ON   CAST (  ( CASE   WHEN    ( TRUE   IS   NOT   NULL )    THEN    '  1  .  2  '    ELSE    '  1  .  2  '    END )    AS   real )     =    CAST (  1  .  2    AS   decimal (  2  ,  1  )  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithCanonicalizedConstantTrueExpressionWithCoercion"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   SUM ( custkey )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    CAST ( orders . orderkey   AS   BIGINT )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithComplexExpressions"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   SUM ( custkey )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    CASE   WHEN   orders . custkey    =     1    and   orders . orderstatus    =     ' F '    THEN   orders . orderkey   ELSE   NULL   END \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithComplexExpressions2"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   SUM ( custkey )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    +     1     =    orders . orderkey    +     1  \"  ,     \" SELECT   SUM ( custkey )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey    \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithComplexExpressions3"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND    1  2  3     =     1  2  3  \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithConstantExpression"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  \" SELECT   count (  *  )     >     0    FROM   nation   JOIN   region   ON    ( cast (  ' a '    AS   char (  1  )  )     =    CAST (  ' a '    AS   char (  2  )  )  )  \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    BOOLEAN )  . row ( false )  . build (  )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithConstantFalseExpressionWithCoercion"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  (  (  (  (  \" SELECT \\ n \"     +     \"       a . orderstatus \\ n \"  )     +     \"        ,    a . clerk \\ n \"  )     +     \" FROM    (  \\ n \"  )     +     \"       SELECT   DISTINCT   orderstatus ,    clerk   FROM   orders \\ n \"  )     +     \"  )    a \\ n \"  )     +     \" INNER   JOIN    (  \\ n \"  )     +     \"       SELECT   DISTINCT   orderstatus ,    clerk   FROM   orders \\ n \"  )     +     \"  )    b \\ n \"  )     +     \" ON \\ n \"  )     +     \"       a . orderstatus    =    b . orderstatus \\ n \"  )     +     \"       and   a . clerk    =    b . clerk \\ n \"  )     +     \" where   a . orderstatus    =     \\  ' F \\  '  \\ n \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithConstantPredicatePushDown"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   count (  *  )     >     0    FROM   nation   JOIN   region   ON    ( cast (  1  .  2    AS   real )     =    CAST (  1  .  2    AS   decimal (  2  ,  1  )  )  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithConstantTrueExpressionWithCoercion"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"             SELECT   a ,    nullif ( a ,     1  )  \\ n \"  )     +     \"             FROM    ( VALUES    1  )    w ( a )  \\ n \"  )     +     \"  )    t ( a , b )  \\ n \"  )     +     \" JOIN    ( VALUES    1  )    u ( x )    ON   t . a    =    u . x \"  )  )  ,     \" SELECT    1  ,    NULL ,     1  \"  )  ;", "assertQuery (  (  \"  \"     +     (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"             SELECT   a ,    contains ( array [  2  ,    null ]  ,    a )  \\ n \"  )     +     \"             FROM    ( VALUES    1  )    w ( a )  \\ n \"  )     +     \"  )    t ( a , b )  \\ n \"  )     +     \" JOIN    ( VALUES    1  )    u ( x )    ON   t . a    =    u . x \\ n \"  )  )  ,     \" SELECT    1  ,    NULL ,     1  \"  )  ;", "assertQuery (  (  \"  \"     +     (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"             SELECT   a ,    array [ null ]  [ a ]  \\ n \"  )     +     \"             FROM    ( VALUES    1  )    w ( a )  \\ n \"  )     +     \"  )    t ( a , b )  \\ n \"  )     +     \" JOIN    ( VALUES    1  )    u ( x )    ON   t . a    =    u . x \"  )  )  ,     \" SELECT    1  ,    NULL ,     1  \"  )  ;", "assertQuery (  (  \"  \"     +     (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"             SELECT   a ,    try ( a    /     0  )  \\ n \"  )     +     \"             FROM    ( VALUES    1  )    w ( a )  \\ n \"  )     +     \"  )    t ( a , b )  \\ n \"  )     +     \" JOIN    ( VALUES    1  )    u ( x )    ON   t . a    =    u . x \"  )  )  ,     \" SELECT    1  ,    NULL ,     1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithExpressionsThatMayReturnNull"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   orders . custkey    =     1    AND   lineitem . orderkey    =     1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithFullyPushedDownJoinClause"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   n . nationkey ,    r . regionkey   FROM   region   r   JOIN   nation   n   ON   n . regionkey    =    r . regionkey   AND   n . name    >    r . name   AND   r . regionkey    =     0  \"  )  ;", "assertQuery (  \" SELECT   l . suppkey ,    n . nationkey ,    l . partkey ,    n . regionkey   FROM   nation   n   JOIN   lineitem   l   ON   l . suppkey    =    n . nationkey   AND   l . partkey    >    n . regionkey \"  )  ;", "assertQuery (  \" SELECT   b   FROM   nation   n ,     ( VALUES    (  0  ,    CAST (  -  1    AS   BIGINT )  )  ,     (  0  ,    NULL )  ,     (  0  ,    CAST (  0    AS   BIGINT )  )  )    t ( a ,    b )    WHERE   n . regionkey    +     1  0  0     >    t . b   AND   n . nationkey    =    t . a \"  ,     \" VALUES    -  1  ,     0  \"  )  ;", "assertQuery (  \" SELECT   b   FROM   nation   n ,     ( VALUES    (  0  ,    NULL )  ,     (  0  ,    CAST (  -  1    AS   BIGINT )  )  ,     (  0  ,    CAST (  0    AS   BIGINT )  )  )    t ( a ,    b )    WHERE   n . regionkey    +     1  0  0     >    t . b   AND   n . nationkey    =    t . a \"  ,     \" VALUES    -  1  ,     0  \"  )  ;", "assertQuery (  \" SELECT   b   FROM   nation   n ,     ( VALUES    (  0  ,    NULL )  ,     (  0  ,    NULL )  ,     (  0  ,    CAST (  -  1    AS   BIGINT )  )  ,     (  0  ,    NULL )  )    t ( a ,    b )    WHERE   n . regionkey    +     1  0  0     >    t . b   AND   n . nationkey    =    t . a \"  ,     \" VALUES    -  1  \"  )  ;", "assertQuery (  \" SELECT   b   FROM   nation   n ,     ( VALUES    (  0  ,    NULL )  )    t ( a ,    b )    WHERE   n . regionkey    +     1  0  0     >    t . b   AND   n . nationkey    =    t . a \"  ,     \" SELECT    1    WHERE   FALSE \"  )  ;", "assertQuery (  \" SELECT   n . nationkey ,    r . regionkey   FROM   nation   n   JOIN   region   r   ON   n . regionkey    =    r . regionkey   AND   length ( n . name )     >    length ( substr ( r . name ,     5  )  )  \"  )  ;", "assertQuery (  (  \" SELECT    *    FROM    \"     +     (  (  \"  ( VALUES    (  1  ,  1  )  ,  (  2  ,  1  )  )    t 1  ( a , b )  ,     \"     +     \"  ( VALUES    (  1  ,  1  )  ,  (  1  ,  2  )  ,  (  2  ,  1  )  )    t 2  ( x , y )     \"  )     +     \" WHERE   a = x   and   b >  = y \"  )  )  ,     \" VALUES    (  1  ,  1  ,  1  ,  1  )  ,     (  2  ,  1  ,  2  ,  1  )  \"  )  ;", "assertQuery (  (  \" SELECT    *    FROM    \"     +     (  (  \"  ( VALUES    (  1  ,  1  )  ,  (  2  ,  1  )  )    t 1  ( a , b )  ,     \"     +     \"  ( VALUES    (  1  ,  1  )  ,  (  1  ,  2  )  ,  (  2  ,  1  )  )    t 2  ( x , y )     \"  )     +     \" WHERE   a = x   and   b > y \"  )  )  ,     \" SELECT    1    WHERE   FALSE \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithGreaterThanInJoinClause"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT    \"     +     (  (  (  (  (  (  (  (  (  \"       b . orderkey ,     \"     +     \"       b . custkey ,     \"  )     +     \"       a . custkey    \"  )     +     \" FROM    (     \"  )     +     \"       SELECT   custkey \"  )     +     \"       FROM   orders    \"  )     +     \"       GROUP   BY   custkey \"  )     +     \"  )    a    \"  )     +     \" JOIN   orders   b    \"  )     +     \"       ON   a . custkey    =    b . custkey    \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithGroupByAsProbe"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "QueryTemplate . Parameter   type    =    QueryTemplate . parameter (  \" type \"  )  . of (  \"  \"  )  ;", "QueryTemplate . Parameter   condition    =    QueryTemplate . parameter (  \" condition \"  )  . of (  \" true \"  )  ;", "QueryTemplate   queryTemplate    =    QueryTemplate . queryTemplate (  \" SELECT    *    FROM    ( VALUES    1  ,  2  ,  3  ,  4  )    t ( x )     % type %    JOIN    ( VALUES    1  ,  2  ,  3  ,  5  )    t 2  ( y )    ON    % condition %  \"  ,    type ,    condition )  ;", "assery ( queryTemplate . replace ( condition . of (  \"  ( x + y   in    ( VALUES    4  )  )  \"  )  )  ,     \" VALUES    (  1  ,  3  )  ,     (  2  ,  2  )  ,     (  3  ,  1  )  \"  )  ;", "assery ( queryTemplate . replace ( condition . of (  \"  ( x + y   in    ( VALUES    4  )  )    AND    ( x * y   in    ( VALUES    4  ,  5  )  )  \"  )  )  ,     \" VALUES    (  2  ,  2  )  \"  )  ;", "assery ( queryTemplate . replace ( condition . of (  \"  ( x + y   in    ( VALUES    4  ,  5  )  )    AND    ( x * y   IN    ( VALUES    4  ,  5  )  )  \"  )  )  ,     \" VALUES    (  4  ,  1  )  ,     (  2  ,  2  )  \"  )  ;", "assery ( queryTemplate . replace ( condition . of (  \"  ( x + y   in    ( VALUES    4  ,  5  )  )    AND    ( x   in    ( VALUES    4  ,  5  )  )     !  =     ( y   in    ( VALUES    4  ,  5  )  )  \"  )  )  ,     \" VALUES    (  4  ,  1  )  \"  )  ;", "for    ( QueryTemplate . Parameter   joinType    :    type . of (  \" left \"  ,     \" right \"  ,     \" full \"  )  )     {", "asseryFails ( queryTemplate . replace ( joinType ,    condition . of (  \"  ( x + y   in    ( VALUES    4  ,  5  )  )    AND    ( x   in    ( VALUES    4  ,  5  )  )     !  =     ( y   in    ( VALUES    4  ,  5  )  )  \"  )  )  ,     \"  .  * IN   with   subquery   predicate   in   join   condition   is   not   supported \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["testJoinWithInSubqueryToBeExecutedAsPostJoinFilter"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  \" SELECT   COUNT (  *  )  \\ n \"     +     \" FROM   orders \\ n \"  )     +     \" JOIN   lineitem \\ n \"  )     +     \" ON   CAST ( orders . orderkey   AS   VARCHAR )     =    CAST ( lineitem . orderkey   AS   VARCHAR )  \\ n \"  )     +     \" WHERE   orders . orderkey    =     1    AND   lineitem . orderkey    =     2  \\ n \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithInferredFalseJoinClause"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   orders . orderkey    =     2  \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithLeftConstantEquality"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   n . nationkey ,    r . regionkey   FROM   region   r   JOIN   nation   n   ON   n . regionkey    =    r . regionkey   AND   n . name    <    r . name \"  )  ;", "assertQuery (  \" SELECT   l . suppkey ,    n . nationkey ,    l . partkey ,    n . regionkey   FROM   nation   n   JOIN   lineitem   l   ON   l . suppkey    =    n . nationkey   AND   l . partkey    <    n . regionkey \"  )  ;", "assertQuery (  \" SELECT   b   FROM   nation   n ,     ( VALUES    (  0  ,    CAST (  -  1    AS   BIGINT )  )  ,     (  0  ,    NULL )  ,     (  0  ,    CAST (  0    AS   BIGINT )  )  )    t ( a ,    b )    WHERE   n . regionkey    -     1  0  0     <    t . b   AND   n . nationkey    =    t . a \"  ,     \" VALUES    -  1  ,     0  \"  )  ;", "assertQuery (  \" SELECT   b   FROM   nation   n ,     ( VALUES    (  0  ,    NULL )  ,     (  0  ,    CAST (  -  1    AS   BIGINT )  )  ,     (  0  ,    CAST (  0    AS   BIGINT )  )  )    t ( a ,    b )    WHERE   n . regionkey    -     1  0  0     <    t . b   AND   n . nationkey    =    t . a \"  ,     \" VALUES    -  1  ,     0  \"  )  ;", "assertQuery (  \" SELECT   b   FROM   nation   n ,     ( VALUES    (  0  ,    NULL )  ,     (  0  ,    NULL )  ,     (  0  ,    CAST (  -  1    AS   BIGINT )  )  ,     (  0  ,    NULL )  )    t ( a ,    b )    WHERE   n . regionkey    -     1  0  0     <    t . b   AND   n . nationkey    =    t . a \"  ,     \" VALUES    -  1  \"  )  ;", "assertQuery (  \" SELECT   b   FROM   nation   n ,     ( VALUES    (  0  ,    NULL )  )    t ( a ,    b )    WHERE   n . regionkey    -     1  0  0     <    t . b   AND   n . nationkey    =    t . a \"  ,     \" SELECT    1    WHERE   FALSE \"  )  ;", "assertQuery (  \" SELECT   n . nationkey ,    r . regionkey   FROM   nation   n   JOIN   region   r   ON   n . regionkey    =    r . regionkey   AND   length ( n . name )     <    length ( substr ( r . name ,     5  )  )  \"  )  ;", "assertQuery (  (  \" SELECT    *    FROM    \"     +     (  (  \"  ( VALUES    (  1  ,  1  )  ,  (  2  ,  1  )  )    t 1  ( a , b )  ,     \"     +     \"  ( VALUES    (  1  ,  1  )  ,  (  1  ,  2  )  ,  (  2  ,  1  )  )    t 2  ( x , y )     \"  )     +     \" WHERE   a = x   and   b <  = y \"  )  )  ,     \" VALUES    (  1  ,  1  ,  1  ,  1  )  ,     (  1  ,  1  ,  1  ,  2  )  ,     (  2  ,  1  ,  2  ,  1  )  \"  )  ;", "assertQuery (  (  \" SELECT    *    FROM    \"     +     (  (  \"  ( VALUES    (  1  ,  1  )  ,  (  2  ,  1  )  )    t 1  ( a , b )  ,     \"     +     \"  ( VALUES    (  1  ,  1  )  ,  (  1  ,  2  )  ,  (  2  ,  1  )  )    t 2  ( x , y )     \"  )     +     \" WHERE   a = x   and   b < y \"  )  )  ,     \" VALUES    (  1  ,  1  ,  1  ,  2  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithLessThanInJoinClause"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   o . orderkey ,    o . orderdate ,    l . shipdate   FROM   orders   o   JOIN   lineitem   l   ON   l . orderkey    =    o . orderkey   AND   l . shipdate    <    o . orderdate    +    INTERVAL    '  1  0  '    DAY \"  ,     \" SELECT   o . orderkey ,    o . orderdate ,    l . shipdate   FROM   orders   o   JOIN   lineitem   l   ON   l . orderkey    =    o . orderkey   AND   l . shipdate    <    DATEADD (  ' DAY '  ,     1  0  ,    o . orderdate )  \"  )  ;", "assertQuery (  \" SELECT   o . orderkey ,    o . orderdate ,    l . shipdate   FROM   lineitem   l   JOIN   orders   o   ON   l . orderkey    =    o . orderkey   AND   l . shipdate    <    DATE _ ADD (  ' DAY '  ,     1  0  ,    o . orderdate )  \"  ,     \" SELECT   o . orderkey ,    o . orderdate ,    l . shipdate   FROM   orders   o   JOIN   lineitem   l   ON   l . orderkey    =    o . orderkey   AND   l . shipdate    <    DATEADD (  ' DAY '  ,     1  0  ,    o . orderdate )  \"  )  ;", "assertQuery (  \" SELECT   o . orderkey ,    o . orderdate ,    l . shipdate   FROM   orders   o   JOIN   lineitem   l   ON   o . orderkey = l . orderkey   AND   o . orderdate    +    INTERVAL    '  2  '    DAY    <  =    l . shipdate   AND   l . shipdate    <    o . orderdate    +    INTERVAL    '  7  '    DAY \"  ,     \" SELECT   o . orderkey ,    o . orderdate ,    l . shipdate   FROM   orders   o   JOIN   lineitem   l   ON   o . orderkey = l . orderkey   AND   DATEADD (  ' DAY '  ,     2  ,    o . orderdate )     <  =    l . shipdate   AND   l . shipdate    <    DATEADD (  ' DAY '  ,     7  ,    o . orderdate )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithLessThanOnDatesInJoinClause"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   orderstatus   FROM   lineitem   JOIN    ( SELECT   DISTINCT   orderkey ,    orderstatus   FROM   orders )    T   on   lineitem . orderkey    =    T . orderkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithMultiFieldGroupBy"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "QueryTemplate . Parameter   type    =    QueryTemplate . parameter (  \" type \"  )  . of (  \"  \"  )  ;", "QueryTemplate . Parameter   condition    =    QueryTemplate . parameter (  \" condition \"  )  . of (  \" true \"  )  ;", "QueryTemplate   queryTemplate    =    QueryTemplate . queryTemplate (  \" SELECT    *    FROM    ( VALUES    1  ,  2  ,  3  ,  4  )    t ( x )     % type %    JOIN    ( VALUES    1  ,  2  ,  3  ,  5  )    t 2  ( y )    ON    % condition %  \"  ,    type ,    condition )  ;", "QueryTemplate . Parameter   twoDuplicatedInSubqCondition    =    condition . of (  \"  ( x   in    ( VALUES    1  ,  2  ,  3  )  )     =     ( y   in    ( VALUES    1  ,  2  ,  3  )  )    AND    ( x   in    ( VALUES    1  ,  2  ,  4  )  )     =     ( y   in    ( VALUES    1  ,  2  ,  4  )  )  \"  )  ;", "assertQuery ( queryTemplate . replace ( twoDuplicatedInSubqCondition )  ,     \" VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  ,     (  2  ,  2  )  ,     (  2  ,  1  )  ,     (  3  ,  3  )  \"  )  ;", "assertQuery ( queryTemplate . replace ( condition . of (  \"  ( x   in    ( VALUES    1  ,  2  )  )     =     ( y   in    ( VALUES    1  ,  2  )  )    AND    ( x   in    ( VALUES    1  )  )     =     ( y   in    ( VALUES    3  )  )  \"  )  )  ,     \" VALUES    (  2  ,  2  )  ,     (  2  ,  1  )  ,     (  3  ,  5  )  ,     (  4  ,  5  )  \"  )  ;", "assertQuery ( queryTemplate . replace ( condition . of (  \"  ( x   in    ( VALUES    1  ,  2  )  )     =     ( y   in    ( VALUES    1  ,  2  )  )    AND    ( x   in    ( VALUES    1  )  )     !  =     ( y   in    ( VALUES    3  )  )  \"  )  )  ,     \" VALUES    (  1  ,  2  )  ,     (  1  ,  1  )  ,     (  3  ,     3  )  ,     (  4  ,  3  )  \"  )  ;", "assertQuery ( queryTemplate . replace ( condition . of (  \"  ( x   in    ( VALUES    1  )  )     =     ( y   in    ( VALUES    1  )  )    AND    ( x   in    ( SELECT    2  )  )     !  =     ( y   in    ( SELECT    2  )  )  \"  )  )  ,     \" VALUES    (  2  ,  3  )  ,     (  2  ,  5  )  ,     (  3  ,     2  )  ,     (  4  ,  2  )  \"  )  ;", "QueryTemplate . Parameter   left    =    type . of (  \" left \"  )  ;", "QueryTemplate . Parameter   right    =    type . of (  \" right \"  )  ;", "QueryTemplate . Parameter   full    =    type . of (  \" full \"  )  ;", "for    ( QueryTemplate . Parameter   joinType    :    ImmutableList . of ( left ,    right ,    full )  )     {", "for    ( String   joinCondition    :    ImmutableList . of (  \" x   IN    ( VALUES    1  )  \"  ,     \" y   in    ( VALUES    1  )  \"  )  )     {", "assertQueryFails ( queryTemplate . replace ( joinType ,    condition . of ( joinCondition )  )  ,     \"  .  * IN   with   subquery   predicate   in   join   condition   is   not   supported \"  )  ;", "}", "}", "assertQuery ( queryTemplate . replace ( left ,    twoDuplicatedInSubqCondition )  ,     \" VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  ,     (  2  ,  2  )  ,     (  2  ,  1  )  ,     (  3  ,  3  )  ,     (  4  ,    null )  \"  )  ;", "assertQuery ( queryTemplate . replace ( right ,    twoDuplicatedInSubqCondition )  ,     \" VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  ,     (  2  ,  2  )  ,     (  2  ,  1  )  ,     (  3  ,  3  )  ,     ( null ,     5  )  \"  )  ;", "assertQuery ( queryTemplate . replace ( full ,    twoDuplicatedInSubqCondition )  ,     \" VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  ,     (  2  ,  2  )  ,     (  2  ,  1  )  ,     (  3  ,  3  )  ,     (  4  ,    null )  ,     ( null ,     5  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithMultipleInSubqueryClauses"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   count (  *  )    FROM   lineitem   l   JOIN   nation   n   ON   l . suppkey    %     5     =    n . nationkey    %     5    AND   l . partkey    %     3     <    n . regionkey   AND   l . partkey    %     3     +     1     <    n . regionkey   AND   l . partkey    %     3     +     2     <    n . regionkey \"  )  ;", "assertQuery (  \" SELECT   count (  *  )    FROM   lineitem   l   JOIN   nation   n   ON   l . suppkey    %     5     =    n . nationkey    %     5    AND   l . partkey    %     3     +     2     <    n . regionkey   AND   l . partkey    %     3     +     1     <    n . regionkey   AND   l . partkey    %     3     <    n . regionkey \"  )  ;", "assertQuery (  \" SELECT   count (  *  )    FROM   lineitem   l   JOIN   nation   n   ON   l . suppkey    %     5     =    n . nationkey    %     5    AND   l . partkey    %     3     >    n . regionkey   AND   l . partkey    %     3     +     1     >    n . regionkey   AND   l . partkey    %     3     +     2     >    n . regionkey \"  )  ;", "assertQuery (  \" SELECT   count (  *  )    FROM   lineitem   l   JOIN   nation   n   ON   l . suppkey    %     5     =    n . nationkey    %     5    AND   l . partkey    %     3     +     2     >    n . regionkey   AND   l . partkey    %     3     +     1     >    n . regionkey   AND   l . partkey    %     3     >    n . regionkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithMultipleLessThanPredicatesDifferentOrders"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "QueryTemplate . Parameter   type    =    QueryTemplate . parameter (  \" type \"  )  . of (  \"  \"  )  ;", "QueryTemplate . Parameter   condition    =    QueryTemplate . parameter (  \" condition \"  )  ;", "QueryTemplate   queryTemplate    =    QueryTemplate . queryTemplate (  \" SELECT    *    FROM    ( VALUES    1  ,  2  ,  3  ,  4  )    t ( x )     % type %    JOIN    ( VALUES    1  ,  2  ,  3  ,  5  )    t 2  ( y )    ON    % condition %  \"  ,    type ,    condition )  ;", "QueryTemplate . Parameter   multipleScalarJoinCondition    =    condition . of (  \"  ( x    =     ( VALUES    1  )  )    AND    ( y    =     ( VALUES    2  )  )    AND    ( x   in    ( VALUES    2  )  )     =     ( y   in    ( VALUES    1  )  )  \"  )  ;", "assery ( queryTemplate . replace ( multipleScalarJoinCondition )  ,     \" VALUES    (  1  ,  2  )  \"  )  ;", "assery ( queryTemplate . replace ( condition . of (  \"  ( x    =     ( VALUES    2  )  )     =     ( y    >     ( VALUES    0  )  )    AND    ( x    >     ( VALUES    1  )  )     =     ( y    <     ( VALUES    3  )  )  \"  )  )  ,     \" VALUES    (  2  ,  2  )  ,     (  2  ,  1  )  \"  )  ;", "assery ( queryTemplate . replace ( condition . of (  \"  ( x    =     ( VALUES    1  )  )     =     ( y    =     ( VALUES    1  )  )    AND    ( x    =     ( SELECT    2  )  )     !  =     ( y    =     ( SELECT    3  )  )  \"  )  )  ,     \" VALUES    (  2  ,  5  )  ,     (  2  ,  2  )  ,     (  3  ,  3  )  ,     (  4  ,  3  )  \"  )  ;", "assery ( queryTemplate . replace ( type . of (  \" left \"  )  ,    multipleScalarJoinCondition )  ,     \" VALUES    (  1  ,  2  )  ,     (  2  , null )  ,     (  3  ,    null )  ,     (  4  ,    null )  \"  )  ;", "assery ( queryTemplate . replace ( type . of (  \" right \"  )  ,    multipleScalarJoinCondition )  ,     \" VALUES    (  1  ,  2  )  ,     ( null ,  1  )  ,     ( null ,     3  )  ,     ( null ,     5  )  \"  )  ;", "assery ( queryTemplate . replace ( type . of (  \" full \"  )  ,    multipleScalarJoinCondition )  ,     \" VALUES    (  1  ,  2  )  ,     (  2  , null )  ,     (  3  ,    null )  ,     (  4  ,    null )  ,     ( null ,  1  )  ,     ( null ,     3  )  ,     ( null ,     5  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithMultipleScalarSubqueryClauses"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedRow   actualRow    =    getOnlyElement ( computeActual (  (  \" SELECT   count (  *  )    FROM    \"     +     (  \" customer   c 1    JOIN   customer   c 2    ON   c 1  . nationkey = c 2  . nationkey    \"     +     \" WHERE   c 1  . custkey    -    RANDOM ( CAST ( c 1  . custkey   AS   BIGINT )  )     <    c 2  . custkey \"  )  )  )  . getMaterializedRows (  )  )  ;", "assertEquals ( actualRow . getFieldCount (  )  ,     1  )  ;", "long   actualCount    =     (  ( Long )     ( actualRow . getField (  0  )  )  )  ;", "MaterializedRow   expectedAtLeastRow    =    getOnlyElement ( computeActual (  (  \" SELECT   count (  *  )    FROM    \"     +     (  \" customer   c 1    JOIN   customer   c 2    ON   c 1  . nationkey = c 2  . nationkey    \"     +     \" WHERE   c 1  . custkey    <    c 2  . custkey \"  )  )  )  . getMaterializedRows (  )  )  ;", "assertEquals ( expectedAtLeastRow . getFieldCount (  )  ,     1  )  ;", "long   expectedAtLeastCount    =     (  ( Long )     ( expectedAtLeastRow . getField (  0  )  )  )  ;", "assertTrue (  ( actualCount    >    expectedAtLeastCount )  )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithNonDeterministicLessThan"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   orders . custkey    =     1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithNonJoinExpression"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   nation   a   JOIN   nation   b   on   not    (  ( a . nationkey    +    b . nationkey )     <  >    b . nationkey )  \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   nation   a   JOIN   nation   b   on   not    ( a . nationkey    <  >    b . nationkey )  \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   nation   a   JOIN   nation   b   on   not    ( a . nationkey    =    b . nationkey )  \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   nation   a   JOIN   nation   b   on   not    ( not   CAST ( a . nationkey   AS   boolean )  )  \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   nation   a   JOIN   nation   b   on   not   not   not    ( a . nationkey    =    b . nationkey )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithNormalization"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT   CASE   WHEN   orderkey    %     3     =     0    THEN   NULL   ELSE   orderkey   END   AS   orderkey \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     5  1  2     =     0  \\ n \"  )     +     \"  )    AS   lineitem    \\ n \"  )     +     \" JOIN    (  \\ n \"  )     +     \"       SELECT   CASE   WHEN   orderkey    %     2     =     0    THEN   NULL   ELSE   orderkey   END   AS   orderkey \\ n \"  )     +     \"       FROM   orders \\ n \"  )     +     \"       WHERE   custkey    %     5  1  2     =     0  \\ n \"  )     +     \"  )    AS   orders \\ n \"  )     +     \" ON   lineitem . orderkey    =    orders . orderkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithNullValues"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   COUNT (  *  )     \"     +     (  (  (  \" FROM    ( SELECT    *    FROM   lineitem   WHERE   orderkey    %     1  6     =     0    AND   partkey    %     2     =     0  )    lineitem    \"     +     \" JOIN    ( SELECT    *    FROM   orders   WHERE   orderkey    %     1  6     =     0    AND   custkey    %     2     =     0  )    orders    \"  )     +     \" ON   lineitem . orderkey    %     8     =    orders . orderkey    %     8    AND   lineitem . linenumber    %     2     =     0     \"  )     +     \" AND   orders . custkey    %     8     <     7    AND   lineitem . suppkey    %     1  0     <    orders . custkey    %     7    AND   lineitem . suppkey    %     7     >    orders . custkey    %     7  \"  )  )  )  ;", "assertQuery (  (  \" SELECT   COUNT (  *  )     \"     +     (  (  (  \" FROM    ( SELECT    *    FROM   lineitem   WHERE   orderkey    %     1  6     =     0    AND   partkey    %     2     =     0  )    lineitem    \"     +     \" JOIN    ( SELECT    *    FROM   orders   WHERE   orderkey    %     1  6     =     0    AND   custkey    %     2     =     0  )    orders    \"  )     +     \" ON   lineitem . orderkey    %     8     =    orders . orderkey    %     8    AND   lineitem . linenumber    %     2     =     0     \"  )     +     \" AND   orders . custkey    %     8     <    lineitem . linenumber    %     2    AND   lineitem . suppkey    %     1  0     <    orders . custkey    %     7    AND   lineitem . suppkey    %     7     >    orders . custkey    %     7  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithRangePredicatesinJoinClause"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   orders . orderkey    =    lineitem . orderkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithReversedComparison"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =     2  \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithRightConstantEquality"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   count (  )    FROM   nation   a \"     +     (  \"    INNER   JOIN   nation   b   ON   a . name    =     ( SELECT   max ( name )    FROM   nation )  \"     +     \"    INNER   JOIN   nation   c   ON   c . name    =    split _ part ( b . name ,  '  <  '  ,  2  )  \"  )  )  ,     \" SELECT    0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithScalarSubqueryInOnClause"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "QueryTemplate . Parameter   type    =    QueryTemplate . parameter (  \" type \"  )  . of (  \"  \"  )  ;", "QueryTemplate . Parameter   condition    =    QueryTemplate . parameter (  \" condition \"  )  ;", "QueryTemplate   queryTemplate    =    QueryTemplate . queryTemplate (  \" SELECT    *    FROM    ( VALUES    1  ,  2  ,  3  ,  4  )    t ( x )     % type %    JOIN    ( VALUES    1  ,  2  ,  3  ,  5  )    t 2  ( y )    ON    % condition %  \"  ,    type ,    condition )  ;", "QueryTemplate . Parameter   xPlusYEqualsSubqueryJoinCondition    =    condition . of (  \"  ( x + y    =     ( SELECT    4  )  )  \"  )  ;", "assery ( queryTemplate . replace ( xPlusYEqualsSubqueryJoinCondition )  ,     \" VALUES    (  1  ,  3  )  ,     (  2  ,  2  )  ,     (  3  ,  1  )  \"  )  ;", "assery ( queryTemplate . replace ( condition . of (  \"  ( x + y    =     ( VALUES    4  )  )    AND    ( x * y    =     ( VALUES    4  )  )  \"  )  )  ,     \" VALUES    (  2  ,  2  )  \"  )  ;", "assery ( queryTemplate . replace ( condition . of (  \" x + y    >     ( VALUES    3  )    AND    ( x    =     ( VALUES    3  )  )     !  =     ( y    =     ( VALUES    3  )  )  \"  )  )  ,     \" VALUES    (  3  ,  1  )  ,     (  3  ,  2  )  ,     (  1  ,  3  )  ,     (  2  ,  3  )  ,     (  4  ,  3  )  ,     (  3  ,  5  )  \"  )  ;", "assery ( queryTemplate . replace ( condition . of (  \" x + y    >  =     ( VALUES    5  )    AND    ( x    =     ( VALUES    3  )  )     !  =     ( y    =     ( VALUES    3  )  )  \"  )  )  ,     \" VALUES    (  3  ,  2  )  ,     (  2  ,  3  )  ,     (  4  ,  3  )  ,     (  3  ,  5  )  \"  )  ;", "assery ( queryTemplate . replace ( condition . of (  \" x + y    >  =     ( VALUES    3  )    AND    ( x    =     ( VALUES    5  )  )     !  =     ( y    =     ( VALUES    3  )  )  \"  )  )  ,     \" VALUES    (  1  ,  3  )  ,     (  2  ,  3  )  ,     (  3  ,  3  )  ,     (  4  ,  3  )  \"  )  ;", "assery ( queryTemplate . replace ( condition . of (  \" x + y    >  =     ( VALUES    3  )    AND    ( x    =     ( VALUES    3  )  )     !  =     ( y    =     ( VALUES    5  )  )  \"  )  )  ,     \" VALUES    (  3  ,  1  )  ,     (  3  ,  2  )  ,     (  3  ,  3  )  ,     (  1  ,  5  )  ,     (  2  ,  5  )  ,     (  4  ,  5  )  \"  )  ;", "assery ( queryTemplate . replace ( condition . of (  \" x + y    >  =     ( VALUES    4  )    AND    ( x    =     ( VALUES    3  )  )     !  =     ( y    =     ( VALUES    5  )  )  \"  )  )  ,     \" VALUES    (  3  ,  1  )  ,     (  3  ,  2  )  ,     (  3  ,  3  )  ,     (  1  ,  5  )  ,     (  2  ,  5  )  ,     (  4  ,  5  )  \"  )  ;", "assery ( queryTemplate . replace ( type . of (  \" left \"  )  ,    xPlusYEqualsSubqueryJoinCondition )  ,     \" VALUES    (  1  ,  3  )  ,     (  2  ,  2  )  ,     (  3  ,  1  )  ,     (  4  ,    null )  \"  )  ;", "assery ( queryTemplate . replace ( type . of (  \" right \"  )  ,    xPlusYEqualsSubqueryJoinCondition )  ,     \" VALUES    (  1  ,  3  )  ,     (  2  ,  2  )  ,     (  3  ,  1  )  ,     ( null ,     5  )  \"  )  ;", "assery ( queryTemplate . replace ( type . of (  \" full \"  )  ,    xPlusYEqualsSubqueryJoinCondition )  ,     \" VALUES    (  1  ,  3  )  ,     (  2  ,  2  )  ,     (  3  ,  1  )  ,     (  4  ,    null )  ,     ( null ,     5  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithScalarSubqueryToBeExecutedAsPostJoinFilter"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "String   noOutputQuery    =     \" SELECT    1    WHERE   false \"  ;", "QueryTemplate . Parameter   type    =    QueryTemplate . parameter (  \" type \"  )  . of (  \"  \"  )  ;", "QueryTemplate . Parameter   condition    =    QueryTemplate . parameter (  \" condition \"  )  ;", "QueryTemplate   queryTemplate    =    QueryTemplate . queryTemplate (  (  (  \" SELECT    *    FROM    (  \"     +    noOutputQuery )     +     \"  )    t ( x )     % type %    JOIN    ( VALUES    1  )    t 2  ( y )    ON    % condition %  \"  )  ,    type )  ;", "QueryTemplate . Parameter   xPlusYEqualsSubqueryJoinCondition    =    condition . of (  \"  ( x + y    =     ( SELECT    4  )  )  \"  )  ;", "assertQuery ( queryTemplate . replace ( xPlusYEqualsSubqueryJoinCondition )  ,    noOutputQuery )  ;", "assertQuery ( queryTemplate . replace ( condition . of (  \"  ( x + y    =     ( VALUES    4  )  )    AND    ( x * y    =     ( VALUES    4  )  )  \"  )  )  ,    noOutputQuery )  ;", "assertQuery ( queryTemplate . replace ( xPlusYEqualsSubqueryJoinCondition ,    type . of (  \" left \"  )  )  ,    noOutputQuery )  ;", "assertQuery ( queryTemplate . replace ( xPlusYEqualsSubqueryJoinCondition ,    type . of (  \" right \"  )  )  ,     \" VALUES    ( null ,  1  )  \"  )  ;", "assertQuery ( queryTemplate . replace ( xPlusYEqualsSubqueryJoinCondition ,    type . of (  \" full \"  )  )  ,     \" VALUES    ( null ,  1  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithScalarSubqueryToBeExecutedAsPostJoinFilterWithEmptyInnerTable"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT    *  \\ n \"     +     (  (  \" FROM    ( VALUES    1  ,     2  )    a ( id )  \\ n \"     +     \" FULL   JOIN    ( VALUES    2  ,     3  )    b ( id )  \\ n \"  )     +     \" ON    ( array _ intersect ( array [ a . id ]  ,    array [ b . id ]  )     =    array [ a . id ]  )  \"  )  )  ,     \" VALUES    (  1  ,    null )  ,     (  2  ,     2  )  ,     ( null ,     3  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinWithStatefulFilterFunction"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    *    FROM    ( VALUES    0  ,     1  )    t 1  ( a )    JOIN    ( VALUES    1  0  ,     1  1  )    t 2  ( b )    ON   TRUE \"  ,     \" VALUES    (  0  ,     1  0  )  ,     (  0  ,     1  1  )  ,     (  1  ,     1  0  )  ,     (  1  ,     1  1  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( SELECT    1    WHERE   FALSE )    t 1  ( a )    JOIN    ( VALUES    1  0  ,     1  1  )    t 2  ( b )    ON   TRUE \"  ,     \" SELECT    1    WHERE   FALSE \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    0  ,     1  )    t 1  ( a )    JOIN    ( SELECT    1    WHERE   FALSE )    t 2  ( b )    ON   TRUE \"  ,     \" SELECT    1    WHERE   FALSE \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( SELECT    1    WHERE   FALSE )    t 1  ( a )    JOIN    ( SELECT    1    WHERE   FALSE )    t 2  ( b )    ON   TRUE \"  ,     \" SELECT    1    WHERE   FALSE \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    0  ,     1  )    t 1  ( a )    LEFT   JOIN    ( VALUES    1  0  ,     1  1  )    t 2  ( b )    ON   TRUE \"  ,     \" VALUES    (  0  ,     1  0  )  ,     (  0  ,     1  1  )  ,     (  1  ,     1  0  )  ,     (  1  ,     1  1  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( SELECT    1    WHERE   FALSE )    t 1  ( a )    LEFT   JOIN    ( VALUES    1  0  ,     1  1  )    t 2  ( b )    ON   TRUE \"  ,     \" SELECT    1    WHERE   FALSE \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    0  ,     1  )    t 1  ( a )    LEFT   JOIN    ( SELECT    1    WHERE   FALSE )    t 2  ( b )    ON   TRUE \"  ,     \" VALUES    (  0  ,    NULL )  ,     (  1  ,    NULL )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( SELECT    1    WHERE   FALSE )    t 1  ( a )    LEFT   JOIN    ( SELECT    1    WHERE   FALSE )    t 2  ( b )    ON   TRUE \"  ,     \" SELECT    1    WHERE   FALSE \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    0  ,     1  )    t 1  ( a )    RIGHT   JOIN    ( VALUES    1  0  ,     1  1  )    t 2  ( b )    ON   TRUE \"  ,     \" VALUES    (  0  ,     1  0  )  ,     (  0  ,     1  1  )  ,     (  1  ,     1  0  )  ,     (  1  ,     1  1  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( SELECT    1    WHERE   FALSE )    t 1  ( a )    RIGHT   JOIN    ( VALUES    1  0  ,     1  1  )    t 2  ( b )    ON   TRUE \"  ,     \" VALUES    ( NULL ,     1  0  )  ,     ( NULL ,     1  1  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    0  ,     1  )    t 1  ( a )    RIGHT   JOIN    ( SELECT    1    WHERE   FALSE )    t 2  ( b )    ON   TRUE \"  ,     \" SELECT    1    WHERE   FALSE \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( SELECT    1    WHERE   FALSE )    t 1  ( a )    RIGHT   JOIN    ( SELECT    1    WHERE   FALSE )    t 2  ( b )    ON   TRUE \"  ,     \" SELECT    1    WHERE   FALSE \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    0  ,     1  )    t 1  ( a )    FULL   JOIN    ( VALUES    1  0  ,     1  1  )    t 2  ( b )    ON   TRUE \"  ,     \" VALUES    (  0  ,     1  0  )  ,     (  0  ,     1  1  )  ,     (  1  ,     1  0  )  ,     (  1  ,     1  1  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( SELECT    1    WHERE   FALSE )    t 1  ( a )    FULL   JOIN    ( VALUES    1  0  ,     1  1  )    t 2  ( b )    ON   TRUE \"  ,     \" VALUES    ( NULL ,     1  0  )  ,     ( NULL ,     1  1  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    0  ,     1  )    t 1  ( a )    FULL   JOIN    ( SELECT    1    WHERE   FALSE )    t 2  ( b )    ON   TRUE \"  ,     \" VALUES    (  0  ,    NULL )  ,     (  1  ,    NULL )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( SELECT    1    WHERE   FALSE )    t 1  ( a )    FULL   JOIN    ( SELECT    1    WHERE   FALSE )    t 2  ( b )    ON   TRUE \"  ,     \" SELECT    1    WHERE   FALSE \"  )  ;", "}", "METHOD_END"], "methodName": ["testJoinsWithTrueJoinCondition"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   apply (  0  ,    x    -  >    x    +    c 1  )    FROM    ( VALUES    1  )    t ( c 1  )  \"  ,     \" VALUES    1  \"  )  ;", "assertQuery (  \" SELECT   apply (  0  ,    x    -  >    x    +    t . c 1  )    FROM    ( VALUES    1  )    t ( c 1  )  \"  ,     \" VALUES    1  \"  )  ;", "assertQuery (  \" SELECT   apply ( c 1  ,    x    -  >    x    +    c 2  )    FROM    ( VALUES    (  1  ,     2  )  ,     (  3  ,     4  )  ,     (  5  ,     6  )  )    t ( c 1  ,    c 2  )  \"  ,     \" VALUES    3  ,     7  ,     1  1  \"  )  ;", "assertQuery (  \" SELECT   apply ( c 1     +     1  0  ,    x    -  >    apply ( x    +     1  0  0  ,    y    -  >    c 1  )  )    FROM    ( VALUES    1  )    t ( c 1  )  \"  ,     \" VALUES    1  \"  )  ;", "assertQuery (  \" SELECT   apply ( c 1     +     1  0  ,    x    -  >    apply ( x    +     1  0  0  ,    y    -  >    t . c 1  )  )    FROM    ( VALUES    1  )    t ( c 1  )  \"  ,     \" VALUES    1  \"  )  ;", "assertQuery (  \" SELECT   apply ( CAST ( ROW (  1  0  )    AS   ROW ( x   INTEGER )  )  ,    r    -  >    r . x )  \"  ,     \" VALUES    1  0  \"  )  ;", "assertQuery (  \" SELECT   apply ( CAST ( ROW (  1  0  )    AS   ROW ( x   INTEGER )  )  ,    r    -  >    r . x )    FROM    ( VALUES    1  )    u ( x )  \"  ,     \" VALUES    1  0  \"  )  ;", "assertQuery (  \" SELECT   apply ( CAST ( ROW (  1  0  )    AS   ROW ( x   INTEGER )  )  ,    r    -  >    r . x )    FROM    ( VALUES    1  )    r ( x )  \"  ,     \" VALUES    1  0  \"  )  ;", "assertQuery (  \" SELECT   apply ( CAST ( ROW (  1  0  )    AS   ROW ( x   INTEGER )  )  ,    r    -  >    apply (  3  ,    y    -  >    y    +    r . x )  )    FROM    ( VALUES    1  )    u ( x )  \"  ,     \" VALUES    1  3  \"  )  ;", "assertQuery (  \" SELECT   apply ( CAST ( ROW (  1  0  )    AS   ROW ( x   INTEGER )  )  ,    r    -  >    apply (  3  ,    y    -  >    y    +    r . x )  )    FROM    ( VALUES    1  )    r ( x )  \"  ,     \" VALUES    1  3  \"  )  ;", "assertQuery (  \" SELECT   apply ( CAST ( ROW (  1  0  )    AS   ROW ( x   INTEGER )  )  ,    r    -  >    apply (  3  ,    y    -  >    y    +    r . x )  )    FROM    ( VALUES    ' a '  )    r ( x )  \"  ,     \" VALUES    1  3  \"  )  ;", "assertQuery (  \" SELECT   apply ( CAST ( ROW (  1  0  )    AS   ROW ( x   INTEGER )  )  ,    z    -  >    apply (  3  ,    y    -  >    y    +    r . x )  )    FROM    ( VALUES    1  )    r ( x )  \"  ,     \" VALUES    4  \"  )  ;", "assertQuery (  \" SELECT   apply (  1  ,    x    -  >    apply (  1  0  ,    y    -  >    x )  )    FROM    ( VALUES    1  0  0  0  )    t ( x )  \"  ,     \" VALUES    1  \"  )  ;", "assertQuery (  \" SELECT   apply (  1  ,    x    -  >    apply (  1  0  ,    y    -  >    x )  )    FROM    ( VALUES    ' abc '  )    t ( x )  \"  ,     \" VALUES    1  \"  )  ;", "assertQuery (  \" SELECT   apply (  1  ,    x    -  >    apply (  1  0  ,    y    -  >    apply (  1  0  0  ,    z    -  >    x )  )  )    FROM    ( VALUES    1  0  0  0  )    t ( x )  \"  ,     \" VALUES    1  \"  )  ;", "assertQuery (  \" SELECT   apply (  1  ,    x    -  >    apply (  1  0  ,    y    -  >    apply (  1  0  0  ,    z    -  >    x )  )  )    FROM    ( VALUES    ' abc '  )    t ( x )  \"  ,     \" VALUES    1  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES   true )    t ( x )    left   JOIN    ( VALUES    1  0  0  1  )    t 2  ( y )    ON    ( apply ( false ,    z    -  >    apply ( false ,    y    -  >    x )  )  )  \"  ,     \" SELECT   true ,     1  0  0  1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testLambdaCapture"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   apply ( sum ( x )  ,    i    -  >    i    *    i )    FROM    ( VALUES    1  ,     2  ,     3  ,     4  ,     5  )    t ( x )  \"  ,     \" SELECT    2  2  5  \"  )  ;", "assertQuery (  \" SELECT   apply ( x ,    i    -  >    i    -     1  )  ,    sum ( y )    FROM    ( VALUES    (  1  ,     1  0  )  ,     (  1  ,     2  0  )  ,     (  2  ,     5  0  )  )    t ( x , y )    GROUP   BY   x \"  ,     \" VALUES    (  0  ,     3  0  )  ,     (  1  ,     5  0  )  \"  )  ;", "assertQuery (  \" SELECT   x ,    apply ( sum ( y )  ,    i    -  >    i    *     1  0  )    FROM    ( VALUES    (  1  ,     1  0  )  ,     (  1  ,     2  0  )  ,     (  2  ,     5  0  )  )    t ( x , y )    GROUP   BY   x \"  ,     \" VALUES    (  1  ,     3  0  0  )  ,     (  2  ,     5  0  0  )  \"  )  ;", "assertQuery (  \" SELECT   apply (  8  ,    x    -  >    x    +     1  )    FROM    ( VALUES    (  1  ,     2  )  )    t ( x , y )    GROUP   BY   y \"  ,     \" SELECT    9  \"  )  ;", "assertQuery (  \" SELECT   apply ( CAST ( ROW (  1  )    AS   ROW ( someField   BIGINT )  )  ,    x    -  >    x . someField )    FROM    ( VALUES    (  1  ,  2  )  )    t ( x , y )    GROUP   BY   y \"  ,     \" SELECT    1  \"  )  ;", "assertQuery (  \" SELECT   apply ( sum ( x )  ,    x    -  >    x    *    x )    FROM    ( VALUES    1  ,     2  ,     3  ,     4  ,     5  )    t ( x )  \"  ,     \" SELECT    2  2  5  \"  )  ;", "assertQuery (  \" SELECT   apply ( sum ( x )  ,    x    -  >    apply ( x ,    x    -  >    x    *    x )  )    FROM    ( VALUES    1  ,     2  ,     3  ,     4  ,     5  )    t ( x )  \"  ,     \" SELECT    2  2  5  \"  )  ;", "}", "METHOD_END"], "methodName": ["testLambdaInAggregationContext"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   apply ( x ,    i    -  >    i    *    i )    FROM    ( SELECT    1  0    x )  \"  ,     \" SELECT    1  0  0  \"  )  ;", "assertQuery (  \" SELECT   apply (  ( SELECT    1  0  )  ,    i    -  >    i    *    i )  \"  ,     \" SELECT    1  0  0  \"  )  ;", "assertQuery (  \" SELECT   apply ( x ,    i    -  >    i    *    x )    FROM    ( SELECT    1  0    x )  \"  ,     \" SELECT    1  0  0  \"  )  ;", "assertQuery (  \" SELECT   apply ( x ,    y    -  >    y    *    x )    FROM    ( SELECT    1  0    x ,     3    y )  \"  ,     \" SELECT    1  0  0  \"  )  ;", "assertQuery (  \" SELECT   apply ( x ,    z    -  >    y    *    x )    FROM    ( SELECT    1  0    x ,     3    y )  \"  ,     \" SELECT    3  0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testLambdaInSubqueryContext"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    *    FROM   UNNEST ( transform ( sequence (  1  ,     5  )  ,    x    -  >    x    *    x )  )  \"  ,     \" SELECT    *    FROM    ( VALUES    1  ,     4  ,     9  ,     1  6  ,     2  5  )  \"  )  ;", "assertQuery (  \" SELECT   x [  5  ]    FROM    ( VALUES   transform ( sequence (  1  ,     5  )  ,    x    -  >    x    *    x )  )    t ( x )  \"  ,     \" SELECT    2  5  \"  )  ;", "}", "METHOD_END"], "methodName": ["testLambdaInValuesAndUnnest"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "String   longValues    =    IntStream . range (  0  ,     5  0  0  0  )  . mapToObj ( Integer :  : toString )  . collect ( Collectors . joining (  \"  ,     \"  )  )  ;", "assery (  (  (  \" SELECT   orderkey   FROM   orders   WHERE   orderkey   IN    (  \"     +    longValues )     +     \"  )  \"  )  )  ;", "assery (  (  (  \" SELECT   orderkey   FROM   orders   WHERE   orderkey   NOT   IN    (  \"     +    longValues )     +     \"  )  \"  )  )  ;", "assery (  (  (  \" SELECT   orderkey   FROM   orders   WHERE   orderkey   IN    ( mod (  1  0  0  0  ,    orderkey )  ,     \"     +    longValues )     +     \"  )  \"  )  )  ;", "assery (  (  (  \" SELECT   orderkey   FROM   orders   WHERE   orderkey   NOT   IN    ( mod (  1  0  0  0  ,    orderkey )  ,     \"     +    longValues )     +     \"  )  \"  )  )  ;", "String   arrayValues    =    IntStream . range (  0  ,     5  0  0  0  )  . mapToObj (  (    i )     -  >    String . format (  \" ARRAY [  % s ,     % s ,     % s ]  \"  ,    i ,     ( i    +     1  )  ,     ( i    +     2  )  )  )  . collect ( Collectors . joining (  \"  ,     \"  )  )  ;", "assery (  (  (  \" SELECT   ARRAY [  0  ,     0  ,     0  ]    in    ( ARRAY [  0  ,     0  ,     0  ]  ,     \"     +    arrayValues )     +     \"  )  \"  )  ,     \" values   true \"  )  ;", "assery (  (  (  \" SELECT   ARRAY [  0  ,     0  ,     0  ]    in    (  \"     +    arrayValues )     +     \"  )  \"  )  ,     \" values   false \"  )  ;", "}", "METHOD_END"], "methodName": ["testLargeIn"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   name   FROM   nation ,    LATERAL    ( SELECT    1    WHERE   false )  \"  ,     \" SELECT    1    WHERE   false \"  )  ;", "assertQuery (  \" SELECT   name   FROM   nation ,    LATERAL    ( SELECT    1  )  \"  ,     \" SELECT   name   FROM   nation \"  )  ;", "assertQuery (  \" SELECT   name   FROM   nation ,    LATERAL    ( SELECT    1    WHERE   name    =     ' ola '  )  \"  ,     \" SELECT    1    WHERE   false \"  )  ;", "assertQuery (  \" SELECT   nationkey ,    a   FROM   nation ,    LATERAL    ( SELECT   max ( region . name )    FROM   region   WHERE   region . regionkey    <  =    nation . regionkey )    t ( a )    ORDER   BY   nationkey   LIMIT    1  \"  ,     \" VALUES    (  0  ,     ' AFRICA '  )  \"  )  ;", "assertQuery (  \" SELECT   nationkey ,    a   FROM   nation ,    LATERAL    ( SELECT   region . name    |  |     '  _  '    FROM   region   WHERE   region . regionkey    =    nation . regionkey )    t ( a )    ORDER   BY   nationkey   LIMIT    1  \"  ,     \" VALUES    (  0  ,     ' AFRICA _  '  )  \"  )  ;", "assertQuery (  \" SELECT   nationkey ,    a ,    b ,    name   FROM   nation ,    LATERAL    ( SELECT   nationkey    +     2    AS   a )  ,    LATERAL    ( SELECT   a    *     -  1    AS   b )    ORDER   BY   b   LIMIT    1  \"  ,     \" VALUES    (  2  4  ,     2  6  ,     -  2  6  ,     ' UNITED   STATES '  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM   region   r ,    LATERAL    ( SELECT    *    FROM   nation )    n   WHERE   n . regionkey    =    r . regionkey \"  ,     \" SELECT    *    FROM   region ,    nation   WHERE   nation . regionkey    =    region . regionkey \"  )  ;", "assertQuery (  \" SELECT    *    FROM   region ,    LATERAL    ( SELECT    *    FROM   nation   WHERE   nation . regionkey    =    region . regionkey )  \"  ,     \" SELECT    *    FROM   region ,    nation   WHERE   nation . regionkey    =    region . regionkey \"  )  ;", "assertQuery (  (  \" SELECT   quantity ,    extendedprice ,    avg _ price ,    low ,    high    \"     +     (  (  (  (  \" FROM   lineitem ,     \"     +     \" LATERAL    ( SELECT   extendedprice    /    quantity   AS   avg _ price )    average _ price ,     \"  )     +     \" LATERAL    ( SELECT   avg _ price    *     0  .  9    AS   low )    lower _ bound ,     \"  )     +     \" LATERAL    ( SELECT   avg _ price    *     1  .  1    AS   high )    upper _ bound    \"  )     +     \" ORDER   BY   extendedprice ,    quantity   LIMIT    1  \"  )  )  ,     \" VALUES    (  1  .  0  ,     9  0  4  .  0  ,     9  0  4  .  0  ,     8  1  3  .  6  ,     9  9  4  .  4  0  0  )  \"  )  ;", "assertQuery (  \" SELECT   y   FROM    ( VALUES   array [  2  ,     3  ]  )    a ( x )    CROSS   JOIN   LATERAL ( SELECT   x [  1  ]  )    b ( y )  \"  ,     \" SELECT    2  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    2  )    a ( x )    CROSS   JOIN   LATERAL ( SELECT   x    +     1  )  \"  ,     \" SELECT    2  ,     3  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    2  )    a ( x )    CROSS   JOIN   LATERAL ( SELECT   x )  \"  ,     \" SELECT    2  ,     2  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    2  )    a ( x )    CROSS   JOIN   LATERAL ( SELECT   x ,    x    +     1  )  \"  ,     \" SELECT    2  ,     2  ,     3  \"  )  ;", "assertQueryFails (  \" SELECT    *    FROM    ( VALUES   array [  2  ,     2  ]  )    a ( x )    LEFT   OUTER   JOIN   LATERAL ( VALUES   x )    ON   true \"  ,     \" line    .  *  :    LATERAL   on   other   than   the   right   side   of   CROSS   JOIN   is   not   supported \"  )  ;", "assertQueryFails (  \" SELECT    *    FROM    ( VALUES   array [  2  ,     2  ]  )    a ( x )    RIGHT   OUTER   JOIN   LATERAL ( VALUES   x )    ON   true \"  ,     \" line    .  *  :    LATERAL   on   other   than   the   right   side   of   CROSS   JOIN   is   not   supported \"  )  ;", "assertQueryFails (  \" SELECT    *    FROM    ( VALUES   array [  2  ,     2  ]  )    a ( x )    FULL   OUTER   JOIN   LATERAL ( VALUES   x )    ON   true \"  ,     \" line    .  *  :    LATERAL   on   other   than   the   right   side   of   CROSS   JOIN   is   not   supported \"  )  ;", "}", "METHOD_END"], "methodName": ["testLateralJoin"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   custkey ,    linestatus ,    tax ,    totalprice ,    orderstatus   FROM    ( SELECT    *    FROM   lineitem   WHERE   orderkey    %     2     =     0  )    a   JOIN   orders   ON   a . orderkey    =    orders . orderkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testLeftFilteredJoin"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  \" SELECT   COUNT (  *  )  \\ n \"     +     \" FROM   lineitem    \\ n \"  )     +     \" LEFT   JOIN    (  \\ n \"  )     +     \"       SELECT    *    FROM   orders   WHERE   orders . orderkey    %     2     =     0  \\ n \"  )     +     \"  )    orders    \\ n \"  )     +     \" ON   lineitem . orderkey    =    orders . orderkey    \\ n \"  )     +     \" WHERE   orders . orderkey    %     4     =     0  \\ n \"  )     +     \"       AND    ( lineitem . suppkey    %     2     =    orders . orderkey    %     2    OR   orders . custkey   IS   NULL )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testLeftJoinAsInnerPredicatePushdown"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   LEFT   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   lineitem . orderkey    =    orders . custkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testLeftJoinDoubleClauseWithLeftOverlap"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   LEFT   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   orders . orderkey    =    lineitem . partkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testLeftJoinDoubleClauseWithRightOverlap"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   COUNT (  *  )  \\ n \"     +     (  (  (  \" FROM    ( SELECT    *    FROM   lineitem   WHERE   orderkey    %     4     =     0    AND   suppkey    %     2     =    partkey    %     2    AND   linenumber    %     3     =    orderkey    %     3  )    lineitem \\ n \"     +     \" LEFT   JOIN    ( SELECT    *    FROM   orders   WHERE   orderkey    %     4     =     0  )    orders \\ n \"  )     +     \" ON   lineitem . linenumber    %     3     =    orders . orderkey    %     4    AND   lineitem . orderkey    %     3     =    orders . custkey    %     3  \\ n \"  )     +     \" WHERE   lineitem . suppkey    %     2     =    lineitem . linenumber    %     3  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testLeftJoinEqualityInference"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   LEFT   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   WHERE   orders . orderkey   IS   NOT   NULL \"  )  ;", "}", "METHOD_END"], "methodName": ["testLeftJoinNormalizedToInner"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   COUNT (  *  )  \\ n \"     +     (  (  (  \" FROM    ( SELECT    *    FROM   lineitem   WHERE   orderkey    %     1  6     =     0    AND   partkey    %     2     =     0  )    lineitem \\ n \"     +     \" LEFT   JOIN    ( SELECT    *    FROM   orders   WHERE   orderkey    %     1  6     =     0    AND   custkey    %     2     =     0  )    orders \\ n \"  )     +     \" ON   lineitem . orderkey    %     8     =    orders . orderkey    %     8  \\ n \"  )     +     \" WHERE    ( orders . custkey    %     8     <     7    OR   orders . custkey    %     8    IS   NULL )    AND   orders . custkey    %     8     =    lineitem . orderkey    %     8  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testLeftJoinPredicateMoveAround"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  \" SELECT   count (  *  )  \\ n \"     +     \" FROM   orders   a \\ n \"  )     +     \" LEFT   OUTER   JOIN   orders   b \\ n \"  )     +     \"       ON   a . clerk    =    b . clerk \\ n \"  )     +     \" WHERE   a . orderpriority =  \\  '  5  - LOW \\  '  \\ n \"  )     +     \"       AND   b . orderpriority =  \\  '  1  - URGENT \\  '  \\ n \"  )     +     \"       AND   b . clerk   is   null \\ n \"  )     +     \"       AND   a . orderkey    %     4     =     0  \\ n \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testLeftJoinPredicatePushdownWithNullConstant"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  \" SELECT   COUNT (  *  )  \\ n \"     +     \" FROM   lineitem    \\ n \"  )     +     \" LEFT   JOIN    (  \\ n \"  )     +     \"       SELECT    *    FROM   orders   WHERE   orders . orderkey    %     2     =     0  \\ n \"  )     +     \"  )    orders    \\ n \"  )     +     \" ON   lineitem . orderkey    =    orders . orderkey    \\ n \"  )     +     \" WHERE   orders . orderkey    =    orders . orderkey \\ n \"  )     +     \"       AND   lineitem . orderkey    %     4     =     0  \\ n \"  )     +     \"       AND    ( lineitem . suppkey    %     2     =    orders . orderkey    %     2    OR   orders . orderkey   IS   NULL )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testLeftJoinPredicatePushdownWithSelfEquality"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery ( noJoinReordering (  )  ,     \" WITH   small _ part   AS    ( SELECT    *    FROM   part   WHERE   name    =     ' a '  )    SELECT   lineitem . orderkey   FROM   lineitem   LEFT   JOIN   small _ part   ON   lineitem . partkey    =    small _ part . partkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testLeftJoinWithEmptyBuildSide"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    *    FROM   lineitem   a   LEFT   JOIN    ( SELECT    *    FROM   orders   WHERE   orderkey    =    rand (  )  )    b   ON   a . orderkey    =    b . orderkey \"  )  ;", "assertQuery (  \" SELECT    *    FROM   lineitem   a   LEFT   JOIN    ( SELECT    *    FROM   orders   WHERE   orderkey    =    rand (  )  )    b   ON   a . orderkey    >    b . orderkey \"  )  ;", "assertQuery (  \" SELECT    *    FROM   lineitem   a   LEFT   JOIN    ( SELECT    *    FROM   orders   WHERE   orderkey    =    rand (  )  )    b   ON    1     =     1  \"  )  ;", "assertQuery (  \" SELECT    *    FROM   lineitem   a   LEFT   JOIN    ( SELECT    *    FROM   orders   WHERE   orderkey    =    rand (  )  )    b   ON   b . orderkey    >     1  \"  )  ;", "assertQuery (  \" SELECT    *    FROM   lineitem   a   LEFT   JOIN    ( SELECT    *    FROM   orders   WHERE   orderkey    =    rand (  )  )    b   ON   b . orderkey    >    b . totalprice \"  )  ;", "}", "METHOD_END"], "methodName": ["testLeftJoinWithEmptyInnerTable"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM    ( SELECT    *    FROM   lineitem   WHERE   orderkey    %     1  0  2  4     =     0  )    lineitem   LEFT   JOIN   orders   ON   orders . orderkey    =     1  0  2  4  \"  )  ;", "}", "METHOD_END"], "methodName": ["testLeftJoinWithLeftConstantEquality"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT   CASE   WHEN   orderkey    %     3     =     0    THEN   NULL   ELSE   orderkey   END   AS   orderkey \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     5  1  2     =     0  \\ n \"  )     +     \"  )    AS   lineitem    \\ n \"  )     +     \" LEFT   JOIN    (  \\ n \"  )     +     \"       SELECT   CASE   WHEN   orderkey    %     2     =     0    THEN   NULL   ELSE   orderkey   END   AS   orderkey \\ n \"  )     +     \"       FROM   orders \\ n \"  )     +     \"       WHERE   custkey    %     5  1  2     =     0  \\ n \"  )     +     \"  )    AS   orders \\ n \"  )     +     \" ON   lineitem . orderkey    =    orders . orderkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testLeftJoinWithNullValues"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM    ( SELECT    *    FROM   lineitem   WHERE   orderkey    %     1  0  2  4     =     0  )    lineitem   LEFT   JOIN   orders   ON   lineitem . orderkey    =     1  0  2  4  \"  )  ;", "}", "METHOD_END"], "methodName": ["testLeftJoinWithRightConstantEquality"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    Session . builder ( getSession (  )  )  . setSystemProperty ( SystemSessionProperties . LEGACY _ ORDER _ BY ,     \" true \"  )  . build (  )  ;", "asseryOrdered ( session ,     \" SELECT    - a   AS   a   FROM    ( VALUES    -  1  ,     0  ,     2  )    t ( a )    ORDER   BY   a \"  ,     \" VALUES    -  2  ,     0  ,     1  \"  )  ;", "asseryOrdered ( session ,     \" SELECT    - a   AS   a   FROM    ( VALUES    -  1  ,     0  ,     2  )    t ( a )    ORDER   BY    1  .  0  + a \"  ,     \" VALUES    1  ,     0  ,     -  2  \"  )  ;", "asseryOrdered ( session ,     \" SELECT    - a   AS   a   FROM    ( VALUES    -  1  ,     0  ,     2  )    t ( a )    ORDER   BY    1  \"  ,     \" VALUES    -  2  ,     0  ,     1  \"  )  ;", "asseryFails ( session ,     \" SELECT    - a   AS   b   FROM    ( VALUES    -  1  ,     0  ,     2  )    t ( a )    ORDER   BY    1  .  0  + b \"  ,     \"  .  * Column    ' b '    cannot   be   resolved \"  )  ;", "asseryOrdered ( session ,     \" SELECT   max ( a + b )  ,    min ( a + b )    AS   a   FROM    ( values    (  1  ,  2  )  ,  (  3  ,  2  )  ,  (  1  ,  5  )  )    t ( a , b )    GROUP   BY   a   ORDER   BY   max ( a + b )  \"  ,     \" VALUES    (  5  ,     5  )  ,     (  6  ,     3  )  \"  )  ;", "asseryOrdered ( session ,     \" SELECT   max ( a + b )  ,    min ( a + b )    AS   a   FROM    ( values    (  1  ,  2  )  ,  (  3  ,  2  )  ,  (  1  ,  5  )  )    t ( a , b )    GROUP   BY   a   ORDER   BY    1  \"  ,     \" VALUES    (  5  ,     5  )  ,     (  6  ,     3  )  \"  )  ;", "asseryOrdered ( session ,     \" SELECT   max ( a )    FROM    ( values    (  1  ,  2  )  ,     (  2  ,  1  )  )    t ( a , b )    GROUP   BY   b   ORDER   BY   max ( b )  \"  ,     \" VALUES    2  ,     1  \"  )  ;", "asseryOrdered ( session ,     \" SELECT   max ( a )    FROM    ( values    (  1  ,  2  )  ,     (  2  ,  1  )  )    t ( a , b )    GROUP   BY   b   ORDER   BY   b \"  ,     \" VALUES    2  ,     1  \"  )  ;", "asseryOrdered ( session ,     \" SELECT   max ( a )    FROM    ( values    (  1  ,  2  )  ,     (  2  ,  1  )  )    t ( a , b )    GROUP   BY   t . b   ORDER   BY   t . b \"  ,     \" VALUES    2  ,     1  \"  )  ;", "asseryOrdered ( session ,     \" SELECT   DISTINCT    - a   AS   b   FROM    ( VALUES    1  ,     2  )    t ( a )    ORDER   BY   b \"  ,     \" VALUES    -  2  ,     -  1  \"  )  ;", "asseryOrdered ( session ,     \" SELECT   DISTINCT    - a   AS   b   FROM    ( VALUES    1  ,     2  )    t ( a )    ORDER   BY    1  \"  ,     \" VALUES    -  2  ,     -  1  \"  )  ;", "asseryFails ( session ,     \" SELECT   DISTINCT    - a   AS   b   FROM    ( VALUES    (  1  ,     2  )  ,     (  3  ,     4  )  )    t ( a ,    c )    ORDER   BY   c \"  ,     \"  .  * For   SELECT   DISTINCT ,    ORDER   BY   expressions   must   appear   in   select   list \"  )  ;", "asseryFails ( session ,     \" SELECT   DISTINCT    - a   AS   b   FROM    ( VALUES    (  1  ,     2  )  ,     (  3  ,     4  )  )    t ( a ,    c )    ORDER   BY    2  \"  ,     \"  .  * ORDER   BY   position    2    is   not   in   select   list \"  )  ;", "asseryOrdered ( session ,     \" SELECT   a   FROM    ( VALUES    1  ,     2  )    t ( a )    ORDER   BY    - row _ number (  )    OVER    (  )  \"  ,     \" VALUES    2  ,     1  \"  )  ;", "asseryOrdered ( session ,     \" SELECT    - a   AS   a   FROM    ( VALUES    1  ,     2  )    t ( a )    ORDER   BY   first _ value ( a )    OVER    ( ORDER   BY   a   ROWS    0    PRECEDING )  \"  ,     \" VALUES    -  1  ,     -  2  \"  )  ;", "asseryOrdered ( session ,     \" SELECT    - a   AS   a   FROM    ( VALUES    1  ,     2  )    t ( a )    ORDER   BY   first _ value ( a + t . a *  2  )    OVER    ( ORDER   BY   a   ROWS    0    PRECEDING )  \"  ,     \" VALUES    -  1  ,     -  2  \"  )  ;", "asseryFails ( session ,     \" SELECT   a   AS   a ,    a *     -  1    AS   a   FROM    ( VALUES    -  1  ,     0  ,     2  )    t ( a )    ORDER   BY   a \"  ,     \"  .  *  ' a '    in   ORDER   BY   is   ambiguous \"  )  ;", "asseryOrdered ( session ,     \" SELECT   grouping ( a )    AS   c   FROM    ( VALUES    (  -  1  ,     -  1  )  ,     (  1  ,     1  )  )    AS   t    ( a ,    b )    GROUP   BY   GROUPING   SETS    ( a ,    b )    ORDER   BY   c   ASC \"  ,     \" VALUES    0  ,     0  ,     1  ,     1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testLegacyOrderByWithOutputColumnReference"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  \" SELECT   orderkey   FROM   orders   LIMIT    1  0  \"  )  ;", "MaterializedResult   all    =    computeExpected (  \" SELECT   orderkey   FROM   orders \"  ,    actual . getTypes (  )  )  ;", "assertEquals ( actual . getMaterializedRows (  )  . size (  )  ,     1  0  )  ;", "yAssertions . assertContains ( all ,    actual )  ;", "}", "METHOD_END"], "methodName": ["testLimit"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   custkey ,    totalprice   FROM   orders   LIMIT   ALL \"  ,     \" SELECT   custkey ,    totalprice   FROM   orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testLimitAll"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  \" SELECT   orderkey   FROM    ( SELECT   orderkey   FROM   orders   LIMIT    1  0  0  )    T   LIMIT    1  0  \"  )  ;", "MaterializedResult   all    =    computeExpected (  \" SELECT   orderkey   FROM   orders \"  ,    actual . getTypes (  )  )  ;", "assertEquals ( actual . getMaterializedRows (  )  . size (  )  ,     1  0  )  ;", "yAssertions . assertContains ( all ,    actual )  ;", "}", "METHOD_END"], "methodName": ["testLimitInInlineView"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   orderkey   FROM   orders   LIMIT    \"     +     ( Integer . MAX _ VALUE )  )  )  ;", "assertQuery (  (  \" SELECT   orderkey   FROM   orders   ORDER   BY   orderkey   LIMIT    \"     +     ( Integer . MAX _ VALUE )  )  )  ;", "}", "METHOD_END"], "methodName": ["testLimitIntMax"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  (  \"  ( TABLE   orders   ORDER   BY   orderkey )    UNION   ALL    \"     +     (  (  (  \" SELECT    *    FROM   orders   WHERE   orderstatus    =     ' F '    UNION   ALL    \"     +     \"  ( TABLE   orders   ORDER   BY   orderkey   LIMIT    2  0  )    UNION   ALL    \"  )     +     \"  ( TABLE   orders   LIMIT    5  )    UNION   ALL    \"  )     +     \" TABLE   orders   LIMIT    1  0  \"  )  )  )  ;", "MaterializedResult   all    =    computeExpected (  \" SELECT    *    FROM   orders \"  ,    actual . getTypes (  )  )  ;", "assertEquals ( actual . getMaterializedRows (  )  . size (  )  ,     1  0  )  ;", "yAssertions . assertContains ( all ,    actual )  ;", "}", "METHOD_END"], "methodName": ["testLimitPushDown"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  \" SELECT   custkey ,    SUM ( CAST ( totalprice    *     1  0  0    AS   BIGINT )  )    FROM   orders   GROUP   BY   custkey   LIMIT    1  0  \"  )  ;", "MaterializedResult   all    =    computeExpected (  \" SELECT   custkey ,    SUM ( CAST ( totalprice    *     1  0  0    AS   BIGINT )  )    FROM   orders   GROUP   BY   custkey \"  ,    actual . getTypes (  )  )  ;", "assertEquals ( actual . getMaterializedRows (  )  . size (  )  ,     1  0  )  ;", "yAssertions . assertContains ( all ,    actual )  ;", "}", "METHOD_END"], "methodName": ["testLimitWithAggregation"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   custkey ,    totalprice   FROM   orders   LIMIT    0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testLimitZero"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "String   query    =     \" SELECT    *    FROM   orders \"  ;", "MaterializedResult   result    =    computeActual (  (  \" EXPLAIN    ( TYPE   LOGICAL )     \"     +    query )  )  ;", "assertEquals ( getOnlyElement ( result . getOnlyColumnAsSet (  )  )  ,    getExplainPlan ( query ,    LOGICAL )  )  ;", "}", "METHOD_END"], "methodName": ["testLogicalExplain"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "String   query    =     \" SELECT    *    FROM   orders \"  ;", "MaterializedResult   result    =    computeActual (  (  \" EXPLAIN    ( TYPE   LOGICAL ,    FORMAT   GRAPHVIZ )     \"     +    query )  )  ;", "assertEquals ( getOnlyElement ( result . getOnlyColumnAsSet (  )  )  ,    getGraphvizExplainPlan ( query ,    LOGICAL )  )  ;", "}", "METHOD_END"], "methodName": ["testLogicalExplainGraphvizFormat"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "String   query    =     \" SELECT    *    FROM   orders \"  ;", "MaterializedResult   result    =    computeActual (  (  \" EXPLAIN    ( TYPE   LOGICAL ,    FORMAT   TEXT )     \"     +    query )  )  ;", "assertEquals ( getOnlyElement ( result . getOnlyColumnAsSet (  )  )  ,    getExplainPlan ( query ,    LOGICAL )  )  ;", "}", "METHOD_END"], "methodName": ["testLogicalExplainTextFormat"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   map ( array [  1  ]  ,    array [  ' aa '  ]  )  [  1  ]  \"  ,     \" SELECT    ' aa '  \"  )  ;", "assertQuery (  \" SELECT   map ( array [  ' a '  ]  ,    array [  ' aa '  ]  )  [  ' a '  ]  \"  ,     \" SELECT    ' aa '  \"  )  ;", "assertQuery (  \" SELECT   map ( array [ array [  1  ,  1  ]  ]  ,    array [  ' a '  ]  )  [ array [  1  ,  1  ]  ]  \"  ,     \" SELECT    ' a '  \"  )  ;", "assertQuery (  \" SELECT   map ( array [  (  1  ,  2  )  ]  ,    array [  ' a '  ]  )  [  (  1  ,  2  )  ]  \"  ,     \" SELECT    ' a '  \"  )  ;", "}", "METHOD_END"], "methodName": ["testMapSubscript"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   m [ max _ key ]    FROM    ( SELECT   map _ agg ( orderkey ,    orderkey )    m ,    max ( orderkey )    max _ key   FROM   orders )  \"  ,     \" SELECT   max ( orderkey )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   JSON _ FORMAT ( CAST ( TRY ( MAP ( ARRAY [ NULL ]  ,    ARRAY [ x ]  )  )    AS   JSON )  )    FROM    ( VALUES    1  ,     2  )    t ( x )  \"  ,     \" SELECT    *    FROM    ( VALUES   NULL ,    NULL )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testMaps"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   MAX _ BY ( orderkey ,    totalprice )    FROM   orders \"  ,     \" SELECT   orderkey   FROM   orders   ORDER   BY   totalprice   DESC   LIMIT    1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testMaxBy"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   y   FROM    ( SELECT   MAX _ BY ( orderkey ,    totalprice ,     2  )    mx   FROM   orders )    CROSS   JOIN   UNNEST ( mx )    u ( y )  \"  ,     \" SELECT   orderkey   FROM   orders   ORDER   BY   totalprice   DESC   LIMIT    2  \"  )  ;", "}", "METHOD_END"], "methodName": ["testMaxByN"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   custkey ,    MAX ( NULLIF ( orderstatus ,     ' O '  )  )  ,    MIN ( NULLIF ( orderstatus ,     ' O '  )  )    FROM   orders   GROUP   BY   custkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testMaxMinStringWithNulls"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  \" SELECT   cardinality ( merge ( empty _ approx _ set (  )  )  )    FROM   orders \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    BIGINT )  . row (  0 L )  . build (  )  ;", "assertEquals ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testMergeEmptyApproxSet"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  \" SELECT   cardinality ( merge ( c )  )    FROM    ( SELECT   create _ hll ( custkey )    c   FROM   orders   UNION   ALL   SELECT   empty _ approx _ set (  )  )  \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    BIGINT )  . row (  1  0  0  2 L )  . build (  )  ;", "assertEquals ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testMergeEmptyNonEmptyApproxSet"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  \" SELECT   cardinality ( merge ( create _ hll ( custkey )  )  )    FROM   orders \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    BIGINT )  . row (  1  0  0  2 L )  . build (  )  ;", "assertEquals ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testMergeHyperLogLog"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  (  \"  \"     +     (  (  \" SELECT   orderstatus ,    cardinality ( merge ( create _ hll ( custkey )  )  )     \"     +     \" FROM   orders    \"  )     +     \" GROUP   BY   orderstatus \"  )  )  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    actual . getTypes (  )  )  . row (  \" O \"  ,     1  0  0  1 L )  . row (  \" F \"  ,     9  9  8 L )  . row (  \" P \"  ,     3  0  4 L )  . build (  )  ;", "yAssertions . assertEqualsIgnoreOrder ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testMergeHyperLogLogGroupBy"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  (  \"  \"     +     (  (  \" SELECT   orderstatus ,    cardinality ( merge ( create _ hll ( IF ( orderstatus    !  =     ' O '  ,    custkey )  )  )  )     \"     +     \" FROM   orders    \"  )     +     \" GROUP   BY   orderstatus \"  )  )  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    actual . getTypes (  )  )  . row (  \" O \"  ,    null )  . row (  \" F \"  ,     9  9  8 L )  . row (  \" P \"  ,     3  0  4 L )  . build (  )  ;", "yAssertions . assertEqualsIgnoreOrder ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testMergeHyperLogLogGroupByWithNulls"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  \" SELECT   cardinality ( merge ( null )  )    FROM   orders \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    BIGINT )  . row ( new   Object [  ]  {    null    }  )  . build (  )  ;", "assertEquals ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testMergeHyperLogLogOnlyNulls"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  \" SELECT   cardinality ( merge ( create _ hll ( IF ( orderstatus    =     ' O '  ,    custkey )  )  )  )    FROM   orders \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    BIGINT )  . row (  1  0  0  1 L )  . build (  )  ;", "assertEquals ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testMergeHyperLogLogWithNulls"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   MIN _ BY ( orderkey ,    totalprice )    FROM   orders \"  ,     \" SELECT   orderkey   FROM   orders   ORDER   BY   totalprice   ASC   LIMIT    1  \"  )  ;", "assertQuery (  \" SELECT   MIN _ BY ( a ,    ROW ( b ,    c )  )    FROM    ( VALUES    (  1  ,     2  ,     3  )  ,     (  2  ,     2  ,     1  )  )    AS   t ( a ,    b ,    c )  \"  ,     \" SELECT    2  \"  )  ;", "}", "METHOD_END"], "methodName": ["testMinBy"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   y   FROM    ( SELECT   MIN _ BY ( orderkey ,    totalprice ,     2  )    mx   FROM   orders )    CROSS   JOIN   UNNEST ( mx )    u ( y )  \"  ,     \" SELECT   orderkey   FROM   orders   ORDER   BY   totalprice   ASC   LIMIT    2  \"  )  ;", "}", "METHOD_END"], "methodName": ["testMinByN"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  \" SELECT   a . col 0  ,    count (  *  )    FROM    ( VALUES   ROW ( cast ( ROW (  1  ,     1  )    AS   ROW ( col 0    integer ,    col 1    integer )  )  )  )    t ( a )  \"  ,     \" line    1  :  8  :     ' a . col 0  '    must   be   an   aggregate   expression   or   appear   in   GROUP   BY   clause \"  )  ;", "}", "METHOD_END"], "methodName": ["testMissingRowFieldInGroupBy"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    *  ,    orders .  *  ,    orderkey   FROM   orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testMixedWildcards"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    *    FROM   orders   UNION   ALL   SELECT    *    FROM   orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testMultiColumnUnionAll"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    *  ,     1  2  3  ,     *    FROM   orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testMultipleWildcards"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    1     +     2  ,     3     +     4  \"  )  ;", "}", "METHOD_END"], "methodName": ["testNoFrom"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "List < MaterializedRow >    result    =    computeActual (  \" SELECT    *    FROM   system . runtime . nodes \"  )  . getMaterializedRows (  )  ;", "assertEquals ( result . size (  )  ,    getNodeCount (  )  )  ;", "}", "METHOD_END"], "methodName": ["testNodeRoster"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   materializedResult    =    computeActual (  \" SELECT   rand (  )    FROM   orders   LIMIT    1  0  \"  )  ;", "long   distinctCount    =    materializedResult . getMaterializedRows (  )  . stream (  )  . map (  (    row )     -  >    row . getField (  0  )  )  . distinct (  )  . count (  )  ;", "assertTrue (  ( distinctCount    >  =     8  )  ,     \" rand (  )    must   produce   different   rows \"  )  ;", "materializedResult    =    computeActual (  \" SELECT   apply (  1  ,    x    -  >    x    +    rand (  )  )    FROM   orders   LIMIT    1  0  \"  )  ;", "distinctCount    =    materializedResult . getMaterializedRows (  )  . stream (  )  . map (  (    row )     -  >    row . getField (  0  )  )  . distinct (  )  . count (  )  ;", "assertTrue (  ( distinctCount    >  =     8  )  ,     \" rand (  )    must   produce   different   rows \"  )  ;", "}", "METHOD_END"], "methodName": ["testNonDeterministic"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   materializedResult    =    computeActual (  (  \"  \"     +     (  (  (  (  (  (  (  \" SELECT   COUNT (  *  )  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT   orderkey ,    COUNT (  *  )  \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       GROUP   BY   orderkey \\ n \"  )     +     \"       LIMIT    1  0  0  0  \\ n \"  )     +     \"  )  \\ n \"  )     +     \" WHERE   rand (  )     >     0  .  5  \"  )  )  )  ;", "MaterializedRow   row    =    getOnlyElement ( materializedResult . getMaterializedRows (  )  )  ;", "assertEquals ( row . getFieldCount (  )  ,     1  )  ;", "long   count    =     (  ( Long )     ( row . getField (  0  )  )  )  ;", "assertTrue (  (  ( count    >     0  )     &  &     ( count    <     1  0  0  0  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testNonDeterministicAggregationPredicatePushdown"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   materializedResult    =    computeActual (  \" SELECT   u   FROM    (    SELECT   if ( rand (  )     >     0  .  5  ,     0  ,     1  )    AS   u    )    WHERE   u    <  >    u \"  )  ;", "assertEquals ( materializedResult . getRowCount (  )  ,     0  )  ;", "materializedResult    =    computeActual (  \" SELECT   u ,    v   FROM    (    SELECT   if ( rand (  )     >     0  .  5  ,     0  ,     1  )    AS   u ,     4  *  4    AS   v    )    WHERE   u    <  >    u   and   v    >     1  0  \"  )  ;", "assertEquals ( materializedResult . getRowCount (  )  ,     0  )  ;", "materializedResult    =    computeActual (  \" SELECT   u ,    v ,    w   FROM    (    SELECT   if ( rand (  )     >     0  .  5  ,     0  ,     1  )    AS   u ,     4  *  4    AS   v ,     ' abc '    AS   w    )    WHERE   v    >     1  0  \"  )  ;", "assertEquals ( materializedResult . getRowCount (  )  ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testNonDeterministicFilter"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   materializedResult    =    computeActual (  (  \"  \"     +     (  (  (  (  (  (  (  (  (  (  (  \" SELECT   COUNT (  *  )  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT   DISTINCT    *  \\ n \"  )     +     \"       FROM    (  \\ n \"  )     +     \"             SELECT    \\  ' abc \\  '    AS   col 1 a ,     5  0  0    AS   col 1 b   FROM   lineitem   LIMIT    1  \\ n \"  )     +     \"        )    table 1  \\ n \"  )     +     \"       JOIN    (  \\ n \"  )     +     \"             SELECT    \\  ' abc \\  '    AS   col 2 a   FROM   lineitem   LIMIT    1  0  0  0  0  0  0  \\ n \"  )     +     \"        )    table 2  \\ n \"  )     +     \"       ON   table 1  . col 1 a    =    table 2  . col 2 a \\ n \"  )     +     \"       WHERE   rand (  )     *     1  0  0  0     >    table 1  . col 1 b \\ n \"  )     +     \"  )  \"  )  )  )  ;", "MaterializedRow   row    =    getOnlyElement ( materializedResult . getMaterializedRows (  )  )  ;", "assertEquals ( row . getFieldCount (  )  ,     1  )  ;", "long   count    =     (  ( Long )     ( row . getField (  0  )  )  )  ;", "assertTrue (  (  ( count    >     0  )     &  &     ( count    <     1  0  0  0  0  0  0  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testNonDeterministicJoinPredicatePushdown"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   materializedResult    =    computeActual (  \" SELECT   r ,    r    +     1    FROM    ( SELECT   rand (  1  0  0  )    r   FROM   orders )    LIMIT    1  0  \"  )  ;", "assertEquals ( materializedResult . getRowCount (  )  ,     1  0  )  ;", "for    ( MaterializedRow   materializedRow    :    materializedResult )     {", "assertEquals ( materializedRow . getFieldCount (  )  ,     2  )  ;", "assertEquals (  (  (  (  ( Number )     ( materializedRow . getField (  0  )  )  )  . intValue (  )  )     +     1  )  ,    materializedRow . getField (  1  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testNonDeterministicProjection"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   materializedResult    =    computeActual (  (  \"  \"     +     (  (  (  (  (  (  \" SELECT   COUNT (  *  )  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT    *  \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       LIMIT    1  0  0  0  \\ n \"  )     +     \"  )  \\ n \"  )     +     \" WHERE   rand (  )     >     0  .  5  \"  )  )  )  ;", "MaterializedRow   row    =    getOnlyElement ( materializedResult . getMaterializedRows (  )  )  ;", "assertEquals ( row . getFieldCount (  )  ,     1  )  ;", "long   count    =     (  ( Long )     ( row . getField (  0  )  )  )  ;", "assertTrue (  (  ( count    >     0  )     &  &     ( count    <     1  0  0  0  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testNonDeterministicTableScanPredicatePushdown"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    *    FROM    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 1  ( a , b )    LEFT   OUTER   JOIN    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 2  ( c , d )    ON   a = c   AND   from _ unixtime ( b )     >    current _ timestamp \"  ,     \" VALUES    (  1  ,     1  ,    NULL ,    NULL )  ,     (  1  ,     2  ,    NULL ,    NULL )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testNonEqalityJoinWithScalarRequiringSessionParameter"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   FULL   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   lineitem . quantity    >     5    WHERE   lineitem . orderkey   IS   NULL   OR   orders . orderkey   IS   NULL \"  ,     (  \" SELECT   COUNT (  *  )    FROM    \"     +     (  (  (  (  \"  ( SELECT   lineitem . orderkey   AS   o 1  ,    orders . orderkey   AS   o 2    FROM   lineitem   LEFT   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   lineitem . quantity    >     5     \"     +     \"             UNION   ALL    \"  )     +     \" SELECT   lineitem . orderkey   AS   o 1  ,    orders . orderkey   AS   o 2    FROM   lineitem   RIGHT   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   lineitem . quantity    >     5     \"  )     +     \"             WHERE   lineitem . orderkey   IS   NULL )     \"  )     +     \"    WHERE   o 1    IS   NULL   OR   o 2    IS   NULL \"  )  )  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   FULL   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   orders . custkey    >     1  0  0  0    WHERE   lineitem . orderkey   IS   NULL   OR   orders . orderkey   IS   NULL \"  ,     (  \" SELECT   COUNT (  *  )    FROM    \"     +     (  (  (  (  \"  ( SELECT   lineitem . orderkey   AS   o 1  ,    orders . orderkey   AS   o 2    FROM   lineitem   LEFT   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   orders . custkey    >     1  0  0  0     \"     +     \"             UNION   ALL    \"  )     +     \" SELECT   lineitem . orderkey   AS   o 1  ,    orders . orderkey   AS   o 2    FROM   lineitem   RIGHT   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   orders . custkey    >     1  0  0  0     \"  )     +     \"             WHERE   lineitem . orderkey   IS   NULL )     \"  )     +     \"    WHERE   o 1    IS   NULL   OR   o 2    IS   NULL \"  )  )  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   FULL   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   orders . custkey    >    lineitem . quantity   WHERE   lineitem . orderkey   IS   NULL   OR   orders . orderkey   IS   NULL \"  ,     (  \" SELECT   COUNT (  *  )    FROM    \"     +     (  (  (  (  \"  ( SELECT   lineitem . orderkey   AS   o 1  ,    orders . orderkey   AS   o 2    FROM   lineitem   LEFT   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   orders . custkey    >    lineitem . quantity    \"     +     \"             UNION   ALL    \"  )     +     \" SELECT   lineitem . orderkey   AS   o 1  ,    orders . orderkey   AS   o 2    FROM   lineitem   RIGHT   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   orders . custkey    >    lineitem . quantity    \"  )     +     \"             WHERE   lineitem . orderkey   IS   NULL )     \"  )     +     \"    WHERE   o 1    IS   NULL   OR   o 2    IS   NULL \"  )  )  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 1  ( a , b )    FULL   OUTER   JOIN    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 2  ( c , d )    ON   a = c   AND   b    >    d \"  ,     \" VALUES    (  1  ,     2  ,     1  ,     1  )  ,     ( NULL ,    NULL ,     1  ,     2  )  ,     (  1  ,     1  ,    NULL ,    NULL )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 1  ( a , b )    FULL   OUTER   JOIN    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 2  ( c , d )    ON   a = c   AND   b    <    d \"  ,     \" VALUES    (  1  ,     1  ,     1  ,     2  )  ,     ( NULL ,    NULL ,     1  ,     1  )  ,     (  1  ,     2  ,    NULL ,    NULL )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 1  ( a , b )    FULL   OUTER   JOIN    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 2  ( c , d )    ON   a = c   AND   b    >     2  \"  ,     \" VALUES    ( NULL ,    NULL ,     1  ,     1  )  ,     ( NULL ,    NULL ,     1  ,     2  )  ,     (  1  ,     1  ,    NULL ,    NULL )  ,     (  1  ,     2  ,    NULL ,    NULL )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 1  ( a , b )    FULL   OUTER   JOIN    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 2  ( c , d )    ON   a = c   AND   d    >     2  \"  ,     \" VALUES    ( NULL ,    NULL ,     1  ,     1  )  ,     ( NULL ,    NULL ,     1  ,     2  )  ,     (  1  ,     1  ,    NULL ,    NULL )  ,     (  1  ,     2  ,    NULL ,    NULL )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 1  ( a , b )    FULL   OUTER   JOIN    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 2  ( c , d )    ON   a = c   AND   b    >     0  \"  ,     \" VALUES    (  1  ,     1  ,     1  ,     1  )  ,     (  1  ,     1  ,     1  ,     2  )  ,     (  1  ,     2  ,     1  ,     1  )  ,     (  1  ,     2  ,     1  ,     2  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 1  ( a , b )    FULL   OUTER   JOIN    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 2  ( c , d )    ON   a = c   AND   d    >     0  \"  ,     \" VALUES    (  1  ,     1  ,     1  ,     1  )  ,     (  1  ,     1  ,     1  ,     2  )  ,     (  1  ,     2  ,     1  ,     1  )  ,     (  1  ,     2  ,     1  ,     2  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    1  ,     2  )    t 1  ( a )    FULL   OUTER   JOIN    ( VALUES    1  0  ,     1  1  )    t 2  ( b )    ON   a    >     1  \"  ,     \" VALUES    (  2  ,     1  1  )  ,     (  2  ,     1  0  )  ,     (  1  ,    NULL )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    1  ,     2  )    t 1  ( a )    FULL   OUTER   JOIN    ( VALUES    1  0  ,     1  1  )    t 2  ( b )    ON   b    >     1  0  \"  ,     \" VALUES    ( NULL ,     1  0  )  ,     (  1  ,     1  1  )  ,     (  2  ,     1  1  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    1  ,     2  )    t 1  ( a )    FULL   OUTER   JOIN    ( VALUES    1  0  ,     1  1  )    t 2  ( b )    ON   a    >    b \"  ,     \" VALUES    ( NULL ,     1  0  )  ,     ( NULL ,     1  1  )  ,     (  1  ,    NULL )  ,     (  2  ,    NULL )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    1  ,     2  )    t 1  ( a )    FULL   OUTER   JOIN    ( VALUES    1  0  ,     1  1  )    t 2  ( b )    ON   a    <    b \"  ,     \" VALUES    (  1  ,     1  0  )  ,     (  1  ,     1  1  )  ,     (  2  ,     1  0  )  ,     (  2  ,     1  1  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testNonEqualityFullJoin"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   lineitem . quantity    +    length ( orders . comment )     >     7  \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   NOT   lineitem . quantity    >     2  \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   NOT   NOT   lineitem . orderkey    =    orders . orderkey   AND   NOT   NOT   lineitem . quantity    >     2  \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   NOT   NOT   NOT   lineitem . quantity    >     2  \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   lineitem . quantity    >     2  \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   lineitem . quantity    <  =     2  \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   lineitem . quantity    !  =     2  \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   lineitem . shipdate    >    orders . orderdate \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   orders . orderdate    <    lineitem . shipdate \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   orders . comment   LIKE    '  % forges %  '  \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   orders . comment   LIKE   lineitem . comment \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   lineitem . comment   LIKE    '  % forges %  '  \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   lineitem . comment   LIKE   orders . comment \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   orders . comment   NOT   LIKE    '  % forges %  '  \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   orders . comment   NOT   LIKE   lineitem . comment \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   NOT    ( orders . comment   LIKE    '  % forges %  '  )  \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   NOT    ( orders . comment   LIKE   lineitem . comment )  \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   lineitem . quantity    +    length ( orders . comment )     >     7  \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   NULL \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    1  ,     2  )    t 1  ( a )    JOIN    ( VALUES    1  0  ,     1  1  )    t 2  ( b )    ON   a    >     1  \"  ,     \" VALUES    (  2  ,     1  1  )  ,     (  2  ,     1  0  )  \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM    ( VALUES    1  ,     2  )    t 1  ( a )    JOIN    ( VALUES    1  0  ,     1  1  )    t 2  ( b )    ON   a    >     2  \"  ,     \" VALUES    (  0  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    1  ,     2  )    t 1  ( a )    JOIN    ( VALUES    1  0  ,     1  1  )    t 2  ( b )    ON   a +  9     >    b \"  ,     \" VALUES    (  2  ,     1  0  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testNonEqualityJoin"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT    *    FROM    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 1  ( a , b )    LEFT   OUTER   JOIN    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 2  ( c , d )     \"     +     \"                                        ON   a = c   AND   TRY (  1     /     ( b - a )     !  =     1  0  0  0  )  \"  )  ,     \" VALUES    (  1  ,     1  ,    NULL ,    NULL )  ,     (  1  ,     2  ,     1  ,     1  )  ,     (  1  ,     2  ,     1  ,     2  )  \"  )  ;", "assertQuery (  (  \" SELECT    *    FROM    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 1  ( a , b )    LEFT   OUTER   JOIN    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 2  ( c , d )     \"     +     \"                                        ON   a = c   AND   TRY (  1     /     ( b - a )     !  =     1  0  0  0    OR   from _ unixtime ( b )     >    current _ timestamp )  \"  )  ,     \" VALUES    (  1  ,     1  ,    NULL ,    NULL )  ,     (  1  ,     2  ,     1  ,     1  )  ,     (  1  ,     2  ,     1  ,     2  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testNonEqualityJoinWithTryInFilter"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   COUNT (  *  )    FROM    \"     +     (  (  (  (  \"                    ( SELECT    *    FROM   lineitem   ORDER   BY   orderkey , linenumber   LIMIT    5  )    l    \"     +     \"                            LEFT   OUTER   JOIN    \"  )     +     \"                    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    5  )    o    \"  )     +     \"                            ON    \"  )     +     \"                   o . custkey    !  =     1  0  0  0    WHERE   o . orderkey   IS   NULL \"  )  )  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   LEFT   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   orders . custkey    >     1  0  0  0    WHERE   orders . orderkey   IS   NULL \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   LEFT   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   orders . custkey    >     1  0  0  0  .  0    WHERE   orders . orderkey   IS   NULL \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   LEFT   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   orders . custkey    >    orders . totalprice   WHERE   orders . orderkey   IS   NULL \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   LEFT   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   orders . custkey    >    lineitem . quantity   WHERE   orders . orderkey   IS   NULL \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   LEFT   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   lineitem . quantity    >     5    WHERE   orders . orderkey   IS   NULL \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 1  ( a , b )    LEFT   OUTER   JOIN    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 2  ( c , d )    ON   a = c   AND   b    >    d \"  ,     \" VALUES    (  1  ,     2  ,     1  ,     1  )  ,     (  1  ,     1  ,    NULL ,    NULL )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 1  ( a , b )    LEFT   OUTER   JOIN    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 2  ( c , d )    ON   a = c   AND   b    <    d \"  ,     \" VALUES    (  1  ,     1  ,     1  ,     2  )  ,     (  1  ,     2  ,    NULL ,    NULL )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 1  ( a , b )    LEFT   OUTER   JOIN    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 2  ( c , d )    ON   a = c   AND   b    >     2  \"  ,     \" VALUES    (  1  ,     1  ,    NULL ,       NULL )  ,     (  1  ,     2  ,    NULL ,    NULL )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 1  ( a , b )    LEFT   OUTER   JOIN    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 2  ( c , d )    ON   a = c   AND   d    >     2  \"  ,     \" VALUES    (  1  ,     1  ,    NULL ,    NULL )  ,     (  1  ,     2  ,    NULL ,    NULL )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 1  ( a , b )    LEFT   OUTER   JOIN    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 2  ( c , d )    ON   a = c   AND   b    >     0  \"  ,     \" VALUES    (  1  ,     1  ,     1  ,     1  )  ,     (  1  ,     1  ,     1  ,     2  )  ,     (  1  ,     2  ,     1  ,     1  )  ,     (  1  ,     2  ,     1  ,     2  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 1  ( a , b )    LEFT   OUTER   JOIN    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 2  ( c , d )    ON   a = c   AND   d    >     0  \"  ,     \" VALUES    (  1  ,     1  ,     1  ,     1  )  ,     (  1  ,     1  ,     1  ,     2  )  ,     (  1  ,     2  ,     1  ,     1  )  ,     (  1  ,     2  ,     1  ,     2  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 1  ( a , b )    LEFT   OUTER   JOIN    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 2  ( c , d )    ON   a = c   AND   c    =    d \"  ,     \" VALUES    (  1  ,     1  ,     1  ,     1  )  ,     (  1  ,     2  ,     1  ,     1  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 1  ( a , b )    LEFT   OUTER   JOIN    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 2  ( c , d )    ON   a = c   AND   c    <    d \"  ,     \" VALUES    (  1  ,     1  ,     1  ,     2  )  ,     (  1  ,     2  ,     1  ,     2  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 1  ( a , b )    LEFT   OUTER   JOIN    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 2  ( c , d )    ON   c    =    d \"  ,     \" VALUES    (  1  ,     1  ,     1  ,     1  )  ,     (  1  ,     2  ,     1  ,     1  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 1  ( a , b )    LEFT   OUTER   JOIN    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 2  ( c , d )    ON   c    <    d \"  ,     \" VALUES    (  1  ,     1  ,     1  ,     2  )  ,     (  1  ,     2  ,     1  ,     2  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    1  ,     2  )    t 1  ( a )    LEFT   OUTER   JOIN    ( VALUES    1  0  ,     1  1  )    t 2  ( b )    ON    1     =     1  \"  ,     \" VALUES    (  1  ,     1  0  )  ,     (  1  ,     1  1  )  ,     (  2  ,     1  0  )  ,     (  2  ,     1  1  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    1  ,     2  )    t 1  ( a )    LEFT   OUTER   JOIN    ( VALUES    1  0  ,     1  1  )    t 2  ( b )    ON   a    >     1  \"  ,     \" VALUES    (  1  ,    NULL )  ,     (  2  ,     1  1  )  ,     (  2  ,     1  0  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    1  ,     2  )    t 1  ( a )    LEFT   OUTER   JOIN    ( VALUES    1  0  ,     1  1  )    t 2  ( b )    ON   b    >     1  0  \"  ,     \" VALUES    (  1  ,     1  1  )  ,     (  2  ,     1  1  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    1  ,     2  )    t 1  ( a )    LEFT   OUTER   JOIN    ( VALUES    1  0  ,     1  1  )    t 2  ( b )    ON   a    >    b \"  ,     \" VALUES    (  1  ,    NULL )  ,     (  2  ,    NULL )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    1  ,     2  )    t 1  ( a )    LEFT   OUTER   JOIN    ( VALUES    1  0  ,     1  1  )    t 2  ( b )    ON   a    <    b \"  ,     \" VALUES    (  1  ,     1  0  )  ,     (  1  ,     1  1  )  ,     (  2  ,     1  0  )  ,     (  2  ,     1  1  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    1  )    t 1  ( a )    LEFT   OUTER   JOIN    ( VALUES    (  1  ,  2  ,  2  )  ,     (  1  ,  2  ,  3  )  ,     (  1  ,     2  ,    NULL )  )    t 2  ( x , y , z )    ON   a = x   AND   y    =    z \"  ,     \" VALUES    (  1  ,     1  ,     2  ,     2  )  \"  )  ;", "assertQuery (  \" SELECT    1    FROM    ( VALUES    1  ,     2  0  )    t 1  ( a )    LEFT   OUTER   JOIN    ( VALUES    1  0  ,     1  1  )    t 2  ( b )    ON   a    >    b   WHERE   b   IS   NOT   NULL \"  ,     \" VALUES    (  1  )  ,     (  1  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testNonEqualityLeftJoin"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   COUNT (  *  )    FROM    \"     +     (  (  (  (  \"                    ( SELECT    *    FROM   lineitem   ORDER   BY   orderkey , linenumber   LIMIT    5  )    l    \"     +     \"                            RIGHT   OUTER   JOIN    \"  )     +     \"                    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    5  )    o    \"  )     +     \"                            ON    \"  )     +     \"                   l . quantity    !  =     5    WHERE   l . orderkey   IS   NULL \"  )  )  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   RIGHT   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   lineitem . quantity    >     5    WHERE   lineitem . orderkey   IS   NULL \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   RIGHT   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   lineitem . quantity    >     5  .  0    WHERE   lineitem . orderkey   IS   NULL \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   RIGHT   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   lineitem . quantity    >    lineitem . suppkey   WHERE   lineitem . orderkey   IS   NULL \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   RIGHT   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   lineitem . quantity *  1  0  0  0     >    orders . totalprice   WHERE   lineitem . orderkey   IS   NULL \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   RIGHT   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   orders . totalprice    >     1  0  0  0    WHERE   lineitem . orderkey   IS   NULL \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 1  ( a , b )    RIGHT   OUTER   JOIN    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 2  ( c , d )    ON   a = c   AND   b    >    d \"  ,     \" VALUES    (  1  ,     2  ,     1  ,     1  )  ,     ( NULL ,    NULL ,     1  ,     2  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 1  ( a , b )    RIGHT   OUTER   JOIN    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 2  ( c , d )    ON   a = c   AND   b    <    d \"  ,     \" VALUES    (  1  ,     1  ,     1  ,     2  )  ,     ( NULL ,    NULL ,     1  ,     1  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 1  ( a , b )    RIGHT   OUTER   JOIN    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 2  ( c , d )    ON   a = c   AND   b    >     2  \"  ,     \" VALUES    ( NULL ,    NULL ,     1  ,     1  )  ,     ( NULL ,    NULL ,     1  ,     2  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 1  ( a , b )    RIGHT   OUTER   JOIN    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 2  ( c , d )    ON   a = c   AND   d    >     2  \"  ,     \" VALUES    ( NULL ,    NULL ,     1  ,     1  )  ,     ( NULL ,    NULL ,     1  ,     2  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 1  ( a , b )    RIGHT   OUTER   JOIN    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 2  ( c , d )    ON   a = c   AND   b    >     0  \"  ,     \" VALUES    (  1  ,     1  ,     1  ,     1  )  ,     (  1  ,     1  ,     1  ,     2  )  ,     (  1  ,     2  ,     1  ,     1  )  ,     (  1  ,     2  ,     1  ,     2  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 1  ( a , b )    RIGHT   OUTER   JOIN    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 2  ( c , d )    ON   a = c   AND   d    >     0  \"  ,     \" VALUES    (  1  ,     1  ,     1  ,     1  )  ,     (  1  ,     1  ,     1  ,     2  )  ,     (  1  ,     2  ,     1  ,     1  )  ,     (  1  ,     2  ,     1  ,     2  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 1  ( a , b )    RIGHT   OUTER   JOIN    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 2  ( c , d )    ON   a = c   AND   c    =    d \"  ,     \" VALUES    (  1  ,     2  ,     1  ,     1  )  ,     (  1  ,     1  ,     1  ,     1  )  ,     ( NULL ,    NULL ,     1  ,     2  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 1  ( a , b )    RIGHT   OUTER   JOIN    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 2  ( c , d )    ON   a = c   AND   c    <    d \"  ,     \" VALUES    ( NULL ,    NULL ,     1  ,     1  )  ,     (  1  ,     2  ,     1  ,     2  )  ,     (  1  ,     1  ,     1  ,     2  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 1  ( a , b )    RIGHT   OUTER   JOIN    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 2  ( c , d )    ON   c    =    d \"  ,     \" VALUES    (  1  ,     1  ,     1  ,     1  )  ,     (  1  ,     2  ,     1  ,     1  )  ,     ( NULL ,    NULL ,     1  ,     2  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 1  ( a , b )    RIGHT   OUTER   JOIN    ( VALUES    (  1  ,  1  )  ,     (  1  ,  2  )  )    t 2  ( c , d )    ON   c    <    d \"  ,     \" VALUES    ( NULL ,    NULL ,     1  ,     1  )  ,     (  1  ,     1  ,     1  ,     2  )  ,     (  1  ,     2  ,     1  ,     2  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    1  ,     2  )    t 1  ( a )    RIGHT   OUTER   JOIN    ( VALUES    1  0  ,     1  1  )    t 2  ( b )    ON    1     =     1  \"  ,     \" VALUES    (  1  ,     1  0  )  ,     (  1  ,     1  1  )  ,     (  2  ,     1  0  )  ,     (  2  ,     1  1  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    1  ,     2  )    t 1  ( a )    RIGHT   OUTER   JOIN    ( VALUES    1  0  ,     1  1  )    t 2  ( b )    ON   a    >     1  \"  ,     \" VALUES    (  2  ,     1  1  )  ,     (  2  ,     1  0  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    1  ,     2  )    t 1  ( a )    RIGHT   OUTER   JOIN    ( VALUES    1  0  ,     1  1  )    t 2  ( b )    ON   b    >     1  0  \"  ,     \" VALUES    ( NULL ,     1  0  )  ,     (  1  ,     1  1  )  ,     (  2  ,     1  1  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    1  ,     2  )    t 1  ( a )    RIGHT   OUTER   JOIN    ( VALUES    1  0  ,     1  1  )    t 2  ( b )    ON   a    >    b \"  ,     \" VALUES    ( NULL ,     1  0  )  ,     ( NULL ,     1  1  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    1  ,     2  )    t 1  ( a )    RIGHT   OUTER   JOIN    ( VALUES    1  0  ,     1  1  )    t 2  ( b )    ON   a    <    b \"  ,     \" VALUES    (  1  ,     1  0  )  ,     (  1  ,     1  1  )  ,     (  2  ,     1  0  )  ,     (  2  ,     1  1  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testNonEqualityRightJoin"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  \" SELECT   TIME ,    TIMESTAMP ,    DATE ,    INTERVAL \\ n \"     +     \" FROM    ( SELECT    1    TIME ,     2    TIMESTAMP ,     3    DATE ,     4    INTERVAL )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testNonReservedTimeWords"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   NULL   IN    (  1  ,     2  ,     3  )  \"  ,     \" SELECT   NULL \"  )  ;", "assertQuery (  \" SELECT   NULL   IN    ( SELECT    1  )  \"  ,     \" SELECT   NULL \"  )  ;", "assertQuery (  \" SELECT   NULL   IN    ( SELECT    1    WHERE   FALSE )  \"  ,     \" SELECT   FALSE \"  )  ;", "assertQuery (  \" SELECT   x   FROM    ( VALUES   NULL )    t ( x )    WHERE   x   IN    ( SELECT    1  )  \"  ,     \" SELECT    3  3    WHERE   FALSE \"  )  ;", "assertQuery (  \" SELECT   NULL   IN    ( SELECT   CAST ( NULL   AS   BIGINT )  )  \"  ,     \" SELECT   NULL \"  )  ;", "assertQuery (  \" SELECT   NULL   IN    ( SELECT   NULL   WHERE   FALSE )  \"  ,     \" SELECT   FALSE \"  )  ;", "assertQuery (  \" SELECT   NULL   IN    (  ( SELECT    1  )    UNION   ALL    ( SELECT   NULL )  )  \"  ,     \" SELECT   NULL \"  )  ;", "assertQuery (  \" SELECT   x   IN    ( SELECT   TRUE )    FROM    ( SELECT    *    FROM    ( VALUES   CAST ( NULL   AS   BOOLEAN )  )    t ( x )    WHERE    ( x   OR   NULL )    IS   NULL )  \"  ,     \" SELECT   NULL \"  )  ;", "assertQuery (  \" SELECT   x   IN    ( SELECT    1  )    FROM    ( SELECT    *    FROM    ( VALUES   CAST ( NULL   AS   INTEGER )  )    t ( x )    WHERE    ( x    +     1  0    IS   NULL )    OR   X    =     2  )  \"  ,     \" SELECT   NULL \"  )  ;", "assertQuery (  \" SELECT   x   IN    ( SELECT    1    WHERE   FALSE )    FROM    ( SELECT    *    FROM    ( VALUES   CAST ( NULL   AS   INTEGER )  )    t ( x )    WHERE    ( x    +     1  0    IS   NULL )    OR   X    =     2  )  \"  ,     \" SELECT   FALSE \"  )  ;", "}", "METHOD_END"], "methodName": ["testNullOnLhsOfInPredicateAllowed"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  \" SELECT   orderstatus   FROM   orders   ORDER   BY   orderstatus \"  )  ;", "}", "METHOD_END"], "methodName": ["testOrderBy"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  \" SELECT   orderstatus   FROM   orders   ORDER   BY   orderkey   DESC \"  )  ;", "}", "METHOD_END"], "methodName": ["testOrderBy2"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  \" SELECT   orderstatus   x   FROM   orders   ORDER   BY   x   ASC \"  )  ;", "}", "METHOD_END"], "methodName": ["testOrderByAlias"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  \" SELECT   orderstatus   orderdate   FROM   orders   ORDER   BY   orderdate   ASC \"  )  ;", "}", "METHOD_END"], "methodName": ["testOrderByAliasWithSameNameAsUnselectedColumn"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  \" SELECT   custkey ,    orderstatus   FROM   orders   ORDER   BY   orderkey    +     1    DESC   LIMIT    1  0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testOrderByExpressionWithLimit"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  \" SELECT   custkey ,    orderstatus   FROM   orders   ORDER   BY   orderkey   DESC   LIMIT    1  0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testOrderByLimit"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   custkey ,    totalprice   FROM   orders   ORDER   BY   orderkey   LIMIT   ALL \"  ,     \" SELECT   custkey ,    totalprice   FROM   orders   ORDER   BY   orderkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testOrderByLimitAll"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   custkey ,    totalprice   FROM   orders   ORDER   BY   orderkey   LIMIT    0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testOrderByLimitZero"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  \" SELECT   custkey ,    orderstatus   FROM   orders   ORDER   BY   custkey   DESC ,    orderstatus \"  )  ;", "}", "METHOD_END"], "methodName": ["testOrderByMultipleFields"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  \" SELECT   orderstatus ,    orderdate   FROM   orders   ORDER   BY    2  ,     1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testOrderByOrdinal"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  \" SELECT    *    FROM   orders   ORDER   BY    1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testOrderByOrdinalWithWildcard"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  (  \" SELECT   orderkey ,    row _ number (  )    OVER    ( ORDER   BY   orderkey )     \"     +     (  (  \" FROM    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    1  0  )     \"     +     \" ORDER   BY    2    DESC    \"  )     +     \" LIMIT    5  \"  )  )  ,     (  \" VALUES    (  3  4  ,     1  0  )  ,     \"     +     (  (  (  \"  (  3  3  ,     9  )  ,     \"     +     \"  (  3  2  ,     8  )  ,     \"  )     +     \"  (  7  ,     7  )  ,     \"  )     +     \"  (  6  ,     6  )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testOrderByWindowFunction"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  (  \" SELECT   orderkey ,    row _ number (  )    OVER    ( ORDER   BY   nullif ( orderkey ,     3  )    NULLS   FIRST )     \"     +     (  (  \" FROM    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    1  0  )     \"     +     \" ORDER   BY    2    ASC    \"  )     +     \" LIMIT    5  \"  )  )  ,     (  \" VALUES    (  3  ,     1  )  ,     \"     +     (  (  (  \"  (  1  ,     2  )  ,     \"     +     \"  (  2  ,     3  )  ,     \"  )     +     \"  (  4  ,     4  )  ,  \"  )     +     \"  (  5  ,     5  )  \"  )  )  )  ;", "String   nullsLastExpected    =     \" VALUES    (  3  ,     1  0  )  ,     \"     +     (  (  (  \"  (  3  4  ,     9  )  ,     \"     +     \"  (  3  3  ,     8  )  ,     \"  )     +     \"  (  3  2  ,     7  )  ,     \"  )     +     \"  (  7  ,     6  )  \"  )  ;", "assertQueryOrdered (  (  \" SELECT   orderkey ,    row _ number (  )    OVER    ( ORDER   BY   nullif ( orderkey ,     3  )    NULLS   LAST )     \"     +     (  (  \" FROM    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    1  0  )     \"     +     \" ORDER   BY    2    DESC    \"  )     +     \" LIMIT    5  \"  )  )  ,    nullsLastExpected )  ;", "assertQueryOrdered (  (  \" SELECT   orderkey ,    row _ number (  )    OVER    ( ORDER   BY   nullif ( orderkey ,     3  )  )     \"     +     (  (  \" FROM    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    1  0  )     \"     +     \" ORDER   BY    2    DESC    \"  )     +     \" LIMIT    5  \"  )  )  ,    nullsLastExpected )  ;", "}", "METHOD_END"], "methodName": ["testOrderByWindowFunctionWithNulls"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  \" SELECT   x ,    sum ( cast ( x   AS   double )  )  \\ n \"     +     \" FROM    ( VALUES    \\  '  1  .  0  \\  '  )    t ( x )  \\ n \"  )     +     \" GROUP   BY   x \\ n \"  )     +     \" ORDER   BY   sum ( cast ( t . x   AS   double )  )  \"  )  )  ,     \" VALUES    (  '  1  .  0  '  ,     1  .  0  )  \"  )  ;", "Session   legacyOrderBy    =    Session . builder ( getSession (  )  )  . setSystemProperty ( SystemSessionProperties . LEGACY _ ORDER _ BY ,     \" true \"  )  . build (  )  ;", "QueryTemplate . queryTemplate (  \" SELECT   count (  *  )     % output %    FROM    ( SELECT   substr ( name ,  1  ,  1  )    letter   FROM   nation )    x   GROUP   BY    % groupBy %    ORDER   BY    % orderBy %  \"  )  . replaceAll ( QueryTemplate . parameter (  \" output \"  )  . of (  \"  \"  ,     \"  ,    letter \"  ,     \"  ,    letter   AS   y \"  )  ,    QueryTemplate . parameter (  \" groupBy \"  )  . of (  \" x . letter \"  ,     \" letter \"  )  ,    QueryTemplate . parameter (  \" orderBy \"  )  . of (  \" x . letter \"  ,     \" letter \"  )  )  . forEach (  (    query )     -  >     {", "assertQueryOrdered ( query )  ;", "assertQueryOrdered ( legacyOrderBy ,    query )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["testOrderByWithAggregation"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  \" SELECT   orderkey ,    custkey ,    orderstatus   FROM   orders   ORDER   BY   nullif ( orderkey ,     3  )    ASC   NULLS   FIRST ,    custkey   ASC \"  )  ;", "assertQueryOrdered (  \" SELECT   orderkey ,    custkey ,    orderstatus   FROM   orders   ORDER   BY   nullif ( orderkey ,     3  )    DESC   NULLS   FIRST ,    custkey   ASC \"  )  ;", "assertQueryOrdered (  \" SELECT   orderkey ,    custkey ,    orderstatus   FROM   orders   ORDER   BY   nullif ( orderkey ,     3  )    ASC   NULLS   LAST ,    custkey   ASC \"  )  ;", "assertQueryOrdered (  \" SELECT   orderkey ,    custkey ,    orderstatus   FROM   orders   ORDER   BY   nullif ( orderkey ,     3  )    DESC   NULLS   LAST ,    custkey   ASC \"  )  ;", "assertQueryOrdered (  \" SELECT   orderkey ,    custkey ,    orderstatus   FROM   orders   ORDER   BY   nullif ( orderkey ,     3  )    ASC ,    custkey   ASC \"  ,     \" SELECT   orderkey ,    custkey ,    orderstatus   FROM   orders   ORDER   BY   nullif ( orderkey ,     3  )    ASC   NULLS   LAST ,    custkey   ASC \"  )  ;", "}", "METHOD_END"], "methodName": ["testOrderByWithNulls"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  \" SELECT   a *  2    AS   b   FROM    ( VALUES    -  1  ,     0  ,     2  )    t ( a )    ORDER   BY   b *  -  1  \"  ,     \" VALUES    4  ,     0  ,     -  2  \"  )  ;", "assertQueryOrdered (  \" SELECT   a *  2    AS   b   FROM    ( VALUES    -  1  ,     0  ,     2  )    t ( a )    ORDER   BY   b \"  ,     \" VALUES    -  2  ,     0  ,     4  \"  )  ;", "assertQueryOrdered (  \" SELECT   a *  -  2    AS   a   FROM    ( VALUES    -  1  ,     0  ,     2  )    t ( a )    ORDER   BY   a *  -  1  \"  ,     \" VALUES    2  ,     0  ,     -  4  \"  )  ;", "assertQueryOrdered (  \" SELECT   a *  -  2    AS   a   FROM    ( VALUES    -  1  ,     0  ,     2  )    t ( a )    ORDER   BY   t . a *  -  1  \"  ,     \" VALUES    -  4  ,     0  ,     2  \"  )  ;", "assertQueryOrdered (  \" SELECT   a *  -  2    FROM    ( VALUES    -  1  ,     0  ,     2  )    t ( a )    ORDER   BY   a *  -  1  \"  ,     \" VALUES    -  4  ,     0  ,     2  \"  )  ;", "assertQueryOrdered (  \" SELECT   a *  -  2    FROM    ( VALUES    -  1  ,     0  ,     2  )    t ( a )    ORDER   BY   t . a *  -  1  \"  ,     \" VALUES    -  4  ,     0  ,     2  \"  )  ;", "assertQueryOrdered (  \" SELECT   a ,    a *     -  1    AS   a   FROM    ( VALUES    -  1  ,     0  ,     2  )    t ( a )    ORDER   BY   t . a \"  ,     \" VALUES    (  -  1  ,     1  )  ,     (  0  ,     0  )  ,     (  2  ,     -  2  )  \"  )  ;", "assertQueryOrdered (  \" SELECT   a ,    a *     -  2    AS   b   FROM    ( VALUES    -  1  ,     0  ,     2  )    t ( a )    ORDER   BY   a    +    b \"  ,     \" VALUES    (  2  ,     -  4  )  ,     (  0  ,     0  )  ,     (  -  1  ,     2  )  \"  )  ;", "assertQueryOrdered (  \" SELECT   a   AS   b ,    a *     -  2    AS   a   FROM    ( VALUES    -  1  ,     0  ,     2  )    t ( a )    ORDER   BY   a    +    b \"  ,     \" VALUES    (  2  ,     -  4  )  ,     (  0  ,     0  )  ,     (  -  1  ,     2  )  \"  )  ;", "assertQueryOrdered (  \" SELECT   a *     -  2    AS   a   FROM    ( VALUES    -  1  ,     0  ,     2  )    t ( a )    ORDER   BY   a    +    t . a \"  ,     \" VALUES    -  4  ,     0  ,     2  \"  )  ;", "assertQueryOrdered (  \" SELECT    1    x   ORDER   BY   degrees ( x )  \"  ,     \" VALUES    1  \"  )  ;", "assertQueryOrdered (  \" SELECT   a    +     1    AS   b   FROM    ( VALUES    1  ,     2  )    t ( a )    ORDER   BY    -  1  .  0     *    b \"  ,     \" VALUES    3  ,     2  \"  )  ;", "assertQueryOrdered (  \" SELECT   a   AS   b   FROM    ( VALUES    1  ,     2  )    t ( a )    ORDER   BY    -  1  .  0     *    b \"  ,     \" VALUES    2  ,     1  \"  )  ;", "assertQueryOrdered (  \" SELECT   a   AS   a   FROM    ( VALUES    1  ,     2  )    t ( a )    ORDER   BY    -  1  .  0     *    a \"  ,     \" VALUES    2  ,     1  \"  )  ;", "assertQueryOrdered (  \" SELECT    1    x   ORDER   BY   degrees ( x )  \"  ,     \" VALUES    1  \"  )  ;", "assertQueryOrdered (  \" SELECT   max ( a + b )  ,    min ( a + b )    AS   a   FROM    ( values    (  1  ,  2  )  ,  (  3  ,  2  )  ,  (  1  ,  5  )  )    t ( a , b )    GROUP   BY   a   ORDER   BY   max ( t . a + t . b )  \"  ,     \" VALUES    (  5  ,     5  )  ,     (  6  ,     3  )  \"  )  ;", "assertQueryOrdered (  \" SELECT   max ( a + b )  ,    min ( a + b )    AS   a   FROM    ( values    (  1  ,  2  )  ,  (  3  ,  2  )  ,  (  1  ,  5  )  )    t ( a , b )    GROUP   BY   a   ORDER   BY   max ( t . a + t . b )  *  -  0  .  1  \"  ,     \" VALUES    (  6  ,     3  )  ,     (  5  ,     5  )  \"  )  ;", "assertQueryOrdered (  \" SELECT   max ( a )    FROM    ( values    (  1  ,  2  )  ,     (  2  ,  1  )  )    t ( a , b )    GROUP   BY   b   ORDER   BY   max ( b *  1  .  0  )  \"  ,     \" VALUES    2  ,     1  \"  )  ;", "assertQueryOrdered (  \" SELECT   max ( a )    AS   b   FROM    ( values    (  1  ,  2  )  ,     (  2  ,  1  )  )    t ( a , b )    GROUP   BY   b   ORDER   BY   b \"  ,     \" VALUES    1  ,     2  \"  )  ;", "assertQueryOrdered (  \" SELECT   max ( a )    FROM    ( values    (  1  ,  2  )  ,     (  2  ,  1  )  )    t ( a , b )    GROUP   BY   b   ORDER   BY   b *  1  .  0  \"  ,     \" VALUES    2  ,     1  \"  )  ;", "assertQueryOrdered (  \" SELECT   max ( a )  *  1  0  0    AS   c   FROM    ( values    (  1  ,  2  )  ,     (  2  ,  1  )  )    t ( a , b )    GROUP   BY   b   ORDER   BY   max ( b )     +    c \"  ,     \" VALUES    1  0  0  ,     2  0  0  \"  )  ;", "assertQueryOrdered (  \" SELECT   max ( a )    FROM    ( values    (  1  ,  2  )  ,     (  2  ,  1  )  )    t ( a , b )    GROUP   BY   b   ORDER   BY   b \"  ,     \" VALUES    2  ,     1  \"  )  ;", "assertQueryOrdered (  \" SELECT   max ( a )    FROM    ( values    (  1  ,  2  )  ,     (  2  ,  1  )  )    t ( a , b )    GROUP   BY   t . b   ORDER   BY   t . b *  1  .  0  \"  ,     \" VALUES    2  ,     1  \"  )  ;", "assertQueryOrdered (  \" SELECT    -  ( a + b )    AS   a ,     -  ( a + b )    AS   b ,    a + b   FROM    ( values    (  4  1  ,     4  2  )  ,     (  -  4  1  ,     -  4  2  )  )    t ( a , b )    GROUP   BY   a + b   ORDER   BY   a + b \"  ,     \" VALUES    (  -  8  3  ,     -  8  3  ,     8  3  )  ,     (  8  3  ,     8  3  ,     -  8  3  )  \"  )  ;", "assertQueryOrdered (  \" SELECT   c . a   FROM    ( SELECT   CAST ( ROW (  - a . a )    AS   ROW ( a   BIGINT )  )    a   FROM    ( VALUES    (  2  )  ,     (  1  )  )    a ( a )    GROUP   BY   a . a   ORDER   BY   a . a )    t ( c )  \"  ,     \" VALUES    -  2  ,     -  1  \"  )  ;", "assertQueryOrdered (  \" SELECT    - a   AS   a   FROM    ( values    (  1  ,  2  )  ,  (  3  ,  2  )  )    t ( a , b )    GROUP   BY   GROUPING   SETS    (  ( a )  ,     ( a ,    b )  )    ORDER   BY    - a \"  ,     \" VALUES    -  1  ,     -  1  ,     -  3  ,     -  3  \"  )  ;", "assertQueryOrdered (  \" SELECT   a   AS   foo   FROM    ( values    (  1  ,  2  )  ,  (  3  ,  2  )  )    t ( a , b )    GROUP   BY   GROUPING   SETS    (  ( a )  ,     ( a ,    b )  )    HAVING   b   IS   NOT   NULL   ORDER   BY    - a \"  ,     \" VALUES    3  ,     1  \"  )  ;", "assertQueryOrdered (  \" SELECT   max ( a )    FROM    ( values    (  1  ,  2  )  ,  (  3  ,  2  )  )    t ( a , b )    ORDER   BY   max (  - a )  \"  ,     \" VALUES    3  \"  )  ;", "assertQueryFails (  \" SELECT   max ( a )    AS   a   FROM    ( values    (  1  ,  2  )  )    t ( a , b )    GROUP   BY   b   ORDER   BY   max ( a + b )  \"  ,     \"  .  * Invalid   reference   to   output   projection   attribute   from   ORDER   BY   aggregation \"  )  ;", "assertQueryOrdered (  \" SELECT    - a   AS   a ,    a   AS   b   FROM    ( VALUES    1  ,     2  )    t ( a )    GROUP   BY   t . a   ORDER   BY   a \"  ,     \" VALUES    (  -  2  ,     2  )  ,     (  -  1  ,     1  )  \"  )  ;", "assertQueryOrdered (  \" SELECT    - a   AS   a ,    a   AS   b   FROM    ( VALUES    1  ,     2  )    t ( a )    GROUP   BY   t . a   ORDER   BY   t . a \"  ,     \" VALUES    (  -  1  ,     1  )  ,     (  -  2  ,     2  )  \"  )  ;", "assertQueryOrdered (  \" SELECT    - a   AS   a ,    a   AS   b   FROM    ( VALUES    1  ,     2  )    t ( a )    GROUP   BY   a   ORDER   BY   t . a \"  ,     \" VALUES    (  -  1  ,     1  )  ,     (  -  2  ,     2  )  \"  )  ;", "assertQueryOrdered (  \" SELECT    - a   AS   a ,    a   AS   b   FROM    ( VALUES    1  ,     2  )    t ( a )    GROUP   BY   a   ORDER   BY   t . a +  2  * a \"  ,     \" VALUES    (  -  2  ,     2  )  ,     (  -  1  ,     1  )  \"  )  ;", "assertQueryOrdered (  \" SELECT    - a   AS   a ,    a   AS   b   FROM    ( VALUES    1  ,     2  )    t ( a )    GROUP   BY   t . a   ORDER   BY   t . a +  2  * a \"  ,     \" VALUES    (  -  2  ,     2  )  ,     (  -  1  ,     1  )  \"  )  ;", "assertQueryOrdered (  \" SELECT   x   AS   y   FROM    ( values    (  1  ,  2  )  ,     (  2  ,  3  )  )    t ( x ,    y )    GROUP   BY   x   ORDER   BY   apply ( x ,    x    -  >     - x )     +     2  * x \"  ,     \" VALUES    1  ,     2  \"  )  ;", "assertQueryOrdered (  \" SELECT    - y   AS   x   FROM    ( values    (  1  ,  2  )  ,     (  2  ,  3  )  )    t ( x ,    y )    GROUP   BY   y   ORDER   BY   apply ( x ,    x    -  >     - x )  \"  ,     \" VALUES    -  2  ,     -  3  \"  )  ;", "assertQueryOrdered (  \" SELECT    - y   AS   x   FROM    ( values    (  1  ,  2  )  ,     (  2  ,  3  )  )    t ( x ,    y )    GROUP   BY   y   ORDER   BY   sum ( apply (  - y ,    x    -  >    x    *     1  .  0  )  )  \"  ,     \" VALUES    -  3  ,     -  2  \"  )  ;", "assertQueryOrdered (  \" SELECT   DISTINCT    - a   AS   b   FROM    ( VALUES    1  ,     2  )    t ( a )    ORDER   BY   b \"  ,     \" VALUES    -  2  ,     -  1  \"  )  ;", "assertQueryOrdered (  \" SELECT   DISTINCT    - a   AS   b   FROM    ( VALUES    1  ,     2  )    t ( a )    ORDER   BY    1  \"  ,     \" VALUES    -  2  ,     -  1  \"  )  ;", "assertQueryOrdered (  \" SELECT   DISTINCT   max ( a )    AS   b   FROM    ( values    (  1  ,  2  )  ,     (  2  ,  1  )  )    t ( a , b )    GROUP   BY   b   ORDER   BY   b \"  ,     \" VALUES    1  ,     2  \"  )  ;", "assertQueryFails (  \" SELECT   DISTINCT    - a   AS   b   FROM    ( VALUES    (  1  ,     2  )  ,     (  3  ,     4  )  )    t ( a ,    c )    ORDER   BY   c \"  ,     \"  .  * For   SELECT   DISTINCT ,    ORDER   BY   expressions   must   appear   in   select   list \"  )  ;", "assertQueryFails (  \" SELECT   DISTINCT    - a   AS   b   FROM    ( VALUES    (  1  ,     2  )  ,     (  3  ,     4  )  )    t ( a ,    c )    ORDER   BY    2  \"  ,     \"  .  * ORDER   BY   position    2    is   not   in   select   list \"  )  ;", "assertQueryOrdered (  \" SELECT   a   FROM    ( VALUES    1  ,     2  )    t ( a )    ORDER   BY    - row _ number (  )    OVER    (  )  \"  ,     \" VALUES    2  ,     1  \"  )  ;", "assertQueryOrdered (  \" SELECT    - a   AS   a ,    first _ value (  - a )    OVER    ( ORDER   BY   a   ROWS    0    PRECEDING )    AS   b   FROM    ( VALUES    1  ,     2  )    t ( a )    ORDER   BY   first _ value ( a )    OVER    ( ORDER   BY   a   ROWS    0    PRECEDING )  \"  ,     \" VALUES    (  -  2  ,     -  2  )  ,     (  -  1  ,     -  1  )  \"  )  ;", "assertQueryOrdered (  \" SELECT    - a   AS   a   FROM    ( VALUES    1  ,     2  )    t ( a )    ORDER   BY   first _ value ( a + t . a *  2  )    OVER    ( ORDER   BY   a   ROWS    0    PRECEDING )  \"  ,     \" VALUES    -  1  ,     -  2  \"  )  ;", "assertQueryFails (  \" SELECT   a ,    a *     -  1    AS   a   FROM    ( VALUES    -  1  ,     0  ,     2  )    t ( a )    ORDER   BY   a \"  ,     \"  .  *  ' a '    is   ambiguous \"  )  ;", "}", "METHOD_END"], "methodName": ["testOrderByWithOutputColumnReference"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" WITH   t   AS    ( SELECT    1    x ,     2    y )    SELECT   x ,    y   FROM   t   ORDER   BY   x ,    y \"  ,     \" SELECT    1  ,     2  \"  )  ;", "assertQuery (  \" WITH   t   AS    ( SELECT    1    x ,     2    y )    SELECT   x ,    y   FROM   t   ORDER   BY   x ,    y   LIMIT    1  \"  ,     \" SELECT    1  ,     2  \"  )  ;", "assertQuery (  \" WITH   t   AS    ( SELECT    1    x ,     1    y )    SELECT   x ,    y   FROM   t   ORDER   BY   x ,    y   LIMIT    1  \"  ,     \" SELECT    1  ,     1  \"  )  ;", "assertQuery (  \" WITH   t   AS    ( SELECT   orderkey   x ,    orderkey   y   FROM   orders )    SELECT   x ,    y   FROM   t   ORDER   BY   x ,    y   LIMIT    1  \"  ,     \" SELECT    1  ,     1  \"  )  ;", "assertQuery (  \" WITH   t   AS    ( SELECT   orderkey   x ,    orderkey   y   FROM   orders )    SELECT   x ,    y   FROM   t   ORDER   BY   x ,    y   DESC   LIMIT    1  \"  ,     \" SELECT    1  ,     1  \"  )  ;", "assertQuery (  \" WITH   t   AS    ( SELECT   orderkey   x ,    totalprice   y ,    orderkey   z   FROM   orders )    SELECT   x ,    y ,    z   FROM   t   ORDER   BY   x ,    y ,    z   LIMIT    1  \"  ,     \" SELECT    1  ,     1  7  2  7  9  9  .  4  9  ,     1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testOrderByWithSimilarExpressions"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  \" SELECT    *    FROM    ( SELECT    *    FROM   orders   ORDER   BY   orderkey )    LIMIT    1  0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testOrderLimitCompaction"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  (  \" SELECT   count (  1  )  ,    count ( one )     \"     +     (  (  \" FROM    ( values    (  1  ,     ' a '  )  ,     (  2  ,     ' a '  )  )    AS   l ( k ,    a )     \"     +     \" LEFT   JOIN    ( SELECT   k ,     1    one   FROM    ( values    1  )    AS   r ( k )  )    r    \"  )     +     \" ON   l . k    =    r . k   GROUP   BY   a \"  )  )  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    BIGINT ,    BIGINT )  . row (  2 L ,     1 L )  . build (  )  ;", "assertEquals ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testOuterJoinWithCommonExpression"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "QueryTemplate . Parameter   type    =    QueryTemplate . parameter (  \" type \"  )  ;", "QueryTemplate . Parameter   condition    =    QueryTemplate . parameter (  \" condition \"  )  ;", "QueryTemplate   queryTemplate    =    QueryTemplate . queryTemplate (  \" SELECT    *    FROM    ( VALUES    1  ,  2  ,  3  ,  4  )    t ( x )     % type %    JOIN    ( VALUES    1  ,  2  ,  3  ,  5  )    t 2  ( y )    ON    % condition %  \"  ,    type ,    condition )  ;", "queryTemplate . replaceAll (  (    query )     -  >    asseryFails ( query ,     \" line    .  *  :     .  *    is   not   supported \"  )  ,    ImmutableList . of ( type . of (  \" left \"  )  ,    type . of (  \" right \"  )  ,    type . of (  \" full \"  )  )  ,    ImmutableList . of ( condition . of (  \" EXISTS ( SELECT    1    WHERE   x    =    y )  \"  )  ,    condition . of (  \"  ( SELECT   x    =    y )  \"  )  ,    condition . of (  \" true   IN    ( SELECT   x    =    y )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testOuterJoinWithComplexCorrelatedSubquery"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   DISTINCT   a . orderkey   FROM    \"     +     (  (  \"  ( SELECT   CASE   WHEN   orderkey    >     1  0    THEN   orderkey   END   orderkey   FROM   orders   WHERE   orderkey    <     1  0  0  )    a    \"     +     \" RIGHT   OUTER   JOIN    \"  )     +     \"  ( SELECT    *    FROM   orders   WHERE   orderkey    <     1  0  0  )    b   ON   a . orderkey    =    b . orderkey \"  )  )  )  ;", "assertQuery (  (  \" SELECT   DISTINCT   a . orderkey   FROM    \"     +     (  (  \"  ( SELECT   CASE   WHEN   orderkey    >     2    THEN   orderkey   END   orderkey   FROM   orders   WHERE   orderkey    <     1  0  0  )    a    \"     +     \" FULL   OUTER   JOIN    \"  )     +     \"  ( SELECT    *    FROM   orders   WHERE   orderkey    <     1  0  0  )    b   ON   a . orderkey    =    b . orderkey \"  )  )  ,     (  \" SELECT   DISTINCT   orderkey   FROM    (  \"     +     (  (  (  (  (  (  (  (  (  \" SELECT   a . orderkey   FROM    \"     +     \"  ( SELECT   CASE   WHEN   orderkey    >     2    THEN   orderkey   END   orderkey   FROM   orders   WHERE   orderkey    <     1  0  0  )    a    \"  )     +     \" RIGHT   OUTER   JOIN    \"  )     +     \"  ( SELECT    *    FROM   orders   WHERE   orderkey    <     1  0  0  )    b   ON   a . orderkey    =    b . orderkey    \"  )     +     \" UNION   ALL    \"  )     +     \" SELECT   a . orderkey   FROM \"  )     +     \"  ( SELECT   CASE   WHEN   orderkey    >     2    THEN   orderkey   END   orderkey   FROM   orders   WHERE   orderkey    <     1  0  0  )    a    \"  )     +     \" LEFT   OUTER   JOIN    \"  )     +     \"  ( SELECT    *    FROM   orders   WHERE   orderkey    <     1  0  0  )    b   ON   a . orderkey    =    b . orderkey    \"  )     +     \" WHERE   a . orderkey   IS   NULL )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testOuterJoinWithNullsOnProbe"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   count (  *  )    FROM    ( SELECT    ( SELECT    1  )  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( SELECT    ( SELECT    1  )  )  \"  )  ;", "assertQueryFails (  \" SELECT    *    FROM    ( SELECT    ( SELECT    1  ,     2  )  )  \"  ,     \" line    1  :  2  3  :    Multiple   columns   returned   by   subquery   are   not   yet   supported .    Found    2  \"  )  ;", "}", "METHOD_END"], "methodName": ["testOutputInEnforceSingleRow"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  \" SELECT   cardinality ( cast ( approx _ set ( custkey )    AS   P 4 HYPERLOGLOG )  )    FROM   orders \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    BIGINT )  . row (  1  0  0  2 L )  . build (  )  ;", "assertEquals ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testP4ApproxSetBigint"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  (  \"  \"     +     (  (  \" SELECT   orderstatus ,    cardinality ( cast ( approx _ set ( custkey )    AS   P 4 HYPERLOGLOG )  )     \"     +     \" FROM   orders    \"  )     +     \" GROUP   BY   orderstatus \"  )  )  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    actual . getTypes (  )  )  . row (  \" O \"  ,     1  0  0  1 L )  . row (  \" F \"  ,     9  9  8 L )  . row (  \" P \"  ,     3  0  8 L )  . build (  )  ;", "yAssertions . assertEqualsIgnoreOrder ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testP4ApproxSetBigintGroupBy"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  \" SELECT   cardinality ( cast ( approx _ set ( CAST ( custkey   AS   DOUBLE )  )    AS   P 4 HYPERLOGLOG )  )    FROM   orders \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    BIGINT )  . row (  1  0  1  4 L )  . build (  )  ;", "assertEquals ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testP4ApproxSetDouble"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  (  \"  \"     +     (  (  \" SELECT   orderstatus ,    cardinality ( cast ( approx _ set ( CAST ( custkey   AS   DOUBLE )  )    AS   P 4 HYPERLOGLOG )  )     \"     +     \" FROM   orders    \"  )     +     \" GROUP   BY   orderstatus \"  )  )  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    actual . getTypes (  )  )  . row (  \" O \"  ,     1  0  1  1 L )  . row (  \" F \"  ,     1  0  1  1 L )  . row (  \" P \"  ,     3  0  6 L )  . build (  )  ;", "yAssertions . assertEqualsIgnoreOrder ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testP4ApproxSetDoubleGroupBy"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  (  \"  \"     +     (  (  \" SELECT   orderstatus ,    cardinality ( cast ( approx _ set ( IF ( custkey    %     2     <  >     0  ,    custkey )  )    AS   P 4 HYPERLOGLOG )  )     \"     +     \" FROM   orders    \"  )     +     \" GROUP   BY   orderstatus \"  )  )  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    actual . getTypes (  )  )  . row (  \" O \"  ,     4  9  5 L )  . row (  \" F \"  ,     4  9  1 L )  . row (  \" P \"  ,     1  5  3 L )  . build (  )  ;", "yAssertions . assertEqualsIgnoreOrder ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testP4ApproxSetGroupByWithNulls"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  (  \"  \"     +     (  (  \" SELECT   orderstatus ,    cardinality ( cast ( approx _ set ( IF ( orderstatus    !  =     ' O '  ,    custkey )  )    AS   P 4 HYPERLOGLOG )  )     \"     +     \" FROM   orders    \"  )     +     \" GROUP   BY   orderstatus \"  )  )  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    actual . getTypes (  )  )  . row (  \" O \"  ,    null )  . row (  \" F \"  ,     9  9  8 L )  . row (  \" P \"  ,     3  0  8 L )  . build (  )  ;", "yAssertions . assertEqualsIgnoreOrder ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testP4ApproxSetGroupByWithOnlyNullsInOneGroup"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  \" SELECT   cardinality ( cast ( approx _ set ( null )    AS   P 4 HYPERLOGLOG )  )    FROM   orders \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    actual . getTypes (  )  )  . row ( new   Object [  ]  {    null    }  )  . build (  )  ;", "assertEquals ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testP4ApproxSetOnlyNulls"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  \" SELECT   cardinality ( cast ( approx _ set ( CAST ( custkey   AS   VARCHAR )  )    AS   P 4 HYPERLOGLOG )  )    FROM   orders \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    BIGINT )  . row (  1  0  2  4 L )  . build (  )  ;", "assertEquals ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testP4ApproxSetVarchar"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  (  \"  \"     +     (  (  \" SELECT   orderstatus ,    cardinality ( cast ( approx _ set ( CAST ( custkey   AS   VARCHAR )  )    AS   P 4 HYPERLOGLOG )  )     \"     +     \" FROM   orders    \"  )     +     \" GROUP   BY   orderstatus \"  )  )  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    actual . getTypes (  )  )  . row (  \" O \"  ,     1  0  2  1 L )  . row (  \" F \"  ,     1  0  1  9 L )  . row (  \" P \"  ,     3  0  2 L )  . build (  )  ;", "yAssertions . assertEqualsIgnoreOrder ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testP4ApproxSetVarcharGroupBy"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  \" SELECT   cardinality ( cast ( approx _ set ( IF ( orderstatus    =     ' O '  ,    custkey )  )    AS   P 4 HYPERLOGLOG )  )    FROM   orders \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    actual . getTypes (  )  )  . row (  1  0  0  1 L )  . build (  )  ;", "assertEquals ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testP4ApproxSetWithNulls"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "try    {", "puteActual (  \" SELECT    ?  ,     1  \"  )  ;", "fail (  \" parameters   not   in   prepared   statements   should   fail \"  )  ;", "}    catch    ( SemanticException   e )     {", "assertEquals ( e . getCode (  )  ,    INVALID _ PARAMETER _ USAGE )  ;", "}    catch    ( RuntimeException   e )     {", "assertEquals ( e . getMessage (  )  ,     \" line    1  :  1  :    Incorrect   number   of   parameters :    expected    1    but   found    0  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["testParametersNonPreparedStatement"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  \" SELECT   foo   FROM \"  ,     \" line    1  :  1  6  :    no   viable   alternative   at   input .  *  \"  )  ;", "}", "METHOD_END"], "methodName": ["testParsingError"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  (  \"  \"     +     (  (  \" SELECT   orderkey ,    COUNT (  *  )    OVER    ( PARTITION   BY   orderkey ,    custkey )     \"     +     \" FROM    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    1  0  )     \"  )     +     \" ORDER   BY   orderkey   LIMIT    5  \"  )  )  ,     (  \" VALUES    (  1  ,     1  )  ,     \"     +     (  (  (  \"  (  2  ,     1  )  ,     \"     +     \"  (  3  ,     1  )  ,     \"  )     +     \"  (  4  ,     1  )  ,     \"  )     +     \"  (  5  ,     1  )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testPartialPrePartitionedWindowFunction"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  (  \" SELECT   orderkey ,    COUNT (  *  )    OVER    ( ORDER   BY   orderkey ,    custkey )     \"     +     (  \" FROM    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    1  0  )     \"     +     \" ORDER   BY   orderkey   LIMIT    5  \"  )  )  ,     (  \" VALUES    (  1  ,     1  )  ,     \"     +     (  (  (  \"  (  2  ,     2  )  ,     \"     +     \"  (  3  ,     3  )  ,     \"  )     +     \"  (  4  ,     4  )  ,     \"  )     +     \"  (  5  ,     5  )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testPartialPreSortedWindowFunction"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  \" SELECT   COUNT (  *  )  \\ n \"     +     \" FROM   lineitem    \\ n \"  )     +     \" LEFT   JOIN    (  \\ n \"  )     +     \"       SELECT    *    FROM   orders   WHERE   orders . orderkey    %     2     =     0  \\ n \"  )     +     \"  )    orders    \\ n \"  )     +     \" ON   lineitem . orderkey    =    orders . orderkey    \\ n \"  )     +     \" WHERE   lineitem . orderkey    %     4     =     0  \\ n \"  )     +     \"       AND    ( lineitem . suppkey    %     2     =    orders . orderkey    %     2    OR   orders . orderkey   IS   NULL )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testPlainLeftJoinPredicatePushdown"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  \" SELECT   COUNT (  *  )  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT    *    FROM   orders   WHERE   orders . orderkey    %     2     =     0  \\ n \"  )     +     \"  )    orders    \\ n \"  )     +     \" RIGHT   JOIN   lineitem \\ n \"  )     +     \" ON   lineitem . orderkey    =    orders . orderkey    \\ n \"  )     +     \" WHERE   lineitem . orderkey    %     4     =     0  \\ n \"  )     +     \"       AND    ( lineitem . suppkey    %     2     =    orders . orderkey    %     2    OR   orders . orderkey   IS   NULL )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testPlainRightJoinPredicatePushdown"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT   orderkey +  1    AS   a   FROM   orders   WHERE   orderstatus    =     \\  ' F \\  '    UNION   ALL    \\ n \"  )     +     \"       SELECT   orderkey   FROM   orders   WHERE   orderkey    %     2     =     0    UNION   ALL    \\ n \"  )     +     \"        ( SELECT   orderkey + custkey   FROM   orders   ORDER   BY   orderkey   LIMIT    1  0  )  \\ n \"  )     +     \"  )     \\ n \"  )     +     \" WHERE   a    <     2  0    OR   a    >     1  0  0     \\ n \"  )     +     \" ORDER   BY   a \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testPredicatePushdown"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  (  (  (  (  (  (  \" SELECT    *  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT   custkey   custkey 1  ,    custkey %  4    custkey 1 a ,    custkey %  8    custkey 1 b ,    custkey %  1  6    custkey 1 c \\ n \"  )     +     \"       FROM   orders \\ n \"  )     +     \"  )    orders 1     \\ n \"  )     +     \" JOIN    (  \\ n \"  )     +     \"       SELECT   custkey   custkey 2  ,    custkey %  4    custkey 2 a ,    custkey %  8    custkey 2 b \\ n \"  )     +     \"       FROM   orders \\ n \"  )     +     \"  )    orders 2    ON   orders 1  . custkey 1     =    orders 2  . custkey 2  \\ n \"  )     +     \" WHERE   custkey 2 a    =    custkey 2 b \\ n \"  )     +     \"       AND   custkey 1     =    custkey 1 a \\ n \"  )     +     \"       AND   custkey 2     =    custkey 2 a \\ n \"  )     +     \"       AND   custkey 1 a    =    custkey 1 c \\ n \"  )     +     \"       AND   custkey 1 b    =    custkey 1 c \\ n \"  )     +     \"       AND   custkey 1 b    %     2     =     0  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testPredicatePushdownJoinEqualityGroups"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "List < QueryTemplate . Parameter >    leftValues    =    QueryTemplate . parameter (  \" left \"  )  . of (  \"  \"  ,     \"  1     =     \"  ,     \" EXISTS \"  ,     \"  1    IN \"  ,     \"  1     =    ANY \"  ,     \"  1     =    ALL \"  ,     \"  2     <  >    ANY \"  ,     \"  2     <  >    ALL \"  ,     \"  0     <    ALL \"  ,     \"  0     <    ANY \"  ,     \"  1     <  =    ALL \"  ,     \"  1     <  =    ANY \"  )  ;", "QueryTemplate . queryTemplate (  \" SELECT    % left %     ( SELECT    1    WHERE    2     =     ?  )  \"  )  . replaceAll ( leftValues )  . forEach (  (    query )     -  >     {", "Session   session    =    Session . builder ( getSession (  )  )  . addPreparedStatement (  \" my _ query \"  ,    query )  . build (  )  ;", "assery ( session ,     \" EXECUTE   my _ query   USING    2  \"  ,     \" SELECT   true \"  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["testPreparedStatementWithSubqueries"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery ( noJoinReordering (  )  ,     \" SELECT    *    FROM    ( SELECT    *    FROM   lineitem   WHERE   orderkey    %     2     =     0  )    a   LEFT   JOIN   orders   ON   a . orderkey    =    orders . orderkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testProbeFilteredLeftJoin"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery ( noJoinReordering (  )  ,     \" SELECT   custkey ,    linestatus ,    tax ,    totalprice ,    orderstatus   FROM   lineitem   RIGHT   JOIN    ( SELECT    *       FROM   orders   WHERE   orderkey    %     2     =     0  )    a   ON   lineitem . orderkey    =    a . orderkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testProbeFilteredRightJoin"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM    ( SELECT   SUM ( orderkey )    FROM   orders )  \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM    ( SELECT   SUM ( orderkey )    FROM   orders   GROUP   BY   custkey )  \"  ,     \" VALUES    1  0  0  0  \"  )  ;", "assertQuery (  \" SELECT   count (  *  )    FROM    ( VALUES    2  )    t ( a )    GROUP   BY   a \"  ,     \" VALUES    1  \"  )  ;", "assertQuery (  \" SELECT   a ,    count (  *  )    FROM    ( VALUES    2  )    t ( a )    GROUP   BY   a \"  ,     \" VALUES    (  2  ,     1  )  \"  )  ;", "assertQuery (  \" SELECT   count (  *  )    FROM    ( VALUES    2  )    t ( a )    GROUP   BY   a +  1  \"  ,     \" VALUES    1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testPruningCountAggregationOverScalar"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   orders .  *    FROM   orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testQualifiedWildcard"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   T .  *    FROM   orders   T \"  )  ;", "}", "METHOD_END"], "methodName": ["testQualifiedWildcardFromAlias"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   T .  *    FROM    ( SELECT   orderkey    +    custkey   FROM   orders )    T \"  )  ;", "}", "METHOD_END"], "methodName": ["testQualifiedWildcardFromInlineView"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   a .  *  ,    b .  *    FROM    ( SELECT   orderkey ,    partkey   FROM   lineitem )    a   JOIN    ( SELECT   orderkey ,    custkey   FROM   orders )    b   using    ( orderkey )  \"  ,     \" SELECT   a . partkey ,    b . custkey   FROM    ( SELECT   orderkey ,    partkey   FROM   lineitem )    a   JOIN    ( SELECT   orderkey ,    custkey   FROM   orders )    b   on   a . orderkey    =    b . orderkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testQualifiedWildcardFromJoin"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   nationkey ,    name ,    regionkey   FROM   nation   WHERE   regionkey    =    ANY    ( SELECT   regionkey   FROM   region   WHERE   name   IN    (  ' ASIA '  ,     ' EUROPE '  )  )  \"  )  ;", "assertQuery (  \" SELECT   nationkey ,    name ,    regionkey   FROM   nation   WHERE   regionkey    =    ALL    ( SELECT   regionkey   FROM   region   WHERE   name   IN    (  ' ASIA '  ,     ' EUROPE '  )  )  \"  )  ;", "assertQuery (  \" SELECT   nationkey ,    name ,    regionkey   FROM   nation   WHERE   regionkey    <  >    ANY    ( SELECT   regionkey   FROM   region   WHERE   name   IN    (  ' ASIA '  ,     ' EUROPE '  )  )  \"  )  ;", "assertQuery (  \" SELECT   nationkey ,    name ,    regionkey   FROM   nation   WHERE   regionkey    <  >    ALL    ( SELECT   regionkey   FROM   region   WHERE   name   IN    (  ' ASIA '  ,     ' EUROPE '  )  )  \"  )  ;", "assertQuery (  \" SELECT   nationkey ,    name ,    regionkey   FROM   nation   WHERE   regionkey    =    ALL    ( SELECT   regionkey   FROM   region   WHERE   name   IN    (  ' ASIA '  )  )  \"  )  ;", "assertQuery (  \" SELECT   nationkey ,    name ,    regionkey   FROM   nation   WHERE   regionkey    <  >    ALL    ( SELECT   regionkey   FROM   region   WHERE   name   IN    (  ' ASIA '  )  )  \"  )  ;", "assertQuery (  \" SELECT   nationkey ,    name ,    regionkey   FROM   nation   WHERE   regionkey    =    ANY    ( SELECT   regionkey   FROM   region   WHERE   name   IN    (  ' EUROPE '  )  )  \"  )  ;", "assertQuery (  \" SELECT   nationkey ,    name ,    regionkey   FROM   nation   WHERE   regionkey    <  >    ANY    ( SELECT   regionkey   FROM   region   WHERE   name   IN    (  ' EUROPE '  )  )  \"  )  ;", "assertQuery (  \" SELECT   nationkey ,    name ,    regionkey   FROM   nation   WHERE   regionkey    <    SOME    ( SELECT   regionkey   FROM   region   WHERE   name   IN    (  ' ASIA '  ,     ' EUROPE '  )  )  \"  )  ;", "assertQuery (  \" SELECT   nationkey ,    name ,    regionkey   FROM   nation   WHERE   regionkey    <  =    ANY    ( SELECT   regionkey   FROM   region   WHERE   name   IN    (  ' ASIA '  ,     ' EUROPE '  )  )  \"  )  ;", "assertQuery (  \" SELECT   nationkey ,    name ,    regionkey   FROM   nation   WHERE   regionkey    >    ANY    ( SELECT   regionkey   FROM   region   WHERE   name   IN    (  ' ASIA '  ,     ' EUROPE '  )  )  \"  )  ;", "assertQuery (  \" SELECT   nationkey ,    name ,    regionkey   FROM   nation   WHERE   regionkey    >  =    SOME    ( SELECT   regionkey   FROM   region   WHERE   name   IN    (  ' ASIA '  ,     ' EUROPE '  )  )  \"  )  ;", "assertQuery (  \" SELECT   nationkey ,    name ,    regionkey   FROM   nation   WHERE   regionkey    <    ALL    ( SELECT   regionkey   FROM   region   WHERE   name   IN    (  ' ASIA '  ,     ' EUROPE '  )  )  \"  )  ;", "assertQuery (  \" SELECT   nationkey ,    name ,    regionkey   FROM   nation   WHERE   regionkey    <  =    ALL    ( SELECT   regionkey   FROM   region   WHERE   name   IN    (  ' ASIA '  ,     ' EUROPE '  )  )  \"  )  ;", "assertQuery (  \" SELECT   nationkey ,    name ,    regionkey   FROM   nation   WHERE   regionkey    >    ALL    ( SELECT   regionkey   FROM   region   WHERE   name   IN    (  ' ASIA '  ,     ' EUROPE '  )  )  \"  )  ;", "assertQuery (  \" SELECT   nationkey ,    name ,    regionkey   FROM   nation   WHERE   regionkey    >  =    ALL    ( SELECT   regionkey   FROM   region   WHERE   name   IN    (  ' ASIA '  ,     ' EUROPE '  )  )  \"  )  ;", "assertQuery (  \" SELECT    1  .  0     <    ALL ( SELECT    1  )  ,     1     <    ALL ( SELECT    1  )  \"  )  ;", "assertQuery (  \" SELECT    1  .  0     <    ANY ( SELECT    1  )  ,     1     <    ANY ( SELECT    1  )  \"  )  ;", "assertQuery (  \" SELECT    1  .  0     <  =    ALL ( SELECT    1  )    WHERE    1     <  =    ALL ( SELECT    1  )  \"  )  ;", "assertQuery (  \" SELECT    1  .  0     <  =    ANY ( SELECT    1  )    WHERE    1     <  =    ANY ( SELECT    1  )  \"  )  ;", "assertQuery (  \" SELECT    1  .  0     <  =    ALL ( SELECT    1  )  ,     1     <  =    ALL ( SELECT    1  )    WHERE    1     <  =    ALL ( SELECT    1  )  \"  )  ;", "assertQuery (  \" SELECT    1  .  0     <  =    ANY ( SELECT    1  )  ,     1     <  =    ANY ( SELECT    1  )    WHERE    1     <  =    ANY ( SELECT    1  )  \"  )  ;", "assertQuery (  \" SELECT    1  .  0     =    ALL ( SELECT    1  )    WHERE    1     =    ALL ( SELECT    1  )  \"  )  ;", "assertQuery (  \" SELECT    1  .  0     =    ANY ( SELECT    1  )    WHERE    1     =    ANY ( SELECT    1  )  \"  )  ;", "assertQuery (  \" SELECT    1  .  0     =    ALL ( SELECT    1  )  ,     2     =    ALL ( SELECT    1  )    WHERE    1     =    ALL ( SELECT    1  )  \"  )  ;", "assertQuery (  \" SELECT    1  .  0     =    ANY ( SELECT    1  )  ,     2     =    ANY ( SELECT    1  )    WHERE    1     =    ANY ( SELECT    1  )  \"  )  ;", "assertQuery (  \" SELECT   CAST (  1    AS   decimal (  3  ,  2  )  )     <    ALL ( SELECT   CAST (  1    AS   decimal (  3  ,  1  )  )  )  \"  )  ;", "assertQuery (  \" SELECT   CAST (  1    AS   decimal (  3  ,  2  )  )     <    ANY ( SELECT   CAST (  1    AS   decimal (  3  ,  1  )  )  )  \"  )  ;", "assertQuery (  \" SELECT   CAST (  1    AS   decimal (  3  ,  2  )  )     <  =    ALL ( SELECT   CAST (  1    AS   decimal (  3  ,  1  )  )  )  \"  )  ;", "assertQuery (  \" SELECT   CAST (  1    AS   decimal (  3  ,  2  )  )     <  =    ANY ( SELECT   CAST (  1    AS   decimal (  3  ,  1  )  )  )  \"  )  ;", "assertQuery (  \" SELECT   CAST (  1    AS   decimal (  3  ,  2  )  )     =    ALL ( SELECT   CAST (  1    AS   decimal (  3  ,  1  )  )  )  \"  )  ;", "assertQuery (  \" SELECT   CAST (  1    AS   decimal (  3  ,  2  )  )     =    ANY ( SELECT   CAST (  1    AS   decimal (  3  ,  1  )  )  )  \"  ,     \" SELECT   true \"  )  ;", "assertQuery (  \" SELECT   CAST (  1    AS   decimal (  3  ,  2  )  )     <  >    ALL ( SELECT   CAST (  1    AS   decimal (  3  ,  1  )  )  )  \"  )  ;", "assertQuery (  \" SELECT   CAST (  1    AS   decimal (  3  ,  2  )  )     <  >    ANY ( SELECT   CAST (  1    AS   decimal (  3  ,  1  )  )  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testQuantifiedComparison"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery ( query )  ;", "}", "METHOD_END"], "methodName": ["testQuantifiedComparisonCornerCases"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    \\  \" TOTALPRICE \\  \"     \\  \" my   price \\  \"    FROM    \\  \" ORDERS \\  \"  \"  )  ;", "}", "METHOD_END"], "methodName": ["testQuotedIdentifiers"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  \" SELECT   COUNT (  *  )     \"     +     \" FROM    ( SELECT    *    FROM   orders   ORDER   BY   rand (  )    LIMIT    5  )    a    \"  )     +     \" CROSS   JOIN    ( SELECT    *    FROM   lineitem   ORDER   BY   rand (  )    LIMIT    5  )    b \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testRandCrossJoins"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" WITH   a   AS    ( SELECT    *    FROM   orders )  \"     +     (  (  \" SELECT    *    FROM    (  \"     +     \"          SELECT    *    FROM   a \"  )     +     \"  )  \"  )  )  ,     \" SELECT    *    FROM   orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testReferenceToWithQueryInFromClause"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   SUM ( orderkey )  ,    SUM ( orderkey )    FROM   orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testRepeatedAggregations"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   orderkey   a ,    orderkey   b   FROM   orders   WHERE   orderstatus    =     ' F '  \"  )  ;", "}", "METHOD_END"], "methodName": ["testRepeatedOutputs"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   orderdate ,    orderdate ,    orderkey   FROM   orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testRepeatedOutputs2"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   custkey ,    linestatus ,    tax ,    totalprice ,    orderstatus   FROM   lineitem   JOIN    ( SELECT    *       FROM   orders   WHERE   orderkey    %     2     =     0  )    a   ON   lineitem . orderkey    =    a . orderkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testRightFilteredJoin"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  \" SELECT   COUNT (  *  )  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT    *    FROM   orders   WHERE   orders . orderkey    %     2     =     0  \\ n \"  )     +     \"  )    orders \\ n \"  )     +     \" RIGHT   JOIN   lineitem \\ n \"  )     +     \" ON   lineitem . orderkey    =    orders . orderkey    \\ n \"  )     +     \" WHERE   orders . orderkey    %     4     =     0  \\ n \"  )     +     \"       AND    ( lineitem . suppkey    %     2     =    orders . orderkey    %     2    OR   orders . custkey   IS   NULL )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testRightJoinAsInnerPredicatePushdown"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   RIGHT   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   lineitem . orderkey    =    orders . custkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testRightJoinDoubleClauseWithLeftOverlap"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   RIGHT   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   orders . orderkey    =    lineitem . partkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testRightJoinDoubleClauseWithRightOverlap"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   COUNT (  *  )  \\ n \"     +     (  (  (  \" FROM    ( SELECT    *    FROM   orders   WHERE   orderkey    %     4     =     0  )    orders \\ n \"     +     \" RIGHT   JOIN    ( SELECT    *    FROM   lineitem   WHERE   orderkey    %     4     =     0    AND   suppkey    %     2     =    partkey    %     2    AND   linenumber    %     3     =    orderkey    %     3  )    lineitem \\ n \"  )     +     \" ON   lineitem . linenumber    %     3     =    orders . orderkey    %     4    AND   lineitem . orderkey    %     3     =    orders . custkey    %     3  \\ n \"  )     +     \" WHERE   lineitem . suppkey    %     2     =    lineitem . linenumber    %     3  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testRightJoinEqualityInference"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   RIGHT   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   WHERE   lineitem . orderkey   IS   NOT   NULL \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   RIGHT   JOIN   orders   ON   lineitem . orderkey    =    orders . custkey   WHERE   lineitem . orderkey   IS   NOT   NULL \"  )  ;", "}", "METHOD_END"], "methodName": ["testRightJoinNormalizedToInner"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   COUNT (  *  )  \\ n \"     +     (  (  (  \" FROM    ( SELECT    *    FROM   orders   WHERE   orderkey    %     1  6     =     0    AND   custkey    %     2     =     0  )    orders \\ n \"     +     \" RIGHT   JOIN    ( SELECT    *    FROM   lineitem   WHERE   orderkey    %     1  6     =     0    AND   partkey    %     2     =     0  )    lineitem \\ n \"  )     +     \" ON   lineitem . orderkey    %     8     =    orders . orderkey    %     8  \\ n \"  )     +     \" WHERE    ( orders . custkey    %     8     <     7    OR   orders . custkey    %     8    IS   NULL )    AND   orders . custkey    %     8     =    lineitem . orderkey    %     8  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testRightJoinPredicateMoveAround"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  \" SELECT   COUNT (  *  )  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT    *    FROM   orders   WHERE   orders . orderkey    %     2     =     0  \\ n \"  )     +     \"  )    orders    \\ n \"  )     +     \" RIGHT   JOIN   lineitem \\ n \"  )     +     \" ON   lineitem . orderkey    =    orders . orderkey    \\ n \"  )     +     \" WHERE   orders . orderkey    =    orders . orderkey \\ n \"  )     +     \"       AND   lineitem . orderkey    %     4     =     0  \\ n \"  )     +     \"       AND    ( lineitem . suppkey    %     2     =    orders . orderkey    %     2    OR   orders . orderkey   IS   NULL )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testRightJoinPredicatePushdownWithSelfEquality"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery ( noJoinReordering (  )  ,     \" WITH   small _ part   AS    ( SELECT    *    FROM   part   WHERE   name    =     ' a '  )    SELECT   lineitem . orderkey   FROM   lineitem   RIGHT   JOIN   small _ part   ON   lineitem . partkey    =    small _ part . partkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testRightJoinWithEmptyBuildSide"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    *    FROM   orders   b   RIGHT   JOIN    ( SELECT    *    FROM   orders   WHERE   orderkey    =    rand (  )  )    a   ON   a . orderkey    =    b . orderkey \"  )  ;", "assertQuery (  \" SELECT    *    FROM   orders   b   LEFT   JOIN    ( SELECT    *    FROM   orders   WHERE   orderkey    =    rand (  )  )    a   ON   a . orderkey    >    b . orderkey \"  )  ;", "assertQuery (  \" SELECT    *    FROM   orders   b   LEFT   JOIN    ( SELECT    *    FROM   orders   WHERE   orderkey    =    rand (  )  )    a   ON    1     =     1  \"  )  ;", "assertQuery (  \" SELECT    *    FROM   orders   b   LEFT   JOIN    ( SELECT    *    FROM   orders   WHERE   orderkey    =    rand (  )  )    a   ON   b . orderkey    >     1  \"  )  ;", "assertQuery (  \" SELECT    *    FROM   orders   b   LEFT   JOIN    ( SELECT    *    FROM   orders   WHERE   orderkey    =    rand (  )  )    a   ON   b . orderkey    >    b . totalprice \"  )  ;", "}", "METHOD_END"], "methodName": ["testRightJoinWithEmptyInnerTable"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery ( noJoinReordering (  )  ,     \" WITH   small _ part   AS    ( SELECT    *    FROM   part   WHERE   name    =     ' a '  )    SELECT   lineitem . orderkey   FROM   small _ part   RIGHT   JOIN   lineitem   ON      small _ part . partkey    =    lineitem . partkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testRightJoinWithEmptyProbeSide"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM    ( SELECT    *    FROM   lineitem   WHERE   orderkey    %     1  0  2  4     =     0  )    lineitem   RIGHT   JOIN   orders   ON   orders . orderkey    =     1  0  2  4  \"  )  ;", "}", "METHOD_END"], "methodName": ["testRightJoinWithLeftConstantEquality"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  (  (  (  \" SELECT   lineitem . orderkey ,    orders . orderkey \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT   CASE   WHEN   orderkey    %     3     =     0    THEN   NULL   ELSE   orderkey   END   AS   orderkey \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   partkey    %     5  1  2     =     0  \\ n \"  )     +     \"  )    AS   lineitem    \\ n \"  )     +     \" RIGHT   JOIN    (  \\ n \"  )     +     \"       SELECT   CASE   WHEN   orderkey    %     2     =     0    THEN   NULL   ELSE   orderkey   END   AS   orderkey \\ n \"  )     +     \"       FROM   orders \\ n \"  )     +     \"       WHERE   custkey    %     5  1  2     =     0  \\ n \"  )     +     \"  )    AS   orders \\ n \"  )     +     \" ON   lineitem . orderkey    =    orders . orderkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testRightJoinWithNullValues"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM    ( SELECT    *    FROM   lineitem   WHERE   orderkey    %     1  0  2  4     =     0  )    lineitem   RIGHT   JOIN   orders   ON   lineitem . orderkey    =     1  0  2  4  \"  )  ;", "}", "METHOD_END"], "methodName": ["testRightJoinWithRightConstantEquality"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  \" SELECT   orderstatus ,    sum ( orderkey )  \\ n \"     +     \" FROM    ( SELECT   orderkey ,    orderstatus \\ n \"  )     +     \"                   FROM   orders \\ n \"  )     +     \"                   UNION   ALL \\ n \"  )     +     \"                   SELECT   orderkey ,    orderstatus \\ n \"  )     +     \"                   FROM   orders )    x \\ n \"  )     +     \" GROUP   BY   ROLLUP    ( orderstatus )  \"  )  )  ,     (  \" VALUES    (  \\  ' P \\  '  ,     2  1  4  7  0  0  0  0  )  ,  \\ n \"     +     (  (  \"  (  \\  ' O \\  '  ,     4  3  9  7  7  4  3  3  0  )  ,  \\ n \"     +     \"  (  \\  ' F \\  '  ,     4  3  8  5  0  0  6  7  0  )  ,  \\ n \"  )     +     \"  ( NULL ,     8  9  9  7  4  5  0  0  0  )  \"  )  )  )  ;", "assertQuery (  (  \" SELECT   regionkey ,    count (  *  )    FROM    (  \"     +     (  (  (  \"          SELECT   regionkey   FROM   nation    \"     +     \"          UNION   ALL    \"  )     +     \"          SELECT    *    FROM    ( VALUES    2  ,     1  0  0  )    t ( regionkey )  )     \"  )     +     \" GROUP   BY   ROLLUP    ( regionkey )  \"  )  )  ,     \" SELECT    *    FROM    ( VALUES       (  0  ,     5  )  ,     (  1  ,     5  )  ,     (  2  ,     6  )  ,     (  3  ,     5  )  ,     (  4  ,     5  )  ,     (  1  0  0  ,     1  )  ,     ( NULL ,     2  7  )  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testRollupOverUnion"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   CAST ( row (  1  ,     2  )    AS   row ( aa   bigint ,    bb   boolean )  )  . aa \"  ,     \" SELECT    1  \"  )  ;", "assertQuery (  \" SELECT   CAST ( row (  1  ,     2  )    AS   row ( aa   bigint ,    bb   boolean )  )  . bb \"  ,     \" SELECT   true \"  )  ;", "assertQuery (  \" SELECT   CAST ( row (  1  ,     2  )    AS   row ( aa   bigint ,    bb   varchar )  )  . bb \"  ,     \" SELECT    '  2  '  \"  )  ;", "assertQuery (  \" SELECT   CAST ( row ( true ,    array [  0  ,     2  ]  )    AS   row ( aa   boolean ,    bb   array ( boolean )  )  )  . bb [  1  ]  \"  ,     \" SELECT   false \"  )  ;", "assertQuery (  \" SELECT   CAST ( row (  0  .  1  ,    array [  0  ,     2  ]  ,    row (  1  ,     0  .  5  )  )    AS   row ( aa   bigint ,    bb   array ( boolean )  ,    cc   row ( dd   varchar ,    ee   varchar )  )  )  . cc . ee \"  ,     \" SELECT    '  0  .  5  '  \"  )  ;", "assertQuery (  \" SELECT   CAST ( array [ row (  0  .  1  ,    array [  0  ,     2  ]  ,    row (  1  ,     0  .  5  )  )  ]    AS   array < row ( aa   bigint ,    bb   array ( boolean )  ,    cc   row ( dd   varchar ,    ee   varchar )  )  >  )  [  1  ]  . cc . ee \"  ,     \" SELECT    '  0  .  5  '  \"  )  ;", "}", "METHOD_END"], "methodName": ["testRowCast"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   a . col 0    FROM    ( VALUES   ROW    ( CAST ( ROW (  1  ,     2  )    AS   ROW ( col 0    integer ,    col 1    integer )  )  )  )    AS   t    ( a )  \"  ,     \" SELECT    1  \"  )  ;", "assertQuery (  \" SELECT   a . col 0    FROM    ( VALUES   ROW    ( CAST ( ROW (  1  .  0 E 0  ,     2  .  0 E 0  )    AS   ROW ( col 0    integer ,    col 1    integer )  )  )  )    AS   t    ( a )  \"  ,     \" SELECT    1  .  0  \"  )  ;", "assertQuery (  \" SELECT   a . col 0    FROM    ( VALUES   ROW    ( CAST ( ROW ( TRUE ,    FALSE )    AS   ROW ( col 0    boolean ,    col 1    boolean )  )  )  )    AS   t    ( a )  \"  ,     \" SELECT   TRUE \"  )  ;", "assertQuery (  \" SELECT   a . col 1    FROM    ( VALUES   ROW    ( CAST ( ROW (  1  .  0  ,     ' kittens '  )    AS   ROW ( col 0    varchar ,    col 1    varchar )  )  )  )    AS   t    ( a )  \"  ,     \" SELECT    ' kittens '  \"  )  ;", "assertQuery (  \" SELECT   a . col 2  . col 1    FROM    ( VALUES   ROW ( CAST ( ROW (  1  .  0  ,    ARRAY [  2  ]  ,    row (  3  ,     4  .  0  )  )    AS   ROW ( col 0    double ,    col 1    array ( int )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )  )    t ( a )  \"  ,     \" SELECT    4  .  0  \"  )  ;", "assertQuery (  \" SELECT   CAST ( row (  1  ,    t . x )    AS   row ( col 0    bigint ,    col 1    bigint )  )  . col 1    FROM    ( VALUES    1  ,     2  ,     3  )    t ( x )  \"  ,     \" SELECT    *    FROM    ( VALUES    1  ,     2  ,     3  )  \"  )  ;", "assertQuery (  \" SELECT   Y . col 1    FROM    ( SELECT   CAST ( row (  1  ,    t . x )    AS   row ( col 0    bigint ,    col 1    bigint )  )    AS   Y   FROM    ( VALUES    1  ,     2  ,     3  )    t ( x )  )    test _ t \"  ,     \" SELECT    *    FROM    ( VALUES    1  ,     2  ,     3  )  \"  )  ;", "assertQuery (  \" SELECT   a . col 1  [  2  ]    FROM    ( VALUES   ROW ( CAST ( ROW (  1  .  0  ,    ARRAY [  2  2  ,     3  3  ,     4  4  ,     5  5  ]  ,    row (  3  ,     4  .  0 E 0  )  )    AS   ROW ( col 0    double ,    col 1    array ( integer )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )  )    t ( a )  \"  ,     \" SELECT    3  3  \"  )  ;", "assertQuery (  \" SELECT   a . col 1  [  2  ]  . col 0  ,    a . col 1  [  2  ]  . col 1    FROM    ( VALUES   ROW ( cast ( row (  1  .  0  ,    ARRAY [ row (  3  1  ,     4  .  1 E 0  )  ,    row (  3  2  ,     4  .  2 E 0  )  ]  ,    row (  3  ,     4  .  0 E 0  )  )    AS   ROW ( col 0    double ,    col 1    array ( row ( col 0    integer ,    col 1    double )  )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )  )    t ( a )  \"  ,     \" SELECT    3  2  ,     4  .  2  \"  )  ;", "assertQuery (  \" SELECT   CAST ( row (  1  1  ,     1  2  )    AS   row ( col 0    bigint ,    col 1    bigint )  )  . col 0  \"  ,     \" SELECT    1  1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testRowFieldAccessor"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   a . col 0  ,    SUM ( a . col 1  [  2  ]  )  ,    SUM ( a . col 2  . col 0  )  ,    SUM ( a . col 2  . col 1  )    FROM    \"     +     (  (  (  (  \"  ( VALUES    \"     +     \" ROW ( CAST ( ROW (  1  .  0  ,    ARRAY [  2  ,     1  3  ,     4  ]  ,    row (  1  1  ,     4  .  1 E 0  )  )          AS   ROW ( col 0    double ,    col 1    array ( integer )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )  ,     \"  )     +     \" ROW ( CAST ( ROW (  2  .  0  ,    ARRAY [  2  ,     2  3  ,     4  ]  ,    row (  1  2  ,     1  4  .  0 E 0  )  )       AS   ROW ( col 0    double ,    col 1    array ( integer )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )  ,     \"  )     +     \" ROW ( CAST ( ROW (  1  .  0  ,    ARRAY [  2  2  ,     3  3  ,     4  4  ]  ,    row (  1  3  ,     5  .  0 E 0  )  )    AS   ROW ( col 0    double ,    col 1    array ( integer )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )  )    t ( a )     \"  )     +     \" GROUP   BY   a . col 0  \"  )  )  ,     \" SELECT    *    FROM   VALUES    (  1  .  0  ,     4  6  ,     2  4  ,     9  .  1  )  ,     (  2  .  0  ,     2  3  ,     1  2  ,     1  4  .  0  )  \"  )  ;", "assertQuery (  (  \" SELECT   a . col 2  . col 0  ,    SUM ( a . col 0  )  ,    SUM ( a . col 1  [  2  ]  )  ,    SUM ( a . col 2  . col 1  )    FROM    \"     +     (  (  (  (  \"  ( VALUES    \"     +     \" ROW ( CAST ( ROW (  1  .  0  ,    ARRAY [  2  ,     1  3  ,     4  ]  ,    row (  1  1  ,     4  .  1 E 0  )  )          AS   ROW ( col 0    double ,    col 1    array ( integer )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )  ,     \"  )     +     \" ROW ( CAST ( ROW (  2  .  0  ,    ARRAY [  2  ,     2  3  ,     4  ]  ,    row (  1  1  ,     1  4  .  0 E 0  )  )       AS   ROW ( col 0    double ,    col 1    array ( integer )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )  ,     \"  )     +     \" ROW ( CAST ( ROW (  7  .  0  ,    ARRAY [  2  2  ,     3  3  ,     4  4  ]  ,    row (  1  3  ,     5  .  0 E 0  )  )    AS   ROW ( col 0    double ,    col 1    array ( integer )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )  )    t ( a )     \"  )     +     \" GROUP   BY   a . col 2  . col 0  \"  )  )  ,     \" SELECT    *    FROM   VALUES    (  1  1  ,     3  .  0  ,     3  6  ,     1  8  .  1  )  ,     (  1  3  ,     7  .  0  ,     3  3  ,     5  .  0  )  \"  )  ;", "assertQuery (  (  \" SELECT   a . col 1  [  1  ]  . col 0  ,    SUM ( a . col 0  )  ,    SUM ( a . col 1  [  1  ]  . col 1  )  ,    SUM ( a . col 1  [  2  ]  . col 0  )  ,    SUM ( a . col 2  . col 1  )    FROM    \"     +     (  (  (  (  \"  ( VALUES    \"     +     \" ROW ( CAST ( ROW (  1  .  0  ,    ARRAY [ row (  3  1  ,     4  .  5 E 0  )  ,    row (  1  2  ,     4  .  2 E 0  )  ]  ,    row (  3  ,     4  .  0 E 0  )  )    AS   ROW ( col 0    double ,    col 1    array ( row ( col 0    integer ,    col 1    double )  )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )  ,     \"  )     +     \" ROW ( CAST ( ROW (  3  .  1  ,    ARRAY [ row (  4  1  ,     3  .  1 E 0  )  ,    row (  3  2  ,     4  .  2 E 0  )  ]  ,    row (  6  ,     6  .  0 E 0  )  )    AS   ROW ( col 0    double ,    col 1    array ( row ( col 0    integer ,    col 1    double )  )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )  ,     \"  )     +     \" ROW ( CAST ( ROW (  2  .  2  ,    ARRAY [ row (  3  1  ,     4  .  2 E 0  )  ,    row (  2  2  ,     4  .  2 E 0  )  ]  ,    row (  5  ,     4  .  0 E 0  )  )    AS   ROW ( col 0    double ,    col 1    array ( row ( col 0    integer ,    col 1    double )  )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )  )    t ( a )     \"  )     +     \" GROUP   BY   a . col 1  [  1  ]  . col 0  \"  )  )  ,     \" SELECT    *    FROM   VALUES    (  3  1  ,     3  .  2  ,     8  .  7  ,     3  4  ,     8  .  0  )  ,     (  4  1  ,     3  .  1  ,     3  .  1  ,     3  2  ,     6  .  0  )  \"  )  ;", "assertQuery (  (  \" SELECT   a . col 1  [  1  ]  . col 0  ,    SUM ( a . col 0  )  ,    SUM ( a . col 1  [  1  ]  . col 1  )  ,    SUM ( a . col 1  [  2  ]  . col 0  )  ,    SUM ( a . col 2  . col 1  )    FROM    \"     +     (  (  (  (  (  (  \"  ( VALUES    \"     +     \" ROW ( CAST ( ROW (  2  .  2  ,    ARRAY [ row (  3  1  ,     4  .  2 E 0  )  ,    row (  2  2  ,     4  .  2 E 0  )  ]  ,    row (  5  ,     4  .  0 E 0  )  )    AS   ROW ( col 0    double ,    col 1    array ( row ( col 0    integer ,    col 1    double )  )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )  ,     \"  )     +     \" ROW ( CAST ( ROW (  1  .  0  ,    ARRAY [ row (  3  1  ,     4  .  5 E 0  )  ,    row (  1  2  ,     4  .  2 E 0  )  ]  ,    row (  3  ,     4  .  1 E 0  )  )    AS   ROW ( col 0    double ,    col 1    array ( row ( col 0    integer ,    col 1    double )  )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )  ,     \"  )     +     \" ROW ( CAST ( ROW (  3  .  1  ,    ARRAY [ row (  4  1  ,     3  .  1 E 0  )  ,    row (  3  2  ,     4  .  2 E 0  )  ]  ,    row (  6  ,     6  .  0 E 0  )  )    AS   ROW ( col 0    double ,    col 1    array ( row ( col 0    integer ,    col 1    double )  )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )  ,     \"  )     +     \" ROW ( CAST ( ROW (  3  .  3  ,    ARRAY [ row (  4  1  ,     3  .  1 E 0  )  ,    row (  3  2  ,     4  .  2 E 0  )  ]  ,    row (  6  ,     6  .  0 E 0  )  )    AS   ROW ( col 0    double ,    col 1    array ( row ( col 0    integer ,    col 1    double )  )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )     \"  )     +     \"  )    t ( a )     \"  )     +     \" GROUP   BY   a . col 1  [  1  ]  \"  )  )  ,     \" SELECT    *    FROM   VALUES    (  3  1  ,     2  .  2  ,     4  .  2  ,     2  2  ,     4  .  0  )  ,     (  3  1  ,     1  .  0  ,     4  .  5  ,     1  2  ,     4  .  1  )  ,     (  4  1  ,     6  .  4  ,     6  .  2  ,     6  4  ,     1  2  .  0  )  \"  )  ;", "assertQuery (  (  \" SELECT   a . col 1  [  2  ]  ,    SUM ( a . col 0  )  ,    SUM ( a . col 1  [  1  ]  )  ,    SUM ( a . col 2  . col 1  )    FROM    \"     +     (  (  (  (  \"  ( VALUES    \"     +     \" ROW ( CAST ( ROW (  1  .  0  ,    ARRAY [  2  ,     1  3  ,     4  ]  ,    row (  1  1  ,     4  .  1 E 0  )  )          AS   ROW ( col 0    double ,    col 1    array ( integer )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )  ,     \"  )     +     \" ROW ( CAST ( ROW (  2  .  0  ,    ARRAY [  2  ,     1  3  ,     4  ]  ,    row (  1  2  ,     1  4  .  0 E 0  )  )       AS   ROW ( col 0    double ,    col 1    array ( integer )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )  ,     \"  )     +     \" ROW ( CAST ( ROW (  7  .  0  ,    ARRAY [  2  2  ,     3  3  ,     4  4  ]  ,    row (  1  3  ,     5  .  0 E 0  )  )    AS   ROW ( col 0    double ,    col 1    array ( integer )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )  )    t ( a )     \"  )     +     \" GROUP   BY   a . col 1  [  2  ]  \"  )  )  ,     \" SELECT    *    FROM   VALUES    (  1  3  ,     3  .  0  ,     4  ,     1  8  .  1  )  ,     (  3  3  ,     7  .  0  ,     2  2  ,     5  .  0  )  \"  )  ;", "assertQuery (  (  \" SELECT   a . col 2  . col 0  ,    SUM ( a . col 2  . col 1  )    FROM    \"     +     (  (  (  (  (  (  \"  ( VALUES    \"     +     \" ROW ( CAST ( ROW (  2  .  2  ,    ARRAY [ row (  3  1  ,     4  .  2 E 0  )  ,    row (  2  2  ,     4  .  2 E 0  )  ]  ,    row (  5  ,     4  .  0 E 0  )  )    AS   ROW ( col 0    double ,    col 1    array ( row ( col 0    integer ,    col 1    double )  )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )  ,     \"  )     +     \" ROW ( CAST ( ROW (  1  .  0  ,    ARRAY [ row (  3  1  ,     4  .  5 E 0  )  ,    row (  1  2  ,     4  .  2 E 0  )  ]  ,    row (  3  ,     4  .  1 E 0  )  )    AS   ROW ( col 0    double ,    col 1    array ( row ( col 0    integer ,    col 1    double )  )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )  ,     \"  )     +     \" ROW ( CAST ( ROW (  3  .  1  ,    ARRAY [ row (  4  1  ,     3  .  1 E 0  )  ,    row (  3  2  ,     4  .  2 E 0  )  ]  ,    row (  6  ,     6  .  0 E 0  )  )    AS   ROW ( col 0    double ,    col 1    array ( row ( col 0    integer ,    col 1    double )  )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )  ,     \"  )     +     \" ROW ( CAST ( ROW (  3  .  3  ,    ARRAY [ row (  4  1  ,     3  .  1 E 0  )  ,    row (  3  2  ,     4  .  2 E 0  )  ]  ,    row (  6  ,     6  .  0 E 0  )  )    AS   ROW ( col 0    double ,    col 1    array ( row ( col 0    integer ,    col 1    double )  )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )     \"  )     +     \"  )    t ( a )     \"  )     +     \" GROUP   BY   a . col 2  \"  )  )  ,     \" SELECT    *    FROM   VALUES    (  5  ,     4  .  0  )  ,     (  3  ,     4  .  1  )  ,     (  6  ,     1  2  .  0  )  \"  )  ;", "assertQuery (  (  \" SELECT   a . col 2  . col 0  ,    a . col 0  ,    SUM ( a . col 2  . col 1  )    FROM    \"     +     (  (  (  (  (  (  (  \"  ( VALUES    \"     +     \" ROW ( CAST ( ROW (  1  .  0  ,    ARRAY [  2  ,     1  3  ,     4  ]  ,    row (  1  1  ,     4  .  1 E 0  )  )          AS   ROW ( col 0    double ,    col 1    array ( integer )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )  ,     \"  )     +     \" ROW ( CAST ( ROW (  2  .  0  ,    ARRAY [  2  ,     2  3  ,     4  ]  ,    row (  1  1  ,     1  4  .  0 E 0  )  )       AS   ROW ( col 0    double ,    col 1    array ( integer )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )  ,     \"  )     +     \" ROW ( CAST ( ROW (  1  .  5  ,    ARRAY [  2  ,     1  3  ,     4  ]  ,    row (  1  1  ,     4  .  1 E 0  )  )          AS   ROW ( col 0    double ,    col 1    array ( integer )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )  ,     \"  )     +     \" ROW ( CAST ( ROW (  1  .  5  ,    ARRAY [  2  ,     1  3  ,     4  ]  ,    row (  1  1  ,     4  .  1 E 0  )  )          AS   ROW ( col 0    double ,    col 1    array ( integer )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )  ,     \"  )     +     \" ROW ( CAST ( ROW (  7  .  0  ,    ARRAY [  2  2  ,     3  3  ,     4  4  ]  ,    row (  1  3  ,     5  .  0 E 0  )  )    AS   ROW ( col 0    double ,    col 1    array ( integer )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )  )    t ( a )     \"  )     +     \" WHERE   a . col 1  [  2  ]     <     3  0     \"  )     +     \" GROUP   BY    1  ,     2    ORDER   BY    1  \"  )  )  ,     \" SELECT    *    FROM   VALUES    (  1  1  ,     1  .  0  ,     4  .  1  )  ,     (  1  1  ,     1  .  5  ,     8  .  2  )  ,     (  1  1  ,     2  .  0  ,     1  4  .  0  )  \"  )  ;", "assertQuery (  (  \" SELECT   a [  1  ]  . col 0  ,    COUNT (  1  )    FROM    \"     +     (  (  (  (  (  (  (  \"  ( VALUES    \"     +     \"  ( ROW ( CAST ( ARRAY [ row (  3  1  ,     4  .  2 E 0  )  ,    row (  2  2  ,     4  .  2 E 0  )  ]    AS   ARRAY ( ROW ( col 0    integer ,    col 1    double )  )  )  )  )  ,     \"  )     +     \"  ( ROW ( CAST ( ARRAY [ row (  3  1  ,     4  .  5 E 0  )  ,    row (  1  2  ,     4  .  2 E 0  )  ]    AS   ARRAY ( ROW ( col 0    integer ,    col 1    double )  )  )  )  )  ,     \"  )     +     \"  ( ROW ( CAST ( ARRAY [ row (  4  1  ,     3  .  1 E 0  )  ,    row (  3  2  ,     4  .  2 E 0  )  ]    AS   ARRAY ( ROW ( col 0    integer ,    col 1    double )  )  )  )  )  ,     \"  )     +     \"  ( ROW ( CAST ( ARRAY [ row (  3  1  ,     3  .  1 E 0  )  ,    row (  3  2  ,     4  .  2 E 0  )  ]    AS   ARRAY ( ROW ( col 0    integer ,    col 1    double )  )  )  )  )     \"  )     +     \"  )    t ( a )     \"  )     +     \" GROUP   BY    1     \"  )     +     \" ORDER   BY    2    DESC \"  )  )  ,     \" SELECT    *    FROM   VALUES    (  3  1  ,     3  )  ,     (  4  1  ,     1  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testRowFieldAccessorInAggregate"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  \" SELECT   t . a . col 1  ,    custkey ,    orderkey   FROM    \"     +     \"  ( VALUES    \"  )     +     \" ROW ( CAST ( ROW (  1  ,     1  1  )    AS   ROW ( col 0    integer ,    col 1    integer )  )  )  ,     \"  )     +     \" ROW ( CAST ( ROW (  2  ,     2  2  )    AS   ROW ( col 0    integer ,    col 1    integer )  )  )  ,     \"  )     +     \" ROW ( CAST ( ROW (  3  ,     3  3  )    AS   ROW ( col 0    integer ,    col 1    integer )  )  )  )    t ( a )     \"  )     +     \" INNER   JOIN   orders    \"  )     +     \" ON   t . a . col 0     =    orders . orderkey \"  )  )  ,     \" SELECT    *    FROM   VALUES    (  1  1  ,     3  7  0  ,     1  )  ,     (  2  2  ,     7  8  1  ,     2  )  ,     (  3  3  ,     1  2  3  4  ,     3  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testRowFieldAccessorInJoin"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   a . col 0  ,     \"     +     (  (  (  (  (  (  (  \" SUM ( a . col 1  [  1  ]  . col 1  )    OVER ( PARTITION   BY   a . col 2  . col 0  )  ,     \"     +     \" SUM ( a . col 2  . col 1  )    OVER ( PARTITION   BY   a . col 2  . col 0  )    FROM    \"  )     +     \"  ( VALUES    \"  )     +     \" ROW ( CAST ( ROW (  1  .  0  ,    ARRAY [ row (  3  1  ,     1  4  .  5 E 0  )  ,    row (  1  2  ,     4  .  2 E 0  )  ]  ,    row (  3  ,     4  .  0 E 0  )  )       AS   ROW ( col 0    double ,    col 1    array ( ROW ( col 0    integer ,    col 1    double )  )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )  ,     \"  )     +     \" ROW ( CAST ( ROW (  2  .  2  ,    ARRAY [ row (  4  1  ,     1  3  .  1 E 0  )  ,    row (  3  2  ,     4  .  2 E 0  )  ]  ,    row (  6  ,     6  .  0 E 0  )  )       AS   ROW ( col 0    double ,    col 1    array ( ROW ( col 0    integer ,    col 1    double )  )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )  ,     \"  )     +     \" ROW ( CAST ( ROW (  2  .  2  ,    ARRAY [ row (  4  1  ,     1  7  .  1 E 0  )  ,    row (  4  5  ,     4  .  2 E 0  )  ]  ,    row (  7  ,     1  6  .  0 E 0  )  )    AS   ROW ( col 0    double ,    col 1    array ( ROW ( col 0    integer ,    col 1    double )  )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )  ,     \"  )     +     \" ROW ( CAST ( ROW (  2  .  2  ,    ARRAY [ row (  4  1  ,     1  3  .  1 E 0  )  ,    row (  3  2  ,     4  .  2 E 0  )  ]  ,    row (  6  ,     6  .  0 E 0  )  )       AS   ROW ( col 0    double ,    col 1    array ( ROW ( col 0    integer ,    col 1    double )  )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )  ,     \"  )     +     \" ROW ( CAST ( ROW (  3  .  1  ,    ARRAY [ row (  4  1  ,     1  3  .  1 E 0  )  ,    row (  3  2  ,     4  .  2 E 0  )  ]  ,    row (  6  ,     6  .  0 E 0  )  )       AS   ROW ( col 0    double ,    col 1    array ( ROW ( col 0    integer ,    col 1    double )  )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )  )    t ( a )     \"  )  )  ,     \" SELECT    *    FROM   VALUES    (  1  .  0  ,     1  4  .  5  ,     4  .  0  )  ,     (  2  .  2  ,     3  9  .  3  ,     1  8  .  0  )  ,     (  2  .  2  ,     3  9  .  3  ,     1  8  .  0  )  ,     (  2  .  2  ,     1  7  .  1  ,     1  6  .  0  )  ,     (  3  .  1  ,     3  9  .  3  ,     1  8  .  0  )  \"  )  ;", "assertQuery (  (  \" SELECT   a . col 1  [  1  ]  . col 0  ,     \"     +     (  (  (  (  (  (  (  \" SUM ( a . col 0  )    OVER ( PARTITION   BY   a . col 1  [  1  ]  . col 0  )  ,     \"     +     \" SUM ( a . col 1  [  1  ]  . col 1  )    OVER ( PARTITION   BY   a . col 1  [  1  ]  . col 0  )  ,     \"  )     +     \" SUM ( a . col 2  . col 1  )    OVER ( PARTITION   BY   a . col 1  [  1  ]  . col 0  )    FROM    \"  )     +     \"  ( VALUES    \"  )     +     \" ROW ( CAST ( ROW (  1  .  0  ,    ARRAY [ row (  3  1  ,     1  4  .  5 E 0  )  ,    row (  1  2  ,     4  .  2 E 0  )  ]  ,    row (  3  ,     4  .  0 E 0  )  )    AS   ROW ( col 0    double ,    col 1    array ( row ( col 0    integer ,    col 1    double )  )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )  ,     \"  )     +     \" ROW ( CAST ( ROW (  3  .  1  ,    ARRAY [ row (  4  1  ,     1  3  .  1 E 0  )  ,    row (  3  2  ,     4  .  2 E 0  )  ]  ,    row (  6  ,     6  .  0 E 0  )  )    AS   ROW ( col 0    double ,    col 1    array ( row ( col 0    integer ,    col 1    double )  )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )  ,     \"  )     +     \" ROW ( CAST ( ROW (  2  .  2  ,    ARRAY [ row (  3  1  ,     1  4  .  2 E 0  )  ,    row (  2  2  ,     5  .  2 E 0  )  ]  ,    row (  5  ,     4  .  0 E 0  )  )    AS   ROW ( col 0    double ,    col 1    array ( row ( col 0    integer ,    col 1    double )  )  ,    col 2    row ( col 0    integer ,    col 1    double )  )  )  )  )    t ( a )     \"  )     +     \" WHERE   a . col 1  [  2  ]  . col 1     >    a . col 2  . col 0  \"  )  )  ,     \" SELECT    *    FROM   VALUES    (  3  1  ,     3  .  2  ,     2  8  .  7  ,     8  .  0  )  ,     (  3  1  ,     3  .  2  ,     2  8  .  7  ,     8  .  0  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testRowFieldAccessorInWindowFunction"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  (  \"  \"     +     (  (  \" SELECT    *    FROM    (  \"     +     \" SELECT   a ,    row _ number (  )    OVER    ( PARTITION   BY   a   ORDER   BY   a )    rn \\ n \"  )     +     \" FROM    ( VALUES    (  1  )  ,     (  2  )  ,     (  1  )  ,     (  2  )  )    t    ( a )  )    t   WHERE   rn    <     2    LIMIT    2  \"  )  )  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    BIGINT ,    BIGINT )  . row (  1  ,     1 L )  . row (  2  ,     1 L )  . build (  )  ;", "yAssertions . assertEqualsIgnoreOrder ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "actual    =    computeActual (  (  \"  \"     +     (  (  \" SELECT    *    FROM    (  \"     +     \" SELECT   a ,    row _ number (  )    OVER    ( PARTITION   BY   a )    rn \\ n \"  )     +     \" FROM    ( VALUES    (  1  )  ,     (  2  )  ,     (  1  )  ,     (  2  )  ,     (  1  )  )    t    ( a )  )    t   WHERE   rn    <     3    LIMIT    2  \"  )  )  )  ;", "expected    =    resultBuilder ( getSession (  )  ,    BIGINT ,    BIGINT )  . row (  1  ,     1 L )  . row (  1  ,     2 L )  . row (  2  ,     1 L )  . row (  2  ,     2 L )  . build (  )  ;", "assertEquals ( actual . getMaterializedRows (  )  . size (  )  ,     2  )  ;", "yAssertions . assertContains ( expected ,    actual )  ;", "}", "METHOD_END"], "methodName": ["testRowNumberFilterAndLimit"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  (  \" SELECT   a ,    rn \\ n \"     +     (  (  (  (  (  \" FROM    (  \\ n \"     +     \"             SELECT   a ,    row _ number (  )    OVER    ( ORDER   BY   a )    rn \\ n \"  )     +     \"             FROM    ( VALUES    (  1  )  ,     (  2  )  )    t    ( a )  \\ n \"  )     +     \"  )    a \\ n \"  )     +     \" JOIN    ( VALUES    (  2  )  )    b    ( b )    ON   a . a    =    b . b \\ n \"  )     +     \" LIMIT    1  \"  )  )  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    BIGINT ,    BIGINT )  . row (  2  ,     2 L )  . build (  )  ;", "yAssertions . assertEqualsIgnoreOrder ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "actual    =    computeActual (  (  \" SELECT   a ,    rn \\ n \"     +     (  (  (  (  (  \" FROM    (  \\ n \"     +     \"             SELECT   a ,    row _ number (  )    OVER    ( PARTITION   BY   a   ORDER   BY   a )    rn \\ n \"  )     +     \"             FROM    ( VALUES    (  1  )  ,     (  2  )  ,     (  1  )  ,     (  2  )  )    t    ( a )  \\ n \"  )     +     \"  )    a \\ n \"  )     +     \" JOIN    ( VALUES    (  2  )  )    b    ( b )    ON   a . a    =    b . b \\ n \"  )     +     \" LIMIT    2  \"  )  )  )  ;", "expected    =    resultBuilder ( getSession (  )  ,    BIGINT ,    BIGINT )  . row (  2  ,     1 L )  . row (  2  ,     2 L )  . build (  )  ;", "yAssertions . assertEqualsIgnoreOrder ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRowNumberJoin"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  (  \"  \"     +     (  (  \" SELECT   row _ number (  )    OVER    ( PARTITION   BY   orderstatus )    rn ,    orderstatus \\ n \"     +     \" FROM   orders \\ n \"  )     +     \" LIMIT    1  0  \"  )  )  )  ;", "assertEquals ( actual . getMaterializedRows (  )  . size (  )  ,     1  0  )  ;", "actual    =    computeActual (  (  \"  \"     +     (  (  \" SELECT   row _ number (  )    OVER    ( PARTITION   BY   orderstatus   ORDER   BY   orderkey )    rn \\ n \"     +     \" FROM   orders \\ n \"  )     +     \" LIMIT    1  0  \"  )  )  )  ;", "assertEquals ( actual . getMaterializedRows (  )  . size (  )  ,     1  0  )  ;", "actual    =    computeActual (  (  \"  \"     +     (  (  \" SELECT   row _ number (  )    OVER    (  )    rn ,    orderstatus \\ n \"     +     \" FROM   orders \\ n \"  )     +     \" LIMIT    1  0  \"  )  )  )  ;", "assertEquals ( actual . getMaterializedRows (  )  . size (  )  ,     1  0  )  ;", "actual    =    computeActual (  (  \"  \"     +     (  (  \" SELECT   row _ number (  )    OVER    ( ORDER   BY   orderkey )    rn \\ n \"     +     \" FROM   orders \\ n \"  )     +     \" LIMIT    1  0  \"  )  )  )  ;", "assertEquals ( actual . getMaterializedRows (  )  . size (  )  ,     1  0  )  ;", "}", "METHOD_END"], "methodName": ["testRowNumberLimit"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  (  \"  \"     +     (  (  (  \" SELECT    *    FROM    (  \"     +     \"          SELECT   a ,    row _ number (  )    OVER    ( PARTITION   BY   a   ORDER   BY   a )    rn \\ n \"  )     +     \"          FROM    ( VALUES    (  1  )  ,     (  1  )  ,     (  1  )  ,     (  2  )  ,     (  2  )  ,     (  3  )  )    t    ( a )  )    t    \"  )     +     \" WHERE   rn    <     3    AND   rn    %     2     =     0    AND   a    =     2    LIMIT    2  \"  )  )  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    BIGINT ,    BIGINT )  . row (  2  ,     2 L )  . build (  )  ;", "yAssertions . assertEqualsIgnoreOrder ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRowNumberMultipleFilters"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  (  \"  \"     +     (  (  (  \" SELECT   orderkey ,    orderstatus   FROM    (  \\ n \"     +     \"          SELECT   row _ number (  )    OVER    (  )    rn ,    orderkey ,    orderstatus \\ n \"  )     +     \"          FROM   orders \\ n \"  )     +     \"  )    WHERE   NOT   rn    <  =     1  0  \"  )  )  )  ;", "MaterializedResult   all    =    computeExpected (  \" SELECT   orderkey ,    orderstatus   FROM   orders \"  ,    actual . getTypes (  )  )  ;", "assertEquals ( actual . getMaterializedRows (  )  . size (  )  ,     (  ( all . getMaterializedRows (  )  . size (  )  )     -     1  0  )  )  ;", "yAssertions . assertContains ( all ,    actual )  ;", "actual    =    computeActual (  (  \"  \"     +     (  (  (  \" SELECT   orderkey ,    orderstatus   FROM    (  \\ n \"     +     \"          SELECT   row _ number (  )    OVER    (  )    rn ,    orderkey ,    orderstatus \\ n \"  )     +     \"          FROM   orders \\ n \"  )     +     \"  )    WHERE   rn    -     5     <  =     1  0  \"  )  )  )  ;", "all    =    computeExpected (  \" SELECT   orderkey ,    orderstatus   FROM   orders \"  ,    actual . getTypes (  )  )  ;", "assertEquals ( actual . getMaterializedRows (  )  . size (  )  ,     1  5  )  ;", "yAssertions . assertContains ( all ,    actual )  ;", "}", "METHOD_END"], "methodName": ["testRowNumberNoOptimization"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  (  \"  \"     +     (  (  (  \" SELECT   orderkey ,    orderstatus   FROM    (  \\ n \"     +     \"          SELECT   row _ number (  )    OVER    ( PARTITION   BY   orderstatus )    rn ,    orderkey ,    orderstatus \\ n \"  )     +     \"          FROM   orders \\ n \"  )     +     \"  )    WHERE   rn    <  =     5  \"  )  )  )  ;", "MaterializedResult   all    =    computeExpected (  \" SELECT   orderkey ,    orderstatus   FROM   orders \"  ,    actual . getTypes (  )  )  ;", "assertEquals ( actual . getMaterializedRows (  )  . size (  )  ,     1  5  )  ;", "yAssertions . assertContains ( all ,    actual )  ;", "actual    =    computeActual (  (  \"  \"     +     (  (  (  \" SELECT   orderkey   FROM    (  \\ n \"     +     \"          SELECT   row _ number (  )    OVER    ( PARTITION   BY   orderstatus )    rn ,    orderkey \\ n \"  )     +     \"          FROM   orders \\ n \"  )     +     \"  )    WHERE   rn    <  =     5  \"  )  )  )  ;", "all    =    computeExpected (  \" SELECT   orderkey   FROM   orders \"  ,    actual . getTypes (  )  )  ;", "assertEquals ( actual . getMaterializedRows (  )  . size (  )  ,     1  5  )  ;", "yAssertions . assertContains ( all ,    actual )  ;", "}", "METHOD_END"], "methodName": ["testRowNumberPartitionedFilter"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   orderkey ,    orderstatus ,    SUM ( rn )    OVER    ( PARTITION   BY   orderstatus )    c    \"     +     (  (  (  (  (  \" FROM    (     \"     +     \"          SELECT   orderkey ,    orderstatus ,    row _ number (  )    OVER    ( PARTITION   BY   orderstatus )    rn    \"  )     +     \"          FROM    (     \"  )     +     \"                      SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    1  0     \"  )     +     \"           )     \"  )     +     \"  )  \"  )  )  ,     (  \" VALUES    \"     +     (  (  (  (  (  (  (  (  (  \"  (  1  ,     ' O '  ,     2  1  )  ,     \"     +     \"  (  2  ,     ' O '  ,     2  1  )  ,     \"  )     +     \"  (  3  ,     ' F '  ,     1  0  )  ,     \"  )     +     \"  (  4  ,     ' O '  ,     2  1  )  ,     \"  )     +     \"  (  5  ,     ' F '  ,     1  0  )  ,     \"  )     +     \"  (  6  ,     ' F '  ,     1  0  )  ,     \"  )     +     \"  (  7  ,     ' O '  ,     2  1  )  ,     \"  )     +     \"  (  3  2  ,     ' O '  ,     2  1  )  ,     \"  )     +     \"  (  3  3  ,     ' F '  ,     1  0  )  ,     \"  )     +     \"  (  3  4  ,     ' O '  ,     2  1  )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testRowNumberPropertyDerivation"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryReturnsEmptyResult (  (  \"  \"     +     (  (  (  \" SELECT    *    FROM    (  \"     +     \"          SELECT   a ,    row _ number (  )    OVER    ( PARTITION   BY   a   ORDER   BY   a )    rn \\ n \"  )     +     \"          FROM    ( VALUES    (  1  )  ,     (  1  )  ,     (  1  )  ,     (  2  )  ,     (  2  )  ,     (  3  )  )    t    ( a )  )    t    \"  )     +     \" WHERE   rn    =     -  1  \"  )  )  )  ;", "assertQueryReturnsEmptyResult (  (  \"  \"     +     (  (  (  \" SELECT    *    FROM    (  \"     +     \"          SELECT   a ,    row _ number (  )    OVER    ( PARTITION   BY   a   ORDER   BY   a )    rn \\ n \"  )     +     \"          FROM    ( VALUES    (  1  )  ,     (  1  )  ,     (  1  )  ,     (  2  )  ,     (  2  )  ,     (  3  )  )    t    ( a )  )    t    \"  )     +     \" WHERE   rn    <  =     -  1  \"  )  )  )  ;", "assertQueryReturnsEmptyResult (  (  \"  \"     +     (  (  (  \" SELECT    *    FROM    (  \"     +     \"          SELECT   a ,    row _ number (  )    OVER    ( PARTITION   BY   a   ORDER   BY   a )    rn \\ n \"  )     +     \"          FROM    ( VALUES    (  1  )  ,     (  1  )  ,     (  1  )  ,     (  2  )  ,     (  2  )  ,     (  3  )  )    t    ( a )  )    t    \"  )     +     \" WHERE   rn    =     0  \"  )  )  )  ;", "assertQueryReturnsEmptyResult (  (  \"  \"     +     (  (  (  \" SELECT    *    FROM    (  \"     +     \"          SELECT   a ,    row _ number (  )    OVER    ( PARTITION   BY   a )    rn \\ n \"  )     +     \"          FROM    ( VALUES    (  1  )  ,     (  1  )  ,     (  1  )  ,     (  2  )  ,     (  2  )  ,     (  3  )  )    t    ( a )  )    t    \"  )     +     \" WHERE   rn    =     -  1  \"  )  )  )  ;", "assertQueryReturnsEmptyResult (  (  \"  \"     +     (  (  (  \" SELECT    *    FROM    (  \"     +     \"          SELECT   a ,    row _ number (  )    OVER    ( PARTITION   BY   a )    rn \\ n \"  )     +     \"          FROM    ( VALUES    (  1  )  ,     (  1  )  ,     (  1  )  ,     (  2  )  ,     (  2  )  ,     (  3  )  )    t    ( a )  )    t    \"  )     +     \" WHERE   rn    <  =     -  1  \"  )  )  )  ;", "assertQueryReturnsEmptyResult (  (  \"  \"     +     (  (  (  \" SELECT    *    FROM    (  \"     +     \"          SELECT   a ,    row _ number (  )    OVER    ( PARTITION   BY   a )    rn \\ n \"  )     +     \"          FROM    ( VALUES    (  1  )  ,     (  1  )  ,     (  1  )  ,     (  2  )  ,     (  2  )  ,     (  3  )  )    t    ( a )  )    t    \"  )     +     \" WHERE   rn    =     0  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testRowNumberSpecialFilters"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  (  \"  \"     +     (  (  (  \" SELECT   orderkey ,    orderstatus   FROM    (  \\ n \"     +     \"          SELECT   row _ number (  )    OVER    (  )    rn ,    orderkey ,    orderstatus \\ n \"  )     +     \"          FROM   orders \\ n \"  )     +     \"  )    WHERE   rn    <  =     5    AND   orderstatus    !  =     ' Z '  \"  )  )  )  ;", "MaterializedResult   all    =    computeExpected (  \" SELECT   orderkey ,    orderstatus   FROM   orders \"  ,    actual . getTypes (  )  )  ;", "assertEquals ( actual . getMaterializedRows (  )  . size (  )  ,     5  )  ;", "yAssertions . assertContains ( all ,    actual )  ;", "actual    =    computeActual (  (  \"  \"     +     (  (  (  \" SELECT   orderkey ,    orderstatus   FROM    (  \\ n \"     +     \"          SELECT   row _ number (  )    OVER    (  )    rn ,    orderkey ,    orderstatus \\ n \"  )     +     \"          FROM   orders \\ n \"  )     +     \"  )    WHERE   rn    <     5  \"  )  )  )  ;", "all    =    computeExpected (  \" SELECT   orderkey ,    orderstatus   FROM   orders \"  ,    actual . getTypes (  )  )  ;", "assertEquals ( actual . getMaterializedRows (  )  . size (  )  ,     4  )  ;", "yAssertions . assertContains ( all ,    actual )  ;", "actual    =    computeActual (  (  \"  \"     +     (  (  (  \" SELECT   orderkey ,    orderstatus   FROM    (  \\ n \"     +     \"          SELECT   row _ number (  )    OVER    (  )    rn ,    orderkey ,    orderstatus \\ n \"  )     +     \"          FROM   orders \\ n \"  )     +     \"  )    LIMIT    5  \"  )  )  )  ;", "all    =    computeExpected (  \" SELECT   orderkey ,    orderstatus   FROM   orders \"  ,    actual . getTypes (  )  )  ;", "assertEquals ( actual . getMaterializedRows (  )  . size (  )  ,     5  )  ;", "yAssertions . assertContains ( all ,    actual )  ;", "}", "METHOD_END"], "methodName": ["testRowNumberUnpartitionedFilter"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  \" SELECT   row _ number (  )    OVER    (  )  \\ n \"     +     \" FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey \\ n \"  )     +     \" WHERE   orders . orderkey    =     1  0  0  0  0  \\ n \"  )     +     \" LIMIT    2  0  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testRowNumberUnpartitionedFilterLimit"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   JSON _ FORMAT ( CAST ( ROW (  1     +     2  ,    CONCAT (  ' a '  ,     ' b '  )  )    AS   JSON )  )  \"  ,     \" SELECT    \\  '  [  3  ,  \\  \" ab \\  \"  ]  \\  '  \"  )  ;", "assertQuery (  \" SELECT   JSON _ FORMAT ( CAST ( ROW ( a    +    b )    AS   JSON )  )    FROM    ( VALUES    (  1  ,     2  )  )    AS   t ( a ,    b )  \"  ,     \" SELECT    '  [  3  ]  '  \"  )  ;", "assertQuery (  \" SELECT   JSON _ FORMAT ( CAST ( ROW (  1  ,    ROW (  9  ,    a ,    ARRAY [  ]  ,    NULL )  ,    ROW (  1  ,     2  )  )    AS   JSON )  )    FROM    ( VALUES    (  ' a '  )  )    t ( a )  \"  ,     \" SELECT    \\  '  [  1  ,  [  9  ,  \\  \" a \\  \"  ,  [  ]  , null ]  ,  [  1  ,  2  ]  ]  \\  '  \"  )  ;", "assertQuery (  \" SELECT   JSON _ FORMAT ( CAST ( ROW ( ROW ( ROW ( ROW ( ROW ( a ,    b )  ,    c )  ,    d )  ,    e )  ,    f )    AS   JSON )  )    FROM    ( VALUES    ( ROW (  0  ,     1  )  ,     2  ,     '  3  '  ,    NULL ,    ARRAY [  5  ]  ,    ARRAY [  ]  )  )    t ( a ,    b ,    c ,    d ,    e ,    f )  \"  ,     \" SELECT    \\  '  [  [  [  [  [  [  0  ,  1  ]  ,  2  ]  ,  \\  \"  3  \\  \"  ]  , null ]  ,  [  5  ]  ]  ,  [  ]  ]  \\  '  \"  )  ;", "assertQuery (  \" SELECT   JSON _ FORMAT ( CAST ( ARRAY _ AGG ( ROW ( a ,    b )  )    AS   JSON )  )    FROM    ( VALUES    (  1  ,     2  )  ,     (  3  ,     4  )  ,     (  5  ,     6  )  )    t ( a ,    b )  \"  ,     \" SELECT    '  [  [  1  ,  2  ]  ,  [  3  ,  4  ]  ,  [  5  ,  6  ]  ]  '  \"  )  ;", "assertQuery (  \" SELECT   CONTAINS ( ARRAY _ AGG ( ROW ( a ,    b )  )  ,    ROW (  1  ,     2  )  )    FROM    ( VALUES    (  1  ,     2  )  ,     (  3  ,     4  )  ,     (  5  ,     6  )  )    t ( a ,    b )  \"  ,     \" SELECT   TRUE \"  )  ;", "assertQuery (  \" SELECT   JSON _ FORMAT ( CAST ( ARRAY _ AGG ( ROW ( c ,    d )  )    AS   JSON )  )    FROM    ( VALUES    ( ARRAY [  1  ,     3  ,     5  ]  ,    ARRAY [  2  ,     4  ,     6  ]  )  )    AS   t ( a ,    b )    CROSS   JOIN   UNNEST ( a ,    b )    AS   u ( c ,    d )  \"  ,     \" SELECT    '  [  [  1  ,  2  ]  ,  [  3  ,  4  ]  ,  [  5  ,  6  ]  ]  '  \"  )  ;", "assertQuery (  \" SELECT   JSON _ FORMAT ( CAST ( ROW ( x ,    y ,    z )    AS   JSON )  )    FROM    ( VALUES   ROW (  1  ,    NULL ,     '  3  '  )  )    t ( x , y , z )  \"  ,     \" SELECT    \\  '  [  1  , null ,  \\  \"  3  \\  \"  ]  \\  '  \"  )  ;", "assertQuery (  \" SELECT   JSON _ FORMAT ( CAST ( ROW ( x ,    y ,    z )    AS   JSON )  )    FROM    ( VALUES   ROW (  1  ,    CAST ( NULL   AS   INTEGER )  ,     '  3  '  )  )    t ( x , y , z )  \"  ,     \" SELECT    \\  '  [  1  , null ,  \\  \"  3  \\  \"  ]  \\  '  \"  )  ;", "}", "METHOD_END"], "methodName": ["testRows"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   x   IN    ( SELECT    *    FROM    ( VALUES    1  )  )  \\ n \"     +     (  \" FROM    ( VALUES    1  )    t ( x )  \\ n \"     +     \" WHERE   x   IN    ( SELECT    *    FROM    ( VALUES    1  )  )  \"  )  )  ,     \" SELECT    1  \"  )  ;", "assertQuery (  (  \" SELECT   x   IN    ( SELECT    *    FROM    ( VALUES    1  )  )  \\ n \"     +     (  \" FROM    ( VALUES    2  )    t ( x )  \\ n \"     +     \" WHERE   x   IN    ( SELECT    *    FROM    ( VALUES    1  )  )  \"  )  )  ,     \" SELECT    1    WHERE   false \"  )  ;", "}", "METHOD_END"], "methodName": ["testSameInPredicateInProjectionAndFilter"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  (  \"  \"     +     (  (  (  (  \" SELECT    1  2  .  0 E 0     *    row _ number (  )    OVER    (  )  / row _ number (  )    OVER (  )  ,  \\ n \"     +     \" row _ number (  )    OVER (  )  \\ n \"  )     +     \" FROM    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    1  0  )  \\ n \"  )     +     \" ORDER   BY    2    DESC \\ n \"  )     +     \" LIMIT    5  \"  )  )  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    DOUBLE ,    BIGINT )  . row (  1  2  .  0  ,     1  0 L )  . row (  1  2  .  0  ,     9 L )  . row (  1  2  .  0  ,     8 L )  . row (  1  2  .  0  ,     7 L )  . row (  1  2  .  0  ,     6 L )  . build (  )  ;", "assertEquals ( actual ,    expected )  ;", "actual    =    computeActual (  (  \"  \"     +     (  \" SELECT    ( MAX ( x . a )    OVER    (  )     -    x . a )     *     1  0  0  .  0 E 0     /    MAX ( x . a )    OVER    (  )  \\ n \"     +     \" FROM    ( VALUES    1  ,     2  ,     3  ,     4  )    x ( a )  \"  )  )  )  ;", "expected    =    resultBuilder ( getSession (  )  ,    DOUBLE )  . row (  7  5  .  0  )  . row (  5  0  .  0  )  . row (  2  5  .  0  )  . row (  0  .  0  )  . build (  )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testSameWindowFunctionsTwoCoerces"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   SUBSTR (  ' Quadratically '  ,     5  ,     6  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testScalarFunction"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    ( SELECT    ( SELECT    ( SELECT    1  )  )  )  \"  )  ;", "assertQuery (  (  \" SELECT    *    FROM   lineitem   WHERE   orderkey    =     \\ n \"     +     \"  ( SELECT   max ( orderkey )    FROM   orders )  \"  )  )  ;", "assertQuery (  (  \" SELECT    *    FROM   lineitem   WHERE   orderkey    =     \\ n \"     +     \"  ( SELECT   orderkey   FROM   orders   WHERE    0  =  1  )  \"  )  )  ;", "assertQuery (  (  \" SELECT    *    FROM   lineitem   WHERE    \\ n \"     +     (  \"  ( SELECT   orderkey   FROM   orders   WHERE    0  =  1  )     \"     +     \" is   null \"  )  )  )  ;", "assertQuery (  (  \" SELECT    *    FROM   lineitem   WHERE    \\ n \"     +     (  \"  ( SELECT   orderkey   FROM   orders   WHERE    0  =  1  )     \"     +     \" is   not   null \"  )  )  )  ;", "assertQuery (  \" SELECT    ( SELECT    1  )    IN    (  1  ,     2  ,     3  )  \"  )  ;", "assertQuery (  \" SELECT    ( SELECT    1  )    IN    (           2  ,     3  )  \"  )  ;", "assertQuery (  \" SELECT    ( SELECT    1  )     =     ( SELECT    3  )  \"  )  ;", "assertQuery (  \" SELECT    ( SELECT    1  )     <     ( SELECT    3  )  \"  )  ;", "assertQuery (  (  \" SELECT   COUNT (  *  )    FROM   lineitem   WHERE    \"     +     (  (  \"  ( SELECT   min ( orderkey )    FROM   orders )  \"     +     \"  <  \"  )     +     \"  ( SELECT   max ( orderkey )    FROM   orders )  \"  )  )  )  ;", "assertQuery (  \" SELECT    ( SELECT    1  )  ,     ( SELECT    2  )  ,     ( SELECT    3  )  \"  )  ;", "assertQuery (  (  \" SELECT   DISTINCT   orderkey   FROM   lineitem    \"     +     (  (  (  \" WHERE   orderkey   BETWEEN \"     +     \"           ( SELECT   avg ( orderkey )    FROM   orders )     -     1  0     \"  )     +     \"          AND \"  )     +     \"           ( SELECT   avg ( orderkey )    FROM   orders )     +     1  0  \"  )  )  )  ;", "assertQuery (  (  \" SELECT   o 1  . orderkey ,    COUNT (  *  )     \"     +     (  (  (  (  \" FROM   orders   o 1     \"     +     \" INNER   JOIN    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    1  0  )    o 2     \"  )     +     \" ON   o 1  . orderkey    \"  )     +     \" BETWEEN    ( SELECT   avg ( orderkey )    FROM   orders )     -     1  0    AND    ( SELECT   avg ( orderkey )    FROM   orders )     +     1  0     \"  )     +     \" GROUP   BY   o 1  . orderkey \"  )  )  )  ;", "assertQuery (  (  \" SELECT   o 1  . orderkey ,    COUNT (  *  )     \"     +     (  (  (  (  \" FROM    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    5  )    o 1     \"     +     \" LEFT   JOIN    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    1  0  )    o 2     \"  )     +     \" ON   o 1  . orderkey    \"  )     +     \" BETWEEN    ( SELECT   avg ( orderkey )    FROM   orders )     -     1  0    AND    ( SELECT   avg ( orderkey )    FROM   orders )     +     1  0     \"  )     +     \" GROUP   BY   o 1  . orderkey \"  )  )  )  ;", "assertQuery (  (  \" SELECT   o 1  . orderkey ,    COUNT (  *  )     \"     +     (  (  (  \" FROM   orders   o 1    RIGHT   JOIN    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    1  0  )    o 2     \"     +     \" ON   o 1  . orderkey    \"  )     +     \" BETWEEN    ( SELECT   avg ( orderkey )    FROM   orders )     -     1  0    AND    ( SELECT   avg ( orderkey )    FROM   orders )     +     1  0     \"  )     +     \" GROUP   BY   o 1  . orderkey \"  )  )  )  ;", "assertQuery (  (  \" SELECT   DISTINCT   COUNT (  *  )     \"     +     (  (  (  (  \" FROM    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    5  )    o 1     \"     +     \" FULL   JOIN    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    1  0  )    o 2     \"  )     +     \" ON   o 1  . orderkey    \"  )     +     \" BETWEEN    ( SELECT   avg ( orderkey )    FROM   orders )     -     1  0    AND    ( SELECT   avg ( orderkey )    FROM   orders )     +     1  0     \"  )     +     \" GROUP   BY   o 1  . orderkey \"  )  )  ,     \" VALUES    1  ,     1  0  \"  )  ;", "assertQuery (  \" SELECT   orderkey ,    totalprice   FROM   orders   ORDER   BY    ( SELECT    2  )  \"  )  ;", "String   multipleRowsErrorMsg    =     \" Scalar   sub - query   has   returned   multiple   rows \"  ;", "assertQueryFails (  (  \" SELECT    *    FROM   lineitem   WHERE   orderkey    =     (  \\ n \"     +     \" SELECT   orderkey   FROM   orders   ORDER   BY   totalprice )  \"  )  ,    multipleRowsErrorMsg )  ;", "assertQueryFails (  \" SELECT   orderkey ,    totalprice   FROM   orders   ORDER   BY    ( VALUES    1  ,     2  )  \"  ,    multipleRowsErrorMsg )  ;", "assertQuery (  \" SELECT   custkey ,     ( SELECT   DISTINCT   custkey   FROM   orders   ORDER   BY   custkey   LIMIT    1  )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT    1  .  0  /  ( SELECT    1  )  ,    CAST (  1  .  0    AS   REAL )  /  ( SELECT    1  )  ,     1  /  ( SELECT    1  )  \"  )  ;", "assertQuery (  \" SELECT    1  .  0     =     ( SELECT    1  )    AND    1     =     ( SELECT    1  )  ,     2  .  0     =     ( SELECT    1  )    WHERE    1  .  0     =     ( SELECT    1  )    AND    1     =     ( SELECT    1  )  \"  )  ;", "assertQuery (  \" SELECT    1  .  0     =     ( SELECT    1  )  ,     2  .  0     =     ( SELECT    1  )  ,    CAST (  2  .  0    AS   REAL )     =     ( SELECT    1  )    WHERE    1  .  0     =     ( SELECT    1  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    1  )    t ( a )    WHERE    1  =  ( SELECT   count (  *  )    WHERE    1  .  0     =    a )  \"  ,     \" SELECT    1  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    1  .  0  )    t ( a )    WHERE    1  =  ( SELECT   count (  *  )    WHERE    1     =    a )  \"  ,     \" SELECT    1  .  0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testScalarSubquery"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   linenumber ,    min ( orderkey )  ,     ( SELECT   max ( orderkey )    FROM   orders   WHERE   orderkey    <     7  )  \"     +     (  \" FROM   lineitem    \"     +     \" GROUP   BY   linenumber \"  )  )  )  ;", "assertQuery (  (  \" SELECT   linenumber ,    min ( orderkey )  ,     ( SELECT   max ( orderkey )    FROM   orders   WHERE   orderkey    <     7  )  \"     +     (  \" FROM   lineitem    \"     +     \" GROUP   BY   linenumber ,     ( SELECT   max ( orderkey )    FROM   orders   WHERE   orderkey    <     7  )  \"  )  )  )  ;", "assertQuery (  (  \" SELECT   linenumber ,    min ( orderkey )     \"     +     (  \" FROM   lineitem    \"     +     \" GROUP   BY   linenumber ,     ( SELECT   max ( orderkey )    FROM   orders   WHERE   orderkey    <     7  )  \"  )  )  )  ;", "assertQuery (  (  \" SELECT   linenumber ,    min ( orderkey )     \"     +     (  (  \" FROM   lineitem    \"     +     \" GROUP   BY   linenumber    \"  )     +     \" HAVING   min ( orderkey )     <     ( SELECT   avg ( orderkey )    FROM   orders   WHERE   orderkey    <     7  )  \"  )  )  )  ;", "assertQuery (  (  \" SELECT   linenumber ,    min ( orderkey )  ,     ( SELECT   max ( orderkey )    FROM   orders   WHERE   orderkey    <     7  )  \"     +     (  (  \" FROM   lineitem    \"     +     \" GROUP   BY   linenumber ,     ( SELECT   max ( orderkey )    FROM   orders   WHERE   orderkey    <     7  )  \"  )     +     \" HAVING   min ( orderkey )     <     ( SELECT   max ( orderkey )    FROM   orders   WHERE   orderkey    <     7  )  \"  )  )  )  ;", "assertQuery (  (  \" SELECT   linenumber ,    min ( orderkey )  ,     ( SELECT   max ( orderkey )    FROM   orders   WHERE   orderkey    <     7  )  \"     +     (  \" FROM   lineitem    \"     +     \" GROUP   BY   linenumber ,     ( SELECT   sum ( orderkey )    FROM   orders   WHERE   orderkey    <     7  )  \"  )  )  )  ;", "assertQuery (  (  \" SELECT   linenumber ,    max ( orderkey )  ,     ( SELECT   min ( orderkey )    FROM   orders   WHERE   orderkey    <     5  )  \"     +     (  (  \" FROM   lineitem    \"     +     \" GROUP   BY   linenumber    \"  )     +     \" HAVING   sum ( orderkey )     >     ( SELECT   min ( orderkey )    FROM   orders   WHERE   orderkey    <     7  )  \"  )  )  )  ;", "assertQuery (  (  \" SELECT   linenumber ,    min ( orderkey )  ,     ( SELECT   max ( orderkey )    FROM   orders   WHERE   orderkey    <     7  )  \"     +     (  (  \" FROM   lineitem    \"     +     \" GROUP   BY   linenumber ,     ( SELECT   count ( orderkey )    FROM   orders   WHERE   orderkey    <     7  )  \"  )     +     \" HAVING   min ( orderkey )     <     ( SELECT   sum ( orderkey )    FROM   orders   WHERE   orderkey    <     7  )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testScalarSubqueryWithGroupBy"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   ORDERKEY   FROM   ORDERS \"  )  ;", "assertQuery (  \" SELECT   OrDeRkEy   FROM   OrDeRs \"  )  ;", "}", "METHOD_END"], "methodName": ["testSelectCaseInsensitive"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  \" SELECT   CAST ( NULL   AS   VARCHAR )  ,    CAST ( NULL   AS   BIGINT )    FROM   orders   ORDER   BY    1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testSelectColumnOfNulls"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    1  2  3  ,     ' foo '    UNION   ALL   SELECT    9  9  9  ,     ' bar '  \"  )  ;", "}", "METHOD_END"], "methodName": ["testSelectOnlyUnion"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   orderkey   FROM   lineitem   WHERE   tax    <    discount \"  )  ;", "}", "METHOD_END"], "methodName": ["testSelectWithComparison"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   orders   a   JOIN   orders   b   on   a . orderkey    =    b . orderkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testSelfJoin"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   linenumber ,    min ( orderkey )     \"     +     (  (  \" FROM   lineitem    \"     +     \" GROUP   BY   linenumber    \"  )     +     \" HAVING   min ( orderkey )    IN    ( SELECT   orderkey   FROM   orders   WHERE   orderkey    >     1  )  \"  )  )  )  ;", "assertQuery (  \" SELECT    1  0    in    ( SELECT   orderkey   FROM   orders )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    (  1  ,  1  )  ,     (  2  ,  2  )  ,     (  3  ,     3  )  )    t ( x ,    y )    WHERE    ( x + y   in    ( VALUES    4  ,     5  )  )    AND    ( x * y   in    ( VALUES    4  ,     5  )  )  \"  ,     \" VALUES    (  2  ,  2  )  \"  )  ;", "assertQuery (  \" SELECT    1  .  0    IN    ( SELECT    1  )  ,     1    IN    ( SELECT    1  )  \"  )  ;", "assertQuery (  \" SELECT    1    WHERE    1    IN    ( SELECT    1  )    AND    1  .  0    IN    ( SELECT    1  )  \"  )  ;", "assertQuery (  \" SELECT    1  .  0    in    ( values    (  1  )  ,     (  2  )  ,     (  3  )  )  \"  ,     \" SELECT   true \"  )  ;", "assertQuery (  \" SELECT   CAST (  1    AS   decimal (  3  ,  2  )  )    IN    ( SELECT   CAST (  1    AS   decimal (  3  ,  1  )  )  )  \"  ,     \" SELECT   true \"  )  ;", "assertQuery (  \" SELECT   CAST (  1    AS   decimal (  3  ,  2  )  )    IN    ( values    ( cast (  1    AS   decimal (  3  ,  1  )  )  )  ,     ( cast    (  2    AS   decimal (  3  ,  1  )  )  )  )  \"  ,     \" SELECT   true \"  )  ;", "assertQuery (  \" SELECT    1    IN    ( SELECT    1  )  ,     2    IN    ( SELECT    1  )    WHERE    1    IN    ( SELECT    1  )  \"  )  ;", "assertQuery (  \" SELECT    ( SELECT    1  )    IN    ( SELECT    1  )  \"  )  ;", "assertQuery (  \" SELECT    ( SELECT    2  )    IN    (  1  ,     ( SELECT    2  )  )  \"  )  ;", "assertQuery (  \" SELECT    (  2     +     ( SELECT    1  )  )    IN    ( SELECT    1  )  \"  )  ;", "assertQuery (  \" SELECT    (  1    IN    ( SELECT    1  )  )    IN    ( SELECT   TRUE )  \"  )  ;", "assertQuery (  \" SELECT    (  ( SELECT    1  )    IN    ( SELECT    1  )  )    IN    ( SELECT   TRUE )  \"  )  ;", "assertQuery (  \" SELECT    ( EXISTS ( SELECT    1  )  )    IN    ( SELECT   TRUE )  \"  )  ;", "assertQuery (  \" SELECT    (  1     =    ANY ( SELECT    1  )  )    IN    ( SELECT   TRUE )  \"  )  ;", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  \" SELECT    *  ,    o 2  . custkey \\ n \"     +     \"       IN    (  \\ n \"  )     +     \"             SELECT   orderkey \\ n \"  )     +     \"             FROM   lineitem \\ n \"  )     +     \"             WHERE   orderkey    %     5     =     0  )  \\ n \"  )     +     \" FROM    ( SELECT    *    FROM   orders   WHERE   custkey    %     2  5  6     =     0  )    o 1  \\ n \"  )     +     \" JOIN    ( SELECT    *    FROM   orders   WHERE   custkey    %     2  5  6     =     0  )    o 2  \\ n \"  )     +     \"       ON    ( o 1  . orderkey   IN    ( SELECT   orderkey   FROM   lineitem   WHERE   orderkey    %     4     =     0  )  )     =     ( o 2  . orderkey   IN    ( SELECT   orderkey   FROM   lineitem   WHERE   orderkey    %     4     =     0  )  )  \\ n \"  )     +     \" WHERE   o 1  . orderkey \\ n \"  )     +     \"       IN    (  \\ n \"  )     +     \"             SELECT   orderkey \\ n \"  )     +     \"             FROM   lineitem \\ n \"  )     +     \"             WHERE   orderkey    %     4     =     0  )  \\ n \"  )     +     \" ORDER   BY   o 1  . orderkey \\ n \"  )     +     \"       IN    (  \\ n \"  )     +     \"             SELECT   orderkey \\ n \"  )     +     \"             FROM   lineitem \\ n \"  )     +     \"             WHERE   orderkey    %     7     =     0  )  \"  )  )  )  ;", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  \" SELECT   orderkey \\ n \"     +     \"       IN    (  \\ n \"  )     +     \"             SELECT   orderkey \\ n \"  )     +     \"             FROM   lineitem \\ n \"  )     +     \"             WHERE   partkey    %     4     =     0  )  ,  \\ n \"  )     +     \"       SUM (  \\ n \"  )     +     \"             CASE \\ n \"  )     +     \"                   WHEN   orderkey \\ n \"  )     +     \"                         IN    (  \\ n \"  )     +     \"                               SELECT   orderkey \\ n \"  )     +     \"                               FROM   lineitem \\ n \"  )     +     \"                               WHERE   suppkey    %     4     =     0  )  \\ n \"  )     +     \"                   THEN    1  \\ n \"  )     +     \"                   ELSE    0  \\ n \"  )     +     \"                   END )  \\ n \"  )     +     \" FROM   orders \\ n \"  )     +     \" GROUP   BY   orderkey \\ n \"  )     +     \"       IN    (  \\ n \"  )     +     \"             SELECT   orderkey \\ n \"  )     +     \"             FROM   lineitem \\ n \"  )     +     \"             WHERE   partkey    %     4     =     0  )  \\ n \"  )     +     \" HAVING   SUM (  \\ n \"  )     +     \"       CASE \\ n \"  )     +     \"             WHEN   orderkey \\ n \"  )     +     \"                   IN    (  \\ n \"  )     +     \"                         SELECT   orderkey \\ n \"  )     +     \"                         FROM   lineitem \\ n \"  )     +     \"                         WHERE   suppkey    %     4     =     0  )  \\ n \"  )     +     \"                   THEN    1  \\ n \"  )     +     \"                   ELSE    0  \\ n \"  )     +     \"                   END )     >     1  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSemiJoin"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  (  (  \" SELECT   orderkey \\ n \"     +     \"       IN    (  \\ n \"  )     +     \"             SELECT   CASE   WHEN   orderkey    %     1  0     =     0    THEN   NULL   ELSE   orderkey   END \\ n \"  )     +     \"             FROM   lineitem \\ n \"  )     +     \"             WHERE   orderkey    %     2     =     0  \\ n \"  )     +     \"             GROUP   BY   orderkey \\ n \"  )     +     \"        )  \\ n \"  )     +     \" FROM    (  \\ n \"  )     +     \"       SELECT   orderkey \\ n \"  )     +     \"       FROM   orders \\ n \"  )     +     \"       WHERE   orderkey    %     3     =     0  )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSemiJoinAggregationNullHandling"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  \" SELECT   orderkey \\ n \"     +     \"       IN    (  \\ n \"  )     +     \"             SELECT   orderkey \\ n \"  )     +     \"             FROM    (  \\ n \"  )     +     \"                   SELECT   CASE   WHEN   orderkey    %     5  0  0     =     0    THEN   NULL   ELSE   orderkey   END   AS   orderkey \\ n \"  )     +     \"                   FROM   orders \\ n \"  )     +     \"                   WHERE   orderkey    %     2  0  0     =     0  \\ n \"  )     +     \"                   UNION   ALL \\ n \"  )     +     \"                   SELECT   CASE   WHEN   orderkey    %     6  0  0     =     0    THEN   NULL   ELSE   orderkey   END   AS   orderkey \\ n \"  )     +     \"                   FROM   orders \\ n \"  )     +     \"                   WHERE   orderkey    %     3  0  0     =     0  \\ n \"  )     +     \"              )  \\ n \"  )     +     \"             GROUP   BY   orderkey \\ n \"  )     +     \"        )  \\ n \"  )     +     \" FROM    (  \\ n \"  )     +     \"       SELECT   orderkey \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   orderkey    %     1  0  0     =     0  )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSemiJoinAggregationUnionNullHandling"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  \" SELECT   COUNT (  *  )  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT   orderkey \\ n \"  )     +     \"       IN    (  \\ n \"  )     +     \"             SELECT   orderkey \\ n \"  )     +     \"             FROM   lineitem \\ n \"  )     +     \"             WHERE   orderkey    %     2     =     0  )  \\ n \"  )     +     \"       FROM   orders \\ n \"  )     +     \"       LIMIT    1  0  )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSemiJoinLimitPushDown"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" WITH   empty   AS    ( SELECT    1    WHERE   FALSE )     \"     +     \" SELECT    3    FROM    ( VALUES    1  )    WHERE   NULL   IN    ( SELECT    *    FROM   empty )  \"  )  ,     \" SELECT    0    WHERE   FALSE \"  )  ;", "assertQuery (  (  \"  \"     +     (  (  (  (  \" SELECT   orderkey \\ n \"     +     \"       IN    (  \\ n \"  )     +     \"             SELECT   CASE   WHEN   orderkey    %     3     =     0    THEN   NULL   ELSE   orderkey   END \\ n \"  )     +     \"             FROM   lineitem )  \\ n \"  )     +     \" FROM   orders \"  )  )  )  ;", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  \" SELECT   orderkey \\ n \"     +     \"       IN    (  \\ n \"  )     +     \"             SELECT   orderkey \\ n \"  )     +     \"             FROM   lineitem )  \\ n \"  )     +     \" FROM    (  \\ n \"  )     +     \"       SELECT   CASE   WHEN   orderkey    %     3     =     0    THEN   NULL   ELSE   orderkey   END   AS   orderkey \\ n \"  )     +     \"       FROM   orders )  \"  )  )  )  ;", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  \" SELECT   orderkey \\ n \"     +     \"       IN    (  \\ n \"  )     +     \"             SELECT   CASE   WHEN   orderkey    %     3     =     0    THEN   NULL   ELSE   orderkey   END \\ n \"  )     +     \"             FROM   lineitem )  \\ n \"  )     +     \" FROM    (  \\ n \"  )     +     \"       SELECT   CASE   WHEN   orderkey    %     4     =     0    THEN   NULL   ELSE   orderkey   END   AS   orderkey \\ n \"  )     +     \"       FROM   orders )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSemiJoinNullHandling"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  \" SELECT   COUNT (  *  )  \\ n \"     +     \" FROM    ( SELECT    *    FROM   orders   WHERE   custkey    %     2     =     0    AND   orderkey    %     3     =     0  )  \\ n \"  )     +     \" WHERE   orderkey \\ n \"  )     +     \"       IN    (  \\ n \"  )     +     \"             SELECT   CASE   WHEN   orderkey    %     7     =     0    THEN   NULL   ELSE   orderkey   END \\ n \"  )     +     \"             FROM   lineitem \\ n \"  )     +     \"             WHERE   partkey    %     2     =     0  )  \\ n \"  )     +     \"       AND \\ n \"  )     +     \"             orderkey    %     2     =     0  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSemiJoinPredicateMoveAround"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  (  (  (  (  (  (  \" SELECT   orderkey \\ n \"     +     \"       IN    (  \\ n \"  )     +     \"             SELECT   CASE   WHEN   orderkey    %     5  0  0     =     0    THEN   NULL   ELSE   orderkey   END \\ n \"  )     +     \"             FROM   lineitem \\ n \"  )     +     \"             WHERE   orderkey    %     2  5  0     =     0  \\ n \"  )     +     \"             UNION   ALL \\ n \"  )     +     \"             SELECT   CASE   WHEN   orderkey    %     3  0  0     =     0    THEN   NULL   ELSE   orderkey   END \\ n \"  )     +     \"             FROM   lineitem \\ n \"  )     +     \"             WHERE   orderkey    %     2  0  0     =     0  \\ n \"  )     +     \"             GROUP   BY   orderkey \\ n \"  )     +     \"        )  \\ n \"  )     +     \" FROM    (  \\ n \"  )     +     \"       SELECT   orderkey \\ n \"  )     +     \"       FROM   orders \\ n \"  )     +     \"       WHERE   orderkey    %     1  0  0     =     0  )  \\ n \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSemiJoinUnionAggregationNullHandling"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  (  (  (  (  (  \" SELECT   orderkey \\ n \"     +     \"       IN    (  \\ n \"  )     +     \"             SELECT   CASE   WHEN   orderkey    %     5  0  0     =     0    THEN   NULL   ELSE   orderkey   END \\ n \"  )     +     \"             FROM   orders \\ n \"  )     +     \"             WHERE   orderkey    %     2  0  0     =     0  \\ n \"  )     +     \"             UNION   ALL \\ n \"  )     +     \"             SELECT   CASE   WHEN   orderkey    %     6  0  0     =     0    THEN   NULL   ELSE   orderkey   END \\ n \"  )     +     \"             FROM   orders \\ n \"  )     +     \"             WHERE   orderkey    %     3  0  0     =     0  \\ n \"  )     +     \"        )  \\ n \"  )     +     \" FROM    (  \\ n \"  )     +     \"       SELECT   orderkey \\ n \"  )     +     \"       FROM   lineitem \\ n \"  )     +     \"       WHERE   orderkey    %     1  0  0     =     0  )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSemiJoinUnionNullHandling"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   linenumber ,    min ( orderkey )  ,     6    IN    ( SELECT   orderkey   FROM   orders   WHERE   orderkey    <     7  )  \"     +     (  \" FROM   lineitem    \"     +     \" GROUP   BY   linenumber \"  )  )  )  ;", "assertQuery (  (  \" SELECT   linenumber ,    min ( orderkey )  ,     6    IN    ( SELECT   orderkey   FROM   orders   WHERE   orderkey    <     7  )  \"     +     (  \" FROM   lineitem    \"     +     \" GROUP   BY   linenumber ,     6    IN    ( SELECT   orderkey   FROM   orders   WHERE   orderkey    <     7  )  \"  )  )  )  ;", "assertQuery (  (  \" SELECT   linenumber ,    min ( orderkey )     \"     +     (  \" FROM   lineitem    \"     +     \" GROUP   BY   linenumber ,     6    IN    ( SELECT   orderkey   FROM   orders   WHERE   orderkey    <     7  )  \"  )  )  )  ;", "assertQuery (  (  \" SELECT   linenumber ,    min ( orderkey )     \"     +     (  (  \" FROM   lineitem    \"     +     \" GROUP   BY   linenumber    \"  )     +     \" HAVING    6    IN    ( SELECT   orderkey   FROM   orders   WHERE   orderkey    <     7  )  \"  )  )  )  ;", "assertQuery (  (  \" SELECT   linenumber ,    min ( orderkey )  ,     6    IN    ( SELECT   orderkey   FROM   orders   WHERE   orderkey    <     7  )  \"     +     (  (  \" FROM   lineitem    \"     +     \" GROUP   BY   linenumber ,     6    IN    ( SELECT   orderkey   FROM   orders   WHERE   orderkey    <     7  )  \"  )     +     \" HAVING    6    IN    ( SELECT   orderkey   FROM   orders   WHERE   orderkey    <     7  )  \"  )  )  )  ;", "assertQuery (  (  \" SELECT   linenumber ,    min ( orderkey )  ,     6    IN    ( SELECT   max ( orderkey )    FROM   orders   WHERE   orderkey    <     7  )  \"     +     (  \" FROM   lineitem    \"     +     \" GROUP   BY   linenumber ,     6    IN    ( SELECT   sum ( orderkey )    FROM   orders   WHERE   orderkey    <     5  )  \"  )  )  )  ;", "assertQuery (  (  \" SELECT   linenumber ,    min ( orderkey )     \"     +     (  (  \" FROM   lineitem    \"     +     \" GROUP   BY   linenumber ,     6    IN    ( SELECT   orderkey   FROM   orders   WHERE   orderkey    <     7  )  \"  )     +     \" HAVING    6    IN    ( SELECT   orderkey   FROM   orders   WHERE   orderkey    >     3  )  \"  )  )  )  ;", "assertQuery (  (  \" SELECT   linenumber ,    min ( orderkey )  ,     6    IN    ( SELECT   orderkey   FROM   orders   WHERE   orderkey    <     7  )  \"     +     (  (  \" FROM   lineitem    \"     +     \" GROUP   BY   linenumber ,     6    IN    ( SELECT   orderkey   FROM   orders   WHERE   orderkey    <     5  )  \"  )     +     \" HAVING    6    IN    ( SELECT   orderkey   FROM   orders   WHERE   orderkey    >     3  )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSemiJoinWithGroupBy"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   result    =    computeActual (  \" SHOW   CATALOGS \"  )  ;", "assertTrue ( result . getOnlyColumnAsSet (  )  . contains ( getSession (  )  . getCatalog (  )  . get (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testShowCatalogs"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   result    =    computeActual ( String . format (  \" SHOW   CATALOGS   LIKE    '  % s '  \"  ,    getSession (  )  . getCatalog (  )  . get (  )  )  )  ;", "assertEquals ( result . getOnlyColumnAsSet (  )  ,    ImmutableSet . of ( getSession (  )  . getCatalog (  )  . get (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testShowCatalogsLike"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  \" SHOW   COLUMNS   FROM   orders \"  )  ;", "MaterializedResult   expectedUnparametrizedVarchar    =    resultBuilder ( getSession (  )  ,    VARCHAR ,    VARCHAR ,    VARCHAR ,    VARCHAR )  . row (  \" orderkey \"  ,     \" bigint \"  ,     \"  \"  ,     \"  \"  )  . row (  \" custkey \"  ,     \" bigint \"  ,     \"  \"  ,     \"  \"  )  . row (  \" orderstatus \"  ,     \" varchar \"  ,     \"  \"  ,     \"  \"  )  . row (  \" totalprice \"  ,     \" double \"  ,     \"  \"  ,     \"  \"  )  . row (  \" orderdate \"  ,     \" date \"  ,     \"  \"  ,     \"  \"  )  . row (  \" orderpriority \"  ,     \" varchar \"  ,     \"  \"  ,     \"  \"  )  . row (  \" clerk \"  ,     \" varchar \"  ,     \"  \"  ,     \"  \"  )  . row (  \" shippriority \"  ,     \" integer \"  ,     \"  \"  ,     \"  \"  )  . row (  \" comment \"  ,     \" varchar \"  ,     \"  \"  ,     \"  \"  )  . build (  )  ;", "MaterializedResult   expectedParametrizedVarchar    =    resultBuilder ( getSession (  )  ,    VARCHAR ,    VARCHAR ,    VARCHAR ,    VARCHAR )  . row (  \" orderkey \"  ,     \" bigint \"  ,     \"  \"  ,     \"  \"  )  . row (  \" custkey \"  ,     \" bigint \"  ,     \"  \"  ,     \"  \"  )  . row (  \" orderstatus \"  ,     \" varchar (  1  )  \"  ,     \"  \"  ,     \"  \"  )  . row (  \" totalprice \"  ,     \" double \"  ,     \"  \"  ,     \"  \"  )  . row (  \" orderdate \"  ,     \" date \"  ,     \"  \"  ,     \"  \"  )  . row (  \" orderpriority \"  ,     \" varchar (  1  5  )  \"  ,     \"  \"  ,     \"  \"  )  . row (  \" clerk \"  ,     \" varchar (  1  5  )  \"  ,     \"  \"  ,     \"  \"  )  . row (  \" shippriority \"  ,     \" integer \"  ,     \"  \"  ,     \"  \"  )  . row (  \" comment \"  ,     \" varchar (  7  9  )  \"  ,     \"  \"  ,     \"  \"  )  . build (  )  ;", "assertTrue (  (  ( actual . equals ( expectedParametrizedVarchar )  )     |  |     ( actual . equals ( expectedUnparametrizedVarchar )  )  )  ,    String . format (  \"  % s   does   not   matche   neither   of    % s   and    % s \"  ,    actual ,    expectedParametrizedVarchar ,    expectedUnparametrizedVarchar )  )  ;", "}", "METHOD_END"], "methodName": ["testShowColumns"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   result    =    computeActual (  \" SHOW   FUNCTIONS \"  )  ;", "ImmutableMultimap < String ,    MaterializedRow >    functions    =    Multimaps . index ( result . getMaterializedRows (  )  ,     (    input )     -  >     {", "assertEquals ( input . getFieldCount (  )  ,     6  )  ;", "return    (  ( String )     ( input . getField (  0  )  )  )  ;", "}  )  ;", "assertTrue ( functions . containsKey (  \" avg \"  )  ,     (  (  \" Expected   function   names    \"     +    functions )     +     \"    to   contain    ' avg '  \"  )  )  ;", "assertEquals ( functions . get (  \" avg \"  )  . asList (  )  . size (  )  ,     6  )  ;", "assertEquals ( functions . get (  \" avg \"  )  . asList (  )  . get (  0  )  . getField (  1  )  ,     \" decimal ( p , s )  \"  )  ;", "assertEquals ( functions . get (  \" avg \"  )  . asList (  )  . get (  0  )  . getField (  2  )  ,     \" decimal ( p , s )  \"  )  ;", "assertEquals ( functions . get (  \" avg \"  )  . asList (  )  . get (  0  )  . getField (  3  )  ,     \" aggregate \"  )  ;", "assertEquals ( functions . get (  \" avg \"  )  . asList (  )  . get (  1  )  . getField (  1  )  ,     \" double \"  )  ;", "assertEquals ( functions . get (  \" avg \"  )  . asList (  )  . get (  1  )  . getField (  2  )  ,     \" bigint \"  )  ;", "assertEquals ( functions . get (  \" avg \"  )  . asList (  )  . get (  1  )  . getField (  3  )  ,     \" aggregate \"  )  ;", "assertEquals ( functions . get (  \" avg \"  )  . asList (  )  . get (  2  )  . getField (  1  )  ,     \" double \"  )  ;", "assertEquals ( functions . get (  \" avg \"  )  . asList (  )  . get (  2  )  . getField (  2  )  ,     \" double \"  )  ;", "assertEquals ( functions . get (  \" avg \"  )  . asList (  )  . get (  2  )  . getField (  3  )  ,     \" aggregate \"  )  ;", "assertEquals ( functions . get (  \" avg \"  )  . asList (  )  . get (  3  )  . getField (  1  )  ,     \" interval   day   to   second \"  )  ;", "assertEquals ( functions . get (  \" avg \"  )  . asList (  )  . get (  3  )  . getField (  2  )  ,     \" interval   day   to   second \"  )  ;", "assertEquals ( functions . get (  \" avg \"  )  . asList (  )  . get (  3  )  . getField (  3  )  ,     \" aggregate \"  )  ;", "assertEquals ( functions . get (  \" avg \"  )  . asList (  )  . get (  4  )  . getField (  1  )  ,     \" interval   year   to   month \"  )  ;", "assertEquals ( functions . get (  \" avg \"  )  . asList (  )  . get (  4  )  . getField (  2  )  ,     \" interval   year   to   month \"  )  ;", "assertEquals ( functions . get (  \" avg \"  )  . asList (  )  . get (  4  )  . getField (  3  )  ,     \" aggregate \"  )  ;", "assertEquals ( functions . get (  \" avg \"  )  . asList (  )  . get (  5  )  . getField (  1  )  ,     \" real \"  )  ;", "assertEquals ( functions . get (  \" avg \"  )  . asList (  )  . get (  5  )  . getField (  2  )  ,     \" real \"  )  ;", "assertEquals ( functions . get (  \" avg \"  )  . asList (  )  . get (  5  )  . getField (  3  )  ,     \" aggregate \"  )  ;", "assertTrue ( functions . containsKey (  \" abs \"  )  ,     (  (  \" Expected   function   names    \"     +    functions )     +     \"    to   contain    ' abs '  \"  )  )  ;", "assertEquals ( functions . get (  \" abs \"  )  . asList (  )  . get (  0  )  . getField (  3  )  ,     \" scalar \"  )  ;", "assertEquals ( functions . get (  \" abs \"  )  . asList (  )  . get (  0  )  . getField (  4  )  ,    true )  ;", "assertTrue ( functions . containsKey (  \" rand \"  )  ,     (  (  \" Expected   function   names    \"     +    functions )     +     \"    to   contain    ' rand '  \"  )  )  ;", "assertEquals ( functions . get (  \" rand \"  )  . asList (  )  . get (  0  )  . getField (  3  )  ,     \" scalar \"  )  ;", "assertEquals ( functions . get (  \" rand \"  )  . asList (  )  . get (  0  )  . getField (  4  )  ,    false )  ;", "assertTrue ( functions . containsKey (  \" rank \"  )  ,     (  (  \" Expected   function   names    \"     +    functions )     +     \"    to   contain    ' rank '  \"  )  )  ;", "assertEquals ( functions . get (  \" rank \"  )  . asList (  )  . get (  0  )  . getField (  3  )  ,     \" window \"  )  ;", "assertTrue ( functions . containsKey (  \" rank \"  )  ,     (  (  \" Expected   function   names    \"     +    functions )     +     \"    to   contain    ' split _ part '  \"  )  )  ;", "assertEquals ( functions . get (  \" split _ part \"  )  . asList (  )  . get (  0  )  . getField (  1  )  ,     \" varchar ( x )  \"  )  ;", "assertEquals ( functions . get (  \" split _ part \"  )  . asList (  )  . get (  0  )  . getField (  2  )  ,     \" varchar ( x )  ,    varchar ( y )  ,    bigint \"  )  ;", "assertEquals ( functions . get (  \" split _ part \"  )  . asList (  )  . get (  0  )  . getField (  3  )  ,     \" scalar \"  )  ;", "assertFalse ( functions . containsKey (  \" like \"  )  ,     (  (  \" Expected   function   names    \"     +    functions )     +     \"    not   to   contain    ' like '  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testShowFunctions"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  \" SHOW   PARTITIONS   FROM   orders \"  ,     \" line    1  :  1  :    Table   does   not   have   partition   columns :     \\  \\ S +  \\  \\  . orders \"  )  ;", "assertQueryFails (  \" SHOW   PARTITIONS   FROM   orders   WHERE   orderkey    <     1  0  \"  ,     \" line    1  :  1  :    Table   does   not   have   partition   columns :     \\  \\ S +  \\  \\  . orders \"  )  ;", "assertQueryFails (  \" SHOW   PARTITIONS   FROM   orders   WHERE   invalid _ column    <     1  0  \"  ,     \" line    1  :  1  :    Table   does   not   have   partition   columns :     \\  \\ S +  \\  \\  . orders \"  )  ;", "assertQueryFails (  \" SHOW   PARTITIONS   FROM   orders   LIMIT    2  \"  ,     \" line    1  :  1  :    Table   does   not   have   partition   columns :     \\  \\ S +  \\  \\  . orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testShowPartitions"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   result    =    computeActual (  \" SHOW   SCHEMAS \"  )  ;", "assertTrue ( result . getOnlyColumnAsSet (  )  . containsAll ( ImmutableSet . of ( getSession (  )  . getSchema (  )  . get (  )  ,    INFORMATION _ SCHEMA )  )  )  ;", "}", "METHOD_END"], "methodName": ["testShowSchemas"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   result    =    computeActual ( String . format (  \" SHOW   SCHEMAS   FROM    % s \"  ,    getSession (  )  . getCatalog (  )  . get (  )  )  )  ;", "assertTrue ( result . getOnlyColumnAsSet (  )  . containsAll ( ImmutableSet . of ( getSession (  )  . getSchema (  )  . get (  )  ,    INFORMATION _ SCHEMA )  )  )  ;", "}", "METHOD_END"], "methodName": ["testShowSchemasFrom"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   result    =    computeActual ( String . format (  \" SHOW   SCHEMAS   LIKE    '  % s '  \"  ,    getSession (  )  . getSchema (  )  . get (  )  )  )  ;", "assertEquals ( result . getOnlyColumnAsSet (  )  ,    ImmutableSet . of ( getSession (  )  . getSchema (  )  . get (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testShowSchemasLike"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  \" SHOW   SCHEMAS   IN   foo   LIKE    '  %  $  _  %  '    ESCAPE \"  ,     \" line    1  :  3  9  :    no   viable   alternative   at   input    '  < EOF >  '  \"  )  ;", "assertQueryFails (  \" SHOW   SCHEMAS   LIKE    ' t $  _  %  '    ESCAPE    '  '  \"  ,     \" Escape   string   must   be   a   single   character \"  )  ;", "assertQueryFails (  \" SHOW   SCHEMAS   LIKE    ' t $  _  %  '    ESCAPE    '  $  $  '  \"  ,     \" Escape   string   must   be   a   single   character \"  )  ;", "Set < Object >    allSchemas    =    computeActual (  \" SHOW   SCHEMAS \"  )  . getOnlyColumnAsSet (  )  ;", "assertEquals ( allSchemas ,    computeActual (  \" SHOW   SCHEMAS   LIKE    '  %  _  %  '  \"  )  . getOnlyColumnAsSet (  )  )  ;", "Set < Object >    result    =    computeActual (  \" SHOW   SCHEMAS   LIKE    '  %  $  _  %  '    ESCAPE    '  $  '  \"  )  . getOnlyColumnAsSet (  )  ;", "assertNotEquals ( allSchemas ,    result )  ;", "assertThat ( result )  . contains (  \" information _ schema \"  )  . allMatch (  (    schemaName )     -  >     (  ( String )     ( schemaName )  )  . contains (  \"  _  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testShowSchemasLikeWithEscape"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    new   Session ( getSession (  )  . getQueryId (  )  ,    Optional . empty (  )  ,    getSession (  )  . isClientTransactionSupport (  )  ,    getSession (  )  . getIdentity (  )  ,    getSession (  )  . getSource (  )  ,    getSession (  )  . getCatalog (  )  ,    getSession (  )  . getSchema (  )  ,    getSession (  )  . getTimeZoneKey (  )  ,    getSession (  )  . getLocale (  )  ,    getSession (  )  . getRemoteUserAddress (  )  ,    getSession (  )  . getUserAgent (  )  ,    getSession (  )  . getClientInfo (  )  ,    getSession (  )  . getClientTags (  )  ,    getSession (  )  . getResourceEstimates (  )  ,    getSession (  )  . getStartTime (  )  ,    ImmutableMap .  < String ,    String > builder (  )  . put (  \" test _ string \"  ,     \" foo   string \"  )  . put (  \" test _ long \"  ,     \"  4  2  4  2  4  2  \"  )  . build (  )  ,    ImmutableMap . of (  )  ,    ImmutableMap . of ( TESTING _ CATALOG ,    ImmutableMap .  < String ,    String > builder (  )  . put (  \" connector _ string \"  ,     \" bar   string \"  )  . put (  \" connector _ long \"  ,     \"  1  1  \"  )  . build (  )  )  ,    getQueryRunner (  )  . getMetadata (  )  . getSessionPropertyManager (  )  ,    getSession (  )  . getPreparedStatements (  )  )  ;", "MaterializedResult   result    =    computeActual ( session ,     \" SHOW   SESSION \"  )  ;", "ImmutableMap < String ,    MaterializedRow >    properties    =    Maps . uniqueIndex ( result . getMaterializedRows (  )  ,     (    input )     -  >     {", "assertEquals ( input . getFieldCount (  )  ,     5  )  ;", "return    (  ( String )     ( input . getField (  0  )  )  )  ;", "}  )  ;", "assertEquals ( properties . get (  \" test _ string \"  )  ,    new   MaterializedRow (  1  ,     \" test _ string \"  ,     \" foo   string \"  ,     \" test   default \"  ,     \" varchar \"  ,     \" test   string   property \"  )  )  ;", "assertEquals ( properties . get (  \" test _ long \"  )  ,    new   MaterializedRow (  1  ,     \" test _ long \"  ,     \"  4  2  4  2  4  2  \"  ,     \"  4  2  \"  ,     \" bigint \"  ,     \" test   long   property \"  )  )  ;", "assertEquals ( properties . get (  (  ( TESTING _ CATALOG )     +     \"  . connector _ string \"  )  )  ,    new   MaterializedRow (  1  ,     (  ( TESTING _ CATALOG )     +     \"  . connector _ string \"  )  ,     \" bar   string \"  ,     \" connector   default \"  ,     \" varchar \"  ,     \" connector   string   property \"  )  )  ;", "assertEquals ( properties . get (  (  ( TESTING _ CATALOG )     +     \"  . connector _ long \"  )  )  ,    new   MaterializedRow (  1  ,     (  ( TESTING _ CATALOG )     +     \"  . connector _ long \"  )  ,     \"  1  1  \"  ,     \"  3  3  \"  ,     \" bigint \"  ,     \" connector   long   property \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testShowSession"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  \" SHOW   STATS   FOR    ( SELECT   avg ( totalprice )    FROM   orders   GROUP   BY   clerk )  \"  ,     \"  .  * GROUP   BY   is   not   supported   in   SHOW   STATS   SELECT   clause \"  )  ;", "}", "METHOD_END"], "methodName": ["testShowStatsWithGroupByFails"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  \" SHOW   STATS   FOR    ( SELECT   avg ( orderkey )    FROM   orders   HAVING   avg ( orderkey )     <     5  )  \"  ,     \"  .  * HAVING   is   not   supported   in   SHOW   STATS   SELECT   clause \"  )  ;", "}", "METHOD_END"], "methodName": ["testShowStatsWithHavingFails"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  \" SHOW   STATS   FOR    ( SELECT    *    FROM   orders ,    lineitem )  \"  ,     \"  .  * There   must   be   exactly   one   table   in   query   passed   to   SHOW   STATS   SELECT   clause \"  )  ;", "}", "METHOD_END"], "methodName": ["testShowStatsWithMultipleFromFails"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  \" SHOW   STATS   FOR    ( SELECT   DISTINCT    *    FROM   orders )  \"  ,     \"  .  * DISTINCT   is   not   supported   by   SHOW   STATS   SELECT   clause \"  )  ;", "}", "METHOD_END"], "methodName": ["testShowStatsWithSelectDistinctFails"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  \" SHOW   STATS   FOR    ( SELECT   sin ( orderkey )    FROM   orders )  \"  ,     \"  .  * Only    \\  \\  *    and   column   references   are   supported   by   SHOW   STATS   SELECT   clause \"  )  ;", "}", "METHOD_END"], "methodName": ["testShowStatsWithSelectFunctionCallFails"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  \" SHOW   STATS   FOR    ( SELECT   orderkey   FROM   orders   WHERE   sin ( orderkey )     >     0  )  \"  ,     \"  .  * Only   literals ,    column   references ,    comparators ,    is    \\  \\  ( not \\  \\  )    null   and   logical   operators   are   allowed   in   WHERE   of   SHOW   STATS   SELECT   clause \"  )  ;", "}", "METHOD_END"], "methodName": ["testShowStatsWithWhereFunctionCallFails"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  \" SHOW   STATS   FOR    ( SELECT    1  )  \"  ,     \"  .  * There   must   be   exactly   one   table   in   query   passed   to   SHOW   STATS   SELECT   clause \"  )  ;", "}", "METHOD_END"], "methodName": ["testShowStatsWithoutFromFails"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "Set < String >    expectedTables    =    ImmutableSet . copyOf ( transform ( TpchTable . getTables (  )  ,    TpchTable :  : getTableName )  )  ;", "MaterializedResult   result    =    computeActual (  \" SHOW   TABLES \"  )  ;", "assertTrue ( result . getOnlyColumnAsSet (  )  . containsAll ( expectedTables )  )  ;", "}", "METHOD_END"], "methodName": ["testShowTables"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "Set < String >    expectedTables    =    ImmutableSet . copyOf ( transform ( TpchTable . getTables (  )  ,    TpchTable :  : getTableName )  )  ;", "String   catalog    =    getSession (  )  . getCatalog (  )  . get (  )  ;", "String   schema    =    getSession (  )  . getSchema (  )  . get (  )  ;", "MaterializedResult   result    =    computeActual (  (  \" SHOW   TABLES   FROM    \"     +    schema )  )  ;", "assertTrue ( result . getOnlyColumnAsSet (  )  . containsAll ( expectedTables )  )  ;", "result    =    computeActual (  (  (  (  \" SHOW   TABLES   FROM    \"     +    catalog )     +     \"  .  \"  )     +    schema )  )  ;", "assertTrue ( result . getOnlyColumnAsSet (  )  . containsAll ( expectedTables )  )  ;", "try    {", "computeActual (  \" SHOW   TABLES   FROM   UNKNOWN \"  )  ;", "fail (  \" Showing   tables   in   an   unknown   schema   should   fail \"  )  ;", "}    catch    ( SemanticException   e )     {", "assertEquals ( e . getCode (  )  ,    MISSING _ SCHEMA )  ;", "}    catch    ( RuntimeException   e )     {", "assertEquals ( e . getMessage (  )  ,     \" line    1  :  1  :    Schema    ' unknown '    does   not   exist \"  )  ;", "}", "try    {", "computeActual (  \" SHOW   TABLES   FROM   UNKNOWNCATALOG . UNKNOWNSCHEMA \"  )  ;", "fail (  \" Showing   tables   in   an   unknown   catalog   and   unknown   schema   should   fail   with   unknown   catalog \"  )  ;", "}    catch    ( SemanticException   e )     {", "assertEquals ( e . getCode (  )  ,    MISSING _ CATALOG )  ;", "}    catch    ( RuntimeException   e )     {", "assertEquals ( e . getMessage (  )  ,     \" line    1  :  1  :    Catalog    ' unknowncatalog '    does   not   exist \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["testShowTablesFrom"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertThat ( computeActual (  \" SHOW   TABLES   LIKE    ' or %  '  \"  )  . getOnlyColumnAsSet (  )  )  . contains (  \" orders \"  )  . allMatch (  (    tableName )     -  >     (  ( String )     ( tableName )  )  . startsWith (  \" or \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testShowTablesLike"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  \" SHOW   TABLES   IN   a   LIKE    '  %  $  _  %  '    ESCAPE \"  ,     \" line    1  :  3  6  :    no   viable   alternative   at   input    '  < EOF >  '  \"  )  ;", "assertQueryFails (  \" SHOW   TABLES   LIKE    ' t $  _  %  '    ESCAPE    '  '  \"  ,     \" Escape   string   must   be   a   single   character \"  )  ;", "assertQueryFails (  \" SHOW   TABLES   LIKE    ' t $  _  %  '    ESCAPE    '  $  $  '  \"  ,     \" Escape   string   must   be   a   single   character \"  )  ;", "Set < Object >    allTables    =    computeActual (  \" SHOW   TABLES   FROM   information _ schema \"  )  . getOnlyColumnAsSet (  )  ;", "assertEquals ( allTables ,    computeActual (  \" SHOW   TABLES   FROM   information _ schema   LIKE    '  %  _  %  '  \"  )  . getOnlyColumnAsSet (  )  )  ;", "Set < Object >    result    =    computeActual (  \" SHOW   TABLES   FROM   information _ schema   LIKE    '  %  $  _  %  '    ESCAPE    '  $  '  \"  )  . getOnlyColumnAsSet (  )  ;", "assertNotEquals ( allTables ,    result )  ;", "assertThat ( result )  . contains (  \" table _ privileges \"  )  . allMatch (  (    schemaName )     -  >     (  ( String )     ( schemaName )  )  . contains (  \"  _  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testShowTablesLikeWithEscape"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    *    FROM    ( SELECT    1    a )    x   CROSS   JOIN    ( SELECT    2    b )    y \"  )  ;", "}", "METHOD_END"], "methodName": ["testSimpleCrossJoins"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   a ,    b   FROM    ( VALUES    (  1  )  ,     (  2  )  )    t    ( a )    FULL   OUTER   JOIN    ( VALUES    (  1  )  ,     (  3  )  )    u    ( b )    ON   a    =    b \"  ,     \" SELECT    *    FROM    ( VALUES    (  1  ,     1  )  ,     (  2  ,    NULL )  ,     ( NULL ,     3  )  )  \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   FULL   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey \"  ,     (  \" SELECT   COUNT (  *  )    FROM    (  \"     +     (  (  (  (  \" SELECT   lineitem . orderkey ,    orders . orderkey   AS   o 2    FROM   lineitem   LEFT   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey    \"     +     \" UNION   ALL    \"  )     +     \" SELECT   lineitem . orderkey ,    orders . orderkey   AS   o 2    FROM   lineitem   RIGHT   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey    \"  )     +     \" WHERE   lineitem . orderkey   IS   NULL \"  )     +     \"  )  \"  )  )  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   FULL   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey \"  ,     (  \" SELECT   COUNT (  *  )    FROM    (  \"     +     (  (  (  (  \" SELECT   lineitem . orderkey ,    orders . orderkey   AS   o 2    FROM   lineitem   LEFT   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey    \"     +     \" UNION   ALL    \"  )     +     \" SELECT   lineitem . orderkey ,    orders . orderkey   AS   o 2    FROM   lineitem   RIGHT   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey    \"  )     +     \" WHERE   lineitem . orderkey   IS   NULL \"  )     +     \"  )  \"  )  )  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   FULL   JOIN   orders   ON   lineitem . orderkey    =    orders . custkey \"  ,     (  \" SELECT   COUNT (  *  )    FROM    (  \"     +     (  (  (  (  \" SELECT   lineitem . orderkey ,    orders . orderkey   AS   o 2    FROM   lineitem   LEFT   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . custkey    \"     +     \" UNION   ALL    \"  )     +     \" SELECT   lineitem . orderkey ,    orders . orderkey   AS   o 2    FROM   lineitem   RIGHT   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . custkey    \"  )     +     \" WHERE   lineitem . orderkey   IS   NULL \"  )     +     \"  )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSimpleFullJoin"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   FULL   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   orders . orderkey    =     2  \"  ,     (  \" SELECT   COUNT (  *  )    FROM    (  \"     +     (  (  (  (  \" SELECT   lineitem . orderkey ,    orders . orderkey   AS   o 2    FROM   lineitem   LEFT   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   orders . orderkey    =     2  \"     +     \" UNION   ALL    \"  )     +     \" SELECT   lineitem . orderkey ,    orders . orderkey   AS   o 2    FROM   lineitem   RIGHT   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   orders . orderkey    =     2  \"  )     +     \" WHERE   lineitem . orderkey   IS   NULL \"  )     +     \"  )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSimpleFullJoinWithLeftConstantEquality"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   FULL   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   lineitem . orderkey    =     2  \"  ,     (  \" SELECT   COUNT (  *  )    FROM    (  \"     +     (  (  (  (  \" SELECT   lineitem . orderkey ,    orders . orderkey   AS   o 2    FROM   lineitem   LEFT   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   lineitem . orderkey    =     2  \"     +     \" UNION   ALL    \"  )     +     \" SELECT   lineitem . orderkey ,    orders . orderkey   AS   o 2    FROM   lineitem   RIGHT   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   lineitem . orderkey    =     2  \"  )     +     \" WHERE   lineitem . orderkey   IS   NULL \"  )     +     \"  )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSimpleFullJoinWithRightConstantEquality"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey \"  )  ;", "assertQuery (  (  \"  \"     +     (  (  (  (  \" SELECT   COUNT (  *  )    FROM    \"     +     \"  ( SELECT   orderkey   FROM   lineitem   WHERE   orderkey    <     1  0  0  0  )    a    \"  )     +     \" JOIN    \"  )     +     \"  ( SELECT   orderkey   FROM   orders   WHERE   orderkey    <     2  0  0  0  )    b    \"  )     +     \" ON   NOT    ( a . orderkey    <  =    b . orderkey )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSimpleJoin"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   orders . orderkey    =     2  \"  )  ;", "}", "METHOD_END"], "methodName": ["testSimpleJoinWithLeftConstantEquality"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   lineitem . orderkey    =     2  \"  )  ;", "}", "METHOD_END"], "methodName": ["testSimpleJoinWithRightConstantEquality"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   LEFT   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   LEFT   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey \"  )  ;", "assertQuery (  (  \" SELECT   x . val   FROM    \"     +     (  (  (  (  \"  ( SELECT   CAST ( ROW ( v )    AS   ROW ( val   integer )  )    FROM    ( VALUES    1  ,     2  ,     3  )    t ( v )  )    ta    ( x )     \"     +     \" LEFT   OUTER   JOIN    \"  )     +     \"  ( SELECT   CAST ( ROW ( v )    AS   ROW ( val   integer )  )    FROM    ( VALUES    1  ,     2  ,     3  )    t ( v )  )    tb    ( y )     \"  )     +     \" ON   x . val = y . val    \"  )     +     \" WHERE   y . val =  1  \"  )  )  ,     \" SELECT    1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testSimpleLeftJoin"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   LEFT   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   orders . orderkey    =     2  \"  )  ;", "}", "METHOD_END"], "methodName": ["testSimpleLeftJoinWithLeftConstantEquality"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   LEFT   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   lineitem . orderkey    =     2  \"  )  ;", "}", "METHOD_END"], "methodName": ["testSimpleLeftJoinWithRightConstantEquality"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   RIGHT   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   RIGHT   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   RIGHT   JOIN   orders   ON   lineitem . orderkey    =    orders . custkey \"  )  ;", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   RIGHT   OUTER   JOIN   orders   ON   lineitem . orderkey    =    orders . custkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testSimpleRightJoin"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   RIGHT   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   orders . orderkey    =     2  \"  )  ;", "}", "METHOD_END"], "methodName": ["testSimpleRightJoinWithLeftConstantEquality"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    FROM   lineitem   RIGHT   JOIN   orders   ON   lineitem . orderkey    =    orders . orderkey   AND   lineitem . orderkey    =     2  \"  )  ;", "}", "METHOD_END"], "methodName": ["testSimpleRightJoinWithRightConstantEquality"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  \" SELECT   nan (  )  ,    infinity (  )  ,     - infinity (  )  \"  )  ;", "MaterializedRow   row    =    getOnlyElement ( actual . getMaterializedRows (  )  )  ;", "assertEquals ( row . getField (  0  )  ,    Double . NaN )  ;", "assertEquals ( row . getField (  1  )  ,    Double . POSITIVE _ INFINITY )  ;", "assertEquals ( row . getField (  2  )  ,    Double . NEGATIVE _ INFINITY )  ;", "}", "METHOD_END"], "methodName": ["testSpecialFloatingPointValues"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   STDDEV _ SAMP ( custkey )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   STDDEV _ SAMP ( custkey )    FROM    ( SELECT   custkey   FROM   orders   ORDER   BY   custkey   LIMIT    2  )    T \"  )  ;", "assertQuery (  \" SELECT   STDDEV _ SAMP ( custkey )    FROM    ( SELECT   custkey   FROM   orders   ORDER   BY   custkey   LIMIT    1  )    T \"  )  ;", "assertQuery (  \" SELECT   STDDEV _ SAMP ( custkey )    FROM    ( SELECT   custkey   FROM   orders   LIMIT    0  )    T \"  )  ;", "assertQuery (  \" SELECT   STDDEV _ SAMP ( totalprice )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   STDDEV _ SAMP ( totalprice )    FROM    ( SELECT   totalprice   FROM   orders   ORDER   BY   totalprice   LIMIT    2  )    T \"  )  ;", "assertQuery (  \" SELECT   STDDEV _ SAMP ( totalprice )    FROM    ( SELECT   totalprice   FROM   orders   ORDER   BY   totalprice   LIMIT    1  )    T \"  )  ;", "assertQuery (  \" SELECT   STDDEV _ SAMP ( totalprice )    FROM    ( SELECT   totalprice   FROM   orders   LIMIT    0  )    T \"  )  ;", "}", "METHOD_END"], "methodName": ["testStdDev"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   STDDEV _ POP ( custkey )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   STDDEV _ POP ( custkey )    FROM    ( SELECT   custkey   FROM   orders   ORDER   BY   custkey   LIMIT    2  )    T \"  )  ;", "assertQuery (  \" SELECT   STDDEV _ POP ( custkey )    FROM    ( SELECT   custkey   FROM   orders   ORDER   BY   custkey   LIMIT    1  )    T \"  )  ;", "assertQuery (  \" SELECT   STDDEV _ POP ( custkey )    FROM    ( SELECT   custkey   FROM   orders   LIMIT    0  )    T \"  )  ;", "assertQuery (  \" SELECT   STDDEV _ POP ( totalprice )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   STDDEV _ POP ( totalprice )    FROM    ( SELECT   totalprice   FROM   orders   ORDER   BY   totalprice   LIMIT    2  )    T \"  )  ;", "assertQuery (  \" SELECT   STDDEV _ POP ( totalprice )    FROM    ( SELECT   totalprice   FROM   orders   ORDER   BY   totalprice   LIMIT    1  )    T \"  )  ;", "assertQuery (  \" SELECT   STDDEV _ POP ( totalprice )    FROM    ( SELECT   totalprice   FROM   orders   LIMIT    0  )    T \"  )  ;", "}", "METHOD_END"], "methodName": ["testStdDevPop"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "List < QueryTemplate . Parameter >    projections    =    QueryTemplate . parameter (  \" projection \"  )  . of (  \" count (  *  )  \"  ,     \"  *  \"  ,     \"  % condition %  \"  )  ;", "List < QueryTemplate . Parameter >    conditions    =    QueryTemplate . parameter (  \" condition \"  )  . of (  \" nationkey   IN    ( SELECT    1  )    OR   TRUE \"  ,     \" EXISTS ( SELECT    1  )    OR   TRUE \"  )  ;", "QueryTemplate . queryTemplate (  \" SELECT    % projection %    FROM   nation   WHERE    % condition %  \"  )  . replaceAll ( projections ,    conditions )  . forEach ( this :  : assertQuery )  ;", "QueryTemplate . queryTemplate (  \" SELECT    % projection %    FROM   nation   WHERE    (  % condition %  )    AND   nationkey    <  3  \"  )  . replaceAll ( projections ,    conditions )  . forEach ( this :  : assertQuery )  ;", "assertQuery (  \" SELECT   count (  *  )    FROM   nation   WHERE    ( SELECT   true   FROM    ( SELECT    1  )    t ( a )    WHERE   a    =    nationkey )    OR   TRUE \"  ,     \" SELECT    2  5  \"  )  ;", "assertQueryFails (  (  \" SELECT    ( SELECT   true   FROM    ( SELECT    1  )    t ( a )    WHERE   a    =    nationkey )     \"     +     (  \" FROM   nation    \"     +     \" WHERE    ( SELECT   true   FROM    ( SELECT    1  )    t ( a )    WHERE   a    =    nationkey )    OR   TRUE \"  )  )  ,     . UNSUPPORTED _ CORRELATED _ SUBQUERY _ ERROR _ MSG )  ;", "}", "METHOD_END"], "methodName": ["testSubqueriesWithDisjunction"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \"  ( SELECT   orderkey ,    custkey   FROM   orders )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testSubqueryBody"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  \"  ( SELECT   orderkey ,    custkey   FROM   orders   ORDER   BY   custkey )    ORDER   BY   orderkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testSubqueryBodyDoubleOrderby"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  \"  ( SELECT   orderkey   AS   a ,    custkey   AS   b   FROM   orders )    ORDER   BY   a   LIMIT    1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testSubqueryBodyOrderLimit"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  \"  ( SELECT   orderkey ,    custkey   FROM   orders )    ORDER   BY   orderkey    *     -  1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testSubqueryBodyProjectedOrderby"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  \" SELECT    *    FROM    ( SELECT   orderkey   FROM   orders   UNION   SELECT   custkey   FROM   orders   UNION   SELECT   orderkey   FROM   orders )    ORDER   BY   orderkey   LIMIT    1  0  0  0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testSubqueryUnion"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  \"  ( TABLE   orders )    ORDER   BY   orderkey \"  ,     \"  ( SELECT    *    FROM   orders )    ORDER   BY   orderkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testTableAsSubquery"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" TABLE   orders \"  ,     \" SELECT    *    FROM   orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testTableQuery"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \"  ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    1  0  )    UNION   ALL   TABLE   orders \"  ,     \"  ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    1  0  )    UNION   ALL   SELECT    *    FROM   orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testTableQueryInUnion"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  \" TABLE   orders   ORDER   BY   orderkey   LIMIT    1  0  \"  ,     \" SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    1  0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testTableQueryOrderLimit"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "DescriptiveStatistics   stats    =    new   DescriptiveStatistics (  )  ;", "int   total    =    puteExpected (  \" SELECT   orderkey   FROM   orders \"  ,    ImmutableList . of ( BIGINT )  )  . getMaterializedRows (  )  . size (  )  ;", "for    ( int   i    =     0  ;    i    <     1  0  0  ;    i +  +  )     {", "List < MaterializedRow >    values    =    puteActual (  \" SELECT   orderkey   FROM   orders   TABLESAMPLE   BERNOULLI    (  5  0  )  \"  )  . getMaterializedRows (  )  ;", "assertEquals ( values . size (  )  ,    ImmutableSet . copyOf ( values )  . size (  )  ,     \" TABLESAMPLE   produced   duplicate   rows \"  )  ;", "stats . addValue (  (  (  ( values . size (  )  )     *     1  .  0  )     /    total )  )  ;", "}", "double   mean    =    stats . getGeometricMean (  )  ;", "assertTrue (  (  ( mean    >     0  .  4  5  )     &  &     ( mean    <     0  .  5  5  )  )  ,    String . format (  \" Expected   mean   sampling   rate   to   be    ~  0  .  5  ,    but   was    % s \"  ,    mean )  )  ;", "}", "METHOD_END"], "methodName": ["testTableSampleBernoulli"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   fullSample    =    computeActual (  \" SELECT   orderkey   FROM   orders   TABLESAMPLE   BERNOULLI    (  1  0  0  )  \"  )  ;", "MaterializedResult   emptySample    =    computeActual (  \" SELECT   orderkey   FROM   orders   TABLESAMPLE   BERNOULLI    (  0  )  \"  )  ;", "MaterializedResult   all    =    computeExpected (  \" SELECT   orderkey   FROM   orders \"  ,    fullSample . getTypes (  )  )  ;", "yAssertions . assertContains ( all ,    fullSample )  ;", "assertEquals ( emptySample . getMaterializedRows (  )  . size (  )  ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testTableSampleBernoulliBoundaryValues"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  \" SELECT   orderkey ,    custkey ,    orderstatus   FROM   orders   ORDER   BY   orderkey   ASC ,    custkey   ASC   LIMIT    1  0  \"  )  ;", "assertQueryOrdered (  \" SELECT   orderkey ,    custkey ,    orderstatus   FROM   orders   ORDER   BY   orderkey   ASC ,    custkey   DESC   LIMIT    1  0  \"  )  ;", "assertQueryOrdered (  \" SELECT   orderkey ,    custkey ,    orderstatus   FROM   orders   ORDER   BY   orderkey   DESC ,    custkey   ASC   LIMIT    1  0  \"  )  ;", "assertQueryOrdered (  \" SELECT   orderkey ,    custkey ,    orderstatus   FROM   orders   ORDER   BY   orderkey   DESC ,    custkey   DESC   LIMIT    1  0  \"  )  ;", "assertQueryOrdered (  \" SELECT   orderkey ,    custkey ,    orderstatus   FROM   orders   ORDER   BY   custkey   ASC ,    orderkey   ASC   LIMIT    1  0  \"  )  ;", "assertQueryOrdered (  \" SELECT   orderkey ,    custkey ,    orderstatus   FROM   orders   ORDER   BY   custkey   ASC ,    orderkey   DESC   LIMIT    1  0  \"  )  ;", "assertQueryOrdered (  \" SELECT   orderkey ,    custkey ,    orderstatus   FROM   orders   ORDER   BY   custkey   DESC ,    orderkey   ASC   LIMIT    1  0  \"  )  ;", "assertQueryOrdered (  \" SELECT   orderkey ,    custkey ,    orderstatus   FROM   orders   ORDER   BY   custkey   DESC ,    orderkey   DESC   LIMIT    1  0  \"  )  ;", "assertQueryOrdered (  \" SELECT   orderkey ,    custkey ,    orderstatus   FROM   orders   ORDER   BY   nullif ( orderkey ,     3  )    ASC   NULLS   FIRST ,    custkey   ASC   LIMIT    1  0  \"  )  ;", "assertQueryOrdered (  \" SELECT   orderkey ,    custkey ,    orderstatus   FROM   orders   ORDER   BY   nullif ( orderkey ,     3  )    DESC   NULLS   FIRST ,    custkey   ASC   LIMIT    1  0  \"  )  ;", "assertQueryOrdered (  \" SELECT   orderkey ,    custkey ,    orderstatus   FROM   orders   ORDER   BY   nullif ( orderkey ,     3  )    ASC   NULLS   LAST   LIMIT    1  0  \"  )  ;", "assertQueryOrdered (  \" SELECT   orderkey ,    custkey ,    orderstatus   FROM   orders   ORDER   BY   nullif ( orderkey ,     3  )    DESC   NULLS   LAST ,    custkey   ASC   LIMIT    1  0  \"  )  ;", "assertQueryOrdered (  \" SELECT   orderkey ,    custkey ,    orderstatus   FROM   orders   ORDER   BY   nullif ( orderkey ,     3  )    ASC ,    custkey   ASC   LIMIT    1  0  \"  ,     \" SELECT   orderkey ,    custkey ,    orderstatus   FROM   orders   ORDER   BY   nullif ( orderkey ,     3  )    ASC   NULLS   LAST ,    custkey   ASC   LIMIT    1  0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testTopNByMultipleFields"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT    *    FROM    (     \"     +     (  (  \"          SELECT   row _ number (  )    OVER    ( PARTITION   BY   orderstatus   ORDER   BY   orderkey )    rn ,    orderkey ,    orderstatus    \"     +     \"          FROM   orders    \"  )     +     \"  )    WHERE   rn    <  =     2  \"  )  )  ,     (  \" VALUES    \"     +     (  (  (  (  (  \"  (  1  ,     1  ,     ' O '  )  ,     \"     +     \"  (  2  ,     2  ,     ' O '  )  ,     \"  )     +     \"  (  1  ,     3  ,     ' F '  )  ,     \"  )     +     \"  (  2  ,     5  ,     ' F '  )  ,     \"  )     +     \"  (  1  ,     6  5  ,     ' P '  )  ,     \"  )     +     \"  (  2  ,     1  9  7  ,     ' P '  )  \"  )  )  )  ;", "assertQuery (  (  \" SELECT    *    FROM    (     \"     +     (  (  \"          SELECT   row _ number (  )    OVER    ( PARTITION   BY   orderstatus   ORDER   BY   orderkey )    rn ,    orderkey    \"     +     \"          FROM   orders    \"  )     +     \"  )    WHERE   rn    <  =     2  \"  )  )  ,     (  \" VALUES    \"     +     (  (  (  (  (  \"  (  1  ,     1  )  ,     \"     +     \"  (  2  ,     2  )  ,     \"  )     +     \"  (  1  ,     3  )  ,     \"  )     +     \"  (  2  ,     5  )  ,     \"  )     +     \"  (  1  ,     6  5  )  ,     \"  )     +     \"  (  2  ,     1  9  7  )  \"  )  )  )  ;", "assertQuery (  (  \" SELECT    *    FROM    (     \"     +     (  (  \"          SELECT   row _ number (  )    OVER    ( PARTITION   BY   orderstatus   ORDER   BY   orderkey )    rn ,    orderstatus    \"     +     \"          FROM   orders    \"  )     +     \"  )    WHERE   rn    <  =     2  \"  )  )  ,     (  \" VALUES    \"     +     (  (  (  (  (  \"  (  1  ,     ' O '  )  ,     \"     +     \"  (  2  ,     ' O '  )  ,     \"  )     +     \"  (  1  ,     ' F '  )  ,     \"  )     +     \"  (  2  ,     ' F '  )  ,     \"  )     +     \"  (  1  ,     ' P '  )  ,     \"  )     +     \"  (  2  ,     ' P '  )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testTopNPartitionedWindow"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT    *    FROM    (     \"     +     (  (  \"          SELECT   row _ number (  )    OVER    ( PARTITION   BY   orderstatus   ORDER   BY   orderkey )    rn ,    orderkey ,    orderstatus    \"     +     \"          FROM   orders    \"  )     +     \"  )    WHERE   rn    =     2  \"  )  )  ,     (  \" VALUES    \"     +     (  (  \"  (  2  ,     2  ,     ' O '  )  ,     \"     +     \"  (  2  ,     5  ,     ' F '  )  ,     \"  )     +     \"  (  2  ,     1  9  7  ,     ' P '  )  \"  )  )  )  ;", "assertQuery (  (  \" SELECT    *    FROM    (     \"     +     (  (  \"          SELECT   row _ number (  )    OVER    ( PARTITION   BY   orderstatus   ORDER   BY   orderkey )    rn ,    orderkey    \"     +     \"          FROM   orders    \"  )     +     \"  )    WHERE   rn    =     2  \"  )  )  ,     \" VALUES    (  2  ,     2  )  ,     (  2  ,     5  )  ,     (  2  ,     1  9  7  )  \"  )  ;", "assertQuery (  (  \" SELECT    *    FROM    (     \"     +     (  (  \"          SELECT   row _ number (  )    OVER    ( PARTITION   BY   orderstatus   ORDER   BY   orderkey )    rn ,    orderstatus    \"     +     \"          FROM   orders    \"  )     +     \"  )    WHERE   rn    =     2  \"  )  )  ,     \" VALUES    (  2  ,     ' O '  )  ,     (  2  ,     ' F '  )  ,     (  2  ,     ' P '  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testTopNPartitionedWindowWithEqualityFilter"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  (  \"  \"     +     (  (  (  \" SELECT    *    FROM    (  \\ n \"     +     \"          SELECT   row _ number (  )    OVER    ( ORDER   BY   orderkey )    rn ,    orderkey ,    orderstatus \\ n \"  )     +     \"          FROM   orders \\ n \"  )     +     \"  )    WHERE   rn    <  =     1  0  0  0  0  \"  )  )  )  ;", "String   sql    =     \" SELECT   row _ number (  )    OVER    (  )  ,    orderkey ,    orderstatus   FROM   orders   ORDER   BY   orderkey   LIMIT    1  0  0  0  0  \"  ;", "MaterializedResult   expected    =    computeExpected ( sql ,    actual . getTypes (  )  )  ;", "yAssertions . assertEqualsIgnoreOrder ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testTopNUnpartitionedLargeWindow"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  (  \"  \"     +     (  (  (  \" SELECT    *    FROM    (  \\ n \"     +     \"          SELECT   row _ number (  )    OVER    ( ORDER   BY   orderkey )    rn ,    orderkey ,    orderstatus \\ n \"  )     +     \"          FROM   orders \\ n \"  )     +     \"  )    WHERE   rn    <  =     5  \"  )  )  )  ;", "String   sql    =     \" SELECT   row _ number (  )    OVER    (  )  ,    orderkey ,    orderstatus   FROM   orders   ORDER   BY   orderkey   LIMIT    5  \"  ;", "MaterializedResult   expected    =    computeExpected ( sql ,    actual . getTypes (  )  )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testTopNUnpartitionedWindow"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT    *    FROM    (     \"     +     (  (  \"          SELECT   row _ number (  )    OVER    ( ORDER   BY   orderkey )    rn ,    orderkey ,    orderstatus    \"     +     \"          FROM   orders    \"  )     +     \"  )    WHERE   rn    =     1    OR   rn   IN    (  3  ,     4  )    OR   rn   BETWEEN    6    AND    7  \"  )  )  ,     (  \" VALUES    \"     +     (  (  (  (  \"  (  1  ,     1  ,     ' O '  )  ,     \"     +     \"  (  3  ,     3  ,     ' F '  )  ,     \"  )     +     \"  (  4  ,     4  ,     ' O '  )  ,     \"  )     +     \"  (  6  ,     6  ,     ' F '  )  ,     \"  )     +     \"  (  7  ,     7  ,     ' O '  )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testTopNUnpartitionedWindowWithCompositeFilter"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT    *    FROM    (     \"     +     (  (  \"          SELECT   row _ number (  )    OVER    ( ORDER   BY   orderkey )    rn ,    orderkey ,    orderstatus    \"     +     \"          FROM   orders    \"  )     +     \"  )    WHERE   rn    =     2  \"  )  )  ,     \" VALUES    (  2  ,     2  ,     ' O '  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testTopNUnpartitionedWindowWithEqualityFilter"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "List < MaterializedRow >    result    =    computeActual (  \" SELECT    *    FROM   system . runtime . transactions \"  )  . getMaterializedRows (  )  ;", "assertTrue (  (  ( result . size (  )  )     >  =     1  )  )  ;", "}", "METHOD_END"], "methodName": ["testTransactionsTable"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   COUNT (  *  )    WHERE   rand (  )     >  =     0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testTrivialNonDeterministicPredicatePushdown"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   linenumber ,    sum ( TRY (  1  0  0  /  ( CAST    ( tax *  1  0    AS   BIGINT )  )  )  )    FROM   lineitem   GROUP   BY   linenumber \"  ,     \" SELECT   linenumber ,    sum (  1  0  0  /  ( CAST    ( tax *  1  0    AS   BIGINT )  )  )    FROM   lineitem   WHERE   CAST ( tax *  1  0    AS   BIGINT )     <  >     0    GROUP   BY   linenumber \"  )  ;", "assertQuery (  \" SELECT   TRY ( CAST ( IF ( round ( totalprice )     %     2     =     0  ,    CAST ( totalprice   AS   VARCHAR )  ,     '  ^  &  $  '     |  |    CAST ( totalprice   AS   VARCHAR )  )    AS   DOUBLE )  )    FROM   orders \"  ,     \" SELECT   CASE   WHEN   round ( totalprice )     %     2     =     0    THEN   totalprice   ELSE   null   END   FROM   orders \"  )  ;", "assertQuery (  \" SELECT   COUNT ( TRY ( to _ base (  1  0  0  ,    CAST ( round ( totalprice /  1  0  0  )    AS   BIGINT )  )  )  )    FROM   orders \"  ,     \" SELECT   SUM ( CASE   WHEN   CAST ( round ( totalprice /  1  0  0  )    AS   BIGINT )    BETWEEN    2    AND    3  6    THEN    1    ELSE    0    END )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   COUNT ( CAST ( orderkey   AS   VARCHAR )     |  |    TRY ( to _ base (  1  0  0  ,    CAST ( round ( totalprice /  1  0  0  )    AS   BIGINT )  )  )  )    FROM   orders \"  ,     \" SELECT   SUM ( CASE   WHEN   CAST ( round ( totalprice /  1  0  0  )    AS   BIGINT )    BETWEEN    2    AND    3  6    THEN    1    ELSE    0    END )    FROM   orders \"  )  ;", "assertQueryFails (  \" SELECT   TRY (  )  \"  ,     \" line    1  :  8  :    The    ' try '    function   must   have   exactly   one   argument \"  )  ;", "assertQueryFails (  \" SELECT   TRY ( x )    IS   NULL   FROM    ( SELECT    1  / y   AS   x   FROM    ( VALUES    1  ,     2  ,     3  ,     0  ,     4  )    t ( y )  )  \"  ,     \"  /    by   zero \"  )  ;", "assertQuery (  \" SELECT   x   IS   NULL   FROM    ( SELECT   TRY (  1  / y )    AS   x   FROM    ( VALUES    3  ,     0  ,     4  )    t ( y )  )  \"  ,     \" VALUES   false ,    true ,    false \"  )  ;", "assertQuery (  \" SELECT   TRY ( apply (  5  ,    x    -  >    x    +     1  )     /     0  )  \"  ,     \" SELECT   NULL \"  )  ;", "assertQuery (  \" SELECT   TRY ( apply (  5     +    RANDOM (  1  )  ,    x    -  >    x    +     1  )     /     0  )  \"  ,     \" SELECT   NULL \"  )  ;", "assertQuery (  \" SELECT   apply (  5     +    RANDOM (  1  )  ,    x    -  >    x    +    TRY (  1     /     0  )  )  \"  ,     \" SELECT   NULL \"  )  ;", "assertQuery (  \" SELECT   JSON _ FORMAT ( TRY ( JSON    ' INVALID '  )  )  \"  ,     \" SELECT   NULL \"  )  ;", "assertQuery (  \" SELECT   JSON _ FORMAT ( TRY    ( JSON _ PARSE (  ' INVALID '  )  )  )  \"  ,     \" SELECT   NULL \"  )  ;", "assertQuery (  \" SELECT   TRY ( CAST ( NULL   AS   BIGINT )  )  \"  ,     \" SELECT   NULL \"  )  ;", "assertQuery (  \" SELECT   TRY ( CAST (  '  1  2  3  '    AS   BIGINT )  )  \"  ,     \" SELECT    1  2  3 L \"  )  ;", "assertQuery (  \" SELECT   TRY ( CAST (  ' foo '    AS   BIGINT )  )  \"  ,     \" SELECT   NULL \"  )  ;", "assertQuery (  \" SELECT   TRY ( CAST (  ' foo '    AS   BIGINT )  )     +    TRY ( CAST (  '  1  2  3  '    AS   BIGINT )  )  \"  ,     \" SELECT   NULL \"  )  ;", "assertQuery (  \" SELECT   TRY ( CAST ( CAST (  1  2  3    AS   VARCHAR )    AS   BIGINT )  )  \"  ,     \" SELECT    1  2  3 L \"  )  ;", "assertQuery (  \" SELECT   COALESCE ( CAST ( CONCAT (  '  1  2  3  '  ,    CAST (  1  2  3    AS   VARCHAR )  )    AS   BIGINT )  ,     0  )  \"  ,     \" SELECT    1  2  3  1  2  3 L \"  )  ;", "assertQuery (  \" SELECT   TRY ( CAST ( CONCAT (  ' hello '  ,    CAST (  1  2  3    AS   VARCHAR )  )    AS   BIGINT )  )  \"  ,     \" SELECT   NULL \"  )  ;", "assertQuery (  \" SELECT   COALESCE ( TRY ( CAST ( CONCAT (  ' a '  ,    CAST (  1  2  3    AS   VARCHAR )  )    AS   INTEGER )  )  ,     0  )  \"  ,     \" SELECT    0  \"  )  ;", "assertQuery (  \" SELECT   COALESCE ( TRY ( CAST ( CONCAT (  ' a '  ,    CAST (  1  2  3    AS   VARCHAR )  )    AS   BIGINT )  )  ,     0  )  \"  ,     \" SELECT    0 L \"  )  ;", "assertQuery (  \" SELECT    1  2  3     +    TRY ( ABS (  -  9  2  2  3  3  7  2  0  3  6  8  5  4  7  7  5  8  0  7     -     1  )  )  \"  ,     \" SELECT   NULL \"  )  ;", "assertQuery (  \" SELECT   JSON _ FORMAT ( TRY ( JSON    '  [  ]  '  )  )     |  |     '  1  2  3  '  \"  ,     \" SELECT    '  [  ]  1  2  3  '  \"  )  ;", "assertQuery (  \" SELECT   JSON _ FORMAT ( TRY ( JSON    ' INVALID '  )  )     |  |     '  1  2  3  '  \"  ,     \" SELECT   NULL \"  )  ;", "assertQuery (  \" SELECT   TRY (  2  /  1  )  \"  ,     \" SELECT    2  \"  )  ;", "assertQuery (  \" SELECT   TRY (  2  /  0  )  \"  ,     \" SELECT   null \"  )  ;", "assertQuery (  \" SELECT   COALESCE ( TRY (  2  /  0  )  ,     0  )  \"  ,     \" SELECT    0  \"  )  ;", "assertQuery (  \" SELECT   TRY ( ABS (  -  2  )  )  \"  ,     \" SELECT    2  \"  )  ;", "}", "METHOD_END"], "methodName": ["testTry"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   TRY ( CAST (  ' a '    AS   BIGINT )  )  \"  ,     \" SELECT   NULL \"  )  ;", "}", "METHOD_END"], "methodName": ["testTryInvalidCast"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   x    +    x   FROM    ( SELECT   apply ( a ,    i    -  >    i    *    i )    x   FROM    ( VALUES    3  )    t ( a )  )  \"  ,     \" SELECT    1  8  \"  )  ;", "assertQuery (  \" SELECT   apply ( a ,    i    -  >    i    *    i )     +    apply ( a ,    i    -  >    i    *    i )    FROM    ( VALUES    3  )    t ( a )  \"  ,     \" SELECT    1  8  \"  )  ;", "assertQuery (  \" SELECT   apply ( a ,    i    -  >    i    *    i )  ,    apply ( a ,    i    -  >    i    *    i )    FROM    ( VALUES    3  )    t ( a )  \"  ,     \" SELECT    9  ,     9  \"  )  ;", "assertQuery (  \" SELECT   try (  1  0     /    a )     +    try (  1  0     /    a )    FROM    ( VALUES    5  )    t ( a )  \"  ,     \" SELECT    4  \"  )  ;", "assertQuery (  \" SELECT   try (  1  0     /    a )  ,    try (  1  0     /    a )    FROM    ( VALUES    5  )    t ( a )  \"  ,     \" SELECT    2  ,     2  \"  )  ;", "}", "METHOD_END"], "methodName": ["testTryLambdaRepeated"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  \" SELECT   TRY ( x )    FROM    ( SELECT    1  / y   AS   x   FROM    ( VALUES    1  ,     2  ,     3  ,     0  ,     4  )    t ( y )  )  \"  ,     \"  .  *  \"  )  ;", "}", "METHOD_END"], "methodName": ["testTryNoMergeProjections"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT \\ n \"     +     (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  \"       count (  *  )    AS   numwait \\ n \"     +     \" FROM \\ n \"  )     +     \"       nation   l 1  \\ n \"  )     +     \" WHERE \\ n \"  )     +     \"       EXISTS (  \\ n \"  )     +     \"             SELECT    *  \\ n \"  )     +     \"             FROM \\ n \"  )     +     \"                   nation   l 2  \\ n \"  )     +     \"             WHERE \\ n \"  )     +     \"                   l 2  . nationkey    =    l 1  . nationkey \\ n \"  )     +     \"        )  \\ n \"  )     +     \"       AND   NOT   EXISTS (  \\ n \"  )     +     \"             SELECT    *  \\ n \"  )     +     \"             FROM \\ n \"  )     +     \"                   nation   l 3  \\ n \"  )     +     \"             WHERE \\ n \"  )     +     \"                   l 3  . nationkey =    l 1  . nationkey \\ n \"  )     +     \"        )  \\ n \"  )  )  ,     \" VALUES    0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testTwoCorrelatedExistsSubqueries"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  \" SELECT    1     <  >     ' x '  \"  ,     \"  \\  \\ Qline    1  :  1  0  :     \\  '  <  >  \\  '    cannot   be   applied   to   integer ,    varchar (  1  )  \\  \\ E \"  )  ;", "}", "METHOD_END"], "methodName": ["testTypeMismatch"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    1  ,     1  ,     ' a '  ,     ' a '    UNION   ALL   SELECT    1  ,     2  ,     ' a '  ,     ' b '  \"  )  ;", "}", "METHOD_END"], "methodName": ["testUnaliasSymbolReferencesWithUnion"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   orderkey   FROM    ( SELECT   orderkey   FROM   orders )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testUnaliasedSubqueries"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   a   FROM    ( SELECT   orderkey   a   FROM   orders )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testUnaliasedSubqueries1"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   orderkey   FROM   orders   UNION   SELECT   custkey   FROM   orders \"  )  ;", "assertQuery (  \" SELECT    1  2  3    UNION   DISTINCT   SELECT    1  2  3    UNION   ALL   SELECT    1  2  3  \"  )  ;", "assertQuery (  \" SELECT   NULL   UNION   SELECT   NULL \"  )  ;", "assertQuery (  \" SELECT   NULL ,    NULL   UNION   ALL   SELECT   NULL ,    NULL   FROM   nation \"  )  ;", "assertQuery (  \" SELECT    ' x '  ,     ' y '    UNION   ALL   SELECT   name ,    name   FROM   nation \"  )  ;", "assertQuery (  \" SELECT   orderkey   FROM   orders   UNION   ALL   SELECT    1  2  3    UNION   ALL    ( SELECT   custkey   FROM   orders   GROUP   BY   custkey )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testUnion"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   orderkey   FROM   orders   UNION   ALL   SELECT   custkey   FROM   orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testUnionAll"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  (  (  (  (  (  (  \" SELECT   COUNT (  *  )  \\ n \"     +     \" FROM    (  \\ n \"  )     +     \"       SELECT   orderkey   AS   x ,    orderkey   AS   y \\ n \"  )     +     \"       FROM   orders \\ n \"  )     +     \"       WHERE   orderkey    %     3     =     0  \\ n \"  )     +     \"       UNION   ALL \\ n \"  )     +     \"       SELECT   orderkey   AS   x ,    orderkey   AS   y \\ n \"  )     +     \"       FROM   orders \\ n \"  )     +     \"       WHERE   orderkey    %     2     =     0  \\ n \"  )     +     \"  )    a \\ n \"  )     +     \" JOIN    (  \\ n \"  )     +     \"       SELECT   orderkey   AS   x ,    orderkey   AS   y \\ n \"  )     +     \"       FROM   orders \\ n \"  )     +     \"  )    b \\ n \"  )     +     \" ON   a . x    =    b . x \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testUnionAllPredicateMoveAroundWithOverlappingProjections"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   a [  1  ]    FROM    ( SELECT   ARRAY [  1  ]    UNION   ALL   SELECT   ARRAY [  1  ]  )    t ( a )    LIMIT    1  \"  ,     \" SELECT    1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testUnionArray"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   orderkey   FROM   orders   UNION   DISTINCT   SELECT   custkey   FROM   orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testUnionDistinct"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" VALUES    1    UNION   ALL   VALUES    1  .  0  ,     2  \"  ,     \" SELECT    *    FROM    ( VALUES    1  )    UNION   ALL   SELECT    *    FROM    ( VALUES    1  .  0  ,     2  )  \"  )  ;", "assertQuery (  \"  ( VALUES    1  )    UNION   ALL    ( VALUES    1  .  0  ,     2  )  \"  ,     \" SELECT    *    FROM    ( VALUES    1  )    UNION   ALL   SELECT    *    FROM    ( VALUES    1  .  0  ,     2  )  \"  )  ;", "assertQuery (  \" SELECT    0  ,     0    UNION   ALL   SELECT    1  .  0  ,     0  \"  )  ;", "assertQuery (  \" SELECT    0  ,     0  ,     0  ,     0    UNION   ALL   SELECT    0  .  0  ,     0  .  0  ,     0  ,     0  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    1  )    UNION   ALL   SELECT    *    FROM    ( VALUES    1  .  0  ,     2  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    1  )    UNION   SELECT    *    FROM    ( VALUES    1  .  0  ,     2  )  \"  ,     \" VALUES    1  .  0  ,     2  .  0  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    (  2  ,     2  )  )    UNION   SELECT    *    FROM    ( VALUES    (  1  ,     1  .  0  )  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    ( NULL ,    NULL )  )    UNION   SELECT    *    FROM    ( VALUES    (  1  ,     1  .  0  )  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    ( NULL ,    NULL )  )    UNION   ALL   SELECT    *    FROM    ( VALUES    ( NULL ,     1  .  0  )  )  \"  )  ;", "assertQuery (  (  \" SELECT   a   FROM    \"     +     (  (  (  (  (  \"  (  \"     +     \"        ( SELECT   orderstatus   AS   a   FROM   orders   LIMIT    1  )     \"  )     +     \" UNION   ALL    \"  )     +     \"       SELECT    ' aaaa '    AS   a \"  )     +     \"  )     \"  )     +     \" WHERE      a    =     ' aaa '  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testUnionRequiringCoercion"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   regionkey ,    count (  *  )    FROM    (  \"     +     (  (  (  \"          SELECT   regionkey   FROM   nation    \"     +     \"          UNION   ALL    \"  )     +     \"          SELECT    *    FROM    ( VALUES    2  ,     1  0  0  )    t ( regionkey )  )     \"  )     +     \" GROUP   BY   regionkey \"  )  )  ,     \" SELECT    *    FROM    ( VALUES       (  0  ,     5  )  ,     (  1  ,     5  )  ,     (  2  ,     6  )  ,     (  3  ,     5  )  ,     (  4  ,     5  )  ,     (  1  0  0  ,     1  )  )  \"  )  ;", "assertQuery (  (  \" SELECT   ds ,    count (  *  )    FROM    (  \"     +     (  (  (  \"          SELECT   orderdate   ds ,    orderkey   FROM   orders    \"     +     \"          UNION   ALL    \"  )     +     \"          SELECT   shipdate   ds ,    orderkey   FROM   lineitem )    a    \"  )     +     \" GROUP   BY   ds \"  )  )  )  ;", "assertQuery (  (  \" SELECT   ds ,    count (  *  )    FROM    (  \"     +     (  (  (  \"          SELECT   orderdate   ds ,    orderkey   FROM   orders    \"     +     \"          UNION    \"  )     +     \"          SELECT   shipdate   ds ,    orderkey   FROM   lineitem )    a    \"  )     +     \" GROUP   BY   ds \"  )  )  )  ;", "assertQuery (  (  \" SELECT   ds ,    count ( DISTINCT   orderkey )    FROM    (  \"     +     (  (  (  \"          SELECT   orderdate   ds ,    orderkey   FROM   orders    \"     +     \"          UNION    \"  )     +     \"          SELECT   shipdate   ds ,    orderkey   FROM   lineitem )    a    \"  )     +     \" GROUP   BY   ds \"  )  )  )  ;", "assertQuery (  (  \" SELECT   clerk ,    count ( DISTINCT   orderstatus )    FROM    (  \"     +     (  (  (  \" SELECT    *    FROM   orders   WHERE   orderkey =  0     \"     +     \"    UNION   ALL    \"  )     +     \" SELECT    *    FROM   orders   WHERE   orderkey <  >  0  )     \"  )     +     \" GROUP   BY   clerk \"  )  )  )  ;", "assertQuery (  (  \" SELECT   count ( clerk )    FROM    (  \"     +     (  (  (  \" SELECT   clerk   FROM   orders   WHERE   orderkey =  0     \"     +     \"    UNION   ALL    \"  )     +     \" SELECT   clerk   FROM   orders   WHERE   orderkey <  >  0  )     \"  )     +     \" GROUP   BY   clerk \"  )  )  )  ;", "assertQuery (  (  \" SELECT   count ( orderkey )  ,    sum ( sc )    FROM    (  \"     +     (  (  (  (  \"             SELECT   sum ( custkey )    sc ,    orderkey   FROM    (  \"     +     \"                         SELECT   custkey , orderkey ,    orderkey +  1    FROM   orders   WHERE   orderkey =  0  \"  )     +     \"                         UNION   ALL    \"  )     +     \"                         SELECT   custkey , orderkey , orderkey +  1    FROM   orders   WHERE   orderkey <  >  0  )     \"  )     +     \"             GROUP   BY   orderkey )  \"  )  )  )  ;", "assertQuery (  (  \" SELECT   count ( orderkey )  ,    sum ( sc )    FROM    (  \\ n \"     +     (  (  (  (  \"             SELECT   sum ( custkey )    sc ,    orderkey   FROM    (  \\ n \"     +     \"                         SELECT   custkey ,    orderkey ,    orderkey +  1  ,    orderstatus   FROM   orders   WHERE   orderkey =  0  \\ n \"  )     +     \"                         UNION   ALL    \\ n \"  )     +     \"                         SELECT   custkey ,    orderkey ,    orderkey +  1  ,    orderstatus   FROM   orders   WHERE   orderkey <  >  0  )     \\ n \"  )     +     \"             GROUP   BY   GROUPING   SETS    (  ( orderkey ,    orderstatus )  ,     ( orderkey )  )  )  \"  )  )  ,     (  \" SELECT   count ( orderkey )  ,    sum ( sc )    FROM    (  \\ n \"     +     (  (  (  (  (  (  (  (  (  (  (  (  \"             SELECT   sum ( custkey )    sc ,    orderkey   FROM    (  \\ n \"     +     \"                         SELECT   custkey ,    orderkey ,    orderkey +  1  ,    orderstatus   FROM   orders   WHERE   orderkey =  0  \\ n \"  )     +     \"                         UNION   ALL    \\ n \"  )     +     \"                         SELECT   custkey ,    orderkey ,    orderkey +  1  ,    orderstatus   FROM   orders   WHERE   orderkey <  >  0  )     \\ n \"  )     +     \"             GROUP   BY   orderkey ,    orderstatus    \\ n \"  )     +     \"              \\ n \"  )     +     \"             UNION   ALL    \\ n \"  )     +     \"              \\ n \"  )     +     \"             SELECT   sum ( custkey )    sc ,    orderkey   FROM    (  \\ n \"  )     +     \"                         SELECT   custkey ,    orderkey ,    orderkey +  1  ,    orderstatus   FROM   orders   WHERE   orderkey =  0  \\ n \"  )     +     \"                         UNION   ALL    \\ n \"  )     +     \"                         SELECT   custkey ,    orderkey ,    orderkey +  1  ,    orderstatus   FROM   orders   WHERE   orderkey <  >  0  )     \\ n \"  )     +     \"             GROUP   BY   orderkey )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testUnionWithAggregation"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT    *    FROM    (     \"     +     (  (  (  (  (  (  \" SELECT   orderkey ,    count (  *  )    FROM    (  \"     +     \"          SELECT   orderdate   ds ,    orderkey   FROM   orders    \"  )     +     \"          UNION   ALL    \"  )     +     \"          SELECT   shipdate   ds ,    orderkey   FROM   lineitem )    a    \"  )     +     \" GROUP   BY   orderkey )    t    \"  )     +     \" JOIN   orders   o    \"  )     +     \" ON    ( o . orderkey    =    t . orderkey )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testUnionWithAggregationAndJoin"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   orderkey ,     1    FROM   orders    \"     +     (  \" UNION   ALL    \"     +     \" SELECT   orderkey ,    count (  *  )    FROM   orders   GROUP   BY    1  \"  )  )  ,     (  \" SELECT   orderkey ,     1    FROM   orders    \"     +     (  \" UNION   ALL    \"     +     \" SELECT   orderkey ,    count (  *  )    FROM   orders   GROUP   BY   orderkey \"  )  )  )  ;", "assertQuery (  (  \" SELECT   orderkey ,    count (  *  )    FROM   orders   GROUP   BY    1     \"     +     (  \" UNION   ALL    \"     +     \" SELECT   orderkey ,     1    FROM   orders \"  )  )  ,     (  \" SELECT   orderkey ,    count (  *  )    FROM   orders   GROUP   BY   orderkey    \"     +     (  \" UNION   ALL    \"     +     \" SELECT   orderkey ,     1    FROM   orders \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testUnionWithAggregationAndTableScan"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   orderkey ,    orderdate   FROM   orders   WHERE   custkey    <     1  0  0  0    UNION   ALL   SELECT   orderkey ,    shipdate   FROM   lineitem   WHERE   linenumber    <     2  0  0  0  \"  )  ;", "assertQuery (  \" SELECT   orderkey ,    orderdate   FROM   orders   UNION   ALL   SELECT   orderkey ,    shipdate   FROM   lineitem   WHERE   linenumber    <     2  0  0  0  \"  )  ;", "assertQuery (  \" SELECT   orderkey ,    orderdate   FROM   orders   WHERE   custkey    <     1  0  0  0    UNION   ALL   SELECT   orderkey ,    shipdate   FROM   lineitem \"  )  ;", "}", "METHOD_END"], "methodName": ["testUnionWithFilterNotInSelect"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT    *    FROM    (  \"     +     (  (  (  \"          SELECT   orderdate   ds ,    orderkey   FROM   orders    \"     +     \"          UNION   ALL    \"  )     +     \"          SELECT   shipdate   ds ,    orderkey   FROM   lineitem )    a    \"  )     +     \" JOIN   orders   o   ON    ( a . orderkey    =    o . orderkey )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testUnionWithJoin"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT    *  \\ n \"     +     (  (  (  (  (  (  \" FROM    ( SELECT   orderdate   ds ,    orderkey \\ n \"     +     \"                   FROM   orders \\ n \"  )     +     \"                   UNION   ALL \\ n \"  )     +     \"                   SELECT   shipdate   ds ,    orderkey \\ n \"  )     +     \"                   FROM   lineitem )    a \\ n \"  )     +     \" JOIN   orders   o \\ n \"  )     +     \" ON    ( substr ( cast ( a . ds   AS   VARCHAR )  ,     6  ,     2  )     =    substr ( cast ( o . orderdate   AS   VARCHAR )  ,     6  ,     2  )    AND   a . orderkey    =    o . orderkey )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testUnionWithJoinOnNonTranslateableSymbols"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   key    +     5  ,    status   FROM    ( SELECT   orderkey   key ,    orderstatus   status   FROM   orders   UNION   ALL   SELECT   orderkey   key ,    linestatus   status   FROM   lineitem )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testUnionWithProjectionPushDown"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT    *    FROM    (  \"     +     (  (  (  (  \"          SELECT   regionkey   FROM   nation    \"     +     \"          UNION   ALL    \"  )     +     \"          SELECT   nationkey   FROM   nation \"  )     +     \"  )    t ( a )     \"  )     +     \" ORDER   BY   a   LIMIT    1  \"  )  )  ,     \" SELECT    0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testUnionWithTopN"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   count (  *  )    FROM    (  \"     +     (  (  (  (  (  \" SELECT    1    FROM   nation   GROUP   BY   regionkey    \"     +     \" UNION   ALL    \"  )     +     \" SELECT    1    FROM    (  \"  )     +     \"          SELECT    1    FROM   nation    \"  )     +     \"          UNION   ALL    \"  )     +     \"          SELECT    1    FROM   nation )  )  \"  )  )  )  ;", "assertQuery (  (  \" SELECT   count (  *  )    FROM    (  \"     +     (  (  (  (  (  \" SELECT    1    FROM    (  \"     +     \"          SELECT    1    FROM   nation    \"  )     +     \"          UNION   ALL    \"  )     +     \"          SELECT    1    FROM   nation )  \"  )     +     \" UNION   ALL    \"  )     +     \" SELECT    1    FROM   nation   GROUP   BY   regionkey )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testUnionWithUnionAndAggregation"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    1    FROM    ( VALUES    ( ARRAY [  1  ]  )  )    AS   t    ( a )    CROSS   JOIN   UNNEST ( a )  \"  ,     \" SELECT    1  \"  )  ;", "assertQuery (  \" SELECT   x [  1  ]    FROM   UNNEST ( ARRAY [ ARRAY [  1  ,     2  ,     3  ]  ]  )    t ( x )  \"  ,     \" SELECT    1  \"  )  ;", "assertQuery (  \" SELECT   x [  1  ]  [  2  ]    FROM   UNNEST ( ARRAY [ ARRAY [ ARRAY [  1  ,     2  ,     3  ]  ]  ]  )    t ( x )  \"  ,     \" SELECT    2  \"  )  ;", "assertQuery (  \" SELECT   x [  2  ]    FROM   UNNEST ( ARRAY [ MAP ( ARRAY [  1  ,  2  ]  ,    ARRAY [  ' hello '  ,     ' hi '  ]  )  ]  )    t ( x )  \"  ,     \" SELECT    ' hi '  \"  )  ;", "assertQuery (  \" SELECT    *    FROM   UNNEST ( ARRAY [  1  ,     2  ,     3  ]  )  \"  ,     \" SELECT    *    FROM   VALUES    (  1  )  ,     (  2  )  ,     (  3  )  \"  )  ;", "assertQuery (  \" SELECT   a   FROM   UNNEST ( ARRAY [  1  ,     2  ,     3  ]  )    t ( a )  \"  ,     \" SELECT    *    FROM   VALUES    (  1  )  ,     (  2  )  ,     (  3  )  \"  )  ;", "assertQuery (  \" SELECT   a ,    b   FROM   UNNEST ( ARRAY [  1  ,     2  ]  ,    ARRAY [  3  ,     4  ]  )    t ( a ,    b )  \"  ,     \" SELECT    *    FROM   VALUES    (  1  ,     3  )  ,     (  2  ,     4  )  \"  )  ;", "assertQuery (  \" SELECT   a ,    b   FROM   UNNEST ( ARRAY [  1  ,     2  ,     3  ]  ,    ARRAY [  4  ,     5  ]  )    t ( a ,    b )  \"  ,     \" SELECT    *    FROM   VALUES    (  1  ,     4  )  ,     (  2  ,     5  )  ,     (  3  ,    NULL )  \"  )  ;", "assertQuery (  \" SELECT   a   FROM   UNNEST ( ARRAY [  1  ,     2  ,     3  ]  ,    ARRAY [  4  ,     5  ]  )    t ( a ,    b )  \"  ,     \" SELECT    *    FROM   VALUES    1  ,     2  ,     3  \"  )  ;", "assertQuery (  \" SELECT   b   FROM   UNNEST ( ARRAY [  1  ,     2  ,     3  ]  ,    ARRAY [  4  ,     5  ]  )    t ( a ,    b )  \"  ,     \" SELECT    *    FROM   VALUES    4  ,     5  ,    NULL \"  )  ;", "assertQuery (  \" SELECT   count (  *  )    FROM   UNNEST ( ARRAY [  1  ,     2  ,     3  ]  ,    ARRAY [  4  ,     5  ]  )  \"  ,     \" SELECT    3  \"  )  ;", "assertQuery (  \" SELECT   a   FROM   UNNEST ( ARRAY [  ' kittens '  ,     ' puppies '  ]  )    t ( a )  \"  ,     \" SELECT    *    FROM   VALUES    (  ' kittens '  )  ,     (  ' puppies '  )  \"  )  ;", "assertQuery (  (  \"  \"     +     (  (  \" SELECT   c    \"     +     \" FROM   UNNEST ( ARRAY [  1  ,     2  ,     3  ]  ,    ARRAY [  4  ,     5  ]  )    t ( a ,    b )     \"  )     +     \" CROSS   JOIN    ( values    (  8  )  ,     (  9  )  )    t 2  ( c )  \"  )  )  ,     \" SELECT    *    FROM   VALUES    8  ,     8  ,     8  ,     9  ,     9  ,     9  \"  )  ;", "assertQuery (  (  \"  \"     +     (  (  \" SELECT   a . custkey ,    t . e    \"     +     \" FROM    ( SELECT   custkey ,    ARRAY [  1  ,     2  ,     3  ]    AS   my _ array   FROM   orders   ORDER   BY   orderkey   LIMIT    1  )    a    \"  )     +     \" CROSS   JOIN   UNNEST ( my _ array )    t ( e )  \"  )  )  ,     \" SELECT    *    FROM    ( SELECT   custkey   FROM   orders   ORDER   BY   orderkey   LIMIT    1  )    CROSS   JOIN    ( VALUES    (  1  )  ,     (  2  )  ,     (  3  )  )  \"  )  ;", "assertQuery (  (  \"  \"     +     (  (  \" SELECT   a . custkey ,    t . e    \"     +     \" FROM    ( SELECT   custkey ,    ARRAY [  1  ,     2  ,     3  ]    AS   my _ array   FROM   orders   ORDER   BY   orderkey   LIMIT    1  )    a ,     \"  )     +     \" UNNEST ( my _ array )    t ( e )  \"  )  )  ,     \" SELECT    *    FROM    ( SELECT   custkey   FROM   orders   ORDER   BY   orderkey   LIMIT    1  )    CROSS   JOIN    ( VALUES    (  1  )  ,     (  2  )  ,     (  3  )  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM   UNNEST ( ARRAY [  0  ,     1  ]  )    CROSS   JOIN   UNNEST ( ARRAY [  0  ,     1  ]  )    CROSS   JOIN   UNNEST ( ARRAY [  0  ,     1  ]  )  \"  ,     \" SELECT    *    FROM   VALUES    (  0  ,     0  ,     0  )  ,     (  0  ,     0  ,     1  )  ,     (  0  ,     1  ,     0  )  ,     (  0  ,     1  ,     1  )  ,     (  1  ,     0  ,     0  )  ,     (  1  ,     0  ,     1  )  ,     (  1  ,     1  ,     0  )  ,     (  1  ,     1  ,     1  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM   UNNEST ( ARRAY [  0  ,     1  ]  )  ,    UNNEST ( ARRAY [  0  ,     1  ]  )  ,    UNNEST ( ARRAY [  0  ,     1  ]  )  \"  ,     \" SELECT    *    FROM   VALUES    (  0  ,     0  ,     0  )  ,     (  0  ,     0  ,     1  )  ,     (  0  ,     1  ,     0  )  ,     (  0  ,     1  ,     1  )  ,     (  1  ,     0  ,     0  )  ,     (  1  ,     0  ,     1  )  ,     (  1  ,     1  ,     0  )  ,     (  1  ,     1  ,     1  )  \"  )  ;", "assertQuery (  \" SELECT   a ,    b   FROM   UNNEST ( MAP ( ARRAY [  1  ,  2  ]  ,    ARRAY [  ' cat '  ,     ' dog '  ]  )  )    t ( a ,    b )  \"  ,     \" SELECT    *    FROM   VALUES    (  1  ,     ' cat '  )  ,     (  2  ,     ' dog '  )  \"  )  ;", "assertQuery (  \" SELECT   a ,    b   FROM   UNNEST ( MAP ( ARRAY [  1  ,  2  ]  ,    ARRAY [  ' cat '  ,    NULL ]  )  )    t ( a ,    b )  \"  ,     \" SELECT    *    FROM   VALUES    (  1  ,     ' cat '  )  ,     (  2  ,    NULL )  \"  )  ;", "assertQuery (  \" SELECT    1    FROM    ( VALUES    ( ARRAY [  1  ]  )  )    AS   t    ( a )    CROSS   JOIN   UNNEST ( a )    WITH   ORDINALITY \"  ,     \" SELECT    1  \"  )  ;", "assertQuery (  \" SELECT    *    FROM   UNNEST ( ARRAY [  1  ,     2  ,     3  ]  )    WITH   ORDINALITY \"  ,     \" SELECT    *    FROM   VALUES    (  1  ,     1  )  ,     (  2  ,     2  )  ,     (  3  ,     3  )  \"  )  ;", "assertQuery (  \" SELECT   b   FROM   UNNEST ( ARRAY [  1  0  ,     2  0  ,     3  0  ]  )    WITH   ORDINALITY   t ( a ,    b )  \"  ,     \" SELECT    *    FROM   VALUES    (  1  )  ,     (  2  )  ,     (  3  )  \"  )  ;", "assertQuery (  \" SELECT   a ,    b ,    c   FROM   UNNEST ( ARRAY [  1  0  ,     2  0  ,     3  0  ]  ,    ARRAY [  4  ,     5  ]  )    WITH   ORDINALITY   t ( a ,    b ,    c )  \"  ,     \" SELECT    *    FROM   VALUES    (  1  0  ,     4  ,     1  )  ,     (  2  0  ,     5  ,     2  )  ,     (  3  0  ,    NULL ,     3  )  \"  )  ;", "assertQuery (  \" SELECT   a ,    b   FROM   UNNEST ( ARRAY [  ' kittens '  ,     ' puppies '  ]  )    WITH   ORDINALITY   t ( a ,    b )  \"  ,     \" SELECT    *    FROM   VALUES    (  ' kittens '  ,     1  )  ,     (  ' puppies '  ,     2  )  \"  )  ;", "assertQuery (  (  \"  \"     +     (  (  \" SELECT   c    \"     +     \" FROM   UNNEST ( ARRAY [  1  ,     2  ,     3  ]  ,    ARRAY [  4  ,     5  ]  )    WITH   ORDINALITY   t ( a ,    b ,    c )     \"  )     +     \" CROSS   JOIN    ( values    (  8  )  ,     (  9  )  )    t 2  ( d )  \"  )  )  ,     \" SELECT    *    FROM   VALUES    1  ,     1  ,     2  ,     2  ,     3  ,     3  \"  )  ;", "assertQuery (  (  \"  \"     +     (  (  \" SELECT   a . custkey ,    t . e ,    t . f    \"     +     \" FROM    ( SELECT   custkey ,    ARRAY [  1  0  ,     2  0  ,     3  0  ]    AS   my _ array   FROM   orders   ORDER   BY   orderkey   LIMIT    1  )    a    \"  )     +     \" CROSS   JOIN   UNNEST ( my _ array )    WITH   ORDINALITY   t ( e ,    f )  \"  )  )  ,     \" SELECT    *    FROM    ( SELECT   custkey   FROM   orders   ORDER   BY   orderkey   LIMIT    1  )    CROSS   JOIN    ( VALUES    (  1  0  ,     1  )  ,     (  2  0  ,     2  )  ,     (  3  0  ,     3  )  )  \"  )  ;", "assertQuery (  (  \"  \"     +     (  (  \" SELECT   a . custkey ,    t . e ,    t . f    \"     +     \" FROM    ( SELECT   custkey ,    ARRAY [  1  0  ,     2  0  ,     3  0  ]    AS   my _ array   FROM   orders   ORDER   BY   orderkey   LIMIT    1  )    a ,     \"  )     +     \" UNNEST ( my _ array )    WITH   ORDINALITY   t ( e ,    f )  \"  )  )  ,     \" SELECT    *    FROM    ( SELECT   custkey   FROM   orders   ORDER   BY   orderkey   LIMIT    1  )    CROSS   JOIN    ( VALUES    (  1  0  ,     1  )  ,     (  2  0  ,     2  )  ,     (  3  0  ,     3  )  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM   orders ,    UNNEST ( ARRAY [  1  ]  )  \"  ,     \" SELECT   orders .  *  ,     1    FROM   orders \"  )  ;", "assertQueryFails (  \" SELECT    *    FROM    ( VALUES   array [  2  ,     2  ]  )    a ( x )    LEFT   OUTER   JOIN   UNNEST ( x )    ON   true \"  ,     \" line    .  *  :    UNNEST   on   other   than   the   right   side   of   CROSS   JOIN   is   not   supported \"  )  ;", "assertQueryFails (  \" SELECT    *    FROM    ( VALUES   array [  2  ,     2  ]  )    a ( x )    RIGHT   OUTER   JOIN   UNNEST ( x )    ON   true \"  ,     \" line    .  *  :    UNNEST   on   other   than   the   right   side   of   CROSS   JOIN   is   not   supported \"  )  ;", "assertQueryFails (  \" SELECT    *    FROM    ( VALUES   array [  2  ,     2  ]  )    a ( x )    FULL   OUTER   JOIN   UNNEST ( x )    ON   true \"  ,     \" line    .  *  :    UNNEST   on   other   than   the   right   side   of   CROSS   JOIN   is   not   supported \"  )  ;", "}", "METHOD_END"], "methodName": ["testUnnest"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  \" SELECT   EXISTS ( SELECT    1    WHERE   l . orderkey    >     0    OR   l . orderkey    !  =     3  )    FROM   lineitem   l \"  ,    AbstractTestQueries . UNSUPPORTED _ CORRELATED _ SUBQUERY _ ERROR _ MSG )  ;", "assertQueryFails (  \" SELECT   count (  *  )    FROM   lineitem   l   WHERE   EXISTS ( SELECT    1    WHERE   l . orderkey    >     0    OR   l . orderkey    !  =     3  )  \"  ,    AbstractTestQueries . UNSUPPORTED _ CORRELATED _ SUBQUERY _ ERROR _ MSG )  ;", "assertQueryFails (  \" SELECT    *    FROM   lineitem   l   ORDER   BY   EXISTS ( SELECT    1    WHERE   l . orderkey    >     0    OR   l . orderkey    !  =     3  )  \"  ,    AbstractTestQueries . UNSUPPORTED _ CORRELATED _ SUBQUERY _ ERROR _ MSG )  ;", "assertQueryFails (  \" SELECT   max ( l . quantity )  ,    l . orderkey ,    EXISTS ( SELECT    1    WHERE   l . orderkey    >     0    OR   l . orderkey    !  =     3  )    FROM   lineitem   l   GROUP   BY   l . orderkey \"  ,    AbstractTestQueries . UNSUPPORTED _ CORRELATED _ SUBQUERY _ ERROR _ MSG )  ;", "assertQueryFails (  \" SELECT   max ( l . quantity )  ,    l . orderkey   FROM   lineitem   l   GROUP   BY   l . orderkey   HAVING   EXISTS    ( SELECT    1    WHERE   l . orderkey    >     0    OR   l . orderkey    !  =     3  )  \"  ,    AbstractTestQueries . UNSUPPORTED _ CORRELATED _ SUBQUERY _ ERROR _ MSG )  ;", "assertQueryFails (  \" SELECT   max ( l . quantity )  ,    l . orderkey   FROM   lineitem   l   GROUP   BY   l . orderkey ,    EXISTS    ( SELECT    1    WHERE   l . orderkey    >     0    OR   l . orderkey    !  =     3  )  \"  ,    AbstractTestQueries . UNSUPPORTED _ CORRELATED _ SUBQUERY _ ERROR _ MSG )  ;", "assertQueryFails (  \" SELECT    *    FROM   lineitem   l 1    JOIN   lineitem   l 2    ON   NOT   EXISTS ( SELECT    1    WHERE   l 1  . orderkey    !  =    l 2  . orderkey   OR   l 1  . orderkey    =     3  )  \"  ,    AbstractTestQueries . UNSUPPORTED _ CORRELATED _ SUBQUERY _ ERROR _ MSG )  ;", "assertQueryFails (  \" SELECT   count (  *  )    FROM   lineitem   l   WHERE    ( SELECT    *    FROM    ( SELECT   EXISTS ( SELECT    1    WHERE   l . orderkey    >     0    OR   l . orderkey    !  =     3  )  )  )  \"  ,    AbstractTestQueries . UNSUPPORTED _ CORRELATED _ SUBQUERY _ ERROR _ MSG )  ;", "}", "METHOD_END"], "methodName": ["testUnsupportedCorrelatedExistsSubqueries"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  (  \" SELECT    *    FROM    (     \"     +     (  (  (  (  (  (  \"       SELECT   orderkey ,    orderstatus    \"     +     \"              ,    first _ value ( orderkey    +     1  0  0  0  )    OVER    ( PARTITION   BY   orderstatus   ORDER   BY   orderkey )    fvalue    \"  )     +     \"              ,    nth _ value ( orderkey    +     1  0  0  0  ,     2  )    OVER    ( PARTITION   BY   orderstatus   ORDER   BY   orderkey    \"  )     +     \"                         ROWS   BETWEEN   UNBOUNDED   PRECEDING   AND   UNBOUNDED   FOLLOWING )    nvalue    \"  )     +     \"             FROM    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    1  0  )    x    \"  )     +     \"        )    x    \"  )     +     \" ORDER   BY   orderkey   LIMIT    5  \"  )  )  ,     (  \" VALUES    \"     +     (  (  (  (  \"  (  1  ,     ' O '  ,     1  0  0  1  ,     1  0  0  2  )  ,     \"     +     \"  (  2  ,     ' O '  ,     1  0  0  1  ,     1  0  0  2  )  ,     \"  )     +     \"  (  3  ,     ' F '  ,     1  0  0  3  ,     1  0  0  5  )  ,     \"  )     +     \"  (  4  ,     ' O '  ,     1  0  0  1  ,     1  0  0  2  )  ,     \"  )     +     \"  (  5  ,     ' F '  ,     1  0  0  3  ,     1  0  0  5  )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testValueWindowFunctions"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" VALUES    1  ,     2  ,     3  ,     4  \"  )  ;", "assertQuery (  \" VALUES    1  ,     3  ,     2  ,     4    ORDER   BY    1  \"  ,     \" SELECT    *    FROM    ( VALUES    1  ,     3  ,     2  ,     4  )    ORDER   BY    1  \"  )  ;", "assertQuery (  \" VALUES    (  1  .  1  ,     2  ,     ' foo '  )  ,     ( sin (  3  .  3  )  ,     2  +  2  ,     ' bar '  )  \"  )  ;", "assertQuery (  \" VALUES    (  1  .  1  ,     2  )  ,     ( sin (  3  .  3  )  ,     2  +  2  )    ORDER   BY    1  \"  ,     \" VALUES    ( sin (  3  .  3  )  ,     2  +  2  )  ,     (  1  .  1  ,     2  )  \"  )  ;", "assertQuery (  \" VALUES    (  1  .  1  ,     2  )  ,     ( sin (  3  .  3  )  ,     2  +  2  )    LIMIT    1  \"  ,     \" VALUES    (  1  .  1  ,     2  )  \"  )  ;", "assertQuery (  \" SELECT    *    FROM    ( VALUES    (  1  .  1  ,     2  )  ,     ( sin (  3  .  3  )  ,     2  +  2  )  )  \"  )  ;", "assertQuery (  \" SELECT    1  .  1    in    ( VALUES    (  1  .  1  )  ,     (  2  .  2  )  )  \"  ,     \" VALUES    ( TRUE )  \"  )  ;", "assertQuery (  (  \"  \"     +     (  \" WITH   a   AS    ( VALUES    (  1  .  1  ,     2  )  ,     ( sin (  3  .  3  )  ,     2  +  2  )  )     \"     +     \" SELECT    *    FROM   a \"  )  )  ,     \" VALUES    (  1  .  1  ,     2  )  ,     ( sin (  3  .  3  )  ,     2  +  2  )  \"  )  ;", "assertQuery (  \" VALUES    1  ,     2  .  2  ,     3  ,     4  .  4  \"  )  ;", "assertQuery (  \" VALUES    (  1  ,     2  )  ,     (  3  .  3  ,     4  .  4  )  \"  )  ;", "assertQuery (  \" VALUES   true ,     1  .  0    in    (  1  ,     2  ,     3  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testValues"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  \" VALUES    (  0 E 0  /  0 E 0  ,     1 E 0  /  0 E 0  ,     -  1 E 0  /  0 E 0  )  \"  )  ;", "List < MaterializedRow >    rows    =    actual . getMaterializedRows (  )  ;", "assertEquals ( rows . size (  )  ,     1  )  ;", "MaterializedRow   row    =    rows . get (  0  )  ;", "assertTrue (  (  ( Double )     ( row . getField (  0  )  )  )  . isNaN (  )  )  ;", "assertEquals ( row . getField (  1  )  ,    Double . POSITIVE _ INFINITY )  ;", "assertEquals ( row . getField (  2  )  ,    Double . NEGATIVE _ INFINITY )  ;", "}", "METHOD_END"], "methodName": ["testValuesWithNonTrivialType"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  \" VALUES    ( current _ timestamp ,    now (  )  )  \"  )  ;", "List < MaterializedRow >    rows    =    actual . getMaterializedRows (  )  ;", "assertEquals ( rows . size (  )  ,     1  )  ;", "MaterializedRow   row    =    rows . get (  0  )  ;", "assertEquals ( row . getField (  0  )  ,    row . getField (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["testValuesWithTimestamp"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  \" SELECT   foo   FROM    ( values    (  1  ,     2  )  )    a ( foo ,    bar )  \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    actual . getTypes (  )  )  . row (  1  )  . build (  )  ;", "assertEquals ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testValuesWithUnusedColumns"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   LENGTH ( x )    FROM    ( SELECT   from _ base 6  4  (  ' gw =  =  '  )    AS   x )  \"  ,     \" SELECT    1  \"  )  ;", "assertQuery (  \" SELECT   LENGTH ( from _ base 6  4  (  ' gw =  =  '  )  )  \"  ,     \" SELECT    1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testVarbinary"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   VAR _ SAMP ( custkey )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   VAR _ SAMP ( custkey )    FROM    ( SELECT   custkey   FROM   orders   ORDER   BY   custkey   LIMIT    2  )    T \"  )  ;", "assertQuery (  \" SELECT   VAR _ SAMP ( custkey )    FROM    ( SELECT   custkey   FROM   orders   ORDER   BY   custkey   LIMIT    1  )    T \"  )  ;", "assertQuery (  \" SELECT   VAR _ SAMP ( custkey )    FROM    ( SELECT   custkey   FROM   orders   LIMIT    0  )    T \"  )  ;", "assertQuery (  \" SELECT   VAR _ SAMP ( totalprice )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   VAR _ SAMP ( totalprice )    FROM    ( SELECT   totalprice   FROM   orders   ORDER   BY   totalprice   LIMIT    2  )    T \"  )  ;", "assertQuery (  \" SELECT   VAR _ SAMP ( totalprice )    FROM    ( SELECT   totalprice   FROM   orders   ORDER   BY   totalprice   LIMIT    1  )    T \"  )  ;", "assertQuery (  \" SELECT   VAR _ SAMP ( totalprice )    FROM    ( SELECT   totalprice   FROM   orders   LIMIT    0  )    T \"  )  ;", "}", "METHOD_END"], "methodName": ["testVariance"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   VAR _ POP ( custkey )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   VAR _ POP ( custkey )    FROM    ( SELECT   custkey   FROM   orders   ORDER   BY   custkey   LIMIT    2  )    T \"  )  ;", "assertQuery (  \" SELECT   VAR _ POP ( custkey )    FROM    ( SELECT   custkey   FROM   orders   ORDER   BY   custkey   LIMIT    1  )    T \"  )  ;", "assertQuery (  \" SELECT   VAR _ POP ( custkey )    FROM    ( SELECT   custkey   FROM   orders   LIMIT    0  )    T \"  )  ;", "assertQuery (  \" SELECT   VAR _ POP ( totalprice )    FROM   orders \"  )  ;", "assertQuery (  \" SELECT   VAR _ POP ( totalprice )    FROM    ( SELECT   totalprice   FROM   orders   ORDER   BY   totalprice   LIMIT    2  )    T \"  )  ;", "assertQuery (  \" SELECT   VAR _ POP ( totalprice )    FROM    ( SELECT   totalprice   FROM   orders   ORDER   BY   totalprice   LIMIT    1  )    T \"  )  ;", "assertQuery (  \" SELECT   VAR _ POP ( totalprice )    FROM    ( SELECT   totalprice   FROM   orders   LIMIT    0  )    T \"  )  ;", "}", "METHOD_END"], "methodName": ["testVariancePop"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   custkey   FROM   orders   WHERE   custkey    =    custkey   AND   CAST ( nullif ( custkey ,    custkey )    AS   boolean )    AND   CAST ( nullif ( custkey ,    custkey )    AS   boolean )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testWhereNull"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   a . col 0    FROM    ( VALUES   ROW ( CAST ( ROW (  1  ,     2  )    AS   ROW ( col 0    integer ,    col 1    integer )  )  )  )    AS   t    ( a )    WHERE   a . col 0     >     0  \"  ,     \" SELECT    1  \"  )  ;", "assertQuery (  \" SELECT   SUM ( a . col 0  )    FROM    ( VALUES   ROW ( CAST ( ROW (  1  ,     2  )    AS   ROW ( col 0    integer ,    col 1    integer )  )  )  )    AS   t    ( a )    WHERE   a . col 0     <  =     0  \"  ,     \" SELECT   null \"  )  ;", "assertQuery (  \" SELECT   a . col 0    FROM    ( VALUES   ROW ( CAST ( ROW (  1  ,     2  )    AS   ROW ( col 0    integer ,    col 1    integer )  )  )  )    AS   t    ( a )    WHERE   a . col 0     <    a . col 1  \"  ,     \" SELECT    1  \"  )  ;", "assertQuery (  \" SELECT   SUM ( a . col 0  )    FROM    ( VALUES   ROW ( CAST ( ROW (  1  ,     2  )    AS   ROW ( col 0    integer ,    col 1    integer )  )  )  )    AS   t    ( a )    WHERE   a . col 0     <    a . col 1  \"  ,     \" SELECT    1  \"  )  ;", "assertQuery (  \" SELECT   SUM ( a . col 0  )    FROM    ( VALUES   ROW ( CAST ( ROW (  1  ,     2  )    AS   ROW ( col 0    integer ,    col 1    integer )  )  )  )    AS   t    ( a )    WHERE   a . col 0     >    a . col 1  \"  ,     \" SELECT   null \"  )  ;", "}", "METHOD_END"], "methodName": ["testWhereWithRowField"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    *    FROM   orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testWildcard"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    *    FROM    ( SELECT   orderkey ,    partkey   FROM   lineitem )    a   JOIN    ( SELECT   orderkey ,    custkey   FROM   orders )    b   using    ( orderkey )  \"  ,     \" SELECT   a . orderkey ,    a . partkey ,    b . custkey   FROM    ( SELECT   orderkey ,    partkey   FROM   lineitem )    a   JOIN    ( SELECT   orderkey ,    custkey   FROM   orders )    b   on   a . orderkey    =    b . orderkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testWildcardFromJoin"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    *    FROM    ( SELECT   orderkey   X   FROM   orders )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testWildcardFromSubquery"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  (  \" SELECT    *    FROM    (  \\ n \"     +     (  (  (  (  (  \"       SELECT   orderkey ,    orderstatus \\ n \"     +     \"              ,    sum ( orderkey    +     1  0  0  0  )    OVER    ( PARTITION   BY   orderstatus   ORDER   BY   orderkey \\ n \"  )     +     \"                         ROWS   BETWEEN   mod ( custkey ,     2  )    PRECEDING   AND   custkey    /     5  0  0    FOLLOWING )  \\ n \"  )     +     \"             FROM    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    1  0  )    x \\ n \"  )     +     \"        )    x \\ n \"  )     +     \" ORDER   BY   orderkey   LIMIT    5  \"  )  )  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    BIGINT ,    VARCHAR ,    BIGINT )  . row (  1 L ,     \" O \"  ,     1  0  0  1 L )  . row (  2 L ,     \" O \"  ,     3  0  0  7 L )  . row (  3 L ,     \" F \"  ,     3  0  1  4 L )  . row (  4 L ,     \" O \"  ,     4  0  4  5 L )  . row (  5 L ,     \" F \"  ,     2  0  0  8 L )  . build (  )  ;", "assertEquals ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testWindowFrames"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  (  \"  \"     +     (  (  \" SELECT    *  ,    rank (  )    OVER    ( PARTITION   BY   x )  \\ n \"     +     \" FROM    ( SELECT    \\  ' foo \\  '    x )  \\ n \"  )     +     \" GROUP   BY    1  \"  )  )  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    createVarcharType (  3  )  ,    BIGINT )  . row (  \" foo \"  ,     1 L )  . build (  )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testWindowFunctionWithGroupBy"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    *  ,     1  .  0     *    sum ( x )    OVER    (  )    FROM    ( VALUES    1  )    t ( x )  \"  ,     \" SELECT    1  ,     1  .  0  \"  )  ;", "}", "METHOD_END"], "methodName": ["testWindowFunctionWithImplicitCoercion"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  \" SELECT   count (  )    over ( partition   by   custkey )    FROM   orders   WHERE   custkey    <     3    ORDER   BY   custkey \"  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    BIGINT )  . row (  9 L )  . row (  9 L )  . row (  9 L )  . row (  9 L )  . row (  9 L )  . row (  9 L )  . row (  9 L )  . row (  9 L )  . row (  9 L )  . row (  1  0 L )  . row (  1  0 L )  . row (  1  0 L )  . row (  1  0 L )  . row (  1  0 L )  . row (  1  0 L )  . row (  1  0 L )  . row (  1  0 L )  . row (  1  0 L )  . row (  1  0 L )  . build (  )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testWindowFunctionWithoutParameters"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  (  \" SELECT   orderkey ,    orderstatus    \"     +     (  (  (  \"  ,    row _ number (  )    OVER    ( ORDER   BY   orderkey    *     2  )     *     \"     +     \"       row _ number (  )    OVER    ( ORDER   BY   orderkey   DESC )     +     1  0  0     \"  )     +     \" FROM    ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    1  0  )    x    \"  )     +     \" ORDER   BY   orderkey   LIMIT    5  \"  )  )  ,     (  \" VALUES    \"     +     (  (  (  (  \"  (  1  ,     ' O '  ,     1  1  0  )  ,     \"     +     \"  (  2  ,     ' O '  ,     1  1  8  )  ,     \"  )     +     \"  (  3  ,     ' F '  ,     1  2  4  )  ,     \"  )     +     \"  (  4  ,     ' O '  ,     1  2  8  )  ,     \"  )     +     \"  (  5  ,     ' F '  ,     1  3  0  )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testWindowFunctionsExpressions"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  (  \"  \"     +     (  (  (  (  (  (  (  (  (  (  \" SELECT    *    FROM    (  \\ n \"     +     \"       SELECT   orderstatus ,    clerk ,    sales \\ n \"  )     +     \"        ,    rank (  )    OVER    ( PARTITION   BY   x . orderstatus   ORDER   BY   sales   DESC )    rnk \\ n \"  )     +     \"       FROM    (  \\ n \"  )     +     \"             SELECT   orderstatus ,    clerk ,    sum ( totalprice )    sales \\ n \"  )     +     \"             FROM   orders \\ n \"  )     +     \"             GROUP   BY   orderstatus ,    clerk \\ n \"  )     +     \"           )    x \\ n \"  )     +     \"  )    x \\ n \"  )     +     \" WHERE   rnk    <  =     2  \\ n \"  )     +     \" ORDER   BY   orderstatus ,    rnk \"  )  )  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    VARCHAR ,    VARCHAR ,    DOUBLE ,    BIGINT )  . row (  \" F \"  ,     \" Clerk #  0  0  0  0  0  0  0  9  0  \"  ,     2  7  8  4  8  3  6  .  6  1  ,     1 L )  . row (  \" F \"  ,     \" Clerk #  0  0  0  0  0  0  0  8  4  \"  ,     2  6  7  4  4  4  7  .  1  5  ,     2 L )  . row (  \" O \"  ,     \" Clerk #  0  0  0  0  0  0  5  0  0  \"  ,     2  5  6  9  8  7  8  .  2  9  ,     1 L )  . row (  \" O \"  ,     \" Clerk #  0  0  0  0  0  0  0  5  0  \"  ,     2  5  0  0  1  6  2  .  9  2  ,     2 L )  . row (  \" P \"  ,     \" Clerk #  0  0  0  0  0  0  0  7  1  \"  ,     8  4  1  8  2  0  .  9  9  ,     1 L )  . row (  \" P \"  ,     \" Clerk #  0  0  0  0  0  1  0  0  0  \"  ,     6  4  3  6  7  9  .  4  9  ,     2 L )  . build (  )  ;", "assertEquals ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testWindowFunctionsFromAggregate"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  \" SELECT   orderkey ,     1 e 0     /    row _ number (  )    OVER    ( ORDER   BY   orderkey )    FROM   orders   LIMIT    2  \"  ,     \" VALUES    (  1  ,     1  .  0  )  ,     (  2  ,     0  .  5  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testWindowImplicitCoercion"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  (  \"  \"     +     (  \" SELECT   map _ agg ( orderkey ,    orderpriority )    OVER ( PARTITION   BY   orderstatus )    FROM \\ n \"     +     \"  ( SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    5  )    t \"  )  )  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    StructuralUtil . mapType ( BIGINT ,    VarcharType . createVarcharType (  1  )  )  )  . row ( ImmutableMap . of (  1 L ,     \"  5  - LOW \"  ,     2 L ,     \"  1  - URGENT \"  ,     4 L ,     \"  5  - LOW \"  )  )  . row ( ImmutableMap . of (  1 L ,     \"  5  - LOW \"  ,     2 L ,     \"  1  - URGENT \"  ,     4 L ,     \"  5  - LOW \"  )  )  . row ( ImmutableMap . of (  1 L ,     \"  5  - LOW \"  ,     2 L ,     \"  1  - URGENT \"  ,     4 L ,     \"  5  - LOW \"  )  )  . row ( ImmutableMap . of (  3 L ,     \"  5  - LOW \"  ,     5 L ,     \"  5  - LOW \"  )  )  . row ( ImmutableMap . of (  3 L ,     \"  5  - LOW \"  ,     5 L ,     \"  5  - LOW \"  )  )  . build (  )  ;", "QueryAssertions . assertEqualsIgnoreOrder ( actual . getMaterializedRows (  )  ,    expected . getMaterializedRows (  )  )  ;", "}", "METHOD_END"], "methodName": ["testWindowMapAgg"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  (  \" SELECT   rank (  )    OVER    (  )  \\ n \"     +     (  \" FROM    ( SELECT    *    FROM   orders   LIMIT    1  0  )  \\ n \"     +     \" LIMIT    3  \"  )  )  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    BIGINT )  . row (  1 L )  . row (  1 L )  . row (  1 L )  . build (  )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testWindowNoChannels"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \" SELECT   orderstatus ,    orderkey ,     \"     +     (  (  (  (  (  (  (  (  (  \" SUM ( s )    OVER    ( PARTITION   BY   orderstatus )  ,     \"     +     \" SUM ( s )    OVER    ( PARTITION   BY   orderstatus ,    orderkey )  ,     \"  )     +     \" SUM ( s )    OVER    ( PARTITION   BY   orderstatus   ORDER   BY   orderkey )  ,     \"  )     +     \" SUM ( s )    OVER    ( ORDER   BY   orderstatus ,    orderkey )     \"  )     +     \" FROM    (     \"  )     +     \"          SELECT   orderkey ,    orderstatus ,    SUM ( orderkey )    OVER    ( ORDER   BY   orderstatus ,    orderkey )    s    \"  )     +     \"          FROM    (     \"  )     +     \"                      SELECT    *    FROM   orders   ORDER   BY   orderkey   LIMIT    1  0     \"  )     +     \"           )     \"  )     +     \"  )  \"  )  )  ,     (  \" VALUES    \"     +     (  (  (  (  (  (  (  (  (  \"  (  ' F '  ,     3  ,     7  2  ,     3  ,     3  ,     3  )  ,     \"     +     \"  (  ' F '  ,     5  ,     7  2  ,     8  ,     1  1  ,     1  1  )  ,     \"  )     +     \"  (  ' F '  ,     6  ,     7  2  ,     1  4  ,     2  5  ,     2  5  )  ,     \"  )     +     \"  (  ' F '  ,     3  3  ,     7  2  ,     4  7  ,     7  2  ,     7  2  )  ,     \"  )     +     \"  (  ' O '  ,     1  ,     4  3  3  ,     4  8  ,     4  8  ,     1  2  0  )  ,     \"  )     +     \"  (  ' O '  ,     2  ,     4  3  3  ,     5  0  ,     9  8  ,     1  7  0  )  ,     \"  )     +     \"  (  ' O '  ,     4  ,     4  3  3  ,     5  4  ,     1  5  2  ,     2  2  4  )  ,     \"  )     +     \"  (  ' O '  ,     7  ,     4  3  3  ,     6  1  ,     2  1  3  ,     2  8  5  )  ,     \"  )     +     \"  (  ' O '  ,     3  2  ,     4  3  3  ,     9  3  ,     3  0  6  ,     3  7  8  )  ,     \"  )     +     \"  (  ' O '  ,     3  4  ,     4  3  3  ,     1  2  7  ,     4  3  3  ,     5  0  5  )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testWindowPropertyDerivation"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered (  (  \" SELECT    \"     +     (  (  (  (  \" sum ( size )    OVER ( PARTITION   BY   type   ORDER   BY   brand )  ,  \"     +     \" lag ( partkey ,     1  )    OVER ( PARTITION   BY   type   ORDER   BY   name )  \"  )     +     \" FROM   part    \"  )     +     \" ORDER   BY    1  ,     2     \"  )     +     \" LIMIT    1  0  \"  )  )  ,     (  \" VALUES    \"     +     (  (  (  (  (  (  (  (  (  \"  (  1  ,     3  1  5  )  ,     \"     +     \"  (  1  ,     8  8  1  )  ,     \"  )     +     \"  (  1  ,     1  0  0  9  )  ,     \"  )     +     \"  (  3  ,     1  0  8  7  )  ,     \"  )     +     \"  (  3  ,     1  1  8  7  )  ,     \"  )     +     \"  (  3  ,     1  5  2  9  )  ,     \"  )     +     \"  (  4  ,     9  6  9  )  ,     \"  )     +     \"  (  5  ,     1  5  1  )  ,     \"  )     +     \"  (  5  ,     5  0  5  )  ,     \"  )     +     \"  (  5  ,     8  7  2  )  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testWindowsConstantExpression"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  (  \" SELECT    \"     +     (  (  (  (  (  \" sum ( quantity )    OVER ( PARTITION   BY   suppkey   ORDER   BY   orderkey )  ,  \"     +     \" count ( discount )    OVER ( PARTITION   BY   partkey   ORDER   BY   receiptdate )  ,  \"  )     +     \" min ( tax )    OVER ( PARTITION   BY   suppkey ,    tax   ORDER   BY   receiptdate )  \"  )     +     \" FROM   lineitem    \"  )     +     \" ORDER   BY    1  ,     2     \"  )     +     \" LIMIT    1  0  \"  )  )  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    DOUBLE ,    BIGINT ,    DOUBLE )  . row (  1  .  0  ,     1  0 L ,     0  .  0  6  )  . row (  2  .  0  ,     4 L ,     0  .  0  6  )  . row (  2  .  0  ,     1  6 L ,     0  .  0  2  )  . row (  3  .  0  ,     3 L ,     0  .  0  8  )  . row (  3  .  0  ,     3  8 L ,     0  .  0  2  )  . row (  4  .  0  ,     1  0 L ,     0  .  0  3  )  . row (  4  .  0  ,     1  0 L ,     0  .  0  3  )  . row (  5  .  0  ,     9 L ,     0  .  0  3  )  . row (  5  .  0  ,     1  3 L ,     0  .  0  7  )  . row (  5  .  0  ,     1  5 L ,     0  .  0  2  )  . build (  )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testWindowsDifferentPartitions"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  (  \" SELECT    \"     +     (  (  (  (  \" max ( tax )    OVER ( PARTITION   BY   suppkey ,    tax   ORDER   BY   receiptdate )  ,  \"     +     \" sum ( quantity )    OVER ( PARTITION   BY   suppkey   ORDER   BY   orderkey )  \"  )     +     \" FROM   lineitem    \"  )     +     \" ORDER   BY    2  ,     1     \"  )     +     \" LIMIT    1  0  \"  )  )  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    DOUBLE ,    DOUBLE )  . row (  0  .  0  6  ,     1  .  0  )  . row (  0  .  0  2  ,     2  .  0  )  . row (  0  .  0  6  ,     2  .  0  )  . row (  0  .  0  2  ,     3  .  0  )  . row (  0  .  0  8  ,     3  .  0  )  . row (  0  .  0  3  ,     4  .  0  )  . row (  0  .  0  3  ,     4  .  0  )  . row (  0  .  0  2  ,     5  .  0  )  . row (  0  .  0  3  ,     5  .  0  )  . row (  0  .  0  7  ,     5  .  0  )  . build (  )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testWindowsPrefixPartitioning"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   actual    =    computeActual (  (  \" SELECT    \"     +     (  (  (  (  \" sum ( quantity )    OVER ( PARTITION   BY   suppkey   ORDER   BY   orderkey )  ,  \"     +     \" min ( tax )    OVER ( PARTITION   BY   suppkey   ORDER   BY   shipdate )  \"  )     +     \" FROM   lineitem    \"  )     +     \" ORDER   BY    1     \"  )     +     \" LIMIT    1  0  \"  )  )  )  ;", "MaterializedResult   expected    =    resultBuilder ( getSession (  )  ,    DOUBLE ,    DOUBLE )  . row (  1  .  0  ,     0  .  0  )  . row (  2  .  0  ,     0  .  0  )  . row (  2  .  0  ,     0  .  0  )  . row (  3  .  0  ,     0  .  0  )  . row (  3  .  0  ,     0  .  0  )  . row (  4  .  0  ,     0  .  0  )  . row (  4  .  0  ,     0  .  0  )  . row (  5  .  0  ,     0  .  0  )  . row (  5  .  0  ,     0  .  0  )  . row (  5  .  0  ,     0  .  0  )  . build (  )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testWindowsSameOrdering"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  \" WITH   a   AS    ( SELECT    *    FROM   orders )     \"     +     \" SELECT    *    FROM   a \"  )  )  ,     \" SELECT    *    FROM   orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testWith"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" WITH   a   AS    ( SELECT    *    FROM   orders )    SELECT    *    FROM   a   x \"  ,     \" SELECT    *    FROM   orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testWithAliased"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  \" WITH   a   AS    ( SELECT   orderkey   n   FROM   orders )  \\ n \"     +     \"  ,    b   AS    ( SELECT   n    +     1    n   FROM   a )  \\ n \"  )     +     \"  ,    c   AS    ( SELECT   n    +     1    n   FROM   b )  \\ n \"  )     +     \" SELECT   n    +     1    FROM   c \"  )  )  ,     \" SELECT   orderkey    +     3    FROM   orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testWithChaining"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" WITH   a    ( id )    AS    ( SELECT    1  2  3  )    SELECT   id   FROM   a \"  ,     \" SELECT    1  2  3  \"  )  ;", "assertQuery (  \" WITH   t    ( a ,    b ,    c )    AS    ( SELECT    1  ,    custkey   x ,    orderkey   FROM   orders )    SELECT   c ,    b ,    a   FROM   t \"  ,     \" SELECT   orderkey ,    custkey ,     1    FROM   orders \"  )  ;", "}", "METHOD_END"], "methodName": ["testWithColumnAliasing"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  \" WITH   a   AS    ( SELECT    1  )  ,     \"     +     \"                b   AS    (  \"  )     +     \"                            WITH   a   AS    ( SELECT    2  )  \"  )     +     \"                            SELECT    *    FROM   a \"  )     +     \"              )  \"  )     +     \" SELECT    *    FROM   b \"  )  )  ,     \" SELECT    2  \"  )  ;", "assertQueryFails (  (  \" WITH   a   AS    ( VALUES    1  )  ,     \"     +     (  \"                a   AS    ( VALUES    2  )  \"     +     \" SELECT    *    FROM   a \"  )  )  ,     \" line    1  :  2  8  :    WITH   query   name    ' a '    specified   more   than   once \"  )  ;", "}", "METHOD_END"], "methodName": ["testWithHiding"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  \" WITH   a   AS    (  \\ n \"     +     \"       WITH   aa   AS    ( SELECT    1  2  3    x   FROM   orders   LIMIT    1  )  \\ n \"  )     +     \"       SELECT   x   y   FROM   aa \\ n \"  )     +     \"  )  ,    b   AS    (  \\ n \"  )     +     \"       WITH   bb   AS    (  \\ n \"  )     +     \"             WITH   bbb   AS    ( SELECT   y   FROM   a )  \\ n \"  )     +     \"             SELECT   bbb .  *    FROM   bbb \\ n \"  )     +     \"        )  \\ n \"  )     +     \"       SELECT   y   z   FROM   bb \\ n \"  )     +     \"  )  \\ n \"  )     +     \" SELECT    *  \\ n \"  )     +     \" FROM    (  \\ n \"  )     +     \"       WITH   q   AS    ( SELECT   z   w   FROM   b )  \\ n \"  )     +     \"       SELECT   j .  *  ,    k .  *  \\ n \"  )     +     \"       FROM   a   j \\ n \"  )     +     \"       JOIN   q   k   ON    ( j . y    =    k . w )  \\ n \"  )     +     \"  )    t \"  )  )  ,     (  \"  \"     +     \" SELECT    1  2  3  ,     1  2  3    FROM   orders   LIMIT    1  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testWithNestedSubqueries"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" WITH   a   AS    ( SELECT    1  2  3  )    SELECT   a .  *    FROM   a \"  ,     \" SELECT    1  2  3  \"  )  ;", "}", "METHOD_END"], "methodName": ["testWithQualifiedPrefix"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  \" WITH   RECURSIVE   a   AS    ( SELECT    1  2  3  )    SELECT    *    FROM   a \"  ,     \" line    1  :  1  :    Recursive   WITH   queries   are   not   supported \"  )  ;", "}", "METHOD_END"], "methodName": ["testWithRecursive"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  (  \"  \"     +     (  \" WITH   x   AS    ( SELECT   DISTINCT   orderkey   FROM   orders   ORDER   BY   orderkey   LIMIT    1  0  )  \\ n \"     +     \" SELECT   count (  *  )    FROM   x   a   JOIN   x   b   USING    ( orderkey )  \"  )  )  ,     (  \"  \"     +     (  (  \" SELECT   count (  *  )  \\ n \"     +     \" FROM    ( SELECT   DISTINCT   orderkey   FROM   orders   ORDER   BY   orderkey   LIMIT    1  0  )    a \\ n \"  )     +     \" JOIN    ( SELECT   DISTINCT   orderkey   FROM   orders   ORDER   BY   orderkey   LIMIT    1  0  )    b   ON   a . orderkey    =    b . orderkey \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testWithSelfJoin"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "return   AbstractTestQueries . ZONED _ DATE _ TIME _ FORMAT . parse ( value ,    ZonedDateTime :  : from )  ;", "}", "METHOD_END"], "methodName": ["zonedDateTime"], "fileName": "com.facebook.presto.tests.AbstractTestQueries"}, {"methodBody": ["METHOD_START", "{", "executeExclusively (  (  )     -  >     {", "try    {", "qRunner . getAccessControl (  )  . deny ( deniedPrivileges )  ;", "qRunner . execute ( session ,    sql )  ;", "}    finally    {", "qRunner . getAccessControl (  )  . reset (  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["assertAccessAllowed"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "assertAccessAllowed ( getSession (  )  ,    sql ,    deniedPrivileges )  ;", "}", "METHOD_END"], "methodName": ["assertAccessAllowed"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "executeExclusively (  (  )     -  >     {", "try    {", "queryRunner . getAccessControl (  )  . deny ( deniedPrivileges )  ;", "queryRunner . execute ( session ,    sql )  ;", "fail (  (  \" Expected    \"     +     ( AccessDeniedException . class . getSimpleName (  )  )  )  )  ;", "}    catch    ( RuntimeException   e )     {", ". assertExceptionMessage ( sql ,    e ,     (  \"  .  * Access   Denied :     \"     +    exceptionsMessageRegExp )  )  ;", "}    finally    {", "queryRunner . getAccessControl (  )  . reset (  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["assertAccessDenied"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "assertAccessDenied ( getSession (  )  ,    sql ,    exceptionsMessageRegExp ,    deniedPrivileges )  ;", "}", "METHOD_END"], "methodName": ["assertAccessDenied"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( nullToEmpty ( exception . getMessage (  )  )  . matches ( regex )  )  )     {", "fail ( String . format (  \" Expected   exception   message    '  % s '    to   match    '  % s '    for   q :     % s \"  ,    exception . getMessage (  )  ,    regex ,    sql )  ,    exception )  ;", "}", "}", "METHOD_END"], "methodName": ["assertExceptionMessage"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "QueryAssertions . assertQuery ( queryRunner ,    session ,    sql ,    h 2 QueryRunner ,    sql ,    false ,    false )  ;", "}", "METHOD_END"], "methodName": ["assertQuery"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "QueryAssertions . assertQuery ( queryRunner ,    session ,    actual ,    h 2 QueryRunner ,    expected ,    false ,    false )  ;", "}", "METHOD_END"], "methodName": ["assertQuery"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "assertQuery ( getSession (  )  ,    sql )  ;", "}", "METHOD_END"], "methodName": ["assertQuery"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "QueryAssertions . assertQuery ( queryRunner ,    getSession (  )  ,    actual ,    h 2 QueryRunner ,    expected ,    false ,    false )  ;", "}", "METHOD_END"], "methodName": ["assertQuery"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "QueryAssertions . assertQueryFails ( queryRunner ,    session ,    sql ,    expectedMessageRegExp )  ;", "}", "METHOD_END"], "methodName": ["assertQueryFails"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "QueryAssertions . assertQueryFails ( queryRunner ,    getSession (  )  ,    sql ,    expectedMessageRegExp )  ;", "}", "METHOD_END"], "methodName": ["assertQueryFails"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "QueryAssertions . assertQueryFailsEventually ( queryRunner ,    getSession (  )  ,    sql ,    expectedMessageRegExp ,    timeout )  ;", "}", "METHOD_END"], "methodName": ["assertQueryFailsEventually"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered ( session ,    sql ,    sql )  ;", "}", "METHOD_END"], "methodName": ["assertQueryOrdered"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "QueryAssertions . assertQuery ( queryRunner ,    session ,    actual ,    h 2 QueryRunner ,    expected ,    true ,    false )  ;", "}", "METHOD_END"], "methodName": ["assertQueryOrdered"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered ( getSession (  )  ,    sql )  ;", "}", "METHOD_END"], "methodName": ["assertQueryOrdered"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "assertQueryOrdered ( getSession (  )  ,    actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["assertQueryOrdered"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "QueryAssertions . assertQueryReturnsEmptyResult ( queryRunner ,    getSession (  )  ,    sql )  ;", "}", "METHOD_END"], "methodName": ["assertQueryReturnsEmptyResult"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   result    =    computeActual (  (  \" DESCRIBE    \"     +    tableName )  )  ;", "List < String >    expected    =    ImmutableList . copyOf ( columnNames )  ;", "List < String >    actual    =    result . getMaterializedRows (  )  . stream (  )  . map (  (    row )     -  >     (  ( String )     ( row . getField (  0  )  )  )  )  . collect ( toImmutableList (  )  )  ;", "assertEquals ( actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["assertTableColumnNames"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "QueryAssertions . assertUpdate ( queryRunner ,    session ,    sql ,    OptionalLong . empty (  )  )  ;", "}", "METHOD_END"], "methodName": ["assertUpdate"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "QueryAssertions . assertQuery ( queryRunner ,    session ,    actual ,    h 2 QueryRunner ,    expected ,    false ,    true )  ;", "}", "METHOD_END"], "methodName": ["assertUpdate"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "QueryAssertions . assertUpdate ( queryRunner ,    session ,    sql ,    OptionalLong . of ( count )  )  ;", "}", "METHOD_END"], "methodName": ["assertUpdate"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "assertUpdate ( getSession (  )  ,    sql )  ;", "}", "METHOD_END"], "methodName": ["assertUpdate"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "assertUpdate ( getSession (  )  ,    actual ,    expected )  ;", "}", "METHOD_END"], "methodName": ["assertUpdate"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "assertUpdate ( getSession (  )  ,    sql ,    count )  ;", "}", "METHOD_END"], "methodName": ["assertUpdate"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "Closeables . closeAllRuntimeException ( queryRunner ,    h 2 QueryRunner )  ;", "queryRunner    =    null ;", "h 2 QueryRunner    =    null ;", "sqlParser    =    null ;", "queryRunnerSupplier    =    null ;", "}", "METHOD_END"], "methodName": ["close"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "return   queryRunner . execute ( session ,    sql )  . toTestTypes (  )  ;", "}", "METHOD_END"], "methodName": ["computeActual"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "return   computeActual ( getSession (  )  ,    sql )  ;", "}", "METHOD_END"], "methodName": ["computeActual"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "return   h 2 QueryRunner . execute ( getSession (  )  ,    sql ,    resultTypes )  ;", "}", "METHOD_END"], "methodName": ["computeExpected"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "return   computeActual ( sql )  . getOnlyValue (  )  ;", "}", "METHOD_END"], "methodName": ["computeScalar"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "queryRunner . getExclusiveLock (  )  . lock (  )  ;", "try    {", "executionBlock . run (  )  ;", "}    finally    {", "queryRunner . getExclusiveLock (  )  . unlock (  )  ;", "}", "}", "METHOD_END"], "methodName": ["executeExclusively"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "return   SqlFormatter . formatSql ( sqlParser . createStatement ( sql ,    ParsingUtil . createParsingOptions ( queryRunner . getDefaultSession (  )  )  )  ,    Optional . empty (  )  )  ;", "}", "METHOD_END"], "methodName": ["formatSqlText"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "QueryExplainer   explainer    =    getQueryExplainer (  )  ;", "return   transaction ( queryRunner . getTransactionManager (  )  ,    queryRunner . getAccessControl (  )  )  . singleStatement (  )  . execute ( queryRunner . getDefaultSession (  )  ,     (    session )     -  >     {", "return   explainer . getPlan ( session ,    sqlParser . createStatement ( query ,    createParsingOptions ( session )  )  ,    planType ,    emptyList (  )  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["getExplainPlan"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "QueryExplainer   explainer    =    getQueryExplainer (  )  ;", "return   transaction ( queryRunner . getTransactionManager (  )  ,    queryRunner . getAccessControl (  )  )  . singleStatement (  )  . execute ( queryRunner . getDefaultSession (  )  ,     (    session )     -  >     {", "return   explainer . getGraphvizPlan ( session ,    sqlParser . createStatement ( query ,    createParsingOptions ( session )  )  ,    planType ,    emptyList (  )  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["getGraphvizExplainPlan"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "return   queryRunner . getNodeCount (  )  ;", "}", "METHOD_END"], "methodName": ["getNodeCount"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "Metadata   metadata    =    queryRunner . getMetadata (  )  ;", "FeaturesConfig   featuresConfig    =    new   FeaturesConfig (  )  . setOptimizeHashGeneration ( true )  ;", "boolean   forceSingleNode    =     ( queryRunner . getNodeCount (  )  )     =  =     1  ;", "CostCalculator   costCalculator    =    new   cost . CostCalculatorUsingExchanges ( queryRunner :  : getNodeCount )  ;", "List < PlanOptimizer >    optimizers    =    new   sql . planner . PlanOptimizers ( metadata ,    sqlParser ,    featuresConfig ,    forceSingleNode ,    new   MBeanExporter ( new   TestingMBeanServer (  )  )  ,    queryRunner . getStatsCalculator (  )  ,    costCalculator ,    new   cost . CostCalculatorWithEstimatedExchanges ( costCalculator ,    queryRunner :  : getNodeCount )  ,    new   cost . CostComparator ( featuresConfig )  )  . get (  )  ;", "return   new   sql . analyzer . QueryExplainer ( optimizers ,    metadata ,    queryRunner . getNodePartitioningManager (  )  ,    queryRunner . getAccessControl (  )  ,    sqlParser ,    queryRunner . getStatsCalculator (  )  ,    costCalculator ,    ImmutableMap . of (  )  )  ;", "}", "METHOD_END"], "methodName": ["getQueryExplainer"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "checkState (  (  ( queryRunner )     !  =    null )  ,     \" queryRunner   not   set \"  )  ;", "return   queryRunner ;", "}", "METHOD_END"], "methodName": ["getQueryRunner"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "return   queryRunner . getDefaultSession (  )  ;", "}", "METHOD_END"], "methodName": ["getSession"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "queryRunner    =    queryRunnerSupplier . get (  )  ;", "h 2 Runner    =    new   H 2 Runner (  )  ;", "sqlParser    =    new   SqlParser (  )  ;", "}", "METHOD_END"], "methodName": ["init"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "if    (  ! requirement )     {", "throw   new   SkipException (  \" requirement   not   met \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["skipTestUnless"], "fileName": "com.facebook.presto.tests.AbstractTestQueryFramework"}, {"methodBody": ["METHOD_START", "{", "return    (    column )     -  >     {", "String   typeName    =    column . getType (  )  ;", "Type   type    =    Server . getMetadata (  )  . getType ( parseTypeSignature ( typeName )  )  ;", "if    ( type    =  =    null )     {", "throw   new   AssertionError (  (  \" Unhandled   type :     \"     +    typeName )  )  ;", "}", "return   type ;", "}  ;", "}", "METHOD_END"], "methodName": ["columnTypeGetter"], "fileName": "com.facebook.presto.tests.AbstractTestingPrestoClient"}, {"methodBody": ["METHOD_START", "{", "ResultsSession < T >    resultsSession    =    getResultSession ( session )  ;", "ClientSession   clientSession    =     . toClientSession ( session ,    prestoServer . getBaseUrl (  )  ,    new   Duration (  2  ,    TimeUnit . MINUTES )  )  ;", "try    ( StatementClient   client    =    newStatementClient ( httpClient ,    clientSession ,    sql )  )     {", "while    ( client . isRunning (  )  )     {", "resultsSession . addResults ( client . currentStatusInfo (  )  ,    client . currentData (  )  )  ;", "client . advance (  )  ;", "}", "checkState ( client . isFinished (  )  )  ;", "QueryError   error    =    client . finalStatusInfo (  )  . getError (  )  ;", "if    ( error    =  =    null )     {", "QueryStatusInfo   results    =    client . finalStatusInfo (  )  ;", "if    (  ( results . getUpdateType (  )  )     !  =    null )     {", "resultsSession . setUpdateType ( results . getUpdateType (  )  )  ;", "}", "if    (  ( results . getUpdateCount (  )  )     !  =    null )     {", "resultsSession . setUpdateCount ( results . getUpdateCount (  )  )  ;", "}", "T   result    =    resultsSession . build ( client . getSetSessionProperties (  )  ,    client . getResetSessionProperties (  )  )  ;", "return   new   ResultWithQueryId ( new   com . facebook . presto . spi . QueryId ( results . getId (  )  )  ,    result )  ;", "}", "if    (  ( error . getFailureInfo (  )  )     !  =    null )     {", "RuntimeException   remoteException    =    error . getFailureInfo (  )  . toException (  )  ;", "throw   new   RuntimeException ( Optional . ofNullable ( remoteException . getMessage (  )  )  . orElseGet ( remoteException :  : toString )  ,    remoteException )  ;", "}", "throw   new   RuntimeException (  (  \" Query   failed :     \"     +     ( error . getMessage (  )  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "com.facebook.presto.tests.AbstractTestingPrestoClient"}, {"methodBody": ["METHOD_START", "{", "return   execute ( defaultSession ,    sql )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "com.facebook.presto.tests.AbstractTestingPrestoClient"}, {"methodBody": ["METHOD_START", "{", "return   defaultSession ;", "}", "METHOD_END"], "methodName": ["getDefaultSession"], "fileName": "com.facebook.presto.tests.AbstractTestingPrestoClient"}, {"methodBody": ["METHOD_START", "{", "return   prestoServer ;", "}", "METHOD_END"], "methodName": ["getServer"], "fileName": "com.facebook.presto.tests.AbstractTestingPrestoClient"}, {"methodBody": ["METHOD_START", "{", "return   ImmutableList . copyOf ( transform ( columns ,    columnTypeGetter (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getTypes"], "fileName": "com.facebook.presto.tests.AbstractTestingPrestoClient"}, {"methodBody": ["METHOD_START", "{", "return   transaction ( prestoServer . getTransactionManager (  )  ,    prestoServer . getAccessControl (  )  )  . readOnly (  )  . execute ( session ,     (    transactionSession )     -  >     {", "return   prestoServer . getMetadata (  )  . listTables ( transactionSession ,    new   QualifiedTablePrefix ( catalog ,    schema )  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["listTables"], "fileName": "com.facebook.presto.tests.AbstractTestingPrestoClient"}, {"methodBody": ["METHOD_START", "{", "return   transaction ( prestoServer . getTransactionManager (  )  ,    prestoServer . getAccessControl (  )  )  . readOnly (  )  . execute ( session ,     (    transactionSession )     -  >     {", "return   MetadataUtil . tableExists ( prestoServer . getMetadata (  )  ,    transactionSession ,    table )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["tableExists"], "fileName": "com.facebook.presto.tests.AbstractTestingPrestoClient"}, {"methodBody": ["METHOD_START", "{", "Builder < String ,    String >    properties    =    ImmutableMap . builder (  )  ;", "properties . putAll ( session . getSystemProperties (  )  )  ;", "for    ( Map . Entry < String ,    Map < String ,    String >  >    connectorProperties    :    session . getUnprocessedCatalogProperties (  )  . entrySet (  )  )     {", "for    ( Map . Entry < String ,    String >    entry    :    connectorProperties . getValue (  )  . entrySet (  )  )     {", "properties . put (  (  (  ( connectorProperties . getKey (  )  )     +     \"  .  \"  )     +     ( entry . getKey (  )  )  )  ,    entry . getValue (  )  )  ;", "}", "}", "Builder < String ,    String >    resourceEstimates    =    ImmutableMap . builder (  )  ;", "ResourceEstimates   estimates    =    session . getResourceEstimates (  )  ;", "estimates . getExecutionTime (  )  . ifPresent (  (    e )     -  >    resourceEstimates . put ( EXECUTION _ TIME ,    e . toString (  )  )  )  ;", "estimates . getCpuTime (  )  . ifPresent (  (    e )     -  >    resourceEstimates . put ( CPU _ TIME ,    e . toString (  )  )  )  ;", "estimates . getPeakMemory (  )  . ifPresent (  (    e )     -  >    resourceEstimates . put ( PEAK _ MEMORY ,    e . toString (  )  )  )  ;", "return   new   client . ClientSession ( server ,    session . getIdentity (  )  . getUser (  )  ,    session . getSource (  )  . orElse ( null )  ,    session . getClientTags (  )  ,    session . getClientInfo (  )  . orElse ( null )  ,    session . getCatalog (  )  . orElse ( null )  ,    session . getSchema (  )  . orElse ( null )  ,    session . getTimeZoneKey (  )  . getId (  )  ,    session . getLocale (  )  ,    resourceEstimates . build (  )  ,    properties . build (  )  ,    session . getPreparedStatements (  )  ,    session . getTransactionId (  )  . map ( Object :  : toString )  . orElse ( null )  ,    clientRequestTimeout )  ;", "}", "METHOD_END"], "methodName": ["toClientSession"], "fileName": "com.facebook.presto.tests.AbstractTestingPrestoClient"}, {"methodBody": ["METHOD_START", "{", "HyperLogLog   hll    =    HyperLogLog . newInstance (  4  0  9  6  )  ;", "hll . add ( value )  ;", "return   hll . serialize (  )  ;", "}", "METHOD_END"], "methodName": ["createHll"], "fileName": "com.facebook.presto.tests.CreateHll"}, {"methodBody": ["METHOD_START", "{", "return   x    +    y ;", "}", "METHOD_END"], "methodName": ["customAdd"], "fileName": "com.facebook.presto.tests.CustomAdd"}, {"methodBody": ["METHOD_START", "{", "if    ( state . isNull (  )  )     {", "state . setNull ( false )  ;", "state . setLong ( otherState . getLong (  )  )  ;", "return ;", "}", "state . setLong (  (  ( state . getLong (  )  )     +     ( otherState . getLong (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["combine"], "fileName": "com.facebook.presto.tests.CustomSum"}, {"methodBody": ["METHOD_START", "{", "state . setLong (  (  ( state . getLong (  )  )     +    value )  )  ;", "state . setNull ( false )  ;", "}", "METHOD_END"], "methodName": ["input"], "fileName": "com.facebook.presto.tests.CustomSum"}, {"methodBody": ["METHOD_START", "{", "NullableLongState . write ( BIGINT ,    state ,    out )  ;", "}", "METHOD_END"], "methodName": ["output"], "fileName": "com.facebook.presto.tests.CustomSum"}, {"methodBody": ["METHOD_START", "{", "for    ( TestingPrestoServer   server    :    servers )     {", "AllNodes   allNodes    =    server . refreshNodes (  )  ;", "if    (  (  !  ( allNodes . getInactiveNodes (  )  . isEmpty (  )  )  )     |  |     (  ( allNodes . getActiveNodes (  )  . size (  )  )     !  =     ( servers . size (  )  )  )  )     {", "return   false ;", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["allNodesGloballyVisible"], "fileName": "com.facebook.presto.tests.DistributedQueryRunner"}, {"methodBody": ["METHOD_START", "{", "return   new   DistributedQueryRunner . Builder ( defaultSession )  ;", "}", "METHOD_END"], "methodName": ["builder"], "fileName": "com.facebook.presto.tests.DistributedQueryRunner"}, {"methodBody": ["METHOD_START", "{", "QueryManager   queryManager    =    coordinator . getQueryManager (  )  ;", "for    ( QueryInfo   queryInfo    :    queryManager . getAllQueryInfo (  )  )     {", "if    (  !  ( queryInfo . getState (  )  . isDone (  )  )  )     {", "queryManager . cancelQuery ( queryInfo . getQueryId (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["cancelAllQueries"], "fileName": "com.facebook.presto.tests.DistributedQueryRunner"}, {"methodBody": ["METHOD_START", "{", "try    {", "closeable . close (  )  ;", "}    catch    ( Exception   e )     {", "throwIfUnchecked ( e )  ;", "throw   new   timeException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["closeUnchecked"], "fileName": "com.facebook.presto.tests.DistributedQueryRunner"}, {"methodBody": ["METHOD_START", "{", "createCatalog ( catalogName ,    connectorName ,    ImmutableMap . of (  )  )  ;", "}", "METHOD_END"], "methodName": ["createCatalog"], "fileName": "com.facebook.presto.tests.DistributedQueryRunner"}, {"methodBody": ["METHOD_START", "{", "long   start    =    System . nanoTime (  )  ;", "Builder < String ,    String >    propertiesBuilder    =    ImmutableMap .  < String ,    String > builder (  )  . put (  \" query . client . timeout \"  ,     \"  1  0 m \"  )  . put (  \" exchange . http - client . idle - timeout \"  ,     \"  1 h \"  )  . put (  \" task . max - index - memory \"  ,     \"  1  6 kB \"  )  . put (  \" datasources \"  ,     \" system \"  )  . put (  \" distributed - index - joins - enabled \"  ,     \" true \"  )  ;", "if    ( coordinator )     {", "propertiesBuilder . put (  \" node - scheduler . include - coordinator \"  ,     \" true \"  )  ;", "propertiesBuilder . put (  \" distributed - joins - enabled \"  ,     \" true \"  )  ;", "}", "HashMap < String ,    String >    properties    =    new   HashMap ( propertiesBuilder . build (  )  )  ;", "properties . putAll ( extraProperties )  ;", "TestingPrestoServer   server    =    new   TestingPrestoServer ( coordinator ,    properties ,    environment ,    discoveryUri ,    parserOptions ,    ImmutableList . of (  )  )  ;", ". log . info (  \" Created   TestingPrestoServer   in    % s \"  ,    nanosSince ( start )  . convertToMostSuccinctTimeUnit (  )  )  ;", "return   server ;", "}", "METHOD_END"], "methodName": ["createTestingPrestoServer"], "fileName": "com.facebook.presto.tests.DistributedQueryRunner"}, {"methodBody": ["METHOD_START", "{", "lock . readLock (  )  . lock (  )  ;", "try    {", "return   Client . execute ( session ,    sql )  ;", "}    finally    {", "lock . readLock (  )  . unlock (  )  ;", "}", "}", "METHOD_END"], "methodName": ["executeWithQueryId"], "fileName": "com.facebook.presto.tests.DistributedQueryRunner"}, {"methodBody": ["METHOD_START", "{", "return   prestoClient ;", "}", "METHOD_END"], "methodName": ["getClient"], "fileName": "com.facebook.presto.tests.DistributedQueryRunner"}, {"methodBody": ["METHOD_START", "{", "return   coordinator ;", "}", "METHOD_END"], "methodName": ["getCoordinator"], "fileName": "com.facebook.presto.tests.DistributedQueryRunner"}, {"methodBody": ["METHOD_START", "{", "return   coordinator . getQueryManager (  )  . getQueryInfo ( queryId )  ;", "}", "METHOD_END"], "methodName": ["getQueryInfo"], "fileName": "com.facebook.presto.tests.DistributedQueryRunner"}, {"methodBody": ["METHOD_START", "{", "return   coordinator . getQueryManager (  )  . getQueryPlan ( queryId )  ;", "}", "METHOD_END"], "methodName": ["getQueryPlan"], "fileName": "com.facebook.presto.tests.DistributedQueryRunner"}, {"methodBody": ["METHOD_START", "{", "return   ImmutableList . copyOf ( servers )  ;", "}", "METHOD_END"], "methodName": ["getServers"], "fileName": "com.facebook.presto.tests.DistributedQueryRunner"}, {"methodBody": ["METHOD_START", "{", "for    ( TestingPrestoServer   server    :    servers )     {", "server . refreshNodes (  )  ;", "Set < Node >    activeNodesWithConnector    =    server . getActiveNodesWithConnector ( connectorId )  ;", "if    (  ( activeNodesWithConnector . size (  )  )     !  =     ( servers . size (  )  )  )     {", "return   false ;", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["isConnectionVisibleToAllNodes"], "fileName": "com.facebook.presto.tests.DistributedQueryRunner"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   materializedRows    =    new   MaterializedResult ( handle . setSqlParser ( new   H 2 QueryRunner . RawSqlParser (  )  )  . setTemplateEngine (  (    template ,    context )     -  >    template )  . createQuery ( sql )  . map ( H 2 QueryRunner . rowMapper ( resultTypes )  )  . list (  )  ,    resultTypes )  ;", "return   materializedRows ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "com.facebook.presto.tests.H2QueryRunner"}, {"methodBody": ["METHOD_START", "{", "List < ColumnMetadata >    columns    =    tableMetadata . getColumns (  )  . stream (  )  . filter (  (    columnMetadata )     -  >     !  ( columnMetadata . isHidden (  )  )  )  . collect ( toImmutableList (  )  )  ;", "String   vars    =    Joiner . on (  '  ,  '  )  . join ( Collections . nCopies ( columns . size (  )  ,     \"  ?  \"  )  )  ;", "String   sql    =    String . format (  \" INSERT   INTO    % s   VALUES    (  % s )  \"  ,    tableMetadata . getTable (  )  . getTableName (  )  ,    vars )  ;", "RecordCursor   cursor    =    data . cursor (  )  ;", "while    ( true )     {", "PreparedBatch   batch    =    handle . prepareBatch ( sql )  ;", "for    ( int   row    =     0  ;    row    <     1  0  0  0  ;    row +  +  )     {", "if    (  !  ( cursor . advanceNextPosition (  )  )  )     {", "if    (  ( batch . size (  )  )     >     0  )     {", "batch . execute (  )  ;", "}", "return ;", "}", "for    ( int   column    =     0  ;    column    <     ( columns . size (  )  )  ;    column +  +  )     {", "Type   type    =    columns . get ( column )  . getType (  )  ;", "if    ( BOOLEAN . equals ( type )  )     {", "batch . bind ( column ,    cursor . getBoolean ( column )  )  ;", "} else", "if    ( BIGINT . equals ( type )  )     {", "batch . bind ( column ,    cursor . getLong ( column )  )  ;", "} else", "if    ( INTEGER . equals ( type )  )     {", "batch . bind ( column ,     (  ( int )     ( cursor . getLong ( column )  )  )  )  ;", "} else", "if    ( DOUBLE . equals ( type )  )     {", "batch . bind ( column ,    cursor . getDouble ( column )  )  ;", "} else", "if    ( type   instanceof   spi . type . VarcharType )     {", "batch . bind ( column ,    cursor . getSlice ( column )  . toStringUtf 8  (  )  )  ;", "} else", "if    ( DATE . equals ( type )  )     {", "long   millisUtc    =    toMillis ( cursor . getLong ( column )  )  ;", "long   localMillis    =    DateTimeZone . UTC . getMillisKeepLocal ( getDefault (  )  ,    millisUtc )  ;", "batch . bind ( column ,    new   Date ( localMillis )  )  ;", "} else    {", "throw   new   IllegalArgumentException (  (  \" Unsupported   type    \"     +    type )  )  ;", "}", "}", "batch . add (  )  ;", "}", "batch . execute (  )  ;", "}", "}", "METHOD_END"], "methodName": ["insertRows"], "fileName": "com.facebook.presto.tests.H2QueryRunner"}, {"methodBody": ["METHOD_START", "{", "TpchTableHandle   tableHandle    =    tpchMetadata . getTableHandle ( null ,    new   com . facebook . presto . spi . SchemaTableName ( TINY _ SCHEMA _ NAME ,    tpchTable . getTableName (  )  )  )  ;", "H 2 QueryRunner . insertRows ( tpchMetadata . getTableMetadata ( null ,    tableHandle )  ,    handle ,    createTpchRecordSet ( tpchTable ,    tableHandle . getScaleFactor (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["insertRows"], "fileName": "com.facebook.presto.tests.H2QueryRunner"}, {"methodBody": ["METHOD_START", "{", "return   new   RowMapper < MaterializedRow >  (  )     {", "@ Override", "public   MaterializedRow   map ( ResultSet   resultSet ,    StatementContext   context )    throws   SQLException    {", "int   count    =    resultSet . getMetaData (  )  . getColumnCount (  )  ;", "checkArgument (  (  ( types . size (  )  )     =  =    count )  ,     \" type   does   not   match   result \"  )  ;", "List < Object >    row    =    new   ArrayList <  >  ( count )  ;", "for    ( int   i    =     1  ;    i    <  =    count ;    i +  +  )     {", "Type   type    =    types . get (  ( i    -     1  )  )  ;", "if    ( BOOLEAN . equals ( type )  )     {", "boolean   booleanValue    =    resultSet . getBoolean ( i )  ;", "if    ( resultSet . wasNull (  )  )     {", "row . add ( null )  ;", "} else    {", "row . add ( booleanValue )  ;", "}", "} else", "if    ( TINYINT . equals ( type )  )     {", "byte   byteValue    =    resultSet . getByte ( i )  ;", "if    ( resultSet . wasNull (  )  )     {", "row . add ( null )  ;", "} else    {", "row . add ( byteValue )  ;", "}", "} else", "if    ( SMALLINT . equals ( type )  )     {", "short   shortValue    =    resultSet . getShort ( i )  ;", "if    ( resultSet . wasNull (  )  )     {", "row . add ( null )  ;", "} else    {", "row . add ( shortValue )  ;", "}", "} else", "if    ( INTEGER . equals ( type )  )     {", "int   intValue    =    resultSet . getInt ( i )  ;", "if    ( resultSet . wasNull (  )  )     {", "row . add ( null )  ;", "} else    {", "row . add ( intValue )  ;", "}", "} else", "if    ( BIGINT . equals ( type )  )     {", "long   longValue    =    resultSet . getLong ( i )  ;", "if    ( resultSet . wasNull (  )  )     {", "row . add ( null )  ;", "} else    {", "row . add ( longValue )  ;", "}", "} else", "if    ( REAL . equals ( type )  )     {", "float   floatValue    =    resultSet . getFloat ( i )  ;", "if    ( resultSet . wasNull (  )  )     {", "row . add ( null )  ;", "} else    {", "row . add ( floatValue )  ;", "}", "} else", "if    ( DOUBLE . equals ( type )  )     {", "double   doubleValue    =    resultSet . getDouble ( i )  ;", "if    ( resultSet . wasNull (  )  )     {", "row . add ( null )  ;", "} else    {", "row . add ( doubleValue )  ;", "}", "} else", "if    ( isVarcharType ( type )  )     {", "String   stringValue    =    resultSet . getString ( i )  ;", "if    ( resultSet . wasNull (  )  )     {", "row . add ( null )  ;", "} else    {", "row . add ( stringValue )  ;", "}", "} else", "if    ( isCharType ( type )  )     {", "String   stringValue    =    resultSet . getString ( i )  ;", "if    ( resultSet . wasNull (  )  )     {", "row . add ( null )  ;", "} else    {", "row . add ( padEnd ( stringValue ,     (  ( spi . type . CharType )     ( type )  )  . getLength (  )  ,     '     '  )  )  ;", "}", "} else", "if    ( DATE . equals ( type )  )     {", "LocalDate   dateValue    =    resultSet . getObject ( i ,    class )  ;", "if    ( resultSet . wasNull (  )  )     {", "row . add ( null )  ;", "} else    {", "row . add ( dateValue )  ;", "}", "} else", "if    ( TIME . equals ( type )  )     {", "LocalTime   timeValue    =    resultSet . getObject ( i ,    class )  ;", "if    ( resultSet . wasNull (  )  )     {", "row . add ( null )  ;", "} else    {", "row . add ( timeValue )  ;", "}", "} else", "if    ( TIME _ WITH _ TIME _ ZONE . equals ( type )  )     {", "throw   new   UnsupportedOperationException (  \" H 2    does   not   support   TIME   WITH   TIME   ZONE \"  )  ;", "} else", "if    ( TIMESTAMP . equals ( type )  )     {", "LocalDateTime   timestampValue ;", "try    {", "timestampValue    =    resultSet . getObject ( i ,    class )  ;", "}    catch    ( SQLException   first )     {", "try    {", "timestampValue    =    ofNullable ( resultSet . getObject ( i ,    class )  )  . map ( LocalDate :  : atStartOfDay )  . orElse ( null )  ;", "}    catch    ( RuntimeException   e )     {", "first . addSuppressed ( e )  ;", "throw   first ;", "}", "}", "if    ( resultSet . wasNull (  )  )     {", "row . add ( null )  ;", "} else    {", "row . add ( timestampValue )  ;", "}", "} else", "if    ( TIMESTAMP _ WITH _ TIME _ ZONE . equals ( type )  )     {", "throw   new   UnsupportedOperationException (  )  ;", "} else", "if    ( UNKNOWN . equals ( type )  )     {", "Object   objectValue    =    resultSet . getObject ( i )  ;", "checkState ( resultSet . wasNull (  )  ,     \" Expected   a   null   value ,    but   got    % s \"  ,    objectValue )  ;", "row . add ( null )  ;", "} else", "if    ( type   instanceof   spi . type . DecimalType )     {", "spi . type . DecimalType   decimalType    =     (  ( spi . type . DecimalType )     ( type )  )  ;", "BigDecimal   decimalValue    =    resultSet . getBigDecimal ( i )  ;", "if    ( resultSet . wasNull (  )  )     {", "row . add ( null )  ;", "} else    {", "row . add ( decimalValue . setScale ( decimalType . getScale (  )  ,    ROUND _ HALF _ UP )  . round ( new   MathContext ( decimalType . getPrecision (  )  )  )  )  ;", "}", "} else", "if    ( type   instanceof   spi . type . ArrayType )     {", "Array   array    =    resultSet . getArray ( i )  ;", "if    ( resultSet . wasNull (  )  )     {", "row . add ( null )  ;", "} else    {", "row . add ( newArrayList (  (  ( Object [  ]  )     ( array . getArray (  )  )  )  )  )  ;", "}", "} else    {", "throw   new   AssertionError (  (  \" unhandled   type :     \"     +    type )  )  ;", "}", "}", "return   new   MaterializedRow ( MaterializedResult . DEFAULT _ PRECISION ,    row )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["rowMapper"], "fileName": "com.facebook.presto.tests.H2QueryRunner"}, {"methodBody": ["METHOD_START", "{", "IntStream . range (  1  ,    PlanDeterminismChecker . MINIMUM _ SUBSEQUENT _ SAME _ PLANS )  . mapToObj (  (    attempt )     -  >    getPlanText ( session ,    sql )  )  . map ( planEquivalenceFunction )  . reduce (  (    previous ,    current )     -  >     {", "assertEquals ( previous ,    current )  ;", "return   current ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["checkPlanIsDeterministic"], "fileName": "com.facebook.presto.tests.PlanDeterminismChecker"}, {"methodBody": ["METHOD_START", "{", "checkPlanIsDeterministic ( localQueryRunner . getDefaultSession (  )  ,    sql )  ;", "}", "METHOD_END"], "methodName": ["checkPlanIsDeterministic"], "fileName": "com.facebook.presto.tests.PlanDeterminismChecker"}, {"methodBody": ["METHOD_START", "{", "return   localQueryRunner . inTransaction ( session ,     (    transactionSession )     -  >     {", "plan    =    localQueryRunner . create ( transactionSession ,    sql ,    Logicalner . Stage . OPTIMIZED _ AND _ VALIDATED )  ;", "return   Printer . textLogical ( plan . getRoot (  )  ,    plan . getTypes (  )  ,    localQueryRunner . getMetadata (  )  . getFunctionRegistry (  )  ,    localQueryRunner . getStatsCalculator (  )  ,    localQueryRunner . getCostCalculator (  )  ,    transactionSession )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["getPlanText"], "fileName": "com.facebook.presto.tests.PlanDeterminismChecker"}, {"methodBody": ["METHOD_START", "{", "for    ( MaterializedRow   row    :    expectedSubset . getMaterializedRows (  )  )     {", "if    (  !  ( all . getMaterializedRows (  )  . contains ( row )  )  )     {", "fail ( String . format (  \" expected   row   missing :     % s \\ nAll    % s   rows :  \\ n             % s \\ nExpected   subset    % s   rows :  \\ n             % s \\ n \"  ,    row ,    all . getMaterializedRows (  )  . size (  )  ,    Joiner . on (  \"  \\ n             \"  )  . join ( Iterables . limit ( all ,     1  0  0  )  )  ,    expectedSubset . getMaterializedRows (  )  . size (  )  ,    Joiner . on (  \"  \\ n             \"  )  . join ( Iterables . limit ( expectedSubset ,     1  0  0  )  )  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["assertContains"], "fileName": "com.facebook.presto.tests.QueryAssertions"}, {"methodBody": ["METHOD_START", "{", "long   start    =    System . nanoTime (  )  ;", "while    (  !  ( Thread . currentThread (  )  . isInterrupted (  )  )  )     {", "try    {", ". assertContains ( all . get (  )  ,    expectedSubset )  ;", "return ;", "}    catch    ( AssertionError   e )     {", "if    (  ( nanosSince ( start )  . compareTo ( timeout )  )     >     0  )     {", "throw   e ;", "}", "}", "sleepUninterruptibly (  5  0  ,    TimeUnit . MILLISECONDS )  ;", "}", "}", "METHOD_END"], "methodName": ["assertContainsEventually"], "fileName": "com.facebook.presto.tests.QueryAssertions"}, {"methodBody": ["METHOD_START", "{", "QueryAssertions . assertEqualsIgnoreOrder ( actual ,    expected ,    null )  ;", "}", "METHOD_END"], "methodName": ["assertEqualsIgnoreOrder"], "fileName": "com.facebook.presto.tests.QueryAssertions"}, {"methodBody": ["METHOD_START", "{", "assertNotNull ( actual ,     \" actual   is   null \"  )  ;", "assertNotNull ( expected ,     \" expected   is   null \"  )  ;", "ImmutableMultiset <  ?  >    actualSet    =    ImmutableMultiset . copyOf ( actual )  ;", "ImmutableMultiset <  ?  >    expectedSet    =    ImmutableMultiset . copyOf ( expected )  ;", "if    (  !  ( actualSet . equals ( expectedSet )  )  )     {", "Multiset <  ?  >    unexpectedRows    =    Multisets . difference ( actualSet ,    expectedSet )  ;", "Multiset <  ?  >    missingRows    =    Multisets . difference ( expectedSet ,    actualSet )  ;", "int   limit    =     1  0  0  ;", "fail ( String . format (  (  \"  % snot   equal \\ n \"     +     (  \" Actual   rows    ( up   to    % s   of    % s   extra   rows   shown ,     % s   matching   and   extra   rows   in   total )  :  \\ n             % s \\ n \"     +     \" Expected   rows    ( up   to    % s   of    % s   missing   rows   shown ,     % s   matching   and   missing   rows   in   total )  :  \\ n             % s \\ n \"  )  )  ,     ( message    =  =    null    ?     \"  \"     :    message    +     \"  \\ n \"  )  ,    limit ,    unexpectedRows . size (  )  ,    actualSet . size (  )  ,    Joiner . on (  \"  \\ n             \"  )  . join ( Iterables . limit ( unexpectedRows ,    limit )  )  ,    limit ,    missingRows . size (  )  ,    expectedSet . size (  )  ,    Joiner . on (  \"  \\ n             \"  )  . join ( Iterables . limit ( missingRows ,    limit )  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertEqualsIgnoreOrder"], "fileName": "com.facebook.presto.tests.QueryAssertions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( nullToEmpty ( exception . getMessage (  )  )  . matches ( regex )  )  )     {", "fail ( String . format (  \" Expected   exception   message    '  % s '    to   match    '  % s '    for   query :     % s \"  ,    exception . getMessage (  )  ,    regex ,    sql )  ,    exception )  ;", "}", "}", "METHOD_END"], "methodName": ["assertExceptionMessage"], "fileName": "com.facebook.presto.tests.QueryAssertions"}, {"methodBody": ["METHOD_START", "{", "long   start    =    System . nanoTime (  )  ;", "MaterializedResult   actualResults    =    null ;", "try    {", "actualResults    =    actualQueryRunner . execute ( session ,    actual )  . toTestTypes (  )  ;", "}    catch    ( RuntimeException   ex )     {", "fail (  (  \" Execution   of    ' actual '    query   failed :     \"     +    actual )  ,    ex )  ;", "}", "Duration   actualTime    =    nanosSince ( start )  ;", "long   expectedStart    =    System . nanoTime (  )  ;", "MaterializedResult   expectedResults    =    null ;", "try    {", "expectedResults    =    h 2 QueryRunner . execute ( session ,    expected ,    actualResults . getTypes (  )  )  ;", "}    catch    ( RuntimeException   ex )     {", "fail (  (  \" Execution   of    ' expected '    query   failed :     \"     +    expected )  ,    ex )  ;", "}", ". log . info (  \" FINISHED   in   presto :     % s ,    h 2  :     % s ,    total :     % s \"  ,    actualTime ,    nanosSince ( expectedStart )  ,    nanosSince ( start )  )  ;", "if    (  ( actualResults . getUpdateType (  )  . isPresent (  )  )     |  |     ( actualResults . getUpdateCount (  )  . isPresent (  )  )  )     {", "if    (  !  ( actualResults . getUpdateType (  )  . isPresent (  )  )  )     {", "fail (  (  \" update   count   present   without   update   type   for   query :     \\ n \"     +    actual )  )  ;", "}", "if    (  ! compareUpdate )     {", "fail (  (  \" update   type   should   not   be   present    ( use   assertUpdate )    for   query :     \\ n \"     +    actual )  )  ;", "}", "}", "List < MaterializedRow >    actualRows    =    actualResults . getMaterializedRows (  )  ;", "List < MaterializedRow >    expectedRows    =    expectedResults . getMaterializedRows (  )  ;", "if    ( compareUpdate )     {", "if    (  !  ( actualResults . getUpdateType (  )  . isPresent (  )  )  )     {", "fail (  (  \" update   type   not   present   for   query :     \\ n \"     +    actual )  )  ;", "}", "if    (  !  ( actualResults . getUpdateCount (  )  . isPresent (  )  )  )     {", "fail (  (  \" update   count   not   present   for   query :     \\ n \"     +    actual )  )  ;", "}", "assertEquals ( actualRows . size (  )  ,     1  ,     (  (  \" For   query :     \\ n    \"     +    actual )     +     \"  \\ n :  \"  )  )  ;", "assertEquals ( expectedRows . size (  )  ,     1  ,     (  (  \" For   query :     \\ n    \"     +    actual )     +     \"  \\ n :  \"  )  )  ;", "MaterializedRow   row    =    expectedRows . get (  0  )  ;", "assertEquals ( row . getFieldCount (  )  ,     1  ,     (  (  \" For   query :     \\ n    \"     +    actual )     +     \"  \\ n :  \"  )  )  ;", "assertEquals ( row . getField (  0  )  ,    actualResults . getUpdateCount (  )  . getAsLong (  )  ,     (  (  \" For   query :     \\ n    \"     +    actual )     +     \"  \\ n :  \"  )  )  ;", "}", "if    ( ensureOrdering )     {", "if    (  !  ( actualRows . equals ( expectedRows )  )  )     {", "assertEquals ( actualRows ,    expectedRows ,     (  (  \" For   query :     \\ n    \"     +    actual )     +     \"  \\ n :  \"  )  )  ;", "}", "} else    {", ". assertEqualsIgnoreOrder ( actualRows ,    expectedRows ,     (  \" For   query :     \\ n    \"     +    actual )  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertQuery"], "fileName": "com.facebook.presto.tests.QueryAssertions"}, {"methodBody": ["METHOD_START", "{", "try    {", "queryRunner . execute ( session ,    sql )  ;", "fail ( String . format (  \" Expected   query   to   fail :     % s \"  ,    sql )  )  ;", "}    catch    ( RuntimeException   ex )     {", ". assertExceptionMessage ( sql ,    ex ,    expectedMessageRegExp )  ;", "}", "}", "METHOD_END"], "methodName": ["assertQueryFails"], "fileName": "com.facebook.presto.tests.QueryAssertions"}, {"methodBody": ["METHOD_START", "{", "long   start    =    System . nanoTime (  )  ;", "while    (  !  ( Thread . currentThread (  )  . isInterrupted (  )  )  )     {", "try    {", ". assertQueryFails ( queryRunner ,    session ,    sql ,    expectedMessageRegExp )  ;", "return ;", "}    catch    ( AssertionError   e )     {", "if    (  ( nanosSince ( start )  . compareTo ( timeout )  )     >     0  )     {", "throw   e ;", "}", "}", "sleepUninterruptibly (  5  0  ,    TimeUnit . MILLISECONDS )  ;", "}", "}", "METHOD_END"], "methodName": ["assertQueryFailsEventually"], "fileName": "com.facebook.presto.tests.QueryAssertions"}, {"methodBody": ["METHOD_START", "{", "try    {", "MaterializedResult   results    =    queryRunner . execute ( session ,    sql )  . toTestTypes (  )  ;", "aNotNull ( results )  ;", "aEquals ( results . getRowCount (  )  ,     0  )  ;", "}    catch    ( RuntimeException   ex )     {", "fail (  (  \" Execution   of   query   failed :     \"     +    sql )  ,    ex )  ;", "}", "}", "METHOD_END"], "methodName": ["assertQueryReturnsEmptyResult"], "fileName": "com.facebook.presto.tests.QueryAssertions"}, {"methodBody": ["METHOD_START", "{", "long   start    =    System . nanoTime (  )  ;", "MaterializedResult   results    =    queryRunner . execute ( session ,    sql )  ;", ". log . info (  \" FINISHED   in   presto :     % s \"  ,    nanosSince ( start )  )  ;", "if    (  !  ( results . getUpdateType (  )  . isPresent (  )  )  )     {", "fail (  \" update   type   is   not   set \"  )  ;", "}", "if    ( results . getUpdateCount (  )  . isPresent (  )  )     {", "if    (  !  ( count . isPresent (  )  )  )     {", "fail (  \" update   count   should   not   be   present \"  )  ;", "}", "assertEquals ( results . getUpdateCount (  )  . getAsLong (  )  ,    count . getAsLong (  )  ,     \" update   count \"  )  ;", "} else", "if    ( count . isPresent (  )  )     {", "fail (  \" update   count   is   not   present \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertUpdate"], "fileName": "com.facebook.presto.tests.QueryAssertions"}, {"methodBody": ["METHOD_START", "{", "long   start    =    System . nanoTime (  )  ;", ". log . info (  \" Running   import   for    % s \"  ,    table . getObjectName (  )  )  ;", "@ Language (  \" SQL \"  )", "String   sql    =    String . format (  \" CREATE   TABLE    % s   AS   SELECT    *    FROM    % s \"  ,    table . getObjectName (  )  ,    table )  ;", "long   rows    =     (  ( Long )     ( queryRunner . execute ( session ,    sql )  . getMaterializedRows (  )  . get (  0  )  . getField (  0  )  )  )  ;", ". log . info (  \" Imported    % s   rows   for    % s   in    % s \"  ,    rows ,    table . getObjectName (  )  ,    nanosSince ( start )  . convertToMostSuccinctTimeUnit (  )  )  ;", "}", "METHOD_END"], "methodName": ["copyTable"], "fileName": "com.facebook.presto.tests.QueryAssertions"}, {"methodBody": ["METHOD_START", "{", "QualifiedObjectName   table    =    new   QualifiedObjectName ( sourceCatalog ,    sourceSchema ,    sourceTable )  ;", ". copyTable ( queryRunner ,    table ,    session )  ;", "}", "METHOD_END"], "methodName": ["copyTable"], "fileName": "com.facebook.presto.tests.QueryAssertions"}, {"methodBody": ["METHOD_START", "{", "QueryAssertions . log . info (  \" Loading   data   from    % s .  % s .  .  .  \"  ,    sourceCatalog ,    sourceSchema )  ;", "long   startTime    =    System . nanoTime (  )  ;", "for    ( TpchTable <  ?  >    table    :    tables )     {", "QueryAssertions . copyTable ( queryRunner ,    sourceCatalog ,    sourceSchema ,    table . getTableName (  )  . toLowerCase ( Locale . ENGLISH )  ,    session )  ;", "}", "QueryAssertions . log . info (  \" Loading   from    % s .  % s   complete   in    % s \"  ,    sourceCatalog ,    sourceSchema ,    nanosSince ( startTime )  . toString ( TimeUnit . SECONDS )  )  ;", "}", "METHOD_END"], "methodName": ["copyTpchTables"], "fileName": "com.facebook.presto.tests.QueryAssertions"}, {"methodBody": ["METHOD_START", "{", "return   queryId ;", "}", "METHOD_END"], "methodName": ["getQueryId"], "fileName": "com.facebook.presto.tests.ResultWithQueryId"}, {"methodBody": ["METHOD_START", "{", "return   result ;", "}", "METHOD_END"], "methodName": ["getResult"], "fileName": "com.facebook.presto.tests.ResultWithQueryId"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["setUpdateCount"], "fileName": "com.facebook.presto.tests.ResultsSession"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["setUpdateType"], "fileName": "com.facebook.presto.tests.ResultsSession"}, {"methodBody": ["METHOD_START", "{", "createCatalog ( catalogName ,    connectorName ,    ImmutableMap . of (  )  )  ;", "}", "METHOD_END"], "methodName": ["createCatalog"], "fileName": "com.facebook.presto.tests.StandaloneQueryRunner"}, {"methodBody": ["METHOD_START", "{", "ConnectorId   connectorId    =    server . createCatalog ( catalogName ,    connectorName ,    properties )  ;", "refreshNodes ( connectorId )  ;", "}", "METHOD_END"], "methodName": ["createCatalog"], "fileName": "com.facebook.presto.tests.StandaloneQueryRunner"}, {"methodBody": ["METHOD_START", "{", "Builder < String ,    String >    properties    =    ImmutableMap .  < String ,    String > builder (  )  . put (  \" query . client . timeout \"  ,     \"  1  0 m \"  )  . put (  \" exchange . http - client . idle - timeout \"  ,     \"  1 h \"  )  . put (  \" node - scheduler . min - candidates \"  ,     \"  1  \"  )  . put (  \" datasources \"  ,     \" system \"  )  ;", "return   new   server . testing . TestingPrestoServer ( true ,    properties . build (  )  ,    null ,    null ,    new   SqlParserOptions (  )  ,    ImmutableList . of (  )  )  ;", "}", "METHOD_END"], "methodName": ["createTestingPrestoServer"], "fileName": "com.facebook.presto.tests.StandaloneQueryRunner"}, {"methodBody": ["METHOD_START", "{", "return   server ;", "}", "METHOD_END"], "methodName": ["getServer"], "fileName": "com.facebook.presto.tests.StandaloneQueryRunner"}, {"methodBody": ["METHOD_START", "{", "server . installPlugin ( plugin )  ;", "}", "METHOD_END"], "methodName": ["installPlugin"], "fileName": "com.facebook.presto.tests.StandaloneQueryRunner"}, {"methodBody": ["METHOD_START", "{", "AllNodes   allNodes ;", "do    {", "try    {", "TimeUnit . MILLISECONDS . sleep (  1  0  )  ;", "}    catch    ( InterruptedException   e )     {", "Thread . currentThread (  )  . interrupt (  )  ;", "break ;", "}", "allNodes    =    server . refhNodes (  )  ;", "}    while    ( allNodes . getActiveNodes (  )  . isEmpty (  )     )  ;", "}", "METHOD_END"], "methodName": ["refreshNodes"], "fileName": "com.facebook.presto.tests.StandaloneQueryRunner"}, {"methodBody": ["METHOD_START", "{", "Set < Node >    activeNodesWithConnector ;", "do    {", "try    {", "TimeUnit . MILLISECONDS . sleep (  1  0  )  ;", "}    catch    ( InterruptedException   e )     {", "Thread . currentThread (  )  . interrupt (  )  ;", "break ;", "}", "activeNodesWithConnector    =    server . getActiveNodesWithConnector ( connectorId )  ;", "}    while    ( activeNodesWithConnector . isEmpty (  )     )  ;", "}", "METHOD_END"], "methodName": ["refreshNodes"], "fileName": "com.facebook.presto.tests.StandaloneQueryRunner"}, {"methodBody": ["METHOD_START", "{", "int   currentThreads    =    state . currentThreads . incrementAndGet (  )  ;", "try    {", "checkState (  ( currentThreads    =  =     1  )  ,     \"  % s   threads   concurrently   executing   a   s   function \"  ,    currentThreads )  ;", "if    (  ( ThreadLocalRandom . current (  )  . nextDouble (  )  )     <    sleepProbability )     {", "Thread . sleep ( sleepDurationMillis )  ;", "}", "return   a    +    b ;", "}    catch    ( InterruptedException   e )     {", "Thread . currentThread (  )  . interrupt (  )  ;", "throw   new   RuntimeException (  \" Interrupted \"  ,    e )  ;", "}    finally    {", "state . currentThreads . decrementAndGet (  )  ;", "}", "}", "METHOD_END"], "methodName": ["statefulSleepingSum"], "fileName": "com.facebook.presto.tests.StatefulSleepingSum"}, {"methodBody": ["METHOD_START", "{", "BlockBuilder   blockBuilder    =    elementType . createBlockBuilder ( null ,     1  0  2  4  )  ;", "for    ( Object   value    :    values )     {", "appendToBlockBuilder ( elementType ,    value ,    blockBuilder )  ;", "}", "ren   blockBuilder . build (  )  ;", "}", "METHOD_END"], "methodName": ["arrayBlockOf"], "fileName": "com.facebook.presto.tests.StructuralTestUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  ( block 1  . getPositionCount (  )  )     !  =     ( block 2  . getPositionCount (  )  )  )     {", "ren   false ;", "}", "for    ( int   i    =     0  ;    i    <     ( block 1  . getPositionCount (  )  )  ;    i +  +  )     {", "if    (  ( block 1  . isNull ( i )  )     !  =     ( block 2  . isNull ( i )  )  )     {", "ren   false ;", "}", "if    (  (  !  ( block 1  . isNull ( i )  )  )     &  &     (  !  ( elementType . equalTo ( block 1  ,    i ,    block 2  ,    i )  )  )  )     {", "ren   false ;", "}", "}", "ren   true ;", "}", "METHOD_END"], "methodName": ["arrayBlocksEqual"], "fileName": "com.facebook.presto.tests.StructuralTestUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( type . isShort (  )  )     {", "long   longDecimal    =    decimal . unscaledValue (  )  . longValue (  )  ;", "return    . arrayBlockOf ( type ,    longDecimal )  ;", "} else    {", "Slice   sliceDecimal    =    Decimals . encodeUnscaledValue ( decimal . unscaledValue (  )  )  ;", "return    . arrayBlockOf ( type ,    sliceDecimal )  ;", "}", "}", "METHOD_END"], "methodName": ["decimalArrayBlockOf"], "fileName": "com.facebook.presto.tests.StructuralTestUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( type . isShort (  )  )     {", "long   longDecimal    =    decimal . unscaledValue (  )  . longValue (  )  ;", "return    . mapBlockOf ( type ,    type ,    longDecimal ,    longDecimal )  ;", "} else    {", "Slice   sliceDecimal    =    Decimals . encodeUnscaledValue ( decimal . unscaledValue (  )  )  ;", "return    . mapBlockOf ( type ,    type ,    sliceDecimal ,    sliceDecimal )  ;", "}", "}", "METHOD_END"], "methodName": ["decimalMapBlockOf"], "fileName": "com.facebook.presto.tests.StructuralTestUtil"}, {"methodBody": ["METHOD_START", "{", "MapType   mapType    =    StructuralTestUtil . mapType ( keyType ,    valueType )  ;", "BlockBuilder   blockBuilder    =    mapType . createBlockBuilder ( null ,     1  0  )  ;", "BlockBuilder   singleMapBlockWriter    =    blockBuilder . beginBlockEntry (  )  ;", "appendToBlockBuilder ( keyType ,    key ,    singleMapBlockWriter )  ;", "appendToBlockBuilder ( valueType ,    value ,    singleMapBlockWriter )  ;", "blockBuilder . closeEntry (  )  ;", "return   mapType . getObject ( blockBuilder ,     0  )  ;", "}", "METHOD_END"], "methodName": ["mapBlockOf"], "fileName": "com.facebook.presto.tests.StructuralTestUtil"}, {"methodBody": ["METHOD_START", "{", "checkArgument (  (  ( keys . length )     =  =     ( values . length )  )  ,     \" keys / values   must   have   the   same   length \"  )  ;", "MapType   mapType    =     . mapType ( keyType ,    valueType )  ;", "BlockBuilder   blockBuilder    =    mapType . createBlockBuilder ( null ,     1  0  )  ;", "BlockBuilder   singleMapBlockWriter    =    blockBuilder . beginBlockEntry (  )  ;", "for    ( int   i    =     0  ;    i    <     ( keys . length )  ;    i +  +  )     {", "Object   key    =    keys [ i ]  ;", "Object   value    =    values [ i ]  ;", "appendToBlockBuilder ( keyType ,    key ,    singleMapBlockWriter )  ;", "appendToBlockBuilder ( valueType ,    value ,    singleMapBlockWriter )  ;", "}", "blockBuilder . closeEntry (  )  ;", "return   mapType . getObject ( blockBuilder ,     0  )  ;", "}", "METHOD_END"], "methodName": ["mapBlockOf"], "fileName": "com.facebook.presto.tests.StructuralTestUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  ( block 1  . getPositionCount (  )  )     !  =     ( block 2  . getPositionCount (  )  )  )     {", "ren   false ;", "}", "for    ( int   i    =     0  ;    i    <     ( block 1  . getPositionCount (  )  )  ;    i    +  =     2  )     {", "if    (  (  ( block 1  . isNull ( i )  )     !  =     ( block 2  . isNull ( i )  )  )     |  |     (  ( block 1  . isNull (  ( i    +     1  )  )  )     !  =     ( block 2  . isNull (  ( i    +     1  )  )  )  )  )     {", "ren   false ;", "}", "if    (  (  !  ( block 1  . isNull ( i )  )  )     &  &     (  !  ( keyType . equalTo ( block 1  ,    i ,    block 2  ,    i )  )  )  )     {", "ren   false ;", "}", "if    (  (  !  ( block 1  . isNull (  ( i    +     1  )  )  )  )     &  &     (  !  ( valueType . equalTo ( block 1  ,     ( i    +     1  )  ,    block 2  ,     ( i    +     1  )  )  )  )  )     {", "ren   false ;", "}", "}", "ren   true ;", "}", "METHOD_END"], "methodName": ["mapBlocksEqual"], "fileName": "com.facebook.presto.tests.StructuralTestUtil"}, {"methodBody": ["METHOD_START", "{", "return    (  ( MapType )     ( StructuralTestUtil . TYPE _ MANAGER . getParameterizedType ( MAP ,    ImmutableList . of ( TypeSignatureParameter . of ( keyType . getTypeSignature (  )  )  ,    TypeSignatureParameter . of ( valueType . getTypeSignature (  )  )  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["mapType"], "fileName": "com.facebook.presto.tests.StructuralTestUtil"}, {"methodBody": ["METHOD_START", "{", "RowType   rowType    =    RowType . anonymous ( parameterTypes )  ;", "BlockBuilder   blockBuilder    =    rowType . createBlockBuilder ( null ,     1  )  ;", "BlockBuilder   singleRowBlockWriter    =    blockBuilder . beginBlockEntry (  )  ;", "for    ( int   i    =     0  ;    i    <     ( values . length )  ;    i +  +  )     {", "appendToBlockBuilder ( parameterTypes . get ( i )  ,    values [ i ]  ,    singleRowBlockWriter )  ;", "}", "blockBuilder . closeEntry (  )  ;", "ren   rowType . getObject ( blockBuilder ,     0  )  ;", "}", "METHOD_END"], "methodName": ["rowBlockOf"], "fileName": "com.facebook.presto.tests.StructuralTestUtil"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    testSessionBuilder (  )  . setCatalog (  \" tpch _ indexed \"  )  . setSchema ( TINY _ SCHEMA _ NAME )  . build (  )  ;", "yRunner   queryRunner    =    new   yRunner ( session ,     3  )  ;", "queryRunner . installPlugin ( new   IndexedTpchPlugin ( AbstractTestIndexedQueries . INDEX _ SPEC )  )  ;", "queryRunner . createCatalog (  \" tpch _ indexed \"  ,     \" tpch _ indexed \"  )  ;", "return   queryRunner ;", "}", "METHOD_END"], "methodName": ["createQueryRunner"], "fileName": "com.facebook.presto.tests.TestDistributedQueriesIndexed"}, {"methodBody": ["METHOD_START", "{", "Session   defaultSession    =    testSessionBuilder (  )  . setCatalog (  \" tpch \"  )  . setSchema ( TINY _ SCHEMA _ NAME )  . setSystemProperty ( TASK _ CONCURRENCY ,     \"  2  \"  )  . setSystemProperty ( SPILL _ ENABLED ,     \" true \"  )  . setSystemProperty ( AGGREGATION _ OPERATOR _ UNSPILL _ MEMORY _ LIMIT ,     \"  1  2  8 kB \"  )  . build (  )  ;", "ImmutableMap < String ,    String >    extraProperties    =    ImmutableMap .  < String ,    String > builder (  )  . put (  \" experimental . spiller - spill - path \"  ,    Paths . get ( System . getProperty (  \" tmpdir \"  )  ,     \" presto \"  ,     \" spills \"  )  . toString (  )  )  . put (  \" experimental . spiller - max - used - space - threshold \"  ,     \"  1  .  0  \"  )  . put (  \" experimental . memory - revoking - threshold \"  ,     \"  0  .  0  \"  )  . put (  \" experimental . memory - revoking - target \"  ,     \"  0  .  0  \"  )  . build (  )  ;", "QueryRunner   queryRunner    =    new   QueryRunner ( defaultSession ,     2  ,    extraProperties )  ;", "try    {", "queryRunner . installPlugin ( new   TpchPlugin (  )  )  ;", "queryRunner . createCatalog (  \" tpch \"  ,     \" tpch \"  )  ;", "return   queryRunner ;", "}    catch    ( Exception   e )     {", "queryRunner . close (  )  ;", "throw   e ;", "}", "}", "METHOD_END"], "methodName": ["createQueryRunner"], "fileName": "com.facebook.presto.tests.TestDistributedSpilledQueries"}, {"methodBody": ["METHOD_START", "{", "executor . shutdownNow (  )  ;", "}", "METHOD_END"], "methodName": ["shutdown"], "fileName": "com.facebook.presto.tests.TestGracefulShutdown"}, {"methodBody": ["METHOD_START", "{", "try    ( DistributedQueryRunner   queryRunner    =    TestMemoryManager . createQueryRunner ( TestGracefulShutdown . TINY _ SESSION ,    ImmutableMap . of (  )  )  )     {", "TestingPrestoServer   coordinator    =    queryRunner . getServers (  )  . stream (  )  . filter ( TestingPrestoServer :  : isCoordinator )  . findFirst (  )  . get (  )  ;", "coordinator . getGracefulShutdownHandler (  )  . requestShutdown (  )  ;", "}", "}", "METHOD_END"], "methodName": ["testCoordinatorShutdown"], "fileName": "com.facebook.presto.tests.TestGracefulShutdown"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    properties    =    ImmutableMap .  < String ,    String > builder (  )  . put (  \" node - scheduler . include - coordinator \"  ,     \" false \"  )  . put (  \" shutdown . grace - period \"  ,     \"  1  0 s \"  )  . build (  )  ;", "try    ( DistributedQueryRunner   queryRunner    =    TestMemoryManager . createQueryRunner (  . TINY _ SESSION ,    properties )  )     {", "List < ListenableFuture <  ?  >  >    queryFutures    =    new   ArrayList <  >  (  )  ;", "for    ( int   i    =     0  ;    i    <     5  ;    i +  +  )     {", "queryFutures . add ( executor . submit (  (  )     -  >    queryRunner . execute (  \" SELECT   COUNT (  *  )  ,    clerk   FROM   orders   GROUP   BY   clerk \"  )  )  )  ;", "}", "TestingPrestoServer   worker    =    queryRunner . getServers (  )  . stream (  )  . filter (  (    server )     -  >     !  ( server . isCoordinator (  )  )  )  . findFirst (  )  . get (  )  ;", "TaskManager   taskManager    =    worker . getTaskManager (  )  ;", "while    ( taskManager . getAllTaskInfo (  )  . isEmpty (  )  )     {", "TimeUnit . MILLISECONDS . sleep (  5  0  0  )  ;", "}", "worker . getGracefulShutdownHandler (  )  . requestShutdown (  )  ;", "Futures . allAsList ( queryFutures )  . get (  )  ;", "List < QueryInfo >    queryInfos    =    queryRunner . getCoordinator (  )  . getQueryManager (  )  . getAllQueryInfo (  )  ;", "for    ( QueryInfo   info    :    queryInfos )     {", "assertEquals ( info . getState (  )  ,    QueryState . FINISHED )  ;", "}", "TestShutdownAction   shutdownAction    =     (  ( TestShutdownAction )     ( worker . getShutdownAction (  )  )  )  ;", "shutdownAction . waitForShutdownComplete (  . SHUTDOWN _ TIMEOUT _ MILLIS )  ;", "assertTrue ( shutdownAction . isWorkerShutdown (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testShutdown"], "fileName": "com.facebook.presto.tests.TestGracefulShutdown"}, {"methodBody": ["METHOD_START", "{", "h 2 QueryRunner . close (  )  ;", "h 2 QueryRunner    =    null ;", "}", "METHOD_END"], "methodName": ["close"], "fileName": "com.facebook.presto.tests.TestH2QueryRunner"}, {"methodBody": ["METHOD_START", "{", "h 2 QueryRunner    =    new   H 2 QueryRunner (  )  ;", "}", "METHOD_END"], "methodName": ["init"], "fileName": "com.facebook.presto.tests.TestH2QueryRunner"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   rows    =    h 2 QueryRunner . execute ( SessionTestUtils . TEST _ SESSION ,     \" SELECT   DATE    '  2  0  1  8  -  0  1  -  1  3  '  \"  ,    ImmutableList . of ( TIMESTAMP )  )  ;", "assertEquals ( rows . getOnlyValue (  )  ,    LocalDate . of (  2  0  1  8  ,     1  ,     1  3  )  . atStartOfDay (  )  )  ;", "LocalDate   forwardOffsetChangeAtMidnightInJvmZone    =    LocalDate . of (  1  9  8  6  ,     1  ,     1  )  ;", "checkState (  (  ( ZoneId . systemDefault (  )  . getRules (  )  . getValidOffsets ( forwardOffsetChangeAtMidnightInJvmZone . atStartOfDay (  )  )  . size (  )  )     =  =     0  )  ,     \" This   test   assumes   certain   JVM   time   zone \"  )  ;", "rows    =    h 2 QueryRunner . execute ( SessionTestUtils . TEST _ SESSION ,    DateTimeFormatter . ofPattern (  \"  ' SELECT   DATE    '  '  ' uuuu - MM - dd '  '  \"  )  . format ( forwardOffsetChangeAtMidnightInJvmZone )  ,    ImmutableList . of ( TIMESTAMP )  )  ;", "assertEquals ( rows . getOnlyValue (  )  ,    forwardOffsetChangeAtMidnightInJvmZone . atStartOfDay (  )  )  ;", "}", "METHOD_END"], "methodName": ["testDateToTimestampCoercion"], "fileName": "com.facebook.presto.tests.TestH2QueryRunner"}, {"methodBody": ["METHOD_START", "{", "Session   defaultSession    =    testSessionBuilder (  )  . setCatalog (  \" local \"  )  . setSchema ( TINY _ SCHEMA _ NAME )  . setSystemProperty ( SystemSessionProperties . PUSH _ PARTIAL _ AGGREGATION _ THROUGH _ JOIN ,     \" true \"  )  . build (  )  ;", "LocalQueryRunner   localQueryRunner    =    new   LocalQueryRunner ( defaultSession )  ;", "localQueryRunner . createCatalog ( defaultSession . getCatalog (  )  . get (  )  ,    new   TpchConnectorFactory (  1  )  ,    ImmutableMap . of (  )  )  ;", "localQueryRunner . getMetadata (  )  . addFunctions ( AbstractTestQueries . CUSTOM _ FUNCTIONS )  ;", "SessionPropertyManager   sessionPropertyManager    =    localQueryRunner . getMetadata (  )  . getSessionPropertyManager (  )  ;", "sessionPropertyManager . addSystemSessionProperties ( AbstractTestQueries . TEST _ SYSTEM _ PROPERTIES )  ;", "sessionPropertyManager . addConnectorSessionProperties ( new   connector . ConnectorId ( TESTING _ CATALOG )  ,    AbstractTestQueries . TEST _ CATALOG _ PROPERTIES )  ;", "return   localQueryRunner ;", "}", "METHOD_END"], "methodName": ["createLocalQueryRunner"], "fileName": "com.facebook.presto.tests.TestLocalQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   DECIMAL    '  1  .  0  '  \"  ,     \" SELECT   CAST (  '  1  .  0  '    AS   DECIMAL )  \"  )  ;", "assertQuery (  \" SELECT   DECIMAL    '  1  .  '  \"  ,     \" SELECT   CAST (  '  1  .  0  '    AS   DECIMAL )  \"  )  ;", "assertQuery (  \" SELECT   DECIMAL    '  0  .  1  '  \"  ,     \" SELECT   CAST (  '  0  .  1  '    AS   DECIMAL )  \"  )  ;", "assertQuery (  \" SELECT    1  .  0  \"  ,     \" SELECT   CAST (  '  1  .  0  '    AS   DECIMAL )  \"  )  ;", "assertQuery (  \" SELECT    1  .  \"  ,     \" SELECT   CAST (  '  1  .  0  '    AS   DECIMAL )  \"  )  ;", "assertQuery (  \" SELECT    0  .  1  \"  ,     \" SELECT   CAST (  '  0  .  1  '    AS   DECIMAL )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testDecimal"], "fileName": "com.facebook.presto.tests.TestLocalQueries"}, {"methodBody": ["METHOD_START", "{", "assertQueryFails (  \" SELECT    *  \"  ,     \" line    \\  \\ S +    SELECT    \\  \\  *    not   allowed   in   queries   without   FROM   clause \"  )  ;", "assertQueryFails (  \" SELECT    1  ,     '  2  '  ,     *  \"  ,     \" line    \\  \\ S +    SELECT    \\  \\  *    not   allowed   in   queries   without   FROM   clause \"  )  ;", "}", "METHOD_END"], "methodName": ["testRejectStarQueryWithoutFromRelation"], "fileName": "com.facebook.presto.tests.TestLocalQueries"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   result    =    computeActual (  \" SHOW   STATS   FOR   nation \"  )  ;", "MaterializedResult   expectedStatistics    =    resultBuilder ( getSession (  )  ,    VARCHAR ,    DOUBLE ,    DOUBLE ,    DOUBLE ,    DOUBLE ,    VARCHAR ,    VARCHAR )  . row (  \" regionkey \"  ,    null ,     5  .  0  ,     0  .  0  ,    null ,     \"  0  \"  ,     \"  4  \"  )  . row (  \" name \"  ,    null ,     2  5  .  0  ,     0  .  0  ,    null ,     \" ALGERIA \"  ,     \" VIETNAM \"  )  . row (  \" comment \"  ,    null ,     2  5  .  0  ,     0  .  0  ,    null ,     \"    haggle .    carefully   final   deposit .  .  .  \"  ,     \" y   final   packages .    slow   foxes   caj .  .  .  \"  )  . row (  \" nationkey \"  ,    null ,     2  5  .  0  ,     0  .  0  ,    null ,     \"  0  \"  ,     \"  2  4  \"  )  . row ( null ,    null ,    null ,    null ,     2  5  .  0  ,    null ,    null )  . build (  )  ;", "assertEquals ( result ,    expectedStatistics )  ;", "}", "METHOD_END"], "methodName": ["testShowColumnStats"], "fileName": "com.facebook.presto.tests.TestLocalQueries"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    *    FROM   nation \"  )  ;", "}", "METHOD_END"], "methodName": ["testSimpleQuery"], "fileName": "com.facebook.presto.tests.TestLocalQueryRunner"}, {"methodBody": ["METHOD_START", "{", "queryRunner    =    TpchQueryRunnerBuilder . builder (  )  . build (  )  ;", "queryRunner . installPlugin ( new   Plugin (  )     {", "@ Override", "public   Iterable < ConnectorFactory >    getConnectorFactories (  )     {", "return   ImmutableList . of ( new   MockConnectorFactory (  (    session )     -  >    ImmutableList . of (  \" UPPER _ CASE _ SCHEMA \"  )  ,     (    session ,    schemaNameOrNull )     -  >     {", "throw   new   UnsupportedOperationException (  )  ;", "}  ,     (    session ,    tableHandle )     -  >     {", "throw   new   UnsupportedOperationException (  )  ;", "}  )  )  ;", "}", "}  )  ;", "queryRunner . createCatalog (  \" upper _ case _ schema _ catalog \"  ,     \" mock \"  )  ;", "metadataManager    =     (  (  )     ( queryRunner . getMetadata (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.tests.TestMetadataManager"}, {"methodBody": ["METHOD_START", "{", "queryRunner . close (  )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.tests.TestMetadataManager"}, {"methodBody": ["METHOD_START", "{", "QueryManager   queryManager    =    queryRunner . getCoordinator (  )  . getQueryManager (  )  ;", "QueryId   queryId    =    queryManager . createQuery ( new   TestingSessionContext ( SessionTestUtils . TEST _ SESSION )  ,     \" SELECT    *    FROM   lineitem \"  )  . getQueryId (  )  ;", "while    ( true )     {", "QueryInfo   queryInfo    =    queryManager . getQueryInfo ( queryId )  ;", "if    ( queryInfo . getState (  )  . isDone (  )  )     {", "assertEquals ( queryInfo . getState (  )  ,    QueryState . FAILED )  ;", "throw   queryInfo . getFailureInfo (  )  . toException (  )  ;", "}", "if    (  ( queryInfo . getState (  )  )     =  =     ( QueryState . RUNNING )  )     {", "break ;", "}", "Thread . sleep (  1  0  0  )  ;", "}", "queryManager . cancelQuery ( queryId )  ;", "assertEquals ( m . getCatalogsByQueryId (  )  . size (  )  ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testMetadataIsClearedAfterQueryCanceled"], "fileName": "com.facebook.presto.tests.TestMetadataManager"}, {"methodBody": ["METHOD_START", "{", "@ Language (  \" SQL \"  )", "String   sql    =     \" SELECT   nationkey /  0    FROM   nation \"  ;", "try    {", "queryRunner . execute ( sql )  ;", "fail (  \" expected   exception \"  )  ;", "}    catch    ( Throwable   t )     {", "}", "assertEquals ( m . getCatalogsByQueryId (  )  . size (  )  ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testMetadataIsClearedAfterQueryFailed"], "fileName": "com.facebook.presto.tests.TestMetadataManager"}, {"methodBody": ["METHOD_START", "{", "@ Language (  \" SQL \"  )", "String   sql    =     \" SELECT    *    FROM   nation \"  ;", "queryRunner . execute ( sql )  ;", "assertEquals ( m . getCatalogsByQueryId (  )  . size (  )  ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testMetadataIsClearedAfterQueryFinished"], "fileName": "com.facebook.presto.tests.TestMetadataManager"}, {"methodBody": ["METHOD_START", "{", "TransactionBuilder . transaction ( queryRunner . getTransactionManager (  )  ,    queryRunner . getAccessControl (  )  )  . execute ( SessionTestUtils . TEST _ SESSION ,     (    transactionSession )     -  >     {", "List < String >    expectedSchemas    =    ImmutableList . of (  \" information _ schema \"  ,     \" upper _ case _ schema \"  )  ;", "assertEquals ( queryRunner . ge (  )  . listSchemaNames ( transactionSession ,     \" upper _ case _ schema _ catalog \"  )  ,    expectedSchemas )  ;", "return   null ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["testUpperCaseSchemaIsChangedToLowerCase"], "fileName": "com.facebook.presto.tests.TestMetadataManager"}, {"methodBody": ["METHOD_START", "{", "try    ( DistributedQueryRunner   queryRunner    =    TpchQueryRunnerBuilder . builder (  )  . setCoordinatorProperties ( ImmutableMap .  < String ,    String > builder (  )  . put (  \" query - manager . initialization - required - workers \"  ,     \"  5  \"  )  . put (  \" query - manager . initialization - timeout \"  ,     \"  1 ns \"  )  . build (  )  )  . setNodeCount (  4  )  . build (  )  )     {", "queryRunner . execute (  \" SELECT    1  \"  )  ;", "assertEquals ( queryRunner . getCoordinator (  )  . refreshNodes (  )  . getActiveNodes (  )  . size (  )  ,     4  )  ;", "}", "}", "METHOD_END"], "methodName": ["testInitializationTimeout"], "fileName": "com.facebook.presto.tests.TestMinWorkerRequirement"}, {"methodBody": ["METHOD_START", "{", "try    ( DistributedQueryRunner   queryRunner    =    TpchQueryRunnerBuilder . builder (  )  . setSingleCoordinatorProperty (  \" query - manager . initialization - required - workers \"  ,     \"  5  \"  )  . setNodeCount (  4  )  . build (  )  )     {", "queryRunner . execute (  \" SELECT    1  \"  )  ;", "fail (  \" Expected   exception   due   to   insufficient   active   worker   nodes \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["testInsufficientWorkerNodes"], "fileName": "com.facebook.presto.tests.TestMinWorkerRequirement"}, {"methodBody": ["METHOD_START", "{", "try    ( DistributedQueryRunner   queryRunner    =    TpchQueryRunnerBuilder . builder (  )  . setSingleExtraProperty (  \" node - scheduler . include - coordinator \"  ,     \" false \"  )  . setSingleCoordinatorProperty (  \" query - manager . initialization - required - workers \"  ,     \"  4  \"  )  . setNodeCount (  4  )  . build (  )  )     {", "queryRunner . execute (  \" SELECT    1  \"  )  ;", "fail (  \" Expected   exception   due   to   insufficient   active   worker   nodes \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["testInsufficientWorkerNodesWithCoordinatorExcluded"], "fileName": "com.facebook.presto.tests.TestMinWorkerRequirement"}, {"methodBody": ["METHOD_START", "{", "try    ( DistributedQueryRunner   queryRunner    =    TpchQueryRunnerBuilder . builder (  )  . setSingleCoordinatorProperty (  \" query - manager . initialization - required - workers \"  ,     \"  4  \"  )  . setNodeCount (  4  )  . build (  )  )     {", "queryRunner . execute (  \" SELECT    1  \"  )  ;", "assertEquals ( queryRunner . getCoordinator (  )  . refreshNodes (  )  . getActiveNodes (  )  . size (  )  ,     4  )  ;", "queryRunner . getServers (  )  . get (  0  )  . close (  )  ;", "assertEquals ( queryRunner . getCoordinator (  )  . refreshNodes (  )  . getActiveNodes (  )  . size (  )  ,     3  )  ;", "queryRunner . execute (  \" SELECT    1  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["testSufficientWorkerNodes"], "fileName": "com.facebook.presto.tests.TestMinWorkerRequirement"}, {"methodBody": ["METHOD_START", "{", "tester . reset (  )  ;", "assertUpdate ( sql )  ;", "assertEquals ( tester . getCalledName (  )  ,    name )  ;", "assertEquals ( tester . getCalledArguments (  )  ,     . list ( arguments )  )  ;", "}", "METHOD_END"], "methodName": ["assertCall"], "fileName": "com.facebook.presto.tests.TestProcedureCall"}, {"methodBody": ["METHOD_START", "{", "tester . reset (  )  ;", "try    {", "assertUpdate ( sql )  ;", "fail (  \" expected   exception \"  )  ;", "}    catch    ( RuntimeException   e )     {", "assertFalse ( tester . wasCalled (  )  )  ;", "assertEquals ( e . getMessage (  )  ,    message )  ;", "}", "}", "METHOD_END"], "methodName": ["assertCallFails"], "fileName": "com.facebook.presto.tests.TestProcedureCall"}, {"methodBody": ["METHOD_START", "{", "tester . reset (  )  ;", "try    {", "assertUpdate ( sql )  ;", "fail (  \" expected   exception \"  )  ;", "}    catch    ( RuntimeException   e )     {", "assertEquals ( tester . getCalledName (  )  ,    name )  ;", "assertEquals ( tester . getCalledArguments (  )  ,     . list (  )  )  ;", "assertEquals ( e . getMessage (  )  ,    message )  ;", "}", "}", "METHOD_END"], "methodName": ["assertCallThrows"], "fileName": "com.facebook.presto.tests.TestProcedureCall"}, {"methodBody": ["METHOD_START", "{", "return   Arrays . asList ( elements )  ;", "}", "METHOD_END"], "methodName": ["list"], "fileName": "com.facebook.presto.tests.TestProcedureCall"}, {"methodBody": ["METHOD_START", "{", "TestingPrestoServer   coordinator    =     (  ( DistributedQueryRunner )     ( getQueryRunner (  )  )  )  . getCoordinator (  )  ;", "tester    =    coordinator . getProcedureTester (  )  ;", "ProcedureRegistry   procedureRegistry    =    coordinator . getMetadata (  )  . getProcedureRegistry (  )  ;", "TestingProcedures   procedures    =    new   TestingProcedures ( coordinator . getProcedureTester (  )  )  ;", "procedureRegistry . addProcedures ( new   connector . ConnectorId ( TESTING _ CATALOG )  ,    procedures . getProcedures ( TestProcedureCall . PROCEDURE _ SCHEMA )  )  ;", "session    =    testSessionBuilder (  )  . setCatalog ( TESTING _ CATALOG )  . setSchema ( TestProcedureCall . PROCEDURE _ SCHEMA )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.tests.TestProcedureCall"}, {"methodBody": ["METHOD_START", "{", "tester    =    null ;", "session    =    null ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.tests.TestProcedureCall"}, {"methodBody": ["METHOD_START", "{", "assertCall (  \" CALL   test _ simple (  )  \"  ,     \" simple \"  )  ;", "assertCall ( String . format (  \" CALL    % s . test _ simple (  )  \"  ,     . PROCEDURE _ SCHEMA )  ,     \" simple \"  )  ;", "assertCall ( String . format (  \" CALL    % s .  % s . test _ simple (  )  \"  ,    TESTING _ CATALOG ,     . PROCEDURE _ SCHEMA )  ,     \" simple \"  )  ;", "assertCall (  \" CALL   test _ args (  1  2  3  ,     4  .  5  ,     ' hello '  ,    true )  \"  ,     \" args \"  ,     1  2  3 L ,     4  .  5  ,     \" hello \"  ,    true )  ;", "assertCall (  \" CALL   test _ args (  -  5  ,    nan (  )  ,     ' bye '  ,    false )  \"  ,     \" args \"  ,     (  -  5 L )  ,    Double . NaN ,     \" bye \"  ,    false )  ;", "assertCall (  \" CALL   test _ args (  3  ,     8  8  ,     ' coerce '  ,    true )  \"  ,     \" args \"  ,     3 L ,     8  8  .  0  ,     \" coerce \"  ,    true )  ;", "assertCall (  \" CALL   test _ args ( x    =  >     1  2  3  ,    y    =  >     4  .  5  ,    z    =  >     ' hello '  ,    q    =  >    true )  \"  ,     \" args \"  ,     1  2  3 L ,     4  .  5  ,     \" hello \"  ,    true )  ;", "assertCall (  \" CALL   test _ args ( q    =  >    true ,    z    =  >     ' hello '  ,    y    =  >     4  .  5  ,    x    =  >     1  2  3  )  \"  ,     \" args \"  ,     1  2  3 L ,     4  .  5  ,     \" hello \"  ,    true )  ;", "assertCall (  \" CALL   test _ nulls (  1  2  3  ,    null )  \"  ,     \" nulls \"  ,     1  2  3 L ,    null )  ;", "assertCall (  \" CALL   test _ nulls ( null ,     ' apple '  )  \"  ,     \" nulls \"  ,    null ,     \" apple \"  )  ;", "assertCall (  \" CALL   test _ arrays ( ARRAY    [  1  2  ,     3  4  ]  ,    ARRAY [  ' abc '  ,     ' xyz '  ]  )  \"  ,     \" arrays \"  ,     . list (  1  2 L ,     3  4 L )  ,     . list (  \" abc \"  ,     \" xyz \"  )  )  ;", "assertCall (  \" CALL   test _ arrays ( ARRAY    [  ]  ,    ARRAY [  ]  )  \"  ,     \" arrays \"  ,     . list (  )  ,     . list (  )  )  ;", "assertCall (  \" CALL   test _ nested ( ARRAY    [ ARRAY [  1  2  ,     3  4  ]  ,    ARRAY [  5  6  ]  ]  )  \"  ,     \" nested \"  ,     . list (  . list (  1  2 L ,     3  4 L )  ,     . list (  5  6 L )  )  )  ;", "assertCall (  \" CALL   test _ nested ( ARRAY    [  ]  )  \"  ,     \" nested \"  ,     . list (  )  )  ;", "assertCall (  \" CALL   test _ nested ( ARRAY    [ ARRAY [  ]  ]  )  \"  ,     \" nested \"  ,     . list (  . list (  )  )  )  ;", "assertCall (  \" CALL   test _ session _ first (  1  2  3  )  \"  ,     \" session _ first \"  ,     1  2  3 L )  ;", "assertCall (  \" CALL   test _ session _ last (  ' grape '  )  \"  ,     \" session _ last \"  ,     \" grape \"  )  ;", "assertCallThrows (  \" CALL   test _ exception (  )  \"  ,     \" exception \"  ,     \" test   exception   from   procedure \"  )  ;", "assertCallThrows (  \" CALL   test _ error (  )  \"  ,     \" error \"  ,     \" test   error   from   procedure \"  )  ;", "assertCallFails (  \" CALL   test _ args ( null ,     4  .  5  ,     ' hello '  ,    true )  \"  ,     \" Procedure   argument   cannot   be   null :    x \"  )  ;", "assertCallFails (  \" CALL   test _ args (  1  2  3  ,    null ,     ' hello '  ,    true )  \"  ,     \" Procedure   argument   cannot   be   null :    y \"  )  ;", "assertCallFails (  \" CALL   test _ args (  1  2  3  ,     4  .  5  ,     ' hello '  ,    null )  \"  ,     \" Procedure   argument   cannot   be   null :    q \"  )  ;", "assertCallFails (  \" CALL   test _ simple (  1  2  3  )  \"  ,     \" line    1  :  1  :    Too   many   arguments   for   procedure \"  )  ;", "assertCallFails (  \" CALL   test _ args (  1  2  3  ,     4  .  5  ,     ' hello '  )  \"  ,     \" line    1  :  1  :    Too   few   arguments   for   procedure \"  )  ;", "assertCallFails (  \" CALL   test _ args ( x    =  >     1  2  3  ,    y    =  >     4  .  5  ,    q    =  >    true )  \"  ,     \" line    1  :  1  :    Too   few   arguments   for   procedure \"  )  ;", "assertCallFails (  \" CALL   test _ args (  1  2  3  ,     4  .  5  ,     ' hello '  ,    q    =  >    true )  \"  ,     \" line    1  :  1  :    Named   and   positional   arguments   cannot   be   mixed \"  )  ;", "assertCallFails (  \" CALL   test _ args ( x    =  >     3  ,    x    =  >     4  )  \"  ,     \" line    1  :  2  4  :    Duplicate   procedure   argument :    x \"  )  ;", "assertCallFails (  \" CALL   test _ args ( t    =  >     4  0  4  )  \"  ,     \" line    1  :  1  6  :    Unknown   argument   name :    t \"  )  ;", "assertCallFails (  \" CALL   test _ nulls (  ' hello '  ,    null )  \"  ,     \" line    1  :  1  7  :    Cannot   cast   type   bigint   to   varchar (  5  )  \"  )  ;", "assertCallFails (  \" CALL   test _ nulls ( null ,     1  2  3  )  \"  ,     \" line    1  :  2  3  :    Cannot   cast   type   varchar   to   integer \"  )  ;", "}", "METHOD_END"], "methodName": ["testProcedureCall"], "fileName": "com.facebook.presto.tests.TestProcedureCall"}, {"methodBody": ["METHOD_START", "{", "queryRunner    =    TpchQueryRunnerBuilder . builder (  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.tests.TestQueryManager"}, {"methodBody": ["METHOD_START", "{", "queryRunner . close (  )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.tests.TestQueryManager"}, {"methodBody": ["METHOD_START", "{", "QueryManager   queryManager    =    queryRunner . getCoordinator (  )  . getQueryManager (  )  ;", "QueryId   queryId    =    queryManager . createQuery ( new   TestingSessionContext ( SessionTestUtils . TEST _ SESSION )  ,     \" SELECT    *    FROM   lineitem \"  )  . getQueryId (  )  ;", "while    ( true )     {", "QueryInfo   queryInfo    =    queryManager . getQueryInfo ( queryId )  ;", "if    ( queryInfo . getState (  )  . isDone (  )  )     {", "fail (  (  \" unexpected   query   state :     \"     +     ( queryInfo . getState (  )  )  )  )  ;", "}", "if    (  ( queryInfo . getState (  )  )     =  =     ( QueryState . RUNNING )  )     {", "break ;", "}", "Thread . sleep (  1  0  0  )  ;", "}", "queryManager . failQuery ( queryId ,    new   spi . PrestoException ( GENERIC _ INTERNAL _ ERROR ,     \" mock   exception \"  )  )  ;", "QueryInfo   queryInfo    =    queryManager . getQueryInfo ( queryId )  ;", "assertEquals ( queryInfo . getState (  )  ,    QueryState . FAILED )  ;", "assertEquals ( queryInfo . getErrorCode (  )  ,    GENERIC _ INTERNAL _ ERROR . toErrorCode (  )  )  ;", "assertNotNull ( queryInfo . getFailureInfo (  )  )  ;", "assertEquals ( queryInfo . getFailureInfo (  )  . getMessage (  )  ,     \" mock   exception \"  )  ;", "}", "METHOD_END"], "methodName": ["testFailQuery"], "fileName": "com.facebook.presto.tests.TestQueryManager"}, {"methodBody": ["METHOD_START", "{", "try    ( DistributedQueryRunner   queryRunner    =    TpchQueryRunnerBuilder . builder (  )  . setSingleExtraProperty (  \" query . max - cpu - time \"  ,     \"  1 ms \"  )  . build (  )  )     {", "QueryId   queryId    =    TestQueryRunnerUtil . createQuery ( queryRunner ,    SessionTestUtils . TEST _ SESSION ,     \" SELECT   COUNT (  *  )    FROM   lineitem \"  )  ;", "TestQueryRunnerUtil . waitForQueryState ( queryRunner ,    queryId ,    QueryState . FAILED )  ;", "QueryManager   queryManager    =    queryRunner . getCoordinator (  )  . ge (  )  ;", "QueryInfo   queryInfo    =    queryManager . getQueryInfo ( queryId )  ;", "assertEquals ( queryInfo . getState (  )  ,    QueryState . FAILED )  ;", "assertEquals ( queryInfo . getErrorCode (  )  ,    EXCEEDED _ CPU _ LIMIT . toErrorCode (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testQueryCpuLimit"], "fileName": "com.facebook.presto.tests.TestQueryManager"}, {"methodBody": ["METHOD_START", "{", "Session   defaultSession    =    testSessionBuilder (  )  . setCatalog (  \" local \"  )  . setSchema ( TINY _ SCHEMA _ NAME )  . build (  )  ;", "LocalQueryRunner   localQueryRunner    =    new   LocalQueryRunner ( defaultSession )  ;", "localQueryRunner . createCatalog ( defaultSession . getCatalog (  )  . get (  )  ,    new   TpchConnectorFactory (  1  )  ,    ImmutableMap .  < String ,    String > of (  )  )  ;", "localQueryRunner . getMetadata (  )  . addFunctions ( AbstractTestQueries . CUSTOM _ FUNCTIONS )  ;", "SessionPropertyManager   sessionPropertyManager    =    localQueryRunner . getMetadata (  )  . getSessionPropertyManager (  )  ;", "sessionPropertyManager . addSystemSessionProperties ( AbstractTestQueries . TEST _ SYSTEM _ PROPERTIES )  ;", "sessionPropertyManager . addConnectorSessionProperties ( new   connector . ConnectorId ( TESTING _ CATALOG )  ,    AbstractTestQueries . TEST _ CATALOG _ PROPERTIES )  ;", "return   localQueryRunner ;", "}", "METHOD_END"], "methodName": ["createLocalQueryRunner"], "fileName": "com.facebook.presto.tests.TestQueryPlanDeterminism"}, {"methodBody": ["METHOD_START", "{", "determinismChecker    =    new   PlanDeterminismChecker (  (  ( LocalQueryRunner )     ( getQueryRunner (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.tests.TestQueryPlanDeterminism"}, {"methodBody": ["METHOD_START", "{", "determinismChecker    =    null ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.tests.TestQueryPlanDeterminism"}, {"methodBody": ["METHOD_START", "{", "Session   defaultSession    =    testSessionBuilder (  )  . setCatalog (  \" local \"  )  . setSchema ( TINY _ SCHEMA _ NAME )  . build (  )  ;", "LocalRunner   localRunner    =    new   LocalRunner ( defaultSession )  ;", "localRunner . createCatalog ( defaultSession . getCatalog (  )  . get (  )  ,    new   TpchConnectorFactory (  1  )  ,    ImmutableMap . of (  )  )  ;", "return   localRunner ;", "}", "METHOD_END"], "methodName": ["createLocalQueryRunner"], "fileName": "com.facebook.presto.tests.TestQueryPlansDeterministic"}, {"methodBody": ["METHOD_START", "{", "Closeables . closeAllRuntimeException ( runner )  ;", "runner    =    null ;", "dmChecker    =    null ;", "}", "METHOD_END"], "methodName": ["destroy"], "fileName": "com.facebook.presto.tests.TestQueryPlansDeterministic"}, {"methodBody": ["METHOD_START", "{", "runner    =    TestQueryPlansDeterministic . createLocalQueryRunner (  )  ;", "determinismChecker    =    new   PlanDeterminismChecker ( runner )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.tests.TestQueryPlansDeterministic"}, {"methodBody": ["METHOD_START", "{", "determinismChecker . checkPlanIsDeterministic (  (  \" SELECT   orderdate    \"     +     (  (  (  (  (  (  (  (  (  \" FROM   orders   o ,  \\ n \"     +     \"                lineitem   i \\ n \"  )     +     \" WHERE   o . orderdate    =  \\ n \"  )     +     \"              ( SELECT   DISTINCT    ( orderdate )  \\ n \"  )     +     \"                FROM   orders \\ n \"  )     +     \"                WHERE   totalprice    >     2  )  \\ n \"  )     +     \"       AND   i . quantity    >     1  .  2     *  \\ n \"  )     +     \"              ( SELECT   avg ( j . quantity )  \\ n \"  )     +     \"                FROM   lineitem   j \\ n \"  )     +     \"              )  \\ n \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testTpcdsQ6deterministic"], "fileName": "com.facebook.presto.tests.TestQueryPlansDeterministic"}, {"methodBody": ["METHOD_START", "{", "determinismChecker . checkPlanIsDeterministic (  (  \" SELECT \\ n \"     +     (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  \"       nation ,  \\ n \"     +     \"       o _ year ,  \\ n \"  )     +     \"       sum ( amount )    AS   sum _ profit \\ n \"  )     +     \" FROM    (  \\ n \"  )     +     \"                      SELECT \\ n \"  )     +     \"                            n . name                                                                                                                                                                              AS   nation ,  \\ n \"  )     +     \"                            extract ( YEAR   FROM   o . orderdate )                                                                                                       AS   o _ year ,  \\ n \"  )     +     \"                            l . extendedprice    *     (  1     -    l . discount )     -    ps . supplycost    *    l . quantity   AS   amount \\ n \"  )     +     \"                      FROM \\ n \"  )     +     \"                            part   p ,  \\ n \"  )     +     \"                            supplier   s ,  \\ n \"  )     +     \"                            lineitem   l ,  \\ n \"  )     +     \"                            partsupp   ps ,  \\ n \"  )     +     \"                            orders   o ,  \\ n \"  )     +     \"                            nation   n \\ n \"  )     +     \"                      WHERE \\ n \"  )     +     \"                            s . suppkey    =    l . suppkey \\ n \"  )     +     \"                            AND   ps . suppkey    =    l . suppkey \\ n \"  )     +     \"                            AND   ps . partkey    =    l . partkey \\ n \"  )     +     \"                            AND   p . partkey    =    l . partkey \\ n \"  )     +     \"                            AND   o . orderkey    =    l . orderkey \\ n \"  )     +     \"                            AND   s . nationkey    =    n . nationkey \\ n \"  )     +     \"                            AND   p . name   LIKE    \\  '  % green %  \\  '  \\ n \"  )     +     \"                 )    AS   profit \\ n \"  )     +     \" GROUP   BY \\ n \"  )     +     \"       nation ,  \\ n \"  )     +     \"       o _ year \\ n \"  )     +     \" ORDER   BY \\ n \"  )     +     \"       nation ,  \\ n \"  )     +     \"       o _ year   DESC \\ n \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testTpchQ9deterministic"], "fileName": "com.facebook.presto.tests.TestQueryPlansDeterministic"}, {"methodBody": ["METHOD_START", "{", "LocalQueryRunner   queryRunner    =    new   LocalQueryRunner ( TestQuerySpillLimits . SESSION ,    new   FeaturesConfig (  )  . setSpillerSpillPaths ( spillPath . getAbsolutePath (  )  )  . setSpillEnabled ( true )  ,    nodeSpillConfig ,    false ,    true )  ;", "queryRunner . createCatalog ( TestQuerySpillLimits . SESSION . getCatalog (  )  . get (  )  ,    new   TpchConnectorFactory (  1  )  ,    ImmutableMap . of (  )  )  ;", "return   queryRunner ;", "}", "METHOD_END"], "methodName": ["createLocalQueryRunner"], "fileName": "com.facebook.presto.tests.TestQuerySpillLimits"}, {"methodBody": ["METHOD_START", "{", "this . spillPath    =    Files . createTempDir (  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.tests.TestQuerySpillLimits"}, {"methodBody": ["METHOD_START", "{", "deleteRecursively ( spillPath . toPath (  )  ,    ALLOW _ INSECURE )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.tests.TestQuerySpillLimits"}, {"methodBody": ["METHOD_START", "{", "try    ( QueryRunner   queryRunner    =    createLocalQueryRunner ( new   NodeSpillConfig (  )  . setMaxSpillPerNode ( DataSize . succinctBytes (  1  0  )  )  )  )     {", "queryRunner . execute ( queryRunner . getDefaultSession (  )  ,     \" SELECT   COUNT ( DISTINCT   clerk )    as   count ,    orderdate   FROM   orders   GROUP   BY   orderdate   ORDER   BY   count ,    orderdate \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["testMaxSpillPerNodeLimit"], "fileName": "com.facebook.presto.tests.TestQuerySpillLimits"}, {"methodBody": ["METHOD_START", "{", "try    ( QueryRunner   queryRunner    =    createLocalQueryRunner ( new   NodeSpillConfig (  )  . setQueryMaxSpillPerNode ( DataSize . succinctBytes (  1  0  )  )  )  )     {", "queryRunner . execute ( queryRunner . getDefaultSession (  )  ,     \" SELECT   COUNT ( DISTINCT   clerk )    as   count ,    orderdate   FROM   orders   GROUP   BY   orderdate   ORDER   BY   count ,    orderdate \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["testQueryMaxSpillPerNodeLimit"], "fileName": "com.facebook.presto.tests.TestQuerySpillLimits"}, {"methodBody": ["METHOD_START", "{", "int   total    =    computeActual (  \" SELECT   orderkey   FROM   orders \"  )  . getMaterializedRows (  )  . size (  )  ;", "boolean   sampleSizeFound    =    false ;", "for    ( int   i    =     0  ;    i    <     1  0  0  ;    i +  +  )     {", "int   sampleSize    =    computeActual (  \" SELECT   orderkey   FROM   ORDERS   TABLESAMPLE   SYSTEM    (  5  0  )  \"  )  . getMaterializedRows (  )  . size (  )  ;", "if    (  ( sampleSize    >     0  )     &  &     ( sampleSize    <    total )  )     {", "sampleSizeFound    =    true ;", "break ;", "}", "}", "assertTrue ( sampleSizeFound ,     \" Table   sample   returned   unexpected   number   of   rows \"  )  ;", "}", "METHOD_END"], "methodName": ["testTableSampleSystem"], "fileName": "com.facebook.presto.tests.TestTpchDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "@ Language (  \" SQL \"  )", "String   longy    =     (  \" SELECT   x \"     +     ( Strings . repeat (  \"  , x \"  ,     5  0  0  0  0  0  )  )  )     +     \"    FROM    ( VALUES    1  ,  2  ,  3  ,  4  ,  5  )    t ( x )  \"  ;", "assertyFails ( longy ,     \" y   text   length    \\  \\  (  1  0  0  0  0  3  7  \\  \\  )    exceeds   the   maximum   length    \\  \\  (  1  0  0  0  0  0  0  \\  \\  )  \"  )  ;", "}", "METHOD_END"], "methodName": ["testTooLongQuery"], "fileName": "com.facebook.presto.tests.TestTpchDistributedQueries"}, {"methodBody": ["METHOD_START", "{", "DistributedQueryRunner   runner    =    TpchQueryRunnerBuilder . builder (  )  . buildWithoutCatalogs (  )  ;", "runner . createCatalog (  \" tpch \"  ,     \" tpch \"  ,    ImmutableMap . of ( TPCH _ COLUMN _ NAMING _ PROPERTY ,    STANDARD . name (  )  )  )  ;", "statisticsAssertion    =    new   StatisticsAssertion ( runner )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.tests.TestTpchDistributedStats"}, {"methodBody": ["METHOD_START", "{", "statisticsAssertion . close (  )  ;", "statisticsAssertion    =    null ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.tests.TestTpchDistributedStats"}, {"methodBody": ["METHOD_START", "{", "statisticsAssertion . check (  \" SELECT    ( SELECT   n _ regionkey   FROM   nation   WHERE   n _ name    =     ' Germany '  )  \"  ,     (    checks )     -  >    checks . estimate ( Metrics . OUTPUT _ ROW _ COUNT ,    MetricComparisonStrategies . noError (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testEnforceSingleRow"], "fileName": "com.facebook.presto.tests.TestTpchDistributedStats"}, {"methodBody": ["METHOD_START", "{", "statisticsAssertion . check (  \" SELECT    *    FROM   lineitem   WHERE   l _ shipdate    <  =    DATE    '  1  9  9  8  -  1  2  -  0  1  '     -    INTERVAL    '  9  0  '    DAY \"  ,     (    checks )     -  >    checks . estimate ( Metrics . OUTPUT _ ROW _ COUNT ,    MetricComparisonStrategies . relativeError (  (  -  0  .  5  5  )  ,     (  -  0  .  4  5  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testFilter"], "fileName": "com.facebook.presto.tests.TestTpchDistributedStats"}, {"methodBody": ["METHOD_START", "{", "statisticsAssertion . check (  \" SELECT   l _ returnflag ,    l _ linestatus   FROM   lineitem   GROUP   BY   l _ returnflag ,    l _ linestatus \"  ,     (    checks )     -  >    checks . noEstimate ( Metrics . OUTPUT _ ROW _ COUNT )  )  ;", "}", "METHOD_END"], "methodName": ["testGroupBy"], "fileName": "com.facebook.presto.tests.TestTpchDistributedStats"}, {"methodBody": ["METHOD_START", "{", "statisticsAssertion . check (  \" SELECT    *    FROM      part ,    partsupp   WHERE   p _ partkey    =    ps _ partkey \"  ,     (    checks )     -  >    checks . estimate ( Metrics . OUTPUT _ ROW _ COUNT ,    MetricComparisonStrategies . relativeError (  0  .  9  5  ,     1  .  0  5  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testJoin"], "fileName": "com.facebook.presto.tests.TestTpchDistributedStats"}, {"methodBody": ["METHOD_START", "{", "statisticsAssertion . check (  \" SELECT    *    FROM   nation   LIMIT    1  0  \"  ,     (    checks )     -  >    checks . estimate ( Metrics . OUTPUT _ ROW _ COUNT ,    MetricComparisonStrategies . noError (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testLimit"], "fileName": "com.facebook.presto.tests.TestTpchDistributedStats"}, {"methodBody": ["METHOD_START", "{", "statisticsAssertion . check (  \" SELECT    *    FROM   nation   WHERE   n _ regionkey   IN    ( SELECT   r _ regionkey   FROM   region )  \"  ,     (    checks )     -  >    checks . estimate ( Metrics . OUTPUT _ ROW _ COUNT ,    MetricComparisonStrategies . noError (  )  )  )  ;", "statisticsAssertion . check (  \" SELECT    *    FROM   nation   WHERE   n _ regionkey   IN    ( SELECT   r _ regionkey   FROM   region   WHERE   r _ regionkey    %     3     =     0  )  \"  ,     (    checks )     -  >    checks . estimate ( Metrics . OUTPUT _ ROW _ COUNT ,    MetricComparisonStrategies . absoluteError (  1  5  .  0  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSemiJoin"], "fileName": "com.facebook.presto.tests.TestTpchDistributedStats"}, {"methodBody": ["METHOD_START", "{", "statisticsAssertion . check (  \" SELECT    *    FROM   nation   UNION   SELECT    *    FROM   nation \"  ,     (    checks )     -  >    checks . noEstimate ( Metrics . OUTPUT _ ROW _ COUNT )  )  ;", "statisticsAssertion . check (  \" SELECT    *    FROM   nation   INTERSECT   SELECT    *    FROM   nation \"  ,     (    checks )     -  >    checks . noEstimate ( Metrics . OUTPUT _ ROW _ COUNT )  )  ;", "statisticsAssertion . check (  \" SELECT    *    FROM   nation   EXCEPT   SELECT    *    FROM   nation \"  ,     (    checks )     -  >    checks . noEstimate ( Metrics . OUTPUT _ ROW _ COUNT )  )  ;", "}", "METHOD_END"], "methodName": ["testSetOperations"], "fileName": "com.facebook.presto.tests.TestTpchDistributedStats"}, {"methodBody": ["METHOD_START", "{", "TpchTable . getTables (  )  . forEach (  (    table )     -  >    statisticsAssertion . check (  (  \" SELECT    *    FROM    \"     +     ( table . getTableName (  )  )  )  ,     (    checks )     -  >    checks . estimate ( OUTPUT _ ROW _ COUNT ,    noError (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testTableScanStats"], "fileName": "com.facebook.presto.tests.TestTpchDistributedStats"}, {"methodBody": ["METHOD_START", "{", "statisticsAssertion . check (  \" VALUES    1  \"  ,     (    checks )     -  >    checks . estimate ( Metrics . OUTPUT _ ROW _ COUNT ,    MetricComparisonStrategies . noError (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testValues"], "fileName": "com.facebook.presto.tests.TestTpchDistributedStats"}, {"methodBody": ["METHOD_START", "{", "Session   defaultSession    =    testSessionBuilder (  )  . setCatalog (  \" tpch \"  )  . setSchema ( TINY _ SCHEMA _ NAME )  . setSystemProperty ( SystemSessionProperties . ENABLE _ NEW _ STATS _ CALCULATOR ,     \" true \"  )  . build (  )  ;", "queryRunner    =    new   ing . LocalQueryRunner ( defaultSession )  ;", "queryRunner . createCatalog (  \" tpch \"  ,    new   TpchConnectorFactory (  1  )  ,    ImmutableMap . of ( TPCH _ COLUMN _ NAMING _ PROPERTY ,    STANDARD . name (  )  )  )  ;", "statisticsAssertion    =    new   StatisticsAssertion ( queryRunner )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.tests.TestTpchLocalStats"}, {"methodBody": ["METHOD_START", "{", "statisticsAssertion    =    null ;", "if    (  ( queryRunner )     !  =    null )     {", "queryRunner . close (  )  ;", "queryRunner    =    null ;", "}", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "com.facebook.presto.tests.TestTpchLocalStats"}, {"methodBody": ["METHOD_START", "{", "statisticsAssertion . check (  \" SELECT    *    FROM   orders   WHERE   o _ orderdate    >  =    DATE    '  1  9  9  3  -  1  0  -  0  1  '  \"  ,     (    checks )     -  >    checks . estimate ( Metrics . OUTPUT _ ROW _ COUNT ,    MetricComparisonStrategies . defaultTolerance (  )  )  )  ;", "statisticsAssertion . check (  \" SELECT    *    FROM   orders   WHERE   o _ orderdate    <    DATE    '  1  9  9  3  -  1  0  -  0  1  '     +    INTERVAL    '  3  '    MONTH \"  ,     (    checks )     -  >    checks . estimate ( Metrics . OUTPUT _ ROW _ COUNT ,    MetricComparisonStrategies . defaultTolerance (  )  )  )  ;", "statisticsAssertion . check (  \" SELECT    *    FROM   orders   WHERE   o _ orderdate    >  =    DATE    '  1  9  9  3  -  1  0  -  0  1  '    AND   o _ orderdate    <    DATE    '  1  9  9  3  -  1  0  -  0  1  '     +    INTERVAL    '  3  '    MONTH \"  ,     (    checks )     -  >    checks . estimate ( Metrics . OUTPUT _ ROW _ COUNT ,    MetricComparisonStrategies . defaultTolerance (  )  )  )  ;", "statisticsAssertion . check (  \" SELECT    *    FROM   orders   WHERE   o _ orderdate    >  =    DATE    '  1  9  9  3  -  1  0  -  0  1  '    OR   o _ orderdate    <    DATE    '  1  9  9  3  -  1  0  -  0  1  '     +    INTERVAL    '  3  '    MONTH \"  ,     (    checks )     -  >    checks . estimate ( Metrics . OUTPUT _ ROW _ COUNT ,    MetricComparisonStrategies . defaultTolerance (  )  )  )  ;", "statisticsAssertion . check (  \" SELECT    *    FROM   orders   WHERE   NOT    ( o _ orderdate    >  =    DATE    '  1  9  9  3  -  1  0  -  0  1  '    AND   o _ orderdate    <    DATE    '  1  9  9  3  -  1  0  -  0  1  '     +    INTERVAL    '  3  '    MONTH )  \"  ,     (    checks )     -  >    checks . estimate ( Metrics . OUTPUT _ ROW _ COUNT ,    MetricComparisonStrategies . defaultTolerance (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testDateComparisons"], "fileName": "com.facebook.presto.tests.TestTpchLocalStats"}, {"methodBody": ["METHOD_START", "{", "statisticsAssertion . check (  \" SELECT    ( SELECT   n _ regionkey   FROM   nation   WHERE   n _ name    =     ' GERMANY '  )    AS   sub \"  ,     (    checks )     -  >    checks . estimate ( Metrics . OUTPUT _ ROW _ COUNT ,    MetricComparisonStrategies . noError (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testEnforceSingleRow"], "fileName": "com.facebook.presto.tests.TestTpchLocalStats"}, {"methodBody": ["METHOD_START", "{", "statisticsAssertion . check (  \" SELECT    *    FROM   nation   LIMIT    1  0  \"  ,     (    checks )     -  >    checks . estimate ( Metrics . OUTPUT _ ROW _ COUNT ,    MetricComparisonStrategies . noError (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testLimit"], "fileName": "com.facebook.presto.tests.TestTpchLocalStats"}, {"methodBody": ["METHOD_START", "{", "statisticsAssertion . check (  \" SELECT    *    FROM   nation \"  ,     (    checks )     -  >    checks . estimate ( Metrics . OUTPUT _ ROW _ COUNT ,    MetricComparisonStrategies . defaultTolerance (  )  )  . verifyExactColumnStatistics (  \" n _ nationkey \"  )  . verifyExactColumnStatistics (  \" n _ regionkey \"  )  . verifyExactColumnStatistics (  \" n _ name \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testTableScanStats"], "fileName": "com.facebook.presto.tests.TestTpchLocalStats"}, {"methodBody": ["METHOD_START", "{", "statisticsAssertion . check (  \" SELECT    *    FROM   orders   WHERE   o _ comment    =     ' requests   above   the   furiously   even   instructions   use   alw '  \"  ,     (    checks )     -  >    checks . estimate ( Metrics . OUTPUT _ ROW _ COUNT ,    MetricComparisonStrategies . defaultTolerance (  )  )  )  ;", "statisticsAssertion . check (  \" SELECT    *    FROM   orders   WHERE    ' this   is   always    .  .  .  '     =     '  .  .  .    false '  \"  ,     (    checks )     -  >    checks . estimate ( Metrics . OUTPUT _ ROW _ COUNT ,    MetricComparisonStrategies . noError (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testVarcharComparisons"], "fileName": "com.facebook.presto.tests.TestTpchLocalStats"}, {"methodBody": ["METHOD_START", "{", "if    ( value    =  =    null )     {", "return   null ;", "}", "if    ( BOOLEAN . equals ( type )  )     {", "return   value ;", "} else", "if    ( TINYINT . equals ( type )  )     {", "return    (  ( Number )     ( value )  )  . byteValue (  )  ;", "} else", "if    ( SMALLINT . equals ( type )  )     {", "return    (  ( Number )     ( value )  )  . shortValue (  )  ;", "} else", "if    ( INTEGER . equals ( type )  )     {", "return    (  ( Number )     ( value )  )  . intValue (  )  ;", "} else", "if    ( BIGINT . equals ( type )  )     {", "return    (  ( Number )     ( value )  )  . longValue (  )  ;", "} else", "if    ( DOUBLE . equals ( type )  )     {", "return    (  ( Number )     ( value )  )  . doubleValue (  )  ;", "} else", "if    ( REAL . equals ( type )  )     {", "return    (  ( Number )     ( value )  )  . floatValue (  )  ;", "} else", "if    ( type   instanceof   com . facebook . presto . spi . type . VarcharType )     {", "return   value ;", "} else", "if    ( isCharType ( type )  )     {", "return   value ;", "} else", "if    ( VARBINARY . equals ( type )  )     {", "return   value ;", "} else", "if    ( DATE . equals ( type )  )     {", "return   parse (  (  ( String )     ( value )  )  ,    LocalDate :  : from )  ;", "} else", "if    ( TIME . equals ( type )  )     {", "return   parse (  (  ( String )     ( value )  )  ,    LocalTime :  : from )  ;", "} else", "if    ( TIME _ WITH _ TIME _ ZONE . equals ( type )  )     {", "try    {", "return   TestingPrestoClient . timeWithUtcZoneFormat . parse (  (  ( String )     ( value )  )  ,    LocalTime :  : from )  . atOffset ( UTC )  ;", "}    catch    ( DateTimeParseException   e )     {", "return   TestingPrestoClient . timeWithZoneOffsetFormat . parse (  (  ( String )     ( value )  )  ,    OffsetTime :  : from )  ;", "}", "} else", "if    ( TIMESTAMP . equals ( type )  )     {", "return   TestingPrestoClient . timestampFormat . parse (  (  ( String )     ( value )  )  ,    LocalDateTime :  : from )  ;", "} else", "if    ( TIMESTAMP _ WITH _ TIME _ ZONE . equals ( type )  )     {", "return   TestingPrestoClient . timestampWithTimeZoneFormat . parse (  (  ( String )     ( value )  )  ,    ZonedDateTime :  : from )  ;", "} else", "if    ( INTERVAL _ DAY _ TIME . equals ( type )  )     {", "return   new   ype . SqlIntervalDayTime ( com . facebook . presto . client . IntervalDayTime . parseMillis ( String . valueOf ( value )  )  )  ;", "} else", "if    ( INTERVAL _ YEAR _ MONTH . equals ( type )  )     {", "return   new   ype . SqlIntervalYearMonth ( com . facebook . presto . client . IntervalYearMonth . parseMonths ( String . valueOf ( value )  )  )  ;", "} else", "if    ( type   instanceof   com . facebook . presto . spi . type . ArrayType )     {", "return    (  ( List < Object >  )     ( value )  )  . stream (  )  . map (  (    element )     -  >    TestingPrestoClient . convertToRowValue (  (  ( com . facebook . presto . spi . type . ArrayType )     ( type )  )  . getElementType (  )  ,    element ,    timeZoneKey )  )  . collect ( toList (  )  )  ;", "} else", "if    ( type   instanceof   com . facebook . presto . spi . type . MapType )     {", "return    (  ( Map < Object ,    Object >  )     ( value )  )  . entrySet (  )  . stream (  )  . collect ( toMap (  (    e )     -  >    TestingPrestoClient . convertToRowValue (  (  ( com . facebook . presto . spi . type . MapType )     ( type )  )  . getKeyType (  )  ,    e . getKey (  )  ,    timeZoneKey )  ,     (    e )     -  >    TestingPrestoClient . convertToRowValue (  (  ( com . facebook . presto . spi . type . MapType )     ( type )  )  . getValueType (  )  ,    e . getValue (  )  ,    timeZoneKey )  )  )  ;", "} else", "if    ( type   instanceof   com . facebook . presto . spi . type . DecimalType )     {", "return   new   BigDecimal (  (  ( String )     ( value )  )  )  ;", "} else", "if    ( type . getTypeSignature (  )  . getBase (  )  . equals (  \" ObjectId \"  )  )     {", "return   value ;", "} else    {", "throw   new   AssertionError (  (  \" unhandled   type :     \"     +    type )  )  ;", "}", "}", "METHOD_END"], "methodName": ["convertToRowValue"], "fileName": "com.facebook.presto.tests.TestingPrestoClient"}, {"methodBody": ["METHOD_START", "{", "return    (    data )     -  >     {", "checkArgum (  (  ( data . size (  )  )     =  =     ( types . size (  )  )  )  ,     \" columns   size   does   not   match   types   size \"  )  ;", "List < Object >    row    =    new   ArrayList <  >  (  )  ;", "for    ( int   i    =     0  ;    i    <     ( data . size (  )  )  ;    i +  +  )     {", "Object   value    =    data . get ( i )  ;", "Type   type    =    types . get ( i )  ;", "row . add ( convertToRowValue ( type ,    value ,    timeZoneKey )  )  ;", "}", "return   new    < DEFAULT _ PRECISION > MaterializedRow ( row )  ;", "}  ;", "}", "METHOD_END"], "methodName": ["dataToRow"], "fileName": "com.facebook.presto.tests.TestingPrestoClient"}, {"methodBody": ["METHOD_START", "{", "tester . recordCalled (  \" args \"  ,    x ,    y ,    z ,    q )  ;", "}", "METHOD_END"], "methodName": ["args"], "fileName": "com.facebook.presto.tests.TestingProcedures"}, {"methodBody": ["METHOD_START", "{", "tester . recordCalled (  \" arrays \"  ,    x ,    y )  ;", "}", "METHOD_END"], "methodName": ["arrays"], "fileName": "com.facebook.presto.tests.TestingProcedures"}, {"methodBody": ["METHOD_START", "{", "tester . recordCalled (  \" error \"  )  ;", "throw   new   RuntimeException (  \" test   error   from   p \"  )  ;", "}", "METHOD_END"], "methodName": ["error"], "fileName": "com.facebook.presto.tests.TestingProcedures"}, {"methodBody": ["METHOD_START", "{", "tester . recordCalled (  \" exception \"  )  ;", "throw   new   spi . PrestoException ( INVALID _ PROCEDURE _ ARGUMENT ,     \" test   exception   from   procedure \"  )  ;", "}", "METHOD_END"], "methodName": ["exception"], "fileName": "com.facebook.presto.tests.TestingProcedures"}, {"methodBody": ["METHOD_START", "{", "return   ImmutableList .  < Procedure > builder (  )  . add ( procedure ( schema ,     \" test _ simple \"  ,     \" simple \"  ,    ImmutableList . of (  )  )  )  . add ( procedure ( schema ,     \" test _ args \"  ,     \" args \"  ,    ImmutableList . of ( new   Argument (  \" x \"  ,    BIGINT )  ,    new   Argument (  \" y \"  ,    DOUBLE )  ,    new   Argument (  \" z \"  ,    VARCHAR )  ,    new   Argument (  \" q \"  ,    BOOLEAN )  )  )  )  . add ( procedure ( schema ,     \" test _ nulls \"  ,     \" nulls \"  ,    ImmutableList . of ( new   Argument (  \" x \"  ,    BIGINT )  ,    new   Argument (  \" y \"  ,    VARCHAR )  )  )  )  . add ( procedure ( schema ,     \" test _ arrays \"  ,     \" arrays \"  ,    ImmutableList . of ( new   Argument (  \" x \"  ,     \" array ( bigint )  \"  )  ,    new   Argument (  \" y \"  ,     \" array ( varchar )  \"  )  )  )  )  . add ( procedure ( schema ,     \" test _ nested \"  ,     \" nested \"  ,    ImmutableList . of ( new   Argument (  \" x \"  ,     \" array ( array ( bigint )  )  \"  )  )  )  )  . add ( procedure ( schema ,     \" test _ session _ first \"  ,     \" sessionFirst \"  ,    ImmutableList . of ( new   Argument (  \" x \"  ,    BIGINT )  )  )  )  . add ( procedure ( schema ,     \" test _ session _ last \"  ,     \" sessionLast \"  ,    ImmutableList . of ( new   Argument (  \" x \"  ,    VARCHAR )  )  )  )  . add ( procedure ( schema ,     \" test _ exception \"  ,     \" exception \"  ,    ImmutableList . of (  )  )  )  . add ( procedure ( schema ,     \" test _ error \"  ,     \" error \"  ,    ImmutableList . of (  )  )  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["getProcedures"], "fileName": "com.facebook.presto.tests.TestingProcedures"}, {"methodBody": ["METHOD_START", "{", "List < Method >    methods    =    Arrays . stream ( getClass (  )  . getMethods (  )  )  . filter (  (    method )     -  >    method . getName (  )  . equals ( name )  )  . collect ( Collectors . toList (  )  )  ;", "checkArgument (  (  !  ( methods . isEmpty (  )  )  )  ,     \" no   match   methods :     % s \"  ,    name )  ;", "checkArgument (  (  ( methods . size (  )  )     =  =     1  )  ,     \" multiple   match   methods :     % s \"  ,    methods )  ;", "return   methodHandle ( methods . get (  0  )  )  . bindTo ( this )  ;", "}", "METHOD_END"], "methodName": ["handle"], "fileName": "com.facebook.presto.tests.TestingProcedures"}, {"methodBody": ["METHOD_START", "{", "tester . recordCalled (  \" nested \"  ,    x )  ;", "}", "METHOD_END"], "methodName": ["nested"], "fileName": "com.facebook.presto.tests.TestingProcedures"}, {"methodBody": ["METHOD_START", "{", "tester . recordCalled (  \" nulls \"  ,    x ,    y )  ;", "}", "METHOD_END"], "methodName": ["nulls"], "fileName": "com.facebook.presto.tests.TestingProcedures"}, {"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . spi . procedure . Procedure ( schema ,    name ,    arguments ,    handle ( methodName )  )  ;", "}", "METHOD_END"], "methodName": ["procedure"], "fileName": "com.facebook.presto.tests.TestingProcedures"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( session ,     \" session   is   null \"  )  ;", "er . recordCalled (  \" session _ first \"  ,    x )  ;", "}", "METHOD_END"], "methodName": ["sessionFirst"], "fileName": "com.facebook.presto.tests.TestingProcedures"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( session ,     \" session   is   null \"  )  ;", "er . recordCalled (  \" session _ last \"  ,    x )  ;", "}", "METHOD_END"], "methodName": ["sessionLast"], "fileName": "com.facebook.presto.tests.TestingProcedures"}, {"methodBody": ["METHOD_START", "{", "tester . recordCalled (  \" simple \"  )  ;", "}", "METHOD_END"], "methodName": ["simple"], "fileName": "com.facebook.presto.tests.TestingProcedures"}, {"methodBody": ["METHOD_START", "{", "List < String >    columnTypeDefinitions    =    inputs . stream (  )  . map ( DataTypeTest . Input :  : getInsertType )  . collect ( Collectors . toList (  )  )  ;", "Stream < String >    columnDefinitions    =    IntStream . range (  0  ,    columnTypeDefinitions . size (  )  )  . mapToObj (  (    i )     -  >    String . format (  \" col _  % d    % s \"  ,    i ,    columnTypeDefinitions . get ( i )  )  )  ;", "return   Joiner . on (  \"  ,  \\ n \"  )  . join ( columnDefinitions . iterator (  )  )  ;", "}", "METHOD_END"], "methodName": ["columnDefinitions"], "fileName": "com.facebook.presto.tests.datatype.CreateAndInsertDataSetup"}, {"methodBody": ["METHOD_START", "{", "String   ddlTemplate    =     (  \" CREATE   TABLE    { TABLE _ NAME }     (  \\ n \"     +     ( columnDefinitions ( inputs )  )  )     +     \"  \\ n )  \"  ;", "return   new   TestTable ( sqlExecutor ,    tableNamePrefix ,    ddlTemplate )  ;", "}", "METHOD_END"], "methodName": ["createTestTable"], "fileName": "com.facebook.presto.tests.datatype.CreateAndInsertDataSetup"}, {"methodBody": ["METHOD_START", "{", "Stream < String >    literals    =    inputs . stream (  )  . map ( DataTypeTest . Input :  : toLiteral )  ;", "String   valueLiterals    =    Joiner . on (  \"  ,     \"  )  . join ( literals . iterator (  )  )  ;", "sqlExecutor . execute ( String . format (  \" INSERT   INTO    % s   VALUES (  % s )  \"  ,    testTable . getName (  )  ,    valueLiterals )  )  ;", "}", "METHOD_END"], "methodName": ["insertRows"], "fileName": "com.facebook.presto.tests.datatype.CreateAndInsertDataSetup"}, {"methodBody": ["METHOD_START", "{", "return   String . format (  \" CAST (  % s   AS    % s )  \"  ,    input . toLiteral (  )  ,    input . getInsertType (  )  )  ;", "}", "METHOD_END"], "methodName": ["literalInExplicitCast"], "fileName": "com.facebook.presto.tests.datatype.CreateAsSelectDataSetup"}, {"methodBody": ["METHOD_START", "{", "return   DataType . dataType (  \" bigint \"  ,    BIGINT )  ;", "}", "METHOD_END"], "methodName": ["bigintDataType"], "fileName": "com.facebook.presto.tests.datatype.DataType"}, {"methodBody": ["METHOD_START", "{", "return    (  \" X '  \"     +     ( DataType . base 1  6  (  )  . encode ( value )  )  )     +     \"  '  \"  ;", "}", "METHOD_END"], "methodName": ["binaryLiteral"], "fileName": "com.facebook.presto.tests.datatype.DataType"}, {"methodBody": ["METHOD_START", "{", "return   DataType . dataType (  \" boolean \"  ,    BOOLEAN )  ;", "}", "METHOD_END"], "methodName": ["booleanDataType"], "fileName": "com.facebook.presto.tests.datatype.DataType"}, {"methodBody": ["METHOD_START", "{", "return   DataType . charDataType ( length ,     \"  \"  )  ;", "}", "METHOD_END"], "methodName": ["charDataType"], "fileName": "com.facebook.presto.tests.datatype.DataType"}, {"methodBody": ["METHOD_START", "{", "String   suffix    =     ( properties . isEmpty (  )  )     ?     \"  \"     :     \"     \"     +    properties ;", "return    . char (  (  (  (  \" char (  \"     +    length )     +     \"  )  \"  )     +    suffix )  ,    length )  ;", "}", "METHOD_END"], "methodName": ["charDataType"], "fileName": "com.facebook.presto.tests.datatype.DataType"}, {"methodBody": ["METHOD_START", "{", "return   DataType . dataType ( insertType ,    DataType . createCharType ( length )  ,    DataType :  : quote ,     (    input )     -  >    padEnd ( input ,    length ,     '     '  )  )  ;", "}", "METHOD_END"], "methodName": ["charDataType"], "fileName": "com.facebook.presto.tests.datatype.DataType"}, {"methodBody": ["METHOD_START", "{", "return   new   DataType ( insertType ,    prestoResultType ,    Object :  : toString ,    Function . identity (  )  )  ;", "}", "METHOD_END"], "methodName": ["dataType"], "fileName": "com.facebook.presto.tests.datatype.DataType"}, {"methodBody": ["METHOD_START", "{", "return   new   DataType ( insertType ,    prestoResultType ,    toLiteral ,    toPrestoQueryResult )  ;", "}", "METHOD_END"], "methodName": ["dataType"], "fileName": "com.facebook.presto.tests.datatype.DataType"}, {"methodBody": ["METHOD_START", "{", "return   DataType . dataType (  \" DATE \"  ,    DATE ,    DateTimeFormatter . ofPattern (  \"  ' DATE    '  '  ' yyyy - MM - dd '  '  \"  )  :  : format ,    Function . identity (  )  )  ;", "}", "METHOD_END"], "methodName": ["dateDataType"], "fileName": "com.facebook.presto.tests.datatype.DataType"}, {"methodBody": ["METHOD_START", "{", "String   databaseType    =    String . format (  \" decimal (  % s ,     % s )  \"  ,    precision ,    scale )  ;", "return    . dataType ( databaseType ,     . createDecimalType ( precision ,    scale )  ,     (    bigDecimal )     -  >    format (  \" CAST (  '  % s '    AS    % s )  \"  ,    bigDecimal ,    databaseType )  ,     (    bigDecimal )     -  >    bigDecimal . setScale ( scale ,    UNNECESSARY )  )  ;", "}", "METHOD_END"], "methodName": ["decimalDataType"], "fileName": "com.facebook.presto.tests.datatype.DataType"}, {"methodBody": ["METHOD_START", "{", "return   DataType . dataType (  \" double \"  ,    DOUBLE )  ;", "}", "METHOD_END"], "methodName": ["doubleDataType"], "fileName": "com.facebook.presto.tests.datatype.DataType"}, {"methodBody": ["METHOD_START", "{", "return   insertType ;", "}", "METHOD_END"], "methodName": ["getInsertType"], "fileName": "com.facebook.presto.tests.datatype.DataType"}, {"methodBody": ["METHOD_START", "{", "return   prestoResultType ;", "}", "METHOD_END"], "methodName": ["getPrestoResultType"], "fileName": "com.facebook.presto.tests.datatype.DataType"}, {"methodBody": ["METHOD_START", "{", "return   DataType . dataType (  \" integer \"  ,    INTEGER )  ;", "}", "METHOD_END"], "methodName": ["integerDataType"], "fileName": "com.facebook.presto.tests.datatype.DataType"}, {"methodBody": ["METHOD_START", "{", "return    (  \"  '  \"     +    value )     +     \"  '  \"  ;", "}", "METHOD_END"], "methodName": ["quote"], "fileName": "com.facebook.presto.tests.datatype.DataType"}, {"methodBody": ["METHOD_START", "{", "return   DataType . dataType (  \" real \"  ,    REAL )  ;", "}", "METHOD_END"], "methodName": ["realDataType"], "fileName": "com.facebook.presto.tests.datatype.DataType"}, {"methodBody": ["METHOD_START", "{", "return   DataType . dataType (  \" smallint \"  ,    SMALLINT )  ;", "}", "METHOD_END"], "methodName": ["smallintDataType"], "fileName": "com.facebook.presto.tests.datatype.DataType"}, {"methodBody": ["METHOD_START", "{", "return   DataType . dataType ( insertType ,    prestoResultType ,    DataType :  : quote ,    Function . identity (  )  )  ;", "}", "METHOD_END"], "methodName": ["stringDataType"], "fileName": "com.facebook.presto.tests.datatype.DataType"}, {"methodBody": ["METHOD_START", "{", "return   DataType . dataType (  \" tinyint \"  ,    TINYINT )  ;", "}", "METHOD_END"], "methodName": ["tinyintDataType"], "fileName": "com.facebook.presto.tests.datatype.DataType"}, {"methodBody": ["METHOD_START", "{", "if    ( inputValue    =  =    null )     {", "turn    \" NULL \"  ;", "}", "turn   toLiteral . apply ( inputValue )  ;", "}", "METHOD_END"], "methodName": ["toLiteral"], "fileName": "com.facebook.presto.tests.datatype.DataType"}, {"methodBody": ["METHOD_START", "{", "return   toPrestoQueryResult . apply ( inputValue )  ;", "}", "METHOD_END"], "methodName": ["toPrestoQueryResult"], "fileName": "com.facebook.presto.tests.datatype.DataType"}, {"methodBody": ["METHOD_START", "{", "return   DataType . dataType (  \" varbinary \"  ,    VARBINARY ,    DataType :  : binaryLiteral ,    Function . identity (  )  )  ;", "}", "METHOD_END"], "methodName": ["varbinaryDataType"], "fileName": "com.facebook.presto.tests.datatype.DataType"}, {"methodBody": ["METHOD_START", "{", "return   DataType . varcharDataType ( Optional . empty (  )  ,     \"  \"  )  ;", "}", "METHOD_END"], "methodName": ["varcharDataType"], "fileName": "com.facebook.presto.tests.datatype.DataType"}, {"methodBody": ["METHOD_START", "{", "return   DataType . varcharDataType ( size ,     \"  \"  )  ;", "}", "METHOD_END"], "methodName": ["varcharDataType"], "fileName": "com.facebook.presto.tests.datatype.DataType"}, {"methodBody": ["METHOD_START", "{", "return   DataType . varcharDataType ( Optional . of ( size )  ,    properties )  ;", "}", "METHOD_END"], "methodName": ["varcharDataType"], "fileName": "com.facebook.presto.tests.datatype.DataType"}, {"methodBody": ["METHOD_START", "{", "String   prefix    =    length . map (  (    size )     -  >     (  \" varchar (  \"     +    size )     +     \"  )  \"  )  . orElse (  \" varchar \"  )  ;", "String   suffix    =     ( properties . isEmpty (  )  )     ?     \"  \"     :     \"     \"     +    properties ;", "VarcharType   varcharType    =    length . map ( VarcharType :  : createVarcharType )  . orElse (  . createUnboundedVarcharType (  )  )  ;", "return    . string (  ( prefix    +    suffix )  ,    varcharType )  ;", "}", "METHOD_END"], "methodName": ["varcharDataType"], "fileName": "com.facebook.presto.tests.datatype.DataType"}, {"methodBody": ["METHOD_START", "{", "inputs . add ( new   DataTypeTest . Input <  >  ( dataType ,    value )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addRoundTrip"], "fileName": "com.facebook.presto.tests.datatype.DataTypeTest"}, {"methodBody": ["METHOD_START", "{", "return   new   DataTypeTest (  )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "com.facebook.presto.tests.datatype.DataTypeTest"}, {"methodBody": ["METHOD_START", "{", "List < Type >    expectedTypes    =    inputs . stream (  )  . map ( DataTypeTest . Input :  : getPrestoResultType )  . collect ( Collectors . toList (  )  )  ;", "List < Object >    expectedResults    =    inputs . stream (  )  . map ( DataTypeTest . Input :  : toPrestoQueryResult )  . collect ( Collectors . toList (  )  )  ;", "try    ( TestTable   testTable    =    dataSetup . setupTestTable ( Collections . unmodifiableList ( inputs )  )  )     {", "MaterializedResult   materializedRows    =    prestoExecutor . execute ( session ,     (  \" SELECT    *    from    \"     +     ( testTable . getName (  )  )  )  )  ;", "assertEquals ( materializedRows . getTypes (  )  ,    expectedTypes )  ;", "List < Object >    actualResults    =    getOnlyElement ( materializedRows )  . getFields (  )  ;", "assertEquals ( actualResults . size (  )  ,    expectedResults . size (  )  ,     \" lists   don ' t   have   the   same   size \"  )  ;", "for    ( int   i    =     0  ;    i    <     ( expectedResults . size (  )  )  ;    i +  +  )     {", "assertEquals ( actualResults . get ( i )  ,    expectedResults . get ( i )  ,     (  \" Element    \"     +    i )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "com.facebook.presto.tests.datatype.DataTypeTest"}, {"methodBody": ["METHOD_START", "{", "execute ( prestoExecutor ,    prestoExecutor . getDefaultSession (  )  ,    dataSetup )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "com.facebook.presto.tests.datatype.DataTypeTest"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.tests.sql.TestTable"}, {"methodBody": ["METHOD_START", "{", "Builder < String ,    Symbol >    columnSymbols    =    ImmutableMap . builder (  )  ;", "for    ( int   columnId    =     0  ;    columnId    <     ( outputNode . getColumnNames (  )  . size (  )  )  ;     +  + columnId )     {", "columnSymbols . put ( outputNode . getColumnNames (  )  . get ( columnId )  ,    outputNode . getOutputSymbols (  )  . get ( columnId )  )  ;", "}", "return   new   StatsContext ( columnSymbols . build (  )  ,    queryPlan . getTypes (  )  )  ;", "}", "METHOD_END"], "methodName": ["buildStatsContext"], "fileName": "com.facebook.presto.tests.statistics.MetricComparator"}, {"methodBody": ["METHOD_START", "{", "return   statsCalculator . calculateStats ( node ,     (    source )     -  >    calculateStats ( source ,    statsCalculator ,    session ,    types )  ,    Lookup . noLookup (  )  ,    session ,    types )  ;", "}", "METHOD_END"], "methodName": ["calculateStats"], "fileName": "com.facebook.presto.tests.statistics.MetricComparator"}, {"methodBody": ["METHOD_START", "{", "String   statsQuery    =     (  (  (  \" SELECT    \"     +     ( metrics . stream (  )  . map ( Metric :  : getComputingAggregationSql )  . collect ( Collectors . joining (  \"  ,  \"  )  )  )  )     +     \"    FROM    (  \"  )     +    query )     +     \"  )  \"  ;", "try    {", "MaterializedRow   actualValuesRow    =    getOnlyElement ( runner . execute ( statsQuery )  . getMaterializedRows (  )  )  ;", "ImmutableList . Builder < OptionalDouble >    actualValues    =    ImmutableList . builder (  )  ;", "for    ( int   i    =     0  ;    i    <     ( metrics . size (  )  )  ;     +  + i )     {", "actualValues . add ( metrics . get ( i )  . getValueFromAggregationQueryResult ( actualValuesRow . getField ( i )  )  )  ;", "}", "return   actualValues . build (  )  ;", "}    catch    ( Exception   e )     {", "throw   new   RuntimeException ( String . format (  \" Failed   to   execute   query   to   compute   actual   values :     % s \"  ,    statsQuery )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["getActualValues"], "fileName": "com.facebook.presto.tests.statistics.MetricComparator"}, {"methodBody": ["METHOD_START", "{", "return   metrics . stream (  )  . map (  (    metric )     -  >    metric . getValueFromPlanNodeEstimate ( outputNodeStatisticsEstimates ,    statsContext )  )  . collect ( toImmutableList (  )  )  ;", "}", "METHOD_END"], "methodName": ["getEstimatedValues"], "fileName": "com.facebook.presto.tests.statistics.MetricComparator"}, {"methodBody": ["METHOD_START", "{", "return   transaction ( runner . getTransactionManager (  )  ,    runner . getAccessControl (  )  )  . singleStatement (  )  . execute ( runner . getDefaultSession (  )  ,     ( Session   session )     -  >    getEstimatedValuesInternal ( metrics ,    query ,    runner ,    session )  )  ;", "}", "METHOD_END"], "methodName": ["getEstimatedValues"], "fileName": "com.facebook.presto.tests.statistics.MetricComparator"}, {"methodBody": ["METHOD_START", "{", "Plan   queryPlan    =    runner . createPlan ( session ,    query )  ;", "OutputNode   outputNode    =     (  ( OutputNode )     ( queryPlan . getRoot (  )  )  )  ;", "PlanNodeStatsEstimate   outputNodeStats    =     . calculateStats ( outputNode ,    runner . getStatsCalculator (  )  ,    session ,    queryPlan . getTypes (  )  )  ;", "StatsContext   statsContext    =     . buildStatsContext ( queryPlan ,    outputNode )  ;", "return    . getEstimatedValues ( metrics ,    outputNodeStats ,    statsContext )  ;", "}", "METHOD_END"], "methodName": ["getEstimatedValuesInternal"], "fileName": "com.facebook.presto.tests.statistics.MetricComparator"}, {"methodBody": ["METHOD_START", "{", "List < OptionalDouble >    estimatedValues    =    MetricComparator . getEstimatedValues ( metrics ,    query ,    runner )  ;", "List < OptionalDouble >    actualValues    =    MetricComparator . getActualValues ( metrics ,    query ,    runner )  ;", "ImmutableList . Builder < MetricComparison >    metricComparisons    =    ImmutableList . builder (  )  ;", "for    ( int   i    =     0  ;    i    <     ( metrics . size (  )  )  ;     +  + i )     {", "metricComparisons . add ( new   MetricComparison ( metrics . get ( i )  ,    estimatedValues . get ( i )  ,    actualValues . get ( i )  )  )  ;", "}", "return   metricComparisons . build (  )  ;", "}", "METHOD_END"], "methodName": ["getMetricComparisons"], "fileName": "com.facebook.presto.tests.statistics.MetricComparator"}, {"methodBody": ["METHOD_START", "{", "return   metric ;", "}", "METHOD_END"], "methodName": ["getMetric"], "fileName": "com.facebook.presto.tests.statistics.MetricComparison"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( value . isPresent (  )  )  )     {", "return    \" UNKNOWN \"  ;", "}", "return   String . valueOf ( value . getAsDouble (  )  )  ;", "}", "METHOD_END"], "methodName": ["print"], "fileName": "com.facebook.presto.tests.statistics.MetricComparison"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( metricComparisonStrategy ,     \" metricComparisonStrategy   is   null \"  )  ;", "if    (  (  !  ( estimatedValue . isPresent (  )  )  )     &  &     (  !  ( actualValue . isPresent (  )  )  )  )     {", "return    . Result . MATCH ;", "}", "if    (  !  ( estimatedValue . isPresent (  )  )  )     {", "return    . Result . NO _ ESTIMATE ;", "}", "if    (  !  ( actualValue . isPresent (  )  )  )     {", "return    . Result . NO _ BASELINE ;", "}", "return   metricComparisonStrategy . matches ( actualValue . getAsDouble (  )  ,    estimatedValue . getAsDouble (  )  )     ?     . Result . MATCH    :     . Result . DIFFER ;", "}", "METHOD_END"], "methodName": ["result"], "fileName": "com.facebook.presto.tests.statistics.MetricComparison"}, {"methodBody": ["METHOD_START", "{", "return   MetricComparisonStrategies . absoluteError (  (  - error )  ,    error )  ;", "}", "METHOD_END"], "methodName": ["absoluteError"], "fileName": "com.facebook.presto.tests.statistics.MetricComparisonStrategies"}, {"methodBody": ["METHOD_START", "{", "checkArgument (  ( minError    <  =    maxError )  ,     \" minError    '  % s '    has   to   be   lower   or   equal   than   maxError    '  % s '  \"  ,    minError ,    maxError )  ;", "return    (    actual ,    imate )     -  >     {", "double   minEstimateValue    =    actual    +    minError ;", "double   maxEstimateValue    =    actual    +    maxError ;", "return    ( imate    >  =    minEstimateValue )     &  &     ( imate    <  =    maxEstimateValue )  ;", "}  ;", "}", "METHOD_END"], "methodName": ["absoluteError"], "fileName": "com.facebook.presto.tests.statistics.MetricComparisonStrategies"}, {"methodBody": ["METHOD_START", "{", "return   MetricComparisonStrategies . relativeError (  0  .  1  )  ;", "}", "METHOD_END"], "methodName": ["defaultTolerance"], "fileName": "com.facebook.presto.tests.statistics.MetricComparisonStrategies"}, {"methodBody": ["METHOD_START", "{", "return   MetricComparisonStrategies . absoluteError (  0  )  ;", "}", "METHOD_END"], "methodName": ["noError"], "fileName": "com.facebook.presto.tests.statistics.MetricComparisonStrategies"}, {"methodBody": ["METHOD_START", "{", "return   MetricComparisonStrategies . relativeError (  (  - error )  ,    error )  ;", "}", "METHOD_END"], "methodName": ["relativeError"], "fileName": "com.facebook.presto.tests.statistics.MetricComparisonStrategies"}, {"methodBody": ["METHOD_START", "{", "checkArgument (  ( minError    <  =    maxError )  ,     \" minError    '  % s '    has   to   be   lower   or   equal   than   maxError    '  % s '  \"  ,    minError ,    maxError )  ;", "return    (    actual ,    imate )     -  >     {", "double   minEstimateValue    =    actual    *     ( minError    +     1  )  ;", "double   maxEstimateValue    =    actual    *     ( maxError    +     1  )  ;", "return    ( imate    >  =    minEstimateValue )     &  &     ( imate    <  =    maxEstimateValue )  ;", "}  ;", "}", "METHOD_END"], "methodName": ["relativeError"], "fileName": "com.facebook.presto.tests.statistics.MetricComparisonStrategies"}, {"methodBody": ["METHOD_START", "{", "return   Double . isNaN ( value )     ?    OptionalDouble . empty (  )     :    OptionalDouble . of ( value )  ;", "}", "METHOD_END"], "methodName": ["asOptional"], "fileName": "com.facebook.presto.tests.statistics.Metrics"}, {"methodBody": ["METHOD_START", "{", "return   new   Metric (  )     {", "@ Override", "public   OptionalDouble   getValueFromPlanNodeEstimate ( PlanNodeStatsEstimate   planNodeStatsEstimate ,    StatsContext   statsContext )     {", "return   Metrics . asOptional ( Metrics . getSymbolS ( planNodeStatsEstimate ,    columnName ,    statsContext )  . getDistinctValuesCount (  )  )  ;", "}", "@ Override", "public   OptionalDouble   getValueFromAggregationQueryResult ( Object   value )     {", "return   OptionalDouble . of (  (  ( Number )     ( value )  )  . doubleValue (  )  )  ;", "}", "@ Override", "public   String   getComputingAggregationSql (  )     {", "return    (  \" count ( distinct    \"     +    columnName )     +     \"  )  \"  ;", "}", "@ Override", "public   String   toString (  )     {", "return    (  \" DISTINCT _ VALUES _ COUNT (  \"     +    columnName )     +     \"  )  \"  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["distinctValuesCount"], "fileName": "com.facebook.presto.tests.statistics.Metrics"}, {"methodBody": ["METHOD_START", "{", "return   planNodeStatsEstimate . getSymbolStatistics ( statsContext . getSymbolForColumn ( columnName )  )  ;", "}", "METHOD_END"], "methodName": ["getSymbolStatistics"], "fileName": "com.facebook.presto.tests.statistics.Metrics"}, {"methodBody": ["METHOD_START", "{", "return   new   Metric (  )     {", "@ Override", "public   OptionalDouble   getValueFromPlanNodeEstimate ( PlanNodeStatsEstimate   planNodeStatsEstimate ,    StatsContext   statsContext )     {", "double   highValue    =    Metrics . getSymbolS ( planNodeStatsEstimate ,    columnName ,    statsContext )  . getHighValue (  )  ;", "if    ( Double . isInfinite ( highValue )  )     {", "return   OptionalDouble . empty (  )  ;", "}", "return   OptionalDouble . of ( highValue )  ;", "}", "@ Override", "public   OptionalDouble   getValueFromAggregationQueryResult ( Object   value )     {", "return   Optional . ofNullable ( value )  . map ( Number . class :  : cast )  . map ( Number :  : doubleValue )  . map ( OptionalDouble :  : of )  . orElseGet ( OptionalDouble :  : empty )  ;", "}", "@ Override", "public   String   getComputingAggregationSql (  )     {", "return    (  \" max ( try _ cast (  \"     +    columnName )     +     \"    as   double )  )  \"  ;", "}", "@ Override", "public   String   toString (  )     {", "return    (  \" HIGH _ VALUE (  \"     +    columnName )     +     \"  )  \"  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["highValue"], "fileName": "com.facebook.presto.tests.statistics.Metrics"}, {"methodBody": ["METHOD_START", "{", "return   new   Metric (  )     {", "@ Override", "public   OptionalDouble   getValueFromPlanNodeEstimate ( PlanNodeStatsEstimate   planNodeStatsEstimate ,    StatsContext   statsContext )     {", "double   lowValue    =    Metrics . getSymbolS ( planNodeStatsEstimate ,    columnName ,    statsContext )  . getLowValue (  )  ;", "if    ( Double . isInfinite ( lowValue )  )     {", "return   OptionalDouble . empty (  )  ;", "}", "return   OptionalDouble . of ( lowValue )  ;", "}", "@ Override", "public   OptionalDouble   getValueFromAggregationQueryResult ( Object   value )     {", "return   Optional . ofNullable ( value )  . map ( Number . class :  : cast )  . map ( Number :  : doubleValue )  . map ( OptionalDouble :  : of )  . orElseGet ( OptionalDouble :  : empty )  ;", "}", "@ Override", "public   String   getComputingAggregationSql (  )     {", "return    (  \" try _ cast ( min (  \"     +    columnName )     +     \"  )    as   double )  \"  ;", "}", "@ Override", "public   String   toString (  )     {", "return    (  \" LOW _ VALUE (  \"     +    columnName )     +     \"  )  \"  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["lowValue"], "fileName": "com.facebook.presto.tests.statistics.Metrics"}, {"methodBody": ["METHOD_START", "{", "return   new   Metric (  )     {", "@ Override", "public   OptionalDouble   getValueFromPlanNodeEstimate ( PlanNodeStatsEstimate   planNodeStatsEstimate ,    StatsContext   statsContext )     {", "return   Metrics . asOptional ( Metrics . getSymbolS ( planNodeStatsEstimate ,    columnName ,    statsContext )  . getNullsFraction (  )  )  ;", "}", "@ Override", "public   OptionalDouble   getValueFromAggregationQueryResult ( Object   value )     {", "return   OptionalDouble . of (  (  ( Number )     ( value )  )  . doubleValue (  )  )  ;", "}", "@ Override", "public   String   getComputingAggregationSql (  )     {", "return    (  \"  ( count (  *  )    filter ( where    \"     +    columnName )     +     \"    is   null )  )     /    cast ( count (  *  )    as   double )  \"  ;", "}", "@ Override", "public   String   toString (  )     {", "return    (  \" NULLS _ FRACTION (  \"     +    columnName )     +     \"  )  \"  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["nullsFraction"], "fileName": "com.facebook.presto.tests.statistics.Metrics"}, {"methodBody": ["METHOD_START", "{", "StatisticsAssertion . Checks   checks    =    new   StatisticsAssertion . Checks (  )  ;", "checksBuilderConsumer . accept ( checks )  ;", "checks . run ( query ,    runner )  ;", "}", "METHOD_END"], "methodName": ["check"], "fileName": "com.facebook.presto.tests.statistics.StatisticsAssertion"}, {"methodBody": ["METHOD_START", "{", "checkArgument ( columnSymbols . containsKey ( columnName )  ,     (  (  \" no   symbol   found   for   column    '  \"     +    columnName )     +     \"  '  \"  )  )  ;", "return   columnSymbols . get ( columnName )  ;", "}", "METHOD_END"], "methodName": ["getSymbolForColumn"], "fileName": "com.facebook.presto.tests.statistics.StatsContext"}, {"methodBody": ["METHOD_START", "{", "checkArgument ( symbolTypes . containsKey ( symbol )  ,     (  (  \" no   type   found   found   for   symbol    '  \"     +    symbol )     +     \"  '  \"  )  )  ;", "return   symbolTypes . get ( symbol )  ;", "}", "METHOD_END"], "methodName": ["getTypeForSymbol"], "fileName": "com.facebook.presto.tests.statistics.StatsContext"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   Integer . parseInt ( firstNonNull ( properties . get (  \" splits - per - node \"  )  ,    String . valueOf ( defaultSplitsPerNode )  )  )  ;", "}    catch    ( NumberFormatException   e )     {", "throw   new   IllegalArgumentException (  \" Invalid   property   splits - per - node \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["getSplitsPerNode"], "fileName": "com.facebook.presto.tests.tpch.IndexedTpchConnectorFactory"}, {"methodBody": ["METHOD_START", "{", "return   new   MaterializedTuple ( Arrays . asList ( values )  )  ;", "}", "METHOD_END"], "methodName": ["from"], "fileName": "com.facebook.presto.tests.tpch.MaterializedTuple"}, {"methodBody": ["METHOD_START", "{", "return   values ;", "}", "METHOD_END"], "methodName": ["getValues"], "fileName": "com.facebook.presto.tests.tpch.MaterializedTuple"}, {"methodBody": ["METHOD_START", "{", "return   fixedValues ;", "}", "METHOD_END"], "methodName": ["getFixedValues"], "fileName": "com.facebook.presto.tests.tpch.TpchIndexHandle"}, {"methodBody": ["METHOD_START", "{", "return   indexColumnNames ;", "}", "METHOD_END"], "methodName": ["getIndexColumnNames"], "fileName": "com.facebook.presto.tests.tpch.TpchIndexHandle"}, {"methodBody": ["METHOD_START", "{", "return   scaleFactor ;", "}", "METHOD_END"], "methodName": ["getScaleFactor"], "fileName": "com.facebook.presto.tests.tpch.TpchIndexHandle"}, {"methodBody": ["METHOD_START", "{", "return   tableName ;", "}", "METHOD_END"], "methodName": ["getTableName"], "fileName": "com.facebook.presto.tests.tpch.TpchIndexHandle"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < Integer >    builder    =    ImmutableList . builder (  )  ;", "for    ( String   columnName    :    endSchema )     {", "int   i    =    startSchema . iOf ( columnName )  ;", "checkArgument (  ( i    !  =     (  -  1  )  )  ,     \" Column   name   in   end   that   is   not   in   the   start :     % s \"  ,    columnName )  ;", "builder . add ( i )  ;", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["computeRemap"], "fileName": "com.facebook.presto.tests.tpch.TpchIndexProvider"}, {"methodBody": ["METHOD_START", "{", "return   columnHandles . stream (  )  . map ( TpchColumnHandle . class :  : cast )  . map ( TpchColumnHandle :  : getColumnName )  . collect ( Collectors . toList (  )  )  ;", "}", "METHOD_END"], "methodName": ["handleToNames"], "fileName": "com.facebook.presto.tests.tpch.TpchIndexProvider"}, {"methodBody": ["METHOD_START", "{", "return   spec . get ( table )  ;", "}", "METHOD_END"], "methodName": ["getColumnIndexes"], "fileName": "com.facebook.presto.tests.tpch.TpchIndexSpec"}, {"methodBody": ["METHOD_START", "{", "return   spec . keySet (  )  ;", "}", "METHOD_END"], "methodName": ["listIndexedTables"], "fileName": "com.facebook.presto.tests.tpch.TpchIndexSpec"}, {"methodBody": ["METHOD_START", "{", "if    ( cursor . isNull ( field )  )     {", "return   null ;", "}", "Class <  ?  >    javaType    =    type . getJavaType (  )  ;", "if    ( javaType    =  =     ( lean . class )  )     {", "return   cursor . getBoolean ( field )  ;", "} else", "if    ( javaType    =  =     ( long . class )  )     {", "return   cursor . getLong ( field )  ;", "} else", "if    ( javaType    =  =     ( double . class )  )     {", "return   cursor . getDouble ( field )  ;", "} else", "if    ( javaType    =  =     ( io . airlift . slice . Slice . class )  )     {", "return   cursor . getSlice ( field )  . toStringUtf 8  (  )  ;", "}", "throw   new   AssertionError (  (  \" Unsupported   type :     \"     +    type )  )  ;", "}", "METHOD_END"], "methodName": ["extractObject"], "fileName": "com.facebook.presto.tests.tpch.TpchIndexedData"}, {"methodBody": ["METHOD_START", "{", "return   Lists . transform ( positions ,     (    position )     -  >     {", "checkPositionIndex ( position ,    values . size (  )  )  ;", "return   values . get ( position )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["extractPositionValues"], "fileName": "com.facebook.presto.tests.tpch.TpchIndexedData"}, {"methodBody": ["METHOD_START", "{", "List < Object >    list    =    new   ArrayList ( types . size (  )  )  ;", "for    ( int   i    =     0  ;    i    <     ( types . size (  )  )  ;    i +  +  )     {", "list . add (  . extractObject ( cursor ,    i ,    types . get ( i )  )  )  ;", "}", "return   list ;", "}", "METHOD_END"], "methodName": ["extractValues"], "fileName": "com.facebook.presto.tests.tpch.TpchIndexedData"}, {"methodBody": ["METHOD_START", "{", "TpchScaledTable   table    =    new   TpchScaledTable ( tableName ,    scaleFactor )  ;", "Set <  . TpchScaledColumn >    indexColumns    =    indexColumnNames . stream (  )  . map (  (    name )     -  >    new    . TpchScaledColumn ( table ,    name )  )  . collect ( toImmutableSet (  )  )  ;", "return   Optional . ofNullable ( indexedTables . get ( indexColumns )  )  ;", "}", "METHOD_END"], "methodName": ["getIndexedTable"], "fileName": "com.facebook.presto.tests.tpch.TpchIndexedData"}, {"methodBody": ["METHOD_START", "{", "List < Integer >    keyPositions    =    keyColumns . stream (  )  . map (  (    columnName )     -  >     {", "int   position    =    outputColumns . indexOf ( columnName )  ;", "checkState (  ( position    !  =     (  -  1  )  )  )  ;", "return   position ;", "}  )  . collect ( toImmutableList (  )  )  ;", "Builder < MaterializedTuple ,    MaterializedTuple >    indexedValuesBuilder    =    ImmutableListMultimap . builder (  )  ;", "List < Type >    outputTypes    =    recordSet . getColumnTypes (  )  ;", "List < Type >    keyTypes    =     . extractPositionValues ( outputTypes ,    keyPositions )  ;", "RecordCursor   cursor    =    recordSet . cursor (  )  ;", "while    ( cursor . advanceNextPosition (  )  )     {", "List < Object >    values    =     . extractValues ( cursor ,    outputTypes )  ;", "List < Object >    keyValues    =     . extractPositionValues ( values ,    keyPositions )  ;", "indexedValuesBuilder . put ( new   MaterializedTuple ( keyValues )  ,    new   MaterializedTuple ( values )  )  ;", "}", "return   new    . IndexedTable ( keyColumns ,    keyTypes ,    outputColumns ,    outputTypes ,    indexedValuesBuilder . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["indexTable"], "fileName": "com.facebook.presto.tests.tpch.TpchIndexedData"}, {"methodBody": ["METHOD_START", "{", "Logging . initialize (  )  ;", "DistributedQueryRunner   queryRunner    =    Builder . builder (  )  . setSingleExtraProperty (  \" http - server . http . port \"  ,     \"  8  0  8  0  \"  )  . build (  )  ;", "Thread . sleep (  1  0  )  ;", "Logger   log    =    Logger . get (  . class )  ;", "log . info (  \"  =  =  =  =  =  =  =  =    SERVER   STARTED    =  =  =  =  =  =  =  =  \"  )  ;", "log . info (  \"  \\ n =  =  =  =  \\ n % s \\ n =  =  =  =  \"  ,    queryRunner . getCoordinator (  )  . getBaseUrl (  )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.tests.tpch.TpchQueryRunner"}, {"methodBody": ["METHOD_START", "{", "DistributedQueryRunner   queryRunner    =    super . build (  )  ;", "try    {", "queryRunner . installPlugin ( new   TpchPlugin (  )  )  ;", "return   queryRunner ;", "}    catch    ( Exception   e )     {", "queryRunner . close (  )  ;", "throw   e ;", "}", "}", "METHOD_END"], "methodName": ["buildWithoutCatalogs"], "fileName": "com.facebook.presto.tests.tpch.TpchQueryRunnerBuilder"}, {"methodBody": ["METHOD_START", "{", "return   new   TpchQueryRunnerBuilder (  )  ;", "}", "METHOD_END"], "methodName": ["builder"], "fileName": "com.facebook.presto.tests.tpch.TpchQueryRunnerBuilder"}, {"methodBody": ["METHOD_START", "{", "return   scaleFactor ;", "}", "METHOD_END"], "methodName": ["getScaleFactor"], "fileName": "com.facebook.presto.tests.tpch.TpchScaledTable"}, {"methodBody": ["METHOD_START", "{", "return   tableName ;", "}", "METHOD_END"], "methodName": ["getTableName"], "fileName": "com.facebook.presto.tests.tpch.TpchScaledTable"}]