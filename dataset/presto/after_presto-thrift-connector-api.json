[{"methodBody": ["METHOD_START", "{", "checkArgument (  (  !  ( isNullOrEmpty ( name )  )  )  ,     \" name   is   null   or   empty \"  )  ;", "checkArgument (  (  (  ' a '     <  =     ( name . charAt (  0  )  )  )     &  &     (  ( name . charAt (  0  )  )     <  =     ' z '  )  )  ,     \" name   must   start   with   a   lowercase   latin   letter :     '  % s '  \"  ,    name )  ;", "for    ( int   i    =     1  ;    i    <     ( name . length (  )  )  ;    i +  +  )     {", "char   ch    =    name . charAt ( i )  ;", "checkArgument (  (  (  (  (  ' a '     <  =    ch )     &  &     ( ch    <  =     ' z '  )  )     |  |     (  (  '  0  '     <  =    ch )     &  &     ( ch    <  =     '  9  '  )  )  )     |  |     ( ch    =  =     '  _  '  )  )  ,     \" name   must   contain   only   lowercase   latin   letters ,    digits   or   underscores :     '  % s '  \"  ,    name )  ;", "}", "return   name ;", "}", "METHOD_END"], "methodName": ["checkValidName"], "fileName": "com.facebook.presto.connector.thrift.api.NameValidationUtils"}, {"methodBody": ["METHOD_START", "{", "return   new   PrestoThriftBlock ( null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    bigintArrayData )  ;", "}", "METHOD_END"], "methodName": ["bigintArrayData"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftBlock"}, {"methodBody": ["METHOD_START", "{", "return   new   PrestoThriftBlock ( null ,    bigintData ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null )  ;", "}", "METHOD_END"], "methodName": ["bigintData"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftBlock"}, {"methodBody": ["METHOD_START", "{", "return   new   PrestoThriftBlock ( null ,    null ,    null ,    null ,    booleanData ,    null ,    null ,    null ,    null ,    null )  ;", "}", "METHOD_END"], "methodName": ["booleanData"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftBlock"}, {"methodBody": ["METHOD_START", "{", "Type   type    =    recordSet . getColumnTypes (  )  . get ( columnIndex )  ;", "Builder   output    =    type . createBuilder ( null ,    positions )  ;", "Class <  ?  >    javaType    =    type . getJavaType (  )  ;", "RecordCursor   cursor    =    recordSet . cursor (  )  ;", "for    ( int   position    =     0  ;    position    <    positions ;    position +  +  )     {", "checkState ( cursor . advanceNextPosition (  )  ,     \" cursor   has   less   values   than   expected \"  )  ;", "if    ( cursor . isNull ( columnIndex )  )     {", "output . appendNull (  )  ;", "} else    {", "if    ( javaType    =  =     ( boolean . class )  )     {", "type . writeBoolean ( output ,    cursor . getBoolean ( columnIndex )  )  ;", "} else", "if    ( javaType    =  =     ( long . class )  )     {", "type . writeLong ( output ,    cursor . getLong ( columnIndex )  )  ;", "} else", "if    ( javaType    =  =     ( double . class )  )     {", "type . writeDouble ( output ,    cursor . getDouble ( columnIndex )  )  ;", "} else", "if    ( javaType    =  =     ( io . airlift . slice . Slice . class )  )     {", "io . airlift . slice . Slice   slice    =    cursor . getSlice ( columnIndex )  ;", "type . writeSlice ( output ,    slice ,     0  ,    slice . length (  )  )  ;", "} else    {", "type . writeObject ( output ,    cursor . getObject ( columnIndex )  )  ;", "}", "}", "}", "checkState (  (  !  ( cursor . advanceNextPosition (  )  )  )  ,     \" cursor   has   more   values   than   expected \"  )  ;", "return   output . build (  )  ;", "}", "METHOD_END"], "methodName": ["convertColumnToBlock"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftBlock"}, {"methodBody": ["METHOD_START", "{", "return   new   PrestoThriftBlock ( null ,    null ,    null ,    null ,    null ,    dateData ,    null ,    null ,    null ,    null )  ;", "}", "METHOD_END"], "methodName": ["dateData"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftBlock"}, {"methodBody": ["METHOD_START", "{", "return   new   PrestoThriftBlock ( null ,    null ,    doubleData ,    null ,    null ,    null ,    null ,    null ,    null ,    null )  ;", "}", "METHOD_END"], "methodName": ["doubleData"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftBlock"}, {"methodBody": ["METHOD_START", "{", "switch    ( type . getTypeSignature (  )  . getBase (  )  )     {", "case   INTEGER    :", "return   PrestoThriftInteger . fromBlock ( block )  ;", "case   BIGINT    :", "return   igint . fromBlock ( block )  ;", "case   DOUBLE    :", "return   PrestoThriftDouble . fromBlock ( block )  ;", "case   VARCHAR    :", "return   PrestoThriftVarchar . fromBlock ( block ,    type )  ;", "case   BOOLEAN    :", "return   oolean . fromBlock ( block )  ;", "case   DATE    :", "return   PrestoThriftDate . fromBlock ( block )  ;", "case   TIMESTAMP    :", "return   PrestoThriftTimestamp . fromBlock ( block )  ;", "case   JSON    :", "return   PrestoThriftJson . fromBlock ( block ,    type )  ;", "case   HYPER _ LOG _ LOG    :", "return   PrestoThriftHyperLogLog . fromBlock ( block )  ;", "case   ARRAY    :", "Type   elementType    =    getOnlyElement ( type . getTypeParameters (  )  )  ;", "if    ( BIGINT . equals ( elementType )  )     {", "return   igintArray . fromBlock ( block )  ;", "} else    {", "throw   new   IllegalArgumentException (  (  \" Unsupported   array   block   type :     \"     +    type )  )  ;", "}", "default    :", "throw   new   IllegalArgumentException (  (  \" Unsupported   block   type :     \"     +    type )  )  ;", "}", "}", "METHOD_END"], "methodName": ["fromBlock"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftBlock"}, {"methodBody": ["METHOD_START", "{", "Type   type    =    recordSet . getColumnTypes (  )  . get ( columnIndex )  ;", "switch    ( type . getTypeSignature (  )  . getBase (  )  )     {", "case   INTEGER    :", "return   PrestoThriftInteger . fromRecordSetColumn ( recordSet ,    columnIndex ,    totalRecords )  ;", "case   BIGINT    :", "return   PrestoThriftBigint . fromRecordSetColumn ( recordSet ,    columnIndex ,    totalRecords )  ;", "case   DATE    :", "return   PrestoThriftDate . fromRecordSetColumn ( recordSet ,    columnIndex ,    totalRecords )  ;", "case   TIMESTAMP    :", "return   PrestoThriftTimestamp . fromRecordSetColumn ( recordSet ,    columnIndex ,    totalRecords )  ;", "default    :", "return    . fromBlock (  . convertColumnToBlock ( recordSet ,    columnIndex ,    totalRecords )  ,    type )  ;", "}", "}", "METHOD_END"], "methodName": ["fromRecordSetColumn"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftBlock"}, {"methodBody": ["METHOD_START", "{", "return   bigintArrayData ;", "}", "METHOD_END"], "methodName": ["getBigintArrayData"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftBlock"}, {"methodBody": ["METHOD_START", "{", "return   bigintData ;", "}", "METHOD_END"], "methodName": ["getBigintData"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftBlock"}, {"methodBody": ["METHOD_START", "{", "return   booleanData ;", "}", "METHOD_END"], "methodName": ["getBooleanData"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftBlock"}, {"methodBody": ["METHOD_START", "{", "return   dateData ;", "}", "METHOD_END"], "methodName": ["getDateData"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftBlock"}, {"methodBody": ["METHOD_START", "{", "return   doubleData ;", "}", "METHOD_END"], "methodName": ["getDoubleData"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftBlock"}, {"methodBody": ["METHOD_START", "{", "return   hyperLogLogData ;", "}", "METHOD_END"], "methodName": ["getHyperLogLogData"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftBlock"}, {"methodBody": ["METHOD_START", "{", "return   integerData ;", "}", "METHOD_END"], "methodName": ["getIntegerData"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftBlock"}, {"methodBody": ["METHOD_START", "{", "return   jsonData ;", "}", "METHOD_END"], "methodName": ["getJsonData"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftBlock"}, {"methodBody": ["METHOD_START", "{", "return   timestampData ;", "}", "METHOD_END"], "methodName": ["getTimestampData"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftBlock"}, {"methodBody": ["METHOD_START", "{", "return   varcharData ;", "}", "METHOD_END"], "methodName": ["getVarcharData"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftBlock"}, {"methodBody": ["METHOD_START", "{", "return   new   PrestoThriftBlock ( null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    hyperLogLogData ,    null )  ;", "}", "METHOD_END"], "methodName": ["hyperLogLogData"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftBlock"}, {"methodBody": ["METHOD_START", "{", "return   new   PrestoThriftBlock ( integerData ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null )  ;", "}", "METHOD_END"], "methodName": ["integerData"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftBlock"}, {"methodBody": ["METHOD_START", "{", "return   new   PrestoThriftBlock ( null ,    null ,    null ,    null ,    null ,    null ,    null ,    jsonData ,    null ,    null )  ;", "}", "METHOD_END"], "methodName": ["jsonData"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftBlock"}, {"methodBody": ["METHOD_START", "{", "return   dataReference . numberOfRecords (  )  ;", "}", "METHOD_END"], "methodName": ["numberOfRecords"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftBlock"}, {"methodBody": ["METHOD_START", "{", "PrestoThriftColumnData   result    =    null ;", "for    ( PrestoThriftColumnData   data    :    columnsData )     {", "if    ( data    !  =    null )     {", "checkArgument (  ( result    =  =    null )  ,     \" more   than   one   type   is   present \"  )  ;", "result    =    data ;", "}", "}", "checkArgument (  ( result    !  =    null )  ,     \" no   types   are   present \"  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["theOnlyNonNull"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftBlock"}, {"methodBody": ["METHOD_START", "{", "return   new   PrestoThriftBlock ( null ,    null ,    null ,    null ,    null ,    null ,    timestampData ,    null ,    null ,    null )  ;", "}", "METHOD_END"], "methodName": ["timestampData"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftBlock"}, {"methodBody": ["METHOD_START", "{", "return   dataReference . toBlock ( desiredType )  ;", "}", "METHOD_END"], "methodName": ["toBlock"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftBlock"}, {"methodBody": ["METHOD_START", "{", "return   new   PrestoThriftBlock ( null ,    null ,    null ,    varcharData ,    null ,    null ,    null ,    null ,    null ,    null )  ;", "}", "METHOD_END"], "methodName": ["varcharData"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftBlock"}, {"methodBody": ["METHOD_START", "{", "return   comment ;", "}", "METHOD_END"], "methodName": ["getComment"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftColumnMetadata"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftColumnMetadata"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftColumnMetadata"}, {"methodBody": ["METHOD_START", "{", "return   hidden ;", "}", "METHOD_END"], "methodName": ["isHidden"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftColumnMetadata"}, {"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . spi . ColumnMetadata ( name ,    typeManager . getType ( parseTypeSignature ( type )  )  ,    comment ,    hidden )  ;", "}", "METHOD_END"], "methodName": ["toColumnMetadata"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftColumnMetadata"}, {"methodBody": ["METHOD_START", "{", "return   new   PrestoThriftDomain ( PrestoThriftValueSet . fromValueSet ( domain . getValues (  )  )  ,    domain . isNullAllowed (  )  )  ;", "}", "METHOD_END"], "methodName": ["fromDomain"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftDomain"}, {"methodBody": ["METHOD_START", "{", "return   valueSet ;", "}", "METHOD_END"], "methodName": ["getValueSet"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftDomain"}, {"methodBody": ["METHOD_START", "{", "return   nullAllowed ;", "}", "METHOD_END"], "methodName": ["isNullAllowed"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftDomain"}, {"methodBody": ["METHOD_START", "{", "return   host ;", "}", "METHOD_END"], "methodName": ["getHost"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftHostAddress"}, {"methodBody": ["METHOD_START", "{", "return   port ;", "}", "METHOD_END"], "methodName": ["getPort"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftHostAddress"}, {"methodBody": ["METHOD_START", "{", "return   HostAddress . fromParts ( getHost (  )  ,    getPort (  )  )  ;", "}", "METHOD_END"], "methodName": ["toHostAddress"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftHostAddress"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftId"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( value . length )     *     2  )     <  =     ( PrestoThriftId . MAX _ DISPLAY _ CHARACTERS )  )     {", "return   BaseEncoding . base 1  6  (  )  . encode ( value )  ;", "}", "return    (  ( BaseEncoding . base 1  6  (  )  . encode ( value ,     0  ,    PrestoThriftId . PREFIX _ SUFFIX _ BYTES )  )     +     ( PrestoThriftId . FILLER )  )     +     ( BaseEncoding . base 1  6  (  )  . encode ( value ,     (  ( value . length )     -     ( PrestoThriftId . PREFIX _ SUFFIX _ BYTES )  )  ,    PrestoThriftId . PREFIX _ SUFFIX _ BYTES )  )  ;", "}", "METHOD_END"], "methodName": ["summarize"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftId"}, {"methodBody": ["METHOD_START", "{", "return   columns ;", "}", "METHOD_END"], "methodName": ["getColumns"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftNullableColumnSet"}, {"methodBody": ["METHOD_START", "{", "return   schemaName ;", "}", "METHOD_END"], "methodName": ["getSchemaName"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftNullableSchemaName"}, {"methodBody": ["METHOD_START", "{", "return   tableMetadata ;", "}", "METHOD_END"], "methodName": ["getTableMetadata"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftNullableTableMetadata"}, {"methodBody": ["METHOD_START", "{", "return   token ;", "}", "METHOD_END"], "methodName": ["getToken"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftNullableToken"}, {"methodBody": ["METHOD_START", "{", "for    ( int   i    =     0  ;    i    <     ( columnBlocks . size (  )  )  ;    i +  +  )     {", "checkArgument (  (  ( columnBlocks . get ( i )  . numberOfRecords (  )  )     =  =    expedNumberOfRows )  ,     \" Incorr   number   of   records   for   column   with   index    % s :    exped    % s ,    got    % s \"  ,    i ,    expedNumberOfRows ,    columnBlocks . get ( i )  . numberOfRecords (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkAllColumnsAreOfExpectedSize"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftPageResult"}, {"methodBody": ["METHOD_START", "{", "List < Type >    types    =    recordSet . getColumnTypes (  )  ;", "int   numberOfColumns    =    types . size (  )  ;", "int   positions    =     . totalRecords ( recordSet )  ;", "if    ( numberOfColumns    =  =     0  )     {", "return   new    ( ImmutableList . of (  )  ,    positions ,    null )  ;", "}", "List < PrestoThriftBlock >    thriftBlocks    =    new   ArrayList <  >  ( numberOfColumns )  ;", "for    ( int   columnIndex    =     0  ;    columnIndex    <    numberOfColumns ;    columnIndex +  +  )     {", "thriftBlocks . add ( PrestoThriftBlock . fromRecordSetColumn ( recordSet ,    columnIndex ,    positions )  )  ;", "}", "return   new    ( thriftBlocks ,    positions ,    null )  ;", "}", "METHOD_END"], "methodName": ["fromRecordSet"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftPageResult"}, {"methodBody": ["METHOD_START", "{", "return   columnBlocks ;", "}", "METHOD_END"], "methodName": ["getColumnBlocks"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftPageResult"}, {"methodBody": ["METHOD_START", "{", "return   nextToken ;", "}", "METHOD_END"], "methodName": ["getNextToken"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftPageResult"}, {"methodBody": ["METHOD_START", "{", "return   rowCount ;", "}", "METHOD_END"], "methodName": ["getRowCount"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftPageResult"}, {"methodBody": ["METHOD_START", "{", "if    (  ( rowCount )     =  =     0  )     {", "return   null ;", "}", "checkArgument (  (  ( columnBlocks . size (  )  )     =  =     ( columnTypes . size (  )  )  )  ,     \" columns   and   types   have   different   sizes \"  )  ;", "int   numberOfColumns    =    columnBlocks . size (  )  ;", "if    ( numberOfColumns    =  =     0  )     {", "return   new    ( rowCount )  ;", "}", "Block [  ]    blocks    =    new   Block [ numberOfColumns ]  ;", "for    ( int   i    =     0  ;    i    <    numberOfColumns ;    i +  +  )     {", "blocks [ i ]     =    columnBlocks . get ( i )  . toBlock ( columnTypes . get ( i )  )  ;", "}", "return   new    ( blocks )  ;", "}", "METHOD_END"], "methodName": ["toPage"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftPageResult"}, {"methodBody": ["METHOD_START", "{", "RecordCursor   cursor    =    recordSet . cursor (  )  ;", "int   r    =     0  ;", "while    ( cursor . advanceNextPosition (  )  )     {", "r +  +  ;", "}", "return   r ;", "}", "METHOD_END"], "methodName": ["totalRecords"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftPageResult"}, {"methodBody": ["METHOD_START", "{", "return   schemaName ;", "}", "METHOD_END"], "methodName": ["getSchemaName"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftSchemaTableName"}, {"methodBody": ["METHOD_START", "{", "return   tableName ;", "}", "METHOD_END"], "methodName": ["getTableName"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftSchemaTableName"}, {"methodBody": ["METHOD_START", "{", "return   new   SchemaTableName ( getSchemaName (  )  ,    getTableName (  )  )  ;", "}", "METHOD_END"], "methodName": ["toSchemaTableName"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftSchemaTableName"}, {"methodBody": ["METHOD_START", "{", "return   retryable ;", "}", "METHOD_END"], "methodName": ["isRetryable"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftServiceException"}, {"methodBody": ["METHOD_START", "{", "return   hosts ;", "}", "METHOD_END"], "methodName": ["getHosts"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftSplit"}, {"methodBody": ["METHOD_START", "{", "return   splitId ;", "}", "METHOD_END"], "methodName": ["getSplitId"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftSplit"}, {"methodBody": ["METHOD_START", "{", "return   nextToken ;", "}", "METHOD_END"], "methodName": ["getNextToken"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftSplitBatch"}, {"methodBody": ["METHOD_START", "{", "return   splits ;", "}", "METHOD_END"], "methodName": ["getSplits"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftSplitBatch"}, {"methodBody": ["METHOD_START", "{", "return   columns ;", "}", "METHOD_END"], "methodName": ["getColumns"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftTableMetadata"}, {"methodBody": ["METHOD_START", "{", "return   comment ;", "}", "METHOD_END"], "methodName": ["getComment"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftTableMetadata"}, {"methodBody": ["METHOD_START", "{", "return   indexableKeys ;", "}", "METHOD_END"], "methodName": ["getIndexableKeys"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftTableMetadata"}, {"methodBody": ["METHOD_START", "{", "return   schemaTableName ;", "}", "METHOD_END"], "methodName": ["getSchemaTableName"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftTableMetadata"}, {"methodBody": ["METHOD_START", "{", "return   domains ;", "}", "METHOD_END"], "methodName": ["getDomains"], "fileName": "com.facebook.presto.connector.thrift.api.PrestoThriftTupleDomain"}, {"methodBody": ["METHOD_START", "{", "NameValidationUtils . checkValidName (  \" abc 0  1  _ def 2  \"  )  ;", "assertThrows (  (  )     -  >    checkValidName ( null )  )  ;", "assertThrows (  (  )     -  >    checkValidName (  \"  \"  )  )  ;", "assertThrows (  (  )     -  >    checkValidName (  \" Abc \"  )  )  ;", "assertThrows (  (  )     -  >    checkValidName (  \"  0 abc \"  )  )  ;", "assertThrows (  (  )     -  >    checkValidName (  \"  _ abc \"  )  )  ;", "assertThrows (  (  )     -  >    checkValidName (  \" aBc \"  )  )  ;", "assertThrows (  (  )     -  >    checkValidName (  \" ab - c \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testCheckValidColumnName"], "fileName": "com.facebook.presto.connector.thrift.api.TestNameValidationUtils"}, {"methodBody": ["METHOD_START", "{", "int   length    =    values . length ;", "byte [  ]    ult    =    new   byte [ length ]  ;", "for    ( int   i    =     0  ;    i    <    length ;    i +  +  )     {", "ult [ i ]     =     (  ( byte )     ( values [ i ]  )  )  ;", "}", "return   ult ;", "}", "METHOD_END"], "methodName": ["bytes"], "fileName": "com.facebook.presto.connector.thrift.api.TestPrestoThriftId"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( PrestoThriftId . summarize ( TestPrestoThriftId . bytes (  )  )  ,     \"  \"  )  ;", "assertEquals ( PrestoThriftId . summarize ( TestPrestoThriftId . bytes (  1  )  )  ,     \"  0  1  \"  )  ;", "assertEquals ( PrestoThriftId . summarize ( TestPrestoThriftId . bytes (  2  5  5  ,     2  5  4  ,     2  5  3  ,     2  5  2  ,     2  5  1  ,     2  5  0  ,     2  4  9  )  )  ,     \" FFFEFDFCFBFAF 9  \"  )  ;", "assertEquals ( PrestoThriftId . summarize ( TestPrestoThriftId . bytes (  0  ,     1  ,     2  ,     3  ,     4  ,     5  ,     6  ,     7  ,     8  ,     9  ,     2  4  9  ,     2  5  0  ,     2  5  1  ,     2  5  2  ,     2  5  3  ,     2  5  4  ,     2  5  5  )  )  ,     \"  0  0  0  1  0  2  0  3  0  4  0  5  0  6  0  7  0  8  0  9 F 9 FAFBFCFDFEFF \"  )  ;", "assertEquals ( PrestoThriftId . summarize ( TestPrestoThriftId . bytes (  0  ,     1  ,     2  ,     3  ,     4  ,     5  ,     6  ,     7  ,     8  ,     9  ,     1  0  ,     2  4  7  ,     2  4  8  ,     2  4  9  ,     2  5  0  ,     2  5  1  ,     2  5  2  ,     2  5  3  ,     2  5  4  ,     2  5  5  )  )  ,     \"  0  0  0  1  0  2  0  3  0  4  0  5  0  6  0  7  .  . F 8 F 9 FAFBFCFDFEFF \"  )  ;", "}", "METHOD_END"], "methodName": ["testSummarize"], "fileName": "com.facebook.presto.connector.thrift.api.TestPrestoThriftId"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( actual . getPositionCount (  )  ,    expected . getPositionCount (  )  )  ;", "int   positions    =    actual . getPositionCount (  )  ;", "for    ( int   i    =     0  ;    i    <    positions ;    i +  +  )     {", "Object   actualValue    =    columnDefinition . extractValue ( actual ,    i )  ;", "Object   expectedValue    =    columnDefinition . extractValue ( expected ,    i )  ;", "assertEquals ( actualValue ,    expectedValue )  ;", "}", "}", "METHOD_END"], "methodName": ["assertBlock"], "fileName": "com.facebook.presto.connector.thrift.api.TestReadWrite"}, {"methodBody": ["METHOD_START", "{", "int   numberOfElements    =    random . nextInt ( TestReadWrite . MAX _ ARRAY _ GENERATED _ LENGTH )  ;", "BlockBuilder   builder    =    parentBuilder . beginBlockEntry (  )  ;", "for    ( int   i    =     0  ;    i    <    numberOfElements ;    i +  +  )     {", "if    (  ( random . nextDouble (  )  )     <     ( TestReadWrite . NULL _ FRACTION )  )     {", "builder . appendNull (  )  ;", "} else    {", "builder . writeLong ( random . nextLong (  )  )  ;", "}", "}", "parentBuilder . closeEntry (  )  ;", "}", "METHOD_END"], "methodName": ["generateBigintArray"], "fileName": "com.facebook.presto.connector.thrift.api.TestReadWrite"}, {"methodBody": ["METHOD_START", "{", "BlockBuilder   builder    =    column . getType (  )  . createBlockBuilder ( null ,    records )  ;", "for    ( int   i    =     0  ;    i    <    records ;    i +  +  )     {", "if    (  ( random . nextDouble (  )  )     <     (  . NULL _ FRACTION )  )     {", "builder . appendNull (  )  ;", "} else    {", "column . writeNextRandomValue ( random ,    builder )  ;", "}", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["generateColumn"], "fileName": "com.facebook.presto.connector.thrift.api.TestReadWrite"}, {"methodBody": ["METHOD_START", "{", "return    ( TestReadWrite . MIN _ GENERATED _ DATE )     +     ( random . nextInt (  (  ( TestReadWrite . MAX _ GENERATED _ DATE )     -     ( TestReadWrite . MIN _ GENERATED _ DATE )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["nextDate"], "fileName": "com.facebook.presto.connector.thrift.api.TestReadWrite"}, {"methodBody": ["METHOD_START", "{", "HyperLogLog   hll    =    HyperLogLog . newInstance ( TestReadWrite . HYPER _ LOG _ LOG _ BUCKETS )  ;", "int   size    =    random . nextInt ( TestReadWrite . MAX _ HYPER _ LOG _ LOG _ ELEMENTS )  ;", "for    ( int   i    =     0  ;    i    <    size ;    i +  +  )     {", "hll . add ( random . nextLong (  )  )  ;", "}", "return   hll . serialize (  )  ;", "}", "METHOD_END"], "methodName": ["nextHyperLogLog"], "fileName": "com.facebook.presto.connector.thrift.api.TestReadWrite"}, {"methodBody": ["METHOD_START", "{", "return   TestReadWrite . nextString ( random ,    TestReadWrite . MAX _ VARCHAR _ GENERATED _ LENGTH )  ;", "}", "METHOD_END"], "methodName": ["nextString"], "fileName": "com.facebook.presto.connector.thrift.api.TestReadWrite"}, {"methodBody": ["METHOD_START", "{", "int   size    =    random . nextInt ( maxLength )  ;", "char [  ]    result    =    new   char [ size ]  ;", "for    ( int   i    =     0  ;    i    <    size ;    i +  +  )     {", "result [ i ]     =     . SYMBOLS [ random . nextInt (  . SYMBOLS . length )  ]  ;", "}", "return   new   String ( result )  ;", "}", "METHOD_END"], "methodName": ["nextString"], "fileName": "com.facebook.presto.connector.thrift.api.TestReadWrite"}, {"methodBody": ["METHOD_START", "{", "return    ( TestReadWrite . MIN _ GENERATED _ TIMESTAMP )     +     (  ( long )     (  ( random . nextDouble (  )  )     *     (  ( TestReadWrite . MAX _ GENERATED _ TIMESTAMP )     -     ( TestReadWrite . MIN _ GENERATED _ TIMESTAMP )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["nextTimestamp"], "fileName": "com.facebook.presto.connector.thrift.api.TestReadWrite"}, {"methodBody": ["METHOD_START", "{", "Random   random    =    new   Random ( multiRowPageSeedGenerator . incrementAndGet (  )  )  ;", "testPage ( random ,     (  ( random . nextInt (  1  0  0  0  0  )  )     +     1  0  0  0  0  )  )  ;", "}", "METHOD_END"], "methodName": ["testMultiRowPageReadWrite"], "fileName": "com.facebook.presto.connector.thrift.api.TestReadWrite"}, {"methodBody": ["METHOD_START", "{", "Random   random    =    new   Random ( multiRowRecordSetSeedGenerator . incrementAndGet (  )  )  ;", "testRecordSe ( random ,     (  ( random . nextInt (  1  0  0  0  0  )  )     +     1  0  0  0  0  )  )  ;", "}", "METHOD_END"], "methodName": ["testMultiRowRecordSetReadWrite"], "fileName": "com.facebook.presto.connector.thrift.api.TestReadWrite"}, {"methodBody": ["METHOD_START", "{", "testReadWrite ( random ,    records ,     (    blocks )     -  >     {", "List < PrestoThriftBlock >    columnBlocks    =    new   ArrayList <  >  ( columns . size (  )  )  ;", "for    ( int   i    =     0  ;    i    <     ( columns . size (  )  )  ;    i +  +  )     {", "columnBlocks . add ( PrestoThriftBlock . fromBlock ( blocks . get ( i )  ,    columns . get ( i )  . getType (  )  )  )  ;", "}", "return   new   PrestoThriftPageResult ( columnBlocks ,    records ,    null )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["testPageReadWrite"], "fileName": "com.facebook.presto.connector.thrift.api.TestReadWrite"}, {"methodBody": ["METHOD_START", "{", "List < Block >    inputBlocks    =    new   ArrayList <  >  ( columns . size (  )  )  ;", "for    (  . ColumnDefinition   column    :    columns )     {", "inputBlocks . add (  . generateColumn ( column ,    random ,    records )  )  ;", "}", "PrestoThriftPageResult   batch    =    convert . apply ( inputBlocks )  ;", "Page   page    =    batch . toPage ( columns . stream (  )  . map (  . ColumnDefinition :  : getType )  . collect ( toImmutableList (  )  )  )  ;", "assertNotNull ( page )  ;", "assertEquals ( page . getChannelCount (  )  ,    columns . size (  )  )  ;", "for    ( int   i    =     0  ;    i    <     ( columns . size (  )  )  ;    i +  +  )     {", "Block   actual    =    page . getBlock ( i )  ;", "Block   expected    =    inputBlocks . get ( i )  ;", ". assertBlock ( actual ,    expected ,    columns . get ( i )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testReadWrite"], "fileName": "com.facebook.presto.connector.thrift.api.TestReadWrite"}, {"methodBody": ["METHOD_START", "{", "testReadWrite ( random ,    records ,     (    blocks )     -  >     {", "List < Type >    types    =    columns . stream (  )  . map ( TestReadWrite . ColumnDefinition :  : getType )  . collect ( toImmutableList (  )  )  ;", "PageRecordSet   inputRecordSet    =    new   PageRecordSet ( types ,    new   spi . Page ( blocks . toArray ( new   Block [ blocks . size (  )  ]  )  )  )  ;", "return   PrestoThriftPageResult . fromRecordSet ( inputRecordSet )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["testRecordSetReadWrite"], "fileName": "com.facebook.presto.connector.thrift.api.TestReadWrite"}, {"methodBody": ["METHOD_START", "{", "testPageReadWrite ( new   Random ( singleRowPageSeedGenerator . incrementAndGet (  )  )  ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testSingleRowPageReadWrite"], "fileName": "com.facebook.presto.connector.thrift.api.TestReadWrite"}, {"methodBody": ["METHOD_START", "{", "testRecordSetReadWrite ( new   Random ( singleRowRecordSetSeedGenerator . incrementAndGet (  )  )  ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testSingleRowRecordSetReadWrite"], "fileName": "com.facebook.presto.connector.thrift.api.TestReadWrite"}, {"methodBody": ["METHOD_START", "{", "return   PrestoThriftTypeUtils . fromLongBasedBlock ( block ,    BIGINT ,     (    nulls ,    longs )     -  >    bigintData ( new   PrestoThriftBigint ( nulls ,    longs )  )  )  ;", "}", "METHOD_END"], "methodName": ["fromBlock"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftBigint"}, {"methodBody": ["METHOD_START", "{", "return   PrestoThriftTypeUtils . fromLongBasedColumn ( recordSet ,    columnIndex ,    totalRecords ,     (    nulls ,    longs )     -  >    bigintData ( new   PrestoThriftBigint ( nulls ,    longs )  )  )  ;", "}", "METHOD_END"], "methodName": ["fromRecordSetColumn"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftBigint"}, {"methodBody": ["METHOD_START", "{", "return   longs ;", "}", "METHOD_END"], "methodName": ["getLongs"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftBigint"}, {"methodBody": ["METHOD_START", "{", "return   nulls ;", "}", "METHOD_END"], "methodName": ["getNulls"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftBigint"}, {"methodBody": ["METHOD_START", "{", "return    (  ( nulls    =  =    null )     |  |     ( longs    =  =    null )  )     |  |     (  ( nulls . length )     =  =     ( longs . length )  )  ;", "}", "METHOD_END"], "methodName": ["sameSizeIfPresent"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftBigint"}, {"methodBody": ["METHOD_START", "{", "checkArgument (  ( block   instanceof   AbstractArrayBlock )  ,     \" block   is   not   of   an   array   type \"  )  ;", "AbstractArrayBlock   arrayBlock    =     (  ( AbstractArrayBlock )     ( block )  )  ;", "int   positions    =    arrayBlock . getPositionCount (  )  ;", "if    ( positions    =  =     0  )     {", "return   PrestoThriftBlock . bigintArrayData ( new    ( null ,    null ,    null )  )  ;", "}", "boolean [  ]    nulls    =    null ;", "int [  ]    sizes    =    null ;", "for    ( int   position    =     0  ;    position    <    positions ;    position +  +  )     {", "if    ( arrayBlock . isNull ( position )  )     {", "if    ( nulls    =  =    null )     {", "nulls    =    new   boolean [ positions ]  ;", "}", "nulls [ position ]     =    true ;", "} else    {", "if    ( sizes    =  =    null )     {", "sizes    =    new   int [ positions ]  ;", "}", "sizes [ position ]     =    arrayBlock . apply (  (    valuesBlock ,    startPosition ,    length )     -  >    length ,    position )  ;", "}", "}", "PrestoThriftBigint   values    =    arrayBlock . apply (  (    valuesBlock ,    startPosition ,    length )     -  >    PrestoThriftBigint . fromBlock ( valuesBlock )  ,     0  )  . getBigintData (  )  ;", "checkState (  ( values    !  =    null )  ,     \" values   must   be   present \"  )  ;", "checkState (  (  ( PrestoThriftTypeUtils . totalSize ( nulls ,    sizes )  )     =  =     ( values . numberOfRecords (  )  )  )  ,     \" unexpected   number   of   values \"  )  ;", "return   PrestoThriftBlock . bigintArrayData ( new    ( nulls ,    sizes ,    values )  )  ;", "}", "METHOD_END"], "methodName": ["fromBlock"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftBigintArray"}, {"methodBody": ["METHOD_START", "{", "return   nulls ;", "}", "METHOD_END"], "methodName": ["getNulls"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftBigintArray"}, {"methodBody": ["METHOD_START", "{", "return   sizes ;", "}", "METHOD_END"], "methodName": ["getSizes"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftBigintArray"}, {"methodBody": ["METHOD_START", "{", "return   values ;", "}", "METHOD_END"], "methodName": ["getValues"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftBigintArray"}, {"methodBody": ["METHOD_START", "{", "return   values    !  =    null    ?    values . numberOfRecords (  )     :     0  ;", "}", "METHOD_END"], "methodName": ["numberOfValues"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftBigintArray"}, {"methodBody": ["METHOD_START", "{", "int   positions    =    block . getPositionCount (  )  ;", "if    ( positions    =  =     0  )     {", "return   PrestoThriftBlock . booleanData ( new    ( null ,    null )  )  ;", "}", "boolean [  ]    nulls    =    null ;", "boolean [  ]    booleans    =    null ;", "for    ( int   position    =     0  ;    position    <    positions ;    position +  +  )     {", "if    ( block . isNull ( position )  )     {", "if    ( nulls    =  =    null )     {", "nulls    =    new   boolean [ positions ]  ;", "}", "nulls [ position ]     =    true ;", "} else    {", "if    ( booleans    =  =    null )     {", "booleans    =    new   boolean [ positions ]  ;", "}", "booleans [ position ]     =    BOOLEAN . getBoolean ( block ,    position )  ;", "}", "}", "return   PrestoThriftBlock . booleanData ( new    ( nulls ,    booleans )  )  ;", "}", "METHOD_END"], "methodName": ["fromBlock"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftBoolean"}, {"methodBody": ["METHOD_START", "{", "return   booleans ;", "}", "METHOD_END"], "methodName": ["getBooleans"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftBoolean"}, {"methodBody": ["METHOD_START", "{", "return   nulls ;", "}", "METHOD_END"], "methodName": ["getNulls"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftBoolean"}, {"methodBody": ["METHOD_START", "{", "return    (  ( nulls    =  =    null )     |  |     ( booleans    =  =    null )  )     |  |     (  ( nulls . length )     =  =     ( booleans . length )  )  ;", "}", "METHOD_END"], "methodName": ["sameSizeIfPresent"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftBoolean"}, {"methodBody": ["METHOD_START", "{", "byte [  ]    bytes    =    new   byte [ booleans . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( booleans . length )  ;    i +  +  )     {", "bytes [ i ]     =     ( booleans [ i ]  )     ?     (  ( byte )     (  1  )  )     :     (  ( byte )     (  0  )  )  ;", "}", "return   bytes ;", "}", "METHOD_END"], "methodName": ["toByteArray"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftBoolean"}, {"methodBody": ["METHOD_START", "{", "return   PrestoThriftTypeUtils . fromIntBasedBlock ( block ,    DATE ,     (    nulls ,    ints )     -  >    dateData ( new   PrestoThriftDate ( nulls ,    ints )  )  )  ;", "}", "METHOD_END"], "methodName": ["fromBlock"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftDate"}, {"methodBody": ["METHOD_START", "{", "return   PrestoThriftTypeUtils . fromIntBasedColumn ( recordSet ,    columnIndex ,    totalRecords ,     (    nulls ,    ints )     -  >    dateData ( new   PrestoThriftDate ( nulls ,    ints )  )  )  ;", "}", "METHOD_END"], "methodName": ["fromRecordSetColumn"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftDate"}, {"methodBody": ["METHOD_START", "{", "return   dates ;", "}", "METHOD_END"], "methodName": ["getDates"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftDate"}, {"methodBody": ["METHOD_START", "{", "return   nulls ;", "}", "METHOD_END"], "methodName": ["getNulls"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftDate"}, {"methodBody": ["METHOD_START", "{", "return    (  ( nulls    =  =    null )     |  |     ( dates    =  =    null )  )     |  |     (  ( nulls . length )     =  =     ( dates . length )  )  ;", "}", "METHOD_END"], "methodName": ["sameSizeIfPresent"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftDate"}, {"methodBody": ["METHOD_START", "{", "int   positions    =    block . getPositionCount (  )  ;", "if    ( positions    =  =     0  )     {", "return   PrestoThriftBlock . booleanData ( new   PrestoThriftBoolean ( null ,    null )  )  ;", "}", "boolean [  ]    nulls    =    null ;", "double [  ]    doubles    =    null ;", "for    ( int   position    =     0  ;    position    <    positions ;    position +  +  )     {", "if    ( block . isNull ( position )  )     {", "if    ( nulls    =  =    null )     {", "nulls    =    new   boolean [ positions ]  ;", "}", "nulls [ position ]     =    true ;", "} else    {", "if    ( doubles    =  =    null )     {", "doubles    =    new   double [ positions ]  ;", "}", "doubles [ position ]     =    DOUBLE . getDouble ( block ,    position )  ;", "}", "}", "return   PrestoThriftBlock . doubleData ( new    ( nulls ,    doubles )  )  ;", "}", "METHOD_END"], "methodName": ["fromBlock"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftDouble"}, {"methodBody": ["METHOD_START", "{", "return   doubles ;", "}", "METHOD_END"], "methodName": ["getDoubles"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftDouble"}, {"methodBody": ["METHOD_START", "{", "return   nulls ;", "}", "METHOD_END"], "methodName": ["getNulls"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftDouble"}, {"methodBody": ["METHOD_START", "{", "return    (  ( nulls    =  =    null )     |  |     ( doubles    =  =    null )  )     |  |     (  ( nulls . length )     =  =     ( doubles . length )  )  ;", "}", "METHOD_END"], "methodName": ["sameSizeIfPresent"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftDouble"}, {"methodBody": ["METHOD_START", "{", "return   SliceData . fromSliceBasedBlock ( block ,    HYPER _ LOG _ LOG ,     (    nulls ,    sizes ,    bytes )     -  >    hyperLogLogData ( new   PrestoThriftHyperLogLog ( nulls ,    sizes ,    bytes )  )  )  ;", "}", "METHOD_END"], "methodName": ["fromBlock"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftHyperLogLog"}, {"methodBody": ["METHOD_START", "{", "return   sliceType . getBytes (  )  ;", "}", "METHOD_END"], "methodName": ["getBytes"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftHyperLogLog"}, {"methodBody": ["METHOD_START", "{", "return   sliceType . getNulls (  )  ;", "}", "METHOD_END"], "methodName": ["getNulls"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftHyperLogLog"}, {"methodBody": ["METHOD_START", "{", "return   sliceType . getSizes (  )  ;", "}", "METHOD_END"], "methodName": ["getSizes"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftHyperLogLog"}, {"methodBody": ["METHOD_START", "{", "return   PrestoThriftTypeUtils . fromIntBasedBlock ( block ,    INTEGER ,     (    nulls ,    ints )     -  >    integerData ( new   PrestoThriftInteger ( nulls ,    ints )  )  )  ;", "}", "METHOD_END"], "methodName": ["fromBlock"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftInteger"}, {"methodBody": ["METHOD_START", "{", "return   PrestoThriftTypeUtils . fromIntBasedColumn ( recordSet ,    columnIndex ,    totalRecords ,     (    nulls ,    ints )     -  >    integerData ( new   PrestoThriftInteger ( nulls ,    ints )  )  )  ;", "}", "METHOD_END"], "methodName": ["fromRecordSetColumn"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftInteger"}, {"methodBody": ["METHOD_START", "{", "return   ints ;", "}", "METHOD_END"], "methodName": ["getInts"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftInteger"}, {"methodBody": ["METHOD_START", "{", "return   nulls ;", "}", "METHOD_END"], "methodName": ["getNulls"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftInteger"}, {"methodBody": ["METHOD_START", "{", "return    (  ( nulls    =  =    null )     |  |     ( ints    =  =    null )  )     |  |     (  ( nulls . length )     =  =     ( ints . length )  )  ;", "}", "METHOD_END"], "methodName": ["sameSizeIfPresent"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftInteger"}, {"methodBody": ["METHOD_START", "{", "return   SliceData . fromSliceBasedBlock ( block ,    type ,     (    nulls ,    sizes ,    bytes )     -  >    jsonData ( new   PrestoThriftJson ( nulls ,    sizes ,    bytes )  )  )  ;", "}", "METHOD_END"], "methodName": ["fromBlock"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftJson"}, {"methodBody": ["METHOD_START", "{", "return   sliceType . getBytes (  )  ;", "}", "METHOD_END"], "methodName": ["getBytes"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftJson"}, {"methodBody": ["METHOD_START", "{", "return   sliceType . getNulls (  )  ;", "}", "METHOD_END"], "methodName": ["getNulls"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftJson"}, {"methodBody": ["METHOD_START", "{", "return   sliceType . getSizes (  )  ;", "}", "METHOD_END"], "methodName": ["getSizes"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftJson"}, {"methodBody": ["METHOD_START", "{", "return   PrestoThriftTypeUtils . fromLongBasedBlock ( block ,    TIMESTAMP ,     (    nulls ,    longs )     -  >    timestampData ( new   PrestoThriftTimestamp ( nulls ,    longs )  )  )  ;", "}", "METHOD_END"], "methodName": ["fromBlock"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftTimestamp"}, {"methodBody": ["METHOD_START", "{", "return   PrestoThriftTypeUtils . fromLongBasedColumn ( recordSet ,    columnIndex ,    totalRecords ,     (    nulls ,    longs )     -  >    timestampData ( new   PrestoThriftTimestamp ( nulls ,    longs )  )  )  ;", "}", "METHOD_END"], "methodName": ["fromRecordSetColumn"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftTimestamp"}, {"methodBody": ["METHOD_START", "{", "return   nulls ;", "}", "METHOD_END"], "methodName": ["getNulls"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftTimestamp"}, {"methodBody": ["METHOD_START", "{", "return   timestamps ;", "}", "METHOD_END"], "methodName": ["getTimestamps"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftTimestamp"}, {"methodBody": ["METHOD_START", "{", "return    (  ( nulls    =  =    null )     |  |     ( timestamps    =  =    null )  )     |  |     (  ( nulls . length )     =  =     ( timestamps . length )  )  ;", "}", "METHOD_END"], "methodName": ["sameSizeIfPresent"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftTimestamp"}, {"methodBody": ["METHOD_START", "{", "if    ( sizes    =  =    null )     {", "return   new   int [ totalRecords    +     1  ]  ;", "}", "int [  ]    offsets    =    new   int [ totalRecords    +     1  ]  ;", "offsets [  0  ]     =     0  ;", "for    ( int   i    =     0  ;    i    <    totalRecords ;    i +  +  )     {", "int   size    =     (  ( nulls    !  =    null )     &  &     ( nulls [ i ]  )  )     ?     0     :    sizes [ i ]  ;", "offsets [  ( i    +     1  )  ]     =     ( offsets [ i ]  )     +    size ;", "}", "return   offsets ;", "}", "METHOD_END"], "methodName": ["calculateOffsets"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftTypeUtils"}, {"methodBody": ["METHOD_START", "{", "int   positions    =    block . getPositionCount (  )  ;", "if    ( positions    =  =     0  )     {", "return   resulply ( null ,    null )  ;", "}", "boolean [  ]    nulls    =    null ;", "int [  ]    ints    =    null ;", "for    ( int   position    =     0  ;    position    <    positions ;    position +  +  )     {", "if    ( block . isNull ( position )  )     {", "if    ( nulls    =  =    null )     {", "nulls    =    new   boolean [ positions ]  ;", "}", "nulls [ position ]     =    true ;", "} else    {", "if    ( ints    =  =    null )     {", "ints    =    new   int [ positions ]  ;", "}", "ints [ position ]     =     (  ( int )     ( type . getLong ( block ,    position )  )  )  ;", "}", "}", "return   resulply ( nulls ,    ints )  ;", "}", "METHOD_END"], "methodName": ["fromIntBasedBlock"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftTypeUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( positions    =  =     0  )     {", "return   resulply ( null ,    null )  ;", "}", "boolean [  ]    nulls    =    null ;", "int [  ]    ints    =    null ;", "RecordCursor   cursor    =    recordSet . cursor (  )  ;", "for    ( int   position    =     0  ;    position    <    positions ;    position +  +  )     {", "checkState ( cursor . advanceNextPosition (  )  ,     \" cursor   has   less   values   than   expected \"  )  ;", "if    ( cursor . isNull ( columnIndex )  )     {", "if    ( nulls    =  =    null )     {", "nulls    =    new   boolean [ positions ]  ;", "}", "nulls [ position ]     =    true ;", "} else    {", "if    ( ints    =  =    null )     {", "ints    =    new   int [ positions ]  ;", "}", "ints [ position ]     =     (  ( int )     ( cursor . getLong ( columnIndex )  )  )  ;", "}", "}", "checkState (  (  !  ( cursor . advanceNextPosition (  )  )  )  ,     \" cursor   has   more   values   than   expected \"  )  ;", "return   resulply ( nulls ,    ints )  ;", "}", "METHOD_END"], "methodName": ["fromIntBasedColumn"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftTypeUtils"}, {"methodBody": ["METHOD_START", "{", "int   positions    =    block . getPositionCount (  )  ;", "if    ( positions    =  =     0  )     {", "return   resulply ( null ,    null )  ;", "}", "boolean [  ]    nulls    =    null ;", "long [  ]    longs    =    null ;", "for    ( int   position    =     0  ;    position    <    positions ;    position +  +  )     {", "if    ( block . isNull ( position )  )     {", "if    ( nulls    =  =    null )     {", "nulls    =    new   boolean [ positions ]  ;", "}", "nulls [ position ]     =    true ;", "} else    {", "if    ( longs    =  =    null )     {", "longs    =    new   long [ positions ]  ;", "}", "longs [ position ]     =    type . getLong ( block ,    position )  ;", "}", "}", "return   resulply ( nulls ,    longs )  ;", "}", "METHOD_END"], "methodName": ["fromLongBasedBlock"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftTypeUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( positions    =  =     0  )     {", "return   resulply ( null ,    null )  ;", "}", "boolean [  ]    nulls    =    null ;", "long [  ]    longs    =    null ;", "RecordCursor   cursor    =    recordSet . cursor (  )  ;", "for    ( int   position    =     0  ;    position    <    positions ;    position +  +  )     {", "checkState ( cursor . advanceNextPosition (  )  ,     \" cursor   has   less   values   than   expected \"  )  ;", "if    ( cursor . isNull ( columnIndex )  )     {", "if    ( nulls    =  =    null )     {", "nulls    =    new   boolean [ positions ]  ;", "}", "nulls [ position ]     =    true ;", "} else    {", "if    ( longs    =  =    null )     {", "longs    =    new   long [ positions ]  ;", "}", "longs [ position ]     =    cursor . getLong ( columnIndex )  ;", "}", "}", "checkState (  (  !  ( cursor . advanceNextPosition (  )  )  )  ,     \" cursor   has   more   values   than   expected \"  )  ;", "return   resulply ( nulls ,    longs )  ;", "}", "METHOD_END"], "methodName": ["fromLongBasedColumn"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftTypeUtils"}, {"methodBody": ["METHOD_START", "{", "return    (  ( nulls    =  =    null )     |  |     ( sizes    =  =    null )  )     |  |     (  ( nulls . length )     =  =     ( sizes . length )  )  ;", "}", "METHOD_END"], "methodName": ["sameSizeIfPresent"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftTypeUtils"}, {"methodBody": ["METHOD_START", "{", "int   numberOfRecords ;", "if    ( nulls    !  =    null )     {", "numberOfRecords    =    nulls . length ;", "} else", "if    ( siz !  =    null )     {", "numberOfRecords    =    sizlength ;", "} else    {", "numberOfRecords    =     0  ;", "}", "int   total    =     0  ;", "for    ( int   i    =     0  ;    i    <    numberOfRecords ;    i +  +  )     {", "if    (  ( nulls    =  =    null )     |  |     (  !  ( nulls [ i ]  )  )  )     {", "total    +  =    sizi ]  ;", "}", "}", "return   total ;", "}", "METHOD_END"], "methodName": ["totalSize"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftTypeUtils"}, {"methodBody": ["METHOD_START", "{", "return   SliceData . fromSliceBasedBlock ( block ,    type ,     (    nulls ,    sizes ,    bytes )     -  >    varcharData ( new   PrestoThriftVarchar ( nulls ,    sizes ,    bytes )  )  )  ;", "}", "METHOD_END"], "methodName": ["fromBlock"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftVarchar"}, {"methodBody": ["METHOD_START", "{", "return   sliceType . getBytes (  )  ;", "}", "METHOD_END"], "methodName": ["getBytes"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftVarchar"}, {"methodBody": ["METHOD_START", "{", "return   sliceType . getNulls (  )  ;", "}", "METHOD_END"], "methodName": ["getNulls"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftVarchar"}, {"methodBody": ["METHOD_START", "{", "return   sliceType . getSizes (  )  ;", "}", "METHOD_END"], "methodName": ["getSizes"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.PrestoThriftVarchar"}, {"methodBody": ["METHOD_START", "{", "int   positions    =    block . getPositionCount (  )  ;", "if    ( positions    =  =     0  )     {", "return   create . apply ( null ,    null ,    null )  ;", "}", "boolean [  ]    nulls    =    null ;", "int [  ]    sizes    =    null ;", "byte [  ]    bytes    =    null ;", "int   bytesIndex    =     0  ;", "for    ( int   position    =     0  ;    position    <    positions ;    position +  +  )     {", "if    ( block . isNull ( position )  )     {", "if    ( nulls    =  =    null )     {", "nulls    =    new   boolean [ positions ]  ;", "}", "nulls [ position ]     =    true ;", "} else    {", "Slice   value    =    type . getSlice ( block ,    position )  ;", "if    ( sizes    =  =    null )     {", "sizes    =    new   int [ positions ]  ;", "int   totalBytes    =     . totalSliceBytes ( block )  ;", "if    ( totalBytes    >     0  )     {", "bytes    =    new   byte [ totalBytes ]  ;", "}", "}", "int   length    =    value . length (  )  ;", "sizes [ position ]     =    length ;", "if    ( length    >     0  )     {", "checkState (  ( bytes    !  =    null )  )  ;", "value . getBytes (  0  ,    bytes ,    bytesIndex ,    length )  ;", "bytesIndex    +  =    length ;", "}", "}", "}", "checkState (  (  ( bytes    =  =    null )     |  |     ( bytesIndex    =  =     ( bytes . length )  )  )  )  ;", "return   create . apply ( nulls ,    sizes ,    bytes )  ;", "}", "METHOD_END"], "methodName": ["fromSliceBasedBlock"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.SliceData"}, {"methodBody": ["METHOD_START", "{", "return   bytes ;", "}", "METHOD_END"], "methodName": ["getBytes"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.SliceData"}, {"methodBody": ["METHOD_START", "{", "return   nulls ;", "}", "METHOD_END"], "methodName": ["getNulls"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.SliceData"}, {"methodBody": ["METHOD_START", "{", "return   sizes ;", "}", "METHOD_END"], "methodName": ["getSizes"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.SliceData"}, {"methodBody": ["METHOD_START", "{", "int   totalBytes    =     0  ;", "int   positions    =    block . getPositionCount (  )  ;", "for    ( int   position    =     0  ;    position    <    positions ;    position +  +  )     {", "totalBytes    +  =    block . getLength ( position )  ;", "}", "return   totalBytes ;", "}", "METHOD_END"], "methodName": ["totalSliceBytes"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.SliceData"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( block . getPositionCount (  )  ,    expected . size (  )  )  ;", "for    ( int   i    =     0  ;    i    <     ( expected . size (  )  )  ;    i +  +  )     {", "if    (  ( expected . get ( i )  )     =  =    null )     {", "assertTrue ( block . isNull ( i )  )  ;", "} else    {", "assertEquals ( block . getLong ( i ,     0  )  ,    expected . get ( i )  . longValue (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["assertBlockEquals"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.TestPrestoThriftBigint"}, {"methodBody": ["METHOD_START", "{", "return   Collections . unmodifiableList ( Arrays . asList ( values )  )  ;", "}", "METHOD_END"], "methodName": ["list"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.TestPrestoThriftBigint"}, {"methodBody": ["METHOD_START", "{", "BlockBuilder   blockBuilder    =    BIGINT . createBlockBuilder ( null ,    values . length )  ;", "for    ( Integer   value    :    values )     {", "if    ( value    =  =    null )     {", "blockBuilder . appendNull (  )  ;", "} else    {", "blockBuilder . writeLong ( value )  . closeEntry (  )  ;", "}", "}", "return   blockBuilder . build (  )  ;", "}", "METHOD_END"], "methodName": ["longBlock"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.TestPrestoThriftBigint"}, {"methodBody": ["METHOD_START", "{", "return   PrestoThriftBlock . bigintData ( new   PrestoThriftBigint ( nulls ,    longs )  )  ;", "}", "METHOD_END"], "methodName": ["longColumn"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.TestPrestoThriftBigint"}, {"methodBody": ["METHOD_START", "{", "PrestoThriftBlock   columnsData    =    TestPrestoThriftBigint . longColumn ( new   boolean [  ]  {    false ,    true ,    false ,    false ,    false ,    false ,    true    }  ,    new   long [  ]  {     2  ,     0  ,     1  ,     3  ,     8  ,     4  ,     0     }  )  ;", "Block   actual    =    columnsData . toBlock ( BIGINT )  ;", "assertBlockEquals ( actual ,    TestPrestoThriftBigint . list (  2 L ,    null ,     1 L ,     3 L ,     8 L ,     4 L ,    null )  )  ;", "}", "METHOD_END"], "methodName": ["testReadBlock"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.TestPrestoThriftBigint"}, {"methodBody": ["METHOD_START", "{", "PrestoThriftBlock   columnsData    =    TestPrestoThriftBigint . longColumn ( null ,    new   long [  ]  {     2  ,     7  ,     1  ,     3  ,     8  ,     4  ,     5     }  )  ;", "Block   actual    =    columnsData . toBlock ( BIGINT )  ;", "assertBlockEquals ( actual ,    TestPrestoThriftBigint . list (  2 L ,     7 L ,     1 L ,     3 L ,     8 L ,     4 L ,     5 L )  )  ;", "}", "METHOD_END"], "methodName": ["testReadBlockAllNonNullOption1"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.TestPrestoThriftBigint"}, {"methodBody": ["METHOD_START", "{", "PrestoThriftBlock   columnsData    =    TestPrestoThriftBigint . longColumn ( new   boolean [  ]  {    false ,    false ,    false ,    false ,    false ,    false ,    false    }  ,    new   long [  ]  {     2  ,     7  ,     1  ,     3  ,     8  ,     4  ,     5     }  )  ;", "Block   actual    =    columnsData . toBlock ( BIGINT )  ;", "assertBlockEquals ( actual ,    TestPrestoThriftBigint . list (  2 L ,     7 L ,     1 L ,     3 L ,     8 L ,     4 L ,     5 L )  )  ;", "}", "METHOD_END"], "methodName": ["testReadBlockAllNonNullOption2"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.TestPrestoThriftBigint"}, {"methodBody": ["METHOD_START", "{", "PrestoThriftBlock   columnsData    =    TestPrestoThriftBigint . longColumn ( new   boolean [  ]  {    true ,    true ,    true ,    true ,    true ,    true ,    true    }  ,    null )  ;", "Block   actual    =    columnsData . toBlock ( BIGINT )  ;", "assertBlockEquals ( actual ,    TestPrestoThriftBigint . list ( null ,    null ,    null ,    null ,    null ,    null ,    null )  )  ;", "}", "METHOD_END"], "methodName": ["testReadBlockAllNullsOption1"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.TestPrestoThriftBigint"}, {"methodBody": ["METHOD_START", "{", "PrestoThriftBlock   columnsData    =    TestPrestoThriftBigint . longColumn ( new   boolean [  ]  {    true ,    true ,    true ,    true ,    true ,    true ,    true    }  ,    new   long [  ]  {     0  ,     0  ,     0  ,     0  ,     0  ,     0  ,     0     }  )  ;", "Block   actual    =    columnsData . toBlock ( BIGINT )  ;", "assertBlockEquals ( actual ,    TestPrestoThriftBigint . list ( null ,    null ,    null ,    null ,    null ,    null ,    null )  )  ;", "}", "METHOD_END"], "methodName": ["testReadBlockAllNullsOption2"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.TestPrestoThriftBigint"}, {"methodBody": ["METHOD_START", "{", "PrestoThriftBlock   columnsData    =    PrestoThriftBlock . integerData ( new   PrestoThriftInteger ( null ,    null )  )  ;", "columnsData . toBlock ( BIGINT )  ;", "}", "METHOD_END"], "methodName": ["testReadBlockWrongActualType"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.TestPrestoThriftBigint"}, {"methodBody": ["METHOD_START", "{", "PrestoThriftBlock   columnsData    =    TestPrestoThriftBigint . longColumn ( null ,    null )  ;", "columnsData . toBlock ( INTEGER )  ;", "}", "METHOD_END"], "methodName": ["testReadBlockWrongDesiredType"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.TestPrestoThriftBigint"}, {"methodBody": ["METHOD_START", "{", "Block   source    =    TestPrestoThriftBigint . longBlock (  1  ,     2  ,     3  ,     4  ,     5  )  ;", "PrestoThriftBlock   column    =    PrestoThriftBigint . fromBlock ( source )  ;", "assertNotNull ( column . getBigintData (  )  )  ;", "assertNull ( column . getBigintData (  )  . getNulls (  )  )  ;", "assertEquals ( column . getBigintData (  )  . getLongs (  )  ,    new   long [  ]  {     1  ,     2  ,     3  ,     4  ,     5     }  )  ;", "}", "METHOD_END"], "methodName": ["testWriteBlockAllNonNull"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.TestPrestoThriftBigint"}, {"methodBody": ["METHOD_START", "{", "Block   source    =    TestPrestoThriftBigint . longBlock ( null ,    null ,    null ,    null ,    null )  ;", "PrestoThriftBlock   column    =    PrestoThriftBigint . fromBlock ( source )  ;", "assertNotNull ( column . getBigintData (  )  )  ;", "assertEquals ( column . getBigintData (  )  . getNulls (  )  ,    new   boolean [  ]  {    true ,    true ,    true ,    true ,    true    }  )  ;", "assertNull ( column . getBigintData (  )  . getLongs (  )  )  ;", "}", "METHOD_END"], "methodName": ["testWriteBlockAllNulls"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.TestPrestoThriftBigint"}, {"methodBody": ["METHOD_START", "{", "Block   source    =    TestPrestoThriftBigint . longBlock (  1  ,    null ,     2  ,    null ,     3  ,    null ,     4  ,    null ,     5  ,    null ,     6  ,    null ,     7  ,    null )  ;", "PrestoThriftBlock   column    =    PrestoThriftBigint . fromBlock ( source )  ;", "assertNotNull ( column . getBigintData (  )  )  ;", "assertEquals ( column . getBigintData (  )  . getNulls (  )  ,    new   boolean [  ]  {    false ,    true ,    false ,    true ,    false ,    true ,    false ,    true ,    false ,    true ,    false ,    true ,    false ,    true    }  )  ;", "assertEquals ( column . getBigintData (  )  . getLongs (  )  ,    new   long [  ]  {     1  ,     0  ,     2  ,     0  ,     3  ,     0  ,     4  ,     0  ,     5  ,     0  ,     6  ,     0  ,     7  ,     0     }  )  ;", "}", "METHOD_END"], "methodName": ["testWriteBlockAlternating"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.TestPrestoThriftBigint"}, {"methodBody": ["METHOD_START", "{", "PrestoThriftBlock   column    =    PrestoThriftBigint . fromBlock ( TestPrestoThriftBigint . longBlock (  )  )  ;", "assertNotNull ( column . getBigintData (  )  )  ;", "assertNull ( column . getBigintData (  )  . getNulls (  )  )  ;", "assertNull ( column . getBigintData (  )  . getLongs (  )  )  ;", "}", "METHOD_END"], "methodName": ["testWriteBlockEmpty"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.TestPrestoThriftBigint"}, {"methodBody": ["METHOD_START", "{", "PrestoThriftBlock   column    =    PrestoThriftBigint . fromBlock ( TestPrestoThriftBigint . longBlock (  1  )  )  ;", "assertNotNull ( column . getBigintData (  )  )  ;", "assertNull ( column . getBigintData (  )  . getNulls (  )  )  ;", "assertEquals ( column . getBigintData (  )  . getLongs (  )  ,    new   long [  ]  {     1     }  )  ;", "}", "METHOD_END"], "methodName": ["testWriteBlockSingleValue"], "fileName": "com.facebook.presto.connector.thrift.api.datatypes.TestPrestoThriftBigint"}, {"methodBody": ["METHOD_START", "{", "return   new   PrestoThriftAllOrNoneValueSet ( valueSet . isAll (  )  )  ;", "}", "METHOD_END"], "methodName": ["fromAllOrNoneValueSet"], "fileName": "com.facebook.presto.connector.thrift.api.valuesets.PrestoThriftAllOrNoneValueSet"}, {"methodBody": ["METHOD_START", "{", "return   all ;", "}", "METHOD_END"], "methodName": ["isAll"], "fileName": "com.facebook.presto.connector.thrift.api.valuesets.PrestoThriftAllOrNoneValueSet"}, {"methodBody": ["METHOD_START", "{", "Type   type    =    valueSet . getType (  )  ;", "Set < ValueEntry >    values    =    valueSet . getEntries (  )  ;", "List < PrestoThriftBlock >    thriftValues    =    new   ArrayList ( values . size (  )  )  ;", "for    ( ValueEntry   value    :    values )     {", "checkState ( type . equals ( value . getType (  )  )  ,     \" ValueEntrySet   has   elements   of   different   types :     % s   vs    % s \"  ,    type ,    value . getType (  )  )  ;", "thriftValues . add ( PrestoThriftBlock . fromBlock ( value . getBlock (  )  ,    type )  )  ;", "}", "return   new    ( valueSet . isWhiteList (  )  ,    thriftValues )  ;", "}", "METHOD_END"], "methodName": ["fromEquatableValueSet"], "fileName": "com.facebook.presto.connector.thrift.api.valuesets.PrestoThriftEquatableValueSet"}, {"methodBody": ["METHOD_START", "{", "return   values ;", "}", "METHOD_END"], "methodName": ["getValues"], "fileName": "com.facebook.presto.connector.thrift.api.valuesets.PrestoThriftEquatableValueSet"}, {"methodBody": ["METHOD_START", "{", "return   whiteList ;", "}", "METHOD_END"], "methodName": ["isWhiteList"], "fileName": "com.facebook.presto.connector.thrift.api.valuesets.PrestoThriftEquatableValueSet"}, {"methodBody": ["METHOD_START", "{", "List < PrestoThriftRangeValueSet . PrestoThriftRange >    ranges    =    valueSet . getOrderedRanges (  )  . stream (  )  . map ( PrestoThriftRangeValueSet . PrestoThriftRange :  : fromRange )  . collect ( toImmutableList (  )  )  ;", "return   new   PrestoThriftRangeValueSet ( ranges )  ;", "}", "METHOD_END"], "methodName": ["fromSortedRangeSet"], "fileName": "com.facebook.presto.connector.thrift.api.valuesets.PrestoThriftRangeValueSet"}, {"methodBody": ["METHOD_START", "{", "return   ranges ;", "}", "METHOD_END"], "methodName": ["getRanges"], "fileName": "com.facebook.presto.connector.thrift.api.valuesets.PrestoThriftRangeValueSet"}, {"methodBody": ["METHOD_START", "{", "if    ( a    !  =    null )     {", "return   a ;", "}", "if    ( b    !  =    null )     {", "return   b ;", "}", "if    ( c    !  =    null )     {", "return   c ;", "}", "ow   new   IllegalArgumentException (  \" All   arguments   are   null \"  )  ;", "}", "METHOD_END"], "methodName": ["firstNonNull"], "fileName": "com.facebook.presto.connector.thrift.api.valuesets.PrestoThriftValueSet"}, {"methodBody": ["METHOD_START", "{", "if    (  ( valueSet . getClass (  )  )     =  =     ( AllOrNoneValueSet . class )  )     {", "return   new    ( PrestoThriftAllOrNoneValueSet . fromAllOrNoneValueSet (  (  ( AllOrNoneValueSet )     ( valueSet )  )  )  ,    null ,    null )  ;", "} else", "if    (  ( valueSet . getClass (  )  )     =  =     ( com . facebook . presto . spi . predicate . EquatableValueSet . class )  )     {", "return   new    ( null ,    PrestoThriftEquatableValueSet . fromEquatableValueSet (  (  ( com . facebook . presto . spi . predicate . EquatableValueSet )     ( valueSet )  )  )  ,    null )  ;", "} else", "if    (  ( valueSet . getClass (  )  )     =  =     ( com . facebook . presto . spi . predicate . SortedRangeSet . class )  )     {", "return   new    ( null ,    null ,    PrestoThriftRangeValueSet . fromSortedRangeSet (  (  ( com . facebook . presto . spi . predicate . SortedRangeSet )     ( valueSet )  )  )  )  ;", "} else    {", "throw   new   IllegalArgumentException (  (  \" Unknown   implementation   of   a   value   set :     \"     +     ( valueSet . getClass (  )  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["fromValueSet"], "fileName": "com.facebook.presto.connector.thrift.api.valuesets.PrestoThriftValueSet"}, {"methodBody": ["METHOD_START", "{", "return   allOrNoneValueSet ;", "}", "METHOD_END"], "methodName": ["getAllOrNoneValueSet"], "fileName": "com.facebook.presto.connector.thrift.api.valuesets.PrestoThriftValueSet"}, {"methodBody": ["METHOD_START", "{", "return   equatableValueSet ;", "}", "METHOD_END"], "methodName": ["getEquatableValueSet"], "fileName": "com.facebook.presto.connector.thrift.api.valuesets.PrestoThriftValueSet"}, {"methodBody": ["METHOD_START", "{", "return   rangeValueSet ;", "}", "METHOD_END"], "methodName": ["getRangeValueSet"], "fileName": "com.facebook.presto.connector.thrift.api.valuesets.PrestoThriftValueSet"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  ( a    !  =    null )     &  &     ( b    =  =    null )  )     &  &     ( c    =  =    null )  )     |  |     (  (  ( a    =  =    null )     &  &     ( b    !  =    null )  )     &  &     ( c    =  =    null )  )  )     |  |     (  (  ( a    =  =    null )     &  &     ( b    =  =    null )  )     &  &     ( c    !  =    null )  )  ;", "}", "METHOD_END"], "methodName": ["isExactlyOneNonNull"], "fileName": "com.facebook.presto.connector.thrift.api.valuesets.PrestoThriftValueSet"}, {"methodBody": ["METHOD_START", "{", "PrestoThriftValueSet   thriftValueSet    =    PrestoThriftValueSet . fromValueSet ( ValueSet . all ( HYPER _ LOG _ LOG )  )  ;", "assertNotNull ( thriftValueSet . ge (  )  )  ;", "assertTrue ( thriftValueSet . ge (  )  . isAll (  )  )  ;", "}", "METHOD_END"], "methodName": ["testFromValueSetAll"], "fileName": "com.facebook.presto.connector.thrift.api.valuesets.TestPrestoThriftAllOrNoneValueSet"}, {"methodBody": ["METHOD_START", "{", "PrestoThriftValueSet   thriftValueSet    =    PrestoThriftValueSet . fromValueSet ( ValueSet . none ( HYPER _ LOG _ LOG )  )  ;", "assertNotNull ( thriftValueSet . ge (  )  )  ;", "assertFalse ( thriftValueSet . ge (  )  . isAll (  )  )  ;", "}", "METHOD_END"], "methodName": ["testFromValueSetNone"], "fileName": "com.facebook.presto.connector.thrift.api.valuesets.TestPrestoThriftAllOrNoneValueSet"}, {"methodBody": ["METHOD_START", "{", "PrestoThriftValueSet   thriftValueSet    =    PrestoThriftValueSet . fromValueSet ( ValueSet . all ( JSON )  )  ;", "assertNotNull ( thriftValueSet . ge (  )  )  ;", "assertFalse ( thriftValueSet . ge (  )  . isWhiteList (  )  )  ;", "assertTrue ( thriftValueSet . ge (  )  . getValues (  )  . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["testFromValueSetAll"], "fileName": "com.facebook.presto.connector.thrift.api.valuesets.TestPrestoThriftEquatableValueSet"}, {"methodBody": ["METHOD_START", "{", "PrestoThriftValueSet   thriftValueSet    =    PrestoThriftValueSet . fromValueSet ( ValueSet . none ( JSON )  )  ;", "assertNotNull ( thriftValueSet . ge (  )  )  ;", "assertTrue ( thriftValueSet . ge (  )  . isWhiteList (  )  )  ;", "assertTrue ( thriftValueSet . ge (  )  . getValues (  )  . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["testFromValueSetNone"], "fileName": "com.facebook.presto.connector.thrift.api.valuesets.TestPrestoThriftEquatableValueSet"}, {"methodBody": ["METHOD_START", "{", "PrestoThriftValueSet   thriftValueSet    =    PrestoThriftValueSet . fromValueSet ( ValueSet . of ( JSON ,    utf 8 Slice ( TestPrestoThriftEquatableValueSet . JSON 1  )  ,    utf 8 Slice ( TestPrestoThriftEquatableValueSet . JSON 2  )  )  )  ;", "assertNotNull ( thriftValueSet . getEquatableValueSet (  )  )  ;", "assertTrue ( thriftValueSet . getEquatableValueSet (  )  . isWhiteList (  )  )  ;", "assertEquals ( thriftValueSet . getEquatableValueSet (  )  . getValues (  )  ,    ImmutableList . of ( PrestoThriftBlock . jsonData ( new   PrestoThriftJson ( null ,    new   int [  ]  {    TestPrestoThriftEquatableValueSet . JSON 1  . length (  )     }  ,    TestPrestoThriftEquatableValueSet . JSON 1  . getBytes ( StandardCharsets . UTF _  8  )  )  )  ,    PrestoThriftBlock . jsonData ( new   PrestoThriftJson ( null ,    new   int [  ]  {    TestPrestoThriftEquatableValueSet . JSON 2  . length (  )     }  ,    TestPrestoThriftEquatableValueSet . JSON 2  . getBytes ( StandardCharsets . UTF _  8  )  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testFromValueSetOf"], "fileName": "com.facebook.presto.connector.thrift.api.valuesets.TestPrestoThriftEquatableValueSet"}, {"methodBody": ["METHOD_START", "{", "return   PrestoThriftBlock . bigintData ( new   PrestoThriftBigint ( null ,    new   long [  ]  {    value    }  )  )  ;", "}", "METHOD_END"], "methodName": ["longValue"], "fileName": "com.facebook.presto.connector.thrift.api.valuesets.TestPrestoThriftRangeValueSet"}, {"methodBody": ["METHOD_START", "{", "PrestoThriftValueSet   thriftValueSet    =    PrestoThriftValueSet . fromValueSet ( ValueSet . all ( BIGINT )  )  ;", "assertNotNull ( thriftValueSet . getRangeValueSet (  )  )  ;", "assertEquals ( thriftValueSet . getRangeValueSet (  )  . getRanges (  )  ,    ImmutableList . of ( new    . PrestoThriftRange ( new    . PrestoThriftMarker ( null ,     . PrestoThriftBound . ABOVE )  ,    new    . PrestoThriftMarker ( null ,     . PrestoThriftBound . BELOW )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testFromValueSetAll"], "fileName": "com.facebook.presto.connector.thrift.api.valuesets.TestPrestoThriftRangeValueSet"}, {"methodBody": ["METHOD_START", "{", "PrestoThriftValueSet   thriftValueSet    =    PrestoThriftValueSet . fromValueSet ( ValueSet . none ( BIGINT )  )  ;", "assertNotNull ( thriftValueSet . ge (  )  )  ;", "assertEquals ( thriftValueSet . ge (  )  . getRanges (  )  ,    ImmutableList . of (  )  )  ;", "}", "METHOD_END"], "methodName": ["testFromValueSetNone"], "fileName": "com.facebook.presto.connector.thrift.api.valuesets.TestPrestoThriftRangeValueSet"}, {"methodBody": ["METHOD_START", "{", "PrestoThriftValueSet   thriftValueSet    =    PrestoThriftValueSet . fromValueSet ( ValueSet . of ( BIGINT ,     1 L ,     2 L ,     3 L )  )  ;", "assertNotNull ( thriftValueSet . getRangeValueSet (  )  )  ;", "assertEquals ( thriftValueSet . getRangeValueSet (  )  . getRanges (  )  ,    ImmutableList . of ( new   PrestoThriftRangeValueSet . PrestoThriftRange ( new   PrestoThriftRangeValueSet . PrestoThriftMarker (  . longValue (  1  )  ,    PrestoThriftRangeValueSet . PrestoThriftBound . EXACTLY )  ,    new   PrestoThriftRangeValueSet . PrestoThriftMarker (  . longValue (  1  )  ,    PrestoThriftRangeValueSet . PrestoThriftBound . EXACTLY )  )  ,    new   PrestoThriftRangeValueSet . PrestoThriftRange ( new   PrestoThriftRangeValueSet . PrestoThriftMarker (  . longValue (  2  )  ,    PrestoThriftRangeValueSet . PrestoThriftBound . EXACTLY )  ,    new   PrestoThriftRangeValueSet . PrestoThriftMarker (  . longValue (  2  )  ,    PrestoThriftRangeValueSet . PrestoThriftBound . EXACTLY )  )  ,    new   PrestoThriftRangeValueSet . PrestoThriftRange ( new   PrestoThriftRangeValueSet . PrestoThriftMarker (  . longValue (  3  )  ,    PrestoThriftRangeValueSet . PrestoThriftBound . EXACTLY )  ,    new   PrestoThriftRangeValueSet . PrestoThriftMarker (  . longValue (  3  )  ,    PrestoThriftRangeValueSet . PrestoThriftBound . EXACTLY )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testFromValueSetOf"], "fileName": "com.facebook.presto.connector.thrift.api.valuesets.TestPrestoThriftRangeValueSet"}, {"methodBody": ["METHOD_START", "{", "PrestoThriftValueSet   thriftValueSet    =    PrestoThriftValueSet . fromValueSet ( ValueSet . ofRanges ( range ( BIGINT ,     (  -  1  0 L )  ,    true ,     (  -  1 L )  ,    false )  ,    range ( BIGINT ,     (  -  1 L )  ,    false ,     1  0  0 L ,    true )  )  )  ;", "assertNotNull ( thriftValueSet . getRangeValueSet (  )  )  ;", "assertEquals ( thriftValueSet . getRangeValueSet (  )  . getRanges (  )  ,    ImmutableList . of ( new   PrestoThriftRangeValueSet . PrestoThriftRange ( new   PrestoThriftRangeValueSet . PrestoThriftMarker (  . longValue (  (  -  1  0  )  )  ,    PrestoThriftRangeValueSet . PrestoThriftBound . EXACTLY )  ,    new   PrestoThriftRangeValueSet . PrestoThriftMarker (  . longValue (  (  -  1  )  )  ,    PrestoThriftRangeValueSet . PrestoThriftBound . BELOW )  )  ,    new   PrestoThriftRangeValueSet . PrestoThriftRange ( new   PrestoThriftRangeValueSet . PrestoThriftMarker (  . longValue (  (  -  1  )  )  ,    PrestoThriftRangeValueSet . PrestoThriftBound . ABOVE )  ,    new   PrestoThriftRangeValueSet . PrestoThriftMarker (  . longValue (  1  0  0  )  ,    PrestoThriftRangeValueSet . PrestoThriftBound . EXACTLY )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testFromValueSetOfRangesBounded"], "fileName": "com.facebook.presto.connector.thrift.api.valuesets.TestPrestoThriftRangeValueSet"}, {"methodBody": ["METHOD_START", "{", "PrestoThriftValueSet   thriftValueSet    =    PrestoThriftValueSet . fromValueSet ( ValueSet . ofRanges ( Range . greaterThanOrEqual ( BIGINT ,     0 L )  )  )  ;", "assertNotNull ( thriftValueSet . getRangeValueSet (  )  )  ;", "assertEquals ( thriftValueSet . getRangeValueSet (  )  . getRanges (  )  ,    ImmutableList . of ( new   PrestoThriftRangeValueSet . PrestoThriftRange ( new   PrestoThriftRangeValueSet . PrestoThriftMarker (  . longValue (  0  )  ,    PrestoThriftRangeValueSet . PrestoThriftBound . EXACTLY )  ,    new   PrestoThriftRangeValueSet . PrestoThriftMarker ( null ,    PrestoThriftRangeValueSet . PrestoThriftBound . BELOW )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testFromValueSetOfRangesUnbounded"], "fileName": "com.facebook.presto.connector.thrift.api.valuesets.TestPrestoThriftRangeValueSet"}]