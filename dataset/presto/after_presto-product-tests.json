[{"methodBody": ["METHOD_START", "{", "QueryExecutor . query ( String . format (  \" CREATE   TABLE    % s   AS   SELECT    *    FROM   nation \"  ,    AlterTableTests . TABLE _ NAME )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( String . format (  \" SELECT   count (  1  )    FROM    % s \"  ,    AlterTableTests . TABLE _ NAME )  )  )  . containsExactly ( Row . row (  2  5  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( String . format (  \" ALTER   TABLE    % s   ADD   COLUMN   some _ new _ column   BIGINT \"  ,    AlterTableTests . TABLE _ NAME )  )  )  . hasRowsCount (  1  )  ;", "QueryAssert . assertThat (  (  )     -  >    query ( format (  \" ALTER   TABLE    % s   ADD   COLUMN   n _ nationkey   BIGINT \"  ,    AlterTableTests . TABLE _ NAME )  )  )  . failsWithMessage (  \" Column    ' n _ nationkey '    already   exists \"  )  ;", "QueryAssert . assertThat (  (  )     -  >    query ( format (  \" ALTER   TABLE    % s   ADD   COLUMN   n _ naTioNkEy   BIGINT \"  ,    AlterTableTests . TABLE _ NAME )  )  )  . failsWithMessage (  \" Column    ' n _ naTioNkEy '    already   exists \"  )  ;", "}", "METHOD_END"], "methodName": ["addColumn"], "fileName": "com.facebook.presto.tests.AlterTableTests"}, {"methodBody": ["METHOD_START", "{", "QueryExecutor . query ( String . format (  \" CREATE   TABLE    % s   AS   SELECT   n _ nationkey ,    n _ regionkey ,    n _ name   FROM   nation \"  ,    AlterTableTests . TABLE _ NAME )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( String . format (  \" SELECT   count ( n _ nationkey )    FROM    % s \"  ,    AlterTableTests . TABLE _ NAME )  )  )  . containsExactly ( Row . row (  2  5  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( String . format (  \" ALTER   TABLE    % s   DROP   COLUMN   n _ name \"  ,    AlterTableTests . TABLE _ NAME )  )  )  . hasRowsCount (  1  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( String . format (  \" ALTER   TABLE    % s   DROP   COLUMN   n _ nationkey \"  ,    AlterTableTests . TABLE _ NAME )  )  )  . hasRowsCount (  1  )  ;", "QueryAssert . assertThat (  (  )     -  >    query ( format (  \" ALTER   TABLE    % s   DROP   COLUMN   n _ regionkey \"  ,    AlterTableTests . TABLE _ NAME )  )  )  . failsWithMessage (  \" Cannot   drop   the   only   column   in   a   table \"  )  ;", "QueryExecutor . query ( String . format (  \" DROP   TABLE   IF   EXISTS    % s \"  ,    AlterTableTests . TABLE _ NAME )  )  ;", "}", "METHOD_END"], "methodName": ["dropColumn"], "fileName": "com.facebook.presto.tests.AlterTableTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "QueryExecutor . query ( String . format (  \" DROP   TABLE   IF   EXISTS    % s \"  ,     . TABLE _ NAME )  )  ;", "QueryExecutor . query ( String . format (  \" DROP   TABLE   IF   EXISTS    % s \"  ,     . RENAMED _ TABLE _ NAME )  )  ;", "}    catch    ( Exception   e )     {", "Logger . get ( getClass (  )  )  . warn ( e ,     \" failed   to   drop   table \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["dropTestTables"], "fileName": "com.facebook.presto.tests.AlterTableTests"}, {"methodBody": ["METHOD_START", "{", "QueryExecutor . query ( String . format (  \" CREATE   TABLE    % s   AS   SELECT    *    FROM   nation \"  ,    AlterTableTests . TABLE _ NAME )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( String . format (  \" ALTER   TABLE    % s   RENAME   COLUMN   n _ nationkey   TO   nationkey \"  ,    AlterTableTests . TABLE _ NAME )  )  )  . hasRowsCount (  1  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( String . format (  \" SELECT   count ( nationkey )    FROM    % s \"  ,    AlterTableTests . TABLE _ NAME )  )  )  . containsExactly ( Row . row (  2  5  )  )  ;", "QueryAssert . assertThat (  (  )     -  >    query ( format (  \" ALTER   TABLE    % s   RENAME   COLUMN   nationkey   TO   nATIoNkEy \"  ,    AlterTableTests . TABLE _ NAME )  )  )  . failsWithMessage (  \" Column    ' nationkey '    already   exists \"  )  ;", "QueryAssert . assertThat (  (  )     -  >    query ( format (  \" ALTER   TABLE    % s   RENAME   COLUMN   nationkey   TO   n _ regionkeY \"  ,    AlterTableTests . TABLE _ NAME )  )  )  . failsWithMessage (  \" Column    ' n _ regionkey '    already   exists \"  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( String . format (  \" ALTER   TABLE    % s   RENAME   COLUMN   nationkey   TO   n _ nationkey \"  ,    AlterTableTests . TABLE _ NAME )  )  )  ;", "}", "METHOD_END"], "methodName": ["renameColumn"], "fileName": "com.facebook.presto.tests.AlterTableTests"}, {"methodBody": ["METHOD_START", "{", "QueryExecutor . query ( String . format (  \" CREATE   TABLE    % s   AS   SELECT    *    FROM   nation \"  ,    AlterTableTests . TABLE _ NAME )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( String . format (  \" ALTER   TABLE    % s   RENAME   TO    % s \"  ,    AlterTableTests . TABLE _ NAME ,    AlterTableTests . RENAMED _ TABLE _ NAME )  )  )  . hasRowsCount (  1  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( String . format (  \" SELECT    *    FROM    % s \"  ,    AlterTableTests . RENAMED _ TABLE _ NAME )  )  )  . hasRowsCount (  2  5  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( String . format (  \" ALTER   TABLE    % s   RENAME   TO    % s \"  ,    AlterTableTests . RENAMED _ TABLE _ NAME ,    AlterTableTests . TABLE _ NAME )  )  )  . hasRowsCount (  1  )  ;", "}", "METHOD_END"], "methodName": ["renameTable"], "fileName": "com.facebook.presto.tests.AlterTableTests"}, {"methodBody": ["METHOD_START", "{", "ContextDsl . executeWith ( SqlContexts . createViewAs (  \" SELECT    *    FROM   nation \"  )  ,     (    view )     -  >     {", "assertThat ( query ( format (  \" CREATE   OR   REPLACE   VIEW    % s   AS   SELECT    *    FROM   nation \"  ,    view . getName (  )  )  )  )  . hasRowsCount (  1  )  ;", "assertThat ( query ( format (  \" SELECT    *    FROM    % s \"  ,    view . getName (  )  )  )  )  . hasRowsCount (  2  5  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["createOrReplaceSimpleView"], "fileName": "com.facebook.presto.tests.CreateDropViewTests"}, {"methodBody": ["METHOD_START", "{", "ContextDsl . executeWith ( SqlContexts . createViewAs (  \" SELECT    *    FROM   nation \"  )  ,     (    view )     -  >     {", "assertThat ( query ( format (  \" SELECT    *    FROM    % s \"  ,    view . getName (  )  )  )  )  . hasRowsCount (  2  5  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["createSimpleView"], "fileName": "com.facebook.presto.tests.CreateDropViewTests"}, {"methodBody": ["METHOD_START", "{", "ContextDsl . executeWith ( SqlContexts . createViewAs (  \" SELECT    *    FROM   nation \"  )  ,     (    view )     -  >     {", "assertThat (  (  )     -  >    query ( format (  \" CREATE   VIEW    % s   AS   SELECT    *    FROM   nation \"  ,    view . getName (  )  )  )  )  . failsWithMessage (  \" View   already   exists \"  )  ;", "assertThat ( query ( format (  \" SELECT    *    FROM    % s \"  ,    view . getName (  )  )  )  )  . hasRowsCount (  2  5  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["createSimpleViewTwiceShouldFail"], "fileName": "com.facebook.presto.tests.CreateDropViewTests"}, {"methodBody": ["METHOD_START", "{", "ContextDsl . executeWith ( SqlContexts . createViewAs (  \" SELECT   n _ regionkey ,    count (  *  )    countries   FROM   nation   GROUP   BY   n _ regionkey   ORDER   BY   n _ regionkey \"  )  ,     (    view )     -  >     {", "assertThat ( query ( format (  \" SELECT    *    FROM    % s \"  ,    view . getName (  )  )  )  )  . hasRowsCount (  5  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["createViewWithAggregate"], "fileName": "com.facebook.presto.tests.CreateDropViewTests"}, {"methodBody": ["METHOD_START", "{", "ContextDsl . executeWith ( SqlContexts . createViewAs (  \" SELECT    *    FROM   nation \"  )  ,     (    view )     -  >     {", "assertThat ( query ( format (  \" SELECT    *    FROM    % s \"  ,    view . getName (  )  )  )  )  . hasRowsCount (  2  5  )  ;", "assertThat ( query ( format (  \" DROP   VIEW    % s \"  ,    view . getName (  )  )  )  )  . hasRowsCount (  1  )  ;", "assertThat (  (  )     -  >    query ( format (  \" SELECT    *    FROM    % s \"  ,    view . getName (  )  )  )  )  . failsWithMessage (  \" does   not   exist \"  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["dropViewTest"], "fileName": "com.facebook.presto.tests.CreateDropViewTests"}, {"methodBody": ["METHOD_START", "{", "ContextDsl . executeWith ( SqlContexts . createViewAs (  \" SELECT    *    FROM   nation \"  )  ,     (    view )     -  >     {", "assertThat ( query ( format (  \" SELECT    % s . n _ regionkey   FROM    % s \"  ,    view . getName (  )  ,    view . getName (  )  )  )  )  . hasRowsCount (  2  5  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["querySimpleViewQualified"], "fileName": "com.facebook.presto.tests.CreateDropViewTests"}, {"methodBody": ["METHOD_START", "{", "String   tableName    =     \" create _ table _ as _ empty _ select \"  ;", "QueryExecutor . query ( String . format (  \" DROP   TABLE   IF   EXISTS    % s \"  ,    tableName )  )  ;", "QueryExecutor . query ( String . format (  \" CREATE   TABLE    % s ( nationkey ,    name )    AS   SELECT   n _ nationkey ,    n _ name   FROM   nation   WHERE    0    is   NULL \"  ,    tableName )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( String . format (  \" SELECT   nationkey ,    name   FROM    % s \"  ,    tableName )  )  )  . hasRowsCount (  0  )  ;", "}", "METHOD_END"], "methodName": ["shouldCreateTableAsEmptySelect"], "fileName": "com.facebook.presto.tests.CreateTableTests"}, {"methodBody": ["METHOD_START", "{", "String   tableName    =     \" create _ table _ as _ select \"  ;", "QueryExecutor . query ( String . format (  \" DROP   TABLE   IF   EXISTS    % s \"  ,    tableName )  )  ;", "QueryExecutor . query ( String . format (  \" CREATE   TABLE    % s ( nationkey ,    name )    AS   SELECT   n _ nationkey ,    n _ name   FROM   nation \"  ,    tableName )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( String . format (  \" SELECT    *    FROM    % s \"  ,    tableName )  )  )  . hasRowsCount (  2  5  )  ;", "}", "METHOD_END"], "methodName": ["shouldCreateTableAsSelect"], "fileName": "com.facebook.presto.tests.CreateTableTests"}, {"methodBody": ["METHOD_START", "{", "if    (  ( childGroupNames . isPresent (  )  )     &  &     ( childGroupOrganizationName . isPresent (  )  )  )     {", "return   LdapObjectDefinition . builder ( groupName )  . setDistinguishedName ( String . format (  \" cn =  % s ,  % s \"  ,    groupName ,    groupOrganizationName )  )  . setAttributes ( ImmutableMap . of (  \" cn \"  ,    groupName ,     \" member \"  ,    String . format (  \" uid =  % s ,  % s \"  ,    userName ,    userOrganizationName )  )  )  . setModificationAttributes (  . getAttributes ( childGroupNames . get (  )  ,    childGroupOrganizationName . get (  )  ,     . MEMBER )  )  . setObjectClasses ( Arrays . asList (  \" groupOfNames \"  )  )  . build (  )  ;", "} else    {", "return   LdapObjectDefinition . builder ( groupName )  . setDistinguishedName ( String . format (  \" cn =  % s ,  % s \"  ,    groupName ,    groupOrganizationName )  )  . setAttributes ( ImmutableMap . of (  \" cn \"  ,    groupName ,     \" member \"  ,    String . format (  \" uid =  % s ,  % s \"  ,    userName ,    userOrganizationName )  )  )  . setObjectClasses ( Arrays . asList (  \" groupOfNames \"  )  )  . build (  )  ;", "}", "}", "METHOD_END"], "methodName": ["buildLdapGroupObject"], "fileName": "com.facebook.presto.tests.ImmutableLdapObjectDefinitions"}, {"methodBody": ["METHOD_START", "{", "if    ( childGroupNames . isPresent (  )  )     {", "return    . buildLdapGroupObject ( groupName ,     . AMERICA _ DISTINGUISHED _ NAME ,    userName ,     . ASIA _ DISTINGUISHED _ NAME ,    childGroupNames ,    Optional . of (  . AMERICA _ DISTINGUISHED _ NAME )  )  ;", "} else    {", "return    . buildLdapGroupObject ( groupName ,     . AMERICA _ DISTINGUISHED _ NAME ,    userName ,     . ASIA _ DISTINGUISHED _ NAME ,    Optional . empty (  )  ,    Optional . empty (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["buildLdapGroupObject"], "fileName": "com.facebook.presto.tests.ImmutableLdapObjectDefinitions"}, {"methodBody": ["METHOD_START", "{", "return   LdapObjectDefinition . builder ( id )  . setDistinguishedName ( distinguishedName )  . setAttributes ( ImmutableMap . of (  \" ou \"  ,    unit )  )  . setObjectClasses ( Arrays . asList (  \" top \"  ,     \" organizationalUnit \"  )  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["buildLdapOrganizationObject"], "fileName": "com.facebook.presto.tests.ImmutableLdapObjectDefinitions"}, {"methodBody": ["METHOD_START", "{", "if    (  ( groupNames . isPresent (  )  )     &  &     ( groupOrganizationName . isPresent (  )  )  )     {", "return   LdapObjectDefinition . builder ( userName )  . setDistinguishedName ( String . format (  \" uid =  % s ,  % s \"  ,    userName ,    userOrganizationName )  )  . setAttributes ( ImmutableMap . of (  \" cn \"  ,    userName ,     \" sn \"  ,    userName ,     \" userPassword \"  ,    password )  )  . setObjectClasses ( Arrays . asList (  \" person \"  ,     \" inetOrgPerson \"  )  )  . setModificationAttributes (  . getAttributes ( groupNames . get (  )  ,    groupOrganizationName . get (  )  ,     . MEMBER _ OF )  )  . build (  )  ;", "} else    {", "return   LdapObjectDefinition . builder ( userName )  . setDistinguishedName ( String . format (  \" uid =  % s ,  % s \"  ,    userName ,    userOrganizationName )  )  . setAttributes ( ImmutableMap . of (  \" cn \"  ,    userName ,     \" sn \"  ,    userName ,     \" userPassword \"  ,    password )  )  . setObjectClasses ( Arrays . asList (  \" person \"  ,     \" inetOrgPerson \"  )  )  . build (  )  ;", "}", "}", "METHOD_END"], "methodName": ["buildLdapUserObject"], "fileName": "com.facebook.presto.tests.ImmutableLdapObjectDefinitions"}, {"methodBody": ["METHOD_START", "{", "if    ( groupNames . isPresent (  )  )     {", "return    . buildLdapUserObject ( userName ,     . ASIA _ DISTINGUISHED _ NAME ,    groupNames ,    Optional . of (  . AMERICA _ DISTINGUISHED _ NAME )  ,    password )  ;", "} else    {", "return    . buildLdapUserObject ( userName ,     . ASIA _ DISTINGUISHED _ NAME ,    Optional . empty (  )  ,    Optional . empty (  )  ,    password )  ;", "}", "}", "METHOD_END"], "methodName": ["buildLdapUserObject"], "fileName": "com.facebook.presto.tests.ImmutableLdapObjectDefinitions"}, {"methodBody": ["METHOD_START", "{", "return   ImmutableMap . of ( relation ,    groupNames . stream (  )  . map (  (    groupName )     -  >    String . format (  \" cn =  % s ,  % s \"  ,    groupName ,    groupOrganizationName )  )  . collect ( Collectors . toList (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getAttributes"], "fileName": "com.facebook.presto.tests.ImmutableLdapObjectDefinitions"}, {"methodBody": ["METHOD_START", "{", "QueryExecutor . query ( String . format (  \" DROP   TABLE   IF   EXISTS    % s \"  ,    tableName )  )  ;", "QueryExecutor . query ( String . format (  \" CREATE   TABLE    % s   AS   SELECT    *    FROM   NATION \"  ,    tableName )  )  ;", "String   tableLoc    =    getTableLoc ( tableName )  ;", "String   owner    =    hdfsClient . getOwner ( tableLoc )  ;", "assertEquals ( owner ,    expectedOwner )  ;", "QueryExecutor . query ( String . format (  \" DROP   TABLE   IF   EXISTS    % s \"  ,    tableName )  )  ;", "}", "METHOD_END"], "methodName": ["checkTableOwner"], "fileName": "com.facebook.presto.tests.ImpersonationTests"}, {"methodBody": ["METHOD_START", "{", "return    (  ( warehouseDirectoryPath )     +     '  /  '  )     +    tableName ;", "}", "METHOD_END"], "methodName": ["getTableLocation"], "fileName": "com.facebook.presto.tests.ImpersonationTests"}, {"methodBody": ["METHOD_START", "{", "String   tableName    =     \" check _ hdfs _ impersonation _ disabled \"  ;", "checkTableOwner ( tableName ,    configuredHdfsUser )  ;", "}", "METHOD_END"], "methodName": ["testHdfsImpersonationDisabled"], "fileName": "com.facebook.presto.tests.ImpersonationTests"}, {"methodBody": ["METHOD_START", "{", "String   tableName    =     \" check _ hdfs _ impersonation _ enabled \"  ;", "checkTableOwner ( tableName ,    prestoJdbcUser )  ;", "}", "METHOD_END"], "methodName": ["testHdfsImpersonationEnabled"], "fileName": "com.facebook.presto.tests.ImpersonationTests"}, {"methodBody": ["METHOD_START", "{", "QueryAssert . assertThat ( QueryExecutor . query (  (  \" SELECT   openfiledescriptorcount ,    maxfiledescriptorcount    \"     +     \" FROM   jmx . current .  \\  \" lang : type = operatingsystem \\  \"  \"  )  )  )  . hasColumns ( JDBCType . BIGINT ,    JDBCType . BIGINT )  . hasAnyRows (  )  ;", "}", "METHOD_END"], "methodName": ["selectFromJavaOperatingSystemJmxMBean"], "fileName": "com.facebook.presto.tests.JmxConnectorTests"}, {"methodBody": ["METHOD_START", "{", "Connection   connection    =    QueryExecutor . defaultQueryExecutor (  )  . getConnection (  )  ;", "String   sql    =     \" SELECT   node ,    vmname ,    vmversion   FROM   jmx . current .  \\  \" lang : type = runtime \\  \"  \"  ;", "if    ( JdbcDriverUtils . usingPrestoJdbcDriver ( connection )  )     {", "QueryAssert . assertThat ( QueryExecutor . query ( sql )  )  . hasColumns ( JDBCType . LONGNVARCHAR ,    JDBCType . LONGNVARCHAR ,    JDBCType . LONGNVARCHAR )  . hasAnyRows (  )  ;", "} else", "if    ( JdbcDriverUtils . usingTeradataJdbcDriver ( connection )  )     {", "QueryAssert . assertThat ( QueryExecutor . query ( sql )  )  . hasColumns ( JDBCType . VARCHAR ,    JDBCType . VARCHAR ,    JDBCType . VARCHAR )  . hasAnyRows (  )  ;", "} else    {", "throw   new   IllegalStateException (  )  ;", "}", "}", "METHOD_END"], "methodName": ["selectFromJavaRuntimeJmxMBean"], "fileName": "com.facebook.presto.tests.JmxConnectorTests"}, {"methodBody": ["METHOD_START", "{", "QueryAssert . assertThat ( QueryExecutors . onPresto (  )  . executeQuery (  \" SELECT   POSITION (  ' ma '    IN    ' ala   ma   kota '  )  \"  )  )  . contains ( Row . row (  5  )  )  ;", "}", "METHOD_END"], "methodName": ["testPosition"], "fileName": "com.facebook.presto.tests.ProductTestFunctions"}, {"methodBody": ["METHOD_START", "{", "QueryAssert . assertThat ( QueryExecutors . onPresto (  )  . executeQuery (  \" SELECT   SUBSTRING (  ' ala   ma   kota '    from    2    for    4  )  \"  )  )  . contains ( Row . row (  \" la   m \"  )  )  ;", "QueryAssert . assertThat ( QueryExecutors . onPresto (  )  . executeQuery (  \" SELECT   SUBSTR (  ' ala   ma   kota '  ,     2  ,     4  )  \"  )  )  . contains ( Row . row (  \" la   m \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testSubstring"], "fileName": "com.facebook.presto.tests.ProductTestFunctions"}, {"methodBody": ["METHOD_START", "{", "assertThat ( ThreadLocalTestContextHolder . testContextIfSet (  )  . isPresent (  )  )  . isTrue (  )  ;", "}", "METHOD_END"], "methodName": ["afterTest"], "fileName": "com.facebook.presto.tests.SimpleQueryTest"}, {"methodBody": ["METHOD_START", "{", "assertThat ( ThreadLocalTestContextHolder . testContextIfSet (  )  . isPresent (  )  )  . isTrue (  )  ;", "}", "METHOD_END"], "methodName": ["beforeTest"], "fileName": "com.facebook.presto.tests.SimpleQueryTest"}, {"methodBody": ["METHOD_START", "{", "QueryAssert . assertThat ( QueryExecutor . query (  \" select    *    from   nation \"  )  )  . hasRowsCount (  2  5  )  ;", "}", "METHOD_END"], "methodName": ["selectAllFromNation"], "fileName": "com.facebook.presto.tests.SimpleQueryTest"}, {"methodBody": ["METHOD_START", "{", "QueryAssert . assertThat ( QueryExecutor . query (  \" select   count (  *  )    from   nation \"  )  )  . hasRowsCount (  1  )  . contains ( Row . row (  2  5  )  )  ;", "}", "METHOD_END"], "methodName": ["selectCountFromNation"], "fileName": "com.facebook.presto.tests.SimpleQueryTest"}, {"methodBody": ["METHOD_START", "{", "String   tableName    =     \" cancel _ createtable _  \"     +     ( System . nanoTime (  )  )  ;", "String   sql    =    String . format (  \" CREATE   TABLE    % s   AS   SELECT    *    FROM   tpch . sf 1  . lineitem \"  ,    tableName )  ;", "runAndQuery ( sql )  ;", "QueryAssert . assertThat (  (  )     -  >    query (  (  \" SELECT    *    from    \"     +    tableName )  )  )  . failsWithMessage ( String . format (  \" Table   hive . default .  % s   does   not   exist \"  ,    tableName )  )  ;", "}", "METHOD_END"], "methodName": ["cancelCreateTable"], "fileName": "com.facebook.presto.tests.SqlCancelTests"}, {"methodBody": ["METHOD_START", "{", "String   tableName    =     \" cancel _ insertinto _  \"     +     ( System . nanoTime (  )  )  ;", "QueryExecutor . query ( String . format (  \" CREATE   TABLE    % s    ( orderkey   BIGINT ,    partkey   BIGINT ,    shipinstruct   VARCHAR (  2  5  )  )     \"  ,    tableName )  )  ;", "String   sql    =    String . format (  \" INSERT   INTO    % s   SELECT   orderkey ,    partkey ,    shipinstruct   FROM   tpch . sf 1  . lineitem \"  ,    tableName )  ;", "runAndQuery ( sql )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  (  \" SELECT    *    from    \"     +    tableName )  )  )  . hasNoRows (  )  ;", "QueryExecutor . query (  (  \" DROP   TABLE    \"     +    tableName )  )  ;", "}", "METHOD_END"], "methodName": ["cancelInsertInto"], "fileName": "com.facebook.presto.tests.SqlCancelTests"}, {"methodBody": ["METHOD_START", "{", "Stopwatch   stopwatch    =    Stopwatch . createStarted (  )  ;", "while    (  ( stopwatch . elapsed ( TimeUnit . SECONDS )  )     <     3  0  )     {", "String   findQuerySql    =     \" SELECT   query _ id   from   system . runtime . queries   WHERE   query    =     '  % s '    and   state    =     ' RUNNING '    LIMIT    2  \"  ;", "QueryResult   queryResult    =    QueryExecutor . query ( String . format ( findQuerySql ,    sql )  )  ;", "checkState (  (  ( queryResult . getRowsCount (  )  )     <     2  )  ,     \" Query   is   executed   multiple   times \"  )  ;", "if    (  ( queryResult . getRowsCount (  )  )     =  =     1  )     {", "String   queryId    =     (  ( String )     ( queryResult . row (  0  )  . get (  0  )  )  )  ;", "Response   response    =    queryler . cancel ( queryId )  ;", "Assertions . assertThat ( response . getStatusCode (  )  )  . isEqualTo ( NO _ CONTENT . code (  )  )  ;", "return ;", "}", "TimeUnit . MILLISECONDS . sleep (  1  0  0 L )  ;", "}", "throw   new   IllegalStateException (  \" Query   did   not   reach   running   state   or   maybe   it   was   too   quick .  \"  )  ;", "}", "METHOD_END"], "methodName": ["cancelQuery"], "fileName": "com.facebook.presto.tests.SqlCancelTests"}, {"methodBody": ["METHOD_START", "{", "runAndCancelQuery (  (  \" SELECT    *    FROM   tpch . sf 1  . lineitem   AS   cancel _ select _  \"     +     ( System . nanoTime (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["cancelSelect"], "fileName": "com.facebook.presto.tests.SqlCancelTests"}, {"methodBody": ["METHOD_START", "{", "closer . close (  )  ;", "}", "METHOD_END"], "methodName": ["cleanUp"], "fileName": "com.facebook.presto.tests.SqlCancelTests"}, {"methodBody": ["METHOD_START", "{", "Future <  ?  >    queryExecution    =    executor . submit (  (  )     -  >    QueryExecutor . query ( sql )  )  ;", "cQuery ( sql )  ;", "try    {", "queryExecution . get (  3  0  ,    TimeUnit . SECONDS )  ;", "fail (  \" Query   failure   was   expected \"  )  ;", "}    catch    ( TimeoutException   e )     {", "queryExecution . c ( true )  ;", "throw   e ;", "}    catch    ( ExecutionException   expected )     {", "Assertions . assertThat ( expected . getCause (  )  )  . hasMessageEndingWith (  \" Query   was   ced \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["runAndCancelQuery"], "fileName": "com.facebook.presto.tests.SqlCancelTests"}, {"methodBody": ["METHOD_START", "{", "closer    =    Closer . create (  )  ;", "executor    =    Executors . newSingleThreadExecutor (  )  ;", "closer . register ( executor :  : shutdownNow )  ;", "queryCanceller    =    closer . register ( new    . QueryCanceller ( serverAddress )  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.tests.SqlCancelTests"}, {"methodBody": ["METHOD_START", "{", "Connection   connection    =    QueryExecutor . defaultQueryExecutor (  )  . getConnection (  )  ;", "String   sql    =     \" select   catalog _ name ,    c _ id   from   system . metadata . catalogs \"  ;", "if    ( JdbcDriverUtils . usingPrestoJdbcDriver ( connection )  )     {", "QueryAssert . assertThat ( QueryExecutor . query ( sql )  )  . hasColumns ( JDBCType . LONGNVARCHAR ,    JDBCType . LONGNVARCHAR )  . hasAnyRows (  )  ;", "} else", "if    ( JdbcDriverUtils . usingTeradataJdbcDriver ( connection )  )     {", "QueryAssert . assertThat ( QueryExecutor . query ( sql )  )  . hasColumns ( JDBCType . VARCHAR ,    JDBCType . VARCHAR )  . hasAnyRows (  )  ;", "} else    {", "throw   new   IllegalStateException (  )  ;", "}", "}", "METHOD_END"], "methodName": ["selectMetadataCatalogs"], "fileName": "com.facebook.presto.tests.SystemConnectorTests"}, {"methodBody": ["METHOD_START", "{", "Connection   connection    =    QueryExecutor . defaultQueryExecutor (  )  . getConnection (  )  ;", "String   sql    =     \" SELECT   node _ id ,    http _ uri ,    node _ version ,    state   FROM   system . runtime . nodes \"  ;", "if    ( JdbcDriverUtils . usingPrestoJdbcDriver ( connection )  )     {", "QueryAssert . assertThat ( QueryExecutor . query ( sql )  )  . hasColumns ( JDBCType . LONGNVARCHAR ,    JDBCType . LONGNVARCHAR ,    JDBCType . LONGNVARCHAR ,    JDBCType . LONGNVARCHAR )  . hasAnyRows (  )  ;", "} else", "if    ( JdbcDriverUtils . usingTeradataJdbcDriver ( connection )  )     {", "QueryAssert . assertThat ( QueryExecutor . query ( sql )  )  . hasColumns ( JDBCType . VARCHAR ,    JDBCType . VARCHAR ,    JDBCType . VARCHAR ,    JDBCType . VARCHAR )  . hasAnyRows (  )  ;", "} else    {", "throw   new   IllegalStateException (  )  ;", "}", "}", "METHOD_END"], "methodName": ["selectRuntimeNodes"], "fileName": "com.facebook.presto.tests.SystemConnectorTests"}, {"methodBody": ["METHOD_START", "{", "Connection   connection    =    QueryExecutor . defaultQueryExecutor (  )  . getConnection (  )  ;", "String   sql    =     \" SELECT \"     +     (  (  (  (  (  (  (  (  (  (  (  (  \"       node _ id ,  \"     +     \"       query _ id ,  \"  )     +     \"       state ,  \"  )     +     \"       user ,  \"  )     +     \"       query ,  \"  )     +     \"       queued _ time _ ms ,  \"  )     +     \"       analysis _ time _ ms ,  \"  )     +     \"       distributed _ planning _ time _ ms ,  \"  )     +     \"       created ,  \"  )     +     \"       started ,  \"  )     +     \"       last _ heartbeat ,  \"  )     +     \"        ' end '     \"  )     +     \" FROM   system . runtime . queries \"  )  ;", "if    ( JdbcDriverUtils . usingPrestoJdbcDriver ( connection )  )     {", "QueryAssert . assertThat ( QueryExecutor . query ( sql )  )  . hasColumns ( JDBCType . LONGNVARCHAR ,    JDBCType . LONGNVARCHAR ,    JDBCType . LONGNVARCHAR ,    JDBCType . LONGNVARCHAR ,    JDBCType . LONGNVARCHAR ,    JDBCType . BIGINT ,    JDBCType . BIGINT ,    JDBCType . BIGINT ,    JDBCType . TIMESTAMP ,    JDBCType . TIMESTAMP ,    JDBCType . TIMESTAMP ,    JDBCType . LONGNVARCHAR )  . hasAnyRows (  )  ;", "} else", "if    ( JdbcDriverUtils . usingTeradataJdbcDriver ( connection )  )     {", "QueryAssert . assertThat ( QueryExecutor . query ( sql )  )  . hasColumns ( JDBCType . VARCHAR ,    JDBCType . VARCHAR ,    JDBCType . VARCHAR ,    JDBCType . VARCHAR ,    JDBCType . VARCHAR ,    JDBCType . BIGINT ,    JDBCType . BIGINT ,    JDBCType . BIGINT ,    JDBCType . TIMESTAMP ,    JDBCType . TIMESTAMP ,    JDBCType . TIMESTAMP ,    JDBCType . VARCHAR )  . hasAnyRows (  )  ;", "} else    {", "throw   new   IllegalStateException (  )  ;", "}", "}", "METHOD_END"], "methodName": ["selectRuntimeQueries"], "fileName": "com.facebook.presto.tests.SystemConnectorTests"}, {"methodBody": ["METHOD_START", "{", "Connection   connection    =    QueryExecutor . defaultQueryExecutor (  )  . getConnection (  )  ;", "String   sql    =     \" SELECT \"     +     (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  \"       node _ id ,  \"     +     \"       task _ id ,  \"  )     +     \"       stage _ id ,  \"  )     +     \"       query _ id ,  \"  )     +     \"       state ,  \"  )     +     \"       splits ,  \"  )     +     \"       queued _ splits ,  \"  )     +     \"       running _ splits ,  \"  )     +     \"       completed _ splits ,  \"  )     +     \"       split _ scheduled _ time _ ms ,  \"  )     +     \"       split _ cpu _ time _ ms ,  \"  )     +     \"       split _ user _ time _ ms ,  \"  )     +     \"       split _ blocked _ time _ ms ,  \"  )     +     \"       raw _ input _ bytes ,  \"  )     +     \"       raw _ input _ rows ,  \"  )     +     \"       processed _ input _ bytes ,  \"  )     +     \"       processed _ input _ rows ,  \"  )     +     \"       output _ bytes ,  \"  )     +     \"       output _ rows ,  \"  )     +     \"       physical _ written _ bytes ,  \"  )     +     \"       created ,  \"  )     +     \"       start ,  \"  )     +     \"       last _ heartbeat ,  \"  )     +     \"        ' end '     \"  )     +     \" FROM   SYSTEM . runtime . tasks \"  )  ;", "if    ( JdbcDriverUtils . usingPrestoJdbcDriver ( connection )  )     {", "QueryAssert . assertThat ( QueryExecutor . query ( sql )  )  . hasColumns ( JDBCType . LONGNVARCHAR ,    JDBCType . LONGNVARCHAR ,    JDBCType . LONGNVARCHAR ,    JDBCType . LONGNVARCHAR ,    JDBCType . LONGNVARCHAR ,    JDBCType . BIGINT ,    JDBCType . BIGINT ,    JDBCType . BIGINT ,    JDBCType . BIGINT ,    JDBCType . BIGINT ,    JDBCType . BIGINT ,    JDBCType . BIGINT ,    JDBCType . BIGINT ,    JDBCType . BIGINT ,    JDBCType . BIGINT ,    JDBCType . BIGINT ,    JDBCType . BIGINT ,    JDBCType . BIGINT ,    JDBCType . BIGINT ,    JDBCType . BIGINT ,    JDBCType . TIMESTAMP ,    JDBCType . TIMESTAMP ,    JDBCType . TIMESTAMP ,    JDBCType . LONGNVARCHAR )  . hasAnyRows (  )  ;", "} else", "if    ( JdbcDriverUtils . usingTeradataJdbcDriver ( connection )  )     {", "QueryAssert . assertThat ( QueryExecutor . query ( sql )  )  . hasColumns ( JDBCType . VARCHAR ,    JDBCType . VARCHAR ,    JDBCType . VARCHAR ,    JDBCType . VARCHAR ,    JDBCType . VARCHAR ,    JDBCType . BIGINT ,    JDBCType . BIGINT ,    JDBCType . BIGINT ,    JDBCType . BIGINT ,    JDBCType . BIGINT ,    JDBCType . BIGINT ,    JDBCType . BIGINT ,    JDBCType . BIGINT ,    JDBCType . BIGINT ,    JDBCType . BIGINT ,    JDBCType . BIGINT ,    JDBCType . BIGINT ,    JDBCType . BIGINT ,    JDBCType . BIGINT ,    JDBCType . BIGINT ,    JDBCType . TIMESTAMP ,    JDBCType . TIMESTAMP ,    JDBCType . TIMESTAMP ,    JDBCType . VARCHAR )  . hasAnyRows (  )  ;", "} else    {", "throw   new   IllegalStateException (  )  ;", "}", "}", "METHOD_END"], "methodName": ["selectRuntimeTasks"], "fileName": "com.facebook.presto.tests.SystemConnectorTests"}, {"methodBody": ["METHOD_START", "{", "TemptoRunnerCommandLineParser   parser    =    TemptoRunnerCommandLineParser . builder (  \" Presto   product   tests \"  )  . setTestsPackage (  \" com . facebook . presto . tests .  *  \"  ,    false )  . setExcludedGroups (  \" quarantine \"  ,    true )  . build (  )  ;", "TemptoRunner . runTempto ( parser ,    args )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.tests.TemptoProductTestRunner"}, {"methodBody": ["METHOD_START", "{", "if    ( TlsTests . isPortOpen ( host ,    port )  )     {", "fail ( String . format (  \" Port    % d   at    % s   is   expected   to   be   closed \"  ,    port ,    host )  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertPortIsClosed"], "fileName": "com.facebook.presto.tests.TlsTests"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( TlsTests . isPortOpen ( host ,    port )  )  )     {", "fail ( String . format (  \" Port    % d   at    % s   is   expected   to   be   open \"  ,    port ,    host )  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertPortIsOpen"], "fileName": "com.facebook.presto.tests.TlsTests"}, {"methodBody": ["METHOD_START", "{", "QueryResult   queryResult    =    QueryExecutors . onPresto (  )  . executeQuery (  \" SELECT   http _ uri   FROM   system . runtime . nodes \"  )  ;", "return   queryResult . rows (  )  . stream (  )  . map (  (    row )     -  >    row . get (  0  )  . toString (  )  )  . collect ( Collectors . toList (  )  )  ;", "}", "METHOD_END"], "methodName": ["getActiveNodesUrls"], "fileName": "com.facebook.presto.tests.TlsTests"}, {"methodBody": ["METHOD_START", "{", "try    ( Socket   socket    =    new   Socket (  )  )     {", "socket . connect ( new   InetSocketAdds ( InetAdds . getByName ( host )  ,    port )  ,     1  0  0  0  )  ;", "return   true ;", "}    catch    ( ConnectException    |    SocketTimeoutException   e )     {", "return   false ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["isPortOpen"], "fileName": "com.facebook.presto.tests.TlsTests"}, {"methodBody": ["METHOD_START", "{", "assertThat ( httpPort )  . isNotNull (  )  ;", "assertThat ( httpsPort )  . isNotNull (  )  ;", "waitForNodeRefresh (  )  ;", "List < String >    activeNodesUrls    =    getActiveNodesUrls (  )  ;", "assertThat ( activeNodesUrls )  . hasSize (  3  )  ;", "List < String >    hosts    =    activeNodesUrls . stream (  )  . map (  (    uri )     -  >    URI . create ( uri )  . getHost (  )  )  . collect ( Collectors . toList (  )  )  ;", "for    ( String   host    :    hosts )     {", ". assertPortIsOpen ( host ,    httpsPort )  ;", ". assertPortIsClosed ( host ,    httpPort )  ;", "}", "}", "METHOD_END"], "methodName": ["testHttpPortIsClosed"], "fileName": "com.facebook.presto.tests.TlsTests"}, {"methodBody": ["METHOD_START", "{", "long   deadline    =     ( System . currentTimeMillis (  )  )     +     ( TimeUnit . MINUTES . toMillis (  1  )  )  ;", "while    (  ( System . currentTimeMillis (  )  )     <    deadline )     {", "if    (  ( getActiveNodesUrls (  )  . size (  )  )     =  =     3  )     {", "return ;", "}", "Thread . sleep (  1  0  0  )  ;", "}", "fail (  \" Worker   nodes   haven ' t   been   discovered   in    1    minu .  \"  )  ;", "}", "METHOD_END"], "methodName": ["waitForNodeRefresh"], "fileName": "com.facebook.presto.tests.TlsTests"}, {"methodBody": ["METHOD_START", "{", "String   nullTable    =     \"  \\  \" blackhole \\  \"  . default . nation _  \"     +     ( UUID . randomUUID (  )  . toString (  )  . replace (  \"  -  \"  ,     \"  \"  )  )  ;", "String   table    =     \" tpch . tiny . nation \"  ;", "QueryAssert . assertThat ( QueryExecutor . query ( String . format (  \" SELECT   count (  *  )    from    % s \"  ,    table )  )  )  . containsExactly ( Row . row (  2  5  )  )  ;", "QueryResult   result    =    QueryExecutor . query ( String . format (  \" CREATE   TABLE    % s   AS   SELECT    *    FROM    % s \"  ,    nullTable ,    table )  )  ;", "try    {", "QueryAssert . assertThat ( result )  . updatedRowsCountIsEqualTo (  2  5  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( String . format (  \" INSERT   INTO    % s   SELECT    *    FROM    % s \"  ,    nullTable ,    table )  )  )  . updatedRowsCountIsEqualTo (  2  5  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( String . format (  \" SELECT    *    FROM    % s \"  ,    nullTable )  )  )  . hasNoRows (  )  ;", "}    finally    {", "QueryExecutor . query ( String . format (  \" DROP   TABLE    % s \"  ,    nullTable )  )  ;", "}", "}", "METHOD_END"], "methodName": ["blackHoleConnector"], "fileName": "com.facebook.presto.tests.blackhole.BlackHoleConnector"}, {"methodBody": ["METHOD_START", "{", "String   tableName    =    String . format (  \"  % s .  % s .  % s \"  ,    TestConstants . CONNECTOR _ NAME ,    TestConstants . KEY _ SPACE ,    CassandraTpchTableDefinitions . CASSANDRA _ NATION . getName (  )  )  ;", "QueryAssert . assertThat (  (  )     -  >    query ( format (  \" SELECT   bogus   FROM    % s \"  ,    tableName )  )  )  . failsWithMessage (  \" Column    ' bogus '    cannot   be   resolved \"  )  ;", "}", "METHOD_END"], "methodName": ["testInvalidColumn"], "fileName": "com.facebook.presto.tests.cassandra.NegativeTests"}, {"methodBody": ["METHOD_START", "{", "String   tableName    =    String . format (  \"  % s .  % s .  % s \"  ,    TestConstants . CONNECTOR _ NAME ,     \" does _ not _ exist \"  ,     \" bogus \"  )  ;", "QueryAssert . assertThat (  (  )     -  >    query ( format (  \" SELECT    *    FROM    % s \"  ,    tableName )  )  )  . failsWithMessage (  \" Schema   does _ not _ exist   does   not   exist \"  )  ;", "}", "METHOD_END"], "methodName": ["testInvalidSchema"], "fileName": "com.facebook.presto.tests.cassandra.NegativeTests"}, {"methodBody": ["METHOD_START", "{", "String   tableName    =    String . format (  \"  % s .  % s .  % s \"  ,    TestConstants . CONNECTOR _ NAME ,    TestConstants . KEY _ SPACE ,     \" bogus \"  )  ;", "QueryAssert . assertThat (  (  )     -  >    query ( format (  \" SELECT    *    FROM    % s \"  ,    tableName )  )  )  . failsWithMessage ( String . format (  \" Table    % s   does   not   exist \"  ,    tableName )  )  ;", "}", "METHOD_END"], "methodName": ["testInvalidTable"], "fileName": "com.facebook.presto.tests.cassandra.NegativeTests"}, {"methodBody": ["METHOD_START", "{", "QueryResult   query    =    QueryExecutor . query ( String . format (  \" SELECT   a ,    b ,    bl ,    bo ,    d ,    do ,    f ,    fr ,    i ,    integer ,    l ,    m ,    s ,    t ,    ti ,    tu ,    u ,    v ,    vari   FROM    % s .  % s .  % s \"  ,    TestConstants . CONNECTOR _ NAME ,    TestConstants . KEY _ SPACE ,    DataTypesTableDefinition . CASSANDRA _ ALL _ TYPES . getName (  )  )  )  ;", "QueryAssert . assertThat ( query )  . hasColumns ( JDBCType . LONGNVARCHAR ,    JDBCType . BIGINT ,    JDBCType . LONGVARBINARY ,    JDBCType . BOOLEAN ,    JDBCType . DOUBLE ,    JDBCType . DOUBLE ,    JDBCType . REAL ,    JDBCType . LONGNVARCHAR ,    JDBCType . LONGNVARCHAR ,    JDBCType . INTEGER ,    JDBCType . LONGNVARCHAR ,    JDBCType . LONGNVARCHAR ,    JDBCType . LONGNVARCHAR ,    JDBCType . LONGNVARCHAR ,    JDBCType . TIMESTAMP ,    JDBCType . LONGNVARCHAR ,    JDBCType . LONGNVARCHAR ,    JDBCType . LONGNVARCHAR ,    JDBCType . LONGNVARCHAR )  . containsOnly ( Row . row (  \"  \\ u 0  0  0  0  \"  ,    Long . MIN _ VALUE ,    Bytes . fromHexString (  \"  0 x 0  0  \"  )  . array (  )  ,    false ,     0  .  0 F ,    Double . MIN _ VALUE ,    Float . MIN _ VALUE ,     \"  [  0  ]  \"  ,     \"  0  .  0  .  0  .  0  \"  ,    Integer . MIN _ VALUE ,     \"  [  0  ]  \"  ,     \"  {  \\  \"  \\  \\ u 0  0  0  0  \\  \"  :  -  2  1  4  7  4  8  3  6  4  8  ,  \\  \" a \\  \"  :  0  }  \"  ,     \"  [  0  ]  \"  ,     \"  \\ u 0  0  0  0  \"  ,    DateTimeUtils . parseTimestampInLocalTime (  \"  1  9  7  0  -  0  1  -  0  1     0  0  :  0  0  :  0  0  .  0  \"  ,    TemptoProductTestRunner . PRODUCT _ TESTS _ TIME _ ZONE )  ,     \" d 2  1  7  7 dd 0  - eaa 2  -  1  1 de - a 5  7  2  -  0  0  1 b 7  7  9 c 7  6 e 3  \"  ,     \"  0  1  2  3  4  5  6  7  -  0  1  2  3  -  0  1  2  3  -  0  1  2  3  -  0  1  2  3  4  5  6  7  8  9 ab \"  ,     \"  \\ u 0  0  0  0  \"  ,    String . valueOf ( Long . MIN _ VALUE )  )  ,    Row . row (  \" the   quick   brown   fox   jumped   over   the   lazy   dog \"  ,     9  2  2  3  3  7  2  0  3  6  8  5  4  7  7  5  8  0  7 L ,     \"  0  1  2  3  4  \"  . getBytes (  )  ,    true ,    new   Double (  \"  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  9  \"  )  ,    Double . MAX _ VALUE ,    Float . MAX _ VALUE ,     \"  [  4  ,  5  ,  6  ,  7  ]  \"  ,     \"  2  5  5  .  2  5  5  .  2  5  5  .  2  5  5  \"  ,    Integer . MAX _ VALUE ,     \"  [  4  ,  5  ,  6  ]  \"  ,     \"  {  \\  \" a \\  \"  :  1  ,  \\  \" b \\  \"  :  2  }  \"  ,     \"  [  4  ,  5  ,  6  ]  \"  ,     \" this   is   a   text   value \"  ,    DateTimeUtils . parseTimestampInLocalTime (  \"  9  9  9  9  -  1  2  -  3  1     2  3  :  5  9  :  5  9  \"  ,    TemptoProductTestRunner . PRODUCT _ TESTS _ TIME _ ZONE )  ,     \" d 2  1  7  7 dd 0  - eaa 2  -  1  1 de - a 5  7  2  -  0  0  1 b 7  7  9 c 7  6 e 3  \"  ,     \"  0  1  2  3  4  5  6  7  -  0  1  2  3  -  0  1  2  3  -  0  1  2  3  -  0  1  2  3  4  5  6  7  8  9 ab \"  ,     \" abc \"  ,    String . valueOf ( Long . MAX _ VALUE )  )  ,    Row . row (  \" def \"  ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null )  )  ;", "}", "METHOD_END"], "methodName": ["testAllDatatypes"], "fileName": "com.facebook.presto.tests.cassandra.Select"}, {"methodBody": ["METHOD_START", "{", "String   tableName    =    String . format (  \"  % s .  % s .  % s \"  ,    TestConstants . CONNECTOR _ NAME ,    TestConstants . KEY _ SPACE ,    CassandraTpchTableDefinitions . CASSANDRA _ NATION . getName (  )  )  ;", "String   sql    =    String . format (  (  \" SELECT   n 1  . n _ name ,    n 2  . n _ regionkey   FROM    % s   n 1    JOIN    \"     +     (  \"  % s   n 2    ON   n 1  . n _ nationkey    =    n 2  . n _ regionkey    \"     +     \" WHERE   n 1  . n _ nationkey =  3  \"  )  )  ,    tableName ,    tableName )  ;", "QueryResult   queryResult    =    QueryExecutors . onPresto (  )  . executeQuery ( sql )  ;", "QueryAssert . assertThat ( queryResult )  . containsOnly ( Row . row (  \" CANADA \"  ,     3  )  ,    Row . row (  \" CANADA \"  ,     3  )  ,    Row . row (  \" CANADA \"  ,     3  )  ,    Row . row (  \" CANADA \"  ,     3  )  ,    Row . row (  \" CANADA \"  ,     3  )  )  ;", "}", "METHOD_END"], "methodName": ["testNationJoinNation"], "fileName": "com.facebook.presto.tests.cassandra.Select"}, {"methodBody": ["METHOD_START", "{", "String   sql    =    String . format (  (  \" SELECT   c . n _ name ,    t . name   FROM    % s .  % s .  % s   c   JOIN    \"     +     (  \" tpch . tiny . region   t   ON   c . n _ regionkey    =    t . regionkey    \"     +     \" WHERE   c . n _ nationkey =  3  \"  )  )  ,    TestConstants . CONNECTOR _ NAME ,    TestConstants . KEY _ SPACE ,    CassandraTpchTableDefinitions . CASSANDRA _ NATION . getName (  )  )  ;", "QueryResult   queryResult    =    QueryExecutors . onPresto (  )  . executeQuery ( sql )  ;", "QueryAssert . assertThat ( queryResult )  . containsOnly ( Row . row (  \" CANADA \"  ,     \" AMERICA \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testNationJoinRegion"], "fileName": "com.facebook.presto.tests.cassandra.Select"}, {"methodBody": ["METHOD_START", "{", "String   sql    =    String . format (  \" SELECT   n _ nationkey ,    n _ name ,    n _ regionkey ,    n _ comment   FROM    % s .  % s .  % s \"  ,    TestConstants . CONNECTOR _ NAME ,    TestConstants . KEY _ SPACE ,    CassandraTpchTableDefinitions . CASSANDRA _ NATION . getName (  )  )  ;", "QueryResult   queryResult    =    QueryExecutors . onPresto (  )  . executeQuery ( sql )  ;", "QueryAssert . assertThat ( queryResult )  . matches ( TpchTableResults . PRESTO _ NATION _ RESULT )  ;", "}", "METHOD_END"], "methodName": ["testSelectNation"], "fileName": "com.facebook.presto.tests.cassandra.Select"}, {"methodBody": ["METHOD_START", "{", "String   sql    =    String . format (  \" SELECT   n _ name   FROM    % s .  % s .  % s   WHERE   n _ name    =     ' UNITED   STATES '  \"  ,    TestConstants . CONNECTOR _ NAME ,    TestConstants . KEY _ SPACE ,    CassandraTpchTableDefinitions . CASSANDRA _ NATION . getName (  )  )  ;", "QueryResult   queryResult    =    QueryExecutors . onPresto (  )  . executeQuery ( sql )  ;", "QueryAssert . assertThat ( queryResult )  . containsOnly ( Row . row (  \" UNITED   STATES \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testSelectWithEqualityFilterOnNonPartitioningKey"], "fileName": "com.facebook.presto.tests.cassandra.Select"}, {"methodBody": ["METHOD_START", "{", "String   sql    =    String . format (  \" SELECT   n _ nationkey   FROM    % s .  % s .  % s   WHERE   n _ nationkey    =     0  \"  ,    TestConstants . CONNECTOR _ NAME ,    TestConstants . KEY _ SPACE ,    CassandraTpchTableDefinitions . CASSANDRA _ NATION . getName (  )  )  ;", "QueryResult   queryResult    =    QueryExecutors . onPresto (  )  . executeQuery ( sql )  ;", "QueryAssert . assertThat ( queryResult )  . containsOnly ( Row . row (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["testSelectWithEqualityFilterOnPartitioningKey"], "fileName": "com.facebook.presto.tests.cassandra.Select"}, {"methodBody": ["METHOD_START", "{", "String   sql    =    String . format (  \" SELECT   n _ nationkey   FROM    % s .  % s .  % s   WHERE   n _ nationkey    >     2  3  \"  ,    TestConstants . CONNECTOR _ NAME ,    TestConstants . KEY _ SPACE ,    CassandraTpchTableDefinitions . CASSANDRA _ NATION . getName (  )  )  ;", "QueryResult   queryResult    =    QueryExecutors . onPresto (  )  . executeQuery ( sql )  ;", "QueryAssert . assertThat ( queryResult )  . containsOnly ( Row . row (  2  4  )  )  ;", "}", "METHOD_END"], "methodName": ["testSelectWithFilterOnPartitioningKey"], "fileName": "com.facebook.presto.tests.cassandra.Select"}, {"methodBody": ["METHOD_START", "{", "String   sql    =    String . format (  \" SELECT   s _ suppkey   FROM    % s .  % s .  % s   WHERE   s _ suppkey    =     1  0  \"  ,    TestConstants . CONNECTOR _ NAME ,    TestConstants . KEY _ SPACE ,    CassandraTpchTableDefinitions . CASSANDRA _ SUPPLIER . getName (  )  )  ;", "QueryResult   queryResult    =    QueryExecutors . onPresto (  )  . executeQuery ( sql )  ;", "QueryAssert . assertThat ( queryResult )  . containsOnly ( Row . row (  1  0  )  )  ;", "}", "METHOD_END"], "methodName": ["testSelectWithMorePartitioningKeysThanLimit"], "fileName": "com.facebook.presto.tests.cassandra.Select"}, {"methodBody": ["METHOD_START", "{", "String   sql    =    String . format (  \" SELECT   s _ suppkey   FROM    % s .  % s .  % s   WHERE   s _ name    =     ' Supplier #  0  0  0  0  0  0  0  1  0  '  \"  ,    TestConstants . CONNECTOR _ NAME ,    TestConstants . KEY _ SPACE ,    CassandraTpchTableDefinitions . CASSANDRA _ SUPPLIER . getName (  )  )  ;", "QueryResult   queryResult    =    QueryExecutors . onPresto (  )  . executeQuery ( sql )  ;", "QueryAssert . assertThat ( queryResult )  . containsOnly ( Row . row (  1  0  )  )  ;", "}", "METHOD_END"], "methodName": ["testSelectWithMorePartitioningKeysThanLimitNonPK"], "fileName": "com.facebook.presto.tests.cassandra.Select"}, {"methodBody": ["METHOD_START", "{", "String   sql    =    String . format (  \" SELECT   n _ name   FROM    % s .  % s .  % s   WHERE   n _ name    <     ' B '  \"  ,    TestConstants . CONNECTOR _ NAME ,    TestConstants . KEY _ SPACE ,    CassandraTpchTableDefinitions . CASSANDRA _ NATION . getName (  )  )  ;", "QueryResult   queryResult    =    QueryExecutors . onPresto (  )  . executeQuery ( sql )  ;", "QueryAssert . assertThat ( queryResult )  . containsOnly ( Row . row (  \" ALGERIA \"  )  ,    Row . row (  \" ARGENTINA \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testSelectWithNonEqualityFilterOnNonPartitioningKey"], "fileName": "com.facebook.presto.tests.cassandra.Select"}, {"methodBody": ["METHOD_START", "{", "String   sql    =    String . format (  \" SELECT   value   FROM    % s .  % s .  % s   WHERE   key    =     ' a 1  '  \"  ,    TestConstants . CONNECTOR _ NAME ,    TestConstants . KEY _ SPACE ,    MultiColumnKeyTableDefinition . CASSANDRA _ MULTI _ COLUMN _ KEY . getName (  )  )  ;", "QueryResult   queryResult    =    QueryExecutors . onPresto (  )  . executeQuery ( sql )  ;", "QueryAssert . assertThat ( queryResult )  . containsOnly ( Row . row (  \" Test   value    1  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testSelectWithEqualityFilterOnClusteringKey"], "fileName": "com.facebook.presto.tests.cassandra.SelectMultiColumnKey"}, {"methodBody": ["METHOD_START", "{", "String   sql    =    String . format (  \" SELECT   value   FROM    % s .  % s .  % s   WHERE   user _ id    =     ' Alice '    and   key    =     ' a 1  '    and   updated _ at    =    TIMESTAMP    '  2  0  1  5  -  0  1  -  0  1     0  1  :  0  1  :  0  1  '  \"  ,    TestConstants . CONNECTOR _ NAME ,    TestConstants . KEY _ SPACE ,    MultiColumnKeyTableDefinition . CASSANDRA _ MULTI _ COLUMN _ KEY . getName (  )  )  ;", "QueryResult   queryResult    =    QueryExecutors . onPresto (  )  . executeQuery ( sql )  ;", "QueryAssert . assertThat ( queryResult )  . containsOnly ( Row . row (  \" Test   value    1  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testSelectWithEqualityFilterOnPrimaryAndClusteringKeys"], "fileName": "com.facebook.presto.tests.cassandra.SelectMultiColumnKey"}, {"methodBody": ["METHOD_START", "{", "String   sql    =    String . format (  \" SELECT   value   FROM    % s .  % s .  % s   WHERE   user _ id    =     ' Bob '    and   key    =     ' b 1  '  \"  ,    TestConstants . CONNECTOR _ NAME ,    TestConstants . KEY _ SPACE ,    MultiColumnKeyTableDefinition . CASSANDRA _ MULTI _ COLUMN _ KEY . getName (  )  )  ;", "QueryResult   queryResult    =    QueryExecutors . onPresto (  )  . executeQuery ( sql )  ;", "QueryAssert . assertThat ( queryResult )  . containsOnly ( Row . row (  \" Test   value    2  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testSelectWithFilterOnPrefixOfClusteringKey"], "fileName": "com.facebook.presto.tests.cassandra.SelectMultiColumnKey"}, {"methodBody": ["METHOD_START", "{", "String   sql    =    String . format (  \" SELECT   value   FROM    % s .  % s .  % s   WHERE   user _ id    =     ' George '  \"  ,    TestConstants . CONNECTOR _ NAME ,    TestConstants . KEY _ SPACE ,    MultiColumnKeyTableDefinition . CASSANDRA _ MULTI _ COLUMN _ KEY . getName (  )  )  ;", "QueryResult   queryResult    =    QueryExecutors . onPresto (  )  . executeQuery ( sql )  ;", "QueryAssert . assertThat ( queryResult )  . hasNoRows (  )  ;", "}", "METHOD_END"], "methodName": ["testSelectWithFilterOnPrimaryKeyNoMatch"], "fileName": "com.facebook.presto.tests.cassandra.SelectMultiColumnKey"}, {"methodBody": ["METHOD_START", "{", "String   sql    =    String . format (  \" SELECT   value   FROM    % s .  % s .  % s   WHERE   user _ id    =     ' Bob '    and   updated _ at    =    TIMESTAMP    '  2  0  1  4  -  0  2  -  0  2     0  3  :  0  4  :  0  5  '  \"  ,    TestConstants . CONNECTOR _ NAME ,    TestConstants . KEY _ SPACE ,    MultiColumnKeyTableDefinition . CASSANDRA _ MULTI _ COLUMN _ KEY . getName (  )  )  ;", "QueryResult   queryResult    =    QueryExecutors . onPresto (  )  . executeQuery ( sql )  ;", "QueryAssert . assertThat ( queryResult )  . containsOnly ( Row . row (  \" Test   value    2  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testSelectWithFilterOnSecondClusteringKey"], "fileName": "com.facebook.presto.tests.cassandra.SelectMultiColumnKey"}, {"methodBody": ["METHOD_START", "{", "String   sql    =    String . format (  \" SELECT   value   FROM    % s .  % s .  % s   WHERE   user _ id    =     ' Alice '    and   key    <     ' b '    and   updated _ at    >  =    TIMESTAMP    '  2  0  1  5  -  0  1  -  0  1     0  1  :  0  1  :  0  1  '  \"  ,    TestConstants . CONNECTOR _ NAME ,    TestConstants . KEY _ SPACE ,    MultiColumnKeyTableDefinition . CASSANDRA _ MULTI _ COLUMN _ KEY . getName (  )  )  ;", "QueryResult   queryResult    =    QueryExecutors . onPresto (  )  . executeQuery ( sql )  ;", "QueryAssert . assertThat ( queryResult )  . containsOnly ( Row . row (  \" Test   value    1  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testSelectWithMixedFilterOnPrimaryAndClusteringKeys"], "fileName": "com.facebook.presto.tests.cassandra.SelectMultiColumnKey"}, {"methodBody": ["METHOD_START", "{", "TableName   table    =    mutableTablesState (  )  . get ( TestInsertIntoCassandraTable . CASSANDRA _ INSERT _ TABLE )  . getTableName (  )  ;", "String   tableNameInDatabase    =    String . format (  \"  % s .  % s \"  ,    TestConstants . CONNECTOR _ NAME ,    table . getNameInDatabase (  )  )  ;", "QueryAssertions . assertContainsEventually (  (  )     -  >    query ( format (  \" SHOW   TABLES   FROM    % s .  % s \"  ,    CONNECTOR _ NAME ,    KEY _ SPACE )  )  ,    QueryExecutor . query ( String . format (  \" SELECT    '  % s '  \"  ,    table . getSchemalessNameInDatabase (  )  )  )  ,    new   Duration (  1  ,    TimeUnit . MINUTES )  )  ;", "QueryResult   queryResult    =    QueryExecutor . query (  (  \" SELECT    *    FROM    \"     +    tableNameInDatabase )  )  ;", "QueryAssert . assertThat ( queryResult )  . hasNoRows (  )  ;", "QueryExecutor . query (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  \" INSERT   INTO    \"     +    tableNameInDatabase )     +     \"  ( a ,    b ,    bl ,    bo ,    d ,    do ,    f ,    fr ,    i ,    integer ,    l ,    m ,    s ,    t ,    ti ,    tu ,    u ,    v ,    vari )    VALUES    (  \"  )     +     \"  ' ascii   value '  ,     \"  )     +     \" BIGINT    '  9  9  9  9  9  '  ,     \"  )     +     \" null ,     \"  )     +     \" true ,     \"  )     +     \" null ,     \"  )     +     \"  1  2  3  .  4  5  6  7  8  9  ,     \"  )     +     \" REAL    '  1  2  3  .  4  5  6  7  8  '  ,     \"  )     +     \" null ,     \"  )     +     \" null ,     \"  )     +     \"  1  2  3  ,     \"  )     +     \" null ,     \"  )     +     \" null ,     \"  )     +     \" null ,     \"  )     +     \"  ' text   value '  ,     \"  )     +     \" timestamp    '  9  9  9  9  -  1  2  -  3  1     2  3  :  5  9  :  5  9  '  ,  \"  )     +     \" null ,     \"  )     +     \" null ,     \"  )     +     \"  ' varchar   value '  ,  \"  )     +     \" null )  \"  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  (  \" SELECT    *    FROM    \"     +    tableNameInDatabase )  )  )  . containsOnly ( Row . row (  \" ascii   value \"  ,     9  9  9  9  9  ,    null ,    true ,    null ,     1  2  3  .  4  5  6  7  8  9  ,     1  2  3  .  4  5  6  7  8  ,    null ,    null ,     1  2  3  ,    null ,    null ,    null ,     \" text   value \"  ,    DateTimeUtils . parseTimestampInLocalTime (  \"  9  9  9  9  -  1  2  -  3  1     2  3  :  5  9  :  5  9  \"  ,    TemptoProductTestRunner . PRODUCT _ TESTS _ TIME _ ZONE )  ,    null ,    null ,     \" varchar   value \"  ,    null )  )  ;", "QueryExecutor . query (  (  (  (  \" INSERT   INTO    \"     +    tableNameInDatabase )     +     \"  ( a ,    b ,    bl ,    bo ,    d ,    do ,    f ,    fr ,    i ,    integer ,    l ,    m ,    s ,    t ,    ti ,    tu ,    u ,    v ,    vari )    VALUES    (  \"  )     +     \"  ' key    1  '  ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null )     \"  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( String . format (  \" SELECT    *    FROM    % s   WHERE   a    =     ' key    1  '  \"  ,    tableNameInDatabase )  )  )  . containsOnly ( Row . row (  \" key    1  \"  ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null )  )  ;", "QueryExecutor . query ( String . format (  \" INSERT   INTO    % s    ( a ,    bo ,    integer ,    t )    VALUES    (  ' key    2  '  ,    false ,     9  9  9  ,     ' text    2  '  )  \"  ,    tableNameInDatabase )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( String . format (  \" SELECT    *    FROM    % s   WHERE   a    =     ' key    2  '  \"  ,    tableNameInDatabase )  )  )  . containsOnly ( Row . row (  \" key    2  \"  ,    null ,    null ,    false ,    null ,    null ,    null ,    null ,    null ,     9  9  9  ,    null ,    null ,    null ,     \" text    2  \"  ,    null ,    null ,    null ,    null ,    null )  )  ;", "QueryAssert . assertThat (  (  )     -  >    query ( format (  \" INSERT   INTO    % s    ( a )    VALUES    ( null )     \"  ,    tableNameInDatabase )  )  )  . failsWithMessage (  \" Invalid   null   value   in   condition   for   column   a \"  )  ;", "}", "METHOD_END"], "methodName": ["testInsertIntoValuesToCassandraTableAllSimpleTypes"], "fileName": "com.facebook.presto.tests.cassandra.TestInsertIntoCassandraTable"}, {"methodBody": ["METHOD_START", "{", "ImmutableList   command    =    ImmutableList . builder (  )  . add ( new   String [  ]  {    PrestoCliLauncher . JAVA _ BIN ,     \"  - cp \"  ,    PrestoCliLauncher . CLASSPATH ,    Presto . class . getCanonicalName (  )     }  )  . addAll ( arguments )  . build (  )  ;", "return   new   ProcessBuilder ( command )  ;", "}", "METHOD_END"], "methodName": ["getProcessBuilder"], "fileName": "com.facebook.presto.tests.cli.PrestoCliLauncher"}, {"methodBody": ["METHOD_START", "{", "launchPrestoCli ( Arrays . asList ( arguments )  )  ;", "}", "METHOD_END"], "methodName": ["launchPrestoCli"], "fileName": "com.facebook.presto.tests.cli.PrestoCliLauncher"}, {"methodBody": ["METHOD_START", "{", "presto    =    new   PrestoCliProcess ( getProcessBuilder ( arguments )  . start (  )  )  ;", "}", "METHOD_END"], "methodName": ["launchPrestoCli"], "fileName": "com.facebook.presto.tests.cli.PrestoCliLauncher"}, {"methodBody": ["METHOD_START", "{", "if    (  ( presto )     !  =    null )     {", "presto . getProcessInput (  )  . println (  . EXIT _ COMMAND )  ;", "presto . waitForWithTimeoutAndKill (  )  ;", "}", "}", "METHOD_END"], "methodName": ["stopPresto"], "fileName": "com.facebook.presto.tests.cli.PrestoCliLauncher"}, {"methodBody": ["METHOD_START", "{", "List < String >    lines    =    new   ArrayList <  >  (  )  ;", "while    (  !  ( hasNextOutput (  . PRESTO _ PROMPT _ PATTERN )  )  )     {", "lines . add ( nextOutputLine (  )  )  ;", "}", "waitForPrompt (  )  ;", "return   lines ;", "}", "METHOD_END"], "methodName": ["readLinesUntilPrompt"], "fileName": "com.facebook.presto.tests.cli.PrestoCliProcess"}, {"methodBody": ["METHOD_START", "{", "assertThat ( nextOutputToken (  )  )  . matches ( PrestoCliProcess . PRESTO _ PROMPT _ PATTERN )  ;", "}", "METHOD_END"], "methodName": ["waitForPrompt"], "fileName": "com.facebook.presto.tests.cli.PrestoCliProcess"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < String >    prestoClientOptions    =    ImmutableList . builder (  )  ;", "prestoClientOptions . add (  \"  -  - server \"  ,    serverAddress )  ;", "prestoClientOptions . add (  \"  -  - user \"  ,    jdbcUser )  ;", "if    (  ( keystorePath )     !  =    null )     {", "prestoClientOptions . add (  \"  -  - keystore - path \"  ,    keystorePath )  ;", "}", "if    (  ( keystorePassword )     !  =    null )     {", "prestoClientOptions . add (  \"  -  - keystore - password \"  ,    keystorePassword )  ;", "}", "if    ( kerberosAuthentication )     {", "Objects . requireNonNull ( kerberosPrincipal ,     \" databases . presto . cli _ kerberos _ principal   is   null \"  )  ;", "Objects . requireNonNull ( kerberosKeytab ,     \" databases . presto . cli _ kerberos _ keytab   is   null \"  )  ;", "Objects . requireNonNull ( kerberosServiceName ,     \" databases . presto . cli _ kerberos _ service _ name   is   null \"  )  ;", "Objects . requireNonNull ( kerberosConfigPath ,     \" databases . presto . cli _ kerberos _ config _ path   is   null \"  )  ;", "prestoClientOptions . add (  \"  -  - krb 5  - principal \"  ,    kerberosPrincipal )  ;", "prestoClientOptions . add (  \"  -  - krb 5  - keytab - path \"  ,    kerberosKeytab )  ;", "prestoClientOptions . add (  \"  -  - krb 5  - remote - service - name \"  ,    kerberosServiceName )  ;", "prestoClientOptions . add (  \"  -  - krb 5  - config - path \"  ,    kerberosConfigPath )  ;", "if    (  !  ( kerberosUseCanonicalHostname )  )     {", "prestoClientOptions . add (  \"  -  - krb 5  - disable - remote - service - hostname - canonicalization \"  )  ;", "}", "}", "prestoClientOptions . add ( arguments )  ;", "launch ( prestoClientOptions . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["launchPrestoCliWithServerArgument"], "fileName": "com.facebook.presto.tests.cli.PrestoCliTests"}, {"methodBody": ["METHOD_START", "{", "int   i    =    line . indexOf (  '  :  '  )  ;", "return   i    >  =     0     ?    line . substring (  ( i    +     1  )  )  . trim (  )     :    line ;", "}", "METHOD_END"], "methodName": ["removePrefix"], "fileName": "com.facebook.presto.tests.cli.PrestoCliTests"}, {"methodBody": ["METHOD_START", "{", "launchPrestoCli (  \"  -  - version \"  )  ;", "String   version    =    firstNonNull ( Presto . class . getPackage (  )  . getImplementationVersion (  )  ,     \"  ( version   unknown )  \"  )  ;", "assertThat ( presto . readRemainingOutputLines (  )  )  . containsExactly (  (  \" Presto   CLI    \"     +    version )  )  ;", "}", "METHOD_END"], "methodName": ["shouldDisplayVersion"], "fileName": "com.facebook.presto.tests.cli.PrestoCliTests"}, {"methodBody": ["METHOD_START", "{", "String   sql    =     \" select    *    from   hive . default . nations ;    select    *    from   hive . default . nation ;  \"  ;", "launchWithServerArgument (  \"  -  - execute \"  ,    sql )  ;", "assertThat ( CliProcess . trimLines ( presto . readRemainingOutputLines (  )  )  )  . isEmpty (  )  ;", "assertThatThrownBy (  (  )     -  >    presto . waitForWithTimeoutAndKill (  )  )  . hasMessage (  \" Child   process   exited   with   non - zero   code :     1  \"  )  ;", "}", "METHOD_END"], "methodName": ["shouldExitOnErrorFromExecute"], "fileName": "com.facebook.presto.tests.cli.PrestoCliTests"}, {"methodBody": ["METHOD_START", "{", "try    ( TempFile   file    =    new   TempFile (  )  )     {", "Files . write (  \" select    *    from   hive . default . nations ;  \\ nselect    *    from   hive . default . nation ;  \\ n \"  ,    file . file (  )  ,    StandardCharsets . UTF _  8  )  ;", "launchWithServerArgument (  \"  -  - file \"  ,    file . file (  )  . getAbsolutePath (  )  )  ;", "assertThat ( CliProcess . trimLines ( presto . readRemainingOutputLines (  )  )  )  . isEmpty (  )  ;", "assertThatThrownBy (  (  )     -  >    presto . waitForWithTimeoutAndKill (  )  )  . hasMessage (  \" Child   process   exited   with   non - zero   code :     1  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["shouldExitOnErrorFromFile"], "fileName": "com.facebook.presto.tests.cli.PrestoCliTests"}, {"methodBody": ["METHOD_START", "{", "launchPrestoCliWithServerArgument (  )  ;", "presto . waitForPrompt (  )  ;", "presto . getProcessInput (  )  . println (  \" use   hive . default ;  \"  )  ;", "assertThat ( presto . readLinesUntilPrompt (  )  )  . contains (  \" USE \"  )  ;", "presto . getProcessInput (  )  . println (  \" select    *    from   nation ;  \"  )  ;", "assertThat ( CliProcess . trimLines ( presto . readLinesUntilPrompt (  )  )  )  . containsAll ( nationTableInteractiveLines )  ;", "presto . getProcessInput (  )  . println (  \" show   session ;  \"  )  ;", "assertThat (  . squeezeLines ( presto . readLinesUntilPrompt (  )  )  )  . contains (  \" distributed _ join | true | true | boolean | Use   a   distributed   join   instead   of   a   broadcast   join \"  )  ;", "presto . getProcessInput (  )  . println (  \" set   session   distributed _ join    =    false ;  \"  )  ;", "assertThat ( presto . readLinesUntilPrompt (  )  )  . contains (  \" SET   SESSION \"  )  ;", "presto . getProcessInput (  )  . println (  \" show   session ;  \"  )  ;", "assertThat (  . squeezeLines ( presto . readLinesUntilPrompt (  )  )  )  . contains (  \" distributed _ join | false | true | boolean | Use   a   distributed   join   instead   of   a   broadcast   join \"  )  ;", "}", "METHOD_END"], "methodName": ["shouldHandleSession"], "fileName": "com.facebook.presto.tests.cli.PrestoCliTests"}, {"methodBody": ["METHOD_START", "{", "launchPrestoCliWithServerArgument (  )  ;", "presto . waitForPrompt (  )  ;", "presto . getProcessInput (  )  . println (  \" use   hive . default ;  \"  )  ;", "assertThat ( presto . readLinesUntilPrompt (  )  )  . contains (  \" USE \"  )  ;", "presto . getProcessInput (  )  . println (  \" start   transaction ;  \"  )  ;", "assertThat ( presto . readLinesUntilPrompt (  )  )  . contains (  \" START   TRANSACTION \"  )  ;", "presto . getProcessInput (  )  . println (  \" create   table   txn _ test    ( x   bigint )  ;  \"  )  ;", "assertThat ( presto . readLinesUntilPrompt (  )  )  . contains (  \" CREATE   TABLE \"  )  ;", "presto . getProcessInput (  )  . println (  \" select   foo ;  \"  )  ;", "assertThat ( presto . readLinesUntilPrompt (  )  )  . extracting (  :  : removePrefix )  . contains (  \" line    1  :  8  :    Column    ' foo '    cannot   be   resolved \"  )  ;", "presto . getProcessInput (  )  . println (  \" select    *    from   nation ;  \"  )  ;", "assertThat ( presto . readLinesUntilPrompt (  )  )  . extracting (  :  : removePrefix )  . contains (  \" Current   transaction   is   aborted ,    commands   ignored   until   end   of   transaction   block \"  )  ;", "presto . getProcessInput (  )  . println (  \" rollback ;  \"  )  ;", "assertThat ( presto . readLinesUntilPrompt (  )  )  . contains (  \" ROLLBACK \"  )  ;", "presto . getProcessInput (  )  . println (  \" select    *    from   nation ;  \"  )  ;", "assertThat ( CliProcess . trimLines ( presto . readLinesUntilPrompt (  )  )  )  . containsAll ( nationTableInteractiveLines )  ;", "presto . getProcessInput (  )  . println (  \" show   tables ;  \"  )  ;", "assertThat ( CliProcess . trimLines ( presto . readLinesUntilPrompt (  )  )  )  . doesNotContain (  \" txn _ test \"  )  ;", "presto . getProcessInput (  )  . println (  \" start   transaction ;  \"  )  ;", "assertThat ( presto . readLinesUntilPrompt (  )  )  . contains (  \" START   TRANSACTION \"  )  ;", "presto . getProcessInput (  )  . println (  \" create   table   txn _ test 1     ( x   bigint )  ;  \"  )  ;", "assertThat ( presto . readLinesUntilPrompt (  )  )  . contains (  \" CREATE   TABLE \"  )  ;", "presto . getProcessInput (  )  . println (  \" create   table   txn _ test 2     ( x   bigint )  ;  \"  )  ;", "assertThat ( presto . readLinesUntilPrompt (  )  )  . contains (  \" CREATE   TABLE \"  )  ;", "presto . getProcessInput (  )  . println (  \" commit ;  \"  )  ;", "assertThat ( presto . readLinesUntilPrompt (  )  )  . contains (  \" COMMIT \"  )  ;", "presto . getProcessInput (  )  . println (  \" show   tables ;  \"  )  ;", "assertThat ( CliProcess . trimLines ( presto . readLinesUntilPrompt (  )  )  )  . contains (  \" txn _ test 1  \"  ,     \" txn _ test 2  \"  )  ;", "}", "METHOD_END"], "methodName": ["shouldHandleTransaction"], "fileName": "com.facebook.presto.tests.cli.PrestoCliTests"}, {"methodBody": ["METHOD_START", "{", "String   sql    =     \" select    *    from   hive . default . nations ;    select    *    from   hive . default . nation ;  \"  ;", "launchWithServerArgument (  \"  -  - execute \"  ,    sql ,     \"  -  - ignore - errors \"  )  ;", "assertThat ( CliProcess . trimLines ( presto . readRemainingOutputLines (  )  )  )  . containsAll ( nationTableBatchLines )  ;", "assertThatThrownBy (  (  )     -  >    presto . waitForWithTimeoutAndKill (  )  )  . hasMessage (  \" Child   process   exited   with   non - zero   code :     1  \"  )  ;", "}", "METHOD_END"], "methodName": ["shouldNotExitOnErrorFromExecute"], "fileName": "com.facebook.presto.tests.cli.PrestoCliTests"}, {"methodBody": ["METHOD_START", "{", "try    ( TempFile   file    =    new   TempFile (  )  )     {", "Files . write (  \" select    *    from   hive . default . nations ;  \\ nselect    *    from   hive . default . nation ;  \\ n \"  ,    file . file (  )  ,    StandardCharsets . UTF _  8  )  ;", "launchWithServerArgument (  \"  -  - file \"  ,    file . file (  )  . getAbsolutePath (  )  ,     \"  -  - ignore - errors \"  )  ;", "assertThat ( CliProcess . trimLines ( presto . readRemainingOutputLines (  )  )  )  . containsAll ( nationTableBatchLines )  ;", "assertThatThrownBy (  (  )     -  >    presto . waitForWithTimeoutAndKill (  )  )  . hasMessage (  \" Child   process   exited   with   non - zero   code :     1  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["shouldNotExitOnErrorFromFile"], "fileName": "com.facebook.presto.tests.cli.PrestoCliTests"}, {"methodBody": ["METHOD_START", "{", "launchPrestoCliWithServerArgument (  \"  -  - execute \"  ,     \" select    *    from   hive . default . nation ;  \"  )  ;", "assertThat ( CliProcess . trimLines ( presto . readRemainingOutputLines (  )  )  )  . containsAll ( nationTableBatchLines )  ;", "presto . waitForWithTimeoutAndKill (  )  ;", "}", "METHOD_END"], "methodName": ["shouldRunBatchQuery"], "fileName": "com.facebook.presto.tests.cli.PrestoCliTests"}, {"methodBody": ["METHOD_START", "{", "launchPrestoCliWithServerArgument (  )  ;", "presto . waitForPrompt (  )  ;", "presto . getProcessInput (  )  . println (  \" select    *    from   hive . default . nation ;  \"  )  ;", "}", "METHOD_END"], "methodName": ["shouldRunQuery"], "fileName": "com.facebook.presto.tests.cli.PrestoCliTests"}, {"methodBody": ["METHOD_START", "{", "try    ( TempFile   file    =    new   TempFile (  )  )     {", "Files . write (  \" select    *    from   hive . default . nation ;  \\ n \"  ,    file . file (  )  ,    StandardCharsets . UTF _  8  )  ;", "launchWithServerArgument (  \"  -  - file \"  ,    file . file (  )  . getAbsolutePath (  )  )  ;", "assertThat ( CliProcess . trimLines ( presto . readRemainingOutputLines (  )  )  )  . containsAll ( nationTableBatchLines )  ;", "presto . waitForWithTimeoutAndKill (  )  ;", "}", "}", "METHOD_END"], "methodName": ["shouldRunQueryFromFile"], "fileName": "com.facebook.presto.tests.cli.PrestoCliTests"}, {"methodBody": ["METHOD_START", "{", "launchPrestoCliWithServerArgument (  \"  -  - catalog \"  ,     \" hive \"  ,     \"  -  - schema \"  ,     \" default \"  ,     \"  -  - execute \"  ,     \" select    *    from   nation ;  \"  )  ;", "assertThat ( CliProcess . trimLines ( presto . readRemainingOutputLines (  )  )  )  . containsAll ( nationTableBatchLines )  ;", "presto . waitForWithTimeoutAndKill (  )  ;", "}", "METHOD_END"], "methodName": ["shouldUseCatalogAndSchemaOptions"], "fileName": "com.facebook.presto.tests.cli.PrestoCliTests"}, {"methodBody": ["METHOD_START", "{", "return   lines . stream (  )  . map (  (    line )     -  >    line . replaceAll (  \"     +  \\  \\  |     +  \"  ,     \"  |  \"  )  . trim (  )  )  . collect ( Collectors . toList (  )  )  ;", "}", "METHOD_END"], "methodName": ["squeezeLines"], "fileName": "com.facebook.presto.tests.cli.PrestoCliTests"}, {"methodBody": ["METHOD_START", "{", "super . stopPresto (  )  ;", "}", "METHOD_END"], "methodName": ["stopPresto"], "fileName": "com.facebook.presto.tests.cli.PrestoCliTests"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( ldapTruststorePath ,     \" databases . presto . cli _ ldap _ truststore _ path   is   null \"  )  ;", "Objects . requireNonNull ( ldapTruststorePassword ,     \" databases . presto . cli _ ldap _ truststore _ password   is   null \"  )  ;", "Objects . requireNonNull ( ldapUserName ,     \" databases . presto . cli _ ldap _ user _ name   is   null \"  )  ;", "Objects . requireNonNull ( ldapServerAddress ,     \" databases . presto . cli _ ldap _ server _ address   is   null \"  )  ;", "Objects . requireNonNull ( ldapUserPassword ,     \" databases . presto . cli _ ldap _ user _ password   is   null \"  )  ;", "ImmutableList . Builder < String >    prestoClientOptions    =    ImmutableList . builder (  )  ;", "prestoClientOptions . add (  \"  -  - server \"  ,    ldapServerAddress ,     \"  -  - truststore - path \"  ,    ldapTruststorePath ,     \"  -  - truststore - password \"  ,    ldapTruststorePassword ,     \"  -  - user \"  ,    ldapUserName ,     \"  -  - password \"  )  ;", "prestoClientOptions . add ( arguments )  ;", "ProcessBuilder   processBuilder    =    getProcessBuilder ( prestoClientOptions . build (  )  )  ;", "processBuilder . environment (  )  . put (  \" PRESTO _ PASSWORD \"  ,    ldapUserPassword )  ;", "presto    =    new   PrestoCliProcess ( processBuilder . start (  )  )  ;", "}", "METHOD_END"], "methodName": ["launchPrestoCliWithServerArgument"], "fileName": "com.facebook.presto.tests.cli.PrestoLdapCliTests"}, {"methodBody": ["METHOD_START", "{", "ldapTruststorePassword    =     \" wrong _ password \"  ;", "launchPrestoCliWithServerArgument (  \"  -  - execute \"  ,     \" select    *    from   hive . default . nation ;  \"  )  ;", "assertThat ( CliProcess . trimLines ( readRemainingErrorLines (  )  )  )  . anySatisfy (  (    line )     -  >    assertThat ( line )  . contains (  \" Keystore   was   tampered   with ,    or   password   was   incorrect \"  )  )  ;", "skipAfterTestWithContext (  )  ;", "}", "METHOD_END"], "methodName": ["shouldFailForIncorrectTrustStore"], "fileName": "com.facebook.presto.tests.cli.PrestoLdapCliTests"}, {"methodBody": ["METHOD_START", "{", "ldapUserName    =     \" UserWith : Colon \"  ;", "launchPrestoCliWithServerArgument (  \"  -  - execute \"  ,     \" select    *    from   hive . default . nation ;  \"  )  ;", "assertThat ( CliProcess . trimLines ( readRemainingErrorLines (  )  )  )  . anySatisfy (  (    line )     -  >    assertThat ( line )  . contains (  \" Illegal   character    '  :  '    found   in   username \"  )  )  ;", "skipAfterTestWithContext (  )  ;", "}", "METHOD_END"], "methodName": ["shouldFailForUserWithColon"], "fileName": "com.facebook.presto.tests.cli.PrestoLdapCliTests"}, {"methodBody": ["METHOD_START", "{", "ldapUserName    =     \"  \"  ;", "launchPrestoCliWithServerArgument (  \"  -  - execute \"  ,     \" select    *    from   hive . default . nation ;  \"  )  ;", "assertThat ( CliProcess . trimLines ( readRemainingErrorLines (  )  )  )  . anySatisfy (  (    line )     -  >    assertThat ( line )  . contains (  \" Malformed   decoded   credentials \"  )  )  ;", "}", "METHOD_END"], "methodName": ["shouldFailQueryForEmptyUser"], "fileName": "com.facebook.presto.tests.cli.PrestoLdapCliTests"}, {"methodBody": ["METHOD_START", "{", "ldapUserName    =    ImmutableLdapObjectDefinitions . CHILD _ GROUP _ USER . getAttributes (  )  . get (  \" cn \"  )  ;", "launchPrestoCliWithServerArgument (  \"  -  - catalog \"  ,     \" hive \"  ,     \"  -  - schema \"  ,     \" default \"  ,     \"  -  - execute \"  ,     \" select    *    from   nation ;  \"  )  ;", "assertThat ( CliProcess . trimLines ( readRemainingErrorLines (  )  )  )  . anySatisfy (  (    line )     -  >    assertThat ( line )  . contains ( format (  \" User    [  % s ]    not   a   member   of   the   authorized   group \"  ,    ldapUserName )  )  )  ;", "}", "METHOD_END"], "methodName": ["shouldFailQueryForLdapUserInChildGroup"], "fileName": "com.facebook.presto.tests.cli.PrestoLdapCliTests"}, {"methodBody": ["METHOD_START", "{", "ldapUserName    =    ImmutableLdapObjectDefinitions . PARENT _ GROUP _ USER . getAttributes (  )  . get (  \" cn \"  )  ;", "launchPrestoCliWithServerArgument (  \"  -  - catalog \"  ,     \" hive \"  ,     \"  -  - schema \"  ,     \" default \"  ,     \"  -  - execute \"  ,     \" select    *    from   nation ;  \"  )  ;", "assertThat ( CliProcess . trimLines ( readRemainingErrorLines (  )  )  )  . anySatisfy (  (    line )     -  >    assertThat ( line )  . contains ( format (  \" User    [  % s ]    not   a   member   of   the   authorized   group \"  ,    ldapUserName )  )  )  ;", "}", "METHOD_END"], "methodName": ["shouldFailQueryForLdapUserInParentGroup"], "fileName": "com.facebook.presto.tests.cli.PrestoLdapCliTests"}, {"methodBody": ["METHOD_START", "{", "ldapServerAddress    =    String . format (  \" http :  /  /  % s :  8  4  4  3  \"  ,    serverHost )  ;", "launchPrestoCliWithServerArgument (  \"  -  - execute \"  ,     \" select    *    from   hive . default . nation ;  \"  )  ;", "assertThat ( CliProcess . trimLines ( readRemainingErrorLines (  )  )  )  . anySatisfy (  (    line )     -  >    assertThat ( line )  . contains (  \" Authentication   using   username / password   requires   HTTPS   to   be   enabled \"  )  )  ;", "skipAfterTestWithContext (  )  ;", "}", "METHOD_END"], "methodName": ["shouldFailQueryForLdapWithoutHttps"], "fileName": "com.facebook.presto.tests.cli.PrestoLdapCliTests"}, {"methodBody": ["METHOD_START", "{", "launchPrestoCli (  \"  -  - server \"  ,    ldapServerAddress ,     \"  -  - truststore - path \"  ,    ldapTruststorePath ,     \"  -  - truststore - password \"  ,    ldapTruststorePassword ,     \"  -  - user \"  ,    ldapUserName ,     \"  -  - execute \"  ,     \" select    *    from   hive . default . nation ;  \"  )  ;", "assertThat ( CliProcess . trimLines ( readRemainingErrorLines (  )  )  )  . anySatisfy (  (    line )     -  >    assertThat ( line )  . contains (  \" Authentication   failed :    Unauthorized \"  )  )  ;", "}", "METHOD_END"], "methodName": ["shouldFailQueryForLdapWithoutPassword"], "fileName": "com.facebook.presto.tests.cli.PrestoLdapCliTests"}, {"methodBody": ["METHOD_START", "{", "ldapUserName    =    ImmutableLdapObjectDefinitions . ORPHAN _ USER . getAttributes (  )  . get (  \" cn \"  )  ;", "launchPrestoCliWithServerArgument (  \"  -  - catalog \"  ,     \" hive \"  ,     \"  -  - schema \"  ,     \" default \"  ,     \"  -  - execute \"  ,     \" select    *    from   nation ;  \"  )  ;", "assertThat ( CliProcess . trimLines ( readRemainingErrorLines (  )  )  )  . anySatisfy (  (    line )     -  >    assertThat ( line )  . contains ( format (  \" User    [  % s ]    not   a   member   of   the   authorized   group \"  ,    ldapUserName )  )  )  ;", "}", "METHOD_END"], "methodName": ["shouldFailQueryForOrphanLdapUser"], "fileName": "com.facebook.presto.tests.cli.PrestoLdapCliTests"}, {"methodBody": ["METHOD_START", "{", "ldapUserPassword    =     \" wrong _ password \"  ;", "launchPrestoCliWithServerArgument (  \"  -  - execute \"  ,     \" select    *    from   hive . default . nation ;  \"  )  ;", "assertThat ( CliProcess . trimLines ( readRemainingErrorLines (  )  )  )  . anySatisfy (  (    line )     -  >    assertThat ( line )  . contains (  \" Invalid   credentials \"  )  )  ;", "}", "METHOD_END"], "methodName": ["shouldFailQueryForWrongLdapPassword"], "fileName": "com.facebook.presto.tests.cli.PrestoLdapCliTests"}, {"methodBody": ["METHOD_START", "{", "ldapUserName    =     \" invalid _ user \"  ;", "launchPrestoCliWithServerArgument (  \"  -  - execute \"  ,     \" select    *    from   hive . default . nation ;  \"  )  ;", "assertThat ( CliProcess . trimLines ( readRemainingErrorLines (  )  )  )  . anySatisfy (  (    line )     -  >    assertThat ( line )  . contains (  \" Invalid   credentials \"  )  )  ;", "}", "METHOD_END"], "methodName": ["shouldFailQueryForWrongLdapUser"], "fileName": "com.facebook.presto.tests.cli.PrestoLdapCliTests"}, {"methodBody": ["METHOD_START", "{", "ldapUserName    =    ImmutableLdapObjectDefinitions . SPECIAL _ USER . getAttributes (  )  . get (  \" cn \"  )  ;", "ldapUserPassword    =    ImmutableLdapObjectDefinitions . SPECIAL _ USER . getAttributes (  )  . get (  \" userPassword \"  )  ;", "launchPrestoCliWithServerArgument (  \"  -  - catalog \"  ,     \" hive \"  ,     \"  -  - schema \"  ,     \" default \"  ,     \"  -  - execute \"  ,     \" select    *    from   nation ;  \"  )  ;", "assertThat ( CliProcess . trimLines ( readRemainingOutputLines (  )  )  )  . containsAll ( nationTableBatchLines )  ;", "}", "METHOD_END"], "methodName": ["shouldPassForCredentialsWithSpecialCharacters"], "fileName": "com.facebook.presto.tests.cli.PrestoLdapCliTests"}, {"methodBody": ["METHOD_START", "{", "ldapUserName    =    ImmutableLdapObjectDefinitions . USER _ IN _ MULTIPLE _ GROUPS . getAttributes (  )  . get (  \" cn \"  )  ;", "launchPrestoCliWithServerArgument (  \"  -  - catalog \"  ,     \" hive \"  ,     \"  -  - schema \"  ,     \" default \"  ,     \"  -  - execute \"  ,     \" select    *    from   nation ;  \"  )  ;", "assertThat ( CliProcess . trimLines ( readRemainingOutputLines (  )  )  )  . containsAll ( nationTableBatchLines )  ;", "}", "METHOD_END"], "methodName": ["shouldPassQueryForLdapUserInMultipleGroups"], "fileName": "com.facebook.presto.tests.cli.PrestoLdapCliTests"}, {"methodBody": ["METHOD_START", "{", "launchPrestoCliWithServerArgument (  \"  -  - execute \"  ,     \" select    *    from   hive . default . nation ;  \"  )  ;", "assertThat ( CliProcess . trimLines ( readRemainingOutputLines (  )  )  )  . containsAll ( nationTableBatchLines )  ;", "}", "METHOD_END"], "methodName": ["shouldRunBatchQueryWithLdap"], "fileName": "com.facebook.presto.tests.cli.PrestoLdapCliTests"}, {"methodBody": ["METHOD_START", "{", "File   temporayFile    =    File . createTempFile (  \" test - sql \"  ,    null )  ;", "temporayFile . deleteOnExit (  )  ;", "Files . write (  \" select    *    from   hive . default . nation ;  \\ n \"  ,    temporayFile ,    StandardCharsets . UTF _  8  )  ;", "launchPrestoCliWithServerArgument (  \"  -  - file \"  ,    temporayFile . getAbsolutePath (  )  )  ;", "assertThat ( CliProcess . trimLines ( readRemainingOutputLines (  )  )  )  . containsAll ( nationTableBatchLines )  ;", "}", "METHOD_END"], "methodName": ["shouldRunQueryFromFileWithLdap"], "fileName": "com.facebook.presto.tests.cli.PrestoLdapCliTests"}, {"methodBody": ["METHOD_START", "{", "launchPrestoCliWithServerArgument (  )  ;", "waitForPrompt (  )  ;", "getProcessInput (  )  . println (  \" select    *    from   hive . default . nation ;  \"  )  ;", "assertThat ( CliProcess . trimLines ( readLinesUntilPrompt (  )  )  )  . containsAll ( nationTableInteractiveLines )  ;", "}", "METHOD_END"], "methodName": ["shouldRunQueryWithLdap"], "fileName": "com.facebook.presto.tests.cli.PrestoLdapCliTests"}, {"methodBody": ["METHOD_START", "{", "presto . close (  )  ;", "presto    =    null ;", "}", "METHOD_END"], "methodName": ["skipAfterTestWithContext"], "fileName": "com.facebook.presto.tests.cli.PrestoLdapCliTests"}, {"methodBody": ["METHOD_START", "{", "super . stopPresto (  )  ;", "}", "METHOD_END"], "methodName": ["stopPresto"], "fileName": "com.facebook.presto.tests.cli.PrestoLdapCliTests"}, {"methodBody": ["METHOD_START", "{", "for    ( int   i    =     0  ;    i    <     ( columnNames . length )  ;    i +  +  )     {", "assertEquals ( queryResult . tryFindColumnIndex ( columnNames [ i ]  )  ,    Opal . of (  ( i    +     1  )  )  ,     (  \" Index   of   column    \"     +     ( columnNames [ i ]  )  )  )  ;", "}", "assertEquals ( queryResult . getColumnsCount (  )  ,    columnNames . length )  ;", "}", "METHOD_END"], "methodName": ["assertColumnNames"], "fileName": "com.facebook.presto.tests.convention.TestShowPartitions"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( tableName ,     \" tableName   is   null \"  )  ;", "int   maxAtOnce    =     1  0  0  ;", "IntStream . range (  0  ,    IntMath . divide ( partitionsToCreate ,    maxAtOnce ,    RoundingMode . UP )  )  . forEach (  (    batch )     -  >     {", "int   rangeStart    =    batch    *    maxAtOnce ;", "int   rangeEndInclusive    =     ( min (  (  ( batch    +     1  )     *    maxAtOnce )  ,    partitionsToCreate )  )     -     1  ;", "query ( format (  (  \" INSERT   INTO    % s    ( part _ col ,    col )     \"     +     \" SELECT   CAST ( id   AS   integer )  ,     4  2    FROM   UNNEST    ( sequence (  % s ,     % s )  )    AS   u ( id )  \"  )  ,    tableName ,    rangeStart ,    rangeEndInclusive )  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["createPartitions"], "fileName": "com.facebook.presto.tests.convention.TestShowPartitions"}, {"methodBody": ["METHOD_START", "{", "String   createTableDdl    =     \" CREATE   EXTERNAL   TABLE    % NAME %  ( col   INT )     \"     +     (  \" PARTITIONED   BY    ( part _ col   INT )     \"     +     \" STORED   AS   ORC \"  )  ;", "HiveDataSource   dataSource    =    createResourceDataSource (  . PARTITIONED _ TABLE ,    String . valueOf ( ThreadLocalRandom . current (  )  . nextLong ( Long . MAX _ VALUE )  )  ,     \" com / facebook / presto / tests / hive / data / single _ int _ column / data . orc \"  )  ;", "HiveDataSource   invalidData    =    createStringDataSource (  . PARTITIONED _ TABLE ,    String . valueOf ( ThreadLocalRandom . current (  )  . nextLong ( Long . MAX _ VALUE )  )  ,     \" INVALID   DATA \"  )  ;", "return   HiveTableDefinition . builder (  . PARTITIONED _ TABLE )  . setCreateTableDDLTemplate ( createTableDdl )  . addPartition (  \" part _ col    =     1  \"  ,    invalidData )  . addPartition (  \" part _ col    =     2  \"  ,    dataSource )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["partitionedTableDefinition"], "fileName": "com.facebook.presto.tests.convention.TestShowPartitions"}, {"methodBody": ["METHOD_START", "{", "String   createTableDdl    =     \" CREATE   TABLE    % NAME %  ( col   INT )     \"     +     (  \" PARTITIONED   BY    ( part _ col   INT )     \"     +     \" STORED   AS   ORC \"  )  ;", "return   HiveTableDefinition . builder (  . PARTITIONED _ TABLE _ WITH _ VARIABLE _ PARTITIONS )  . setCreateTableDDLTemplate ( createTableDdl )  . setNoData (  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["partitionedTableWithVariablePartitionsDefinition"], "fileName": "com.facebook.presto.tests.convention.TestShowPartitions"}, {"methodBody": ["METHOD_START", "{", "String   tableNameInDatabase    =    tablesState . get ( TestShowPartitions . PARTITIONED _ TABLE )  . getNameInDatabase (  )  ;", "QueryResult   partitionListResult ;", "partitionListResult    =    QueryExecutor . query (  (  \" SHOW   PARTITIONS   FROM    \"     +    tableNameInDatabase )  )  ;", "QueryAssert . assertThat ( partitionListResult )  . containsExactly ( Row . row (  1  )  ,    Row . row (  2  )  )  ;", "TestShowPartitions . assertColumnNames ( partitionListResult ,     \" part _ col \"  )  ;", "partitionListResult    =    QueryExecutor . query ( String . format (  \" SHOW   PARTITIONS   FROM    % s   WHERE   part _ col    =     1  \"  ,    tableNameInDatabase )  )  ;", "QueryAssert . assertThat ( partitionListResult )  . containsExactly ( Row . row (  1  )  )  ;", "TestShowPartitions . assertColumnNames ( partitionListResult ,     \" part _ col \"  )  ;", "QueryAssert . assertThat (  (  )     -  >    query ( format (  \" SHOW   PARTITIONS   FROM    % s   WHERE   no _ such _ column    =     1  \"  ,    tableNameInDatabase )  )  )  . failsWithMessage (  \" Column    ' no _ such _ column '    cannot   be   resolved \"  )  ;", "QueryAssert . assertThat (  (  )     -  >    query ( format (  \" SHOW   PARTITIONS   FROM    % s   WHERE   col    =     1  \"  ,    tableNameInDatabase )  )  )  . failsWithMessage (  \" Column    ' col '    cannot   be   resolved \"  )  ;", "}", "METHOD_END"], "methodName": ["testShowPartitionsFromHiveTable"], "fileName": "com.facebook.presto.tests.convention.TestShowPartitions"}, {"methodBody": ["METHOD_START", "{", "String   tableName    =    tablesState . get ( TestShowPartitions . PARTITIONED _ TABLE _ WITH _ VARIABLE _ PARTITIONS )  . getNameInDatabase (  )  ;", "createPartitions ( tableName ,    TestShowPartitions . TOO _ MANY _ PARTITIONS )  ;", "assertThatThrownBy (  (  )     -  >    query (  (  \" SELECT    *    FROM    \"     +    tableName )  )  )  . hasMessageMatching (  \"  .  *  :    Query   over   table    \\  '  \\  \\ S +  \\  '    can   potentially   read   more   than    \\  \\ d +    partitions \"  )  ;", "QueryResult   partitionListResult ;", "partitionListResult    =    QueryExecutor . query ( String . format (  \" SHOW   PARTITIONS   FROM    % s   WHERE   part _ col    <     7  \"  ,    tableName )  )  ;", "QueryAssert . assertThat ( partitionListResult )  . containsExactly ( Row . row (  0  )  ,    Row . row (  1  )  ,    Row . row (  2  )  ,    Row . row (  3  )  ,    Row . row (  4  )  ,    Row . row (  5  )  ,    Row . row (  6  )  )  ;", "TestShowPartitions . assertColumnNames ( partitionListResult ,     \" part _ col \"  )  ;", "partitionListResult    =    QueryExecutor . query ( String . format (  \" SHOW   PARTITIONS   FROM    % s   WHERE   part _ col    <     -  1  0  \"  ,    tableName )  )  ;", "QueryAssert . assertThat ( partitionListResult )  . hasNoRows (  )  ;", "partitionListResult    =    QueryExecutor . query ( String . format (  \" SHOW   PARTITIONS   FROM    % s   ORDER   BY   part _ col   LIMIT    7  \"  ,    tableName )  )  ;", "QueryAssert . assertThat ( partitionListResult )  . containsExactly ( Row . row (  0  )  ,    Row . row (  1  )  ,    Row . row (  2  )  ,    Row . row (  3  )  ,    Row . row (  4  )  ,    Row . row (  5  )  ,    Row . row (  6  )  )  ;", "}", "METHOD_END"], "methodName": ["testShowPartitionsFromHiveTableWithTooManyPartitions"], "fileName": "com.facebook.presto.tests.convention.TestShowPartitions"}, {"methodBody": ["METHOD_START", "{", "QueryAssert . assertThat (  (  )     -  >    query (  \" SHOW   PARTITIONS   FROM   nation \"  )  )  . failsWithMessageMatching (  \"  .  * Table   does   not   have   partition   columns :    hive . default . nation \"  )  ;", "}", "METHOD_END"], "methodName": ["testShowPartitionsFromUnpartitionedTable"], "fileName": "com.facebook.presto.tests.convention.TestShowPartitions"}, {"methodBody": ["METHOD_START", "{", "QueryAssert . assertThat ( QueryExecutor . query (  \" SELECT   min ( x )    FROM    ( VALUES    1  ,  2  ,  3  ,  4  )    t ( x )  \"  )  )  . containsExactly ( Row . row (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["testAggregate"], "fileName": "com.facebook.presto.tests.functions.FunctionsTests"}, {"methodBody": ["METHOD_START", "{", "QueryAssert . assertThat ( QueryExecutor . query (  \" SELECT   upper (  ' value '  )  \"  )  )  . containsExactly ( Row . row (  \" VALUE \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testScalarFunction"], "fileName": "com.facebook.presto.tests.functions.FunctionsTests"}, {"methodBody": ["METHOD_START", "{", "return   new   Object [  ]  [  ]  {    new   Object [  ]  {     \" false \"  ,     \" true \"  ,     \" boolean \"     }  ,    new   Object [  ]  {     \"  0  \"  ,     \"  1  \"  ,     \" double \"     }  ,    new   Object [  ]  {     \"  0  \"  ,     \"  1  \"  ,     \" bigint \"     }  ,    new   Object [  ]  {     \" date    '  1  9  9  1  -  0  1  -  0  1  '  \"  ,     \" date    '  1  9  9  1  -  0  1  -  0  2  '  \"  ,     \" date \"     }  ,    new   Object [  ]  {     \" time    '  0  1  :  0  2  :  0  3  .  4  5  6  '  \"  ,     \" time    '  0  1  :  0  2  :  0  3  .  4  5  7  '  \"  ,     \" time \"     }  ,    new   Object [  ]  {     \" time    '  0  1  :  0  2  :  0  3  .  4  5  6    America / Los _ Angeles '  \"  ,     \" time    '  0  1  :  0  2  :  0  3  .  4  5  7    America / Los _ Angeles '  \"  ,     \" TIME   WITH   TIME   ZONE \"     }  ,    new   Object [  ]  {     \" TIMESTAMP    '  2  0  0  1  -  0  8  -  2  2     0  3  :  0  4  :  0  5  .  3  2  1  '  \"  ,     \" TIMESTAMP    '  2  0  0  1  -  0  8  -  2  2     0  3  :  0  4  :  0  5  .  3  2  2  '  \"  ,     \" TIMESTAMP \"     }  ,    new   Object [  ]  {     \" TIMESTAMP    '  2  0  0  1  -  0  8  -  2  2     0  3  :  0  4  :  0  5  .  3  2  1    America / Los _ Angeles '  \"  ,     \" TIMESTAMP    '  2  0  0  1  -  0  8  -  2  2     0  3  :  0  4  :  0  5  .  3  2  2    America / Los _ Angeles '  \"  ,     \" TIMESTAMP   WITH   TIME   ZONE \"     }     }  ;", "}", "METHOD_END"], "methodName": ["operandsProvider"], "fileName": "com.facebook.presto.tests.functions.operators.Comparison"}, {"methodBody": ["METHOD_START", "{", "QueryAssert . assertThat ( QueryExecutor . query ( String . format (  \" select   cast (  % s   as    % s )    BETWEEN   cast (  % s   as    % s )    AND   cast (  % s   as    % s )  \"  ,    leftOperand ,    typeName ,    leftOperand ,    typeName ,    rightOperand ,    typeName )  )  )  . containsExactly ( Row . row ( true )  )  ;", "}", "METHOD_END"], "methodName": ["testBetweenOperatorExists"], "fileName": "com.facebook.presto.tests.functions.operators.Comparison"}, {"methodBody": ["METHOD_START", "{", "QueryAssert . assertThat ( QueryExecutor . query ( String . format (  \" select   cast (  % s   as    % s )     =    cast (  % s   as    % s )  \"  ,    leftOperand ,    typeName ,    rightOperand ,    typeName )  )  )  . containsExactly ( Row . row ( false )  )  ;", "}", "METHOD_END"], "methodName": ["testEqualOperatorExists"], "fileName": "com.facebook.presto.tests.functions.operators.Comparison"}, {"methodBody": ["METHOD_START", "{", "QueryAssert . assertThat ( QueryExecutor . query ( String . format (  \" select   cast (  % s   as    % s )     >    cast (  % s   as    % s )  \"  ,    leftOperand ,    typeName ,    rightOperand ,    typeName )  )  )  . containsExactly ( Row . row ( false )  )  ;", "}", "METHOD_END"], "methodName": ["testGreaterThanOperatorExists"], "fileName": "com.facebook.presto.tests.functions.operators.Comparison"}, {"methodBody": ["METHOD_START", "{", "QueryAssert . assertThat ( QueryExecutor . query ( String . format (  \" select   cast (  % s   as    % s )     >  =    cast (  % s   as    % s )  \"  ,    leftOperand ,    typeName ,    rightOperand ,    typeName )  )  )  . containsExactly ( Row . row ( false )  )  ;", "}", "METHOD_END"], "methodName": ["testGreaterThanOrEqualOperatorExists"], "fileName": "com.facebook.presto.tests.functions.operators.Comparison"}, {"methodBody": ["METHOD_START", "{", "QueryAssert . assertThat ( QueryExecutor . query ( String . format (  \" select   cast (  % s   as    % s )     <    cast (  % s   as    % s )  \"  ,    leftOperand ,    typeName ,    rightOperand ,    typeName )  )  )  . containsExactly ( Row . row ( true )  )  ;", "}", "METHOD_END"], "methodName": ["testLessThanOperatorExists"], "fileName": "com.facebook.presto.tests.functions.operators.Comparison"}, {"methodBody": ["METHOD_START", "{", "QueryAssert . assertThat ( QueryExecutor . query ( String . format (  \" select   cast (  % s   as    % s )     <  =    cast (  % s   as    % s )  \"  ,    leftOperand ,    typeName ,    rightOperand ,    typeName )  )  )  . containsExactly ( Row . row ( true )  )  ;", "}", "METHOD_END"], "methodName": ["testLessThanOrEqualOperatorExists"], "fileName": "com.facebook.presto.tests.functions.operators.Comparison"}, {"methodBody": ["METHOD_START", "{", "QueryAssert . assertThat ( QueryExecutor . query (  \" select   true   AND   true \"  )  )  . containsExactly ( Row . row ( true )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  \" select   true   OR   false \"  )  )  . containsExactly ( Row . row ( true )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  \" select    1    in    (  1  ,     2  ,     3  )  \"  )  )  . containsExactly ( Row . row ( true )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  \" select    ' ala   ma   kota '    like    ' ala %  '  \"  )  )  . containsExactly ( Row . row ( true )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  \" select   NOT   true \"  )  )  . containsExactly ( Row . row ( false )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  \" select   null   is   null \"  )  )  . containsExactly ( Row . row ( true )  )  ;", "}", "METHOD_END"], "methodName": ["testLogicalOperatorsExists"], "fileName": "com.facebook.presto.tests.functions.operators.Logical"}, {"methodBody": ["METHOD_START", "{", "return   HiveTableDefinition . builder (  \" avro _ all _ types \"  )  . setCreateTableDDLTemplate (  (  \"  \"     +     (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  \" CREATE    % EXTERNAL %    TABLE    % NAME %  (  \"     +     \"          c _ int                                                INT ,  \"  )     +     \"          c _ bigint                                       BIGINT ,  \"  )     +     \"          c _ float                                          FLOAT ,  \"  )     +     \"          c _ double                                       DOUBLE ,  \"  )     +     \"          c _ decimal                                    DECIMAL ,  \"  )     +     \"          c _ decimal _ w _ params         DECIMAL (  1  0  ,  5  )  ,  \"  )     +     \"          c _ timestamp                              TIMESTAMP ,  \"  )     +     \"          c _ date                                             DATE ,  \"  )     +     \"          c _ string                                       STRING ,  \"  )     +     \"          c _ varchar                                    VARCHAR (  1  0  )  ,  \"  )     +     \"          c _ char                                             CHAR (  1  0  )  ,  \"  )     +     \"          c _ boolean                                    BOOLEAN ,  \"  )     +     \"          c _ binary                                       BINARY \"  )     +     \"  )     \"  )     +     \" STORED   AS   AVRO \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["avroTableDefinitionBuilder"], "fileName": "com.facebook.presto.tests.hive.AllSimpleTypesTableDefinitions"}, {"methodBody": ["METHOD_START", "{", "return   createResourceDataSource ( String . format ( AllSimpleTypesTableDefinitions . tableNameFormat ,     \" textfile \"  )  ,    String . valueOf ( ThreadLocalRandom . current (  )  . nextLong ( Long . MAX _ VALUE )  )  ,     \" com / facebook / presto / tests / hive / data / all _ types / data . textfile \"  )  ;", "}", "METHOD_END"], "methodName": ["getTextFileDataSource"], "fileName": "com.facebook.presto.tests.hive.AllSimpleTypesTableDefinitions"}, {"methodBody": ["METHOD_START", "{", "return   ThreadLocalTestContextHolder . testContext (  )  . getDependency ( QueryExecutor . class ,     \" hive \"  )  ;", "}", "METHOD_END"], "methodName": ["onHive"], "fileName": "com.facebook.presto.tests.hive.AllSimpleTypesTableDefinitions"}, {"methodBody": ["METHOD_START", "{", "return   HiveTableDefinition . builder (  \" parquet _ all _ types \"  )  . setCreateTableDDLTemplate (  (  \"  \"     +     (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  \" CREATE    % EXTERNAL %    TABLE    % NAME %  (  \"     +     \"          c _ tinyint                                    TINYINT ,  \"  )     +     \"          c _ smallint                                 SMALLINT ,  \"  )     +     \"          c _ int                                                INT ,  \"  )     +     \"          c _ bigint                                       BIGINT ,  \"  )     +     \"          c _ float                                          FLOAT ,  \"  )     +     \"          c _ double                                       DOUBLE ,  \"  )     +     \"          c _ decimal                                    DECIMAL ,  \"  )     +     \"          c _ decimal _ w _ params         DECIMAL (  1  0  ,  5  )  ,  \"  )     +     \"          c _ timestamp                              TIMESTAMP ,  \"  )     +     \"          c _ string                                       STRING ,  \"  )     +     \"          c _ varchar                                    VARCHAR (  1  0  )  ,  \"  )     +     \"          c _ char                                             CHAR (  1  0  )  ,  \"  )     +     \"          c _ boolean                                    BOOLEAN ,  \"  )     +     \"          c _ binary                                       BINARY \"  )     +     \"  )     \"  )     +     \" STORED   AS   PARQUET \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["parquetTableDefinitionBuilder"], "fileName": "com.facebook.presto.tests.hive.AllSimpleTypesTableDefinitions"}, {"methodBody": ["METHOD_START", "{", "AllSimpleTypesTableDefinitions . onHive (  )  . executeQuery ( String . format (  \" INSERT   INTO   TABLE    % s   SELECT    *    FROM    % s \"  ,    tableName ,    String . format ( AllSimpleTypesTableDefinitions . tableNameFormat ,     \" textfile \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["populateDataToHiveTable"], "fileName": "com.facebook.presto.tests.hive.AllSimpleTypesTableDefinitions"}, {"methodBody": ["METHOD_START", "{", "String   tableName    =    String . format ( AllSimpleTypesTableDefinitions . tableNameFormat ,    fileFormat . toLowerCase ( Locale . ENGLISH )  )  ;", "return   HiveTableDefinition . builder ( tableName )  . setCreateTableDDLTemplate (  (  (  (  (  \"  \"     +     (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  \" CREATE    % EXTERNAL %    TABLE    % NAME %  (  \"     +     \"          c _ tinyint                                    TINYINT ,  \"  )     +     \"          c _ smallint                                 SMALLINT ,  \"  )     +     \"          c _ int                                                INT ,  \"  )     +     \"          c _ bigint                                       BIGINT ,  \"  )     +     \"          c _ float                                          FLOAT ,  \"  )     +     \"          c _ double                                       DOUBLE ,  \"  )     +     \"          c _ decimal                                    DECIMAL ,  \"  )     +     \"          c _ decimal _ w _ params         DECIMAL (  1  0  ,  5  )  ,  \"  )     +     \"          c _ timestamp                              TIMESTAMP ,  \"  )     +     \"          c _ date                                             DATE ,  \"  )     +     \"          c _ string                                       STRING ,  \"  )     +     \"          c _ varchar                                    VARCHAR (  1  0  )  ,  \"  )     +     \"          c _ char                                             CHAR (  1  0  )  ,  \"  )     +     \"          c _ boolean                                    BOOLEAN ,  \"  )     +     \"          c _ binary                                       BINARY \"  )     +     \"  )     \"  )  )     +     ( rowFormat . isPresent (  )     ?     (  \" ROW   FORMAT    \"     +     ( rowFormat . get (  )  )  )     +     \"     \"     :     \"     \"  )  )     +     \" STORED   AS    \"  )     +    fileFormat )  )  ;", "}", "METHOD_END"], "methodName": ["tableDefinitionBuilder"], "fileName": "com.facebook.presto.tests.hive.AllSimpleTypesTableDefinitions"}, {"methodBody": ["METHOD_START", "{", "String   queryId ;", "if    (  ( queryResult . getJdbcResultSet (  )  . isPresent (  )  )     &  &     ( queryResult . getJdbcResultSet (  )  . get (  )  . isWrapperFor ( PResultSet . class )  )  )     {", "queryId    =    queryResult . getJdbcResultSet (  )  . get (  )  . unwrap ( PResultSet . class )  . getQueryId (  )  ;", "} else    {", "queryId    =     (  ( String )     ( QueryExecutor . query ( String . format (  \" select   query _ id   from   system . runtime . queries   where   query    =     '  % s '  \"  ,    sqlStatement )  )  . row (  0  )  . get (  0  )  )  )  ;", "}", "return   queryStatsClient . getQueryStats ( queryId )  . get (  )  . getRawInputPositions (  )  ;", "}", "METHOD_END"], "methodName": ["getProcessedLinesCount"], "fileName": "com.facebook.presto.tests.hive.HivePartitioningTest"}, {"methodBody": ["METHOD_START", "{", "this . queryStatsClient    =    queryStatsClient ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.tests.hive.HivePartitioningTest"}, {"methodBody": ["METHOD_START", "{", "return    (  \" com / facebook / presto / tests / hive / data / partitioned _ nation / nation _ region _  \"     +    region )     +     \"  . textfile \"  ;", "}", "METHOD_END"], "methodName": ["partitionDataFileResource"], "fileName": "com.facebook.presto.tests.hive.HiveTableDefinitions"}, {"methodBody": ["METHOD_START", "{", "Connection   connection    =    QueryExecutor . defaultQueryExecutor (  )  . getConnection (  )  ;", "if    ( JdbcDriverUtils . usingPrestoJdbcDriver ( connection )  )     {", "QueryAssert . assertThat ( queryResult )  . hasColumns ( JDBCType . TINYINT ,    JDBCType . SMALLINT ,    JDBCType . INTEGER ,    JDBCType . BIGINT ,    JDBCType . REAL ,    JDBCType . DOUBLE ,    JDBCType . DECIMAL ,    JDBCType . DECIMAL ,    JDBCType . TIMESTAMP ,    JDBCType . DATE ,    JDBCType . LONGNVARCHAR ,    JDBCType . LONGNVARCHAR ,    JDBCType . CHAR ,    JDBCType . BOOLEAN ,    JDBCType . LONGVARBINARY )  ;", "} else", "if    ( JdbcDriverUtils . usingTeradataJdbcDriver ( connection )  )     {", "QueryAssert . assertThat ( queryResult )  . hasColumns ( JDBCType . TINYINT ,    JDBCType . SMALLINT ,    JDBCType . INTEGER ,    JDBCType . BIGINT ,    JDBCType . REAL ,    JDBCType . DOUBLE ,    JDBCType . DECIMAL ,    JDBCType . DECIMAL ,    JDBCType . TIMESTAMP ,    JDBCType . DATE ,    JDBCType . VARCHAR ,    JDBCType . VARCHAR ,    JDBCType . CHAR ,    JDBCType . BOOLEAN ,    JDBCType . VARBINARY )  ;", "} else    {", "throw   new   IllegalStateException (  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertColumnTypes"], "fileName": "com.facebook.presto.tests.hive.TestAllDatatypesFromHiveConnector"}, {"methodBody": ["METHOD_START", "{", "Connection   connection    =    QueryExecutor . defaultQueryExecutor (  )  . getConnection (  )  ;", "if    ( JdbcDriverUtils . usingPrestoJdbcDriver ( connection )  )     {", "QueryAssert . assertThat ( queryResult )  . hasColumns ( JDBCType . TINYINT ,    JDBCType . SMALLINT ,    JDBCType . INTEGER ,    JDBCType . BIGINT ,    JDBCType . REAL ,    JDBCType . DOUBLE ,    JDBCType . DECIMAL ,    JDBCType . DECIMAL ,    JDBCType . TIMESTAMP ,    JDBCType . LONGNVARCHAR ,    JDBCType . LONGNVARCHAR ,    JDBCType . CHAR ,    JDBCType . BOOLEAN ,    JDBCType . LONGVARBINARY )  ;", "} else", "if    ( JdbcDriverUtils . usingTeradataJdbcDriver ( connection )  )     {", "QueryAssert . assertThat ( queryResult )  . hasColumns ( JDBCType . TINYINT ,    JDBCType . SMALLINT ,    JDBCType . INTEGER ,    JDBCType . BIGINT ,    JDBCType . REAL ,    JDBCType . DOUBLE ,    JDBCType . DECIMAL ,    JDBCType . DECIMAL ,    JDBCType . TIMESTAMP ,    JDBCType . VARCHAR ,    JDBCType . VARCHAR ,    JDBCType . CHAR ,    JDBCType . BOOLEAN ,    JDBCType . VARBINARY )  ;", "} else    {", "throw   new   IllegalStateException (  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertColumnTypesParquet"], "fileName": "com.facebook.presto.tests.hive.TestAllDatatypesFromHiveConnector"}, {"methodBody": ["METHOD_START", "{", "QueryAssert . assertThat ( QueryExecutor . query (  (  \" SHOW   COLUMNS   FROM    \"     +    tableName )  )  . project (  1  ,     2  )  )  . containsExactly ( Row . row (  \" c _ tinyint \"  ,     \" tinyint \"  )  ,    Row . row (  \" c _ smallint \"  ,     \" smallint \"  )  ,    Row . row (  \" c _ int \"  ,     \" integer \"  )  ,    Row . row (  \" c _ bigint \"  ,     \" bigint \"  )  ,    Row . row (  \" c _ float \"  ,     \" real \"  )  ,    Row . row (  \" c _ double \"  ,     \" double \"  )  ,    Row . row (  \" c _ decimal \"  ,     \" decimal (  1  0  ,  0  )  \"  )  ,    Row . row (  \" c _ decimal _ w _ params \"  ,     \" decimal (  1  0  ,  5  )  \"  )  ,    Row . row (  \" c _ timestamp \"  ,     \" timestamp \"  )  ,    Row . row (  \" c _ date \"  ,     \" date \"  )  ,    Row . row (  \" c _ string \"  ,     \" varchar \"  )  ,    Row . row (  \" c _ varchar \"  ,     \" varchar (  1  0  )  \"  )  ,    Row . row (  \" c _ char \"  ,     \" char (  1  0  )  \"  )  ,    Row . row (  \" c _ boolean \"  ,     \" boolean \"  )  ,    Row . row (  \" c _ binary \"  ,     \" varbinary \"  )  )  ;", "}", "METHOD_END"], "methodName": ["assertProperAllDatatypesSchema"], "fileName": "com.facebook.presto.tests.hive.TestAllDatatypesFromHiveConnector"}, {"methodBody": ["METHOD_START", "{", "if    ( tableDefinition . getDatabase (  )  . isPresent (  )  )     {", "return    . mutableTableInstanceOf ( tableDefinition ,    tableDefinition . getDatabase (  )  . get (  )  )  ;", "} else    {", "return    . mutableTableInstanceOf (  . tableHandleInSchema ( tableDefinition )  )  ;", "}", "}", "METHOD_END"], "methodName": ["mutableTableInstanceOf"], "fileName": "com.facebook.presto.tests.hive.TestAllDatatypesFromHiveConnector"}, {"methodBody": ["METHOD_START", "{", "return   TestAllDatatypesFromHiveConnector . mutableTableInstanceOf ( TestAllDatatypesFromHiveConnector . tableHandleInSchema ( tableDefinition )  . inDatabase ( database )  )  ;", "}", "METHOD_END"], "methodName": ["mutableTableInstanceOf"], "fileName": "com.facebook.presto.tests.hive.TestAllDatatypesFromHiveConnector"}, {"methodBody": ["METHOD_START", "{", "return   ThreadLocalTestContextHolder . testContext (  )  . getDependency ( MutableTablesState . class )  . get ( tableHandle )  ;", "}", "METHOD_END"], "methodName": ["mutableTableInstanceOf"], "fileName": "com.facebook.presto.tests.hive.TestAllDatatypesFromHiveConnector"}, {"methodBody": ["METHOD_START", "{", "TableHandle   tableHandle    =    tableHandle ( tableDefinition . getName (  )  )  ;", "if    ( tableDefinition . getSchema (  )  . isPent (  )  )     {", "tableHandle    =    tableHandle . inSchema ( tableDefinition . getSchema (  )  . get (  )  )  ;", "}", "return   tableHandle ;", "}", "METHOD_END"], "methodName": ["tableHandleInSchema"], "fileName": "com.facebook.presto.tests.hive.TestAllDatatypesFromHiveConnector"}, {"methodBody": ["METHOD_START", "{", "String   tableName    =    TestAllDatatypesFromHiveConnector . mutableTableInstanceOf ( AllSimpleTypesTableDefinitions . ALL _ HIVE _ SIMPLE _ TYPES _ AVRO )  . getNameInDatabase (  )  ;", "AllSimpleTypesTableDefinitions . onHive (  )  . executeQuery ( String . format (  (  (  (  (  (  (  (  (  (  (  (  (  \" INSERT   INTO    % s   VALUES (  \"     +     (  (  (  (  (  (  \"  2  1  4  7  4  8  3  6  4  7  ,  \"     +     \"  9  2  2  3  3  7  2  0  3  6  8  5  4  7  7  5  8  0  7  ,  \"  )     +     \"  1  2  3  .  3  4  5  ,  \"  )     +     \"  2  3  4  .  5  6  7  ,  \"  )     +     \"  3  4  6  ,  \"  )     +     \"  3  4  5  .  6  7  8  0  0  ,  \"  )     +     \"  '  \"  )  )     +     ( DateTimeUtils . parseTimestampInLocalTime (  \"  2  0  1  5  -  0  5  -  1  0     1  2  :  1  5  :  3  5  .  1  2  3  \"  ,    TemptoProductTestRunner . PRODUCT _ TESTS _ TIME _ ZONE )  . toString (  )  )  )     +     \"  '  ,  \"  )     +     \"  '  \"  )     +     ( Date . valueOf (  \"  2  0  1  5  -  0  5  -  1  0  \"  )  )  )     +     \"  '  ,  \"  )     +     \"  ' ala   ma   kota '  ,  \"  )     +     \"  ' ala   ma   kot '  ,  \"  )     +     \"  ' ala   ma             '  ,  \"  )     +     \" true ,  \"  )     +     \"  ' kot   binarny '  \"  )     +     \"  )  \"  )  ,    tableName )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  (  \" SHOW   COLUMNS   FROM    \"     +    tableName )  )  . project (  1  ,     2  )  )  . containsExactly ( Row . row (  \" c _ int \"  ,     \" integer \"  )  ,    Row . row (  \" c _ bigint \"  ,     \" bigint \"  )  ,    Row . row (  \" c _ float \"  ,     \" real \"  )  ,    Row . row (  \" c _ double \"  ,     \" double \"  )  ,    Row . row (  \" c _ decimal \"  ,     \" decimal (  1  0  ,  0  )  \"  )  ,    Row . row (  \" c _ decimal _ w _ params \"  ,     \" decimal (  1  0  ,  5  )  \"  )  ,    Row . row (  \" c _ timestamp \"  ,     \" timestamp \"  )  ,    Row . row (  \" c _ date \"  ,     \" date \"  )  ,    Row . row (  \" c _ string \"  ,     \" varchar \"  )  ,    Row . row (  \" c _ varchar \"  ,     \" varchar (  1  0  )  \"  )  ,    Row . row (  \" c _ char \"  ,     \" char (  1  0  )  \"  )  ,    Row . row (  \" c _ boolean \"  ,     \" boolean \"  )  ,    Row . row (  \" c _ binary \"  ,     \" varbinary \"  )  )  ;", "QueryResult   queryResult    =    QueryExecutor . query (  (  \" SELECT    *    FROM    \"     +    tableName )  )  ;", "Connection   connection    =    QueryExecutor . defaultQueryExecutor (  )  . getConnection (  )  ;", "if    ( JdbcDriverUtils . usingPrestoJdbcDriver ( connection )  )     {", "QueryAssert . assertThat ( queryResult )  . hasColumns ( JDBCType . INTEGER ,    JDBCType . BIGINT ,    JDBCType . REAL ,    JDBCType . DOUBLE ,    JDBCType . DECIMAL ,    JDBCType . DECIMAL ,    JDBCType . TIMESTAMP ,    JDBCType . DATE ,    JDBCType . LONGNVARCHAR ,    JDBCType . LONGNVARCHAR ,    JDBCType . CHAR ,    JDBCType . BOOLEAN ,    JDBCType . LONGVARBINARY )  ;", "} else", "if    ( JdbcDriverUtils . usingTeradataJdbcDriver ( connection )  )     {", "QueryAssert . assertThat ( queryResult )  . hasColumns ( JDBCType . INTEGER ,    JDBCType . BIGINT ,    JDBCType . REAL ,    JDBCType . DOUBLE ,    JDBCType . DECIMAL ,    JDBCType . DECIMAL ,    JDBCType . TIMESTAMP ,    JDBCType . DATE ,    JDBCType . VARCHAR ,    JDBCType . VARCHAR ,    JDBCType . CHAR ,    JDBCType . BOOLEAN ,    JDBCType . VARBINARY )  ;", "}", "QueryAssert . assertThat ( queryResult )  . containsOnly ( Row . row (  2  1  4  7  4  8  3  6  4  7  ,     9  2  2  3  3  7  2  0  3  6  8  5  4  7  7  5  8  0  7 L ,     1  2  3  .  3  4  5 F ,     2  3  4  .  5  6  7  ,    new   BigDecimal (  \"  3  4  6  \"  )  ,    new   BigDecimal (  \"  3  4  5  .  6  7  8  0  0  \"  )  ,    DateTimeUtils . parseTimestampInLocalTime (  \"  2  0  1  5  -  0  5  -  1  0     1  2  :  1  5  :  3  5  .  1  2  3  \"  ,    TemptoProductTestRunner . PRODUCT _ TESTS _ TIME _ ZONE )  ,    Date . valueOf (  \"  2  0  1  5  -  0  5  -  1  0  \"  )  ,     \" ala   ma   kota \"  ,     \" ala   ma   kot \"  ,     \" ala   ma             \"  ,    true ,     \" kot   binarny \"  . getBytes (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSelectAllDatatypesAvro"], "fileName": "com.facebook.presto.tests.hive.TestAllDatatypesFromHiveConnector"}, {"methodBody": ["METHOD_START", "{", "String   tableName    =    TestAllDatatypesFromHiveConnector . mutableTableInstanceOf ( AllSimpleTypesTableDefinitions . ALL _ HIVE _ SIMPLE _ TYPES _ ORC )  . getNameInDatabase (  )  ;", "AllSimpleTypesTableDefinitions . populateDataToHiveTable ( tableName )  ;", "assertProperAllDatatypesSchema ( tableName )  ;", "QueryResult   queryResult    =    QueryExecutor . query ( String . format (  \" SELECT    *    FROM    % s \"  ,    tableName )  )  ;", "assertColumnTypes ( queryResult )  ;", "QueryAssert . assertThat ( queryResult )  . containsOnly ( Row . row (  1  2  7  ,     3  2  7  6  7  ,     2  1  4  7  4  8  3  6  4  7  ,     9  2  2  3  3  7  2  0  3  6  8  5  4  7  7  5  8  0  7 L ,     1  2  3  .  3  4  5 F ,     2  3  4  .  5  6  7  ,    new   BigDecimal (  \"  3  4  6  \"  )  ,    new   BigDecimal (  \"  3  4  5  .  6  7  8  0  0  \"  )  ,    DateTimeUtils . parseTimestampInLocalTime (  \"  2  0  1  5  -  0  5  -  1  0     1  2  :  1  5  :  3  5  .  1  2  3  \"  ,    TemptoProductTestRunner . PRODUCT _ TESTS _ TIME _ ZONE )  ,    Date . valueOf (  \"  2  0  1  5  -  0  5  -  1  0  \"  )  ,     \" ala   ma   kota \"  ,     \" ala   ma   kot \"  ,     \" ala   ma             \"  ,    true ,     \" kot   binarny \"  . getBytes (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSelectAllDatatypesOrc"], "fileName": "com.facebook.presto.tests.hive.TestAllDatatypesFromHiveConnector"}, {"methodBody": ["METHOD_START", "{", "String   tableName    =    TestAllDatatypesFromHiveConnector . mutableTableInstanceOf ( AllSimpleTypesTableDefinitions . ALL _ HIVE _ SIMPLE _ TYPES _ PARQUET )  . getNameInDatabase (  )  ;", "AllSimpleTypesTableDefinitions . onHive (  )  . executeQuery ( String . format (  (  (  (  (  (  (  (  (  (  \" INSERT   INTO    % s   VALUES (  \"     +     (  (  (  (  (  (  (  (  \"  1  2  7  ,  \"     +     \"  3  2  7  6  7  ,  \"  )     +     \"  2  1  4  7  4  8  3  6  4  7  ,  \"  )     +     \"  9  2  2  3  3  7  2  0  3  6  8  5  4  7  7  5  8  0  7  ,  \"  )     +     \"  1  2  3  .  3  4  5  ,  \"  )     +     \"  2  3  4  .  5  6  7  ,  \"  )     +     \"  3  4  6  ,  \"  )     +     \"  3  4  5  .  6  7  8  0  0  ,  \"  )     +     \"  '  \"  )  )     +     ( DateTimeUtils . parseTimestampInLocalTime (  \"  2  0  1  5  -  0  5  -  1  0     1  2  :  1  5  :  3  5  .  1  2  3  \"  ,    TemptoProductTestRunner . PRODUCT _ TESTS _ TIME _ ZONE )  . toString (  )  )  )     +     \"  '  ,  \"  )     +     \"  ' ala   ma   kota '  ,  \"  )     +     \"  ' ala   ma   kot '  ,  \"  )     +     \"  ' ala   ma             '  ,  \"  )     +     \" true ,  \"  )     +     \"  ' kot   binarny '  \"  )     +     \"  )  \"  )  ,    tableName )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( String . format (  \" SHOW   COLUMNS   FROM    % s \"  ,    tableName )  )  . project (  1  ,     2  )  )  . containsExactly ( Row . row (  \" c _ tinyint \"  ,     \" tinyint \"  )  ,    Row . row (  \" c _ smallint \"  ,     \" smallint \"  )  ,    Row . row (  \" c _ int \"  ,     \" integer \"  )  ,    Row . row (  \" c _ bigint \"  ,     \" bigint \"  )  ,    Row . row (  \" c _ float \"  ,     \" real \"  )  ,    Row . row (  \" c _ double \"  ,     \" double \"  )  ,    Row . row (  \" c _ decimal \"  ,     \" decimal (  1  0  ,  0  )  \"  )  ,    Row . row (  \" c _ decimal _ w _ params \"  ,     \" decimal (  1  0  ,  5  )  \"  )  ,    Row . row (  \" c _ timestamp \"  ,     \" timestamp \"  )  ,    Row . row (  \" c _ string \"  ,     \" varchar \"  )  ,    Row . row (  \" c _ varchar \"  ,     \" varchar (  1  0  )  \"  )  ,    Row . row (  \" c _ char \"  ,     \" char (  1  0  )  \"  )  ,    Row . row (  \" c _ boolean \"  ,     \" boolean \"  )  ,    Row . row (  \" c _ binary \"  ,     \" varbinary \"  )  )  ;", "QueryResult   queryResult    =    QueryExecutor . query ( String . format (  \" SELECT    *    FROM    % s \"  ,    tableName )  )  ;", "assertColumnTypesParquet ( queryResult )  ;", "QueryAssert . assertThat ( queryResult )  . containsOnly ( Row . row (  1  2  7  ,     3  2  7  6  7  ,     2  1  4  7  4  8  3  6  4  7  ,     9  2  2  3  3  7  2  0  3  6  8  5  4  7  7  5  8  0  7 L ,     1  2  3  .  3  4  5 F ,     2  3  4  .  5  6  7  ,    new   BigDecimal (  \"  3  4  6  \"  )  ,    new   BigDecimal (  \"  3  4  5  .  6  7  8  0  0  \"  )  ,    DateTimeUtils . parseTimestampInLocalTime (  \"  2  0  1  5  -  0  5  -  1  0     1  2  :  1  5  :  3  5  .  1  2  3  \"  ,    TemptoProductTestRunner . PRODUCT _ TESTS _ TIME _ ZONE )  ,     \" ala   ma   kota \"  ,     \" ala   ma   kot \"  ,     \" ala   ma             \"  ,    true ,     \" kot   binarny \"  . getBytes (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSelectAllDatatypesParquetFile"], "fileName": "com.facebook.presto.tests.hive.TestAllDatatypesFromHiveConnector"}, {"methodBody": ["METHOD_START", "{", "String   tableName    =    TestAllDatatypesFromHiveConnector . mutableTableInstanceOf ( AllSimpleTypesTableDefinitions . ALL _ HIVE _ SIMPLE _ TYPES _ RCFILE )  . getNameInDatabase (  )  ;", "AllSimpleTypesTableDefinitions . populateDataToHiveTable ( tableName )  ;", "assertProperAllDatatypesSchema ( tableName )  ;", "QueryResult   queryResult    =    QueryExecutor . query ( String . format (  \" SELECT    *    FROM    % s \"  ,    tableName )  )  ;", "assertColumnTypes ( queryResult )  ;", "QueryAssert . assertThat ( queryResult )  . containsOnly ( Row . row (  1  2  7  ,     3  2  7  6  7  ,     2  1  4  7  4  8  3  6  4  7  ,     9  2  2  3  3  7  2  0  3  6  8  5  4  7  7  5  8  0  7 L ,     1  2  3  .  3  4  5 F ,     2  3  4  .  5  6  7  ,    new   BigDecimal (  \"  3  4  6  \"  )  ,    new   BigDecimal (  \"  3  4  5  .  6  7  8  0  0  \"  )  ,    DateTimeUtils . parseTimestampInLocalTime (  \"  2  0  1  5  -  0  5  -  1  0     1  2  :  1  5  :  3  5  .  1  2  3  \"  ,    TemptoProductTestRunner . PRODUCT _ TESTS _ TIME _ ZONE )  ,    Date . valueOf (  \"  2  0  1  5  -  0  5  -  1  0  \"  )  ,     \" ala   ma   kota \"  ,     \" ala   ma   kot \"  ,     \" ala   ma             \"  ,    true ,     \" kot   binarny \"  . getBytes (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSelectAllDatatypesRcfile"], "fileName": "com.facebook.presto.tests.hive.TestAllDatatypesFromHiveConnector"}, {"methodBody": ["METHOD_START", "{", "String   tableName    =    AllSimpleTypesTableDefinitions . ALL _ HIVE _ SIMPLE _ TYPES _ TEXTFILE . getName (  )  ;", "assertProperSchema ( tableName )  ;", "QueryResult   queryResult    =    QueryExecutor . query ( String . format (  \" SELECT    *    FROM    % s \"  ,    tableName )  )  ;", "assertColumnTypes ( queryResult )  ;", "QueryAssert . assertThat ( queryResult )  . containsOnly ( Row . row (  1  2  7  ,     3  2  7  6  7  ,     2  1  4  7  4  8  3  6  4  7  ,     9  2  2  3  3  7  2  0  3  6  8  5  4  7  7  5  8  0  7 L ,     1  2  3  .  3  4  5 F ,     2  3  4  .  5  6  7  ,    new   BigDecimal (  \"  3  4  6  \"  )  ,    new   BigDecimal (  \"  3  4  5  .  6  7  8  0  0  \"  )  ,    DateTimeUtils . parseTimestampInLocalTime (  \"  2  0  1  5  -  0  5  -  1  0     1  2  :  1  5  :  3  5  .  1  2  3  \"  ,    TemptoProductTestRunner . PRODUCT _ TESTS _ TIME _ ZONE )  ,    Date . valueOf (  \"  2  0  1  5  -  0  5  -  1  0  \"  )  ,     \" ala   ma   kota \"  ,     \" ala   ma   kot \"  ,     \" ala   ma             \"  ,    true ,     \" kot   binarny \"  . getBytes (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSelectAllDatatypesTextFile"], "fileName": "com.facebook.presto.tests.hive.TestAllDatatypesFromHiveConnector"}, {"methodBody": ["METHOD_START", "{", "return   Requirements . compose ( mutableTable ( NATION )  ,    mutableTable ( HiveTableDefinitions . NATION _ PARTITIONED _ BY _ REGIONKEY )  )  ;", "}", "METHOD_END"], "methodName": ["getRequirements"], "fileName": "com.facebook.presto.tests.hive.TestExternalHiveTable"}, {"methodBody": ["METHOD_START", "{", "QueryExecutors . onHive (  )  . executeQuery (  (  (  (  (  (  (  (  (  \" INSERT   INTO   TABLE    \"     +     ( TestExternalHiveTable . EXTERNAL _ TABLE _ NAME )  )     +     \"    PARTITION    ( p _ regionkey =  \"  )     +    partition )     +     \"  )  \"  )     +     \"    SELECT   p _ nationkey ,    p _ name ,    p _ comment   FROM    \"  )     +     ( nation . getNameInDatabase (  )  )  )     +     \"    WHERE   p _ regionkey =  \"  )     +    partition )  )  ;", "}", "METHOD_END"], "methodName": ["insertNationPartition"], "fileName": "com.facebook.presto.tests.hive.TestExternalHiveTable"}, {"methodBody": ["METHOD_START", "{", "TableInstance   nation    =    mutableTablesState (  )  . get ( HiveTableDefinitions . NATION _ PARTITIONED _ BY _ REGIONKEY . getName (  )  )  ;", "QueryExecutors . onHive (  )  . executeQuery (  (  \" DROP   TABLE   IF   EXISTS    \"     +     (  . EXTERNAL _ TABLE _ NAME )  )  )  ;", "QueryExecutors . onHive (  )  . executeQuery (  (  (  (  (  (  (  (  (  \" CREATE   EXTERNAL   TABLE    \"     +     (  . EXTERNAL _ TABLE _ NAME )  )     +     \"    LIKE    \"  )     +     ( nation . getNameInDatabase (  )  )  )     +     \"    LOCATION    '  / tmp /  \"  )     +     (  . EXTERNAL _ TABLE _ NAME )  )     +     \"  _  \"  )     +     ( nation . getNameInDatabase (  )  )  )     +     \"  '  \"  )  )  ;", "insertNationPartition ( nation ,     1  )  ;", "insertNationPartition ( nation ,     2  )  ;", "insertNationPartition ( nation ,     3  )  ;", "QueryAssert . assertThat ( QueryExecutors . onPresto (  )  . executeQuery (  (  \" SELECT    *    FROM    \"     +     (  . EXTERNAL _ TABLE _ NAME )  )  )  )  . hasRowsCount (  (  3     *     ( HiveTableDefinitions . NATION _ PARTITIONED _ BY _ REGIONKEY _ NUMBER _ OF _ LINES _ PER _ SPLIT )  )  )  ;", "QueryAssert . assertThat (  (  )     -  >    onPresto (  )  . executeQuery (  (  (  \" DELETE   FROM   hive . default .  \"     +     (  . EXTERNAL _ TABLE _ NAME )  )     +     \"    WHERE   p _ name   IS   NOT   NULL \"  )  )  )  . failsWithMessage (  \" This   connector   only   supports   delete   where   one   or   more   partitions   are   deleted   entirely \"  )  ;", "QueryExecutors . onPresto (  )  . executeQuery (  (  (  \" DELETE   FROM   hive . default .  \"     +     (  . EXTERNAL _ TABLE _ NAME )  )     +     \"    WHERE   p _ regionkey    =     1  \"  )  )  ;", "QueryAssert . assertThat ( QueryExecutors . onPresto (  )  . executeQuery (  (  \" SELECT    *    FROM    \"     +     (  . EXTERNAL _ TABLE _ NAME )  )  )  )  . hasRowsCount (  (  2     *     ( HiveTableDefinitions . NATION _ PARTITIONED _ BY _ REGIONKEY _ NUMBER _ OF _ LINES _ PER _ SPLIT )  )  )  ;", "QueryExecutors . onPresto (  )  . executeQuery (  (  \" DELETE   FROM   hive . default .  \"     +     (  . EXTERNAL _ TABLE _ NAME )  )  )  ;", "QueryAssert . assertThat ( QueryExecutors . onPresto (  )  . executeQuery (  (  \" SELECT    *    FROM    \"     +     (  . EXTERNAL _ TABLE _ NAME )  )  )  )  . hasRowsCount (  0  )  ;", "}", "METHOD_END"], "methodName": ["testDeleteFromExternalPartitionedTableTable"], "fileName": "com.facebook.presto.tests.hive.TestExternalHiveTable"}, {"methodBody": ["METHOD_START", "{", "TableInstance   nation    =    mutableTablesState (  )  . get ( NATION . getName (  )  )  ;", "QueryExecutors . onHive (  )  . executeQuery (  (  \" DROP   TABLE   IF   EXISTS    \"     +     (  . EXTERNAL _ TABLE _ NAME )  )  )  ;", "QueryExecutors . onHive (  )  . executeQuery (  (  (  (  \" CREATE   EXTERNAL   TABLE    \"     +     (  . EXTERNAL _ TABLE _ NAME )  )     +     \"    LIKE    \"  )     +     ( nation . getNameInDatabase (  )  )  )  )  ;", "QueryAssert . assertThat (  (  )     -  >    onPresto (  )  . executeQuery (  (  \" DELETE   FROM   hive . default .  \"     +     (  . EXTERNAL _ TABLE _ NAME )  )  )  )  . failsWithMessage (  \" Cannot   delete   from   non - managed   Hive   table \"  )  ;", "}", "METHOD_END"], "methodName": ["testDeleteFromExternalTable"], "fileName": "com.facebook.presto.tests.hive.TestExternalHiveTable"}, {"methodBody": ["METHOD_START", "{", "TableInstance   nation    =    mutableTablesState (  )  . get ( NATION . getName (  )  )  ;", "QueryExecutors . onHive (  )  . executeQuery (  (  \" DROP   TABLE   IF   EXISTS    \"     +     (  . EXTERNAL _ TABLE _ NAME )  )  )  ;", "QueryExecutors . onHive (  )  . executeQuery (  (  (  (  \" CREATE   EXTERNAL   TABLE    \"     +     (  . EXTERNAL _ TABLE _ NAME )  )     +     \"    LIKE    \"  )     +     ( nation . getNameInDatabase (  )  )  )  )  ;", "QueryAssert . assertThat (  (  )     -  >    onPresto (  )  . executeQuery (  (  (  (  \" INSERT   INTO   hive . default .  \"     +     (  . EXTERNAL _ TABLE _ NAME )  )     +     \"    SELECT    *    FROM   hive . default .  \"  )     +     ( nation . getNameInDatabase (  )  )  )  )  )  . failsWithMessage (  \" Cannot   write   to   non - managed   Hive   table \"  )  ;", "}", "METHOD_END"], "methodName": ["testInsertIntoExternalTable"], "fileName": "com.facebook.presto.tests.hive.TestExternalHiveTable"}, {"methodBody": ["METHOD_START", "{", "QueryAssert . assertThat (  (  )     -  >    queryExecutor . executeQuery ( format (  \" SELECT    *    FROM    % s \"  ,    tableName )  )  )  . failsWithMessage ( String . format (  \" Access   Denied :    Cannot   select   from   table   default .  % s \"  ,    tableName )  )  ;", "QueryAssert . assertThat (  (  )     -  >    queryExecutor . executeQuery ( format (  \" INSERT   INTO    % s   VALUES    (  3  ,     2  2  )  \"  ,    tableName )  )  )  . failsWithMessage ( String . format (  \" Access   Denied :    Cannot   insert   into   table   default .  % s \"  ,    tableName )  )  ;", "QueryAssert . assertThat (  (  )     -  >    queryExecutor . executeQuery ( format (  \" DELETE   FROM    % s   WHERE   day =  3  \"  ,    tableName )  )  )  . failsWithMessage ( String . format (  \" Access   Denied :    Cannot   delete   from   table   default .  % s \"  ,    tableName )  )  ;", "}", "METHOD_END"], "methodName": ["assertAccessDeniedOnAllOperationsOnTable"], "fileName": "com.facebook.presto.tests.hive.TestGrantRevoke"}, {"methodBody": ["METHOD_START", "{", "try    {", "aliceExecutor . executeQuery ( Stringormat (  \" DROP   TABLE   IF   EXISTS    % s \"  ,    tableName )  )  ;", "aliceExecutor . executeQuery ( Stringormat (  \" DROP   VIEW   IF   EXISTS    % s \"  ,    viewName )  )  ;", "}    catch    ( Exception   e )     {", "Logger . get ( getClass (  )  )  . warn ( e ,    ailed   to   drop   table / view \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["cleanup"], "fileName": "com.facebook.presto.tests.hive.TestGrantRevoke"}, {"methodBody": ["METHOD_START", "{", "return   ThreadLocalTestContextHolder . testContext (  )  . getDependency ( QueryExecutor . class ,     \" hive \"  )  ;", "}", "METHOD_END"], "methodName": ["onHive"], "fileName": "com.facebook.presto.tests.hive.TestGrantRevoke"}, {"methodBody": ["METHOD_START", "{", "return   ImmutableList . of ( Row . row (  \" SELECT \"  ,    Boolean . TRUE )  ,    Row . row (  \" INSERT \"  ,    Boolean . TRUE )  ,    Row . row (  \" UPDATE \"  ,    Boolean . TRUE )  ,    Row . row (  \" DELETE \"  ,    Boolean . TRUE )  )  ;", "}", "METHOD_END"], "methodName": ["ownerGrants"], "fileName": "com.facebook.presto.tests.hive.TestGrantRevoke"}, {"methodBody": ["METHOD_START", "{", "tableName    =     \" alice _ owned _ table \"  ;", "viewName    =     \" alice _ view \"  ;", "aliceExecutor    =    QueryExecutors . connectToPresto (  \" alice @ presto \"  )  ;", "bobExecutor    =    QueryExecutors . connectToPresto (  \" bob @ presto \"  )  ;", "aliceExecutor . executeQuery ( String . format (  \" DROP   TABLE   IF   EXISTS    % s \"  ,    tableName )  )  ;", "aliceExecutor . executeQuery ( String . format (  \" CREATE   TABLE    % s ( month   bigint ,    day   bigint )  \"  ,    tableName )  )  ;", ". assertAccessDeniedOnAllOperationsOnTable ( bobExecutor ,    tableName )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.tests.hive.TestGrantRevoke"}, {"methodBody": ["METHOD_START", "{", "aliceExecutor . executeQuery ( String . format (  \" GRANT   ALL   PRIVILEGES   ON    % s   TO   bob \"  ,    tableName )  )  ;", "QueryAssert . assertThat ( bobExecutor . executeQuery ( String . format (  \" INSERT   INTO    % s   VALUES    (  4  ,     1  3  )  \"  ,    tableName )  )  )  . hasRowsCount (  1  )  ;", "QueryAssert . assertThat ( bobExecutor . executeQuery ( String . format (  \" SELECT    *    FROM    % s \"  ,    tableName )  )  )  . hasRowsCount (  1  )  ;", "bobExecutor . executeQuery ( String . format (  \" DELETE   FROM    % s \"  ,    tableName )  )  ;", "QueryAssert . assertThat ( bobExecutor . executeQuery ( String . format (  \" SELECT    *    FROM    % s \"  ,    tableName )  )  )  . hasNoRows (  )  ;", "aliceExecutor . executeQuery ( String . format (  \" REVOKE   ALL   PRIVILEGES   ON    % s   FROM   bob \"  ,    tableName )  )  ;", ". assertAccessDeniedOnAllOperationsOnTable ( bobExecutor ,    tableName )  ;", "QueryAssert . assertThat ( bobExecutor . executeQuery ( String . format (  \" SHOW   GRANTS   ON    % s \"  ,    tableName )  )  )  . hasNoRows (  )  ;", "}", "METHOD_END"], "methodName": ["testAll"], "fileName": "com.facebook.presto.tests.hive.TestGrantRevoke"}, {"methodBody": ["METHOD_START", "{", "aliceExecutor . executeQuery ( String . format (  \" GRANT   SELECT   ON    % s   TO   bob   WITH   GRANT   OPTION \"  ,    tableName )  )  ;", "QueryAssert . assertThat ( bobExecutor . executeQuery ( String . format (  \" SELECT    *    FROM    % s \"  ,    tableName )  )  )  . hasNoRows (  )  ;", "aliceExecutor . executeQuery ( String . format (  \" GRANT   INSERT ,    SELECT   ON    % s   TO   bob \"  ,    tableName )  )  ;", "QueryAssert . assertThat ( bobExecutor . executeQuery ( String . format (  \" INSERT   INTO    % s   VALUES    (  3  ,     2  2  )  \"  ,    tableName )  )  )  . hasRowsCount (  1  )  ;", "QueryAssert . assertThat ( bobExecutor . executeQuery ( String . format (  \" SELECT    *    FROM    % s \"  ,    tableName )  )  )  . hasRowsCount (  1  )  ;", "QueryAssert . assertThat (  (  )     -  >    bobExecutor . executeQuery ( format (  \" DELETE   FROM    % s   WHERE   day =  3  \"  ,    tableName )  )  ) ilsWithMessage ( String . format (  \" Access   Denied :    Cannot   delete   from   table   dult .  % s \"  ,    tableName )  )  ;", "aliceExecutor . executeQuery ( String . format (  \" REVOKE   INSERT   ON    % s   FROM   bob \"  ,    tableName )  )  ;", "QueryAssert . assertThat (  (  )     -  >    bobExecutor . executeQuery ( format (  \" INSERT   INTO    % s   VALUES    (  ' y '  ,     5  )  \"  ,    tableName )  )  ) ilsWithMessage ( String . format (  \" Access   Denied :    Cannot   insert   into   table   dult .  % s \"  ,    tableName )  )  ;", "QueryAssert . assertThat ( bobExecutor . executeQuery ( String . format (  \" SELECT    *    FROM    % s \"  ,    tableName )  )  )  . hasRowsCount (  1  )  ;", "aliceExecutor . executeQuery ( String . format (  \" REVOKE   INSERT ,    SELECT   ON    % s   FROM   bob \"  ,    tableName )  )  ;", "QueryAssert . assertThat (  (  )     -  >    bobExecutor . executeQuery ( format (  \" SELECT    *    FROM    % s \"  ,    tableName )  )  ) ilsWithMessage ( String . format (  \" Access   Denied :    Cannot   select   from   table   dult .  % s \"  ,    tableName )  )  ;", "}", "METHOD_END"], "methodName": ["testGrantRevoke"], "fileName": "com.facebook.presto.tests.hive.TestGrantRevoke"}, {"methodBody": ["METHOD_START", "{", "aliceExecutor . executeQuery ( String . format (  \" GRANT   SELECT   ON    % s   TO   PUBLIC \"  ,    tableName )  )  ;", "QueryAssert . assertThat ( bobExecutor . executeQuery ( String . format (  \" SELECT    *    FROM    % s \"  ,    tableName )  )  )  . hasNoRows (  )  ;", "aliceExecutor . executeQuery ( String . format (  \" REVOKE   SELECT   ON    % s   FROM   PUBLIC \"  ,    tableName )  )  ;", "QueryAssert . assertThat (  (  )     -  >    bobExecutor . executeQuery ( format (  \" SELECT    *    FROM    % s \"  ,    tableName )  )  ) ilsWithMessage ( String . format (  \" Access   Denied :    Cannot   select   from   table   dult .  % s \"  ,    tableName )  )  ;", "QueryAssert . assertThat ( aliceExecutor . executeQuery ( String . format (  \" SELECT    *    FROM    % s \"  ,    tableName )  )  )  . hasNoRows (  )  ;", "}", "METHOD_END"], "methodName": ["testPublic"], "fileName": "com.facebook.presto.tests.hive.TestGrantRevoke"}, {"methodBody": ["METHOD_START", "{", "QueryAssert . assertThat ( aliceExecutor . executeQuery ( String . format (  \" SHOW   GRANTS   ON    % s \"  ,    tableName )  )  )  . containsOnly ( ImmutableList . of ( Row . row (  \" alice \"  ,     \" hive \"  ,     \" default \"  ,    tableName ,     \" SELECT \"  ,    Boolean . TRUE )  ,    Row . row (  \" alice \"  ,     \" hive \"  ,     \" default \"  ,    tableName ,     \" INSERT \"  ,    Boolean . TRUE )  ,    Row . row (  \" alice \"  ,     \" hive \"  ,     \" default \"  ,    tableName ,     \" UPDATE \"  ,    Boolean . TRUE )  ,    Row . row (  \" alice \"  ,     \" hive \"  ,     \" default \"  ,    tableName ,     \" DELETE \"  ,    Boolean . TRUE )  )  )  ;", "aliceExecutor . executeQuery ( String . format (  \" GRANT   SELECT   ON    % s   TO   bob   WITH   GRANT   OPTION \"  ,    tableName )  )  ;", "aliceExecutor . executeQuery ( String . format (  \" GRANT   INSERT   ON    % s   TO   bob \"  ,    tableName )  )  ;", "QueryAssert . assertThat ( bobExecutor . executeQuery ( String . format (  \" SHOW   GRANTS   ON    % s \"  ,    tableName )  )  )  . containsOnly ( ImmutableList . of ( Row . row (  \" bob \"  ,     \" hive \"  ,     \" default \"  ,    tableName ,     \" SELECT \"  ,    Boolean . TRUE )  ,    Row . row (  \" bob \"  ,     \" hive \"  ,     \" default \"  ,    tableName ,     \" INSERT \"  ,    Boolean . FALSE )  )  )  ;", "}", "METHOD_END"], "methodName": ["testShowGrants"], "fileName": "com.facebook.presto.tests.hive.TestGrantRevoke"}, {"methodBody": ["METHOD_START", "{", "TestGrantRevoke . onHive (  )  . executeQuery (  \" set   role   admin ;  \"  )  ;", "QueryAssert . assertThat ( TestGrantRevoke . onHive (  )  . executeQuery ( String . format (  \" SHOW   GRANT   USER   alice   ON   TABLE    % s \"  ,    tableName )  )  . project (  7  ,     8  )  )  . containsOnly ( ownerGrants (  )  )  ;", "}", "METHOD_END"], "methodName": ["testTableOwnerPrivileges"], "fileName": "com.facebook.presto.tests.hive.TestGrantRevoke"}, {"methodBody": ["METHOD_START", "{", "TestGrantRevoke . onHive (  )  . executeQuery (  \" set   role   admin ;  \"  )  ;", "ContextDsl . executeWith ( SqlContexts . createViewAs ( viewName ,    String . format (  \" SELECT    *    FROM    % s \"  ,    tableName )  ,    aliceExecutor )  ,     (    view )     -  >     {", "assertThat ( onHive (  )  . executeQuery ( format (  \" SHOW   GRANT   USER   alice   ON    % s \"  ,    viewName )  )  . project (  7  ,     8  )  )  . containsOnly ( ownerGrants (  )  )  ;", "}  )  ;", "}", "METHOD_END"], "methodName": ["testViewOwnerPrivileges"], "fileName": "com.facebook.presto.tests.hive.TestGrantRevoke"}, {"methodBody": ["METHOD_START", "{", "String   queryStatement    =    String . format (  \" INSERT   INTO   TABLE    % s   PARTITION    (  % s )    SELECT    *    FROM    % s \"  ,    destination ,    partition ,    source )  ;", "QueryExecutors . onHive (  )  . executeQuery (  \" set   enforce . bucketing    =    true \"  )  ;", "QueryExecutors . onHive (  )  . executeQuery (  \" set   enforce . sorting    =    true \"  )  ;", "QueryExecutors . onHive (  )  . executeQuery ( queryStatement )  ;", "}", "METHOD_END"], "methodName": ["populateHivePartitionedTable"], "fileName": "com.facebook.presto.tests.hive.TestHiveBucketedTables"}, {"methodBody": ["METHOD_START", "{", "String   tableName    =    mutableTablesState (  )  . get ( TestHiveBucketedTables . BUCKETED _ PARTITIONED _ NATION )  . getNameInDatabase (  )  ;", "TestHiveBucketedTables . populateHivePartitionedTable ( tableName ,    NATION . getName (  )  ,     \" part _ key    =     ' insert _  1  '  \"  )  ;", "TestHiveBucketedTables . populateHivePartitionedTable ( tableName ,    NATION . getName (  )  ,     \" part _ key    =     ' insert _  2  '  \"  )  ;", "QueryExecutors . onHive (  )  . executeQuery ( String . format (  \" ALTER   TABLE    % s   NOT   CLUSTERED \"  ,    tableName )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( String . format (  \" SELECT   count (  *  )    FROM    % s   WHERE   n _ nationkey    =     1  \"  ,    tableName )  )  )  . containsExactly ( Row . row (  2  )  )  ;", "}", "METHOD_END"], "methodName": ["testIgnorePartitionBucketingIfNotBucketed"], "fileName": "com.facebook.presto.tests.hive.TestHiveBucketedTables"}, {"methodBody": ["METHOD_START", "{", "TestHiveCoercion . executeHiveQuery ( String . format (  \" ALTER   TABLE    % s   CHANGE   COLUMN   tinyint _ to _ smallint   tinyint _ to _ smallint   smallint \"  ,    tableName )  )  ;", "TestHiveCoercion . executeHiveQuery ( String . format (  \" ALTER   TABLE    % s   CHANGE   COLUMN   tinyint _ to _ int   tinyint _ to _ int   int \"  ,    tableName )  )  ;", "TestHiveCoercion . executeHiveQuery ( String . format (  \" ALTER   TABLE    % s   CHANGE   COLUMN   tinyint _ to _ bigint   tinyint _ to _ bigint   bigint \"  ,    tableName )  )  ;", "TestHiveCoercion . executeHiveQuery ( String . format (  \" ALTER   TABLE    % s   CHANGE   COLUMN   smallint _ to _ int   smallint _ to _ int   int \"  ,    tableName )  )  ;", "TestHiveCoercion . executeHiveQuery ( String . format (  \" ALTER   TABLE    % s   CHANGE   COLUMN   smallint _ to _ bigint   smallint _ to _ bigint   bigint \"  ,    tableName )  )  ;", "TestHiveCoercion . executeHiveQuery ( String . format (  \" ALTER   TABLE    % s   CHANGE   COLUMN   int _ to _ bigint   int _ to _ bigint   bigint \"  ,    tableName )  )  ;", "TestHiveCoercion . executeHiveQuery ( String . format (  \" ALTER   TABLE    % s   CHANGE   COLUMN   bigint _ to _ varchar   bigint _ to _ varchar   string \"  ,    tableName )  )  ;", "TestHiveCoercion . executeHiveQuery ( String . format (  \" ALTER   TABLE    % s   CHANGE   COLUMN   float _ to _ double   float _ to _ double   double \"  ,    tableName )  )  ;", "TestHiveCoercion . executeHiveQuery ( String . format (  \" ALTER   TABLE    % s   CHANGE   COLUMN   row _ to _ row   row _ to _ row   struct < keep : string ,    ti 2 si : smallint ,    si 2 int : int ,    int 2 bi : bigint ,    bi 2 vc : string >  \"  ,    tableName )  )  ;", "TestHiveCoercion . executeHiveQuery ( String . format (  \" ALTER   TABLE    % s   CHANGE   COLUMN   list _ to _ list   list _ to _ list   array < struct < ti 2 int : int ,    si 2 bi : bigint ,    bi 2 vc : string >  >  \"  ,    tableName )  )  ;", "TestHiveCoercion . executeHiveQuery ( String . format (  \" ALTER   TABLE    % s   CHANGE   COLUMN   map _ to _ map   map _ to _ map   map < int , struct < ti 2 bi : bigint ,    int 2 bi : bigint ,    float 2 double : double ,    add : tinyint >  >  \"  ,    tableName )  )  ;", "}", "METHOD_END"], "methodName": ["alterTableColumnTypes"], "fileName": "com.facebook.presto.tests.hive.TestHiveCoercion"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  (  ( objects . length )     %     2  )  ,     0  ,     \" number   of   objects   must   be   even \"  )  ;", "Map < Object ,    Object >    struct    =    new   HashMap <  >  (  )  ;", "for    ( int   i    =     0  ;    i    <     ( objects . length )  ;    i    +  =     2  )     {", "struct . put ( objects [ i ]  ,    objects [  ( i    +     1  )  ]  )  ;", "}", "return   struct ;", "}", "METHOD_END"], "methodName": ["asMap"], "fileName": "com.facebook.presto.tests.hive.TestHiveCoercion"}, {"methodBody": ["METHOD_START", "{", "Connection   connection    =    QueryExecutor . defaultQueryExecutor (  )  . getConnection (  )  ;", "if    ( JdbcDriverUtils . usingPJdbcDriver ( connection )  )     {", "QueryAssert . assertThat ( queryResult )  . hasColumns ( JDBCType . SMALLINT ,    JDBCType . INTEGER ,    JDBCType . BIGINT ,    JDBCType . INTEGER ,    JDBCType . BIGINT ,    JDBCType . BIGINT ,    JDBCType . LONGNVARCHAR ,    JDBCType . DOUBLE ,    JDBCType . JAVA _ OBJECT ,    JDBCType . ARRAY ,    JDBCType . JAVA _ OBJECT ,    JDBCType . BIGINT )  ;", "} else", "if    ( JdbcDriverUtils . usingTeradataJdbcDriver ( connection )  )     {", "QueryAssert . assertThat ( queryResult )  . hasColumns ( JDBCType . SMALLINT ,    JDBCType . INTEGER ,    JDBCType . BIGINT ,    JDBCType . INTEGER ,    JDBCType . BIGINT ,    JDBCType . BIGINT ,    JDBCType . VARCHAR ,    JDBCType . DOUBLE ,    JDBCType . JAVA _ OBJECT ,    JDBCType . ARRAY ,    JDBCType . JAVA _ OBJECT ,    JDBCType . BIGINT )  ;", "} else    {", "throw   new   IllegalStateException (  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertColumnTypes"], "fileName": "com.facebook.presto.tests.hive.TestHiveCoercion"}, {"methodBody": ["METHOD_START", "{", "QueryAssert . assertThat ( QueryExecutor . query (  (  \" SHOW   COLUMNS   FROM    \"     +    tableName )  )  . project (  1  ,     2  )  )  . containsExactly ( Row . row (  \" tinyint _ to _ smallint \"  ,     \" smallint \"  )  ,    Row . row (  \" tinyint _ to _ int \"  ,     \" integer \"  )  ,    Row . row (  \" tinyint _ to _ bigint \"  ,     \" bigint \"  )  ,    Row . row (  \" smallint _ to _ int \"  ,     \" integer \"  )  ,    Row . row (  \" smallint _ to _ bigint \"  ,     \" bigint \"  )  ,    Row . row (  \" int _ to _ bigint \"  ,     \" bigint \"  )  ,    Row . row (  \" bigint _ to _ varchar \"  ,     \" varchar \"  )  ,    Row . row (  \" float _ to _ double \"  ,     \" double \"  )  ,    Row . row (  \" row _ to _ row \"  ,     \" row ( keep   varchar ,    ti 2 si   smallint ,    si 2 int   integer ,    int 2 bi   bigint ,    bi 2 vc   varchar )  \"  )  ,    Row . row (  \" list _ to _ list \"  ,     \" array ( row ( ti 2 int   integer ,    si 2 bi   bigint ,    bi 2 vc   varchar )  )  \"  )  ,    Row . row (  \" map _ to _ map \"  ,     \" map ( integer ,    row ( ti 2 bi   bigint ,    int 2 bi   bigint ,    float 2 double   double ,    add   tinyint )  )  \"  )  ,    Row . row (  \" id \"  ,     \" bigint \"  )  )  ;", "}", "METHOD_END"], "methodName": ["assertProperAlteredTableSchema"], "fileName": "com.facebook.presto.tests.hive.TestHiveCoercion"}, {"methodBody": ["METHOD_START", "{", "return   HiveTableDefinition . builder (  \" avro _ hive _ coercion \"  )  . setCreateTableDDLTemplate (  (  \"  \"     +     (  (  (  (  (  \" CREATE   TABLE    % NAME %  (  \"     +     \"             int _ to _ bigint                                          INT ,  \"  )     +     \"             float _ to _ double                                    DOUBLE \"  )     +     \"  )     \"  )     +     \" PARTITIONED   BY    ( id   BIGINT )     \"  )     +     \" STORED   AS   AVRO \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["avroTableDefinitionBuilder"], "fileName": "com.facebook.presto.tests.hive.TestHiveCoercion"}, {"methodBody": ["METHOD_START", "{", "return   rows . stream (  )  . map (  (    row )     -  >    project ( row ,    sqlColumnIndex )  . getValues (  )  . get (  0  )  )  . collect ( Collectors . toList (  )  )  ;", "}", "METHOD_END"], "methodName": ["column"], "fileName": "com.facebook.presto.tests.hive.TestHiveCoercion"}, {"methodBody": ["METHOD_START", "{", "String   tableName    =    TestHiveCoercion . mutableTableInstanceOf ( tableDefinition )  . getNameInDatabase (  )  ;", "String   floatToDoubleType    =     ( tableName . toLowerCase ( Locale . ENGLISH )  . contains (  \" parquet \"  )  )     ?     \" DOUBLE \"     :     \" REAL \"  ;", "QueryExecutor . query ( String . format (  (  \" INSERT   INTO    % s \\ n \"     +     (  (  (  (  (  (  (  (  (  (  \" VALUES \\ n \"     +     \"        ( TINYINT    \\  '  -  1  \\  '  ,    TINYINT    \\  '  2  \\  '  ,    TINYINT    \\  '  -  3  \\  '  ,    SMALLINT    \\  '  1  0  0  \\  '  ,    SMALLINT    \\  '  -  1  0  1  \\  '  ,    INTEGER    \\  '  2  3  2  3  \\  '  ,     1  2  3  4  5  ,    REAL    \\  '  0  .  5  \\  '  ,  \\ n \"  )     +     \"             CAST ( ROW    (  \\  ' as   is \\  '  ,     -  1  ,     1  0  0  ,     2  3  2  3  ,     1  2  3  4  5  )    AS   ROW ( keep   VARCHAR ,    ti 2 si   TINYINT ,    si 2 int   SMALLINT ,    int 2 bi   INTEGER ,    bi 2 vc   BIGINT )  )  ,  \\ n \"  )     +     \"             ARRAY    [ CAST ( ROW    (  2  ,     -  1  0  1  ,     1  2  3  4  5  ,     \\  ' removed \\  '  )    AS   ROW    ( ti 2 int   TINYINT ,    si 2 bi   SMALLINT ,    bi 2 vc   BIGINT ,    remove   VARCHAR )  )  ]  ,  \\ n \"  )     +     \"             MAP    ( ARRAY    [ TINYINT    \\  '  2  \\  '  ]  ,    ARRAY    [ CAST ( ROW    (  -  3  ,     2  3  2  3  ,    REAL    \\  '  0  .  5  \\  '  )    AS   ROW    ( ti 2 bi   TINYINT ,    int 2 bi   INTEGER ,    float 2 double    % s )  )  ]  )  ,  \\ n \"  )     +     \"              1  )  ,  \\ n \"  )     +     \"        ( TINYINT    \\  '  1  \\  '  ,    TINYINT    \\  '  -  2  \\  '  ,    NULL ,    SMALLINT    \\  '  -  1  0  0  \\  '  ,    SMALLINT    \\  '  1  0  1  \\  '  ,    INTEGER    \\  '  -  2  3  2  3  \\  '  ,     -  1  2  3  4  5  ,    REAL    \\  '  -  1  .  5  \\  '  ,  \\ n \"  )     +     \"             CAST ( ROW    ( NULL ,     1  ,     -  1  0  0  ,     -  2  3  2  3  ,     -  1  2  3  4  5  )    AS   ROW ( keep   VARCHAR ,    ti 2 si   TINYINT ,    si 2 int   SMALLINT ,    int 2 bi   INTEGER ,    bi 2 vc   BIGINT )  )  ,  \\ n \"  )     +     \"             ARRAY    [ CAST ( ROW    (  -  2  ,     1  0  1  ,     -  1  2  3  4  5  ,    NULL )    AS   ROW    ( ti 2 int   TINYINT ,    si 2 bi   SMALLINT ,    bi 2 vc   BIGINT ,    remove   VARCHAR )  )  ]  ,  \\ n \"  )     +     \"             MAP    ( ARRAY    [ TINYINT    \\  '  -  2  \\  '  ]  ,    ARRAY    [ CAST ( ROW    ( null ,     -  2  3  2  3  ,    REAL    \\  '  -  1  .  5  \\  '  )    AS   ROW    ( ti 2 bi   TINYINT ,    int 2 bi   INTEGER ,    float 2 double    % s )  )  ]  )  ,  \\ n \"  )     +     \"              1  )  \"  )  )  ,    tableName ,    floatToDoubleType ,    floatToDoubleType )  )  ;", "TestHiveCoercion . alterTableColumnTypes ( tableName )  ;", "assertProperAlteredTableSchema ( tableName )  ;", "QueryResult   queryResult    =    QueryExecutor . query ( String . format (  \" SELECT    *    FROM    % s \"  ,    tableName )  )  ;", "assertColumnTypes ( queryResult )  ;", "List < Row >    expectedRows    =    ImmutableList . of ( Row . row (  (  -  1  )  ,     2  ,     (  -  3 L )  ,     1  0  0  ,     (  -  1  0  1 L )  ,     2  3  2  3 L ,     \"  1  2  3  4  5  \"  ,     0  .  5  ,    TestHiveCoercion . asMap (  \" keep \"  ,     \" as   is \"  ,     \" ti 2 si \"  ,     (  ( short )     (  -  1  )  )  ,     \" si 2 int \"  ,     1  0  0  ,     \" int 2 bi \"  ,     2  3  2  3 L ,     \" bi 2 vc \"  ,     \"  1  2  3  4  5  \"  )  ,    ImmutableList . of ( TestHiveCoercion . asMap (  \" ti 2 int \"  ,     2  ,     \" si 2 bi \"  ,     (  -  1  0  1 L )  ,     \" bi 2 vc \"  ,     \"  1  2  3  4  5  \"  )  )  ,    ImmutableMap . of (  2  ,    TestHiveCoercion . asMap (  \" ti 2 bi \"  ,     (  -  3 L )  ,     \" int 2 bi \"  ,     2  3  2  3 L ,     \" float 2 double \"  ,     0  .  5  ,     \" add \"  ,    null )  )  ,     1  )  ,    Row . row (  1  ,     (  -  2  )  ,    null ,     (  -  1  0  0  )  ,     1  0  1 L ,     (  -  2  3  2  3 L )  ,     \"  -  1  2  3  4  5  \"  ,     (  -  1  .  5  )  ,    TestHiveCoercion . asMap (  \" keep \"  ,    null ,     \" ti 2 si \"  ,     (  ( short )     (  1  )  )  ,     \" si 2 int \"  ,     (  -  1  0  0  )  ,     \" int 2 bi \"  ,     (  -  2  3  2  3 L )  ,     \" bi 2 vc \"  ,     \"  -  1  2  3  4  5  \"  )  ,    ImmutableList . of ( TestHiveCoercion . asMap (  \" ti 2 int \"  ,     (  -  2  )  ,     \" si 2 bi \"  ,     1  0  1 L ,     \" bi 2 vc \"  ,     \"  -  1  2  3  4  5  \"  )  )  ,    ImmutableMap . of (  (  -  2  )  ,    TestHiveCoercion . asMap (  \" ti 2 bi \"  ,    null ,     \" int 2 bi \"  ,     (  -  2  3  2  3 L )  ,     \" float 2 double \"  ,     (  -  1  .  5  )  ,     \" add \"  ,    null )  )  ,     1  )  )  ;", "QueryAssert . assertThat ( queryResult . project (  1  ,     2  ,     3  ,     4  ,     5  ,     6  ,     7  ,     8  ,     1  2  )  )  . containsOnly ( TestHiveCoercion . project ( expectedRows ,     1  ,     2  ,     3  ,     4  ,     5  ,     6  ,     7  ,     8  ,     1  2  )  )  ;", "Assertions . assertEqualsIgnoreOrder ( queryResult . column (  9  )  ,    TestHiveCoercion . column ( expectedRows ,     9  )  ,     \" row _ to _ row   field   is   not   equal \"  )  ;", "Assertions . assertEqualsIgnoreOrder ( TestHiveCoercion . extract ( queryResult . column (  1  0  )  )  ,    TestHiveCoercion . column ( expectedRows ,     1  0  )  ,     \" list _ to _ list   field   is   not   equal \"  )  ;", "Assertions . assertEqualsIgnoreOrder ( queryResult . column (  1  1  )  ,    TestHiveCoercion . column ( expectedRows ,     1  1  )  ,     \" map _ to _ map   field   is   not   equal \"  )  ;", "}", "METHOD_END"], "methodName": ["doTestHiveCoercion"], "fileName": "com.facebook.presto.tests.hive.TestHiveCoercion"}, {"methodBody": ["METHOD_START", "{", "return   ThreadLocalTestContextHolder . testContext (  )  . getDependency ( QueryExecutor . class ,     \" hive \"  )  . executeQuery ( query )  ;", "}", "METHOD_END"], "methodName": ["executeHiveQuery"], "fileName": "com.facebook.presto.tests.hive.TestHiveCoercion"}, {"methodBody": ["METHOD_START", "{", "return   arrays . stream (  )  . map (  (    prestoArray )     -  >    Arrays . asList (  (  ( Object [  ]  )     ( prestoArray . getArray (  )  )  )  )  )  . collect ( toImmutableList (  )  )  ;", "}", "METHOD_END"], "methodName": ["extract"], "fileName": "com.facebook.presto.tests.hive.TestHiveCoercion"}, {"methodBody": ["METHOD_START", "{", "if    ( tableDefinition . getDatabase (  )  . isPresent (  )  )     {", "return    . mutableTableInstanceOf ( tableDefinition ,    tableDefinition . getDatabase (  )  . get (  )  )  ;", "} else    {", "return    . mutableTableInstanceOf (  . tableHandleInSchema ( tableDefinition )  )  ;", "}", "}", "METHOD_END"], "methodName": ["mutableTableInstanceOf"], "fileName": "com.facebook.presto.tests.hive.TestHiveCoercion"}, {"methodBody": ["METHOD_START", "{", "return   TestHiveCoercion . mutableTableInstanceOf ( TestHiveCoercion . tableHandleInSchema ( tableDefinition )  . inDatabase ( database )  )  ;", "}", "METHOD_END"], "methodName": ["mutableTableInstanceOf"], "fileName": "com.facebook.presto.tests.hive.TestHiveCoercion"}, {"methodBody": ["METHOD_START", "{", "return   ThreadLocalTestContextHolder . testContext (  )  . getDependency ( MutableTablesState . class )  . get ( tableHandle )  ;", "}", "METHOD_END"], "methodName": ["mutableTableInstanceOf"], "fileName": "com.facebook.presto.tests.hive.TestHiveCoercion"}, {"methodBody": ["METHOD_START", "{", "return   new   Row ( Arrays . stream ( columns )  . mapToObj (  (    column )     -  >    row . getValues (  )  . get (  ( column    -     1  )  )  )  . collect ( Collectors . toList (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["project"], "fileName": "com.facebook.presto.tests.hive.TestHiveCoercion"}, {"methodBody": ["METHOD_START", "{", "return   rows . stream (  )  . map (  (    row )     -  >    project ( row ,    columns )  )  . collect ( toImmutableList (  )  )  ;", "}", "METHOD_END"], "methodName": ["project"], "fileName": "com.facebook.presto.tests.hive.TestHiveCoercion"}, {"methodBody": ["METHOD_START", "{", "String   tableName    =    String . format ( TestHiveCoercion . tableNameFormat ,    recommendTableName . orElse ( fileFormat )  . toLowerCase ( Locale . ENGLISH )  )  ;", "String   floatToDoubleType    =     ( fileFormat . toLowerCase ( Locale . ENGLISH )  . contains (  \" parquet \"  )  )     ?     \" DOUBLE \"     :     \" FLOAT \"  ;", "return   HiveTableDefinition . builder ( tableName )  . setCreateTableDDLTemplate (  (  (  (  (  (  (  (  (  (  (  (  (  (  \"  \"     +     (  (  (  (  (  (  (  (  \" CREATE   TABLE    % NAME %  (  \"     +     \"             tinyint _ to _ smallint                        TINYINT ,  \"  )     +     \"             tinyint _ to _ int                                       TINYINT ,  \"  )     +     \"             tinyint _ to _ bigint                              TINYINT ,  \"  )     +     \"             smallint _ to _ int                                    SMALLINT ,  \"  )     +     \"             smallint _ to _ bigint                           SMALLINT ,  \"  )     +     \"             int _ to _ bigint                                          INT ,  \"  )     +     \"             bigint _ to _ varchar                              BIGINT ,  \"  )     +     \"             float _ to _ double                                     \"  )  )     +    floatToDoubleType )     +     \"  ,  \"  )     +     \"             row _ to _ row                                                   STRUCT < keep :    STRING ,    ti 2 si :    TINYINT ,    si 2 int :    SMALLINT ,    int 2 bi :    INT ,    bi 2 vc :    BIGINT >  ,  \"  )     +     \"             list _ to _ list                                             ARRAY < STRUCT < ti 2 int :    TINYINT ,    si 2 bi :    SMALLINT ,    bi 2 vc :    BIGINT ,    remove :    STRING >  >  ,  \"  )     +     \"             map _ to _ map                                                   MAP < TINYINT ,    STRUCT < ti 2 bi :    TINYINT ,    int 2 bi :    INT ,    float 2 double :     \"  )     +    floatToDoubleType )     +     \"  >  >  \"  )     +     \"  )     \"  )     +     \" PARTITIONED   BY    ( id   BIGINT )     \"  )     +     ( rowFormat . isPresent (  )     ?     (  \" ROW   FORMAT    \"     +     ( rowFormat . get (  )  )  )     +     \"     \"     :     \"     \"  )  )     +     \" STORED   AS    \"  )     +    fileFormat )  )  ;", "}", "METHOD_END"], "methodName": ["tableDefinitionBuilder"], "fileName": "com.facebook.presto.tests.hive.TestHiveCoercion"}, {"methodBody": ["METHOD_START", "{", "TableHandle   tableHandle    =    tableHandle ( tableDefinition . getName (  )  )  ;", "if    ( tableDefinition . getSchema (  )  . isPresent (  )  )     {", "tableHandle    =    tableHandle . inSchema ( tableDefinition . getSchema (  )  . get (  )  )  ;", "}", "return   tableHandle ;", "}", "METHOD_END"], "methodName": ["tableHandleInSchema"], "fileName": "com.facebook.presto.tests.hive.TestHiveCoercion"}, {"methodBody": ["METHOD_START", "{", "HiveTableDefinition   tableDefinition    =    TestHiveCoercion . HIVE _ COERCION _ AVRO ;", "String   tableName    =    TestHiveCoercion . mutableTableInstanceOf ( tableDefinition )  . getNameInDatabase (  )  ;", "TestHiveCoercion . executeHiveQuery ( String . format (  (  \" INSERT   INTO   TABLE    % s    \"     +     (  (  (  \" PARTITION    ( id =  1  )     \"     +     \" VALUES \"  )     +     \"  (  2  3  2  3  ,     0  .  5  )  ,  \"  )     +     \"  (  -  2  3  2  3  ,     -  1  .  5  )  \"  )  )  ,    tableName )  )  ;", "TestHiveCoercion . executeHiveQuery ( String . format (  \" ALTER   TABLE    % s   CHANGE   COLUMN   int _ to _ bigint   int _ to _ bigint   bigint \"  ,    tableName )  )  ;", "TestHiveCoercion . executeHiveQuery ( String . format (  \" ALTER   TABLE    % s   CHANGE   COLUMN   float _ to _ double   float _ to _ double   double \"  ,    tableName )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  (  \" SHOW   COLUMNS   FROM    \"     +    tableName )  )  . project (  1  ,     2  )  )  . containsExactly ( Row . row (  \" int _ to _ bigint \"  ,     \" bigint \"  )  ,    Row . row (  \" float _ to _ double \"  ,     \" double \"  )  ,    Row . row (  \" id \"  ,     \" bigint \"  )  )  ;", "QueryResult   queryResult    =    QueryExecutor . query ( String . format (  (  \" SELECT    *    FROM    \"     +    tableName )  )  )  ;", "QueryAssert . assertThat ( queryResult )  . hasColumns ( JDBCType . BIGINT ,    JDBCType . DOUBLE ,    JDBCType . BIGINT )  ;", "QueryAssert . assertThat ( queryResult )  . containsOnly ( Row . row (  2  3  2  3 L ,     0  .  5  ,     1  )  ,    Row . row (  (  -  2  3  2  3 L )  ,     (  -  1  .  5  )  ,     1  )  )  ;", "}", "METHOD_END"], "methodName": ["testHiveCoercionAvro"], "fileName": "com.facebook.presto.tests.hive.TestHiveCoercion"}, {"methodBody": ["METHOD_START", "{", "doTestHiveCoercion ( TestHiveCoercion . HIVE _ COERCION _ ORC )  ;", "}", "METHOD_END"], "methodName": ["testHiveCoercionOrc"], "fileName": "com.facebook.presto.tests.hive.TestHiveCoercion"}, {"methodBody": ["METHOD_START", "{", "doTestHiveCoercion ( TestHiveCoercion . HIVE _ COERCION _ PARQUET )  ;", "}", "METHOD_END"], "methodName": ["testHiveCoercionParquet"], "fileName": "com.facebook.presto.tests.hive.TestHiveCoercion"}, {"methodBody": ["METHOD_START", "{", "doTestHiveCoercion ( TestHiveCoercion . HIVE _ COERCION _ RCBINARY )  ;", "}", "METHOD_END"], "methodName": ["testHiveCoercionRcBinary"], "fileName": "com.facebook.presto.tests.hive.TestHiveCoercion"}, {"methodBody": ["METHOD_START", "{", "doTestHiveCoercion ( TestHiveCoercion . HIVE _ COERCION _ RCTEXT )  ;", "}", "METHOD_END"], "methodName": ["testHiveCoercionRcText"], "fileName": "com.facebook.presto.tests.hive.TestHiveCoercion"}, {"methodBody": ["METHOD_START", "{", "doTestHiveCoercion ( TestHiveCoercion . HIVE _ COERCION _ TEXTFILE )  ;", "}", "METHOD_END"], "methodName": ["testHiveCoercionTextFile"], "fileName": "com.facebook.presto.tests.hive.TestHiveCoercion"}, {"methodBody": ["METHOD_START", "{", "QueryResult   expected    =    QueryExecutor . query ( String . format ( query ,     (  (  \" tpch .  \"     +     ( TestHiveStorageFormats . TPCH _ SCHEMA )  )     +     \"  . lineitem \"  )  )  )  ;", "List < Row >    expectedRows    =    expected . rows (  )  . stream (  )  . map (  (    columns )     -  >    row ( columns . toArray (  )  )  )  . collect ( toImmutableList (  )  )  ;", "QueryResult   actual    =    QueryExecutor . query ( String . format ( query ,    tableName )  )  ;", "QueryAssert . assertThat ( actual )  . hasColumns ( expected . getColumnTypes (  )  )  . containsExactly ( expectedRows )  ;", "}", "METHOD_END"], "methodName": ["assertSelect"], "fileName": "com.facebook.presto.tests.hive.TestHiveStorageFormats"}, {"methodBody": ["METHOD_START", "{", "TestHiveStorageFormats . setSessionProperties ( storageFormat . getSessionProperties (  )  )  ;", "}", "METHOD_END"], "methodName": ["setSessionProperties"], "fileName": "com.facebook.presto.tests.hive.TestHiveStorageFormats"}, {"methodBody": ["METHOD_START", "{", "Connection   connection    =    QueryExecutor . defaultQueryExecutor (  )  . getConnection (  )  ;", "try    {", "JdbcDriverUtils . setSessionProperty ( connection ,     \" task _ writer _ count \"  ,     \"  4  \"  )  ;", "JdbcDriverUtils . setSessionProperty ( connection ,     \" redistribute _ writes \"  ,     \" false \"  )  ;", "for    ( Map . Entry < String ,    String >    sessionProperty    :    sessionProperties . entrySet (  )  )     {", "JdbcDriverUtils . setSessionProperty ( connection ,    sessionProperty . getKey (  )  ,    sessionProperty . getValue (  )  )  ;", "}", "}    catch    ( SQLException   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["setSessionProperties"], "fileName": "com.facebook.presto.tests.hive.TestHiveStorageFormats"}, {"methodBody": ["METHOD_START", "{", "return   TestHiveStorageFormats . storageFormat ( name ,    ImmutableMap . of (  )  )  ;", "}", "METHOD_END"], "methodName": ["storageFormat"], "fileName": "com.facebook.presto.tests.hive.TestHiveStorageFormats"}, {"methodBody": ["METHOD_START", "{", "return   new   TestHiveStorageFormats . StorageFormat ( name ,    sessionProperties )  ;", "}", "METHOD_END"], "methodName": ["storageFormat"], "fileName": "com.facebook.presto.tests.hive.TestHiveStorageFormats"}, {"methodBody": ["METHOD_START", "{", "return   new   TestHiveStorageFormats . StorageFormat [  ]  [  ]  {    new   TestHiveStorageFormats . StorageFormat [  ]  {    TestHiveStorageFormats . storageFormat (  \" ORC \"  )     }  ,    new   TestHiveStorageFormats . StorageFormat [  ]  {    TestHiveStorageFormats . storageFormat (  \" DWRF \"  )     }  ,    new   TestHiveStorageFormats . StorageFormat [  ]  {    TestHiveStorageFormats . storageFormat (  \" PARQUET \"  )     }  ,    new   TestHiveStorageFormats . StorageFormat [  ]  {    TestHiveStorageFormats . storageFormat (  \" PARQUET \"  ,    ImmutableMap . of (  \" hive . parquet _ optimized _ reader _ enabled \"  ,     \" true \"  )  )     }  ,    new   TestHiveStorageFormats . StorageFormat [  ]  {    TestHiveStorageFormats . storageFormat (  \" RCBINARY \"  )     }  ,    new   TestHiveStorageFormats . StorageFormat [  ]  {    TestHiveStorageFormats . storageFormat (  \" RCTEXT \"  )     }  ,    new   TestHiveStorageFormats . StorageFormat [  ]  {    TestHiveStorageFormats . storageFormat (  \" SEQUENCEFILE \"  )     }  ,    new   TestHiveStorageFormats . StorageFormat [  ]  {    TestHiveStorageFormats . storageFormat (  \" TEXTFILE \"  )     }  ,    new   TestHiveStorageFormats . StorageFormat [  ]  {    TestHiveStorageFormats . storageFormat (  \" AVRO \"  )     }     }  ;", "}", "METHOD_END"], "methodName": ["storageFormats"], "fileName": "com.facebook.presto.tests.hive.TestHiveStorageFormats"}, {"methodBody": ["METHOD_START", "{", "TestHiveStorageFormats . setSessionProperties ( storageFormat )  ;", "String   tableName    =     \" storage _ formats _ test _ create _ table _ as _ select _ partitioned _  \"     +     ( storageFormat . getName (  )  . toLowerCase (  )  )  ;", "QueryExecutor . query ( String . format (  \" DROP   TABLE   IF   EXISTS    % s \"  ,    tableName )  )  ;", "String   createTableAsSelect    =    String . format (  (  \" CREATE   TABLE    % s   WITH    ( format =  '  % s '  ,    partitioned _ by    =    ARRAY [  ' returnflag '  ]  )    AS    \"     +     (  (  \" SELECT    \"     +     \" tax ,    discount ,    returnflag    \"  )     +     \" FROM   tpch .  % s . lineitem \"  )  )  ,    tableName ,    storageFormat . getName (  )  ,    TestHiveStorageFormats . TPCH _ SCHEMA )  ;", "QueryExecutor . query ( createTableAsSelect )  ;", "TestHiveStorageFormats . assertSelect (  \" select   sum ( tax )  ,    sum ( discount )  ,    sum ( length ( returnflag )  )    from    % s \"  ,    tableName )  ;", "QueryExecutor . query ( String . format (  \" DROP   TABLE    % s \"  ,    tableName )  )  ;", "}", "METHOD_END"], "methodName": ["testCreatePartitionedTableAs"], "fileName": "com.facebook.presto.tests.hive.TestHiveStorageFormats"}, {"methodBody": ["METHOD_START", "{", "TestHiveStorageFormats . setSessionProperties ( storageFormat )  ;", "String   tableName    =     \" storage _ formats _ test _ create _ table _ as _ select _  \"     +     ( storageFormat . getName (  )  . toLowerCase (  )  )  ;", "QueryExecutor . query ( String . format (  \" DROP   TABLE   IF   EXISTS    % s \"  ,    tableName )  )  ;", "String   createTableAsSelect    =    String . format (  (  \" CREATE   TABLE    % s   WITH    ( format =  '  % s '  )    AS    \"     +     (  (  \" SELECT    \"     +     \" partkey ,    suppkey ,    extendedprice    \"  )     +     \" FROM   tpch .  % s . lineitem \"  )  )  ,    tableName ,    storageFormat . getName (  )  ,    TestHiveStorageFormats . TPCH _ SCHEMA )  ;", "QueryExecutor . query ( createTableAsSelect )  ;", "TestHiveStorageFormats . assertSelect (  \" select   sum ( extendedprice )  ,    sum ( suppkey )  ,    count ( partkey )    from    % s \"  ,    tableName )  ;", "QueryExecutor . query ( String . format (  \" DROP   TABLE    % s \"  ,    tableName )  )  ;", "}", "METHOD_END"], "methodName": ["testCreateTableAs"], "fileName": "com.facebook.presto.tests.hive.TestHiveStorageFormats"}, {"methodBody": ["METHOD_START", "{", "TestHiveStorageFormats . setSessionProperties ( storageFormat )  ;", "String   tableName    =     \" storage _ formats _ test _ insert _ into _ partitioned _  \"     +     ( storageFormat . getName (  )  . toLowerCase (  )  )  ;", "QueryExecutor . query ( String . format (  \" DROP   TABLE   IF   EXISTS    % s \"  ,    tableName )  )  ;", "String   createTable    =    String . format (  (  \" CREATE   TABLE    % s (  \"     +     (  (  (  (  (  (  (  (  (  (  (  (  (  \"          orderkey                  BIGINT ,  \"     +     \"          partkey                     BIGINT ,  \"  )     +     \"          suppkey                     BIGINT ,  \"  )     +     \"          linenumber            INTEGER ,  \"  )     +     \"          quantity                  DOUBLE ,  \"  )     +     \"          extendedprice   DOUBLE ,  \"  )     +     \"          discount                  DOUBLE ,  \"  )     +     \"          tax                                 DOUBLE ,  \"  )     +     \"          linestatus            VARCHAR ,  \"  )     +     \"          shipinstruct      VARCHAR ,  \"  )     +     \"          shipmode                  VARCHAR ,  \"  )     +     \"          comment                     VARCHAR ,  \"  )     +     \"          returnflag            VARCHAR \"  )     +     \"  )    WITH    ( format =  '  % s '  ,    partitioned _ by    =    ARRAY [  ' returnflag '  ]  )  \"  )  )  ,    tableName ,    storageFormat . getName (  )  )  ;", "QueryExecutor . query ( createTable )  ;", "String   insertInto    =    String . format (  (  \" INSERT   INTO    % s    \"     +     (  (  (  \" SELECT    \"     +     \" orderkey ,    partkey ,    suppkey ,    linenumber ,    quantity ,    extendedprice ,    discount ,    tax ,     \"  )     +     \" linestatus ,    shipinstruct ,    shipmode ,    comment ,    returnflag    \"  )     +     \" FROM   tpch .  % s . lineitem \"  )  )  ,    tableName ,    TestHiveStorageFormats . TPCH _ SCHEMA )  ;", "QueryExecutor . query ( insertInto )  ;", "TestHiveStorageFormats . assertSelect (  \" select   sum ( tax )  ,    sum ( discount )  ,    sum ( length ( returnflag )  )    from    % s \"  ,    tableName )  ;", "QueryExecutor . query ( String . format (  \" DROP   TABLE    % s \"  ,    tableName )  )  ;", "}", "METHOD_END"], "methodName": ["testInsertIntoPartitionedTable"], "fileName": "com.facebook.presto.tests.hive.TestHiveStorageFormats"}, {"methodBody": ["METHOD_START", "{", "TestHiveStorageFormats . setSessionProperties ( storageFormat )  ;", "String   tableName    =     \" storage _ formats _ test _ insert _ into _  \"     +     ( storageFormat . getName (  )  . toLowerCase (  )  )  ;", "QueryExecutor . query ( String . format (  \" DROP   TABLE   IF   EXISTS    % s \"  ,    tableName )  )  ;", "String   createTable    =    String . format (  (  \" CREATE   TABLE    % s (  \"     +     (  (  (  (  (  (  (  (  (  (  (  (  (  \"          orderkey                  BIGINT ,  \"     +     \"          partkey                     BIGINT ,  \"  )     +     \"          suppkey                     BIGINT ,  \"  )     +     \"          linenumber            INTEGER ,  \"  )     +     \"          quantity                  DOUBLE ,  \"  )     +     \"          extendedprice   DOUBLE ,  \"  )     +     \"          discount                  DOUBLE ,  \"  )     +     \"          tax                                 DOUBLE ,  \"  )     +     \"          linestatus            VARCHAR ,  \"  )     +     \"          shipinstruct      VARCHAR ,  \"  )     +     \"          shipmode                  VARCHAR ,  \"  )     +     \"          comment                     VARCHAR ,  \"  )     +     \"          returnflag            VARCHAR \"  )     +     \"  )    WITH    ( format =  '  % s '  )  \"  )  )  ,    tableName ,    storageFormat . getName (  )  )  ;", "QueryExecutor . query ( createTable )  ;", "String   insertInto    =    String . format (  (  \" INSERT   INTO    % s    \"     +     (  (  (  \" SELECT    \"     +     \" orderkey ,    partkey ,    suppkey ,    linenumber ,    quantity ,    extendedprice ,    discount ,    tax ,     \"  )     +     \" linestatus ,    shipinstruct ,    shipmode ,    comment ,    returnflag    \"  )     +     \" FROM   tpch .  % s . lineitem \"  )  )  ,    tableName ,    TestHiveStorageFormats . TPCH _ SCHEMA )  ;", "QueryExecutor . query ( insertInto )  ;", "TestHiveStorageFormats . assertSelect (  \" select   sum ( tax )  ,    sum ( discount )  ,    sum ( linenumber )    from    % s \"  ,    tableName )  ;", "QueryExecutor . query ( String . format (  \" DROP   TABLE    % s \"  ,    tableName )  )  ;", "}", "METHOD_END"], "methodName": ["testInsertIntoTable"], "fileName": "com.facebook.presto.tests.hive.TestHiveStorageFormats"}, {"methodBody": ["METHOD_START", "{", "return   ThreadLocalTestContextHolder . testContext (  )  . getDependency ( QueryExecutor . class ,     \" hive \"  )  ;", "}", "METHOD_END"], "methodName": ["onHive"], "fileName": "com.facebook.presto.tests.hive.TestHiveTableStatistics"}, {"methodBody": ["METHOD_START", "{", "String   tableNameInDatabase    =    mutableTablesState (  )  . get ( TestHiveTableStatistics . ALL _ TYPES _ TABLE _ NAME )  . getNameInDatabase (  )  ;", "TestHiveTableStatistics . onHive (  )  . executeQuery (  (  (  \" ANALYZE   TABLE    \"     +    tableNameInDatabase )     +     \"    COMPUTE   STATISTICS \"  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  (  \" SHOW   STATS   FOR    \"     +    tableNameInDatabase )  )  )  . containsOnly ( Row . row (  \" c _ tinyint \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ smallint \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ int \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ bigint \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ float \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ double \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ decimal \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ decimal _ w _ params \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ timestamp \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ date \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ string \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ varchar \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ char \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ boolean \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ binary \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row ( null ,    null ,    null ,    null ,     2  .  0  ,    null ,    null )  )  ;", "TestHiveTableStatistics . onHive (  )  . executeQuery (  (  (  \" ANALYZE   TABLE    \"     +    tableNameInDatabase )     +     \"    COMPUTE   STATISTICS   FOR   COLUMNS \"  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  (  \" SHOW   STATS   FOR    \"     +    tableNameInDatabase )  )  )  . containsOnly ( Row . row (  \" c _ tinyint \"  ,    null ,     2  .  0  ,     0  .  0  ,    null ,     \"  1  2  1  \"  ,     \"  1  2  7  \"  )  ,    Row . row (  \" c _ smallint \"  ,    null ,     2  .  0  ,     0  .  0  ,    null ,     \"  3  2  7  6  1  \"  ,     \"  3  2  7  6  7  \"  )  ,    Row . row (  \" c _ int \"  ,    null ,     2  .  0  ,     0  .  0  ,    null ,     \"  2  1  4  7  4  8  3  6  4  1  \"  ,     \"  2  1  4  7  4  8  3  6  4  7  \"  )  ,    Row . row (  \" c _ bigint \"  ,    null ,     2  .  0  ,     0  .  0  ,    null ,     \"  9  2  2  3  3  7  2  0  3  6  8  5  4  7  7  5  8  0  1  \"  ,     \"  9  2  2  3  3  7  2  0  3  6  8  5  4  7  7  5  8  0  7  \"  )  ,    Row . row (  \" c _ float \"  ,    null ,     2  .  0  ,     0  .  0  ,    null ,     \"  1  2  3  .  3  4  1  \"  ,     \"  1  2  3  .  3  4  5  \"  )  ,    Row . row (  \" c _ double \"  ,    null ,     2  .  0  ,     0  .  0  ,    null ,     \"  2  3  4  .  5  6  1  \"  ,     \"  2  3  5  .  5  6  7  \"  )  ,    Row . row (  \" c _ decimal \"  ,    null ,     2  .  0  ,     0  .  0  ,    null ,     \"  3  4  5  \"  ,     \"  3  4  6  \"  )  ,    Row . row (  \" c _ decimal _ w _ params \"  ,    null ,     2  .  0  ,     0  .  0  ,    null ,     \"  3  4  5  .  6  7  1  0  0  \"  ,     \"  3  4  5  .  6  7  8  0  0  \"  )  ,    Row . row (  \" c _ timestamp \"  ,    null ,     2  .  0  ,     0  .  0  ,    null ,     \"  2  0  1  5  -  0  5  -  1  0     0  6  :  3  0  :  3  1  .  0  0  0  \"  ,     \"  2  0  1  5  -  0  5  -  1  0     0  6  :  3  0  :  3  5  .  0  0  0  \"  )  ,    Row . row (  \" c _ date \"  ,    null ,     2  .  0  ,     0  .  0  ,    null ,     \"  2  0  1  5  -  0  5  -  0  9  \"  ,     \"  2  0  1  5  -  0  6  -  1  0  \"  )  ,    Row . row (  \" c _ string \"  ,    null ,     2  .  0  ,     0  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" c _ varchar \"  ,    null ,     2  .  0  ,     0  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" c _ char \"  ,    null ,     2  .  0  ,     0  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" c _ boolean \"  ,    null ,     2  .  0  ,     0  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" c _ binary \"  ,    null ,    null ,     0  .  0  ,    null ,    null ,    null )  ,    Row . row ( null ,    null ,    null ,    null ,     2  .  0  ,    null ,    null )  )  ;", "}", "METHOD_END"], "methodName": ["testStatisticsForAllDataTypes"], "fileName": "com.facebook.presto.tests.hive.TestHiveTableStatistics"}, {"methodBody": ["METHOD_START", "{", "String   tableNameInDatabase    =    mutableTablesState (  )  . get ( TestHiveTableStatistics . EMPTY _ ALL _ TYPES _ TABLE _ NAME )  . getNameInDatabase (  )  ;", "TestHiveTableStatistics . onHive (  )  . executeQuery (  (  (  \" ANALYZE   TABLE    \"     +    tableNameInDatabase )     +     \"    COMPUTE   STATISTICS \"  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  (  \" SHOW   STATS   FOR    \"     +    tableNameInDatabase )  )  )  . containsOnly ( Row . row (  \" c _ tinyint \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ smallint \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ int \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ bigint \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ float \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ double \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ decimal \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ decimal _ w _ params \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ timestamp \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ date \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ string \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ varchar \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ char \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ boolean \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ binary \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row ( null ,    null ,    null ,    null ,     0  .  0  ,    null ,    null )  )  ;", "TestHiveTableStatistics . onHive (  )  . executeQuery (  (  (  \" ANALYZE   TABLE    \"     +    tableNameInDatabase )     +     \"    COMPUTE   STATISTICS   FOR   COLUMNS \"  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  (  \" SHOW   STATS   FOR    \"     +    tableNameInDatabase )  )  )  . containsOnly ( Row . row (  \" c _ tinyint \"  ,    null ,     0  .  0  ,     0  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" c _ smallint \"  ,    null ,     0  .  0  ,     0  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" c _ int \"  ,    null ,     0  .  0  ,     0  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" c _ bigint \"  ,    null ,     0  .  0  ,     0  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" c _ float \"  ,    null ,     0  .  0  ,     0  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" c _ double \"  ,    null ,     0  .  0  ,     0  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" c _ decimal \"  ,    null ,     0  .  0  ,     0  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" c _ decimal _ w _ params \"  ,    null ,     0  .  0  ,     0  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" c _ timestamp \"  ,    null ,     0  .  0  ,     0  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" c _ date \"  ,    null ,     0  .  0  ,     0  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" c _ string \"  ,    null ,     0  .  0  ,     0  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" c _ varchar \"  ,    null ,     0  .  0  ,     0  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" c _ char \"  ,    null ,     0  .  0  ,     0  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" c _ boolean \"  ,    null ,     0  .  0  ,     0  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" c _ binary \"  ,    null ,    null ,     0  .  0  ,    null ,    null ,    null )  ,    Row . row ( null ,    null ,    null ,    null ,     0  .  0  ,    null ,    null )  )  ;", "}", "METHOD_END"], "methodName": ["testStatisticsForAllDataTypesNoData"], "fileName": "com.facebook.presto.tests.hive.TestHiveTableStatistics"}, {"methodBody": ["METHOD_START", "{", "String   tableNameInDatabase    =    mutableTablesState (  )  . get ( TestHiveTableStatistics . EMPTY _ ALL _ TYPES _ TABLE _ NAME )  . getNameInDatabase (  )  ;", "TestHiveTableStatistics . onHive (  )  . executeQuery (  (  (  \" INSERT   INTO   TABLE    \"     +    tableNameInDatabase )     +     \"    VALUES ( null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null )  \"  )  )  ;", "TestHiveTableStatistics . onHive (  )  . executeQuery (  (  (  \" ANALYZE   TABLE    \"     +    tableNameInDatabase )     +     \"    COMPUTE   STATISTICS \"  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  (  \" SHOW   STATS   FOR    \"     +    tableNameInDatabase )  )  )  . containsOnly ( Row . row (  \" c _ tinyint \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ smallint \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ int \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ bigint \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ float \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ double \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ decimal \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ decimal _ w _ params \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ timestamp \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ date \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ string \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ varchar \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ char \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ boolean \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" c _ binary \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row ( null ,    null ,    null ,    null ,     1  .  0  ,    null ,    null )  )  ;", "TestHiveTableStatistics . onHive (  )  . executeQuery (  (  (  \" ANALYZE   TABLE    \"     +    tableNameInDatabase )     +     \"    COMPUTE   STATISTICS   FOR   COLUMNS \"  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  (  \" SHOW   STATS   FOR    \"     +    tableNameInDatabase )  )  )  . containsOnly ( Row . row (  \" c _ tinyint \"  ,    null ,     1  .  0  ,     1  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" c _ smallint \"  ,    null ,     1  .  0  ,     1  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" c _ int \"  ,    null ,     1  .  0  ,     1  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" c _ bigint \"  ,    null ,     1  .  0  ,     1  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" c _ float \"  ,    null ,     1  .  0  ,     1  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" c _ double \"  ,    null ,     1  .  0  ,     1  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" c _ decimal \"  ,    null ,     1  .  0  ,     1  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" c _ decimal _ w _ params \"  ,    null ,     1  .  0  ,     1  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" c _ timestamp \"  ,    null ,     1  .  0  ,     1  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" c _ date \"  ,    null ,     1  .  0  ,     1  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" c _ string \"  ,    null ,     1  .  0  ,     1  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" c _ varchar \"  ,    null ,     1  .  0  ,     1  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" c _ char \"  ,    null ,     1  .  0  ,     1  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" c _ boolean \"  ,    null ,     0  .  0  ,     1  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" c _ binary \"  ,    null ,    null ,     1  .  0  ,    null ,    null ,    null )  ,    Row . row ( null ,    null ,    null ,    null ,     1  .  0  ,    null ,    null )  )  ;", "}", "METHOD_END"], "methodName": ["testStatisticsForAllDataTypesOnlyNulls"], "fileName": "com.facebook.presto.tests.hive.TestHiveTableStatistics"}, {"methodBody": ["METHOD_START", "{", "String   tableNameInDatabase    =    mutableTablesState (  )  . get ( HiveTableDefinitions . NATION _ PARTITIONED _ BY _ REGIONKEY . getName (  )  )  . getNameInDatabase (  )  ;", "String   showStatsWholeTable    =     \" SHOW   STATS   FOR    \"     +    tableNameInDatabase ;", "String   showStatsPartitionOne    =     (  \" SHOW   STATS   FOR    ( SELECT    *    FROM    \"     +    tableNameInDatabase )     +     \"    WHERE   p _ regionkey    =     1  )  \"  ;", "String   showStatsPartitionTwo    =     (  \" SHOW   STATS   FOR    ( SELECT    *    FROM    \"     +    tableNameInDatabase )     +     \"    WHERE   p _ regionkey    =     2  )  \"  ;", "QueryAssert . assertThat ( QueryExecutor . query ( showStatsWholeTable )  )  . containsOnly ( Row . row (  \" p _ nationkey \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" p _ name \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" p _ regionkey \"  ,    null ,     3  .  0  ,    null ,    null ,     \"  1  \"  ,     \"  3  \"  )  ,    Row . row (  \" p _ comment \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row ( null ,    null ,    null ,    null ,    null ,    null ,    null )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( showStatsPartitionOne )  )  . containsOnly ( Row . row (  \" p _ nationkey \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" p _ name \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" p _ regionkey \"  ,    null ,     1  .  0  ,    null ,    null ,     \"  1  \"  ,     \"  1  \"  )  ,    Row . row (  \" p _ comment \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row ( null ,    null ,    null ,    null ,    null ,    null ,    null )  )  ;", ". onHive (  )  . executeQuery (  (  (  \" ANALYZE   TABLE    \"     +    tableNameInDatabase )     +     \"    PARTITION    ( p _ regionkey    =     \\  \"  1  \\  \"  )    COMPUTE   STATISTICS \"  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( showStatsWholeTable )  )  . containsOnly ( Row . row (  \" p _ nationkey \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" p _ name \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" p _ regionkey \"  ,    null ,     3  .  0  ,     0  .  0  ,    null ,     \"  1  \"  ,     \"  3  \"  )  ,    Row . row (  \" p _ comment \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row ( null ,    null ,    null ,    null ,     1  5  .  0  ,    null ,    null )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( showStatsPartitionOne )  )  . containsOnly ( Row . row (  \" p _ nationkey \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" p _ name \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" p _ regionkey \"  ,    null ,     1  .  0  ,     0  .  0  ,    null ,     \"  1  \"  ,     \"  1  \"  )  ,    Row . row (  \" p _ comment \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row ( null ,    null ,    null ,    null ,     5  .  0  ,    null ,    null )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( showStatsPartitionTwo )  )  . containsOnly ( Row . row (  \" p _ nationkey \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" p _ name \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" p _ regionkey \"  ,    null ,     1  .  0  ,    null ,    null ,     \"  2  \"  ,     \"  2  \"  )  ,    Row . row (  \" p _ comment \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row ( null ,    null ,    null ,    null ,    null ,    null ,    null )  )  ;", ". onHive (  )  . executeQuery (  (  (  \" ANALYZE   TABLE    \"     +    tableNameInDatabase )     +     \"    PARTITION    ( p _ regionkey )    COMPUTE   STATISTICS \"  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( showStatsWholeTable )  )  . containsOnly ( Row . row (  \" p _ nationkey \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" p _ name \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" p _ regionkey \"  ,    null ,     3  .  0  ,     0  .  0  ,    null ,     \"  1  \"  ,     \"  3  \"  )  ,    Row . row (  \" p _ comment \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row ( null ,    null ,    null ,    null ,     1  5  .  0  ,    null ,    null )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( showStatsPartitionOne )  )  . containsOnly ( Row . row (  \" p _ nationkey \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" p _ name \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" p _ regionkey \"  ,    null ,     1  .  0  ,     0  .  0  ,    null ,     \"  1  \"  ,     \"  1  \"  )  ,    Row . row (  \" p _ comment \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row ( null ,    null ,    null ,    null ,     5  .  0  ,    null ,    null )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( showStatsPartitionTwo )  )  . containsOnly ( Row . row (  \" p _ nationkey \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" p _ name \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" p _ regionkey \"  ,    null ,     1  .  0  ,     0  .  0  ,    null ,     \"  2  \"  ,     \"  2  \"  )  ,    Row . row (  \" p _ comment \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row ( null ,    null ,    null ,    null ,     5  .  0  ,    null ,    null )  )  ;", ". onHive (  )  . executeQuery (  (  (  \" ANALYZE   TABLE    \"     +    tableNameInDatabase )     +     \"    PARTITION    ( p _ regionkey    =     \\  \"  1  \\  \"  )    COMPUTE   STATISTICS   FOR   COLUMNS \"  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( showStatsWholeTable )  )  . containsOnly ( Row . row (  \" p _ nationkey \"  ,    null ,     5  .  0  ,     0  .  0  ,    null ,     \"  1  \"  ,     \"  2  4  \"  )  ,    Row . row (  \" p _ name \"  ,    null ,     6  .  0  ,     0  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" p _ regionkey \"  ,    null ,     3  .  0  ,     0  .  0  ,    null ,     \"  1  \"  ,     \"  3  \"  )  ,    Row . row (  \" p _ comment \"  ,    null ,     1  .  0  ,     0  .  0  ,    null ,    null ,    null )  ,    Row . row ( null ,    null ,    null ,    null ,     1  5  .  0  ,    null ,    null )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( showStatsPartitionOne )  )  . containsOnly ( Row . row (  \" p _ nationkey \"  ,    null ,     5  .  0  ,     0  .  0  ,    null ,     \"  1  \"  ,     \"  2  4  \"  )  ,    Row . row (  \" p _ name \"  ,    null ,     6  .  0  ,     0  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" p _ regionkey \"  ,    null ,     1  .  0  ,     0  .  0  ,    null ,     \"  1  \"  ,     \"  1  \"  )  ,    Row . row (  \" p _ comment \"  ,    null ,     1  .  0  ,     0  .  0  ,    null ,    null ,    null )  ,    Row . row ( null ,    null ,    null ,    null ,     5  .  0  ,    null ,    null )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( showStatsPartitionTwo )  )  . containsOnly ( Row . row (  \" p _ nationkey \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" p _ name \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" p _ regionkey \"  ,    null ,     1  .  0  ,     0  .  0  ,    null ,     \"  2  \"  ,     \"  2  \"  )  ,    Row . row (  \" p _ comment \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row ( null ,    null ,    null ,    null ,     5  .  0  ,    null ,    null )  )  ;", ". onHive (  )  . executeQuery (  (  (  \" ANALYZE   TABLE    \"     +    tableNameInDatabase )     +     \"    PARTITION    ( p _ regionkey )    COMPUTE   STATISTICS   FOR   COLUMNS \"  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( showStatsWholeTable )  )  . containsOnly ( Row . row (  \" p _ nationkey \"  ,    null ,     5  .  0  ,     0  .  0  ,    null ,     \"  1  \"  ,     \"  2  4  \"  )  ,    Row . row (  \" p _ name \"  ,    null ,     6  .  0  ,     0  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" p _ regionkey \"  ,    null ,     3  .  0  ,     0  .  0  ,    null ,     \"  1  \"  ,     \"  3  \"  )  ,    Row . row (  \" p _ comment \"  ,    null ,     1  .  0  ,     0  .  0  ,    null ,    null ,    null )  ,    Row . row ( null ,    null ,    null ,    null ,     1  5  .  0  ,    null ,    null )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( showStatsPartitionOne )  )  . containsOnly ( Row . row (  \" p _ nationkey \"  ,    null ,     5  .  0  ,     0  .  0  ,    null ,     \"  1  \"  ,     \"  2  4  \"  )  ,    Row . row (  \" p _ name \"  ,    null ,     6  .  0  ,     0  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" p _ regionkey \"  ,    null ,     1  .  0  ,     0  .  0  ,    null ,     \"  1  \"  ,     \"  1  \"  )  ,    Row . row (  \" p _ comment \"  ,    null ,     1  .  0  ,     0  .  0  ,    null ,    null ,    null )  ,    Row . row ( null ,    null ,    null ,    null ,     5  .  0  ,    null ,    null )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( showStatsPartitionTwo )  )  . containsOnly ( Row . row (  \" p _ nationkey \"  ,    null ,     4  .  0  ,     0  .  0  ,    null ,     \"  8  \"  ,     \"  2  1  \"  )  ,    Row . row (  \" p _ name \"  ,    null ,     6  .  0  ,     0  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" p _ regionkey \"  ,    null ,     1  .  0  ,     0  .  0  ,    null ,     \"  2  \"  ,     \"  2  \"  )  ,    Row . row (  \" p _ comment \"  ,    null ,     1  .  0  ,     0  .  0  ,    null ,    null ,    null )  ,    Row . row ( null ,    null ,    null ,    null ,     5  .  0  ,    null ,    null )  )  ;", "}", "METHOD_END"], "methodName": ["testStatisticsForPartitionedTable"], "fileName": "com.facebook.presto.tests.hive.TestHiveTableStatistics"}, {"methodBody": ["METHOD_START", "{", "String   tableNameInDatabase    =    mutableTablesState (  )  . get ( NATION . getName (  )  )  . getNameInDatabase (  )  ;", "String   showStatsWholeTable    =     \" SHOW   STATS   FOR    \"     +    tableNameInDatabase ;", "QueryAssert . assertThat ( QueryExecutor . query ( showStatsWholeTable )  )  . containsOnly ( Row . row (  \" n _ nationkey \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" n _ name \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" n _ regionkey \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" n _ comment \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row ( null ,    null ,    null ,    null ,    QueryAssert . anyOf ( null ,     0  .  0  )  ,    null ,    null )  )  ;", ". onHive (  )  . executeQuery (  (  (  \" ANALYZE   TABLE    \"     +    tableNameInDatabase )     +     \"    COMPUTE   STATISTICS \"  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( showStatsWholeTable )  )  . containsOnly ( Row . row (  \" n _ nationkey \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" n _ name \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" n _ regionkey \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row (  \" n _ comment \"  ,    null ,    null ,    null ,    null ,    null ,    null )  ,    Row . row ( null ,    null ,    null ,    null ,     2  5  .  0  ,    null ,    null )  )  ;", ". onHive (  )  . executeQuery (  (  (  \" ANALYZE   TABLE    \"     +    tableNameInDatabase )     +     \"    COMPUTE   STATISTICS   FOR   COLUMNS \"  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( showStatsWholeTable )  )  . containsOnly ( Row . row (  \" n _ nationkey \"  ,    null ,     1  9  .  0  ,     0  .  0  ,    null ,     \"  0  \"  ,     \"  2  4  \"  )  ,    Row . row (  \" n _ name \"  ,    null ,     2  4  .  0  ,     0  .  0  ,    null ,    null ,    null )  ,    Row . row (  \" n _ regionkey \"  ,    null ,     5  .  0  ,     0  .  0  ,    null ,     \"  0  \"  ,     \"  4  \"  )  ,    Row . row (  \" n _ comment \"  ,    null ,     3  1  .  0  ,     0  .  0  ,    null ,    null ,    null )  ,    Row . row ( null ,    null ,    null ,    null ,     2  5  .  0  ,    null ,    null )  )  ;", "}", "METHOD_END"], "methodName": ["testStatisticsForUnpartitionedTable"], "fileName": "com.facebook.presto.tests.hive.TestHiveTableStatistics"}, {"methodBody": ["METHOD_START", "{", "String   createTableDdl    =     \" CREATE   TABLE    % NAME %  (     \"     +     (  (  (  (  (  (  (  (  (  \" id   int ,     \"     +     \" name   string    \"  )     +     \"  )     \"  )     +     \" PARTITIONED   BY    ( dt   string )     \"  )     +     \" ROW   FORMAT   SERDE    ' LazySimpleSerDe '     \"  )     +     \" WITH   SERDEPROPERTIES    (     \"  )     +     \"  \\  ' field . delim \\  '  =  \\  '  \\  \\ t \\  '  ,     \"  )     +     \"  \\  ' line . delim \\  '  =  \\  '  \\  \\ n \\  '  ,     \"  )     +     \"  \\  ' serialization . format \\  '  =  \\  '  \\  \\ t \\  '     \"  )     +     \"  )  \"  )  ;", "return   HiveTableDefinition . builder (  . PARTITIONED _ TABLE _ WITH _ SERDE )  . setCreateTableDDLTemplate ( createTableDdl )  . setNoData (  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["partitionedTableDefinition"], "fileName": "com.facebook.presto.tests.hive.TestInsertIntoHiveTable"}, {"methodBody": ["METHOD_START", "{", "String   tableNameInDatabase    =    mutableTablesState (  )  . get ( TestInsertIntoHiveTable . PARTITIONED _ TABLE _ WITH _ SERDE )  . getNameInDatabase (  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  (  (  \" INSERT   INTO    \"     +    tableNameInDatabase )     +     \"    SELECT    1  ,     ' presto '  ,     '  2  0  1  8  -  0  1  -  0  1  '  \"  )  )  )  . containsExactly ( Row . row (  1  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  (  \" SELECT    *    FROM    \"     +    tableNameInDatabase )  )  )  . containsExactly ( Row . row (  1  ,     \" presto \"  ,     \"  2  0  1  8  -  0  1  -  0  1  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testInsertIntoPartitionedWithSerdePropety"], "fileName": "com.facebook.presto.tests.hive.TestInsertIntoHiveTable"}, {"methodBody": ["METHOD_START", "{", "String   tableNameInDatabase    =    mutableTablesState (  )  . get ( TestInsertIntoHiveTable . TABLE _ NAME )  . getNameInDatabase (  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  (  \" SELECT    *    FROM    \"     +    tableNameInDatabase )  )  )  . hasNoRows (  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  (  (  \" INSERT   INTO    \"     +    tableNameInDatabase )     +     \"    SELECT    *    from   textfile _ all _ types \"  )  )  )  . containsExactly ( Row . row (  1  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  (  \" SELECT    *    FROM    \"     +    tableNameInDatabase )  )  )  . containsOnly ( Row . row (  1  2  7  ,     3  2  7  6  7  ,     2  1  4  7  4  8  3  6  4  7  ,     9  2  2  3  3  7  2  0  3  6  8  5  4  7  7  5  8  0  7 L ,     1  2  3  .  3  4  5 F ,     2  3  4  .  5  6  7  ,    new   BigDecimal (  \"  3  4  6  \"  )  ,    new   BigDecimal (  \"  3  4  5  .  6  7  8  0  0  \"  )  ,    DateTimeUtils . parseTimestampInLocalTime (  \"  2  0  1  5  -  0  5  -  1  0     1  2  :  1  5  :  3  5  .  1  2  3  \"  ,    TemptoProductTestRunner . PRODUCT _ TESTS _ TIME _ ZONE )  ,    Date . valueOf (  \"  2  0  1  5  -  0  5  -  1  0  \"  )  ,     \" ala   ma   kota \"  ,     \" ala   ma   kot \"  ,     \" ala   ma             \"  ,    true ,     \" kot   binarny \"  . getBytes (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testInsertIntoSelectToHiveTableAllHiveSimpleTypes"], "fileName": "com.facebook.presto.tests.hive.TestInsertIntoHiveTable"}, {"methodBody": ["METHOD_START", "{", "String   tableNameInDatabase    =    mutableTablesState (  )  . get ( TestInsertIntoHiveTable . TABLE _ NAME )  . getNameInDatabase (  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  (  \" SELECT    *    FROM    \"     +    tableNameInDatabase )  )  )  . hasNoRows (  )  ;", "QueryExecutor . query (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  \" INSERT   INTO    \"     +    tableNameInDatabase )     +     \"    VALUES (  \"  )     +     \" TINYINT    '  1  2  7  '  ,     \"  )     +     \" SMALLINT    '  3  2  7  6  7  '  ,     \"  )     +     \"  2  1  4  7  4  8  3  6  4  7  ,     \"  )     +     \"  9  2  2  3  3  7  2  0  3  6  8  5  4  7  7  5  8  0  7  ,     \"  )     +     \" REAL    '  1  2  3  .  3  4  5  '  ,     \"  )     +     \"  2  3  4  .  5  6  7  ,     \"  )     +     \" CAST (  3  4  6    as   DECIMAL (  1  0  ,  0  )  )  ,  \"  )     +     \" CAST (  3  4  5  .  6  7  8  0  0    as   DECIMAL (  1  0  ,  5  )  )  ,  \"  )     +     \" timestamp    '  2  0  1  5  -  0  5  -  1  0     1  2  :  1  5  :  3  5  .  1  2  3  '  ,     \"  )     +     \" date    '  2  0  1  5  -  0  5  -  1  0  '  ,     \"  )     +     \"  ' ala   ma   kota '  ,     \"  )     +     \"  ' ala   ma   kot '  ,     \"  )     +     \" CAST (  ' ala   ma             '    as   CHAR (  1  0  )  )  ,     \"  )     +     \" true ,     \"  )     +     \" from _ base 6  4  (  ' a 2  9  0 IGJpbmFybnk =  '  )  \"  )     +     \"  )  \"  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  (  \" SELECT    *    FROM    \"     +    tableNameInDatabase )  )  )  . containsOnly ( Row . row (  1  2  7  ,     3  2  7  6  7  ,     2  1  4  7  4  8  3  6  4  7  ,     9  2  2  3  3  7  2  0  3  6  8  5  4  7  7  5  8  0  7 L ,     1  2  3  .  3  4  5 F ,     2  3  4  .  5  6  7  ,    new   BigDecimal (  \"  3  4  6  \"  )  ,    new   BigDecimal (  \"  3  4  5  .  6  7  8  0  0  \"  )  ,    DateTimeUtils . parseTimestampInLocalTime (  \"  2  0  1  5  -  0  5  -  1  0     1  2  :  1  5  :  3  5  .  1  2  3  \"  ,    TemptoProductTestRunner . PRODUCT _ TESTS _ TIME _ ZONE )  ,    Date . valueOf (  \"  2  0  1  5  -  0  5  -  1  0  \"  )  ,     \" ala   ma   kota \"  ,     \" ala   ma   kot \"  ,     \" ala   ma             \"  ,    true ,     \" kot   binarny \"  . getBytes (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testInsertIntoValuesToHiveTableAllHiveSimpleTypes"], "fileName": "com.facebook.presto.tests.hive.TestInsertIntoHiveTable"}, {"methodBody": ["METHOD_START", "{", "tableName    =     \" alice _ owned _ table \"  ;", "aliceExecutor    =    QueryExecutors . connectToPresto (  \" alice @  \"  )  ;", "bobExecutor    =    QueryExecutors . connectToPresto (  \" bob @  \"  )  ;", "charlieExecutor    =    QueryExecutors . connectToPresto (  \" charlie @  \"  )  ;", "aliceExecutor . executeQuery ( String . format (  \" DROP   TABLE   IF   EXISTS    % s \"  ,    tableName )  )  ;", "aliceExecutor . executeQuery ( String . format (  \" CREATE   TABLE    % s ( month   bigint ,    day   bigint )    WITH    ( partitioned _ by    =    ARRAY [  ' day '  ]  )  \"  ,    tableName )  )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "com.facebook.presto.tests.hive.TestSqlStandardAccessControlChecks"}, {"methodBody": ["METHOD_START", "{", "QueryAssert . assertThat ( aliceExecutor . executeQuery ( String . format (  \" SHOW   COLUMNS   FROM    % s \"  ,    tableName )  )  )  . hasRowsCount (  2  )  ;", "QueryAssert . assertThat (  (  )     -  >    bobExecutor . executeQuery ( format (  \" ALTER   TABLE    % s   ADD   COLUMN   year   bigint \"  ,    tableName )  )  )  . failsWithMessage ( String . format (  \"    Denied :    Cannot   add   a   column   to   table   default .  % s \"  ,    tableName )  )  ;", "aliceExecutor . executeQuery ( String . format (  \" ALTER   TABLE    % s   ADD   COLUMN   year   bigint \"  ,    tableName )  )  ;", "QueryAssert . assertThat ( aliceExecutor . executeQuery ( String . format (  \" SHOW   COLUMNS   FROM    % s \"  ,    tableName )  )  )  . hasRowsCount (  3  )  ;", "}", "METHOD_END"], "methodName": ["testAccessControlAlterTable"], "fileName": "com.facebook.presto.tests.hive.TestSqlStandardAccessControlChecks"}, {"methodBody": ["METHOD_START", "{", "String   createTableAsSelect    =     \" bob _ create _ table _ as _ select \"  ;", "QueryAssert . assertThat (  (  )     -  >    bobExecutor . executeQuery ( format (  \" CREATE   TABLE    % s   AS   SELECT    *    FROM    % s \"  ,    createTableAsSelect ,    tableName )  )  )  . failsWithMessage ( String . format (  \"    Denied :    Cannot   select   from   table   default .  % s \"  ,    tableName )  )  ;", "aliceExecutor . executeQuery ( String . format (  \" GRANT   SELECT   ON    % s   TO   bob \"  ,    tableName )  )  ;", "bobExecutor . executeQuery ( String . format (  \" CREATE   TABLE    % s   AS   SELECT    *    FROM    % s \"  ,    createTableAsSelect ,    tableName )  )  ;", "QueryAssert . assertThat ( bobExecutor . executeQuery ( String . format (  \" SELECT    *    FROM    % s \"  ,    createTableAsSelect )  )  )  . hasNoRows (  )  ;", "}", "METHOD_END"], "methodName": ["testAccessControlCreateTableAsSelect"], "fileName": "com.facebook.presto.tests.hive.TestSqlStandardAccessControlChecks"}, {"methodBody": ["METHOD_START", "{", "String   viewName    =     \" bob _ view \"  ;", "String   selectTableSql    =    String . format (  \" SELECT    *    FROM    % s \"  ,    tableName )  ;", "String   createViewSql    =    String . format (  \" CREATE   VIEW    % s   AS    % s \"  ,    viewName ,    selectTableSql )  ;", "bobExecutor . executeQuery ( String . format (  \" DROP   VIEW   IF   EXISTS    % s \"  ,    viewName )  )  ;", "QueryAssert . assertThat (  (  )     -  >    bobExecutor . executeQuery ( createViewSql )  )  . failsWithMessage ( String . format (  \"    Denied :    Cannot   select   from   table   default .  % s \"  ,    tableName )  )  ;", "aliceExecutor . executeQuery ( String . format (  \" GRANT   SELECT   ON    % s   TO   bob \"  ,    tableName )  )  ;", "bobExecutor . executeQuery ( createViewSql )  ;", "QueryAssert . assertThat ( bobExecutor . executeQuery ( String . format (  \" SELECT    *    FROM    % s \"  ,    viewName )  )  )  . hasNoRows (  )  ;", "QueryAssert . assertThat (  (  )     -  >    charlieExecutor . executeQuery ( format (  \" SELECT    *    FROM    % s \"  ,    viewName )  )  )  . failsWithMessage ( String . format (  \"    Denied :    Cannot   select   from   view   default .  % s \"  ,    viewName )  )  ;", "bobExecutor . executeQuery ( String . format (  \" GRANT   SELECT   ON    % s   TO   charlie \"  ,    viewName )  )  ;", "QueryAssert . assertThat (  (  )     -  >    charlieExecutor . executeQuery ( format (  \" SELECT    *    FROM    % s \"  ,    viewName )  )  )  . failsWithMessage ( String . format (  \"    Denied :    Cannot   create   view   that   selects   from   default .  % s \"  ,    tableName )  )  ;", "aliceExecutor . executeQuery ( String . format (  \" REVOKE   SELECT   ON    % s   FROM   bob \"  ,    tableName )  )  ;", "aliceExecutor . executeQuery ( String . format (  \" GRANT   SELECT   ON    % s   TO   bob   WITH   GRANT   OPTION \"  ,    tableName )  )  ;", "QueryAssert . assertThat ( bobExecutor . executeQuery ( String . format (  \" SELECT    *    FROM    % s \"  ,    viewName )  )  )  . hasNoRows (  )  ;", "QueryAssert . assertThat ( charlieExecutor . executeQuery ( String . format (  \" SELECT    *    FROM    % s \"  ,    viewName )  )  )  . hasNoRows (  )  ;", "}", "METHOD_END"], "methodName": ["testAccessControlCreateView"], "fileName": "com.facebook.presto.tests.hive.TestSqlStandardAccessControlChecks"}, {"methodBody": ["METHOD_START", "{", "aliceExecutor . executeQuery ( String . format (  \" INSERT   INTO    % s   VALUES    (  4  ,     1  3  )  \"  ,    tableName )  )  ;", "QueryAssert . assertThat ( aliceExecutor . executeQuery ( String . format (  \" SELECT    *    FROM    % s \"  ,    tableName )  )  )  . hasRowsCount (  1  )  ;", "QueryAssert . assertThat (  (  )     -  >    bobExecutor . executeQuery ( format (  \" DELETE   FROM    % s   WHERE   day =  4  \"  ,    tableName )  )  )  . failsWithMessage ( String . format (  \"    Denied :    Cannot   delete   from   table   default .  % s \"  ,    tableName )  )  ;", "aliceExecutor . executeQuery ( String . format (  \" GRANT   DELETE   ON    % s   TO   bob \"  ,    tableName )  )  ;", "bobExecutor . executeQuery ( String . format (  \" DELETE   FROM    % s \"  ,    tableName )  )  ;", "QueryAssert . assertThat ( aliceExecutor . executeQuery ( String . format (  \" SELECT    *    FROM    % s \"  ,    tableName )  )  )  . hasNoRows (  )  ;", "}", "METHOD_END"], "methodName": ["testAccessControlDelete"], "fileName": "com.facebook.presto.tests.hive.TestSqlStandardAccessControlChecks"}, {"methodBody": ["METHOD_START", "{", "QueryAssert . assertThat (  (  )     -  >    bobExecutor . executeQuery ( format (  \" DROP   TABLE    % s \"  ,    tableName )  )  )  . failsWithMessage ( String . format (  \" Access   Denied :    Cannot   drop   table   default .  % s \"  ,    tableName )  )  ;", "aliceExecutor . executeQuery ( String . format (  \" DROP   TABLE    % s \"  ,    tableName )  )  ;", "QueryAssert . assertThat (  (  )     -  >    aliceExecutor . executeQuery ( format (  \" SELECT    *    FROM    % s \"  ,    tableName )  )  )  . failsWithMessage (  \" does   not   exist \"  )  ;", "}", "METHOD_END"], "methodName": ["testAccessControlDropTable"], "fileName": "com.facebook.presto.tests.hive.TestSqlStandardAccessControlChecks"}, {"methodBody": ["METHOD_START", "{", "String   viewName    =     \" alice _ view _ for _ drop \"  ;", "aliceExecutor . executeQuery ( String . format (  \" CREATE   VIEW    % s   AS   SELECT    *    FROM    % s \"  ,    viewName ,    tableName )  )  ;", "QueryAssert . assertThat (  (  )     -  >    bobExecutor . executeQuery ( format (  \" DROP   VIEW    % s \"  ,    viewName )  )  )  . failsWithMessage ( String . format (  \"    Denied :    Cannot   drop   view   default .  % s \"  ,    viewName )  )  ;", "aliceExecutor . executeQuery ( String . format (  \" DROP   VIEW    % s \"  ,    viewName )  )  ;", "QueryAssert . assertThat (  (  )     -  >    aliceExecutor . executeQuery ( format (  \" SELECT    *    FROM    % s \"  ,    viewName )  )  )  . failsWithMessage (  \" does   not   exist \"  )  ;", "}", "METHOD_END"], "methodName": ["testAccessControlDropView"], "fileName": "com.facebook.presto.tests.hive.TestSqlStandardAccessControlChecks"}, {"methodBody": ["METHOD_START", "{", "QueryAssert . assertThat (  (  )     -  >    bobExecutor . executeQuery ( format (  \" INSERT   INTO    % s   VALUES    (  3  ,     2  2  )  \"  ,    tableName )  )  )  . failsWithMessage ( String . format (  \" Access   Denied :    Cannot   insert   into   table   default .  % s \"  ,    tableName )  )  ;", "aliceExecutor . executeQuery ( String . format (  \" GRANT   INSERT   ON    % s   TO   bob \"  ,    tableName )  )  ;", "QueryAssert . assertThat ( bobExecutor . executeQuery ( String . format (  \" INSERT   INTO    % s   VALUES    (  3  ,     2  2  )  \"  ,    tableName )  )  )  . hasRowsCount (  1  )  ;", "QueryAssert . assertThat ( aliceExecutor . executeQuery ( String . format (  \" SELECT    *    FROM    % s \"  ,    tableName )  )  )  . hasRowsCount (  1  )  ;", "}", "METHOD_END"], "methodName": ["testAccessControlInsert"], "fileName": "com.facebook.presto.tests.hive.TestSqlStandardAccessControlChecks"}, {"methodBody": ["METHOD_START", "{", "QueryAssert . assertThat (  (  )     -  >    bobExecutor . executeQuery ( format (  \" SELECT    *    FROM    % s \"  ,    tableName )  )  )  . failsWithMessage ( String . format (  \" Access   Denied :    Cannot   select   from   table   default .  % s \"  ,    tableName )  )  ;", "aliceExecutor . executeQuery ( String . format (  \" GRANT   SELECT   ON    % s   TO   bob \"  ,    tableName )  )  ;", "QueryAssert . assertThat ( bobExecutor . executeQuery ( String . format (  \" SELECT    *    FROM    % s \"  ,    tableName )  )  )  . hasNoRows (  )  ;", "}", "METHOD_END"], "methodName": ["testAccessControlSelect"], "fileName": "com.facebook.presto.tests.hive.TestSqlStandardAccessControlChecks"}, {"methodBody": ["METHOD_START", "{", "QueryAssert . assertThat (  (  )     -  >    bobExecutor . executeQuery ( format (  \" SELECT    *    FROM    \\  \"  % s $ partitions \\  \"  \"  ,    tableName )  )  )  . failsWithMessage ( String . format (  \" Access   Denied :    Cannot   select   from   table   default .  % s $ partitions \"  ,    tableName )  )  ;", "aliceExecutor . executeQuery ( String . format (  \" GRANT   SELECT   ON    % s   TO   bob \"  ,    tableName )  )  ;", "QueryAssert . assertThat ( bobExecutor . executeQuery ( String . format (  \" SELECT    *    FROM    \\  \"  % s $ partitions \\  \"  \"  ,    tableName )  )  )  . hasNoRows (  )  ;", "}", "METHOD_END"], "methodName": ["testAccessControlSelectFromPartitions"], "fileName": "com.facebook.presto.tests.hive.TestSqlStandardAccessControlChecks"}, {"methodBody": ["METHOD_START", "{", "QueryAssert . assertThat (  (  )     -  >    bobExecutor . executeQuery ( format (  \" SHOW   PARTITIONS   FROM    % s \"  ,    tableName )  )  )  . failsWithMessage ( String . format (  \" Access   Denied :    Cannot   select   from   table   default .  % s $ partitions \"  ,    tableName )  )  ;", "aliceExecutor . executeQuery ( String . format (  \" GRANT   SELECT   ON    % s   TO   bob \"  ,    tableName )  )  ;", "QueryAssert . assertThat ( bobExecutor . executeQuery ( String . format (  \" SHOW   PARTITIONS   FROM    % s \"  ,    tableName )  )  )  . hasNoRows (  )  ;", "}", "METHOD_END"], "methodName": ["testAccessControlShowPartitions"], "fileName": "com.facebook.presto.tests.hive.TestSqlStandardAccessControlChecks"}, {"methodBody": ["METHOD_START", "{", "testQuerySplitsNumber (  \" p _ nationkey    <     4  0  \"  ,     3  )  ;", "testQuerySplitsNumber (  \" p _ regionkey    =     4  2  \"  ,     0  )  ;", "testQuerySplitsNumber (  \" p _ regionkey    =     2    AND   p _ nationkey    <     4  0  \"  ,     1  )  ;", "testQuerySplitsNumber (  \" p _ regionkey    =     2    AND   p _ nationkey    <     4  0    or   p _ regionkey    =     3  \"  ,     2  )  ;", "testQuerySplitsNumber (  \" p _ regionkey    =     2    OR   p _ nationkey    <     4  0  \"  ,     3  )  ;", "testQuerySplitsNumber (  \" p _ regionkey    <  =     2  \"  ,     2  )  ;", "testQuerySplitsNumber (  \" p _ regionkey    <  =     1    OR   p _ regionkey    >  =     3  \"  ,     2  )  ;", "}", "METHOD_END"], "methodName": ["selectFromPartitionedNation"], "fileName": "com.facebook.presto.tests.hive.TestTablePartitioningInsertInto"}, {"methodBody": ["METHOD_START", "{", "String   partitionedNation    =    mutableTablesState (  )  . get ( HiveTableDefinitions . NATION _ PARTITIONED _ BY _ REGIONKEY . getTableHandle (  )  )  . getNameInDatabase (  )  ;", "String   targetNation    =    mutableTablesState (  )  . get (  . TARGET _ NATION _ NAME )  . getNameInDatabase (  )  ;", "String   query    =    String . format (  \" INSERT   INTO    % s   SELECT   p _ nationkey ,    p _ name ,    p _ regionkey ,    p _ comment   FROM    % s   WHERE    % s \"  ,    targetNation ,    partitionedNation ,    condition )  ;", "QueryResult   queryResult    =    QueryExecutor . query ( query )  ;", "long   processedLinesCount    =    getProcessedLinesCount ( query ,    queryResult )  ;", "int   expectedLinesCount    =    expectedProcessedSplits    *     ( HiveTableDefinitions . NATION _ PARTITIONED _ BY _ REGIONKEY _ NUMBER _ OF _ LINES _ PER _ SPLIT )  ;", "assertThat ( processedLinesCount )  . isEqualTo ( expectedLinesCount )  ;", "}", "METHOD_END"], "methodName": ["testQuerySplitsNumber"], "fileName": "com.facebook.presto.tests.hive.TestTablePartitioningInsertInto"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   sb    =    new   StringBuilder (  )  ;", "sb . append (  \" CREATE    % EXTERNAL %    TABLE    % NAME %  (  \"  )  ;", "sb . append (  \"          col   INT \"  )  ;", "sb . append (  \"  )     \"  )  ;", "sb . append (  \" PARTITIONED   BY    ( part _ col   INT )     \"  )  ;", "if    ( rowFormat . isPresent (  )  )     {", "sb . append (  \" ROW   FORMAT    \"  )  . append ( rowFormat . get (  )  )  ;", "}", "sb . append (  (  \"    STORED   AS    \"     +    fileFormat )  )  ;", "return   sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["buildSingleIntColumnPartitionedTableDDL"], "fileName": "com.facebook.presto.tests.hive.TestTablePartitioningSelect"}, {"methodBody": ["METHOD_START", "{", "String   tableName    =     ( fileFormat . toLowerCase (  )  )     +     \"  _ single _ int _ column _ partitioned \"  ;", "HiveDataSource   dataSource    =    createResourceDataSource ( tableName ,    String . valueOf ( ThreadLocalRandom . current (  )  . nextLong ( Long . MAX _ VALUE )  )  ,     (  \" com / facebook / presto / tests / hive / data / single _ int _ column / data .  \"     +     ( fileFormat . toLowerCase (  )  )  )  )  ;", "HiveDataSource   invalidData    =    createStringDataSource ( tableName ,    String . valueOf ( ThreadLocalRandom . current (  )  . nextLong ( Long . MAX _ VALUE )  )  ,     \" INVALID   DATA \"  )  ;", "return   HiveTableDefinition . builder ( tableName )  . setCreateTableDDLTemplate (  . buildSingleIntColumnPartitionedTableDDL ( fileFormat ,    serde )  )  . addPartition (  \" part _ col    =     1  \"  ,    invalidData )  . addPartition (  \" part _ col    =     2  \"  ,    dataSource )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["singleIntColumnPartitionedTableDefinition"], "fileName": "com.facebook.presto.tests.hive.TestTablePartitioningSelect"}, {"methodBody": ["METHOD_START", "{", "String   tableNameInDatabase    =    tablesState . get ( TestTablePartitioningSelect . TABLE _ NAME )  . getNameInDatabase (  )  ;", "String   selectFromOnePartitionsSql    =     (  \" SELECT    *    FROM    \"     +    tableNameInDatabase )     +     \"    WHERE   part _ col    =     2  \"  ;", "QueryResult   onePartitionQueryResult    =    QueryExecutor . query ( selectFromOnePartitionsSql )  ;", "QueryAssert . assertThat ( onePartitionQueryResult )  . containsOnly ( Row . row (  4  2  ,     2  )  )  ;", "try    {", "QueryAssert . assertThat ( QueryExecutor . query (  (  \" SELECT    *    FROM    \"     +    tableNameInDatabase )  )  )  . containsOnly ( Row . row (  4  2  ,     2  )  ,    Row . row ( null ,     1  )  )  ;", "}    catch    ( QueryExecutionException   expectedDueToInvalidPartitionData )     {", "}", "}", "METHOD_END"], "methodName": ["testSelectPartitionedHiveTableDifferentFormats"], "fileName": "com.facebook.presto.tests.hive.TestTablePartitioningSelect"}, {"methodBody": ["METHOD_START", "{", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "QueryResult   ult    =    queryResult ( statement ,     \" select   current _ timezone (  )  \"  )  ;", "QueryAssert . assertThat ( ult )  . contains ( Row . row ( timeZoneId )  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertConnectionTimezone"], "fileName": "com.facebook.presto.tests.jdbc.JdbcTests"}, {"methodBody": ["METHOD_START", "{", "return   QueryExecutor . defaultQueryExecutor (  )  . getConnection (  )  ;", "}", "METHOD_END"], "methodName": ["connection"], "fileName": "com.facebook.presto.tests.jdbc.JdbcTests"}, {"methodBody": ["METHOD_START", "{", "return   connection (  )  . getMetaData (  )  ;", "}", "METHOD_END"], "methodName": ["metaData"], "fileName": "com.facebook.presto.tests.jdbc.JdbcTests"}, {"methodBody": ["METHOD_START", "{", "return   QueryResult . forResultSet ( statement . executeQuery ( query )  )  ;", "}", "METHOD_END"], "methodName": ["queryResult"], "fileName": "com.facebook.presto.tests.jdbc.JdbcTests"}, {"methodBody": ["METHOD_START", "{", "try    ( Statement   statement    =    connection (  )  . createStatement (  )  )     {", "QueryResult   ult    =    queryResult ( statement ,     \" select    *    from   hive . default . nation \"  )  ;", "QueryAssert . assertThat ( ult )  . matches ( TpchTableResults . PRESTO _ NATION _ RESULT )  ;", "}", "}", "METHOD_END"], "methodName": ["shouldExecuteQuery"], "fileName": "com.facebook.presto.tests.jdbc.JdbcTests"}, {"methodBody": ["METHOD_START", "{", "if    ( JdbcDriverUtils . usingTeradataJdbc 4 Driver ( connection (  )  )  )     {", ". LOGGER . warn (  \" connection (  )  . setSchema (  )    is   not   supported   in   JDBC    4  \"  )  ;", "} else    {", "connection (  )  . setCatalog (  \" hive \"  )  ;", "connection (  )  . setSchema (  \" default \"  )  ;", "try    ( Statement   statement    =    connection (  )  . createStatement (  )  )     {", "QueryResult   result    =    queryResult ( statement ,     \" select    *    from   nation \"  )  ;", "QueryAssert . assertThat ( result )  . matches ( TpchTableResults . PRESTO _ NATION _ RESULT )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["shouldExecuteQueryWithSelectedCatalogAndSchema"], "fileName": "com.facebook.presto.tests.jdbc.JdbcTests"}, {"methodBody": ["METHOD_START", "{", "QueryResult   result    =    QueryResult . forResultSet ( metaData (  )  . getColumns (  \" hive \"  ,     \" default \"  ,     \" nation \"  ,    null )  )  ;", "if    ( JdbcDriverUtils . usingPrestoJdbcDriver ( connection (  )  )  )     {", "QueryAssert . assertThat ( result )  . matches ( SqlResultDescriptor . sqlResultDescriptorForResource (  \" com /  / presto / tests / jdbc / get _ nation _ columns . result \"  )  )  ;", "} else", "if    ( JdbcDriverUtils . usingTeradataJdbc 4 Driver ( connection (  )  )  )     {", "QueryAssert . assertThat ( result )  . matches ( SqlResultDescriptor . sqlResultDescriptorForResource (  \" com /  / presto / tests / jdbc / get _ nation _ columns _ simba 4  . result \"  )  )  ;", "} else", "if    ( JdbcDriverUtils . usingTeradataJdbcDriver ( connection (  )  )  )     {", "QueryAssert . assertThat ( result )  . matches ( SqlResultDescriptor . sqlResultDescriptorForResource (  \" com /  / presto / tests / jdbc / get _ nation _ columns _ simba . result \"  )  )  ;", "} else    {", "throw   new   IllegalStateException (  )  ;", "}", "}", "METHOD_END"], "methodName": ["shouldGetColumns"], "fileName": "com.facebook.presto.tests.jdbc.JdbcTests"}, {"methodBody": ["METHOD_START", "{", "QueryResult   result    =    QueryResult . forResultSet ( metaData (  )  . getSchemas (  \" hive \"  ,    null )  )  ;", "QueryAssert . assertThat ( result )  . contains ( Row . row (  \" default \"  ,     \" hive \"  )  )  ;", "}", "METHOD_END"], "methodName": ["shouldGetSchemas"], "fileName": "com.facebook.presto.tests.jdbc.JdbcTests"}, {"methodBody": ["METHOD_START", "{", "QueryResult   result    =    QueryResult . forResultSet ( metaData (  )  . getTableTypes (  )  )  ;", "QueryAssert . assertThat ( result )  . contains ( Row . row (  \" TABLE \"  )  ,    Row . row (  \" VIEW \"  )  )  ;", "}", "METHOD_END"], "methodName": ["shouldGetTableTypes"], "fileName": "com.facebook.presto.tests.jdbc.JdbcTests"}, {"methodBody": ["METHOD_START", "{", "QueryResult   result    =    QueryResult . forResultSet ( metaData (  )  . getTables (  \" hive \"  ,    null ,    null ,    null )  )  ;", "QueryAssert . assertThat ( result )  . contains ( Row . row (  \" hive \"  ,     \" default \"  ,     \" nation \"  ,     \" TABLE \"  ,    null ,    null ,    null ,    null ,    null ,    null )  )  ;", "}", "METHOD_END"], "methodName": ["shouldGetTables"], "fileName": "com.facebook.presto.tests.jdbc.JdbcTests"}, {"methodBody": ["METHOD_START", "{", "String   tableNameInDatabase    =    mutableTablesState (  )  . get ( JdbcTests . TABLE _ NAME )  . getNameInDatabase (  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  (  \" SELECT    *    FROM    \"     +    tableNameInDatabase )  )  )  . hasNoRows (  )  ;", "try    ( Statement   statement    =    connection (  )  . createStatement (  )  )     {", "QueryAssert . assertThat ( statement . executeUpdate (  (  (  \" insert   into    \"     +    tableNameInDatabase )     +     \"    select    *    from   nation \"  )  )  )  . isEqualTo (  2  5  )  ;", "}", "QueryAssert . assertThat ( QueryExecutor . query (  (  \" SELECT    *    FROM    \"     +    tableNameInDatabase )  )  )  . matches ( TpchTableResults . PRESTO _ NATION _ RESULT )  ;", "}", "METHOD_END"], "methodName": ["shouldInsertSelectQuery"], "fileName": "com.facebook.presto.tests.jdbc.JdbcTests"}, {"methodBody": ["METHOD_START", "{", "if    ( JdbcDriverUtils . usingPrestoJdbcDriver ( connection (  )  )  )     {", "(  ( PrestoConnection )     ( connection (  )  )  )  . setLocale ( Locale . CHINESE )  ;", "try    ( Statement   statement    =    connection (  )  . createStatement (  )  )     {", "QueryResult   result    =    queryResult ( statement ,     \" SELECT   date _ format ( TIMESTAMP    '  2  0  0  1  -  0  1  -  0  9     0  9  :  0  4  '  ,     '  % M '  )  \"  )  ;", "QueryAssert . assertThat ( result )  . contains ( Row . row (  \"  \u00d2\u00bb  \u00d4\u00c2  \"  )  )  ;", "}", "} else    {", ". LOGGER . warn (  \" shouldSetLocale (  )    only   applies   to   PrestoJdbcDriver \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["shouldSetLocale"], "fileName": "com.facebook.presto.tests.jdbc.JdbcTests"}, {"methodBody": ["METHOD_START", "{", "String   timeZoneId    =     \" Indian / Kerguelen \"  ;", "if    ( JdbcDriverUtils . usingPrestoJdbcDriver ( connection (  )  )  )     {", "(  ( PrestoConnection )     ( connection (  )  )  )  . setTimeZoneId ( timeZoneId )  ;", "assertConnectionTimezone ( connection (  )  ,    timeZoneId )  ;", "} else", "if    ( JdbcDriverUtils . usingTeradataJdbcDriver ( connection (  )  )  )     {", "String   prestoJdbcURLTestTimeZone ;", "String   testTimeZone    =     (  \" TimeZoneID =  \"     +    timeZoneId )     +     \"  ;  \"  ;", "if    ( prestoJdbcURL . contains (  \" TimeZoneID =  \"  )  )     {", "prestoJdbcURLTestTimeZone    =    prestoJdbcURL . replaceFirst (  \" TimeZoneID =  [  \\  \\ w /  ]  *  ;  \"  ,    testTimeZone )  ;", "} else    {", "prestoJdbcURLTestTimeZone    =     (  ( prestoJdbcURL )     +     \"  ;  \"  )     +    testTimeZone ;", "}", "Connection   testConnection    =    getConnection ( prestoJdbcURLTestTimeZone ,    prestoJdbcUser ,    prestoJdbcPassword )  ;", "assertConnectionTimezone ( testConnection ,    timeZoneId )  ;", "} else    {", ". LOGGER . warn (  \" shouldSetTimezone (  )    only   applies   to   PrestoJdbcDriver \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["shouldSetTimezone"], "fileName": "com.facebook.presto.tests.jdbc.JdbcTests"}, {"methodBody": ["METHOD_START", "{", "final   String   distributedJoin    =     \" distributed _ join \"  ;", "QueryAssert . assertThat ( DriverUtils . getSessionProperty ( connection (  )  ,    distributedJoin )  )  . isEqualTo ( Boolean . TRUE . toString (  )  )  ;", "DriverUtils . setSessionProperty ( connection (  )  ,    distributedJoin ,    Boolean . FALSE . toString (  )  )  ;", "QueryAssert . assertThat ( DriverUtils . getSessionProperty ( connection (  )  ,    distributedJoin )  )  . isEqualTo ( Boolean . FALSE . toString (  )  )  ;", "DriverUtils . resetSessionProperty ( connection (  )  ,    distributedJoin )  ;", "QueryAssert . assertThat ( DriverUtils . getSessionProperty ( connection (  )  ,    distributedJoin )  )  . isEqualTo ( Boolean . TRUE . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSessionProperties"], "fileName": "com.facebook.presto.tests.jdbc.JdbcTests"}, {"methodBody": ["METHOD_START", "{", "if    ( JdbcDriverUtils . usingTeradataJdbcDriver ( connection (  )  )  )     {", "QueryAssert . assertThat ( QueryExecutor . query (  \" select    { fn   char (  4  0  )  }  \"  )  )  . containsExactly ( Row . row (  \"  (  \"  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  \" select    { fn   convert (  '  2  0  1  6  -  1  0  -  1  0  '  ,    SQL _ DATE )  }  \"  )  )  . containsExactly ( Row . row ( Date . valueOf (  \"  2  0  1  6  -  1  0  -  1  0  \"  )  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  \" select    { fn   convert (  '  1  2  3  4  .  5  6  7  '  ,    SQL _ DECIMAL )  }  \"  )  )  . containsExactly ( Row . row ( new   BigDecimal (  1  2  3  5  )  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  \" select    { fn   convert (  '  1  2  3  4  5  6  '  ,    SQL _ INTEGER )  }  \"  )  )  . containsExactly ( Row . row (  1  2  3  4  5  6  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  \" select    { fn   convert (  '  1  2  3 abcd '  ,    SQL _ VARBINARY )  }  \"  )  )  . containsExactly ( Row . row (  \"  1  2  3 abcd \"  . getBytes (  )  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  \" select    { fn   dayofmonth ( date    '  2  0  1  6  -  1  0  -  2  0  '  )  }  \"  )  )  . containsExactly ( Row . row (  2  0  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  \" select    { fn   dayofweek ( date    '  2  0  1  6  -  1  0  -  2  0  '  )  }  \"  )  )  . containsExactly ( Row . row (  5  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  \" select    { fn   dayofyear ( date    '  2  0  1  6  -  1  0  -  2  0  '  )  }  \"  )  )  . containsExactly ( Row . row (  2  9  4  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  \" select    { fn   ifnull (  { fn   ifnull ( null ,    null )  }  ,     '  2  '  )  }  \"  )  )  . containsExactly ( Row . row (  \"  2  \"  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  \" select    { fn   ifnull (  ' abc '  ,     '  2  '  )  }  \"  )  )  . containsExactly ( Row . row (  \" abc \"  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  \" select    { fn   ifnull ( null ,     '  2  '  )  }  \"  )  )  . containsExactly ( Row . row (  \"  2  \"  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  \" select    { fn   lcase (  ' ABC   def    1  2  3  '  )  }  \"  )  )  . containsExactly ( Row . row (  \" abc   def    1  2  3  \"  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  \" select    { fn   left (  ' abc   def '  ,     2  )  }  \"  )  )  . containsExactly ( Row . row (  \" ab \"  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  \" select    { fn   locate (  ' d '  ,     ' abc   def '  )  }  \"  )  )  . containsExactly ( Row . row (  5  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  \" select    { fn   log (  5  )  }  \"  )  )  . containsExactly ( Row . row (  1  .  6  0  9  4  3  7  9  1  2  4  3  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  \" select    { fn   right (  ' abc   def '  ,     2  )  }  \"  )  )  . containsExactly ( Row . row (  \" ef \"  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  \" select    { fn   substring (  ' abc   def '  ,     2  )  }  \"  )  )  . containsExactly ( Row . row (  \" bc   def \"  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  \" select    { fn   substring (  ' abc   def '  ,     2  ,     2  )  }  \"  )  )  . containsExactly ( Row . row (  \" bc \"  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  \" select    { fn   timestampadd ( SQL _ TSI _ DAY ,     2  1  ,    date    '  2  0  0  1  -  0  1  -  0  1  '  )  }  \"  )  )  . containsExactly ( Row . row ( Date . valueOf (  \"  2  0  0  1  -  0  1  -  2  2  \"  )  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  \" select    { fn   timestampdiff ( SQL _ TSI _ DAY , date    '  2  0  0  1  -  0  1  -  0  1  '  , date    '  2  0  0  2  -  0  1  -  0  1  '  )  }  \"  )  )  . containsExactly ( Row . row (  3  6  5  )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query (  \" select    { fn   ucase (  ' ABC   def    1  2  3  '  )  }  \"  )  )  . containsExactly ( Row . row (  \" ABC   DEF    1  2  3  \"  )  )  ;", "} else    {", ". LOGGER . warn (  \" testSqlEscapeFunctions (  )    only   applies   to   TeradataJdbcDriver \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["testSqlEscapeFunctions"], "fileName": "com.facebook.presto.tests.jdbc.JdbcTests"}, {"methodBody": ["METHOD_START", "{", "try    ( Connection   connection    =    getLdapConnection ( name ,    password )  )     {", "Statement   statement    =    connection . createStatement (  )  ;", "ResultSet   rs    =    statement . executeQuery ( query )  ;", "return   QueryResult . forResultSet ( rs )  ;", "}", "}", "METHOD_END"], "methodName": ["executeLdapQuery"], "fileName": "com.facebook.presto.tests.jdbc.LdapJdbcTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "executeLdapQuery (  . NATION _ SELECT _ ALL _ QUERY ,    user ,    password )  ;", "fail (  )  ;", "}    catch    ( SQLException   exception )     {", "assertEquals ( exception . getMessage (  )  ,    message )  ;", "}", "}", "METHOD_END"], "methodName": ["expectQueryToFail"], "fileName": "com.facebook.presto.tests.jdbc.LdapJdbcTests"}, {"methodBody": ["METHOD_START", "{", "return   DriverManager . getConnection ( getLdapUrl (  )  ,    name ,    password )  ;", "}", "METHOD_END"], "methodName": ["getLdapConnection"], "fileName": "com.facebook.presto.tests.jdbc.LdapJdbcTests"}, {"methodBody": ["METHOD_START", "{", "return   String . format ( getLdapUrlFormat (  )  ,    prestoServer (  )  ,    ldapTruststorePath ,    ldapTruststorePassword )  ;", "}", "METHOD_END"], "methodName": ["getLdapUrl"], "fileName": "com.facebook.presto.tests.jdbc.LdapJdbcTests"}, {"methodBody": ["METHOD_START", "{", "String   prefix    =     \" https :  /  /  \"  ;", "checkState ( Server . startsWith ( prefix )  ,     \" invalid   server   address :     % s \"  ,    Server )  ;", "return   Server . substring ( prefix . length (  )  )  ;", "}", "METHOD_END"], "methodName": ["prestoServer"], "fileName": "com.facebook.presto.tests.jdbc.LdapJdbcTests"}, {"methodBody": ["METHOD_START", "{", "expectQueryToFail ( user ,    ldapUserPassword ,    String . format (  \" Authentication   failed :    Access   Denied :    User    [  % s ]    not   a   member   of   the   authorized   group \"  ,    user )  )  ;", "}", "METHOD_END"], "methodName": ["expectQueryToFailForUserNotInGroup"], "fileName": "com.facebook.presto.tests.jdbc.LdapPrestoJdbcTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "String   url    =    String . format (  \" jdbc : presto :  /  /  % s ? SSL = true & SSLTrustStorePath =  % s & SSLTrustStorePassword =  % s \"  ,    prestoServer (  )  ,    ldapTruststorePath ,     \" wrong _ password \"  )  ;", "Connection   connection    =    DriverManager . getConnection ( url ,    ldapUserName ,    ldapUserPassword )  ;", "Statement   statement    =    connection . createStatement (  )  ;", "statement . executeQuery ( Ldap . NATION _ SELECT _ ALL _ QUERY )  ;", "fail (  )  ;", "}    catch    ( SQLException   exception )     {", "assertEquals ( exception . getMessage (  )  ,     \" Error   setting   up   SSL :    Keystore   was   tampered   with ,    or   password   was   incorrect \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["shouldFailForIncorrectTrustStore"], "fileName": "com.facebook.presto.tests.jdbc.LdapPrestoJdbcTests"}, {"methodBody": ["METHOD_START", "{", "expectQueryToFail (  \" UserWith : Colon \"  ,    ldapUserPassword ,     \" Illegal   character    '  :  '    found   in   username \"  )  ;", "}", "METHOD_END"], "methodName": ["shouldFailForUserWithColon"], "fileName": "com.facebook.presto.tests.jdbc.LdapPrestoJdbcTests"}, {"methodBody": ["METHOD_START", "{", "expectQueryToFail (  \"  \"  ,    ldapUserPassword ,     \" Connection   property    ' user '    value   is   empty \"  )  ;", "}", "METHOD_END"], "methodName": ["shouldFailQueryForEmptyUser"], "fileName": "com.facebook.presto.tests.jdbc.LdapPrestoJdbcTests"}, {"methodBody": ["METHOD_START", "{", "String   name    =    ImmutableLdapObjectDefinitions . CHILD _ GROUP _ USER . getAttributes (  )  . get (  \" cn \"  )  ;", "expectQueryToFailForUserNotInGroup ( name )  ;", "}", "METHOD_END"], "methodName": ["shouldFailQueryForLdapUserInChildGroup"], "fileName": "com.facebook.presto.tests.jdbc.LdapPrestoJdbcTests"}, {"methodBody": ["METHOD_START", "{", "String   name    =    ImmutableLdapObjectDefinitions . PARENT _ GROUP _ USER . getAttributes (  )  . get (  \" cn \"  )  ;", "expectQueryToFailForUserNotInGroup ( name )  ;", "}", "METHOD_END"], "methodName": ["shouldFailQueryForLdapUserInParentGroup"], "fileName": "com.facebook.presto.tests.jdbc.LdapPrestoJdbcTests"}, {"methodBody": ["METHOD_START", "{", "expectQueryToFail ( ldapUserName ,    null ,     \" Authentication   failed :    Unauthorized \"  )  ;", "}", "METHOD_END"], "methodName": ["shouldFailQueryForLdapWithoutPassword"], "fileName": "com.facebook.presto.tests.jdbc.LdapPrestoJdbcTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "DriverManager . getConnection (  (  \" jdbc :  :  /  /  \"     +     ( Server (  )  )  )  ,    ldapUserName ,    ldapUserPassword )  ;", "fail (  )  ;", "}    catch    ( SQLException   exception )     {", "assertEquals ( exception . getMessage (  )  ,     \" Authentication   using   username / password   requires   SSL   to   be   enabled \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["shouldFailQueryForLdapWithoutSsl"], "fileName": "com.facebook.presto.tests.jdbc.LdapPrestoJdbcTests"}, {"methodBody": ["METHOD_START", "{", "String   name    =    ImmutableLdapObjectDefinitions . ORPHAN _ USER . getAttributes (  )  . get (  \" cn \"  )  ;", "expectQueryToFailForUserNotInGroup ( name )  ;", "}", "METHOD_END"], "methodName": ["shouldFailQueryForOrphanLdapUser"], "fileName": "com.facebook.presto.tests.jdbc.LdapPrestoJdbcTests"}, {"methodBody": ["METHOD_START", "{", "expectQueryToFail ( ldapUserName ,     \" wrong _ password \"  ,     \" Authentication   failed :    Access   Denied :    Invalid   credentials \"  )  ;", "}", "METHOD_END"], "methodName": ["shouldFailQueryForWrongLdapPassword"], "fileName": "com.facebook.presto.tests.jdbc.LdapPrestoJdbcTests"}, {"methodBody": ["METHOD_START", "{", "expectQueryToFail (  \" invalid _ user \"  ,    ldapUserPassword ,     \" Authentication   failed :    Access   Denied :    Invalid   credentials \"  )  ;", "}", "METHOD_END"], "methodName": ["shouldFailQueryForWrongLdapUser"], "fileName": "com.facebook.presto.tests.jdbc.LdapPrestoJdbcTests"}, {"methodBody": ["METHOD_START", "{", "QueryAssert . assertThat ( executeLdapQuery ( LdapJdbcTests . NATION _ SELECT _ ALL _ QUERY ,    ldapUserName ,    ldapUserPassword )  )  . matches ( TpchTableResults . PRESTO _ NATION _ RESULT )  ;", "}", "METHOD_END"], "methodName": ["shouldRunQueryWithLdap"], "fileName": "com.facebook.presto.tests.jdbc.LdapPrestoJdbcTests"}, {"methodBody": ["METHOD_START", "{", "expectQueryToFail ( user ,    ldapUserPassword ,    LdapSimbaJdbcTests . UNAUTHORIZED _ USER _ ERROR )  ;", "}", "METHOD_END"], "methodName": ["expectQueryToFailForUserNotInGroup"], "fileName": "com.facebook.presto.tests.jdbc.LdapSimbaJdbcTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "String   url    =    String . format (  . JDBC _ URL _ FORMAT ,    prestoServer (  )  ,    ldapTruststorePath ,     \" wrong _ password \"  )  ;", "Connection   connection    =    DriverManager . getConnection ( url ,    ldapUserName ,    ldapUserPassword )  ;", "Statement   statement    =    connection . createStatement (  )  ;", "statement . executeQuery ( LdapJdbcTests . NATION _ SELECT _ ALL _ QUERY )  ;", "fail (  )  ;", "}    catch    ( SQLException   exception )     {", "assertEquals ( exception . getMessage (  )  ,     . SSL _ CERTIFICATE _ ERROR )  ;", "}", "}", "METHOD_END"], "methodName": ["shouldFailForIncorrectTrustStore"], "fileName": "com.facebook.presto.tests.jdbc.LdapSimbaJdbcTests"}, {"methodBody": ["METHOD_START", "{", "expectQueryToFail (  \" UserWith : Colon \"  ,    ldapUserPassword ,    LdapSimbaJdbcTests . MALFORMED _ CREDENTIALS _ ERROR )  ;", "}", "METHOD_END"], "methodName": ["shouldFailForUserWithColon"], "fileName": "com.facebook.presto.tests.jdbc.LdapSimbaJdbcTests"}, {"methodBody": ["METHOD_START", "{", "expectQueryToFail (  \"  \"  ,    ldapUserPassword ,    LdapSimbaJdbcTests . MALFORMED _ CREDENTIALS _ ERROR )  ;", "}", "METHOD_END"], "methodName": ["shouldFailQueryForEmptyUser"], "fileName": "com.facebook.presto.tests.jdbc.LdapSimbaJdbcTests"}, {"methodBody": ["METHOD_START", "{", "String   name    =    ImmutableLdapObjectDefinitions . CHILD _ GROUP _ USER . getAttributes (  )  . get (  \" cn \"  )  ;", "expectQueryToFailForUserNotInGroup ( name )  ;", "}", "METHOD_END"], "methodName": ["shouldFailQueryForLdapUserInChildGroup"], "fileName": "com.facebook.presto.tests.jdbc.LdapSimbaJdbcTests"}, {"methodBody": ["METHOD_START", "{", "String   name    =    ImmutableLdapObjectDefinitions . PARENT _ GROUP _ USER . getAttributes (  )  . get (  \" cn \"  )  ;", "expectQueryToFailForUserNotInGroup ( name )  ;", "}", "METHOD_END"], "methodName": ["shouldFailQueryForLdapUserInParentGroup"], "fileName": "com.facebook.presto.tests.jdbc.LdapSimbaJdbcTests"}, {"methodBody": ["METHOD_START", "{", "expectQueryToFail ( ldapUserName ,     \"  \"  ,    LdapSimbaJdbcTests . MALFORMED _ CREDENTIALS _ ERROR )  ;", "}", "METHOD_END"], "methodName": ["shouldFailQueryForLdapWithoutPassword"], "fileName": "com.facebook.presto.tests.jdbc.LdapSimbaJdbcTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "DriverManager . getConnection (  (  ( getLdapUrl (  )  )     +     \"  ; SSL =  0  \"  )  ,    ldapUserName ,    ldapUserPassword )  ;", "fail (  )  ;", "}    catch    ( SQLException   exception )     {", "assertEquals ( exception . getMessage (  )  ,     . INVALID _ SSL _ PROPERTY )  ;", "}", "}", "METHOD_END"], "methodName": ["shouldFailQueryForLdapWithoutSsl"], "fileName": "com.facebook.presto.tests.jdbc.LdapSimbaJdbcTests"}, {"methodBody": ["METHOD_START", "{", "String   name    =    ImmutableLdapObjectDefinitions . ORPHAN _ USER . getAttributes (  )  . get (  \" cn \"  )  ;", "expectQueryToFailForUserNotInGroup ( name )  ;", "}", "METHOD_END"], "methodName": ["shouldFailQueryForOrphanLdapUser"], "fileName": "com.facebook.presto.tests.jdbc.LdapSimbaJdbcTests"}, {"methodBody": ["METHOD_START", "{", "expectQueryToFail ( ldapUserName ,     \" wrong _ password \"  ,    LdapSimbaJdbcTests . INVALID _ CREDENTIALS _ ERROR )  ;", "}", "METHOD_END"], "methodName": ["shouldFailQueryForWrongLdapPassword"], "fileName": "com.facebook.presto.tests.jdbc.LdapSimbaJdbcTests"}, {"methodBody": ["METHOD_START", "{", "expectQueryToFail (  \" invalid _ user \"  ,    ldapUserPassword ,    LdapSimbaJdbcTests . INVALID _ CREDENTIALS _ ERROR )  ;", "}", "METHOD_END"], "methodName": ["shouldFailQueryForWrongLdapUser"], "fileName": "com.facebook.presto.tests.jdbc.LdapSimbaJdbcTests"}, {"methodBody": ["METHOD_START", "{", "QueryAssert . assertThat ( executeLdapQuery ( LdapJdbcTests . NATION _ SELECT _ ALL _ QUERY ,    ldapUserName ,    ldapUserPassword )  )  . matches ( TpchTableResults . PRESTO _ NATION _ RESULT )  ;", "}", "METHOD_END"], "methodName": ["shouldRunQueryWithLdap"], "fileName": "com.facebook.presto.tests.jdbc.LdapSimbaJdbcTests"}, {"methodBody": ["METHOD_START", "{", "QueryAssert . assertThat ( queryResult )  . hasColumns ( JDBCType . TINYINT ,    JDBCType . SMALLINT ,    JDBCType . INTEGER ,    JDBCType . BIGINT ,    JDBCType . REAL ,    JDBCType . DOUBLE ,    JDBCType . DECIMAL ,    JDBCType . DECIMAL ,    JDBCType . TIMESTAMP ,    JDBCType . DATE ,    JDBCType . VARCHAR ,    JDBCType . VARCHAR ,    JDBCType . CHAR ,    JDBCType . BOOLEAN ,    JDBCType . VARBINARY )  ;", "}", "METHOD_END"], "methodName": ["assertColumnTypes"], "fileName": "com.facebook.presto.tests.jdbc.PreparedStatements"}, {"methodBody": ["METHOD_START", "{", "return   QueryExecutor . defaultQueryExecutor (  )  . getConnection (  )  ;", "}", "METHOD_END"], "methodName": ["connection"], "fileName": "com.facebook.presto.tests.jdbc.PreparedStatements"}, {"methodBody": ["METHOD_START", "{", "if    ( JdbcDriverUtils . usingTeradataJdbcDriver ( connection (  )  )  )     {", "String   tableNameInDatabase    =    mutableTablesState (  )  . get (  . TABLE _ NAME _ MUTABLE )  . getNameInDatabase (  )  ;", "String   insertSqlWithTable    =    String . format (  . INSERT _ SQL ,    tableNameInDatabase )  ;", "String   selectSqlWithTable    =    String . format (  . SELECT _ STAR _ SQL ,    tableNameInDatabase )  ;", "QueryExecutor . query ( insertSqlWithTable ,    QueryExecutor . param ( JDBCType . TINYINT ,     1  2  7  )  ,    QueryExecutor . param ( JDBCType . SMALLINT ,     3  2  7  6  7  )  ,    QueryExecutor . param ( JDBCType . INTEGER ,     2  1  4  7  4  8  3  6  4  7  )  ,    QueryExecutor . param ( JDBCType . BIGINT ,    new   BigInteger (  \"  9  2  2  3  3  7  2  0  3  6  8  5  4  7  7  5  8  0  7  \"  )  )  ,    QueryExecutor . param ( JDBCType . FLOAT ,    Float . valueOf (  \"  1  2  3  .  3  4  5  \"  )  )  ,    QueryExecutor . param ( JDBCType . DOUBLE ,     2  3  4  .  5  6  7  )  ,    QueryExecutor . param ( JDBCType . DECIMAL ,    BigDecimal . valueOf (  3  4  5  )  )  ,    QueryExecutor . param ( JDBCType . DECIMAL ,    BigDecimal . valueOf (  3  4  5  .  6  7  8  )  )  ,    QueryExecutor . param ( JDBCType . TIMESTAMP ,    Timestamp . valueOf (  \"  2  0  1  5  -  0  5  -  1  0     1  2  :  1  5  :  3  5  \"  )  )  ,    QueryExecutor . param ( JDBCType . DATE ,    Date . valueOf (  \"  2  0  1  5  -  0  5  -  1  0  \"  )  )  ,    QueryExecutor . param ( JDBCType . VARCHAR ,     \" ala   ma   kota \"  )  ,    QueryExecutor . param ( JDBCType . VARCHAR ,     \" ala   ma   kot \"  )  ,    QueryExecutor . param ( JDBCType . CHAR ,     \"             ala   ma \"  )  ,    QueryExecutor . param ( JDBCType . BOOLEAN ,    Boolean . TRUE )  ,    QueryExecutor . param ( JDBCType . VARBINARY ,    null )  )  ;", "QueryExecutor . query ( insertSqlWithTable ,    QueryExecutor . param ( JDBCType . TINYINT ,     1  )  ,    QueryExecutor . param ( JDBCType . SMALLINT ,     2  )  ,    QueryExecutor . param ( JDBCType . INTEGER ,     3  )  ,    QueryExecutor . param ( JDBCType . BIGINT ,     4  )  ,    QueryExecutor . param ( JDBCType . FLOAT ,    Float . valueOf (  \"  5  .  6  \"  )  )  ,    QueryExecutor . param ( JDBCType . DOUBLE ,     7  .  8  )  ,    QueryExecutor . param ( JDBCType . DECIMAL ,    BigDecimal . valueOf (  9  1  )  )  ,    QueryExecutor . param ( JDBCType . DECIMAL ,    BigDecimal . valueOf (  2  .  3  )  )  ,    QueryExecutor . param ( JDBCType . TIMESTAMP ,    Timestamp . valueOf (  \"  2  0  1  2  -  0  5  -  1  0     1  :  3  5  :  1  5  \"  )  )  ,    QueryExecutor . param ( JDBCType . DATE ,    Date . valueOf (  \"  2  0  1  4  -  0  3  -  1  0  \"  )  )  ,    QueryExecutor . param ( JDBCType . VARCHAR ,     \" abc \"  )  ,    QueryExecutor . param ( JDBCType . VARCHAR ,     \" def \"  )  ,    QueryExecutor . param ( JDBCType . CHAR ,     \"                      ghi \"  )  ,    QueryExecutor . param ( JDBCType . BOOLEAN ,    Boolean . FALSE )  ,    QueryExecutor . param ( JDBCType . VARBINARY ,    null )  )  ;", "QueryExecutor . query ( insertSqlWithTable ,    QueryExecutor . param ( JDBCType . TINYINT ,    null )  ,    QueryExecutor . param ( JDBCType . SMALLINT ,    null )  ,    QueryExecutor . param ( JDBCType . INTEGER ,    null )  ,    QueryExecutor . param ( JDBCType . BIGINT ,    null )  ,    QueryExecutor . param ( JDBCType . FLOAT ,    null )  ,    QueryExecutor . param ( JDBCType . DOUBLE ,    null )  ,    QueryExecutor . param ( JDBCType . DECIMAL ,    null )  ,    QueryExecutor . param ( JDBCType . DECIMAL ,    null )  ,    QueryExecutor . param ( JDBCType . TIMESTAMP ,    null )  ,    QueryExecutor . param ( JDBCType . DATE ,    null )  ,    QueryExecutor . param ( JDBCType . VARCHAR ,    null )  ,    QueryExecutor . param ( JDBCType . VARCHAR ,    null )  ,    QueryExecutor . param ( JDBCType . CHAR ,    null )  ,    QueryExecutor . param ( JDBCType . BOOLEAN ,    null )  ,    QueryExecutor . param ( JDBCType . VARBINARY ,    null )  )  ;", "QueryResult   result    =    QueryExecutor . query ( selectSqlWithTable )  ;", "assertColumnTypes ( result )  ;", "QueryAssert . assertThat ( result )  . containsOnly ( Row . row (  1  2  7  ,     3  2  7  6  7  ,     2  1  4  7  4  8  3  6  4  7  ,    new   Long (  \"  9  2  2  3  3  7  2  0  3  6  8  5  4  7  7  5  8  0  7  \"  )  ,    Float . valueOf (  \"  1  2  3  .  3  4  5  \"  )  ,     2  3  4  .  5  6  7  ,    BigDecimal . valueOf (  3  4  5  )  ,    new   BigDecimal (  \"  3  4  5  .  6  7  8  0  0  \"  )  ,    Timestamp . valueOf (  \"  2  0  1  5  -  0  5  -  1  0     1  2  :  1  5  :  3  5  \"  )  ,    Date . valueOf (  \"  2  0  1  5  -  0  5  -  1  0  \"  )  ,     \" ala   ma   kota \"  ,     \" ala   ma   kot \"  ,     \"             ala   ma \"  ,    Boolean . TRUE ,    null )  ,    Row . row (  1  ,     2  ,     3  ,     4 L ,    Float . valueOf (  \"  5  .  6  \"  )  ,     7  .  8  ,    BigDecimal . valueOf (  9  1  )  ,    BigDecimal . valueOf (  2  .  3  )  ,    Timestamp . valueOf (  \"  2  0  1  2  -  0  5  -  1  0     1  :  3  5  :  1  5  \"  )  ,    Date . valueOf (  \"  2  0  1  4  -  0  3  -  1  0  \"  )  ,     \" abc \"  ,     \" def \"  ,     \"                      ghi \"  ,    Boolean . FALSE ,    null )  ,    Row . row ( null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null )  )  ;", "} else    {", ". LOGGER . warn (  \" preparedInsertApi (  )    only   applies   to   TeradataJdbcDriver \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["preparedInsertApi"], "fileName": "com.facebook.presto.tests.jdbc.PreparedStatements"}, {"methodBody": ["METHOD_START", "{", "if    ( JdbcDriverUtils . usingTeradataJdbcDriver ( connection (  )  )  )     {", "String   tableNameInDatabase    =    mutableTablesState (  )  . get (  . TABLE _ NAME _ MUTABLE )  . getNameInDatabase (  )  ;", "String   insertSqlWithTable    =     \" PREPARE   ps 1    from    \"     +     ( String . format (  . INSERT _ SQL ,    tableNameInDatabase )  )  ;", "String   selectSqlWithTable    =    String . format (  . SELECT _ STAR _ SQL ,    tableNameInDatabase )  ;", "String   executeSql    =     \" EXECUTE   ps 1    using    \"  ;", "Statement   statement    =    connection (  )  . createStatement (  )  ;", "statement . execute ( insertSqlWithTable )  ;", "statement . execute (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  ( executeSql    +     \" cast (  1  2  7    as   tinyint )  ,     \"  )     +     \" cast (  3  2  7  6  7    as   smallint )  ,     \"  )     +     \"  2  1  4  7  4  8  3  6  4  7  ,     \"  )     +     \"  9  2  2  3  3  7  2  0  3  6  8  5  4  7  7  5  8  0  7  ,     \"  )     +     \" cast (  1  2  3  .  3  4  5    as   real )  ,     \"  )     +     \" cast (  2  3  4  .  5  6  7    as   double )  ,     \"  )     +     \" cast (  3  4  5    as   decimal (  1  0  )  )  ,     \"  )     +     \" cast (  3  4  5  .  6  7  8    as   decimal (  1  0  ,  5  )  )  ,     \"  )     +     \" timestamp    '  2  0  1  5  -  0  5  -  1  0     1  2  :  1  5  :  3  5  '  ,     \"  )     +     \" date    '  2  0  1  5  -  0  5  -  1  0  '  ,     \"  )     +     \"  ' ala   ma   kota '  ,     \"  )     +     \"  ' ala   ma   kot '  ,     \"  )     +     \" cast (  ' ala   ma '    as   char (  1  0  )  )  ,     \"  )     +     \" true ,     \"  )     +     \" varbinary    ' a 2  9  0 IGJpbmFybnk =  '  \"  )  )  ;", "statement . execute (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  ( executeSql    +     \" cast (  1    as   tinyint )  ,     \"  )     +     \" cast (  2    as   smallint )  ,     \"  )     +     \"  3  ,     \"  )     +     \"  4  ,     \"  )     +     \" cast (  5  .  6    as   real )  ,     \"  )     +     \" cast (  7  .  8    as   double )  ,     \"  )     +     \" cast (  9    as   decimal (  1  0  )  )  ,     \"  )     +     \" cast (  2  .  3    as   decimal (  1  0  ,  5  )  )  ,     \"  )     +     \" timestamp    '  2  0  1  2  -  0  5  -  1  0     1  :  3  5  :  1  5  '  ,     \"  )     +     \" date    '  2  0  1  4  -  0  3  -  1  0  '  ,     \"  )     +     \"  ' abc '  ,     \"  )     +     \"  ' def '  ,     \"  )     +     \" cast (  ' ghi '    as   char (  1  0  )  )  ,     \"  )     +     \" false ,     \"  )     +     \" varbinary    ' jkl '  \"  )  )  ;", "statement . execute (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  ( executeSql    +     \" null ,     \"  )     +     \" null ,     \"  )     +     \" null ,     \"  )     +     \" null ,     \"  )     +     \" null ,     \"  )     +     \" null ,     \"  )     +     \" null ,     \"  )     +     \" null ,     \"  )     +     \" null ,     \"  )     +     \" null ,     \"  )     +     \" null ,     \"  )     +     \" null ,     \"  )     +     \" null ,     \"  )     +     \" null ,     \"  )     +     \" null \"  )  )  ;", "QueryResult   result    =    QueryExecutor . query ( selectSqlWithTable )  ;", "assertColumnTypes ( result )  ;", "QueryAssert . assertThat ( result )  . containsOnly ( Row . row (  1  2  7  ,     3  2  7  6  7  ,     2  1  4  7  4  8  3  6  4  7  ,    new   Long (  \"  9  2  2  3  3  7  2  0  3  6  8  5  4  7  7  5  8  0  7  \"  )  ,    Float . valueOf (  \"  1  2  3  .  3  4  5  \"  )  ,     2  3  4  .  5  6  7  ,    BigDecimal . valueOf (  3  4  5  )  ,    new   BigDecimal (  \"  3  4  5  .  6  7  8  0  0  \"  )  ,    Timestamp . valueOf (  \"  2  0  1  5  -  0  5  -  1  0     1  2  :  1  5  :  3  5  \"  )  ,    Date . valueOf (  \"  2  0  1  5  -  0  5  -  1  0  \"  )  ,     \" ala   ma   kota \"  ,     \" ala   ma   kot \"  ,     \" ala   ma             \"  ,    Boolean . TRUE ,     \" a 2  9  0 IGJpbmFybnk =  \"  . getBytes (  )  )  ,    Row . row (  1  ,     2  ,     3  ,     4  ,    Float . valueOf (  \"  5  .  6  \"  )  ,     7  .  8  ,    BigDecimal . valueOf (  9  )  ,    new   BigDecimal (  \"  2  .  3  0  0  0  0  \"  )  ,    Timestamp . valueOf (  \"  2  0  1  2  -  0  5  -  1  0     1  :  3  5  :  1  5  \"  )  ,    Date . valueOf (  \"  2  0  1  4  -  0  3  -  1  0  \"  )  ,     \" abc \"  ,     \" def \"  ,     \" ghi                      \"  ,    Boolean . FALSE ,     \" jkl \"  . getBytes (  )  )  ,    Row . row ( null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null )  )  ;", "} else    {", ". LOGGER . warn (  \" preparedInsertSql (  )    only   applies   to   TeradataJdbcDriver \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["preparedInsertSql"], "fileName": "com.facebook.presto.tests.jdbc.PreparedStatements"}, {"methodBody": ["METHOD_START", "{", "if    ( JdbcDriverUtils . usingTeradataJdbcDriver ( connection (  )  )  )     {", "String   tableNameInDatabase    =    mutableTablesState (  )  . get (  . TABLE _ NAME _ MUTABLE )  . getNameInDatabase (  )  ;", "String   insertSqlWithTable    =    String . format (  . INSERT _ SQL ,    tableNameInDatabase )  ;", "String   selectSqlWithTable    =    String . format (  . SELECT _ STAR _ SQL ,    tableNameInDatabase )  ;", "QueryExecutor . defaultQueryExecutor (  )  . executeQuery ( insertSqlWithTable ,    QueryExecutor . param ( JDBCType . TINYINT ,    null )  ,    QueryExecutor . param ( JDBCType . SMALLINT ,    null )  ,    QueryExecutor . param ( JDBCType . INTEGER ,    null )  ,    QueryExecutor . param ( JDBCType . BIGINT ,    null )  ,    QueryExecutor . param ( JDBCType . FLOAT ,    null )  ,    QueryExecutor . param ( JDBCType . DOUBLE ,    null )  ,    QueryExecutor . param ( JDBCType . DECIMAL ,    null )  ,    QueryExecutor . param ( JDBCType . DECIMAL ,    null )  ,    QueryExecutor . param ( JDBCType . TIMESTAMP ,    null )  ,    QueryExecutor . param ( JDBCType . DATE ,    null )  ,    QueryExecutor . param ( JDBCType . VARCHAR ,    null )  ,    QueryExecutor . param ( JDBCType . VARCHAR ,    null )  ,    QueryExecutor . param ( JDBCType . CHAR ,    null )  ,    QueryExecutor . param ( JDBCType . BOOLEAN ,    null )  ,    QueryExecutor . param ( JDBCType . VARBINARY ,     \" a 2  9  0 IGJpbmFybnk =  \"  . getBytes (  )  )  )  ;", "QueryResult   result    =    QueryExecutor . defaultQueryExecutor (  )  . executeQuery ( selectSqlWithTable )  ;", "assertColumnTypes ( result )  ;", "QueryAssert . assertThat ( result )  . containsOnly ( Row . row ( null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,     \" a 2  9  0 IGJpbmFybnk =  \"  . getBytes (  )  )  )  ;", "} else    {", ". LOGGER . warn (  \" preparedInsertVarbinaryApi (  )    only   applies   to   TeradataJdbcDriver \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["preparedInsertVarbinaryApi"], "fileName": "com.facebook.presto.tests.jdbc.PreparedStatements"}, {"methodBody": ["METHOD_START", "{", "if    ( JdbcDriverUtils . usingTeradataJdbcDriver ( connection (  )  )  )     {", "String   tableNameInDatabase    =    mutableTablesState (  )  . get (  . TABLE _ NAME _ MUTABLE )  . getNameInDatabase (  )  ;", "String   insertSqlWithTable    =     \" PREPARE   ps 1    from    \"     +     ( String . format (  . INSERT _ SQL ,    tableNameInDatabase )  )  ;", "String   selectSqlWithTable    =    String . format (  . SELECT _ STAR _ SQL ,    tableNameInDatabase )  ;", "String   executeSql    =     \" EXECUTE   ps 1    using    \"  ;", "Statement   statement    =    connection (  )  . createStatement (  )  ;", "statement . execute ( insertSqlWithTable )  ;", "statement . execute (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  ( executeSql    +     \" null ,     \"  )     +     \" null ,     \"  )     +     \" null ,     \"  )     +     \" null ,     \"  )     +     \" null ,     \"  )     +     \" null ,     \"  )     +     \" null ,     \"  )     +     \" null ,     \"  )     +     \" null ,     \"  )     +     \" null ,     \"  )     +     \" null ,     \"  )     +     \" null ,     \"  )     +     \" null ,     \"  )     +     \" null ,     \"  )     +     \" varbinary    ' a 2  9  0 IGJpbmFybnk =  '  \"  )  )  ;", "QueryResult   result    =    QueryExecutor . query ( selectSqlWithTable )  ;", "assertColumnTypes ( result )  ;", "QueryAssert . assertThat ( result )  . containsOnly ( Row . row ( null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,     \" a 2  9  0 IGJpbmFybnk =  \"  . getBytes (  )  )  )  ;", "} else    {", ". LOGGER . warn (  \" preparedInsertVarbinarySql (  )    only   applies   to   TeradataJdbcDriver \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["preparedInsertVarbinarySql"], "fileName": "com.facebook.presto.tests.jdbc.PreparedStatements"}, {"methodBody": ["METHOD_START", "{", "if    ( JdbcDriverUtils . usingTeradataJdbcDriver ( connection (  )  )  )     {", "String   selectSql    =     (  \" SELECT   c _ int   FROM    \"     +     (  . TABLE _ NAME )  )     +     \"    WHERE   c _ int    =     ?  \"  ;", "final   int   testValue    =     2  1  4  7  4  8  3  6  4  7  ;", "QueryAssert . assertThat ( QueryExecutor . query ( selectSql ,    QueryExecutor . param ( JDBCType . INTEGER ,    testValue )  )  )  . containsOnly ( Row . row ( testValue )  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( selectSql ,    QueryExecutor . param ( JDBCType . INTEGER ,    null )  )  )  . hasNoRows (  )  ;", "QueryAssert . assertThat ( QueryExecutor . query ( selectSql ,    QueryExecutor . param ( JDBCType . INTEGER ,     2  )  )  )  . hasNoRows (  )  ;", "} else    {", ". LOGGER . warn (  \" preparedSelectApi (  )    only   applies   to   TeradataJdbcDriver \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["preparedSelectApi"], "fileName": "com.facebook.presto.tests.jdbc.PreparedStatements"}, {"methodBody": ["METHOD_START", "{", "if    ( JdbcDriverUtils . usingTeradataJdbcDriver ( connection (  )  )  )     {", "String   prepareSql    =     (  \" PREPARE   ps 1    from   SELECT   c _ int   FROM    \"     +     (  . TABLE _ NAME )  )     +     \"    WHERE   c _ int    =     ?  \"  ;", "final   int   testValue    =     2  1  4  7  4  8  3  6  4  7  ;", "String   executeSql    =     \" EXECUTE   ps 1    using    \"  ;", "Statement   statement    =    connection (  )  . createStatement (  )  ;", "statement . execute ( prepareSql )  ;", "QueryAssert . assertThat ( QueryResult . forResultSet ( statement . executeQuery (  ( executeSql    +    testValue )  )  )  )  . containsOnly ( Row . row ( testValue )  )  ;", "QueryAssert . assertThat ( QueryResult . forResultSet ( statement . executeQuery (  ( executeSql    +     \" NULL \"  )  )  )  )  . hasNoRows (  )  ;", "QueryAssert . assertThat ( QueryResult . forResultSet ( statement . executeQuery (  ( executeSql    +     2  )  )  )  )  . hasNoRows (  )  ;", "} else    {", ". LOGGER . warn (  \" preparedSelectSql (  )    only   applies   to   TeradataJdbcDriver \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["preparedSelectSql"], "fileName": "com.facebook.presto.tests.jdbc.PreparedStatements"}, {"methodBody": ["METHOD_START", "{", "try    {", "QueryExecutors . onMySql (  )  . executeQuery ( String . format (  \" DROP   TABLE   IF   EXISTS    % s \"  ,     . TABLE _ NAME )  )  ;", "}    catch    ( Exception   e )     {", "Logger . get ( getClass (  )  )  . warn ( e ,     \" failed   to   drop   table \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["dropTestTable"], "fileName": "com.facebook.presto.tests.mysql.CreateTableAsSelect"}, {"methodBody": ["METHOD_START", "{", "QueryResult   queryResult    =    QueryExecutor . query ( String . format (  \" CREATE   TABLE   mysql .  % s   AS   SELECT    *    FROM   nation \"  ,    CreateTableAsSelect . TABLE _ NAME )  )  ;", "QueryAssert . assertThat ( queryResult )  . containsOnly ( Row . row (  2  5  )  )  ;", "}", "METHOD_END"], "methodName": ["testCreateTableAsSelect"], "fileName": "com.facebook.presto.tests.mysql.CreateTableAsSelect"}, {"methodBody": ["METHOD_START", "{", "httpResponse    =    new   io . airlift . http . client . testing . TestingResponse ( statusCode ,    ImmutableListMultimap . of (  )  ,    new   byte [  0  ]  )  ;", "}", "METHOD_END"], "methodName": ["mockErrorHttpResponse"], "fileName": "com.facebook.presto.tests.querystats.TestHttpQueryStatsClient"}, {"methodBody": ["METHOD_START", "{", "httpResponse    =    new   io . airlift . http . client . testing . TestingResponse ( HttpStatus . OK ,    ImmutableListMultimap . of (  )  ,    answerJson . getBytes (  )  )  ;", "}", "METHOD_END"], "methodName": ["mockHttpResponse"], "fileName": "com.facebook.presto.tests.querystats.TestHttpQueryStatsClient"}, {"methodBody": ["METHOD_START", "{", "try    {", "URL   ourceUrl    =    Resources . getResource ( ourcePath )  ;", "return   Resources . toString ( ourceUrl ,    StandardCharsets . UTF _  8  )  ;", "}    catch    ( IOException   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["resourceAsString"], "fileName": "com.facebook.presto.tests.querystats.TestHttpQueryStatsClient"}, {"methodBody": ["METHOD_START", "{", "ObjectMapper   objectMapper    =    new   ObjectMapperProvider (  )  . get (  )  ;", "TestingHttpClient   httpClient    =    new   TestingHttpClient (  (    httpRequest )     -  >    httpResponse )  ;", "this . queryStatsClient    =    new   HttpQueryStatsClient ( httpClient ,    objectMapper ,     . BASE _ URL )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.tests.querystats.TestHttpQueryStatsClient"}, {"methodBody": ["METHOD_START", "{", "mockHttpResponse ( TestHttpQueryStatsClient . SINGLE _ QUERY _ INFO )  ;", "Optional < QueryStats >    infoForQuery    =    queryStatsClient . getQueryStats (  \"  2  0  1  5  0  5  0  5  _  1  6  0  1  1  6  _  0  0  0  0  5  _ sdzex \"  )  ;", "assertThat ( infoForQuery )  . isPresent (  )  ;", "assertThat ( infoForQuery . get (  )  . getTotalCpuTime (  )  . getValue (  )  )  . isEqualTo (  1  .  1  9  )  ;", "}", "METHOD_END"], "methodName": ["testGetInfoForQuery"], "fileName": "com.facebook.presto.tests.querystats.TestHttpQueryStatsClient"}, {"methodBody": ["METHOD_START", "{", "mockErrorHttpResponse ( GONE )  ;", "Optional < QueryStats >    infoForQuery    =    q . getQueryStats (  \"  2  0  1  5  0  5  0  5  _  1  6  0  1  1  6  _  0  0  0  0  5  _ sdzex \"  )  ;", "assertThat ( infoForQuery )  . isEmpty (  )  ;", "}", "METHOD_END"], "methodName": ["testGetInfoForUnknownQuery"], "fileName": "com.facebook.presto.tests.querystats.TestHttpQueryStatsClient"}, {"methodBody": ["METHOD_START", "{", "try    {", "QueryExecutors . onPresto (  )  . executeQuery ( String . format (  \" DROP   TABLE   IF   EXISTS    % s \"  ,     . INSERT _ TABLE _ NAME )  )  ;", "}    catch    ( Exception   e )     {", "Logger . get ( getClass (  )  )  . warn ( e ,     \" failed   to   drop   table \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["dropTestTables"], "fileName": "com.facebook.presto.tests.sqlserver.Insert"}, {"methodBody": ["METHOD_START", "{", "String   sql    =    String . format (  (  \" INSERT   INTO    % s .  % s   values    ( BIGINT    '  % s '  ,    SMALLINT    '  % s '  ,    INTEGER    '  % s '  ,    DOUBLE    '  % s '  ,     \"     +     \" CHAR    ' aaaa '  ,     ' aaaaaa '  ,    DOUBLE    '  % s '  ,    DATE    '  % s '     )  \"  )  ,    Insert . SQLSERVER ,    Insert . INSERT _ TABLE _ NAME ,    Long . MAX _ VALUE ,    Short . MAX _ VALUE ,    Integer . MAX _ VALUE ,    Double . MAX _ VALUE ,    Double . valueOf (  \"  1  2  3  4  5  6  7  8  9  1  2  .  3  4  5  6  7  5  6  \"  )  ,    Date . valueOf (  \"  9  9  9  9  -  1  2  -  3  1  \"  )  )  ;", "QueryExecutors . onPresto (  )  . executeQuery ( sql )  ;", "sql    =    String . format (  \" SELECT    *    FROM    % s .  % s \"  ,    Insert . MASTER ,    Insert . INSERT _ TABLE _ NAME )  ;", "QueryResult   queryResult    =    QueryExecutors . onSqlServer (  )  . executeQuery ( sql )  ;", "QueryAssert . assertThat ( queryResult )  . contains ( Row . row ( Long . MAX _ VALUE ,    Short . MAX _ VALUE ,    Integer . MAX _ VALUE ,    Double . MAX _ VALUE ,     \" aaaa \"  ,     \" aaaaaa \"  ,    Double . valueOf (  \"  1  2  3  4  5  6  7  8  9  1  2  .  3  4  5  6  7  5  6  \"  )  ,    Date . valueOf (  \"  9  9  9  9  -  1  2  -  3  1  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testInsertMax"], "fileName": "com.facebook.presto.tests.sqlserver.Insert"}, {"methodBody": ["METHOD_START", "{", "String   sql    =    String . format (  (  \" INSERT   INTO    % s .  % s   values    ( BIGINT    '  % s '  ,    SMALLINT    '  % s '  ,    INTEGER    '  % s '  ,    DOUBLE    '  % s '  ,     \"     +     \" CHAR    ' a          '  ,     ' aa '  ,    DOUBLE    '  % s '  ,    DATE    '  % s '  )  \"  )  ,    Insert . SQLSERVER ,    Insert . INSERT _ TABLE _ NAME ,    Long . valueOf (  \"  -  9  2  2  3  3  7  2  0  3  6  8  5  4  7  7  5  8  0  7  \"  )  ,    Short . MIN _ VALUE ,    Integer . MIN _ VALUE ,    Double . MIN _ VALUE ,    Double . MIN _ VALUE ,    Date . valueOf (  \"  1  9  7  0  -  0  1  -  0  1  \"  )  )  ;", "QueryExecutors . onPresto (  )  . executeQuery ( sql )  ;", "sql    =    String . format (  \" SELECT    *    FROM    % s .  % s \"  ,    Insert . MASTER ,    Insert . INSERT _ TABLE _ NAME )  ;", "QueryResult   queryResult    =    QueryExecutors . onSqlServer (  )  . executeQuery ( sql )  ;", "QueryAssert . assertThat ( queryResult )  . contains ( Row . row ( Long . valueOf (  \"  -  9  2  2  3  3  7  2  0  3  6  8  5  4  7  7  5  8  0  7  \"  )  ,    Short . MIN _ VALUE ,    Integer . MIN _ VALUE ,    Double . MIN _ VALUE ,     \" a          \"  ,     \" aa \"  ,    Double . MIN _ VALUE ,    Date . valueOf (  \"  1  9  7  0  -  0  1  -  0  1  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testInsertMin"], "fileName": "com.facebook.presto.tests.sqlserver.Insert"}, {"methodBody": ["METHOD_START", "{", "String   sql    =    String . format (  \" INSERT   INTO    % s .  % s   values    ( null ,    null ,    null ,    null ,    null ,    null ,    null ,    null )  \"  ,    Insert . SQLSERVER ,    Insert . INSERT _ TABLE _ NAME )  ;", "QueryExecutors . onPresto (  )  . executeQuery ( sql )  ;", "sql    =    String . format (  \" SELECT    *    FROM    % s .  % s \"  ,    Insert . MASTER ,    Insert . INSERT _ TABLE _ NAME )  ;", "QueryResult   queryResult    =    QueryExecutors . onSqlServer (  )  . executeQuery ( sql )  ;", "QueryAssert . assertThat ( queryResult )  . contains ( Row . row ( null ,    null ,    null ,    null ,    null ,    null ,    null ,    null )  )  ;", "}", "METHOD_END"], "methodName": ["testInsertNull"], "fileName": "com.facebook.presto.tests.sqlserver.Insert"}, {"methodBody": ["METHOD_START", "{", "String   tableName    =    String . format (  \"  % s .  % s .  % s \"  ,    TestConstants . CONNECTOR _ NAME ,    TestConstants . KEY _ SPACE ,    SqlServerTpchTableDefinitions . NATION . getName (  )  )  ;", "QueryAssert . assertThat (  (  )     -  >    query ( format (  \" SELECT   bogus   FROM    % s \"  ,    tableName )  )  )  . failsWithMessage (  \" Column    ' bogus '    cannot   be   resolved \"  )  ;", "}", "METHOD_END"], "methodName": ["testNonExistentColumn"], "fileName": "com.facebook.presto.tests.sqlserver.NegativeTests"}, {"methodBody": ["METHOD_START", "{", "String   tableName    =    String . format (  \"  % s .  % s .  % s \"  ,    TestConstants . CONNECTOR _ NAME ,     \" does _ not _ exist \"  ,     \" bogus \"  )  ;", "QueryAssert . assertThat (  (  )     -  >    query ( format (  \" SELECT    *    FROM    % s \"  ,    tableName )  )  )  . failsWithMessage (  \" Schema   does _ not _ exist   does   not   exist \"  )  ;", "}", "METHOD_END"], "methodName": ["testNonExistentSchema"], "fileName": "com.facebook.presto.tests.sqlserver.NegativeTests"}, {"methodBody": ["METHOD_START", "{", "String   tableName    =    String . format (  \"  % s .  % s .  % s \"  ,    TestConstants . CONNECTOR _ NAME ,    TestConstants . KEY _ SPACE ,     \" bogus \"  )  ;", "QueryAssert . assertThat (  (  )     -  >    query ( format (  \" SELECT    *    FROM    % s \"  ,    tableName )  )  )  . failsWithMessage ( String . format (  \" Table    % s   does   not   exist \"  ,    tableName )  )  ;", "}", "METHOD_END"], "methodName": ["testNonExistentTable"], "fileName": "com.facebook.presto.tests.sqlserver.NegativeTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "QueryExecutors . onPresto (  )  . executeQuery ( String . format (  \" DROP   TABLE   IF   EXISTS    % s \"  ,     . CREATE _ TABLE _ AS _ SELECT )  )  ;", "}    catch    ( Exception   e )     {", "Logger . get ( getClass (  )  )  . warn ( e ,     \" failed   to   drop   table \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["dropTestTables"], "fileName": "com.facebook.presto.tests.sqlserver.Select"}, {"methodBody": ["METHOD_START", "{", "String   sql    =    String . format (  (  \" SELECT   bi ,    si ,    i ,    ti ,    f ,    r ,    c ,    vc ,    te ,    nc ,    nvc ,    nt ,    d ,    dt ,    dt 2  ,    sdt ,    pf 3  0  ,    pf 2  2     \"     +     \" FROM    % s \"  )  ,    Select . ALL _ TYPES _ TABLE _ NAME )  ;", "QueryResult   queryResult    =    QueryExecutors . onPresto (  )  . executeQuery ( sql )  ;", "QueryAssert . assertThat ( queryResult )  . hasColumns ( JDBCType . BIGINT ,    JDBCType . SMALLINT ,    JDBCType . INTEGER ,    JDBCType . TINYINT ,    JDBCType . DOUBLE ,    JDBCType . REAL ,    JDBCType . CHAR ,    JDBCType . LONGNVARCHAR ,    JDBCType . LONGNVARCHAR ,    JDBCType . CHAR ,    JDBCType . LONGNVARCHAR ,    JDBCType . LONGNVARCHAR ,    JDBCType . DATE ,    JDBCType . TIMESTAMP ,    JDBCType . TIMESTAMP ,    JDBCType . TIMESTAMP ,    JDBCType . DOUBLE ,    JDBCType . REAL )  . containsOnly ( Row . row ( Long . MIN _ VALUE ,    Short . MIN _ VALUE ,    Integer . MIN _ VALUE ,    Byte . MIN _ VALUE ,    Double . MIN _ VALUE ,    Float . valueOf (  \"  -  3  .  4  0 E +  3  8  \"  )  ,     \"  \\ u 0  0  0  0           \"  ,     \"  \\ u 0  0  0  0  \"  ,     \"  \\ u 0  0  0  0  \"  ,     \"  \\ u 0  0  0  0              \"  ,     \"  \\ u 0  0  0  0  \"  ,     \"  \\ u 0  0  0  0  \"  ,    Date . valueOf (  \"  0  0  0  1  -  0  1  -  0  2  \"  )  ,    Timestamp . valueOf (  \"  1  7  5  3  -  0  1  -  0  1     0  0  :  0  0  :  0  0  .  0  0  0  \"  )  ,    Timestamp . valueOf (  \"  0  0  0  1  -  0  1  -  0  1     0  0  :  0  0  :  0  0  .  0  0  0  \"  )  ,    Timestamp . valueOf (  \"  1  9  0  0  -  0  1  -  0  1     0  0  :  0  0  :  0  0  \"  )  ,    Double . MIN _ VALUE ,    Float . valueOf (  \"  -  3  .  4  0 E +  3  8  \"  )  )  ,    Row . row ( Long . MAX _ VALUE ,    Short . MAX _ VALUE ,    Integer . MAX _ VALUE ,    Byte . MAX _ VALUE ,    Double . MAX _ VALUE ,    Float . MAX _ VALUE ,     \" abcd \"  ,     \" abcdef \"  ,     \" abcd \"  ,     \" abcde \"  ,     \" abcdefg \"  ,     \" abcd \"  ,    Date . valueOf (  \"  9  9  9  9  -  1  2  -  3  1  \"  )  ,    Timestamp . valueOf (  \"  9  9  9  9  -  1  2  -  3  1     2  3  :  5  9  :  5  9  .  9  9  7  \"  )  ,    Timestamp . valueOf (  \"  9  9  9  9  -  1  2  -  3  1     2  3  :  5  9  :  5  9  .  9  9  9  \"  )  ,    Timestamp . valueOf (  \"  2  0  7  9  -  0  6  -  0  6     0  0  :  0  0  :  0  0  \"  )  ,    Double . valueOf (  \"  1  2  3  4  5  6  7  8  9  1  2  .  3  4  5  6  7  5  6  \"  )  ,    Float . valueOf (  \"  1  2  3  4  5  6  7  8  .  6  5  5  7  \"  )  )  ,    Row . row ( null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null ,    null )  )  ;", "}", "METHOD_END"], "methodName": ["testAllDatatypes"], "fileName": "com.facebook.presto.tests.sqlserver.Select"}, {"methodBody": ["METHOD_START", "{", "String   sql    =    String . format (  \" CREATE   TABLE    % s   AS   SELECT    *    FROM    % s \"  ,    Select . CREATE _ TABLE _ AS _ SELECT ,    Select . NATION _ TABLE _ NAME )  ;", "QueryExecutors . onPresto (  )  . executeQuery ( sql )  ;", "sql    =    String . format (  \" SELECT   n _ nationkey ,    n _ name ,    n _ regionkey ,    n _ comment   FROM    % s .  % s .  % s \"  ,     \" master \"  ,    TestConstants . KEY _ SPACE ,    Select . CTAS _ TABLE _ NAME )  ;", "QueryResult   queryResult    =    QueryExecutors . onSqlServer (  )  . executeQuery ( sql )  ;", "QueryAssert . assertThat ( queryResult )  . matches ( TpchTableResults . PRESTO _ NATION _ RESULT )  ;", "}", "METHOD_END"], "methodName": ["testCreateTableAsSelect"], "fileName": "com.facebook.presto.tests.sqlserver.Select"}, {"methodBody": ["METHOD_START", "{", "String   sql    =    String . format (  (  \" SELECT   c . n _ name ,    t . name   FROM    % s   c   JOIN    \"     +     (  \" tpch . tiny . region   t   ON   c . n _ regionkey    =    t . regionkey    \"     +     \" WHERE   c . n _ nationkey =  3  \"  )  )  ,    Select . NATION _ TABLE _ NAME )  ;", "QueryResult   queryResult    =    QueryExecutors . onPresto (  )  . executeQuery ( sql )  ;", "QueryAssert . assertThat ( queryResult )  . containsOnly ( Row . row (  \" CANADA \"  ,     \" AMERICA \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testNationJoinRegion"], "fileName": "com.facebook.presto.tests.sqlserver.Select"}, {"methodBody": ["METHOD_START", "{", "String   sql    =    String . format (  (  \" SELECT   n 1  . n _ name ,    n 2  . n _ regionkey   FROM    % s   n 1    JOIN    \"     +     (  \"  % s   n 2    ON   n 1  . n _ nationkey    =    n 2  . n _ regionkey    \"     +     \" WHERE   n 1  . n _ nationkey =  3  \"  )  )  ,    Select . NATION _ TABLE _ NAME ,    Select . NATION _ TABLE _ NAME )  ;", "QueryResult   queryResult    =    QueryExecutors . onPresto (  )  . executeQuery ( sql )  ;", "QueryAssert . assertThat ( queryResult )  . containsOnly ( Row . row (  \" CANADA \"  ,     3  )  ,    Row . row (  \" CANADA \"  ,     3  )  ,    Row . row (  \" CANADA \"  ,     3  )  ,    Row . row (  \" CANADA \"  ,     3  )  ,    Row . row (  \" CANADA \"  ,     3  )  )  ;", "}", "METHOD_END"], "methodName": ["testNationSelfInnerJoin"], "fileName": "com.facebook.presto.tests.sqlserver.Select"}, {"methodBody": ["METHOD_START", "{", "String   sql    =    String . format (  \" SELECT   n _ nationkey ,    n _ name ,    n _ regionkey ,    n _ comment   FROM    % s \"  ,    Select . NATION _ TABLE _ NAME )  ;", "QueryResult   queryResult    =    QueryExecutors . onPresto (  )  . executeQuery ( sql )  ;", "QueryAssert . assertThat ( queryResult )  . matches ( TpchTableResults . PRESTO _ NATION _ RESULT )  ;", "}", "METHOD_END"], "methodName": ["testSelectNation"], "fileName": "com.facebook.presto.tests.sqlserver.Select"}, {"methodBody": ["METHOD_START", "{", "QueryAssert . assertThat ( QueryExecutors . onPresto (  )  . executeQuery (  \" SELECT   char 2 hexint (  '  ?  \u00d2\u00e6  ?  '  )  \"  )  )  . contains ( Row . row (  \"  0 CA 0  7  6 CA 0 CA 0  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testChar2HexInt"], "fileName": "com.facebook.presto.tests.teradata.TestTeradataFunctions"}, {"methodBody": ["METHOD_START", "{", "QueryAssert . assertThat ( QueryExecutors . onPresto (  )  . executeQuery (  \" SELECT   index (  ' high '  ,     ' ig '  )  \"  )  )  . contains ( Row . row (  2  )  )  ;", "}", "METHOD_END"], "methodName": ["testIndex"], "fileName": "com.facebook.presto.tests.teradata.TestTeradataFunctions"}, {"methodBody": ["METHOD_START", "{", "QueryAssert . assertThat ( QueryExecutors . onPresto (  )  . executeQuery (  \" SELECT   to _ char ( TIMESTAMP    '  1  9  8  8  -  0  4  -  0  8     1  4  :  1  5  :  1  6     +  0  2  :  0  9  '  ,  ' yyyy / mm / dd ; hh 2  4  : mi : ss '  )  \"  )  )  . contains ( Row . row (  \"  1  9  8  8  /  0  4  /  0  8  ;  1  4  :  1  5  :  1  6  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testToChar"], "fileName": "com.facebook.presto.tests.teradata.TestTeradataFunctions"}, {"methodBody": ["METHOD_START", "{", "QueryAssert . assertThat ( QueryExecutors . onPresto (  )  . executeQuery (  \" SELECT   to _ date (  '  1  9  8  8  /  0  4  /  0  1  '  ,     ' yyyy / mm / dd '  )  \"  )  )  . contains ( Row . row ( Date . valueOf (  \"  1  9  8  8  -  0  4  -  0  1  \"  )  )  )  ;", "QueryAssert . assertThat ( QueryExecutors . onPresto (  )  . executeQuery (  \" SELECT   to _ date (  '  1  9  8  8  /  0  4  /  0  8  '  ,     ' yyyy / mm / dd '  )  \"  )  )  . contains ( Row . row ( Date . valueOf (  \"  1  9  8  8  -  0  4  -  0  8  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testToDate"], "fileName": "com.facebook.presto.tests.teradata.TestTeradataFunctions"}, {"methodBody": ["METHOD_START", "{", "QueryAssert . assertThat ( QueryExecutors . onPresto (  )  . executeQuery (  \" SELECT   to _ timestamp (  '  1  9  8  8  /  0  4  /  0  8  ;  0  2  :  0  3  :  0  4  '  ,  ' yyyy / mm / dd ; hh 2  4  : mi : ss '  )  \"  )  )  . contains ( Row . row ( Timestamp . valueOf (  \"  1  9  8  8  -  0  4  -  0  8     0  2  :  0  3  :  0  4  .  0  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testToTimestamp"], "fileName": "com.facebook.presto.tests.teradata.TestTeradataFunctions"}, {"methodBody": ["METHOD_START", "{", "return   connection . getClass (  )  . getCanonicalName (  )  ;", "}", "METHOD_END"], "methodName": ["getClassNameForJdbcDriver"], "fileName": "com.facebook.presto.tests.utils.JdbcDriverUtils"}, {"methodBody": ["METHOD_START", "{", "return   JdbcDriverUtils . getSessionProperty ( connection ,    key ,     \" Value \"  )  ;", "}", "METHOD_END"], "methodName": ["getSessionProperty"], "fileName": "com.facebook.presto.tests.utils.JdbcDriverUtils"}, {"methodBody": ["METHOD_START", "{", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "ResultSet   rs    =    statement . executeQuery (  \" SHOW   SESSION \"  )  ;", "while    ( rs . next (  )  )     {", "if    ( rs . getString (  \" Name \"  )  . equals ( key )  )     {", "return   rs . getString ( valueType )  ;", "}", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getSessionProperty"], "fileName": "com.facebook.presto.tests.utils.JdbcDriverUtils"}, {"methodBody": ["METHOD_START", "{", "return   JdbcDriverUtils . getSessionProperty ( connection ,    key ,     \" Default \"  )  ;", "}", "METHOD_END"], "methodName": ["getSessionPropertyDefault"], "fileName": "com.facebook.presto.tests.utils.JdbcDriverUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( JdbcDriverUtils . usingPrestoJdbcDriver ( connection )  )     {", "JdbcDriverUtils . setSessionProperty ( connection ,    key ,    JdbcDriverUtils . getSessionPropertyDefault ( connection ,    key )  )  ;", "} else", "if    ( JdbcDriverUtils . usingTeradataJdbcDriver ( connection )  )     {", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "statement . execute ( String . format (  \" RESET   SESSION    % s \"  ,    key )  )  ;", "}", "} else    {", "throw   new   IllegalStateException (  )  ;", "}", "}", "METHOD_END"], "methodName": ["resetSessionProperty"], "fileName": "com.facebook.presto.tests.utils.JdbcDriverUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( JdbcDriverUtils . usingPrestoJdbcDriver ( connection )  )     {", "PrestoConnection   prestoConnection    =    connection . unwrap ( PrestoConnection . class )  ;", "prestoConnection . setSessionProperty ( key ,    value )  ;", "} else", "if    ( JdbcDriverUtils . usingTeradataJdbcDriver ( connection )  )     {", "try    ( Statement   statement    =    connection . createStatement (  )  )     {", "if    ( JdbcDriverUtils . shouldValueBeQuoted ( value )  )     {", "value    =     (  \"  '  \"     +    value )     +     \"  '  \"  ;", "}", "statement . execute ( String . format (  \" set   session    % s =  % s \"  ,    key ,    value )  )  ;", "}", "} else    {", "throw   new   IllegalStateException (  )  ;", "}", "}", "METHOD_END"], "methodName": ["setSessionProperty"], "fileName": "com.facebook.presto.tests.utils.JdbcDriverUtils"}, {"methodBody": ["METHOD_START", "{", "if    (  ( value . equalsIgnoreCase (  \" true \"  )  )     |  |     ( value . equalsIgnoreCase (  \" false \"  )  )  )     {", "return   false ;", "}", "if    ( value . matches (  . IS _ NUMERIC _ REGEX )  )     {", "return   false ;", "}", "try    {", "new   BigDecimal ( value )  ;", "return   false ;", "}    catch    ( NumberFormatException   e )     {", ". LOGGER . info (  \"  '  % s '    is   not   a   number \"  ,    value ,    e )  ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["shouldValueBeQuoted"], "fileName": "com.facebook.presto.tests.utils.JdbcDriverUtils"}, {"methodBody": ["METHOD_START", "{", "return   JdbcDriverUtils . getClassNameForJdbcDriver ( connection )  . equals (  \" com . facebook . presto . jdbc . PrestoConnection \"  )  ;", "}", "METHOD_END"], "methodName": ["usingPrestoJdbcDriver"], "fileName": "com.facebook.presto.tests.utils.JdbcDriverUtils"}, {"methodBody": ["METHOD_START", "{", "return   JdbcDriverUtils . getClassNameForJdbcDriver ( connection )  . startsWith (  \" com . teradata . presto . jdbc . jdbc 4  .  \"  )  ;", "}", "METHOD_END"], "methodName": ["usingTeradataJdbc4Driver"], "fileName": "com.facebook.presto.tests.utils.JdbcDriverUtils"}, {"methodBody": ["METHOD_START", "{", "return   JdbcDriverUtils . getClassNameForJdbcDriver ( connection )  . startsWith (  \" com . teradata . presto .  \"  )  ;", "}", "METHOD_END"], "methodName": ["usingTeradataJdbcDriver"], "fileName": "com.facebook.presto.tests.utils.JdbcDriverUtils"}, {"methodBody": ["METHOD_START", "{", "for    ( Object   row    :    expectedSubset . rows (  )  )     {", "if    (  !  ( all . rows (  )  . contains ( row )  )  )     {", "fail ( String . format (  \" expected   row   missing :     % s \\ nAll    % s   rows :  \\ n             % s \\ nExpected   subset    % s   rows :  \\ n             % s \\ n \"  ,    row ,    all . getRowsCount (  )  ,    Joiner . on (  \"  \\ n             \"  )  . join ( Iterables . limit ( all . rows (  )  ,     1  0  0  )  )  ,    expectedSubset . getRowsCount (  )  ,    Joiner . on (  \"  \\ n             \"  )  . join ( Iterables . limit ( expectedSubset . rows (  )  ,     1  0  0  )  )  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["assertContains"], "fileName": "com.facebook.presto.tests.utils.QueryAssertions"}, {"methodBody": ["METHOD_START", "{", "long   start    =    System . nanoTime (  )  ;", "while    (  !  ( Thread . currentThread (  )  . isInterrupted (  )  )  )     {", "try    {", ". assertContains ( all . get (  )  ,    expectedSubset )  ;", "return ;", "}    catch    ( AssertionError   e )     {", "if    (  ( nanosSince ( start )  . compareTo ( timeout )  )     >     0  )     {", "throw   e ;", "}", "}", "sleepUninterruptibly (  5  0  ,    TimeUnit . MILLISECONDS )  ;", "}", "}", "METHOD_END"], "methodName": ["assertContainsEventually"], "fileName": "com.facebook.presto.tests.utils.QueryAssertions"}, {"methodBody": ["METHOD_START", "{", "return   ThreadLocalTestContextHolder . testContext (  )  . getDependency ( QueryExecutor . class ,    prestoConfig )  ;", "}", "METHOD_END"], "methodName": ["connectToPresto"], "fileName": "com.facebook.presto.tests.utils.QueryExecutors"}, {"methodBody": ["METHOD_START", "{", "return   ThreadLocalTestContextHolder . testContext (  )  . getDependency ( QueryExecutor . class ,     \" hive \"  )  ;", "}", "METHOD_END"], "methodName": ["onHive"], "fileName": "com.facebook.presto.tests.utils.QueryExecutors"}, {"methodBody": ["METHOD_START", "{", "return   ThreadLocalTestContextHolder . testContext (  )  . getDependency ( QueryExecutor . class ,     \" mysql \"  )  ;", "}", "METHOD_END"], "methodName": ["onMySql"], "fileName": "com.facebook.presto.tests.utils.QueryExecutors"}, {"methodBody": ["METHOD_START", "{", "return   ThreadLocalTestContextHolder . testContext (  )  . getDependency ( QueryExecutor . class ,     \" presto \"  )  ;", "}", "METHOD_END"], "methodName": ["onPresto"], "fileName": "com.facebook.presto.tests.utils.QueryExecutors"}, {"methodBody": ["METHOD_START", "{", "return   ThreadLocalTestContextHolder . testContext (  )  . getDependency ( QueryExecutor . class ,     \" sqlserver \"  )  ;", "}", "METHOD_END"], "methodName": ["onSqlServer"], "fileName": "com.facebook.presto.tests.utils.QueryExecutors"}]