[{"methodBody": ["METHOD_START", "{", "Multibinder < FieldDecoder <  ?  >  >    fieldDecoderBinder    =    Multibinder . newSetBinder ( binder ,    new   com . google . inject . TypeLiteral < FieldDecoder <  ?  >  >  (  )     {  }  )  ;", "fieldDecoderBinder . addBinding (  )  . to ( decoderClass )  . in ( SINGLETON )  ;", "}", "METHOD_END"], "methodName": ["bindFieldDecoder"], "fileName": "com.facebook.presto.decoder.DecoderModule"}, {"methodBody": ["METHOD_START", "{", "Multibinder < RowDecoder >    rowDecoderBinder    =    Multibinder . newSetBinder ( binder ,    RowDecoder . class )  ;", "rowDecoderBinder . addBinding (  )  . to ( decoderClass )  . in ( SINGLETON )  ;", "}", "METHOD_END"], "methodName": ["bindRowDecoder"], "fileName": "com.facebook.presto.decoder.DecoderModule"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( rowDataFormat ,     \" rowDataFormat   is   null \"  )  ;", "Objects . requireNonNull ( fieldType ,     \" fieldType   is   null \"  )  ;", "checkState ( fieldDecoders . containsKey ( rowDataFormat )  ,     \" no   field   decoders   for    '  % s '    found \"  ,    rowDataFormat )  ;", "Set < FieldDecoder <  ?  >  >    decoders    =    fieldDecoders . get ( rowDataFormat )  . get ( fieldType )  ;", "ImmutableSet < String >    fieldNames    =    ImmutableSet . of ( firstNonNull ( fieldDataFormat ,    FieldDEFAULT _ FIELD _ DECODER _ NAME )  ,    FieldDEFAULT _ FIELD _ DECODER _ NAME )  ;", "for    ( String   fieldName    :    fieldNames )     {", "for    ( FieldDecoder <  ?  >    decoder    :    decoders )     {", "if    ( fieldName . equals ( decoder . getFieldDecoderName (  )  )  )     {", "return   decoder ;", "}", "}", "}", "throw   new   IllegalStateException ( String . format (  \" No   field   decoder   for    % s /  % s   found !  \"  ,    rowDataFormat ,    fieldType )  )  ;", "}", "METHOD_END"], "methodName": ["getFieldDecoder"], "fileName": "com.facebook.presto.decoder.DecoderRegistry"}, {"methodBody": ["METHOD_START", "{", "checkState ( rowDecoders . containsKey ( dataFormat )  ,     \" no   row   decoder   for    '  % s '    found \"  ,    dataFormat )  ;", "return   rowDecoders . get ( dataFormat )  ;", "}", "METHOD_END"], "methodName": ["getRowDecoder"], "fileName": "com.facebook.presto.decoder.DecoderRegistry"}, {"methodBody": ["METHOD_START", "{", "return   connectorId ;", "}", "METHOD_END"], "methodName": ["getConnectorId"], "fileName": "com.facebook.presto.decoder.DecoderTestColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   dataFormat ;", "}", "METHOD_END"], "methodName": ["getDataFormat"], "fileName": "com.facebook.presto.decoder.DecoderTestColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   formatHint ;", "}", "METHOD_END"], "methodName": ["getFormatHint"], "fileName": "com.facebook.presto.decoder.DecoderTestColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   mapping ;", "}", "METHOD_END"], "methodName": ["getMapping"], "fileName": "com.facebook.presto.decoder.DecoderTestColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.decoder.DecoderTestColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   ordinalPosition ;", "}", "METHOD_END"], "methodName": ["getOrdinalPosition"], "fileName": "com.facebook.presto.decoder.DecoderTestColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "com.facebook.presto.decoder.DecoderTestColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   hidden ;", "}", "METHOD_END"], "methodName": ["isHidden"], "fileName": "com.facebook.presto.decoder.DecoderTestColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   internal ;", "}", "METHOD_END"], "methodName": ["isInternal"], "fileName": "com.facebook.presto.decoder.DecoderTestColumnHandle"}, {"methodBody": ["METHOD_START", "{", "throw   new   PrestoException ( DecoderErrorCode . DECODER _ CONVERSION _ NOT _ SUPPORTED ,     \" conversion   to   boolean   not   supported \"  )  ;", "}", "METHOD_END"], "methodName": ["getBoolean"], "fileName": "com.facebook.presto.decoder.FieldValueProvider"}, {"methodBody": ["METHOD_START", "{", "throw   new   PrestoException ( DecoderErrorCode . DECODER _ CONVERSION _ NOT _ SUPPORTED ,     \" conversion   to   double   not   supported \"  )  ;", "}", "METHOD_END"], "methodName": ["getDouble"], "fileName": "com.facebook.presto.decoder.FieldValueProvider"}, {"methodBody": ["METHOD_START", "{", "throw   new   PrestoException ( DecoderErrorCode . DECODER _ CONVERSION _ NOT _ SUPPORTED ,     \" conversion   to   long   not   supported \"  )  ;", "}", "METHOD_END"], "methodName": ["getLong"], "fileName": "com.facebook.presto.decoder.FieldValueProvider"}, {"methodBody": ["METHOD_START", "{", "throw   new   PrestoException ( DecoderErrorCode . DECODER _ CONVERSION _ NOT _ SUPPORTED ,     \" conversion   to   Slice   not   supported \"  )  ;", "}", "METHOD_END"], "methodName": ["getSlice"], "fileName": "com.facebook.presto.decoder.FieldValueProvider"}, {"methodBody": ["METHOD_START", "{", "Builder < DecoderColumnHandle ,    FieldDecoder <  ?  >  >    map    =    ImmutableMap . builder (  )  ;", "for    ( DecoderColumnHandle   column    :    columns )     {", "map . put ( column ,     . DEFAULT _ FIELD _ DECODER )  ;", "}", "return   map . build (  )  ;", "}", "METHOD_END"], "methodName": ["buildMap"], "fileName": "com.facebook.presto.decoder.csv.TestCsvDecoder"}, {"methodBody": ["METHOD_START", "{", "String   csv    =     \" True , False ,  0  ,  1  ,  \\  \"  0  \\  \"  ,  \\  \"  1  \\  \"  ,  \\  \" true \\  \"  ,  \\  \" false \\  \"  \"  ;", "CsvRowDecoder   rowDecoder    =    new   CsvRowDecoder (  )  ;", "DecoderTestColumnHandle   row 1     =    new   DecoderTestColumnHandle (  \"  \"  ,     0  ,     \" row 1  \"  ,    BooleanType . BOOLEAN ,     \"  0  \"  ,    null ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 2     =    new   DecoderTestColumnHandle (  \"  \"  ,     1  ,     \" row 2  \"  ,    BooleanType . BOOLEAN ,     \"  1  \"  ,    null ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 3     =    new   DecoderTestColumnHandle (  \"  \"  ,     2  ,     \" row 3  \"  ,    BooleanType . BOOLEAN ,     \"  2  \"  ,    null ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 4     =    new   DecoderTestColumnHandle (  \"  \"  ,     3  ,     \" row 4  \"  ,    BooleanType . BOOLEAN ,     \"  3  \"  ,    null ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 5     =    new   DecoderTestColumnHandle (  \"  \"  ,     4  ,     \" row 5  \"  ,    BooleanType . BOOLEAN ,     \"  4  \"  ,    null ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 6     =    new   DecoderTestColumnHandle (  \"  \"  ,     5  ,     \" row 6  \"  ,    BooleanType . BOOLEAN ,     \"  5  \"  ,    null ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 7     =    new   DecoderTestColumnHandle (  \"  \"  ,     6  ,     \" row 7  \"  ,    BooleanType . BOOLEAN ,     \"  6  \"  ,    null ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 8     =    new   DecoderTestColumnHandle (  \"  \"  ,     7  ,     \" row 8  \"  ,    BooleanType . BOOLEAN ,     \"  7  \"  ,    null ,    null ,    false ,    false ,    false )  ;", "List < DecoderColumnHandle >    columns    =    ImmutableList . of ( row 1  ,    row 2  ,    row 3  ,    row 4  ,    row 5  ,    row 6  ,    row 7  ,    row 8  )  ;", "Set < FieldValueProvider >    providers    =    new   HashSet <  >  (  )  ;", "boolean   corrupt    =    rowDecoder . decodeRow ( csv . getBytes ( StandardCharsets . UTF _  8  )  ,    null ,    providers ,    columns ,     . buildMap ( columns )  )  ;", "assertFalse ( corrupt )  ;", "assertEquals ( providers . size (  )  ,    columns . size (  )  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 1  ,    true )  ;", "DecoderTestUtil . checkValue ( providers ,    row 2  ,    false )  ;", "DecoderTestUtil . checkValue ( providers ,    row 3  ,    false )  ;", "DecoderTestUtil . checkValue ( providers ,    row 4  ,    false )  ;", "DecoderTestUtil . checkValue ( providers ,    row 5  ,    false )  ;", "DecoderTestUtil . checkValue ( providers ,    row 6  ,    false )  ;", "DecoderTestUtil . checkValue ( providers ,    row 7  ,    true )  ;", "DecoderTestUtil . checkValue ( providers ,    row 8  ,    false )  ;", "}", "METHOD_END"], "methodName": ["testBoolean"], "fileName": "com.facebook.presto.decoder.csv.TestCsvDecoder"}, {"methodBody": ["METHOD_START", "{", "String   csv    =     \"  ,  ,  ,  \"  ;", "CsvRowDecoder   rowDecoder    =    new   CsvRowDecoder (  )  ;", "DecoderTestColumnHandle   row 1     =    new   DecoderTestColumnHandle (  \"  \"  ,     0  ,     \" row 1  \"  ,    createVarcharType (  1  0  )  ,     \"  0  \"  ,    null ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 2     =    new   DecoderTestColumnHandle (  \"  \"  ,     1  ,     \" row 2  \"  ,    BigintType . BIGINT ,     \"  1  \"  ,    null ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 3     =    new   DecoderTestColumnHandle (  \"  \"  ,     2  ,     \" row 3  \"  ,    DoubleType . DOUBLE ,     \"  2  \"  ,    null ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 4     =    new   DecoderTestColumnHandle (  \"  \"  ,     3  ,     \" row 4  \"  ,    BooleanType . BOOLEAN ,     \"  3  \"  ,    null ,    null ,    false ,    false ,    false )  ;", "List < DecoderColumnHandle >    columns    =    ImmutableList . of ( row 1  ,    row 2  ,    row 3  ,    row 4  )  ;", "Set < FieldValueProvider >    providers    =    new   HashSet <  >  (  )  ;", "boolean   corrupt    =    rowDecoder . decodeRow ( csv . getBytes ( StandardCharsets . UTF _  8  )  ,    null ,    providers ,    columns ,     . buildMap ( columns )  )  ;", "assertFalse ( corrupt )  ;", "assertEquals ( providers . size (  )  ,    columns . size (  )  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 1  ,     \"  \"  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 2  ,     0  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 3  ,     0  .  0  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 4  ,    false )  ;", "}", "METHOD_END"], "methodName": ["testNulls"], "fileName": "com.facebook.presto.decoder.csv.TestCsvDecoder"}, {"methodBody": ["METHOD_START", "{", "String   csv    =     \"  \\  \" row    1  \\  \"  , row 2  ,  \\  \" row 3  \\  \"  ,  1  0  0  ,  \\  \"  2  0  0  \\  \"  ,  3  0  0  ,  4  .  5  \"  ;", "CsvRowDecoder   rowDecoder    =    new   CsvRowDecoder (  )  ;", "DecoderTestColumnHandle   row 1     =    new   DecoderTestColumnHandle (  \"  \"  ,     0  ,     \" row 1  \"  ,    createVarcharType (  2  )  ,     \"  0  \"  ,    null ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 2     =    new   DecoderTestColumnHandle (  \"  \"  ,     1  ,     \" row 2  \"  ,    createVarcharType (  1  0  )  ,     \"  1  \"  ,    null ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 3     =    new   DecoderTestColumnHandle (  \"  \"  ,     2  ,     \" row 3  \"  ,    createVarcharType (  1  0  )  ,     \"  2  \"  ,    null ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 4     =    new   DecoderTestColumnHandle (  \"  \"  ,     3  ,     \" row 4  \"  ,    BigintType . BIGINT ,     \"  3  \"  ,    null ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 5     =    new   DecoderTestColumnHandle (  \"  \"  ,     4  ,     \" row 5  \"  ,    BigintType . BIGINT ,     \"  4  \"  ,    null ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 6     =    new   DecoderTestColumnHandle (  \"  \"  ,     5  ,     \" row 6  \"  ,    BigintType . BIGINT ,     \"  5  \"  ,    null ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 7     =    new   DecoderTestColumnHandle (  \"  \"  ,     6  ,     \" row 7  \"  ,    DoubleType . DOUBLE ,     \"  6  \"  ,    null ,    null ,    false ,    false ,    false )  ;", "List < DecoderColumnHandle >    columns    =    ImmutableList . of ( row 1  ,    row 2  ,    row 3  ,    row 4  ,    row 5  ,    row 6  ,    row 7  )  ;", "Set < FieldValueProvider >    providers    =    new   HashSet <  >  (  )  ;", "boolean   corrupt    =    rowDecoder . decodeRow ( csv . getBytes ( StandardCharsets . UTF _  8  )  ,    null ,    providers ,    columns ,     . buildMap ( columns )  )  ;", "assertFalse ( corrupt )  ;", "assertEquals ( providers . size (  )  ,    columns . size (  )  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 1  ,     \" ro \"  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 2  ,     \" row 2  \"  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 3  ,     \" row 3  \"  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 4  ,     1  0  0  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 5  ,     2  0  0  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 6  ,     3  0  0  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 7  ,     4  .  5  )  ;", "}", "METHOD_END"], "methodName": ["testSimple"], "fileName": "com.facebook.presto.decoder.csv.TestCsvDecoder"}, {"methodBody": ["METHOD_START", "{", "String   mapping    =    columnHandle . getMapping (  )  ;", "checkState (  ( mapping    !  =    null )  ,     \" No   mapping   for    % s \"  ,    columnHandle . getName (  )  )  ;", "Node   currentNode    =    tree ;", "for    ( String   pathElement    :    Splitter . on (  '  /  '  )  . omitEmptyStrings (  )  . split ( mapping )  )     {", "if    (  !  ( currentNode . has ( pathElement )  )  )     {", "return   MissingNode . getInstance (  )  ;", "}", "currentNode    =    currentNode . path ( pathElement )  ;", "}", "return   currentNode ;", "}", "METHOD_END"], "methodName": ["locateNode"], "fileName": "com.facebook.presto.decoder.json.JsonRowDecoder"}, {"methodBody": ["METHOD_START", "{", "Builder < DecoderColumnHandle ,    FieldDecoder <  ?  >  >    map    =    ImmutableMap . builder (  )  ;", "for    ( DecoderColumnHandle   column    :    columns )     {", "map . put ( column ,     . DECODERS . get ( column . getDataFormat (  )  )  )  ;", "}", "return   map . build (  )  ;", "}", "METHOD_END"], "methodName": ["buildMap"], "fileName": "com.facebook.presto.decoder.json.TestISO8601JsonFieldDecoder"}, {"methodBody": ["METHOD_START", "{", "long   now    =    System . currentTimeMillis (  )  ;", "String   nowString    =     . PRINTER . print ( now )  ;", "byte [  ]    json    =    String . format (  \"  {  \\  \" a _ number \\  \"  :  % d ,  \\  \" a _ string \\  \"  :  \\  \"  % s \\  \"  }  \"  ,    now ,    nowString )  . getBytes ( StandardCharsets . UTF _  8  )  ;", "JsonRowDecoder   rowDecoder    =    new   JsonRowDecoder (  . PROVIDER . get (  )  )  ;", "DecoderTestColumnHandle   row 1     =    new   DecoderTestColumnHandle (  \"  \"  ,     0  ,     \" row 1  \"  ,    BigintType . BIGINT ,     \" a _ number \"  ,    FieldDecoder . DEFAULT _ FIELD _ DECODER _ NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 2     =    new   DecoderTestColumnHandle (  \"  \"  ,     1  ,     \" row 2  \"  ,    createVarcharType (  1  0  0  )  ,     \" a _ string \"  ,    FieldDecoder . DEFAULT _ FIELD _ DECODER _ NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 3     =    new   DecoderTestColumnHandle (  \"  \"  ,     2  ,     \" row 3  \"  ,    BigintType . BIGINT ,     \" a _ number \"  ,    ISO 8  6  0  1 JsonFieldDecoder . NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 4     =    new   DecoderTestColumnHandle (  \"  \"  ,     3  ,     \" row 4  \"  ,    BigintType . BIGINT ,     \" a _ string \"  ,    ISO 8  6  0  1 JsonFieldDecoder . NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 5     =    new   DecoderTestColumnHandle (  \"  \"  ,     4  ,     \" row 5  \"  ,    createVarcharType (  1  0  0  )  ,     \" a _ number \"  ,    ISO 8  6  0  1 JsonFieldDecoder . NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 6     =    new   DecoderTestColumnHandle (  \"  \"  ,     5  ,     \" row 6  \"  ,    createVarcharType (  1  0  0  )  ,     \" a _ string \"  ,    ISO 8  6  0  1 JsonFieldDecoder . NAME ,    null ,    false ,    false ,    false )  ;", "List < DecoderColumnHandle >    columns    =    ImmutableList . of ( row 1  ,    row 2  ,    row 3  ,    row 4  ,    row 5  ,    row 6  )  ;", "Set < FieldValueProvider >    providers    =    new   HashSet <  >  (  )  ;", "boolean   corrupt    =    rowDecoder . decodeRow ( json ,    null ,    providers ,    columns ,     . buildMap ( columns )  )  ;", "assertFalse ( corrupt )  ;", "assertEquals ( providers . size (  )  ,    columns . size (  )  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 1  ,    now )  ;", "DecoderTestUtil . checkValue ( providers ,    row 2  ,    nowString )  ;", "DecoderTestUtil . checkValue ( providers ,    row 3  ,    now )  ;", "DecoderTestUtil . checkValue ( providers ,    row 4  ,    now )  ;", "DecoderTestUtil . checkValue ( providers ,    row 5  ,    Long . toString ( now )  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 6  ,    nowString )  ;", "}", "METHOD_END"], "methodName": ["testBasicFormatting"], "fileName": "com.facebook.presto.decoder.json.TestISO8601JsonFieldDecoder"}, {"methodBody": ["METHOD_START", "{", "byte [  ]    json    =     \"  {  }  \"  . getBytes ( StandardCharsets . UTF _  8  )  ;", "JsonRowDecoder   rowDecoder    =    new   JsonRowDecoder (  . PROVIDER . get (  )  )  ;", "DecoderTestColumnHandle   row 1     =    new   DecoderTestColumnHandle (  \"  \"  ,     0  ,     \" row 1  \"  ,    BigintType . BIGINT ,     \" a _ number \"  ,    FieldDecoder . DEFAULT _ FIELD _ DECODER _ NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 2     =    new   DecoderTestColumnHandle (  \"  \"  ,     1  ,     \" row 2  \"  ,    createVarcharType (  1  0  0  )  ,     \" a _ string \"  ,    FieldDecoder . DEFAULT _ FIELD _ DECODER _ NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 3     =    new   DecoderTestColumnHandle (  \"  \"  ,     2  ,     \" row 3  \"  ,    BigintType . BIGINT ,     \" a _ number \"  ,    ISO 8  6  0  1 JsonFieldDecoder . NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 4     =    new   DecoderTestColumnHandle (  \"  \"  ,     3  ,     \" row 4  \"  ,    BigintType . BIGINT ,     \" a _ string \"  ,    ISO 8  6  0  1 JsonFieldDecoder . NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 5     =    new   DecoderTestColumnHandle (  \"  \"  ,     4  ,     \" row 5  \"  ,    createVarcharType (  1  0  0  )  ,     \" a _ number \"  ,    ISO 8  6  0  1 JsonFieldDecoder . NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 6     =    new   DecoderTestColumnHandle (  \"  \"  ,     5  ,     \" row 6  \"  ,    createVarcharType (  1  0  0  )  ,     \" a _ string \"  ,    ISO 8  6  0  1 JsonFieldDecoder . NAME ,    null ,    false ,    false ,    false )  ;", "List < DecoderColumnHandle >    columns    =    ImmutableList . of ( row 1  ,    row 2  ,    row 3  ,    row 4  ,    row 5  ,    row 6  )  ;", "Set < FieldValueProvider >    providers    =    new   HashSet <  >  (  )  ;", "boolean   corrupt    =    rowDecoder . decodeRow ( json ,    null ,    providers ,    columns ,     . buildMap ( columns )  )  ;", "assertFalse ( corrupt )  ;", "assertEquals ( providers . size (  )  ,    columns . size (  )  )  ;", "DecoderTestUtil . checkIsNull ( providers ,    row 1  )  ;", "DecoderTestUtil . checkIsNull ( providers ,    row 2  )  ;", "DecoderTestUtil . checkIsNull ( providers ,    row 3  )  ;", "DecoderTestUtil . checkIsNull ( providers ,    row 4  )  ;", "DecoderTestUtil . checkIsNull ( providers ,    row 5  )  ;", "DecoderTestUtil . checkIsNull ( providers ,    row 6  )  ;", "}", "METHOD_END"], "methodName": ["testNullValues"], "fileName": "com.facebook.presto.decoder.json.TestISO8601JsonFieldDecoder"}, {"methodBody": ["METHOD_START", "{", "Builder < DecoderColumnHandle ,    FieldDecoder <  ?  >  >    map    =    ImmutableMap . builder (  )  ;", "for    ( DecoderColumnHandle   column    :    columns )     {", "map . put ( column ,     . DEFAULT _ FIELD _ DECODER )  ;", "}", "return   map . build (  )  ;", "}", "METHOD_END"], "methodName": ["buildMap"], "fileName": "com.facebook.presto.decoder.json.TestJsonDecoder"}, {"methodBody": ["METHOD_START", "{", "byte [  ]    json    =     \"  {  }  \"  . getBytes ( StandardCharsets . UTF _  8  )  ;", "JsonRowDecoder   rowDecoder    =    new   JsonRowDecoder (  . PROVIDER . get (  )  )  ;", "DecoderTestColumnHandle   row 1     =    new   DecoderTestColumnHandle (  \"  \"  ,     0  ,     \" row 1  \"  ,    createVarcharType (  1  0  0  )  ,     \" very / deep / varchar \"  ,    null ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 2     =    new   DecoderTestColumnHandle (  \"  \"  ,     1  ,     \" row 2  \"  ,    BigintType . BIGINT ,     \" no _ bigint \"  ,    null ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 3     =    new   DecoderTestColumnHandle (  \"  \"  ,     2  ,     \" row 3  \"  ,    DoubleType . DOUBLE ,     \" double / is _ missing \"  ,    null ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 4     =    new   DecoderTestColumnHandle (  \"  \"  ,     3  ,     \" row 4  \"  ,    BooleanType . BOOLEAN ,     \" hello \"  ,    null ,    null ,    false ,    false ,    false )  ;", "List < DecoderColumnHandle >    columns    =    ImmutableList . of ( row 1  ,    row 2  ,    row 3  ,    row 4  )  ;", "Set < FieldValueProvider >    providers    =    new   HashSet <  >  (  )  ;", "boolean   corrupt    =    rowDecoder . decodeRow ( json ,    null ,    providers ,    columns ,     . buildMap ( columns )  )  ;", "assertFalse ( corrupt )  ;", "assertEquals ( providers . size (  )  ,    columns . size (  )  )  ;", "DecoderTestUtil . checkIsNull ( providers ,    row 1  )  ;", "DecoderTestUtil . checkIsNull ( providers ,    row 2  )  ;", "DecoderTestUtil . checkIsNull ( providers ,    row 3  )  ;", "DecoderTestUtil . checkIsNull ( providers ,    row 4  )  ;", "}", "METHOD_END"], "methodName": ["testNonExistent"], "fileName": "com.facebook.presto.decoder.json.TestJsonDecoder"}, {"methodBody": ["METHOD_START", "{", "byte [  ]    json    =    ByteStreams . toByteArray ( TestJsonDecoder . class . getResourceAsStream (  \"  / decoder / json / message . json \"  )  )  ;", "JsonRowDecoder   rowDecoder    =    new   JsonRowDecoder ( TestJsonDecoder . PROVIDER . get (  )  )  ;", "DecoderTestColumnHandle   row 1     =    new   DecoderTestColumnHandle (  \"  \"  ,     0  ,     \" row 1  \"  ,    createVarcharType (  1  0  0  )  ,     \" source \"  ,    null ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 2     =    new   DecoderTestColumnHandle (  \"  \"  ,     1  ,     \" row 2  \"  ,    createVarcharType (  1  0  )  ,     \" user / screen _ name \"  ,    null ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 3     =    new   DecoderTestColumnHandle (  \"  \"  ,     2  ,     \" row 3  \"  ,    BigintType . BIGINT ,     \" id \"  ,    null ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 4     =    new   DecoderTestColumnHandle (  \"  \"  ,     3  ,     \" row 4  \"  ,    BigintType . BIGINT ,     \" user / statuses _ count \"  ,    null ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 5     =    new   DecoderTestColumnHandle (  \"  \"  ,     4  ,     \" row 5  \"  ,    BooleanType . BOOLEAN ,     \" user / geo _ enabled \"  ,    null ,    null ,    false ,    false ,    false )  ;", "List < DecoderColumnHandle >    columns    =    ImmutableList . of ( row 1  ,    row 2  ,    row 3  ,    row 4  ,    row 5  )  ;", "Set < FieldValueProvider >    providers    =    new   HashSet <  >  (  )  ;", "boolean   corrupt    =    rowDecoder . decodeRow ( json ,    null ,    providers ,    columns ,    TestJsonDecoder . buildMap ( columns )  )  ;", "assertFalse ( corrupt )  ;", "assertEquals ( providers . size (  )  ,    columns . size (  )  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 1  ,     \"  < a   href =  \\  \" http :  /  / twitterfeed . com \\  \"    rel =  \\  \" nofollow \\  \"  > twitterfeed <  / a >  \"  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 2  ,     \" EKentuckyN \"  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 3  ,     4  9  3  8  5  7  9  5  9  5  8  8  2  8  6  4  6  0 L )  ;", "DecoderTestUtil . checkValue ( providers ,    row 4  ,     7  6  3  0  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 5  ,    true )  ;", "}", "METHOD_END"], "methodName": ["testSimple"], "fileName": "com.facebook.presto.decoder.json.TestJsonDecoder"}, {"methodBody": ["METHOD_START", "{", "byte [  ]    json    =     \"  {  \\  \" a _ number \\  \"  :  4  8  1  5  1  6  ,  \\  \" a _ string \\  \"  :  \\  \"  2  3  4  2  \\  \"  }  \"  . getBytes ( StandardCharsets . UTF _  8  )  ;", "JsonRowDecoder   rowDecoder    =    new   JsonRowDecoder (  . PROVIDER . get (  )  )  ;", "DecoderTestColumnHandle   row 1     =    new   DecoderTestColumnHandle (  \"  \"  ,     0  ,     \" row 1  \"  ,    createVarcharType (  1  0  0  )  ,     \" a _ number \"  ,    null ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 2     =    new   DecoderTestColumnHandle (  \"  \"  ,     1  ,     \" row 2  \"  ,    BigintType . BIGINT ,     \" a _ number \"  ,    null ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 3     =    new   DecoderTestColumnHandle (  \"  \"  ,     2  ,     \" row 3  \"  ,    createVarcharType (  1  0  0  )  ,     \" a _ string \"  ,    null ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 4     =    new   DecoderTestColumnHandle (  \"  \"  ,     3  ,     \" row 4  \"  ,    BigintType . BIGINT ,     \" a _ string \"  ,    null ,    null ,    false ,    false ,    false )  ;", "List < DecoderColumnHandle >    columns    =    ImmutableList . of ( row 1  ,    row 2  ,    row 3  ,    row 4  )  ;", "Set < FieldValueProvider >    providers    =    new   HashSet <  >  (  )  ;", "boolean   corrupt    =    rowDecoder . decodeRow ( json ,    null ,    providers ,    columns ,     . buildMap ( columns )  )  ;", "assertFalse ( corrupt )  ;", "assertEquals ( providers . size (  )  ,    columns . size (  )  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 1  ,     \"  4  8  1  5  1  6  \"  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 2  ,     4  8  1  5  1  6  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 3  ,     \"  2  3  4  2  \"  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 4  ,     2  3  4  2  )  ;", "}", "METHOD_END"], "methodName": ["testStringNumber"], "fileName": "com.facebook.presto.decoder.json.TestJsonDecoder"}, {"methodBody": ["METHOD_START", "{", "Builder < DecoderColumnHandle ,    FieldDecoder <  ?  >  >    map    =    ImmutableMap . builder (  )  ;", "for    ( DecoderColumnHandle   column    :    columns )     {", "map . put ( column ,     . DECODERS . get ( column . getDataFormat (  )  )  )  ;", "}", "return   map . build (  )  ;", "}", "METHOD_END"], "methodName": ["buildMap"], "fileName": "com.facebook.presto.decoder.json.TestMillisecondsSinceEpochJsonFieldDecoder"}, {"methodBody": ["METHOD_START", "{", "long   now    =    System . currentTimeMillis (  )  ;", "String   nowString    =    MillisecondsSinceEpochJsonFieldDecoder . FORMATTER . print ( now )  ;", "byte [  ]    json    =    String . format (  \"  {  \\  \" a _ number \\  \"  :  % d ,  \\  \" a _ string \\  \"  :  \\  \"  % d \\  \"  }  \"  ,    now ,    now )  . getBytes ( StandardCharsets . UTF _  8  )  ;", "JsonRowDecoder   rowDecoder    =    new   JsonRowDecoder (  . PROVIDER . get (  )  )  ;", "DecoderTestColumnHandle   row 1     =    new   DecoderTestColumnHandle (  \"  \"  ,     0  ,     \" row 1  \"  ,    BigintType . BIGINT ,     \" a _ number \"  ,    FieldDecoder . DEFAULT _ FIELD _ DECODER _ NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 2     =    new   DecoderTestColumnHandle (  \"  \"  ,     1  ,     \" row 2  \"  ,    createVarcharType (  1  0  0  )  ,     \" a _ string \"  ,    FieldDecoder . DEFAULT _ FIELD _ DECODER _ NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 3     =    new   DecoderTestColumnHandle (  \"  \"  ,     2  ,     \" row 3  \"  ,    BigintType . BIGINT ,     \" a _ number \"  ,    MillisecondsSinceEpochJsonFieldDecoder . NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 4     =    new   DecoderTestColumnHandle (  \"  \"  ,     3  ,     \" row 4  \"  ,    BigintType . BIGINT ,     \" a _ string \"  ,    MillisecondsSinceEpochJsonFieldDecoder . NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 5     =    new   DecoderTestColumnHandle (  \"  \"  ,     4  ,     \" row 5  \"  ,    createVarcharType (  1  0  0  )  ,     \" a _ number \"  ,    MillisecondsSinceEpochJsonFieldDecoder . NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 6     =    new   DecoderTestColumnHandle (  \"  \"  ,     5  ,     \" row 6  \"  ,    createVarcharType (  1  0  0  )  ,     \" a _ string \"  ,    MillisecondsSinceEpochJsonFieldDecoder . NAME ,    null ,    false ,    false ,    false )  ;", "List < DecoderColumnHandle >    columns    =    ImmutableList . of ( row 1  ,    row 2  ,    row 3  ,    row 4  ,    row 5  ,    row 6  )  ;", "Set < FieldValueProvider >    providers    =    new   HashSet <  >  (  )  ;", "boolean   corrupt    =    rowDecoder . decodeRow ( json ,    null ,    providers ,    columns ,     . buildMap ( columns )  )  ;", "assertFalse ( corrupt )  ;", "assertEquals ( providers . size (  )  ,    columns . size (  )  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 1  ,    now )  ;", "DecoderTestUtil . checkValue ( providers ,    row 2  ,    Long . toString ( now )  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 3  ,    now )  ;", "DecoderTestUtil . checkValue ( providers ,    row 4  ,    now )  ;", "DecoderTestUtil . checkValue ( providers ,    row 5  ,    nowString )  ;", "DecoderTestUtil . checkValue ( providers ,    row 6  ,    nowString )  ;", "}", "METHOD_END"], "methodName": ["testBasicFormatting"], "fileName": "com.facebook.presto.decoder.json.TestMillisecondsSinceEpochJsonFieldDecoder"}, {"methodBody": ["METHOD_START", "{", "byte [  ]    json    =     \"  {  }  \"  . getBytes ( StandardCharsets . UTF _  8  )  ;", "JsonRowDecoder   rowDecoder    =    new   JsonRowDecoder (  . PROVIDER . get (  )  )  ;", "DecoderTestColumnHandle   row 1     =    new   DecoderTestColumnHandle (  \"  \"  ,     0  ,     \" row 1  \"  ,    BigintType . BIGINT ,     \" a _ number \"  ,    FieldDecoder . DEFAULT _ FIELD _ DECODER _ NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 2     =    new   DecoderTestColumnHandle (  \"  \"  ,     1  ,     \" row 2  \"  ,    createVarcharType (  1  0  0  )  ,     \" a _ string \"  ,    FieldDecoder . DEFAULT _ FIELD _ DECODER _ NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 3     =    new   DecoderTestColumnHandle (  \"  \"  ,     2  ,     \" row 3  \"  ,    BigintType . BIGINT ,     \" a _ number \"  ,    MillisecondsSinceEpochJsonFieldDecoder . NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 4     =    new   DecoderTestColumnHandle (  \"  \"  ,     3  ,     \" row 4  \"  ,    BigintType . BIGINT ,     \" a _ string \"  ,    MillisecondsSinceEpochJsonFieldDecoder . NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 5     =    new   DecoderTestColumnHandle (  \"  \"  ,     4  ,     \" row 5  \"  ,    createVarcharType (  1  0  0  )  ,     \" a _ number \"  ,    MillisecondsSinceEpochJsonFieldDecoder . NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 6     =    new   DecoderTestColumnHandle (  \"  \"  ,     5  ,     \" row 6  \"  ,    createVarcharType (  1  0  0  )  ,     \" a _ string \"  ,    MillisecondsSinceEpochJsonFieldDecoder . NAME ,    null ,    false ,    false ,    false )  ;", "List < DecoderColumnHandle >    columns    =    ImmutableList . of ( row 1  ,    row 2  ,    row 3  ,    row 4  ,    row 5  ,    row 6  )  ;", "Set < FieldValueProvider >    providers    =    new   HashSet <  >  (  )  ;", "boolean   corrupt    =    rowDecoder . decodeRow ( json ,    null ,    providers ,    columns ,     . buildMap ( columns )  )  ;", "assertFalse ( corrupt )  ;", "assertEquals ( providers . size (  )  ,    columns . size (  )  )  ;", "DecoderTestUtil . checkIsNull ( providers ,    row 1  )  ;", "DecoderTestUtil . checkIsNull ( providers ,    row 2  )  ;", "DecoderTestUtil . checkIsNull ( providers ,    row 3  )  ;", "DecoderTestUtil . checkIsNull ( providers ,    row 4  )  ;", "DecoderTestUtil . checkIsNull ( providers ,    row 5  )  ;", "DecoderTestUtil . checkIsNull ( providers ,    row 6  )  ;", "}", "METHOD_END"], "methodName": ["testNullValues"], "fileName": "com.facebook.presto.decoder.json.TestMillisecondsSinceEpochJsonFieldDecoder"}, {"methodBody": ["METHOD_START", "{", "Builder < DecoderColumnHandle ,    FieldDecoder <  ?  >  >    map    =    ImmutableMap . builder (  )  ;", "for    ( DecoderColumnHandle   column    :    columns )     {", "map . put ( column ,     . DECODERS . get ( column . getDataFormat (  )  )  )  ;", "}", "return   map . build (  )  ;", "}", "METHOD_END"], "methodName": ["map"], "fileName": "com.facebook.presto.decoder.json.TestRFC2822JsonFieldDecoder"}, {"methodBody": ["METHOD_START", "{", "long   now    =     (  ( System . currentTimeMillis (  )  )     /     1  0  0  0  )     *     1  0  0  0  ;", "String   nowString    =    RFC 2  8  2  2 JsonFieldDecoder . FORMATTER . print ( now )  ;", "byte [  ]    json    =    String . format (  \"  {  \\  \" a _ number \\  \"  :  % d ,  \\  \" a _ string \\  \"  :  \\  \"  % s \\  \"  }  \"  ,    now ,    nowString )  . getBytes ( StandardCharsets . UTF _  8  )  ;", "JsonRowDecoder   rowDecoder    =    new   JsonRowDecoder (  . PROVIDER . get (  )  )  ;", "DecoderTestColumnHandle   row 1     =    new   DecoderTestColumnHandle (  \"  \"  ,     0  ,     \" row 1  \"  ,    BigintType . BIGINT ,     \" a _ number \"  ,    FieldDecoder . DEFAULT _ FIELD _ DECODER _ NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 2     =    new   DecoderTestColumnHandle (  \"  \"  ,     1  ,     \" row 2  \"  ,    createVarcharType (  1  0  0  )  ,     \" a _ string \"  ,    FieldDecoder . DEFAULT _ FIELD _ DECODER _ NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 3     =    new   DecoderTestColumnHandle (  \"  \"  ,     2  ,     \" row 3  \"  ,    BigintType . BIGINT ,     \" a _ number \"  ,    RFC 2  8  2  2 JsonFieldDecoder . NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 4     =    new   DecoderTestColumnHandle (  \"  \"  ,     3  ,     \" row 4  \"  ,    BigintType . BIGINT ,     \" a _ string \"  ,    RFC 2  8  2  2 JsonFieldDecoder . NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 5     =    new   DecoderTestColumnHandle (  \"  \"  ,     4  ,     \" row 5  \"  ,    createVarcharType (  1  0  0  )  ,     \" a _ number \"  ,    RFC 2  8  2  2 JsonFieldDecoder . NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 6     =    new   DecoderTestColumnHandle (  \"  \"  ,     5  ,     \" row 6  \"  ,    createVarcharType (  1  0  0  )  ,     \" a _ string \"  ,    RFC 2  8  2  2 JsonFieldDecoder . NAME ,    null ,    false ,    false ,    false )  ;", "List < DecoderColumnHandle >    columns    =    ImmutableList . of ( row 1  ,    row 2  ,    row 3  ,    row 4  ,    row 5  ,    row 6  )  ;", "Set < FieldValueProvider >    providers    =    new   HashSet <  >  (  )  ;", "boolean   corrupt    =    rowDecoder . decodeRow ( json ,    null ,    providers ,    columns ,     . map ( columns )  )  ;", "assertFalse ( corrupt )  ;", "assertEquals ( providers . size (  )  ,    columns . size (  )  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 1  ,    now )  ;", "DecoderTestUtil . checkValue ( providers ,    row 2  ,    nowString )  ;", "DecoderTestUtil . checkValue ( providers ,    row 3  ,    now )  ;", "DecoderTestUtil . checkValue ( providers ,    row 4  ,    now )  ;", "DecoderTestUtil . checkValue ( providers ,    row 5  ,    Long . toString ( now )  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 6  ,    nowString )  ;", "}", "METHOD_END"], "methodName": ["testBasicFormatting"], "fileName": "com.facebook.presto.decoder.json.TestRFC2822JsonFieldDecoder"}, {"methodBody": ["METHOD_START", "{", "byte [  ]    json    =     \"  {  }  \"  . getBytes ( StandardCharsets . UTF _  8  )  ;", "JsonRowDecoder   rowDecoder    =    new   JsonRowDecoder (  . PROVIDER . get (  )  )  ;", "DecoderTestColumnHandle   row 1     =    new   DecoderTestColumnHandle (  \"  \"  ,     0  ,     \" row 1  \"  ,    BigintType . BIGINT ,     \" a _ number \"  ,    FieldDecoder . DEFAULT _ FIELD _ DECODER _ NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 2     =    new   DecoderTestColumnHandle (  \"  \"  ,     1  ,     \" row 2  \"  ,    createVarcharType (  1  0  0  )  ,     \" a _ string \"  ,    FieldDecoder . DEFAULT _ FIELD _ DECODER _ NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 3     =    new   DecoderTestColumnHandle (  \"  \"  ,     2  ,     \" row 3  \"  ,    BigintType . BIGINT ,     \" a _ number \"  ,    RFC 2  8  2  2 JsonFieldDecoder . NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 4     =    new   DecoderTestColumnHandle (  \"  \"  ,     3  ,     \" row 4  \"  ,    BigintType . BIGINT ,     \" a _ string \"  ,    RFC 2  8  2  2 JsonFieldDecoder . NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 5     =    new   DecoderTestColumnHandle (  \"  \"  ,     4  ,     \" row 5  \"  ,    createVarcharType (  1  0  0  )  ,     \" a _ number \"  ,    RFC 2  8  2  2 JsonFieldDecoder . NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 6     =    new   DecoderTestColumnHandle (  \"  \"  ,     5  ,     \" row 6  \"  ,    createVarcharType (  1  0  0  )  ,     \" a _ string \"  ,    RFC 2  8  2  2 JsonFieldDecoder . NAME ,    null ,    false ,    false ,    false )  ;", "List < DecoderColumnHandle >    columns    =    ImmutableList . of ( row 1  ,    row 2  ,    row 3  ,    row 4  ,    row 5  ,    row 6  )  ;", "Set < FieldValueProvider >    providers    =    new   HashSet <  >  (  )  ;", "boolean   corrupt    =    rowDecoder . decodeRow ( json ,    null ,    providers ,    columns ,     . map ( columns )  )  ;", "assertFalse ( corrupt )  ;", "assertEquals ( providers . size (  )  ,    columns . size (  )  )  ;", "DecoderTestUtil . checkIsNull ( providers ,    row 1  )  ;", "DecoderTestUtil . checkIsNull ( providers ,    row 2  )  ;", "DecoderTestUtil . checkIsNull ( providers ,    row 3  )  ;", "DecoderTestUtil . checkIsNull ( providers ,    row 4  )  ;", "DecoderTestUtil . checkIsNull ( providers ,    row 5  )  ;", "DecoderTestUtil . checkIsNull ( providers ,    row 6  )  ;", "}", "METHOD_END"], "methodName": ["testNullValues"], "fileName": "com.facebook.presto.decoder.json.TestRFC2822JsonFieldDecoder"}, {"methodBody": ["METHOD_START", "{", "Builder < DecoderColumnHandle ,    FieldDecoder <  ?  >  >    map    =    ImmutableMap . builder (  )  ;", "for    ( DecoderColumnHandle   column    :    columns )     {", "map . put ( column ,     . DECODERS . get ( column . getDataFormat (  )  )  )  ;", "}", "return   map . build (  )  ;", "}", "METHOD_END"], "methodName": ["buildMap"], "fileName": "com.facebook.presto.decoder.json.TestSecondsSinceEpochJsonFieldDecoder"}, {"methodBody": ["METHOD_START", "{", "long   now    =     ( System . currentTimeMillis (  )  )     /     1  0  0  0  ;", "String   nowString    =    SecondsSinceEpochJsonFieldDecoder . FORMATTER . print (  ( now    *     1  0  0  0  )  )  ;", "byte [  ]    json    =    String . format (  \"  {  \\  \" a _ number \\  \"  :  % d ,  \\  \" a _ string \\  \"  :  \\  \"  % d \\  \"  }  \"  ,    now ,    now )  . getBytes ( StandardCharsets . UTF _  8  )  ;", "JsonRowDecoder   rowDecoder    =    new   JsonRowDecoder (  . PROVIDER . get (  )  )  ;", "DecoderTestColumnHandle   row 1     =    new   DecoderTestColumnHandle (  \"  \"  ,     0  ,     \" row 1  \"  ,    BigintType . BIGINT ,     \" a _ number \"  ,    FieldDecoder . DEFAULT _ FIELD _ DECODER _ NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 2     =    new   DecoderTestColumnHandle (  \"  \"  ,     1  ,     \" row 2  \"  ,    createVarcharType (  1  0  0  )  ,     \" a _ string \"  ,    FieldDecoder . DEFAULT _ FIELD _ DECODER _ NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 3     =    new   DecoderTestColumnHandle (  \"  \"  ,     2  ,     \" row 3  \"  ,    BigintType . BIGINT ,     \" a _ number \"  ,    SecondsSinceEpochJsonFieldDecoder . NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 4     =    new   DecoderTestColumnHandle (  \"  \"  ,     3  ,     \" row 4  \"  ,    BigintType . BIGINT ,     \" a _ string \"  ,    SecondsSinceEpochJsonFieldDecoder . NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 5     =    new   DecoderTestColumnHandle (  \"  \"  ,     4  ,     \" row 5  \"  ,    createVarcharType (  1  0  0  )  ,     \" a _ number \"  ,    SecondsSinceEpochJsonFieldDecoder . NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 6     =    new   DecoderTestColumnHandle (  \"  \"  ,     5  ,     \" row 6  \"  ,    createVarcharType (  1  0  0  )  ,     \" a _ string \"  ,    SecondsSinceEpochJsonFieldDecoder . NAME ,    null ,    false ,    false ,    false )  ;", "List < DecoderColumnHandle >    columns    =    ImmutableList . of ( row 1  ,    row 2  ,    row 3  ,    row 4  ,    row 5  ,    row 6  )  ;", "Set < FieldValueProvider >    providers    =    new   HashSet <  >  (  )  ;", "boolean   corrupt    =    rowDecoder . decodeRow ( json ,    null ,    providers ,    columns ,     . buildMap ( columns )  )  ;", "assertFalse ( corrupt )  ;", "assertEquals ( providers . size (  )  ,    columns . size (  )  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 1  ,    now )  ;", "DecoderTestUtil . checkValue ( providers ,    row 2  ,    Long . toString ( now )  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 3  ,     ( now    *     1  0  0  0  )  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 4  ,     ( now    *     1  0  0  0  )  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 5  ,    nowString )  ;", "DecoderTestUtil . checkValue ( providers ,    row 6  ,    nowString )  ;", "}", "METHOD_END"], "methodName": ["testBasicFormatting"], "fileName": "com.facebook.presto.decoder.json.TestSecondsSinceEpochJsonFieldDecoder"}, {"methodBody": ["METHOD_START", "{", "byte [  ]    json    =     \"  {  }  \"  . getBytes ( StandardCharsets . UTF _  8  )  ;", "JsonRowDecoder   rowDecoder    =    new   JsonRowDecoder (  . PROVIDER . get (  )  )  ;", "DecoderTestColumnHandle   row 1     =    new   DecoderTestColumnHandle (  \"  \"  ,     0  ,     \" row 1  \"  ,    BigintType . BIGINT ,     \" a _ number \"  ,    FieldDecoder . DEFAULT _ FIELD _ DECODER _ NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 2     =    new   DecoderTestColumnHandle (  \"  \"  ,     1  ,     \" row 2  \"  ,    createVarcharType (  1  0  0  )  ,     \" a _ string \"  ,    FieldDecoder . DEFAULT _ FIELD _ DECODER _ NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 3     =    new   DecoderTestColumnHandle (  \"  \"  ,     2  ,     \" row 3  \"  ,    BigintType . BIGINT ,     \" a _ number \"  ,    SecondsSinceEpochJsonFieldDecoder . NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 4     =    new   DecoderTestColumnHandle (  \"  \"  ,     3  ,     \" row 4  \"  ,    BigintType . BIGINT ,     \" a _ string \"  ,    SecondsSinceEpochJsonFieldDecoder . NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 5     =    new   DecoderTestColumnHandle (  \"  \"  ,     4  ,     \" row 5  \"  ,    createVarcharType (  1  0  0  )  ,     \" a _ number \"  ,    SecondsSinceEpochJsonFieldDecoder . NAME ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 6     =    new   DecoderTestColumnHandle (  \"  \"  ,     5  ,     \" row 6  \"  ,    createVarcharType (  1  0  0  )  ,     \" a _ string \"  ,    SecondsSinceEpochJsonFieldDecoder . NAME ,    null ,    false ,    false ,    false )  ;", "List < DecoderColumnHandle >    columns    =    ImmutableList . of ( row 1  ,    row 2  ,    row 3  ,    row 4  ,    row 5  ,    row 6  )  ;", "Set < FieldValueProvider >    providers    =    new   HashSet <  >  (  )  ;", "boolean   corrupt    =    rowDecoder . decodeRow ( json ,    null ,    providers ,    columns ,     . buildMap ( columns )  )  ;", "assertFalse ( corrupt )  ;", "assertEquals ( providers . size (  )  ,    columns . size (  )  )  ;", "DecoderTestUtil . checkIsNull ( providers ,    row 1  )  ;", "DecoderTestUtil . checkIsNull ( providers ,    row 2  )  ;", "DecoderTestUtil . checkIsNull ( providers ,    row 3  )  ;", "DecoderTestUtil . checkIsNull ( providers ,    row 4  )  ;", "DecoderTestUtil . checkIsNull ( providers ,    row 5  )  ;", "DecoderTestUtil . checkIsNull ( providers ,    row 6  )  ;", "}", "METHOD_END"], "methodName": ["testNullValues"], "fileName": "com.facebook.presto.decoder.json.TestSecondsSinceEpochJsonFieldDecoder"}, {"methodBody": ["METHOD_START", "{", "Builder < DecoderColumnHandle ,    FieldDecoder <  ?  >  >    map    =    ImmutableMap . builder (  )  ;", "for    ( DecoderColumnHandle   column    :    columns )     {", "map . put ( column ,     . DEFAULT _ FIELD _ DECODER )  ;", "}", "return   map . build (  )  ;", "}", "METHOD_END"], "methodName": ["buildMap"], "fileName": "com.facebook.presto.decoder.raw.TestRawDecoder"}, {"methodBody": ["METHOD_START", "{", "ByteBuffer   buf    =    ByteBuffer . allocate (  1  0  0  )  ;", "buf . put (  (  ( byte )     (  1  2  7  )  )  )  ;", "buf . putLong (  0  )  ;", "buf . put (  (  ( byte )     (  1  2  6  )  )  )  ;", "buf . putLong (  1  )  ;", "buf . put (  (  ( byte )     (  1  2  5  )  )  )  ;", "buf . putInt (  0  )  ;", "buf . put (  (  ( byte )     (  1  2  4  )  )  )  ;", "buf . putInt (  1  )  ;", "buf . put (  (  ( byte )     (  1  2  3  )  )  )  ;", "buf . putShort (  (  ( short )     (  0  )  )  )  ;", "buf . put (  (  ( byte )     (  1  2  2  )  )  )  ;", "buf . putShort (  (  ( short )     (  1  )  )  )  ;", "buf . put (  (  ( byte )     (  1  2  1  )  )  )  ;", "buf . put (  (  ( byte )     (  0  )  )  )  ;", "buf . put (  (  ( byte )     (  1  2  0  )  )  )  ;", "buf . put (  (  ( byte )     (  1  )  )  )  ;", "byte [  ]    row    =    new   byte [ buf . position (  )  ]  ;", "System . arraycopy ( buf . array (  )  ,     0  ,    row ,     0  ,    buf . position (  )  )  ;", "RawRowDecoder   rowDecoder    =    new   RawRowDecoder (  )  ;", "DecoderTestColumnHandle   row 0  1     =    new   DecoderTestColumnHandle (  \"  \"  ,     0  ,     \" row 0  1  \"  ,    BigintType . BIGINT ,     \"  0  \"  ,     \" BYTE \"  ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 0  2     =    new   DecoderTestColumnHandle (  \"  \"  ,     1  ,     \" row 0  2  \"  ,    BooleanType . BOOLEAN ,     \"  1  \"  ,     \" LONG \"  ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 0  3     =    new   DecoderTestColumnHandle (  \"  \"  ,     2  ,     \" row 0  3  \"  ,    BigintType . BIGINT ,     \"  9  \"  ,     \" BYTE \"  ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 0  4     =    new   DecoderTestColumnHandle (  \"  \"  ,     3  ,     \" row 0  4  \"  ,    BooleanType . BOOLEAN ,     \"  1  0  \"  ,     \" LONG \"  ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 1  1     =    new   DecoderTestColumnHandle (  \"  \"  ,     4  ,     \" row 1  1  \"  ,    BigintType . BIGINT ,     \"  1  8  \"  ,     \" BYTE \"  ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 1  2     =    new   DecoderTestColumnHandle (  \"  \"  ,     5  ,     \" row 1  2  \"  ,    BooleanType . BOOLEAN ,     \"  1  9  \"  ,     \" INT \"  ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 1  3     =    new   DecoderTestColumnHandle (  \"  \"  ,     6  ,     \" row 1  3  \"  ,    BigintType . BIGINT ,     \"  2  3  \"  ,     \" BYTE \"  ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 1  4     =    new   DecoderTestColumnHandle (  \"  \"  ,     7  ,     \" row 1  4  \"  ,    BooleanType . BOOLEAN ,     \"  2  4  \"  ,     \" INT \"  ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 2  1     =    new   DecoderTestColumnHandle (  \"  \"  ,     8  ,     \" row 2  1  \"  ,    BigintType . BIGINT ,     \"  2  8  \"  ,     \" BYTE \"  ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 2  2     =    new   DecoderTestColumnHandle (  \"  \"  ,     9  ,     \" row 2  2  \"  ,    BooleanType . BOOLEAN ,     \"  2  9  \"  ,     \" SHORT \"  ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 2  3     =    new   DecoderTestColumnHandle (  \"  \"  ,     1  0  ,     \" row 2  3  \"  ,    BigintType . BIGINT ,     \"  3  1  \"  ,     \" BYTE \"  ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 2  4     =    new   DecoderTestColumnHandle (  \"  \"  ,     1  1  ,     \" row 2  4  \"  ,    BooleanType . BOOLEAN ,     \"  3  2  \"  ,     \" SHORT \"  ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 3  1     =    new   DecoderTestColumnHandle (  \"  \"  ,     1  2  ,     \" row 3  1  \"  ,    BigintType . BIGINT ,     \"  3  4  \"  ,     \" BYTE \"  ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 3  2     =    new   DecoderTestColumnHandle (  \"  \"  ,     1  3  ,     \" row 3  2  \"  ,    BooleanType . BOOLEAN ,     \"  3  5  \"  ,     \" BYTE \"  ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 3  3     =    new   DecoderTestColumnHandle (  \"  \"  ,     1  4  ,     \" row 3  3  \"  ,    BigintType . BIGINT ,     \"  3  6  \"  ,     \" BYTE \"  ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 3  4     =    new   DecoderTestColumnHandle (  \"  \"  ,     1  5  ,     \" row 3  4  \"  ,    BooleanType . BOOLEAN ,     \"  3  7  \"  ,     \" BYTE \"  ,    null ,    false ,    false ,    false )  ;", "List < DecoderColumnHandle >    columns    =    ImmutableList . of ( row 0  1  ,    row 0  2  ,    row 0  3  ,    row 0  4  ,    row 1  1  ,    row 1  2  ,    row 1  3  ,    row 1  4  ,    row 2  1  ,    row 2  2  ,    row 2  3  ,    row 2  4  ,    row 3  1  ,    row 3  2  ,    row 3  3  ,    row 3  4  )  ;", "Set < FieldValueProvider >    providers    =    new   HashSet <  >  (  )  ;", "boolean   corrupt    =    rowDecoder . decodeRow ( row ,    null ,    providers ,    columns ,     . buildMap ( columns )  )  ;", "assertFalse ( corrupt )  ;", "assertEquals ( providers . size (  )  ,    columns . size (  )  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 0  1  ,     1  2  7  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 0  2  ,    false )  ;", "DecoderTestUtil . checkValue ( providers ,    row 0  3  ,     1  2  6  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 0  4  ,    true )  ;", "DecoderTestUtil . checkValue ( providers ,    row 1  1  ,     1  2  5  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 1  2  ,    false )  ;", "DecoderTestUtil . checkValue ( providers ,    row 1  3  ,     1  2  4  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 1  4  ,    true )  ;", "DecoderTestUtil . checkValue ( providers ,    row 2  1  ,     1  2  3  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 2  2  ,    false )  ;", "DecoderTestUtil . checkValue ( providers ,    row 2  3  ,     1  2  2  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 2  4  ,    true )  ;", "DecoderTestUtil . checkValue ( providers ,    row 3  1  ,     1  2  1  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 3  2  ,    false )  ;", "DecoderTestUtil . checkValue ( providers ,    row 3  3  ,     1  2  0  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 3  4  ,    true )  ;", "}", "METHOD_END"], "methodName": ["testBooleanStuff"], "fileName": "com.facebook.presto.decoder.raw.TestRawDecoder"}, {"methodBody": ["METHOD_START", "{", "RawRowDecoder   rowDecoder    =    new   RawRowDecoder (  )  ;", "byte [  ]    emptyRow    =    new   byte [  0  ]  ;", "DecoderTestColumnHandle   column    =    new   DecoderTestColumnHandle (  \"  \"  ,     0  ,     \" row 1  \"  ,    BigintType . BIGINT ,    null ,     \" LONG \"  ,    null ,    false ,    false ,    false )  ;", "List < DecoderColumnHandle >    columns    =    ImmutableList . of ( column )  ;", "Set < FieldValueProvider >    providers    =    new   HashSet <  >  (  )  ;", "boolean   corrupt    =    rowDecoder . decodeRow ( emptyRow ,    null ,    providers ,    columns ,     . buildMap ( columns )  )  ;", "assertFalse ( corrupt )  ;", "DecoderTestUtil . checkIsNull ( providers ,    column )  ;", "}", "METHOD_END"], "methodName": ["testEmptyRecord"], "fileName": "com.facebook.presto.decoder.raw.TestRawDecoder"}, {"methodBody": ["METHOD_START", "{", "String   str    =     \" Ich   bin   zwei   Oeltanks \"  ;", "byte [  ]    row    =    str . getBytes ( StandardCharsets . UTF _  8  )  ;", "RawRowDecoder   rowDecoder    =    new   RawRowDecoder (  )  ;", "DecoderTestColumnHandle   row 1     =    new   DecoderTestColumnHandle (  \"  \"  ,     0  ,     \" row 1  \"  ,    createVarcharType (  1  0  0  )  ,    null ,    null ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 2     =    new   DecoderTestColumnHandle (  \"  \"  ,     1  ,     \" row 2  \"  ,    createVarcharType (  1  0  0  )  ,     \"  0  \"  ,    null ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 3     =    new   DecoderTestColumnHandle (  \"  \"  ,     2  ,     \" row 3  \"  ,    createVarcharType (  1  0  0  )  ,     \"  0  :  4  \"  ,    null ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 4     =    new   DecoderTestColumnHandle (  \"  \"  ,     3  ,     \" row 4  \"  ,    createVarcharType (  1  0  0  )  ,     \"  5  :  8  \"  ,    null ,    null ,    false ,    false ,    false )  ;", "List < DecoderColumnHandle >    columns    =    ImmutableList . of ( row 1  ,    row 2  ,    row 3  ,    row 4  )  ;", "Set < FieldValueProvider >    providers    =    new   HashSet <  >  (  )  ;", "boolean   corrupt    =    rowDecoder . decodeRow ( row ,    null ,    providers ,    columns ,     . buildMap ( columns )  )  ;", "assertFalse ( corrupt )  ;", "assertEquals ( providers . size (  )  ,    columns . size (  )  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 1  ,    str )  ;", "DecoderTestUtil . checkValue ( providers ,    row 2  ,    str )  ;", "DecoderTestUtil . checkValue ( providers ,    row 3  ,    str . substring (  0  ,     4  )  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 4  ,    str . substring (  5  ,     8  )  )  ;", "}", "METHOD_END"], "methodName": ["testFixedWithString"], "fileName": "com.facebook.presto.decoder.raw.TestRawDecoder"}, {"methodBody": ["METHOD_START", "{", "ByteBuffer   buf    =    ByteBuffer . allocate (  1  0  0  )  ;", "buf . putDouble ( Math . PI )  ;", "buf . putFloat (  (  ( float )     ( Math . E )  )  )  ;", "buf . putDouble ( Math . E )  ;", "byte [  ]    row    =    new   byte [ buf . position (  )  ]  ;", "System . arraycopy ( buf . array (  )  ,     0  ,    row ,     0  ,    buf . position (  )  )  ;", "RawRowDecoder   rowDecoder    =    new   RawRowDecoder (  )  ;", "DecoderTestColumnHandle   row 1     =    new   DecoderTestColumnHandle (  \"  \"  ,     0  ,     \" row 1  \"  ,    createVarcharType (  1  0  0  )  ,    null ,     \" DOUBLE \"  ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 2     =    new   DecoderTestColumnHandle (  \"  \"  ,     1  ,     \" row 2  \"  ,    createVarcharType (  1  0  0  )  ,     \"  8  \"  ,     \" FLOAT \"  ,    null ,    false ,    false ,    false )  ;", "List < DecoderColumnHandle >    columns    =    ImmutableList . of ( row 1  ,    row 2  )  ;", "Set < FieldValueProvider >    providers    =    new   HashSet <  >  (  )  ;", "boolean   corrupt    =    rowDecoder . decodeRow ( row ,    null ,    providers ,    columns ,     . buildMap ( columns )  )  ;", "assertFalse ( corrupt )  ;", "assertEquals ( providers . size (  )  ,    columns . size (  )  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 1  ,    Math . PI )  ;", "DecoderTestUtil . checkValue ( providers ,    row 2  ,    Math . E )  ;", "}", "METHOD_END"], "methodName": ["testFloatStuff"], "fileName": "com.facebook.presto.decoder.raw.TestRawDecoder"}, {"methodBody": ["METHOD_START", "{", "ByteBuffer   buf    =    ByteBuffer . allocate (  1  0  0  )  ;", "buf . putLong (  4  8  1  5  1  6  2  3  4  2 L )  ;", "buf . putInt (  1  2  3  4  5  6  7  8  )  ;", "buf . putShort (  (  ( short )     (  4  5  6  7  )  )  )  ;", "buf . put (  (  ( byte )     (  1  2  3  )  )  )  ;", "buf . put (  \" Ich   bin   zwei   Oeltanks \"  . getBytes ( StandardCharsets . UTF _  8  )  )  ;", "byte [  ]    row    =    new   byte [ buf . position (  )  ]  ;", "System . arraycopy ( buf . array (  )  ,     0  ,    row ,     0  ,    buf . position (  )  )  ;", "RawRowDecoder   rowDecoder    =    new   RawRowDecoder (  )  ;", "DecoderTestColumnHandle   row 1     =    new   DecoderTestColumnHandle (  \"  \"  ,     0  ,     \" row 1  \"  ,    BigintType . BIGINT ,     \"  0  \"  ,     \" LONG \"  ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 2     =    new   DecoderTestColumnHandle (  \"  \"  ,     1  ,     \" row 2  \"  ,    BigintType . BIGINT ,     \"  8  \"  ,     \" INT \"  ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 3     =    new   DecoderTestColumnHandle (  \"  \"  ,     2  ,     \" row 3  \"  ,    BigintType . BIGINT ,     \"  1  2  \"  ,     \" SHORT \"  ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 4     =    new   DecoderTestColumnHandle (  \"  \"  ,     3  ,     \" row 4  \"  ,    BigintType . BIGINT ,     \"  1  4  \"  ,     \" BYTE \"  ,    null ,    false ,    false ,    false )  ;", "DecoderTestColumnHandle   row 5     =    new   DecoderTestColumnHandle (  \"  \"  ,     4  ,     \" row 5  \"  ,    createVarcharType (  1  0  )  ,     \"  1  5  \"  ,    null ,    null ,    false ,    false ,    false )  ;", "List < DecoderColumnHandle >    columns    =    ImmutableList . of ( row 1  ,    row 2  ,    row 3  ,    row 4  ,    row 5  )  ;", "Set < FieldValueProvider >    providers    =    new   HashSet <  >  (  )  ;", "boolean   corrupt    =    rowDecoder . decodeRow ( row ,    null ,    providers ,    columns ,     . buildMap ( columns )  )  ;", "assertFalse ( corrupt )  ;", "assertEquals ( providers . size (  )  ,    columns . size (  )  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 1  ,     4  8  1  5  1  6  2  3  4  2 L )  ;", "DecoderTestUtil . checkValue ( providers ,    row 2  ,     1  2  3  4  5  6  7  8  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 3  ,     4  5  6  7  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 4  ,     1  2  3  )  ;", "DecoderTestUtil . checkValue ( providers ,    row 5  ,     \" Ich   bin   zw \"  )  ;", "}", "METHOD_END"], "methodName": ["testSimple"], "fileName": "com.facebook.presto.decoder.raw.TestRawDecoder"}, {"methodBody": ["METHOD_START", "{", "FieldValueProvider   provider    =    DecoderTestUtil . findValueProvider ( providers ,    handle )  ;", "assertNotNull ( provider )  ;", "assertTrue ( provider . isNull (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkIsNull"], "fileName": "com.facebook.presto.decoder.util.DecoderTestUtil"}, {"methodBody": ["METHOD_START", "{", "FieldValueProvider   provider    =    DecoderTestUtil . findValueProvider ( providers ,    handle )  ;", "assertNotNull ( provider )  ;", "assertEquals ( provider . getBoolean (  )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["checkValue"], "fileName": "com.facebook.presto.decoder.util.DecoderTestUtil"}, {"methodBody": ["METHOD_START", "{", "FieldValueProvider   provider    =    DecoderTestUtil . findValueProvider ( providers ,    handle )  ;", "assertNotNull ( provider )  ;", "assertEquals ( provider . getDouble (  )  ,    value ,     1  .  0 E -  4  )  ;", "}", "METHOD_END"], "methodName": ["checkValue"], "fileName": "com.facebook.presto.decoder.util.DecoderTestUtil"}, {"methodBody": ["METHOD_START", "{", "FieldValueProvider   provider    =    DecoderTestUtil . findValueProvider ( providers ,    handle )  ;", "assertNotNull ( provider )  ;", "assertEquals ( new   String ( provider . getSlice (  )  . getBytes (  )  ,    StandardCharsets . UTF _  8  )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["checkValue"], "fileName": "com.facebook.presto.decoder.util.DecoderTestUtil"}, {"methodBody": ["METHOD_START", "{", "FieldValueProvider   provider    =    DecoderTestUtil . findValueProvider ( providers ,    handle )  ;", "assertNotNull ( provider )  ;", "assertEquals ( provider . getLong (  )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["checkValue"], "fileName": "com.facebook.presto.decoder.util.DecoderTestUtil"}, {"methodBody": ["METHOD_START", "{", "for    ( FieldValueProviprovi :    provi )     {", "if    ( proviaccept ( handle )  )     {", "return   provi", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["findValueProvider"], "fileName": "com.facebook.presto.decoder.util.DecoderTestUtil"}]