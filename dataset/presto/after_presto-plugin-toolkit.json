[{"methodBody": ["METHOD_START", "{", "return   schemaRules ;", "}", "METHOD_END"], "methodName": ["getSchemaRules"], "fileName": "com.facebook.presto.plugin.base.security.AccessControlRules"}, {"methodBody": ["METHOD_START", "{", "return   sessionPropertyRules ;", "}", "METHOD_END"], "methodName": ["getSessionPropertyRules"], "fileName": "com.facebook.presto.plugin.base.security.AccessControlRules"}, {"methodBody": ["METHOD_START", "{", "return   tableRules ;", "}", "METHOD_END"], "methodName": ["getTableRules"], "fileName": "com.facebook.presto.plugin.base.security.AccessControlRules"}, {"methodBody": ["METHOD_START", "{", "for    ( SessionPropertyAccessControlRule   rule    :    sessionPropertyRules )     {", "Optional < Boolean >    allowed    =    rule . match ( identity . getUser (  )  ,    property )  ;", "if    (  ( allowed . isPresent (  )  )     &  &     ( allowed . get (  )  )  )     {", "return   true ;", "}", "if    (  ( allowed . isPresent (  )  )     &  &     (  !  ( allowed . get (  )  )  )  )     {", "return   false ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["canSetSessionProperty"], "fileName": "com.facebook.presto.plugin.base.security.FileBasedAccessControl"}, {"methodBody": ["METHOD_START", "{", "if    ( FileBasedAccessControl . INFORMATION _ SCHEMA _ NAME . equals ( tableName . getSchemaName (  )  )  )     {", "return   true ;", "}", "for    ( TableAccessControlRule   rule    :    tableRules )     {", "Optional < Set < TableAccessControlRule . TablePrivilege >  >    tablePrivileges    =    rule . match ( identity . getUser (  )  ,    tableName )  ;", "if    ( tablePrivileges . isPresent (  )  )     {", "return   tablePrivileges . get (  )  . containsAll ( ImmutableSet . copyOf ( requiredPrivileges )  )  ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["checkTablePermission"], "fileName": "com.facebook.presto.plugin.base.security.FileBasedAccessControl"}, {"methodBody": ["METHOD_START", "{", "throw   new   AccessDeniedException (  (  \" Cannot   set   catalog   session   property :     \"     +    propertyName )  )  ;", "}", "METHOD_END"], "methodName": ["denySetSessionProperty"], "fileName": "com.facebook.presto.plugin.base.security.FileBasedAccessControl"}, {"methodBody": ["METHOD_START", "{", "for    ( SchemaAccessControlRule   rule    :    schemaRules )     {", "Optional < Boolean >    owner    =    rule . match ( identity . getUser (  )  ,    schemaName )  ;", "if    ( owner . isPresent (  )  )     {", "return   owner . get (  )  ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isDatabaseOwner"], "fileName": "com.facebook.presto.plugin.base.security.FileBasedAccessControl"}, {"methodBody": ["METHOD_START", "{", "return   configFile ;", "}", "METHOD_END"], "methodName": ["getConfigFile"], "fileName": "com.facebook.presto.plugin.base.security.FileBasedAccessControlConfig"}, {"methodBody": ["METHOD_START", "{", "this . configFile    =    configFile ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setConfigFile"], "fileName": "com.facebook.presto.plugin.base.security.FileBasedAccessControlConfig"}, {"methodBody": ["METHOD_START", "{", "if    (  ( userRegex . map (  (    regex )     -  >    regex . matcher ( user )  . matches (  )  )  . orElse ( true )  )     &  &     ( schemaRegex . map (  (    regex )     -  >    regex . matcher ( schema )  . matches (  )  )  . orElse ( true )  )  )     {", "return   Optional . of ( owner )  ;", "}", "return   Optional . empty (  )  ;", "}", "METHOD_END"], "methodName": ["match"], "fileName": "com.facebook.presto.plugin.base.security.SchemaAccessControlRule"}, {"methodBody": ["METHOD_START", "{", "if    (  ( userRegex . map (  (    regex )     -  >    regex . matcher ( user )  . matches (  )  )  . orElse ( true )  )     &  &     ( propertyRegex . map (  (    regex )     -  >    regex . matcher ( property )  . matches (  )  )  . orElse ( true )  )  )     {", "return   Optional . of ( allow )  ;", "}", "return   Optional . empty (  )  ;", "}", "METHOD_END"], "methodName": ["match"], "fileName": "com.facebook.presto.plugin.base.security.SessionPropertyAccessControlRule"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( userRegex . map (  (    regex )     -  >    regex . matcher ( user )  . matches (  )  )  . orElse ( true )  )     &  &     ( schemaRegex . map (  (    regex )     -  >    regex . matcher ( table . getSchemaName (  )  )  . matches (  )  )  . orElse ( true )  )  )     &  &     ( tableRegex . map (  (    regex )     -  >    regex . matcher ( table . getTableName (  )  )  . matches (  )  )  . orElse ( true )  )  )     {", "return   Optional . of ( privileges )  ;", "}", "return   Optional . empty (  )  ;", "}", "METHOD_END"], "methodName": ["match"], "fileName": "com.facebook.presto.plugin.base.security.TableAccessControlRule"}, {"methodBody": ["METHOD_START", "{", "assertThrows ( AccessDeniedException . class ,    runnable )  ;", "}", "METHOD_END"], "methodName": ["assertDenied"], "fileName": "com.facebook.presto.plugin.base.security.TestFileBasedAccessControl"}, {"methodBody": ["METHOD_START", "{", "String   path    =    this . getClass (  )  . getClassLoader (  )  . getResource ( fileName )  . getPath (  )  ;", "Config   config    =    new   Config (  )  ;", "config . setConfigFile ( path )  ;", "return   new    ( config ,    JsonCodec . jsonCodec ( AccessControlRules . class )  )  ;", "}", "METHOD_END"], "methodName": ["createAccessControl"], "fileName": "com.facebook.presto.plugin.base.security.TestFileBasedAccessControl"}, {"methodBody": ["METHOD_START", "{", "ConnectorAccessControl   accessControl    =    createAccessControl (  \" schema . json \"  )  ;", "accessControl . checkCanCreateTable (  . TRANSACTION _ HANDLE ,     . user (  \" admin \"  )  ,    new   SchemaTableName (  \" test \"  ,     \" test \"  )  )  ;", "accessControl . checkCanCreateTable (  . TRANSACTION _ HANDLE ,     . user (  \" bob \"  )  ,    new   SchemaTableName (  \" bob \"  ,     \" test \"  )  )  ;", ". assertDenied (  (  )     -  >    accessControl . checkCanCreateTable (  . TRANSACTION _ HANDLE ,    user (  \" bob \"  )  ,    new   SchemaTableName (  \" test \"  ,     \" test \"  )  )  )  ;", ". assertDenied (  (  )     -  >    accessControl . checkCanCreateTable (  . TRANSACTION _ HANDLE ,    user (  \" admin \"  )  ,    new   SchemaTableName (  \" secret \"  ,     \" test \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSchemaRules"], "fileName": "com.facebook.presto.plugin.base.security.TestFileBasedAccessControl"}, {"methodBody": ["METHOD_START", "{", "ConnectorAccessControl   accessControl    =    createAccessControl (  \" session _ property . json \"  )  ;", "accessControl . checkCanSetCatalogSessionProperty (  . user (  \" admin \"  )  ,     \" dangerous \"  )  ;", "accessControl . checkCanSetCatalogSessionProperty (  . user (  \" alice \"  )  ,     \" safe \"  )  ;", "accessControl . checkCanSetCatalogSessionProperty (  . user (  \" alice \"  )  ,     \" unsafe \"  )  ;", "accessControl . checkCanSetCatalogSessionProperty (  . user (  \" bob \"  )  ,     \" safe \"  )  ;", ". assertDenied (  (  )     -  >    accessControl . checkCanSetCatalogSessionProperty ( user (  \" bob \"  )  ,     \" unsafe \"  )  )  ;", ". assertDenied (  (  )     -  >    accessControl . checkCanSetCatalogSessionProperty ( user (  \" alice \"  )  ,     \" dangerous \"  )  )  ;", ". assertDenied (  (  )     -  >    accessControl . checkCanSetCatalogSessionProperty ( user (  \" charlie \"  )  ,     \" safe \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testSessionPropertyRules"], "fileName": "com.facebook.presto.plugin.base.security.TestFileBasedAccessControl"}, {"methodBody": ["METHOD_START", "{", "ConnectorAccessControl   accessControl    =    createAccessControl (  \" table . json \"  )  ;", "accessControl . checkCanSelectFromTable (  . TRANSACTION _ HANDLE ,     . user (  \" alice \"  )  ,    new   SchemaTableName (  \" test \"  ,     \" test \"  )  )  ;", "accessControl . checkCanSelectFromTable (  . TRANSACTION _ HANDLE ,     . user (  \" alice \"  )  ,    new   SchemaTableName (  \" bobschema \"  ,     \" bobtable \"  )  )  ;", "accessControl . checkCanSelectFromTable (  . TRANSACTION _ HANDLE ,     . user (  \" bob \"  )  ,    new   SchemaTableName (  \" bobschema \"  ,     \" bobtable \"  )  )  ;", "accessControl . checkCanInsertIntoTable (  . TRANSACTION _ HANDLE ,     . user (  \" bob \"  )  ,    new   SchemaTableName (  \" bobschema \"  ,     \" bobtable \"  )  )  ;", "accessControl . checkCanDeleteFromTable (  . TRANSACTION _ HANDLE ,     . user (  \" bob \"  )  ,    new   SchemaTableName (  \" bobschema \"  ,     \" bobtable \"  )  )  ;", "accessControl . checkCanSelectFromTable (  . TRANSACTION _ HANDLE ,     . user (  \" joe \"  )  ,    new   SchemaTableName (  \" bobschema \"  ,     \" bobtable \"  )  )  ;", "accessControl . checkCanCreateViewWithSelectFromTable (  . TRANSACTION _ HANDLE ,     . user (  \" bob \"  )  ,    new   SchemaTableName (  \" bobschema \"  ,     \" bobtable \"  )  )  ;", "accessControl . checkCanCreateViewWithSelectFromView (  . TRANSACTION _ HANDLE ,     . user (  \" bob \"  )  ,    new   SchemaTableName (  \" bobschema \"  ,     \" bobtable \"  )  )  ;", "accessControl . checkCanDropTable (  . TRANSACTION _ HANDLE ,     . user (  \" admin \"  )  ,    new   SchemaTableName (  \" bobschema \"  ,     \" bobtable \"  )  )  ;", ". assertDenied (  (  )     -  >    accessControl . checkCanInsertIntoTable (  . TRANSACTION _ HANDLE ,    user (  \" alice \"  )  ,    new   SchemaTableName (  \" bobschema \"  ,     \" bobtable \"  )  )  )  ;", ". assertDenied (  (  )     -  >    accessControl . checkCanDropTable (  . TRANSACTION _ HANDLE ,    user (  \" bob \"  )  ,    new   SchemaTableName (  \" bobschema \"  ,     \" bobtable \"  )  )  )  ;", ". assertDenied (  (  )     -  >    accessControl . checkCanInsertIntoTable (  . TRANSACTION _ HANDLE ,    user (  \" bob \"  )  ,    new   SchemaTableName (  \" test \"  ,     \" test \"  )  )  )  ;", ". assertDenied (  (  )     -  >    accessControl . checkCanSelectFromTable (  . TRANSACTION _ HANDLE ,    user (  \" admin \"  )  ,    new   SchemaTableName (  \" secret \"  ,     \" secret \"  )  )  )  ;", ". assertDenied (  (  )     -  >    accessControl . checkCanSelectFromTable (  . TRANSACTION _ HANDLE ,    user (  \" joe \"  )  ,    new   SchemaTableName (  \" secret \"  ,     \" secret \"  )  )  )  ;", ". assertDenied (  (  )     -  >    accessControl . checkCanCreateViewWithSelectFromTable (  . TRANSACTION _ HANDLE ,    user (  \" joe \"  )  ,    new   SchemaTableName (  \" bobschema \"  ,     \" bobtable \"  )  )  )  ;", ". assertDenied (  (  )     -  >    accessControl . checkCanCreateViewWithSelectFromView (  . TRANSACTION _ HANDLE ,    user (  \" joe \"  )  ,    new   SchemaTableName (  \" bobschema \"  ,     \" bobtable \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testTableRules"], "fileName": "com.facebook.presto.plugin.base.security.TestFileBasedAccessControl"}, {"methodBody": ["METHOD_START", "{", "return   new   Identity ( name ,    Optional . empty (  )  )  ;", "}", "METHOD_END"], "methodName": ["user"], "fileName": "com.facebook.presto.plugin.base.security.TestFileBasedAccessControl"}, {"methodBody": ["METHOD_START", "{", "ConfigAssertions . assertRecordedDefaults ( ConfigAssertions . recordDefaults ( FileBasedAccessControlConfig . class )  . setConfigFile ( null )  )  ;", "}", "METHOD_END"], "methodName": ["testDefaults"], "fileName": "com.facebook.presto.plugin.base.security.TestFileBasedAccessControlConfig"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    properties    =    new   Builder < String ,    String >  (  )  . put (  \" security . config - file \"  ,     \"  / test . json \"  )  . build (  )  ;", "expected    =    new    (  )  . setConfigFile (  \"  / test . json \"  )  ;", "ConfigAssertions . assertFullMapping ( properties ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testExplicitPropertyMappings"], "fileName": "com.facebook.presto.plugin.base.security.TestFileBasedAccessControlConfig"}]