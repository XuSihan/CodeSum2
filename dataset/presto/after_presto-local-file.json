[{"methodBody": ["METHOD_START", "{", "checkState ( location . exists (  )  ,     \" location    % s   doesn ' t   exist \"  ,    location )  ;", "if    (  !  ( pattern . isPresent (  )  )  )     {", "return   ImmutableList . of ( location )  ;", "}", "checkState ( location . isDirectory (  )  ,     \" location    % s   is   not   a   directory \"  ,    location )  ;", "try    ( DirectoryStream < Path >    paths    =    Files . newDirectoryStream ( location . toPath (  )  ,    pattern . get (  )  )  )     {", "ImmutableList . Builder < File >    builder    =    ImmutableList . builder (  )  ;", "for    ( Path   path    :    paths )     {", "builder . add ( path . toFile (  )  )  ;", "}", "List < File >    files    =    builder . build (  )  ;", "if    ( files . isEmpty (  )  )     {", "throw   new   PrestoException ( LocalFileErrorCode . LOCAL _ FILE _ NO _ FILES ,     (  \" No   matching   files   found   in   directory :     \"     +     ( location )  )  )  ;", "}", "return   files . stream (  )  . sorted (  (    o 1  ,    o 2  )     -  >    Long . compare ( o 2  . lastModified (  )  ,    o 1  . lastModified (  )  )  )  . collect ( Collectors . toList (  )  )  ;", "}    catch    ( IOException   e )     {", "throw   new   PrestoException ( LocalFileErrorCode . LOCAL _ FILE _ FILESYSTEM _ ERROR ,     (  \" Error   listing   files   in   directory :     \"     +     ( location )  )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["files"], "fileName": "com.facebook.presto.localfile.DataLocation"}, {"methodBody": ["METHOD_START", "{", "return   location ;", "}", "METHOD_END"], "methodName": ["getLocation"], "fileName": "com.facebook.presto.localfile.DataLocation"}, {"methodBody": ["METHOD_START", "{", "return   pattern ;", "}", "METHOD_END"], "methodName": ["getPattern"], "fileName": "com.facebook.presto.localfile.DataLocation"}, {"methodBody": ["METHOD_START", "{", "return   columnName ;", "}", "METHOD_END"], "methodName": ["getColumnName"], "fileName": "com.facebook.presto.localfile.LocalFileColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   columnType ;", "}", "METHOD_END"], "methodName": ["getColumnType"], "fileName": "com.facebook.presto.localfile.LocalFileColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   ordinalPosition ;", "}", "METHOD_END"], "methodName": ["getOrdinalPosition"], "fileName": "com.facebook.presto.localfile.LocalFileColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . spi . ColumnMetadata ( columnName ,    columnType )  ;", "}", "METHOD_END"], "methodName": ["toColumnMetadata"], "fileName": "com.facebook.presto.localfile.LocalFileColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   httpRequestLogFileNamePattern ;", "}", "METHOD_END"], "methodName": ["getHttpRequestLogFileNamePattern"], "fileName": "com.facebook.presto.localfile.LocalFileConfig"}, {"methodBody": ["METHOD_START", "{", "return   httpRequestLogLocation ;", "}", "METHOD_END"], "methodName": ["getHttpRequestLogLocation"], "fileName": "com.facebook.presto.localfile.LocalFileConfig"}, {"methodBody": ["METHOD_START", "{", "this . httpRequestLogFileNamePattern    =    pattern ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setHttpRequestLogFileNamePattern"], "fileName": "com.facebook.presto.localfile.LocalFileConfig"}, {"methodBody": ["METHOD_START", "{", "this . httpRequestLogLocation    =    httpRequestLogLocation ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setHttpRequestLogLocation"], "fileName": "com.facebook.presto.localfile.LocalFileConfig"}, {"methodBody": ["METHOD_START", "{", "Builder < String ,    ColumnHandle >    columnHandles    =    ImmutableMap . builder (  )  ;", "int   index    =     0  ;", "for    ( ColumnMetadata   column    :    localFileTables . getColumns ( tableHandle )  )     {", "int   ordinalPosition ;", "if    ( column . getName (  )  . equals ( ColumnHandle . SERVER _ ADDRESS _ COLUMN _ NAME )  )     {", "ordinalPosition    =    ColumnHandle . SERVER _ ADDRESS _ ORDINAL _ POSITION ;", "} else    {", "ordinalPosition    =    index ;", "index +  +  ;", "}", "columnHandles . put ( column . getName (  )  ,    new   ColumnHandle ( column . getName (  )  ,    column . getType (  )  ,    ordinalPosition )  )  ;", "}", "return   columnHandles . build (  )  ;", "}", "METHOD_END"], "methodName": ["getColumnHandles"], "fileName": "com.facebook.presto.localfile.LocalFileMetadata"}, {"methodBody": ["METHOD_START", "{", "if    (  ( prefix . getSchemaName (  )  )     =  =    null )     {", "return   listTables ( session ,    prefix . getSchemaName (  )  )  ;", "}", "return   ImmutableList . of ( new   spi . SchemaTableName ( prefix . getSchemaName (  )  ,    prefix . getTableName (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["listTables"], "fileName": "com.facebook.presto.localfile.LocalFileMetadata"}, {"methodBody": ["METHOD_START", "{", "Type   actual    =    getType ( field )  ;", "for    ( Type   type    :    expected )     {", "if    ( actual . equals ( type )  )     {", "return ;", "}", "}", "String   expectedTypes    =    Joiner . on (  \"  ,     \"  )  . join ( expected )  ;", "throw   new   IllegalArgumentException ( String . format (  \" Expected   field    % s   to   be   type    % s   but   is    % s \"  ,    field ,    expectedTypes ,    actual )  )  ;", "}", "METHOD_END"], "methodName": ["checkFieldType"], "fileName": "com.facebook.presto.localfile.LocalFileRecordCursor"}, {"methodBody": ["METHOD_START", "{", "checkState (  (  ( fields )     !  =    null )  ,     \" Cursor   has   not   been   advanced   yet \"  )  ;", "int   columnIndex    =    fieldToColumnIndex [ field ]  ;", "if    ( columnIndex    =  =     ( ColumnHandle . SERVER _ ADDRESS _ ORDINAL _ POSITION )  )     {", "return   address . toString (  )  ;", "}", "if    ( columnIndex    >  =     ( fields . size (  )  )  )     {", "return   null ;", "}", "return   fields . get ( columnIndex )  ;", "}", "METHOD_END"], "methodName": ["getFieldValue"], "fileName": "com.facebook.presto.localfile.LocalFileRecordCursor"}, {"methodBody": ["METHOD_START", "{", "LocalFileTableHandle   table    =    localFileTables . getTable ( tableName )  ;", "List < File >    fileNames    =    localFileTables . getFiles ( tableName )  ;", "try    {", "return   new    . FilesReader ( table . getTimestampColumn (  )  ,    fileNames . iterator (  )  ,    predicate )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["getFilesReader"], "fileName": "com.facebook.presto.localfile.LocalFileRecordCursor"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( table . getServerAddressColumn (  )  . isPresent (  )  )  )     {", "return   true ;", "}", "Optional < Map < ColumnHandle ,    Domain >  >    domains    =    predicate . getDomains (  )  ;", "if    (  !  ( domains . isPresent (  )  )  )     {", "return   true ;", "}", "Set < Domain >    serverAddressDomain    =    domains . get (  )  . entrySet (  )  . stream (  )  . filter (  (    entry )     -  >     ( entry . getKey (  )  . getOrdinalPosition (  )  )     =  =     ( table . getServerAddressColumn (  )  . getAsInt (  )  )  )  . map ( Map . Entry :  : getValue )  . collect ( Collectors . toSet (  )  )  ;", "if    ( serverAddressDomain . isEmpty (  )  )     {", "return   true ;", "}", "for    ( Domain   domain    :    serverAddressDomain )     {", "if    ( domain . includesNullableValue ( Slices . utf 8 Slice ( address . toString (  )  )  )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isThisServerIncluded"], "fileName": "com.facebook.presto.localfile.LocalFileRecordCursor"}, {"methodBody": ["METHOD_START", "{", "return   address ;", "}", "METHOD_END"], "methodName": ["getAddress"], "fileName": "com.facebook.presto.localfile.LocalFileSplit"}, {"methodBody": ["METHOD_START", "{", "return   effectivePredicate ;", "}", "METHOD_END"], "methodName": ["getEffectivePredicate"], "fileName": "com.facebook.presto.localfile.LocalFileSplit"}, {"methodBody": ["METHOD_START", "{", "return   tableName ;", "}", "METHOD_END"], "methodName": ["getTableName"], "fileName": "com.facebook.presto.localfile.LocalFileSplit"}, {"methodBody": ["METHOD_START", "{", "return   schemaTableName ;", "}", "METHOD_END"], "methodName": ["getSchemaTableName"], "fileName": "com.facebook.presto.localfile.LocalFileTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   serverAddressColumn ;", "}", "METHOD_END"], "methodName": ["getServerAddressColumn"], "fileName": "com.facebook.presto.localfile.LocalFileTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   timestampColumn ;", "}", "METHOD_END"], "methodName": ["getTimestampColumn"], "fileName": "com.facebook.presto.localfile.LocalFileTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   constraint ;", "}", "METHOD_END"], "methodName": ["getConstraint"], "fileName": "com.facebook.presto.localfile.LocalFileTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "return   table ;", "}", "METHOD_END"], "methodName": ["getTable"], "fileName": "com.facebook.presto.localfile.LocalFileTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "checkArgument ( tableColumns . containsKey ( tableHandle . getSchemaTableName (  )  )  ,     \" Table    % s   not   registered \"  ,    tableHandle . getSchemaTableName (  )  )  ;", "return   tableColumns . get ( tableHandle . getSchemaTableName (  )  )  ;", "}", "METHOD_END"], "methodName": ["getColumns"], "fileName": "com.facebook.presto.localfile.LocalFileTables"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   cachedFiles . getUnchecked ( table )  ;", "}    catch    ( UncheckedExecutionException   e )     {", "throwIfInstanceOf ( e . getCause (  )  ,    PException . class )  ;", "throw   e ;", "}", "}", "METHOD_END"], "methodName": ["getFiles"], "fileName": "com.facebook.presto.localfile.LocalFileTables"}, {"methodBody": ["METHOD_START", "{", "return   tables . get ( tableName )  ;", "}", "METHOD_END"], "methodName": ["getTable"], "fileName": "com.facebook.presto.localfile.LocalFileTables"}, {"methodBody": ["METHOD_START", "{", "return   ImmutableList . copyOf ( tables . keySet (  )  )  ;", "}", "METHOD_END"], "methodName": ["getTables"], "fileName": "com.facebook.presto.localfile.LocalFileTables"}, {"methodBody": ["METHOD_START", "{", "for    ( LocalFileColumnHandle   handle    :    columnHandle )     {", "String   json    =    MetadataUtil . COLUMN _ CODEC . toJson ( handle )  ;", "LocalFileColumnHandle   copy    =    MetadataUtil . COLUMN _ CODEC . fromJson ( json )  ;", "assertEquals ( copy ,    handle )  ;", "}", "}", "METHOD_END"], "methodName": ["testJsonRoundTrip"], "fileName": "com.facebook.presto.localfile.TestLocalFileColumnHandle"}, {"methodBody": ["METHOD_START", "{", "ConfigAssertions . assertRecordedDefaults ( ConfigAssertions . recordDefaults ( LocalFileConfig . class )  . setHttpRequestLogLocation (  \" var / log / http - request . log \"  )  . setHttpRequestLogFileNamePattern ( null )  )  ;", "}", "METHOD_END"], "methodName": ["testDefaults"], "fileName": "com.facebook.presto.localfile.TestLocalFileConfig"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    properties    =    new   Builder < String ,    String >  (  )  . put (  \" presto - logs . http - request - log . location \"  ,     \"  / data / foo . log \"  )  . put (  \" presto - logs . http - request - log . pattern \"  ,     \" bar \"  )  . build (  )  ;", "expected    =    new    (  )  . setHttpRequestLogLocation (  \"  / data / foo . log \"  )  . setHttpRequestLogFileNamePattern (  \" bar \"  )  ;", "ConfigAssertions . assertFullMapping ( properties ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testExplicitPropertyMappings"], "fileName": "com.facebook.presto.localfile.TestLocalFileConfig"}, {"methodBody": ["METHOD_START", "{", "SchemaTableName   tableName    =    LocalFileTables . HttpRequestLogTable . getSchemaTableName (  )  ;", "List < LocalFileColumnHandle >    columnHandles    =    metadata . getColumnHandles ( SESSION ,    new   LocalFileTableHandle ( tableName ,    OptionalInt . of (  0  )  ,    OptionalInt . of (  (  -  1  )  )  )  )  . values (  )  . stream (  )  . map (  (    column )     -  >     (  ( LocalFileColumnHandle )     ( column )  )  )  . collect ( Collectors . toList (  )  )  ;", "LocalFileRecordSet   recordSet    =    new   LocalFileRecordSet ( localFileTables ,    new   LocalFileSplit (  . address ,    tableName ,    TupleDomain . all (  )  )  ,    columnHandles )  ;", "RecordCursor   cursor    =    recordSet . cursor (  )  ;", "for    ( int   i    =     0  ;    i    <     ( columnHandles . size (  )  )  ;    i +  +  )     {", "assertEquals ( cursor . getType ( i )  ,    columnHandles . get ( i )  . getColumnType (  )  )  ;", "}", "assertTrue ( cursor . advanceNextPosition (  )  )  ;", "assertEquals ( cursor . getSlice (  0  )  . toStringUtf 8  (  )  ,     . address . toString (  )  )  ;", "assertEquals ( cursor . getSlice (  2  )  . toStringUtf 8  (  )  ,     \"  1  2  7  .  0  .  0  .  1  \"  )  ;", "assertEquals ( cursor . getSlice (  3  )  . toStringUtf 8  (  )  ,     \" POST \"  )  ;", "assertEquals ( cursor . getSlice (  4  )  . toStringUtf 8  (  )  ,     \"  / v 1  / memory \"  )  ;", "assertTrue ( cursor . isNull (  5  )  )  ;", "assertTrue ( cursor . isNull (  6  )  )  ;", "assertEquals ( cursor . getLong (  7  )  ,     2  0  0  )  ;", "assertEquals ( cursor . getLong (  8  )  ,     0  )  ;", "assertEquals ( cursor . getLong (  9  )  ,     1  0  0  0  )  ;", "assertEquals ( cursor . getLong (  1  0  )  ,     1  0  )  ;", "assertTrue ( cursor . isNull (  1  1  )  )  ;", "assertTrue ( cursor . advanceNextPosition (  )  )  ;", "assertEquals ( cursor . getSlice (  0  )  . toStringUtf 8  (  )  ,     . address . toString (  )  )  ;", "assertEquals ( cursor . getSlice (  2  )  . toStringUtf 8  (  )  ,     \"  1  2  7  .  0  .  0  .  1  \"  )  ;", "assertEquals ( cursor . getSlice (  3  )  . toStringUtf 8  (  )  ,     \" GET \"  )  ;", "assertEquals ( cursor . getSlice (  4  )  . toStringUtf 8  (  )  ,     \"  / v 1  / service / presto / general \"  )  ;", "assertEquals ( cursor . getSlice (  5  )  . toStringUtf 8  (  )  ,     \" foo \"  )  ;", "assertEquals ( cursor . getSlice (  6  )  . toStringUtf 8  (  )  ,     \" ffffffff - ffff - ffff - ffff - ffffffffffff \"  )  ;", "assertEquals ( cursor . getLong (  7  )  ,     2  0  0  )  ;", "assertEquals ( cursor . getLong (  8  )  ,     0  )  ;", "assertEquals ( cursor . getLong (  9  )  ,     3  7  )  ;", "assertEquals ( cursor . getLong (  1  0  )  ,     1  0  9  4  )  ;", "assertEquals ( cursor . getSlice (  1  1  )  . toStringUtf 8  (  )  ,     \" a 7  2  2  9 d 5  6  -  5 cbd -  4 e 2  3  -  8  1 ff -  3  1  2 ba 6 be 0 f 1  2  \"  )  ;", "}", "METHOD_END"], "methodName": ["assertData"], "fileName": "com.facebook.presto.localfile.TestLocalFileRecordSet"}, {"methodBody": ["METHOD_START", "{", "return   this . getClass (  )  . getClassLoader (  )  . getResource ( fileName )  . getPath (  )  ;", "}", "METHOD_END"], "methodName": ["getResourceFilePath"], "fileName": "com.facebook.presto.localfile.TestLocalFileRecordSet"}, {"methodBody": ["METHOD_START", "{", "String   location    =     \" example - gzipped - data \"  ;", "LocalFileTables   localFileTables    =    new   LocalFileTables ( new   LocalFileConfig (  )  . setHttpRequestLogLocation ( getResourceFilePath ( location )  )  )  ;", "LocalFileMetadata   metadata    =    new   LocalFileMetadata ( localFileTables )  ;", ". assertData ( localFileTables ,    metadata )  ;", "}", "METHOD_END"], "methodName": ["testGzippedData"], "fileName": "com.facebook.presto.localfile.TestLocalFileRecordSet"}, {"methodBody": ["METHOD_START", "{", "String   location    =     \" example - data \"  ;", "LocalFileTables   localFileTables    =    new   LocalFileTables ( new   LocalFileConfig (  )  . setHttpRequestLogLocation ( getResourceFilePath ( location )  )  )  ;", "LocalFileMetadata   metadata    =    new   LocalFileMetadata ( localFileTables )  ;", ". assertData ( localFileTables ,    metadata )  ;", "}", "METHOD_END"], "methodName": ["testSimpleCursor"], "fileName": "com.facebook.presto.localfile.TestLocalFileRecordSet"}, {"methodBody": ["METHOD_START", "{", "JsonCodec < LocalFileSplit >    codec    =    JsonCodec . jsonCodec ( LocalFileSplit . class )  ;", "String   json    =    codec . toJson ( split )  ;", "LocalFileSplit   copy    =    codec . fromJson ( json )  ;", "assertEquals ( copy . getAddress (  )  ,    split . getAddress (  )  )  ;", "assertEquals ( copy . getTableName (  )  ,    split . getTableName (  )  )  ;", "assertEquals ( copy . getEffectivePredicate (  )  ,    split . getEffectivePredicate (  )  )  ;", "assertEquals ( copy . getAddresses (  )  ,    ImmutableList . of ( address )  )  ;", "assertEquals ( copy . isRemotelyAccessible (  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["testJsonRoundTrip"], "fileName": "com.facebook.presto.localfile.TestLocalFileSplit"}]