[{"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < MemoryColumnHandle >    columnHandles    =    ImmutableList . builder (  )  ;", "int   columnIndex    =     0  ;", "for    ( ColumnMetadata   column    :    columns )     {", "columnHandles . add ( new   MemoryColumnHandle ( column ,    columnIndex )  )  ;", "columnIndex +  +  ;", "}", "return   columnHandles . build (  )  ;", "}", "METHOD_END"], "methodName": ["extractColumnHandles"], "fileName": "com.facebook.presto.plugin.memory.MemoryColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   columnIndex ;", "}", "METHOD_END"], "methodName": ["getColumnIndex"], "fileName": "com.facebook.presto.plugin.memory.MemoryColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   columnType ;", "}", "METHOD_END"], "methodName": ["getColumnType"], "fileName": "com.facebook.presto.plugin.memory.MemoryColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.plugin.memory.MemoryColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . spi . ColumnMetadata ( name ,    columnType )  ;", "}", "METHOD_END"], "methodName": ["toColumnMetadata"], "fileName": "com.facebook.presto.plugin.memory.MemoryColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   maxDataPerNode ;", "}", "METHOD_END"], "methodName": ["getMaxDataPerNode"], "fileName": "com.facebook.presto.plugin.memory.MemoryConfig"}, {"methodBody": ["METHOD_START", "{", "return   splitsPerNode ;", "}", "METHOD_END"], "methodName": ["getSplitsPerNode"], "fileName": "com.facebook.presto.plugin.memory.MemoryConfig"}, {"methodBody": ["METHOD_START", "{", "this . maxDataPerNode    =    maxDataPerNode ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setMaxDataPerNode"], "fileName": "com.facebook.presto.plugin.memory.MemoryConfig"}, {"methodBody": ["METHOD_START", "{", "this . splitsPerNode    =    splitsPerNode ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setSplitsPerNode"], "fileName": "com.facebook.presto.plugin.memory.MemoryConfig"}, {"methodBody": ["METHOD_START", "{", "return   MemoryDataFragment . MEMORY _ DATA _ FRAGMENT _ CODEC . fromJson ( fragment . getBytes (  )  )  ;", "}", "METHOD_END"], "methodName": ["fromSlice"], "fileName": "com.facebook.presto.plugin.memory.MemoryDataFragment"}, {"methodBody": ["METHOD_START", "{", "return   hostAddress ;", "}", "METHOD_END"], "methodName": ["getHostAddress"], "fileName": "com.facebook.presto.plugin.memory.MemoryDataFragment"}, {"methodBody": ["METHOD_START", "{", "return   rows ;", "}", "METHOD_END"], "methodName": ["getRows"], "fileName": "com.facebook.presto.plugin.memory.MemoryDataFragment"}, {"methodBody": ["METHOD_START", "{", "checkArgument ( a . getHostAddress (  )  . equals ( b . getHostAddress (  )  )  ,     \" Can   not   merge   fragments   from   different   hosts \"  )  ;", "return   new    ( a . getHostAddress (  )  ,     (  ( a . getRows (  )  )     +     ( b . getRows (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["merge"], "fileName": "com.facebook.presto.plugin.memory.MemoryDataFragment"}, {"methodBody": ["METHOD_START", "{", "return   Slices . wrappedBuffer ( MemoryDataFragment . MEMORY _ DATA _ FRAGMENT _ CODEC . toJsonBytes ( this )  )  ;", "}", "METHOD_END"], "methodName": ["toSlice"], "fileName": "com.facebook.presto.plugin.memory.MemoryDataFragment"}, {"methodBody": ["METHOD_START", "{", "return   activeTableIds ;", "}", "METHOD_END"], "methodName": ["getActiveTableIds"], "fileName": "com.facebook.presto.plugin.memory.MemoryInsertTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   table ;", "}", "METHOD_END"], "methodName": ["getTable"], "fileName": "com.facebook.presto.plugin.memory.MemoryInsertTableHandle"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( schemas . contains ( schemaName )  )  )     {", "throw   new   SchemaNotFoundException ( schemaName )  ;", "}", "}", "METHOD_END"], "methodName": ["checkSchemaExists"], "fileName": "com.facebook.presto.plugin.memory.MemoryMetadata"}, {"methodBody": ["METHOD_START", "{", "if    ( tables . values (  )  . stream (  )  . map ( MemoryTableHandle :  : toSchemaTableName )  . anyMatch ( tableName :  : equals )  )     {", "throw   new   spi . PrestoException ( ALREADY _ EXISTS ,    String . format (  \" Table    [  % s ]    already   exists \"  ,    tableName . toString (  )  )  )  ;", "}", "if    ( views . keySet (  )  . contains ( tableName )  )     {", "throw   new   spi . PrestoException ( ALREADY _ EXISTS ,    String . format (  \" View    [  % s ]    already   exists \"  ,    tableName . toString (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkTableNotExists"], "fileName": "com.facebook.presto.plugin.memory.MemoryMetadata"}, {"methodBody": ["METHOD_START", "{", "checkState ( tableDataFragments . containsKey ( table . getTableId (  )  )  ,     \" Uninitialized   table    [  % s .  % s ]  \"  ,    table . getSchemaName (  )  ,    table . getTableName (  )  )  ;", "Map < HostAddress ,    DataFragment >    dataFragments    =    tableDataFragments . get ( table . getTableId (  )  )  ;", "for    ( Slice   fragment    :    fragments )     {", "DataFragment   memoryDataFragment    =    DataFragment . fromSlice ( fragment )  ;", "dataFragments . merge ( memoryDataFragment . getHostAddress (  )  ,    memoryDataFragment ,    DataFragment :  : merge )  ;", "}", "}", "METHOD_END"], "methodName": ["updateRowsOnHosts"], "fileName": "com.facebook.presto.plugin.memory.MemoryMetadata"}, {"methodBody": ["METHOD_START", "{", "return   activeTableIds ;", "}", "METHOD_END"], "methodName": ["getActiveTableIds"], "fileName": "com.facebook.presto.plugin.memory.MemoryOutputTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   table ;", "}", "METHOD_END"], "methodName": ["getTable"], "fileName": "com.facebook.presto.plugin.memory.MemoryOutputTableHandle"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( contains ( tableId )  )  )     {", "throw   new   PrestoException ( MemoryErrorCode . MISSING _ DATA ,     \" Failed   to   find   table   on   a   worker .  \"  )  ;", "}", "long   newSize    =     ( currentBytes )     +     ( page . getRetainedSizeInBytes (  )  )  ;", "if    (  ( maxBytes )     <    newSize )     {", "throw   new   PrestoException ( MemoryErrorCode . MEMORY _ LIMIT _ EXCEEDED ,    String . format (  \" Memory   limit    [  % d ]    for   memory   connector   exceeded \"  ,    maxBytes )  )  ;", "}", "currentBytes    =    newSize ;", ". TableData   tableData    =    tables . get ( tableId )  ;", "tableData . add ( page )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "com.facebook.presto.plugin.memory.MemoryPagesStore"}, {"methodBody": ["METHOD_START", "{", "if    ( activeTableIds . isEmpty (  )  )     {", "return ;", "}", "long   latestTableId    =    Collections . max ( activeTableIds )  ;", "for    ( Iterator < Map . Entry < Long ,     . TableData >  >    tableDataIterator    =    tables . entrySet (  )  . iterator (  )  ;    tableDataIterator . hasNext (  )  ;  )     {", "Map . Entry < Long ,     . TableData >    tablePagesEntry    =    tableDataIterator . next (  )  ;", "Long   tableId    =    tablePagesEntry . getKey (  )  ;", "if    (  ( tableId    <    latestTableId )     &  &     (  !  ( activeTableIds . contains ( tableId )  )  )  )     {", "for    ( Page   removedPage    :    tablePagesEntry . getValue (  )  . getPages (  )  )     {", "currentBytes    -  =    removedPage . getRetainedSizeInBytes (  )  ;", "}", "tableDataIterator . remove (  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["cleanUp"], "fileName": "com.facebook.presto.plugin.memory.MemoryPagesStore"}, {"methodBody": ["METHOD_START", "{", "return   tables . containsKey ( tableId )  ;", "}", "METHOD_END"], "methodName": ["contains"], "fileName": "com.facebook.presto.plugin.memory.MemoryPagesStore"}, {"methodBody": ["METHOD_START", "{", "Block [  ]    outputBlocks    =    new   Block [ columnIndexes . size (  )  ]  ;", "for    ( int   i    =     0  ;    i    <     ( columnIndexes . size (  )  )  ;    i +  +  )     {", "outputBlocks [ i ]     =    page . getBlock ( columnIndexes . get ( i )  )  ;", "}", "return   new    ( page . getPositionCount (  )  ,    outputBlocks )  ;", "}", "METHOD_END"], "methodName": ["getColumns"], "fileName": "com.facebook.presto.plugin.memory.MemoryPagesStore"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( contains ( tableId )  )  )     {", "throw   new   PrestoException ( MemoryErrorCode . MISSING _ DATA ,     \" Failed   to   find   table   on   a   worker .  \"  )  ;", "}", ". TableData   tableData    =    tables . get ( tableId )  ;", "if    (  ( tableData . getRows (  )  )     <    expectedRows )     {", "throw   new   PrestoException ( MemoryErrorCode . MISSING _ DATA ,    String . format (  \" Expected   to   find    [  % s ]    rows   on   a   worker ,    but   found    [  % s ]  .  \"  ,    expectedRows ,    tableData . getRows (  )  )  )  ;", "}", "ImmutableList . Builder < Page >    partitionedPages    =    ImmutableList . builder (  )  ;", "for    ( int   i    =    partNumber ;    i    <     ( tableData . getPages (  )  . size (  )  )  ;    i    +  =    totalParts )     {", "partitionedPages . add (  . getColumns ( tableData . getPages (  )  . get ( i )  ,    columnIndexes )  )  ;", "}", "return   partitionedPages . build (  )  ;", "}", "METHOD_END"], "methodName": ["getPages"], "fileName": "com.facebook.presto.plugin.memory.MemoryPagesStore"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( tables . containsKey ( tableId )  )  )     {", "tables . put ( tableId ,    new    . TableData (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["initialize"], "fileName": "com.facebook.presto.plugin.memory.MemoryPagesStore"}, {"methodBody": ["METHOD_START", "{", "return   ImmutableList . of ( new   MemoryConnectorFactory (  )  )  ;", "}", "METHOD_END"], "methodName": ["getConnectorFactories"], "fileName": "com.facebook.presto.plugin.memory.MemoryPlugin"}, {"methodBody": ["METHOD_START", "{", "return   MemoryQueryRunner . createQueryRunner ( ImmutableMap . of (  )  )  ;", "}", "METHOD_END"], "methodName": ["createQueryRunner"], "fileName": "com.facebook.presto.plugin.memory.MemoryQueryRunner"}, {"methodBody": ["METHOD_START", "{", "Session   session    =    testSessionBuilder (  )  . setCatalog ( MemoryQueryRunner . CATALOG )  . setSchema (  \" default \"  )  . build (  )  ;", "DistributedQueryRunner   queryRunner    =    new   DistributedQueryRunner ( session ,     4  ,    extraProperties )  ;", "try    {", "queryRunner . installPlugin ( new   MemoryPlugin (  )  )  ;", "queryRunner . createCatalog ( MemoryQueryRunner . CATALOG ,     \" memory \"  ,    ImmutableMap . of (  )  )  ;", "queryRunner . installPlugin ( new   TpchPlugin (  )  )  ;", "queryRunner . createCatalog (  \" tpch \"  ,     \" tpch \"  ,    ImmutableMap . of (  )  )  ;", "copyTpchTables ( queryRunner ,     \" tpch \"  ,    TINY _ SCHEMA _ NAME ,    session ,    TpchTable . getTables (  )  )  ;", "return   queryRunner ;", "}    catch    ( Exception   e )     {", "Closeables . closeAllSuppress ( e ,    queryRunner )  ;", "throw   e ;", "}", "}", "METHOD_END"], "methodName": ["createQueryRunner"], "fileName": "com.facebook.presto.plugin.memory.MemoryQueryRunner"}, {"methodBody": ["METHOD_START", "{", "Logging . initialize (  )  ;", "DistributedQueryRunner   queryRunner    =     . createQueryRunner ( ImmutableMap . of (  \" http - server . http . port \"  ,     \"  8  0  8  0  \"  )  )  ;", "Thread . sleep (  1  0  )  ;", "Logger   log    =    Logger . get (  . class )  ;", "log . info (  \"  =  =  =  =  =  =  =  =    SERVER   STARTED    =  =  =  =  =  =  =  =  \"  )  ;", "log . info (  \"  \\ n =  =  =  =  \\ n % s \\ n =  =  =  =  \"  ,    queryRunner . getCoordinator (  )  . getBaseUrl (  )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.plugin.memory.MemoryQueryRunner"}, {"methodBody": ["METHOD_START", "{", "return   address ;", "}", "METHOD_END"], "methodName": ["getAddress"], "fileName": "com.facebook.presto.plugin.memory.MemorySplit"}, {"methodBody": ["METHOD_START", "{", "return   expectedRows ;", "}", "METHOD_END"], "methodName": ["getExpectedRows"], "fileName": "com.facebook.presto.plugin.memory.MemorySplit"}, {"methodBody": ["METHOD_START", "{", "return   partNumber ;", "}", "METHOD_END"], "methodName": ["getPartNumber"], "fileName": "com.facebook.presto.plugin.memory.MemorySplit"}, {"methodBody": ["METHOD_START", "{", "return   tableHandle ;", "}", "METHOD_END"], "methodName": ["getTableHandle"], "fileName": "com.facebook.presto.plugin.memory.MemorySplit"}, {"methodBody": ["METHOD_START", "{", "return   totalPartsPerWorker ;", "}", "METHOD_END"], "methodName": ["getTotalPartsPerWorker"], "fileName": "com.facebook.presto.plugin.memory.MemorySplit"}, {"methodBody": ["METHOD_START", "{", "return   columnHandles ;", "}", "METHOD_END"], "methodName": ["getColumnHandles"], "fileName": "com.facebook.presto.plugin.memory.MemoryTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   connectorId ;", "}", "METHOD_END"], "methodName": ["getConnectorId"], "fileName": "com.facebook.presto.plugin.memory.MemoryTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   schemaName ;", "}", "METHOD_END"], "methodName": ["getSchemaName"], "fileName": "com.facebook.presto.plugin.memory.MemoryTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   tableId ;", "}", "METHOD_END"], "methodName": ["getTableId"], "fileName": "com.facebook.presto.plugin.memory.MemoryTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   tableName ;", "}", "METHOD_END"], "methodName": ["getTableName"], "fileName": "com.facebook.presto.plugin.memory.MemoryTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   new   SchemaTableName ( schemaName ,    tableName )  ;", "}", "METHOD_END"], "methodName": ["toSchemaTableName"], "fileName": "com.facebook.presto.plugin.memory.MemoryTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . spi . ConnectorTableMetadata ( toSchemaTableName (  )  ,    columnHandles . stream (  )  . map ( MemoryColumnHandle :  : toColumnMetadata )  . collect ( Collectors . toList (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["toTableMetadata"], "fileName": "com.facebook.presto.plugin.memory.MemoryTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   table . getConnectorId (  )  ;", "}", "METHOD_END"], "methodName": ["getConnectorId"], "fileName": "com.facebook.presto.plugin.memory.MemoryTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "return   dataFragments ;", "}", "METHOD_END"], "methodName": ["getDataFragments"], "fileName": "com.facebook.presto.plugin.memory.MemoryTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "return   table ;", "}", "METHOD_END"], "methodName": ["getTable"], "fileName": "com.facebook.presto.plugin.memory.MemoryTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( metadata . listTables ( SESSION ,    null )  ,    ImmutableList . of (  )  ,     \" No   table   was   expected \"  )  ;", "}", "METHOD_END"], "methodName": ["assertNoTables"], "fileName": "com.facebook.presto.plugin.memory.TestMemoryMetadata"}, {"methodBody": ["METHOD_START", "{", "metadata    =    new   MemoryMetadata ( new   TestingNodeManager (  )  ,    new   MemoryConnectorId (  \" test \"  )  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.plugin.memory.TestMemoryMetadata"}, {"methodBody": ["METHOD_START", "{", "assertNoTables (  )  ;", "SchemaTableName   test 1 Table    =    new   SchemaTableName (  \" default \"  ,     \" test 1  \"  )  ;", "SchemaTableName   test 2 Table    =    new   SchemaTableName (  \" default \"  ,     \" test 2  \"  )  ;", "metadata . createTable ( SESSION ,    new   spi . ConnectorTableMetadata ( test 1 Table ,    ImmutableList . of (  )  )  ,    false )  ;", "try    {", "metadata . createTable ( SESSION ,    new   spi . ConnectorTableMetadata ( test 1 Table ,    ImmutableList . of (  )  )  ,    false )  ;", "fail (  \" Should   fail   because   table   already   exists \"  )  ;", "}    catch    ( PrestoException   ex )     {", "assertEquals ( ex . getErrorCode (  )  ,    ALREADY _ EXISTS . toErrorCode (  )  )  ;", "assertEquals ( ex . getMessage (  )  ,     \" Table    [ default . test 1  ]    already   exists \"  )  ;", "}", "ConnectorTableHandle   test 1 TableHandle    =    metadata . getTableHandle ( SESSION ,    test 1 Table )  ;", "metadata . createTable ( SESSION ,    new   spi . ConnectorTableMetadata ( test 2 Table ,    ImmutableList . of (  )  )  ,    false )  ;", "try    {", "metadata . renameTable ( SESSION ,    test 1 TableHandle ,    test 2 Table )  ;", "fail (  \" Should   fail   because   table   already   exists \"  )  ;", "}    catch    ( PrestoException   ex )     {", "assertEquals ( ex . getErrorCode (  )  ,    ALREADY _ EXISTS . toErrorCode (  )  )  ;", "assertEquals ( ex . getMessage (  )  ,     \" Table    [ default . test 2  ]    already   exists \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["tableAlreadyExists"], "fileName": "com.facebook.presto.plugin.memory.TestMemoryMetadata"}, {"methodBody": ["METHOD_START", "{", "assertNoTables (  )  ;", "SchemaTableName   schemaTableName    =    new   SchemaTableName (  \" default \"  ,     \" temp _ table \"  )  ;", "ConnectorOutputTableHandle   table    =    metadata . beginCreateTable ( SESSION ,    new   spi . ConnectorTableMetadata ( schemaTableName ,    ImmutableList . of (  )  ,    ImmutableMap . of (  )  )  ,    Optional . empty (  )  )  ;", "metadata . finishCreateTable ( SESSION ,    table ,    ImmutableList . of (  )  )  ;", "List < SchemaTableName >    tables    =    metadata . listTables ( SESSION ,    null )  ;", "assertTrue (  (  ( tables . size (  )  )     =  =     1  )  ,     \" Expected   only   one   table \"  )  ;", "assertTrue ( tables . get (  0  )  . getTableName (  )  . equals (  \" temp _ table \"  )  ,     \" Expected   table   with   name    ' temp _ table '  \"  )  ;", "}", "METHOD_END"], "methodName": ["tableIsCreatedAfterCommits"], "fileName": "com.facebook.presto.plugin.memory.TestMemoryMetadata"}, {"methodBody": ["METHOD_START", "{", "assertNoTables (  )  ;", "SchemaTableName   firstTableName    =    new   SchemaTableName (  \" default \"  ,     \" first _ table \"  )  ;", "metadata . createTable ( SESSION ,    new   spi . ConnectorTableMetadata ( firstTableName ,    ImmutableList . of (  )  ,    ImmutableMap . of (  )  )  ,    false )  ;", "MemoryTableHandle   firstTableHandle    =     (  ( MemoryTableHandle )     ( metadata . getTableHandle ( SESSION ,    firstTableName )  )  )  ;", "Long   firstTableId    =    firstTableHandle . getTableId (  )  ;", "assertTrue ( metadata . beginInsert ( SESSION ,    firstTableHandle )  . getActiveTableIds (  )  . contains ( firstTableId )  )  ;", "SchemaTableName   secondTableName    =    new   SchemaTableName (  \" default \"  ,     \" second _ table \"  )  ;", "metadata . createTable ( SESSION ,    new   spi . ConnectorTableMetadata ( secondTableName ,    ImmutableList . of (  )  ,    ImmutableMap . of (  )  )  ,    false )  ;", "MemoryTableHandle   secondTableHandle    =     (  ( MemoryTableHandle )     ( metadata . getTableHandle ( SESSION ,    secondTableName )  )  )  ;", "Long   secondTableId    =    secondTableHandle . getTableId (  )  ;", "assertNotEquals ( firstTableId ,    secondTableId )  ;", "assertTrue ( metadata . beginInsert ( SESSION ,    secondTableHandle )  . getActiveTableIds (  )  . contains ( firstTableId )  )  ;", "assertTrue ( metadata . beginInsert ( SESSION ,    secondTableHandle )  . getActiveTableIds (  )  . contains ( secondTableId )  )  ;", "}", "METHOD_END"], "methodName": ["testActiveTableIds"], "fileName": "com.facebook.presto.plugin.memory.TestMemoryMetadata"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( metadata . listSchemaNames ( SESSION )  ,    ImmutableList . of (  \" default \"  )  )  ;", "metadata . createSchema ( SESSION ,     \" test \"  ,    ImmutableMap . of (  )  )  ;", "assertEquals ( metadata . listSchemaNames ( SESSION )  ,    ImmutableList . of (  \" default \"  ,     \" test \"  )  )  ;", "assertEquals ( metadata . listTables ( SESSION ,     \" test \"  )  ,    ImmutableList . of (  )  )  ;", "SchemaTableName   tableName    =    new   SchemaTableName (  \" test \"  ,     \" first _ table \"  )  ;", "metadata . createTable ( SESSION ,    new   spi . ConnectorTableMetadata ( tableName ,    ImmutableList . of (  )  ,    ImmutableMap . of (  )  )  ,    false )  ;", "assertEquals ( metadata . listTables ( SESSION ,    null )  ,    ImmutableList . of ( tableName )  )  ;", "assertEquals ( metadata . listTables ( SESSION ,     \" test \"  )  ,    ImmutableList . of ( tableName )  )  ;", "assertEquals ( metadata . listTables ( SESSION ,     \" default \"  )  ,    ImmutableList . of (  )  )  ;", "}", "METHOD_END"], "methodName": ["testCreateSchema"], "fileName": "com.facebook.presto.plugin.memory.TestMemoryMetadata"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( metadata . listSchemaNames ( SESSION )  ,    ImmutableList . of (  \" default \"  )  )  ;", "SchemaTableName   table 1     =    new   SchemaTableName (  \" test 1  \"  ,     \" test _ schema _ table 1  \"  )  ;", "try    {", "metadata . beginCreateTable ( SESSION ,    new   spi . ConnectorTableMetadata ( table 1  ,    ImmutableList . of (  )  ,    ImmutableMap . of (  )  )  ,    Optional . empty (  )  )  ;", "fail (  \" Should   fail   because   schema   does   not   exist \"  )  ;", "}    catch    ( PrestoException   ex )     {", "assertEquals ( ex . getErrorCode (  )  ,    NOT _ FOUND . toErrorCode (  )  )  ;", "assertEquals ( ex . getMessage (  )  ,     \" Schema   test 1    not   found \"  )  ;", "}", "assertEquals ( metadata . getTableHandle ( SESSION ,    table 1  )  ,    null )  ;", "SchemaTableName   view 2     =    new   SchemaTableName (  \" test 2  \"  ,     \" test _ schema _ view 2  \"  )  ;", "try    {", "metadata . createView ( SESSION ,    view 2  ,     \" aaa \"  ,    false )  ;", "fail (  \" Should   fail   because   schema   does   not   exist \"  )  ;", "}    catch    ( PrestoException   ex )     {", "assertEquals ( ex . getErrorCode (  )  ,    NOT _ FOUND . toErrorCode (  )  )  ;", "assertEquals ( ex . getMessage (  )  ,     \" Schema   test 2    not   found \"  )  ;", "}", "assertEquals ( metadata . getTableHandle ( SESSION ,    view 2  )  ,    null )  ;", "SchemaTableName   view 3     =    new   SchemaTableName (  \" test 3  \"  ,     \" test _ schema _ view 3  \"  )  ;", "try    {", "metadata . createView ( SESSION ,    view 3  ,     \" bbb \"  ,    true )  ;", "fail (  \" Should   fail   because   schema   does   not   exist \"  )  ;", "}    catch    ( PrestoException   ex )     {", "assertEquals ( ex . getErrorCode (  )  ,    NOT _ FOUND . toErrorCode (  )  )  ;", "assertEquals ( ex . getMessage (  )  ,     \" Schema   test 3    not   found \"  )  ;", "}", "assertEquals ( metadata . getTableHandle ( SESSION ,    view 3  )  ,    null )  ;", "assertEquals ( metadata . listSchemaNames ( SESSION )  ,    ImmutableList . of (  \" default \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testCreateTableAndViewInNotExistSchema"], "fileName": "com.facebook.presto.plugin.memory.TestMemoryMetadata"}, {"methodBody": ["METHOD_START", "{", "SchemaTableName   test    =    new   SchemaTableName (  \" test \"  ,     \" test _ view \"  )  ;", "m . createSchema ( SESSION ,     \" test \"  ,    ImmutableMap . of (  )  )  ;", "m . createView ( SESSION ,    test ,     \" aaa \"  ,    true )  ;", "m . createView ( SESSION ,    test ,     \" bbb \"  ,    true )  ;", "assertEquals ( m . getViews ( SESSION ,    test . toSchemaTablePrefix (  )  )  . get ( test )  . getViewData (  )  ,     \" bbb \"  )  ;", "}", "METHOD_END"], "methodName": ["testCreateViewWithReplace"], "fileName": "com.facebook.presto.plugin.memory.TestMemoryMetadata"}, {"methodBody": ["METHOD_START", "{", "SchemaTableName   test    =    new   SchemaTableName (  \" test \"  ,     \" test _ view \"  )  ;", "m . createSchema ( SESSION ,     \" test \"  ,    ImmutableMap . of (  )  )  ;", "try    {", "m . createView ( SESSION ,    test ,     \" test \"  ,    false )  ;", "}    catch    ( Exception   e )     {", "fail (  \" should   have   succeeded \"  )  ;", "}", "m . createView ( SESSION ,    test ,     \" test \"  ,    false )  ;", "}", "METHOD_END"], "methodName": ["testCreateViewWithoutReplace"], "fileName": "com.facebook.presto.plugin.memory.TestMemoryMetadata"}, {"methodBody": ["METHOD_START", "{", "assertNoTables (  )  ;", "SchemaTableName   tableName    =    new   SchemaTableName (  \" default \"  ,     \" temp _ table \"  )  ;", "ConnectorOutputTableHandle   table    =    metadata . beginCreateTable ( SESSION ,    new   spi . ConnectorTableMetadata ( tableName ,    ImmutableList . of (  )  ,    ImmutableMap . of (  )  )  ,    Optional . empty (  )  )  ;", "List < SchemaTableName >    tableNames    =    metadata . listTables ( SESSION ,    null )  ;", "assertTrue (  (  ( tableNames . size (  )  )     =  =     1  )  ,     \" Expected   exactly   one   table \"  )  ;", "ConnectorTableHandle   tableHandle    =    metadata . getTableHandle ( SESSION ,    tableName )  ;", "List < ConnectorTableLayoutResult >    tableLayouts    =    metadata . getTableLayouts ( SESSION ,    tableHandle ,    Constraint . alwaysTrue (  )  ,    Optional . empty (  )  )  ;", "assertTrue (  (  ( tableLayouts . size (  )  )     =  =     1  )  ,     \" Expected   exactly   one   layout .  \"  )  ;", "ConnectorTableLayout   tableLayout    =    tableLayouts . get (  0  )  . getTableLayout (  )  ;", "ConnectorTableLayoutHandle   tableLayoutHandle    =    tableLayout . getHandle (  )  ;", "assertTrue (  ( tableLayoutHandle   instanceof   MemoryTableLayoutHandle )  )  ;", "assertTrue (  (  ( MemoryTableLayoutHandle )     ( tableLayoutHandle )  )  . getDataFragments (  )  . isEmpty (  )  ,     \" Data   fragments   should   be   empty \"  )  ;", "metadata . finishCreateTable ( SESSION ,    table ,    ImmutableList . of (  )  )  ;", "}", "METHOD_END"], "methodName": ["testReadTableBeforeCreationCompleted"], "fileName": "com.facebook.presto.plugin.memory.TestMemoryMetadata"}, {"methodBody": ["METHOD_START", "{", "SchemaTableName   tableName    =    new   SchemaTableName (  \" test _ schema \"  ,     \" test _ talbe _ to _ be _ renamed \"  )  ;", "metadata . createSchema ( SESSION ,     \" test _ schema \"  ,    ImmutableMap . of (  )  )  ;", "ConnectorOutputTableHandle   table    =    metadata . beginCreateTable ( SESSION ,    new   spi . ConnectorTableMetadata ( tableName ,    ImmutableList . of (  )  ,    ImmutableMap . of (  )  )  ,    Optional . empty (  )  )  ;", "metadata . finishCreateTable ( SESSION ,    table ,    ImmutableList . of (  )  )  ;", "SchemaTableName   invalidSchemaTableName    =    new   SchemaTableName (  \" test _ schema _ not _ exist \"  ,     \" test _ table _ renamed \"  )  ;", "ConnectorTableHandle   tableHandle    =    metadata . getTableHandle ( SESSION ,    tableName )  ;", "Throwable   throwable    =    expectThrows ( SchemaNotFoundException . class ,     (  )     -  >    metadata . renameTable ( SESSION ,    tableHandle ,    invalidSchemaTableName )  )  ;", "assertTrue ( throwable . getMessage (  )  . equals (  \" Schema   test _ schema _ not _ exist   not   found \"  )  )  ;", "SchemaTableName   sameSchemaTableName    =    new   SchemaTableName (  \" test _ schema \"  ,     \" test _ renamed \"  )  ;", "metadata . renameTable ( SESSION ,    metadata . getTableHandle ( SESSION ,    tableName )  ,    sameSchemaTableName )  ;", "assertEquals ( metadata . listTables ( SESSION ,     \" test _ schema \"  )  ,    ImmutableList . of ( sameSchemaTableName )  )  ;", "metadata . createSchema ( SESSION ,     \" test _ different _ schema \"  ,    ImmutableMap . of (  )  )  ;", "SchemaTableName   differentSchemaTableName    =    new   SchemaTableName (  \" test _ different _ schema \"  ,     \" test _ renamed \"  )  ;", "metadata . renameTable ( SESSION ,    metadata . getTableHandle ( SESSION ,    sameSchemaTableName )  ,    differentSchemaTableName )  ;", "assertEquals ( metadata . listTables ( SESSION ,     \" test _ schema \"  )  ,    ImmutableList . of (  )  )  ;", "assertEquals ( metadata . listTables ( SESSION ,     \" test _ different _ schema \"  )  ,    ImmutableList . of ( differentSchemaTableName )  )  ;", "}", "METHOD_END"], "methodName": ["testRenameTable"], "fileName": "com.facebook.presto.plugin.memory.TestMemoryMetadata"}, {"methodBody": ["METHOD_START", "{", "SchemaTableName   test 1     =    new   SchemaTableName (  \" test \"  ,     \" test _ view 1  \"  )  ;", "SchemaTableName   test 2     =    new   SchemaTableName (  \" test \"  ,     \" test _ view 2  \"  )  ;", "m . createSchema ( SESSION ,     \" test \"  ,    ImmutableMap . of (  )  )  ;", "m . createView ( SESSION ,    test 1  ,     \" test 1  \"  ,    false )  ;", "m . createView ( SESSION ,    test 2  ,     \" test 2  \"  ,    false )  ;", "List < SchemaTableName >    list    =    m . listViews ( SESSION ,     \" test \"  )  ;", "Assertions . assertEqualsIgnoreOrder ( list ,    ImmutableList . of ( test 1  ,    test 2  )  )  ;", "Map < SchemaTableName ,    ConnectorViewDefinition >    views    =    m . getViews ( SESSION ,    new   SchemaTablePrefix (  \" test \"  )  )  ;", "assertEquals ( views . keySet (  )  ,    ImmutableSet . of ( test 1  ,    test 2  )  )  ;", "assertEquals ( views . get ( test 1  )  . getViewData (  )  ,     \" test 1  \"  )  ;", "assertEquals ( views . get ( test 2  )  . getViewData (  )  ,     \" test 2  \"  )  ;", "Map < SchemaTableName ,    ConnectorViewDefinition >    allViews    =    m . getViews ( SESSION ,    new   SchemaTablePrefix (  )  )  ;", "assertEquals ( allViews . keySet (  )  ,    ImmutableSet . of ( test 1  ,    test 2  )  )  ;", "Map < SchemaTableName ,    ConnectorViewDefinition >    exactMatchView    =    m . getViews ( SESSION ,    new   SchemaTablePrefix (  \" test \"  ,     \" test _ view 1  \"  )  )  ;", "assertEquals ( exactMatchView . keySet (  )  ,    ImmutableSet . of ( test 1  )  )  ;", "Map < SchemaTableName ,    ConnectorViewDefinition >    nonexistentTableView    =    m . getViews ( SESSION ,    new   SchemaTablePrefix (  \" test \"  ,     \" nonexistenttable \"  )  )  ;", "assertTrue ( nonexistentTableView . isEmpty (  )  )  ;", "Map < SchemaTableName ,    ConnectorViewDefinition >    nonexistentSchemaView    =    m . getViews ( SESSION ,    new   SchemaTablePrefix (  \" nonexistentschema \"  )  )  ;", "assertTrue ( nonexistentSchemaView . isEmpty (  )  )  ;", "m . dropView ( SESSION ,    test 1  )  ;", "views    =    m . getViews ( SESSION ,    new   SchemaTablePrefix (  \" test \"  )  )  ;", "assertEquals ( views . keySet (  )  ,    ImmutableSet . of ( test 2  )  )  ;", "m . dropView ( SESSION ,    test 2  )  ;", "views    =    m . getViews ( SESSION ,    new   SchemaTablePrefix (  \" test \"  )  )  ;", "assertTrue ( views . isEmpty (  )  )  ;", "views    =    m . getViews ( SESSION ,    new   SchemaTablePrefix (  )  )  ;", "assertTrue ( views . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["testViews"], "fileName": "com.facebook.presto.plugin.memory.TestMemoryMetadata"}, {"methodBody": ["METHOD_START", "{", "return   new   MemoryInsertTableHandle ( new   MemoryTableHandle (  \" test \"  ,     \" schema \"  ,    String . format (  \" table _  % d \"  ,    tableId )  ,    tableId ,    ImmutableList . of (  )  )  ,    ImmutableSet . copyOf ( activeTableIds )  )  ;", "}", "METHOD_END"], "methodName": ["createMemoryInsertTableHandle"], "fileName": "com.facebook.presto.plugin.memory.TestMemoryPagesStore"}, {"methodBody": ["METHOD_START", "{", "return   new   MemoryOutputTableHandle ( new   MemoryTableHandle (  \" test \"  ,     \" schema \"  ,    String . format (  \" table _  % d \"  ,    tableId )  ,    tableId ,    ImmutableList . of (  )  )  ,    ImmutableSet . copyOf ( activeTableIds )  )  ;", "}", "METHOD_END"], "methodName": ["createMemoryOutputTableHandle"], "fileName": "com.facebook.presto.plugin.memory.TestMemoryPagesStore"}, {"methodBody": ["METHOD_START", "{", "BlockBuilder   blockBuilder    =    BIGINT . createFixedSizeBlockBuilder ( TestMemoryPagesStore . POSITIONS _ PER _ PAGE )  ;", "while    (  ( blockBuilder . getRetainedSizeInBytes (  )  )     <     (  1  0  2  4     *     1  0  2  4  )  )     {", "BIGINT . writeLong ( blockBuilder ,     4  2 L )  ;", "}", "return   new   com . facebook . presto . spi . Page (  0  ,    blockBuilder . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["createOneMegaBytePage"], "fileName": "com.facebook.presto.plugin.memory.TestMemoryPagesStore"}, {"methodBody": ["METHOD_START", "{", "BlockBuilder   blockBuilder    =    BIGINT . createFixedSizeBlockBuilder ( TestMemoryPagesStore . POSITIONS _ PER _ PAGE )  ;", "BIGINT . writeLong ( blockBuilder ,     4  2 L )  ;", "return   new   com . facebook . presto . spi . Page (  0  ,    blockBuilder . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["createPage"], "fileName": "com.facebook.presto.plugin.memory.TestMemoryPagesStore"}, {"methodBody": ["METHOD_START", "{", "ConnectorPageSink   pageSink    =    pageSinkProvider . createPageSink ( MemoryTransactionHandle . INSTANCE ,    TestMemoryPagesStore . SESSION ,    TestMemoryPagesStore . createMemoryOutputTableHandle ( tableId ,    activeTableIds )  )  ;", "pageSink . finish (  )  ;", "}", "METHOD_END"], "methodName": ["createTable"], "fileName": "com.facebook.presto.plugin.memory.TestMemoryPagesStore"}, {"methodBody": ["METHOD_START", "{", "ConnectorPageSink   pageSink    =    pageSinkProvider . createPageSink ( MemoryTransactionHandle . INSTANCE ,    TestMemoryPagesStore . SESSION ,    TestMemoryPagesStore . createMemoryInsertTableHandle ( tableId ,    activeTableIds )  )  ;", "pageSink . appendPage ( page )  ;", "pageSink . finish (  )  ;", "}", "METHOD_END"], "methodName": ["insertToTable"], "fileName": "com.facebook.presto.plugin.memory.TestMemoryPagesStore"}, {"methodBody": ["METHOD_START", "{", "insertToTable ( tableId ,    TestMemoryPagesStore . createPage (  )  ,    activeTableIds )  ;", "}", "METHOD_END"], "methodName": ["insertToTable"], "fileName": "com.facebook.presto.plugin.memory.TestMemoryPagesStore"}, {"methodBody": ["METHOD_START", "{", "pagesStore    =    new   MemoryPagesStore ( new   MemoryConfig (  )  . setMaxDataPerNode ( new   io . airlift . units . DataSize (  1  ,    Unit . MEGABYTE )  )  )  ;", "pageSinkProvider    =    new   MemoryPageSinkProvider ( pagesStore ,    HostAddress . fromString (  \" localhost :  8  0  8  0  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.plugin.memory.TestMemoryPagesStore"}, {"methodBody": ["METHOD_START", "{", "createTable (  0 L ,     0 L )  ;", "createTable (  1 L ,     0 L ,     1 L )  ;", "createTable (  2 L ,     0 L ,     1 L ,     2 L )  ;", "assertTrue ( p . contains (  0 L )  )  ;", "assertTrue ( p . contains (  1 L )  )  ;", "assertTrue ( p . contains (  2 L )  )  ;", "insertToTable (  1 L ,     0 L ,     1 L )  ;", "assertTrue ( p . contains (  0 L )  )  ;", "assertTrue ( p . contains (  1 L )  )  ;", "assertTrue ( p . contains (  2 L )  )  ;", "insertToTable (  2 L ,     0 L ,     2 L )  ;", "assertTrue ( p . contains (  0 L )  )  ;", "assertFalse ( p . contains (  1 L )  )  ;", "assertTrue ( p . contains (  2 L )  )  ;", "}", "METHOD_END"], "methodName": ["testCleanUp"], "fileName": "com.facebook.presto.plugin.memory.TestMemoryPagesStore"}, {"methodBody": ["METHOD_START", "{", "createTable (  0 L ,     0 L )  ;", "assertEquals ( p . getPages (  0 L ,     0  ,     1  ,    ImmutableList . of (  0  )  ,     0  )  ,    ImmutableList . of (  )  )  ;", "}", "METHOD_END"], "methodName": ["testCreateEmptyTable"], "fileName": "com.facebook.presto.plugin.memory.TestMemoryPagesStore"}, {"methodBody": ["METHOD_START", "{", "createTable (  0 L ,     0 L )  ;", "insertToTable (  0 L ,     0 L )  ;", "assertEquals ( pagesStore . getPages (  0 L ,     0  ,     1  ,    ImmutableList . of (  0  )  ,     . POSITIONS _ PER _ PAGE )  . size (  )  ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testInsertPage"], "fileName": "com.facebook.presto.plugin.memory.TestMemoryPagesStore"}, {"methodBody": ["METHOD_START", "{", "insertToTable (  0 L ,     0 L )  ;", "assertEquals ( pagesStore . getPages (  0 L ,     0  ,     1  ,    ImmutableList . of (  0  )  ,     . POSITIONS _ PER _ PAGE )  . size (  )  ,     1  )  ;", "}", "METHOD_END"], "methodName": ["testInsertPageWithoutCreate"], "fileName": "com.facebook.presto.plugin.memory.TestMemoryPagesStore"}, {"methodBody": ["METHOD_START", "{", "createTable (  0 L ,     0 L )  ;", "insertToTable (  0 L ,     . createOneMegaBytePage (  )  ,     0 L )  ;", "insertToTable (  0 L ,     . createOneMegaBytePage (  )  ,     0 L )  ;", "}", "METHOD_END"], "methodName": ["testMemoryLimitExceeded"], "fileName": "com.facebook.presto.plugin.memory.TestMemoryPagesStore"}, {"methodBody": ["METHOD_START", "{", "pagesStore . getPages (  0 L ,     0  ,     1  ,    ImmutableList . of (  0  )  ,     0  )  ;", "}", "METHOD_END"], "methodName": ["testReadFromUnknownTable"], "fileName": "com.facebook.presto.plugin.memory.TestMemoryPagesStore"}, {"methodBody": ["METHOD_START", "{", "createTable (  0 L ,     0 L )  ;", "assertEquals ( p . getPages (  0 L ,     0  ,     1  ,    ImmutableList . of (  0  )  ,     0  )  ,    ImmutableList . of (  )  )  ;", "p . getPages (  0 L ,     0  ,     1  ,    ImmutableList . of (  0  )  ,     4  2  )  ;", "}", "METHOD_END"], "methodName": ["testTryToReadFromEmptyTable"], "fileName": "com.facebook.presto.plugin.memory.TestMemoryPagesStore"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   rows    =    computeActual ( sql )  ;", "assertEquals ( rows . getRowCount (  )  ,    expected . length )  ;", "for    ( int   i    =     0  ;    i    <     ( expected . length )  ;    i +  +  )     {", "MaterializedRow   materializedRow    =    rows . getMaterializedRows (  )  . get ( i )  ;", "int   fieldCount    =    materializedRow . getFieldCount (  )  ;", "assertTrue (  ( fieldCount    =  =     1  )  ,    String . format (  \" Expected   only   one   column ,    but   got    '  % d '  \"  ,    fieldCount )  )  ;", "Object   value    =    materializedRow . getField (  0  )  ;", "assertEquals ( value ,    expected [ i ]  )  ;", "assertTrue (  (  ( materializedRow . getFieldCount (  )  )     =  =     1  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertQueryResult"], "fileName": "com.facebook.presto.plugin.memory.TestMemorySmoke"}, {"methodBody": ["METHOD_START", "{", "return   getQueryRunner (  )  . listTables ( getSession (  )  ,     \" memory \"  ,     \" default \"  )  ;", "}", "METHOD_END"], "methodName": ["listMemoryTables"], "fileName": "com.facebook.presto.plugin.memory.TestMemorySmoke"}, {"methodBody": ["METHOD_START", "{", "int   tablesBeforeCreate    =    listMemoryTables (  )  . size (  )  ;", "assertUpdate (  \" CREATE   TABLE   test   AS   SELECT    *    FROM   tpch . tiny . nation \"  ,     \" SELECT   count (  *  )    FROM   nation \"  )  ;", "assertEquals ( listMemoryTables (  )  . size (  )  ,     ( tablesBeforeCreate    +     1  )  )  ;", "assertUpdate (  \" DROP   TABLE   test \"  )  ;", "assertEquals ( listMemoryTables (  )  . size (  )  ,    tablesBeforeCreate )  ;", "}", "METHOD_END"], "methodName": ["testCreateAndDropTable"], "fileName": "com.facebook.presto.plugin.memory.TestMemorySmoke"}, {"methodBody": ["METHOD_START", "{", "assertUpdate (  \" CREATE   TABLE   filtered _ out   AS   SELECT   nationkey   FROM   tpch . tiny . nation   WHERE   nationkey    <     0  \"  ,     \" SELECT   count ( nationkey )    FROM   nation   WHERE   nationkey    <     0  \"  )  ;", "assertQueryResult (  \" SELECT   count (  *  )    FROM   filtered _ out \"  ,     0 L )  ;", "assertQueryResult (  \" INSERT   INTO   filtered _ out   SELECT   nationkey   FROM   tpch . tiny . nation \"  ,     2  5 L )  ;", "assertQueryResult (  \" SELECT   count (  *  )    FROM   filtered _ out \"  ,     2  5 L )  ;", "}", "METHOD_END"], "methodName": ["testCreateFilteredOutTable"], "fileName": "com.facebook.presto.plugin.memory.TestMemorySmoke"}, {"methodBody": ["METHOD_START", "{", "int   tablesBeforeCreate    =    listMemoryTables (  )  . size (  )  ;", "assertQueryFails (  \" CREATE   TABLE   schema 3  . test _ table 3     ( x   date )  \"  ,     \" Schema   schema 3    not   found \"  )  ;", "assertQueryFails (  \" CREATE   VIEW   schema 4  . test _ view 4    AS   SELECT    1  2  3    x \"  ,     \" Schema   schema 4    not   found \"  )  ;", "assertQueryFails (  \" CREATE   OR   REPLACE   VIEW   schema 5  . test _ view 5    AS   SELECT    1  2  3    x \"  ,     \" Schema   schema 5    not   found \"  )  ;", "int   tablesAfterCreate    =    listMemoryTables (  )  . size (  )  ;", "assertEquals ( tablesBeforeCreate ,    tablesAfterCreate )  ;", "}", "METHOD_END"], "methodName": ["testCreateTableAndViewInNotExistSchema"], "fileName": "com.facebook.presto.plugin.memory.TestMemorySmoke"}, {"methodBody": ["METHOD_START", "{", "assertUpdate ( String . format (  \" CREATE   SCHEMA    % s . schema 1  \"  ,    MemoryQueryRunner . CATALOG )  )  ;", "assertUpdate ( String . format (  \" CREATE   SCHEMA    % s . schema 2  \"  ,    MemoryQueryRunner . CATALOG )  )  ;", "assertQueryResult ( String . format (  \" SHOW   SCHEMAS   FROM    % s \"  ,    MemoryQueryRunner . CATALOG )  ,     \" default \"  ,     \" information _ schema \"  ,     \" schema 1  \"  ,     \" schema 2  \"  )  ;", "assertUpdate ( String . format (  \" CREATE   TABLE    % s . schema 1  . nation   AS   SELECT    *    FROM   tpch . tiny . nation   WHERE   nationkey    %  %     2     =     0  \"  ,    MemoryQueryRunner . CATALOG )  ,     \" SELECT   count (  *  )    FROM   nation   WHERE   MOD ( nationkey ,     2  )     =     0  \"  )  ;", "assertUpdate ( String . format (  \" CREATE   TABLE    % s . schema 2  . nation   AS   SELECT    *    FROM   tpch . tiny . nation   WHERE   nationkey    %  %     2     =     1  \"  ,    MemoryQueryRunner . CATALOG )  ,     \" SELECT   count (  *  )    FROM   nation   WHERE   MOD ( nationkey ,     2  )     =     1  \"  )  ;", "assertQueryResult ( String . format (  \" SELECT   count (  *  )    FROM    % s . schema 1  . nation \"  ,    MemoryQueryRunner . CATALOG )  ,     1  3 L )  ;", "assertQueryResult ( String . format (  \" SELECT   count (  *  )    FROM    % s . schema 2  . nation \"  ,    MemoryQueryRunner . CATALOG )  ,     1  2 L )  ;", "}", "METHOD_END"], "methodName": ["testCreateTableInNonDefaultSchema"], "fileName": "com.facebook.presto.plugin.memory.TestMemorySmoke"}, {"methodBody": ["METHOD_START", "{", "@ Language (  \" SQL \"  )", "String   cateTableSql    =     \" CREATE   TABLE   nation   AS   SELECT    *    FROM   tpch . tiny . nation \"  ;", "assertUpdate ( cateTableSql )  ;", "}", "METHOD_END"], "methodName": ["testCreateTableWhenTableIsAlreadyCreated"], "fileName": "com.facebook.presto.plugin.memory.TestMemorySmoke"}, {"methodBody": ["METHOD_START", "{", "assertUpdate (  \" CREATE   TABLE   test _ empty    ( a   BIGINT )  \"  )  ;", "assertQueryResult (  \" SELECT   count (  *  )    FROM   test _ empty \"  ,     0 L )  ;", "assertQueryResult (  \" INSERT   INTO   test _ empty   SELECT   nationkey   FROM   tpch . tiny . nation \"  ,     2  5 L )  ;", "assertQueryResult (  \" SELECT   count (  *  )    FROM   test _ empty \"  ,     2  5 L )  ;", "}", "METHOD_END"], "methodName": ["testCreateTableWithNoData"], "fileName": "com.facebook.presto.plugin.memory.TestMemorySmoke"}, {"methodBody": ["METHOD_START", "{", "assertUpdate (  \" CREATE   TABLE   test _ table _ to _ be _ renamed    ( a   BIGINT )  \"  )  ;", "assertQueryFails (  \" ALTER   TABLE   test _ table _ to _ be _ renamed   RENAME   TO   test _ schema _ not _ exist . test _ table _ renamed \"  ,     \" Schema   test _ schema _ not _ exist   not   found \"  )  ;", "assertUpdate (  \" ALTER   TABLE   test _ table _ to _ be _ renamed   RENAME   TO   test _ table _ renamed \"  )  ;", "assertQueryResult (  \" SELECT   count (  *  )    FROM   test _ table _ renamed \"  ,     0 L )  ;", "assertUpdate (  \" CREATE   SCHEMA   test _ different _ schema \"  )  ;", "assertUpdate (  \" ALTER   TABLE   test _ table _ renamed   RENAME   TO   test _ different _ schema . test _ table _ renamed \"  )  ;", "assertQueryResult (  \" SELECT   count (  *  )    FROM   test _ different _ schema . test _ table _ renamed \"  ,     0 L )  ;", "}", "METHOD_END"], "methodName": ["testRenameTable"], "fileName": "com.facebook.presto.plugin.memory.TestMemorySmoke"}, {"methodBody": ["METHOD_START", "{", "assertUpdate (  \" CREATE   TABLE   test _ select   AS   SELECT    *    FROM   tpch . tiny . nation \"  ,     \" SELECT   count (  *  )    FROM   nation \"  )  ;", "assertQuery (  \" SELECT    *    FROM   test _ select   ORDER   BY   nationkey \"  ,     \" SELECT    *    FROM   nation   ORDER   BY   nationkey \"  )  ;", "assertQueryResult (  \" INSERT   INTO   test _ select   SELECT    *    FROM   tpch . tiny . nation \"  ,     2  5 L )  ;", "assertQueryResult (  \" INSERT   INTO   test _ select   SELECT    *    FROM   tpch . tiny . nation \"  ,     2  5 L )  ;", "assertQueryResult (  \" SELECT   count (  *  )    FROM   test _ select \"  ,     7  5 L )  ;", "}", "METHOD_END"], "methodName": ["testSelect"], "fileName": "com.facebook.presto.plugin.memory.TestMemorySmoke"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT   nationkey ,    regionkey   FROM   tpch . tiny . nation   ORDER   BY   nationkey \"  ,     \" SELECT   nationkey ,    regionkey   FROM   nation   ORDER   BY   nationkey \"  )  ;", "}", "METHOD_END"], "methodName": ["testSelectColumnsSubset"], "fileName": "com.facebook.presto.plugin.memory.TestMemorySmoke"}, {"methodBody": ["METHOD_START", "{", "assertUpdate (  \" CREATE   TABLE   test _ select _ empty   AS   SELECT    *    FROM   tpch . tiny . nation   WHERE   nationkey    >     1  0  0  0  \"  ,     \" SELECT   count (  *  )    FROM   nation   WHERE   nationkey    >     1  0  0  0  \"  )  ;", "assertQueryResult (  \" SELECT   count (  *  )    FROM   test _ select _ empty \"  ,     0 L )  ;", "}", "METHOD_END"], "methodName": ["testSelectFromEmptyTable"], "fileName": "com.facebook.presto.plugin.memory.TestMemorySmoke"}, {"methodBody": ["METHOD_START", "{", "assertQuery (  \" SELECT    *    FROM   tpch . tiny . nation   WHERE   nationkey    =     1  \"  ,     \" SELECT    *    FROM   nation   WHERE   nationkey    =     1  \"  )  ;", "}", "METHOD_END"], "methodName": ["testSelectSingleRow"], "fileName": "com.facebook.presto.plugin.memory.TestMemorySmoke"}, {"methodBody": ["METHOD_START", "{", "@ Language (  \" SQL \"  )", "String   query    =     \" SELECT   orderkey ,    orderstatus ,    totalprice    /     2    half   FROM   orders \"  ;", "assertUpdate (  \" CREATE   VIEW   test _ view   AS   SELECT    1  2  3    x \"  )  ;", "assertUpdate (  (  \" CREATE   OR   REPLACE   VIEW   test _ view   AS    \"     +    query )  )  ;", "assertQueryFails (  \" CREATE   TABLE   test _ view    ( x   date )  \"  ,     \" View    \\  \\  [ default . test _ view ]    already   exists \"  )  ;", "assertQueryFails (  \" CREATE   VIEW   test _ view   AS   SELECT    1  2  3    x \"  ,     \" View   already   exists :    default . test _ view \"  )  ;", "assertQuery (  \" SELECT    *    FROM   test _ view \"  ,    query )  ;", "assertTrue ( computeActual (  \" SHOW   TABLES \"  )  . getOnlyColumnAsSet (  )  . contains (  \" test _ view \"  )  )  ;", "assertUpdate (  \" DROP   VIEW   test _ view \"  )  ;", "assertQueryFails (  \" DROP   VIEW   test _ view \"  ,     \" line    1  :  1  :    View    ' default . test _ view '    does   not   exist \"  )  ;", "}", "METHOD_END"], "methodName": ["testViews"], "fileName": "com.facebook.presto.plugin.memory.TestMemorySmoke"}, {"methodBody": ["METHOD_START", "{", "try    {", "queryRunner . execute ( sql )  ;", "}    catch    ( RuntimeException   ex )     {", "assertEquals ( ex . gessage (  )  ,    expectedMessage )  ;", "return ;", "}", "fail (  \" Query   should   fail \"  )  ;", "}", "METHOD_END"], "methodName": ["assertFails"], "fileName": "com.facebook.presto.plugin.memory.TestMemoryWorkerCrash"}, {"methodBody": ["METHOD_START", "{", "MaterializedResult   rows    =    queryRunner . execute ( sql )  ;", "MaterializedResult   expectedRows    =    queryRunner . execute ( expected )  ;", "assertEquals ( rows ,    expectedRows )  ;", "}", "METHOD_END"], "methodName": ["assertQuery"], "fileName": "com.facebook.presto.plugin.memory.TestMemoryWorkerCrash"}, {"methodBody": ["METHOD_START", "{", "int   nodeCount    =    queryRunner . getNodeCount (  )  ;", "TestingPServer   worker    =    queryRunner . getServers (  )  . stream (  )  . filter (  (    server )     -  >     !  ( server . isCoordinator (  )  )  )  . findAny (  )  . orElseThrow (  (  )     -  >    new   IllegalStateException (  \" No   worker   nodes \"  )  )  ;", "worker . close (  )  ;", "waitForNodes (  ( nodeCount    -     1  )  )  ;", "}", "METHOD_END"], "methodName": ["closeWorker"], "fileName": "com.facebook.presto.plugin.memory.TestMemoryWorkerCrash"}, {"methodBody": ["METHOD_START", "{", "queryRunner    =    MemoryQueryRunner . createQueryRunner (  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.facebook.presto.plugin.memory.TestMemoryWorkerCrash"}, {"methodBody": ["METHOD_START", "{", "queryRunner . execute (  \" CREATE   TABLE   test _ nation   as   SELECT    *    FROM   tpch . tiny . nation \"  )  ;", "assertQuery (  \" SELECT    *    FROM   test _ nation   ORDER   BY   nationkey \"  ,     \" SELECT    *    FROM   tpch . tiny . nation   ORDER   BY   nationkey \"  )  ;", "close (  )  ;", "assertFails (  \" SELECT    *    FROM   test _ nation   ORDER   BY   nationkey \"  ,     \" No   nodes   available   to   run   query \"  )  ;", "queryRunner . execute (  \" INSERT   INTO   test _ nation   SELECT    *    FROM   tpch . tiny . nation \"  )  ;", "assertFails (  \" SELECT    *    FROM   test _ nation   ORDER   BY   nationkey \"  ,     \" No   nodes   available   to   run   query \"  )  ;", "queryRunner . execute (  \" CREATE   TABLE   test _ region   as   SELECT    *    FROM   tpch . tiny . region \"  )  ;", "assertQuery (  \" SELECT    *    FROM   test _ region   ORDER   BY   regionkey \"  ,     \" SELECT    *    FROM   tpch . tiny . region   ORDER   BY   regionkey \"  )  ;", "}", "METHOD_END"], "methodName": ["tableAccessAfterWorkerCrash"], "fileName": "com.facebook.presto.plugin.memory.TestMemoryWorkerCrash"}, {"methodBody": ["METHOD_START", "{", "long   start    =    System . nanoTime (  )  ;", "while    (  ( queryRunner . getCoordinator (  )  . refhNodes (  )  . getActiveNodes (  )  . size (  )  )     <    numberOfNodes )     {", "Assertions . assertLessThan ( nanosSince ( start )  ,    new   Duration (  1  0  ,    TimeUnit . SECONDS )  )  ;", "TimeUnit . MILLISECONDS . sleep (  1  0  )  ;", "}", "}", "METHOD_END"], "methodName": ["waitForNodes"], "fileName": "com.facebook.presto.plugin.memory.TestMemoryWorkerCrash"}]