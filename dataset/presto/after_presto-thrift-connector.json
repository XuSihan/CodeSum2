[{"methodBody": ["METHOD_START", "{", "ConfigAssertions . assertRecordedDefaults ( ConfigAssertions . recordDefaults ( ThriftConnectorConfig . class )  . setMaxResponseSize ( new   io . airlift . units . DataSize (  1  6  ,    Unit . MEGABYTE )  )  . setMetadataRefreshThreads (  1  )  . setLookupRequestsConcurrency (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["testDefaults"], "fileName": "com.facebook.presto.connector.thrift.TestThriftConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    properties    =    new   Builder < String ,    String >  (  )  . put (  \" presto - thrift . max - response - size \"  ,     \"  2 MB \"  )  . put (  \" presto - thrift . metadata - refresh - threads \"  ,     \"  1  0  \"  )  . put (  \" presto - thrift . lookup - requests - concurrency \"  ,     \"  8  \"  )  . build (  )  ;", "expected    =    new    (  )  . setMaxResponseSize ( new   io . airlift . units . DataSize (  2  ,    Unit . MEGABYTE )  )  . setMetadataRefreshThreads (  1  0  )  . setLookupRequestsConcurrency (  8  )  ;", "ConfigAssertions . assertFullMapping ( properties ,    expected )  ;", "}", "METHOD_END"], "methodName": ["testExplicitPropertyMappings"], "fileName": "com.facebook.presto.connector.thrift.TestThriftConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "return   new   ThriftColumnHandle ( name ,    type ,    null ,    false )  ;", "}", "METHOD_END"], "methodName": ["column"], "fileName": "com.facebook.presto.connector.thrift.TestThriftIndexPageSource"}, {"methodBody": ["METHOD_START", "{", "return   IntStream . range ( beginInclusive ,    endExclusive )  . mapToObj ( ImmutableList :  : of )  . collect ( toImmutableList (  )  )  ;", "}", "METHOD_END"], "methodName": ["generateKeys"], "fileName": "com.facebook.presto.connector.thrift.TestThriftIndexPageSource"}, {"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . connector . thrift . api . PrestoThriftPageResult ( ImmutableList . of ( integerData ( new   PrestoThriftInteger ( null ,    new   int [  ]  {    value    }  )  )  )  ,     1  ,    nextToken )  ;", "}", "METHOD_END"], "methodName": ["pageResult"], "fileName": "com.facebook.presto.connector.thrift.TestThriftIndexPageSource"}, {"methodBody": ["METHOD_START", "{", "TestThriftIndexPageSource . TestingThriftService   client    =    new   TestThriftIndexPageSource . TestingThriftService ( rowsPerSplit ,    true ,    twoSplitBatches )  ;", "ThriftIndexPageSource   pageSource    =    new   ThriftIndexPageSource (  (    context ,    headers )     -  >    client ,    new   ThriftConnectorStats (  )  ,    new   ThriftIndexHandle ( new   SchemaTableName (  \" default \"  ,     \" table 1  \"  )  ,    TupleDomain . all (  )  )  ,    ImmutableList . of ( TestThriftIndexPageSource . column (  \" a \"  ,    INTEGER )  )  ,    ImmutableList . of ( TestThriftIndexPageSource . column (  \" b \"  ,    INTEGER )  )  ,    new   com . facebook . presto . spi . InMemoryRecordSet ( ImmutableList . of ( INTEGER )  ,    TestThriftIndexPageSource . generateKeys (  1  ,     ( splits    +     1  )  )  )  ,    TestThriftIndexPageSource . MAX _ BYTES _ PER _ RESPONSE ,    lookupRequestsConcurrency )  ;", "List < Integer >    actual    =    new   ArrayList <  >  (  )  ;", "while    (  !  ( pageSource . isFinished (  )  )  )     {", "CompletableFuture <  ?  >    blocked    =    pageSource . isBlocked (  )  ;", "blocked . get (  1  ,    TimeUnit . SECONDS )  ;", "Page   page    =    pageSource . getNextPage (  )  ;", "if    ( page    !  =    null )     {", "Block   block    =    page . getBlock (  0  )  ;", "for    ( int   position    =     0  ;    position    <     ( block . getPositionCount (  )  )  ;    position +  +  )     {", "actual . add ( block . getInt ( position ,     0  )  )  ;", "}", "}", "}", "Collections . sort ( actual )  ;", "List < Integer >    expected    =    new   ArrayList <  >  (  ( splits    *    rowsPerSplit )  )  ;", "for    ( int   split    =     1  ;    split    <  =    splits ;    split +  +  )     {", "for    ( int   row    =     0  ;    row    <    rowsPerSplit ;    row +  +  )     {", "expected . add (  (  ( split    *     1  0  )     +    row )  )  ;", "}", "}", "assertEquals ( actual ,    expected )  ;", "assertNull ( pageSource . getNextPage (  )  )  ;", "pageSource . close (  )  ;", "}", "METHOD_END"], "methodName": ["runGeneralTest"], "fileName": "com.facebook.presto.connector.thrift.TestThriftIndexPageSource"}, {"methodBody": ["METHOD_START", "{", "TestThriftIndexPageSource . runGeneralTest (  2  ,     4  ,     1  ,    false )  ;", "}", "METHOD_END"], "methodName": ["testGetNextPageMoreConcurrencyThanRequestsNoContinuation"], "fileName": "com.facebook.presto.connector.thrift.TestThriftIndexPageSource"}, {"methodBody": ["METHOD_START", "{", "TestThriftIndexPageSource . runGeneralTest (  5  ,     2  ,     2  ,    true )  ;", "}", "METHOD_END"], "methodName": ["testGetNextPageMultipleSplitRequest"], "fileName": "com.facebook.presto.connector.thrift.TestThriftIndexPageSource"}, {"methodBody": ["METHOD_START", "{", "TestThriftIndexPageSource . runGeneralTest (  0  ,     2  ,     2  ,    false )  ;", "}", "METHOD_END"], "methodName": ["testGetNextPageNoSplits"], "fileName": "com.facebook.presto.connector.thrift.TestThriftIndexPageSource"}, {"methodBody": ["METHOD_START", "{", "TestThriftIndexPageSource . runGeneralTest (  3  ,     1  ,     3  ,    false )  ;", "}", "METHOD_END"], "methodName": ["testGetNextPageOneConcurrentRequest"], "fileName": "com.facebook.presto.connector.thrift.TestThriftIndexPageSource"}, {"methodBody": ["METHOD_START", "{", "final   int   splits    =     3  ;", "final   int   lookupRequestsConcurrency    =     2  ;", "final   int   rowsPerSplit    =     1  ;", "List < SettableFuture < PrestoThriftPageResult >  >    futures    =    IntStream . range (  0  ,    splits )  . mapToObj (  (    i )     -  >    SettableFuture .  < PrestoThriftPageResult > create (  )  )  . collect ( toImmutableList (  )  )  ;", "List < CountDownLatch >    signals    =    IntStream . range (  0  ,    splits )  . mapToObj (  (    i )     -  >    new   CountDownLatch (  1  )  )  . collect ( toImmutableList (  )  )  ;", ". TestingThriftService   client    =    new    . TestingThriftService ( rowsPerSplit ,    false ,    false )     {", "@ Override", "public   ListenableFuture < PrestoThriftPageResult >    getRows ( PrestoThriftId   splitId ,    List < String >    columns ,    long   maxBytes ,    PrestoThriftNullableToken   nextToken )     {", "int   key    =    Ints . fromByteArray ( splitId . getId (  )  )  ;", "signals . get ( key )  . countDown (  )  ;", "return   futures . get ( key )  ;", "}", "}  ;", "ThriftConnectorStats   stats    =    new   ThriftConnectorStats (  )  ;", "long   pageSizeReceived    =     0  ;", "ThriftIndexPageSource   pageSource    =    new   ThriftIndexPageSource (  (    context ,    headers )     -  >    client ,    stats ,    new   ThriftIndexHandle ( new   SchemaTableName (  \" default \"  ,     \" table 1  \"  )  ,    TupleDomain . all (  )  )  ,    ImmutableList . of (  . column (  \" a \"  ,    INTEGER )  )  ,    ImmutableList . of (  . column (  \" b \"  ,    INTEGER )  )  ,    new   com . facebook . presto . spi . InMemoryRecordSet ( ImmutableList . of ( INTEGER )  ,     . generateKeys (  0  ,    splits )  )  ,     . MAX _ BYTES _ PER _ RESPONSE ,    lookupRequestsConcurrency )  ;", "assertNull ( pageSource . getNextPage (  )  )  ;", "assertEquals (  (  ( long )     ( stats . getIndexPageSize (  )  . getAllTime (  )  . getTotal (  )  )  )  ,     0  )  ;", "signals . get (  0  )  . await (  1  ,    TimeUnit . SECONDS )  ;", "signals . get (  1  )  . await (  1  ,    TimeUnit . SECONDS )  ;", "signals . get (  2  )  . await (  1  ,    TimeUnit . SECONDS )  ;", "assertEquals ( signals . get (  0  )  . getCount (  )  ,     0  ,     \" first   request   wasn ' t   sent \"  )  ;", "assertEquals ( signals . get (  1  )  . getCount (  )  ,     0  ,     \" second   request   wasn ' t   sent \"  )  ;", "assertEquals ( signals . get (  2  )  . getCount (  )  ,     1  ,     \" third   request   shouldn ' t   be   sent \"  )  ;", "assertFalse ( pageSource . isFinished (  )  )  ;", "assertNull ( pageSource . getNextPage (  )  )  ;", "assertEquals (  (  ( long )     ( stats . getIndexPageSize (  )  . getAllTime (  )  . getTotal (  )  )  )  ,     0  )  ;", "futures . get (  1  )  . set (  . pageResult (  2  0  ,    null )  )  ;", "Page   page    =    pageSource . getNextPage (  )  ;", "pageSizeReceived    +  =    page . getSizeInBytes (  )  ;", "assertEquals (  (  ( long )     ( stats . getIndexPageSize (  )  . getAllTime (  )  . getTotal (  )  )  )  ,    pageSizeReceived )  ;", "assertNotNull ( page )  ;", "assertEquals ( page . getPositionCount (  )  ,     1  )  ;", "assertEquals ( page . getBlock (  0  )  . getInt (  0  ,     0  )  ,     2  0  )  ;", "assertFalse ( pageSource . isFinished (  )  )  ;", "signals . get (  2  )  . await (  1  ,    TimeUnit . SECONDS )  ;", "assertEquals ( signals . get (  2  )  . getCount (  )  ,     0  ,     \" third   request   wasn ' t   sent \"  )  ;", "futures . get (  0  )  . set (  . pageResult (  1  0  ,    null )  )  ;", "page    =    pageSource . getNextPage (  )  ;", "assertNotNull ( page )  ;", "pageSizeReceived    +  =    page . getSizeInBytes (  )  ;", "assertEquals (  (  ( long )     ( stats . getIndexPageSize (  )  . getAllTime (  )  . getTotal (  )  )  )  ,    pageSizeReceived )  ;", "assertEquals ( page . getPositionCount (  )  ,     1  )  ;", "assertEquals ( page . getBlock (  0  )  . getInt (  0  ,     0  )  ,     1  0  )  ;", "assertFalse ( pageSource . isFinished (  )  )  ;", "futures . get (  2  )  . set (  . pageResult (  3  0  ,    null )  )  ;", "page    =    pageSource . getNextPage (  )  ;", "assertNotNull ( page )  ;", "pageSizeReceived    +  =    page . getSizeInBytes (  )  ;", "assertEquals (  (  ( long )     ( stats . getIndexPageSize (  )  . getAllTime (  )  . getTotal (  )  )  )  ,    pageSizeReceived )  ;", "assertEquals ( page . getPositionCount (  )  ,     1  )  ;", "assertEquals ( page . getBlock (  0  )  . getInt (  0  ,     0  )  ,     3  0  )  ;", "assertTrue ( pageSource . isFinished (  )  )  ;", "assertNull ( pageSource . getNextPage (  )  )  ;", "pageSource . close (  )  ;", "}", "METHOD_END"], "methodName": ["testGetNextPageTwoConcurrentRequests"], "fileName": "com.facebook.presto.connector.thrift.TestThriftIndexPageSource"}, {"methodBody": ["METHOD_START", "{", "for    ( Plugin   plugin    :    ServiceLoader . load ( Plugin . class )  )     {", "if    ( clazz . isInstance ( plugin )  )     {", "return    (  ( T )     ( plugin )  )  ;", "}", "}", "throw   new   AssertionError (  (  \" did   not   find   plugin :     \"     +     ( clazz . getName (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["loadPlugin"], "fileName": "com.facebook.presto.connector.thrift.TestThriftPlugin"}, {"methodBody": ["METHOD_START", "{", "ThriftPlugin   plugin    =    TestThriftPlugin . loadPlugin ( ThriftPlugin . class )  ;", "ConnectorFactory   factory    =    getOnlyElement ( plugin . getConnectorFactories (  )  )  ;", "Assertions . assertInstanceOf ( factory ,    ThriftConnectorFactory . class )  ;", "Map < String ,    String >    config    =    ImmutableMap . of (  \" presto . thrift . client . addresses \"  ,     \" localhost :  7  7  7  9  \"  )  ;", "Connector   connector    =    factory . create (  \" test \"  ,    config ,    new   TestingConnectorContext (  )  )  ;", "assertNotNull ( connector )  ;", "Assertions . assertInstanceOf ( connector ,    ThriftConnector . class )  ;", "}", "METHOD_END"], "methodName": ["testPlugin"], "fileName": "com.facebook.presto.connector.thrift.TestThriftPlugin"}, {"methodBody": ["METHOD_START", "{", "return   columnName ;", "}", "METHOD_END"], "methodName": ["getColumnName"], "fileName": "com.facebook.presto.connector.thrift.ThriftColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   columnType ;", "}", "METHOD_END"], "methodName": ["getColumnType"], "fileName": "com.facebook.presto.connector.thrift.ThriftColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   comment ;", "}", "METHOD_END"], "methodName": ["getComment"], "fileName": "com.facebook.presto.connector.thrift.ThriftColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   hidden ;", "}", "METHOD_END"], "methodName": ["isHidden"], "fileName": "com.facebook.presto.connector.thrift.ThriftColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . spi . ColumnMetadata ( columnName ,    columnType ,    comment ,    hidden )  ;", "}", "METHOD_END"], "methodName": ["toColumnMetadata"], "fileName": "com.facebook.presto.connector.thrift.ThriftColumnHandle"}, {"methodBody": ["METHOD_START", "{", "return   lookupRequestsConcurrency ;", "}", "METHOD_END"], "methodName": ["getLookupRequestsConcurrency"], "fileName": "com.facebook.presto.connector.thrift.ThriftConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "return   maxResponseSize ;", "}", "METHOD_END"], "methodName": ["getMaxResponseSize"], "fileName": "com.facebook.presto.connector.thrift.ThriftConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "return   metadataRefreshThreads ;", "}", "METHOD_END"], "methodName": ["getMetadataRefreshThreads"], "fileName": "com.facebook.presto.connector.thrift.ThriftConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "this . lookupRequestsConcurrency    =    lookupRequestsConcurrency ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setLookupRequestsConcurrency"], "fileName": "com.facebook.presto.connector.thrift.ThriftConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "this . maxResponseSize    =    maxResponseSize ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setMaxResponseSize"], "fileName": "com.facebook.presto.connector.thrift.ThriftConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "this . metadataRefreshThreads    =    metadataRefreshThreads ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setMetadataRefreshThreads"], "fileName": "com.facebook.presto.connector.thrift.ThriftConnectorConfig"}, {"methodBody": ["METHOD_START", "{", "return   splitId ;", "}", "METHOD_END"], "methodName": ["getSplitId"], "fileName": "com.facebook.presto.connector.thrift.ThriftConnectorSplit"}, {"methodBody": ["METHOD_START", "{", "indexPageSize . add ( bytes )  ;", "}", "METHOD_END"], "methodName": ["addIndexPageSize"], "fileName": "com.facebook.presto.connector.thrift.ThriftConnectorStats"}, {"methodBody": ["METHOD_START", "{", "scanPageSize . add ( bytes )  ;", "}", "METHOD_END"], "methodName": ["addScanPageSize"], "fileName": "com.facebook.presto.connector.thrift.ThriftConnectorStats"}, {"methodBody": ["METHOD_START", "{", "return   indexPageSize ;", "}", "METHOD_END"], "methodName": ["getIndexPageSize"], "fileName": "com.facebook.presto.connector.thrift.ThriftConnectorStats"}, {"methodBody": ["METHOD_START", "{", "return   scanPageSize ;", "}", "METHOD_END"], "methodName": ["getScanPageSize"], "fileName": "com.facebook.presto.connector.thrift.ThriftConnectorStats"}, {"methodBody": ["METHOD_START", "{", "return   schemaTableName ;", "}", "METHOD_END"], "methodName": ["getSchemaTableName"], "fileName": "com.facebook.presto.connector.thrift.ThriftIndexHandle"}, {"methodBody": ["METHOD_START", "{", "return   tupleDomain ;", "}", "METHOD_END"], "methodName": ["getTupleDomain"], "fileName": "com.facebook.presto.connector.thrift.ThriftIndexHandle"}, {"methodBody": ["METHOD_START", "{", "if    ( future    !  =    null )     {", "future . cancel ( true )  ;", "}", "}", "METHOD_END"], "methodName": ["cancelQuietly"], "fileName": "com.facebook.presto.connector.thrift.ThriftIndexPageSource"}, {"methodBody": ["METHOD_START", "{", "Iterator < ListenableFuture < PrestoThriftPageResult >  >    iterator    =    dataRequests . iterator (  )  ;", "while    ( iterator . hasNext (  )  )     {", "ListenableFuture < PrestoThriftPageResult >    future    =    iterator . next (  )  ;", "if    ( future . isDone (  )  )     {", "iterator . remove (  )  ;", "return   future ;", "}", "}", "throw   new   IllegalStateException (  \" No   completed   splits   in   the   queue \"  )  ;", "}", "METHOD_END"], "methodName": ["getAndRemoveNextCompletedRequest"], "fileName": "com.facebook.presto.connector.thrift.ThriftIndexPageSource"}, {"methodBody": ["METHOD_START", "{", "if    ( haveSplits )     {", "return   true ;", "}", "if    (  ( splitFuture )     =  =    null )     {", "splitFuture    =    sendSplitRequest ( null )  ;", "statusFuture    =    MoreFutures . toCompletableFuture ( nonCancellationPropagating ( splitFuture )  )  ;", "}", "if    (  !  ( splitFuture . isDone (  )  )  )     {", "return   false ;", "}", "PrestoSplitBatch   batch    =    MoreFutures . getFutureValue ( splitFuture )  ;", "splits . addAll ( batch . getSplits (  )  )  ;", "if    (  ( batch . getNextToken (  )  )     !  =    null )     {", "splitFuture    =    sendSplitRequest ( batch . getNextToken (  )  )  ;", "statusFuture    =    MoreFutures . toCompletableFuture ( nonCancellationPropagating ( splitFuture )  )  ;", "return   false ;", "} else    {", "splitFuture    =    null ;", "statusFuture    =    null ;", "haveSplits    =    true ;", "return   true ;", "}", "}", "METHOD_END"], "methodName": ["loadAllSplits"], "fileName": "com.facebook.presto.connector.thrift.ThriftIndexPageSource"}, {"methodBody": ["METHOD_START", "{", "if    ( split . getHosts (  )  . isEmpty (  )  )     {", "return   client . get (  )  ;", "}", "return   client . get ( Optional . of ( split . getHosts (  )  . stream (  )  . map (  (    host )     -  >    host . toHostAddress (  )  . toString (  )  )  . collect ( Colls . joining (  \"  ,  \"  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["openClient"], "fileName": "com.facebook.presto.connector.thrift.ThriftIndexPageSource"}, {"methodBody": ["METHOD_START", "{", "long   start    =    System . nanoTime (  )  ;", "ListenableFuture < PrestoThriftPageResult >    future    =    context . getClient (  )  . getRows ( context . getSplit (  )  . getSplitId (  )  ,    outputColumnNames ,    maxBytesPerResponse ,    new   api . PrestoThriftNullableToken ( nextToken )  )  ;", "future    =    ThriftExceptions . catchingThriftException ( future )  ;", "future . addListener (  (  )     -  >    readTimeNanos . addAndGet (  (  ( System . nanoTime (  )  )     -    start )  )  ,    directExecutor (  )  )  ;", "dataRequests . add ( future )  ;", "contexts . put ( future ,    context )  ;", "}", "METHOD_END"], "methodName": ["sendDataRequest"], "fileName": "com.facebook.presto.connector.thrift.ThriftIndexPageSource"}, {"methodBody": ["METHOD_START", "{", "long   start    =    System . nanoTime (  )  ;", "ListenableFuture < PrestoThriftSplitBatch >    future    =    client . get (  )  . getIndexSplits ( schemaTableName ,    lookupColumnNames ,    outputColumnNames ,    keys ,    outputConstraint ,    ThriftIndexPageSource . MAX _ SPLIT _ COUNT ,    new   api . PrestoThriftNullableToken ( nextToken )  )  ;", "future    =    ThriftExceptions . catchingThriftException ( future )  ;", "future . addListener (  (  )     -  >    readTimeNanos . addAndGet (  (  ( System . nanoTime (  )  )     -    start )  )  ,    directExecutor (  )  )  ;", "return   future ;", "}", "METHOD_END"], "methodName": ["sendSplitRequest"], "fileName": "com.facebook.presto.connector.thrift.ThriftIndexPageSource"}, {"methodBody": ["METHOD_START", "{", "PrestoThriftSplit   split    =    splits . get ( splitIndex )  ;", "( splitIndex )  +  +  ;", ". RunningSplitContext   context    =    new    . RunningSplitContext ( openClient ( split )  ,    split )  ;", "sendDataRequest ( context ,    null )  ;", "}", "METHOD_END"], "methodName": ["startDataFetchForNextSplit"], "fileName": "com.facebook.presto.connector.thrift.ThriftIndexPageSource"}, {"methodBody": ["METHOD_START", "{", "dataSignalFuture    =    MoreFutures . whenAnyComplete ( dataRequests )  ;", "statusFuture    =    MoreFutures . toCompletableFuture ( nonCancellationPropagating ( dataSignalFuture )  )  ;", "}", "METHOD_END"], "methodName": ["updateSignalAndStatusFutures"], "fileName": "com.facebook.presto.connector.thrift.ThriftIndexPageSource"}, {"methodBody": ["METHOD_START", "{", "Optional < ThriftTableMetadata >    table    =    tableCache . getUnchecked ( schemaTableName )  ;", "if    (  !  ( table . isPresent (  )  )  )     {", "throw   new   spi . TableNotFoundException ( schemaTableName )  ;", "} else    {", "return   table . get (  )  ;", "}", "}", "METHOD_END"], "methodName": ["getRequiredTableMetadata"], "fileName": "com.facebook.presto.connector.thrift.ThriftMetadata"}, {"methodBody": ["METHOD_START", "{", "PrestoThriftSchemaTableName   name ;", "try    {", "name    =    new   PrestoThriftSchemaTableName ( schemaTableName )  ;", "}    catch    ( IllegalArgumentException   e )     {", "return   new   PrestoThriftNullableTable ( null )  ;", "}", "try    {", "return   client . get (  )  . getTable ( name )  ;", "}    catch    ( PrestoThriftServiceException    |    TException   e )     {", "throw   ThriftExceptions . toPrestoException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["getTableMetadata"], "fileName": "com.facebook.presto.connector.thrift.ThriftMetadata"}, {"methodBody": ["METHOD_START", "{", "Objects . requireNonNull ( schemaTableName ,     \" schemaTableName   is   null \"  )  ;", "PrestoThriftNullableTable   thriftTable    =    getTable ( schemaTableName )  ;", "if    (  ( thriftTable . getTable (  )  )     =  =    null )     {", "return   Optional . empty (  )  ;", "}", "ThriftTable   table    =    new   ThriftTable ( thriftTable . getTable (  )  ,    typeManager )  ;", "if    (  !  ( Objects . equals ( schemaTableName ,    table . getSchemaTableName (  )  )  )  )     {", "throw   new   PrestoException ( ThriftErrorCode . THRIFT _ SERVICE _ INVALID _ RESPONSE ,     \" Requested   and   actual   table   names   are   different \"  )  ;", "}", "return   Optional . of ( table )  ;", "}", "METHOD_END"], "methodName": ["getTableMetadataInternal"], "fileName": "com.facebook.presto.connector.thrift.ThriftMetadata"}, {"methodBody": ["METHOD_START", "{", "return   Executors . newFixedThreadPool ( config . getMetadataRefreshThreads (  )  ,    Threads . daemonThreadsNamed (  \" metadata - refresh -  % s \"  )  )  ;", "}", "METHOD_END"], "methodName": ["createMetadataRefreshExecutor"], "fileName": "com.facebook.presto.connector.thrift.ThriftModule"}, {"methodBody": ["METHOD_START", "{", "return   nextToken    !  =    null ;", "}", "METHOD_END"], "methodName": ["canGetMoreData"], "fileName": "com.facebook.presto.connector.thrift.ThriftPageSource"}, {"methodBody": ["METHOD_START", "{", "firstCall    =    false ;", "nextToken    =    rowsBatch . getNextToken (  )  ;", "Page   page    =    rowsBatch . toPage ( columnTypes )  ;", "if    ( page    !  =    null )     {", "long   pageSize    =    page . getSizeInBytes (  )  ;", "completedBytes    +  =    pageSize ;", "stats . addScanize ( pageSize )  ;", "} else    {", "stats . addScanize (  0  )  ;", "}", "return   page ;", "}", "METHOD_END"], "methodName": ["processBatch"], "fileName": "com.facebook.presto.connector.thrift.ThriftPageSource"}, {"methodBody": ["METHOD_START", "{", "long   start    =    System . nanoTime (  )  ;", "ListenableFuture < PrestoThriftPageResult >    rowsBatchFuture    =    client . getRows ( splitId ,    columnNames ,    maxBytesPerResponse ,    new   api . PrestoThriftNullableToken ( nextToken )  )  ;", "rowsBatchFuture    =    ThriftExceptions . catchingThriftException ( rowsBatchFuture )  ;", "rowsBatchFuture . addListener (  (  )     -  >    readTimeNanos . addAndGet (  (  ( System . nanoTime (  )  )     -    start )  )  ,    directExecutor (  )  )  ;", "return   MoreFutures . toCompletableFuture ( nonCancellationPropagating ( rowsBatchFuture )  )  ;", "}", "METHOD_END"], "methodName": ["sendDataRequestInternal"], "fileName": "com.facebook.presto.connector.thrift.ThriftPageSource"}, {"methodBody": ["METHOD_START", "{", "ClassLoader   classLoader    =    ThriftPlugin . class . getClassLoader (  )  ;", "ServiceLoader < ThriftPluginInfo >    loader    =    ServiceLoader . load ( ThriftPluginInfo . class ,    classLoader )  ;", "List < ThriftPluginInfo >    list    =    ImmutableList . copyOf ( loader )  ;", "return   list . isEmpty (  )     ?    new   ThriftPluginInfo (  )     :    getOnlyElement ( list )  ;", "}", "METHOD_END"], "methodName": ["getPluginInfo"], "fileName": "com.facebook.presto.connector.thrift.ThriftPlugin"}, {"methodBody": ["METHOD_START", "{", "return    (    binder )     -  >    driftClientBinder ( binder )  . bindDriftClient (  . class )  . withAddressSelector ( extendedSimpleAddressSelector (  )  )  ;", "}", "METHOD_END"], "methodName": ["getLocationModule"], "fileName": "com.facebook.presto.connector.thrift.ThriftPluginInfo"}, {"methodBody": ["METHOD_START", "{", "return    \" presto - thrift \"  ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.facebook.presto.connector.thrift.ThriftPluginInfo"}, {"methodBody": ["METHOD_START", "{", "return   sessionProperties ;", "}", "METHOD_END"], "methodName": ["getSessionProperties"], "fileName": "com.facebook.presto.connector.thrift.ThriftSessionProperties"}, {"methodBody": ["METHOD_START", "{", "return   columns . stream (  )  . map ( ThriftColumnHandle . class :  : cast )  . map ( ThriftColumnHandle :  : getColumnName )  . collect ( toImmutableSet (  )  )  ;", "}", "METHOD_END"], "methodName": ["columnNames"], "fileName": "com.facebook.presto.connector.thrift.ThriftSplitManager"}, {"methodBody": ["METHOD_START", "{", "return   schemaName ;", "}", "METHOD_END"], "methodName": ["getSchemaName"], "fileName": "com.facebook.presto.connector.thrift.ThriftTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   tableName ;", "}", "METHOD_END"], "methodName": ["getTableName"], "fileName": "com.facebook.presto.connector.thrift.ThriftTableHandle"}, {"methodBody": ["METHOD_START", "{", "return   columns ;", "}", "METHOD_END"], "methodName": ["getColumns"], "fileName": "com.facebook.presto.connector.thrift.ThriftTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "return   constraint ;", "}", "METHOD_END"], "methodName": ["getConstraint"], "fileName": "com.facebook.presto.connector.thrift.ThriftTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "return   schemaName ;", "}", "METHOD_END"], "methodName": ["getSchemaName"], "fileName": "com.facebook.presto.connector.thrift.ThriftTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "return   tableName ;", "}", "METHOD_END"], "methodName": ["getTableName"], "fileName": "com.facebook.presto.connector.thrift.ThriftTableLayoutHandle"}, {"methodBody": ["METHOD_START", "{", "return   columns . stream (  )  . map (  (    column )     -  >    column . toColumnMetadata ( typeManager )  )  . collect ( toImmutableList (  )  )  ;", "}", "METHOD_END"], "methodName": ["columnMetadata"], "fileName": "com.facebook.presto.connector.thrift.ThriftTableMetadata"}, {"methodBody": ["METHOD_START", "{", "Set < String >    keyColumns    =    indexableColumns . stream (  )  . map ( ThriftColumnHandle . class :  : cast )  . map ( ThriftColumnHandle :  : getColumnName )  . collect ( toImmutableSet (  )  )  ;", "return   indexableKeys . contains ( keyColumns )  ;", "}", "METHOD_END"], "methodName": ["containsIndexableColumns"], "fileName": "com.facebook.presto.connector.thrift.ThriftTableMetadata"}, {"methodBody": ["METHOD_START", "{", "return   indexableKeys . stream (  )  . map ( ImmutableSet :  : copyOf )  . collect ( toImmutableSet (  )  )  ;", "}", "METHOD_END"], "methodName": ["deepImmutableCopy"], "fileName": "com.facebook.presto.connector.thrift.ThriftTableMetadata"}, {"methodBody": ["METHOD_START", "{", "return   columns ;", "}", "METHOD_END"], "methodName": ["getColumns"], "fileName": "com.facebook.presto.connector.thrift.ThriftTableMetadata"}, {"methodBody": ["METHOD_START", "{", "return   schemaTableName ;", "}", "METHOD_END"], "methodName": ["getSchemaTableName"], "fileName": "com.facebook.presto.connector.thrift.ThriftTableMetadata"}, {"methodBody": ["METHOD_START", "{", "return   new   com . facebook . presto . spi . ConnectorTableMetadata ( schemaTableName ,    columns ,    ImmutableMap . of (  )  ,    comment )  ;", "}", "METHOD_END"], "methodName": ["toConnectorTableMetadata"], "fileName": "com.facebook.presto.connector.thrift.ThriftTableMetadata"}, {"methodBody": ["METHOD_START", "{", "List < DriftServer >    servers    =    null ;", "DistributedQueryRunner   runner    =    null ;", "try    {", "servers    =  . startThriftServers ( thriftServers ,    enableIndexJoin )  ;", "runner    =  . creatInternal ( servers ,    nodeCount ,    properties )  ;", "return   newWithServers ( runner ,    servers )  ;", "}    catch    ( Throwable   t )     {", "Closeables . closeQuietly ( runner )  ;", "if    ( servers    !  =    null )     {", "for    ( DriftServer   server    :    servers )     {", "server . shutdown (  )  ;", "}", "}", "throw   t ;", "}", "}", "METHOD_END"], "methodName": ["createThriftQueryRunner"], "fileName": "com.facebook.presto.connector.thrift.integration.ThriftQueryRunner"}, {"methodBody": ["METHOD_START", "{", "String   addresses    =    servers . stream (  )  . map (  (    server )     -  >     \" localhost :  \"     +     ( driftServerPort ( server )  )  )  . collect ( Collectors . joining (  \"  ,  \"  )  )  ;", "Session   defaultSession    =    testSessionBuilder (  )  . setCatalog (  \" thrift \"  )  . setSchema (  \" tiny \"  )  . build (  )  ;", "Distributed   queryRunner    =    Distributed . builder ( defaultSession )  . setNodeCount ( nodeCount )  . setExtraProperties ( properties )  . build (  )  ;", "queryRunner . installPlugin ( new   ThriftPlugin (  )  )  ;", "Map < String ,    String >    connectorProperties    =    ImmutableMap .  < String ,    String > builder (  )  . put (  \" presto . thrift . client . addresses \"  ,    addresses )  . put (  \" presto . thrift . client . connect - timeout \"  ,     \"  3  0 s \"  )  . put (  \" presto - thrift . lookup - requests - concurrency \"  ,     \"  2  \"  )  . build (  )  ;", "queryRunner . createCatalog (  \" thrift \"  ,     \" presto - thrift \"  ,    connectorProperties )  ;", "return   queryRunner ;", "}", "METHOD_END"], "methodName": ["createThriftQueryRunnerInternal"], "fileName": "com.facebook.presto.connector.thrift.integration.ThriftQueryRunner"}, {"methodBody": ["METHOD_START", "{", "return    (  ( DriftNettyServerTransport )     ( server . getServerTransport (  )  )  )  . getPort (  )  ;", "}", "METHOD_END"], "methodName": ["driftServerPort"], "fileName": "com.facebook.presto.connector.thrift.integration.ThriftQueryRunner"}, {"methodBody": ["METHOD_START", "{", "Logging . initialize (  )  ;", "Map < String ,    String >    properties    =    ImmutableMap . of (  \" http - server . http . port \"  ,     \"  8  0  8  0  \"  )  ;", "WithServers   queryRunner    =     ( WithServers )     . creat (  3  ,     3  ,    true ,    properties )  )  )  ;", "Thread . sleep (  1  0  )  ;", "Logger   log    =    Logger . get . class )  ;", "log . info (  \"  =  =  =  =  =  =  =  =    SERVER   STARTED    =  =  =  =  =  =  =  =  \"  )  ;", "log . info (  \"  \\ n =  =  =  =  \\ n % s \\ n =  =  =  =  \"  ,    queryRunner . getCoordinator (  )  . getBaseUrl (  )  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.facebook.presto.connector.thrift.integration.ThriftQueryRunner"}, {"methodBody": ["METHOD_START", "{", "List < DriftServer >    servers    =    new   ArrayList <  >  ( thriftServers )  ;", "for    ( int   i    =     0  ;    i    <    thriftServers ;    i +  +  )     {", "ThriftTpchService   service    =     ( enableIndexJoin )     ?    new   ThriftIndexedTpchService (  )     :    new   ThriftTpchService (  )  ;", "DriftServer   server    =    new   DriftServer ( new   io . airlift . drift . transport . netty . server . DriftNettyServerTransportFactory ( new   DriftNettyServerConfig (  )  )  ,     . CODEC _ MANAGER ,    new   NullMethodInvocationStatsFactory (  )  ,    ImmutableSet . of ( new   io . airlift . drift . server . DriftService ( service )  )  ,    ImmutableSet . of (  )  )  ;", "server . start (  )  ;", "servers . add ( server )  ;", "}", "return   servers ;", "}", "METHOD_END"], "methodName": ["startThriftServers"], "fileName": "com.facebook.presto.connector.thrift.integration.ThriftQueryRunner"}, {"methodBody": ["METHOD_START", "{", "return   new   ExtendedSimpleAddressSelectorBinder (  )  ;", "}", "METHOD_END"], "methodName": ["extendedSimpleAddressSelector"], "fileName": "com.facebook.presto.connector.thrift.location.ExtendedSimpleAddressSelectorBinder"}, {"methodBody": ["METHOD_START", "{", "return   catchingAsync ( future ,    Exception . class ,     (    e )     -  >    immediateFailedFuture ( toPrestoException ( e )  )  )  ;", "}", "METHOD_END"], "methodName": ["catchingThriftException"], "fileName": "com.facebook.presto.connector.thrift.util.ThriftExceptions"}, {"methodBody": ["METHOD_START", "{", "if    (  ( e   instanceof   TTransportException )     &  &     (  \" No   hosts   available \"  . equals ( e . getMessage (  )  )  )  )     {", "throw   new   PrestoException ( ThriftErrorCode . THRIFT _ SERVICE _ NO _ AVAILABLE _ HOSTS ,    e )  ;", "}", "if    (  ( e   instanceof   TApplicationException )     |  |     ( e   instanceof   PrestoThriftServiceException )  )     {", "return   new   PrestoException ( ThriftErrorCode . THRIFT _ SERVICE _ GENERIC _ REMOTE _ ERROR ,     \" Exception   raised   by   remote   Thrift   server \"  ,    e )  ;", "}", "if    ( e   instanceof   TException )     {", "return   new   PrestoException ( ThriftErrorCode . THRIFT _ SERVICE _ CONNECTION _ ERROR ,     \" Error   communicating   with   remote   Thrift   server \"  ,    e )  ;", "}", "throw   new   PrestoException ( GENERIC _ INTERNAL _ ERROR ,    e )  ;", "}", "METHOD_END"], "methodName": ["toPrestoException"], "fileName": "com.facebook.presto.connector.thrift.util.ThriftExceptions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( tupleDomain . getDomains (  )  . isPresent (  )  )  )     {", "return   new   PrestoThrift ( null )  ;", "}", "return   new   PrestoThrift ( tupleDomain . getDomains (  )  . get (  )  . entrySet (  )  . stream (  )  . collect ( toImmutableMap (  (    entry )     -  >     (  ( ThriftColumnHandle )     ( entry . getKey (  )  )  )  . getColumnName (  )  ,     (    entry )     -  >    fromDomain ( entry . getValue (  )  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["tupleDomainToThriftTupleDomain"], "fileName": "com.facebook.presto.connector.thrift.util.TupleDomainConversion"}]