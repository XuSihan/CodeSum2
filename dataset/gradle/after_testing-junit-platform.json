[{"methodBody": ["METHOD_START", "{", "if    (  !  ( spec . getIncludeEngines (  )  . isEmpty (  )  )  )     {", "requBuilder . filters ( includeEngines ( spec . getIncludeEngines (  )  )  )  ;", "}", "if    (  !  ( spec . getExcludeEngines (  )  . isEmpty (  )  )  )     {", "requBuilder . filters ( excludeEngines ( spec . getExcludeEngines (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addEnginesFilter"], "fileName": "org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( spec . getIncludeTags (  )  . isEmpty (  )  )  )     {", "requBuilder . filters ( includeTags ( spec . getIncludeTags (  )  )  )  ;", "}", "if    (  !  ( spec . getExcludeTags (  )  . isEmpty (  )  )  )     {", "requBuilder . filters ( excludeTags ( spec . getExcludeTags (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addTagsFilter"], "fileName": "org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor"}, {"methodBody": ["METHOD_START", "{", "if    (  (  !  ( spec . getIncludedTests (  )  . isEmpty (  )  )  )     |  |     (  !  ( spec . getIncludedTestsCommandLine (  )  . isEmpty (  )  )  )  )     {", "TestSelectionMatcher   matcher    =    new   TestSelectionMatcher ( spec . getIncludedTests (  )  ,    spec . getIncludedTestsCommandLine (  )  )  ;", "requestBuilder . filters ( new    . ClassMethodNameFilter ( matcher )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addTestNameFilters"], "fileName": "org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor"}, {"methodBody": ["METHOD_START", "{", "List < DiscoverySelector >    classSelectors    =    testClasses . stream (  )  . map ( DiscoverySelectors :  : selectClass )  . collect ( Collectors . toList (  )  )  ;", "LauncherDiscoveryRequestBuilder   requestBuilder    =    LauncherDiscoveryRequestBuilder . request (  )  . selectors ( classSelectors )  ;", "addTestNameFilters ( requestBuilder )  ;", "addEnginesFilter ( requestBuilder )  ;", "addTagsFilter ( requestBuilder )  ;", "return   requestBuilder . build (  )  ;", "}", "METHOD_END"], "methodName": ["createLauncherDiscoveryRequest"], "fileName": "org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor"}, {"methodBody": ["METHOD_START", "{", "return    (  ( klass . getEnclosingClass (  )  )     !  =    null )     &  &     (  !  ( Modifier . isStatic ( klass . getModifiers (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["isInnerClass"], "fileName": "org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor"}, {"methodBody": ["METHOD_START", "{", "try    {", "ClassLoader   applicationClassloader    =    Thread . currentThread (  )  . getContexLoader (  )  ;", "return   Class . forName ( className ,    false ,    applicationClassloader )  ;", "}    catch    ( ClassNotFoundException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["loadClass"], "fileName": "org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestClassProcessor"}, {"methodBody": ["METHOD_START", "{", "if    ( testClassIdentifier    !  =    null )     {", "return   testClassIdentifier . getDisplayName (  )  ;", "} else    {", "return    \" UnknownClass \"  ;", "}", "}", "METHOD_END"], "methodName": ["classDisplayName"], "fileName": "org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestExecutionListener"}, {"methodBody": ["METHOD_START", "{", "if    (  ( testClassIdentifier    !  =    null )     &  &     ( testClassIdentifier . getSource (  )  . isPresent (  )  )  )     {", "return   ClassSource . class . cast ( testClassIdentifier . getSource (  )  . get (  )  )  . getClassName (  )  ;", "} else    {", "return    \" UnknownClass \"  ;", "}", "}", "METHOD_END"], "methodName": ["className"], "fileName": "org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestExecutionListener"}, {"methodBody": ["METHOD_START", "{", "TestIdentifier   classIdentifier    =    findClassSource ( test )  ;", "String   className    =    className ( classIdentifier )  ;", "String   classDisplayName    =    classDisplayName ( classIdentifier )  ;", "return   new   DefaultTestDescriptor ( idGenerator . generateId (  )  ,    className ,    name ,    classDisplayName ,    displayName )  ;", "}", "METHOD_END"], "methodName": ["createDescriptor"], "fileName": "org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestExecutionListener"}, {"methodBody": ["METHOD_START", "{", "reportTestClassStarted ( testIdentifier )  ;", "reportTestClassFinished ( testIdentifier ,    tResult . getThrowable (  )  . get (  )  )  ;", "}", "METHOD_END"], "methodName": ["executionFailedBeforeTestClassStart"], "fileName": "org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestExecutionListener"}, {"methodBody": ["METHOD_START", "{", "if    ( isFailedContainer ( testIdentifier ,    testExecutionResult )  )     {", "adapter . testStarted ( testIdentifier . getUniqueId (  )  ,    getDescriptor ( testIdentifier )  )  ;", "testFinished ( testIdentifier ,    testExecutionResult )  ;", "} else", "if    ( isLeafTest ( testIdentifier )  )     {", "testFinished ( testIdentifier ,    testExecutionResult )  ;", "}", "if    ( isClass ( testIdentifier )  )     {", "reportTestClassFinished ( testIdentifier )  ;", "}", "}", "METHOD_END"], "methodName": ["executionFinishedAfterTestClassStart"], "fileName": "org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestExecutionListener"}, {"methodBody": ["METHOD_START", "{", "if    ( isClass ( testIdentifier )  )     {", "return   testIdentifier ;", "}", "while    ( testIdentifier . getParentId (  )  . isPresent (  )  )     {", "testIdentifier    =    currentTestPlan . getTestIdentifier ( testIdentifier . getParentId (  )  . get (  )  )  ;", "if    ( isClass ( testIdentifier )  )     {", "return   testIdentifier ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["findClassSource"], "fileName": "org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestExecutionListener"}, {"methodBody": ["METHOD_START", "{", "if    ( isMethod ( test )  )     {", "return   createDescriptor ( test ,    test . getLegacyReportingName (  )  ,    test . getDisplayName (  )  )  ;", "} else", "if    ( VintageTestNameAdapter . isVintageDynamicLeafTest ( test )  )     {", "UniqueId   uniqueId    =    parse ( test . getUniqueId (  )  )  ;", "return   new   DefaultTestDescriptor ( idGenerator . generateId (  )  ,    VintageTestNameAdapter . vintageDynamicClassName ( uniqueId )  ,    VintageTestNameAdapter . vintageDynamicMethodName ( uniqueId )  )  ;", "} else", "if    (  ( isClass ( test )  )     |  |     ( VintageTestNameAdapter . isVintageDynamicTestClass ( test )  )  )     {", "return   createDescriptor ( test ,     \" classMethod \"  ,     \" classMethod \"  )  ;", "} else    {", "return   createDescriptor ( test ,    test . getDisplayName (  )  ,    test . getDisplayName (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getDescriptor"], "fileName": "org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestExecutionListener"}, {"methodBody": ["METHOD_START", "{", "return    ( test . getSource (  )  . isPresent (  )  )     &  &     (  ( test . getSource (  )  . get (  )  )    instanceof   ClassSource )  ;", "}", "METHOD_END"], "methodName": ["isClass"], "fileName": "org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestExecutionListener"}, {"methodBody": ["METHOD_START", "{", "return    (  ( result . getStatus (  )  )     !  =     ( SUCCESSFUL )  )     &  &     ( testIdentifier . isContainer (  )  )  ;", "}", "METHOD_END"], "methodName": ["isFailedContainer"], "fileName": "org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestExecutionListener"}, {"methodBody": ["METHOD_START", "{", "return    ( identifier . isTest (  )  )     &  &     (  !  ( VintageTestNameAdapter . isVintageDynamicTestClass ( identifier )  )  )  ;", "}", "METHOD_END"], "methodName": ["isLeafTest"], "fileName": "org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestExecutionListener"}, {"methodBody": ["METHOD_START", "{", "return    ( test . getSource (  )  . isPresent (  )  )     &  &     (  ( test . getSource (  )  . get (  )  )    instanceof   MethodSource )  ;", "}", "METHOD_END"], "methodName": ["isMethod"], "fileName": "org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestExecutionListener"}, {"methodBody": ["METHOD_START", "{", "currentRunningTestClass . end ( className ( testIdentifier )  ,    null )  ;", "}", "METHOD_END"], "methodName": ["reportTestClassFinished"], "fileName": "org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestExecutionListener"}, {"methodBody": ["METHOD_START", "{", "currentRunningTestClass . end ( className ( testIdentifier )  ,    failure )  ;", "}", "METHOD_END"], "methodName": ["reportTestClassFinished"], "fileName": "org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestExecutionListener"}, {"methodBody": ["METHOD_START", "{", "currentRunningTestClass . start ( className ( testIdentifier )  ,    classDisplayName ( testIdentifier )  )  ;", "}", "METHOD_END"], "methodName": ["reportTestClassStarted"], "fileName": "org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestExecutionListener"}, {"methodBody": ["METHOD_START", "{", "return    ( isFailedContainer ( testIdentifier ,    testExecutionResult )  )     &  &     (  ( currentRunningTestClass . count )     =  =     0  )  ;", "}", "METHOD_END"], "methodName": ["testFailedBeforeTestClassStart"], "fileName": "org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestExecutionListener"}, {"methodBody": ["METHOD_START", "{", "switch    ( testExecutionResult . getStatus (  )  )     {", "case   SUCCESSFUL    :", "break ;", "case   FAILED    :", "adapter . testFailure ( testIdentifier . getUniqueId (  )  ,    getDescriptor ( testIdentifier )  ,    testExecutionResult . getThrowable (  )  . get (  )  )  ;", "break ;", "case   ABORTED    :", "adapter . testAssumptionFailure ( testIdentifier . getUniqueId (  )  )  ;", "break ;", "default    :", "throw   new   AssertionError (  (  \" Invalid   Status :     \"     +     ( testExecutionResult . getStatus (  )  )  )  )  ;", "}", "adapter . testFinished ( testIdentifier . getUniqueId (  )  )  ;", "}", "METHOD_END"], "methodName": ["testFinished"], "fileName": "org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformTestExecutionListener"}, {"methodBody": ["METHOD_START", "{", "return    (  ( test . getSource (  )  . isPresent (  )  )     &  &     (  ( test . getSource (  )  . get (  )  )    instanceof   ClassSource )  )     &  &     ( test . isTest (  )  )  ;", "}", "METHOD_END"], "methodName": ["isClassAndTest"], "fileName": "org.gradle.api.internal.tasks.testing.junitplatform.VintageTestNameAdapter"}, {"methodBody": ["METHOD_START", "{", "return    (  ( test . isTest (  )  )     &  &     ( source   instanceof   ClassSource )  )     &  &     ( VintageTestNameAdapter . VINTAGE _ DESCRIPTOR _ CLASS _ NAME . equals ( test . getClass (  )  . getSimpleName (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["isVintageDynamicLeafTest"], "fileName": "org.gradle.api.internal.tasks.testing.junitplatform.VintageTestNameAdapter"}, {"methodBody": ["METHOD_START", "{", "return    (  ( test . getParentId (  )  . isPresent (  )  )     &  &     (  !  ( VintageTestNameAdapter . VINTAGE _ ENGINE . equals ( test . getParentId (  )  . get (  )  )  )  )  )     &  &     ( VintageTestNameAdapter . isClassAndTest ( test )  )  ;", "}", "METHOD_END"], "methodName": ["isVintageDynamicLeafTest"], "fileName": "org.gradle.api.internal.tasks.testing.junitplatform.VintageTestNameAdapter"}, {"methodBody": ["METHOD_START", "{", "return    (  ( test . getParentId (  )  . isPresent (  )  )     &  &     ( VintageTestNameAdapter . VINTAGE _ ENGINE . equals ( test . getParentId (  )  . get (  )  )  )  )     &  &     ( VintageTestNameAdapter . isClassAndTest ( test )  )  ;", "}", "METHOD_END"], "methodName": ["isVintageDynamicTestClass"], "fileName": "org.gradle.api.internal.tasks.testing.junitplatform.VintageTestNameAdapter"}, {"methodBody": ["METHOD_START", "{", "return   JUnitTestEventAdapter . className ( VintageTestNameAdapter . vintageTestName ( uniqueId )  )  ;", "}", "METHOD_END"], "methodName": ["vintageDynamicClassName"], "fileName": "org.gradle.api.internal.tasks.testing.junitplatform.VintageTestNameAdapter"}, {"methodBody": ["METHOD_START", "{", "return   JUnitTestEventAdapter . methodName ( VintageTestNameAdapter . vintageTestName ( uniqueId )  )  ;", "}", "METHOD_END"], "methodName": ["vintageDynamicMethodName"], "fileName": "org.gradle.api.internal.tasks.testing.junitplatform.VintageTestNameAdapter"}, {"methodBody": ["METHOD_START", "{", "List < UniqueId . Segment >    segments    =    uniqueId . getSegments (  )  ;", "return   segments . get (  (  ( segments . size (  )  )     -     1  )  )  . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["vintageTestName"], "fileName": "org.gradle.api.internal.tasks.testing.junitplatform.VintageTestNameAdapter"}]