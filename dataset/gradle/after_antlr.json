[{"methodBody": ["METHOD_START", "{", "project . getPluginManager (  )  . apply ( JavaPlugin . class )  ;", "final   Configuration   antlrConfiguration    =    project . getConfigurations (  )  . create ( AntlrPlugin . ANTLR _ CONFIGURATION _ NAME )  . setVisible ( false )  . setDescription (  \" The   Antlr   libraries   to   be   used   for   this   project .  \"  )  ;", "antlrConfiguration . defaultDependencies ( new   Action < DependencySet >  (  )     {", "@ Override", "public   void   execute ( DependencySet   dependencies )     {", "dependencies . add ( project . getDependencies (  )  . create (  \" antlr : antlr :  2  .  7  .  7  @ jar \"  )  )  ;", "}", "}  )  ;", "project . getConfigurations (  )  . getByName ( JavaPlugin . COMPILE _ CONFIGURATION _ NAME )  . extendsFrom ( antlrConfiguration )  ;", "project . getTasks (  )  . withType ( AntlrTask . class ,    new   Action < AntlrTask >  (  )     {", "public   void   execute ( AntlrTask   antlrTask )     {", "antlrTask . getConventionMapping (  )  . map (  \" antlrClasspath \"  ,    new   Callable < Object >  (  )     {", "public   Object   call (  )    throws   Exception    {", "return   project . getConfigurations (  )  . getByName ( AntlrPlugin . ANTLR _ CONFIGURATION _ NAME )  ;", "}", "}  )  ;", "}", "}  )  ;", "project . getConvention (  )  . getPlugin ( JavaPluginConvention . class )  . getSourceSets (  )  . all ( new   Action < SourceSet >  (  )     {", "public   void   execute ( SourceSet   sourceSet )     {", "final   AntlrSourceVirtualDirectoryImpl   antlrDirectoryDelegate    =    new   AntlrSourceVirtualDirectoryImpl (  (  ( DefaultSourceSet )     ( sourceSet )  )  . getDisplayName (  )  ,    sourceDirectorySetFactory )  ;", "new   internal . plugins . DslObject ( sourceSet )  . getConvention (  )  . getPlugins (  )  . put ( AntlrSourceVirtualDirectory . NAME ,    antlrDirectoryDelegate )  ;", "final   String   srcDir    =     (  \" src /  \"     +     ( sourceSet . getName (  )  )  )     +     \"  / antlr \"  ;", "antlrDirectoryDelegate . getAntlr (  )  . srcDir ( srcDir )  ;", "sourceSet . getAllSource (  )  . source ( antlrDirectoryDelegate . getAntlr (  )  )  ;", "final   String   taskName    =    sourceSet . getTaskName (  \" generate \"  ,     \" GrammarSource \"  )  ;", "AntlrTask   antlrTask    =    project . getTasks (  )  . create ( taskName ,    AntlrTask . class )  ;", "antlrTask . setDescription (  (  (  \" Processes   the    \"     +     ( sourceSet . getName (  )  )  )     +     \"    Antlr   grammars .  \"  )  )  ;", "antlrTask . setSource ( antlrDirectoryDelegate . getAntlr (  )  )  ;", "final   String   outputDirectoryName    =     (  ( project . getBuildDir (  )  )     +     \"  / generated - src / antlr /  \"  )     +     ( sourceSet . getName (  )  )  ;", "final   File   outputDirectory    =    new   File ( outputDirectoryName )  ;", "antlrTask . setOutputDirectory ( outputDirectory )  ;", "sourceSet . getJava (  )  . srcDir ( outputDirectory )  ;", "project . getTasks (  )  . getByName ( sourceSet . getCompileJavaTaskName (  )  )  . dependsOn ( taskName )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["apply"], "fileName": "org.gradle.api.plugins.antlr.AntlrPlugin"}, {"methodBody": ["METHOD_START", "{", "int   errorCount    =    result . getErrorCount (  )  ;", "if    ( errorCount    <     0  )     {", "throw   new   SourceGenerationException (  \" There   were   errors   during   grammar   generation \"  ,    result . getException (  )  )  ;", "} else", "if    ( errorCount    =  =     1  )     {", "throw   new   SourceGenerationException (  \" There   was    1    error   during   grammar   generation \"  ,    result . getException (  )  )  ;", "} else", "if    ( errorCount    >     1  )     {", "throw   new   SourceGenerationException (  (  (  \" There   were    \"     +    errorCount )     +     \"    errors   during   grammar   generation \"  )  ,    result . getException (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["evaluate"], "fileName": "org.gradle.api.plugins.antlr.AntlrTask"}, {"methodBody": ["METHOD_START", "{", "final   Set < File >    grammarFiles    =    new   HashSet < File >  (  )  ;", "final   Set < File >    sourceFiles    =    getSource (  )  . getFiles (  )  ;", "final   AtomicBoolean   cleanRebuild    =    new   AtomicBoolean (  )  ;", "inputs . outOfDate ( new   Action < InputFileDetails >  (  )     {", "public   void   execute ( InputFileDetails   details )     {", "File   input    =    details . getFile (  )  ;", "if    ( sourceFiles . contains ( input )  )     {", "grammarFiles . add ( input )  ;", "} else    {", "cleanRebuild . set ( true )  ;", "}", "}", "}  )  ;", "inputs . removed ( new   Action < InputFileDetails >  (  )     {", "@ Override", "public   void   execute ( InputFileDetails   details )     {", "if    ( details . isRemoved (  )  )     {", "cleanRebuild . set ( true )  ;", "}", "}", "}  )  ;", "if    ( cleanRebuild . get (  )  )     {", "GFileUtils . cleanDirectory ( outputDirectory )  ;", "grammarFiles . addAll ( sourceFiles )  ;", "}", "AntlrWorkerManager   manager    =    new   AntlrWorkerManager (  )  ;", "AntlrSpec   spec    =    new   AntlrSpecFactory (  )  . create ( this ,    grammarFiles ,    sourceDirectorySet )  ;", "AntlrResult   result    =    manager . runWorker ( getProject (  )  . getProjectDir (  )  ,    getWorkerProcessBuilderFactory (  )  ,    getAntlrClasspath (  )  ,    spec )  ;", "evaluate ( result )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.api.plugins.antlr.AntlrTask"}, {"methodBody": ["METHOD_START", "{", "return   antlrClasspath ;", "}", "METHOD_END"], "methodName": ["getAntlrClasspath"], "fileName": "org.gradle.api.plugins.antlr.AntlrTask"}, {"methodBody": ["METHOD_START", "{", "return   arguments ;", "}", "METHOD_END"], "methodName": ["getArguments"], "fileName": "org.gradle.api.plugins.antlr.AntlrTask"}, {"methodBody": ["METHOD_START", "{", "return   maxHeapSize ;", "}", "METHOD_END"], "methodName": ["getMaxHeapSize"], "fileName": "org.gradle.api.plugins.antlr.AntlrTask"}, {"methodBody": ["METHOD_START", "{", "return   outputDirectory ;", "}", "METHOD_END"], "methodName": ["getOutputDirectory"], "fileName": "org.gradle.api.plugins.antlr.AntlrTask"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getWorkerProcessBuilderFactory"], "fileName": "org.gradle.api.plugins.antlr.AntlrTask"}, {"methodBody": ["METHOD_START", "{", "return   trace ;", "}", "METHOD_END"], "methodName": ["isTrace"], "fileName": "org.gradle.api.plugins.antlr.AntlrTask"}, {"methodBody": ["METHOD_START", "{", "return   traceLexer ;", "}", "METHOD_END"], "methodName": ["isTraceLexer"], "fileName": "org.gradle.api.plugins.antlr.AntlrTask"}, {"methodBody": ["METHOD_START", "{", "return   traceParser ;", "}", "METHOD_END"], "methodName": ["isTraceParser"], "fileName": "org.gradle.api.plugins.antlr.AntlrTask"}, {"methodBody": ["METHOD_START", "{", "return   traceTreeWalker ;", "}", "METHOD_END"], "methodName": ["isTraceTreeWalker"], "fileName": "org.gradle.api.plugins.antlr.AntlrTask"}, {"methodBody": ["METHOD_START", "{", "this . antlrClasspath    =    antlrClasspath ;", "}", "METHOD_END"], "methodName": ["setAntlrClasspath"], "fileName": "org.gradle.api.plugins.antlr.AntlrTask"}, {"methodBody": ["METHOD_START", "{", "if    ( arguments    !  =    null )     {", "thirguments    =    arguments ;", "}", "}", "METHOD_END"], "methodName": ["setArguments"], "fileName": "org.gradle.api.plugins.antlr.AntlrTask"}, {"methodBody": ["METHOD_START", "{", "this . maxHeapSize    =    maxHeapSize ;", "}", "METHOD_END"], "methodName": ["setMaxHeapSize"], "fileName": "org.gradle.api.plugins.antlr.AntlrTask"}, {"methodBody": ["METHOD_START", "{", "this . outputDirectory    =    outputDirectory ;", "}", "METHOD_END"], "methodName": ["setOutputDirectory"], "fileName": "org.gradle.api.plugins.antlr.AntlrTask"}, {"methodBody": ["METHOD_START", "{", "this . trace    =    trace ;", "}", "METHOD_END"], "methodName": ["setTrace"], "fileName": "org.gradle.api.plugins.antlr.AntlrTask"}, {"methodBody": ["METHOD_START", "{", "this . traceLexer    =    traceLexer ;", "}", "METHOD_END"], "methodName": ["setTraceLexer"], "fileName": "org.gradle.api.plugins.antlr.AntlrTask"}, {"methodBody": ["METHOD_START", "{", "this . traceParser    =    traceParser ;", "}", "METHOD_END"], "methodName": ["setTraceParser"], "fileName": "org.gradle.api.plugins.antlr.AntlrTask"}, {"methodBody": ["METHOD_START", "{", "this . traceTreeWalker    =    traceTreeWalker ;", "}", "METHOD_END"], "methodName": ["setTraceTreeWalker"], "fileName": "org.gradle.api.plugins.antlr.AntlrTask"}, {"methodBody": ["METHOD_START", "{", "return   errorCount ;", "}", "METHOD_END"], "methodName": ["getErrorCount"], "fileName": "org.gradle.api.plugins.antlr.internal.AntlrResult"}, {"methodBody": ["METHOD_START", "{", "return   exception ;", "}", "METHOD_END"], "methodName": ["getException"], "fileName": "org.gradle.api.plugins.antlr.internal.AntlrResult"}, {"methodBody": ["METHOD_START", "{", "List < String >    commandLine    =    Lists . newLinkedList ( arguments )  ;", "commandLindd (  \"  - o \"  )  ;", "commandLindd ( getOutputDirectory (  )  . getAbsolutth (  )  )  ;", "for    ( File   file    :    getGrammarFiles (  )  )     {", "commandLindd ( file . getAbsolutth (  )  )  ;", "}", "return   commandLine ;", "}", "METHOD_END"], "methodName": ["asArgumentsWithFiles"], "fileName": "org.gradle.api.plugins.antlr.internal.AntlrSpec"}, {"methodBody": ["METHOD_START", "{", "return   arguments ;", "}", "METHOD_END"], "methodName": ["getArguments"], "fileName": "org.gradle.api.plugins.antlr.internal.AntlrSpec"}, {"methodBody": ["METHOD_START", "{", "return   grammarFiles ;", "}", "METHOD_END"], "methodName": ["getGrammarFiles"], "fileName": "org.gradle.api.plugins.antlr.internal.AntlrSpec"}, {"methodBody": ["METHOD_START", "{", "return   inputDirectories ;", "}", "METHOD_END"], "methodName": ["getInputDirectories"], "fileName": "org.gradle.api.plugins.antlr.internal.AntlrSpec"}, {"methodBody": ["METHOD_START", "{", "return   maxHeapSize ;", "}", "METHOD_END"], "methodName": ["getMaxHeapSize"], "fileName": "org.gradle.api.plugins.antlr.internal.AntlrSpec"}, {"methodBody": ["METHOD_START", "{", "return   outputDirectory ;", "}", "METHOD_END"], "methodName": ["getOutputDirectory"], "fileName": "org.gradle.api.plugins.antlr.internal.AntlrSpec"}, {"methodBody": ["METHOD_START", "{", "List < String >    arguments    =    Lists . newLinkedList ( antlrTask . getArguments (  )  )  ;", "if    (  ( antlrTask . isTrace (  )  )     &  &     (  !  ( arguments . contains (  \"  - trace \"  )  )  )  )     {", "arguments . add (  \"  - trace \"  )  ;", "}", "if    (  ( antlrTask . isTraceLexer (  )  )     &  &     (  !  ( arguments . contains (  \"  - traceLexer \"  )  )  )  )     {", "arguments . add (  \"  - traceLexer \"  )  ;", "}", "if    (  ( antlrTask . isTraceParser (  )  )     &  &     (  !  ( arguments . contains (  \"  - traceParser \"  )  )  )  )     {", "arguments . add (  \"  - traceParser \"  )  ;", "}", "if    (  ( antlrTask . isTraceTreeWalker (  )  )     &  &     (  !  ( arguments . contains (  \"  - traceTreeWalker \"  )  )  )  )     {", "arguments . add (  \"  - traceTreeWalker \"  )  ;", "}", "return   new    ( arguments ,    grammarFiles ,    sourceDirectorySet . getSrcDirs (  )  ,    antlrTask . getOutputDirectory (  )  ,    antlrTask . getMaxHeapSize (  )  )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.api.plugins.antlr.internal.AntlrSpecFactory"}, {"methodBody": ["METHOD_START", "{", "SingleRequestWorkerProcessBuilder < AntlrWorker >    builder    =    workerFactory . singleRequestWorker ( AntlrWorker . class ,    AntlrExecuter . class )  ;", "builder . setBaseName (  \" Gradle   ANTLR   Worker \"  )  ;", "if    ( antlrClasspath    !  =    null )     {", "builder . applicationClasspath ( antlrClasspath )  ;", "}", "builder . sharedPackages ( new   String [  ]  {     \" antlr \"  ,     \" antlr \"     }  )  ;", "JavaExecHandleBuilder   javaCommand    =    builder . getJavaCommand (  )  ;", "setWorkingDir ( workingDir )  ;", "setMaxHeapSize ( spec . getMaxHeapSize (  )  )  ;", "systemProperty (  \" ANTLR _ DO _ NOT _ EXIT \"  ,     \" true \"  )  ;", "redirectErrorStream (  )  ;", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["createWorkerProcess"], "fileName": "org.gradle.api.plugins.antlr.internal.AntlrWorkerManager"}, {"methodBody": ["METHOD_START", "{", "AntlrWorker   antlrWorker    =    createWorkerProcess ( workingDir ,    workerFactory ,    antlrClasspath ,    spec )  ;", "return   antlrWorker . runAntlr ( spec )  ;", "}", "METHOD_END"], "methodName": ["runWorker"], "fileName": "org.gradle.api.plugins.antlr.internal.AntlrWorkerManager"}, {"methodBody": ["METHOD_START", "{", "return   generationDirectory ;", "}", "METHOD_END"], "methodName": ["getGenerationDirectory"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GenerationPlan"}, {"methodBody": ["METHOD_START", "{", "return   getSource (  )  . getPath (  )  ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GenerationPlan"}, {"methodBody": ["METHOD_START", "{", "return   importVocabTokenTypesDirectory ;", "}", "METHOD_END"], "methodName": ["getImportVocabTokenTypesDirectory"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GenerationPlan"}, {"methodBody": ["METHOD_START", "{", "return   source ;", "}", "METHOD_END"], "methodName": ["getSource"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GenerationPlan"}, {"methodBody": ["METHOD_START", "{", "return   outOfDate ;", "}", "METHOD_END"], "methodName": ["isOutOfDate"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GenerationPlan"}, {"methodBody": ["METHOD_START", "{", "this . outOfDate    =    true ;", "}", "METHOD_END"], "methodName": ["markOutOfDate"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GenerationPlan"}, {"methodBody": ["METHOD_START", "{", "this . importVocabTokenTypesDirectory    =    importVocabTokenTypesDirectory ;", "}", "METHOD_END"], "methodName": ["setImportVocabTokenTypesDirectory"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GenerationPlan"}, {"methodBody": ["METHOD_START", "{", "File   generationDirectory    =     ( isEmpty ( grammarFileMetadata . getPackageName (  )  )  )     ?    outputDirectory    :    new   File ( outputDirectory ,    grammarFileMetadata . getPackageName (  )  . replace (  '  .  '  ,    File . separatorChar )  )  ;", "GenerationPlan   generationPlan    =    new   GenerationPlan ( grammarFileMetadata . getFilePath (  )  ,    generationDirectory )  ;", "for    ( GrammarMetadata   grammarMetadata    :    grammarFileMetadata . getGrammars (  )  )     {", "final   File   generatedParserFile    =    new   File ( outputDirectory ,    grammarMetadata . determineGeneratedParserPath (  )  )  ;", "if    (  !  ( generatedParserFile . exists (  )  )  )     {", "generationPlan . markOutOfDate (  )  ;", "} else", "if    (  ( generatedParserFile . lastModified (  )  )     <     ( generationPlan . getSource (  )  . lastModified (  )  )  )     {", "generationPlan . markOutOfDate (  )  ;", "}", "if    (  !  ( grammarMetadata . extendsStandardGrammar (  )  )  )     {", "final   GrammarFileMetadata   superGrammarGrammarFileMetadata    =    grammarMetadata . getSuperGrammarDelegate (  )  . getAssociatedGrammarMetadata (  )  . getGrammarFile (  )  ;", "if    ( superGrammarGrammarFileMetadata    !  =    null )     {", "final   GenerationPlan   superGrammarGenerationPlan    =    locateOrBuildGenerationPlan ( superGrammarGrammarFileMetadata )  ;", "if    ( superGrammarGenerationPlan . isOutOfDate (  )  )     {", "generationPlan . markOutOfDate (  )  ;", "} else", "if    (  ( superGrammarGenerationPlan . getSource (  )  . lastModified (  )  )     >     ( generatedParserFile . lastModified (  )  )  )     {", "generationPlan . markOutOfDate (  )  ;", "}", "}", "}", "if    ( isNotEmpty ( grammarMetadata . getImportVocab (  )  )  )     {", "final   GrammarFileMetadata   importVocabGrammarFileMetadata    =    metadataXRef . getGrammarFileByExportVocab ( grammarMetadata . getImportVocab (  )  )  ;", "if    ( importVocabGrammarFileMetadata    =  =    null )     {", ". LOGGER . warn (  (  (  \" unable   to   locate   grammar   exporting   specified   import   vocab    [  \"     +     ( grammarMetadata . getImportVocab (  )  )  )     +     \"  ]  \"  )  )  ;", "} else", "if    (  !  ( importVocabGrammarFileMetadata . getFilePath (  )  . equals ( grammarFileMetadata . getFilePath (  )  )  )  )     {", "final   GenerationPlan   importVocabGrammarGenerationPlan    =    locateOrBuildGenerationPlan ( importVocabGrammarFileMetadata )  ;", "generationPlan . setImportVocabTokenTypesDirectory ( importVocabGrammarGenerationPlan . getGenerationDirectory (  )  )  ;", "if    ( importVocabGrammarGenerationPlan . isOutOfDate (  )  )     {", "generationPlan . markOutOfDate (  )  ;", "} else", "if    (  ( importVocabGrammarGenerationPlan . getSource (  )  . lastModified (  )  )     >     ( generatedParserFile . lastModified (  )  )  )     {", "generationPlan . markOutOfDate (  )  ;", "}", "}", "}", "}", "generationPlans . put ( generationPlan . getId (  )  ,    generationPlan )  ;", "return   generationPlan ;", "}", "METHOD_END"], "methodName": ["buildGenerationPlan"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GenerationPlanBuilder"}, {"methodBody": ["METHOD_START", "{", "this . metadataXRef    =    metadataXRef ;", "Iterator < GrammarFileMetadata >    grammarFiles    =    metadataXRef . iterateGrammarFiles (  )  ;", "while    ( grammarFiles . hasNext (  )  )     {", "final   GrammarFileMetadata   grammarFileMetadata    =    grammarFiles . next (  )  ;", "locateOrBuild ( grammarFileMetadata )  ;", "}", "return   new   ArrayList <  >  ( generationPlans . values (  )  )  ;", "}", "METHOD_END"], "methodName": ["buildGenerationPlans"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GenerationPlanBuilder"}, {"methodBody": ["METHOD_START", "{", "return    ( string    =  =    null )     |  |     (  ( string . trim (  )  . length (  )  )     =  =     0  )  ;", "}", "METHOD_END"], "methodName": ["isEmpty"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GenerationPlanBuilder"}, {"methodBody": ["METHOD_START", "{", "return    !  ( isEmpty ( string )  )  ;", "}", "METHOD_END"], "methodName": ["isNotEmpty"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GenerationPlanBuilder"}, {"methodBody": ["METHOD_START", "{", "GenerationPlan   generationPlan    =    generationPlans . get ( grammarFileMetadata . getFilePath (  )  . getPath (  )  )  ;", "if    ( generationPlan    =  =    null )     {", "generationPlan    =    buildGenerationPlan ( grammarFileMetadata )  ;", "}", "return   generationPlan ;", "}", "METHOD_END"], "methodName": ["locateOrBuildGenerationPlan"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GenerationPlanBuilder"}, {"methodBody": ["METHOD_START", "{", "this . associatedGrammarMetadata    =    associatedGrammarMetadata ;", "}", "METHOD_END"], "methodName": ["associateWith"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GrammarDelegate"}, {"methodBody": ["METHOD_START", "{", "List < GrammarDelegate >    grammarDelegates    =    new   ArrayList < GrammarDelegate >  (  )  ;", "Enumeration   grammarFileGramars    =    antlrGrammarFile . getGrammars (  )  . elements (  )  ;", "while    ( grammarFileGramars . hasMoreElements (  )  )     {", "grammarDelegates . add ( new   GrammarDelegate ( grammarFileGramars . nextElement (  )  )  )  ;", "}", "return   grammarDelegates ;", "}", "METHOD_END"], "methodName": ["extractGrammarDelegates"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GrammarDelegate"}, {"methodBody": ["METHOD_START", "{", "return   associatedGrammarMetadata ;", "}", "METHOD_END"], "methodName": ["getAssociatedGrammarMetadata"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GrammarDelegate"}, {"methodBody": ["METHOD_START", "{", "return   className ;", "}", "METHOD_END"], "methodName": ["getClassName"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GrammarDelegate"}, {"methodBody": ["METHOD_START", "{", "return   exportVocab ;", "}", "METHOD_END"], "methodName": ["getExportVocab"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GrammarDelegate"}, {"methodBody": ["METHOD_START", "{", "return   importVocab ;", "}", "METHOD_END"], "methodName": ["getImportVocab"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GrammarDelegate"}, {"methodBody": ["METHOD_START", "{", "return   superGrammarDelegate ;", "}", "METHOD_END"], "methodName": ["getSuperGrammarDelegate"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GrammarDelegate"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   Class . forName ( className ,    true ,     . class . getClassLoader (  )  )  ;", "}    catch    ( ClassNotFoundException   e )     {", "throw   new   IllegalStateException (  (  (  \" Unable   to   locate   Antlr   class    [  \"     +    className )     +     \"  ]  \"  )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["loadAntlrClass"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GrammarDelegate"}, {"methodBody": ["METHOD_START", "{", "if    ( vocabName    =  =    null )     {", "return   null ;", "}", "vocabName    =    vocabName . trim (  )  ;", "if    ( vocabName . endsWith (  \"  ;  \"  )  )     {", "vocabName    =    vocabName . substring (  0  ,     (  ( vocabName . length (  )  )     -     1  )  )  ;", "}", "return   vocabName ;", "}", "METHOD_END"], "methodName": ["vocabName"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GrammarDelegate"}, {"methodBody": ["METHOD_START", "{", "return   antlrGrammarFile ;", "}", "METHOD_END"], "methodName": ["getAntlrGrammarFile"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GrammarFileMetadata"}, {"methodBody": ["METHOD_START", "{", "return   filePath ;", "}", "METHOD_END"], "methodName": ["getFilePath"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GrammarFileMetadata"}, {"methodBody": ["METHOD_START", "{", "return   grammarMetadatas ;", "}", "METHOD_END"], "methodName": ["getGrammars"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GrammarFileMetadata"}, {"methodBody": ["METHOD_START", "{", "return   packageName ;", "}", "METHOD_END"], "methodName": ["getPackageName"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GrammarFileMetadata"}, {"methodBody": ["METHOD_START", "{", "if    ( isEmpty ( getPackageName (  )  )  )     {", "return    ( getClassName (  )  )     +     \"  . java \"  ;", "} else    {", "return    (  (  ( getPackageName (  )  . replace (  '  .  '  ,    FiseparatorChar )  )     +     ( FiseparatorChar )  )     +     ( getClassName (  )  )  )     +     \"  . java \"  ;", "}", "}", "METHOD_END"], "methodName": ["determineGeneratedParserPath"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GrammarMetadata"}, {"methodBody": ["METHOD_START", "{", "final   String   superGrammarClassName    =    getSuperGrammarDelegate (  )  . getClassName (  )  ;", "return    (  (  (  ( Parser . class . getName (  )  . equals ( superGrammarClassName )  )     |  |     ( Parser . class . getSimpleName (  )  . equals ( superGrammarClassName )  )  )     |  |     ( TreeParser . class . getName (  )  . equals ( superGrammarClassName )  )  )     |  |     ( TreeParser . class . getSimpleName (  )  . equals ( superGrammarClassName )  )  )     |  |     (  \" Lexer \"  . equals ( superGrammarClassName )  )  ;", "}", "METHOD_END"], "methodName": ["extendsStandardGrammar"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GrammarMetadata"}, {"methodBody": ["METHOD_START", "{", "return   grammarDelegate . getClassName (  )  ;", "}", "METHOD_END"], "methodName": ["getClassName"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GrammarMetadata"}, {"methodBody": ["METHOD_START", "{", "return   grammarDelegate . getExportVocab (  )  ;", "}", "METHOD_END"], "methodName": ["getExportVocab"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GrammarMetadata"}, {"methodBody": ["METHOD_START", "{", "return   grammarFileMetadata ;", "}", "METHOD_END"], "methodName": ["getGrammarFile"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GrammarMetadata"}, {"methodBody": ["METHOD_START", "{", "return   grammarDelegate . getImportVocab (  )  ;", "}", "METHOD_END"], "methodName": ["getImportVocab"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GrammarMetadata"}, {"methodBody": ["METHOD_START", "{", "return   getGrammarFile (  )  . getPackageName (  )  ;", "}", "METHOD_END"], "methodName": ["getPackageName"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GrammarMetadata"}, {"methodBody": ["METHOD_START", "{", "if    ( isEmpty ( getPackageName (  )  )  )     {", "return   getClassName (  )  ;", "} else    {", "return    (  ( getPackageName (  )  )     +     '  .  '  )     +     ( getClassName (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getQualifiedClassName"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GrammarMetadata"}, {"methodBody": ["METHOD_START", "{", "return   grammarDelegate . getSuperGrammarDelegate (  )  ;", "}", "METHOD_END"], "methodName": ["getSuperGrammarDelegate"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GrammarMetadata"}, {"methodBody": ["METHOD_START", "{", "return    ( packageName    =  =    null )     |  |     (  ( packageName . trim (  )  . length (  )  )     =  =     0  )  ;", "}", "METHOD_END"], "methodName": ["isEmpty"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.GrammarMetadata"}, {"methodBody": ["METHOD_START", "{", "Tool   tool    =    new   Tool (  )  ;", "Hierarchy   hierarchy    =    new   Hierarchy ( tool )  ;", "for    ( File   grammarFileFile    :    sources )     {", "final   String   grammarFilePath    =    grammarFileFile . getPath (  )  ;", "try    {", "hierarchy . readGrammarFile ( grammarFilePath )  ;", "}    catch    ( FileNotFoundException   e )     {", "throw   new   IllegalStateException (  \" Received   FileNotFoundException   on   already   read   file \"  ,    e )  ;", "}", "}", "XRef   xref    =    new   XRef ( hierarchy )  ;", "for    ( File   grammarFileFile    :    sources )     {", "String   grammarPackageName    =    getPackageName ( grammarFileFile )  ;", "final   String   grammarFilePath    =    grammarFileFile . getPath (  )  ;", "GrammarFile   antlrGrammarFile    =    hierarchy . getFile ( grammarFilePath )  ;", "GrammarFile   grammarFile    =    new   GrammarFile ( grammarFileFile ,    antlrGrammarFile ,    grammarPackageName )  ;", "xref . addGrammarFile ( grammarFile )  ;", "}", "return   xref ;", "}", "METHOD_END"], "methodName": ["extractMetadata"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.MetadataExtracter"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   getPackageName ( new   FileReader ( grammarFileFile )  )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException (  \" Cannot   read      grammar   file \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["getPackageName"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.MetadataExtracter"}, {"methodBody": ["METHOD_START", "{", "String   grammarPackageName    =    null ;", "BufferedReader   in    =    new   BufferedReader ( reader )  ;", "try    {", "String   line ;", "while    (  ( line    =    in . readLine (  )  )     !  =    null )     {", "line    =    line . trim (  )  ;", "if    (  ( line . startsWith (  \" package \"  )  )     &  &     ( line . endsWith (  \"  ;  \"  )  )  )     {", "grammarPackageName    =    line . substring (  8  ,     (  ( line . length (  )  )     -     1  )  )  ;", "} else", "if    ( line . startsWith (  \" header \"  )  )     {", "Pat   p    =    compile (  \" header    \\  \\  {  \\  \\ s * package \\  \\ s +  (  .  +  )  ;  \\  \\ s +  \\  \\  }  \"  )  ;", "Matcher   m    =    p . matcher ( line )  ;", "if    ( m . matches (  )  )     {", "grammarPackageName    =    m . group (  1  )  ;", "}", "}", "}", "}    finally    {", "try    {", "in . close (  )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "return   grammarPackageName ;", "}", "METHOD_END"], "methodName": ["getPackageName"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.MetadataExtracter"}, {"methodBody": ["METHOD_START", "{", "filesByPath . put ( grammarFileMetadata . getFilePath (  )  . getPath (  )  ,    grammarFileMetadata )  ;", "for    ( GrammarMetadata   grammarMetadata    :    grammarFileMetadata . getGrammars (  )  )     {", "filesByClassName . put ( grammarMetadata . getClassName (  )  ,    grammarFileMetadata )  ;", "String   exportVocabName    =     (  ( grammarMetadata . getExportVocab (  )  )     !  =    null )     ?    grammarMetadata . getExportVocab (  )     :    grammarMetadata . getClassName (  )  ;", "GrammarFileMetadata   old    =    filesByExportVocab . put ( exportVocabName ,    grammarFileMetadata )  ;", "if    (  ( old    !  =    null )     &  &     ( old    !  =    grammarFileMetadata )  )     {", "System . out . println (  (  \"  [ WARNING ]     :    multiple   grammars   defined   the   same   exportVocab    :     \"     +    exportVocabName )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addGrammarFile"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.XRef"}, {"methodBody": ["METHOD_START", "{", "return   antlrHierarchy ;", "}", "METHOD_END"], "methodName": ["getAntlrHierarchy"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.XRef"}, {"methodBody": ["METHOD_START", "{", "return   filesByClassName . get ( className )  ;", "}", "METHOD_END"], "methodName": ["getGrammarFileByClassName"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.XRef"}, {"methodBody": ["METHOD_START", "{", "return   filesByExportVocab . get ( vocabName )  ;", "}", "METHOD_END"], "methodName": ["getGrammarFileByExportVocab"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.XRef"}, {"methodBody": ["METHOD_START", "{", "return   filesByPath . get ( path )  ;", "}", "METHOD_END"], "methodName": ["getGrammarFileByPath"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.XRef"}, {"methodBody": ["METHOD_START", "{", "return   filesByPath . values (  )  . iterator (  )  ;", "}", "METHOD_END"], "methodName": ["iterateGrammarFiles"], "fileName": "org.gradle.api.plugins.antlr.internal.antlr2.XRef"}]