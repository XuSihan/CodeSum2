[{"methodBody": ["METHOD_START", "{", "return   candidateClassFiles ;", "}", "METHOD_END"], "methodName": ["getCandidateClassFiles"], "fileName": "org.gradle.api.internal.tasks.testing.JvmTestExecutionSpec"}, {"methodBody": ["METHOD_START", "{", "return   classpath ;", "}", "METHOD_END"], "methodName": ["getClasspath"], "fileName": "org.gradle.api.internal.tasks.testing.JvmTestExecutionSpec"}, {"methodBody": ["METHOD_START", "{", "return   forkEvery ;", "}", "METHOD_END"], "methodName": ["getForkEvery"], "fileName": "org.gradle.api.internal.tasks.testing.JvmTestExecutionSpec"}, {"methodBody": ["METHOD_START", "{", "return   identityPath ;", "}", "METHOD_END"], "methodName": ["getIdentityPath"], "fileName": "org.gradle.api.internal.tasks.testing.JvmTestExecutionSpec"}, {"methodBody": ["METHOD_START", "{", "return   javaForkOptions ;", "}", "METHOD_END"], "methodName": ["getJavaForkOptions"], "fileName": "org.gradle.api.internal.tasks.testing.JvmTestExecutionSpec"}, {"methodBody": ["METHOD_START", "{", "return   maxParallelForks ;", "}", "METHOD_END"], "methodName": ["getMaxParallelForks"], "fileName": "org.gradle.api.internal.tasks.testing.JvmTestExecutionSpec"}, {"methodBody": ["METHOD_START", "{", "return   path ;", "}", "METHOD_END"], "methodName": ["getPath"], "fileName": "org.gradle.api.internal.tasks.testing.JvmTestExecutionSpec"}, {"methodBody": ["METHOD_START", "{", "return   previousFailedTestClasses ;", "}", "METHOD_END"], "methodName": ["getPreviousFailedTestClasses"], "fileName": "org.gradle.api.internal.tasks.testing.JvmTestExecutionSpec"}, {"methodBody": ["METHOD_START", "{", "return   testClassesDirs ;", "}", "METHOD_END"], "methodName": ["getTestClassesDirs"], "fileName": "org.gradle.api.internal.tasks.testing.JvmTestExecutionSpec"}, {"methodBody": ["METHOD_START", "{", "return   testFramework ;", "}", "METHOD_END"], "methodName": ["getTestFramework"], "fileName": "org.gradle.api.internal.tasks.testing.JvmTestExecutionSpec"}, {"methodBody": ["METHOD_START", "{", "return   scanForTestClasses ;", "}", "METHOD_END"], "methodName": ["isScanForTestClasses"], "fileName": "org.gradle.api.internal.tasks.testing.JvmTestExecutionSpec"}, {"methodBody": ["METHOD_START", "{", "final   TestClassVisitor   classVisitor    =    createClassVisitor (  )  ;", "InputStream   classStream    =    null ;", "try    {", "classStream    =    new   BufferedInputStream ( new   FileInputStream ( testClassFile )  )  ;", "final   ClassReader   classReader    =    new   ClassReader ( IOUtils . toByteArray ( classStream )  )  ;", "classReader . accept ( classVisitor ,     (  (  ( ClassReader . SKIP _ DEBUG )     |     ( ClassReader . SKIP _ CODE )  )     |     ( ClassReader . SKIP _ FRAMES )  )  )  ;", "}    catch    ( Throwable   e )     {", "throw   new   GException (  (  \" failed   to   read   class   file    \"     +     ( testClassFile . getAbsolutePath (  )  )  )  ,    e )  ;", "}    finally    {", "IOUtils . closeQuietly ( classStream )  ;", "}", "return   classVisitor ;", "}", "METHOD_END"], "methodName": ["classVisitor"], "fileName": "org.gradle.api.internal.tasks.testing.detection.AbstractTestFrameworkDetector"}, {"methodBody": ["METHOD_START", "{", "prepareClasspath (  )  ;", "if    ( StringUtils . isEmpty ( superClassName )  )     {", "throw   new   IllegalArgumentException (  \" superClassName   is   empty !  \"  )  ;", "}", "File   superTestClassFile    =    null ;", "for    ( File   testClassDirectory    :    testClassDirectories )     {", "File   candidate    =    new   File ( testClassDirectory ,     ( superClassName    +     \"  . class \"  )  )  ;", "if    ( candidate . exists (  )  )     {", "superTestClassFile    =    candidate ;", "}", "}", "if    ( superTestClassFile    !  =    null )     {", "return   superTestClassFile ;", "} else", "if    (  . JAVA _ LANG _ OBJECT . equals ( superClassName )  )     {", "return   null ;", "} else    {", "return   classFileExtractionManager . getLibraryClassFile ( superClassName )  ;", "}", "}", "METHOD_END"], "methodName": ["getSuperTestClassFile"], "fileName": "org.gradle.api.internal.tasks.testing.detection.AbstractTestFrameworkDetector"}, {"methodBody": ["METHOD_START", "{", "if    (  ( testClassDirectories )     !  =    null )     {", "return ;", "}", "testClassDirectories    =    new   ArrayList < File >  (  )  ;", "if    (  ( testClassesDirectories )     !  =    null )     {", "testClassDirectories . addAll ( testClassesDirectories )  ;", "}", "if    (  ( testClasspath )     !  =    null )     {", "for    ( File   file    :    testClasspath )     {", "if    ( file . isDirectory (  )  )     {", "testClassDirectories . add ( file )  ;", "} else", "if    (  ( file . isFile (  )  )     &  &     (  . hasExtension ( file ,     \"  . jar \"  )  )  )     {", "classFileExtractionManager . addLibraryJar ( file )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["prepareClasspath"], "fileName": "org.gradle.api.internal.tasks.testing.detection.AbstractTestFrameworkDetector"}, {"methodBody": ["METHOD_START", "{", "boolean   isTest ;", "Boolean   isSuperTest    =    superClasses . get ( testClassFile )  ;", "if    ( isSuperTest    =  =    null )     {", "isTest    =    processTestClass ( testClassFile ,    true )  ;", "superClasses . put ( testClassFile ,    isTest )  ;", "} else    {", "isTest    =    isSuperTest ;", "}", "return   isTest ;", "}", "METHOD_END"], "methodName": ["processSuperClass"], "fileName": "org.gradle.api.internal.tasks.testing.detection.AbstractTestFrameworkDetector"}, {"methodBody": ["METHOD_START", "{", "final   TestClassVisitor   classVisitor    =    classVisitor ( testClassFile )  ;", "boolean   isTest    =    classVisitor . isTest (  )  ;", "if    (  ! isTest )     {", "final   String   superClassName    =    classVisitor . getSuperClassName (  )  ;", "if    ( isKnownTestCaseClassName ( superClassName )  )     {", "isTest    =    true ;", "} else    {", "final   File   superClassFile    =    getSuperTestClassFile ( superClassName )  ;", "if    ( superClassFile    !  =    null )     {", "isTest    =    processSuperClass ( superClassFile )  ;", "} else    {", ". LOGGER . debug (  \" test - class - scan    :    failed   to   scan   parent   class    {  }  ,    could   not   find   the   class   file \"  ,    superClassName )  ;", "}", "}", "}", "publishTestClass ( isTest ,    classVisitor ,    superClass )  ;", "return   isTest ;", "}", "METHOD_END"], "methodName": ["processTestClass"], "fileName": "org.gradle.api.internal.tasks.testing.detection.AbstractTestFrameworkDetector"}, {"methodBody": ["METHOD_START", "{", "if    (  ( isTest    &  &     (  !  ( classVisitor . isAbstract (  )  )  )  )     &  &     (  ! superClass )  )     {", "String   className    =    Type . getObjectType ( classVisitor . getClassName (  )  )  . getClassName (  )  ;", "testClassProcessor . processTestClass ( new   DefaultTestClassRunInfo ( className )  )  ;", "}", "}", "METHOD_END"], "methodName": ["publishTestClass"], "fileName": "org.gradle.api.internal.tasks.testing.detection.AbstractTestFrameworkDetector"}, {"methodBody": ["METHOD_START", "{", "new   JarFilePackageLister (  )  . listJarPackages ( libraryJar ,    new   JarFilePackageListener (  )     {", "public   void   receivePackage ( String   packageName )     {", "Set < File >    jarFiles    =    packageJarFilesMappings . get ( packageName )  ;", "if    ( jarFiles    =  =    null )     {", "jarFiles    =    new   TreeSet < File >  (  )  ;", "}", "jarFiles . add ( libraryJar )  ;", "packageJarFilesMappings . put ( packageName ,    jarFiles )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["addLibraryJar"], "fileName": "org.gradle.api.internal.tasks.testing.detection.ClassFileExtractionManager"}, {"methodBody": ["METHOD_START", "{", "final   int   lastSlashIndex    =    className . lastIndexOf (  '  /  '  )  ;", "if    ( lastSlashIndex    =  =     (  -  1  )  )     {", "return   null ;", "} else    {", "return   className . substring (  0  ,     ( lastSlashIndex    +     1  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["classNamePackage"], "fileName": "org.gradle.api.internal.tasks.testing.detection.ClassFileExtractionManager"}, {"methodBody": ["METHOD_START", "{", "boolean   classFileExtracted    =    false ;", "final   File   extractedClassFile    =    tempFile (  )  ;", "final   String   classFileName    =    new   StrBuilder (  )  . append ( className )  . append (  \"  . class \"  )  . toString (  )  ;", "final   String   classNamePackage    =    classNamePackage ( className )  ;", "final   Set < File >    packageJarFiles    =    packageJarFilesMappings . get ( classNamePackage )  ;", "File   classFileSourceJar    =    null ;", "if    (  ( packageJarFiles    !  =    null )     &  &     (  !  ( packageJarFiles . isEmpty (  )  )  )  )     {", "final   Iterator < File >    packageJarFilesIt    =    packageJarFiles . iterator (  )  ;", "while    (  (  ! classFileExtracted )     &  &     ( packageJarFilesIt . hasNext (  )  )  )     {", "final   File   jarFile    =    packageJarFilesIt . next (  )  ;", "try    {", "classFileExtracted    =    JarUtil . extractZipEntry ( jarFile ,    classFileName ,    extractedClassFile )  ;", "if    ( classFileExtracted )     {", "classFileSourceJar    =    jarFile ;", "}", "}    catch    ( IOException   e )     {", "throw   new   GradleException (  (  (  \" failed   to   extract   class   file   from   jar    (  \"     +    jarFile )     +     \"  )  \"  )  ,    e )  ;", "}", "}", "if    ( classFileExtracted )     {", ". LOGGER . debug (  \" extracted   class    {  }    from    {  }  \"  ,    className ,    classFileSourceJar . getName (  )  )  ;", "extractedJarClasses . put ( className ,    extractedClassFile )  ;", "}", "}", "return   classFileExtracted ;", "}", "METHOD_END"], "methodName": ["extractClassFile"], "fileName": "org.gradle.api.internal.tasks.testing.detection.ClassFileExtractionManager"}, {"methodBody": ["METHOD_START", "{", "if    ( unextractableClasses . contains ( className )  )     {", "return   null ;", "} else    {", "if    (  !  ( extractedJarClasses . containsKey ( className )  )  )     {", "if    (  !  ( extract ( className )  )  )     {", "unextractableClasses . add ( className )  ;", "}", "}", "return   extractedJarClasses . get ( className )  ;", "}", "}", "METHOD_END"], "methodName": ["getLibraryClassFile"], "fileName": "org.gradle.api.internal.tasks.testing.detection.ClassFileExtractionManager"}, {"methodBody": ["METHOD_START", "{", "return   tempDirProvider . createTemporaryFile (  \" jar _ extract _  \"  ,     \"  _ tmp \"  )  ;", "}", "METHOD_END"], "methodName": ["tempFile"], "fileName": "org.gradle.api.internal.tasks.testing.detection.ClassFileExtractionManager"}, {"methodBody": ["METHOD_START", "{", "testFrameworkDetector . startDetection ( testClassProcessor )  ;", "candidateClassFiles . visit ( new    . ClassFileVisitor (  )     {", "public   void   visitClassFile ( FileVisitDetails   fileDetails )     {", "testFrameworkDetector . processTestClass ( fileDetails . getFile (  )  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["detectionScan"], "fileName": "org.gradle.api.internal.tasks.testing.detection.DefaultTestClassScanner"}, {"methodBody": ["METHOD_START", "{", "candidateClassFiles . visit ( new   DefaultTestClassScanner . ClassFileVisitor (  )     {", "public   void   visitClassFile ( FileVisitDetails   fileDetails )     {", "TestClassRunInfo   testClass    =    new   DefaultTestClassRunInfo ( getClassName ( fileDetails )  )  ;", "testClassProcessor . processTestClass ( testClass )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["filenameScan"], "fileName": "org.gradle.api.internal.tasks.testing.detection.DefaultTestClassScanner"}, {"methodBody": ["METHOD_START", "{", "return   fileDetails . getRelativePath (  )  . getPathString (  )  . replaceAll (  \"  \\  \\  . class \"  ,     \"  \"  )  . replace (  '  /  '  ,     '  .  '  )  ;", "}", "METHOD_END"], "methodName": ["getClassName"], "fileName": "org.gradle.api.internal.tasks.testing.detection.DefaultTestClassScanner"}, {"methodBody": ["METHOD_START", "{", "int   maxParallelForks    =    testExecutionSpec . getMaxParallelForks (  )  ;", "if    ( maxParallelForks    >     ( maxWorkerCount )  )     {", ". LOGGER . info (  \"  {  }  . maxParallelForks    (  {  }  )    is   larger   than   max - workers    (  {  }  )  ,    forcing   it   to    {  }  \"  ,    testExecutionSpec . getPath (  )  ,    maxParallelForks ,    maxWorkerCount ,    maxWorkerCount )  ;", "maxParallelForks    =    maxWorkerCount ;", "}", "return   maxParallelForks ;", "}", "METHOD_END"], "methodName": ["getMaxParallelForks"], "fileName": "org.gradle.api.internal.tasks.testing.detection.DefaultTestExecuter"}, {"methodBody": ["METHOD_START", "{", "if    ( jarFile    =  =    null )     {", "throw   new   IllegalArgumentException (  \" jarFile   is   null !  \"  )  ;", "}", "final   String   jarFileAbsolutePath    =    jarFile . getAbsolutePath (  )  ;", "if    (  !  ( jarFile . exists (  )  )  )     {", "throw   new   IllegalArgumentException (  (  (  \" jarFile   doesn ' t   exists !     (  \"     +    jarFileAbsolutePath )     +     \"  )  \"  )  )  ;", "}", "if    (  !  ( jarFile . isFile (  )  )  )     {", "throw   new   IllegalArgumentException (  (  (  \" jarFile   is   not   a   file !     (  \"     +    jarFileAbsolutePath )     +     \"  )  \"  )  )  ;", "}", "if    (  !  ( FileUtils . hasExtension ( jarFile ,     \"  . jar \"  )  )  )     {", "throw   new   IllegalArgumentException (  (  (  \" jarFile   is   not   a   jarFile !     (  \"     +    jarFileAbsolutePath )     +     \"  )  \"  )  )  ;", "}", "try    {", "ZipFile   zipFile    =    new   ZipFile ( jarFile )  ;", "try    {", "final   Enumeration <  ?    extends   ZipEntry >    zipFileEntries    =    zipFile . entries (  )  ;", "while    ( zipFileEntries . hasMoreElements (  )  )     {", "final   ZipEntry   zipFileEntry    =    zipFileEntries . nextElement (  )  ;", "if    ( zipFileEntry . isDirectory (  )  )     {", "final   String   zipFileEntryName    =    zipFileEntry . getName (  )  ;", "if    (  !  ( zipFileEntryName . startsWith (  \" META - INF \"  )  )  )     {", "listener . receiv ( zipFileEntryName )  ;", "}", "}", "}", "}    finally    {", "zipFile . close (  )  ;", "}", "}    catch    ( IOException   e )     {", "throw   new   GradleException (  (  (  \" failed   to   scan   jar   file   for   packages    (  \"     +    jarFileAbsolutePath )     +     \"  )  \"  )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["listJarPackages"], "fileName": "org.gradle.api.internal.tasks.testing.detection.JarFilePackageLister"}, {"methodBody": ["METHOD_START", "{", "return   className ;", "}", "METHOD_END"], "methodName": ["getClassName"], "fileName": "org.gradle.api.internal.tasks.testing.detection.TestClassVisitor"}, {"methodBody": ["METHOD_START", "{", "return   superClassName ;", "}", "METHOD_END"], "methodName": ["getSuperClassName"], "fileName": "org.gradle.api.internal.tasks.testing.detection.TestClassVisitor"}, {"methodBody": ["METHOD_START", "{", "return    ( name . equals ( getClassName (  )  )  )     &  &     (  ( access    &     ( Opcodes . ACC _ STATIC )  )     =  =     0  )  ;", "}", "METHOD_END"], "methodName": ["innerClassIsNonStatic"], "fileName": "org.gradle.api.internal.tasks.testing.detection.TestClassVisitor"}, {"methodBody": ["METHOD_START", "{", "return   isAbstract ;", "}", "METHOD_END"], "methodName": ["isAbstract"], "fileName": "org.gradle.api.internal.tasks.testing.detection.TestClassVisitor"}, {"methodBody": ["METHOD_START", "{", "return   test ;", "}", "METHOD_END"], "methodName": ["isTest"], "fileName": "org.gradle.api.internal.tasks.testing.detection.TestClassVisitor"}, {"methodBody": ["METHOD_START", "{", "this . test    =    test ;", "}", "METHOD_END"], "methodName": ["setTest"], "fileName": "org.gradle.api.internal.tasks.testing.detection.TestClassVisitor"}, {"methodBody": ["METHOD_START", "{", "try    {", "if    ( classLoader    =  =    null )     {", "classLoader    =    applicationClassLoader ;", "}", "return   classLoader . loadClass ( className )  ;", "}    catch    ( ClassNotFoundException   e )     {", "throw   new   InvalidUserDataException ( String . format (  \" Can ' t   load   c   class    [  % s ]  .  \"  ,    className )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["loadClass"], "fileName": "org.gradle.api.internal.tasks.testing.junit.CategoryFilter"}, {"methodBody": ["METHOD_START", "{", "ClassLoader   classLoader    =    category . getClassLoader (  )  ;", "for    ( String   cls    :    categories )     {", "if    ( loadClass ( classLoader ,    cls )  . isAssignableFrom ( category )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["matches"], "fileName": "org.gradle.api.internal.tasks.testing.junit.CategoryFilter"}, {"methodBody": ["METHOD_START", "{", "final   Set < Class <  ?  >  >    categories    =    new   HashSet < Class <  ?  >  >  (  )  ;", "annotation    =    description . getAnnotation (  . class )  ;", "if    ( annotation    !  =    null )     {", "categories . addAll ( Arrays . asList ( annotation . value (  )  )  )  ;", "}", "if    ( parent    !  =    null )     {", "annotation    =    parent . getAnnotation (  . class )  ;", "if    ( annotation    !  =    null )     {", "categories . addAll ( Arrays . asList ( annotation . value (  )  )  )  ;", "}", "}", "boolean   result    =    inclusions . isEmpty (  )  ;", "for    ( Class <  ?  >    category    :    categories )     {", "if    ( matches ( category ,    inclusions )  )     {", "result    =    true ;", "break ;", "}", "}", "if    ( result )     {", "for    ( Class <  ?  >    category    :    categories )     {", "if    ( matches ( category ,    exclusions )  )     {", "result    =    false ;", "break ;", "}", "}", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["shouldRun"], "fileName": "org.gradle.api.internal.tasks.testing.junit.CategoryFilter"}, {"methodBody": ["METHOD_START", "{", "if    ( testClass    =  =    null )     {", "return ;", "}", "for    ( String   cls    :    inclusions )     {", "loadClass ( testClass . getClassLoader (  )  ,    cls )  ;", "}", "for    ( String   cls    :    exclusions )     {", "loadClass ( testClass . getClassLoader (  )  ,    cls )  ;", "}", "}", "METHOD_END"], "methodName": ["verifyCategories"], "fileName": "org.gradle.api.internal.tasks.testing.junit.CategoryFilter"}, {"methodBody": ["METHOD_START", "{", "return   new   TestStartEvent ( clock . getCurrentTime (  )  )  ;", "}", "METHOD_END"], "methodName": ["startEvent"], "fileName": "org.gradle.api.internal.tasks.testing.junit.GenericJUnitTestEventAdapter"}, {"methodBody": ["METHOD_START", "{", "synchronized ( lock )     {", "assumptionFailed . add ( idifier )  ;", "}", "}", "METHOD_END"], "methodName": ["testAssumptionFailure"], "fileName": "org.gradle.api.internal.tasks.testing.junit.GenericJUnitTestEventAdapter"}, {"methodBody": ["METHOD_START", "{", "TestDescriptorInternal   testInternal ;", "synchronized ( lock )     {", "testInternal    =    executing . get ( identifier )  ;", "}", "boolean   needEndEvent    =    false ;", "if    ( testInternal    =  =    null )     {", "needEndEvent    =    true ;", "testInternal    =    descriptor ;", "resultProcessor . started ( testInternal ,    startEvent (  )  )  ;", "}", "resultProcessor . failure ( testInternal . getId (  )  ,    exception )  ;", "if    ( needEndEvent )     {", "resultProcessor . completed ( testInternal . getId (  )  ,    new   TestCompleteEvent ( clock . getCurrentTime (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["testFailure"], "fileName": "org.gradle.api.internal.tasks.testing.junit.GenericJUnitTestEventAdapter"}, {"methodBody": ["METHOD_START", "{", "long   endTime    =    clock . getCurrentTime (  )  ;", "TestDescriptorInternal   testInternal ;", "TestResult . ResultType   resultType ;", "synchronized ( lock )     {", "testInternal    =    executing . remove ( identifier )  ;", "if    (  ( testInternal    =  =    null )     &  &     (  ( executing . size (  )  )     =  =     1  )  )     {", "testInternal    =    executing . values (  )  . iterator (  )  . next (  )  ;", "executing . clear (  )  ;", "}", "assert   testInternal    !  =    null    :    String . format (  \" Unexpected   end   event   for    % s \"  ,    identifier )  ;", "resultType    =     ( assumptionFailed . remove ( identifier )  )     ?    ResultType . SKIPPED    :    null ;", "}", "resultProcessor . completed ( testInternal . getId (  )  ,    new   TestCompleteEvent ( endTime ,    resultType )  )  ;", "}", "METHOD_END"], "methodName": ["testFinished"], "fileName": "org.gradle.api.internal.tasks.testing.junit.GenericJUnitTestEventAdapter"}, {"methodBody": ["METHOD_START", "{", "resultProcessor . started ( descriptor ,    startEvent (  )  )  ;", "resultProcessor . completed ( descriptor . getId (  )  ,    new   TestCompleteEvent ( clock . getCurrentTime (  )  ,    ResultType . SKIPPED )  )  ;", "}", "METHOD_END"], "methodName": ["testIgnored"], "fileName": "org.gradle.api.internal.tasks.testing.junit.GenericJUnitTestEventAdapter"}, {"methodBody": ["METHOD_START", "{", "synchronized ( lock )     {", "TestDescriptorI   oldTest    =    executing . put ( identifier ,    descriptor )  ;", "assert   oldTest    =  =    null    :    String . format (  \" Unexpected   start   event   for    % s \"  ,    identifier )  ;", "}", "resultProcessor . started ( descriptor ,    startEvent (  )  )  ;", "}", "METHOD_END"], "methodName": ["testStarted"], "fileName": "org.gradle.api.internal.tasks.testing.junit.GenericJUnitTestEventAdapter"}, {"methodBody": ["METHOD_START", "{", "final   AllExceptIgnoredTestRunnerBuilder   allExceptIgnoredTestRunnerBuilder    =    new   AllExceptIgnoredTestRunnerBuilder (  )  ;", "try    {", "final   Class <  ?  >    testClass    =    description . getClass (  )  . getClassLoader (  )  . loadClass ( className )  ;", "Runner   runner    =    allExceptIgnoredTestRunnerBuilder . runnerForClass ( testClass )  ;", "if    ( runner    =  =    null )     {", "runner    =    Request . aClass ( testClass )  . getRunner (  )  ;", "}", "final   Description   runnerDescription    =    runner . getDescription (  )  ;", "return   runnerDescription . getChildren (  )  ;", "}    catch    ( Throwable   throwable )     {", "throw   new   TestSuiteExecutionException ( String . format (  \" Unable   to   process   Ignored   class    % s .  \"  ,    className )  ,    throwable )  ;", "}", "}", "METHOD_END"], "methodName": ["getAllDescriptions"], "fileName": "org.gradle.api.internal.tasks.testing.junit.IgnoredTestDescriptorProvider"}, {"methodBody": ["METHOD_START", "{", "return   excludeCategories ;", "}", "METHOD_END"], "methodName": ["getExcludeCategories"], "fileName": "org.gradle.api.internal.tasks.testing.junit.JUnitSpec"}, {"methodBody": ["METHOD_START", "{", "return   includeCategories ;", "}", "METHOD_END"], "methodName": ["getIncludeCategories"], "fileName": "org.gradle.api.internal.tasks.testing.junit.JUnitSpec"}, {"methodBody": ["METHOD_START", "{", "return   includedTests ;", "}", "METHOD_END"], "methodName": ["getIncludedTests"], "fileName": "org.gradle.api.internal.tasks.testing.junit.JUnitSpec"}, {"methodBody": ["METHOD_START", "{", "return   includedTestsCommandLine ;", "}", "METHOD_END"], "methodName": ["getIncludedTestsCommandLine"], "fileName": "org.gradle.api.internal.tasks.testing.junit.JUnitSpec"}, {"methodBody": ["METHOD_START", "{", "return    !  (  ( excludeCategories . isEmpty (  )  )     &  &     ( includeCategories . isEmpty (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["hasCategoryConfiguration"], "fileName": "org.gradle.api.internal.tasks.testing.junit.JUnitSpec"}, {"methodBody": ["METHOD_START", "{", "LinkedList < Description >    queue    =    new   LinkedList < Description >  (  )  ;", "queudd ( runner . getDescription (  )  )  ;", "while    (  !  ( queue . isEmpty (  )  )  )     {", "Description   description    =    queue . removeFirst (  )  ;", "queuddAll ( description . getChildren (  )  )  ;", "boolean   run    =    true ;", "for    ( Filter   filter    :    filters )     {", "if    (  !  ( filter . shouldRun ( description )  )  )     {", "run    =    false ;", "break ;", "}", "}", "if    ( run )     {", "return   false ;", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["allTestsFiltered"], "fileName": "org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor"}, {"methodBody": ["METHOD_START", "{", "if    (  ( testClass . getEnclosingClass (  )  )     =  =    null )     {", "return   false ;", "}", "Class <  ?  >    outermostClass    =    testClass ;", "while    (  ( outermostClass . getEnclosingClass (  )  )     !  =    null )     {", "outermostClass    =    outermostClass . getEnclosingClass (  )  ;", "}", "RunWith   runWith    =    outermostClass . getAnnotation ( RunWith . class )  ;", "return    ( runWith    !  =    null )     &  &     ( Enclosed . class . equals ( runWith . value (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["isNestedClassInsideEnclosedRunner"], "fileName": "org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor"}, {"methodBody": ["METHOD_START", "{", "final   Class <  ?  >    testClass    =    Class . forName ( testClassName ,    false ,    applicationClassLoader )  ;", "if    (  . isNestedClassInsideEnclosedRunner ( testClass )  )     {", "return ;", "}", "List < Filter >    filters    =    new   ArrayList < Filter >  (  )  ;", "if    ( options . hasCategoryConfiguration (  )  )     {", "verifyJUnitCategorySupport (  )  ;", "filters . add ( new   CategoryFilter ( options . getIncludeCategories (  )  ,    options . getExcludeCategories (  )  ,    applicationClassLoader )  )  ;", "}", "Request   request    =    Request . aClass ( testClass )  ;", "Runner   runner    =    request . getRunner (  )  ;", "if    (  (  !  ( options . getIncludedTests (  )  . isEmpty (  )  )  )     |  |     (  !  ( options . getIncludedTestsCommandLine (  )  . isEmpty (  )  )  )  )     {", "TestSelectionMatcher   matcher    =    new   TestSelectionMatcher ( options . getIncludedTests (  )  ,    options . getIncludedTestsCommandLine (  )  )  ;", "if    (  (  !  ( runner . getDescription (  )  . isSuite (  )  )  )     |  |     (  !  ( matcher . matchesTest ( testClassName ,    null )  )  )  )     {", "filters . add ( new    . MethodNameFilter ( matcher )  )  ;", "}", "}", "if    ( runner   instanceof   Filterable )     {", "Filterable   filterable    =     (  ( Filterable )     ( runner )  )  ;", "for    ( Filter   filter    :    filters )     {", "try    {", "filterable . filter ( filter )  ;", "}    catch    ( NoTestsRemainException   e )     {", "return ;", "}", "}", "} else", "if    ( allTestsFiltered ( runner ,    filters )  )     {", "return ;", "}", "RunNotifier   notifier    =    new   RunNotifier (  )  ;", "notifier . addListener ( listener )  ;", "runner . run ( notifier )  ;", "}", "METHOD_END"], "methodName": ["runTestClass"], "fileName": "org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor"}, {"methodBody": ["METHOD_START", "{", "try    {", "applicationClassLoader . loadClass (  \" orexperimental . categories . Category \"  )  ;", "}    catch    ( ClassNotFoundException   e )     {", "throw   new   GradleException (  \" JUnit   Categories   defined   but   declared   JUnit   version   does   not   support   Categories .  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["verifyJUnitCategorySupport"], "fileName": "org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor"}, {"methodBody": ["METHOD_START", "{", "Matcher   matcher    =    JUnitTestEventAdapter . methodStringMatcher ( description )  ;", "return   matcher . matches (  )     ?    matcher . group (  2  )     :    description ;", "}", "METHOD_END"], "methodName": ["className"], "fileName": "org.gradle.api.internal.tasks.testing.junit.JUnitTestEventAdapter"}, {"methodBody": ["METHOD_START", "{", "return   JUnitTestEventAdapter . className ( description . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["className"], "fileName": "org.gradle.api.internal.tasks.testing.junit.JUnitTestEventAdapter"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultTestDescriptor ( id ,    JUnitTestEventAdapter . className ( description )  ,    JUnitTestEventAdapter . methodName ( description )  )  ;", "}", "METHOD_END"], "methodName": ["descriptor"], "fileName": "org.gradle.api.internal.tasks.testing.junit.JUnitTestEventAdapter"}, {"methodBody": ["METHOD_START", "{", "Matcher   matcher    =    JUnitTestEventAdapter . methodStringMatcher ( description )  ;", "if    ( matcher . matches (  )  )     {", "return   matcher . group (  1  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["methodName"], "fileName": "org.gradle.api.internal.tasks.testing.junit.JUnitTestEventAdapter"}, {"methodBody": ["METHOD_START", "{", "return   JUnitTestEventAdapter . methodName ( description . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["methodName"], "fileName": "org.gradle.api.internal.tasks.testing.junit.JUnitTestEventAdapter"}, {"methodBody": ["METHOD_START", "{", "return   JUnitTestEventAdapter . DESCRIPTOR _ PATTERN . matcher ( description )  ;", "}", "METHOD_END"], "methodName": ["methodStringMatcher"], "fileName": "org.gradle.api.internal.tasks.testing.junit.JUnitTestEventAdapter"}, {"methodBody": ["METHOD_START", "{", "String   methodName    =    JUnitTestEventAdapter . methodName ( description )  ;", "if    ( methodName    !  =    null )     {", "return   new   DefaultTestDescriptor ( id ,    JUnitTestEventAdapter . className ( description )  ,    methodName )  ;", "} else    {", "return   new   DefaultTestDescriptor ( id ,    JUnitTestEventAdapter . className ( description )  ,     \" classMethod \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["nullSafeDescriptor"], "fileName": "org.gradle.api.internal.tasks.testing.junit.JUnitTestEventAdapter"}, {"methodBody": ["METHOD_START", "{", "IgnoredTestDescriptorProvider   provider    =    new   IgnoredTestDescriptorProvider (  )  ;", "String   className    =     . className ( description )  ;", "for    ( Description   childDescription    :    provider . getAllDescriptions ( description ,    className )  )     {", "testIgnored ( childDescription )  ;", "}", "}", "METHOD_END"], "methodName": ["processIgnoredClass"], "fileName": "org.gradle.api.internal.tasks.testing.junit.JUnitTestEventAdapter"}, {"methodBody": ["METHOD_START", "{", "this . options    =    options ;", "}", "METHOD_END"], "methodName": ["setOptions"], "fileName": "org.gradle.api.internal.tasks.testing.junit.JUnitTestFramework"}, {"methodBody": ["METHOD_START", "{", "return   new   ArrayList < String >  ( excludeEngines )  ;", "}", "METHOD_END"], "methodName": ["getExcludeEngines"], "fileName": "org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformSpec"}, {"methodBody": ["METHOD_START", "{", "return   new   ArrayList < String >  ( excludeTags )  ;", "}", "METHOD_END"], "methodName": ["getExcludeTags"], "fileName": "org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformSpec"}, {"methodBody": ["METHOD_START", "{", "return   new   ArrayList < String >  ( includeEngines )  ;", "}", "METHOD_END"], "methodName": ["getIncludeEngines"], "fileName": "org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformSpec"}, {"methodBody": ["METHOD_START", "{", "return   new   ArrayList < String >  ( includeTags )  ;", "}", "METHOD_END"], "methodName": ["getIncludeTags"], "fileName": "org.gradle.api.internal.tasks.testing.junitplatform.JUnitPlatformSpec"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    testNG 6 Class    =    tryLoadClass (  \" IConfigurationListener 2  \"  )  ;", "if    ( testNG 6 Class    !  =    null )     {", "return   createProxy ( testNG 6 Class ,    listener )  ;", "}", "Class <  ?  >    testNG 5 Class    =    tryLoadClass (  \" testngIConfigurationListener \"  )  ;", "if    ( testNG 5 Class    !  =    null )     {", "return   createProxy ( testNG 5 Class ,    listener )  ;", "}", "throw   new   UnsupportedOperationException (  \" Neither   found   interface    ' IConfigurationListener 2  '    nor   interface    ' testngIConfigurationListener '  .    Which   version   of   TestNG   are   you   using ?  \"  )  ;", "}", "METHOD_END"], "methodName": ["createAdapter"], "fileName": "org.gradle.api.internal.tasks.testing.testng.TestNGListenerAdapterFactory"}, {"methodBody": ["METHOD_START", "{", "List < Class <  ?  >  >    interfaces    =    new   ArrayList < Class <  ?  >  >  (  )  ;", "interfaces . add ( ITestListener . class )  ;", "interfaces . add ( ISuiteListener . class )  ;", "interfaces . add ( configListenerClass )  ;", "Class <  ?  >    iClassListenerClass    =    tryLoadClass (  \" IClassListener \"  )  ;", "if    ( iClassListenerClass    !  =    null )     {", "interfaces . add ( iClassListenerClass )  ;", "}", "return    (  ( ITestListener )     ( Proxy . newProxyInstance ( classLoader ,    interfaces . toArray ( new   Class <  ?  >  [ interfaces . size (  )  ]  )  ,    new    . AdaptedListener ( listener )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createProxy"], "fileName": "org.gradle.api.internal.tasks.testing.testng.TestNGListenerAdapterFactory"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   classLoader . loadClass ( name )  ;", "}    catch    ( ClassNotFoundException   e )     {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["tryLoadClass"], "fileName": "org.gradle.api.internal.tasks.testing.testng.TestNGListenerAdapterFactory"}, {"methodBody": ["METHOD_START", "{", "return   configFailurePolicy ;", "}", "METHOD_END"], "methodName": ["getConfigFailurePolicy"], "fileName": "org.gradle.api.internal.tasks.testing.testng.TestNGSpec"}, {"methodBody": ["METHOD_START", "{", "return   defaultSuiteName ;", "}", "METHOD_END"], "methodName": ["getDefaultSuiteName"], "fileName": "org.gradle.api.internal.tasks.testing.testng.TestNGSpec"}, {"methodBody": ["METHOD_START", "{", "return   defaultTestName ;", "}", "METHOD_END"], "methodName": ["getDefaultTestName"], "fileName": "org.gradle.api.internal.tasks.testing.testng.TestNGSpec"}, {"methodBody": ["METHOD_START", "{", "return   excludeGroups ;", "}", "METHOD_END"], "methodName": ["getExcludeGroups"], "fileName": "org.gradle.api.internal.tasks.testing.testng.TestNGSpec"}, {"methodBody": ["METHOD_START", "{", "return   groupByInstances ;", "}", "METHOD_END"], "methodName": ["getGroupByInstances"], "fileName": "org.gradle.api.internal.tasks.testing.testng.TestNGSpec"}, {"methodBody": ["METHOD_START", "{", "return   includeGroups ;", "}", "METHOD_END"], "methodName": ["getIncludeGroups"], "fileName": "org.gradle.api.internal.tasks.testing.testng.TestNGSpec"}, {"methodBody": ["METHOD_START", "{", "return   includedTests ;", "}", "METHOD_END"], "methodName": ["getIncludedTests"], "fileName": "org.gradle.api.internal.tasks.testing.testng.TestNGSpec"}, {"methodBody": ["METHOD_START", "{", "return   includedTestsCommandLine ;", "}", "METHOD_END"], "methodName": ["getIncludedTestsCommandLine"], "fileName": "org.gradle.api.internal.tasks.testing.testng.TestNGSpec"}, {"methodBody": ["METHOD_START", "{", "return   listeners ;", "}", "METHOD_END"], "methodName": ["getListeners"], "fileName": "org.gradle.api.internal.tasks.testing.testng.TestNGSpec"}, {"methodBody": ["METHOD_START", "{", "return   parallel ;", "}", "METHOD_END"], "methodName": ["getParallel"], "fileName": "org.gradle.api.internal.tasks.testing.testng.TestNGSpec"}, {"methodBody": ["METHOD_START", "{", "return   preserveOrder ;", "}", "METHOD_END"], "methodName": ["getPreserveOrder"], "fileName": "org.gradle.api.internal.tasks.testing.testng.TestNGSpec"}, {"methodBody": ["METHOD_START", "{", "return   threadCount ;", "}", "METHOD_END"], "methodName": ["getThreadCount"], "fileName": "org.gradle.api.internal.tasks.testing.testng.TestNGSpec"}, {"methodBody": ["METHOD_START", "{", "return   useDefaultListener ;", "}", "METHOD_END"], "methodName": ["getUseDefaultListeners"], "fileName": "org.gradle.api.internal.tasks.testing.testng.TestNGSpec"}, {"methodBody": ["METHOD_START", "{", "TestNGListenerAdapterFactory   factory    =    new   TestNGListenerAdapterFactory ( applicationClassLoader )  ;", "return   factory . createAdapter ( listener )  ;", "}", "METHOD_END"], "methodName": ["adaptListener"], "fileName": "org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor"}, {"methodBody": ["METHOD_START", "{", "try    {", "JavaReflectionUtil . method (  . class ,    Object . class ,    methodName ,    paramClass )  . invoke ( testNg ,    value )  ;", "}    catch    ( NoSuchMethodException   e )     {", "if    (  !  ( value . equals ( defaultValue )  )  )     {", "throw   e ;", "}", "}", "}", "METHOD_END"], "methodName": ["invokeVerifiedMethod"], "fileName": "org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor"}, {"methodBody": ["METHOD_START", "{", "TestNG   testNg    =    new   TestNG (  )  ;", "testNg . setOutputDirectory ( testReportDir . getAbsolutePath (  )  )  ;", "testNg . setDefaultSuiteName ( options . getDefaultSuiteName (  )  )  ;", "testNg . setDefaultTestName ( options . getDefaultTestName (  )  )  ;", "if    (  ( options . getParallel (  )  )     !  =    null )     {", "testNg . setParallel ( options . getParallel (  )  )  ;", "}", "if    (  ( options . getThreadCount (  )  )     >     0  )     {", "testNg . setThreadCount ( options . getThreadCount (  )  )  ;", "}", "invokeVerifiedMethod ( testNg ,     \" setConfigFailurePolicy \"  ,    String . class ,    options . getConfigFailurePolicy (  )  ,    TestNGOptions . DEFAULT _ CONFIG _ FAILURE _ POLICY )  ;", "invokeVerifiedMethod ( testNg ,     \" setPreserveOrder \"  ,    boolean . class ,    options . getPreserveOrder (  )  ,    false )  ;", "invokeVerifiedMethod ( testNg ,     \" setGroupByInstances \"  ,    boolean . class ,    options . getGroupByInstances (  )  ,    false )  ;", "testNg . setUseDefaultListeners ( options . getUseDefaultListeners (  )  )  ;", "testNg . setVerbose (  0  )  ;", "testNg . setGroups ( CollectionUtils . join (  \"  ,  \"  ,    options . getIncludeGroups (  )  )  )  ;", "testNg . setExcludedGroups ( CollectionUtils . join (  \"  ,  \"  ,    options . getExcludeGroups (  )  )  )  ;", "for    ( String   listenerClass    :    options . getListeners (  )  )     {", "try    {", "testNg . addListener ( applicationClassLoader . loadClass ( listenerClass )  . newInstance (  )  )  ;", "}    catch    ( Throwable   e )     {", "throw   new   GradleException ( String . format (  \" Could   not   add   a   test   listener   with   class    '  % s '  .  \"  ,    listenerClass )  ,    e )  ;", "}", "}", "if    (  (  !  ( options . getIncludedTests (  )  . isEmpty (  )  )  )     |  |     (  !  ( options . getIncludedTestsCommandLine (  )  . isEmpty (  )  )  )  )     {", "testNg . addListener ( new    . SelectedTestsFilter ( options . getIncludedTests (  )  ,    options . getIncludedTestsCommandLine (  )  )  )  ;", "}", "if    (  !  ( suiteFiles . isEmpty (  )  )  )     {", "testNg . setTestSuites ( GFileUtils . toPaths ( suiteFiles )  )  ;", "} else    {", "testNg . setTestClasses ( testClasses . toArray ( new   Class [  0  ]  )  )  ;", "}", "testNg . addListener (  (  ( Object )     ( adaptListener ( new   TestNGTestResultProcessorAdapter ( resultProcessor ,    idGenerator ,    clock )  )  )  )  )  ;", "testNg . run (  )  ;", "}", "METHOD_END"], "methodName": ["runTests"], "fileName": "org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor"}, {"methodBody": ["METHOD_START", "{", "new   DslObject ( options )  . getConventionMapping (  )  . map (  \" outputDirectory \"  ,    new   Callable < File >  (  )     {", "public   File   call (  )     {", "return   html . getDation (  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["conventionMapOutputDirectory"], "fileName": "org.gradle.api.internal.tasks.testing.testng.TestNGTestFramework"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   classLoaderFactory . create (  )  . loadClass (  \" or \"  )  ;", "}    catch    ( ClassNotFoundException   e )     {", "throw   new   GradleException (  \" Could   not   load   TestNG .  \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["createTestNg"], "fileName": "org.gradle.api.internal.tasks.testing.testng.TestNGTestFramework"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( options . getConfigFailurePolicy (  )  . equals ( TestNGOptions . DEFAULT _ CONFIG _ FAILURE _ POLICY )  )  )     {", "verifyMethodExists (  \" setConfigFailurePolicy \"  ,    String . class ,    String . format (  \" The   version   of   TestNG   used   does   not   support   setting   config   failure   policy   to    '  % s '  .  \"  ,    options . getConfigFailurePolicy (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["verifyConfigFailurePolicy"], "fileName": "org.gradle.api.internal.tasks.testing.testng.TestNGTestFramework"}, {"methodBody": ["METHOD_START", "{", "if    ( options . getGroupByInstances (  )  )     {", "verifyMethodExists (  \" setGroupByInstances \"  ,    boolean . class ,     \" Grouping   tests   by   instances   is   not   supported   by   this   version   of    .  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["verifyGroupByInstances"], "fileName": "org.gradle.api.internal.tasks.testing.testng.TestNGTestFramework"}, {"methodBody": ["METHOD_START", "{", "try    {", "createg (  )  . getMethod ( methodName ,    parameterType )  ;", "}    catch    ( NoSuchMethodException   e )     {", "throw   new   InvalidUserDataException ( failureMessage ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["verifyMethodExists"], "fileName": "org.gradle.api.internal.tasks.testing.testng.TestNGTestFramework"}, {"methodBody": ["METHOD_START", "{", "if    ( options . getPreserveOrder (  )  )     {", "verifyMethodExists (  \" setPreserveOrder \"  ,    boolean . class ,     \" Preserving   the   order   of   tests   is   not   supported   by   this   version   of    .  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["verifyPreserveOrder"], "fileName": "org.gradle.api.internal.tasks.testing.testng.TestNGTestFramework"}, {"methodBody": ["METHOD_START", "{", "Object [  ]    parameters    =    iTestResult . getParameters (  )  ;", "String   name    =    iTestResult . getName (  )  ;", "if    (  ( parameters    !  =    null )     &  &     (  ( parameters . length )     >     0  )  )     {", "StringBuilder   builder    =    new   StringBuilder ( name )  . append (  \"  [  \"  )  . append ( iTestResult . getMethod (  )  . getCurrentInvocationCount (  )  )  . append (  \"  ]  \"  )  ;", "StringBuilder   paramsListBuilder    =    new   StringBuilder (  \"  (  \"  )  ;", "int   i    =     0  ;", "for    ( Object   parameter    :    parameters )     {", "if    ( parameter    =  =    null )     {", "paramsListBuilder . append (  \" null \"  )  ;", "} else    {", "try    {", "paramsListBuilder . append ( parameter . toString (  )  )  ;", "}    catch    ( Exception   e )     {", "iTestResult . setThrowable ( new   UnrepresentableParameterException ( iTestResult ,    i ,    e )  )  ;", "return   builder . toString (  )  ;", "}", "}", "if    (  (  +  + i )     <     ( parameters . length )  )     {", "paramsListBuilder . append (  \"  ,     \"  )  ;", "}", "}", "paramsListBuilder . append (  \"  )  \"  )  ;", "return   builder . append ( paramsListBuilder . toString (  )  )  . toString (  )  ;", "} else    {", "return   name ;", "}", "}", "METHOD_END"], "methodName": ["calculateTestCaseName"], "fileName": "org.gradle.api.internal.tasks.testing.testng.TestNGTestResultProcessorAdapter"}, {"methodBody": ["METHOD_START", "{", "Object   testId ;", "TestStartEvent   startEvent    =    null ;", "synchronized ( lock )     {", "testId    =    testMethodId . remove ( iTestResult )  ;", "if    ( testId    =  =    null )     {", "testId    =    idGenerator . generateId (  )  ;", "Object   parentId    =    testMethodParentId . get ( iTestResult . getMethod (  )  )  ;", "startEvent    =    new   TestStartEvent ( iTestResult . getStartMillis (  )  ,    parentId )  ;", "}", "}", "if    ( startEvent    !  =    null )     {", "resultProcessor . started ( new   DefaultTestMethodDescriptor ( testId ,    iTestResult . getTestClass (  )  . getName (  )  ,    iTestResult . getName (  )  )  ,    startEvent )  ;", "}", "if    ( resultType    =  =     ( ResultType . FAILURE )  )     {", "resultProcessor . failure ( testId ,    iTestResult . getThrowable (  )  )  ;", "}", "resultProcessor . completed ( testId ,    new   TestCompleteEvent ( iTestResult . getEndMillis (  )  ,    resultType )  )  ;", "}", "METHOD_END"], "methodName": ["onTestFinished"], "fileName": "org.gradle.api.internal.tasks.testing.testng.TestNGTestResultProcessorAdapter"}, {"methodBody": ["METHOD_START", "{", "JavaVersion   javaVersion    =    getJavaVersion (  )  ;", "if    (  !  ( isJava 6 Compatible (  )  )  )     {", "throw   new   UnsupportedJavaRuntimeException (  \" Support   for   test   execution   using   Java    5    or   earlier   was   removed   in   G    3  .  0  .  \"  )  ;", "}", "try    {", "super . executeTests (  )  ;", "}    finally    {", "testFramework    =    null ;", "}", "}", "METHOD_END"], "methodName": ["executeTests"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "action . execute ( getFilter (  )  )  ;", "}", "METHOD_END"], "methodName": ["filter"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getActorFactory"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "return   getTestClassesDirs (  )  . getAsFileTree (  )  . matching ( patternSet )  ;", "}", "METHOD_END"], "methodName": ["getCandidateClassFiles"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getClassLoaderCache"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "return   classpath ;", "}", "METHOD_END"], "methodName": ["getClasspath"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getFileResolver"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "return   forkEvery ;", "}", "METHOD_END"], "methodName": ["getForkEvery"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "return   getServices (  )  . get ( JvmVersionDetector . class )  . getJavaVersion ( getExecutable (  )  )  ;", "}", "METHOD_END"], "methodName": ["getJavaVersion"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "return   getDebug (  )     ?     1     :    maxParallelForks ;", "}", "METHOD_END"], "methodName": ["getMaxParallelForks"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getModuleRegistry"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "return   getTestFramework (  )  . getOptions (  )  ;", "}", "METHOD_END"], "methodName": ["getOptions"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "TestResultSerializer   serializer    =    new   TestResultSerializer ( getBinResultsDir (  )  )  ;", "if    ( serializer . isHasResults (  )  )     {", "final   Set < String >    previousFailedTestClasses    =    new   HashSet < String >  (  )  ;", "serializer . read ( new   Action < TestClassResult >  (  )     {", "@ Override", "public   void   execute ( TestClassResult   testClassResult )     {", "if    (  ( testClassResult . getFailuresCount (  )  )     >     0  )     {", "previousFailedTestClasses . add ( testClassResult . getClassName (  )  )  ;", "}", "}", "}  )  ;", "return   previousFailedTestClasses ;", "} else    {", "return   Collections . emptySet (  )  ;", "}", "}", "METHOD_END"], "methodName": ["getPreviousFailedTestClasses"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getProcessBuilderFactory"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "SingleMessageLogger . nagUserOfReplacedMethod (  \" getTestClassesDir (  )  \"  ,     \" getTestClassesDirs (  )  \"  )  ;", "if    (  (  ( testClassesDirs )     =  =    null )     |  |     ( testClassesDirs . isEmpty (  )  )  )     {", "return   null ;", "}", "return   getProject (  )  . file ( CollectionUtils . first ( testClassesDirs )  )  ;", "}", "METHOD_END"], "methodName": ["getTestClassesDir"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "return   testClassesDirs ;", "}", "METHOD_END"], "methodName": ["getTestClassesDirs"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "return   testFramework ( null )  ;", "}", "METHOD_END"], "methodName": ["getTestFramework"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "return   scanForTestClasses ;", "}", "METHOD_END"], "methodName": ["isScanForTestClasses"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "return   ConfigureUtil . configure ( testFrameworkConfigure ,    getOptions (  )  )  ;", "}", "METHOD_END"], "methodName": ["options"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "TestFrameworkOptions   options    =    getOptions (  )  ;", "testFrameworkConfigure . execute ( options )  ;", "return   options ;", "}", "METHOD_END"], "methodName": ["options"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "this . classpath    =    classpath ;", "}", "METHOD_END"], "methodName": ["setClasspath"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "if    (  ( forkEvery    !  =    null )     &  &     ( forkEvery    <     0  )  )     {", "throw   new   IllegalArgumentException (  \" Cannot   set   forkEvery   to   a   value   less   than    0  .  \"  )  ;", "}", "this . forkEvery    =     ( forkEvery    =  =    null )     ?     0     :    forkEvery ;", "}", "METHOD_END"], "methodName": ["setForkEvery"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "if    ( maxParallelForks    <     1  )     {", "throw   new   IllegalArgumentException (  \" Cannot   set   maxParallelForks   to   a   value   less   than    1  .  \"  )  ;", "}", "this . maxParallelForks    =    maxParallelForks ;", "}", "METHOD_END"], "methodName": ["setMaxParallelForks"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "this . scanForTestClasses    =    scanForTestClasses ;", "}", "METHOD_END"], "methodName": ["setScanForTestClasses"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "SingleMessageLogger . nagUserOfReplacedMethod (  \" setTestClassesDir ( File )  \"  ,     \" setTestClassesDirs ( FileCollection )  \"  )  ;", "setTestClassesDirs ( getProject (  )  . files ( testClassesDir )  )  ;", "}", "METHOD_END"], "methodName": ["setTestClassesDir"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "this . testClassesDirs    =    testClassesDirs ;", "}", "METHOD_END"], "methodName": ["setTestClassesDirs"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "this . testExecuter    =    testExecuter ;", "}", "METHOD_END"], "methodName": ["setTestExecuter"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "if    (  ( testFramework )     =  =    null )     {", "useJUnit ( testFrameworkConfigure )  ;", "}", "return   testFramework ;", "}", "METHOD_END"], "methodName": ["testFramework"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "useJUnit ( Actions .  < JUnitOptions > doNothing (  )  )  ;", "}", "METHOD_END"], "methodName": ["useJUnit"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "useJUnit ( ConfigureUtil .  < JUnitOptions > configureUsing ( testFrameworkConfigure )  )  ;", "}", "METHOD_END"], "methodName": ["useJUnit"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "useTestFramework ( new   JUnitTestFramework ( this ,     (  ( DefaultTestFilter )     ( getFilter (  )  )  )  )  ,    testFrameworkConfigure )  ;", "}", "METHOD_END"], "methodName": ["useJUnit"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "useJUnitPlatform ( Actions .  < JUnitPlatformOptions > doNothing (  )  )  ;", "}", "METHOD_END"], "methodName": ["useJUnitPlatform"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "useTestFramework ( new   JUnitPlatformTestFramework (  (  ( DefaultTestFilter )     ( getFilter (  )  )  )  )  ,    testFrameworkConfigure )  ;", "}", "METHOD_END"], "methodName": ["useJUnitPlatform"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "return   useTestFramework ( testFramework ,    null )  ;", "}", "METHOD_END"], "methodName": ["useTestFramework"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "if    ( testFramework    =  =    null )     {", "throw   new   IllegalArgumentException (  \" testFramework   is   null !  \"  )  ;", "}", "thiFramework    =    testFramework ;", "if    ( testFrameworkConfigure    !  =    null )     {", "testFrameworkConfigure . execute ( Cast .  < T > uncheckedCast ( thiFramework . getOptions (  )  )  )  ;", "}", "return   thiFramework ;", "}", "METHOD_END"], "methodName": ["useTestFramework"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "useTestNG ( Actions .  < TestFrameworkOptions > doNothing (  )  )  ;", "}", "METHOD_END"], "methodName": ["useTestNG"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "useTestNG ( configureUsing ( testFrameworkConfigure )  )  ;", "}", "METHOD_END"], "methodName": ["useTestNG"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "useTestFramework ( new   TestNGTestFramework ( this ,     (  ( DefaultTestFilter )     ( getFilter (  )  )  )  ,    getInstantiator (  )  ,    getClassLoaderCache (  )  )  ,    testFrameworkConfigure )  ;", "}", "METHOD_END"], "methodName": ["useTestNG"], "fileName": "org.gradle.api.tasks.testing.Test"}, {"methodBody": ["METHOD_START", "{", "if    ( result   instanceof   Test )     {", "Test   test    =     (  ( Test )     ( result )  )  ;", "dirs . addToUnion ( getProject (  )  . files ( test . getBinResultsDir (  )  )  . builtBy ( test )  )  ;", "} else", "if    ( result   instanceof   Iterable <  ?  >  )     {", "Iterable <  ?  >    iterable    =     (  ( Iterable <  ?  >  )     ( result )  )  ;", "for    ( Object   nested    :    iterable )     {", "addTo ( nested ,    dirs )  ;", "}", "} else    {", "dirs . addToUnion ( getProject (  )  . files ( result )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addTo"], "fileName": "org.gradle.api.tasks.testing.TestReport"}, {"methodBody": ["METHOD_START", "{", "List < TestResultsProvider >    resultsProviders    =    new   LinkedList < TestResultsProvider >  (  )  ;", "try    {", "FileCollection   resultDirs    =    getTestResultDirs (  )  ;", "if    (  ( resultDirs . getFiles (  )  . size (  )  )     =  =     1  )     {", "return   new   BinaryResultBackedTestResultsProvider ( resultDirs . getSingleFile (  )  )  ;", "} else    {", "return   new   internal . tasks . testing . junit . result . AggregateTestResultsProvider ( collect ( resultDirs ,    resultsProviders ,    new   Transformer < TestResultsProvider ,    File >  (  )     {", "public   TestResultsProvider   transform ( File   dir )     {", "return   new   BinaryResultBackedTestResultsProvider ( dir )  ;", "}", "}  )  )  ;", "}", "}    catch    ( RuntimeException   e )     {", "CompositeStoppable . stoppable ( resultsProviders )  . stop (  )  ;", "throw   e ;", "}", "}", "METHOD_END"], "methodName": ["createAggregateProvider"], "fileName": "org.gradle.api.tasks.testing.TestReport"}, {"methodBody": ["METHOD_START", "{", "TestResultsProvider   resultsProvider    =    createAggregateProvider (  )  ;", "try    {", "if    ( resultsProvider . isHasResults (  )  )     {", "Default   testReport    =    new   Default ( getBuildOperationExecutor (  )  )  ;", "testReport . generateReport ( resultsProvider ,    getDestinationDir (  )  )  ;", "} else    {", "getLogger (  )  . info (  \"  {  }     -    no   binary   test   results   found   in   dirs :     {  }  .  \"  ,    getPath (  )  ,    getTestResultDirs (  )  . getFiles (  )  )  ;", "setDidWork ( false )  ;", "}", "}    finally    {", "CompositeStoppable . stoppable ( resultsProvider )  . stop (  )  ;", "}", "}", "METHOD_END"], "methodName": ["generateReport"], "fileName": "org.gradle.api.tasks.testing.TestReport"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getBuildOperationExecutor"], "fileName": "org.gradle.api.tasks.testing.TestReport"}, {"methodBody": ["METHOD_START", "{", "return   destinationDir ;", "}", "METHOD_END"], "methodName": ["getDestinationDir"], "fileName": "org.gradle.api.tasks.testing.TestReport"}, {"methodBody": ["METHOD_START", "{", "UnionFileCollection   dirs    =    new   UnionFileCollection (  )  ;", "for    ( Object   result    :    results )     {", "addTo ( result ,    dirs )  ;", "}", "return   dirs ;", "}", "METHOD_END"], "methodName": ["getTestResultDirs"], "fileName": "org.gradle.api.tasks.testing.TestReport"}, {"methodBody": ["METHOD_START", "{", "for    ( Object   result    :    results )     {", "this . results . add ( result )  ;", "}", "}", "METHOD_END"], "methodName": ["reportOn"], "fileName": "org.gradle.api.tasks.testing.TestReport"}, {"methodBody": ["METHOD_START", "{", "this . destinationDir    =    destinationDir ;", "}", "METHOD_END"], "methodName": ["setDestinationDir"], "fileName": "org.gradle.api.tasks.testing.TestReport"}, {"methodBody": ["METHOD_START", "{", "this . results . clear (  )  ;", "rOn ( testResultDirs )  ;", "}", "METHOD_END"], "methodName": ["setTestResultDirs"], "fileName": "org.gradle.api.tasks.testing.TestReport"}, {"methodBody": ["METHOD_START", "{", "this . excludeCategories . addAll ( Arrays . asList ( excludeCategories )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["excludeCategories"], "fileName": "org.gradle.api.tasks.testing.junit.JUnitOptions"}, {"methodBody": ["METHOD_START", "{", "return   excludeCategories ;", "}", "METHOD_END"], "methodName": ["getExcludeCategories"], "fileName": "org.gradle.api.tasks.testing.junit.JUnitOptions"}, {"methodBody": ["METHOD_START", "{", "return   includeCategories ;", "}", "METHOD_END"], "methodName": ["getIncludeCategories"], "fileName": "org.gradle.api.tasks.testing.junit.JUnitOptions"}, {"methodBody": ["METHOD_START", "{", "this . includeCategories . addAll ( Arrays . asList ( includeCategories )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["includeCategories"], "fileName": "org.gradle.api.tasks.testing.junit.JUnitOptions"}, {"methodBody": ["METHOD_START", "{", "this . excludeCategories    =    excludeCategories ;", "}", "METHOD_END"], "methodName": ["setExcludeCategories"], "fileName": "org.gradle.api.tasks.testing.junit.JUnitOptions"}, {"methodBody": ["METHOD_START", "{", "this . includeCategories    =    includeCategories ;", "}", "METHOD_END"], "methodName": ["setIncludeCategories"], "fileName": "org.gradle.api.tasks.testing.junit.JUnitOptions"}, {"methodBody": ["METHOD_START", "{", "this . excludeEngines . addAll ( Arrays . asList ( excludeEngines )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["excludeEngines"], "fileName": "org.gradle.api.tasks.testing.junitplatform.JUnitPlatformOptions"}, {"methodBody": ["METHOD_START", "{", "this . excludeTags . addAll ( Arrays . asList ( excludeTags )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["excludeTags"], "fileName": "org.gradle.api.tasks.testing.junitplatform.JUnitPlatformOptions"}, {"methodBody": ["METHOD_START", "{", "return   excludeEngines ;", "}", "METHOD_END"], "methodName": ["getExcludeEngines"], "fileName": "org.gradle.api.tasks.testing.junitplatform.JUnitPlatformOptions"}, {"methodBody": ["METHOD_START", "{", "return   excludeTags ;", "}", "METHOD_END"], "methodName": ["getExcludeTags"], "fileName": "org.gradle.api.tasks.testing.junitplatform.JUnitPlatformOptions"}, {"methodBody": ["METHOD_START", "{", "return   includeEngines ;", "}", "METHOD_END"], "methodName": ["getIncludeEngines"], "fileName": "org.gradle.api.tasks.testing.junitplatform.JUnitPlatformOptions"}, {"methodBody": ["METHOD_START", "{", "return   includeTags ;", "}", "METHOD_END"], "methodName": ["getIncludeTags"], "fileName": "org.gradle.api.tasks.testing.junitplatform.JUnitPlatformOptions"}, {"methodBody": ["METHOD_START", "{", "this . includeEngines . addAll ( Arrays . asList ( includeEngines )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["includeEngines"], "fileName": "org.gradle.api.tasks.testing.junitplatform.JUnitPlatformOptions"}, {"methodBody": ["METHOD_START", "{", "this . includeTags . addAll ( Arrays . asList ( includeTags )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["includeTags"], "fileName": "org.gradle.api.tasks.testing.junitplatform.JUnitPlatformOptions"}, {"methodBody": ["METHOD_START", "{", "this . excludeEngines    =    excludeEngines ;", "}", "METHOD_END"], "methodName": ["setExcludeEngines"], "fileName": "org.gradle.api.tasks.testing.junitplatform.JUnitPlatformOptions"}, {"methodBody": ["METHOD_START", "{", "this . excludeTags    =    excludeTags ;", "}", "METHOD_END"], "methodName": ["setExcludeTags"], "fileName": "org.gradle.api.tasks.testing.junitplatform.JUnitPlatformOptions"}, {"methodBody": ["METHOD_START", "{", "this . includeEngines    =    includeEngines ;", "}", "METHOD_END"], "methodName": ["setIncludeEngines"], "fileName": "org.gradle.api.tasks.testing.junitplatform.JUnitPlatformOptions"}, {"methodBody": ["METHOD_START", "{", "this . includeTags    =    includeTags ;", "}", "METHOD_END"], "methodName": ["setIncludeTags"], "fileName": "org.gradle.api.tasks.testing.junitplatform.JUnitPlatformOptions"}, {"methodBody": ["METHOD_START", "{", "this . excludeGroups . addAll ( Arrays . asList ( excludeGroups )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["excludeGroups"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "return   configFailurePolicy ;", "}", "METHOD_END"], "methodName": ["getConfigFailurePolicy"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "return   excludeGroups ;", "}", "METHOD_END"], "methodName": ["getExcludeGroups"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "return   groupByInstances ;", "}", "METHOD_END"], "methodName": ["getGroupByInstances"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "return   includeGroups ;", "}", "METHOD_END"], "methodName": ["getIncludeGroups"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "return   listeners ;", "}", "METHOD_END"], "methodName": ["getListeners"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "return   outputDirectory ;", "}", "METHOD_END"], "methodName": ["getOutputDirectory"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "return   parallel ;", "}", "METHOD_END"], "methodName": ["getParallel"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "return   preserveOrder ;", "}", "METHOD_END"], "methodName": ["getPreserveOrder"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "return   projectDir ;", "}", "METHOD_END"], "methodName": ["getProjectDir"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "return   suiteName ;", "}", "METHOD_END"], "methodName": ["getSuiteName"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "return    ( suiteXmlWriter )     =  =    null    ?    null    :    suiteXmlWriter . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getSuiteXml"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "return   suiteXmlBuilder ;", "}", "METHOD_END"], "methodName": ["getSuiteXmlBuilder"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "return   suiteXmlFiles ;", "}", "METHOD_END"], "methodName": ["getSuiteXmlFiles"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "return   suiteXmlWriter ;", "}", "METHOD_END"], "methodName": ["getSuiteXmlWriter"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "List < File >    suites    =    new   ArrayList < File >  (  )  ;", "suites . addAll ( suiteXmlFiles )  ;", "if    (  ( suiteXmlBuilder )     !  =    null )     {", "File   buildSuiteXml    =    new   File ( testSuitesDir . getAbsolutePath (  )  ,     \" build - suite . xml \"  )  ;", "if    ( buildSuiteXml . exists (  )  )     {", "if    (  !  ( buildSuiteXml . delete (  )  )  )     {", "throw   new   RuntimeException (  \" failed   to   remove   already   existing   build - suite . xml   file \"  )  ;", "}", "}", "IoActions . writeTextFile ( buildSuiteXml ,    new   internal . ErroringAction < BufferedWriter >  (  )     {", "@ Override", "protected   void   doExecute ( BufferedWriter   writer )    throws   Exception    {", "writer . write (  \"  <  ! DOCTYPE   suite   SYSTEM    \\  \" http :  /  / testng . org / testng -  1  .  0  . dtd \\  \"  >  \"  )  ;", "writer . newLine (  )  ;", "writer . write ( getSuiteXml (  )  )  ;", "}", "}  )  ;", "suites . add ( buildSuiteXml )  ;", "}", "return   suites ;", "}", "METHOD_END"], "methodName": ["getSuites"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "return   testName ;", "}", "METHOD_END"], "methodName": ["getTestName"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "return   threadCount ;", "}", "METHOD_END"], "methodName": ["getThreadCount"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "return   useDefaultListeners ;", "}", "METHOD_END"], "methodName": ["getUseDefaultListeners"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "this . includeGroups . addAll ( Arrays . asList ( includeGroups )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["includeGroups"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "return   groupByInstances ;", "}", "METHOD_END"], "methodName": ["isGroupByInstances"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "return   preserveOrder ;", "}", "METHOD_END"], "methodName": ["isPreserveOrder"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "return   useDefaultListeners ;", "}", "METHOD_END"], "methodName": ["isUseDefaultListeners"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "if    (  ( suiteXmlBuilder )     !  =    null )     {", "return   suiteXmlBuilder . getMetaClass (  )  . invokeMethod ( suiteXmlBuilder ,    name ,    args )  ;", "}", "throw   new   MissingMethodExce ( name ,    getClass (  )  ,     (  ( Object [  ]  )     ( args )  )  )  ;", "}", "METHOD_END"], "methodName": ["methodMissing"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "if    (  ( suiteXmlBuilder )     !  =    null )     {", "return   suiteXmlBuilder . getMetaClass (  )  . getProperty ( suiteXmlBuilder ,    name )  ;", "}", "throw   new   MissingPropertyExce ( name ,    getClass (  )  )  ;", "}", "METHOD_END"], "methodName": ["propertyMissing"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "this . configFailurePolicy    =    configFailurePolicy ;", "}", "METHOD_END"], "methodName": ["setConfigFailurePolicy"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "this . excludeGroups    =    excludeGroups ;", "}", "METHOD_END"], "methodName": ["setExcludeGroups"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "this . groupByInstances    =    groupByInstances ;", "}", "METHOD_END"], "methodName": ["setGroupByInstances"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "this . includeGroups    =    includeGroups ;", "}", "METHOD_END"], "methodName": ["setIncludeGroups"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "this . listeners    =    listeners ;", "}", "METHOD_END"], "methodName": ["setListeners"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "this . outputDirectory    =    outputDirectory ;", "}", "METHOD_END"], "methodName": ["setOutputDirectory"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "this . parallel    =    parallel ;", "}", "METHOD_END"], "methodName": ["setParallel"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "this . preserveOrder    =    preserveOrder ;", "}", "METHOD_END"], "methodName": ["setPreserveOrder"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "this . suiteName    =    suiteName ;", "}", "METHOD_END"], "methodName": ["setSuiteName"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "this . suiteXmlBuilder    =    suiteXmlBuilder ;", "}", "METHOD_END"], "methodName": ["setSuiteXmlBuilder"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "this . suiteXmlFiles    =    suiteXmlFiles ;", "}", "METHOD_END"], "methodName": ["setSuiteXmlFiles"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "this . suiteXmlWriter    =    suiteXmlWriter ;", "}", "METHOD_END"], "methodName": ["setSuiteXmlWriter"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "this . testName    =    testName ;", "}", "METHOD_END"], "methodName": ["setTestName"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "this . threadCount    =    threadCount ;", "}", "METHOD_END"], "methodName": ["setThreadCount"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "this . useDefaultListeners    =    useDefaultListeners ;", "}", "METHOD_END"], "methodName": ["setUseDefaultListeners"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "suiteXmlWriter    =    new   StringWriter (  )  ;", "suiteXmlBuilder    =    new   MarkupBuilder ( suiteXmlWriter )  ;", "return   suiteXmlBuilder ;", "}", "METHOD_END"], "methodName": ["suiteXmlBuilder"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "suiteXmlFiles . addAll ( Arrays . asList ( suiteFiles )  )  ;", "}", "METHOD_END"], "methodName": ["suites"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "for    ( String   suiteFile    :    suiteFiles )     {", "suiteXmlFiles . add ( new   File ( this . getProjectDir (  )  ,    suiteFile )  )  ;", "}", "}", "METHOD_END"], "methodName": ["suites"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "useDefaultListeners    =    true ;", "return   this ;", "}", "METHOD_END"], "methodName": ["useDefaultListeners"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "this . useDefaultListeners    =    useDefaultListeners ;", "return   this ;", "}", "METHOD_END"], "methodName": ["useDefaultListeners"], "fileName": "org.gradle.api.tasks.testing.testng.TestNGOptions"}, {"methodBody": ["METHOD_START", "{", "for    ( LanguageSourceSet   sourceSet    :    sources )     {", "if    ( sourceSet   tanceof   DependentSourceSet )     {", "dependencies . addAll (  (  ( DependentSourceSet )     ( sourceSet )  )  . getDependencies (  )  . getDependencies (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addSourceSetSpecificDependencies"], "fileName": "org.gradle.jvm.plugins.JvmTestSuiteBasePlugin"}, {"methodBody": ["METHOD_START", "{", "return   new   DependencyResolvingClasspath ( testBinary ,    testBinary . getDisplayName (  )  ,    dependencyResolver ,    resolutionAwareRepositories ,    JvmTestSuiteBasePlugin . createResolveContext ( testBinary ,    schema ,    moduleIdentifierFactory )  ,    attributesSchema ,    buildOperationExecutor ,    buildIdentity )  ;", "}", "METHOD_END"], "methodName": ["configureRuntimeClasspath"], "fileName": "org.gradle.jvm.plugins.JvmTestSuiteBasePlugin"}, {"methodBody": ["METHOD_START", "{", "ArtifactDependencyResolver   dependencyResolver    =    serviceRegistry . get ( ArtifactDependencyResolver . class )  ;", "RepositoryHandler   repositories    =    serviceRegistry . get ( RepositoryHandler . class )  ;", "List < ResolutionAwareRepository >    resolutionAwareRepositories    =    CollectionUtils . collect ( repositories ,    Transformers . cast ( ResolutionAwareRepository . class )  )  ;", "ModelSchema <  ?    extends   JvmTestSuiteBinarySpec >    schema    =    Cast . uncheckedCast ( modelSchemaStore . getSchema (  (  ( BinarySpecInternal )     ( testBinary )  )  . getPublicType (  )  )  )  ;", "AttributesSchemaInternal   attributesSchema    =    serviceRegistry . get ( AttributesSchemaInternal . class )  ;", "ImmutableModuleIdentifierFactory   moduleIdentifierFactory    =    serviceRegistry . get ( ImmutableModuleIdentifierFactory . class )  ;", "BuildOperationExecutor   buildOperationExecutor    =    serviceRegistry . get ( BuildOperationExecutor . class )  ;", "BuildIdentity   buildIdentity    =    serviceRegistry . get ( BuildIdentity . class )  ;", "testBinary . setRuntimeClasspath (  . configureRuntimeClasspath ( testBinary ,    dependencyResolver ,    resolutionAwareRepositories ,    schema ,    attributesSchema ,    moduleIdentifierFactory ,    buildOperationExecutor ,    buildIdentity )  )  ;", "}", "METHOD_END"], "methodName": ["configureRuntimeClasspath"], "fileName": "org.gradle.jvm.plugins.JvmTestSuiteBasePlugin"}, {"methodBody": ["METHOD_START", "{", "final   JvmAssembly   jvmAssembly    =     (  ( WithJvmAssembly )     ( binary )  )  . getAssembly (  )  ;", "tasks . create (  . testTaskNameFor ( binary )  ,    Test . class ,    new   Action < Test >  (  )     {", "@ Override", "public   void   execute ( final   Test   test )     {", "test . setGroup ( VERIFICATION _ GROUP )  ;", "test . setDescription ( String . format (  \" Runs    % s .  \"  ,    WordUtils . uncapitalize ( binary . getDisplayName (  )  )  )  )  ;", "test . dependsOn ( jvmAssembly )  ;", "test . setTestClassesDirs ( new   SimpleFileCollection ( binary . getClassesDir (  )  )  )  ;", "test . setClasspath ( binary . getRuntimeClasspath (  )  )  ;", "configureReports ( binary ,    test )  ;", "}", "private   void   configureReports ( JvmTestSuiteBinarySpecInternal   binary ,    Test   test )     {", "TestTaskReports   reports    =    test . getReports (  )  ;", "File   reportsDirectory    =    new   File ( buildDir ,     \" reports \"  )  ;", "File   reportsOutputDirectory    =    binary . getNamingScheme (  )  . getOutputDirectory ( reportsDirectory )  ;", "File   htmlDir    =    new   File ( reportsOutputDirectory ,     \" tests \"  )  ;", "File   xmlDir    =    new   File ( buildDir ,     \" test - results \"  )  ;", "File   xmlDirOutputDirectory    =    binary . getNamingScheme (  )  . getOutputDirectory ( xmlDir )  ;", "File   binDir    =    new   File ( xmlDirOutputDirectory ,     \" binary \"  )  ;", "reports . getHtml (  )  . setDestination ( htmlDir )  ;", "reports . getJunitXml (  )  . setDestination ( xmlDirOutputDirectory )  ;", "test . setBinResultsDir ( binDir )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["createJvmTestSuiteTasks"], "fileName": "org.gradle.jvm.plugins.JvmTestSuiteBasePlugin"}, {"methodBody": ["METHOD_START", "{", "LibraryBinaryIdentifier   id    =    testBinary . getId (  )  ;", "LibraryBinaryIdentifier   thisId    =    new   DefaultLibraryBinaryIdentifier ( id . getProjectPath (  )  ,     (  ( id . getLibraryName (  )  )     +     \" Test \"  )  ,    id . getVariant (  )  )  ;", "return   new   JvmLibraryResolveContext ( thisId ,    DefaultVariantsMetaData . extractFrom ( testBinary ,    schema )  ,     . runtimeDependencies ( testBinary )  ,    UsageKind . RUNTIME ,    testBinary . getDisplayName (  )  ,    moduleIdentifierFactory )  ;", "}", "METHOD_END"], "methodName": ["createResolveContext"], "fileName": "org.gradle.jvm.plugins.JvmTestSuiteBasePlugin"}, {"methodBody": ["METHOD_START", "{", "List < DependencySpec >    dependencies    =    Lists . newArrayList ( testBinary . getDependencies (  )  )  ;", "JvmBinarySpec   testedBinary    =    testBinary . getTestedBinary (  )  ;", "dependencies . add ( DefaultLibraryBinaryDependencySpec . of ( testBinary . getId (  )  )  )  ;", "if    ( testedBinary    !  =    null )     {", "JvmBinarySpecInternal   binary    =     (  ( JvmBinarySpecInternal )     ( testedBinary )  )  ;", "LibraryBinaryIdentifier   id    =    binary . getId (  )  ;", "dependencies . add ( DefaultLibraryBinaryDependencySpec . of ( id )  )  ;", "}", ". addSourceSetSpecificDependencies ( dependencies ,    testBinary . getSources (  )  )  ;", ". addSourceSetSpecificDependencies ( dependencies ,    testBinary . getTestSuite (  )  . getSources (  )  )  ;", "return   dependencies ;", "}", "METHOD_END"], "methodName": ["runtimeDependencies"], "fileName": "org.gradle.jvm.plugins.JvmTestSuiteBasePlugin"}, {"methodBody": ["METHOD_START", "{", "return    (  (  ( BinarySpecInternal )     ( binary )  )  . getProjectScopedName (  )  )     +     \" Test \"  ;", "}", "METHOD_END"], "methodName": ["testTaskNameFor"], "fileName": "org.gradle.jvm.plugins.JvmTestSuiteBasePlugin"}, {"methodBody": ["METHOD_START", "{", "JvmComponentSpec   testedComponent    =    testSuite . getTestedComponent (  )  ;", "if    ( testedComponent    =  =    null )     {", ". createJvmTestSuiteBinary ( testBinaries ,    testSuiteBinary ,    testSuite ,    null ,    toolChains ,    platformResolver )  ;", "} else    {", "for    ( final   JvmBinarySpec   testedBinary    :     . testedBinariesOf ( testSuite )  )     {", ". createJvmTestSuiteBinary ( testBinaries ,    testSuiteBinary ,    testSuite ,    testedBinary ,    toolChains ,    platformResolver )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["createJvmTestSuiteBinaries"], "fileName": "org.gradle.jvm.test.internal.JvmTestSuiteRules"}, {"methodBody": ["METHOD_START", "{", "final   List < JavaPlatform >    javaPlatforms    =    JvmTestSuiteRules . resolvePlatforms ( platformResolver )  ;", "final   JavaPlatform   platform    =     ( testedBinary    !  =    null )     ?    testedBinary . getTargetPlatform (  )     :    get (  0  )  ;", "final   BinaryNamingScheme   namingScheme    =    JvmTestSuiteRules . namingSchemeFor ( testSuite ,    testedBinary ,    javaPlatforms ,    platform )  ;", "testBinaries . create ( namingScheme . getBinaryName (  )  ,    testSuiteBinaryClass ,    new   Action < T >  (  )     {", "@ Override", "public   void   execute ( T   binary )     {", "JvmTestSuiteBinarySpecInternal   testBinary    =     (  ( JvmTestSuiteBinarySpecInternal )     ( binary )  )  ;", "testBinary . setNamingScheme ( namingScheme )  ;", "testBinary . setTargetPlatform ( platform )  ;", "testBinary . setToolChain ( toolChains . getForPlatform ( platform )  )  ;", "testBinary . setTestedBinary ( testedBinary )  ;", "addTestSuiteDependencies ( testBinary )  ;", "configureCompileClasspath ( testBinary )  ;", "}", "private   boolean   addTestSuiteDependencies ( JvmTestSuiteBinarySpecInternal   testBinary )     {", "return   testBinary . getDependencies (  )  . addAll ( testSuite . getDependencies (  )  . getDependencies (  )  )  ;", "}", "private   void   configureCompileClasspath ( JvmTestSuiteBinarySpecInternal   testSuiteBinary )     {", "if    ( testedBinary    !  =    null )     {", "Collection < DependencySpec >    dependencies    =    testSuiteBinary . getDependencies (  )  ;", "BinarySpecInternal   binary    =     (  ( BinarySpecInternal )     ( testedBinary )  )  ;", "LibraryBinaryIdentifier   id    =    binary . getId (  )  ;", "dependencies . add ( DefaultLibraryBinaryDependencySpec . of ( id )  )  ;", "if    ( testedBinary   instanceof   JarBinarySpecInternal )     {", "dependencies . addAll (  (  ( JarBinarySpecInternal )     ( testedBinary )  )  . getApiDependencies (  )  )  ;", "}", "}", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["createJvmTestSuiteBinary"], "fileName": "org.gradle.jvm.test.internal.JvmTestSuiteRules"}, {"methodBody": ["METHOD_START", "{", "BinaryNamingScheme   namingScheme    =    DefaultBinaryNamingScheme . component ( testSuiteSpec . getName (  )  )  . withBinaryType (  \" binary \"  )  . withRole (  \" assembly \"  ,    true )  . withVariantDimension ( platform ,    selectedPlatforms )  ;", "if    ( testedBinary    !  =    null )     {", "return   namingScheme . withVariantDimension (  (  ( BinarySpecInternal )     ( testedBinary )  )  . getProjectScopedName (  )  )  ;", "}", "return   namingScheme ;", "}", "METHOD_END"], "methodName": ["namingSchemeFor"], "fileName": "org.gradle.jvm.test.internal.JvmTestSuiteRules"}, {"methodBody": ["METHOD_START", "{", "PlatformRequirement   defaultPlatformRequirement    =    DefaultPlatformRequirement . create ( DefaultJavaPlatform . current (  )  . getName (  )  )  ;", "return   Collections . singletonList ( platformResolver . resolve ( JavaPlatform . class ,    defaultPlatformRequirement )  )  ;", "}", "METHOD_END"], "methodName": ["resolvePlatforms"], "fileName": "org.gradle.jvm.test.internal.JvmTestSuiteRules"}, {"methodBody": ["METHOD_START", "{", "return   JvmTestSuiteRules . testedBinariesWithType ( JvmBinarySpec . class ,    testSuite )  ;", "}", "METHOD_END"], "methodName": ["testedBinariesOf"], "fileName": "org.gradle.jvm.test.internal.JvmTestSuiteRules"}, {"methodBody": ["METHOD_START", "{", "VariantComponentSpec   spec    =     (  ( VariantComponentSpec )     ( testSuite . getTestedComponent (  )  )  )  ;", "return   spec . getBinaries (  )  . withType ( type )  . values (  )  ;", "}", "METHOD_END"], "methodName": ["testedBinariesWithType"], "fileName": "org.gradle.jvm.test.internal.JvmTestSuiteRules"}]