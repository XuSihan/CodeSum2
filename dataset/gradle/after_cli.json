[{"methodBody": ["METHOD_START", "{", "CommandLineParser   parser    =    new   CommandLineParser (  )  ;", "configure ( parser )  ;", "return   convert ( parser . parse ( args )  ,    target )  ;", "}", "METHOD_END"], "methodName": ["convert"], "fileName": "org.gradle.cli.AbstractCommandLineConverter"}, {"methodBody": ["METHOD_START", "{", "CommandLineOption   option    =    parser . option ( getPropertyOption (  )  ,    getPropertyOptionDetailed (  )  )  ;", "option    =    option . hasArguments (  )  ;", "option . hasDescription ( getPropertyOptionDescription (  )  )  ;", "}", "METHOD_END"], "methodName": ["configure"], "fileName": "org.gradle.cli.AbstractPropertiesCommandLineConverter"}, {"methodBody": ["METHOD_START", "{", "for    ( String   keyValueExpression    :    options . option ( getPropertyOption (  )  )  . getValues (  )  )     {", "int   pos    =    keyValueExpression . indexOf (  \"  =  \"  )  ;", "if    ( pos    <     0  )     {", "p . put ( keyValueExpression ,     \"  \"  )  ;", "} else    {", "p . put ( keyValueExpression . substring (  0  ,    pos )  ,    keyValueExpression . substring (  ( pos    +     1  )  )  )  ;", "}", "}", "return   p ;", "}", "METHOD_END"], "methodName": ["convert"], "fileName": "org.gradle.cli.AbstractPropertiesCommandLineConverter"}, {"methodBody": ["METHOD_START", "{", "if    ( append )     {", "if    (  ( result . length (  )  )     >     0  )     {", "result . append (  '     '  )  ;", "}", "result . append ( message )  ;", "}", "}", "METHOD_END"], "methodName": ["appendMessage"], "fileName": "org.gradle.cli.CommandLineOption"}, {"methodBody": ["METHOD_START", "{", "this . deprecated    =    true ;", "return   this ;", "}", "METHOD_END"], "methodName": ["deprecated"], "fileName": "org.gradle.cli.CommandLineOption"}, {"methodBody": ["METHOD_START", "{", "return    ( argumentType )     !  =     ( Void . TYPE )  ;", "}", "METHOD_END"], "methodName": ["getAllowsArguments"], "fileName": "org.gradle.cli.CommandLineOption"}, {"methodBody": ["METHOD_START", "{", "return    ( argumentType )     =  =     ( List . class )  ;", "}", "METHOD_END"], "methodName": ["getAllowsMultipleArguments"], "fileName": "org.gradle.cli.CommandLineOption"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   result    =    new   StringBuilder (  )  ;", "if    (  ( descri )     !  =    null )     {", "result . append ( descri )  ;", "}", "appendMessage ( result ,    deprecated ,     \"  [ deprecated ]  \"  )  ;", "appendMessage ( result ,    incubating ,     \"  [ incubating ]  \"  )  ;", "return   result . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getDescription"], "fileName": "org.gradle.cli.CommandLineOption"}, {"methodBody": ["METHOD_START", "{", "return   groupWith ;", "}", "METHOD_END"], "methodName": ["getGroupWith"], "fileName": "org.gradle.cli.CommandLineOption"}, {"methodBody": ["METHOD_START", "{", "return   options ;", "}", "METHOD_END"], "methodName": ["getOptions"], "fileName": "org.gradle.cli.CommandLineOption"}, {"methodBody": ["METHOD_START", "{", "this . groupWith . addAll ( options )  ;", "this . groupWith . remove ( this )  ;", "}", "METHOD_END"], "methodName": ["groupWith"], "fileName": "org.gradle.cli.CommandLineOption"}, {"methodBody": ["METHOD_START", "{", "this . argumentType    =    String . class ;", "return   this ;", "}", "METHOD_END"], "methodName": ["hasArgument"], "fileName": "org.gradle.cli.CommandLineOption"}, {"methodBody": ["METHOD_START", "{", "this . argumentType    =    argumentType ;", "return   this ;", "}", "METHOD_END"], "methodName": ["hasArgument"], "fileName": "org.gradle.cli.CommandLineOption"}, {"methodBody": ["METHOD_START", "{", "argumentType    =    List . class ;", "return   this ;", "}", "METHOD_END"], "methodName": ["hasArguments"], "fileName": "org.gradle.cli.CommandLineOption"}, {"methodBody": ["METHOD_START", "{", "this . description    =    description ;", "return   this ;", "}", "METHOD_END"], "methodName": ["hasDescription"], "fileName": "org.gradle.cli.CommandLineOption"}, {"methodBody": ["METHOD_START", "{", "incubating    =    true ;", "return   this ;", "}", "METHOD_END"], "methodName": ["incubating"], "fileName": "org.gradle.cli.CommandLineOption"}, {"methodBody": ["METHOD_START", "{", "return   deprecated ;", "}", "METHOD_END"], "methodName": ["isDeprecated"], "fileName": "org.gradle.cli.CommandLineOption"}, {"methodBody": ["METHOD_START", "{", "return   incubating ;", "}", "METHOD_END"], "methodName": ["isIncubating"], "fileName": "org.gradle.cli.CommandLineOption"}, {"methodBody": ["METHOD_START", "{", "allowMixedOptions    =    true ;", "return   this ;", "}", "METHOD_END"], "methodName": ["allowMixedSubcommandsAndOptions"], "fileName": "org.gradle.cli.CommandLineParser"}, {"methodBody": ["METHOD_START", "{", "Set < CommandLineOption >    commandLineOptions    =    new   HashSet < CommandLineOption >  (  )  ;", "for    ( String   option    :    options )     {", "commandLineOptions . add ( optionsByString . get ( option )  )  ;", "}", "for    ( CommandLineOption   commandLineOption    :    commandLineOptions )     {", "commandLineOption . groupWith ( commandLineOptions )  ;", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["allowOneOf"], "fileName": "org.gradle.cli.CommandLineParser"}, {"methodBody": ["METHOD_START", "{", "allowUnknownOptions    =    true ;", "return   this ;", "}", "METHOD_END"], "methodName": ["allowUnknownOptions"], "fileName": "org.gradle.cli.CommandLineParser"}, {"methodBody": ["METHOD_START", "{", "StringBuffer   buffer    =    new   StringBuffer (  )  ;", "boolean   first    =    true ;", "if    ( separator    =  =    null )     {", "separator    =     \"  \"  ;", "}", "for    ( Object   thing    :    things )     {", "if    (  ! first )     {", "buffer . append ( separator )  ;", "}", "buffer . append ( thing . toString (  )  )  ;", "first    =    false ;", "}", "return   buffer . toString (  )  ;", "}", "METHOD_END"], "methodName": ["join"], "fileName": "org.gradle.cli.CommandLineParser"}, {"methodBody": ["METHOD_START", "{", "for    ( String   option    :    options )     {", "if    ( optionsByString . containsKey ( option )  )     {", "throw   new   IllegalArgumentException ( String . format (  \" Option    '  % s '    is   already   defined .  \"  ,    option )  )  ;", "}", "if    ( option . startsWith (  \"  -  \"  )  )     {", "throw   new   IllegalArgumentException ( String . format (  \" Cannot   add   option    '  % s '    as   an   option   cannot   start   with    '  -  '  .  \"  ,    option )  )  ;", "}", "if    (  !  (  . OPTION _ NAME _ PATTERN . matcher ( option )  . matches (  )  )  )     {", "throw   new   IllegalArgumentException ( String . format (  \" Cannot   add   option    '  % s '    as   an   option   can   only   contain   alphanumeric   characters   or    '  -  '    or    '  _  '  .  \"  ,    option )  )  ;", "}", "}", "CommandLineOption   option    =    new   CommandLineOption ( Arrays . asList ( options )  )  ;", "for    ( String   optionStr    :    option . getOptions (  )  )     {", "optionsByString . put ( optionStr ,    option )  ;", "}", "return   option ;", "}", "METHOD_END"], "methodName": ["option"], "fileName": "org.gradle.cli.CommandLineParser"}, {"methodBody": ["METHOD_START", "{", "ParsedCommandLine   parsedCommandLine    =    new   ParsedCommandLine ( new   HashSet < CommandLineOption >  ( optionsByString . values (  )  )  )  ;", ". ParserState   parseState    =    new    . BeforeFirstSubCommand ( parsedCommandLine )  ;", "for    ( String   arg    :    commandLine )     {", "if    ( parseState . maybeStartOption ( arg )  )     {", "if    ( arg . equals (  \"  -  -  \"  )  )     {", "parseState    =    new    . AfterOptions ( parsedCommandLine )  ;", "} else", "if    ( arg . matches (  \"  -  -  [  ^  =  ]  +  \"  )  )     {", ". OptionParserState   parsedOption    =    parseState . onStartOption ( arg ,    arg . substring (  2  )  )  ;", "parseState    =    parsedOption . onStartNextArg (  )  ;", "} else", "if    ( arg . matches (  \"  (  ? s )  -  -  [  ^  =  ]  +  =  .  *  \"  )  )     {", "int   endArg    =    arg . indexOf (  '  =  '  )  ;", ". OptionParserState   parsedOption    =    parseState . onStartOption ( arg ,    arg . substring (  2  ,    endArg )  )  ;", "parseState    =    parsedOption . onArgument ( arg . substring (  ( endArg    +     1  )  )  )  ;", "} else", "if    ( arg . matches (  \"  (  ? s )  -  [  ^  =  ]  =  .  *  \"  )  )     {", ". OptionParserState   parsedOption    =    parseState . onStartOption ( arg ,    arg . substring (  1  ,     2  )  )  ;", "parseState    =    parsedOption . onArgument ( arg . substring (  3  )  )  ;", "} else    {", "assert   arg . matches (  \"  (  ? s )  -  [  ^  -  ]  .  *  \"  )  ;", "String   option    =    arg . substring (  1  )  ;", "if    ( optionsByString . containsKey ( option )  )     {", ". OptionParserState   parsedOption    =    parseState . onStartOption ( arg ,    option )  ;", "parseState    =    parsedOption . onStartNextArg (  )  ;", "} else    {", "String   option 1     =    arg . substring (  1  ,     2  )  ;", ". OptionParserState   parsedOption ;", "if    ( optionsByString . containsKey ( option 1  )  )     {", "parsedOption    =    parseState . onStartOption (  (  \"  -  \"     +    option 1  )  ,    option 1  )  ;", "if    ( parsedOption . getHasArgument (  )  )     {", "parseState    =    parsedOption . onArgument ( arg . substring (  2  )  )  ;", "} else    {", "parseState    =    parsedOption . onComplete (  )  ;", "for    ( int   i    =     2  ;    i    <     ( arg . length (  )  )  ;    i +  +  )     {", "String   optionStr    =    arg . substring ( i ,     ( i    +     1  )  )  ;", "parsedOption    =    parseState . onStartOption (  (  \"  -  \"     +    optionStr )  ,    optionStr )  ;", "parseState    =    parsedOption . onComplete (  )  ;", "}", "}", "} else    {", "if    ( allowUnknownOptions )     {", "parsedOption    =    parseState . onStartOption ( arg ,    option )  ;", "parseState    =    parsedOption . onComplete (  )  ;", "} else    {", "parsedOption    =    parseState . onStartOption (  (  \"  -  \"     +    option 1  )  ,    option 1  )  ;", "parseState    =    parsedOption . onComplete (  )  ;", "}", "}", "}", "}", "} else    {", "parseState    =    parseState . onNonOption ( arg )  ;", "}", "}", "parseState . onCommandLineEnd (  )  ;", "return   parsedCommandLine ;", "}", "METHOD_END"], "methodName": ["parse"], "fileName": "org.gradle.cli.CommandLineParser"}, {"methodBody": ["METHOD_START", "{", "return   parse ( Arrays . asList ( commandLine )  )  ;", "}", "METHOD_END"], "methodName": ["parse"], "fileName": "org.gradle.cli.CommandLineParser"}, {"methodBody": ["METHOD_START", "{", "Formatter   formatter    =    new   Formatter ( out )  ;", "Set < CommandLineOption >    orderedOptions    =    new   TreeSet < CommandLineOption >  ( new    . OptionComparator (  )  )  ;", "orderedOptions . addAll ( optionsByString . values (  )  )  ;", "Map < String ,    String >    lines    =    new   LinkedHashMap < String ,    String >  (  )  ;", "for    ( CommandLineOption   option    :    orderedOptions )     {", "Set < String >    orderedOptionStrings    =    new   TreeSet < String >  ( new    . OptionStringComparator (  )  )  ;", "orderedOptionStrings . addAll ( option . getOptions (  )  )  ;", "List < String >    prefixedStrings    =    new   ArrayList < String >  (  )  ;", "for    ( String   optionString    :    orderedOptionStrings )     {", "if    (  ( optionString . length (  )  )     =  =     1  )     {", "prefixedStrings . add (  (  \"  -  \"     +    optionString )  )  ;", "} else    {", "prefixedStrings . add (  (  \"  -  -  \"     +    optionString )  )  ;", "}", "}", "String   key    =     . join ( prefixedStrings ,     \"  ,     \"  )  ;", "String   value    =    option . getDescription (  )  ;", "if    (  ( value    =  =    null )     |  |     (  ( value . length (  )  )     =  =     0  )  )     {", "value    =     \"  \"  ;", "}", "lines . put ( key ,    value )  ;", "}", "int   max    =     0  ;", "for    ( String   optionStr    :    lines . keySet (  )  )     {", "max    =    Math . max ( max ,    optionStr . length (  )  )  ;", "}", "for    ( Map . Entry < String ,    String >    entry    :    lines . entrySet (  )  )     {", "if    (  ( entry . getValue (  )  . length (  )  )     =  =     0  )     {", "formatter . format (  \"  % s % n \"  ,    entry . getKey (  )  )  ;", "} else    {", "formatter . format (  (  (  \"  %  -  \"     +    max )     +     \" s       % s % n \"  )  ,    entry . getKey (  )  ,    entry . getValue (  )  )  ;", "}", "}", "formatter . flush (  )  ;", "}", "METHOD_END"], "methodName": ["printUsage"], "fileName": "org.gradle.cli.CommandLineParser"}, {"methodBody": ["METHOD_START", "{", "extraArguments . add ( value )  ;", "}", "METHOD_END"], "methodName": ["addExtraValue"], "fileName": "org.gradle.cli.ParsedCommandLine"}, {"methodBody": ["METHOD_START", "{", "ParsedCommandLineOption   parsedOption    =    optionsByString . get ( optionStr )  ;", "presentOptions . addAll ( option . getOptions (  )  )  ;", "return   parsedOption ;", "}", "METHOD_END"], "methodName": ["addOption"], "fileName": "org.gradle.cli.ParsedCommandLine"}, {"methodBody": ["METHOD_START", "{", "return   extraArguments ;", "}", "METHOD_END"], "methodName": ["getExtraArguments"], "fileName": "org.gradle.cli.ParsedCommandLine"}, {"methodBody": ["METHOD_START", "{", "option ( option )  ;", "return   removedOptionsontains ( option )  ;", "}", "METHOD_END"], "methodName": ["hadOptionRemoved"], "fileName": "org.gradle.cli.ParsedCommandLine"}, {"methodBody": ["METHOD_START", "{", "for    ( String   option    :    logLevelOptions )     {", "if    ( hasOption ( option )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["hasAnyOption"], "fileName": "org.gradle.cli.ParsedCommandLine"}, {"methodBody": ["METHOD_START", "{", "option ( option )  ;", "return   presentOptionsontains ( option )  ;", "}", "METHOD_END"], "methodName": ["hasOption"], "fileName": "org.gradle.cli.ParsedCommandLine"}, {"methodBody": ["METHOD_START", "{", "ParsedCommandLineOption   parsedOption    =    optionsByString . get ( option )  ;", "if    ( parsedOption    =  =    null )     {", "throw   new   IllegalArgumentException ( String . format (  \" Option    '  % s '    not   defined .  \"  ,    option )  )  ;", "}", "return   parsedOption ;", "}", "METHOD_END"], "methodName": ["option"], "fileName": "org.gradle.cli.ParsedCommandLine"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   output    =    new   StringBuilder (  )  ;", "boolean   isFirst    =    true ;", "for    ( String   string    :    strings )     {", "if    (  ! isFirst )     {", "output . append (  \"  ,     \"  )  ;", "}", "output . append (  \"  '  \"  )  ;", "output . append ( string )  ;", "output . append (  \"  '  \"  )  ;", "isFirst    =    false ;", "}", "return   output . toString (  )  ;", "}", "METHOD_END"], "methodName": ["quoteAndJoin"], "fileName": "org.gradle.cli.ParsedCommandLine"}, {"methodBody": ["METHOD_START", "{", "for    ( String   optionStr    :    option . getOptions (  )  )     {", "if    ( presentOptions . remove ( optionStr )  )     {", "removedOptions . add ( optionStr )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["removeOption"], "fileName": "org.gradle.cli.ParsedCommandLine"}, {"methodBody": ["METHOD_START", "{", "values . add ( argument )  ;", "}", "METHOD_END"], "methodName": ["addArgument"], "fileName": "org.gradle.cli.ParsedCommandLineOption"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( hasValue (  )  )  )     {", "throw   new   IllegalStateException (  \"    does   not   have   any   value .  \"  )  ;", "}", "if    (  ( values . size (  )  )     >     1  )     {", "throw   new   IllegalStateException (  \"    has   multiple   values .  \"  )  ;", "}", "return   values . get (  0  )  ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.gradle.cli.ParsedCommandLineOption"}, {"methodBody": ["METHOD_START", "{", "return   values ;", "}", "METHOD_END"], "methodName": ["getValues"], "fileName": "org.gradle.cli.ParsedCommandLineOption"}, {"methodBody": ["METHOD_START", "{", "return    !  ( values . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["hasValue"], "fileName": "org.gradle.cli.ParsedCommandLineOption"}]