[{"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getAntBuilder"], "fileName": "org.gradle.api.plugins.quality.Checkstyle"}, {"methodBody": ["METHOD_START", "{", "return   checkstyleClasspath ;", "}", "METHOD_END"], "methodName": ["getCheckstyleClasspath"], "fileName": "org.gradle.api.plugins.quality.Checkstyle"}, {"methodBody": ["METHOD_START", "{", "return   classpath ;", "}", "METHOD_END"], "methodName": ["getClasspath"], "fileName": "org.gradle.api.plugins.quality.Checkstyle"}, {"methodBody": ["METHOD_START", "{", "return   config ;", "}", "METHOD_END"], "methodName": ["getConfig"], "fileName": "org.gradle.api.plugins.quality.Checkstyle"}, {"methodBody": ["METHOD_START", "{", "File   configDirectory    =    configDir . getOrNull (  )  ;", "if    (  ( configDirectory    !  =    null )     &  &     ( configDirectory . exists (  )  )  )     {", "return   configDirectory ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getConfigDir"], "fileName": "org.gradle.api.plugins.quality.Checkstyle"}, {"methodBody": ["METHOD_START", "{", "return    ( getConfig (  )  )     =  =    null    ?    null    :    getConfig (  )  . asFile (  )  ;", "}", "METHOD_END"], "methodName": ["getConfigFile"], "fileName": "org.gradle.api.plugins.quality.Checkstyle"}, {"methodBody": ["METHOD_START", "{", "return   configProperties ;", "}", "METHOD_END"], "methodName": ["getConfigProperties"], "fileName": "org.gradle.api.plugins.quality.Checkstyle"}, {"methodBody": ["METHOD_START", "{", "return   ignoreFailures ;", "}", "METHOD_END"], "methodName": ["getIgnoreFailures"], "fileName": "org.gradle.api.plugins.quality.Checkstyle"}, {"methodBody": ["METHOD_START", "{", "return   maxErrors ;", "}", "METHOD_END"], "methodName": ["getMaxErrors"], "fileName": "org.gradle.api.plugins.quality.Checkstyle"}, {"methodBody": ["METHOD_START", "{", "return   maxWarnings ;", "}", "METHOD_END"], "methodName": ["getMaxWarnings"], "fileName": "org.gradle.api.plugins.quality.Checkstyle"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getObjectFactory"], "fileName": "org.gradle.api.plugins.quality.Checkstyle"}, {"methodBody": ["METHOD_START", "{", "return   reports ;", "}", "METHOD_END"], "methodName": ["getReports"], "fileName": "org.gradle.api.plugins.quality.Checkstyle"}, {"methodBody": ["METHOD_START", "{", "return   ignoreFailures ;", "}", "METHOD_END"], "methodName": ["isIgnoreFailures"], "fileName": "org.gradle.api.plugins.quality.Checkstyle"}, {"methodBody": ["METHOD_START", "{", "return   showViolations ;", "}", "METHOD_END"], "methodName": ["isShowViolations"], "fileName": "org.gradle.api.plugins.quality.Checkstyle"}, {"methodBody": ["METHOD_START", "{", "return   reports ( new   ClosureBackedAction < CheckstyleReports >  ( closure )  )  ;", "}", "METHOD_END"], "methodName": ["reports"], "fileName": "org.gradle.api.plugins.quality.Checkstyle"}, {"methodBody": ["METHOD_START", "{", "configureAction . execute ( reports )  ;", "return   reports ;", "}", "METHOD_END"], "methodName": ["reports"], "fileName": "org.gradle.api.plugins.quality.Checkstyle"}, {"methodBody": ["METHOD_START", "{", "CheckstyleInvoker . invoke ( this )  ;", "}", "METHOD_END"], "methodName": ["run"], "fileName": "org.gradle.api.plugins.quality.Checkstyle"}, {"methodBody": ["METHOD_START", "{", "this . checkstyleClasspath    =    checkstyleClasspath ;", "}", "METHOD_END"], "methodName": ["setCheckstyleClasspath"], "fileName": "org.gradle.api.plugins.quality.Checkstyle"}, {"methodBody": ["METHOD_START", "{", "this . classpath    =    classpath ;", "}", "METHOD_END"], "methodName": ["setClasspath"], "fileName": "org.gradle.api.plugins.quality.Checkstyle"}, {"methodBody": ["METHOD_START", "{", "this . config    =    config ;", "}", "METHOD_END"], "methodName": ["setConfig"], "fileName": "org.gradle.api.plugins.quality.Checkstyle"}, {"methodBody": ["METHOD_START", "{", "this . configDir . set ( configDir )  ;", "}", "METHOD_END"], "methodName": ["setConfigDir"], "fileName": "org.gradle.api.plugins.quality.Checkstyle"}, {"methodBody": ["METHOD_START", "{", "setConfig ( getProject (  )  . getResources (  )  . getText (  )  . fromFile ( configFile )  )  ;", "}", "METHOD_END"], "methodName": ["setConfigFile"], "fileName": "org.gradle.api.plugins.quality.Checkstyle"}, {"methodBody": ["METHOD_START", "{", "this . configProperties    =    configProperties ;", "}", "METHOD_END"], "methodName": ["setConfigProperties"], "fileName": "org.gradle.api.plugins.quality.Checkstyle"}, {"methodBody": ["METHOD_START", "{", "this . ignoreFailures    =    ignoreFailures ;", "}", "METHOD_END"], "methodName": ["setIgnoreFailures"], "fileName": "org.gradle.api.plugins.quality.Checkstyle"}, {"methodBody": ["METHOD_START", "{", "this . maxErrors    =    maxErrors ;", "}", "METHOD_END"], "methodName": ["setMaxErrors"], "fileName": "org.gradle.api.plugins.quality.Checkstyle"}, {"methodBody": ["METHOD_START", "{", "this . maxWarnings    =    maxWarnings ;", "}", "METHOD_END"], "methodName": ["setMaxWarnings"], "fileName": "org.gradle.api.plugins.quality.Checkstyle"}, {"methodBody": ["METHOD_START", "{", "this . showViolations    =    showViolations ;", "}", "METHOD_END"], "methodName": ["setShowViolations"], "fileName": "org.gradle.api.plugins.quality.Checkstyle"}, {"methodBody": ["METHOD_START", "{", "return   config ;", "}", "METHOD_END"], "methodName": ["getConfig"], "fileName": "org.gradle.api.plugins.quality.CheckstyleExtension"}, {"methodBody": ["METHOD_START", "{", "return   configDir . get (  )  . getAsFile (  )  ;", "}", "METHOD_END"], "methodName": ["getConfigDir"], "fileName": "org.gradle.api.plugins.quality.CheckstyleExtension"}, {"methodBody": ["METHOD_START", "{", "return   configDir ;", "}", "METHOD_END"], "methodName": ["getConfigDirectory"], "fileName": "org.gradle.api.plugins.quality.CheckstyleExtension"}, {"methodBody": ["METHOD_START", "{", "return   getConfig (  )  . asFile (  )  ;", "}", "METHOD_END"], "methodName": ["getConfigFile"], "fileName": "org.gradle.api.plugins.quality.CheckstyleExtension"}, {"methodBody": ["METHOD_START", "{", "return   configProperties ;", "}", "METHOD_END"], "methodName": ["getConfigProperties"], "fileName": "org.gradle.api.plugins.quality.CheckstyleExtension"}, {"methodBody": ["METHOD_START", "{", "return   maxErrors ;", "}", "METHOD_END"], "methodName": ["getMaxErrors"], "fileName": "org.gradle.api.plugins.quality.CheckstyleExtension"}, {"methodBody": ["METHOD_START", "{", "return   maxWarnings ;", "}", "METHOD_END"], "methodName": ["getMaxWarnings"], "fileName": "org.gradle.api.plugins.quality.CheckstyleExtension"}, {"methodBody": ["METHOD_START", "{", "return   showViolations ;", "}", "METHOD_END"], "methodName": ["isShowViolations"], "fileName": "org.gradle.api.plugins.quality.CheckstyleExtension"}, {"methodBody": ["METHOD_START", "{", "this . config    =    config ;", "}", "METHOD_END"], "methodName": ["setConfig"], "fileName": "org.gradle.api.plugins.quality.CheckstyleExtension"}, {"methodBody": ["METHOD_START", "{", "this . configDir . set ( configDir )  ;", "}", "METHOD_END"], "methodName": ["setConfigDir"], "fileName": "org.gradle.api.plugins.quality.CheckstyleExtension"}, {"methodBody": ["METHOD_START", "{", "setConfig ( project . getResources (  )  . getText (  )  . fromFile ( configFile )  )  ;", "}", "METHOD_END"], "methodName": ["setConfigFile"], "fileName": "org.gradle.api.plugins.quality.CheckstyleExtension"}, {"methodBody": ["METHOD_START", "{", "this . configProperties    =    configProperties ;", "}", "METHOD_END"], "methodName": ["setConfigProperties"], "fileName": "org.gradle.api.plugins.quality.CheckstyleExtension"}, {"methodBody": ["METHOD_START", "{", "this . maxErrors    =    maxErrors ;", "}", "METHOD_END"], "methodName": ["setMaxErrors"], "fileName": "org.gradle.api.plugins.quality.CheckstyleExtension"}, {"methodBody": ["METHOD_START", "{", "this . maxWarnings    =    maxWarnings ;", "}", "METHOD_END"], "methodName": ["setMaxWarnings"], "fileName": "org.gradle.api.plugins.quality.CheckstyleExtension"}, {"methodBody": ["METHOD_START", "{", "this . showViolations    =    showViolations ;", "}", "METHOD_END"], "methodName": ["setShowViolations"], "fileName": "org.gradle.api.plugins.quality.CheckstyleExtension"}, {"methodBody": ["METHOD_START", "{", "configuration . defaultDependencies ( new   Action < DependencySet >  (  )     {", "@ Override", "public   void   execute ( DependencySet   dependencies )     {", "dependencies . add ( project . getDependencies (  )  . create (  (  \" com . puppycrawl . tools : checkstyle :  \"     +     ( extension . getToolVersion (  )  )  )  )  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureDefaultDependencies"], "fileName": "org.gradle.api.plugins.quality.CheckstylePlugin"}, {"methodBody": ["METHOD_START", "{", "task . getReports (  )  . all ( new   Action < SingleFileReport >  (  )     {", "@ Override", "public   void   execute ( final   SingleFileReport   report )     {", "ConventionMapping   reportMapping    =    AbstractCodeQualityPlugin . conventionMappingOf ( report )  ;", "reportMapping . map (  \" enabled \"  ,    Callables . returning ( true )  )  ;", "reportMapping . map (  \" destination \"  ,    new   Callable < File >  (  )     {", "@ Override", "public   File   call (  )     {", "return   new   File ( extension . getReportsDir (  )  ,     (  ( baseName    +     \"  .  \"  )     +     ( report . getName (  )  )  )  )  ;", "}", "}  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureReportsConventionMapping"], "fileName": "org.gradle.api.plugins.quality.CheckstylePlugin"}, {"methodBody": ["METHOD_START", "{", "ConventionMapping   taskMapping    =    task . getConventionMapping (  )  ;", "taskMapping . map (  \" cClasspath \"  ,    Callables . returning ( configuration )  )  ;", "taskMapping . map (  \" config \"  ,    new   Callable < TextResource >  (  )     {", "@ Override", "public   TextResource   call (  )     {", "return   extension . getConfig (  )  ;", "}", "}  )  ;", "taskMapping . map (  \" configProperties \"  ,    new   Callable < Map < String ,    Object >  >  (  )     {", "@ Override", "public   Map < String ,    Object >    call (  )     {", "return   extension . getConfigProperties (  )  ;", "}", "}  )  ;", "taskMapping . map (  \" ignoreFailures \"  ,    new   Callable < Boolean >  (  )     {", "@ Override", "public   Boolean   call (  )     {", "return   extension . isIgnoreFailures (  )  ;", "}", "}  )  ;", "taskMapping . map (  \" showViolations \"  ,    new   Callable < Boolean >  (  )     {", "@ Override", "public   Boolean   call (  )     {", "return   extension . isShowViolations (  )  ;", "}", "}  )  ;", "taskMapping . map (  \" maxErrors \"  ,    new   Callable < Integer >  (  )     {", "@ Override", "public   Integer   call (  )     {", "return   extension . getMaxErrors (  )  ;", "}", "}  )  ;", "taskMapping . map (  \" maxWarnings \"  ,    new   Callable < Integer >  (  )     {", "@ Override", "public   Integer   call (  )     {", "return   extension . getMaxWarnings (  )  ;", "}", "}  )  ;", "task . setConfigDir ( project . provider ( new   Callable < File >  (  )     {", "@ Override", "public   File   call (  )     {", "return   extension . getConfigDir (  )  ;", "}", "}  )  )  ;", "}", "METHOD_END"], "methodName": ["configureTaskConventionMapping"], "fileName": "org.gradle.api.plugins.quality.CheckstylePlugin"}, {"methodBody": ["METHOD_START", "{", "return   project . provider ( new   Callable < Directory >  (  )     {", "@ Override", "public   Directory   call (  )     {", "if    ( usesSubprojectCheckstyleConfiguration (  )  )     {", "DeprecationLogger . nagUserOfDeprecated (  \" Setting   the   Checkstyle   configuration   file   under    ' config / checkstyle '    of   a   sub   project \"  ,     \" Use   the   root   project ' s    ' config / checkstyle '    directory   instead \"  )  ;", "return   project . getLayout (  )  . getProjectDirectory (  )  . dir (  . CONFIG _ DIR _ NAME )  ;", "}", "return   project . getRootProject (  )  . getLayout (  )  . getProjectDirectory (  )  . dir (  . CONFIG _ DIR _ NAME )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["determineConfigurationDirectory"], "fileName": "org.gradle.api.plugins.quality.CheckstylePlugin"}, {"methodBody": ["METHOD_START", "{", "return   project . equals ( project . getRootProject (  )  )  ;", "}", "METHOD_END"], "methodName": ["isRootProject"], "fileName": "org.gradle.api.plugins.quality.CheckstylePlugin"}, {"methodBody": ["METHOD_START", "{", "return    (  !  ( isRootProject (  )  )  )     &  &     ( project . file ( CheckstylePlugin . CONFIG _ DIR _ NAME )  . isDirectory (  )  )  ;", "}", "METHOD_END"], "methodName": ["usesSubprojectCheckstyleConfiguration"], "fileName": "org.gradle.api.plugins.quality.CheckstylePlugin"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getAntBuilder"], "fileName": "org.gradle.api.plugins.quality.CodeNarc"}, {"methodBody": ["METHOD_START", "{", "return   codenarcClasspath ;", "}", "METHOD_END"], "methodName": ["getCodenarcClasspath"], "fileName": "org.gradle.api.plugins.quality.CodeNarc"}, {"methodBody": ["METHOD_START", "{", "return   compilationClasspath ;", "}", "METHOD_END"], "methodName": ["getCompilationClasspath"], "fileName": "org.gradle.api.plugins.quality.CodeNarc"}, {"methodBody": ["METHOD_START", "{", "return   config ;", "}", "METHOD_END"], "methodName": ["getConfig"], "fileName": "org.gradle.api.plugins.quality.CodeNarc"}, {"methodBody": ["METHOD_START", "{", "return    ( getConfig (  )  )     =  =    null    ?    null    :    getConfig (  )  . asFile (  )  ;", "}", "METHOD_END"], "methodName": ["getConfigFile"], "fileName": "org.gradle.api.plugins.quality.CodeNarc"}, {"methodBody": ["METHOD_START", "{", "return   ignoreFailures ;", "}", "METHOD_END"], "methodName": ["getIgnoreFailures"], "fileName": "org.gradle.api.plugins.quality.CodeNarc"}, {"methodBody": ["METHOD_START", "{", "return   maxPriority 1 Violations ;", "}", "METHOD_END"], "methodName": ["getMaxPriority1Violations"], "fileName": "org.gradle.api.plugins.quality.CodeNarc"}, {"methodBody": ["METHOD_START", "{", "return   maxPriority 2 Violations ;", "}", "METHOD_END"], "methodName": ["getMaxPriority2Violations"], "fileName": "org.gradle.api.plugins.quality.CodeNarc"}, {"methodBody": ["METHOD_START", "{", "return   maxPriority 3 Violations ;", "}", "METHOD_END"], "methodName": ["getMaxPriority3Violations"], "fileName": "org.gradle.api.plugins.quality.CodeNarc"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getObjectFactory"], "fileName": "org.gradle.api.plugins.quality.CodeNarc"}, {"methodBody": ["METHOD_START", "{", "return   reports ;", "}", "METHOD_END"], "methodName": ["getReports"], "fileName": "org.gradle.api.plugins.quality.CodeNarc"}, {"methodBody": ["METHOD_START", "{", "return   reports ( new   ClosureBackedAction < CodeNarcReports >  ( closure )  )  ;", "}", "METHOD_END"], "methodName": ["reports"], "fileName": "org.gradle.api.plugins.quality.CodeNarc"}, {"methodBody": ["METHOD_START", "{", "configureAction . execute ( reports )  ;", "return   reports ;", "}", "METHOD_END"], "methodName": ["reports"], "fileName": "org.gradle.api.plugins.quality.CodeNarc"}, {"methodBody": ["METHOD_START", "{", "CodeNarcInvoker . invoke ( this )  ;", "}", "METHOD_END"], "methodName": ["run"], "fileName": "org.gradle.api.plugins.quality.CodeNarc"}, {"methodBody": ["METHOD_START", "{", "this . codenarcClasspath    =    codenarcClasspath ;", "}", "METHOD_END"], "methodName": ["setCodenarcClasspath"], "fileName": "org.gradle.api.plugins.quality.CodeNarc"}, {"methodBody": ["METHOD_START", "{", "this . compilationClasspath    =    compilationClasspath ;", "}", "METHOD_END"], "methodName": ["setCompilationClasspath"], "fileName": "org.gradle.api.plugins.quality.CodeNarc"}, {"methodBody": ["METHOD_START", "{", "this . config    =    config ;", "}", "METHOD_END"], "methodName": ["setConfig"], "fileName": "org.gradle.api.plugins.quality.CodeNarc"}, {"methodBody": ["METHOD_START", "{", "setConfig ( getProject (  )  . getResources (  )  . getText (  )  . fromFile ( configFile )  )  ;", "}", "METHOD_END"], "methodName": ["setConfigFile"], "fileName": "org.gradle.api.plugins.quality.CodeNarc"}, {"methodBody": ["METHOD_START", "{", "this . ignoreFailures    =    ignoreFailures ;", "}", "METHOD_END"], "methodName": ["setIgnoreFailures"], "fileName": "org.gradle.api.plugins.quality.CodeNarc"}, {"methodBody": ["METHOD_START", "{", "this . maxPriority 1 Violations    =    maxPriority 1 Violations ;", "}", "METHOD_END"], "methodName": ["setMaxPriority1Violations"], "fileName": "org.gradle.api.plugins.quality.CodeNarc"}, {"methodBody": ["METHOD_START", "{", "this . maxPriority 2 Violations    =    maxPriority 2 Violations ;", "}", "METHOD_END"], "methodName": ["setMaxPriority2Violations"], "fileName": "org.gradle.api.plugins.quality.CodeNarc"}, {"methodBody": ["METHOD_START", "{", "this . maxPriority 3 Violations    =    maxPriority 3 Violations ;", "}", "METHOD_END"], "methodName": ["setMaxPriority3Violations"], "fileName": "org.gradle.api.plugins.quality.CodeNarc"}, {"methodBody": ["METHOD_START", "{", "return   config ;", "}", "METHOD_END"], "methodName": ["getConfig"], "fileName": "org.gradle.api.plugins.quality.CodeNarcExtension"}, {"methodBody": ["METHOD_START", "{", "return   getConfig (  )  . asFile (  )  ;", "}", "METHOD_END"], "methodName": ["getConfigFile"], "fileName": "org.gradle.api.plugins.quality.CodeNarcExtension"}, {"methodBody": ["METHOD_START", "{", "return   maxPriority 1 Violations ;", "}", "METHOD_END"], "methodName": ["getMaxPriority1Violations"], "fileName": "org.gradle.api.plugins.quality.CodeNarcExtension"}, {"methodBody": ["METHOD_START", "{", "return   maxPriority 2 Violations ;", "}", "METHOD_END"], "methodName": ["getMaxPriority2Violations"], "fileName": "org.gradle.api.plugins.quality.CodeNarcExtension"}, {"methodBody": ["METHOD_START", "{", "return   maxPriority 3 Violations ;", "}", "METHOD_END"], "methodName": ["getMaxPriority3Violations"], "fileName": "org.gradle.api.plugins.quality.CodeNarcExtension"}, {"methodBody": ["METHOD_START", "{", "return   reportFormat ;", "}", "METHOD_END"], "methodName": ["getReportFormat"], "fileName": "org.gradle.api.plugins.quality.CodeNarcExtension"}, {"methodBody": ["METHOD_START", "{", "this . config    =    config ;", "}", "METHOD_END"], "methodName": ["setConfig"], "fileName": "org.gradle.api.plugins.quality.CodeNarcExtension"}, {"methodBody": ["METHOD_START", "{", "setConfig ( project . getResources (  )  . getText (  )  . fromFile ( file )  )  ;", "}", "METHOD_END"], "methodName": ["setConfigFile"], "fileName": "org.gradle.api.plugins.quality.CodeNarcExtension"}, {"methodBody": ["METHOD_START", "{", "this . maxPriority 1 Violations    =    maxPriority 1 Violations ;", "}", "METHOD_END"], "methodName": ["setMaxPriority1Violations"], "fileName": "org.gradle.api.plugins.quality.CodeNarcExtension"}, {"methodBody": ["METHOD_START", "{", "this . maxPriority 2 Violations    =    maxPriority 2 Violations ;", "}", "METHOD_END"], "methodName": ["setMaxPriority2Violations"], "fileName": "org.gradle.api.plugins.quality.CodeNarcExtension"}, {"methodBody": ["METHOD_START", "{", "this . maxPriority 3 Violations    =    maxPriority 3 Violations ;", "}", "METHOD_END"], "methodName": ["setMaxPriority3Violations"], "fileName": "org.gradle.api.plugins.quality.CodeNarcExtension"}, {"methodBody": ["METHOD_START", "{", "if    ( CodeNarcExtension . REPORT _ FORMATS . contains ( reportFormat )  )     {", "this . reportFormat    =    reportFormat ;", "} else    {", "throw   new   InvalidUserDataException (  (  (  \"  '  \"     +    reportFormat )     +     \"  '    is   not   a   valid   codenarc   report   format \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["setReportFormat"], "fileName": "org.gradle.api.plugins.quality.CodeNarcExtension"}, {"methodBody": ["METHOD_START", "{", "configuration . defaultDependencies ( new   Action < DependencySet >  (  )     {", "@ Override", "public   void   execute ( DependencySet   dependencies )     {", "dependencies . add ( project . getDependencies (  )  . create (  (  \" codenarc : CodeNarc :  \"     +     ( extension . getToolVersion (  )  )  )  )  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureDefaultDependencies"], "fileName": "org.gradle.api.plugins.quality.CodeNarcPlugin"}, {"methodBody": ["METHOD_START", "{", "task . getReports (  )  . all ( new   Action < SingleFileReport >  (  )     {", "@ Override", "public   void   execute ( final   SingleFileReport   report )     {", "ConventionMapping   reportMapping    =    AbstractCodeQualityPlugin . conventionMappingOf ( report )  ;", "reportMapping . map (  \" enabled \"  ,    new   Callable < Boolean >  (  )     {", "@ Override", "public   Boolean   call (  )     {", "return   report . getName (  )  . equals ( extension . getReportFormat (  )  )  ;", "}", "}  )  ;", "reportMapping . map (  \" destination \"  ,    new   Callable < File >  (  )     {", "@ Override", "public   File   call (  )     {", "String   fileSuffix    =     ( report . getName (  )  . equals (  \" text \"  )  )     ?     \" txt \"     :    report . getName (  )  ;", "return   new   File ( extension . getReportsDir (  )  ,     (  ( baseName    +     \"  .  \"  )     +    fileSuffix )  )  ;", "}", "}  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureReportsConventionMapping"], "fileName": "org.gradle.api.plugins.quality.CodeNarcPlugin"}, {"methodBody": ["METHOD_START", "{", "ConventionMapping   taskMapping    =    task . getConventionMapping (  )  ;", "taskMapping . map (  \" cnarcClasspath \"  ,    Callables . returning ( configuration )  )  ;", "taskMapping . map (  \" config \"  ,    new   Callable < TextResource >  (  )     {", "@ Override", "public   TextResource   call (  )     {", "return   extension . getConfig (  )  ;", "}", "}  )  ;", "taskMapping . map (  \" maxPriority 1 Violations \"  ,    new   Callable < Integer >  (  )     {", "@ Override", "public   Integer   call (  )     {", "return   extension . getMaxPriority 1 Violations (  )  ;", "}", "}  )  ;", "taskMapping . map (  \" maxPriority 2 Violations \"  ,    new   Callable < Integer >  (  )     {", "@ Override", "public   Integer   call (  )     {", "return   extension . getMaxPriority 2 Violations (  )  ;", "}", "}  )  ;", "taskMapping . map (  \" maxPriority 3 Violations \"  ,    new   Callable < Integer >  (  )     {", "@ Override", "public   Integer   call (  )     {", "return   extension . getMaxPriority 3 Violations (  )  ;", "}", "}  )  ;", "taskMapping . map (  \" ignoreFailures \"  ,    new   Callable < Boolean >  (  )     {", "@ Override", "public   Boolean   call (  )     {", "return   extension . isIgnoreFailures (  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureTaskConventionMapping"], "fileName": "org.gradle.api.plugins.quality.CodeNarcPlugin"}, {"methodBody": ["METHOD_START", "{", "return   reportsDir ;", "}", "METHOD_END"], "methodName": ["getReportsDir"], "fileName": "org.gradle.api.plugins.quality.CodeQualityExtension"}, {"methodBody": ["METHOD_START", "{", "return   sourceSets ;", "}", "METHOD_END"], "methodName": ["getSourceSets"], "fileName": "org.gradle.api.plugins.quality.CodeQualityExtension"}, {"methodBody": ["METHOD_START", "{", "return   toolVersion ;", "}", "METHOD_END"], "methodName": ["getToolVersion"], "fileName": "org.gradle.api.plugins.quality.CodeQualityExtension"}, {"methodBody": ["METHOD_START", "{", "return   ignoreFailures ;", "}", "METHOD_END"], "methodName": ["isIgnoreFailures"], "fileName": "org.gradle.api.plugins.quality.CodeQualityExtension"}, {"methodBody": ["METHOD_START", "{", "this . ignoreFailures    =    ignoreFailures ;", "}", "METHOD_END"], "methodName": ["setIgnoreFailures"], "fileName": "org.gradle.api.plugins.quality.CodeQualityExtension"}, {"methodBody": ["METHOD_START", "{", "this . reportsDir    =    reportsDir ;", "}", "METHOD_END"], "methodName": ["setReportsDir"], "fileName": "org.gradle.api.plugins.quality.CodeQualityExtension"}, {"methodBody": ["METHOD_START", "{", "this . sourceSets    =    sourceSets ;", "}", "METHOD_END"], "methodName": ["setSourceSets"], "fileName": "org.gradle.api.plugins.quality.CodeQualityExtension"}, {"methodBody": ["METHOD_START", "{", "this . toolVersion    =    toolVersion ;", "}", "METHOD_END"], "methodName": ["setToolVersion"], "fileName": "org.gradle.api.plugins.quality.CodeQualityExtension"}, {"methodBody": ["METHOD_START", "{", "if    (  ( result . getException (  )  )     !  =    null )     {", "throw   new   GradleException (  \"    encountered   an   error .    Run   with    -  - debug   to   get   more   information .  \"  ,    result . getException (  )  )  ;", "}", "if    (  ( result . getErrorCount (  )  )     >     0  )     {", "throw   new   GradleException (  \"    encountered   an   error .    Run   with    -  - debug   to   get   more   information .  \"  )  ;", "}", "if    (  ( result . getBugCount (  )  )     >     0  )     {", "String   message    =     \"    rule   violations   were   found .  \"  ;", "SingleFileReport   report    =    reports . getFirstEnabled (  )  ;", "if    ( report    !  =    null )     {", "String   reportUrl    =    new   ConsoleRenderer (  )  . asClickableFileUrl ( report . getDestination (  )  )  ;", "message    +  =     \"    See   the   report   at :     \"     +    reportUrl ;", "}", "if    ( getIgnoreFailures (  )  )     {", "getLogger (  )  . warn ( message )  ;", "} else    {", "throw   new   GradleException ( message )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["evaluateResult"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "for    ( String   argument    :    arguments )     {", "extraArgs . add ( argument )  ;", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["extraArgs"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "extraArgs . addAll ( Arrays . asList ( arguments )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["extraArgs"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "FindBugsSpecBuilder   specBuilder    =    new   FindBugsSpecBuilder ( getClasses (  )  )  . withPluginsList ( getPluginClasspath (  )  )  . withSources ( getSource (  )  )  . withClasspath ( getClasspath (  )  )  . withDebugging ( getLogger (  )  . isDebugEnabled (  )  )  . withEffort ( getEffort (  )  )  . withReportLevel ( getReportLevel (  )  )  . withMaxHeapSize ( getMaxHeapSize (  )  )  . withVisitors ( getVisitors (  )  )  . withOmitVisitors ( getOmitVisitors (  )  )  . withExcludeFilter ( getExcludeFilter (  )  )  . withIncludeFilter ( getIncludeFilter (  )  )  . withExcludeBugsFilter ( getExcludeBugsFilter (  )  )  . withExtraArgs ( getExtraArgs (  )  )  . withJvmArgs ( getJvmArgs (  )  )  . withShowProgress ( getShowProgress (  )  )  . configureReports ( getReports (  )  )  ;", "return   specBuilder . build (  )  ;", "}", "METHOD_END"], "methodName": ["generateSpec"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "return   getClasses (  )  . getAsFileTree (  )  ;", "}", "METHOD_END"], "methodName": ["getCandidateClassFiles"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "return   classes ;", "}", "METHOD_END"], "methodName": ["getClasses"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "return   classpath ;", "}", "METHOD_END"], "methodName": ["getClasspath"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "return   effort ;", "}", "METHOD_END"], "methodName": ["getEffort"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "TextResource   config    =    getExcludeBugsFilterConfig (  )  ;", "return   config    =  =    null    ?    null    :    config . asFile (  )  ;", "}", "METHOD_END"], "methodName": ["getExcludeBugsFilter"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "return   excludeBugsFilterConfig ;", "}", "METHOD_END"], "methodName": ["getExcludeBugsFilterConfig"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "TextResource   config    =    getExcludeFilterConfig (  )  ;", "return   config    =  =    null    ?    null    :    config . asFile (  )  ;", "}", "METHOD_END"], "methodName": ["getExcludeFilter"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "return   excludeFilterConfig ;", "}", "METHOD_END"], "methodName": ["getExcludeFilterConfig"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "return   extraArgs ;", "}", "METHOD_END"], "methodName": ["getExtraArgs"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "return   findbugsClasspath ;", "}", "METHOD_END"], "methodName": ["getFindbugsClasspath"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "TextResource   config    =    getIncludeFilterConfig (  )  ;", "return   config    =  =    null    ?    null    :    config . asFile (  )  ;", "}", "METHOD_END"], "methodName": ["getIncludeFilter"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "return   includeFilterConfig ;", "}", "METHOD_END"], "methodName": ["getIncludeFilterConfig"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "return   jvmArgs ;", "}", "METHOD_END"], "methodName": ["getJvmArgs"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "return   maxHeapSize ;", "}", "METHOD_END"], "methodName": ["getMaxHeapSize"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getObjectFactory"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "return   omitVisitors ;", "}", "METHOD_END"], "methodName": ["getOmitVisitors"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "return   pluginClasspath ;", "}", "METHOD_END"], "methodName": ["getPluginClasspath"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "return   reportLevel ;", "}", "METHOD_END"], "methodName": ["getReportLevel"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "return   reports ;", "}", "METHOD_END"], "methodName": ["getReports"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "return   showProgress ;", "}", "METHOD_END"], "methodName": ["getShowProgress"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "return   visitors ;", "}", "METHOD_END"], "methodName": ["getVisitors"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getWorkerProcessBuilderFactory"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "for    ( String   argument    :    arguments )     {", "jvmArgs . add ( argument )  ;", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["jvmArgs"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "jvmArgs . addAll ( Arrays . asList ( arguments )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["jvmArgs"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "return   reports ( new   ClosureBackedAction < FindBugsReports >  ( closure )  )  ;", "}", "METHOD_END"], "methodName": ["reports"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "configureAction . execute ( reports )  ;", "return   reports ;", "}", "METHOD_END"], "methodName": ["reports"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "new   FindBugsClasspathValidator ( JavaVersion . current (  )  )  . validateClasspath ( Iterables . transform ( getFindbugsClasspath (  )  ,    new   com . google . common . base . Function < File ,    String >  (  )     {", "@ Override", "public   String   apply ( File   input )     {", "return   input . getName (  )  ;", "}", "}  )  )  ;", "FindBugsSpec   spec    =    generateSpec (  )  ;", "FindBugsWorkerManager   manager    =    new   FindBugsWorkerManager (  )  ;", "getLogging (  )  . captureStandardOutput ( DEBUG )  ;", "getLogging (  )  . captureStandardError ( DEBUG )  ;", "FindBugsResult   result    =    manager . runWorker ( getProject (  )  . getProjectDir (  )  ,    getWorkerProcessBuilderFactory (  )  ,    getFindbugsClasspath (  )  ,    spec )  ;", "evaluateResult ( result )  ;", "}", "METHOD_END"], "methodName": ["run"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "this . classes    =    classes ;", "}", "METHOD_END"], "methodName": ["setClasses"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "this . classpath    =    classpath ;", "}", "METHOD_END"], "methodName": ["setClasspath"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "this . effort    =    effort ;", "}", "METHOD_END"], "methodName": ["setEffort"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "setExcludeBugsFilterConfig ( getProject (  )  . getResources (  )  . getText (  )  . fromFile ( filter )  )  ;", "}", "METHOD_END"], "methodName": ["setExcludeBugsFilter"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "this . excludeBugsFilterConfig    =    excludeBugsFilterConfig ;", "}", "METHOD_END"], "methodName": ["setExcludeBugsFilterConfig"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "setExcludeFilterConfig ( getProject (  )  . getResources (  )  . getText (  )  . fromFile ( filter )  )  ;", "}", "METHOD_END"], "methodName": ["setExcludeFilter"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "this . excludeFilterConfig    =    excludeFilterConfig ;", "}", "METHOD_END"], "methodName": ["setExcludeFilterConfig"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "this . extraArgs    =    extraArgs ;", "}", "METHOD_END"], "methodName": ["setExtraArgs"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "this . findbugsClasspath    =    findbugsClasspath ;", "}", "METHOD_END"], "methodName": ["setFindbugsClasspath"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "this . ignoreFailures    =    ignoreFailures ;", "}", "METHOD_END"], "methodName": ["setIgnoreFailures"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "setIncludeFilterConfig ( getProject (  )  . getResources (  )  . getText (  )  . fromFile ( filter )  )  ;", "}", "METHOD_END"], "methodName": ["setIncludeFilter"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "this . includeFilterConfig    =    includeFilterConfig ;", "}", "METHOD_END"], "methodName": ["setIncludeFilterConfig"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "this . jvmArgs    =    jvmArgs ;", "}", "METHOD_END"], "methodName": ["setJvmArgs"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "this . maxHeapSize    =    maxHeapSize ;", "}", "METHOD_END"], "methodName": ["setMaxHeapSize"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "this . omitVisitors    =    omitVisitors ;", "}", "METHOD_END"], "methodName": ["setOmitVisitors"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "this . pluginClasspath    =    pluginClasspath ;", "}", "METHOD_END"], "methodName": ["setPluginClasspath"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "this . reportLevel    =    reportLevel ;", "}", "METHOD_END"], "methodName": ["setReportLevel"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "this . showProgress    =    showProgress ;", "}", "METHOD_END"], "methodName": ["setShowProgress"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "this . visitors    =    visitors ;", "}", "METHOD_END"], "methodName": ["setVisitors"], "fileName": "org.gradle.api.plugins.quality.FindBugs"}, {"methodBody": ["METHOD_START", "{", "return   effort ;", "}", "METHOD_END"], "methodName": ["getEffort"], "fileName": "org.gradle.api.plugins.quality.FindBugsExtension"}, {"methodBody": ["METHOD_START", "{", "TextResource   excludeBugsFilterConfig    =    getExcludeBugsFilterConfig (  )  ;", "if    ( excludeBugsFilterConfig    =  =    null )     {", "return   null ;", "}", "return   excludeBugsFilterConfig . asFile (  )  ;", "}", "METHOD_END"], "methodName": ["getExcludeBugsFilter"], "fileName": "org.gradle.api.plugins.quality.FindBugsExtension"}, {"methodBody": ["METHOD_START", "{", "return   excludeBugsFilterConfig ;", "}", "METHOD_END"], "methodName": ["getExcludeBugsFilterConfig"], "fileName": "org.gradle.api.plugins.quality.FindBugsExtension"}, {"methodBody": ["METHOD_START", "{", "TextResource   excludeFilterConfig    =    getExcludeFilterConfig (  )  ;", "if    ( excludeFilterConfig    =  =    null )     {", "return   null ;", "}", "return   excludeFilterConfig . asFile (  )  ;", "}", "METHOD_END"], "methodName": ["getExcludeFilter"], "fileName": "org.gradle.api.plugins.quality.FindBugsExtension"}, {"methodBody": ["METHOD_START", "{", "return   excludeFilterConfig ;", "}", "METHOD_END"], "methodName": ["getExcludeFilterConfig"], "fileName": "org.gradle.api.plugins.quality.FindBugsExtension"}, {"methodBody": ["METHOD_START", "{", "return   extraArgs ;", "}", "METHOD_END"], "methodName": ["getExtraArgs"], "fileName": "org.gradle.api.plugins.quality.FindBugsExtension"}, {"methodBody": ["METHOD_START", "{", "TextResource   includeFilterConfig    =    getIncludeFilterConfig (  )  ;", "if    ( includeFilterConfig    =  =    null )     {", "return   null ;", "}", "return   includeFilterConfig . asFile (  )  ;", "}", "METHOD_END"], "methodName": ["getIncludeFilter"], "fileName": "org.gradle.api.plugins.quality.FindBugsExtension"}, {"methodBody": ["METHOD_START", "{", "return   includeFilterConfig ;", "}", "METHOD_END"], "methodName": ["getIncludeFilterConfig"], "fileName": "org.gradle.api.plugins.quality.FindBugsExtension"}, {"methodBody": ["METHOD_START", "{", "return   jvmArgs ;", "}", "METHOD_END"], "methodName": ["getJvmArgs"], "fileName": "org.gradle.api.plugins.quality.FindBugsExtension"}, {"methodBody": ["METHOD_START", "{", "return   omitVisitors ;", "}", "METHOD_END"], "methodName": ["getOmitVisitors"], "fileName": "org.gradle.api.plugins.quality.FindBugsExtension"}, {"methodBody": ["METHOD_START", "{", "return   reportLevel ;", "}", "METHOD_END"], "methodName": ["getReportLevel"], "fileName": "org.gradle.api.plugins.quality.FindBugsExtension"}, {"methodBody": ["METHOD_START", "{", "return   visitors ;", "}", "METHOD_END"], "methodName": ["getVisitors"], "fileName": "org.gradle.api.plugins.quality.FindBugsExtension"}, {"methodBody": ["METHOD_START", "{", "return   showProgress ;", "}", "METHOD_END"], "methodName": ["isShowProgress"], "fileName": "org.gradle.api.plugins.quality.FindBugsExtension"}, {"methodBody": ["METHOD_START", "{", "this . effort    =    effort ;", "}", "METHOD_END"], "methodName": ["setEffort"], "fileName": "org.gradle.api.plugins.quality.FindBugsExtension"}, {"methodBody": ["METHOD_START", "{", "setExcludeBugsFilterConfig ( project . getResources (  )  . getText (  )  . fromFile ( filter )  )  ;", "}", "METHOD_END"], "methodName": ["setExcludeBugsFilter"], "fileName": "org.gradle.api.plugins.quality.FindBugsExtension"}, {"methodBody": ["METHOD_START", "{", "this . excludeBugsFilterConfig    =    excludeBugsFilterConfig ;", "}", "METHOD_END"], "methodName": ["setExcludeBugsFilterConfig"], "fileName": "org.gradle.api.plugins.quality.FindBugsExtension"}, {"methodBody": ["METHOD_START", "{", "setExcludeFilterConfig ( project . getResources (  )  . getText (  )  . fromFile ( filter )  )  ;", "}", "METHOD_END"], "methodName": ["setExcludeFilter"], "fileName": "org.gradle.api.plugins.quality.FindBugsExtension"}, {"methodBody": ["METHOD_START", "{", "this . excludeFilterConfig    =    excludeFilterConfig ;", "}", "METHOD_END"], "methodName": ["setExcludeFilterConfig"], "fileName": "org.gradle.api.plugins.quality.FindBugsExtension"}, {"methodBody": ["METHOD_START", "{", "this . extraArgs    =    extraArgs ;", "}", "METHOD_END"], "methodName": ["setExtraArgs"], "fileName": "org.gradle.api.plugins.quality.FindBugsExtension"}, {"methodBody": ["METHOD_START", "{", "setIncludeFilterConfig ( project . getResources (  )  . getText (  )  . fromFile ( filter )  )  ;", "}", "METHOD_END"], "methodName": ["setIncludeFilter"], "fileName": "org.gradle.api.plugins.quality.FindBugsExtension"}, {"methodBody": ["METHOD_START", "{", "this . includeFilterConfig    =    includeFilterConfig ;", "}", "METHOD_END"], "methodName": ["setIncludeFilterConfig"], "fileName": "org.gradle.api.plugins.quality.FindBugsExtension"}, {"methodBody": ["METHOD_START", "{", "this . jvmArgs    =    jvmArgs ;", "}", "METHOD_END"], "methodName": ["setJvmArgs"], "fileName": "org.gradle.api.plugins.quality.FindBugsExtension"}, {"methodBody": ["METHOD_START", "{", "this . omitVisitors    =    omitVisitors ;", "}", "METHOD_END"], "methodName": ["setOmitVisitors"], "fileName": "org.gradle.api.plugins.quality.FindBugsExtension"}, {"methodBody": ["METHOD_START", "{", "this . reportLevel    =    reportLevel ;", "}", "METHOD_END"], "methodName": ["setReportLevel"], "fileName": "org.gradle.api.plugins.quality.FindBugsExtension"}, {"methodBody": ["METHOD_START", "{", "this . showProgress    =    showProgress ;", "}", "METHOD_END"], "methodName": ["setShowProgress"], "fileName": "org.gradle.api.plugins.quality.FindBugsExtension"}, {"methodBody": ["METHOD_START", "{", "this . visitors    =    visitors ;", "}", "METHOD_END"], "methodName": ["setVisitors"], "fileName": "org.gradle.api.plugins.quality.FindBugsExtension"}, {"methodBody": ["METHOD_START", "{", "configuration . defaultDependencies ( new   Action < DependencySet >  (  )     {", "@ Override", "public   void   execute ( DependencySet   dependencies )     {", "dependencies . add ( project . getDependencies (  )  . create (  (  \" com . google . code . findbugs : findbugs :  \"     +     ( extension . getToolVersion (  )  )  )  )  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureDefaultDependencies"], "fileName": "org.gradle.api.plugins.quality.FindBugsPlugin"}, {"methodBody": ["METHOD_START", "{", "Configuration   configuration    =    project . getConfigurations (  )  . create (  \" findbugsPlugins \"  )  ;", "configuration . setVisible ( false )  ;", "configuration . setTransitive ( true )  ;", "configuration . setDescription (  \" The   FindBugs   plugins   to   be   used   for   this   project .  \"  )  ;", "}", "METHOD_END"], "methodName": ["configureFindBugsConfigurations"], "fileName": "org.gradle.api.plugins.quality.FindBugsPlugin"}, {"methodBody": ["METHOD_START", "{", "task . getReports (  )  . all ( new   Action < SingleFileReport >  (  )     {", "@ Override", "public   void   execute ( final   SingleFileReport   report )     {", "ConventionMapping   reportMapping    =    AbstractCodeQualityPlugin . conventionMappingOf ( report )  ;", "reportMapping . map (  \" enabled \"  ,    new   Callable < Boolean >  (  )     {", "@ Override", "public   Boolean   call (  )     {", "return   report . getName (  )  . equals (  \" xml \"  )  ;", "}", "}  )  ;", "reportMapping . map (  \" destination \"  ,    new   Callable < File >  (  )     {", "@ Override", "public   File   call (  )     {", "return   new   File ( extension . getReportsDir (  )  ,     (  ( baseName    +     \"  .  \"  )     +     ( report . getName (  )  )  )  )  ;", "}", "}  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureReportsConventionMapping"], "fileName": "org.gradle.api.plugins.quality.FindBugsPlugin"}, {"methodBody": ["METHOD_START", "{", "ConventionMapping   taskMapping    =    task . getConventionMapping (  )  ;", "taskMapping . map (  \" findbugsClasspath \"  ,    Callables . returning ( configuration )  )  ;", "taskMapping . map (  \" ignoreFailures \"  ,    new   Callable < Boolean >  (  )     {", "@ Override", "public   Boolean   call (  )     {", "return   extension . isIgnoreFailures (  )  ;", "}", "}  )  ;", "taskMapping . map (  \" effort \"  ,    new   Callable < String >  (  )     {", "@ Override", "public   String   call (  )     {", "return   extension . getEffort (  )  ;", "}", "}  )  ;", "taskMapping . map (  \" reportLevel \"  ,    new   Callable < String >  (  )     {", "@ Override", "public   String   call (  )     {", "return   extension . getReportLevel (  )  ;", "}", "}  )  ;", "taskMapping . map (  \" visitors \"  ,    new   Callable < Collection < String >  >  (  )     {", "@ Override", "public   Collection < String >    call (  )     {", "return   extension . getVisitors (  )  ;", "}", "}  )  ;", "taskMapping . map (  \" omitVisitors \"  ,    new   Callable < Collection < String >  >  (  )     {", "@ Override", "public   Collection < String >    call (  )     {", "return   extension . getOmitVisitors (  )  ;", "}", "}  )  ;", "taskMapping . map (  \" excludeFilterConfig \"  ,    new   Callable < TextResource >  (  )     {", "@ Override", "public   TextResource   call (  )     {", "return   extension . getExcludeFilterConfig (  )  ;", "}", "}  )  ;", "taskMapping . map (  \" includeFilterConfig \"  ,    new   Callable < TextResource >  (  )     {", "@ Override", "public   TextResource   call (  )     {", "return   extension . getIncludeFilterConfig (  )  ;", "}", "}  )  ;", "taskMapping . map (  \" excludeFilterConfig \"  ,    new   Callable < TextResource >  (  )     {", "@ Override", "public   TextResource   call (  )     {", "return   extension . getExcludeFilterConfig (  )  ;", "}", "}  )  ;", "taskMapping . map (  \" extraArgs \"  ,    new   Callable < Collection < String >  >  (  )     {", "@ Override", "public   Collection < String >    call (  )     {", "return   extension . getExtraArgs (  )  ;", "}", "}  )  ;", "taskMapping . map (  \" jvmArgs \"  ,    new   Callable < Collection < String >  >  (  )     {", "@ Override", "public   Collection < String >    call (  )     {", "return   extension . getJvmArgs (  )  ;", "}", "}  )  ;", "taskMapping . map (  \" showProgress \"  ,    new   Callable < Boolean >  (  )     {", "@ Override", "public   Boolean   call (  )     {", "return   extension . isShowProgress (  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureTaskConventionMapping"], "fileName": "org.gradle.api.plugins.quality.FindBugsPlugin"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getAntBuilder"], "fileName": "org.gradle.api.plugins.quality.JDepend"}, {"methodBody": ["METHOD_START", "{", "SingleMessageLogger . nagUserOfReplacedMethod (  \" getClassesDir (  )  \"  ,     \" getClassesDirs (  )  \"  )  ;", "return   CollectionUtils . single ( getClassesDirs (  )  )  ;", "}", "METHOD_END"], "methodName": ["getClassesDir"], "fileName": "org.gradle.api.plugins.quality.JDepend"}, {"methodBody": ["METHOD_START", "{", "return   classesDirs ;", "}", "METHOD_END"], "methodName": ["getClassesDirs"], "fileName": "org.gradle.api.plugins.quality.JDepend"}, {"methodBody": ["METHOD_START", "{", "return   jdependClasspath ;", "}", "METHOD_END"], "methodName": ["getJdependClasspath"], "fileName": "org.gradle.api.plugins.quality.JDepend"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getObjectFactory"], "fileName": "org.gradle.api.plugins.quality.JDepend"}, {"methodBody": ["METHOD_START", "{", "return   reports ;", "}", "METHOD_END"], "methodName": ["getReports"], "fileName": "org.gradle.api.plugins.quality.JDepend"}, {"methodBody": ["METHOD_START", "{", "return   reports ( new   ClosureBackedAction < JDependReports >  ( closure )  )  ;", "}", "METHOD_END"], "methodName": ["reports"], "fileName": "org.gradle.api.plugins.quality.JDepend"}, {"methodBody": ["METHOD_START", "{", "JDependInvoker . invoke ( this )  ;", "}", "METHOD_END"], "methodName": ["run"], "fileName": "org.gradle.api.plugins.quality.JDepend"}, {"methodBody": ["METHOD_START", "{", "SingleMessageLogger . nagUserOfReplacedMethod (  \" setClassesDir ( File )  \"  ,     \" setClassesDirs ( Set < File >  )  \"  )  ;", "setClassesDirs ( getProject (  )  . files ( classesDir )  )  ;", "}", "METHOD_END"], "methodName": ["setClassesDir"], "fileName": "org.gradle.api.plugins.quality.JDepend"}, {"methodBody": ["METHOD_START", "{", "this . classesDirs    =    classesDirs ;", "}", "METHOD_END"], "methodName": ["setClassesDirs"], "fileName": "org.gradle.api.plugins.quality.JDepend"}, {"methodBody": ["METHOD_START", "{", "this . jdependClasspath    =    jdependClasspath ;", "}", "METHOD_END"], "methodName": ["setJdependClasspath"], "fileName": "org.gradle.api.plugins.quality.JDepend"}, {"methodBody": ["METHOD_START", "{", "configuration . defaultDependencies ( new   Action < DependencySet >  (  )     {", "@ Override", "public   void   execute ( DependencySet   dependencies )     {", "dependencies . add ( project . getDependencies (  )  . create (  (  \" jdepend : jdepend :  \"     +     ( extension . getToolVersion (  )  )  )  )  )  ;", "Class < Main >    antMain    =    Main . class ;", "String   antVersion    =    antMain . getPackage (  )  . getImplementationVersion (  )  ;", "dependencies . add ( project . getDependencies (  )  . create (  (  \" ant : ant - jdepend :  \"     +    antVersion )  )  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureDefaultDependencies"], "fileName": "org.gradle.api.plugins.quality.JDependPlugin"}, {"methodBody": ["METHOD_START", "{", "task . getReports (  )  . all ( new   Action < SingleFileReport >  (  )     {", "@ Override", "public   void   execute ( final   SingleFileReport   report )     {", "ConventionMapping   reportMapping    =    AbstractCodeQualityPlugin . conventionMappingOf ( report )  ;", "reportMapping . map (  \" enabled \"  ,    new   Callable < Boolean >  (  )     {", "@ Override", "public   Boolean   call (  )     {", "return   report . getName (  )  . equals (  \" xml \"  )  ;", "}", "}  )  ;", "reportMapping . map (  \" destination \"  ,    new   Callable < File >  (  )     {", "@ Override", "public   File   call (  )     {", "final   String   fileSuffix    =     ( report . getName (  )  . equals (  \" text \"  )  )     ?     \" txt \"     :    report . getName (  )  ;", "return   new   File ( extension . getReportsDir (  )  ,     (  ( baseName    +     \"  .  \"  )     +    fileSuffix )  )  ;", "}", "}  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureReportsConventionMapping"], "fileName": "org.gradle.api.plugins.quality.JDependPlugin"}, {"methodBody": ["METHOD_START", "{", "AbstractCodeQualityPlugin . conventionMappingOf ( task )  . map (  \" jdependClasspath \"  ,    Callables . returning ( configuration )  )  ;", "}", "METHOD_END"], "methodName": ["configureTaskConventionMapping"], "fileName": "org.gradle.api.plugins.quality.JDependPlugin"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getAntBuilder"], "fileName": "org.gradle.api.plugins.quality.Pmd"}, {"methodBody": ["METHOD_START", "{", "return   classpath ;", "}", "METHOD_END"], "methodName": ["getClasspath"], "fileName": "org.gradle.api.plugins.quality.Pmd"}, {"methodBody": ["METHOD_START", "{", "return   ignoreFailures ;", "}", "METHOD_END"], "methodName": ["getIgnoreFailures"], "fileName": "org.gradle.api.plugins.quality.Pmd"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getObjectFactory"], "fileName": "org.gradle.api.plugins.quality.Pmd"}, {"methodBody": ["METHOD_START", "{", "return   pmdClasspath ;", "}", "METHOD_END"], "methodName": ["getPmdClasspath"], "fileName": "org.gradle.api.plugins.quality.Pmd"}, {"methodBody": ["METHOD_START", "{", "return   reports ;", "}", "METHOD_END"], "methodName": ["getReports"], "fileName": "org.gradle.api.plugins.quality.Pmd"}, {"methodBody": ["METHOD_START", "{", "return   rulePriority ;", "}", "METHOD_END"], "methodName": ["getRulePriority"], "fileName": "org.gradle.api.plugins.quality.Pmd"}, {"methodBody": ["METHOD_START", "{", "return   ruleSetConfig ;", "}", "METHOD_END"], "methodName": ["getRuleSetConfig"], "fileName": "org.gradle.api.plugins.quality.Pmd"}, {"methodBody": ["METHOD_START", "{", "return   ruleSetFiles ;", "}", "METHOD_END"], "methodName": ["getRuleSetFiles"], "fileName": "org.gradle.api.plugins.quality.Pmd"}, {"methodBody": ["METHOD_START", "{", "return   ruleSets ;", "}", "METHOD_END"], "methodName": ["getRuleSets"], "fileName": "org.gradle.api.plugins.quality.Pmd"}, {"methodBody": ["METHOD_START", "{", "return   targetJdk ;", "}", "METHOD_END"], "methodName": ["getTargetJdk"], "fileName": "org.gradle.api.plugins.quality.Pmd"}, {"methodBody": ["METHOD_START", "{", "return   consoleOutput ;", "}", "METHOD_END"], "methodName": ["isConsoleOutput"], "fileName": "org.gradle.api.plugins.quality.Pmd"}, {"methodBody": ["METHOD_START", "{", "return   reports ( new   ClosureBackedAction < PmdReports >  ( closure )  )  ;", "}", "METHOD_END"], "methodName": ["reports"], "fileName": "org.gradle.api.plugins.quality.Pmd"}, {"methodBody": ["METHOD_START", "{", "configureAction . execute ( reports )  ;", "return   reports ;", "}", "METHOD_END"], "methodName": ["reports"], "fileName": "org.gradle.api.plugins.quality.Pmd"}, {"methodBody": ["METHOD_START", "{", "PmdInvoker . invoke ( this )  ;", "}", "METHOD_END"], "methodName": ["run"], "fileName": "org.gradle.api.plugins.quality.Pmd"}, {"methodBody": ["METHOD_START", "{", "this . classpath    =    classpath ;", "}", "METHOD_END"], "methodName": ["setClasspath"], "fileName": "org.gradle.api.plugins.quality.Pmd"}, {"methodBody": ["METHOD_START", "{", "this . consoleOutput    =    consoleOutput ;", "}", "METHOD_END"], "methodName": ["setConsoleOutput"], "fileName": "org.gradle.api.plugins.quality.Pmd"}, {"methodBody": ["METHOD_START", "{", "this . ignoreFailures    =    ignoreFailures ;", "}", "METHOD_END"], "methodName": ["setIgnoreFailures"], "fileName": "org.gradle.api.plugins.quality.Pmd"}, {"methodBody": ["METHOD_START", "{", "this . pmdClasspath    =    pmdClasspath ;", "}", "METHOD_END"], "methodName": ["setPmdClasspath"], "fileName": "org.gradle.api.plugins.quality.Pmd"}, {"methodBody": ["METHOD_START", "{", "Pmd . validate ( intValue )  ;", "rulePriority    =    intValue ;", "}", "METHOD_END"], "methodName": ["setRulePriority"], "fileName": "org.gradle.api.plugins.quality.Pmd"}, {"methodBody": ["METHOD_START", "{", "this . ruleSetConfig    =    ruleSetConfig ;", "}", "METHOD_END"], "methodName": ["setRuleSetConfig"], "fileName": "org.gradle.api.plugins.quality.Pmd"}, {"methodBody": ["METHOD_START", "{", "this . ruleSetFiles    =    ruleSetFiles ;", "}", "METHOD_END"], "methodName": ["setRuleSetFiles"], "fileName": "org.gradle.api.plugins.quality.Pmd"}, {"methodBody": ["METHOD_START", "{", "this . ruleSets    =    ruleSets ;", "}", "METHOD_END"], "methodName": ["setRuleSets"], "fileName": "org.gradle.api.plugins.quality.Pmd"}, {"methodBody": ["METHOD_START", "{", "this . targetJdk    =    targetJdk ;", "}", "METHOD_END"], "methodName": ["setTargetJdk"], "fileName": "org.gradle.api.plugins.quality.Pmd"}, {"methodBody": ["METHOD_START", "{", "ConsoleDetector   consoleDetector    =    NativeServices . getInstance (  )  . get ( ConsoleDetector . class )  ;", "ConsoleMetaData   consoleMetaData    =    consoleDetector . getConsole (  )  ;", "return    ( consoleMetaData    !  =    null )     &  &     ( consoleMetaData . isStdOut (  )  )  ;", "}", "METHOD_END"], "methodName": ["stdOutIsAttachedToTerminal"], "fileName": "org.gradle.api.plugins.quality.Pmd"}, {"methodBody": ["METHOD_START", "{", "if    (  ( value    >     5  )     |  |     ( value    <     1  )  )     {", "throw   new   InvdUserDataException ( String . format (  \" Invd   rulePriority    '  % d '  .       Vd   range    1     ( highest )    to    5     ( lowest )  .  \"  ,    value )  )  ;", "}", "}", "METHOD_END"], "methodName": ["validate"], "fileName": "org.gradle.api.plugins.quality.Pmd"}, {"methodBody": ["METHOD_START", "{", "return   rulePriority ;", "}", "METHOD_END"], "methodName": ["getRulePriority"], "fileName": "org.gradle.api.plugins.quality.PmdExtension"}, {"methodBody": ["METHOD_START", "{", "return   ruleSetConfig ;", "}", "METHOD_END"], "methodName": ["getRuleSetConfig"], "fileName": "org.gradle.api.plugins.quality.PmdExtension"}, {"methodBody": ["METHOD_START", "{", "return   ruleSetFiles ;", "}", "METHOD_END"], "methodName": ["getRuleSetFiles"], "fileName": "org.gradle.api.plugins.quality.PmdExtension"}, {"methodBody": ["METHOD_START", "{", "return   ruleSets ;", "}", "METHOD_END"], "methodName": ["getRuleSets"], "fileName": "org.gradle.api.plugins.quality.PmdExtension"}, {"methodBody": ["METHOD_START", "{", "return   targetJdk ;", "}", "METHOD_END"], "methodName": ["getTargetJdk"], "fileName": "org.gradle.api.plugins.quality.PmdExtension"}, {"methodBody": ["METHOD_START", "{", "return   consoleOutput ;", "}", "METHOD_END"], "methodName": ["isConsoleOutput"], "fileName": "org.gradle.api.plugins.quality.PmdExtension"}, {"methodBody": ["METHOD_START", "{", "this . ruleSetFiles . from ( ruleSetFiles )  ;", "}", "METHOD_END"], "methodName": ["ruleSetFiles"], "fileName": "org.gradle.api.plugins.quality.PmdExtension"}, {"methodBody": ["METHOD_START", "{", "this . ruleSets . addAll ( Arrays . asList ( ruleSets )  )  ;", "}", "METHOD_END"], "methodName": ["ruleSets"], "fileName": "org.gradle.api.plugins.quality.PmdExtension"}, {"methodBody": ["METHOD_START", "{", "this . consoleOutput    =    consoleOutput ;", "}", "METHOD_END"], "methodName": ["setConsoleOutput"], "fileName": "org.gradle.api.plugins.quality.PmdExtension"}, {"methodBody": ["METHOD_START", "{", "Pmd . validate ( intValue )  ;", "rulePriority    =    intValue ;", "}", "METHOD_END"], "methodName": ["setRulePriority"], "fileName": "org.gradle.api.plugins.quality.PmdExtension"}, {"methodBody": ["METHOD_START", "{", "this . ruleSetConfig    =    ruleSetConfig ;", "}", "METHOD_END"], "methodName": ["setRuleSetConfig"], "fileName": "org.gradle.api.plugins.quality.PmdExtension"}, {"methodBody": ["METHOD_START", "{", "this . ruleSetFiles    =    project . files ( ruleSetFiles )  ;", "}", "METHOD_END"], "methodName": ["setRuleSetFiles"], "fileName": "org.gradle.api.plugins.quality.PmdExtension"}, {"methodBody": ["METHOD_START", "{", "this . ruleSets    =    ruleSets ;", "}", "METHOD_END"], "methodName": ["setRuleSets"], "fileName": "org.gradle.api.plugins.quality.PmdExtension"}, {"methodBody": ["METHOD_START", "{", "targetJdk    =    TargetJdk . toVersion ( value )  ;", "}", "METHOD_END"], "methodName": ["setTargetJdk"], "fileName": "org.gradle.api.plugins.quality.PmdExtension"}, {"methodBody": ["METHOD_START", "{", "this . targetJdk    =    targetJdk ;", "}", "METHOD_END"], "methodName": ["setTargetJdk"], "fileName": "org.gradle.api.plugins.quality.PmdExtension"}, {"methodBody": ["METHOD_START", "{", "if    (  ( toolVersion . compareTo ( VersionNumber . version (  5  )  )  )     <     0  )     {", "return    \" pmd : pmd :  \"     +     ( extension . getToolVersion (  )  )  ;", "} else", "if    (  ( toolVersion . compareTo ( VersionNumber . parse (  \"  5  .  2  .  0  \"  )  )  )     <     0  )     {", "return    \" net . sourcefe . pmd : pmd :  \"     +     ( extension . getToolVersion (  )  )  ;", "}", "return    \" net . sourcefe . pmd : pmd - java :  \"     +     ( extension . getToolVersion (  )  )  ;", "}", "METHOD_END"], "methodName": ["calculateDefaultDependencyNotation"], "fileName": "org.gradle.api.plugins.quality.PmdPlugin"}, {"methodBody": ["METHOD_START", "{", "configuration . defaultDependencies ( new   Action < DependencySet >  (  )     {", "@ Override", "public   void   execute ( DependencySet   dependencies )     {", "VersionNumber   version    =    VersionNumber . parse ( extension . getToolVersion (  )  )  ;", "String   dependency    =    calculateDefaultDependencyNotation ( version )  ;", "dependencies . add ( project . getDependencies (  )  . create ( dependency )  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureDefaultDependencies"], "fileName": "org.gradle.api.plugins.quality.PmdPlugin"}, {"methodBody": ["METHOD_START", "{", "task . getReports (  )  . all ( new   Action < SingleFileReport >  (  )     {", "@ Override", "public   void   execute ( final   SingleFileReport   report )     {", "ConventionMapping   reportMapping    =    AbstractCodeQualityPlugin . conventionMappingOf ( report )  ;", "reportMapping . map (  \" enabled \"  ,    Callables . returning ( true )  )  ;", "reportMapping . map (  \" destination \"  ,    new   Callable < File >  (  )     {", "@ Override", "public   File   call (  )     {", "return   new   File ( extension . getReportsDir (  )  ,     (  ( baseName    +     \"  .  \"  )     +     ( report . getName (  )  )  )  )  ;", "}", "}  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureReportsConventionMapping"], "fileName": "org.gradle.api.plugins.quality.PmdPlugin"}, {"methodBody": ["METHOD_START", "{", "ConventionMapping   taskMapping    =    task . getConventionMapping (  )  ;", "taskMapping . map (  \" pmdClasspath \"  ,    Callables . returning ( configuration )  )  ;", "taskMapping . map (  \" ruleSets \"  ,    new   Callable < List < String >  >  (  )     {", "@ Override", "public   List < String >    call (  )     {", "return   extension . getRuleSets (  )  ;", "}", "}  )  ;", "taskMapping . map (  \" ruleSetConfig \"  ,    new   Callable < TextResource >  (  )     {", "@ Override", "public   TextResource   call (  )     {", "return   extension . getRuleSetConfig (  )  ;", "}", "}  )  ;", "taskMapping . map (  \" ruleSetFiles \"  ,    new   Callable < FileCollection >  (  )     {", "@ Override", "public   FileCollection   call (  )     {", "return   extension . getRuleSetFiles (  )  ;", "}", "}  )  ;", "taskMapping . map (  \" ignoreFailures \"  ,    new   Callable < Boolean >  (  )     {", "@ Override", "public   Boolean   call (  )     {", "return   extension . isIgnoreFailures (  )  ;", "}", "}  )  ;", "taskMapping . map (  \" rulePrior \"  ,    new   Callable < Integer >  (  )     {", "@ Override", "public   Integer   call (  )     {", "return   extension . getRulePrior (  )  ;", "}", "}  )  ;", "taskMapping . map (  \" consoleOutput \"  ,    new   Callable < Boolean >  (  )     {", "@ Override", "public   Boolean   call (  )     {", "return   extension . isConsoleOutput (  )  ;", "}", "}  )  ;", "taskMapping . map (  \" targetJdk \"  ,    new   Callable < TargetJdk >  (  )     {", "@ Override", "public   TargetJdk   call (  )     {", "return   extension . getTargetJdk (  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureTaskConventionMapping"], "fileName": "org.gradle.api.plugins.quality.PmdPlugin"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   TaetJdk . toVersion ( toString (  )  )  ;", "}    catch    ( IllegalAumentException   ignored )     {", "return   TaetJdk . VERSION _  1  _  4  ;", "}", "}", "METHOD_END"], "methodName": ["getDefaultTargetJdk"], "fileName": "org.gradle.api.plugins.quality.PmdPlugin"}, {"methodBody": ["METHOD_START", "{", "return   name (  )  . substring (  \" VERSION _  \"  . length (  )  )  . replace (  '  _  '  ,     '  .  '  )  . toLowerCase (  )  ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.api.plugins.quality.TargetJdk"}, {"methodBody": ["METHOD_START", "{", "if    ( value    =  =    null )     {", "return   null ;", "}", "if    ( value   instanceof    )     {", "return    (  (  )     ( value )  )  ;", "}", "String   name    =    value . toString (  )  ;", "if    ( name . equalsIgnoreCase (  \"  1  .  7  \"  )  )     {", "return    . VERSION _  1  _  7  ;", "} else", "if    ( name . equalsIgnoreCase (  \"  1  .  6  \"  )  )     {", "return    . VERSION _  1  _  6  ;", "} else", "if    ( name . equalsIgnoreCase (  \"  1  .  5  \"  )  )     {", "return    . VERSION _  1  _  5  ;", "} else", "if    ( name . equalsIgnoreCase (  \"  1  .  4  \"  )  )     {", "return    . VERSION _  1  _  4  ;", "} else", "if    ( name . equalsIgnoreCase (  \"  1  .  3  \"  )  )     {", "return    . VERSION _  1  _  3  ;", "} else", "if    ( name . equalsIgnoreCase (  \" jsp \"  )  )     {", "return    . VERSION _ JSP ;", "} else    {", "throw   new   IllegalArgumentException ( String . format (  \" Could   not   determine   targetjdk   from    '  % s '  .  \"  ,    name )  )  ;", "}", "}", "METHOD_END"], "methodName": ["toVersion"], "fileName": "org.gradle.api.plugins.quality.TargetJdk"}, {"methodBody": ["METHOD_START", "{", "withBasePlugin ( new   Action < Plugin >  (  )     {", "@ Override", "public   void   execute ( Plugin   plugin )     {", "configureCheckTaskDependents (  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureCheckTask"], "fileName": "org.gradle.api.plugins.quality.internal.AbstractCodeQualityPlugin"}, {"methodBody": ["METHOD_START", "{", "final   String   taskBaseName    =    getTaskBaseName (  )  ;", "project . getTasks (  )  . getByName (  \" check \"  )  . dependsOn ( new   Callable (  )     {", "@ Override", "public   Object   call (  )     {", "return   Iterables . transform ( extension . getSourceSets (  )  ,    new   com . google . common . base . Function < SourceSet ,    String >  (  )     {", "@ Override", "public   String   apply ( SourceSet   sourceSet )     {", "return   sourceSet . getTaskName ( taskBaseName ,    null )  ;", "}", "}  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureCheckTaskDependents"], "fileName": "org.gradle.api.plugins.quality.internal.AbstractCodeQualityPlugin"}, {"methodBody": ["METHOD_START", "{", "final   ConventionMapping   extensionMapping    =    AbstractCodeQualityPlugin . conventionMappingOf ( extension )  ;", "extensionMapping . map (  \" sourceSets \"  ,    Callables . returning ( new   ArrayList (  )  )  )  ;", "extensionMapping . map (  \" reportsDir \"  ,    new   Callable < File >  (  )     {", "@ Override", "public   File   call (  )     {", "return   project . getExtensions (  )  . getByType ( ReportingExtension . class )  . file ( getReportName (  )  )  ;", "}", "}  )  ;", "withBasePlugin ( new   Action < Plugin >  (  )     {", "@ Override", "public   void   execute ( Plugin   plugin )     {", "extensionMapping . map (  \" sourceSets \"  ,    new   Callable < SourceSetContainer >  (  )     {", "@ Override", "public   SourceSetContainer   call (  )     {", "return   getJavaPluginConvention (  )  . getSourceSets (  )  ;", "}", "}  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureExtensionRule"], "fileName": "org.gradle.api.plugins.quality.internal.AbstractCodeQualityPlugin"}, {"methodBody": ["METHOD_START", "{", "sourceSets . all ( new   Action < SourceSet >  (  )     {", "@ Override", "public   void   execute ( SourceSet   sourceSet )     {", "Task   task    =    project . getTasks (  )  . create ( sourceSet . getTaskName ( getTaskBaseName (  )  ,    null )  ,    getCastedTaskType (  )  )  ;", "configureForSourceSet ( sourceSet ,     (  ( T )     ( task )  )  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureForSourceSets"], "fileName": "org.gradle.api.plugins.quality.internal.AbstractCodeQualityPlugin"}, {"methodBody": ["METHOD_START", "{", "withBasePlugin ( new   Action < Plugin >  (  )     {", "@ Override", "public   void   execute ( Plugin   plugin )     {", "configureForSourceSets ( getJavaPluginConvention (  )  . getSourceSets (  )  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureSourceSetRule"], "fileName": "org.gradle.api.plugins.quality.internal.AbstractCodeQualityPlugin"}, {"methodBody": ["METHOD_START", "{", "project . getTasks (  )  . withType ( getCastedTaskType (  )  ,    new   Action < Task >  (  )     {", "@ Override", "public   void   execute ( Task   task )     {", "String   prunedName    =    task . getName (  )  . replaceFirst ( getTaskBaseName (  )  ,     \"  \"  )  ;", "if    ( prunedName . isEmpty (  )  )     {", "prunedName    =    task . getName (  )  ;", "}", "prunedName    =     (  (  \"  \"     +     ( prunedName . charAt (  0  )  )  )  . toLowerCase (  )  )     +     ( prunedName . substring (  1  )  )  ;", "configureTaskDefaults (  (  ( T )     ( task )  )  ,    prunedName )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureTaskRule"], "fileName": "org.gradle.api.plugins.quality.internal.AbstractCodeQualityPlugin"}, {"methodBody": ["METHOD_START", "{", "return    (  ( IConventionAware )     ( object )  )  . getConventionMapping (  )  ;", "}", "METHOD_END"], "methodName": ["conventionMappingOf"], "fileName": "org.gradle.api.plugins.quality.internal.AbstractCodeQualityPlugin"}, {"methodBody": ["METHOD_START", "{", "Configuration   configuration    =    project . getConfigurations (  )  . create ( getConfigurationName (  )  )  ;", "configuration . setVisible ( false )  ;", "configuration . setTransitive ( true )  ;", "configuration . setDescription (  (  (  \" The    \"     +     ( getToolName (  )  )  )     +     \"    libraries   to   be   used   for   this   project .  \"  )  )  ;", "configuration . exclude ( excludeProperties (  \" ant \"  ,     \" ant \"  )  )  ;", "configuration . exclude ( excludeProperties (  \" apache . ant \"  ,     \" ant \"  )  )  ;", "configuration . exclude ( excludeProperties (  \" apache . ant \"  ,     \" ant - launcher \"  )  )  ;", "configuration . exclude ( excludeProperties (  \" slf 4 j \"  ,     \" slf 4 j - api \"  )  )  ;", "configuration . exclude ( excludeProperties (  \" slf 4 j \"  ,     \" jcl - over - slf 4 j \"  )  )  ;", "configuration . exclude ( excludeProperties (  \" slf 4 j \"  ,     \" log 4 j - over - slf 4 j \"  )  )  ;", "configuration . exclude ( excludeProperties (  \" commons - logging \"  ,     \" commons - logging \"  )  )  ;", "configuration . exclude ( excludeProperties (  \" log 4 j \"  ,     \" log 4 j \"  )  )  ;", "}", "METHOD_END"], "methodName": ["createConfigurations"], "fileName": "org.gradle.api.plugins.quality.internal.AbstractCodeQualityPlugin"}, {"methodBody": ["METHOD_START", "{", "return   ImmutableMap .  < String ,    String > builder (  )  . put (  \" group \"  ,    group )  . put (  \" module \"  ,    module )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["excludeProperties"], "fileName": "org.gradle.api.plugins.quality.internal.AbstractCodeQualityPlugin"}, {"methodBody": ["METHOD_START", "{", "return   JavaBasePlugin . class ;", "}", "METHOD_END"], "methodName": ["getBasePlugin"], "fileName": "org.gradle.api.plugins.quality.internal.AbstractCodeQualityPlugin"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Class <  ?    extends   Task >  )     ( getTaskType (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getCastedTaskType"], "fileName": "org.gradle.api.plugins.quality.internal.AbstractCodeQualityPlugin"}, {"methodBody": ["METHOD_START", "{", "return   getToolName (  )  . toLowerCase (  )  ;", "}", "METHOD_END"], "methodName": ["getConfigurationName"], "fileName": "org.gradle.api.plugins.quality.internal.AbstractCodeQualityPlugin"}, {"methodBody": ["METHOD_START", "{", "return   project . getConvention (  )  . getPlugin ( JavaPluginConvention . class )  ;", "}", "METHOD_END"], "methodName": ["getJavaPluginConvention"], "fileName": "org.gradle.api.plugins.quality.internal.AbstractCodeQualityPlugin"}, {"methodBody": ["METHOD_START", "{", "return   getToolName (  )  . toLowerCase (  )  ;", "}", "METHOD_END"], "methodName": ["getReportName"], "fileName": "org.gradle.api.plugins.quality.internal.AbstractCodeQualityPlugin"}, {"methodBody": ["METHOD_START", "{", "return   getToolName (  )  . toLowerCase (  )  ;", "}", "METHOD_END"], "methodName": ["getTaskBaseName"], "fileName": "org.gradle.api.plugins.quality.internal.AbstractCodeQualityPlugin"}, {"methodBody": ["METHOD_START", "{", "project . getPlugins (  )  . withType ( getBasePlugin (  )  ,    action )  ;", "}", "METHOD_END"], "methodName": ["withBasePlugin"], "fileName": "org.gradle.api.plugins.quality.internal.AbstractCodeQualityPlugin"}, {"methodBody": ["METHOD_START", "{", "return   getByName (  \" html \"  )  ;", "}", "METHOD_END"], "methodName": ["getHtml"], "fileName": "org.gradle.api.plugins.quality.internal.CheckstyleReportsImpl"}, {"methodBody": ["METHOD_START", "{", "return   getByName (  \" xml \"  )  ;", "}", "METHOD_END"], "methodName": ["getXml"], "fileName": "org.gradle.api.plugins.quality.internal.CheckstyleReportsImpl"}, {"methodBody": ["METHOD_START", "{", "return   getByName (  \" html \"  )  ;", "}", "METHOD_END"], "methodName": ["getHtml"], "fileName": "org.gradle.api.plugins.quality.internal.CodeNarcReportsImpl"}, {"methodBody": ["METHOD_START", "{", "return   getByName (  \" text \"  )  ;", "}", "METHOD_END"], "methodName": ["getText"], "fileName": "org.gradle.api.plugins.quality.internal.CodeNarcReportsImpl"}, {"methodBody": ["METHOD_START", "{", "return   getByName (  \" xml \"  )  ;", "}", "METHOD_END"], "methodName": ["getXml"], "fileName": "org.gradle.api.plugins.quality.internal.CodeNarcReportsImpl"}, {"methodBody": ["METHOD_START", "{", "return   getByName (  \" emacs \"  )  ;", "}", "METHOD_END"], "methodName": ["getEmacs"], "fileName": "org.gradle.api.plugins.quality.internal.FindBugsReportsImpl"}, {"methodBody": ["METHOD_START", "{", "return   getByName (  \" html \"  )  ;", "}", "METHOD_END"], "methodName": ["getHtml"], "fileName": "org.gradle.api.plugins.quality.internal.FindBugsReportsImpl"}, {"methodBody": ["METHOD_START", "{", "return   getByName (  \" text \"  )  ;", "}", "METHOD_END"], "methodName": ["getText"], "fileName": "org.gradle.api.plugins.quality.internal.FindBugsReportsImpl"}, {"methodBody": ["METHOD_START", "{", "return    (  ( FindBugsXmlReport )     ( getByName (  \" xml \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getXml"], "fileName": "org.gradle.api.plugins.quality.internal.FindBugsReportsImpl"}, {"methodBody": ["METHOD_START", "{", "return   getByName (  \" text \"  )  ;", "}", "METHOD_END"], "methodName": ["getText"], "fileName": "org.gradle.api.plugins.quality.internal.JDependReportsImpl"}, {"methodBody": ["METHOD_START", "{", "return   getByName (  \" xml \"  )  ;", "}", "METHOD_END"], "methodName": ["getXml"], "fileName": "org.gradle.api.plugins.quality.internal.JDependReportsImpl"}, {"methodBody": ["METHOD_START", "{", "return   getByName (  \" html \"  )  ;", "}", "METHOD_END"], "methodName": ["getHtml"], "fileName": "org.gradle.api.plugins.quality.internal.PmdReportsImpl"}, {"methodBody": ["METHOD_START", "{", "return   getByName (  \" xml \"  )  ;", "}", "METHOD_END"], "methodName": ["getXml"], "fileName": "org.gradle.api.plugins.quality.internal.PmdReportsImpl"}, {"methodBody": ["METHOD_START", "{", "for    ( String   f    :    classpath )     {", "Matcher   m    =    Pattern . compile (  \" findbugs -  (  \\  \\ d +  .  *  )  \\  \\  . jar \"  )  . matcher ( f )  ;", "if    ( m . matches (  )  )     {", "return   VersionNumber . parse ( m . group (  1  )  )  ;", "}", "}", "throw   new   GradleException (  (  \" Unable   to   infer   the   version   of   FindBugs   from   currently   specified   FindBugs   classpath :     \"     +    classpath )  )  ;", "}", "METHOD_END"], "methodName": ["getFindbugsVersion"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsClasspathValidator"}, {"methodBody": ["METHOD_START", "{", "VersionNumber   v    =    getFindbugsVersion ( fileNamesOnClasspath )  ;", "boolean   java 8 orMore    =     ( compareTo ( VERSION _  1  _  7  )  )     >     0  ;", "boolean   findbugs 2 orLess    =     ( v . getMajor (  )  )     <     3  ;", "if    ( java 8 orMore    &  &    findbugs 2 orLess )     {", "throw   new    . FindBugsVersionTooLowException (  (  (  (  (  (  (  \" The   version   of   FindBugs    (  \"     +    v )     +     \"  )    inferred   from   FindBugs   classpath   is   too   low   to   work   with   currently   used   Java   version    (  \"  )     +     ( javaVersion )  )     +     \"  )  .  \"  )     +     \"    Please   use   higher   version   of   FindBugs .    Inspected   FindBugs   classpath :     \"  )     +    fileNamesOnClasspath )  )  ;", "}", "}", "METHOD_END"], "methodName": ["validateClasspath"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsClasspathValidator"}, {"methodBody": ["METHOD_START", "{", "int   bugCount    =    findBugs . getBugCount (  )  ;", "int   missingClassCount    =    findBugs . getMissingClassCount (  )  ;", "int   errorCount    =    findBugs . getErrorCount (  )  ;", "return   new   Result ( bugCount ,    missingClassCount ,    errorCount )  ;", "}", "METHOD_END"], "methodName": ["createFindbugsResult"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsExecuter"}, {"methodBody": ["METHOD_START", "{", "return   bugCount ;", "}", "METHOD_END"], "methodName": ["getBugCount"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsResult"}, {"methodBody": ["METHOD_START", "{", "return   errorCount ;", "}", "METHOD_END"], "methodName": ["getErrorCount"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsResult"}, {"methodBody": ["METHOD_START", "{", "return   exception ;", "}", "METHOD_END"], "methodName": ["getException"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsResult"}, {"methodBody": ["METHOD_START", "{", "return   missingClassCount ;", "}", "METHOD_END"], "methodName": ["getMissingClassCount"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsResult"}, {"methodBody": ["METHOD_START", "{", "return   arguments ;", "}", "METHOD_END"], "methodName": ["getArguments"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsSpec"}, {"methodBody": ["METHOD_START", "{", "return   jvmArgs ;", "}", "METHOD_END"], "methodName": ["getJvmArgs"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsSpec"}, {"methodBody": ["METHOD_START", "{", "return   maxHeapSize ;", "}", "METHOD_END"], "methodName": ["getMaxHeapSize"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsSpec"}, {"methodBody": ["METHOD_START", "{", "return   debugEnabled ;", "}", "METHOD_END"], "methodName": ["isDebugEnabled"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsSpec"}, {"methodBody": ["METHOD_START", "{", "return   Objects . toStringHelper ( this )  . add (  \" arguments \"  ,    arguments )  . add (  \" debugEnabled \"  ,    debugEnabled )  . add (  \" jvmArgs \"  ,    jvmArgs )  . toString (  )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsSpec"}, {"methodBody": ["METHOD_START", "{", "ArrayList < String >    args    =    new   ArrayList < String >  (  )  ;", "args . add (  \"  - pluginList \"  )  ;", "args . add (  (  ( pluginsList )     =  =    null    ?     \"  \"     :    pluginsList . getAsPath (  )  )  )  ;", "args . add (  \"  - sortByClass \"  )  ;", "args . add (  \"  - timestampNow \"  )  ;", "if    ( showProgress )     {", "args . add (  \"  - progress \"  )  ;", "}", "if    (  (  ( reports )     !  =    null )     &  &     (  !  ( reports . getEnabled (  )  . isEmpty (  )  )  )  )     {", "if    (  ( reports . getEnabled (  )  . size (  )  )     =  =     1  )     {", "FindBugsReportsImpl   reportsImpl    =     (  ( FindBugsReportsImpl )     ( reports )  )  ;", "String   outputArg    =     \"  -  \"     +     ( reportsImpl . getFirstEnabled (  )  . getName (  )  )  ;", "if    (  ( reportsImpl . getFirstEnabled (  )  )    instanceof   FindBugsXmlReportImpl )     {", "FindBugsXmlReportImpl   r    =     (  ( FindBugsXmlReportImpl )     ( reportsImpl . getFirstEnabled (  )  )  )  ;", "if    ( r . isWithMessages (  )  )     {", "outputArg    +  =     \"  : withMessages \"  ;", "}", "} else", "if    (  ( reportsImpl . getFirstEnabled (  )  )    instanceof   reporting . internal . CustomizableHtmlReportImpl )     {", "reporting . internal . CustomizableHtmlReportImpl   r    =     (  ( reporting . internal . CustomizableHtmlReportImpl )     ( reportsImpl . getFirstEnabled (  )  )  )  ;", "if    (  ( r . getStylesheet (  )  )     !  =    null )     {", "outputArg    +  =     '  :  '     +     ( r . getStylesheet (  )  . asFile (  )  . getAbsolutePath (  )  )  ;", "}", "}", "args . add ( outputArg )  ;", "args . add (  \"  - outputFile \"  )  ;", "args . add ( reportsImpl . getFirstEnabled (  )  . getDestination (  )  . getAbsolutePath (  )  )  ;", "} else    {", "throw   new   InvalidUserDataException (  \" FindBugs   tasks   can   only   have   one   report   enabled ,    however   more   than   one   report   was   enabled .    You   need   to   disable   all   but   one   of   them .  \"  )  ;", "}", "}", "if    ( has ( sources )  )     {", "args . add (  \"  - sourcepath \"  )  ;", "args . add ( sources . getAsPath (  )  )  ;", "}", "if    ( has ( classpath )  )     {", "args . add (  \"  - auxclasspath \"  )  ;", "args . add ( classpath . filter ( new   specs . Spec < File >  (  )     {", "public   boolean   isSatisfiedBy ( File   element )     {", "return   element . exists (  )  ;", "}", "}  )  . getAsPath (  )  )  ;", "}", "if    ( has ( effort )  )     {", "args . add ( String . format (  \"  - effort :  % s \"  ,    effort )  )  ;", "}", "if    ( has ( reportLevel )  )     {", "args . add ( String . format (  \"  -  % s \"  ,    reportLevel )  )  ;", "}", "if    ( has ( visitors )  )     {", "args . add (  \"  - visitors \"  )  ;", "args . add ( CollectionUtils . join (  \"  ,  \"  ,    visitors )  )  ;", "}", "if    ( has ( omitVisitors )  )     {", "args . add (  \"  - omitVisitors \"  )  ;", "args . add ( CollectionUtils . join (  \"  ,  \"  ,    omitVisitors )  )  ;", "}", "if    ( has ( excludeFilter )  )     {", "args . add (  \"  - exclude \"  )  ;", "args . add ( excludeFilter . getPath (  )  )  ;", "}", "if    ( has ( includeFilter )  )     {", "args . add (  \"  - include \"  )  ;", "args . add ( includeFilter . getPath (  )  )  ;", "}", "if    ( has ( excludeBugsFilter )  )     {", "args . add (  \"  - excludeBugs \"  )  ;", "args . add ( excludeBugsFilter . getPath (  )  )  ;", "}", "if    ( has ( extraArgs )  )     {", "args . addAll ( extraArgs )  ;", "}", "for    ( File   classDir    :    classesDirs )     {", "if    ( classDir . exists (  )  )     {", "args . add ( classDir . getAbsolutePath (  )  )  ;", "}", "}", "return   new   FindBugsSpec ( args ,    maxHeapSize ,    debugEnabled ,     (  ( jvmArgs )     =  =    null    ?    Collections .  < String > emptyList (  )     :    jvmArgs )  )  ;", "}", "METHOD_END"], "methodName": ["build"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsSpecBuilder"}, {"methodBody": ["METHOD_START", "{", "this . reports    =    reports ;", "return   this ;", "}", "METHOD_END"], "methodName": ["configureReports"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsSpecBuilder"}, {"methodBody": ["METHOD_START", "{", "return    ( file    !  =    null )     &  &     ( file . canRead (  )  )  ;", "}", "METHOD_END"], "methodName": ["has"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsSpecBuilder"}, {"methodBody": ["METHOD_START", "{", "return    ( str    !  =    null )     &  &     (  ( str . length (  )  )     >     0  )  ;", "}", "METHOD_END"], "methodName": ["has"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsSpecBuilder"}, {"methodBody": ["METHOD_START", "{", "return    ( collection    !  =    null )     &  &     (  !  ( collection . isEmpty (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["has"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsSpecBuilder"}, {"methodBody": ["METHOD_START", "{", "return    ( fileCollection    !  =    null )     &  &     (  !  ( fileCollection . isEmpty (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["has"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsSpecBuilder"}, {"methodBody": ["METHOD_START", "{", "this . classpath    =    classpath ;", "return   this ;", "}", "METHOD_END"], "methodName": ["withClasspath"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsSpecBuilder"}, {"methodBody": ["METHOD_START", "{", "this . debugEnabled    =    debugEnabled ;", "return   this ;", "}", "METHOD_END"], "methodName": ["withDebugging"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsSpecBuilder"}, {"methodBody": ["METHOD_START", "{", "if    (  ( effort    !  =    null )     &  &     (  !  ( FindBugsSpecBuilder . VALID _ EFFORTS . contains ( effort )  )  )  )     {", "throw   new   InvalidUserDataException (  (  \" Invalid   value   for   FindBugs    ' effort '    property :     \"     +    effort )  )  ;", "}", "this . effort    =    effort ;", "return   this ;", "}", "METHOD_END"], "methodName": ["withEffort"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsSpecBuilder"}, {"methodBody": ["METHOD_START", "{", "if    (  ( excludeBugsFilter    !  =    null )     &  &     (  !  ( excludeBugsFilter . canRead (  )  )  )  )     {", "String   errorStr    =    String . format (  \" Cannot   read   file   specified   for       ' excludeBugsFilter '    property :     % s \"  ,    excludeBugsFilter )  ;", "throw   new   InvalidUserDataException ( errorStr )  ;", "}", "this . excludeBugsFilter    =    excludeBugsFilter ;", "return   this ;", "}", "METHOD_END"], "methodName": ["withExcludeBugsFilter"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsSpecBuilder"}, {"methodBody": ["METHOD_START", "{", "if    (  ( excludeFilter    !  =    null )     &  &     (  !  ( excludeFilter . canRead (  )  )  )  )     {", "String   errorStr    =    String . format (  \" Cannot   read   file   specified   for       ' excludeFilter '    property :     % s \"  ,    excludeFilter )  ;", "throw   new   InvalidUserDataException ( errorStr )  ;", "}", "this . excludeFilter    =    excludeFilter ;", "return   this ;", "}", "METHOD_END"], "methodName": ["withExcludeFilter"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsSpecBuilder"}, {"methodBody": ["METHOD_START", "{", "this . extraArgs    =    extraArgs ;", "return   this ;", "}", "METHOD_END"], "methodName": ["withExtraArgs"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsSpecBuilder"}, {"methodBody": ["METHOD_START", "{", "if    (  ( includeFilter    !  =    null )     &  &     (  !  ( includeFilter . canRead (  )  )  )  )     {", "String   errorStr    =    String . format (  \" Cannot   read   file   specified   for       ' includeFilter '    property :     % s \"  ,    includeFilter )  ;", "throw   new   InvalidUserDataException ( errorStr )  ;", "}", "this . includeFilter    =    includeFilter ;", "return   this ;", "}", "METHOD_END"], "methodName": ["withIncludeFilter"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsSpecBuilder"}, {"methodBody": ["METHOD_START", "{", "this . jvmArgs    =    jvmArgs ;", "return   this ;", "}", "METHOD_END"], "methodName": ["withJvmArgs"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsSpecBuilder"}, {"methodBody": ["METHOD_START", "{", "this . maxHeapSize    =    maxHeapSize ;", "return   this ;", "}", "METHOD_END"], "methodName": ["withMaxHeapSize"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsSpecBuilder"}, {"methodBody": ["METHOD_START", "{", "this . omitVisitors    =    omitVisitors ;", "return   this ;", "}", "METHOD_END"], "methodName": ["withOmitVisitors"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsSpecBuilder"}, {"methodBody": ["METHOD_START", "{", "this . pluginsList    =    pluginsClasspath ;", "return   this ;", "}", "METHOD_END"], "methodName": ["withPluginsList"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsSpecBuilder"}, {"methodBody": ["METHOD_START", "{", "if    (  ( reportLevel    !  =    null )     &  &     (  !  ( FindBugsSpecBuilder . VALID _ REPORT _ LEVELS . contains ( reportLevel )  )  )  )     {", "throw   new   InvalidUserDataException (  (  \" Invalid   value   for   FindBugs    ' reportLevel '    property :     \"     +    reportLevel )  )  ;", "}", "this . reportLevel    =    reportLevel ;", "return   this ;", "}", "METHOD_END"], "methodName": ["withReportLevel"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsSpecBuilder"}, {"methodBody": ["METHOD_START", "{", "this . showProgress    =    showProgress ;", "return   this ;", "}", "METHOD_END"], "methodName": ["withShowProgress"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsSpecBuilder"}, {"methodBody": ["METHOD_START", "{", "this . sources    =    sources ;", "return   this ;", "}", "METHOD_END"], "methodName": ["withSources"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsSpecBuilder"}, {"methodBody": ["METHOD_START", "{", "this . visitors    =    visitors ;", "return   this ;", "}", "METHOD_END"], "methodName": ["withVisitors"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsSpecBuilder"}, {"methodBody": ["METHOD_START", "{", "SingleRequestWorkerProcessBuilder < FindBugsWorker >    builder    =    workerFactory . singleRequestWorker ( FindBugsWorker . class ,    FindBugsExecuter . class )  ;", "builder . setBaseName (  \" Gradle   FindBugs   Worker \"  )  ;", "builder . applicationClasspath ( findBugsClasspath )  ;", "builder . sharedPackages ( Arrays . asList (  \" edu . umd . cs . findbugs \"  )  )  ;", "JavaExecHandleBuilder   javaCommand    =    builder . getJavaCommand (  )  ;", "setWorkingDir ( workingDir )  ;", "setMaxHeapSize ( spec . getMaxHeapSize (  )  )  ;", "jvmArgs ( spec . getJvmArgs (  )  )  ;", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["createWorkerProcess"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsWorkerManager"}, {"methodBody": ["METHOD_START", "{", "FindBugsWorker   worker    =    createWorkerProcess ( workingDir ,    workerFactory ,    findBugsClasspath ,    spec )  ;", "return   worker . runFindbugs ( spec )  ;", "}", "METHOD_END"], "methodName": ["runWorker"], "fileName": "org.gradle.api.plugins.quality.internal.findbugs.FindBugsWorkerManager"}]