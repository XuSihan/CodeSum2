[{"methodBody": ["METHOD_START", "{", "ant . withClasspath ( classpath )  . execute ( new   groovy . lang . Closure < Object >  ( this ,    this )     {", "@ SuppressWarnings (  \" UnusedDeclaration \"  )", "public   Object   doCall ( Object   it )     {", "GroovyObjectSupport   antBuilder    =     (  ( GroovyObjectSupport )     ( it )  )  ;", "antBuilder . invokeMethod (  \" taskdef \"  ,    ImmutableMap . of (  \" name \"  ,     \" j \"  ,     \" classname \"  ,     \" ReportTask \"  )  )  ;", "action . execute ( antBuilder )  ;", "return   null ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureAntReportTask"], "fileName": "org.gradle.internal.jacoco.AbstractAntJacocoReport"}, {"methodBody": ["METHOD_START", "{", "final   Map < String ,    Object >    emptyArgs    =    Collections . emptyMap (  )  ;", "antBuilder . invokeMethod (  \" j \"  ,    new   Object [  ]  {    Collections . emptyMap (  )  ,    new   groovy . lang . Closure < Object >  ( this ,    this )     {", "@ SuppressWarnings (  \" UnusedDeclaration \"  )", "public   Object   doCall ( Object   ignore )     {", "antBuilder . invokeMethod (  \" executiondata \"  ,    new   Object [  ]  {    emptyArgs ,    new   groovy . lang . Closure < Object >  ( this ,    this )     {", "public   Object   doCall ( Object   ignore )     {", "executionData . addToAntBuilder ( antBuilder ,     \" resources \"  )  ;", "return   null ;", "}", "}     }  )  ;", "Map < String ,    Object >    structureArgs    =    ImmutableMap .  < String ,    Object > of (  \" name \"  ,    projectName )  ;", "antBuilder . invokeMethod (  \" structure \"  ,    new   Object [  ]  {    structureArgs ,    new   groovy . lang . Closure < Object >  ( this ,    this )     {", "public   Object   doCall ( Object   ignore )     {", "antBuilder . invokeMethod (  \" classfiles \"  ,    new   Object [  ]  {    emptyArgs ,    new   groovy . lang . Closure < Object >  ( this ,    this )     {", "public   Object   doCall ( Object   ignore )     {", "allClassesDirs . addToAntBuilder ( antBuilder ,     \" resources \"  )  ;", "return   null ;", "}", "}     }  )  ;", "antBuilder . invokeMethod (  \" sourcefiles \"  ,    new   Object [  ]  {    emptyArgs ,    new   groovy . lang . Closure < Object >  ( this ,    this )     {", "public   Object   doCall ( Object   ignore )     {", "allSourcesDirs . addToAntBuilder ( antBuilder ,     \" resources \"  )  ;", "return   null ;", "}", "}     }  )  ;", "return   null ;", "}", "}     }  )  ;", "configureReport ( antBuilder ,    t )  ;", "return   null ;", "}", "}     }  )  ;", "}", "METHOD_END"], "methodName": ["invokeJacocoReport"], "fileName": "org.gradle.internal.jacoco.AbstractAntJacocoReport"}, {"methodBody": ["METHOD_START", "{", "final   JacocoCheckResult   jacocoCheckResult    =    new   JacocoCheckResult (  )  ;", "configureAntReportTask ( classpath ,    new   Action < GroovyObjectSupport >  (  )     {", "@ Override", "public   void   execute ( GroovyObjectSupport   antBuilder )     {", "try    {", "invokeJacocoReport ( antBuilder ,    projectName ,    allClassesDirs ,    allSourcesDirs ,    executionData ,    violationRules )  ;", "}    catch    ( Exception   e )     {", "String   violations    =    getViolations ( antBuilder )  ;", "jacocoCheckResult . setSuccess ( false )  ;", "jacocoCheckResult . setFailureMessage (  ( violations    !  =    null    ?    violations    :    e . getMessage (  )  )  )  ;", "}", "}", "}  )  ;", "return   jacocoCheckResult ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.internal.jacoco.AntJacocoCheck"}, {"methodBody": ["METHOD_START", "{", "Object   project    =    antBuilder . getProperty (  \" project \"  )  ;", "Hashtable < String ,    Object >    properties    =    JavaReflectionUtil . method ( project ,    Hashtable . class ,     \" getProperties \"  )  . invoke ( project ,    new   Object [  0  ]  )  ;", "return    (  ( String )     ( properties . get (  . VIOLATIONS _ ANT _ PROPERTY )  )  )  ;", "}", "METHOD_END"], "methodName": ["getViolations"], "fileName": "org.gradle.internal.jacoco.AntJacocoCheck"}, {"methodBody": ["METHOD_START", "{", "ant . withClasspath ( classpath )  . execute ( new   groovy . lang . Closure < Object >  ( this ,    this )     {", "@ SuppressWarnings (  \" UnusedDeclaration \"  )", "public   Object   doCall ( Object   it )     {", "final   GroovyObjectSupport   antBuilder    =     (  ( GroovyObjectSupport )     ( it )  )  ;", "antBuilder . invokeMethod (  \" taskdef \"  ,    ImmutableMap . of (  \" name \"  ,     \" j \"  ,     \" classname \"  ,     \" MergeTask \"  )  )  ;", "Map < String ,    File >    arguments    =    ImmutableMap . of (  \" destfile \"  ,    destinationFile )  ;", "antBuilder . invokeMethod (  \" j \"  ,    new   Object [  ]  {    arguments ,    new   groovy . lang . Closure < Object >  ( this ,    this )     {", "public   Object   doCall ( Object   ignore )     {", "executionData . addToAntBuilder ( antBuilder ,     \" resources \"  )  ;", "return   null ;", "}", "}     }  )  ;", "return   null ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.internal.jacoco.AntJacocoMerge"}, {"methodBody": ["METHOD_START", "{", "configureAntReportTask ( classpath ,    new   Action < GroovyObjectSupport >  (  )     {", "@ Override", "public   void   execute ( GroovyObjectSupport   antBuilder )     {", "invoke ( antBuilder ,    projectName ,    allClassesDirs ,    allSourcesDirs ,    executionData ,    reports )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.internal.jacoco.AntJacocoReport"}, {"methodBody": ["METHOD_START", "{", "int   versionStart    =     \" agent -  \"  . length (  )  ;", "int   versionEnd    =     ( jarName . length (  )  )     -     (  \"  . jar \"  . length (  )  )  ;", "return   VersionNumber . parse ( jarName . substring ( versionStart ,    versionEnd )  )  ;", "}", "METHOD_END"], "methodName": ["extractVersion"], "fileName": "org.gradle.internal.jacoco.JacocoAgentJar"}, {"methodBody": ["METHOD_START", "{", "return   agentConf ;", "}", "METHOD_END"], "methodName": ["getAgentConf"], "fileName": "org.gradle.internal.jacoco.JacocoAgentJar"}, {"methodBody": ["METHOD_START", "{", "if    (  ( agentJar )     =  =    null )     {", "agentJar    =    project . zipTree ( getAgentConf (  )  . getSingleFile (  )  )  . filter ( new   api . specs . Spec < File >  (  )     {", "@ Override", "public   boolean   isSatisfiedBy ( File   file )     {", "return   file . getName (  )  . equals (  \" jacocoagent . jar \"  )  ;", "}", "}  )  . getSingleFile (  )  ;", "}", "return   agentJar ;", "}", "METHOD_END"], "methodName": ["getJar"], "fileName": "org.gradle.internal.jacoco.JacocoAgentJar"}, {"methodBody": ["METHOD_START", "{", "this . agentConf    =    agentConf ;", "}", "METHOD_END"], "methodName": ["setAgentConf"], "fileName": "org.gradle.internal.jacoco.JacocoAgentJar"}, {"methodBody": ["METHOD_START", "{", "boolean   pre 0  7  6     =    Iterables . any ( getAgentConf (  )  ,    new   com . google . common . base . Predicate < File >  (  )     {", "@ Override", "public   boolean   apply ( File   file )     {", "return    (  . V _  0  _  7  _  6  _  0  . compareTo (  . extractVersion ( file . getName (  )  )  )  )     >     0  ;", "}", "}  )  ;", "return    ! pre 0  7  6  ;", "}", "METHOD_END"], "methodName": ["supportsInclNoLocationClasses"], "fileName": "org.gradle.internal.jacoco.JacocoAgentJar"}, {"methodBody": ["METHOD_START", "{", "boolean   pre 0  6  2     =    Iterables . any ( getAgentConf (  )  ,    new   com . google . common . base . Predicate < File >  (  )     {", "@ Override", "public   boolean   apply ( File   file )     {", "return    (  . V _  0  _  6  _  2  _  0  . compareTo (  . extractVersion ( file . getName (  )  )  )  )     >     0  ;", "}", "}  )  ;", "return    ! pre 0  6  2  ;", "}", "METHOD_END"], "methodName": ["supportsJmx"], "fileName": "org.gradle.internal.jacoco.JacocoAgentJar"}, {"methodBody": ["METHOD_START", "{", "return   failureMessage ;", "}", "METHOD_END"], "methodName": ["getFailureMessage"], "fileName": "org.gradle.internal.jacoco.JacocoCheckResult"}, {"methodBody": ["METHOD_START", "{", "return   success ;", "}", "METHOD_END"], "methodName": ["isSuccess"], "fileName": "org.gradle.internal.jacoco.JacocoCheckResult"}, {"methodBody": ["METHOD_START", "{", "this . failureMessage    =    failureMessage ;", "}", "METHOD_END"], "methodName": ["setFailureMessage"], "fileName": "org.gradle.internal.jacoco.JacocoCheckResult"}, {"methodBody": ["METHOD_START", "{", "this . success    =    success ;", "}", "METHOD_END"], "methodName": ["setSuccess"], "fileName": "org.gradle.internal.jacoco.JacocoCheckResult"}, {"methodBody": ["METHOD_START", "{", "return    (  ( SingleFileReport )     ( getByName (  \" csv \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getCsv"], "fileName": "org.gradle.internal.jacoco.JacocoReportsContainerImpl"}, {"methodBody": ["METHOD_START", "{", "return    (  ( DirectoryReport )     ( getByName (  \" html \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getHtml"], "fileName": "org.gradle.internal.jacoco.JacocoReportsContainerImpl"}, {"methodBody": ["METHOD_START", "{", "return    (  ( SingleFileReport )     ( getByName (  \" xml \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getXml"], "fileName": "org.gradle.internal.jacoco.JacocoReportsContainerImpl"}, {"methodBody": ["METHOD_START", "{", "return   failOnViolation ;", "}", "METHOD_END"], "methodName": ["isFailOnViolation"], "fileName": "org.gradle.internal.jacoco.rules.JacocoViolationRulesContainerImpl"}, {"methodBody": ["METHOD_START", "{", "this . failOnViolation    =    failOnViolation ;", "}", "METHOD_END"], "methodName": ["setFailOnViolation"], "fileName": "org.gradle.internal.jacoco.rules.JacocoViolationRulesContainerImpl"}, {"methodBody": ["METHOD_START", "{", "final   JacocoCoverageVerification   coverageVerificationTask    =    project . getTasks (  )  . create (  (  (  \" jacoco \"     +     ( StringUtils . capitalize ( task . getName (  )  )  )  )     +     \" CoverageVerification \"  )  ,    JacocoCoverageVerification . class )  ;", "coverageVerificationTask . setGroup ( VERIFICATION _ GROUP )  ;", "coverageVerificationTask . setDescription ( String . format (  \" Verifies   code   coverage   metrics   based   on   specified   rules   for   the    % s   task .  \"  ,    task . getName (  )  )  )  ;", "coverageVerificationTask . executionData ( task )  ;", "coverageVerificationTask . sourceSets ( project . getConvention (  )  . getPlugin ( JavaPluginConvention . class )  . getSourceSets (  )  . getByName (  \" main \"  )  )  ;", "}", "METHOD_END"], "methodName": ["addDefaultCoverageVerificationTask"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoPlugin"}, {"methodBody": ["METHOD_START", "{", "project . getPlugins (  )  . withType ( JavaPlugin . class ,    new   Action < JavaPlugin >  (  )     {", "@ Override", "public   void   execute ( JavaPlugin   javaPlugin )     {", "project . getTasks (  )  . withType ( Test . class ,    new   Action < Test >  (  )     {", "@ Override", "public   void   execute ( Test   task )     {", "if    ( task . getName (  )  . equals ( TEST _ TASK _ NAME )  )     {", "addDefaultReportTask ( extension ,    task )  ;", "addDefaultCoverageVerificationTask ( task )  ;", "}", "}", "}  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["addDefaultReportAndCoverageVerificationTasks"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoPlugin"}, {"methodBody": ["METHOD_START", "{", "final   JacocoReport   reportTask    =    project . getTasks (  )  . create (  (  (  \" jacoco \"     +     ( StringUtils . capitalize ( task . getName (  )  )  )  )     +     \" Report \"  )  ,    JacocoReport . class )  ;", "reportTask . setGroup ( VERIFICATION _ GROUP )  ;", "reportTask . setDescription ( String . format (  \" Generates   code   coverage   report   for   the    % s   task .  \"  ,    task . getName (  )  )  )  ;", "reportTask . executionData ( task )  ;", "reportTask . sourceSets ( project . getConvention (  )  . getPlugin ( JavaPluginConvention . class )  . getSourceSets (  )  . getByName (  \" main \"  )  )  ;", "reportTask . getReports (  )  . all ( new   api . Action < ConfigurableReport >  (  )     {", "@ Override", "public   void   execute ( final   ConfigurableReport   report )     {", "if    ( report . getOutputType (  )  . equals ( DIRECTORY )  )     {", "report . setDestination ( project . provider ( new   Callable < File >  (  )     {", "@ Override", "public   File   call (  )    throws   Exception    {", "return   new   File ( extension . getReportsDir (  )  ,     (  (  ( task . getName (  )  )     +     \"  /  \"  )     +     ( report . getName (  )  )  )  )  ;", "}", "}  )  )  ;", "} else    {", "report . setDestination ( project . provider ( new   Callable < File >  (  )     {", "@ Override", "public   File   call (  )    throws   Exception    {", "return   new   File ( extension . getReportsDir (  )  ,     (  (  (  (  ( task . getName (  )  )     +     \"  /  \"  )     +     ( reportTask . getName (  )  )  )     +     \"  .  \"  )     +     ( report . getName (  )  )  )  )  ;", "}", "}  )  )  ;", "}", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["addDefaultReportTask"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoPlugin"}, {"methodBody": ["METHOD_START", "{", "Configuration   agentConf    =    project . getConfigurations (  )  . create ( JacocoPlugin . AGENT _ CONFIGURATION _ NAME )  ;", "agentConf . setVisible ( false )  ;", "agentConf . setTransitive ( true )  ;", "agentConf . setDescription (  \" The   Jacoco   agent   to   use   to   get   coverage   data .  \"  )  ;", "Configuration   antConf    =    project . getConfigurations (  )  . create ( JacocoPlugin . ANT _ CONFIGURATION _ NAME )  ;", "antConf . setVisible ( false )  ;", "antConf . setTransitive ( true )  ;", "antConf . setDescription (  \" The   Jacoco   ant   tasks   to   use   to   get   execute   Gradle   tasks .  \"  )  ;", "}", "METHOD_END"], "methodName": ["addJacocoConfigurations"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoPlugin"}, {"methodBody": ["METHOD_START", "{", "project . getPluginManager (  )  . apply ( ReportingBasePlugin . class )  ;", "this . project    =    project ;", "addJacocoConfigurations (  )  ;", "JacocoAgentJar   agent    =    instantiator . newInstance ( JacocoAgentJar . class ,    project )  ;", "Extension   extension    =    project . getExtensions (  )  . create (  . PLUGIN _ EXTENSION _ NAME ,    Extension . class ,    project ,    agent )  ;", "extension . setToolVersion (  . DEFAULT _ JACOCO _ VERSION )  ;", "final   ReportingExtension   reportingExtension    =     (  ( ReportingExtension )     ( project . getExtensions (  )  . getByName ( NAME )  )  )  ;", "extension . setReportsDir ( project . provider ( new   Callable < File >  (  )     {", "@ Override", "public   File   call (  )    throws   Exception    {", "return   reportingExtension . file (  \" jacoco \"  )  ;", "}", "}  )  )  ;", "configureAgentDependencies ( agent ,    extension )  ;", "configureTaskClasspathDefaults ( extension )  ;", "applyToDefaultTasks ( extension )  ;", "configureDefaultOutputPathForJacocoMerge (  )  ;", "configureJacocoReportsDefaults ( extension )  ;", "addDefaultReportAndCoverageVerificationTasks ( extension )  ;", "}", "METHOD_END"], "methodName": ["apply"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoPlugin"}, {"methodBody": ["METHOD_START", "{", "project . getTasks (  )  . withType ( Test . class ,    new   Action < Test >  (  )     {", "@ Override", "public   void   execute ( Test   task )     {", "extension . applyTo ( task )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["applyToDefaultTasks"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoPlugin"}, {"methodBody": ["METHOD_START", "{", "final   Configuration   config    =    project . getConfigurations (  )  . getAt ( JacocoPlugin . AGENT _ CONFIGURATION _ NAME )  ;", "jacocoAgentJar . setAgentConf ( config )  ;", "config . defaultDependencies ( new   Action < DependencySet >  (  )     {", "@ Override", "public   void   execute ( DependencySet   dependencies )     {", "dependencies . add ( project . getDependencies (  )  . create (  (  \" jacoco : agent :  \"     +     ( extension . getToolVersion (  )  )  )  )  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureAgentDependencies"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoPlugin"}, {"methodBody": ["METHOD_START", "{", "return   project . getTasks (  )  . withType ( JacocoMerge . class ,    new   Action < JacocoMerge >  (  )     {", "@ Override", "public   void   execute ( final   JacocoMerge   task )     {", "task . setDestinationFile ( project . provider ( new   Callable < File >  (  )     {", "@ Override", "public   File   call (  )    throws   Exception    {", "return   new   File ( project . getBuildDir (  )  ,     (  (  \"  / jacoco /  \"     +     ( task . getName (  )  )  )     +     \"  . exec \"  )  )  ;", "}", "}  )  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureDefaultOutputPathForJacocoMerge"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoPlugin"}, {"methodBody": ["METHOD_START", "{", "reportTask . getReports (  )  . all ( new   Action < ConfigurableReport >  (  )     {", "@ Override", "public   void   execute ( final   ConfigurableReport   report )     {", "report . setEnabled ( project . provider ( new   Callable < Boolean >  (  )     {", "@ Override", "public   Boolean   call (  )    throws   Exception    {", "return   report . getName (  )  . equals (  \" html \"  )  ;", "}", "}  )  )  ;", "if    ( report . getOutputType (  )  . equals ( DIRECTORY )  )     {", "report . setDestination ( project . provider ( new   Callable < File >  (  )     {", "@ Override", "public   File   call (  )    throws   Exception    {", "return   new   File ( extension . getReportsDir (  )  ,     (  (  ( reportTask . getName (  )  )     +     \"  /  \"  )     +     ( report . getName (  )  )  )  )  ;", "}", "}  )  )  ;", "} else    {", "report . setDestination ( project . provider ( new   Callable < File >  (  )     {", "@ Override", "public   File   call (  )    throws   Exception    {", "return   new   File ( extension . getReportsDir (  )  ,     (  (  (  (  ( reportTask . getName (  )  )     +     \"  /  \"  )     +     ( reportTask . getName (  )  )  )     +     \"  .  \"  )     +     ( report . getName (  )  )  )  )  ;", "}", "}  )  )  ;", "}", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureJacocoReportDefaults"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoPlugin"}, {"methodBody": ["METHOD_START", "{", "project . getTasks (  )  . withType ( JacocoReport . class ,    new   Action < JacocoReport >  (  )     {", "@ Override", "public   void   execute ( JacocoReport   reportTask )     {", "configureJacocoReportDefaults ( extension ,    reportTask )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureJacocoReportsDefaults"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoPlugin"}, {"methodBody": ["METHOD_START", "{", "final   Configuration   config    =    this . project . getConfigurations (  )  . getAt ( JacocoPlugin . ANT _ CONFIGURATION _ NAME )  ;", "project . getTasks (  )  . withType ( JacocoBase . class ,    new   Action < JacocoBase >  (  )     {", "@ Override", "public   void   execute ( JacocoBase   task )     {", "task . setJacocoClasspath ( config )  ;", "}", "}  )  ;", "config . defaultDependencies ( new   Action < DependencySet >  (  )     {", "@ Override", "public   void   execute ( DependencySet   dependencies )     {", "dependencies . add ( project . getDependencies (  )  . create (  (  \" jacoco : ant :  \"     +     ( extension . getToolVersion (  )  )  )  )  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureTaskClasspathDefaults"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoPlugin"}, {"methodBody": ["METHOD_START", "{", "final   String   taskName    =    task . getName (  )  ;", ". LOGGER . debug (  (  \" Applying   Jacoco   to    \"     +    taskName )  )  ;", "final   JacocoTaskExtension   extension    =    task . getExtensions (  )  . create (  . TASK _ EXTENSION _ NAME ,    JacocoTaskExtension . class ,    project ,    agent ,    task )  ;", "extension . setDestinationFile ( project . provider ( new   Callable < File >  (  )     {", "@ Override", "public   File   call (  )    throws   Exception    {", "return   project . file (  (  (  (  ( String . valueOf ( project . getBuildDir (  )  )  )     +     \"  / jacoco /  \"  )     +    taskName )     +     \"  . exec \"  )  )  ;", "}", "}  )  )  ;", "task . getJvmArgumentProviders (  )  . add ( new    . JacocoAgent ( extension )  )  ;", "task . getOutputs (  )  . doNotCacheIf (  \" JaCoCo   configured   to   not   produce   its   output   as   a   file \"  ,    new   Spec < Task >  (  )     {", "@ Override", "public   boolean   isSatisfiedBy ( Task   element )     {", "return    ( extension . isEnabled (  )  )     &  &     (  ( extension . getOutput (  )  )     !  =     ( JacocoTaskExtension . Output . FILE )  )  ;", "}", "}  )  ;", "task . getOutputs (  )  . doNotCacheIf (  \" JaCoCo   agent   configured   with    ` append    =    true `  \"  ,    new   Spec < Task >  (  )     {", "@ Override", "public   boolean   isSatisfiedBy ( Task   element )     {", "return    ( extension . isEnabled (  )  )     &  &     ( extension . isAppend (  )  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["applyTo"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoPluginExtension"}, {"methodBody": ["METHOD_START", "{", "(  ( TaskCollection )     ( tasks )  )  . withType ( JavaForkOptions . class ,    new   Action < T >  (  )     {", "@ Override", "public   void   execute ( T   task )     {", "applyTo ( task )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["applyTo"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoPluginExtension"}, {"methodBody": ["METHOD_START", "{", "return   reportsDir . get (  )  ;", "}", "METHOD_END"], "methodName": ["getReportsDir"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoPluginExtension"}, {"methodBody": ["METHOD_START", "{", "return   toolVersion ;", "}", "METHOD_END"], "methodName": ["getToolVersion"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoPluginExtension"}, {"methodBody": ["METHOD_START", "{", "this . reportsDir . set ( reportsDir )  ;", "}", "METHOD_END"], "methodName": ["setReportsDir"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoPluginExtension"}, {"methodBody": ["METHOD_START", "{", "this . reportsDir . set ( reportsDir )  ;", "}", "METHOD_END"], "methodName": ["setReportsDir"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoPluginExtension"}, {"methodBody": ["METHOD_START", "{", "this . toolVersion    =    toolVersion ;", "}", "METHOD_END"], "methodName": ["setToolVersion"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoPluginExtension"}, {"methodBody": ["METHOD_START", "{", "return   address ;", "}", "METHOD_END"], "methodName": ["getAddress"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoTaskExtension"}, {"methodBody": ["METHOD_START", "{", "return   agent . getAgentConf (  )  ;", "}", "METHOD_END"], "methodName": ["getAgentClasspath"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoTaskExtension"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   builder    =    new   StringBuilder (  )  ;", ". ArgumentAppender   argument    =    new    . ArgumentAppender ( builder ,    task . getWorkingDir (  )  )  ;", "builder . append (  \"  - javaagent :  \"  )  ;", "builder . append ( RelativePathUtil . relativePath ( task . getWorkingDir (  )  ,    agent . getJar (  )  )  )  ;", "builder . append (  '  =  '  )  ;", "argument . append (  \" destfile \"  ,    getDestinationFile (  )  )  ;", "argument . append (  \" append \"  ,    isAppend (  )  )  ;", "argument . append (  \" includes \"  ,    getIncludes (  )  )  ;", "argument . append (  \" excludes \"  ,    getExcludes (  )  )  ;", "argument . append (  \" exclclassloader \"  ,    getExcludeClassLoaders (  )  )  ;", "if    ( agent . supportsInclNoLocationClasses (  )  )     {", "argument . append (  \" inclnolocationclasses \"  ,    isIncludeNoLocationClasses (  )  )  ;", "}", "argument . append (  \" sessionid \"  ,    getSessionId (  )  )  ;", "argument . append (  \" dumponexit \"  ,    isDumpOnExit (  )  )  ;", "argument . append (  \" output \"  ,    getOutput (  )  . getAsArg (  )  )  ;", "argument . append (  \" address \"  ,    getAddress (  )  )  ;", "argument . append (  \" port \"  ,    getPort (  )  )  ;", "argument . append (  \" classdumpdir \"  ,    getClassDumpDir (  )  )  ;", "if    ( agent . supportsJmx (  )  )     {", "argument . append (  \" jmx \"  ,    isJmx (  )  )  ;", "}", "return   builder . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getAsJvmArg"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoTaskExtension"}, {"methodBody": ["METHOD_START", "{", "return   classDumpDir ;", "}", "METHOD_END"], "methodName": ["getClassDumpDir"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoTaskExtension"}, {"methodBody": ["METHOD_START", "{", "return   destinationFile . getOrNull (  )  ;", "}", "METHOD_END"], "methodName": ["getDestinationFile"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoTaskExtension"}, {"methodBody": ["METHOD_START", "{", "return   excludeClassLoaders ;", "}", "METHOD_END"], "methodName": ["getExcludeClassLoaders"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoTaskExtension"}, {"methodBody": ["METHOD_START", "{", "return   excludes ;", "}", "METHOD_END"], "methodName": ["getExcludes"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoTaskExtension"}, {"methodBody": ["METHOD_START", "{", "return   includes ;", "}", "METHOD_END"], "methodName": ["getIncludes"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoTaskExtension"}, {"methodBody": ["METHOD_START", "{", "return   output ;", "}", "METHOD_END"], "methodName": ["getOutput"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoTaskExtension"}, {"methodBody": ["METHOD_START", "{", "return   port ;", "}", "METHOD_END"], "methodName": ["getPort"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoTaskExtension"}, {"methodBody": ["METHOD_START", "{", "return   sessionId ;", "}", "METHOD_END"], "methodName": ["getSessionId"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoTaskExtension"}, {"methodBody": ["METHOD_START", "{", "return   append ;", "}", "METHOD_END"], "methodName": ["isAppend"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoTaskExtension"}, {"methodBody": ["METHOD_START", "{", "return   dumpOnExit ;", "}", "METHOD_END"], "methodName": ["isDumpOnExit"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoTaskExtension"}, {"methodBody": ["METHOD_START", "{", "return   enabled ;", "}", "METHOD_END"], "methodName": ["isEnabled"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoTaskExtension"}, {"methodBody": ["METHOD_START", "{", "return   includeNoLocationClasses ;", "}", "METHOD_END"], "methodName": ["isIncludeNoLocationClasses"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoTaskExtension"}, {"methodBody": ["METHOD_START", "{", "return   jmx ;", "}", "METHOD_END"], "methodName": ["isJmx"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoTaskExtension"}, {"methodBody": ["METHOD_START", "{", "this . address    =    address ;", "}", "METHOD_END"], "methodName": ["setAddress"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoTaskExtension"}, {"methodBody": ["METHOD_START", "{", "this . append    =    append ;", "}", "METHOD_END"], "methodName": ["setAppend"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoTaskExtension"}, {"methodBody": ["METHOD_START", "{", "this . classDumpDir    =    classDumpDir ;", "}", "METHOD_END"], "methodName": ["setClassDumpDir"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoTaskExtension"}, {"methodBody": ["METHOD_START", "{", "this . destinationFile . set ( destinationFile )  ;", "}", "METHOD_END"], "methodName": ["setDestinationFile"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoTaskExtension"}, {"methodBody": ["METHOD_START", "{", "this . destinationFile . set ( destinationFile )  ;", "}", "METHOD_END"], "methodName": ["setDestinationFile"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoTaskExtension"}, {"methodBody": ["METHOD_START", "{", "this . dumpOnExit    =    dumpOnExit ;", "}", "METHOD_END"], "methodName": ["setDumpOnExit"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoTaskExtension"}, {"methodBody": ["METHOD_START", "{", "this . enabled    =    enabled ;", "}", "METHOD_END"], "methodName": ["setEnabled"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoTaskExtension"}, {"methodBody": ["METHOD_START", "{", "this . excludeClassLoaders    =    excludeClassLoaders ;", "}", "METHOD_END"], "methodName": ["setExcludeClassLoaders"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoTaskExtension"}, {"methodBody": ["METHOD_START", "{", "this . excludes    =    excludes ;", "}", "METHOD_END"], "methodName": ["setExcludes"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoTaskExtension"}, {"methodBody": ["METHOD_START", "{", "this . includeNoLocationClasses    =    includeNoLocationClasses ;", "}", "METHOD_END"], "methodName": ["setIncludeNoLocationClasses"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoTaskExtension"}, {"methodBody": ["METHOD_START", "{", "this . includes    =    includes ;", "}", "METHOD_END"], "methodName": ["setIncludes"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoTaskExtension"}, {"methodBody": ["METHOD_START", "{", "this . jmx    =    jmx ;", "}", "METHOD_END"], "methodName": ["setJmx"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoTaskExtension"}, {"methodBody": ["METHOD_START", "{", "this . output    =    output ;", "}", "METHOD_END"], "methodName": ["setOutput"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoTaskExtension"}, {"methodBody": ["METHOD_START", "{", "this . port    =    port ;", "}", "METHOD_END"], "methodName": ["setPort"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoTaskExtension"}, {"methodBody": ["METHOD_START", "{", "this . sessionId    =    sessionId ;", "}", "METHOD_END"], "methodName": ["setSessionId"], "fileName": "org.gradle.testing.jacoco.plugins.JacocoTaskExtension"}, {"methodBody": ["METHOD_START", "{", "return   jacocoClasspath ;", "}", "METHOD_END"], "methodName": ["getJacocoClasspath"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoBase"}, {"methodBody": ["METHOD_START", "{", "this . jacocoClasspath    =    jacocoClasspath ;", "}", "METHOD_END"], "methodName": ["setJacocoClasspath"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoBase"}, {"methodBody": ["METHOD_START", "{", "final   Spec < File >    fileExistsSpec    =    new   Spec < File >  (  )     {", "@ Override", "public   boolean   isSatisfiedBy ( File   file )     {", "return   file . exists (  )  ;", "}", "}  ;", "heckResult   checkResult    =    new   Antheck ( getAntBuilder (  )  )  . execute ( getlasspath (  )  ,    getProject (  )  . getName (  )  ,    getAllClassDirs (  )  . filter ( fileExistsSpec )  ,    getAllSourceDirs (  )  . filter ( fileExistsSpec )  ,    getExecutionData (  )  ,    getViolationRules (  )  )  ;", "if    (  !  ( checkResult . isSuccess (  )  )  )     {", "throw   new   GradleException ( checkResult . getFailureMessage (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["check"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoCoverageVerification"}, {"methodBody": ["METHOD_START", "{", "return   violationRules ;", "}", "METHOD_END"], "methodName": ["getViolationRules"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoCoverageVerification"}, {"methodBody": ["METHOD_START", "{", "configureAction . execute ( violationRules )  ;", "return   violationRules ;", "}", "METHOD_END"], "methodName": ["violationRules"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoCoverageVerification"}, {"methodBody": ["METHOD_START", "{", "if    (  ( executionData )     =  =    null )     {", "executionData    =    getProject (  )  . files ( files )  ;", "} else    {", "executionData    =    executionData . plus ( getProject (  )  . files ( files )  )  ;", "}", "}", "METHOD_END"], "methodName": ["executionData"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoMerge"}, {"methodBody": ["METHOD_START", "{", "for    ( Task   task    :    tasks )     {", "TaskExtension   extension    =    task . getExtensions (  )  . findByType ( TaskExtension . class )  ;", "if    ( extension    !  =    null )     {", "ConfigurableFileCollection   files    =    getProject (  )  . files ( extension . getDestinationFile (  )  )  ;", "files . builtBy ( task )  ;", "executionData ( files )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["executionData"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoMerge"}, {"methodBody": ["METHOD_START", "{", "tasks . all ( new   Action < Task >  (  )     {", "@ Override", "public   void   execute ( Task   task )     {", "executionData ( task )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["executionData"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoMerge"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getAntBuilder"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoMerge"}, {"methodBody": ["METHOD_START", "{", "return   destinationFile . get (  )  ;", "}", "METHOD_END"], "methodName": ["getDestinationFile"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoMerge"}, {"methodBody": ["METHOD_START", "{", "return   executionData ;", "}", "METHOD_END"], "methodName": ["getExecutionData"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoMerge"}, {"methodBody": ["METHOD_START", "{", "new   AntJacocoMerge ( getAntBuilder (  )  )  . execute ( getJacocoClasspath (  )  ,    getExecutionData (  )  ,    getDestinationFile (  )  )  ;", "}", "METHOD_END"], "methodName": ["merge"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoMerge"}, {"methodBody": ["METHOD_START", "{", "this . destinationFile . set ( destinationFile )  ;", "}", "METHOD_END"], "methodName": ["setDestinationFile"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoMerge"}, {"methodBody": ["METHOD_START", "{", "this . destinationFile . set ( destinationFile )  ;", "}", "METHOD_END"], "methodName": ["setDestinationFile"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoMerge"}, {"methodBody": ["METHOD_START", "{", "this . executionData    =    executionData ;", "}", "METHOD_END"], "methodName": ["setExecutionData"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoMerge"}, {"methodBody": ["METHOD_START", "{", "final   Spec < File >    fileExistsSpec    =    new   Spec < File >  (  )     {", "@ Override", "public   boolean   isSatisfiedBy ( File   file )     {", "return   file . exists (  )  ;", "}", "}  ;", "new   Ant ( getAntBuilder (  )  )  . execute ( getJacocoClasspath (  )  ,    getProject (  )  . getName (  )  ,    getAllClassDirs (  )  . filter ( fileExistsSpec )  ,    getAllSourceDirs (  )  . filter ( fileExistsSpec )  ,    getExecutionData (  )  ,    getReports (  )  )  ;", "}", "METHOD_END"], "methodName": ["generate"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoReport"}, {"methodBody": ["METHOD_START", "{", "additionalClassDirs ( getProject (  )  . files ( Arrays . asList ( dirs )  )  )  ;", "}", "METHOD_END"], "methodName": ["additionalClassDirs"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoReportBase"}, {"methodBody": ["METHOD_START", "{", "if    (  ( additionalClassDirs )     =  =    null )     {", "additionalClassDirs    =    dirs ;", "} else    {", "additionalClassDirs    =    additionalClassDirs . plus ( dirs )  ;", "}", "}", "METHOD_END"], "methodName": ["additionalClassDirs"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoReportBase"}, {"methodBody": ["METHOD_START", "{", "additionalSourceDirs ( getProject (  )  . files ( Arrays . asList ( dirs )  )  )  ;", "}", "METHOD_END"], "methodName": ["additionalSourceDirs"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoReportBase"}, {"methodBody": ["METHOD_START", "{", "if    (  ( additionalSourceDirs )     =  =    null )     {", "additionalSourceDirs    =    dirs ;", "} else    {", "additionalSourceDirs    =    additionalSourceDirs . plus ( dirs )  ;", "}", "}", "METHOD_END"], "methodName": ["additionalSourceDirs"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoReportBase"}, {"methodBody": ["METHOD_START", "{", "if    (  ( executionData )     =  =    null )     {", "executionData    =    getProject (  )  . files ( files )  ;", "} else    {", "executionData    =    executionData . plus ( getProject (  )  . files ( files )  )  ;", "}", "}", "METHOD_END"], "methodName": ["executionData"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoReportBase"}, {"methodBody": ["METHOD_START", "{", "for    ( Task   task    :    tasks )     {", "final   TaskExtension   extension    =    task . getExtensions (  )  . findByType ( TaskExtension . class )  ;", "if    ( extension    !  =    null )     {", "executionData ( new   Callable < File >  (  )     {", "@ Override", "public   File   call (  )     {", "return   extension . getDestinationFile (  )  ;", "}", "}  )  ;", "mustRunAfter ( task )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["executionData"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoReportBase"}, {"methodBody": ["METHOD_START", "{", "tasks . all ( new   Action < Task >  (  )     {", "@ Override", "public   void   execute ( Task   task )     {", "executionData ( task )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["executionData"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoReportBase"}, {"methodBody": ["METHOD_START", "{", "return   additionalClassDirs ;", "}", "METHOD_END"], "methodName": ["getAdditionalClassDirs"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoReportBase"}, {"methodBody": ["METHOD_START", "{", "return   additionalSourceDirs ;", "}", "METHOD_END"], "methodName": ["getAdditionalSourceDirs"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoReportBase"}, {"methodBody": ["METHOD_START", "{", "FileCollection   additionalDirs    =    getAdditionalClassDirs (  )  ;", "if    ( additionalDirs    =  =    null )     {", "return   classDirectories ;", "}", "return   classDirectories . plus ( getAdditionalClassDirs (  )  )  ;", "}", "METHOD_END"], "methodName": ["getAllClassDirs"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoReportBase"}, {"methodBody": ["METHOD_START", "{", "FileCollection   additionalDirs    =    getAdditionalSourceDirs (  )  ;", "if    ( additionalDirs    =  =    null )     {", "return   sourceDirectories ;", "}", "return   sourceDirectories . plus ( getAdditionalSourceDirs (  )  )  ;", "}", "METHOD_END"], "methodName": ["getAllSourceDirs"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoReportBase"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getAntBuilder"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoReportBase"}, {"methodBody": ["METHOD_START", "{", "return   classDirectories ;", "}", "METHOD_END"], "methodName": ["getClassDirectories"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoReportBase"}, {"methodBody": ["METHOD_START", "{", "return   executionData ;", "}", "METHOD_END"], "methodName": ["getExecutionData"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoReportBase"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getInstantiator"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoReportBase"}, {"methodBody": ["METHOD_START", "{", "return   sourceDirectories ;", "}", "METHOD_END"], "methodName": ["getSourceDirectories"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoReportBase"}, {"methodBody": ["METHOD_START", "{", "this . additionalClassDirs    =    additionalClassDirs ;", "}", "METHOD_END"], "methodName": ["setAdditionalClassDirs"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoReportBase"}, {"methodBody": ["METHOD_START", "{", "this . additionalSourceDirs    =    additionalSourceDirs ;", "}", "METHOD_END"], "methodName": ["setAdditionalSourceDirs"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoReportBase"}, {"methodBody": ["METHOD_START", "{", "this . classDirectories    =    classDirectories ;", "}", "METHOD_END"], "methodName": ["setClassDirectories"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoReportBase"}, {"methodBody": ["METHOD_START", "{", "this . executionData    =    executionData ;", "}", "METHOD_END"], "methodName": ["setExecutionData"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoReportBase"}, {"methodBody": ["METHOD_START", "{", "this . sourceDirectories    =    sourceDirectories ;", "}", "METHOD_END"], "methodName": ["setSourceDirectories"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoReportBase"}, {"methodBody": ["METHOD_START", "{", "getProject (  )  . afterEvaluate ( new   Action < Project >  (  )     {", "@ Override", "public   void   execute ( Project   project )     {", "for    ( SourceSet   sourceSet    :    sourceSets )     {", "if    (  ( getSourceDirectories (  )  )     =  =    null )     {", "setSourceDirectories ( getProject (  )  . files ( sourceSet . getAllJava (  )  . getSrcDirs (  )  )  )  ;", "} else    {", "setSourceDirectories ( getSourceDirectories (  )  . plus ( getProject (  )  . files ( sourceSet . getAllJava (  )  . getSrcDirs (  )  )  )  )  ;", "}", "if    (  ( getClassDirectories (  )  )     =  =    null )     {", "setClassDirectories ( sourceSet . getOutput (  )  )  ;", "} else    {", "setClassDirectories ( getClassDirectories (  )  . plus ( sourceSet . getOutput (  )  )  )  ;", "}", "}", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["sourceSets"], "fileName": "org.gradle.testing.jacoco.tasks.JacocoReportBase"}]