[{"methodBody": ["METHOD_START", "{", "return   new   ContainedVersionAnalyzer (  )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultAnalyzerFactory"}, {"methodBody": ["METHOD_START", "{", "ContainedVersionAnalyzer   analyzer    =    new   DefaultAnalyzerFactory (  )  . create (  )  ;", "assertNotNull ( analyzer )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultAnalyzerFactoryTest"}, {"methodBody": ["METHOD_START", "{", "List < String >    parts    =    createListFromPropertyString ( existingValues )  ;", "if    ( parts    =  =    null )     {", "return   createPropertyStringFromArray ( toPrepend )  ;", "} else    {", "parts . addAll ( Arrays . asList ( toPrepend )  )  ;", "return   createPropertyStringFromList ( parts )  ;", "}", "}", "METHOD_END"], "methodName": ["appendValues"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "return    ( propertyString    =  =    null )     |  |     (  ( propertyString . length (  )  )     =  =     0  )     ?    null    :    new   LinkedList < String >  ( Arrays . asList ( propertyString . split (  \"  ,  \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createListFromPropertyString"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "return   createPropertyStringFromList ( Arrays . asList ( valueList )  )  ;", "}", "METHOD_END"], "methodName": ["createPropertyStringFromArray"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "return    ( valueList    =  =    null )     |  |     ( valueList . isEmpty (  )  )     ?    null    :    CollectionUtils . join (  \"  ,  \"  ,    valueList )  ;", "}", "METHOD_END"], "methodName": ["createPropertyStringFromList"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "return   analyzerFactory ;", "}", "METHOD_END"], "methodName": ["getAnalyzerFactory"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "return   classesDir ;", "}", "METHOD_END"], "methodName": ["getClassesDir"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "return   classpath ;", "}", "METHOD_END"], "methodName": ["getClasspath"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "return   description ;", "}", "METHOD_END"], "methodName": ["getDescription"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "return   docURL ;", "}", "METHOD_END"], "methodName": ["getDocURL"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    List < String >  >    instructions    =    new   HashMap < String ,    List < String >  >  (  )  ;", "instructions . putAll ( unmodelledInstructions )  ;", "instructions . putAll ( getModelledInstructions (  )  )  ;", "return   instructions ;", "}", "METHOD_END"], "methodName": ["getInstructions"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "return   license ;", "}", "METHOD_END"], "methodName": ["getLicense"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    List < String >  >    modelledInstructions    =    new   HashMap < String ,    List < String >  >  (  )  ;", "modelledInstructions . put ( BUNDLE _ SYMBOLICNAME ,    createListFromPropertyString ( symbolicName )  )  ;", "modelledInstructions . put ( BUNDLE _ NAME ,    createListFromPropertyString ( name )  )  ;", "modelledInstructions . put ( BUNDLE _ VERSION ,    createListFromPropertyString ( version )  )  ;", "modelledInstructions . put ( BUNDLE _ DESCRIPTION ,    createListFromPropertyString ( description )  )  ;", "modelledInstructions . put ( BUNDLE _ LICENSE ,    createListFromPropertyString ( license )  )  ;", "modelledInstructions . put ( BUNDLE _ VENDOR ,    createListFromPropertyString ( vendor )  )  ;", "modelledInstructions . put ( BUNDLE _ DOCURL ,    createListFromPropertyString ( docURL )  )  ;", "return   CollectionUtils . filter ( modelledInstructions ,    new   specs . Spec < Map . Entry < String ,    List < String >  >  >  (  )     {", "public   boolean   isSatisfiedBy ( Map . Entry < String ,    List < String >  >    element )     {", "return    ( element . getValue (  )  )     !  =    null ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["getModelledInstructions"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "return   symbolicName ;", "}", "METHOD_END"], "methodName": ["getSymbolicName"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "return   vendor ;", "}", "METHOD_END"], "methodName": ["getVendor"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "return   version ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( maybeAppendModelledIruction ( name ,    values )  )  )     {", "if    (  ( unmodelledIructioget ( name )  )     =  =    null )     {", "unmodelledIructioput ( name ,    new   ArrayList < String >  (  )  )  ;", "}", "unmodelledIructioget ( name )  . addAll ( Arrays . asList ( values )  )  ;", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["instruction"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( maybePrependModelledIruction ( name ,    values )  )  )     {", "if    (  ( unmodelledIructioget ( name )  )     =  =    null )     {", "unmodelledIructioput ( name ,    new   ArrayList < String >  (  )  )  ;", "}", "unmodelledIructioget ( name )  . addAll (  0  ,    Arrays . asList ( values )  )  ;", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["instructionFirst"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( maybeSetModelledIruction ( name ,    values )  )  )     {", "if    (  (  ( values . length )     =  =     0  )     |  |     (  (  ( values . length )     =  =     1  )     &  &     (  ( values [  0  ]  )     =  =    null )  )  )     {", "unmodelledIructioremove ( name )  ;", "} else    {", "if    (  ( unmodelledIructioget ( name )  )     =  =    null )     {", "unmodelledIructioput ( name ,    new   ArrayList < String >  (  )  )  ;", "}", "List < String >    iructioorName    =    unmodelledIructioget ( name )  ;", "iructioorName . clear (  )  ;", "CollectioaddAll ( iructioorName ,    values )  ;", "}", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["instructionReplace"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "if    ( instructionName . equals ( BUNDLE _ SYMBOLICNAME )  )     {", "return   createListFromPropertyString ( getSymbolicName (  )  )  ;", "} else", "if    ( instructionName . equals ( Analyzer . BUNDLE _ NAME )  )     {", "return   createListFromPropertyString ( getName (  )  )  ;", "} else", "if    ( instructionName . equals ( Analyzer . BUNDLE _ VERSION )  )     {", "return   createListFromPropertyString ( getVersion (  )  )  ;", "} else", "if    ( instructionName . equals ( Analyzer . BUNDLE _ DESCRIPTION )  )     {", "return   createListFromPropertyString ( getDescription (  )  )  ;", "} else", "if    ( instructionName . equals ( Analyzer . BUNDLE _ LICENSE )  )     {", "return   createListFromPropertyString ( getLicense (  )  )  ;", "} else", "if    ( instructionName . equals ( Analyzer . BUNDLE _ VENDOR )  )     {", "return   createListFromPropertyString ( getVendor (  )  )  ;", "} else", "if    ( instructionName . equals ( Analyzer . BUNDLE _ DOCURL )  )     {", "return   createListFromPropertyString ( getDocURL (  )  )  ;", "} else    {", "return   unmodelledInstructions . get ( instructionName )  ;", "}", "}", "METHOD_END"], "methodName": ["instructionValue"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "if    ( name . equals ( BUNDLE _ SYMBOLICNAME )  )     {", "setSymbolicName ( appendValues ( getSymbolicName (  )  ,    values )  )  ;", "return   true ;", "} else", "if    ( name . equals ( Ayzer . BUNDLE _ NAME )  )     {", "setName ( appendValues ( getName (  )  ,    values )  )  ;", "return   true ;", "} else", "if    ( name . equals ( Ayzer . BUNDLE _ VERSION )  )     {", "setVersion ( appendValues ( getVersion (  )  ,    values )  )  ;", "return   true ;", "} else", "if    ( name . equals ( Ayzer . BUNDLE _ DESCRIPTION )  )     {", "setDescription ( appendValues ( getDescription (  )  ,    values )  )  ;", "return   true ;", "} else", "if    ( name . equals ( Ayzer . BUNDLE _ LICENSE )  )     {", "setLicense ( appendValues ( getLicense (  )  ,    values )  )  ;", "return   true ;", "} else", "if    ( name . equals ( Ayzer . BUNDLE _ VENDOR )  )     {", "setVendor ( appendValues ( getVendor (  )  ,    values )  )  ;", "return   true ;", "} else", "if    ( name . equals ( Ayzer . BUNDLE _ DOCURL )  )     {", "setDocURL ( appendValues ( getDocURL (  )  ,    values )  )  ;", "return   true ;", "} else    {", "return   false ;", "}", "}", "METHOD_END"], "methodName": ["maybeAppendModelledInstruction"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "if    ( name . equals ( BUNDLE _ SYMBOLICNAME )  )     {", "setSymbolicName ( prependValues ( getSymbolicName (  )  ,    values )  )  ;", "return   true ;", "} else", "if    ( name . equals ( Ayzer . BUNDLE _ NAME )  )     {", "setName ( prependValues ( getName (  )  ,    values )  )  ;", "return   true ;", "} else", "if    ( name . equals ( Ayzer . BUNDLE _ VERSION )  )     {", "setVersion ( prependValues ( getVersion (  )  ,    values )  )  ;", "return   true ;", "} else", "if    ( name . equals ( Ayzer . BUNDLE _ DESCRIPTION )  )     {", "setDescription ( prependValues ( getDescription (  )  ,    values )  )  ;", "return   true ;", "} else", "if    ( name . equals ( Ayzer . BUNDLE _ LICENSE )  )     {", "setLicense ( prependValues ( getLicense (  )  ,    values )  )  ;", "return   true ;", "} else", "if    ( name . equals ( Ayzer . BUNDLE _ VENDOR )  )     {", "setVendor ( prependValues ( getVendor (  )  ,    values )  )  ;", "return   true ;", "} else", "if    ( name . equals ( Ayzer . BUNDLE _ DOCURL )  )     {", "setDocURL ( prependValues ( getDocURL (  )  ,    values )  )  ;", "return   true ;", "} else    {", "return   false ;", "}", "}", "METHOD_END"], "methodName": ["maybePrependModelledInstruction"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "if    ( name . equals ( BUNDLE _ SYMBOLICNAME )  )     {", "setSymbolicName ( createPropertyStringFromArray ( values )  )  ;", "return   true ;", "} else", "if    ( name . equals ( Ayzer . BUNDLE _ NAME )  )     {", "setName ( createPropertyStringFromArray ( values )  )  ;", "return   true ;", "} else", "if    ( name . equals ( Ayzer . BUNDLE _ VERSION )  )     {", "setVersion ( createPropertyStringFromArray ( values )  )  ;", "return   true ;", "} else", "if    ( name . equals ( Ayzer . BUNDLE _ DESCRIPTION )  )     {", "setDescription ( createPropertyStringFromArray ( values )  )  ;", "return   true ;", "} else", "if    ( name . equals ( Ayzer . BUNDLE _ LICENSE )  )     {", "setLicense ( createPropertyStringFromArray ( values )  )  ;", "return   true ;", "} else", "if    ( name . equals ( Ayzer . BUNDLE _ VENDOR )  )     {", "setVendor ( createPropertyStringFromArray ( values )  )  ;", "return   true ;", "} else", "if    ( name . equals ( Ayzer . BUNDLE _ DOCURL )  )     {", "setDocURL ( createPropertyStringFromArray ( values )  )  ;", "return   true ;", "} else    {", "return   false ;", "}", "}", "METHOD_END"], "methodName": ["maybeSetModelledInstruction"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "List < String >    parts    =    createListFromPropertyString ( existingValues )  ;", "if    ( parts    =  =    null )     {", "return   createPropertyStringFromArray ( toPrepend )  ;", "} else    {", "parts . addAll (  0  ,    Arrays . asList ( toPrepend )  )  ;", "return   createPropertyStringFromList ( parts )  ;", "}", "}", "METHOD_END"], "methodName": ["prependValues"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "this . analyzerFactory    =    analyzerFactory ;", "}", "METHOD_END"], "methodName": ["setAnalyzerFactory"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "for    ( Map . Entry < String ,    Object >    attribute    :    getAttributes (  )  . entrySet (  )  )     {", "String   key    =    attribute . getKey (  )  ;", "if    (  !  (  \"  - Version \"  . equals ( key )  )  )     {", "analyzer . setProperty ( key ,    attribute . getValue (  )  . toString (  )  )  ;", "}", "}", "Map < String ,    List < String >  >    instructions    =    getInstructions (  )  ;", "Set < String >    instructionNames    =    instructions . keySet (  )  ;", "if    (  !  ( instructionNames . contains ( IMPORT _ PACKAGE )  )  )     {", "analyzer . setProperty ( IMPORT _ PACKAGE ,     \"  *  ,     ! *  ,     ! *  ,     ! *  ,     ! *  ,     ! *  \"  )  ;", "}", "if    (  !  ( instructionNames . contains ( BUNDLE _ VERSION )  )  )     {", "analyzer . setProperty ( BUNDLE _ VERSION ,    getVersion (  )  )  ;", "}", "if    (  !  ( instructionNames . contains ( BUNDLE _ NAME )  )  )     {", "analyzer . setProperty ( BUNDLE _ NAME ,    getName (  )  )  ;", "}", "if    (  !  ( instructionNames . contains ( BUNDLE _ SYMBOLICNAME )  )  )     {", "analyzer . setProperty ( BUNDLE _ SYMBOLICNAME ,    getSymbolicName (  )  )  ;", "}", "if    (  !  ( instructionNames . contains ( EXPORT _ PACKAGE )  )  )     {", "analyzer . setProperty ( EXPORT _ PACKAGE ,     (  \"  *  ;  - noimport :  = false ; version =  \"     +     ( getVersion (  )  )  )  )  ;", "}", "for    ( String   instructionName    :    instructionNames )     {", "String   list    =    createPropertyStringFromList ( instructionValue ( instructionName )  )  ;", "if    (  ( list    !  =    null )     &  &     (  ( list . length (  )  )     >     0  )  )     {", "analyzer . setProperty ( instructionName ,    list )  ;", "}", "}", "analyzer . setJar ( getClassesDir (  )  )  ;", "analyzer . setClasspath ( getClasspath (  )  . getFiles (  )  . toArray ( new   File [  0  ]  )  )  ;", "}", "METHOD_END"], "methodName": ["setAnalyzerProperties"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "this . classesDir    =    classesDir ;", "}", "METHOD_END"], "methodName": ["setClassesDir"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "this . classpath    =    classpath ;", "}", "METHOD_END"], "methodName": ["setClasspath"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "this . description    =    description ;", "}", "METHOD_END"], "methodName": ["setDescription"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "this . docURL    =    docURL ;", "}", "METHOD_END"], "methodName": ["setDocURL"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "this . license    =    license ;", "}", "METHOD_END"], "methodName": ["setLicense"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "this . symbolicName    =    symbolicName ;", "}", "METHOD_END"], "methodName": ["setSymbolicName"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "this . vendor    =    vendor ;", "}", "METHOD_END"], "methodName": ["setVendor"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "this . version    =    version ;", "}", "METHOD_END"], "methodName": ["setVersion"], "fileName": "org.gradle.api.internal.plugins.osgi.DefaultOsgiManifest"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   buf    =    new   StringBuilder (  )  ;", "while    ( st . hasMoreTokens (  )  )     {", "String   token    =    st . nextToken (  )  ;", "if    (  . QUALIFIER . matcher ( token )  . matches (  )  )     {", "buf . append ( token )  ;", "} else    {", "buf . append (  \"  _  \"  )  ;", "}", "}", "return   buf . toString (  )  ;", "}", "METHOD_END"], "methodName": ["fillQualifier"], "fileName": "org.gradle.api.internal.plugins.osgi.OsgiHelper"}, {"methodBody": ["METHOD_START", "{", "return    ( groupId    +     \"  .  \"  )     +    artifactId ;", "}", "METHOD_END"], "methodName": ["getBundleSymbolicName"], "fileName": "org.gradle.api.internal.plugins.osgi.OsgiHelper"}, {"methodBody": ["METHOD_START", "{", "String   group    =    project . getGroup (  )  . toString (  )  ;", "String   archiveBaseName    =    project . getConvention (  )  . getP ( BasePConvention . class )  . getArchivesBaseName (  )  ;", "if    ( archiveBaseName . startsWith ( group )  )     {", "return   archiveBaseName ;", "}", "int   i    =    group . lastIndexOf (  '  .  '  )  ;", "String   lastSection    =    group . substring (  (  +  + i )  )  ;", "if    ( archiveBaseName . equals ( lastSection )  )     {", "return   group ;", "}", "if    ( archiveBaseName . startsWith ( lastSection )  )     {", "String   artifactId    =    archiveBaseName . substring ( lastSection . length (  )  )  ;", "if    ( Character . isLetterOrDigit ( artifactId . charAt (  0  )  )  )     {", "return   getBundleSymbolicName ( group ,    artifactId )  ;", "} else    {", "return   getBundleSymbolicName ( group ,    artifactId . substring (  1  )  )  ;", "}", "}", "return   getBundleSymbolicName ( group ,    archiveBaseName )  ;", "}", "METHOD_END"], "methodName": ["getBundleSymbolicName"], "fileName": "org.gradle.api.internal.plugins.osgi.OsgiHelper"}, {"methodBody": ["METHOD_START", "{", "final   Matcher   m    =    OsgiHelper . OSGI _ VERSION _ PATTERN . matcher ( version )  ;", "if    ( m . matches (  )  )     {", "return   version ;", "}", "int   group    =     0  ;", "boolean   groupToken    =    true ;", "String [  ]    groups    =    new   String [  4  ]  ;", "groups [  0  ]     =     \"  0  \"  ;", "groups [  1  ]     =     \"  0  \"  ;", "groups [  2  ]     =     \"  0  \"  ;", "groups [  3  ]     =     \"  \"  ;", "StringTokenizer   st    =    new   StringTokenizer ( version ,     \"  ,  .  /  ;  \\  '  ?  :  \\  \\  |  =  +  -  _  *  &  ^  %  $  #  @  !  ~  \"  ,    true )  ;", "while    ( st . hasMoreTokens (  )  )     {", "String   token    =    st . nextToken (  )  ;", "if    ( groupToken )     {", "if    ( group    <     3  )     {", "if    ( OsgiHelper . ONLY _ NUMBERS . matcher ( token )  . matches (  )  )     {", "groups [  ( group +  +  )  ]     =    token ;", "groupToken    =    false ;", "} else    {", "groups [  3  ]     =    token    +     ( fillQualifier ( st )  )  ;", "}", "} else    {", "groups [  3  ]     =    token    +     ( fillQualifier ( st )  )  ;", "}", "} else    {", "if    (  \"  .  \"  . equals ( token )  )     {", "groupToken    =    true ;", "} else    {", "groups [  3  ]     =    fillQualifier ( st )  ;", "}", "}", "}", "String   ver    =     (  (  (  ( groups [  0  ]  )     +     \"  .  \"  )     +     ( groups [  1  ]  )  )     +     \"  .  \"  )     +     ( groups [  2  ]  )  ;", "String   result ;", "if    (  ( groups [  3  ]  . length (  )  )     >     0  )     {", "result    =     ( ver    +     \"  .  \"  )     +     ( groups [  3  ]  )  ;", "} else    {", "result    =    ver ;", "}", "if    (  !  ( OsgiHelper . OSGI _ VERSION _ PATTERN . matcher ( result )  . matches (  )  )  )     {", "throw   new   GradleException (  \" OSGi   plugin   unable   to   convert   version   to   a   compliant   version \"  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "org.gradle.api.internal.plugins.osgi.OsgiHelper"}, {"methodBody": ["METHOD_START", "{", "project . getPluginManager (  )  . apply ( JavaBasePlugin . class )  ;", "final   OsgiPluginConvention   osgiConvention    =    new   OsgiPluginConvention (  (  ( ProjectInternal )     ( project )  )  )  ;", "project . getConvention (  )  . getPlugins (  )  . put (  \" osgi \"  ,    osgiConvention )  ;", "project . getPlugins (  )  . withType ( JavaPlugin . class ,    new   Action < JavaPlugin >  (  )     {", "@ Override", "public   void   execute ( JavaPlugin   javaPlugin )     {", "Sync   prepareOsgiClasses    =    project . getTasks (  )  . create (  \" osgiClasses \"  ,    Sync . class )  ;", "FileCollection   classes    =    project . getConvention (  )  . getPlugin ( JavaPluginConvention . class )  . getSourceSets (  )  . getByName (  \" main \"  )  . getOutput (  )  . getClassesDirs (  )  ;", "File   singleClassesDirectory    =    new   File ( project . getBuildDir (  )  ,     \" osgi - classes \"  )  ;", "prepareOsgiClasses . setDescription (  \" Prepares   a   single   classes   directory   required   for   OSGi   analysis .  \"  )  ;", "prepareOsgiClasses . from ( classes )  ;", "prepareOsgiClasses . into ( singleClassesDirectory )  ;", "Jar   jarTask    =     (  ( Jar )     ( project . getTasks (  )  . getByName (  \" jar \"  )  )  )  ;", "jarTask . dependsOn ( prepareOsgiClasses )  ;", "OsgiManifest   osgiManifest    =    osgiConvention . osgiManifest (  )  ;", "osgiManifest . setClassesDir ( singleClassesDirectory )  ;", "osgiManifest . setClasspath ( project . getConfigurations (  )  . getByName (  \" runtime \"  )  )  ;", "jarTask . setManifest ( osgiManifest )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["apply"], "fileName": "org.gradle.api.plugins.osgi.OsgiPlugin"}, {"methodBody": ["METHOD_START", "{", "OsgiManifest   osgiManifest    =    project . getServices (  )  . get ( Instantiator . class )  . newInstance ( DefaultOsgiManifest . class ,    project . getFileResolver (  )  )  ;", "ConventionMapping   mapping    =     (  ( IConventionAware )     ( osgiManifest )  )  . getConventionMapping (  )  ;", "final   OsgiHelper   osgiHelper    =    new   OsgiHelper (  )  ;", "mapping . map (  \" version \"  ,    new   Callable < Object >  (  )     {", "public   Object   call (  )    throws   Exception    {", "return   osgiHelper . getVersion ( project . getVersion (  )  . toString (  )  )  ;", "}", "}  )  ;", "mapping . map (  \" name \"  ,    new   Callable < Object >  (  )     {", "public   Object   call (  )    throws   Exception    {", "return   project . getConvention (  )  . getPlugin ( Base . class )  . getArchivesBaseName (  )  ;", "}", "}  )  ;", "mapping . map (  \" symbolicName \"  ,    new   Callable < Object >  (  )     {", "public   Object   call (  )    throws   Exception    {", "return   osgiHelper . getBundleSymbolicName ( project )  ;", "}", "}  )  ;", "return   osgiManifest ;", "}", "METHOD_END"], "methodName": ["createDefaultOsgiManifest"], "fileName": "org.gradle.api.plugins.osgi.OsgiPluginConvention"}, {"methodBody": ["METHOD_START", "{", "return   osgiManifest ( Actions .  < OsgiManifest > doNothing (  )  )  ;", "}", "METHOD_END"], "methodName": ["osgiManifest"], "fileName": "org.gradle.api.plugins.osgi.OsgiPluginConvention"}, {"methodBody": ["METHOD_START", "{", "return   configure ( closure ,    createDefaultOsgiManifest (  )  )  ;", "}", "METHOD_END"], "methodName": ["osgiManifest"], "fileName": "org.gradle.api.plugins.osgi.OsgiPluginConvention"}, {"methodBody": ["METHOD_START", "{", "OsgiManifest   manifest    =    createDefaultOsgiManifest (  )  ;", "action . execute ( manifest )  ;", "return   manifest ;", "}", "METHOD_END"], "methodName": ["osgiManifest"], "fileName": "org.gradle.api.plugins.osgi.OsgiPluginConvention"}]