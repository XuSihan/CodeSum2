[{"methodBody": ["METHOD_START", "{", "return   location ;", "}", "METHOD_END"], "methodName": ["getLocation"], "fileName": "org.gradle.api.resources.ResourceException"}, {"methodBody": ["METHOD_START", "{", "ExternalResourceReadResult < T >    result    =    withContentIfPresent ( readAction )  ;", "if    ( result    =  =    null )     {", "throw   ResourceExceptions . getMissing ( getURI (  )  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["withContent"], "fileName": "org.gradle.internal.resource.AbstractExternalResource"}, {"methodBody": ["METHOD_START", "{", "ExternalResourceReadResult < Void >    result    =    writeToIfPresent ( destination )  ;", "if    ( result    =  =    null )     {", "throw   ResourceExceptions . getMissing ( getURI (  )  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["writeTo"], "fileName": "org.gradle.internal.resource.AbstractExternalResource"}, {"methodBody": ["METHOD_START", "{", "ExternalResourceReadBuildOperationType . Details   operationDetails    =    new   BuildOperationFiringExternalResourceDecorator . ReadOperationDetails ( resourceName . getUri (  )  )  ;", "return   BuildOperationDescriptor . displayName (  (  \" Download    \"     +     ( resourceName . getDisplayName (  )  )  )  )  . progressDisplayName ( resourceName . getShortDisplayName (  )  )  . details ( operationDetails )  ;", "}", "METHOD_END"], "methodName": ["createBuildOperationDetails"], "fileName": "org.gradle.internal.resource.BuildOperationFiringExternalResourceDecorator"}, {"methodBody": ["METHOD_START", "{", "buildOperationContext . setResult ( new   BuildOperationFiringExternalResourceDecorator . ReadOperationResult (  ( result    =  =    null    ?     0     :    result . getBytesRead (  )  )  )  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["result"], "fileName": "org.gradle.internal.resource.BuildOperationFiringExternalResourceDecorator"}, {"methodBody": ["METHOD_START", "{", "if    (  ( content )     =  =    null )     {", "content    =    getText (  )  ;", "}", "}", "METHOD_END"], "methodName": ["maybeFetch"], "fileName": "org.gradle.internal.resource.CachingTextResource"}, {"methodBody": ["METHOD_START", "{", "return   new   ExternalResourceName ( encodedRoot ,     (  ( this . path )     +    path )  )  ;", "}", "METHOD_END"], "methodName": ["append"], "fileName": "org.gradle.internal.resource.ExternalResourceName"}, {"methodBody": ["METHOD_START", "{", "for    ( int   pos    =     0  ;    pos    <     ( path . length (  )  )  ;  )     {", "int   end    =    path . indexOf (  '  /  '  ,    pos )  ;", "String   part ;", "if    ( end    <     0  )     {", "part    =    path . substring ( pos )  ;", "pos    =    path . length (  )  ;", "} else    {", "part    =    path . substring ( pos ,    end )  ;", "pos    =    end    +     1  ;", "}", "if    (  (  ( part . length (  )  )     =  =     0  )     |  |     ( part . equals (  \"  .  \"  )  )  )     {", "continue ;", "}", "if    ( part . equals (  \"  .  .  \"  )  )     {", "parts . remove (  (  ( parts . size (  )  )     -     1  )  )  ;", "continue ;", "}", "parts . add ( part )  ;", "}", "}", "METHOD_END"], "methodName": ["append"], "fileName": "org.gradle.internal.resource.ExternalResourceName"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   builder    =    new   StringBuilder (  )  ;", "for    (    i    =     0  ;    i    <     ( path . length (  )  )  ;    i +  +  )     {", "char   ch    =    path . charAt ( i )  ;", "if    (  (  (  ( ch    >  =     ' a '  )     &  &     ( ch    <  =     ' z '  )  )     |  |     (  ( ch    >  =     ' A '  )     &  &     ( ch    <  =     ' Z '  )  )  )     |  |     (  ( ch    >  =     '  0  '  )     &  &     ( ch    <  =     '  9  '  )  )  )     {", "builder . append ( ch )  ;", "} else", "if    (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  ( ch    =  =     '  /  '  )     |  |     ( ch    =  =     '  @  '  )  )     |  |     ( isPathSeg    &  &     ( ch    =  =     '  :  '  )  )  )     |  |     ( ch    =  =     '  .  '  )  )     |  |     ( ch    =  =     '  -  '  )  )     |  |     ( ch    =  =     '  _  '  )  )     |  |     ( ch    =  =     '  ~  '  )  )     |  |     ( ch    =  =     '  !  '  )  )     |  |     ( ch    =  =     '  $  '  )  )     |  |     ( ch    =  =     '  &  '  )  )     |  |     ( ch    =  =     '  \\  '  '  )  )     |  |     ( ch    =  =     '  (  '  )  )     |  |     ( ch    =  =     '  )  '  )  )     |  |     ( ch    =  =     '  *  '  )  )     |  |     ( ch    =  =     '  +  '  )  )     |  |     ( ch    =  =     '  ,  '  )  )     |  |     ( ch    =  =     '  ;  '  )  )     |  |     ( ch    =  =     '  =  '  )  )     {", "builder . append ( ch )  ;", "} else    {", "if    ( ch    <  =     1  2  7  )     {", "escapeByte ( ch ,    builder )  ;", "} else", "if    ( ch    <  =     2  0  4  7  )     {", "escapeByte (  (  1  9  2     |     (  ( ch    >  >     6  )     &     3  1  )  )  ,    builder )  ;", "escapeByte (  (  1  2  8     |     ( ch    &     6  3  )  )  ,    builder )  ;", "} else    {", "escapeByte (  (  2  2  4     |     (  ( ch    >  >     1  2  )     &     3  1  )  )  ,    builder )  ;", "escapeByte (  (  1  2  8     |     (  ( ch    >  >     6  )     &     6  3  )  )  ,    builder )  ;", "escapeByte (  (  1  2  8     |     ( ch    &     6  3  )  )  ,    builder )  ;", "}", "}", "}", "return   builder . toString (  )  ;", "}", "METHOD_END"], "methodName": ["encode"], "fileName": "org.gradle.internal.resource.ExternalResourceName"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   builder    =    new   StringBuilder (  )  ;", "if    (  ( uri . getScheme (  )  )     !  =    null )     {", "builder . append ( uri . getScheme (  )  )  ;", "builder . append (  \"  :  \"  )  ;", "if    ( isFileOnHost ( uri )  )     {", "String   host    =    URI . create ( uri . getPath (  )  )  . getHost (  )  ;", "builder . append (  \"  /  /  /  /  \"  )  ;", "builder . append ( host )  ;", "}", "}", "if    (  ( uri . getHost (  )  )     !  =    null )     {", "builder . append (  \"  /  /  \"  )  ;", "builder . append ( uri . getHost (  )  )  ;", "}", "if    (  ( uri . getPort (  )  )     >     0  )     {", "builder . append (  \"  :  \"  )  ;", "builder . append ( uri . getPort (  )  )  ;", "}", "return   builder . toString (  )  ;", "}", "METHOD_END"], "methodName": ["encodeRoot"], "fileName": "org.gradle.internal.resource.ExternalResourceName"}, {"methodBody": ["METHOD_START", "{", "builder . append (  '  %  '  )  ;", "builder . append ( Charac . toUpperCase ( Charac . forDigit (  (  ( ch    >  >     4  )     &     2  5  5  )  ,     1  6  )  )  )  ;", "builder . append ( Charac . toUpperCase ( Charac . forDigit (  ( ch    &     1  5  )  ,     1  6  )  )  )  ;", "}", "METHOD_END"], "methodName": ["escapeByte"], "fileName": "org.gradle.internal.resource.ExternalResourceName"}, {"methodBody": ["METHOD_START", "{", "if    ( isFileOnHost ( parent )  )     {", "return   URI . create ( parent . getPath (  )  )  . getPath (  )  ;", "}", "return   parent . getPath (  )  ;", "}", "METHOD_END"], "methodName": ["extractPath"], "fileName": "org.gradle.internal.resource.ExternalResourceName"}, {"methodBody": ["METHOD_START", "{", "if    (  ( encodedRoot )     =  =    null )     {", "turn   path ;", "}", "turn    ( encodedRoot )     +     ( path )  ;", "}", "METHOD_END"], "methodName": ["getDecoded"], "fileName": "org.gradle.internal.resource.ExternalResourceName"}, {"methodBody": ["METHOD_START", "{", "return   getDecoded (  )  ;", "}", "METHOD_END"], "methodName": ["getDisplayName"], "fileName": "org.gradle.internal.resource.ExternalResourceName"}, {"methodBody": ["METHOD_START", "{", "return   path ;", "}", "METHOD_END"], "methodName": ["getPath"], "fileName": "org.gradle.internal.resource.ExternalResourceName"}, {"methodBody": ["METHOD_START", "{", "return   new   ExternalResourceName ( encodedRoot ,     ( path . startsWith (  \"  /  \"  )     ?     \"  /  \"     :     \"  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["getRoot"], "fileName": "org.gradle.internal.resource.ExternalResourceName"}, {"methodBody": ["METHOD_START", "{", "int   lastSlash    =    path . lastIndexOf (  '  /  '  )  ;", "return   lastSlash    =  =     (  -  1  )     ?    getDecoded (  )     :    path . substring (  ( lastSlash    +     1  )  )  ;", "}", "METHOD_END"], "methodName": ["getShortDisplayName"], "fileName": "org.gradle.internal.resource.ExternalResourceName"}, {"methodBody": ["METHOD_START", "{", "try    {", "if    (  ( encodedRoot )     =  =    null )     {", "turn   new   URI ( encode ( path ,    false )  )  ;", "}", "turn   new   URI (  (  ( encodedRoot )     +     ( encode ( path ,    true )  )  )  )  ;", "}    catch    ( URISyntaxException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["getUri"], "fileName": "org.gradle.internal.resource.ExternalResourceName"}, {"methodBody": ["METHOD_START", "{", "return    (  \" file \"  . equals ( uri . getScheme (  )  )  )     &  &     ( uri . getPath (  )  . startsWith (  \"  /  /  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["isFileOnHost"], "fileName": "org.gradle.internal.resource.ExternalResourceName"}, {"methodBody": ["METHOD_START", "{", "if    (  ( parts . isEmpty (  )  )     &  &    leadingSlash )     {", "return    \"  /  \"  ;", "}", "StringBuilder   builder    =    new   StringBuilder (  )  ;", "for    ( String   part    :    parts )     {", "if    (  (  ( builder . length (  )  )     >     0  )     |  |    leadingSlash )     {", "builder . append (  \"  /  \"  )  ;", "}", "builder . append ( part )  ;", "}", "if    ( trailingSlash )     {", "builder . append (  \"  /  \"  )  ;", "}", "return   builder . toString (  )  ;", "}", "METHOD_END"], "methodName": ["join"], "fileName": "org.gradle.internal.resource.ExternalResourceName"}, {"methodBody": ["METHOD_START", "{", "List < String >    parts    =    new   ArrayList < String >  (  )  ;", "boolean   leadingSlash ;", "boolean   trailingSlash    =    path . endsWith (  \"  /  \"  )  ;", "if    ( path . startsWith (  \"  /  \"  )  )     {", "leadingSlash    =    true ;", "append ( path ,    parts )  ;", "} else    {", "leadingSlash    =    this . path . startsWith (  \"  /  \"  )  ;", "append ( this . path ,    parts )  ;", "append ( path ,    parts )  ;", "}", "String   newPath    =    join ( leadingSlash ,    trailingSlash ,    parts )  ;", "return   new    ( encodedRoot ,    newPath )  ;", "}", "METHOD_END"], "methodName": ["resolve"], "fileName": "org.gradle.internal.resource.ExternalResourceName"}, {"methodBody": ["METHOD_START", "{", "return   bytesRead ;", "}", "METHOD_END"], "methodName": ["getBytesRead"], "fileName": "org.gradle.internal.resource.ExternalResourceReadResult"}, {"methodBody": ["METHOD_START", "{", "return   result ;", "}", "METHOD_END"], "methodName": ["getResult"], "fileName": "org.gradle.internal.resource.ExternalResourceReadResult"}, {"methodBody": ["METHOD_START", "{", "return   new   ExternalResourceReadResult < Void >  ( bytesRead ,    null )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.internal.resource.ExternalResourceReadResult"}, {"methodBody": ["METHOD_START", "{", "return   new   ExternalResourceReadResult < T >  ( bytesRead ,    t )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.internal.resource.ExternalResourceReadResult"}, {"methodBody": ["METHOD_START", "{", "return   bytesWritten ;", "}", "METHOD_END"], "methodName": ["getBytesWritten"], "fileName": "org.gradle.internal.resource.ExternalResourceWriteResult"}, {"methodBody": ["METHOD_START", "{", "if    ( failure   instanceof   ResourceException )     {", "ResourceException   resourceException    =     (  ( ResourceException )     ( failure )  )  ;", "if    ( location . equals ( resourceException . getLocation (  )  )  )     {", "return   resourceException ;", "}", "}", "return   new   ResourceException ( location ,    message ,    failure )  ;", "}", "METHOD_END"], "methodName": ["failure"], "fileName": "org.gradle.internal.resource.ResourceExceptions"}, {"methodBody": ["METHOD_START", "{", "return   ResourceExceptions . failure ( location ,    String . format (  \" Could   not   get   resource    '  % s '  .  \"  ,    location )  ,    failure )  ;", "}", "METHOD_END"], "methodName": ["getFailed"], "fileName": "org.gradle.internal.resource.ResourceExceptions"}, {"methodBody": ["METHOD_START", "{", "return   new   MissingResourceException ( location ,    String . format (  \" Could   not   read    '  % s '    as   it   does   not   exist .  \"  ,    location )  )  ;", "}", "METHOD_END"], "methodName": ["getMissing"], "fileName": "org.gradle.internal.resource.ResourceExceptions"}, {"methodBody": ["METHOD_START", "{", "return   new   MissingResourceException ( location ,    String . format (  \" Could   not   read    '  % s '    as   it   does   not   exist .  \"  ,    location )  ,     ( failure   instanceof   FileNotFoundException    ?    null    :    failure )  )  ;", "}", "METHOD_END"], "methodName": ["getMissing"], "fileName": "org.gradle.internal.resource.ResourceExceptions"}, {"methodBody": ["METHOD_START", "{", "return   ResourceExceptions . failure ( location ,    String . format (  \" Could   not   write   to   resource    '  % s '  .  \"  ,    location )  ,    failure )  ;", "}", "METHOD_END"], "methodName": ["putFailed"], "fileName": "org.gradle.internal.resource.ResourceExceptions"}, {"methodBody": ["METHOD_START", "{", "return   ResourceExceptions . failure ( location . toURI (  )  ,    String . format (  \" Could   not   read    '  % s '  .  \"  ,    location )  ,    failure )  ;", "}", "METHOD_END"], "methodName": ["readFailed"], "fileName": "org.gradle.internal.resource.ResourceExceptions"}, {"methodBody": ["METHOD_START", "{", "return   new   ResourceException ( String . format (  \" Could   not   read    % s .  \"  ,    displayName )  ,    failure )  ;", "}", "METHOD_END"], "methodName": ["readFailed"], "fileName": "org.gradle.internal.resource.ResourceExceptions"}, {"methodBody": ["METHOD_START", "{", "return   new   ResourceIsAFolderException ( location . toURI (  )  ,    String . format (  \" Cannot   read    '  % s '    because   it   is   a   folder .  \"  ,    location )  )  ;", "}", "METHOD_END"], "methodName": ["readFolder"], "fileName": "org.gradle.internal.resource.ResourceExceptions"}, {"methodBody": ["METHOD_START", "{", "return   new   MissingResourceException ( location . toURI (  )  ,    String . format (  \" Could   not   read    '  % s '    as   it   does   not   exist .  \"  ,    location )  ,     ( failure   instanceof   FileNotFoundException    ?    null    :    failure )  )  ;", "}", "METHOD_END"], "methodName": ["readMissing"], "fileName": "org.gradle.internal.resource.ResourceExceptions"}, {"methodBody": ["METHOD_START", "{", "if    ( contentType    =  =    null )     {", "return   defaultEncoding ;", "}", "int   pos    =     . findFirstParameter (  0  ,    contentType )  ;", "if    ( pos    =  =     (  -  1  )  )     {", "return   defaultEncoding ;", "}", "StringBuilder   paramName    =    new   StringBuilder (  )  ;", "StringBuilder   paramValue    =    new   StringBuilder (  )  ;", "pos    =     . findNextParameter ( pos ,    contentType ,    paramName ,    paramValue )  ;", "while    ( pos    !  =     (  -  1  )  )     {", "if    (  ( paramName . toString (  )  . equals (  \" charset \"  )  )     &  &     (  ( paramValue . length (  )  )     >     0  )  )     {", "return   paramValue . toString (  )  ;", "}", "pos    =     . findNextParameter ( pos ,    contentType ,    paramName ,    paramValue )  ;", "}", "return   defaultEncoding ;", "}", "METHOD_END"], "methodName": ["extractCharacterEncoding"], "fileName": "org.gradle.internal.resource.UriTextResource"}, {"methodBody": ["METHOD_START", "{", "int   index    =    contentType . indexOf (  '  ;  '  ,    pos )  ;", "if    ( index    <     0  )     {", "return    -  1  ;", "}", "return   index    +     1  ;", "}", "METHOD_END"], "methodName": ["findFirstParameter"], "fileName": "org.gradle.internal.resource.UriTextResource"}, {"methodBody": ["METHOD_START", "{", "if    ( pos    >  =     ( contentType . length (  )  )  )     {", "return    -  1  ;", "}", "paramName . setLength (  0  )  ;", "paramValue . setLength (  0  )  ;", "int   separator    =    contentTypdexOf (  \"  =  \"  ,    pos )  ;", "if    ( separator    <     0  )     {", "separator    =    contentType . length (  )  ;", "}", "paramName . append ( contentType . substring ( pos ,    separator )  . trim (  )  )  ;", "if    ( separator    >  =     (  ( contentType . length (  )  )     -     1  )  )     {", "return   contentType . length (  )  ;", "}", "int   startValue    =    separator    +     1  ;", "int   endValue ;", "if    (  ( contentType . charAt ( startValue )  )     =  =     '  \"  '  )     {", "startValue +  +  ;", "int   i    =    startValue ;", "while    ( i    <     ( contentType . length (  )  )  )     {", "char   ch    =    contentType . charAt ( i )  ;", "if    (  (  ( ch    =  =     '  \\  \\  '  )     &  &     ( i    <     (  ( contentType . length (  )  )     -     1  )  )  )     &  &     (  ( contentType . charAt (  ( i    +     1  )  )  )     =  =     '  \"  '  )  )     {", "paramValue . append (  '  \"  '  )  ;", "i    +  =     2  ;", "} else", "if    ( ch    =  =     '  \"  '  )     {", "break ;", "} else    {", "paramValue . append ( ch )  ;", "i +  +  ;", "}", "}", "endValue    =    i    +     1  ;", "} else    {", "endValue    =    contentTypdexOf (  '  ;  '  ,    startValue )  ;", "if    ( endValue    <     0  )     {", "endValue    =    contentType . length (  )  ;", "}", "paramValue . append ( contentType . substring ( startValue ,    endValue )  )  ;", "}", "if    (  ( endValue    <     ( contentType . length (  )  )  )     &  &     (  ( contentType . charAt ( endValue )  )     =  =     '  ;  '  )  )     {", "endValue +  +  ;", "}", "return   endValue ;", "}", "METHOD_END"], "methodName": ["findNextParameter"], "fileName": "org.gradle.internal.resource.UriTextResource"}, {"methodBody": ["METHOD_START", "{", "String   osName    =    System . getProperty (  \" os . name \"  )  ;", "String   osVersion    =    System . getProperty (  \" os . version \"  )  ;", "String   osArch    =    System . getProperty (  \" os . arch \"  )  ;", "String   javaVendor    =    System . getProperty (  \" vendor \"  )  ;", "String   javaVersion    =    SystemProperties . getInstance (  )  . getJavaVersion (  )  ;", "String   javaVendorVersion    =    System . getProperty (  \" version \"  )  ;", "return   String . format (  \" G /  % s    (  % s ;  % s ;  % s )     (  % s ;  % s ;  % s )  \"  ,    GVersion . current (  )  . getVersion (  )  ,    osName ,    osVersion ,    osArch ,    javaVendor ,    javaVersion ,    javaVendorVersion )  ;", "}", "METHOD_END"], "methodName": ["getUserAgentString"], "fileName": "org.gradle.internal.resource.UriTextResource"}, {"methodBody": ["METHOD_START", "{", "final   URLConnection   urlConnection    =    sourceUri . toURL (  )  . openConnection (  )  ;", "urlConnection . setRequestProperty (  \" User - Agent \"  ,     . getUserAgentString (  )  )  ;", "if    ( urlConnection   instanceof   JarURLConnection )     {", "urlConnection . setUseCaches ( false )  ;", "}", "urlConnection . connect (  )  ;", "String   contentType    =    urlConnection . getContentType (  )  ;", "String   charset    =     . extractCharacterEncoding ( contentType ,     . DEFAULT _ ENCODING )  ;", "return   new   InputStreamReader ( urlConnection . getInputStream (  )  ,    charset )  ;", "}", "METHOD_END"], "methodName": ["openReader"], "fileName": "org.gradle.internal.resource.UriTextResource"}, {"methodBody": ["METHOD_START", "{", "if    (  ( contentLength )     =  =    null )     {", "contentLength    =    getFile (  )  . length (  )  ;", "}", "return   contentLength ;", "}", "METHOD_END"], "methodName": ["getContentLength"], "fileName": "org.gradle.internal.resource.local.AbstractLocallyAvailableResource"}, {"methodBody": ["METHOD_START", "{", "if    (  ( lastModified )     =  =    null )     {", "lastModified    =    getFile (  )  . lastModified (  )  ;", "}", "return   lastModified ;", "}", "METHOD_END"], "methodName": ["getLastModified"], "fileName": "org.gradle.internal.resource.local.AbstractLocallyAvailableResource"}, {"methodBody": ["METHOD_START", "{", "if    (  ( sha 1  )     =  =    null )     {", "this . sha 1     =    HashUtil . sha 1  ( getFile (  )  )  ;", "}", "return   sha 1  ;", "}", "METHOD_END"], "methodName": ["getSha1"], "fileName": "org.gradle.internal.resource.local.AbstractLocallyAvailableResource"}, {"methodBody": ["METHOD_START", "{", "return   new   LazyLocallyAvailableResourceCandidates ( producer . transform ( criterion )  )  ;", "}", "METHOD_END"], "methodName": ["findCandidates"], "fileName": "org.gradle.internal.resource.local.AbstractLocallyAvailableResourceFinder"}, {"methodBody": ["METHOD_START", "{", "List < LocallyAvailableResourceCandidates >    allCandidates    =    new   LinkedList < LocallyAvailableResourceCandidates >  (  )  ;", "for    ( LocallyAvailableResourceFinder < C >    finder    :    composites )     {", "allCandidates . add ( finder . findCandidates ( criterion )  )  ;", "}", "return   new    . CompositeLocallyAvailableResourceCandidates ( allCandidates )  ;", "}", "METHOD_END"], "methodName": ["findCandidates"], "fileName": "org.gradle.internal.resource.local.CompositeLocallyAvailableResourceFinder"}, {"methodBody": ["METHOD_START", "{", "return   origin ;", "}", "METHOD_END"], "methodName": ["getFile"], "fileName": "org.gradle.internal.resource.local.DefaultLocallyAvailableResource"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   new   FileInputStream ( file )  ;", "}    catch    ( FileNotFoundException   e )     {", "throw   RExceptions . readMissing ( file ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["open"], "fileName": "org.gradle.internal.resource.local.FileReadableContent"}, {"methodBody": ["METHOD_START", "{", "return   new   File ( location . getUri (  )  )  ;", "}", "METHOD_END"], "methodName": ["getFile"], "fileName": "org.gradle.internal.resource.local.FileResourceConnector"}, {"methodBody": ["METHOD_START", "{", "HashValue   thisHash ;", "for    ( File   file    :    getFiles (  )  )     {", "thisHash    =    HashUtil . sha 1  ( file )  ;", "if    ( thisHash . equals ( targetHash )  )     {", "return   new   Default ( file ,    thisHash )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["findByHashValue"], "fileName": "org.gradle.internal.resource.local.LazyLocallyAvailableResourceCandidates"}, {"methodBody": ["METHOD_START", "{", "if    (  ( files )     =  =    null )     {", "files    =    filesFactory . cre (  )  ;", "}", "return   files ;", "}", "METHOD_END"], "methodName": ["getFiles"], "fileName": "org.gradle.internal.resource.local.LazyLocallyAvailableResourceCandidates"}, {"methodBody": ["METHOD_START", "{", "return   getFiles (  )  . isEmpty (  )  ;", "}", "METHOD_END"], "methodName": ["isNone"], "fileName": "org.gradle.internal.resource.local.LazyLocallyAvailableResourceCandidates"}, {"methodBody": ["METHOD_START", "{", "FileMetadataSnapshot   stat    =    fileSystem . stat ( localFile )  ;", "if    (  ( stat . getType (  )  )     =  =     ( FileType . Missing )  )     {", "return   null ;", "}", "return   new   DefaultMetaData ( localFile . toURI (  )  ,    stat . getLastModified (  )  ,    stat . getLength (  )  )  ;", "}", "METHOD_END"], "methodName": ["getMetaData"], "fileName": "org.gradle.internal.resource.local.LocalFileStandInExternalResource"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( localFile . exists (  )  )  )     {", "throw   ResourceExceptions . getMissing ( getURI (  )  )  ;", "}", "try    {", "CountingInputStream   input    =    new   CountingInputStream ( new   BufferedInputStream ( new   FileInputStream ( localFile )  )  )  ;", "try    {", "readAction . execute ( input )  ;", "}    finally    {", "input . close (  )  ;", "}", "return   ReadResult . of ( input . getCount (  )  )  ;", "}    catch    ( IOException   e )     {", "throw   ResourceExceptions . getFailed ( getURI (  )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["withContent"], "fileName": "org.gradle.internal.resource.local.LocalFileStandInExternalResource"}, {"methodBody": ["METHOD_START", "{", "if    ( local    =  =    null )     {", "return   false ;", "}", "String   localEtag    =    local . getEtag (  )  ;", "Date   localLastModified    =    local . getLastModified (  )  ;", "if    (  ( localEtag    =  =    null )     &  &     ( localLastModified    =  =    null )  )     {", "return   false ;", "}", "long   localContentLength    =    local . getContentLength (  )  ;", "if    (  ( localEtag    =  =    null )     &  &     ( localContentLength    <     1  )  )     {", "return   false ;", "}", "remote    =    remoteFactory . create (  )  ;", "if    ( remote    =  =    null )     {", "return   false ;", "}", "String   remoteEtag    =    remote . getEtag (  )  ;", "if    (  ( localEtag    !  =    null )     &  &     ( remoteEtag    !  =    null )  )     {", "return   localEtag . equals ( remoteEtag )  ;", "}", "Date   remoteLastModified    =    remote . getLastModified (  )  ;", "if    ( remoteLastModified    =  =    null )     {", "return   false ;", "}", "long   remoteContentLength    =    remote . getContentLength (  )  ;", "if    ( remoteContentLength    <     1  )     {", "return   false ;", "}", "return    ( localContentLength    =  =    remoteContentLength )     &  &     ( remoteLastModified . equals ( localLastModified )  )  ;", "}", "METHOD_END"], "methodName": ["isDefinitelyUnchanged"], "fileName": "org.gradle.internal.resource.metadata.ExternalResourceMetaDataCompare"}, {"methodBody": ["METHOD_START", "{", "return   DefaultExternalResourceConnector . STATS ;", "}", "METHOD_END"], "methodName": ["getStatistics"], "fileName": "org.gradle.internal.resource.transfer.DefaultExternalResourceConnector"}, {"methodBody": ["METHOD_START", "{", "URI   uri ;", "try    {", "uri    =    url . toURI (  )  ;", "}    catch    ( URISyntaxException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "connector    =    new    (  )  ;", "return   new   AccessorBackedExternalResource ( new   ExternalResourceName ( uri )  ,    connector ,    connector ,    connector ,    false )  ;", "}", "METHOD_END"], "methodName": ["open"], "fileName": "org.gradle.internal.resource.transfer.UrlExternalResource"}]