[{"methodBody": ["METHOD_START", "{", "String   path ;", "try    {", "path    =    URLDecoder . decode ( uri . getPath (  )  ,     \" UTF -  8  \"  )  ;", "}    catch    ( UnsupedEncodingException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "while    ( path . startsWith (  \"  /  \"  )  )     {", "path    =    path . substring (  1  )  ;", "}", "return   path ;", "}", "METHOD_END"], "methodName": ["cleanResourcePath"], "fileName": "org.gradle.internal.resource.transport.gcp.gcs.GcsClient"}, {"methodBody": ["METHOD_START", "{", "HttpTransport   transport    =    GoogleNetHttpTransport . newTrustedTransport (  )  ;", "JsonFactory   jsonFactory    =    new   JacksonFactory (  )  ;", "Storage . Builder   builder    =    new   Storage . Builder ( transport ,    jsonFactory ,    null )  ;", "if    ( gcsConnectionProperties . requiresAuthentication (  )  )     {", "Supplier < Credential >    credentialSupplier    =    GcsClient . getCredentialSupplier ( transport ,    jsonFactory )  ;", "builder . setHttpRequestInitializer ( new   RetryHttpInitializerWrapper ( credentialSupplier )  )  ;", "}", "if    ( gcsConnectionProperties . getEndpoint (  )  . isPresent (  )  )     {", "builder . setRootUrl ( gcsConnectionProperties . getEndpoint (  )  . get (  )  . toString (  )  )  ;", "}", "if    ( gcsConnectionProperties . getServicePath (  )  . isPresent (  )  )     {", "builder . setServicePath ( gcsConnectionProperties . getServicePath (  )  . get (  )  )  ;", "}", "builder . setApplicationName (  \" gradle \"  )  ;", "return   new   GcsClient ( builder . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.internal.resource.transport.gcp.gcs.GcsClient"}, {"methodBody": ["METHOD_START", "{", "return   Suppliers . memoize ( new   com . google . common . base . Supplier < Credential >  (  )     {", "@ Override", "public   Credential   get (  )     {", "try    {", "GoogleCredential   googleCredential    =    GoogleCredential . getApplicationDefault (  ,    jsonFactory )  ;", "return   googleCredential . createScoped ( Collections . singletonList (  \" https :  /  / www . googleapis . com / auth / devstorage . read _ write \"  )  )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException (  \" Failed   to   get   Google   credentials   for   GCS   connection \"  ,    e )  ;", "}", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["getCredentialSupplier"], "fileName": "org.gradle.internal.resource.transport.gcp.gcs.GcsClient"}, {"methodBody": ["METHOD_START", "{", "GcsClient . LOGGER . debug (  \" Attempting   to   get   gcs   resource :     [  {  }  ]  \"  ,    uri . toString (  )  )  ;", "String   path    =    GcsClient . cleanResourcePath ( uri )  ;", "try    {", "Storage . Objects . Get   getRequest    =    storage . objects (  )  . get ( uri . getHost (  )  ,    path )  ;", "return   getRequest . execute (  )  ;", "}    catch    ( GoogleJsonResponseException   e )     {", "if    (  ( e . getStatusCode (  )  )     =  =     4  0  4  )     {", "return   null ;", "}", "throw   ResourceExceptions . getFailed ( uri ,    e )  ;", "}    catch    ( IOException   e )     {", "throw   ResourceExceptions . getFailed ( uri ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["getResource"], "fileName": "org.gradle.internal.resource.transport.gcp.gcs.GcsClient"}, {"methodBody": ["METHOD_START", "{", "Storage . Objects . Get   getObject    =    storage . objects (  )  . get ( obj . getBucket (  )  ,    obj . getName (  )  )  ;", "getObject . getMediaHttpDownloader (  )  . setDirectDownloadEnabled ( false )  ;", "return   getObject . executeMediaAsInputStream (  )  ;", "}", "METHOD_END"], "methodName": ["getResourceStream"], "fileName": "org.gradle.internal.resource.transport.gcp.gcs.GcsClient"}, {"methodBody": ["METHOD_START", "{", "List < StorageObject >    results    =    new   ArrayList < StorageObject >  (  )  ;", "String   path    =     . cleanResourcePath ( uri )  ;", "try    {", "Storage . Objects . List   listRequest    =    storage . objects (  )  . list ( uri . getHost (  )  )  . setPrefix ( path )  ;", "com . google . api . services . storage . model . Objects   objects ;", "do    {", "objects    =    listRequest . execute (  )  ;", "results . addAll ( objects . getItems (  )  )  ;", "listRequest . setPageToken ( objects . getNextPageToken (  )  )  ;", "}    while    ( null    !  =     ( objects . getNextPageToken (  )  )     )  ;", "}    catch    ( IOException   e )     {", "throw   ResourceExceptions . getFailed ( uri ,    e )  ;", "}", "List < String >    resultStrings    =    new   ArrayList < String >  (  )  ;", "for    ( StorageObject   result    :    results )     {", "resultStrings . add ( result . getName (  )  )  ;", "}", "return   resultStrings ;", "}", "METHOD_END"], "methodName": ["list"], "fileName": "org.gradle.internal.resource.transport.gcp.gcs.GcsClient"}, {"methodBody": ["METHOD_START", "{", "try    {", "InputStreamContent   contentStream    =    new   InputStreamContent ( null ,    inputStream )  ;", "contentStream . setLength ( contentLength )  ;", "String   bucket    =    destination . getHost (  )  ;", "String   path    =     . cleanResourcePath ( destination )  ;", "StorageObject   objectMetadata    =    new   StorageObject (  )  . setName ( path )  ;", "Storage . Objects . Insert   putRequest    =    storage . objects (  )  . insert ( bucket ,    objectMetadata ,    contentStream )  ;", ". LOGGER . debug (  \" Attempting   to   put   resource :  [  {  }  ]    into   gcs   bucket    [  {  }  ]  \"  ,    putRequest . getName (  )  ,    putRequest . getBucket (  )  )  ;", "putRequest . execute (  )  ;", "}    catch    ( IOException   e )     {", "throw   ResourceExceptions . putFailed ( destination ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["put"], "fileName": "org.gradle.internal.resource.transport.gcp.gcs.GcsClient"}, {"methodBody": ["METHOD_START", "{", "return    ( StringUtils . isNotBlank ( property )  )     &  &     ( Boolean . parseBoolean ( property )  )  ;", "}", "METHOD_END"], "methodName": ["configureDisableAuthentication"], "fileName": "org.gradle.internal.resource.transport.gcp.gcs.GcsConnectionProperties"}, {"methodBody": ["METHOD_START", "{", "URI   uri    =    null ;", "if    ( StringUtils . isNotBlank ( property )  )     {", "try    {", "uri    =    new   URI ( property )  ;", "if    (  ( StringUtils . isBlank ( uri . getScheme (  )  )  )     |  |     (  !  (  . SUPPORTED _ SCHEMES . contains ( uri . getScheme (  )  . toUpperCase (  )  )  )  )  )     {", "throw   new   IllegalArgumentException (  (  (  (  (  \" System   property    [  \"     +     (  . GCS _ ENDPOINT _ PROPERTY )  )     +     \"  =  \"  )     +    property )     +     \"  ]    must   have   a   scheme   of    ' http '    or    ' https '  \"  )  )  ;", "}", "}    catch    ( URISyntaxException   e )     {", "throw   new   IllegalArgumentException (  (  (  (  (  \" System   property    [  \"     +     (  . GCS _ ENDPOINT _ PROPERTY )  )     +     \"  =  \"  )     +    property )     +     \"  ]       must   be   a   valid   URI \"  )  )  ;", "}", "}", "return   uri ;", "}", "METHOD_END"], "methodName": ["configureEndpoint"], "fileName": "org.gradle.internal.resource.transport.gcp.gcs.GcsConnectionProperties"}, {"methodBody": ["METHOD_START", "{", "if    ( StringUtils . isNotBlank ( property )  )     {", "return   property ;", "} else    {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["configureServicePath"], "fileName": "org.gradle.internal.resource.transport.gcp.gcs.GcsConnectionProperties"}, {"methodBody": ["METHOD_START", "{", "return   Optional . fromNullable ( endpoint )  ;", "}", "METHOD_END"], "methodName": ["getEndpoint"], "fileName": "org.gradle.internal.resource.transport.gcp.gcs.GcsConnectionProperties"}, {"methodBody": ["METHOD_START", "{", "return   Optional . fromNullable ( servicePath )  ;", "}", "METHOD_END"], "methodName": ["getServicePath"], "fileName": "org.gradle.internal.resource.transport.gcp.gcs.GcsConnectionProperties"}, {"methodBody": ["METHOD_START", "{", "return    !  ( disableAuthentication )  ;", "}", "METHOD_END"], "methodName": ["requiresAuthentication"], "fileName": "org.gradle.internal.resource.transport.gcp.gcs.GcsConnectionProperties"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultExternalResourceMetaData ( uri ,    storageObject . getUpdated (  )  . getValue (  )  ,    storageObject . getSize (  )  . longValue (  )  ,    storageObject . getContentType (  )  ,    storageObject . getEtag (  )  ,    null )  ;", "}", "METHOD_END"], "methodName": ["toExternalResourceMetaData"], "fileName": "org.gradle.internal.resource.transport.gcp.gcs.ResourceMapper"}, {"methodBody": ["METHOD_START", "{", "Logger . getLogger ( HttpTransport . class . getName (  )  )  . setLevel ( Level . OFF )  ;", "}", "METHOD_END"], "methodName": ["disableHttpTransportLogging"], "fileName": "org.gradle.internal.resource.transport.gcp.gcs.RetryHttpInitializerWrapper"}]