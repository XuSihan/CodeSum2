[{"methodBody": ["METHOD_START", "{", "configuration . execute ( credentials )  ;", "}", "METHOD_END"], "methodName": ["credentials"], "fileName": "org.gradle.caching.http.HttpBuildCache"}, {"methodBody": ["METHOD_START", "{", "return   credentials ;", "}", "METHOD_END"], "methodName": ["getCredentials"], "fileName": "org.gradle.caching.http.HttpBuildCache"}, {"methodBody": ["METHOD_START", "{", "return   url ;", "}", "METHOD_END"], "methodName": ["getUrl"], "fileName": "org.gradle.caching.http.HttpBuildCache"}, {"methodBody": ["METHOD_START", "{", "return   allowUntrustedServer ;", "}", "METHOD_END"], "methodName": ["isAllowUntrustedServer"], "fileName": "org.gradle.caching.http.HttpBuildCache"}, {"methodBody": ["METHOD_START", "{", "this . allowUntrustedServer    =    allowUntrustedServer ;", "}", "METHOD_END"], "methodName": ["setAllowUntrustedServer"], "fileName": "org.gradle.caching.http.HttpBuildCache"}, {"methodBody": ["METHOD_START", "{", "setUrl ( URI . create ( url )  )  ;", "}", "METHOD_END"], "methodName": ["setUrl"], "fileName": "org.gradle.caching.http.HttpBuildCache"}, {"methodBody": ["METHOD_START", "{", "this . url    =    url ;", "}", "METHOD_END"], "methodName": ["setUrl"], "fileName": "org.gradle.caching.http.HttpBuildCache"}, {"methodBody": ["METHOD_START", "{", "setUrl ( url . toURI (  )  )  ;", "}", "METHOD_END"], "methodName": ["setUrl"], "fileName": "org.gradle.caching.http.HttpBuildCache"}, {"methodBody": ["METHOD_START", "{", "return   password ;", "}", "METHOD_END"], "methodName": ["getPassword"], "fileName": "org.gradle.caching.http.HttpBuildCacheCredentials"}, {"methodBody": ["METHOD_START", "{", "return   username ;", "}", "METHOD_END"], "methodName": ["getUsername"], "fileName": "org.gradle.caching.http.HttpBuildCacheCredentials"}, {"methodBody": ["METHOD_START", "{", "this . password    =    password ;", "}", "METHOD_END"], "methodName": ["setPassword"], "fileName": "org.gradle.caching.http.HttpBuildCacheCredentials"}, {"methodBody": ["METHOD_START", "{", "this . username    =    username ;", "}", "METHOD_END"], "methodName": ["setUsername"], "fileName": "org.gradle.caching.http.HttpBuildCacheCredentials"}, {"methodBody": ["METHOD_START", "{", "return    (  ( credentials . getUsername (  )  )     !  =    null )     &  &     (  ( credentials . getPassword (  )  )     !  =    null )  ;", "}", "METHOD_END"], "methodName": ["credentialsPresent"], "fileName": "org.gradle.caching.http.internal.DefaultHttpBuildCacheServiceFactory"}, {"methodBody": ["METHOD_START", "{", "HttpBuildCacheCredentials   credentials    =    new   HttpBuildCacheCredentials (  )  ;", "String   userInfo    =    url . getUserInfo (  )  ;", "int   indexOfSeparator    =    userInfo . indexOf (  '  :  '  )  ;", "if    ( indexOfSeparator    >     (  -  1  )  )     {", "String   username    =    userInfo . substring (  0  ,    indexOfSeparator )  ;", "String   password    =    userInfo . substring (  ( indexOfSeparator    +     1  )  )  ;", "credentials . setUsername ( username )  ;", "credentials . setPassword ( password )  ;", "}", "return   credentials ;", "}", "METHOD_END"], "methodName": ["extractCredentialsFromUserInfo"], "fileName": "org.gradle.caching.http.internal.DefaultHttpBuildCacheServiceFactory"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   new   URI ( uri . getScheme (  )  ,    null ,    uri . getHost (  )  ,    uri . getPort (  )  ,    uri . getPath (  )  ,    uri . getQuery (  )  ,    uri . getFragment (  )  )  ;", "}    catch    ( URISyntaxException   e )     {", "throw   new   GException (  \" Error   constructing   URL   for   http   build   cache \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["stripUserInfo"], "fileName": "org.gradle.caching.http.internal.DefaultHttpBuildCacheServiceFactory"}, {"methodBody": ["METHOD_START", "{", "request . addHeader (  \" X - Gradle - Version \"  ,    GradleVersion . current (  )  . getVersion (  )  )  ;", "}", "METHOD_END"], "methodName": ["addDiagnosticHeaders"], "fileName": "org.gradle.caching.http.internal.HttpBuildCacheService"}, {"methodBody": ["METHOD_START", "{", "final   Header   locationHeader    =    response . getFirstHeader (  \" location \"  )  ;", "if    ( locationHeader    =  =    null )     {", "return   throwHttpStatusCodeException ( statusCode ,    defaultMessage )  ;", "}", "try    {", "throw   new   BuildCacheException ( String . format (  (  (  (  \" Received   unexpected   redirect    ( HTTP    % d )    to    % s   when    \"     +    action )     +     \"     '  % s '  .     \"  )     +     \" Ensure   the   configured   URL   for   the   remote   build   cache   is   correct .  \"  )  ,    statusCode ,     . safeUri ( new   URI ( locationHeader . getValue (  )  )  )  ,     . safeUri ( uri )  )  )  ;", "}    catch    ( URISyntaxException   e )     {", "return   throwHttpStatusCodeException ( statusCode ,    defaultMessage )  ;", "}", "}", "METHOD_END"], "methodName": ["handleRedirect"], "fileName": "org.gradle.caching.http.internal.HttpBuildCacheService"}, {"methodBody": ["METHOD_START", "{", "return    ( statusCode    >  =     2  0  0  )     &  &     ( statusCode    <     3  0  0  )  ;", "}", "METHOD_END"], "methodName": ["isHttpSuccess"], "fileName": "org.gradle.caching.http.internal.HttpBuildCacheService"}, {"methodBody": ["METHOD_START", "{", "return    (  ( statusCode    =  =     ( HttpStatus . SC _ MOVED _ PERMANENTLY )  )     |  |     ( statusCode    =  =     ( HttpStatus . SC _ MOVED _ TEMPORARILY )  )  )     |  |     ( statusCode    =  =     ( HttpStatus . SC _ TEMPORARY _ REDIRECT )  )  ;", "}", "METHOD_END"], "methodName": ["isRedirect"], "fileName": "org.gradle.caching.http.internal.HttpBuildCacheService"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   new   URI ( uri . getSme (  )  ,    null ,    uri . getHost (  )  ,    uri . getPort (  )  ,    uri . getPath (  )  ,    uri . getQuery (  )  ,    uri . getFragment (  )  )  ;", "}    catch    ( URISyntaxException   e )     {", "throw   UnckedException . throwAsUnckedException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["safeUri"], "fileName": "org.gradle.caching.http.internal.HttpBuildCacheService"}, {"methodBody": ["METHOD_START", "{", "if    ( HttpBuildCacheService . FATAL _ HTTP _ ERROR _ CODES . contains ( statusCode )  )     {", "throw   new   UncheckedIOException ( message )  ;", "} else    {", "throw   new   BuildCacheException ( message )  ;", "}", "}", "METHOD_END"], "methodName": ["throwHttpStatusCodeException"], "fileName": "org.gradle.caching.http.internal.HttpBuildCacheService"}, {"methodBody": ["METHOD_START", "{", "if    ( e   instanceof   Error )     {", "throw    (  ( Error )     ( e )  )  ;", "}", "throw   new   Exception ( e . getMessage (  )  ,    e )  ;", "}", "METHOD_END"], "methodName": ["wrap"], "fileName": "org.gradle.caching.http.internal.HttpBuildCacheService"}, {"methodBody": ["METHOD_START", "{", "registration . add ( BuildCacheServiceRegistration . class ,    new   DefaultBuildCacheServiceRegistration ( HttpBuildCache . class ,    DefaultHttpBuildCacheServiceFactory . class )  )  ;", "}", "METHOD_END"], "methodName": ["registerBuildServices"], "fileName": "org.gradle.caching.http.internal.HttpBuildCacheServiceServices"}]