[{"methodBody": ["METHOD_START", "{", "if    ( JavaVersion . current (  )  . isJava 9 Compatible (  )  )     {", "try    {", "Class . forName (  \" DatatypeConverter \"  )  ;", "}    catch    ( ClassNotFoundException   e )     {", "throw   new   GradleException (  (  \" Cannot   publish   to   S 3    since   the   module    ' bind '    is   not   available .     \"     +     \" Please   add    \\  \"  - addmods   bind    \\  '  - Djvmargs =  - addmods   bind \\  '  \\  \"    to   your   GRADLE _ OPTS .  \"  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["checkRequiredJigsawModuleIsOnPath"], "fileName": "org.gradle.internal.resource.transport.aws.s3.S3Client"}, {"methodBody": ["METHOD_START", "{", "Optional < URI >    endpoint    =    s 3 ConnectionProperties . getEndpoint (  )  ;", "if    ( endpoint . isPresent (  )  )     {", "amazon . setEndpoint ( endpoint . get (  )  . toString (  )  )  ;", "} else    {", "Optional < Region >    region    =    s 3 RegionalResource . getRegion (  )  ;", "if    ( region . isPresent (  )  )     {", "amazon . setRegion ( region . get (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["configureClient"], "fileName": "org.gradle.internal.resource.transport.aws.s3.S3Client"}, {"methodBody": ["METHOD_START", "{", "ClientConfiguration   clientConfiguration    =    new   ClientConfiguration (  )  ;", "Optional < HttpProxySettings . HttpProxy >    proxyOptional    =    s 3 ConnectionProperties . getProxy (  )  ;", "if    ( proxyOptional . isPresent (  )  )     {", "HttpProxySettings . HttpProxy   proxy    =    s 3 ConnectionProperties . getProxy (  )  . get (  )  ;", "clientConfiguration . setProxyHost ( proxy . host )  ;", "clientConfiguration . setProxyPort ( proxy . port )  ;", "PasswordCredentials   credentials    =    proxy . credentials ;", "if    ( credentials    !  =    null )     {", "clientConfiguration . setProxyUsername ( credentials . getUsername (  )  )  ;", "clientConfiguration . setProxyPassword ( credentials . getPassword (  )  )  ;", "}", "}", "Optional < Integer >    maxErrorRetryCount    =    s 3 ConnectionProperties . getMaxErrorRetryCount (  )  ;", "if    ( maxErrorRetryCount . isPresent (  )  )     {", "clientConfiguration . setMaxErrorRetry ( maxErrorRetryCount . get (  )  )  ;", "}", "return   clientConfiguration ;", "}", "METHOD_END"], "methodName": ["createConnectionProperties"], "fileName": "org.gradle.internal.resource.transport.aws.s3.S3Client"}, {"methodBody": ["METHOD_START", "{", "S 3 RegionalRs 3 RegionalR =    new   S 3 RegionalRuri )  ;", "String   bucketName    =    s 3 RegionalRgetBucketName (  )  ;", "String   s 3 BucketKey    =    s 3 RegionalRgetKey (  )  ;", "configureClient ( s 3 RegionalR ;", "GetObjectRequest   getObjectRequest    =    new   GetObjectRequest ( bucketName ,    s 3 BucketKey )  ;", "if    ( isLightWeight )     {", "getObjectRequest . setRange (  0  ,     0  )  ;", "}", "try    {", "return   amazonS 3 Client . getObject ( getObjectRequest )  ;", "}    catch    ( AmazonServiceException   e )     {", "String   errorCode    =    e . getErrorCode (  )  ;", "if    (  ( null    !  =    errorCode )     &  &     ( errorCode . equalsIgnoreCase (  \" NoSuchKey \"  )  )  )     {", "return   null ;", "}", "throw   Rxceptions . getFailed ( uri ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["doGetS3Object"], "fileName": "org.gradle.internal.resource.transport.aws.s3.S3Client"}, {"methodBody": ["METHOD_START", "{", "S 3 Client . LOGGER . debug (  \" Attempting   to   get   s 3    meta - data :     [  {  }  ]  \"  ,    uri . toString (  )  )  ;", "return   doGetS 3 Object ( uri ,    true )  ;", "}", "METHOD_END"], "methodName": ["getMetaData"], "fileName": "org.gradle.internal.resource.transport.aws.s3.S3Client"}, {"methodBody": ["METHOD_START", "{", "S 3 Client . LOGGER . debug (  \" Attempting   to   get   s 3    resource :     [  {  }  ]  \"  ,    uri . toString (  )  )  ;", "return   doGetS 3 Object ( uri ,    false )  ;", "}", "METHOD_END"], "methodName": ["getResource"], "fileName": "org.gradle.internal.resource.transport.aws.s3.S3Client"}, {"methodBody": ["METHOD_START", "{", "S 3 RegionalRs 3 RegionalR =    new   S 3 RegionalRparent )  ;", "String   bucketName    =    s 3 RegionalRgetBucketName (  )  ;", "String   s 3 BucketKey    =    s 3 RegionalRgetKey (  )  ;", "configureClient ( s 3 RegionalR ;", "ListObjectsRequest   listObjectsRequest    =    new   ListObjectsRequest (  )  . withBucketName ( bucketName )  . withPrefix ( s 3 BucketKey )  . withMaxKeys (  1  0  0  0  )  . withDelimiter (  \"  /  \"  )  ;", "ObjectListing   objectListing    =    amazonS 3 Client . listObjects ( listObjectsRequest )  ;", "ImmutableList . Builder < String >    builder    =    ImmutableList . builder (  )  ;", "builder . addAll ( resolver . resolveRames ( objectListing )  )  ;", "while    ( objectListing . isTruncated (  )  )     {", "objectListing    =    amazonS 3 Client . listNextBatchOfObjects ( objectListing )  ;", "builder . addAll ( resolver . resolveRames ( objectListing )  )  ;", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["listDirectChildren"], "fileName": "org.gradle.internal.resource.transport.aws.s3.S3Client"}, {"methodBody": ["METHOD_START", "{", "checkRequiredJigsawModuleIsOnPath (  )  ;", "try    {", "S 3 RegionalRs 3 RegionalR =    new   S 3 RegionalRdestination )  ;", "String   bucketName    =    s 3 RegionalRgetBucketName (  )  ;", "String   s 3 BucketKey    =    s 3 RegionalRgetKey (  )  ;", "configureClient ( s 3 RegionalR ;", "ObjectMetadata   objectMetadata    =    new   ObjectMetadata (  )  ;", "objectMetadata . setContentLength ( contentLength )  ;", "PutObjectRequest   putObjectRequest    =    new   PutObjectRequest ( bucketName ,    s 3 BucketKey ,    inputStream ,    objectMetadata )  ;", "S 3 Client . LOGGER . debug (  \" Attempting   to   put   r [  {  }  ]    into   s 3    bucket    [  {  }  ]  \"  ,    s 3 BucketKey ,    bucketName )  ;", "amazonS 3 Client . putObject ( putObjectRequest )  ;", "}    catch    ( AmazonClientException   e )     {", "throw   Rxceptions . putFailed ( destination ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["put"], "fileName": "org.gradle.internal.resource.transport.aws.s3.S3Client"}, {"methodBody": ["METHOD_START", "{", "S 3 ClientOptions . Builder   clientOptionsBuilder    =    S 3 ClientOptions . builder (  )  ;", "Optional < URI >    endpoint    =    s 3 ConnectionProperties . getEndpoint (  )  ;", "if    ( endpoint . isPresent (  )  )     {", "amazonS 3 Client . setEndpoint ( endpoint . get (  )  . toString (  )  )  ;", "clientOptionsBuilder . setPathStyleAccess ( true )  . disableChunkedEncoding (  )  ;", "}", "amazonS 3 Client . setS 3 ClientOptions ( clientOptionsBuilder . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["setAmazonS3ConnectionEndpoint"], "fileName": "org.gradle.internal.resource.transport.aws.s3.S3Client"}, {"methodBody": ["METHOD_START", "{", "URI   uri    =    null ;", "if    ( StringUtils . isNotBlank ( property )  )     {", "try    {", "uri    =    new   URI ( property )  ;", "if    (  ( StringUtils . isBlank ( uri . getScheme (  )  )  )     |  |     (  !  (  . SUPPORTED _ SCHEMES . contains ( uri . getScheme (  )  . toUpperCase (  )  )  )  )  )     {", "throw   new   IllegalArgumentException (  (  (  (  (  \" System   property    [  \"     +     (  . S 3  _ ENDPOINT _ PROPERTY )  )     +     \"  =  \"  )     +    property )     +     \"  ]    must   have   a   scheme   of    ' http '    or    ' https '  \"  )  )  ;", "}", "}    catch    ( URISyntaxException   e )     {", "throw   new   IllegalArgumentException (  (  (  (  (  \" System   property    [  \"     +     (  . S 3  _ ENDPOINT _ PROPERTY )  )     +     \"  =  \"  )     +    property )     +     \"  ]       must   be   a   valid   URI \"  )  )  ;", "}", "}", "return   Optional . fromNullable ( uri )  ;", "}", "METHOD_END"], "methodName": ["configureEndpoint"], "fileName": "org.gradle.internal.resource.transport.aws.s3.S3ConnectionProperties"}, {"methodBody": ["METHOD_START", "{", "Integer   count    =    null ;", "if    ( null    !  =    property )     {", "count    =    Ints . tryParse ( property )  ;", "if    (  ( null    =  =    count )     |  |     ( count    <     0  )  )     {", "throw   new   IllegalArgumentException (  (  (  (  (  \" System   property    [  \"     +     (  . S 3  _ MAX _ ERROR _ RETRY )  )     +     \"  =  \"  )     +    property )     +     \"  ]       must   be   a   valid   positive   Integer \"  )  )  ;", "}", "}", "return   Optional . fromNullable ( count )  ;", "}", "METHOD_END"], "methodName": ["configureErrorRetryCount"], "fileName": "org.gradle.internal.resource.transport.aws.s3.S3ConnectionProperties"}, {"methodBody": ["METHOD_START", "{", "return   endpoint ;", "}", "METHOD_END"], "methodName": ["getEndpoint"], "fileName": "org.gradle.internal.resource.transport.aws.s3.S3ConnectionProperties"}, {"methodBody": ["METHOD_START", "{", "return   maxErrorRetryCount ;", "}", "METHOD_END"], "methodName": ["getMaxErrorRetryCount"], "fileName": "org.gradle.internal.resource.transport.aws.s3.S3ConnectionProperties"}, {"methodBody": ["METHOD_START", "{", "if    ( endpoint . isPresent (  )  )     {", "String   host    =    endpoint . get (  )  . getHost (  )  ;", "if    ( endpoint . get (  )  . getScheme (  )  . toUpperCase (  )  . equals (  \" HTTP \"  )  )     {", "return   OptiofromNullable ( proxySettings . getProxy ( host )  )  ;", "} else    {", "return   OptiofromNullable ( secureProxySettings . getProxy ( host )  )  ;", "}", "}", "return   OptiofromNullable ( secureProxySettings . getProxy ( S 3  _ HOSTNAME )  )  ;", "}", "METHOD_END"], "methodName": ["getProxy"], "fileName": "org.gradle.internal.resource.transport.aws.s3.S3ConnectionProperties"}, {"methodBody": ["METHOD_START", "{", "Matcher   matcher    =    S 3 RegionalResource . REGIONAL _ ENDPOINT _ PATTERN . matcher ( uri . toString (  )  )  ;", "if    ( matcher . find (  )  )     {", "String   bucketName    =    matcher . group (  1  )  ;", "String   region    =    matcher . group (  2  )  ;", "String   key    =    matcher . group (  4  )  ;", "Region   derivedRegion ;", "if    ( region . equals (  \" external -  1  \"  )  )     {", "derivedRegion    =    Region . getRegion ( US _ EAST _  1  )  ;", "} else    {", "derivedRegion    =    RegionUtils . getRegion ( region )  ;", "}", "this . region    =    Optional . of ( derivedRegion )  ;", "this . bucketName    =    bucketName ;", "this . key    =    key ;", "} else    {", "this . region    =    Optional . absent (  )  ;", "this . bucketName    =    getBucketName ( uri . getHost (  )  )  ;", "this . key    =    getS 3 BucketKey ( uri )  ;", "}", "}", "METHOD_END"], "methodName": ["configure"], "fileName": "org.gradle.internal.resource.transport.aws.s3.S3RegionalResource"}, {"methodBody": ["METHOD_START", "{", "return   bucketName ;", "}", "METHOD_END"], "methodName": ["getBucketName"], "fileName": "org.gradle.internal.resource.transport.aws.s3.S3RegionalResource"}, {"methodBody": ["METHOD_START", "{", "return   bucket . replaceAll (  \"  \\  \\  . s 3  \\  \\  . amazonaws \\  \\  . com \"  ,     \"  \"  )  . replaceAll (  \"  \\  \\  . s 3  - external -  1  \\  \\  . amazonaws \\  \\  . com \"  ,     \"  \"  )  ;", "}", "METHOD_END"], "methodName": ["getBucketName"], "fileName": "org.gradle.internal.resource.transport.aws.s3.S3RegionalResource"}, {"methodBody": ["METHOD_START", "{", "return   key ;", "}", "METHOD_END"], "methodName": ["getKey"], "fileName": "org.gradle.internal.resource.transport.aws.s3.S3RegionalResource"}, {"methodBody": ["METHOD_START", "{", "return   region ;", "}", "METHOD_END"], "methodName": ["getRegion"], "fileName": "org.gradle.internal.resource.transport.aws.s3.S3RegionalResource"}, {"methodBody": ["METHOD_START", "{", "String   path    =    destination . getPath (  )  ;", "return   path . startsWith (  \"  /  \"  )     ?    path . substring (  1  )     :    path ;", "}", "METHOD_END"], "methodName": ["getS3BucketKey"], "fileName": "org.gradle.internal.resource.transport.aws.s3.S3RegionalResource"}, {"methodBody": ["METHOD_START", "{", "return   s 3 Object . getObjectMetadata (  )  . getContentLength (  )  ;", "}", "METHOD_END"], "methodName": ["getContentLength"], "fileName": "org.gradle.internal.resource.transport.aws.s3.S3Resource"}, {"methodBody": ["METHOD_START", "{", "ObjectMetadata   objectMetadata    =    s 3 Object . getObjectMetadata (  )  ;", "Date   lastModified    =    objectMetadata . getLastModified (  )  ;", "return   new   metadata . DefaultExternalResourceMetaData ( uri ,    lastModified . getTime (  )  ,    getContentLength (  )  ,    s 3 Object . getObjectMetadata (  )  . getContentType (  )  ,    s 3 Object . getObjectMetadata (  )  . getETag (  )  ,    null )  ;", "}", "METHOD_END"], "methodName": ["getMetaData"], "fileName": "org.gradle.internal.resource.transport.aws.s3.S3Resource"}, {"methodBody": ["METHOD_START", "{", "return   uri ;", "}", "METHOD_END"], "methodName": ["getURI"], "fileName": "org.gradle.internal.resource.transport.aws.s3.S3Resource"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isLocal"], "fileName": "org.gradle.internal.resource.transport.aws.s3.S3Resource"}, {"methodBody": ["METHOD_START", "{", "return   s 3 Object . getObjectContent (  )  ;", "}", "METHOD_END"], "methodName": ["openStream"], "fileName": "org.gradle.internal.resource.transport.aws.s3.S3Resource"}, {"methodBody": ["METHOD_START", "{", "S 3 ResourceConnector . LOGGER . debug (  \" Attempting   to   get   resource   metadata :     {  }  \"  ,    location )  ;", "S 3 Object   s 3 Object    =    s 3 Client . getMetaData ( location )  ;", "if    ( s 3 Object    =  =    null )     {", "return   null ;", "}", "try    {", "ObjectMetadata   objectMetadata    =    s 3 Object . getObjectMetadata (  )  ;", "return   new   metadata . DefaultExternalResourceMetaData ( location ,    objectMetadata . getLastModified (  )  . getTime (  )  ,    objectMetadata . getContentLength (  )  ,    objectMetadata . getContentType (  )  ,    objectMetadata . getETag (  )  ,    null )  ;", "}    finally    {", "IoActions . closeQuietly ( s 3 Object )  ;", "}", "}", "METHOD_END"], "methodName": ["getMetaData"], "fileName": "org.gradle.internal.resource.transport.aws.s3.S3ResourceConnector"}, {"methodBody": ["METHOD_START", "{", "S 3 ResourceConnector . LOGGER . debug (  \" Listing   parent   resources :     {  }  \"  ,    parent )  ;", "return   s 3 Client . listDirectChildren ( parent )  ;", "}", "METHOD_END"], "methodName": ["list"], "fileName": "org.gradle.internal.resource.transport.aws.s3.S3ResourceConnector"}, {"methodBody": ["METHOD_START", "{", "S 3 ResourceConnector . LOGGER . debug (  \" Attempting   to   get   resource :     {  }  \"  ,    location )  ;", "S 3 Object   s 3 Object    =    s 3 Client . getResource ( location )  ;", "if    ( s 3 Object    =  =    null )     {", "return   null ;", "}", "return   new   S 3 Resource ( s 3 Object ,    location )  ;", "}", "METHOD_END"], "methodName": ["openResource"], "fileName": "org.gradle.internal.resource.transport.aws.s3.S3ResourceConnector"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < String >    builder    =    ImmutableList . builder (  )  ;", "if    (  ( objectListing . getCommonPrefixes (  )  )     !  =    null )     {", "for    ( String   prefix    :    objectListing . getCommonPrefixes (  )  )     {", "String   directChild    =    prefix . split ( Pat . quote ( objectListing . getPrefix (  )  )  )  [  1  ]  ;", "if    ( directChild . endsWith (  \"  /  \"  )  )     {", "builder . add ( directChild . substring (  0  ,     (  ( directChild . length (  )  )     -     1  )  )  )  ;", "} else    {", "builder . add ( directChild )  ;", "}", "}", "return   builder . build (  )  ;", "}", "return   Collections . emptyList (  )  ;", "}", "METHOD_END"], "methodName": ["resolveDirectoryResourceNames"], "fileName": "org.gradle.internal.resource.transport.aws.s3.S3ResourceResolver"}, {"methodBody": ["METHOD_START", "{", "List < S 3 ObjectSummary >    objectSummaries    =    objectListing . getObjectSummaries (  )  ;", "if    ( null    !  =    objectSummaries )     {", "return   ImmutableList . copyOf ( Iterables . filter ( Iterables . transform ( objectSummaries ,     . EXTRACT _ FILE _ NAME )  ,    Predicates . notNull (  )  )  )  ;", "}", "return   Collections . emptyList (  )  ;", "}", "METHOD_END"], "methodName": ["resolveFileResourceNames"], "fileName": "org.gradle.internal.resource.transport.aws.s3.S3ResourceResolver"}, {"methodBody": ["METHOD_START", "{", "List < String >    results    =    new   ArrayList < String >  (  )  ;", "results . addAll ( resolveFileNames ( objectListing )  )  ;", "results . addAll ( resolveDirectoryNames ( objectListing )  )  ;", "return   results ;", "}", "METHOD_END"], "methodName": ["resolveResourceNames"], "fileName": "org.gradle.internal.resource.transport.aws.s3.S3ResourceResolver"}, {"methodBody": ["METHOD_START", "{", "registration . addProvider ( new   S 3 ResourcesPluginServiceRegistry . AuthenticationSchemeAction (  )  )  ;", "}", "METHOD_END"], "methodName": ["registerBuildServices"], "fileName": "org.gradle.internal.resource.transport.aws.s3.S3ResourcesPluginServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "registration . addProvider ( new   S 3 ResourcesPluginServiceRegistry . GlobalScopeServices (  )  )  ;", "}", "METHOD_END"], "methodName": ["registerGlobalServices"], "fileName": "org.gradle.internal.resource.transport.aws.s3.S3ResourcesPluginServiceRegistry"}]