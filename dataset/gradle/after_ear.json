[{"methodBody": ["METHOD_START", "{", "ConfigureUtil . configure ( configureClosure ,    forceDeploymentDescriptor (  )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["deploymentDescriptor"], "fileName": "org.gradle.plugins.ear.Ear"}, {"methodBody": ["METHOD_START", "{", "configureAction . execute ( forceDeploymentDescriptor (  )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["deploymentDescriptor"], "fileName": "org.gradle.plugins.ear.Ear"}, {"methodBody": ["METHOD_START", "{", "if    (  ( deploymentDescriptor )     =  =    null )     {", "deploymentDescriptor    =    getObjectFactory (  )  . newInstance ( DefaultDeploymentDescriptor . class ,    getFileResolver (  )  ,    getObjectFactory (  )  )  ;", "}", "return   deploymentDescriptor ;", "}", "METHOD_END"], "methodName": ["forceDeploymentDescriptor"], "fileName": "org.gradle.plugins.ear.Ear"}, {"methodBody": ["METHOD_START", "{", "return   deploymentDescriptor ;", "}", "METHOD_END"], "methodName": ["getDeploymentDescriptor"], "fileName": "org.gradle.plugins.ear.Ear"}, {"methodBody": ["METHOD_START", "{", "return    (  ( CopySpecInternal )     ( lib )  )  . addChild (  )  ;", "}", "METHOD_END"], "methodName": ["getLib"], "fileName": "org.gradle.plugins.ear.Ear"}, {"methodBody": ["METHOD_START", "{", "return   libDirName ;", "}", "METHOD_END"], "methodName": ["getLibDirName"], "fileName": "org.gradle.plugins.ear.Ear"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getObjectFactory"], "fileName": "org.gradle.plugins.ear.Ear"}, {"methodBody": ["METHOD_START", "{", "return   ConfigureUtil . configure ( configureClosure ,    getLib (  )  )  ;", "}", "METHOD_END"], "methodName": ["lib"], "fileName": "org.gradle.plugins.ear.Ear"}, {"methodBody": ["METHOD_START", "{", "CopySc   copySc    =    tLib (  )  ;", "configuActioncu ( copySc )  ;", "turn   copySc ;", "}", "METHOD_END"], "methodName": ["lib"], "fileName": "org.gradle.plugins.ear.Ear"}, {"methodBody": ["METHOD_START", "{", "this . deploymentDescriptor    =    deploymentDescriptor ;", "}", "METHOD_END"], "methodName": ["setDeploymentDescriptor"], "fileName": "org.gradle.plugins.ear.Ear"}, {"methodBody": ["METHOD_START", "{", "this . libDirName    =    libDirName ;", "}", "METHOD_END"], "methodName": ["setLibDirName"], "fileName": "org.gradle.plugins.ear.Ear"}, {"methodBody": ["METHOD_START", "{", "project . getPluginManager (  )  . apply ( BasePlugin . class )  ;", "final   Convention   earPluginConvention    =    objectFactory . newInstance ( Convention . class ,    fileResolver ,    objectFactory )  ;", "project . getConvention (  )  . getPlugins (  )  . put (  \" ear \"  ,    earPluginConvention )  ;", "earPluginConvention . setLibDirName (  . DEFAULT _ LIB _ DIR _ NAME )  ;", "earPluginConvention . setAppDirName (  \" src / main / application \"  )  ;", "wireEarTaskConventions ( project ,    earPluginConvention )  ;", "configureConfigurations ( project )  ;", "PluginContainer   plugins    =    project . getPlugins (  )  ;", "setupEarTask ( project ,    earPluginConvention )  ;", "configureWithJavaPluginApplied ( project ,    earPluginConvention ,    plugins )  ;", "configureWithNoJavaPluginApplied ( project ,    earPluginConvention )  ;", "}", "METHOD_END"], "methodName": ["apply"], "fileName": "org.gradle.plugins.ear.EarPlugin"}, {"methodBody": ["METHOD_START", "{", "ConfigurationContainer   configurations    =    project . getConfigurations (  )  ;", "Configuration   moduleConfiguration    =    configurations . create (  . DEPLOY _ CONFIGURATION _ NAME )  . setVisible ( false )  . setTransitive ( false )  . setDescription (  \" Classpath   for   deployable   modules ,    not   transitive .  \"  )  ;", "Configuration   earlibConfiguration    =    configurations . create (  . EARLIB _ CONFIGURATION _ NAME )  . setVisible ( false )  . setDescription (  \" Classpath   for   module   dependencies .  \"  )  ;", "configurations . getByName ( DEFAULT _ CONFIGURATION )  . extendsFrom ( moduleConfiguration ,    earlibConfiguration )  ;", "}", "METHOD_END"], "methodName": ["configureConfigurations"], "fileName": "org.gradle.plugins.ear.EarPlugin"}, {"methodBody": ["METHOD_START", "{", "plugins . withType ( JavaPlugin . class ,    new   Action < JavaPlugin >  (  )     {", "public   void   execute ( JavaPlugin   javaPlugin )     {", "final   JavaPluginConvention   javaPluginConvention    =    project . getConvention (  )  . findPlugin ( JavaPluginConvention . class )  ;", "SourceSet   sourceSet    =    getSourceSets (  )  . getByName ( MAIN _ SOURCE _ SET _ NAME )  ;", "sourceSet . getResources (  )  . srcDir ( new   Callable (  )     {", "public   Object   call (  )    throws   Exception    {", "return   earPluginConvention . getAppDirName (  )  ;", "}", "}  )  ;", "project . getTasks (  )  . withType ( Ear . class ,    new   Action < Ear >  (  )     {", "public   void   execute ( final   Ear   task )     {", "task . dependsOn ( new   Callable < FileCollection >  (  )     {", "public   FileCollection   call (  )    throws   Exception    {", "return   getSourceSets (  )  . getByName ( MAIN _ SOURCE _ SET _ NAME )  . getRuntimeClasspath (  )  ;", "}", "}  )  ;", "task . from ( new   Callable < FileCollection >  (  )     {", "public   FileCollection   call (  )    throws   Exception    {", "return   getSourceSets (  )  . getByName ( MAIN _ SOURCE _ SET _ NAME )  . getOutput (  )  ;", "}", "}  )  ;", "}", "}  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureWithJavaPluginApplied"], "fileName": "org.gradle.plugins.ear.EarPlugin"}, {"methodBody": ["METHOD_START", "{", "project . getTasks (  )  . withType ( Ear . class ,    new   Action < Ear >  (  )     {", "public   void   execute ( final   Ear   task )     {", "task . from ( new   Callable < FileCollection >  (  )     {", "public   FileCollection   call (  )    throws   Exception    {", "if    ( project . getPlugins (  )  . hasPlugin ( JavaPlugin . class )  )     {", "return   null ;", "} else    {", "return   project . fileTree ( earPluginConvention . getAppDirName (  )  )  ;", "}", "}", "}  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureWithNoJavaPluginApplied"], "fileName": "org.gradle.plugins.ear.EarPlugin"}, {"methodBody": ["METHOD_START", "{", "Ear   ear    =    project . getTasks (  )  . create ( EarPlugin . EAR _ TASK _ NAME ,    Ear . class )  ;", "ear . setDescription (  \" Generates   a   ear   archive   with   all   the   modules ,    the   application   descriptor   and   the   libraries .  \"  )  ;", "DeploymentDescriptor   deploymentDescriptor    =    convention . getDeploymentDescriptor (  )  ;", "if    ( deploymentDescriptor    !  =    null )     {", "if    (  ( deploymentDescriptor . getDisplayName (  )  )     =  =    null )     {", "deploymentDescriptor . setDisplayName ( project . getName (  )  )  ;", "}", "if    (  ( deploymentDescriptor . getDescription (  )  )     =  =    null )     {", "deploymentDescriptor . setDescription ( project . getDescription (  )  )  ;", "}", "}", "ear . setGroup ( BUILD _ GROUP )  ;", "project . getExtensions (  )  . getByType ( DefaultArtifactPublicationSet . class )  . addCandidate ( new   ArchivePublishArtifact ( ear )  )  ;", "project . getTasks (  )  . withType ( Ear . class ,    new   api . Action < Ear >  (  )     {", "public   void   execute ( Ear   task )     {", "task . getLib (  )  . from ( new   Callable < FileCollection >  (  )     {", "public   FileCollection   call (  )    throws   Exception    {", "return   project . getConfigurations (  )  . getByName ( EarPlugin . EARLIB _ CONFIGURATION _ NAME )  . minus ( project . getConfigurations (  )  . getByName ( EarPlugin . DEPLOY _ CONFIGURATION _ NAME )  )  ;", "}", "}  )  ;", "task . from ( new   Callable < FileCollection >  (  )     {", "public   FileCollection   call (  )    throws   Exception    {", "return   project . getConfigurations (  )  . getByName ( EarPlugin . DEPLOY _ CONFIGURATION _ NAME )  ;", "}", "}  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["setupEarTask"], "fileName": "org.gradle.plugins.ear.EarPlugin"}, {"methodBody": ["METHOD_START", "{", "project . getTasks (  )  . withType ( Ear . class ,    new   Action < Ear >  (  )     {", "public   void   execute ( Ear   task )     {", "task . getConventionMapping (  )  . map (  \" libDirName \"  ,    new   Callable < String >  (  )     {", "public   String   call (  )    throws   Exception    {", "return   earConvention . getLibDirName (  )  ;", "}", "}  )  ;", "task . getConventionMapping (  )  . map (  \" deploymentDescriptor \"  ,    new   Callable < DeploymentDescriptor >  (  )     {", "public   DeploymentDescriptor   call (  )    throws   Exception    {", "return   earConvention . getDeploymentDescriptor (  )  ;", "}", "}  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["wireEarTaskConventions"], "fileName": "org.gradle.plugins.ear.EarPlugin"}, {"methodBody": ["METHOD_START", "{", "this . setAppDirName ( appDirName )  ;", "}", "METHOD_END"], "methodName": ["appDirName"], "fileName": "org.gradle.plugins.ear.EarPluginConvention"}, {"methodBody": ["METHOD_START", "{", "ConfigureUtil . configure ( configureClosure ,    forceDeploymentDescriptor (  )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["deploymentDescriptor"], "fileName": "org.gradle.plugins.ear.EarPluginConvention"}, {"methodBody": ["METHOD_START", "{", "configureAction . execute ( forceDeploymentDescriptor (  )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["deploymentDescriptor"], "fileName": "org.gradle.plugins.ear.EarPluginConvention"}, {"methodBody": ["METHOD_START", "{", "if    (  ( deploymentDescriptor )     =  =    null )     {", "deploymentDescriptor    =    objectFactory . newInstance ( DefaultDeploymentDescriptor . class ,    fileResolver ,    objectFactory )  ;", "assert    ( deploymentDescriptor )     !  =    null ;", "}", "return   deploymentDescriptor ;", "}", "METHOD_END"], "methodName": ["forceDeploymentDescriptor"], "fileName": "org.gradle.plugins.ear.EarPluginConvention"}, {"methodBody": ["METHOD_START", "{", "return   appDirName ;", "}", "METHOD_END"], "methodName": ["getAppDirName"], "fileName": "org.gradle.plugins.ear.EarPluginConvention"}, {"methodBody": ["METHOD_START", "{", "return   deploymentDescriptor ;", "}", "METHOD_END"], "methodName": ["getDeploymentDescriptor"], "fileName": "org.gradle.plugins.ear.EarPluginConvention"}, {"methodBody": ["METHOD_START", "{", "return   libDirName ;", "}", "METHOD_END"], "methodName": ["getLibDirName"], "fileName": "org.gradle.plugins.ear.EarPluginConvention"}, {"methodBody": ["METHOD_START", "{", "this . libDirName    =    libDirName ;", "}", "METHOD_END"], "methodName": ["libDirName"], "fileName": "org.gradle.plugins.ear.EarPluginConvention"}, {"methodBody": ["METHOD_START", "{", "this . appDirName    =    appDirName ;", "if    (  ( deploymDescriptor )     !  =    null )     {", "deploymDescriptor . readFrom ( new   File ( appDirName ,     (  \" META - INF /  \"     +     ( deploymDescriptor . getFileName (  )  )  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["setAppDirName"], "fileName": "org.gradle.plugins.ear.EarPluginConvention"}, {"methodBody": ["METHOD_START", "{", "this . deploymentDescriptor    =    deploymentDescriptor ;", "}", "METHOD_END"], "methodName": ["setDeploymentDescriptor"], "fileName": "org.gradle.plugins.ear.EarPluginConvention"}, {"methodBody": ["METHOD_START", "{", "this . libDirName    =    libDirName ;", "}", "METHOD_END"], "methodName": ["setLibDirName"], "fileName": "org.gradle.plugins.ear.EarPluginConvention"}, {"methodBody": ["METHOD_START", "{", "for    ( Node   child    :    Cast .  < List < Node >  > uncheckedCast ( root . children (  )  )  )     {", "if    (  . localNameOf ( child )  . equals ( name )  )     {", "return   child . text (  )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["childNodeText"], "fileName": "org.gradle.plugins.ear.descriptor.internal.DefaultDeploymentDescriptor"}, {"methodBody": ["METHOD_START", "{", "try    {", "XmlParser   parser    =    new   XmlParser ( false ,    true ,    true )  ;", "try    {", "parser . setProperty (  . ACCESS _ EXTERNAL _ DTD ,     . ALLOW _ ANY _ EXTERNAL _ DTD )  ;", "}    catch    ( SAXNotRecognizedException   ignore )     {", "}", "return   parser ;", "}    catch    ( Exception   ex )     {", "throw   new   UncheckedException ( ex )  ;", "}", "}", "METHOD_END"], "methodName": ["createParser"], "fileName": "org.gradle.plugins.ear.descriptor.internal.DefaultDeploymentDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   transformer ;", "}", "METHOD_END"], "methodName": ["getTransformer"], "fileName": "org.gradle.plugins.ear.descriptor.internal.DefaultDeploymentDescriptor"}, {"methodBody": ["METHOD_START", "{", "return    ( node . name (  )  )    instanceof   QName    ?     (  ( QName )     ( node . name (  )  )  )  . getLocalPart (  )     :    String . valueOf ( node . name (  )  )  ;", "}", "METHOD_END"], "methodName": ["localNameOf"], "fileName": "org.gradle.plugins.ear.descriptor.internal.DefaultDeploymentDescriptor"}, {"methodBody": ["METHOD_START", "{", "String   name    =    moduleTypeMappings . get ( module . getPath (  )  )  ;", "if    ( name    =  =    null )     {", "if    ( module   instanceof   EarWebModule )     {", "name    =     \" web \"  ;", "} else    {", "name    =     \" ejb \"  ;", "}", "}", "return   nodeNameFor ( name )  ;", "}", "METHOD_END"], "methodName": ["moduleNameFor"], "fileName": "org.gradle.plugins.ear.descriptor.internal.DefaultDeploymentDescriptor"}, {"methodBody": ["METHOD_START", "{", "if    (  \"  1  .  3  \"  . equals ( version )  )     {", "return   name ;", "} else", "if    (  \"  1  .  4  \"  . equals ( version )  )     {", "return   new   groovy . xml . QName (  \" http :  /  / com / xml / ns / j 2 ee \"  ,    name )  ;", "} else", "if    (  (  \"  5  \"  . equals ( version )  )     |  |     (  \"  6  \"  . equals ( version )  )  )     {", "return   new   groovy . xml . QName (  \" http :  /  / com / xml / ns / javaee \"  ,    name )  ;", "} else", "if    (  \"  7  \"  . equals ( version )  )     {", "return   new   groovy . xml . QName (  \" http :  /  / xmlns . jcp .  / xml / ns / javaee \"  ,    name )  ;", "} else    {", "return   new   groovy . xml . QName ( name )  ;", "}", "}", "METHOD_END"], "methodName": ["nodeNameFor"], "fileName": "org.gradle.plugins.ear.descriptor.internal.DefaultDeploymentDescriptor"}, {"methodBody": ["METHOD_START", "{", "DomNode   root    =    new   DomNode ( nodeNameFor (  \" application \"  )  )  ;", "root . attributes (  )  . put (  \" version \"  ,    version )  ;", "if    (  !  (  \"  1  .  3  \"  . equals ( version )  )  )     {", "root . attributes (  )  . put (  \" xmlns : xsi \"  ,     \" http :  /  / www . w 3  . org /  2  0  0  1  / XMLSchema - instance \"  )  ;", "}", "if    (  \"  1  .  3  \"  . equals ( version )  )     {", "root . setPublicId (  \"  -  /  / Sun   Microsystems ,    Inc .  /  / DTD   J 2 EE   Application    1  .  3  /  / EN \"  )  ;", "root . setSystemId (  \" http :  /  / com / dtd / application _  1  _  3  . dtd \"  )  ;", "} else", "if    (  \"  1  .  4  \"  . equals ( version )  )     {", "root . attributes (  )  . put (  \" xsi : schemaLocation \"  ,     \" http :  /  / com / xml / ns / j 2 ee   http :  /  / com / xml / ns / j 2 ee / application _  1  _  4  . xsd \"  )  ;", "} else", "if    (  (  \"  5  \"  . equals ( version )  )     |  |     (  \"  6  \"  . equals ( version )  )  )     {", "root . attributes (  )  . put (  \" xsi : schemaLocation \"  ,     (  (  \" http :  /  / com / xml / ns / javaee   http :  /  / com / xml / ns / javaee / application _  \"     +     ( version )  )     +     \"  . xsd \"  )  )  ;", "} else", "if    (  \"  7  \"  . equals ( version )  )     {", "root . attributes (  )  . put (  \" xsi : schemaLocation \"  ,     (  (  \" http :  /  / xmlns . jcp . org / xml / ns / javaee   http :  /  / xmlns . jcp . org / xml / ns / javaee / application _  \"     +     ( version )  )     +     \"  . xsd \"  )  )  ;", "}", "if    (  ( applicationName )     !  =    null )     {", "new   Node ( root ,    nodeNameFor (  \" application - name \"  )  ,    applicationName )  ;", "}", "if    (  ( description )     !  =    null )     {", "new   Node ( root ,    nodeNameFor (  \" description \"  )  ,    description )  ;", "}", "if    (  ( displayName )     !  =    null )     {", "new   Node ( root ,    nodeNameFor (  \" display - name \"  )  ,    displayName )  ;", "}", "if    (  (  ( initializeInOrder )     !  =    null )     &  &     ( initializeInOrder )  )     {", "new   Node ( root ,    nodeNameFor (  \" initialize - in - order \"  )  ,    initializeInOrder )  ;", "}", "for    ( EarModule   module    :    modules )     {", "Node   moduleNode    =    new   Node ( root ,    nodeNameFor (  \" module \"  )  )  ;", "module . toXmlNode ( moduleNode ,    moduleNameFor ( module )  )  ;", "}", "if    (  ( securityRoles )     !  =    null )     {", "for    ( EarSecurityRole   role    :    securityRoles )     {", "Node   roleNode    =    new   Node ( root ,    nodeNameFor (  \" security - role \"  )  )  ;", "if    (  ( role . geion (  )  )     !  =    null )     {", "new   Node ( roleNode ,    nodeNameFor (  \" description \"  )  ,    role . geion (  )  )  ;", "}", "new   Node ( roleNode ,    nodeNameFor (  \" role - name \"  )  ,    role . getRoleName (  )  )  ;", "}", "}", "if    (  ( libraryDirectory )     !  =    null )     {", "new   Node ( root ,    nodeNameFor (  \" library - directory \"  )  ,    libraryDirectory )  ;", "}", "return   root ;", "}", "METHOD_END"], "methodName": ["toXmlNode"], "fileName": "org.gradle.plugins.ear.descriptor.internal.DefaultDeploymentDescriptor"}, {"methodBody": ["METHOD_START", "{", "if    ( sampleName   instanceof   QName )     {", "return   new   QName (  (  ( QName )     ( sampleName )  )  . getNamespaceURI (  )  ,    name )  ;", "}", "return   name ;", "}", "METHOD_END"], "methodName": ["nodeNameFor"], "fileName": "org.gradle.plugins.ear.descriptor.internal.DefaultEarModule"}]