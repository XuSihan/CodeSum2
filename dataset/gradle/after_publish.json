[{"methodBody": ["METHOD_START", "{", "return   publications ;", "}", "METHOD_END"], "methodName": ["getPublications"], "fileName": "org.gradle.api.publish.internal.DefaultPublishingExtension"}, {"methodBody": ["METHOD_START", "{", "return   repositories ;", "}", "METHOD_END"], "methodName": ["getRepositories"], "fileName": "org.gradle.api.publish.internal.DefaultPublishingExtension"}, {"methodBody": ["METHOD_START", "{", "configure . execute ( publications )  ;", "}", "METHOD_END"], "methodName": ["publications"], "fileName": "org.gradle.api.publish.internal.DefaultPublishingExtension"}, {"methodBody": ["METHOD_START", "{", "configure . execute ( repositories )  ;", "}", "METHOD_END"], "methodName": ["repositories"], "fileName": "org.gradle.api.publish.internal.DefaultPublishingExtension"}, {"methodBody": ["METHOD_START", "{", "for    ( PublicationInternal   publication    :    publications )     {", "if    (  ( publication . getComponent (  )  )     !  =    null )     {", "ModuleVersionIdentifier   moduleVersionIdentifier    =    publication . getCoordinates (  )  ;", "ImmutableAttributes   attributes    =    publication . getAttributes (  )  ;", "coordinates . put ( publication . getComponent (  )  ,    new    . ComponentData ( moduleVersionIdentifier ,    attributes )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["collectCoordinates"], "fileName": "org.gradle.api.publish.internal.ModuleMetadataFileGenerator"}, {"methodBody": ["METHOD_START", "{", "for    ( PublicationInternal   publication    :    publications )     {", "if    (  ( publication . getComponent (  )  )    instanceof   ComponentWithVariants )     {", "ComponentWithVariants   componentWithVariants    =     (  ( ComponentWithVariants )     ( publication . getComponent (  )  )  )  ;", "for    ( SoftwareComponent   child    :    componentWithVariants . getVariants (  )  )     {", "owners . put ( child ,    publication . getComponent (  )  )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["collectOwners"], "fileName": "org.gradle.api.publish.internal.ModuleMetadataFileGenerator"}, {"methodBody": ["METHOD_START", "{", "Map < SoftwareComponent ,    ModuleMetadataFileGenerator . ComponentData >    coordinates    =    new   HashMap < SoftwareComponent ,    ModuleMetadataFileGenerator . ComponentData >  (  )  ;", "collectCoordinates ( publications ,    coordinates )  ;", "Map < SoftwareComponent ,    SoftwareComponent >    owners    =    new   HashMap < SoftwareComponent ,    SoftwareComponent >  (  )  ;", "collectOwners ( publications ,    owners )  ;", "JsonWriter   jsonWriter    =    new   JsonWriter ( writer )  ;", "jsonWriter . setHtmlSafe ( false )  ;", "jsonWriter . setIndent (  \"        \"  )  ;", "writeComponentWithVariants ( publication ,    publication . getComponent (  )  ,    coordinates ,    owners ,    jsonWriter )  ;", "jsonWriter . flush (  )  ;", "writer . append (  '  \\ n '  )  ;", "}", "METHOD_END"], "methodName": ["generateTo"], "fileName": "org.gradle.api.publish.internal.ModuleMetadataFileGenerator"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   path    =    new   StringBuilder (  )  ;", "path . append (  \"  .  .  /  .  .  /  \"  )  ;", "path . append ( to . getName (  )  )  ;", "path . append (  \"  /  \"  )  ;", "path . append ( to . getVersion (  )  )  ;", "path . append (  \"  /  \"  )  ;", "path . append ( to . getName (  )  )  ;", "path . append (  \"  -  \"  )  ;", "path . append ( to . getVersion (  )  )  ;", "path . append (  \"  . m \"  )  ;", "return   path . toString (  )  ;", "}", "METHOD_END"], "methodName": ["relativeUrlTo"], "fileName": "org.gradle.api.publish.internal.ModuleMetadataFileGenerator"}, {"methodBody": ["METHOD_START", "{", "PublicationInternal . PublishedFile   publishedFile    =    publication . getPublishedFile ( artifact )  ;", "jsonWriter . beginObject (  )  ;", "jsonWriter . name (  \" name \"  )  ;", "jsonWriter . value ( publishedFile . getName (  )  )  ;", "jsonWriter . name (  \" url \"  )  ;", "jsonWriter . value ( publishedFile . getUri (  )  )  ;", "jsonWriter . name (  \" size \"  )  ;", "jsonWriter . value ( artifact . getFile (  )  . length (  )  )  ;", "jsonWriter . name (  \" sha 1  \"  )  ;", "jsonWriter . value ( HashUtil . sha 1  ( artifact . getFile (  )  )  . asHexString (  )  )  ;", "jsonWriter . name (  \" md 5  \"  )  ;", "jsonWriter . value ( HashUtil . createHash ( artifact . getFile (  )  ,     \" md 5  \"  )  . asHexString (  )  )  ;", "jsonWriter . endObject (  )  ;", "}", "METHOD_END"], "methodName": ["writeArtifact"], "fileName": "org.gradle.api.publish.internal.ModuleMetadataFileGenerator"}, {"methodBody": ["METHOD_START", "{", "if    ( variant . getArtifacts (  )  . isEmpty (  )  )     {", "return ;", "}", "jsonWriter . name (  \" files \"  )  ;", "jsonWriter . beginArray (  )  ;", "for    ( PArtifact   artifact    :    variant . getArtifacts (  )  )     {", "writeArtifact ( publication ,    artifact ,    jsonWriter )  ;", "}", "jsonWriter . endArray (  )  ;", "}", "METHOD_END"], "methodName": ["writeArtifacts"], "fileName": "org.gradle.api.publish.internal.ModuleMetadataFileGenerator"}, {"methodBody": ["METHOD_START", "{", "if    ( attributes . isEmpty (  )  )     {", "return ;", "}", "jsonWriter . name (  \" attributes \"  )  ;", "jsonWriter . beginObject (  )  ;", "Map < String ,    Attribute <  ?  >  >    sortedAttributes    =    new   TreeMap < String ,    Attribute <  ?  >  >  (  )  ;", "for    ( Attribute <  ?  >    attribute    :    attributes . keySet (  )  )     {", "sortedAttributes . put ( attribute . getName (  )  ,    attribute )  ;", "}", "for    ( Attribute <  ?  >    attribute    :    sortedAttributes . values (  )  )     {", "jsonWriter . name ( attribute . getName (  )  )  ;", "Object   value    =    attributes . getAttribute ( attribute )  ;", "if    ( value   instanceof   Boolean )     {", "Boolean   b    =     (  ( Boolean )     ( value )  )  ;", "jsonWriter . value ( b )  ;", "} else", "if    ( value   instanceof   String )     {", "String   s    =     (  ( String )     ( value )  )  ;", "jsonWriter . value ( s )  ;", "} else", "if    ( value   instanceof   Named )     {", "Named   named    =     (  ( Named )     ( value )  )  ;", "jsonWriter . value ( named . getName (  )  )  ;", "} else", "if    ( value   instanceof   Enum )     {", "Enum <  ?  >    enumValue    =     (  ( Enum <  ?  >  )     ( value )  )  ;", "jsonWriter . value ( enumValue . name (  )  )  ;", "} else    {", "throw   new   IllegalArgumentException ( String . format (  \" Cannot   write   attribute    % s   with   unsupported   value    % s   of   type    % s .  \"  ,    attribute . getName (  )  ,    value ,    value . getClass (  )  . getName (  )  )  )  ;", "}", "}", "jsonWriter . endObject (  )  ;", "}", "METHOD_END"], "methodName": ["writeAttributes"], "fileName": "org.gradle.api.publish.internal.ModuleMetadataFileGenerator"}, {"methodBody": ["METHOD_START", "{", "Set <  ?    extends   Capability >    capabilities    =    variant . getCapabilities (  )  ;", "if    (  !  ( capabilities . isEmpty (  )  )  )     {", "jsonWri . name (  \" capabilities \"  )  ;", "jsonWri . beginArray (  )  ;", "for    ( Capability   capability    :    capabilities )     {", "jsonWri . beginObject (  )  ;", "jsonWri . name (  \" group \"  )  . value ( capability . getGroup (  )  )  ;", "jsonWri . name (  \" name \"  )  . value ( capability . getName (  )  )  ;", "jsonWri . name (  \" version \"  )  . value ( capability . getVersion (  )  )  ;", "jsonWri . endObject (  )  ;", "}", "jsonWri . endArray (  )  ;", "}", "}", "METHOD_END"], "methodName": ["writeCapabilities"], "fileName": "org.gradle.api.publish.internal.ModuleMetadataFileGenerator"}, {"methodBody": ["METHOD_START", "{", "jsonWriter . beginObject (  )  ;", "writeFormat ( jsonWriter )  ;", "writeIdentity ( cation . getCoordinates (  )  ,    cation . getAttributes (  )  ,    component ,    componentCoordinates ,    owners ,    jsonWriter )  ;", "writeCreator ( jsonWriter )  ;", "writeVariants ( cation ,    component ,    componentCoordinates ,    jsonWriter )  ;", "jsonWriter . endObject (  )  ;", "}", "METHOD_END"], "methodName": ["writeComponentWithVariants"], "fileName": "org.gradle.api.publish.internal.ModuleMetadataFileGenerator"}, {"methodBody": ["METHOD_START", "{", "jsonWriter . name (  \" createdBy \"  )  ;", "jsonWriter . beginObject (  )  ;", "jsonWriter . name (  \"  \"  )  ;", "jsonWriter . beginObject (  )  ;", "jsonWriter . name (  \" version \"  )  ;", "jsonWriter . value ( GradleVersion . current (  )  . getVersion (  )  )  ;", "jsonWriter . name (  \" buildId \"  )  ;", "jsonWriter . value ( buildInvocationScopeId . getId (  )  . asString (  )  )  ;", "jsonWriter . endObject (  )  ;", "jsonWriter . endObject (  )  ;", "}", "METHOD_END"], "methodName": ["writeCreator"], "fileName": "org.gradle.api.publish.internal.ModuleMetadataFileGenerator"}, {"methodBody": ["METHOD_START", "{", "if    ( variant . getDependencies (  )  . isEmpty (  )  )     {", "return ;", "}", "jsonWriter . name (  \" dependencies \"  )  ;", "jsonWriter . beginArray (  )  ;", "for    ( Dependency   moduleDependency    :    variant . getDependencies (  )  )     {", "writeDependency ( moduleDependency ,    jsonWriter )  ;", "}", "jsonWriter . endArray (  )  ;", "}", "METHOD_END"], "methodName": ["writeDependencies"], "fileName": "org.gradle.api.publish.internal.ModuleMetadataFileGenerator"}, {"methodBody": ["METHOD_START", "{", "jsonWriter . beginObject (  )  ;", "if    ( dependency   instanceof   ProjectDependency )     {", "ProjectDependency   projectDependency    =     (  ( ProjectDependency )     ( dependency )  )  ;", "VersionIdentifier   identifier    =    projectDependencyResolver . resolve ( VersionIdentifier . class ,    projectDependency )  ;", "jsonWriter . name (  \" group \"  )  ;", "jsonWriter . value ( identifier . getGroup (  )  )  ;", "jsonWriter . name (  \" module \"  )  ;", "jsonWriter . value ( identifier . getName (  )  )  ;", "writeVersionConstraint ( DefaultImmutableVersionConstraint . of ( identifier . getVersion (  )  )  ,    jsonWriter )  ;", "} else    {", "jsonWriter . name (  \" group \"  )  ;", "jsonWriter . value ( dependency . getGroup (  )  )  ;", "jsonWriter . name (  \" module \"  )  ;", "jsonWriter . value ( dependency . getName (  )  )  ;", "VersionConstraint   vc ;", "if    ( dependency   instanceof   VersionSelector )     {", "vc    =     (  ( ExternalDependency )     ( dependency )  )  . getVersionConstraint (  )  ;", "} else    {", "vc    =    DefaultImmutableVersionConstraint . of ( Strings . nullToEmpty ( dependency . getVersion (  )  )  )  ;", "}", "writeVersionConstraint ( vc ,    jsonWriter )  ;", "}", "if    ( dependency   instanceof   Dependency )     {", "writeExcludes (  (  ( Dependency )     ( dependency )  )  ,    jsonWriter )  ;", "}", "String   reason    =    dependency . getReason (  )  ;", "if    ( StringUtils . isNotEmpty ( reason )  )     {", "jsonWriter . name (  \" reason \"  )  ;", "jsonWriter . value ( reason )  ;", "}", "jsonWriter . endObject (  )  ;", "}", "METHOD_END"], "methodName": ["writeDependency"], "fileName": "org.gradle.api.publish.internal.ModuleMetadataFileGenerator"}, {"methodBody": ["METHOD_START", "{", "jsonWriter . beginObject (  )  ;", "jsonWriter . name (  \" group \"  )  ;", "jsonWriter . value ( dependencyConstraint . getGroup (  )  )  ;", "jsonWriter . name (  \" m \"  )  ;", "jsonWriter . value ( dependencyConstraint . getName (  )  )  ;", "writeVersionConstraint ( dependencyConstraint . getVersionConstraint (  )  ,    jsonWriter )  ;", "String   reason    =    dependencyConstraint . getReason (  )  ;", "if    ( StringUtils . isNotEmpty ( reason )  )     {", "jsonWriter . name (  \" reason \"  )  ;", "jsonWriter . value ( reason )  ;", "}", "jsonWriter . endObject (  )  ;", "}", "METHOD_END"], "methodName": ["writeDependencyConstraint"], "fileName": "org.gradle.api.publish.internal.ModuleMetadataFileGenerator"}, {"methodBody": ["METHOD_START", "{", "if    ( variant . getDependencyConstraints (  )  . isEmpty (  )  )     {", "return ;", "}", "jsonWriter . name (  \" dependencyConstraints \"  )  ;", "jsonWriter . beginArray (  )  ;", "for    ( DependencyConstraint   dependencyConstraint    :    variant . getDependencyConstraints (  )  )     {", "writeDependencyConstraint ( dependencyConstraint ,    jsonWriter )  ;", "}", "jsonWriter . endArray (  )  ;", "}", "METHOD_END"], "methodName": ["writeDependencyConstraints"], "fileName": "org.gradle.api.publish.internal.ModuleMetadataFileGenerator"}, {"methodBody": ["METHOD_START", "{", "Set < ExcludeRule >    excludeRules ;", "if    (  !  ( moduleDependency . isTransitive (  )  )  )     {", "excludeRules    =    Collections .  < ExcludeRule > singleton ( new   DefaultExcludeRule ( null ,    null )  )  ;", "} else    {", "excludeRules    =    moduleDependency . getExcludeRules (  )  ;", "}", "if    ( excludeRules . isEmpty (  )  )     {", "return ;", "}", "jsonWriter . name (  \" excludes \"  )  ;", "jsonWriter . beginArray (  )  ;", "for    ( ExcludeRule   excludeRule    :    excludeRules )     {", "jsonWriter . beginObject (  )  ;", "jsonWriter . name (  \" group \"  )  ;", "String   group    =    GUtil . elvis ( excludeRule . getGroup (  )  ,     \"  *  \"  )  ;", "jsonWriter . value ( group )  ;", "jsonWriter . name (  \" module \"  )  ;", "String   module    =    GUtil . elvis ( excludeRule . get (  )  ,     \"  *  \"  )  ;", "jsonWriter . value ( module )  ;", "jsonWriter . endObject (  )  ;", "}", "jsonWriter . endArray (  )  ;", "}", "METHOD_END"], "methodName": ["writeExcludes"], "fileName": "org.gradle.api.publish.internal.ModuleMetadataFileGenerator"}, {"methodBody": ["METHOD_START", "{", "jsonWriter . name (  \" formatVersion \"  )  ;", "jsonWriter . value ( FORMAT _ VERSION )  ;", "}", "METHOD_END"], "methodName": ["writeFormat"], "fileName": "org.gradle.api.publish.internal.ModuleMetadataFileGenerator"}, {"methodBody": ["METHOD_START", "{", "SoftwareComponent   owner    =    owners . get ( component )  ;", "if    ( owner    =  =    null )     {", "jsonWriter . name (  \" component \"  )  ;", "jsonWriter . beginObject (  )  ;", "jsonWriter . name (  \" group \"  )  ;", "jsonWriter . value ( coordinates . getGroup (  )  )  ;", "jsonWriter . name (  \" module \"  )  ;", "jsonWriter . value ( coordinates . getName (  )  )  ;", "jsonWriter . name (  \" version \"  )  ;", "jsonWriter . value ( coordinates . getVersion (  )  )  ;", "writeAttributes ( attributes ,    jsonWriter )  ;", "jsonWriter . endObject (  )  ;", "} else    {", ". ComponentData   componentData    =    componentCoordinates . get ( owner )  ;", "ModuleVersionIdentifier   ownerCoordinates    =    componentData . coordinates ;", "jsonWriter . name (  \" component \"  )  ;", "jsonWriter . beginObject (  )  ;", "jsonWriter . name (  \" url \"  )  ;", "jsonWriter . value ( relativeUrlTo ( coordinates ,    ownerCoordinates )  )  ;", "jsonWriter . name (  \" group \"  )  ;", "jsonWriter . value ( ownerCoordinates . getGroup (  )  )  ;", "jsonWriter . name (  \" module \"  )  ;", "jsonWriter . value ( ownerCoordinates . getName (  )  )  ;", "jsonWriter . name (  \" version \"  )  ;", "jsonWriter . value ( ownerCoordinates . getVersion (  )  )  ;", "writeAttributes ( componentData . attributes ,    jsonWriter )  ;", "jsonWriter . endObject (  )  ;", "}", "}", "METHOD_END"], "methodName": ["writeIdentity"], "fileName": "org.gradle.api.publish.internal.ModuleMetadataFileGenerator"}, {"methodBody": ["METHOD_START", "{", "jsonWriter . beginObject (  )  ;", "jsonWriter . name (  \" name \"  )  ;", "jsonWriter . value ( variant . getName (  )  )  ;", "writeAttributes ( variant . getAttributes (  )  ,    jsonWriter )  ;", "jsonWriter . name (  \" available - at \"  )  ;", "jsonWriter . beginObject (  )  ;", "jsonWriter . name (  \" url \"  )  ;", "jsonWriter . value ( relativeUrlTo ( coordinates ,    targetCoordinates )  )  ;", "jsonWriter . name (  \" group \"  )  ;", "jsonWriter . value ( targetCoordinates . getGroup (  )  )  ;", "jsonWriter . name (  \" m \"  )  ;", "jsonWriter . value ( targetCoordinates . getName (  )  )  ;", "jsonWriter . name (  \" version \"  )  ;", "jsonWriter . value ( targetCoordinates . getVersion (  )  )  ;", "jsonWriter . endObject (  )  ;", "jsonWriter . endObject (  )  ;", "}", "METHOD_END"], "methodName": ["writeVariantHostedInAnotherModule"], "fileName": "org.gradle.api.publish.internal.ModuleMetadataFileGenerator"}, {"methodBody": ["METHOD_START", "{", "jsonWriter . beginObject (  )  ;", "jsonWriter . name (  \" name \"  )  ;", "jsonWriter . value ( variant . getName (  )  )  ;", "writeAttributes ( variant . getAttributes (  )  ,    jsonWriter )  ;", "writeDependencies ( variant ,    jsonWriter )  ;", "writeDependencyConstraints ( variant ,    jsonWriter )  ;", "writeArtifacts ( cation ,    variant ,    jsonWriter )  ;", "writeCapabilities ( variant ,    jsonWriter )  ;", "jsonWriter . endObject (  )  ;", "}", "METHOD_END"], "methodName": ["writeVariantHostedInThisModule"], "fileName": "org.gradle.api.publish.internal.ModuleMetadataFileGenerator"}, {"methodBody": ["METHOD_START", "{", "boolean   started    =    false ;", "for    ( UsageContext   usageContext    :     (  ( SoftwareComponentInternal )     ( component )  )  . getUsages (  )  )     {", "if    (  ! started )     {", "jsonWriter . name (  \" variants \"  )  ;", "jsonWriter . beginArray (  )  ;", "started    =    true ;", "}", "writeVariantHostedInThisModule ( publication ,    usageContext ,    jsonWriter )  ;", "}", "if    ( component   instanceof   ComponentWithVariants )     {", "for    ( SoftwareComponent   childComponent    :     (  ( ComponentWithVariants )     ( component )  )  . getVariants (  )  )     {", "ModuleVersionIdentifier   childCoordinates ;", "if    ( childComponent   instanceof   ComponentWithCoordinates )     {", "childCoordinates    =     (  ( ComponentWithCoordinates )     ( childComponent )  )  . getCoordinates (  )  ;", "} else    {", ". ComponentData   componentData    =    componentCoordinates . get ( childComponent )  ;", "childCoordinates    =     ( componentData    =  =    null )     ?    null    :    componentData . coordinates ;", "}", "assert   childCoordinates    !  =    null ;", "if    ( childComponent   instanceof   SoftwareComponentInternal )     {", "for    ( UsageContext   usageContext    :     (  ( SoftwareComponentInternal )     ( childComponent )  )  . getUsages (  )  )     {", "if    (  ! started )     {", "jsonWriter . name (  \" variants \"  )  ;", "jsonWriter . beginArray (  )  ;", "started    =    true ;", "}", "writeVariantHostedInAnotherModule ( publication . getCoordinates (  )  ,    childCoordinates ,    usageContext ,    jsonWriter )  ;", "}", "}", "}", "}", "if    ( started )     {", "jsonWriter . endArray (  )  ;", "}", "}", "METHOD_END"], "methodName": ["writeVariants"], "fileName": "org.gradle.api.publish.internal.ModuleMetadataFileGenerator"}, {"methodBody": ["METHOD_START", "{", "if    ( DefaultImmutableVersionConstraint . of (  )  . equals ( versionConstraint )  )     {", "return ;", "}", "jsonWriter . name (  \" version \"  )  ;", "jsonWriter . beginObject (  )  ;", "if    (  !  ( versionConstraint . getPreferredVersion (  )  . isEmpty (  )  )  )     {", "jsonWriter . name (  \" prefers \"  )  ;", "jsonWriter . value ( versionConstraint . getPreferredVersion (  )  )  ;", "}", "List < String >    rejectedVersions    =    versionConstraint . getRejectedVersions (  )  ;", "if    (  !  ( rejectedVersions . isEmpty (  )  )  )     {", "jsonWriter . name (  \" rejects \"  )  ;", "jsonWriter . beginArray (  )  ;", "for    ( String   reject    :    rejectedVersions )     {", "jsonWriter . value ( reject )  ;", "}", "jsonWriter . endArray (  )  ;", "}", "jsonWriter . endObject (  )  ;", "}", "METHOD_END"], "methodName": ["writeVersionConstraint"], "fileName": "org.gradle.api.publish.internal.ModuleMetadataFileGenerator"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( value )     =  =    null )     |  |     (  ( value . length (  )  )     =  =     0  )  )     {", "return   type . cast ( this )  ;", "}", "offset    =     0  ;", "while    ( offset    <     ( value . length (  )  )  )     {", "final      unicodeChar    =    value . codePoAt ( offset )  ;", "if    ( Character . isISOControl ( unicodeChar )  )     {", "throw   failure ( String . format (  \"  % s   cannot   contain   ISO   control   character    \\  '  \\  \\ u %  0  4 x \\  '  .  \"  ,    name ,    unicodeChar )  )  ;", "}", "if    (  (  '  \\  \\  '     =  =    unicodeChar )     |  |     (  (  '  /  '     =  =    unicodeChar )     &  &     (  ! allowSlash )  )  )     {", "throw   failure ( String . format (  \"  % s   cannot   contain    '  % c '  .  \"  ,    name ,     (  ( char )     ( unicodeChar )  )  )  )  ;", "}", "offset    +  =    Character . charCount ( unicodeChar )  ;", "}", "return   type . cast ( this )  ;", "}", "METHOD_END"], "methodName": ["doesNotContainSpecialCharacters"], "fileName": "org.gradle.api.publish.internal.PublicationFieldValidator"}, {"methodBody": ["METHOD_START", "{", "notNull (  )  ;", "if    (  ( vue . length (  )  )     =  =     0  )     {", "throw   failure ( String . format (  \"  % s   cannot   be   empty .  \"  ,    name )  )  ;", "}", "return   type . cast ( this )  ;", "}", "METHOD_END"], "methodName": ["notEmpty"], "fileName": "org.gradle.api.publish.internal.PublicationFieldValidator"}, {"methodBody": ["METHOD_START", "{", "if    (  ( value )     =  =    null )     {", "String   message    =    String . format (  \"  % s   cannot   be   null .  \"  ,    name )  ;", "throw   failure ( message )  ;", "}", "return   type . cast ( this )  ;", "}", "METHOD_END"], "methodName": ["notNull"], "fileName": "org.gradle.api.publish.internal.PublicationFieldValidator"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( value )     !  =    null )     &  &     (  ( value . length (  )  )     =  =     0  )  )     {", "throw   failure ( String . format (  \"  % s   cannot   be   an   empty   string .    Use   null   instead .  \"  ,    name )  )  ;", "}", "return   type . cast ( this )  ;", "}", "METHOD_END"], "methodName": ["optionalNotEmpty"], "fileName": "org.gradle.api.publish.internal.PublicationFieldValidator"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( value )     =  =    null )     |  |     (  ( value . length (  )  )     =  =     0  )  )     {", "return   type . cast ( this )  ;", "}", "doesNotContainSpecialCharacs ( false )  ;", "return   type . cast ( this )  ;", "}", "METHOD_END"], "methodName": ["validInFileName"], "fileName": "org.gradle.api.publish.internal.PublicationFieldValidator"}, {"methodBody": ["METHOD_START", "{", "try    {", "publish (  )  ;", "}    catch    ( Exception   e )     {", "throw   new   artifacts . PublishException ( String . format (  \" Failed   to   publish   publication    '  % s '    to   repository    '  % s '  \"  ,    publication . getName (  )  ,    repository )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["run"], "fileName": "org.gradle.api.publish.internal.PublishOperation"}, {"methodBody": ["METHOD_START", "{", "registration . add ( DefaultProjectDependencyPublicationResolver . class )  ;", "}", "METHOD_END"], "methodName": ["registerBuildServices"], "fileName": "org.gradle.api.publish.internal.PublishServices"}, {"methodBody": ["METHOD_START", "{", "RepositoryHandler   repositories    =    publicationServices . createRepositoryHandler (  )  ;", "PublicationContainer   publications    =    instantiator . newInstance ( DefaultPublicationContainer . class ,    instantiator )  ;", "project . getExtensions (  )  . create ( PublishingExtension . class ,    PublishingExtension . NAME ,    DefaultPublishingExtension . class ,    repositories ,    publications )  ;", "Task   publishLifecycleTask    =    project . getTasks (  )  . create (  . PUBLISH _ LIFECYCLE _ TASK _ NAME )  ;", "publishLifecycleTask . setDescription (  \" Publishes   all   publications   produced   by   this   project .  \"  )  ;", "publishLifecycleTask . setGroup (  . PUBLISH _ TASK _ GROUP )  ;", "}", "METHOD_END"], "methodName": ["apply"], "fileName": "org.gradle.api.publish.plugins.PublishingPlugin"}, {"methodBody": ["METHOD_START", "{", "return   getFileCollectionFactory (  )  . create ( new   GenerateModuleMetadata . VariantFiles (  )  )  ;", "}", "METHOD_END"], "methodName": ["getArtifacts"], "fileName": "org.gradle.api.publish.tasks.GenerateModuleMetadata"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getBuildInvocationScopeId"], "fileName": "org.gradle.api.publish.tasks.GenerateModuleMetadata"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getFileCollectionFactory"], "fileName": "org.gradle.api.publish.tasks.GenerateModuleMetadata"}, {"methodBody": ["METHOD_START", "{", "return   outputFile ;", "}", "METHOD_END"], "methodName": ["getOutputFile"], "fileName": "org.gradle.api.publish.tasks.GenerateModuleMetadata"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getProjectDependencyPublicationResolver"], "fileName": "org.gradle.api.publish.tasks.GenerateModuleMetadata"}, {"methodBody": ["METHOD_START", "{", "return   publication ;", "}", "METHOD_END"], "methodName": ["getPublication"], "fileName": "org.gradle.api.publish.tasks.GenerateModuleMetadata"}, {"methodBody": ["METHOD_START", "{", "return   publications ;", "}", "METHOD_END"], "methodName": ["getPublications"], "fileName": "org.gradle.api.publish.tasks.GenerateModuleMetadata"}, {"methodBody": ["METHOD_START", "{", "File   file    =    outputFile . get (  )  . getAsFile (  )  ;", "PublicationInternal   publication    =     (  ( PublicationInternal )     ( this . publication . get (  )  )  )  ;", "List < PublicationInternal >    publications    =    Cast . uncheckedCast ( this . publications . get (  )  )  ;", "try    {", "Writer   writer    =    new   BufferedWriter ( new   OutputStreamWriter ( new   FileOutputStream ( file )  ,     \" utf 8  \"  )  )  ;", "try    {", "new   ModuleMetadataFileGenerator ( getBuildInvocationScopeId (  )  ,    getProjectDependencyPublicationResolver (  )  )  . generateTo ( publication ,    publications ,    writer )  ;", "}    finally    {", "writer . close (  )  ;", "}", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException (  (  \" Could   not   generate   metadata   file    \"     +     ( outputFile . get (  )  )  )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["run"], "fileName": "org.gradle.api.publish.tasks.GenerateModuleMetadata"}]