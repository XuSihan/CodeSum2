[{"methodBody": ["METHOD_START", "{", "project . getPluginManager (  )  . apply ( BasePlugin . class )  ;", "project . getExtensions (  )  . create ( JavaScriptExtension . NAME ,    JavaScriptExtension . class )  ;", "(  ( ExtensionAware )     ( project . getRepositories (  )  )  )  . getExtensions (  )  . create ( JavaScriptRepositoriesExtension . NAME ,    JavaScriptRepositoriesExtension . class ,    project . getRepositories (  )  )  ;", "}", "METHOD_END"], "methodName": ["apply"], "fileName": "org.gradle.plugins.javascript.base.JavaScriptBasePlugin"}, {"methodBody": ["METHOD_START", "{", "return   googleApis ( Actions . doNothing (  )  )  ;", "}", "METHOD_END"], "methodName": ["googleApis"], "fileName": "org.gradle.plugins.javascript.base.JavaScriptRepositoriesExtension"}, {"methodBody": ["METHOD_START", "{", "return   repositories . ivy ( new   Action < IvyArtifactRepository >  (  )     {", "public   void   execute ( IvyArtifactRepository   repo )     {", "repo . setName (  \" googleApisJs \"  )  ;", "repo . setUrl (  . GOOGLE _ APIS _ REPO _ URL )  ;", "repo . layout (  \" pattern \"  ,    new   Action < IvyPatternRepositoryLayout >  (  )     {", "public   void   execute ( IvyPatternRepositoryLayout   layout )     {", "layout . artifact (  \"  [ organization ]  /  [ revision ]  /  [ module ]  .  [ ext ]  \"  )  ;", "layout . ivy (  \"  [ organization ]  /  [ revision ]  /  [ module ]  . xml \"  )  ;", "}", "}  )  ;", "repo . metadataSources ( new   Action < IvyArtifactRepository . MetadataSources >  (  )     {", "@ Override", "public   void   execute ( IvyArtifactRepository . MetadataSources   metadataSources )     {", "metadataSources . artifact (  )  ;", "}", "}  )  ;", "action . execute ( repo )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["googleApis"], "fileName": "org.gradle.plugins.javascript.base.JavaScriptRepositoriesExtension"}, {"methodBody": ["METHOD_START", "{", "return   gradle ( Actions . doNothing (  )  )  ;", "}", "METHOD_END"], "methodName": ["gradle"], "fileName": "org.gradle.plugins.javascript.base.JavaScriptRepositoriesExtension"}, {"methodBody": ["METHOD_START", "{", "return   repositories . maven ( new   Action < MavenArtifactRepository >  (  )     {", "public   void   execute ( MavenArtifactRepository   repository )     {", "repository . setName (  \" gradleJs \"  )  ;", "repository . setUrl (  . GRADLE _ PUBLIC _ JAVASCRIPT _ REPO _ URL )  ;", "repository . metadataSources ( new   Action < MavenArtifactRepository . MetadataSources >  (  )     {", "@ Override", "public   void   execute ( MavenArtifactRepository . MetadataSources   metadataSources )     {", "metadataSources . artifact (  )  ;", "}", "}  )  ;", "action . execute ( repository )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["gradle"], "fileName": "org.gradle.plugins.javascript.base.JavaScriptRepositoriesExtension"}, {"methodBody": ["METHOD_START", "{", "Configuration   configuration    =    configurations . create ( CoffeeScriptExtension . JS _ CONFIGURATION _ NAME )  ;", "configuration . defaultDependencies ( new   Action < DependencySet >  (  )     {", "@ Override", "public   void   execute ( DependencySet   configDependencies )     {", "String   notation    =     (  (  (  (  ( CoffeeScriptExtension . DEFAULT _ JS _ DEPENDENCY _ GROUP )     +     \"  :  \"  )     +     ( CoffeeScriptExtension . DEFAULT _ JS _ DEPENDENCY _ MODULE )  )     +     \"  :  \"  )     +     ( extension . getVersion (  )  )  )     +     \"  @ js \"  ;", "Dependency   dependency    =    dependencies . create ( notation )  ;", "configDependencies . add ( dependency )  ;", "}", "}  )  ;", "return   configuration ;", "}", "METHOD_END"], "methodName": ["addJsConfiguration"], "fileName": "org.gradle.plugins.javascript.coffeescript.CoffeeScriptBasePlugin"}, {"methodBody": ["METHOD_START", "{", "project . getPluginManager (  )  . apply ( RhinoPlugin . class )  ;", "JavaScriptExtension   jsExtension    =    project . getExtensions (  )  . getByType ( JavaScriptExtension . class )  ;", "ExtensionContainer   extensionContainer    =     (  ( ExtensionAware )     ( jsExtension )  )  . getExtensions (  )  ;", "final   Extension   csExtension    =    extensionContainer . create ( Extension . NAME ,    Extension . class )  ;", "final   Configuration   jsConfiguration    =    addJsConfiguration ( project . getConfigurations (  )  ,    project . getDependencies (  )  ,    csExtension )  ;", "ConventionMapping   conventionMapping    =     (  ( IConventionAware )     ( csExtension )  )  . getConventionMapping (  )  ;", "conventionMapping . map (  \" js \"  ,    new   Callable < Configuration >  (  )     {", "@ Override", "public   Configuration   call (  )     {", "return   jsConfiguration ;", "}", "}  )  ;", "conventionMapping . map (  \" version \"  ,    new   Callable < String >  (  )     {", "@ Override", "public   String   call (  )     {", "return   Extension . DEFAULT _ JS _ DEPENDENCY _ VERSION ;", "}", "}  )  ;", "final   RhinoExtension   rhinoExtension    =    extensionContainer . getByType ( RhinoExtension . class )  ;", "project . getTasks (  )  . withType ( Compile . class ,    new   Action < Compile >  (  )     {", "@ Override", "public   void   execute ( Compile   task )     {", "task . getConventionMapping (  )  . map (  \" rhinoClasspath \"  ,    new   Callable < FileCollection >  (  )     {", "public   FileCollection   call (  )     {", "return   rhinoExtension . getClasspath (  )  ;", "}", "}  )  ;", "task . getConventionMapping (  )  . map (  \" coffeeScriptJs \"  ,    new   Callable < FileCollection >  (  )     {", "public   FileCollection   call (  )     {", "return   csExtension . getJs (  )  ;", "}", "}  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["apply"], "fileName": "org.gradle.plugins.javascript.coffeescript.CoffeeScriptBasePlugin"}, {"methodBody": ["METHOD_START", "{", "RhinoWorkerHandleFactory   handleFactory    =    new   DefaultRhinoWorkerHandleFactory ( getWorkerProcessBuilderFactory (  )  )  ;", "Spec   spec    =    new   DefaultSpec (  )  ;", "spec . setCoffeeScriptJs ( getCoffeeScriptJs (  )  . getSingleFile (  )  )  ;", "spec . setDestinationDir ( getDestinationDir (  )  )  ;", "spec . setSource ( getSource (  )  )  ;", "spec . setOptions ( getOptions (  )  )  ;", "LogLevel   logLevel    =    getProject (  )  . getGradle (  )  . getStartParameter (  )  . getLogLevel (  )  ;", "r   compiler    =    new   Rhinor ( handleFactory ,    getRhinoClasspath (  )  ,    logLevel ,    getProject (  )  . getProjectDir (  )  )  ;", "setDidWork ( compiler . compile ( spec )  . getDidWork (  )  )  ;", "}", "METHOD_END"], "methodName": ["doCompile"], "fileName": "org.gradle.plugins.javascript.coffeescript.CoffeeScriptCompile"}, {"methodBody": ["METHOD_START", "{", "return   getProject (  )  . files ( coffeeScriptJs )  ;", "}", "METHOD_END"], "methodName": ["getCoffeeScriptJs"], "fileName": "org.gradle.plugins.javascript.coffeescript.CoffeeScriptCompile"}, {"methodBody": ["METHOD_START", "{", "return   getProject (  )  . file ( destinationDir )  ;", "}", "METHOD_END"], "methodName": ["getDestinationDir"], "fileName": "org.gradle.plugins.javascript.coffeescript.CoffeeScriptCompile"}, {"methodBody": ["METHOD_START", "{", "return   options ;", "}", "METHOD_END"], "methodName": ["getOptions"], "fileName": "org.gradle.plugins.javascript.coffeescript.CoffeeScriptCompile"}, {"methodBody": ["METHOD_START", "{", "return   getProject (  )  . files ( rhinoClasspath )  ;", "}", "METHOD_END"], "methodName": ["getRhinoClasspath"], "fileName": "org.gradle.plugins.javascript.coffeescript.CoffeeScriptCompile"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getWorkerProcessBuilderFactory"], "fileName": "org.gradle.plugins.javascript.coffeescript.CoffeeScriptCompile"}, {"methodBody": ["METHOD_START", "{", "getProject (  )  . configure ( getOptions (  )  ,    closure )  ;", "}", "METHOD_END"], "methodName": ["options"], "fileName": "org.gradle.plugins.javascript.coffeescript.CoffeeScriptCompile"}, {"methodBody": ["METHOD_START", "{", "action . execute ( getOptions (  )  )  ;", "}", "METHOD_END"], "methodName": ["options"], "fileName": "org.gradle.plugins.javascript.coffeescript.CoffeeScriptCompile"}, {"methodBody": ["METHOD_START", "{", "this . coffeeScriptJs    =    coffeeScriptJs ;", "}", "METHOD_END"], "methodName": ["setCoffeeScriptJs"], "fileName": "org.gradle.plugins.javascript.coffeescript.CoffeeScriptCompile"}, {"methodBody": ["METHOD_START", "{", "this . coffeeScriptJs    =    coffeeScriptJs ;", "}", "METHOD_END"], "methodName": ["setCoffeeScriptJs"], "fileName": "org.gradle.plugins.javascript.coffeescript.CoffeeScriptCompile"}, {"methodBody": ["METHOD_START", "{", "this . destinationDir    =    destinationDir ;", "}", "METHOD_END"], "methodName": ["setDestinationDir"], "fileName": "org.gradle.plugins.javascript.coffeescript.CoffeeScriptCompile"}, {"methodBody": ["METHOD_START", "{", "this . destinationDir    =    destinationDir ;", "}", "METHOD_END"], "methodName": ["setDestinationDir"], "fileName": "org.gradle.plugins.javascript.coffeescript.CoffeeScriptCompile"}, {"methodBody": ["METHOD_START", "{", "this . rhinoClasspath    =    rhinoClasspath ;", "}", "METHOD_END"], "methodName": ["setRhinoClasspath"], "fileName": "org.gradle.plugins.javascript.coffeescript.CoffeeScriptCompile"}, {"methodBody": ["METHOD_START", "{", "this . rhinoClasspath    =    rhinoClasspath ;", "}", "METHOD_END"], "methodName": ["setRhinoClasspath"], "fileName": "org.gradle.plugins.javascript.coffeescript.CoffeeScriptCompile"}, {"methodBody": ["METHOD_START", "{", "return   encoding ;", "}", "METHOD_END"], "methodName": ["getEncoding"], "fileName": "org.gradle.plugins.javascript.coffeescript.CoffeeScriptCompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . encoding    =    encoding ;", "}", "METHOD_END"], "methodName": ["setEncoding"], "fileName": "org.gradle.plugins.javascript.coffeescript.CoffeeScriptCompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   js ;", "}", "METHOD_END"], "methodName": ["getJs"], "fileName": "org.gradle.plugins.javascript.coffeescript.CoffeeScriptExtension"}, {"methodBody": ["METHOD_START", "{", "return   version ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "org.gradle.plugins.javascript.coffeescript.CoffeeScriptExtension"}, {"methodBody": ["METHOD_START", "{", "this . js    =    js ;", "}", "METHOD_END"], "methodName": ["setJs"], "fileName": "org.gradle.plugins.javascript.coffeescript.CoffeeScriptExtension"}, {"methodBody": ["METHOD_START", "{", "this . version    =    version ;", "}", "METHOD_END"], "methodName": ["setVersion"], "fileName": "org.gradle.plugins.javascript.coffeescript.CoffeeScriptExtension"}, {"methodBody": ["METHOD_START", "{", "return   new   Transformer < Transformer < File ,    RelativePath >  ,    File >  (  )     {", "public   Transformer < File ,    RelativePath >    transform ( File   original )     {", "return   new    ( original )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["asFactory"], "fileName": "org.gradle.plugins.javascript.coffeescript.compile.internal.CoffeeScriptCompileDestinationCalculator"}, {"methodBody": ["METHOD_START", "{", "String   sourceFileName    =    relativePath . getLastName (  )  ;", "String   dFileNameBase    =    sourceFileName ;", "if    ( sourceFileName . endsWith (  \"  . coffee \"  )  )     {", "dFileNameBase    =    sourceFileName . substring (  0  ,     (  ( sourceFileName . length (  )  )     -     7  )  )  ;", "}", "String   dFileName    =    dFileNameBase    +     \"  . js \"  ;", "RelativePath   dRelativePath    =    relativePath . replaceLastName ( dFileName )  ;", "return   new   File ( d ,    dRelativePath . getPathString (  )  )  ;", "}", "METHOD_END"], "methodName": ["transform"], "fileName": "org.gradle.plugins.javascript.coffeescript.compile.internal.CoffeeScriptCompileDestinationCalculator"}, {"methodBody": ["METHOD_START", "{", "return   coffeeScriptJs ;", "}", "METHOD_END"], "methodName": ["getCoffeeScriptJs"], "fileName": "org.gradle.plugins.javascript.coffeescript.compile.internal.DefaultCoffeeScriptCompileSpec"}, {"methodBody": ["METHOD_START", "{", "return   destinationDir ;", "}", "METHOD_END"], "methodName": ["getDestinationDir"], "fileName": "org.gradle.plugins.javascript.coffeescript.compile.internal.DefaultCoffeeScriptCompileSpec"}, {"methodBody": ["METHOD_START", "{", "return   options ;", "}", "METHOD_END"], "methodName": ["getOptions"], "fileName": "org.gradle.plugins.javascript.coffeescript.compile.internal.DefaultCoffeeScriptCompileSpec"}, {"methodBody": ["METHOD_START", "{", "return   source ;", "}", "METHOD_END"], "methodName": ["getSource"], "fileName": "org.gradle.plugins.javascript.coffeescript.compile.internal.DefaultCoffeeScriptCompileSpec"}, {"methodBody": ["METHOD_START", "{", "this . coffeeScriptJs    =    coffeeScriptJs ;", "}", "METHOD_END"], "methodName": ["setCoffeeScriptJs"], "fileName": "org.gradle.plugins.javascript.coffeescript.compile.internal.DefaultCoffeeScriptCompileSpec"}, {"methodBody": ["METHOD_START", "{", "this . destinationDir    =    destinationDir ;", "}", "METHOD_END"], "methodName": ["setDestinationDir"], "fileName": "org.gradle.plugins.javascript.coffeescript.compile.internal.DefaultCoffeeScriptCompileSpec"}, {"methodBody": ["METHOD_START", "{", "this . options    =    options ;", "}", "METHOD_END"], "methodName": ["setOptions"], "fileName": "org.gradle.plugins.javascript.coffeescript.compile.internal.DefaultCoffeeScriptCompileSpec"}, {"methodBody": ["METHOD_START", "{", "this . source    =    source ;", "}", "METHOD_END"], "methodName": ["setSource"], "fileName": "org.gradle.plugins.javascript.coffeescript.compile.internal.DefaultCoffeeScriptCompileSpec"}, {"methodBody": ["METHOD_START", "{", "return   coffeeScriptJs ;", "}", "METHOD_END"], "methodName": ["getCoffeeScriptJs"], "fileName": "org.gradle.plugins.javascript.coffeescript.compile.internal.SerializableCoffeeScriptCompileSpec"}, {"methodBody": ["METHOD_START", "{", "return   destinationDir ;", "}", "METHOD_END"], "methodName": ["getDestinationDir"], "fileName": "org.gradle.plugins.javascript.coffeescript.compile.internal.SerializableCoffeeScriptCompileSpec"}, {"methodBody": ["METHOD_START", "{", "return   options ;", "}", "METHOD_END"], "methodName": ["getOptions"], "fileName": "org.gradle.plugins.javascript.coffeescript.compile.internal.SerializableCoffeeScriptCompileSpec"}, {"methodBody": ["METHOD_START", "{", "return   source ;", "}", "METHOD_END"], "methodName": ["getSource"], "fileName": "org.gradle.plugins.javascript.coffeescript.compile.internal.SerializableCoffeeScriptCompileSpec"}, {"methodBody": ["METHOD_START", "{", "FileTree   fileTree    =    source . getAsFileTree (  )  ;", "fileTree . visit ( new   FileVisitor (  )     {", "public   void   visitDir ( FileVisitDetails   dirDetails )     {", "}", "public   void   visitFile ( FileVisitDetails   fileDetails )     {", "targets . add ( new   RelativeFile ( fileDetails . getFile (  )  ,    fileDetails . getRelativePath (  )  )  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["toRelativeFiles"], "fileName": "org.gradle.plugins.javascript.coffeescript.compile.internal.SerializableCoffeeScriptCompileSpec"}, {"methodBody": ["METHOD_START", "{", "return   RhinoWorkerUtils . childScope ( rootScope ,    new   RhinoWorkerUtils . DefaultScopeOperation < String >  (  )     {", "public   String   action ( Scriptable   compileScope ,    Context   context )     {", "compileScope . put (  \" coffeeScriptSource \"  ,    compileScope ,    source )  ;", "try    {", "return    (  ( String )     ( context . evaluateString ( compileScope ,     \" CoffeeS ( coffeeScriptSource ,     {  }  )  ;  \"  ,    sourceName ,     0  ,    null )  )  )  ;", "}    catch    ( JavaScriptException   jse )     {", "throw   new   SourceTransformationException ( String . format (  \" Failed   to   compile   coffeescript   file :     % s \"  ,    sourceName )  ,    jse )  ;", "}", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["compile"], "fileName": "org.gradle.plugins.javascript.coffeescript.compile.internal.rhino.CoffeeScriptCompilerWorker"}, {"methodBody": ["METHOD_START", "{", "Scriptable   coffeeScriptScope    =    RhinoWorkerUtils . parse ( spec . getCoffeeScriptJs (  )  ,     \" UTF -  8  \"  ,    new   Action < Context >  (  )     {", "public   void   execute ( Context   context )     {", "context . setOptimizationLevel (  (  -  1  )  )  ;", "}", "}  )  ;", "String   encoding    =    spec . getOptions (  )  . getEncoding (  )  ;", "DestinationCalculator   destinationCalculator    =    new   DestinationCalculator ( spec . getDestinationDir (  )  )  ;", "for    ( RelativeFile   target    :    spec . getSource (  )  )     {", "String   source    =    RhinoWorkerUtils . readFile ( target . getFile (  )  ,    encoding )  ;", "String   output    =    compile ( coffeeScriptScope ,    source ,    target . getRelativePath (  )  . getPathString (  )  )  ;", "RhinoWorkerUtils . writeFile ( output ,    destinationCalculator . transform ( target . getRelativePath (  )  )  ,    encoding )  ;", "}", "}", "METHOD_END"], "methodName": ["process"], "fileName": "org.gradle.plugins.javascript.coffeescript.compile.internal.rhino.CoffeeScriptCompilerWorker"}, {"methodBody": ["METHOD_START", "{", "CoffeeScriptCompilerProtocol   compiler    =    rhinoWorkerHandleFactory . create ( rhinoClasspath ,    CoffeeScriptCompilerProtocol . class ,    CoffeeScriptCompilerWorker . class ,    logLevel ,    workingDir )  ;", "compiler . process ( new   SerializableCoffeeScriptCompileSpec ( spec )  )  ;", "return   WorkResults . didWork ( true )  ;", "}", "METHOD_END"], "methodName": ["compile"], "fileName": "org.gradle.plugins.javascript.coffeescript.compile.internal.rhino.RhinoCoffeeScriptCompiler"}, {"methodBody": ["METHOD_START", "{", "return   js ;", "}", "METHOD_END"], "methodName": ["getJs"], "fileName": "org.gradle.plugins.javascript.envjs.EnvJsExtension"}, {"methodBody": ["METHOD_START", "{", "return   version ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "org.gradle.plugins.javascript.envjs.EnvJsExtension"}, {"methodBody": ["METHOD_START", "{", "this . js    =    js ;", "}", "METHOD_END"], "methodName": ["setJs"], "fileName": "org.gradle.plugins.javascript.envjs.EnvJsExtension"}, {"methodBody": ["METHOD_START", "{", "this . version    =    version ;", "}", "METHOD_END"], "methodName": ["setVersion"], "fileName": "org.gradle.plugins.javascript.envjs.EnvJsExtension"}, {"methodBody": ["METHOD_START", "{", "Configuration   configuration    =    configurations . create ( EnvJsExtension . CONFIGURATION _ NAME )  ;", "configuration . defaultDependencies ( new   api . Action < DependencySet >  (  )     {", "@ Override", "public   void   execute ( DependencySet   configDependencies )     {", "String   notation    =     (  (  (  (  ( EnvJsExtension . DEFAULT _ DEPENDENCY _ GROUP )     +     \"  :  \"  )     +     ( EnvJsExtension . DEFAULT _ DEPENDENCY _ MODULE )  )     +     \"  :  \"  )     +     ( extension . getVersion (  )  )  )     +     \"  @ js \"  ;", "Dependency   dependency    =    dependencies . create ( notation )  ;", "configDependencies . add ( dependency )  ;", "}", "}  )  ;", "return   configuration ;", "}", "METHOD_END"], "methodName": ["addConfiguration"], "fileName": "org.gradle.plugins.javascript.envjs.EnvJsPlugin"}, {"methodBody": ["METHOD_START", "{", "project . getPluginManager (  )  . apply ( RhinoPlugin . class )  ;", "project . getPluginManager (  )  . apply ( ReportingBasePlugin . class )  ;", "JavaScriptExtension   jsExtension    =    project . getExtensions (  )  . getByType ( JavaScriptExtension . class )  ;", "final   EnvJsExtension   envJsExtension    =     (  ( ExtensionAware )     ( jsExtension )  )  . getExtensions (  )  . create ( EnvJsExtension . NAME ,    EnvJsExtension . class )  ;", "final   Configuration   configuration    =    addConfiguration ( project . getConfigurations (  )  ,    project . getDependencies (  )  ,    envJsExtension )  ;", "final   ConventionMapping   conventionMapping    =     (  ( IConventionAware )     ( envJsExtension )  )  . getConventionMapping (  )  ;", "conventionMapping . map (  \" js \"  ,    new   Callable < Configuration >  (  )     {", "public   Configuration   call (  )     {", "return   configuration ;", "}", "}  )  ;", "conventionMapping . map (  \" version \"  ,    new   Callable < String >  (  )     {", "public   String   call (  )     {", "return   EnvJsExtension . DEFAULT _ DEPENDENCY _ VERSION ;", "}", "}  )  ;", "final   RhinoExtension   rhinoExtension    =     (  ( ExtensionAware )     ( jsExtension )  )  . getExtensions (  )  . getByType ( RhinoExtension . class )  ;", "project . getTasks (  )  . withType ( BrowserEvaluate . class ,    new   api . Action < BrowserEvaluate >  (  )     {", "public   void   execute ( BrowserEvaluate   task )     {", "(  ( IConventionAware )     ( task )  )  . getConventionMapping (  )  . map (  \" evaluator \"  ,    new   Callable < EnvJsBrowserEvaluator >  (  )     {", "public   EnvJsBrowserEvaluator   call (  )     {", "RhinoWorkerHandleFactory   handleFactory    =    new   DefaultRhinoWorkerHandleFactory ( workerProcessBuilderFactory )  ;", "File   workDir    =    project . getProjectDir (  )  ;", "Factory < File >    envJsFactory    =    new   Factory < File >  (  )     {", "public   File   create (  )     {", "return   envJsExtension . getJs (  )  . getSingleFile (  )  ;", "}", "}  ;", "return   new   EnvJsBrowserEvaluator ( handleFactory ,    rhinoExtension . getClasspath (  )  ,    envJsFactory ,    project . getGradle (  )  . getStartParameter (  )  . getLogLevel (  )  ,    workDir )  ;", "}", "}  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["apply"], "fileName": "org.gradle.plugins.javascript.envjs.EnvJsPlugin"}, {"methodBody": ["METHOD_START", "{", "HttpFileServer   fileServer    =    new   SimpleHttpFileServerFactory (  )  . start ( getContent (  )  ,     0  )  ;", "try    {", "Writer   resultWriter    =    new   FileWriter ( getResult (  )  )  ;", "getor (  )  . evaluate ( fileServer . getResourceUrl ( getResource (  )  )  ,    resultWriter )  ;", "resultWriter . close (  )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}    finally    {", "fileServer . stop (  )  ;", "}", "setDidWork ( true )  ;", "}", "METHOD_END"], "methodName": ["doEvaluate"], "fileName": "org.gradle.plugins.javascript.envjs.browser.BrowserEvaluate"}, {"methodBody": ["METHOD_START", "{", "return    ( content )     =  =    null    ?    null    :    getProject (  )  . files ( content )  . getSingleFile (  )  ;", "}", "METHOD_END"], "methodName": ["getContent"], "fileName": "org.gradle.plugins.javascript.envjs.browser.BrowserEvaluate"}, {"methodBody": ["METHOD_START", "{", "return   evaluator ;", "}", "METHOD_END"], "methodName": ["getEvaluator"], "fileName": "org.gradle.plugins.javascript.envjs.browser.BrowserEvaluate"}, {"methodBody": ["METHOD_START", "{", "return   resource . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getResource"], "fileName": "org.gradle.plugins.javascript.envjs.browser.BrowserEvaluate"}, {"methodBody": ["METHOD_START", "{", "return    ( result )     =  =    null    ?    null    :    getProject (  )  . file ( result )  ;", "}", "METHOD_END"], "methodName": ["getResult"], "fileName": "org.gradle.plugins.javascript.envjs.browser.BrowserEvaluate"}, {"methodBody": ["METHOD_START", "{", "this . content    =    content ;", "}", "METHOD_END"], "methodName": ["setContent"], "fileName": "org.gradle.plugins.javascript.envjs.browser.BrowserEvaluate"}, {"methodBody": ["METHOD_START", "{", "this . content    =    content ;", "}", "METHOD_END"], "methodName": ["setContent"], "fileName": "org.gradle.plugins.javascript.envjs.browser.BrowserEvaluate"}, {"methodBody": ["METHOD_START", "{", "this . evaluator    =    evaluator ;", "}", "METHOD_END"], "methodName": ["setEvaluator"], "fileName": "org.gradle.plugins.javascript.envjs.browser.BrowserEvaluate"}, {"methodBody": ["METHOD_START", "{", "this . resource    =    resource ;", "}", "METHOD_END"], "methodName": ["setResource"], "fileName": "org.gradle.plugins.javascript.envjs.browser.BrowserEvaluate"}, {"methodBody": ["METHOD_START", "{", "this . resource    =    resource ;", "}", "METHOD_END"], "methodName": ["setResource"], "fileName": "org.gradle.plugins.javascript.envjs.browser.BrowserEvaluate"}, {"methodBody": ["METHOD_START", "{", "this . result    =    result ;", "}", "METHOD_END"], "methodName": ["setResult"], "fileName": "org.gradle.plugins.javascript.envjs.browser.BrowserEvaluate"}, {"methodBody": ["METHOD_START", "{", "this . result    =    result ;", "}", "METHOD_END"], "methodName": ["setResult"], "fileName": "org.gradle.plugins.javascript.envjs.browser.BrowserEvaluate"}, {"methodBody": ["METHOD_START", "{", "return   contentRoot ;", "}", "METHOD_END"], "methodName": ["getContentRoot"], "fileName": "org.gradle.plugins.javascript.envjs.http.simple.SimpleHttpFileServer"}, {"methodBody": ["METHOD_START", "{", "return   port ;", "}", "METHOD_END"], "methodName": ["getPort"], "fileName": "org.gradle.plugins.javascript.envjs.http.simple.SimpleHttpFileServer"}, {"methodBody": ["METHOD_START", "{", "return    (  (  \" http :  /  / localhost :  \"     +     ( port )  )     +     \"  /  \"  )     +     ( path . startsWith (  \"  /  \"  )     ?    path . substring (  1  )     :    path )  ;", "}", "METHOD_END"], "methodName": ["getResourceUrl"], "fileName": "org.gradle.plugins.javascript.envjs.http.simple.SimpleHttpFileServer"}, {"methodBody": ["METHOD_START", "{", "stopper . stop (  )  ;", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "org.gradle.plugins.javascript.envjs.http.simple.SimpleHttpFileServer"}, {"methodBody": ["METHOD_START", "{", "Container   container    =    new   SimpleFileServerContainer ( new   FileContext ( contentRoot )  )  ;", "try    {", "final   Server   server    =    new   ContainerServer ( container )  ;", "Connection   connection    =    new   SocketConnection ( server )  ;", "InetSocketAddress   address    =    new   InetSocketAddress ( port )  ;", "InetSocketAddress   usedAddress    =     (  ( InetSocketAddress )     ( connection . connect ( address )  )  )  ;", "return   new    ( contentRoot ,    usedAddress . getPort (  )  ,    new   Stoppable (  )     {", "public   void   stop (  )     {", "try    {", "server . stop (  )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "}  )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["start"], "fileName": "org.gradle.plugins.javascript.envjs.http.simple.SimpleHttpFileServerFactory"}, {"methodBody": ["METHOD_START", "{", "Index   requestIndex    =    context . getIndex ( req . getTarget (  )  )  ;", "target    =    requestIndex . get (  )  ;", "if    (  !  ( target . exists (  )  )  )     {", "resp . setCode (  4  0  4  )  ;", "resp . setText (  \" Not   Found \"  )  ;", "try    {", "resp . getPrintStream (  )  . println ( String . format (  \"     '  % s '    does   not   exist \"  ,    target . getAbsolutePath (  )  )  )  ;", "resp . commit (  )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "String   contentType    =    requestIndex . getContentType (  )  ;", "resp . set (  \" Content - Type \"  ,    contentType )  ;", "OutputStream   output    =    null ;", "try    {", "output    =    resp . getOutputStream (  )  ;", "if    ( contentType . startsWith (  \" text /  \"  )  )     {", "resp . set (  \" Content - Encoding \"  ,    Charset . defaultCharset (  )  . name (  )  )  ;", "Reader   input    =    new   Reader ( requestIndex . get (  )  )  ;", "IOUtils . copy ( input ,    output )  ;", "IOUtils . closeQuietly ( input )  ;", "} else    {", "InputStream   input    =    new   InputStream ( requestIndex . get (  )  )  ;", "IOUtils . copy ( input ,    output )  ;", "IOUtils . closeQuietly ( input )  ;", "}", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}    finally    {", "IOUtils . closeQuietly ( output )  ;", "}", "}", "METHOD_END"], "methodName": ["handle"], "fileName": "org.gradle.plugins.javascript.envjs.http.simple.internal.SimpleFileServerContainer"}, {"methodBody": ["METHOD_START", "{", "EnvJvEvaluateProtocol   evaluator    =    rhinoWorkerHandleFactory . create ( rhinoClasspath ,    EnvJvEvaluateProtocol . class ,    EnvJsEvaluateWorker . class ,    logLevel ,    workingDir )  ;", "final   String   result    =    evaluator . process ( new   EnvJsEvaluateSpec ( envJsFactory . create (  )  ,    url )  )  ;", "try    {", "IOUtils . copy ( new   StringReader ( result )  ,    writer )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["evaluate"], "fileName": "org.gradle.plugins.javascript.envjs.internal.EnvJsBrowserEvaluator"}, {"methodBody": ["METHOD_START", "{", "return   envJs ;", "}", "METHOD_END"], "methodName": ["getEnvJs"], "fileName": "org.gradle.plugins.javascript.envjs.internal.EnvJsEvaluateSpec"}, {"methodBody": ["METHOD_START", "{", "return   url ;", "}", "METHOD_END"], "methodName": ["getUrl"], "fileName": "org.gradle.plugins.javascript.envjs.internal.EnvJsEvaluateSpec"}, {"methodBody": ["METHOD_START", "{", "RhinoWorkerHandleFactory   handleFactory    =    new   DefaultRhinoWorkerHandleFactory ( getWorkerProcessBuilderFactory (  )  )  ;", "LogLevel   logLevel    =    getProject (  )  . getGradle (  )  . getStartParameter (  )  . getLogLevel (  )  ;", "JsHintProtocol   worker    =    handleFactory . create ( getRhinoClasspath (  )  ,    JsHintProtocol . class ,    JsHintWorker . class ,    logLevel ,    getProject (  )  . getProjectDir (  )  )  ;", "JsHintSpec   spec    =    new   JsHintSpec (  )  ;", "spec . setSource ( getSource (  )  . getFiles (  )  )  ;", "spec . setEncoding ( getEncoding (  )  )  ;", "spec . setJsHint ( getJsHint (  )  . getSingleFile (  )  )  ;", "JsHintResult   result    =    worker . process ( spec )  ;", "setDidWork ( true )  ;", "Logger   logger    =    getLogger (  )  ;", "boolean   anyErrors    =    false ;", "Map < String ,    Map <  ?  ,     ?  >  >    reportData    =    new   LinkedHashMap < String ,    Map <  ?  ,     ?  >  >  ( result . getResults (  )  . size (  )  )  ;", "for    ( Map . Entry < File ,    Map < String ,    Object >  >    fileEntry    :    result . getResults (  )  . entrySet (  )  )     {", "File   file    =    fileEntry . getKey (  )  ;", "Map < String ,    Object >    data    =    fileEntry . getValue (  )  ;", "reportData . put ( file . getAbsolutePath (  )  ,    data )  ;", "if    ( data . containsKey (  \" errors \"  )  )     {", "anyErrors    =    true ;", "URI   projectDirUri    =    getProject (  )  . getProjectDir (  )  . toURI (  )  ;", "@ SuppressWarnings (  \" unchecked \"  )", "Map < String ,    Object >    errors    =     (  ( Map < String ,    Object >  )     ( data . get (  \" errors \"  )  )  )  ;", "if    (  !  ( errors . isEmpty (  )  )  )     {", "URI   relativePath    =    projectDirUri . relativize ( file . toURI (  )  )  ;", "logger . warn (  \" JsHint   errors   for   file :     {  }  \"  ,    relativePath . getPath (  )  )  ;", "for    ( Map . Entry < String ,    Object >    errorEntry    :    errors . entrySet (  )  )     {", "@ SuppressWarnings (  \" unchecked \"  )", "Map < String ,    Object >    error    =     (  ( Map < String ,    Object >  )     ( errorEntry . getValue (  )  )  )  ;", "int   line    =    Float . valueOf ( error . get (  \" line \"  )  . toString (  )  )  . intValue (  )  ;", "int   character    =    Float . valueOf ( error . get (  \" character \"  )  . toString (  )  )  . intValue (  )  ;", "String   reason    =    error . get (  \" reason \"  )  . toString (  )  ;", "logger . warn (  \"        {  }  :  {  }     >     {  }  \"  ,    new   Object [  ]  {    line ,    character ,    reason    }  )  ;", "}", "}", "}", "}", "File   jsonReportFile    =    getJsonReport (  )  ;", "if    ( jsonReportFile    !  =    null )     {", "try    {", "FileWriter   reportWriter    =    new   FileWriter ( jsonReportFile )  ;", "new   GsonBuilder (  )  . setPrettyPrinting (  )  . create (  )  . toJson ( reportData ,    reportWriter )  ;", "reportWriter . close (  )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "if    ( anyErrors )     {", "throw   new   api . tasks . TaskExecutionException ( this ,    new   GradleException (  \" JsHint   detected   errors \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["doJsHint"], "fileName": "org.gradle.plugins.javascript.jshint.JsHint"}, {"methodBody": ["METHOD_START", "{", "return   encoding ;", "}", "METHOD_END"], "methodName": ["getEncoding"], "fileName": "org.gradle.plugins.javascript.jshint.JsHint"}, {"methodBody": ["METHOD_START", "{", "return   getProject (  )  . files ( jsHint )  ;", "}", "METHOD_END"], "methodName": ["getJsHint"], "fileName": "org.gradle.plugins.javascript.jshint.JsHint"}, {"methodBody": ["METHOD_START", "{", "return    ( jsonReport )     =  =    null    ?    null    :    getProject (  )  . file ( jsonReport )  ;", "}", "METHOD_END"], "methodName": ["getJsonReport"], "fileName": "org.gradle.plugins.javascript.jshint.JsHint"}, {"methodBody": ["METHOD_START", "{", "return   getProject (  )  . files ( rhinoClasspath )  ;", "}", "METHOD_END"], "methodName": ["getRhinoClasspath"], "fileName": "org.gradle.plugins.javascript.jshint.JsHint"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getWorkerProcessBuilderFactory"], "fileName": "org.gradle.plugins.javascript.jshint.JsHint"}, {"methodBody": ["METHOD_START", "{", "this . encoding    =    encoding ;", "}", "METHOD_END"], "methodName": ["setEncoding"], "fileName": "org.gradle.plugins.javascript.jshint.JsHint"}, {"methodBody": ["METHOD_START", "{", "this . jsHint    =    jsHint ;", "}", "METHOD_END"], "methodName": ["setJsHint"], "fileName": "org.gradle.plugins.javascript.jshint.JsHint"}, {"methodBody": ["METHOD_START", "{", "this . jsHint    =    jsHint ;", "}", "METHOD_END"], "methodName": ["setJsHint"], "fileName": "org.gradle.plugins.javascript.jshint.JsHint"}, {"methodBody": ["METHOD_START", "{", "this . jsonReport    =    jsonReport ;", "}", "METHOD_END"], "methodName": ["setJsonReport"], "fileName": "org.gradle.plugins.javascript.jshint.JsHint"}, {"methodBody": ["METHOD_START", "{", "this . jsonReport    =    jsonReport ;", "}", "METHOD_END"], "methodName": ["setJsonReport"], "fileName": "org.gradle.plugins.javascript.jshint.JsHint"}, {"methodBody": ["METHOD_START", "{", "this . rhinoClasspath    =    rhinoClasspath ;", "}", "METHOD_END"], "methodName": ["setRhinoClasspath"], "fileName": "org.gradle.plugins.javascript.jshint.JsHint"}, {"methodBody": ["METHOD_START", "{", "this . rhinoClasspath    =    rhinoClasspath ;", "}", "METHOD_END"], "methodName": ["setRhinoClasspath"], "fileName": "org.gradle.plugins.javascript.jshint.JsHint"}, {"methodBody": ["METHOD_START", "{", "return   js ;", "}", "METHOD_END"], "methodName": ["getJs"], "fileName": "org.gradle.plugins.javascript.jshint.JsHintExtension"}, {"methodBody": ["METHOD_START", "{", "return   version ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "org.gradle.plugins.javascript.jshint.JsHintExtension"}, {"methodBody": ["METHOD_START", "{", "this . js    =    js ;", "}", "METHOD_END"], "methodName": ["setJs"], "fileName": "org.gradle.plugins.javascript.jshint.JsHintExtension"}, {"methodBody": ["METHOD_START", "{", "this . version    =    version ;", "}", "METHOD_END"], "methodName": ["setVersion"], "fileName": "org.gradle.plugins.javascript.jshint.JsHintExtension"}, {"methodBody": ["METHOD_START", "{", "Configuration   configuration    =    configurations . create ( JsHintExtension . CONFIGURATION _ NAME )  ;", "configuration . defaultDependencies ( new   api . Action < DependencySet >  (  )     {", "@ Override", "public   void   execute ( DependencySet   configDependencies )     {", "String   notation    =     (  (  (  (  ( JsHintExtension . DEFAULT _ DEPENDENCY _ GROUP )     +     \"  :  \"  )     +     ( JsHintExtension . DEFAULT _ DEPENDENCY _ MODULE )  )     +     \"  :  \"  )     +     ( extension . getVersion (  )  )  )     +     \"  @ js \"  ;", "Dependency   dependency    =    dependencies . create ( notation )  ;", "configDependencies . add ( dependency )  ;", "}", "}  )  ;", "return   configuration ;", "}", "METHOD_END"], "methodName": ["addConfiguration"], "fileName": "org.gradle.plugins.javascript.jshint.JsHintPlugin"}, {"methodBody": ["METHOD_START", "{", "project . getPluginManager (  )  . apply ( RhinoPlugin . class )  ;", "project . getPluginManager (  )  . apply ( ReportingBasePlugin . class )  ;", "JavaScriptExtension   jsExtension    =    project . getExtensions (  )  . getByType ( JavaScriptExtension . class )  ;", "final   JsHintExtension   jsHintExtension    =     (  ( ExtensionAware )     ( jsExtension )  )  . getExtensions (  )  . create ( JsHintExtension . NAME ,    JsHintExtension . class )  ;", "final   Configuration   configuration    =    addConfiguration ( project . getConfigurations (  )  ,    project . getDependencies (  )  ,    jsHintExtension )  ;", "ConventionMapping   conventionMapping    =     (  ( IConventionAware )     ( jsHintExtension )  )  . getConventionMapping (  )  ;", "conventionMapping . map (  \" js \"  ,    new   Callable < Configuration >  (  )     {", "public   Configuration   call (  )     {", "return   configuration ;", "}", "}  )  ;", "conventionMapping . map (  \" version \"  ,    new   Callable < String >  (  )     {", "public   String   call (  )     {", "return   JsHintExtension . DEFAULT _ DEPENDENCY _ VERSION ;", "}", "}  )  ;", "final   RhinoExtension   rhinoExtension    =     (  ( ExtensionAware )     ( jsExtension )  )  . getExtensions (  )  . getByType ( RhinoExtension . class )  ;", "final   ReportingExtension   reportingExtension    =    project . getExtensions (  )  . getByType ( ReportingExtension . class )  ;", "project . getTasks (  )  . withType ( JsHint . class ,    new   api . Action < JsHint >  (  )     {", "public   void   execute ( final   JsHint   task )     {", "task . getConventionMapping (  )  . map (  \" rhinoClasspath \"  ,    new   Callable < FileCollection >  (  )     {", "public   FileCollection   call (  )     {", "return   rhinoExtension . getClasspath (  )  ;", "}", "}  )  ;", "task . getConventionMapping (  )  . map (  \" jsHint \"  ,    new   Callable < FileCollection >  (  )     {", "public   FileCollection   call (  )     {", "return   jsHintExtension . getJs (  )  ;", "}", "}  )  ;", "task . getConventionMapping (  )  . map (  \" jsonReport \"  ,    new   Callable < File >  (  )     {", "public   File   call (  )     {", "return   reportingExtension . file (  (  ( task . getName (  )  )     +     \"  / report . json \"  )  )  ;", "}", "}  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["apply"], "fileName": "org.gradle.plugins.javascript.jshint.JsHintPlugin"}, {"methodBody": ["METHOD_START", "{", "return   results ;", "}", "METHOD_END"], "methodName": ["getResults"], "fileName": "org.gradle.plugins.javascript.jshint.internal.JsHintResult"}, {"methodBody": ["METHOD_START", "{", "return   encoding ;", "}", "METHOD_END"], "methodName": ["getEncoding"], "fileName": "org.gradle.plugins.javascript.jshint.internal.JsHintSpec"}, {"methodBody": ["METHOD_START", "{", "return   jsHint ;", "}", "METHOD_END"], "methodName": ["getJsHint"], "fileName": "org.gradle.plugins.javascript.jshint.internal.JsHintSpec"}, {"methodBody": ["METHOD_START", "{", "return   source ;", "}", "METHOD_END"], "methodName": ["getSource"], "fileName": "org.gradle.plugins.javascript.jshint.internal.JsHintSpec"}, {"methodBody": ["METHOD_START", "{", "this . encoding    =    encoding ;", "}", "METHOD_END"], "methodName": ["setEncoding"], "fileName": "org.gradle.plugins.javascript.jshint.internal.JsHintSpec"}, {"methodBody": ["METHOD_START", "{", "this . jsHint    =    jsHint ;", "}", "METHOD_END"], "methodName": ["setJsHint"], "fileName": "org.gradle.plugins.javascript.jshint.internal.JsHintSpec"}, {"methodBody": ["METHOD_START", "{", "this . source    =    source ;", "}", "METHOD_END"], "methodName": ["setSource"], "fileName": "org.gradle.plugins.javascript.jshint.internal.JsHintSpec"}, {"methodBody": ["METHOD_START", "{", "return   RhinoWorkerUtils . childScope ( jsHintScope ,    new   RhinoWorkerUtils . DefaultScopeOperation < Map < String ,    Object >  >  (  )     {", "public   Map < String ,    Object >    action ( Scriptable   scope ,    Context   context )     {", "scope . put (  \" jsHintSource \"  ,    scope ,    source )  ;", "Object   data    =    context . evaluateString ( scope ,     \" JSHINT ( jsHintSource )  ;    JSHINT . data (  )  ;  \"  ,    sourceName ,     0  ,    null )  ;", "return   RhinoWorkerUtils . toMap (  (  ( Scriptable )     ( data )  )  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["jsHint"], "fileName": "org.gradle.plugins.javascript.jshint.internal.JsHintWorker"}, {"methodBody": ["METHOD_START", "{", "spec . setMain ( RhinoExtension . RHINO _ SHELL _ MAIN )  ;", "spec . setClasspath ( getClasspath (  )  )  ;", "}", "METHOD_END"], "methodName": ["configureJavaExec"], "fileName": "org.gradle.plugins.javascript.rhino.RhinoExtension"}, {"methodBody": ["METHOD_START", "{", "return   classpath ;", "}", "METHOD_END"], "methodName": ["getClasspath"], "fileName": "org.gradle.plugins.javascript.rhino.RhinoExtension"}, {"methodBody": ["METHOD_START", "{", "return   version ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "org.gradle.plugins.javascript.rhino.RhinoExtension"}, {"methodBody": ["METHOD_START", "{", "this . classpath    =    rhinoClasspath ;", "}", "METHOD_END"], "methodName": ["setClasspath"], "fileName": "org.gradle.plugins.javascript.rhino.RhinoExtension"}, {"methodBody": ["METHOD_START", "{", "this . version    =    version ;", "}", "METHOD_END"], "methodName": ["setVersion"], "fileName": "org.gradle.plugins.javascript.rhino.RhinoExtension"}, {"methodBody": ["METHOD_START", "{", "Configuration   configuration    =    configurations . create ( RhinoExtension . CLASSPATH _ CONFIGURATION _ NAME )  ;", "configuration . setVisible ( false )  ;", "configuration . setDeion (  \" The   default   Rhino   classpath \"  )  ;", "return   configuration ;", "}", "METHOD_END"], "methodName": ["addClasspathConfiguration"], "fileName": "org.gradle.plugins.javascript.rhino.RhinoPlugin"}, {"methodBody": ["METHOD_START", "{", "project . getPluginManager (  )  . apply ( JavaScriptBasePlugin . class )  ;", "JavaScriptExtension   jsExtension    =    project . getExtensions (  )  . findByType ( JavaScriptExtension . class )  ;", "final   RhinoExtension   rhinoExtension    =     (  ( ExtensionAware )     ( jsExtension )  )  . getExtensions (  )  . create ( RhinoExtension . NAME ,    RhinoExtension . class )  ;", "final   Configuration   configuration    =    addClasspathConfiguration ( project . getConfigurations (  )  )  ;", "configureDefaultRhinoDependency ( configuration ,    project . getDependencies (  )  ,    rhinoExtension )  ;", "ConventionMapping   conventionMapping    =     (  ( IConventionAware )     ( rhinoExtension )  )  . getConventionMapping (  )  ;", "conventionMapping . map (  \" classpath \"  ,    new   Callable < Configuration >  (  )     {", "public   Configuration   call (  )     {", "return   configuration ;", "}", "}  )  ;", "conventionMapping . map (  \" version \"  ,    new   Callable < String >  (  )     {", "public   String   call (  )     {", "return   RhinoExtension . DEFAULT _ RHINO _ DEPENDENCY _ VERSION ;", "}", "}  )  ;", "project . getTasks (  )  . withType ( RhinoShellExec . class ,    new   api . Action < RhinoShellExec >  (  )     {", "public   void   execute ( RhinoShellExec   task )     {", "task . getConventionMapping (  )  . map (  \" classpath \"  ,    new   Callable < FileCollection >  (  )     {", "public   FileCollection   call (  )     {", "return   rhinoExtension . getClasspath (  )  ;", "}", "}  )  ;", "task . getConventionMapping (  )  . map (  \" main \"  ,    new   Callable < String >  (  )     {", "public   String   call (  )     {", "return   RhinoExtension . RHINO _ SHELL _ MAIN ;", "}", "}  )  ;", "task . setClasspath ( rhinoExtension . getClasspath (  )  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["apply"], "fileName": "org.gradle.plugins.javascript.rhino.RhinoPlugin"}, {"methodBody": ["METHOD_START", "{", "configuration . defaultDependencies ( new   Action < DependencySet >  (  )     {", "public   void   execute ( DependencySet   dependencies )     {", "Dependency   dependency    =    dependencyHandler . create (  (  (  (  (  ( RhinoExtension . DEFAULT _ RHINO _ DEPENDENCY _ GROUP )     +     \"  :  \"  )     +     ( RhinoExtension . DEFAULT _ RHINO _ DEPENDENCY _ MODULE )  )     +     \"  :  \"  )     +     ( extension . getVersion (  )  )  )  )  ;", "dependencies . add ( dependency )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureDefaultRhinoDependency"], "fileName": "org.gradle.plugins.javascript.rhino.RhinoPlugin"}, {"methodBody": ["METHOD_START", "{", "return   new   UnsupportedOperationException (  \" Cannot   set   args   directly   on   RhinoShellExec ,    use   rhinoOptions ,    scriptArgs   and / or   script \"  )  ;", "}", "METHOD_END"], "methodName": ["argsUnsupportOperationException"], "fileName": "org.gradle.plugins.javascript.rhino.RhinoShellExec"}, {"methodBody": ["METHOD_START", "{", "return   CollectionUtils . stringize ( rhinoOptions )  ;", "}", "METHOD_END"], "methodName": ["getRhinoOptions"], "fileName": "org.gradle.plugins.javascript.rhino.RhinoShellExec"}, {"methodBody": ["METHOD_START", "{", "return    ( script )     =  =    null    ?    null    :    getProject (  )  . file ( script )  ;", "}", "METHOD_END"], "methodName": ["getScript"], "fileName": "org.gradle.plugins.javascript.rhino.RhinoShellExec"}, {"methodBody": ["METHOD_START", "{", "return   CollectionUtils . stringize ( scriptArgs )  ;", "}", "METHOD_END"], "methodName": ["getScriptArgs"], "fileName": "org.gradle.plugins.javascript.rhino.RhinoShellExec"}, {"methodBody": ["METHOD_START", "{", "this . rhinoOptions . addAll ( Arrays . asList ( rhinoOptions )  )  ;", "}", "METHOD_END"], "methodName": ["rhinoOptions"], "fileName": "org.gradle.plugins.javascript.rhino.RhinoShellExec"}, {"methodBody": ["METHOD_START", "{", "this . scriptArgs . addAll ( Arrays . asList ( scriptArgs )  )  ;", "}", "METHOD_END"], "methodName": ["scriptArgs"], "fileName": "org.gradle.plugins.javascript.rhino.RhinoShellExec"}, {"methodBody": ["METHOD_START", "{", "this . rhinoOptions    =    new   LinkedList < Object >  ( Arrays . asList ( rhinoOptions )  )  ;", "}", "METHOD_END"], "methodName": ["setRhinoOptions"], "fileName": "org.gradle.plugins.javascript.rhino.RhinoShellExec"}, {"methodBody": ["METHOD_START", "{", "this . rhinoOptions    =    new   LinkedList < Object >  ( rhinoOptions )  ;", "}", "METHOD_END"], "methodName": ["setRhinoOptions"], "fileName": "org.gradle.plugins.javascript.rhino.RhinoShellExec"}, {"methodBody": ["METHOD_START", "{", "this . script    =    script ;", "}", "METHOD_END"], "methodName": ["setScript"], "fileName": "org.gradle.plugins.javascript.rhino.RhinoShellExec"}, {"methodBody": ["METHOD_START", "{", "this . script    =    script ;", "}", "METHOD_END"], "methodName": ["setScript"], "fileName": "org.gradle.plugins.javascript.rhino.RhinoShellExec"}, {"methodBody": ["METHOD_START", "{", "this . scriptArgs    =    new   LinkedList < Object >  ( Arrays . asList ( scriptArgs )  )  ;", "}", "METHOD_END"], "methodName": ["setScriptArgs"], "fileName": "org.gradle.plugins.javascript.rhino.RhinoShellExec"}, {"methodBody": ["METHOD_START", "{", "this . scriptArgs    =    new   LinkedList < Object >  ( scriptArgs )  ;", "}", "METHOD_END"], "methodName": ["setScriptArgs"], "fileName": "org.gradle.plugins.javascript.rhino.RhinoShellExec"}, {"methodBody": ["METHOD_START", "{", "Context   context    =    Context . enter (  )  ;", "try    {", "operation . initContext ( context )  ;", "Sable   childScope    =    context . newObject ( parentScope )  ;", "childScope . setParentScope ( parentScope )  ;", "return   operation . action ( childScope ,    context )  ;", "}    finally    {", "Context . exit (  )  ;", "}", "}", "METHOD_END"], "methodName": ["childScope"], "fileName": "org.gradle.plugins.javascript.rhino.worker.internal.RhinoWorkerUtils"}, {"methodBody": ["METHOD_START", "{", "return   RhinoWorkerUtils . parse ( source ,    encoding ,    null )  ;", "}", "METHOD_END"], "methodName": ["parse"], "fileName": "org.gradle.plugins.javascript.rhino.worker.internal.RhinoWorkerUtils"}, {"methodBody": ["METHOD_START", "{", "Context   context    =    Context . enter (  )  ;", "if    ( contextConfig    !  =    null )     {", "contextConfig . execute ( context )  ;", "}", "Sable   scope    =    context . initStandardObjects (  )  ;", "try    {", "Reader   reader    =    new   InputStreamReader ( new   FileInputStream ( source )  ,    encoding )  ;", "try    {", "context . evaluateReader ( scope ,    reader ,    source . getName (  )  ,     0  ,    null )  ;", "}    finally    {", "reader . close (  )  ;", "}", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}    finally    {", "Context . exit (  )  ;", "}", "return   scope ;", "}", "METHOD_END"], "methodName": ["parse"], "fileName": "org.gradle.plugins.javascript.rhino.worker.internal.RhinoWorkerUtils"}, {"methodBody": ["METHOD_START", "{", "Context   context    =    Context . enter (  )  ;", "try    {", "operation . initContext ( context )  ;", "Scriptable   scope    =    context . initStandardObjects (  )  ;", "String   printFunction    =     \" function   print ( message )     {  }  \"  ;", "context . evaluateString ( scope ,    printFunction ,     \" print \"  ,     1  ,    null )  ;", "context . evaluateString ( scope ,     . readFile ( rhinoScript ,     \" UTF -  8  \"  )  ,    rhinoScript . getName (  )  ,     1  ,    null )  ;", "return   operation . action ( scope ,    context )  ;", "}    finally    {", "Context . exit (  )  ;", "}", "}", "METHOD_END"], "methodName": ["parseRhino"], "fileName": "org.gradle.plugins.javascript.rhino.worker.internal.RhinoWorkerUtils"}, {"methodBody": ["METHOD_START", "{", "return   GFileUtils . readFile ( file ,    encoding )  ;", "}", "METHOD_END"], "methodName": ["readFile"], "fileName": "org.gradle.plugins.javascript.rhino.worker.internal.RhinoWorkerUtils"}, {"methodBody": ["METHOD_START", "{", "if    (  ( object    =  =    null )     |  |     ( object . equals ( Context . getUndefinedValue (  )  )  )  )     {", "return   null ;", "} else", "if    ( object . getClass (  )  . getPackage (  )  . getName (  )  . startsWith (  \" \"  )  )     {", "return   object ;", "} else", "if    ( object   instanceof   FunctionObject )     {", "throw   new   IllegalArgumentException ( String . format (  \" Cannot   convert   function   object   to   value    ( object :     % s )  \"  ,    object )  )  ;", "} else", "if    ( object   instanceof   Scriptable )     {", "return    . toMap (  (  ( Scriptable )     ( object )  )  )  ;", "} else    {", "throw   new   IllegalArgumentException ( String . format (  \" Can ' t   convert   JS   object    % s    ( type :     % s )    to   native   Java   object \"  ,    object ,    object . getClass (  )  . getName (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["toJavaValue"], "fileName": "org.gradle.plugins.javascript.rhino.worker.internal.RhinoWorkerUtils"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    map    =    new   LinkedHashMap < String ,    Object >  (  )  ;", "for    ( Object   id    :    obj . getIds (  )  )     {", "String   key ;", "Object   value ;", "if    ( id   instanceof   String )     {", "key    =     (  ( String )     ( id )  )  ;", "value    =    obj . get ( key ,    obj )  ;", "} else", "if    ( id   instanceof   Integer )     {", "key    =    id . toString (  )  ;", "value    =    obj . get (  (  ( Integer )     ( id )  )  ,    obj )  ;", "} else    {", "throw   new   IllegalArgumentException ( String . format (  \" Unexpected   key   type :     % s    ( value :     % s )  \"  ,    id . getClass (  )  . getName (  )  ,    id )  )  ;", "}", "map . put ( key ,     . toJavaValue ( value )  )  ;", "}", "return   map ;", "}", "METHOD_END"], "methodName": ["toMap"], "fileName": "org.gradle.plugins.javascript.rhino.worker.internal.RhinoWorkerUtils"}, {"methodBody": ["METHOD_START", "{", "GFileUtils . writeFile ( content ,    destination ,    encoding )  ;", "}", "METHOD_END"], "methodName": ["writeFile"], "fileName": "org.gradle.plugins.javascript.rhino.worker.internal.RhinoWorkerUtils"}]