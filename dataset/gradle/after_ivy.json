[{"methodBody": ["METHOD_START", "{", "return   String . format (  \" Invalid   publication    '  % s '  :     % s \"  ,    publicationName ,    error )  ;", "}", "METHOD_END"], "methodName": ["formatMessage"], "fileName": "org.gradle.api.publish.ivy.InvalidIvyPublicationException"}, {"methodBody": ["METHOD_START", "{", "registration . addProvider ( new   IvyServices . BuildServices (  )  )  ;", "}", "METHOD_END"], "methodName": ["registerBuildServices"], "fileName": "org.gradle.api.publish.ivy.internal.IvyServices"}, {"methodBody": ["METHOD_START", "{", "buildDependencies . add ( tasks )  ;", "}", "METHOD_END"], "methodName": ["builtBy"], "fileName": "org.gradle.api.publish.ivy.internal.artifact.DefaultIvyArtifact"}, {"methodBody": ["METHOD_START", "{", "return   buildDependencies ;", "}", "METHOD_END"], "methodName": ["getBuildDependencies"], "fileName": "org.gradle.api.publish.ivy.internal.artifact.DefaultIvyArtifact"}, {"methodBody": ["METHOD_START", "{", "return   classifier ;", "}", "METHOD_END"], "methodName": ["getClassifier"], "fileName": "org.gradle.api.publish.ivy.internal.artifact.DefaultIvyArtifact"}, {"methodBody": ["METHOD_START", "{", "return   conf ;", "}", "METHOD_END"], "methodName": ["getConf"], "fileName": "org.gradle.api.publish.ivy.internal.artifact.DefaultIvyArtifact"}, {"methodBody": ["METHOD_START", "{", "return   extension ;", "}", "METHOD_END"], "methodName": ["getExtension"], "fileName": "org.gradle.api.publish.ivy.internal.artifact.DefaultIvyArtifact"}, {"methodBody": ["METHOD_START", "{", "return   file ;", "}", "METHOD_END"], "methodName": ["getFile"], "fileName": "org.gradle.api.publish.ivy.internal.artifact.DefaultIvyArtifact"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.api.publish.ivy.internal.artifact.DefaultIvyArtifact"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.gradle.api.publish.ivy.internal.artifact.DefaultIvyArtifact"}, {"methodBody": ["METHOD_START", "{", "this . classifier    =    classifier ;", "}", "METHOD_END"], "methodName": ["setClassifier"], "fileName": "org.gradle.api.publish.ivy.internal.artifact.DefaultIvyArtifact"}, {"methodBody": ["METHOD_START", "{", "this . conf    =    conf ;", "}", "METHOD_END"], "methodName": ["setConf"], "fileName": "org.gradle.api.publish.ivy.internal.artifact.DefaultIvyArtifact"}, {"methodBody": ["METHOD_START", "{", "this . extension    =    extension ;", "}", "METHOD_END"], "methodName": ["setExtension"], "fileName": "org.gradle.api.publish.ivy.internal.artifact.DefaultIvyArtifact"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.gradle.api.publish.ivy.internal.artifact.DefaultIvyArtifact"}, {"methodBody": ["METHOD_START", "{", "this . type    =    type ;", "}", "METHOD_END"], "methodName": ["setType"], "fileName": "org.gradle.api.publish.ivy.internal.artifact.DefaultIvyArtifact"}, {"methodBody": ["METHOD_START", "{", "IvyArtifact   artifact    =    ivyArtifactParser . parseNotation ( source )  ;", "add ( artifact )  ;", "return   artifact ;", "}", "METHOD_END"], "methodName": ["artifact"], "fileName": "org.gradle.api.publish.ivy.internal.artifact.DefaultIvyArtifactSet"}, {"methodBody": ["METHOD_START", "{", "IvyArtifact   artifact    =    artifact ( source )  ;", "config . execute ( artifact )  ;", "return   artifact ;", "}", "METHOD_END"], "methodName": ["artifact"], "fileName": "org.gradle.api.publish.ivy.internal.artifact.DefaultIvyArtifactSet"}, {"methodBody": ["METHOD_START", "{", "return   files ;", "}", "METHOD_END"], "methodName": ["getFiles"], "fileName": "org.gradle.api.publish.ivy.internal.artifact.DefaultIvyArtifactSet"}, {"methodBody": ["METHOD_START", "{", "IvyArtifactNotationParserFactory . FileNotationConverter   fileNotationConverter    =    new   IvyArtifactNotationParserFactory . FileNotationConverter ( fileResolver )  ;", "IvyArtifactNotationParserFactory . ArchiveTaskNotationConverter   archiveTaskNotationConverter    =    new   IvyArtifactNotationParserFactory . ArchiveTaskNotationConverter (  )  ;", "IvyArtifactNotationParserFactory . PublishArtifactNotationConverter   publishArtifactNotationConverter    =    new   IvyArtifactNotationParserFactory . PublishArtifactNotationConverter (  )  ;", "NotationParser < Object ,    IvyArtifact >    sourceNotationParser    =    NotationParserBuilder . toType ( IvyArtifact . class )  . converter ( archiveTaskNotationConverter )  . converter ( publishArtifactNotationConverter )  . converter ( fileNotationConverter )  . toComposite (  )  ;", "IvyArtifactNotationParserFactory . IvyArtifactMapNotationConverter   ivyArtifactMapNotationConverter    =    new   IvyArtifactNotationParserFactory . IvyArtifactMapNotationConverter ( sourceNotationParser )  ;", "NotationParserBuilder < IvyArtifact >    parserBuilder    =    NotationParserBuilder . toType ( IvyArtifact . class )  . converter ( archiveTaskNotationConverter )  . converter ( publishArtifactNotationConverter )  . converter ( ivyArtifactMapNotationConverter )  . converter ( fileNotationConverter )  ;", "return   parserBuilder . toComposite (  )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.api.publish.ivy.internal.artifact.IvyArtifactNotationParserFactory"}, {"methodBody": ["METHOD_START", "{", "DefaultIvyArtifact   ivyArtifact    =    instantiator . newInstance ( DefaultIvyArtifact . class ,    file ,    null ,    extension ,    type ,    classifier )  ;", "new   DslObject ( ivyArtifact )  . getConventionMapping (  )  . map (  \" name \"  ,    new   Callable < String >  (  )     {", "public   String   call (  )    throws   Exception    {", "return   publicationIdentity . getModule (  )  ;", "}", "}  )  ;", "return   ivyArtifact ;", "}", "METHOD_END"], "methodName": ["createDefaultIvyArtifact"], "fileName": "org.gradle.api.publish.ivy.internal.artifact.IvyArtifactNotationParserFactory"}, {"methodBody": ["METHOD_START", "{", "return   artifacts ;", "}", "METHOD_END"], "methodName": ["getArtifacts"], "fileName": "org.gradle.api.publish.ivy.internal.dependency.DefaultIvyDependency"}, {"methodBody": ["METHOD_START", "{", "return   confMapping ;", "}", "METHOD_END"], "methodName": ["getConfMapping"], "fileName": "org.gradle.api.publish.ivy.internal.dependency.DefaultIvyDependency"}, {"methodBody": ["METHOD_START", "{", "return   excludeRules ;", "}", "METHOD_END"], "methodName": ["getExcludeRules"], "fileName": "org.gradle.api.publish.ivy.internal.dependency.DefaultIvyDependency"}, {"methodBody": ["METHOD_START", "{", "return   module ;", "}", "METHOD_END"], "methodName": ["getModule"], "fileName": "org.gradle.api.publish.ivy.internal.dependency.DefaultIvyDependency"}, {"methodBody": ["METHOD_START", "{", "return   organisation ;", "}", "METHOD_END"], "methodName": ["getOrganisation"], "fileName": "org.gradle.api.publish.ivy.internal.dependency.DefaultIvyDependency"}, {"methodBody": ["METHOD_START", "{", "return   revision ;", "}", "METHOD_END"], "methodName": ["getRevision"], "fileName": "org.gradle.api.publish.ivy.internal.dependency.DefaultIvyDependency"}, {"methodBody": ["METHOD_START", "{", "return   transitive ;", "}", "METHOD_END"], "methodName": ["isTransitive"], "fileName": "org.gradle.api.publish.ivy.internal.dependency.DefaultIvyDependency"}, {"methodBody": ["METHOD_START", "{", "extendsFrom . add ( configuration )  ;", "}", "METHOD_END"], "methodName": ["extend"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   extendsFrom ;", "}", "METHOD_END"], "methodName": ["getExtends"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyConfiguration"}, {"methodBody": ["METHOD_START", "{", "if    ( XmlValidation . isValidXmlName ( name )  )     {", "e . put ( new   NamespaceId ( namespace ,    name )  ,    value )  ;", "} else    {", "throw   new   IllegalArgumentException ( String . format (  \" Invalid   ivy   extra   info   element   name :     '  % s '  \"  ,    name )  )  ;", "}", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyExtraInfoSpec"}, {"methodBody": ["METHOD_START", "{", "if    ( elementName    =  =    null )     {", "throw   new   InvalidUserDataExcep (  \" Cannot   add   an   extra   info   element   with   null   element   name \"  )  ;", "}", "if    ( namespace    =  =    null )     {", "throw   new   InvalidUserDataExcep (  \" Cannot   add   an   extra   info   element   with   null   namespace \"  )  ;", "}", "extraInfo . add ( namespace ,    elementName ,    value )  ;", "}", "METHOD_END"], "methodName": ["extraInfo"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyModuleDescriptorSpec"}, {"methodBody": ["METHOD_START", "{", "return   ivyPublication . getArtifacts (  )  ;", "}", "METHOD_END"], "methodName": ["getArtifacts"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyModuleDescriptorSpec"}, {"methodBody": ["METHOD_START", "{", "return   branch ;", "}", "METHOD_END"], "methodName": ["getBranch"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyModuleDescriptorSpec"}, {"methodBody": ["METHOD_START", "{", "return   ivyPublication . getConfigurations (  )  ;", "}", "METHOD_END"], "methodName": ["getConfigurations"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyModuleDescriptorSpec"}, {"methodBody": ["METHOD_START", "{", "return   ivyPublication . getDependencies (  )  ;", "}", "METHOD_END"], "methodName": ["getDependencies"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyModuleDescriptorSpec"}, {"methodBody": ["METHOD_START", "{", "return   extraInfo ;", "}", "METHOD_END"], "methodName": ["getExtraInfo"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyModuleDescriptorSpec"}, {"methodBody": ["METHOD_START", "{", "return   ivyPublication . getIdentity (  )  ;", "}", "METHOD_END"], "methodName": ["getProjectIdentity"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyModuleDescriptorSpec"}, {"methodBody": ["METHOD_START", "{", "return   status ;", "}", "METHOD_END"], "methodName": ["getStatus"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyModuleDescriptorSpec"}, {"methodBody": ["METHOD_START", "{", "return   xmlActions ;", "}", "METHOD_END"], "methodName": ["getXmlAction"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyModuleDescriptorSpec"}, {"methodBody": ["METHOD_START", "{", "this . branch    =    branch ;", "}", "METHOD_END"], "methodName": ["setBranch"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyModuleDescriptorSpec"}, {"methodBody": ["METHOD_START", "{", "this . status    =    status ;", "}", "METHOD_END"], "methodName": ["setStatus"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyModuleDescriptorSpec"}, {"methodBody": ["METHOD_START", "{", "xmlActions . add ( new   UserCodeAction < XmlProvider >  (  \" Could   not   apply   withXml (  )    to   Ivy   module   descriptor \"  ,    action )  )  ;", "}", "METHOD_END"], "methodName": ["withXml"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyModuleDescriptorSpec"}, {"methodBody": ["METHOD_START", "{", "ivyDependencies . add ( new   DefaultIvyDependency ( dependency ,    confMapping )  )  ;", "}", "METHOD_END"], "methodName": ["addExternalDependency"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublication"}, {"methodBody": ["METHOD_START", "{", "ModuleVersionIdentifier   identifier    =    projectDependencyResolver . resolve ( ModuleVersionIdentifier . class ,    dependency )  ;", "ivyDependencies . add ( new   Dependency ( identifier . getGroup (  )  ,    identifier . getName (  )  ,    identifier . getVersion (  )  ,    confMapping ,    dependency . isTransitive (  )  ,    Collections .  < DependencyArtifact > emptyList (  )  ,    dependency . getExcludeRules (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["addProjectDependency"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublication"}, {"methodBody": ["METHOD_START", "{", "return   ivyArtifacts . artifact ( source )  ;", "}", "METHOD_END"], "methodName": ["artifact"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublication"}, {"methodBody": ["METHOD_START", "{", "return   ivyArtifacts . artifact ( source ,    config )  ;", "}", "METHOD_END"], "methodName": ["artifact"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublication"}, {"methodBody": ["METHOD_START", "{", "return   new   IvyNormalizedPublication ( name ,    getIdentity (  )  ,    DefaultIvyPublication . assertDescriptorFile ( ivyDescriptorFile )  ,    maybeGradleDescriptorFile (  )  ,    ivyArtifacts )  ;", "}", "METHOD_END"], "methodName": ["asNormalisedPublication"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublication"}, {"methodBody": ["METHOD_START", "{", "if    ( ref    =  =    null )     {", "throw   new   IllegalStateException (  \" descriptorFile   not   set   for    \"  )  ;", "}", "return   ref . getSingleFile (  )  ;", "}", "METHOD_END"], "methodName": ["assertDescriptorFile"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublication"}, {"methodBody": ["METHOD_START", "{", "config . execute ( configurations )  ;", "}", "METHOD_END"], "methodName": ["configurations"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublication"}, {"methodBody": ["METHOD_START", "{", "configure . execute ( descriptor )  ;", "}", "METHOD_END"], "methodName": ["descriptor"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublication"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . component )     !  =    null )     {", "throw   new   InvalidUserDataException ( String . format (  \" Ivy       '  % s '    cannot   include   multiple   components \"  ,    name )  )  ;", "}", "this . component    =     (  ( SoftwareComponentInternal )     ( component )  )  ;", "configurations . maybeCreate (  \" default \"  )  ;", "Set < PublishArtifact >    seenArtifacts    =    Sets . newHashSet (  )  ;", "Set < ModuleDependency >    seenDependencies    =    Sets . newHashSet (  )  ;", "for    ( UsageContext   usageContext    :    getSortedUsageContexts (  )  )     {", "Usage   usage    =    usageContext . getUsage (  )  ;", "String   conf    =    mapUsage ( usage )  ;", "configurations . maybeCreate ( conf )  ;", "configurations . getByName (  \" default \"  )  . extend ( conf )  ;", "for    ( PublishArtifact   publishArtifact    :    usageContext . getArtifacts (  )  )     {", "if    (  !  ( seenArtifacts . contains ( publishArtifact )  )  )     {", "seenArtifacts . add ( publishArtifact )  ;", "artifact ( publishArtifact )  . setConf ( conf )  ;", "}", "}", "for    ( ModuleDependency   dependency    :    usageContext . getDependencies (  )  )     {", "if    ( seenDependencies . add ( dependency )  )     {", "String   confMapping    =    String . format (  \"  % s -  >  % s \"  ,    conf ,     (  ( dependency . getTargetConfiguration (  )  )     =  =    null    ?    Dependency . DEFAULT _ CONFIGURATION    :    dependency . getTargetConfiguration (  )  )  )  ;", "if    ( dependency   instanceof   ProjectDependency )     {", "addProjectDependency (  (  ( ProjectDependency )     ( dependency )  )  ,    confMapping )  ;", "} else    {", "addExternalDependency (  (  ( ExternalDependency )     ( dependency )  )  ,    confMapping )  ;", "}", "}", "}", "}", "}", "METHOD_END"], "methodName": ["from"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublication"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   artifactPath    =    new   StringBuilder (  )  ;", "ModuleVersIdentifier   coordinates    =    getCoordinates (  )  ;", "artifactPath . append ( coordinates . getName (  )  )  ;", "artifactPath . append (  '  -  '  )  ;", "artifactPath . append ( coordinates . getVers (  )  )  ;", "if    ( GUtil . isTrue ( classifier )  )     {", "artifactPath . append (  '  -  '  )  ;", "artifactPath . append ( classifier )  ;", "}", "if    ( GUtil . isTrue ( extens )  )     {", "artifactPath . append (  '  .  '  )  ;", "artifactPath . append ( extens )  ;", "}", "return   artifactPath . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getArtifactFileName"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublication"}, {"methodBody": ["METHOD_START", "{", "return   ivyArtifacts ;", "}", "METHOD_END"], "methodName": ["getArtifacts"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublication"}, {"methodBody": ["METHOD_START", "{", "return   configurations ;", "}", "METHOD_END"], "methodName": ["getConfigurations"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublication"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultModuleVersionIdentifier ( getOrganisation (  )  ,    getModule (  )  ,    getRevision (  )  )  ;", "}", "METHOD_END"], "methodName": ["getCoordinates"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublication"}, {"methodBody": ["METHOD_START", "{", "return   ivyDependencies ;", "}", "METHOD_END"], "methodName": ["getDependencies"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublication"}, {"methodBody": ["METHOD_START", "{", "return   descriptor ;", "}", "METHOD_END"], "methodName": ["getDescriptor"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublication"}, {"methodBody": ["METHOD_START", "{", "return   publicationIdentity ;", "}", "METHOD_END"], "methodName": ["getIdentity"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublication"}, {"methodBody": ["METHOD_START", "{", "return   publicationIdentity . getModule (  )  ;", "}", "METHOD_END"], "methodName": ["getModule"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublication"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublication"}, {"methodBody": ["METHOD_START", "{", "return   publicationIdentity . getOrganisation (  )  ;", "}", "METHOD_END"], "methodName": ["getOrganisation"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublication"}, {"methodBody": ["METHOD_START", "{", "if    (  ( gradleModuleDescriptorFile )     =  =    null )     {", "return   new   internal . file . UnionFileCollection ( ivyArtifacts . getFiles (  )  ,    ivyDescriptorFile )  ;", "}", "return   new   internal . file . UnionFileCollection ( ivyArtifacts . getFiles (  )  ,    ivyDescriptorFile ,    gradleModuleDescriptorFile )  ;", "}", "METHOD_END"], "methodName": ["getPublishableFiles"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublication"}, {"methodBody": ["METHOD_START", "{", "return   getArtifactFileName ( source . getClassifier (  )  ,    source . getExtension (  )  )  ;", "}", "METHOD_END"], "methodName": ["getPublishedUrl"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublication"}, {"methodBody": ["METHOD_START", "{", "return   publicationIdentity . getRevision (  )  ;", "}", "METHOD_END"], "methodName": ["getRevision"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublication"}, {"methodBody": ["METHOD_START", "{", "List < UsageContext >    usageContexts    =    Lists . newArrayList ( this . component . getUsages (  )  )  ;", "Collections . sort ( usageContexts ,     . USAGE _ ORDERING )  ;", "return   usageContexts ;", "}", "METHOD_END"], "methodName": ["getSortedUsageContexts"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublication"}, {"methodBody": ["METHOD_START", "{", "if    ( JAVA _ API . equals ( usage . getName (  )  )  )     {", "return    \" compile \"  ;", "}", "if    ( JAVA _ RUNTIME . equals ( usage . getName (  )  )  )     {", "return    \" runtime \"  ;", "}", "return   usage . getName (  )  ;", "}", "METHOD_END"], "methodName": ["mapUsage"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublication"}, {"methodBody": ["METHOD_START", "{", "if    (  ( gradleModuleDescriptorFile )     =  =    null )     {", "return   null ;", "}", "return   gradleModuleDescriptorFile . getSingleFile (  )  ;", "}", "METHOD_END"], "methodName": ["maybeGradleDescriptorFile"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublication"}, {"methodBody": ["METHOD_START", "{", "ivyArtifacts . clear (  )  ;", "for    ( Object   source    :    sources )     {", "artifact ( source )  ;", "}", "}", "METHOD_END"], "methodName": ["setArtifacts"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublication"}, {"methodBody": ["METHOD_START", "{", "this . gradleModuleDescriptorFile    =    descriptorFile ;", "}", "METHOD_END"], "methodName": ["setGradleModuleDescriptorFile"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublication"}, {"methodBody": ["METHOD_START", "{", "this . ivyDescriptorFile    =    descriptorFile ;", "}", "METHOD_END"], "methodName": ["setIvyDescriptorFile"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublication"}, {"methodBody": ["METHOD_START", "{", "publicationIdentity . setModule ( module )  ;", "}", "METHOD_END"], "methodName": ["setModule"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublication"}, {"methodBody": ["METHOD_START", "{", "publicationIdentity . setOrganisation ( organisation )  ;", "}", "METHOD_END"], "methodName": ["setOrganisation"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublication"}, {"methodBody": ["METHOD_START", "{", "publicationIdentity . setRevision ( revision )  ;", "}", "METHOD_END"], "methodName": ["setRevision"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublication"}, {"methodBody": ["METHOD_START", "{", "return   module ;", "}", "METHOD_END"], "methodName": ["getModule"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublicationIdentity"}, {"methodBody": ["METHOD_START", "{", "return   organisation ;", "}", "METHOD_END"], "methodName": ["getOrganisation"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublicationIdentity"}, {"methodBody": ["METHOD_START", "{", "return   revision ;", "}", "METHOD_END"], "methodName": ["getRevision"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublicationIdentity"}, {"methodBody": ["METHOD_START", "{", "this . module    =    module ;", "}", "METHOD_END"], "methodName": ["setModule"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublicationIdentity"}, {"methodBody": ["METHOD_START", "{", "this . organisation    =    organisation ;", "}", "METHOD_END"], "methodName": ["setOrganisation"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublicationIdentity"}, {"methodBody": ["METHOD_START", "{", "this . revision    =    revision ;", "}", "METHOD_END"], "methodName": ["setRevision"], "fileName": "org.gradle.api.publish.ivy.internal.publication.DefaultIvyPublicationIdentity"}, {"methodBody": ["METHOD_START", "{", "ivyContextManager . withIvy ( new   Action < Ivy >  (  )     {", "public   void   execute ( Ivy   ivy )     {", "ivyPublisher . publish ( publication ,    repository )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["publish"], "fileName": "org.gradle.api.publish.ivy.internal.publisher.ContextualizingIvyPublisher"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultIvyArtifactName ( ivyArtifact . getName (  )  ,    ivyArtifact . getType (  )  ,    ivyArtifact . getExtension (  )  ,    ivyArtifact . getClassifier (  )  )  ;", "}", "METHOD_END"], "methodName": ["createIvyArtifact"], "fileName": "org.gradle.api.publish.ivy.internal.publisher.DependencyResolverIvyPublisher"}, {"methodBody": ["METHOD_START", "{", "ModuleVersionPublisher    =    repository . createPublisher (  )  ;", "IvyPublicationIdentity   projectIdentity    =    publication . getProjectIdentity (  )  ;", "ModuleComponentIdentifier   moduleVersionIdentifier    =    DefaultModuleComponentIdentifier . newId ( projectIdentity . getOrganisation (  )  ,    projectIdentity . getModule (  )  ,    projectIdentity . getRevision (  )  )  ;", "DefaultIvyModulePublishMetadata   publishMetaData    =    new   DefaultIvyModulePublishMetadata ( moduleVersionIdentifier ,     \"  \"  )  ;", "for    ( IvyArtifact   publishArtifact    :    publication . getArtifacts (  )  )     {", "publishMetaData . addArtifact ( createIvyArtifact ( publishArtifact )  ,    publishArtifact . getFile (  )  )  ;", "}", "IvyArtifactName   ivyDescriptor    =    new   DefaultIvyArtifactName (  \" ivy \"  ,     \" ivy \"  ,     \" xml \"  )  ;", "publishMetaData . addArtifact ( ivyDescriptor ,    publication . getIvyDescriptorFile (  )  )  ;", "File   gradleModuleDescriptorFile    =    publication . getGradleModuleDescriptorFile (  )  ;", "if    (  ( gradleModuleDescriptorFile    !  =    null )     &  &     ( gradleModuleDescriptorFile . exists (  )  )  )     {", "IvyArtifactName   gradleDescriptor    =    new   DefaultIvyArtifactName ( projectIdentity . getModule (  )  ,     \" json \"  ,     \" module \"  )  ;", "publishMetaData . addArtifact ( gradleDescriptor ,    gradleModuleDescriptorFile )  ;", "}", "publish ( publishMetaData )  ;", "}", "METHOD_END"], "methodName": ["publish"], "fileName": "org.gradle.api.publish.ivy.internal.publisher.DependencyResolverIvyPublisher"}, {"methodBody": ["METHOD_START", "{", "artifacts . add ( ivyArtifact )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addArtifact"], "fileName": "org.gradle.api.publish.ivy.internal.publisher.IvyDescriptorFileGenerator"}, {"methodBody": ["METHOD_START", "{", "configurations . add ( ivyConfiguration )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addConfiguration"], "fileName": "org.gradle.api.publish.ivy.internal.publisher.IvyDescriptorFileGenerator"}, {"methodBody": ["METHOD_START", "{", "dependencies . add ( ivyDependency )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addDependency"], "fileName": "org.gradle.api.publish.ivy.internal.publisher.IvyDescriptorFileGenerator"}, {"methodBody": ["METHOD_START", "{", "return   extraInfo ;", "}", "METHOD_END"], "methodName": ["getExtraInfo"], "fileName": "org.gradle.api.publish.ivy.internal.publisher.IvyDescriptorFileGenerator"}, {"methodBody": ["METHOD_START", "{", "xmlWriter . startElement (  \" artifact \"  )  . attribute (  \" name \"  ,    dependencyArtifact . getName (  )  )  . attribute (  \" type \"  ,    dependencyArtifact . getType (  )  )  . attribute (  \" ext \"  ,    dependencyArtifact . getExtension (  )  )  . attribute (  \" m : classifier \"  ,    dependencyArtifact . getClassifier (  )  )  . endElement (  )  ;", "}", "METHOD_END"], "methodName": ["printDependencyArtifact"], "fileName": "org.gradle.api.publish.ivy.internal.publisher.IvyDescriptorFileGenerator"}, {"methodBody": ["METHOD_START", "{", "this . branch    =    branch ;", "}", "METHOD_END"], "methodName": ["setBranch"], "fileName": "org.gradle.api.publish.ivy.internal.publisher.IvyDescriptorFileGenerator"}, {"methodBody": ["METHOD_START", "{", "this . extraInfo    =    extraInfo ;", "}", "METHOD_END"], "methodName": ["setExtraInfo"], "fileName": "org.gradle.api.publish.ivy.internal.publisher.IvyDescriptorFileGenerator"}, {"methodBody": ["METHOD_START", "{", "this . status    =    status ;", "}", "METHOD_END"], "methodName": ["setStatus"], "fileName": "org.gradle.api.publish.ivy.internal.publisher.IvyDescriptorFileGenerator"}, {"methodBody": ["METHOD_START", "{", "for    ( IvyArtifact   artifact    :    artifacts )     {", "if    (  ( artifact . getClassifier (  )  )     !  =    null )     {", "return   true ;", "}", "}", "for    ( IvyDependencyI   dependency    :    this . dependencies )     {", "for    ( DependencyArtifact   dependencyArtifact    :    dependency . getArtifacts (  )  )     {", "if    (  ( dependencyArtifact . getClassifier (  )  )     !  =    null )     {", "return   true ;", "}", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["usesClassifier"], "fileName": "org.gradle.api.publish.ivy.internal.publisher.IvyDescriptorFileGenerator"}, {"methodBody": ["METHOD_START", "{", "xmlTransformer . addAction ( action )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["withXml"], "fileName": "org.gradle.api.publish.ivy.internal.publisher.IvyDescriptorFileGenerator"}, {"methodBody": ["METHOD_START", "{", "xmlWriter . startElement (  \" configurations \"  )  ;", "for    ( IvyConfiguration   configuration    :    configurations )     {", "xmlWriter . startElement (  \" conf \"  )  . attribute (  \" name \"  ,    configuration . getName (  )  )  . attribute (  \" visibility \"  ,     \" c \"  )  ;", "if    (  ( configuration . getExtends (  )  . size (  )  )     >     0  )     {", "xmlWriter . attribute (  \" extends \"  ,    CollectionUtils . join (  \"  ,  \"  ,    configuration . getExtends (  )  )  )  ;", "}", "xmlWriter . endElement (  )  ;", "}", "xmlWriter . endElement (  )  ;", "}", "METHOD_END"], "methodName": ["writeConfigurations"], "fileName": "org.gradle.api.publish.ivy.internal.publisher.IvyDescriptorFileGenerator"}, {"methodBody": ["METHOD_START", "{", "xmlWriter . startElement (  \" dependencies \"  )  ;", "for    ( IvyDependencyI   dependency    :    dependencies )     {", "xmlWriter . startElement (  \" dependency \"  )  . attribute (  \" org \"  ,    dependency . getOrganisation (  )  )  . attribute (  \" name \"  ,    dependency . getModule (  )  )  . attribute (  \" rev \"  ,    dependency . getRevision (  )  )  . attribute (  \" conf \"  ,    dependency . getConfMapping (  )  )  ;", "if    (  !  ( dependency . isTransitive (  )  )  )     {", "xmlWriter . attribute (  \" transitive \"  ,     \" false \"  )  ;", "}", "for    ( DependencyArtifact   dependencyArtifact    :    dependency . getArtifacts (  )  )     {", "printDependencyArtifact ( dependencyArtifact ,    xmlWriter )  ;", "}", "for    ( ExcludeRule   excludeRule    :    dependency . getExcludeRules (  )  )     {", "writeDependencyExclude ( excludeRule ,    xmlWriter )  ;", "}", "xmlWriter . endElement (  )  ;", "}", "xmlWriter . endElement (  )  ;", "}", "METHOD_END"], "methodName": ["writeDependencies"], "fileName": "org.gradle.api.publish.ivy.internal.publisher.IvyDescriptorFileGenerator"}, {"methodBody": ["METHOD_START", "{", "xmlWriter . startElement (  \" exclude \"  )  . attribute (  \" org \"  ,    excludeRule . getGroup (  )  )  . attribute (  \" module \"  ,    excludeRule . getModule (  )  )  . endElement (  )  ;", "}", "METHOD_END"], "methodName": ["writeDependencyExclude"], "fileName": "org.gradle.api.publish.ivy.internal.publisher.IvyDescriptorFileGenerator"}, {"methodBody": ["METHOD_START", "{", "IvyDescriptorFileGenerator . OptionalAttributeXmlWriter   xmlWriter    =    new   IvyDescriptorFileGenerator . OptionalAttributeXmlWriter ( writer ,     \"        \"  ,    IvyDescriptorFileGenerator . IVY _ FILE _ ENCODING )  ;", "xmlWriter . startElement (  \" ivy - module \"  )  . attribute (  \" version \"  ,     \"  2  .  0  \"  )  ;", "if    ( usesClassifier (  )  )     {", "xmlWriter . attribute (  \" xmlns : m \"  ,     \" http :  /  / ant . apache . org / ivy / maven \"  )  ;", "}", "xmlWriter . startElement (  \" info \"  )  . attribute (  \" organisation \"  ,    projectIdentity . getOrganisation (  )  )  . attribute (  \" module \"  ,    projectIdentity . getModule (  )  )  . attribute (  \" branch \"  ,    branch )  . attribute (  \" revision \"  ,    projectIdentity . getRevision (  )  )  . attribute (  \" status \"  ,    status )  . attribute (  \" publication \"  ,    ivyDateFormat . format ( new   Date (  )  )  )  ;", "if    (  ( extraInfo )     !  =    null )     {", "for    ( Map . Entry < QName ,    String >    entry    :    extraInfo . entrySet (  )  )     {", "if    (  ( entry . getKey (  )  )     !  =    null )     {", "xmlWriter . startElement (  (  \" ns :  \"     +     ( entry . getKey (  )  . getLocalPart (  )  )  )  )  . attribute (  \" xmlns : ns \"  ,    entry . getKey (  )  . getNamespaceURI (  )  )  . characters ( entry . getValue (  )  )  . endElement (  )  ;", "}", "}", "}", "xmlWriter . endElement (  )  ;", "writeConfigurations ( xmlWriter )  ;", "writePublications ( xmlWriter )  ;", "writeDependencies ( xmlWriter )  ;", "xmlWriter . endElement (  )  ;", "}", "METHOD_END"], "methodName": ["writeDescriptor"], "fileName": "org.gradle.api.publish.ivy.internal.publisher.IvyDescriptorFileGenerator"}, {"methodBody": ["METHOD_START", "{", "xmlWriter . startElement (  \" publications \"  )  ;", "for    ( IvyArtifact   artifact    :    artifacts )     {", "xmlWriter . startElement (  \" artifact \"  )  . attribute (  \" name \"  ,    artifact . getName (  )  )  . attribute (  \" type \"  ,    artifact . getType (  )  )  . attribute (  \" ext \"  ,    artifact . getExtension (  )  )  . attribute (  \" conf \"  ,    artifact . getConf (  )  )  . attribute (  \" m : classifier \"  ,    artifact . getClassifier (  )  )  . endElement (  )  ;", "}", "xmlWriter . endElement (  )  ;", "}", "METHOD_END"], "methodName": ["writePublications"], "fileName": "org.gradle.api.publish.ivy.internal.publisher.IvyDescriptorFileGenerator"}, {"methodBody": ["METHOD_START", "{", "xmlTransformer . transform ( file ,    IvyDescriptorFileGenerator . IVY _ FILE _ ENCODING ,    new   Action < Writer >  (  )     {", "public   void   execute ( Writer   writer )     {", "try    {", "writeDescriptor ( writer )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "}  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["writeTo"], "fileName": "org.gradle.api.publish.ivy.internal.publisher.IvyDescriptorFileGenerator"}, {"methodBody": ["METHOD_START", "{", "return   artifacts ;", "}", "METHOD_END"], "methodName": ["getArtifacts"], "fileName": "org.gradle.api.publish.ivy.internal.publisher.IvyNormalizedPublication"}, {"methodBody": ["METHOD_START", "{", "return   gradleModuleDescriptorFile ;", "}", "METHOD_END"], "methodName": ["getGradleModuleDescriptorFile"], "fileName": "org.gradle.api.publish.ivy.internal.publisher.IvyNormalizedPublication"}, {"methodBody": ["METHOD_START", "{", "return   ivyDescriptorFile ;", "}", "METHOD_END"], "methodName": ["getIvyDescriptorFile"], "fileName": "org.gradle.api.publish.ivy.internal.publisher.IvyNormalizedPublication"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.api.publish.ivy.internal.publisher.IvyNormalizedPublication"}, {"methodBody": ["METHOD_START", "{", "return   projectIdentity ;", "}", "METHOD_END"], "methodName": ["getProjectIdentity"], "fileName": "org.gradle.api.publish.ivy.internal.publisher.IvyNormalizedPublication"}, {"methodBody": ["METHOD_START", "{", "File   artifactFile    =    artifact . getFile (  )  ;", "if    (  ( artifactFile    =  =    null )     |  |     (  !  ( artifactFile . exists (  )  )  )  )     {", "throw   new   InvalidcationException ( name ,    String . format (  \" artifact   file   does   not   exist :     '  % s '  \"  ,    artifactFile )  )  ;", "}", "if    ( artifactFile . isDirectory (  )  )     {", "throw   new   InvalidcationException ( name ,    String . format (  \" artifact   file   is   a   directory :     '  % s '  \"  ,    artifactFile )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkCanPublish"], "fileName": "org.gradle.api.publish.ivy.internal.publisher.ValidatingIvyPublisher"}, {"methodBody": ["METHOD_START", "{", "Set < IvyArtifact >    verified    =    new   HashSet < IvyArtifact >  (  )  ;", "for    ( final   IvyArtifact   artifact    :    cation . getArtifacts (  )  )     {", "checkNotDuplicate ( cation ,    verified ,    artifact . getName (  )  ,    artifact . getExtension (  )  ,    artifact . getType (  )  ,    artifact . getClassifier (  )  )  ;", "verified . add ( artifact )  ;", "}", "checkNotDuplicate ( cation ,    verified ,     \" ivy \"  ,     \" xml \"  ,     \" xml \"  ,    null )  ;", "}", "METHOD_END"], "methodName": ["checkNoDuplicateArtifacts"], "fileName": "org.gradle.api.publish.ivy.internal.publisher.ValidatingIvyPublisher"}, {"methodBody": ["METHOD_START", "{", "for    ( IvyArtifact   alreadyVerified    :    verified )     {", "if    ( hasCoordinates ( alreadyVerified ,    name ,    extension ,    type ,    classifier )  )     {", "String   message    =    String . format (  \" multiple   artifacts   with   the   identical   name ,    extension ,    type   and   classifier    (  '  % s '  ,     % s '  ,     '  % s '  ,     '  % s '  )  .  \"  ,    name ,    extension ,    type ,    classifier )  ;", "throw   new   InvalidcationException ( publication . getName (  )  ,    message )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["checkNotDuplicate"], "fileName": "org.gradle.api.publish.ivy.internal.publisher.ValidatingIvyPublisher"}, {"methodBody": ["METHOD_START", "{", "return   new   ValidatingIvyPublisher . IvyFieldValidator ( publication . getName (  )  ,    name ,    value )  ;", "}", "METHOD_END"], "methodName": ["field"], "fileName": "org.gradle.api.publish.ivy.internal.publisher.ValidatingIvyPublisher"}, {"methodBody": ["METHOD_START", "{", "return    (  (  ( ObjectUtils . equals ( one . getName (  )  ,    name )  )     &  &     ( ObjectUtils . equals ( one . getType (  )  ,    type )  )  )     &  &     ( ObjectUtils . equals ( one . getExtension (  )  ,    extension )  )  )     &  &     ( ObjectUtils . equals ( one . getClassifier (  )  ,    classifier )  )  ;", "}", "METHOD_END"], "methodName": ["hasCoordinates"], "fileName": "org.gradle.api.publish.ivy.internal.publisher.ValidatingIvyPublisher"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   moduleDescriptorParser . parseMetaData ( parserSettings ,    publication . getIvyDescriptorFile (  )  ,    true )  ;", "}    catch    ( MetaDataParseException   pe )     {", "throw   new   InvalidcationException ( publication . getName (  )  ,    pe . getLocalizedMessage (  )  ,    pe )  ;", "}", "}", "METHOD_END"], "methodName": ["parseIvyFile"], "fileName": "org.gradle.api.publish.ivy.internal.publisher.ValidatingIvyPublisher"}, {"methodBody": ["METHOD_START", "{", "validateMetadata ( publication )  ;", "validateArtifacts ( publication )  ;", "checkNoDuplicateArtifacts ( publication )  ;", "delegate ( publication ,    repository )  ;", "}", "METHOD_END"], "methodName": ["publish"], "fileName": "org.gradle.api.publish.ivy.internal.publisher.ValidatingIvyPublisher"}, {"methodBody": ["METHOD_START", "{", "for    ( final   IvyArtifact   artifact    :    publication . getArtifacts (  )  )     {", "field ( publication ,     \" artifact   name \"  ,    artifact . getName (  )  )  . notEmpty (  )  . validInFileName (  )  ;", "field ( publication ,     \" artifact   type \"  ,    artifact . getType (  )  )  . notEmpty (  )  . validInFileName (  )  ;", "field ( publication ,     \" artifact   extension \"  ,    artifact . getExtension (  )  )  . notNull (  )  . validInFileName (  )  ;", "field ( publication ,     \" artifact   classifier \"  ,    artifact . getClassifier (  )  )  . optionalNotEmpty (  )  . validInFileName (  )  ;", "checkCan ( publication . getName (  )  ,    artifact )  ;", "}", "}", "METHOD_END"], "methodName": ["validateArtifacts"], "fileName": "org.gradle.api.publish.ivy.internal.publisher.ValidatingIvyPublisher"}, {"methodBody": ["METHOD_START", "{", "IvyPublicationIdentity   identity    =    publication . getProjectIdentity (  )  ;", ". IvyFieldValidator   organisation    =    field ( publication ,     \" organisation \"  ,    identity . getOrganisation (  )  )  . notEmpty (  )  . validInFileName (  )  ;", ". IvyFieldValidator   moduleName    =    field ( publication ,     \" module   name \"  ,    identity . getModule (  )  )  . notEmpty (  )  . validInFileName (  )  ;", ". IvyFieldValidator   revision    =    field ( publication ,     \" revision \"  ,    identity . getRevision (  )  )  . notEmpty (  )  . validInFileName (  )  ;", "MutableIvyModuleResolveMetadata   metadata    =    parseIvyFile ( publication )  ;", "ModuleVersionIdentifier   moduleId    =    metadata . getModuleVersionId (  )  ;", "matches ( moduleId . getGroup (  )  )  ;", "moduleName . matches ( moduleId . getName (  )  )  ;", "revision . matches ( moduleId . getVersion (  )  )  ;", "field ( publication ,     \" branch \"  ,    metadata . getBranch (  )  )  . optionalNotEmpty (  )  . doesNotContainSpecialCharacters ( true )  ;", "field ( publication ,     \" status \"  ,    metadata . getStatus (  )  )  . optionalNotEmpty (  )  . validInFileName (  )  ;", "}", "METHOD_END"], "methodName": ["validateMetadata"], "fileName": "org.gradle.api.publish.ivy.internal.publisher.ValidatingIvyPublisher"}, {"methodBody": ["METHOD_START", "{", "project . getPluginManager (  )  . apply ( PublishingPlugin . class )  ;", "project . getExtensions (  )  . configure ( PublishingExtension . class ,    new   Action < PublishingExtension >  (  )     {", "public   void   execute ( PublishingExtension   extension )     {", "extension . getPublications (  )  . registerFactory ( IvyPublication . class ,    new    . IvyPublicationFactory ( dependencyMetaDataProvider ,    instantiator ,    fileResolver )  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["apply"], "fileName": "org.gradle.api.publish.ivy.plugins.IvyPublishPlugin"}, {"methodBody": ["METHOD_START", "{", "IvyModuleDescriptorSpecInternal   descriptorInternal    =    GenerateIvyDescriptor . toIvyModuleDescriptorInternal ( getDescriptor (  )  )  ;", "IvyDescriptorFileGenerator   ivyGenerator    =    new   IvyDescriptorFileGenerator ( descriptorInternal . getProjectIdentity (  )  )  ;", "ivyGenerator . setStatus ( descriptorInternal . getStatus (  )  )  ;", "ivyGenerator . setBranch ( descriptorInternal . getBranch (  )  )  ;", "ivyGenerator . setExtraInfo ( descriptorInternal . getExtraInfo (  )  . asMap (  )  )  ;", "for    ( IvyConfiguration   ivyConfiguration    :    descriptorInternal . getConfigurations (  )  )     {", "ivyGenerator . addConfiguration ( ivyConfiguration )  ;", "}", "for    ( IvyArtifact   ivyArtifact    :    descriptorInternal . getArtifacts (  )  )     {", "ivyGenerator . addArtifact ( ivyArtifact )  ;", "}", "for    ( IvyDependencyInternal   ivyDependency    :    descriptorInternal . getDependencies (  )  )     {", "ivyGenerator . addDependency ( ivyDependency )  ;", "}", "ivyGenerator . withXml ( descriptorInternal . getXmlAction (  )  )  . writeTo ( getDestination (  )  )  ;", "}", "METHOD_END"], "methodName": ["doGenerate"], "fileName": "org.gradle.api.publish.ivy.tasks.GenerateIvyDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   descriptor ;", "}", "METHOD_END"], "methodName": ["getDescriptor"], "fileName": "org.gradle.api.publish.ivy.tasks.GenerateIvyDescriptor"}, {"methodBody": ["METHOD_START", "{", "return    ( destination )     =  =    null    ?    null    :    getFileResolver (  )  . resolve ( destination )  ;", "}", "METHOD_END"], "methodName": ["getDestination"], "fileName": "org.gradle.api.publish.ivy.tasks.GenerateIvyDescriptor"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getFileResolver"], "fileName": "org.gradle.api.publish.ivy.tasks.GenerateIvyDescriptor"}, {"methodBody": ["METHOD_START", "{", "this . descriptor    =    descriptor ;", "}", "METHOD_END"], "methodName": ["setDescriptor"], "fileName": "org.gradle.api.publish.ivy.tasks.GenerateIvyDescriptor"}, {"methodBody": ["METHOD_START", "{", "this . destination    =    destination ;", "}", "METHOD_END"], "methodName": ["setDestination"], "fileName": "org.gradle.api.publish.ivy.tasks.GenerateIvyDescriptor"}, {"methodBody": ["METHOD_START", "{", "this . destination    =    destination ;", "}", "METHOD_END"], "methodName": ["setDestination"], "fileName": "org.gradle.api.publish.ivy.tasks.GenerateIvyDescriptor"}, {"methodBody": ["METHOD_START", "{", "if    ( ivyModuleDescriptorSpec    =  =    null )     {", "return   null ;", "} else", "if    ( ivyModuleDescriptorSpec   instanceof   internal . publication . IvyModuleDescriptorSpecInternal )     {", "return    (  ( internal . publication . IvyModuleDescriptorSpecInternal )     ( ivyModuleDescriptorSpec )  )  ;", "} else    {", "throw   new   InvalidUserDataException ( String . format (  \" ivyModuleDescriptor   implementations   must   implement   the    '  % s '    interface ,    implementation    '  % s '    does   not \"  ,    internal . publication . IvyModuleDescriptorSpecInternal . class . getName (  )  ,    ivyModuleDescriptorSpec . getClass (  )  . getName (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["toIvyModuleDescriptorInternal"], "fileName": "org.gradle.api.publish.ivy.tasks.GenerateIvyDescriptor"}, {"methodBody": ["METHOD_START", "{", "new   PublishOperation ( publication ,    repository . getName (  )  )     {", "@ Override", "protected   void   publish (  )    throws   Exception    {", "IvyNormalizedPublication   normalizedPublication    =    publication . asNormalisedPublication (  )  ;", "IvyPublisher   publisher    =    getIvyPublisher (  )  ;", "publisher . publish ( normalizedPublication ,    Cast . cast ( PublicationAware . class ,    repository )  )  ;", "}", "}  . run (  )  ;", "}", "METHOD_END"], "methodName": ["doPublish"], "fileName": "org.gradle.api.publish.ivy.tasks.PublishToIvyRepository"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getIvyPublisher"], "fileName": "org.gradle.api.publish.ivy.tasks.PublishToIvyRepository"}, {"methodBody": ["METHOD_START", "{", "return   publication ;", "}", "METHOD_END"], "methodName": ["getPublication"], "fileName": "org.gradle.api.publish.ivy.tasks.PublishToIvyRepository"}, {"methodBody": ["METHOD_START", "{", "return   PublishToIvyRepository . toPublicationInternal ( getPublication (  )  )  ;", "}", "METHOD_END"], "methodName": ["getPublicationInternal"], "fileName": "org.gradle.api.publish.ivy.tasks.PublishToIvyRepository"}, {"methodBody": ["METHOD_START", "{", "return   repository ;", "}", "METHOD_END"], "methodName": ["getRepository"], "fileName": "org.gradle.api.publish.ivy.tasks.PublishToIvyRepository"}, {"methodBody": ["METHOD_START", "{", "IvyPublicationInternal   publicationInternal    =    getPublicationInternal (  )  ;", "if    ( publicationInternal    =  =    null )     {", "throw   new   InvalidUserDataException (  \" The    ' publication '    property   is   required \"  )  ;", "}", "IvyArtifact   repository    =    get (  )  ;", "if    ( repository    =  =    null )     {", "throw   new   InvalidUserDataException (  \" The    ' repository '    property   is   required \"  )  ;", "}", "doPublish ( publicationInternal ,    repository )  ;", "}", "METHOD_END"], "methodName": ["publish"], "fileName": "org.gradle.api.publish.ivy.tasks.PublishToIvyRepository"}, {"methodBody": ["METHOD_START", "{", "this . publication    =    PublishToIvyRepository . toPublicationInternal ( publication )  ;", "}", "METHOD_END"], "methodName": ["setPublication"], "fileName": "org.gradle.api.publish.ivy.tasks.PublishToIvyRepository"}, {"methodBody": ["METHOD_START", "{", "this . repository    =    repository ;", "}", "METHOD_END"], "methodName": ["setRepository"], "fileName": "org.gradle.api.publish.ivy.tasks.PublishToIvyRepository"}, {"methodBody": ["METHOD_START", "{", "if    ( publication    =  =    null )     {", "return   null ;", "} else", "if    ( publication   instanceof   internal . publication . IvyPublicationInternal )     {", "return    (  ( internal . publication . IvyPublicationInternal )     ( publication )  )  ;", "} else    {", "throw   new   InvalidUserDataException ( String . format (  \" publication   objects   must   implement   the    '  % s '    interface ,    implementation    '  % s '    does   not \"  ,    internal . publication . IvyPublicationInternal . class . getName (  )  ,    publication . getClass (  )  . getName (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["toPublicationInternal"], "fileName": "org.gradle.api.publish.ivy.tasks.PublishToIvyRepository"}]