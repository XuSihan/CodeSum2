[{"methodBody": ["METHOD_START", "{", "actions . add ( action )  ;", "}", "METHOD_END"], "methodName": ["addAction"], "fileName": "org.gradle.api.internal.PropertyListTransformer"}, {"methodBody": ["METHOD_START", "{", "actions . execute ( original )  ;", "return   original ;", "}", "METHOD_END"], "methodName": ["doTransform"], "fileName": "org.gradle.api.internal.PropertyListTransformer"}, {"methodBody": ["METHOD_START", "{", "try    {", "Parser . saveAsXML ( doTransform ( original )  ,    destination )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["transform"], "fileName": "org.gradle.api.internal.PropertyListTransformer"}, {"methodBody": ["METHOD_START", "{", "this . args . addAll ( Arrays . asList ( args )  )  ;", "ren   this ;", "}", "METHOD_END"], "methodName": ["addArguments"], "fileName": "org.gradle.ide.visualstudio.fixtures.MSBuildExecutor"}, {"methodBody": ["METHOD_START", "{", "try    {", "FileUtils . deleteDirecy ( getOutputsDir (  )  )  ;", "getOutputsDir (  )  . mkdir (  )  ;", "}    catch    ( IOException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["cleanupOutputDir"], "fileName": "org.gradle.ide.visualstudio.fixtures.MSBuildExecutor"}, {"methodBody": ["METHOD_START", "{", "return   fails ( MSBuildExecutor . MSBuildAction . BUILD )  ;", "}", "METHOD_END"], "methodName": ["fails"], "fileName": "org.gradle.ide.visualstudio.fixtures.MSBuildExecutor"}, {"methodBody": ["METHOD_START", "{", "cleanupOutputDir (  )  ;", "withArgument ( toTargetArgument ( action )  )  ;", "ExecOutput   result    =    findMSBuild (  )  . execWithFailure ( args ,    buildEnvironment ( workingDir )  )  ;", "List <  . ExecutionOutput >    outputs    =    getOutputFiles (  )  ;", "assert    ( outputs . size (  )  )     =  =     1  ;", "String   gradleStdout    =     . fileContents ( outputs . get (  0  )  . stdout )  ;", "String   gradleStderr    =     . fileContents ( outputs . get (  0  )  . stderr )  ;", "System . out . println ( result . getOut (  )  )  ;", "System . out . println ( gradleStdout )  ;", "System . out . println ( gradleStderr )  ;", "System . out . println ( result . getError (  )  )  ;", "return   OutputScrapingExecutionFailure . from ( trimLines ( gradleStdout )  ,    trimLines ( gradleStderr )  )  ;", "}", "METHOD_END"], "methodName": ["fails"], "fileName": "org.gradle.ide.visualstudio.fixtures.MSBuildExecutor"}, {"methodBody": ["METHOD_START", "{", "try    {", "ren   FileUtils . readFileToString ( file )  ;", "}    catch    ( IOException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["fileContents"], "fileName": "org.gradle.ide.visualstudio.fixtures.MSBuildExecutor"}, {"methodBody": ["METHOD_START", "{", "return   new   TestFile ( new   MSBuildVersionLocator ( VisualStudioLocatorTestFixture . getVswhereLocator (  )  )  . getMSBuildInstall ( toolChain )  )  ;", "}", "METHOD_END"], "methodName": ["findMSBuild"], "fileName": "org.gradle.ide.visualstudio.fixtures.MSBuildExecutor"}, {"methodBody": ["METHOD_START", "{", "List < MSBuildExecutor . ExecutionOutput >    outputFiles    =    Lists . newArrayList (  )  ;", "for    ( File   executionDir    :    getOutputsDir (  )  . listFiles (  )  )     {", "if    ( executionDir . isDirectory (  )  )     {", "outputFiles . add ( new   MSBuildExecutor . ExecutionOutput ( new   File ( executionDir ,     \" output . txt \"  )  ,    new   File ( executionDir ,     \" error . txt \"  )  )  )  ;", "}", "}", "return   outputFiles ;", "}", "METHOD_END"], "methodName": ["getOutputFiles"], "fileName": "org.gradle.ide.visualstudio.fixtures.MSBuildExecutor"}, {"methodBody": ["METHOD_START", "{", "return   workingDir . file (  \" output \"  )  ;", "}", "METHOD_END"], "methodName": ["getOutputsDir"], "fileName": "org.gradle.ide.visualstudio.fixtures.MSBuildExecutor"}, {"methodBody": ["METHOD_START", "{", "return   succeeds ( MSBuildExecutor . MSBuildAction . BUILD )  ;", "}", "METHOD_END"], "methodName": ["succeeds"], "fileName": "org.gradle.ide.visualstudio.fixtures.MSBuildExecutor"}, {"methodBody": ["METHOD_START", "{", "cleanupOutputDir (  )  ;", "List < ExecutionResult >    results    =    Lists . newArrayList (  )  ;", "withArgument ( toTargetArgument ( action )  )  ;", "ExecOutput   result    =    findMSBuild (  )  . execute ( args ,    buildEnvironment ( workingDir )  )  ;", "System . out . println ( result . getOut (  )  )  ;", "for    (  . ExecutionOutput   output    :    getOutputFiles (  )  )     {", "String   gradleStdout    =     . fileContents ( output . stdout )  ;", "String   gradleStderr    =     . fileContents ( output . stderr )  ;", "System . out . println ( gradleStdout )  ;", "System . out . println ( gradleStderr )  ;", "results . add ( OutputScrapingExecutionResult . from ( trimLines ( gradleStdout )  ,    trimLines ( gradleStderr )  )  )  ;", "}", "System . out . println ( result . getError (  )  )  ;", "return   results ;", "}", "METHOD_END"], "methodName": ["succeeds"], "fileName": "org.gradle.ide.visualstudio.fixtures.MSBuildExecutor"}, {"methodBody": ["METHOD_START", "{", "String   result    =     \"  \"  ;", "if    (  ( projectName )     !  =    null )     {", "result    =    projectName ;", "}", "if    (  !  (  (  ( projectName )     !  =    null )     &  &     ( action    =  =     (  . MSBuildAction . BUILD )  )  )  )     {", "if    (  ( projectName )     !  =    null )     {", "result    +  =     \"  :  \"  ;", "}", "result    +  =    action . toString (  )  ;", "}", "return    \"  / t :  \"     +    result ;", "}", "METHOD_END"], "methodName": ["toTargetArgument"], "fileName": "org.gradle.ide.visualstudio.fixtures.MSBuildExecutor"}, {"methodBody": ["METHOD_START", "{", "return   s . replaceAll (  \"  \\ r ?  \\ n \\  \\ s +  \"  ,     \"  \\ n \"  )  ;", "}", "METHOD_END"], "methodName": ["trimLines"], "fileName": "org.gradle.ide.visualstudio.fixtures.MSBuildExecutor"}, {"methodBody": ["METHOD_START", "{", "this . args . add ( arg )  ;", "ren   this ;", "}", "METHOD_END"], "methodName": ["withArgument"], "fileName": "org.gradle.ide.visualstudio.fixtures.MSBuildExecutor"}, {"methodBody": ["METHOD_START", "{", "return   addArguments (  (  \"  / p : Configuration =  \"     +    configurationName )  )  ;", "}", "METHOD_END"], "methodName": ["withConfiguration"], "fileName": "org.gradle.ide.visualstudio.fixtures.MSBuildExecutor"}, {"methodBody": ["METHOD_START", "{", "this . projectName    =    projectName ;", "ren   this ;", "}", "METHOD_END"], "methodName": ["withProject"], "fileName": "org.gradle.ide.visualstudio.fixtures.MSBuildExecutor"}, {"methodBody": ["METHOD_START", "{", "TestFile   solutionFile    =    new   TestFile ( visualStudioSolution . getFile (  )  )  ;", "solutionFile . assertIsFile (  )  ;", "return   addArguments ( solutionFile . getAbsolutePath (  )  )  ;", "}", "METHOD_END"], "methodName": ["withSolution"], "fileName": "org.gradle.ide.visualstudio.fixtures.MSBuildExecutor"}, {"methodBody": ["METHOD_START", "{", "this . workingDir    =    workingDir ;", "ren   this ;", "}", "METHOD_END"], "methodName": ["withWorkingDir"], "fileName": "org.gradle.ide.visualstudio.fixtures.MSBuildExecutor"}, {"methodBody": ["METHOD_START", "{", "VersionNumber   vsVersion ;", "if    ( toolChain   instanceof   AvailableToolChains . InstalledVisualCpp )     {", "AvailableToolChains . InstalledVisualCpp   visualCpp    =     (  ( AvailableToolChains . InstalledVisualCpp )     ( toolChain )  )  ;", "vsVersion    =    visualCpp . getVersion (  )  ;", "} else    {", "vsVersion    =    VersionNumber . version (  1  5  )  ;", "}", "File   vswhere    =    vswhereLocator . getVswhereInstall (  )  ;", "if    ( vswhere    =  =    null )     {", "throw   new   IllegalStateException (  \" vswhere   tool   is   required   to   be   installed \"  )  ;", "}", "ExecOutput   vsWhereOutput    =    new   TestFile ( vswhere )  . exec (  \"  - version \"  ,    String . format (  \"  [  % s .  0  ,  % s .  0  )  \"  ,    vsVersion . getMajor (  )  ,     (  ( vsVersion . getMajor (  )  )     +     1  )  )  ,     \"  - products \"  ,     \"  *  \"  ,     \"  - requires \"  ,     \" Microsoft . Component \"  ,     \"  - property \"  ,     \" installationPath \"  )  ;", "if    (  !  ( vsWhereOutput . getError (  )  . trim (  )  . isEmpty (  )  )  )     {", "throw   new   IllegalStateException ( String . format (  \" Could   not   determine   the   location   of    % s :     % s \"  ,    vsVersion . getMajor (  )  ,    vsWhereOutput . getError (  )  )  )  ;", "}", "String   location    =    vsWhereOutput . getOut (  )  . trim (  )  ;", "TestFile   msbuild ;", "if    (  !  ( location . isEmpty (  )  )  )     {", "msbuild    =    new   TestFile ( location )  . file (  (  (  /  \"     +     ( vsVersion . getMajor (  )  )  )     +     \"  .  0  / Bin . exe \"  )  )  ;", "} else", "if    (  ( vsVersion . getMajor (  )  )     =  =     1  1  )     {", "msbuild    =    new   TestFile (  \" C :  / Windows / Microsoft . Net / Framework / v 4  .  0  .  3  0  3  1  9  . exe \"  )  ;", "} else    {", "msbuild    =    new   TestFile (  (  (  \" C :  / program   files    ( x 8  6  )  /  \"     +     ( vsVersion . getMajor (  )  )  )     +     \"  .  0  / Bin . exe \"  )  )  ;", "}", "if    (  !  ( msbuild . exists (  )  )  )     {", "throw   new   IllegalStateException ( String . format (  \" This   test   requires    % s   to   be   installed .    Expected   it   to   be   installed   at    % s .  \"  ,    vsVersion . getMajor (  )  ,    msbuild )  )  ;", "}", "return   msbuild ;", "}", "METHOD_END"], "methodName": ["getMSBuildInstall"], "fileName": "org.gradle.ide.visualstudio.fixtures.MSBuildVersionLocator"}, {"methodBody": ["METHOD_START", "{", "if    (  \"  :  \"  . equals ( projectPath )  )     {", "return    \"  :  \"     +    taskName ;", "}", "return    (  ( projectPath )     +     \"  :  \"  )     +    taskName ;", "}", "METHOD_END"], "methodName": ["taskPath"], "fileName": "org.gradle.ide.visualstudio.internal.AbstractCppBinaryVisualStudioTargetBinary"}, {"methodBody": ["METHOD_START", "{", "configurations . put ( nativeBinary ,    configuration )  ;", "builtBy ( nativeBinary . getSourceFiles (  )  )  ;", "builtBy ( nativeBinary . getResourceFiles (  )  )  ;", "builtBy ( nativeBinary . getHeaderFiles (  )  )  ;", "}", "METHOD_END"], "methodName": ["addConfiguration"], "fileName": "org.gradle.ide.visualstudio.internal.DefaultVisualStudioProject"}, {"methodBody": ["METHOD_START", "{", "additionalFiles . add ( sourceFile )  ;", "}", "METHOD_END"], "methodName": ["addSourceFile"], "fileName": "org.gradle.ide.visualstudio.internal.DefaultVisualStudioProject"}, {"methodBody": ["METHOD_START", "{", "return   configurations . get ( nativeBinary )  ;", "}", "METHOD_END"], "methodName": ["getConfiguration"], "fileName": "org.gradle.ide.visualstudio.internal.DefaultVisualStudioProject"}, {"methodBody": ["METHOD_START", "{", "return   CollectionUtils . toList ( configurations . values (  )  )  ;", "}", "METHOD_END"], "methodName": ["getConfigurations"], "fileName": "org.gradle.ide.visualstudio.internal.DefaultVisualStudioProject"}, {"methodBody": ["METHOD_START", "{", "return   filtersFile . getXmlActions (  )  ;", "}", "METHOD_END"], "methodName": ["getFiltersFileActions"], "fileName": "org.gradle.ide.visualstudio.internal.DefaultVisualStudioProject"}, {"methodBody": ["METHOD_START", "{", "return   collect ( getHeaderFiles (  )  ,    new   Transformer < String ,    File >  (  )     {", "@ Override", "public   String   transform ( File   file )     {", "return   file . getAbsolutePath (  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["getHeaderFilePaths"], "fileName": "org.gradle.ide.visualstudio.internal.DefaultVisualStudioProject"}, {"methodBody": ["METHOD_START", "{", "Set < File >    allHeaders    =    new   LinkedHashSet < File >  (  )  ;", "for    ( TargetBinary   binary    :    configurations . keySet (  )  )     {", "allHeaders . addAll ( binary . getHeaderFiles (  )  . getFiles (  )  )  ;", "}", "return   allHeaders ;", "}", "METHOD_END"], "methodName": ["getHeaderFiles"], "fileName": "org.gradle.ide.visualstudio.internal.DefaultVisualStudioProject"}, {"methodBody": ["METHOD_START", "{", "return   projectFile . getXmlActions (  )  ;", "}", "METHOD_END"], "methodName": ["getProjectFileActions"], "fileName": "org.gradle.ide.visualstudio.internal.DefaultVisualStudioProject"}, {"methodBody": ["METHOD_START", "{", "return   collect ( getResourceFiles (  )  ,    new   Transformer < String ,    File >  (  )     {", "@ Override", "public   String   transform ( File   file )     {", "return   file . getAbsolutePath (  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["getResourceFilePaths"], "fileName": "org.gradle.ide.visualstudio.internal.DefaultVisualStudioProject"}, {"methodBody": ["METHOD_START", "{", "Set < File >    allResources    =    new   LinkedHashSet < File >  (  )  ;", "for    ( TargetBinary   binary    :    configurations . keySet (  )  )     {", "allResources . addAll ( binary . getResourceFiles (  )  . getFiles (  )  )  ;", "}", "return   allResources ;", "}", "METHOD_END"], "methodName": ["getResourceFiles"], "fileName": "org.gradle.ide.visualstudio.internal.DefaultVisualStudioProject"}, {"methodBody": ["METHOD_START", "{", "return   sdkVersion ;", "}", "METHOD_END"], "methodName": ["getSdkVersion"], "fileName": "org.gradle.ide.visualstudio.internal.DefaultVisualStudioProject"}, {"methodBody": ["METHOD_START", "{", "return   collect ( getSourceFiles (  )  ,    new   Transformer < String ,    File >  (  )     {", "@ Override", "public   String   transform ( File   file )     {", "return   file . getAbsolutePath (  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["getSourceFilePaths"], "fileName": "org.gradle.ide.visualstudio.internal.DefaultVisualStudioProject"}, {"methodBody": ["METHOD_START", "{", "Set < File >    allSources    =    new   LinkedHashSet < File >  (  )  ;", "for    ( TargetBinary   binary    :    configurations . keySet (  )  )     {", "allSources . addAll ( binary . getSourceFiles (  )  . getFiles (  )  )  ;", "}", "allSources . addAll ( additionalFiles )  ;", "return   allSources ;", "}", "METHOD_END"], "methodName": ["getSourceFiles"], "fileName": "org.gradle.ide.visualstudio.internal.DefaultVisualStudioProject"}, {"methodBody": ["METHOD_START", "{", "return    (  \"  {  \"     +     ( UUID . nameUUIDFromBytes ( projectFile . getAbsolutePath (  )  . getBytes (  )  )  . toString (  )  . toUpperCase (  )  )  )     +     \"  }  \"  ;", "}", "METHOD_END"], "methodName": ["getUUID"], "fileName": "org.gradle.ide.visualstudio.internal.DefaultVisualStudioProject"}, {"methodBody": ["METHOD_START", "{", "return   visualStudioVersion ;", "}", "METHOD_END"], "methodName": ["getVisualStudioVersion"], "fileName": "org.gradle.ide.visualstudio.internal.DefaultVisualStudioProject"}, {"methodBody": ["METHOD_START", "{", "Set < String >    configurations    =    new   LinkedHashSet < String >  (  )  ;", "for    ( ProjectMetadata   projectMetadata    :    getProjects (  )  )     {", "configurations . addAll ( projectMetadata . getConfigurations (  )  )  ;", "}", "return   configurations ;", "}", "METHOD_END"], "methodName": ["getConfigurationNames"], "fileName": "org.gradle.ide.visualstudio.internal.DefaultVisualStudioSolution"}, {"methodBody": ["METHOD_START", "{", "return   CollectionUtils . collect ( getProjects (  )  ,    new   Transformer < String ,    VisualStudioProjectMetadata >  (  )     {", "@ Override", "public   String   transform ( VisualStudioProjectMetadata   metadata )     {", "return   metadata . getFile (  )  . getAbsolutePath (  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["getProjectFilePaths"], "fileName": "org.gradle.ide.visualstudio.internal.DefaultVisualStudioSolution"}, {"methodBody": ["METHOD_START", "{", "return   solutionFile . getTextActions (  )  ;", "}", "METHOD_END"], "methodName": ["getSolutionFileActions"], "fileName": "org.gradle.ide.visualstudio.internal.DefaultVisualStudioSolution"}, {"methodBody": ["METHOD_START", "{", "return    (  ( PreprocessingTool )     ( binary . getToolByName ( tool )  )  )  ;", "}", "METHOD_END"], "methodName": ["findCompiler"], "fileName": "org.gradle.ide.visualstudio.internal.NativeSpecVisualStudioTargetBinary"}, {"methodBody": ["METHOD_START", "{", "PreprocessingTool   rcCompiler    =    findCompiler ( tool )  ;", "return   rcCompiler    =  =    null    ?    Lists .  < String > newArrayList (  )     :    new   MacroArgsConver (  )  . transform ( rcCompiler . getMacros (  )  )  ;", "}", "METHOD_END"], "methodName": ["getDefines"], "fileName": "org.gradle.ide.visualstudio.internal.NativeSpecVisualStudioTargetBinary"}, {"methodBody": ["METHOD_START", "{", "final   DomainObjectSet < InstallExecutable >    installTasks    =    binary . getTasks (  )  . withType ( InstallExecutable . class )  ;", "return   installTasks . isEmpty (  )     ?    null    :    installTasks . iterator (  )  . next (  )  ;", "}", "METHOD_END"], "methodName": ["getInstallTask"], "fileName": "org.gradle.ide.visualstudio.internal.NativeSpecVisualStudioTargetBinary"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   builder    =    new   StringBuilder (  )  ;", "for    ( String   component    :    components )     {", "if    (  ( component    !  =    null )     &  &     (  ( component . length (  )  )     >     0  )  )     {", "if    (  ( builder . length (  )  )     =  =     0  )     {", "builder . append ( component )  ;", "} else    {", "builder . append ( StringUtils . capitalize ( component )  )  ;", "}", "}", "}", "return   builder . toString (  )  ;", "}", "METHOD_END"], "methodName": ["makeName"], "fileName": "org.gradle.ide.visualstudio.internal.NativeSpecVisualStudioTargetBinary"}, {"methodBody": ["METHOD_START", "{", "if    (  \"  :  \"  . equals ( projectPath )  )     {", "return    \"  \"  ;", "}", "return    ( projectPath . substring (  1  )  . replace (  \"  :  \"  ,     \"  _  \"  )  )     +     \"  _  \"  ;", "}", "METHOD_END"], "methodName": ["projectPrefix"], "fileName": "org.gradle.ide.visualstudio.internal.NativeSpecVisualStudioTargetBinary"}, {"methodBody": ["METHOD_START", "{", "final   String   projectPath    =    binary . getComponent (  )  . getProjectPath (  )  ;", "if    (  \"  :  \"  . equals ( projectPath )  )     {", "return    \"  :  \"     +    taskName ;", "}", "return    ( projectPath    +     \"  :  \"  )     +    taskName ;", "}", "METHOD_END"], "methodName": ["taskPath"], "fileName": "org.gradle.ide.visualstudio.internal.NativeSpecVisualStudioTargetBinary"}, {"methodBody": ["METHOD_START", "{", "return   binary . getOutputFile (  )  . getAbsolutePath (  )  ;", "}", "METHOD_END"], "methodName": ["getBinaryOutputPath"], "fileName": "org.gradle.ide.visualstudio.internal.VisualStudioProjectConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   configurationName ;", "}", "METHOD_END"], "methodName": ["getConfigurationName"], "fileName": "org.gradle.ide.visualstudio.internal.VisualStudioProjectConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.ide.visualstudio.internal.VisualStudioProjectConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   platformName ;", "}", "METHOD_END"], "methodName": ["getPlatformName"], "fileName": "org.gradle.ide.visualstudio.internal.VisualStudioProjectConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   vsProject ;", "}", "METHOD_END"], "methodName": ["getProject"], "fileName": "org.gradle.ide.visualstudio.internal.VisualStudioProjectConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   binary ;", "}", "METHOD_END"], "methodName": ["getTargetBinary"], "fileName": "org.gradle.ide.visualstudio.internal.VisualStudioProjectConfiguration"}, {"methodBody": ["METHOD_START", "{", "return    \" Makefile \"  ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.gradle.ide.visualstudio.internal.VisualStudioProjectConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   CollectionUtils . collect ( project . getConfigurations (  )  ,    new   Transformer < String ,    VisualStudioProjectConfiguration >  (  )     {", "@ Override", "public   String   transform ( VisualStudioProjectConfiguration   configuration )     {", "return   configuration . getName (  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["getConfigurations"], "fileName": "org.gradle.ide.visualstudio.internal.VisualStudioProjectMetadata"}, {"methodBody": ["METHOD_START", "{", "return   project . getProjectFile (  )  . getLocation (  )  ;", "}", "METHOD_END"], "methodName": ["getFile"], "fileName": "org.gradle.ide.visualstudio.internal.VisualStudioProjectMetadata"}, {"methodBody": ["METHOD_START", "{", "return   project . getName (  )  ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.ide.visualstudio.internal.VisualStudioProjectMetadata"}, {"methodBody": ["METHOD_START", "{", "DefaultVisualStudioProject   project    =    getOrCreateProject ( nativeBinary . getVisualStudioProjectName (  )  ,    nativeBinary . getComponentName (  )  ,    nativeBinary . getVisualStudioVersion (  )  ,    nativeBinary . getSdkVersion (  )  )  ;", "VisualStudioProjectConfiguration   configuration    =    createVisualStudioProjectConfiguration ( project ,    nativeBinary ,    nativeBinary . getVisualStudioConfigurationName (  )  )  ;", "project . addConfiguration ( nativeBinary ,    configuration )  ;", "return   configuration ;", "}", "METHOD_END"], "methodName": ["addProjectConfiguration"], "fileName": "org.gradle.ide.visualstudio.internal.VisualStudioProjectRegistry"}, {"methodBody": ["METHOD_START", "{", "return   getInstantiator (  )  . newInstance ( VisualStudioProjectConfiguration . class ,    project ,    configuration ,    nativeBinary )  ;", "}", "METHOD_END"], "methodName": ["createVisualStudioProjectConfiguration"], "fileName": "org.gradle.ide.visualstudio.internal.VisualStudioProjectRegistry"}, {"methodBody": ["METHOD_START", "{", "DefaultVisualStudioProject   vsProject    =    findByName ( vsProjectName )  ;", "if    ( vsProject    =  =    null )     {", "vsProject    =    getInstantiator (  )  . newInstance ( DefaultVisualStudioProject . class ,    vsProjectName ,    componentName ,    visualStudioVersion ,    sdkVersion ,    fileResolver ,    getInstantiator (  )  )  ;", "add ( vsProject )  ;", "ideArtifactRegistry . registerIdeArtifact ( vsProject . getPublishArtifact (  )  )  ;", "}", "return   vsProject ;", "}", "METHOD_END"], "methodName": ["getOrCreateProject"], "fileName": "org.gradle.ide.visualstudio.internal.VisualStudioProjectRegistry"}, {"methodBody": ["METHOD_START", "{", "String   projectName    =    targetBinary . getVisualStudioProjectName (  )  ;", "return   getByName ( projectName )  . getConfiguration ( targetBinary )  ;", "}", "METHOD_END"], "methodName": ["getProjectConfiguration"], "fileName": "org.gradle.ide.visualstudio.internal.VisualStudioProjectRegistry"}, {"methodBody": ["METHOD_START", "{", "String   projectPath    =    nativeBinary . getProjectPath (  )  ;", "return   projectModel . resolveProjectModel ( projectPath )  ;", "}", "METHOD_END"], "methodName": ["getComponentModel"], "fileName": "org.gradle.ide.visualstudio.internal.VisualStudioProjectResolver"}, {"methodBody": ["METHOD_START", "{", "VisualStudioExtension   visualStudioExtension    =    getComponentModel ( nativeBinary )  . realize (  \" visualStudio \"  ,    VisualStudioExtension . class )  ;", "gistry   projectRegistry    =     (  ( VisualStudioExtensionInternal )     ( visualStudioExtension )  )  . getProjectRegistry (  )  ;", "return   projectRegistry . getProjectConfiguration ( nativeBinary )  ;", "}", "METHOD_END"], "methodName": ["lookupProjectConfiguration"], "fileName": "org.gradle.ide.visualstudio.internal.VisualStudioProjectResolver"}, {"methodBody": ["METHOD_START", "{", "vsProject . builtBy ( createProjectsFileTask ( vsProject )  ,    createFiltersFileTask ( vsProject )  )  ;", "Task   lifecycleTask    =    project . getTasks (  )  . maybeCreate (  (  ( vsProject . getComponentName (  )  )     +     \"  \"  )  )  ;", "lifecycleTask . dependsOn ( vsProject )  ;", "}", "METHOD_END"], "methodName": ["addTasksForVisualStudioProject"], "fileName": "org.gradle.ide.visualstudio.plugins.VisualStudioPlugin"}, {"methodBody": ["METHOD_START", "{", "project . getComponents (  )  . withType ( CppApplication . class )  . all ( new   Action < CppApplication >  (  )     {", "@ Override", "public   void   execute ( final   CppApplication   cppApplication )     {", "cppApplication . getBinaries (  )  . whenElementFinalized ( CppExecutable . class ,    new   Action < CppExecutable >  (  )     {", "@ Override", "public   void   execute ( CppExecutable   executable )     {", "extension . getProjectRegistry (  )  . addProjectConfiguration ( new   CppApplicationTargetBinary ( project . getName (  )  ,    project . getPath (  )  ,    cppApplication ,    executable )  )  ;", "}", "}  )  ;", "}", "}  )  ;", "project . getComponents (  )  . withType ( CppLibrary . class )  . all ( new   Action < CppLibrary >  (  )     {", "@ Override", "public   void   execute ( final   CppLibrary   cppLibrary )     {", "cppLibrary . getBinaries (  )  . whenElementFinalized ( CppSharedLibrary . class ,    new   Action < CppSharedLibrary >  (  )     {", "@ Override", "public   void   execute ( CppSharedLibrary   library )     {", "extension . getProjectRegistry (  )  . addProjectConfiguration ( new   CppSharedLibraryTargetBinary ( project . getName (  )  ,    project . getPath (  )  ,    cppLibrary ,    library )  )  ;", "}", "}  )  ;", "cppLibrary . getBinaries (  )  . whenElementFinalized ( CppStaticLibrary . class ,    new   Action < CppStaticLibrary >  (  )     {", "@ Override", "public   void   execute ( CppStaticLibrary   library )     {", "extension . getProjectRegistry (  )  . addProjectConfiguration ( new   CppStaticLibraryTargetBinary ( project . getName (  )  ,    project . getPath (  )  ,    cppLibrary ,    library )  )  ;", "}", "}  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["applyVisualStudioCurrentModelRules"], "fileName": "org.gradle.ide.visualstudio.plugins.VisualStudioPlugin"}, {"methodBody": ["METHOD_START", "{", "project . getPluginManager (  )  . apply ( VisualStudioPluginRules . VisualStudioExtensionRules . class )  ;", "if    ( isRoot (  )  )     {", "project . getPluginManager (  )  . apply ( VisualStudioPluginRuleRootRules . class )  ;", "}", "project . getPlugins (  )  . withType ( ComponentModelBasePlugin . class )  . all ( new   Action < ComponentModelBasePlugin >  (  )     {", "@ Override", "public   void   execute ( ComponentModelBasePlugin   componentModelBasePlugin )     {", "project . getPluginManager (  )  . apply ( VisualStudioPluginRuleProjectRules . class )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["applyVisualStudioSoftwareModelRules"], "fileName": "org.gradle.ide.visualstudio.plugins.VisualStudioPlugin"}, {"methodBody": ["METHOD_START", "{", "final   Delete   cleanTask    =     (  ( Delete )     ( getCleanTask (  )  )  )  ;", "project . getTasks (  )  . withType ( GenerateSolutionFileTask . class )  . all ( new   api . Action < GenerateSolutionFileTask >  (  )     {", "@ Override", "public   void   execute ( GenerateSolutionFileTask   task )     {", "cleanTask . delete ( task . getOutputs (  )  . getFiles (  )  )  ;", "}", "}  )  ;", "project . getTasks (  )  . withType ( GenerateFiltersFileTask . class )  . all ( new   api . Action < GenerateFiltersFileTask >  (  )     {", "@ Override", "public   void   execute ( GenerateFiltersFileTask   task )     {", "cleanTask . delete ( task . getOutputs (  )  . getFiles (  )  )  ;", "}", "}  )  ;", "project . getTasks (  )  . withType ( GenerateProjectFileTask . class )  . all ( new   api . Action < GenerateProjectFileTask >  (  )     {", "@ Override", "public   void   execute ( GenerateProjectFileTask   task )     {", "cleanTask . delete ( task . getOutputs (  )  . getFiles (  )  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureCleanTask"], "fileName": "org.gradle.ide.visualstudio.plugins.VisualStudioPlugin"}, {"methodBody": ["METHOD_START", "{", "GenerateFiltersFileTask   task    =    project . getTasks (  )  . create (  (  ( vsProject . getName (  )  )     +     \" VisualStudioFilters \"  )  ,    GenerateFiltersFileTask . class )  ;", "task . setroject ( vsProject )  ;", "return   task ;", "}", "METHOD_END"], "methodName": ["createFiltersFileTask"], "fileName": "org.gradle.ide.visualstudio.plugins.VisualStudioPlugin"}, {"methodBody": ["METHOD_START", "{", "GenerateProjectFileTask   task    =    project . getTasks (  )  . create (  (  ( vsProject . getName (  )  )     +     \" VisualStudioProject \"  )  ,    GenerateProjectFileTask . class )  ;", "task . setVisualStudioProject ( vsProject )  ;", "task . initGradleCommand (  )  ;", "return   task ;", "}", "METHOD_END"], "methodName": ["createProjectsFileTask"], "fileName": "org.gradle.ide.visualstudio.plugins.VisualStudioPlugin"}, {"methodBody": ["METHOD_START", "{", "GenerateSolutionFileTask   solutionFileTask    =    project . getTasks (  )  . create (  (  ( solution . getName (  )  )     +     \" VisualStudioSolution \"  )  ,    GenerateSolutionFileTask . class )  ;", "solutionFileTask . setVisualStudioSolution ( solution )  ;", "return   solutionFileTask ;", "}", "METHOD_END"], "methodName": ["createSolutionTask"], "fileName": "org.gradle.ide.visualstudio.plugins.VisualStudioPlugin"}, {"methodBody": ["METHOD_START", "{", "extension . getProjectRegistry (  )  . all ( new   Action < DefaultVisualStudioProject >  (  )     {", "@ Override", "public   void   execute ( DefaultVisualStudioProject   vsProject )     {", "addTasksForVisualStudioProject ( vsProject )  ;", "}", "}  )  ;", "if    ( isRoot (  )  )     {", "VisualStudioRootExtension   rootExtension    =     (  ( VisualStudioRootExtension )     ( extension )  )  ;", "VisualStudioSolutionInternal   vsSolution    =     (  ( VisualStudioSolutionInternal )     ( rootExtension . getSolution (  )  )  )  ;", "vsSolution . builtBy ( createSolutionTask ( vsSolution )  )  ;", "}", "configureCleanTask (  )  ;", "}", "METHOD_END"], "methodName": ["createTasksForVisualStudio"], "fileName": "org.gradle.ide.visualstudio.plugins.VisualStudioPlugin"}, {"methodBody": ["METHOD_START", "{", "extension . getProjectRegistry (  )  . all ( new   Action < DefaultVisualStudioProject >  (  )     {", "@ Override", "public   void   execute ( DefaultVisualStudioProject   vsProject )     {", "if    (  ( project . getBuildFile (  )  )     !  =    null )     {", "vsProject . addSourceFile ( project . getBuildFile (  )  )  ;", "}", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["includeBuildFileInProject"], "fileName": "org.gradle.ide.visualstudio.plugins.VisualStudioPlugin"}, {"methodBody": ["METHOD_START", "{", "return   visualStudioProject ;", "}", "METHOD_END"], "methodName": ["getVisualStudioProject"], "fileName": "org.gradle.ide.visualstudio.tasks.GenerateFiltersFileTask"}, {"methodBody": ["METHOD_START", "{", "this . visualStudioProject    =     (  ( DefaultVisualStudioProject )     ( vsProject )  )  ;", "}", "METHOD_END"], "methodName": ["setVisualStudioProject"], "fileName": "org.gradle.ide.visualstudio.tasks.GenerateFiltersFileTask"}, {"methodBody": ["METHOD_START", "{", "String   exe    =    getGradleExe (  )  ;", "String   args    =    getGradleArgs (  )  ;", "if    (  ( args    =  =    null )     |  |     (  ( args . trim (  )  . length (  )  )     =  =     0  )  )     {", "return   exe ;", "} else    {", "return    ( exe    +     \"     \"  )     +     ( args . trim (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["buildGradleCommand"], "fileName": "org.gradle.ide.visualstudio.tasks.GenerateProjectFileTask"}, {"methodBody": ["METHOD_START", "{", "return   gradleArgs ;", "}", "METHOD_END"], "methodName": ["getGradleArgs"], "fileName": "org.gradle.ide.visualstudio.tasks.GenerateProjectFileTask"}, {"methodBody": ["METHOD_START", "{", "return   gradleExe ;", "}", "METHOD_END"], "methodName": ["getGradleExe"], "fileName": "org.gradle.ide.visualstudio.tasks.GenerateProjectFileTask"}, {"methodBody": ["METHOD_START", "{", "return   RelativeFileNameTransformer . forFile ( getProject (  )  . getRootDir (  )  ,    visualStudioProject . getProjectFile (  )  . getLocation (  )  )  ;", "}", "METHOD_END"], "methodName": ["getTransformer"], "fileName": "org.gradle.ide.visualstudio.tasks.GenerateProjectFileTask"}, {"methodBody": ["METHOD_START", "{", "return   visualStudioProject ;", "}", "METHOD_END"], "methodName": ["getVisualStudioProject"], "fileName": "org.gradle.ide.visualstudio.tasks.GenerateProjectFileTask"}, {"methodBody": ["METHOD_START", "{", "final   File   gradlew    =    new   File ( IdePlugin . toGradleCommand ( getProject (  )  )  )  ;", "getConventionMapping (  )  . map (  \" gradleExe \"  ,    new   Callable < Object >  (  )     {", "@ Override", "public   Object   call (  )    throws   Exception    {", "final   String   rootDir    =    getTransformer (  )  . transform ( getProject (  )  . getRootDir (  )  )  ;", "String   args    =     \"  \"  ;", "if    (  !  ( rootDir . equals (  \"  .  \"  )  )  )     {", "args    =     (  \"     - p    \\  \"  \"     +    rootDir )     +     \"  \\  \"  \"  ;", "}", "if    ( gradlew . isFile (  )  )     {", "return    (  (  \"  \\  \"  \"     +     ( getTransformer (  )  . transform ( gradlew )  )  )     +     \"  \\  \"  \"  )     +    args ;", "}", "return    \"  \\  \" gradle \\  \"  \"     +    args ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["initGradleCommand"], "fileName": "org.gradle.ide.visualstudio.tasks.GenerateProjectFileTask"}, {"methodBody": ["METHOD_START", "{", "this . gradleArgs    =    gradleArgs ;", "}", "METHOD_END"], "methodName": ["setGradleArgs"], "fileName": "org.gradle.ide.visualstudio.tasks.GenerateProjectFileTask"}, {"methodBody": ["METHOD_START", "{", "this . gradleExe    =    gradleExe ;", "}", "METHOD_END"], "methodName": ["setGradleExe"], "fileName": "org.gradle.ide.visualstudio.tasks.GenerateProjectFileTask"}, {"methodBody": ["METHOD_START", "{", "this . visualStudioProject    =     (  ( DefaultVisualStudioProject )     ( vsProject )  )  ;", "}", "METHOD_END"], "methodName": ["setVisualStudioProject"], "fileName": "org.gradle.ide.visualstudio.tasks.GenerateProjectFileTask"}, {"methodBody": ["METHOD_START", "{", "return   solution ;", "}", "METHOD_END"], "methodName": ["getSolution"], "fileName": "org.gradle.ide.visualstudio.tasks.GenerateSolutionFileTask"}, {"methodBody": ["METHOD_START", "{", "this . solution    =     (  ( DefaultVisualStudioSolution )     ( solution )  )  ;", "}", "METHOD_END"], "methodName": ["setVisualStudioSolution"], "fileName": "org.gradle.ide.visualstudio.tasks.GenerateSolutionFileTask"}, {"methodBody": ["METHOD_START", "{", "List < String >    fromPath    =    splitPath ( from )  ;", "List < String >    toPath    =    splitPath ( to )  ;", "List < String >    rPath    =    new   ArrayList < String >  (  )  ;", "while    (  (  (  !  ( fromPath . isEmpty (  )  )  )     &  &     (  !  ( toPath . isEmpty (  )  )  )  )     &  &     ( fromPath . get (  0  )  . equals ( toPath . get (  0  )  )  )  )     {", "fromPath . remove (  0  )  ;", "toPath . remove (  0  )  ;", "}", "for    ( String   ignored    :    fromPath )     {", "rPath . add (  \"  .  .  \"  )  ;", "}", "for    ( String   entry    :    toPath )     {", "rPath . add ( entry )  ;", "}", "return   Joiner . on ( File . separatorChar )  . join ( rPath )  ;", "}", "METHOD_END"], "methodName": ["findRelativePath"], "fileName": "org.gradle.ide.visualstudio.tasks.internal.RelativeFileNameTransformer"}, {"methodBody": ["METHOD_START", "{", "if    (  (  !  ( from . contains ( root )  )  )     |  |     (  !  ( to . contains ( root )  )  )  )     {", "return   to ;", "}", "String   relativePath    =    findPath ( from ,    to )  ;", "return    ( relativePath . length (  )  )     =  =     0     ?     \"  .  \"     :    relativePath ;", "}", "METHOD_END"], "methodName": ["findRelativePathInRoot"], "fileName": "org.gradle.ide.visualstudio.tasks.internal.RelativeFileNameTransformer"}, {"methodBody": ["METHOD_START", "{", "return   new   RelativeFileNameTransformer ( rootDir ,    currentDirectory )  ;", "}", "METHOD_END"], "methodName": ["forDirectory"], "fileName": "org.gradle.ide.visualstudio.tasks.internal.RelativeFileNameTransformer"}, {"methodBody": ["METHOD_START", "{", "return   new   RelativeFileNameTransformer ( rootDir ,    relativeFile . getParentFile (  )  )  ;", "}", "METHOD_END"], "methodName": ["forFile"], "fileName": "org.gradle.ide.visualstudio.tasks.internal.RelativeFileNameTransformer"}, {"methodBody": ["METHOD_START", "{", "if    ( file . isFile (  )  )     {", "File   parentFile    =    file . getParentFile (  )  ;", "return   new    ( parentFile ,    parentFile )  ;", "}", "return   new    ( file ,    file )  ;", "}", "METHOD_END"], "methodName": ["from"], "fileName": "org.gradle.ide.visualstudio.tasks.internal.RelativeFileNameTransformer"}, {"methodBody": ["METHOD_START", "{", "File   pathFile    =    new   File ( path )  ;", "List < String >    split    =    new   LinkedList < String >  (  )  ;", "while    ( pathFile    !  =    null )     {", "split . add (  0  ,    pathFile . getName (  )  )  ;", "pathFile    =    pathFile . getParentFile (  )  ;", "}", "return   split ;", "}", "METHOD_END"], "methodName": ["splitPath"], "fileName": "org.gradle.ide.visualstudio.tasks.internal.RelativeFileNameTransformer"}, {"methodBody": ["METHOD_START", "{", "this . args . addAll ( Arrays . asList ( args )  )  ;", "ren   this ;", "}", "METHOD_END"], "methodName": ["addArguments"], "fileName": "org.gradle.ide.xcode.fixtures.XcodebuildExecutor"}, {"methodBody": ["METHOD_START", "{", "return   fails ( XcodebuildExecutor . XcodeAction . BUILD )  ;", "}", "METHOD_END"], "methodName": ["fails"], "fileName": "org.gradle.ide.xcode.fixtures.XcodebuildExecutor"}, {"methodBody": ["METHOD_START", "{", "withArgument ( action . toString (  )  )  ;", "ExecOutput   result    =    findXcodeBuild (  )  . execWithFailure ( args ,    nvironment ( testDirectory )  )  ;", "System . out . println ( result . getOut (  )  )  ;", "System . out . println ( result . getError (  )  )  ;", "return   OutputScrapingExecutionFailure . from ( result . getOut (  )  ,    result . getError (  )  )  ;", "}", "METHOD_END"], "methodName": ["fails"], "fileName": "org.gradle.ide.xcode.fixtures.XcodebuildExecutor"}, {"methodBody": ["METHOD_START", "{", "TestFile   xcodebuild    =    new   TestFile (  \"  / usr / bin / xcodebuild \"  )  ;", "assertTrue (  (  \" This   test   requires   xcode   to   be   installed   in    \"     +     ( xcodebuild . getAbsolutePath (  )  )  )  ,    xcodebuild . exists (  )  )  ;", "return   xcodebuild ;", "}", "METHOD_END"], "methodName": ["findXcodeBuild"], "fileName": "org.gradle.ide.xcode.fixtures.XcodebuildExecutor"}, {"methodBody": ["METHOD_START", "{", "return   succeeds ( XcodebuildExecutor . XcodeAction . BUILD )  ;", "}", "METHOD_END"], "methodName": ["succeeds"], "fileName": "org.gradle.ide.xcode.fixtures.XcodebuildExecutor"}, {"methodBody": ["METHOD_START", "{", "withArgument ( action . toString (  )  )  ;", "ExecOutput   result    =    findXcodeBuild (  )  . execute ( args ,    nvironment ( testDirectory )  )  ;", "System . out . println ( result . getOut (  )  )  ;", "return   OutputScrapingExecutionResult . from ( result . getOut (  )  ,    result . getError (  )  )  ;", "}", "METHOD_END"], "methodName": ["succeeds"], "fileName": "org.gradle.ide.xcode.fixtures.XcodebuildExecutor"}, {"methodBody": ["METHOD_START", "{", "this . args . add ( arg )  ;", "ren   this ;", "}", "METHOD_END"], "methodName": ["withArgument"], "fileName": "org.gradle.ide.xcode.fixtures.XcodebuildExecutor"}, {"methodBody": ["METHOD_START", "{", "return   addArguments (  \"  - configuration \"  ,    configurationName )  ;", "}", "METHOD_END"], "methodName": ["withConfiguration"], "fileName": "org.gradle.ide.xcode.fixtures.XcodebuildExecutor"}, {"methodBody": ["METHOD_START", "{", "TestFile   projectDir    =    new   TestFile ( xcodeProject . getDir (  )  )  ;", "projectDir . assertIsDir (  )  ;", "return   addArguments (  \"  - project \"  ,    projectDir . getAbsolutePath (  )  )  ;", "}", "METHOD_END"], "methodName": ["withProject"], "fileName": "org.gradle.ide.xcode.fixtures.XcodebuildExecutor"}, {"methodBody": ["METHOD_START", "{", "return   addArguments (  \"  - scheme \"  ,    schemeName )  ;", "}", "METHOD_END"], "methodName": ["withScheme"], "fileName": "org.gradle.ide.xcode.fixtures.XcodebuildExecutor"}, {"methodBody": ["METHOD_START", "{", "TestFile   workspaceDir    =    new   TestFile ( xcodeWorkspace . getDir (  )  )  ;", "workspaceDir . assertIsDir (  )  ;", "return   addArguments (  \"  - workspace \"  ,    workspaceDir . getAbsolutePath (  )  )  ;", "}", "METHOD_END"], "methodName": ["withWorkspace"], "fileName": "org.gradle.ide.xcode.fixtures.XcodebuildExecutor"}, {"methodBody": ["METHOD_START", "{", "targets . add ( target )  ;", "}", "METHOD_END"], "methodName": ["addTarget"], "fileName": "org.gradle.ide.xcode.internal.DefaultXcodeProject"}, {"methodBody": ["METHOD_START", "{", "return   groups ;", "}", "METHOD_END"], "methodName": ["getGroups"], "fileName": "org.gradle.ide.xcode.internal.DefaultXcodeProject"}, {"methodBody": ["METHOD_START", "{", "return   locationDir ;", "}", "METHOD_END"], "methodName": ["getLocationDir"], "fileName": "org.gradle.ide.xcode.internal.DefaultXcodeProject"}, {"methodBody": ["METHOD_START", "{", "return   targets ;", "}", "METHOD_END"], "methodName": ["getTargets"], "fileName": "org.gradle.ide.xcode.internal.DefaultXcodeProject"}, {"methodBody": ["METHOD_START", "{", "return   new   Callable < List < TaskDependency >  >  (  )     {", "@ Override", "public   List < TaskDependency >    call (  )    throws   Exception    {", "List < TaskDependency >    result    =    Lists . newArrayList (  )  ;", "for    ( XcodeTarget   Target    :    getTargets (  )  )     {", "result . addAll ( Target . getTaskDependencies (  )  )  ;", "}", "return   result ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["getTaskDependencies"], "fileName": "org.gradle.ide.xcode.internal.DefaultXcodeProject"}, {"methodBody": ["METHOD_START", "{", "this . locationDir    =    locationDir ;", "}", "METHOD_END"], "methodName": ["setLocationDir"], "fileName": "org.gradle.ide.xcode.internal.DefaultXcodeProject"}, {"methodBody": ["METHOD_START", "{", "return   getXcodeProperty (  \" ACTION \"  )  ;", "}", "METHOD_END"], "methodName": ["getAction"], "fileName": "org.gradle.ide.xcode.internal.XcodePropertyAdapter"}, {"methodBody": ["METHOD_START", "{", "return   Arrays . asList ( XcodePropertyAdapter . toGradleProperty (  \" ACTION \"  )  ,    XcodePropertyAdapter . toGradleProperty (  \" PRODUCT _ NAME \"  )  ,    XcodePropertyAdapter . toGradleProperty (  \" CONFIGURATION \"  )  ,    XcodePropertyAdapter . toGradleProperty (  \" BUILT _ PRODUCTS _ DIR \"  )  )  ;", "}", "METHOD_END"], "methodName": ["getAdapterCommandLine"], "fileName": "org.gradle.ide.xcode.internal.XcodePropertyAdapter"}, {"methodBody": ["METHOD_START", "{", "return   getXcodeProperty (  \" BUILT _ PRODUCTS _ DIR \"  )  ;", "}", "METHOD_END"], "methodName": ["getBuiltProductsDir"], "fileName": "org.gradle.ide.xcode.internal.XcodePropertyAdapter"}, {"methodBody": ["METHOD_START", "{", "return   getXcodeProperty (  \" CONFIGURATION \"  )  ;", "}", "METHOD_END"], "methodName": ["getConfiguration"], "fileName": "org.gradle.ide.xcode.internal.XcodePropertyAdapter"}, {"methodBody": ["METHOD_START", "{", "return   getXcodeProperty (  \" PRODUCT _ NAME \"  )  ;", "}", "METHOD_END"], "methodName": ["getProductName"], "fileName": "org.gradle.ide.xcode.internal.XcodePropertyAdapter"}, {"methodBody": ["METHOD_START", "{", "return   String . valueOf ( GUtil . elvis ( project . findProperty ( XcodePropertyAdapter . prefixName ( name )  )  ,     \"  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["getXcodeProperty"], "fileName": "org.gradle.ide.xcode.internal.XcodePropertyAdapter"}, {"methodBody": ["METHOD_START", "{", "return    \" \"     +    source ;", "}", "METHOD_END"], "methodName": ["prefixName"], "fileName": "org.gradle.ide.xcode.internal.XcodePropertyAdapter"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \"  - P \"     +     ( XcodePropertyAdapter . prefixName ( source )  )  )     +     \"  =  \\  \"  $  {  \"  )     +    source )     +     \"  }  \\  \"  \"  ;", "}", "METHOD_END"], "methodName": ["toGradleProperty"], "fileName": "org.gradle.ide.xcode.internal.XcodePropertyAdapter"}, {"methodBody": ["METHOD_START", "{", "taskDependencies . add ( taskDependency )  ;", "}", "METHOD_END"], "methodName": ["addTaskDependency"], "fileName": "org.gradle.ide.xcode.internal.XcodeTarget"}, {"methodBody": ["METHOD_START", "{", "return   compileModules ;", "}", "METHOD_END"], "methodName": ["getCompileModules"], "fileName": "org.gradle.ide.xcode.internal.XcodeTarget"}, {"methodBody": ["METHOD_START", "{", "return   debugOutputFile ;", "}", "METHOD_END"], "methodName": ["getDebugOutputFile"], "fileName": "org.gradle.ide.xcode.internal.XcodeTarget"}, {"methodBody": ["METHOD_START", "{", "return   gradleCommand ;", "}", "METHOD_END"], "methodName": ["getGradleCommand"], "fileName": "org.gradle.ide.xcode.internal.XcodeTarget"}, {"methodBody": ["METHOD_START", "{", "return   headerSearchPaths ;", "}", "METHOD_END"], "methodName": ["getHeaderSearchPaths"], "fileName": "org.gradle.ide.xcode.internal.XcodeTarget"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.gradle.ide.xcode.internal.XcodeTarget"}, {"methodBody": ["METHOD_START", "{", "return   outputFileType ;", "}", "METHOD_END"], "methodName": ["getOutputFileType"], "fileName": "org.gradle.ide.xcode.internal.XcodeTarget"}, {"methodBody": ["METHOD_START", "{", "return   productName ;", "}", "METHOD_END"], "methodName": ["getProductName"], "fileName": "org.gradle.ide.xcode.internal.XcodeTarget"}, {"methodBody": ["METHOD_START", "{", "return   productType ;", "}", "METHOD_END"], "methodName": ["getProductType"], "fileName": "org.gradle.ide.xcode.internal.XcodeTarget"}, {"methodBody": ["METHOD_START", "{", "return   releaseOutputFile ;", "}", "METHOD_END"], "methodName": ["getReleaseOutputFile"], "fileName": "org.gradle.ide.xcode.internal.XcodeTarget"}, {"methodBody": ["METHOD_START", "{", "return   sources ;", "}", "METHOD_END"], "methodName": ["getSources"], "fileName": "org.gradle.ide.xcode.internal.XcodeTarget"}, {"methodBody": ["METHOD_START", "{", "return   swiftSourceCompatibility ;", "}", "METHOD_END"], "methodName": ["getSwiftSourceCompatibility"], "fileName": "org.gradle.ide.xcode.internal.XcodeTarget"}, {"methodBody": ["METHOD_START", "{", "return   taskDependencies ;", "}", "METHOD_END"], "methodName": ["getTaskDependencies"], "fileName": "org.gradle.ide.xcode.internal.XcodeTarget"}, {"methodBody": ["METHOD_START", "{", "return   taskName ;", "}", "METHOD_END"], "methodName": ["getTaskName"], "fileName": "org.gradle.ide.xcode.internal.XcodeTarget"}, {"methodBody": ["METHOD_START", "{", "return   PBXTarget . ProductType . TOOL . equals ( getProductType (  )  )  ;", "}", "METHOD_END"], "methodName": ["isRunnable"], "fileName": "org.gradle.ide.xcode.internal.XcodeTarget"}, {"methodBody": ["METHOD_START", "{", "return   PBXTarget . ProductType . UNIT _ TEST . equals ( getProductType (  )  )  ;", "}", "METHOD_END"], "methodName": ["isUnitTest"], "fileName": "org.gradle.ide.xcode.internal.XcodeTarget"}, {"methodBody": ["METHOD_START", "{", "this . debugOutputFile    =    debugProductLocation ;", "this . productType    =    productType ;", "this . outputFileType    =     . toFileType ( productType )  ;", "}", "METHOD_END"], "methodName": ["setDebug"], "fileName": "org.gradle.ide.xcode.internal.XcodeTarget"}, {"methodBody": ["METHOD_START", "{", "this . gradleCommand    =    gradleCommand ;", "}", "METHOD_END"], "methodName": ["setGradleCommand"], "fileName": "org.gradle.ide.xcode.internal.XcodeTarget"}, {"methodBody": ["METHOD_START", "{", "this . outputFileType    =    outputFileType ;", "}", "METHOD_END"], "methodName": ["setOutputFileType"], "fileName": "org.gradle.ide.xcode.internal.XcodeTarget"}, {"methodBody": ["METHOD_START", "{", "this . productName    =    productName ;", "}", "METHOD_END"], "methodName": ["setProductName"], "fileName": "org.gradle.ide.xcode.internal.XcodeTarget"}, {"methodBody": ["METHOD_START", "{", "this . productType    =    productType ;", "}", "METHOD_END"], "methodName": ["setProductType"], "fileName": "org.gradle.ide.xcode.internal.XcodeTarget"}, {"methodBody": ["METHOD_START", "{", "this . releaseOutputFile    =    releaseProductLocation ;", "this . productType    =    productType ;", "this . outputFileType    =     . toFileType ( productType )  ;", "}", "METHOD_END"], "methodName": ["setRelease"], "fileName": "org.gradle.ide.xcode.internal.XcodeTarget"}, {"methodBody": ["METHOD_START", "{", "this . taskName    =    taskName ;", "}", "METHOD_END"], "methodName": ["setTaskName"], "fileName": "org.gradle.ide.xcode.internal.XcodeTarget"}, {"methodBody": ["METHOD_START", "{", "if    ( PBXTarget . ProductType . TOOL . equals ( productType )  )     {", "return   FileTypes . MACH _ O _ EXECUTABLE . identifier ;", "} else", "if    ( PBXTarget . ProductType . DYNAMIC _ LIBRARY . equals ( productType )  )     {", "return   FileTypes . MACH _ O _ DYNAMIC _ LIBRARY . identifier ;", "} else", "if    ( PBXTarget . ProductType . STATIC _ LIBRARY . equals ( productType )  )     {", "return   FileTypes . ARCHIVE _ LIBRARY . identifier ;", "} else    {", "return    \" compiled \"  ;", "}", "}", "METHOD_END"], "methodName": ["toFileType"], "fileName": "org.gradle.ide.xcode.internal.XcodeTarget"}, {"methodBody": ["METHOD_START", "{", "return    (  \"  \\  \"  \"     +    value )     +     \"  \\  \"  \"  ;", "}", "METHOD_END"], "methodName": ["quote"], "fileName": "org.gradle.ide.xcode.internal.XcodeUtils"}, {"methodBody": ["METHOD_START", "{", "return   XcodeUtils . toSpaceSeparatedList ( Arrays . asList ( files )  )  ;", "}", "METHOD_END"], "methodName": ["toSpaceSeparatedList"], "fileName": "org.gradle.ide.xcode.internal.XcodeUtils"}, {"methodBody": ["METHOD_START", "{", "return   StringUtils . join ( CollectionUtils . collect ( it ,    new   Transformer < String ,    File >  (  )     {", "@ Override", "public   String   transform ( File   file )     {", "return   XcodeUtils . quote ( file . getAbsolutePath (  )  )  ;", "}", "}  )  ,     '     '  )  ;", "}", "METHOD_END"], "methodName": ["toSpaceSeparatedList"], "fileName": "org.gradle.ide.xcode.internal.XcodeUtils"}, {"methodBody": ["METHOD_START", "{", "int   counter    =     0  ;", "String   gid ;", "do    {", "gid    =    String . format (  \"  %  0  8 X %  0  8 X %  0  8 X \"  ,    pbxClassName . hashCode (  )  ,    hash ,     ( counter +  +  )  )  ;", "}    while    ( gedAndReservedIds . contains ( gid )     )  ;", "gedAndReservedIds . add ( gid )  ;", "return   gid ;", "}", "METHOD_END"], "methodName": ["generateGid"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.GidGenerator"}, {"methodBody": ["METHOD_START", "{", "return   fileRef ;", "}", "METHOD_END"], "methodName": ["getFileRef"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXBuildFile"}, {"methodBody": ["METHOD_START", "{", "return   settings ;", "}", "METHOD_END"], "methodName": ["getSettings"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXBuildFile"}, {"methodBody": ["METHOD_START", "{", "settings    =    v ;", "}", "METHOD_END"], "methodName": ["setSettings"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXBuildFile"}, {"methodBody": ["METHOD_START", "{", "return   files ;", "}", "METHOD_END"], "methodName": ["getFiles"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXBuildPhase"}, {"methodBody": ["METHOD_START", "{", "return   buildSettings ;", "}", "METHOD_END"], "methodName": ["getBuildSettings"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXBuildStyle"}, {"methodBody": ["METHOD_START", "{", "this . buildSettings    =    buildSettings ;", "}", "METHOD_END"], "methodName": ["setBuildSettings"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXBuildStyle"}, {"methodBody": ["METHOD_START", "{", "return   explicitFileType ;", "}", "METHOD_END"], "methodName": ["getExplicitFileType"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXFileReference"}, {"methodBody": ["METHOD_START", "{", "this . explicitFileType    =    explicitFileType ;", "}", "METHOD_END"], "methodName": ["setExplicitFileType"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXFileReference"}, {"methodBody": ["METHOD_START", "{", "return   children ;", "}", "METHOD_END"], "methodName": ["getChildren"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXGroup"}, {"methodBody": ["METHOD_START", "{", "return   childGroupsByName . getUnchecked ( name )  ;", "}", "METHOD_END"], "methodName": ["getOrCreateChildGroupByName"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXGroup"}, {"methodBody": ["METHOD_START", "{", "return   sortPolicy ;", "}", "METHOD_END"], "methodName": ["getSortPolicy"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXGroup"}, {"methodBody": ["METHOD_START", "{", "this . sortPolicy    =    Preconditions . checkNotNull ( sortPolicy )  ;", "}", "METHOD_END"], "methodName": ["setSortPolicy"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXGroup"}, {"methodBody": ["METHOD_START", "{", "return   buildArgumentsString ;", "}", "METHOD_END"], "methodName": ["getBuildArgumentsString"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXLegacyTarget"}, {"methodBody": ["METHOD_START", "{", "return   buildToolPath ;", "}", "METHOD_END"], "methodName": ["getBuildToolPath"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXLegacyTarget"}, {"methodBody": ["METHOD_START", "{", "return   buildWorkingDirectory ;", "}", "METHOD_END"], "methodName": ["getBuildWorkingDirectory"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXLegacyTarget"}, {"methodBody": ["METHOD_START", "{", "return   passBuildSettingsInEnvironment ;", "}", "METHOD_END"], "methodName": ["isPassBuildSettingsInEnvironment"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXLegacyTarget"}, {"methodBody": ["METHOD_START", "{", "this . buildArgumentsString    =    buildArgumentsString ;", "}", "METHOD_END"], "methodName": ["setBuildArgumentsString"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXLegacyTarget"}, {"methodBody": ["METHOD_START", "{", "this . buildToolPath    =    buildToolPath ;", "}", "METHOD_END"], "methodName": ["setBuildToolPath"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXLegacyTarget"}, {"methodBody": ["METHOD_START", "{", "this . buildWorkingDirectory    =    buildWorkingDirectory ;", "}", "METHOD_END"], "methodName": ["setBuildWorkingDirectory"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXLegacyTarget"}, {"methodBody": ["METHOD_START", "{", "this . passBuildSettingsInEnvironment    =    passBuildSettingsInEnvironment ;", "}", "METHOD_END"], "methodName": ["setPassBuildSettingsInEnvironment"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXLegacyTarget"}, {"methodBody": ["METHOD_START", "{", "return   generator . generateGid ( isa (  )  ,    stableHash (  )  )  ;", "}", "METHOD_END"], "methodName": ["generateGid"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXObject"}, {"methodBody": ["METHOD_START", "{", "return   globalID ;", "}", "METHOD_END"], "methodName": ["getGlobalID"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXObject"}, {"methodBody": ["METHOD_START", "{", "globalID    =    gid ;", "}", "METHOD_END"], "methodName": ["setGlobalID"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXObject"}, {"methodBody": ["METHOD_START", "{", "return    0  ;", "}", "METHOD_END"], "methodName": ["stableHash"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXObject"}, {"methodBody": ["METHOD_START", "{", "return   buildConfigurationList ;", "}", "METHOD_END"], "methodName": ["getBuildConfigurationList"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXProject"}, {"methodBody": ["METHOD_START", "{", "return   compatibilityVersion ;", "}", "METHOD_END"], "methodName": ["getCompatibilityVersion"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXProject"}, {"methodBody": ["METHOD_START", "{", "return   mainGroup ;", "}", "METHOD_END"], "methodName": ["getMainGroup"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXProject"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXProject"}, {"methodBody": ["METHOD_START", "{", "return   targets ;", "}", "METHOD_END"], "methodName": ["getTargets"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXProject"}, {"methodBody": ["METHOD_START", "{", "return   path ;", "}", "METHOD_END"], "methodName": ["getPath"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXReference"}, {"methodBody": ["METHOD_START", "{", "return   sourceTree ;", "}", "METHOD_END"], "methodName": ["getSourceTree"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXReference"}, {"methodBody": ["METHOD_START", "{", "path    =    v ;", "}", "METHOD_END"], "methodName": ["setPath"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXReference"}, {"methodBody": ["METHOD_START", "{", "sourceTree    =    v ;", "}", "METHOD_END"], "methodName": ["setSourceTree"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXReference"}, {"methodBody": ["METHOD_START", "{", "return   inputPaths ;", "}", "METHOD_END"], "methodName": ["getInputPaths"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXShellScriptBuildPhase"}, {"methodBody": ["METHOD_START", "{", "return   outputPaths ;", "}", "METHOD_END"], "methodName": ["getOutputPaths"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXShellScriptBuildPhase"}, {"methodBody": ["METHOD_START", "{", "return   shellPath ;", "}", "METHOD_END"], "methodName": ["getShellPath"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXShellScriptBuildPhase"}, {"methodBody": ["METHOD_START", "{", "return   shellScript ;", "}", "METHOD_END"], "methodName": ["getShellScript"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXShellScriptBuildPhase"}, {"methodBody": ["METHOD_START", "{", "this . shellPath    =    shellPath ;", "}", "METHOD_END"], "methodName": ["setShellPath"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXShellScriptBuildPhase"}, {"methodBody": ["METHOD_START", "{", "this . shellScript    =    shellScript ;", "}", "METHOD_END"], "methodName": ["setShellScript"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXShellScriptBuildPhase"}, {"methodBody": ["METHOD_START", "{", "return   buildConfigurationList ;", "}", "METHOD_END"], "methodName": ["getBuildConfigurationList"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXTarget"}, {"methodBody": ["METHOD_START", "{", "return   buildPhases ;", "}", "METHOD_END"], "methodName": ["getBuildPhases"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXTarget"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXTarget"}, {"methodBody": ["METHOD_START", "{", "return   productName ;", "}", "METHOD_END"], "methodName": ["getProductName"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXTarget"}, {"methodBody": ["METHOD_START", "{", "return   productReference ;", "}", "METHOD_END"], "methodName": ["getProductReference"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXTarget"}, {"methodBody": ["METHOD_START", "{", "return   productType ;", "}", "METHOD_END"], "methodName": ["getProductType"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXTarget"}, {"methodBody": ["METHOD_START", "{", "this . productName    =    productName ;", "}", "METHOD_END"], "methodName": ["setProductName"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXTarget"}, {"methodBody": ["METHOD_START", "{", "productReference    =    v ;", "}", "METHOD_END"], "methodName": ["setProductReference"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.PBXTarget"}, {"methodBody": ["METHOD_START", "{", "return   buildConfigurationsByName ;", "}", "METHOD_END"], "methodName": ["getBuildConfigurationsByName"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.XCConfigurationList"}, {"methodBody": ["METHOD_START", "{", "currentObject . put ( name ,    val )  ;", "}", "METHOD_END"], "methodName": ["addField"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.XcodeprojSerializer"}, {"methodBody": ["METHOD_START", "{", "if    ( v    !  =    null )     {", "curreObject . put ( name ,    v )  ;", "}", "}", "METHOD_END"], "methodName": ["addField"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.XcodeprojSerializer"}, {"methodBody": ["METHOD_START", "{", "currentObject . put ( name ,    val )  ;", "}", "METHOD_END"], "methodName": ["addField"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.XcodeprojSerializer"}, {"methodBody": ["METHOD_START", "{", "if    ( val    !  =    null )     {", "currentObject . put ( name ,    val )  ;", "}", "}", "METHOD_END"], "methodName": ["addField"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.XcodeprojSerializer"}, {"methodBody": ["METHOD_START", "{", "NSArray   array    =    new   NSArray ( objectList . size (  )  )  ;", "for    ( int   i    =     0  ;    i    <     ( objectList . size (  )  )  ;    i +  +  )     {", "String   gid    =    sObject ( objectList . get ( i )  )  ;", "array . setValue ( i ,    new   NSString ( gid )  )  ;", "}", "currentObject . put ( name ,    array )  ;", "}", "METHOD_END"], "methodName": ["addField"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.XcodeprojSerializer"}, {"methodBody": ["METHOD_START", "{", "if    ( obj    !  =    null )     {", "String   gid    =    sObject ( obj )  ;", "currentObject . put ( name ,    gid )  ;", "}", "}", "METHOD_END"], "methodName": ["addField"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.XcodeprojSerializer"}, {"methodBody": ["METHOD_START", "{", "if    (  ( obj . getGlobalID (  )  )     =  =    null )     {", "obj . setGlobalID ( obj . generateGid ( gidGenerator )  )  ;", ". LOG . trace (  \" Set   new   object   GID :     % s \"  ,    obj )  ;", "} else    {", "NSObject   object    =    objects . get ( obj . getGlobalID (  )  )  ;", "if    ( object    !  =    null )     {", ". LOG . trace (  \" Object    % s   found ,    returning   existing   object    % s \"  ,    obj ,    object )  ;", "return   obj . getGlobalID (  )  ;", "} else    {", ". LOG . trace (  \" Object   already   had   GID   set :     % s \"  ,    obj )  ;", "}", "}", "NSDictionary   stack    =    currentObject ;", "currentObject    =    new   NSDictionary (  )  ;", "currentObject . put (  \" isa \"  ,    obj . isa (  )  )  ;", "obj . serializeInto ( this )  ;", "objects . put ( obj . getGlobalID (  )  ,    currentObject )  ;", "currentObject    =    stack ;", "return   obj . getGlobalID (  )  ;", "}", "METHOD_END"], "methodName": ["serializeObject"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.XcodeprojSerializer"}, {"methodBody": ["METHOD_START", "{", "serializeObject ( rootObject )  ;", "NSDictionary   root    =    new   NSDictionary (  )  ;", "root . put (  \" archiveVersion \"  ,     \"  1  \"  )  ;", "root . put (  \" classes \"  ,    new   NSDictionary (  )  )  ;", "root . put (  \" objectVersion \"  ,     \"  4  6  \"  )  ;", "root . put (  \" objects \"  ,    objects )  ;", "root . put (  \" rootObject \"  ,    rootObject . getGlobalID (  )  )  ;", "return   root ;", "}", "METHOD_END"], "methodName": ["toPlist"], "fileName": "org.gradle.ide.xcode.internal.xcodeproj.XcodeprojSerializer"}, {"methodBody": ["METHOD_START", "{", "project . getPlugins (  )  . withType ( CppApplicationPlugin . class ,    new   Action < CppApplicationPlugin >  (  )     {", "@ Override", "public   void   execute ( CppApplicationPlugin   plugin )     {", "configureXcodeForCpp ( project )  ;", "}", "}  )  ;", "project . getPlugins (  )  . withType ( CppLibraryPlugin . class ,    new   Action < CppLibraryPlugin >  (  )     {", "@ Override", "public   void   execute ( CppLibraryPlugin   plugin )     {", "configureXcodeForCpp ( project )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureForCppPlugin"], "fileName": "org.gradle.ide.xcode.plugins.XcodePlugin"}, {"methodBody": ["METHOD_START", "{", "project . getPlugins (  )  . withType ( SwiftApplicationPlugin . class ,    new   Action < SwiftApplicationPlugin >  (  )     {", "@ Override", "public   void   execute ( SwiftApplicationPlugin   plugin )     {", "configureXcodeForSwift ( project )  ;", "}", "}  )  ;", "project . getPlugins (  )  . withType ( SwiftLibraryPlugin . class ,    new   Action < SwiftLibraryPlugin >  (  )     {", "@ Override", "public   void   execute ( SwiftLibraryPlugin   plugin )     {", "configureXcodeForSwift ( project )  ;", "}", "}  )  ;", "project . getPlugins (  )  . withType ( XCTestConventionPlugin . class ,    new   Action < XCTestConventionPlugin >  (  )     {", "@ Override", "public   void   execute ( XCTestConventionPlugin   plugin )     {", "configureXcodeForXCTest ( project )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureForSwiftPlugin"], "fileName": "org.gradle.ide.xcode.plugins.XcodePlugin"}, {"methodBody": ["METHOD_START", "{", "getCleanTask (  )  . setDescription (  \" Cleans   XCode   project   files    ( xcodeproj )  \"  )  ;", "Delete   cleanTask    =    project . getTasks (  )  . create (  \" cleanroject \"  ,    Delete . class )  ;", "cleanTask . delete ( xcodeProject . getLocationDir (  )  )  ;", "if    ( isRoot (  )  )     {", "cleanTask . delete ( project . file (  (  ( project . getName (  )  )     +     \"  . xcworkspace \"  )  )  )  ;", "}", "getCleanTask (  )  . dependsOn ( cleanTask )  ;", "}", "METHOD_END"], "methodName": ["configureXcodeCleanTask"], "fileName": "org.gradle.ide.xcode.plugins.XcodePlugin"}, {"methodBody": ["METHOD_START", "{", "project . afterEvaluate ( new   Action < Project >  (  )     {", "@ Override", "public   void   execute ( final   Project   project )     {", "final   ProductionCppComponent   component    =    project . getComponents (  )  . withType ( ProductionCppComponent . class )  . getByName (  \" main \"  )  ;", "FileCollection   sources    =    component . getCppSource (  )  ;", "xcodeProject . getGroups (  )  . getSources (  )  . from ( sources )  ;", "FileCollection   headers    =    component . getHeaderFiles (  )  ;", "xcodeProject . getGroups (  )  . getHeaders (  )  . from ( headers )  ;", "final   String   targetName    =    StringUtils . capitalize ( component . getBaseName (  )  . get (  )  )  ;", "final   XcodeTarget   target    =    newTarget ( targetName ,    targetName ,    toGradleCommand ( project )  ,    getBridgeTaskPath ( project )  ,    sources )  ;", "component . getBinaries (  )  . whenElementFinalized ( new   Action < CppBinary >  (  )     {", "@ Override", "public   void   execute ( CppBinary   cppBinary )     {", "if    (  (  ( cppBinary   instanceof   CppExecutable )     &  &     ( cppBinary . isDebuggable (  )  )  )     &  &     (  !  ( cppBinary . isOptimized (  )  )  )  )     {", "target . setDebug (  (  ( CppExecutable )     ( cppBinary )  )  . getDebuggerExecutableFile (  )  ,    PBXTarget . ProductType . TOOL )  ;", "} else", "if    (  (  ( cppBinary   instanceof   CppExecutable )     &  &     ( cppBinary . isDebuggable (  )  )  )     &  &     ( cppBinary . isOptimized (  )  )  )     {", "target . setRelease (  (  ( CppExecutable )     ( cppBinary )  )  . getDebuggerExecutableFile (  )  ,    PBXTarget . ProductType . TOOL )  ;", "} else", "if    (  (  ( cppBinary   instanceof   CppSharedLibrary )     &  &     ( cppBinary . isDebuggable (  )  )  )     &  &     (  !  ( cppBinary . isOptimized (  )  )  )  )     {", "target . setDebug (  (  ( CppSharedLibrary )     ( cppBinary )  )  . getRuntimeFile (  )  ,    PBXTarget . ProductType . DYNAMIC _ LIBRARY )  ;", "} else", "if    (  (  ( cppBinary   instanceof   CppSharedLibrary )     &  &     ( cppBinary . isDebuggable (  )  )  )     &  &     ( cppBinary . isOptimized (  )  )  )     {", "target . setRelease (  (  ( CppSharedLibrary )     ( cppBinary )  )  . getRuntimeFile (  )  ,    PBXTarget . ProductType . DYNAMIC _ LIBRARY )  ;", "} else", "if    (  (  ( cppBinary   instanceof   CppStaticLibrary )     &  &     ( cppBinary . isDebuggable (  )  )  )     &  &     (  !  ( cppBinary . isOptimized (  )  )  )  )     {", "target . setDebug (  (  ( CppStaticLibrary )     ( cppBinary )  )  . getLinkFile (  )  ,    PBXTarget . ProductType . STATIC _ LIBRARY )  ;", "} else", "if    (  (  ( cppBinary   instanceof   CppStaticLibrary )     &  &     ( cppBinary . isDebuggable (  )  )  )     &  &     ( cppBinary . isOptimized (  )  )  )     {", "target . setRelease (  (  ( CppStaticLibrary )     ( cppBinary )  )  . getLinkFile (  )  ,    PBXTarget . ProductType . STATIC _ LIBRARY )  ;", "}", "if    ( cppBinary    =  =     ( component . getDevelopmentBinary (  )  . get (  )  )  )     {", "target . getHeaderSearchPaths (  )  . from ( component . getDevelopmentBinary (  )  . get (  )  . getCompileIncludePath (  )  )  ;", "target . getTaskDependencies (  )  . add ( filterArtifactsFromImplicitBuilds (  (  ( DefaultCppBinary )     ( component . getDevelopmentBinary (  )  . get (  )  )  )  . getIncludePathConfiguration (  )  )  . getBuildDependencies (  )  )  ;", "xcodeProject . addTarget ( target )  ;", "XcodePlugin . createSchemeTask ( project . getTasks (  )  ,    targetName ,    xcodeProject )  ;", "}", "}", "}  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureXcodeForCpp"], "fileName": "org.gradle.ide.xcode.plugins.XcodePlugin"}, {"methodBody": ["METHOD_START", "{", "project . afterEvaluate ( new   Action < Project >  (  )     {", "@ Override", "public   void   execute ( final   Project   project )     {", "final   ProductionSwiftComponent   component    =    project . getComponents (  )  . withType ( ProductionSwiftComponent . class )  . getByName (  \" main \"  )  ;", "FileCollection   sources    =    component . getSwiftSource (  )  ;", "xcodeProject . getGroups (  )  . getSources (  )  . from ( sources )  ;", "final   String   targetName    =    component . getModule (  )  . get (  )  ;", "final   XcodeTarget   target    =    newTarget ( targetName ,    component . getModule (  )  . get (  )  ,    toGradleCommand ( project )  ,    getBridgeTaskPath ( project )  ,    sources )  ;", "component . getBinaries (  )  . whenElementFinalized ( new   Action < SwiftBinary >  (  )     {", "@ Override", "public   void   execute ( SwiftBinary   swiftBinary )     {", "if    (  (  ( swiftBinary   instanceof   SwiftExecutable )     &  &     ( swiftBinary . isDebuggable (  )  )  )     &  &     (  !  ( swiftBinary . isOptimized (  )  )  )  )     {", "target . setDebug (  (  ( SwiftExecutable )     ( swiftBinary )  )  . getDebuggerExecutableFile (  )  ,    PBXTarget . ProductType . TOOL )  ;", "} else", "if    (  (  ( swiftBinary   instanceof   SwiftExecutable )     &  &     ( swiftBinary . isDebuggable (  )  )  )     &  &     ( swiftBinary . isOptimized (  )  )  )     {", "target . setRelease (  (  ( SwiftExecutable )     ( swiftBinary )  )  . getDebuggerExecutableFile (  )  ,    PBXTarget . ProductType . TOOL )  ;", "} else", "if    (  (  ( swiftBinary   instanceof   SwiftSharedLibrary )     &  &     ( swiftBinary . isDebuggable (  )  )  )     &  &     (  !  ( swiftBinary . isOptimized (  )  )  )  )     {", "target . setDebug (  (  ( SwiftSharedLibrary )     ( swiftBinary )  )  . getRuntimeFile (  )  ,    PBXTarget . ProductType . DYNAMIC _ LIBRARY )  ;", "} else", "if    (  (  ( swiftBinary   instanceof   SwiftSharedLibrary )     &  &     ( swiftBinary . isDebuggable (  )  )  )     &  &     ( swiftBinary . isOptimized (  )  )  )     {", "target . setRelease (  (  ( SwiftSharedLibrary )     ( swiftBinary )  )  . getRuntimeFile (  )  ,    PBXTarget . ProductType . DYNAMIC _ LIBRARY )  ;", "} else", "if    (  (  ( swiftBinary   instanceof   SwiftStaticLibrary )     &  &     ( swiftBinary . isDebuggable (  )  )  )     &  &     (  !  ( swiftBinary . isOptimized (  )  )  )  )     {", "target . setDebug (  (  ( SwiftStaticLibrary )     ( swiftBinary )  )  . getLinkFile (  )  ,    PBXTarget . ProductType . STATIC _ LIBRARY )  ;", "} else", "if    (  (  ( swiftBinary   instanceof   SwiftStaticLibrary )     &  &     ( swiftBinary . isDebuggable (  )  )  )     &  &     ( swiftBinary . isOptimized (  )  )  )     {", "target . setRelease (  (  ( SwiftStaticLibrary )     ( swiftBinary )  )  . getLinkFile (  )  ,    PBXTarget . ProductType . STATIC _ LIBRARY )  ;", "}", "target . getSwiftSourceCompatibility (  )  . set ( swiftBinary . getSourceCompatibility (  )  )  ;", "if    ( swiftBinary    =  =     ( component . getDevelopmentBinary (  )  . get (  )  )  )     {", "target . getCompileModules (  )  . from ( component . getDevelopmentBinary (  )  . get (  )  . getCompileModules (  )  )  ;", "target . addTaskDependency ( filterArtifactsFromImplicitBuilds (  (  ( DefaultSwiftBinary )     ( component . getDevelopmentBinary (  )  . get (  )  )  )  . getImportPathConfiguration (  )  )  . getBuildDependencies (  )  )  ;", "xcodeProject . addTarget ( target )  ;", "XcodePlugin . createSchemeTask ( project . getTasks (  )  ,    targetName ,    xcodeProject )  ;", "}", "}", "}  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureXcodeForSwift"], "fileName": "org.gradle.ide.xcode.plugins.XcodePlugin"}, {"methodBody": ["METHOD_START", "{", "project . afterEvaluate ( new   Action < Project >  (  )     {", "@ Override", "public   void   execute ( Project   project )     {", "SwiftXCTestSuite   component    =    project . getExtensions (  )  . getByType ( SwiftXCTestSuite . class )  ;", "FileCollection   sources    =    component . getSwiftSource (  )  ;", "xcodeProject . getGroups (  )  . getTests (  )  . from ( sources )  ;", "String   targetName    =    component . getModule (  )  . get (  )  ;", "final   XcodeTarget   target    =    newTarget ( targetName ,    component . getModule (  )  . get (  )  ,    toGradleCommand ( project )  ,    getBridgeTaskPath ( project )  ,    sources )  ;", "target . setDebug ( component . getTestBinary (  )  . get (  )  . getInstallDirectory (  )  ,    PBXTarget . ProductType . UNIT _ TEST )  ;", "target . setRelease ( component . getTestBinary (  )  . get (  )  . getInstallDirectory (  )  ,    PBXTarget . ProductType . UNIT _ TEST )  ;", "target . getCompileModules (  )  . from ( component . getTestBinary (  )  . get (  )  . getCompileModules (  )  )  ;", "target . addTaskDependency ( filterArtifactsFromImplicitBuilds (  (  ( DefaultSwiftBinary )     ( component . getTestBinary (  )  . get (  )  )  )  . getImportPathConfiguration (  )  )  . getBuildDependencies (  )  )  ;", "component . getBinaries (  )  . whenElementFinalized ( new   Action < SwiftBinary >  (  )     {", "@ Override", "public   void   execute ( SwiftBinary   swiftBinary )     {", "target . getSwiftSourceCompatibility (  )  . set ( swiftBinary . getSourceCompatibility (  )  )  ;", "}", "}  )  ;", "xcodeProject . addTarget ( target )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureXcodeForXCTest"], "fileName": "org.gradle.ide.xcode.plugins.XcodePlugin"}, {"methodBody": ["METHOD_START", "{", "File   xcodeProjectPackageDir    =    xcodeProject . getLocationDir (  )  ;", "GenerateWorkspaceSettingsFileTask   workspaceSettingsFileTask    =    project . getTasks (  )  . create (  \" xcodeProjectWorkspaceSettings \"  ,    GenerateWorkspaceSettingsFileTask . class )  ;", "workspaceSettingsFileTask . setOutputFile ( new   File ( xcodeProjectPackageDir ,     \" project . xcworkspace / xcshareddata / WorkspaceSettings . xcsettings \"  )  )  ;", "GeneraterojectFileTask   projectFileTask    =    project . getTasks (  )  . create (  \" xcodeProject \"  ,    GeneraterojectFileTask . class )  ;", "projectFileTask . dependsOn ( workspaceSettingsFileTask )  ;", "projectFileTask . dependsOn ( xcodeProject . getTaskDependencies (  )  )  ;", "projectFileTask . dependsOn ( project . getTasks (  )  . withType ( GenerateSchemeFileTask . class )  )  ;", "projectFileTask . setroject ( xcodeProject )  ;", "projectFileTask . setOutputFile ( new   File ( xcodeProjectPackageDir ,     \" project . pbxproj \"  )  )  ;", "artifactRegistry . registerIdeArtifact ( new   rojectMetadata ( xcodeProject ,    projectFileTask )  )  ;", "return   projectFileTask ;", "}", "METHOD_END"], "methodName": ["createProjectTask"], "fileName": "org.gradle.ide.xcode.plugins.XcodePlugin"}, {"methodBody": ["METHOD_START", "{", "String   name    =     \" xcodeScheme \"  ;", "GenerateSchemeFileTask   schemeFileTask    =    tasks . maybeCreate ( name ,    GenerateSchemeFileTask . class )  ;", "schemeFileTask . setroject ( xcodeProject )  ;", "schemeFileTask . setOutputFile ( new   File ( xcodeProject . getLocationDir (  )  ,     (  (  \" xcshareddata / xcschemes /  \"     +    schemeName )     +     \"  . xcscheme \"  )  )  )  ;", "return   schemeFileTask ;", "}", "METHOD_END"], "methodName": ["createSchemeTask"], "fileName": "org.gradle.ide.xcode.plugins.XcodePlugin"}, {"methodBody": ["METHOD_START", "{", "File   xcodeWorkspacePackageDir    =    project . file (  (  ( project . getName (  )  )     +     \"  . xcworkspace \"  )  )  ;", "workspace . getLocation (  )  . set ( xcodeWorkspacePackageDir )  ;", "GenerateWorkspaceSettingsFileTask   workspaceSettingsFileTask    =    project . getTasks (  )  . create (  \" xcodeWorkspaceWorkspaceSettings \"  ,    GenerateWorkspaceSettingsFileTask . class )  ;", "workspaceSettingsFileTask . setOutputFile ( new   File ( xcodeWorkspacePackageDir ,     \" xcshareddata / WorkspaceSettings . xcsettings \"  )  )  ;", "GenerateXcodeWorkspaceFileTask   workspaceFileTask    =    project . getTasks (  )  . create (  \" xcodeWorkspace \"  ,    GenerateXcodeWorkspaceFileTask . class )  ;", "workspaceFileTask . dependsOn ( workspaceSettingsFileTask )  ;", "workspaceFileTask . setOutputFile ( new   File ( xcodeWorkspacePackageDir ,     \" contents . xcworkspacedata \"  )  )  ;", "workspaceFileTask . setrojectLocations ( artifactRegistry . getIdeArtifacts ( rojectMetadata . class )  )  ;", "return   workspaceFileTask ;", "}", "METHOD_END"], "methodName": ["createWorkspaceTask"], "fileName": "org.gradle.ide.xcode.plugins.XcodePlugin"}, {"methodBody": ["METHOD_START", "{", "return   configuration . getIncoming (  )  . artifactView ( fromSourceDependency (  )  )  . getArtifacts (  )  . getArtifactFiles (  )  ;", "}", "METHOD_END"], "methodName": ["filterArtifactsFromImplicitBuilds"], "fileName": "org.gradle.ide.xcode.plugins.XcodePlugin"}, {"methodBody": ["METHOD_START", "{", "return   new   Action < ArtifactView . ViewConfiguration >  (  )     {", "@ Override", "public   void   execute ( ArtifactView . ViewConfiguration   viewConfiguration )     {", "viewConfiguration . componentFilter ( isSourceDependency (  )  )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["fromSourceDependency"], "fileName": "org.gradle.ide.xcode.plugins.XcodePlugin"}, {"methodBody": ["METHOD_START", "{", "String   projectPath    =     \"  \"  ;", "if    (  !  ( isRoot (  )  )  )     {", "projectPath    =    project . getPath (  )  ;", "}", "return   projectPath    +     \"  :  _  _  _  $  { ACTION }  _  $  { PRODUCT _ NAME }  _  $  { CONFIGURATION }  \"  ;", "}", "METHOD_END"], "methodName": ["getBridgeTaskPath"], "fileName": "org.gradle.ide.xcode.plugins.XcodePlugin"}, {"methodBody": ["METHOD_START", "{", "if    ( project . getBuildFile (  )  . exists (  )  )     {", "Project . getGroups (  )  . getRoot (  )  . from ( project . getBuildFile (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["includeBuildFilesInProject"], "fileName": "org.gradle.ide.xcode.plugins.XcodePlugin"}, {"methodBody": ["METHOD_START", "{", "return   new   Spec < ComponentIdentifier >  (  )     {", "@ Override", "public   boolean   isSatisfiedBy ( ComponentIdentifier   id )     {", "if    ( id   instanceof   ProjectComponentIdentifier )     {", "ProjectComponentIdentifier   identifier    =     (  ( ProjectComponentIdentifier )     ( id )  )  ;", "for    ( Path   path    :    projectPathRegistry . getAllImplicitProjectPaths (  )  )     {", "if    ( identifier . equals ( projectPathRegistry . getProjectComponentIdentifier ( path )  )  )     {", "return   true ;", "}", "}", "}", "return   false ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["isSourceDependency"], "fileName": "org.gradle.ide.xcode.plugins.XcodePlugin"}, {"methodBody": ["METHOD_START", "{", "String   id    =    gidGenerator . generateGid (  \" PBXLegacyTarget \"  ,    name . hashCode (  )  )  ;", "XcodeTarget   target    =    objectFactory . newInstance ( XcodeTarget . class ,    name ,    id )  ;", "target . setTaskName ( taskName )  ;", "target . setGradleCommand ( Command )  ;", "target . setProductName ( productName )  ;", "target . getSources (  )  . setFrom ( sources )  ;", "return   target ;", "}", "METHOD_END"], "methodName": ["newTarget"], "fileName": "org.gradle.ide.xcode.plugins.XcodePlugin"}, {"methodBody": ["METHOD_START", "{", "action . setBuildConfiguration ( DefaultXcodeProject . BUILD _ DEBUG )  ;", "}", "METHOD_END"], "methodName": ["configureAnalyzeAction"], "fileName": "org.gradle.ide.xcode.tasks.GenerateSchemeFileTask"}, {"methodBody": ["METHOD_START", "{", "action . setBuildConfiguration ( DefaultXcodeProject . BUILD _ DEBUG )  ;", "}", "METHOD_END"], "methodName": ["configureArchiveAction"], "fileName": "org.gradle.ide.xcode.tasks.GenerateSchemeFileTask"}, {"methodBody": ["METHOD_START", "{", "for    ( final   XcodeTarget   xcodeTarget    :    xcodeProject . getTargets (  )  )     {", "action . entry ( new   api . Action < XcodeSchemeFile . BuildActionEntry >  (  )     {", "@ Override", "public   void   execute ( XcodeSchemeFile . BuildActionEntry   buildActionEntry )     {", "buildActionEntry . setBuildForAnalysing (  (  !  ( xcodeTarget . isUnitTest (  )  )  )  )  ;", "buildActionEntry . setBuildForArchiving (  (  !  ( xcodeTarget . isUnitTest (  )  )  )  )  ;", "buildActionEntry . setBuildForProfiling (  (  !  ( xcodeTarget . isUnitTest (  )  )  )  )  ;", "buildActionEntry . setBuildForRunning (  (  !  ( xcodeTarget . isUnitTest (  )  )  )  )  ;", "buildActionEntry . setBuildForTesting ( xcodeTarget . isUnitTest (  )  )  ;", "buildActionEntry . setBuildableReference ( toBuildableReference ( xcodeTarget )  )  ;", "}", "}  )  ;", "}", "}", "METHOD_END"], "methodName": ["configureBuildAction"], "fileName": "org.gradle.ide.xcode.tasks.GenerateSchemeFileTask"}, {"methodBody": ["METHOD_START", "{", "action . setBuildConfiguration ( DefaultXcodeProject . BUILD _ DEBUG )  ;", "for    ( XcodeTarget   xcodeTarget    :    xcodeProject . getTargets (  )  )     {", "Xcod . BuildableReference   buildableReference    =    toBuildableReference ( xcodeTarget )  ;", "if    ( xcodeTarget . isRunnable (  )  )     {", "action . setBuildableProductRunnable ( buildableReference )  ;", "}", "action . setBuildableReference ( buildableReference )  ;", "break ;", "}", "}", "METHOD_END"], "methodName": ["configureLaunchAction"], "fileName": "org.gradle.ide.xcode.tasks.GenerateSchemeFileTask"}, {"methodBody": ["METHOD_START", "{", "action . setBuildConfiguration ( DefaultXcodeProject . BUILD _ DEBUG )  ;", "}", "METHOD_END"], "methodName": ["configureProfileAction"], "fileName": "org.gradle.ide.xcode.tasks.GenerateSchemeFileTask"}, {"methodBody": ["METHOD_START", "{", "action . setBuildConfiguration ( DefaultXcodeProject . BUILD _ DEBUG )  ;", "for    ( final   XcodeTarget   xcodeTarget    :    xcodeProject . getTargets (  )  )     {", "if    ( xcodeTarget . isUnitTest (  )  )     {", "action . setBuildConfiguration ( DefaultXcodeProject . TEST _ DEBUG )  ;", "action . entry ( new   api . Action < XcodeSchemeFile . TestableEntry >  (  )     {", "@ Override", "public   void   execute ( XcodeSchemeFile . TestableEntry   testableEntry )     {", "testableEntry . setSkipped ( false )  ;", "XcodeSchemeFile . BuildableReference   buildableReference    =    toBuildableReference ( xcodeTarget )  ;", "testableEntry . setBuildableReference ( buildableReference )  ;", "}", "}  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["configureTestAction"], "fileName": "org.gradle.ide.xcode.tasks.GenerateSchemeFileTask"}, {"methodBody": ["METHOD_START", "{", "return   xcodeProject ;", "}", "METHOD_END"], "methodName": ["getXcodeProject"], "fileName": "org.gradle.ide.xcode.tasks.GenerateSchemeFileTask"}, {"methodBody": ["METHOD_START", "{", "this . xcodeProject    =     (  ( DefaultXcodeProject )     ( xcodeProject )  )  ;", "}", "METHOD_END"], "methodName": ["setXcodeProject"], "fileName": "org.gradle.ide.xcode.tasks.GenerateSchemeFileTask"}, {"methodBody": ["METHOD_START", "{", "XcodeSchemeFile . BuildableReference   buildableReference    =    new   XcodeSchemeFile . BuildableReference (  )  ;", "buildableReference . setBuildableIdentifier (  \" primary \"  )  ;", "buildableReference . setBlueprintIdentifier ( target . getId (  )  )  ;", "buildableReference . setBuildableName ( target . getProductName (  )  )  ;", "buildableReference . setBlueprintName ( target . getName (  )  )  ;", "buildableReference . setContainerRelativePath (  (  ( getProject (  )  . getName (  )  )     +     \"  . xcodeproj \"  )  )  ;", "return   buildableReference ;", "}", "METHOD_END"], "methodName": ["toBuildableReference"], "fileName": "org.gradle.ide.xcode.tasks.GenerateSchemeFileTask"}, {"methodBody": ["METHOD_START", "{", "for    ( File   source    :    sources . getAsFileTree (  )  )     {", "PBXFileReference   fileReference    =    toFileReference ( source )  ;", "pathToFileReference . put ( source . getAbsolutePath (  )  ,    fileReference )  ;", "group . getChildren (  )  . add ( fileReference )  ;", "}", "}", "METHOD_END"], "methodName": ["addToGroup"], "fileName": "org.gradle.ide.xcode.tasks.GenerateXcodeProjectFileTask"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( sources . isEmpty (  )  )  )     {", "addToGroup ( mainGroup . getOrCreChildGroupByName ( groupName )  ,    sources )  ;", "}", "}", "METHOD_END"], "methodName": ["addToGroup"], "fileName": "org.gradle.ide.xcode.tasks.GenerateXcodeProjectFileTask"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Joiner . on (  '     '  )  . join ( XcodePropertyAdapter . getAdapterCommandLine (  )  )  )     +     \"     \"  )     +     ( xcodeTarget . getTaskName (  )  )  ;", "}", "METHOD_END"], "methodName": ["buildGradleArgs"], "fileName": "org.gradle.ide.xcode.tasks.GenerateXcodeProjectFileTask"}, {"methodBody": ["METHOD_START", "{", "return   xcodeProject ;", "}", "METHOD_END"], "methodName": ["getXcodeProject"], "fileName": "org.gradle.ide.xcode.tasks.GenerateXcodeProjectFileTask"}, {"methodBody": ["METHOD_START", "{", "List < File >    parents    =    new   ArrayList < File >  (  )  ;", "for    ( File   file    :    files )     {", "if    ( file . isDirectory (  )  )     {", "parents . add ( file )  ;", "} else    {", "parents . add ( file . getParen (  )  )  ;", "}", "}", "return   parents ;", "}", "METHOD_END"], "methodName": ["parentDirs"], "fileName": "org.gradle.ide.xcode.tasks.GenerateXcodeProjectFileTask"}, {"methodBody": ["METHOD_START", "{", "this . xcodeProject    =     (  ( DefaultXcodeProject )     ( xcodeProject )  )  ;", "}", "METHOD_END"], "methodName": ["setXcodeProject"], "fileName": "org.gradle.ide.xcode.tasks.GenerateXcodeProjectFileTask"}, {"methodBody": ["METHOD_START", "{", "return   new   PBXFileReference ( file . getName (  )  ,    file . getAbsolutePath (  )  ,    PBXReference . SourceTree . ABSOLUTE )  ;", "}", "METHOD_END"], "methodName": ["toFileReference"], "fileName": "org.gradle.ide.xcode.tasks.GenerateXcodeProjectFileTask"}, {"methodBody": ["METHOD_START", "{", "if    ( xcodeTarget . isUnitTest (  )  )     {", "return   toXCTestPbxTarget ( xcodeTarget )  ;", "}", "return   toToolAndLibraryPbxTarget ( xcodeTarget )  ;", "}", "METHOD_END"], "methodName": ["toGradlePbxTarget"], "fileName": "org.gradle.ide.xcode.tasks.GenerateXcodeProjectFileTask"}, {"methodBody": ["METHOD_START", "{", "PBXSourcesBuildPhase   buildPhase    =    new   PBXSourcesBuildPhase (  )  ;", "for    ( File   file    :    xcodeTarget . getSources (  )  )     {", "PBXFileReference   fileReference    =    pathToFileReference . get ( file . getAbsolutePath (  )  )  ;", "buildPhase . getFiles (  )  . add ( new   PBXBuildFile ( fileReference )  )  ;", "}", "PBXNativeTarget   target    =    new   PBXNativeTarget (  (  \"  [ INDEXING   ONLY ]     \"     +     ( xcodeTarget . getName (  )  )  )  ,    xcodeTarget . getProductType (  )  )  ;", "target . setProductName ( xcodeTarget . getProductName (  )  )  ;", "NSDictionary   buildSettings    =    new   NSDictionary (  )  ;", "buildSettings . put (  \" SWIFT _ VERSION \"  ,     . toXcodeSwiftVersion ( xcodeTarget . getSwiftSourceCompatibility (  )  )  )  ;", "buildSettings . put (  \" PRODUCT _ NAME \"  ,    xcodeTarget . getProductName (  )  )  ;", "if    (  !  ( xcodeTarget . getHeaderSearchPaths (  )  . isEmpty (  )  )  )     {", "buildSettings . put (  \" HEADER _ SEARCH _ PATHS \"  ,    XcodeUtils . toSpaceSeparatedList ( xcodeTarget . getHeaderSearchPaths (  )  )  )  ;", "}", "if    (  !  ( xcodeTarget . getCompileModules (  )  . isEmpty (  )  )  )     {", "buildSettings . put (  \" SWIFT _ INCLUDE _ PATHS \"  ,    XcodeUtils . toSpaceSeparatedList (  . parentDirs ( xcodeTarget . getCompileModules (  )  )  )  )  ;", "}", "target . getBuildConfigurationList (  )  . getBuildConfigurationsByName (  )  . getUnchecked ( DefaultXcodeProject . BUILD _ DEBUG )  . setBuildSettings ( buildSettings )  ;", "target . getBuildPhases (  )  . add ( buildPhase )  ;", "return   target ;", "}", "METHOD_END"], "methodName": ["toIndexPbxTarget"], "fileName": "org.gradle.ide.xcode.tasks.GenerateXcodeProjectFileTask"}, {"methodBody": ["METHOD_START", "{", "PBXLegacyTarget   target    =    new   PBXLegacyTarget ( xcodeTarget . getName (  )  ,    xcodeTarget . getProductType (  )  )  ;", "target . setProductName ( xcodeTarget . getProductName (  )  )  ;", "NSDictionary   debugSettings    =    target . getBuildConfigurationList (  )  . getBuildConfigurationsByName (  )  . getUnchecked ( DefaultXcodeProject . BUILD _ DEBUG )  . getBuildSettings (  )  ;", "NSDictionary   releaseSettings    =    target . getBuildConfigurationList (  )  . getBuildConfigurationsByName (  )  . getUnchecked ( DefaultXcodeProject . BUILD _ RELEASE )  . getBuildSettings (  )  ;", "target . setBuildToolPath ( xcodeTarget . getGradleCommand (  )  )  ;", "target . setBuildArgumentsString ( buildGradleArgs ( xcodeTarget )  )  ;", "target . setGlobalID ( xcodeTarget . getId (  )  )  ;", "File   outputFile    =    xcodeTarget . getDebugOutputFile (  )  . get (  )  . getAsFile (  )  ;", "target . setProductReference ( new   PBXFileReference ( outputFile . getName (  )  ,    outputFile . getAbsolutePath (  )  ,    PBXReference . SourceTree . ABSOLUTE )  )  ;", "File   debugOutputFile    =    xcodeTarget . getDebugOutputFile (  )  . get (  )  . getAsFile (  )  ;", "debugSettings . put (  \" CONFIGURATION _ BUILD _ DIR \"  ,    new   NSString ( debugOutputFile . getParentFile (  )  . getAbsolutePath (  )  )  )  ;", "debugSettings . put (  \" PRODUCT _ NAME \"  ,    target . getProductName (  )  )  ;", "debugSettings . put (  \" SWIFT _ VERSION \"  ,     . toXcodeSwiftVersion ( xcodeTarget . getSwiftSourceCompatibility (  )  )  )  ;", "File   releaseOutputFile    =    xcodeTarget . getReleaseOutputFile (  )  . get (  )  . getAsFile (  )  ;", "releaseSettings . put (  \" CONFIGURATION _ BUILD _ DIR \"  ,    new   NSString ( releaseOutputFile . getParentFile (  )  . getAbsolutePath (  )  )  )  ;", "releaseSettings . put (  \" PRODUCT _ NAME \"  ,    target . getProductName (  )  )  ;", "releaseSettings . put (  \" SWIFT _ VERSION \"  ,     . toXcodeSwiftVersion ( xcodeTarget . getSwiftSourceCompatibility (  )  )  )  ;", "return   target ;", "}", "METHOD_END"], "methodName": ["toToolAndLibraryPbxTarget"], "fileName": "org.gradle.ide.xcode.tasks.GenerateXcodeProjectFileTask"}, {"methodBody": ["METHOD_START", "{", "PBXShellScriptBuildPhase   hackBuildPhase    =    new   PBXShellScriptBuildPhase (  )  ;", "hackBuildPhase . setShellPath (  \"  / bin / sh \"  )  ;", "hackBuildPhase . setShellScript (  (  \"  #    Script   to   generate   specific   Swift   files   Xcode   expects   when   running   tests .  \\ n \"     +     (  (  (  (  (  (  (  (  (  \" set    - eu \\ n \"     +     \" ARCH _ ARRAY =  (  $ ARCHS )  \\ n \"  )     +     \" SUFFIXES =  ( swiftdoc   swiftmodule   h )  \\ n \"  )     +     \" for   ARCH   in    \\  \"  $  { ARCH _ ARRAY [  @  ]  }  \\  \"  \\ n \"  )     +     \" do \\ n \"  )     +     \"       for   SUFFIX   in    \\  \"  $  { SUFFIXES [  @  ]  }  \\  \"  \\ n \"  )     +     \"       do \\ n \"  )     +     \"             touch    \\  \"  $ OBJECT _ FILE _ DIR _ normal /  $ ARCH /  $ PRODUCT _ NAME .  $ SUFFIX \\  \"  \\ n \"  )     +     \"       done \\ n \"  )     +     \" done \"  )  )  )  ;", "PBXSourcesBuildPhase   sourcesBuildPhase    =    new   PBXSourcesBuildPhase (  )  ;", "for    ( File   file    :    xcodeTarget . getSources (  )  )     {", "PBXFileReference   fileReference    =    pathToFileReference . get ( file . getAbsolutePath (  )  )  ;", "sourcesBuildPhase . getFiles (  )  . add ( new   PBXBuildFile ( fileReference )  )  ;", "}", "PBXShellScriptBuildPhase   gradleBuildPhase    =    new   PBXShellScriptBuildPhase (  )  ;", "gradleBuildPhase . setShellPath (  \"  / bin / sh \"  )  ;", "gradleBuildPhase . setShellScript (  (  (  (  (  \" exec    \\  \"  \"     +     ( xcodeTarget . getGradleCommand (  )  )  )     +     \"  \\  \"     \"  )     +     ( buildGradleArgs ( xcodeTarget )  )  )     +     \"     <     / dev / null \"  )  )  ;", "PBXNativeTarget   target    =    new   PBXNativeTarget ( xcodeTarget . getName (  )  ,    xcodeTarget . getProductType (  )  )  ;", "target . setProductName ( xcodeTarget . getProductName (  )  )  ;", "target . setGlobalID ( xcodeTarget . getId (  )  )  ;", "target . getBuildPhases (  )  . add ( hackBuildPhase )  ;", "target . getBuildPhases (  )  . add ( sourcesBuildPhase )  ;", "target . getBuildPhases (  )  . add ( gradleBuildPhase )  ;", "File   outputFile    =    xcodeTarget . getDebugOutputFile (  )  . get (  )  . getAsFile (  )  ;", "target . setProductReference ( new   PBXFileReference ( outputFile . getName (  )  ,    outputFile . getAbsolutePath (  )  ,    PBXReference . SourceTree . ABSOLUTE )  )  ;", "NSDictionary   debugSettings    =    target . getBuildConfigurationList (  )  . getBuildConfigurationsByName (  )  . getUnchecked ( DefaultXcodeProject . BUILD _ DEBUG )  . getBuildSettings (  )  ;", "NSDictionary   releaseSettings    =    target . getBuildConfigurationList (  )  . getBuildConfigurationsByName (  )  . getUnchecked ( DefaultXcodeProject . BUILD _ RELEASE )  . getBuildSettings (  )  ;", "NSDictionary   testRunnerSettings    =    target . getBuildConfigurationList (  )  . getBuildConfigurationsByName (  )  . getUnchecked ( DefaultXcodeProject . TEST _ DEBUG )  . getBuildSettings (  )  ;", "if    (  !  ( xcodeTarget . getCompileModules (  )  . isEmpty (  )  )  )     {", "debugSettings . put (  \" SWIFT _ INCLUDE _ PATHS \"  ,    XcodeUtils . toSpaceSeparatedList (  . parentDirs ( xcodeTarget . getCompileModules (  )  )  )  )  ;", "releaseSettings . put (  \" SWIFT _ INCLUDE _ PATHS \"  ,    XcodeUtils . toSpaceSeparatedList (  . parentDirs ( xcodeTarget . getCompileModules (  )  )  )  )  ;", "testRunnerSettings . put (  \" SWIFT _ INCLUDE _ PATHS \"  ,    XcodeUtils . toSpaceSeparatedList (  . parentDirs ( xcodeTarget . getCompileModules (  )  )  )  )  ;", "}", "testRunnerSettings . put (  \" SWIFT _ VERSION \"  ,     . toXcodeSwiftVersion ( xcodeTarget . getSwiftSourceCompatibility (  )  )  )  ;", "testRunnerSettings . put (  \" PRODUCT _ NAME \"  ,    target . getProductName (  )  )  ;", "testRunnerSettings . put (  \" OTHER _ LDFLAGS \"  ,     \"  - help \"  )  ;", "testRunnerSettings . put (  \" OTHER _ CFLAGS \"  ,     \"  - help \"  )  ;", "testRunnerSettings . put (  \" OTHER _ SWIFT _ FLAGS \"  ,     \"  - help \"  )  ;", "testRunnerSettings . put (  \" SWIFT _ INSTALL _ OBJC _ HEADER \"  ,     \" NO \"  )  ;", "testRunnerSettings . put (  \" SWIFT _ OBJC _ INTERFACE _ HEADER _ NAME \"  ,     \"  $  ( PRODUCT _ NAME )  . h \"  )  ;", "debugSettings . put (  \" PRODUCT _ NAME \"  ,    target . getProductName (  )  )  ;", "debugSettings . put (  \" SWIFT _ VERSION \"  ,     . toXcodeSwiftVersion ( xcodeTarget . getSwiftSourceCompatibility (  )  )  )  ;", "releaseSettings . put (  \" PRODUCT _ NAME \"  ,    target . getProductName (  )  )  ;", "releaseSettings . put (  \" SWIFT _ VERSION \"  ,     . toXcodeSwiftVersion ( xcodeTarget . getSwiftSourceCompatibility (  )  )  )  ;", "return   target ;", "}", "METHOD_END"], "methodName": ["toXCTestPbxTarget"], "fileName": "org.gradle.ide.xcode.tasks.GenerateXcodeProjectFileTask"}, {"methodBody": ["METHOD_START", "{", "if    ( swiftVersion . isPresent (  )  )     {", "return   String . format (  \"  % d .  0  \"  ,    swiftVersion . get (  )  . getVersion (  )  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["toXcodeSwiftVersion"], "fileName": "org.gradle.ide.xcode.tasks.GenerateXcodeProjectFileTask"}, {"methodBody": ["METHOD_START", "{", "return   xcodeProjectLocations ;", "}", "METHOD_END"], "methodName": ["getXcodeProjectLocations"], "fileName": "org.gradle.ide.xcode.tasks.GenerateXcodeWorkspaceFileTask"}, {"methodBody": ["METHOD_START", "{", "this . xcodeProjectLocations    =    xcodeProjectLocations ;", "}", "METHOD_END"], "methodName": ["setXcodeProjectLocations"], "fileName": "org.gradle.ide.xcode.tasks.GenerateXcodeWorkspaceFileTask"}, {"methodBody": ["METHOD_START", "{", "return   new   XcodeSchemeFile . AnalyzeAction ( XcodeSchemeFile . getOrAppendNode ( getXml (  )  ,     \" AnalyzeAction \"  )  )  ;", "}", "METHOD_END"], "methodName": ["getAnalyzeAction"], "fileName": "org.gradle.ide.xcode.tasks.internal.XcodeSchemeFile"}, {"methodBody": ["METHOD_START", "{", "return   new   XcodeSchemeFile . ArchiveAction ( XcodeSchemeFile . getOrAppendNode ( getXml (  )  ,     \" ArchiveAction \"  )  )  ;", "}", "METHOD_END"], "methodName": ["getArchiveAction"], "fileName": "org.gradle.ide.xcode.tasks.internal.XcodeSchemeFile"}, {"methodBody": ["METHOD_START", "{", "return   new   XcodeSchemeFile . BuildAction ( XcodeSchemeFile . getOrAppendNode ( getXml (  )  ,     \" BuildAction \"  )  )  ;", "}", "METHOD_END"], "methodName": ["getBuildAction"], "fileName": "org.gradle.ide.xcode.tasks.internal.XcodeSchemeFile"}, {"methodBody": ["METHOD_START", "{", "return   new   XcodeSchemeFile . LaunchAction ( XcodeSchemeFile . getOrAppendNode ( getXml (  )  ,     \" LaunchAction \"  )  )  ;", "}", "METHOD_END"], "methodName": ["getLaunchAction"], "fileName": "org.gradle.ide.xcode.tasks.internal.XcodeSchemeFile"}, {"methodBody": ["METHOD_START", "{", "NodeList   nodes    =     (  ( NodeList )     ( xml . get ( name )  )  )  ;", "if    ( nodes . isEmpty (  )  )     {", "return   xml . appendNode ( name )  ;", "}", "return    (  ( Node )     ( nodes . get (  0  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getOrAppendNode"], "fileName": "org.gradle.ide.xcode.tasks.internal.XcodeSchemeFile"}, {"methodBody": ["METHOD_START", "{", "return   new   XcodeSchemeFile . ProfileAction ( XcodeSchemeFile . getOrAppendNode ( getXml (  )  ,     \" ProfileAction \"  )  )  ;", "}", "METHOD_END"], "methodName": ["getProfileAction"], "fileName": "org.gradle.ide.xcode.tasks.internal.XcodeSchemeFile"}, {"methodBody": ["METHOD_START", "{", "return   new   XcodeSchemeFile . TestAction ( XcodeSchemeFile . getOrAppendNode ( getXml (  )  ,     \" TestAction \"  )  )  ;", "}", "METHOD_END"], "methodName": ["getTestAction"], "fileName": "org.gradle.ide.xcode.tasks.internal.XcodeSchemeFile"}, {"methodBody": ["METHOD_START", "{", "if    ( value )     {", "return    . YES ;", "}", "return    . NO ;", "}", "METHOD_END"], "methodName": ["toYesNo"], "fileName": "org.gradle.ide.xcode.tasks.internal.XcodeSchemeFile"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    attributes    =    new   HashMap < String ,    Object >  (  )  ;", "attributes . put (  \" location \"  ,     (  \" absolute :  \"     +    location )  )  ;", "getXml (  )  . appendNode (  \" Ref \"  ,    attributes )  ;", "}", "METHOD_END"], "methodName": ["addLocation"], "fileName": "org.gradle.ide.xcode.tasks.internal.XcodeWorkspaceFile"}, {"methodBody": ["METHOD_START", "{", "return   propertyListTransformer ;", "}", "METHOD_END"], "methodName": ["getPropertyListTransformer"], "fileName": "org.gradle.plugins.ide.api.PropertyListGeneratorTask"}, {"methodBody": ["METHOD_START", "{", "transformAction ( configureUsing ( action )  )  ;", "}", "METHOD_END"], "methodName": ["transformAction"], "fileName": "org.gradle.plugins.ide.internal.generator.PropertyListPersistableConfigurationObject"}, {"methodBody": ["METHOD_START", "{", "transformer . addAction ( action )  ;", "}", "METHOD_END"], "methodName": ["transformAction"], "fileName": "org.gradle.plugins.ide.internal.generator.PropertyListPersistableConfigurationObject"}]