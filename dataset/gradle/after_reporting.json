[{"methodBody": ["METHOD_START", "{", "project . getExtensions (  )  . create ( ReportingExtension . NAME ,    ReportingExtension . class ,    project )  ;", "}", "METHOD_END"], "methodName": ["apply"], "fileName": "org.gradle.api.plugins.ReportingBasePlugin"}, {"methodBody": ["METHOD_START", "{", "aggregated . addAll ( Arrays . asList ( reportings )  )  ;", "}", "METHOD_END"], "methodName": ["aggregate"], "fileName": "org.gradle.api.reporting.GenerateBuildDashboard"}, {"methodBody": ["METHOD_START", "{", "Set < NamedDomainObjectSet <  ?    extends   Report >  >    enabledReportSets    =    CollectionUtils . collect ( aggregated ,    new   Transformer < NamedDomainObjectSet <  ?    extends   Report >  ,    Reporting <  ?    extends   ReportContainer <  ?  >  >  >  (  )     {", "public   NamedDomainObjectSet <  ?    extends   Report >    transform ( Reporting <  ?    extends   ReportContainer <  ?  >  >    reporting )     {", "return   reporting . getReports (  )  . getEnabled (  )  ;", "}", "}  )  ;", "return   new   LinkedHashSet < Report >  ( CollectionUtils . flattenCollections ( Report . class ,    enabledReportSets )  )  ;", "}", "METHOD_END"], "methodName": ["getEnabledInputReports"], "fileName": "org.gradle.api.reporting.GenerateBuildDashboard"}, {"methodBody": ["METHOD_START", "{", "Set < GenerateBuildDashboard . ReportState >    inputs    =    new   LinkedHashSet < GenerateBuildDashboard . ReportState >  (  )  ;", "for    ( Report   report    :    getEnabledInputReports (  )  )     {", "if    ( getReports (  )  . contains ( report )  )     {", "continue ;", "}", "inputs . add ( new   GenerateBuildDashboard . ReportState ( report . getDisplayName (  )  ,    report . getDestination (  )  ,    report . getDestination (  )  . exists (  )  )  )  ;", "}", "return   inputs ;", "}", "METHOD_END"], "methodName": ["getInputReports"], "fileName": "org.gradle.api.reporting.GenerateBuildDashboard"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getInstantiator"], "fileName": "org.gradle.api.reporting.GenerateBuildDashboard"}, {"methodBody": ["METHOD_START", "{", "return   reports ( new   ClosureBackedAction < BuildDashboardReports >  ( closure )  )  ;", "}", "METHOD_END"], "methodName": ["reports"], "fileName": "org.gradle.api.reporting.GenerateBuildDashboard"}, {"methodBody": ["METHOD_START", "{", "configureAction . execute ( reports )  ;", "return   reports ;", "}", "METHOD_END"], "methodName": ["reports"], "fileName": "org.gradle.api.reporting.GenerateBuildDashboard"}, {"methodBody": ["METHOD_START", "{", "if    ( getReports (  )  . getHtml (  )  . isEnabled (  )  )     {", "Generator   generator    =    new   Generator (  )  ;", "generator . render ( getEnabledInputReports (  )  ,    reports . getHtml (  )  . getEntryPoint (  )  )  ;", "} else    {", "setDidWork ( false )  ;", "}", "}", "METHOD_END"], "methodName": ["run"], "fileName": "org.gradle.api.reporting.GenerateBuildDashboard"}, {"methodBody": ["METHOD_START", "{", "return   this . project . getServices (  )  . get ( FileLookup . class )  . getFileResolver ( getBaseDir (  )  )  . resolve ( path )  ;", "}", "METHOD_END"], "methodName": ["file"], "fileName": "org.gradle.api.reporting.ReportingExtension"}, {"methodBody": ["METHOD_START", "{", "Object   version    =    project . getVersion (  )  ;", "if    ( DEFAULT _ VERSION . equals ( version )  )     {", "return    ( project . getName (  )  )     +     \"    API \"  ;", "} else    {", "return    (  (  ( project . getName (  )  )     +     \"     \"  )     +    version )     +     \"    API \"  ;", "}", "}", "METHOD_END"], "methodName": ["getApiDocTitle"], "fileName": "org.gradle.api.reporting.ReportingExtension"}, {"methodBody": ["METHOD_START", "{", "return   baseDirectory . getAsFile (  )  . get (  )  ;", "}", "METHOD_END"], "methodName": ["getBaseDir"], "fileName": "org.gradle.api.reporting.ReportingExtension"}, {"methodBody": ["METHOD_START", "{", "return   baseDirectory ;", "}", "METHOD_END"], "methodName": ["getBaseDirectory"], "fileName": "org.gradle.api.reporting.ReportingExtension"}, {"methodBody": ["METHOD_START", "{", "baseDirectory . set ( baseDir )  ;", "}", "METHOD_END"], "methodName": ["setBaseDir"], "fileName": "org.gradle.api.reporting.ReportingExtension"}, {"methodBody": ["METHOD_START", "{", "this . baseDirectory . set ( project . provider ( new   Callable < Directory >  (  )     {", "@ Override", "public   Directory   call (  )    throws   Except    {", "DirectoryProperty   result    =    project . getLayout (  )  . directoryProperty (  )  ;", "result . set ( project . file ( baseDir )  )  ;", "return   result . get (  )  ;", "}", "}  )  )  ;", "}", "METHOD_END"], "methodName": ["setBaseDir"], "fileName": "org.gradle.api.reporting.ReportingExtension"}, {"methodBody": ["METHOD_START", "{", "final   String   baseCssLink    =    builder . requireResource ( getClass (  )  . getResource (  \"  / org / gradle / reporting / base - style . css \"  )  )  ;", "final   String   cssLink    =    builder . requireResource ( getClass (  )  . getResource (  \" style . css \"  )  )  ;", "new   Html ( builder . getOutput (  )  )     {", "{", "html (  )  ;", "head (  )  ;", "meta (  )  . httpEquiv (  \" Content - Type \"  )  . content (  \" text / html ;    charset = utf -  8  \"  )  ;", "meta (  )  . httpEquiv (  \" x - ua - compatible \"  )  . content (  \" IE = edge \"  )  ;", "link (  )  . rel (  \" stylesheet \"  )  . type (  \" text / css \"  )  . href ( baseCssLink )  . end (  )  ;", "link (  )  . rel (  \" stylesheet \"  )  . type (  \" text / css \"  )  . href ( cssLink )  . end (  )  ;", "title (  )  . text (  \" Build   dashboard \"  )  . end (  )  ;", "end (  )  ;", "body (  )  ;", "div (  )  . id (  \" content \"  )  ;", "if    (  ( reports . size (  )  )     >     0  )     {", "h 1  (  )  . text (  \" Build   reports \"  )  . end (  )  ;", "ul (  )  ;", "for    ( Report   report    :    reports )     {", "li (  )  ;", "if    ( report . getDestination (  )  . exists (  )  )     {", "a (  )  . href ( RelativePathUtil . relativePath ( outputFile . getParentFile (  )  ,    getHtmlLinkedFileFromReport ( report )  )  )  . text ( report . getDisplayName (  )  )  ;", "} else    {", "span (  )  . classAttr (  \" unavailable \"  )  . text ( report . getDisplayName (  )  )  ;", "}", "end (  2  )  ;", "}", "end (  )  ;", "} else    {", "h 1  (  )  . text (  \" There   are   no   build   reports   available .  \"  )  . end (  )  ;", "}", "div (  )  . id (  \" footer \"  )  ;", "p (  )  ;", "text (  \" Generated   by    \"  )  ;", "a (  )  . href (  \" http :  /  / www . gradle . org \"  )  . text ( GradleVersion . current (  )  . toString (  )  )  . end (  )  ;", "text (  (  \"    at    \"     +     ( builder . formatDate ( new   Date (  )  )  )  )  )  ;", "end (  )  ;", "end (  )  ;", "end (  )  ;", "endAll (  )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["generate"], "fileName": "org.gradle.api.reporting.internal.BuildDashboardGenerator"}, {"methodBody": ["METHOD_START", "{", "if    ( report   instanceof   DirectoryReport )     {", "return    (  ( DirectoryReport )     ( report )  )  . getEntryPoint (  )  ;", "} else    {", "return   report . getDestination (  )  ;", "}", "}", "METHOD_END"], "methodName": ["getHtmlLinkedFileFromReport"], "fileName": "org.gradle.api.reporting.internal.BuildDashboardGenerator"}, {"methodBody": ["METHOD_START", "{", "return    (  ( DirectoryReport )     ( getByName (  \" html \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getHtml"], "fileName": "org.gradle.api.reporting.internal.DefaultBuildDashboardReports"}, {"methodBody": ["METHOD_START", "{", "N   report    =    DefaultReportContainer . getInstantiator (  )  . newInstance ( clazz ,    constructionArgs )  ;", "if    ( report . getName (  )  . equals (  \" enabled \"  )  )     {", "throw   new   InvalidUserDataException (  \" Reports   that   are   part   of   a   ReportContainer   cannot   be   named    ' enabled '  \"  )  ;", "}", "DefaultReportContainer . getStore (  )  . add ( report )  ;", "DefaultReportContainer . index (  )  ;", "return   report ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.gradle.api.reporting.internal.DefaultReportContainer"}, {"methodBody": ["METHOD_START", "{", "ConfigureUtil . configureSelf ( cl ,    this )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["configure"], "fileName": "org.gradle.api.reporting.internal.DefaultReportContainer"}, {"methodBody": ["METHOD_START", "{", "return   enabled ;", "}", "METHOD_END"], "methodName": ["getEnabled"], "fileName": "org.gradle.api.reporting.internal.DefaultReportContainer"}, {"methodBody": ["METHOD_START", "{", "SortedMap < String ,    T >    map    =    enabled . getAsMap (  )  ;", "if    ( map . isEmpty (  )  )     {", "return   null ;", "} else    {", "return   map . get ( map . firstKey (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getFirstEnabled"], "fileName": "org.gradle.api.reporting.internal.DefaultReportContainer"}, {"methodBody": ["METHOD_START", "{", "return   ConfigureUtil . configureSelf ( configure ,    this )  ;", "}", "METHOD_END"], "methodName": ["configure"], "fileName": "org.gradle.api.reporting.internal.SimpleReport"}, {"methodBody": ["METHOD_START", "{", "return   destination . getOrNull (  )  ;", "}", "METHOD_END"], "methodName": ["getDestination"], "fileName": "org.gradle.api.reporting.internal.SimpleReport"}, {"methodBody": ["METHOD_START", "{", "return   displayName . create (  )  ;", "}", "METHOD_END"], "methodName": ["getDisplayName"], "fileName": "org.gradle.api.reporting.internal.SimpleReport"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.api.reporting.internal.SimpleReport"}, {"methodBody": ["METHOD_START", "{", "return   outputType ;", "}", "METHOD_END"], "methodName": ["getOutputType"], "fileName": "org.gradle.api.reporting.internal.SimpleReport"}, {"methodBody": ["METHOD_START", "{", "return   enabled . get (  )  ;", "}", "METHOD_END"], "methodName": ["isEnabled"], "fileName": "org.gradle.api.reporting.internal.SimpleReport"}, {"methodBody": ["METHOD_START", "{", "return   fileResolver . resolve ( file )  ;", "}", "METHOD_END"], "methodName": ["resolveToFile"], "fileName": "org.gradle.api.reporting.internal.SimpleReport"}, {"methodBody": ["METHOD_START", "{", "DeprecationLogger . nagUserOfDiscontinuedMethod (  \" ConfigurableReport . setDestination ( Object )  \"  ,    String . format (  \" Please   use   the   method   ConfigurableReport . setDestination ( File )    instead .  \"  )  )  ;", "this . destination . set ( project . provider ( new   Callable < File >  (  )     {", "@ Override", "public   File   call (  )    throws   Exception    {", "return   resolveToFile ( destination )  ;", "}", "}  )  )  ;", "}", "METHOD_END"], "methodName": ["setDestination"], "fileName": "org.gradle.api.reporting.internal.SimpleReport"}, {"methodBody": ["METHOD_START", "{", "this . enabled . set ( enabled )  ;", "}", "METHOD_END"], "methodName": ["setEnabled"], "fileName": "org.gradle.api.reporting.internal.SimpleReport"}, {"methodBody": ["METHOD_START", "{", "return    \" Report    \"     +     ( getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.gradle.api.reporting.internal.SimpleReport"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" Report   generated   by   task    '  \"     +     ( task . getPath (  )  )  )     +     \"  '     (  \"  )     +    name )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["getDisplayName"], "fileName": "org.gradle.api.reporting.internal.TaskGeneratedReport"}, {"methodBody": ["METHOD_START", "{", "if    (  ( relativeEntryPath )     =  =    null )     {", "return   getDesation (  )  ;", "} else    {", "return   new   File ( getDesation (  )  ,    relativeEntryPath )  ;", "}", "}", "METHOD_END"], "methodName": ["getEntryPoint"], "fileName": "org.gradle.api.reporting.internal.TaskGeneratedSingleDirectoryReport"}, {"methodBody": ["METHOD_START", "{", "return   task ;", "}", "METHOD_END"], "methodName": ["getTask"], "fileName": "org.gradle.api.reporting.internal.TaskReportContainer"}, {"methodBody": ["METHOD_START", "{", "project . getPluginManager (  )  . apply ( ReportingBasePlugin . class )  ;", "final   GenerateBuildDashboard   buildDashboardTask    =    project . getTasks (  )  . create (  . BUILD _ DASHBOARD _ TASK _ NAME ,    GenerateBuildDashboard . class )  ;", "buildDashboardTask . setDescription (  \" Generates   a   dashboard   of   all   the   reports   produced   by   this   build .  \"  )  ;", "buildDashboardTask . setGroup (  \" reporting \"  )  ;", "DirectoryReport   htmlReport    =    buildDashboardTask . getReports (  )  . getHtml (  )  ;", "ConventionMapping   htmlReportConventionMapping    =    new   DslObject ( htmlReport )  . getConventionMapping (  )  ;", "htmlReportConventionMapping . map (  \" destination \"  ,    new   Callable < Object >  (  )     {", "public   Object   call (  )    throws   Exception    {", "return   project . getExtensions (  )  . getByType ( ReportingExtension . class )  . file (  \" buildDashboard \"  )  ;", "}", "}  )  ;", "Action < Task >    captureReportingTasks    =    new   Action < Task >  (  )     {", "public   void   execute ( Task   task )     {", "if    (  !  ( task   instanceof   Reporting )  )     {", "return ;", "}", "Reporting   reporting    =     (  ( Reporting )     ( task )  )  ;", "buildDashboardTask . aggregate ( reporting )  ;", "if    (  !  ( task . equals ( buildDashboardTask )  )  )     {", "task . finalizedBy ( buildDashboardTask )  ;", "}", "}", "}  ;", "for    ( Project   aProject    :    project . getAllprojects (  )  )     {", "aProject . getTasks (  )  . all ( captureReportingTasks )  ;", "}", "}", "METHOD_END"], "methodName": ["apply"], "fileName": "org.gradle.api.reporting.plugins.BuildDashboardPlugin"}]