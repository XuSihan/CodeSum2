[{"methodBody": ["METHOD_START", "{", "return   terminal ;", "}", "METHOD_END"], "methodName": ["isTerminal"], "fileName": "org.gradle.process.internal.ExecHandleState"}, {"methodBody": ["METHOD_START", "{", "return   Runtime . getRuntime (  )  . totalMemory (  )  ;", "}", "METHOD_END"], "methodName": ["getCommittedMemory"], "fileName": "org.gradle.process.internal.health.memory.DefaultJvmMemoryInfo"}, {"methodBody": ["METHOD_START", "{", "return   totalMemory ;", "}", "METHOD_END"], "methodName": ["getMaxMemory"], "fileName": "org.gradle.process.internal.health.memory.DefaultJvmMemoryInfo"}, {"methodBody": ["METHOD_START", "{", "long   toReleaseMemory    =    requestedFreeMemory ;", "if    ( freeMemory    <    requestedFreeMemory )     {", ". LOGGER . debug (  \"  {  }    memory   requested ,     {  }    free \"  ,    requestedFreeMemory ,    freeMemory )  ;", "List < MemoryHolder >    memoryHolders ;", "synchronized ( holdersLock )     {", "memoryHolders    =    new   ArrayList < MemoryHolder >  ( holders )  ;", "}", "for    ( MemoryHolder   holder    :    memoryHolders )     {", "long   released    =    holder . attemptToRelease ( toReleaseMemory )  ;", "toReleaseMemory    -  =    released ;", "freeMemory    +  =    released ;", "if    ( freeMemory    >  =    requestedFreeMemory )     {", "break ;", "}", "}", ". LOGGER . debug (  \"  {  }    memory   requested ,     {  }    released ,     {  }    free \"  ,    requestedFreeMemory ,     ( requestedFreeMemory    -    toReleaseMemory )  ,    freeMemory )  ;", "}", "return   freeMemory ;", "}", "METHOD_END"], "methodName": ["doRequestFreeMemory"], "fileName": "org.gradle.process.internal.health.memory.DefaultMemoryManager"}, {"methodBody": ["METHOD_START", "{", "return   Math . max ( DefaultMemoryManager . MIN _ THRESHOLD _ BYTES ,     (  ( long )     ( totalPhysicalMemory    *     ( minFreeMemoryPercentage )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getMemoryThresholdInBytes"], "fileName": "org.gradle.process.internal.health.memory.DefaultMemoryManager"}, {"methodBody": ["METHOD_START", "{", "scheduler . scheduleAtFixedRate ( new   DefaultMemoryManager . MemoryCheck (  )  ,    DefaultMemoryManager . STATUS _ INTERVAL _ SECONDS ,    DefaultMemoryManager . STATUS _ INTERVAL _ SECONDS ,    TimeUnit . SECONDS )  ;", "DefaultMemoryManager . LOGGER . debug (  \" Memory   status   broadcaster   started \"  )  ;", "if    ( osMemoryStatusSupported )     {", "addListener ( osMemoryStatusListener )  ;", "} else    {", "DefaultMemoryManager . LOGGER . info (  \" This   JVM   does   not   support   getting   OS   memory ,    so   no   OS   memory   status   updates   will   be   broadcast \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["start"], "fileName": "org.gradle.process.internal.health.memory.DefaultMemoryManager"}, {"methodBody": ["METHOD_START", "{", "try    {", "osInfo . getOsSnapshot (  )  ;", "return   true ;", "}    catch    ( UnsupportedOperationException   ex )     {", "return   false ;", "}", "}", "METHOD_END"], "methodName": ["supportsOsMemoryStatus"], "fileName": "org.gradle.process.internal.health.memory.DefaultMemoryManager"}, {"methodBody": ["METHOD_START", "{", "OperatingSystem   operatingSystem    =    OperatingSystem . current (  )  ;", "if    ( operatingSystem . isMacOsX (  )  )     {", "return   new   NativeOsxAvailable (  )  . get (  )  ;", "} else", "if    ( operatingSystem . isLinux (  )  )     {", "return   new   MeminfoAvailable (  )  . get (  )  ;", "}", "return   new   MBeanAvailable (  )  . get (  )  ;", "}", "METHOD_END"], "methodName": ["getFreePhysicalMemory"], "fileName": "org.gradle.process.internal.health.memory.DefaultOsMemoryInfo"}, {"methodBody": ["METHOD_START", "{", "return   TotalPhysicalMemoryProvider . getTotalPhysicalMemory (  )  ;", "}", "METHOD_END"], "methodName": ["getTotalPhysicalMemory"], "fileName": "org.gradle.process.internal.health.memory.DefaultOsMemoryInfo"}, {"methodBody": ["METHOD_START", "{", "Exception   rootCause ;", "try    {", "ObjectName   objectName    =    new   ObjectName ( mbean )  ;", "return   Cast . cast ( type ,    ManagementFactory . getPlatformMBeanServer (  )  . get ( objectName ,    attribute )  )  ;", "}    catch    ( InstanceNotFoundException   e )     {", "rootCause    =    e ;", "}    catch    ( ReflectionException   e )     {", "rootCause    =    e ;", "}    catch    ( MalformedObjectNameException   e )     {", "rootCause    =    e ;", "}    catch    ( MBeanException   e )     {", "rootCause    =    e ;", "}    catch    ( NotFoundException   e )     {", "rootCause    =    e ;", "}", "throw   new   UnsupportedOperationException (  (  (  (  (  \"  (  \"     +    mbean )     +     \"  )  .  \"  )     +    attribute )     +     \"    is   unsupported   on   this   JVM .  \"  )  ,    rootCause )  ;", "}", "METHOD_END"], "methodName": ["getMbeanAttribute"], "fileName": "org.gradle.process.internal.health.memory.MBeanAttributeProvider"}, {"methodBody": ["METHOD_START", "{", "if    ( isIbmJvm (  )  )     {", "long   totalMHalf    =    osTotalM    /     2  ;", "long   halfGB    =    MAmount . parseNotation (  \"  5  1  2 m \"  )  ;", "return   totalMHalf    >    halfGB    ?    halfGB    :    totalMHalf ;", "}", "long   totalMFourth    =    osTotalM    /     4  ;", "long   oneGB    =    MAmount . parseNotation (  \"  1 g \"  )  ;", "switch    ( getJvmBitMode (  )  )     {", "case    3  2     :", "return   totalMFourth    >    oneGB    ?    oneGB    :    totalMFourth ;", "case    6  4     :", "default    :", "if    ( isServerJvm (  )  )     {", "long   thirtyTwoGB    =    MAmount . parseNotation (  \"  3  2 g \"  )  ;", "return   totalMFourth    >    thirtyTwoGB    ?    thirtyTwoGB    :    totalMFourth ;", "}", "return   totalMFourth    >    oneGB    ?    oneGB    :    totalMFourth ;", "}", "}", "METHOD_END"], "methodName": ["getDefaultMaximumHeapSize"], "fileName": "org.gradle.process.internal.health.memory.MaximumHeapHelper"}, {"methodBody": ["METHOD_START", "{", "for    ( String   property    :    Arrays . asList (  \" sun . arch . data . model \"  ,     \" com . ibm . vm . bitmode \"  ,     \" os . arch \"  )  )     {", "if    ( System . getProperty ( property ,     \"  \"  )  . contains (  \"  6  4  \"  )  )     {", "return    6  4  ;", "}", "}", "return    3  2  ;", "}", "METHOD_END"], "methodName": ["getJvmBitMode"], "fileName": "org.gradle.process.internal.health.memory.MaximumHeapHelper"}, {"methodBody": ["METHOD_START", "{", "return   Jvm . current (  )  . isIbmJvm (  )  ;", "}", "METHOD_END"], "methodName": ["isIbmJvm"], "fileName": "org.gradle.process.internal.health.memory.MaximumHeapHelper"}, {"methodBody": ["METHOD_START", "{", "return    !  ( System . getProperty (  \" name \"  )  . toLowerCase ( Locale . US )  . contains (  \" client \"  )  )  ;", "}", "METHOD_END"], "methodName": ["isServerJvm"], "fileName": "org.gradle.process.internal.health.memory.MaximumHeapHelper"}, {"methodBody": ["METHOD_START", "{", "final   MeminfoAvailableMemory . Meminfo   meminfo    =    new   MeminfoAvailableMemory . Meminfo (  )  ;", "for    ( String   line    :    meminfoLines )     {", "if    ( line . startsWith (  \" MemAvailable \"  )  )     {", "return   parseMeminfoBytes ( line )  ;", "} else", "if    ( line . startsWith (  \" MemFree \"  )  )     {", "meminfo . setMemFree ( parseMeminfoBytes ( line )  )  ;", "} else", "if    ( line . startsWith (  \" Buffers \"  )  )     {", "meminfo . setBuffers ( parseMeminfoBytes ( line )  )  ;", "} else", "if    ( line . startsWith (  \" Cached \"  )  )     {", "meminfo . setCached ( parseMeminfoBytes ( line )  )  ;", "} else", "if    ( line . startsWith (  \" SReclaimable \"  )  )     {", "meminfo . setReclaimable ( parseMeminfoBytes ( line )  )  ;", "} else", "if    ( line . startsWith (  \" Mapped \"  )  )     {", "meminfo . setMapped ( parseMeminfoBytes ( line )  )  ;", "}", "}", "return   meminfo . getAvailableBytes (  )  ;", "}", "METHOD_END"], "methodName": ["parseFreeMemoryFromMeminfo"], "fileName": "org.gradle.process.internal.health.memory.MeminfoAvailableMemory"}, {"methodBody": ["METHOD_START", "{", "Matcher   matcher    =    meminfoMatcher . reset ( line )  ;", "if    ( matcher . matches (  )  )     {", "return    ( Long . parseLong ( matcher . group (  1  )  )  )     *     1  0  2  4  ;", "}", "throw   new   UnsupportedOperationException (  \" Unable   to   parse    / proc / meminfo   output   to   get   a   memory \"  )  ;", "}", "METHOD_END"], "methodName": ["parseMeminfoBytes"], "fileName": "org.gradle.process.internal.health.memory.MeminfoAvailableMemory"}, {"methodBody": ["METHOD_START", "{", "return   bytes ;", "}", "METHOD_END"], "methodName": ["getBytes"], "fileName": "org.gradle.process.internal.health.memory.MemoryAmount"}, {"methodBody": ["METHOD_START", "{", "return   new   MemoryAmount ( MemoryAmount . parseNotation ( notation )  ,    notation )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.process.internal.health.memory.MemoryAmount"}, {"methodBody": ["METHOD_START", "{", "return   new   MemoryAmount ( bytes ,    String . valueOf ( bytes )  )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.process.internal.health.memory.MemoryAmount"}, {"methodBody": ["METHOD_START", "{", "long   bytes    =    gigaBytes    *     ( MemoryAmount . GIGA _ FACTOR )  ;", "return   new   MemoryAmount ( bytes ,     ( bytes    +     \" g \"  )  )  ;", "}", "METHOD_END"], "methodName": ["ofGigaBytes"], "fileName": "org.gradle.process.internal.health.memory.MemoryAmount"}, {"methodBody": ["METHOD_START", "{", "long   bytes    =    kiloBytes    *     ( MemoryAmount . KILO _ FACTOR )  ;", "return   new   MemoryAmount ( bytes ,     ( bytes    +     \" k \"  )  )  ;", "}", "METHOD_END"], "methodName": ["ofKiloBytes"], "fileName": "org.gradle.process.internal.health.memory.MemoryAmount"}, {"methodBody": ["METHOD_START", "{", "long   bytes    =    megaBytes    *     ( MemoryAmount . MEGA _ FACTOR )  ;", "return   new   MemoryAmount ( bytes ,     ( bytes    +     \" m \"  )  )  ;", "}", "METHOD_END"], "methodName": ["ofMegaBytes"], "fileName": "org.gradle.process.internal.health.memory.MemoryAmount"}, {"methodBody": ["METHOD_START", "{", "long   bytes    =    teraBytes    *     ( MemoryAmount . TERA _ FACTOR )  ;", "return   new   MemoryAmount ( bytes ,     ( bytes    +     \" t \"  )  )  ;", "}", "METHOD_END"], "methodName": ["ofTeraBytes"], "fileName": "org.gradle.process.internal.health.memory.MemoryAmount"}, {"methodBody": ["METHOD_START", "{", "if    ( notation    =  =    null )     {", "return    -  1  ;", "}", "String   normalized    =    notation . toLowerCase ( Locale . US )  . trim (  )  ;", "if    ( normalized . isEmpty (  )  )     {", "return    -  1  ;", "}", "try    {", "if    ( normalized . endsWith (  \" k \"  )  )     {", "return    . parseWithFactor ( normalized ,     . KILO _ FACTOR )  ;", "}", "if    ( normalized . endsWith (  \" m \"  )  )     {", "return    . parseWithFactor ( normalized ,     . MEGA _ FACTOR )  ;", "}", "if    ( normalized . endsWith (  \" g \"  )  )     {", "return    . parseWithFactor ( normalized ,     . GIGA _ FACTOR )  ;", "}", "if    ( normalized . endsWith (  \" t \"  )  )     {", "return    . parseWithFactor ( normalized ,     . TERA _ FACTOR )  ;", "}", "return   Long . parseLong ( normalized )  ;", "}    catch    ( NumberFormatException   ex )     {", "throw   new   IllegalArgumentException (  (  \" Cannot   parse   memory   amount   notation :     \"     +    notation )  ,    ex )  ;", "}", "}", "METHOD_END"], "methodName": ["parseNotation"], "fileName": "org.gradle.process.internal.health.memory.MemoryAmount"}, {"methodBody": ["METHOD_START", "{", "return    ( Long . parseLong ( notation . substring (  0  ,     (  ( notation . length (  )  )     -     1  )  )  )  )     *    factor ;", "}", "METHOD_END"], "methodName": ["parseWithFactor"], "fileName": "org.gradle.process.internal.health.memory.MemoryAmount"}, {"methodBody": ["METHOD_START", "{", "String   attribute    =     ( Jvm . current (  )  . isIbmJvm (  )  )     ?     \" TotalPhysicalMemory \"     :     \" TotalPhysicalMemorySize \"  ;", "return   MBeanAttributeProvider . getMbeanAttribute (  \" lang : type = OperatingSystem \"  ,    attribute ,    Long . class )  ;", "}", "METHOD_END"], "methodName": ["getTotalPhysicalMemory"], "fileName": "org.gradle.process.internal.health.memory.TotalPhysicalMemoryProvider"}]