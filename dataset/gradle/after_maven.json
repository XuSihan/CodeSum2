[{"methodBody": ["METHOD_START", "{", "this . authentication    =    authentication ;", "}", "METHOD_END"], "methodName": ["addAuthentication"], "fileName": "org.apache.maven.artifact.ant.RemoteRepository"}, {"methodBody": ["METHOD_START", "{", "this . proxy    =    proxy ;", "}", "METHOD_END"], "methodName": ["addProxy"], "fileName": "org.apache.maven.artifact.ant.RemoteRepository"}, {"methodBody": ["METHOD_START", "{", "this . releases    =    releases ;", "}", "METHOD_END"], "methodName": ["addReleases"], "fileName": "org.apache.maven.artifact.ant.RemoteRepository"}, {"methodBody": ["METHOD_START", "{", "this . snapshots    =    snapshots ;", "}", "METHOD_END"], "methodName": ["addSnapshots"], "fileName": "org.apache.maven.artifact.ant.RemoteRepository"}, {"methodBody": ["METHOD_START", "{", "return    (  ( RemoteRepository )     ( getInstance (  )  )  )  . authentication ;", "}", "METHOD_END"], "methodName": ["getAuthentication"], "fileName": "org.apache.maven.artifact.ant.RemoteRepository"}, {"methodBody": ["METHOD_START", "{", "return   getUrl (  )  ;", "}", "METHOD_END"], "methodName": ["getDefaultId"], "fileName": "org.apache.maven.artifact.ant.RemoteRepository"}, {"methodBody": ["METHOD_START", "{", "return    (  ( RemoteRepository )     ( getInstance (  )  )  )  . proxy ;", "}", "METHOD_END"], "methodName": ["getProxy"], "fileName": "org.apache.maven.artifact.ant.RemoteRepository"}, {"methodBody": ["METHOD_START", "{", "return    (  ( RemoteRepository )     ( getInstance (  )  )  )  . releases ;", "}", "METHOD_END"], "methodName": ["getReleases"], "fileName": "org.apache.maven.artifact.ant.RemoteRepository"}, {"methodBody": ["METHOD_START", "{", "return    (  ( RemoteRepository )     ( getInstance (  )  )  )  . snapshots ;", "}", "METHOD_END"], "methodName": ["getSnapshots"], "fileName": "org.apache.maven.artifact.ant.RemoteRepository"}, {"methodBody": ["METHOD_START", "{", "return    (  ( RemoteRepository )     ( getInstance (  )  )  )  . url ;", "}", "METHOD_END"], "methodName": ["getUrl"], "fileName": "org.apache.maven.artifact.ant.RemoteRepository"}, {"methodBody": ["METHOD_START", "{", "this . url    =    url ;", "}", "METHOD_END"], "methodName": ["setUrl"], "fileName": "org.apache.maven.artifact.ant.RemoteRepository"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getInstance (  )  . id )     =  =    null )     {", "getInstance (  )  . setId ( getDefaultId (  )  )  ;", "}", "return   getInstance (  )  . id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.apache.maven.artifact.ant.Repository"}, {"methodBody": ["METHOD_START", "{", "Repository   instance    =    this ;", "if    (  ( refid )     !  =    null )     {", "instance    =     (  ( Repository )     ( getProject (  )  . getReference ( refid )  )  )  ;", "}", "return   instance ;", "}", "METHOD_END"], "methodName": ["getInstance"], "fileName": "org.apache.maven.artifact.ant.Repository"}, {"methodBody": ["METHOD_START", "{", "return   getInstance (  )  . layout ;", "}", "METHOD_END"], "methodName": ["getLayout"], "fileName": "org.apache.maven.artifact.ant.Repository"}, {"methodBody": ["METHOD_START", "{", "return   refid ;", "}", "METHOD_END"], "methodName": ["getRefid"], "fileName": "org.apache.maven.artifact.ant.Repository"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.apache.maven.artifact.ant.Repository"}, {"methodBody": ["METHOD_START", "{", "this . layout    =    layout ;", "}", "METHOD_END"], "methodName": ["setLayout"], "fileName": "org.apache.maven.artifact.ant.Repository"}, {"methodBody": ["METHOD_START", "{", "this . refid    =    refid ;", "}", "METHOD_END"], "methodName": ["setRefid"], "fileName": "org.apache.maven.artifact.ant.Repository"}, {"methodBody": ["METHOD_START", "{", "return   checksumPolicy ;", "}", "METHOD_END"], "methodName": ["getChecksumPolicy"], "fileName": "org.apache.maven.artifact.ant.RepositoryPolicy"}, {"methodBody": ["METHOD_START", "{", "return   updatePolicy ;", "}", "METHOD_END"], "methodName": ["getUpdatePolicy"], "fileName": "org.apache.maven.artifact.ant.RepositoryPolicy"}, {"methodBody": ["METHOD_START", "{", "return   enabled ;", "}", "METHOD_END"], "methodName": ["isEnabled"], "fileName": "org.apache.maven.artifact.ant.RepositoryPolicy"}, {"methodBody": ["METHOD_START", "{", "this . checksumPolicy    =    checksumPolicy ;", "}", "METHOD_END"], "methodName": ["setChecksumPolicy"], "fileName": "org.apache.maven.artifact.ant.RepositoryPolicy"}, {"methodBody": ["METHOD_START", "{", "this . enabled    =    enabled ;", "}", "METHOD_END"], "methodName": ["setEnabled"], "fileName": "org.apache.maven.artifact.ant.RepositoryPolicy"}, {"methodBody": ["METHOD_START", "{", "this . updatePolicy    =    updatePolicy ;", "}", "METHOD_END"], "methodName": ["setUpdatePolicy"], "fileName": "org.apache.maven.artifact.ant.RepositoryPolicy"}, {"methodBody": ["METHOD_START", "{", "return   configuration ;", "}", "METHOD_END"], "methodName": ["getConfiguration"], "fileName": "org.gradle.api.artifacts.maven.Conf2ScopeMapping"}, {"methodBody": ["METHOD_START", "{", "return   priority ;", "}", "METHOD_END"], "methodName": ["getPriority"], "fileName": "org.gradle.api.artifacts.maven.Conf2ScopeMapping"}, {"methodBody": ["METHOD_START", "{", "return   scope ;", "}", "METHOD_END"], "methodName": ["getScope"], "fileName": "org.gradle.api.artifacts.maven.Conf2ScopeMapping"}, {"methodBody": ["METHOD_START", "{", "assertTrue ( conf 2 ScopeMapping . equals ( new   Conf 2 ScopeMapping ( Conf 2 ScopeMappingTest . TEST _ PRIORITY ,    configuration ,    Conf 2 ScopeMappingTest . TEST _ SCOPE )  )  )  ;", "assertFalse ( conf 2 ScopeMapping . equals ( new   Conf 2 ScopeMapping (  (  ( Conf 2 ScopeMappingTest . TEST _ PRIORITY )     +     1  0  )  ,    configuration ,    Conf 2 ScopeMappingTest . TEST _ SCOPE )  )  )  ;", "}", "METHOD_END"], "methodName": ["equality"], "fileName": "org.gradle.api.artifacts.maven.Conf2ScopeMappingTest"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( conf 2 ScopeMapping . hashCode (  )  ,    new   Conf 2 ScopeMapping ( Conf 2 ScopeMappingTest . TEST _ PRIORITY ,    configuration ,    Conf 2 ScopeMappingTest . TEST _ SCOPE )  . hashCode (  )  )  ;", "}", "METHOD_END"], "methodName": ["hashcode"], "fileName": "org.gradle.api.artifacts.maven.Conf2ScopeMappingTest"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( Conf 2 ScopeMappingTest . TEST _ PRIORITY ,    conf 2 ScopeMapping . getPriority (  )  )  ;", "assertEquals ( configuration ,    conf 2 ScopeMapping . getConfiguration (  )  )  ;", "assertEquals ( Conf 2 ScopeMappingTest . TEST _ SCOPE ,    conf 2 ScopeMapping . getScope (  )  )  ;", "}", "METHOD_END"], "methodName": ["init"], "fileName": "org.gradle.api.artifacts.maven.Conf2ScopeMappingTest"}, {"methodBody": ["METHOD_START", "{", "conf 2 ScopeMapping    =    new   Conf 2 ScopeMapping ( Conf 2 ScopeMappingTest . TEST _ PRIORITY ,    configuration ,    Conf 2 ScopeMappingTest . TEST _ SCOPE )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.gradle.api.artifacts.maven.Conf2ScopeMappingTest"}, {"methodBody": ["METHOD_START", "{", "MavenPluginConvention   mavenConvention    =    new   MavenPluginConvention ( project ,    mavenFactory )  ;", "Convention   convention    =    project . getConvention (  )  ;", "convention . getPlugins (  )  . put (  \" maven \"  ,    mavenConvention )  ;", "return   mavenConvention ;", "}", "METHOD_END"], "methodName": ["addConventionObject"], "fileName": "org.gradle.api.plugins.MavenPlugin"}, {"methodBody": ["METHOD_START", "{", "this . project    =    project ;", "project . getPluginManager (  )  . apply ( BasePlugin . class )  ;", "MavenFactory   mavenFactory    =    project . getServices (  )  . get ( MavenFactory . class )  ;", "final   MavenPluginConvention   pluginConvention    =    addConventionObject ( project ,    mavenFactory )  ;", "final   DefaultDeployerFactory   deployerFactory    =    new   DefaultDeployerFactory ( mavenFactory ,    loggingManagerFactory ,    fileResolver ,    pluginConvention ,    project . getConfigurations (  )  ,    pluginConvention . getConf 2 ScopeMappings (  )  ,    mavenSettingsProvider ,    mavenRepositoryLocator )  ;", "configureUploadTasks ( deployerFactory )  ;", "configureUploadArchivesTask (  )  ;", "PluginContainer   plugins    =    project . getPlugins (  )  ;", "plugins . withType ( JavaPlugin . class ,    new   Action < JavaPlugin >  (  )     {", "public   void   execute ( JavaPlugin   javaPlugin )     {", "configureJavaScopeMappings ( project . getConfigurations (  )  ,    pluginConvention . getConf 2 ScopeMappings (  )  )  ;", "configureInstall ( project )  ;", "}", "}  )  ;", "plugins . withType ( WarPlugin . class ,    new   Action < WarPlugin >  (  )     {", "public   void   execute ( WarPlugin   warPlugin )     {", "configureWarScopeMappings ( project . getConfigurations (  )  ,    pluginConvention . getConf 2 ScopeMappings (  )  )  ;", "}", "}  )  ;", "plugins . withType ( JavaLibraryPlugin . class ,    new   Action < JavaLibraryPlugin >  (  )     {", "@ Override", "public   void   execute ( JavaLibraryPlugin   javaLibraryPlugin )     {", "configureJavaLibraryScopeMappings ( project . getConfigurations (  )  ,    pluginConvention . getConf 2 ScopeMappings (  )  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["apply"], "fileName": "org.gradle.api.plugins.MavenPlugin"}, {"methodBody": ["METHOD_START", "{", "Upload   installUpload    =    project . getTasks (  )  . create ( MavenPlugin . INSTALL _ TASK _ NAME ,    Upload . class )  ;", "Configuration   configuration    =    project . getConfigurations (  )  . getByName ( ARCHIVES _ CONFIGURATION )  ;", "installUpload . setConfiguration ( configuration )  ;", "MavenRepositoryHandlerConvention   repositories    =    new   internal . plugins . DslObject ( installUpload . getRepositories (  )  )  . getConvention (  )  . getPlugin ( MavenRepositoryHandlerConvention . class )  ;", "repositories . mavenInstaller (  )  ;", "installUpload . setDescription (  \" Installs   the    ' archives '    artifacts   into   the   local   Maven   repository .  \"  )  ;", "}", "METHOD_END"], "methodName": ["configureInstall"], "fileName": "org.gradle.api.plugins.MavenPlugin"}, {"methodBody": ["METHOD_START", "{", "mavenScopeMappings . addMapping ( MavenPlugin . COMPILE _ PRIORITY ,    configurations . getByName ( API _ CONFIGURATION _ NAME )  ,    Conf 2 ScopeMappingContainer . COMPILE )  ;", "}", "METHOD_END"], "methodName": ["configureJavaLibraryScopeMappings"], "fileName": "org.gradle.api.plugins.MavenPlugin"}, {"methodBody": ["METHOD_START", "{", "mavenScopeMappings . addMapping ( MavenPlugin . COMPILE _ PRIORITY ,    configurations . getByName ( COMPILE _ CONFIGURATION _ NAME )  ,    Conf 2 ScopeMappingContainer . COMPILE )  ;", "mavenScopeMappings . addMapping ( MavenPlugin . RUNTIME _ PRIORITY ,    configurations . getByName ( RUNTIME _ CONFIGURATION _ NAME )  ,    Conf 2 ScopeMappingContainer . RUNTIME )  ;", "mavenScopeMappings . addMapping ( MavenPlugin . RUNTIME _ PRIORITY ,    configurations . getByName ( IMPLEMENTATION _ CONFIGURATION _ NAME )  ,    Conf 2 ScopeMappingContainer . RUNTIME )  ;", "mavenScopeMappings . addMapping ( MavenPlugin . TEST _ COMPILE _ PRIORITY ,    configurations . getByName ( TEST _ COMPILE _ CONFIGURATION _ NAME )  ,    Conf 2 ScopeMappingContainer . TEST )  ;", "mavenScopeMappings . addMapping ( MavenPlugin . TEST _ RUNTIME _ PRIORITY ,    configurations . getByName ( TEST _ RUNTIME _ CONFIGURATION _ NAME )  ,    Conf 2 ScopeMappingContainer . TEST )  ;", "mavenScopeMappings . addMapping ( MavenPlugin . TEST _ RUNTIME _ PRIORITY ,    configurations . getByName ( TEST _ IMPLEMENTATION _ CONFIGURATION _ NAME )  ,    Conf 2 ScopeMappingContainer . TEST )  ;", "}", "METHOD_END"], "methodName": ["configureJavaScopeMappings"], "fileName": "org.gradle.api.plugins.MavenPlugin"}, {"methodBody": ["METHOD_START", "{", "configurationActionContainer . add ( new   Action < Project >  (  )     {", "public   void   execute ( Project   project )     {", "Upload   uploadArchives    =    project . getTasks (  )  . withType ( Upload . class )  . findByName ( UPLOAD _ ARCHIVES _ TASK _ NAME )  ;", "if    ( uploadArchives    =  =    null )     {", "return ;", "}", "ConfigurationInternal   configuration    =     (  ( ConfigurationInternal )     ( uploadArchives . getConfiguration (  )  )  )  ;", "Module   module    =    configuration . getModule (  )  ;", "for    ( MavenResolver   resolver    :    uploadArchives . getRepositories (  )  . withType ( MavenResolver . class )  )     {", "MavenPom   pom    =    resolver . getPom (  )  ;", "ModuleVersionIdentifier   publicationId    =    moduleIdentifierFactory . moduleWithVersion (  ( pom . getGroupId (  )  . equals ( EMPTY _ PROJECT _ GROUP _ ID )     ?    module . getGroup (  )     :    pom . getGroupId (  )  )  ,     ( pom . getArtifactId (  )  . equals ( EMPTY _ PROJECT _ ARTIFACT _ ID )     ?    module . getName (  )     :    pom . getArtifactId (  )  )  ,     ( pom . getVersion (  )  . equals ( EMPTY _ PROJECT _ VERSION )     ?    module . getVersion (  )     :    pom . getVersion (  )  )  )  ;", "publicationRegistry . registerPublication ( project . getPath (  )  ,    new   DefaultProjectPublication ( Describables . withTypeAndName (  \" Maven   repository \"  ,    resolver . getName (  )  )  ,    publicationId ,    true )  )  ;", "}", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureUploadArchivesTask"], "fileName": "org.gradle.api.plugins.MavenPlugin"}, {"methodBody": ["METHOD_START", "{", "project . getTasks (  )  . withType ( Upload . class ,    new   Action < Upload >  (  )     {", "public   void   execute ( Upload   upload )     {", "RepositoryHandler   repositories    =    upload . getRepositories (  )  ;", "DefaultRepositoryHandler   handler    =     (  ( DefaultRepositoryHandler )     ( repositories )  )  ;", "DefaultMavenRepositoryHandlerConvention   repositoryConvention    =    new   DefaultMavenRepositoryHandlerConvention ( handler ,    deployerFactory )  ;", "new   DslObject ( repositories )  . getConvention (  )  . getPlugins (  )  . put (  \" maven \"  ,    repositoryConvention )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureUploadTasks"], "fileName": "org.gradle.api.plugins.MavenPlugin"}, {"methodBody": ["METHOD_START", "{", "mavenScopeMappings . addMapping ( MavenPlugin . PROVIDED _ COMPILE _ PRIORITY ,    configurations . getByName ( PROVIDED _ COMPILE _ CONFIGURATION _ NAME )  ,    Conf 2 ScopeMappingContainer . PROVIDED )  ;", "mavenScopeMappings . addMapping ( MavenPlugin . PROVIDED _ RUNTIME _ PRIORITY ,    configurations . getByName ( PROVIDED _ RUNTIME _ CONFIGURATION _ NAME )  ,    Conf 2 ScopeMappingContainer . PROVIDED )  ;", "}", "METHOD_END"], "methodName": ["configureWarScopeMappings"], "fileName": "org.gradle.api.plugins.MavenPlugin"}, {"methodBody": ["METHOD_START", "{", "return   mavenFactory . createMavenPomFactory ( project . getConfigurations (  )  ,    conf 2 ScopeMappings . getMappings (  )  ,    project . getFileResolver (  )  )  . create (  )  ;", "}", "METHOD_END"], "methodName": ["createMavenPom"], "fileName": "org.gradle.api.plugins.MavenPluginConvention"}, {"methodBody": ["METHOD_START", "{", "return   conf 2 ScopeMappings ;", "}", "METHOD_END"], "methodName": ["getConf2ScopeMappings"], "fileName": "org.gradle.api.plugins.MavenPluginConvention"}, {"methodBody": ["METHOD_START", "{", "if    (  ( pomDir )     =  =    null )     {", "return   new   File ( projectetBuildDir (  )  ,     \" poms \"  )  ;", "}", "return   projectetFileResolver (  )  . resolve ( pomDir )  ;", "}", "METHOD_END"], "methodName": ["getMavenPomDir"], "fileName": "org.gradle.api.plugins.MavenPluginConvention"}, {"methodBody": ["METHOD_START", "{", "MavenPom   pom    =    createMavenPom (  )  ;", "pom . setGroupId ( project . getGroup (  )  . toString (  )  )  ;", "pom . setArtifactId ( project . getName (  )  )  ;", "pom . setVersion ( project . getVersion (  )  . toString (  )  )  ;", "return   pom ;", "}", "METHOD_END"], "methodName": ["pom"], "fileName": "org.gradle.api.plugins.MavenPluginConvention"}, {"methodBody": ["METHOD_START", "{", "return   ConfigureUtil . configure ( configureClosure ,    pom (  )  )  ;", "}", "METHOD_END"], "methodName": ["pom"], "fileName": "org.gradle.api.plugins.MavenPluginConvention"}, {"methodBody": ["METHOD_START", "{", "MavenPom   pom    =    pom (  )  ;", "configureAction . execute ( pom )  ;", "return   pom ;", "}", "METHOD_END"], "methodName": ["pom"], "fileName": "org.gradle.api.plugins.MavenPluginConvention"}, {"methodBody": ["METHOD_START", "{", "this . conf 2 ScopeMappings    =    conf 2 ScopeMappings ;", "}", "METHOD_END"], "methodName": ["setConf2ScopeMappings"], "fileName": "org.gradle.api.plugins.MavenPluginConvention"}, {"methodBody": ["METHOD_START", "{", "setMavenPomDir (  (  ( Object )     ( pomDir )  )  )  ;", "}", "METHOD_END"], "methodName": ["setMavenPomDir"], "fileName": "org.gradle.api.plugins.MavenPluginConvention"}, {"methodBody": ["METHOD_START", "{", "this . pomDir    =    pomDir ;", "}", "METHOD_END"], "methodName": ["setMavenPomDir"], "fileName": "org.gradle.api.plugins.MavenPluginConvention"}, {"methodBody": ["METHOD_START", "{", "return   addFilter ( name ,    toFilter ( filter )  )  ;", "}", "METHOD_END"], "methodName": ["addFilter"], "fileName": "org.gradle.api.publication.maven.internal.BasePomFilterContainer"}, {"methodBody": ["METHOD_START", "{", "if    (  ( name    =  =    null )     |  |     ( publishFilter    =  =    null )  )     {", "throw   new   InvalidUserDataException (  \" Name   and   Filter   must   not   be   null .  \"  )  ;", "}", "MavenPom   pom    =    mavenPomFactory . create (  )  ;", "pomFilters . put ( name ,    new   Default ( name ,    pom ,    publishFilter )  )  ;", "return   pom ;", "}", "METHOD_END"], "methodName": ["addFilter"], "fileName": "org.gradle.api.publication.maven.internal.BasePomFilterContainer"}, {"methodBody": ["METHOD_START", "{", "setFilter ( toFilter ( filter )  )  ;", "}", "METHOD_END"], "methodName": ["filter"], "fileName": "org.gradle.api.publication.maven.internal.BasePomFilterContainer"}, {"methodBody": ["METHOD_START", "{", "if    ( name    =  =    null )     {", "throw   new   InvalidUserDataException (  \" Name   must   not   be   null .  \"  )  ;", "}", "return   ps . get ( name )  . getFilter (  )  ;", "}", "METHOD_END"], "methodName": ["filter"], "fileName": "org.gradle.api.publication.maven.internal.BasePomFilterContainer"}, {"methodBody": ["METHOD_START", "{", "Iterable < PomFilter >    activeArtifactPoms ;", "if    (  (  ( pomFilters . size (  )  )     =  =     0  )     &  &     (  ( getDefaultPomFilter (  )  )     !  =    null )  )     {", "activeArtifactPoms    =    WrapUtil . toSet ( getDefaultPomFilter (  )  )  ;", "} else    {", "activeArtifactPoms    =    pomFilters . values (  )  ;", "}", "return   activeArtifactPoms ;", "}", "METHOD_END"], "methodName": ["getActivePomFilters"], "fileName": "org.gradle.api.publication.maven.internal.BasePomFilterContainer"}, {"methodBody": ["METHOD_START", "{", "if    (  ( defaultPomFilter )     =  =    null )     {", "defaultPomFilter    =    new   DefaultPomFilter (  . DEFAULT _ ARTIFACT _ POM _ NAME ,    mavenPomFactory . create (  )  ,    PublishFilter . ALWAYS _ ACCEPT )  ;", "}", "return   defaultPomFilter ;", "}", "METHOD_END"], "methodName": ["getDefaultPomFilter"], "fileName": "org.gradle.api.publication.maven.internal.BasePomFilterContainer"}, {"methodBody": ["METHOD_START", "{", "return   getDefaultPomFilter (  )  . getFilter (  )  ;", "}", "METHOD_END"], "methodName": ["getFilter"], "fileName": "org.gradle.api.publication.maven.internal.BasePomFilterContainer"}, {"methodBody": ["METHOD_START", "{", "return   mavenPomFactory ;", "}", "METHOD_END"], "methodName": ["getMavenPomFactory"], "fileName": "org.gradle.api.publication.maven.internal.BasePomFilterContainer"}, {"methodBody": ["METHOD_START", "{", "return   getDefaultPomFilter (  )  . getPomTemplate (  )  ;", "}", "METHOD_END"], "methodName": ["getPom"], "fileName": "org.gradle.api.publication.maven.internal.BasePomFilterContainer"}, {"methodBody": ["METHOD_START", "{", "return   pomFilters ;", "}", "METHOD_END"], "methodName": ["getPomFilters"], "fileName": "org.gradle.api.publication.maven.internal.BasePomFilterContainer"}, {"methodBody": ["METHOD_START", "{", "return   new   BasePomFilterContainer ( mavenPomFactory )  ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.gradle.api.publication.maven.internal.BasePomFilterContainer"}, {"methodBody": ["METHOD_START", "{", "return   ConfigureUtil . configure ( configureClosure ,    getPom (  )  )  ;", "}", "METHOD_END"], "methodName": ["pom"], "fileName": "org.gradle.api.publication.maven.internal.BasePomFilterContainer"}, {"methodBody": ["METHOD_START", "{", "if    ( name    =  =    null )     {", "throw   new   InvalidUserDataException (  \" Name   must   not   be   null .  \"  )  ;", "}", "return   ps . get ( name )  . getPomTemplate (  )  ;", "}", "METHOD_END"], "methodName": ["pom"], "fileName": "org.gradle.api.publication.maven.internal.BasePomFilterContainer"}, {"methodBody": ["METHOD_START", "{", "return   ConfigureUtil . configure ( configureClosure ,    pom ( name )  )  ;", "}", "METHOD_END"], "methodName": ["pom"], "fileName": "org.gradle.api.publication.maven.internal.BasePomFilterContainer"}, {"methodBody": ["METHOD_START", "{", "this . defaultPomFilter    =    defaultPomFilter ;", "}", "METHOD_END"], "methodName": ["setDefaultPomFilter"], "fileName": "org.gradle.api.publication.maven.internal.BasePomFilterContainer"}, {"methodBody": ["METHOD_START", "{", "getDefaultPomFilter (  )  . setFilter ( defaultFilter )  ;", "}", "METHOD_END"], "methodName": ["setFilter"], "fileName": "org.gradle.api.publication.maven.internal.BasePomFilterContainer"}, {"methodBody": ["METHOD_START", "{", "getDefaultPomFilter (  )  . setPomTemplate ( defaultPom )  ;", "}", "METHOD_END"], "methodName": ["setPom"], "fileName": "org.gradle.api.publication.maven.internal.BasePomFilterContainer"}, {"methodBody": ["METHOD_START", "{", "return    (  ( PublishFilter )     ( DefaultGroovyMethods . asType ( filter ,    PublishFilter . class )  )  )  ;", "}", "METHOD_END"], "methodName": ["toFilter"], "fileName": "org.gradle.api.publication.maven.internal.BasePomFilterContainer"}, {"methodBody": ["METHOD_START", "{", "MavenPom   pom    =    pomFilterContainer . addFilter ( BasePomFilterContainerTest . TEST _ NAME ,    publishFilterMock )  ;", "assertSame ( pom ,    pomMock )  ;", "assertSame ( pomMock ,    pomFilterContainer . pom ( BasePomFilterContainerTest . TEST _ NAME )  )  ;", "assertSame ( publishFilterMock ,    pomFilterContainer . filter ( BasePomFilterContainerTest . TEST _ NAME )  )  ;", "}", "METHOD_END"], "methodName": ["addFilter"], "fileName": "org.gradle.api.publication.maven.internal.BasePomFilterContainerTest"}, {"methodBody": ["METHOD_START", "{", "pomFilterContainer . addFilter (  \" somename \"  ,     (  ( PublishFilter )     ( null )  )  )  ;", "}", "METHOD_END"], "methodName": ["addFilterWithNullFilter"], "fileName": "org.gradle.api.publication.maven.internal.BasePomFilterContainerTest"}, {"methodBody": ["METHOD_START", "{", "pomFilterContainer . addFilter ( null ,    PublishFilter . ALWAYS _ ACCEPT )  ;", "}", "METHOD_END"], "methodName": ["addFilterWithNullName"], "fileName": "org.gradle.api.publication.maven.internal.BasePomFilterContainerTest"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( expectedName . equals ( pomFilter . getName (  )  )  )  )     {", "return   false ;", "}", "if    (  !  ( expectedPublishFilter    =  =     ( pomFilter . getFilter (  )  )  )  )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["areEqualPomFilter"], "fileName": "org.gradle.api.publication.maven.internal.BasePomFilterContainerTest"}, {"methodBody": ["METHOD_START", "{", "for    ( PomFilter   pomFilter    :    filters )     {", "if    ( areEqualPomFilter ( expectedName ,    expectedPublishFilter ,    pomFilter )  )     {", "return ;", "}", "}", "fail (  \" Not   in   Set \"  )  ;", "}", "METHOD_END"], "methodName": ["checkIfInSet"], "fileName": "org.gradle.api.publication.maven.internal.BasePomFilterContainerTest"}, {"methodBody": ["METHOD_START", "{", "return   new   BasePomFilterContainer ( mavenPomFactoryMock )  ;", "}", "METHOD_END"], "methodName": ["createPomFilterContainer"], "fileName": "org.gradle.api.publication.maven.internal.BasePomFilterContainerTest"}, {"methodBody": ["METHOD_START", "{", "PublishFilter   filter 1     =    context . mock ( PublishFilter . class ,     \" filter 1  \"  )  ;", "PublishFilter   filter 2     =    context . mock ( PublishFilter . class ,     \" filter 2  \"  )  ;", "String   testName 1     =     \" name 1  \"  ;", "String   testName 2     =     \" name 2  \"  ;", "p . addFilter ( testName 1  ,    filter 1  )  ;", "p . addFilter ( testName 2  ,    filter 2  )  ;", "Set < PomFilter >    actualActiveFilters    =    Sets . newLinkedHashSet ( p . getActivePomFilters (  )  )  ;", "assertEquals (  2  ,    actualActiveFilters . size (  )  )  ;", "checkIfInSet ( testName 1  ,    filter 1  ,    actualActiveFilters )  ;", "checkIfInSet ( testName 2  ,    filter 2  ,    actualActiveFilters )  ;", "}", "METHOD_END"], "methodName": ["getActivePomFiltersWithAdditionalFilters"], "fileName": "org.gradle.api.publication.maven.internal.BasePomFilterContainerTest"}, {"methodBody": ["METHOD_START", "{", "Iterator < PomFilter >    pomFilterIterator    =    pomFilterContainer . getActivePomFilters (  )  . iterator (  )  ;", "assertSame ( pomFilterMock ,    pomFilterIterator . next (  )  )  ;", "assertFalse ( pomFilterIterator . hasNext (  )  )  ;", "}", "METHOD_END"], "methodName": ["getActivePomFiltersWithDefault"], "fileName": "org.gradle.api.publication.maven.internal.BasePomFilterContainerTest"}, {"methodBody": ["METHOD_START", "{", "context . checking ( new   Expectations (  )     {", "{", "allowing ( pomFilterMock )  . getFilter (  )  ;", "will ( returnValue ( publishFilterMock )  )  ;", "}", "}  )  ;", "assertSame ( publishFilterMock ,    p . getFilter (  )  )  ;", "}", "METHOD_END"], "methodName": ["getFilter"], "fileName": "org.gradle.api.publication.maven.internal.BasePomFilterContainerTest"}, {"methodBody": ["METHOD_START", "{", "pomFilterContainer . filter (  (  ( String )     ( null )  )  )  ;", "}", "METHOD_END"], "methodName": ["getFilterWithNullName"], "fileName": "org.gradle.api.publication.maven.internal.BasePomFilterContainerTest"}, {"methodBody": ["METHOD_START", "{", "context . checking ( new   Expectations (  )     {", "{", "allowing ( pomFilterMock )  . getPomTemplate (  )  ;", "will ( returnValue ( pomMock )  )  ;", "}", "}  )  ;", "assertSame ( pomMock ,    p . getPom (  )  )  ;", "}", "METHOD_END"], "methodName": ["getPom"], "fileName": "org.gradle.api.publication.maven.internal.BasePomFilterContainerTest"}, {"methodBody": ["METHOD_START", "{", "pomFilterContainer . pom (  (  ( String )     ( null )  )  )  ;", "}", "METHOD_END"], "methodName": ["getPomWithNullName"], "fileName": "org.gradle.api.publication.maven.internal.BasePomFilterContainerTest"}, {"methodBody": ["METHOD_START", "{", "pomFilterContainer    =    new   BasePomFilterContainer ( mavenPomFactoryMock )  ;", "assertNotNull ( pomFilterContainer . getPom (  )  )  ;", "assertSame ( PublishFilter . ALWAYS _ ACCEPT ,    pomFilterContainer . getFilter (  )  )  ;", "}", "METHOD_END"], "methodName": ["init"], "fileName": "org.gradle.api.publication.maven.internal.BasePomFilterContainerTest"}, {"methodBody": ["METHOD_START", "{", "context . checking ( new   Expectations (  )     {", "{", "one ( pomFilterMock )  . setFilter ( publishFilterMock )  ;", "}", "}  )  ;", "p . setFilter ( publishFilterMock )  ;", "}", "METHOD_END"], "methodName": ["setFilter"], "fileName": "org.gradle.api.publication.maven.internal.BasePomFilterContainerTest"}, {"methodBody": ["METHOD_START", "{", "context . checking ( new   Expectations (  )     {", "{", "allowing ( pomFilterMock )  . setPomTemplate ( pomMock )  ;", "}", "}  )  ;", "p . setPom ( pomMock )  ;", "}", "METHOD_END"], "methodName": ["setPom"], "fileName": "org.gradle.api.publication.maven.internal.BasePomFilterContainerTest"}, {"methodBody": ["METHOD_START", "{", "pomFilterMock    =    context . mock ( PomFilter . class )  ;", "pomMock    =    context . mock ( MavenPom . class )  ;", "publishFilterMock    =    context . mock ( PublishFilter . class )  ;", "context . checking ( new   Expectations (  )     {", "{", "allowing ( mavenPomFactoryMock )  . create (  )  ;", "will ( returnValue ( pomMock )  )  ;", "}", "}  )  ;", "pomFilterContainer    =    creat (  )  ;", "pomFilterContainer . setDefaultPomFilter ( pomFilterMock )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.gradle.api.publication.maven.internal.BasePomFilterContainerTest"}, {"methodBody": ["METHOD_START", "{", "throwExceptionIfArtifactOrSrcIsNull ( artifact ,    src )  ;", "PublishArtifact   publishArtifact    =    new    . MavenArtifact ( artifact ,    src )  ;", ". ArtifactKey   artifactKey    =    new    . ArtifactKey ( publishArtifact )  ;", "if    ( this . artifacts . containsKey ( artifactKey )  )     {", "throw   new   InvalidUserDataException ( String . format (  \" A   POM   cannot   have   multiple   artifacts   with   the   same   type   and   classifier .    Already   have    % s ,    trying   to   add    % s .  \"  ,    this . artifacts . get ( artifactKey )  ,    publishArtifact )  )  ;", "}", "if    (  ( publishArtifact . getClassifier (  )  )     !  =    null )     {", "addArtifact ( publishArtifact )  ;", "assignArtifactValuesToPom ( artifact ,    pom ,    false )  ;", "return ;", "}", "if    (  ( this . artifact )     !  =    null )     {", "if    (  !  (  . PACKAGING _ TYPES . contains ( artifact . getType (  )  )  )  )     {", "addArtifact ( publishArtifact )  ;", "return ;", "}", "if    (  . PACKAGING _ TYPES . contains ( this . artifact . getType (  )  )  )     {", "throw   new   InvalidUserDataException (  (  (  (  (  \" A   POM   can   not   have   multiple   main   artifacts .     \"     +     \" Already   have    \"  )     +     ( this . artifact )  )     +     \"  ,    trying   to   add    \"  )     +    publishArtifact )  )  ;", "}", "addArtifact ( this . artifact )  ;", "}", "this . artifact    =    publishArtifact ;", "this . artifacts . put ( artifactKey ,    publishArtifact )  ;", "assignArtifactValuesToPom ( artifact ,    pom ,    true )  ;", "}", "METHOD_END"], "methodName": ["addArtifact"], "fileName": "org.gradle.api.publication.maven.internal.DefaultArtifactPom"}, {"methodBody": ["METHOD_START", "{", "classifiers . add ( artifact )  ;", "artifacts . put ( new    . ArtifactKey ( artifact )  ,    artifact )  ;", "}", "METHOD_END"], "methodName": ["addArtifact"], "fileName": "org.gradle.api.publication.maven.internal.DefaultArtifactPom"}, {"methodBody": ["METHOD_START", "{", "if    ( pom . getGroupId (  )  . equals ( EMPTY _ PROJECT _ GROUP _ ID )  )     {", "pom . setGroupId ( artifact . getModuleRevisionId (  )  . getOrganisation (  )  )  ;", "}", "if    ( pom . geId (  )  . equals ( EMPTY _ PROJECT _ ARTIFACT _ ID )  )     {", "pom . seId ( artifact . getName (  )  )  ;", "}", "if    ( pom . getVersion (  )  . equals ( EMPTY _ PROJECT _ VERSION )  )     {", "pom . setVersion ( artifact . getModuleRevisionId (  )  . getRevision (  )  )  ;", "}", "if    ( setType )     {", "pom . setPackaging ( artifact . getType (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["assignArtifactValuesToPom"], "fileName": "org.gradle.api.publication.maven.internal.DefaultArtifactPom"}, {"methodBody": ["METHOD_START", "{", "return   artifact ;", "}", "METHOD_END"], "methodName": ["getArtifact"], "fileName": "org.gradle.api.publication.maven.internal.DefaultArtifactPom"}, {"methodBody": ["METHOD_START", "{", "return   Collections . unmodifiableSet ( classifiers )  ;", "}", "METHOD_END"], "methodName": ["getAttachedArtifacts"], "fileName": "org.gradle.api.publication.maven.internal.DefaultArtifactPom"}, {"methodBody": ["METHOD_START", "{", "return   artifact . getExtraAttribute (  \" classifier \"  )  ;", "}", "METHOD_END"], "methodName": ["getClassifier"], "fileName": "org.gradle.api.publication.maven.internal.DefaultArtifactPom"}, {"methodBody": ["METHOD_START", "{", "return   pom ;", "}", "METHOD_END"], "methodName": ["getPom"], "fileName": "org.gradle.api.publication.maven.internal.DefaultArtifactPom"}, {"methodBody": ["METHOD_START", "{", "if    ( artifact    =  =    null )     {", "throw   new   InvalidUserDataException (  \"    must   not   be   null .  \"  )  ;", "}", "if    ( src    =  =    null )     {", "throw   new   InvalidUserDataException (  \" Src   file   must   not   be   null .  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["throwExceptionIfArtifactOrSrcIsNull"], "fileName": "org.gradle.api.publication.maven.internal.DefaultArtifactPom"}, {"methodBody": ["METHOD_START", "{", "getPom (  )  . writeTo ( pomFile )  ;", "return   new    . PomArtifact ( pomFile )  ;", "}", "METHOD_END"], "methodName": ["writePom"], "fileName": "org.gradle.api.publication.maven.internal.DefaultArtifactPom"}, {"methodBody": ["METHOD_START", "{", "if    (  ( artifact    =  =    null )     |  |     ( src    =  =    null )  )     {", "throw   new   InvalidUserDataException (  \" Artifact   or   source   file   must   not   be   null !  \"  )  ;", "}", "for    ( PomFilter   activePomFilter    :    pomFilterContainer . getActivePomFilters (  )  )     {", "if    ( activePomFilter . getFilter (  )  . accept ( artifact ,    src )  )     {", "if    (  ( artifactPoms . get ( activePomFilter . getName (  )  )  )     =  =    null )     {", "artifactPoms . put ( activePomFilter . getName (  )  ,    artifactPomFactory . create ( activePomFilter . getPomTemplate (  )  )  )  ;", "}", "artifactPoms . get ( activePomFilter . getName (  )  )  . addArtifact ( artifact ,    src )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addArtifact"], "fileName": "org.gradle.api.publication.maven.internal.DefaultArtifactPomContainer"}, {"methodBody": ["METHOD_START", "{", "Set < MavenDeployment >    mavenDeployments    =    new   HashSet < MavenDeployment >  (  )  ;", "for    ( String   activeName    :    artifactPoms . keySet (  )  )     {", "active    =    artifactPoms . get ( activeName )  ;", "File   pomFile    =    createPomFile ( activeName )  ;", "PublishArtifact   pomArtifact    =    active . writePom ( pomFile )  ;", "mavenDeployments . add ( new   DefaultMavenDeployment ( pomArtifact ,    active . getArtifact (  )  ,    active . getAttachedArtifacts (  )  )  )  ;", "}", "return   mavenDeployments ;", "}", "METHOD_END"], "methodName": ["createDeployableFilesInfos"], "fileName": "org.gradle.api.publication.maven.internal.DefaultArtifactPomContainer"}, {"methodBody": ["METHOD_START", "{", "return   new   File ( pomMetaInfoProvider . getMavenPomDir (  )  ,     (  (  \" pom -  \"     +    artifactPomName )     +     \"  . xml \"  )  )  ;", "}", "METHOD_END"], "methodName": ["createPomFile"], "fileName": "org.gradle.api.publication.maven.internal.DefaultArtifactPomContainer"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultArtifactPom ( pom )  ;", "}", "METHOD_END"], "methodName": ["createArtifactPom"], "fileName": "org.gradle.api.publication.maven.internal.DefaultArtifactPomFactory"}, {"methodBody": ["METHOD_START", "{", "File   classifierFile    =    new   File (  \" someClassifierFile \"  )  ;", "Artifact   classifierArtifact    =    createTestArtifact (  \" someName \"  ,     \" javadoc \"  )  ;", "a . addArtifact ( classifierArtifact ,    classifierFile )  ;", "a . addArtifact ( classifierArtifact ,    classifierFile )  ;", "}", "METHOD_END"], "methodName": ["addClassifierTwiceShouldThrowInvalidUserDataEx"], "fileName": "org.gradle.api.publication.maven.internal.DefaultArtifactPomTest"}, {"methodBody": ["METHOD_START", "{", "Artifact   mainArtifact    =    createTestArtifact (  \" someName \"  ,    null ,     \" mainPackaging \"  )  ;", "File   mainFile    =    new   File (  \" someFile \"  )  ;", "a . addArtifact ( mainArtifact ,    mainFile )  ;", "a . addArtifact ( mainArtifact ,    mainFile )  ;", "}", "METHOD_END"], "methodName": ["addMainArtifactTwiceShouldThrowInvalidUserDataEx"], "fileName": "org.gradle.api.publication.maven.internal.DefaultArtifactPomTest"}, {"methodBody": ["METHOD_START", "{", "try    {", "a . addArtifact ( artifact ,    file )  ;", "fail (  )  ;", "}    catch    ( InvalidUserDataException   e )     {", "assertThat ( e . getMessage (  )  ,    startsWith (  \" A   POM   cannot   have   multiple   artifacts   with   the   same   type   and   classifier .  \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertIsDuplicate"], "fileName": "org.gradle.api.publication.maven.internal.DefaultArtifactPomTest"}, {"methodBody": ["METHOD_START", "{", "Artifact   mainArtifact    =    createTestArtifact (  \" someName \"  ,    null )  ;", "a . addArtifact ( mainArtifact ,    new   File (  \" someFile \"  )  )  ;", "assertIsDuplicate ( mainArtifact ,    new   File (  \" someFile \"  )  )  ;", "assertIsDuplicate ( mainArtifact ,    new   File (  \" otherFile \"  )  )  ;", "assertIsDuplicate ( createTestArtifact (  \" otherName \"  ,    null )  ,    new   File (  \" otherFile \"  )  )  ;", "Artifact   classifierArtifact    =    createTestArtifact (  \" someName \"  ,     \" classifier \"  )  ;", "a . addArtifact ( classifierArtifact ,    new   File (  \" classifierFile \"  )  )  ;", "assertIsDuplicate ( classifierArtifact ,    new   File (  \" someFile \"  )  )  ;", "assertIsDuplicate ( classifierArtifact ,    new   File (  \" otherFile \"  )  )  ;", "assertIsDuplicate ( createTestArtifact (  \" otherName \"  ,     \" classifier \"  )  ,    new   File (  \" otherFile \"  )  )  ;", "}", "METHOD_END"], "methodName": ["cannotAddMultipleArtifactsWithTheSameTypeAndClassifier"], "fileName": "org.gradle.api.publication.maven.internal.DefaultArtifactPomTest"}, {"methodBody": ["METHOD_START", "{", "return   createTestArtifact ( name ,    classifier ,     \" jar \"  )  ;", "}", "METHOD_END"], "methodName": ["createTestArtifact"], "fileName": "org.gradle.api.publication.maven.internal.DefaultArtifactPomTest"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    extraAttributes    =    new   HashMap < String ,    String >  (  )  ;", "if    ( classifier    !  =    null )     {", "extraAttributes . put ( CLASSIFIER ,    classifier )  ;", "}", "return   new   descriptor ( IvyUtil . createModuleRevisionId (  \" org \"  ,    name ,     \"  1  .  0  \"  )  ,    null ,    name ,    type ,    type ,    extraAttributes )  ;", "}", "METHOD_END"], "methodName": ["createTestArtifact"], "fileName": "org.gradle.api.publication.maven.internal.DefaultArtifactPomTest"}, {"methodBody": ["METHOD_START", "{", "Artifact   mainArtifact    =    createTestArtifact (  \" someName \"  ,    null ,     \" mainPackaging \"  )  ;", "File   mainFile    =    new   File (  \" someFile \"  )  ;", "testPom . setArtifactId (  \" customArtifactId \"  )  ;", "testPom . setGroupId (  \" customGroupId \"  )  ;", "testPom . setVersion (  \" customVersion \"  )  ;", "testPom . setPackaging (  \" customPackaging \"  )  ;", "a . addArtifact ( mainArtifact ,    mainFile )  ;", "assertThat ( a . getArtifact (  )  . getName (  )  ,    equalTo (  \" customArtifactId \"  )  )  ;", "assertThat ( a . getArtifact (  )  . getExtension (  )  ,    equalTo (  \" mainPackaging \"  )  )  ;", "assertThat ( a . getArtifact (  )  . getType (  )  ,    equalTo (  \" mainPackaging \"  )  )  ;", "assertThat ( a . getArtifact (  )  . getClassifier (  )  ,    nullValue (  )  )  ;", "assertThat ( a . getArtifact (  )  . getFile (  )  ,    equalTo ( mainFile )  )  ;", "assertThat ( a . getPom (  )  . getGroupId (  )  ,    equalTo (  \" customGroupId \"  )  )  ;", "assertThat ( a . getPom (  )  . getArtifactId (  )  ,    equalTo (  \" customArtifactId \"  )  )  ;", "assertThat ( a . getPom (  )  . getVersion (  )  ,    equalTo (  \" customVersion \"  )  )  ;", "assertThat ( a . getPom (  )  . getPackaging (  )  ,    equalTo (  \" mainPackaging \"  )  )  ;", "}", "METHOD_END"], "methodName": ["initWithCustomPomSettings"], "fileName": "org.gradle.api.publication.maven.internal.DefaultArtifactPomTest"}, {"methodBody": ["METHOD_START", "{", "File   classifierFile    =    new   File (  \" someClassifierFile \"  )  ;", "Artifact   classifierArtifact    =    createTestArtifact (  \" someName \"  ,     \" javadoc \"  ,     \" zip \"  )  ;", "a . addArtifact ( classifierArtifact ,    classifierFile )  ;", "assertThat ( a . getArtifact (  )  ,    nullValue (  )  )  ;", "PublishArtifact   artifact    =    singleItem ( a . getAttachedArtifacts (  )  )  ;", "assertThat ( artifact . getName (  )  ,    equalTo (  \" someName \"  )  )  ;", "assertThat ( artifact . getExtension (  )  ,    equalTo (  \" zip \"  )  )  ;", "assertThat ( artifact . getType (  )  ,    equalTo (  \" zip \"  )  )  ;", "assertThat ( artifact . getClassifier (  )  ,    equalTo (  \" javadoc \"  )  )  ;", "assertThat ( artifact . getFile (  )  ,    equalTo ( classifierFile )  )  ;", "assertThat ( a . getPom (  )  . getGroupId (  )  ,    equalTo (  \" org \"  )  )  ;", "assertThat ( a . getPom (  )  . getArtifactId (  )  ,    equalTo (  \" someName \"  )  )  ;", "assertThat ( a . getPom (  )  . getVersion (  )  ,    equalTo (  \"  1  .  0  \"  )  )  ;", "assertThat ( a . getPom (  )  . getPackaging (  )  ,    equalTo (  \" jar \"  )  )  ;", "}", "METHOD_END"], "methodName": ["pomWithClassifierArtifactsOnly"], "fileName": "org.gradle.api.publication.maven.internal.DefaultArtifactPomTest"}, {"methodBody": ["METHOD_START", "{", "Artifact   mainArtifact    =    createTestArtifact (  \" someName \"  ,    null ,     \" mainPackaging \"  )  ;", "File   mainFile    =    new   File (  \" someFile \"  )  ;", "a . addArtifact ( mainArtifact ,    mainFile )  ;", "assertThat ( a . getArtifact (  )  . getName (  )  ,    equalTo (  \" someName \"  )  )  ;", "assertThat ( a . getArtifact (  )  . getExtension (  )  ,    equalTo (  \" mainPackaging \"  )  )  ;", "assertThat ( a . getArtifact (  )  . getType (  )  ,    equalTo (  \" mainPackaging \"  )  )  ;", "assertThat ( a . getArtifact (  )  . getClassifier (  )  ,    nullValue (  )  )  ;", "assertThat ( a . getArtifact (  )  . getFile (  )  ,    equalTo ( mainFile )  )  ;", "assertThat ( a . getPom (  )  . getGroupId (  )  ,    equalTo (  \" org \"  )  )  ;", "assertThat ( a . getPom (  )  . getArtifactId (  )  ,    equalTo (  \" someName \"  )  )  ;", "assertThat ( a . getPom (  )  . getVersion (  )  ,    equalTo (  \"  1  .  0  \"  )  )  ;", "assertThat ( a . getPom (  )  . getPackaging (  )  ,    equalTo (  \" mainPackaging \"  )  )  ;", "}", "METHOD_END"], "methodName": ["pomWithMainArtifact"], "fileName": "org.gradle.api.publication.maven.internal.DefaultArtifactPomTest"}, {"methodBody": ["METHOD_START", "{", "Artifact   mainArtifact    =    createTestArtifact (  \" someName \"  ,    null ,     \" mainPackaging \"  )  ;", "File   mainFile    =    new   File (  \" someFile \"  )  ;", "Artifact   classifierArtifact    =    createTestArtifact (  \" otherName \"  ,     \" javadoc \"  ,     \" zip \"  )  ;", "File   classifierFile    =    new   File (  \" someClassifierFile \"  )  ;", "a . addArtifact ( mainArtifact ,    mainFile )  ;", "a . addArtifact ( classifierArtifact ,    classifierFile )  ;", "assertThat ( a . getArtifact (  )  . getName (  )  ,    equalTo (  \" someName \"  )  )  ;", "assertThat ( a . getArtifact (  )  . getExtension (  )  ,    equalTo (  \" mainPackaging \"  )  )  ;", "assertThat ( a . getArtifact (  )  . getType (  )  ,    equalTo (  \" mainPackaging \"  )  )  ;", "assertThat ( a . getArtifact (  )  . getClassifier (  )  ,    nullValue (  )  )  ;", "assertThat ( a . getArtifact (  )  . getFile (  )  ,    equalTo ( mainFile )  )  ;", "PublishArtifact   artifact    =    singleItem ( a . getAttachedArtifacts (  )  )  ;", "assertThat ( artifact . getName (  )  ,    equalTo (  \" someName \"  )  )  ;", "assertThat ( artifact . getExtension (  )  ,    equalTo (  \" zip \"  )  )  ;", "assertThat ( artifact . getType (  )  ,    equalTo (  \" zip \"  )  )  ;", "assertThat ( artifact . getClassifier (  )  ,    equalTo (  \" javadoc \"  )  )  ;", "assertThat ( artifact . getFile (  )  ,    equalTo ( classifierFile )  )  ;", "assertThat ( a . getPom (  )  . getGroupId (  )  ,    equalTo (  \" org \"  )  )  ;", "assertThat ( a . getPom (  )  . getArtifactId (  )  ,    equalTo (  \" someName \"  )  )  ;", "assertThat ( a . getPom (  )  . getVersion (  )  ,    equalTo (  \"  1  .  0  \"  )  )  ;", "assertThat ( a . getPom (  )  . getPackaging (  )  ,    equalTo (  \" mainPackaging \"  )  )  ;", "}", "METHOD_END"], "methodName": ["pomWithMainArtifactAndClassifierArtifacts"], "fileName": "org.gradle.api.publication.maven.internal.DefaultArtifactPomTest"}, {"methodBody": ["METHOD_START", "{", "Artifact   mainArtifact    =    createTestArtifact (  \" someName \"  ,    null ,     \" mainPackaging \"  )  ;", "File   mainFile    =    new   File (  \" someFile \"  )  ;", "File   metadataFile    =    new   File (  \" someMetadataFile \"  )  ;", "Artifact   metadataArtifact    =    createTestArtifact (  \" otherName \"  ,    null ,     \" sometype \"  )  ;", "a . addArtifact ( mainArtifact ,    mainFile )  ;", "a . addArtifact ( metadataArtifact ,    metadataFile )  ;", "assertThat ( a . getArtifact (  )  . getName (  )  ,    equalTo (  \" someName \"  )  )  ;", "assertThat ( a . getArtifact (  )  . getExtension (  )  ,    equalTo (  \" mainPackaging \"  )  )  ;", "assertThat ( a . getArtifact (  )  . getType (  )  ,    equalTo (  \" mainPackaging \"  )  )  ;", "assertThat ( a . getArtifact (  )  . getClassifier (  )  ,    nullValue (  )  )  ;", "assertThat ( a . getArtifact (  )  . getFile (  )  ,    equalTo ( mainFile )  )  ;", "PublishArtifact   artifact    =    singleItem ( a . getAttachedArtifacts (  )  )  ;", "assertThat ( artifact . getName (  )  ,    equalTo (  \" someName \"  )  )  ;", "assertThat ( artifact . getExtension (  )  ,    equalTo (  \" sometype \"  )  )  ;", "assertThat ( artifact . getType (  )  ,    equalTo (  \" sometype \"  )  )  ;", "assertThat ( artifact . getClassifier (  )  ,    nullValue (  )  )  ;", "assertThat ( artifact . getFile (  )  ,    equalTo ( metadataFile )  )  ;", "assertThat ( a . getPom (  )  . getGroupId (  )  ,    equalTo (  \" org \"  )  )  ;", "assertThat ( a . getPom (  )  . getArtifactId (  )  ,    equalTo (  \" someName \"  )  )  ;", "assertThat ( a . getPom (  )  . getVersion (  )  ,    equalTo (  \"  1  .  0  \"  )  )  ;", "assertThat ( a . getPom (  )  . getPackaging (  )  ,    equalTo (  \" mainPackaging \"  )  )  ;", "}", "METHOD_END"], "methodName": ["pomWithMainArtifactAndMetadataArtifacts"], "fileName": "org.gradle.api.publication.maven.internal.DefaultArtifactPomTest"}, {"methodBody": ["METHOD_START", "{", "testPom    =    new   DefaultMavenPom ( context . mock ( ConfigurationContainer . class )  ,    context . mock ( Conf 2 ScopeMappingContainer . class )  ,    context . mock ( PomDependenciesConverter . class )  ,    context . mock ( FileResolver . class )  )  ;", "artifactPom    =    new    ( testPom )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.gradle.api.publication.maven.internal.DefaultArtifactPomTest"}, {"methodBody": ["METHOD_START", "{", "List < T >    elements    =    newArrayList ( collection )  ;", "assertThat ( elements . size (  )  ,    equalTo (  1  )  )  ;", "return   elements . get (  0  )  ;", "}", "METHOD_END"], "methodName": ["singleItem"], "fileName": "org.gradle.api.publication.maven.internal.DefaultArtifactPomTest"}, {"methodBody": ["METHOD_START", "{", "final   MavenPom   mavenPomMock    =    context . mock ( MavenPom . class )  ;", "artifactPom    =    new    ( mavenPomMock )  ;", "final   File   somePomFile    =    new   File ( tmpDir . getTestDirectory (  )  ,     \" someDir / somePath \"  )  ;", "context . checking ( new   Expectations (  )     {", "{", "allowing ( mavenPomMock )  . getArtifactId (  )  ;", "will ( returnValue (  \" artifactId \"  )  )  ;", "oneOf ( mavenPomMock )  . writeTo ( with ( any ( FileOutputStream . class )  )  )  ;", "}", "}  )  ;", "PublishArtifact   artifact    =    artifactPom . writePom ( somePomFile )  ;", "assertThat ( artifact . getName (  )  ,    equalTo (  \" artifactId \"  )  )  ;", "assertThat ( artifact . getType (  )  ,    equalTo (  \" pom \"  )  )  ;", "assertThat ( artifact . getExtension (  )  ,    equalTo (  \" pom \"  )  )  ;", "assertThat ( artifact . getClassifier (  )  ,    nullValue (  )  )  ;", "assertThat ( artifact . getFile (  )  ,    equalTo ( somePomFile )  )  ;", "}", "METHOD_END"], "methodName": ["writePom"], "fileName": "org.gradle.api.publication.maven.internal.DefaultArtifactPomTest"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultArtifactPomContainer ( pomMetaInfoProvider ,    filterContainer ,    pomFactory )  ;", "}", "METHOD_END"], "methodName": ["createArtifactPomContainer"], "fileName": "org.gradle.api.publication.maven.internal.DefaultDeployerFactory"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultArtifactPomFactory (  )  ;", "}", "METHOD_END"], "methodName": ["createArtifactPomFactory"], "fileName": "org.gradle.api.publication.maven.internal.DefaultDeployerFactory"}, {"methodBody": ["METHOD_START", "{", "PomFilterContainer   pomFilterContainer    =    createPomFilterContainer ( mavenFactory . createMavenPomFactory ( configurationContainer ,    scopeMapping ,    fileResolver )  )  ;", "return   new   DefaultGroovyMavenDeployer ( pomFilterContainer ,    createArtifactPomContainer ( pomMetaInfoProvider ,    pomFilterContainer ,    createArtifactPomFactory (  )  )  ,    loggingManag . create (  )  ,    mavenSettingsProvider ,    mavenRepositoryLocator )  ;", "}", "METHOD_END"], "methodName": ["createMavenDeployer"], "fileName": "org.gradle.api.publication.maven.internal.DefaultDeployerFactory"}, {"methodBody": ["METHOD_START", "{", "PomFilterContainer   pomFilterContainer    =    createPomFilterContainer ( mavenFactory . createMavenPomFactory ( configurationContainer ,    scopeMapping ,    fileResolver )  )  ;", "return   new   BaseMavenInstaller ( pomFilterContainer ,    createArtifactPomContainer ( pomMetaInfoProvider ,    pomFilterContainer ,    createArtifactPomFactory (  )  )  ,    loggingManag . create (  )  ,    mavenSettingsProvider ,    mavenRepositoryLocator )  ;", "}", "METHOD_END"], "methodName": ["createMavenInstaller"], "fileName": "org.gradle.api.publication.maven.internal.DefaultDeployerFactory"}, {"methodBody": ["METHOD_START", "{", "return   new   BasePomFilterContainer ( mavenPomFactory )  ;", "}", "METHOD_END"], "methodName": ["createPomFilterContainer"], "fileName": "org.gradle.api.publication.maven.internal.DefaultDeployerFactory"}, {"methodBody": ["METHOD_START", "{", "attachedArtifacts . add ( artifact )  ;", "}", "METHOD_END"], "methodName": ["addArtifact"], "fileName": "org.gradle.api.publication.maven.internal.DefaultMavenDeployment"}, {"methodBody": ["METHOD_START", "{", "Set < PublishArtifact >    artifacts    =    new   HashSet < PublishArtifact >  (  )  ;", "artifacts . addAll ( attachedArtifacts )  ;", "if    (  ( mainArtifact )     !  =    null )     {", "artifacts . add ( mainArtifact )  ;", "}", "artifacts . add ( pomArtifact )  ;", "return   artifacts ;", "}", "METHOD_END"], "methodName": ["getArtifacts"], "fileName": "org.gradle.api.publication.maven.internal.DefaultMavenDeployment"}, {"methodBody": ["METHOD_START", "{", "return   attachedArtifacts ;", "}", "METHOD_END"], "methodName": ["getAttachedArtifacts"], "fileName": "org.gradle.api.publication.maven.internal.DefaultMavenDeployment"}, {"methodBody": ["METHOD_START", "{", "return   mainArtifact ;", "}", "METHOD_END"], "methodName": ["getMainArtifact"], "fileName": "org.gradle.api.publication.maven.internal.DefaultMavenDeployment"}, {"methodBody": ["METHOD_START", "{", "return   pomArtifact ;", "}", "METHOD_END"], "methodName": ["getPomArtifact"], "fileName": "org.gradle.api.publication.maven.internal.DefaultMavenDeployment"}, {"methodBody": ["METHOD_START", "{", "return   new   ConfigureByMapAction < T >  ( args )  ;", "}", "METHOD_END"], "methodName": ["configureByMapActionFor"], "fileName": "org.gradle.api.publication.maven.internal.DefaultMavenRepositoryHandlerConvention"}, {"methodBody": ["METHOD_START", "{", "return   deployerFactory . createMavenDeployer (  )  ;", "}", "METHOD_END"], "methodName": ["createMavenDeployer"], "fileName": "org.gradle.api.publication.maven.internal.DefaultMavenRepositoryHandlerConvention"}, {"methodBody": ["METHOD_START", "{", "return   deployerFactory . createMavenInstaller (  )  ;", "}", "METHOD_END"], "methodName": ["createMavenInstaller"], "fileName": "org.gradle.api.publication.maven.internal.DefaultMavenRepositoryHandlerConvention"}, {"methodBody": ["METHOD_START", "{", "return   container . addRepository ( createMavenDeployer (  )  ,    MavenRepositoryHandlerConvention . DEFAULT _ MAVEN _ DEPLOYER _ NAME )  ;", "}", "METHOD_END"], "methodName": ["mavenDeployer"], "fileName": "org.gradle.api.publication.maven.internal.DefaultMavenRepositoryHandlerConvention"}, {"methodBody": ["METHOD_START", "{", "return   mavenDeployer ( configureUsing ( configureClosure )  )  ;", "}", "METHOD_END"], "methodName": ["mavenDeployer"], "fileName": "org.gradle.api.publication.maven.internal.DefaultMavenRepositoryHandlerConvention"}, {"methodBody": ["METHOD_START", "{", "return   mavenDeployer ( configureByMapActionFor ( args )  )  ;", "}", "METHOD_END"], "methodName": ["mavenDeployer"], "fileName": "org.gradle.api.publication.maven.internal.DefaultMavenRepositoryHandlerConvention"}, {"methodBody": ["METHOD_START", "{", "return   mavenDeployer ( args ,    configureUsing ( configureClosure )  )  ;", "}", "METHOD_END"], "methodName": ["mavenDeployer"], "fileName": "org.gradle.api.publication.maven.internal.DefaultMavenRepositoryHandlerConvention"}, {"methodBody": ["METHOD_START", "{", "return   mavenDeployer ( composite ( configureByMapActionFor ( args )  ,    configureAction )  )  ;", "}", "METHOD_END"], "methodName": ["mavenDeployer"], "fileName": "org.gradle.api.publication.maven.internal.DefaultMavenRepositoryHandlerConvention"}, {"methodBody": ["METHOD_START", "{", "return   container . addRepository ( createMavenInstaller (  )  ,    MavenRepositoryHandlerConvention . DEFAULT _ MAVEN _ INSTALLER _ NAME )  ;", "}", "METHOD_END"], "methodName": ["mavenInstaller"], "fileName": "org.gradle.api.publication.maven.internal.DefaultMavenRepositoryHandlerConvention"}, {"methodBody": ["METHOD_START", "{", "return   mavenInstaller ( configureUsing ( configureClosure )  )  ;", "}", "METHOD_END"], "methodName": ["mavenInstaller"], "fileName": "org.gradle.api.publication.maven.internal.DefaultMavenRepositoryHandlerConvention"}, {"methodBody": ["METHOD_START", "{", "return   mavenInstaller ( configureByMapActionFor ( args )  )  ;", "}", "METHOD_END"], "methodName": ["mavenInstaller"], "fileName": "org.gradle.api.publication.maven.internal.DefaultMavenRepositoryHandlerConvention"}, {"methodBody": ["METHOD_START", "{", "return   mavenInstaller ( args ,    configureUsing ( configureClosure )  )  ;", "}", "METHOD_END"], "methodName": ["mavenInstaller"], "fileName": "org.gradle.api.publication.maven.internal.DefaultMavenRepositoryHandlerConvention"}, {"methodBody": ["METHOD_START", "{", "return   filter ;", "}", "METHOD_END"], "methodName": ["getFilter"], "fileName": "org.gradle.api.publication.maven.internal.DefaultPomFilter"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.api.publication.maven.internal.DefaultPomFilter"}, {"methodBody": ["METHOD_START", "{", "return   pom ;", "}", "METHOD_END"], "methodName": ["getPomTemplate"], "fileName": "org.gradle.api.publication.maven.internal.DefaultPomFilter"}, {"methodBody": ["METHOD_START", "{", "this . filter    =    filter ;", "}", "METHOD_END"], "methodName": ["setFilter"], "fileName": "org.gradle.api.publication.maven.internal.DefaultPomFilter"}, {"methodBody": ["METHOD_START", "{", "this . pom    =    pom ;", "}", "METHOD_END"], "methodName": ["setPomTemplate"], "fileName": "org.gradle.api.publication.maven.internal.DefaultPomFilter"}, {"methodBody": ["METHOD_START", "{", "mavenPomMock    =    context . mock ( MavenPom . class )  ;", "publishFilterMock    =    context . mock ( PublishFilter . class )  ;", "pomFilter    =    new   DefaultPomFilter (  . TEST _ NAME ,    mavenPomMock ,    publishFilterMock )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.gradle.api.publication.maven.internal.DefaultPomFilterTest"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( DefaultPomFilterTest . TEST _ NAME ,    pomFilter . getName (  )  )  ;", "assertSame ( mavenPomMock ,    pomFilter . getPomTemplate (  )  )  ;", "assertSame ( publishFilterMock ,    pomFilter . getFilter (  )  )  ;", "}", "METHOD_END"], "methodName": ["testGetName"], "fileName": "org.gradle.api.publication.maven.internal.DefaultPomFilterTest"}, {"methodBody": ["METHOD_START", "{", "if    ( version    =  =    null )     {", "return   null ;", "}", "return   mSelectorScheme . renderSelector ( defaultVersionSelectorScheme . parseSelector ( version )  )  ;", "}", "METHOD_END"], "methodName": ["map"], "fileName": "org.gradle.api.publication.maven.internal.MavenVersionRangeMapper"}, {"methodBody": ["METHOD_START", "{", "return   model ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.gradle.api.publication.maven.internal.ModelFactory"}, {"methodBody": ["METHOD_START", "{", "String   extens =    type ;", "ArtifactType   stereotype    =    sessgetArtifactTypeRegistry (  )  . get ( type )  ;", "if    ( stereotype    !  =    null )     {", "extens =    stereotype . getExtens )  ;", "if    ( classifier    =  =    null )     {", "classifier    =    stereotype . getClassifier (  )  ;", "}", "}", "return   new   DefaultArtifact ( pomArtifact . getGroupId (  )  ,    pomArtifact . getArtifactId (  )  ,    classifier ,    extens   pomArtifact . getVers )  )  ;", "}", "METHOD_END"], "methodName": ["createTypedArtifact"], "fileName": "org.gradle.api.publication.maven.internal.action.AbstractMavenPublishAction"}, {"methodBody": ["METHOD_START", "{", "return   container ;", "}", "METHOD_END"], "methodName": ["getContainer"], "fileName": "org.gradle.api.publication.maven.internal.action.AbstractMavenPublishAction"}, {"methodBody": ["METHOD_START", "{", "try    {", "ClassWorld   world    =    new   ClassWorld (  \" plexus . core \"  ,    ClassWorld . class . getClassLoader (  )  )  ;", "ClassRealm   classRealm    =    new   ClassRealm ( world ,     \" plexus . core \"  ,    ClassWorld . class . getClassLoader (  )  )  ;", "if    ( wagonJars    !  =    null )     {", "for    ( File   jar    :    wagonJars )     {", "classRealm . addURL ( jar . toURI (  )  . toURL (  )  )  ;", "}", "}", "return   new   DefaultPlexusContainer ( new   DefaultContainerConfigur (  )  . setRealm ( classRealm )  )  ;", "}    catch    ( PlexusContainerException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}    catch    ( MalformedURLException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["newPlexusContainer"], "fileName": "org.gradle.api.publication.maven.internal.action.AbstractMavenPublishAction"}, {"methodBody": ["METHOD_START", "{", "try    {", "DefaultDeployer   deployer    =     (  ( DefaultDeployer )     ( getContainer (  )  . lookup ( Deployer . class )  )  )  ;", "deployer . setMetadataFactories ( null )  ;", "deployer . addMetadataGeneratorFactory ( new   VersionsMetadataGeneratorFactory (  )  )  ;", "deployer . addMetadataGeneratorFactory ( new   SnapshotMetadataGeneratorFactory (  )  )  ;", "deployer . addMetadataGeneratorFactory ( snapshotVersionManager )  ;", "return   container . lookup ( RepositorySystem . class )  ;", "}    catch    ( ComponentLookupExcepe )     {", "throw   UncheckedExcepthrowAsUncheckedExcepe )  ;", "}", "}", "METHOD_END"], "methodName": ["newRepositorySystem"], "fileName": "org.gradle.api.publication.maven.internal.action.AbstractMavenPublishAction"}, {"methodBody": ["METHOD_START", "{", "FileReader   reader    =    null ;", "try    {", "reader    =    new   FileReader ( pomFile )  ;", "return   new   Xpp 3 Reader (  )  . read ( reader ,    false )  ;", "}    catch    ( Exception   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}    finally    {", "try    {", "reader . close (  )  ;", "}    catch    ( IOException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["parsePom"], "fileName": "org.gradle.api.publication.maven.internal.action.AbstractMavenPublishAction"}, {"methodBody": ["METHOD_START", "{", "session . getConfigProperties (  )  . put (  \" maven . metadata . legacy \"  ,     \" true \"  )  ;", "}", "METHOD_END"], "methodName": ["produceLegacyMavenMetadata"], "fileName": "org.gradle.api.publication.maven.internal.action.AbstractMavenPublishAction"}, {"methodBody": ["METHOD_START", "{", "List < Artifact >    artifacts    =    new   ArrayList < Artifact >  (  )  ;", "if    (  ( mainArtifact . getFile (  )  )     !  =    null )     {", "artifacts . add ( mainArtifact )  ;", "}", "artifacts . add ( pomArtifact )  ;", "if    (  ( metadataArtifact )     !  =    null )     {", "artifacts . add ( metadataArtifact )  ;", "}", "for    ( Artifact   artifact    :    attached )     {", "File   file    =    artifact . getFile (  )  ;", "if    (  ( file    !  =    null )     &  &     ( file . isFile (  )  )  )     {", "artifacts . add ( artifact )  ;", "}", "}", "try    {", "publishArtifacts ( artifacts ,    newRepositorySystem (  )  ,    session )  ;", "}    catch    ( RepositoryException   e )     {", "throw   new   GradleException ( e . getMessage (  )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["publish"], "fileName": "org.gradle.api.publication.maven.internal.action.AbstractMavenPublishAction"}, {"methodBody": ["METHOD_START", "{", "session . setLocalRepositoryManager ( new   SimpleLocalRepositoryManager ( localMavenRepository )  )  ;", "}", "METHOD_END"], "methodName": ["setLocalMavenRepositoryLocation"], "fileName": "org.gradle.api.publication.maven.internal.action.AbstractMavenPublishAction"}, {"methodBody": ["METHOD_START", "{", "mainArtifact    =    mainArtifact . setFile ( file )  ;", "}", "METHOD_END"], "methodName": ["setMainArtifact"], "fileName": "org.gradle.api.publication.maven.internal.action.AbstractMavenPublishAction"}, {"methodBody": ["METHOD_START", "{", "snapshotVersionManager . setUniqueVersion ( uniqueVersion )  ;", "}", "METHOD_END"], "methodName": ["setUniqueVersion"], "fileName": "org.gradle.api.publication.maven.internal.action.AbstractMavenPublishAction"}, {"methodBody": ["METHOD_START", "{", "if    (  ( metadataFile    =  =    null )     |  |     (  !  ( metadataFile . exists (  )  )  )  )     {", "return   null ;", "}", "return   new   DefaultArtifact ( pom . getGroupId (  )  ,    pom . getArtifactId (  )  ,     \" module \"  ,    pom . getVersion (  )  )  . setFile ( metadataFile )  ;", "}", "METHOD_END"], "methodName": ["toGradleMetadataArtifact"], "fileName": "org.gradle.api.publication.maven.internal.action.AbstractMavenPublishAction"}, {"methodBody": ["METHOD_START", "{", "currentBuildOperationRef . set ( previousBuildOperationRef . get (  )  )  ;", "}", "METHOD_END"], "methodName": ["resetCurrentBuildOperationRef"], "fileName": "org.gradle.api.publication.maven.internal.action.LoggingMavenTransferListener"}, {"methodBody": ["METHOD_START", "{", "if    (  ( event . getException (  )  )    instanceof   MetadataNotFoundException )     {", ". LOGGER . info ( event . getException (  )  . getMessage (  )  )  ;", "} else    {", ". LOGGER . error ( event . getException (  )  . getMessage (  )  )  ;", "}", "resetCurrentBuildOperationRef (  )  ;", "}", "METHOD_END"], "methodName": ["transferFailed"], "fileName": "org.gradle.api.publication.maven.internal.action.LoggingMavenTransferListener"}, {"methodBody": ["METHOD_START", "{", "previousBuildOperationRef . set ( currentBuildOperationRef . get (  )  )  ;", "currentBuildOperationRef . set ( buildOperationRef )  ;", "String   message    =     (  ( event . getRequestType (  )  )     =  =     ( RequestType . PUT )  )     ?     \" Uploading :     {  }    to   repository    {  }    at    {  }  \"     :     \" Downloading :     {  }    from   repository    {  }    at    {  }  \"  ;", ". LOGGER . info ( message ,    event . getResource (  )  . getResourceName (  )  ,     \" remote \"  ,    event . getResource (  )  . getRepositoryUrl (  )  )  ;", "}", "METHOD_END"], "methodName": ["transferInitiated"], "fileName": "org.gradle.api.publication.maven.internal.action.LoggingMavenTransferListener"}, {"methodBody": ["METHOD_START", "{", "long   contentLength    =    event . getResource (  )  . getContentLength (  )  ;", "if    ( contentLength    >     0  )     {", ". LOGGER . info (  \" Transferring    {  } K   from   remote \"  ,     (  ( contentLength    +     (  (  . KILO )     /     2  )  )     /     (  . KILO )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["transferStarted"], "fileName": "org.gradle.api.publication.maven.internal.action.LoggingMavenTransferListener"}, {"methodBody": ["METHOD_START", "{", "long   contentLength    =    event . getResource (  )  . getContentLength (  )  ;", "if    (  ( contentLength    >     0  )     &  &     (  ( event . getRequestType (  )  )     =  =     ( RequestType . PUT )  )  )     {", ". LOGGER . info (  \" Uploaded    {  } K \"  ,     (  ( contentLength    +     (  (  . KILO )     /     2  )  )     /     (  . KILO )  )  )  ;", "}", "resetCurrentBuildOperationRef (  )  ;", "}", "METHOD_END"], "methodName": ["transferSucceeded"], "fileName": "org.gradle.api.publication.maven.internal.action.LoggingMavenTransferListener"}, {"methodBody": ["METHOD_START", "{", "RemoteRepository   repo    =    new   RemoteRepository (  \" remote \"  ,    gradleRepo . getLayout (  )  ,    gradleRepo . getUrl (  )  )  ;", "Authent   auth    =    gradleRepo . getAuthent (  )  ;", "if    ( auth    !  =    null )     {", "repo . setAuthent ( new   Authent ( auth . getUserName (  )  ,    auth . getPassword (  )  ,    auth . getPrivateKey (  )  ,    auth . getPassphrase (  )  )  )  ;", "}", "Proxy   proxy    =    gradleRepo . getProxy (  )  ;", "if    ( proxy    !  =    null )     {", "DefaultProxySelector   proxySelector    =    new   DefaultProxySelector (  )  ;", "Authent   proxyAuth    =    new   Authent ( proxy . getUserName (  )  ,    proxy . getPassword (  )  )  ;", "proxySelector . add ( new   Proxy ( proxy . getType (  )  ,    proxy . getHost (  )  ,    proxy . getPort (  )  ,    proxyAuth )  ,    proxy . getNonProxyHosts (  )  )  ;", "repo . setProxy ( proxySelector . getProxy ( repo )  )  ;", "}", "return   repo ;", "}", "METHOD_END"], "methodName": ["createRepository"], "fileName": "org.gradle.api.publication.maven.internal.action.MavenDeployAction"}, {"methodBody": ["METHOD_START", "{", "this . remoteRepository    =    repository ;", "this . remoteSnapshotRepository    =    snapshotRepository ;", "}", "METHOD_END"], "methodName": ["setRepositories"], "fileName": "org.gradle.api.publication.maven.internal.action.MavenDeployAction"}, {"methodBody": ["METHOD_START", "{", "this . uniqueVersion    =    uniqueVersion ;", "}", "METHOD_END"], "methodName": ["setUniqueVersion"], "fileName": "org.gradle.api.publication.maven.internal.action.SnapshotVersionManager"}, {"methodBody": ["METHOD_START", "{", "if    (  ( mavenDeployment . getMainArtifact (  )  )     !  =    null )     {", "publishAction . setMainArtifact ( mavenDeployment . getMainArtifact (  )  . getFile (  )  )  ;", "}", "for    ( PublishArtifact   classifierArtifact    :    mavenDeployment . getAttachedArtifacts (  )  )     {", "publishAction . addAdditionalArtifact ( classifierArtifact . getFile (  )  ,    classifierArtifact . getType (  )  ,    classifierArtifact . getClassifier (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addArtifacts"], "fileName": "org.gradle.api.publication.maven.internal.deployer.AbstractMavenResolver"}, {"methodBody": ["METHOD_START", "{", "return   pomFilterContainer . addFilter ( name ,    filter )  ;", "}", "METHOD_END"], "methodName": ["addFilter"], "fileName": "org.gradle.api.publication.maven.internal.deployer.AbstractMavenResolver"}, {"methodBody": ["METHOD_START", "{", "return   pomFilterContainer . addFilter ( name ,    publishFilter )  ;", "}", "METHOD_END"], "methodName": ["addFilter"], "fileName": "org.gradle.api.publication.maven.internal.deployer.AbstractMavenResolver"}, {"methodBody": ["METHOD_START", "{", "beforeDeploymentActions . add ( ConfigureUtil . configureUsing ( action )  )  ;", "}", "METHOD_END"], "methodName": ["beforeDeployment"], "fileName": "org.gradle.api.publication.maven.internal.deployer.AbstractMavenResolver"}, {"methodBody": ["METHOD_START", "{", "beforeDeploymentActions . add ( action )  ;", "}", "METHOD_END"], "methodName": ["beforeDeployment"], "fileName": "org.gradle.api.publication.maven.internal.deployer.AbstractMavenResolver"}, {"methodBody": ["METHOD_START", "{", "if    ( isIgnorable ( artifact )  )     {", "return ;", "}", "getArtifactPomContainer (  )  . addArtifact ( artifact ,    src )  ;", "}", "METHOD_END"], "methodName": ["collectArtifact"], "fileName": "org.gradle.api.publication.maven.internal.deployer.AbstractMavenResolver"}, {"methodBody": ["METHOD_START", "{", "return   this ;", "}", "METHOD_END"], "methodName": ["createPublisher"], "fileName": "org.gradle.api.publication.maven.internal.deployer.AbstractMavenResolver"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  \" A   Maven   deployer   cannot   be   used   to   resolve   dependencies .    It   can   only   be   used   to   publish   artifacts .  \"  )  ;", "}", "METHOD_END"], "methodName": ["createResolver"], "fileName": "org.gradle.api.publication.maven.internal.deployer.AbstractMavenResolver"}, {"methodBody": ["METHOD_START", "{", "loggingManager . captureStandardOutput ( INFO )  . start (  )  ;", "try    {", "shActionsh (  )  ;", "}    finally    {", "loggingManager . stop (  )  ;", "}", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.api.publication.maven.internal.deployer.AbstractMavenResolver"}, {"methodBody": ["METHOD_START", "{", "pomFilterContainer . filter ( filter )  ;", "}", "METHOD_END"], "methodName": ["filter"], "fileName": "org.gradle.api.publication.maven.internal.deployer.AbstractMavenResolver"}, {"methodBody": ["METHOD_START", "{", "return   pomFilterContainer . filter ( name )  ;", "}", "METHOD_END"], "methodName": ["filter"], "fileName": "org.gradle.api.publication.maven.internal.deployer.AbstractMavenResolver"}, {"methodBody": ["METHOD_START", "{", "return   pomFilterContainer . getActivePomFilters (  )  ;", "}", "METHOD_END"], "methodName": ["getActivePomFilters"], "fileName": "org.gradle.api.publication.maven.internal.deployer.AbstractMavenResolver"}, {"methodBody": ["METHOD_START", "{", "return   artifactPomContainer ;", "}", "METHOD_END"], "methodName": ["getArtifactPomContainer"], "fileName": "org.gradle.api.publication.maven.internal.deployer.AbstractMavenResolver"}, {"methodBody": ["METHOD_START", "{", "return   pomFilterContainer . getFilter (  )  ;", "}", "METHOD_END"], "methodName": ["getFilter"], "fileName": "org.gradle.api.publication.maven.internal.deployer.AbstractMavenResolver"}, {"methodBody": ["METHOD_START", "{", "return   pomFilterContainer . getPom (  )  ;", "}", "METHOD_END"], "methodName": ["getPom"], "fileName": "org.gradle.api.publication.maven.internal.deployer.AbstractMavenResolver"}, {"methodBody": ["METHOD_START", "{", "return   pomFilterContainer ;", "}", "METHOD_END"], "methodName": ["getPomFilterContainer"], "fileName": "org.gradle.api.publication.maven.internal.deployer.AbstractMavenResolver"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   mavenSettingsProvider . buildSettings (  )  ;", "}    catch    ( SettingsBuildingException   e )     {", "throw   new   GradleException (  \" Could   not   load   Maven   Settings \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["getSettings"], "fileName": "org.gradle.api.publication.maven.internal.deployer.AbstractMavenResolver"}, {"methodBody": ["METHOD_START", "{", "return   artifact . getType (  )  . equals (  \" ivy \"  )  ;", "}", "METHOD_END"], "methodName": ["isIgnorable"], "fileName": "org.gradle.api.publication.maven.internal.deployer.AbstractMavenResolver"}, {"methodBody": ["METHOD_START", "{", "return   pomFilterContainer . pom ( configureClosure )  ;", "}", "METHOD_END"], "methodName": ["pom"], "fileName": "org.gradle.api.publication.maven.internal.deployer.AbstractMavenResolver"}, {"methodBody": ["METHOD_START", "{", "return   pomFilterContainer . pom ( name )  ;", "}", "METHOD_END"], "methodName": ["pom"], "fileName": "org.gradle.api.publication.maven.internal.deployer.AbstractMavenResolver"}, {"methodBody": ["METHOD_START", "{", "return   pomFilterContainer . pom ( name ,    configureClosure )  ;", "}", "METHOD_END"], "methodName": ["pom"], "fileName": "org.gradle.api.publication.maven.internal.deployer.AbstractMavenResolver"}, {"methodBody": ["METHOD_START", "{", "Set < MavenDeployment >    mavenDeployments    =    getArtifactPomContainer (  )  . createDeployableFilesInfos (  )  ;", "for    ( MavenDeployment   mavenDeployment    :    mavenDeployments )     {", "File   pomFile    =    mavenDeployment . getPomArtifact (  )  . getFile (  )  ;", "MavenPublishAction   publishAction    =    createPublishAction ( pomFile ,    null ,    mpositoryLocator )  ;", "beforeDeploymentActions . execute ( mavenDeployment )  ;", "addArtifacts ( publishAction ,    mavenDeployment )  ;", "execute ( publishAction )  ;", "}", "}", "METHOD_END"], "methodName": ["publish"], "fileName": "org.gradle.api.publication.maven.internal.deployer.AbstractMavenResolver"}, {"methodBody": ["METHOD_START", "{", "for    ( IvyModuleArtifactPublishMetadata   artifactMetadata    :    moduleVersion . getArtifacts (  )  )     {", "IvyArtifactName   artifact    =    artifactMetadata . getArtifactName (  )  ;", "ModuleRevisionId   moduleRevisionId    =    IvyUtil . createModuleRevisionId ( artifactMetadata . getId (  )  . getComponentIdentifier (  )  )  ;", "Map < String ,    String >    attributes    =    Collections . singletonMap (  \" classifier \"  ,    artifact . getClassifier (  )  )  ;", "Artifact   ivyArtifact    =    new   DefaultArtifact ( moduleRevisionId ,    null ,    artifact . getName (  )  ,    artifact . getType (  )  ,    artifact . getExtension (  )  ,    attributes )  ;", "collectArtifact ( ivyArtifact ,    artifactMetadata . getFile (  )  )  ;", "}", "sh (  )  ;", "}", "METHOD_END"], "methodName": ["publish"], "fileName": "org.gradle.api.publication.maven.internal.deployer.AbstractMavenResolver"}, {"methodBody": ["METHOD_START", "{", "pomFilterContainer . setFilter ( defaultFilter )  ;", "}", "METHOD_END"], "methodName": ["setFilter"], "fileName": "org.gradle.api.publication.maven.internal.deployer.AbstractMavenResolver"}, {"methodBody": ["METHOD_START", "{", "pomFilterContainer . setPom ( defaultPom )  ;", "}", "METHOD_END"], "methodName": ["setPom"], "fileName": "org.gradle.api.publication.maven.internal.deployer.AbstractMavenResolver"}, {"methodBody": ["METHOD_START", "{", "protocolProviderJars . addAll ( jars )  ;", "}", "METHOD_END"], "methodName": ["addProtocolProviderJars"], "fileName": "org.gradle.api.publication.maven.internal.deployer.BaseMavenDeployer"}, {"methodBody": ["METHOD_START", "{", "MavenWagonDeployAction   deployAction    =    new   MavenWagonDeployAction ( pomFile ,    metadataFile ,    getJars (  )  )  ;", "deployAction . setLocalMavenRepositoryLocation ( mavenRepositoryLocator . getLocalMavenRepository (  )  )  ;", "deployAction . produceLegacyMavenMetadata (  )  ;", "deployAction . setUniqueVersion ( isUniqueVersion (  )  )  ;", "deployAction . setRepositories ( remoteRepository ,    remoteSnapshotRepository )  ;", "return   deployAction ;", "}", "METHOD_END"], "methodName": ["createPublishAction"], "fileName": "org.gradle.api.publication.maven.internal.deployer.BaseMavenDeployer"}, {"methodBody": ["METHOD_START", "{", "return   configuration ;", "}", "METHOD_END"], "methodName": ["getConfiguration"], "fileName": "org.gradle.api.publication.maven.internal.deployer.BaseMavenDeployer"}, {"methodBody": ["METHOD_START", "{", "return    ( configuration )     !  =    null    ?    new   ArrayList < File >  ( configuration . resolve (  )  )     :    protocolProviderJars ;", "}", "METHOD_END"], "methodName": ["getJars"], "fileName": "org.gradle.api.publication.maven.internal.deployer.BaseMavenDeployer"}, {"methodBody": ["METHOD_START", "{", "return   remoteRepository ;", "}", "METHOD_END"], "methodName": ["getRepository"], "fileName": "org.gradle.api.publication.maven.internal.deployer.BaseMavenDeployer"}, {"methodBody": ["METHOD_START", "{", "return   remoteSnapshotRepository ;", "}", "METHOD_END"], "methodName": ["getSnapshotRepository"], "fileName": "org.gradle.api.publication.maven.internal.deployer.BaseMavenDeployer"}, {"methodBody": ["METHOD_START", "{", "return   uniqueVersion ;", "}", "METHOD_END"], "methodName": ["isUniqueVersion"], "fileName": "org.gradle.api.publication.maven.internal.deployer.BaseMavenDeployer"}, {"methodBody": ["METHOD_START", "{", "this . configuration    =    configuration ;", "}", "METHOD_END"], "methodName": ["setConfiguration"], "fileName": "org.gradle.api.publication.maven.internal.deployer.BaseMavenDeployer"}, {"methodBody": ["METHOD_START", "{", "this . remoteRepository    =     (  ( RemoteRepository )     ( remoteRepository )  )  ;", "}", "METHOD_END"], "methodName": ["setRepository"], "fileName": "org.gradle.api.publication.maven.internal.deployer.BaseMavenDeployer"}, {"methodBody": ["METHOD_START", "{", "this . remoteSnapshotRepository    =     (  ( RemoteRepository )     ( remoteSnapshotRepository )  )  ;", "}", "METHOD_END"], "methodName": ["setSnapshotRepository"], "fileName": "org.gradle.api.publication.maven.internal.deployer.BaseMavenDeployer"}, {"methodBody": ["METHOD_START", "{", "this . uniqueVersion    =    uniqueVersion ;", "}", "METHOD_END"], "methodName": ["setUniqueVersion"], "fileName": "org.gradle.api.publication.maven.internal.deployer.BaseMavenDeployer"}, {"methodBody": ["METHOD_START", "{", "MavenInstallAction   installAction    =    new   MavenInstallAction ( pomFile ,    metadataFile )  ;", "installAction . setLocalMavenRepositoryLocation ( mavenRepositoryLocator . getLocalMavenRepository (  )  )  ;", "installAction . produceLegacyMavenMetadata (  )  ;", "return   installAction ;", "}", "METHOD_END"], "methodName": ["createPublishAction"], "fileName": "org.gradle.api.publication.maven.internal.deployer.BaseMavenInstaller"}, {"methodBody": ["METHOD_START", "{", "RemoteRepository   repository    =    new   MavenRemoteRepository (  )  ;", "ConfigureUtil . configureByMap ( properties ,    repository )  ;", "return   repository ;", "}", "METHOD_END"], "methodName": ["createRepository"], "fileName": "org.gradle.api.publication.maven.internal.deployer.DefaultGroovyMavenDeployer"}, {"methodBody": ["METHOD_START", "{", "RemoteRepository   repository    =    new   MavenRemoteRepository (  )  ;", "ConfigureUtil . configureByMap ( properties ,    repository )  ;", "new   ClosureBackedAction < RemoteRepository >  ( closure ,    Closure . OWNER _ FIRST )  . execute ( repository )  ;", "return   repository ;", "}", "METHOD_END"], "methodName": ["createRepository"], "fileName": "org.gradle.api.publication.maven.internal.deployer.DefaultGroovyMavenDeployer"}, {"methodBody": ["METHOD_START", "{", "RemoteRepository   repository    =    createRepository ( properties )  ;", "setRepository ( repository )  ;", "return   repository ;", "}", "METHOD_END"], "methodName": ["repository"], "fileName": "org.gradle.api.publication.maven.internal.deployer.DefaultGroovyMavenDeployer"}, {"methodBody": ["METHOD_START", "{", "RemoteRepository   repository    =    createRepository ( properties ,    closure )  ;", "setRepository ( repository )  ;", "return   repository ;", "}", "METHOD_END"], "methodName": ["repository"], "fileName": "org.gradle.api.publication.maven.internal.deployer.DefaultGroovyMavenDeployer"}, {"methodBody": ["METHOD_START", "{", "RemoteRepository   repository    =    createRepository ( properties )  ;", "setSnapshotRepository ( repository )  ;", "return   repository ;", "}", "METHOD_END"], "methodName": ["snapshotRepository"], "fileName": "org.gradle.api.publication.maven.internal.deployer.DefaultGroovyMavenDeployer"}, {"methodBody": ["METHOD_START", "{", "RemoteRepository   repository    =    createRepository ( properties ,    closure )  ;", "setSnapshotRepository ( repository )  ;", "return   repository ;", "}", "METHOD_END"], "methodName": ["snapshotRepository"], "fileName": "org.gradle.api.publication.maven.internal.deployer.DefaultGroovyMavenDeployer"}, {"methodBody": ["METHOD_START", "{", "Authentication   authentication    =    new   Authentication (  )  ;", "ConfigureUtil . configureByMap ( properties ,    authentication )  ;", "addAuthentication ( authentication )  ;", "return   authentication ;", "}", "METHOD_END"], "methodName": ["authentication"], "fileName": "org.gradle.api.publication.maven.internal.deployer.MavenRemoteRepository"}, {"methodBody": ["METHOD_START", "{", "Proxy   proxy    =    new   Proxy (  )  ;", "CfigureUtil . cfigureByMap ( properties ,    proxy )  ;", "addProxy ( proxy )  ;", "return   proxy ;", "}", "METHOD_END"], "methodName": ["proxy"], "fileName": "org.gradle.api.publication.maven.internal.deployer.MavenRemoteRepository"}, {"methodBody": ["METHOD_START", "{", "RepositoryPolicy   policy    =    new   RepositoryPolicy (  )  ;", "ConfigureUtil . configureByMap ( properties ,    policy )  ;", "addReleases ( policy )  ;", "return   policy ;", "}", "METHOD_END"], "methodName": ["releases"], "fileName": "org.gradle.api.publication.maven.internal.deployer.MavenRemoteRepository"}, {"methodBody": ["METHOD_START", "{", "RepositoryPolicy   policy    =    new   RepositoryPolicy (  )  ;", "ConfigureUtil . configureByMap ( properties ,    policy )  ;", "addSnapshots ( policy )  ;", "return   policy ;", "}", "METHOD_END"], "methodName": ["snapshots"], "fileName": "org.gradle.api.publication.maven.internal.deployer.MavenRemoteRepository"}, {"methodBody": ["METHOD_START", "{", "try    {", "Field   f    =    c . getDeclaredField ( fieldName )  ;", "f . setAccessible ( true )  ;", "return   f . get ( obj )  ;", "}    catch    ( NoSuchFieldExcep   e )     {", "throw   new   RuntimeExcep ( e )  ;", "}    catch    ( IllegalArgumentExcep   e )     {", "throw   new   RuntimeExcep ( e )  ;", "}    catch    ( IllegalAccessExcep   e )     {", "throw   new   RuntimeExcep ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["getProp"], "fileName": "org.gradle.api.publication.maven.internal.pom.CustomModelBuilder"}, {"methodBody": ["METHOD_START", "{", "try    {", "Field   f    =    c . getDeclaredField ( fieldName )  ;", "f . setAccessible ( true )  ;", "f . set ( obj ,    value )  ;", "}    catch    ( NoSuchFieldExcep   e )     {", "throw   new   RuntimeExcep ( e )  ;", "}    catch    ( IllegalArgumentExcep   e )     {", "throw   new   RuntimeExcep ( e )  ;", "}    catch    ( IllegalAccessExcep   e )     {", "throw   new   RuntimeExcep ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["setProp"], "fileName": "org.gradle.api.publication.maven.internal.pom.CustomModelBuilder"}, {"methodBody": ["METHOD_START", "{", "mappings . put ( configuration ,    new   Conf 2 ScopeMapping ( priority ,    configuration ,    scope )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addMapping"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultConf2ScopeMappingContainer"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  ( o    =  =    null )     |  |     (  ( getClass (  )  )     !  =     ( o . getClass (  )  )  )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "if    (  !  ( mappings . equals ( that . mappings )  )  )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultConf2ScopeMappingContainer"}, {"methodBody": ["METHOD_START", "{", "Set < Conf 2 ScopeMapping >    result    =    getMappingsWithHighestPriority ( configurations )  ;", "if    (  ( result . size (  )  )     >     1  )     {", "throw   new   InvalidUserDataException (  (  (  \" The   configuration   to   scope   mapping   is   not   unique .    The   following   configurations    \"     +     \" have   the   same   priority :     \"  )     +    result )  )  ;", "}", "return    ( result . size (  )  )     =  =     0     ?    null    :    result . iterator (  )  . next (  )  ;", "}", "METHOD_END"], "methodName": ["getMapping"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultConf2ScopeMappingContainer"}, {"methodBody": ["METHOD_START", "{", "return   mappings ;", "}", "METHOD_END"], "methodName": ["getMappings"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultConf2ScopeMappingContainer"}, {"methodBody": ["METHOD_START", "{", "List < Conf 2 ScopeMapping >    existingMappings    =    new   ArrayList < Conf 2 ScopeMapping >  (  )  ;", "for    ( Configuration   configuration    :    configurations )     {", "if    (  ( mappings . get ( configuration )  )     !  =    null )     {", "existingMappings . add ( mappings . get ( configuration )  )  ;", "} else    {", "existingMappings . add ( new   Conf 2 ScopeMapping ( null ,    configuration ,    null )  )  ;", "}", "}", "return   existingMappings ;", "}", "METHOD_END"], "methodName": ["getMappingsForConfigurations"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultConf2ScopeMappingContainer"}, {"methodBody": ["METHOD_START", "{", "Integer   lastPriority    =    null ;", "Set <  >    result    =    new   HashSet <  >  (  )  ;", "for    (    conf 2 ScopeMapping    :    getMappingsForConfigurations ( configurations )  )     {", "Integer   thisPriority    =    conf 2 ScopeMapping . getPriority (  )  ;", "if    (  ( lastPriority    !  =    null )     &  &     ( lastPriority . equals ( thisPriority )  )  )     {", "result . add ( conf 2 ScopeMapping )  ;", "} else", "if    (  ( lastPriority    =  =    null )     |  |     (  ( thisPriority    !  =    null )     &  &     ( lastPriority    <    thisPriority )  )  )     {", "lastPriority    =    thisPriority ;", "result    =    toSet ( conf 2 ScopeMapping )  ;", "}", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["getMappingsWithHighestPriority"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultConf2ScopeMappingContainer"}, {"methodBody": ["METHOD_START", "{", "return   mappings . hashCode (  )  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultConf2ScopeMappingContainer"}, {"methodBody": ["METHOD_START", "{", "return   skipUnmappedConfs ;", "}", "METHOD_END"], "methodName": ["isSkipUnmappedConfs"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultConf2ScopeMappingContainer"}, {"methodBody": ["METHOD_START", "{", "this . skipUnmappedConfs    =    skipUnmappedConfs ;", "}", "METHOD_END"], "methodName": ["setSkipUnmappedConfs"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultConf2ScopeMappingContainer"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( new   Conf 2 ScopeMapping ( DefaultConf 2 ScopeMappingContainerTest . TEST _ PRIORITY _  1  ,    testConf 1  ,    DefaultConf 2 ScopeMappingContainerTest . TEST _ SCOPE _  1  )  ,    conf 2 ScopeMappingContainer . getMapping ( Arrays . asList ( testConf 1  )  )  )  ;", "}", "METHOD_END"], "methodName": ["addGetMapping"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultConf2ScopeMappingContainerTest"}, {"methodBody": ["METHOD_START", "{", "Map < Configuration ,    Conf 2 ScopeMapping >    testMappings    =    new   HashMap < Configuration ,    Conf 2 ScopeMapping >  (  )     {", "{", "Configuration   configuration    =    context . mock ( Configuration . class )  ;", "put ( configuration ,    new   Conf 2 ScopeMapping (  1  0  ,    configuration ,     \" scope \"  )  )  ;", "}", "}  ;", "return   testMappings ;", "}", "METHOD_END"], "methodName": ["createTestMappings"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultConf2ScopeMappingContainerTest"}, {"methodBody": ["METHOD_START", "{", "Map < Configuration ,    Conf 2 ScopeMapping >    testMappings    =    createTestMappings (  )  ;", "conf 2 ScopeMappingContainer    =    new    ( testMappings )  ;", "assertTrue ( conf 2 ScopeMappingContainer . equals ( new    ( testMappings )  )  )  ;", "assertEquals ( conf 2 ScopeMappingContainer . hashCode (  )  ,    new    ( testMappings )  . hashCode (  )  )  ;", "conf 2 ScopeMappingContainer . addMapping (  1  0  ,    context . mock ( Configuration . class )  ,     \" scope \"  )  ;", "assertFalse ( conf 2 ScopeMappingContainer . equals ( new    ( testMappings )  )  )  ;", "}", "METHOD_END"], "methodName": ["equalsAndHashCode"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultConf2ScopeMappingContainerTest"}, {"methodBody": ["METHOD_START", "{", "conf 2 ScopeMappingContainer    =    new   DefaultConf 2 ScopeMappingContainer (  )  ;", "assertTrue ( conf 2 ScopeMappingContainer . isSkipUnmappedConfs (  )  )  ;", "assertEquals (  0  ,    conf 2 ScopeMappingContainer . getMappings (  )  . size (  )  )  ;", "Map < Configuration ,    Conf 2 ScopeMapping >    testMappings    =    createTestMappings (  )  ;", "conf 2 ScopeMappingContainer    =    new   DefaultConf 2 ScopeMappingContainer ( testMappings )  ;", "assertNotSame ( testMappings ,    conf 2 ScopeMappingContainer . getMappings (  )  )  ;", "assertEquals ( testMappings ,    conf 2 ScopeMappingContainer . getMappings (  )  )  ;", "}", "METHOD_END"], "methodName": ["init"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultConf2ScopeMappingContainerTest"}, {"methodBody": ["METHOD_START", "{", "assertThat ( conf 2 ScopeMappingContainer . getMapping ( Arrays . asList ( testConf 1  ,    testConf 2  )  )  ,    equalTo ( new   Conf 2 ScopeMapping ( DefaultConf 2 ScopeMappingContainerTest . TEST _ PRIORITY _  1  ,    testConf 1  ,    DefaultConf 2 ScopeMappingContainerTest . TEST _ SCOPE _  1  )  )  )  ;", "}", "METHOD_END"], "methodName": ["mappedConfigurationAndUnmappedConfiguration"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultConf2ScopeMappingContainerTest"}, {"methodBody": ["METHOD_START", "{", "conf 2 ScopeMappingContainer . addMapping ( DefaultConf 2 ScopeMappingContainerTest . TEST _ PRIORITY _  2  ,    testConf 2  ,    DefaultConf 2 ScopeMappingContainerTest . TEST _ SCOPE _  2  )  ;", "assertThat ( conf 2 ScopeMappingContainer . getMapping ( Arrays . asList ( testConf 1  ,    testConf 2  )  )  ,    equalTo ( new   Conf 2 ScopeMapping ( DefaultConf 2 ScopeMappingContainerTest . TEST _ PRIORITY _  2  ,    testConf 2  ,    DefaultConf 2 ScopeMappingContainerTest . TEST _ SCOPE _  2  )  )  )  ;", "}", "METHOD_END"], "methodName": ["mappingWithDifferentPrioritiesDifferentConfsDifferentScopes"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultConf2ScopeMappingContainerTest"}, {"methodBody": ["METHOD_START", "{", "conf 2 ScopeMappingContainer . addMapping ( DefaultConf 2 ScopeMappingContainerTest . TEST _ PRIORITY _  1  ,    testConf 2  ,    DefaultConf 2 ScopeMappingContainerTest . TEST _ SCOPE _  1  )  ;", "conf 2 ScopeMappingContainer . addMapping ( DefaultConf 2 ScopeMappingContainerTest . TEST _ PRIORITY _  1  ,    testConf 3  ,    DefaultConf 2 ScopeMappingContainerTest . TEST _ SCOPE _  2  )  ;", "conf 2 ScopeMappingContainer . getMapping ( Arrays . asList ( testConf 1  ,    testConf 2  ,    testConf 3  )  )  ;", "}", "METHOD_END"], "methodName": ["mappingWithSamePrioritiesDifferentConfsDifferentScopes"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultConf2ScopeMappingContainerTest"}, {"methodBody": ["METHOD_START", "{", "conf 2 ScopeMappingContainer . addMapping ( DefaultConf 2 ScopeMappingContainerTest . TEST _ PRIORITY _  1  ,    testConf 2  ,    DefaultConf 2 ScopeMappingContainerTest . TEST _ SCOPE _  1  )  ;", "conf 2 ScopeMappingContainer . getMapping ( Arrays . asList ( testConf 1  ,    testConf 2  )  )  ;", "}", "METHOD_END"], "methodName": ["mappingWithSamePrioritiesDifferentConfsSameScope"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultConf2ScopeMappingContainerTest"}, {"methodBody": ["METHOD_START", "{", "conf 2 ScopeMappingContainer    =    new   DefaultConf 2 ScopeMappingContainer (  )  ;", "conf 2 ScopeMappingContainer . addMapping (  . TEST _ PRIORITY _  1  ,    testConf 1  ,     . TEST _ SCOPE _  1  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultConf2ScopeMappingContainerTest"}, {"methodBody": ["METHOD_START", "{", "assertThat ( conf 2 ScopeMappingContainer . getMapping ( Arrays . asList ( testConf 1  )  )  ,    equalTo ( new   Conf 2 ScopeMapping ( DefaultConf 2 ScopeMappingContainerTest . TEST _ PRIORITY _  1  ,    testConf 1  ,    DefaultConf 2 ScopeMappingContainerTest . TEST _ SCOPE _  1  )  )  )  ;", "}", "METHOD_END"], "methodName": ["singleMappedConfiguration"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultConf2ScopeMappingContainerTest"}, {"methodBody": ["METHOD_START", "{", "assertThat ( conf 2 ScopeMappingContainer . getMapping ( Arrays . asList ( testConf 2  )  )  ,    equalTo ( new   Conf 2 ScopeMapping ( null ,    testConf 2  ,    null )  )  )  ;", "}", "METHOD_END"], "methodName": ["unmappedConfiguration"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultConf2ScopeMappingContainerTest"}, {"methodBody": ["METHOD_START", "{", "if    ( isConvertable ( excludeRule )  )     {", "Exclusion   exclusion    =    new   Exclusion (  )  ;", "exclusion . setGroupId ( determineExclusionExpression ( excludeRule . getGroup (  )  )  )  ;", "exclusion . setArtifactId ( determineExclusionExpression ( excludeRule . getModule (  )  )  )  ;", "return   exclusion ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["convert"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultExcludeRuleConverter"}, {"methodBody": ["METHOD_START", "{", "return   attribute    !  =    null    ?    attribute    :     \"  *  \"  ;", "}", "METHOD_END"], "methodName": ["determineExclusionExpression"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultExcludeRuleConverter"}, {"methodBody": ["METHOD_START", "{", "return    (  ( excludeRule . getGroup (  )  )     !  =    null )     |  |     (  ( excludeRule . getModule (  )  )     !  =    null )  ;", "}", "METHOD_END"], "methodName": ["isConvertable"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultExcludeRuleConverter"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultConf 2 ScopeMappingContainer ( mappings )  ;", "}", "METHOD_END"], "methodName": ["createConf2ScopeMappingContainer"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenFactory"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultMavenPomFactory ( configurationContainer ,    createConf 2 ScopeMappingContainer ( mappings )  ,    createPomDependenciesConverter (  )  ,    fileResolver )  ;", "}", "METHOD_END"], "methodName": ["createMavenPomFactory"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenFactory"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultMavenPomFactory ( configurationContainer ,    conf 2 ScopeMappingContainer ,    createPomDependenciesConverter (  )  ,    fileResolver )  ;", "}", "METHOD_END"], "methodName": ["createMavenPomFactory"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenFactory"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultPomDependenciesConverter ( new   DefaultExcludeRuleConverter (  )  ,    versionRangeMapper )  ;", "}", "METHOD_END"], "methodName": ["createPomDependenciesConverter"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenFactory"}, {"methodBody": ["METHOD_START", "{", "return   getModel (  )  . getArtifactId (  )  ;", "}", "METHOD_END"], "methodName": ["getArtifactId"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "return   configurations ;", "}", "METHOD_END"], "methodName": ["getConfigurations"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "return   getModel (  )  . getDependencies (  )  ;", "}", "METHOD_END"], "methodName": ["getDependencies"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "DefaultMavenPom   effectivePom    =    new   DefaultMavenPom ( null ,    this . scopeMappings ,    pomDependenciesConverter ,    fileResolver )  ;", "effectivePom . setModel ( model . clone (  )  )  ;", "effectivePom . getDependencies (  )  . addAll ( getGeneratedDependencies (  )  )  ;", "effectivePom . withXmlActions    =    withXmlActions ;", "whenConfiguredActions . execute ( effectivePom )  ;", "return   effectivePom ;", "}", "METHOD_END"], "methodName": ["getEffectivePom"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "if    (  ( configurations )     =  =    null )     {", "return   Collections . emptyList (  )  ;", "}", "return    (  ( List < Dependency >  )     ( pomDependenciesConverter . convert ( getScopeMappings (  )  ,    configurations )  )  )  ;", "}", "METHOD_END"], "methodName": ["getGeneratedDependencies"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "return   getModel (  )  . getGroupId (  )  ;", "}", "METHOD_END"], "methodName": ["getGroupId"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "return   new   MavenProject ( model )  ;", "}", "METHOD_END"], "methodName": ["getMavenProject"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "return   model ;", "}", "METHOD_END"], "methodName": ["getModel"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "return   getModel (  )  . getName (  )  ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "return   getModel (  )  . getPackaging (  )  ;", "}", "METHOD_END"], "methodName": ["getPackaging"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "return   pomDependenciesConverter ;", "}", "METHOD_END"], "methodName": ["getPomDependenciesConverter"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "return   scopeMappings ;", "}", "METHOD_END"], "methodName": ["getScopeMappings"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "return   getModel (  )  . getVersion (  )  ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "CustomModelBuilder   pomBuilder    =    new   CustomModelBuilder ( getModel (  )  )  ;", "InvokerHelper . invokeMethod ( pomBuilder ,     \" project \"  ,    cl )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["project"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "getModel (  )  . setArtifactId ( artifactId )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setArtifactId"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "this . configurations    =    configurations ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setConfigurations"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "getModel (  )  . setDependencies (  (  ( List < Dependency >  )     ( dependencies )  )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setDependencies"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "this . fileResolver    =    fileResolver ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setFileResolver"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "getModel (  )  . setGroupId ( groupId )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setGroupId"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "this . model    =    mavenProject . getModel (  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setMavenProject"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "this . model    =     (  ( Model )     ( model )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setModel"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "getModel (  )  . setName ( name )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "getModel (  )  . setPackaging ( packaging )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setPackaging"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "getModel (  )  . setVersion ( version )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setVersion"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "whenConfiguredActions . add ( ConfigureUtil . configureUsing ( closure )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["whenConfigured"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "whenConfiguredActions . add ( action )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["whenConfigured"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "withXmlActions . addAction ( closure )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["withXml"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "withXmlActions . addAction ( action )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["withXml"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "try    {", "withXmlActions . transform ( pomWriter ,    MavenPom . POM _ FILE _ ENCODING ,    new   internal . ErroringAction < Writer >  (  )     {", "protected   void   doExecute ( Writer   writer )    throws   IOException    {", "new   MavenXpp 3 Writer (  )  . write ( writer ,    getModel (  )  )  ;", "}", "}  )  ;", "}    finally    {", "pomWriter . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["writeNonEffectivePom"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "try    {", "getEffectivePom (  )  . writeNonEffectivePom ( pomWriter )  ;", "}    catch    ( IOExcep   e )     {", "throw   new   UncheckedIOExcep ( e )  ;", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["writeTo"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "IoActions . writeTextFile ( fileResolver . resolve ( path )  ,    MavenPom . POM _ FILE _ ENCODING ,    new   Action < BufferedWriter >  (  )     {", "public   void   execute ( BufferedWriter   writer )     {", "writeTo ( writer )  ;", "}", "}  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["writeTo"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultMavenPom ( configurationContainer ,    new   DefaultConf 2 ScopeMappingContainer ( conf 2 ScopeMappingContainer . getMappings (  )  )  ,    pomDependenciesConverter ,    fileResolver )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultMavenPomFactory"}, {"methodBody": ["METHOD_START", "{", "for    ( DependencyArtifact   artifact    :    dependency . getArtifacts (  )  )     {", "addMaven ( dependenciesPriorityMap ,    dependency ,    artifact . getName (  )  ,    artifact . getType (  )  ,    scope ,    artifact . getClassifier (  )  ,    priority ,    configurations )  ;", "}", "}", "METHOD_END"], "methodName": ["addFromArtifactDescriptor"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultPomDependenciesConverter"}, {"methodBody": ["METHOD_START", "{", "addMavenDependencies ( dependenciesPriorityMap ,    dependency ,    dependency . getName (  )  ,    null ,    scope ,    null ,    priority ,    configurations )  ;", "}", "METHOD_END"], "methodName": ["addFromDependencyDescriptor"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultPomDependenciesConverter"}, {"methodBody": ["METHOD_START", "{", "List < Dependency >    mavenDependencies    =    new   ArrayList < Dependency >  (  )  ;", "if    ( dependency   instanceof   ProjectDependency )     {", "ProjectDependency   projectDependency    =     (  ( ProjectDependency )     ( dependency )  )  ;", "final   String   artifactId    =    determineProjectDependencyArtifactId (  (  ( ProjectDependency )     ( dependency )  )  )  ;", "Configuration   dependencyConfig    =     . getTargetConfiguration ( projectDependency )  ;", "for    ( PublishArtifact   artifactToPublish    :    dependencyConfig . getAllArtifacts (  )  )     {", "Dependency   mavenDependency    =    new   Dependency (  )  ;", "mavenDependency . setArtifactId ( artifactId )  ;", "if    (  (  ( artifactToPublish . getClassifier (  )  )     !  =    null )     &  &     (  !  ( artifactToPublish . getClassifier (  )  . equals (  \"  \"  )  )  )  )     {", "mavenDependency . setClassifier ( artifactToPublish . getClassifier (  )  )  ;", "}", "mavenDependencies . add ( mavenDependency )  ;", "}", "} else    {", "Dependency   mavenDependency    =    new   Dependency (  )  ;", "mavenDependency . setArtifactId ( name )  ;", "mavenDependency . setClassifier ( classifier )  ;", "mavenDependencies . add ( mavenDependency )  ;", "}", "for    ( Dependency   mavenDependency    :    mavenDependencies )     {", "mavenDependency . setGroupId ( dependency . getGroup (  )  )  ;", "mavenDependency . setVersion ( mapToMavenSyntax ( dependency . getVersion (  )  )  )  ;", "mavenDependency . setType ( type )  ;", "mavenDependency . setScope ( scope )  ;", "mavenDependency . setExclusions ( getExclusions ( dependency ,    configurations )  )  ;", "Optional < Dependency >    duplicateDependency    =    findEqualIgnoreScopeVersionAndExclusions ( dependenciesWithPriorities . keySet (  )  ,    mavenDependency )  ;", "if    (  !  ( duplicateDependency . isPresent (  )  )  )     {", "dependenciesWithPriorities . put ( mavenDependency ,    priority )  ;", "} else    {", "int   duplicatePriority    =    dependenciesWithPriorities . get ( duplicateDependency . get (  )  )  ;", "boolean   samePriority    =    priority    =  =    duplicatePriority ;", "boolean   higherPriority    =    priority    >    duplicatePriority ;", "boolean   higherVersion    =     ( compareMavenVersionStrings ( mavenDependency . getVersion (  )  ,    duplicateDependency . get (  )  . getVersion (  )  )  )     >     0  ;", "if    ( higherPriority    |  |    higherVersion )     {", "dependenciesWithPriorities . remove ( duplicateDependency . get (  )  )  ;", "if    (  ! higherPriority )     {", "mavenDependency . setScope ( duplicateDependency . get (  )  . getScope (  )  )  ;", "if    (  ! samePriority )     {", "mavenDependency . setExclusions ( duplicateDependency . get (  )  . getExclusions (  )  )  ;", "}", "}", "int   highestPriority    =     ( higherPriority )     ?    priority    :    duplicatePriority ;", "dependenciesWithPriorities . put ( mavenDependency ,    highestPriority )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["addMavenDependencies"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultPomDependenciesConverter"}, {"methodBody": ["METHOD_START", "{", "String   dependencyVersion    =    emptyToNull ( dependencyVersionString )  ;", "String   duplicateVersion    =    emptyToNull ( duplicateVersionString )  ;", "if    (  ( dependencyVersion    =  =    null )     &  &     ( duplicateVersion    =  =    null )  )     {", "return    0  ;", "}", "if    ( dependencyVersion    =  =    null )     {", "return    -  1  ;", "}", "if    ( duplicateVersion    =  =    null )     {", "return    1  ;", "}", "ArtifactVersion   dependencyArtifactVersion    =    new   DefaultArtifactVersion ( dependencyVersion )  ;", "ArtifactVersion   duplicateArtifactVersion    =    new   DefaultArtifactVersion ( duplicateVersion )  ;", "return   dependencyArtifactVersion . compareTo ( duplicateArtifactVersion )  ;", "}", "METHOD_END"], "methodName": ["compareMavenVersionStrings"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultPomDependenciesConverter"}, {"methodBody": ["METHOD_START", "{", "Map < ModuleDependency ,    Set < Configuration >  >    dependencyToConfigurations    =    createDependencyToConfigurationsMap ( configurations )  ;", "Map < ModuleDependency ,    Conf 2 ScopeMapping >    dMap    =    createDependencyToScopeMap ( conf 2 ScopeMappingContainer ,    dependencyToConfigurations )  ;", "Map < Dependency ,    Integer >    dWithPriorities    =    new   LinkedHashMap < Dependency ,    Integer >  (  )  ;", "for    ( ModuleDependency   dependency    :    dMap . keySet (  )  )     {", "Conf 2 ScopeMapping   conf 2 ScopeMapping    =    dMap . get ( dependency )  ;", "String   scope    =    conf 2 ScopeMapping . getScope (  )  ;", "Integer   priority    =     (  ( conf 2 ScopeMapping . getPriority (  )  )     =  =    null )     ?     0     :    conf 2 ScopeMapping . getPriority (  )  ;", "Set < Configuration >    dependencyConfigurations    =    dependencyToConfigurations . get ( dependency )  ;", "if    (  ( dependency . getArtifacts (  )  . size (  )  )     =  =     0  )     {", "addFromDependencyDescriptor ( dWithPriorities ,    dependency ,    scope ,    priority ,    dependencyConfigurations )  ;", "} else    {", "addFromArtifactDescriptor ( dWithPriorities ,    dependency ,    scope ,    priority ,    dependencyConfigurations )  ;", "}", "}", "return   new   ArrayList < Dependency >  ( dWithPriorities . keySet (  )  )  ;", "}", "METHOD_END"], "methodName": ["convert"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultPomDependenciesConverter"}, {"methodBody": ["METHOD_START", "{", "Map < ModuleDependency ,    Set < Configuration >  >    dependencySetMap    =    new   LinkedHashMap < ModuleDependency ,    Set < Configuration >  >  (  )  ;", "for    ( Configuration   configuration    :    configurations )     {", "for    ( ModuleDependency   dependency    :    configuration . get (  )  . withType ( ModuleDependency . class )  )     {", "if    (  ( dependencySetMap . get ( dependency )  )     =  =    null )     {", "dependencySetMap . put ( dependency ,    new   HashSet < Configuration >  (  )  )  ;", "}", "dependencySetMap . get ( dependency )  . add ( configuration )  ;", "}", "}", "return   dependencySetMap ;", "}", "METHOD_END"], "methodName": ["createDependencyToConfigurationsMap"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultPomDependenciesConverter"}, {"methodBody": ["METHOD_START", "{", "Map < ModuleDependency ,    Conf 2 ScopeMapping >    dependencyToScope    =    new   LinkedHashMap < ModuleDependency ,    Conf 2 ScopeMapping >  (  )  ;", "for    ( ModuleDependency   dependency    :    dependencyToConfigurations . keySet (  )  )     {", "Conf 2 ScopeMapping   conf 2 ScopeDependencyMapping    =    conf 2 ScopeMappingContainer . getMapping ( dependencyToConfigurations . get ( dependency )  )  ;", "if    (  !  ( useScope ( conf 2 ScopeMappingContainer ,    conf 2 ScopeDependencyMapping )  )  )     {", "continue ;", "}", "dependencyToScope . put ( findDependency ( dependency ,    conf 2 ScopeDependencyMapping . getConfiguration (  )  )  ,    conf 2 ScopeDependencyMapping )  ;", "}", "return   dependencyToScope ;", "}", "METHOD_END"], "methodName": ["createDependencyToScopeMap"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultPomDependenciesConverter"}, {"methodBody": ["METHOD_START", "{", "return   new   ProjectDependencyArtifactIdExtractorHack ( dependency )  . extract (  )  ;", "}", "METHOD_END"], "methodName": ["determineProjectDependencyArtifactId"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultPomDependenciesConverter"}, {"methodBody": ["METHOD_START", "{", "for    ( ModuleDependency   configurationDependency    :    configuration . getDependencies (  )  . withType ( ModuleDependency . class )  )     {", "if    ( dependency . equals ( configurationDependency )  )     {", "return   configurationDependency ;", "}", "}", "throw   new   GradleException (  \" Dependency   could   not   be   found .    We   should   never   get   here !  \"  )  ;", "}", "METHOD_END"], "methodName": ["findDependency"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultPomDependenciesConverter"}, {"methodBody": ["METHOD_START", "{", "final   String   candidateManagementKey    =    candidate . getManagementKey (  )  ;", "return   Iterables . tryFind ( d ,    new   com . google . common . base . Predicate < Dependency >  (  )     {", "@ Override", "public   boolean   apply ( Dependency   dependency )     {", "return   dependency . getManagementKey (  )  . equals ( candidateManagementKey )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["findEqualIgnoreScopeVersionAndExclusions"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultPomDependenciesConverter"}, {"methodBody": ["METHOD_START", "{", "return   excludeRuleConverter ;", "}", "METHOD_END"], "methodName": ["getExcludeRuleConverter"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultPomDependenciesConverter"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( dependency . isTransitive (  )  )  )     {", "return    . EXCLUDE _ ALL ;", "}", "List < Exclusion >    mavenExclusions    =    new   ArrayList < Exclusion >  (  )  ;", "Set < ExcludeRule >    excludeRules    =    new   HashSet < ExcludeRule >  ( dependency . getExcludeRules (  )  )  ;", "for    ( Configuration   configuration    :    configurations )     {", "excludeRules . addAll ( configuration . getExcludeRules (  )  )  ;", "}", "for    ( ExcludeRule   excludeRule    :    excludeRules )     {", "Exclusion   mavenExclusion    =     (  ( Exclusion )     ( excludeRuleConverter . convert ( excludeRule )  )  )  ;", "if    ( mavenExclusion    !  =    null )     {", "mavenExclusions . add ( mavenExclusion )  ;", "}", "}", "return   mavenExclusions ;", "}", "METHOD_END"], "methodName": ["getExclusions"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultPomDependenciesConverter"}, {"methodBody": ["METHOD_START", "{", "String   targetConfiguration    =    dependency . getTargetConfiguration (  )  ;", "if    ( targetConfiguration    =  =    null )     {", "targetConfiguration    =    y . DEFAULT _ CONFIGURATION ;", "}", "return   dependency . getyProject (  )  . getConfigurations (  )  . getByName ( targetConfiguration )  ;", "}", "METHOD_END"], "methodName": ["getTargetConfiguration"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultPomDependenciesConverter"}, {"methodBody": ["METHOD_START", "{", "Exclusion   excludeAll    =    new   Exclusion (  )  ;", "excludeAll . setGroupId (  \"  *  \"  )  ;", "excludeAll . setArtifactId (  \"  *  \"  )  ;", "return   Collecs . singletonList ( excludeAll )  ;", "}", "METHOD_END"], "methodName": ["initExcludeAll"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultPomDependenciesConverter"}, {"methodBody": ["METHOD_START", "{", "return   versionRangeMapper . map ( version )  ;", "}", "METHOD_END"], "methodName": ["mapToMavenSyntax"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultPomDependenciesConverter"}, {"methodBody": ["METHOD_START", "{", "return    (  ( conf 2 ScopeMapping . getScope (  )  )     !  =    null )     |  |     (  !  ( conf 2 ScopeMappingContainer . isSkipUnmappedConfs (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["useScope"], "fileName": "org.gradle.api.publication.maven.internal.pom.DefaultPomDependenciesConverter"}, {"methodBody": ["METHOD_START", "{", "logger . debug ( s )  ;", "}", "METHOD_END"], "methodName": ["debug"], "fileName": "org.gradle.api.publication.maven.internal.pom.PlexusLoggerAdapter"}, {"methodBody": ["METHOD_START", "{", "logger . debug ( s ,    throwable )  ;", "}", "METHOD_END"], "methodName": ["debug"], "fileName": "org.gradle.api.publication.maven.internal.pom.PlexusLoggerAdapter"}, {"methodBody": ["METHOD_START", "{", "logger . error ( s )  ;", "}", "METHOD_END"], "methodName": ["error"], "fileName": "org.gradle.api.publication.maven.internal.pom.PlexusLoggerAdapter"}, {"methodBody": ["METHOD_START", "{", "logger . error ( s ,    throwable )  ;", "}", "METHOD_END"], "methodName": ["error"], "fileName": "org.gradle.api.publication.maven.internal.pom.PlexusLoggerAdapter"}, {"methodBody": ["METHOD_START", "{", "logger . error ( s )  ;", "}", "METHOD_END"], "methodName": ["fatalError"], "fileName": "org.gradle.api.publication.maven.internal.pom.PlexusLoggerAdapter"}, {"methodBody": ["METHOD_START", "{", "logger . error ( s ,    throwable )  ;", "}", "METHOD_END"], "methodName": ["fatalError"], "fileName": "org.gradle.api.publication.maven.internal.pom.PlexusLoggerAdapter"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getChildLogger"], "fileName": "org.gradle.api.publication.maven.internal.pom.PlexusLoggerAdapter"}, {"methodBody": ["METHOD_START", "{", "return   logger . getName (  )  ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.api.publication.maven.internal.pom.PlexusLoggerAdapter"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getThreshold"], "fileName": "org.gradle.api.publication.maven.internal.pom.PlexusLoggerAdapter"}, {"methodBody": ["METHOD_START", "{", "logger . info ( s )  ;", "}", "METHOD_END"], "methodName": ["info"], "fileName": "org.gradle.api.publication.maven.internal.pom.PlexusLoggerAdapter"}, {"methodBody": ["METHOD_START", "{", "logger . info ( s ,    throwable )  ;", "}", "METHOD_END"], "methodName": ["info"], "fileName": "org.gradle.api.publication.maven.internal.pom.PlexusLoggerAdapter"}, {"methodBody": ["METHOD_START", "{", "return   logger . isDebugEnabled (  )  ;", "}", "METHOD_END"], "methodName": ["isDebugEnabled"], "fileName": "org.gradle.api.publication.maven.internal.pom.PlexusLoggerAdapter"}, {"methodBody": ["METHOD_START", "{", "return   logger . isErrorEnabled (  )  ;", "}", "METHOD_END"], "methodName": ["isErrorEnabled"], "fileName": "org.gradle.api.publication.maven.internal.pom.PlexusLoggerAdapter"}, {"methodBody": ["METHOD_START", "{", "return   logger . isErrorEnabled (  )  ;", "}", "METHOD_END"], "methodName": ["isFatalErrorEnabled"], "fileName": "org.gradle.api.publication.maven.internal.pom.PlexusLoggerAdapter"}, {"methodBody": ["METHOD_START", "{", "return   logger . isInfoEnabled (  )  ;", "}", "METHOD_END"], "methodName": ["isInfoEnabled"], "fileName": "org.gradle.api.publication.maven.internal.pom.PlexusLoggerAdapter"}, {"methodBody": ["METHOD_START", "{", "return   logger . isWarnEnabled (  )  ;", "}", "METHOD_END"], "methodName": ["isWarnEnabled"], "fileName": "org.gradle.api.publication.maven.internal.pom.PlexusLoggerAdapter"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["setThreshold"], "fileName": "org.gradle.api.publication.maven.internal.pom.PlexusLoggerAdapter"}, {"methodBody": ["METHOD_START", "{", "logger . warn ( s )  ;", "}", "METHOD_END"], "methodName": ["warn"], "fileName": "org.gradle.api.publication.maven.internal.pom.PlexusLoggerAdapter"}, {"methodBody": ["METHOD_START", "{", "logger . warn ( s ,    throwable )  ;", "}", "METHOD_END"], "methodName": ["warn"], "fileName": "org.gradle.api.publication.maven.internal.pom.PlexusLoggerAdapter"}, {"methodBody": ["METHOD_START", "{", "Collection < Upload >    tasks    =    project . getTasks (  )  . withType ( Upload . class )  ;", "Collection < ArtifactRepository >    repositories    =    getRepositories ( tasks )  ;", "if    (  !  ( onlyContainsMavenResolvers ( repositories )  )  )     {", "return   project . getName (  )  ;", "}", "Collection < MavenDeployer >    deployers    =    getMavenDeployers ( repositories )  ;", "Set < String >    artifactIds    =    gets ( deployers )  ;", "if    (  ( artifactIds . size (  )  )     =  =     1  )     {", "String   artifactId    =    artifactIds . iterator (  )  . next (  )  ;", "if    (  ( artifactId    !  =    null )     &  &     (  !  ( artifactId . equals ( EMPTY _ PROJECT _ ARTIFACT _ ID )  )  )  )     {", "return   artifactId ;", "}", "}", "String   baseName    =    getArchivesBaseName (  )  ;", "return   baseName    !  =    null    ?    baseName    :    project . getName (  )  ;", "}", "METHOD_END"], "methodName": ["extract"], "fileName": "org.gradle.api.publication.maven.internal.pom.ProjectDependencyArtifactIdExtractorHack"}, {"methodBody": ["METHOD_START", "{", "BasePluginConvention   convention    =    project . getConvention (  )  . findPlugin ( BasePluginConvention . class )  ;", "return   convention    !  =    null    ?    convention . getArchivesBaseName (  )     :    null ;", "}", "METHOD_END"], "methodName": ["getArchivesBaseName"], "fileName": "org.gradle.api.publication.maven.internal.pom.ProjectDependencyArtifactIdExtractorHack"}, {"methodBody": ["METHOD_START", "{", "Set < String >    result    =    Sets . newHashSet (  )  ;", "for    ( MavenDeployer   deployer    :    deployers )     {", "result . add ( deployer . getPom (  )  . get (  )  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["getArtifactIds"], "fileName": "org.gradle.api.publication.maven.internal.pom.ProjectDependencyArtifactIdExtractorHack"}, {"methodBody": ["METHOD_START", "{", "Collection < MavenDeployer >    result    =    Lists . newArrayList (  )  ;", "for    ( Repository   repository    :    repositories )     {", "if    ( repository   instanceof   MavenDeployer )     {", "result . add (  (  ( MavenDeployer )     ( repository )  )  )  ;", "}", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["getMavenDeployers"], "fileName": "org.gradle.api.publication.maven.internal.pom.ProjectDependencyArtifactIdExtractorHack"}, {"methodBody": ["METHOD_START", "{", "Collection < ArtifactRepository >    result    =    Lists . newArrayList (  )  ;", "for    ( Upload   task    :    tasks )     {", "result . addAll ( task . getRepositories (  )  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["getRepositories"], "fileName": "org.gradle.api.publication.maven.internal.pom.ProjectDependencyArtifactIdExtractorHack"}, {"methodBody": ["METHOD_START", "{", "for    ( ArtifactRepository   repository    :    repositories )     {", "if    (  !  ( repository   instanceof   MavenResolver )  )     {", "return   false ;", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["onlyContainsMavenResolvers"], "fileName": "org.gradle.api.publication.maven.internal.pom.ProjectDependencyArtifactIdExtractorHack"}, {"methodBody": ["METHOD_START", "{", "RepositoryTransportDeployWagon . CURRENT _ DELEGATE . set ( adapter )  ;", "}", "METHOD_END"], "methodName": ["contextualize"], "fileName": "org.gradle.api.publication.maven.internal.wagon.RepositoryTransportDeployWagon"}, {"methodBody": ["METHOD_START", "{", "RepositoryTransportDeployWagon . CURRENT _ DELEGATE . remove (  )  ;", "}", "METHOD_END"], "methodName": ["decontextualize"], "fileName": "org.gradle.api.publication.maven.internal.wagon.RepositoryTransportDeployWagon"}, {"methodBody": ["METHOD_START", "{", "return   RepositoryTransportDeployWagon . CURRENT _ DELEGATE . get (  )  ;", "}", "METHOD_END"], "methodName": ["getDelegate"], "fileName": "org.gradle.api.publication.maven.internal.wagon.RepositoryTransportDeployWagon"}, {"methodBody": ["METHOD_START", "{", "return   new   SessionEvent ( this ,    e )  ;", "}", "METHOD_END"], "methodName": ["sessionEvent"], "fileName": "org.gradle.api.publication.maven.internal.wagon.RepositoryTransportDeployWagon"}, {"methodBody": ["METHOD_START", "{", "throw   new   GradleException (  (  \" This   wagon   does   not   yet   support   the   method :  \"     +    s )  )  ;", "}", "METHOD_END"], "methodName": ["throwNotImplemented"], "fileName": "org.gradle.api.publication.maven.internal.wagon.RepositoryTransportDeployWagon"}, {"methodBody": ["METHOD_START", "{", "TransferEvent   transferEvent    =    new   TransferEvent ( this ,    resource ,    eventType ,    requestType )  ;", "transferEvent . setTimestamp ( new   Date (  )  . getTime (  )  )  ;", "return   transferEvent ;", "}", "METHOD_END"], "methodName": ["transferEvent"], "fileName": "org.gradle.api.publication.maven.internal.wagon.RepositoryTransportDeployWagon"}, {"methodBody": ["METHOD_START", "{", "return   new   TransferEvent ( this ,    resource ,    e ,    requestType )  ;", "}", "METHOD_END"], "methodName": ["transferEvent"], "fileName": "org.gradle.api.publication.maven.internal.wagon.RepositoryTransportDeployWagon"}, {"methodBody": ["METHOD_START", "{", "return   new   ExternalResourceName ( rootUri ,    resource )  ;", "}", "METHOD_END"], "methodName": ["getLocationForResource"], "fileName": "org.gradle.api.publication.maven.internal.wagon.RepositoryTransportWagonAdapter"}, {"methodBody": ["METHOD_START", "{", "ExternalResourceName   location    =    getLocationForResource ( resourceName )  ;", "ExternalResource   resource    =    transport . get (  )  . resource ( location )  ;", "return    ( resource . writeToIfPresent ( destination )  )     !  =    null ;", "}", "METHOD_END"], "methodName": ["getRemoteFile"], "fileName": "org.gradle.api.publication.maven.internal.wagon.RepositoryTransportWagonAdapter"}, {"methodBody": ["METHOD_START", "{", "transport . getRepository (  )  . withProgressLogging (  )  . resource ( getLocationForResource ( resourceName )  )  . put ( content )  ;", "}", "METHOD_END"], "methodName": ["putRemoteFile"], "fileName": "org.gradle.api.publication.maven.internal.wagon.RepositoryTransportWagonAdapter"}, {"methodBody": ["METHOD_START", "{", "return   String . format (  \" Invalid   publication    '  % s '  :     % s \"  ,    publicationName ,    error )  ;", "}", "METHOD_END"], "methodName": ["formatMessage"], "fileName": "org.gradle.api.publish.maven.InvalidMavenPublicationException"}, {"methodBody": ["METHOD_START", "{", "registration . addProvider ( new   MavenPublishServices . ComponentRegistrationAction (  )  )  ;", "}", "METHOD_END"], "methodName": ["registerBuildServices"], "fileName": "org.gradle.api.publish.maven.internal.MavenPublishServices"}, {"methodBody": ["METHOD_START", "{", "buildDependencies . add ( tasks )  ;", "}", "METHOD_END"], "methodName": ["builtBy"], "fileName": "org.gradle.api.publish.maven.internal.artifact.DefaultMavenArtifact"}, {"methodBody": ["METHOD_START", "{", "return   buildDependencies ;", "}", "METHOD_END"], "methodName": ["getBuildDependencies"], "fileName": "org.gradle.api.publish.maven.internal.artifact.DefaultMavenArtifact"}, {"methodBody": ["METHOD_START", "{", "return   classifier ;", "}", "METHOD_END"], "methodName": ["getClassifier"], "fileName": "org.gradle.api.publish.maven.internal.artifact.DefaultMavenArtifact"}, {"methodBody": ["METHOD_START", "{", "return   extension ;", "}", "METHOD_END"], "methodName": ["getExtension"], "fileName": "org.gradle.api.publish.maven.internal.artifact.DefaultMavenArtifact"}, {"methodBody": ["METHOD_START", "{", "return   file ;", "}", "METHOD_END"], "methodName": ["getFile"], "fileName": "org.gradle.api.publish.maven.internal.artifact.DefaultMavenArtifact"}, {"methodBody": ["METHOD_START", "{", "this . classifier    =    classifier ;", "}", "METHOD_END"], "methodName": ["setClassifier"], "fileName": "org.gradle.api.publish.maven.internal.artifact.DefaultMavenArtifact"}, {"methodBody": ["METHOD_START", "{", "this . extension    =    extension ;", "}", "METHOD_END"], "methodName": ["setExtension"], "fileName": "org.gradle.api.publish.maven.internal.artifact.DefaultMavenArtifact"}, {"methodBody": ["METHOD_START", "{", "MavenArtifact   artifact    =    mavenArtifactParser . parseNotation ( source )  ;", "add ( artifact )  ;", "return   artifact ;", "}", "METHOD_END"], "methodName": ["artifact"], "fileName": "org.gradle.api.publish.maven.internal.artifact.DefaultMavenArtifactSet"}, {"methodBody": ["METHOD_START", "{", "MavenArtifact   artifact    =    artifact ( source )  ;", "config . execute ( artifact )  ;", "return   artifact ;", "}", "METHOD_END"], "methodName": ["artifact"], "fileName": "org.gradle.api.publish.maven.internal.artifact.DefaultMavenArtifactSet"}, {"methodBody": ["METHOD_START", "{", "return   files ;", "}", "METHOD_END"], "methodName": ["getFiles"], "fileName": "org.gradle.api.publish.maven.internal.artifact.DefaultMavenArtifactSet"}, {"methodBody": ["METHOD_START", "{", "MavenArtifactNotationParserFactory . FileNotationConverter   fileNotationConverter    =    new   MavenArtifactNotationParserFactory . FileNotationConverter ( fileResolver )  ;", "MavenArtifactNotationParserFactory . ArchiveTaskNotationConverter   archiveTaskNotationConverter    =    new   MavenArtifactNotationParserFactory . ArchiveTaskNotationConverter (  )  ;", "MavenArtifactNotationParserFactory . PublishArtifactNotationConverter   publishArtifactNotationConverter    =    new   MavenArtifactNotationParserFactory . PublishArtifactNotationConverter (  )  ;", "NotationParser < Object ,    MavenArtifact >    sourceNotationParser    =    NotationParserBuilder . toType ( MavenArtifact . class )  . fromType ( AbstractArchiveTask . class ,    archiveTaskNotationConverter )  . fromType ( PublishArtifact . class ,    publishArtifactNotationConverter )  . converter ( fileNotationConverter )  . toComposite (  )  ;", "MavenArtifactNotationParserFactory . MavenArtifactMapNotationConverter   mavenArtifactMapNotationConverter    =    new   MavenArtifactNotationParserFactory . MavenArtifactMapNotationConverter ( sourceNotationParser )  ;", "NotationParserBuilder < MavenArtifact >    parserBuilder    =    NotationParserBuilder . toType ( MavenArtifact . class )  . fromType ( AbstractArchiveTask . class ,    archiveTaskNotationConverter )  . fromType ( PublishArtifact . class ,    publishArtifactNotationConverter )  . converter ( mavenArtifactMapNotationConverter )  . converter ( fileNotationConverter )  ;", "return   parserBuilder . toComposite (  )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.api.publish.maven.internal.artifact.MavenArtifactNotationParserFactory"}, {"methodBody": ["METHOD_START", "{", "return   artifactId ;", "}", "METHOD_END"], "methodName": ["getArtifactId"], "fileName": "org.gradle.api.publish.maven.internal.dependencies.DefaultMavenDependency"}, {"methodBody": ["METHOD_START", "{", "return   artifacts ;", "}", "METHOD_END"], "methodName": ["getArtifacts"], "fileName": "org.gradle.api.publish.maven.internal.dependencies.DefaultMavenDependency"}, {"methodBody": ["METHOD_START", "{", "return   excludeRules ;", "}", "METHOD_END"], "methodName": ["getExcludeRules"], "fileName": "org.gradle.api.publish.maven.internal.dependencies.DefaultMavenDependency"}, {"methodBody": ["METHOD_START", "{", "return   groupId ;", "}", "METHOD_END"], "methodName": ["getGroupId"], "fileName": "org.gradle.api.publish.maven.internal.dependencies.DefaultMavenDependency"}, {"methodBody": ["METHOD_START", "{", "return   version ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "org.gradle.api.publish.maven.internal.dependencies.DefaultMavenDependency"}, {"methodBody": ["METHOD_START", "{", "if    (  ( packaging )     =  =    null )     {", "return   mavenPdeterminePackagingFromArtifacts (  )  ;", "}", "return   packaging ;", "}", "METHOD_END"], "methodName": ["getPackaging"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "return   mavenPublication . getMavenProjectIdentity (  )  ;", "}", "METHOD_END"], "methodName": ["getProjectIdentity"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "return   mavenPublication . getRuntimeDependencies (  )  ;", "}", "METHOD_END"], "methodName": ["getRuntimeDependencies"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "return   xmlAction ;", "}", "METHOD_END"], "methodName": ["getXmlAction"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "this . packaging    =    packaging ;", "}", "METHOD_END"], "methodName": ["setPackaging"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "xmlAction . add ( new   UserCodeAction < XmlProvider >  (  \" Could   not   apply   withXml (  )    to   generated   POM \"  ,    action )  )  ;", "}", "METHOD_END"], "methodName": ["withXml"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPom"}, {"methodBody": ["METHOD_START", "{", "return   artifactId ;", "}", "METHOD_END"], "methodName": ["getArtifactId"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenProjectIdentity"}, {"methodBody": ["METHOD_START", "{", "return   groupId ;", "}", "METHOD_END"], "methodName": ["getGroupId"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenProjectIdentity"}, {"methodBody": ["METHOD_START", "{", "return   version ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenProjectIdentity"}, {"methodBody": ["METHOD_START", "{", "this . artifactId    =    artifactId ;", "}", "METHOD_END"], "methodName": ["setArtifactId"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenProjectIdentity"}, {"methodBody": ["METHOD_START", "{", "this . groupId    =    groupId ;", "}", "METHOD_END"], "methodName": ["setGroupId"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenProjectIdentity"}, {"methodBody": ["METHOD_START", "{", "this . version    =    version ;", "}", "METHOD_END"], "methodName": ["setVersion"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenProjectIdentity"}, {"methodBody": ["METHOD_START", "{", "dependencies . add ( new   DefaultMavenDependency ( dependency . getGroup (  )  ,    dependency . getName (  )  ,    dependency . getVersion (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["addDependencyConstraint"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "dependencies . add ( new   DefaultMavenDependency ( dependency . getGroup (  )  ,    dependency . getName (  )  ,    dependency . getVersion (  )  ,    dependency . getArtifacts (  )  ,    DefaultMavenPublication . getExcludeRules ( dependency )  )  )  ;", "}", "METHOD_END"], "methodName": ["addModuleDependency"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "ModuleVersionIdentifier   identifier    =    projectDependencyResolver . resolve ( ModuleVersionIdentifier . class ,    dependency )  ;", "dependencies . add ( new   DefaultMavenDependency ( identifier . getGroup (  )  ,    identifier . getName (  )  ,    identifier . getVersion (  )  ,    Collections .  < DependencyArtifact > emptyList (  )  ,     . getExcludeRules ( dependency )  )  )  ;", "}", "METHOD_END"], "methodName": ["addProjectDependency"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "return   mavenArtifacts . artifact ( source )  ;", "}", "METHOD_END"], "methodName": ["artifact"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "return   mavenArtifacts . artifact ( source ,    config )  ;", "}", "METHOD_END"], "methodName": ["artifact"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "return   new   MavenNormalizedPublication ( name ,    getPomFile (  )  ,    getGradleMetadataFile (  )  ,    projectIdentity ,    getArtifacts (  )  ,    determineMainArtifact (  )  )  ;", "}", "METHOD_END"], "methodName": ["asNormalisedPublication"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "for    ( MavenArtifact   mavenArtifact    :    mavenArtifacts )     {", "if    (  (  ( source . getFile (  )  . equals ( mavenArtifact . getFile (  )  )  )     &  &     ( source . getExtension (  )  . equals ( mavenArtifact . getExtension (  )  )  )  )     &  &     ( Strings . nullToEmpty ( source . getClassifier (  )  )  . equals ( Strings . nullToEmpty ( mavenArtifact . getClassifier (  )  )  )  )  )     {", "return ;", "}", "}", "throw   new   PublishException (  \" Cannot      module   metadata   where   component   artifacts   are   modified .  \"  )  ;", "}", "METHOD_END"], "methodName": ["checkThatArtifactIsPublishedUnmodified"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "if    ( JAVA _ API . equals ( usage . getName (  )  )  )     {", "return   Dependencies ;", "}", "return   runtimeDependencies ;", "}", "METHOD_END"], "methodName": ["dependenciesFor"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "if    ( JAVA _ API . equals ( usage . getName (  )  )  )     {", "return   DependencyConstraints ;", "}", "return   runtimeDependencyConstraints ;", "}", "METHOD_END"], "methodName": ["dependencyConstraintsFor"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "Set < MavenArtifact >    unclassifiedArtifacts    =    getUnclassifiedArtifactsWithExtension (  )  ;", "if    ( unclassifiedArtifacts . isEmpty (  )  )     {", "return   null ;", "}", "if    (  ( unclassifiedArtifacts . size (  )  )     =  =     1  )     {", "return   unclassifiedArtifacts . iterator (  )  . next (  )  ;", "}", "for    ( MavenArtifact   unclassifiedArtifact    :    unclassifiedArtifacts )     {", "String   packaging    =    pom . getPackaging (  )  ;", "if    ( unclassifiedArtifact . getExtension (  )  . equals ( packaging )  )     {", "return   unclassifiedArtifact ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["determineMainArtifact"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "Set < MavenArtifact >    unclassifiedArtifacts    =    getUnclassifiedArtifactsWithExtension (  )  ;", "if    (  ( unclassifiedArtifacts . size (  )  )     =  =     1  )     {", "return   unclassifiedArtifacts . iterator (  )  . next (  )  . getExtension (  )  ;", "}", "return    \" pom \"  ;", "}", "METHOD_END"], "methodName": ["determinePackagingFromArtifacts"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . component )     !  =    null )     {", "throw   new   InvalidUserDataException ( String . format (  \" Maven   publication    '  % s '    cannot   include   multiple   components \"  ,    name )  )  ;", "}", "this . component    =     (  ( SoftwareComponentInternal )     ( component )  )  ;", "Set <  . ArtifactKey >    seenArtifacts    =    Sets . newHashSet (  )  ;", "Set < ModuleDependency >    seenDependencies    =    Sets . newHashSet (  )  ;", "Set < DependencyConstraint >    seenConstraints    =    Sets . newHashSet (  )  ;", "for    ( UsageContext   usageContext    :    getSortedUsageContexts (  )  )     {", "for    ( PublishArtifact   publishArtifact    :    usageContext . getArtifacts (  )  )     {", ". ArtifactKey   key    =    new    . ArtifactKey ( publishArtifact . getFile (  )  ,    publishArtifact . getClassifier (  )  ,    publishArtifact . getExtension (  )  )  ;", "if    ( seenArtifacts . add ( key )  )     {", "artifact ( publishArtifact )  ;", "}", "}", "Set < MavenDependencyInternal >    dependencies    =    dependenciesFor ( usageContext . getUsage (  )  )  ;", "for    ( ModuleDependency   dependency    :    usageContext . getDependencies (  )  )     {", "if    ( seenDependencies . add ( dependency )  )     {", "if    ( dependency   instanceof   ProjectDependency )     {", "addProjectDependency (  (  ( ProjectDependency )     ( dependency )  )  ,    dependencies )  ;", "} else    {", "addModuleDependency ( dependency ,    dependencies )  ;", "}", "}", "}", "Set < MavenDependency >    dependencyConstraints    =    dependencyConstraintsFor ( usageContext . getUsage (  )  )  ;", "for    ( DependencyConstraint   dependency    :    usageContext . getDependencyConstraints (  )  )     {", "if    (  ( seenConstraints . add ( dependency )  )     &  &     (  !  ( dependency . getVersionConstraint (  )  . getPreferredVersion (  )  . isEmpty (  )  )  )  )     {", "addDependencyConstraint ( dependency ,    dependencyConstraints )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["from"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "return   apiDependencies ;", "}", "METHOD_END"], "methodName": ["getApiDependencies"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   artifactPath    =    new   StringBuilder (  )  ;", "ModuleVersIdentifier   coordinates    =    getCoordinates (  )  ;", "artifactPath . append ( coordinates . getName (  )  )  ;", "artifactPath . append (  '  -  '  )  ;", "artifactPath . append ( coordinates . getVers (  )  )  ;", "if    ( GUtil . isTrue ( classifier )  )     {", "artifactPath . append (  '  -  '  )  ;", "artifactPath . append ( classifier )  ;", "}", "if    ( GUtil . isTrue ( extens )  )     {", "artifactPath . append (  '  .  '  )  ;", "artifactPath . append ( extens )  ;", "}", "return   artifactPath . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getArtifactFileName"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "return   projectIdentity . getArtifactId (  )  ;", "}", "METHOD_END"], "methodName": ["getArtifactId"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "return   mavenArtifacts ;", "}", "METHOD_END"], "methodName": ["getArtifacts"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultModuleVersionIdentifier ( getGroupId (  )  ,    getArtifactId (  )  ,    getVersion (  )  )  ;", "}", "METHOD_END"], "methodName": ["getCoordinates"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "return   dependency . isTransitive (  )     ?    dependency . getExcludeRules (  )     :    DefaultMavenPublication . EXCLUDE _ ALL _ RULE ;", "}", "METHOD_END"], "methodName": ["getExcludeRules"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "if    (  ( moduetadataFi    =  =    null )     {", "return   null ;", "}", "return   moduetadataFigetSingi )  ;", "}", "METHOD_END"], "methodName": ["getGradleMetadataFile"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "return   projectIdentity . getGroupId (  )  ;", "}", "METHOD_END"], "methodName": ["getGroupId"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "return   projectIdentity ;", "}", "METHOD_END"], "methodName": ["getMavenProjectIdentity"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "return   pom ;", "}", "METHOD_END"], "methodName": ["getPom"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "if    (  ( pomFile )     =  =    null )     {", "throw   new   IllegalStateException (  \" pomFile   not   set   for    \"  )  ;", "}", "return   pomFile . getSingleFile (  )  ;", "}", "METHOD_END"], "methodName": ["getPomFile"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "if    (  ( moduleMetadataFile )     =  =    null )     {", "return   new   internal . file . UnionFileCollection ( mavenArtifacts . getFiles (  )  ,    pomFile )  ;", "}", "return   new   internal . file . UnionFileCollection ( mavenArtifacts . getFiles (  )  ,    pomFile ,    moduleMetadataFile )  ;", "}", "METHOD_END"], "methodName": ["getPublishableFiles"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "return   getArtifactFileName ( source . getClassifier (  )  ,    source . getExtension (  )  )  ;", "}", "METHOD_END"], "methodName": ["getPublishedUrl"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "return   runtimeDependencies ;", "}", "METHOD_END"], "methodName": ["getRuntimeDependencies"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "List < UsageContext >    usageContexts    =    Lists . newArrayList ( this . component . getUsages (  )  )  ;", "Collections . sort ( usageContexts ,     . USAGE _ ORDERING )  ;", "return   usageContexts ;", "}", "METHOD_END"], "methodName": ["getSortedUsageContexts"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "return   CollectionUtils . filter ( mavenArtifacts ,    new   Spec < MavenArtifact >  (  )     {", "public   boolean   isSatisfiedBy ( MavenArtifact   mavenArtifact )     {", "return    ( hasNoClassifier ( mavenArtifact )  )     &  &     ( hasExtension ( mavenArtifact )  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["getUnclassifiedArtifactsWithExtension"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "return   projectIdentity . getVersion (  )  ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "return    (  ( element . getExtension (  )  )     !  =    null )     &  &     (  ( element . getExtension (  )  . length (  )  )     >     0  )  ;", "}", "METHOD_END"], "methodName": ["hasExtension"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "return    (  ( element . getClassifier (  )  )     =  =    null )     |  |     (  ( element . getClassifier (  )  . length (  )  )     =  =     0  )  ;", "}", "METHOD_END"], "methodName": ["hasNoClassifier"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "configure . execute ( pom )  ;", "}", "METHOD_END"], "methodName": ["pom"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "this . isPublishWithOriginalFileName    =    true ;", "}", "METHOD_END"], "methodName": ["publishWithOriginalFileName"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "projectIdentity . setArtifactId ( artifactId )  ;", "}", "METHOD_END"], "methodName": ["setArtifactId"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "mavenArtifacts . clear (  )  ;", "for    ( Object   source    :    sources )     {", "artifact ( source )  ;", "}", "}", "METHOD_END"], "methodName": ["setArtifacts"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "this . moduleMetadataFile    =    file ;", "}", "METHOD_END"], "methodName": ["setGradleModuleMetadataFile"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "projectIdentity . setGroupId ( groupId )  ;", "}", "METHOD_END"], "methodName": ["setGroupId"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "this . pomFile    =    pomFile ;", "}", "METHOD_END"], "methodName": ["setPomFile"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "projectIdentity . setVersion ( version )  ;", "}", "METHOD_END"], "methodName": ["setVersion"], "fileName": "org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication"}, {"methodBody": ["METHOD_START", "{", "MavenArtifact   mainArtifact    =    publication . getMainArtifact (  )  ;", "if    ( mainArtifact    !  =    null )     {", "Action . setMainArtifact ( mainArtifact . getFile (  )  )  ;", "}", "for    ( MavenArtifact   mavenArtifact    :    publication . getArtifacts (  )  )     {", "if    ( mavenArtifact    =  =    mainArtifact )     {", "continue ;", "}", "Action . addAdditionalArtifact ( mavenArtifact . getFile (  )  ,    GUtil . elvis ( mavenArtifact . getExtension (  )  ,     \"  \"  )  ,    GUtil . elvis ( mavenArtifact . getClassifier (  )  ,     \"  \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addPomAndArtifacts"], "fileName": "org.gradle.api.publish.maven.internal.publisher.AbstractMavenPublisher"}, {"methodBody": ["METHOD_START", "{", "LoggingManagerInternal   loggingManager    =    loggingManagerFactory . create (  )  ;", "loggingManager . captureStandardOutput ( INFO )  . start (  )  ;", "try    {", "Action (  )  ;", "}    finally    {", "loggingManager . stop (  )  ;", "}", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.api.publish.maven.internal.publisher.AbstractMavenPublisher"}, {"methodBody": ["METHOD_START", "{", "if    ( artifactRepository    =  =    null )     {", ". LOGGER . info (  \" Publishing   to   maven   local   repository \"  )  ;", "} else    {", ". LOGGER . info (  \" Publishing   to   repository    '  {  }  '     (  {  }  )  \"  ,    artifactRepository . getName (  )  ,    artifactRepository . getUrl (  )  )  ;", "}", "MavenPublishAction   deployTask    =    createDeployTask ( publication . getPomFile (  )  ,    publication . getMetadataFile (  )  ,    mavenRepositoryLocator ,    artifactRepository )  ;", "addPomAndArtifacts ( deployTask ,    publication )  ;", "execute ( deployTask )  ;", "}", "METHOD_END"], "methodName": ["publish"], "fileName": "org.gradle.api.publish.maven.internal.publisher.AbstractMavenPublisher"}, {"methodBody": ["METHOD_START", "{", "return   artifacts ;", "}", "METHOD_END"], "methodName": ["getArtifacts"], "fileName": "org.gradle.api.publish.maven.internal.publisher.MavenNormalizedPublication"}, {"methodBody": ["METHOD_START", "{", "return   mainArtifact ;", "}", "METHOD_END"], "methodName": ["getMainArtifact"], "fileName": "org.gradle.api.publish.maven.internal.publisher.MavenNormalizedPublication"}, {"methodBody": ["METHOD_START", "{", "return   metadataFile ;", "}", "METHOD_END"], "methodName": ["getMetadataFile"], "fileName": "org.gradle.api.publish.maven.internal.publisher.MavenNormalizedPublication"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.api.publish.maven.internal.publisher.MavenNormalizedPublication"}, {"methodBody": ["METHOD_START", "{", "return   pomFile ;", "}", "METHOD_END"], "methodName": ["getPomFile"], "fileName": "org.gradle.api.publish.maven.internal.publisher.MavenNormalizedPublication"}, {"methodBody": ["METHOD_START", "{", "return   projectIdentity ;", "}", "METHOD_END"], "methodName": ["getProjectIdentity"], "fileName": "org.gradle.api.publish.maven.internal.publisher.MavenNormalizedPublication"}, {"methodBody": ["METHOD_START", "{", "MavenRemotePublisher . GradleWagonMavenDeployAction   deployTask    =    new   MavenRemotePublisher . GradleWagonMavenDeployAction ( pomFile ,    metadataFile ,    artifactRepository ,    repositoryTransportFactory )  ;", "deployTask . setLocalMavenRepositoryLocation ( temporaryDirFactory . create (  )  )  ;", "deployTask . setRepositories ( createMavenRemoteRepository ( artifactRepository )  ,    null )  ;", "return   deployTask ;", "}", "METHOD_END"], "methodName": ["createDeployTask"], "fileName": "org.gradle.api.publish.maven.internal.publisher.MavenRemotePublisher"}, {"methodBody": ["METHOD_START", "{", "RemoteRepository   remoteRepository    =    new   RemoteRepository (  )  ;", "remoteRepository . setUrl ( repository . getUrl (  )  . toString (  )  )  ;", "return   remoteRepository ;", "}", "METHOD_END"], "methodName": ["createMavenRemoteRepository"], "fileName": "org.gradle.api.publish.maven.internal.publisher.MavenRemotePublisher"}, {"methodBody": ["METHOD_START", "{", "StaticLockingMavenPublisher . STATIC _ LOCK . lock (  )  ;", "try    {", "delegate . publish ( publication ,    artifactRepository )  ;", "}    finally    {", "StaticLockingMavenPublisher . STATIC _ LOCK . unlock (  )  ;", "}", "}", "METHOD_END"], "methodName": ["publish"], "fileName": "org.gradle.api.publish.maven.internal.publisher.StaticLockingMavenPublisher"}, {"methodBody": ["METHOD_START", "{", "File   artifactFile    =    artifact . getFile (  )  ;", "if    (  ( artifactFile    =  =    null )     |  |     (  !  ( artifactFile . exists (  )  )  )  )     {", "throw   new   InvalidcationException ( publicationName ,    String . format (  \" artifact   file   does   not   exist :     '  % s '  \"  ,    artifactFile )  )  ;", "}", "if    ( artifactFile . isDirectory (  )  )     {", "throw   new   InvalidcationException ( publicationName ,    String . format (  \" artifact   file   is   a   directory :     '  % s '  \"  ,    artifactFile )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkCanPublish"], "fileName": "org.gradle.api.publish.maven.internal.publisher.ValidatingMavenPublisher"}, {"methodBody": ["METHOD_START", "{", "Set < MavenArtifact >    verified    =    new   HashSet < MavenArtifact >  (  )  ;", "for    ( MavenArtifact   artifact    :    publication . getArtifacts (  )  )     {", "checkNotDuplicate ( publication ,    verified ,    artifact . getExtension (  )  ,    artifact . getClassifier (  )  )  ;", "verified . add ( artifact )  ;", "}", "checkNotDuplicate ( publication ,    verified ,     \" pom \"  ,    null )  ;", "}", "METHOD_END"], "methodName": ["checkNoDuplicateArtifacts"], "fileName": "org.gradle.api.publish.maven.internal.publisher.ValidatingMavenPublisher"}, {"methodBody": ["METHOD_START", "{", "for    ( MavenArtifact   artifact    :    artifacts )     {", "if    (  ( ObjectUtils . equals ( artifact . getExtension (  )  ,    extension )  )     &  &     ( ObjectUtils . equals ( artifact . getClassifier (  )  ,    classifier )  )  )     {", "String   message    =    String . format (  \" multiple   artifacts   with   the   identical   extension   and   classifier    (  '  % s '  ,     '  % s '  )  .  \"  ,    extension ,    classifier )  ;", "throw   new   InvalidcationException ( publication . getName (  )  ,    message )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["checkNotDuplicate"], "fileName": "org.gradle.api.publish.maven.internal.publisher.ValidatingMavenPublisher"}, {"methodBody": ["METHOD_START", "{", "return   new   ValidatingMavenPublisher . MavenFieldValidator ( publication . getName (  )  ,    name ,    value )  ;", "}", "METHOD_END"], "methodName": ["field"], "fileName": "org.gradle.api.publish.maven.internal.publisher.ValidatingMavenPublisher"}, {"methodBody": ["METHOD_START", "{", "File   pomFile    =    publication . getPomFile (  )  ;", "try    {", "Model   model    =    readModelFromPom ( pomFile )  ;", "model . setPomFile ( pomFile )  ;", "return   model ;", "}    catch    ( XmlPullParserException   parseException )     {", "throw   new   InvalidcationException ( publication . getName (  )  ,     \" POM   file   is   invalid .    Check   any   modifications   you   have   made   to   the   POM   file .  \"  ,    parseException )  ;", "}    catch    ( IOException   ex )     {", "throw   new   UncheckedIOException ( ex )  ;", "}", "}", "METHOD_END"], "methodName": ["parsePomFileIntoMavenModel"], "fileName": "org.gradle.api.publish.maven.internal.publisher.ValidatingMavenPublisher"}, {"methodBody": ["METHOD_START", "{", "validateIdentity ( publication )  ;", "validateArtifacts ( publication )  ;", "checkNoDuplicateArtifacts ( publication )  ;", "delegate ( publication ,    artifactRepository )  ;", "}", "METHOD_END"], "methodName": ["publish"], "fileName": "org.gradle.api.publish.maven.internal.publisher.ValidatingMavenPublisher"}, {"methodBody": ["METHOD_START", "{", "FileReader   reader    =    new   FileReader ( pomFile )  ;", "try    {", "return   new   Xpp 3 Reader (  )  . read ( reader )  ;", "}    finally    {", "reader . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["readModelFromPom"], "fileName": "org.gradle.api.publish.maven.internal.publisher.ValidatingMavenPublisher"}, {"methodBody": ["METHOD_START", "{", "for    ( MavenArtifact   artifact    :    publication . getArtifacts (  )  )     {", "field ( publication ,     \" artifact   extension \"  ,    artifact . getExtension (  )  )  . notNull (  )  . validInFileName (  )  ;", "field ( publication ,     \" artifact   classifier \"  ,    artifact . getClassifier (  )  )  . optionalNotEmpty (  )  . validInFileName (  )  ;", "checkCa ( publication . getName (  )  ,    artifact )  ;", "}", "}", "METHOD_END"], "methodName": ["validateArtifacts"], "fileName": "org.gradle.api.publish.maven.internal.publisher.ValidatingMavenPublisher"}, {"methodBody": ["METHOD_START", "{", "MavenProjectIdentity   projectIdentity    =    publication . getProjectIdentity (  )  ;", "Model   model    =    parsePomFileIntoMavenModel ( publication )  ;", "field ( publication ,     \" groupId \"  ,    projectIdentity . getGroupId (  )  )  . validMavenIdentifier (  )  . matches ( model . getGroupId (  )  )  ;", "field ( publication ,     \" artifactId \"  ,    projectIdentity . getArtifactId (  )  )  . validMavenIdentifier (  )  . matches ( model . getArtifactId (  )  )  ;", "field ( publication ,     \" version \"  ,    projectIdentity . getVersion (  )  )  . notEmpty (  )  . validInFileName (  )  . matches ( model . getVersion (  )  )  ;", "}", "METHOD_END"], "methodName": ["validateIdentity"], "fileName": "org.gradle.api.publish.maven.internal.publisher.ValidatingMavenPublisher"}, {"methodBody": ["METHOD_START", "{", "addDependency ( apiDependency ,     \" compile \"  )  ;", "}", "METHOD_END"], "methodName": ["addApiDependency"], "fileName": "org.gradle.api.publish.maven.internal.tasks.MavenPomFileGenerator"}, {"methodBody": ["METHOD_START", "{", "addDependencyManagement ( apiDependency ,     \" compile \"  )  ;", "}", "METHOD_END"], "methodName": ["addApiDependencyManagement"], "fileName": "org.gradle.api.publish.maven.internal.tasks.MavenPomFileGenerator"}, {"methodBody": ["METHOD_START", "{", "if    (  ( mavenDependency . getArtifacts (  )  . size (  )  )     =  =     0  )     {", "addDependency ( mavenDependency ,    mavenDependency . getArtifactId (  )  ,    scope ,    null ,    null )  ;", "} else    {", "for    ( DependencyArtifact   artifact    :    mavenDependency . getArtifacts (  )  )     {", "addDependency ( mavenDependency ,    artifact . getName (  )  ,    scope ,    artifact . getType (  )  ,    artifact . getClassifier (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addDependency"], "fileName": "org.gradle.api.publish.maven.internal.tasks.MavenPomFileGenerator"}, {"methodBody": ["METHOD_START", "{", "Dependency   mavenDependency    =    new   Dependency (  )  ;", "mavenDependency . setGroupId ( dependency . getGroupId (  )  )  ;", "mavenDependency . setArtifactId ( artifactId )  ;", "mavenDependency . setVersion ( mapToMavenSyntax ( dependency . getVersion (  )  )  )  ;", "mavenDependency . setType ( type )  ;", "mavenDependency . setScope ( scope )  ;", "mavenDependency . setClassifier ( classifier )  ;", "for    ( ExcludeRule   excludeRule    :    dependency . getExcludeRules (  )  )     {", "Exclusion   exclusion    =    new   Exclusion (  )  ;", "exclusion . setGroupId ( GUtil . elvis ( excludeRule . getGroup (  )  ,     \"  *  \"  )  )  ;", "exclusion . setArtifactId ( GUtil . elvis ( excludeRule . getModule (  )  ,     \"  *  \"  )  )  ;", "mavenDependency . addExclusion ( exclusion )  ;", "}", "getModel (  )  . addDependency ( mavenDependency )  ;", "}", "METHOD_END"], "methodName": ["addDependency"], "fileName": "org.gradle.api.publish.maven.internal.tasks.MavenPomFileGenerator"}, {"methodBody": ["METHOD_START", "{", "Dependency   mavenDependency    =    new   Dependency (  )  ;", "mavenDependency . setGroupId ( dependency . getGroupId (  )  )  ;", "mavenDependency . setArtifactId ( dependency . getArtifactId (  )  )  ;", "mavenDependency . setVersion ( mapToMavenSyntax ( dependency . getVersion (  )  )  )  ;", "mavenDependency . setScope ( scope )  ;", "DependencyManagement   dependencyManagement    =    getModel (  )  . getDependencyManagement (  )  ;", "if    ( dependencyManagement    =  =    null )     {", "dependencyManagement    =    new   DependencyManagement (  )  ;", "getModel (  )  . setDependencyManagement ( dependencyManagement )  ;", "}", "dependencyManagement . addDependency ( mavenDependency )  ;", "}", "METHOD_END"], "methodName": ["addDependencyManagement"], "fileName": "org.gradle.api.publish.maven.internal.tasks.MavenPomFileGenerator"}, {"methodBody": ["METHOD_START", "{", "addDependency ( dependency ,     \" runtime \"  )  ;", "}", "METHOD_END"], "methodName": ["addRuntimeDependency"], "fileName": "org.gradle.api.publish.maven.internal.tasks.MavenPomFileGenerator"}, {"methodBody": ["METHOD_START", "{", "addDependencyManagement ( dependency ,     \" runtime \"  )  ;", "}", "METHOD_END"], "methodName": ["addRuntimeDependencyManagement"], "fileName": "org.gradle.api.publish.maven.internal.tasks.MavenPomFileGenerator"}, {"methodBody": ["METHOD_START", "{", "return   model ;", "}", "METHOD_END"], "methodName": ["getModel"], "fileName": "org.gradle.api.publish.maven.internal.tasks.MavenPomFileGenerator"}, {"methodBody": ["METHOD_START", "{", "return   versionRangeMapper . map ( version )  ;", "}", "METHOD_END"], "methodName": ["mapToMavenSyntax"], "fileName": "org.gradle.api.publish.maven.internal.tasks.MavenPomFileGenerator"}, {"methodBody": ["METHOD_START", "{", "getModel (  )  . setPackaging ( packaging )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setPackaging"], "fileName": "org.gradle.api.publish.maven.internal.tasks.MavenPomFileGenerator"}, {"methodBody": ["METHOD_START", "{", "xmlTransformer . addAction ( action )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["withXml"], "fileName": "org.gradle.api.publish.maven.internal.tasks.MavenPomFileGenerator"}, {"methodBody": ["METHOD_START", "{", "xmlTransformer . transform ( file ,    MavenPomFileGenerator . POM _ FILE _ ENCODING ,    new   Action < Writer >  (  )     {", "public   void   execute ( Writer   writer )     {", "try    {", "new   MavenXpp 3 Writer (  )  . write ( writer ,    model )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "}  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["writeTo"], "fileName": "org.gradle.api.publish.maven.internal.tasks.MavenPomFileGenerator"}, {"methodBody": ["METHOD_START", "{", "project . getPluginManager (  )  . apply ( PublishingPlugin . class )  ;", "final   TaskContainer   tasks    =    project . getTasks (  )  ;", "final   Task   publishLocalLifecycleTask    =    tasks . create (  . PUBLISH _ LOCAL _ LIFECYCLE _ TASK _ NAME )  ;", "publishLocalLifecycleTask . setDescription (  \" Publishes   all   Maven   publications   produced   by   this   project   to   the   local   Maven   cache .  \"  )  ;", "publishLocalLifecycleTask . setGroup ( PUBLISH _ TASK _ GROUP )  ;", "project . getExtensions (  )  . configure ( PublishingExtension . class ,    new   Action < PublishingExtension >  (  )     {", "public   void   execute ( PublishingExtension   extension )     {", "extension . getPublications (  )  . registerFactory ( MavenPublication . class ,    new    . MavenPublicationFactory ( dependencyMetaDataProvider ,    instantiator ,    fileResolver )  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["apply"], "fileName": "org.gradle.api.publish.maven.plugins.MavenPublishPlugin"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getLoggingManagerFactory"], "fileName": "org.gradle.api.publish.maven.tasks.AbstractPublishToMaven"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getMavenRepositoryLocator"], "fileName": "org.gradle.api.publish.maven.tasks.AbstractPublishToMaven"}, {"methodBody": ["METHOD_START", "{", "return   publication ;", "}", "METHOD_END"], "methodName": ["getPublication"], "fileName": "org.gradle.api.publish.maven.tasks.AbstractPublishToMaven"}, {"methodBody": ["METHOD_START", "{", "return   AbstractPublishToMaven . toPublicationInternal ( getPublication (  )  )  ;", "}", "METHOD_END"], "methodName": ["getPublicationInternal"], "fileName": "org.gradle.api.publish.maven.tasks.AbstractPublishToMaven"}, {"methodBody": ["METHOD_START", "{", "this . publication    =    AbstractPublishToMaven . toPublicationInternal ( publication )  ;", "}", "METHOD_END"], "methodName": ["setPublication"], "fileName": "org.gradle.api.publish.maven.tasks.AbstractPublishToMaven"}, {"methodBody": ["METHOD_START", "{", "if    ( publication    =  =    null )     {", "return   null ;", "} else", "if    ( publication   instanceof   internal . publication . MavenPublicationInternal )     {", "return    (  ( internal . publication . MavenPublicationInternal )     ( publication )  )  ;", "} else    {", "throw   new   InvalidUserDataException ( String . format (  \" publication   objects   must   implement   the    '  % s '    interface ,    implementation    '  % s '    does   not \"  ,    internal . publication . MavenPublicationInternal . class . getName (  )  ,    publication . getClass (  )  . getName (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["toPublicationInternal"], "fileName": "org.gradle.api.publish.maven.tasks.AbstractPublishToMaven"}, {"methodBody": ["METHOD_START", "{", "MavenPomInternal   pomInternal    =     (  ( MavenPomInternal )     ( getPom (  )  )  )  ;", "MavenPomFileGenerator   pomGenerator    =    new   MavenPomFileGenerator ( pomInternal . getProjectIdentity (  )  ,    getVersionRangeMapper (  )  )  ;", "pomGenerator . setPackaging ( pomInternal . getPackaging (  )  )  ;", "for    ( MavenDependency   mavenDependency    :    pomInternal . getApiDependencyManagement (  )  )     {", "pomGenerator . addApiDependencyManagement ( mavenDependency )  ;", "}", "for    ( MavenDependency   mavenDependency    :    pomInternal . getRuntimeDependencyManagement (  )  )     {", "pomGenerator . addRuntimeDependencyManagement ( mavenDependency )  ;", "}", "for    ( MavenDependencyInternal   runtimeDependency    :    pomInternal . getApiDependencies (  )  )     {", "pomGenerator . addApiDependency ( runtimeDependency )  ;", "}", "for    ( MavenDependencyInternal   runtimeDependency    :    pomInternal . getRuntimeDependencies (  )  )     {", "pomGenerator . addRuntimeDependency ( runtimeDependency )  ;", "}", "pomGenerator . withXml ( pomInternal . getXmlAction (  )  )  ;", "pomGenerator . writeTo ( getDestination (  )  )  ;", "}", "METHOD_END"], "methodName": ["doGenerate"], "fileName": "org.gradle.api.publish.maven.tasks.GenerateMavenPom"}, {"methodBody": ["METHOD_START", "{", "return    ( destination )     =  =    null    ?    null    :    getFileResolver (  )  . resolve ( destination )  ;", "}", "METHOD_END"], "methodName": ["getDestination"], "fileName": "org.gradle.api.publish.maven.tasks.GenerateMavenPom"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getFileResolver"], "fileName": "org.gradle.api.publish.maven.tasks.GenerateMavenPom"}, {"methodBody": ["METHOD_START", "{", "return   pom ;", "}", "METHOD_END"], "methodName": ["getPom"], "fileName": "org.gradle.api.publish.maven.tasks.GenerateMavenPom"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getVersionRangeMapper"], "fileName": "org.gradle.api.publish.maven.tasks.GenerateMavenPom"}, {"methodBody": ["METHOD_START", "{", "this . destination    =    destination ;", "}", "METHOD_END"], "methodName": ["setDestination"], "fileName": "org.gradle.api.publish.maven.tasks.GenerateMavenPom"}, {"methodBody": ["METHOD_START", "{", "this . destination    =    destination ;", "}", "METHOD_END"], "methodName": ["setDestination"], "fileName": "org.gradle.api.publish.maven.tasks.GenerateMavenPom"}, {"methodBody": ["METHOD_START", "{", "this . pom    =    pom ;", "}", "METHOD_END"], "methodName": ["setPom"], "fileName": "org.gradle.api.publish.maven.tasks.GenerateMavenPom"}, {"methodBody": ["METHOD_START", "{", "final   MavenPublicationInternal   publication    =    getPublicationInternal (  )  ;", "if    ( publication    =  =    null )     {", "throw   new   InvalidUserDataException (  \" The    ' publication '    property   is   required \"  )  ;", "}", "new   PublishOperation ( publication ,     \" mavenLocal \"  )     {", "@ Override", "protected   void   publish (  )    throws   Exception    {", "MavenPublisher   localPublisher    =    new   Publisher ( getLoggingManagerFactory (  )  ,    getMavenRepositoryLocator (  )  )  ;", "MavenPublisher   staticLockingPublisher    =    new   StaticLockingMavenPublisher ( localPublisher )  ;", "MavenPublisher   validatingPublisher    =    new   ValidatingMavenPublisher ( staticLockingPublisher )  ;", "validatingPublisher . publish ( publication . asNormalisedPublication (  )  ,    null )  ;", "}", "}  . run (  )  ;", "}", "METHOD_END"], "methodName": ["publish"], "fileName": "org.gradle.api.publish.maven.tasks.PublishToMavenLocal"}, {"methodBody": ["METHOD_START", "{", "new   PublishOperation ( publication ,    repository . getName (  )  )     {", "@ Override", "protected   void   publish (  )    throws   Exception    {", "MavenPublisher   remotePublisher    =    new   MavenRemotePublisher ( getLoggingManagerFactory (  )  ,    getLocator (  )  ,    getTemporaryDirFactory (  )  ,    getRepositoryTransportFactory (  )  )  ;", "MavenPublisher   staticLockingPublisher    =    new   StaticLockingMavenPublisher ( remotePublisher )  ;", "MavenPublisher   validatingPublisher    =    new   ValidatingMavenPublisher ( staticLockingPublisher )  ;", "validatingPublisher . publish ( publication . asNormalisedPublication (  )  ,    repository )  ;", "}", "}  . run (  )  ;", "}", "METHOD_END"], "methodName": ["doPublish"], "fileName": "org.gradle.api.publish.maven.tasks.PublishToMavenRepository"}, {"methodBody": ["METHOD_START", "{", "return   repository ;", "}", "METHOD_END"], "methodName": ["getRepository"], "fileName": "org.gradle.api.publish.maven.tasks.PublishToMavenRepository"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getRepositoryTransportFactory"], "fileName": "org.gradle.api.publish.maven.tasks.PublishToMavenRepository"}, {"methodBody": ["METHOD_START", "{", "MavenPublicationInternal   publicationInternal    =    getPublicationInternal (  )  ;", "if    ( publicationInternal    =  =    null )     {", "throw   new   InvalidUserDataException (  \" The    ' publication '    property   is   required \"  )  ;", "}", "MavenArtifact   repository    =    get (  )  ;", "if    ( repository    =  =    null )     {", "throw   new   InvalidUserDataException (  \" The    ' repository '    property   is   required \"  )  ;", "}", "doPublish ( publicationInternal ,    repository )  ;", "}", "METHOD_END"], "methodName": ["publish"], "fileName": "org.gradle.api.publish.maven.tasks.PublishToMavenRepository"}, {"methodBody": ["METHOD_START", "{", "this . repository    =    repository ;", "}", "METHOD_END"], "methodName": ["setRepository"], "fileName": "org.gradle.api.publish.maven.tasks.PublishToMavenRepository"}]