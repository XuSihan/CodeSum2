[{"methodBody": ["METHOD_START", "{", "return   action ;", "}", "METHOD_END"], "methodName": ["getAction"], "fileName": "org.gradle.BuildResult"}, {"methodBody": ["METHOD_START", "{", "return   failure ;", "}", "METHOD_END"], "methodName": ["getFailure"], "fileName": "org.gradle.BuildResult"}, {"methodBody": ["METHOD_START", "{", "return   gradle ;", "}", "METHOD_END"], "methodName": ["getGradle"], "fileName": "org.gradle.BuildResult"}, {"methodBody": ["METHOD_START", "{", "if    (  ( failure )    instanceof   GradleException )     {", "throw    (  ( GradleException )     ( failure )  )  ;", "}", "if    (  ( failure )     !  =    null )     {", "throw   new   GradleException (  (  ( action )     +     \"    aborted   because   of   an   internal   error .  \"  )  ,    failure )  ;", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["rethrowFailure"], "fileName": "org.gradle.BuildResult"}, {"methodBody": ["METHOD_START", "{", "initScripts . add ( initScriptFile )  ;", "}", "METHOD_END"], "methodName": ["addInitScript"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   EqualsBuilder . reflectionEquals ( this ,    obj )  ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "CompositeInitScriptFinder   initScriptFinder    =    new   CompositeInitScriptFinder ( new   UserHomeInitScriptFinder ( getGradleUserHomeDir (  )  )  ,    new   DistributionInitScriptFinder ( gradleHomeDir )  )  ;", "List < File >    scripts    =    new   ArrayList < File >  ( getInitScripts (  )  )  ;", "initScriptFinder . findScripts ( scripts )  ;", "return   Collections . unmodifiableList ( scripts )  ;", "}", "METHOD_END"], "methodName": ["getAllInitScripts"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   buildFile ;", "}", "METHOD_END"], "methodName": ["getBuildFile"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   currentDir ;", "}", "METHOD_END"], "methodName": ["getCurrentDir"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   excludedTaskNames ;", "}", "METHOD_END"], "methodName": ["getExcludedTaskNames"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   gradleUserHomeDir ;", "}", "METHOD_END"], "methodName": ["getGradleUserHomeDir"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   Collections . unmodifiableList ( includedBuilds )  ;", "}", "METHOD_END"], "methodName": ["getIncludedBuilds"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   Collections . unmodifiableList ( initScripts )  ;", "}", "METHOD_END"], "methodName": ["getInitScripts"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   projectCacheDir ;", "}", "METHOD_END"], "methodName": ["getProjectCacheDir"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   projectDir ;", "}", "METHOD_END"], "methodName": ["getProjectDir"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   projectProperties ;", "}", "METHOD_END"], "methodName": ["getProjectProperties"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   settingsFile ;", "}", "METHOD_END"], "methodName": ["getSettingsFile"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   systemPropertiesArgs ;", "}", "METHOD_END"], "methodName": ["getSystemPropertiesArgs"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "List < String >    taskNames    =    Lists . newArrayList (  )  ;", "for    ( TaskExecutionRequest   taskRequest    :    taskRequests )     {", "taskNames . addAll ( taskRequest . getArgs (  )  )  ;", "}", "return   taskNames ;", "}", "METHOD_END"], "methodName": ["getTaskNames"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   taskRequests ;", "}", "METHOD_END"], "methodName": ["getTaskRequests"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   HashCodeBuilder . reflectionHashCode ( this )  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "includedBuilds . add ( includedBuild )  ;", "}", "METHOD_END"], "methodName": ["includeBuild"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   buildCacheDebugLogging ;", "}", "METHOD_END"], "methodName": ["isBuildCacheDebugLogging"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   buildCacheEnabled ;", "}", "METHOD_END"], "methodName": ["isBuildCacheEnabled"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   buildProjectDependencies ;", "}", "METHOD_END"], "methodName": ["isBuildProjectDependencies"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   buildScan ;", "}", "METHOD_END"], "methodName": ["isBuildScan"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   configureOnDemand ;", "}", "METHOD_END"], "methodName": ["isConfigureOnDemand"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   continueOnFailure ;", "}", "METHOD_END"], "methodName": ["isContinueOnFailure"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   continuous ;", "}", "METHOD_END"], "methodName": ["isContinuous"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   dryRun ;", "}", "METHOD_END"], "methodName": ["isDryRun"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   interactive ;", "}", "METHOD_END"], "methodName": ["isInteractive"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   noBuildScan ;", "}", "METHOD_END"], "methodName": ["isNoBuildScan"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   offline ;", "}", "METHOD_END"], "methodName": ["isOffline"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   profile ;", "}", "METHOD_END"], "methodName": ["isProfile"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   recompileScripts ;", "}", "METHOD_END"], "methodName": ["isRecompileScripts"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   refreshDependencies ;", "}", "METHOD_END"], "methodName": ["isRefreshDependencies"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   rerunTasks ;", "}", "METHOD_END"], "methodName": ["isRerunTasks"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   searchUpwards ;", "}", "METHOD_END"], "methodName": ["isSearchUpwards"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   useEmptySettings ;", "}", "METHOD_END"], "methodName": ["isUseEmptySettings"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   writeDependencyLocks ;", "}", "METHOD_END"], "methodName": ["isWriteDependencyLocks"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   prepareNewBuild ( new   StartParameter (  )  )  ;", "}", "METHOD_END"], "methodName": ["newBuild"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   prepareNewInstance ( new   StartParameter (  )  )  ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "p . gradleUserHomeDir    =    gradleUserHomeDir ;", "p . setLogLevel ( getLogLevel (  )  )  ;", "p . setConsoleOutput ( getConsoleOutput (  )  )  ;", "p . setShowStacktrace ( getShowStacktrace (  )  )  ;", "p . setWarningMode ( getWarningMode (  )  )  ;", "p . profile    =    profile ;", "p . continueOnFailure    =    continueOnFailure ;", "p . offline    =    offline ;", "p . rerunTasks    =    rerunTasks ;", "p . recompileScripts    =    recompileScripts ;", "p . refreshDependencies    =    refreshDependencies ;", "p . setParallelProjectExecutionEnabled ( isParallelProjectExecutionEnabled (  )  )  ;", "p . buildCacheEnabled    =    buildCacheEnabled ;", "p . configureOnDemand    =    configureOnDemand ;", "p . setMaxWorkerCount ( getMaxWorkerCount (  )  )  ;", "p . systemPropertiesArgs    =    new   HashMap < String ,    String >  ( systemPropertiesArgs )  ;", "p . interactive    =    interactive ;", "p . writeDependencyLocks    =    writeDependencyLocks ;", "return   p ;", "}", "METHOD_END"], "methodName": ["prepareNewBuild"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "prepareNewBuild ( p )  ;", "p . setWarningMode ( getWarningMode (  )  )  ;", "p . buildFile    =    buildFile ;", "p . projectDir    =    projectDir ;", "p . settingsFile    =    settingsFile ;", "p . useEmptySettings    =    useEmptySettings ;", "p . taskRequests    =    new   ArrayList < TaskExecutionRequest >  ( taskRequests )  ;", "p . excludedTaskNames    =    new   LinkedHashSet < String >  ( excludedTaskNames )  ;", "p . buildProjectDependencies    =    buildProjectDependencies ;", "p . currentDir    =    currentDir ;", "p . searchUpwards    =    searchUpwards ;", "p . projectProperties    =    new   HashMap < String ,    String >  ( projectProperties )  ;", "p . systemPropertiesArgs    =    new   HashMap < String ,    String >  ( systemPropertiesArgs )  ;", "pHomeDir    = HomeDir ;", "p . initScripts    =    new   ArrayList < File >  ( initScripts )  ;", "p . includedBuilds    =    new   ArrayList < File >  ( includedBuilds )  ;", "p . dryRun    =    dryRun ;", "p . projectCacheDir    =    projectCacheDir ;", "return   p ;", "}", "METHOD_END"], "methodName": ["prepareNewInstance"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "this . buildCacheDebugLogging    =    buildCacheDebugLogging ;", "}", "METHOD_END"], "methodName": ["setBuildCacheDebugLogging"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "this . buildCacheEnabled    =    buildCacheEnabled ;", "}", "METHOD_END"], "methodName": ["setBuildCacheEnabled"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "if    ( buildFile    =  =    null )     {", "this . buildFile    =    null ;", "setCurrentDir ( null )  ;", "} else    {", "this . buildFile    =    FileUtils . canonicalize ( buildFile )  ;", "setProjectDir ( this . buildFile . geentFile (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["setBuildFile"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "this . buildProjectDependencies    =    build ;", "rurn   this ;", "}", "METHOD_END"], "methodName": ["setBuildProjectDependencies"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "this . buildScan    =    buildScan ;", "}", "METHOD_END"], "methodName": ["setBuildScan"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "this . configureOnDemand    =    configureOnDemand ;", "}", "METHOD_END"], "methodName": ["setConfigureOnDemand"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "this . continueOnFailure    =    continueOnFailure ;", "}", "METHOD_END"], "methodName": ["setContinueOnFailure"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "this . continuous    =    enabled ;", "}", "METHOD_END"], "methodName": ["setContinuous"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "if    ( currentDir    !  =    null )     {", "this . currentDir    =    FileUtils . canonicalize ( currentDir )  ;", "} else    {", "this . currentDir    =    new   BuildLayous (  )  . getCurrentDir (  )  ;", "}", "}", "METHOD_END"], "methodName": ["setCurrentDir"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "this . dryRun    =    dryRun ;", "}", "METHOD_END"], "methodName": ["setDryRun"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "this . excludedTaskNames    =    Sets . newLinkedHashSet ( excludedTaskNames )  ;", "}", "METHOD_END"], "methodName": ["setExcludedTaskNames"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "this . gradleHomeDir    =    gradleHomeDir ;", "}", "METHOD_END"], "methodName": ["setGradleHomeDir"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "this . gradleUserHomeDir    =     ( gradleUserHomeDir    =  =    null )     ?    new   BuildLayoutParameters (  )  . getGradleUserHomeDir (  )     :    FileUtils . canonicalize ( gradleUserHomeDir )  ;", "}", "METHOD_END"], "methodName": ["setGradleUserHomeDir"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "this . includedBuilds    =    includedBuilds ;", "}", "METHOD_END"], "methodName": ["setIncludedBuilds"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "this . initScripts    =    initScripts ;", "}", "METHOD_END"], "methodName": ["setInitScripts"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "this . interactive    =    interactive ;", "}", "METHOD_END"], "methodName": ["setInteractive"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "this . noBuildScan    =    noBuildScan ;", "}", "METHOD_END"], "methodName": ["setNoBuildScan"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "this . offline    =    offline ;", "}", "METHOD_END"], "methodName": ["setOffline"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "this . profile    =    profile ;", "}", "METHOD_END"], "methodName": ["setProfile"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "this . projectCacheDir    =    projectCacheDir ;", "}", "METHOD_END"], "methodName": ["setProjectCacheDir"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "if    ( projectDir    =  =    null )     {", "sCurrentDir ( null )  ;", "this . projectDir    =    null ;", "} else    {", "File   canonicalFile    =    FileUtils . canonicalize ( projectDir )  ;", "currentDir    =    canonicalFile ;", "this . projectDir    =    canonicalFile ;", "}", "}", "METHOD_END"], "methodName": ["setProjectDir"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "this . projectProperties    =    projectProperties ;", "}", "METHOD_END"], "methodName": ["setProjectProperties"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "this . recompileScripts    =    recompileScripts ;", "}", "METHOD_END"], "methodName": ["setRecompileScripts"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "this . refreshDependencies    =    refreshDependencies ;", "}", "METHOD_END"], "methodName": ["setRefreshDependencies"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "this . rerunTasks    =    rerunTasks ;", "}", "METHOD_END"], "methodName": ["setRerunTasks"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "this . searchUpwards    =    searchUpwards ;", "}", "METHOD_END"], "methodName": ["setSearchUpwards"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "if    ( settingsFile    =  =    null )     {", "this . settingsFile    =    null ;", "} else    {", "this . useEmptySettings    =    false ;", "this . settingsFile    =    FileUtils . canonicalize ( settingsFile )  ;", "currentDir    =    this . settingsFile . geentFile (  )  ;", "}", "}", "METHOD_END"], "methodName": ["setSettingsFile"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "this . systemPropertiesArgs    =    systemPropertiesArgs ;", "}", "METHOD_END"], "methodName": ["setSystemPropertiesArgs"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "if    ( taskNames    =  =    null )     {", "this . taskRequests    =    Collections . emptyList (  )  ;", "} else    {", "this . taskRequests    =    Arrays .  < TaskExecutionRequest > asList ( new   DefaultTaskExecutionRequest ( taskNames )  )  ;", "}", "}", "METHOD_END"], "methodName": ["setTaskNames"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "this . taskRequests    =    Lists . newArrayList ( taskParameters )  ;", "}", "METHOD_END"], "methodName": ["setTaskRequests"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "this . writeDependencyLocks    =    writeDependencyLocks ;", "}", "METHOD_END"], "methodName": ["setWriteDependencyLocks"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "searchUpwards    =    false ;", "useEmptySettings    =    true ;", "settingsFile    =    null ;", "return   this ;", "}", "METHOD_END"], "methodName": ["useEmptySettings"], "fileName": "org.gradle.StartParameter"}, {"methodBody": ["METHOD_START", "{", "return   this ;", "}", "METHOD_END"], "methodName": ["getAnt"], "fileName": "org.gradle.api.AntBuilder"}, {"methodBody": ["METHOD_START", "{", "setLifecycleLogLevel ( AntBuilder . AntMessagePriority . valueOf ( logLevel )  )  ;", "}", "METHOD_END"], "methodName": ["setLifecycleLogLevel"], "fileName": "org.gradle.api.AntBuilder"}, {"methodBody": ["METHOD_START", "{", "return   String . format (  \" Could   not   resolve   all   dependencies   for    % s .  \"  ,    resolveContext )  ;", "}", "METHOD_END"], "methodName": ["buildMessage"], "fileName": "org.gradle.api.artifacts.ResolveException"}, {"methodBody": ["METHOD_START", "{", "return   defaultReason ;", "}", "METHOD_END"], "methodName": ["getDefaultReason"], "fileName": "org.gradle.api.artifacts.result.ComponentSelectionCause"}, {"methodBody": ["METHOD_START", "{", "return   outputDirectory ;", "}", "METHOD_END"], "methodName": ["getOutputDirectory"], "fileName": "org.gradle.api.artifacts.transform.ArtifactTransform"}, {"methodBody": ["METHOD_START", "{", "this . outputDirectory    =    outputDirectory ;", "}", "METHOD_END"], "methodName": ["setOutputDirectory"], "fileName": "org.gradle.api.artifacts.transform.ArtifactTransform"}, {"methodBody": ["METHOD_START", "{", "return   String . format (  \" Failed   to   transform   file    '  % s '    to   match   attributes    % s   using   transform    % s \"  ,    input . getName (  )  ,    expectedAttributes ,    ModelType . of ( transform )  . getDisplayName (  )  )  ;", "}", "METHOD_END"], "methodName": ["format"], "fileName": "org.gradle.api.artifacts.transform.ArtifactTransformException"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.gradle.api.attributes.Attribute"}, {"methodBody": ["METHOD_START", "{", "return   Attribute . of ( WordUtils . uncapitalize ( type . getCanonicalName (  )  )  ,    type )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.api.attributes.Attribute"}, {"methodBody": ["METHOD_START", "{", "return   new   Attribute < T >  ( name ,    type )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.api.attributes.Attribute"}, {"methodBody": ["METHOD_START", "{", "return   file ;", "}", "METHOD_END"], "methodName": ["getFile"], "fileName": "org.gradle.api.file.UnableToDeleteFileException"}, {"methodBody": ["METHOD_START", "{", "return   String . format (  \" Unable   to   delete    % s :     % s \"  ,     ( file . isDirectory (  )     ?     \" directory \"     :     \" file \"  )  ,    file . getAbsolutePath (  )  )  ;", "}", "METHOD_END"], "methodName": ["toMessage"], "fileName": "org.gradle.api.file.UnableToDeleteFileException"}, {"methodBody": ["METHOD_START", "{", "return   pathSpec . isSatisfiedBy ( element . getRelativePath (  )  )  ;", "}", "METHOD_END"], "methodName": ["isSatisfiedBy"], "fileName": "org.gradle.api.internal.file.RelativePathSpec"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["matches"], "fileName": "org.gradle.api.internal.file.pattern.AnyWildcardPatternStep"}, {"methodBody": ["METHOD_START", "{", "return   Integer . MAX _ VALUE ;", "}", "METHOD_END"], "methodName": ["getMaxSegments"], "fileName": "org.gradle.api.internal.file.pattern.AnythingMatcher"}, {"methodBody": ["METHOD_START", "{", "return    0  ;", "}", "METHOD_END"], "methodName": ["getMinSegments"], "fileName": "org.gradle.api.internal.file.pattern.AnythingMatcher"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["isPrefix"], "fileName": "org.gradle.api.internal.file.pattern.AnythingMatcher"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["matches"], "fileName": "org.gradle.api.internal.file.pattern.AnythingMatcher"}, {"methodBody": ["METHOD_START", "{", "return    0  ;", "}", "METHOD_END"], "methodName": ["getMaxSegments"], "fileName": "org.gradle.api.internal.file.pattern.EndOfPathMatcher"}, {"methodBody": ["METHOD_START", "{", "return    0  ;", "}", "METHOD_END"], "methodName": ["getMinSegments"], "fileName": "org.gradle.api.internal.file.pattern.EndOfPathMatcher"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isPrefix"], "fileName": "org.gradle.api.internal.file.pattern.EndOfPathMatcher"}, {"methodBody": ["METHOD_START", "{", "return   startIndex    =  =     ( segments . length )  ;", "}", "METHOD_END"], "methodName": ["matches"], "fileName": "org.gradle.api.internal.file.pattern.EndOfPathMatcher"}, {"methodBody": ["METHOD_START", "{", "return   caseSensitive    ?    candidate . equals ( value )     :    candidate . equalsIgnoreCase ( value )  ;", "}", "METHOD_END"], "methodName": ["matches"], "fileName": "org.gradle.api.internal.file.pattern.FixedPatternStep"}, {"methodBody": ["METHOD_START", "{", "return   maxSegments ;", "}", "METHOD_END"], "methodName": ["getMaxSegments"], "fileName": "org.gradle.api.internal.file.pattern.FixedStepPathMatcher"}, {"methodBody": ["METHOD_START", "{", "return   minSegments ;", "}", "METHOD_END"], "methodName": ["getMinSegments"], "fileName": "org.gradle.api.internal.file.pattern.FixedStepPathMatcher"}, {"methodBody": ["METHOD_START", "{", "if    ( startIndex    =  =     ( segments . length )  )     {", "return   true ;", "}", "if    (  !  ( step . ms ( segments [ startIndex ]  )  )  )     {", "return   false ;", "}", "if    (  ( startIndex    +     1  )     =  =     ( segments . length )  )     {", "return   true ;", "}", "return   next . isPrefix ( segments ,     ( startIndex    +     1  )  )  ;", "}", "METHOD_END"], "methodName": ["isPrefix"], "fileName": "org.gradle.api.internal.file.pattern.FixedStepPathMatcher"}, {"methodBody": ["METHOD_START", "{", "int   remaining    =     ( segments . length )     -    startIndex ;", "if    (  ( remaining    <     ( minSegments )  )     |  |     ( remaining    >     ( maxSegments )  )  )     {", "return   false ;", "}", "if    (  !  ( step . ms ( segments [ startIndex ]  )  )  )     {", "return   false ;", "}", "return   next . ms ( segments ,     ( startIndex    +     1  )  )  ;", "}", "METHOD_END"], "methodName": ["matches"], "fileName": "org.gradle.api.internal.file.pattern.FixedStepPathMatcher"}, {"methodBody": ["METHOD_START", "{", "return   Integer . MAX _ VALUE ;", "}", "METHOD_END"], "methodName": ["getMaxSegments"], "fileName": "org.gradle.api.internal.file.pattern.GreedyPathMatcher"}, {"methodBody": ["METHOD_START", "{", "return   next . getMinSegments (  )  ;", "}", "METHOD_END"], "methodName": ["getMinSegments"], "fileName": "org.gradle.api.internal.file.pattern.GreedyPathMatcher"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["isPrefix"], "fileName": "org.gradle.api.internal.file.pattern.GreedyPathMatcher"}, {"methodBody": ["METHOD_START", "{", "int   pos    =     ( segments . length )     -     ( next . getMinSegments (  )  )  ;", "int   minPos    =    Math . max ( startIndex ,     (  ( segments . length )     -     ( next . getMaxSegments (  )  )  )  )  ;", "for    (  ;    pos    >  =    minPos ;    pos -  -  )     {", "if    ( next . ms ( segments ,    pos )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["matches"], "fileName": "org.gradle.api.internal.file.pattern.GreedyPathMatcher"}, {"methodBody": ["METHOD_START", "{", "return   candidate . regionMatches (  (  !  ( caseSensitive )  )  ,     0  ,    prefix ,     0  ,    prefixLength )  ;", "}", "METHOD_END"], "methodName": ["matches"], "fileName": "org.gradle.api.internal.file.pattern.HasPrefixPatternStep"}, {"methodBody": ["METHOD_START", "{", "return    (  ( prefixLength )     +     ( suffixLength )  )     <  =     ( candidate . length (  )  )  ;", "}", "METHOD_END"], "methodName": ["isLongEnough"], "fileName": "org.gradle.api.internal.file.pattern.HasSuffixPatternStep"}, {"methodBody": ["METHOD_START", "{", "return    ( isLongEnough ( candidate )  )     &  &     ( candidate . regionMatches (  (  !  ( caseSensitive )  )  ,     (  ( candidate . length (  )  )     -     ( suffixLength )  )  ,    suffix ,     0  ,    suffixLength )  )  ;", "}", "METHOD_END"], "methodName": ["matches"], "fileName": "org.gradle.api.internal.file.pattern.HasSuffixPatternStep"}, {"methodBody": ["METHOD_START", "{", "if    (  ( pattern . length (  )  )     =  =     0  )     {", "return    . END _ OF _ PATH _ MATCHER ;", "}", "if    (  ( pattern . endsWith (  \"  /  \"  )  )     |  |     ( pattern . endsWith (  \"  \\  \\  \"  )  )  )     {", "pattern    =    pattern    +     \"  *  *  \"  ;", "}", "String [  ]    parts    =    StringUtils . split ( pattern ,     . PATH _ SEPARATORS )  ;", "return    . compile ( parts ,     0  ,    caseSensitive )  ;", "}", "METHOD_END"], "methodName": ["compile"], "fileName": "org.gradle.api.internal.file.pattern.PatternMatcherFactory"}, {"methodBody": ["METHOD_START", "{", "if    ( startIndex    >  =     ( parts . length )  )     {", "return    . END _ OF _ PATH _ MATCHER ;", "}", "int   pos    =    startIndex ;", "while    (  ( pos    <     ( parts . length )  )     &  &     ( parts [ pos ]  . equals (  \"  *  *  \"  )  )  )     {", "pos +  +  ;", "}", "if    ( pos    >    startIndex )     {", "if    ( pos    =  =     ( parts . length )  )     {", "return   new   AnythingMatcher (  )  ;", "}", "return   new   GreedyPathMatcher (  . compile ( parts ,    pos ,    caseSensitive )  )  ;", "}", "return   new   FixedStepPathMatcher ( PatternStepFactory . getStep ( parts [ pos ]  ,    caseSensitive )  ,     . compile ( parts ,     ( pos    +     1  )  ,    caseSensitive )  )  ;", "}", "METHOD_END"], "methodName": ["compile"], "fileName": "org.gradle.api.internal.file.pattern.PatternMatcherFactory"}, {"methodBody": ["METHOD_START", "{", "PathMatcher   pathMatcher    =    PatternMatcherFactory . compile ( caseSensitive ,    pattern )  ;", "return   new   PatternMatcherFactory . PathMatcherBackedSpec ( partialMatchDirs ,    pathMatcher )  ;", "}", "METHOD_END"], "methodName": ["getPatternMatcher"], "fileName": "org.gradle.api.internal.file.pattern.PatternMatcherFactory"}, {"methodBody": ["METHOD_START", "{", "if    (  ( source . length (  )  )     =  =     0  )     {", "return   new   FixedPatternStep ( source ,    caseSensitive )  ;", "}", "char   ch    =    source . charAt (  0  )  ;", "int   endPrefixWildcard    =     0  ;", "if    ( ch    =  =     '  *  '  )     {", "endPrefixWildcard    =     1  ;", "while    (  ( endPrefixWildcard    <     ( source . length (  )  )  )     &  &     (  ( source . charAt ( endPrefixWildcard )  )     =  =     '  *  '  )  )     {", "endPrefixWildcard +  +  ;", "}", "}", "if    ( endPrefixWildcard    =  =     ( source . length (  )  )  )     {", "return    . ANY _ WILDCARD _ PATTERN _ STEP ;", "}", "int   endLiteral    =    endPrefixWildcard ;", "for    (  ;    endLiteral    <     ( source . length (  )  )  ;    endLiteral +  +  )     {", "ch    =    source . charAt ( endLiteral )  ;", "if    ( ch    =  =     '  ?  '  )     {", "return   new   RegExpPatternStep ( source ,    caseSensitive )  ;", "}", "if    ( ch    =  =     '  *  '  )     {", "break ;", "}", "}", "if    ( endLiteral    =  =     ( source . length (  )  )  )     {", "if    ( endPrefixWildcard    =  =     0  )     {", "return   new   FixedPatternStep ( source ,    caseSensitive )  ;", "}", "return   new   HasSuffixPatternStep ( source . substring ( endPrefixWildcard )  ,    caseSensitive )  ;", "}", "if    ( endPrefixWildcard    >     0  )     {", "return   new   RegExpPatternStep ( source ,    caseSensitive )  ;", "}", "int   endSuffixWildcard    =    endLiteral ;", "for    (  ;    endSuffixWildcard    <     ( source . length (  )  )  ;    endSuffixWildcard +  +  )     {", "ch    =    source . charAt ( endSuffixWildcard )  ;", "if    ( ch    !  =     '  *  '  )     {", "break ;", "}", "}", "if    ( endSuffixWildcard    =  =     ( source . length (  )  )  )     {", "return   new   HasPrefixPatternStep ( source . substring (  0  ,    endLiteral )  ,    caseSensitive )  ;", "}", "for    ( int   i    =    endSuffixWildcard ;    i    <     ( source . length (  )  )  ;    i +  +  )     {", "ch    =    source . charAt ( i )  ;", "if    (  ( ch    =  =     '  ?  '  )     |  |     ( ch    =  =     '  *  '  )  )     {", "return   new   RegExpPatternStep ( source ,    caseSensitive )  ;", "}", "}", "return   new   HasPrefixAndSuffixPatternStep ( source . substring (  0  ,    endLiteral )  ,    source . substring ( endSuffixWildcard )  ,    caseSensitive )  ;", "}", "METHOD_END"], "methodName": ["getStep"], "fileName": "org.gradle.api.internal.file.pattern.PatternStepFactory"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   result    =    new   StringBuilder (  )  ;", "for    ( int   i    =     0  ;    i    <     ( pattern . length (  )  )  ;    i +  +  )     {", "char   next    =    pattern . charAt ( i )  ;", "if    ( next    =  =     '  *  '  )     {", "result . append (  \"  .  *  \"  )  ;", "} else", "if    ( next    =  =     '  ?  '  )     {", "result . append (  \"  .  \"  )  ;", "} else", "if    (  (  . ESCAPE _ CHARS . indexOf ( next )  )     >  =     0  )     {", "result . append (  '  \\  \\  '  )  ;", "result . append ( next )  ;", "} else    {", "result . append ( next )  ;", "}", "}", "return   result . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getRegExPattern"], "fileName": "org.gradle.api.internal.file.pattern.RegExpPatternStep"}, {"methodBody": ["METHOD_START", "{", "Matcher   matcher    =    pattern . matcher ( testString )  ;", "return   matcher . matches (  )  ;", "}", "METHOD_END"], "methodName": ["matches"], "fileName": "org.gradle.api.internal.file.pattern.RegExpPatternStep"}, {"methodBody": ["METHOD_START", "{", "return   lifecycleLogLevel ;", "}", "METHOD_END"], "methodName": ["getLifecycleLogLevel"], "fileName": "org.gradle.api.internal.project.ant.AntLoggingAdapter"}, {"methodBody": ["METHOD_START", "{", "LogLevel   defaultLevel    =    ANT _ IVY _  2  _ SLF 4 J . get ( messagePriority )  ;", "if    (  ( lifecycleLogLevel )     !  =    null )     {", "if    (  (  ( defaultLevel . ordinal (  )  )     <     ( LIFECYCLE . ordinal (  )  )  )     &  &     ( BuilderMessagePriority . from ( messagePriority )  . ordinal (  )  )     >  =     ( lifecycleLogLevel . ordinal (  )  )  )  )     {", "return   LogLevel . LIFECYCLE ;", "} else", "if    (  (  ( defaultLevel . ordinal (  )  )     >  =     ( LIFECYCLE . ordinal (  )  )  )     &  &     ( BuilderMessagePriority . from ( messagePriority )  . ordinal (  )  )     <     ( lifecycleLogLevel . ordinal (  )  )  )  )     {", "return   LogLevel . INFO ;", "}", "}", "return   defaultLevel ;", "}", "METHOD_END"], "methodName": ["getLogLevelForMessagePriority"], "fileName": "org.gradle.api.internal.project.ant.AntLoggingAdapter"}, {"methodBody": ["METHOD_START", "{", "final   StringBuffer   message    =    new   StringBuffer (  )  ;", "if    (  ( event . getTask (  )  )     !  =    null )     {", "String   taskName    =    event . getTask (  )  . getTaskName (  )  ;", "messagpend (  \"  [ ant :  \"  )  . append ( taskName )  . append (  \"  ]     \"  )  ;", "}", "final   String   messageText    =    event . getMessage (  )  ;", "messagpend ( messageText )  ;", "LogLevel   level    =    getLogLevelForMessagePriority ( event . getPriority (  )  )  ;", "if    (  ( event . getException (  )  )     !  =    null )     {", "logger . log ( level ,    message . toString (  )  ,    event . getException (  )  )  ;", "} else    {", "logger . log ( level ,    message . toString (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["messageLogged"], "fileName": "org.gradle.api.internal.project.ant.AntLoggingAdapter"}, {"methodBody": ["METHOD_START", "{", "setLifecycleLogLevel (  ( lifecycleLogLevel    =  =    null    ?    null    :    AntBuilder . AntMessagePriority . valueOf ( lifecycleLogLevel )  )  )  ;", "}", "METHOD_END"], "methodName": ["setLifecycleLogLevel"], "fileName": "org.gradle.api.internal.project.ant.AntLoggingAdapter"}, {"methodBody": ["METHOD_START", "{", "this . lifecycleLogLevel    =    lifecycleLogLevel ;", "}", "METHOD_END"], "methodName": ["setLifecycleLogLevel"], "fileName": "org.gradle.api.internal.project.ant.AntLoggingAdapter"}, {"methodBody": ["METHOD_START", "{", "return   didWork    ?    WorkResults . DID _ WORK    :    WorkResults . DID _ NO _ WORK ;", "}", "METHOD_END"], "methodName": ["didWork"], "fileName": "org.gradle.api.tasks.WorkResults"}, {"methodBody": ["METHOD_START", "{", "if    (  (  !  ( nullToEmpty ( includeSpecs )  . isEmpty (  )  )  )     |  |     (  !  ( nullToEmpty ( excludeSpecs )  . isEmpty (  )  )  )  )     {", "throw   new   UnsupportedOperationException (  \" Cannot   add   include / exclude   specs   to   Ant   node .    Only   include / exclude   patterns   are   currently   supported .  \"  )  ;", "}", "return   new   AntBuilderDelegate ( getIncludes (  )  ,    getExcludes (  )  ,    isCaseSensitive (  )  )  . addToAntBuilder ( node ,    childNodeName )  ;", "}", "METHOD_END"], "methodName": ["addToAntBuilder"], "fileName": "org.gradle.api.tasks.util.PatternSet"}, {"methodBody": ["METHOD_START", "{", "return   doCopyFrom (  (  ( PatternSet )     ( sourcePattern )  )  )  ;", "}", "METHOD_END"], "methodName": ["copyFrom"], "fileName": "org.gradle.api.tasks.util.PatternSet"}, {"methodBody": ["METHOD_START", "{", "target . includes    =     (  ( from . includes )     =  =    null )     ?    null    :    Sets . newLinkedHashSet ( from . includes )  ;", "target . excludes    =     (  ( from . excludes )     =  =    null )     ?    null    :    Sets . newLinkedHashSet ( from . excludes )  ;", "target . includeSpecs    =     (  ( from . includeSpecs )     =  =    null )     ?    null    :    Sets . newLinkedHashSet ( from . includeSpecs )  ;", "target . excludeSpecs    =     (  ( from . excludeSpecs )     =  =    null )     ?    null    :    Sets . newLinkedHashSet ( from . excludeSpecs )  ;", "}", "METHOD_END"], "methodName": ["copyIncludesAndExcludes"], "fileName": "org.gradle.api.tasks.util.PatternSet"}, {"methodBody": ["METHOD_START", "{", "caseSensitive    =    from . caseSensitive ;", "if    ( from   instanceof    . Intersection )     {", "other    =     (  (  . Intersection )     ( from )  )  . other ;", "otherCopy    =    new    ( other )  . copyFrom ( other )  ;", "intersectCopy    =    new    . Intersection ( otherCopy )  ;", "copyIncludesAndExcludes ( intersectCopy ,    from )  ;", "includes    =    null ;", "excludes    =    null ;", "includeSpecs    =    Sets . newLinkedHashSet (  )  ;", "includeSpecs . add ( intersectCopy . getAsSpec (  )  )  ;", "excludeSpecs    =    null ;", "} else    {", "copyIncludesAndExcludes ( this ,    from )  ;", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["doCopyFrom"], "fileName": "org.gradle.api.tasks.util.PatternSet"}, {"methodBody": ["METHOD_START", "{", "exclude ( Specs .  < FileTreeElement > convertClosureToSpec ( closure )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["exclude"], "fileName": "org.gradle.api.tasks.util.PatternSet"}, {"methodBody": ["METHOD_START", "{", "for    ( Object   exclude    :    excludes )     {", "getExcludes (  )  . add (  . PARSER . parseNotation ( exclude )  )  ;", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["exclude"], "fileName": "org.gradle.api.tasks.util.PatternSet"}, {"methodBody": ["METHOD_START", "{", "Collections . addAll ( getExcludes (  )  ,    excludes )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["exclude"], "fileName": "org.gradle.api.tasks.util.PatternSet"}, {"methodBody": ["METHOD_START", "{", "getExcludeSpecs (  )  . add ( spec )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["exclude"], "fileName": "org.gradle.api.tasks.util.PatternSet"}, {"methodBody": ["METHOD_START", "{", "CollectionUtils . addAll ( getExcludeSpecs (  )  ,    excludes )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["excludeSpecs"], "fileName": "org.gradle.api.tasks.util.PatternSet"}, {"methodBody": ["METHOD_START", "{", "return   patternSpecFactory . createExcludeSpec ( this )  ;", "}", "METHOD_END"], "methodName": ["getAsExcludeSpec"], "fileName": "org.gradle.api.tasks.util.PatternSet"}, {"methodBody": ["METHOD_START", "{", "return   patternSpecFactory . createIncludeSpec ( this )  ;", "}", "METHOD_END"], "methodName": ["getAsIncludeSpec"], "fileName": "org.gradle.api.tasks.util.PatternSet"}, {"methodBody": ["METHOD_START", "{", "return   patternSpecFactory . createSpec ( this )  ;", "}", "METHOD_END"], "methodName": ["getAsSpec"], "fileName": "org.gradle.api.tasks.util.PatternSet"}, {"methodBody": ["METHOD_START", "{", "if    (  ( excludeSpecs )     =  =    null )     {", "excludeSpecs    =    s . newLinkedHash (  )  ;", "}", "return   excludeSpecs ;", "}", "METHOD_END"], "methodName": ["getExcludeSpecs"], "fileName": "org.gradle.api.tasks.util.PatternSet"}, {"methodBody": ["METHOD_START", "{", "if    (  ( excludes )     =  =    null )     {", "excludes    =    s . newLinkedHash (  )  ;", "}", "return   excludes ;", "}", "METHOD_END"], "methodName": ["getExcludes"], "fileName": "org.gradle.api.tasks.util.PatternSet"}, {"methodBody": ["METHOD_START", "{", "if    (  ( includeSpecs )     =  =    null )     {", "includeSpecs    =    s . newLinkedHash (  )  ;", "}", "return   includeSpecs ;", "}", "METHOD_END"], "methodName": ["getIncludeSpecs"], "fileName": "org.gradle.api.tasks.util.PatternSet"}, {"methodBody": ["METHOD_START", "{", "if    (  ( includes )     =  =    null )     {", "includes    =    s . newLinkedHash (  )  ;", "}", "return   includes ;", "}", "METHOD_END"], "methodName": ["getIncludes"], "fileName": "org.gradle.api.tasks.util.PatternSet"}, {"methodBody": ["METHOD_START", "{", "include ( Specs .  < FileTreeElement > convertClosureToSpec ( closure )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["include"], "fileName": "org.gradle.api.tasks.util.PatternSet"}, {"methodBody": ["METHOD_START", "{", "for    ( Object   include    :    includes )     {", "getIncludes (  )  . add (  . PARSER . parseNotation ( include )  )  ;", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["include"], "fileName": "org.gradle.api.tasks.util.PatternSet"}, {"methodBody": ["METHOD_START", "{", "Collections . addAll ( getIncludes (  )  ,    includes )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["include"], "fileName": "org.gradle.api.tasks.util.PatternSet"}, {"methodBody": ["METHOD_START", "{", "getIncludeSpecs (  )  . add ( spec )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["include"], "fileName": "org.gradle.api.tasks.util.PatternSet"}, {"methodBody": ["METHOD_START", "{", "CollectionUtils . addAll ( getIncludeSpecs (  )  ,    includeSpecs )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["includeSpecs"], "fileName": "org.gradle.api.tasks.util.PatternSet"}, {"methodBody": ["METHOD_START", "{", "if    ( isEmpty (  )  )     {", "return   new    ( this . patternSpecFactory )  ;", "} else    {", "return   new    . Intersection ( this )  ;", "}", "}", "METHOD_END"], "methodName": ["intersect"], "fileName": "org.gradle.api.tasks.util.PatternSet"}, {"methodBody": ["METHOD_START", "{", "return   caseSensitive ;", "}", "METHOD_END"], "methodName": ["isCaseSensitive"], "fileName": "org.gradle.api.tasks.util.PatternSet"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  ( includes )     =  =    null )     |  |     ( includes . isEmpty (  )  )  )     &  &     (  (  ( excludes )     =  =    null )     |  |     ( excludes . isEmpty (  )  )  )  )     &  &     (  (  ( includeSpecs )     =  =    null )     |  |     ( includeSpecs . isEmpty (  )  )  )  )     &  &     (  (  ( excludeSpecs )     =  =    null )     |  |     ( excludeSpecs . isEmpty (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["isEmpty"], "fileName": "org.gradle.api.tasks.util.PatternSet"}, {"methodBody": ["METHOD_START", "{", "if    ( set    =  =    null )     {", "return   Collections . empty (  )  ;", "}", "return   set ;", "}", "METHOD_END"], "methodName": ["nullToEmpty"], "fileName": "org.gradle.api.tasks.util.PatternSet"}, {"methodBody": ["METHOD_START", "{", "this . caseSensitive    =    caseSensitive ;", "}", "METHOD_END"], "methodName": ["setCaseSensitive"], "fileName": "org.gradle.api.tasks.util.PatternSet"}, {"methodBody": ["METHOD_START", "{", "this . excludes    =    null ;", "return   exclude ( excludes )  ;", "}", "METHOD_END"], "methodName": ["setExcludes"], "fileName": "org.gradle.api.tasks.util.PatternSet"}, {"methodBody": ["METHOD_START", "{", "this . includes    =    null ;", "return   include ( includes )  ;", "}", "METHOD_END"], "methodName": ["setIncludes"], "fileName": "org.gradle.api.tasks.util.PatternSet"}, {"methodBody": ["METHOD_START", "{", "GroovyObject   groovyObject    =     (  ( GroovyObject )     ( node )  )  ;", "Map < String ,    Object >    props    =    new   HashMap < String ,    Object >  (  2  )  ;", "props . put (  \" casesensitive \"  ,    caseSensitive )  ;", "for    ( String   filename    :    filenames )     {", "props . put (  \" name \"  ,    AntUmaskFilename ( filename )  )  ;", "groovyObject . invokeMethod (  \" filename \"  ,    props )  ;", "}", "return   node ;", "}", "METHOD_END"], "methodName": ["addFilenames"], "fileName": "org.gradle.api.tasks.util.internal.PatternSetAntBuilderDelegate"}, {"methodBody": ["METHOD_START", "{", "return   PatternSetAntBuilderDelegate . and ( node ,    new   Action < Object >  (  )     {", "public   void   execute ( Object   node )     {", "if    (  !  ( includes . isEmpty (  )  )  )     {", "PatternSetAntBuilderDelegate . or ( node ,    new   Action < Object >  (  )     {", "public   void   execute ( Object   node )     {", "PatternSetAntBuilderDelegate . addFilenames ( node ,    includes ,    caseSensitive )  ;", "}", "}  )  ;", "}", "if    (  !  ( excludes . isEmpty (  )  )  )     {", "PatternSetAntBuilderDelegate . not ( node ,    new   Action < Object >  (  )     {", "public   void   execute ( Object   node )     {", "PatternSetAntBuilderDelegate . or ( node ,    new   Action < Object >  (  )     {", "public   void   execute ( Object   node )     {", "PatternSetAntBuilderDelegate . addFilenames ( node ,    excludes ,    caseSensitive )  ;", "}", "}  )  ;", "}", "}  )  ;", "}", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["addToAntBuilder"], "fileName": "org.gradle.api.tasks.util.internal.PatternSetAntBuilderDelegate"}, {"methodBody": ["METHOD_START", "{", "return   PatternSetAntBuilderDelegate . logical ( node ,     \" and \"  ,    withNode )  ;", "}", "METHOD_END"], "methodName": ["and"], "fileName": "org.gradle.api.tasks.util.internal.PatternSetAntBuilderDelegate"}, {"methodBody": ["METHOD_START", "{", "GroovyObject   groovyObject    =     (  ( GroovyObject )     ( node )  )  ;", "groovyObject . invokeMethod ( op ,    new   Closure ( null ,    null )     {", "void   doCall (  )     {", "withNode . execute ( get (  )  )  ;", "}", "}  )  ;", "return   node ;", "}", "METHOD_END"], "methodName": ["logical"], "fileName": "org.gradle.api.tasks.util.internal.PatternSetAntBuilderDelegate"}, {"methodBody": ["METHOD_START", "{", "return   PatternSetAntBuilderDelegate . logical ( node ,     \" not \"  ,    withNode )  ;", "}", "METHOD_END"], "methodName": ["not"], "fileName": "org.gradle.api.tasks.util.internal.PatternSetAntBuilderDelegate"}, {"methodBody": ["METHOD_START", "{", "return   PatternSetAntBuilderDelegate . logical ( node ,     \" or \"  ,    withNode )  ;", "}", "METHOD_END"], "methodName": ["or"], "fileName": "org.gradle.api.tasks.util.internal.PatternSetAntBuilderDelegate"}, {"methodBody": ["METHOD_START", "{", "return   PatternSets . PATTERN _ SET _ FACTORY ;", "}", "METHOD_END"], "methodName": ["getNonCachingPatternSetFactory"], "fileName": "org.gradle.api.tasks.util.internal.PatternSets"}, {"methodBody": ["METHOD_START", "{", "return   new   PatternSets . PatternSetFactory ( patternSpecFactory )  ;", "}", "METHOD_END"], "methodName": ["getPatternSetFactory"], "fileName": "org.gradle.api.tasks.util.internal.PatternSets"}, {"methodBody": ["METHOD_START", "{", "List < Spec < FileTreeElement >  >    allExcludeSpecs    =    new   ArrayList < Spec < FileTreeElement >  >  (  (  2     +     ( patternSet . getExcludeSpecs (  )  . size (  )  )  )  )  ;", "if    (  !  ( patternSet . getExcludes (  )  . isEmpty (  )  )  )     {", "allExcludeSpecs . add ( createSpec ( patternSet . getExcludes (  )  ,    false ,    patternSet . isCaseSensitive (  )  )  )  ;", "}", "allExcludeSpecs . add ( getDefaultExcludeSpec ( patternSet . isCaseSensitive (  )  )  )  ;", "allExcludeSpecs . addAll ( patternSet . getExcludeSpecs (  )  )  ;", "if    ( allExcludeSpecs . isEmpty (  )  )     {", "return   Specs . satisfyNone (  )  ;", "} else    {", "return   Specs . union ( allExcludeSpecs )  ;", "}", "}", "METHOD_END"], "methodName": ["createExcludeSpec"], "fileName": "org.gradle.api.tasks.util.internal.PatternSpecFactory"}, {"methodBody": ["METHOD_START", "{", "List < Spec < FileTreeElement >  >    allIncludeSpecs    =    new   ArrayList < Spec < FileTreeElement >  >  (  (  1     +     ( patternSet . getIncludeSpecs (  )  . size (  )  )  )  )  ;", "if    (  !  ( patternSet . getIncludes (  )  . isEmpty (  )  )  )     {", "allIncludeSpecs . add ( createSpec ( patternSet . getIncludes (  )  ,    true ,    patternSet . isCaseSensitive (  )  )  )  ;", "}", "allIncludeSpecs . addAll ( patternSet . getIncludeSpecs (  )  )  ;", "return   Specs . union ( allIncludeSpecs )  ;", "}", "METHOD_END"], "methodName": ["createIncludeSpec"], "fileName": "org.gradle.api.tasks.util.internal.PatternSpecFactory"}, {"methodBody": ["METHOD_START", "{", "if    ( patterns . isEmpty (  )  )     {", "return   include    ?    Specs .  < FileTreeElement > satisfyAll (  )     :    Specs .  < FileTreeElement > satisfyNone (  )  ;", "}", "List < Spec < RelativePath >  >    matchers    =    new   ArrayList < Spec < RelativePath >  >  ( patterns . size (  )  )  ;", "for    ( String   pattern    :    patterns )     {", "Spec < RelativePath >    patternMatcher    =    MatcherFactory . getMatcher ( include ,    caseSensitive ,    pattern )  ;", "matchers . add ( patternMatcher )  ;", "}", "return   new   RelativePathSpec ( Specs . union ( matchers )  )  ;", "}", "METHOD_END"], "methodName": ["createSpec"], "fileName": "org.gradle.api.tasks.util.internal.PatternSpecFactory"}, {"methodBody": ["METHOD_START", "{", "return   Specs . intersect ( createIncludeSpec ( patternSet )  ,    Specs . negate ( createExcludeSpec ( patternSet )  )  )  ;", "}", "METHOD_END"], "methodName": ["createSpec"], "fileName": "org.gradle.api.tasks.util.internal.PatternSpecFactory"}, {"methodBody": ["METHOD_START", "{", "Spec < FileTreeElement >    specs    =    defaultExcludeSpecs . get ( caseSensitive )  ;", "List < String >    defaultExcludes    =    Arrays . asList ( DireScanner . getDefaultExcludes (  )  )  ;", "if    ( specs    =  =    null )     {", "specs    =    updateDefaultExcludeCache ( defaultExcludes ,    caseSensitive )  ;", "} else", "if    (  !  ( previousDefaultExcludes . equals ( defaultExcludes )  )  )     {", "specs    =    updateDefaultExcludeCache ( defaultExcludes ,    caseSensitive )  ;", "}", "return   specs ;", "}", "METHOD_END"], "methodName": ["getDefaultExcludeSpec"], "fileName": "org.gradle.api.tasks.util.internal.PatternSpecFactory"}, {"methodBody": ["METHOD_START", "{", "previousDefaultExcludes . clear (  )  ;", "previousDefaultExcludes . addAll ( defaultExcludes )  ;", "defaultExcludes . put ( caseSensitive ,    create ( defaultExcludes ,    false ,    true )  )  ;", "defaultExcludes . put ( caseSensitive ,    create ( defaultExcludes ,    false ,    false )  )  ;", "return   defaultExcludes . get ( caseSensitive )  ;", "}", "METHOD_END"], "methodName": ["updateDefaultExcludeCache"], "fileName": "org.gradle.api.tasks.util.internal.PatternSpecFactory"}, {"methodBody": ["METHOD_START", "{", "return   currentDir ;", "}", "METHOD_END"], "methodName": ["getCurrentDir"], "fileName": "org.gradle.initialization.BuildLayoutParameters"}, {"methodBody": ["METHOD_START", "{", "return   gradleUserHomeDir ;", "}", "METHOD_END"], "methodName": ["getGradleUserHomeDir"], "fileName": "org.gradle.initialization.BuildLayoutParameters"}, {"methodBody": ["METHOD_START", "{", "return   projectDir ;", "}", "METHOD_END"], "methodName": ["getProjectDir"], "fileName": "org.gradle.initialization.BuildLayoutParameters"}, {"methodBody": ["METHOD_START", "{", "return    ( projectDir )     !  =    null    ?    projectDir    :    currentDir ;", "}", "METHOD_END"], "methodName": ["getSearchDir"], "fileName": "org.gradle.initialization.BuildLayoutParameters"}, {"methodBody": ["METHOD_START", "{", "return   searchUpwards ;", "}", "METHOD_END"], "methodName": ["getSearchUpwards"], "fileName": "org.gradle.initialization.BuildLayoutParameters"}, {"methodBody": ["METHOD_START", "{", "this . currentDir    =    currentDir ;", "rurn   this ;", "}", "METHOD_END"], "methodName": ["setCurrentDir"], "fileName": "org.gradle.initialization.BuildLayoutParameters"}, {"methodBody": ["METHOD_START", "{", "this . gradleUserHomeDir    =    gradleUserHomeDir ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setGradleUserHomeDir"], "fileName": "org.gradle.initialization.BuildLayoutParameters"}, {"methodBody": ["METHOD_START", "{", "this . projectDir    =    projectDir ;", "rurn   this ;", "}", "METHOD_END"], "methodName": ["setProjectDir"], "fileName": "org.gradle.initialization.BuildLayoutParameters"}, {"methodBody": ["METHOD_START", "{", "this . searchUpwards    =    searchUpwards ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setSearchUpwards"], "fileName": "org.gradle.initialization.BuildLayoutParameters"}, {"methodBody": ["METHOD_START", "{", "for    ( InitScriptFinder   finder    :    finders )     {", "finder . findScripts ( scripts )  ;", "}", "}", "METHOD_END"], "methodName": ["findScripts"], "fileName": "org.gradle.initialization.CompositeInitScriptFinder"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( initScriptsDir . isDirectory (  )  )  )     {", "return ;", "}", "List < File >    found    =    initScriptsIn ( initScriptsDir )  ;", "Collections . sort ( found )  ;", "scripts . addAll ( found )  ;", "}", "METHOD_END"], "methodName": ["findScriptsInDir"], "fileName": "org.gradle.initialization.DirectoryInitScriptFinder"}, {"methodBody": ["METHOD_START", "{", "return   resolver (  )  . findScriptsIn ( initScriptsDir )  ;", "}", "METHOD_END"], "methodName": ["initScriptsIn"], "fileName": "org.gradle.initialization.DirectoryInitScriptFinder"}, {"methodBody": ["METHOD_START", "{", "return   resolver (  )  . resolveScriptFile ( dir ,    basename )  ;", "}", "METHOD_END"], "methodName": ["resolveScriptFile"], "fileName": "org.gradle.initialization.DirectoryInitScriptFinder"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultScriptFileResolver (  )  ;", "}", "METHOD_END"], "methodName": ["resolver"], "fileName": "org.gradle.initialization.DirectoryInitScriptFinder"}, {"methodBody": ["METHOD_START", "{", "if    (  ( gradleHome )     =  =    null )     {", "return ;", "}", "findScriptsInDir ( new   File ( gradleHome ,     \" init . d \"  )  ,    scripts )  ;", "}", "METHOD_END"], "methodName": ["findScripts"], "fileName": "org.gradle.initialization.DistributionInitScriptFinder"}, {"methodBody": ["METHOD_START", "{", "File   userInitScript    =    resolveScriptFile ( userHomeDir ,     \" init \"  )  ;", "if    ( userInitScript    !  =    null )     {", "scripts . add ( userInitScript )  ;", "}", "findScriptsInDir ( new   File ( userHomeDir ,     \" init . d \"  )  ,    scripts )  ;", "}", "METHOD_END"], "methodName": ["findScripts"], "fileName": "org.gradle.initialization.UserHomeInitScriptFinder"}, {"methodBody": ["METHOD_START", "{", "return   args ;", "}", "METHOD_END"], "methodName": ["getArgs"], "fileName": "org.gradle.internal.DefaultTaskExecutionRequest"}, {"methodBody": ["METHOD_START", "{", "return   projectPath ;", "}", "METHOD_END"], "methodName": ["getProjectPath"], "fileName": "org.gradle.internal.DefaultTaskExecutionRequest"}, {"methodBody": ["METHOD_START", "{", "return   rootDir ;", "}", "METHOD_END"], "methodName": ["getRootDir"], "fileName": "org.gradle.internal.DefaultTaskExecutionRequest"}, {"methodBody": ["METHOD_START", "{", "return   CurrentGradleInstallation . locate (  )  . getInstallation (  )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "org.gradle.internal.installation.CurrentGradleInstallation"}, {"methodBody": ["METHOD_START", "{", "return   gradleInstallation ;", "}", "METHOD_END"], "methodName": ["getInstallation"], "fileName": "org.gradle.internal.installation.CurrentGradleInstallation"}, {"methodBody": ["METHOD_START", "{", "if    (  ( CurrentGradleInstallation . instance )     =  =    null )     {", "CurrentGradleInstallation . instance    =    CurrentGradleInstallationLocator . locate (  )  ;", "}", "return   CurrentGradleInstallation . instance ;", "}", "METHOD_END"], "methodName": ["locate"], "fileName": "org.gradle.internal.installation.CurrentGradleInstallation"}, {"methodBody": ["METHOD_START", "{", "File   parentDir    =    codeSource . getParentFile (  )  ;", "if    ( parentDir . getName (  )  . equals (  \" lib \"  )  )     {", "File   pluginsDir    =    new   File ( parentDir ,     \" plugins \"  )  ;", "return    (  ( parentDir . isDirectory (  )  )     &  &     ( pluginsDir . exists (  )  )  )     &  &     ( pluginsDir . isDirectory (  )  )     ?    parentDir . getParentFile (  )     :    null ;", "}", "if    ( parentDir . getName (  )  . equals (  \" plugins \"  )  )     {", "File   libDir    =    parentDir . getParentFile (  )  ;", "return    (  (  ( parentDir . isDirectory (  )  )     &  &     ( libDir . exists (  )  )  )     &  &     ( libDir . isDirectory (  )  )  )     &  &     ( libDir . getName (  )  . equals (  \" lib \"  )  )     ?    libDir . getParentFile (  )     :    null ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["determineDistRootDir"], "fileName": "org.gradle.internal.installation.CurrentGradleInstallationLocator"}, {"methodBody": ["METHOD_START", "{", "File   codeSource    =    ClasspathUtil . getClasspathForClass ( clazz )  ;", "if    ( codeSource . isFile (  )  )     {", "return    . determineDistRootDir ( codeSource )  ;", "} else    {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["findDistDir"], "fileName": "org.gradle.internal.installation.CurrentGradleInstallationLocator"}, {"methodBody": ["METHOD_START", "{", "return   CurrentGradleInstallationLocator . locateViaClassLoader ( CurrentGradleInstallationLocator . class . getClassLoader (  )  )  ;", "}", "METHOD_END"], "methodName": ["locate"], "fileName": "org.gradle.internal.installation.CurrentGradleInstallationLocator"}, {"methodBody": ["METHOD_START", "{", "File   dir    =    CurrentGradleInstallationLocator . findDistDir ( clazz )  ;", "if    ( dir    =  =    null )     {", "return   new   CurrentGradleInstallation ( null )  ;", "} else    {", "return   new   CurrentGradleInstallation ( new   GradleInstallation ( dir )  )  ;", "}", "}", "METHOD_END"], "methodName": ["locateViaClass"], "fileName": "org.gradle.internal.installation.CurrentGradleInstallationLocator"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    clazz ;", "try    {", "clazz    =    classLoader . loadClass (  . BEACON _ CLASS _ NAME )  ;", "}    catch    ( ClassNotFoundException   e )     {", "clazz    =     . class ;", "}", "return    . locateViaClass ( clazz )  ;", "}", "METHOD_END"], "methodName": ["locateViaClassLoader"], "fileName": "org.gradle.internal.installation.CurrentGradleInstallationLocator"}, {"methodBody": ["METHOD_START", "{", "collection . add ( root )  ;", "File [  ]    subDirs    =    root . listFiles (  . DIRECTORY _ FILTER )  ;", "if    ( subDirs    !  =    null )     {", "for    ( File   subdirectory    :    subDirs )     {", ". collectWithSubdirectories ( subdirectory ,    collection )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["collectWithSubdirectories"], "fileName": "org.gradle.internal.installation.GradleInstallation"}, {"methodBody": ["METHOD_START", "{", "List < File >    libDirAndSubdirs    =    new   ArrayList < File >  (  )  ;", ". collectWithSubdirectories ( new   File ( dir ,     \" lib \"  )  ,    libDirAndSubdirs )  ;", "return   libDirAndSubdirs ;", "}", "METHOD_END"], "methodName": ["findLibDirs"], "fileName": "org.gradle.internal.installation.GradleInstallation"}, {"methodBody": ["METHOD_START", "{", "return   dir ;", "}", "METHOD_END"], "methodName": ["getGradleHome"], "fileName": "org.gradle.internal.installation.GradleInstallation"}, {"methodBody": ["METHOD_START", "{", "return   libDirs ;", "}", "METHOD_END"], "methodName": ["getLibDirs"], "fileName": "org.gradle.internal.installation.GradleInstallation"}, {"methodBody": ["METHOD_START", "{", "return   DynamicInvokeResult . NULL ;", "}", "METHOD_END"], "methodName": ["found"], "fileName": "org.gradle.internal.metaobject.DynamicInvokeResult"}, {"methodBody": ["METHOD_START", "{", "return   value    =  =    null    ?    DynamicInvokeResult . found (  )     :    new   DynamicInvokeResult ( value )  ;", "}", "METHOD_END"], "methodName": ["found"], "fileName": "org.gradle.internal.metaobject.DynamicInvokeResult"}, {"methodBody": ["METHOD_START", "{", "if    ( isFound (  )  )     {", "rurn   value ;", "} else    {", "throw   new   IllegalStateException (  \" Not   found \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.gradle.internal.metaobject.DynamicInvokeResult"}, {"methodBody": ["METHOD_START", "{", "return    ( value )     !  =     ( DynamicInvokeResult . NO _ VALUE )  ;", "}", "METHOD_END"], "methodName": ["isFound"], "fileName": "org.gradle.internal.metaobject.DynamicInvokeResult"}, {"methodBody": ["METHOD_START", "{", "return   DynamicInvokeResult . NOT _ FOUND ;", "}", "METHOD_END"], "methodName": ["notFound"], "fileName": "org.gradle.internal.metaobject.DynamicInvokeResult"}, {"methodBody": ["METHOD_START", "{", "for    ( String   extension    :    DefaultScriptFileResolver . EXTENSIONS )     {", "if    ( FileUtils . hasExtension ( file ,    extension )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["hasScriptExtension"], "fileName": "org.gradle.internal.scripts.DefaultScriptFileResolver"}, {"methodBody": ["METHOD_START", "{", "List < ScriptingLanguage >    scriptingLanguages    =    ScriptingLanguages . all (  )  ;", "String [  ]    extensions    =    new   String [ scriptingLanguages . size (  )  ]  ;", "for    ( int   i    =     0  ;    i    <     ( extensions . length )  ;    i +  +  )     {", "extensions [ i ]     =    scriptingLanguages . get ( i )  . getExtension (  )  ;", "}", "return   extensions ;", "}", "METHOD_END"], "methodName": ["scriptingLanguageExtensions"], "fileName": "org.gradle.internal.scripts.DefaultScriptFileResolver"}, {"methodBody": ["METHOD_START", "{", "return   ScriptingLanguages . ALL ;", "}", "METHOD_END"], "methodName": ["all"], "fileName": "org.gradle.internal.scripts.ScriptingLanguages"}, {"methodBody": ["METHOD_START", "{", "return   new   ScriptingLanguage (  )     {", "@ Override", "public   String   getExtension (  )     {", "return   extension ;", "}", "@ Override", "public   String   getProvider (  )     {", "return   scriptPluginFactory ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["scriptingLanguage"], "fileName": "org.gradle.internal.scripts.ScriptingLanguages"}, {"methodBody": ["METHOD_START", "{", "if    ( notation   instanceof   CharSequence )     {", "CharSequence   charSequence    =     (  ( CharSequence )     ( notation )  )  ;", "delegate . convert ( charSequence . toString (  )  ,    result )  ;", "}", "}", "METHOD_END"], "methodName": ["convert"], "fileName": "org.gradle.internal.typeconversion.CharSequenceNotationConverter"}, {"methodBody": ["METHOD_START", "{", "result . converted ( notation )  ;", "}", "METHOD_END"], "methodName": ["convert"], "fileName": "org.gradle.internal.typeconversion.CharSequenceNotationParser"}, {"methodBody": ["METHOD_START", "{", "for    ( int   i    =     0  ;     (  !  ( result . hasResult (  )  )  )     &  &     ( i    <     ( converters . size (  )  )  )  ;    i +  +  )     {", "< N ,     ?    extends   T >    converter    =    converters . get ( i )  ;", "converter . convert ( notation ,    result )  ;", "}", "}", "METHOD_END"], "methodName": ["convert"], "fileName": "org.gradle.internal.typeconversion.CompositeNotationConverter"}, {"methodBody": ["METHOD_START", "{", "String   failure ;", "if    (  ( notation    =  =    null )     &  &     (  !  ( allowNullInput )  )  )     {", "failure    =    String . format (  \" Cannot   convert   a   null   value   to    % s .  \"  ,    targetTypeDisplayName )  ;", "} else    {", "try    {", "return   delegate . parse ( notation )  ;", "}    catch    ( UnsupportedException   e )     {", "failure    =    String . format (  \" Cannot   convert   the   provided   notation   to    % s :     % s .  \"  ,    targetTypeDisplayName ,    e . get (  )  )  ;", "}", "}", "FormattingDiagnosticsVisitor   visitor    =    new   FormattingDiagnosticsVisitor (  )  ;", "describe ( visitor )  ;", "throw   new   UnsupportedException ( notation ,    failure ,    invalidMessage ,    visitor . getCandidates (  )  )  ;", "}", "METHOD_END"], "methodName": ["parseNotation"], "fileName": "org.gradle.internal.typeconversion.ErrorHandlingNotationParser"}, {"methodBody": ["METHOD_START", "{", "Collection   notations    =    GUtil . collectionize ( notation )  ;", "if    ( notations . isEmpty (  )  )     {", "return   Collections . emptySet (  )  ;", "}", "if    (  ( notations . size (  )  )     =  =     1  )     {", "return   Collections . singleton ( delegate . parse ( notations . iterator (  )  . next (  )  )  )  ;", "}", "Set < T >    out    =    new   LinkedHashSet < T >  (  )  ;", "for    ( Object   n    :    notations )     {", "out . add ( delegate . parse ( n )  )  ;", "}", "return   out ;", "}", "METHOD_END"], "methodName": ["parseNotation"], "fileName": "org.gradle.internal.typeconversion.FlatteningNotationParser"}, {"methodBody": ["METHOD_START", "{", "NotationConverterToNotationParserAdapter . ResultImpl < T >    result    =    new   NotationConverterToNotationParserAdapter . ResultImpl < T >  (  )  ;", "converter . convert ( notation ,    result )  ;", "if    (  !  ( result . hasResult )  )     {", "throw   new   UnsupportedNotationException ( notation )  ;", "}", "return   result . result ;", "}", "METHOD_END"], "methodName": ["parseNotation"], "fileName": "org.gradle.internal.typeconversion.NotationConverterToNotationParserAdapter"}, {"methodBody": ["METHOD_START", "{", "allowNullInput    =    true ;", "return   this ;", "}", "METHOD_END"], "methodName": ["allowNullInput"], "fileName": "org.gradle.internal.typeconversion.NotationParserBuilder"}, {"methodBody": ["METHOD_START", "{", "this . notationParsers . add ( converter )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["converter"], "fileName": "org.gradle.internal.typeconversion.NotationParserBuilder"}, {"methodBody": ["METHOD_START", "{", "List < NotationConverter < Object ,     ?    extends   T >  >    composites    =    new   LinkedList < NotationConverter < Object ,     ?    extends   T >  >  (  )  ;", "if    (  (  !  ( resultingType . getTargetType (  )  . equals ( Object . class )  )  )     &  &     ( implicitConverters )  )     {", "composites . add ( new   JustReturningConverter < Object ,    T >  ( resultingType . getTargetType (  )  )  )  ;", "}", "composites . addAll ( this . notationParsers )  ;", "return   new   NotationConverterToAdapter < Object ,    T >  (  (  ( composites . size (  )  )     =  =     1     ?    composites . get (  0  )     :    new   CompositeNotationConverter < Object ,    T >  ( composites )  )  )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.internal.typeconversion.NotationParserBuilder"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( resultingType . getTargetType (  )  . equals ( String . class )  )  )     {", "throw   new   UnsupportedOperationException (  \" Can   only   convert   from   CharSequence   when   the   target   type   is   String .  \"  )  ;", "}", "NotationConverter   notationParser    =    new   CharSequence (  )  ;", "fromCharSequence ( notationParser )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["fromCharSequence"], "fileName": "org.gradle.internal.typeconversion.NotationParserBuilder"}, {"methodBody": ["METHOD_START", "{", "this . notationParsers . add ( new   CharSequenceNotationConverter < Object ,    T >  ( converter )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["fromCharSequence"], "fileName": "org.gradle.internal.typeconversion.NotationParserBuilder"}, {"methodBody": ["METHOD_START", "{", "this . notationParsers . add ( new   TypeFilteringNotationConverter < Object ,    S ,    T >  ( notationType ,    converter )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["fromType"], "fileName": "org.gradle.internal.typeconversion.NotationParserBuilder"}, {"methodBody": ["METHOD_START", "{", "this . invalidNotationMessage    =    invalidNotationMessage ;", "return   this ;", "}", "METHOD_END"], "methodName": ["invalidNotationMessage"], "fileName": "org.gradle.internal.typeconversion.NotationParserBuilder"}, {"methodBody": ["METHOD_START", "{", "implicitConverters    =    false ;", "return   this ;", "}", "METHOD_END"], "methodName": ["noImplicitConverters"], "fileName": "org.gradle.internal.typeconversion.NotationParserBuilder"}, {"methodBody": ["METHOD_START", "{", "return   wrapInErrorHandling ( create (  )  )  ;", "}", "METHOD_END"], "methodName": ["toComposite"], "fileName": "org.gradle.internal.typeconversion.NotationParserBuilder"}, {"methodBody": ["METHOD_START", "{", "return   wrapInErrorHandling ( new   FlatteningNotationParser < T >  ( create (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["toFlatteningComposite"], "fileName": "org.gradle.internal.typeconversion.NotationParserBuilder"}, {"methodBody": ["METHOD_START", "{", "return   new   NotationParserBuilder < T >  ( new   TypeInfo < T >  ( resultingType )  )  ;", "}", "METHOD_END"], "methodName": ["toType"], "fileName": "org.gradle.internal.typeconversion.NotationParserBuilder"}, {"methodBody": ["METHOD_START", "{", "return   new   NotationParserBuilder < T >  ( resultingType )  ;", "}", "METHOD_END"], "methodName": ["toType"], "fileName": "org.gradle.internal.typeconversion.NotationParserBuilder"}, {"methodBody": ["METHOD_START", "{", "this . typeDisplayName    =    name ;", "return   this ;", "}", "METHOD_END"], "methodName": ["typeDisplayName"], "fileName": "org.gradle.internal.typeconversion.NotationParserBuilder"}, {"methodBody": ["METHOD_START", "{", "if    (  ( typeDisplayName )     =  =    null )     {", "typeDisplayName    =    new    . LazyDisplayName < T >  ( resultingType )  ;", "}", "return   new   ErrorHandlingNotationParser < Object ,    S >  ( typeDisplayName ,    invalidNotationMessage ,    allowNullInput ,    parser )  ;", "}", "METHOD_END"], "methodName": ["wrapInErrorHandling"], "fileName": "org.gradle.internal.typeconversion.NotationParserBuilder"}, {"methodBody": ["METHOD_START", "{", "if    ( type . isInstance ( notation )  )     {", "delegate . convert ( type . cast ( notation )  ,    result )  ;", "}", "}", "METHOD_END"], "methodName": ["convert"], "fileName": "org.gradle.internal.typeconversion.TypeFilteringNotationConverter"}, {"methodBody": ["METHOD_START", "{", "return   targetType ;", "}", "METHOD_END"], "methodName": ["getTargetType"], "fileName": "org.gradle.internal.typeconversion.TypeInfo"}, {"methodBody": ["METHOD_START", "{", "final   Project   project    =    new   Project (  )  ;", "final   ProjectHelper   helper    =    ProjectHelper . getProjectHelper (  )  ;", "project . addReference ( PROJECTHELPER _ REFERENCE ,    helper )  ;", "helper . getImportStack (  )  . addElement (  \" Builder \"  )  ;", "project . addBuildListener ( new   LoggingAdapter (  )  )  ;", "project . init (  )  ;", "project . getBaseDir (  )  ;", "return   project ;", "}", "METHOD_END"], "methodName": ["createProject"], "fileName": "org.gradle.util.AntUtil"}, {"methodBody": ["METHOD_START", "{", "task . setProject ( AntUtil . createProject (  )  )  ;", "task . execute (  )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.util.AntUtil"}, {"methodBody": ["METHOD_START", "{", "return   string . replaceAll (  \"  \\  \\  $  \"  ,     \"  \\  \\  $  \\  \\  $  \"  )  ;", "}", "METHOD_END"], "methodName": ["maskFilename"], "fileName": "org.gradle.util.AntUtil"}]