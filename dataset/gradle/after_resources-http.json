[{"methodBody": ["METHOD_START", "{", "if    ( original   instanceof   HttpEntityEnclosingRequest )     {", "r . setEntity (  (  ( HttpEntityEnclosingRequest )     ( original )  )  . getEntity (  )  )  ;", "}", "return   r ;", "}", "METHOD_END"], "methodName": ["copyEntity"], "fileName": "org.gradle.internal.resource.transport.http.AlwaysRedirectRedirectStrategy"}, {"methodBody": ["METHOD_START", "{", "URI   uri    =    this . getLocationURI ( request ,    response ,    context )  ;", "String   method    =    request . getRequestLine (  )  . getMethod (  )  ;", "if    ( method . equalsIgnoreCase ( METHOD _ NAME )  )     {", "return   new   HttpHead ( uri )  ;", "} else", "if    ( method . equalsIgnoreCase ( HttpPost . METHOD _ NAME )  )     {", "return   this . copyEntity ( new   HttpPost ( uri )  ,    request )  ;", "} else", "if    ( method . equalsIgnoreCase ( HttpPut . METHOD _ NAME )  )     {", "return   this . copyEntity ( new   HttpPut ( uri )  ,    request )  ;", "} else", "if    ( method . equalsIgnoreCase ( HttpDelete . METHOD _ NAME )  )     {", "return   new   HttpDelete ( uri )  ;", "} else", "if    ( method . equalsIgnoreCase ( HttpTrace . METHOD _ NAME )  )     {", "return   new   HttpTrace ( uri )  ;", "} else", "if    ( method . equalsIgnoreCase ( HttpOptions . METHOD _ NAME )  )     {", "return   new   HttpOptions ( uri )  ;", "} else", "if    ( method . equalsIgnoreCase ( HttpPatch . METHOD _ NAME )  )     {", "return   this . copyEntity ( new   HttpPatch ( uri )  ,    request )  ;", "} else    {", "return   new   HttpGet ( uri )  ;", "}", "}", "METHOD_END"], "methodName": ["getRedirect"], "fileName": "org.gradle.internal.resource.transport.http.AlwaysRedirectRedirectStrategy"}, {"methodBody": ["METHOD_START", "{", "if    (  ( uri . getPath (  )  )     =  =    null )     {", "uri    =    new   URI ( uri . getScheme (  )  ,    uri . getUserInfo (  )  ,    uri . getHost (  )  ,    uri . getP (  )  ,     \"  /  \"  ,    uri . getQuery (  )  ,    uri . getFragment (  )  )  ;", "} else", "if    (  (  !  ( uri . getPath (  )  . endsWith (  \"  /  \"  )  )  )     &  &     (  !  ( uri . getPath (  )  . endsWith (  \"  . html \"  )  )  )  )     {", "uri    =    new   URI ( uri . getScheme (  )  ,    uri . getUserInfo (  )  ,    uri . getHost (  )  ,    uri . getP (  )  ,     (  ( uri . getPath (  )  )     +     \"  /  \"  )  ,    uri . getQuery (  )  ,    uri . getFragment (  )  )  ;", "}", "return   uri ;", "}", "METHOD_END"], "methodName": ["addTrailingSlashes"], "fileName": "org.gradle.internal.resource.transport.http.ApacheDirectoryListingParser"}, {"methodBody": ["METHOD_START", "{", "final   int   baseURIPort    =    baseURI . getPort (  )  ;", "final   String   baseURIHost    =    baseURI . getHost (  )  ;", "final   String   baseURIScheme    =    baseURI . getScheme (  )  ;", "List < String >    uris    =    new   Arra < String >  (  )  ;", "final   String   prefixPath    =    baseURI . getPath (  )  ;", "for    ( URI   parsedURI    :    inputURIs )     {", "if    (  (  ( parsedURI . getHost (  )  )     !  =    null )     &  &     (  !  ( parsedURI . getHost (  )  . equals ( baseURIHost )  )  )  )     {", "continue ;", "}", "if    (  (  ( parsedURI . getScheme (  )  )     !  =    null )     &  &     (  !  ( parsedURI . getScheme (  )  . equals ( baseURIScheme )  )  )  )     {", "continue ;", "}", "if    (  ( parsedURI . getPort (  )  )     !  =    baseURIPort )     {", "continue ;", "}", "if    (  (  ( parsedURI . getPath (  )  )     !  =    null )     &  &     (  !  ( parsedURI . getPath (  )  . startsWith ( prefixPath )  )  )  )     {", "continue ;", "}", "String   childPathPart    =    parsedURI . getPath (  )  . substring ( prefixPath . length (  )  ,    parsedURI . getPath (  )  . length (  )  )  ;", "if    ( childPathPart . startsWith (  \"  .  .  /  \"  )  )     {", "continue ;", "}", "if    (  ( childPathPart . equals (  \"  \"  )  )     |  |     (  ( childPathPart . split (  \"  /  \"  )  . length )     >     1  )  )     {", "continue ;", "}", "String   path    =    parsedURI . getPath (  )  ;", "int   pos    =    path . lastIndexOf (  '  /  '  )  ;", "if    ( pos    <     0  )     {", "uris . add ( path )  ;", "} else", "if    ( pos    =  =     (  ( path . length (  )  )     -     1  )  )     {", "int   start    =    path . lastIndexOf (  '  /  '  ,     ( pos    -     1  )  )  ;", "if    ( start    <     0  )     {", "uris . add ( path . substring (  0  ,    pos )  )  ;", "} else    {", "uris . add ( path . substring (  ( start    +     1  )  ,    pos )  )  ;", "}", "} else    {", "uris . add ( path . substring (  ( pos    +     1  )  )  )  ;", "}", "}", "return   uris ;", "}", "METHOD_END"], "methodName": ["filterNonDirectChilds"], "fileName": "org.gradle.internal.resource.transport.http.ApacheDirectoryListingParser"}, {"methodBody": ["METHOD_START", "{", "baseURI    =    addTrailingSlashes ( baseURI )  ;", "if    (  ( contentType    =  =    null )     |  |     (  !  ( contentType . startsWith (  \" text / html \"  )  )  )  )     {", "throw   new   ResourceException ( baseURI ,    String . format (  \" Unsupported   ContentType    % s   for   directory   listing    '  % s '  \"  ,    contentType ,    baseURI )  )  ;", "}", "String   contentEncoding    =    UriTextResource . extractCharacterEncoding ( contentType ,     \" utf -  8  \"  )  ;", "final   Reader   htmlText    =    new   InputStreamReader ( content ,    contentEncoding )  ;", "final   InputSource   inputSource    =    new   InputSource ( htmlText )  ;", "final   SAXParser   htmlParser    =    new   SAXParser (  )  ;", "final    . AnchorListerHandler   anchorListerHandler    =    new    . AnchorListerHandler (  )  ;", "htmlParser . setContentHandler ( anchorListerHandler )  ;", "htmlParser . parse ( inputSource )  ;", "List < String >    hrefs    =    anchorListerHandler . getHrefs (  )  ;", "List < URI >    uris    =    resolveURIs ( baseURI ,    hrefs )  ;", "return   filterNonDirectChilds ( baseURI ,    uris )  ;", "}", "METHOD_END"], "methodName": ["parse"], "fileName": "org.gradle.internal.resource.transport.http.ApacheDirectoryListingParser"}, {"methodBody": ["METHOD_START", "{", "List < URI >    uris    =    new   ArrayList < URI >  (  )  ;", "for    ( String   href    :    hrefs )     {", "try    {", "uris . add ( baseURI . resolve ( href )  )  ;", "}    catch    ( IllegalArgumentException   ex )     {", ". LOGGER . debug (  \" Cannot   resolve   anchor :     {  }  \"  ,    href )  ;", "}", "}", "return   uris ;", "}", "METHOD_END"], "methodName": ["resolveURIs"], "fileName": "org.gradle.internal.resource.transport.http.ApacheDirectoryListingParser"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultHttpSettings . Builder (  )  ;", "}", "METHOD_END"], "methodName": ["builder"], "fileName": "org.gradle.internal.resource.transport.http.DefaultHttpSettings"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    currentProperties    =    new   TreeMap < String ,    String >  (  )  ;", "for    ( String   prop    :     . SSL _ SYSTEM _ PROPERTIES )     {", "currentProperties . put ( prop ,    System . getProperty ( prop )  )  ;", "}", "currentProperties . put (  \" home \"  ,    SystemProperties . getInstance (  )  . getJavaHomeDir (  )  . getPath (  )  )  ;", "return   currentProperties ;", "}", "METHOD_END"], "methodName": ["getCurrentProperties"], "fileName": "org.gradle.internal.resource.transport.http.DefaultSslContextFactory"}, {"methodBody": ["METHOD_START", "{", "SystemDefaultCredentialsProvider   credentialsProvider    =    new   SystemDefaultCredentialsProvider (  )  ;", "configureSslSocketConnectionFactory ( builder ,    httpSettings . getSslContextFactory (  )  ,    httpSettings . getHostnameVerifier (  )  )  ;", "configureAuthSchemeRegistry ( builder )  ;", "configureCredentials ( builder ,    credentialsProvider ,    httpSettings . getAuthenticationSettings (  )  )  ;", "configureProxy ( builder ,    credentialsProvider ,    httpSettings )  ;", "configureUserAgent ( builder )  ;", "configureCookieSpecRegistry ( builder )  ;", "configureRequestConfig ( builder )  ;", "configureSocketConfig ( builder )  ;", "configureRedirectStrategy ( builder )  ;", "builder . setDefaultCredentialsProvider ( credentialsProvider )  ;", "builder . setMaxConnTotal (  . MAX _ HTTP _ CONNECTIONS )  ;", "builder . setMaxConnPerRoute (  . MAX _ HTTP _ CONNECTIONS )  ;", "}", "METHOD_END"], "methodName": ["configure"], "fileName": "org.gradle.internal.resource.transport.http.HttpClientConfigurer"}, {"methodBody": ["METHOD_START", "{", "builder . setDefaultAuthSchemeRegistry ( RegistryBuilder .  < AuthSchemeProvider > create (  )  . register ( BASIC ,    new   BasicSchemeFactory (  )  )  . register ( DIGEST ,    new   DigestSchemeFactory (  )  )  . register ( NTLM ,    new   NTLMSchemeFactory (  )  )  . register ( SPNEGO ,    new   SPNegoSchemeFactory (  )  )  . register ( KERBEROS ,    new   KerberosSchemeFactory (  )  )  . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["configureAuthSchemeRegistry"], "fileName": "org.gradle.internal.resource.transport.http.HttpClientConfigurer"}, {"methodBody": ["METHOD_START", "{", "PublicSuffixMatcher   publicSuffixMatcher    =    PublicSuffixMatcherLoader . getDefault (  )  ;", "builder . setPublicSuffixMatcher ( publicSuffixMatcher )  ;", "final   CookieSpecProvider   defaultProvider    =    new   DefaultCookieSpecProvider ( CompatibilityLevel . DEFAULT ,    publicSuffixMatcher ,    new   String [  ]  {     \" EEE ,    dd - MMM - yy   HH : mm : ss   z \"  ,    DateUtils . PATTERN _ RFC 1  0  3  6  ,    DateUtils . PATTERN _ ASCTIME ,    DateUtils . PATTERN _ RFC 1  1  2  3     }  ,    false )  ;", "final   CookieSpecProvider   laxStandardProvider    =    new   RFC 6  2  6  5 CookieSpecProvider ( RFC 6  2  6  5 CookieSpecProvider . CompatibilityLevel . RELAXED ,    publicSuffixMatcher )  ;", "final   CookieSpecProvider   strictStandardProvider    =    new   RFC 6  2  6  5 CookieSpecProvider ( RFC 6  2  6  5 CookieSpecProvider . CompatibilityLevel . STRICT ,    publicSuffixMatcher )  ;", "builder . setDefaultCookieSpecRegistry ( RegistryBuilder .  < CookieSpecProvider > create (  )  . register ( DEFAULT ,    defaultProvider )  . register (  \" best - match \"  ,    defaultProvider )  . register (  \" compatibility \"  ,    defaultProvider )  . register ( STANDARD ,    laxStandardProvider )  . register ( STANDARD _ STRICT ,    strictStandardProvider )  . register ( NETSCAPE ,    new   NetscapeDraftSpecProvider (  )  )  . register ( IGNORE _ COOKIES ,    new   IgnoreSpecProvider (  )  )  . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["configureCookieSpecRegistry"], "fileName": "org.gradle.internal.resource.transport.http.HttpClientConfigurer"}, {"methodBody": ["METHOD_START", "{", "if    (  ( authentications . size (  )  )     >     0  )     {", "useCredentials ( credentialsProvider ,    ANY _ HOST ,    ANY _ PORT ,    authentications )  ;", "builder . addInterceptorFirst ( new    . PreemptiveAuth ( new   BasicScheme (  )  ,    isPreemptiveEnabled ( authentications )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["configureCredentials"], "fileName": "org.gradle.internal.resource.transport.http.HttpClientConfigurer"}, {"methodBody": ["METHOD_START", "{", "HttpProxySettings . HttpProxy   httpProxy    =    httpSettings . getProxySettings (  )  . getProxy (  )  ;", "HttpProxySettings . HttpProxy   httpsProxy    =    httpSettings . getSecureProxySettings (  )  . getProxy (  )  ;", "for    ( HttpProxySettings . HttpProxy   proxy    :    Lists . newArrayList ( httpProxy ,    httpsProxy )  )     {", "if    ( proxy    !  =    null )     {", "if    (  ( proxy . credentials )     !  =    null )     {", "useCredentials ( credentialsProvider ,    proxy . host ,    proxy . port ,    Collections . singleton ( new   authentication . AllSchemesAuthentication ( proxy . credentials )  )  )  ;", "}", "}", "}", "builder . setRoutePlanner ( new   SystemDefaultRoutePlanner ( ProxySelector . getDefault (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["configureProxy"], "fileName": "org.gradle.internal.resource.transport.http.HttpClientConfigurer"}, {"methodBody": ["METHOD_START", "{", "if    ( httpSettings . isFollowRedirects (  )  )     {", "builder . setRedirectStrategy ( new   AlwaysRedirectRedirectStrategy (  )  )  ;", "} else    {", "builder . disableRedirectHandling (  )  ;", "}", "}", "METHOD_END"], "methodName": ["configureRedirectStrategy"], "fileName": "org.gradle.internal.resource.transport.http.HttpClientConfigurer"}, {"methodBody": ["METHOD_START", "{", "HttpTimeoutSettings   timeoutSettings    =    httpSettings . getTimeoutSettings (  )  ;", "Reques   config    =    Reques . custom (  )  . setConnectTimeout ( timeoutSettings . getConnectionTimeoutMs (  )  )  . setSocketTimeout ( timeoutSettings . getSocketTimeoutMs (  )  )  . build (  )  ;", "builder . setDefaultReques ( config )  ;", "}", "METHOD_END"], "methodName": ["configureRequestConfig"], "fileName": "org.gradle.internal.resource.transport.http.HttpClientConfigurer"}, {"methodBody": ["METHOD_START", "{", "HttpTimeoutSettings   timeoutSettings    =    httpSettings . getTimeoutSettings (  )  ;", "builder . setDefaultSocke ( Socke . custom (  )  . setSoTimeout ( timeoutSettings . getSocketTimeoutMs (  )  )  . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["configureSocketConfig"], "fileName": "org.gradle.internal.resource.transport.http.HttpClientConfigurer"}, {"methodBody": ["METHOD_START", "{", "builder . setSSLSocketFactory ( new   SSLConnectionSocketFactory ( sslContextFactory . createSslContext (  )  ,    hostnameVerifier )  )  ;", "}", "METHOD_END"], "methodName": ["configureSslSocketConnectionFactory"], "fileName": "org.gradle.internal.resource.transport.http.HttpClientConfigurer"}, {"methodBody": ["METHOD_START", "{", "builder . setUserAgent ( UriTextResource . getUserAgentString (  )  )  ;", "}", "METHOD_END"], "methodName": ["configureUserAgent"], "fileName": "org.gradle.internal.resource.transport.http.HttpClientConfigurer"}, {"methodBody": ["METHOD_START", "{", "if    ( authentication   instanceof   BasicAuthentication )     {", "return   AuthSchemes . BASIC ;", "} else", "if    ( authentication   instanceof   DigestAuthentication )     {", "return   AuthSchemes . DIGEST ;", "} else", "if    ( authentication   instanceof   authentication . AllSchemesAuthentication )     {", "return   ANY _ SCHEME ;", "} else    {", "throw   new   IllegalArgumentException ( String . format (  \" Authentication   scheme   of    '  % s '    is   not   supported .  \"  ,    authentication . getClass (  )  . getSimpleName (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getAuthScheme"], "fileName": "org.gradle.internal.resource.transport.http.HttpClientConfigurer"}, {"methodBody": ["METHOD_START", "{", "Credentials   credentials    =     (  ( AuthenticationInternal )     ( authentication )  )  . getCredentials (  )  ;", "if    (  !  ( credentials   instanceof   PasswordCredentials )  )     {", "throw   new   IllegalArgumentException ( String . format (  \" Credentials   must   be   an   instance   of :     % s \"  ,    PasswordCredentials . class . getCanonicalName (  )  )  )  ;", "}", "return   Cast . uncheckedCast ( credentials )  ;", "}", "METHOD_END"], "methodName": ["getPasswordCredentials"], "fileName": "org.gradle.internal.resource.transport.http.HttpClientConfigurer"}, {"methodBody": ["METHOD_START", "{", "return   CollectionUtils . any ( authentications ,    new   Spec < Authentication >  (  )     {", "@ Override", "public   boolean   isSatisfiedBy ( Authentication   element )     {", "return   element   instanceof   BasicAuthentication ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["isPreemptiveEnabled"], "fileName": "org.gradle.internal.resource.transport.http.HttpClientConfigurer"}, {"methodBody": ["METHOD_START", "{", "Credentials   httpCredentials ;", "for    ( Authentication   authentication    :    authentications )     {", "String   scheme    =    getAuthScheme ( authentication )  ;", "PasswordCredentials   credentials    =    getPasswordCredentials ( authentication )  ;", "if    ( authentication   instanceof   AllSchemesAuthentication )     {", "NTLMCredentials   ntlmCredentials    =    new   NTLMCredentials ( credentials )  ;", "httpCredentials    =    new   NTCredentials ( ntlmCredentials . getUsername (  )  ,    ntlmCredentials . getPassword (  )  ,    ntlmCredentials . getWorkstation (  )  ,    ntlmCredentials . getDomain (  )  )  ;", "credentialsProvider . setCredentials ( new   AuthScope ( host ,    port ,    AuthScope . ANY _ REALM ,    AuthSchemes . NTLM )  ,    httpCredentials )  ;", ". LOGGER . debug (  \" Using    {  }    and    {  }    for   authenticating   against    '  {  }  :  {  }  '    using    {  }  \"  ,    credentials ,    ntlmCredentials ,    host ,    port ,    NTLM )  ;", "}", "httpCredentials    =    new   UsernamePasswordCredentials ( credentials . getUsername (  )  ,    credentials . getPassword (  )  )  ;", "credentialsProvider . setCredentials ( new   AuthScope ( host ,    port ,    AuthScope . ANY _ REALM ,    scheme )  ,    httpCredentials )  ;", ". LOGGER . debug (  \" Using    {  }    for   authenticating   against    '  {  }  :  {  }  '    using    {  }  \"  ,    credentials ,    host ,    port ,    scheme )  ;", "}", "}", "METHOD_END"], "methodName": ["useCredentials"], "fileName": "org.gradle.internal.resource.transport.http.HttpClientConfigurer"}, {"methodBody": ["METHOD_START", "{", "final   CloseableHttpResponse   httpResponse    =    performHttpRequest ( method )  ;", "if    (  !  ( wasSuccessful ( httpResponse )  )  )     {", "CloseableHttpResponse   response    =    new    . AutoClosedHttpResponse ( httpResponse )  ;", "HttpClientUtils . closeQuietly ( httpResponse )  ;", "return   response ;", "}", "return   httpResponse ;", "}", "METHOD_END"], "methodName": ["executeGetOrHead"], "fileName": "org.gradle.internal.resource.transport.http.HttpClientHelper"}, {"methodBody": ["METHOD_START", "{", "if    (  ( client )     =  =    null )     {", "Builder   builder    =    Builder . create (  )  ;", "new   Configurer ( settings )  . configure ( builder )  ;", "this . client    =    builder . build (  )  ;", "}", "return   client ;", "}", "METHOD_END"], "methodName": ["getClient"], "fileName": "org.gradle.internal.resource.transport.http.HttpClientHelper"}, {"methodBody": ["METHOD_START", "{", "HttpContext   context    =    sharedContext . poll (  )  ;", "if    ( context    =  =    null )     {", "return   new   BasicHttpContext (  )  ;", "}", "return   context ;", "}", "METHOD_END"], "methodName": ["nextAvailableSharedContext"], "fileName": "org.gradle.internal.resource.transport.http.HttpClientHelper"}, {"methodBody": ["METHOD_START", "{", "return   processResponse ( source ,     \" GET \"  ,    performRawGet ( source ,    revalidate )  )  ;", "}", "METHOD_END"], "methodName": ["performGet"], "fileName": "org.gradle.internal.resource.transport.http.HttpClientHelper"}, {"methodBody": ["METHOD_START", "{", "return   processResponse ( source ,     \" HEAD \"  ,    performRawHead ( source ,    revalidate )  )  ;", "}", "METHOD_END"], "methodName": ["performHead"], "fileName": "org.gradle.internal.resource.transport.http.HttpClientHelper"}, {"methodBody": ["METHOD_START", "{", "if    (  ( sharedContext )     =  =    null )     {", "return   performHttpRequest ( request ,    new   Basicontext (  )  )  ;", "}", "ontext   httpContext    =    nextAvailableSharedContext (  )  ;", "try    {", "return   performHttpRequest ( request ,    httpContext )  ;", "}    finally    {", "sharedContext . add ( httpContext )  ;", "}", "}", "METHOD_END"], "methodName": ["performHttpRequest"], "fileName": "org.gradle.internal.resource.transport.http.HttpClientHelper"}, {"methodBody": ["METHOD_START", "{", "httpContext . removeAttribute ( REDIRECT _ LOCATIONS )  ;", ". LOGGER . debug (  \" Performing   HTTP    {  }  :     {  }  \"  ,    request . getMethod (  )  ,    request . getURI (  )  )  ;", "return   getClient (  )  . execute ( request ,    httpContext )  ;", "}", "METHOD_END"], "methodName": ["performHttpRequest"], "fileName": "org.gradle.internal.resource.transport.http.HttpClientHelper"}, {"methodBody": ["METHOD_START", "{", "return   performRequest ( new   HttpGet ( source )  ,    revalidate )  ;", "}", "METHOD_END"], "methodName": ["performRawGet"], "fileName": "org.gradle.internal.resource.transport.http.HttpClientHelper"}, {"methodBody": ["METHOD_START", "{", "return   performRequest ( new   HttpHead ( source )  ,    revalidate )  ;", "}", "METHOD_END"], "methodName": ["performRawHead"], "fileName": "org.gradle.internal.resource.transport.http.HttpClientHelper"}, {"methodBody": ["METHOD_START", "{", "String   method    =    request . getMethod (  )  ;", "if    ( revalidate )     {", "request . addHeader ( CACHE _ CONTROL ,     \" max - age =  0  \"  )  ;", "}", "CloseableResponse   response ;", "try    {", "response    =    executeGetOrHead ( request )  ;", "}    catch    ( IOException   e )     {", "throw   new   RequestException ( String . format (  \" Could   not    % s    '  % s '  .  \"  ,    method ,    request . getURI (  )  )  ,    e )  ;", "}", "return   response ;", "}", "METHOD_END"], "methodName": ["performRequest"], "fileName": "org.gradle.internal.resource.transport.http.HttpClientHelper"}, {"methodBody": ["METHOD_START", "{", "if    ( wasMissing ( response )  )     {", ". LOGGER . info (  \" Resource   missing .     [ HTTP    {  }  :     {  }  ]  \"  ,    method ,    source )  ;", "return   null ;", "}", "if    (  !  ( wasSuccessful ( response )  )  )     {", ". LOGGER . info (  \" Failed   to   get   resource :     {  }  .     [ HTTP    {  }  :     {  }  ]  \"  ,    method ,    response . getStatusLine (  )  ,    source )  ;", "throw   new   HttpErrorStatusCodeException ( method ,    source ,    response . getStatusLine (  )  . getStatusCode (  )  ,    response . getStatusLine (  )  . getReasonPhrase (  )  )  ;", "}", "return   response ;", "}", "METHOD_END"], "methodName": ["processResponse"], "fileName": "org.gradle.internal.resource.transport.http.HttpClientHelper"}, {"methodBody": ["METHOD_START", "{", "int   statusCode    =    response . getStatusLine (  )  . getStatusCode (  )  ;", "return   statusCode    =  =     4  0  4  ;", "}", "METHOD_END"], "methodName": ["wasMissing"], "fileName": "org.gradle.internal.resource.transport.http.HttpClientHelper"}, {"methodBody": ["METHOD_START", "{", "int   statusCode    =    response . getStatusLine (  )  . getStatusCode (  )  ;", "return    ( statusCode    >  =     2  0  0  )     &  &     ( statusCode    <     4  0  0  )  ;", "}", "METHOD_END"], "methodName": ["wasSuccessful"], "fileName": "org.gradle.internal.resource.transport.http.HttpClientHelper"}, {"methodBody": ["METHOD_START", "{", "return    (  ( statusCode )     >  =     5  0  0  )     &  &     (  ( statusCode )     <     6  0  0  )  ;", "}", "METHOD_END"], "methodName": ["isServerError"], "fileName": "org.gradle.internal.resource.transport.http.HttpErrorStatusCodeException"}, {"methodBody": ["METHOD_START", "{", "String   location    =    uri . toString (  )  ;", ". LOGGER . debug (  \" Constructing   external   resource   metadata :     {  }  \"  ,    location )  ;", "CloseableHttpResponse   response    =    http . performHead ( location ,    revalidate )  ;", "ExternalResourceMetaData   result    =    null ;", "if    ( response    !  =    null )     {", "HttpResponseResource   resource    =    new   HttpResponseResource (  \" HEAD \"  ,    uri ,    response )  ;", "try    {", "result    =    resource . getMetaData (  )  ;", "}    finally    {", "IoActions . closeQuietly ( resource )  ;", "}", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["getMetaData"], "fileName": "org.gradle.internal.resource.transport.http.HttpResourceAccessor"}, {"methodBody": ["METHOD_START", "{", "String   location    =    uri . toString (  )  ;", ". LOGGER . debug (  \" Constructing   external   resource :     {  }  \"  ,    location )  ;", "CloseableHttpResponse   response    =    http . performRawGet ( location ,    revalidate )  ;", "return   wrapResponse ( uri ,    response )  ;", "}", "METHOD_END"], "methodName": ["getRawResource"], "fileName": "org.gradle.internal.resource.transport.http.HttpResourceAccessor"}, {"methodBody": ["METHOD_START", "{", "String   location    =    uri . toString (  )  ;", ". LOGGER . debug (  \" Constructing   external   resource :     {  }  \"  ,    location )  ;", "CloseableHttpResponse   response    =    http . performGet ( location ,    revalidate )  ;", "if    ( response    !  =    null )     {", "return   wrapResponse ( uri ,    response )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["openResource"], "fileName": "org.gradle.internal.resource.transport.http.HttpResourceAccessor"}, {"methodBody": ["METHOD_START", "{", "return   new   HttpResponseResource (  \" GET \"  ,    uri ,    response )  ;", "}", "METHOD_END"], "methodName": ["wrapResponse"], "fileName": "org.gradle.internal.resource.transport.http.HttpResourceAccessor"}, {"methodBody": ["METHOD_START", "{", "final   ExternalResourceReadResponse   response    =    accessor . openResource ( directory ,    true )  ;", "if    ( response    =  =    null )     {", "return   null ;", "}", "try    {", "try    {", "String   contentType    =    response . getMetaData (  )  . getContentType (  )  ;", "ApacheDirectoryListingParser   directoryListingParser    =    new   ApacheDirectoryListingParser (  )  ;", "InputStream   inputStream    =    response . openStream (  )  ;", "try    {", "return   directoryListingParser . parse ( directory ,    inputStream ,    contentType )  ;", "}    catch    ( Exception   e )     {", "throw   new   ResourceException ( directory ,    String . format (  \" Unable   to   parse   HTTP   directory   listing   for    '  % s '  .  \"  ,    directory )  ,    e )  ;", "}", "}    finally    {", "response . close (  )  ;", "}", "}    catch    ( IOException   e )     {", "throw   ResourceExceptions . getFailed ( directory ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["list"], "fileName": "org.gradle.internal.resource.transport.http.HttpResourceLister"}, {"methodBody": ["METHOD_START", "{", "HttpPut   method    =    new   HttpPut ( destination )  ;", "final   RepeatableInputStreamEntity   entity    =    new   RepeatableInputStreamEntity (  ,    ContentType . APPLICATION _ OCTET _ STREAM )  ;", "method . setEntity ( entity )  ;", "CloseableHttpResponse   response    =    null ;", "try    {", "response    =    http . performHttpRequest ( method )  ;", "if    (  !  ( http . wasSuccessful ( response )  )  )     {", "throw   new   IOException ( String . format (  \" Could   not   PUT    '  % s '  .    Received   status   code    % s   from   server :     % s \"  ,    destination ,    response . getStatusLine (  )  . getStatusCode (  )  ,    response . getStatusLine (  )  . getReasonPhrase (  )  )  )  ;", "}", "}    finally    {", "HttpClientUtils . closeQuietly ( response )  ;", "}", "}", "METHOD_END"], "methodName": ["upload"], "fileName": "org.gradle.internal.resource.transport.http.HttpResourceUploader"}, {"methodBody": ["METHOD_START", "{", "registration . addProvider ( new   HttpResourcesPluginServiceRegistry . AuthenticationSchemeAction (  )  )  ;", "}", "METHOD_END"], "methodName": ["registerBuildServices"], "fileName": "org.gradle.internal.resource.transport.http.HttpResourcesPluginServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "registration . addProvider ( new   HttpResourcesPluginServiceRegistry . GlobalScopeServices (  )  )  ;", "}", "METHOD_END"], "methodName": ["registerGlobalServices"], "fileName": "org.gradle.internal.resource.transport.http.HttpResourcesPluginServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "Header   header    =    response . getFirstHeader ( CONTENT _ LENGTH )  ;", "if    ( header    =  =    null )     {", "return    -  1  ;", "}", "String   value    =    header . getValue (  )  ;", "if    ( value    =  =    null )     {", "return    -  1  ;", "}", "try    {", "return   Long . parseLong ( value )  ;", "}    catch    ( NumberFormatException   e )     {", "return    -  1  ;", "}", "}", "METHOD_END"], "methodName": ["getContentLength"], "fileName": "org.gradle.internal.resource.transport.http.HttpResponseResource"}, {"methodBody": ["METHOD_START", "{", "final   Header   header    =    response . getFirstHeader ( CONTENT _ TYPE )  ;", "return   header    =  =    null    ?    null    :    header . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["getContentType"], "fileName": "org.gradle.internal.resource.transport.http.HttpResponseResource"}, {"methodBody": ["METHOD_START", "{", "Header   etagHeader    =    response . getFirstHeader ( ETAG )  ;", "return   etagHeader    =  =    null    ?    null    :    etagHeader . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["getEtag"], "fileName": "org.gradle.internal.resource.transport.http.HttpResponseResource"}, {"methodBody": ["METHOD_START", "{", "Header   header    =    response . getFirstHeader ( name )  ;", "return   header    !  =    null    ?    header . getValue (  )     :    null ;", "}", "METHOD_END"], "methodName": ["getHeaderValue"], "fileName": "org.gradle.internal.resource.transport.http.HttpResponseResource"}, {"methodBody": ["METHOD_START", "{", "Header   responseHeader    =    response . getFirstHeader (  \" last - modified \"  )  ;", "if    ( responseHeader    =  =    null )     {", "return    0  ;", "}", "try    {", "return   DateUtils . parseDate ( responseHeader . getValue (  )  )  . getTime (  )  ;", "}    catch    ( Exception   e )     {", "return    0  ;", "}", "}", "METHOD_END"], "methodName": ["getLastModified"], "fileName": "org.gradle.internal.resource.transport.http.HttpResponseResource"}, {"methodBody": ["METHOD_START", "{", "return   metaData ;", "}", "METHOD_END"], "methodName": ["getMetaData"], "fileName": "org.gradle.internal.resource.transport.http.HttpResponseResource"}, {"methodBody": ["METHOD_START", "{", "Header   sha 1 Header    =    response . getFirstHeader (  \" X - Checksum - Sha 1  \"  )  ;", "if    ( sha 1 Header    !  =    null )     {", "return   new   HashValue ( sha 1 Header . getValue (  )  )  ;", "}", "if    (  ( etag    !  =    null )     &  &     ( etag . startsWith (  \"  { SHA 1  {  \"  )  )  )     {", "String   hash    =    etag . substring (  6  ,     (  ( etag . length (  )  )     -     2  )  )  ;", "return   new   HashValue ( hash )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getSha1"], "fileName": "org.gradle.internal.resource.transport.http.HttpResponseResource"}, {"methodBody": ["METHOD_START", "{", "return   response . getStatusLine (  )  . getStatusCode (  )  ;", "}", "METHOD_END"], "methodName": ["getStatusCode"], "fileName": "org.gradle.internal.resource.transport.http.HttpResponseResource"}, {"methodBody": ["METHOD_START", "{", "return   source ;", "}", "METHOD_END"], "methodName": ["getURI"], "fileName": "org.gradle.internal.resource.transport.http.HttpResponseResource"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isLocal"], "fileName": "org.gradle.internal.resource.transport.http.HttpResponseResource"}, {"methodBody": ["METHOD_START", "{", "if    ( wasOpened )     {", "throw   new   IOException (  \" Unable   to   open   Stream   as   it   was   opened   before .  \"  )  ;", "}", ". LOGGER . debug (  \" Attempting   to   download   resource    {  }  .  \"  ,    source )  ;", "this . wasOpened    =    true ;", "final   HttpEntity   entity    =    response . getEntity (  )  ;", "if    ( entity    =  =    null )     {", "throw   new   IOException ( String . format (  \" Response    % d :     % s   has   no   content !  \"  ,    getStatusCode (  )  ,    response . getStatusLine (  )  . getReasonPhrase (  )  )  )  ;", "}", "return   entity . getContent (  )  ;", "}", "METHOD_END"], "methodName": ["openStream"], "fileName": "org.gradle.internal.resource.transport.http.HttpResponseResource"}, {"methodBody": ["METHOD_START", "{", "String   systemProperty    =    System . getProperty ( propertyName )  ;", "if    (  !  ( StringUtils . isBlank ( systemProperty )  )  )     {", "try    {", "return   Integer . parseInt ( systemProperty )  ;", "}    catch    ( NumberFormatException   e )     {", ". LOGGER . warn (  \" Invalid   value   for   java   system   property    '  {  }  '  :     {  }  .    Default   timeout    '  {  }  '    will   be   used .  \"  ,    propertyName ,    systemProperty ,    defaultValue )  ;", "}", "}", "return   defaultValue ;", "}", "METHOD_END"], "methodName": ["initTimeout"], "fileName": "org.gradle.internal.resource.transport.http.JavaSystemPropertiesHttpTimeoutSettings"}, {"methodBody": ["METHOD_START", "{", "if    ( nonProxyHost . startsWith (  \"  *  \"  )  )     {", "return   Pattern . compile (  (  \"  .  *  \"     +     ( Pattern . quote ( nonProxyHost . substring (  1  )  )  )  )  )  ;", "}", "if    ( nonProxyHost . endsWith (  \"  *  \"  )  )     {", "return   Pattern . compile (  (  ( Pattern . quote ( nonProxyHost . substring (  0  ,     (  ( nonProxyHost . length (  )  )     -     1  )  )  )  )     +     \"  .  *  \"  )  )  ;", "}", "return   Pattern . compile ( Pattern . quote ( nonProxyHost )  )  ;", "}", "METHOD_END"], "methodName": ["createHostMatcher"], "fileName": "org.gradle.internal.resource.transport.http.JavaSystemPropertiesProxySettings"}, {"methodBody": ["METHOD_START", "{", "return   defaultPort ;", "}", "METHOD_END"], "methodName": ["getDefaultPort"], "fileName": "org.gradle.internal.resource.transport.http.JavaSystemPropertiesProxySettings"}, {"methodBody": ["METHOD_START", "{", "return   propertyPrefix ;", "}", "METHOD_END"], "methodName": ["getPropertyPrefix"], "fileName": "org.gradle.internal.resource.transport.http.JavaSystemPropertiesProxySettings"}, {"methodBody": ["METHOD_START", "{", "return   proxy ;", "}", "METHOD_END"], "methodName": ["getProxy"], "fileName": "org.gradle.internal.resource.transport.http.JavaSystemPropertiesProxySettings"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( proxy )     =  =    null )     |  |     ( isNonProxyHost ( host )  )  )     {", "return   null ;", "}", "return   proxy ;", "}", "METHOD_END"], "methodName": ["getProxy"], "fileName": "org.gradle.internal.resource.transport.http.JavaSystemPropertiesProxySettings"}, {"methodBody": ["METHOD_START", "{", "if    ( StringUtils . isBlank ( nonProxyHostsString )  )     {", "return   Collections . emptyList (  )  ;", "}", ". LOGGER . debug (  \" Found   java   system   property    ' http . nonProxyHosts '  :     {  }  .    Will   ignore   proxy   settings   for   these   hosts .  \"  ,    nonProxyHostsString )  ;", "List < Pattern >    patterns    =    new   ArrayList < Pattern >  (  )  ;", "for    ( String   nonProxyHost    :    nonProxyHostsString . split (  \"  \\  \\  |  \"  )  )     {", "patterns . add ( createHostMatcher ( nonProxyHost )  )  ;", "}", "return   patterns ;", "}", "METHOD_END"], "methodName": ["initNonProxyHosts"], "fileName": "org.gradle.internal.resource.transport.http.JavaSystemPropertiesProxySettings"}, {"methodBody": ["METHOD_START", "{", "if    ( StringUtils . isBlank ( proxyPortString )  )     {", "return   defaultPort ;", "}", "try    {", "return   Integer . parseInt ( proxyPortString )  ;", "}    catch    ( NumberFormatException   e )     {", "String   key    =     ( propertyPrefix )     +     \"  . proxyPort \"  ;", ". LOGGER . warn (  \" Invalid   value   for   java   system   property    '  {  }  '  :     {  }  .    Default   port    '  {  }  '    will   be   used .  \"  ,    key ,    System . getProperty ( key )  ,    defaultPort )  ;", "return   defaultPort ;", "}", "}", "METHOD_END"], "methodName": ["initProxyPort"], "fileName": "org.gradle.internal.resource.transport.http.JavaSystemPropertiesProxySettings"}, {"methodBody": ["METHOD_START", "{", "for    ( Pattern   nonProxyHost    :    nonProxyHosts )     {", "if    ( nonProxyHost . matcher ( host )  . matches (  )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isNonProxyHost"], "fileName": "org.gradle.internal.resource.transport.http.JavaSystemPropertiesProxySettings"}, {"methodBody": ["METHOD_START", "{", "return   source . open (  )  ;", "}", "METHOD_END"], "methodName": ["getContent"], "fileName": "org.gradle.internal.resource.transport.http.RepeatableInputStreamEntity"}, {"methodBody": ["METHOD_START", "{", "return   source . getContentLength (  )  ;", "}", "METHOD_END"], "methodName": ["getContentLength"], "fileName": "org.gradle.internal.resource.transport.http.RepeatableInputStreamEntity"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["isRepeatable"], "fileName": "org.gradle.internal.resource.transport.http.RepeatableInputStreamEntity"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["isStreaming"], "fileName": "org.gradle.internal.resource.transport.http.RepeatableInputStreamEntity"}, {"methodBody": ["METHOD_START", "{", "InputStream   content    =    getContent (  )  ;", "try    {", "IOUtils . copyLarge ( content ,    outstream )  ;", "}    finally    {", "IOUtils . closeQuietly ( content )  ;", "}", "}", "METHOD_END"], "methodName": ["writeTo"], "fileName": "org.gradle.internal.resource.transport.http.RepeatableInputStreamEntity"}, {"methodBody": ["METHOD_START", "{", "String   sysPropWorkstation    =    System . getProperty (  \" http . auth . ntlm . workstation \"  )  ;", "if    ( sysPropWorkstation    !  =    null )     {", "return   sysPropWorkstation ;", "}", "try    {", "return   removeDotSuffix ( getHostName (  )  )  . toUpperCase (  )  ;", "}    catch    ( UnknownHostException   e )     {", "return    . DEFAULT _ WORKSTATION ;", "}", "}", "METHOD_END"], "methodName": ["determineWorkstationName"], "fileName": "org.gradle.internal.resource.transport.http.ntlm.NTLMCredentials"}, {"methodBody": ["METHOD_START", "{", "return   domain ;", "}", "METHOD_END"], "methodName": ["getDomain"], "fileName": "org.gradle.internal.resource.transport.http.ntlm.NTLMCredentials"}, {"methodBody": ["METHOD_START", "{", "return   InetAddress . getLocalHost (  )  . getHostName (  )  ;", "}", "METHOD_END"], "methodName": ["getHostName"], "fileName": "org.gradle.internal.resource.transport.http.ntlm.NTLMCredentials"}, {"methodBody": ["METHOD_START", "{", "return   password ;", "}", "METHOD_END"], "methodName": ["getPassword"], "fileName": "org.gradle.internal.resource.transport.http.ntlm.NTLMCredentials"}, {"methodBody": ["METHOD_START", "{", "return   username ;", "}", "METHOD_END"], "methodName": ["getUsername"], "fileName": "org.gradle.internal.resource.transport.http.ntlm.NTLMCredentials"}, {"methodBody": ["METHOD_START", "{", "return   workstation ;", "}", "METHOD_END"], "methodName": ["getWorkstation"], "fileName": "org.gradle.internal.resource.transport.http.ntlm.NTLMCredentials"}, {"methodBody": ["METHOD_START", "{", "int   dotPos    =    val . indexOf (  '  .  '  )  ;", "return   dotPos    =  =     (  -  1  )     ?    val    :    val . substring (  0  ,    dotPos )  ;", "}", "METHOD_END"], "methodName": ["removeDotSuffix"], "fileName": "org.gradle.internal.resource.transport.http.ntlm.NTLMCredentials"}]