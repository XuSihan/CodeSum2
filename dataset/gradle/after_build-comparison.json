[{"methodBody": ["METHOD_START", "{", "return   comparisons ;", "}", "METHOD_END"], "methodName": ["getComparisons"], "fileName": "org.gradle.api.plugins.buildcomparison.compare.internal.BuildComparisonResult"}, {"methodBody": ["METHOD_START", "{", "return   uncomparedSourceOutcomes ;", "}", "METHOD_END"], "methodName": ["getUncomparedSourceOutcomes"], "fileName": "org.gradle.api.plugins.buildcomparison.compare.internal.BuildComparisonResult"}, {"methodBody": ["METHOD_START", "{", "return   uncomparedTargetOutcomes ;", "}", "METHOD_END"], "methodName": ["getUncomparedTargetOutcomes"], "fileName": "org.gradle.api.plugins.buildcomparison.compare.internal.BuildComparisonResult"}, {"methodBody": ["METHOD_START", "{", "if    (  (  !  ( getUncomparedSourceOutcomes (  )  . isEmpty (  )  )  )     |  |     (  !  ( getUncomparedTargetOutcomes (  )  . isEmpty (  )  )  )  )     {", "return   false ;", "} else    {", "return   CollectionUtils . every ( comparisons ,    new   Spec < BuildOutcome <  ?  >  >  (  )     {", "public   boolean   isSatisfiedBy ( BuildOutcome <  ?  >    comparisonResult )     {", "return   comparisonResult . isOutcomesAreIdentical (  )  ;", "}", "}  )  ;", "}", "}", "METHOD_END"], "methodName": ["isBuildsAreIdentical"], "fileName": "org.gradle.api.plugins.buildcomparison.compare.internal.BuildComparisonResult"}, {"methodBody": ["METHOD_START", "{", "BuildComparisonSpecBuilder   builder    =    new   DefaultBuildComparisonSpecBuilder (  )  ;", "Set < BuildOutcome >    toCopy    =    new   HashSet < BuildOutcome >  ( to )  ;", "for    ( BuildOutcome   fromBuildOutcome    :    from )     {", "BuildOutcome   toBuildOutcome    =    null ;", "Class <  ?    extends   BuildOutcome >    associationType    =    null ;", "for    ( BuildOutcome   buildOutcome    :    toCopy )     {", "toBuildOutcome    =    buildOutcome ;", "associationType    =    associator . findAssociationType ( fromBuildOutcome ,    toBuildOutcome )  ;", "if    ( associationType    !  =    null )     {", "break ;", "}", "}", "if    ( associationType    =  =    null )     {", "builder . addUnassociatedFrom ( fromBuildOutcome )  ;", "} else    {", "builder . associate ( associationType . cast ( fromBuildOutcome )  ,    associationType . cast ( toBuildOutcome )  ,     (  ( Class < BuildOutcome >  )     ( associationType )  )  )  ;", "toCopy . remove ( toBuildOutcome )  ;", "}", "}", "for    ( BuildOutcome   buildOutcome    :    toCopy )     {", "builder . addUnassociatedTo ( buildOutcome )  ;", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["createSpec"], "fileName": "org.gradle.api.plugins.buildcomparison.compare.internal.BuildComparisonSpecFactory"}, {"methodBody": ["METHOD_START", "{", "return   compared ;", "}", "METHOD_END"], "methodName": ["getCompared"], "fileName": "org.gradle.api.plugins.buildcomparison.compare.internal.BuildOutcomeComparisonResultSupport"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException ( String . format (  \" Support   for   result   type    '  % s '    has   not   been   implemented   in   this   context \"  ,    toString (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["throwUnsupported"], "fileName": "org.gradle.api.plugins.buildcomparison.compare.internal.ComparisonResultType"}, {"methodBody": ["METHOD_START", "{", "Set < BuildOutcome >    uncomparedFrom    =    new   HashSet < BuildOutcome >  ( spec . getSource (  )  )  ;", "Set < BuildOutcome >    uncomparedTo    =    new   HashSet < BuildOutcome >  ( spec . getTarget (  )  )  ;", "Set < BuildOutcome >    unknownFrom    =    new   HashSet < BuildOutcome >  (  )  ;", "Set < BuildOutcome >    unknownTo    =    new   HashSet < BuildOutcome >  (  )  ;", "List < BuildOutcomeComparisonResult <  ?  >  >    results    =    new   LinkedList < BuildOutcomeComparisonResult <  ?  >  >  (  )  ;", "for    ( BuildOutcomeAssociation <  ?    extends   BuildOutcome >    outcomeAssociation    :    spec . getOutcomeAssociations (  )  )     {", "BuildOutcome   from    =    outcomeAssociation . getSource (  )  ;", "boolean   unknown    =    false ;", "if    (  !  ( uncomparedFrom . remove ( from )  )  )     {", "unknown    =    true ;", "unknownFrom . add ( from )  ;", "}", "BuildOutcome   to    =    outcomeAssociation . getTarget (  )  ;", "if    (  !  ( uncomparedTo . remove ( to )  )  )     {", "unknown    =    true ;", "unknownTo . add ( to )  ;", "}", "if    (  ! unknown )     {", "BuildOutcomeComparator <  ?  ,     ?  >    comparator    =    comparatorFactory . getComparator ( outcomeAssociation . getType (  )  )  ;", "if    ( comparator    =  =    null )     {", "throw   new   RuntimeException ( String . format (  \" No   comparator   for    % s \"  ,    outcomeAssociation . getType (  )  )  )  ;", "}", "@ SuppressWarnings (  \" unchecked \"  )", "BuildOutcomeComparisonResult <  ?  >    comparisonResult    =     (  ( BuildOutcomeComparisonResult <  ?  >  )     ( comparator . compare (  (  ( BuildOutcomeAssociation )     ( outcomeAssociation )  )  )  )  )  ;", "results . add ( comparisonResult )  ;", "}", "}", "return   new   isonResult ( uncomparedFrom ,    uncomparedTo ,    results )  ;", "}", "METHOD_END"], "methodName": ["compareBuilds"], "fileName": "org.gradle.api.plugins.buildcomparison.compare.internal.DefaultBuildComparator"}, {"methodBody": ["METHOD_START", "{", "return   outcomeAssociations ;", "}", "METHOD_END"], "methodName": ["getOutcomeAssociations"], "fileName": "org.gradle.api.plugins.buildcomparison.compare.internal.DefaultBuildComparisonSpec"}, {"methodBody": ["METHOD_START", "{", "return   source ;", "}", "METHOD_END"], "methodName": ["getSource"], "fileName": "org.gradle.api.plugins.buildcomparison.compare.internal.DefaultBuildComparisonSpec"}, {"methodBody": ["METHOD_START", "{", "return   target ;", "}", "METHOD_END"], "methodName": ["getTarget"], "fileName": "org.gradle.api.plugins.buildcomparison.compare.internal.DefaultBuildComparisonSpec"}, {"methodBody": ["METHOD_START", "{", "this . source . add ( from )  ;", "}", "METHOD_END"], "methodName": ["addUnassociatedFrom"], "fileName": "org.gradle.api.plugins.buildcomparison.compare.internal.DefaultBuildComparisonSpecBuilder"}, {"methodBody": ["METHOD_START", "{", "this . target . add ( to )  ;", "}", "METHOD_END"], "methodName": ["addUnassociatedTo"], "fileName": "org.gradle.api.plugins.buildcomparison.compare.internal.DefaultBuildComparisonSpecBuilder"}, {"methodBody": ["METHOD_START", "{", "this . source . add ( from )  ;", "this . target . add ( to )  ;", "BuildOutcomeAssociation < A >    outcomeAssociation    =    new   OutcomeAssociation < A >  ( from ,    to ,    type )  ;", "outcomeAssociations . add ( outcomeAssociation )  ;", "return   outcomeAssociation ;", "}", "METHOD_END"], "methodName": ["associate"], "fileName": "org.gradle.api.plugins.buildcomparison.compare.internal.DefaultBuildComparisonSpecBuilder"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultBuildComparisonSpec ( source ,    target ,    outcomeAssociations )  ;", "}", "METHOD_END"], "methodName": ["build"], "fileName": "org.gradle.api.plugins.buildcomparison.compare.internal.DefaultBuildComparisonSpecBuilder"}, {"methodBody": ["METHOD_START", "{", "BuildOutcomeComparator <  ?  ,     ?  >    comparator    =    comparators . get ( outcomeType )  ;", "if    ( comparator    !  =    null )     {", "return    (  ( BuildOutcomeComparator < T ,     ?  >  )     ( comparator )  )  ;", "} else    {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["getComparator"], "fileName": "org.gradle.api.plugins.buildcomparison.compare.internal.DefaultBuildOutcomeComparatorFactory"}, {"methodBody": ["METHOD_START", "{", "comparators . put ( comparator . getComparedType (  )  ,    comparator )  ;", "}", "METHOD_END"], "methodName": ["registerComparator"], "fileName": "org.gradle.api.plugins.buildcomparison.compare.internal.DefaultBuildOutcomeComparatorFactory"}, {"methodBody": ["METHOD_START", "{", "List < String >    tasksList    =    getSpec (  )  . getTasks (  )  ;", "String [  ]    tasks    =    tasksList . toArray ( new   String [  0  ]  )  ;", "List < String >    argumentsList    =    getSpec (  )  . getArguments (  )  ;", "String [  ]    arguments    =    argumentsList . toArray ( new   String [  0  ]  )  ;", "Modeler < ProjectOutcomes >    modeler    =    connection . model ( ProjectOutcomes . class )  ;", "return   modeler . withArguments ( arguments )  . forTasks ( tasks )  . get (  )  ;", "}", "METHOD_END"], "methodName": ["executeWith"], "fileName": "org.gradle.api.plugins.buildcomparison.gradle.internal.ComparableGradleBuildExecuter"}, {"methodBody": ["METHOD_START", "{", "return   GradleVersion . version ( getSpec (  )  . getGradleVersion (  )  )  ;", "}", "METHOD_END"], "methodName": ["getGradleVersion"], "fileName": "org.gradle.api.plugins.buildcomparison.gradle.internal.ComparableGradleBuildExecuter"}, {"methodBody": ["METHOD_START", "{", "return   spec ;", "}", "METHOD_END"], "methodName": ["getSpec"], "fileName": "org.gradle.api.plugins.buildcomparison.gradle.internal.ComparableGradleBuildExecuter"}, {"methodBody": ["METHOD_START", "{", "return    ( getGradleVersion (  )  . compareTo ( ComparableGradleBuildExecuter . EXEC _ MINIMUM _ VERSION )  )     >  =     0  ;", "}", "METHOD_END"], "methodName": ["isExecutable"], "fileName": "org.gradle.api.plugins.buildcomparison.gradle.internal.ComparableGradleBuildExecuter"}, {"methodBody": ["METHOD_START", "{", "return   arguments ;", "}", "METHOD_END"], "methodName": ["getArguments"], "fileName": "org.gradle.api.plugins.buildcomparison.gradle.internal.DefaultGradleBuildInvocationSpec"}, {"methodBody": ["METHOD_START", "{", "return   gradleVersion ;", "}", "METHOD_END"], "methodName": ["getGradleVersion"], "fileName": "org.gradle.api.plugins.buildcomparison.gradle.internal.DefaultGradleBuildInvocationSpec"}, {"methodBody": ["METHOD_START", "{", "return   fileResolver . resolve ( projectDir )  ;", "}", "METHOD_END"], "methodName": ["getProjectDir"], "fileName": "org.gradle.api.plugins.buildcomparison.gradle.internal.DefaultGradleBuildInvocationSpec"}, {"methodBody": ["METHOD_START", "{", "return   tasks ;", "}", "METHOD_END"], "methodName": ["getTasks"], "fileName": "org.gradle.api.plugins.buildcomparison.gradle.internal.DefaultGradleBuildInvocationSpec"}, {"methodBody": ["METHOD_START", "{", "this . arguments    =     ( arguments    =  =    null )     ?    new   LinkedList < String >  (  )     :    Lists . newLinkedList ( arguments )  ;", "}", "METHOD_END"], "methodName": ["setArguments"], "fileName": "org.gradle.api.plugins.buildcomparison.gradle.internal.DefaultGradleBuildInvocationSpec"}, {"methodBody": ["METHOD_START", "{", "if   Version    =  =    null )     {", "throw   new   IllegalArgumentException ( Version   cannot   be   null \"  )  ;", "}", "GradleVersion   version    =    GradleVersion . versionVersion )  ;", "thisVersion    =    version . getVersion (  )  ;", "}", "METHOD_END"], "methodName": ["setGradleVersion"], "fileName": "org.gradle.api.plugins.buildcomparison.gradle.internal.DefaultGradleBuildInvocationSpec"}, {"methodBody": ["METHOD_START", "{", "if    ( projectDir    =  =    null )     {", "throw   new   IllegalArgumentExcep (  \" projectDir   cannot   be   null \"  )  ;", "}", "this . projectDir    =    projectDir ;", "}", "METHOD_END"], "methodName": ["setProjectDir"], "fileName": "org.gradle.api.plugins.buildcomparison.gradle.internal.DefaultGradleBuildInvocationSpec"}, {"methodBody": ["METHOD_START", "{", "this . tasks    =     ( tasks    =  =    null )     ?    new   LinkedList < String >  (  )     :    Lists . newLinkedList ( tasks )  ;", "}", "METHOD_END"], "methodName": ["setTasks"], "fileName": "org.gradle.api.plugins.buildcomparison.gradle.internal.DefaultGradleBuildInvocationSpec"}, {"methodBody": ["METHOD_START", "{", "for    ( GradleBuildOutcome   outcome    :    projectOutcomes . getOutcomes (  )  )     {", "if    ( outcome   instanceof   GradleFileBuildOutcome )     {", "addFileBuildOutcome (  (  ( GradleFileBuildOutcome )     ( outcome )  )  ,    rootProject ,    buildOutcomes )  ;", "} else    {", "new   UnknownBuildOutcome ( outcome . getTaskPath (  )  ,    outcome . getDescription (  )  )  ;", "}", "}", "for    ( ProjectOutcomes   childProject    :    projectOutcomes . getChildren (  )  )     {", "addBuildOutcomes ( childProject ,    rootProject ,    buildOutcomes )  ;", "}", "}", "METHOD_END"], "methodName": ["addBuildOutcomes"], "fileName": "org.gradle.api.plugins.buildcomparison.gradle.internal.GradleBuildOutcomeSetTransformer"}, {"methodBody": ["METHOD_START", "{", "if    ( zipArchiveTypes . contains ( outcome . getTypeIdentifier (  )  )  )     {", "File   originalFile    =    outcome . getFile (  )  ;", "String   relativePath    =    RelativePathUtil . relativePath ( rootProject . getProjectDirectory (  )  ,    originalFile )  ;", "LocallyAvailableResource   resource    =    null ;", "if    ( originalFile . exists (  )  )     {", "String   filestoreDestination    =     (  (  (  ( fileStorePrefix )     +     \"  /  \"  )     +     ( outcome . getTaskPath (  )  )  )     +     \"  /  \"  )     +     ( originalFile . getName (  )  )  ;", "resource    =    fileStore . move ( filestoreDestination ,    originalFile )  ;", "}", "BuildOutcome   buildOutcome    =    new   GeneratedArchiv ( outcome . getTaskPath (  )  ,    outcome . getDescription (  )  ,    resource ,    relativePath )  ;", "translatedOutcomes . add ( buildOutcome )  ;", "} else    {", "String   outcomeName    =    outcome . getTaskPath (  )  ;", "if    ( StringUtils . isEmpty ( outcomeName )  )     {", "outcomeName    =    RelativePathUtil . relativePath ( rootProject . getProjectDirectory (  )  ,    outcome . getFile (  )  )  ;", "}", "translatedOutcomes . add ( new   UnknownBuildOutcome ( outcomeName ,    outcome . getDescription (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addFileBuildOutcome"], "fileName": "org.gradle.api.plugins.buildcomparison.gradle.internal.GradleBuildOutcomeSetTransformer"}, {"methodBody": ["METHOD_START", "{", "Set < BuildOutcome >    keyedOutcomes    =    new   HashSet < BuildOutcome >  (  )  ;", "addBuildOutcomes ( rootProject ,    rootProject ,    keyedOutcomes )  ;", "return   keyedOutcomes ;", "}", "METHOD_END"], "methodName": ["transform"], "fileName": "org.gradle.api.plugins.buildcomparison.gradle.internal.GradleBuildOutcomeSetTransformer"}, {"methodBody": ["METHOD_START", "{", "return   description ;", "}", "METHOD_END"], "methodName": ["getDescription"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.BuildOutcomeSupport"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.BuildOutcomeSupport"}, {"methodBody": ["METHOD_START", "{", "if    (  ( type . isInstance ( source )  )     &  &     ( type . isInstance ( target )  )  )     {", "Object   from    =    characteristicTransformer . transform ( type . cast ( source )  )  ;", "Object   to    =    characteristicTransformer . transform ( type . cast ( target )  )  ;", "if    (  ( from    =  =    null )     &  &     ( to    =  =    null )  )     {", "return   type ;", "} else", "if    (  ( from    =  =    null )     |  |     ( to    =  =    null )  )     {", "return   null ;", "} else", "if    ( from . equals ( to )  )     {", "return   type ;", "} else    {", "return   null ;", "}", "} else    {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["findAssociationType"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.ByTypeAndCharacteristicBuildOutcomeAssociator"}, {"methodBody": ["METHOD_START", "{", "for    ( BuildOutcomeAssociator   associator    :    associators )     {", "Class <  ?    extends   BuildOutcome >    outcomeType    =    associator . findAssociationType ( source ,    target )  ;", "if    ( outcomeType    !  =    null )     {", "return   outcomeType ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["findAssociationType"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.CompositeBuildOutcomeAssociator"}, {"methodBody": ["METHOD_START", "{", "return   source ;", "}", "METHOD_END"], "methodName": ["getSource"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.DefaultBuildOutcomeAssociation"}, {"methodBody": ["METHOD_START", "{", "return   target ;", "}", "METHOD_END"], "methodName": ["getTarget"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.DefaultBuildOutcomeAssociation"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.DefaultBuildOutcomeAssociation"}, {"methodBody": ["METHOD_START", "{", "return   typeIdentifier ;", "}", "METHOD_END"], "methodName": ["getTypeIdentifier"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.FileOutcomeIdentifier"}, {"methodBody": ["METHOD_START", "{", "return    ( resource )     =  =    null    ?    null    :    resource . getFile (  )  ;", "}", "METHOD_END"], "methodName": ["getArchiveFile"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.archive.GeneratedArchiveBuildOutcome"}, {"methodBody": ["METHOD_START", "{", "return   rootRelativePath ;", "}", "METHOD_END"], "methodName": ["getRootRelativePath"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.archive.GeneratedArchiveBuildOutcome"}, {"methodBody": ["METHOD_START", "{", "GeneratedArchiveBuildOutcome   source    =    association . getSource (  )  ;", "GeneratedArchiveBuildOutcome   target    =    association . getTarget (  )  ;", "Set < ArchiveEntry >    sourceEntries ;", "if    (  (  ( source . getArchiveFile (  )  )     !  =    null )     &  &     ( source . getArchiveFile (  )  . exists (  )  )  )     {", "sourceEntries    =    archiveToEntriesTransformer . transform ( source . getArchiveFile (  )  )  ;", "} else    {", "sourceEntries    =    Collections . emptySet (  )  ;", "}", "Set < ArchiveEntry >    targetEntries ;", "if    (  (  ( target . getArchiveFile (  )  )     !  =    null )     &  &     ( target . getArchiveFile (  )  . exists (  )  )  )     {", "targetEntries    =    archiveToEntriesTransformer . transform ( target . getArchiveFile (  )  )  ;", "} else    {", "targetEntries    =    Collections . emptySet (  )  ;", "}", "CollectionUtils . SetDiff < ArchiveEntry >    diff    =    CollectionUtils . diffSetsBy ( sourceEntries ,    targetEntries ,    new   Transformer < ArchiveEntry . Path ,    ArchiveEntry >  (  )     {", "public   ArchiveEntry . Path   transform ( ArchiveEntry   entry )     {", "return   entry . getPath (  )  ;", "}", "}  )  ;", "SortedSet < ArchiveEntryComparison >    entryComparisons    =    new   TreeSet < ArchiveEntryComparison >  (  )  ;", "for    ( ArchiveEntry   sourceOnly    :    diff . leftOnly )     {", "entryComparisons . add ( new   ArchiveEntryComparison ( sourceOnly ,    null )  )  ;", "}", "for    ( Pair < ArchiveEntry ,    ArchiveEntry >    pair    :    diff . common )     {", "entryComparisons . add ( new   ArchiveEntryComparison ( pair . left ,    pair . right )  )  ;", "}", "for    ( ArchiveEntry   targetOnly    :    diff . rightOnly )     {", "entryComparisons . add ( new   ArchiveEntryComparison ( null ,    targetOnly )  )  ;", "}", "return   new   isonResult ( association ,    entryComparisons )  ;", "}", "METHOD_END"], "methodName": ["compare"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.archive.GeneratedArchiveBuildOutcomeComparator"}, {"methodBody": ["METHOD_START", "{", "return   GeneratedArchiveBuildOutcome . class ;", "}", "METHOD_END"], "methodName": ["getComparedType"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.archive.GeneratedArchiveBuildOutcomeComparator"}, {"methodBody": ["METHOD_START", "{", "boolean   sourceFileExists    =     ( getCompared (  )  . getSource (  )  . getArchiveFile (  )  )     !  =    null ;", "boolean   targetFileExists    =     ( getCompared (  )  . getTarget (  )  . getArchiveFile (  )  )     !  =    null ;", "if    ( sourceFileExists    &  &    targetFileExists )     {", "if    ( CollectionUtils . every ( getEntryComparisons (  )  ,    new   Spec < ArchiveEntryComparison >  (  )     {", "public   boolean   isSatisfiedBy ( ArchiveEntryComparison   element )     {", "return    ( element . getType (  )  )     =  =     ( Type . EQUAL )  ;", "}", "}  )  )     {", "return   Type . EQUAL ;", "} else    {", "return   Type . UNEQUAL ;", "}", "} else", "if    (  (  ! sourceFileExists )     &  &     (  ! targetFileExists )  )     {", "return   Type . NON _ EXISTENT ;", "} else", "if    (  ! targetFileExists )     {", "return   Type . SOURCE _ ONLY ;", "} else    {", "return   Type . TARGET _ ONLY ;", "}", "}", "METHOD_END"], "methodName": ["getComparisonResultType"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.archive.GeneratedArchiveBuildOutcomeComparisonResult"}, {"methodBody": ["METHOD_START", "{", "return   entryComparisons ;", "}", "METHOD_END"], "methodName": ["getEntryComparisons"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.archive.GeneratedArchiveBuildOutcomeComparisonResult"}, {"methodBody": ["METHOD_START", "{", "return    ( getComparisonResultType (  )  . equals ( ComparisonResultType . EQUAL )  )     |  |     ( getComparisonResultType (  )  . equals ( ComparisonResultType . NON _ EXISTENT )  )  ;", "}", "METHOD_END"], "methodName": ["isOutcomesAreIdentical"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.archive.GeneratedArchiveBuildOutcomeComparisonResult"}, {"methodBody": ["METHOD_START", "{", "return   crc ;", "}", "METHOD_END"], "methodName": ["getCrc"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.archive.entry.ArchiveEntry"}, {"methodBody": ["METHOD_START", "{", "return   path ;", "}", "METHOD_END"], "methodName": ["getPath"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.archive.entry.ArchiveEntry"}, {"methodBody": ["METHOD_START", "{", "return   size ;", "}", "METHOD_END"], "methodName": ["getSize"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.archive.entry.ArchiveEntry"}, {"methodBody": ["METHOD_START", "{", "return   subEntries ;", "}", "METHOD_END"], "methodName": ["getSubEntries"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.archive.entry.ArchiveEntry"}, {"methodBody": ["METHOD_START", "{", "return   directory ;", "}", "METHOD_END"], "methodName": ["isDirectory"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.archive.entry.ArchiveEntry"}, {"methodBody": ["METHOD_START", "{", "return   ConfigureUtil . configureByMap ( map ,    new   ArchiveEntry . Builder (  )  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.archive.entry.ArchiveEntry"}, {"methodBody": ["METHOD_START", "{", "return   path . compareTo ( o . path )  ;", "}", "METHOD_END"], "methodName": ["compareTo"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.archive.entry.ArchiveEntryComparison"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( source )     !  =    null )     &  &     (  ( target )     =  =    null )  )     {", "return   ResultType . SOURCE _ ONLY ;", "} else", "if    (  (  ( source )     =  =    null )     &  &     (  ( target )     !  =    null )  )     {", "return   ResultType . TARGET _ ONLY ;", "} else    {", "return   source . equals ( target )     ?    ResultType . EQUAL    :    ResultType . UNEQUAL ;", "}", "}", "METHOD_END"], "methodName": ["getComparisonResultType"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.archive.entry.ArchiveEntryComparison"}, {"methodBody": ["METHOD_START", "{", "return   path ;", "}", "METHOD_END"], "methodName": ["getPath"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.archive.entry.ArchiveEntryComparison"}, {"methodBody": ["METHOD_START", "{", "return   source ;", "}", "METHOD_END"], "methodName": ["getSource"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.archive.entry.ArchiveEntryComparison"}, {"methodBody": ["METHOD_START", "{", "return   target ;", "}", "METHOD_END"], "methodName": ["getTarget"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.archive.entry.ArchiveEntryComparison"}, {"methodBody": ["METHOD_START", "{", "FileInputStream   fileInputStream ;", "try    {", "fileInputStream    =    new   FileInputStream ( archiveFile )  ;", "}    catch    ( FileNotFoundException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "ImmutableSet . Builder <  >    allEntries    =    ImmutableSet . builder (  )  ;", "walk ( fileInputStream ,    allEntries ,    ImmutableList .  < String > of (  )  )  ;", "return   allEntries . build (  )  ;", "}", "METHOD_END"], "methodName": ["transform"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.archive.entry.FileToArchiveEntrySetTransformer"}, {"methodBody": ["METHOD_START", "{", "ImmutableSet . Builder < ArchiveEntry >    entries    =    ImmutableSet . builder (  )  ;", "ZipInputStream   zipStream    =    new   ZipInputStream ( archiveInputStream )  ;", "try    {", "ZipEntry   entry    =    zipStream . getNextEntry (  )  ;", "while    ( entry    !  =    null )     {", "ArchiveEntry . Builder   builder    =    new   ArchiveEntry . Builder (  )  ;", "builder . setParentPaths ( parentPaths )  ;", "builder . setPath ( entry . getName (  )  )  ;", "builder . setCrc ( entry . getCrc (  )  )  ;", "builder . setDirectory ( entry . isDirectory (  )  )  ;", "builder . setSize ( entry . getSize (  )  )  ;", "if    (  (  !  ( builder . isDirectory (  )  )  )     &  &     (  ( zipStream . available (  )  )     =  =     1  )  )     {", "boolean   zipEntry ;", "final   BufferedInputStream   bis    =    new   BufferedInputStream ( zipStream )     {", "@ Override", "public   void   close (  )    throws   IOException    {", "}", "}  ;", "bis . mark ( Integer . MAX _ VALUE )  ;", "zipEntry    =     ( new   ZipInputStream ( bis )  . getNextEntry (  )  )     !  =    null ;", "bis . reset (  )  ;", "if    ( zipEntry )     {", "ImmutableList < String >    nextParentPaths    =    ImmutableList .  < String > builder (  )  . addAll ( parentPaths )  . add ( entry . getName (  )  )  . build (  )  ;", "ImmutableSet < ArchiveEntry >    subEntries    =    walk ( bis ,    allEntries ,    nextParentPaths )  ;", "builder . setSubEntries ( subEntries )  ;", "}", "}", "ArchiveEntry   archiveEntry    =    builder . build (  )  ;", "entries . add ( archiveEntry )  ;", "allEntries . add ( archiveEntry )  ;", "zipStream . closeEntry (  )  ;", "entry    =    zipStream . getNextEntry (  )  ;", "}", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}    finally    {", "IOUtils . closeQuietly ( zipStream )  ;", "}", "return   entries . build (  )  ;", "}", "METHOD_END"], "methodName": ["walk"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.archive.entry.FileToArchiveEntrySetTransformer"}, {"methodBody": ["METHOD_START", "{", "return   description ;", "}", "METHOD_END"], "methodName": ["getDescription"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.tooling.DefaultGradleBuildOutcome"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.tooling.DefaultGradleBuildOutcome"}, {"methodBody": ["METHOD_START", "{", "return   taskPath ;", "}", "METHOD_END"], "methodName": ["getTaskPath"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.tooling.DefaultGradleBuildOutcome"}, {"methodBody": ["METHOD_START", "{", "return   file ;", "}", "METHOD_END"], "methodName": ["getFile"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.tooling.DefaultGradleFileBuildOutcome"}, {"methodBody": ["METHOD_START", "{", "return   typeIdentifier ;", "}", "METHOD_END"], "methodName": ["getTypeIdentifier"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.tooling.DefaultGradleFileBuildOutcome"}, {"methodBody": ["METHOD_START", "{", "children . add ( child )  ;", "}", "METHOD_END"], "methodName": ["addChild"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.tooling.DefaultProjectOutcomes"}, {"methodBody": ["METHOD_START", "{", "return   new   ImmutableDomainObjectSet < ProjectOutcomes >  ( children )  ;", "}", "METHOD_END"], "methodName": ["getChildren"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.tooling.DefaultProjectOutcomes"}, {"methodBody": ["METHOD_START", "{", "return   description ;", "}", "METHOD_END"], "methodName": ["getDescription"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.tooling.DefaultProjectOutcomes"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.tooling.DefaultProjectOutcomes"}, {"methodBody": ["METHOD_START", "{", "return   outcomes ;", "}", "METHOD_END"], "methodName": ["getOutcomes"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.tooling.DefaultProjectOutcomes"}, {"methodBody": ["METHOD_START", "{", "return   parent ;", "}", "METHOD_END"], "methodName": ["getParent"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.tooling.DefaultProjectOutcomes"}, {"methodBody": ["METHOD_START", "{", "return   projectPath ;", "}", "METHOD_END"], "methodName": ["getPath"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.tooling.DefaultProjectOutcomes"}, {"methodBody": ["METHOD_START", "{", "return   projectDirectory ;", "}", "METHOD_END"], "methodName": ["getProjectDirectory"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.tooling.DefaultProjectOutcomes"}, {"methodBody": ["METHOD_START", "{", "Configuration   configuration    =    project . getConfigurations (  )  . findByName ( ARCHIVES _ CONFIGURATION )  ;", "if    ( configuration    !  =    null )     {", "for    ( PublishArtifact   artifact    :    configuration . getArtifacts (  )  )     {", "GradleFileBuildOutcome       =    artifactTransformer . transform ( artifact ,    project )  ;", "s . add (  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addArtifacts"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.tooling.ProjectOutcomesModelBuilder"}, {"methodBody": ["METHOD_START", "{", "return   buildProjectOutput ( project . getRootProject (  )  ,    null )  ;", "}", "METHOD_END"], "methodName": ["buildAll"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.tooling.ProjectOutcomesModelBuilder"}, {"methodBody": ["METHOD_START", "{", "DefaultProjectOutcomes   projectOutput    =    new   DefaultProjectOutcomes ( project . getName (  )  ,    project . getPath (  )  ,    project . getDescription (  )  ,    project . getProjectDir (  )  ,    getFileOutcomes ( project )  ,    parent )  ;", "for    ( Project   child    :    project . getChildProjects (  )  . values (  )  )     {", "projectOutput . addChild ( buildProjectOutput ( child ,    projectOutput )  )  ;", "}", "return   projectOutput ;", "}", "METHOD_END"], "methodName": ["buildProjectOutput"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.tooling.ProjectOutcomesModelBuilder"}, {"methodBody": ["METHOD_START", "{", "return   modelName . equals (  \" ProjectOutcomes \"  )  ;", "}", "METHOD_END"], "methodName": ["canBuild"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.tooling.ProjectOutcomesModelBuilder"}, {"methodBody": ["METHOD_START", "{", "List < GradleFileBuildOutcome >    fileBuildOutcomes    =    Lists . newArrayList (  )  ;", "addArtifacts ( project ,    fileBuildOutcomes )  ;", "return   new   tooling . model . internal . ImmutableDomainObjectSet < GradleFileBuildOutcome >  ( fileBuildOutcomes )  ;", "}", "METHOD_END"], "methodName": ["getFileOutcomes"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.tooling.ProjectOutcomesModelBuilder"}, {"methodBody": ["METHOD_START", "{", "return    \" Publish   artifact    '  \"  . concat ( artifact . toString (  )  )  . concat (  \"  '  \"  )  ;", "}", "METHOD_END"], "methodName": ["getDescription"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.tooling.PublishArtifactToFileBuildOutcomeTransformer"}, {"methodBody": ["METHOD_START", "{", "URI   artifactUri    =    artifact . getFile (  )  . toURI (  )  ;", "URI   projectDirUri    =    project . getProjectDir (  )  . toURI (  )  ;", "URI   relativeUri    =    projectDirUri . relativize ( artifactUri )  ;", "return   relativeUri . getPath (  )  ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.tooling.PublishArtifactToFileBuildOutcomeTransformer"}, {"methodBody": ["METHOD_START", "{", "if    ( artifact   instanceof   ArchivePublishArtifact )     {", "return    (  ( ArchivePublishArtifact )     ( artifact )  )  . getArchiveTask (  )  . getPath (  )  ;", "} else    {", "String   taskPath    =    null ;", "Set <  ?    extends   Task >    tasks    =    artifact . getBuildDependencies (  )  . getDependencies ( null )  ;", "if    (  !  ( tasks . isEmpty (  )  )  )     {", "taskPath    =    tasks . iterator (  )  . next (  )  . getPath (  )  ;", "}", "return   taskPath ;", "}", "}", "METHOD_END"], "methodName": ["getTaskPath"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.tooling.PublishArtifactToFileBuildOutcomeTransformer"}, {"methodBody": ["METHOD_START", "{", "if    ( artifact   instanceof   ArchivePublishArtifact )     {", "ArchivePublishArtifact   publishArtifact    =     (  ( ArchivePublishArtifact )     ( artifact )  )  ;", "AbstractArchiveTask   task    =    publishArtifact . getArchiveTask (  )  ;", "if    ( task   instanceof   War )     {", "return   FileOutcomeIdentifier . WAR _ ARTIFACT . getTypeIdentifier (  )  ;", "} else", "if    ( task   instanceof   Ear )     {", "return   FileOutcomeIdentifier . EAR _ ARTIFACT . getTypeIdentifier (  )  ;", "} else", "if    ( task   instanceof   Jar )     {", "return   FileOutcomeIdentifier . JAR _ ARTIFACT . getTypeIdentifier (  )  ;", "} else", "if    ( task   instanceof   Zip )     {", "return   FileOutcomeIdentifier . ZIP _ ARTIFACT . getTypeIdentifier (  )  ;", "} else", "if    ( task   instanceof   Tar )     {", "return   FileOutcomeIdentifier . TAR _ ARTIFACT . getTypeIdentifier (  )  ;", "} else    {", "return   FileOutcomeIdentifier . ARCHIVE _ ARTIFACT . getTypeIdentifier (  )  ;", "}", "} else    {", "return   FileOutcomeIdentifier . UNKNOWN _ ARTIFACT . getTypeIdentifier (  )  ;", "}", "}", "METHOD_END"], "methodName": ["getTypeIdentifier"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.tooling.PublishArtifactToFileBuildOutcomeTransformer"}, {"methodBody": ["METHOD_START", "{", "String   id    =    getId ( artifact ,    project )  ;", "String   taskPath    =    getTaskPath ( artifact )  ;", "String   description    =    getDescription ( artifact )  ;", "String   typeIdentifier    =    getTypeIdentifier ( artifact )  ;", "return   new   DefaultGradle ( id ,    description ,    taskPath ,    artifact . getFile (  )  ,    typeIdentifier )  ;", "}", "METHOD_END"], "methodName": ["transform"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.tooling.PublishArtifactToFileBuildOutcomeTransformer"}, {"methodBody": ["METHOD_START", "{", "project . getServices (  )  . get ( ToolingModelBuilderRegistry . class )  . register ( new   ProjectOutcomesModelBuilder (  )  )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.tooling.ToolingRegistrationAction"}, {"methodBody": ["METHOD_START", "{", "return   new   UnknownBuildOutcomeComparisonResult ( association )  ;", "}", "METHOD_END"], "methodName": ["compare"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.unknown.UnknownBuildOutcomeComparator"}, {"methodBody": ["METHOD_START", "{", "return   UnknownBuildOutcome . class ;", "}", "METHOD_END"], "methodName": ["getComparedType"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.unknown.UnknownBuildOutcomeComparator"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isOutcomesAreIdentical"], "fileName": "org.gradle.api.plugins.buildcomparison.outcome.internal.unknown.UnknownBuildOutcomeComparisonResult"}, {"methodBody": ["METHOD_START", "{", "return    (  ( BuildOutcomeComparisonResultRenderer < T ,    C >  )     ( renderers . get ( resultType )  )  )  ;", "}", "METHOD_END"], "methodName": ["getRenderer"], "fileName": "org.gradle.api.plugins.buildcomparison.render.internal.DefaultBuildOutcomeComparisonResultRendererFactory"}, {"methodBody": ["METHOD_START", "{", "if    ( renderer . getContextType (  )  . isAssignableFrom ( contextType )  )     {", "renderers . put ( renderer . getResultType (  )  ,    renderer )  ;", "} else    {", "throw   new   IllegalArgumentException ( String . format (  \"     '  % s '    has   context   type    '  % s '    which   is   incompatible   with   target   context   type    '  % s '  \"  ,    renderer ,    renderer . getContextType (  )  ,    contextType )  )  ;", "}", "}", "METHOD_END"], "methodName": ["registerRenderer"], "fileName": "org.gradle.api.plugins.buildcomparison.render.internal.DefaultBuildOutcomeComparisonResultRendererFactory"}, {"methodBody": ["METHOD_START", "{", "return    (  ( BuildOutcomeRenderer < T ,    C >  )     ( renderers . get ( resultType )  )  )  ;", "}", "METHOD_END"], "methodName": ["getRenderer"], "fileName": "org.gradle.api.plugins.buildcomparison.render.internal.DefaultBuildOutcomeRendererFactory"}, {"methodBody": ["METHOD_START", "{", "if    ( renderer . getContextType (  )  . isAssignableFrom ( contextType )  )     {", "renderers . put ( renderer . getOutcomeType (  )  ,    renderer )  ;", "} else    {", "throw   new   IllegalArgumentException ( String . format (  \"     '  % s '    has   context   type    '  % s '    which   is   incompatible   with   target   context   type    '  % s '  \"  ,    renderer ,    renderer . getContextType (  )  ,    contextType )  )  ;", "}", "}", "METHOD_END"], "methodName": ["registerRenderer"], "fileName": "org.gradle.api.plugins.buildcomparison.render.internal.DefaultBuildOutcomeRendererFactory"}, {"methodBody": ["METHOD_START", "{", "return   groovyTrue ( isEqual )     ?     \"  \"     :    getDiffClass (  )  ;", "}", "METHOD_END"], "methodName": ["diffClass"], "fileName": "org.gradle.api.plugins.buildcomparison.render.internal.html.HtmlRenderContext"}, {"methodBody": ["METHOD_START", "{", "return   groovyTrue ( isEqual )     ?    getEqualClass (  )     :     \"  \"  ;", "}", "METHOD_END"], "methodName": ["equalClass"], "fileName": "org.gradle.api.plugins.buildcomparison.render.internal.html.HtmlRenderContext"}, {"methodBody": ["METHOD_START", "{", "return   groovyTrue ( isEqual )     ?    getEqualClass (  )     :    getDiffClass (  )  ;", "}", "METHOD_END"], "methodName": ["equalOrDiffClass"], "fileName": "org.gradle.api.plugins.buildcomparison.render.internal.html.HtmlRenderContext"}, {"methodBody": ["METHOD_START", "{", "return    \" comparison - result - msg \"  ;", "}", "METHOD_END"], "methodName": ["getComparisonResultMsgClass"], "fileName": "org.gradle.api.plugins.buildcomparison.render.internal.html.HtmlRenderContext"}, {"methodBody": ["METHOD_START", "{", "return    \" diff \"  ;", "}", "METHOD_END"], "methodName": ["getDiffClass"], "fileName": "org.gradle.api.plugins.buildcomparison.render.internal.html.HtmlRenderContext"}, {"methodBody": ["METHOD_START", "{", "return    \" equal \"  ;", "}", "METHOD_END"], "methodName": ["getEqualClass"], "fileName": "org.gradle.api.plugins.buildcomparison.render.internal.html.HtmlRenderContext"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Boolean )     ( InvokerHelper . invokeMethod ( equal ,     \" asBoolean \"  ,    null )  )  )  ;", "}", "METHOD_END"], "methodName": ["groovyTrue"], "fileName": "org.gradle.api.plugins.buildcomparison.render.internal.html.HtmlRenderContext"}, {"methodBody": ["METHOD_START", "{", "return   relativizer . transform ( file )  ;", "}", "METHOD_END"], "methodName": ["relativePath"], "fileName": "org.gradle.api.plugins.buildcomparison.render.internal.html.HtmlRenderContext"}, {"methodBody": ["METHOD_START", "{", "ClosureBackedAction . execute ( markupBuilder ,    renderAction )  ;", "}", "METHOD_END"], "methodName": ["render"], "fileName": "org.gradle.api.plugins.buildcomparison.render.internal.html.HtmlRenderContext"}]