[{"methodBody": ["METHOD_START", "{", "return   classifier ;", "}", "METHOD_END"], "methodName": ["getClassifier"], "fileName": "org.gradle.api.internal.artifacts.DefaultArtifactIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   extension ;", "}", "METHOD_END"], "methodName": ["getExtension"], "fileName": "org.gradle.api.internal.artifacts.DefaultArtifactIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   moduleVersionIdentifier ;", "}", "METHOD_END"], "methodName": ["getModuleVersionIdentifier"], "fileName": "org.gradle.api.internal.artifacts.DefaultArtifactIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.api.internal.artifacts.DefaultArtifactIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.gradle.api.internal.artifacts.DefaultArtifactIdentifier"}, {"methodBody": ["METHOD_START", "{", "add (  0  ,    repository )  ;", "}", "METHOD_END"], "methodName": ["addFirst"], "fileName": "org.gradle.api.internal.artifacts.DefaultArtifactRepositoryContainer"}, {"methodBody": ["METHOD_START", "{", "add ( repository )  ;", "}", "METHOD_END"], "methodName": ["addLast"], "fileName": "org.gradle.api.internal.artifacts.DefaultArtifactRepositoryContainer"}, {"methodBody": ["METHOD_START", "{", "return   addRepository ( repository ,    defaultName ,    Actions . doNothing (  )  )  ;", "}", "METHOD_END"], "methodName": ["addRepository"], "fileName": "org.gradle.api.internal.artifacts.DefaultArtifactRepositoryContainer"}, {"methodBody": ["METHOD_START", "{", "configureAction . execute ( repository )  ;", "return   addWithUniqueName ( repository ,    defaultName ,    addLastAction )  ;", "}", "METHOD_END"], "methodName": ["addRepository"], "fileName": "org.gradle.api.internal.artifacts.DefaultArtifactRepositoryContainer"}, {"methodBody": ["METHOD_START", "{", "String   repositoryName    =    repository . getName (  )  ;", "if    (  !  ( GUtil . isTrue ( repositoryName )  )  )     {", "repository . setName ( uniquifyName ( defaultName )  )  ;", "} else    {", "repository . setName ( uniquifyName ( repositoryName )  )  ;", "}", "assertCanAdd ( repository . getName (  )  )  ;", "insertion . execute ( repository )  ;", "return   repository ;", "}", "METHOD_END"], "methodName": ["addWithUniqueName"], "fileName": "org.gradle.api.internal.artifacts.DefaultArtifactRepositoryContainer"}, {"methodBody": ["METHOD_START", "{", "return   ConfigureUtil . configureSelf ( closure ,    this )  ;", "}", "METHOD_END"], "methodName": ["configure"], "fileName": "org.gradle.api.internal.artifacts.DefaultArtifactRepositoryContainer"}, {"methodBody": ["METHOD_START", "{", "if    (  ( findByName ( proposedName )  )     =  =    null )     {", "return   proposedName ;", "}", "for    ( int   index    =     2  ;    true ;    index +  +  )     {", "String   candidate    =    proposedName    +    index ;", "if    (  ( findByName ( candidate )  )     =  =    null )     {", "return   candidate ;", "}", "}", "}", "METHOD_END"], "methodName": ["uniquifyName"], "fileName": "org.gradle.api.internal.artifacts.DefaultArtifactRepositoryContainer"}, {"methodBody": ["METHOD_START", "{", "return   candidate ;", "}", "METHOD_END"], "methodName": ["getCandidate"], "fileName": "org.gradle.api.internal.artifacts.DefaultComponentSelection"}, {"methodBody": ["METHOD_START", "{", "return   rejectionReason ;", "}", "METHOD_END"], "methodName": ["getRejectionReason"], "fileName": "org.gradle.api.internal.artifacts.DefaultComponentSelection"}, {"methodBody": ["METHOD_START", "{", "return   rejected ;", "}", "METHOD_END"], "methodName": ["isRejected"], "fileName": "org.gradle.api.internal.artifacts.DefaultComponentSelection"}, {"methodBody": ["METHOD_START", "{", "rejected    =    true ;", "rejReason    =    reason ;", "}", "METHOD_END"], "methodName": ["reject"], "fileName": "org.gradle.api.internal.artifacts.DefaultComponentSelection"}, {"methodBody": ["METHOD_START", "{", "ModuleFactoryDelegate   moduleFactoryDelegate    =    new   ModuleFactoryDelegate ( clientModule ,    this )  ;", "moduleFactoryDelegate . prepareDelegation ( configureClosure )  ;", "configureClosure . call (  )  ;", "}", "METHOD_END"], "methodName": ["configureModule"], "fileName": "org.gradle.api.internal.artifacts.DefaultDependencyFactory"}, {"methodBody": ["METHOD_START", "{", "Dependency   dependency    =    dependencyNotationParser . parseNotation ( dependencyNotation )  ;", "injectAttributesFactory ( dependency )  ;", "return   dependency ;", "}", "METHOD_END"], "methodName": ["createDependency"], "fileName": "org.gradle.api.internal.artifacts.DefaultDependencyFactory"}, {"methodBody": ["METHOD_START", "{", "ClientModule   clientModule    =    clientModuleNotationParser . parseNotation ( dependencyNotation )  ;", "if    ( configureClosure    !  =    null )     {", "configureModule ( clientModule ,    configureClosure )  ;", "}", "return   clientModule ;", "}", "METHOD_END"], "methodName": ["createModule"], "fileName": "org.gradle.api.internal.artifacts.DefaultDependencyFactory"}, {"methodBody": ["METHOD_START", "{", "return   projectDependencyFactory . createFromMap ( projectFinder ,    map )  ;", "}", "METHOD_END"], "methodName": ["createProjectDependencyFromMap"], "fileName": "org.gradle.api.internal.artifacts.DefaultDependencyFactory"}, {"methodBody": ["METHOD_START", "{", "if    ( dependency   instanceof   AbstractModuleDependency )     {", "(  ( AbstractModuleDependency )     ( dependency )  )  . setAttributesFactory ( attributesFactory )  ;", "}", "}", "METHOD_END"], "methodName": ["injectAttributesFactory"], "fileName": "org.gradle.api.internal.artifacts.DefaultDependencyFactory"}, {"methodBody": ["METHOD_START", "{", "if    ( dependency   instanceof   DefaultDependencyConstraint )     {", "(  ( DefaultDependencyConstraint )     ( dependency )  )  . setAttributesFactory ( attributesFactory )  ;", "}", "}", "METHOD_END"], "methodName": ["injectAttributesFactory"], "fileName": "org.gradle.api.internal.artifacts.DefaultDependencyFactory"}, {"methodBody": ["METHOD_START", "{", "registration . addProvider ( new   DefaultDependencyManagementServices . DependencyResolutionScopeServices (  )  )  ;", "}", "METHOD_END"], "methodName": ["addDslServices"], "fileName": "org.gradle.api.internal.artifacts.DefaultDependencyManagementServices"}, {"methodBody": ["METHOD_START", "{", "DefaultServiceRegistry   services    =    new   DefaultServiceRegistry ( parent )  ;", "services . add ( FileResolver . class ,    fileResolver )  ;", "services . add ( DependencyMetaDataProvider . class ,    dependencyMetaDataProvider )  ;", "services . add ( ProjectFinder . class ,    projectFinder )  ;", "services . add ( DomainObjectContext . class ,    domainObjectContext )  ;", "services . addProvider ( new    . DependencyResolutionScopeServices (  )  )  ;", "return   services . get ( DependencyResolutionServices . class )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.api.internal.artifacts.DefaultDependencyManagementServices"}, {"methodBody": ["METHOD_START", "{", "return   clientConfiguration . getBuildDependencies (  )  ;", "}", "METHOD_END"], "methodName": ["getBuildDependencies"], "fileName": "org.gradle.api.internal.artifacts.DefaultDependencySet"}, {"methodBody": ["METHOD_START", "{", "return   clientConfiguration   instanceof   MutationValidator    ?    new   DefaultDependencySet . MutationValidationAction ( clientConfiguration )     :    Actions .  < ModuleDependency > doNothing (  )  ;", "}", "METHOD_END"], "methodName": ["toMutationValidator"], "fileName": "org.gradle.api.internal.artifacts.DefaultDependencySet"}, {"methodBody": ["METHOD_START", "{", "return   componentMetadataProcessor ;", "}", "METHOD_END"], "methodName": ["getComponentMetadataProcessor"], "fileName": "org.gradle.api.internal.artifacts.DefaultGlobalDependencyResolutionRules"}, {"methodBody": ["METHOD_START", "{", "return   moduleMetadataProcessor ;", "}", "METHOD_END"], "methodName": ["getModuleMetadataProcessor"], "fileName": "org.gradle.api.internal.artifacts.DefaultGlobalDependencyResolutionRules"}, {"methodBody": ["METHOD_START", "{", "return   group ;", "}", "METHOD_END"], "methodName": ["getGroup"], "fileName": "org.gradle.api.internal.artifacts.DefaultModuleIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.api.internal.artifacts.DefaultModuleIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultModuleIdentifier ( group ,    name )  ;", "}", "METHOD_END"], "methodName": ["newId"], "fileName": "org.gradle.api.internal.artifacts.DefaultModuleIdentifier"}, {"methodBody": ["METHOD_START", "{", "if    ( other   instanceof   DefaultModuleIdentifier )     {", "return   other ;", "}", "return   DefaultModuleIdentifier . newId ( other . getGroup (  )  ,    other . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["newId"], "fileName": "org.gradle.api.internal.artifacts.DefaultModuleIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   id . getGroup (  )  ;", "}", "METHOD_END"], "methodName": ["getGroup"], "fileName": "org.gradle.api.internal.artifacts.DefaultModuleVersionIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getModule"], "fileName": "org.gradle.api.internal.artifacts.DefaultModuleVersionIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   id . getName (  )  ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.api.internal.artifacts.DefaultModuleVersionIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   version ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "org.gradle.api.internal.artifacts.DefaultModuleVersionIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultModuleVersionIdentifier ( group ,    name ,    version )  ;", "}", "METHOD_END"], "methodName": ["newId"], "fileName": "org.gradle.api.internal.artifacts.DefaultModuleVersionIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultModuleVersionIdentifier ( componentId . getGroup (  )  ,    componentId . getModule (  )  ,    componentId . getVersion (  )  )  ;", "}", "METHOD_END"], "methodName": ["newId"], "fileName": "org.gradle.api.internal.artifacts.DefaultModuleVersionIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultModuleVersionIdentifier ( module . getGroup (  )  ,    module . getName (  )  ,    module . getVersion (  )  )  ;", "}", "METHOD_END"], "methodName": ["newId"], "fileName": "org.gradle.api.internal.artifacts.DefaultModuleVersionIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   group ;", "}", "METHOD_END"], "methodName": ["getGroup"], "fileName": "org.gradle.api.internal.artifacts.DefaultModuleVersionSelector"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.api.internal.artifacts.DefaultModuleVersionSelector"}, {"methodBody": ["METHOD_START", "{", "return   moduleVersionConstraint . getPreferredVersion (  )  ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "org.gradle.api.internal.artifacts.DefaultModuleVersionSelector"}, {"methodBody": ["METHOD_START", "{", "return   new   ModuleVersionSelectorStrictSpec ( this )  . isSatisfiedBy ( identifier )  ;", "}", "METHOD_END"], "methodName": ["matchesStrictly"], "fileName": "org.gradle.api.internal.artifacts.DefaultModuleVersionSelector"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultModuleVersionSelector ( group ,    name ,    new   DefaultMutableVersionConstraint ( preferredVersion )  )  ;", "}", "METHOD_END"], "methodName": ["newSelector"], "fileName": "org.gradle.api.internal.artifacts.DefaultModuleVersionSelector"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultModuleVersionSelector ( group ,    name ,    version )  ;", "}", "METHOD_END"], "methodName": ["newSelector"], "fileName": "org.gradle.api.internal.artifacts.DefaultModuleVersionSelector"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultModuleVersionSelector ( selector . getGroup (  )  ,    selector . getModule (  )  ,    selector . getVersionConstraint (  )  )  ;", "}", "METHOD_END"], "methodName": ["newSelector"], "fileName": "org.gradle.api.internal.artifacts.DefaultModuleVersionSelector"}, {"methodBody": ["METHOD_START", "{", "this . group    =    group ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setGroup"], "fileName": "org.gradle.api.internal.artifacts.DefaultModuleVersionSelector"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.gradle.api.internal.artifacts.DefaultModuleVersionSelector"}, {"methodBody": ["METHOD_START", "{", "return   instantiator . newInstance ( DefaultProjectDependency . class ,    project ,    projectAccessListener ,    buildProjectDependencies )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.api.internal.artifacts.DefaultProjectDependencyFactory"}, {"methodBody": ["METHOD_START", "{", "return   instantiator . newInstance ( DefaultProjectDependency . class ,    project ,    configuration ,    projectAccessListener ,    buildProjectDependencies )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.api.internal.artifacts.DefaultProjectDependencyFactory"}, {"methodBody": ["METHOD_START", "{", "return   builtBy ;", "}", "METHOD_END"], "methodName": ["getBuildDependencies"], "fileName": "org.gradle.api.internal.artifacts.DefaultPublishArtifactSet"}, {"methodBody": ["METHOD_START", "{", "return   files ;", "}", "METHOD_END"], "methodName": ["getFiles"], "fileName": "org.gradle.api.internal.artifacts.DefaultPublishArtifactSet"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultResolvedModuleVersion ( owner )  ;", "}", "METHOD_END"], "methodName": ["getModuleVersion"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedArtifact"}, {"methodBody": ["METHOD_START", "{", "children . add ( child )  ;", "child . parenadd ( this )  ;", "}", "METHOD_END"], "methodName": ["addChild"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedDependency"}, {"methodBody": ["METHOD_START", "{", "moduleArtifacts . add ( artifacts )  ;", "}", "METHOD_END"], "methodName": ["addModuleArtifacts"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedDependency"}, {"methodBody": ["METHOD_START", "{", "this . parentArtifacts . put ( parent ,    artifacts )  ;", "moduleArtifacts . add ( artifacts )  ;", "}", "METHOD_END"], "methodName": ["addParentSpecificArtifacts"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedDependency"}, {"methodBody": ["METHOD_START", "{", "if    (  ( allArtifactsCache . get ( parent )  )     =  =    null )     {", "Set < ResolvedArtifact >    allArtifacts    =    new   LinkedHashSet < ResolvedArtifact >  (  )  ;", "allArtifacts . addAll ( getArtifacts ( parent )  )  ;", "for    (    child    :    getChildren (  )  )     {", "for    (    childParent    :    child . getParents (  )  )     {", "allArtifacts . addAll ( child . getAllArtifacts ( childParent )  )  ;", "}", "}", "allArtifactsCache . put ( parent ,    allArtifacts )  ;", "}", "return   allArtifactsCache . get ( parent )  ;", "}", "METHOD_END"], "methodName": ["getAllArtifacts"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedDependency"}, {"methodBody": ["METHOD_START", "{", "if    (  ( allModuleArtifactsCache )     =  =    null )     {", "Set < ResolvedArtifact >    allArtifacts    =    new   LinkedHashSet < ResolvedArtifact >  (  )  ;", "allArtifacts . addAll ( getModuleArtifacts (  )  )  ;", "for    (    child    :    getChildren (  )  )     {", "allArtifacts . addAll ( child . getAllModuleArtifacts (  )  )  ;", "}", "allModuleArtifactsCache    =    allArtifacts ;", "}", "return   allModuleArtifactsCache ;", "}", "METHOD_END"], "methodName": ["getAllModuleArtifacts"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedDependency"}, {"methodBody": ["METHOD_START", "{", "return   getParentArtifacts ( parent )  ;", "}", "METHOD_END"], "methodName": ["getArtifacts"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedDependency"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( parents . contains ( parent )  )  )     {", "throw   new   InvalidUserDataException (  (  (  (  \" Provided   dependency    (  \"     +    parent )     +     \"  )    must   be   a   parent   of :     \"  )     +     ( this )  )  )  ;", "}", "return   CompositeResolvedArtifactSet . of ( parentArtifacts . get (  (  (  )     ( parent )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getArtifactsForIncomingEdge"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedDependency"}, {"methodBody": ["METHOD_START", "{", "return   ImmutableSet .  < ResolvedDependency > copyOf ( children )  ;", "}", "METHOD_END"], "methodName": ["getChildren"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedDependency"}, {"methodBody": ["METHOD_START", "{", "return   resolvedConfigId . getConfiguration (  )  ;", "}", "METHOD_END"], "methodName": ["getConfiguration"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedDependency"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultResolvedModuleVersion ( resolvedConfigId . getId (  )  )  ;", "}", "METHOD_END"], "methodName": ["getModule"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedDependency"}, {"methodBody": ["METHOD_START", "{", "return   sort ( CompositeResolvedArtifactSet . of ( moduleArtifacts )  )  ;", "}", "METHOD_END"], "methodName": ["getModuleArtifacts"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedDependency"}, {"methodBody": ["METHOD_START", "{", "return   resolvedConfigId . getModuleGroup (  )  ;", "}", "METHOD_END"], "methodName": ["getModuleGroup"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedDependency"}, {"methodBody": ["METHOD_START", "{", "return   resolvedConfigId . getModuleName (  )  ;", "}", "METHOD_END"], "methodName": ["getModuleName"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedDependency"}, {"methodBody": ["METHOD_START", "{", "return   resolvedConfigId . getModuleVersion (  )  ;", "}", "METHOD_END"], "methodName": ["getModuleVersion"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedDependency"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedDependency"}, {"methodBody": ["METHOD_START", "{", "return   sort ( getArtifactsForIncomingEdge (  (  ( DependencyGraphNodeResult )     ( parent )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getParentArtifacts"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedDependency"}, {"methodBody": ["METHOD_START", "{", "return   parents ;", "}", "METHOD_END"], "methodName": ["getParents"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedDependency"}, {"methodBody": ["METHOD_START", "{", "ArtifactCollectingVisitor   visitor    =    new   ArtifactCollectingVisitor ( new   TreeSet < ResolvedArtifact >  ( new   DefaultResolvedDependency . ResolvedArtifactComparator (  )  )  )  ;", "ParallelResolveArtifactSet . wrap ( artifacts ,    buildOperationProcessor )  . visit ( visitor )  ;", "return   visitor . getArtifacts (  )  ;", "}", "METHOD_END"], "methodName": ["sort"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedDependency"}, {"methodBody": ["METHOD_START", "{", "return    (  ( name )     +     \"  ;  \"  )     +     ( getConfiguration (  )  )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedDependency"}, {"methodBody": ["METHOD_START", "{", "DefaultResolvedDependency   parent    =    new   DefaultResolvedDependency (  1  0 L ,    DefaultResolvedDependencyTest . newId (  \" someGroup \"  ,    parentName ,     \" someVersion \"  ,     \" someConfiguration \"  )  ,    buildOperationProcessor )  ;", "resolvedDependency . getParents (  )  . add ( parent )  ;", "resolvedDependency . addParentSpecificArtifacts ( parent ,    TestArtifactSet . create ( EMPTY ,    parentSpecificArtifacts )  )  ;", "return   parent ;", "}", "METHOD_END"], "methodName": ["createAndAddParent"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedDependencyTest"}, {"methodBody": ["METHOD_START", "{", "return   DefaultResolvedDependencyTest . createResolvedArtifact ( context ,    name ,     \" someType \"  ,     \" someExt \"  ,    new   File (  (  \" pathTo \"     +    name )  )  )  ;", "}", "METHOD_END"], "methodName": ["createArtifact"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedDependencyTest"}, {"methodBody": ["METHOD_START", "{", "final   IvyArtifactName   artifactStub    =    context . mock ( IvyArtifactName . class ,     (  \" artifact \"     +    name )  )  ;", "context . checking ( new   Expectations (  )     {", "{", "allowing ( artifactStub )  . getName (  )  ;", "will ( returnValue ( name )  )  ;", "allowing ( artifactStub )  . getType (  )  ;", "will ( returnValue ( type )  )  ;", "allowing ( artifactStub )  . getExtension (  )  ;", "will ( returnValue ( extension )  )  ;", "allowing ( artifactStub )  . getClassifier (  )  ;", "will ( returnValue ( null )  )  ;", "}", "}  )  ;", "final   Factory   artifactSource    =    context . mock ( Factory . class )  ;", "context . checking ( new   Expectations (  )     {", "{", "allowing ( artifactSource )  . create (  )  ;", "will ( returnValue ( file )  )  ;", "}", "}  )  ;", "final      resolvedDependency    =    context . mock (  . class )  ;", "final   ResolvedModuleVersion   version    =    context . mock ( ResolvedModuleVersion . class )  ;", "context . checking ( new   Expectations (  )     {", "{", "allowing ( resolvedDependency )  . getModule (  )  ;", "will ( returnValue ( version )  )  ;", "allowing ( version )  . getId (  )  ;", "will ( returnValue ( new   DefaultModuleVersionIdentifier (  \" group \"  ,    name ,     \"  1  .  2  \"  )  )  )  ;", "}", "}  )  ;", "return   new   DefaultResolvedArtifact ( resolvedDependency . getModule (  )  . getId (  )  ,    artifactStub ,    context . mock ( ComponentArtifactIdentifier . class )  ,    context . mock ( TaskDependency . class )  ,    artifactSource )  ;", "}", "METHOD_END"], "methodName": ["createResolvedArtifact"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedDependencyTest"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultResolvedDependency (  1  2 L ,    DefaultResolvedDependencyTest . newId (  \" someGroup \"  ,     \" someName \"  ,     \" someVersion \"  ,     \" someConfiguration \"  )  ,    buildOperationProcessor )  ;", "}", "METHOD_END"], "methodName": ["createResolvedDependency"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedDependencyTest"}, {"methodBody": ["METHOD_START", "{", "DefaultResolvedDependency   dependency    =    new   DefaultResolvedDependency (  1 L ,    DefaultResolvedDependencyTest . newId (  \" group \"  ,     \" name \"  ,     \" version \"  ,     \" config \"  )  ,    buildOperationProcessor )  ;", "DefaultResolvedDependency   same    =    new   DefaultResolvedDependency (  1 L ,    DefaultResolvedDependencyTest . newId (  \" group \"  ,     \" name \"  ,     \" version \"  ,     \" config \"  )  ,    buildOperationProcessor )  ;", "DefaultResolvedDependency   differentGroup    =    new   DefaultResolvedDependency (  1 L ,    DefaultResolvedDependencyTest . newId (  \" other \"  ,     \" name \"  ,     \" version \"  ,     \" config \"  )  ,    buildOperationProcessor )  ;", "DefaultResolvedDependency   differentName    =    new   DefaultResolvedDependency (  1 L ,    DefaultResolvedDependencyTest . newId (  \" group \"  ,     \" other \"  ,     \" version \"  ,     \" config \"  )  ,    buildOperationProcessor )  ;", "DefaultResolvedDependency   differentVersion    =    new   DefaultResolvedDependency (  1 L ,    DefaultResolvedDependencyTest . newId (  \" group \"  ,     \" name \"  ,     \" other \"  ,     \" config \"  )  ,    buildOperationProcessor )  ;", "DefaultResolvedDependency   differentConfiguration    =    new   DefaultResolvedDependency (  1 L ,    DefaultResolvedDependencyTest . newId (  \" group \"  ,     \" name \"  ,     \" version \"  ,     \" other \"  )  ,    buildOperationProcessor )  ;", "assertThat ( dependency ,    Matchers . strictlyEqual ( same )  )  ;", "assertThat ( dependency ,    not ( equalTo ( differentGroup )  )  )  ;", "assertThat ( dependency ,    not ( equalTo ( differentName )  )  )  ;", "assertThat ( dependency ,    not ( equalTo ( differentVersion )  )  )  ;", "assertThat ( dependency ,    not ( equalTo ( differentConfiguration )  )  )  ;", "}", "METHOD_END"], "methodName": ["equalsAndHashCode"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedDependencyTest"}, {"methodBody": ["METHOD_START", "{", "DefaultResolvedDependency   resolvedDependency    =    createResolvedDependency (  )  ;", "Set < ResolvedArtifact >    parent 1 SpecificArtifacts    =    newHashSet ( createArtifact (  \" parent 1 Specific \"  )  )  ;", "DefaultResolvedDependency   parentResolvedDependency 1     =    createAndAddParent (  \" parent 1  \"  ,    resolvedDependency ,    parent 1 SpecificArtifacts )  ;", "createAndAddParent (  \" parent 2  \"  ,    resolvedDependency ,    newHashSet ( createArtifact (  \" parent 2 Specific \"  )  )  )  ;", "DefaultResolvedDependency   child    =    new   DefaultResolvedDependency (  1  0 L ,     . newId (  \" someGroup \"  ,     \" someChild \"  ,     \" someVersion \"  ,     \" someChildConfiguration \"  )  ,    buildOperationProcessor )  ;", "resolvedDependency . addChild ( child )  ;", "Set < ResolvedArtifact >    childParent 1 SpecificArtifacts    =    newHashSet ( createArtifact (  \" childParent 1 Specific \"  )  )  ;", "createAndAddParent (  \" childParent 1  \"  ,    child ,    childParent 1 SpecificArtifacts )  ;", "Set < ResolvedArtifact >    childParent 2 SpecificArtifacts    =    newHashSet ( createArtifact (  \" childParent 2 Specific \"  )  )  ;", "createAndAddParent (  \" childParent 2  \"  ,    child ,    childParent 2 SpecificArtifacts )  ;", "Iterable < ResolvedArtifact >    allArtifacts    =    newHashSet ( concat ( parent 1 SpecificArtifacts ,    childParent 1 SpecificArtifacts ,    childParent 2 SpecificArtifacts )  )  ;", "assertThat ( resolvedDependency . getAllArtifacts ( parentResolvedDependency 1  )  ,    equalTo ( allArtifacts )  )  ;", "}", "METHOD_END"], "methodName": ["getAllArtifacts"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedDependencyTest"}, {"methodBody": ["METHOD_START", "{", "ResolvedArtifact   artifact 1     =    createArtifact (  \"  1  \"  )  ;", "ResolvedArtifact   artifact 2     =    createArtifact (  \"  2  \"  )  ;", "DefaultResolvedDependency   resolvedDependency    =    new   DefaultResolvedDependency (  1  2 L ,     . newId (  \" someGroup \"  ,     \" someName \"  ,     \" someVersion \"  ,     \" someConfiguration \"  )  ,    buildOperationProcessor )  ;", "DefaultResolvedDependency   parent 1     =    new   DefaultResolvedDependency (  1  4 L ,     . newId (  \" someGroup \"  ,     \" someChild \"  ,     \" someVersion \"  ,     \" p 1  \"  )  ,    buildOperationProcessor )  ;", "parent 1  . addChild ( resolvedDependency )  ;", "DefaultResolvedDependency   parent 2     =    new   DefaultResolvedDependency (  1  6 L ,     . newId (  \" someGroup \"  ,     \" someChild \"  ,     \" someVersion \"  ,     \" p 2  \"  )  ,    buildOperationProcessor )  ;", "parent 2  . addChild ( resolvedDependency )  ;", "resolvedDependency . addParentSpecificArtifacts ( parent 1  ,    TestArtifactSet . create ( EMPTY ,    Collections . singleton ( artifact 2  )  )  )  ;", "resolvedDependency . addParentSpecificArtifacts ( parent 2  ,    TestArtifactSet . create ( EMPTY ,    Arrays . asList ( artifact 1  ,    artifact 2  )  )  )  ;", "assertThat ( resolvedDependency . getAllModuleArtifacts (  )  ,    equalTo ( WrapUtil . toSet ( artifact 1  ,    artifact 2  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getAllModuleArtifactsReturnsUnionOfAllIncomingArtifacts"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedDependencyTest"}, {"methodBody": ["METHOD_START", "{", "DefaultResolvedDependency   resolvedDependency    =    createResolvedDependency (  )  ;", "Set < ResolvedArtifact >    parent 1 SpecificArtifacts    =    WrapUtil . toSet ( createArtifact (  \" parent 1 Specific \"  )  )  ;", "DefaultResolvedDependency   parentResolvedDependency 1     =    createAndAddParent (  \" parent 1  \"  ,    resolvedDependency ,    parent 1 SpecificArtifacts )  ;", "assertThat ( resolvedDependency . getArtifacts ( parentResolvedDependency 1  )  ,    equalTo ( parent 1 SpecificArtifacts )  )  ;", "}", "METHOD_END"], "methodName": ["getArtifacts"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedDependencyTest"}, {"methodBody": ["METHOD_START", "{", "DefaultResolvedDependency   resolvedDependency    =    createResolvedDependency (  )  ;", "DefaultResolvedDependency   parent    =    new   DefaultResolvedDependency (  1  0 L ,     . newId (  \" someGroup \"  ,     \" parent \"  ,     \" someVersion \"  ,     \" someConfiguration \"  )  ,    buildOperationProcessor )  ;", "resolvedDependency . getParents (  )  . add ( parent )  ;", "assertThat ( resolvedDependency . getArtifacts ( parent )  ,    equalTo ( Collections .  < ResolvedArtifact > emptySet (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getArtifactsWithParentWithoutParentArtifacts"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedDependencyTest"}, {"methodBody": ["METHOD_START", "{", "Set < ResolvedArtifact >    someModuleArtifacts    =    WrapUtil . toSet ( createArtifact (  \" someModuleResolvedArtifact \"  )  )  ;", "DefaultResolvedDependency   resolvedDependency    =    createResolvedDependency (  )  ;", "DefaultResolvedDependency   unknownParent    =    new   DefaultResolvedDependency (  1  0 L ,     . newId (  \" someGroup \"  ,     \" parent 2  \"  ,     \" someVersion \"  ,     \" someConfiguration \"  )  ,    buildOperationProcessor )  ;", "assertThat ( resolvedDependency . getParentArtifacts ( unknownParent )  ,    equalTo ( someModuleArtifacts )  )  ;", "}", "METHOD_END"], "methodName": ["getArtifactsWithUnknownParent"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedDependencyTest"}, {"methodBody": ["METHOD_START", "{", "DefaultResolvedDependency   resolvedDependency    =    createResolvedDependency (  )  ;", "Set < ResolvedArtifact >    parent 1 SpecificArtifacts    =    WrapUtil . toSet ( createArtifact (  \" parent 1 Specific \"  )  )  ;", "DefaultResolvedDependency   parentResolvedDependency 1     =    createAndAddParent (  \" parent 1  \"  ,    resolvedDependency ,    parent 1 SpecificArtifacts )  ;", "Set < ResolvedArtifact >    parent 2 SpecificArtifacts    =    WrapUtil . toSet ( createArtifact (  \" parent 2 Specific \"  )  )  ;", "DefaultResolvedDependency   parentResolvedDependency 2     =    createAndAddParent (  \" parent 2  \"  ,    resolvedDependency ,    parent 2 SpecificArtifacts )  ;", "assertThat ( resolvedDependency . getParentArtifacts ( parentResolvedDependency 1  )  ,    equalTo ( parent 1 SpecificArtifacts )  )  ;", "assertThat ( resolvedDependency . getParentArtifacts ( parentResolvedDependency 2  )  ,    equalTo ( parent 2 SpecificArtifacts )  )  ;", "}", "METHOD_END"], "methodName": ["getParentArtifacts"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedDependencyTest"}, {"methodBody": ["METHOD_START", "{", "DefaultResolvedDependency   resolvedDependency    =    createResolvedDependency (  )  ;", "DefaultResolvedDependency   parent    =    new   DefaultResolvedDependency (  1  0 L ,     . newId (  \" someGroup \"  ,     \" parent \"  ,     \" someVersion \"  ,     \" someConfiguration \"  )  ,    buildOperationProcessor )  ;", "resolvedDependency . getParents (  )  . add ( parent )  ;", "assertThat ( resolvedDependency . getParentArtifacts ( parent )  ,    equalTo ( Collections .  < ResolvedArtifact > emptySet (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getParentArtifactsWithParentWithoutParentArtifacts"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedDependencyTest"}, {"methodBody": ["METHOD_START", "{", "DefaultResolvedDependency   resolvedDependency    =    createResolvedDependency (  )  ;", "DefaultResolvedDependency   unknownParent    =    new   DefaultResolvedDependency (  1  0 L ,     . newId (  \" someGroup \"  ,     \" parent 2  \"  ,     \" someVersion \"  ,     \" someConfiguration \"  )  ,    buildOperationProcessor )  ;", "assertThat ( resolvedDependency . getParentArtifacts ( unknownParent )  ,    equalTo ( Collections .  < ResolvedArtifact > emptySet (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getParentArtifactsWithUnknownParent"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedDependencyTest"}, {"methodBody": ["METHOD_START", "{", "String   someGroup    =     \" someGroup \"  ;", "String   someName    =     \" someName \"  ;", "String   someVersion    =     \" someVersion \"  ;", "String   someConfiguration    =     \" someConfiguration \"  ;", "DefaultResolvedDependency   resolvedDependency    =    new   DefaultResolvedDependency (  1  2 L ,     . newId ( someGroup ,    someName ,    someVersion ,    someConfiguration )  ,    buildOperationProcessor )  ;", "assertThat ( resolvedDependency . getName (  )  ,    equalTo (  (  (  (  ( someGroup    +     \"  :  \"  )     +    someName )     +     \"  :  \"  )     +    someVersion )  )  )  ;", "assertThat ( resolvedDependency . getModuleGroup (  )  ,    equalTo ( someGroup )  )  ;", "assertThat ( resolvedDependency . getModuleName (  )  ,    equalTo ( someName )  )  ;", "assertThat ( resolvedDependency . getModuleVersion (  )  ,    equalTo ( someVersion )  )  ;", "assertThat ( resolvedDependency . getConfiguration (  )  ,    equalTo ( someConfiguration )  )  ;", "assertThat ( resolvedDependency . getModuleArtifacts (  )  ,    equalTo ( Collections .  < ResolvedArtifact > emptySet (  )  )  )  ;", "assertThat ( resolvedDependency . getChildren (  )  ,    equalTo ( Collections .  < ResolvedDependency > emptySet (  )  )  )  ;", "assertThat ( resolvedDependency . getParents (  )  ,    equalTo ( Collections .  < ResolvedDependency > emptySet (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["init"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedDependencyTest"}, {"methodBody": ["METHOD_START", "{", "return   new   ResolvedConfigurationIdentifier ( new   DefaultModuleVersionIdentifier ( group ,    name ,    version )  ,    config )  ;", "}", "METHOD_END"], "methodName": ["newId"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolvedDependencyTest"}, {"methodBody": ["METHOD_START", "{", "if    (  ( resolvedConfiguration )     =  =    null )     {", "throw   new   IllegalStateException (  \" Resolution      have   not   been   attached .  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertHasArtifactResult"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolverResults"}, {"methodBody": ["METHOD_START", "{", "if    (  ( fatalFailure )     !  =    null )     {", "throw   fatalFailure ;", "}", "if    (  ( rdLocalComponentsResult )     =  =    null )     {", "throw   new   IllegalStateException (  \" Resolution   result   has   not   been   attached .  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertHasGraphResult"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolverResults"}, {"methodBody": ["METHOD_START", "{", "if    (  ( fatalFailure )     !  =    null )     {", "throw   fatalFailure ;", "}", "if    (  ( visitedA )     =  =    null )     {", "throw   new   IllegalStateException (  \" Resolution   result   has   not   been   attached .  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertHasVisitResult"], "fileName": "org.gradle.api.internal.artifacts.DefaultResolverResults"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultArtifactDependencyResolver ( buildOperationExecutor ,    resolverFactories ,    resolveIvyFactory ,    dependencyDescriptorFactory ,    versionComparator ,    moduleExclusions ,    componentSelectorConverter ,    attributesFactory )  ;", "}", "METHOD_END"], "methodName": ["createArtifactDependencyResolver"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementBuildScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   ArtifactIdentifierFileStore ( artifactCacheMetadata . getFileStoreDirectory (  )  ,    new   TmpDirTemporaryFileProvider (  )  )  ;", "}", "METHOD_END"], "methodName": ["createArtifactRevisionIdFileStore"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementBuildScopeServices"}, {"methodBody": ["METHOD_START", "{", "LocallyAvailableResourceFinderFactory   finderFactory    =    new   LocallyAvailableResourceFinderFactory ( artifactCacheMetadata ,    localMavenRepositoryLocator ,    fileStore )  ;", "return   finderFactory . create (  )  ;", "}", "METHOD_END"], "methodName": ["createArtifactRevisionIdLocallyAvailableResourceFinder"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementBuildScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   ByUrlCachedExternalResourceIndex (  \" resource - at - url \"  ,    timeProvider ,    cacheLockingManager )  ;", "}", "METHOD_END"], "methodName": ["createArtifactUrlCachedResolutionIndex"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementBuildScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   AttributeContainerSerializer ( attributesFactory ,    NamedObjectInstantiator . INSTANCE )  ;", "}", "METHOD_END"], "methodName": ["createAttributeContainerSerializer"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementBuildScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   BuildCommencedTimeProvider (  )  ;", "}", "METHOD_END"], "methodName": ["createBuildTimeProvider"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementBuildScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultComponentIdentifierFactory ( buildIdentity )  ;", "}", "METHOD_END"], "methodName": ["createComponentIdentifierFactory"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementBuildScopeServices"}, {"methodBody": ["METHOD_START", "{", "DefaultProjectDependencyFactory   factory    =    new   DefaultProjectDependencyFactory ( projectAccessListener ,    instantiator ,    startParameter . isBuildProjectDependencies (  )  )  ;", "ProjectDependencyFactory   projectDependencyFactory    =    new   ProjectDependencyFactory ( factory )  ;", "return   new   DefaultDependencyFactory ( DependencyNotationParser . parser ( instantiator ,    factory ,    classPathRegistry ,    fileLookup ,    runtimeShadedJarFactory ,    currentGradleInstallation )  ,    DependencyConstraintNotationParser . parser ( instantiator )  ,    new   ClientModuleNotationParserFactory ( instantiator )  . create (  )  ,    projectDependencyFactory ,    attributesFactory )  ;", "}", "METHOD_END"], "methodName": ["createDependencyFactory"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementBuildScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultDependencyManagementServices ( parent )  ;", "}", "METHOD_END"], "methodName": ["createDependencyManagementServices"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementBuildScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   ExternalResourceFileStore ( artifactCacheMetadata . getExternalResourcesStoreDirectory (  )  ,    new   TmpDirTemporaryFileProvider (  )  )  ;", "}", "METHOD_END"], "methodName": ["createExternalResourceFileStore"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementBuildScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultLocalComponentRegistry ( providers )  ;", "}", "METHOD_END"], "methodName": ["createLocalComponentRegistry"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementBuildScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultLocalMavenRepositoryLocator ( mavenSettingsProvider )  ;", "}", "METHOD_END"], "methodName": ["createLocalMavenRepositoryLocator"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementBuildScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultMavenSettingsProvider ( new   DefaultMavenFileLocations (  )  )  ;", "}", "METHOD_END"], "methodName": ["createMavenSettingsProvider"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementBuildScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   ModuleExclusions ( moduleIdentifierFactory )  ;", "}", "METHOD_END"], "methodName": ["createModuleExclusions"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementBuildScopeServices"}, {"methodBody": ["METHOD_START", "{", "ModuleRepositoryCaches   caches    =    new   ModuleRepositoryCaches ( new   DefaultModuleVersionsCache ( timeProvider ,    cacheLockingManager ,    moduleIdentifierFactory )  ,    new   DefaultModuleMetadataCache ( timeProvider ,    cacheLockingManager ,    artifactCacheMetadata ,    moduleIdentifierFactory ,    attributeContainerSerializer ,    mavenMetadataFactory ,    ivyMetadataFactory )  ,    new   DefaultModuleArtifactsCache ( timeProvider ,    cacheLockingManager )  ,    new   DefaultModuleArtifactCache (  \" module - artifact \"  ,    timeProvider ,    cacheLockingManager )  )  ;", "ModuleRepositoryCaches   inMemoryCaches    =    new   ModuleRepositoryCaches ( new   InMemoryModuleVersionsCache ( timeProvider )  ,    new   InMemoryModuleMetadataCache ( timeProvider )  ,    new   InMemoryModuleArtifactsCache ( timeProvider )  ,    new   InMemoryModuleArtifactCache ( timeProvider )  )  ;", "return   new   ModuleRepositoryCacheProvider ( caches ,    inMemoryCaches )  ;", "}", "METHOD_END"], "methodName": ["createModuleRepositoryCacheProvider"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementBuildScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultComponentSelectorConverter ( moduleIdentifierFactory ,    componentIdentifierFactory ,    localComponentRegistry )  ;", "}", "METHOD_END"], "methodName": ["createModuleVersionSelectorFactory"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementBuildScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   IvyMutableModuleMetadataFactory ( moduleIdentifierFactory ,    attributesFactory )  ;", "}", "METHOD_END"], "methodName": ["createMutableIvyMetadataFactory"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementBuildScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   MavenMutableModuleMetadataFactory ( moduleIdentifierFactory ,    attributesFactory ,    NamedObjectInstantiator . INSTANCE ,    featurePreviews )  ;", "}", "METHOD_END"], "methodName": ["createMutableMavenMetadataFactory"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementBuildScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultProjectLocalComponentProvider ( projectRegistry ,    metaDataBuilder ,    moduleIdentifierFactory ,    buildIdentity . getCurrentBuild (  )  )  ;", "}", "METHOD_END"], "methodName": ["createProjectComponentProvider"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementBuildScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   ProjectDependencyResolver ( localComponentRegistry ,    componentIdentifierFactory ,    projectStateAccess )  ;", "}", "METHOD_END"], "methodName": ["createProjectDependencyResolver"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementBuildScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultProjectPublicationRegistry (  )  ;", "}", "METHOD_END"], "methodName": ["createProjectPublicationRegistry"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementBuildScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   ConnectionFailureRepositoryBlacklister (  )  ;", "}", "METHOD_END"], "methodName": ["createRepositoryBlacklister"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementBuildScopeServices"}, {"methodBody": ["METHOD_START", "{", "StartParameterResolutionOverride   startParameterResolutionOverride    =    new   StartParameterResolutionOverride ( startParameter )  ;", "return   new   RepositoryTransportFactory ( resourceConnectorFactories ,    progressLoggerFactory ,    temporaryFileProvider ,    exResourceIndex ,    buildCommencedTimeProvider ,    cacheLockingManager ,    buildOperationExecutor ,    startParameterResolutionOverride ,    producerGuard ,    fileResourceRepository )  ;", "}", "METHOD_END"], "methodName": ["createRepositoryTransportFactory"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementBuildScopeServices"}, {"methodBody": ["METHOD_START", "{", "StartParameterResolutionOverride   startParameterResolutionOverride    =    new   StartParameterResolutionOverride ( startParameter )  ;", "return   new   ResolveIvyFactory ( moduleRepositoryCacheProvider ,    startParameterResolutionOverride ,    bCommencedTimeProvider ,    versionSelectorScheme ,    versionComparator ,    moduleIdentifierFactory ,    repositoryBlacklister )  ;", "}", "METHOD_END"], "methodName": ["createResolveIvyFactory"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementBuildScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   RuntimeShadedJarFactory ( jarCache ,    progressLoggerFactory ,    buildOperationExecutor ,    directoryFileTreeFactory )  ;", "}", "METHOD_END"], "methodName": ["createRuntimeShadedJarFactory"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementBuildScopeServices"}, {"methodBody": ["METHOD_START", "{", "HashSet < String >    schemas    =    Sets . newHashSet (  \" https \"  ,     \" http \"  )  ;", "RepositoryTransport   transport    =    repositoryTransportFactory . createTransport ( schemas ,     \" http   auth \"  ,    Collections .  < Authentication > emptyList (  )  )  ;", "ExResourceAccessor   exResourceAccessor    =    new   DefaultExResourceAccessor ( resourceFileStore ,    transport . getResourceAccessor (  )  )  ;", "return   new   DefaultUriTextResourceLoader ( exResourceAccessor ,    schemas )  ;", "}", "METHOD_END"], "methodName": ["createTextResourceLoader"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementBuildScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   VcsDependencyResolver ( vcsWorkingDirectoryRoot ,    projectDependencyResolver ,    serviceRegistry ,    localComponentRegistry ,    vcsResolver ,    versionControlSystemFactory ,    versionSelectorScheme ,    versionComparator )  ;", "}", "METHOD_END"], "methodName": ["createVcsDependencyResolver"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementBuildScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   DependencyManagementBuildScopeServices . VcsOrProjectResolverProviderFactory ( vcsDependencyResolver ,    projectDependencyResolver ,    vcsResolver )  ;", "}", "METHOD_END"], "methodName": ["createVcsResolverProviderFactory"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementBuildScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   ResolutionResultsStoreFactory ( temporaryFileProvider )  ;", "}", "METHOD_END"], "methodName": ["createResolutionResultsStoreFactory"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementBuildTreeScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultDependencyDescriptorFactory ( new   ProjectIvyDependencyDescriptorFactory ( excludeRuleConverter )  ,    descriptorFactory )  ;", "}", "METHOD_END"], "methodName": ["createDependencyDescriptorFactory"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementGlobalScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultExcludeRuleConverter ( moduleIdentifierFactory )  ;", "}", "METHOD_END"], "methodName": ["createExcludeRuleConverter"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementGlobalScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   ExternalModuleIvyDependencyDescriptorFactory ( excludeRuleConverter )  ;", "}", "METHOD_END"], "methodName": ["createExternalModuleDependencyDescriptorFactory"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementGlobalScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   FileConnectorFactory (  )  ;", "}", "METHOD_END"], "methodName": ["createFileConnectorFactory"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementGlobalScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   FileResourceConnector ( fileSystem )  ;", "}", "METHOD_END"], "methodName": ["createFileResourceRepository"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementGlobalScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultIvyContextManager (  )  ;", "}", "METHOD_END"], "methodName": ["createIvyContextManager"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementGlobalScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultLocalComponentMetadataBuilder ( localConfigurationMetadataBuilder )  ;", "}", "METHOD_END"], "methodName": ["createLocalComponentMetaDataBuilder"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementGlobalScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultLocalConfigurationMetadataBuilder ( dependencyDescriptorFactory ,    excludeRuleConverter )  ;", "}", "METHOD_END"], "methodName": ["createLocalConfigurationMetadataBuilder"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementGlobalScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultImmutableModuleIdentifierFactory (  )  ;", "}", "METHOD_END"], "methodName": ["createModuleIdentifierFactory"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementGlobalScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   ProducerGuard . adaptive (  )  ;", "}", "METHOD_END"], "methodName": ["createProducerAccess"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementGlobalScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultVersionComparator (  )  ;", "}", "METHOD_END"], "methodName": ["createVersionComparator"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementGlobalScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultVersionSelectorScheme ( versionComparator )  ;", "}", "METHOD_END"], "methodName": ["createVersionSelectorScheme"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementGlobalScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultArtifactCacheMetadata ( cacheScopeMapping )  ;", "}", "METHOD_END"], "methodName": ["createArtifactCacheMetaData"], "fileName": "org.gradle.api.internal.artifacts.DependencyManagementGradleUserHomeScopeServices"}, {"methodBody": ["METHOD_START", "{", "registration . addProvider ( new   DependencyManagementGlobalScopeServices (  )  )  ;", "}", "METHOD_END"], "methodName": ["registerGlobalServices"], "fileName": "org.gradle.api.internal.artifacts.DependencyServices"}, {"methodBody": ["METHOD_START", "{", "String   group    =    decoder . readString (  )  ;", "String   name    =    decoder . readString (  )  ;", "VersionConstraint   versionConstraint    =    readVersionConstraint ( decoder )  ;", "return   Default . newSelector ( group ,    name ,    versionConstraint ,    EMPTY )  ;", "}", "METHOD_END"], "methodName": ["read"], "fileName": "org.gradle.api.internal.artifacts.ModuleComponentSelectorSerializer"}, {"methodBody": ["METHOD_START", "{", "String   preferred    =    decoder . readString (  )  ;", "int   cpt    =    decoder . readSmallInt (  )  ;", "List < String >    reje =    Lists . newArrayListWithCapacity ( cpt )  ;", "for    ( int   i    =     0  ;    i    <    cpt ;    i +  +  )     {", "rejeadd ( decoder . readString (  )  )  ;", "}", "return   new   DefaultImmutableVersionConstraint ( preferred ,    reje ;", "}", "METHOD_END"], "methodName": ["readVersionConstraint"], "fileName": "org.gradle.api.internal.artifacts.ModuleComponentSelectorSerializer"}, {"methodBody": ["METHOD_START", "{", "encoder . writeString ( group )  ;", "encoder . writeString ( m )  ;", "writeVersionConstraint ( encoder ,    version )  ;", "}", "METHOD_END"], "methodName": ["write"], "fileName": "org.gradle.api.internal.artifacts.ModuleComponentSelectorSerializer"}, {"methodBody": ["METHOD_START", "{", "encoder . writeString ( value . getGroup (  )  )  ;", "encoder . writeString ( value . get (  )  )  ;", "writeVersionConstraint ( encoder ,    value . getVersionConstraint (  )  )  ;", "}", "METHOD_END"], "methodName": ["write"], "fileName": "org.gradle.api.internal.artifacts.ModuleComponentSelectorSerializer"}, {"methodBody": ["METHOD_START", "{", "encoder . writeString ( cst . getPreferredVersion (  )  )  ;", "List < String >    rejedVersions    =    cst . getRejedVersions (  )  ;", "encoder . writeSmallInt ( rejedVersions . size (  )  )  ;", "for    ( String   rejedVersion    :    rejedVersions )     {", "encoder . writeString ( rejedVersion )  ;", "}", "}", "METHOD_END"], "methodName": ["writeVersionConstraint"], "fileName": "org.gradle.api.internal.artifacts.ModuleComponentSelectorSerializer"}, {"methodBody": ["METHOD_START", "{", "String   group    =    decoder . readString (  )  ;", "String   module    =    decoder . readString (  )  ;", "String   version    =    decoder . readString (  )  ;", "return   moduleFactory . moduleWithVersion ( group ,    module ,    version )  ;", "}", "METHOD_END"], "methodName": ["read"], "fileName": "org.gradle.api.internal.artifacts.ModuleVersionIdentifierSerializer"}, {"methodBody": ["METHOD_START", "{", "encoder . writeString ( value . getGroup (  )  )  ;", "encoder . writeString ( value . getName (  )  )  ;", "encoder . writeString ( value . get (  )  )  ;", "}", "METHOD_END"], "methodName": ["write"], "fileName": "org.gradle.api.internal.artifacts.ModuleVersionIdentifierSerializer"}, {"methodBody": ["METHOD_START", "{", "return   configuration ;", "}", "METHOD_END"], "methodName": ["getConfiguration"], "fileName": "org.gradle.api.internal.artifacts.ResolvedConfigurationIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.gradle.api.internal.artifacts.ResolvedConfigurationIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   id . getGroup (  )  ;", "}", "METHOD_END"], "methodName": ["getModuleGroup"], "fileName": "org.gradle.api.internal.artifacts.ResolvedConfigurationIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   id . getName (  )  ;", "}", "METHOD_END"], "methodName": ["getModuleName"], "fileName": "org.gradle.api.internal.artifacts.ResolvedConfigurationIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   id . getVersion (  )  ;", "}", "METHOD_END"], "methodName": ["getModuleVersion"], "fileName": "org.gradle.api.internal.artifacts.ResolvedConfigurationIdentifier"}, {"methodBody": ["METHOD_START", "{", "ModuleVersionIdentifier   id    =    idSerializer . read ( decoder )  ;", "String   configuration    =    decoder . readString (  )  ;", "return   new    ( id ,    configuration )  ;", "}", "METHOD_END"], "methodName": ["read"], "fileName": "org.gradle.api.internal.artifacts.ResolvedConfigurationIdentifierSerializer"}, {"methodBody": ["METHOD_START", "{", "idSerializer . write ( encoder ,    value . getId (  )  )  ;", "encoder . writeString ( value . get (  )  )  ;", "}", "METHOD_END"], "methodName": ["write"], "fileName": "org.gradle.api.internal.artifacts.ResolvedConfigurationIdentifierSerializer"}, {"methodBody": ["METHOD_START", "{", "return   new   TestArtifactSet ( variantName ,    variantAttributes ,    artifacts )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.api.internal.artifacts.TestArtifactSet"}, {"methodBody": ["METHOD_START", "{", "return   new   TestArtifactSet ( TestArtifactSet . DEFAULT _ TEST _ VARIANT ,    variantAttributes ,    artifacts )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.api.internal.artifacts.TestArtifactSet"}, {"methodBody": ["METHOD_START", "{", "String   projectPath    =    module . getProjectPath (  )  ;", "if    ( projectPath    !  =    null )     {", "return   new   DefaultProjec ( buildIdentity . getCurrentBuild (  )  ,    projectPath )  ;", "}", "return   new   DefaultModuleComponentIdentifier ( module . getGroup (  )  ,    module . getName (  )  ,    module . getVersion (  )  )  ;", "}", "METHOD_END"], "methodName": ["createComponentIdentifier"], "fileName": "org.gradle.api.internal.artifacts.component.DefaultComponentIdentifierFactory"}, {"methodBody": ["METHOD_START", "{", "if    ( visited . add ( configuration )  )     {", "out . addAll ( configuration . getOutgoing (  )  . getCapabilities (  )  )  ;", "for    ( Configuration   parent    :    configuration . getExtendsFrom (  )  )     {", "CcollectCapabilities ( parent ,    out ,    visited )  ;", "}", "}", "return   out ;", "}", "METHOD_END"], "methodName": ["collectCapabilities"], "fileName": "org.gradle.api.internal.artifacts.configurations.Configurations"}, {"methodBody": ["METHOD_START", "{", "return    ( configurationName . substring (  0  ,     1  )  . toUpperCase (  )  )     +     ( configurationName . substring (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["getCapitalName"], "fileName": "org.gradle.api.internal.artifacts.configurations.Configurations"}, {"methodBody": ["METHOD_START", "{", "if    ( configurations . isEmpty (  )  )     {", "return   Collections . emptySet (  )  ;", "} else", "if    (  ( configurations . size (  )  )     =  =     1  )     {", "return   Collections . singleton ( configurations . iterator (  )  . next (  )  . getName (  )  )  ;", "}", "Set < String >    names    =    new   LinkedHashSet < String >  ( configurations . size (  )  )  ;", "for    ( Configuration   configuration    :    configurations )     {", "names . add ( configuration . getName (  )  )  ;", "}", "return   names ;", "}", "METHOD_END"], "methodName": ["getNames"], "fileName": "org.gradle.api.internal.artifacts.configurations.Configurations"}, {"methodBody": ["METHOD_START", "{", "return    \" upload \"  . concat ( Configurations . getCapitalName ( configurationName )  )  ;", "}", "METHOD_END"], "methodName": ["uploadTaskName"], "fileName": "org.gradle.api.internal.artifacts.configurations.Configurations"}, {"methodBody": ["METHOD_START", "{", "assertThat ( Configurations . uploadTaskName ( ConfigurationsTest . TEST _ CONF )  ,    Matchers . equalTo (  \" uploadTestConf \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testUploadTaskName"], "fileName": "org.gradle.api.internal.artifacts.configurations.ConfigurationsTest"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( canBeResolved )  )     {", "throw   new   IllegalStateException (  (  (  \" Resolving       '  \"     +     ( name )  )     +     \"  '    directly   is   not   allowed \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertResolvingAllowed"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "for    ( Configuration   superConfig    :    configuration . getExtendsFrom (  )  )     {", "if    ( result . contains ( superConfig )  )     {", "result . remove ( superConfig )  ;", "}", "result . add ( superConfig )  ;", "collectSuperConfigs ( superConfig ,    result )  ;", "}", "}", "METHOD_END"], "methodName": ["collectSuperConfigs"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   createCopy ( getDependencies (  )  ,    getDependencyConstraints (  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["copy"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   copy ( Specs .  < Dependency > convertClosureToSpec ( dependencySpec )  )  ;", "}", "METHOD_END"], "methodName": ["copy"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   createCopy ( CollectionUtils . filter ( getDependencies (  )  ,    dependencySpec )  ,    getDependencyConstraints (  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["copy"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   createCopy ( getAllDependencies (  )  ,    getAllDependencyConstraints (  )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["copyRecursive"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   copyRecursive ( Specs .  < Dependency > convertClosureToSpec ( dependencySpec )  )  ;", "}", "METHOD_END"], "methodName": ["copyRecursive"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   createCopy ( CollectionUtils . filter ( getAllDependencies (  )  ,    dependencySpec )  ,    getAllDependencyConstraints (  )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["copyRecursive"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "DetachedConfigurationsProvider   configurationsProvider    =    new   DetachedConfigurationsProvider (  )  ;", "RootComponentMetadataBuilder   rootComponentMetadataBuilder    =    this . rootComponentMetadataBuilder . withConfigurationsProvider ( configurationsProvider )  ;", "String   newName    =     ( name )     +     \" Copy \"  ;", "Factory < ResolutionStrategyInternal >    childResolutionStrategy    =     (  ( resolutionStrategy )     !  =    null )     ?    Factories . constant ( resolutionStrategy . copy (  )  )     :    resolutionStrategyFactory ;", "DefaultConfiguration   copiedConfiguration    =    instantiator . newInstance ( DefaultConfiguration . class ,    domainObjectContext ,    newName ,    configurationsProvider ,    resolver ,    listenerManager ,    metaDataProvider ,    childResolutionStrategy ,    projectAccessListener ,    projectFinder ,    fileCollectionFactory ,    buildOperationExecutor ,    instantiator ,    artifactNotationParser ,    capabilityNotationParser ,    attributesFactory ,    rootComponentMetadataBuilder )  ;", "configurationsProvider . setTheOnlyConfiguration ( copiedConfiguration )  ;", "copiedConfiguration . visible    =    visible ;", "copiedConfiguration . transitive    =    transitive ;", "copiedConfiguration . description    =    description ;", "copiedConfiguration . defaultDependencyActions    =    defaultDependencyActions ;", "copiedConfiguration . dependencyResolutionListeners    =    dependencyResolutionListeners ;", "copiedConfiguration . canBeConsumed    =    canBeConsumed ;", "copiedConfiguration . canBeResolved    =    canBeResolved ;", "copiedConfiguration . getArtifacts (  )  . addAll ( getAllArtifacts (  )  )  ;", "if    (  !  ( configurationAttributes . isEmpty (  )  )  )     {", "for    ( Attribute <  ?  >    attribute    :    configurationAttributes . keySet (  )  )     {", "Object   value    =    configurationAttributes . getAttribute ( attribute )  ;", "copiedConfiguration . getAttributes (  )  . attribute ( Cast .  < Attribute < Object >  > uncheckedCast ( attribute )  ,    value )  ;", "}", "}", "Set < Configuration >    excludeRuleSources    =    new   LinkedHashSet < Configuration >  (  )  ;", "excludeRuleSources . add ( this )  ;", "if    ( recursive )     {", "excludeRuleSources . addAll ( getHierarchy (  )  )  ;", "}", "for    ( Configuration   excludeRuleSource    :    excludeRuleSources )     {", "for    ( ExcludeRule   excludeRule    :    excludeRuleSource . getExcludeRules (  )  )     {", "copiedConfiguration . excludeRules . add ( new   DefaultExcludeRule ( excludeRule . getGroup (  )  ,    excludeRule . getModule (  )  )  )  ;", "}", "}", "DomainObjectSet < Dependency >    copiedDependencies    =    copiedConfiguration . getDependencies (  )  ;", "for    ( Dependency   dependency    :    dependencies )     {", "copiedDependencies . add ( dependency . copy (  )  )  ;", "}", "DomainObjectSet < DependencyConstraint >    copiedDependencyConstraints    =    copiedConfiguration . getDependencyConstraints (  )  ;", "for    ( DependencyConstraint   dependencyConstraint    :    dependencyConstraints )     {", "copiedDependencyConstraints . add (  (  ( DefaultDependencyConstraint )     ( dependencyConstraint )  )  . copy (  )  )  ;", "}", "return   copiedConfiguration ;", "}", "METHOD_END"], "methodName": ["createCopy"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   reply    =    new   StringBuilder (  )  ;", "reply . append (  \"  \\ n :  \"  )  ;", "reply . append (  (  (  \"       class =  '  \"     +     ( this . getClass (  )  )  )     +     \"  '  \"  )  )  ;", "reply . append (  (  (  \"       name =  '  \"     +     ( this . getName (  )  )  )     +     \"  '  \"  )  )  ;", "reply . append (  (  (  \"       hashcode =  '  \"     +     ( this . hashCode (  )  )  )     +     \"  '  \"  )  )  ;", "reply . append (  \"  \\ nLocal   Dependencies :  \"  )  ;", "if    (  ( getDependencies (  )  . size (  )  )     >     0  )     {", "for    ( Dependency   d    :    getDependencies (  )  )     {", "reply . append (  (  \"  \\ n          \"     +    d )  )  ;", "}", "} else    {", "reply . append (  \"  \\ n         none \"  )  ;", "}", "reply . append (  \"  \\ nLocal   Artifacts :  \"  )  ;", "if    (  ( getArtifacts (  )  . size (  )  )     >     0  )     {", "for    ( PublishArtifact   a    :    getArtifacts (  )  )     {", "reply . append (  (  \"  \\ n          \"     +    a )  )  ;", "}", "} else    {", "reply . append (  \"  \\ n         none \"  )  ;", "}", "reply . append (  \"  \\ nAll   Dependencies :  \"  )  ;", "if    (  ( getAllDependencies (  )  . size (  )  )     >     0  )     {", "for    ( Dependency   d    :    getAllDependencies (  )  )     {", "reply . append (  (  \"  \\ n          \"     +    d )  )  ;", "}", "} else    {", "reply . append (  \"  \\ n         none \"  )  ;", "}", "reply . append (  \"  \\ nAll   Artifacts :  \"  )  ;", "if    (  ( getAllArtifacts (  )  . size (  )  )     >     0  )     {", "for    ( PublishArtifact   a    :    getAllArtifacts (  )  )     {", "reply . append (  (  \"  \\ n          \"     +    a )  )  ;", "}", "} else    {", "reply . append (  \"  \\ n         none \"  )  ;", "}", "return   reply . toString (  )  ;", "}", "METHOD_END"], "methodName": ["dump"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "validateMutation ( MutationValidator . MutationType . DEPENDENCIES )  ;", "excludeRules . add ( ExcludeRuleNotationConverter . parser (  )  . parseNotation ( excludeRuleArgs )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["exclude"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "validateMutation ( MutationValidator . MutationType . DEPENDENCIES )  ;", "for    ( Configuration   configuration    :    extendsFrom )     {", "if    ( configuration . getHierarchy (  )  . contains ( this )  )     {", "throw   new   InvalidUserDataException ( String . format (  \" Cyclic   extendsFrom   from    % s   and    % s   is   not   allowed .    See   existing   hierarchy :     % s \"  ,    this ,    configuration ,    configuration . getHierarchy (  )  )  )  ;", "}", "if    ( this . extendsFrom . add ( configuration )  )     {", "if    (  ( inheritedArtifacts )     !  =    null )     {", "inheritedArtifacts . addCollection ( configuration . getAllArtifacts (  )  )  ;", "}", "if    (  ( inheritedDependencies )     !  =    null )     {", "inheritedDependencies . addCollection ( configuration . getAllDependencies (  )  )  ;", "}", "if    (  ( inheritedDependencyConstraints )     !  =    null )     {", "inheritedDependencyConstraints . addCollection ( configuration . getAllDependencyConstraints (  )  )  ;", "}", "(  ( ConfigurationInternal )     ( configuration )  )  . addMutationValidator ( parentMutationValidator )  ;", "}", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["extendsFrom"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultConfiguration . ConfigurationFileCollection ( dependencySpecClosure )  ;", "}", "METHOD_END"], "methodName": ["fileCollection"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultConfiguration . ConfigurationFileCollection ( WrapUtil . toLinkedSet ( dependencies )  )  ;", "}", "METHOD_END"], "methodName": ["fileCollection"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultConfiguration . ConfigurationFileCollection ( dependencySpec )  ;", "}", "METHOD_END"], "methodName": ["fileCollection"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   fileCollection ( dependencySpecClosure )  . getFiles (  )  ;", "}", "METHOD_END"], "methodName": ["files"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   fileCollection ( dependencies )  . getFiles (  )  ;", "}", "METHOD_END"], "methodName": ["files"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   fileCollection ( dependencySpec )  . getFiles (  )  ;", "}", "METHOD_END"], "methodName": ["files"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   ImmutableSet .  < Configuration > copyOf ( configurationsProvider . getAll (  )  )  ;", "}", "METHOD_END"], "methodName": ["getAll"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "initAllArtifacts (  )  ;", "return   allArtifacts ;", "}", "METHOD_END"], "methodName": ["getAllArtifacts"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "if    (  ( allDependencies )     =  =    null )     {", "initAllDependencies (  )  ;", "}", "return   allDependencies ;", "}", "METHOD_END"], "methodName": ["getAllDependencies"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   artifacts ;", "}", "METHOD_END"], "methodName": ["getArtifacts"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "assertResolvingAllowed (  )  ;", "return   rinsicFiles . getBuildDependencies (  )  ;", "}", "METHOD_END"], "methodName": ["getBuildDependencies"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   dependencies ;", "}", "METHOD_END"], "methodName": ["getDependencies"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   description ;", "}", "METHOD_END"], "methodName": ["getDescription"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   displayName . getDisplayName (  )  ;", "}", "METHOD_END"], "methodName": ["getDisplayName"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   Collections . unmodifiableSet ( excludeRules )  ;", "}", "METHOD_END"], "methodName": ["getExcludeRules"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   Collections . unmodifiableSet ( extendsFrom )  ;", "}", "METHOD_END"], "methodName": ["getExtendsFrom"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "if    ( extendsFrom . isEmpty (  )  )     {", "return   Collections .  <  > singleton ( this )  ;", "}", "Set <  >    result    =    WrapUtil .  <  > toLinkedSet ( this )  ;", "collectSuperConfigs ( this ,    result )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["getHierarchy"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   resolvableDependencies ;", "}", "METHOD_END"], "methodName": ["getIncoming"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   metaDataProvider . getModule (  )  ;", "}", "METHOD_END"], "methodName": ["getModule"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   path . getPath (  )  ;", "}", "METHOD_END"], "methodName": ["getPath"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "if    (  ( resolutionStrategy )     =  =    null )     {", "resolutionStrategy    =    resolutionStrategyFactory . create (  )  ;", "resolutionStrategy . setMutValidator ( this )  ;", "resolutionStrategyFactory    =    null ;", "}", "return   resolutionStrategy ;", "}", "METHOD_END"], "methodName": ["getResolutionStrategy"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "resolveToStateOrLater ( ConfigurationInternal . InternalState . ARTIFACTS _ RESOLVED )  ;", "return   cachedResolverResults . getResolvedConfiguration (  )  ;", "}", "METHOD_END"], "methodName": ["getResolvedConfiguration"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   resolvedState ;", "}", "METHOD_END"], "methodName": ["getResolvedState"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "synchronized ( resolutionLock )     {", "if    (  (  ( resolvedState )     =  =     ( Internal . InternalState . ARTIFACTS _ RESOLVED )  )     |  |     (  ( resolvedState )     =  =     ( Internal . InternalState . GRAPH _ RESOLVED )  )  )     {", "if    ( cachedResolverResults . hasError (  )  )     {", "return   State . RESOLVED _ WITH _ FAILURES ;", "} else    {", "return   State . RESOLVED ;", "}", "} else    {", "return   State . UNRESOLVED ;", "}", "}", "}", "METHOD_END"], "methodName": ["getState"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "if    ( useDependedOn )     {", "return   new   TasksFromProjectDependencies ( taskName ,    getAllDependencies (  )  ,    projectAccessListener )  ;", "} else    {", "return   new   TasksFromDependentProje ( taskName ,    getName (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getTaskDependencyFromProjectDependency"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   Configurations . uploadTaskName ( getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["getUploadTaskName"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "if    (  ( allArtifacts )     !  =    null )     {", "return ;", "}", "this . inheritedArtifacts    =    CompositeDomainObjectSet . create ( PublishArtifact . class ,    ownArtifacts )  ;", "for    (    configuration    :    this . extendsFrom )     {", "inheritedArtifacts . addCollection ( configuration . getAllArtifacts (  )  )  ;", "}", "this . allArtifacts    =    new   DefaultPublishArtifactSet ( Describables . of ( displayName ,     \" all   artifacts \"  )  ,    inheritedArtifacts ,    fileCollectionFactory )  ;", "}", "METHOD_END"], "methodName": ["initAllArtifacts"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "if    (  ( allDependencies )     !  =    null )     {", "return ;", "}", "inheritedDependencies    =    CompositeDomainObjectSet . create ( Dependency . class ,    ownDependencies )  ;", "for    (    configuration    :    this . extendsFrom )     {", "inheritedDependencies . addCollection ( configuration . getAllDependencies (  )  )  ;", "}", "allDependencies    =    new   DefaultDependencySet ( Describables . of ( displayName ,     \" all   dependencies \"  )  ,    this ,    inheritedDependencies )  ;", "}", "METHOD_END"], "methodName": ["initAllDependencies"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "if    (  ( allDependencyConstraints )     !  =    null )     {", "return ;", "}", "inheritedDependencyConstraints    =    CompositeDomainObjectSet . create ( DependencyConstraint . class ,    ownDependencyConstraints )  ;", "for    (    configuration    :    this . extendsFrom )     {", "inheritedDependencyConstraints . addCollection ( configuration . getAllDependencyConstraints (  )  )  ;", "}", "allDependencyConstraints    =    new   DefaultDependencyConstraintSet ( Describables . of ( displayName ,     \" all   dependency   constraints \"  )  ,    inheritedDependencyConstraints )  ;", "}", "METHOD_END"], "methodName": ["initAllDependencyConstraints"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   transitive ;", "}", "METHOD_END"], "methodName": ["isTransitive"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   visible ;", "}", "METHOD_END"], "methodName": ["isVisible"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "if    ( type    =  =     ( MutationValidator . MutationType . DEPENDENCY _ ATTRIBUTES )  )     {", "return ;", "}", "if    ( type    =  =     ( MutationValidator . MutationType . STRATEGY )  )     {", "return ;", "}", "dependenciesModified    =    true ;", "}", "METHOD_END"], "methodName": ["markAsModified"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "markThisObserved ( requestedState )  ;", "markParentsObserved ( requestedState )  ;", "}", "METHOD_END"], "methodName": ["markAsObserved"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "for    ( Configuration   configuration    :    extendsFrom )     {", "(  ( ConfigurationInternal )     ( configuration )  )  . markAsObserved ( requestedState )  ;", "}", "}", "METHOD_END"], "methodName": ["markParentsObserved"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "for    ( ResolvedProjectConfiguration   projectResult    :    cachedResolverResults . getResolvedLocalComponents (  )  . getResolvedProjectConfigurations (  )  )     {", "ProjectInternal   project    =    projectFinder . getProject ( projectResult . getId (  )  . getProjectPath (  )  )  ;", "ConfigurationInternal   targetConfig    =     (  ( ConfigurationInternal )     ( project . getConfigurations (  )  . getByName ( projectResult . getTargetConfiguration (  )  )  )  )  ;", "targetConfig . markAsObserved ( requestedState )  ;", "}", "}", "METHOD_END"], "methodName": ["markReferencedProjectConfigurationsObserved"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "synchronized ( observationLock )     {", "if    (  ( observedState . compareTo ( requestedState )  )     <     0  )     {", "observedState    =    requestedState ;", "}", "}", "}", "METHOD_END"], "methodName": ["markThisObserved"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "for    ( MutationValidator   validator    :    childMutationValidators )     {", "validator . validateMutation ( type )  ;", "}", "}", "METHOD_END"], "methodName": ["notifyChildren"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "DependencyResolutionListener   dependencyResolutionListener    =    dependencyResolutionListeners . getSource (  )  ;", "insideBeforeResolve    =    true ;", "try    {", "dependencyResolutionListener . beforeResolve ( incoming )  ;", "}    finally    {", "insideBeforeResolve    =    false ;", "}", "}", "METHOD_END"], "methodName": ["performPreResolveActions"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "if    ( type    =  =     ( MutationValidator . MutationType . DEPENDENCY _ ATTRIBUTES )  )     {", "return ;", "}", "if    (  ( resolvedState )     =  =     ( Internal . InternalState . ARTIFACTS _ RESOLVED )  )     {", "throw   new   InvalidUserDataException ( String . format (  \" Cannot   change    % s   of    % s   after   it   has   been   resolved .  \"  ,    type ,    getDisplayName (  )  )  )  ;", "} else", "if    (  ( resolvedState )     =  =     ( Internal . InternalState . GRAPH _ RESOLVED )  )     {", "throw   new   InvalidUserDataException ( String . format (  \" Cannot   change    % s   of    % s   after   task   dependencies   have   been   resolved \"  ,    type ,    getDisplayName (  )  )  )  ;", "} else", "if    (  (  ( observedState )     =  =     ( Internal . InternalState . GRAPH _ RESOLVED )  )     |  |     (  ( observedState )     =  =     ( Internal . InternalState . ARTIFACTS _ RESOLVED )  )  )     {", "if    ( type    !  =     ( MutationValidator . MutationType . STRATEGY )  )     {", "String   extraMessage    =     ( insideBeforeResolve )     ?     \"    Use    ' defaultDependencies '    instead   of    ' beforeResolve '    to   specify   default   dependencies   for   a   configuration .  \"     :     \"  \"  ;", "throw   new   InvalidUserDataException ( String . format (  \" Cannot   change    % s   of    % s   after   it   has   been   included   in   dependency   resolution .  % s \"  ,    type ,    getDisplayName (  )  ,    extraMessage )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["preventIllegalMutation"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "if    ( type    =  =     ( MutationValidator . MutationType . DEPENDENCY _ ATTRIBUTES )  )     {", "return ;", "}", "if    (  ( resolvedState )     =  =     ( Internal . InternalState . ARTIFACTS _ RESOLVED )  )     {", "throw   new   InvalidUserDataException ( String . format (  \" Cannot   change    % s   of   parent   of    % s   after   it   has   been   resolved \"  ,    type ,    getDisplayName (  )  )  )  ;", "} else", "if    (  ( resolvedState )     =  =     ( Internal . InternalState . GRAPH _ RESOLVED )  )     {", "if    ( type    =  =     ( MutationValidator . MutationType . DEPENDENCIES )  )     {", "throw   new   InvalidUserDataException ( String . format (  \" Cannot   change    % s   of   parent   of    % s   after   task   dependencies   have   been   resolved \"  ,    type ,    getDisplayName (  )  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["preventIllegalParentMutation"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   getFiles (  )  ;", "}", "METHOD_END"], "methodName": ["resolve"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "if    (  ( resolvedState )     =  =     ( ConfigurationInternal . InternalState . ARTIFACTS _ RESOLVED )  )     {", "return ;", "}", "if    (  ( resolvedState )     !  =     ( ConfigurationInternal . InternalState . GRAPH _ RESOLVED )  )     {", "throw   new   IllegalStateException (  \" Cannot   resolve   artifacts   before   graph   has   been   resolved .  \"  )  ;", "}", "resolver . resolveArtifacts ( this ,    cachedResolverResults )  ;", "resolvedState    =    ConfigurationInternal . InternalState . ARTIFACTS _ RESOLVED ;", "}", "METHOD_END"], "methodName": ["resolveArtifactsIfRequired"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( resolvedState )     =  =     ( ConfigurationInternal . InternalState . ARTIFACTS _ RESOLVED )  )     |  |     (  ( resolvedState )     =  =     ( ConfigurationInternal . InternalState . GRAPH _ RESOLVED )  )  )     {", "if    ( dependenciesModified )     {", "throw   new   InvalidUserDataException ( String . format (  \" Attempted   to   resolve    % s   that   has   been   resolved   previously .  \"  ,    getDisplayName (  )  )  )  ;", "}", "return ;", "}", "buildOperationExecutor . run ( new   RunnableBuildOperation (  )     {", "@ Override", "public   void   run ( BuildOperationContext   context )     {", "runDependencyActions (  )  ;", "preventFromFurtherMutation (  )  ;", "final   ResolvableDependencies   incoming    =    getIncoming (  )  ;", "performPreResolveActions ( incoming )  ;", "cachedResolverResults    =    new   DefaultResolverResults (  )  ;", "resolver . resolveGraph (  . this ,    cachedResolverResults )  ;", "dependenciesModified    =    false ;", "resolvedState    =    ConfigurationInternal . InternalState . GRAPH _ RESOLVED ;", "markParentsObserved ( requestedState )  ;", "markReferencedProjectConfigurationsObserved ( requestedState )  ;", "dependencyResolutionListeners . getSource (  )  . afterResolve ( incoming )  ;", "dependencyResolutionListeners . removeAll (  )  ;", "context . setResult ( new   ResolveConfigurationDependenciesBuildOperationType . Result (  )     {", "@ Override", "public   ResolvedComponentResult   getRootComponent (  )     {", "return   incoming . getResolutionResult (  )  . getRoot (  )  ;", "}", "}  )  ;", "}", "@ Override", "public   Builder   description (  )     {", "String   displayName    =     \" Resolve   dependencies   of    \"     +     ( identityPath )  ;", "return   BuildOperationDescriptor . displayName ( displayName )  . progressDisplayName ( displayName )  . details ( new    . OperationDetails (  )  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["resolveGraphIfRequired"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "assertResolvingAllowed (  )  ;", "synchronized ( resolutionLock )     {", "if    (  ( requestedState    =  =     ( Internal . InternalState . GRAPH _ RESOLVED )  )     |  |     ( requestedState    =  =     ( Internal . InternalState . ARTIFACTS _ RESOLVED )  )  )     {", "resolveGraphIfRequired ( requestedState )  ;", "}", "if    ( requestedState    =  =     ( Internal . InternalState . ARTIFACTS _ RESOLVED )  )     {", "resolveArtifactsIfRequired (  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["resolveToStateOrLater"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "if    ( failures . isEmpty (  )  )     {", "return ;", "}", "if    (  ( failures . size (  )  )     =  =     1  )     {", "Throwable   failure    =    failures . iterator (  )  . next (  )  ;", "if    ( failure   instanceof   ResolveException )     {", "throw   UncheckedException . throwAsUncheckedException ( failure )  ;", "}", "}", "throw   new   DefaultLenien . ArtifactResolveException ( type ,    getIdentityPath (  )  . toString (  )  ,    getDisplayName (  )  ,    failures )  ;", "}", "METHOD_END"], "methodName": ["rethrowFailure"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "defaultDependencyActions . execute ( dependencies )  ;", "withDependencyActions . execute ( dependencies )  ;", "defaultDependencyActions    =    ImmutableActionSet . empty (  )  ;", "withDependencyActions    =    ImmutableActionSet . empty (  )  ;", "for    (    superConfig    :    extendsFrom )     {", "(  ( Internal )     ( superConfig )  )  . runDependencyActions (  )  ;", "}", "}", "METHOD_END"], "methodName": ["runDependencyActions"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "this . description    =    description ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setDescription"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "validateMutation ( MutationValidator . MutationType . DEPENDENCIES )  ;", "this . excludeRules    =    excludeRules ;", "}", "METHOD_END"], "methodName": ["setExcludeRules"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "validateMutation ( MutationValidator . MutationType . DEPENDENCIES )  ;", "for    (    configuration    :    this . extendsFrom )     {", "if    (  ( inheritedArtifacts )     !  =    null )     {", "inheritedArtifacts . removeCollection ( configuration . getAllArtifacts (  )  )  ;", "}", "if    (  ( inheritedDependencies )     !  =    null )     {", "inheritedDependencies . removeCollection ( configuration . getAllDependencies (  )  )  ;", "}", "if    (  ( inheritedDependencyConstraints )     !  =    null )     {", "inheritedDependencyConstraints . removeCollection ( configuration . getAllDependencyConstraints (  )  )  ;", "}", "(  ( Internal )     ( configuration )  )  . removeMutationValidator ( parentMutationValidator )  ;", "}", "this . extendsFrom    =    new   LinkedHashSet <  >  (  )  ;", "for    (    configuration    :    extendsFrom )     {", "extendsFrom ( configuration )  ;", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["setExtendsFrom"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "validateMutation ( MutationValidator . MutationType . DEPENDENCIES )  ;", "this . transitive    =    transitive ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setTransitive"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "validateMutation ( MutationValidator . MutationType . DEPENDENCIES )  ;", "this . visible    =    visible ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setVisible"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   rootComponentMetadataBuilder . toRootComponentMetaData (  )  ;", "}", "METHOD_END"], "methodName": ["toRootComponentMetaData"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "preventIllegalMutation ( type )  ;", "markAsModified ( type )  ;", "notifyChildren ( type )  ;", "}", "METHOD_END"], "methodName": ["validateMutation"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   new   Action < Void >  (  )     {", "@ Override", "public   void   execute ( Void   arg )     {", "mutationValidator . validateMutation ( type )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["validateMutationType"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "if    ( type    =  =     ( MutationValidator . MutationType . STRATEGY )  )     {", "return ;", "}", "preventIllegalParentMutation ( type )  ;", "markAsModified ( type )  ;", "notifyChildren ( type )  ;", "}", "METHOD_END"], "methodName": ["validateParentMutation"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfiguration"}, {"methodBody": ["METHOD_START", "{", "String   name    =     ( DefaultConfigurationContainer . DETACHED _ CONFIGURATION _ DEFAULT _ NAME )     +     (  ( detachedConfigurationDefaultNameCounter )  +  +  )  ;", "DetachedConfigurationsProvider   detachedConfigurationsProvider    =    new   DetachedConfigurationsProvider (  )  ;", "DefaultConfiguration   detachedConfiguration    =    instantiator . newInstance ( DefaultConfiguration . class ,    context ,    name ,    detachedConfigurationsProvider ,    resolver ,    listenerManager ,    dependencyMetaDataProvider ,    resolutionStrategyFactory ,    projectAccessListener ,    projectFinder ,    fileCollectionFactory ,    buildOperationExecutor ,    instantiator ,    artifactNotationParser ,    capabilityNotationParser ,    attributesFactory ,    rootComponentMetadataBuilder . withConfigurationsProvider ( detachedConfigurationsProvider )  )  ;", "DomainObjectSet < Dependency >    detachedDependencies    =    detachedConfiguration . getDependencies (  )  ;", "for    ( Dependency   dependency    :    dependencies )     {", "detachedDependencies . add ( dependency . copy (  )  )  ;", "}", "detachedConfigurationsProvider . setTheOnlyConfiguration ( detachedConfiguration )  ;", "return   detachedConfiguration ;", "}", "METHOD_END"], "methodName": ["detachedConfiguration"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfigurationContainer"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   reply    =    new   StringBuilder (  )  ;", "reply . append (  (  \"    of   type :     \"     +     ( getTypeDisplayName (  )  )  )  )  ;", "Collection <  ?    extends    >    configs    =    getAll (  )  ;", "for    (    c    :    configs )     {", "reply . append (  (  \"  \\ n       \"     +     ( c . toString (  )  )  )  )  ;", "}", "return   reply . toString (  )  ;", "}", "METHOD_END"], "methodName": ["dump"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfigurationContainer"}, {"methodBody": ["METHOD_START", "{", "return   withType ( ConfigurationInternal . class )  ;", "}", "METHOD_END"], "methodName": ["getAll"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfigurationContainer"}, {"methodBody": ["METHOD_START", "{", "return   new   OutgoingVariant (  )     {", "@ Override", "public   DisplayName   asDescribable (  )     {", "return   displayName ;", "}", "@ Override", "public   AttributeContainerInternal   getAttributes (  )     {", "return   attributes ;", "}", "@ Override", "public   Set <  ?    extends   PublishArtifact >    getArtifacts (  )     {", "return    ;", "}", "@ Override", "public   Set <  ?    extends   OutgoingVariant >    getChildren (  )     {", "Set < OutgoingVariant >    result    =    new   LinkedHashSet < OutgoingVariant >  (  )  ;", "PublishArtifactSet   allArtifactSet    =    allArtifacts . getPublishArtifactSet (  )  ;", "if    (  (  ( allArtifactSet . size (  )  )     >     0  )     |  |     (  ( variants )     =  =    null )  )     {", "result . add ( new   LeafOutgoingVariant ( displayName ,    attributes ,    allArtifactSet )  )  ;", "}", "if    (  ( variants )     !  =    null )     {", "for    ( DefaultVariant   variant    :    variants . withType ( DefaultVariant . class )  )     {", "result . add ( variant . convertToOutgoingVariant (  )  )  ;", "}", "}", "return   result ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["convertToOutgoingVariant"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfigurationPublications"}, {"methodBody": ["METHOD_START", "{", "canCreate    =    false ;", "if    (  ( variants )     !  =    null )     {", "for    ( Variant   variant    :    variants )     {", "(  ( VariantInternal )     ( variant )  )  . preventFurtherMutation (  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["preventFromFurtherMutation"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultConfigurationPublications"}, {"methodBody": ["METHOD_START", "{", "return   new   LeafOutgoingVariant ( getAsDescribable (  )  ,    attributes ,    artifacts )  ;", "}", "METHOD_END"], "methodName": ["convertToOutgoingVariant"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultVariant"}, {"methodBody": ["METHOD_START", "{", "return   Describables . of ( parentDisplayName ,     \" variant \"  ,    name )  ;", "}", "METHOD_END"], "methodName": ["getAsDescribable"], "fileName": "org.gradle.api.internal.artifacts.configurations.DefaultVariant"}, {"methodBody": ["METHOD_START", "{", "return   ImmutableSet . of ( theOnlyConfiguration )  ;", "}", "METHOD_END"], "methodName": ["getAll"], "fileName": "org.gradle.api.internal.artifacts.configurations.DetachedConfigurationsProvider"}, {"methodBody": ["METHOD_START", "{", "this . theOnlyConfiguration    =    theOnlyConfiguration ;", "}", "METHOD_END"], "methodName": ["setTheOnlyConfiguration"], "fileName": "org.gradle.api.internal.artifacts.configurations.DetachedConfigurationsProvider"}, {"methodBody": ["METHOD_START", "{", "return   configurationName ;", "}", "METHOD_END"], "methodName": ["getConfigurationName"], "fileName": "org.gradle.api.internal.artifacts.configurations.TasksFromDependentProjects"}, {"methodBody": ["METHOD_START", "{", "return   taskName ;", "}", "METHOD_END"], "methodName": ["getTaskName"], "fileName": "org.gradle.api.internal.artifacts.configurations.TasksFromDependentProjects"}, {"methodBody": ["METHOD_START", "{", "return   taskName ;", "}", "METHOD_END"], "methodName": ["getTaskName"], "fileName": "org.gradle.api.internal.artifacts.configurations.TasksFromProjectDependencies"}, {"methodBody": ["METHOD_START", "{", "for    ( ProjectDependency   projectDependency    :    projectDependencies )     {", "projectAccessListener . beforeResolvingProjectDependency (  (  ( ProjectInternal )     ( projectDependency . getDependencyProject (  )  )  )  )  ;", "Task   nextTask    =    projectDependency . getDependencyProject (  )  . getTasks (  )  . findByName ( taskName )  ;", "if    ( nextTask    !  =    null )     {", "context . add ( nextTask )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["resolveProjectDependencies"], "fileName": "org.gradle.api.internal.artifacts.configurations.TasksFromProjectDependencies"}, {"methodBody": ["METHOD_START", "{", "super . copyTo ( target )  ;", "target . setForce ( isForce (  )  )  ;", "target . setChanging ( isChanging (  )  )  ;", "}", "METHOD_END"], "methodName": ["copyTo"], "fileName": "org.gradle.api.internal.artifacts.dependencies.AbstractExternalModuleDependency"}, {"methodBody": ["METHOD_START", "{", "return   group ;", "}", "METHOD_END"], "methodName": ["getGroup"], "fileName": "org.gradle.api.internal.artifacts.dependencies.AbstractExternalModuleDependency"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.api.internal.artifacts.dependencies.AbstractExternalModuleDependency"}, {"methodBody": ["METHOD_START", "{", "return   Strings . emptyToNull ( versionConstraint . getPreferredVersion (  )  )  ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "org.gradle.api.internal.artifacts.dependencies.AbstractExternalModuleDependency"}, {"methodBody": ["METHOD_START", "{", "return   changing ;", "}", "METHOD_END"], "methodName": ["isChanging"], "fileName": "org.gradle.api.internal.artifacts.dependencies.AbstractExternalModuleDependency"}, {"methodBody": ["METHOD_START", "{", "if    (  (  !  ( isKeyEquals ( dependencyRhs )  )  )     |  |     (  !  ( isCommonContentEquals ( dependencyRhs )  )  )  )     {", "return   false ;", "}", "return    (  ( force )     =  =     ( dependencyRhs . isForce (  )  )  )     &  &     (  ( changing )     =  =     ( dependencyRhs . isChanging (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["isContentEqualsFor"], "fileName": "org.gradle.api.internal.artifacts.dependencies.AbstractExternalModuleDependency"}, {"methodBody": ["METHOD_START", "{", "return   force ;", "}", "METHOD_END"], "methodName": ["isForce"], "fileName": "org.gradle.api.internal.artifacts.dependencies.AbstractExternalModuleDependency"}, {"methodBody": ["METHOD_START", "{", "return   new   ModuleVersionSelectorStrictSpec ( this )  . isSatisfiedBy ( identifier )  ;", "}", "METHOD_END"], "methodName": ["matchesStrictly"], "fileName": "org.gradle.api.internal.artifacts.dependencies.AbstractExternalModuleDependency"}, {"methodBody": ["METHOD_START", "{", "validateMutation ( this . changing ,    changing )  ;", "this . changing    =    changing ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setChanging"], "fileName": "org.gradle.api.internal.artifacts.dependencies.AbstractExternalModuleDependency"}, {"methodBody": ["METHOD_START", "{", "validateMutation ( this . force ,    force )  ;", "this . force    =    force ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setForce"], "fileName": "org.gradle.api.internal.artifacts.dependencies.AbstractExternalModuleDependency"}, {"methodBody": ["METHOD_START", "{", "this . dependencies . add ( dependency )  ;", "}", "METHOD_END"], "methodName": ["addDependency"], "fileName": "org.gradle.api.internal.artifacts.dependencies.DefaultClientModule"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    dependency )     {", "return   true ;", "}", "if    (  ( dependency    =  =    null )     |  |     (  ( getClass (  )  )     !  =     ( dependency . getClass (  )  )  )  )     {", "return   false ;", "}", "ClientModule   that    =     (  ( ClientModule )     ( dependency )  )  ;", "return    ( isContentEqualsFor ( that )  )     &  &     ( equals ( that . getDependencies (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["contentEquals"], "fileName": "org.gradle.api.internal.artifacts.dependencies.DefaultClientModule"}, {"methodBody": ["METHOD_START", "{", "DefaultClientModule   copiedClientModule    =    new   DefaultClientModule ( getGroup (  )  ,    getName (  )  ,    getVersion (  )  ,    getTargetConfiguration (  )  )  ;", "copyTo ( copiedClientModule )  ;", "for    ( ModuleDependency   dependency    :    dependencies )     {", "copiedClientModule . addDependency ( dependency . copy (  )  )  ;", "}", "return   copiedClientModule ;", "}", "METHOD_END"], "methodName": ["copy"], "fileName": "org.gradle.api.internal.artifacts.dependencies.DefaultClientModule"}, {"methodBody": ["METHOD_START", "{", "return   value    =  =    null    ?     \"  \"     :    value ;", "}", "METHOD_END"], "methodName": ["emptyStringIfNull"], "fileName": "org.gradle.api.internal.artifacts.dependencies.DefaultClientModule"}, {"methodBody": ["METHOD_START", "{", "return   dependencies ;", "}", "METHOD_END"], "methodName": ["getDependencies"], "fileName": "org.gradle.api.internal.artifacts.dependencies.DefaultClientModule"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  ( emptyStringIfNull ( getGroup (  )  )  )     +     \"  :  \"  )     +     ( getName (  )  )  )     +     \"  :  \"  )     +     ( emptyStringIfNull ( getVersion (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.gradle.api.internal.artifacts.dependencies.DefaultClientModule"}, {"methodBody": ["METHOD_START", "{", "DefaultDependencyConstraint   constraint    =    new   DefaultDependencyConstraint ( group ,    name ,    versionConstraint )  ;", "constraint . reason    =    reason ;", "constraint . attributes    =    attributes ;", "constraint . attributesFactory    =    attributesFactory ;", "return   constraint ;", "}", "METHOD_END"], "methodName": ["copy"], "fileName": "org.gradle.api.internal.artifacts.dependencies.DefaultDependencyConstraint"}, {"methodBody": ["METHOD_START", "{", "this . attributesFactory    =    attributesFactory ;", "}", "METHOD_END"], "methodName": ["setAttributesFactory"], "fileName": "org.gradle.api.internal.artifacts.dependencies.DefaultDependencyConstraint"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultDependencyConstraint ( group ,    name ,    new   DefaultMutableVersionConstraint ( version ,    true )  )  ;", "}", "METHOD_END"], "methodName": ["strictConstraint"], "fileName": "org.gradle.api.internal.artifacts.dependencies.DefaultDependencyConstraint"}, {"methodBody": ["METHOD_START", "{", "DefaultDependencyConstraint . LOG . warn (  (  (  (  (  (  (  \" Cannot   set   attributes   for   constraint    \\  \"  \"     +     ( this . getGroup (  )  )  )     +     \"  :  \"  )     +     ( this . getName (  )  )  )     +     \"  :  \"  )     +     ( this . getVersion (  )  )  )     +     \"  \\  \"  :    it   was   probably   created   by   a   plugin   using   internal   APIs \"  )  )  ;", "}", "METHOD_END"], "methodName": ["warnAboutInternalApiUse"], "fileName": "org.gradle.api.internal.artifacts.dependencies.DefaultDependencyConstraint"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    dependency )     {", "return   true ;", "}", "if    (  ( dependency    =  =    null )     |  |     (  ( getClass (  )  )     !  =     ( dependency . getClass (  )  )  )  )     {", "return   false ;", "}", "that    =     (  (  )     ( dependency )  )  ;", "return   isContentEqualsFor ( that )  ;", "}", "METHOD_END"], "methodName": ["contentEquals"], "fileName": "org.gradle.api.internal.artifacts.dependencies.DefaultExternalModuleDependency"}, {"methodBody": ["METHOD_START", "{", "DefaultExternalModuleDependency   copiedModuleDependency    =    new   DefaultExternalModuleDependency ( getGroup (  )  ,    getName (  )  ,    getVersion (  )  ,    getTargetConfiguration (  )  )  ;", "copyTo ( copiedModuleDependency )  ;", "return   copiedModuleDependency ;", "}", "METHOD_END"], "methodName": ["copy"], "fileName": "org.gradle.api.internal.artifacts.dependencies.DefaultExternalModuleDependency"}, {"methodBody": ["METHOD_START", "{", "return   DefaultImmutableVersionConstraint . EMPTY ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.api.internal.artifacts.dependencies.DefaultImmutableVersionConstraint"}, {"methodBody": ["METHOD_START", "{", "if    ( preferredVersion    =  =    null )     {", "return    . of (  )  ;", "}", "return   new    ( preferredVersion )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.api.internal.artifacts.dependencies.DefaultImmutableVersionConstraint"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultImmutableVersionConstraint ( preferredVersion ,    rejects )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.api.internal.artifacts.dependencies.DefaultImmutableVersionConstraint"}, {"methodBody": ["METHOD_START", "{", "if    ( versionConstraint   instanceof   ImmutableVersionConstraint )     {", "return    (  ( ImmutableVersionConstraint )     ( versionConstraint )  )  ;", "}", "return   new    ( versionConstraint . getPreferredVersion (  )  ,    versionConstraint . getRejectedVersions (  )  )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.api.internal.artifacts.dependencies.DefaultImmutableVersionConstraint"}, {"methodBody": ["METHOD_START", "{", "DefaultVersionSelectorScheme   versionSelectorScheme    =    new   DefaultVersionSelectorScheme ( new   DefaultVersionComparator (  )  )  ;", "VersionSelector   preferredSelector    =    versionSelectorScheme . parseSelector ( prefer )  ;", "VersionSelector   rejectedSelector    =    versionSelectorScheme . complementForRejection ( preferredSelector )  ;", "this . rejects . clear (  )  ;", "this . rejects . add ( rejectedSelector . getSelector (  )  )  ;", "}", "METHOD_END"], "methodName": ["doStrict"], "fileName": "org.gradle.api.internal.artifacts.dependencies.DefaultMutableVersionConstraint"}, {"methodBody": ["METHOD_START", "{", "if    (  ( rejectedVersions . size (  )  )     >     1  )     {", "return   UnionVersionSelector . of ( rejectedVersions ,    scheme )  ;", "}", "return   rejectedVersions . isEmpty (  )     ?    null    :    scheme . parseSelector ( rejectedVersions . get (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["toRejectSelector"], "fileName": "org.gradle.api.internal.artifacts.dependencies.DefaultResolvedVersionConstraint"}, {"methodBody": ["METHOD_START", "{", "return   classifier ;", "}", "METHOD_END"], "methodName": ["getClassifier"], "fileName": "org.gradle.api.internal.artifacts.dsl.ArtifactFile"}, {"methodBody": ["METHOD_START", "{", "return   extension ;", "}", "METHOD_END"], "methodName": ["getExtension"], "fileName": "org.gradle.api.internal.artifacts.dsl.ArtifactFile"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.api.internal.artifacts.dsl.ArtifactFile"}, {"methodBody": ["METHOD_START", "{", "return   NotationParserBuilder . toType ( Capability . class )  . converter ( new   CapabilityNotationParserFactory . StringNotationParser (  )  )  . converter ( new   CapabilityNotationParserFactory . CapabilityMapNotationParser (  )  )  . toComposite (  )  ;", "}", "METHOD_END"], "methodName": ["createSingletonConverter"], "fileName": "org.gradle.api.internal.artifacts.dsl.CapabilityNotationParserFactory"}, {"methodBody": ["METHOD_START", "{", "if    ( source . equals ( target )  )     {", "throw   new   InvalidUserDataException ( String . format (  \" Cannot   declare   module   replacement   that   replaces   self :     % s -  >  % s \"  ,    source ,    target )  )  ;", "}", "ModuleIdentifier   m    =     . unwrap ( replacements . get ( target )  )  ;", "if    ( m    =  =    null )     {", "return ;", "}", "Set < ModuleIdentifier >    visited    =    new   LinkedHashSet < ModuleIdentifier >  (  )  ;", "visited . add ( source )  ;", "visited . add ( target )  ;", "while    ( m    !  =    null )     {", "if    (  !  ( visited . add ( m )  )  )     {", "throw   new   InvalidUserDataException ( String . format (  \" Cannot   declare   module   replacement    % s -  >  % s   because   it   introduces   a   cycle :     % s \"  ,    source ,    target ,     (  (  ( Joiner . on (  \"  -  >  \"  )  . join ( visited )  )     +     \"  -  >  \"  )     +    source )  )  )  ;", "}", "m    =     . unwrap ( replacements . get ( m )  )  ;", "}", "}", "METHOD_END"], "methodName": ["detectCycles"], "fileName": "org.gradle.api.internal.artifacts.dsl.ComponentModuleMetadataContainer"}, {"methodBody": ["METHOD_START", "{", "return   replacements . get ( sourceModule )  ;", "}", "METHOD_END"], "methodName": ["getReplacementFor"], "fileName": "org.gradle.api.internal.artifacts.dsl.ComponentModuleMetadataContainer"}, {"methodBody": ["METHOD_START", "{", "final   NotationParser < Object ,    ModuleIdentifier >    parser    =    ComponentModuleMetadataContainer . parser ( moduleIdentifierFactory )  ;", "final   ModuleIdentifier   source    =    parser . parseNotation ( sourceModule )  ;", "return   new   ComponentModuleMetadataDetails (  )     {", "@ Override", "public   void   replacedBy ( Object   moduleNotation )     {", "replacedBy ( moduleNotation ,    null )  ;", "}", "@ Override", "public   void   replacedBy ( final   Object   targetModule ,     @ Nullable", "String   reason )     {", "ModuleIdentifier   target    =    parser . parseNotation ( targetModule )  ;", "ComponentModuleMetadataContainer . detectCycles ( replacements ,    source ,    target )  ;", "replacements . put ( source ,    new   ModuleReplacementsData . Replacement ( target ,    reason )  )  ;", "targets . add ( target )  ;", "}", "public   ModuleIdentifier   getId (  )     {", "return   source ;", "}", "public   ModuleIdentifier   getReplacedBy (  )     {", "return   ComponentModuleMetadataContainer . unwrap ( replacements . get ( source )  )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["module"], "fileName": "org.gradle.api.internal.artifacts.dsl.ComponentModuleMetadataContainer"}, {"methodBody": ["METHOD_START", "{", "return   NotationParserBuilder . toType ( ModuleIdentifier . class )  . converter ( new   ModuleIdentifierNotationConverter ( moduleIdentifierFactory )  )  . toComposite (  )  ;", "}", "METHOD_END"], "methodName": ["parser"], "fileName": "org.gradle.api.internal.artifacts.dsl.ComponentModuleMetadataContainer"}, {"methodBody": ["METHOD_START", "{", "return   replacement    =  =    null    ?    null    :    replacement . getTarget (  )  ;", "}", "METHOD_END"], "methodName": ["unwrap"], "fileName": "org.gradle.api.internal.artifacts.dsl.ComponentModuleMetadataContainer"}, {"methodBody": ["METHOD_START", "{", "return   ComponentSelectorParsers . BUILDER ;", "}", "METHOD_END"], "methodName": ["builder"], "fileName": "org.gradle.api.internal.artifacts.dsl.ComponentSelectorParsers"}, {"methodBody": ["METHOD_START", "{", "return   ComponentSelectorParsers . builder (  )  . toFlatteningComposite (  )  ;", "}", "METHOD_END"], "methodName": ["multiParser"], "fileName": "org.gradle.api.internal.artifacts.dsl.ComponentSelectorParsers"}, {"methodBody": ["METHOD_START", "{", "return   ComponentSelectorParsers . builder (  )  . toComposite (  )  ;", "}", "METHOD_END"], "methodName": ["parser"], "fileName": "org.gradle.api.internal.artifacts.dsl.ComponentSelectorParsers"}, {"methodBody": ["METHOD_START", "{", "Action < Object >    configureAction    =    ConfigureUtil . configureUsing ( configureClosure )  ;", "return   push ( configuration ,    notation ,    configureAction )  ;", "}", "METHOD_END"], "methodName": ["pushArtifact"], "fileName": "org.gradle.api.internal.artifacts.dsl.DefaultArtifactHandler"}, {"methodBody": ["METHOD_START", "{", "ConfigurablePublishArtifact   publishArtifact    =    publishArtifactFactory . parseNotation ( notation )  ;", "configuration . ges (  )  . add ( publishArtifact )  ;", "configureAction . execute ( publishArtifact )  ;", "return   publishArtifact ;", "}", "METHOD_END"], "methodName": ["pushArtifact"], "fileName": "org.gradle.api.internal.artifacts.dsl.DefaultArtifactHandler"}, {"methodBody": ["METHOD_START", "{", "rules . add ( ruleAction )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addRule"], "fileName": "org.gradle.api.internal.artifacts.dsl.DefaultComponentMetadataHandler"}, {"methodBody": ["METHOD_START", "{", "return   addRule ( createAllSpecRuleAction ( ruleActionAdapter . createFromClosure ( ComponentMetadataDetails . class ,    rule )  )  )  ;", "}", "METHOD_END"], "methodName": ["all"], "fileName": "org.gradle.api.internal.artifacts.dsl.DefaultComponentMetadataHandler"}, {"methodBody": ["METHOD_START", "{", "return   addRule ( createAllSpecRuleAction ( ruleActionAdapter . createFromRuleSource ( ComponentMetadataDetails . class ,    ruleSource )  )  )  ;", "}", "METHOD_END"], "methodName": ["all"], "fileName": "org.gradle.api.internal.artifacts.dsl.DefaultComponentMetadataHandler"}, {"methodBody": ["METHOD_START", "{", "return   addRule ( createAllSpecRuleAction ( ruleActionAdapter . createFromAction ( rule )  )  )  ;", "}", "METHOD_END"], "methodName": ["all"], "fileName": "org.gradle.api.internal.artifacts.dsl.DefaultComponentMetadataHandler"}, {"methodBody": ["METHOD_START", "{", "RuleActionValidator < ComponentMetadataDetails >    ruleActionValidator    =    new   DefaultRuleActionValidator < ComponentMetadataDetails >  ( DefaultComponentMetadataHandler . VALIDATOR _ PARAM _ LIST )  ;", "return   new   DefaultRuleActionAdapter < ComponentMetadataDetails >  ( ruleActionValidator ,    DefaultComponentMetadataHandler . ADAPTER _ NAME )  ;", "}", "METHOD_END"], "methodName": ["createAdapter"], "fileName": "org.gradle.api.internal.artifacts.dsl.DefaultComponentMetadataHandler"}, {"methodBody": ["METHOD_START", "{", "return   new   SpecRuleAction < ComponentMetadataDetails >  ( ruleAction ,    Specs .  < ComponentMetadataDetails > satisfyAll (  )  )  ;", "}", "METHOD_END"], "methodName": ["createAllSpecRuleAction"], "fileName": "org.gradle.api.internal.artifacts.dsl.DefaultComponentMetadataHandler"}, {"methodBody": ["METHOD_START", "{", "ModuleIdentifier   moduleIdentifier ;", "try    {", "moduleIdentifier    =    moduleIdentifierNotationParser . parseNotation ( id )  ;", "}    catch    ( UnsupportedNotationException   e )     {", "throw   new   InvalidUserCodeException ( String . format (  . INVALID _ SPEC _ ERROR ,     ( id    =  =    null    ?     \" null \"     :    id . toString (  )  )  )  ,    e )  ;", "}", "Spec < ComponentMetadataDetails >    spec    =    new    . ComponentMetadataDetailsMatchingSpec ( moduleIdentifier )  ;", "return   new   SpecRuleAction < ComponentMetadataDetails >  ( ruleAction ,    spec )  ;", "}", "METHOD_END"], "methodName": ["createSpecRuleActionForModule"], "fileName": "org.gradle.api.internal.artifacts.dsl.DefaultComponentMetadataHandler"}, {"methodBody": ["METHOD_START", "{", "for    ( SpecRuleAction <  ?    super   ComponentMetadataDetails >    rule    :    rules )     {", "processRule ( rule ,    metadata ,    details )  ;", "}", "}", "METHOD_END"], "methodName": ["processAllRules"], "fileName": "org.gradle.api.internal.artifacts.dsl.DefaultComponentMetadataHandler"}, {"methodBody": ["METHOD_START", "{", "ModuleComponentResolveMetadata   updatedMetadata ;", "if    ( rules . isEmpty (  )  )     {", "updatedMetadata    =    metadata ;", "} else    {", "MutableModuleComponentResolveMetadata   mutableMetadata    =    metadata . asMutable (  )  ;", "Details   details    =    instantiator . newInstance ( DetailsAdapter . class ,    mutableMetadata ,    instantiator ,    dependencyMetadataNotationParser ,    dependencyConstraintMetadataNotationParser )  ;", "processAllRules ( metadata ,    details )  ;", "updatedMetadata    =    mutableMetadata . asImmutable (  )  ;", "}", "if    (  !  ( updatedMetadata . getStatusScheme (  )  . contains ( updatedMetadata . getStatus (  )  )  )  )     {", "throw   new   ModuleVersionResolveException ( updatedMetadata . getModuleVersionId (  )  ,    String . format (  \" Unexpected   status    '  % s '    specified   for    % s .    Expected   one   of :     % s \"  ,    updatedMetadata . getStatus (  )  ,    updatedMetadata . getId (  )  . getDisplayName (  )  ,    updatedMetadata . getStatusScheme (  )  )  )  ;", "}", "return   updatedMetadata ;", "}", "METHOD_END"], "methodName": ["processMetadata"], "fileName": "org.gradle.api.internal.artifacts.dsl.DefaultComponentMetadataHandler"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( specRuleAction . getSpec (  )  . isSatisfiedBy ( details )  )  )     {", "return ;", "}", "final   List < Object >    inputs    =    Lists . newArrayList (  )  ;", "final   RuleAction <  ?    super   Details >    action    =    specRuleAction . getAction (  )  ;", "for    ( Class <  ?  >    inputType    :    action . getInputTypes (  )  )     {", "if    ( inputType    =  =     ( IvyModuleDescriptor . class )  )     {", "if    (  !  ( metadata   instanceof   IvyModuleResolveMetadata )  )     {", "return ;", "}", "IvyModuleResolveMetadata   ivyMetadata    =     (  ( IvyModuleResolveMetadata )     ( metadata )  )  ;", "inputs . add ( new   DefaultIvyModuleDescriptor ( ivyMetadata . getExtraAttributes (  )  ,    ivyMetadata . getBranch (  )  ,    ivyMetadata . getStatus (  )  )  )  ;", "continue ;", "}", "throw   new   IllegalStateException (  )  ;", "}", "try    {", "synchronized ( this )     {", "action . execute ( details ,    inputs )  ;", "}", "}    catch    ( Exception   e )     {", "throw   new   InvalidUserCodeException ( String . format (  \" There   was   an   error   while   evaluating   a   component   metadata   rule   for    % s .  \"  ,    details . getId (  )  )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["processRule"], "fileName": "org.gradle.api.internal.artifacts.dsl.DefaultComponentMetadataHandler"}, {"methodBody": ["METHOD_START", "{", "return   addRule ( createSpecRuleActionForModule ( id ,    ruleActionAdapter . createFromClosure ( ComponentMetadataDetails . class ,    rule )  )  )  ;", "}", "METHOD_END"], "methodName": ["withModule"], "fileName": "org.gradle.api.internal.artifacts.dsl.DefaultComponentMetadataHandler"}, {"methodBody": ["METHOD_START", "{", "return   addRule ( createSpecRuleActionForModule ( id ,    ruleActionAdapter . createFromRuleSource ( ComponentMetadataDetails . class ,    ruleSource )  )  )  ;", "}", "METHOD_END"], "methodName": ["withModule"], "fileName": "org.gradle.api.internal.artifacts.dsl.DefaultComponentMetadataHandler"}, {"methodBody": ["METHOD_START", "{", "return   addRule ( createSpecRuleActionForModule ( id ,    ruleActionAdapter . createFromAction ( rule )  )  )  ;", "}", "METHOD_END"], "methodName": ["withModule"], "fileName": "org.gradle.api.internal.artifacts.dsl.DefaultComponentMetadataHandler"}, {"methodBody": ["METHOD_START", "{", "return   moduleMetadataContainer ;", "}", "METHOD_END"], "methodName": ["getModuleReplacements"], "fileName": "org.gradle.api.internal.artifacts.dsl.DefaultComponentModuleMetadataHandler"}, {"methodBody": ["METHOD_START", "{", "rule . execute ( moduleMetadataContainer . module ( moduleNotation )  )  ;", "}", "METHOD_END"], "methodName": ["module"], "fileName": "org.gradle.api.internal.artifacts.dsl.DefaultComponentModuleMetadataHandler"}, {"methodBody": ["METHOD_START", "{", "return   flatDir ( ConfigureUtil . configureUsing ( configureClosure )  )  ;", "}", "METHOD_END"], "methodName": ["flatDir"], "fileName": "org.gradle.api.internal.artifacts.dsl.DefaultRepositoryHandler"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    modifiedArgs    =    new   HashMap < String ,    Object >  ( args )  ;", "if    ( modifiedArgs . containsKey (  \" dirs \"  )  )     {", "modifiedArgs . put (  \" dirs \"  ,    CollectionUtils . flattenCollections ( modifiedArgs . get (  \" dirs \"  )  )  )  ;", "}", "return   flatDir ( new   ConfigureByMapAction < FlatDirectoryArtifactRepository >  ( modifiedArgs )  )  ;", "}", "METHOD_END"], "methodName": ["flatDir"], "fileName": "org.gradle.api.internal.artifacts.dsl.DefaultRepositoryHandler"}, {"methodBody": ["METHOD_START", "{", "return   addRepository ( repositoryFactory . createFlatDirRepository (  )  ,    DefaultRepositoryHandler . FLAT _ DIR _ DEFAULT _ NAME ,    action )  ;", "}", "METHOD_END"], "methodName": ["flatDir"], "fileName": "org.gradle.api.internal.artifacts.dsl.DefaultRepositoryHandler"}, {"methodBody": ["METHOD_START", "{", "return   addRepository ( repositoryFactory . createGoogleRepository (  )  ,    DefaultRepositoryHandler . GOOGLE _ REPO _ NAME )  ;", "}", "METHOD_END"], "methodName": ["google"], "fileName": "org.gradle.api.internal.artifacts.dsl.DefaultRepositoryHandler"}, {"methodBody": ["METHOD_START", "{", "return   ivy ( ConfigureUtil . configureUsing ( closure )  )  ;", "}", "METHOD_END"], "methodName": ["ivy"], "fileName": "org.gradle.api.internal.artifacts.dsl.DefaultRepositoryHandler"}, {"methodBody": ["METHOD_START", "{", "return   addRepository ( repositoryFactory . createIvyRepository (  )  ,    DefaultRepositoryHandler . IVY _ REPO _ DEFAULT _ NAME ,    action )  ;", "}", "METHOD_END"], "methodName": ["ivy"], "fileName": "org.gradle.api.internal.artifacts.dsl.DefaultRepositoryHandler"}, {"methodBody": ["METHOD_START", "{", "return   addRepository ( repositoryFactory . createJCenterRepository (  )  ,    DefaultRepositoryHandler . DEFAULT _ BINTRAY _ JCENTER _ REPO _ NAME )  ;", "}", "METHOD_END"], "methodName": ["jcenter"], "fileName": "org.gradle.api.internal.artifacts.dsl.DefaultRepositoryHandler"}, {"methodBody": ["METHOD_START", "{", "return   addRepository ( repositoryFactory . createJCenterRepository (  )  ,    DefaultRepositoryHandler . DEFAULT _ BINTRAY _ JCENTER _ REPO _ NAME ,    action )  ;", "}", "METHOD_END"], "methodName": ["jcenter"], "fileName": "org.gradle.api.internal.artifacts.dsl.DefaultRepositoryHandler"}, {"methodBody": ["METHOD_START", "{", "return   maven ( ConfigureUtil . configureUsing ( closure )  )  ;", "}", "METHOD_END"], "methodName": ["maven"], "fileName": "org.gradle.api.internal.artifacts.dsl.DefaultRepositoryHandler"}, {"methodBody": ["METHOD_START", "{", "return   addRepository ( repositoryFactory . createMavenRepository (  )  ,    DefaultRepositoryHandler . MAVEN _ REPO _ DEFAULT _ NAME ,    action )  ;", "}", "METHOD_END"], "methodName": ["maven"], "fileName": "org.gradle.api.internal.artifacts.dsl.DefaultRepositoryHandler"}, {"methodBody": ["METHOD_START", "{", "return   addRepository ( repositoryFactory . createMavenCentralRepository (  )  ,    DEFAULT _ MAVEN _ CENTRAL _ REPO _ NAME )  ;", "}", "METHOD_END"], "methodName": ["mavenCentral"], "fileName": "org.gradle.api.internal.artifacts.dsl.DefaultRepositoryHandler"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    modifiedArgs    =    new   HashMap < String ,    Object >  ( args )  ;", "return   addRepository ( repositoryFactory . createMavenCentralRepository (  )  ,    DEFAULT _ MAVEN _ CENTRAL _ REPO _ NAME ,    new   ConfigureByMapAction < MavenArtifactRepository >  ( modifiedArgs )  )  ;", "}", "METHOD_END"], "methodName": ["mavenCentral"], "fileName": "org.gradle.api.internal.artifacts.dsl.DefaultRepositoryHandler"}, {"methodBody": ["METHOD_START", "{", "return   addRepository ( repositoryFactory . createMavenLocalRepository (  )  ,    DEFAULT _ MAVEN _ LOCAL _ REPO _ NAME )  ;", "}", "METHOD_END"], "methodName": ["mavenLocal"], "fileName": "org.gradle.api.internal.artifacts.dsl.DefaultRepositoryHandler"}, {"methodBody": ["METHOD_START", "{", "if    (  ( artifactFile )     =  =    null )     {", "artifactFile    =    new   ArtifactFile ( getFile (  )  ,    version )  ;", "}", "return   artifactFile ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.gradle.api.internal.artifacts.dsl.LazyPublishArtifact"}, {"methodBody": ["METHOD_START", "{", "return   ModuleVersionSelectorParsers . BUILDER ;", "}", "METHOD_END"], "methodName": ["builder"], "fileName": "org.gradle.api.internal.artifacts.dsl.ModuleVersionSelectorParsers"}, {"methodBody": ["METHOD_START", "{", "return   ModuleVersionSelectorParsers . builder (  )  . toFlatteningComposite (  )  ;", "}", "METHOD_END"], "methodName": ["multiParser"], "fileName": "org.gradle.api.internal.artifacts.dsl.ModuleVersionSelectorParsers"}, {"methodBody": ["METHOD_START", "{", "return   ModuleVersionSelectorParsers . builder (  )  . toComposite (  )  ;", "}", "METHOD_END"], "methodName": ["parser"], "fileName": "org.gradle.api.internal.artifacts.dsl.ModuleVersionSelectorParsers"}, {"methodBody": ["METHOD_START", "{", "switch    ( count )     {", "case    0     :", "group    =     (  \"  \"  . equals ( fragment )  )     ?    null    :    fragment ;", "break ;", "case    1     :", "name    =    fragment ;", "break ;", "case    2     :", "vers    =     (  \"  \"  . equals ( fragment )  )     ?    null    :    fragment ;", "break ;", "case    3     :", "classifier    =    fragment ;", "}", "}", "METHOD_END"], "methodName": ["assignValue"], "fileName": "org.gradle.api.internal.artifacts.dsl.ParsedModuleStringNotation"}, {"methodBody": ["METHOD_START", "{", "int   count    =     0  ;", "int   idx    =     0  ;", "int   cur    =     -  1  ;", "while    (  (  +  + cur )     <     ( moduleNotation . length (  )  )  )     {", "if    (  '  :  '     =  =     ( moduleNotation . charAt ( cur )  )  )     {", "String   fragment    =    moduleNotation . substring ( idx ,    cur )  ;", "assignValue ( count ,    fragment )  ;", "idx    =    cur    +     1  ;", "count +  +  ;", "}", "}", "assignValue ( count ,    moduleNotation . substring ( idx ,    cur )  )  ;", "count +  +  ;", "if    (  ( count    <     2  )     |  |     ( count    >     4  )  )     {", "throw   new   IllegalDependencyNotation (  (  (  \" Supplied   String   module   notation    '  \"     +    moduleNotation )     +     \"  '    is   invalid .    Example   notations :     '  : gradle - core :  2  .  2  '  ,     ' mockito : mockito - core :  1  .  9  .  5  : javadoc '  .  \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["assignValuesFromModuleNotation"], "fileName": "org.gradle.api.internal.artifacts.dsl.ParsedModuleStringNotation"}, {"methodBody": ["METHOD_START", "{", "return   artifactType ;", "}", "METHOD_END"], "methodName": ["getArtifactType"], "fileName": "org.gradle.api.internal.artifacts.dsl.ParsedModuleStringNotation"}, {"methodBody": ["METHOD_START", "{", "return   classifier ;", "}", "METHOD_END"], "methodName": ["getClassifier"], "fileName": "org.gradle.api.internal.artifacts.dsl.ParsedModuleStringNotation"}, {"methodBody": ["METHOD_START", "{", "return   group ;", "}", "METHOD_END"], "methodName": ["getGroup"], "fileName": "org.gradle.api.internal.artifacts.dsl.ParsedModuleStringNotation"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.api.internal.artifacts.dsl.ParsedModuleStringNotation"}, {"methodBody": ["METHOD_START", "{", "return   version ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "org.gradle.api.internal.artifacts.dsl.ParsedModuleStringNotation"}, {"methodBody": ["METHOD_START", "{", "PublishArtifactNotationParserFactory . FileNotationConverter   fileConverter    =    new   PublishArtifactNotationParserFactory . FileNotationConverter (  )  ;", "return   NotationParserBuilder . toType ( ConfigurablePublishArtifact . class )  . converter ( new   PublishArtifactNotationParserFactory . DecoratingConverter (  )  )  . converter ( new   PublishArtifactNotationParserFactory . ArchiveTaskNotationConverter (  )  )  . converter ( new   PublishArtifactNotationParserFactory . FileProviderNotationConverter (  )  )  . converter ( fileConverter )  . converter ( new   PublishArtifactNotationParserFactory . FileMapNotationConverter ( fileConverter )  )  . toComposite (  )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.api.internal.artifacts.dsl.PublishArtifactNotationParserFactory"}, {"methodBody": ["METHOD_START", "{", "DependencyConstraint   dependency    =    doCreate ( dependencyNotation ,    configureAction )  ;", "configuration . ges (  )  . add ( dependency )  ;", "return   dependency ;", "}", "METHOD_END"], "methodName": ["doAdd"], "fileName": "org.gradle.api.internal.artifacts.dsl.dependencies.DefaultDependencyConstraintHandler"}, {"methodBody": ["METHOD_START", "{", "DependencyConstraint   dependencyConstraint    =    dependencyFactory . createDependencyConstraint ( dependencyNotation )  ;", "if    ( configureAction    !  =    null )     {", "configureAction . execute ( dependencyConstraint )  ;", "}", "return   dependencyConstraint ;", "}", "METHOD_END"], "methodName": ["doCreate"], "fileName": "org.gradle.api.internal.artifacts.dsl.dependencies.DefaultDependencyConstraintHandler"}, {"methodBody": ["METHOD_START", "{", "configureAction . execute ( getComponents (  )  )  ;", "}", "METHOD_END"], "methodName": ["components"], "fileName": "org.gradle.api.internal.artifacts.dsl.dependencies.DefaultDependencyHandler"}, {"methodBody": ["METHOD_START", "{", "attributesSchema . attribute ( ArtifactAttributes . ARTIFACT _ FORMAT )  ;", "}", "METHOD_END"], "methodName": ["configureSchema"], "fileName": "org.gradle.api.internal.artifacts.dsl.dependencies.DefaultDependencyHandler"}, {"methodBody": ["METHOD_START", "{", "return   resolutionQueryFactory . createArtifactResolutionQuery (  )  ;", "}", "METHOD_END"], "methodName": ["createArtifactResolutionQuery"], "fileName": "org.gradle.api.internal.artifacts.dsl.dependencies.DefaultDependencyHandler"}, {"methodBody": ["METHOD_START", "{", "if    ( dependencyNotation   instanceof   Configuration )     {", "Configuration   other    =     (  ( Configuration )     ( dependencyNotation )  )  ;", "if    (  !  ( configurationContainer . contains ( other )  )  )     {", "throw   new   UnsupportedOperationException (  \" Currently   you   can   only   declare      on   configurations   from   the   same   project .  \"  )  ;", "}", "configuration . extendsFrom ( other )  ;", "return   null ;", "}", "Dependency   dependency    =    create ( dependencyNotation ,    configureClosure )  ;", "configuration . getDependencies (  )  . add ( dependency )  ;", "return   dependency ;", "}", "METHOD_END"], "methodName": ["doAdd"], "fileName": "org.gradle.api.internal.artifacts.dsl.dependencies.DefaultDependencyHandler"}, {"methodBody": ["METHOD_START", "{", "return   componentMetadataHandler ;", "}", "METHOD_END"], "methodName": ["getComponents"], "fileName": "org.gradle.api.internal.artifacts.dsl.dependencies.DefaultDependencyHandler"}, {"methodBody": ["METHOD_START", "{", "return   componentModuleMetadataHandler ;", "}", "METHOD_END"], "methodName": ["getModules"], "fileName": "org.gradle.api.internal.artifacts.dsl.dependencies.DefaultDependencyHandler"}, {"methodBody": ["METHOD_START", "{", "configureAction . execute ( getModules (  )  )  ;", "}", "METHOD_END"], "methodName": ["modules"], "fileName": "org.gradle.api.internal.artifacts.dsl.dependencies.DefaultDependencyHandler"}, {"methodBody": ["METHOD_START", "{", "for    ( Object   notation    :    dependencyNotations )     {", "clientModule . addDependency (  (  ( ModuleDependency )     ( dependencyFactory . createDependency ( notation )  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["dependencies"], "fileName": "org.gradle.api.internal.artifacts.dsl.dependencies.ModuleFactoryDelegate"}, {"methodBody": ["METHOD_START", "{", "dependency ( dependencyNotation ,    null )  ;", "}", "METHOD_END"], "methodName": ["dependency"], "fileName": "org.gradle.api.internal.artifacts.dsl.dependencies.ModuleFactoryDelegate"}, {"methodBody": ["METHOD_START", "{", "Dependency   dependency    =    dependencyFactory . createDependency ( dependencyNotation )  ;", "clientModule . addDependency (  (  ( ModuleDependency )     ( dependency )  )  )  ;", "ConfigureUtil . configure ( configureClosure ,    dependency )  ;", "}", "METHOD_END"], "methodName": ["dependency"], "fileName": "org.gradle.api.internal.artifacts.dsl.dependencies.ModuleFactoryDelegate"}, {"methodBody": ["METHOD_START", "{", "clientModule . addDependency ( dependencyFactory . createModule ( dependencyNotation ,    configureClosure )  )  ;", "}", "METHOD_END"], "methodName": ["module"], "fileName": "org.gradle.api.internal.artifacts.dsl.dependencies.ModuleFactoryDelegate"}, {"methodBody": ["METHOD_START", "{", "ModuleFactoryDelegate . ClientModuleConfigureDelegate   delegate    =    new   ModuleFactoryDelegate . ClientModuleConfigureDelegate ( clientModule ,    this )  ;", "configureClosure . setDelegate ( delegate )  ;", "configureClosure . setResolveStrategy ( DELEGATE _ FIRST )  ;", "}", "METHOD_END"], "methodName": ["prepareDelegation"], "fileName": "org.gradle.api.internal.artifacts.dsl.dependencies.ModuleFactoryDelegate"}, {"methodBody": ["METHOD_START", "{", "final   String   dependencyNotation 1     =     \" someNotation 1  \"  ;", "final   String   dependencyNotation 2     =     \" someNotation 2  \"  ;", "final   ModuleDependency   dependencyDummy 1     =    context . mock ( ModuleDependency . class ,     \" dep 1  \"  )  ;", "final   ModuleDependency   dependencyDummy 2     =    context . mock ( ModuleDependency . class ,     \" dep 2  \"  )  ;", "letFactoryStubReturnDependency ( dependencyNotation 1  ,    dependencyDummy 1  )  ;", "letFactoryStubReturnDependency ( dependencyNotation 2  ,    dependencyDummy 2  )  ;", "m . dependencies (  (  ( Object [  ]  )     ( WrapUtil . toArray ( dependencyNotation 1  ,    dependencyNotation 2  )  )  )  )  ;", "assertThat ( clientModule . getDependencies (  )  ,    Matchers . equalTo ( WrapUtil . toSet ( dependencyDummy 1  ,    dependencyDummy 2  )  )  )  ;", "}", "METHOD_END"], "methodName": ["dependencies"], "fileName": "org.gradle.api.internal.artifacts.dsl.dependencies.ModuleFactoryDelegateTest"}, {"methodBody": ["METHOD_START", "{", "final   String   dependencyNotation    =     \" someNotation \"  ;", "final   ModuleDependency   dependencyDummy    =    context . mock ( ModuleDependency . class )  ;", "letFactoryStubReturnDependency ( dependencyNotation ,    dependencyDummy )  ;", "m . dependency ( dependencyNotation )  ;", "assertThat ( clientModule . getDependencies (  )  ,    Matchers . equalTo ( WrapUtil . toSet ( dependencyDummy )  )  )  ;", "}", "METHOD_END"], "methodName": ["dependency"], "fileName": "org.gradle.api.internal.artifacts.dsl.dependencies.ModuleFactoryDelegateTest"}, {"methodBody": ["METHOD_START", "{", "final   String   dependencyNotation    =     \" someNotation \"  ;", "final   Closure   configureClosure    =    TestUtil . toClosure (  \"  {  }  \"  )  ;", "final   ModuleDependency   dependencyDummy    =    context . mock ( ModuleDependency . class )  ;", "letFactoryStubReturnDependency ( dependencyNotation ,    dependencyDummy )  ;", "m . dependency ( dependencyNotation ,    configureClosure )  ;", "assertThat ( clientModule . getDependencies (  )  ,    Matchers . equalTo ( WrapUtil . toSet ( dependencyDummy )  )  )  ;", "}", "METHOD_END"], "methodName": ["dependencyWithClosure"], "fileName": "org.gradle.api.internal.artifacts.dsl.dependencies.ModuleFactoryDelegateTest"}, {"methodBody": ["METHOD_START", "{", "context . checking ( new   Expectations (  )     {", "{", "allowing ( yFactoryStub )  . createDependency ( yNotation )  ;", "will ( returnValue ( yDummy )  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["letFactoryStubReturnDependency"], "fileName": "org.gradle.api.internal.artifacts.dsl.dependencies.ModuleFactoryDelegateTest"}, {"methodBody": ["METHOD_START", "{", "final   String   clientModuleNotation    =     \" someNotation \"  ;", "final   Closure   configureClosure    =    TestUtil . toClosure (  \"  {  }  \"  )  ;", "final   ClientModule   clientModuleDummy    =    context . mock ( ClientModule . class )  ;", "context . checking ( new   Expectations (  )     {", "{", "allowing ( dependencyFactoryStub )  . createModule ( clientModuleNotation ,    configureClosure )  ;", "will ( returnValue ( clientModuleDummy )  )  ;", "}", "}  )  ;", "m . module ( clientModuleNotation ,    configureClosure )  ;", "assertThat ( this . clientModule . getDependencies (  )  ,    Matchers . equalTo ( WrapUtil .  < ModuleDependency > toSet ( clientModuleDummy )  )  )  ;", "}", "METHOD_END"], "methodName": ["module"], "fileName": "org.gradle.api.internal.artifacts.dsl.dependencies.ModuleFactoryDelegateTest"}, {"methodBody": ["METHOD_START", "{", "String   actualArtifactType    =    artifactType ;", "if    ( actualArtifactType    =  =    null )     {", "if    ( classifier    !  =    null )     {", "actualArtifactType    =    DependencyArtifact . DEFAULT _ TYPE ;", "}", "} else    {", "moduleDependency . setTransitive ( false )  ;", "}", "if    ( actualArtifactType    !  =    null )     {", "moduleDependency . addArtifact ( new   ependencies . DefaultDependencyArtifact ( moduleDependency . getName (  )  ,    actualArtifactType ,    actualArtifactType ,    classifier ,    null )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addExplicitArtifactsIfDefined"], "fileName": "org.gradle.api.internal.artifacts.dsl.dependencies.ModuleFactoryHelper"}, {"methodBody": ["METHOD_START", "{", "return   artifacts ;", "}", "METHOD_END"], "methodName": ["getArtifacts"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ArtifactCollectingVisitor"}, {"methodBody": ["METHOD_START", "{", "if    (  ( parent )     =  =    null )     {", "return   String . valueOf ( version )  ;", "}", "return    (  ( parent . getFormattedVersion (  )  )     +     '  .  '  )     +     ( String . valueOf ( version )  )  ;", "}", "METHOD_END"], "methodName": ["getFormattedVersion"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.CacheLayout"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   key    =    new   StringBuilder (  )  ;", "keypend ( name )  ;", "keypend (  \"  -  \"  )  ;", "keypend ( getFormattedVersion (  )  )  ;", "return   key . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getKey"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.CacheLayout"}, {"methodBody": ["METHOD_START", "{", "return   new   File ( parentDir ,    getKey (  )  )  ;", "}", "METHOD_END"], "methodName": ["getPath"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.CacheLayout"}, {"methodBody": ["METHOD_START", "{", "return   VersionNumber . parse ( getFormattedVersion (  )  )  ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.CacheLayout"}, {"methodBody": ["METHOD_START", "{", "return   cacheLayout . getPath ( getCacheDir (  )  )  ;", "}", "METHOD_END"], "methodName": ["createCacheRelativeDir"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultArtifactCacheMetadata"}, {"methodBody": ["METHOD_START", "{", "DefaultConfigurationResolver . ArtifactResolveState   resolveState    =     (  ( DefaultConfigurationResolver . ArtifactResolveState )     ( results . getArtifactResolveState (  )  )  )  ;", "ResolvedGraphResults   graphResults    =    resolveState . graphResults ;", "VisitedArtifactsResults   artifactResults    =    resolveState . artifactsResults ;", "TransientConfigurationResultsBuilder   transientConfigurationResultsBuilder    =    resolveState . transientConfigurationResultsBuilder ;", "TransientConfigurationResultsLoader   transientConfigurationResultsFactory    =    new   TransientConfigurationResultsLoader ( transientConfigurationResultsBuilder ,    graphResults )  ;", "DefaultLenientConfiguration   result    =    new   DefaultLenientConfiguration ( configuration ,    resolveState . failures ,    artifactResults ,    resolveState . fileDependencyResults ,    transientConfigurationResultsFactory ,    artifactTransforms ,    buildOperationExecutor )  ;", "results . artifactsResolved ( new   DefaultResolvedConfiguration ( result )  ,    result )  ;", "}", "METHOD_END"], "methodName": ["resolveArtifacts"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultConfigurationResolver"}, {"methodBody": ["METHOD_START", "{", "List < ResolutionAwareRepository >    resolutionAwareRepositories    =    CollectionUtils . collect ( repositories ,    Transformers . cast ( ResolutionAwareRepository . class )  )  ;", "StoreSet   stores    =    storeFactory . createStoreSet (  )  ;", "BinaryStore   oldModelStore    =    stores . nextBinaryStore (  )  ;", "Store < TransientConfigurationResults >    oldModelCache    =    stores . oldModelCache (  )  ;", "TransientConfigurationResultsBuilder   oldTransientModelBuilder    =    new   TransientConfigurationResultsBuilder ( oldModelStore ,    oldModelCache ,    moduleIdentifierFactory ,    buildOperationExecutor )  ;", "DefaultResolvedConfigurationBuilder   oldModelBuilder    =    new   DefaultResolvedConfigurationBuilder ( oldTransientModelBuilder )  ;", "ResolvedConfigurationDependencyGraphVisitor   oldModelVisitor    =    new   ResolvedConfigurationDependencyGraphVisitor ( oldModelBuilder )  ;", "BinaryStore   newModelStore    =    stores . nextBinaryStore (  )  ;", "Store < ResolvedComponentResult >    newModelCache    =    stores . newModelCache (  )  ;", "StreamingResolutionResultBuilder   newModelBuilder    =    new   StreamingResolutionResultBuilder ( newModelStore ,    newModelCache ,    moduleIdentifierFactory ,    attributeContainerSerializer )  ;", "ResolvedLocalComponentsResultGraphVisitor   localComponentsVisitor    =    new   ResolvedLocalComponentsResultGraphVisitor ( buildIdentity . getCurrentBuild (  )  )  ;", "DefaultResolvedArtifactsBuilder   artifactsBuilder    =    new   DefaultResolvedArtifactsBuilder ( buildIdentity . getCurrentBuild (  )  ,    buildProjectDependencies ,    configuration . getResolutionStrategy (  )  . getSortOrder (  )  )  ;", "FileDependencyCollectingGraphVisitor   fileDependencyVisitor    =    new   FileDependencyCollectingGraphVisitor (  )  ;", "ResolutionFailureCollector   failureCollector    =    new   ResolutionFailureCollector ( componentSelectorConverter )  ;", "DependencyGraphVisitor   graphVisitor    =    new   CompositeDependencyGraphVisitor ( newModelBuilder ,    localComponentsVisitor ,    failureCollector )  ;", "DependencyArtifactsVisitor   artifactsVisitor ;", "DependencyLockingArtifactVisitor   lockingVisitor    =    null ;", "if    ( configuration . getResolutionStrategy (  )  . isDependencyLockingEnabled (  )  )     {", "lockingVisitor    =    new   DependencyLockingArtifactVisitor ( configuration . getName (  )  ,    configuration . getResolutionStrategy (  )  . getDependencyLockingProvider (  )  )  ;", "artifactsVisitor    =    new   CompositeDependencyArtifactsVisitor ( oldModelVisitor ,    fileDependencyVisitor ,    artifactsBuilder ,    lockingVisitor )  ;", "} else    {", "artifactsVisitor    =    new   CompositeDependencyArtifactsVisitor ( oldModelVisitor ,    fileDependencyVisitor ,    artifactsBuilder )  ;", "}", "resolver . resolve ( configuration ,    resolutionAwareRepositories ,    metadataHandler ,    Specs .  < DependencyMetadata > satisfyAll (  )  ,    graphVisitor ,    artifactsVisitor ,    attributesSchema ,    artifactTypeRegistry )  ;", "VisitedArtifactsResults   artifactsResults    =    artifactsBuilder . complete (  )  ;", "VisitedFileDependencyResults   fileDependencyResults    =    fileDependencyVisitor . complete (  )  ;", "ResolvedGraphResults   graphResults    =    oldModelBuilder . complete (  )  ;", "Set < UnresolvedDependency >    failures    =    failureCollector . complete (  )  ;", "results . graphResolved ( newModelBuilder . complete (  )  ,    localComponentsVisitor ,    new   BuildDependenciesOnlyVisitedArtifactSet ( failures ,    artifactsResults ,    artifactTransforms )  )  ;", "results . retainState ( new    . ArtifactResolveState ( graphResults ,    artifactsResults ,    fileDependencyResults ,    failures ,    oldTransientModelBuilder )  )  ;", "if    (  (  ( lockingVisitor    !  =    null )     &  &     (  !  ( results . hasError (  )  )  )  )     &  &     ( failures . isEmpty (  )  )  )     {", "lockingVisitor . complete (  )  ;", "}", "}", "METHOD_END"], "methodName": ["resolveGraph"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultConfigurationResolver"}, {"methodBody": ["METHOD_START", "{", "lock . lock (  )  ;", "try    {", "if    (  !  ( cached . isEmpty (  )  )  )     {", "return   cached . removeFirst (  )  ;", "}", "if    (  !  ( messageAdapterAttached )  )     {", "Message . setLogger ( new   IvyLoggingAdaper (  )  )  ;", "messageAdapterAttached    =    true ;", "}", "}    finally    {", "lock . unlock (  )  ;", "}", "return   Ivy . newInstance ( new   IvySettings (  )  )  ;", "}", "METHOD_END"], "methodName": ["getIvy"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultIvyContextManager"}, {"methodBody": ["METHOD_START", "{", "ivy . getSettings (  )  . getResolvers (  )  . clear (  )  ;", "ivy . getSettings (  )  . setDefaultResolver ( null )  ;", "lock . lock (  )  ;", "try    {", "if    (  ( cached . size (  )  )     <     (  . MAX _ CACHED _ IVY _ INSTANCES )  )     {", "cached . add ( ivy )  ;", "}", "}    finally    {", "lock . unlock (  )  ;", "}", "}", "METHOD_END"], "methodName": ["releaseIvy"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultIvyContextManager"}, {"methodBody": ["METHOD_START", "{", "withIvy ( Transformers . toTransformer ( action )  )  ;", "}", "METHOD_END"], "methodName": ["withIvy"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultIvyContextManager"}, {"methodBody": ["METHOD_START", "{", "Integer   currentDepth    =    depth . get (  )  ;", "if    ( currentDepth    !  =    null )     {", "depth . set (  ( currentDepth    +     1  )  )  ;", "try    {", "return   action . transform (  . getContext (  )  . getIvy (  )  )  ;", "}    finally    {", "depth . set ( currentDepth )  ;", "}", "}", ". pushNewContext (  )  ;", "try    {", "depth . set (  1  )  ;", "try    {", "Ivy   ivy    =    getIvy (  )  ;", "try    {", ". getContext (  )  . setIvy ( ivy )  ;", "return   action . transform ( ivy )  ;", "}    finally    {", "releaseIvy ( ivy )  ;", "}", "}    finally    {", "depth . set ( null )  ;", "}", "}    finally    {", ". popContext (  )  ;", "}", "}", "METHOD_END"], "methodName": ["withIvy"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultIvyContextManager"}, {"methodBody": ["METHOD_START", "{", "Map < QName ,    String >    map    =    new   LinkedHashMap < QName ,    String >  (  )  ;", "for    ( Map . Entry < NamespaceId ,    String >    entry    :    e . entrySet (  )  )     {", "map . put ( new   QName ( entry . getKey (  )  . getNamespace (  )  ,    entry . getKey (  )  . getName (  )  )  ,    entry . getValue (  )  )  ;", "}", "return   Collections . unmodifiableMap ( map )  ;", "}", "METHOD_END"], "methodName": ["asMap"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultIvyExtraInfo"}, {"methodBody": ["METHOD_START", "{", "List < Map . Entry < NamespaceId ,    String >  >    foundEntries    =    new   ArrayList < Map . Entry < NamespaceId ,    String >  >  (  )  ;", "for    ( Map . Entry < NamespaceId ,    String >    entry    :    extraInfo . entrySet (  )  )     {", "if    ( entry . getKey (  )  . getName (  )  . equals ( name )  )     {", "foundEntries . add ( entry )  ;", "}", "}", "if    (  ( foundEntries . size (  )  )     >     1  )     {", "String   allNamespaces    =    Joiner . on (  \"  ,     \"  )  . join ( CollectionUtils . collect ( foundEntries ,    new   Transformer < String ,    Map . Entry < NamespaceId ,    String >  >  (  )     {", "public   String   transform ( Map . Entry < NamespaceId ,    String >    original )     {", "return   original . getKey (  )  . getNamespace (  )  ;", "}", "}  )  )  ;", "throw   new   InvalidUserDataException ( String . format (  \" Cannot   get   extra   info   element   named    '  % s '    by   name   since   elements   with   this   name   were   found   from   multiple   namespaces    (  % s )  .       Use   get ( String   namespace ,    String   name )    instead .  \"  ,    name ,    allNamespaces )  )  ;", "}", "return    ( foundEntries . size (  )  )     =  =     0     ?    null    :    foundEntries . get (  0  )  . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultIvyExtraInfo"}, {"methodBody": ["METHOD_START", "{", "return   extraInfo . get ( new   NamespaceId ( namespace ,    name )  )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultIvyExtraInfo"}, {"methodBody": ["METHOD_START", "{", "return   branch ;", "}", "METHOD_END"], "methodName": ["getBranch"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultIvyModuleDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   extraInfo ;", "}", "METHOD_END"], "methodName": ["getExtraInfo"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultIvyModuleDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   ivyStatus ;", "}", "METHOD_END"], "methodName": ["getIvyStatus"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultIvyModuleDescriptor"}, {"methodBody": ["METHOD_START", "{", "Set < ResolvedDependency >    resolvedElements    =    new   LinkedHashSet < ResolvedDependency >  (  )  ;", "Deque < ResolvedDependency >    workQueue    =    new   LinkedList < ResolvedDependency >  (  )  ;", "workQueue . addAll ( loadTransientGraphResults ( getSelectedA (  )  )  . getRootNode (  )  . getPublicView (  )  . getChildren (  )  )  ;", "while    (  !  ( workQueue . isEmpty (  )  )  )     {", "ResolvedDependency   item    =    workQueue . removeFirst (  )  ;", "if    ( resolvedElements . add ( item )  )     {", "final   Set < ResolvedDependency >    children    =    item . getChildren (  )  ;", "if    ( children    !  =    null )     {", "workQueue . addAll ( children )  ;", "}", "}", "}", "return   resolvedElements ;", "}", "METHOD_END"], "methodName": ["getAllModuleDependencies"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultLenientConfiguration"}, {"methodBody": ["METHOD_START", "{", "DefaultLenientConfiguration . LenientArtifactCollectingVisitor   visitor    =    new   DefaultLenientConfiguration . LenientArtifactCollectingVisitor (  )  ;", "visitArtifactsWithBuildOperation ( dependencySpec ,    getSelectedArtifacts (  )  ,    fileDependencyResults ,    visitor )  ;", "return   visitor . artifacts ;", "}", "METHOD_END"], "methodName": ["getArtifacts"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultLenientConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   configuration ;", "}", "METHOD_END"], "methodName": ["getConfiguration"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultLenientConfiguration"}, {"methodBody": ["METHOD_START", "{", "List < Throwable >    failures    =    new   ArrayList < Throwable >  (  )  ;", "for    ( UnresolvedDependency   unresolvedDependency    :    unresolvedDependencies )     {", "failures . add ( unresolvedDependency . getProblem (  )  )  ;", "}", "return   new   ResolveException ( c . getDisplayName (  )  ,    failures )  ;", "}", "METHOD_END"], "methodName": ["getFailure"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultLenientConfiguration"}, {"methodBody": ["METHOD_START", "{", "DefaultLenientConfiguration . LenientFilesAndArtifactResolveVisitor   visitor    =    new   DefaultLenientConfiguration . LenientFilesAndArtifactResolveVisitor (  )  ;", "visitArtifactsWithBuildOperation ( dependencySpec ,    getSelectedArtifacts (  )  ,    fileDependencyResults ,    visitor )  ;", "return   visitor . files ;", "}", "METHOD_END"], "methodName": ["getFiles"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultLenientConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   getFirstLevelModuleDependencies ( SATISFIES _ ALL )  ;", "}", "METHOD_END"], "methodName": ["getFirstLevelModuleDependencies"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultLenientConfiguration"}, {"methodBody": ["METHOD_START", "{", "Set < ResolvedDependency >    matches    =    new   LinkedHashSet < ResolvedDependency >  (  )  ;", "for    ( DependencyGraphNodeRes   node    :    getFirstLevelNodes ( dependencySpec )  )     {", "matches . add ( node . getPublicView (  )  )  ;", "}", "return   matches ;", "}", "METHOD_END"], "methodName": ["getFirstLevelModuleDependencies"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultLenientConfiguration"}, {"methodBody": ["METHOD_START", "{", "Set < DependencyGraphNodeResult >    matches    =    new   LinkedHashSet < DependencyGraphNodeResult >  (  )  ;", "TransResults   graphResults    =    loadTransientGraphResults ( getSelectedArtifacts (  )  )  ;", "for    ( Map . Entry < Dependency ,    DependencyGraphNodeResult >    entry    :    graphResults . getFirstLevelDependencies (  )  . entrySet (  )  )     {", "if    ( dependencySpec . isSatisfiedBy ( entry . getKey (  )  )  )     {", "matches . add ( entry . getValue (  )  )  ;", "}", "}", "return   matches ;", "}", "METHOD_END"], "methodName": ["getFirstLevelNodes"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultLenientConfiguration"}, {"methodBody": ["METHOD_START", "{", "if    (  ( artifactsForThisConfiguration )     =  =    null )     {", "artifactsForThisConfiguration    =    artifactResults . select ( Specs .  < ComponentIdentifier > satisfyAll (  )  ,    artifactTransforms . variantSelector ( implicitAttributes ,    false )  )  ;", "}", "return   artifactsForThisConfiguration ;", "}", "METHOD_END"], "methodName": ["getSelectedArtifacts"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultLenientConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   unresolvedDependencies ;", "}", "METHOD_END"], "methodName": ["getUnresolvedModuleDependencies"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultLenientConfiguration"}, {"methodBody": ["METHOD_START", "{", "return    ( unresolvedDependencies . size (  )  )     >     0  ;", "}", "METHOD_END"], "methodName": ["hasError"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultLenientConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   transientConfigurationResultsFactory . create ( artifactResults )  ;", "}", "METHOD_END"], "methodName": ["loadTransientGraphResults"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultLenientConfiguration"}, {"methodBody": ["METHOD_START", "{", "if    ( hasError (  )  )     {", "throw   getFailure (  )  ;", "}", "}", "METHOD_END"], "methodName": ["rethrowFailure"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultLenientConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   select ( Specs .  < Dependency > satisfyAll (  )  ,    implicitAttributes ,    Specs .  < ComponentIdentifier > satisfyAll (  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["select"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultLenientConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   select ( dependencySpec ,    implicitAttributes ,    Specs .  < ComponentIdentifier > satisfyAll (  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["select"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultLenientConfiguration"}, {"methodBody": ["METHOD_START", "{", "if    ( dependencySpec    =  =     ( Specs . SATISFIES _ ALL )  )     {", "ParallelResolveArtifactSet . wrap ( artifactResults . getArtifacts (  )  ,    buildOperationExecutor )  . visit ( visitor )  ;", "return ;", "}", "List < ResolvedArtifactSet >    artifactSets    =    new   ArrayList < ResolvedArtifactSet >  (  )  ;", "if    ( visitor . includeFiles (  )  )     {", "for    ( Map . Entry < FileCollectionDependency ,    Integer >    entry    :    fileDependencyResults . getFirstLevelFiles (  )  . entrySet (  )  )     {", "if    ( dependencySpec . isSatisfiedBy ( entry . getKey (  )  )  )     {", "artifactSets . add ( artifactResults . getArtifactsWithId ( entry . getValue (  )  )  )  ;", "}", "}", "}", "CachingDirectedGraphWalker < DependencyGraphNodeResult ,    ResolvedArtifact >    walker    =    new   CachingDirectedGraphWalker < DependencyGraphNodeResult ,    ResolvedArtifact >  ( new    . ResolvedDependencyArtifactsGraph ( artifactSets )  )  ;", "for    ( DependencyGraphNodeResult   node    :    getFirstLevelNodes ( dependencySpec )  )     {", "walker . add ( node )  ;", "}", "walker . findValues (  )  ;", "ParallelResolveArtifactSet . wrap ( CompositeResolvedArtifactSet . of ( artifactSets )  ,    buildOperationExecutor )  . visit ( visitor )  ;", "}", "METHOD_END"], "methodName": ["visitArtifacts"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultLenientConfiguration"}, {"methodBody": ["METHOD_START", "{", "buildOperationExecutor . run ( new   RunnableBuildOperation (  )     {", "@ Override", "public   void   run ( BuildOperationContext   context )     {", "visitArtifacts ( dependencySpec ,    artifactResults ,    fileDependencyResults ,    visitor )  ;", "context . setResult ( ResolveArtifactsBuildOperationType . RESULT )  ;", "}", "@ Override", "public   Builder   description (  )     {", "String   displayName    =     \" Resolve   files   of    \"     +     ( c . getIdentityPath (  )  )  ;", "return   BuildOperationDescriptor . displayName ( displayName )  . progressDisplayName ( displayName )  . details ( new   ResolveArtifactsBuildOperationType . DetailsImpl ( c . getPath (  )  )  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["visitArtifactsWithBuildOperation"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultLenientConfiguration"}, {"methodBody": ["METHOD_START", "{", "ResolvedFilesCollectingVisitor   visitor    =    new   ResolvedFilesCollectingVisitor (  )  ;", "configuration . select ( dependencySpec )  . visitArtifacts ( visitor ,    false )  ;", "Collection < Throwable >    failures    =    visitor . getFailures (  )  ;", "if    (  !  ( failures . isEmpty (  )  )  )     {", "throw   new   DefaultLenient . ArtifactResolveException (  \" files \"  ,    configuration . get (  )  . getIdentityPath (  )  . toString (  )  ,    configuration . get (  )  . getDisplayName (  )  ,    failures )  ;", "}", "return   visitor . getFiles (  )  ;", "}", "METHOD_END"], "methodName": ["getFiles"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultResolvedConfiguration"}, {"methodBody": ["METHOD_START", "{", "rethrowFailure (  )  ;", "return   c . getFirstLevelModuleDependencies (  )  ;", "}", "METHOD_END"], "methodName": ["getFirstLevelModuleDependencies"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultResolvedConfiguration"}, {"methodBody": ["METHOD_START", "{", "rethrowFailure (  )  ;", "return   c . getFirstLevelModuleDependencies ( dependencySpec )  ;", "}", "METHOD_END"], "methodName": ["getFirstLevelModuleDependencies"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultResolvedConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   configuration ;", "}", "METHOD_END"], "methodName": ["getLenientConfiguration"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultResolvedConfiguration"}, {"methodBody": ["METHOD_START", "{", "rethrowFailure (  )  ;", "ArtifactCollectingVisitor   visitor    =    new   ArtifactCollectingVisitor (  )  ;", "c . select (  )  . visitArtifacts ( visitor ,    false )  ;", "return   visitor . getArtifacts (  )  ;", "}", "METHOD_END"], "methodName": ["getResolvedArtifacts"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultResolvedConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   configuration . hasError (  )  ;", "}", "METHOD_END"], "methodName": ["hasError"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultResolvedConfiguration"}, {"methodBody": ["METHOD_START", "{", "configuration . rethrowFailure (  )  ;", "}", "METHOD_END"], "methodName": ["rethrowFailure"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultResolvedConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   problem ;", "}", "METHOD_END"], "methodName": ["getProblem"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultUnresolvedDependency"}, {"methodBody": ["METHOD_START", "{", "return   selector ;", "}", "METHOD_END"], "methodName": ["getSelector"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultUnresolvedDependency"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  ( selector . getGroup (  )  )     +     \"  :  \"  )     +     ( selector . getName (  )  )  )     +     \"  :  \"  )     +     ( selector . getVersion (  )  )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.DefaultUnresolvedDependency"}, {"methodBody": ["METHOD_START", "{", "if    ( e   instanceof   ResolveException )     {", "return    (  ( ResolveException )     ( e )  )  ;", "}", "return   new   ResolveException ( resolveContext . getDisplayName (  )  ,    e )  ;", "}", "METHOD_END"], "methodName": ["wrapException"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ErrorHandlingConfigurationResolver"}, {"methodBody": ["METHOD_START", "{", "logger . info ( msg )  ;", "}", "METHOD_END"], "methodName": ["doEndProgress"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.IvyLoggingAdaper"}, {"methodBody": ["METHOD_START", "{", "logger . log ( ANT _ IVY _  2  _ SLF 4 J . get ( level )  ,    msg )  ;", "}", "METHOD_END"], "methodName": ["log"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.IvyLoggingAdaper"}, {"methodBody": ["METHOD_START", "{", "log ( msg ,    level )  ;", "}", "METHOD_END"], "methodName": ["rawlog"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.IvyLoggingAdaper"}, {"methodBody": ["METHOD_START", "{", "synchronized ( IvyUtil . MODULE _ ID _ LOCK )     {", "return   ModuleId . newInstance ( org ,    name )  ;", "}", "}", "METHOD_END"], "methodName": ["createModuleId"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.IvyUtil"}, {"methodBody": ["METHOD_START", "{", "return   IvyUtil . createModuleRevisionId ( IvyUtil . emptyStringIfNull ( group )  ,    name ,    null ,    IvyUtil . emptyStringIfNull ( version )  ,    Collections . emptyMap (  )  )  ;", "}", "METHOD_END"], "methodName": ["createModuleRevisionId"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.IvyUtil"}, {"methodBody": ["METHOD_START", "{", "return   IvyUtil . createModuleRevisionId ( org ,    name ,    branch ,    rev ,    extraAttributes ,    true )  ;", "}", "METHOD_END"], "methodName": ["createModuleRevisionId"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.IvyUtil"}, {"methodBody": ["METHOD_START", "{", "synchronized ( IvyUtil . MODULE _ ID _ LOCK )     {", "return   ModuleRevisionId . newInstance ( org ,    name ,    branch ,    revConstraint ,    extraAttributes ,    replaceNullBranchWithDefault )  ;", "}", "}", "METHOD_END"], "methodName": ["createModuleRevisionId"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.IvyUtil"}, {"methodBody": ["METHOD_START", "{", "return   IvyUtil . createModuleRevisionId ( id . getGroup (  )  ,    id . getModule (  )  ,    id . getVersion (  )  )  ;", "}", "METHOD_END"], "methodName": ["createModuleRevisionId"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.IvyUtil"}, {"methodBody": ["METHOD_START", "{", "return   GUtil . elvis ( value ,     \"  \"  )  ;", "}", "METHOD_END"], "methodName": ["emptyStringIfNull"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.IvyUtil"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.NamespaceId"}, {"methodBody": ["METHOD_START", "{", "return   namespace ;", "}", "METHOD_END"], "methodName": ["getNamespace"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.NamespaceId"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.NamespaceId"}, {"methodBody": ["METHOD_START", "{", "this . namespace    =    namespace ;", "}", "METHOD_END"], "methodName": ["setNamespace"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.NamespaceId"}, {"methodBody": ["METHOD_START", "{", "return   artifacts ;", "}", "METHOD_END"], "methodName": ["getArtifacts"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ResolvedArtifactCollectingVisitor"}, {"methodBody": ["METHOD_START", "{", "return   failures ;", "}", "METHOD_END"], "methodName": ["getFailures"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ResolvedArtifactCollectingVisitor"}, {"methodBody": ["METHOD_START", "{", "return   failures ;", "}", "METHOD_END"], "methodName": ["getFailures"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ResolvedFilesCollectingVisitor"}, {"methodBody": ["METHOD_START", "{", "return   files ;", "}", "METHOD_END"], "methodName": ["getFiles"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ResolvedFilesCollectingVisitor"}, {"methodBody": ["METHOD_START", "{", "Module   module    =    configuration . getModule (  )  ;", "ModuleVersionIdentifier   id    =    moduleIdentifierFactory . moduleWithVersion ( module )  ;", "ComponentIdentifier   componentIdentifier    =    componentIdentifierFactory . createComponentIdentifier ( module )  ;", "ResolutionResult   emptyResult    =    DefaultResolutionResultBuilder . empty ( id ,    componentIdentifier )  ;", "ResolvedLocalComponentsResult   emptyProjectResult    =    new   ResolvedLocalComponentsResultGraphVisitor ( thisBuild . getCurrentBuild (  )  )  ;", "results . graphResolved ( emptyResult ,    emptyProjectResult ,    new    . EmptyResults (  )  )  ;", "}", "METHOD_END"], "methodName": ["emptyGraph"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ShortCircuitEmptyConfigurationResolver"}, {"methodBody": ["METHOD_START", "{", "return   metadata . artifact (  \" jar \"  ,     \" jar \"  ,    null )  ;", "}", "METHOD_END"], "methodName": ["createClientModuleArtifact"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.clientmodule.ClientModuleResolver"}, {"methodBody": ["METHOD_START", "{", "List < ModuleDependencyMetadata >    dependencies    =    Lists . newArrayList (  )  ;", "for    ( ModuleDependency   moduleDependency    :    c . getDependencies (  )  )     {", "ModuleDependencyMetadata   dependencyMetadata    =    createDependencyMetadata ( identifier ,    moduleDependency )  ;", "dependencies . add ( dependencyMetadata )  ;", "}", "return   dependencies ;", "}", "METHOD_END"], "methodName": ["createClientModuleDependencies"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.clientmodule.ClientModuleResolver"}, {"methodBody": ["METHOD_START", "{", "LocalOriginDependencyMetadata   dependencyMetadata    =    dependencyDescriptorFactory . createDependencyDescriptor ( identifier ,    moduleDependency . getTargetConfiguration (  )  ,    null ,    moduleDependency )  ;", "if    ( dependencyMetadata   instanceof   DslOriginDependencyMetadata )     {", "return   new    . ClientModuleDependencyMetadataWrapper (  (  ( DslOriginDependencyMetadata )     ( dependencyMetadata )  )  )  ;", "}", "return   new   ModuleDependencyMetadataWrapper ( dependencyMetadata )  ;", "}", "METHOD_END"], "methodName": ["createDependencyMetadata"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.clientmodule.ClientModuleResolver"}, {"methodBody": ["METHOD_START", "{", "resolver . resolve ( identifier ,    componentOverrideMetadata ,    result )  ;", "if    (  ( result . getFailure (  )  )     !  =    null )     {", "return ;", "}", "ClientModule   clientModule    =    componentOverrideMetadata . getClientModule (  )  ;", "if    ( clientModule    !  =    null )     {", "ModuleComponentResolveMetadata   originalMetadata    =     (  ( ModuleComponentResolveMetadata )     ( result . getMetadata (  )  )  )  ;", "List < ModuleDependencyMetadata >    clientModuleDependencies    =    createClientModuleDependencies ( identifier ,    clientModule )  ;", "ModuleComponentArtifactMetadata   clientModuleArtifact    =    createClientModuleArtifact ( originalMetadata )  ;", ". ClientModuleComponentResolveMetadata   clientModuleMetaData    =    new    . ClientModuleComponentResolveMetadata ( originalMetadata ,    clientModuleArtifact ,    clientModuleDependencies )  ;", "result . setMetadata ( clientModuleMetaData )  ;", "}", "}", "METHOD_END"], "methodName": ["resolve"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.clientmodule.ClientModuleResolver"}, {"methodBody": ["METHOD_START", "{", "ComponentSelectionDescriptorInternal   reason    =    VersionSelectionReasons . SELECTED _ BY _ RULE ;", "if    (  ( customDescription )     !  =    null )     {", "reason    =    reason . withReason ( customDescription )  ;", "}", "return   reason ;", "}", "METHOD_END"], "methodName": ["selectionReason"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.dependencysubstitution.DefaultDependencyResolveDetails"}, {"methodBody": ["METHOD_START", "{", "delegate . useTarget ( useSelector ,    selectionReason (  )  )  ;", "}", "METHOD_END"], "methodName": ["useComponentSelector"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.dependencysubstitution.DefaultDependencyResolveDetails"}, {"methodBody": ["METHOD_START", "{", "if    ( componentSelector   instanceof   UnversionedModuleComponentSelector )     {", "throw   new   InvalidUserDataException (  \" Must   specify   version   for   target   of   dependency    \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["validateTarget"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.dependencysubstitution.DefaultDependencySubstitution"}, {"methodBody": ["METHOD_START", "{", "mutationValidator . validateMutation ( MutationValidator . MutationType . STRATEGY )  ;", "Rules . add ( rule )  ;", "}", "METHOD_END"], "methodName": ["addRule"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.dependencysubstitution.DefaultDependencySubstitutions"}, {"methodBody": ["METHOD_START", "{", "NotationParser < Object ,    ComponentSelector >    projectSelectorNotationParser    =    NotationParserBuilder . toType ( ComponentSelector . class )  . fromCharSequence ( new   DefaultDependencySubstitutions . CompositeProjectPathConverter ( build )  )  . toComposite (  )  ;", "return   new   DefaultDependencySubstitutions ( VersionSelectionReasons . COMPOSITE _ BUILD ,    projectSelectorNotationParser ,    moduleIdentifierFactory )  ;", "}", "METHOD_END"], "methodName": ["forIncludedBuild"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.dependencysubstitution.DefaultDependencySubstitutions"}, {"methodBody": ["METHOD_START", "{", "NotationParser < Object ,    ComponentSelector >    projectSelectorNotationParser    =    NotationParserBuilder . toType ( ComponentSelector . class )  . fromCharSequence ( new   DefaultDependencySubstitutions . ProjectPathConverter ( componentIdentifierFactory )  )  . toComposite (  )  ;", "return   new   DefaultDependencySubstitutions ( VersionSelectionReasons . SELECTED _ BY _ RULE ,    projectSelectorNotationParser ,    moduleIdentifierFactory )  ;", "}", "METHOD_END"], "methodName": ["forResolutionStrategy"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.dependencysubstitution.DefaultDependencySubstitutions"}, {"methodBody": ["METHOD_START", "{", "return   NotationParserBuilder . toType ( ComponentSelector . class )  . converter ( new   ModuleSelectorStringNotationConverter ( moduleIdentifierFactory )  )  . toComposite (  )  ;", "}", "METHOD_END"], "methodName": ["moduleSelectorNotationConverter"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.dependencysubstitution.DefaultDependencySubstitutions"}, {"methodBody": ["METHOD_START", "{", "assert   notation    !  =    null ;", "String [  ]    split    =    notation . split (  \"  :  \"  )  ;", "if    (  (  ( split . length )     <     2  )     |  |     (  ( split . length )     >     3  )  )     {", "throw   new   UnsupportedNotationException ( notation )  ;", "}", "String   group    =    ModuleIdentifier . validate ( split [  0  ]  . trim (  )  ,    notation )  ;", "String   name    =    ModuleIdentifier . validate ( split [  1  ]  . trim (  )  ,    notation )  ;", "if    (  ( split . length )     =  =     2  )     {", "return   new   UnversionedModuleComponentSelector ( moduleIdentifierFactory . module ( group ,    name )  )  ;", "}", "String   version    =    split [  2  ]  . trim (  )  ;", "if    (  !  ( GUtil . isTrue ( version )  )  )     {", "throw   new   UnsupportedNotationException ( notation )  ;", "}", "return   DefaultModuleComponentSelector . newSelector ( group ,    name ,    DefaultImmutableVersionConstraint . of ( version )  )  ;", "}", "METHOD_END"], "methodName": ["parseType"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.dependencysubstitution.ModuleSelectorStringNotationConverter"}, {"methodBody": ["METHOD_START", "{", "return   moduleIdentifier ;", "}", "METHOD_END"], "methodName": ["getModuleIdentifier"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.dependencysubstitution.UnversionedModuleComponentSelector"}, {"methodBody": ["METHOD_START", "{", "return   delegate . createMetadataSupplier (  )  ;", "}", "METHOD_END"], "methodName": ["createMetadataSupplier"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.BaseModuleComponentRepository"}, {"methodBody": ["METHOD_START", "{", "return   delegate . getId (  )  ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.BaseModuleComponentRepository"}, {"methodBody": ["METHOD_START", "{", "return   localAccess ;", "}", "METHOD_END"], "methodName": ["getLocalAccess"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.BaseModuleComponentRepository"}, {"methodBody": ["METHOD_START", "{", "return   delegate . getName (  )  ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.BaseModuleComponentRepository"}, {"methodBody": ["METHOD_START", "{", "return   remoteAccess ;", "}", "METHOD_END"], "methodName": ["getRemoteAccess"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.BaseModuleComponentRepository"}, {"methodBody": ["METHOD_START", "{", "return   delegate ;", "}", "METHOD_END"], "methodName": ["getDelegate"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.BaseModuleComponentRepositoryAccess"}, {"methodBody": ["METHOD_START", "{", "return   new   ArtifactAtRepositoryKey ( delegate . getId (  )  ,    id )  ;", "}", "METHOD_END"], "methodName": ["artifactCacheKey"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.CachingModuleComponentRepository"}, {"methodBody": ["METHOD_START", "{", "return    \" artifacts :  \"     +     ( artifactType . name (  )  )  ;", "}", "METHOD_END"], "methodName": ["cacheKey"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.CachingModuleComponentRepository"}, {"methodBody": ["METHOD_START", "{", "return   delegate . createMetadataSupplier (  )  ;", "}", "METHOD_END"], "methodName": ["createMetadataSupplier"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.CachingModuleComponentRepository"}, {"methodBody": ["METHOD_START", "{", "return   moduleIdentifierFactory . module ( requested . getGroup (  )  ,    requested . getModule (  )  )  ;", "}", "METHOD_END"], "methodName": ["getCacheKey"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.CachingModuleComponentRepository"}, {"methodBody": ["METHOD_START", "{", "return   delegate . getId (  )  ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.CachingModuleComponentRepository"}, {"methodBody": ["METHOD_START", "{", "return   locateInCacheRepositoryAccess ;", "}", "METHOD_END"], "methodName": ["getLocalAccess"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.CachingModuleComponentRepository"}, {"methodBody": ["METHOD_START", "{", "return   delegate . getName (  )  ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.CachingModuleComponentRepository"}, {"methodBody": ["METHOD_START", "{", "return   resolveAndCacheRepositoryAccess ;", "}", "METHOD_END"], "methodName": ["getRemoteAccess"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.CachingModuleComponentRepository"}, {"methodBody": ["METHOD_START", "{", "resolveResult . applyTo ( result )  ;", "}", "METHOD_END"], "methodName": ["applyTo"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.ComponentMetaDataResolveState"}, {"methodBody": ["METHOD_START", "{", "return    !  ( searchedRemotely )  ;", "}", "METHOD_END"], "methodName": ["canMakeFurtherAttempts"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.ComponentMetaDataResolveState"}, {"methodBody": ["METHOD_START", "{", "moduleAccess . resolveComponentMetaData ( componentIdentifier ,    componentOverrideMetadata ,    resolveResult )  ;", "if    (  ( resolveResult . getState (  )  )     =  =     ( BuildableModuleResult . State . Resolved )  )     {", "if    ( versionedComponentChooser . isRejectedComponent ( componentIdentifier ,    new   MetadataProvider ( resolveResult )  )  )     {", "resolveResult . missing (  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["process"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.ComponentMetaDataResolveState"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( searchedLocally )  )     {", "searchedLocally    =    true ;", "process ( repository . getLocalAccess (  )  )  ;", "if    ( Result . hasResult (  )  )     {", "if    ( Result . isAuthoritative (  )  )     {", "searchedRemotely    =    true ;", "}", "return   Result ;", "}", "}", "if    (  !  ( searchedRemotely )  )     {", "searchedRemotely    =    true ;", "process ( repository . getRemoteAccess (  )  )  ;", "return   Result ;", "}", "throw   new   IllegalStateException (  )  ;", "}", "METHOD_END"], "methodName": ["resolve"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.ComponentMetaDataResolveState"}, {"methodBody": ["METHOD_START", "{", "if    ( processRules ( specRuleActions ,    withNoInputs ,    selection ,    metadataProvider )  )     {", "processRules ( specRuleActions ,    withInputs ,    selection ,    metadataProvider )  ;", "}", "}", "METHOD_END"], "methodName": ["apply"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.ComponentSelectionRulesProcessor"}, {"methodBody": ["METHOD_START", "{", "if    (  ( inputTypes . size (  )  )     =  =     0  )     {", "return   Collections . emptyList (  )  ;", "}", "if    (  !  ( metadataProvider . resolve (  )  )  )     {", "return   null ;", "}", "List < Object >    inputs    =    new   ArrayList < Object >  ( inputTypes . size (  )  )  ;", "for    ( Class <  ?  >    inputType    :    inputTypes )     {", "if    ( inputType    =  =     ( Metadata . class )  )     {", "inputs . add ( metadataProvider . getMetadata (  )  )  ;", "continue ;", "}", "if    ( inputType    =  =     ( IvyModuleDescriptor . class )  )     {", "inputs . add ( metadataProvider . getIvyModuleDescriptor (  )  )  ;", "continue ;", "}", "throw   new   IllegalStateException (  )  ;", "}", "return   inputs ;", "}", "METHOD_END"], "methodName": ["getInputValues"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.ComponentSelectionRulesProcessor"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( rule . getSpec (  )  . isSatisfiedBy ( selection )  )  )     {", "return ;", "}", "List < Object >    inputValues    =    getInputValues ( rule . getAction (  )  . getInputTypes (  )  ,    metadataProvider )  ;", "if    ( inputValues    =  =    null )     {", "return ;", "}", "if    ( inputValues . contains ( null )  )     {", "return ;", "}", "try    {", "rule . getAction (  )  . execute ( selection ,    inputValues )  ;", "}    catch    ( Exception   e )     {", "throw   new   InvalidUserCodeException ( String . format (  \" There   was   an   error   while   evaluating   a   component   selection   rule   for    % s .  \"  ,    selection . getCandidate (  )  . getDisplayName (  )  )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["processRule"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.ComponentSelectionRulesProcessor"}, {"methodBody": ["METHOD_START", "{", "for    ( SpecRuleAction <  ?    super   ComponentSelection >    rule    :    specRuleActions )     {", "if    ( filter . isSatisfiedBy ( rule )  )     {", "processRule ( rule ,    selection ,    metadataProvider )  ;", "if    ( selection . isRejected (  )  )     {", ". LOGGER . info (  \" Selection   of    {  }    rejected   by   component   selection   rule :     {  }  \"  ,    selection . getCandidate (  )  . getDisplayName (  )  ,    selection . getRejectionReason (  )  )  ;", "return   false ;", "}", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["processRules"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.ComponentSelectionRulesProcessor"}, {"methodBody": ["METHOD_START", "{", "BuildableModuleComponentMetaDataResolveResult   metaDataResult    =    provider . getResult (  )  ;", "switch    ( metaDataResult . getState (  )  )     {", "case   Unknown    :", "result . noMatchFound (  )  ;", "break ;", "case   Missing    :", "result . noMatchFound (  )  ;", "break ;", "case   Failed    :", "result . failed ( metaDataResult . getFailure (  )  )  ;", "break ;", "default    :", "throw   new   IllegalStateException (  \" Unexpected   meta - data   resolution   result .  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["applyTo"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.DefaultVersionedComponentChooser"}, {"methodBody": ["METHOD_START", "{", "return   new   MetadataProvider ( candidate )  ;", "}", "METHOD_END"], "methodName": ["createMetadataProvider"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.DefaultVersionedComponentChooser"}, {"methodBody": ["METHOD_START", "{", "return   componentResolveMetadata . isMissing (  )  ;", "}", "METHOD_END"], "methodName": ["isMissingModuleDescriptor"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.DefaultVersionedComponentChooser"}, {"methodBody": ["METHOD_START", "{", "return    ( rejectedVersionSelector    !  =    null )     &  &     ( rejectedVersionSelector . accept ( candidateIdentifier . getVersion (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["isRejectedByConstraint"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.DefaultVersionedComponentChooser"}, {"methodBody": ["METHOD_START", "{", "ComponentSelectionInternal   selection    =    new   DefaultComponentSelection ( candidateIdentifier )  ;", "rulesProcessor . apply ( selection ,    rules ,    metadataProvider )  ;", "return   selection . isRejected (  )  ;", "}", "METHOD_END"], "methodName": ["isRejectedByRules"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.DefaultVersionedComponentChooser"}, {"methodBody": ["METHOD_START", "{", "return   isRejectedByRules ( candidateIdentifier ,    componentSelectionRules . getRules (  )  ,    metadataProvider )  ;", "}", "METHOD_END"], "methodName": ["isRejectedComponent"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.DefaultVersionedComponentChooser"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( metadataProvider . isUsable (  )  )  )     {", ". applyTo ( metadataProvider ,    result )  ;", "return   true ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["metadataIsNotUsable"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.DefaultVersionedComponentChooser"}, {"methodBody": ["METHOD_START", "{", "if    (  ( one    =  =    null )     |  |     ( two    =  =    null )  )     {", "return   two    =  =    null    ?    one    :    two ;", "}", "int   comparison    =    versionComparator . compare ( new   VersionInfo ( one . getModuleVersionId (  )  . ge (  )  )  ,    new   VersionInfo ( two . getModuleVersionId (  )  . ge (  )  )  )  ;", "if    ( comparison    =  =     0  )     {", "if    (  ( isMissingModuleDescriptor ( one )  )     &  &     (  !  ( isMissingModuleDescriptor ( two )  )  )  )     {", "return   two ;", "}", "return   one ;", "}", "return   comparison    <     0     ?    two    :    one ;", "}", "METHOD_END"], "methodName": ["selectNewestComponent"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.DefaultVersionedComponentChooser"}, {"methodBody": ["METHOD_START", "{", "Collection < SpecRuleAction <  ?    super   ComponentSelection >  >    rules    =    componentSelectionRules . getRules (  )  ;", "for    ( ModuleComponentResolveState   candidate    :    sortLatestFirst ( versions )  )     {", "MetadataProvider   metadataProvider    =     . createMetadataProvider ( candidate )  ;", "boolean   versionMatches    =     . versionMatches ( requestedVersionMatcher ,    candidate ,    metadataProvider )  ;", "if    ( metadataIsNotUsable ( result ,    metadataProvider )  )     {", "return ;", "}", "ModuleComponentIdentifier   candidateId    =    candidate . getId (  )  ;", "if    (  ! versionMatches )     {", "result . notMatched ( candidateId )  ;", "continue ;", "}", "if    ( isRejectedByConstraint ( candidateId ,    rejectedVersionSelector )  )     {", "result . rejectedByConstraint ( candidateId )  ;", "} else", "if    ( isRejectedByRules ( candidateId ,    rules ,    metadataProvider )  )     {", "result . rejectedByRule ( candidateId )  ;", "if    ( requestedVersionMatcher . matchesUniqueVersion (  )  )     {", "break ;", "}", "} else    {", "result . matches ( candidateId )  ;", "return ;", "}", "}", "result . noMatchFound (  )  ;", "}", "METHOD_END"], "methodName": ["selectNewestMatchingComponent"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.DefaultVersionedComponentChooser"}, {"methodBody": ["METHOD_START", "{", "return   CollectionUtils . sort ( listing ,    Collections . reverseOrder ( versionComparator )  )  ;", "}", "METHOD_END"], "methodName": ["sortLatestFirst"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.DefaultVersionedComponentChooser"}, {"methodBody": ["METHOD_START", "{", "if    ( selector . requiresMetadata (  )  )     {", "Metadata   componentMetadata    =    metadataProvider . getMetadata (  )  ;", "return    ( componentMetadata    !  =    null )     &  &     ( selector . accept ( componentMetadata )  )  ;", "} else    {", "return   selector . accept ( component . getVersion (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["versionMatches"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.DefaultVersionedComponentChooser"}, {"methodBody": ["METHOD_START", "{", "repositories . add ( repository )  ;", "repositoryNames . add ( repository . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.DynamicVersionResolver"}, {"methodBody": ["METHOD_START", "{", "if    (  ( one    =  =    null )     |  |     ( two    =  =    null )  )     {", "return   two    =  =    null    ?    one    :    two ;", "}", "return    ( vedComponentChooser . selectNewestComponent ( one . module ,    two . module )  )     =  =     ( one . module )     ?    one    :    two ;", "}", "METHOD_END"], "methodName": ["chooseBest"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.DynamicVersionResolver"}, {"methodBody": ["METHOD_START", "{", "RepositoryChainModuleResolution   best    =    null ;", "while    (  !  ( queue . isEmpty (  )  )  )     {", ". RepositoryResolveState   request    =    queue . removeFirst (  )  ;", "try    {", "request . resolve (  )  ;", "}    catch    ( Throwable   t )     {", "failures . add ( t )  ;", "if    ( ResolveExceptionAnalyzer . isCriticalFailure ( t )  )     {", "queue . clear (  )  ;", "}", "continue ;", "}", "switch    ( request . resolvedVersionMetadata . getState (  )  )     {", "case   Failed    :", "failures . add ( request . resolvedVersionMetadata . getFailure (  )  )  ;", "if    ( ResolveExceptionAnalyzer . isCriticalFailure ( request . resolvedVersionMetadata . getFailure (  )  )  )     {", "queue . clear (  )  ;", "}", "break ;", "case   Missing    :", "case   Unknown    :", "if    ( request . canMakeFurtherAttempts (  )  )     {", "missing . add ( request )  ;", "}", "break ;", "case   Resolved    :", "RepositoryChainModuleResolution   moduleResolution    =    new   RepositoryChainModuleResolution ( request . repository ,    request . resolvedVersionMetadata . getMetaData (  )  )  ;", "best    =    chooseBest ( best ,    moduleResolution )  ;", "break ;", "default    :", "throw   new   IllegalStateException (  (  \" Unexpected   state   for   resolution :     \"     +     ( request . resolvedVersionMetadata . getState (  )  )  )  )  ;", "}", "}", "return   best ;", "}", "METHOD_END"], "methodName": ["findLatestModule"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.DynamicVersionResolver"}, {"methodBody": ["METHOD_START", "{", "LinkedList < DynamicVersionResolver . RepositoryResolveState >    queue    =    new   LinkedList < DynamicVersionResolver . RepositoryResolveState >  (  )  ;", "queue . addAll ( resolveStates )  ;", "LinkedList < DynamicVersionResolver . RepositoryResolveState >    missing    =    new   LinkedList < DynamicVersionResolver . RepositoryResolveState >  (  )  ;", "RepositoryChainModuleResolution   best    =    findLatestModule ( queue ,    failures ,    missing )  ;", "if    ( ResolveExceptionAnalyzer . hasCriticalFailure ( failures )  )     {", "return   null ;", "}", "if    ( best    !  =    null )     {", "return   best ;", "}", "queue . addAll ( missing )  ;", "missing . clear (  )  ;", "return   findLatestModule ( queue ,    failures ,    missing )  ;", "}", "METHOD_END"], "methodName": ["findLatestModule"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.DynamicVersionResolver"}, {"methodBody": ["METHOD_START", "{", "Set < String >    unmatchedVersions    =    new   LinkedHashSet < String >  (  )  ;", "Set < String >    rejectedVersions    =    new   LinkedHashSet < String >  (  )  ;", "for    (  . RepositoryResolveState   resolveState    :    resolveStates )     {", "resolveState . applyTo ( result ,    unmatchedVersions ,    rejectedVersions )  ;", "}", "if    ( result . isRejected (  )  )     {", "return ;", "}", "result . failed ( new   ModuleVersionNotFoundException ( requested ,    result . getAttempted (  )  ,    unmatchedVersions ,    rejectedVersions )  )  ;", "}", "METHOD_END"], "methodName": ["notFound"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.DynamicVersionResolver"}, {"methodBody": ["METHOD_START", "{", "ModuleComponentSelector   requested    =    dependency . getSelector (  )  ;", ". LOGGER . debug (  \" Attempting   to   resolve   version   for    {  }    using   repositories    {  }  \"  ,    requested ,    repositoryNames )  ;", "List < Throwable >    errors    =    new   ArrayList < Throwable >  (  )  ;", "List <  . RepositoryResolveState >    resolveStates    =    Lists . newArrayListWithCapacity ( repositories . size (  )  )  ;", "for    ( ModuleComponentRepository   repository    :    repositories )     {", "resolveStates . add ( new    . RepositoryResolveState ( versionedComponentChooser ,    dependency ,    repository ,    versionSelector ,    rejectedVersionSelector )  )  ;", "}", "final   RepositoryChainModuleResolution   latestResolved    =    findLatestModule ( resolveStates ,    errors )  ;", "if    ( latestResolved    !  =    null )     {", ". LOGGER . debug (  \" Using    {  }    from    {  }  \"  ,    latestResolved . module . getModuleVersionId (  )  ,    latestResolved . repository )  ;", "for    ( Throwable   error    :    errors )     {", ". LOGGER . debug (  \" Discarding   resolve   failure .  \"  ,    error )  ;", "}", "result . resolved ( metaDataFactory . transform ( latestResolved )  )  ;", "return ;", "}", "if    (  !  ( errors . isEmpty (  )  )  )     {", "result . failed ( new   ModuleVersionResolveException ( requested ,    errors )  )  ;", "} else    {", "notFound ( result ,    requested ,    resolveStates )  ;", "}", "}", "METHOD_END"], "methodName": ["resolve"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.DynamicVersionResolver"}, {"methodBody": ["METHOD_START", "{", "return   delegate . createMetadataSupplier (  )  ;", "}", "METHOD_END"], "methodName": ["createMetadataSupplier"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.ErrorHandlingModuleComponentRepository"}, {"methodBody": ["METHOD_START", "{", "return   localAccess ;", "}", "METHOD_END"], "methodName": ["getLocalAccess"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.LocalModuleComponentRepository"}, {"methodBody": ["METHOD_START", "{", "return   remoteAccess ;", "}", "METHOD_END"], "methodName": ["getRemoteAccess"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.LocalModuleComponentRepository"}, {"methodBody": ["METHOD_START", "{", "ComponentMetadataSupplier   componentMetadataSupplier    =     (  ( resolveState )     =  =    null )     ?    null    :    resolveState . getComponentMetadataSupplier (  )  ;", "if    ( componentMetadataSupplier    !  =    null )     {", "final    . SimpleComponentMetadataBuilder   builder    =    new    . SimpleComponentMetadataBuilder ( DefaultModuleVersionIdentifier . newId ( resolveState . getId (  )  )  )  ;", "ComponentMetadataSupplierDetails   details    =    new   ComponentMetadataSupplierDetails (  )     {", "@ Override", "public   ModuleComponentIdentifier   getId (  )     {", "return   resolveState . getId (  )  ;", "}", "@ Override", "public   ComponentMetadataBuilder   getResult (  )     {", "return   builder ;", "}", "}  ;", "componentMetadataSupplier . execute ( details )  ;", "if    ( builder . mutated )     {", "return   builder . build (  )  ;", "}", "}", "if    ( resolve (  )  )     {", "return   new   ComponentMetadataAdapter ( getMetaData (  )  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getComponentMetadata"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.MetadataProvider"}, {"methodBody": ["METHOD_START", "{", "ModuleComponentResolveMetadata   metaData    =    getMetaData (  )  ;", "if    ( metaData   instanceof   IvyModuleResolveMetadata )     {", "IvyModuleResolveMetadata   ivyMetadata    =     (  ( IvyModuleResolveMetadata )     ( metaData )  )  ;", "return   new   DefaultIvyModuleDescriptor ( ivyMetadata . getExtraAttributes (  )  ,    ivyMetadata . getBranch (  )  ,    ivyMetadata . getStatus (  )  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getIvyModuleDescriptor"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.MetadataProvider"}, {"methodBody": ["METHOD_START", "{", "resolve (  )  ;", "return   cachedResult . getMetaData (  )  ;", "}", "METHOD_END"], "methodName": ["getMetaData"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.MetadataProvider"}, {"methodBody": ["METHOD_START", "{", "return   cachedResult ;", "}", "METHOD_END"], "methodName": ["getResult"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.MetadataProvider"}, {"methodBody": ["METHOD_START", "{", "return    (  ( cachedResult )     =  =    null )     |  |     (  ( cachedResult . getState (  )  )     =  =     ( BuildableModuleComponentMetaDataResolveResult . State . Resolved )  )  ;", "}", "METHOD_END"], "methodName": ["isUsable"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.MetadataProvider"}, {"methodBody": ["METHOD_START", "{", "if    (  ( cachedResult )     =  =    null )     {", "cachedResult    =    State .  (  )  ;", "}", "return    ( cachedResult . getState (  )  )     =  =     ( BuildableModuleComponentMetaDataResolveResult . State . Resolved )  ;", "}", "METHOD_END"], "methodName": ["resolve"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.MetadataProvider"}, {"methodBody": ["METHOD_START", "{", "repositories . put ( repository . getId (  )  ,    repository )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.RepositoryChainArtifactResolver"}, {"methodBody": ["METHOD_START", "{", "ModuleComponentRepository   moduleVersionRepository    =    repositories . get ( repositorySource ( originalSource )  . getRepositoryId (  )  )  ;", "if    ( moduleVersionRepository    =  =    null )     {", "throw   new   IllegalStateException (  \" Attempting   to   resolve   artifacts   from   invalid   repository \"  )  ;", "}", "return   moduleVersionRepository ;", "}", "METHOD_END"], "methodName": ["findSourceRepository"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.RepositoryChainArtifactResolver"}, {"methodBody": ["METHOD_START", "{", "return   Transformers . cast ( RepositoryChainModuleSource . class )  . transform ( original )  ;", "}", "METHOD_END"], "methodName": ["repositorySource"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.RepositoryChainArtifactResolver"}, {"methodBody": ["METHOD_START", "{", "return   component . withSource ( repositorySource ( component . getSource (  )  )  . getDelegate (  )  )  ;", "}", "METHOD_END"], "methodName": ["unpackSource"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.RepositoryChainArtifactResolver"}, {"methodBody": ["METHOD_START", "{", "return   repositorySource ( original )  . getDelegate (  )  ;", "}", "METHOD_END"], "methodName": ["unpackSource"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.RepositoryChainArtifactResolver"}, {"methodBody": ["METHOD_START", "{", "repositories . add ( repository )  ;", "repositoryNames . add ( repository . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.RepositoryChainComponentMetaDataResolver"}, {"methodBody": ["METHOD_START", "{", "RepositoryChainModuleResolution   best    =    null ;", "while    (  !  ( queue . isEmpty (  )  )  )     {", "State   request    =    queue . removeFirst (  )  ;", "BuildableModuleResult   metaDataResolveResult ;", "metaDataResolveResult    =    request . resolve (  )  ;", "switch    ( metaDataResolveResult . getState (  )  )     {", "case   Failed    :", "failures . add ( metaDataResolveResult . getFailure (  )  )  ;", "if    ( ResolveExceptionAnalyzer . isCriticalFailure ( metaDataResolveResult . getFailure (  )  )  )     {", "queue . clear (  )  ;", "}", "break ;", "case   Missing    :", "if    ( request . canMakeFurtherAttempts (  )  )     {", "missing . add ( request )  ;", "}", "break ;", "case   Resolved    :", "RepositoryChainModuleResolution   moduleResolution    =    new   RepositoryChainModuleResolution ( request . repository ,    metaDataResolveResult . getMetaData (  )  )  ;", "if    (  !  ( metaDataResolveResult . getMetaData (  )  . isMissing (  )  )  )     {", "return   moduleResolution ;", "}", "best    =     ( best    !  =    null )     ?    best    :    moduleResolution ;", "break ;", "default    :", "throw   new   IllegalStateException (  (  \" Unexpected   state   for   resolution :     \"     +     ( metaDataResolveResult . getState (  )  )  )  )  ;", "}", "}", "return   best ;", "}", "METHOD_END"], "methodName": ["findBestMatch"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.RepositoryChainComponentMetaDataResolver"}, {"methodBody": ["METHOD_START", "{", "LinkedList < ComponentMetaDataResolveState >    queue    =    new   LinkedList < ComponentMetaDataResolveState >  (  )  ;", "queue . addAll ( resolveStates )  ;", "LinkedList < ComponentMetaDataResolveState >    missing    =    new   LinkedList < ComponentMetaDataResolveState >  (  )  ;", "RepositoryChainModuleResolution   best    =    findBestMatch ( queue ,    failures ,    missing )  ;", "if    ( ResolveExceptionAnalyzer . hasCriticalFailure ( failures )  )     {", "return   null ;", "}", "if    ( best    !  =    null )     {", "return   best ;", "}", "queue . addAll ( missing )  ;", "missing . clear (  )  ;", "return   findBestMatch ( queue ,    failures ,    missing )  ;", "}", "METHOD_END"], "methodName": ["findBestMatch"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.RepositoryChainComponentMetaDataResolver"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( identifier   instanceof   ModuleComponentIdentifier )  )     {", "throw   new   UnsupportedOperationException (  \" Can   resolve   meta - data   for   module   components   only .  \"  )  ;", "}", "resolveModule (  (  ( ModuleComponentIdentifier )     ( identifier )  )  ,    componentOverrideMetadata ,    result )  ;", "}", "METHOD_END"], "methodName": ["resolve"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.RepositoryChainComponentMetaDataResolver"}, {"methodBody": ["METHOD_START", "{", "RepositoryChainComponentMetaDataResolver . LOGGER . debug (  \" Attempting   to   resolve   component   for    {  }    using   repositories    {  }  \"  ,    identifier ,    repositoryNames )  ;", "List < Throwable >    errors    =    new   ArrayList < Throwable >  (  )  ;", "List < ComponentMetaDataResolveState >    resolveStates    =    new   ArrayList < ComponentMetaDataResolveState >  (  )  ;", "for    ( ModuleComponentRepository   repository    :    repositories )     {", "resolveStates . add ( new   ComponentMetaDataResolveState ( identifier ,    componentOverrideMetadata ,    repository ,    versionedComponentChooser )  )  ;", "}", "final   RepositoryChainModuleResolution   latestResolved    =    findBestMatch ( resolveStates ,    errors )  ;", "if    ( latestResolved    !  =    null )     {", "RepositoryChainComponentMetaDataResolver . LOGGER . debug (  \" Using    {  }    from    {  }  \"  ,    latestResolved . module . getModuleVersionId (  )  ,    latestResolved . repository )  ;", "for    ( Throwable   error    :    errors )     {", "RepositoryChainComponentMetaDataResolver . LOGGER . debug (  \" Discarding   resolve   failure .  \"  ,    error )  ;", "}", "result . resolved ( metaDataFactory . transform ( latestResolved )  )  ;", "return ;", "}", "if    (  !  ( errors . isEmpty (  )  )  )     {", "result . failed ( new   ModuleVersionResolveException ( identifier ,    errors )  )  ;", "} else    {", "for    ( ComponentMetaDataResolveState   resolveState    :    resolveStates )     {", "resolveState . applyTo ( result )  ;", "}", "result . notFound ( identifier )  ;", "}", "}", "METHOD_END"], "methodName": ["resolveModule"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.RepositoryChainComponentMetaDataResolver"}, {"methodBody": ["METHOD_START", "{", "dynamicRevisionResolver . add ( repository )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.RepositoryChainDependencyToComponentIdResolver"}, {"methodBody": ["METHOD_START", "{", "ComponentSelector   componentSelector    =    dependency . getSelector (  )  ;", "if    ( componentSelector   instanceof   ModuleComponentSelector )     {", "ModuleComponentSelector   module    =     (  ( ModuleComponentSelector )     ( componentSelector )  )  ;", "if    ( resolvedVersionConstraint    =  =    null )     {", "VersionConstraint   raw    =    module . getVersionConstraint (  )  ;", "resolvedVersionConstraint    =    new   DefaultResolvedVersionConstraint ( raw ,    versionSelectorScheme )  ;", "}", "VersionSelector   preferredSelector    =    resolvedVersionConstraint . getPreferredSelector (  )  ;", "VersionSelector   rejectSelector    =    resolvedVersionConstraint . getRejectedSelector (  )  ;", "if    ( preferredSelector . isDynamic (  )  )     {", "dynamicRevisionResolver . resolve ( toModuleDependencyMetadata ( dependency )  ,    preferredSelector ,    rejectSelector ,    result )  ;", "} else    {", "String   version    =    resolvedVersionConstraint . getPreferredVersion (  )  ;", "Moduleentifier   id    =    new   DefaultModuleentifier ( module . getGroup (  )  ,    module . getModule (  )  ,    version )  ;", "ModuleVersionIdentifier   mvId    =    moduleIdentifierFactory . moduleWithVersion ( module . getGroup (  )  ,    module . getModule (  )  ,    version )  ;", "if    (  ( rejectSelector    !  =    null )     &  &     ( rejectSelector . accept ( version )  )  )     {", "result . rejected ( id ,    mvId )  ;", "} else    {", "result . resolved ( id ,    mvId )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["resolve"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.RepositoryChainDependencyToComponentIdResolver"}, {"methodBody": ["METHOD_START", "{", "if    ( dependency   instanceof   ModuleDependencyMetadata )     {", "return    (  ( ModuleDependencyMetadata )     ( dependency )  )  ;", "}", "if    (  ( dependency . getSelector (  )  )    instanceof   ModuleComponentSelector )     {", "return   new   ModuleDependencyMetadataWrapper ( dependency )  ;", "}", "throw   new   IllegalArgumentException (  (  \" Not   a   module   dependency :     \"     +    dependency )  )  ;", "}", "METHOD_END"], "methodName": ["toModuleDependencyMetadata"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.RepositoryChainDependencyToComponentIdResolver"}, {"methodBody": ["METHOD_START", "{", "return   module . getModuleVersionId (  )  . getVersion (  )  ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.RepositoryChainModuleResolution"}, {"methodBody": ["METHOD_START", "{", "return   delegate ;", "}", "METHOD_END"], "methodName": ["getDelegate"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.RepositoryChainModuleSource"}, {"methodBody": ["METHOD_START", "{", "return   repositoryId ;", "}", "METHOD_END"], "methodName": ["getRepositoryId"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.RepositoryChainModuleSource"}, {"methodBody": ["METHOD_START", "{", "if    ( repositories . isEmpty (  )  )     {", "return   new   NoRepositoriesResolver (  )  ;", "}", "CachePolicy   cachePolicy    =    resolutionStrategy . getCachePolicy (  )  ;", "startParameterResolutionOverride . applyToCachePolicy ( cachePolicy )  ;", "UserResolverChain   moduleResolver    =    new   UserResolverChain ( versionSelectorScheme ,    versionComparator ,    resolutionStrategy . getComponentSelection (  )  ,    moduleIdentifierFactory )  ;", ". ParentModuleLookupResolver   parentModuleResolver    =    new    . ParentModuleLookupResolver ( versionSelectorScheme ,    versionComparator ,    moduleIdentifierFactory )  ;", "for    ( ResolutionAwareRepository   repository    :    repositories )     {", "ConfiguredModuleComponentRepository   baseRepository    =    repository . createResolver (  )  ;", "if    ( baseRepository   instanceof   ExternalResourceResolver )     {", "(  ( ExternalResourceResolver )     ( baseRepository )  )  . setComponentResolvers ( parentModuleResolver )  ;", "}", "ModuleComponentRepository   moduleComponentRepository    =    baseRepository ;", "if    ( baseRepository . isLocal (  )  )     {", "moduleComponentRepository    =    new   CachingModuleComponentRepository ( moduleComponentRepository ,    cacheProvider . getInMemoryCaches (  )  ,    cachePolicy ,    timeProvider ,    metadataProcessor ,    moduleIdentifierFactory )  ;", "moduleComponentRepository    =    new   LocalModuleComponentRepository ( moduleComponentRepository ,    metadataProcessor )  ;", "} else    {", "moduleComponentRepository    =    startParameterResolutionOverride . overrideModuleVersionRepository ( moduleComponentRepository )  ;", "moduleComponentRepository    =    new   CachingModuleComponentRepository ( moduleComponentRepository ,    cacheProvider . getCaches (  )  ,    cachePolicy ,    timeProvider ,    metadataProcessor ,    moduleIdentifierFactory )  ;", "}", "moduleComponentRepository    =    cacheProvider . getResolvedArtifactCaches (  )  . provideResolvedArtifactCache ( moduleComponentRepository )  ;", "if    ( baseRepository . isDynamicResolveMode (  )  )     {", "moduleComponentRepository    =    new   IvyDynamicResolveModuleComponentRepository ( moduleComponentRepository )  ;", "}", "moduleComponentRepository    =    new   ErrorHandlingModuleComponentRepository ( moduleComponentRepository ,    repositoryBlacklister )  ;", "moduleResolver . add ( moduleComponentRepository )  ;", "parentModuleResolver . add ( moduleComponentRepository )  ;", "}", "return   moduleResolver ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.ResolveIvyFactory"}, {"methodBody": ["METHOD_START", "{", "if    ( startParameter . isOffline (  )  )     {", "cachePolicy . setOffline (  )  ;", "} else", "if    ( startParameter . isRefreshDependencies (  )  )     {", "cachePolicy . setRefreshDependencies (  )  ;", "}", "}", "METHOD_END"], "methodName": ["applyToCachePolicy"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.StartParameterResolutionOverride"}, {"methodBody": ["METHOD_START", "{", "if    ( startParameter . isOffline (  )  )     {", "return   new   ExternalResourceCachePolicy (  )     {", "@ Override", "public   boolean   mustRefreshExternalResource ( long   ageMillis )     {", "return   false ;", "}", "}  ;", "}", "return   original ;", "}", "METHOD_END"], "methodName": ["overrideExternalResourceCachePolicy"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.StartParameterResolutionOverride"}, {"methodBody": ["METHOD_START", "{", "if    ( startParameter . isOffline (  )  )     {", "return   new    . OfflineExternalResourceConnector (  )  ;", "}", "return   original ;", "}", "METHOD_END"], "methodName": ["overrideExternalResourceConnnector"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.StartParameterResolutionOverride"}, {"methodBody": ["METHOD_START", "{", "if    ( startParameter . isOffline (  )  )     {", "return   new    . OfflineModuleComponentRepository ( original )  ;", "}", "return   original ;", "}", "METHOD_END"], "methodName": ["overrideModuleVersionRepository"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.StartParameterResolutionOverride"}, {"methodBody": ["METHOD_START", "{", "componentIdResolver . add ( repository )  ;", "componentResolver . add ( repository )  ;", "artifactResolver . add ( repository )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.UserResolverChain"}, {"methodBody": ["METHOD_START", "{", "return   artifactResolver ;", "}", "METHOD_END"], "methodName": ["getArtifactResolver"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.UserResolverChain"}, {"methodBody": ["METHOD_START", "{", "return   componentIdResolver ;", "}", "METHOD_END"], "methodName": ["getComponentIdResolver"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.UserResolverChain"}, {"methodBody": ["METHOD_START", "{", "return   componentResolver ;", "}", "METHOD_END"], "methodName": ["getComponentResolver"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.UserResolverChain"}, {"methodBody": ["METHOD_START", "{", "return   componentSelectionRules ;", "}", "METHOD_END"], "methodName": ["getComponentSelectionRules"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.UserResolverChain"}, {"methodBody": ["METHOD_START", "{", "return    ( other   instanceof   VersionInfo )     &  &     ( version . equals (  (  ( VersionInfo )     ( other )  )  . getVersion (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.VersionInfo"}, {"methodBody": ["METHOD_START", "{", "return   version ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.VersionInfo"}, {"methodBody": ["METHOD_START", "{", "return   version . hashCode (  )  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.VersionInfo"}, {"methodBody": ["METHOD_START", "{", "try    {", "T   metadata    =    doPars ( ivySettings ,    resource ,    validate )  ;", "metadata . setContentHash ( HashUtil . createHash ( resource . getFile (  )  ,     \" MD 5  \"  )  )  ;", "return   metadata ;", "}    catch    ( MetaDataParseException   e )     {", "throw   e ;", "}    catch    ( Exception   e )     {", "throw   new   MetaDataParseException ( getTypeName (  )  ,    resource ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["parseDescriptor"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.AbstractModuleDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "return   parseMetaData ( ivySettings ,    descriptorFile ,    false )  ;", "}", "METHOD_END"], "methodName": ["parseMetaData"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.AbstractModuleDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "LocallyAvailableExternalResource   resource    =    fileResourceRepository . resource ( descriptorFile )  ;", "return   pars ( ivySettings ,    resource ,    validate )  ;", "}", "METHOD_END"], "methodName": ["parseMetaData"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.AbstractModuleDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "return   parseDescriptor ( ivySettings ,    resource ,    false )  ;", "}", "METHOD_END"], "methodName": ["parseMetaData"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.AbstractModuleDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "configurations . add ( confName )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addConfiguration"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.BuildableIvyArtifact"}, {"methodBody": ["METHOD_START", "{", "return   ivyArtifactName ;", "}", "METHOD_END"], "methodName": ["getArtifact"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.BuildableIvyArtifact"}, {"methodBody": ["METHOD_START", "{", "return   configurations ;", "}", "METHOD_END"], "methodName": ["getConfigurations"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.BuildableIvyArtifact"}, {"methodBody": ["METHOD_START", "{", "doAddDependency ( dep ,    dep . isOptional (  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["addDependency"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.GradlePomModuleDescriptorBuilder"}, {"methodBody": ["METHOD_START", "{", "if    (  ( selector . getGroup (  )  . equals ( componentIdentifier . getGroup (  )  )  )     &  &     ( selector . getModule (  )  . equals ( componentIdentifier . getModule (  )  )  )  )     {", "return ;", "}", "dependencies . add ( new   MavenDependency ( MavenScope . Runtime ,    false ,    selector ,    null ,    ImmutableList .  < ExcludeMetadata > of (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["addDependencyForRelocation"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.GradlePomModuleDescriptorBuilder"}, {"methodBody": ["METHOD_START", "{", "doAddDependency ( dep ,    true ,    true )  ;", "}", "METHOD_END"], "methodName": ["addOptionalDependency"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.GradlePomModuleDescriptorBuilder"}, {"methodBody": ["METHOD_START", "{", "VersionSelector   versionSelector    =    mavenVersionSelectorScheme . parseSelector ( version )  ;", "return   defaultVersionSelectorScheme . renderSelector ( versionSelector )  ;", "}", "METHOD_END"], "methodName": ["convertVersionFromMavenSyntax"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.GradlePomModuleDescriptorBuilder"}, {"methodBody": ["METHOD_START", "{", "return   GradlePomModuleDescriptorBuilder . JarDependencyType . isJarExtension ( type )     ?     \" jar \"     :    type ;", "}", "METHOD_END"], "methodName": ["determineExtension"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.GradlePomModuleDescriptorBuilder"}, {"methodBody": ["METHOD_START", "{", "String   version    =    dependency . getVersion (  )  ;", "version    =     (  ( version    =  =    null )     |  |     (  ( version . length (  )  )     =  =     0  )  )     ?    getDefaultVersion ( dependency )     :    version ;", "return   version    =  =    null    ?     \"  \"     :    version ;", "}", "METHOD_END"], "methodName": ["determineVersion"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.GradlePomModuleDescriptorBuilder"}, {"methodBody": ["METHOD_START", "{", "MavenScope   scope ;", "if    ( useCompileScope )     {", "scope    =    MavenScope . Compile ;", "} else    {", "String   scopeString    =    dep . getScope (  )  ;", "if    (  ( scopeString    =  =    null )     |  |     (  ( scopeString . length (  )  )     =  =     0  )  )     {", "scopeString    =    getDefaultScope ( dep )  ;", "}", "if    (  . SCOPES . containsKey ( scopeString )  )     {", "scope    =     . SCOPES . get ( scopeString )  ;", "} else    {", "scope    =    MavenScope . Compile ;", "}", "}", "String   version    =    determineVersion ( dep )  ;", "String   mappedVersion    =    convertVersionFromMavenSyntax ( version )  ;", "ModuleComponentSelector   selector    =    DefaultModuleComponentSelector . newSelector ( dep . getGroupId (  )  ,    dep . getArtifactId (  )  ,    new   DefaultImmutableVersionConstraint ( mappedVersion )  )  ;", "if    (  ( selector . getGroup (  )  . equals ( componentIdentifier . getGroup (  )  )  )     &  &     ( selector . getModule (  )  . equals ( componentIdentifier . getModule (  )  )  )  )     {", "return ;", "}", "IvyArtifactName   dependencyArtifact    =    null ;", "boolean   hasClassifier    =     (  ( dep . getClassifier (  )  )     !  =    null )     &  &     (  ( dep . getClassifier (  )  . length (  )  )     >     0  )  ;", "boolean   hasNonJarType    =     (  ( dep . getType (  )  )     !  =    null )     &  &     (  !  (  \" jar \"  . equals ( dep . getType (  )  )  )  )  ;", "if    ( hasClassifier    |  |    hasNonJarType )     {", "String   type    =     \" jar \"  ;", "if    (  ( dep . getType (  )  )     !  =    null )     {", "type    =    dep . getType (  )  ;", "}", "String   ext    =    determineExtension ( type )  ;", "String   classifier    =     ( hasClassifier )     ?    dep . getClassifier (  )     :    getClassifierForType ( type )  ;", "dependencyArtifact    =    new   DefaultIvyArtifactName ( selector . getModule (  )  ,    type ,    ext ,    classifier )  ;", "}", "List < ExcludeMetadata >    excludes    =    Lists . newArrayList (  )  ;", "List < ModuleIdentifier >    excluded    =    dep . getExcludedModules (  )  ;", "if    ( excluded . isEmpty (  )  )     {", "excluded    =    getDependencyMgtExclusions ( dep )  ;", "}", "for    ( ModuleIdentifier   excludedModule    :    excluded )     {", "DefaultExclude   rule    =    new   DefaultExclude ( excludedModule )  ;", "excludes . add ( rule )  ;", "}", "dependencies . add ( new   MavenDependencyDescriptor ( scope ,    optional ,    selector ,    dependencyArtifact ,    excludes )  )  ;", "}", "METHOD_END"], "methodName": ["doAddDependency"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.GradlePomModuleDescriptorBuilder"}, {"methodBody": ["METHOD_START", "{", "return   pomReader . findDependencyDefaults ( dependency . getId (  )  )  ;", "}", "METHOD_END"], "methodName": ["findDependencyDefault"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.GradlePomModuleDescriptorBuilder"}, {"methodBody": ["METHOD_START", "{", "if    ( GradlePomModuleDescriptorBuilder . JarDependencyType . TEST _ JAR . getName (  )  . equals ( type )  )     {", "return    \" tests \"  ;", "} else", "if    ( GradlePomModuleDescriptorBuilder . JarDependencyType . EJB _ CLIENT . getName (  )  . equals ( type )  )     {", "return    \" client \"  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getClassifierForType"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.GradlePomModuleDescriptorBuilder"}, {"methodBody": ["METHOD_START", "{", "return   componentIdentifier ;", "}", "METHOD_END"], "methodName": ["getComponentIdentifier"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.GradlePomModuleDescriptorBuilder"}, {"methodBody": ["METHOD_START", "{", "PomDependencyMgt   pomDependencyMgt    =    findDependencyDefault ( dep )  ;", "String   result    =    null ;", "if    ( pomDependencyMgt    !  =    null )     {", "result    =    pomDependencyMgt . getScope (  )  ;", "}", "if    (  ( result    =  =    null )     |  |     (  !  (  . SCOPES . containsKey ( result )  )  )  )     {", "result    =     \" compile \"  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["getDefaultScope"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.GradlePomModuleDescriptorBuilder"}, {"methodBody": ["METHOD_START", "{", "PomDependencyMgt   pomDependencyMgt    =    findDependencyDefault ( dep )  ;", "if    ( pomDependencyMgt    !  =    null )     {", "return   pomDependencyMgt . getVersion (  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getDefaultVersion"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.GradlePomModuleDescriptorBuilder"}, {"methodBody": ["METHOD_START", "{", "return   dependencies ;", "}", "METHOD_END"], "methodName": ["getDependencies"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.GradlePomModuleDescriptorBuilder"}, {"methodBody": ["METHOD_START", "{", "PomDependencyMgt   pomDependencyMgt    =    findDependencyDefault ( dep )  ;", "if    ( pomDependencyMgt    !  =    null )     {", "return   pomDependencyMgt . getExcludeds (  )  ;", "}", "return   Collections . emptyList (  )  ;", "}", "METHOD_END"], "methodName": ["getDependencyMgtExclusions"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.GradlePomModuleDescriptorBuilder"}, {"methodBody": ["METHOD_START", "{", "return   status ;", "}", "METHOD_END"], "methodName": ["getStatus"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.GradlePomModuleDescriptorBuilder"}, {"methodBody": ["METHOD_START", "{", "String   effectiveVersion    =    MavenVersionUtils . toEffectiveVersion ( version )  ;", "status    =    MavenVersionUtils . inferStatusFromEffectiveVersion ( version )  ;", "componentIdentifier    =    DefaultComponentIdentifier . newId ( group ,    module ,    effectiveVersion )  ;", "}", "METHOD_END"], "methodName": ["setModuleRevId"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.GradlePomModuleDescriptorBuilder"}, {"methodBody": ["METHOD_START", "{", "if    ( isBom ( pomReader )  )     {", "for    ( DependencyMgt   dependencyMgt    :    pomReader . getDependencyMgt (  )  . values (  )  )     {", "mdBuilder . addOptionalDependency ( dependencyMgt )  ;", "}", "}", "for    ( Reader . DependencyData   dependency    :    pomReader . getDependencies (  )  . values (  )  )     {", "mdBuilder . addDependency ( dependency )  ;", "}", "}", "METHOD_END"], "methodName": ["addDependencies"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.GradlePomModuleDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "PomReader   pomReader    =    new   PomReader ( resource ,    moduleIdentifierFactory )  ;", "Builder   mdBuilder    =    new   Builder ( pomReader ,    gradleVersionSelectorScheme ,    mavenVersionSelectorScheme )  ;", "doParsePom ( parserSettings ,    mdBuilder ,    pomReader )  ;", "List < MavenDependencyDescriptor >    dependencies    =    mdBuilder . getDependencies (  )  ;", "ModuleComponentIdentifier   cid    =    mdBuilder . getComponentIdentifier (  )  ;", "MutableMavenModuleResolveMetadata   metadata    =    metadataFactory . create ( cid ,    dependencies )  ;", "metadata . setStatus ( mdBuilder . getStatus (  )  )  ;", "if    (  ( pomReader . getRelocation (  )  )     !  =    null )     {", "metadata . setPackaging (  \" pom \"  )  ;", "metadata . setRelocated ( true )  ;", "} else    {", "metadata . setPackaging ( pomReader . getPackaging (  )  )  ;", "metadata . setRelocated ( false )  ;", "}", "return   metadata ;", "}", "METHOD_END"], "methodName": ["doParseDescriptor"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.GradlePomModuleDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "if    ( pomReader . hasParent (  )  )     {", "ModuleComponentSelector   parentId    =    DefaultModuleComponentSelector . newSelector ( pomReader . getParentGroupId (  )  ,    pomReader . getParentArtifactId (  )  ,    new   DefaultImmutableVersionConstraint ( pomReader . getParentVersion (  )  )  )  ;", "PomReader   parentPomReader    =    parsePomForSelector ( parserSettings ,    parentId ,    pomReader . getAllPomProperties (  )  )  ;", "pomReader . setPomParent ( parentPomReader )  ;", "}", "pomReader . resolveGAV (  )  ;", "String   groupId    =    pomReader . getGroupId (  )  ;", "String   artifactId    =    pomReader . getArtifactId (  )  ;", "String   version    =    pomReader . getVersion (  )  ;", "mdBuilder . setModuleRevId ( groupId ,    artifactId ,    version )  ;", "ModuleVersionIdentifier   relocation    =    pomReader . getRelocation (  )  ;", "if    ( relocation    !  =    null )     {", "if    (  (  (  ( groupId    !  =    null )     &  &     ( artifactId    !  =    null )  )     &  &     ( artifactId . equals ( relocation . getName (  )  )  )  )     &  &     ( groupId . equals ( relocation . getGroup (  )  )  )  )     {", ". LOGGER . error (  \" POM   relocation   to   an   other   version   number   is   not   fully   supported   in   Gradle    :     {  }    relocated   to    {  }  .  \"  ,    mdBuilder . getComponentIdentifier (  )  ,    relocation )  ;", ". LOGGER . warn (  \" Please   update   your   dependency   to   directly   use   the   correct   version    '  {  }  '  .  \"  ,    relocation )  ;", ". LOGGER . warn (  \" Resolution   will   only   pick   dependencies   of   the   relocated   element .       Artifacts   and   other   metadata   will   be   ignored .  \"  )  ;", "PomReader   relocatedModule    =    parsePomForId ( parserSettings ,    DefaultModuleComponentIdentifier . newId ( relocation )  ,    Maps .  < String ,    String > newHashMap (  )  )  ;", "addDependencies ( mdBuilder ,    relocatedModule )  ;", "} else    {", ". LOGGER . info (  (  (  (  ( mdBuilder . getComponentIdentifier (  )  )     +     \"    is   relocated   to    \"  )     +    relocation )     +     \"  .    Please   update   your   dependencies .  \"  )  )  ;", ". LOGGER . debug (  \" Relocated   module   will   be   considered   as   a   dependency \"  )  ;", "ModuleComponentSelector   selector    =    DefaultModuleComponentSelector . newSelector ( relocation . getGroup (  )  ,    relocation . getName (  )  ,    new   DefaultMutableVersionConstraint ( relocation . getVersion (  )  )  )  ;", "mdBuilder . addDependencyForRelocation ( selector )  ;", "}", "} else    {", "overrideDependencyMgtsWithImported ( parserSettings ,    pomReader )  ;", "addDependencies ( mdBuilder ,    pomReader )  ;", "}", "}", "METHOD_END"], "methodName": ["doParsePom"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.GradlePomModuleDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "return   DefaultMavenModuleResolveMetadata . POM _ PACKAGING . equals ( pomReader . getPackaging (  )  )  ;", "}", "METHOD_END"], "methodName": ["isBom"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.GradlePomModuleDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "return   GradlePomModuleDescriptorParser . DEPENDENCY _ IMPORT _ SCOPE . equals ( dependencyMgt . getScope (  )  )  ;", "}", "METHOD_END"], "methodName": ["isDependencyImportScoped"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.GradlePomModuleDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "Map < MavenDependencyKey ,    PomDependencyMgt >    importedDependencyMgts    =    parseImportedDependencyMgts ( parseContext ,    pomReader . parseDependencyMgt (  )  )  ;", "pomReader . addImportedDependencyMgts ( importedDependencyMgts )  ;", "}", "METHOD_END"], "methodName": ["overrideDependencyMgtsWithImported"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.GradlePomModuleDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "Map < MavenDependencyKey ,    PomDependencyMgt >    importedDependencyMgts    =    new   LinkedHashMap < MavenDependencyKey ,    PomDependencyMgt >  (  )  ;", "for    ( PomDependencyMgt   currentDependencyMgt    :    currentDependencyMgts )     {", "if    ( isDependencyImportScoped ( currentDependencyMgt )  )     {", "ModuleComponentSelector   importedId    =    DefaultModuleComponentSelector . newSelector ( currentDependencyMgt . getGroupId (  )  ,    currentDependencyMgt . getAId (  )  ,    new   DefaultMutableVersionConstraint ( currentDependencyMgt . getVersion (  )  )  )  ;", "PomReader   importedPom    =    parsePomForSelector ( parseContext ,    importedId ,    Maps .  < String ,    String > newHashMap (  )  )  ;", "for    ( Map . Entry < MavenDependencyKey ,    PomDependencyMgt >    entry    :    importedPom . getDependencyMgt (  )  . entrySet (  )  )     {", "if    (  !  ( importedDependencyMgts . containsKey ( entry . getKey (  )  )  )  )     {", "importedDependencyMgts . put ( entry . getKey (  )  ,    entry . getValue (  )  )  ;", "}", "}", "}", "}", "return   importedDependencyMgts ;", "}", "METHOD_END"], "methodName": ["parseImportedDependencyMgts"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.GradlePomModuleDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "return   parsePomResource ( parseContext ,    parseContext . getMetaDataArtifact ( identifier ,    MAVEN _ POM )  ,    childProperties )  ;", "}", "METHOD_END"], "methodName": ["parsePomForId"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.GradlePomModuleDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "LocallyAvailableExternalResource   localResource    =    parseContext . getMetaDataArtifact ( toDependencyMetadata ( selector )  ,    MAVEN _ POM )  ;", "return   parsePomResource ( parseContext ,    localResource ,    childProperties )  ;", "}", "METHOD_END"], "methodName": ["parsePomForSelector"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.GradlePomModuleDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "PomReader   pomReader    =    new   PomReader ( localResource ,    moduleIdentifierFactory ,    childProperties )  ;", "Builder   mdBuilder    =    new   Builder ( pomReader ,    gradleVersionSelectorScheme ,    mavenVersionSelectorScheme )  ;", "doParsePom ( parseContext ,    mdBuilder ,    pomReader )  ;", "return   pomReader ;", "}", "METHOD_END"], "methodName": ["parsePomResource"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.GradlePomModuleDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "return   new   GradleDependencyMetadata ( selector ,    Collections .  < ExcludeMetadata > emptyList (  )  ,    false ,    null )  ;", "}", "METHOD_END"], "methodName": ["toDependencyMetadata"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.GradlePomModuleDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "return    \" gradle   pom   parser \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.GradlePomModuleDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "String   name    =    configuration . getName (  )  ;", "boolean   transitive    =    configuration . isTransitive (  )  ;", "boolean   visible    =     ( configuration . getVisibility (  )  )     =  =    Configuration ;", "List < String >    extendsFrom    =    Lists . newArrayList ( configuration . getExtends (  )  )  ;", "result . add ( new   Configuration ( name ,    transitive ,    visible ,    extendsFrom )  )  ;", "}", "METHOD_END"], "methodName": ["addConfiguration"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.IvyModuleDescriptorConverter"}, {"methodBody": ["METHOD_START", "{", "ModuleRevisionId   revisionId    =    dependencyDescriptor . getDependencyRevisionId (  )  ;", "ModuleComponentSelector   requested    =    DefaultModuleComponentSelector . newSelector ( revisionId . getOrganisation (  )  ,    revisionId . getName (  )  ,    new   DefaultImmutableVersionConstraint ( revisionId . getRevision (  )  )  )  ;", "ListMultimap < String ,    String >    configMappings    =    ArrayListMultimap . create (  )  ;", "for    ( Map . Entry < String ,    List < String >  >    entry    :     . readConfigMappings ( dependencyDescriptor )  . entrySet (  )  )     {", "configMappings . putAll ( entry . getKey (  )  ,    entry . getValue (  )  )  ;", "}", "List < Artifact >    artifacts    =    Lists . newArrayList (  )  ;", "for    ( DependencyArtifactDescriptor   ivyArtifact    :    dependencyDescriptor . getAllDependencyArtifacts (  )  )     {", "IvyArtifactName   ivyArtifactName    =    new   DefaultIvyArtifactName ( ivyArtifact . getName (  )  ,    ivyArtifact . getType (  )  ,    ivyArtifact . getExt (  )  ,     (  ( String )     ( ivyArtifact . getExtraAttributes (  )  . get (  . CLASSIFIER )  )  )  )  ;", "artifacts . add ( new   Artifact ( ivyArtifactName ,    Sets . newHashSet ( ivyArtifact . getConfigurations (  )  )  )  )  ;", "}", "List < Exclude >    excludes    =    Lists . newArrayList (  )  ;", "for    ( ExcludeRule   excludeRule    :    dependencyDescriptor . getAllExcludeRules (  )  )     {", "excludes . add ( forIvyExclude ( excludeRule )  )  ;", "}", "result . add ( new   IvyDependencyDescriptor ( requested ,    dependencyDescriptor . getDynamicConstraintDependencyRevisionId (  )  . getRevision (  )  ,    dependencyDescriptor . isChanging (  )  ,    dependencyDescriptor . isTransitive (  )  ,    false ,    configMappings ,    artifacts ,    excludes )  )  ;", "}", "METHOD_END"], "methodName": ["addDependency"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.IvyModuleDescriptorConverter"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( PatternMatchers . ANY _ EXPRESSION . equals ( id . getName (  )  )  )     &  &     ( PatternMatchers . ANY _ EXPRESSION . equals ( id . getType (  )  )  )  )     &  &     ( PatternMatchers . ANY _ EXPRESSION . equals ( id . getExt (  )  )  )  )     {", "return   null ;", "}", "return   new   DefaultIvyAName ( id . getName (  )  ,    id . getType (  )  ,    id . getExt (  )  )  ;", "}", "METHOD_END"], "methodName": ["artifactForIvyExclude"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.IvyModuleDescriptorConverter"}, {"methodBody": ["METHOD_START", "{", "List < Configuration >    result    =    Lists . newArrayListWithCapacity ( ivyDescriptor . getConfigurations (  )  . length )  ;", "for    ( Configuration   ivyConfiguration    :    ivyDescriptor . getConfigurations (  )  )     {", ". addConfiguration ( result ,    ivyConfiguration )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["extractConfigurations"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.IvyModuleDescriptorConverter"}, {"methodBody": ["METHOD_START", "{", "List < IvyDependencyDescriptor >    result    =    Lists . newArrayListWithCapacity ( ivyDescriptor . getDependencies (  )  . length )  ;", "for    ( DependencyDescriptor   dependencyDescriptor    :    ivyDescriptor . getDependencies (  )  )     {", "addDependency ( result ,    dependencyDescriptor )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["extractDependencies"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.IvyModuleDescriptorConverter"}, {"methodBody": ["METHOD_START", "{", "List < Exclude >    result    =    Lists . newArrayListWithCapacity ( ivyDescriptor . getAllExcludeRules (  )  . length )  ;", "for    ( ExcludeRule   excludeRule    :    ivyDescriptor . getAllExcludeRules (  )  )     {", "result . add ( forIvyExclude ( excludeRule )  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["extractExcludes"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.IvyModuleDescriptorConverter"}, {"methodBody": ["METHOD_START", "{", "return   Cast . uncheckedCast ( ivyDescriptor . getExtraInfo (  )  )  ;", "}", "METHOD_END"], "methodName": ["extractExtraAttributes"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.IvyModuleDescriptorConverter"}, {"methodBody": ["METHOD_START", "{", "ArtifactId   id    =    excludeRule . getId (  )  ;", "IvyArtifactName   Exclusion    =    ForIvyExclude ( id )  ;", "return   new   DefaultExclude ( moduleIdentifierFactory . module ( id . getModuleId (  )  . getOrganisation (  )  ,    id . getModuleId (  )  . getName (  )  )  ,    Exclusion ,    excludeRule . getConfigurations (  )  ,    excludeRule . getMatcher (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["forIvyExclude"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.IvyModuleDescriptorConverter"}, {"methodBody": ["METHOD_START", "{", "if    ( dependencyDescriptor   instanceof   DefaultDependencyDescriptor )     {", "try    {", "return    (  ( Map < String ,    List < String >  >  )     (  . DEPENDENCY _ CONFIG _ FIELD . get ( dependencyDescriptor )  )  )  ;", "}    catch    ( IllegalAccessException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "}", "String [  ]    modConfs    =    dependencyDescriptor . getModuleConfigurations (  )  ;", "Map < String ,    List < String >  >    results    =    Maps . newLinkedHashMap (  )  ;", "for    ( String   modConf    :    modConfs )     {", "results . put ( modConf ,    Arrays . asList ( dependencyDescriptor . getDependencyConfigurations ( modConfs )  )  )  ;", "}", "return   results ;", "}", "METHOD_END"], "methodName": ["readConfigMappings"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.IvyModuleDescriptorConverter"}, {"methodBody": ["METHOD_START", "{", "if    ( configurations . isEmpty (  )  )     {", "throw   new   IllegalArgumentException (  \" Artifact   should   be   attached   to   at   least   one   configuration .  \"  )  ;", "}", "Artifact       =    findOrCreate ( newArtifact )  ;", ". getConfigurations (  )  . addAll ( configurations )  ;", "}", "METHOD_END"], "methodName": ["addArtifact"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.IvyModuleResolveMetaDataBuilder"}, {"methodBody": ["METHOD_START", "{", "ModuleRevisionId   moduleRevisionId    =    ivyDescriptor . getModuleRevisionId (  )  ;", "ModuleComponentIdentifier   cid    =    DefaultModuleComponentIdentifier . newId ( moduleRevisionId . getOrganisation (  )  ,    moduleRevisionId . getName (  )  ,    moduleRevisionId . getRevision (  )  )  ;", "List < Configuration >    configurations    =    converter . extractConfigurations ( ivyDescriptor )  ;", "List < IvyDependencyDescriptor >    dependencies    =    converter . extractDependencies ( ivyDescriptor )  ;", "List < Exclude >    excludes    =    converter . extractExcludes ( ivyDescriptor )  ;", "Map < NamespaceId ,    String >    extraAttributes    =    converter . extractExtraAttributes ( ivyDescriptor )  ;", "Mutabledata   metadata    =    metadataFactory . create ( cid ,    dependencies ,    configurations ,    artifacts ,    excludes )  ;", "metadata . setStatus ( ivyDescriptor . getStatus (  )  )  ;", "metadata . setExtraAttributes ( extraAttributes )  ;", "metadata . setBranch ( ivyDescriptor . getModuleRevisionId (  )  . getBranch (  )  )  ;", "return   metadata ;", "}", "METHOD_END"], "methodName": ["build"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.IvyModuleResolveMetaDataBuilder"}, {"methodBody": ["METHOD_START", "{", "for    ( Artifact   existingArtifact    :        {", "if    ( existingArtifact . getArtifactName (  )  . equals ( artifactName )  )     {", "return   existingArtifact ;", "}", "}", "Artifact   newArtifact    =    new   Artifact ( artifactName )  ;", "add ( newArtifact )  ;", "return   newArtifact ;", "}", "METHOD_END"], "methodName": ["findOrCreate"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.IvyModuleResolveMetaDataBuilder"}, {"methodBody": ["METHOD_START", "{", "return   artifacts ;", "}", "METHOD_END"], "methodName": ["getArtifacts"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.IvyModuleResolveMetaDataBuilder"}, {"methodBody": ["METHOD_START", "{", "return   new   IvyXmlModuleDescriptorParser . Parser ( parseContext ,    moduleDescriptorConverter ,    resource ,    resource . getFile (  )  . toURI (  )  . toURL (  )  ,    moduleIdentifierFactory ,    metadataFactory ,    properties )  ;", "}", "METHOD_END"], "methodName": ["createParser"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.IvyXmlModuleDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "IvyXmlModuleDescriptorParser . Parser   parser    =    createParser ( parseContext ,    resource ,    populateProperties (  )  )  ;", "parser . setValidate ( validate )  ;", "parser . parse (  )  ;", "DefaultModuleDescriptor   moduleDescriptor    =    parser . getModuleDescriptor (  )  ;", "postProcess ( moduleDescriptor )  ;", "return   parser . getMetaData (  )  ;", "}", "METHOD_END"], "methodName": ["doParseDescriptor"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.IvyXmlModuleDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "HashMap < String ,    String >    properties    =    new   HashMap < String ,    String >  (  )  ;", "String   baseDir    =    new   File (  \"  .  \"  )  . getAbsolutePath (  )  ;", "properties . put (  \" ivy . default . settings . dir \"  ,    baseDir )  ;", "properties . put (  \" ivy . basedir \"  ,    baseDir )  ;", "Set < String >    propertyNames    =    CollectionUtils . collect ( System . getProperties (  )  . entrySet (  )  ,    new   Transformer < String ,    Map . Entry < Object ,    Object >  >  (  )     {", "public   String   transform ( Map . Entry < Object ,    Object >    entry )     {", "return   entry . getKey (  )  . toString (  )  ;", "}", "}  )  ;", "for    ( String   property    :    propertyNames )     {", "properties . put ( property ,    System . getProperty ( property )  )  ;", "}", "return   properties ;", "}", "METHOD_END"], "methodName": ["populateProperties"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.IvyXmlModuleDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "return    \" ivy   parser \"  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.IvyXmlModuleDescriptorParser"}, {"methodBody": ["METHOD_START", "{", "return    ( effectiveVersion    !  =    null )     &  &     ( effectiveVersion . endsWith (  \" SNAPSHOT \"  )  )     ?     \" integration \"     :     \" release \"  ;", "}", "METHOD_END"], "methodName": ["inferStatusFromEffectiveVersion"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.MavenVersionUtils"}, {"methodBody": ["METHOD_START", "{", "return   MavenVersionUtils . inferStatusFromEffectiveVersion ( MavenVersionUtils . toEffectiveVersion ( version )  )  ;", "}", "METHOD_END"], "methodName": ["inferStatusFromVersionNumber"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.MavenVersionUtils"}, {"methodBody": ["METHOD_START", "{", "String   effectiveVersion    =    version ;", "if    ( version    !  =    null )     {", "Matcher   matcher    =     . TIMESTAMP _ PATTERN . matcher ( version )  ;", "if    ( matcher . matches (  )  )     {", "effectiveVersion    =     ( matcher . group (  1  )  )     +     \"  - SNAPSHOT \"  ;", "}", "}", "return   effectiveVersion ;", "}", "METHOD_END"], "methodName": ["toEffectiveVersion"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.MavenVersionUtils"}, {"methodBody": ["METHOD_START", "{", "reader . skipValue (  )  ;", "}", "METHOD_END"], "methodName": ["consumeAny"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.ModuleMetadataParser"}, {"methodBody": ["METHOD_START", "{", "ImmutableAttributes   attributes    =    ImmutableAttributes . EMPTY ;", "reader . beginObject (  )  ;", "while    (  ( reader . peek (  )  )     !  =     ( JsonToken . END _ OBJECT )  )     {", "String   attrName    =    reader . nextName (  )  ;", "if    (  ( reader . peek (  )  )     =  =     ( JsonToken . BOOLEAN )  )     {", "boolean   attrValue    =    reader . nextBoolean (  )  ;", "attributes    =    attributesFactory . concat ( attributes ,    Attribute . of ( attrName ,    Boolean . class )  ,    attrValue )  ;", "} else    {", "String   attrValue    =    reader . nextString (  )  ;", "attributes    =    attributesFactory . concat ( attributes ,    Attribute . of ( attrName ,    String . class )  ,    new   changedetection . state . CoercingStringValueSnapshot ( attrValue ,    instantiator )  )  ;", "}", "}", "reader . endObject (  )  ;", "return   attributes ;", "}", "METHOD_END"], "methodName": ["consumeAttributes"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.ModuleMetadataParser"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < ModuleMetadataParser . VariantCapability >    capabilities    =    ImmutableList . builder (  )  ;", "reader . beginArray (  )  ;", "while    (  ( reader . peek (  )  )     !  =     ( JsonToken . END _ ARRAY )  )     {", "reader . beginObject (  )  ;", "String   group    =    null ;", "String   name    =    null ;", "String   version    =    null ;", "while    (  ( reader . peek (  )  )     !  =     ( JsonToken . END _ OBJECT )  )     {", "String   val    =    reader . nextName (  )  ;", "if    ( val . equals (  \" group \"  )  )     {", "group    =    reader . nextString (  )  ;", "} else", "if    ( val . equals (  \" name \"  )  )     {", "name    =    reader . nextString (  )  ;", "} else", "if    ( val . equals (  \" version \"  )  )     {", "version    =    reader . nextString (  )  ;", "}", "}", "capabilities . add ( new   ModuleMetadataParser . VariantCapability ( group ,    name ,    version )  )  ;", "reader . endObject (  )  ;", "}", "reader . endArray (  )  ;", "return   capabilities . build (  )  ;", "}", "METHOD_END"], "methodName": ["consumeCapabilities"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.ModuleMetadataParser"}, {"methodBody": ["METHOD_START", "{", "reader . beginObject (  )  ;", "while    (  ( reader . peek (  )  )     !  =     ( JsonToken . END _ OBJECT )  )     {", "String   name    =    reader . nextName (  )  ;", "if    (  \" attributes \"  . equals ( name )  )     {", "m . setAttributes ( consumeAttributes ( reader )  )  ;", "} else    {", "consumeAny ( reader )  ;", "}", "}", "reader . endObject (  )  ;", "}", "METHOD_END"], "methodName": ["consumeComponent"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.ModuleMetadataParser"}, {"methodBody": ["METHOD_START", "{", "List < ModuleMetadataParser . ModuleDependency >    dependencies    =    new   ArrayList < ModuleMetadataParser . ModuleDependency >  (  )  ;", "reader . beginArray (  )  ;", "while    (  ( reader . peek (  )  )     !  =     ( JsonToken . END _ ARRAY )  )     {", "reader . beginObject (  )  ;", "String   group    =    null ;", "String   module    =    null ;", "String   reason    =    null ;", "VersionConstraint   version    =    DefaultImmutableVersionConstraint . of (  )  ;", "ImmutableList < ExcludeMetadata >    excludes    =    ImmutableList . of (  )  ;", "while    (  ( reader . peek (  )  )     !  =     ( JsonToken . END _ OBJECT )  )     {", "String   name    =    reader . nextName (  )  ;", "if    ( name . equals (  \" group \"  )  )     {", "group    =    reader . nextString (  )  ;", "} else", "if    ( name . equals (  \" module \"  )  )     {", "module    =    reader . nextString (  )  ;", "} else", "if    ( name . equals (  \" version \"  )  )     {", "version    =    consumeVersion ( reader )  ;", "} else", "if    ( name . equals (  \" excludes \"  )  )     {", "excludes    =    consumeExcludes ( reader )  ;", "} else", "if    ( name . equals (  \" reason \"  )  )     {", "reason    =    reader . nextString (  )  ;", "} else    {", "consumeAny ( reader )  ;", "}", "}", "dependencies . add ( new   ModuleMetadataParser . ModuleDependency ( group ,    module ,    version ,    excludes ,    reason )  )  ;", "reader . endObject (  )  ;", "}", "reader . endArray (  )  ;", "return   dependencies ;", "}", "METHOD_END"], "methodName": ["consumeDependencies"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.ModuleMetadataParser"}, {"methodBody": ["METHOD_START", "{", "List < ModuleMetadataParser . ModuleDependencyConstraint >    dependencies    =    new   ArrayList < ModuleMetadataParser . ModuleDependencyConstraint >  (  )  ;", "reader . beginArray (  )  ;", "while    (  ( reader . peek (  )  )     !  =     ( JsonToken . END _ ARRAY )  )     {", "reader . beginObject (  )  ;", "String   group    =    null ;", "String   module    =    null ;", "String   reason    =    null ;", "VersionConstraint   version    =    null ;", "while    (  ( reader . peek (  )  )     !  =     ( JsonToken . END _ OBJECT )  )     {", "String   name    =    reader . nextName (  )  ;", "if    ( name . equals (  \" group \"  )  )     {", "group    =    reader . nextString (  )  ;", "} else", "if    ( name . equals (  \" module \"  )  )     {", "module    =    reader . nextString (  )  ;", "} else", "if    ( name . equals (  \" version \"  )  )     {", "version    =    consumeVersion ( reader )  ;", "} else", "if    ( name . equals (  \" reason \"  )  )     {", "reason    =    reader . nextString (  )  ;", "} else    {", "consumeAny ( reader )  ;", "}", "}", "dependencies . add ( new   ModuleMetadataParser . ModuleDependencyConstraint ( group ,    module ,    version ,    reason )  )  ;", "reader . endObject (  )  ;", "}", "reader . endArray (  )  ;", "return   dependencies ;", "}", "METHOD_END"], "methodName": ["consumeDependencyConstraints"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.ModuleMetadataParser"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < ExcludeMetadata >    builder    =    new   ImmutableList . Builder < ExcludeMetadata >  (  )  ;", "reader . beginArray (  )  ;", "while    (  ( reader . peek (  )  )     !  =     ( JsonToken . END _ ARRAY )  )     {", "reader . beginObject (  )  ;", "String   group    =    null ;", "String   module    =    null ;", "while    (  ( reader . peek (  )  )     !  =     ( JsonToken . END _ OBJECT )  )     {", "String   name    =    reader . nextName (  )  ;", "if    ( name . equals (  \" group \"  )  )     {", "group    =    reader . nextString (  )  ;", "} else", "if    ( name . equals (  \" module \"  )  )     {", "module    =    reader . nextString (  )  ;", "} else    {", "consumeAny ( reader )  ;", "}", "}", "reader . endObject (  )  ;", "ExcludeMetadata   exclude    =    excludeRuleConverter . createExcludeRule ( group ,    module )  ;", "builder . add ( exclude )  ;", "}", "reader . endArray (  )  ;", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["consumeExcludes"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.ModuleMetadataParser"}, {"methodBody": ["METHOD_START", "{", "List < ModuleMetadataParser . ModuleFile >    files    =    new   ArrayList < ModuleMetadataParser . ModuleFile >  (  )  ;", "reader . beginArray (  )  ;", "while    (  ( reader . peek (  )  )     !  =     ( JsonToken . END _ ARRAY )  )     {", "reader . beginObject (  )  ;", "String   fileName    =    null ;", "String   fileUri    =    null ;", "while    (  ( reader . peek (  )  )     !  =     ( JsonToken . END _ OBJECT )  )     {", "String   name    =    reader . nextName (  )  ;", "if    ( name . equals (  \" name \"  )  )     {", "fileName    =    reader . nextString (  )  ;", "} else", "if    ( name . equals (  \" url \"  )  )     {", "fileUri    =    reader . nextString (  )  ;", "} else    {", "consumeAny ( reader )  ;", "}", "}", "reader . endObject (  )  ;", "files . add ( new   ModuleMetadataParser . ModuleFile ( fileName ,    fileUri )  )  ;", "}", "reader . endArray (  )  ;", "return   files ;", "}", "METHOD_END"], "methodName": ["consumeFiles"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.ModuleMetadataParser"}, {"methodBody": ["METHOD_START", "{", "while    (  ( reader . peek (  )  )     !  =     ( JsonToken . END _ OBJECT )  )     {", "String   name    =    reader . nextName (  )  ;", "if    (  \" variants \"  . equals ( name )  )     {", "consumeVariants ( reader ,    m )  ;", "} else", "if    (  \" component \"  . equals ( name )  )     {", "consumeComponent ( reader ,    m )  ;", "} else    {", "consumeAny ( reader )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["consumeTopLevelElements"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.ModuleMetadataParser"}, {"methodBody": ["METHOD_START", "{", "reader . beginObject (  )  ;", "String   variantName    =    null ;", "ImmutableAttributes   attributes    =    ImmutableAttributes . EMPTY ;", "List <  . ModuleFile >    files    =    Collections . emptyList (  )  ;", "List <  . ModuleDependency >    dependencies    =    Collections . emptyList (  )  ;", "List <  . ModuleDependencyConstraint >    dependencyConstraints    =    Collections . emptyList (  )  ;", "List <  . VariantCapability >    capabilities    =    Collections . emptyList (  )  ;", "while    (  ( reader . peek (  )  )     !  =     ( JsonToken . END _ OBJECT )  )     {", "String   name    =    reader . nextName (  )  ;", "if    ( name . equals (  \" name \"  )  )     {", "variantName    =    reader . nextString (  )  ;", "} else", "if    ( name . equals (  \" attributes \"  )  )     {", "attributes    =    consumeAttributes ( reader )  ;", "} else", "if    ( name . equals (  \" files \"  )  )     {", "files    =    consumeFiles ( reader )  ;", "} else", "if    ( name . equals (  \" dependencies \"  )  )     {", "dependencies    =    consumeDependencies ( reader )  ;", "} else", "if    ( name . equals (  \" dependencyConstraints \"  )  )     {", "dependencyConstraints    =    consumeDependencyConstraints ( reader )  ;", "} else", "if    ( name . equals (  \" capabilities \"  )  )     {", "capabilities    =    consumeCapabilities ( reader )  ;", "} else", "if    ( name . equals (  \" available - at \"  )  )     {", "dependencies    =    consumeVariantLocation ( reader )  ;", "} else    {", "consumeAny ( reader )  ;", "}", "}", "reader . endObject (  )  ;", "MutableComponentVariant   variant    =    metadata . addVariant ( variantName ,    attributes )  ;", "for    (  . ModuleFile   file    :    files )     {", "variant . addFile ( file . name ,    file . uri )  ;", "}", "for    (  . ModuleDependency   dependency    :    dependencies )     {", "variant . addDependency ( dependency . group ,    dependency . module ,    dependency . versionConstraint ,    dependency . excludes ,    dependency . reason )  ;", "}", "for    (  . ModuleDependencyConstraint   dependencyConstraint    :    dependencyConstraints )     {", "variant . addDependencyConstraint ( dependencyConstraint . group ,    dependencyConstraint . module ,    dependencyConstraint . versionConstraint ,    dependencyConstraint . reason )  ;", "}", "for    (  . VariantCapability   capability    :    capabilities )     {", "variant . addCapability ( capability . group ,    capability . name ,    capability . version )  ;", "}", "}", "METHOD_END"], "methodName": ["consumeVariant"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.ModuleMetadataParser"}, {"methodBody": ["METHOD_START", "{", "String   group    =    null ;", "String   module    =    null ;", "String   version    =    null ;", "reader . beginObject (  )  ;", "while    (  ( reader . peek (  )  )     !  =     ( JsonToken . END _ OBJECT )  )     {", "String   name    =    reader . nextName (  )  ;", "if    ( name . equals (  \" group \"  )  )     {", "group    =    reader . nextString (  )  ;", "} else", "if    ( name . equals (  \" module \"  )  )     {", "module    =    reader . nextString (  )  ;", "} else", "if    ( name . equals (  \" version \"  )  )     {", "version    =    reader . nextString (  )  ;", "} else    {", "consumeAny ( reader )  ;", "}", "}", "reader . endObject (  )  ;", "return   ImmutableList . of ( new    . ModuleDependency ( group ,    module ,    new   DefaultImmutableVersionConstraint ( version )  ,    ImmutableList .  < ExcludeMetadata > of (  )  ,    null )  )  ;", "}", "METHOD_END"], "methodName": ["consumeVariantLocation"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.ModuleMetadataParser"}, {"methodBody": ["METHOD_START", "{", "reader . beginArray (  )  ;", "while    (  ( reader . peek (  )  )     !  =     ( JsonToken . END _ ARRAY )  )     {", "consumeVariant ( reader ,    m )  ;", "}", "reader . endArray (  )  ;", "}", "METHOD_END"], "methodName": ["consumeVariants"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.ModuleMetadataParser"}, {"methodBody": ["METHOD_START", "{", "reader . beginObject (  )  ;", "String   preferred    =     \"  \"  ;", "List < String >    reje =    Lists . newArrayList (  )  ;", "while    (  ( reader . peek (  )  )     !  =     ( JsonToken . END _ OBJECT )  )     {", "String   cst    =    reader . nextName (  )  ;", "if    (  \" prefers \"  . equals ( cst )  )     {", "preferred    =    reader . nextString (  )  ;", "} else", "if    (  \" reje . equals ( cst )  )     {", "reader . beginArray (  )  ;", "while    (  ( reader . peek (  )  )     !  =     ( JsonToken . END _ ARRAY )  )     {", "rejeadd ( reader . nextString (  )  )  ;", "}", "reader . endArray (  )  ;", "}", "}", "reader . endObject (  )  ;", "return   DefaultImmutableVersionConstraint . of ( preferred ,    reje ;", "}", "METHOD_END"], "methodName": ["consumeVersion"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.ModuleMetadataParser"}, {"methodBody": ["METHOD_START", "{", "resource . withContent ( new   Transformer < Void ,    InputStream >  (  )     {", "@ Override", "public   Void   transform ( InputStream   inputStream )     {", "try    {", "JsonReader   reader    =    new   JsonReader ( new   InputStreamReader ( inputStream ,     \" utf -  8  \"  )  )  ;", "reader . beginObject (  )  ;", "if    (  ( reader . peek (  )  )     !  =     ( JsonToken . NAME )  )     {", "throw   new   RuntimeException (  \" Module   metadata   should   contain   a    ' formatVersion '    value .  \"  )  ;", "}", "String   name    =    reader . nextName (  )  ;", "if    (  !  ( name . equals (  \" formatVersion \"  )  )  )     {", "throw   new   RuntimeException ( String . format (  \" The    ' formatVersion '    value   should   be   the   first   value   in   a   module   metadata .    Found    '  % s '    instead .  \"  ,    name )  )  ;", "}", "if    (  ( reader . peek (  )  )     !  =     ( JsonToken . STRING )  )     {", "throw   new   RuntimeException (  \" The    ' formatVersion '    value   should   have   a   string   value .  \"  )  ;", "}", "String   version    =    reader . nextString (  )  ;", "if    (  !  ( version . equals (  . FORMAT _ VERSION )  )  )     {", "throw   new   RuntimeException ( String . format (  \" Unsupported   format   version    '  % s '    specified   in   module   metadata .    This   version   of   Gradle   supports   format   version    % s   only .  \"  ,    version ,     . FORMAT _ VERSION )  )  ;", "}", "consumeTopLevelElements ( reader ,    metadata )  ;", "return   null ;", "}    catch    ( Exception   e )     {", "throw   new   MetaDataParseException (  \" module   metadata \"  ,    resource ,    e )  ;", "}", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["parse"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.ModuleMetadataParser"}, {"methodBody": ["METHOD_START", "{", "List < Element >    r    =    new   LinkedList < Element >  (  )  ;", "if    ( ent    !  =    null )     {", "NodeList   childs    =    ent . getChildNodes (  )  ;", "for    ( int   i    =     0  ;    i    <     ( childs . getLength (  )  )  ;    i +  +  )     {", "Node   node    =    childs . item ( i )  ;", "if    ( node   instanceof   Element )     {", "r . add (  (  ( Element )     ( node )  )  )  ;", "}", "}", "}", "return   r ;", "}", "METHOD_END"], "methodName": ["getAllChilds"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomDomParser"}, {"methodBody": ["METHOD_START", "{", "if    ( parentElem    =  =    null )     {", "return   null ;", "}", "NodeList   childs    =    parentElem . getChildNodes (  )  ;", "for    ( int   i    =     0  ;    i    <     ( childs . getLength (  )  )  ;    i +  +  )     {", "Node   node    =    childs . item ( i )  ;", "if    (  ( node   instanceof   Element )     &  &     ( name . equals ( node . getNodeName (  )  )  )  )     {", "return    (  ( Element )     ( node )  )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getFirstChildElement"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomDomParser"}, {"methodBody": ["METHOD_START", "{", "Element   node    =    PomDomParser . getFirstChildElement ( parentElem ,    name )  ;", "if    ( node    !  =    null )     {", "return   PomDomParser . getTextContent ( node )  ;", "} else    {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["getFirstChildText"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomDomParser"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   result    =    new   StringBuilder (  )  ;", "NodeList   childNodes    =    element . getChildNodes (  )  ;", "for    ( int   i    =     0  ;    i    <     ( childNodes . getLength (  )  )  ;    i +  +  )     {", "Node   child    =    childNodes . item ( i )  ;", "switch    ( child . getNodeType (  )  )     {", "case   Node . CDATA _ SECTION _ NODE    :", "case   Node . TEXT _ NODE    :", "result . append ( child . getNodeValue (  )  )  ;", "break ;", "default    :", "break ;", "}", "}", "return   result . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getTextContent"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomDomParser"}, {"methodBody": ["METHOD_START", "{", "if    (  ( resolvedDependencyMgts )     !  =    null )     {", "throw   new   IllegalStateException (  \" Cannot   add   imported   dependency   management   elements   after   dependency   management   elements   have   been   resolved   for   this   POM .  \"  )  ;", "}", "importedDependencyMgts . putAll ( inherited )  ;", "}", "METHOD_END"], "methodName": ["addImportedDependencyMgts"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "checkNotNull ( value ,    name ,    null )  ;", "}", "METHOD_END"], "methodName": ["checkNotNull"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "if    ( value    =  =    null )     {", "String   attributeName    =     ( element    =  =    null )     ?    name    :     ( element    +     \"     \"  )     +    name ;", "throw   new   RuntimeException (  (  \" Missing   required   attribute :     \"     +    attributeName )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkNotNull"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "return    !  ( activeByAbsenceOfPropertyPomProfiles . isEmpty (  )  )     ?    activeByAbsenceOfPropertyPomProfiles    :    activeByDefaultPomProfiles ;", "}", "METHOD_END"], "methodName": ["determineActiveProfiles"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "return   getDependencyMgt (  )  . get ( dependencyKey )  ;", "}", "METHOD_END"], "methodName": ["findDependencyDefaults"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "return   pomProperties ;", "}", "METHOD_END"], "methodName": ["getAllPomProperties"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "String   val    =    PomDomParser . getFirstChildText ( projectElement ,    PomReader . ARTIFACT _ ID )  ;", "if    ( val    =  =    null )     {", "val    =    PomDomParser . getFirstChildText ( parentElement ,    PomReader . ARTIFACT _ ID )  ;", "}", "checkNotNull ( val ,    PomReader . ARTIFACT _ ID )  ;", "return   replaceProps ( val )  ;", "}", "METHOD_END"], "methodName": ["getArtifactId"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "if    (  ( resolvedDependencies )     =  =    null )     {", "resolvedDependencies    =    resolveDependencies (  )  ;", "}", "return   resolvedDependencies ;", "}", "METHOD_END"], "methodName": ["getDependencies"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "List < PomReader . PomDependencyData >    depElements    =    new   ArrayList < PomReader . PomDependencyData >  (  )  ;", "Element   dependenciesElement    =    PomDomParser . getFirstChildElement ( parentElement ,    PomReader . DEPENDENCIES )  ;", "if    ( dependenciesElement    !  =    null )     {", "NodeList   childs    =    dependenciesElement . getChildNodes (  )  ;", "for    ( int   i    =     0  ;    i    <     ( childs . getLength (  )  )  ;    i +  +  )     {", "Node   node    =    childs . item ( i )  ;", "if    (  ( node   instanceof   Element )     &  &     ( PomReader . DEPENDENCY . equals ( node . getNodeName (  )  )  )  )     {", "depElements . add ( new   PomReader . PomDependencyData (  (  ( Element )     ( node )  )  )  )  ;", "}", "}", "}", "return   depElements ;", "}", "METHOD_END"], "methodName": ["getDependencyData"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "if    (  ( resolvedDependencyMgts )     =  =    null )     {", "resolvedDependencyMgts    =    resolveDependencyMgt (  )  ;", "}", "return   resolvedDependencyMgts ;", "}", "METHOD_END"], "methodName": ["getDependencyMgt"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "List < PomDependencyMgt >    depMgmtElements    =    new   ArrayList < PomDependencyMgt >  (  )  ;", "Element   dependenciesElement    =    PomDomParser . getFirstChildElement ( parentElement ,     . DEPENDENCY _ MGT )  ;", "dependenciesElement    =    PomDomParser . getFirstChildElement ( dependenciesElement ,     . DEPENDENCIES )  ;", "if    ( dependenciesElement    !  =    null )     {", "NodeList   childs    =    dependenciesElement . getChildNodes (  )  ;", "for    ( int   i    =     0  ;    i    <     ( childs . getLength (  )  )  ;    i +  +  )     {", "Node   node    =    childs . item ( i )  ;", "if    (  ( node   instanceof   Element )     &  &     (  . DEPENDENCY . equals ( node . getNodeName (  )  )  )  )     {", "depMgmtElements . add ( new    . PomDependencyMgtElement (  (  ( Element )     ( node )  )  )  )  ;", "}", "}", "}", "return   depMgmtElements ;", "}", "METHOD_END"], "methodName": ["getDependencyMgt"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "try    {", "DocumentBuilder   docBuilder    =     . DOCUMENT _ BUILDER _ FACTORY . newDocumentBuilder (  )  ;", "if    ( entityResolver    !  =    null )     {", "docBuilder . setEntityResolver ( entityResolver )  ;", "}", "return   docBuilder ;", "}    catch    ( ParserConfigurationException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["getDocBuilder"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "String   groupId    =    PomDomParser . getFirstChildText ( projectElement ,    PomReader . GROUP _ ID )  ;", "if    ( groupId    =  =    null )     {", "groupId    =    PomDomParser . getFirstChildText ( parentElement ,    PomReader . GROUP _ ID )  ;", "}", "checkNotNull ( groupId ,    PomReader . GROUP _ ID )  ;", "return   replaceProps ( groupId )  ;", "}", "METHOD_END"], "methodName": ["getGroupId"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "String   val    =    PomDomParser . getFirstChildText ( projectElement ,    PomReader . PACKAGING )  ;", "if    ( val    =  =    null )     {", "val    =     \" jar \"  ;", "}", "return   replaceProps ( val )  ;", "}", "METHOD_END"], "methodName": ["getPackaging"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "String   val    =    PomDomParser . getFirstChildText ( parentElement ,    PomReader . ARTIFACT _ ID )  ;", "if    ( val    =  =    null )     {", "val    =    PomDomParser . getFirstChildText ( projectElement ,    PomReader . ARTIFACT _ ID )  ;", "}", "checkNotNull ( val ,    PomReader . ARTIFACT _ ID )  ;", "return   replaceProps ( val )  ;", "}", "METHOD_END"], "methodName": ["getParentArtifactId"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "String   groupId    =    PomDomParser . getFirstChildText ( parentElement ,    PomReader . GROUP _ ID )  ;", "if    ( groupId    =  =    null )     {", "groupId    =    PomDomParser . getFirstChildText ( projectElement ,    PomReader . GROUP _ ID )  ;", "}", "checkNotNull ( groupId ,    PomReader . GROUP _ ID )  ;", "return   replaceProps ( groupId )  ;", "}", "METHOD_END"], "methodName": ["getParentGroupId"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "String   val    =    PomDomParser . getFirstChildText ( parentElement ,    PomReader . VERSION )  ;", "if    ( val    =  =    null )     {", "val    =    PomDomParser . getFirstChildText ( projectElement ,    PomReader . VERSION )  ;", "}", "return   replaceProps ( val )  ;", "}", "METHOD_END"], "methodName": ["getParentVersion"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "return   effectiveProperties ;", "}", "METHOD_END"], "methodName": ["getProperties"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "Element   distrMgt    =    PomDomParser . getFirstChildElement ( projectElement ,    PomReader . DISTRIBUTION _ MGT )  ;", "Element   relocation    =    PomDomParser . getFirstChildElement ( distrMgt ,    PomReader . RELOCATION )  ;", "if    ( relocation    =  =    null )     {", "return   null ;", "} else    {", "String   relocGroupId    =    PomDomParser . getFirstChildText ( relocation ,    PomReader . GROUP _ ID )  ;", "String   relocArtId    =    PomDomParser . getFirstChildText ( relocation ,    PomReader . ARTIFACT _ ID )  ;", "String   relocVersion    =    PomDomParser . getFirstChildText ( relocation ,    PomReader . VERSION )  ;", "relocGroupId    =     ( relocGroupId    =  =    null )     ?    getGroupId (  )     :    relocGroupId ;", "relocArtId    =     ( relocArtId    =  =    null )     ?    getArtifactId (  )     :    relocArtId ;", "relocVersion    =     ( relocVersion    =  =    null )     ?    getVersion (  )     :    relocVersion ;", "return   DefaultModuleVersionIdentifier . newId ( relocGroupId ,    relocArtId ,    relocVersion )  ;", "}", "}", "METHOD_END"], "methodName": ["getRelocation"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "String   val    =    PomDomParser . getFirstChildText ( projectElement ,    PomReader . VERSION )  ;", "if    ( val    =  =    null )     {", "val    =    PomDomParser . getFirstChildText ( parentElement ,    PomReader . VERSION )  ;", "}", "return   replaceProps ( val )  ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "return    ( parentElement )     !  =    null ;", "}", "METHOD_END"], "methodName": ["hasParent"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "String   propertyName    =    PomDomParser . getFirstChildText ( propertyElement ,     \" name \"  )  ;", "return   propertyName . startsWith (  \"  !  \"  )  ;", "}", "METHOD_END"], "methodName": ["isActivationPropertyActivated"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "if    (  (  !  ( effectiveProperties . containsKey ( prop )  )  )     &  &     ( val    !  =    null )  )     {", "effectiveProperties . put ( prop ,    val )  ;", "}", "}", "METHOD_END"], "methodName": ["maybeSetEffectiveProperty"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "for    ( String   name    :    gavProperty . getNames (  )  )     {", "maybeSetEffectiveProperty ( name ,    propertyValue )  ;", "}", "}", "METHOD_END"], "methodName": ["maybeSetGavProperties"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "if    (  ( declaredActivePomProfiles )     =  =    null )     {", "List < PomProfile >    activeByDefaultPomProfiles    =    new   ArrayList < PomProfile >  (  )  ;", "List < PomProfile >    activeByAbsenceOfPropertyPomProfiles    =    new   ArrayList < PomProfile >  (  )  ;", "Element   profilesElement    =    PomDomParser . getFirstChildElement ( projectElement ,     . PROFILES )  ;", "if    ( profilesElement    !  =    null )     {", "for    ( Element   profileElement    :    PomDomParser . getAllChilds ( profilesElement )  )     {", "if    (  . PROFILE . equals ( profileElement . getNodeName (  )  )  )     {", "Element   activationElement    =    PomDomParser . getFirstChildElement ( profileElement ,     . PROFILE _ ACTIVATION )  ;", "if    ( activationElement    !  =    null )     {", "String   activeByDefault    =    PomDomParser . getFirstChildText ( activationElement ,     . PROFILE _ ACTIVATION _ ACTIVE _ BY _ DEFAULT )  ;", "if    (  ( activeByDefault    !  =    null )     &  &     (  \" true \"  . equals ( activeByDefault )  )  )     {", "activeByDefaultPomProfiles . add ( new    . PomProfileElement ( profileElement )  )  ;", "} else    {", "Element   propertyElement    =    PomDomParser . getFirstChildElement ( activationElement ,     . PROFILE _ ACTIVATION _ PROPERTY )  ;", "if    ( propertyElement    !  =    null )     {", "if    ( isActivationPropertyActivated ( propertyElement )  )     {", "activeByAbsenceOfPropertyPomProfiles . add ( new    . PomProfileElement ( profileElement )  )  ;", "}", "}", "}", "}", "}", "}", "}", "declaredActivePomProfiles    =    determineActiveProfiles ( activeByDefaultPomProfiles ,    activeByAbsenceOfPropertyPomProfiles )  ;", "}", "return   declaredActivePomProfiles ;", "}", "METHOD_END"], "methodName": ["parseActivePomProfiles"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "if    (  ( declaredDependencyMgts )     =  =    null )     {", "List < PomDependencyMgt >    dependencyMgts    =    getDependencyMgt ( projectElement )  ;", "for    ( PomProfile   pomProfile    :    ActivePomProfiles (  )  )     {", "for    ( PomDependencyMgt   dependencyMgt    :    pomProfile . getDependencyMgts (  )  )     {", "dependencyMgts . add ( dependencyMgt )  ;", "}", "}", "declaredDependencyMgts    =    dependencyMgts ;", "}", "return   declaredDependencyMgts ;", "}", "METHOD_END"], "methodName": ["parseDependencyMgt"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    pomProperties    =    new   HashMap < String ,    String >  (  )  ;", "Element   propsEl    =    PomDomParser . getFirstChildElement ( parentElement ,     . PROPERTIES )  ;", "if    ( propsEl    !  =    null )     {", "propsEl . normalize (  )  ;", "}", "for    ( Element   prop    :    PomDomParser . getAllChilds ( propsEl )  )     {", "pomProperties . put ( prop . getNodeName (  )  ,    PomDomParser . getTextContent ( prop )  )  ;", "}", "return   pomProperties ;", "}", "METHOD_END"], "methodName": ["parseProperties"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "ClassLoader   original    =    Thread . currentThread (  )  . getContextClassLoader (  )  ;", "Thread . currentThread (  )  . setContextClassLoader ( ClassLoaderUtils . getPlatformClassLoader (  )  )  ;", "try    {", "InputStream   dtdStream    =    new   PomDomParser . AddDTDFilterInputStream ( stream )  ;", "return    . getDocBuilder (  . M 2  _ ENTITY _ RESOLVER )  . parse ( dtdStream ,    systemId )  ;", "}    finally    {", "Thread . currentThread (  )  . setContextClassLoader ( original )  ;", "}", "}", "METHOD_END"], "methodName": ["parseToDom"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "if    ( val    =  =    null )     {", "return   null ;", "} else    {", "return   IvyPatHelper . substituteVariables ( val ,    effectiveProperties )  . trim (  )  ;", "}", "}", "METHOD_END"], "methodName": ["replaceProps"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "Map < MavenDependencyKey ,    PomReader . PomDependencyData >    dependencies    =    new   LinkedHashMap < MavenDependencyKey ,    PomReader . PomDependencyData >  (  )  ;", "for    ( PomReader . PomDependencyData   dependency    :    getDependencyData ( projectElement )  )     {", "dependencies . put ( dependency . getId (  )  ,    dependency )  ;", "}", "for    ( Map . Entry < MavenDependencyKey ,    PomReader . PomDependencyData >    entry    :    pomParent . getDependencies (  )  . entrySet (  )  )     {", "if    (  !  ( dependencies . containsKey ( entry . getKey (  )  )  )  )     {", "dependencies . put ( entry . getKey (  )  ,    entry . getValue (  )  )  ;", "}", "}", "for    ( PomProfile   pomProfile    :    parseActivePomProfiles (  )  )     {", "for    ( PomReader . PomDependencyData   dependency    :    pomProfile . getDependencies (  )  )     {", "dependencies . put ( dependency . getId (  )  ,    dependency )  ;", "}", "}", "return   dependencies ;", "}", "METHOD_END"], "methodName": ["resolveDependencies"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "Map < MavenDependencyKey ,    PomDependencyMgt >    dependencies    =    new   LinkedHashMap < MavenDependencyKey ,    PomDependencyMgt >  (  )  ;", "dependencies . putAll ( pomParent . getDependencyMgt (  )  )  ;", "dependencies . putAll ( importedDependencyMgts )  ;", "for    ( PomDependencyMgt   dependencyMgt    :    DependencyMgt (  )  )     {", "dependencies . put ( dependencyMgt . getId (  )  ,    dependencyMgt )  ;", "}", "return   dependencies ;", "}", "METHOD_END"], "methodName": ["resolveDependencyMgt"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "setGavPropertyValue ( PomReader . GavProperty . GROUP _ ID ,    getGroupId (  )  )  ;", "setGavPropertyValue ( PomReader . GavProperty . ARTIFACT _ ID ,    getArtifactId (  )  )  ;", "setGavPropertyValue ( PomReader . GavProperty . VERSION ,    getVersion (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveGAV"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "for    ( PomProfile   activePomProfile    :    parseActivePomProfiles (  )  )     {", "for    ( Map . Entry < String ,    String >    property    :    activePomProfile . getProperties (  )  . entrySet (  )  )     {", "effectiveProperties . put ( property . getKey (  )  ,    property . getValue (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["setActiveProfileProperties"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "maybeSetGavProperties ( PomReader . GavProperty . PARENT _ GROUP _ ID ,    getParentGroupId (  )  )  ;", "maybeSetGavProperties ( PomReader . GavProperty . PARENT _ VERSION ,    getParentVersion (  )  )  ;", "maybeSetGavProperties ( PomReader . GavProperty . PARENT _ ARTIFACT _ ID ,    getParentArtifactId (  )  )  ;", "}", "METHOD_END"], "methodName": ["setDefaultParentGavProperties"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "for    ( String   name    :    gavProperty . getNames (  )  )     {", "effectivePropees . put ( name ,    propertyValue )  ;", "}", "}", "METHOD_END"], "methodName": ["setGavPropertyValue"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "this . pomParent    =    pomParent ;", "for    ( Map . Entry < String ,    String >    entry    :    pomParent . getPropees (  )  . entrySet (  )  )     {", "maybeSetEffectiveProperty ( entry . getKey (  )  ,    entry . getValue (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["setPomParent"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( pomProperties . isEmpty (  )  )  )     {", "this . pomProperties . putAll ( pomProperties )  ;", "for    ( Map . Entry < String ,    String >    pomProperty    :    pomProperties . entrySet (  )  )     {", "maybeSetEffectiveProperty ( pomProperty . getKey (  )  ,    pomProperty . getValue (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["setPomProperties"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.PomReader"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["findDependencyDefaults"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.RootPomParent"}, {"methodBody": ["METHOD_START", "{", "return   dependencies ;", "}", "METHOD_END"], "methodName": ["getDependencies"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.RootPomParent"}, {"methodBody": ["METHOD_START", "{", "return   dependencyMgts ;", "}", "METHOD_END"], "methodName": ["getDependencyMgt"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.RootPomParent"}, {"methodBody": ["METHOD_START", "{", "return   properties ;", "}", "METHOD_END"], "methodName": ["getProperties"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.RootPomParent"}, {"methodBody": ["METHOD_START", "{", "return   artifactId ;", "}", "METHOD_END"], "methodName": ["getArtifactId"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.data.MavenDependencyKey"}, {"methodBody": ["METHOD_START", "{", "return   classifier ;", "}", "METHOD_END"], "methodName": ["getClassifier"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.data.MavenDependencyKey"}, {"methodBody": ["METHOD_START", "{", "return   groupId ;", "}", "METHOD_END"], "methodName": ["getGroupId"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.data.MavenDependencyKey"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.parser.data.MavenDependencyKey"}, {"methodBody": ["METHOD_START", "{", "return   accept ( candidate . getId (  )  . getVersion (  )  )  ;", "}", "METHOD_END"], "methodName": ["accept"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.AbstractVersionSelector"}, {"methodBody": ["METHOD_START", "{", "return   selector ;", "}", "METHOD_END"], "methodName": ["getSelector"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.AbstractVersionSelector"}, {"methodBody": ["METHOD_START", "{", "Version   version 1     =    element 1  . getVersion (  )  ;", "Version   version 2     =    element 2  . getVersion (  )  ;", "return   base . compare ( version 1  ,    version 2  )  ;", "}", "METHOD_END"], "methodName": ["compare"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.DefaultVersionComparator"}, {"methodBody": ["METHOD_START", "{", "if    ( VersionRangeSelector . ALL _ RANGE . matcher ( selectorString )  . matches (  )  )     {", "return   new   VersionRangeSelector ( selectorString ,    versionComparator . asVersionComparator (  )  )  ;", "}", "if    ( selectorString . endsWith (  \"  +  \"  )  )     {", "return   new   SubVersionSelector ( selectorString )  ;", "}", "if    ( selectorString . startsWith (  \" latest .  \"  )  )     {", "return   new   Lates ( selectorString )  ;", "}", "return   new   Exac ( selectorString )  ;", "}", "METHOD_END"], "methodName": ["parseSelector"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.DefaultVersionSelectorScheme"}, {"methodBody": ["METHOD_START", "{", "return   selector . getSelector (  )  ;", "}", "METHOD_END"], "methodName": ["renderSelector"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.DefaultVersionSelectorScheme"}, {"methodBody": ["METHOD_START", "{", "String   selector    =    getSelector (  )  ;", "return    ( selector . isEmpty (  )  )     |  |     ( selector . equals ( candidate )  )  ;", "}", "METHOD_END"], "methodName": ["accept"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.ExactVersionSelector"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isDynamic"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.ExactVersionSelector"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["matchesUniqueVersion"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.ExactVersionSelector"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["requiresMetadata"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.ExactVersionSelector"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  \" accept ( String )  \"  )  ;", "}", "METHOD_END"], "methodName": ["accept"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.LatestVersionSelector"}, {"methodBody": ["METHOD_START", "{", "int   selectorStatusIndex    =    candidate . getStatusScheme (  )  . indexOf ( selectorStatus )  ;", "int   candidateStatusIndex    =    candidate . getStatusScheme (  )  . indexOf ( candidate . getStatus (  )  )  ;", "return    ( selectorStatusIndex    >  =     0  )     &  &     ( selectorStatusIndex    <  =    candidateStatusIndex )  ;", "}", "METHOD_END"], "methodName": ["accept"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.LatestVersionSelector"}, {"methodBody": ["METHOD_START", "{", "return   selectorStatus ;", "}", "METHOD_END"], "methodName": ["getSelectorStatus"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.LatestVersionSelector"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["isDynamic"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.LatestVersionSelector"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["matchesUniqueVersion"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.LatestVersionSelector"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["requiresMetadata"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.LatestVersionSelector"}, {"methodBody": ["METHOD_START", "{", "if    ( selectorString . equals ( MavenVersionSelectorScheme . RELEASE )  )     {", "return   new   LatestVersionSelector ( MavenVersionSelectorScheme . LATEST _ RELEASE )  ;", "} else", "if    ( selectorString . equals ( MavenVersionSelectorScheme . LATEST )  )     {", "return   new   LatestVersionSelector ( MavenVersionSelectorScheme . LATEST _ INTEGRATION )  ;", "} else    {", "return   defaultVersionSelectorScheme . parseSelector ( selectorString )  ;", "}", "}", "METHOD_END"], "methodName": ["parseSelector"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.MavenVersionSelectorScheme"}, {"methodBody": ["METHOD_START", "{", "return   toMavenSyntax ( defaultVersionSelectorScheme . renderSelector ( selector )  )  ;", "}", "METHOD_END"], "methodName": ["renderSelector"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.MavenVersionSelectorScheme"}, {"methodBody": ["METHOD_START", "{", "if    ( version . equals ( MavenVersionSelectorScheme . LATEST _ INTEGRATION )  )     {", "return   MavenVersionSelectorScheme . LATEST ;", "}", "if    ( version . equals ( MavenVersionSelectorScheme . LATEST _ RELEASE )  )     {", "return   MavenVersionSelectorScheme . RELEASE ;", "}", "if    ( version . startsWith (  \"  ]  \"  )  )     {", "version    =     '  (  '     +     ( version . substring (  1  )  )  ;", "}", "if    ( version . endsWith (  \"  [  \"  )  )     {", "version    =     ( version . substring (  0  ,     (  ( version . length (  )  )     -     1  )  )  )     +     '  )  '  ;", "}", "return   version ;", "}", "METHOD_END"], "methodName": ["toMavenSyntax"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.MavenVersionSelectorScheme"}, {"methodBody": ["METHOD_START", "{", "if    ( version 1  . equals ( version 2  )  )     {", "return    0  ;", "}", "String [  ]    parts 1     =    version 1  . getParts (  )  ;", "String [  ]    parts 2     =    version 2  . getParts (  )  ;", "Long [  ]    numericParts 1     =    version 1  . getNumericParts (  )  ;", "Long [  ]    numericParts 2     =    version 2  . getNumericParts (  )  ;", "int   i    =     0  ;", "for    (  ;     ( i    <     ( parts 1  . length )  )     &  &     ( i    <     ( parts 2  . length )  )  ;    i +  +  )     {", "String   part 1     =    parts 1  [ i ]  ;", "String   part 2     =    parts 2  [ i ]  ;", "Long   numericPart 1     =    numericParts 1  [ i ]  ;", "Long   numericPart 2     =    numericParts 2  [ i ]  ;", "boolean   is 1 Number    =    numericPart 1     !  =    null ;", "boolean   is 2 Number    =    numericPart 2     !  =    null ;", "if    ( part 1  . equals ( part 2  )  )     {", "continue ;", "}", "if    ( is 1 Number    &  &     (  ! is 2 Number )  )     {", "return    1  ;", "}", "if    ( is 2 Number    &  &     (  ! is 1 Number )  )     {", "return    -  1  ;", "}", "if    ( is 1 Number    &  &    is 2 Number )     {", "return   numericPart 1  . compareTo ( numericPart 2  )  ;", "}", "Integer   sm 1     =     . SPECIAL _ MEANINGS . get ( part 1  . toLowerCase ( Locale . US )  )  ;", "Integer   sm 2     =     . SPECIAL _ MEANINGS . get ( part 2  . toLowerCase ( Locale . US )  )  ;", "if    ( sm 1     !  =    null )     {", "sm 2     =     ( sm 2     =  =    null )     ?     0     :    sm 2  ;", "return   sm 1     -    sm 2  ;", "}", "if    ( sm 2     !  =    null )     {", "return    - sm 2  ;", "}", "return   part 1  . compareTo ( part 2  )  ;", "}", "if    ( i    <     ( parts 1  . length )  )     {", "return    ( numericParts 1  [ i ]  )     =  =    null    ?     -  1     :     1  ;", "}", "if    ( i    <     ( parts 2  . length )  )     {", "return    ( numericParts 2  [ i ]  )     =  =    null    ?     1     :     -  1  ;", "}", "return    0  ;", "}", "METHOD_END"], "methodName": ["compare"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.StaticVersionComparator"}, {"methodBody": ["METHOD_START", "{", "return   candidate . startsWith ( prefix )  ;", "}", "METHOD_END"], "methodName": ["accept"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.SubVersionSelector"}, {"methodBody": ["METHOD_START", "{", "return   prefix ;", "}", "METHOD_END"], "methodName": ["getPrefix"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.SubVersionSelector"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["isDynamic"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.SubVersionSelector"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["matchesUniqueVersion"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.SubVersionSelector"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["requiresMetadata"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.SubVersionSelector"}, {"methodBody": ["METHOD_START", "{", "return   selectors ;", "}", "METHOD_END"], "methodName": ["getSelectors"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.UnionVersionSelector"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < VersionSelector >    builder    =    new   ImmutableList . Builder < VersionSelector >  (  )  ;", "for    ( String   selector    :    selectors )     {", "builder . add ( scheme . parseSelector ( selector )  )  ;", "}", "return   new    ( builder . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.UnionVersionSelector"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( lowerBound )     !  =    null )     &  &     (  !  ( isHigher ( candidate ,    lowerBoundVersion ,    lowerInclusive )  )  )  )     {", "return   false ;", "}", "if    (  (  ( upperBound )     !  =    null )     &  &     (  !  ( isLower ( candidate ,    upperBoundVersion ,    upperInclusive )  )  )  )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["accept"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.VersionRangeSelector"}, {"methodBody": ["METHOD_START", "{", "return   lowerBound ;", "}", "METHOD_END"], "methodName": ["getLowerBound"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.VersionRangeSelector"}, {"methodBody": ["METHOD_START", "{", "return   lowerBoundVersion ;", "}", "METHOD_END"], "methodName": ["getLowerBoundVersion"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.VersionRangeSelector"}, {"methodBody": ["METHOD_START", "{", "return   upperBound ;", "}", "METHOD_END"], "methodName": ["getUpperBound"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.VersionRangeSelector"}, {"methodBody": ["METHOD_START", "{", "return   upperBoundVersion ;", "}", "METHOD_END"], "methodName": ["getUpperBoundVersion"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.VersionRangeSelector"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   sb    =    new   StringBuilder (  )  ;", "Version   lower    =    null ;", "Version   upper    =    null ;", "boolean   lowerInc    =    false ;", "if    (  ( lowerBound )     =  =    null )     {", "if    (  ( other . lowerBound )     =  =    null )     {", "sb . append (  . LOWER _ INFINITE )  ;", "} else    {", "sb . append (  ( other . lowerInclusive    ?     . OPEN _ INC    :     . OPEN _ EXC )  )  ;", "sb . append ( other . lowerBound )  ;", "lower    =    other . lowerBoundVersion ;", "lowerInc    =    other . lowerInclusive ;", "}", "} else    {", "if    (  (  ( other . lowerBound )     =  =    null )     |  |     ( isHigher ( lowerBoundVersion ,    other . lowerBoundVersion ,    lowerInclusive )  )  )     {", "lowerInc    =     ( lowerBound . equals ( other . lowerBound )  )     ?     ( lowerInclusive )     &  &     ( other . lowerInclusive )     :    lowerInclusive ;", "sb . append (  ( lowerInc    ?     . OPEN _ INC    :     . OPEN _ EXC )  )  ;", "sb . append ( lowerBound )  ;", "lower    =    lowerBoundVersion ;", "} else    {", "lowerInc    =     ( other . lowerBound . equals ( lowerBound )  )     ?     ( lowerInclusive )     &  &     ( other . lowerInclusive )     :    other . lowerInclusive ;", "sb . append (  ( lowerInc    ?     . OPEN _ INC    :     . OPEN _ EXC )  )  ;", "sb . append ( other . lowerBound )  ;", "lower    =    other . lowerBoundVersion ;", "lowerInc    =    other . lowerInclusive ;", "}", "}", "sb . append (  . SEPARATOR )  ;", "if    (  ( upperBound )     =  =    null )     {", "if    (  ( other . upperBound )     =  =    null )     {", "sb . append (  . UPPER _ INFINITE )  ;", "} else    {", "sb . append ( other . upperBound )  ;", "sb . append (  ( other . upperInclusive    ?     . CLOSE _ INC    :     . CLOSE _ EXC )  )  ;", "upper    =    other . upperBoundVersion ;", "}", "} else    {", "if    (  (  ( other . upperBound )     =  =    null )     |  |     ( isLower ( upperBoundVersion ,    other . upperBoundVersion ,    upperInclusive )  )  )     {", "sb . append ( upperBound )  ;", "boolean   inclusive    =     ( upperBound . equals ( other . upperBound )  )     ?     ( upperInclusive )     &  &     ( other . upperInclusive )     :    upperInclusive ;", "sb . append (  ( inclusive    ?     . CLOSE _ INC    :     . CLOSE _ EXC )  )  ;", "upper    =    upperBoundVersion ;", "} else    {", "sb . append ( other . upperBound )  ;", "boolean   inclusive    =     ( other . upperBound . equals ( upperBound )  )     ?     ( upperInclusive )     &  &     ( other . upperInclusive )     :    other . upperInclusive ;", "sb . append (  ( inclusive    ?     . CLOSE _ INC    :     . CLOSE _ EXC )  )  ;", "upper    =    other . upperBoundVersion ;", "}", "}", "if    (  (  ( lower    !  =    null )     &  &     ( upper    !  =    null )  )     &  &     ( isHigher ( lower ,    upper ,    lowerInc )  )  )     {", "return   null ;", "}", "if    (  (  ( lower    !  =    null )     &  &     ( lower . equals ( upper )  )  )     &  &     (  ! lowerInc )  )     {", "return   null ;", "}", "return   new    ( sb . toString (  )  ,    comparator )  ;", "}", "METHOD_END"], "methodName": ["intersect"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.VersionRangeSelector"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["isDynamic"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.VersionRangeSelector"}, {"methodBody": ["METHOD_START", "{", "int   result    =    comparator . compare ( version 1  ,    version 2  )  ;", "return   result    >  =     ( inclusive    ?     0     :     1  )  ;", "}", "METHOD_END"], "methodName": ["isHigher"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.VersionRangeSelector"}, {"methodBody": ["METHOD_START", "{", "int   result    =    comparator . compare ( version 1  ,    version 2  )  ;", "return   result    <  =     ( inclusive    ?     0     :     -  1  )  ;", "}", "METHOD_END"], "methodName": ["isLower"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.VersionRangeSelector"}, {"methodBody": ["METHOD_START", "{", "return   lowerInclusive ;", "}", "METHOD_END"], "methodName": ["isLowerInclusive"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.VersionRangeSelector"}, {"methodBody": ["METHOD_START", "{", "return   upperInclusive ;", "}", "METHOD_END"], "methodName": ["isUpperInclusive"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.VersionRangeSelector"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["matchesUniqueVersion"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.VersionRangeSelector"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["requiresMetadata"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.ivyresolve.strategy.VersionRangeSelector"}, {"methodBody": ["METHOD_START", "{", "return   ageMillis ;", "}", "METHOD_END"], "methodName": ["getAgeMillis"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.DefaultCachedMetadata"}, {"methodBody": ["METHOD_START", "{", "return   metadata ;", "}", "METHOD_END"], "methodName": ["getMetadata"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.DefaultCachedMetadata"}, {"methodBody": ["METHOD_START", "{", "return   moduleSource ;", "}", "METHOD_END"], "methodName": ["getModuleSource"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.DefaultCachedMetadata"}, {"methodBody": ["METHOD_START", "{", "return   isMissing (  )     ?    null    :    new   DefaultResolvedModuleVersion ( getMetadata (  )  . getModuleVersionId (  )  )  ;", "}", "METHOD_END"], "methodName": ["getModuleVersion"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.DefaultCachedMetadata"}, {"methodBody": ["METHOD_START", "{", "return    ( metadata )     =  =    null ;", "}", "METHOD_END"], "methodName": ["isMissing"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.DefaultCachedMetadata"}, {"methodBody": ["METHOD_START", "{", "if    (  ( cache )     =  =    null )     {", "cache    =    initCache (  )  ;", "}", "return   cache ;", "}", "METHOD_END"], "methodName": ["getCache"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.DefaultModuleMetadataCache"}, {"methodBody": ["METHOD_START", "{", "return   cacheLockingManager . createCache (  \" module - metadata \"  ,    new   DefaultModuleMetadataCache . RevisionKeySerializer (  )  ,    new   ModuleMetadataCacheEntrySerializer (  )  )  ;", "}", "METHOD_END"], "methodName": ["initCache"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.DefaultModuleMetadataCache"}, {"methodBody": ["METHOD_START", "{", "final   PersistentIndexedCache < ModuleComponentAtRepositoryKey ,    ModuleMetadataCacheEntry >    cache    =    getCache (  )  ;", "return   cacheLockingManager . useCache ( new   Factory < ModuleMetadataCache . CachedMetadata >  (  )     {", "@ Override", "public   ModuleMetadataCache . CachedMetadata   create (  )     {", "ModuleMetadataCacheEntry   entry    =    cache . get ( key )  ;", "if    ( entry    =  =    null )     {", "return   null ;", "}", "if    ( entry . isMissing (  )  )     {", "return   new   DefaultCachedMetadata ( entry ,    null ,    timeProvider )  ;", "}", "MutableModuleComponentResolveMetadata   metadata    =    moduleMetadataStore . getModuleDescriptor ( key )  ;", "if    ( metadata    =  =    null )     {", "cache . remove ( key )  ;", "return   null ;", "}", "return   new   DefaultCachedMetadata ( entry ,    entry . configure ( metadata )  ,    timeProvider )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["loadCachedMetadata"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.DefaultModuleMetadataCache"}, {"methodBody": ["METHOD_START", "{", "InMemoryModuleMetadataCache . LOGGER . debug (  \" Recording   module   descriptor   in   cache :     {  }     [ changing    =     {  }  ]  \"  ,    metadata . getId (  )  ,    metadata . isChanging (  )  )  ;", "final   ModuleComponentAtRepositoryKey   key    =    createKey ( repository ,    id )  ;", "ModuleMetadataCacheEntry   entry    =    createEntry ( metadata )  ;", "DefaultCachedMetadata   cachedMetaData    =    new   DefaultCachedMetadata ( entry ,    metadata ,    timeProvider )  ;", "store ( key ,    entry ,    cachedMetaData )  ;", "return   cachedMetaData ;", "}", "METHOD_END"], "methodName": ["cacheMetaData"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.InMemoryModuleMetadataCache"}, {"methodBody": ["METHOD_START", "{", "InMemoryModuleMetadataCache . LOGGER . debug (  \" Recording   absence   of   module   descriptor   in   cache :     {  }     [ changing    =     {  }  ]  \"  ,    id ,    false )  ;", "ModuleComponentAtRepositoryKey   key    =    createKey ( repository ,    id )  ;", "ModuleMetadataCacheEntry   entry    =    ModuleMetadataCacheEntry . forMissingModule ( timeProvider . getCurrentTime (  )  )  ;", "DefaultCachedMetadata   cachedMetaData    =    new   DefaultCachedMetadata ( entry ,    null ,    timeProvider )  ;", "store ( key ,    entry ,    cachedMetaData )  ;", "return   cachedMetaData ;", "}", "METHOD_END"], "methodName": ["cacheMissing"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.InMemoryModuleMetadataCache"}, {"methodBody": ["METHOD_START", "{", "return   ModuleMetadataCacheEntry . forMetaData ( metaData ,    timeProvider . getCurrentTime (  )  )  ;", "}", "METHOD_END"], "methodName": ["createEntry"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.InMemoryModuleMetadataCache"}, {"methodBody": ["METHOD_START", "{", "return   new   ModuleComponentAtRepositoryKey ( repository . getId (  )  ,    id )  ;", "}", "METHOD_END"], "methodName": ["createKey"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.InMemoryModuleMetadataCache"}, {"methodBody": ["METHOD_START", "{", "return   inMemoryCache . get ( key )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.InMemoryModuleMetadataCache"}, {"methodBody": ["METHOD_START", "{", "final   ModuleComponentAtRepositoryKey   key    =    createKey ( repository ,    componentId )  ;", "return   get ( key )  ;", "}", "METHOD_END"], "methodName": ["getCachedModuleDescriptor"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.InMemoryModuleMetadataCache"}, {"methodBody": ["METHOD_START", "{", "inMemoryCache . put ( key ,    cachedMetaData )  ;", "}", "METHOD_END"], "methodName": ["store"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.InMemoryModuleMetadataCache"}, {"methodBody": ["METHOD_START", "{", "return   componentId ;", "}", "METHOD_END"], "methodName": ["getComponentId"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.ModuleComponentAtRepositoryKey"}, {"methodBody": ["METHOD_START", "{", "return   repositoryId ;", "}", "METHOD_END"], "methodName": ["getRepositoryId"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.ModuleComponentAtRepositoryKey"}, {"methodBody": ["METHOD_START", "{", "input . setChanging ( isChanging )  ;", "input . setSource ( Source )  ;", "return   input . asImmutable (  )  ;", "}", "METHOD_END"], "methodName": ["configure"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.ModuleMetadataCacheEntry"}, {"methodBody": ["METHOD_START", "{", "return   new   ModuleMetadataCacheEntry ( ModuleMetadataCacheEntry . TYPE _ PRESENT ,    metaData . isChanging (  )  ,    createTimestamp ,    metaData . getSource (  )  )  ;", "}", "METHOD_END"], "methodName": ["forMetaData"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.ModuleMetadataCacheEntry"}, {"methodBody": ["METHOD_START", "{", "return   new   MissingModuleCacheEntry ( createTimestamp )  ;", "}", "METHOD_END"], "methodName": ["forMissingModule"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.ModuleMetadataCacheEntry"}, {"methodBody": ["METHOD_START", "{", "return    ( type )     =  =     ( ModuleMetadataCacheEntry . TYPE _ MISSING )  ;", "}", "METHOD_END"], "methodName": ["isMissing"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.ModuleMetadataCacheEntry"}, {"methodBody": ["METHOD_START", "{", "byte   type    =    decoder . readByte (  )  ;", "switch    ( type )     {", "case    . TYPE _ MISSING    :", "long   createTimestamp    =    decoder . readLong (  )  ;", "return   new   MissingModuleCacheEntry ( createTimestamp )  ;", "case    . TYPE _ PRESENT    :", "boolean   isChanging    =    decoder . readBoolean (  )  ;", "createTimestamp    =    decoder . readLong (  )  ;", "ModuleSource   moduleSource    =    moduleSourceSerializer . read ( decoder )  ;", "return   new    (  . TYPE _ PRESENT ,    isChanging ,    createTimestamp ,    moduleSource )  ;", "default    :", "throw   new   IllegalArgumentException (  (  \" Don ' t   know   how   to   deserialize   meta - data   entry   of   type    \"     +    type )  )  ;", "}", "}", "METHOD_END"], "methodName": ["read"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.ModuleMetadataCacheEntrySerializer"}, {"methodBody": ["METHOD_START", "{", "encoder . writeByte ( value . type )  ;", "switch    ( value . type )     {", "case    . TYPE _ MISSING    :", "encoder . writeLong ( value . createTimestamp )  ;", "break ;", "case    . TYPE _ PRESENT    :", "encoder . writeBoolean ( value . isChanging )  ;", "encoder . writeLong ( value . createTimestamp )  ;", "moduleSourceSerializer . write ( encoder ,    value . moduleSource )  ;", "break ;", "default    :", "throw   new   IllegalArgumentException (  (  \" Don ' t   know   how   to   serialize   meta - data   entry :     \"     +    value )  )  ;", "}", "}", "METHOD_END"], "methodName": ["write"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.ModuleMetadataCacheEntrySerializer"}, {"methodBody": ["METHOD_START", "{", "return   new   ModuleMetadataSerializer . Reader ( decoder ,    moduleIdentifierFactory ,    attributeContainerSerializer ,    mavenMetadataFactory ,    ivyMetadataFactory )  . read (  )  ;", "}", "METHOD_END"], "methodName": ["read"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.ModuleMetadataSerializer"}, {"methodBody": ["METHOD_START", "{", "new   ModuleMetadataSerializer . Writer ( encoder ,    attributeContainerSerializer )  . write ( metadata )  ;", "}", "METHOD_END"], "methodName": ["write"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.ModuleMetadataSerializer"}, {"methodBody": ["METHOD_START", "{", "ModuleComponentIdentifier   moduleComponentIdentifier    =    componentId . getComponentId (  )  ;", "return    (  (  (  (  (  (  ( moduleComponentIdentifier . getGroup (  )  )     +     \"  /  \"  )     +     ( moduleComponentIdentifier . getModule (  )  )  )     +     \"  /  \"  )     +     ( moduleComponentIdentifier . getVersion (  )  )  )     +     \"  /  \"  )     +     ( componentId . getRepositoryId (  )  )  )     +     \"  / descriptor . bin \"  ;", "}", "METHOD_END"], "methodName": ["getFilePath"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.ModuleMetadataStore"}, {"methodBody": ["METHOD_START", "{", "String   filePath    =    getFilePath ( component )  ;", "final   LocallyAvailableResource   resource    =    metaDataStore . get ( filePath )  ;", "if    ( resource    !  =    null )     {", "try    {", "KryoBackedDecoder   decoder    =    new   KryoBackedDecoder ( new   FileInputStream ( resource . getFile (  )  )  )  ;", "try    {", "return   merializer . read ( decoder ,    moduleIdentifierFactory )  ;", "}    finally    {", "decoder . close (  )  ;", "}", "}    catch    ( Exception   e )     {", "throw   new   RuntimeException (  (  \" Could   not   load   module   metadata   from    \"     +     ( resource . getDisplayName (  )  )  )  ,    e )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getModuleDescriptor"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.ModuleMetadataStore"}, {"methodBody": ["METHOD_START", "{", "String   filePath    =    getFilePath ( component )  ;", "return   metaDataStore . add ( filePath ,    new   Action < File >  (  )     {", "public   void   execute ( File   moduleDescriptorFile )     {", "try    {", "KryoBackedEncoder   encoder    =    new   KryoBackedEncoder ( new   FileOutputStream ( moduleDescriptorFile )  )  ;", "try    {", "moduleMetadataSerializer . write ( encoder ,    metadata )  ;", "}    finally    {", "encoder . close (  )  ;", "}", "}    catch    ( Exception   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["putModuleDescriptor"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.ModuleMetadataStore"}, {"methodBody": ["METHOD_START", "{", "return   caches ;", "}", "METHOD_END"], "methodName": ["getCaches"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.ModuleRepositoryCacheProvider"}, {"methodBody": ["METHOD_START", "{", "return   inMemoryCaches ;", "}", "METHOD_END"], "methodName": ["getInMemoryCaches"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.ModuleRepositoryCacheProvider"}, {"methodBody": ["METHOD_START", "{", "return   resolvedArtifactCaches ;", "}", "METHOD_END"], "methodName": ["getResolvedArtifactCaches"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.ModuleRepositoryCacheProvider"}, {"methodBody": ["METHOD_START", "{", "Map < ComponentArtifactIdentifier ,    ResolvableArtifact >    resolvedArtifactCache    =    cachePerRepo . get ( input . getId (  )  )  ;", "if    ( resolvedArtifactCache    =  =    null )     {", ". LOG . debug (  \" Creating   new   in - memory   cache   for   repo    '  {  }  '     [  {  }  ]  .  \"  ,    input . getName (  )  ,    input . getId (  )  )  ;", "resolvedArtifactCache    =    Maps . newConcurrentMap (  )  ;", "cachePerRepo . put ( input . getId (  )  ,    resolvedArtifactCache )  ;", "} else    {", ". LOG . debug (  \" Reusing   in - memory   cache   for   repo    '  {  }  '     [  {  }  ]  .  \"  ,    input . getName (  )  ,    input . getId (  )  )  ;", "}", "return   resolvedArtifactCache ;", "}", "METHOD_END"], "methodName": ["getResolvedArtifactCache"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.ResolvedArtifactCaches"}, {"methodBody": ["METHOD_START", "{", "Map < ComponentArtifactIdentifier ,    ResolvableArtifact >    caches    =    ge ( input )  ;", "return   newsProvidingModuleComponentRepository ( caches ,    input )  ;", "}", "METHOD_END"], "methodName": ["provideResolvedArtifactCache"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.ResolvedArtifactCaches"}, {"methodBody": ["METHOD_START", "{", "cachePerRepo . clear (  )  ;", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.ResolvedArtifactCaches"}, {"methodBody": ["METHOD_START", "{", "return   artifactId ;", "}", "METHOD_END"], "methodName": ["getArtifactId"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.artifacts.ArtifactAtRepositoryKey"}, {"methodBody": ["METHOD_START", "{", "return   repositoryId ;", "}", "METHOD_END"], "methodName": ["getRepositoryId"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.artifacts.ArtifactAtRepositoryKey"}, {"methodBody": ["METHOD_START", "{", "return   attemptedLocations ;", "}", "METHOD_END"], "methodName": ["attemptedLocations"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.artifacts.DefaultCachedArtifact"}, {"methodBody": ["METHOD_START", "{", "return   cachedAt ;", "}", "METHOD_END"], "methodName": ["getCachedAt"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.artifacts.DefaultCachedArtifact"}, {"methodBody": ["METHOD_START", "{", "return   cachedFile ;", "}", "METHOD_END"], "methodName": ["getCachedFile"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.artifacts.DefaultCachedArtifact"}, {"methodBody": ["METHOD_START", "{", "return   descriptorHash ;", "}", "METHOD_END"], "methodName": ["getDescriptorHash"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.artifacts.DefaultCachedArtifact"}, {"methodBody": ["METHOD_START", "{", "return    ( cachedFile )     =  =    null ;", "}", "METHOD_END"], "methodName": ["isMissing"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.artifacts.DefaultCachedArtifact"}, {"methodBody": ["METHOD_START", "{", "return   ageMillis ;", "}", "METHOD_END"], "methodName": ["getAgeMillis"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.artifacts.DefaultCachedArtifacts"}, {"methodBody": ["METHOD_START", "{", "return   artifacts ;", "}", "METHOD_END"], "methodName": ["getArtifacts"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.artifacts.DefaultCachedArtifacts"}, {"methodBody": ["METHOD_START", "{", "return   descriptorHash ;", "}", "METHOD_END"], "methodName": ["getDescriptorHash"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.artifacts.DefaultCachedArtifacts"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultCachedArtifact ( artifactFile ,    timeProvider . getCurrentTime (  )  ,    moduleDescriptorHash )  ;", "}", "METHOD_END"], "methodName": ["createEntry"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.artifacts.DefaultModuleArtifactCache"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultCachedArtifact ( attemptedLocations ,    timeProvider . getCurrentTime (  )  ,    descriptorHash )  ;", "}", "METHOD_END"], "methodName": ["createMissingEntry"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.artifacts.DefaultModuleArtifactCache"}, {"methodBody": ["METHOD_START", "{", "DefaultSerializerRegistry   serializerRegistry    =    new   DefaultSerializerRegistry (  )  ;", "serializerRegistry . register ( DefaultModuleComponentArtifactIdentifier . class ,    new   ComponentArtifactIdentifierSerializer (  )  )  ;", "serializerRegistry . register ( ModuleComponentFileArtifactIdentifier . class ,    new   ModuleComponentFileArtifactIdentifierSerializer (  )  )  ;", "return   new    . ArtifactAtRepositoryKeySerializer ( serializerRegistry . build ( ComponentArtifactIdentifier . class )  )  ;", "}", "METHOD_END"], "methodName": ["keySerializer"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.artifacts.DefaultModuleArtifactCache"}, {"methodBody": ["METHOD_START", "{", "assertArtifactFileNotNull ( artifactFile )  ;", "assertKeyNotNull ( key )  ;", "storeInternal ( key ,    createEntry ( artifactFile ,    moduleDescriptorHash )  )  ;", "}", "METHOD_END"], "methodName": ["store"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.artifacts.DefaultModuleArtifactCache"}, {"methodBody": ["METHOD_START", "{", "storeInternal ( key ,    createMissingEntry ( attemptedLocations ,    descriptorHash )  )  ;", "}", "METHOD_END"], "methodName": ["storeMissing"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.artifacts.DefaultModuleArtifactCache"}, {"methodBody": ["METHOD_START", "{", "if    (  ( cache )     =  =    null )     {", "cache    =    initCache (  )  ;", "}", "return   cache ;", "}", "METHOD_END"], "methodName": ["getCache"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.artifacts.DefaultModuleArtifactsCache"}, {"methodBody": ["METHOD_START", "{", "return   cacheLockingManager . createCache (  \" module - artifacts \"  ,    new   DefaultModuleArtifactsCache . ModuleArtifactsKeySerializer (  )  ,    new   DefaultModuleArtifactsCache . ModuleArtifactsCacheEntrySerializer (  )  )  ;", "}", "METHOD_END"], "methodName": ["initCache"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.artifacts.DefaultModuleArtifactsCache"}, {"methodBody": ["METHOD_START", "{", "ArtifactsAtRepositoryKey   key    =    new   ArtifactsAtRepositoryKey ( repository . getId (  )  ,    componentId ,    context )  ;", ". ModuleArtifactsCacheEntry   entry    =    new    . ModuleArtifactsCacheEntry ( ImmutableSet . copyOf ( artifacts )  ,    timeProvider . getCurrentTime (  )  ,    descriptorHash )  ;", "store ( key ,    entry )  ;", "return   createCacheArtifacts ( entry )  ;", "}", "METHOD_END"], "methodName": ["cacheArtifacts"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.artifacts.InMemoryModuleArtifactsCache"}, {"methodBody": ["METHOD_START", "{", "long   entryAge    =     ( timeProvider . getCurrentTime (  )  )     -     ( entry . createTimestamp )  ;", "return   new   DefaultCachedArtifacts ( entry ,    entry . moduleDescriptorHash ,    entryAge )  ;", "}", "METHOD_END"], "methodName": ["createCacheArtifacts"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.artifacts.InMemoryModuleArtifactsCache"}, {"methodBody": ["METHOD_START", "{", "return   inMemoryCache . get ( key )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.artifacts.InMemoryModuleArtifactsCache"}, {"methodBody": ["METHOD_START", "{", "ArtifactsAtRepositoryKey   key    =    new   ArtifactsAtRepositoryKey ( repository . getId (  )  ,    componentId ,    context )  ;", ". ModuleArtifactsCacheEntry   entry    =    get ( key )  ;", "return   entry    =  =    null    ?    null    :    createCacheArtifacts ( entry )  ;", "}", "METHOD_END"], "methodName": ["getCachedArtifacts"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.artifacts.InMemoryModuleArtifactsCache"}, {"methodBody": ["METHOD_START", "{", "inMemoryCache . put ( key ,    entry )  ;", "}", "METHOD_END"], "methodName": ["store"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.artifacts.InMemoryModuleArtifactsCache"}, {"methodBody": ["METHOD_START", "{", "return   ageMillis ;", "}", "METHOD_END"], "methodName": ["getAgeMillis"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.dynamicversions.DefaultCachedModuleVersionList"}, {"methodBody": ["METHOD_START", "{", "return   moduleVersions ;", "}", "METHOD_END"], "methodName": ["getModuleVersions"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.dynamicversions.DefaultCachedModuleVersionList"}, {"methodBody": ["METHOD_START", "{", "if    (  ( cache )     =  =    null )     {", "cache    =    initCache (  )  ;", "}", "return   cache ;", "}", "METHOD_END"], "methodName": ["getCache"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.dynamicversions.DefaultModuleVersionsCache"}, {"methodBody": ["METHOD_START", "{", "return   cacheLockingManager . createCache (  \" module - versions \"  ,    new   DefaultModuleVersionsCache . ModuleKeySerializer ( moduleIdentifierFactory )  ,    new   DefaultModuleVersionsCache . ModuleVersionsCacheEntrySerializer (  )  )  ;", "}", "METHOD_END"], "methodName": ["initCache"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.dynamicversions.DefaultModuleVersionsCache"}, {"methodBody": ["METHOD_START", "{", "return   identifier ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.dynamicversions.DefaultResolvedModuleVersion"}, {"methodBody": ["METHOD_START", "{", "InMemoryModuleVersionsCache . LOGGER . debug (  \" Caching   version   list   in   module   versions   cache :    Using    '  {  }  '    for    '  {  }  '  \"  ,    listedVersions ,    moduleId )  ;", "ModuleAtRepositoryKey   key    =    createKey ( repository ,    moduleId )  ;", "ModuleVersionsCacheEntry   entry    =    createEntry ( listedVersions )  ;", "store ( key ,    entry )  ;", "}", "METHOD_END"], "methodName": ["cacheModuleVersionList"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.dynamicversions.InMemoryModuleVersionsCache"}, {"methodBody": ["METHOD_START", "{", "return   new   ModuleVersionsCacheEntry ( listedVersions ,    timeProvider . getCurrentTime (  )  )  ;", "}", "METHOD_END"], "methodName": ["createEntry"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.dynamicversions.InMemoryModuleVersionsCache"}, {"methodBody": ["METHOD_START", "{", "return   new   ModuleAtRepositoryKey ( repository . getId (  )  ,    moduleId )  ;", "}", "METHOD_END"], "methodName": ["createKey"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.dynamicversions.InMemoryModuleVersionsCache"}, {"methodBody": ["METHOD_START", "{", "return   inMemoryCache . get ( key )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.dynamicversions.InMemoryModuleVersionsCache"}, {"methodBody": ["METHOD_START", "{", "ModuleAtRepositoryKey   key    =    createKey ( repository ,    moduleId )  ;", "Entry   entry    =    get ( key )  ;", "return   entry    =  =    null    ?    null    :    versionList ( entry )  ;", "}", "METHOD_END"], "methodName": ["getCachedModuleResolution"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.dynamicversions.InMemoryModuleVersionsCache"}, {"methodBody": ["METHOD_START", "{", "inMemoryCache . put ( key ,    entry )  ;", "}", "METHOD_END"], "methodName": ["store"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.dynamicversions.InMemoryModuleVersionsCache"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultCachedModuleVersionList ( moduleVersionsCacheEntry ,    timeProvider )  ;", "}", "METHOD_END"], "methodName": ["versionList"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.modulecache.dynamicversions.InMemoryModuleVersionsCache"}, {"methodBody": ["METHOD_START", "{", "BuildableLocalConfigurationMetadata   configurationMetadata    =    createConfiguration ( metaData ,    configuration )  ;", "metaData . addDependenciesAndExcludesForConfiguration ( configuration ,    configuration )  ;", "OutgoingVariant   outgoingVariant    =    configuration . convertToOutgoingVariant (  )  ;", "metaData . addArtifacts ( configuration . getName (  )  ,    outgoingVariant . getArtifacts (  )  )  ;", "for    ( OutgoingVariant   variant    :    outgoingVariant . getChildren (  )  )     {", "metaData . addVariant ( configuration . getName (  )  ,    variant )  ;", "}", "return   configurationMetadata ;", "}", "METHOD_END"], "methodName": ["addConfiguration"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.DefaultLocalComponentMetadataBuilder"}, {"methodBody": ["METHOD_START", "{", "if    ( descriptors . isEmpty (  )  )     {", "return   ImmutableCapabilities . EMPTY ;", "}", "ImmutableList .  < ImmutableCapability >    builder    =    new   ImmutableList .  < ImmutableCapability >  (  )  ;", "for    ( Capability   descriptor    :    descriptors )     {", "builder . add ( new   ImmutableCapability ( descriptor . getGroup (  )  ,    descriptor . getName (  )  ,    descriptor . getVersion (  )  )  )  ;", "}", "return   new   ImmutableCapabilities ( builder . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["asImmutable"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.DefaultLocalComponentMetadataBuilder"}, {"methodBody": ["METHOD_START", "{", "configuration . preventFromFurtherMutation (  )  ;", "Set < String >    hierarchy    =    Configurations . getNames ( configuration . getHierarchy (  )  )  ;", "Set < String >    extendsFrom    =    Configurations . getNames ( configuration . getExtendsFrom (  )  )  ;", "ImmutableCapabilities   capabilities    =     . asImmutable ( Configurations . collectCapabilities ( configuration ,    Sets .  < Capability > newHashSet (  )  ,    Sets .  < Configuration > newHashSet (  )  )  )  ;", "return   metaData . addConfiguration ( configuration . getName (  )  ,    configuration . getDescription (  )  ,    extendsFrom ,    hierarchy ,    configuration . isVisible (  )  ,    configuration . isTransitive (  )  ,    configuration . getAttributes (  )  . asImmutable (  )  ,    configuration . isCanBeConsumed (  )  ,    configuration . isCanBeResolved (  )  ,    capabilities )  ;", "}", "METHOD_END"], "methodName": ["createConfiguration"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.DefaultLocalComponentMetadataBuilder"}, {"methodBody": ["METHOD_START", "{", "BuildableLocalConfigurationMetadata   buildableLocalConfigurationMetadata    =    localComponentMetadataBuilder . addConfiguration ( metadata ,    configuration )  ;", "if    ( configuration . getResolutionStrategy (  )  . isDependencyLockingEnabled (  )  )     {", "buildableLocalConfigurationMetadata . enableLocking (  )  ;", "}", "}", "METHOD_END"], "methodName": ["addConfiguration"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.DefaultRootComponentMetadataBuilder"}, {"methodBody": ["METHOD_START", "{", "ModuleVersionIdentifier   moduleVersionIdentifier    =    moduleIdentifierFactory . moduleWithVersion ( module . getGroup (  )  ,    module . getName (  )  ,    module . getVersion (  )  )  ;", "ProjectInternal   project    =    projectFinder . findProject ( module . getProjectPath (  )  )  ;", "AttributesSchemaInternal   schema    =     ( project    =  =    null )     ?    null    :     (  ( AttributesSchemaInternal )     ( project . getDependencies (  )  . getAttributesSchema (  )  )  )  ;", "DependencyLockingProvider   dependencyLockingHandler    =     ( project    =  =    null )     ?    NoOpDependencyLockingProvider . getInstance (  )     :    project . getServices (  )  . get ( DependencyLockingProvider . class )  ;", "DefaultLocal   metadata    =    new   RootLocal ( moduleVersionIdentifier ,    componentIdentifier ,    module . getStatus (  )  ,    schema ,    dependencyLockingHandler )  ;", "for    ( ConfigurationInternal   configuration    :    configurationsProvider . getAll (  )  )     {", "addConfiguration ( metadata ,    configuration )  ;", "}", "return   metadata ;", "}", "METHOD_END"], "methodName": ["buildRootComponentMetadata"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.DefaultRootComponentMetadataBuilder"}, {"methodBody": ["METHOD_START", "{", "return   holder ;", "}", "METHOD_END"], "methodName": ["getValidator"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.DefaultRootComponentMetadataBuilder"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultRootComponentMetadataBuilder ( metadataProvider ,    componentIdentifierFactory ,    moduleIdentifierFactory ,    projectFinder ,    localComponentMetadataBuilder ,    alternateProvider )  ;", "}", "METHOD_END"], "methodName": ["withConfigurationsProvider"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.DefaultRootComponentMetadataBuilder"}, {"methodBody": ["METHOD_START", "{", "List < IvyArtifactName >    artifactDescriptors    =    WrapUtil . toList ( dependencyMetadata . getArtifacts (  )  )  ;", "assertThat ( artifactDescriptors . size (  )  ,    equalTo (  2  )  )  ;", "IvyArtifactName   artifactDescriptorWithoutClassifier    =    findDescriptor ( artifactDescriptors ,    artifact )  ;", "assertEquals ( null ,    artifactDescriptorWithoutClassifier . getClassifier (  )  )  ;", "compareArtifacts ( artifact ,    artifactDescriptorWithoutClassifier )  ;", "assertEquals ( artifact . getType (  )  ,    artifactDescriptorWithoutClassifier . getExtension (  )  )  ;", "IvyArtifactName   artifactDescriptorWithClassifierAndConfs    =    findDescriptor ( artifactDescriptors ,    artifactWithClassifiers )  ;", "assertEquals ( artifactWithClassifiers . getClassifier (  )  ,    artifactDescriptorWithClassifierAndConfs . getClassifier (  )  )  ;", "compareArtifacts ( artifactWithClassifiers ,    artifactDescriptorWithClassifierAndConfs )  ;", "assertEquals ( artifactWithClassifiers . getExtension (  )  ,    artifactDescriptorWithClassifierAndConfs . getExtension (  )  )  ;", "}", "METHOD_END"], "methodName": ["assertDependencyDescriptorHasArtifacts"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.dependencies.AbstractDependencyDescriptorFactoryInternalTest"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( AbstractDependencyDescriptorFactoryInternalTest . TEST _ IVY _ EXCLUDE _ RULE ,    dependencyMetadata . getExcludes (  )  . get (  0  )  )  ;", "assertThat ( dependencyMetadata . getModuleConfiguration (  )  ,    equalTo ( AbstractDependencyDescriptorFactoryInternalTest . TEST _ CONF )  )  ;", "assertThat ( dependencyMetadata . getDependencyConfiguration (  )  ,    equalTo ( AbstractDependencyDescriptorFactoryInternalTest . TEST _ DEP _ CONF )  )  ;", "assertThat ( dependencyMetadata . isTransitive (  )  ,    equalTo ( true )  )  ;", "assertDependencyDescriptorHasArtifacts ( dependencyMetadata )  ;", "}", "METHOD_END"], "methodName": ["assertDependencyDescriptorHasCommonFixtureValues"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.dependencies.AbstractDependencyDescriptorFactoryInternalTest"}, {"methodBody": ["METHOD_START", "{", "assertEquals ( artifact . getName (  )  ,    artifactDescriptor . getName (  )  )  ;", "assertEquals ( artifact . getType (  )  ,    artifactDescriptor . getType (  )  )  ;", "}", "METHOD_END"], "methodName": ["compareArtifacts"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.dependencies.AbstractDependencyDescriptorFactoryInternalTest"}, {"methodBody": ["METHOD_START", "{", "DefaultModuleDescriptor   moduleDescriptor    =    new   DefaultModuleDescriptor ( new   ModuleRevisionId ( new   ModuleId (  \" org \"  ,     \" name \"  )  ,     \" rev \"  )  ,     \" status \"  ,    null )  ;", "for    ( String   conf    :    confs )     {", "moduleDescriptor . addConfiguration ( new   Configuration ( conf )  )  ;", "}", "return   moduleDescriptor ;", "}", "METHOD_END"], "methodName": ["createModuleDescriptor"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.dependencies.AbstractDependencyDescriptorFactoryInternalTest"}, {"methodBody": ["METHOD_START", "{", "context . checking ( new   Expectations (  )     {", "{", "allowing ( excludeRuleCStub )  . convertExcludeRule ( excludeRule )  ;", "will ( returnValue ( exclude )  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["expectExcludeRuleConversion"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.dependencies.AbstractDependencyDescriptorFactoryInternalTest"}, {"methodBody": ["METHOD_START", "{", "for    ( IvyArtifactName   artifactDescriptor    :    artifactDescriptors )     {", "if    ( artifactDescriptor . getName (  )  . equals ( dependencyArtifact . getName (  )  )  )     {", "return   artifactDescriptor ;", "}", "}", "throw   new   RuntimeException (  \" Descriptor   could   not   be   found \"  )  ;", "}", "METHOD_END"], "methodName": ["findDescriptor"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.dependencies.AbstractDependencyDescriptorFactoryInternalTest"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultExclude ( DefaultModuleIdentifier . newId (  \" org \"  ,     \" testOrg \"  )  )  ;", "}", "METHOD_END"], "methodName": ["getTestExcludeRule"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.dependencies.AbstractDependencyDescriptorFactoryInternalTest"}, {"methodBody": ["METHOD_START", "{", "expectExcludeRuleConversion ( AbstractDependencyDescriptorFactoryInternalTest . TEST _ EXCLUDE _ RULE ,    AbstractDependencyDescriptorFactoryInternalTest . TEST _ IVY _ EXCLUDE _ RULE )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.dependencies.AbstractDependencyDescriptorFactoryInternalTest"}, {"methodBody": ["METHOD_START", "{", "return   dependency . addArtifact ( artifact )  . addArtifact ( artifactWithClassifiers )  . exclude ( WrapUtil . toMap (  \" group \"  ,    AbstractDependencyDescriptorFactoryInternalTest . TEST _ EXCLUDE _ RULE . getGroup (  )  )  )  . setTransitive ( true )  ;", "}", "METHOD_END"], "methodName": ["setUpDependency"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.dependencies.AbstractDependencyDescriptorFactoryInternalTest"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < IvyArtifactName >    names    =    ImmutableList . builder (  )  ;", "for    ( Artifact   dependencyArtifact    :    dependencyArtifacts )     {", "DefaultIvyArtifactName   name    =    new   DefaultIvyArtifactName ( dependencyArtifact . getName (  )  ,    dependencyArtifact . getType (  )  ,    getExtension ( dependencyArtifact )  ,    dependencyArtifact . getClassifier (  )  )  ;", "names . add ( name )  ;", "}", "return   names . build (  )  ;", "}", "METHOD_END"], "methodName": ["convertArtifacts"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.dependencies.AbstractIvyDependencyDescriptorFactory"}, {"methodBody": ["METHOD_START", "{", "return   CollectionUtils . collect (  (  ( Iterable < ExcludeRule >  )     ( excludeRules )  )  ,    new   Transformer < ExcludeMetadata ,    ExcludeRule >  (  )     {", "@ Override", "public   ExcludeMetadata   transform ( ExcludeRule   excludeRule )     {", "return   excludeRuleConverter . convertExcludeRule ( excludeRule )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["convertExcludeRules"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.dependencies.AbstractIvyDependencyDescriptorFactory"}, {"methodBody": ["METHOD_START", "{", "return    ( artifact . getExtension (  )  )     !  =    null    ?    artifact . getExtension (  )     :    artifact . getType (  )  ;", "}", "METHOD_END"], "methodName": ["getExtension"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.dependencies.AbstractIvyDependencyDescriptorFactory"}, {"methodBody": ["METHOD_START", "{", "ModuleComponentSelector   selector    =    DefaultModuleComponentSelector . newSelector ( nullToEmpty ( dependencyConstraint . getGroup (  )  )  ,    nullToEmpty ( dependencyConstraint . getName (  )  )  ,    dependencyConstraint . getVersionConstraint (  )  ,    dependencyConstraint . getAttributes (  )  )  ;", "return   new   LocalComponenMetadata ( componentId ,    selector ,    clientConfiguration ,    attributes ,    dependencyConstraint . getAttributes (  )  ,    null ,    Collections .  < IvyArtifactName > emptyList (  )  ,    Collections .  < ExcludeMetadata > emptyList (  )  ,    false ,    false ,    true ,    true ,    dependencyConstraint . getReason (  )  )  ;", "}", "METHOD_END"], "methodName": ["createDependencyConstraintDescriptor"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.dependencies.DefaultDependencyDescriptorFactory"}, {"methodBody": ["METHOD_START", "{", "IvyDependencyDescriptorFactory   factoryInternal    =    findFactoryForDependency ( dependency )  ;", "return   factoryInternal . createDependencyDescriptor ( componentId ,    clientConfiguration ,    attributes ,    dependency )  ;", "}", "METHOD_END"], "methodName": ["createDependencyDescriptor"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.dependencies.DefaultDependencyDescriptorFactory"}, {"methodBody": ["METHOD_START", "{", "for    ( IvyDependencyDescriptorFactory   ivyDependencyDescriptorFactory    :    dependencyDescriptorFactories )     {", "if    ( ivyDependencyDescriptorFactory . canConvert ( dependency )  )     {", "return   ivyDependencyDescriptorFactory ;", "}", "}", "throw   new   InvalidUserDataException (  (  \" Can ' t   map   dependency   of   type :     \"     +     ( dependency . getClass (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["findFactoryForDependency"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.dependencies.DefaultDependencyDescriptorFactory"}, {"methodBody": ["METHOD_START", "{", "return   input    =  =    null    ?     \"  \"     :    input ;", "}", "METHOD_END"], "methodName": ["nullToEmpty"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.dependencies.DefaultDependencyDescriptorFactory"}, {"methodBody": ["METHOD_START", "{", "return   createExcludeRule ( excludeRule . getGroup (  )  ,    excludeRule . getModule (  )  )  ;", "}", "METHOD_END"], "methodName": ["convertExcludeRule"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.dependencies.DefaultExcludeRuleConverter"}, {"methodBody": ["METHOD_START", "{", "AttributeContainerInternal   attributes    =    configuration . getAttributes (  )  ;", "for    ( Dependency   dependency    :    configuration . getDependencies (  )  )     {", "if    ( dependency   instanceof   ModuleDependency )     {", "ModuleDependency   moduleDependency    =     (  ( ModuleDependency )     ( dependency )  )  ;", "configurationMetadata . addDependency ( dependencyDescriptorFactory . createDependencyDescriptor ( configurationMetadata . getComponentId (  )  ,    configuration . getName (  )  ,    attributes ,    moduleDependency )  )  ;", "} else", "if    ( dependency   instanceof   FileCollectionDependency )     {", "final   FileCollectionDependency   fileDependency    =     (  ( FileCollectionDependency )     ( dependency )  )  ;", "configurationMetadata . addFiles ( new    . DefaultLocalFileDependencyMetadata ( fileDependency )  )  ;", "} else    {", "throw   new   IllegalArgumentException (  (  (  \" Cannot   convert   dependency    \"     +    dependency )     +     \"    to   local   component   dependency   metadata .  \"  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addDependencies"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.dependencies.DefaultLocalConfigurationMetadataBuilder"}, {"methodBody": ["METHOD_START", "{", "AttributeContainerInternal   attributes    =    configuration . getAttributes (  )  ;", "for    ( DependencyConstraint   dependencyConstraint    :    configuration . getDependencyConstraints (  )  )     {", "c . addDependency ( dependencyDescriptorFactory . createDependencyConstraintDescriptor ( c . getComponentId (  )  ,    configuration . getName (  )  ,    attributes ,    dependencyConstraint )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addDependencyConstraints"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.dependencies.DefaultLocalConfigurationMetadataBuilder"}, {"methodBody": ["METHOD_START", "{", "for    ( ExcludeRule   excludeRule    :    configuration . getExcludeRules (  )  )     {", "c . addExclude ( excludeRuleConverter . convertExcludeRule ( excludeRule )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addExcludeRules"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.dependencies.DefaultLocalConfigurationMetadataBuilder"}, {"methodBody": ["METHOD_START", "{", "assertThat ( externalModuleDependencyDescriptorFactory . canConvert ( context . mock ( ProjectDependency . class )  )  ,    Matchers . equalTo ( false )  )  ;", "assertThat ( externalModuleDependencyDescriptorFactory . canConvert ( context . mock ( ExternalModuleDependency . class )  )  ,    Matchers . equalTo ( true )  )  ;", "}", "METHOD_END"], "methodName": ["canConvert"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.dependencies.ExternalModuleDependencyDescriptorFactoryTest"}, {"methodBody": ["METHOD_START", "{", "ModuleDependency   dependency    =    new   DefaultExternalModuleDependency ( null ,     \" gradle - core \"  ,    null ,    AbstractDependencyDescriptorFactoryInternalTest . TEST _ DEP _ CONF )  ;", "LocalOriginDependencyMetadata   dependencyMetaData    =    e . createDependencyDescriptor ( componentId ,    AbstractDependencyDescriptorFactoryInternalTest . TEST _ CONF ,    null ,    dependency )  ;", "ModuleComponentSelector   selector    =     (  ( ModuleComponentSelector )     ( dependencyMetaData . getSelector (  )  )  )  ;", "assertThat ( selector . getGroup (  )  ,    equalTo (  \"  \"  )  )  ;", "assertThat ( selector . getModule (  )  ,    equalTo (  \" gradle - core \"  )  )  ;", "assertThat ( selector . getVersion (  )  ,    equalTo (  \"  \"  )  )  ;", "assertThat ( selector . getVersionConstraint (  )  . getPreferredVersion (  )  ,    equalTo (  \"  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testAddWithNullGroupAndNullVersionShouldHaveEmptyStringModuleRevisionValues"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.dependencies.ExternalModuleDependencyDescriptorFactoryTest"}, {"methodBody": ["METHOD_START", "{", "DefaultExternalModuleDependency   moduleDependency    =    new   DefaultExternalModuleDependency (  \" gradle \"  ,     \" gradle - core \"  ,     \"  1  .  0  \"  ,    AbstractDependencyDescriptorFactoryInternalTest . TEST _ DEP _ CONF )  ;", "setUpDependency ( moduleDependency )  ;", "LocalOriginDependencyMetadata   dependencyMetaData    =    e . createDependencyDescriptor ( componentId ,    AbstractDependencyDescriptorFactoryInternalTest . TEST _ CONF ,    null ,    moduleDependency )  ;", "ModuleComponentSelector   selector    =     (  ( ModuleComponentSelector )     ( dependencyMetaData . getSelector (  )  )  )  ;", "assertEquals ( moduleDependency . isChanging (  )  ,    dependencyMetaData . isChanging (  )  )  ;", "assertEquals ( moduleDependency . isForce (  )  ,    dependencyMetaData . isForce (  )  )  ;", "assertEquals ( moduleDependency . getGroup (  )  ,    moduleDependency . getGroup (  )  )  ;", "assertEquals ( moduleDependency . getName (  )  ,    moduleDependency . getName (  )  )  ;", "assertEquals ( moduleDependency . getVersion (  )  ,    moduleDependency . getVersion (  )  )  ;", "assertEquals ( moduleDependency . getGroup (  )  ,    selector . getGroup (  )  )  ;", "assertEquals ( moduleDependency . getName (  )  ,    selector . getModule (  )  )  ;", "assertEquals ( moduleDependency . getVersion (  )  ,    selector . getVersion (  )  )  ;", "assertEquals (  (  ( VersionConstraintInternal )     ( moduleDependency . getVersionConstraint (  )  )  )  . asImmutable (  )  ,    selector . getVersionConstraint (  )  )  ;", "assertDependencyDescriptorHasCommonFixtureValues ( dependencyMetaData )  ;", "}", "METHOD_END"], "methodName": ["testCreateFromModuleDependency"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.dependencies.ExternalModuleDependencyDescriptorFactoryTest"}, {"methodBody": ["METHOD_START", "{", "return   dependency   instanceof   ExternalModuleDependency ;", "}", "METHOD_END"], "methodName": ["canConvert"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.dependencies.ExternalModuleIvyDependencyDescriptorFactory"}, {"methodBody": ["METHOD_START", "{", "ExternalModuleDependency   externalModuleDependency    =     (  ( ExternalModuleDependency )     ( dependency )  )  ;", "boolean   force    =    externalModuleDependency . isForce (  )  ;", "boolean   changing    =    externalModuleDependency . isChanging (  )  ;", "boolean   transitive    =    externalModuleDependency . isTransitive (  )  ;", "ModuleComponentSelector   selector    =    DefaultModuleComponentSelector . newSelector ( nullToEmpty ( dependency . getGroup (  )  )  ,    nullToEmpty ( dependency . getName (  )  )  ,     (  ( VersionConstraintInternal )     ( externalModuleDependency . getVersionConstraint (  )  )  )  . asImmutable (  )  ,    dependency . getAttributes (  )  )  ;", "List < ExcludeMetadata >    excludes    =    convertExcludeRules ( clientConfiguration ,    dependency . getExcludeRules (  )  )  ;", "LocalComponentDependencyMetadata   dependencyMetaData    =    new   LocalComponentDependencyMetadata ( componentId ,    selector ,    clientConfiguration ,    clientAttributes ,    dependency . getAttributes (  )  ,    dependency . getTargetConfiguration (  )  ,    convertArtifacts ( dependency . getArtifacts (  )  )  ,    excludes ,    force ,    changing ,    transitive ,    false ,    dependency . getReason (  )  )  ;", "return   new   DslOriginDependencyMetadataWrapper ( dependencyMetaData ,    dependency )  ;", "}", "METHOD_END"], "methodName": ["createDependencyDescriptor"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.dependencies.ExternalModuleIvyDependencyDescriptorFactory"}, {"methodBody": ["METHOD_START", "{", "return   input    =  =    null    ?     \"  \"     :    input ;", "}", "METHOD_END"], "methodName": ["nullToEmpty"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.dependencies.ExternalModuleIvyDependencyDescriptorFactory"}, {"methodBody": ["METHOD_START", "{", "return   dependency   instanceof   ProjectDependency ;", "}", "METHOD_END"], "methodName": ["canConvert"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.dependencies.ProjectIvyDependencyDescriptorFactory"}, {"methodBody": ["METHOD_START", "{", "ProjectDependencyInternal   projectDependency    =     (  ( ProjectDependencyInternal )     ( dependency )  )  ;", "projectDependency . beforeResolved (  )  ;", "ComponentSelector   selector    =    DefaultProjectComponentSelector . newSelector ( projectDependency . getDependencyProject (  )  )  ;", "List < ExcludeMetadata >    excludes    =    convertExcludeRules ( clientConfiguration ,    dependency . getExcludeRules (  )  )  ;", "LocalComponentDependencyMetadata   dependencyMetaData    =    new   LocalComponentDependencyMetadata ( componentId ,    selector ,    clientConfiguration ,    clientAttributes ,    dependency . getAttributes (  )  ,    projectDependency . getTargetConfiguration (  )  ,    convertArtifacts ( dependency . getArtifacts (  )  )  ,    excludes ,    false ,    false ,    dependency . isTransitive (  )  ,    false ,    dependency . getReason (  )  )  ;", "return   new   DslOriginDependencyMetadataWrapper ( dependencyMetaData ,    dependency )  ;", "}", "METHOD_END"], "methodName": ["createDependencyDescriptor"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.moduleconverter.dependencies.ProjectIvyDependencyDescriptorFactory"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isLocalProject ( projectIdentifier )  )  )     {", "return   null ;", "}", "ProjectInternal   project    =    projectRegistry . getProject ( projectIdentifier . getProjectPath (  )  )  ;", "if    ( project    =  =    null )     {", "return   null ;", "}", "return   geMetaData ( project )  ;", "}", "METHOD_END"], "methodName": ["getComponent"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.projectmodule.DefaultProjectLocalComponentProvider"}, {"methodBody": ["METHOD_START", "{", "Module   module    =    project . getModule (  )  ;", "ModuleVersionIdentifier   moduleVersionIdentifier    =    moduleIdentifierFactory . moduleWithVersion ( module . getGroup (  )  ,    module . getName (  )  ,    module . getVersion (  )  )  ;", "ComponentIdentifier   componentIdentifier    =    DefaultProjectComponentIdentifier . newProjectId ( project )  ;", "DefaulMetadata   metaData    =    new   DefaulMetadata ( moduleVersionIdentifier ,    componentIdentifier ,    module . getStatus (  )  ,     (  ( AttributesSchemaInternal )     ( project . getDependencies (  )  . getAttributesSchema (  )  )  )  )  ;", "for    ( ConfigurationInternal   configuration    :    project . getConfigurations (  )  . withType ( ConfigurationInternal . class )  )     {", "metadataBuilder . addConfiguration ( metaData ,    configuration )  ;", "}", "return   metaData ;", "}", "METHOD_END"], "methodName": ["getLocalComponentMetaData"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.projectmodule.DefaultProjectLocalComponentProvider"}, {"methodBody": ["METHOD_START", "{", "return   projectIdentifier . getBuild (  )  . equals ( thisBuild )  ;", "}", "METHOD_END"], "methodName": ["isLocalProject"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.projectmodule.DefaultProjectLocalComponentProvider"}, {"methodBody": ["METHOD_START", "{", "return   publicationsByProject . get ( projectPath )  ;", "}", "METHOD_END"], "methodName": ["getPublications"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.projectmodule.DefaultProjectPublicationRegistry"}, {"methodBody": ["METHOD_START", "{", "publicationsByProject . put ( projectPath ,    publication )  ;", "}", "METHOD_END"], "methodName": ["registerPublication"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.projectmodule.DefaultProjectPublicationRegistry"}, {"methodBody": ["METHOD_START", "{", "return   componentId   instanceof   ProjectComponentIdentifier ;", "}", "METHOD_END"], "methodName": ["isProjectModule"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.projectmodule.ProjectDependencyResolver"}, {"methodBody": ["METHOD_START", "{", "eachModule ( new   Action < ModuleResolutionControl >  (  )     {", "public   void   execute ( ModuleResolutionControl   moduleResolutionControl )     {", "if    ( moduleResolutionControl . isChanging (  )  )     {", "moduleResolutionControl . cacheFor ( value ,    units )  ;", "}", "}", "}  )  ;", "eachArtifact ( new   Action < ArtifactResolutionControl >  (  )     {", "public   void   execute ( ArtifactResolutionControl   artifactResolutionControl )     {", "if    ( artifactResolutionControl . belongsToChangingModule (  )  )     {", "artifactResolutionControl . cacheFor ( value ,    units )  ;", "}", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["cacheChangingModulesFor"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultCachePolicy"}, {"methodBody": ["METHOD_START", "{", "eachDependency ( new   Action < DependencyResolutionControl >  (  )     {", "public   void   execute ( DependencyResolutionControl   dependencyResolutionControl )     {", "if    (  !  ( dependencyResolutionControl . getCachedResult (  )  . isEmpty (  )  )  )     {", "dependencyResolutionControl . cacheFor ( value ,    unit )  ;", "}", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["cacheDynamicVersionsFor"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultCachePolicy"}, {"methodBody": ["METHOD_START", "{", "eachArtifact ( new   Action < ArtifactResolutionControl >  (  )     {", "public   void   execute ( ArtifactResolutionControl   artifactResolutionControl )     {", "if    (  ( artifactResolutionControl . getCachedResult (  )  )     =  =    null )     {", "artifactResolutionControl . cacheFor ( value ,    units )  ;", "}", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["cacheMissingArtifactsFor"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultCachePolicy"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultCachePolicy ( this )  ;", "}", "METHOD_END"], "methodName": ["copy"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultCachePolicy"}, {"methodBody": ["METHOD_START", "{", "mutationValidator . validateMutation ( MutationValidator . MutationType . STRATEGY )  ;", "CacheRules . add (  0  ,    rule )  ;", "}", "METHOD_END"], "methodName": ["eachArtifact"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultCachePolicy"}, {"methodBody": ["METHOD_START", "{", "mutationValidator . validateMutation ( MutationValidator . MutationType . STRATEGY )  ;", "dependencyRules . add (  0  ,    rule )  ;", "}", "METHOD_END"], "methodName": ["eachDependency"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultCachePolicy"}, {"methodBody": ["METHOD_START", "{", "mutationValidator . validateMutation ( MutationValidator . MutationType . STRATEGY )  ;", "moduleRules . add (  0  ,    rule )  ;", "}", "METHOD_END"], "methodName": ["eachModule"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultCachePolicy"}, {"methodBody": ["METHOD_START", "{", "DefaultCachePolicy . CachedArtifactResolutionControl   artifactResolutionControl    =    new   DefaultCachePolicy . CachedArtifactResolutionControl ( artifactIdentifier ,    cachedArtifactFile ,    ageMillis ,    belongsToChangingModule )  ;", "if    ( belongsToChangingModule    &  &     (  ! moduleDescriptorInSync )  )     {", "return   true ;", "}", "for    ( Action <  ?    super   ArtifactResolutionControl >    rule    :    artifactCacheRules )     {", "rule . execute ( artifactResolutionControl )  ;", "if    ( artifactResolutionControl . ruleMatch (  )  )     {", "return   artifactResolutionControl . mustCheck (  )  ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["mustRefreshArtifact"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultCachePolicy"}, {"methodBody": ["METHOD_START", "{", "return   mustRefreshModule ( component ,    resolvedModuleVersion ,    ageMillis ,    true )  ;", "}", "METHOD_END"], "methodName": ["mustRefreshChangingModule"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultCachePolicy"}, {"methodBody": ["METHOD_START", "{", "return   mustRefreshModule ( component ,    null ,    ageMillis ,    false )  ;", "}", "METHOD_END"], "methodName": ["mustRefreshMissingModule"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultCachePolicy"}, {"methodBody": ["METHOD_START", "{", "DefaultCachePolicy . CachedModuleResolutionControl   moduleResolutionControl    =    new   DefaultCachePolicy . CachedModuleResolutionControl ( moduleVersionId ,    version ,    changingModule ,    ageMillis )  ;", "for    ( Action <  ?    super   ModuleResolutionControl >    rule    :    moduleCacheRules )     {", "rule . execute ( moduleResolutionControl )  ;", "if    ( moduleResolutionControl . ruleMatch (  )  )     {", "return   moduleResolutionControl . mustCheck (  )  ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["mustRefreshModule"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultCachePolicy"}, {"methodBody": ["METHOD_START", "{", "return   mustRefreshModule ( component ,    resolvedModuleVersion ,    ageMillis ,    false )  ;", "}", "METHOD_END"], "methodName": ["mustRefreshModule"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultCachePolicy"}, {"methodBody": ["METHOD_START", "{", "return   mustRefreshModule ( moduleIdentifierFactory . moduleWithVersion ( component . getGroup (  )  ,    component . getModule (  )  ,    component . getVersion (  )  )  ,    version ,    ageMillis ,    changingModule )  ;", "}", "METHOD_END"], "methodName": ["mustRefreshModule"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultCachePolicy"}, {"methodBody": ["METHOD_START", "{", "if    ( belongsToChangingModule    &  &     (  ! moduleDescriptorInSync )  )     {", "return   true ;", "}", "return   mustRefreshModule ( moduleVersionId ,    new   ResolvedModuleVersion ( moduleVersionId )  ,    ageMillis ,    belongsToChangingModule )  ;", "}", "METHOD_END"], "methodName": ["mustRefreshModuleArtifacts"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultCachePolicy"}, {"methodBody": ["METHOD_START", "{", "DefaultCachePolicy . CachedDependencyResolutionControl   dependencyResolutionControl    =    new   DefaultCachePolicy . CachedDependencyResolutionControl ( moduleIdentifier ,    matchingVersions ,    ageMillis )  ;", "for    ( Action <  ?    super   DependencyResolutionControl >    rule    :    dependencyCacheRules )     {", "rule . execute ( dependencyResolutionControl )  ;", "if    ( dependencyResolutionControl . ruleMatch (  )  )     {", "return   dependencyResolutionControl . mustCheck (  )  ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["mustRefreshVersionList"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultCachePolicy"}, {"methodBody": ["METHOD_START", "{", "this . mutationValidator    =    validator ;", "}", "METHOD_END"], "methodName": ["setMutationValidator"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultCachePolicy"}, {"methodBody": ["METHOD_START", "{", "mutationValidator . validateMutation ( MutationValidator . MutationType . STRATEGY )  ;", "if    (  ( rules )     =  =    null )     {", "rules    =    new   HashSet < SpecRuleAction <  ?    super    >  >  (  )  ;", "}", "rules . add ( specRuleAction )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addRule"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultComponentSelectionRules"}, {"methodBody": ["METHOD_START", "{", "return   addRule ( createAllSpecRulesAction ( ruleActionAdapter . createFromClosure ( ComponentSelection . class ,    closure )  )  )  ;", "}", "METHOD_END"], "methodName": ["all"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultComponentSelectionRules"}, {"methodBody": ["METHOD_START", "{", "return   addRule ( createAllSpecRulesAction ( ruleActionAdapter . createFromRuleSource ( ComponentSelection . class ,    ruleSource )  )  )  ;", "}", "METHOD_END"], "methodName": ["all"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultComponentSelectionRules"}, {"methodBody": ["METHOD_START", "{", "return   addRule ( createAllSpecRulesAction ( ruleActionAdapter . createFromAction ( selectionAction )  )  )  ;", "}", "METHOD_END"], "methodName": ["all"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultComponentSelectionRules"}, {"methodBody": ["METHOD_START", "{", "RuleActionValidator < ComponentSelection >    ruleActionValidator    =    new   DefaultRuleActionValidator < ComponentSelection >  ( Lists . newArrayList ( ComponentMetadata . class ,    IvyModuleDescriptor . class )  )  ;", "return   new   DefaultRuleActionAdapter < ComponentSelection >  ( ruleActionValidator ,     \"  \"  )  ;", "}", "METHOD_END"], "methodName": ["createAdapter"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultComponentSelectionRules"}, {"methodBody": ["METHOD_START", "{", "return   new   SpecRuleAction < ComponentSelection >  ( ruleAction ,    Specs .  < ComponentSelection > satisfyAll (  )  )  ;", "}", "METHOD_END"], "methodName": ["createAllSpecRulesAction"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultComponentSelectionRules"}, {"methodBody": ["METHOD_START", "{", "final   ModuleIdentifier   moduleIdentifier ;", "try    {", "moduleIdentifier    =    moduleIdentifierNotationParser . parseNotation ( id )  ;", "}    catch    ( UnsupportedNotationException   e )     {", "throw   new   InvalidUserCodeException ( String . format (  . INVALID _ SPEC _ ERROR ,     ( id    =  =    null    ?     \" null \"     :    id . toString (  )  )  )  ,    e )  ;", "}", "Spec < ComponentSelection >    spec    =    new    . ComponentSelectionMatchingSpec ( moduleIdentifier )  ;", "return   new   SpecRuleAction < ComponentSelection >  ( ruleAction ,    spec )  ;", "}", "METHOD_END"], "methodName": ["createSpecRuleActionFromId"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultComponentSelectionRules"}, {"methodBody": ["METHOD_START", "{", "return    ( rules )     !  =    null    ?    rules    :    Collections .  < SpecRuleAction <  ?    super   ComponentSelection >  > emptySet (  )  ;", "}", "METHOD_END"], "methodName": ["getRules"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultComponentSelectionRules"}, {"methodBody": ["METHOD_START", "{", "this . mutationValidator    =    mutationValidator ;", "}", "METHOD_END"], "methodName": ["setMutationValidator"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultComponentSelectionRules"}, {"methodBody": ["METHOD_START", "{", "return   addRule ( createSpecRuleActionFromId ( id ,    ruleActionAdapter . createFromClosure ( ComponentSelection . class ,    closure )  )  )  ;", "}", "METHOD_END"], "methodName": ["withModule"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultComponentSelectionRules"}, {"methodBody": ["METHOD_START", "{", "return   addRule ( createSpecRuleActionFromId ( id ,    ruleActionAdapter . createFromRuleSource ( ComponentSelection . class ,    ruleSource )  )  )  ;", "}", "METHOD_END"], "methodName": ["withModule"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultComponentSelectionRules"}, {"methodBody": ["METHOD_START", "{", "return   addRule ( createSpecRuleActionFromId ( id ,    ruleActionAdapter . createFromAction ( selectionAction )  )  )  ;", "}", "METHOD_END"], "methodName": ["withModule"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultComponentSelectionRules"}, {"methodBody": ["METHOD_START", "{", "return   ageMillis    !  =     0     ?    true    :    false ;", "}", "METHOD_END"], "methodName": ["mustRefreshExternalResource"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultExternalResourceCachePolicy"}, {"methodBody": ["METHOD_START", "{", "assumeFluidDependencies    =    true ;", "}", "METHOD_END"], "methodName": ["assumeFluidDependencies"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultResolutionStrategy"}, {"methodBody": ["METHOD_START", "{", "NormalizedTimeUnit   timeUnit    =    new   TimeUnitsParser (  )  . parseNotation ( units ,    value )  ;", "cacheChangingModulesFor ( timeUnit . getValue (  )  ,    timeUnit . getTimeUnit (  )  )  ;", "}", "METHOD_END"], "methodName": ["cacheChangingModulesFor"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultResolutionStrategy"}, {"methodBody": ["METHOD_START", "{", "this . cachePolicy . cacheChangingModulesFor ( value ,    units )  ;", "}", "METHOD_END"], "methodName": ["cacheChangingModulesFor"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultResolutionStrategy"}, {"methodBody": ["METHOD_START", "{", "NormalizedTimeUnit   timeUnit    =    new   TimeUnitsParser (  )  . parseNotation ( units ,    value )  ;", "cacheDynamicVersionsFor ( timeUnit . getValue (  )  ,    timeUnit . getTimeUnit (  )  )  ;", "}", "METHOD_END"], "methodName": ["cacheDynamicVersionsFor"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultResolutionStrategy"}, {"methodBody": ["METHOD_START", "{", "this . cachePolicy . cacheDynamicVersionsFor ( value ,    units )  ;", "}", "METHOD_END"], "methodName": ["cacheDynamicVersionsFor"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultResolutionStrategy"}, {"methodBody": ["METHOD_START", "{", "action . execute ( componentSelectionRules )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["componentSelection"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultResolutionStrategy"}, {"methodBody": ["METHOD_START", "{", "DefaultResolutionStrategy   out    =    new   DefaultResolutionStrategy ( cachePolicy . copy (  )  ,    dependencySubstitutions . copy (  )  ,    globalDependencySubstitutionRules ,    vcsResolver ,    moduleIdentifierFactory ,    componentSelectorConverter ,    dependencyLockingProvider )  ;", "if    (  ( conflictResolution )     =  =     ( ConflictResolution . strict )  )     {", "out . failOnVersionConflict (  )  ;", "} else", "if    (  ( conflictResolution )     =  =     ( ConflictResolution . preferProjectModules )  )     {", "out . preferProjectModules (  )  ;", "}", "out . setForcedModules ( getForcedModules (  )  )  ;", "for    ( SpecRuleAction <  ?    super   ComponentSelection >    ruleAction    :    componentSelectionRules . getRules (  )  )     {", "out . getComponentSelection (  )  . addRule ( ruleAction )  ;", "}", "return   out ;", "}", "METHOD_END"], "methodName": ["copy"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultResolutionStrategy"}, {"methodBody": ["METHOD_START", "{", "action . execute ( dependencySubstitutions )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["dependencySubstitution"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultResolutionStrategy"}, {"methodBody": ["METHOD_START", "{", "mutationValidator . validateMutation ( MutationValidator . MutationType . STRATEGY )  ;", "dependencySubstit . allWithDependencyResolveDetails ( rule ,    componentSelectorConverter )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["eachDependency"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultResolutionStrategy"}, {"methodBody": ["METHOD_START", "{", "mutationValidator . validateMutation ( MutationValidator . MutationType . STRATEGY )  ;", "this . conflic    =    Conflic . strict ;", "return   this ;", "}", "METHOD_END"], "methodName": ["failOnVersionConflict"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultResolutionStrategy"}, {"methodBody": ["METHOD_START", "{", "mutationValidator . validateMutation ( MutationValidator . MutationType . STRATEGY )  ;", "Set < ModuleVersionSelector >    modules    =    ModuleVersionSelectorParsers . multiParser (  )  . parseNotation ( moduleVersionSelectorNota )  ;", "this . forcedModules . addAll ( modules )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["force"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultResolutionStrategy"}, {"methodBody": ["METHOD_START", "{", "return   cachePolicy ;", "}", "METHOD_END"], "methodName": ["getCachePolicy"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultResolutionStrategy"}, {"methodBody": ["METHOD_START", "{", "return   componentSelectionRules ;", "}", "METHOD_END"], "methodName": ["getComponentSelection"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultResolutionStrategy"}, {"methodBody": ["METHOD_START", "{", "return   this . conflictResolution ;", "}", "METHOD_END"], "methodName": ["getConflictResolution"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultResolutionStrategy"}, {"methodBody": ["METHOD_START", "{", "return   dependencySubstitutions ;", "}", "METHOD_END"], "methodName": ["getDependencySubstitution"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultResolutionStrategy"}, {"methodBody": ["METHOD_START", "{", "Collection < Action < DependencySubstitution >  >    allRules    =    GUtil . flattenElements ( new   ModuleForcingResolveRule ( forcedModules ,    moduleIdentifierFactory )  ,    dependencySubstitutions . getRuleAction (  )  ,    globalDependencySubstitutionRules . getRuleAction (  )  )  ;", "return   Actions . composite ( allRules )  ;", "}", "METHOD_END"], "methodName": ["getDependencySubstitutionRule"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultResolutionStrategy"}, {"methodBody": ["METHOD_START", "{", "return   Collections . unmodifiableSet ( forcedModules )  ;", "}", "METHOD_END"], "methodName": ["getForcedModules"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultResolutionStrategy"}, {"methodBody": ["METHOD_START", "{", "conflictResolution    =    ConflictResolution . preferProjectModules ;", "}", "METHOD_END"], "methodName": ["preferProjectModules"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultResolutionStrategy"}, {"methodBody": ["METHOD_START", "{", "return    (  (  ( assumeFluidDependencies )     |  |     ( dependencySubstitutions . hasRules (  )  )  )     |  |     ( globalDependencySubstitutionRules . hasRules (  )  )  )     |  |     ( vcsResolver . hasRules (  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveGraphToDetermineTaskDependencies"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultResolutionStrategy"}, {"methodBody": ["METHOD_START", "{", "mutationValidator . validateMutation ( MutationValidator . MutationType . STRATEGY )  ;", "Set < ModuleVersionSelector >    modules    =    ModuleVersionSelectorParsers . multiParser (  )  . parseNotation ( moduleVersionSelectorNota )  ;", "this . forcedModules . clear (  )  ;", "this . forcedModules . addAll ( modules )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setForcedModules"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolutionstrategy.DefaultResolutionStrategy"}, {"methodBody": ["METHOD_START", "{", "return   artifactResolverChain ;", "}", "METHOD_END"], "methodName": ["getArtifactResolver"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.ComponentResolversChain"}, {"methodBody": ["METHOD_START", "{", "return   artifactSelector ;", "}", "METHOD_END"], "methodName": ["getArtifactSelector"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.ComponentResolversChain"}, {"methodBody": ["METHOD_START", "{", "return   dependencyToComponentIdResolver ;", "}", "METHOD_END"], "methodName": ["getComponentIdResolver"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.ComponentResolversChain"}, {"methodBody": ["METHOD_START", "{", "return   componentMetaDataResolver ;", "}", "METHOD_END"], "methodName": ["getComponentResolver"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.ComponentResolversChain"}, {"methodBody": ["METHOD_START", "{", "DefaultCapabilitiesConflictHandler   handler    =    new   DefaultCapabilitiesConflictHandler (  )  ;", "if    (  ( resolutionStrategy . getConflictResolution (  )  )     !  =     ( ConflictResolution . strict )  )     {", "handler . registerResolver ( new   UpgradeCapabilit (  )  )  ;", "handler . registerResolver ( new   LastCandidateCapabilit (  )  )  ;", "}", "return   handler ;", "}", "METHOD_END"], "methodName": ["createCapabilitiesConflictHandler"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.DefaultArtifactDependencyResolver"}, {"methodBody": ["METHOD_START", "{", "DependencyToComponentIdResolver   componentIdResolver    =    componentSource . getComponentIdResolver (  )  ;", "ComponentMetaDataResolver   componentMetaDataResolver    =    new   ClientModuleResolver ( componentSource . getComponentResolver (  )  ,    dependencyDescriptorFactory )  ;", "ResolveContextToComponentResolver   requestResolver    =    createResolveContextConverter (  )  ;", "ModuleConflictHandler   conflictHandler    =    createModuleConflictHandler ( resolutionStrategy ,    globalRules )  ;", "DefaultCapabilitiesConflictHandler   capabilitiesConflictHandler    =    createCapabilitiesConflictHandler ( resolutionStrategy )  ;", "DependencySubstitutionApplicator   applicator    =    new   CachingDependencySubstitutionApplicator ( new   DefaulSubstitutionApplicator ( resolutionStrategy . geSubstitutionRule (  )  )  )  ;", "return   new   DependencyGraphBuilder ( componentIdResolver ,    componentMetaDataResolver ,    requestResolver ,    conflictHandler ,    capabilitiesConflictHandler ,    edgeFilter ,    attributesSchema ,    moduleExclusions ,    buildOperationExecutor ,    globalRules . getModuleMetadataProcessor (  )  . getModuleReplacements (  )  ,    applicator ,    componentSelectorConverter ,    attributesFactory )  ;", "}", "METHOD_END"], "methodName": ["createDependencyGraphBuilder"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.DefaultArtifactDependencyResolver"}, {"methodBody": ["METHOD_START", "{", "ModuleConflictResolver   conflictResolver    =    null ;", "ConflictResolution   conflictResolution    =    resolutionStrategy . getConflictResolution (  )  ;", "switch    ( conflictResolution )     {", "case   strict    :", "conflictResolver    =    new   StrictConflictResolver (  )  ;", "break ;", "case   latest    :", "conflictResolver    =    new   LatestModuleConflictResolver ( versionComparator )  ;", "break ;", "case   preferProjectModules    :", "conflictResolver    =    new   ProjeForcingResolver ( new   LatestModuleConflictResolver ( versionComparator )  )  ;", "break ;", "}", "conflictResolver    =    new   VersionSelectionReasonResolver ( conflictResolver )  ;", "return   new   DefaultConflictHandler ( conflictResolver ,    metadataHandler . getModuleMetadataProcessor (  )  . getModuleReplacements (  )  )  ;", "}", "METHOD_END"], "methodName": ["createModuleConflictHandler"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.DefaultArtifactDependencyResolver"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultArtifactDependencyResolver . DefaultResolveContextToComponentResolver (  )  ;", "}", "METHOD_END"], "methodName": ["createResolveContextConverter"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.DefaultArtifactDependencyResolver"}, {"methodBody": ["METHOD_START", "{", "List < ComponentResolvers >    resolvers    =    Lists . newArrayList (  )  ;", "for    ( ResolverProviderFactory   factory    :    resolverFactories )     {", "if    ( factory . canCreate ( resolveContext )  )     {", "resolvers . add ( factory . create ( resolveContext )  )  ;", "}", "}", "ResolutionStrategyInternal   resolutionStrategy    =    resolveContext . getResolutionStrategy (  )  ;", "resolvers . add ( ivyFactory . create ( resolutionStrategy ,    repositories ,    metadataHandler . getComponentMetadataProcessor (  )  )  )  ;", "return   new   ComponentResolversChain ( resolvers ,    artifactTypeRegistry )  ;", "}", "METHOD_END"], "methodName": ["createResolvers"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.DefaultArtifactDependencyResolver"}, {"methodBody": ["METHOD_START", "{", "if    ( artifacts . isEmpty (  )  )     {", "return   new    ( displayName ,    attributes ,    ResolvedArtifactSet . EMPTY )  ;", "}", "if    (  ( artifacts . size (  )  )     =  =     1  )     {", "return   new    ( displayName ,    attributes ,    new    . SingleArtifactSet ( displayName ,    attributes ,    artifacts . iterator (  )  . next (  )  )  )  ;", "}", "List <  . SingleArtifactSet >    artifactSets    =    new   ArrayList <  . SingleArtifactSet >  (  )  ;", "for    ( ResolvableArtifact   artifact    :    artifacts )     {", "artifactSets . add ( new    . SingleArtifactSet ( displayName ,    attributes ,    artifact )  )  ;", "}", "return   new    ( displayName ,    attributes ,    CompositeResolvedArtifactSet . of ( artifactSets )  )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.artifact.ArtifactBackedResolvedVariant"}, {"methodBody": ["METHOD_START", "{", "List < ResolvedArtifactSet >    filtered    =    new   ArrayList < ResolvedArtifactSet >  ( sets . size (  )  )  ;", "for    ( ResolvedArtifactSet   set    :    sets )     {", "if    ( set    !  =     ( ResolvedArtifactSet . EMPTY )  )     {", "filtered . add ( set )  ;", "}", "}", "if    ( filtered . isEmpty (  )  )     {", "return   ResolvedArtifactSet . EMPTY ;", "}", "if    (  ( filtered . size (  )  )     =  =     1  )     {", "return   filtered . get (  0  )  ;", "}", "return   new    ( filtered )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.artifact.CompositeResolvedArtifactSet"}, {"methodBody": ["METHOD_START", "{", "if    (  ( variants . size (  )  )     =  =     1  )     {", "VariantResolveMetadata   variantMetadata    =    variants . iterator (  )  . next (  )  ;", "ResolvedVariant   resolvedVariant    =     . toResolvedVariant ( variantMetadata ,    ownerId ,    moduleSource ,    exclusions ,    artifactResolver ,    allResolvedArtifacts ,    artifactTypeRegistry )  ;", "return   new    . SingleVariantArtifactSet ( componentIdentifier ,    schema ,    resolvedVariant ,    selectionAttributes )  ;", "}", "ImmutableSet . Builder < ResolvedVariant >    result    =    ImmutableSet . builder (  )  ;", "for    ( VariantResolveMetadata   variant    :    variants )     {", "ResolvedVariant   resolvedVariant    =     . toResolvedVariant ( variant ,    ownerId ,    moduleSource ,    exclusions ,    artifactResolver ,    allResolvedArtifacts ,    artifactTypeRegistry )  ;", "result . add ( resolvedVariant )  ;", "}", "return   new    . MultipleVariantArtifactSet ( componentIdentifier ,    schema ,    result . build (  )  ,    selectionAttributes )  ;", "}", "METHOD_END"], "methodName": ["multipleVariants"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.artifact.DefaultArtifactSet"}, {"methodBody": ["METHOD_START", "{", "VariantResolveMetadata   variantMetadata    =    new   DefaultVariantMetadata ( displayName ,    ImmutableAttributes . EMPTY ,    ImmutableList . copyOf ( artifacts )  ,    ImmutableCapabilities . EMPTY )  ;", "ResolvedVariant   resolvedVariant    =     . toResolvedVariant ( variantMetadata ,    ownerId ,    moduleSource ,    exclusions ,    artifactResolver ,    allResolvedArtifacts ,    artifactTypeRegistry )  ;", "return   new    . SingleVariantArtifactSet ( componentIdentifier ,    schema ,    resolvedVariant ,    selectionAttributes )  ;", "}", "METHOD_END"], "methodName": ["singleVariant"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.artifact.DefaultArtifactSet"}, {"methodBody": ["METHOD_START", "{", "List <  ?    extends   ComponentArtifactMetadata >    artifacts    =    variant . getArtifacts (  )  ;", "ImmutableSet . Builder < ResolvableArtifact >    resolvedArtifacts    =    ImmutableSet . builder (  )  ;", "ImmutableAttributes   attributes    =    artifactTypeRegistry . mapAttributesFor ( variant )  ;", "for    ( ComponentArtifactMetadata   artifact    :    artifacts )     {", "IvyArtifactName   artifactName    =    artifact . getName (  )  ;", "if    ( exclusions . excludeArtifact ( ownerId . getModule (  )  ,    artifactName )  )     {", "continue ;", "}", "ResolvableArtifact   resolvedArtifact    =    allResolvedArtifacts . get ( artifact . getId (  )  )  ;", "if    ( resolvedArtifact    =  =    null )     {", "Factory < File >    artifactSource    =    new    . LazyArtifactSource ( artifact ,    moduleSource ,    artifactResolver )  ;", "resolvedArtifact    =    new   DefaultResolvedArtifact ( ownerId ,    artifactName ,    artifact . getId (  )  ,    artifact . getBuildDependencies (  )  ,    artifactSource )  ;", "allResolvedArtifacts . put ( artifact . getId (  )  ,    resolvedArtifact )  ;", "}", "resolvedArtifacts . add ( resolvedArtifact )  ;", "}", "return   ArtifactBackedResolvedVariant . create ( variant . asDescribable (  )  ,    attributes ,    resolvedArtifacts . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["toResolvedVariant"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.artifact.DefaultArtifactSet"}, {"methodBody": ["METHOD_START", "{", "assert    ( artifactSetsById . size (  )  )     >  =    artifactSetId ;", "if    (  ( artifactSetsById . size (  )  )     =  =    artifactSetId )     {", "artifactSetsById . add (  )  ;", "}", "}", "METHOD_END"], "methodName": ["collectArtifacts"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.artifact.DefaultResolvedArtifactsBuilder"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultVisitedArtifactResults ( sortOrder ,    artifactSetsById )  ;", "}", "METHOD_END"], "methodName": ["complete"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.artifact.DefaultResolvedArtifactsBuilder"}, {"methodBody": ["METHOD_START", "{", "return    (  ( ProjectComponentIdentifier )     ( incomingId )  )  . getBuild (  )  . equals ( thisBuild )  ;", "}", "METHOD_END"], "methodName": ["isCurrentBuild"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.artifact.DefaultResolvedArtifactsBuilder"}, {"methodBody": ["METHOD_START", "{", "if    ( artifacts    =  =     ( ResolvedArtifactSet . EMPTY )  )     {", "return    . EMPTY ;", "}", "return   new    . VisitingSet ( artifacts ,    buildOperationProcessor )  ;", "}", "METHOD_END"], "methodName": ["wrap"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.artifact.ParallelResolveArtifactSet"}, {"methodBody": ["METHOD_START", "{", "ConfigurationMetadata   targetConfiguration    =    toConfiguration . getMetadata (  )  ;", "ComponentResolveMetadata   component    =    toConfiguration . getOwner (  )  . getMetadata (  )  ;", "ImmutableAttributes   overriddenAttributes    =    dependency . getAttributes (  )  ;", "List <  ?    extends   ComponentArtifactMetadata >    artifacts    =    dependency . getArtifacts ( targetConfiguration )  ;", "if    (  !  ( artifacts . isEmpty (  )  )  )     {", "int   id    =     ( nextId )  +  +  ;", "ArtifactSet   artifactSet    =    artifactSelector . resolveArtifacts ( component ,    artifacts ,    overriddenAttributes )  ;", "return   new    . ArtifactsForNode ( id ,    artifactSet )  ;", "}", ". ArtifactsForNode   configurationArtifactSet    =    artifactsByNodeId . get ( toConfiguration . getNodeId (  )  )  ;", "if    ( configurationArtifactSet    =  =    null )     {", "ModuleExclusion   exclusions    =    dependency . getExclusions (  )  ;", "ArtifactSet   nodeArtifacts    =    artifactSelector . resolveArtifacts ( component ,    targetConfiguration ,    exclusions ,    overriddenAttributes )  ;", "int   id    =     ( nextId )  +  +  ;", "configurationArtifactSet    =    new    . ArtifactsForNode ( id ,    nodeArtifacts )  ;", "if    (  !  ( exclusions . mayExcludeArtifacts (  )  )  )     {", "artifactsByNodeId . put ( toConfiguration . getNodeId (  )  ,    configurationArtifactSet )  ;", "}", "}", "return   configurationArtifactSet ;", "}", "METHOD_END"], "methodName": ["getArtifacts"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.artifact.ResolvedArtifactsGraphVisitor"}, {"methodBody": ["METHOD_START", "{", "if    (  ( miss 1  . isEmpty (  )  )     |  |     ( miss 2  . isEmpty (  )  )  )     {", "return   false ;", "}", "for    ( AbstractModul   thisSpec    :    miss 1  )     {", "boolean   found    =    false ;", "for    ( AbstractModul   otherSpec    :    miss 2  )     {", "if    ( thisSpec . excludesSameModulesAs ( otherSpec )  )     {", "found    =    true ;", "break ;", "}", "}", "if    (  ! found )     {", "return   false ;", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["implies"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.AbstractCompositeExclusion"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["doExcludesSameModulesAs"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.AbstractModuleExclusion"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["excludeArtifact"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.AbstractModuleExclusion"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["excludesNoModules"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.AbstractModuleExclusion"}, {"methodBody": ["METHOD_START", "{", "if    ( filter    =  =     ( this )  )     {", "return   true ;", "}", "other    =     (  (  )     ( filter )  )  ;", "boolean   thisExcludesNothing    =    excludesNoModules (  )  ;", "boolean   otherExcludesNothing    =    other . excludesNoModules (  )  ;", "if    ( thisExcludesNothing    &  &    otherExcludesNothing )     {", "return   true ;", "}", "if    ( thisExcludesNothing    |  |    otherExcludesNothing )     {", "return   false ;", "}", "if    (  !  ( other . getClass (  )  . equals ( getClass (  )  )  )  )     {", "return   false ;", "}", "synchronized ( this )     {", "if    ( filter    =  =     ( lastCheck )  )     {", "return   lastCheckResult ;", "}", "lastCheck    =    other ;", "lastCheckResult    =    doExcludesSameModulesAs ( other )  ;", "return   lastCheckResult ;", "}", "}", "METHOD_END"], "methodName": ["excludesSameModulesAs"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.AbstractModuleExclusion"}, {"methodBody": ["METHOD_START", "{", "return   PatternMatchers . ANY _ EXPRESSION . equals ( attribute )  ;", "}", "METHOD_END"], "methodName": ["isWildcard"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.AbstractModuleExclusion"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["mayExcludeArtifacts"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.AbstractModuleExclusion"}, {"methodBody": ["METHOD_START", "{", "specs . add ( this )  ;", "}", "METHOD_END"], "methodName": ["unpackIntersection"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.AbstractModuleExclusion"}, {"methodBody": ["METHOD_START", "{", "specs . add ( this )  ;", "}", "METHOD_END"], "methodName": ["unpackUnion"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.AbstractModuleExclusion"}, {"methodBody": ["METHOD_START", "{", "return    ( AbstractModuleExclusion . isWildcard ( expression )  )     |  |     ( expression . equals ( input )  )  ;", "}", "METHOD_END"], "methodName": ["matches"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.ArtifactExcludeSpec"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["mayExcludeArtifacts"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.ArtifactExcludeSpec"}, {"methodBody": ["METHOD_START", "{", "precomputeCaches (  )  ;", "for    ( Abstract   excludeSpec    :    artifactExcludes )     {", "if    ( excludeSpec . excludeArtifact ( module ,    artifact )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["excludesArtifact"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.ImmutableModuleExclusionSet"}, {"methodBody": ["METHOD_START", "{", "precomputeCaches (  )  ;", "if    ( excludedModules . contains ( id )  )     {", "return   true ;", "}", "for    ( Abstract   excludeSpec    :    moduleExcludes )     {", "if    ( excludeSpec . excludeModule ( id )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["excludesModule"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.ImmutableModuleExclusionSet"}, {"methodBody": ["METHOD_START", "{", "if    (  ( excludedModules )     !  =    null )     {", "return ;", "}", "ImmutableSet . Builder < ModuleIdentifier >    moduleIds    =    ImmutableSet . builder (  )  ;", "ImmutableList . Builder < Abstract >    modules    =    ImmutableList . builder (  )  ;", "ImmutableList . Builder < Abstract >    artifacts    =    ImmutableList . builder (  )  ;", "for    ( Abstract   exclusion    :    delegate )     {", "if    ( exclusion   instanceof   ModuleIdExcludeSpec )     {", "moduleIds . add (  (  ( ModuleIdExcludeSpec )     ( exclusion )  )  . moduleId )  ;", "} else    {", "if    (  !  ( exclusion . excludesNoModules (  )  )  )     {", "modules . add ( exclusion )  ;", "}", "if    ( exclusion . mayExcludeArtifacts (  )  )     {", "artifacts . add ( exclusion )  ;", "}", "}", "}", "excludedModules    =    moduleIds . build (  )  ;", "moduleExcludes    =    modules . build (  )  ;", "artifactExcludes    =    artifacts . build (  )  ;", "}", "METHOD_END"], "methodName": ["precomputeCaches"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.ImmutableModuleExclusionSet"}, {"methodBody": ["METHOD_START", "{", "return   mergeable ;", "}", "METHOD_END"], "methodName": ["canMerge"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.IntersectionExclusion"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  ( excludeSpec   instanceof   ExcludeAllModulesSpec )     |  |     ( excludeSpec   instanceof   ArtifactExcludeSpec )  )     |  |     ( excludeSpec   instanceof   GroupNameExcludeSpec )  )     |  |     ( excludeSpec   instanceof   ModuleNameExcludeSpec )  )     |  |     ( excludeSpec   instanceof   ModuleIdExcludeSpec )  ;", "}", "METHOD_END"], "methodName": ["canMerge"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.IntersectionExclusion"}, {"methodBody": ["METHOD_START", "{", "for    ( AbstractModuleExclusion   excludeSpec    :    excludeSpecs )     {", "if    (  !  ( excludeSpec . excludesNoModules (  )  )  )     {", "return   false ;", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["doExcludeNoModules"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.IntersectionExclusion"}, {"methodBody": ["METHOD_START", "{", "return   excludeSpecs . excludesArtifact ( module ,    artifact )  ;", "}", "METHOD_END"], "methodName": ["excludeArtifact"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.IntersectionExclusion"}, {"methodBody": ["METHOD_START", "{", "return   excludeSpecs . excludesModule ( element )  ;", "}", "METHOD_END"], "methodName": ["excludeModule"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.IntersectionExclusion"}, {"methodBody": ["METHOD_START", "{", "return   excludeSpecs ;", "}", "METHOD_END"], "methodName": ["getFilters"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.IntersectionExclusion"}, {"methodBody": ["METHOD_START", "{", "for    ( AbstractModuleExclusion   spec    :    excludeSpecs )     {", "if    ( spec . mayExcludeArtifacts (  )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["mayExcludeArtifacts"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.IntersectionExclusion"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isArtifactExclude )  )     {", "return   false ;", "}", "return    (  (  (  ( matches ( moduleId . getGroup (  )  ,    module . getGroup (  )  )  )     &  &     ( matches ( moduleId . getName (  )  ,    module . getName (  )  )  )  )     &  &     ( matches ( ivyArtifactName . getName (  )  ,     . getName (  )  )  )  )     &  &     ( matches ( ivyArtifactName . getExtension (  )  ,     . getExtension (  )  )  )  )     &  &     ( matches ( ivyArtifactName . getType (  )  ,     . getType (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["excludeArtifact"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.IvyPatternMatcherExcludeRuleSpec"}, {"methodBody": ["METHOD_START", "{", "if    ( isArtifactExclude )     {", "return   false ;", "}", "return    ( matches ( moduleId . getGroup (  )  ,    module . getGroup (  )  )  )     &  &     ( matches ( moduleId . getName (  )  ,    module . getName (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["excludeModule"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.IvyPatternMatcherExcludeRuleSpec"}, {"methodBody": ["METHOD_START", "{", "return   matcher . getMatcher ( expression )  . matches ( input )  ;", "}", "METHOD_END"], "methodName": ["matches"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.IvyPatternMatcherExcludeRuleSpec"}, {"methodBody": ["METHOD_START", "{", "return   isArtifactExclude ;", "}", "METHOD_END"], "methodName": ["mayExcludeArtifacts"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.IvyPatternMatcherExcludeRuleSpec"}, {"methodBody": ["METHOD_START", "{", "IntersectionExclusion   cached    =    intersectionCache . get ( excludes )  ;", "if    ( cached    =  =    null )     {", "cached    =    new   IntersectionExclusion ( new   ImmutableSet ( excludes )  )  ;", "intersectionCache . put ( excludes ,    cached )  ;", "}", "return   cached ;", "}", "METHOD_END"], "methodName": ["asIntersection"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.ModuleExclusions"}, {"methodBody": ["METHOD_START", "{", "if    ( ex   instanceof   AbstractCompositeExclusion )     {", "return    (  ( AbstractCompositeExclusion )     ( ex )  )  . getFilters (  )  . size (  )  ;", "}", "return    1  ;", "}", "METHOD_END"], "methodName": ["estimateSize"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.ModuleExclusions"}, {"methodBody": ["METHOD_START", "{", "if    ( excludes . isEmpty (  )  )     {", "return    . EXCLUDE _ NONE ;", "}", "AbstractModuleExclusion   exclusion    =    excludeAnyCache . get ( excludes )  ;", "if    ( exclusion    !  =    null )     {", "return   exclusion ;", "}", "ImmutableSet . Builder < AbstractModuleExclusion >    exclusions    =    ImmutableSet . builder (  )  ;", "for    ( ExcludeMetadata   exclude    :    excludes )     {", "exclusions . add ( forExclude ( exclude )  )  ;", "}", "exclusion    =    asIntersection ( exclusions . build (  )  )  ;", "excludeAnyCache . put ( excludes ,    exclusion )  ;", "return   exclusion ;", "}", "METHOD_END"], "methodName": ["excludeAny"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.ModuleExclusions"}, {"methodBody": ["METHOD_START", "{", "if    (  ( excludes . length )     =  =     0  )     {", "return    . EXCLUDE _ NONE ;", "}", "return   excludeAny ( ImmutableList . copyOf ( excludes )  )  ;", "}", "METHOD_END"], "methodName": ["excludeAny"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.ModuleExclusions"}, {"methodBody": ["METHOD_START", "{", "return   ModuleExclusions . EXCLUDE _ NONE ;", "}", "METHOD_END"], "methodName": ["excludeNone"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.ModuleExclusions"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( PatternMatchers . isExactMatcher ( rule . getMatcher (  )  )  )  )     {", "return   new   IvyPatternMatcherExcludeRuleSpec ( rule )  ;", "}", "ModuleIdentifier   moduleId    =    rule . getModuleId (  )  ;", "IvyArtifactName   artifact    =    rule . getArtifact (  )  ;", "boolean   anyOrganisation    =    AbstractModuleExclusion . isWildcard ( moduleId . getGroup (  )  )  ;", "boolean   anyModule    =    AbstractModuleExclusion . isWildcard ( moduleId . getName (  )  )  ;", "if    ( artifact    =  =    null )     {", "if    (  (  ! anyOrganisation )     &  &     (  ! anyModule )  )     {", "return   moduleIdExcludeSpec ( moduleId )  ;", "} else", "if    (  ! anyModule )     {", "return   moduleNameExcludeSpec ( moduleId . getName (  )  )  ;", "} else", "if    (  ! anyOrganisation )     {", "return   groupNameExcludeSpec ( moduleId . getGroup (  )  )  ;", "} else    {", "return    . EXCLUDE _ ALL _ MODULES _ SPEC ;", "}", "} else    {", "return   new   ArtifactExcludeSpec ( moduleId ,    artifact )  ;", "}", "}", "METHOD_END"], "methodName": ["forExclude"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.ModuleExclusions"}, {"methodBody": ["METHOD_START", "{", "GroupNameExcludeSpec   spec    =    groupNameSpecs . get ( id )  ;", "if    ( spec    =  =    null )     {", "spec    =    new   GroupNameExcludeSpec ( id )  ;", "groupNameSpecs . put ( id ,    spec )  ;", "}", "return   spec ;", "}", "METHOD_END"], "methodName": ["groupNameExcludeSpec"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.ModuleExclusions"}, {"methodBody": ["METHOD_START", "{", "if    ( one    =  =    two )     {", "return   one ;", "}", "if    ( one    =  =     (  . EXCLUDE _ NONE )  )     {", "return   two ;", "}", "if    ( two    =  =     (  . EXCLUDE _ NONE )  )     {", "return   one ;", "}", "if    ( one . equals ( two )  )     {", "return   one ;", "}", "if    (  ( one   instanceof   IntersectionExclusion )     &  &     (  (  ( IntersectionExclusion )     ( one )  )  . getFilters (  )  . contains ( two )  )  )     {", "return   one ;", "} else", "if    (  ( two   instanceof   IntersectionExclusion )     &  &     (  (  ( IntersectionExclusion )     ( two )  )  . getFilters (  )  . contains ( one )  )  )     {", "return   two ;", "}", "AbstractModuleExclusion   aOne    =     (  ( AbstractModuleExclusion )     ( one )  )  ;", "AbstractModuleExclusion   aTwo    =     (  ( AbstractModuleExclusion )     ( two )  )  ;", "List < AbstractModuleExclusion >    builder    =    Lists . newArrayListWithExpectedSize (  (  (  . estimateSize ( aOne )  )     +     (  . estimateSize ( aTwo )  )  )  )  ;", "aOne . unpackIntersection ( builder )  ;", "aTwo . unpackIntersection ( builder )  ;", "return   asIntersection ( ImmutableSet . copyOf ( builder )  )  ;", "}", "METHOD_END"], "methodName": ["intersect"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.ModuleExclusions"}, {"methodBody": ["METHOD_START", "{", "if    ( one . equals ( two )  )     {", "return   one ;", "}", "if    (  ( one   instanceof   Intersection )     &  &     ( two   instanceof   Intersection )  )     {", "return   maybeMergeIntoUnion (  (  ( Intersection )     ( one )  )  ,     (  ( Intersection )     ( two )  )  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["maybeMergeIntoUnion"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.ModuleExclusions"}, {"methodBody": ["METHOD_START", "{", "if    ( one . equals ( other )  )     {", "return   one ;", "}", "if    (  ( one . canMerge (  )  )     &  &     ( other . canMerge (  )  )  )     {", "AbstractModuleExclusion [  ]    oneFilters    =    one . getFilters (  )  . elements ;", "AbstractModuleExclusion [  ]    otherFilters    =    other . getFilters (  )  . elements ;", "if    ( Arrays . equals ( oneFilters ,    otherFilters )  )     {", "return   one ;", "}", ". MergeOperation   merge    =    mergeOperation ( oneFilters ,    otherFilters )  ;", "AbstractModuleExclusion   exclusion    =    mergeCache . get ( merge )  ;", "if    ( exclusion    !  =    null )     {", "return   exclusion ;", "}", "return   mergeAndCacheResult ( merge ,    oneFilters ,    otherFilters )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["maybeMergeIntoUnion"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.ModuleExclusions"}, {"methodBody": ["METHOD_START", "{", "AbstractModuleExclusion   exclusion ;", "final   BitSet   remaining    =    new   BitSet ( otherFilters . length )  ;", "remaining . set (  0  ,    otherFilters . length ,    true )  ;", ". MergeSet   merged    =    new    . MergeSet ( remaining ,     (  ( oneFilters . length )     +     ( otherFilters . length )  )  )  ;", "for    ( AbstractModuleExclusion   thisSpec    :    oneFilters )     {", "if    (  !  ( remaining . isEmpty (  )  )  )     {", "for    ( int   i    =    remaining . nextSetBit (  0  )  ;    i    >  =     0  ;    i    =    remaining . nextSetBit (  ( i    +     1  )  )  )     {", "AbstractModuleExclusion   otherSpec    =    otherFilters [ i ]  ;", "merged . current    =    otherSpec ;", "merged . idx    =    i ;", "mergeExcludeRules ( thisSpec ,    otherSpec ,    merged )  ;", "}", "}", "}", "if    ( merged . isEmpty (  )  )     {", "exclusion    =     . EXCLUDE _ NONE ;", "} else    {", "exclusion    =    asIntersection ( ImmutableSet . copyOf ( merged )  )  ;", "}", "mergeCache . put ( merge ,    exclusion )  ;", "return   exclusion ;", "}", "METHOD_END"], "methodName": ["mergeAndCacheResult"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.ModuleExclusions"}, {"methodBody": ["METHOD_START", "{", "if    ( spec 1     =  =    spec 2  )     {", "merged . add ( spec 1  )  ;", "} else", "if    ( spec 1    instanceof   ExcludeAllModulesSpec )     {", "merged . add ( spec 2  )  ;", "} else", "if    ( spec 2    instanceof   ExcludeAllModulesSpec )     {", "merged . add ( spec 1  )  ;", "} else", "if    ( spec 1    instanceof   ArtifactExcludeSpec )     {", "merged . add ( spec 1  )  ;", "} else", "if    ( spec 2    instanceof   ArtifactExcludeSpec )     {", "merged . add ( spec 2  )  ;", "} else", "if    ( spec 1    instanceof   GroupNameExcludeSpec )     {", "mergeExcludeRules (  (  ( GroupNameExcludeSpec )     ( spec 1  )  )  ,    spec 2  ,    merged )  ;", "} else", "if    ( spec 2    instanceof   GroupNameExcludeSpec )     {", "mergeExcludeRules (  (  ( GroupNameExcludeSpec )     ( spec 2  )  )  ,    spec 1  ,    merged )  ;", "} else", "if    ( spec 1    instanceof   ModuleNameExcludeSpec )     {", ". mergeExcludeRules (  (  ( ModuleNameExcludeSpec )     ( spec 1  )  )  ,    spec 2  ,    merged )  ;", "} else", "if    ( spec 2    instanceof   ModuleNameExcludeSpec )     {", ". mergeExcludeRules (  (  ( ModuleNameExcludeSpec )     ( spec 2  )  )  ,    spec 1  ,    merged )  ;", "} else", "if    (  ( spec 1    instanceof   ModuleIdExcludeSpec )     &  &     ( spec 2    instanceof   ModuleIdExcludeSpec )  )     {", "ModuleIdExcludeSpec   moduleSpec 1     =     (  ( ModuleIdExcludeSpec )     ( spec 1  )  )  ;", "ModuleIdExcludeSpec   moduleSpec 2     =     (  ( ModuleIdExcludeSpec )     ( spec 2  )  )  ;", "if    ( moduleSpec 1  . moduleId . equals ( moduleSpec 2  . moduleId )  )     {", "merged . add ( moduleSpec 1  )  ;", "}", "} else    {", "throw   new   UnsupportedOperationException ( String . format (  \" Cannot   calculate   intersection   of   exclude   rules :     % s ,     % s \"  ,    spec 1  ,    spec 2  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["mergeExcludeRules"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.ModuleExclusions"}, {"methodBody": ["METHOD_START", "{", "if    ( spec 2    instanceof   GroupNameExcludeSpec )     {", "GroupNameExcludeSpec   groupNameExcludeSpec    =     (  ( GroupNameExcludeSpec )     ( spec 2  )  )  ;", "if    ( spec 1  . group . equals ( groupNameExcludeSpec . group )  )     {", "merged . add ( spec 1  )  ;", "}", "} else", "if    ( spec 2    instanceof   ModuleNameExcludeSpec )     {", "ModuleNameExcludeSpec   moduleNameExcludeSpec    =     (  ( ModuleNameExcludeSpec )     ( spec 2  )  )  ;", "merged . add ( moduleIdExcludeSpec ( moduleIdentifierFactory . module ( spec 1  . group ,    moduleNameExcludeSpec . module )  )  )  ;", "} else", "if    ( spec 2    instanceof   ModuleIdExcludeSpec )     {", "ModuleIdExcludeSpec   moduleIdExcludeSpec    =     (  ( ModuleIdExcludeSpec )     ( spec 2  )  )  ;", "if    ( moduleIdExcludeSpec . moduleId . getGroup (  )  . equals ( spec 1  . group )  )     {", "merged . add ( spec 2  )  ;", "}", "} else    {", "throw   new   UnsupportedOperationException ( String . format (  \" Cannot   calculate   intersection   of      rules :     % s ,     % s \"  ,    spec 1  ,    spec 2  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["mergeExcludeRules"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.ModuleExclusions"}, {"methodBody": ["METHOD_START", "{", "if    ( spec 2    instanceof   ModuleNameExcludeSpec )     {", "ModuleNameExcludeSpec   moduleNameExcludeSpec    =     (  ( ModuleNameExcludeSpec )     ( spec 2  )  )  ;", "if    ( spec 1  . module . equals ( moduleNameExcludeSpec . module )  )     {", "merged . add ( spec 1  )  ;", "}", "} else", "if    ( spec 2    instanceof   ModuleIdExcludeSpec )     {", "ModuleIdExcludeSpec   moduleIdExcludeSpec    =     (  ( ModuleIdExcludeSpec )     ( spec 2  )  )  ;", "if    ( moduleIdExcludeSpec . moduleId . getName (  )  . equals ( spec 1  . module )  )     {", "merged . add ( spec 2  )  ;", "}", "} else    {", "throw   new   UnsupportedOperationException ( String . format (  \" Cannot   calculate   intersection   of      rules :     % s ,     % s \"  ,    spec 1  ,    spec 2  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["mergeExcludeRules"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.ModuleExclusions"}, {"methodBody": ["METHOD_START", "{", "synchronized ( mergeOperationLock )     {", "Map < AbstractModuleExclusion [  ]  ,     . MergeOperation >    oneMap    =    mergeOperationCache . get ( one )  ;", "if    ( oneMap    =  =    null )     {", "oneMap    =    Maps . newIdentityHashMap (  )  ;", "mergeOperationCache . put ( one ,    oneMap )  ;", "}", ". MergeOperation   mergeOperation    =    oneMap . get ( two )  ;", "if    ( mergeOperation    !  =    null )     {", "return   mergeOperation ;", "}", "mergeOperation    =    new    . MergeOperation ( one ,    two )  ;", "oneMap . put ( two ,    mergeOperation )  ;", "return   mergeOperation ;", "}", "}", "METHOD_END"], "methodName": ["mergeOperation"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.ModuleExclusions"}, {"methodBody": ["METHOD_START", "{", "ModuleIdExcludeSpec   spec    =    moduleIdSpecs . get ( id )  ;", "if    ( spec    =  =    null )     {", "spec    =    new   ModuleIdExcludeSpec ( id )  ;", "moduleIdSpecs . put ( id ,    spec )  ;", "}", "return   spec ;", "}", "METHOD_END"], "methodName": ["moduleIdExcludeSpec"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.ModuleExclusions"}, {"methodBody": ["METHOD_START", "{", "ModuleNameExcludeSpec   spec    =    moduleNameSpecs . get ( id )  ;", "if    ( spec    =  =    null )     {", "spec    =    new   ModuleNameExcludeSpec ( id )  ;", "moduleNameSpecs . put ( id ,    spec )  ;", "}", "return   spec ;", "}", "METHOD_END"], "methodName": ["moduleNameExcludeSpec"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.ModuleExclusions"}, {"methodBody": ["METHOD_START", "{", "if    ( one    =  =    two )     {", "return   one ;", "}", "if    (  ( one    =  =     (  . EXCLUDE _ NONE )  )     |  |     ( two    =  =     (  . EXCLUDE _ NONE )  )  )     {", "return    . EXCLUDE _ NONE ;", "}", "if    ( one . equals ( two )  )     {", "return   one ;", "}", "List < AbstractModuleExclusion >    specs    =    new   ArrayList < AbstractModuleExclusion >  (  )  ;", "(  ( AbstractModuleExclusion )     ( one )  )  . unpackUnion ( specs )  ;", "(  ( AbstractModuleExclusion )     ( two )  )  . unpackUnion ( specs )  ;", "for    ( int   i    =     0  ;    i    <     ( specs . size (  )  )  ;  )     {", "AbstractModuleExclusion   spec    =    specs . get ( i )  ;", "AbstractModuleExclusion   merged    =    null ;", "for    ( int   j    =    i    +     1  ;    j    <     ( specs . size (  )  )  ;    j +  +  )     {", "AbstractModuleExclusion   other    =    specs . get ( j )  ;", "merged    =    maybeMergeIntoUnion ( spec ,    other )  ;", "if    ( merged    !  =    null )     {", "specs . remove ( j )  ;", "break ;", "}", "}", "if    ( merged    !  =    null )     {", "specs . set ( i ,    merged )  ;", "} else    {", "i +  +  ;", "}", "}", "if    (  ( specs . size (  )  )     =  =     1  )     {", "return   specs . get (  0  )  ;", "}", "return   new   UnionExclusion ( specs )  ;", "}", "METHOD_END"], "methodName": ["union"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.ModuleExclusions"}, {"methodBody": ["METHOD_START", "{", "return   module . equals ( moduleId )  ;", "}", "METHOD_END"], "methodName": ["excludeModule"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.ModuleIdExcludeSpec"}, {"methodBody": ["METHOD_START", "{", "return   element . getName (  )  . equals ( module )  ;", "}", "METHOD_END"], "methodName": ["excludeModule"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.ModuleNameExcludeSpec"}, {"methodBody": ["METHOD_START", "{", "matchers . put ( instance . getName (  )  ,    instance )  ;", "}", "METHOD_END"], "methodName": ["addMatcher"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.PatternMatchers"}, {"methodBody": ["METHOD_START", "{", "if    (  ( PatternMatchers . instance )     =  =    null )     {", "PatternMatchers . instance    =    new   PatternMatchers (  )  ;", "}", "return   PatternMatchers . instance ;", "}", "METHOD_END"], "methodName": ["getInstance"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.PatternMatchers"}, {"methodBody": ["METHOD_START", "{", "return   matchers . get ( name )  ;", "}", "METHOD_END"], "methodName": ["getMatcher"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.PatternMatchers"}, {"methodBody": ["METHOD_START", "{", "return    ( name    =  =    null )     |  |     ( PatternMatchers . EXACT . equals ( name )  )  ;", "}", "METHOD_END"], "methodName": ["isExactMatcher"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.PatternMatchers"}, {"methodBody": ["METHOD_START", "{", "for    ( AbstractModuleExclusion   spec    :    filters )     {", "if    (  !  ( spec . excludeArtifact ( module ,    artifact )  )  )     {", "return   false ;", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["excludeArtifact"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.UnionExclusion"}, {"methodBody": ["METHOD_START", "{", "for    ( AbstractModuleExclusion   spec    :    filters )     {", "if    (  !  ( spec . excludeModule ( element )  )  )     {", "return   false ;", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["excludeModule"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.UnionExclusion"}, {"methodBody": ["METHOD_START", "{", "return   filters ;", "}", "METHOD_END"], "methodName": ["getFilters"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.UnionExclusion"}, {"methodBody": ["METHOD_START", "{", "for    ( AbstractModuleExclusion   spec    :    filters )     {", "if    (  !  ( spec . mayExcludeArtifacts (  )  )  )     {", "return   false ;", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["mayExcludeArtifacts"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.excludes.UnionExclusion"}, {"methodBody": ["METHOD_START", "{", "Map < ComponentResult ,    List < ComponentIdentifier >  >    shortestPaths    =    new   LinkedHashMap < ComponentResult ,    List < ComponentIdentifier >  >  (  )  ;", "List < ComponentIdentifier >    rootPath    =    new   ArrayList < ComponentIdentifier >  (  )  ;", "rootPath . add ( toNode . getOwner (  )  . getComponentId (  )  )  ;", "shortestPaths . put ( toNode . getOwner (  )  ,    rootPath )  ;", "Set < Component >    directDependees    =    new   LinkedHashSet < Component >  (  )  ;", "for    ( Node   node    :    fromNodes )     {", "directDependees . add ( node . getOwner (  )  )  ;", "}", "Set < Component >    seen    =    new   HashSet < Component >  (  )  ;", "LinkedList < Component >    queue    =    new   LinkedList < Component >  (  )  ;", "queue . addAll ( directDependees )  ;", "while    (  !  ( queue . isEmpty (  )  )  )     {", "Component   version    =    queue . getFirst (  )  ;", "if    ( version    =  =     ( toNode . getOwner (  )  )  )     {", "queue . removeFirst (  )  ;", "} else", "if    ( seen . add ( version )  )     {", "for    ( Component   incomingVersion    :    version . getDependents (  )  )     {", "queue . add (  0  ,    incomingVersion )  ;", "}", "} else    {", "queue . remove (  )  ;", "List < ComponentIdentifier >    shortest    =    null ;", "for    ( Component   incomingVersion    :    version . getDependents (  )  )     {", "List < ComponentIdentifier >    candidate    =    shortestPaths . get ( incomingVersion )  ;", "if    ( candidate    =  =    null )     {", "continue ;", "}", "if    ( shortest    =  =    null )     {", "shortest    =    candidate ;", "} else", "if    (  ( shortest . size (  )  )     >     ( candidate . size (  )  )  )     {", "shortest    =    candidate ;", "}", "}", "if    ( shortest    =  =    null )     {", "continue ;", "}", "List < ComponentIdentifier >    path    =    new   ArrayList < ComponentIdentifier >  (  )  ;", "path . addAll ( shortest )  ;", "path . add ( version . getComponentId (  )  )  ;", "shortestPaths . put ( version ,    path )  ;", "}", "}", "List < List < ComponentIdentifier >  >    paths    =    new   ArrayList < List < ComponentIdentifier >  >  (  )  ;", "for    ( Component   version    :    directDependees )     {", "List < ComponentIdentifier >    path    =    shortestPaths . get ( version )  ;", "paths . add ( path )  ;", "}", "return   paths ;", "}", "METHOD_END"], "methodName": ["calculatePaths"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.DependencyGraphPathResolver"}, {"methodBody": ["METHOD_START", "{", "nodes . add ( node )  ;", "}", "METHOD_END"], "methodName": ["addConfiguration"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ComponentState"}, {"methodBody": ["METHOD_START", "{", "return    (  ( metadata )     !  =    null )     |  |     (  ( metadataResolveFailure )     !  =    null )  ;", "}", "METHOD_END"], "methodName": ["alreadyResolved"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ComponentState"}, {"methodBody": ["METHOD_START", "{", "ImmutableAttributes   attributes    =    selected . getMetadata (  )  . getAttributes (  )  ;", "if    ( attributes . isEmpty (  )  )     {", "return   attributes ;", "}", "AttributeContainerI   mutable    =    selected . getAttributesFactory (  )  . mutable (  )  ;", "Set < Attribute <  ?  >  >    keySet    =    attributes . keySet (  )  ;", "for    ( Attribute <  ?  >    attribute    :    keySet )     {", "Object   value    =    attributes . getAttribute ( attribute )  ;", "Attribute < Object >    desugared    =    Cast . uncheckedCast ( attribute )  ;", "if    (  (  ( attribute . getType (  )  )     =  =     ( Boolean . class )  )     |  |     (  ( attribute . getType (  )  )     =  =     ( String . class )  )  )     {", "mutable . attribute ( desugared ,    value )  ;", "} else    {", "desugared    =    Cast . uncheckedCast ( Attribute . of ( attribute . getName (  )  ,    String . class )  )  ;", "mutable . attribute ( desugared ,    value . toString (  )  )  ;", "}", "}", "return   mutable . asImmutable (  )  ;", "}", "METHOD_END"], "methodName": ["desugarAttributes"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ComponentState"}, {"methodBody": ["METHOD_START", "{", "state    =    ComponentState . ComponentSelectionState . Evicted ;", "}", "METHOD_END"], "methodName": ["evict"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ComponentState"}, {"methodBody": ["METHOD_START", "{", "if    (  ( id . getGroup (  )  . equals ( group )  )     &  &     ( id . getName (  )  . equals ( name )  )  )     {", "return   implicitCapability ;", "}", "return   findCapabilityOnTarget ( group ,    name )  ;", "}", "METHOD_END"], "methodName": ["findCapability"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ComponentState"}, {"methodBody": ["METHOD_START", "{", "for    ( NodeState   target    :    nodes )     {", "List <  ?    extends   Capability >    capabilities    =    target . getMetadata (  )  . getCapabilities (  )  . getCapabilities (  )  ;", "if    (  !  ( capabilities . isEmpty (  )  )  )     {", "for    ( Capability   capability    :    capabilities )     {", "if    (  ( capability . getGroup (  )  . equals ( group )  )     &  &     ( capability . getName (  )  . equals ( name )  )  )     {", "return   capability ;", "}", "}", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["findCapabilityOnTarget"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ComponentState"}, {"methodBody": ["METHOD_START", "{", "for    ( NodeState   target    :    nodes )     {", "List <  ?    extends   Capability >    capabilities    =    target . getMetadata (  )  . getCapabilities (  )  . getCapabilities (  )  ;", "if    (  !  ( capabilities . isEmpty (  )  )  )     {", "for    ( Capability   capability    :    capabilities )     {", "action . execute ( capability )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["forEachCapability"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ComponentState"}, {"methodBody": ["METHOD_START", "{", "return   metadataResolveFailure ;", "}", "METHOD_END"], "methodName": ["getMetadataResolveFailure"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ComponentState"}, {"methodBody": ["METHOD_START", "{", "return   module ;", "}", "METHOD_END"], "methodName": ["getModule"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ComponentState"}, {"methodBody": ["METHOD_START", "{", "return   nodes ;", "}", "METHOD_END"], "methodName": ["getNodes"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ComponentState"}, {"methodBody": ["METHOD_START", "{", "for    ( NodeState   node    :    nodes )     {", "if    ( node . isSelected (  )  )     {", "return   node ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getSelectedNode"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ComponentState"}, {"methodBody": ["METHOD_START", "{", "return   visitState ;", "}", "METHOD_END"], "methodName": ["getVisitState"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ComponentState"}, {"methodBody": ["METHOD_START", "{", "return   state . isCandidateForConflictResolution (  )  ;", "}", "METHOD_END"], "methodName": ["isCandidateForConflictResolution"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ComponentState"}, {"methodBody": ["METHOD_START", "{", "return    ( state )     =  =     ( ComponentState . ComponentSelectionState . Selected )  ;", "}", "METHOD_END"], "methodName": ["isSelected"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ComponentState"}, {"methodBody": ["METHOD_START", "{", "state    =    ComponentState . ComponentSelectionState . Selectable ;", "}", "METHOD_END"], "methodName": ["makeSelectable"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ComponentState"}, {"methodBody": ["METHOD_START", "{", "for    ( NodeState   configuration    :    getNodes (  )  )     {", "configuration . deselect (  )  ;", "}", "}", "METHOD_END"], "methodName": ["removeOutgoingEdges"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ComponentState"}, {"methodBody": ["METHOD_START", "{", "if    ( alreadyResolved (  )  )     {", "return ;", "}", "OverrideMetadata   componentOverrideMetadata    =    DefaultOverrideMetadata . forDependency ( firstSelectedBy . getDependencyMetadata (  )  )  ;", "DefaultBuildableResolveResult   result    =    new   DefaultBuildableResolveResult (  )  ;", "resolver . resolve ( componentIdentifier ,    componentOverrideMetadata ,    result )  ;", "if    (  ( result . getFailure (  )  )     !  =    null )     {", "metadataResolveFailure    =    result . getFailure (  )  ;", "return ;", "}", "metadata    =    result . getMetadata (  )  ;", "}", "METHOD_END"], "methodName": ["resolve"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ComponentState"}, {"methodBody": ["METHOD_START", "{", "for    ( NodeState   configuration    :    nodes )     {", "configuration . restart ( selected )  ;", "}", "}", "METHOD_END"], "methodName": ["restartIncomingEdges"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ComponentState"}, {"methodBody": ["METHOD_START", "{", "state    =    ComponentState . ComponentSelectionState . Selected ;", "}", "METHOD_END"], "methodName": ["select"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ComponentState"}, {"methodBody": ["METHOD_START", "{", "this . metadata    =    metaData ;", "this . metadataRFailure    =    null ;", "}", "METHOD_END"], "methodName": ["setMetadata"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ComponentState"}, {"methodBody": ["METHOD_START", "{", "this . root    =    true ;", "}", "METHOD_END"], "methodName": ["setRoot"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ComponentState"}, {"methodBody": ["METHOD_START", "{", "this . visitState    =    visitState ;", "}", "METHOD_END"], "methodName": ["setVisitState"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ComponentState"}, {"methodBody": ["METHOD_START", "{", "visitor . start ( resolveState . getRoot (  )  )  ;", "for    ( DependencyGraphSelector   selector    :    resolveState . getSelectors (  )  )     {", "visitor . visitSelector ( selector )  ;", "}", "for    ( NodeState   nodeState    :    resolveState . getNodes (  )  )     {", "if    ( nodeState . isSelected (  )  )     {", "visitor . visitNode ( nodeState )  ;", "}", "}", "List < ComponentState >    queue    =    new   ArrayList < ComponentState >  (  )  ;", "for    ( ModuleResolveState   module    :    resolveState . getModules (  )  )     {", "if    (  ( module . getSelected (  )  )     !  =    null )     {", "queue . add ( module . getSelected (  )  )  ;", "}", "}", "while    (  !  ( queue . isEmpty (  )  )  )     {", "ComponentState   component    =    queue . get (  0  )  ;", "if    (  ( component . getVisitState (  )  )     =  =     (  . VisitState . NotSeen )  )     {", "component . setVisitState (  . VisitState . Visiting )  ;", "int   pos    =     0  ;", "for    ( NodeState   node    :    component . getNodes (  )  )     {", "if    (  !  ( node . isSelected (  )  )  )     {", "continue ;", "}", "for    ( EdgeState   edge    :    node . getIncomingEdges (  )  )     {", "ComponentState   owner    =    edge . getFrom (  )  . getOwner (  )  ;", "if    (  ( owner . getVisitState (  )  )     =  =     (  . VisitState . NotSeen )  )     {", "queue . add ( pos ,    owner )  ;", "pos +  +  ;", "}", "}", "}", "if    ( pos    =  =     0  )     {", "component . setVisitState (  . VisitState . Visited )  ;", "queue . remove (  0  )  ;", "for    ( NodeState   node    :    component . getNodes (  )  )     {", "if    ( node . isSelected (  )  )     {", "visitor . visitEdges ( node )  ;", "}", "}", "}", "} else", "if    (  ( component . getVisitState (  )  )     =  =     (  . VisitState . Visiting )  )     {", "component . setVisitState (  . VisitState . Visited )  ;", "queue . remove (  0  )  ;", "for    ( NodeState   node    :    component . getNodes (  )  )     {", "if    ( node . isSelected (  )  )     {", "visitor . visitEdges ( node )  ;", "}", "}", "} else    {", "queue . remove (  0  )  ;", "}", "}", "visitor . finish ( resolveState . getRoot (  )  )  ;", "}", "METHOD_END"], "methodName": ["assembleResult"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.DependencyGraphBuilder"}, {"methodBody": ["METHOD_START", "{", "for    ( EdgeState   dependency    :    dependencies )     {", "dependency . attachToTargetConfigurations (  )  ;", "}", "}", "METHOD_END"], "methodName": ["attachToTargetRevisionsSerially"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.DependencyGraphBuilder"}, {"methodBody": ["METHOD_START", "{", "PotentialConflict   c    =    moduleConflictHandler . registerCandidate ( module )  ;", "if    ( c . conflictExists (  )  )     {", ". LOGGER . debug (  \" Found   new   conflicting   module    {  }  \"  ,    module )  ;", "c . withParticipatingModules ( resolveState . getDeselectVersionAction (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkForModuleConflicts"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.DependencyGraphBuilder"}, {"methodBody": ["METHOD_START", "{", "List < ComponentState >    requiringDownload    =    null ;", "for    ( EdgeState   dependency    :    dependencies )     {", "ComponentState   targetComponent    =    dependency . getTargetComponent (  )  ;", "if    (  (  ( targetComponent    !  =    null )     &  &     ( targetComponent . isSelected (  )  )  )     &  &     (  !  ( targetComponent . alreadyResolved (  )  )  )  )     {", "if    (  !  ( metaDataResolver . isFetchingMetadataCheap ( toComponentId ( targetComponent . getId (  )  ,    componentIdentifierCache )  )  )  )     {", "if    ( requiringDownload    =  =    null )     {", "requiringDownload    =    Lists . newArrayList (  )  ;", "}", "requiringDownload . add ( targetComponent )  ;", "}", "}", "}", "if    (  ( requiringDownload    !  =    null )     &  &     (  ( requiringDownload . size (  )  )     >     1  )  )     {", "final   ImmutableList < ComponentState >    toDownloadInParallel    =    ImmutableList . copyOf ( requiringDownload )  ;", ". LOGGER . debug (  \" Submitting    {  }    metadata   files   to   resolve   in   parallel   for    {  }  \"  ,    toDownloadInParallel . size (  )  ,    node )  ;", "buildOperationExecutor . runAll ( new   Action < BuildOperationQueue < RunnableBuildOperation >  >  (  )     {", "@ Override", "public   void   execute ( BuildOperationQueue < RunnableBuildOperation >    buildOperationQueue )     {", "for    ( final   ComponentState   componentState    :    toDownloadInParallel )     {", "buildOperationQueue . add ( new   DownloadMetadataOperation ( componentState )  )  ;", "}", "}", "}  )  ;", "}", "}", "METHOD_END"], "methodName": ["maybeDownloadMetadataInParallel"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.DependencyGraphBuilder"}, {"methodBody": ["METHOD_START", "{", "ComponentState   currentSelection    =    module . getSelected (  )  ;", "SelectorStateResolver < ComponentState >    selectorStateResolver    =    new   SelectorStateResolver < ComponentState >  ( moduleConflictHandler . getResolver (  )  ,    State ,    State . getRoot (  )  . getComponent (  )  )  ;", "ComponentState   selected ;", "try    {", "selected    =    selectorStateResolver . selectBest ( module . getId (  )  ,    module . getSelectors (  )  )  ;", "}    catch    ( ModuleVersionResolveException   e )     {", "return ;", "}", "if    ( currentSelection    =  =    null )     {", "module . select ( selected )  ;", "checkForModuleConflicts ( State ,    module )  ;", "return ;", "}", "if    ( selected    =  =    currentSelection )     {", "return ;", "}", "module . changeSelection ( selected )  ;", "}", "METHOD_END"], "methodName": ["performSelection"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.DependencyGraphBuilder"}, {"methodBody": ["METHOD_START", "{", "for    ( EdgeState   dependency    :    dependencies )     {", "SelectorState   selector    =    dependency . getSelector (  )  ;", "ModuleResolveState   module    =    selector . getTargetModule (  )  ;", "if    (  !  ( selector . isResolved (  )  )  )     {", "performSelection ( resolveState ,    module )  ;", "}", "module . addUnattached ( dependency )  ;", "}", "}", "METHOD_END"], "methodName": ["performSelectionSerially"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.DependencyGraphBuilder"}, {"methodBody": ["METHOD_START", "{", "moduleRevision . forEachCapability ( new   Action < Capability >  (  )     {", "@ Override", "public   void   execute ( Capability   capability )     {", "Collection < ComponentState >    implicitProvidersForCapability    =    Collections . emptyList (  )  ;", "for    ( ModuleResolveState   state    :    resolveState . getModules (  )  )     {", "if    (  ( state . getId (  )  . getGroup (  )  . equals ( capability . getGroup (  )  )  )     &  &     ( state . getId (  )  . getName (  )  . equals ( capability . getName (  )  )  )  )     {", "implicitProvidersForCapability    =    state . getVersions (  )  ;", "break ;", "}", "}", "PotentialConflict   c    =    capabilitiesConflictHandler . registerCandidate ( DefaultCapabilitiesConflictHandler . candidate ( moduleRevision ,    capability ,    implicitProvidersForCapability )  )  ;", "if    ( c . conflictExists (  )  )     {", "c . withParticipatingModules ( resolveState . getDeselectVersionAction (  )  )  ;", "}", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["registerCapabilities"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.DependencyGraphBuilder"}, {"methodBody": ["METHOD_START", "{", "IdGenerator < Long >    idGenerator    =    new   LongIdGenerator (  )  ;", "DefaultBuildableComponentResolveResult   rootModule    =    new   DefaultBuildableComponentResolveResult (  )  ;", "moduleResolver . resolve ( resolveContext ,    rootModule )  ;", "final   ResolveState   resolveState    =    new   ResolveState ( idGenerator ,    rootModule ,    resolveContext . getName (  )  ,    idResolver ,    metaDataResolver ,    edgeFilter ,    attributesSchema ,    moduleExclusions ,    moduleReplacementsData ,    componentSelectorConverter ,    attributesFactory ,    dSubstitutionApplicator )  ;", "traverseGraph ( resolveState )  ;", "validateGraph ( resolveState )  ;", "assembleResult ( resolveState ,    modelVisitor )  ;", "}", "METHOD_END"], "methodName": ["resolve"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.DependencyGraphBuilder"}, {"methodBody": ["METHOD_START", "{", "if    ( dependencies . isEmpty (  )  )     {", "return ;", "}", "performSelectionSerially ( dependencies ,    resolveState )  ;", "maybeDownloadMetadataInParallel ( node ,    componentIdentifierCache ,    dependencies )  ;", "attachToTargetRevisionsSerially ( dependencies )  ;", "}", "METHOD_END"], "methodName": ["resolveEdges"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.DependencyGraphBuilder"}, {"methodBody": ["METHOD_START", "{", "ComponentIdentifier   identifier    =    componentIdentifierCache . get ( id )  ;", "if    ( identifier    =  =    null )     {", "identifier    =    DefaultModuleComponentIdentifier . newId ( id )  ;", "componentIdentifierCache . put ( id ,    identifier )  ;", "}", "return   identifier ;", "}", "METHOD_END"], "methodName": ["toComponentId"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.DependencyGraphBuilder"}, {"methodBody": ["METHOD_START", "{", "resolveState . onMoreSelected ( resolveState . getRoot (  )  )  ;", "final   List < EdgeState >    dependencies    =    Lists . newArrayList (  )  ;", "final   Map < ModuleVersionIdentifier ,    ComponentIdentifier >    componentIdentifierCache    =    Maps . newHashMap (  )  ;", "final   PendingDependenciesHandler   pendingDependenciesHandler    =    new   DefaultPendingDependenciesHandler (  )  ;", "while    (  (  (  ( resolveState . peek (  )  )     !  =    null )     |  |     ( moduleConflictHandler . hasConflicts (  )  )  )     |  |     ( capabilitiesConflictHandler . hasConflicts (  )  )  )     {", "if    (  ( resolveState . peek (  )  )     !  =    null )     {", "final   NodeState   node    =    resolveState . pop (  )  ;", ". LOGGER . debug (  \" Visiting   configuration    {  }  .  \"  ,    node )  ;", "registerCapabilities ( resolveState ,    node . getComponent (  )  )  ;", "dependencies . clear (  )  ;", "node . visitOutgoingDependencies ( dependencies ,    pendingDependenciesHandler )  ;", "resolveEdges ( node ,    dependencies ,    resolveState ,    componentIdentifierCache )  ;", "} else    {", "if    ( moduleConflictHandler . hasConflicts (  )  )     {", "moduleConflictHandler . resolveNextConflict ( resolveState . getReplaceSelectionWithConflictResultAction (  )  )  ;", "} else    {", "capabilitiesConflictHandler . resolveNextConflict ( resolveState . getReplaceSelectionWithConflictResultAction (  )  )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["traverseGraph"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.DependencyGraphBuilder"}, {"methodBody": ["METHOD_START", "{", "for    ( ModuleResolveState   module    :    resolveState . getModules (  )  )     {", "if    (  (  ( module . getSelected (  )  )     !  =    null )     &  &     ( module . getSelected (  )  . isRejected (  )  )  )     {", "throw   new   GradleException ( new   RejectedModuleMessageBuilder (  )  . buildFailureMessage ( module )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["validateGraph"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.DependencyGraphBuilder"}, {"methodBody": ["METHOD_START", "{", "return   dependency ;", "}", "METHOD_END"], "methodName": ["getDependency"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.DependencyState"}, {"methodBody": ["METHOD_START", "{", "if    (  ( moduleIdentifier )     =  =    null )     {", "moduleIdentifier    =    componentSelectorConverter . getModule ( d . getSelector (  )  )  ;", "}", "return   moduleIdentifier ;", "}", "METHOD_END"], "methodName": ["getModuleIdentifier"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.DependencyState"}, {"methodBody": ["METHOD_START", "{", "return   requested ;", "}", "METHOD_END"], "methodName": ["getRequested"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.DependencyState"}, {"methodBody": ["METHOD_START", "{", "return   ruleDescriptor ;", "}", "METHOD_END"], "methodName": ["getRuleDescriptor"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.DependencyState"}, {"methodBody": ["METHOD_START", "{", "DependencyMetadata   targeted    =    dependency . withTarget ( target )  ;", "return   new    ( targeted ,    requested ,    ruleDescriptor ,    componentSelectorConverter )  ;", "}", "METHOD_END"], "methodName": ["withTarget"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.DependencyState"}, {"methodBody": ["METHOD_START", "{", "resolveState . getModule ( module )  . clearSelection (  )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.DeselectVersionAction"}, {"methodBody": ["METHOD_START", "{", "try    {", "ComponentSelector   selector    =    selectorState . getDependencyMetadata (  )  . getSelector (  )  ;", "if    ( selector   instanceof   ModuleComponentSelector )     {", "ImmutableAttributes   attributes    =     (  ( AttributeContainerInternal )     (  (  ( ModuleComponentSelector )     ( selector )  )  . getAttributes (  )  )  )  . asImmutable (  )  ;", "dependencyAttributes    =    resolveState . getAttributesFactory (  )  . safeConcat ( attributes ,    dependencyAttributes )  ;", "}", "}    catch    ( AttributeMergingException   e )     {", "return    . throwMergeError ( selectors ,    e )  ;", "}", "return   dependencyAttributes ;", "}", "METHOD_END"], "methodName": ["appendAttributes"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.EdgeState"}, {"methodBody": ["METHOD_START", "{", "ComponentState   targetComponent    =    getTargetComponent (  )  ;", "if    ( targetComponent    =  =    null )     {", "return ;", "}", "calculateTargetConfigurations ( targetComponent )  ;", "for    ( Nod   targetConfiguration    :    targetNodes )     {", "targetConfiguration . addIncomingEdge ( this )  ;", "}", "if    (  !  ( targetNodes . isEmpty (  )  )  )     {", "selector . getTargetModule (  )  . removeUnattachedDependency ( this )  ;", "}", "}", "METHOD_END"], "methodName": ["attachToTargetConfigurations"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.EdgeState"}, {"methodBody": ["METHOD_START", "{", "targetNodes . clear (  )  ;", "targetNodeSelectionFailure    =    null ;", "ComponentResolveMetadata   targetModuleVersion    =    targetComponent . getMetadata (  )  ;", "if    ( targetModuleVersion    =  =    null )     {", "return ;", "}", "List < ConfigurationMetadata >    targetConfigurations ;", "try    {", "ImmutableAttributes   attributes    =    State . getRoot (  )  . getMetadata (  )  . getAttributes (  )  ;", "attributes    =    State . getAttributesFactory (  )  . concat ( attributes ,    getAttributes (  )  )  ;", "targetConfigurations    =    dependencyMetadata . selectConfigurations ( attributes ,    targetModuleVersion ,    State . getAttributesSchema (  )  )  ;", "}    catch    ( Throwable   t )     {", "targetNodeSelectionFailure    =    new   ModuleVersionResolveException ( dependencyState . getRequested (  )  ,    t )  ;", "return ;", "}", "for    ( ConfigurationMetadata   targetConfiguration    :    targetConfigurations )     {", "NodeState   targetNodeState    =    State . getNode ( targetComponent ,    targetConfiguration )  ;", "this . targetNodes . add ( targetNodeState )  ;", "}", "}", "METHOD_END"], "methodName": ["calculateTargetConfigurations"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.EdgeState"}, {"methodBody": ["METHOD_START", "{", "DependencyMetadata   dependencyMetadata    =    state . getDependencyMetadata (  )  ;", "StringB   sb    =    new   StringB (  ( dependencyMetadata . isPending (  )     ?     \" Constraint    '  \"     :     \" Dependency    '  \"  )  )  ;", "sb . append ( state . getRequested (  )  )  . append (  \"  '    wants   value    \"  )  ;", "sb . append (  \"  '  \"  )  . append (  (  ( ModuleComponentSelector )     ( dependencyMetadata . getSelector (  )  )  )  . getAttributes (  )  . getAttribute ( attribute )  )  . append (  \"  '  \"  )  ;", "return   sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["formatSelector"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.EdgeState"}, {"methodBody": ["METHOD_START", "{", "ImmutableAttributes   dependencyAttributes    =    ImmutableAttributes . EMPTY ;", "ModuleRState   module    =    selector . getTargetModule (  )  ;", "List < SelectorState >    selectors    =    module . getSelectors (  )  ;", "dependencyAttributes    =    mergeSelectorAttributes ( dependencyAttributes ,    selectors )  ;", "return   dependencyAttributes ;", "}", "METHOD_END"], "methodName": ["getAttributes"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.EdgeState"}, {"methodBody": ["METHOD_START", "{", "return   dependencyMetadata ;", "}", "METHOD_END"], "methodName": ["getDependencyMetadata"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.EdgeState"}, {"methodBody": ["METHOD_START", "{", "return   selector . getTargetModule (  )  . getSelected (  )  ;", "}", "METHOD_END"], "methodName": ["getSelectedComponent"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.EdgeState"}, {"methodBody": ["METHOD_START", "{", "if    (  (  !  ( selector . isResolved (  )  )  )     |  |     (  ( selector . getFailure (  )  )     !  =    null )  )     {", "return   null ;", "}", "return   getSelectedComponent (  )  ;", "}", "METHOD_END"], "methodName": ["getTargetComponent"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.EdgeState"}, {"methodBody": ["METHOD_START", "{", "return    ( from . isTransitive (  )  )     &  &     ( dependencyMetadata . isTransitive (  )  )  ;", "}", "METHOD_END"], "methodName": ["isTransitive"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.EdgeState"}, {"methodBody": ["METHOD_START", "{", "for    ( SelectorState   selectorState    :    selectors )     {", "dependencyAttributes    =    appendAttributes ( dependencyAttributes ,    selectors ,    selectorState )  ;", "}", "return   dependencyAttributes ;", "}", "METHOD_END"], "methodName": ["mergeSelectorAttributes"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.EdgeState"}, {"methodBody": ["METHOD_START", "{", "for    ( NodeState   targetConfiguration    :    targetNodes )     {", "targetConfiguration . removeIncomingEdge ( this )  ;", "}", "targetNodes . clear (  )  ;", "targetNodeSelectionFailure    =    null ;", "}", "METHOD_END"], "methodName": ["removeFromTargetConfigurations"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.EdgeState"}, {"methodBody": ["METHOD_START", "{", "removeFromTargetConfigurations (  )  ;", "attachToTargetConfigurations (  )  ;", "}", "METHOD_END"], "methodName": ["restart"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.EdgeState"}, {"methodBody": ["METHOD_START", "{", "TreeFormatter   error    =    new   TreeFormatter (  )  ;", "error . node (  \" Cannot   choose   between    \"  )  ;", "boolean   first    =    true ;", "for    ( SelectorState   state    :    selectors )     {", "if    (  ! first )     {", "error . append (  \"    and    \"  )  ;", "}", "first    =    false ;", "error . append (  \"  '  \"  )  ;", "error . append ( state . getRequested (  )  . toString (  )  )  ;", "error . append (  \"  '  \"  )  ;", "}", "error . append (  \"    because   they   require   a   different   value   for   attribute    '  \"  )  ;", "Attribute <  ?  >    attribute    =    e . getAttribute (  )  ;", "error . append ( attribute . toString (  )  )  ;", "error . append (  \"  '  \"  )  ;", "error . startChildren (  )  ;", "for    ( SelectorState   state    :    selectors )     {", "error . node (  . formatSelector ( state ,    attribute )  )  ;", "}", "error . endChildren (  )  ;", "throw   new   IllegalStateException ( error . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["throwMergeError"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.EdgeState"}, {"methodBody": ["METHOD_START", "{", "selectors . add ( selector )  ;", "}", "METHOD_END"], "methodName": ["addSelector"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ModuleResolveState"}, {"methodBody": ["METHOD_START", "{", "unattachedDependencies . add ( edge )  ;", "}", "METHOD_END"], "methodName": ["addUnattachedDependency"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ModuleResolveState"}, {"methodBody": ["METHOD_START", "{", "boolean   allCandidates    =    true ;", "for    ( Component   value    :    values )     {", "if    (  !  ( value . isCandidateForConflictResolution (  )  )  )     {", "allCandidates    =    false ;", "break ;", "}", "}", "return   allCandidates ;", "}", "METHOD_END"], "methodName": ["areAllCandidatesForSelection"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ModuleResolveState"}, {"methodBody": ["METHOD_START", "{", "assert    ( this . selected )     !  =    null ;", "assert   newSelection    !  =    null ;", "assert    ( this . selected )     !  =    newSelection ;", "assert    ( newSelection . get (  )  )     =  =     ( this )  ;", "selected . removeOutgoingEdges (  )  ;", "this . selected    =    newSelection ;", "doRestart ( newSelection )  ;", "}", "METHOD_END"], "methodName": ["changeSelection"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ModuleResolveState"}, {"methodBody": ["METHOD_START", "{", "if    (  ( selected )     !  =    null )     {", "selected . removeOutgoingEdges (  )  ;", "}", "for    ( Component   version    :    versions . values (  )  )     {", "if    ( version . isSelected (  )  )     {", "version . makeSelectable (  )  ;", "}", "}", "selected    =    null ;", "}", "METHOD_END"], "methodName": ["clearSelection"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ModuleResolveState"}, {"methodBody": ["METHOD_START", "{", "selectComponentAndEvictOthers ( selected )  ;", "for    ( Component   version    :    versions . values (  )  )     {", "version . restartIncomingEdges ( selected )  ;", "}", "for    ( Selector   selector    :    selectors )     {", "selector . overrideSelection ( selected )  ;", "}", "if    (  !  ( unattachedDependencies . isEmpty (  )  )  )     {", "restartUnattachedDependencies ( selected )  ;", "}", "}", "METHOD_END"], "methodName": ["doRestart"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ModuleResolveState"}, {"methodBody": ["METHOD_START", "{", "return   selected ;", "}", "METHOD_END"], "methodName": ["getSelected"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ModuleResolveState"}, {"methodBody": ["METHOD_START", "{", "return   selectors ;", "}", "METHOD_END"], "methodName": ["getSelectors"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ModuleResolveState"}, {"methodBody": ["METHOD_START", "{", "ComponentState   moduleRevision    =    versions . get ( id )  ;", "if    ( moduleRevision    =  =    null )     {", "moduleRevision    =    new   ComponentState ( idGenerator . generateId (  )  ,    this ,    id ,    componentIdentifier ,    metaDataResolver ,    variantNameBuilder )  ;", "versions . put ( id ,    moduleRevision )  ;", "}", "return   moduleRevision ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ModuleResolveState"}, {"methodBody": ["METHOD_START", "{", "unattachedDependencies . remove ( edge )  ;", "}", "METHOD_END"], "methodName": ["removeUnattachedDependency"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ModuleResolveState"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . selected )     !  =    null )     {", "clearSelection (  )  ;", "}", "ast    ( this . selected )     =  =    null ;", "ast   selected    !  =    null ;", "this . selected    =    selected ;", "doRestart ( selected )  ;", "}", "METHOD_END"], "methodName": ["restart"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ModuleResolveState"}, {"methodBody": ["METHOD_START", "{", "if    (  ( unattachedDependencies . size (  )  )     =  =     1  )     {", "unattachedDependencies . get (  0  )  . restart ( selected )  ;", "} else    {", "for    ( Edg   dependency    :    new   ArrayList < Edg >  ( unattachedDependencies )  )     {", "dependency . restart ( selected )  ;", "}", "}", "unattachedDependencies . clear (  )  ;", "}", "METHOD_END"], "methodName": ["restartUnattachedDependencies"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ModuleResolveState"}, {"methodBody": ["METHOD_START", "{", "assert    ( this . selected )     =  =    null ;", "this . selected    =    selected ;", "selectComponentAndEvictOthers ( selected )  ;", "}", "METHOD_END"], "methodName": ["select"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ModuleResolveState"}, {"methodBody": ["METHOD_START", "{", "for    ( ComponentState   version    :    versions . values (  )  )     {", "version . evict (  )  ;", "}", "selected . select (  )  ;", "}", "METHOD_END"], "methodName": ["selectComponentAndEvictOthers"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ModuleResolveState"}, {"methodBody": ["METHOD_START", "{", "incomingEdges . add ( dependencyEdge )  ;", "State . onMoreSelected ( this )  ;", "}", "METHOD_END"], "methodName": ["addIncomingEdge"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.NodeState"}, {"methodBody": ["METHOD_START", "{", "removeOutgoingEdges (  )  ;", "}", "METHOD_END"], "methodName": ["deselect"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.NodeState"}, {"methodBody": ["METHOD_START", "{", "return   resolveState . getAttributesFactory (  )  ;", "}", "METHOD_END"], "methodName": ["getAttributesFactory"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.NodeState"}, {"methodBody": ["METHOD_START", "{", "return   component ;", "}", "METHOD_END"], "methodName": ["getComponent"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.NodeState"}, {"methodBody": ["METHOD_START", "{", "ModuleExclusions   moduleExclusions    =    resolveState . getModuleExclusions (  )  ;", "ModuleExclusion   nodeExclusions    =    moduleExclusions . excludeAny ( metaData . getExcludes (  )  )  ;", "if    ( incomingEdges . isEmpty (  )  )     {", "return   nodeExclusions ;", "}", "ModuleExclusion   edgeExclusions    =    incomingEdges . get (  0  )  . getExclusions (  )  ;", "for    ( int   i    =     1  ;    i    <     ( incomingEdges . size (  )  )  ;    i +  +  )     {", "EdgeState   dependencyEdge    =    incomingEdges . get ( i )  ;", "edgeExclusions    =    moduleExclusions . union ( edgeExclusions ,    dependencyEdge . getExclusions (  )  )  ;", "}", "return   moduleExclusions . intersect ( edgeExclusions ,    nodeExclusions )  ;", "}", "METHOD_END"], "methodName": ["getModuleResolutionFilter"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.NodeState"}, {"methodBody": ["METHOD_START", "{", "if    ( isRoot (  )  )     {", "return   incomingEdges ;", "}", "for    ( EdgeState   incomingEdge    :    incomingEdges )     {", "if    (  !  ( incomingEdge . isTransitive (  )  )  )     {", "return   CollectionUtils . filter ( incomingEdges ,     . TRANSITIVE _ EDGES )  ;", "}", "}", "return   incomingEdges ;", "}", "METHOD_END"], "methodName": ["getTransitiveIncomingEdges"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.NodeState"}, {"methodBody": ["METHOD_START", "{", "DependencyMetadata   dependency    =    dependencyState . getDependency (  )  ;", "if    (  !  ( resolveState . getEdgeFilter (  )  . isSatisfiedBy ( dependency )  )  )     {", ". LOGGER . debug (  \"  {  }    is   filtered .  \"  ,    dependency )  ;", "return   true ;", "}", "if    ( selector    =  =     ( ModuleExclusions . excludeNone (  )  )  )     {", "return   false ;", "}", "ModuleIdentifier   targetModuleId    =    dependencyState . getModuleIdentifier (  )  ;", "if    ( selector . excludeModule ( targetModuleId )  )     {", ". LOGGER . debug (  \"  {  }    is   excluded   from    {  }  .  \"  ,    targetModuleId ,    this )  ;", "return   true ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isExcluded"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.NodeState"}, {"methodBody": ["METHOD_START", "{", "return    !  ( incomingEdges . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["isSelected"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.NodeState"}, {"methodBody": ["METHOD_START", "{", "return   metaData . isTransitive (  )  ;", "}", "METHOD_END"], "methodName": ["isTransitive"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.NodeState"}, {"methodBody": ["METHOD_START", "{", "DependencySubstitutionApplicator . SubstitutionResult   substitutionResult    =    resolveState . getDependencySubstitutionApplicator (  )  . apply ( dependencyState . getDependency (  )  )  ;", "if    ( substitutionResult . hasFailure (  )  )     {", "dependencyState . failure    =    new   ModuleVersionResolveException ( dependencyState . getRequested (  )  ,    substitutionResult . getFailure (  )  )  ;", "return   dependencyState ;", "}", "DependencySubstitutionInternal   details    =    substitutionResult . getResult (  )  ;", "if    (  ( details    !  =    null )     &  &     ( details . isUpdated (  )  )  )     {", "return   dependencyState . withTarget ( details . getTarget (  )  ,    details . getSelectionDescription (  )  )  ;", "}", "return   dependencyState ;", "}", "METHOD_END"], "methodName": ["maybeSubstitute"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.NodeState"}, {"methodBody": ["METHOD_START", "{", "incomingEdges . remove ( dependencyEdge )  ;", "State . onFewerSelected ( this )  ;", "}", "METHOD_END"], "methodName": ["removeIncomingEdge"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.NodeState"}, {"methodBody": ["METHOD_START", "{", "for    ( EdgeState   outgoingDependency    :    outgoingEdges )     {", "outgoingDependency . removeFromTargetConfigurations (  )  ;", "}", "outgoingEdges . clear (  )  ;", "previousTraversalExclusions    =    null ;", "}", "METHOD_END"], "methodName": ["removeOutgoingEdges"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.NodeState"}, {"methodBody": ["METHOD_START", "{", "previousTraversalExclusions    =    null ;", "outgoingEdges . clear (  )  ;", "State . onMoreSelected ( this )  ;", "}", "METHOD_END"], "methodName": ["resetSelectionState"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.NodeState"}, {"methodBody": ["METHOD_START", "{", "if    (  ( component )     =  =    selected )     {", "State . onMoreSelected ( this )  ;", "} else    {", "if    (  !  ( incomingEdges . isEmpty (  )  )  )     {", "restartIncomingEdges ( selected )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["restart"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.NodeState"}, {"methodBody": ["METHOD_START", "{", "if    (  ( incomingEdges . size (  )  )     =  =     1  )     {", "incomingEdges . iterator (  )  . next (  )  . restart ( selected )  ;", "} else    {", "for    ( Edg   dependency    :    new   ArrayList < Edg >  ( incomingEdges )  )     {", "dependency . restart ( selected )  ;", "}", "}", "incomingEdges . clear (  )  ;", "}", "METHOD_END"], "methodName": ["restartIncomingEdges"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.NodeState"}, {"methodBody": ["METHOD_START", "{", "PendingDependenciesHandler . Visitor   pendingDepsVisitor    =    pendingDependenciesHandler . start (  )  ;", "try    {", "for    ( DependencyMetadata   dependency    :    metaData . getDependencies (  )  )     {", "DependencyState   dependencyState    =    new   DependencyState ( dependency ,    State . getComponentSelectorConverter (  )  )  ;", "if    ( isExcluded ( resolutionFilter ,    dependencyState )  )     {", "continue ;", "}", "dependencyState    =    maybeSubstitute ( dependencyState )  ;", "if    (  !  ( pendingDepsVisitor . maybeAddAsPendingDependency ( this ,    dependencyState )  )  )     {", "EdgeState   dependencyEdge    =    new   EdgeState ( this ,    dependencyState ,    resolutionFilter ,    State )  ;", "outgoingEdges . add ( dependencyEdge )  ;", "discoveredEdges . add ( dependencyEdge )  ;", "}", "}", "previousTraversalExclusions    =    resolutionFilter ;", "}    finally    {", "pendingDepsVisitor . complete (  )  ;", "}", "}", "METHOD_END"], "methodName": ["visitDependencies"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.NodeState"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( component . isSelected (  )  )  )     {", ". LOGGER . debug (  \" version   for    {  }    is   not   selected .    ignoring .  \"  ,    this )  ;", "return ;", "}", "boolean   hasIncomingEdges    =     !  ( incomingEdges . isEmpty (  )  )  ;", "List < EdgeState >    transitiveIncoming    =    getTransitiveIncomingEdges (  )  ;", "if    (  ( transitiveIncoming . isEmpty (  )  )     &  &     (  !  ( isRoot (  )  )  )  )     {", "if    (  ( previousTraversalExclusions )     !  =    null )     {", "removeOutgoingEdges (  )  ;", "}", "if    ( hasIncomingEdges )     {", ". LOGGER . debug (  \"  {  }    has   no   transitive   incoming   edges .    ignoring   outgoing   edges .  \"  ,    this )  ;", "} else    {", ". LOGGER . debug (  \"  {  }    has   no   incoming   edges .    ignoring .  \"  ,    this )  ;", "}", "return ;", "}", "ModuleExclusion   resolutionFilter    =    getModuleResolutionFilter ( transitiveIncoming )  ;", "if    (  (  ( previousTraversalExclusions )     !  =    null )     &  &     ( previousTraversalExclusions . excludesSameModulesAs ( resolutionFilter )  )  )     {", ". LOGGER . debug (  \" Changed   edges   for    {  }    selects   same   versions   as   previous   traversal .    ignoring \"  ,    this )  ;", "previousTraversalExclusions    =    resolutionFilter ;", "return ;", "}", "if    (  ( previousTraversalExclusions )     !  =    null )     {", "removeOutgoingEdges (  )  ;", "}", "visitDependencies ( resolutionFilter ,    pendingDependenciesHandler ,    discoveredEdges )  ;", "}", "METHOD_END"], "methodName": ["visitOutgoingDependencies"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.NodeState"}, {"methodBody": ["METHOD_START", "{", "if    ( noLongerPending )     {", "throw   new   IllegalStateException (  \" Cannot   add   a   pending   node   for   a   dy   which   is   not   pending \"  )  ;", "}", "affectedComponents . add ( state )  ;", "}", "METHOD_END"], "methodName": ["addNode"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.PendingDependencies"}, {"methodBody": ["METHOD_START", "{", "return    !  ( noLongerPending )  ;", "}", "METHOD_END"], "methodName": ["isPending"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.PendingDependencies"}, {"methodBody": ["METHOD_START", "{", "return   new   PendingDependencies ( Collections .  < NodeState > emptySet (  )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["notPending"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.PendingDependencies"}, {"methodBody": ["METHOD_START", "{", "return   new   PendingDependencies ( Sets .  < NodeState > newLinkedHashSet (  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["pending"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.PendingDependencies"}, {"methodBody": ["METHOD_START", "{", "noLongerPending    =    true ;", "for    ( NodeState   affectedComponent    :    affectedComponents )     {", "affectedComponent . resetSelectionState (  )  ;", "}", "}", "METHOD_END"], "methodName": ["turnIntoHardDependencies"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.PendingDependencies"}, {"methodBody": ["METHOD_START", "{", "PendingDependencies   pendingDependencies    =    this . pendingDependencies . get ( module )  ;", "if    ( pendingDependencies    =  =    null )     {", "pendingDependencies    =    PendingDependencies . pending (  )  ;", "this . pendingDependencies . put ( module ,    pendingDependencies )  ;", "}", "return   pendingDependencies ;", "}", "METHOD_END"], "methodName": ["getPendingDependencies"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.PendingDependenciesState"}, {"methodBody": ["METHOD_START", "{", "return   pendingDependencies . put ( module ,    PendingDependenciesState . NOT _ PENDING )  ;", "}", "METHOD_END"], "methodName": ["notPending"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.PendingDependenciesState"}, {"methodBody": ["METHOD_START", "{", "boolean   hasRejectAll    =    false ;", "for    ( SelectorState   candidate    :    module . getSelectors (  )  )     {", "hasRejectAll    |  =     . isRejectAll ( candidate . getVersionConstraint (  )  )  ;", "}", "StringBuilder   sb    =    new   StringBuilder (  )  ;", "if    ( hasRejectAll )     {", "sb . append (  \" Module    '  \"  )  . append ( module . getId (  )  )  . append (  \"  \\  '    has   been   rejected :  \\ n \"  )  ;", "} else    {", "sb . append (  \" Cannot   find   a   version   of    '  \"  )  . append ( module . getId (  )  )  . append (  \"  \\  '    that   satisfies   the   version   constraints :     \\ n \"  )  ;", "}", "for    ( EdgeState   incomingEdge    :    getIncomingEdges ( module )  )     {", "SelectorState   selector    =    incomingEdge . getSelector (  )  ;", "for    ( String   path    :     . pathTo ( incomingEdge )  )     {", "sb . append (  \"           \"  )  . append ( path )  ;", "sb . append (  \"     \"  )  . append (  . renderVersionConstraint ( selector . getVersionConstraint (  )  )  )  ;", ". renderReason ( sb ,    selector )  ;", "sb . append (  \"  \\ n \"  )  ;", "}", "}", "return   sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["buildFailureMessage"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.RejectedModuleMessageBuilder"}, {"methodBody": ["METHOD_START", "{", "Set < EdgeState >    incoming    =    Sets . newLinkedHashSet (  )  ;", "for    ( NodeState   nodeState    :    m . getSelected (  )  . getNodes (  )  )     {", "incoming . addAll ( nodeState . getIncomingEdges (  )  )  ;", "}", "return   incoming ;", "}", "METHOD_END"], "methodName": ["getIncomingEdges"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.RejectedModuleMessageBuilder"}, {"methodBody": ["METHOD_START", "{", "for    ( String   version    :    rejectedVersions )     {", "if    (  \"  +  \"  . equals ( version )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["hasMatchAllSelector"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.RejectedModuleMessageBuilder"}, {"methodBody": ["METHOD_START", "{", "return    (  \"  \"  . equals ( constraint . getPreferredVersion (  )  )  )     &  &     ( RejectedModuleMessageBuilder . hasMatchAllSelector ( constraint . getRejectedVersions (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["isRejectAll"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.RejectedModuleMessageBuilder"}, {"methodBody": ["METHOD_START", "{", "List < List < EdgeState >  >    acc    =    Lists . newArrayListWithExpectedSize (  1  )  ;", ". pathTo ( edge ,    Lists .  < EdgeState > newArrayList (  )  ,    acc ,    Sets .  < NodeState > newHashSet (  )  )  ;", "List < String >    result    =    Lists . newArrayListWithCapacity ( acc . size (  )  )  ;", "for    ( List < EdgeState >    path    :    acc )     {", "EdgeState   target    =    Iterators . getLast ( path . iterator (  )  )  ;", "StringBuilder   sb    =    new   StringBuilder (  )  ;", "if    ( target . getSelector (  )  . getDependencyMetadata (  )  . isPending (  )  )     {", "sb . append (  \" Constraint   path    \"  )  ;", "} else    {", "sb . append (  \" Dependency   path    \"  )  ;", "}", "for    ( EdgeState   e    :    path )     {", "ModuleVersionIdentifier   id    =    e . getFrom (  )  . getResolvedConfigurationId (  )  . getId (  )  ;", "sb . append (  '  \\  '  '  )  . append ( id )  . append (  '  \\  '  '  )  ;", "sb . append (  \"     -  -  >     \"  )  ;", "}", "ModuleIdentifier   moduleId    =    edge . getSelector (  )  . getTargetModule (  )  . getId (  )  ;", "sb . append (  '  \\  '  '  )  . append ( moduleId . getGroup (  )  )  . append (  '  :  '  )  . append ( moduleId . getName (  )  )  . append (  '  \\  '  '  )  ;", "result . add ( sb . toString (  )  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["pathTo"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.RejectedModuleMessageBuilder"}, {"methodBody": ["METHOD_START", "{", "if    ( alreadySeen . add ( component . getFrom (  )  )  )     {", "currentPath . add (  0  ,    component )  ;", "for    ( EdgeState   dependent    :    component . getFrom (  )  . getIncomingEdges (  )  )     {", "List < EdgeState >    otherPath    =    Lists . newArrayList ( currentPath )  ;", ". pathTo ( dependent ,    otherPath ,    accumulator ,    alreadySeen )  ;", "}", "if    ( component . getFrom (  )  . isRoot (  )  )     {", "accumulator . add ( currentPath )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["pathTo"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.RejectedModuleMessageBuilder"}, {"methodBody": ["METHOD_START", "{", "ComponentSelectionReasonInternal   selectionReason    =    selector . getSelectionReason (  )  ;", "if    ( selectionReason . hasCustomDescriptions (  )  )     {", "sb . append (  \"    because   of   the   following   reason \"  )  ;", "List < String >    reasons    =    Lists . newArrayListWithExpectedSize (  1  )  ;", "for    ( ComponentSelectionDescriptor   componentSelectionDescriptor    :    selectionReason . getDescriptions (  )  )     {", "ComponentSelectionDescriptorInternal   next    =     (  ( ComponentSelectionDescriptorInternal )     ( componentSelectionDescriptor )  )  ;", "if    ( next . hasCustomDescription (  )  )     {", "reasons . add ( next . getDescription (  )  )  ;", "}", "}", "if    (  ( reasons . size (  )  )     =  =     1  )     {", "sb . append (  \"  :     \"  )  . append ( reasons . get (  0  )  )  ;", "} else    {", "sb . append (  \" s :     \"  )  ;", "Joiner . on (  \"  ,     \"  )  . appendTo ( sb ,    reasons )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["renderReason"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.RejectedModuleMessageBuilder"}, {"methodBody": ["METHOD_START", "{", "if    ( RejectedModuleMessageBuilder . isRejectAll ( constraint )  )     {", "return    \" rejects   all   versions \"  ;", "}", "VersionSelector   preferredSelector    =    constraint . getPreferredSelector (  )  ;", "VersionSelector   rejectedSelector    =    constraint . getRejectedSelector (  )  ;", "StringBuilder   sb    =    new   StringBuilder (  \" prefers    \"  )  ;", "sb . append (  '  \\  '  '  )  ;", "sb . append ( preferredSelector . getSelector (  )  )  ;", "sb . append (  '  \\  '  '  )  ;", "if    ( rejectedSelector    !  =    null )     {", "sb . append (  \"  ,    rejects    \"  )  ;", "if    ( rejectedSelector   instanceof   CompositeVersionSelector )     {", "sb . append (  \" any   of    \\  \"  \"  )  ;", "int   i    =     0  ;", "for    ( VersionSelector   selector    :     (  ( CompositeVersionSelector )     ( rejectedSelector )  )  . getSelectors (  )  )     {", "if    (  ( i +  +  )     >     0  )     {", "sb . append (  \"  ,     \"  )  ;", "}", "sb . append (  '  \\  '  '  )  ;", "sb . append ( selector . getSelector (  )  )  ;", "sb . append (  '  \\  '  '  )  ;", "}", "sb . append (  \"  \\  \"  \"  )  ;", "} else    {", "sb . append (  '  \\  '  '  )  ;", "sb . append ( rejectedSelector . getSelector (  )  )  ;", "sb . append (  '  \\  '  '  )  ;", "}", "}", "return   sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["renderVersionConstraint"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.RejectedModuleMessageBuilder"}, {"methodBody": ["METHOD_START", "{", "final   ComponentState   selected    =    result . getSelected (  )  ;", "result . withParticipatingModules ( new   Action < ModuleIdentifier >  (  )     {", "public   void   execute ( ModuleIdentifier   moduleIdentifier )     {", "resolveState . getModule ( moduleIdentifier )  . restart ( selected )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ReplaceSelectionWithConflictResultAction"}, {"methodBody": ["METHOD_START", "{", "return   attributesFactory ;", "}", "METHOD_END"], "methodName": ["getAttributesFactory"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ResolveState"}, {"methodBody": ["METHOD_START", "{", "return   attributesSchema ;", "}", "METHOD_END"], "methodName": ["getAttributesSchema"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ResolveState"}, {"methodBody": ["METHOD_START", "{", "return   componentSelectorConverter ;", "}", "METHOD_END"], "methodName": ["getComponentSelectorConverter"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ResolveState"}, {"methodBody": ["METHOD_START", "{", "return   dependencySubstitutionApplicator ;", "}", "METHOD_END"], "methodName": ["getDependencySubstitutionApplicator"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ResolveState"}, {"methodBody": ["METHOD_START", "{", "return   deselectVersionAction ;", "}", "METHOD_END"], "methodName": ["getDeselectVersionAction"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ResolveState"}, {"methodBody": ["METHOD_START", "{", "return   edgeFilter ;", "}", "METHOD_END"], "methodName": ["getEdgeFilter"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ResolveState"}, {"methodBody": ["METHOD_START", "{", "ModuleResolveState   module    =    modules . get ( id )  ;", "if    ( module    =  =    null )     {", "module    =    new   ModuleResolveState ( idGenerator ,    id ,    metaDataResolver ,    variantNameBuilder )  ;", "modules . put ( id ,    module )  ;", "}", "return   module ;", "}", "METHOD_END"], "methodName": ["getModule"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ResolveState"}, {"methodBody": ["METHOD_START", "{", "return   moduleExclusions ;", "}", "METHOD_END"], "methodName": ["getModuleExclusions"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ResolveState"}, {"methodBody": ["METHOD_START", "{", "return   moduleReplacementsData ;", "}", "METHOD_END"], "methodName": ["getModuleReplacementsData"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ResolveState"}, {"methodBody": ["METHOD_START", "{", "return   modules . values (  )  ;", "}", "METHOD_END"], "methodName": ["getModules"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ResolveState"}, {"methodBody": ["METHOD_START", "{", "ResolvedConfigurationIdentifier   id    =    new   ResolvedConfigurationIdentifier ( module . getId (  )  ,    configurationMetadata . getName (  )  )  ;", "NodeState   configuration    =    nodes . get ( id )  ;", "if    ( configuration    =  =    null )     {", "configuration    =    new   NodeState ( idGenerator . generateId (  )  ,    id ,    module ,    this ,    configurationMetadata )  ;", "nodes . put ( id ,    configuration )  ;", "}", "return   configuration ;", "}", "METHOD_END"], "methodName": ["getNode"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ResolveState"}, {"methodBody": ["METHOD_START", "{", "return   nodes . values (  )  ;", "}", "METHOD_END"], "methodName": ["getNodes"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ResolveState"}, {"methodBody": ["METHOD_START", "{", "return   replaceSelectionWithConflictResultAction ;", "}", "METHOD_END"], "methodName": ["getReplaceSelectionWithConflictResultAction"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ResolveState"}, {"methodBody": ["METHOD_START", "{", "return   root ;", "}", "METHOD_END"], "methodName": ["getRoot"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ResolveState"}, {"methodBody": ["METHOD_START", "{", "ComponentSelector   requested    =    dependencyState . getRequested (  )  ;", "SelectorState   r    =    selectors . get ( requested )  ;", "if    ( r    =  =    null )     {", "r    =    new   SelectorState ( idGenerator . generateId (  )  ,    dependencyState ,    idResolver ,    this ,    moduleIdentifier )  ;", "selectors . put ( requested ,    r )  ;", "}", "return   r ;", "}", "METHOD_END"], "methodName": ["getSelector"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ResolveState"}, {"methodBody": ["METHOD_START", "{", "return   selectors . values (  )  ;", "}", "METHOD_END"], "methodName": ["getSelectors"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ResolveState"}, {"methodBody": ["METHOD_START", "{", "if    ( queued . add ( node )  )     {", "queuddFirst ( node )  ;", "}", "}", "METHOD_END"], "methodName": ["onFewerSelected"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ResolveState"}, {"methodBody": ["METHOD_START", "{", "if    ( queued . add ( node )  )     {", "queuddLast ( node )  ;", "}", "}", "METHOD_END"], "methodName": ["onMoreSelected"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ResolveState"}, {"methodBody": ["METHOD_START", "{", "return   queue . isEmpty (  )     ?    null    :    queue . getFirst (  )  ;", "}", "METHOD_END"], "methodName": ["peek"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ResolveState"}, {"methodBody": ["METHOD_START", "{", "NodeState   next    =    queue . removeFirst (  )  ;", "queued . remove ( next )  ;", "return   next ;", "}", "METHOD_END"], "methodName": ["pop"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.ResolveState"}, {"methodBody": ["METHOD_START", "{", "ComponentSelectionDescriptorInternal   dependencyDescriptor    =     ( dependencyMetadata . isPending (  )  )     ?    VersionSelectionReasons . CONSTRAINT    :    VersionSelectionReasons . REQUESTED ;", "if    (  ( dependencyMetadata . getReason (  )  )     !  =    null )     {", "dependencyDescriptor    =    dependencyDescriptor . withReason ( dependencyMetadata . getReason (  )  )  ;", "}", "selectionReason . addCause ( dependencyDescriptor )  ;", "if    (  ( dependencyState . getRuleDescriptor (  )  )     !  =    null )     {", "selectionReason . addCause ( dependencyState . getRuleDescriptor (  )  )  ;", "}", "return   selectionReason ;", "}", "METHOD_END"], "methodName": ["addReasonsForSelector"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.SelectorState"}, {"methodBody": ["METHOD_START", "{", "return   dependencyMetadata ;", "}", "METHOD_END"], "methodName": ["getDependencyMetadata"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.SelectorState"}, {"methodBody": ["METHOD_START", "{", "return   failure ;", "}", "METHOD_END"], "methodName": ["getFailure"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.SelectorState"}, {"methodBody": ["METHOD_START", "{", "return   addReasonsForSelector ( VersionSelectionReasons . empty (  )  )  ;", "}", "METHOD_END"], "methodName": ["getSelectionReason"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.SelectorState"}, {"methodBody": ["METHOD_START", "{", "return   targetModule ;", "}", "METHOD_END"], "methodName": ["getTargetModule"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.SelectorState"}, {"methodBody": ["METHOD_START", "{", "return   versionConstraint ;", "}", "METHOD_END"], "methodName": ["getVersionConstraint"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.SelectorState"}, {"methodBody": ["METHOD_START", "{", "return   resolved ;", "}", "METHOD_END"], "methodName": ["isResolved"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.SelectorState"}, {"methodBody": ["METHOD_START", "{", "this . resolved    =    true ;", "this . targetModule    =    selected . getModule (  )  ;", "}", "METHOD_END"], "methodName": ["overrideSelection"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.SelectorState"}, {"methodBody": ["METHOD_START", "{", "if    (  ( idResolveResult )     =  =    null )     {", "return   true ;", "}", "if    (  ( idResolveResult . getFailure (  )  )     !  =    null )     {", "return   false ;", "}", "if    ( idResolveResult . isRejected (  )  )     {", "return   false ;", "}", "if    (  ( allRejects    =  =    null )     |  |     (  !  ( allRejects . accept ( idResolveResult . getModuleVersionId (  )  . getVersion (  )  )  )  )  )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["requiresResolve"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.SelectorState"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( requiresResolve ( allRejects )  )  )     {", "return   idResolveResult ;", "}", "BuildableComponentIdResolveResult   idResolveResult    =    new   DefaultBuildableComponentIdResolveResult (  )  ;", "if    (  ( dependencyState . failure )     !  =    null )     {", "idResolveResult . failed ( dependencyState . failure )  ;", "} else    {", "ResolvedVersionConstraint   mergedConstraint    =     (  ( versionConstraint )     =  =    null )     ?    null    :    new   DefaultResolvedVersionConstraint ( versionConstraint . getPreferred (  )  ,    allRejects )  ;", "resolver . resolve ( dependencyMetadata ,    mergedConstraint ,    idResolveResult )  ;", "}", "if    (  ( idResolveResult . getFailure (  )  )     !  =    null )     {", "failure    =    idResolveResult . getFailure (  )  ;", "}", "this . idResolveResult    =    idResolveResult ;", "this . resolved    =    true ;", "return   idResolveResult ;", "}", "METHOD_END"], "methodName": ["resolve"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.SelectorState"}, {"methodBody": ["METHOD_START", "{", "if    ( selector   instanceof   ModuleComponentSelector )     {", "return   new   DefaultResolvedVersionConstraint (  (  ( ModuleComponentSelector )     ( selector )  )  . getVersionConstraint (  )  ,     . VERSION _ SELECTOR _ SCHEME )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["resolveVersionConstraint"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.SelectorState"}, {"methodBody": ["METHOD_START", "{", "if    ( baseName    =  =    null )     {", "return   part ;", "}", "Pair < String ,    String >    key    =    Pair . of ( baseName ,    part )  ;", "String   name    =    names . get ( key )  ;", "if    ( name    =  =    null )     {", "name    =     ( baseName    +     \"  +  \"  )     +    part ;", "names . put ( key ,    name )  ;", "}", "return   name ;", "}", "METHOD_END"], "methodName": ["getVariantName"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.builder.VariantNameBuilder"}, {"methodBody": ["METHOD_START", "{", "resolvers . add (  0  ,    conflictResolver )  ;", "}", "METHOD_END"], "methodName": ["addFirst"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.conflicts.CompositeConflictResolver"}, {"methodBody": ["METHOD_START", "{", "return   conflicts . size (  )  ;", "}", "METHOD_END"], "methodName": ["getSize"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.conflicts.ConflictContainer"}, {"methodBody": ["METHOD_START", "{", "return   conflicts . isEmpty (  )  ;", "}", "METHOD_END"], "methodName": ["isEmpty"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.conflicts.ConflictContainer"}, {"methodBody": ["METHOD_START", "{", "if    ( candidates . isEmpty (  )  )     {", "return   null ;", "}", "elements . put ( target ,    candidates )  ;", "if    ( replacedBy    !  =    null )     {", "targetToSource . put ( replacedBy ,    target )  ;", "if    ( elements . containsKey ( replacedBy )  )     {", "return   register ( target ,    replacedBy )  ;", "}", "}", "Collection < K >    replacementSource    =    targetToSource . get ( target )  ;", "if    (  !  ( replacementSource . isEmpty (  )  )  )     {", "return   register ( replacementSource ,    target )  ;", "}", "if    (  ( candidates . size (  )  )     >     1  )     {", "return   register ( target ,    target )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["newElement"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.conflicts.ConflictContainer"}, {"methodBody": ["METHOD_START", "{", "assert    !  ( conflicts . isEmpty (  )  )  ;", "< K ,    T >  . Conflict   conflict    =    conflicts . pop (  )  ;", "for    ( K   participant    :    conflict . participants )     {", "conflictsByParticipant . remove ( participant )  ;", "}", "return   conflict ;", "}", "METHOD_END"], "methodName": ["popConflict"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.conflicts.ConflictContainer"}, {"methodBody": ["METHOD_START", "{", "return   registerConflict ( Collections . singletonList ( target )  ,    replacedBy )  ;", "}", "METHOD_END"], "methodName": ["registerConflict"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.conflicts.ConflictContainer"}, {"methodBody": ["METHOD_START", "{", "assert    !  ( targets . isEmpty (  )  )  ;", "Collection <  ?    extends   T >    candidates    =    elements . get ( replacedBy )  ;", "assert   candidates    !  =    null ;", "Set < K >    participants    =    new   LinkedHashSet < K >  (  )  ;", "participants . addAll ( targets )  ;", "participants . add ( replacedBy )  ;", "for    ( K   participant    :    participants )     {", "< K ,    T >  . Conflict   c    =    conflictsByParticipant . get ( participant )  ;", "if    ( c    !  =    null )     {", "c . candidates    =    candidates ;", "c . participants . addAll ( participants )  ;", "return   c ;", "}", "}", "< K ,    T >  . Conflict   c    =    new   Conflict ( participants ,    candidates )  ;", "conflicts . add ( c )  ;", "for    ( K   participant    :    participants )     {", "conflictsByParticipant . put ( participant ,    c )  ;", "}", "return   c ;", "}", "METHOD_END"], "methodName": ["registerConflict"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.conflicts.ConflictContainer"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultCapabilitiesConflictHandler . Candidate ( component ,    capability ,    implicitCapabilityProviders )  ;", "}", "METHOD_END"], "methodName": ["candidate"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.conflicts.DefaultCapabilitiesConflictHandler"}, {"methodBody": ["METHOD_START", "{", "String   capabilityId    =    capability . getCapabilityId (  )  ;", "Set < ComponentState >    componentStates    =    capabilityWithoutVersionToComponents . get ( capabilityId )  ;", "if    ( componentStates    =  =    null )     {", "componentStates    =    Sets . newHashSet (  )  ;", "capabilityWithoutVersionToComponents . put ( capabilityId ,    componentStates )  ;", "}", "return   componentStates ;", "}", "METHOD_END"], "methodName": ["findComponentsFor"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.conflicts.DefaultCapabilitiesConflictHandler"}, {"methodBody": ["METHOD_START", "{", "TreeSet < String >    candidates    =    Sets . newTreeSet (  )  ;", "for    ( ComponentState   component    :     . components )     {", "candidates . add ( component . getId (  )  . toString (  )  )  ;", "}", "return   Joiner . on (  \"    and    \"  )  . join ( candidates )  ;", "}", "METHOD_END"], "methodName": ["prettifyCandidates"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.conflicts.DefaultCapabilitiesConflictHandler"}, {"methodBody": ["METHOD_START", "{", "TreeSet < String >    capabilities    =    Sets . newTreeSet (  )  ;", "for    ( Capability   c    :    conflict . descriptors )     {", "capabilities . add (  (  (  (  (  ( c . getGroup (  )  )     +     \"  :  \"  )     +     ( c . getName (  )  )  )     +     \"  :  \"  )     +     ( c . getVersion (  )  )  )  )  ;", "}", "return   Joiner . on (  \"  ,     \"  )  . join ( capabilities )  ;", "}", "METHOD_END"], "methodName": ["prettifyCapabilities"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.conflicts.DefaultCapabilitiesConflictHandler"}, {"methodBody": ["METHOD_START", "{", "return    !  ( conflicts . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["hasConflicts"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.conflicts.DefaultConflictHandler"}, {"methodBody": ["METHOD_START", "{", "for    ( ModuleIdentifier   identifier    :    partifipants )     {", "ModuleReplacementsData . Replacement   replacement    =    moduleReplacements . getReplacementFor ( identifier )  ;", "if    ( replacement    !  =    null )     {", "String   reason    =    replacement . getReason (  )  ;", "if    ( reason    !  =    null )     {", "selected . addCause ( new   mponentSelectionDescriptor ( ComponentSelectionCause . CONFLICT _ RESOLUTION ,    reason )  )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["maybeSetReason"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.conflicts.DefaultConflictHandler"}, {"methodBody": ["METHOD_START", "{", "ModuleReplacementsData . Replacement   replacement    =    moduleReplacements . getReplacementFor ( candidate . getId (  )  )  ;", "ModuleIdentifier   replacedBy    =     ( replacement    =  =    null )     ?    null    :    replacement . getTarget (  )  ;", "return   PotentialConflictFactory . potentialConflict ( newElement ( candidate . getId (  )  ,    candidate . getVersions (  )  ,    replacedBy )  )  ;", "}", "METHOD_END"], "methodName": ["registerCandidate"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.conflicts.DefaultConflictHandler"}, {"methodBody": ["METHOD_START", "{", "compositeResolver . addFirst ( conflictResolver )  ;", "}", "METHOD_END"], "methodName": ["registerResolver"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.conflicts.DefaultConflictHandler"}, {"methodBody": ["METHOD_START", "{", "assert   hasConflicts (  )  ;", "ConflictContainer < ModuleIdentifier ,    ComponentResolutionState >  . Conflict   conflict    =    conflicts . popConflict (  )  ;", "ConflictResolverDetails < ComponentResolutionState >    details    =    new   DefaultConflictResolverDetails < ComponentResolutionState >  ( conflict . candidates )  ;", "compositeResolver . select ( details )  ;", "if    ( details . hasFailure (  )  )     {", "throw   UncheckedException . throwAsUncheckedException ( details . getFailure (  )  )  ;", "}", "ComponentResolutionState   selected    =    details . getSelected (  )  ;", "ConflictResolutionResult   result    =    new   DefaultConflictResolutionResult ( conflict . participants ,    selected )  ;", "resolutionAction . execute ( result )  ;", "maybeSetReason ( conflict . participants ,    selected )  ;", ". LOGGER . debug (  \" Selected    {  }    from   conflicting   modules    {  }  .  \"  ,    selected ,    conflict . candidates )  ;", "}", "METHOD_END"], "methodName": ["resolveNextConflict"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.conflicts.DefaultConflictHandler"}, {"methodBody": ["METHOD_START", "{", "return   selected ;", "}", "METHOD_END"], "methodName": ["getSelected"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.conflicts.DefaultConflictResolutionResult"}, {"methodBody": ["METHOD_START", "{", "for    ( ModuleIdentifier   module    :    participatingModules )     {", "action . execute ( module )  ;", "}", "}", "METHOD_END"], "methodName": ["withParticipatingModules"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.conflicts.DefaultConflictResolutionResult"}, {"methodBody": ["METHOD_START", "{", "return   PotentialConflictFactory . NO _ CONFLICT ;", "}", "METHOD_END"], "methodName": ["noConflict"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.conflicts.PotentialConflictFactory"}, {"methodBody": ["METHOD_START", "{", "if    ( conflict    =  =    null )     {", "return    . NO _ CONFLICT ;", "}", "return   new    . HasConflict ( conflict . participants )  ;", "}", "METHOD_END"], "methodName": ["potentialConflict"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.conflicts.PotentialConflictFactory"}, {"methodBody": ["METHOD_START", "{", "SelectorStateResolverResults   results    =    new   SelectorStateResolverResults (  )  ;", "for    ( ResolvableSelectorState   selector    :    selectors )     {", "if    ( results . alreadyHaveResolution ( selector )  )     {", "selector . markResolved (  )  ;", "continue ;", "}", "ComponentIdResolveResult   resolved    =    selector . resolve ( allRejects )  ;", "results . registerResolution ( selector ,    resolved )  ;", "}", "return   results . getResolved ( componentFactory )  ;", "}", "METHOD_END"], "methodName": ["buildResolveResults"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.selectors.SelectorStateResolver"}, {"methodBody": ["METHOD_START", "{", "List < VersionSelector >    rejectSelectors    =    null ;", "for    ( Resolvable   selector    :    selectors )     {", "ResolvedVersionConstraint   versionConstraint    =    selector . getVersionConstraint (  )  ;", "if    (  ( versionConstraint    !  =    null )     &  &     (  ( versionConstraint . getRejectedSelector (  )  )     !  =    null )  )     {", "if    ( rejectSelectors    =  =    null )     {", "rejectSelectors    =    Lists . newArrayListWithCapacity ( selectors . size (  )  )  ;", "}", "rejectSelectors . add ( versionConstraint . getRejectedSelector (  )  )  ;", "}", "}", "if    ( rejectSelectors    =  =    null )     {", "return   null ;", "}", "if    (  ( rejectSelectors . size (  )  )     =  =     1  )     {", "return   rejectSelectors . get (  0  )  ;", "}", "return   new   UnionVersionSelector ( rejectSelectors )  ;", "}", "METHOD_END"], "methodName": ["createAllRejects"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.selectors.SelectorStateResolver"}, {"methodBody": ["METHOD_START", "{", "ConflictResolverDetails < T >    details    =    new   DefaultConflictResolverDetails < T >  ( candidates )  ;", "conflictResolver . select ( details )  ;", "if    ( details . hasFailure (  )  )     {", "throw   UncheckedException . throwAsUncheckedException ( details . getFailure (  )  )  ;", "}", "return   details . getSelected (  )  ;", "}", "METHOD_END"], "methodName": ["resolveConflicts"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.selectors.SelectorStateResolver"}, {"methodBody": ["METHOD_START", "{", "if    (  ( selectors . size (  )  )     =  =     1  )     {", "ResolvableSelectorState   selectorState    =    selectors . get (  0  )  ;", "ComponentIdResolveResult   resolved    =    selectorState . resolve ( allRejects )  ;", "T   selected    =    Results . componentForIdResolveResult ( componentFactory ,    resolved ,    selectorState )  ;", "return   Collections . singletonList ( selected )  ;", "}", "return   buildResolveResults ( selectors ,    allRejects )  ;", "}", "METHOD_END"], "methodName": ["resolveSelectors"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.selectors.SelectorStateResolver"}, {"methodBody": ["METHOD_START", "{", "VersionSelector   allRejects    =    createAllRejects ( selectors )  ;", "List < T >    candidates    =    resolveSelectors ( selectors ,    allRejects )  ;", "assert    !  ( candidates . isEmpty (  )  )  ;", "if    ( moduleId . equals ( rootModuleId )  )     {", "candidates    =    new   ArrayList < T >  ( candidates )  ;", "candidates . add ( rootComponent )  ;", "}", "if    (  ( candidates . size (  )  )     =  =     1  )     {", "return   candidates . get (  0  )  ;", "}", "return   resolveConflicts ( candidates )  ;", "}", "METHOD_END"], "methodName": ["selectBest"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.selectors.SelectorStateResolver"}, {"methodBody": ["METHOD_START", "{", "for    ( ComponentIdResolveResult   discovered    :    results . values (  )  )     {", "if    ( included ( dep ,    discovered )  )     {", "results . put ( dep ,    discovered )  ;", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["alreadyHaveResolution"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.selectors.SelectorStateResolverResults"}, {"methodBody": ["METHOD_START", "{", "T   component    =    componentFactory . getRevision ( idResolveResult . getId (  )  ,    idResolveResult . getModuleVersionId (  )  ,    idResolveResult . getMetadata (  )  )  ;", "component . selectedBy (  )  ;", "if    ( idResolveResult . isRejected (  )  )     {", "component . reject (  )  ;", "}", "return   component ;", "}", "METHOD_END"], "methodName": ["componentForIdResolveResult"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.selectors.SelectorStateResolverResults"}, {"methodBody": ["METHOD_START", "{", "ModuleVersionResolveException   failure    =    null ;", "Set < ComponentIdResolveResult >    processedResolveResults    =    Sets . newHashSet (  )  ;", "List < T >    resolved    =    Lists . newArrayList (  )  ;", "for    ( ResolvableSelectorState   selectorState    :    results . keySet (  )  )     {", "ComponentIdResolveResult   idResolveResult    =    results . get ( selectorState )  ;", "if    ( selectorState . isForce (  )  )     {", "T   forcedComponent    =     . componentForIdResolveResult ( componentFactory ,    idResolveResult ,    selectorState )  ;", "forcedComponent . addCause ( VersionSelectionReasons . FORCED )  ;", "return   Collections . singletonList ( forcedComponent )  ;", "}", "if    ( processedResolveResults . add ( idResolveResult )  )     {", "if    (  ( idResolveResult . getFailure (  )  )     =  =    null )     {", "T   componentState    =     . componentForIdResolveResult ( componentFactory ,    idResolveResult ,    selectorState )  ;", "resolved . add ( componentState )  ;", "} else    {", "if    ( failure    =  =    null )     {", "failure    =    idResolveResult . getFailure (  )  ;", "}", "}", "}", "}", "if    (  ( resolved . isEmpty (  )  )     &  &     ( failure    !  =    null )  )     {", "throw   failure ;", "}", "return   resolved ;", "}", "METHOD_END"], "methodName": ["getResolved"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.selectors.SelectorStateResolverResults"}, {"methodBody": ["METHOD_START", "{", "if    (  ( candidate . getFailure (  )  )     !  =    null )     {", "return   false ;", "}", "ResolvedVersionConstraint   versionConstraint    =    dep . getVersionConstraint (  )  ;", "Version   preferred    =     ( versionConstraint    =  =    null )     ?    null    :    versionConstraint . getPreferred (  )  ;", "if    (  ( preferred    =  =    null )     |  |     (  !  ( preferred . canShortCircuitWhenVersionAlreadyPreselected (  )  )  )  )     {", "return   false ;", "}", "return   preferred . accept ( candidate . getModuleVersionId (  )  . getVersion (  )  )  ;", "}", "METHOD_END"], "methodName": ["included"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.selectors.SelectorStateResolverResults"}, {"methodBody": ["METHOD_START", "{", "if    (  ( resolveResult . getFailure (  )  )     !  =    null )     {", "results . put ( dep ,    resolveResult )  ;", "return ;", "}", "for    ( Resolvable   other    :    results . keySet (  )  )     {", "if    ( included ( other ,    resolveResult )  )     {", "results . put ( other ,    resolveResult )  ;", "}", "}", "results . put ( dep ,    resolveResult )  ;", "}", "METHOD_END"], "methodName": ["registerResolution"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.selectors.SelectorStateResolverResults"}, {"methodBody": ["METHOD_START", "{", "BuildableComponentIdResolveResult   result    =    new   DefaultBuildableComponentIdResolveResult (  )  ;", "r ( null ,    mergedConstraint ,    result )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["resolveVersion"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.graph.selectors.TestSelectorState"}, {"methodBody": ["METHOD_START", "{", "ResolutionFailureCollector . BrokenDependency   breakage    =    failuresByRevisionId . get ( selector )  ;", "if    ( breakage    =  =    null )     {", "breakage    =    new   ResolutionFailureCollector . BrokenDependency ( failure )  ;", "failuresByRevisionId . put ( selector ,    breakage )  ;", "}", "breakage . requiredBy . add ( dependency . getFrom (  )  )  ;", "}", "METHOD_END"], "methodName": ["addUnresolvedDependency"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.oldresult.ResolutionFailureCollector"}, {"methodBody": ["METHOD_START", "{", "if    ( failuresByRevisionId . isEmpty (  )  )     {", "ImmutableSet . of (  )  ;", "}", "ImmutableSet . Builder < UnresolvedDependency >    builder    =    ImmutableSet . builder (  )  ;", "for    ( Map . Entry < ComponentSelector ,     . BrokenDependency >    entry    :    failuresByRevisionId . entrySet (  )  )     {", "Collection < List < ComponentIdentifier >  >    paths    =    DependencyGraphPathResolver . calculatePaths ( entry . getValue (  )  . requiredBy ,    root )  ;", "ComponentSelector   key    =    entry . getKey (  )  ;", "ModuleVersionSelector   moduleVersionSelector    =    componentSelectorConverter . getSelector ( key )  ;", "builder . add ( new   DefaultUnresolvedDependency ( moduleVersionSelector ,    entry . getValue (  )  . failure . withIncomingPaths ( paths )  )  )  ;", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["complete"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.oldresult.ResolutionFailureCollector"}, {"methodBody": ["METHOD_START", "{", "Timer   clock    =    Time . startTimer (  )  ;", "Map < Long ,    DefaultResolvedDependency >    allDependencies    =    new   HashMap < Long ,    DefaultResolvedDependency >  (  )  ;", "Map < Dependency ,    DependencyGraphNodeResult >    firstLevelDependencies    =    new   LinkedHashMap < Dependency ,    DependencyGraphNodeResult >  (  )  ;", "DependencyGraphNodeResult   root ;", "int   valuesRead    =     0  ;", "byte   type    =     -  1  ;", "long   id ;", "ResolvedArtifactSet   artifacts ;", "try    {", "while    ( true )     {", "type    =    decoder . readByte (  )  ;", "valuesRead +  +  ;", "switch    ( type )     {", "case    . NODE    :", "id    =    decoder . readSmallLong (  )  ;", "ResolvedConfigurationIdentifier   details    =    resolvedConfigurationIdentifierSerializer . read ( decoder )  ;", "allDependencies . put ( id ,    new   DefaultResolvedDependency ( id ,    details ,    buildOperationProcessor )  )  ;", "break ;", "case    . ROOT    :", "id    =    decoder . readSmallLong (  )  ;", "root    =    allDependencies . get ( id )  ;", "if    ( root    =  =    null )     {", "throw   new   IllegalStateException ( String . format (  \" Unexpected   root   id    % s .    Seen   ids :     % s \"  ,    id ,    allDependencies . keySet (  )  )  )  ;", "}", ". LOG . debug (  \" Loaded   resolved   configuration   results    (  {  }  )    from    {  }  \"  ,    clock . getElapsed (  )  ,    binaryStore )  ;", "return   new   DefaultTransientConfigurationResults ( root ,    firstLevelDependencies )  ;", "case    . FIRST _ LEVEL    :", "id    =    decoder . readSmallLong (  )  ;", "DefaultResolvedDependency   dependency    =    allDependencies . get ( id )  ;", "if    ( dependency    =  =    null )     {", "throw   new   IllegalStateException ( String . format (  \" Unexpected   first   level   id    % s .    Seen   ids :     % s \"  ,    id ,    allDependencies . keySet (  )  )  )  ;", "}", "firstLevelDependencies . put ( graphResults . getModuleDependency ( id )  ,    dependency )  ;", "break ;", "case    . EDGE    :", "long   parentId    =    decoder . readSmallLong (  )  ;", "long   childId    =    decoder . readSmallLong (  )  ;", "DefaultResolvedDependency   parent    =    allDependencies . get ( parentId )  ;", "DefaultResolvedDependency   child    =    allDependencies . get ( childId )  ;", "if    ( parent    =  =    null )     {", "throw   new   IllegalStateException ( String . format (  \" Unexpected   parent   dependency   id    % s .    Seen   ids :     % s \"  ,    parentId ,    allDependencies . keySet (  )  )  )  ;", "}", "if    ( child    =  =    null )     {", "throw   new   IllegalStateException ( String . format (  \" Unexpected   child   dependency   id    % s .    Seen   ids :     % s \"  ,    childId ,    allDependencies . keySet (  )  )  )  ;", "}", "parent . addChild ( child )  ;", "artifacts    =    artifactResults . getArtifactsWithId ( decoder . readSmallInt (  )  )  ;", "child . addParentSpecificArtifacts ( parent ,    artifacts )  ;", "break ;", "case    . NODE _ ARTIFACTS    :", "id    =    decoder . readSmallLong (  )  ;", "DefaultResolvedDependency   node    =    allDependencies . get ( id )  ;", "if    ( node    =  =    null )     {", "throw   new   IllegalStateException ( String . format (  \" Unexpected   node   id    % s .    Seen   ids :     % s \"  ,    node ,    allDependencies . keySet (  )  )  )  ;", "}", "artifacts    =    artifactResults . getArtifactsWithId ( decoder . readSmallInt (  )  )  ;", "node . addModuleArtifacts ( artifacts )  ;", "break ;", "default    :", "throw   new   IOException (  (  \" Unknown   value   type   read   from   stream :     \"     +    type )  )  ;", "}", "}", "}    catch    ( IOException   e )     {", "throw   new   RuntimeException (  (  (  (  \" Problems   loading   the   resolved   configuration .    Read    \"     +    valuesRead )     +     \"    values ,    last   was :     \"  )     +    type )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["deserialize"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.oldresult.TransientConfigurationResultsBuilder"}, {"methodBody": ["METHOD_START", "{", "binaryStore . write ( new   BinaryStore . WriteAction (  )     {", "@ Override", "public   void   write ( Encoder   encoder )    throws   IOException    {", "encoder . writeByte (  . ROOT )  ;", "encoder . writeSmallLong ( id )  ;", "}", "}  )  ;", ". LOG . debug (  \" Flushing   resolved   configuration   data   in    {  }  .    Wrote   root    {  }  .  \"  ,    binaryStore ,    id )  ;", "binaryData    =    binaryStore . done (  )  ;", "}", "METHOD_END"], "methodName": ["done"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.oldresult.TransientConfigurationResultsBuilder"}, {"methodBody": ["METHOD_START", "{", "binaryStore . write ( new   BinaryStore . WriteAction (  )     {", "@ Override", "public   void   write ( Encoder   encoder )    throws   IOException    {", "encoder . writeByte (  . FIRST _ LEVEL )  ;", "encoder . writeSmallLong ( id )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["firstLevelDependency"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.oldresult.TransientConfigurationResultsBuilder"}, {"methodBody": ["METHOD_START", "{", "synchronized ( lock )     {", "return   cache . load ( new   Factory <  >  (  )     {", "public      create (  )     {", "try    {", "return   binaryData . read ( new   BinaryStore . ReadAction <  >  (  )     {", "public      read ( Decoder   decoder )    throws   IOException    {", "return   deserialize ( decoder ,    graphResults ,    artifactResults ,    buildOperationProcessor )  ;", "}", "}  )  ;", "}    finally    {", "try    {", "binaryData . close (  )  ;", "}    catch    ( IOException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "}", "}", "}  )  ;", "}", "}", "METHOD_END"], "methodName": ["load"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.oldresult.TransientConfigurationResultsBuilder"}, {"methodBody": ["METHOD_START", "{", "binaryStore . write ( new   BinaryStore . WriteAction (  )     {", "public   void   write ( Encoder   encoder )    throws   IOException    {", "encoder . writeByte (  . NODE _ ARTIFACTS )  ;", "encoder . writeSmallLong ( node )  ;", "encoder . writeSmallInt ( artifactId )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["nodeArtifacts"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.oldresult.TransientConfigurationResultsBuilder"}, {"methodBody": ["METHOD_START", "{", "binaryStore . write ( new   BinaryStore . WriteAction (  )     {", "public   void   write ( Encoder   encoder )    throws   IOException    {", "encoder . writeByte (  . EDGE )  ;", "encoder . writeSmallLong ( parent )  ;", "encoder . writeSmallLong ( child )  ;", "encoder . writeSmallInt ( artifactId )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["parentChildMapping"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.oldresult.TransientConfigurationResultsBuilder"}, {"methodBody": ["METHOD_START", "{", "binaryStore . write ( new   BinaryStore . WriteAction (  )     {", "@ Override", "public   void   write ( Encoder   encoder )    throws   IOException    {", "encoder . writeByte (  . NODE )  ;", "encoder . writeSmallLong ( id )  ;", "resolvedConfigurationIdentifierSerializer . write ( encoder ,    details )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["resolvedDependency"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.oldresult.TransientConfigurationResultsBuilder"}, {"methodBody": ["METHOD_START", "{", "return   transientConfigurationResultsBuilder . load ( graphResults ,    artifactResults )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.oldresult.TransientConfigurationResultsLoader"}, {"methodBody": ["METHOD_START", "{", "return   this ;", "}", "METHOD_END"], "methodName": ["complete"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.projectresult.ResolvedLocalComponentsResultGraphVisitor"}, {"methodBody": ["METHOD_START", "{", "List < Object >    key    =    Arrays . asList ( requested ,    from ,    selected )  ;", "if    (  !  ( resolvedDependencies . containsKey ( key )  )  )     {", "resolvedDependencies . put ( key ,    new   DefaultResolved ( requested ,    selected ,    from )  )  ;", "}", "return   resolvedDependencies . get ( key )  ;", "}", "METHOD_END"], "methodName": ["createResolvedDependency"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.CachingDependencyResultFactory"}, {"methodBody": ["METHOD_START", "{", "List < Object >    key    =    Arrays . asList ( requested ,    from )  ;", "if    (  !  ( unresolvedDependencies . containsKey ( key )  )  )     {", "unresolvedDependencies . put ( key ,    new   DefaultUnresolved ( requested ,    reason ,    from ,    failure )  )  ;", "}", "return   unresolvedDependencies . get ( key )  ;", "}", "METHOD_END"], "methodName": ["createUnresolvedDependency"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.CachingDependencyResultFactory"}, {"methodBody": ["METHOD_START", "{", "byte   id    =    decoder . readByte (  )  ;", "if    (  ( ComponentIdentifierSerializer . Implementation . BUILD . getId (  )  )     =  =    id )     {", "BuildIdentifier   buildIdentifier    =    buildIdentifierSerializer . read ( decoder )  ;", "return   new   DefaultProjectComponentIdentifier ( buildIdentifier ,    decoder . readString (  )  )  ;", "} else", "if    (  ( ComponentIdentifierSerializer . Implementation . MODULE . getId (  )  )     =  =    id )     {", "return   new   DefaultModuleComponentIdentifier ( decoder . readString (  )  ,    decoder . readString (  )  ,    decoder . readString (  )  )  ;", "} else", "if    (  ( ComponentIdentifierSerializer . Implementation . SNAPSHOT . getId (  )  )     =  =    id )     {", "return   new   repositories . resolver . MavenUniqueSnapshotComponentIdentifier ( decoder . readString (  )  ,    decoder . readString (  )  ,    decoder . readString (  )  ,    decoder . readString (  )  )  ;", "} else", "if    (  ( ComponentIdentifierSerializer . Implementation . LIBRARY . getId (  )  )     =  =    id )     {", "return   new   DefaultLibraryBinaryIdentifier ( decoder . readString (  )  ,    decoder . readString (  )  ,    decoder . readString (  )  )  ;", "}", "throw   new   IllegalArgumentException (  (  \" Unable   to   find   component   identifier   type   with   id :     \"     +    id )  )  ;", "}", "METHOD_END"], "methodName": ["read"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.ComponentIdentifierSerializer"}, {"methodBody": ["METHOD_START", "{", "ComponentIdentifierSerializer . Implementation   implementation ;", "if    ( value   instanceof   MavenUniqueSnapshotComponentIdentifier )     {", "implementation    =    ComponentIdentifierSerializer . Implementation . SNAPSHOT ;", "} else", "if    ( value   instanceof   ModuleComponentIdentifier )     {", "implementation    =    ComponentIdentifierSerializer . Implementation . MODULE ;", "} else", "if    ( value   instanceof   ProjectComponentIdentifier )     {", "implementation    =    ComponentIdentifierSerializer . Implementation . BUILD ;", "} else", "if    ( value   instanceof   LibraryBinaryIdentifier )     {", "implementation    =    ComponentIdentifierSerializer . Implementation . LIBRARY ;", "} else    {", "throw   new   IllegalArgumentException (  (  \" Unsupported   component   identifier   class :     \"     +     ( value . getClass (  )  )  )  )  ;", "}", "return   implementation ;", "}", "METHOD_END"], "methodName": ["resolveImplementation"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.ComponentIdentifierSerializer"}, {"methodBody": ["METHOD_START", "{", "if    ( value    =  =    null )     {", "throw   new   IllegalArgumentException (  \" Provided   component   identifier   may   not   be   null \"  )  ;", "}", "ComponentIdentifierSerializer . Implementation   implementation    =    resolveImplementation ( value )  ;", "encoder . writeByte ( implementation . getId (  )  )  ;", "if    ( implementation    =  =     ( ComponentIdentifierSerializer . Implementation . MODULE )  )     {", "ModuleComponentIdentifier   moduleComponentIdentifier    =     (  ( ModuleComponentIdentifier )     ( value )  )  ;", "encoder . writeString ( moduleComponentIdentifier . getGroup (  )  )  ;", "encoder . writeString ( moduleComponentIdentifier . getModule (  )  )  ;", "encoder . writeString ( moduleComponentIdentifier . getVersion (  )  )  ;", "} else", "if    ( implementation    =  =     ( ComponentIdentifierSerializer . Implementation . SNAPSHOT )  )     {", "repositories . resolver . MavenUniqueSnapshotComponentIdentifier   snapshotIdentifier    =     (  ( repositories . resolver . MavenUniqueSnapshotComponentIdentifier )     ( value )  )  ;", "encoder . writeString ( snapshotIdentifier . getGroup (  )  )  ;", "encoder . writeString ( snapshotIdentifier . getModule (  )  )  ;", "encoder . writeString ( snapshotIdentifier . getVersion (  )  )  ;", "encoder . writeString ( snapshotIdentifier . getTimestamp (  )  )  ;", "} else", "if    ( implementation    =  =     ( ComponentIdentifierSerializer . Implementation . BUILD )  )     {", "ProjectComponentIdentifier   projectComponentIdentifier    =     (  ( ProjectComponentIdentifier )     ( value )  )  ;", "BuildIdentifier   build    =    projectComponentIdentifier . getBuild (  )  ;", "buildIdentifierSerializer . write ( encoder ,    build )  ;", "encoder . writeString ( projectComponentIdentifier . getProjectPath (  )  )  ;", "} else", "if    ( implementation    =  =     ( ComponentIdentifierSerializer . Implementation . LIBRARY )  )     {", "LibraryBinaryIdentifier   libraryIdentifier    =     (  ( LibraryBinaryIdentifier )     ( value )  )  ;", "encoder . writeString ( libraryIdentifier . getProjectPath (  )  )  ;", "encoder . writeString ( libraryIdentifier . getLibraryName (  )  )  ;", "encoder . writeString ( libraryIdentifier . getVariant (  )  )  ;", "} else    {", "throw   new   IllegalStateException (  (  \" Unsupported   implementation   type :     \"     +    implementation )  )  ;", "}", "}", "METHOD_END"], "methodName": ["write"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.ComponentIdentifierSerializer"}, {"methodBody": ["METHOD_START", "{", "long   resultId    =    decoder . readSmallLong (  )  ;", "ModuleVersionIdentifier   id    =    idSerializer . read ( decoder )  ;", "ComponentSelectionReason   reason    =    reasonSerializer . read ( decoder )  ;", "ComponentIdentifier   componentId    =    componentIdSerializer . read ( decoder )  ;", "String   variantName    =    decoder . readString (  )  ;", "AttributeContainer   attributes    =    attributeContainerSerializer . read ( decoder )  ;", "return   new   Detached ( resultId ,    id ,    reason ,    componentId ,    variantName ,    attributes )  ;", "}", "METHOD_END"], "methodName": ["read"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.ComponentResultSerializer"}, {"methodBody": ["METHOD_START", "{", "reasonSerializer . reset (  )  ;", "}", "METHOD_END"], "methodName": ["reset"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.ComponentResultSerializer"}, {"methodBody": ["METHOD_START", "{", "encoder . writeSmallLong ( value . getResultId (  )  )  ;", "id . write ( encoder ,    value . getModuleVersion (  )  )  ;", "reason . write ( encoder ,    value . getSelectionReason (  )  )  ;", "componentId . write ( encoder ,    value . getComponentId (  )  )  ;", "encoder . writeString ( value . getVariantName (  )  )  ;", "attributeContainer . write ( encoder ,    value . getVariantAttributes (  )  )  ;", "}", "METHOD_END"], "methodName": ["write"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.ComponentResultSerializer"}, {"methodBody": ["METHOD_START", "{", "List < ComponentSelectionDescriptor >    descriptions    =    readDescriptions ( decoder )  ;", "return   VersionSelectionReasons . of ( descriptions )  ;", "}", "METHOD_END"], "methodName": ["read"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.ComponentSelectionReasonSerializer"}, {"methodBody": ["METHOD_START", "{", "boolean   alreadyKnown    =    decoder . readBoolean (  )  ;", "if    ( alreadyKnown )     {", "return   descrips . inverse (  )  . get ( decoder . readSmallInt (  )  )  ;", "} else    {", "String   descrip    =    decoder . readString (  )  ;", "descrips . put ( descrip ,    descrips . size (  )  )  ;", "return   descrip ;", "}", "}", "METHOD_END"], "methodName": ["readDescriptionText"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.ComponentSelectionReasonSerializer"}, {"methodBody": ["METHOD_START", "{", "int   size    =    decoder . readSmallInt (  )  ;", "ImmutableList . Builder < Descriptor >    builder    =    new   ImmutableList . Builder < Descriptor >  (  )  ;", "for    ( int   i    =     0  ;    i    <    size ;    i +  +  )     {", "Cause   cause    =    Cause . values (  )  [ decoder . readByte (  )  ]  ;", "String   desc    =    readDescriptionText ( decoder )  ;", "builder . add ( new   DefaultDescriptor ( cause ,    desc )  )  ;", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["readDescriptions"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.ComponentSelectionReasonSerializer"}, {"methodBody": ["METHOD_START", "{", "descriptions . clear (  )  ;", "}", "METHOD_END"], "methodName": ["reset"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.ComponentSelectionReasonSerializer"}, {"methodBody": ["METHOD_START", "{", "List < ComponentSelectionDescriptor >    descriptions    =    value . getDescriptions (  )  ;", "encoder . writeSmallInt ( descriptions . size (  )  )  ;", "for    ( ComponentSelectionDescriptor   description    :    descriptions )     {", "writeDescription ( encoder ,    description )  ;", "}", "}", "METHOD_END"], "methodName": ["write"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.ComponentSelectionReasonSerializer"}, {"methodBody": ["METHOD_START", "{", "encoder . writeByte (  (  ( byte )     ( description . getCause (  )  . ordinal (  )  )  )  )  ;", "writeDescriptionText ( encoder ,    description . getDescription (  )  )  ;", "}", "METHOD_END"], "methodName": ["writeDescription"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.ComponentSelectionReasonSerializer"}, {"methodBody": ["METHOD_START", "{", "Integer   index    =    descriptions . get ( description )  ;", "encoder . writeBoolean (  ( index    !  =    null )  )  ;", "if    ( index    =  =    null )     {", "index    =    descriptions . size (  )  ;", "descriptions . put ( description ,    index )  ;", "encoder . writeString ( description )  ;", "} else    {", "encoder . writeSmallInt ( index )  ;", "}", "}", "METHOD_END"], "methodName": ["writeDescriptionText"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.ComponentSelectionReasonSerializer"}, {"methodBody": ["METHOD_START", "{", "byte   id    =    decoder . readByte (  )  ;", "if    (  (  . Implementation . BUILD . getId (  )  )     =  =    id )     {", "return   new   DefaultProjectComponentSelector ( decoder . readString (  )  ,    decoder . readString (  )  )  ;", "} else", "if    (  (  . Implementation . MODULE . getId (  )  )     =  =    id )     {", "return   newSelector ( decoder . readString (  )  ,    decoder . readString (  )  ,    readVersionConstraint ( decoder )  )  ;", "} else", "if    (  (  . Implementation . LIBRARY . getId (  )  )     =  =    id )     {", "return   new   DefaultLibraryComponentSelector ( decoder . readString (  )  ,    decoder . readNullableString (  )  ,    decoder . readNullableString (  )  )  ;", "}", "throw   new   IllegalArgumentException (  (  \" Unable   to   find   component   selector   with   id :     \"     +    id )  )  ;", "}", "METHOD_END"], "methodName": ["read"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.ComponentSelectorSerializer"}, {"methodBody": ["METHOD_START", "{", "String   prefers    =    decoder . readString (  )  ;", "int   rejectCount    =    decoder . readSmallInt (  )  ;", "List < String >    reje =    Lists . newArrayListWithCapacity ( rejectCount )  ;", "for    ( int   i    =     0  ;    i    <    rejectCount ;    i +  +  )     {", "rejeadd ( decoder . readString (  )  )  ;", "}", "return   new   DefaultImmutableVersionConstraint ( prefers ,    reje ;", "}", "METHOD_END"], "methodName": ["readVersionConstraint"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.ComponentSelectorSerializer"}, {"methodBody": ["METHOD_START", "{", "ComponentSelectorSerializer . Implementation   implementation ;", "if    ( value   instanceof   ModuleComponentSelector )     {", "implementation    =    ComponentSelectorSerializer . Implementation . MODULE ;", "} else", "if    ( value   instanceof   ProjectComponentSelector )     {", "implementation    =    ComponentSelectorSerializer . Implementation . BUILD ;", "} else", "if    ( value   instanceof   LibraryComponentSelector )     {", "implementation    =    ComponentSelectorSerializer . Implementation . LIBRARY ;", "} else    {", "throw   new   IllegalArgumentException (  (  \" Unsupported   component   selector   class :     \"     +     ( value . getClass (  )  )  )  )  ;", "}", "return   implementation ;", "}", "METHOD_END"], "methodName": ["resolveImplementation"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.ComponentSelectorSerializer"}, {"methodBody": ["METHOD_START", "{", "if    ( value    =  =    null )     {", "throw   new   IllegalArgumentException (  \" Provided   component   selector   may   not   be   null \"  )  ;", "}", ". Implementation   implementation    =    resolveImplementation ( value )  ;", "encoder . writeByte ( implementation . getId (  )  )  ;", "if    ( implementation    =  =     (  . Implementation . MODULE )  )     {", "ModuleComponentSelector   moduleComponentSelector    =     (  ( ModuleComponentSelector )     ( value )  )  ;", "encoder . writeString ( moduleComponentSelector . getGroup (  )  )  ;", "encoder . writeString ( moduleComponentSelector . getModule (  )  )  ;", "VersionConstraint   versionConstraint    =    moduleComponentSelector . getVersionConstraint (  )  ;", "writeVersionConstraint ( encoder ,    versionConstraint )  ;", "} else", "if    ( implementation    =  =     (  . Implementation . BUILD )  )     {", "ProjectComponentSelector   projectComponentSelector    =     (  ( ProjectComponentSelector )     ( value )  )  ;", "encoder . writeString ( projectComponentSelector . getBuildName (  )  )  ;", "encoder . writeString ( projectComponentSelector . getProjectPath (  )  )  ;", "} else", "if    ( implementation    =  =     (  . Implementation . LIBRARY )  )     {", "LibraryComponentSelector   libraryComponentSelector    =     (  ( LibraryComponentSelector )     ( value )  )  ;", "encoder . writeString ( libraryComponentSelector . getProjectPath (  )  )  ;", "encoder . writeNullableString ( libraryComponentSelector . getLibraryName (  )  )  ;", "encoder . writeNullableString ( libraryComponentSelector . getVariant (  )  )  ;", "} else    {", "throw   new   IllegalStateException (  (  \" Unsupported   implementation   type :     \"     +    implementation )  )  ;", "}", "}", "METHOD_END"], "methodName": ["write"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.ComponentSelectorSerializer"}, {"methodBody": ["METHOD_START", "{", "encoder . writeString ( versionConstraint . getPreferredVersion (  )  )  ;", "List < String >    rejectedVersions    =    versionConstraint . getRejectedVersions (  )  ;", "encoder . writeSmallInt ( rejectedVersions . size (  )  )  ;", "for    ( String   rejectedVersion    :    rejectedVersions )     {", "encoder . writeString ( rejectedVersion )  ;", "}", "}", "METHOD_END"], "methodName": ["writeVersionConstraint"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.ComponentSelectorSerializer"}, {"methodBody": ["METHOD_START", "{", "return   failure ;", "}", "METHOD_END"], "methodName": ["getFailure"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.DefaultDependencyResult"}, {"methodBody": ["METHOD_START", "{", "return   reason ;", "}", "METHOD_END"], "methodName": ["getReason"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.DefaultDependencyResult"}, {"methodBody": ["METHOD_START", "{", "return   requested ;", "}", "METHOD_END"], "methodName": ["getRequested"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.DefaultDependencyResult"}, {"methodBody": ["METHOD_START", "{", "return   selected ;", "}", "METHOD_END"], "methodName": ["getSelected"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.DefaultDependencyResult"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultResolutionResult ( new   DefaultResolutionResultBuilder . RootFactory ( modules . get ( rootId )  )  )  ;", "}", "METHOD_END"], "methodName": ["complete"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.DefaultResolutionResultBuilder"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( modules . containsKey ( id )  )  )     {", "modules . put ( id ,    new   vedComponentResult ( moduleVersion ,    selectionReason ,    componentId ,    variant )  )  ;", "}", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.DefaultResolutionResultBuilder"}, {"methodBody": ["METHOD_START", "{", "DefaultResolutionResultBuilder   builder    =    new   DefaultResolutionResultBuilder (  )  ;", "builder . visitComponent ( new   DetachedComponentResult (  0 L ,    id ,    VersionSelectionReasons . root (  )  ,    componentIdentifier ,     \"  < empty >  \"  ,    ImmutableAttributes . EMPTY )  )  ;", "return   builder . complete (  0 L )  ;", "}", "METHOD_END"], "methodName": ["empty"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.DefaultResolutionResultBuilder"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultResolvedVariantResult ( component . getVariantName (  )  ,    component . getVariantAttributes (  )  )  ;", "}", "METHOD_END"], "methodName": ["variantDetails"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.DefaultResolutionResultBuilder"}, {"methodBody": ["METHOD_START", "{", "create ( component . getResultId (  )  ,    component . getModuleVersion (  )  ,    component . getSelectionReason (  )  ,    component . getComponentId (  )  ,    DefaultResolutionResultBuilder . variantDetails ( component )  )  ;", "}", "METHOD_END"], "methodName": ["visitComponent"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.DefaultResolutionResultBuilder"}, {"methodBody": ["METHOD_START", "{", "for    ( DependencyResult   d    :    dependencies )     {", "DefaultResolvedComponentResult   from    =    modules . get ( fromComponent )  ;", "artifacts . result . DependencyResult   dependency ;", "if    (  ( d . getFailure (  )  )     !  =    null )     {", "dependency    =    dependencyResultFactory . createUnresolvedDependency ( d . getRequested (  )  ,    from ,    d . getReason (  )  ,    d . getFailure (  )  )  ;", "} else    {", "DefaultResolvedComponentResult   selected    =    modules . get ( d . getSelected (  )  )  ;", "dependency    =    dependencyResultFactory . createResolvedDependency ( d . getRequested (  )  ,    from ,    selected )  ;", "selected . addDependent (  (  ( ResolvedDependencyResult )     ( dependency )  )  )  ;", "}", "from . addDependency ( dependency )  ;", "}", "}", "METHOD_END"], "methodName": ["visitOutgoingEdges"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.DefaultResolutionResultBuilder"}, {"methodBody": ["METHOD_START", "{", "Long   selectorId    =    decoder . readSmallLong (  )  ;", "ComponentSelector   requested    =    selectors . get ( selectorId )  ;", "byte   resultByte    =    decoder . readByte (  )  ;", "if    ( resultByte    =  =     (  . SUCCESSFUL )  )     {", "Long   selectedId    =    decoder . readSmallLong (  )  ;", "return   new   DefaultDependencyResult ( requested ,    selectedId ,    null ,    null )  ;", "} else", "if    ( resultByte    =  =     (  . FAILED )  )     {", "ComponentSelectionReason   reason    =    componentSelectionReasonSerializer . read ( decoder )  ;", "ModuleVersionResolveException   failure    =    failures . get ( requested )  ;", "return   new   DefaultDependencyResult ( requested ,    null ,    reason ,    failure )  ;", "} else    {", "throw   new   IllegalArgumentException (  (  \" Unknown   result   type :     \"     +    resultByte )  )  ;", "}", "}", "METHOD_END"], "methodName": ["read"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.DependencyResultSerializer"}, {"methodBody": ["METHOD_START", "{", "componentSelectionReasonSerializer . reset (  )  ;", "}", "METHOD_END"], "methodName": ["reset"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.DependencyResultSerializer"}, {"methodBody": ["METHOD_START", "{", "encoder . writeSmallLong ( value . getSelector (  )  . getResultId (  )  )  ;", "if    (  ( value . getFailure (  )  )     =  =    null )     {", "encoder . writeByte (  . SUCCESSFUL )  ;", "encoder . writeSmallLong ( value . getSelected (  )  )  ;", "} else    {", "encoder . writeByte (  . FAILED )  ;", "componentSelectionReasonSerializer . write ( encoder ,    value . getReason (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["write"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.DependencyResultSerializer"}, {"methodBody": ["METHOD_START", "{", "return   componentIdentifier ;", "}", "METHOD_END"], "methodName": ["getComponentId"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.DetachedComponentResult"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getModuleVersion"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.DetachedComponentResult"}, {"methodBody": ["METHOD_START", "{", "return   reason ;", "}", "METHOD_END"], "methodName": ["getSelectionReason"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.DetachedComponentResult"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultVisitedFileDependencyResults ( rootFiles )  ;", "}", "METHOD_END"], "methodName": ["complete"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.FileDependencyCollectingGraphVisitor"}, {"methodBody": ["METHOD_START", "{", "BinaryStore . BinaryData   data    =    store . done (  )  ;", ". RootFactory   rootSource    =    new    . RootFactory ( data ,    failures ,    cache ,    componentSelectorSerializer ,    dependencyResultSerializer ,    componentResultSerializer )  ;", "return   new   DefaultResolutionResult ( rootSource )  ;", "}", "METHOD_END"], "methodName": ["complete"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.StreamingResolutionResultBuilder"}, {"methodBody": ["METHOD_START", "{", "return   new   VersionSelectionReasons . DefaultComponentSelectionReason ( Collections .  < ComponentSelectionDescriptor > emptyList (  )  )  ;", "}", "METHOD_END"], "methodName": ["empty"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.VersionSelectionReasons"}, {"methodBody": ["METHOD_START", "{", "return   new   VersionSelectionReasons . DefaultComponentSelectionReason ( descriptions )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.VersionSelectionReasons"}, {"methodBody": ["METHOD_START", "{", "return   new   VersionSelectionReasons . DefaultComponentSelectionReason ( descriptions )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.VersionSelectionReasons"}, {"methodBody": ["METHOD_START", "{", "return   new   VersionSelectionReasons . DefaultComponentSelectionReason ( VersionSelectionReasons . REQUESTED )  ;", "}", "METHOD_END"], "methodName": ["requested"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.VersionSelectionReasons"}, {"methodBody": ["METHOD_START", "{", "return   new   VersionSelectionReasons . DefaultComponentSelectionReason ( VersionSelectionReasons . ROOT )  ;", "}", "METHOD_END"], "methodName": ["root"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.result.VersionSelectionReasons"}, {"methodBody": ["METHOD_START", "{", "CachedStoreFactory . LOG . debug (  (  (  (  (  (  (  (  (  (  ( displayName )     +     \"    cache   closed .    Cache   reads :     \"  )     +     ( stats . readsFromCache )  )     +     \"  ,    disk   reads :     \"  )     +     ( stats . readsFromDisk )  )     +     \"     ( avg :     \"  )     +     ( TimeFormatting . formatDurationVerbose ( stats . getDiskReadsAvgMs (  )  )  )  )     +     \"  ,    total :     \"  )     +     ( TimeFormatting . formatDurationVerbose ( stats . diskReadsTotalMs . get (  )  )  )  )     +     \"  )  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["close"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.store.CachedStoreFactory"}, {"methodBody": ["METHOD_START", "{", "return   new   CachedStoreFactory . SimpleStore < T >  ( cache ,    id ,    stats )  ;", "}", "METHOD_END"], "methodName": ["createCachedStore"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.store.CachedStoreFactory"}, {"methodBody": ["METHOD_START", "{", "try    {", "if    (  ( encoder )     !  =    null )     {", "encoder . close (  )  ;", "}", "}    flly    {", "if    (  ( file )     !  =    null )     {", "file . delete (  )  ;", "}", "encoder    =    null ;", "file    =    null ;", "}", "}", "METHOD_END"], "methodName": ["close"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.store.DefaultBinaryStore"}, {"methodBody": ["METHOD_START", "{", "return    (  (  ( toString (  )  )     +     \"     ( exist :     \"  )     +     ( file . exists (  )  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["diagnose"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.store.DefaultBinaryStore"}, {"methodBody": ["METHOD_START", "{", "try    {", "if    (  ( encoder )     !  =    null )     {", "encoder . flush (  )  ;", "}", "return   new    . SimpleBinaryData ( file ,    offset ,    diagnose (  )  )  ;", "}    finally    {", "offset    =     -  1  ;", "}", "}", "METHOD_END"], "methodName": ["done"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.store.DefaultBinaryStore"}, {"methodBody": ["METHOD_START", "{", "return   file ;", "}", "METHOD_END"], "methodName": ["getFile"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.store.DefaultBinaryStore"}, {"methodBody": ["METHOD_START", "{", "return   file . length (  )  ;", "}", "METHOD_END"], "methodName": ["getSize"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.store.DefaultBinaryStore"}, {"methodBody": ["METHOD_START", "{", "return    \" Binary   store   in    \"     +     ( file )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.store.DefaultBinaryStore"}, {"methodBody": ["METHOD_START", "{", "if    (  ( encoder )     =  =    null )     {", "try    {", "encoder    =    new   KryoBackedEncoder ( new   FileOutputStream ( file )  )  ;", "}    catch    ( FileNotFoundException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "}", "if    (  ( offset )     =  =     (  -  1  )  )     {", "offset    =    encoder . getWritePosition (  )  ;", "if    (  ( offset )     =  =     ( Integer . MAX _ VALUE )  )     {", "throw   new   IllegalStateException (  (  \" Unable   to   write   to   binary       \"     +     \" The   bytes   offset   has   reached   a   point   where   using   it   is   unsafe .    Please   report   this   error .  \"  )  )  ;", "}", "}", "try    {", "write . write ( encoder )  ;", "}    catch    ( Exception   e )     {", "throw   new   RuntimeException (  (  \" Problems   writing   to    \"     +     ( diagnose (  )  )  )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["write"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.store.DefaultBinaryStore"}, {"methodBody": ["METHOD_START", "{", "try    {", "Timer   clock    =    Time . startTimer (  )  ;", "cleanUpLater . stop (  )  ;", ". LOG . debug (  \" Deleted    {  }    resolution   results   binary   files   in    {  }  \"  ,    stores . size (  )  ,    clock . getElapsed (  )  )  ;", "}    finally    {", "oldModelCache    =    null ;", "newModelCache    =    null ;", "stores . clear (  )  ;", "}", "}", "METHOD_END"], "methodName": ["close"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.store.ResolutionResultsStoreFactory"}, {"methodBody": ["METHOD_START", "{", "DefaultBinaryStore   store    =    stores . get ( storeKey )  ;", "if    (  ( store    =  =    null )     |  |     ( isFull ( store )  )  )     {", "File   storeFile    =    temp . createTemporaryFile (  \"  \"  ,     \"  . bin \"  )  ;", "storeFile . deleteOnExit (  )  ;", "store    =    new   DefaultBinaryStore ( storeFile )  ;", "stores . put ( storeKey ,    store )  ;", "cleanUpLater . add ( store )  ;", "}", "return   store ;", "}", "METHOD_END"], "methodName": ["createBinaryStore"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.store.ResolutionResultsStoreFactory"}, {"methodBody": ["METHOD_START", "{", "return   new   StoreSet (  )     {", "int   storeSetId    =    storeSetBaseId . getAndIncrement (  )  ;", "int   binaryStoreId ;", "public   DefaultBinaryStore   nextBinaryStore (  )     {", "String   storeKey    =     (  ( Thread . currentThread (  )  . getId (  )  )     +     \"  -  \"  )     +     (  ( binaryStoreId )  +  +  )  ;", "return   createBinaryStore ( storeKey )  ;", "}", "public   Store < ResolvedComponentResult >    newModelCache (  )     {", "return   getNewModelCache (  )  . createCachedStore ( storeSetId )  ;", "}", "public   Store < TransientConfigura >    oldModelCache (  )     {", "return   getOldModelCache (  )  . createCachedStore ( storeSetId )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["createStoreSet"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.store.ResolutionResultsStoreFactory"}, {"methodBody": ["METHOD_START", "{", "if    (  ( newModelCache )     =  =    null )     {", "newModelCache    =    new   CachedStoreFactory < artifacts . result . ResolvedComponentResult >  (  \" Resolution   result \"  )  ;", "cleanUpLater . add ( newModelCache )  ;", "}", "return   newModelCache ;", "}", "METHOD_END"], "methodName": ["getNewModelCache"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.store.ResolutionResultsStoreFactory"}, {"methodBody": ["METHOD_START", "{", "if    (  ( oldModelCache )     =  =    null )     {", "oldModelCache    =    new   Cached < TransientConfigurationResults >  (  \" Resolution   result \"  )  ;", "cleanUpLater . add ( oldModelCache )  ;", "}", "return   oldModelCache ;", "}", "METHOD_END"], "methodName": ["getOldModelCache"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.store.ResolutionResultsStoreFactory"}, {"methodBody": ["METHOD_START", "{", "return    ( store . getSize (  )  )     >     ( maxSize )  ;", "}", "METHOD_END"], "methodName": ["isFull"], "fileName": "org.gradle.api.internal.artifacts.ivyservice.resolveengine.store.ResolutionResultsStoreFactory"}, {"methodBody": ["METHOD_START", "{", "ModuleComponentIdentifier   componentIdentifier    =     (  ( ModuleComponentIdentifier )     ( componentIdentifierSerializer . read ( decoder )  )  )  ;", "String   artifactName    =    decoder . readString (  )  ;", "String   type    =    decoder . readString (  )  ;", "String   extension    =    decoder . readNullableString (  )  ;", "String   classifier    =    decoder . readNullableString (  )  ;", "return   new   DefaultModule ( componentIdentifier ,    artifactName ,    type ,    extension ,    classifier )  ;", "}", "METHOD_END"], "methodName": ["read"], "fileName": "org.gradle.api.internal.artifacts.metadata.ComponentArtifactIdentifierSerializer"}, {"methodBody": ["METHOD_START", "{", "componentIdentifierSerializer . write ( encoder ,    value . getComponentIdentifier (  )  )  ;", "IvyArtifactName   ivyArtifactName    =    value . getName (  )  ;", "encoder . writeString ( ivyArtifactName . getName (  )  )  ;", "encoder . writeString ( ivyArtifactName . getType (  )  )  ;", "encoder . writeNullableString ( ivyArtifactName . getExtension (  )  )  ;", "encoder . writeNullableString ( ivyArtifactName . getClassifier (  )  )  ;", "}", "METHOD_END"], "methodName": ["write"], "fileName": "org.gradle.api.internal.artifacts.metadata.ComponentArtifactIdentifierSerializer"}, {"methodBody": ["METHOD_START", "{", "ModuleComponentIdentifier   componentIdentifier    =     (  ( ModuleComponentIdentifier )     ( componentIdentifierSerializer . read ( decoder )  )  )  ;", "String   artifactName    =    decoder . readString (  )  ;", "String   type    =    decoder . readString (  )  ;", "String   extension    =    decoder . readNullableString (  )  ;", "String   classifier    =    decoder . readNullableString (  )  ;", "return   new   DefaultModule ( componentIdentifier ,    new   DefaultIvyArtifactName ( artifactName ,    type ,    extension ,    classifier )  )  ;", "}", "METHOD_END"], "methodName": ["read"], "fileName": "org.gradle.api.internal.artifacts.metadata.ComponentArtifactMetadataSerializer"}, {"methodBody": ["METHOD_START", "{", "if    ( value   instanceof   ModuleComponentArtifactMetadata )     {", "ModuleComponentArtifactMetadata   moduleComponentArtifactMetadata    =     (  ( ModuleComponentArtifactMetadata )     ( value )  )  ;", "componentIdentifierSerializer . write ( encoder ,    moduleComponentArtifactMetadata . getComponentId (  )  )  ;", "IvyArtifactName   ivyArtifactName    =    moduleComponentArtifactMetadata . getName (  )  ;", "encoder . writeString ( ivyArtifactName . getName (  )  )  ;", "encoder . writeString ( ivyArtifactName . getType (  )  )  ;", "encoder . writeNullableString ( ivyArtifactName . getExtension (  )  )  ;", "encoder . writeNullableString ( ivyArtifactName . getClassifier (  )  )  ;", "} else    {", "throw   new   IllegalArgumentException (  \" Unknown   artifact   metadata   type .  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["write"], "fileName": "org.gradle.api.internal.artifacts.metadata.ComponentArtifactMetadataSerializer"}, {"methodBody": ["METHOD_START", "{", "String   localOverride    =    system . getProperty (  \" maven . repo . local \"  )  ;", "if    ( localOverride    !  =    null )     {", "return   new   File ( localOverride )  ;", "}", "try    {", "String   repoPath    =    parseLocalRepoPathFromMavenSettings (  )  ;", "if    ( repoPath    !  =    null )     {", "File   file    =    new   File ( resolvePlaceholders ( repoPath . trim (  )  )  )  ;", "if    ( isDriveRelativeWindowsPath ( file )  )     {", "return   file . getAbsoluteFile (  )  ;", "} else    {", "return   file ;", "}", "} else    {", "File   defaultLocation    =    new   File ( system . getProperty (  \" user . home \"  )  ,     \"  /  . m 2  / repository \"  )  . getAbsoluteFile (  )  ;", ". LOGGER . debug (  \" No   local   repository   in   Settings   file   defined .    Using   default   path :     {  }  \"  ,    defaultLocation )  ;", "return   defaultLocation ;", "}", "}    catch    ( SettingsBuildingException   e )     {", "throw   new   CannotLocateLocalMavenRepositoryException (  \" Unable   to   parse   local   Maven   settings .  \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["getLocalMavenRepository"], "fileName": "org.gradle.api.internal.artifacts.mvnsettings.DefaultLocalMavenRepositoryLocator"}, {"methodBody": ["METHOD_START", "{", "return    (  !  ( file . isAbsolute (  )  )  )     &  &     ( file . getPath (  )  . startsWith ( File . separator )  )  ;", "}", "METHOD_END"], "methodName": ["isDriveRelativeWindowsPath"], "fileName": "org.gradle.api.internal.artifacts.mvnsettings.DefaultLocalMavenRepositoryLocator"}, {"methodBody": ["METHOD_START", "{", "if    (  ( localRepoPathFromMavenSettings )     =  =    null )     {", "localRepoPathFromMavenSettings    =    settingsProvider . getLocal (  )  ;", "}", "return   localRepoPathFromMavenSettings ;", "}", "METHOD_END"], "methodName": ["parseLocalRepoPathFromMavenSettings"], "fileName": "org.gradle.api.internal.artifacts.mvnsettings.DefaultLocalMavenRepositoryLocator"}, {"methodBody": ["METHOD_START", "{", "StringBuffer   result    =    new   StringBuffer (  )  ;", "Matcher   matcher    =     . PLACEHOLDER _ PATTERN . matcher ( value )  ;", "while    ( matcher . find (  )  )     {", "String   placeholder    =    matcher . group (  1  )  ;", "String   replacement    =     ( placeholder . startsWith (  \" env .  \"  )  )     ?    system . getEnv ( placeholder . substring (  4  )  )     :    system . getProperty ( placeholder )  ;", "if    ( replacement    =  =    null )     {", "throw   new   CannotLocateLocalMavenRepositoryException ( String . format (  \" Cannot   resolve   placeholder    '  % s '    in   value    '  % s '  \"  ,    placeholder ,    value )  )  ;", "}", "matcher . appendReplacement ( result ,    Matcher . quoteReplacement ( replacement )  )  ;", "}", "matcher . appendTail ( result )  ;", "return   result . toString (  )  ;", "}", "METHOD_END"], "methodName": ["resolvePlaceholders"], "fileName": "org.gradle.api.internal.artifacts.mvnsettings.DefaultLocalMavenRepositoryLocator"}, {"methodBody": ["METHOD_START", "{", "String   m 2 Home    =    System . getenv (  \" M 2  _ HOME \"  )  ;", "if    ( m 2 Home    =  =    null )     {", "return   null ;", "}", "return   new    ( m 2 Home )  ;", "}", "METHOD_END"], "methodName": ["getGlobalMavenDir"], "fileName": "org.gradle.api.internal.artifacts.mvnsettings.DefaultMavenFileLocations"}, {"methodBody": ["METHOD_START", "{", "File   dir    =    getGlobalMavenDir (  )  ;", "if    ( dir    =  =    null )     {", "return   null ;", "}", "return   new   File ( dir ,     \" conf / xml \"  )  ;", "}", "METHOD_END"], "methodName": ["getGlobalSettingsFile"], "fileName": "org.gradle.api.internal.artifacts.mvnsettings.DefaultMavenFileLocations"}, {"methodBody": ["METHOD_START", "{", "return   new   File ( SystemProperties . getInstance (  )  . getUserHome (  )  ,     \"  . m 2  \"  )  ;", "}", "METHOD_END"], "methodName": ["getUserMavenDir"], "fileName": "org.gradle.api.internal.artifacts.mvnsettings.DefaultMavenFileLocations"}, {"methodBody": ["METHOD_START", "{", "return   new   File ( getUserMavenDir (  )  ,     \" settings . xml \"  )  ;", "}", "METHOD_END"], "methodName": ["getUserSettingsFile"], "fileName": "org.gradle.api.internal.artifacts.mvnsettings.DefaultMavenFileLocations"}, {"methodBody": ["METHOD_START", "{", "if    (  ( settingsFile    =  =    null )     |  |     (  !  ( settingsFile . exists (  )  )  )  )     {", "return   null ;", "}", "Map < String ,     ?  >    options    =    Collections . singletonMap ( IS _ STRICT ,    Boolean . FALSE )  ;", "SettingsReader   settingsReader    =    new   DefaultSettingsReader (  )  ;", "try    {", "String   localRepository    =    settingsReader . read ( settingsFile ,    options )  . getLocalRepository (  )  ;", "return   StringUtils . isEmpty ( localRepository )     ?    null    :    localRepository ;", "}    catch    ( Exception   parseException )     {", "throw   new   CannotLocateLocalMavenRepositoryException (  (  \" Unable   to   parse   local   Maven   settings :     \"     +     ( settingsFile . getAbsolutePath (  )  )  )  ,    parseException )  ;", "}", "}", "METHOD_END"], "methodName": ["readLocalRepository"], "fileName": "org.gradle.api.internal.artifacts.mvnsettings.DefaultMavenSettingsProvider"}, {"methodBody": ["METHOD_START", "{", "BuildableArtifactSetResolveResult   artifactSetResolveResult    =    new   DefaultBuildableArtifactSetResolveResult (  )  ;", "artifactResolver . resolveArtifactsWithType ( component ,    convertType ( type )  ,    artifactSetResolveResult )  ;", "for    ( ComponentArtifactMetadata   artifactMetaData    :    artifactSetResolveResult . getResult (  )  )     {", "BuildableveResult   resolveResult    =    new   DefaultBuildableveResult (  )  ;", "artifactResolver . resolveArtifact ( artifactMetaData ,    component . getSource (  )  ,    resolveResult )  ;", "if    (  ( resolveResult . getFailure (  )  )     !  =    null )     {", "artifacts . addArtifact ( new   DefaultUnresolvedArtifactResult ( artifactMetaData . getId (  )  ,    type ,    resolveResult . getFailure (  )  )  )  ;", "} else    {", "artifacts . addArtifact ( new   DefaultResolvedArtifactResult ( artifactMetaData . getId (  )  ,    ImmutableAttributes . EMPTY ,    component . getId (  )  . getDisplayName (  )  ,    type ,    resolveResult . getResult (  )  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addArtifacts"], "fileName": "org.gradle.api.internal.artifacts.query.DefaultArtifactResolutionQuery"}, {"methodBody": ["METHOD_START", "{", "BuildableComponentResolveResult   moduleResolveResult    =    new   DefaultBuildableComponentResolveResult (  )  ;", "componentMetaDataResolver . resolve ( componentId ,    new   DefaultComponentOverrideMetadata (  )  ,    moduleResolveResult )  ;", "ComponentResolveMetadata   component    =    moduleResolveResult . getMetadata (  )  ;", "DefaultComponentArtifactsResult   componentResult    =    new   DefaultComponentArtifactsResult ( component . getId (  )  )  ;", "for    ( Class <  ?    extends   Artifact >    artifactType    :    artifactTypes )     {", "addArtifacts ( componentResult ,    artifactType ,    component ,    aver )  ;", "}", "return   componentResult ;", "}", "METHOD_END"], "methodName": ["buildComponentResult"], "fileName": "org.gradle.api.internal.artifacts.query.DefaultArtifactResolutionQuery"}, {"methodBody": ["METHOD_START", "{", "return   componentTypeRegistry . getComponentRegistration ( componentType )  . getArtifactType ( requestedType )  ;", "}", "METHOD_END"], "methodName": ["convertType"], "fileName": "org.gradle.api.internal.artifacts.query.DefaultArtifactResolutionQuery"}, {"methodBody": ["METHOD_START", "{", "Set < ComponentResult >    componentResults    =    Sets . newHashSet (  )  ;", "for    ( ComponentIdentifier   componentId    :    componentIds )     {", "try    {", "ComponentIdentifier   validId    =    validateComponentIdentifier ( componentId )  ;", "componentResults . add ( buildComponentResult ( validId ,    componentMetaDataResolver ,    artifactResolver )  )  ;", "}    catch    ( Throwable   t )     {", "componentResults . add ( new   DefaultUnresolvedComponentResult ( componentId ,    t )  )  ;", "}", "}", "return   new   Result ( componentResults )  ;", "}", "METHOD_END"], "methodName": ["createResult"], "fileName": "org.gradle.api.internal.artifacts.query.DefaultArtifactResolutionQuery"}, {"methodBody": ["METHOD_START", "{", "if    (  ( componentType )     =  =    null )     {", "throw   new   IllegalStateException (  \" Must   specify   component   type   and   artifacts   to   query .  \"  )  ;", "}", "List < ResolutionAwareRepository >    repositories    =    CollectionUtils . collect ( repositoryHandler ,    Transformers . cast ( ResolutionAwareRepository . class )  )  ;", "ResolutionStrategyInternal   resolutionStrategy    =    configurationContainer . detachedConfiguration (  )  . getResolutionStrategy (  )  ;", "ComponentResolvers   componentResolvers    =    ivyFactory . create ( resolutionStrategy ,    repositories ,    metadataHandler . getComponentMetadataProcessor (  )  )  ;", "ComponentMetaDataResolver   componentMetaDataResolver    =    componentResolvers . getComponentResolver (  )  ;", "ArtifactResolver   artifactResolver    =    new   ErrorHandlingArtifactResolver ( componentResolvers . gever (  )  )  ;", "return   createResult ( componentMetaDataResolver ,    artifactResolver )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.api.internal.artifacts.query.DefaultArtifactResolutionQuery"}, {"methodBody": ["METHOD_START", "{", "CollectionUtils . addAll ( this . componentIds ,    componentIds )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["forComponents"], "fileName": "org.gradle.api.internal.artifacts.query.DefaultArtifactResolutionQuery"}, {"methodBody": ["METHOD_START", "{", "CollectionUtils . addAll ( this . componentIds ,    componentIds )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["forComponents"], "fileName": "org.gradle.api.internal.artifacts.query.DefaultArtifactResolutionQuery"}, {"methodBody": ["METHOD_START", "{", "componentIds . add ( DefaultModuleComponentIdentifier . newId ( group ,    name ,    version )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["forModule"], "fileName": "org.gradle.api.internal.artifacts.query.DefaultArtifactResolutionQuery"}, {"methodBody": ["METHOD_START", "{", "if    ( componentId   instanceof   ModuleComponentIdentifier )     {", "return   componentId ;", "}", "if    ( componentId   instanceof   ProjectComponentIdentifier )     {", "throw   new   IllegalArgumentException ( String . format (  \" Cannot   query      for   a   project   component    (  % s )  .  \"  ,    componentId . getDisplayName (  )  )  )  ;", "}", "throw   new   IllegalArgumentException ( String . format (  \" Cannot   resolve   the      for   component    % s   with   unsupported   type    % s .  \"  ,    componentId . getDisplayName (  )  ,    componentId . getClass (  )  . getName (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["validateComponentIdentifier"], "fileName": "org.gradle.api.internal.artifacts.query.DefaultArtifactResolutionQuery"}, {"methodBody": ["METHOD_START", "{", "return   withArtifacts ( componentType ,    Arrays . asList ( artifactTypes )  )  ;", "}", "METHOD_END"], "methodName": ["withArtifacts"], "fileName": "org.gradle.api.internal.artifacts.query.DefaultArtifactResolutionQuery"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . componentType )     !  =    null )     {", "throw   new   IllegalStateException (  \" Cannot   specify   component   type   multiple   times .  \"  )  ;", "}", "this . componentType    =    componentType ;", "thisTypes . addAllTypes )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["withArtifacts"], "fileName": "org.gradle.api.internal.artifacts.query.DefaultArtifactResolutionQuery"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultArtifactResolutionQuery ( configurationContainer ,    repositoryHandler ,    ivyFactory ,    metadataHandler ,    componentTypeRegistry )  ;", "}", "METHOD_END"], "methodName": ["createArtifactResolutionQuery"], "fileName": "org.gradle.api.internal.artifacts.query.DefaultArtifactResolutionQueryFactory"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.api.internal.artifacts.repositories.AbstractArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "isPartOfContainer    =    true ;", "}", "METHOD_END"], "methodName": ["onAddToContainer"], "fileName": "org.gradle.api.internal.artifacts.repositories.AbstractArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "if    ( isPartOfContainer )     {", "throw   new   IllegalStateException (  \" The   name   of   an      cannot   be   changed   after   it   has   been   added   to   a   repository   container .    You   should   set   the   name   when   creating   the   repository .  \"  )  ;", "}", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.gradle.api.internal.artifacts.repositories.AbstractArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "if    ( publicType    =  =     ( PasswordCredentials . class )  )     {", "return   Cast . uncheckedCast ( DefaultPasswordCredentials . class )  ;", "} else", "if    ( publicType    =  =     ( credentials . AwsCredentials . class )  )     {", "return   Cast . uncheckedCast ( class )  ;", "} else    {", "throw   new   IllegalArgumentException ( String . format (  \" Unknown   credentials   type :     '  % s '     ( supported   types :     % s   and    % s )  .  \"  ,    publicType . getName (  )  ,    PasswordCredentials . class . getName (  )  ,    credentials . AwsCredentials . class . getName (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getCredentialsImplType"], "fileName": "org.gradle.api.internal.artifacts.repositories.AuthenticationSupporter"}, {"methodBody": ["METHOD_START", "{", "if    ( PasswordCredentials . class . isAssignableFrom ( implType )  )     {", "return   Cast . uncheckedCast ( PasswordCredentials . class )  ;", "} else", "if    ( credentials . AwsCredentials . class . isAssignableFrom ( implType )  )     {", "return   Cast . uncheckedCast ( credentials . AwsCredentials . class )  ;", "} else    {", "throw   new   IllegalArgumentException ( String . format (  \" Unknown   credentials   implementation   type :     '  % s '     ( supported   types :     % s   and    % s )  .  \"  ,    implType . getName (  )  ,    DefaultPasswordCredentials . class . getName (  )  ,    getName (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getCredentialsPublicType"], "fileName": "org.gradle.api.internal.artifacts.repositories.AuthenticationSupporter"}, {"methodBody": ["METHOD_START", "{", "return   instantiator . newInstance ( AuthenticationSupporter . getCredentialsImplType ( clazz )  )  ;", "}", "METHOD_END"], "methodName": ["newCredentials"], "fileName": "org.gradle.api.internal.artifacts.repositories.AuthenticationSupporter"}, {"methodBody": ["METHOD_START", "{", "for    ( Authentication   authentication    :    authenticationContainer )     {", "(  ( AuthenticationInternal )     ( authentication )  )  . setCredentials ( getConfiguredCredentials (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["populateAuthenticationCredentials"], "fileName": "org.gradle.api.internal.artifacts.repositories.AuthenticationSupporter"}, {"methodBody": ["METHOD_START", "{", "T   t    =    newCredentials ( clazz )  ;", "credentials    =    t ;", "return   t ;", "}", "METHOD_END"], "methodName": ["setCredentials"], "fileName": "org.gradle.api.internal.artifacts.repositories.AuthenticationSupporter"}, {"methodBody": ["METHOD_START", "{", "DefaultAuthenticationContainer   container    =    instantiator . newInstance ( DefaultAuthenticationContainer . class ,    instantiator )  ;", "for    ( Map . Entry < Class < Authentication >  ,    Class <  ?    extends   Authentication >  >    e    :    authenticationSchemeRegistry . getRegisteredSchemes (  )  . entrySet (  )  )     {", "container . registerBinding ( e . getKey (  )  ,    e . getValue (  )  )  ;", "}", "return   container ;", "}", "METHOD_END"], "methodName": ["createAuthenticationContainer"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultBaseRepositoryFactory"}, {"methodBody": ["METHOD_START", "{", "return   instantiator . newInstance ( DefaultFlatDirArtifactRepository . class ,    fileResolver ,    transportFactory ,    locallyAvailableResourceFinder ,    artifactFileStore ,    moduleIdentifierFactory ,    ivyMetadataFactory )  ;", "}", "METHOD_END"], "methodName": ["createFlatDirRepository"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultBaseRepositoryFactory"}, {"methodBody": ["METHOD_START", "{", "MavenArtifactRepository   mavenRepository    =    createMavenRepository ( new   DefaultBaseRepositoryFactory . NamedMavenRepositoryDescriber ( RepositoryHandler . GOOGLE _ URL )  )  ;", "mavenRepository . setUrl ( GOOGLE _ URL )  ;", "return   mavenRepository ;", "}", "METHOD_END"], "methodName": ["createGoogleRepository"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultBaseRepositoryFactory"}, {"methodBody": ["METHOD_START", "{", "return   instantiator . newInstance ( DefaultIvyArtifactRepository . class ,    fileResolver ,    transportFactory ,    locallyAvailableResourceFinder ,    artifactFileStore ,    externalResourcesFileStore ,    createAuthenticationContainer (  )  ,    ivyContextManager ,    moduleIdentifierFactory ,    instantiatorFactory ,    fileResourceRepository ,    metadataParser ,    featurePreviews ,    ivyMetadataFactory )  ;", "}", "METHOD_END"], "methodName": ["createIvyRepository"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultBaseRepositoryFactory"}, {"methodBody": ["METHOD_START", "{", "MavenArtifactRepository   mavenRepository    =    createMavenRepository ( new   DefaultBaseRepositoryFactory . NamedMavenRepositoryDescriber ( DefaultRepositoryHandler . BINTRAY _ JCENTER _ URL )  )  ;", "mavenRepository . setUrl ( DefaultRepositoryHandler . BINTRAY _ JCENTER _ URL )  ;", "return   mavenRepository ;", "}", "METHOD_END"], "methodName": ["createJCenterRepository"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultBaseRepositoryFactory"}, {"methodBody": ["METHOD_START", "{", "MavenArtifactRepository   mavenRepository    =    createMavenRepository ( new   DefaultBaseRepositoryFactory . NamedMavenRepositoryDescriber ( RepositoryHandler . MAVEN _ CENTRAL _ URL )  )  ;", "mavenRepository . setUrl ( MAVEN _ CENTRAL _ URL )  ;", "return   mavenRepository ;", "}", "METHOD_END"], "methodName": ["createMavenCentralRepository"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultBaseRepositoryFactory"}, {"methodBody": ["METHOD_START", "{", "MavenArtifactRepository   mavenRepository    =    instantiator . newInstance ( DefaultMavenLocalArtifactRepository . class ,    fileResolver ,    transportFactory ,    locallyAvailableResourceFinder ,    instantiatorFactory ,    artifactFileStore ,    pomParser ,    metadataParser ,    createAuthenticationContainer (  )  ,    moduleIdentifierFactory ,    fileResourceRepository ,    featurePreviews ,    mavenMetadataFactory )  ;", "File   localMavenRepository    =    localMavenRepositoryLocator . getLocalMavenRepository (  )  ;", "mavenRepository . setUrl ( localMavenRepository )  ;", "return   mavenRepository ;", "}", "METHOD_END"], "methodName": ["createMavenLocalRepository"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultBaseRepositoryFactory"}, {"methodBody": ["METHOD_START", "{", "return   instantiator . newInstance ( DefaultMavenArtifactRepository . class ,    fileResolver ,    transportFactory ,    locallyAvailableResourceFinder ,    instantiatorFactory ,    artifactFileStore ,    pomParser ,    metadataParser ,    createAuthenticationContainer (  )  ,    moduleIdentifierFactory ,    externalResourcesFileStore ,    fileResourceRepository ,    featurePreviews ,    mavenMetadataFactory )  ;", "}", "METHOD_END"], "methodName": ["createMavenRepository"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultBaseRepositoryFactory"}, {"methodBody": ["METHOD_START", "{", "return   instantiator . newInstance ( DefaultMavenArtifactRepository . class ,    describer ,    fileResolver ,    transportFactory ,    locallyAvailableResourceFinder ,    instantiatorFactory ,    artifactFileStore ,    pomParser ,    metadataParser ,    createAuthenticationContainer (  )  ,    moduleIdentifierFactory ,    externalResourcesFileStore ,    fileResourceRepository ,    featurePreviews ,    mavenMetadataFactory )  ;", "}", "METHOD_END"], "methodName": ["createMavenRepository"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultBaseRepositoryFactory"}, {"methodBody": ["METHOD_START", "{", "MetadataSource   artifactMetadataSource    =    new   DefaultArtifactMetadataSource ( metadataFactory )  ;", "return   new   DefaultImmutableMetadataSources ( Collections .  < MetadataSource <  ?  >  > singletonList ( artifactMetadataSource )  )  ;", "}", "METHOD_END"], "methodName": ["createMetadataSources"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultFlatDirArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "return   createRealResolver (  )  ;", "}", "METHOD_END"], "methodName": ["createPublisher"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultFlatDirArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "Set < File >    dirs    =    getDirs (  )  ;", "if    ( dirs . isEmpty (  )  )     {", "throw   new   InvalidUserDataException (  \" You   must   specify   at   least   one   directory   for   a   flat   directory   y .  \"  )  ;", "}", "IvyResolver   resolver    =    new   IvyResolver ( getName (  )  ,    transportFactory . createTransport (  \" file \"  ,    getName (  )  ,    Collections .  < Authentication > emptyList (  )  )  ,    locallyAvailableResourceFinder ,    false ,    artifactFileStore ,    moduleIdentifierFactory ,    null ,    createMetadataSources (  )  ,    IvyMetadataArtifactProvider . INSTANCE )  ;", "for    ( File   root    :    dirs )     {", "resolver . addArtifactLocation ( root . toURI (  )  ,     \"  /  [ artifact ]  -  [ revision ]  (  -  [ classifier ]  )  .  [ ext ]  \"  )  ;", "resolver . addArtifactLocation ( root . toURI (  )  ,     \"  /  [ artifact ]  (  -  [ classifier ]  )  .  [ ext ]  \"  )  ;", "}", "return   resolver ;", "}", "METHOD_END"], "methodName": ["createRealResolver"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultFlatDirArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "return   createRealResolver (  )  ;", "}", "METHOD_END"], "methodName": ["createResolver"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultFlatDirArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "dirs ( dir )  ;", "}", "METHOD_END"], "methodName": ["dir"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultFlatDirArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "this . dirs . addAll ( Arrays . asList ( dirs )  )  ;", "}", "METHOD_END"], "methodName": ["dirs"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultFlatDirArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "return   fileResolver . resolveFiles ( dirs )  . getFiles (  )  ;", "}", "METHOD_END"], "methodName": ["getDirs"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultFlatDirArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "this . dirs    =    Lists . newArrayList ( dirs )  ;", "}", "METHOD_END"], "methodName": ["setDirs"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultFlatDirArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "setDirs (  (  ( Iterable <  ?  >  )     ( dirs )  )  )  ;", "}", "METHOD_END"], "methodName": ["setDirs"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultFlatDirArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "additionalPatternsLayout . artifactPatterns . add ( pattern )  ;", "}", "METHOD_END"], "methodName": ["artifactPattern"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultIvyArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "if    (  ( componentMetadataSupplierClass )     =  =    null )     {", "return    . NO _ METADATA _ SUPPLIER ;", "}", "return   new   Factory < ComponentMetadataSupplier >  (  )     {", "@ Override", "public   ComponentMetadataSupplier   create (  )     {", "return   instantiator . newInstance ( componentMetadataSupplierClass ,    componentMetadataSupplierParams )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["createComponentMetadataSupplierFactory"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultIvyArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "DefaultServiceRegistry   registry    =    new   DefaultServiceRegistry (  )  ;", "registry . addProvider ( new   Object (  )     {", "ResourceAccessor   createResourceAccessor (  )     {", "return   createAccessor ( transport )  ;", "}", "}  )  ;", "return   instantiatorFactory . inject ( registry )  ;", "}", "METHOD_END"], "methodName": ["createInjectorForMetadataSupplier"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultIvyArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "return   new   IvyContextualMetaDataParser < MutableIvyModuleResolveMetadata >  ( ivyContextManager ,    new   IvyXmlModuleDescriptorParser ( new   IvyModuleDescriptorConverter ( moduleIdentifierFactory )  ,    moduleIdentifierFactory ,    fileResourceRepository ,    metadataFactory )  )  ;", "}", "METHOD_END"], "methodName": ["createIvyDescriptorParser"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultIvyArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < MetadataSource <  ?  >  >    sources    =    ImmutableList . builder (  )  ;", "if    ( metadataSources . gradleMetadata )     {", "sources . add ( new   DefaultGradleModuleMetadataSource ( moduleMetadataParser ,    metadataFactory ,    true )  )  ;", "}", "if    ( metadataSources . ivyDescriptor )     {", "sources . add ( new   DescriptorMetadataSource ( IvyMetadataArtifactProvider . INSTANCE ,    createIvyDescriptorParser (  )  ,    fileResourceRepository ,    moduleIdentifierFactory )  )  ;", "}", "if    ( metadataSources . artifact )     {", "sources . add ( new   DefaultArtifactMetadataSource ( metadataFactory )  )  ;", "}", "return   new   DefaultImmutableMetadataSources ( sources . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["createMetadataSources"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultIvyArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "return   createRealResolver (  )  ;", "}", "METHOD_END"], "methodName": ["createPublisher"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultIvyArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "URI   uri    =    getUrl (  )  ;", "Set < String >    schemes    =    new   LinkedHashSet < String >  (  )  ;", "layout . addSchemes ( uri ,    schemes )  ;", "additionalPatsLayout . addSchemes ( uri ,    schemes )  ;", "IvyResolver   resolver    =    createResolver ( schemes )  ;", "layout . apply ( uri ,    resolver )  ;", "additionalPatsLayout . apply ( uri ,    resolver )  ;", "return   resolver ;", "}", "METHOD_END"], "methodName": ["createRealResolver"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultIvyArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "return   new   ExternalRepositoryResourceAccessor ( getUrl (  )  ,    transport . getResourceAccessor (  )  ,    externalResourcesFileStore )  ;", "}", "METHOD_END"], "methodName": ["createRepositoryAccessor"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultIvyArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "return   createRealResolver (  )  ;", "}", "METHOD_END"], "methodName": ["createResolver"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultIvyArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "if    ( schemes . isEmpty (  )  )     {", "throw   new   InvalidUserDataException (  \" You   must   specify   a   base   url   or   at   least   one   artifact   pattern   for   an   Ivy   y .  \"  )  ;", "}", "return   createResolver ( transportFactory . createTransport ( schemes ,    getName (  )  ,    getConfiguredAuthentication (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createResolver"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultIvyArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "Factory < ComponentMetadataSupplier >    supplierFactory    =    createComponentMetadataSupplierFactory ( createInjectorForMetadataSupplier ( transport )  )  ;", "return   new   IvyResolver ( getName (  )  ,    transport ,    locallyAvailableResourceFinder ,    metaDataProvider . dynamicResolve ,    FileStore ,    moduleIdentifierFactory ,    supplierFactory ,    createMetadataSources (  )  ,    IvyMetadataArtifactProvider . INSTANCE )  ;", "}", "METHOD_END"], "methodName": ["createResolver"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultIvyArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "return   metaDataProvider ;", "}", "METHOD_END"], "methodName": ["getResolve"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultIvyArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "return    ( baseUrl )     =  =    null    ?    null    :    fileResolver . resolveUri ( baseUrl )  ;", "}", "METHOD_END"], "methodName": ["getUrl"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultIvyArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "additionalPatternsLayout . ivyPatterns . add ( pattern )  ;", "}", "METHOD_END"], "methodName": ["ivyPattern"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultIvyArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "if    (  \" ivy \"  . equals ( layoutName )  )     {", "layout    =    instantiator . newInstance ( IvyRepositoryLayout . class )  ;", "} else", "if    (  \" maven \"  . equals ( layoutName )  )     {", "layout    =    instantiator . newInstance ( layout . MavenRepositoryLayout . class )  ;", "} else", "if    (  \" pattern \"  . equals ( layoutName )  )     {", "layout    =    instantiator . newInstance ( layout . DefaultIvyPatternRepositoryLayout . class )  ;", "} else    {", "layout    =    instantiator . newInstance ( layout . GradleRepositoryLayout . class )  ;", "}", "}", "METHOD_END"], "methodName": ["layout"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultIvyArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "layout ( layoutName ,    ConfigureUtil .  < RepositoryLayout > configureUsing ( config )  )  ;", "}", "METHOD_END"], "methodName": ["layout"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultIvyArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "layout ( layoutName )  ;", "(  ( Aion )     ( config )  )  . execute ( layout )  ;", "}", "METHOD_END"], "methodName": ["layout"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultIvyArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "this . componentMetadataSupplierClass    =    ruleClass ;", "this . componentMetadataSupplierParams    =     . NO _ PARAMS ;", "}", "METHOD_END"], "methodName": ["setMetadataSupplier"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultIvyArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "baseUrl    =    url ;", "}", "METHOD_END"], "methodName": ["setUrl"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultIvyArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "additionalUrls . addAll ( Lists . newArrayList ( urls )  )  ;", "}", "METHOD_END"], "methodName": ["artifactUrls"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultMavenArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < MetadataSource <  ?  >  >    sources    =    ImmutableList . builder (  )  ;", "if    ( metadataSources . gradleMetadata )     {", "boolean   listVersionsForGradleMetadata    =     !  ( metadataSources . mavenPom )  ;", "sources . add ( new   DefaultGradleModuleMetadataSource ( getMetadataParser (  )  ,    metadataFactory ,    listVersionsForGradleMetadata )  )  ;", "}", "if    ( metadataSources . mavenPom )     {", "sources . add ( new   PomMetadataSource ( MavenMetadataArtifactProvider . INSTANCE ,    getPomParser (  )  ,    fileResourceRepository ,    getMetadataValidationServices (  )  ,    mavenMetadataLoader )  )  ;", "}", "if    ( metadataSources . artifact )     {", "sources . add ( new   DefaultArtifactMetadataSource ( metadataFactory )  )  ;", "}", "return   new   DefaultImmutableMetadataSources ( sources . build (  )  )  ;", "}", "METHOD_END"], "methodName": ["createMetadataSources"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultMavenArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "return   createRealResolver (  )  ;", "}", "METHOD_END"], "methodName": ["createPublisher"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultMavenArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "URI   rootUri    =    getUrl (  )  ;", "if    ( rootUri    =  =    null )     {", "throw   new   InvalidUserDataException (  \" You   must   specify   a   URL   for   a   Maven   y .  \"  )  ;", "}", "MavenResolver   resolver    =    createResolver ( rootUri )  ;", "for    ( URI   repoUrl    :    getArtifactUrls (  )  )     {", "resolver . addArtifactLocation ( repoUrl )  ;", "}", "return   resolver ;", "}", "METHOD_END"], "methodName": ["createRealResolver"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultMavenArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "return   createRealResolver (  )  ;", "}", "METHOD_END"], "methodName": ["createResolver"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultMavenArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "RepositoryTransport   transport    =    getTransport ( rootUri . getScheme (  )  )  ;", "MavenMetadataLoader   mavenMetadataLoader    =    new   MavenMetadataLoader ( transport . getResourceAccessor (  )  ,    resourcesFileStore )  ;", "ImmutableMetadataSources   metadataSources    =    createMetadataSources ( mavenMetadataLoader )  ;", "return   new   MavenResolver ( getName (  )  ,    rootUri ,    transport ,    locallyAvailableResourceFinder ,    artifactFileStore ,    moduleIdentifierFactory ,    metadataSources ,    MavenMetadataArtifactProvider . INSTANCE ,    mavenMetadataLoader )  ;", "}", "METHOD_END"], "methodName": ["createResolver"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultMavenArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "return   artifactFileStore ;", "}", "METHOD_END"], "methodName": ["getArtifactFileStore"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultMavenArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "Set < URI >    result    =    new   LinkedHashSet < URI >  (  )  ;", "for    ( Object   additionalUrl    :    additionalUrls )     {", "result . add ( fileResolver . resolveUri ( additionalUrl )  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["getArtifactUrls"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultMavenArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "return   locallyAvailableResourceFinder ;", "}", "METHOD_END"], "methodName": ["getLocallyAvailableResourceFinder"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultMavenArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "return   metadataParser ;", "}", "METHOD_END"], "methodName": ["getMetadataParser"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultMavenArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "return   DefaultMavenArtifactRepository . NO _ OP _ VALIDATION _ SERVICES ;", "}", "METHOD_END"], "methodName": ["getMetadataValidationServices"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultMavenArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "return   pomParser ;", "}", "METHOD_END"], "methodName": ["getPomParser"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultMavenArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "return   resourcesFileStore ;", "}", "METHOD_END"], "methodName": ["getResourcesFileStore"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultMavenArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "return   transportFactory . createTransport ( scheme ,    getName (  )  ,    getConfiguredAuthentication (  )  )  ;", "}", "METHOD_END"], "methodName": ["getTransport"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultMavenArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "return    ( url )     =  =    null    ?    null    :    fileResolver . resolveUri ( url )  ;", "}", "METHOD_END"], "methodName": ["getUrl"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultMavenArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "additionalUrls    =    Lists . newArrayList ( urls )  ;", "}", "METHOD_END"], "methodName": ["setArtifactUrls"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultMavenArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "this . url    =    url ;", "}", "METHOD_END"], "methodName": ["setUrl"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultMavenArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "this . url    =    url ;", "}", "METHOD_END"], "methodName": ["setUrl"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultMavenArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "URI   rootUri    =    getUrl (  )  ;", "if    ( rootUri    =  =    null )     {", "throw   new   InvalidUserDataException (  \" You   must   specify   a   URL   for   a   Maven   repository .  \"  )  ;", "}", "Transport   transport    =    getTransport ( rootUri . getScheme (  )  )  ;", "MavenMetadataLoader   mavenMetadataLoader    =    new   MavenMetadataLoader ( transport . getResourceAccessor (  )  ,    getResourcesFileStore (  )  )  ;", "MavenResolver   resolver    =    new   MavenResolver ( getName (  )  ,    rootUri ,    transport ,    getLocallyAvailableResourceFinder (  )  ,    getArtifactFileStore (  )  ,    moduleIdentifierFactory ,    createMetadataSources ( mavenMetadataLoader )  ,    MavenMetadataArtifactProvider . INSTANCE ,    mavenMetadataLoader )  ;", "for    ( URI   repoUrl    :    getArtifactUrls (  )  )     {", "resolver . addArtifactLocation ( repoUrl )  ;", "}", "return   resolver ;", "}", "METHOD_END"], "methodName": ["createRealResolver"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultMavenLocalArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultMavenLocalArtifactRepository . MavenLocalMetadataValidator (  )  ;", "}", "METHOD_END"], "methodName": ["getMetadataValidationServices"], "fileName": "org.gradle.api.internal.artifacts.repositories.DefaultMavenLocalArtifactRepository"}, {"methodBody": ["METHOD_START", "{", "if    ( baseUri    !  =    null )     {", "schemadd ( baseUri . getScheme (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addSchemes"], "fileName": "org.gradle.api.internal.artifacts.repositories.layout.AbstractRepositoryLayout"}, {"methodBody": ["METHOD_START", "{", "artifactPatterns . add ( pattern )  ;", "}", "METHOD_END"], "methodName": ["artifact"], "fileName": "org.gradle.api.internal.artifacts.repositories.layout.DefaultIvyPatternRepositoryLayout"}, {"methodBody": ["METHOD_START", "{", "return   m 2 compatible ;", "}", "METHOD_END"], "methodName": ["getM2Compatible"], "fileName": "org.gradle.api.internal.artifacts.repositories.layout.DefaultIvyPatternRepositoryLayout"}, {"methodBody": ["METHOD_START", "{", "ivyPatterns . add ( pattern )  ;", "}", "METHOD_END"], "methodName": ["ivy"], "fileName": "org.gradle.api.internal.artifacts.repositories.layout.DefaultIvyPatternRepositoryLayout"}, {"methodBody": ["METHOD_START", "{", "this . m 2 compatible    =    m 2 compatible ;", "}", "METHOD_END"], "methodName": ["setM2compatible"], "fileName": "org.gradle.api.internal.artifacts.repositories.layout.DefaultIvyPatternRepositoryLayout"}, {"methodBody": ["METHOD_START", "{", "if    ( baseUri    =  =    null )     {", "return ;", "}", "resolver . addALocation ( baseUri ,    GRADLE _ ARTIFACT _ PATTERN )  ;", "resolver . addDescriptorLocation ( baseUri ,    GRADLE _ IVY _ PATTERN )  ;", "}", "METHOD_END"], "methodName": ["apply"], "fileName": "org.gradle.api.internal.artifacts.repositories.layout.GradleRepositoryLayout"}, {"methodBody": ["METHOD_START", "{", "if    ( baseUri    =  =    null )     {", "return ;", "}", "resolver . addALocation ( baseUri ,    IVY _ ARTIFACT _ PATTERN )  ;", "resolver . addDescriptorLocation ( baseUri ,    IVY _ ARTIFACT _ PATTERN )  ;", "}", "METHOD_END"], "methodName": ["apply"], "fileName": "org.gradle.api.internal.artifacts.repositories.layout.IvyRepositoryLayout"}, {"methodBody": ["METHOD_START", "{", "if    ( baseUri    =  =    null )     {", "return ;", "}", "resolver . setM 2 compatible ( true )  ;", "resolver . addALocation ( baseUri ,    MAVEN _ ARTIFACT _ PATTERN )  ;", "resolver . addDescriptorLocation ( baseUri ,    MAVEN _ IVY _ PATTERN )  ;", "}", "METHOD_END"], "methodName": ["apply"], "fileName": "org.gradle.api.internal.artifacts.repositories.layout.MavenRepositoryLayout"}, {"methodBody": ["METHOD_START", "{", "String   uriPart    =    baseUri . toString (  )  ;", "String   join    =     (  ( uriPart . endsWith (  \"  /  \"  )  )     |  |     (  ( pPart . length (  )  )     =  =     0  )  )     ?     \"  \"     :     \"  /  \"  ;", "return    ( uriPart    +    join )     +    pPart ;", "}", "METHOD_END"], "methodName": ["constructAbsolutePattern"], "fileName": "org.gradle.api.internal.artifacts.repositories.layout.ResolvedPattern"}, {"methodBody": ["METHOD_START", "{", "MavenMetadata   metadata    =    new   MavenMetadata (  )  ;", "try    {", "parseMavenMetadataInfo ( metadataLocation ,    metadata )  ;", "}    catch    ( MissingResourceException   e )     {", "throw   e ;", "}    catch    ( Exception   e )     {", "throw   new   resources . ResourceException ( metadataLocation . getUri (  )  ,    String . format (  \" Unable   to   load   Maven   meta - data   from    % s .  \"  ,    metadataLocation )  ,    e )  ;", "}", "return   metadata ;", "}", "METHOD_END"], "methodName": ["load"], "fileName": "org.gradle.api.internal.artifacts.repositories.maven.MavenMetadataLoader"}, {"methodBody": ["METHOD_START", "{", "ExternalResource   resource    =    cacheAwareExternalResourceAccessor . getResource ( metadataLocation ,    null ,    new   CacheAwareExternalResourceAccessor . ResourceFileStore (  )     {", "@ Override", "public   LocallyAvailableResource   moveIntoCache ( File   downloadedResource )     {", "String   key    =    metadataLocation . toString (  )  ;", "return   resourcesFileStore . move ( key ,    downloadedResource )  ;", "}", "}  ,    null )  ;", "if    ( resource    =  =    null )     {", "throw   new   resources . MissingResourceException ( metadataLocation . getUri (  )  ,    String . format (  \" Maven   meta - data   not   available   at    % s \"  ,    metadataLocation )  )  ;", "}", "parseMavenMetadataInto ( resource ,    metadata )  ;", "}", "METHOD_END"], "methodName": ["parseMavenMetadataInfo"], "fileName": "org.gradle.api.internal.artifacts.repositories.maven.MavenMetadataLoader"}, {"methodBody": ["METHOD_START", "{", "MavenMetadataLoader . LOGGER . debug (  \" parsing   maven - metadata :     {  }  \"  ,    metadataResource )  ;", "metadataResource . withContent ( new   ErroringAction < InputStream >  (  )     {", "public   void   doExecute ( InputStream   inputStream )    throws   IOException ,    ParserConfigurationException ,    SAXException    {", "XMLHelper . parse ( inputStream ,    null ,    new   ContextualSAXHandler (  )     {", "public   void   endElement ( String   uri ,    String   localName ,    String   qName )    throws   SAXException    {", "if    (  \" metadata / versioning / snapshot / timestamp \"  . equals ( getContext (  )  )  )     {", "mavenMetadata . timestamp    =    getText (  )  ;", "}", "if    (  \" metadata / versioning / snapshot / buildNumber \"  . equals ( getContext (  )  )  )     {", "mavenMetadata . buildNumber    =    getText (  )  ;", "}", "if    (  \" metadata / versioning / versions / version \"  . equals ( getContext (  )  )  )     {", "mavenMetadata . versions . add ( getText (  )  . trim (  )  )  ;", "}", "super . endElement ( uri ,    localName ,    qName )  ;", "}", "}  ,    null )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["parseMavenMetadataInto"], "fileName": "org.gradle.api.internal.artifacts.repositories.maven.MavenMetadataLoader"}, {"methodBody": ["METHOD_START", "{", "final   Set < ExternalResourceName >    searched    =    Sets . newHashSet (  )  ;", "List < String >    versions    =    Lists . newArrayList (  )  ;", "boolean   hasResult    =    false ;", "for    ( ResourcePattern   pattern    :    patterns )     {", "ExternalResourceName   metadataLocation    =    pattern . toModulePath ( module )  . resolve (  \" maven - metadata . xml \"  )  ;", "if    ( searched . add ( metadataLocation )  )     {", "result . attempted ( metadataLocation )  ;", "try    {", "MavenMetadata   mavenMetaData    =    mavenMetadataLoader . load ( metadataLocation )  ;", "versions . addAll ( mavenMetaData . versions )  ;", "hasResult    =    true ;", "}    catch    ( MissingResourceException   e )     {", "}", "}", "}", "if    ( hasResult )     {", "result . listed ( versions )  ;", "}", "}", "METHOD_END"], "methodName": ["listVersions"], "fileName": "org.gradle.api.internal.artifacts.repositories.maven.MavenVersionLister"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( expected . equals ( actual )  )  )     {", "errors . add (  (  (  (  (  (  (  \" bad    \"     +    label )     +     \"  :    expected =  '  \"  )     +    expected )     +     \"  '    found =  '  \"  )     +    actual )     +     \"  '  \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkEquals"], "fileName": "org.gradle.api.internal.artifacts.repositories.metadata.AbstractRepositoryMetadataSource"}, {"methodBody": ["METHOD_START", "{", "checkModuleIdentifier ( expectedId ,    metadata . getModuleVersionId (  )  )  ;", "}", "METHOD_END"], "methodName": ["checkMetadataConsistency"], "fileName": "org.gradle.api.internal.artifacts.repositories.metadata.AbstractRepositoryMetadataSource"}, {"methodBody": ["METHOD_START", "{", "List < String >    errors    =    new   ArrayList < String >  (  )  ;", "checkEquals (  \" group \"  ,    expectedId . getGroup (  )  ,    actualId . getGroup (  )  ,    errors )  ;", "checkEquals (  \" module   name \"  ,    expectedId . getModule (  )  ,    actualId . getName (  )  ,    errors )  ;", "checkEquals (  \" version \"  ,    expectedId . getVersion (  )  ,    actualId . getVersion (  )  ,    errors )  ;", "if    (  ( errors . size (  )  )     >     0  )     {", "throw   new   MetaDataParseException ( String . format (  \" inconsistent   module      found .    Descriptor :     % s   Errors :     % s \"  ,    actualId ,    joinLines ( errors )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkModuleIdentifier"], "fileName": "org.gradle.api.internal.artifacts.repositories.metadata.AbstractRepositoryMetadataSource"}, {"methodBody": ["METHOD_START", "{", "IvyArtifactName   ivyArtifactName    =    metadataArtifactProvider . getMetaDataArtifactName ( moduleComponentIdentifier . getModule (  )  )  ;", "return   new   DefaultModuleDescriptorArtifactMetadata ( moduleComponentIdentifier ,    ivyArtifactName )  ;", "}", "METHOD_END"], "methodName": ["getMetaDataArtifactFor"], "fileName": "org.gradle.api.internal.artifacts.repositories.metadata.AbstractRepositoryMetadataSource"}, {"methodBody": ["METHOD_START", "{", "return   Joiner . on ( SystemProperties . getInstance (  )  . getLineSeparator (  )  )  . join ( lines )  ;", "}", "METHOD_END"], "methodName": ["joinLines"], "fileName": "org.gradle.api.internal.artifacts.repositories.metadata.AbstractRepositoryMetadataSource"}, {"methodBody": ["METHOD_START", "{", "ModuleComponentArtifactMetadata   artifact    =    getMetaDataArtifactFor ( moduleComponentIdentifier )  ;", "LocallyAvailableExternalResource   metadataArtifact    =    artifactResolver . resolveArtifact ( artifact ,    result )  ;", "if    ( metadataArtifact    !  =    null )     {", "ExternalResourceResolverDescriptorParseContext   context    =    new   ExternalResourceResolverDescriptorParseContext ( componentResolvers ,    fileResource )  ;", "return   parseMetaDataFromResource ( moduleComponentIdentifier ,    metadataArtifact ,    artifactResolver ,    context ,    repositoryName )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["parseMetaDataFromArtifact"], "fileName": "org.gradle.api.internal.artifacts.repositories.metadata.AbstractRepositoryMetadataSource"}, {"methodBody": ["METHOD_START", "{", "List < IvyArtifactName >    artifactNames    =    getArtifactNames ( moduleComponentIdentifier ,    overrideMetadata )  ;", "for    ( IvyArtifactName   artifact    :    artifactNames )     {", "if    ( artifactResolver . artifactExists ( new   DefaultModuleComponen ( moduleComponentIdentifier ,    artifact )  ,    result )  )     {", "return   mutableModuleMetadataFactory . missing ( moduleComponentIdentifier )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["createMetaDataFromDependencyArtifact"], "fileName": "org.gradle.api.internal.artifacts.repositories.metadata.DefaultArtifactMetadataSource"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( overrideMetadata . getArtifacts (  )  . isEmpty (  )  )  )     {", "return   overrideMetadata . getArtifacts (  )  ;", "}", "IvyArtifactName   d    =    new   DefaultIvyArtifactName ( moduleComponentIdentifier . getModule (  )  ,    artifactType ,    artifactExtension )  ;", "return   ImmutableList . of ( d )  ;", "}", "METHOD_END"], "methodName": ["getArtifactNames"], "fileName": "org.gradle.api.internal.artifacts.repositories.metadata.DefaultArtifactMetadataSource"}, {"methodBody": ["METHOD_START", "{", "String   moduleName    =    dependency . getSelector (  )  . getModule (  )  ;", "List < IvyArtifactName >     =    dependency . getArtifacts (  )  ;", "if    ( isEmpty (  )  )     {", "return   new   DefaultIvyArtifactName ( moduleName ,     \" jar \"  ,     \" jar \"  )  ;", "}", "return   get (  0  )  ;", "}", "METHOD_END"], "methodName": ["getPrimaryDependencyArtifact"], "fileName": "org.gradle.api.internal.artifacts.repositories.metadata.DefaultArtifactMetadataSource"}, {"methodBody": ["METHOD_START", "{", "MutableIvyModuleResolveMetadata   metaData    =    metaDataParser . parseMetaData ( context ,    cachedResource )  ;", "checkMetadataConsistency ( moduleComponentIdentifier ,    metaData )  ;", "return   metaData ;", "}", "METHOD_END"], "methodName": ["parseMetaDataFromResource"], "fileName": "org.gradle.api.internal.artifacts.repositories.metadata.DefaultIvyDescriptorMetadataSource"}, {"methodBody": ["METHOD_START", "{", "MutableMavenModuleResolveMetadata   metaData    =    pomParser . parseMetaData ( context ,    cachedResource )  ;", "if    ( moduleComponentIdentifier   instanceof   MavenUniqueSnapshotComponentIdentifier )     {", "MavenUniqueSnapshotComponentIdentifier   snapshotComponentIdentifier    =     (  ( MavenUniqueSnapshotComponentIdentifier )     ( moduleComponentIdentifier )  )  ;", "checkMetadataConsistency ( snapshotComponentIdentifier . getSnapshotComponent (  )  ,    metaData )  ;", "metaData . setId ( snapshotComponentIdentifier )  ;", "metaData . setSnapshotTimestamp ( snapshotComponentIdentifier . getTimestamp (  )  )  ;", "} else    {", "checkMetadataConsistency ( moduleComponentIdentifier ,    metaData )  ;", "}", "MutableMavenModuleResolveMetadata   result    =    MavenResolver . processMetaData ( metaData )  ;", "if    ( validator . isUsableModule ( repoName ,    result ,    artifactResolver )  )     {", "return   result ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["parseMetaDataFromResource"], "fileName": "org.gradle.api.internal.artifacts.repositories.metadata.DefaultMavenPomMetadataSource"}, {"methodBody": ["METHOD_START", "{", "return   moduleIdentifierFactory . moduleWithVersion ( from . getGroup (  )  ,    from . getModule (  )  ,    from . getVersion (  )  )  ;", "}", "METHOD_END"], "methodName": ["asVersionIdentifier"], "fileName": "org.gradle.api.internal.artifacts.repositories.metadata.IvyMutableModuleMetadataFactory"}, {"methodBody": ["METHOD_START", "{", "return   create ( from ,    dependencies ,    IvyMutableModuleMetadataFactory . DEFAULT _ CONFIGURATION _ LIST ,    createDefaultArtifact ( from )  ,    ImmutableList .  < Exclude > of (  )  )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.api.internal.artifacts.repositories.metadata.IvyMutableModuleMetadataFactory"}, {"methodBody": ["METHOD_START", "{", "ModuleVersionIdentifier   mvi    =    asVersionIdentifier ( from )  ;", "return   new   DefaultMutableIvyModuleResolv ( attributesFactory ,    mvi ,    from ,    dependencies ,    configurationDefinitions ,    artifactDefinitions ,    excludes )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.api.internal.artifacts.repositories.metadata.IvyMutableModuleMetadataFactory"}, {"methodBody": ["METHOD_START", "{", "return   ImmutableList . of ( new   Artifact ( new   DefaultIvyArtifactName ( from . getModule (  )  ,     \" jar \"  ,     \" jar \"  )  ,    IvyMutableModuleMetadataFactory . SINGLE _ DEFAULT _ CONFIGURATION _ NAME )  )  ;", "}", "METHOD_END"], "methodName": ["createDefaultArtifact"], "fileName": "org.gradle.api.internal.artifacts.repositories.metadata.IvyMutableModuleMetadataFactory"}, {"methodBody": ["METHOD_START", "{", "return   moduleIdentifierFactory . moduleWithVersion ( from . getGroup (  )  ,    from . getModule (  )  ,    from . getVersion (  )  )  ;", "}", "METHOD_END"], "methodName": ["asVersionIdentifier"], "fileName": "org.gradle.api.internal.artifacts.repositories.metadata.MavenMutableModuleMetadataFactory"}, {"methodBody": ["METHOD_START", "{", "ModuleVersionIdentifier   mvi    =    asVersionIdentifier ( from )  ;", "return   new   DefaultMutableMavenModuleResolv ( mvi ,    from ,    dependencies ,    attributesFactory ,    objectInstantiator ,    featurePreviews . isFeatureEnabled ( IMPROVED _ POM _ SUPPORT )  )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.api.internal.artifacts.repositories.metadata.MavenMutableModuleMetadataFactory"}, {"methodBody": ["METHOD_START", "{", "T   dependencyMetadata    =    dependencyNotationParser . parseNotation ( dependencyNotation )  ;", "if    ( dependencyMetadata   instanceof   AbstractDependencyImpl )     {", "(  ( AbstractDependencyImpl )     ( dependencyMetadata )  )  . setAttributes ( attributesFactory . mutable (  )  )  ;", "}", "if    ( configureAction    !  =    null )     {", "configureAction . execute ( dependencyMetadata )  ;", "}", "d . add ( toDependencyMetadata ( dependencyMetadata )  )  ;", "}", "METHOD_END"], "methodName": ["doAdd"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.AbstractDependenciesMetadataAdapter"}, {"methodBody": ["METHOD_START", "{", "ModuleComponentSelector   selector    =    DefaultModuleComponentSelector . newSelector ( details . getGroup (  )  ,    details . getName (  )  ,    DefaultImmutableVersionConstraint . of ( details . getVersionConstraint (  )  )  ,    details . getAttributes (  )  )  ;", "return   new   GradleyMetadata ( selector ,    Collections .  < ExcludeMetadata > emptyList (  )  ,    isPending (  )  ,    details . getReason (  )  )  ;", "}", "METHOD_END"], "methodName": ["toDependencyMetadata"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.AbstractDependenciesMetadataAdapter"}, {"methodBody": ["METHOD_START", "{", "this . attributes    =    attributes ;", "}", "METHOD_END"], "methodName": ["setAttributes"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.AbstractDependencyImpl"}, {"methodBody": ["METHOD_START", "{", "return   container . get ( originalIndex )  ;", "}", "METHOD_END"], "methodName": ["getOriginalMetadata"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.AbstractDependencyMetadataAdapter"}, {"methodBody": ["METHOD_START", "{", "container . set ( originalIndex ,    modifiedMetadata )  ;", "}", "METHOD_END"], "methodName": ["updateMetadata"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.AbstractDependencyMetadataAdapter"}, {"methodBody": ["METHOD_START", "{", "return   pattern ;", "}", "METHOD_END"], "methodName": ["getBase"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.AbstractResourcePattern"}, {"methodBody": ["METHOD_START", "{", "return   pattern . getDecoded (  )  ;", "}", "METHOD_END"], "methodName": ["getPattern"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.AbstractResourcePattern"}, {"methodBody": ["METHOD_START", "{", "String   patternString    =    pattern . getPath (  )  ;", "int   tokenIndex    =     -  1  ;", "for    ( String   token    :    tokenVariants )     {", "tokenIndex    =    patternString . indexOf (  (  (  \"  [  \"     +    token )     +     \"  ]  \"  )  )  ;", "if    ( tokenIndex    !  =     (  -  1  )  )     {", "break ;", "}", "}", "if    ( tokenIndex    =  =     (  -  1  )  )     {", "return   true ;", "}", "int   optionalOpen    =     0  ;", "for    ( int   i    =     0  ;    i    <    tokenIndex ;    i +  +  )     {", "char   nextChar    =    patternString . charAt ( i )  ;", "if    ( nextChar    =  =     '  (  '  )     {", "optionalOpen +  +  ;", "} else", "if    ( nextChar    =  =     '  )  '  )     {", "optionalOpen    =    Math . max (  0  ,     ( optionalOpen    -     1  )  )  ;", "}", "}", "return   optionalOpen    >     0  ;", "}", "METHOD_END"], "methodName": ["isOptionalToken"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.AbstractResourcePattern"}, {"methodBody": ["METHOD_START", "{", "if    ( Strings . isNullOrEmpty ( candidate )  )     {", "return   optio ;", "}", "return    !  ( candidate . startsWith (  \"  $  {  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["isValidSubstitute"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.AbstractResourcePattern"}, {"methodBody": ["METHOD_START", "{", "return   IvyPatternHelper . substituteTokens ( pattern ,    attributes )  ;", "}", "METHOD_END"], "methodName": ["substituteTokens"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.AbstractResourcePattern"}, {"methodBody": ["METHOD_START", "{", "HashMap < String ,    String >    attributes    =    new   HashMap < String ,    String >  (  )  ;", "attributes . put ( ORGANISATION _ KEY ,    module . getGroup (  )  )  ;", "attributes . put ( MODULE _ KEY ,    module . getName (  )  )  ;", "return   attributes ;", "}", "METHOD_END"], "methodName": ["toAttributes"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.AbstractResourcePattern"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    attributes    =    toAttributes ( module )  ;", "attributes . putAll ( toAttributes ( ivyAName )  )  ;", "return   attributes ;", "}", "METHOD_END"], "methodName": ["toAttributes"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.AbstractResourcePattern"}, {"methodBody": ["METHOD_START", "{", "HashMap < String ,    String >    attributes    =    new   HashMap < String ,    String >  (  )  ;", "attributes . put ( ORGANISATION _ KEY ,    componentIdentifier . getGroup (  )  )  ;", "attributes . put ( MODULE _ KEY ,    componentIdentifier . getModule (  )  )  ;", "attributes . put ( REVISION _ KEY ,    componentIdentifier . getVersion (  )  )  ;", "return   attributes ;", "}", "METHOD_END"], "methodName": ["toAttributes"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.AbstractResourcePattern"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    attributes    =    toAttributes ( artifact . getId (  )  . getComponentIdentifier (  )  )  ;", "attributes . putAll ( toAttributes ( artifact . getName (  )  )  )  ;", "return   attributes ;", "}", "METHOD_END"], "methodName": ["toAttributes"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.AbstractResourcePattern"}, {"methodBody": ["METHOD_START", "{", "HashMap < String ,    String >    attributes    =    new   HashMap < String ,    String >  (  )  ;", "attributes . put ( ARTIFACT _ KEY ,    ivyArtifact . getName (  )  )  ;", "attributes . put ( TYPE _ KEY ,    ivyArtifact . getType (  )  )  ;", "attributes . put ( EXT _ KEY ,    ivyArtifact . getExtension (  )  )  ;", "attributes . put (  . CLASSIFIER _ KEY ,    ivyArtifact . getClassifier (  )  )  ;", "return   attributes ;", "}", "METHOD_END"], "methodName": ["toAttributes"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.AbstractResourcePattern"}, {"methodBody": ["METHOD_START", "{", "return   metadata . getModuleVersionId (  )  ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ComponentMetadataAdapter"}, {"methodBody": ["METHOD_START", "{", "return   metadata . getStatus (  )  ;", "}", "METHOD_END"], "methodName": ["getStatus"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ComponentMetadataAdapter"}, {"methodBody": ["METHOD_START", "{", "return   metadata . getStatusScheme (  )  ;", "}", "METHOD_END"], "methodName": ["getStatusScheme"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ComponentMetadataAdapter"}, {"methodBody": ["METHOD_START", "{", "return   metadata . isChanging (  )  ;", "}", "METHOD_END"], "methodName": ["isChanging"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ComponentMetadataAdapter"}, {"methodBody": ["METHOD_START", "{", "return   metadata . getStatus (  )  ;", "}", "METHOD_END"], "methodName": ["getStatus"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ComponentMetadataDetailsAdapter"}, {"methodBody": ["METHOD_START", "{", "DefaultExternalResourceAccessor . LOGGER . debug (  \" Loading    {  }  \"  ,    resource )  ;", "try    {", "return   resourceAccessor . getResource ( resource ,    null ,    new   CacheAwareExternalResourceAccessor . ResourceFileStore (  )     {", "public   LocallyAvailableResource   moveIntoCache ( File   downloadedResource )     {", "String   key    =    resource . toString (  )  ;", "return   fileStore . move ( key ,    downloadedResource )  ;", "}", "}  ,    null )  ;", "}    catch    ( Exception   e )     {", "throw   ResourceExceptions . getFailed ( resource . getUri (  )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["resolve"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.DefaultExternalResourceAccessor"}, {"methodBody": ["METHOD_START", "{", "return   staticResourceExists ( artifactPatterns ,    artifact ,    result )  ;", "}", "METHOD_END"], "methodName": ["artifactExists"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.DefaultExternalResourceArtifactResolver"}, {"methodBody": ["METHOD_START", "{", "for    ( ResourcePattern   resourcePattern    :    patternList )     {", "if    ( isIncomplete ( resourcePattern ,    artifact )  )     {", "continue ;", "}", "ExternalResourceName   location    =    resourcePattern . getLocation ( artifact )  ;", "result . attempted ( location )  ;", ". LOGGER . debug (  \" Loading    {  }  \"  ,    location )  ;", "LocallyAvailableResourceCandidates   localCandidates    =    locallyAvailableResourceFinder . findCandidates ( artifact )  ;", "try    {", "LocallyAvailableExternalResource   resource    =    resourceAccessor . getResource ( location ,    null ,    new   CacheAwareExternalResourceAccessor . ResourceFileStore (  )     {", "public   LocallyAvailableResource   moveIntoCache ( File   downloadedResource )     {", "return   fileStore . move ( artifact . getId (  )  ,    downloadedResource )  ;", "}", "}  ,    localCandidates )  ;", "if    ( resource    !  =    null )     {", "return   resource ;", "}", "}    catch    ( Exception   e )     {", "throw   ResourceExceptions . getFailed ( location . getUri (  )  ,    e )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["downloadByCoords"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.DefaultExternalResourceArtifactResolver"}, {"methodBody": ["METHOD_START", "{", "for    ( ResourcePattern   resourcePattern    :    patternList )     {", "if    ( isIncomplete ( resourcePattern ,    artifact )  )     {", "continue ;", "}", "ExternalResourceName   moduleDir    =    resourcePattern . toModuleVersionPath ( artifact . getComponentId (  )  )  ;", "ExternalResourceName   location    =    moduleDir . resolve ( artifact . getRelativeUrl (  )  )  ;", "result . attempted ( location )  ;", ". LOGGER . debug (  \" Loading    {  }  \"  ,    location )  ;", "LocallyAvailableResourceCandidates   localCandidates    =    locallyAvailableResourceFinder . findCandidates ( artifact )  ;", "try    {", "LocallyAvailableExternalResource   resource    =    resourceAccessor . getResource ( location ,    artifact . getId (  )  . getFileName (  )  ,    new   CacheAwareExternalResourceAccessor . ResourceFileStore (  )     {", "public   LocallyAvailableResource   moveIntoCache ( File   downloadedResource )     {", "return   fileStore . move ( artifact . getId (  )  ,    downloadedResource )  ;", "}", "}  ,    localCandidates )  ;", "if    ( resource    !  =    null )     {", "return   resource ;", "}", "}    catch    ( Exception   e )     {", "throw   ResourceExceptions . getFailed ( location . getUri (  )  ,    e )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["downloadByUrl"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.DefaultExternalResourceArtifactResolver"}, {"methodBody": ["METHOD_START", "{", "if    ( artifact   instanceof   UrlBackedArtifactMetadata )     {", "UrlBackedArtifactMetadata   urlArtifact    =     (  ( UrlBackedArtifactMetadata )     ( artifact )  )  ;", "return   downloadByUrl ( patternList ,    urlArtifact ,    result )  ;", "} else    {", "return   downloadByCoords ( patternList ,    artifact ,    result )  ;", "}", "}", "METHOD_END"], "methodName": ["downloadStaticResource"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.DefaultExternalResourceArtifactResolver"}, {"methodBody": ["METHOD_START", "{", "return    !  ( resourcePattern . isComplete ( artifact )  )  ;", "}", "METHOD_END"], "methodName": ["isIncomplete"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.DefaultExternalResourceArtifactResolver"}, {"methodBody": ["METHOD_START", "{", "if    ( artifact   instanceof   ModuleDescriptorArtifactMetadata )     {", "return   downloadStaticResource ( ivyPatterns ,    artifact ,    result )  ;", "}", "return   downloadStaticResource ( artifactPatterns ,    artifact ,    result )  ;", "}", "METHOD_END"], "methodName": ["resolveArtifact"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.DefaultExternalResourceArtifactResolver"}, {"methodBody": ["METHOD_START", "{", "for    ( ResourcePattern   resourcePattern    :    patternList )     {", "if    ( isIncomplete ( resourcePattern ,    artifact )  )     {", "continue ;", "}", "ExternalResourceName   location    =    resourcePattern . getLocation ( artifact )  ;", "result . attempted ( location )  ;", ". LOGGER . debug (  \" Loading    {  }  \"  ,    location )  ;", "try    {", "if    (  ( repository . resource ( location ,    true )  . getMetaData (  )  )     !  =    null )     {", "return   true ;", "}", "}    catch    ( Exception   e )     {", "throw   ResourceExceptions . getFailed ( location . getUri (  )  ,    e )  ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["staticResourceExists"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.DefaultExternalResourceArtifactResolver"}, {"methodBody": ["METHOD_START", "{", "invalidateCaches (  )  ;", "Patterns . add ( pattern )  ;", "}", "METHOD_END"], "methodName": ["addArtifactPattern"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolver"}, {"methodBody": ["METHOD_START", "{", "invalidateCaches (  )  ;", "ivyPats . add ( pat )  ;", "}", "METHOD_END"], "methodName": ["addIvyPattern"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolver"}, {"methodBody": ["METHOD_START", "{", "getMetadataSources (  )  . appendId ( hasher )  ;", "}", "METHOD_END"], "methodName": ["appendId"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolver"}, {"methodBody": ["METHOD_START", "{", "if    (  ( cachedArtifactResolver )     !  =    null )     {", "return   cachedArtifactResolver ;", "}", "ArtifactResolver   artifactResolver    =    createArtifactResolver ( ivyPatterns ,    artifactPatterns )  ;", "cachedArtifactResolver    =    artifactResolver ;", "return   artifactResolver ;", "}", "METHOD_END"], "methodName": ["createArtifactResolver"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolver"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultExternalResourceArtifactResolver ( repository ,    locallyAvailableResourceFinder ,    ivyPatterns ,    artifactPatterns ,    artifactFileStore ,    cachingResourceAccessor )  ;", "}", "METHOD_END"], "methodName": ["createArtifactResolver"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolver"}, {"methodBody": ["METHOD_START", "{", "return   createArtifactResolver (  )  ;", "}", "METHOD_END"], "methodName": ["createArtifactResolver"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolver"}, {"methodBody": ["METHOD_START", "{", "HashValue   hash    =    HashUtil . createHash ( src ,    algorithm )  ;", "String   formattedHashString    =    hash . asZeroPaddedHexString ( checksumLength )  ;", "try    {", "return   formattedHashString . getBytes (  \" US - ASCII \"  )  ;", "}    catch    ( UnsupportedEncodingException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["createChecksumFile"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolver"}, {"methodBody": ["METHOD_START", "{", "ModuleIdentifier   module    =    moduleIdentifierFactory . module ( dependency . getSelector (  )  . getGroup (  )  ,    dependency . getSelector (  )  . getModule (  )  )  ;", "ResourceVersionLister   versionLister    =    new   ResourceVersionLister ( y )  ;", "List < ResourcePattern >    completeIvyPatterns    =    filterComplete ( this . ivyPatterns ,    module )  ;", "List < ResourcePattern >    completeArtifactPatterns    =    filterComplete ( this . artifactPatterns ,    module )  ;", "for    ( MetadataSource <  ?  >    metadataSource    :    metadataSources . sources (  )  )     {", "metadataSource . listModuleVersions ( dependency ,    module ,    completeIvyPatterns ,    completeArtifactPatterns ,    versionLister ,    result )  ;", "if    (  ( result . hasResult (  )  )     &  &     ( result . isAuthoritative (  )  )  )     {", "return ;", "}", "}", "result . listed ( ImmutableSet .  < String > of (  )  )  ;", "}", "METHOD_END"], "methodName": ["doListModuleVersions"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolver"}, {"methodBody": ["METHOD_START", "{", "resolveStaticDependency ( moduleComponentIdentifier ,    prescribedMetaData ,    result ,    createArtifactResolver (  )  )  ;", "}", "METHOD_END"], "methodName": ["doResolveComponentMetaData"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolver"}, {"methodBody": ["METHOD_START", "{", "return   CollectionUtils . filter ( ivyPatterns ,    new   Spec < ResourcePattern >  (  )     {", "@ Override", "public   boolean   isSatisfiedBy ( ResourcePattern   element )     {", "return   element . isComplete ( module )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["filterComplete"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolver"}, {"methodBody": ["METHOD_START", "{", "ModuleComponentArtifactMetadata   artifact    =    module . artifact ( type ,     \" jar \"  ,    classifier )  ;", "if    ( createArtifactResolver ( module . getSource (  )  )  . artifactExists ( artifact ,    new   DefaultResourceAwareResolveResult (  )  )  )     {", "return   ImmutableSet . of ( artifact )  ;", "}", "return   Collections . emptySet (  )  ;", "}", "METHOD_END"], "methodName": ["findOptionalArtifacts"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolver"}, {"methodBody": ["METHOD_START", "{", "DefaultBuildCacheHasher   cacheHasher    =    new   DefaultBuildCacheHasher (  )  ;", "cacheHasher . putString ( getClass (  )  . getName (  )  )  ;", "cacheHasher . putInt ( ivyPatterns . size (  )  )  ;", "for    ( ResourcePattern   ivyPattern    :    ivyPatterns )     {", "cacheHasher . putString ( ivyPattern . getPattern (  )  )  ;", "}", "cacheHasher . putInt ( artifactPatterns . size (  )  )  ;", "for    ( ResourcePattern   artifactPattern    :    artifactPatterns )     {", "cacheHasher . putString ( artifactPattern . getPattern (  )  )  ;", "}", "appendId ( cacheHasher )  ;", "return   cacheHasher . hash (  )  . toString (  )  ;", "}", "METHOD_END"], "methodName": ["generateId"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolver"}, {"methodBody": ["METHOD_START", "{", "return   CollectionUtils . collect ( artifactPatterns ,    new   Transformer < String ,    ResourcePattern >  (  )     {", "public   String   transform ( ResourcePattern   original )     {", "return   original . getPattern (  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["getArtifactPatterns"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolver"}, {"methodBody": ["METHOD_START", "{", "if    (  ( id )     !  =    null )     {", "return   id ;", "}", "id    =    generateId ( this )  ;", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolver"}, {"methodBody": ["METHOD_START", "{", "return   CollectionUtils . collect ( ivyPatterns ,    new   Transformer < String ,    ResourcePattern >  (  )     {", "public   String   transform ( ResourcePattern   original )     {", "return   original . getPattern (  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["getIvyPatterns"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolver"}, {"methodBody": ["METHOD_START", "{", "IvyArtifactName   ivyArtifactName    =    metadataArtifactProvider . getMetaDataArtifactName ( moduleComponentIdentifier . getModule (  )  )  ;", "return   new   DefaultModuleDescriptorArtifactMetadata ( moduleComponentIdentifier ,    ivyArtifactName )  ;", "}", "METHOD_END"], "methodName": ["getMetaDataArtifactFor"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolver"}, {"methodBody": ["METHOD_START", "{", "return   metadataSources ;", "}", "METHOD_END"], "methodName": ["getMetadataSources"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolver"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolver"}, {"methodBody": ["METHOD_START", "{", "return   repository ;", "}", "METHOD_END"], "methodName": ["getRepository"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolver"}, {"methodBody": ["METHOD_START", "{", "id    =    null ;", "cachedArtifact    =    null ;", "}", "METHOD_END"], "methodName": ["invalidateCaches"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolver"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isDynamicResolveMode"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolver"}, {"methodBody": ["METHOD_START", "{", "return   local ;", "}", "METHOD_END"], "methodName": ["isLocal"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolver"}, {"methodBody": ["METHOD_START", "{", "for    ( IvyModuleArtifactPublishMetadata   artifact    :    moduleVersion . getArtifacts (  )  )     {", "publish ( new   DefaultModuleComponentArtifactMetadata ( artifact . getId (  )  )  ,    artifact . getFile (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["publish"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolver"}, {"methodBody": ["METHOD_START", "{", "ResourcePattern   destinationPattern ;", "if    (  (  \" ivy \"  . equals ( artifact . getName (  )  . getType (  )  )  )     &  &     (  !  ( ivyPatterns . isEmpty (  )  )  )  )     {", "destinationPattern    =    ivyPatterns . get (  0  )  ;", "} else", "if    (  !  ( artifactPatterns . isEmpty (  )  )  )     {", "destinationPattern    =    artifactPatterns . get (  0  )  ;", "} else    {", "throw   new   IllegalStateException (  (  (  (  (  \" impossible   to   publish    \"     +    artifact )     +     \"    using    \"  )     +     ( this )  )     +     \"  :    no   artifact   pattern   defined \"  )  )  ;", "}", "ExternalResourceName   destination    =    destinationPattern . getLocation ( artifact )  ;", "put ( src ,    destination )  ;", ". LOGGER . info (  \" Published    {  }    to    {  }  \"  ,    artifact ,    destination )  ;", "}", "METHOD_END"], "methodName": ["publish"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolver"}, {"methodBody": ["METHOD_START", "{", "repository . withProgressLogging (  )  . resource ( destination )  . put ( new   FileReadableContent ( src )  )  ;", "putChecksum ( src ,    destination )  ;", "}", "METHOD_END"], "methodName": ["put"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolver"}, {"methodBody": ["METHOD_START", "{", "byte [  ]    checksumFile    =    createChecksumFile ( source ,     \" SHA 1  \"  ,     4  0  )  ;", "Name   checksumDestination    =    destination . append (  \"  . sha 1  \"  )  ;", "repository . resource ( checksumDestination )  . put ( new   ByteArrayReadableContent ( checksumFile )  )  ;", "}", "METHOD_END"], "methodName": ["putChecksum"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolver"}, {"methodBody": ["METHOD_START", "{", "for    ( MetadataSource <  ?  >    source    :    metadataSources . sources (  )  )     {", "MutableModuleComponentResolveMetadata   value    =    source . create ( name ,    componentResolvers ,    moduleVersionIdentifier ,    prescribedMetaData ,    artifactResolver ,    result )  ;", "if    ( value    !  =    null )     {", "value . setSource ( artifactResolver . getSource (  )  )  ;", "result . resolved ( value . asImmutable (  )  )  ;", "return ;", "}", "}", ". LOGGER . debug (  \" No   meta - data   file   or   artifact   found   for   module    '  {  }  '    in   repository    '  {  }  '  .  \"  ,    moduleVersionIdentifier ,    getName (  )  )  ;", "result . missing (  )  ;", "}", "METHOD_END"], "methodName": ["resolveStaticDependency"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolver"}, {"methodBody": ["METHOD_START", "{", "invalidateCaches (  )  ;", "Patterns . clear (  )  ;", "CollectionUtils . addAll ( Patterns ,    patterns )  ;", "}", "METHOD_END"], "methodName": ["setArtifactPatterns"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolver"}, {"methodBody": ["METHOD_START", "{", "this . componentResolvers    =    resolver ;", "}", "METHOD_END"], "methodName": ["setComponentResolvers"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolver"}, {"methodBody": ["METHOD_START", "{", "invalidateCaches (  )  ;", "ivyPats . clear (  )  ;", "CollectionUtils . addAll ( ivyPats ,    pats )  ;", "}", "METHOD_END"], "methodName": ["setIvyPatterns"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolver"}, {"methodBody": ["METHOD_START", "{", "BuildableComponentResolveResult   moduleVersionResolveResult    =    new   DefaultBuildableComponentResolveResult (  )  ;", "componentResolver ( moduleComponentIdentifier ,    new   DefaultComponentOverrideMetadata (  )  ,    moduleVersionResolveResult )  ;", "BuildableArtifactSetResolveResult   moduleArtifactsResolveResult    =    new   DefaultBuildableArtifactSetResolveResult (  )  ;", "artifactResolverArtifactsWithType ( moduleVersionResolveResult . getMetadata (  )  ,    artifactType ,    moduleArtifactsResolveResult )  ;", "BuildableArtifactResolveResult   artifactResolveResult    =    new   DefaultBuildableArtifactResolveResult (  )  ;", "ComponentArtifactMetadata   artifactMetaData    =    moduleArtifactsResolveResult . getResult (  )  . iterator (  )  . next (  )  ;", "artifactResolverArtifact ( artifactMetaData ,    moduleVersionResolveResult . getMetadata (  )  . getSource (  )  ,    artifactResolveResult )  ;", "return   artifactResolveResult . getResult (  )  ;", "}", "METHOD_END"], "methodName": ["resolveMetaDataArtifactFile"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ExternalResourceResolverDescriptorParseContext"}, {"methodBody": ["METHOD_START", "{", "return   m 2 Compatible ;", "}", "METHOD_END"], "methodName": ["isM2compatible"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.IvyResolver"}, {"methodBody": ["METHOD_START", "{", "return   isM 2 compatible (  )     ?    new   M 2 ResourcePattern ( baseUri ,    pattern )     :    new   IvyResourcePattern ( baseUri ,    pattern )  ;", "}", "METHOD_END"], "methodName": ["toResourcePattern"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.IvyResolver"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    attributes    =    toAttributes ( artifact )  ;", "return   getBase (  )  . getRoot (  )  . resolve ( substituteTokens ( getBase (  )  . getPath (  )  ,    attributes )  )  ;", "}", "METHOD_END"], "methodName": ["getLocation"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.IvyResourcePattern"}, {"methodBody": ["METHOD_START", "{", "String   path    =    getBase (  )  . getPath (  )  ;", "int   i    =    path . lastIndexOf (  '  /  '  )  ;", "if    ( i    >     0  )     {", "i    =    path . indexOf (  \"  /  [  ]  \"  ,    i )  ;", "}", "if    ( i    <     0  )     {", "throw   new   UnsupportedOperationException (  \" Cannot   locate   module   version   for   non   standard   Ivy   layout .  \"  )  ;", "}", "return   path . substring (  0  ,    i )  ;", "}", "METHOD_END"], "methodName": ["getPathWithoutArtifactPart"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.IvyResourcePattern"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["toModulePath"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.IvyResourcePattern"}, {"methodBody": ["METHOD_START", "{", "ImmutableMap < String ,    String >    attributes    =    ImmutableMap . of (  \" organisation \"  ,    componentIdentifier . getGroup (  )  ,     \" module \"  ,    componentIdentifier . getModule (  )  ,     \" artifact \"  ,    componentIdentifier . getModule (  )  ,     \" revision \"  ,    componentIdentifier . getVersion (  )  )  ;", "ExternalResourceName   resolve    =    getBase (  )  . getRoot (  )  . resolve ( substituteTokens ( getPathWithoutArtifactPart (  )  ,    attributes )  )  ;", "return   resolve ;", "}", "METHOD_END"], "methodName": ["toModuleVersionPath"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.IvyResourcePattern"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    attributes    =    toAttributes ( module ,    artifact )  ;", "return   getBase (  )  . getRoot (  )  . resolve ( substituteTokens ( getBase (  )  . getPath (  )  ,    attributes )  )  ;", "}", "METHOD_END"], "methodName": ["toVersionListPattern"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.IvyResourcePattern"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    attributes    =    toAttributes ( artifact )  ;", "String   pattern    =    maybeSubstituteTimestamp ( artifact ,    getBase (  )  . getPath (  )  )  ;", "return   getBase (  )  . getRoot (  )  . resolve ( substituteTokens ( pattern ,    attributes )  )  ;", "}", "METHOD_END"], "methodName": ["getLocation"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.M2ResourcePattern"}, {"methodBody": ["METHOD_START", "{", "if    (  ( artifact . getComponentId (  )  )    instanceof   MavenUniqueSnapshotComponentIdentifier )     {", "MavenUniqueSnapshotComponentIdentifier   snapshotId    =     (  ( MavenUniqueSnapshotComponentIdentifier )     ( artifact . getComponentId (  )  )  )  ;", "pattern    =    pattern . replaceFirst (  \"  \\  \\  -  \\  \\  [ revision \\  \\  ]  \"  ,     (  \"  -  \"     +     ( snapshotId . getTimestampedVersion (  )  )  )  )  . replace (  \"  [ revision ]  \"  ,    snapshotId . getSnapshotVersion (  )  )  ;", "}", "return   pattern ;", "}", "METHOD_END"], "methodName": ["maybeSubstituteTimestamp"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.M2ResourcePattern"}, {"methodBody": ["METHOD_START", "{", "String   org    =    attributes . get ( ORGANISATION _ KEY )  ;", "if    ( org    !  =    null )     {", "attributes . put ( ORGANISATION _ KEY ,    replace (  \"  .  \"  ,     \"  /  \"  )  )  ;", "}", "return   super . substituteTokens ( p ,    attributes )  ;", "}", "METHOD_END"], "methodName": ["substituteTokens"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.M2ResourcePattern"}, {"methodBody": ["METHOD_START", "{", "String   pattern    =    getBase (  )  . getPath (  )  ;", "if    (  !  ( pattern . endsWith ( MavenPattern . M 2  _ PATTERN )  )  )     {", "throw   new   UnsupportedOperationException (  \" Cannot   locate   module   for   non - maven   layout .  \"  )  ;", "}", "String   metaDataPattern    =    pattern . substring (  0  ,     (  (  ( pattern . length (  )  )     -     ( MavenPattern . M 2  _ PER _ MODULE _ PATTERN . length (  )  )  )     -     1  )  )  ;", "return   getBase (  )  . getRoot (  )  ( substituteTokens ( metaDataPattern ,    toAttributes ( module )  )  )  ;", "}", "METHOD_END"], "methodName": ["toModulePath"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.M2ResourcePattern"}, {"methodBody": ["METHOD_START", "{", "String   pattern    =    getBase (  )  . getPath (  )  ;", "if    (  !  ( pattern . endsWith ( MavenPattern . M 2  _ PATTERN )  )  )     {", "throw   new   UnsupportedOperationException (  \" Cannot   locate   module   version   for   non - maven   layout .  \"  )  ;", "}", "String   metaDataPattern    =    pattern . substring (  0  ,     (  (  ( pattern . length (  )  )     -     ( MavenPattern . M 2  _ PER _ MODULE _ VERSION _ PATTERN . length (  )  )  )     -     1  )  )  ;", "return   getBase (  )  . getRoot (  )  ( substituteTokens ( metaDataPattern ,    toAttributes ( componentIdentifier )  )  )  ;", "}", "METHOD_END"], "methodName": ["toModuleVersionPath"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.M2ResourcePattern"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    attributes    =    toAttributes ( module ,    artifact )  ;", "return   getBase (  )  . getRoot (  )  . resolve ( substituteTokens ( getBase (  )  . getPath (  )  ,    attributes )  )  ;", "}", "METHOD_END"], "methodName": ["toVersionListPattern"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.M2ResourcePattern"}, {"methodBody": ["METHOD_START", "{", "artifactRoots . add ( baseUri )  ;", "updatePatterns (  )  ;", "}", "METHOD_END"], "methodName": ["addArtifactLocation"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.MavenResolver"}, {"methodBody": ["METHOD_START", "{", "return   new   MavenUniqueSnapshotComponentIdentifier ( moduleComponentIdentifier . getGroup (  )  ,    moduleComponentIdentifier . getModule (  )  ,    moduleComponentIdentifier . getVersion (  )  ,    uniqueSnapshotVersion . getTimestamp (  )  )  ;", "}", "METHOD_END"], "methodName": ["composeSnapshotIdentifier"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.MavenResolver"}, {"methodBody": ["METHOD_START", "{", "Matcher   matcher    =    MavenResolver . UNIQUE _ SNAPSHOT . matcher ( moduleComponentIdentifier . getVersion (  )  )  ;", "if    (  !  ( matcher . matches (  )  )  )     {", "return   null ;", "}", "return   new   MavenUniqueSnapshotModuleSource ( matcher . group (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["composeUniqueSnapshotVersion"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.MavenResolver"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["createMetadataSupplier"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.MavenResolver"}, {"methodBody": ["METHOD_START", "{", "if    ( MavenResolver . isNonUniqueSnapshot ( moduleComponentIdentifier )  )     {", "MavenUniqueSnapshotModuleSource   uniqueSnapshotVersion    =    findUniqueSnapshotVersion ( moduleComponentIdentifier ,    result )  ;", "if    ( uniqueSnapshotVersion    !  =    null )     {", "MavenUniqueSnapshotComponentIdentifier   snapshotIdentifier    =    composeSnapshotIdentifier ( moduleComponentIdentifier ,    uniqueSnapshotVersion )  ;", "resolveUniqueSnapshotDependency ( snapshotIdentifier ,    prescribedMetaData ,    result ,    uniqueSnapshotVersion )  ;", "return ;", "}", "} else    {", "MavenUniqueSnapshotModuleSource   uniqueSnapshotVersion    =    composeUniqueSnapshotVersion ( moduleComponentIdentifier )  ;", "if    ( uniqueSnapshotVersion    !  =    null )     {", "MavenUniqueSnapshotComponentIdentifier   snapshotIdentifier    =    composeSnapshotIdentifier ( moduleComponentIdentifier ,    uniqueSnapshotVersion )  ;", "resolveUniqueSnapshotDependency ( snapshotIdentifier ,    prescribedMetaData ,    result ,    uniqueSnapshotVersion )  ;", "return ;", "}", "}", "resolveStaticDependency ( moduleComponentIdentifier ,    prescribedMetaData ,    result ,    super . createArtifactResolver (  )  )  ;", "}", "METHOD_END"], "methodName": ["doResolveComponentMetaData"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.MavenResolver"}, {"methodBody": ["METHOD_START", "{", "M 2 ResourcePattern   wholePattern    =    getWholePattern (  )  ;", "if    (  !  ( wholePattern . isComplete ( module )  )  )     {", "return   null ;", "}", "ExternalResourceName   metadataLocation    =    wholePattern . toModuleVersionPath ( module )  (  \" maven - metadata . xml \"  )  ;", "result . attempted ( metadataLocation )  ;", "MavenMetadata   mavenMetadata    =    parseMavenMetadata ( metadataLocation )  ;", "if    (  ( mavenMetadata . timestamp )     !  =    null )     {", "String   timestamp    =     (  ( mavenMetadata . timestamp )     +     \"  -  \"  )     +     ( mavenMetadata . buildNumber )  ;", "return   new   MavenUniqueSnapshotModuleSource ( timestamp )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["findUniqueSnapshotVersion"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.MavenResolver"}, {"methodBody": ["METHOD_START", "{", "return   localAccess ;", "}", "METHOD_END"], "methodName": ["getLocalAccess"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.MavenResolver"}, {"methodBody": ["METHOD_START", "{", "return   remoteAccess ;", "}", "METHOD_END"], "methodName": ["getRemoteAccess"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.MavenResolver"}, {"methodBody": ["METHOD_START", "{", "return   root ;", "}", "METHOD_END"], "methodName": ["getRoot"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.MavenResolver"}, {"methodBody": ["METHOD_START", "{", "return   new   M 2 ResourcePattern ( root ,    MavenPattern . M 2  _ PATTERN )  ;", "}", "METHOD_END"], "methodName": ["getWholePattern"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.MavenResolver"}, {"methodBody": ["METHOD_START", "{", "return   artifactType    =  =     ( ArtifactType . MAVEN _ POM )  ;", "}", "METHOD_END"], "methodName": ["isMetaDataArtifact"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.MavenResolver"}, {"methodBody": ["METHOD_START", "{", "return   moduleComponentIdentifier . getVersion (  )  . endsWith (  \"  - SNAPSHOT \"  )  ;", "}", "METHOD_END"], "methodName": ["isNonUniqueSnapshot"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.MavenResolver"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   mavenMetaDataLoader . load ( metadataLocation )  ;", "}    catch    ( MissingResourceException   e )     {", "return   new   Metadata (  )  ;", "}", "}", "METHOD_END"], "methodName": ["parseMavenMetadata"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.MavenResolver"}, {"methodBody": ["METHOD_START", "{", "if    ( MavenResolver . isNonUniqueSnapshot ( metaData . getId (  )  )  )     {", "metaData . setChanging ( true )  ;", "}", "return   metaData ;", "}", "METHOD_END"], "methodName": ["processMetaData"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.MavenResolver"}, {"methodBody": ["METHOD_START", "{", "resolveStaticDependency ( module ,    prescribedMetaData ,    result ,    createArtifactResolver ( snapshotSource )  )  ;", "}", "METHOD_END"], "methodName": ["resolveUniqueSnapshotDependency"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.MavenResolver"}, {"methodBody": ["METHOD_START", "{", "setIvyPatterns ( Collections . singletonList ( getWholePattern (  )  )  )  ;", "List < ResourcePattern >    Patterns    =    new   ArrayList < ResourcePattern >  (  )  ;", "Patterns . add ( getWholePattern (  )  )  ;", "for    ( URI   Root    :    Roots )     {", "Patterns . add ( new   M 2 ResourcePattern ( Root ,    MavenPattern . M 2  _ PATTERN )  )  ;", "}", "setArtifactPatterns ( Patterns )  ;", "}", "METHOD_END"], "methodName": ["updatePatterns"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.MavenResolver"}, {"methodBody": ["METHOD_START", "{", "return   DefaultModuleComponentIdentifier . newId ( getGroup (  )  ,    getModule (  )  ,    getSnapshotVersion (  )  )  ;", "}", "METHOD_END"], "methodName": ["getSnapshotComponent"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.MavenUniqueSnapshotComponentIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   getVersion (  )  . replace ( timestamp ,     \" SNAPSHOT \"  )  ;", "}", "METHOD_END"], "methodName": ["getSnapshotVersion"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.MavenUniqueSnapshotComponentIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   timestamp ;", "}", "METHOD_END"], "methodName": ["getTimestamp"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.MavenUniqueSnapshotComponentIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   getVersion (  )  . replace (  \" SNAPSHOT \"  ,    timestamp )  ;", "}", "METHOD_END"], "methodName": ["getTimestampedVersion"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.MavenUniqueSnapshotComponentIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   delegate . artifactExists ( timestamp ( artifact )  ,    result )  ;", "}", "METHOD_END"], "methodName": ["artifactExists"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.MavenUniqueSnapshotExternalResourceArtifactResolver"}, {"methodBody": ["METHOD_START", "{", "return   delegate . resolveArtifact ( timestamp ( artifact )  ,    result )  ;", "}", "METHOD_END"], "methodName": ["resolveArtifact"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.MavenUniqueSnapshotExternalResourceArtifactResolver"}, {"methodBody": ["METHOD_START", "{", "MavenUniqueSnapshotComponentIdentifier   snapshotComponentIdentifier    =    new   MavenUniqueSnapshotComponentIdentifier ( artifact . getId (  )  . getComponentIdentifier (  )  ,    snapshot . getTimestamp (  )  )  ;", "return   new   DefaultModuleComponentArtifactMetadata ( snapshotComponentIdentifier ,    artifact . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["timestamp"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.MavenUniqueSnapshotExternalResourceArtifactResolver"}, {"methodBody": ["METHOD_START", "{", "return   timestamp ;", "}", "METHOD_END"], "methodName": ["getTimestamp"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.MavenUniqueSnapshotModuleSource"}, {"methodBody": ["METHOD_START", "{", "return    ( this )     =  =     ( MetadataFetchingCost . EXPENSIVE )  ;", "}", "METHOD_END"], "methodName": ["isExpensive"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.MetadataFetchingCost"}, {"methodBody": ["METHOD_START", "{", "return    ( this )     =  =     ( MetadataFetchingCost . FAST )  ;", "}", "METHOD_END"], "methodName": ["isFast"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.MetadataFetchingCost"}, {"methodBody": ["METHOD_START", "{", "int   endNameIndex    =    pattern . indexOf ( fileSeparator ,     ( prefixLastSlashIndex    +     1  )  )  ;", "String   namePattern ;", "if    ( endNameIndex    !  =     (  -  1  )  )     {", "namePattern    =    pattern . substring (  ( prefixLastSlashIndex    +     1  )  ,    endNameIndex )  ;", "} else    {", "namePattern    =    pattern . substring (  ( prefixLastSlashIndex    +     1  )  )  ;", "}", "namePattern    =    namePattern . replaceAll (  \"  \\  \\  .  \"  ,     \"  \\  \\  \\  \\  .  \"  )  ;", "String   acceptNamePattern    =    namePattern . replaceAll (  \"  \\  \\  [ revision \\  \\  ]  \"  ,     \"  (  .  +  )  \"  )  ;", "return   Pattern . compile ( acceptNamePattern )  ;", "}", "METHOD_END"], "methodName": ["createRegexPattern"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ResourceVersionLister"}, {"methodBody": ["METHOD_START", "{", "List < String >    ret    =    new   ArrayList < String >  ( all . size (  )  )  ;", "for    ( String   path    :    all )     {", "Matcher   m    =    p . matcher ( path )  ;", "if    ( m . matches (  )  )     {", "String   value    =    m . group (  1  )  ;", "ret . add ( value )  ;", "}", "}", "return   ret ;", "}", "METHOD_END"], "methodName": ["filterMatchedValues"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ResourceVersionLister"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( visitedDirectories . add ( parent )  )  )     {", "return   Collections . emptyList (  )  ;", "}", ". LOGGER . debug (  \" using    {  }    to   list   all   in    {  }  \"  ,    repository ,    parent )  ;", "result . attempted ( parent . toString (  )  )  ;", "List < String >    paths    =    repository . resource ( parent )  . list (  )  ;", "if    ( paths    =  =    null )     {", "return   Collections . emptyList (  )  ;", "}", ". LOGGER . debug (  \" found    {  }    resources \"  ,    paths . size (  )  )  ;", "return   paths ;", "}", "METHOD_END"], "methodName": ["listAll"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ResourceVersionLister"}, {"methodBody": ["METHOD_START", "{", "String   pattern    =    versionListPattern . getPath (  )  ;", "if    (  !  ( pattern . contains (  . REVISION _ TOKEN )  )  )     {", ". LOGGER . debug (  \" revision   token   not   defined   in   pattern    {  }  .  \"  ,    pattern )  ;", "return   Collections . emptyList (  )  ;", "}", "String   prefix    =    pattern . substring (  0  ,    pattern . indexOf (  . REVISION _ TOKEN )  )  ;", "if    ( revisionMatchesDirectoryName ( pattern )  )     {", "ExternalResourceName   parent    =    versionListPattern . getRoot (  )  . resolve ( prefix )  ;", "return   listAll ( parent ,    result )  ;", "} else    {", "int   parentFolderSlashIndex    =    prefix . lastIndexOf ( fileSeparator )  ;", "String   revisionParentFolder    =     ( parentFolderSlashIndex    =  =     (  -  1  )  )     ?     \"  \"     :    prefix . substring (  0  ,     ( parentFolderSlashIndex    +     1  )  )  ;", "ExternalResourceName   parent    =    versionListPattern . getRoot (  )  . resolve ( revisionParentFolder )  ;", ". LOGGER . debug (  \" using    {  }    to   list   all   in    {  }     \"  ,    repository ,    revisionParentFolder )  ;", "if    (  !  ( visitedDirectories . add ( parent )  )  )     {", "return   Collections . emptyList (  )  ;", "}", "result . attempted ( parent )  ;", "List < String >    all    =    repository . resource ( parent )  . list (  )  ;", "if    ( all    =  =    null )     {", "return   Collections . emptyList (  )  ;", "}", ". LOGGER . debug (  \" found    {  }    urls \"  ,    all . size (  )  )  ;", "Pattern   regexPattern    =    createRegexPattern ( pattern ,    parentFolderSlashIndex )  ;", "List < String >    ret    =    filterMatchedValues ( all ,    regexPattern )  ;", ". LOGGER . debug (  \"  {  }    matched    {  }  \"  ,    ret . size (  )  ,    pattern )  ;", "return   ret ;", "}", "}", "METHOD_END"], "methodName": ["listRevisionToken"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ResourceVersionLister"}, {"methodBody": ["METHOD_START", "{", "int   startToken    =    pattern . indexOf ( ResourceVersionLister . REVISION _ TOKEN )  ;", "if    (  ( startToken    >     0  )     &  &     (  !  ( pattern . substring (  ( startToken    -     1  )  ,    startToken )  . equals ( fileSeparator )  )  )  )     {", "return   false ;", "}", "int   endToken    =    startToken    +     ( ResourceVersionLister . REV _ TOKEN _ LENGTH )  ;", "if    (  ( endToken    <     ( pattern . length (  )  )  )     &  &     (  !  ( pattern . substring ( endToken ,     ( endToken    +     1  )  )  . equals ( fileSeparator )  )  )  )     {", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["revisionMatchesDirectoryName"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ResourceVersionLister"}, {"methodBody": ["METHOD_START", "{", "ExternalResourceName   versionListPattern    =    pattern . toVersionListPattern ( module ,    artifact )  ;", ". LOGGER . debug (  \" Listing   all   in    {  }  \"  ,    versionListPattern )  ;", "try    {", "List < String >    versionStrings    =    listRevisionToken ( versionListPattern ,    result )  ;", "for    ( String   versionString    :    versionStrings )     {", "collector . add ( versionString )  ;", "}", "}    catch    ( Exception   e )     {", "throw   ResourceExceptions . failure ( versionListPattern . getUri (  )  ,    String . format (  \" Could   not   list   versions   using    % s .  \"  ,    pattern )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["visit"], "fileName": "org.gradle.api.internal.artifacts.repositories.resolver.ResourceVersionLister"}, {"methodBody": ["METHOD_START", "{", "return   createTransport ( Collections . singleton ( scheme )  ,    name ,    authentications )  ;", "}", "METHOD_END"], "methodName": ["createTransport"], "fileName": "org.gradle.api.internal.artifacts.repositories.transport.RepositoryTransportFactory"}, {"methodBody": ["METHOD_START", "{", "validateSchemes ( schemes )  ;", "ResourceConnectorFactory   connectorFactory    =    findConnectorFactory ( schemes )  ;", "validateConnectorFactoryCredentials ( schemes ,    connectorFactory ,    authentications )  ;", "if    ( schemes . equals ( Collections . singleton (  \" file \"  )  )  )     {", "return   new   FileTransport ( name ,    fileRepository ,    cachedExternalResourceIndex ,    temporaryFileProvider ,    timeProvider ,    cacheLockingManager ,    producerGuard )  ;", "}", "ResourceConnectorSpecification   connectionDetails    =    new    . DefaultResourceConnectorSpecification ( authentications )  ;", "ExternalResourceConnector   resourceConnector    =    connectorFactory . createResourceConnector ( connectionDetails )  ;", "resourceConnector    =    startParameterResolutionOverride . overrideExternalResourceConnnector ( resourceConnector )  ;", "ExternalResourceCachePolicy   cachePolicy    =    new   DefaultExternalResourceCachePolicy (  )  ;", "cachePolicy    =    startParameterResolutionOverride . overrideExternalResourceCachePolicy ( cachePolicy )  ;", "return   new   ResourceConnectorRepositoryTransport ( name ,    progressLoggerFactory ,    temporaryFileProvider ,    cachedExternalResourceIndex ,    timeProvider ,    cacheLockingManager ,    resourceConnector ,    buildOperationExecutor ,    cachePolicy ,    producerGuard ,    fileRepository )  ;", "}", "METHOD_END"], "methodName": ["createTransport"], "fileName": "org.gradle.api.internal.artifacts.repositories.transport.RepositoryTransportFactory"}, {"methodBody": ["METHOD_START", "{", "for    ( ResourceConnectorFactory   protocolRegistration    :    registeredProtocols )     {", "if    ( protocolRegistration . getSupportedProtocols (  )  . containsAll ( schemes )  )     {", "return   protocolRegistration ;", "}", "}", "throw   new   InvalidUserDataException (  \" You   cannot   mix   different   URL   schemes   for   a   single   repository .    Please   declare   separate    \"  )  ;", "}", "METHOD_END"], "methodName": ["findConnectorFactory"], "fileName": "org.gradle.api.internal.artifacts.repositories.transport.RepositoryTransportFactory"}, {"methodBody": ["METHOD_START", "{", "Set < String >    validSchemes    =    Sets . newLinkedHashSet (  )  ;", "for    ( ResourceConnector   registeredProtocol    :    registeredProtocols )     {", "validSchemes . addAll ( registeredProtocol . getSupportedProtocols (  )  )  ;", "}", "return   validSchemes ;", "}", "METHOD_END"], "methodName": ["getRegisteredProtocols"], "fileName": "org.gradle.api.internal.artifacts.repositories.transport.RepositoryTransportFactory"}, {"methodBody": ["METHOD_START", "{", "registeredProtocols . add ( resourceConnectorFactory )  ;", "}", "METHOD_END"], "methodName": ["register"], "fileName": "org.gradle.api.internal.artifacts.repositories.transport.RepositoryTransportFactory"}, {"methodBody": ["METHOD_START", "{", "Set < Class <  ?    extends   Authentication >  >    configuredAuthenticationTypes    =    Sets . newHashSet (  )  ;", "for    ( Authentication   authentication    :    authentications )     {", "AuthenticationInternal   authenticationInternal    =     (  ( AuthenticationInternal )     ( authentication )  )  ;", "boolean   isAuthenticationSupported    =    false ;", "Credentials   credentials    =    authenticationInternal . getCredentials (  )  ;", "boolean   needCredentials    =    authenticationInternal . requiresCredentials (  )  ;", "for    ( Class <  ?  >    authenticationType    :    factory . getSupportedAuthentication (  )  )     {", "if    ( authenticationType . isAssignableFrom ( authentication . getClass (  )  )  )     {", "isAuthenticationSupported    =    true ;", "break ;", "}", "}", "if    (  ! isAuthenticationSupported )     {", "throw   new   InvalidUserDataException ( String . format (  \" Authentication   scheme    % s   is   not   supported   by   protocol    '  % s '  \"  ,    authentication ,    schemes . iterator (  )  . next (  )  )  )  ;", "}", "if    ( credentials    !  =    null )     {", "if    (  !  (  (  ( AuthenticationInternal )     ( authentication )  )  . supports ( credentials )  )  )     {", "throw   new   InvalidUserDataException ( String . format (  \" Credentials   type   of    '  % s '    is   not   supported   by   authentication   scheme    % s \"  ,    credentials . getClass (  )  . getSimpleName (  )  ,    authentication )  )  ;", "}", "} else    {", "if    ( needCredentials )     {", "throw   new   InvalidUserDataException (  \" You   cannot   configure   authentication   schemes   for   this   y   type   if   no   credentials   are   provided .  \"  )  ;", "}", "}", "if    (  !  ( configuredAuthenticationTypes . add ( authenticationInternal . getType (  )  )  )  )     {", "throw   new   InvalidUserDataException ( String . format (  \" You   cannot   configure   multiple   authentication   schemes   of   the   same   type .       The   duplicate   one   is    % s .  \"  ,    authentication )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["validateConnectorFactoryCredentials"], "fileName": "org.gradle.api.internal.artifacts.repositories.transport.RepositoryTransportFactory"}, {"methodBody": ["METHOD_START", "{", "Set < String >    validSchemes    =    getRegisteredProtocols (  )  ;", "for    ( String   scheme    :    schemes )     {", "if    (  !  ( validSchemes . contains ( scheme )  )  )     {", "throw   new   InvalidUserDataException ( String . format (  \" Not   a   supported   y   protocol    '  % s '  :    valid   protocols   are    % s \"  ,    scheme ,    validSchemes )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["validateSchemes"], "fileName": "org.gradle.api.internal.artifacts.repositories.transport.RepositoryTransportFactory"}, {"methodBody": ["METHOD_START", "{", "return   from ;", "}", "METHOD_END"], "methodName": ["getFrom"], "fileName": "org.gradle.api.internal.artifacts.result.AbstractDependencyResult"}, {"methodBody": ["METHOD_START", "{", "return   requested ;", "}", "METHOD_END"], "methodName": ["getRequested"], "fileName": "org.gradle.api.internal.artifacts.result.AbstractDependencyResult"}, {"methodBody": ["METHOD_START", "{", "return   componentResults ;", "}", "METHOD_END"], "methodName": ["getComponents"], "fileName": "org.gradle.api.internal.artifacts.result.DefaultArtifactResolutionResult"}, {"methodBody": ["METHOD_START", "{", "Set < ComponentArtifactsResult >    resolvedComponentResults    =    Sets . newLinkedHashSet (  )  ;", "for    ( ComponentResult   componentResult    :    componentResults )     {", "if    ( componentResult   instanceof   ComponentArtifactsResult )     {", "resolvedComponentResults . add (  (  ( ComponentArtifactsResult )     ( componentResult )  )  )  ;", "}", "}", "return   resolvedComponentResults ;", "}", "METHOD_END"], "methodName": ["getResolvedComponents"], "fileName": "org.gradle.api.internal.artifacts.result.DefaultArtifactResolutionResult"}, {"methodBody": ["METHOD_START", "{", "artifactResults . add ( artifact )  ;", "}", "METHOD_END"], "methodName": ["addArtifact"], "fileName": "org.gradle.api.internal.artifacts.result.DefaultComponentArtifactsResult"}, {"methodBody": ["METHOD_START", "{", "Set < ArtifactResult >    matching    =    Sets . newLinkedHashSet (  )  ;", "for    ( ArtifactResult   artifactResult    :    artifactResults )     {", "if    ( type . isAssignableFrom ( artifactResult . getType (  )  )  )     {", "matching . add ( artifactResult )  ;", "}", "}", "return   matching ;", "}", "METHOD_END"], "methodName": ["getArtifacts"], "fileName": "org.gradle.api.internal.artifacts.result.DefaultComponentArtifactsResult"}, {"methodBody": ["METHOD_START", "{", "return   componentIdentifier ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.gradle.api.internal.artifacts.result.DefaultComponentArtifactsResult"}, {"methodBody": ["METHOD_START", "{", "allComponents ( ConfigureUtil . configureUsing ( closure )  )  ;", "}", "METHOD_END"], "methodName": ["allComponents"], "fileName": "org.gradle.api.internal.artifacts.result.DefaultResolutionResult"}, {"methodBody": ["METHOD_START", "{", "eachElement ( getRoot (  )  ,    action ,    Actions . doNothing (  )  ,    new   HashSet < ResolvedComponentResult >  (  )  )  ;", "}", "METHOD_END"], "methodName": ["allComponents"], "fileName": "org.gradle.api.internal.artifacts.result.DefaultResolutionResult"}, {"methodBody": ["METHOD_START", "{", "allDependencies ( ConfigureUtil . configureUsing ( closure )  )  ;", "}", "METHOD_END"], "methodName": ["allDependencies"], "fileName": "org.gradle.api.internal.artifacts.result.DefaultResolutionResult"}, {"methodBody": ["METHOD_START", "{", "eachElement ( getRoot (  )  ,    Actions . doNothing (  )  ,    action ,    new   HashSet < ResolvedComponentResult >  (  )  )  ;", "}", "METHOD_END"], "methodName": ["allDependencies"], "fileName": "org.gradle.api.internal.artifacts.result.DefaultResolutionResult"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( visited . add ( node )  )  )     {", "return ;", "}", "moduleAction . execute ( node )  ;", "for    ( Dependency   d    :    node . getDependencies (  )  )     {", "dependencyAction . execute ( d )  ;", "if    ( d   instanceof   ResolvedDependency )     {", "eachElement (  (  ( ResolvedDependency )     ( d )  )  . getSelected (  )  ,    moduleAction ,    dependencyAction ,    visited )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["eachElement"], "fileName": "org.gradle.api.internal.artifacts.result.DefaultResolutionResult"}, {"methodBody": ["METHOD_START", "{", "final   Set < ResolvedComponentResult >    out    =    new   LinkedHashSet < ResolvedComponentResult >  (  )  ;", "eachElement ( getRoot (  )  ,    Actions . doNothing (  )  ,    Actions . doNothing (  )  ,    out )  ;", "return   out ;", "}", "METHOD_END"], "methodName": ["getAllComponents"], "fileName": "org.gradle.api.internal.artifacts.result.DefaultResolutionResult"}, {"methodBody": ["METHOD_START", "{", "final   Set < DependencyResult >    out    =    new   LinkedHashSet < DependencyResult >  (  )  ;", "allDependencies ( new   Action < DependencyResult >  (  )     {", "public   void   execute ( DependencyResult   dep )     {", "out . add ( dep )  ;", "}", "}  )  ;", "return   out ;", "}", "METHOD_END"], "methodName": ["getAllDependencies"], "fileName": "org.gradle.api.internal.artifacts.result.DefaultResolutionResult"}, {"methodBody": ["METHOD_START", "{", "return   rootSource . create (  )  ;", "}", "METHOD_END"], "methodName": ["getRoot"], "fileName": "org.gradle.api.internal.artifacts.result.DefaultResolutionResult"}, {"methodBody": ["METHOD_START", "{", "return   file ;", "}", "METHOD_END"], "methodName": ["getFile"], "fileName": "org.gradle.api.internal.artifacts.result.DefaultResolvedArtifactResult"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.gradle.api.internal.artifacts.result.DefaultResolvedArtifactResult"}, {"methodBody": ["METHOD_START", "{", "this . dependencies . add ( dependency )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addDependency"], "fileName": "org.gradle.api.internal.artifacts.result.DefaultResolvedComponentResult"}, {"methodBody": ["METHOD_START", "{", "this . dependents . add ( dependent )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addDependent"], "fileName": "org.gradle.api.internal.artifacts.result.DefaultResolvedComponentResult"}, {"methodBody": ["METHOD_START", "{", "return   Collections . unmodifiableSet ( dependencies )  ;", "}", "METHOD_END"], "methodName": ["getDependencies"], "fileName": "org.gradle.api.internal.artifacts.result.DefaultResolvedComponentResult"}, {"methodBody": ["METHOD_START", "{", "return   Collections . unmodifiableSet ( dependents )  ;", "}", "METHOD_END"], "methodName": ["getDependents"], "fileName": "org.gradle.api.internal.artifacts.result.DefaultResolvedComponentResult"}, {"methodBody": ["METHOD_START", "{", "return   componentId ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.gradle.api.internal.artifacts.result.DefaultResolvedComponentResult"}, {"methodBody": ["METHOD_START", "{", "return   moduleVersion ;", "}", "METHOD_END"], "methodName": ["getModuleVersion"], "fileName": "org.gradle.api.internal.artifacts.result.DefaultResolvedComponentResult"}, {"methodBody": ["METHOD_START", "{", "return   selectionReason ;", "}", "METHOD_END"], "methodName": ["getSelectionReason"], "fileName": "org.gradle.api.internal.artifacts.result.DefaultResolvedComponentResult"}, {"methodBody": ["METHOD_START", "{", "return   selected ;", "}", "METHOD_END"], "methodName": ["getSelected"], "fileName": "org.gradle.api.internal.artifacts.result.DefaultResolvedDependencyResult"}, {"methodBody": ["METHOD_START", "{", "return   failure ;", "}", "METHOD_END"], "methodName": ["getFailure"], "fileName": "org.gradle.api.internal.artifacts.result.DefaultUnresolvedArtifactResult"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.gradle.api.internal.artifacts.result.DefaultUnresolvedArtifactResult"}, {"methodBody": ["METHOD_START", "{", "return   failure ;", "}", "METHOD_END"], "methodName": ["getFailure"], "fileName": "org.gradle.api.internal.artifacts.result.DefaultUnresolvedComponentResult"}, {"methodBody": ["METHOD_START", "{", "return   componentIdentifier ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.gradle.api.internal.artifacts.result.DefaultUnresolvedComponentResult"}, {"methodBody": ["METHOD_START", "{", "return   failure . getSelector (  )  ;", "}", "METHOD_END"], "methodName": ["getAttempted"], "fileName": "org.gradle.api.internal.artifacts.result.DefaultUnresolvedDependencyResult"}, {"methodBody": ["METHOD_START", "{", "return   reason ;", "}", "METHOD_END"], "methodName": ["getAttemptedReason"], "fileName": "org.gradle.api.internal.artifacts.result.DefaultUnresolvedDependencyResult"}, {"methodBody": ["METHOD_START", "{", "return   failure ;", "}", "METHOD_END"], "methodName": ["getFailure"], "fileName": "org.gradle.api.internal.artifacts.result.DefaultUnresolvedDependencyResult"}, {"methodBody": ["METHOD_START", "{", "TreeFormatter   formatter    =    new   TreeFormatter (  )  ;", "formatter . node (  (  (  \" Found   multiple   s   that   can   produce   a   variant   of    \"     +    producerDisplayName )     +     \"    for   consumer   attributes \"  )  )  ;", "AmbiguousVariantSelectionException . formatAttributes ( formatter ,    requested )  ;", "formatter . node (  \" Found   the   following   s \"  )  ;", "formatter . startChildren (  )  ;", "for    ( Pair < ResolvedVariant ,    ConsumerVariantMatchResult . ConsumerVariant >    candidate    :    candidates )     {", "formatter . node (  (  \" Transform   from    \"     +     ( candidate . getLeft (  )  . asDescribable (  )  . getDisplayName (  )  )  )  )  ;", "AmbiguousVariantSelectionException . formatAttributes ( formatter ,    candidate . getLeft (  )  . getAttributes (  )  )  ;", "}", "formatter . endChildren (  )  ;", "return   formatter . toString (  )  ;", "}", "METHOD_END"], "methodName": ["format"], "fileName": "org.gradle.api.internal.artifacts.transform.AmbiguousTransformException"}, {"methodBody": ["METHOD_START", "{", "AttributeMatcher   matcher    =    schema . withProducer ( producer . getSchema (  )  )  ;", "ImmutableAttributes   componentRequested    =    attributesFactory . concat ( requested ,    producer . getOverridenAttributes (  )  )  ;", "List <  ?    extends   ResolvedVariant >    matches    =    matcher . matches ( producer . getVariants (  )  ,    componentRequested )  ;", "if    (  ( matches . size (  )  )     =  =     1  )     {", "return   matches . get (  0  )  . getArtifacts (  )  ;", "}", "if    (  ( matches . size (  )  )     >     1  )     {", "throw   new   AmbiguousVariantSelectionException ( producer . asDescribable (  )  . getDisplayName (  )  ,    componentRequested ,    matches ,    matcher )  ;", "}", "List < Pair < ResolvedVariant ,    ConsumerVariantMatchResult . ConsumerVariant >  >    candidates    =    new   ArrayList < Pair < ResolvedVariant ,    ConsumerVariantMatchResult . ConsumerVariant >  >  (  )  ;", "for    ( ResolvedVariant   variant    :    producer . getVariants (  )  )     {", "AttributeContainerInternal   variantAttributes    =    variant . getAttributes (  )  . asImmutable (  )  ;", "ConsumerVariantMatchResult   matchResult    =    new   ConsumerVariantMatchResult (  )  ;", "consumerProvidedVariantFinder . collectConsumerVariants ( variantAttributes ,    componentRequested ,    matchResult )  ;", "for    ( ConsumerVariantMatchResult . ConsumerVariant   consumerVariant    :    matchResult . getMatches (  )  )     {", "candidates . add ( Pair . of ( variant ,    consumerVariant )  )  ;", "}", "}", "if    (  ( candidates . size (  )  )     =  =     1  )     {", "Pair < ResolvedVariant ,    ConsumerVariantMatchResult . ConsumerVariant >    result    =    candidates . get (  0  )  ;", "return   new   ConsumerProvidedResolvedVariant ( result . getLeft (  )  . getArtifacts (  )  ,    result . getRight (  )  . attributes ,    result . getRight (  )  . transformer )  ;", "}", "if    (  !  ( candidates . isEmpty (  )  )  )     {", "throw   new   AmbiguousTransformException ( producer . asDescribable (  )  . getDisplayName (  )  ,    componentRequested ,    candidates )  ;", "}", "if    ( ignoreWhenNoMatches )     {", "return   ResolvedArtifactSet . EMPTY ;", "}", "throw   new   NoionException ( producer . asDescribable (  )  . getDisplayName (  )  ,    componentRequested ,    producer . getVariants (  )  ,    matcher )  ;", "}", "METHOD_END"], "methodName": ["doSelect"], "fileName": "org.gradle.api.internal.artifacts.transform.AttributeMatchingVariantSelector"}, {"methodBody": ["METHOD_START", "{", "ConsumerProvidedVariantFinder . AttributeSpecificCache   toCache    =    getCache ( requested )  ;", "ConsumerVariantMatchResult   cachedResult    =    toCache . transforms . get ( actual )  ;", "if    ( cachedResult    =  =    null )     {", "cachedResult    =    new   ConsumerVariantMatchResult (  )  ;", "findProducersFor ( actual ,    requested ,    cachedResult )  ;", "toCache . transforms . put ( actual ,    cachedResult )  ;", "}", "cachedResult . applyTo ( result )  ;", "}", "METHOD_END"], "methodName": ["collectConsumerVariants"], "fileName": "org.gradle.api.internal.artifacts.transform.ConsumerProvidedVariantFinder"}, {"methodBody": ["METHOD_START", "{", "List < VariantTransformRegistry . Registration >    candidates    =    new   ArrayList < VariantTransformRegistry . Registration >  (  )  ;", "for    ( VariantTransformRegistry . Registration    :    variantTransforms . getTransforms (  )  )     {", "if    ( matchAttributes ( getTo (  )  ,    requested )  )     {", "if    ( matchAttributes ( actual ,    getFrom (  )  )  )     {", "ImmutableAttributes   variantAttributes    =    attributesFactory . concat ( actual . asImmutable (  )  ,    getTo (  )  . asImmutable (  )  )  ;", "result . matched ( variantAttributes ,    getArtifactTransform (  )  ,     1  )  ;", "}", "candidates . add (  ;", "}", "}", "if    ( result . hasMatches (  )  )     {", "return ;", "}", "for    ( final   VariantTransformRegistry . Registration   candidate    :    candidates )     {", "ConsumerVariantMatchResult   inputVariants    =    new   ConsumerVariantMatchResult (  )  ;", "collectConsumerVariants ( actual ,    candidate . getFrom (  )  ,    inputVariants )  ;", "if    (  !  ( inputVariants . hasMatches (  )  )  )     {", "continue ;", "}", "for    ( final   ConsumerVariantMatchResult . ConsumerVariant   inputVariant    :    inputVariants . getMatches (  )  )     {", "ImmutableAttributes   variantAttributes    =    attributesFactory . concat ( inputVariant . attributes . asImmutable (  )  ,    candidate . getTo (  )  . asImmutable (  )  )  ;", "ArtifactTransformer   r    =    new   ChainedTransformer ( inputVariant . r ,    candidate . getArtifactTransform (  )  )  ;", "result . matched ( variantAttributes ,    r ,     (  ( inputVariant . depth )     +     1  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["findProducersFor"], "fileName": "org.gradle.api.internal.artifacts.transform.ConsumerProvidedVariantFinder"}, {"methodBody": ["METHOD_START", "{", "ConsumerProvidedVariantFinder . AttributeSpecificCache   cache    =    attributeSpecificCache . get ( attributes )  ;", "if    ( cache    =  =    null )     {", "cache    =    new   ConsumerProvidedVariantFinder . AttributeSpecificCache (  )  ;", "attributeSpecificCache . put ( attributes ,    cache )  ;", "}", "return   cache ;", "}", "METHOD_END"], "methodName": ["getCache"], "fileName": "org.gradle.api.internal.artifacts.transform.ConsumerProvidedVariantFinder"}, {"methodBody": ["METHOD_START", "{", "AttributeMatcher   schemaToMatchOn    =    schema . matcher (  )  ;", "Map < AttributeContainer ,    Boolean >    cache    =    getCache ( requested )  . ignoreExActual ;", "Boolean   match    =    cache . get ( actual )  ;", "if    ( match    =  =    null )     {", "match    =    schemaToMatchOn . isMatching ( actual ,    requested )  ;", "cache . put ( actual ,    match )  ;", "}", "return   match ;", "}", "METHOD_END"], "methodName": ["matchAttributes"], "fileName": "org.gradle.api.internal.artifacts.transform.ConsumerProvidedVariantFinder"}, {"methodBody": ["METHOD_START", "{", "result . matches . addAll ( this . matches )  ;", "}", "METHOD_END"], "methodName": ["applyTo"], "fileName": "org.gradle.api.internal.artifacts.transform.ConsumerVariantMatchResult"}, {"methodBody": ["METHOD_START", "{", "return   matches ;", "}", "METHOD_END"], "methodName": ["getMatches"], "fileName": "org.gradle.api.internal.artifacts.transform.ConsumerVariantMatchResult"}, {"methodBody": ["METHOD_START", "{", "return    !  ( matches . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["hasMatches"], "fileName": "org.gradle.api.internal.artifacts.transform.ConsumerVariantMatchResult"}, {"methodBody": ["METHOD_START", "{", "if    (  ( minDepth )     =  =     0  )     {", "minDepth    =    depth ;", "} else", "if    ( depth    <     ( minDepth )  )     {", "matches . clear (  )  ;", "minDepth    =    depth ;", "} else", "if    ( depth    >     ( minDepth )  )     {", "return ;", "}", "matches . add ( new    . ConsumerVariant ( output ,    transform ,    depth )  )  ;", "}", "METHOD_END"], "methodName": ["matched"], "fileName": "org.gradle.api.internal.artifacts.transform.ConsumerVariantMatchResult"}, {"methodBody": ["METHOD_START", "{", "return   new   AttributeMatchingVariantSelector ( consumerProvidedVariantFinder ,    schema ,    attributesFactory ,    consumerAttributes . asImmutable (  )  ,    allowNoMatchingVariants )  ;", "}", "METHOD_END"], "methodName": ["variantSelector"], "fileName": "org.gradle.api.internal.artifacts.transform.DefaultArtifactTransforms"}, {"methodBody": ["METHOD_START", "{", "Snapshot   inputFileSnapshot    =    fileSystemSnapshotter . snapshotAll ( inputFile )  ;", "return   new    . CacheKey ( inputFileSnapshot ,    inputsHash )  ;", "}", "METHOD_END"], "methodName": ["getCacheKey"], "fileName": "org.gradle.api.internal.artifacts.transform.DefaultTransformedFileCache"}, {"methodBody": ["METHOD_START", "{", "return   producing . guardByKey ( cacheKey ,    new   Factory < List < File >  >  (  )     {", "@ Override", "public   List < File >    create (  )     {", "List < File >    files    =    resultHashToResult . get ( cacheKey )  ;", "if    ( files    !  =    null )     {", "return   files ;", "}", "files    =    cache . withFileLock ( new   Factory < List < File >  >  (  )     {", "@ Override", "public   List < File >    create (  )     {", "HashCode   persistentCacheKey    =    cacheKey . getPersistentCacheKey (  )  ;", "List < File >    files    =    indexedCache . get ( persistentCacheKey )  ;", "if    ( files    !  =    null )     {", "boolean   allExist    =    true ;", "for    ( File   file    :    files )     {", "if    (  !  ( file . exists (  )  )  )     {", "allExist    =    false ;", "break ;", "}", "}", "if    ( allExist )     {", "return   files ;", "}", "}", "String   key    =     (  ( inputFile . getName (  )  )     +     \"  /  \"  )     +    persistentCacheKey ;", ". TransformAction   action    =    new    . TransformAction ( transformer ,    inputFile )  ;", "try    {", "fileStore . add ( key ,    action )  ;", "}    catch    ( FileStoreAddActionException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e . getCause (  )  )  ;", "}", "indexedCache . put ( persistentCacheKey ,    action . result )  ;", "return   action . result ;", "}", "}  )  ;", "resultHashToResult . put ( cacheKey ,    files )  ;", "return   files ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["loadIntoCache"], "fileName": "org.gradle.api.internal.artifacts.transform.DefaultTransformedFileCache"}, {"methodBody": ["METHOD_START", "{", "if    ( configAction    =  =    null )     {", "return    . NO _ PARAMETERS ;", "}", "ActionConfiguration   config    =    new   DefaultActionConfiguration (  )  ;", "configAction . execute ( config )  ;", "return   config . getParams (  )  ;", "}", "METHOD_END"], "methodName": ["getTransformParameters"], "fileName": "org.gradle.api.internal.artifacts.transform.DefaultVariantTransformRegistry"}, {"methodBody": ["METHOD_START", "{", "return   transforms ;", "}", "METHOD_END"], "methodName": ["getTransforms"], "fileName": "org.gradle.api.internal.artifacts.transform.DefaultVariantTransformRegistry"}, {"methodBody": ["METHOD_START", "{", "return   failure ;", "}", "METHOD_END"], "methodName": ["getFailure"], "fileName": "org.gradle.api.internal.artifacts.transform.TransformArtifactOperation"}, {"methodBody": ["METHOD_START", "{", "return   result ;", "}", "METHOD_END"], "methodName": ["getResult"], "fileName": "org.gradle.api.internal.artifacts.transform.TransformArtifactOperation"}, {"methodBody": ["METHOD_START", "{", "return   implementationClass ;", "}", "METHOD_END"], "methodName": ["getImplementationClass"], "fileName": "org.gradle.api.internal.artifacts.transform.TransformArtifactsAction"}, {"methodBody": ["METHOD_START", "{", "return   failure ;", "}", "METHOD_END"], "methodName": ["getFailure"], "fileName": "org.gradle.api.internal.artifacts.transform.TransformFileOperation"}, {"methodBody": ["METHOD_START", "{", "return   result ;", "}", "METHOD_END"], "methodName": ["getResult"], "fileName": "org.gradle.api.internal.artifacts.transform.TransformFileOperation"}, {"methodBody": ["METHOD_START", "{", "DefaultBuildCacheHasher   hasher    =    new   DefaultBuildCacheHasher (  )  ;", "hasher . putString ( implementation . getName (  )  )  ;", "hasher . putHash ( classLoaderHierarchyHasher . getClassLoaderHash ( implementation . getClassLoader (  )  )  )  ;", "Isolatable < Object [  ]  >    paramsSnapshot ;", "try    {", "paramsSnapshot    =    isolatableFactory . isolate ( params )  ;", "}    catch    ( Exception   e )     {", "throw   new   VariantTransformConfigurationException ( String . format (  \" Could   not   snapshot   configuration   values   for   transform    % s :     % s \"  ,    ModelType . of ( implementation )  . getDisplayName (  )  ,    Arrays . asList ( params )  )  ,    e )  ;", "}", "paramsSnapshot . appendToHasher ( hasher )  ;", "TransformArtifactsAction   transformer    =    new   TransformArtifactsAction ( implementation ,    paramsSnapshot ,    instantiator )  ;", "return   new    ( from ,    to ,    transformer ,    hasher . hash (  )  ,    transformedFileCache )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.api.internal.artifacts.transform.UserCodeBackedTransformer"}, {"methodBody": ["METHOD_START", "{", "return   this ;", "}", "METHOD_END"], "methodName": ["getArtifactTransform"], "fileName": "org.gradle.api.internal.artifacts.transform.UserCodeBackedTransformer"}, {"methodBody": ["METHOD_START", "{", "return   from ;", "}", "METHOD_END"], "methodName": ["getFrom"], "fileName": "org.gradle.api.internal.artifacts.transform.UserCodeBackedTransformer"}, {"methodBody": ["METHOD_START", "{", "return   to ;", "}", "METHOD_END"], "methodName": ["getTo"], "fileName": "org.gradle.api.internal.artifacts.transform.UserCodeBackedTransformer"}, {"methodBody": ["METHOD_START", "{", "ArtifactTypeDefinition   definition    =    artifactTypeDefinitions . findByName ( extension )  ;", "if    ( definition    !  =    null )     {", "attributes    =    attributesFactory . concat (  (  ( AttributeContainerInternal )     ( definition . getAttributes (  )  )  )  . asImmutable (  )  ,    attributes )  ;", "}", "return   attributes ;", "}", "METHOD_END"], "methodName": ["applyForExtension"], "fileName": "org.gradle.api.internal.artifacts.type.DefaultArtifactTypeRegistry"}, {"methodBody": ["METHOD_START", "{", "if    (  ( constraint . getBranch (  )  )     !  =    null )     {", "return    (  ( spec . getUniqueId (  )  )     +     \"  : b :  \"  )     +     ( constraint . getBranch (  )  )  ;", "}", "return    (  ( spec . getUniqueId (  )  )     +     \"  : v :  \"  )     +     ( constraint . getPreferredVersion (  )  )  ;", "}", "METHOD_END"], "methodName": ["cacheKey"], "fileName": "org.gradle.api.internal.artifacts.vcs.VcsDependencyResolver"}, {"methodBody": ["METHOD_START", "{", "String   repositoryId    =    HashUtil . createCompactMD 5  ( spec . getUniqueId (  )  )  ;", "File   versionDirectory    =    new   File ( baseWorkingDir ,     (  ( repositoryId    +     \"  -  \"  )     +     ( selectedVersion . getCanonicalId (  )  )  )  )  ;", "return   versionControlSystem . populate ( versionDirectory ,    selectedVersion ,    spec )  ;", "}", "METHOD_END"], "methodName": ["populateWorkingDirectory"], "fileName": "org.gradle.api.internal.artifacts.vcs.VcsDependencyResolver"}, {"methodBody": ["METHOD_START", "{", "String   cacheKey    =    cacheKey ( spec ,    depSelector . getVersionConstraint (  )  )  ;", "if    ( selectedVersionCache . containsKey ( cacheKey )  )     {", "return   selectedVersionCache . get ( cacheKey )  ;", "} else    {", "VersionRef   selectedVersion    =    selectVersionFromRepository ( spec ,    versionControlSystem ,    depSelector . getVersionConstraint (  )  )  ;", "selectedVersionCache . put ( cacheKey ,    selectedVersion )  ;", "return   selectedVersion ;", "}", "}", "METHOD_END"], "methodName": ["selectVersion"], "fileName": "org.gradle.api.internal.artifacts.vcs.VcsDependencyResolver"}, {"methodBody": ["METHOD_START", "{", "if    (  ( constraint . getBranch (  )  )     !  =    null )     {", "return   versionControlSystem . getBranch ( spec ,    constraint . getBranch (  )  )  ;", "}", "String   version    =    constraint . getPreferredVersion (  )  ;", "VersionSelector   versionSelector    =    versionSelectorScheme . parseSelector ( version )  ;", "if    (  ( versionSelector   instanceof   LatestVersionSelector )     &  &     (  (  ( LatestVersionSelector )     ( versionSelector )  )  . getSelectorStatus (  )  . equals (  \" gration \"  )  )  )     {", "return   versionControlSystem . getDefaultBranch ( spec )  ;", "}", "if    ( versionSelector . requiresMetadata (  )  )     {", "return   null ;", "}", "Set < VersionRef >    versions    =    versionControlSystem . getAvailableVersions ( spec )  ;", "Version   bestVersion    =    null ;", "VersionRef   bestCandidate    =    null ;", "for    ( VersionRef   candidate    :    versions )     {", "Version   candidateVersion    =    VersionParser . INSTANCE . transform ( candidate . getVersion (  )  )  ;", "if    ( versionSelector . accept ( candidateVersion )  )     {", "if    (  ( bestCandidate    =  =    null )     |  |     (  ( versionComparator . asVersionComparator (  )  . compare ( candidateVersion ,    bestVersion )  )     >     0  )  )     {", "bestVersion    =    candidateVersion ;", "bestCandidate    =    candidate ;", "}", "}", "}", "return   bestCandidate ;", "}", "METHOD_END"], "methodName": ["selectVersionFromRepository"], "fileName": "org.gradle.api.internal.artifacts.vcs.VcsDependencyResolver"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultOrderedCompatibilityRule < T >  ( comparator ,    reverse )  ;", "}", "METHOD_END"], "methodName": ["orderedCompatibility"], "fileName": "org.gradle.api.internal.attributes.AttributeMatchingRules"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultOrderedDisambiguationRule < T >  ( comparator ,    pickFirst )  ;", "}", "METHOD_END"], "methodName": ["orderedDisambiguation"], "fileName": "org.gradle.api.internal.attributes.AttributeMatchingRules"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultAttributesSchema . MergedSchema ( producerSchema )  ;", "}", "METHOD_END"], "methodName": ["mergeWith"], "fileName": "org.gradle.api.internal.attributes.DefaultAttributesSchema"}, {"methodBody": ["METHOD_START", "{", "return   NotationParserBuilder . toType ( ClientModule . class )  . fromCharSequence ( new   DependencyStringNotationConverter < DefaultClientModule >  ( instantiator ,    DefaultClientModule . class )  )  . converter ( new   DependencyMapNotationConverter < DefaultClientModule >  ( instantiator ,    DefaultClientModule . class )  )  . toComposite (  )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.api.internal.notations.ClientModuleNotationParserFactory"}, {"methodBody": ["METHOD_START", "{", "SelfResolvingDependency   dependency    =    internCache . get ( notation )  ;", "if    ( dependency    =  =    null )     {", "dependency    =    maybeCreateUnderLock ( notation )  ;", "}", "result . converted ( dependency )  ;", "}", "METHOD_END"], "methodName": ["convert"], "fileName": "org.gradle.api.internal.notations.DependencyClassPathNotationConverter"}, {"methodBody": ["METHOD_START", "{", "List < File >    groovyImpl    =    classPathRegistry . getClassPath ( LOCAL _ GROOVY . name (  )  )  . getAsFiles (  )  ;", "List < File >    installationBeacon    =    classPathRegistry . getClassPath (  \" GRADLE _ INSTALLATION _ BEACON \"  )  . getAsFiles (  )  ;", "apiClasspath . removeAll ( groovyImpl )  ;", "apiClasspath . removeAll ( installationBeacon )  ;", "removeGradleScriptKotlin ( apiClasspath )  ;", "return    (  ( FileCollectionInternal )     ( relocatedDepsJar ( apiClasspath ,     \" gradleApi (  )  \"  ,    RuntimeShadedJarType . API )  . plus ( fileResolver . resolveFiles ( groovyImpl ,    installationBeacon )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["gradleApiFileCollection"], "fileName": "org.gradle.api.internal.notations.DependencyClassPathNotationConverter"}, {"methodBody": ["METHOD_START", "{", "List < File >    gradleApi    =    classPathRegistry . getClassPath ( GRADLE _ API . name (  )  )  . getAsFiles (  )  ;", "testKitClasspath . removeAll ( gradleApi )  ;", "return    (  ( FileCollectionInternal )     ( relocatedDepsJar ( testKitClasspath ,     \" gradleTestKit (  )  \"  ,    RuntimeShadedJarType . TEST _ KIT )  . plus ( gradleApiFileCollection ( gradleApi )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["gradleTestKitFileCollection"], "fileName": "org.gradle.api.internal.notations.DependencyClassPathNotationConverter"}, {"methodBody": ["METHOD_START", "{", "SelfResolvingDependency   dependency    =    internCache . get ( notation )  ;", "if    ( dependency    =  =    null )     {", "final   Collection < File >    classpath    =    classPathRegistry . getClassPath ( notation . name (  )  )  . getAsFiles (  )  ;", "boolean   runningFromInstallation    =     ( currentGradleInstallation . getInstallation (  )  )     !  =    null ;", "FileCollectionInternal   fileCollectionInternal ;", "if    ( runningFromInstallation    &  &     ( notation . equals ( GRADLE _ API )  )  )     {", "fileCollectionInternal    =    new    . GeneratedFileCollection ( notation . displayName )     {", "@ Override", "FileCollection   generateFileCollection (  )     {", "try    {", "internCacheWriteLock . lock (  )  ;", "return   gradleApiFileCollection ( classpath )  ;", "}    finally    {", "internCacheWriteLock . unlock (  )  ;", "}", "}", "}  ;", "} else", "if    ( runningFromInstallation    &  &     ( notation . equals ( GRADLE _ TEST _ KIT )  )  )     {", "fileCollectionInternal    =    new    . GeneratedFileCollection ( notation . displayName )     {", "@ Override", "FileCollection   generateFileCollection (  )     {", "try    {", "internCacheWriteLock . lock (  )  ;", "return   gradleTestKitFileCollection ( classpath )  ;", "}    finally    {", "internCacheWriteLock . unlock (  )  ;", "}", "}", "}  ;", "} else    {", "fileCollectionInternal    =    fileResolver . resolveFiles ( classpath )  ;", "}", "dependency    =    instantiator . newInstance ( DefaultSelfResolvingDependency . class ,    new   OpaqueComponentIdentifier ( notation . displayName )  ,    fileCollectionInternal )  ;", "internCache . put ( notation ,    dependency )  ;", "}", "return   dependency ;", "}", "METHOD_END"], "methodName": ["maybeCreateUnderLock"], "fileName": "org.gradle.api.internal.notations.DependencyClassPathNotationConverter"}, {"methodBody": ["METHOD_START", "{", "File   gradleImplDepsJar    =    runtimeShadedJarFactory . get ( runtimeShadedJarType ,    classpath )  ;", "return   new   file . collections . FileCollectionAdapter ( new   SingletonFileSet ( gradleImplDepsJar ,    displayName )  )  ;", "}", "METHOD_END"], "methodName": ["relocatedDepsJar"], "fileName": "org.gradle.api.internal.notations.DependencyClassPathNotationConverter"}, {"methodBody": ["METHOD_START", "{", "for    ( File   file    :    new   ArrayList < File >  ( apiClasspath )  )     {", "if    ( file . getName (  )  . contains (  \" kotlin \"  )  )     {", "apiClasspath . remove ( file )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["removeGradleScriptKotlin"], "fileName": "org.gradle.api.internal.notations.DependencyClassPathNotationConverter"}, {"methodBody": ["METHOD_START", "{", "return   NotationParserBuilder . toType ( DependencyConstraint . class )  . fromCharSequence ( new   DependencyStringNotationConverter < DefaultDependencyConstraint >  ( instantiator ,    DefaultDependencyConstraint . class )  )  . converter ( new   DependencyMapNotationConverter < DefaultDependencyConstraint >  ( instantiator ,    DefaultDependencyConstraint . class )  )  . invalidNotationMessage (  \" Comprehensive   documentation   on   dependency   notations   is   available   in   DSL   reference   for   DependencyHandler   type .  \"  )  . toComposite (  )  ;", "}", "METHOD_END"], "methodName": ["parser"], "fileName": "org.gradle.api.internal.notations.DependencyConstraintNotationParser"}, {"methodBody": ["METHOD_START", "{", "result . converted ( instantiator . newInstance ( DefaultSelfResolvingDependency . class ,    notation )  )  ;", "}", "METHOD_END"], "methodName": ["convert"], "fileName": "org.gradle.api.internal.notations.DependencyFilesNotationConverter"}, {"methodBody": ["METHOD_START", "{", "T   dependency ;", "if    ( configuration    =  =    null )     {", "dependency    =    instantiator . newInstance ( resultingType ,    group ,    name ,    version )  ;", "} else    {", "dependency    =    instantiator . newInstance ( resultingType ,    group ,    name ,    version ,    configuration )  ;", "}", "if    ( dependency   instanceof   External )     {", "ModuleFactoryHelper . addExplicitArtifactsIfDefined (  (  ( External )     ( dependency )  )  ,    ext ,    classifier )  ;", "}", "return   dependency ;", "}", "METHOD_END"], "methodName": ["parseMap"], "fileName": "org.gradle.api.internal.notations.DependencyMapNotationConverter"}, {"methodBody": ["METHOD_START", "{", "return   NotationParserBuilder . toType ( implementationType )  . fromCharSequence ( new   DependencyStringNotationConverter < T >  ( instantiator ,    implementationType )  )  . converter ( new   DependencyMapNotationConverter < T >  ( instantiator ,    implementationType )  )  . invalidNotationMessage (  \" Comprehensive   documentation   on   dependency   notations   is   available   in   DSL   reference   for   DependencyHandler   type .  \"  )  . toComposite (  )  ;", "}", "METHOD_END"], "methodName": ["parser"], "fileName": "org.gradle.api.internal.notations.DependencyMetadataNotationParser"}, {"methodBody": ["METHOD_START", "{", "return   NotationParserBuilder . toType ( Dependency . class )  . fromCharSequence ( new   DependencyStringNotationConverter < DefaultExternalModuleDependency >  ( instantiator ,    DefaultExternalModuleDependency . class )  )  . converter ( new   DependencyMapNotationConverter < DefaultExternalModuleDependency >  ( instantiator ,    DefaultExternalModuleDependency . class )  )  . fromType ( FileCollection . class ,    new   DependencyFilesNotationConverter ( instantiator )  )  . fromType ( Project . class ,    new   DependencyProjectNotationConverter ( dependencyFactory )  )  . fromType ( ClassPathNotation . class ,    new   DependencyClassPathNotationConverter ( instantiator ,    classPathRegistry ,    fileLookup . getFileResolver (  )  ,    runtimeShadedJarFactory ,    currentGradleInstallation )  )  . invalidNotationMessage (  \" Comprehensive   documentation   on   dependency   notations   is   available   in   DSL   reference   for   DependencyHandler   type .  \"  )  . toComposite (  )  ;", "}", "METHOD_END"], "methodName": ["parser"], "fileName": "org.gradle.api.internal.notations.DependencyNotationParser"}, {"methodBody": ["METHOD_START", "{", "result . converted ( factory . create ( notation )  )  ;", "}", "METHOD_END"], "methodName": ["convert"], "fileName": "org.gradle.api.internal.notations.DependencyProjectNotationConverter"}, {"methodBody": ["METHOD_START", "{", "result . converted ( createDependencyFromString ( notation )  )  ;", "}", "METHOD_END"], "methodName": ["convert"], "fileName": "org.gradle.api.internal.notations.DependencyStringNotationConverter"}, {"methodBody": ["METHOD_START", "{", "ParsedModuleStringNotation   parsedNotation    =    splitModuleFromExtension ( notation )  ;", "T   moduleDependency    =    instantiator . newInstance ( wantedType ,    parsedNotation . getGroup (  )  ,    parsedNotation . getName (  )  ,    parsedNotation . getVersion (  )  )  ;", "if    ( moduleDependency   instanceof   ExternalDependency )     {", "ModuleFactoryHelper . addExplicitArtifactsIfDefined (  (  ( ExternalDependency )     ( moduleDependency )  )  ,    parsedNotation . getArtifactType (  )  ,    parsedNotation . getClassifier (  )  )  ;", "}", "return   moduleDependency ;", "}", "METHOD_END"], "methodName": ["createDependencyFromString"], "fileName": "org.gradle.api.internal.notations.DependencyStringNotationConverter"}, {"methodBody": ["METHOD_START", "{", "int   idx    =    notation . lastIndexOf (  '  @  '  )  ;", "if    (  ( idx    =  =     (  -  1  )  )     |  |     ( ClientModule . class . isAssignableFrom ( wantedType )  )  )     {", "return   new   ParsedModule ( notation ,    null )  ;", "}", "int   versionIndx    =    notation . lastIndexOf (  '  :  '  )  ;", "if    ( versionIndx    <    idx )     {", "return   new   ParsedModule ( notation . substring (  0  ,    idx )  ,    notation . substring (  ( idx    +     1  )  )  )  ;", "}", "return   new   ParsedModule ( notation ,    null )  ;", "}", "METHOD_END"], "methodName": ["splitModuleFromExtension"], "fileName": "org.gradle.api.internal.notations.DependencyStringNotationConverter"}, {"methodBody": ["METHOD_START", "{", "assert   notation    !  =    null ;", "String [  ]    split    =    notation . split (  \"  :  \"  )  ;", "if    (  ( split . length )     !  =     2  )     {", "throw   new   UnsupportedNotationException ( notation )  ;", "}", "String   group    =     . validate ( split [  0  ]  . trim (  )  ,    notation )  ;", "String   name    =     . validate ( split [  1  ]  . trim (  )  ,    notation )  ;", "return   moduleIdentifierFactory . module ( group ,    name )  ;", "}", "METHOD_END"], "methodName": ["parseType"], "fileName": "org.gradle.api.internal.notations.ModuleIdentifierNotationConverter"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( GUtil . isTrue ( part )  )  )     {", "throw   new   UnsupportedNotationException ( notation )  ;", "}", "for    ( char   c    :     . INVALID _ SPEC _ CHARS )     {", "if    (  ( part . indexOf ( c )  )     !  =     (  -  1  )  )     {", "throw   new   UnsupportedNotationException ( notation )  ;", "}", "}", "return   part ;", "}", "METHOD_END"], "methodName": ["validate"], "fileName": "org.gradle.api.internal.notations.ModuleIdentifierNotationConverter"}, {"methodBody": ["METHOD_START", "{", "return   NotationParserBuilder . toType ( ProjectDependency . class )  . converter ( new   ProjectDependencyFactory . ProjectDependencyMapNotationConverter ( projectFinder ,    factory )  )  . toComposite (  )  . parseNotation ( map )  ;", "}", "METHOD_END"], "methodName": ["createFromMap"], "fileName": "org.gradle.api.internal.notations.ProjectDependencyFactory"}, {"methodBody": ["METHOD_START", "{", "return    (  ( resource    =  =    null )     |  |     (  ( maybeRelocateResource ( resource )  )     =  =    null )  )     |  |     (  !  ( mustBeRelocated ( resource )  )  )  ;", "}", "METHOD_END"], "methodName": ["keepOriginalResource"], "fileName": "org.gradle.api.internal.runtimeshaded.ImplementationDependencyRelocator"}, {"methodBody": ["METHOD_START", "{", "String   value    =    name ;", "String   prefix    =     \"  \"  ;", "Matcher   m    =    classPattern . matcher ( name )  ;", "if    ( m . matches (  )  )     {", "prefix    =     ( m . group (  1  )  )     +     \" L \"  ;", "name    =    m . group (  2  )  ;", "}", "String   relocated    =    maybeeResource ( name )  ;", "if    ( relocated    =  =    null )     {", "return   value ;", "} else    {", "return   prefix . concat ( relocated )  ;", "}", "}", "METHOD_END"], "methodName": ["map"], "fileName": "org.gradle.api.internal.runtimeshaded.ImplementationDependencyRelocator"}, {"methodBody": ["METHOD_START", "{", "if    ( prefixes . find ( resource )  )     {", "return    \" org / gradle /  / impldep /  \"     +    resource ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["maybeRelocateResource"], "fileName": "org.gradle.api.internal.runtimeshaded.ImplementationDependencyRelocator"}, {"methodBody": ["METHOD_START", "{", "if    ( literal . startsWith (  \" class $  \"  )  )     {", "String   className    =    literal . substring (  6  )  . replace (  '  $  '  ,     '  .  '  )  ;", "String   replacement    =    maybeRelocateResource ( className . replace (  '  .  '  ,     '  /  '  )  )  ;", "if    ( replacement    =  =    null )     {", "return   null ;", "}", "String   fieldNameReplacement    =     \" class $  \"     +     ( replacement . replace (  '  /  '  ,     '  $  '  )  )  ;", "return   new    . ClassLiteralRemapping ( className ,    replacement ,    fieldNameReplacement )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["maybeRemap"], "fileName": "org.gradle.api.internal.runtimeshaded.ImplementationDependencyRelocator"}, {"methodBody": ["METHOD_START", "{", "for    ( String   mustRelocate    :    mustRelocateList )     {", "if    ( resource . startsWith ( mustRelocate )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["mustBeRelocated"], "fileName": "org.gradle.api.internal.runtimeshaded.ImplementationDependencyRelocator"}, {"methodBody": ["METHOD_START", "{", "final   Trie . Builder   builder    =    new   Trie . Builder (  )  ;", "IoActions . withResource (  . class . getResourceAsStream (  (  ( type . getIdentifier (  )  )     +     \"  - relocated . txt \"  )  )  ,    new   ErroringAction < InputStream >  (  )     {", "@ Override", "protected   void   doExecute ( InputStream   thing )    throws   Exception    {", "BufferedReader   reader    =    new   BufferedReader ( new   InputStreamReader ( thing ,    Charset . forName (  \" UTF -  8  \"  )  )  )  ;", "String   line ;", "while    (  ( line    =    reader . readLine (  )  )     !  =    null )     {", "line    =    line . trim (  )  ;", "if    (  ( line . length (  )  )     >     0  )     {", "builder . addWord ( line )  ;", "}", "}", "}", "}  )  ;", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["readPrefixes"], "fileName": "org.gradle.api.internal.runtimeshaded.ImplementationDependencyRelocator"}, {"methodBody": ["METHOD_START", "{", "Trie . Builder   builder    =    new   Trie . Builder (  )  ;", "for    ( Fifi :    getClasspath (  )  )     {", "if    ( fiexists (  )  )     {", "if    ( figetName (  )  . endsWith (  \"  . jar \"  )  )     {", "processJarFifi   builder )  ;", "} else    {", "processDirectory ( fi   builder )  ;", "}", "}", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["collectPackages"], "fileName": "org.gradle.api.internal.runtimeshaded.PackageListGenerator"}, {"methodBody": ["METHOD_START", "{", "IoActions . writeTextFile ( getOutputFile (  )  ,    new   ErroringAction < BufferedWriter >  (  )     {", "@ Override", "public   void   doExecute ( final   BufferedWriter   bufferedWriter )    throws   Exception    {", "Trie   packages    =    collectPackages (  )  ;", "packages . dump ( false ,    new   ErroringAction < String >  (  )     {", "@ Override", "public   void   doExecute ( String   s )    throws   Exception    {", "bufferedWriter . write ( s )  ;", "bufferedWriter . newLine (  )  ;", "}", "}  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["generate"], "fileName": "org.gradle.api.internal.runtimeshaded.PackageListGenerator"}, {"methodBody": ["METHOD_START", "{", "return   classpath ;", "}", "METHOD_END"], "methodName": ["getClasspath"], "fileName": "org.gradle.api.internal.runtimeshaded.PackageListGenerator"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getDirectoryFileTreeFactory"], "fileName": "org.gradle.api.internal.runtimeshaded.PackageListGenerator"}, {"methodBody": ["METHOD_START", "{", "return   excludes ;", "}", "METHOD_END"], "methodName": ["getExcludes"], "fileName": "org.gradle.api.internal.runtimeshaded.PackageListGenerator"}, {"methodBody": ["METHOD_START", "{", "return   outputFile ;", "}", "METHOD_END"], "methodName": ["getOutputFile"], "fileName": "org.gradle.api.internal.runtimeshaded.PackageListGenerator"}, {"methodBody": ["METHOD_START", "{", "return   new   ZipInputStream ( new   FileInputStream ( file )  )  ;", "}", "METHOD_END"], "methodName": ["openJarFile"], "fileName": "org.gradle.api.internal.runtimeshaded.PackageListGenerator"}, {"methodBody": ["METHOD_START", "{", "int   endIndex    =    zipEntry . getName (  )  . lastIndexOf (  \"  /  \"  )  ;", "if    ( endIndex    >     0  )     {", "String   pName    =    zipEntry . getName (  )  . substring (  0  ,    endIndex )  ;", "for    ( String   exclude    :    getExcludes (  )  )     {", "if    (  ( pName    +     \"  /  \"  )  . startsWith (  ( exclude    +     \"  /  \"  )  )  )     {", "return ;", "}", "}", "builder . addWord ( pName )  ;", "}", "}", "METHOD_END"], "methodName": ["processClassFile"], "fileName": "org.gradle.api.internal.runtimeshaded.PackageListGenerator"}, {"methodBody": ["METHOD_START", "{", "getDirectoryFileTreeFactory (  )  . create ( file )  . visit ( new   FileVisitor (  )     {", "@ Override", "public   void   visitDir ( FileVisitDetails   dirDetails )     {", "}", "@ Override", "public   void   visitFile ( FileVisitDetails   fileDetails )     {", "try    {", "ZipEntry   zipEntry    =    new   ZipEntry ( fileDetails . getPath (  )  )  ;", "InputStream   inputStream    =    fileDetails . open (  )  ;", "try    {", "processEntry ( zipEntry ,    builder )  ;", "}    finally    {", "inputStream . close (  )  ;", "}", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["processDirectory"], "fileName": "org.gradle.api.internal.runtimeshaded.PackageListGenerator"}, {"methodBody": ["METHOD_START", "{", "String   name    =    zipEntry . getName (  )  ;", "if    ( name . endsWith (  \"  . class \"  )  )     {", "processClassFile ( zipEntry ,    builder )  ;", "}", "}", "METHOD_END"], "methodName": ["processEntry"], "fileName": "org.gradle.api.internal.runtimeshaded.PackageListGenerator"}, {"methodBody": ["METHOD_START", "{", "IoActions . withResource ( PackageListGenerator . openJarFile ( file )  ,    new   ErroringAction < ZipInputStream >  (  )     {", "@ Override", "protected   void   doExecute ( ZipInputStream   inputStream )    throws   Exception    {", "ZipEntry   zipEntry    =    inputStream . getNextEntry (  )  ;", "while    ( zipEntry    !  =    null )     {", "processEntry ( zipEntry ,    builder )  ;", "zipEntry    =    inputStream . getNextEntry (  )  ;", "}", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["processJarFile"], "fileName": "org.gradle.api.internal.runtimeshaded.PackageListGenerator"}, {"methodBody": ["METHOD_START", "{", "this . classpath    =    classpath ;", "}", "METHOD_END"], "methodName": ["setClasspath"], "fileName": "org.gradle.api.internal.runtimeshaded.PackageListGenerator"}, {"methodBody": ["METHOD_START", "{", "this . excludes    =    excludes ;", "}", "METHOD_END"], "methodName": ["setExcludes"], "fileName": "org.gradle.api.internal.runtimeshaded.PackageListGenerator"}, {"methodBody": ["METHOD_START", "{", "this . outputFile    =    outputFile ;", "}", "METHOD_END"], "methodName": ["setOutputFile"], "fileName": "org.gradle.api.internal.runtimeshaded.PackageListGenerator"}, {"methodBody": ["METHOD_START", "{", "StreamByteBuffer   streamByteBuffer    =    new   StreamByteBuffer ( Math . max ( Math . min (  (  ( int )     ( zipEntry . getSize (  )  )  )  ,     (  1  0  2  4     *     1  0  2  4  )  )  ,     4  0  9  6  )  )  ;", "streamByteBuffer . readFully ( inputStream )  ;", "String   originalName    =    zipEntry . getName (  )  ;", "byte [  ]    resource    =    streamByteBuffer . readAsByteArray (  )  ;", "int   i    =    originalName . lastIndexOf (  \"  /  \"  )  ;", "String   path    =     ( i    =  =     (  -  1  )  )     ?    null    :    originalName . substring (  0  ,    i )  ;", "if    ( remapper . keepOriginalResource ( path )  )     {", "writeResourceEntry ( outputStream ,    new   ByteArrayInputStream ( resource )  ,    buffer ,    zipEntry . getName (  )  )  ;", "}", "String   remappedResourceName    =     ( path    !  =    null )     ?    remapper . maybeRelocateResource ( path )     :    null ;", "if    ( remappedResourceName    !  =    null )     {", "String   newFileName    =    remappedResourceName    +     ( originalName . substring ( i )  )  ;", "writeResourceEntry ( outputStream ,    new   ByteArrayInputStream ( resource )  ,    buffer ,    newFileName )  ;", "}", "}", "METHOD_END"], "methodName": ["copyEntry"], "fileName": "org.gradle.api.internal.runtimeshaded.RuntimeShadedJarCreator"}, {"methodBody": ["METHOD_START", "{", "RuntimeShadedJarCreator . LOGGER . info (  (  \" Generating   JAR   file :     \"     +     ( outputJar . getAbsolutePath (  )  )  )  )  ;", "ProgressLogger   progressLogger    =    progressLoggerFactory . newOperation ( RuntimeShadedJarCreator . class )  ;", "progressLogger . setDescription (  \" Gradle   JARs   generation \"  )  ;", "progressLogger . setLoggingHeader (  (  (  \" Generating   JAR   file    '  \"     +     ( outputJar . getName (  )  )  )     +     \"  '  \"  )  )  ;", "progressLogger . started (  )  ;", "try    {", "createFatJar ( outputJar ,    files ,    progressLogger )  ;", "}    finally    {", "progressLogger . completed (  )  ;", "}", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.api.internal.runtimeshaded.RuntimeShadedJarCreator"}, {"methodBody": ["METHOD_START", "{", "final   File   tmpFile    =    tempFileFor ( outputJar )  ;", "IoActions . withResource ( openJarOutputStream ( tmpFile )  ,    new   ErroringAction < ZipOutputStream >  (  )     {", "@ Override", "protected   void   doExecute ( ZipOutputStream   jarOutputStream )    throws   Exception    {", "processFiles ( jarOutputStream ,    files ,    new   byte [  . BUFFER _ SIZE ]  ,    new   HashSet < String >  (  )  ,    new   LinkedHashMap < String ,    List < String >  >  (  )  ,    progressLogger )  ;", "jarOutputStream . finish (  )  ;", "}", "}  )  ;", "GFileUtils . moveFile ( tmpFile ,    outputJar )  ;", "}", "METHOD_END"], "methodName": ["createFatJar"], "fileName": "org.gradle.api.internal.runtimeshaded.RuntimeShadedJarCreator"}, {"methodBody": ["METHOD_START", "{", "return    \" module - info \"  . equals ( name )  ;", "}", "METHOD_END"], "methodName": ["isModuleInfoClass"], "fileName": "org.gradle.api.internal.runtimeshaded.RuntimeShadedJarCreator"}, {"methodBody": ["METHOD_START", "{", "ZipEntry   entry    =    new   ZipEntry ( name )  ;", "entry . setT ( CONSTANT _ TIME _ FOR _ ZIP _ ENTRIES )  ;", "return   entry ;", "}", "METHOD_END"], "methodName": ["newZipEntryWithFixedTime"], "fileName": "org.gradle.api.internal.runtimeshaded.RuntimeShadedJarCreator"}, {"methodBody": ["METHOD_START", "{", "return   new   ZipInputStream ( new   FileInputStream ( file )  )  ;", "}", "METHOD_END"], "methodName": ["openJarFile"], "fileName": "org.gradle.api.internal.runtimeshaded.RuntimeShadedJarCreator"}, {"methodBody": ["METHOD_START", "{", "try    {", "ZipOutputStream   outputStream    =    new   ZipOutputStream ( new   BufferedOutputStream ( new   FileOutputStream ( outputJar )  ,     . BUFFER _ SIZE )  )  ;", "outputStream . setLevel (  0  )  ;", "return   outputStream ;", "}    catch    ( IOException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["openJarOutputStream"], "fileName": "org.gradle.api.internal.runtimeshaded.RuntimeShadedJarCreator"}, {"methodBody": ["METHOD_START", "{", "return   periodClassName . replace (  '  .  '  ,     '  /  '  )  ;", "}", "METHOD_END"], "methodName": ["periodsToSlashes"], "fileName": "org.gradle.api.internal.runtimeshaded.RuntimeShadedJarCreator"}, {"methodBody": ["METHOD_START", "{", "int   read    =    inputStream . read ( buffer )  ;", "while    ( read    !  =     (  -  1  )  )     {", "outputStream . write ( buffer ,     0  ,    read )  ;", "read    =    inputStream . read ( buffer )  ;", "}", "}", "METHOD_END"], "methodName": ["pipe"], "fileName": "org.gradle.api.internal.runtimeshaded.RuntimeShadedJarCreator"}, {"methodBody": ["METHOD_START", "{", "String   className    =    zipEntry . getName (  )  . substring (  0  ,     (  ( zipEntry . getName (  )  . length (  )  )     -     (  \"  . class \"  . length (  )  )  )  )  ;", "if    (  . isModuleInfoClass ( className )  )     {", "return ;", "}", "byte [  ]    bytes    =    readEntry ( inputStream ,    zipEntry ,    buffer )  ;", "byte [  ]    remappedClass    =    remapClass ( className ,    bytes )  ;", "String   remappedClassName    =    remapper . maybeRelocateResource ( className )  ;", "String   newFileName    =     ( remappedClassName    =  =    null    ?    className    :    remappedClassName )  . concat (  \"  . class \"  )  ;", "writeEntry ( outputStream ,    newFileName ,    remappedClass )  ;", "}", "METHOD_END"], "methodName": ["processClassFile"], "fileName": "org.gradle.api.internal.runtimeshaded.RuntimeShadedJarCreator"}, {"methodBody": ["METHOD_START", "{", "final   List < FileVisitDetails >    fileVisitDetails    =    new   ArrayList < FileVisitDetails >  (  )  ;", "directoryFileTreeFactory . ce ( file )  . visit ( new   FileVisitor (  )     {", "@ Override", "public   void   visitDir ( FileVisitDetails   dirDetails )     {", "fileVisitDetails . add ( dirDetails )  ;", "}", "@ Override", "public   void   visitFile ( FileVisitDetails   fileDetails )     {", "fileVisitDetails . add ( fileDetails )  ;", "}", "}  )  ;", "Collections . sort ( fileVisitDetails ,    new   Comparator < FileVisitDetails >  (  )     {", "@ Override", "public   int   compare ( FileVisitDetails   o 1  ,    FileVisitDetails   o 2  )     {", "return   o 1  . getPath (  )  . compareTo ( o 2  . getPath (  )  )  ;", "}", "}  )  ;", "for    ( FileVisitDetails   details    :    fileVisitDetails )     {", "try    {", "if    ( details . isDirectory (  )  )     {", "ZipEntry   zipEntry    =    newZipEntryWithFixedTime (  (  ( details . getPath (  )  )     +     \"  /  \"  )  )  ;", "processEntry ( outputStream ,    null ,    zipEntry ,    buffer ,    seenPaths ,    services )  ;", "} else    {", "ZipEntry   zipEntry    =    newZipEntryWithFixedTime ( details . getPath (  )  )  ;", "InputStream   inputStream    =    details . open (  )  ;", "try    {", "processEntry ( outputStream ,    inputStream ,    zipEntry ,    buffer ,    seenPaths ,    services )  ;", "}    finally    {", "inputStream . close (  )  ;", "}", "}", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["processDirectory"], "fileName": "org.gradle.api.internal.runtimeshaded.RuntimeShadedJarCreator"}, {"methodBody": ["METHOD_START", "{", "String   name    =    zipEntry . getName (  )  ;", "if    (  ( zipEntry . isDirectory (  )  )     |  |     ( name . equals (  \" META - INF / MANIFEST . MF \"  )  )  )     {", "return ;", "}", "if    (  ( name . startsWith (  \" LICENSE \"  )  )     |  |     ( name . startsWith (  \" license \"  )  )  )     {", "return ;", "}", "if    (  (  !  ( name . startsWith (  . SERVICES _ DIR _ PREFIX )  )  )     &  &     (  !  ( seenPaths . add ( name )  )  )  )     {", "return ;", "}", "if    ( name . endsWith (  \"  . class \"  )  )     {", "processClassFile ( outputStream ,    inputStream ,    zipEntry ,    buffer )  ;", "} else", "if    ( name . startsWith (  . SERVICES _ DIR _ PREFIX )  )     {", "processServiceDescriptor ( inputStream ,    zipEntry ,    buffer ,    services )  ;", "} else    {", "copyEntry ( outputStream ,    inputStream ,    zipEntry ,    buffer )  ;", "}", "}", "METHOD_END"], "methodName": ["processEntry"], "fileName": "org.gradle.api.internal.runtimeshaded.RuntimeShadedJarCreator"}, {"methodBody": ["METHOD_START", "{", "PercentageProgressFormatter   progressFormatter    =    new   PercentageProgressFormatter (  \" Generating \"  ,     (  ( Iterables . size ( files )  )     +     ( RuntimeShadedJarCreator . ADDITIONAL _ PROGRESS _ STEPS )  )  )  ;", "for    ( File   file    :    files )     {", "progressLogger . progress ( progressFormatter . getProgress (  )  )  ;", "if    ( file . getName (  )  . endsWith (  \"  . jar \"  )  )     {", "processJarFile ( outputStream ,    file ,    buffer ,    seenPaths ,    services )  ;", "} else    {", "processDirectory ( outputStream ,    file ,    buffer ,    seenPaths ,    services )  ;", "}", "progressFormatter . increment (  )  ;", "}", "writeServiceFiles ( outputStream ,    services )  ;", "progressLogger . progress ( progressFormatter . incrementAndGetProgress (  )  )  ;", "writeIdentifyingMarkerFile ( outputStream )  ;", "progressLogger . progress ( progressFormatter . incrementAndGetProgress (  )  )  ;", "}", "METHOD_END"], "methodName": ["processFiles"], "fileName": "org.gradle.api.internal.runtimeshaded.RuntimeShadedJarCreator"}, {"methodBody": ["METHOD_START", "{", "IoActions . withResource ( openJarFile ( file )  ,    new   ErroringAction < ZipInputStream >  (  )     {", "@ Override", "protected   void   doExecute ( ZipInputStream   inputStream )    throws   Exception    {", "ZipEntry   zipEntry    =    inputStream . getNextEntry (  )  ;", "while    ( zipEntry    !  =    null )     {", "processEntry ( outputStream ,    inputStream ,    zipEntry ,    buffer ,    seenPaths ,    services )  ;", "zipEntry    =    inputStream . getNextEntry (  )  ;", "}", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["processJarFile"], "fileName": "org.gradle.api.internal.runtimeshaded.RuntimeShadedJarCreator"}, {"methodBody": ["METHOD_START", "{", "String   descriptorName    =    zipEntry . getName (  )  . substring ( RuntimeShadedJarCreator . SERVICES _ DIR _ PREFIX . length (  )  )  ;", "String   descriptorApiClass    =    periodsToSlashes ( descriptorName )  ;", "String   relocatedApiClassName    =    remapper . maybeRelocateResource ( descriptorApiClass )  ;", "if    ( relocatedApiClassName    =  =    null )     {", "relocatedApiClassName    =    descriptorApiClass ;", "}", "byte [  ]    bytes    =    readEntry ( inputStream ,    zipEntry ,    buffer )  ;", "String   entry    =    new   String ( bytes ,    Charsets . UTF _  8  )  . replaceAll (  \"  (  ? m )  ^  #  .  *  \"  ,     \"  \"  )  . trim (  )  ;", "String   descriptorImplClass    =    periodsToSlashes ( entry )  ;", "String   relocatedImplClassName    =    remapper . maybeRelocateResource ( descriptorImplClass )  ;", "if    ( relocatedImplClassName    =  =    null )     {", "relocatedImplClassName    =    descriptorImplClass ;", "}", "String   serviceType    =    slashesToPeriods ( relocatedApiClassName )  ;", "String   serviceProvider    =    slashesToPeriods ( relocatedImplClassName )  . trim (  )  ;", "if    (  !  ( services . containsKey ( serviceType )  )  )     {", "services . put ( serviceType ,    Lists . newArrayList ( serviceProvider )  )  ;", "} else    {", "List < String >    providers    =    services . get ( serviceType )  ;", "providers . add ( serviceProvider )  ;", "}", "}", "METHOD_END"], "methodName": ["processServiceDescriptor"], "fileName": "org.gradle.api.internal.runtimeshaded.RuntimeShadedJarCreator"}, {"methodBody": ["METHOD_START", "{", "int   size    =     (  ( int )     ( zipEntry . getSize (  )  )  )  ;", "if    ( size    =  =     (  -  1  )  )     {", "ByteArrayOutputStream   out    =    new   ByteArrayOutputStream ( buffer . length )  ;", "int   read    =    inputStream . read ( buffer )  ;", "while    ( read    !  =     (  -  1  )  )     {", "out . write ( buffer ,     0  ,    read )  ;", "read    =    inputStream . read ( buffer )  ;", "}", "return   out . toByteArray (  )  ;", "} else    {", "byte [  ]    bytes    =    new   byte [ size ]  ;", "int   read    =    inputStream . read ( bytes )  ;", "while    ( read    <    size )     {", "read    +  =    inputStream . read ( bytes ,    read ,     ( size    -    read )  )  ;", "}", "return   bytes ;", "}", "}", "METHOD_END"], "methodName": ["readEntry"], "fileName": "org.gradle.api.internal.runtimeshaded.RuntimeShadedJarCreator"}, {"methodBody": ["METHOD_START", "{", "ClassReader   classReader    =    new   ClassReader ( bytes )  ;", "ClassWriter   classWriter    =    new   ClassWriter (  0  )  ;", "ClassVisitor   remappingVisitor    =    new    . ShadingClassRemapper ( classWriter ,    remapper )  ;", "try    {", "classReader . accept ( remappingVisitor ,    EXPAND _ FRAMES )  ;", "}    catch    ( Exception   e )     {", "throw   new   GradleException (  (  \" Error   in   ASM   processing   class :     \"     +    className )  ,    e )  ;", "}", "return   classWriter . toByteArray (  )  ;", "}", "METHOD_END"], "methodName": ["remapClass"], "fileName": "org.gradle.api.internal.runtimeshaded.RuntimeShadedJarCreator"}, {"methodBody": ["METHOD_START", "{", "return   slashClassName . replace (  '  /  '  ,     '  .  '  )  ;", "}", "METHOD_END"], "methodName": ["slashesToPeriods"], "fileName": "org.gradle.api.internal.runtimeshaded.RuntimeShadedJarCreator"}, {"methodBody": ["METHOD_START", "{", "try    {", "final   File   tmpFile    =    File . ceTempFile ( outputJar . getName (  )  ,     \"  . tmp \"  )  ;", "tmpFile . deleteOnExit (  )  ;", "return   tmpFile ;", "}    catch    ( IOException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["tempFileFor"], "fileName": "org.gradle.api.internal.runtimeshaded.RuntimeShadedJarCreator"}, {"methodBody": ["METHOD_START", "{", "ZipEntry   zipEntry    =    newZipEntryWithFixedTime ( name )  ;", "outputStream . putNextEntry ( zipEntry )  ;", "outputStream . write ( content )  ;", "outputStream . closeEntry (  )  ;", "}", "METHOD_END"], "methodName": ["writeEntry"], "fileName": "org.gradle.api.internal.runtimeshaded.RuntimeShadedJarCreator"}, {"methodBody": ["METHOD_START", "{", "writeEntry ( outputStream ,    MARKER _ FILENAME ,    new   byte [  0  ]  )  ;", "}", "METHOD_END"], "methodName": ["writeIdentifyingMarkerFile"], "fileName": "org.gradle.api.internal.runtimeshaded.RuntimeShadedJarCreator"}, {"methodBody": ["METHOD_START", "{", "outputStream . putNextEntry ( newZipEntryWithFixedTime ( resourceFileName )  )  ;", "pipe ( inputStream ,    outputStream ,    buffer )  ;", "outputStream . closeEntry (  )  ;", "}", "METHOD_END"], "methodName": ["writeResourceEntry"], "fileName": "org.gradle.api.internal.runtimeshaded.RuntimeShadedJarCreator"}, {"methodBody": ["METHOD_START", "{", "for    ( Map . Entry < String ,    List < String >  >    service    :    services . entrySet (  )  )     {", "String   allProviders    =    Joiner . on (  \"  \\ n \"  )  . join ( service . getValue (  )  )  ;", "writeEntry ( outputStream ,     (  (  . SERVICES _ DIR _ PREFIX )     +     ( service . getKey (  )  )  )  ,    allProviders . getBytes ( UTF _  8  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["writeServiceFiles"], "fileName": "org.gradle.api.internal.runtimeshaded.RuntimeShadedJarCreator"}, {"methodBody": ["METHOD_START", "{", "final   File   jarFile    =    cache . get ( type . getIdentifier (  )  ,    new   Action < File >  (  )     {", "@ Override", "public   void   execute ( final   File   file )     {", "buildOperationExecutor . run ( new   RunnableBuildOperation (  )     {", "@ Override", "public   void   run ( BuildOperationContext   context )     {", "RuntimeShadedJarCreator   creator    =    new   RuntimeShadedJarCreator ( progressLoggerFactory ,    new   ImplementationDependencyRelocator ( type )  ,    directoryFileTreeFactory )  ;", "creator . create ( file ,    classpath )  ;", "}", "@ Override", "public   Builder   description (  )     {", "String   displayName    =     \" Generating   Jar    \"     +     ( file . getName (  )  )  ;", "return   BuildOperationDescriptor . displayName ( displayName )  . progressDisplayName ( displayName )  ;", "}", "}  )  ;", "}", "}  )  ;", ". LOGGER . debug (  \" Using   Gradle   runtime   shaded   JAR   file :     {  }  \"  ,    jarFile )  ;", "return   jarFile ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "org.gradle.api.internal.runtimeshaded.RuntimeShadedJarFactory"}, {"methodBody": ["METHOD_START", "{", "return   identifier ;", "}", "METHOD_END"], "methodName": ["getIdentifier"], "fileName": "org.gradle.api.internal.runtimeshaded.RuntimeShadedJarType"}, {"methodBody": ["METHOD_START", "{", "dump ( new   StringBuilder (  )  ,    all ,    this ,    onWord )  ;", "}", "METHOD_END"], "methodName": ["dump"], "fileName": "org.gradle.api.internal.runtimeshaded.Trie"}, {"methodBody": ["METHOD_START", "{", "for    ( Trie   transition    :    trie . transitions )     {", "buffer . append ( transition . c )  ;", "if    ( transition . terminal )     {", "onWord . execute ( buffer . toString (  )  )  ;", "if    ( all )     {", "dump ( buffer ,    true ,    transition ,    onWord )  ;", "}", "} else    {", "dump ( buffer ,    all ,    transition ,    onWord )  ;", "}", "buffer . setLength (  (  ( buffer . length (  )  )     -     1  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["dump"], "fileName": "org.gradle.api.internal.runtimeshaded.Trie"}, {"methodBody": ["METHOD_START", "{", "if    (  ( seq . length (  )  )     =  =     0  )     {", "return   false ;", "}", "int   idx    =     0  ;", "cur    =    this ;", "while    ( idx    <     ( seq . length (  )  )  )     {", "char   c    =    seq . charAt ( idx )  ;", "boolean   found    =    false ;", "for    (    transition    :    cur . transitions )     {", "if    (  ( transition . c )     =  =    c )     {", "cur    =    transition ;", "idx +  +  ;", "found    =    true ;", "if    ( idx    =  =     ( seq . length (  )  )  )     {", "return   cur . terminal ;", "}", "break ;", "} else", "if    (  ( transition . c )     >    c )     {", "return   false ;", "}", "}", "if    (  ! found )     {", "return   cur . terminal ;", "}", "}", "return   cur . terminal ;", "}", "METHOD_END"], "methodName": ["find"], "fileName": "org.gradle.api.internal.runtimeshaded.Trie"}, {"methodBody": ["METHOD_START", "{", "sb . append ( c )  . append (  ( terminal    ?     \"  ( terminal )  \\ n \"     :     \"  \\ n \"  )  )  ;", "sb . append (  \" Next :     \"  )  ;", "for    (    transition    :    transitions )     {", "sb . append ( transition . c )  . append (  \"     \"  )  ;", "}", "sb . append (  \"  \\ n \"  )  ;", "return   sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.gradle.api.internal.runtimeshaded.Trie"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Attribute <  ?  >  >    allAttributes    =    new   TreeMap < String ,    Attribute <  ?  >  >  (  )  ;", "for    ( Attribute <  ?  >    attribute    :    producerAttributes . keySet (  )  )     {", "allAttributes . put ( attribute . getName (  )  ,    attribute )  ;", "}", "for    ( Attribute <  ?  >    attribute    :    consumerAttributes . keySet (  )  )     {", "allAttributes . put ( attribute . getName (  )  ,    attribute )  ;", "}", "ImmutableAttributes   immmutableConsumer    =    consumerAttributes . asImmutable (  )  ;", "ImmutableAttributes   immutableProducer    =    producerAttributes . asImmutable (  )  ;", "formatter . startChildren (  )  ;", "for    ( Attribute <  ?  >    attribute    :    allAttributes . values (  )  )     {", "Attribute < Object >    untyped    =    Cast . uncheckedCast ( attribute )  ;", "String   attributeName    =    attribute . getName (  )  ;", "AttributeValue < Object >    consumerValue    =    immmutableConsumer . findEntry ( untyped )  ;", "AttributeValue <  ?  >    producerValue    =    immutableProducer . findEntry ( attribute . getName (  )  )  ;", "if    (  ( consumerValue . isPresent (  )  )     &  &     ( producerValue . isPresent (  )  )  )     {", "if    ( attributeMatcher . isMatching ( untyped ,    producerValue . coerce ( attribute )  ,    consumerValue . coerce ( attribute )  )  )     {", "formatter . node (  (  (  (  (  (  (  \" Required    \"     +    attributeName )     +     \"     '  \"  )     +     ( consumerValue . get (  )  )  )     +     \"  '    and   found   atible   value    '  \"  )     +     ( producerValue . get (  )  )  )     +     \"  '  .  \"  )  )  ;", "} else    {", "formatter . node (  (  (  (  (  (  (  \" Required    \"     +    attributeName )     +     \"     '  \"  )     +     ( consumerValue . get (  )  )  )     +     \"  '    and   found   inatible   value    '  \"  )     +     ( producerValue . get (  )  )  )     +     \"  '  .  \"  )  )  ;", "}", "} else", "if    ( consumerValue . isPresent (  )  )     {", "formatter . node (  (  (  (  (  \" Required    \"     +    attributeName )     +     \"     '  \"  )     +     ( consumerValue . get (  )  )  )     +     \"  '    but   no   value   provided .  \"  )  )  ;", "} else    {", "formatter . node (  (  (  (  (  \" Found    \"     +    attributeName )     +     \"     '  \"  )     +     ( producerValue . get (  )  )  )     +     \"  '    but   wasn ' t   required .  \"  )  )  ;", "}", "}", "formatter . endChildren (  )  ;", "}", "METHOD_END"], "methodName": ["formatAttributeMatches"], "fileName": "org.gradle.internal.component.AmbiguousConfigurationSelectionException"}, {"methodBody": ["METHOD_START", "{", "AttributeContainerInternal   producerAttributes    =    configuration . getAttributes (  )  ;", "formatter . node (  \" Configuration    '  \"  )  ;", "formatter . append ( configuration . getName (  )  )  ;", "formatter . append (  \"  '  \"  )  ;", ". formatAttributeMatches ( formatter ,    consumerAttributes ,    attributeMatcher ,    producerAttributes )  ;", "}", "METHOD_END"], "methodName": ["formatConfiguration"], "fileName": "org.gradle.internal.component.AmbiguousConfigurationSelectionException"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    ConfigurationMetadata >    ambiguousConfigurations    =    new   TreeMap < String ,    ConfigurationMetadata >  (  )  ;", "for    ( ConfigurationMetadata   match    :    matches )     {", "ambiguousConfigurations . put ( match . getName (  )  ,    match )  ;", "}", "TreeFormatter   formatter    =    new   TreeFormatter (  )  ;", "formatter . node (  \" Cannot   choose   between   the   following   configurations   of    \"  )  ;", "formatter . append ( targetComponent . getId (  )  . getDisplayName (  )  )  ;", "formatter . startChildren (  )  ;", "for    ( String   configuration    :    ambiguousConfigurations . keySet (  )  )     {", "formatter . node ( configuration )  ;", "}", "formatter . endChildren (  )  ;", "formatter . node (  \" All   of   them   match   the   consumer   attributes \"  )  ;", "formatter . startChildren (  )  ;", "for    ( ConfigurationMetadata   ambiguousConf    :    ambiguousConfigurations . values (  )  )     {", ". formatConfiguration ( formatter ,    fromConfigurationAttributes ,    attributeMatcher ,    ambiguousConf )  ;", "}", "formatter . endChildren (  )  ;", "return   formatter . toString (  )  ;", "}", "METHOD_END"], "methodName": ["generateMessage"], "fileName": "org.gradle.internal.component.AmbiguousConfigurationSelectionException"}, {"methodBody": ["METHOD_START", "{", "TreeFormatter   formatter    =    new   TreeFormatter (  )  ;", "formatter . node (  (  (  \" More   than   one   variant   of    \"     +    producerDisplayName )     +     \"    matches   the   consumer   attributes \"  )  )  ;", "formatter . startChildren (  )  ;", "for    ( ResolvedVariant   variant    :    variants )     {", "formatter . node ( variant . asDescribable (  )  . getCapitalizedDisplayName (  )  )  ;", "AmbiguousConfiguration . formatAttributeMatches ( formatter ,    consumer ,    matcher ,    variant . getAttributes (  )  )  ;", "}", "formatter . endChildren (  )  ;", "return   formatter . toString (  )  ;", "}", "METHOD_END"], "methodName": ["format"], "fileName": "org.gradle.internal.component.AmbiguousVariantSelectionException"}, {"methodBody": ["METHOD_START", "{", "formatter . startChildren (  )  ;", "for    ( Attribute <  ?  >    attribute    :    Ordering . usingToString (  )  . sortedCopy ( attributes . keySet (  )  )  )     {", "formatter . node (  (  (  (  ( attribute . getName (  )  )     +     \"     '  \"  )     +     ( attributes . getAttribute ( attribute )  )  )     +     \"  '  \"  )  )  ;", "}", "formatter . endChildren (  )  ;", "}", "METHOD_END"], "methodName": ["formatAttributes"], "fileName": "org.gradle.internal.component.AmbiguousVariantSelectionException"}, {"methodBody": ["METHOD_START", "{", "TreeFormatter   formatter    =    new   TreeFormatter (  )  ;", "formatter . node (  (  (  (  (  \" Configuration    '  \"     +    targetConfiguration )     +     \"  '    in    \"  )     +     ( targetComponent . getId (  )  . getDisplayName (  )  )  )     +     \"    does   not   match   the   consumer   attributes \"  )  )  ;", "Ambiguous . formatConfiguration ( formatter ,    fromConfigurationAttributes ,    attributeMatcher ,    targetComponent . getConfiguration ( targetConfiguration )  )  ;", "return   formatter . toString (  )  ;", "}", "METHOD_END"], "methodName": ["generateMessage"], "fileName": "org.gradle.internal.component.IncompatibleConfigurationSelectionException"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    ConfigurationMetadata >    configurations    =    new   TreeMap < String ,    ConfigurationMetadata >  (  )  ;", "for    ( ConfigurationMetadata   configurationMetadata    :    targetComponent . getVariantsForGraphTraversal (  )  )     {", "configurations . put ( configurationMetadata . getName (  )  ,    configurationMetadata )  ;", "}", "TreeFormatter   formatter    =    new   TreeFormatter (  )  ;", "formatter . node (  (  \" Unable   to   find   a   matching   configuration   of    \"     +     ( targetComponent . getId (  )  . getDisplayName (  )  )  )  )  ;", "formatter . startChildren (  )  ;", "if    ( configurations . isEmpty (  )  )     {", "formatter . node (  \" None   of   the   consumable   configurations   have   attributes .  \"  )  ;", "} else    {", "for    ( ConfigurationMetadata   configuration    :    configurations . values (  )  )     {", "Ambiguous . formatConfiguration ( formatter ,    fromConfigurationAttributes ,    attributeMatcher ,    configuration )  ;", "}", "}", "formatter . endChildren (  )  ;", "return   formatter . toString (  )  ;", "}", "METHOD_END"], "methodName": ["generateMessage"], "fileName": "org.gradle.internal.component.NoMatchingConfigurationSelectionException"}, {"methodBody": ["METHOD_START", "{", "TreeFormatter   formatter    =    new   TreeFormatter (  )  ;", "formatter . node (  (  (  \" No   variants   of    \"     +    producerDisplayName )     +     \"    match   the   consumer   attributes \"  )  )  ;", "formatter . startChildren (  )  ;", "for    ( ResolvedVariant   variant    :    candidates )     {", "formatter . node ( variant . asDescribable (  )  . getCapitalizedDisplayName (  )  )  ;", "AmbiguousConfiguration . formatAttributeMatches ( formatter ,    consumer ,    matcher ,    variant . getAttributes (  )  )  ;", "}", "formatter . endChildren (  )  ;", "return   formatter . toString (  )  ;", "}", "METHOD_END"], "methodName": ["format"], "fileName": "org.gradle.internal.component.NoMatchingVariantSelectionException"}, {"methodBody": ["METHOD_START", "{", "return   new   VariantSelectionException ( String . format (  \" Could   not   select   a   variant   of    % s   that   matches   the   consumer   attributes .  \"  ,    producer . asDescribable (  )  . getDisplayName (  )  )  ,    failure )  ;", "}", "METHOD_END"], "methodName": ["selectionFailed"], "fileName": "org.gradle.internal.component.VariantSelectionException"}, {"methodBody": ["METHOD_START", "{", "return   artifactName ;", "}", "METHOD_END"], "methodName": ["getArtifactName"], "fileName": "org.gradle.internal.component.external.descriptor.Artifact"}, {"methodBody": ["METHOD_START", "{", "return   configurations ;", "}", "METHOD_END"], "methodName": ["getConfigurations"], "fileName": "org.gradle.internal.component.external.descriptor.Artifact"}, {"methodBody": ["METHOD_START", "{", "return   extendsFrom ;", "}", "METHOD_END"], "methodName": ["getExtendsFrom"], "fileName": "org.gradle.internal.component.external.descriptor.Configuration"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.internal.component.external.descriptor.Configuration"}, {"methodBody": ["METHOD_START", "{", "return   transitive ;", "}", "METHOD_END"], "methodName": ["isTransitive"], "fileName": "org.gradle.internal.component.external.descriptor.Configuration"}, {"methodBody": ["METHOD_START", "{", "return   visible ;", "}", "METHOD_END"], "methodName": ["isVisible"], "fileName": "org.gradle.internal.component.external.descriptor.Configuration"}, {"methodBody": ["METHOD_START", "{", "configuration . preventFromFurtherMutation (  )  ;", "return   metaData . addConfiguration ( configuration . getName (  )  ,    Configurations . getNames ( configuration . getExtendsFrom (  )  )  ,    configuration . isVisible (  )  ,    configuration . isTransitive (  )  )  ;", "}", "METHOD_END"], "methodName": ["addConfiguration"], "fileName": "org.gradle.internal.component.external.ivypublish.DefaultArtifactPublisher"}, {"methodBody": ["METHOD_START", "{", "for    ( ConfigurationInternal   configuration    :    configurations )     {", "BuildableLocalConfigurationMetadata   configurationMetadata    =    addConfiguration ( metaData ,    configuration )  ;", "dependenciesConverter . addDependenciesAndExcludes ( configurationMetadata ,    configuration )  ;", "OutgoingVariant   outgoingVariant    =    configuration . convertToOutgoingVariant (  )  ;", "for    ( PublishArtifact   publishArtifact    :    outgoingVariant . ges (  )  )     {", "if    (  (  ! validateArtifacts )     |  |     ( isValidToPublish ( publishArtifact )  )  )     {", "metaData . addArtifact ( configuration . getName (  )  ,    publishArtifact )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["addConfigurations"], "fileName": "org.gradle.internal.component.external.ivypublish.DefaultArtifactPublisher"}, {"methodBody": ["METHOD_START", "{", "return    ( artifact . getType (  )  . endsWith (  \"  . asc \"  )  )     |  |     ( artifact . getType (  )  . endsWith (  \"  . sig \"  )  )  ;", "}", "METHOD_END"], "methodName": ["isSigningArtifact"], "fileName": "org.gradle.internal.component.external.ivypublish.DefaultArtifactPublisher"}, {"methodBody": ["METHOD_START", "{", "File   artifactFile    =    artifact . getFile (  )  ;", "if    ( artifactFile . isDirectory (  )  )     {", "throw   new   IllegalArgumentException (  (  (  \" Cannot   publish   a   directory    (  \"     +    artifactFile )     +     \"  )  \"  )  )  ;", "}", "if    ( artifactFile . exists (  )  )     {", "return   true ;", "}", "IvyName   ivyName    =    DefaultIvyName . forPublish ( artifact )  ;", "if    (  !  ( isSigning ( ivyName )  )  )     {", "throw   new   PublishException ( String . format (  \" Cannot   publish   artifact    '  % s '     (  % s )    as   it   does   not   exist .  \"  ,    ivyName ,    artifactFile )  )  ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isValidToPublish"], "fileName": "org.gradle.internal.component.external.ivypublish.DefaultArtifactPublisher"}, {"methodBody": ["METHOD_START", "{", "Set < ConfigurationInternal >    allConfigurations    =    Cast . uncheckedCast ( configuration . getAll (  )  )  ;", "Set < ConfigurationInternal >    configurationsToPublish    =    Cast . uncheckedCast ( configuration . getHierarchy (  )  )  ;", "if    ( descriptor    !  =    null )     {", "DefaultIvyModulePublishMetadata   publishMetaData    =    toPublishMetaData ( module ,    allConfigurations ,    false )  ;", "ivyModuleDescriptorWriter . write ( publishMetaData ,    descriptor )  ;", "}", "DefaultIvyModulePublishMetadata   publishMetaData    =    toPublishMetaData ( module ,    configurationsToPublish ,    true )  ;", "if    ( descriptor    !  =    null )     {", "IvyArtifactName   artifact    =    new   DefaultIvyArtifactName (  \" ivy \"  ,     \" ivy \"  ,     \" xml \"  )  ;", "publishMetaData . addArtifact ( artifact ,    descriptor )  ;", "}", "for    ( PublicationAwareRepository   repository    :    repositories )     {", "ModuleVersionPublisher   publisher    =    repository . createPublisher (  )  ;", ". LOGGER . info (  \" Publishing   to    {  }  \"  ,    publisher )  ;", "publisher . publish ( publishMetaData )  ;", "}", "}", "METHOD_END"], "methodName": ["publish"], "fileName": "org.gradle.internal.component.external.ivypublish.DefaultArtifactPublisher"}, {"methodBody": ["METHOD_START", "{", "ModuleComponentIdentifier   id    =    DefaultModuleComponentIdentifier . newId ( module . getGroup (  )  ,    module . getName (  )  ,    module . getVersion (  )  )  ;", "DefaultIvyModulePublishMetadata   publishMetaData    =    new   DefaultIvyModulePublishMetadata ( id ,    module . getStatus (  )  )  ;", "addConfigurations ( publishMetaData ,    configurations ,    validateArtifacts )  ;", "return   publishMetaData ;", "}", "METHOD_END"], "methodName": ["toPublishMetaData"], "fileName": "org.gradle.internal.component.external.ivypublish.DefaultArtifactPublisher"}, {"methodBody": ["METHOD_START", "{", "configurations . add ( configuration )  ;", "}", "METHOD_END"], "methodName": ["addConfiguration"], "fileName": "org.gradle.internal.component.external.ivypublish.DefaultIvyModuleArtifactPublishMetadata"}, {"methodBody": ["METHOD_START", "{", "return   id . getName (  )  ;", "}", "METHOD_END"], "methodName": ["getArtifactName"], "fileName": "org.gradle.internal.component.external.ivypublish.DefaultIvyModuleArtifactPublishMetadata"}, {"methodBody": ["METHOD_START", "{", "return   file ;", "}", "METHOD_END"], "methodName": ["getFile"], "fileName": "org.gradle.internal.component.external.ivypublish.DefaultIvyModuleArtifactPublishMetadata"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.gradle.internal.component.external.ivypublish.DefaultIvyModuleArtifactPublishMetadata"}, {"methodBody": ["METHOD_START", "{", "this . file    =    file ;", "}", "METHOD_END"], "methodName": ["setFile"], "fileName": "org.gradle.internal.component.external.ivypublish.DefaultIvyModuleArtifactPublishMetadata"}, {"methodBody": ["METHOD_START", "{", "return    (  ( dependency . getModuleConfiguration (  )  )     +     \"  -  >  \"  )     +     ( dependency . getDependencyConfiguration (  )  )  ;", "}", "METHOD_END"], "methodName": ["getConfMapping"], "fileName": "org.gradle.internal.component.external.ivypublish.DefaultIvyModuleDescriptorWriter"}, {"methodBody": ["METHOD_START", "{", "for    ( Pair < ExcludeMetadata ,    String >    excludePair    :    metadata . getExcludes (  )  )     {", "ExcludeMetadata   exclude    =    excludePair . getLeft (  )  ;", "writer . startElement (  \" exclude \"  )  ;", "writer . attribute (  \" org \"  ,    exclude . getId (  )  . getGroup (  )  )  ;", "writer . attribute (  \" module \"  ,    exclude . getId (  )  . getName (  )  )  ;", "IvyArtifactName   artifact    =    exclude . getArtifact (  )  ;", "if    ( artifact    !  =    null )     {", "writer . attribute (  \" artifact \"  ,    artifact . getName (  )  )  ;", "writer . attribute (  \" type \"  ,    artifact . getType (  )  )  ;", "writer . attribute (  \" ext \"  ,    artifact . getExtension (  )  )  ;", "}", "writer . attribute (  \" conf \"  ,    excludePair . getRight (  )  )  ;", "writer . endElement (  )  ;", "}", "}", "METHOD_END"], "methodName": ["printAllExcludes"], "fileName": "org.gradle.internal.component.external.ivypublish.DefaultIvyModuleDescriptorWriter"}, {"methodBody": ["METHOD_START", "{", "writer . startElement (  \" conf \"  )  ;", "writer . attribute (  \" name \"  ,    conf . getName (  )  )  ;", "writer . attribute (  \" visibility \"  ,     ( conf . isVisible (  )     ?     \" public \"     :     \" private \"  )  )  ;", "List < String >    exts    =    conf . getExtendsFrom (  )  ;", "if    (  ( exts . size (  )  )     >     0  )     {", "writer . attribute (  \" extends \"  ,    Joiner . on (  '  ,  '  )  . join ( exts )  )  ;", "}", "if    (  !  ( conf . isTransitive (  )  )  )     {", "writer . attribute (  \" transitive \"  ,     \" false \"  )  ;", "}", "writer . endElement (  )  ;", "}", "METHOD_END"], "methodName": ["printConfiguration"], "fileName": "org.gradle.internal.component.external.ivypublish.DefaultIvyModuleDescriptorWriter"}, {"methodBody": ["METHOD_START", "{", "Collection < Configuration >    configurations    =    metadata . getConfigurations (  )  . values (  )  ;", "if    (  !  ( configurations . isEmpty (  )  )  )     {", "w . startElement (  \" configurations \"  )  ;", "for    ( Configuration   configuration    :    configurations )     {", "printConfiguration ( configuration ,    w )  ;", "}", "w . endElement (  )  ;", "}", "}", "METHOD_END"], "methodName": ["printConfigurations"], "fileName": "org.gradle.internal.component.external.ivypublish.DefaultIvyModuleDescriptorWriter"}, {"methodBody": ["METHOD_START", "{", "Collection < LocalOriginDependencyMetadata >    dependencies    =    metadata . getDependencies (  )  ;", "if    (  ( dependencies . size (  )  )     >     0  )     {", "writer . startElement (  \" dependencies \"  )  ;", "for    ( LocalOriginDependencyMetadata   dd    :    dependencies )     {", "printDependency ( dd ,    writer )  ;", "}", ". printAllExcludes ( metadata ,    writer )  ;", "writer . endElement (  )  ;", "}", "}", "METHOD_END"], "methodName": ["printDependencies"], "fileName": "org.gradle.internal.component.external.ivypublish.DefaultIvyModuleDescriptorWriter"}, {"methodBody": ["METHOD_START", "{", "writer . startElement (  \" dependency \"  )  ;", "ModuleVersionSelector   requested    =    componentSelectorConverter . getSelector ( dep . getSelector (  )  )  ;", "writer . attribute (  \" org \"  ,    requested . getGroup (  )  )  ;", "writer . attribute (  \" name \"  ,    requested . getName (  )  )  ;", "writer . attribute (  \" rev \"  ,    requested . getVersion (  )  )  ;", "if    ( dep . isForce (  )  )     {", "writer . attribute (  \" force \"  ,     \" true \"  )  ;", "}", "if    ( dep . isChanging (  )  )     {", "writer . attribute (  \" changing \"  ,     \" true \"  )  ;", "}", "if    (  !  ( dep . isTransitive (  )  )  )     {", "writer . attribute (  \" transitive \"  ,     \" false \"  )  ;", "}", "writer . attribute (  \" conf \"  ,    getConfMapping ( dep )  )  ;", "for    ( IvyArtifactName   dependencyArtifact    :    dep . getArtifacts (  )  )     {", ". printDependencyArtifact ( writer ,    dependencyArtifact ,    dep . getModuleConfiguration (  )  )  ;", "}", ". printDependencyExcludeRules ( writer ,    dep . getExcludes (  )  )  ;", "writer . endElement (  )  ;", "}", "METHOD_END"], "methodName": ["printDependency"], "fileName": "org.gradle.internal.component.external.ivypublish.DefaultIvyModuleDescriptorWriter"}, {"methodBody": ["METHOD_START", "{", "writer . startElement (  \" artifact \"  )  ;", "writer . attribute (  \" name \"  ,    artifact . getName (  )  )  ;", "writer . attribute (  \" type \"  ,    artifact . getType (  )  )  ;", "writer . attribute (  \" ext \"  ,    artifact . getExtension (  )  )  ;", "if    (  ( artifact . getClassifier (  )  )     !  =    null )     {", ". printExtraAttributes ( Collections . singletonMap (  \" m : classifier \"  ,    artifact . getClassifier (  )  )  ,    writer )  ;", "}", "writer . attribute (  \" conf \"  ,    configuration )  ;", "writer . endElement (  )  ;", "}", "METHOD_END"], "methodName": ["printDependencyArtifact"], "fileName": "org.gradle.internal.component.external.ivypublish.DefaultIvyModuleDescriptorWriter"}, {"methodBody": ["METHOD_START", "{", "for    ( ExcludeMetadata   exclude    :    excludes )     {", "writer . startElement (  \" exclude \"  )  ;", "writer . attribute (  \" org \"  ,    exclude . getId (  )  . getGroup (  )  )  ;", "writer . attribute (  \" module \"  ,    exclude . getId (  )  . getName (  )  )  ;", "IvyArtifactName   artifact    =    exclude . getArtifact (  )  ;", "if    ( artifact    !  =    null )     {", "writer . attribute (  \" name \"  ,    artifact . getName (  )  )  ;", "writer . attribute (  \" type \"  ,    artifact . getType (  )  )  ;", "writer . attribute (  \" ext \"  ,    artifact . getExtension (  )  )  ;", "}", "writer . endElement (  )  ;", "}", "}", "METHOD_END"], "methodName": ["printDependencyExcludeRules"], "fileName": "org.gradle.internal.component.external.ivypublish.DefaultIvyModuleDescriptorWriter"}, {"methodBody": ["METHOD_START", "{", "if    ( extra    =  =    null )     {", "return ;", "}", "for    ( Map . Entry < String ,     ?  >    entry    :    extra . entrySet (  )  )     {", "w . attribute ( entry . getKey (  )  ,    entry . getValue (  )  . toString (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["printExtraAttributes"], "fileName": "org.gradle.internal.component.external.ivypublish.DefaultIvyModuleDescriptorWriter"}, {"methodBody": ["METHOD_START", "{", "ModuleComponentIdentifier   id    =    metadata . getComponentId (  )  ;", "writer . startElement (  \" info \"  )  ;", "writer . attribute (  \" organisation \"  ,    id . getGroup (  )  )  ;", "writer . attribute (  \" module \"  ,    id . getModule (  )  )  ;", "writer . attribute (  \" revision \"  ,    id . getVersion (  )  )  ;", "writer . attribute (  \" status \"  ,    metadata . getStatus (  )  )  ;", ". printUnusedContent ( metadata ,    writer )  ;", "writer . endElement (  )  ;", "}", "METHOD_END"], "methodName": ["printInfoTag"], "fileName": "org.gradle.internal.component.external.ivypublish.DefaultIvyModuleDescriptorWriter"}, {"methodBody": ["METHOD_START", "{", "writer . startElement (  \" publications \"  )  ;", "for    ( IvyModuleArtifactPublishMetadata   artifactMetadata    :    artifacts )     {", "IvyArtifactName   artifact    =    artifactMetadata . getArtifactName (  )  ;", "writer . startElement (  \" artifact \"  )  ;", "writer . attribute (  \" name \"  ,    artifact . getName (  )  )  ;", "writer . attribute (  \" type \"  ,    artifact . getType (  )  )  ;", "writer . attribute (  \" ext \"  ,     (  ( artifact . getExtension (  )  )     =  =    null    ?     \"  \"     :    artifact . getExtension (  )  )  )  ;", "writer . attribute (  \" conf \"  ,    Joiner . on (  \"  ,  \"  )  . join ( artifactMetadata . getConfigurations (  )  )  )  ;", "if    (  ( artifact . getClassifier (  )  )     !  =    null )     {", ". printExtraAttributes ( Collections . singletonMap (  \" m : classifier \"  ,    artifact . getClassifier (  )  )  ,    writer )  ;", "}", "writer . endElement (  )  ;", "}", "writer . endElement (  )  ;", "}", "METHOD_END"], "methodName": ["printPublications"], "fileName": "org.gradle.internal.component.external.ivypublish.DefaultIvyModuleDescriptorWriter"}, {"methodBody": ["METHOD_START", "{", "SimpleDateFormat   ivyDateFormat    =    new   SimpleDateFormat ( DefaultIvyModuleDescriptorWriter . IVY _ DATE _ PATTERN )  ;", "writer . attribute (  \" publication \"  ,    ivyDateFormat . format ( new   Date (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["printUnusedContent"], "fileName": "org.gradle.internal.component.external.ivypublish.DefaultIvyModuleDescriptorWriter"}, {"methodBody": ["METHOD_START", "{", "writer . startElement (  \" ivy - module \"  )  ;", "writer . attribute (  \" version \"  ,     \"  2  .  0  \"  )  ;", "writer . attribute (  (  \" xmlns :  \"     +     ( IvyModulePublishMetadata . IVY _ MAVEN _ NAMESPACE _ PREFIX )  )  ,    IvyModulePublishMetadata . IVY _ MAVEN _ NAMESPACE )  ;", ". printInfoTag ( metadata ,    writer )  ;", "printConfigurations ( metadata ,    writer )  ;", ". printPublications ( metadata . getArtifacts (  )  ,    writer )  ;", "printDependencies ( metadata ,    writer )  ;", "writer . endElement (  )  ;", "}", "METHOD_END"], "methodName": ["writeTo"], "fileName": "org.gradle.internal.component.external.ivypublish.DefaultIvyModuleDescriptorWriter"}, {"methodBody": ["METHOD_START", "{", "DefaultIvyArtifactName   ivyName    =    DefaultIvyArtifactName . forPublishArtifact ( artifact )  ;", "ArtifactPublishMetadata   ivyArtifact    =    getOrCreate ( ivyName )  ;", "ivyArtifact . setFile ( artifact . getFile (  )  )  ;", "ivyArtifact . addConfiguration ( configuration )  ;", "}", "METHOD_END"], "methodName": ["addArtifact"], "fileName": "org.gradle.internal.component.external.ivypublish.DefaultIvyModulePublishMetadata"}, {"methodBody": ["METHOD_START", "{", "artifactsById . put ( artifact . getId (  )  ,    artifact )  ;", "}", "METHOD_END"], "methodName": ["addArtifact"], "fileName": "org.gradle.internal.component.external.ivypublish.DefaultIvyModulePublishMetadata"}, {"methodBody": ["METHOD_START", "{", "DefaultIvyModuleArtifactPublishMetadata   publishMetadata    =    new   DefaultIvyModuleArtifactPublishMetadata ( id ,    artifact )  ;", "publishMetadata . setFile ( file )  ;", "artifactsById . put ( publishMetadata . getId (  )  ,    publishMetadata )  ;", "}", "METHOD_END"], "methodName": ["addArtifact"], "fileName": "org.gradle.internal.component.external.ivypublish.DefaultIvyModulePublishMetadata"}, {"methodBody": ["METHOD_START", "{", "List < String >    sortedExtends    =    Lists . newArrayList ( extendsFrom )  ;", "Collections . sort ( sortedExtends )  ;", "Configuration   configuration    =    new   Configuration ( name ,    transitive ,    visible ,    sortedExtends )  ;", "configurations . put ( name ,    configuration )  ;", "return   new    . ConfigurationMetadata ( name )  ;", "}", "METHOD_END"], "methodName": ["addConfiguration"], "fileName": "org.gradle.internal.component.external.ivypublish.DefaultIvyModulePublishMetadata"}, {"methodBody": ["METHOD_START", "{", "return   artifactsById . values (  )  ;", "}", "METHOD_END"], "methodName": ["getArtifacts"], "fileName": "org.gradle.internal.component.external.ivypublish.DefaultIvyModulePublishMetadata"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getComponentId"], "fileName": "org.gradle.internal.component.external.ivypublish.DefaultIvyModulePublishMetadata"}, {"methodBody": ["METHOD_START", "{", "for    ( IvyModuleArtifactPublishMetadata   artifactPublishMetadata    :    artifactsById . values (  )  )     {", "if    ( artifactPublishMetadata . getArtifactName (  )  . equals ( ivyName )  )     {", "return    (  ( ArtifactPublishMetadata )     ( artifactPublishMetadata )  )  ;", "}", "}", "ArtifactPublishMetadata   artifact    =    new   ArtifactPublishMetadata ( id ,    ivyName )  ;", "artifactsById . put ( artifact . getId (  )  ,    artifact )  ;", "return   artifact ;", "}", "METHOD_END"], "methodName": ["getOrCreate"], "fileName": "org.gradle.internal.component.external.ivypublish.DefaultIvyModulePublishMetadata"}, {"methodBody": ["METHOD_START", "{", "if    (  ( dependency . getSelector (  )  )    instanceof   ModuleComponentSelector )     {", "ModuleComponentSelector   selector    =     (  ( ModuleComponentSelector )     ( dependency . getSelector (  )  )  )  ;", "VersionConstraint   versionConstraint    =    selector . getVersionConstraint (  )  ;", "DefaultImmutableVersionConstraint   transformedConstraint    =    new   DefaultImmutableVersionConstraint (  . VERSION _ TRANSFORMER . transform ( versionConstraint . getPreferredVersion (  )  )  ,    CollectionUtils . collect ( versionConstraint . getRejectedVersions (  )  ,     . VERSION _ TRANSFORMER )  )  ;", "ModuleComponentSelector   newSelector    =    DefaultModuleComponentSelector . newSelector ( selector . getGroup (  )  ,    selector . getModule (  )  ,    transformedConstraint ,    selector . getAttributes (  )  )  ;", "return   dependency . withTarget ( newSelector )  ;", "}", "return   dependency ;", "}", "METHOD_END"], "methodName": ["normalizeVersionForIvy"], "fileName": "org.gradle.internal.component.external.ivypublish.DefaultIvyModulePublishMetadata"}, {"methodBody": ["METHOD_START", "{", "if    ( variants . isEmpty (  )  )     {", "return   maybeDeriveVariants (  )  ;", "}", "List < VariantBackedConfigurationMetadata >    configurations    =    new   ArrayList < VariantBackedConfigurationMetadata >  ( variants . size (  )  )  ;", "for    ( Variant   variant    :    variants )     {", "configurations . add ( new   VariantBackedConfigurationMetadata ( getId (  )  ,    variant ,    attributes ,    attributesFactory ,    variantMetadataRules )  )  ;", "}", "return   ImmutableList . copyOf ( configurations )  ;", "}", "METHOD_END"], "methodName": ["buildVariantsForGraphTraversal"], "fileName": "org.gradle.internal.component.external.model.AbstractModuleComponentResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "if    ( descriptorConfiguration . getExtendsFrom (  )  . isEmpty (  )  )     {", "return   ImmutableList . of ( descriptorConfiguration . getName (  )  )  ;", "}", "Set < String >    accumulator    =    new   LinkedHashSet < String >  (  )  ;", "populateHierarchy ( descriptorConfiguration ,    accumulator )  ;", "return   ImmutableList . copyOf ( accumulator )  ;", "}", "METHOD_END"], "methodName": ["constructHierarchy"], "fileName": "org.gradle.internal.component.external.model.AbstractModuleComponentResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "configurations . putAll ( metadata . configurations )  ;", "this . graphVariants    =    metadata . graphVariants ;", "}", "METHOD_END"], "methodName": ["copyCachedState"], "fileName": "org.gradle.internal.component.external.model.AbstractModuleComponentResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "return    (  ( AttributeContainerInternal )     ( metadata . getAttributes (  )  )  )  . asImmutable (  )  ;", "}", "METHOD_END"], "methodName": ["extractAttributes"], "fileName": "org.gradle.internal.component.external.model.AbstractModuleComponentResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "return   ImmutableList . of (  )  ;", "}", "METHOD_END"], "methodName": ["maybeDeriveVariants"], "fileName": "org.gradle.internal.component.external.model.AbstractModuleComponentResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "DefaultConfigurationMetadata   populated    =    configurations . get ( name )  ;", "if    ( populated    !  =    null )     {", "return   populated ;", "}", "Configuration   descriptorConfiguration    =    configurationDefinitions . get ( name )  ;", "if    ( descriptorConfiguration    =  =    null )     {", "return   null ;", "}", "ImmutableList < String >    hierarchy    =    constructHierarchy ( descriptorConfiguration )  ;", "boolean   transitive    =    descriptorConfiguration . isTransitive (  )  ;", "boolean   visible    =    descriptorConfiguration . isVisible (  )  ;", "populated    =    createConfiguration ( Identifier ,    name ,    transitive ,    visible ,    hierarchy ,    variantMetadataRules )  ;", "configurations . put ( name ,    populated )  ;", "return   populated ;", "}", "METHOD_END"], "methodName": ["populateConfigurationFromDescriptor"], "fileName": "org.gradle.internal.component.external.model.AbstractModuleComponentResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "accumulator . add ( metadata . getName (  )  )  ;", "for    ( String   parentName    :    metadata . getExtendsFrom (  )  )     {", "Configuration   parent    =    configurationDefinitions . get ( parentName )  ;", "populateHierarchy ( parent ,    accumulator )  ;", "}", "}", "METHOD_END"], "methodName": ["populateHierarchy"], "fileName": "org.gradle.internal.component.external.model.AbstractModuleComponentResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "AbstractMutableModuleComponentResolveMetadata . MutableVariantImpl   variant    =    new   AbstractMutableModuleComponentResolveMetadata . MutableVariantImpl ( variantName ,    attributes )  ;", "if    (  ( newVariants )     =  =    null )     {", "newVariants    =    new   ArrayList < AbstractMutableModuleComponentResolveMetadata . MutableVariantImpl >  (  )  ;", "}", "newVariants . add ( variant )  ;", "return   variant ;", "}", "METHOD_END"], "methodName": ["addVariant"], "fileName": "org.gradle.internal.component.external.model.AbstractMutableModuleComponentResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "if    (  ( variants )     !  =    null )     {", "for    ( ComponentVariant   variant    :    variants )     {", "if    ( variant . getName (  )  . equals ( name )  )     {", "return   true ;", "}", "}", "}", "if    (  ( newVariants )     !  =    null )     {", "for    (  . MutableVariantImpl   variant    :    newVariants )     {", "if    ( variant . getName (  )  . equals ( name )  )     {", "return   true ;", "}", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["containsNamedVariant"], "fileName": "org.gradle.internal.component.external.model.AbstractMutableModuleComponentResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "return    (  ( AttributeContainerInternal )     ( attributesFactory . mutable (  )  . attribute ( STATUS _ ATTRIBUTE ,    AbstractMutableModuleComponentResolveMetadata . DEFAULT _ STATUS )  )  )  ;", "}", "METHOD_END"], "methodName": ["defaultAttributes"], "fileName": "org.gradle.internal.component.external.model.AbstractMutableModuleComponentResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "return    (  (  ( variants )     !  =    null )     &  &     (  !  ( variants . isEmpty (  )  )  )  )     |  |     (  (  ( newVariants )     !  =    null )     &  &     (  !  ( newVariants . isEmpty (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["explicitlyDefinesVariants"], "fileName": "org.gradle.internal.component.external.model.AbstractMutableModuleComponentResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "return   attributesFactory ;", "}", "METHOD_END"], "methodName": ["getAttributesFactory"], "fileName": "org.gradle.internal.component.external.model.AbstractMutableModuleComponentResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( variants )     =  =    null )     &  &     (  ( newVariants )     =  =    null )  )     {", "return   ImmutableList . of (  )  ;", "}", "if    (  (  ( variants )     !  =    null )     &  &     (  ( newVariants )     =  =    null )  )     {", "return   variants ;", "}", "ImmutableList . Builder < ComponentVariant >    builder    =    new   ImmutableList . Builder < ComponentVariant >  (  )  ;", "if    (  ( variants )     !  =    null )     {", "builder . addAll ( variants )  ;", "}", "for    (  . MutableVariantImpl   variant    :    newVariants )     {", "builder . add ( new    . ImmutableVariantImpl ( getId (  )  ,    variant . name ,    variant . attributes ,    ImmutableList . copyOf ( variant . dependencies )  ,    ImmutableList . copyOf ( variant . dependencyConstraints )  ,    ImmutableList . copyOf ( variant . files )  ,    ImmutableCapabilities . of ( variant . capabilities )  )  )  ;", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["getVariants"], "fileName": "org.gradle.internal.component.external.model.AbstractMutableModuleComponentResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "this . componentLevelAttributes    =    attributesFactory . mutable (  (  ( AttributeContainerInternal )     ( attributes )  )  )  ;", "if    (  !  ( attributes . contains ( STATUS _ ATTRIBUTE )  )  )     {", "componentLevelAttributes . attribute ( STATUS _ ATTRIBUTE ,     . DEFAULT _ STATUS )  ;", "}", "}", "METHOD_END"], "methodName": ["setAttributes"], "fileName": "org.gradle.internal.component.external.model.AbstractMutableModuleComponentResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "this . alwaysUseAttributeMatching    =    true ;", "return   this ;", "}", "METHOD_END"], "methodName": ["alwaysUseAttributeMatching"], "fileName": "org.gradle.internal.component.external.model.ConfigurationBoundExternalDependencyMetadata"}, {"methodBody": ["METHOD_START", "{", "return    !  ( targetComponent . getVariantsForGraphTraversal (  )  . isEmpty (  )  )  ;", "}", "METHOD_END"], "methodName": ["hasVariants"], "fileName": "org.gradle.internal.component.external.model.ConfigurationBoundExternalDependencyMetadata"}, {"methodBody": ["METHOD_START", "{", "ExternalDependencyDescriptor   newDelegate    =    dependencyDescriptor . withRequested ( newSelector )  ;", "return   new    ( configuration ,    componentId ,    newDelegate )  ;", "}", "METHOD_END"], "methodName": ["withRequested"], "fileName": "org.gradle.internal.component.external.model.ConfigurationBoundExternalDependencyMetadata"}, {"methodBody": ["METHOD_START", "{", "assert    ( this . configDependencies )     =  =    null ;", "this . configDependencies    =    ImmutableList . copyOf ( dependencies )  ;", "}", "METHOD_END"], "methodName": ["setDependencies"], "fileName": "org.gradle.internal.component.external.model.DefaultConfigurationMetadata"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultConfigurationMetadata ( componentId ,    name ,    transitive ,    visible ,    hierarchy ,    artifacts ,    componentMetadataRules ,    excludes ,    attributes ,    configDependencies )  ;", "}", "METHOD_END"], "methodName": ["withAttributes"], "fileName": "org.gradle.internal.component.external.model.DefaultConfigurationMetadata"}, {"methodBody": ["METHOD_START", "{", "if    (  ( artifacts )     =  =    null )     {", "artifacts    =    new   IdentityHashMap < Artifact ,    ModuleCArtifactMetadata >  (  )  ;", "}", "for    ( Artifact   artifact    :    artifactDefinitions )     {", "if    ( artifact . getConfigurations (  )  . contains ( name )  )     {", "ModuleCArtifactMetadata   artifactMetadata    =    artifacts . get ( artifact )  ;", "if    ( artifactMetadata    =  =    null )     {", "artifactMetadata    =    new   DefaultModuleCArtifactMetadata ( getId (  )  ,    artifact . getArtifactName (  )  )  ;", "artifacts . put ( artifact ,    artifactMetadata )  ;", "}", "dest . add ( artifactMetadata )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["collectArtifactsFor"], "fileName": "org.gradle.internal.component.external.model.DefaultIvyModuleResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "return   new   ConfigurationBoundExternalDependencyMetadata ( config ,    componentId ,    incoming )  ;", "}", "METHOD_END"], "methodName": ["contextualize"], "fileName": "org.gradle.internal.component.external.model.DefaultIvyModuleResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "Set < ModuleComponentArtifactMetadata >    artifacts    =    new   LinkedHashSet < ModuleComponentArtifactMetadata >  (  )  ;", "collectArtifactsFor ( name ,    artifacts )  ;", "for    ( String   parent    :    hierarchy )     {", "collectArtifactsFor ( parent ,    artifacts )  ;", "}", "return   ImmutableList . copyOf ( artifacts )  ;", "}", "METHOD_END"], "methodName": ["filterArtifacts"], "fileName": "org.gradle.internal.component.external.model.DefaultIvyModuleResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < ModuleDependencyMetadata >    filteredDependencies    =    ImmutableList . builder (  )  ;", "for    ( IvyDependencyDescriptor   dependency    :    dependencies )     {", "if    ( include ( dependency ,    config . getName (  )  ,    config . getHierarchy (  )  )  )     {", "filteredDependencies . add ( contextualize ( config ,    getId (  )  ,    dependency )  )  ;", "}", "}", "return   filteredDependencies . build (  )  ;", "}", "METHOD_END"], "methodName": ["filterDependencies"], "fileName": "org.gradle.internal.component.external.model.DefaultIvyModuleResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < ExcludeMetadata >    filtered    =    ImmutableList . builder (  )  ;", "for    ( Exclude   exclude    :    excludes )     {", "for    ( String   config    :    exclude . getConfigurations (  )  )     {", "if    ( hierarchy . contains ( config )  )     {", "filtered . add ( exclude )  ;", "break ;", "}", "}", "}", "return   filtered . build (  )  ;", "}", "METHOD_END"], "methodName": ["filterExcludes"], "fileName": "org.gradle.internal.component.external.model.DefaultIvyModuleResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "return   branch ;", "}", "METHOD_END"], "methodName": ["getBranch"], "fileName": "org.gradle.internal.component.external.model.DefaultIvyModuleResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "return   extraAttributes ;", "}", "METHOD_END"], "methodName": ["getExtraAttributes"], "fileName": "org.gradle.internal.component.external.model.DefaultIvyModuleResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "Set < String >    dependencyConfigurations    =    dependency . getConfMappings (  )  . keySet (  )  ;", "for    ( String   mConfiguration    :    dependencyConfigurations )     {", "if    (  ( mConfiguration . equals (  \"  %  \"  )  )     |  |     ( hierarchy . contains ( mConfiguration )  )  )     {", "return   true ;", "}", "if    ( mConfiguration . equals (  \"  *  \"  )  )     {", "boolean   include    =    true ;", "for    ( String   conf 2     :    dependencyConfigurations )     {", "if    (  ( conf 2  . startsWith (  \"  !  \"  )  )     &  &     ( conf 2  . substring (  1  )  . equals ( configName )  )  )     {", "include    =    false ;", "break ;", "}", "}", "if    ( include )     {", "return   true ;", "}", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["include"], "fileName": "org.gradle.internal.component.external.model.DefaultIvyModuleResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultIvyModuleResolveMetadata ( this ,    transformed )  ;", "}", "METHOD_END"], "methodName": ["withDependencies"], "fileName": "org.gradle.internal.component.external.model.DefaultIvyModuleResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "ConfigurationBoundExternalDependencyMetadata   dependency    =    new   ConfigurationBoundExternalDependencyMetadata ( config ,    componentId ,    incoming )  ;", "if    ( improvedPomSupportEnabled )     {", "dependency . alwaysUseAttributeMatching (  )  ;", "}", "return   dependency ;", "}", "METHOD_END"], "methodName": ["contextualize"], "fileName": "org.gradle.internal.component.external.model.DefaultMavenModuleResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < ModuleDependencyMetadata >    filteredDependencies    =    ImmutableList . builder (  )  ;", "boolean   isOptionalConfiguration    =     \" optional \"  . equals ( config . getName (  )  )  ;", "for    ( MavenDependencyDescriptor   dependency    :    dependencies )     {", "if    ( isOptionalConfiguration    &  &     ( includeInOptionalConfiguration ( dependency )  )  )     {", "filteredDependencies . add ( new    . OptionalConfigurationDependencyMetadata ( config ,    getId (  )  ,    dependency )  )  ;", "} else", "if    ( include ( dependency ,    config . getHierarchy (  )  )  )     {", "filteredDependencies . add ( contextualize ( config ,    getId (  )  ,    dependency )  )  ;", "}", "}", "return   filteredDependencies . build (  )  ;", "}", "METHOD_END"], "methodName": ["filterDependencies"], "fileName": "org.gradle.internal.component.external.model.DefaultMavenModuleResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "ImmutableList <  ?    extends   ModuleComponentArtifactMetadata >    artifacts ;", "if    (  (  (  ( name . equals (  \" compile \"  )  )     |  |     ( name . equals (  \" runtime \"  )  )  )     |  |     ( name . equals (  \" default \"  )  )  )     |  |     ( name . equals (  \" test \"  )  )  )     {", "artifacts    =    ImmutableList . of ( new   DefaultModuleComponentArtifactMetadata ( getId (  )  ,    new   DefaultIvyArtifactName ( getId (  )  . getModule (  )  ,     \" jar \"  ,     \" jar \"  )  )  )  ;", "} else    {", "artifacts    =    ImmutableList . of (  )  ;", "}", "return   artifacts ;", "}", "METHOD_END"], "methodName": ["getArtifactsForConfiguration"], "fileName": "org.gradle.internal.component.external.model.DefaultMavenModuleResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "if    (  ( derivedVariants )     =  =    null )     {", "derivedVariants    =    ImmutableList . of ( withUsageAttribute (  (  ( DefaultConfiguration )     ( getConfiguration (  \" compile \"  )  )  )  ,    JAVA _ API ,    attributesFactory )  ,    withUsageAttribute (  (  ( DefaultConfiguration )     ( getConfiguration (  \" runtime \"  )  )  )  ,    JAVA _ RUNTIME ,    attributesFactory )  )  ;", "}", "return   derivedVariants ;", "}", "METHOD_END"], "methodName": ["getDerivedVariants"], "fileName": "org.gradle.internal.component.external.model.DefaultMavenModuleResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "return   packaging ;", "}", "METHOD_END"], "methodName": ["getPackaging"], "fileName": "org.gradle.internal.component.external.model.DefaultMavenModuleResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "return   snapshotTimestamp ;", "}", "METHOD_END"], "methodName": ["getSnapshotTimestamp"], "fileName": "org.gradle.internal.component.external.model.DefaultMavenModuleResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "return    !  ( improvedPomSupportEnabled )  ;", "}", "METHOD_END"], "methodName": ["ignoreOptionalDependencies"], "fileName": "org.gradle.internal.component.external.model.DefaultMavenModuleResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "MavenScope   dependencyScope    =    dependency . getScope (  )  ;", "if    (  ( dependency . isOptional (  )  )     &  &     ( ignoreOptionalDependencies (  )  )  )     {", "return   false ;", "}", "return   hierarchy . contains ( dependencyScope . name (  )  . toLowerCase (  )  )  ;", "}", "METHOD_END"], "methodName": ["include"], "fileName": "org.gradle.internal.component.external.model.DefaultMavenModuleResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "MavenScope   dependencyScope    =    dependency . getScope (  )  ;", "return    (  ( dependency . isOptional (  )  )     &  &     ( dependencyScope    !  =     ( MavenScope . Test )  )  )     &  &     ( dependencyScope    !  =     ( MavenScope . System )  )  ;", "}", "METHOD_END"], "methodName": ["includeInOptionalConfiguration"], "fileName": "org.gradle.internal.component.external.model.DefaultMavenModuleResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "return    ( improvedPomSupportEnabled )     &  &     (  ( isKnownJarPackaging (  )  )     |  |     ( isPomPackaging (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["isJavaLibrary"], "fileName": "org.gradle.internal.component.external.model.DefaultMavenModuleResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "return   DefaultMavenModuleResolveMetadata . JAR _ PACKAGINGS . contains ( packaging )  ;", "}", "METHOD_END"], "methodName": ["isKnownJarPackaging"], "fileName": "org.gradle.internal.component.external.model.DefaultMavenModuleResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "return   DefaultMavenModuleResolveMetadata . POM _ PACKAGING . equals ( packaging )  ;", "}", "METHOD_END"], "methodName": ["isPomPackaging"], "fileName": "org.gradle.internal.component.external.model.DefaultMavenModuleResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "return   relocated ;", "}", "METHOD_END"], "methodName": ["isRelocated"], "fileName": "org.gradle.internal.component.external.model.DefaultMavenModuleResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "return   conf . withAttributes ( attributesFactory . concat ( EMPTY ,    DefaultMavenModuleResolveMetadata . USAGE _ ATTRIBUTE ,    new   CoercingStringValueSnapshot ( usage ,    objectInstantiator )  )  )  ;", "}", "METHOD_END"], "methodName": ["withUsageAttribute"], "fileName": "org.gradle.internal.component.external.model.DefaultMavenModuleResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "return   componentIdentifier ;", "}", "METHOD_END"], "methodName": ["getComponentIdentifier"], "fileName": "org.gradle.internal.component.external.model.DefaultModuleComponentArtifactIdentifier"}, {"methodBody": ["METHOD_START", "{", "String   name    =    this . name . toString (  )  ;", "String   componen    =    this . componen . toString (  )  ;", "return    (  ( name    +     \"     (  \"  )     +    componen )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["getDisplayName"], "fileName": "org.gradle.internal.component.external.model.DefaultModuleComponentArtifactIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.internal.component.external.model.DefaultModuleComponentArtifactIdentifier"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   builder    =    new   StringBuilder (  (  (  (  ( group . length (  )  )     +     ( module . length (  )  )  )     +     ( version . length (  )  )  )     +     2  )  )  ;", "builder . append ( group )  ;", "builder . append (  \"  :  \"  )  ;", "builder . append ( module )  ;", "builder . append (  \"  :  \"  )  ;", "builder . append ( version )  ;", "return   builder . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getDisplayName"], "fileName": "org.gradle.internal.component.external.model.DefaultModuleComponentIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   group ;", "}", "METHOD_END"], "methodName": ["getGroup"], "fileName": "org.gradle.internal.component.external.model.DefaultModuleComponentIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   module ;", "}", "METHOD_END"], "methodName": ["getModule"], "fileName": "org.gradle.internal.component.external.model.DefaultModuleComponentIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   version ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "org.gradle.internal.component.external.model.DefaultModuleComponentIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultModuleComponentIdentifier ( group ,    name ,    version )  ;", "}", "METHOD_END"], "methodName": ["newId"], "fileName": "org.gradle.internal.component.external.model.DefaultModuleComponentIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultModuleComponentIdentifier ( moduleVersionIdentifier . getGroup (  )  ,    moduleVersionIdentifier . getName (  )  ,    moduleVersionIdentifier . getVersion (  )  )  ;", "}", "METHOD_END"], "methodName": ["newId"], "fileName": "org.gradle.internal.component.external.model.DefaultModuleComponentIdentifier"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   builder    =    new   StringBuilder (  (  (  (  ( group . length (  )  )     +     ( module . length (  )  )  )     +     ( versionConstraint . getPreferredVersion (  )  . length (  )  )  )     +     2  )  )  ;", "builder . append ( group )  ;", "builder . append (  \"  :  \"  )  ;", "builder . append ( module )  ;", "if    (  ( versionConstraint . getPreferredVersion (  )  . length (  )  )     >     0  )     {", "builder . append (  \"  :  \"  )  ;", "builder . append ( versionConstraint . getPreferredVersion (  )  )  ;", "}", "if    (  ( versionConstraint . getBranch (  )  )     !  =    null )     {", "builder . append (  \"     ( branch :     \"  )  ;", "builder . append ( versionConstraint . getBranch (  )  )  ;", "builder . append (  \"  )  \"  )  ;", "}", "return   builder . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getDisplayName"], "fileName": "org.gradle.internal.component.external.model.DefaultModuleComponentSelector"}, {"methodBody": ["METHOD_START", "{", "return   group ;", "}", "METHOD_END"], "methodName": ["getGroup"], "fileName": "org.gradle.internal.component.external.model.DefaultModuleComponentSelector"}, {"methodBody": ["METHOD_START", "{", "return   module ;", "}", "METHOD_END"], "methodName": ["getModule"], "fileName": "org.gradle.internal.component.external.model.DefaultModuleComponentSelector"}, {"methodBody": ["METHOD_START", "{", "return   versionConstraint . getPreferredVersion (  )  ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "org.gradle.internal.component.external.model.DefaultModuleComponentSelector"}, {"methodBody": ["METHOD_START", "{", "assert   identifier    !  =    null    :     \" identifier   cannot   be   null \"  ;", "if    ( identifier   instanceof   Identifier )     {", "Identifier   moduleComponentIdentifier    =     (  ( Identifier )     ( identifier )  )  ;", "return    (  ( module . equals ( moduleComponentIdentifier . getModule (  )  )  )     &  &     ( group . equals ( moduleComponentIdentifier . getGroup (  )  )  )  )     &  &     ( versionConstraint . getPreferredVersion (  )  . equals ( moduleComponentIdentifier . getVersion (  )  )  )  ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["matchesStrictly"], "fileName": "org.gradle.internal.component.external.model.DefaultModuleComponentSelector"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultModuleComponentSelector ( group ,    name ,    DefaultImmutableVersionConstraint . of ( version )  ,    ImmutableAttributes . EMPTY )  ;", "}", "METHOD_END"], "methodName": ["newSelector"], "fileName": "org.gradle.internal.component.external.model.DefaultModuleComponentSelector"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultModuleComponentSelector ( group ,    name ,    DefaultImmutableVersionConstraint . of ( version )  ,    ImmutableAttributes . EMPTY )  ;", "}", "METHOD_END"], "methodName": ["newSelector"], "fileName": "org.gradle.internal.component.external.model.DefaultModuleComponentSelector"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultModuleComponentSelector ( group ,    name ,    DefaultImmutableVersionConstraint . of ( version )  ,     (  ( AttributeContainerInternal )     ( attributes )  )  . asImmutable (  )  )  ;", "}", "METHOD_END"], "methodName": ["newSelector"], "fileName": "org.gradle.internal.component.external.model.DefaultModuleComponentSelector"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultModuleComponentSelector ( selector . getGroup (  )  ,    selector . getName (  )  ,    DefaultImmutableVersionConstraint . of ( selector . getVersion (  )  )  ,    ImmutableAttributes . EMPTY )  ;", "}", "METHOD_END"], "methodName": ["newSelector"], "fileName": "org.gradle.internal.component.external.model.DefaultModuleComponentSelector"}, {"methodBody": ["METHOD_START", "{", "Builder < String ,    Configuration >    builder    =    ImmutableMap . builder (  )  ;", "for    ( Configuration   configuration    :    configurations )     {", "builder . put ( configuration . getName (  )  ,    configuration )  ;", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["toMap"], "fileName": "org.gradle.internal.component.external.model.DefaultMutableIvyModuleResolveMetadata"}, {"methodBody": ["METHOD_START", "{", "return   artifacts ;", "}", "METHOD_END"], "methodName": ["getArtifacts"], "fileName": "org.gradle.internal.component.external.model.FixedComponentArtifacts"}, {"methodBody": ["METHOD_START", "{", "return   new   ImmutableCapabilities ( ImmutableList . copyOf ( capabilities )  )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.internal.component.external.model.ImmutableCapabilities"}, {"methodBody": ["METHOD_START", "{", "int   startFallback    =    targetPattern . indexOf (  '  (  '  )  ;", "if    ( startFallback    >  =     0  )     {", "if    ( targetPattern . endsWith (  \"  )  \"  )  )     {", "String   preferred    =    targetPattern . substring (  0  ,    startFallback )  ;", "ConfigurationMetadata   configuration    =    targetCgetConfiguration ( preferred )  ;", "if    ( configuration    !  =    null )     {", "maybeAddConfiguration ( targetConfigurations ,    configuration )  ;", "return ;", "}", "targetPattern    =    targetPattern . substring (  ( startFallback    +     1  )  ,     (  ( targetPattern . length (  )  )     -     1  )  )  ;", "}", "}", "if    ( targetPattern . equals (  \"  *  \"  )  )     {", "for    ( String   targetName    :    targetCgetConfigurationNames (  )  )     {", "ConfigurationMetadata   configuration    =    targetCgetConfiguration ( targetName )  ;", "if    ( configuration . isVisible (  )  )     {", "maybeAddConfiguration ( targetConfigurations ,    configuration )  ;", "}", "}", "return ;", "}", "if    ( targetPattern . equals (  \"  @  \"  )  )     {", "targetPattern    =    patternConfiguration ;", "} else", "if    ( targetPattern . equals (  \"  #  \"  )  )     {", "targetPattern    =    fromConfiguration ;", "}", "ConfigurationMetadata   configuration    =    targetCgetConfiguration ( targetPattern )  ;", "if    ( configuration    =  =    null )     {", "throw   new   ConfigurationNotFoundException ( fromC   fromConfiguration ,    targetPattern ,    targetCgetId (  )  )  ;", "}", "maybeAddConfiguration ( targetConfigurations ,    configuration )  ;", "}", "METHOD_END"], "methodName": ["findMatches"], "fileName": "org.gradle.internal.component.external.model.IvyDependencyDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   excludes ;", "}", "METHOD_END"], "methodName": ["getAllExcludes"], "fileName": "org.gradle.internal.component.external.model.IvyDependencyDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   confs ;", "}", "METHOD_END"], "methodName": ["getConfMappings"], "fileName": "org.gradle.internal.component.external.model.IvyDependencyDescriptor"}, {"methodBody": ["METHOD_START", "{", "if    ( dependencyArtifacts . isEmpty (  )  )     {", "return   ImmutableList . of (  )  ;", "}", "Collection < String >    includedConfigurations    =    fromConfiguration . getHierarchy (  )  ;", "ImmutableList . Builder < IvyArtifactName >    artifacts    =    ImmutableList . builder (  )  ;", "for    ( Artifact   depArtifact    :    dependencyArtifacts )     {", "Set < String >    artifactConfigurations    =    depArtifact . getConfigurations (  )  ;", "if    (  . include ( artifactConfigurations ,    includedConfigurations )  )     {", "IvyArtifactName   ivyArtifactName    =    depArtifact . getArtifactName (  )  ;", "artifacts . add ( ivyArtifactName )  ;", "}", "}", "return   artifacts . build (  )  ;", "}", "METHOD_END"], "methodName": ["getConfigurationArtifacts"], "fileName": "org.gradle.internal.component.external.model.IvyDependencyDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   dependencyArtifacts ;", "}", "METHOD_END"], "methodName": ["getDependencyArtifacts"], "fileName": "org.gradle.internal.component.external.model.IvyDependencyDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   dynamicConstraintVersion ;", "}", "METHOD_END"], "methodName": ["getDynamicConstraintVersion"], "fileName": "org.gradle.internal.component.external.model.IvyDependencyDescriptor"}, {"methodBody": ["METHOD_START", "{", "for    ( Stringnfiguration    : nfigurations )     {", "if   nfiguration . equals (  \"  *  \"  )  )     {", "return   true ;", "}", "if    ( acceptedConfigurationsntainsnfiguration )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["include"], "fileName": "org.gradle.internal.component.external.model.IvyDependencyDescriptor"}, {"methodBody": ["METHOD_START", "{", "Iterator < ConfigurationMetadata >    iter    =    configurations . iterator (  )  ;", "while    ( iter . hasNext (  )  )     {", "ConfigurationMetadata   configuration    =    iter . next (  )  ;", "if    ( configuration . getHierarchy (  )  . contains ( toAdd . getName (  )  )  )     {", "return ;", "}", "if    ( toAdd . getHierarchy (  )  . contains ( configuration . getName (  )  )  )     {", "iter . remove (  )  ;", "}", "}", "configurations . add ( toAdd )  ;", "}", "METHOD_END"], "methodName": ["maybeAddConfiguration"], "fileName": "org.gradle.internal.component.external.model.IvyDependencyDescriptor"}, {"methodBody": ["METHOD_START", "{", "List < ConfigurationMetadata >    targets    =    Lists . newLinkedList (  )  ;", "boolean   matched    =    false ;", "String   fromConfigName    =    fromConfiguration . getName (  )  ;", "for    ( String   config    :    fromConfiguration . getHierarchy (  )  )     {", "if    ( confs . containsKey ( config )  )     {", "Set < String >    targetPatterns    =    confs . get ( config )  ;", "if    (  !  ( targetPatterns . isEmpty (  )  )  )     {", "matched    =    true ;", "}", "for    ( String   targetPattern    :    targetPatterns )     {", "findMatches ( fromC ,    targetC ,    fromConfigName ,    config ,    targetPattern ,    targets )  ;", "}", "}", "}", "if    (  (  ! matched )     &  &     ( confs . containsKey (  \"  %  \"  )  )  )     {", "for    ( String   targetPattern    :    confs . get (  \"  %  \"  )  )     {", "findMatches ( fromC ,    targetC ,    fromConfigName ,    fromConfigName ,    targetPattern ,    targets )  ;", "}", "}", "Set < String >    wildcardPatterns    =    confs . get (  \"  *  \"  )  ;", "if    (  !  ( wildcardPatterns . isEmpty (  )  )  )     {", "boolean   excludeWildcards    =    false ;", "for    ( String   confName    :    fromConfiguration . getHierarchy (  )  )     {", "if    ( confs . containsKey (  (  \"  !  \"     +    confName )  )  )     {", "excludeWildcards    =    true ;", "break ;", "}", "}", "if    (  ! excludeWildcards )     {", "for    ( String   targetPattern    :    wildcardPatterns )     {", "findMatches ( fromC ,    targetC ,    fromConfigName ,    fromConfigName ,    targetPattern ,    targets )  ;", "}", "}", "}", "return   targets ;", "}", "METHOD_END"], "methodName": ["selectLegacyConfigurations"], "fileName": "org.gradle.internal.component.external.model.IvyDependencyDescriptor"}, {"methodBody": ["METHOD_START", "{", "ConfigurationMetadata   configuration    =    targetComponent . getConfiguration ( target )  ;", "if    ( configuration    =  =    null )     {", "configuration    =    targetComponent . getConfiguration (  \" default \"  )  ;", "if    ( configuration    =  =    null )     {", "throw   new   ConfigurationNotFoundException ( fromComponentId ,    fromConfiguration . getName (  )  ,    target ,    targetComponent . getId (  )  )  ;", "}", "}", "return   configuration ;", "}", "METHOD_END"], "methodName": ["findTargetConfiguration"], "fileName": "org.gradle.internal.component.external.model.MavenDependencyDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   excludes ;", "}", "METHOD_END"], "methodName": ["getAllExcludes"], "fileName": "org.gradle.internal.component.external.model.MavenDependencyDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   ImmutableList . of (  )  ;", "}", "METHOD_END"], "methodName": ["getArtifactsForOptionalDependency"], "fileName": "org.gradle.internal.component.external.model.MavenDependencyDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   dependencyArtifact ;", "}", "METHOD_END"], "methodName": ["getDependencyArtifact"], "fileName": "org.gradle.internal.component.external.model.MavenDependencyDescriptor"}, {"methodBody": ["METHOD_START", "{", "return    ( dependencyArtifact )     =  =    null    ?    ImmutableList .  < IvyArtifactName > of (  )     :    ImmutableList . of ( dependencyArtifact )  ;", "}", "METHOD_END"], "methodName": ["getDependencyArtifacts"], "fileName": "org.gradle.internal.component.external.model.MavenDependencyDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   scope ;", "}", "METHOD_END"], "methodName": ["getScope"], "fileName": "org.gradle.internal.component.external.model.MavenDependencyDescriptor"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < ConfigurationMetadata >    result    =    ImmutableList . builder (  )  ;", "boolean   requiresCompile    =    fromConfiguration . getName (  )  . equals (  \" compile \"  )  ;", "if    (  ! requiresCompile )     {", "ConfigurationMetadata   runtime    =    findTargetConfiguration ( fromC   fromConfiguration ,    targetC    \" runtime \"  )  ;", "result . add ( runtime )  ;", "requiresCompile    =     !  ( runtime . getHierarchy (  )  . contains (  \" compile \"  )  )  ;", "}", "if    ( requiresCompile )     {", "result . add ( findTargetConfiguration ( fromC   fromConfiguration ,    targetC    \" compile \"  )  )  ;", "}", "ConfigurationMetadata   master    =    targetCgetConfiguration (  \" master \"  )  ;", "if    (  ( master    !  =    null )     &  &     (  (  !  ( master . getDependencies (  )  . isEmpty (  )  )  )     |  |     (  !  ( master . getArtifacts (  )  . isEmpty (  )  )  )  )  )     {", "result . add ( master )  ;", "}", "return   result . build (  )  ;", "}", "METHOD_END"], "methodName": ["selectLegacyConfigurations"], "fileName": "org.gradle.internal.component.external.model.MavenDependencyDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   PreferJavaRuntimeVariant . SCHEMA _ DEFAULT _ JAVA _ VARIANTS ;", "}", "METHOD_END"], "methodName": ["schema"], "fileName": "org.gradle.internal.component.external.model.PreferJavaRuntimeVariant"}, {"methodBody": ["METHOD_START", "{", "return   relativeUrl ;", "}", "METHOD_END"], "methodName": ["getRelativeUrl"], "fileName": "org.gradle.internal.component.external.model.UrlBackedArtifactMetadata"}, {"methodBody": ["METHOD_START", "{", "return   attributesFactory . concat ( componentLevelAttributes ,    variantAttributes . asImmutable (  )  )  ;", "}", "METHOD_END"], "methodName": ["mergeComponentAndVariantAttributes"], "fileName": "org.gradle.internal.component.external.model.VariantBackedConfigurationMetadata"}, {"methodBody": ["METHOD_START", "{", "if    (  ( variantAttributesRules )     =  =    null )     {", "variantAttributesRules    =    new   AttributesRules ( attributesFactory )  ;", "}", "variantAttributesRules . addAttributesAction ( action )  ;", "}", "METHOD_END"], "methodName": ["addAttributesAction"], "fileName": "org.gradle.internal.component.external.model.VariantMetadataRules"}, {"methodBody": ["METHOD_START", "{", "if    (  ( capabilitiesRules )     =  =    null )     {", "capabilitiesRules    =    new   CapabilitiesRules (  )  ;", "}", "capabilitiesRules . addCapabilitiesAction ( action )  ;", "}", "METHOD_END"], "methodName": ["addCapabilitiesAction"], "fileName": "org.gradle.internal.component.external.model.VariantMetadataRules"}, {"methodBody": ["METHOD_START", "{", "if    (  ( dependencyMetadataRules )     =  =    null )     {", "dependencyMetadataRules    =    new   DependencyMetadataRules ( instantiator ,    dependencyNotationParser ,    dependencyConstraintNotationParser ,    attributesFactory )  ;", "}", "dependencyMetadataRules . addDependencyAction ( action )  ;", "}", "METHOD_END"], "methodName": ["addDependencyAction"], "fileName": "org.gradle.internal.component.external.model.VariantMetadataRules"}, {"methodBody": ["METHOD_START", "{", "if    (  ( dependencyMetadataRules )     =  =    null )     {", "dependencyMetadataRules    =    new   DependencyMetadataRules ( instantiator ,    dependencyNotationParser ,    dependencyConstraintNotationParser ,    attributesFactory )  ;", "}", "dependencyMetadataRules . addDependencyConstraintAction ( action )  ;", "}", "METHOD_END"], "methodName": ["addDependencyConstraintAction"], "fileName": "org.gradle.internal.component.external.model.VariantMetadataRules"}, {"methodBody": ["METHOD_START", "{", "if    (  ( capabilitiesRules )     !  =    null )     {", ". MutableCapabilities   mutableCapabilities    =    new    . MutableCapabilities ( Lists . newArrayList ( capabilities . getCapabilities (  )  )  )  ;", "return   capabilitiesRules . execute ( variant ,    mutableCapabilities )  ;", "}", "return   capabilities ;", "}", "METHOD_END"], "methodName": ["applyCapabilitiesRules"], "fileName": "org.gradle.internal.component.external.model.VariantMetadataRules"}, {"methodBody": ["METHOD_START", "{", "if    (  ( dependencyMetadataRules )     !  =    null )     {", "return   dependencyMetadataRules . execute ( variant ,    configDependencies )  ;", "}", "return   configDependencies ;", "}", "METHOD_END"], "methodName": ["applyDependencyMetadataRules"], "fileName": "org.gradle.internal.component.external.model.VariantMetadataRules"}, {"methodBody": ["METHOD_START", "{", "if    (  ( variantAttributesRules )     !  =    null )     {", "return   variantAttributesRules . execute ( variant ,    source )  ;", "}", "return   source . asImmutable (  )  ;", "}", "METHOD_END"], "methodName": ["applyVariantAttributeRules"], "fileName": "org.gradle.internal.component.external.model.VariantMetadataRules"}, {"methodBody": ["METHOD_START", "{", "return   VariantMetadataRules . ImmutableRules . INSTANCE ;", "}", "METHOD_END"], "methodName": ["noOp"], "fileName": "org.gradle.internal.component.external.model.VariantMetadataRules"}, {"methodBody": ["METHOD_START", "{", "return   fileName . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getFileName"], "fileName": "org.gradle.internal.component.local.model.ComponentFileArtifactIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   displayName ;", "}", "METHOD_END"], "methodName": ["getDisplayName"], "fileName": "org.gradle.internal.component.local.model.DefaultLibraryBinaryIdentifier"}, {"methodBody": ["METHOD_START", "{", "assert   identifier    !  =    null    :     \" identifier   cannot   be   null \"  ;", "if    ( identifier   instanceof   LibraryBinaryIdentifier )     {", "LibraryBinaryIdentifier   projectIdentifier    =     (  ( LibraryBinaryIdentifier )     ( identifier )  )  ;", "return    (  ( Objects . equal ( projectIdentifier . getProjectPath (  )  ,    projectPath )  )     &  &     ( Objects . equal ( projectIdentifier . getLibraryName (  )  ,    libraryName )  )  )     &  &     ( Objects . equal ( projectIdentifier . getVariant (  )  ,    variant )  )  ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["matchesStrictly"], "fileName": "org.gradle.internal.component.local.model.DefaultLibraryComponentSelector"}, {"methodBody": ["METHOD_START", "{", "allConfigurations . put ( name ,    conf )  ;", "}", "METHOD_END"], "methodName": ["addToConfigurations"], "fileName": "org.gradle.internal.component.local.model.DefaultLocalComponentMetadata"}, {"methodBody": ["METHOD_START", "{", "DefaultLocalComponentMetadata   copy    =    new   DefaultLocalComponentMetadata ( moduleVersionId ,    componentIdentifier ,    status ,    attributesSchema )  ;", "for    ( DefaultLocalComponentMetadata . DefaultLocalConfigurationMetadata   configuration    :    allConfigurations . values (  )  )     {", "copy . addConfiguration ( configuration . getName (  )  ,    configuration . description ,    configuration . extendsFrom ,    configuration . hierarchy ,    configuration . visible ,    configuration . transitive ,    configuration . attributes ,    configuration . canBeConsumed ,    configuration . canBeResolved ,    configuration . capabilities )  ;", "}", "Map < LocalComponentArtifactMetadata ,    LocalComponentArtifactMetadata >    transformedArtifacts    =    new   HashMap < LocalComponentArtifactMetadata ,    LocalComponentArtifactMetadata >  (  )  ;", "for    ( Map . Entry < String ,    LocalComponentArtifactMetadata >    entry    :    allArtifacts . entries (  )  )     {", "LocalComponentArtifactMetadata   oldArtifact    =    entry . getValue (  )  ;", "LocalComponentArtifactMetadata   newArtifact    =    copyArtifact ( oldArtifact ,    artifacts ,    transformedArtifacts )  ;", "copy . allArtifacts . put ( entry . getKey (  )  ,    newArtifact )  ;", "}", "for    ( Map . Entry < String ,    DefaultVariantMetadata >    entry    :    allVariants . entries (  )  )     {", "DefaultVariantMetadata   oldVariant    =    entry . getValue (  )  ;", "List < LocalComponentArtifactMetadata >    newArtifacts    =    new   ArrayList < LocalComponentArtifactMetadata >  ( oldVariant . getArtifacts (  )  . size (  )  )  ;", "for    ( ComponentArtifactMetadata   oldArtifact    :    oldVariant . getArtifacts (  )  )     {", "newArtifacts . add ( copyArtifact (  (  ( LocalComponentArtifactMetadata )     ( oldArtifact )  )  ,    artifacts ,    transformedArtifacts )  )  ;", "}", "copy . allVariants . put ( entry . getKey (  )  ,    new   DefaultVariantMetadata ( oldVariant . asDescribable (  )  ,    oldVariant . getAttributes (  )  ,    newArtifacts ,    oldVariant . getCapabilities (  )  )  )  ;", "}", "for    ( DefaultLocalComponentMetadata . DefaultLocalConfigurationMetadata   configuration    :    allConfigurations . values (  )  )     {", "configuration . realizeDependencies (  )  ;", "DefaultLocalComponentMetadata . DefaultLocalConfigurationMetadata   configurationCopy    =    copy . allConfigurations . get ( configuration . getName (  )  )  ;", "for    ( LocalOriginDependencyMetadata   dependency    :    configuration . definedDependencies )     {", "configurationCopy . definedDependencies . add ( dependencies . transform ( dependency )  )  ;", "}", "configurationCopy . definedExcludes . addAll ( configuration . definedExcludes )  ;", "}", "return   copy ;", "}", "METHOD_END"], "methodName": ["copy"], "fileName": "org.gradle.internal.component.local.model.DefaultLocalComponentMetadata"}, {"methodBody": ["METHOD_START", "{", "LocalComponentArtifactMetadata   newArtifact    =    transformedArtifacts . get ( oldArtifact )  ;", "if    ( newArtifact    =  =    null )     {", "newArtifact    =    transformer . transform ( oldArtifact )  ;", "transformedArtifacts . put ( oldArtifact ,    newArtifact )  ;", "}", "return   newArtifact ;", "}", "METHOD_END"], "methodName": ["copyArtifact"], "fileName": "org.gradle.internal.component.local.model.DefaultLocalComponentMetadata"}, {"methodBody": ["METHOD_START", "{", "if    ( build . getName (  )  . equals (  \"  :  \"  )  )     {", "return   pPath ;", "} else", "if    ( pPath . equals (  \"  :  \"  )  )     {", "return    \"  :  \"     +     ( build . getName (  )  )  ;", "} else    {", "return    (  \"  :  \"     +     ( build . getName (  )  )  )     +    pPath ;", "}", "}", "METHOD_END"], "methodName": ["fullPath"], "fileName": "org.gradle.internal.component.local.model.DefaultProjectComponentIdentifier"}, {"methodBody": ["METHOD_START", "{", "if    (  ( displayName )     =  =    null )     {", "displayName    =     \" project    \"     +     (  . fullPath ( buildIdentifier ,    projectPath )  )  ;", "}", "return   displayName ;", "}", "METHOD_END"], "methodName": ["getDisplayName"], "fileName": "org.gradle.internal.component.local.model.DefaultProjectComponentIdentifier"}, {"methodBody": ["METHOD_START", "{", "if    ( projectPath . equals (  \"  :  \"  )  )     {", "return   build . getName (  )  ;", "}", "int   index    =    projectPath . lastIndexOf (  '  :  '  )  ;", "return   projectPath . substring (  ( index    +     1  )  )  ;", "}", "METHOD_END"], "methodName": ["getProjectName"], "fileName": "org.gradle.internal.component.local.model.DefaultProjectComponentIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   projectPath ;", "}", "METHOD_END"], "methodName": ["getProjectPath"], "fileName": "org.gradle.internal.component.local.model.DefaultProjectComponentIdentifier"}, {"methodBody": ["METHOD_START", "{", "BuildIdentifier   buildId    =     (  ( ProjectInternal )     ( project )  )  . getServices (  )  . get ( BuildIdentity . class )  . getCurrentBuild (  )  ;", "return   new    ( buildId ,    project . getPath (  )  )  ;", "}", "METHOD_END"], "methodName": ["newProjectId"], "fileName": "org.gradle.internal.component.local.model.DefaultProjectComponentIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultProjectComponentIdentifier ( buildIdentifier ,    projectPath )  ;", "}", "METHOD_END"], "methodName": ["newProjectId"], "fileName": "org.gradle.internal.component.local.model.DefaultProjectComponentIdentifier"}, {"methodBody": ["METHOD_START", "{", "BuildIdentifier   buildIdentifier    =    new   DefaultBuildIdentifier ( build . getName (  )  )  ;", "return   new    ( buildIdentifier ,    projectPath )  ;", "}", "METHOD_END"], "methodName": ["newProjectId"], "fileName": "org.gradle.internal.component.local.model.DefaultProjectComponentIdentifier"}, {"methodBody": ["METHOD_START", "{", "if    (  \"  :  \"  . equals ( buildName )  )     {", "return    \" p    \"     +    pPath ;", "}", "return    (  \" p    :  \"     +    buildName )     +    pPath ;", "}", "METHOD_END"], "methodName": ["createDisplayName"], "fileName": "org.gradle.internal.component.local.model.DefaultProjectComponentSelector"}, {"methodBody": ["METHOD_START", "{", "return   displayName ;", "}", "METHOD_END"], "methodName": ["getDisplayName"], "fileName": "org.gradle.internal.component.local.model.DefaultProjectComponentSelector"}, {"methodBody": ["METHOD_START", "{", "return   projectPath ;", "}", "METHOD_END"], "methodName": ["getProjectPath"], "fileName": "org.gradle.internal.component.local.model.DefaultProjectComponentSelector"}, {"methodBody": ["METHOD_START", "{", "assert   identifier    !  =    null    :     \" identifier   cannot   be   null \"  ;", "if    ( identifier   instanceof   Identifier )     {", "Identifier   projectComponentIdentifier    =     (  ( Identifier )     ( identifier )  )  ;", "return    ( Objects . equal ( buildName ,    projectComponentIdentifier . getBuild (  )  . getName (  )  )  )     &  &     ( Objects . equal ( projectPath ,    projectComponentIdentifier . getProjectPath (  )  )  )  ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["matchesStrictly"], "fileName": "org.gradle.internal.component.local.model.DefaultProjectComponentSelector"}, {"methodBody": ["METHOD_START", "{", "BuildIdentifier   buildId    =     (  ( ProjectInternal )     ( project )  )  . getServices (  )  . get ( BuildIdentity . class )  . getCurrentBuild (  )  ;", "return   new    ( buildId . getName (  )  ,    project . getPath (  )  )  ;", "}", "METHOD_END"], "methodName": ["newSelector"], "fileName": "org.gradle.internal.component.local.model.DefaultProjectComponentSelector"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultProjectComponentSelector ( build . getName (  )  ,    projectPath )  ;", "}", "METHOD_END"], "methodName": ["newSelector"], "fileName": "org.gradle.internal.component.local.model.DefaultProjectComponentSelector"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultProjectComponentSelector ( projectId . getBuild (  )  . getName (  )  ,    projectId . getProjectPath (  )  )  ;", "}", "METHOD_END"], "methodName": ["newSelector"], "fileName": "org.gradle.internal.component.local.model.DefaultProjectComponentSelector"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultProjectComponentSelector ( build . getName (  )  ,    projectPath )  ;", "}", "METHOD_END"], "methodName": ["newSelector"], "fileName": "org.gradle.internal.component.local.model.DefaultProjectComponentSelector"}, {"methodBody": ["METHOD_START", "{", "return   DefaultProjectComponentSelector . newSelector ( build ,    selector . getProjectPath (  )  )  ;", "}", "METHOD_END"], "methodName": ["newSelector"], "fileName": "org.gradle.internal.component.local.model.DefaultProjectComponentSelector"}, {"methodBody": ["METHOD_START", "{", "return   componentIdentifier ;", "}", "METHOD_END"], "methodName": ["getComponentIdentifier"], "fileName": "org.gradle.internal.component.local.model.MissingLocalArtifactMetadata"}, {"methodBody": ["METHOD_START", "{", "return    (  (  ( name )     +     \"     (  \"  )     +     ( componentIdentifier . getDisplayName (  )  )  )     +     \"  )  \"  ;", "}", "METHOD_END"], "methodName": ["getDisplayName"], "fileName": "org.gradle.internal.component.local.model.MissingLocalArtifactMetadata"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.internal.component.local.model.MissingLocalArtifactMetadata"}, {"methodBody": ["METHOD_START", "{", "return   displayName ;", "}", "METHOD_END"], "methodName": ["getDisplayName"], "fileName": "org.gradle.internal.component.local.model.OpaqueComponentIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   componentIdentifier ;", "}", "METHOD_END"], "methodName": ["getComponentIdentifier"], "fileName": "org.gradle.internal.component.local.model.PublishArtifactLocalArtifactMetadata"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   result    =    new   StringBuilder (  )  ;", "result . append ( getName (  )  )  ;", "result . append (  \"     (  \"  )  . append ( Identifier . getDisplayName (  )  )  . append (  \"  )  \"  )  ;", "return   result . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getDisplayName"], "fileName": "org.gradle.internal.component.local.model.PublishArtifactLocalArtifactMetadata"}, {"methodBody": ["METHOD_START", "{", "return   TestComponentIdentifiers . newProjectId (  \"  :  \"  ,    projectPath )  ;", "}", "METHOD_END"], "methodName": ["newProjectId"], "fileName": "org.gradle.internal.component.local.model.TestComponentIdentifiers"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultProjectComponentIdentifier ( new   DefaultBuildIdentifier ( buildName )  ,    projectPath )  ;", "}", "METHOD_END"], "methodName": ["newProjectId"], "fileName": "org.gradle.internal.component.local.model.TestComponentIdentifiers"}, {"methodBody": ["METHOD_START", "{", "return   TestComponentIdentifiers . newSelector (  \"  :  \"  ,    projectPath )  ;", "}", "METHOD_END"], "methodName": ["newSelector"], "fileName": "org.gradle.internal.component.local.model.TestComponentIdentifiers"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultProjectComponentSelector ( buildName ,    projectPath )  ;", "}", "METHOD_END"], "methodName": ["newSelector"], "fileName": "org.gradle.internal.component.local.model.TestComponentIdentifiers"}, {"methodBody": ["METHOD_START", "{", "List <  ?    extends   ConfigurationMetadata >    consumableConfigurations    =    targetComponent . getVariantsForGraphTraversal (  )  ;", "AttributesSchemaInternal   producerAttributeSchema    =    targetComponent . getAttributesSchema (  )  ;", "AttributeMatcher   attributeMatcher    =    consumerSchema . withProducer ( producerAttributeSchema )  ;", "ConfigurationMetadata   fallbackConfiguration    =    targetComponent . getConfiguration ( DEFAULT _ CONFIGURATION )  ;", "if    (  ( fallbackConfiguration    !  =    null )     &  &     (  !  ( fallbackConfiguration . isCanBeConsumed (  )  )  )  )     {", "fallbackConfiguration    =    null ;", "}", "List < ConfigurationMetadata >    matches    =    attributeMatcher . matches ( consumableConfigurations ,    consumerAttributes ,    fallbackConfiguration )  ;", "if    (  ( matches . size (  )  )     =  =     1  )     {", "return   matches . get (  0  )  ;", "} else", "if    (  !  ( matches . isEmpty (  )  )  )     {", "throw   new   AmbiguousConfigurationSelectionException ( consumerAttributes ,    attributeMatcher ,    matches ,    targetComponent )  ;", "} else    {", "throw   new   NoMatchingConfigurationSelectionException ( consumerAttributes ,    attributeMatcher ,    targetComponent )  ;", "}", "}", "METHOD_END"], "methodName": ["selectConfigurationUsingAttributeMatching"], "fileName": "org.gradle.internal.component.model.AttributeConfigurationSelector"}, {"methodBody": ["METHOD_START", "{", "actions . add ( action )  ;", "}", "METHOD_END"], "methodName": ["addCapabilitiesAction"], "fileName": "org.gradle.internal.component.model.CapabilitiesRules"}, {"methodBody": ["METHOD_START", "{", "for    ( VariantMetadataRules . VariantAction <  ?    super   MutableCapabilitiesMetadata >    action    :    actions )     {", "action . maybeExecute ( variant ,    capabilities )  ;", "}", "return   capabilities . asImmutable (  )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.internal.component.model.CapabilitiesRules"}, {"methodBody": ["METHOD_START", "{", "if    (  ( requested . isEmpty (  )  )     |  |     ( candidate . isEmpty (  )  )  )     {", "return   true ;", "}", "Immutables   requesteds    =    requested . asImmutable (  )  ;", "Immutables   candidates    =    candidate . asImmutable (  )  ;", "for    (  <  ?  >    attribute    :    requesteds . keySet (  )  )     {", "Value <  ?  >    requestedValue    =    requesteds . findEntry ( attribute )  ;", "Value <  ?  >    candidateValue    =    candidates . findEntry ( attribute . getName (  )  )  ;", "if    ( candidateValue . isPresent (  )  )     {", "Object   coercedValue    =    candidateValue . coerce ( attribute )  ;", "boolean   match    =    schema . matchValue ( attribute ,    requestedValue . get (  )  ,    coercedValue )  ;", "if    (  ! match )     {", "return   false ;", "}", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["isMatching"], "fileName": "org.gradle.internal.component.model.ComponentAttributeMatcher"}, {"methodBody": ["METHOD_START", "{", "if    (  ( candidates . size (  )  )     =  =     0  )     {", "if    (  ( fallback    !  =    null )     &  &     ( isMatching ( schema ,     (  ( AttributeContainerInternal )     ( fallback . getAttributes (  )  )  )  ,    requested )  )  )     {", "if    (  . LOGGER . isDebugEnabled (  )  )     {", ". LOGGER . debug (  \" No   candidates   for    {  }  ,    selected   matching   fallback    {  }  \"  ,    requested ,    fallback )  ;", "}", "return   ImmutableList . of ( fallback )  ;", "}", "if    (  . LOGGER . isDebugEnabled (  )  )     {", ". LOGGER . debug (  \" No   candidates   for    {  }    and   fallback    {  }    does   not   match .    Select   nothing .  \"  ,    requested ,    fallback )  ;", "}", "return   ImmutableList . of (  )  ;", "}", "if    (  ( candidates . size (  )  )     =  =     1  )     {", "T   candidate    =    candidates . iterator (  )  . next (  )  ;", "if    ( isMatching ( schema ,     (  ( AttributeContainerInternal )     ( candidate . getAttributes (  )  )  )  ,    requested )  )     {", "if    (  . LOGGER . isDebugEnabled (  )  )     {", ". LOGGER . debug (  \" Selected   match    {  }    from   candidates    {  }    for    {  }  \"  ,    candidate ,    candidates ,    requested )  ;", "}", "return   Collections . singletonList ( candidate )  ;", "}", "if    (  . LOGGER . isDebugEnabled (  )  )     {", ". LOGGER . debug (  \" Selected   match    [  ]    from   candidates    {  }    for    {  }  \"  ,    candidates ,    requested )  ;", "}", "return   ImmutableList . of (  )  ;", "}", "ImmutableAttributes   requestedAttributes    =    requested . asImmutable (  )  ;", "List < T >    matches    =    new   MultipleCandidateMatcher < T >  ( schema ,    candidates ,    requestedAttributes )  . getMatches (  )  ;", "if    (  . LOGGER . isDebugEnabled (  )  )     {", ". LOGGER . debug (  \" Selected   matches    {  }    from   candidates    {  }    for    {  }  \"  ,    matches ,    candidates ,    requested )  ;", "}", "return   matches ;", "}", "METHOD_END"], "methodName": ["match"], "fileName": "org.gradle.internal.component.model.ComponentAttributeMatcher"}, {"methodBody": ["METHOD_START", "{", "assert   done ;", "return   cle ;", "}", "METHOD_END"], "methodName": ["isCompatible"], "fileName": "org.gradle.internal.component.model.DefaultCompatibilityCheckResult"}, {"methodBody": ["METHOD_START", "{", "if    ( dependencyMetadata   instanceof   DslOriginDependencyMetadata )     {", "Dependency   source    =     (  ( DslOriginDependencyMetadata )     ( dependencyMetadata )  )  . getSource (  )  ;", "if    ( source   instanceof   ClientModule )     {", "return    (  ( ClientModule )     ( source )  )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["extractClientModule"], "fileName": "org.gradle.internal.component.model.DefaultComponentOverrideMetadata"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultComponentOverrideMetadata ( dependencyMetadata . isChanging (  )  ,    dependencyMetadata . getArtifacts (  )  ,    DefaultComponentOverrideMetadata . extractClientModule ( dependencyMetadata )  )  ;", "}", "METHOD_END"], "methodName": ["forDependency"], "fileName": "org.gradle.internal.component.model.DefaultComponentOverrideMetadata"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    file . getName (  )  ;", "String   name    =    Files . getNameWithoutExtension ( fileName )  ;", "String   extension    =    Files . getFileExtension ( fileName )  ;", "return   new    ( name ,    extension ,    extension ,    classifier )  ;", "}", "METHOD_END"], "methodName": ["forFile"], "fileName": "org.gradle.internal.component.model.DefaultIvyArtifactName"}, {"methodBody": ["METHOD_START", "{", "String   name    =    publishArtifact . getName (  )  ;", "if    ( name    =  =    null )     {", "name    =    publishArtifact . getFile (  )  . getName (  )  ;", "}", "String   classifier    =    GUtil . elvis ( publishArtifact . getClassifier (  )  ,    null )  ;", "return   new    ( name ,    publishArtifact . getType (  )  ,    publishArtifact . getExtension (  )  ,    classifier )  ;", "}", "METHOD_END"], "methodName": ["forPublishArtifact"], "fileName": "org.gradle.internal.component.model.DefaultIvyArtifactName"}, {"methodBody": ["METHOD_START", "{", "return   classifier ;", "}", "METHOD_END"], "methodName": ["getClassifier"], "fileName": "org.gradle.internal.component.model.DefaultIvyArtifactName"}, {"methodBody": ["METHOD_START", "{", "return   extension ;", "}", "METHOD_END"], "methodName": ["getExtension"], "fileName": "org.gradle.internal.component.model.DefaultIvyArtifactName"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.internal.component.model.DefaultIvyArtifactName"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.gradle.internal.component.model.DefaultIvyArtifactName"}, {"methodBody": ["METHOD_START", "{", "assert    ( matches )     !  =    null ;", "return   matches ;", "}", "METHOD_END"], "methodName": ["getMatches"], "fileName": "org.gradle.internal.component.model.DefaultMultipleCandidateResult"}, {"methodBody": ["METHOD_START", "{", "dependencyActions . add ( action )  ;", "}", "METHOD_END"], "methodName": ["addDependencyAction"], "fileName": "org.gradle.internal.component.model.DependencyMetadataRules"}, {"methodBody": ["METHOD_START", "{", "dependencyConstraintActions . add ( action )  ;", "}", "METHOD_END"], "methodName": ["addDependencyConstraintAction"], "fileName": "org.gradle.internal.component.model.DependencyMetadataRules"}, {"methodBody": ["METHOD_START", "{", "List < T >    calculatedDependencies    =    new   ArrayList < T >  (  )  ;", "calculatedDependencies . addAll ( executeRules ( variant ,    dependencies )  )  ;", "calculatedDependencies . addAll ( executeConstraintRules ( variant ,    dependencies )  )  ;", "return   calculatedDependencies ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.internal.component.model.DependencyMetadataRules"}, {"methodBody": ["METHOD_START", "{", "List < T >    calculatedDependencies    =    new   ArrayList < T >  ( CollectionUtils . filter ( dependencies ,    DependencyMetadataRules . DEPENDENCY _ CONSTRAINT _ FILTER )  )  ;", "for    ( VariantMetadataRules . VariantAction <  ?    super   DependencyConstraintsMetadata >    dependencyConstraintsMetadataAction    :    dependencyConstraintActions )     {", "dependencyConstraintsMetadataAction . maybeExecute ( variant ,    instantiator . newInstance ( DependencyConstraintsMetadataAdapter . class ,    attributesFactory ,    calculatedDependencies ,    instantiator ,    dependencyConstraintNotationParser )  )  ;", "}", "return   calculatedDependencies ;", "}", "METHOD_END"], "methodName": ["executeDependencyConstraintRules"], "fileName": "org.gradle.internal.component.model.DependencyMetadataRules"}, {"methodBody": ["METHOD_START", "{", "List < T >    calculatedDependencies    =    new   ArrayList < T >  ( CollectionUtils . filter ( dependencies ,    DependencyMetadataRules . DEPENDENCY _ FILTER )  )  ;", "for    ( VariantMetadataRules . VariantAction <  ?    super   DirectDependenciesMetadata >    dependenciesMetadataAction    :    dependencyActions )     {", "dependenciesMetadataAction . maybeExecute ( variant ,    instantiator . newInstance ( DirectDependenciesMetadataAdapter . class ,    attributesFactory ,    calculatedDependencies ,    instantiator ,    dependencyNotationParser )  )  ;", "}", "return   calculatedDependencies ;", "}", "METHOD_END"], "methodName": ["executeDependencyRules"], "fileName": "org.gradle.internal.component.model.DependencyMetadataRules"}, {"methodBody": ["METHOD_START", "{", "return   new   LocalComponentDependencyMetadata ( componentId ,    selector ,    moduleConfiguration ,    moduleAttributes ,    dependencyAttributes ,    dependencyConfiguration ,    artifactNames ,    excludes ,    force ,    changing ,    transitive ,    pending ,    reason )  ;", "}", "METHOD_END"], "methodName": ["copyWithReason"], "fileName": "org.gradle.internal.component.model.LocalComponentDependencyMetadata"}, {"methodBody": ["METHOD_START", "{", "return   new   LocalComponentDependencyMetadata ( componentId ,    selector ,    moduleConfiguration ,    moduleAttributes ,    dependencyAttributes ,    dependencyConfiguration ,    artifactNames ,    excludes ,    force ,    changing ,    transitive ,    pending ,    reason )  ;", "}", "METHOD_END"], "methodName": ["copyWithTarget"], "fileName": "org.gradle.internal.component.model.LocalComponentDependencyMetadata"}, {"methodBody": ["METHOD_START", "{", "return   GUtil . elvis ( configuration ,    DEFAULT _ CONFIGURATION )  ;", "}", "METHOD_END"], "methodName": ["getOrDefaultConfiguration"], "fileName": "org.gradle.internal.component.model.LocalComponentDependencyMetadata"}, {"methodBody": ["METHOD_START", "{", "Set < Attribute <  ?  >  >    extraAttributes    =    Sets . newLinkedHashSet (  )  ;", "for    ( ImmutableAttributes   attributes    :    cAttributeSets )     {", "extraAttributes . addAll ( attributes . keySet (  )  )  ;", "}", "extraAttributes . removeAll ( requested . keySet (  )  )  ;", "this . extraAttributes    =    extraAttributes . toArray ( new   Attribute [  0  ]  )  ;", "for    ( int   i    =     0  ;    i    <     ( this . extraAttributes . length )  ;    i +  +  )     {", "Attribute <  ?  >    extraAttribute    =    this . extraAttributes [ i ]  ;", "Attribute <  ?  >    schemaAttribute    =    schema . getAttribute ( extraAttribute . getName (  )  )  ;", "if    ( schemaAttribute    !  =    null )     {", "this . extraAttributes [ i ]     =    schemaAttribute ;", "}", "}", "}", "METHOD_END"], "methodName": ["collectExtraAttributes"], "fileName": "org.gradle.internal.component.model.MultipleCandidateMatcher"}, {"methodBody": ["METHOD_START", "{", "remaining    =    new   BitSet ( candidates . size (  )  )  ;", "remaining . or ( compatible )  ;", "disambiguateWithRequestedAttributes (  )  ;", "if    (  ( remaining . cardinality (  )  )     >     1  )     {", "disambiguateWithExtraAttributes (  )  ;", "}", "return    ( remaining . cardinality (  )  )     =  =     0     ?    gets ( compatible )     :    gets ( remaining )  ;", "}", "METHOD_END"], "methodName": ["disambiguateCompatibleCandidates"], "fileName": "org.gradle.internal.component.model.MultipleCandidateMatcher"}, {"methodBody": ["METHOD_START", "{", "Set < Object >    candidateValues    =    getCandidateValues ( a )  ;", "if    (  ( candidateValues . size (  )  )     =  =     1  )     {", "return ;", "}", "Set < Object >    matches    =    schema . disambiguate ( getAttribute ( a )  ,    getRequestedValue ( a )  ,    candidateValues )  ;", "removsWithValueNotIn ( a ,    matches )  ;", "}", "METHOD_END"], "methodName": ["disambiguateWithAttribute"], "fileName": "org.gradle.internal.component.model.MultipleCandidateMatcher"}, {"methodBody": ["METHOD_START", "{", "collectExtraAttributes (  )  ;", "allAttributes    =     ( requestedAttributes . size (  )  )     +     ( extraAttributes . length )  ;", "for    (    a    =    requestedAttributes . size (  )  ;    a    <    allAttributes ;    a +  +  )     {", "disambiguateWithAttribute ( a )  ;", "if    (  ( remaining . cardinality (  )  )     =  =     0  )     {", "return ;", "}", "}", "}", "METHOD_END"], "methodName": ["disambiguateWithExtraAttributes"], "fileName": "org.gradle.internal.component.model.MultipleCandidateMatcher"}, {"methodBody": ["METHOD_START", "{", "for    ( int   a    =     0  ;    a    <     ( requestedAttributes . size (  )  )  ;    a +  +  )     {", "disambiguateWithAttribute ( a )  ;", "if    (  ( remaining . cardinality (  )  )     =  =     0  )     {", "return ;", "}", "}", "}", "METHOD_END"], "methodName": ["disambiguateWithRequestedAttributes"], "fileName": "org.gradle.internal.component.model.MultipleCandidateMatcher"}, {"methodBody": ["METHOD_START", "{", "for    ( int   a    =     0  ;    a    <     ( requestedAttributes . size (  )  )  ;    a +  +  )     {", "Attribute <  ?  >    attribute    =    requestedAttributes . get ( a )  ;", "AttributeValue <  ?  >    attributeValue    =    requested . findEntry ( attribute )  ;", "setRequestedValue ( a ,     ( attributeValue . isPresent (  )     ?    attributeValue . get (  )     :    null )  )  ;", "}", "}", "METHOD_END"], "methodName": ["fillRequestedValues"], "fileName": "org.gradle.internal.component.model.MultipleCandidateMatcher"}, {"methodBody": ["METHOD_START", "{", "for    ( int   c    =     0  ;    c    <     ( candidates . size (  )  )  ;    c +  +  )     {", "match ( c )  ;", "}", "}", "METHOD_END"], "methodName": ["findCompatibleCandidates"], "fileName": "org.gradle.internal.component.model.MultipleCandidateMatcher"}, {"methodBody": ["METHOD_START", "{", "if    ( a    <     ( requestedAttributes . size (  )  )  )     {", "return   requestedAttributes . get ( a )  ;", "} else    {", "return   extraAttributes [  ( a    -     ( requestedAttributes . size (  )  )  )  ]  ;", "}", "}", "METHOD_END"], "methodName": ["getAttribute"], "fileName": "org.gradle.internal.component.model.MultipleCandidateMatcher"}, {"methodBody": ["METHOD_START", "{", "if    ( a    <     ( requestedAttributes . size (  )  )  )     {", "return   requestedAttributeValues [ getValueIndex ( c ,    a )  ]  ;", "} else    {", "Attribute <  ?  >    extraAttribute    =    getAttribute ( a )  ;", "AttributeValue   attributeValue    =    cAttributeSets [ c ]  . findEntry ( extraAttribute . getName (  )  )  ;", "return   attributeValue . isPresent (  )     ?    attributeValue . coerce ( extraAttribute )     :    null ;", "}", "}", "METHOD_END"], "methodName": ["getCandidateValue"], "fileName": "org.gradle.internal.component.model.MultipleCandidateMatcher"}, {"methodBody": ["METHOD_START", "{", "Set < Object >    candidateValues    =    Sets . newHashSetWithExpectedSize ( compatible . cardinality (  )  )  ;", "for    ( int   c    =    compatible . nextSetBit (  0  )  ;    c    >  =     0  ;    c    =    compatible . nextSetBit (  ( c    +     1  )  )  )     {", "candidateValues . add ( getValue ( c ,    a )  )  ;", "}", "return   candidateValues ;", "}", "METHOD_END"], "methodName": ["getCandidateValues"], "fileName": "org.gradle.internal.component.model.MultipleCandidateMatcher"}, {"methodBody": ["METHOD_START", "{", "if    (  ( liveSet . cardinality (  )  )     =  =     0  )     {", "return   Collections . emptyList (  )  ;", "}", "if    (  ( liveSet . cardinality (  )  )     =  =     1  )     {", "return   Collections . singletonList ( this . cs . get ( liveSet . nextSetBit (  0  )  )  )  ;", "}", "ImmutableList . Builder < T >    builder    =    ImmutableList . builder (  )  ;", "for    ( int   c    =    liveSet . nextSetBit (  0  )  ;    c    >  =     0  ;    c    =    liveSet . nextSetBit (  ( c    +     1  )  )  )     {", "builder . add ( this . cs . get ( c )  )  ;", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["getCandidates"], "fileName": "org.gradle.internal.component.model.MultipleCandidateMatcher"}, {"methodBody": ["METHOD_START", "{", "fillRequestedValues (  )  ;", "findCompatibs (  )  ;", "if    (  ( compatible . cardinality (  )  )     <  =     1  )     {", "return   getCandidates ( compatible )  ;", "}", "if    ( longestMatchIsSuperSetOfAllOthers (  )  )     {", "return   Collections . singletonList ( candidates . get ( candidateWithLongestMatch )  )  ;", "}", "return   disambiguateCompatibs (  )  ;", "}", "METHOD_END"], "methodName": ["getMatches"], "fileName": "org.gradle.internal.component.model.MultipleCandidateMatcher"}, {"methodBody": ["METHOD_START", "{", "if    ( a    <     ( requestedAttributes . size (  )  )  )     {", "return   requestedAttributeValues [ a ]  ;", "} else    {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["getRequestedValue"], "fileName": "org.gradle.internal.component.model.MultipleCandidateMatcher"}, {"methodBody": ["METHOD_START", "{", "return    (  (  1     +    c )     *     ( requestedAttributes . size (  )  )  )     +    a ;", "}", "METHOD_END"], "methodName": ["getValueIndex"], "fileName": "org.gradle.internal.component.model.MultipleCandidateMatcher"}, {"methodBody": ["METHOD_START", "{", "for    ( int   c    =    compatible . nextSetBit (  0  )  ;    c    >  =     0  ;    c    =    compatible . nextSetBit (  ( c    +     1  )  )  )     {", "if    ( c    =  =     ( candidateWithLongestMatch )  )     {", "continue ;", "}", "int   lengthOfOtherMatch    =     0  ;", "for    ( int   a    =     0  ;    a    <     ( requestedAttributes . size (  )  )  ;    a +  +  )     {", "if    (  ( getValue ( c ,    a )  )     =  =    null )     {", "continue ;", "}", "lengthOfOtherMatch +  +  ;", "if    (  ( getValue ( candidateWithLongestMatch ,    a )  )     =  =    null )     {", "return   false ;", "}", "}", "if    ( lengthOfOtherMatch    =  =     ( lengthOfLongestMatch )  )     {", "return   false ;", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["longestMatchIsSuperSetOfAllOthers"], "fileName": "org.gradle.internal.component.model.MultipleCandidateMatcher"}, {"methodBody": ["METHOD_START", "{", "int   matchLength    =     0  ;", "for    ( int   a    =     0  ;    a    <     ( requestedAttributes . size (  )  )  ;    a +  +  )     {", ". MatchResult   result    =    recordAndMatchCandidateValue ( c ,    a )  ;", "if    ( result    =  =     (  . MatchResult . NO _ MATCH )  )     {", "compatible . clear ( c )  ;", "return ;", "}", "if    ( result    =  =     (  . MatchResult . MATCH )  )     {", "matchLength +  +  ;", "}", "}", "if    ( matchLength    >     ( lengthOfLongestMatch )  )     {", "lengthOfLongestMatch    =    matchLength ;", "candidateWithLongestMatch    =    c ;", "}", "}", "METHOD_END"], "methodName": ["matchCandidate"], "fileName": "org.gradle.internal.component.model.MultipleCandidateMatcher"}, {"methodBody": ["METHOD_START", "{", "Object   requestedValue    =    getRequestedValue ( a )  ;", "Attribute <  ?  >    attribute    =    requestedAttributes . get ( a )  ;", "AttributeValue <  ?  >    candidateValue    =    candidateAttributeSets [ c ]  . findEntry ( attribute . getName (  )  )  ;", "if    (  !  ( candidateValue . isPresent (  )  )  )     {", "setCandidateValue ( c ,    a ,    null )  ;", "return    . MatchResult . MISSING ;", "}", "Object   coercedValue    =    candidateValue . coerce ( attribute )  ;", "setCandidateValue ( c ,    a ,    coercedValue )  ;", "return   schema . matchValue ( attribute ,    requestedValue ,    coercedValue )     ?     . MatchResult . MATCH    :     . MatchResult . NO _ MATCH ;", "}", "METHOD_END"], "methodName": ["recordAndMatchCandidateValue"], "fileName": "org.gradle.internal.component.model.MultipleCandidateMatcher"}, {"methodBody": ["METHOD_START", "{", "for    ( int   c    =    remaining . nextSetBit (  0  )  ;    c    >  =     0  ;    c    =    remaining . nextSetBit (  ( c    +     1  )  )  )     {", "if    (  !  ( matchedValues . contains ( getValue ( c ,    a )  )  )  )     {", "remaining . clear ( c )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["removeCandidatesWithValueNotIn"], "fileName": "org.gradle.internal.component.model.MultipleCandidateMatcher"}, {"methodBody": ["METHOD_START", "{", "requestedAttributeValues [ getValueIndex ( c ,    a )  ]     =    value ;", "}", "METHOD_END"], "methodName": ["setCandidateValue"], "fileName": "org.gradle.internal.component.model.MultipleCandidateMatcher"}, {"methodBody": ["METHOD_START", "{", "requestedAttributeValues [ a ]     =    value ;", "}", "METHOD_END"], "methodName": ["setRequestedValue"], "fileName": "org.gradle.internal.component.model.MultipleCandidateMatcher"}, {"methodBody": ["METHOD_START", "{", "actions . add ( action )  ;", "}", "METHOD_END"], "methodName": ["addAttributesAction"], "fileName": "org.gradle.internal.component.model.VariantAttributesRules"}, {"methodBody": ["METHOD_START", "{", "if    ( attributes    =  =    null )     {", "attributes    =    attributesFactory . mutable (  )  ;", "} else    {", "attributes    =    attributesFactory . mutable ( attributes )  ;", "}", "for    ( VariantMetadataRules . VariantAction <  ?    super   AttributeContainer >    action    :    actions )     {", "action . maybeExecute ( variant ,    attributes )  ;", "}", "return   attributes . asImmutable (  )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.internal.component.model.VariantAttributesRules"}, {"methodBody": ["METHOD_START", "{", "List < String >    modules    =    Lists . newArrayListWithCapacity ( resolvedComponents . size (  )  )  ;", "for    ( ModuleComponentIdentifier   identifier    :    resolvedComponents )     {", "modules . add ( converter . convertToLockNotation ( identifier )  )  ;", "}", "Collections . sort ( modules )  ;", ". LOGGER . debug (  \" Found   the   following   modules :  \\ n \\ t {  }  \"  ,    modules )  ;", "return   modules ;", "}", "METHOD_END"], "methodName": ["getModulesOrdered"], "fileName": "org.gradle.internal.locking.DefaultDependencyLockingProvider"}, {"methodBody": ["METHOD_START", "{", "dependencyLockingProvider . persistResolvedDependencies ( configurationName ,    allResolvedModules )  ;", "}", "METHOD_END"], "methodName": ["complete"], "fileName": "org.gradle.internal.locking.DependencyLockingArtifactVisitor"}, {"methodBody": ["METHOD_START", "{", "List < String >    errors    =    Lists . newArrayListWithCapacity (  (  ( notResolvedConstraints . size (  )  )     +     ( extraModules . size (  )  )  )  )  ;", "for    ( String   notResolvedConstraint    :    notResolvedConstraints )     {", "errors . add (  (  (  \" Did   not   resolve    '  \"     +    notResolvedConstraint )     +     \"  '    which   is   part   of   the      state \"  )  )  ;", "}", "for    ( String   extraModule    :    extraModules )     {", "errors . add (  (  (  \" Resolved    '  \"     +    extraModule )     +     \"  '    which   is   not   part   of   the      state \"  )  )  ;", "}", "throw   LockOutOfDateException . createLockOutOfDateException ( configurationName ,    errors )  ;", "}", "METHOD_END"], "methodName": ["throwLockOutOfDateException"], "fileName": "org.gradle.internal.locking.DependencyLockingArtifactVisitor"}, {"methodBody": ["METHOD_START", "{", "int   groupNameSeparatorIndex    =    module . indexOf (  '  :  '  )  ;", "int   nameVersionSeparatorIndex    =    module . lastIndexOf (  '  :  '  )  ;", "if    (  ( groupNameSeparatorIndex    <     0  )     |  |     ( nameVersionSeparatorIndex    =  =    groupNameSeparatorIndex )  )     {", "throw   new   IllegalArgumentException (  (  (  \" The   module   notation   does   not   respect   the   lock   file   format   of    ' group : name : version '     -    received    '  \"     +    module )     +     \"  '  \"  )  )  ;", "}", "DefaultConstraint   constraint    =    DefaultConstraint . strictConstraint ( module . substring (  0  ,    groupNameSeparatorIndex )  ,    module . substring (  ( groupNameSeparatorIndex    +     1  )  ,    nameVersionSeparatorIndex )  ,    module . substring (  ( nameVersionSeparatorIndex    +     1  )  )  )  ;", "constraint . because (  (  \" dependency   was   locked   to   version    \"     +     ( constraint . getVersion (  )  )  )  )  ;", "return   constraint ;", "}", "METHOD_END"], "methodName": ["convertToDependencyConstraint"], "fileName": "org.gradle.internal.locking.DependencyLockingNotationConverter"}, {"methodBody": ["METHOD_START", "{", "return   id . getDisplayName (  )  ;", "}", "METHOD_END"], "methodName": ["convertToLockNotation"], "fileName": "org.gradle.internal.locking.DependencyLockingNotationConverter"}, {"methodBody": ["METHOD_START", "{", "Iterator < String >    iterator    =    lines . iterator (  )  ;", "while    ( iterator . hasNext (  )  )     {", "String   value    =    iterator . next (  )  . trim (  )  ;", "if    (  ( value . startsWith (  \"  #  \"  )  )     |  |     ( value . isEmpty (  )  )  )     {", "iterator . remove (  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["filterNonModuleLines"], "fileName": "org.gradle.internal.locking.LockFileReaderWriter"}, {"methodBody": ["METHOD_START", "{", "try    {", "Path   lockFile    =    lockFilesRoot . resolve (  ( configurationName    +     (  . FILE _ SUFFIX )  )  )  ;", "if    ( Files . exists ( lockFile )  )     {", "List < String >    lines    =    Files . readAllLines ( lockFile ,     . CHARSET )  ;", "filterNonModuleLines ( lines )  ;", "return   lines ;", "} else    {", "return   null ;", "}", "}    catch    ( IOException   e )     {", "throw   new   RuntimeException (  \" Unable   to   load   lock   file \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["readLockFile"], "fileName": "org.gradle.internal.locking.LockFileReaderWriter"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( Files . exists ( lockFilesRoot )  )  )     {", "try    {", "Files . createDirectories ( lockFilesRoot )  ;", "}    catch    ( IOException   e )     {", "throw   new   RuntimeException (  \" Issue   creating   dependency - lock   directory \"  ,    e )  ;", "}", "}", "StringBuilder   builder    =    new   StringBuilder (  . LOCKFILE _ HEADER )  ;", "for    ( String   module    :    resolvedModules )     {", "builder . append ( module )  . append (  \"  \\ n \"  )  ;", "}", "try    {", "Files . write ( lockFilesRoot . resolve (  ( configurationName    +     (  . FILE _ SUFFIX )  )  )  ,    builder . toString (  )  . getBytes (  . CHARSET )  )  ;", "}    catch    ( IOException   e )     {", "throw   new   RuntimeException (  \" Unable   to   write   lock   file \"  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["writeLockFile"], "fileName": "org.gradle.internal.locking.LockFileReaderWriter"}, {"methodBody": ["METHOD_START", "{", "TreeFormatter   treeFormatter    =    new   TreeFormatter (  )  ;", "treeFormatter . node (  (  (  \" Dependency   lock   state   for   configuration    '  \"     +    configurationName )     +     \"  '    is   out   of   date :  \"  )  )  ;", "treeFormatter . startChildren (  )  ;", "for    ( String   error    :    errors )     {", "treeFormatter . node ( error )  ;", "}", "treeFormatter . endChildren (  )  ;", "return   new    ( treeFormatter . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["createLockOutOfDateException"], "fileName": "org.gradle.internal.locking.LockOutOfDateException"}, {"methodBody": ["METHOD_START", "{", "return   NoOpDependencyLockingProvider . INSTANCE ;", "}", "METHOD_END"], "methodName": ["getInstance"], "fileName": "org.gradle.internal.locking.NoOpDependencyLockingProvider"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   builder    =    new   StringBuilder (  )  ;", "builder . append ( String . format (  \" Could   not   find    % s .  \"  ,    a . getDisplayName (  )  )  )  ;", "if    (  !  ( locations . isEmpty (  )  )  )     {", "builder . append ( String . format (  \"  % nSearched   in   the   following   locations :  \"  )  )  ;", "for    ( String   location    :    locations )     {", "builder . append ( String . format (  \"  % n             % s \"  ,    location . replace (  \"  %  \"  ,     \"  %  %  \"  )  )  )  ;", "}", "}", "return   builder . toString (  )  ;", "}", "METHOD_END"], "methodName": ["format"], "fileName": "org.gradle.internal.resolve.ArtifactNotFoundException"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   builder    =    new   StringBuilder (  )  ;", "builder . append (  \" Could   not   download    \"  )  ;", "builder . append ( a . getDisplayName (  )  )  ;", "if    ( GUtil . isTrue ( message )  )     {", "builder . append (  \"  :     \"  )  ;", "builder . append ( message )  ;", "}", "return   builder . toString (  )  ;", "}", "METHOD_END"], "methodName": ["format"], "fileName": "org.gradle.internal.resolve.ArtifactResolveException"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   builder    =    new   StringBuilder (  )  ;", "builder . append (  \" Could   not   determine   as   for    \"  )  ;", "builder . append ( component . getDisplayName (  )  )  ;", "if    ( GUtil . isTrue ( message )  )     {", "builder . append (  \"  :     \"  )  ;", "builder . append ( message )  ;", "}", "return   builder . toString (  )  ;", "}", "METHOD_END"], "methodName": ["format"], "fileName": "org.gradle.internal.resolve.ArtifactResolveException"}, {"methodBody": ["METHOD_START", "{", "if    ( locations . isEmpty (  )  )     {", "return ;", "}", "builder . append ( String . format (  \"  % nSearched   in   the   following   locations :  \"  )  )  ;", "for    ( String   location    :    locations )     {", "builder . append ( String . format (  \"  % n             % s \"  ,    location )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addLocations"], "fileName": "org.gradle.internal.resolve.ModuleVersionNotFoundException"}, {"methodBody": ["METHOD_START", "{", "Iterator < String >    iterator    =    values . iterator (  )  ;", "int   count    =    Math . min (  5  ,    values . size (  )  )  ;", "for    ( int   i    =     0  ;    i    <    count ;    i +  +  )     {", "builder . append ( String . format (  \"  % n             % s \"  ,    iterator . next (  )  )  )  ;", "}", "if    ( count    <     ( values . size (  )  )  )     {", "builder . append ( String . format (  \"  % n             +     % d   more \"  ,     (  ( values . size (  )  )     -    count )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["appendSizeLimited"], "fileName": "org.gradle.internal.resolve.ModuleVersionNotFoundException"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   builder    =    new   StringBuilder (  )  ;", "builder . append ( String . format (  \" Could   not   find    % s .  \"  ,    id )  )  ;", ". addLocations ( builder ,    locations )  ;", "return   builder . toString (  )  ;", "}", "METHOD_END"], "methodName": ["format"], "fileName": "org.gradle.internal.resolve.ModuleVersionNotFoundException"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   builder    =    new   StringBuilder (  )  ;", "builder . append ( String . format (  \" Could   not   find   any   version   that   matches    % s .  \"  ,    selector )  )  ;", ". addLocations ( builder ,    locations )  ;", "return   builder . toString (  )  ;", "}", "METHOD_END"], "methodName": ["format"], "fileName": "org.gradle.internal.resolve.ModuleVersionNotFoundException"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   builder    =    new   StringBuilder (  )  ;", "if    (  ( unmatchedVersions . isEmpty (  )  )     &  &     ( rejectedVersions . isEmpty (  )  )  )     {", "builder . append ( String . format (  \" Could   not   find   any   matches   for    % s   as   no   versions   of    % s :  % s   are   available .  \"  ,    selector ,    selector . getGroup (  )  ,    selector . getModule (  )  )  )  ;", "} else    {", "builder . append ( String . format (  \" Could   not   find   any   version   that   matches    % s .  \"  ,    selector )  )  ;", "if    (  !  ( unmatchedVersions . isEmpty (  )  )  )     {", "builder . append ( String . format (  \"  % nVersions   that   do   not   match :  \"  )  )  ;", ". appendSizeLimited ( builder ,    unmatchedVersions )  ;", "}", "if    (  !  ( rejectedVersions . isEmpty (  )  )  )     {", "builder . append ( String . format (  \"  % nVersions   rejected   by   component   selection   rules :  \"  )  )  ;", ". appendSizeLimited ( builder ,    rejectedVersions )  ;", "}", "}", ". addLocations ( builder ,    locations )  ;", "return   builder . toString (  )  ;", "}", "METHOD_END"], "methodName": ["format"], "fileName": "org.gradle.internal.resolve.ModuleVersionNotFoundException"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   getClass (  )  . getConstructor ( ComponentSelector . class ,    String . class )  . newInstance ( selector ,    getMessage (  )  )  ;", "}    catch    (    e )     {", "throw   Unchecked . throwAsUnchecked ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["createCopy"], "fileName": "org.gradle.internal.resolve.ModuleVersionResolveException"}, {"methodBody": ["METHOD_START", "{", "return   String . format ( messageFormat ,    selector . getDisplayName (  )  )  ;", "}", "METHOD_END"], "methodName": ["format"], "fileName": "org.gradle.internal.resolve.ModuleVersionResolveException"}, {"methodBody": ["METHOD_START", "{", "return   selector ;", "}", "METHOD_END"], "methodName": ["getSelector"], "fileName": "org.gradle.internal.resolve.ModuleVersionResolveException"}, {"methodBody": ["METHOD_START", "{", "return   identifier . getDisplayName (  )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.gradle.internal.resolve.ModuleVersionResolveException"}, {"methodBody": ["METHOD_START", "{", "ModuleVersionResolveException   copy    =    createCopy (  )  ;", "copy . paths . addAll ( paths )  ;", "copy . initCauses ( getCauses (  )  )  ;", "copy . setStackTrace ( getStackTrace (  )  )  ;", "return   copy ;", "}", "METHOD_END"], "methodName": ["withIncomingPaths"], "fileName": "org.gradle.internal.resolve.ModuleVersionResolveException"}, {"methodBody": ["METHOD_START", "{", "for    ( Throwable   failure    :    failures )     {", "if    (  . isCriticalFailure ( failure )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["hasCriticalFailure"], "fileName": "org.gradle.internal.resolve.ResolveExceptionAnalyzer"}, {"methodBody": ["METHOD_START", "{", "Throwable   rootCause    =    ExceptionUtils . getRootCause ( throwable )  ;", "return    (  . isTimeoutException ( rootCause )  )     |  |     (  . isUnrecoverable 5 xxStatusCode ( rootCause )  )  ;", "}", "METHOD_END"], "methodName": ["isCriticalFailure"], "fileName": "org.gradle.internal.resolve.ResolveExceptionAnalyzer"}, {"methodBody": ["METHOD_START", "{", "return   rootCause   instanceof   InterruptedIOException ;", "}", "METHOD_END"], "methodName": ["isTimeoutException"], "fileName": "org.gradle.internal.resolve.ResolveExceptionAnalyzer"}, {"methodBody": ["METHOD_START", "{", "return    ( rootCause   instanceof   HttpErrorStatusCodeException )     &  &     (  (  ( HttpErrorStatusCodeException )     ( rootCause )  )  . isServerError (  )  )  ;", "}", "METHOD_END"], "methodName": ["isUnrecoverable5xxStatusCode"], "fileName": "org.gradle.internal.resolve.ResolveExceptionAnalyzer"}, {"methodBody": ["METHOD_START", "{", "failed ( new   ArtifactNotFoundException ( artifact ,    getAttempted (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["notFound"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableArtifactResolveResult"}, {"methodBody": ["METHOD_START", "{", "if    (  ( failure )     !  =    null )     {", "throw   failure ;", "}", "if    (  ( id )     =  =    null )     {", "throw   new   IllegalStateException (  \" Not   d .  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertResolved"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableComponentIdResolveResult"}, {"methodBody": ["METHOD_START", "{", "reset (  )  ;", "this . failure    =    failure ;", "}", "METHOD_END"], "methodName": ["failed"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableComponentIdResolveResult"}, {"methodBody": ["METHOD_START", "{", "return   failure ;", "}", "METHOD_END"], "methodName": ["getFailure"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableComponentIdResolveResult"}, {"methodBody": ["METHOD_START", "{", "assertResolved (  )  ;", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableComponentIdResolveResult"}, {"methodBody": ["METHOD_START", "{", "assertResolved (  )  ;", "return   metadata ;", "}", "METHOD_END"], "methodName": ["getMetadata"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableComponentIdResolveResult"}, {"methodBody": ["METHOD_START", "{", "assertResolved (  )  ;", "return   moduleVersionId ;", "}", "METHOD_END"], "methodName": ["getModuleVersionId"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableComponentIdResolveResult"}, {"methodBody": ["METHOD_START", "{", "return    (  ( id )     !  =    null )     |  |     (  ( failure )     !  =    null )  ;", "}", "METHOD_END"], "methodName": ["hasResult"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableComponentIdResolveResult"}, {"methodBody": ["METHOD_START", "{", "failure    =    null ;", "metadata    =    null ;", "id    =    null ;", "moduleVersionId    =    null ;", "rejected    =    false ;", "}", "METHOD_END"], "methodName": ["reset"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableComponentIdResolveResult"}, {"methodBody": ["METHOD_START", "{", "reset (  )  ;", "this . id    =    id ;", "this . moduleVersionId    =    moduleVersionIdentifier ;", "}", "METHOD_END"], "methodName": ["resolved"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableComponentIdResolveResult"}, {"methodBody": ["METHOD_START", "{", "resolved ( metadata . getId (  )  ,    metadata . getModuleVersionId (  )  )  ;", "this . metadata    =    metadata ;", "}", "METHOD_END"], "methodName": ["resolved"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableComponentIdResolveResult"}, {"methodBody": ["METHOD_START", "{", "super . applyTo ( idResolve )  ;", "if    (  ( failure )     !  =    null )     {", "idResolve . failed ( failure )  ;", "}", "if    (  ( metadata )     !  =    null )     {", "idRolved ( metadata )  ;", "}", "}", "METHOD_END"], "methodName": ["applyTo"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableComponentResolveResult"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( hasResult (  )  )  )     {", "throw   new   IllegalStateException (  \" No   result   has   been   specified .  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertHasResult"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableComponentResolveResult"}, {"methodBody": ["METHOD_START", "{", "assertHasResult (  )  ;", "if    (  ( failure )     !  =    null )     {", "throw   failure ;", "}", "}", "METHOD_END"], "methodName": ["assertResolved"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableComponentResolveResult"}, {"methodBody": ["METHOD_START", "{", "metadata    =    null ;", "this . failure    =    failure ;", "return   this ;", "}", "METHOD_END"], "methodName": ["failed"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableComponentResolveResult"}, {"methodBody": ["METHOD_START", "{", "assertHasResult (  )  ;", "return   failure ;", "}", "METHOD_END"], "methodName": ["getFailure"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableComponentResolveResult"}, {"methodBody": ["METHOD_START", "{", "assertResolved (  )  ;", "return   metadata ;", "}", "METHOD_END"], "methodName": ["getMetadata"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableComponentResolveResult"}, {"methodBody": ["METHOD_START", "{", "assertResolved (  )  ;", "return   metadata . getModuleVersionId (  )  ;", "}", "METHOD_END"], "methodName": ["getModuleVersionId"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableComponentResolveResult"}, {"methodBody": ["METHOD_START", "{", "return    (  ( failure )     !  =    null )     |  |     (  ( metadata )     !  =    null )  ;", "}", "METHOD_END"], "methodName": ["hasResult"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableComponentResolveResult"}, {"methodBody": ["METHOD_START", "{", "this . metadata    =    metaData ;", "}", "METHOD_END"], "methodName": ["resolved"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableComponentResolveResult"}, {"methodBody": ["METHOD_START", "{", "assertResolved (  )  ;", "this . metadata    =    metadata ;", "}", "METHOD_END"], "methodName": ["setMetadata"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableComponentResolveResult"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( hasResult (  )  )  )     {", "throw   new   IllegalStateException (  \" No   result   has   been   specified .  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertHasResult"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableModuleComponentMetaDataResolveResult"}, {"methodBody": ["METHOD_START", "{", "if    (  ( state )     =  =     ( BuildableModuleComponentMetaDataResolveResult . State . Failed )  )     {", "throw   failure ;", "}", "if    (  ( state )     !  =     ( BuildableModuleComponentMetaDataResolveResult . State . Resolved )  )     {", "throw   new   IllegalStateException (  \" This   module   has   not   been   resolved .  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertResolved"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableModuleComponentMetaDataResolveResult"}, {"methodBody": ["METHOD_START", "{", "reset ( BuildableModuleComponentMetaDataResolveResult . State . Unknown )  ;", "}", "METHOD_END"], "methodName": ["reset"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableModuleComponentMetaDataResolveResult"}, {"methodBody": ["METHOD_START", "{", "this . state    =    state ;", "m    =    null ;", "failure    =    null ;", "authoritative    =    false ;", "}", "METHOD_END"], "methodName": ["reset"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableModuleComponentMetaDataResolveResult"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( hasResult (  )  )  )     {", "throw   new   IllegalStateException (  \" No   result   has   been   specified .  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertHasResult"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableModuleVersionListingResolveResult"}, {"methodBody": ["METHOD_START", "{", "reset ( BuildableModuleVersionListingResolveResult . State . Failed )  ;", "this . failure    =    failure ;", "this . authoritative    =    true ;", "}", "METHOD_END"], "methodName": ["failed"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableModuleVersionListingResolveResult"}, {"methodBody": ["METHOD_START", "{", "assertHasResult (  )  ;", "return   failure ;", "}", "METHOD_END"], "methodName": ["getFailure"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableModuleVersionListingResolveResult"}, {"methodBody": ["METHOD_START", "{", "return   state ;", "}", "METHOD_END"], "methodName": ["getState"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableModuleVersionListingResolveResult"}, {"methodBody": ["METHOD_START", "{", "assertHasResult (  )  ;", "return   versions ;", "}", "METHOD_END"], "methodName": ["getVersions"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableModuleVersionListingResolveResult"}, {"methodBody": ["METHOD_START", "{", "return    ( state )     !  =     ( BuildableModuleVersionListingResolveResult . State . Unknown )  ;", "}", "METHOD_END"], "methodName": ["hasResult"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableModuleVersionListingResolveResult"}, {"methodBody": ["METHOD_START", "{", "assertHasResult (  )  ;", "return   authoritative ;", "}", "METHOD_END"], "methodName": ["isAuthoritative"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableModuleVersionListingResolveResult"}, {"methodBody": ["METHOD_START", "{", "reset ( BuildableModuleVersionListingResolveResult . State . Listed )  ;", "this . versions    =    ImmutableSet . copyOf ( versions )  ;", "this . authoritative    =    true ;", "}", "METHOD_END"], "methodName": ["listed"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableModuleVersionListingResolveResult"}, {"methodBody": ["METHOD_START", "{", "this . state    =    state ;", "vs    =    null ;", "failure    =    null ;", "authoritative    =    false ;", "}", "METHOD_END"], "methodName": ["reset"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableModuleVersionListingResolveResult"}, {"methodBody": ["METHOD_START", "{", "assertHasResult (  )  ;", "this . authoritative    =    authoritative ;", "}", "METHOD_END"], "methodName": ["setAuthoritative"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableModuleVersionListingResolveResult"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( hasResult (  )  )  )     {", "throw   new   IllegalStateException (  \" No   result   has   been   specified .  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertHasResult"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableTypedResolveResult"}, {"methodBody": ["METHOD_START", "{", "return    ( result )     !  =    null ;", "}", "METHOD_END"], "methodName": ["isSuccessful"], "fileName": "org.gradle.internal.resolve.result.DefaultBuildableTypedResolveResult"}, {"methodBody": ["METHOD_START", "{", "for    ( String   location    :    attempted )     {", "target . attempted ( location )  ;", "}", "}", "METHOD_END"], "methodName": ["applyTo"], "fileName": "org.gradle.internal.resolve.result.DefaultResourceAwareResolveResult"}, {"methodBody": ["METHOD_START", "{", "attempted . add ( locationDescription )  ;", "}", "METHOD_END"], "methodName": ["attempted"], "fileName": "org.gradle.internal.resolve.result.DefaultResourceAwareResolveResult"}, {"methodBody": ["METHOD_START", "{", "attempted ( location . getDisplayName (  )  )  ;", "}", "METHOD_END"], "methodName": ["attempted"], "fileName": "org.gradle.internal.resolve.result.DefaultResourceAwareResolveResult"}, {"methodBody": ["METHOD_START", "{", "return   attempted ;", "}", "METHOD_END"], "methodName": ["getAttempted"], "fileName": "org.gradle.internal.resolve.result.DefaultResourceAwareResolveResult"}, {"methodBody": ["METHOD_START", "{", "if    ( artifactFile    =  =    null )     {", "throw   new   IllegalArgumentException (  \" artifactFile   cannot   be   null \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertArtifactFileNotNull"], "fileName": "org.gradle.internal.resource.cached.AbstractCachedIndex"}, {"methodBody": ["METHOD_START", "{", "if    ( key    =  =    null )     {", "throw   new   IllegalAumentException (  \" key   cannot   be   null \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertKeyNotNull"], "fileName": "org.gradle.internal.resource.cached.AbstractCachedIndex"}, {"methodBody": ["METHOD_START", "{", "assertKeyNotNull ( key )  ;", "cacheLockingManager . useCache ( new   Runnable (  )     {", "public   void   run (  )     {", "getPersisten (  )  . remove ( key )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["clear"], "fileName": "org.gradle.internal.resource.cached.AbstractCachedIndex"}, {"methodBody": ["METHOD_START", "{", "if    (  ( persistentCache )     =  =    null )     {", "persistentCache    =    initPersistentCache (  )  ;", "}", "return   persistentCache ;", "}", "METHOD_END"], "methodName": ["getPersistentCache"], "fileName": "org.gradle.internal.resource.cached.AbstractCachedIndex"}, {"methodBody": ["METHOD_START", "{", "return   cacheLockingManager . createCache ( persistentCacheName ,    keySerializer ,    valueSerializer )  ;", "}", "METHOD_END"], "methodName": ["initPersistentCache"], "fileName": "org.gradle.internal.resource.cached.AbstractCachedIndex"}, {"methodBody": ["METHOD_START", "{", "assertKeyNotNull ( key )  ;", "return   cacheLockingManager . useCache ( new   Factory < V >  (  )     {", "public   V   create (  )     {", "V   found    =    getPersistentCache (  )  . get ( key )  ;", "if    ( found    =  =    null )     {", "return   null ;", "} else", "if    (  ( found . isMissing (  )  )     |  |     ( found . getCachedFile (  )  . exists (  )  )  )     {", "return   found ;", "} else    {", "clear ( key )  ;", "return   null ;", "}", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["lookup"], "fileName": "org.gradle.internal.resource.cached.AbstractCachedIndex"}, {"methodBody": ["METHOD_START", "{", "cacheLockingManager . useCache ( new   Runnable (  )     {", "public   void   run (  )     {", "getPersisten (  )  . put ( key ,    entry )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["storeInternal"], "fileName": "org.gradle.internal.resource.cached.AbstractCachedIndex"}, {"methodBody": ["METHOD_START", "{", "return   cachedAt ;", "}", "METHOD_END"], "methodName": ["getCachedAt"], "fileName": "org.gradle.internal.resource.cached.DefaultCachedExternalResource"}, {"methodBody": ["METHOD_START", "{", "return   cachedFile ;", "}", "METHOD_END"], "methodName": ["getCachedFile"], "fileName": "org.gradle.internal.resource.cached.DefaultCachedExternalResource"}, {"methodBody": ["METHOD_START", "{", "return   isMissing (  )     ?     -  1     :    cachedFile . length (  )  ;", "}", "METHOD_END"], "methodName": ["getContentLength"], "fileName": "org.gradle.internal.resource.cached.DefaultCachedExternalResource"}, {"methodBody": ["METHOD_START", "{", "return    ( externalResourceMetaData )     !  =    null    ?    externalResourceMetaData . getLastModified (  )     :    null ;", "}", "METHOD_END"], "methodName": ["getExternalLastModified"], "fileName": "org.gradle.internal.resource.cached.DefaultCachedExternalResource"}, {"methodBody": ["METHOD_START", "{", "return   externalResourceMetaData ;", "}", "METHOD_END"], "methodName": ["getExternalResourceMetaData"], "fileName": "org.gradle.internal.resource.cached.DefaultCachedExternalResource"}, {"methodBody": ["METHOD_START", "{", "return    ( cachedFile )     =  =    null ;", "}", "METHOD_END"], "methodName": ["isMissing"], "fileName": "org.gradle.internal.resource.cached.DefaultCachedExternalResource"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultCachedExternalResource ( artifactFile ,    timeProvider . getCurrentTime (  )  ,    externalResourceMetaData )  ;", "}", "METHOD_END"], "methodName": ["createEntry"], "fileName": "org.gradle.internal.resource.cached.DefaultCachedExternalResourceIndex"}, {"methodBody": ["METHOD_START", "{", "assertArtifactFileNotNull ( artifactFile )  ;", "assertKeyNotNull ( key )  ;", "storeInternal ( key ,    createEntry ( artifactFile ,    eMetaData )  )  ;", "}", "METHOD_END"], "methodName": ["store"], "fileName": "org.gradle.internal.resource.cached.DefaultCachedExternalResourceIndex"}, {"methodBody": ["METHOD_START", "{", "storeInternal ( key ,    new   DefaultCachedExternalResource ( timeProvider . getCurrentTime (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["storeMissing"], "fileName": "org.gradle.internal.resource.cached.DefaultCachedExternalResourceIndex"}, {"methodBody": ["METHOD_START", "{", "if    ( baseDir . exists (  )  )     {", "finders . add ( new   PatternBased ( baseDir ,    pattern )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addForPattern"], "fileName": "org.gradle.internal.resource.local.ivy.LocallyAvailableResourceFinderFactory"}, {"methodBody": ["METHOD_START", "{", "int   wildcardPos    =    pattern . indexOf (  \"  /  *  /  \"  )  ;", "int   patternPos    =    pattern . indexOf (  \"  /  [  \"  )  ;", "if    (  ( wildcardPos    <     0  )     &  &     ( patternPos    <     0  )  )     {", "throw   new   IllegalArgumentException ( String . format (  \" Unsupported   pattern    '  % s '  \"  ,    pattern )  )  ;", "}", "int   chopAt ;", "if    (  ( wildcardPos    >  =     0  )     &  &     ( patternPos    >  =     0  )  )     {", "chopAt    =    Math . min ( wildcardPos ,    patternPos )  ;", "} else", "if    ( wildcardPos    >  =     0  )     {", "chopAt    =    wildcardPos ;", "} else    {", "chopAt    =    patternPos ;", "}", "String   pathPart    =    pattern . substring (  0  ,    chopAt )  ;", "String   patternPart    =    pattern . substring (  ( chopAt    +     1  )  )  ;", "addForPattern ( finders ,    new   File ( rootCachesDirectory ,    pathPart )  ,    new   IvyPattern ( patternPart )  )  ;", "}", "METHOD_END"], "methodName": ["addForPattern"], "fileName": "org.gradle.internal.resource.local.ivy.LocallyAvailableResourceFinderFactory"}, {"methodBody": ["METHOD_START", "{", "List < LocallyAvailableResourceFinder < ModuleComponentArtifactMetadata >  >    finders    =    new   LinkedList < LocallyAvailableResourceFinder < ModuleComponentArtifactMetadata >  >  (  )  ;", "finders . add ( new   LocallyAvailableResourceFinderSearchableFileStoreAdapter < ModuleComponentArtifactMetadata >  ( new   FileStoreSearcher < ModuleComponentArtifactMetadata >  (  )     {", "@ Override", "public   Set <  ?    extends   LocallyAvailableResource >    search ( ModuleComponentArtifactMetadata   key )     {", "return   fileStore . search ( key . getId (  )  )  ;", "}", "}  )  )  ;", "addForPattern ( finders ,     \" artifacts -  2  6  / filestore /  [ organisation ]  /  [ module ]  (  /  [ branch ]  )  /  [ revision ]  /  [ type ]  /  *  /  [ artifact ]  -  [ revision ]  (  -  [ classifier ]  )  (  .  [ ext ]  )  \"  )  ;", "addForPattern ( finders ,     \" artifacts -  2  4  / filestore /  [ organisation ]  /  [ module ]  (  /  [ branch ]  )  /  [ revision ]  /  [ type ]  /  *  /  [ artifact ]  -  [ revision ]  (  -  [ classifier ]  )  (  .  [ ext ]  )  \"  )  ;", "addForPattern ( finders ,     \" artifacts -  2  3  / filestore /  [ organisation ]  /  [ module ]  (  /  [ branch ]  )  /  [ revision ]  /  [ type ]  /  *  /  [ artifact ]  -  [ revision ]  (  -  [ classifier ]  )  (  .  [ ext ]  )  \"  )  ;", "addForPattern ( finders ,     \" artifacts -  1  5  / filestore /  [ organisation ]  /  [ module ]  (  /  [ branch ]  )  /  [ revision ]  /  [ type ]  /  *  /  [ artifact ]  -  [ revision ]  (  -  [ classifier ]  )  (  .  [ ext ]  )  \"  )  ;", "addForPattern ( finders ,     \" artifacts -  1  4  / filestore /  [ organisation ]  /  [ module ]  (  /  [ branch ]  )  /  [ revision ]  /  [ type ]  /  *  /  [ artifact ]  -  [ revision ]  (  -  [ classifier ]  )  (  .  [ ext ]  )  \"  )  ;", "addForPattern ( finders ,     \" artifacts -  1  3  / filestore /  [ organisation ]  /  [ module ]  (  /  [ branch ]  )  /  [ revision ]  /  [ type ]  /  *  /  [ artifact ]  -  [ revision ]  (  -  [ classifier ]  )  (  .  [ ext ]  )  \"  )  ;", "addForPattern ( finders ,     \" artifacts -  8  / filestore /  [ organisation ]  /  [ module ]  (  /  [ branch ]  )  /  [ revision ]  /  [ type ]  /  *  /  [ artifact ]  -  [ revision ]  (  -  [ classifier ]  )  (  .  [ ext ]  )  \"  )  ;", "addForPattern ( finders ,     \" artifacts -  7  / artifacts /  *  /  [ organisation ]  /  [ module ]  (  /  [ branch ]  )  /  [ revision ]  /  [ type ]  /  [ artifact ]  -  [ revision ]  (  -  [ classifier ]  )  (  .  [ ext ]  )  \"  )  ;", "addForPattern ( finders ,     \" artifacts -  4  /  [ organisation ]  /  [ module ]  (  /  [ branch ]  )  /  *  /  [ type ] s /  [ artifact ]  -  [ revision ]  (  -  [ classifier ]  )  (  .  [ ext ]  )  \"  )  ;", "addForPattern ( finders ,     \" artifacts -  4  /  [ organisation ]  /  [ module ]  (  /  [ branch ]  )  /  *  / pom . originals /  [ artifact ]  -  [ revision ]  (  -  [ classifier ]  )  (  .  [ ext ]  )  \"  )  ;", "addForPattern ( finders ,     \"  .  .  / cache /  [ organisation ]  /  [ module ]  (  /  [ branch ]  )  /  [ type ] s /  [ artifact ]  -  [ revision ]  (  -  [ classifier ]  )  (  .  [ ext ]  )  \"  )  ;", "try    {", "File   localMavenRepository    =    localMavenRepositoryLocator . getLocalMavenRepository (  )  ;", "if    ( localMavenRepository . exists (  )  )     {", "addForPattern ( finders ,    localMavenRepository ,    new   M 2 ResourcePattern (  \"  [ organisation ]  /  [ module ]  /  [ revision ]  /  [ artifact ]  -  [ revision ]  (  -  [ classifier ]  )  (  .  [ ext ]  )  \"  )  )  ;", "}", "}    catch    ( CannotLocateLocalMavenRepositoryException   ex )     {", "finders . add ( new    . NoMavenLocalRepositoryResourceFinder ( ex )  )  ;", "}", "return   new   CompositeLocallyAvailableResourceFinder < ModuleComponentArtifactMetadata >  ( finders )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.internal.resource.local.ivy.LocallyAvailableResourceFinderFactory"}, {"methodBody": ["METHOD_START", "{", "return   new   Transformer < Factory < List < File >  >  ,    ModuleComponentArtifactMetadata >  (  )     {", "public   Factory < List < File >  >    transform ( final   ModuleComponentArtifactMetadata   artifact )     {", "return   new   Factory < List < File >  >  (  )     {", "public   List < File >    create (  )     {", "final   List < File >    files    =    new   LinkedList < File >  (  )  ;", "if    ( artifact    !  =    null )     {", "getMatchingFiles ( artifact )  . visit ( new   EmptyFileVisitor (  )     {", "public   void   visitFile ( FileVisitDetails   fileDetails )     {", "files . add ( fileDetails . getFile (  )  )  ;", "}", "}  )  ;", "}", "return   files ;", "}", "}  ;", "}", "private   MinimalFileTree   getMatchingFiles ( ModuleComponentArtifactMetadata   artifact )     {", "String   patternString    =    pattern . getLocation ( artifact )  . getPath (  )  ;", "return   new   SingleIncludePatternFileTree ( baseDir ,    patternString )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["createProducer"], "fileName": "org.gradle.internal.resource.local.ivy.PatternBasedLocallyAvailableResourceFinder"}, {"methodBody": ["METHOD_START", "{", "return    (  ( operationType . getCapitalized (  )  )     +     \"     \"  )     +     ( resource . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["createDescription"], "fileName": "org.gradle.internal.resource.transfer.AbstractProgressLoggingHandler"}, {"methodBody": ["METHOD_START", "{", "ProgressLogger   progressLogger    =    progressLoggerFactory . newOperation (  ( loggingClazz    !  =    null    ?    loggingClazz    :    getClass (  )  )  )  ;", "String   description    =    createDescription ( operationType ,    resource )  ;", "progressLogger . setDescription ( description )  ;", "progressLogger . setLoggingHeader ( description )  ;", "progressLogger . started (  )  ;", "String   resourceName    =    createShortDescription ( resource )  ;", "return   new   ResourceOperation ( progressLogger ,    operationType ,    contentLength ,    resourceName )  ;", "}", "METHOD_END"], "methodName": ["createResourceOperation"], "fileName": "org.gradle.internal.resource.transfer.AbstractProgressLoggingHandler"}, {"methodBody": ["METHOD_START", "{", "String   rawUri    =    resource . toString (  )  ;", "int   lastSlash    =    rawUri . lastIndexOf (  '  /  '  )  ;", "return   lastSlash    =  =     (  -  1  )     ?    rawUri    :    rawUri . substring (  ( lastSlash    +     1  )  )  ;", "}", "METHOD_END"], "methodName": ["createShortDescription"], "fileName": "org.gradle.internal.resource.transfer.AbstractProgressLoggingHandler"}, {"methodBody": ["METHOD_START", "{", "final   File   destination    =    temporaryFileProvider . createTemporaryFile (  \" gradle _ download \"  ,     \" bin \"  )  ;", "try    {", "Files . copy ( local . getFile (  )  ,    destination )  ;", "HashValue   localChecksum    =    HashUtil . createHash ( destination ,     \" SHA 1  \"  )  ;", "if    (  !  ( localChecksum . equals ( remoteChecksum )  )  )     {", "return   null ;", "}", "return   moveIntoCache ( source ,    destination ,    fileStore ,    remoteMetaData )  ;", "}    finally    {", "destination . delete (  )  ;", "}", "}", "METHOD_END"], "methodName": ["copyCandidateToCache"], "fileName": "org.gradle.internal.resource.transfer.DefaultCacheAwareExternalResourceAccessor"}, {"methodBody": ["METHOD_START", "{", "DefaultCacheAwareExternalResourceAccessor . DownloadAction   downloadAction    =    new   DefaultCacheAwareExternalResourceAccessor . DownloadAction ( source )  ;", "try    {", "resource . withContentIfPresent ( downloadAction )  ;", "}    catch    ( Exception   e )     {", "throw   ResourceExceptions . getFailed ( source . getUri (  )  ,    e )  ;", "}", "if    (  ( downloadAction . metaData )     =  =    null )     {", "return   null ;", "}", "try    {", "return   moveIntoCache ( source ,    downloadAction . destination ,    fileStore ,    downloadAction . metaData )  ;", "}    finally    {", "downloadAction . destination . delete (  )  ;", "}", "}", "METHOD_END"], "methodName": ["copyToCache"], "fileName": "org.gradle.internal.resource.transfer.DefaultCacheAwareExternalResourceAccessor"}, {"methodBody": ["METHOD_START", "{", "return    ( timeProvider . getCurrentTime (  )  )     -     ( cached . getCachedAt (  )  )  ;", "}", "METHOD_END"], "methodName": ["getAgeMillis"], "fileName": "org.gradle.internal.resource.transfer.DefaultCacheAwareExternalResourceAccessor"}, {"methodBody": ["METHOD_START", "{", "try    {", "ExternalResourceName   sha 1 Location    =    location . append (  \"  . sha 1  \"  )  ;", "ExternalResource   resource    =    delegate . resource ( sha 1 Location ,    revalidate )  ;", "ExternalResourceReadResult < HashValue >    result    =    resource . withContentIfPresent ( new   Transformer < HashValue ,    InputStream >  (  )     {", "@ Override", "public   HashValue   transform ( InputStream   inputStream )     {", "try    {", "String   sha    =    IOUtils . toString ( inputStream ,     \" us - ascii \"  )  ;", "return   HashValue . parse ( sha )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "}  )  ;", "return   result    =  =    null    ?    null    :    result . getResult (  )  ;", "}    catch    ( Exception   e )     {", ". LOGGER . debug ( String . format (  \" Failed   to   download   SHA 1    for   resource    '  % s '  .  \"  ,    location )  ,    e )  ;", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["getResourceSha1"], "fileName": "org.gradle.internal.resource.transfer.DefaultCacheAwareExternalResourceAccessor"}, {"methodBody": ["METHOD_START", "{", "return   cacheLockingManager . useCache ( new   Factory < LocallyAvailableExternalResource >  (  )     {", "public   LocallyAvailableExternalResource   create (  )     {", "LocallyAvailableResource   cachedResource    =    fileStore . moveIntoCache ( destination )  ;", "File   fileInFileStore    =    cachedResource . getFile (  )  ;", "cachedExternalResourceIndex . store ( source . toString (  )  ,    fileInFileStore ,    metaData )  ;", "return   fileResourceRepository . resource ( fileInFileStore ,    source . getUri (  )  ,    metaData )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["moveIntoCache"], "fileName": "org.gradle.internal.resource.transfer.DefaultCacheAwareExternalResourceAccessor"}, {"methodBody": ["METHOD_START", "{", "return    ( isCacheableScheme ( source )  )     &  &     ( isCacheableResource ( source )  )  ;", "}", "METHOD_END"], "methodName": ["isCacheable"], "fileName": "org.gradle.internal.resource.transfer.DefaultUriTextResourceLoader"}, {"methodBody": ["METHOD_START", "{", "return    ( source . getRawQuery (  )  )     =  =    null ;", "}", "METHOD_END"], "methodName": ["isCacheableResource"], "fileName": "org.gradle.internal.resource.transfer.DefaultUriTextResourceLoader"}, {"methodBody": ["METHOD_START", "{", "return   cachedSchemes . contains ( source . getScheme (  )  )  ;", "}", "METHOD_END"], "methodName": ["isCacheableScheme"], "fileName": "org.gradle.internal.resource.transfer.DefaultUriTextResourceLoader"}, {"methodBody": ["METHOD_START", "{", "return   delegate . getMetaData ( location ,    revalidate )  ;", "}", "METHOD_END"], "methodName": ["getMetaData"], "fileName": "org.gradle.internal.resource.transfer.ProgressLoggingExternalResourceAccessor"}, {"methodBody": ["METHOD_START", "{", "ExternalResourceReadResponse   resource    =    delegate . openResource ( location ,    revalidate )  ;", "if    ( resource    !  =    null )     {", "return   new    . ProgressLoggingExternalResource ( location ,    resource )  ;", "} else    {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["openResource"], "fileName": "org.gradle.internal.resource.transfer.ProgressLoggingExternalResourceAccessor"}, {"methodBody": ["METHOD_START", "{", "this . progressLogger . completed (  )  ;", "}", "METHOD_END"], "methodName": ["completed"], "fileName": "org.gradle.internal.resource.transfer.ResourceOperation"}, {"methodBody": ["METHOD_START", "{", "if    ( bytes    =  =    null )     {", "return    \" unknown   size \"  ;", "}", "if    ( bytes    <     1  0  2  4  )     {", "return   bytes    +     \"    B \"  ;", "} else", "if    ( bytes    <     1  0  4  8  5  7  6  )     {", "return    ( bytes    /     1  0  2  4  )     +     \"    KB \"  ;", "} else    {", "return   String . format (  \"  %  .  2 f   MB \"  ,     ( bytes    /     1  0  4  8  5  7  6  .  0  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getLengthText"], "fileName": "org.gradle.internal.resource.transfer.ResourceOperation"}, {"methodBody": ["METHOD_START", "{", "totalProcessedBytes    +  =    processedBytes ;", "long   processedKB    =     ( totalProcessedBytes )     /     1  0  2  4  ;", "if    ( processedKB    >     ( loggedKBytes )  )     {", "loggedKBytes    =    processedKB ;", "String   progressMessage    =    String . format (  \"  % s /  % s    % sed \"  ,    getLengthText ( totalProcessedBytes )  ,    contentLengthString ,    oType )  ;", "progressLogger . progress ( progressMessage )  ;", "}", "}", "METHOD_END"], "methodName": ["logProcessedBytes"], "fileName": "org.gradle.internal.resource.transfer.ResourceOperation"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.gradle.internal.resource.transport.DefaultExternalResourceRepository"}, {"methodBody": ["METHOD_START", "{", "return   repository ;", "}", "METHOD_END"], "methodName": ["getRepository"], "fileName": "org.gradle.internal.resource.transport.ResourceConnectorRepositoryTransport"}, {"methodBody": ["METHOD_START", "{", "return   resourceAccessor ;", "}", "METHOD_END"], "methodName": ["getResourceAccessor"], "fileName": "org.gradle.internal.resource.transport.ResourceConnectorRepositoryTransport"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isLocal"], "fileName": "org.gradle.internal.resource.transport.ResourceConnectorRepositoryTransport"}, {"methodBody": ["METHOD_START", "{", "return   repository ;", "}", "METHOD_END"], "methodName": ["getRepository"], "fileName": "org.gradle.internal.resource.transport.file.FileTransport"}, {"methodBody": ["METHOD_START", "{", "return   resourceAccessor ;", "}", "METHOD_END"], "methodName": ["getResourceAccessor"], "fileName": "org.gradle.internal.resource.transport.file.FileTransport"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["isLocal"], "fileName": "org.gradle.internal.resource.transport.file.FileTransport"}, {"methodBody": ["METHOD_START", "{", "Closure   copy    =     (  ( Closure )     ( closure . clone (  )  )  )  ;", "copy . setResolveStrategy ( DELEGATE _ FIRST )  ;", "copy . setDelegate ( subject )  ;", "if    (  ( closure . getMaximumNumberOfParameters (  )  )     =  =     0  )     {", "copy . call (  )  ;", "} else    {", "Object [  ]    argList    =    new   Object [  ( inputs . size (  )  )     +     1  ]  ;", "argList [  0  ]     =    subject ;", "int   i    =     1  ;", "for    ( Object   arg    :    inputs )     {", "argList [  ( i +  +  )  ]     =    arg ;", "}", "copy . call ( argList )  ;", "}", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.internal.rules.ClosureBackedRuleAction"}, {"methodBody": ["METHOD_START", "{", "return   inputTypes ;", "}", "METHOD_END"], "methodName": ["getInputTypes"], "fileName": "org.gradle.internal.rules.ClosureBackedRuleAction"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >  [  ]    parameterTypes    =    closure . getParameterTypes (  )  ;", "List < Class <  ?  >  >    inputTypes    =    Lists . newArrayList (  )  ;", "if    (  ( parameterTypes . length )     !  =     0  )     {", "if    ( parameterTypes [  0  ]  . isAssignableFrom ( subjectType )  )     {", "for    ( Class <  ?  >    parameterType    :    Arrays . asList ( parameterTypes )  . subList (  1  ,    parameterTypes . length )  )     {", "inputTypes . add ( parameterType )  ;", "}", "} else    {", "throw   new   ValidationException ( String . format (  \" First   parameter   of   rule   action   closure   must   be   of   type    '  % s '  .  \"  ,    subjectType . getSimpleName (  )  )  )  ;", "}", "}", "return   inputTypes ;", "}", "METHOD_END"], "methodName": ["parseInputTypes"], "fileName": "org.gradle.internal.rules.ClosureBackedRuleAction"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   ruleActionValidator . validate ( new   NoInputsRuleAction < T >  ( action )  )  ;", "}    catch    ( RuleActionValidationException   e )     {", "throw   new   InvalidUserCodeException ( String . format (  . INVALID _ ACTION _ ERROR ,    context )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["createFromAction"], "fileName": "org.gradle.internal.rules.DefaultRuleActionAdapter"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   ruleActionValidator . validate ( new   ClosureBackedRuleAction < T >  ( subjectType ,    closure )  )  ;", "}    catch    ( RuleActionValidationException   e )     {", "throw   new   InvalidUserCodeException ( String . format (  . INVALID _ CLOSURE _ ERROR ,    context )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["createFromClosure"], "fileName": "org.gradle.internal.rules.DefaultRuleActionAdapter"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   ruleActionValidator . validate ( RuleSourceBackedRuleAction . create ( ModelType . of ( subjectType )  ,    ruleSource )  )  ;", "}    catch    ( RuleActionValidationException   e )     {", "throw   new   InvalidUserCodeException ( String . format (  . INVALID _ RULE _ SOURCE _ ERROR ,    context )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["createFromRuleSource"], "fileName": "org.gradle.internal.rules.DefaultRuleActionAdapter"}, {"methodBody": ["METHOD_START", "{", "return   ModelType . of ( aClass )  . toString (  )  ;", "}", "METHOD_END"], "methodName": ["className"], "fileName": "org.gradle.internal.rules.DefaultRuleActionValidator"}, {"methodBody": ["METHOD_START", "{", "if    (  ( validInputTypes . size (  )  )     =  =     1  )     {", "return   String . format (  . VALID _ SINGLE _ TYPES ,    inputType . getName (  )  ,     . className ( validInputTypes . get (  0  )  )  )  ;", "}", "return   String . format (  . VALID _ MULTIPLE _ TYPES ,    inputType . getName (  )  ,    CollectionUtils . collect ( validInputTypes ,    new    . ClassNameTransformer (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["invalidParameterMessage"], "fileName": "org.gradle.internal.rules.DefaultRuleActionValidator"}, {"methodBody": ["METHOD_START", "{", "validateInputTypes ( ruleAction )  ;", "return   ruleAction ;", "}", "METHOD_END"], "methodName": ["validate"], "fileName": "org.gradle.internal.rules.DefaultRuleActionValidator"}, {"methodBody": ["METHOD_START", "{", "for    ( Class <  ?  >    inputType    :    ruleAction . getInputTypes (  )  )     {", "if    (  !  ( validInputTypes . contains ( inputType )  )  )     {", "throw   new   ionException ( invalidParameterMessage ( inputType )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["validateInputTypes"], "fileName": "org.gradle.internal.rules.DefaultRuleActionValidator"}, {"methodBody": ["METHOD_START", "{", "action . execute ( subject )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.internal.rules.NoInputsRuleAction"}, {"methodBody": ["METHOD_START", "{", "return   Collections . emptyList (  )  ;", "}", "METHOD_END"], "methodName": ["getInputTypes"], "fileName": "org.gradle.internal.rules.NoInputsRuleAction"}, {"methodBody": ["METHOD_START", "{", "ModelType < R >    ruleSourceType    =    ModelType . typeOf ( ruleSourceInstance )  ;", "List < Method >    mutateMethods    =    JavaReflectionUtil . findAllMethods ( ruleSourceType . getConcreteClass (  )  ,    new   Spec < Method >  (  )     {", "public   boolean   isSatisfiedBy ( Method   element )     {", "return   element . isAnnotationPresent ( Mutate . class )  ;", "}", "}  )  ;", "FormattingValidationProblemCollector   problemsFormatter    =    new   FormattingValidationProblemCollector (  \" rule   source \"  ,    ruleSourceType )  ;", "RuleSourceValidationProblemCollector   problems    =    new   DefaultRuleSourceValidationProblemCollector ( problemsFormatter )  ;", "if    (  ( mutateMethods . size (  )  )     =  =     0  )     {", "problems . add (  (  \" Must   have   at   exactly   one   method   annotated   with    @  \"     +     ( Mutate . class . getName (  )  )  )  )  ;", "} else    {", "if    (  ( mutateMethods . size (  )  )     >     1  )     {", "problems . add (  (  \" More   than   one   method   is   annotated   with    @  \"     +     ( Mutate . class . getName (  )  )  )  )  ;", "}", "for    ( Method   ruleMethod    :    mutateMethods )     {", "if    (  ( ruleMethod . getReturnType (  )  )     !  =     ( Void . TYPE )  )     {", "problems . add ( ruleMethod ,     \" A   rule   method   must   return   void \"  )  ;", "}", "Type [  ]    parameterTypes    =    ruleMethod . getGenericParameterTypes (  )  ;", "if    (  (  ( parameterTypes . length )     =  =     0  )     |  |     (  !  ( subjectType . isAssignableFrom ( ModelType . of ( parameterTypes [  0  ]  )  )  )  )  )     {", "problems . add ( ruleMethod ,    String . format (  \" First   parameter   of   a   rule   method   must   be   of   type    % s \"  ,    subjectType )  )  ;", "}", "}", "}", "if    ( problemsFormatter . hasProblems (  )  )     {", "throw   new   RuleActionValidationException ( problemsFormatter . format (  )  )  ;", "}", "return   new    < R ,    T >  ( ruleSourceInstance ,    new   JavaMethod < R ,    T >  ( subjectType . getConcreteClass (  )  ,    mutateMethods . get (  0  )  )  )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.internal.rules.RuleSourceBackedRuleAction"}, {"methodBody": ["METHOD_START", "{", "return   Arrays . asList ( parameterTypes )  . subList (  1  ,    parameterTypes . length )  ;", "}", "METHOD_END"], "methodName": ["determineInputTypes"], "fileName": "org.gradle.internal.rules.RuleSourceBackedRuleAction"}, {"methodBody": ["METHOD_START", "{", "Object [  ]    args    =    new   Object [  ( inputs . size (  )  )     +     1  ]  ;", "args [  0  ]     =    subject ;", "for    ( int   i    =     0  ;    i    <     ( inputs . size (  )  )  ;    i +  +  )     {", "Object   input    =    inputs . get ( i )  ;", "args [  ( i    +     1  )  ]     =    input ;", "}", "Method . invoke ( instance ,    args )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.internal.rules.RuleSourceBackedRuleAction"}, {"methodBody": ["METHOD_START", "{", "return   inputTypes ;", "}", "METHOD_END"], "methodName": ["getInputTypes"], "fileName": "org.gradle.internal.rules.RuleSourceBackedRuleAction"}, {"methodBody": ["METHOD_START", "{", "return   action ;", "}", "METHOD_END"], "methodName": ["getAction"], "fileName": "org.gradle.internal.rules.SpecRuleAction"}, {"methodBody": ["METHOD_START", "{", "return   spec ;", "}", "METHOD_END"], "methodName": ["getSpec"], "fileName": "org.gradle.internal.rules.SpecRuleAction"}]