[{"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.integtests.tooling.NullAction"}, {"methodBody": ["METHOD_START", "{", "String   trimmed    =    constraint . trim (  )  ;", "if    ( trimmed . equals (  \" current \"  )  )     {", "return   new   Spec <  >  (  )     {", "public   boolean   isSatisfiedBy (    element )     {", "return   element . equals (  . current (  )  )  ;", "}", "}  ;", "}", "if    ( trimmed . equals (  \"  ! current \"  )  )     {", "return   new   Spec <  >  (  )     {", "public   boolean   isSatisfiedBy (    element )     {", "return    !  ( element . equals (  . current (  )  )  )  ;", "}", "}  ;", "}", "if    ( trimmed . startsWith (  \"  =  \"  )  )     {", "final      target    =     . version ( trimmed . substring (  1  )  )  . getBaseVersion (  )  ;", "return   new   Spec <  >  (  )     {", "public   boolean   isSatisfiedBy (    element )     {", "return   element . getBaseVersion (  )  . equals ( target )  ;", "}", "}  ;", "}", "List < Spec <  >  >    specs    =    new   ArrayList < Spec <  >  >  (  )  ;", "String [  ]    patterns    =    trimmed . split (  \"  \\  \\ s +  \"  )  ;", "for    ( String   value    :    patterns )     {", "if    ( value . startsWith (  \"  >  =  \"  )  )     {", "final      minVersion    =     . version ( value . substring (  2  )  )  ;", "specs . add ( new   Spec <  >  (  )     {", "public   boolean   isSatisfiedBy (    element )     {", "return    ( element . getBaseVersion (  )  . compareTo ( minVersion )  )     >  =     0  ;", "}", "}  )  ;", "} else", "if    ( value . startsWith (  \"  >  \"  )  )     {", "final      minVersion    =     . version ( value . substring (  1  )  )  ;", "specs . add ( new   Spec <  >  (  )     {", "public   boolean   isSatisfiedBy (    element )     {", "return    ( element . getBaseVersion (  )  . compareTo ( minVersion )  )     >     0  ;", "}", "}  )  ;", "} else", "if    ( value . startsWith (  \"  <  =  \"  )  )     {", "final      maxVersion    =     . version ( value . substring (  2  )  )  ;", "specs . add ( new   Spec <  >  (  )     {", "public   boolean   isSatisfiedBy (    element )     {", "return    ( element . getBaseVersion (  )  . compareTo ( maxVersion )  )     <  =     0  ;", "}", "}  )  ;", "} else", "if    ( value . startsWith (  \"  <  \"  )  )     {", "final      maxVersion    =     . version ( value . substring (  1  )  )  ;", "specs . add ( new   Spec <  >  (  )     {", "public   boolean   isSatisfiedBy (    element )     {", "return    ( element . getBaseVersion (  )  . compareTo ( maxVersion )  )     <     0  ;", "}", "}  )  ;", "} else", "if    ( value . startsWith (  \"  !  \"  )  )     {", "final      excludedVersion    =     . version ( value . substring (  1  )  )  ;", "specs . add ( new   Spec <  >  (  )     {", "public   boolean   isSatisfiedBy (    element )     {", "return    !  ( element . getBaseVersion (  )  . equals ( excludedVersion )  )  ;", "}", "}  )  ;", "} else    {", "throw   new   RuntimeException ( String . format (  \" Unsupported   version   range    '  % s '    specified   in   constraint    '  % s '  .    Supported   formats :     '  >  = nnn '  ,     '  > nnn '  ,     '  <  = nnn '  ,     '  < nnn '  ,     '  ! nnn '    or   space - separate   patterns \"  ,    value ,    constraint )  )  ;", "}", "}", "if    (  ( specs . size (  )  )     =  =     1  )     {", "return   specs . get (  0  )  ;", "}", "return   Specs . intersect ( specs )  ;", "}", "METHOD_END"], "methodName": ["toSpec"], "fileName": "org.gradle.integtests.tooling.fixture.GradleVersionSpec"}, {"methodBody": ["METHOD_START", "{", "return   str    =  =    null    ?    null    :    str . replaceAll (  \"  \\ r \\ n |  \\ r |  \\ n \"  ,    sep )  ;", "}", "METHOD_END"], "methodName": ["convertLineSeparators"], "fileName": "org.gradle.integtests.tooling.fixture.TextUtil"}, {"methodBody": ["METHOD_START", "{", "return   obj . toString (  )  . replaceAll (  \"  \\  \\  \\  \\  \"  ,     \"  \\  \\  \\  \\  \\  \\  \\  \\  \"  )  ;", "}", "METHOD_END"], "methodName": ["escapeString"], "fileName": "org.gradle.integtests.tooling.fixture.TextUtil"}, {"methodBody": ["METHOD_START", "{", "return   path . replaceAll ( Pattern . quote ( File . separator )  ,     \"  /  \"  )  ;", "}", "METHOD_END"], "methodName": ["normaliseFileSeparators"], "fileName": "org.gradle.integtests.tooling.fixture.TextUtil"}, {"methodBody": ["METHOD_START", "{", "return   str    =  =    null    ?    null    :    TextUtil . convertLineSeparators ( str ,     \"  \\ n \"  )  ;", "}", "METHOD_END"], "methodName": ["normaliseLineSeparators"], "fileName": "org.gradle.integtests.tooling.fixture.TextUtil"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Set < String >  >    model    =    new   HashMap < String ,    Set < String >  >  (  )  ;", "for    ( BasicGradleProject   project    :    controller . getBuildModel (  )  . getProjects (  )  )     {", "BuildInvocations   entryPointsForProject    =    controller . getModel ( project ,    BuildInvocations . class )  ;", "Set < String >    selectorNames    =    new   HashSet < String >  (  )  ;", "for    ( TaskSelector   selector    :    entryPointsForProject . get (  )  )     {", "selectorNames . add ( selector . getName (  )  )  ;", "}", "model . put ( project . getName (  )  ,    selectorNames )  ;", "}", "return   model ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.integtests.tooling.r112.FetchAllTaskSelectorsBuildAction"}, {"methodBody": ["METHOD_START", "{", "for    ( BasicGradleProject   project    :    controller . getBuildModel (  )  . getProjects (  )  )     {", "if    ( project . getName (  )  . equals ( projectName )  )     {", "return   controller . getModel ( project ,    BuildInvocations . class )  ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.integtests.tooling.r112.FetchTaskSelectorsBuildAction"}, {"methodBody": ["METHOD_START", "{", "BasicGradleProject   project    =    null ;", "for    ( BasicGradleProject   p    :    controller . getBuildModel (  )  . getProjects (  )  )     {", "if    ( p . getPath (  )  . equals ( projectPath )  )     {", "project    =    p ;", "break ;", "}", "}", "return   new   ArrayList < tooling . model . Task >  ( controller . getModel ( project ,    BuildInvocations . class )  . getTasks (  )  )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.integtests.tooling.r112.FetchTasksBuildAction"}, {"methodBody": ["METHOD_START", "{", "throw   new   BrokenAction . CustomException (  )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.integtests.tooling.r18.BrokenAction"}, {"methodBody": ["METHOD_START", "{", "return   CounterAction . COUNTER . incrementAndGet (  )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.integtests.tooling.r18.CounterAction"}, {"methodBody": ["METHOD_START", "{", "return   controller . getModel ( BuildEnvironment . class )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.integtests.tooling.r18.FetchBuildEnvironment"}, {"methodBody": ["METHOD_START", "{", "CustomModel   model    =    new   CustomModel (  )  ;", "model . gradle    =    controller . getModel ( GradleProject . class )  ;", "model . eclipse    =    controller . getModel ( EclipseProject . class )  ;", "return   model ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.integtests.tooling.r18.FetchCustomModel"}, {"methodBody": ["METHOD_START", "{", "return   controller . getModel ( IdeaProject . class )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.integtests.tooling.r18.FetchIdeaModel"}, {"methodBody": ["METHOD_START", "{", "try    {", "controller . getModel ( CustomModel . class )  ;", "throw   new   AssertionError (  \" Expected   model   request   to   fail .  \"  )  ;", "}    catch    ( Exception   e )     {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.integtests.tooling.r18.FetchUnknownModel"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.integtests.tooling.r18.NullAction"}, {"methodBody": ["METHOD_START", "{", "GradleBuild   gradleBuild    =    controller . getBuildModel (  )  ;", "Map < String ,    CustomModel >    projects    =    new   HashMap < String ,    CustomModel >  (  )  ;", "for    ( BasicGradleProject   project    :    gradleBuild . getProjects (  )  )     {", "projects . put ( project . getName (  )  ,    controller . getModel ( project ,    CustomModel . class )  )  ;", "}", "return   projects ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.integtests.tooling.r18.UseGradleBuildToFetchProjectModel"}, {"methodBody": ["METHOD_START", "{", "IdeaProject   ideaProject    =    controller . getModel ( IdeaProject . class )  ;", "for    ( IdeaModule   ideaModule    :    ideaProject . getModules (  )  )     {", "visit ( ideaModule ,    controller ,    new   HashMap < String ,    CustomModel >  (  )  )  ;", "}", "EclipseProject   eclipseProject    =    controller . getModel ( EclipseProject . class )  ;", "visit ( eclipseProject ,    controller ,    new   HashMap < String ,    CustomModel >  (  )  )  ;", "GradleProject   rootProject    =    controller . getModel ( GradleProject . class )  ;", "Map < String ,    CustomModel >    projects    =    new   HashMap < String ,    CustomModel >  (  )  ;", "visit ( rootProject ,    controller ,    projects )  ;", "return   projects ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.integtests.tooling.r18.UseOtherTypesToFetchProjectModel"}, {"methodBody": ["METHOD_START", "{", "results . put ( element . getName (  )  ,    buildController . getModel ( element ,    CustomModel . class )  )  ;", "for    ( HierarchicalElement   child    :    element . getChildren (  )  )     {", "visit ( child ,    buildController ,    results )  ;", "}", "}", "METHOD_END"], "methodName": ["visit"], "fileName": "org.gradle.integtests.tooling.r18.UseOtherTypesToFetchProjectModel"}, {"methodBody": ["METHOD_START", "{", "controller . getModel ( GradleProject . class )  ;", "throw   new   GradleException (  \" Should   be   cancelled   before   the   end   of   action .  \"  )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.integtests.tooling.r21.HangingBuildAction"}, {"methodBody": ["METHOD_START", "{", "List < Object >    models    =    new   ArrayList < Object >  (  )  ;", "for    ( BasicGradle   project    :    controller . getBuildModel (  )  . gets (  )  )     {", "Object   model    =    controller . getModel ( project ,    modelType )  ;", "models . add ( model )  ;", "}", "return   models ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.integtests.tooling.r213.FetchProjectModelsBuildAction"}, {"methodBody": ["METHOD_START", "{", "throwException (  )  ;", "return    \"  \"  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.integtests.tooling.r32.BrokenBuildAction"}, {"methodBody": ["METHOD_START", "{", "throw   new   RuntimeExceptionThrowingBrokenBuildAction . CustomException (  )  ;", "}", "METHOD_END"], "methodName": ["throwException"], "fileName": "org.gradle.integtests.tooling.r32.RuntimeExceptionThrowingBrokenBuildAction"}, {"methodBody": ["METHOD_START", "{", "return   ConnectorServices . createCancellationTokenSource (  )  ;", "}", "METHOD_END"], "methodName": ["newCancellationTokenSource"], "fileName": "org.gradle.tooling.GradleConnector"}, {"methodBody": ["METHOD_START", "{", "return   ConnectorServices . createConnector (  )  ;", "}", "METHOD_END"], "methodName": ["newConnector"], "fileName": "org.gradle.tooling.GradleConnector"}, {"methodBody": ["METHOD_START", "{", "return   listenerFailures ;", "}", "METHOD_END"], "methodName": ["getCauses"], "fileName": "org.gradle.tooling.ListenerFailedException"}, {"methodBody": ["METHOD_START", "{", "return   label ;", "}", "METHOD_END"], "methodName": ["getLabel"], "fileName": "org.gradle.tooling.events.test.JvmTestKind"}, {"methodBody": ["METHOD_START", "{", "if    ( collectionType . equals ( DomainObjectSet . class )  )     {", "return   new   ArrayList < Object >  (  )  ;", "}", "if    ( collectionType . isAssignableFrom ( ArrayList . class )  )     {", "return   new   ArrayList < Object >  (  )  ;", "}", "if    ( collectionType . isAssignableFrom ( LinkedHashSet . class )  )     {", "return   new   LinkedHashSet < Object >  (  )  ;", "}", "if    ( collectionType . isAssignableFrom ( TreeSet . class )  )     {", "return   new   TreeSet < Object >  (  )  ;", "}", "throw   new   UnsupportedOperationException ( String . format (  \" Cannot   convert   a      to   type    % s .  \"  ,    collectionType . getName (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createEmptyCollection"], "fileName": "org.gradle.tooling.internal.adapter.CollectionMapper"}, {"methodBody": ["METHOD_START", "{", "if    ( mapType . isAssignableFrom ( LinkedHashMap . class )  )     {", "return   new   LinkedHashMap < Object ,    Object >  (  )  ;", "}", "if    ( mapType . isAssignableFrom ( TreeMap . class )  )     {", "return   new   TreeMap < Object ,    Object >  (  )  ;", "}", "throw   new   UnsupportedOperationException ( Strformat (  \" Cannot   convert   a   Map   to   type    % s .  \"  ,    mapType . getName (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createEmptyMap"], "fileName": "org.gradle.tooling.internal.adapter.CollectionMapper"}, {"methodBody": ["METHOD_START", "{", "return   found ;", "}", "METHOD_END"], "methodName": ["found"], "fileName": "org.gradle.tooling.internal.adapter.MethodInvocation"}, {"methodBody": ["METHOD_START", "{", "return   delegate ;", "}", "METHOD_END"], "methodName": ["getDelegate"], "fileName": "org.gradle.tooling.internal.adapter.MethodInvocation"}, {"methodBody": ["METHOD_START", "{", "return   genericReturnType ;", "}", "METHOD_END"], "methodName": ["getGenericReturnType"], "fileName": "org.gradle.tooling.internal.adapter.MethodInvocation"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.tooling.internal.adapter.MethodInvocation"}, {"methodBody": ["METHOD_START", "{", "return   parameterTypes ;", "}", "METHOD_END"], "methodName": ["getParameterTypes"], "fileName": "org.gradle.tooling.internal.adapter.MethodInvocation"}, {"methodBody": ["METHOD_START", "{", "return   parameters ;", "}", "METHOD_END"], "methodName": ["getParameters"], "fileName": "org.gradle.tooling.internal.adapter.MethodInvocation"}, {"methodBody": ["METHOD_START", "{", "return   result ;", "}", "METHOD_END"], "methodName": ["getResult"], "fileName": "org.gradle.tooling.internal.adapter.MethodInvocation"}, {"methodBody": ["METHOD_START", "{", "return   returnType ;", "}", "METHOD_END"], "methodName": ["getReturnType"], "fileName": "org.gradle.tooling.internal.adapter.MethodInvocation"}, {"methodBody": ["METHOD_START", "{", "return   view ;", "}", "METHOD_END"], "methodName": ["getView"], "fileName": "org.gradle.tooling.internal.adapter.MethodInvocation"}, {"methodBody": ["METHOD_START", "{", "return   viewType ;", "}", "METHOD_END"], "methodName": ["getViewType"], "fileName": "org.gradle.tooling.internal.adapter.MethodInvocation"}, {"methodBody": ["METHOD_START", "{", "return    (  ( parameterTypes . length )     =  =     0  )     &  &     ( isIsOrGet (  )  )  ;", "}", "METHOD_END"], "methodName": ["isGetter"], "fileName": "org.gradle.tooling.internal.adapter.MethodInvocation"}, {"methodBody": ["METHOD_START", "{", "return    (  ( name . startsWith (  \" get \"  )  )     &  &     (  ( name . length (  )  )     >     3  )  )     |  |     (  ( name . startsWith (  \" is \"  )  )     &  &     (  ( name . length (  )  )     >     2  )  )  ;", "}", "METHOD_END"], "methodName": ["isIsOrGet"], "fileName": "org.gradle.tooling.internal.adapter.MethodInvocation"}, {"methodBody": ["METHOD_START", "{", "found    =    true ;", "is . result    =    result ;", "}", "METHOD_END"], "methodName": ["setResult"], "fileName": "org.gradle.tooling.internal.adapter.MethodInvocation"}, {"methodBody": ["METHOD_START", "{", "try    {", "String   literal ;", "if    ( sourceObject   instanceof   Enum )     {", "literal    =     (  ( Enum <  ?  >  )     ( sourceObject )  )  . name (  )  ;", "} else", "if    ( sourceObject   instanceof   String )     {", "literal    =     (  ( String )     ( sourceObject )  )  ;", "} else    {", "literal    =    sourceObject . toString (  )  ;", "}", "@ SuppressWarnings (  {     \" rawtypes \"  ,     \" unchecked \"     }  )", "NotationParser < String ,    T >    parser    =    new   internal . typeconversion . NotationConverterToNotationParserAdapter < String ,    T >  ( new   EnumFromCharSequenceNotationParser ( targetType )  )  ;", "T   parsedLiteral    =    parser . parseNotation ( literal )  ;", "return   targetType . cast ( parsedLiteral )  ;", "}    catch    ( TypeConversionException   e )     {", "throw   new   IllegalArgumentException ( String . format (  \" Can ' t   convert    '  % s '    to   enum   type    '  % s '  \"  ,    sourceObject ,    targetType . getSimpleName (  )  )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["adaptToEnum"], "fileName": "org.gradle.tooling.internal.adapter.ProtocolToModelAdapter"}, {"methodBody": ["METHOD_START", "{", "if    ( targetType   instanceof   ParameterizedType )     {", "ParameterizedType   parameterizedTargetType    =     (  ( ParameterizedType )     ( targetType )  )  ;", "if    (  ( parameterizedTargetType . getRawType (  )  )    instanceof   Class )     {", "Class <  ?  >    rawClass    =     (  ( Class <  ?  >  )     ( parameterizedTargetType . getRawType (  )  )  )  ;", "if    ( Iterable . class . isAssignableFrom ( rawClass )  )     {", "Type   targetElementType    =     . getElementType ( parameterizedTargetType ,     0  )  ;", "return    . convertCollectionInternal ( rawClass ,    targetElementType ,     (  ( Iterable <  ?  >  )     ( sourceObject )  )  ,    decoration ,    graphDetails )  ;", "}", "if    ( Map . class . isAssignableFrom ( rawClass )  )     {", "Type   targetKeyType    =     . getElementType ( parameterizedTargetType ,     0  )  ;", "Type   targetValueType    =     . getElementType ( parameterizedTargetType ,     1  )  ;", "return    . convertMap ( rawClass ,    targetKeyType ,    targetValueType ,     (  ( Map <  ?  ,     ?  >  )     ( sourceObject )  )  ,    decoration ,    graphDetails )  ;", "}", "}", "}", "if    ( targetType   instanceof   Class )     {", "if    (  (  ( Class )     ( targetType )  )  . isPrimitive (  )  )     {", "return   sourceObject ;", "}", "return    . createView (  (  ( Class )     ( targetType )  )  ,    sourceObject ,    decoration ,    graphDetails )  ;", "}", "throw   new   UnsupportedOperationException ( String . format (  \" Cannot   convert   object   of    % s   to    % s .  \"  ,    sourceObject . getClass (  )  ,    targetType )  )  ;", "}", "METHOD_END"], "methodName": ["convert"], "fileName": "org.gradle.tooling.internal.adapter.ProtocolToModelAdapter"}, {"methodBody": ["METHOD_START", "{", "Collection < Object >    convertedElements    =    ProtocolToModelAdapter . COLLECTION _ MAPPER . createEmptyCollection ( collectionClass )  ;", "ProtocolToModelAdapter . convertCollectionInternal ( convertedElements ,    targetElementType ,    sourceObject ,    decoration ,    graphDetails )  ;", "if    ( collectionClass . equals ( DomainObjectSet . class )  )     {", "return   new   ImmutableDomainObjectSet ( convertedElements )  ;", "} else    {", "return   convertedElements ;", "}", "}", "METHOD_END"], "methodName": ["convertCollectionInternal"], "fileName": "org.gradle.tooling.internal.adapter.ProtocolToModelAdapter"}, {"methodBody": ["METHOD_START", "{", "for    ( Object   element    :    sourceObject )     {", "targetCollection . add (  . convert ( targetElementType ,    element ,    viewDecoration ,    graphDetails )  )  ;", "}", "}", "METHOD_END"], "methodName": ["convertCollectionInternal"], "fileName": "org.gradle.tooling.internal.adapter.ProtocolToModelAdapter"}, {"methodBody": ["METHOD_START", "{", "Map < Object ,    Object >    convertedElements    =    ProtocolToModelAdapter . COLLECTION _ MAPPER . createEmptyMap ( mapClass )  ;", "for    ( Map . Entry <  ?  ,     ?  >    entry    :    sourceObject . entrySet (  )  )     {", "convertedElements . put ( ProtocolToModelAdapter . convert ( targetKeyType ,    entry . getKey (  )  ,    decoration ,    graphDetails )  ,    ProtocolToModelAdapter . convert ( targetValueType ,    entry . getValue (  )  ,    decoration ,    graphDetails )  )  ;", "}", "return   convertedElements ;", "}", "METHOD_END"], "methodName": ["convertMap"], "fileName": "org.gradle.tooling.internal.adapter.ProtocolToModelAdapter"}, {"methodBody": ["METHOD_START", "{", "if    ( sourceObject    =  =    null )     {", "return   null ;", "}", "Class <  ?    extends   T >    viewType    =    graphDetails . typeProvider . getTargetType ( targetType ,    sourceObject )  ;", "if    ( viewType . isInstance ( sourceObject )  )     {", "return   viewType . cast ( sourceObject )  ;", "}", "if    ( targetType . isEnum (  )  )     {", "return    . adaptToEnum ( targetType ,    sourceObject )  ;", "}", ". ViewDecoration   decorationsForThisType    =     ( decoration . isNoOp (  )  )     ?    decoration    :    decoration . restrictTo (  . TYPE _ INSPECTOR . getReachableTypes ( targetType )  )  ;", ". ViewKey   viewKey    =    new    . ViewKey ( viewType ,    sourceObject ,    decorationsForThisType )  ;", "Object   view    =    graphDetails . views . get ( viewKey )  ;", "if    ( view    !  =    null )     {", "return   targetType . cast ( view )  ;", "}", ". InvocationHandlerImpl   handler    =    new    . InvocationHandlerImpl ( targetType ,    sourceObject ,    decorationsForThisType ,    graphDetails )  ;", "Object   proxy    =    Proxy . newProxyInstance ( viewType . getClassLoader (  )  ,    new   Class <  ?  >  [  ]  {    viewType    }  ,    handler )  ;", "handler . attachProxy ( proxy )  ;", "return   viewType . cast ( proxy )  ;", "}", "METHOD_END"], "methodName": ["createView"], "fileName": "org.gradle.tooling.internal.adapter.ProtocolToModelAdapter"}, {"methodBody": ["METHOD_START", "{", "Type   elementType    =    type . getActualTypeArguments (  )  [ index ]  ;", "if    ( elementType   instanceof   WildcardType )     {", "WildcardType   wildcardType    =     (  ( WildcardType )     ( elementType )  )  ;", "return   wildcardType . getUpperBounds (  )  [  0  ]  ;", "}", "return   elementType ;", "}", "METHOD_END"], "methodName": ["getElementType"], "fileName": "org.gradle.tooling.internal.adapter.ProtocolToModelAdapter"}, {"methodBody": ["METHOD_START", "{", "final   ProtocolToModelAdapter . ViewGraphDetails   graphDetails    =    new   ProtocolToModelAdapter . ViewGraphDetails ( targetTypeProvider )  ;", "return   new   ObjectGraphAdapter (  )     {", "@ Override", "public    < T >    T   adapt ( Class < T >    targetType ,    Object   sourceObject )     {", "return   ProtocolToModelAdapter . createView ( targetType ,    sourceObject ,    ProtocolToModelAdapter . NO _ OP _ MAPPER ,    graphDetails )  ;", "}", "@ Override", "public    < T >    ViewBuilder < T >    builder ( Class < T >    viewType )     {", "return   new   ProtocolToModelAdapter . DefaultViewBuilder < T >  ( viewType ,    graphDetails )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["newGraph"], "fileName": "org.gradle.tooling.internal.adapter.ProtocolToModelAdapter"}, {"methodBody": ["METHOD_START", "{", "if    (  (  !  ( Proxy . isProxyClass ( viewObject . getClass (  )  )  )  )     |  |     (  !  (  ( Proxy . getInvocationHandler ( viewObject )  )    instanceof   ProtocolToModelAdapter . InvocationHandlerImpl )  )  )     {", "throw   new   IllegalArgumentException (  \" The   given   object   is   not   a   view   object \"  )  ;", "}", "ProtocolToModelAdapter . InvocationHandlerImpl   handler    =     (  ( ProtocolToModelAdapter . InvocationHandlerImpl )     ( Proxy . getInvocationHandler ( viewObject )  )  )  ;", "return   handler . sourceObject ;", "}", "METHOD_END"], "methodName": ["unpack"], "fileName": "org.gradle.tooling.internal.adapter.ProtocolToModelAdapter"}, {"methodBody": ["METHOD_START", "{", "Set < Class <  ?  >  >    types    =    inspected . get ( type )  ;", "if    ( types    =  =    null )     {", "types    =    new   HashSet < Class <  ?  >  >  (  )  ;", "visit ( type ,    types )  ;", "inspected . put ( type ,    types )  ;", "}", "return   types ;", "}", "METHOD_END"], "methodName": ["getReachableTypes"], "fileName": "org.gradle.tooling.internal.adapter.TypeInspector"}, {"methodBody": ["METHOD_START", "{", "if    ( type . isArray (  )  )     {", "visit ( type . getComponent (  )  ,    types )  ;", "return ;", "}", "if    (  (  (  !  ( type . isInterface (  )  )  )     |  |     (  !  ( types . add ( type )  )  )  )     |  |     ( stopAt . contains ( type )  )  )     {", "return ;", "}", "for    (    super    :    type . getGenericInterfaces (  )  )     {", "visit ( super ,    types )  ;", "}", "for    ( Method   method    :    type . getDeclaredMethods (  )  )     {", "visit ( method . getGenericReturn (  )  ,    types )  ;", "for    ( Variable < Method >    typeVariable    :    method . getParameters (  )  )     {", "visit ( typeVariable ,    types )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["visit"], "fileName": "org.gradle.tooling.internal.adapter.TypeInspector"}, {"methodBody": ["METHOD_START", "{", "if    ( type   instanceof   Class )     {", "visit (  (  ( Class )     ( type )  )  ,    types )  ;", "} else", "if    ( type   instanceof   Parameterize )     {", "Parameterize   parameterize    =     (  ( Parameterize )     ( type )  )  ;", "visit ( parameterize . getRa (  )  ,    types )  ;", "for      typeArg    :    parameterize . getActuaArguments (  )  )     {", "visit ( typeArg ,    types )  ;", "}", "} else", "if    ( type   instanceof   Wildcar )     {", "Wildcar   wildcar    =     (  ( Wildcar )     ( type )  )  ;", "for      bound    :    wildcar . getUpperBounds (  )  )     {", "visit ( bound ,    types )  ;", "}", "for      bound    :    wildcar . getLowerBounds (  )  )     {", "visit ( bound ,    types )  ;", "}", "} else", "if    ( type   instanceof   GenericArra )     {", "GenericArra   arra    =     (  ( GenericArra )     ( type )  )  ;", "visit ( arra . getGenericComponen (  )  ,    types )  ;", "} else", "if    ( type   instanceof   reflectVariable )     {", "reflectVariable <  ?  >    typeVariable    =     (  ( reflectVariable )     ( type )  )  ;", "for      bound    :    typeVariable . getBounds (  )  )     {", "visit ( bound ,    types )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["visit"], "fileName": "org.gradle.tooling.internal.adapter.TypeInspector"}, {"methodBody": ["METHOD_START", "{", "return   buildIdentifier ;", "}", "METHOD_END"], "methodName": ["getBuildIdentifier"], "fileName": "org.gradle.tooling.internal.build.DefaultBuildEnvironment"}, {"methodBody": ["METHOD_START", "{", "return   new   GradleEnvironment (  )     {", "@ Override", "public   File   getGradleUserHome (  )     {", "return   gradleUserHome ;", "}", "public   String   getGradleVersion (  )     {", "return   gradleVersion ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["getGradle"], "fileName": "org.gradle.tooling.internal.build.DefaultBuildEnvironment"}, {"methodBody": ["METHOD_START", "{", "return   new   JavaEnvironment (  )     {", "public   File   getJavaHome (  )     {", "return   javaHome ;", "}", "public   List < String >    getJvmArguments (  )     {", "return   jvmArguments ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["getJava"], "fileName": "org.gradle.tooling.internal.build.DefaultBuildEnvironment"}, {"methodBody": ["METHOD_START", "{", "return   new   VersionOnlyBuildEnvironment . VersionOnlyGradleEnvironment (  )  ;", "}", "METHOD_END"], "methodName": ["getGradle"], "fileName": "org.gradle.tooling.internal.build.VersionOnlyBuildEnvironment"}, {"methodBody": ["METHOD_START", "{", "operationParamsBuilder . copyFrom ( operationParameters )  ;", "}", "METHOD_END"], "methodName": ["copyFrom"], "fileName": "org.gradle.tooling.internal.consumer.AbstractLongRunningOperation"}, {"methodBody": ["METHOD_START", "{", "ConnectionParameters   connectionParameters    =    this . connectionParameters ;", "return   oParamsBuilder . setParameters ( connectionParameters )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["getConsumerOperationParameters"], "fileName": "org.gradle.tooling.internal.consumer.AbstractLongRunningOperation"}, {"methodBody": ["METHOD_START", "{", "return    ( arguments    !  =    null )     &  &     (  ( arguments . length )     >     0  )     ?    Arrays . asList ( arguments )     :    null ;", "}", "METHOD_END"], "methodName": ["rationalizeInput"], "fileName": "org.gradle.tooling.internal.consumer.AbstractLongRunningOperation"}, {"methodBody": ["METHOD_START", "{", "return    ( arguments    !  =    null )     &  &     ( arguments . iterator (  )  . hasNext (  )  )     ?    CollectionUtils . toList ( arguments )     :    null ;", "}", "METHOD_END"], "methodName": ["rationalizeInput"], "fileName": "org.gradle.tooling.internal.consumer.AbstractLongRunningOperation"}, {"methodBody": ["METHOD_START", "{", "operationParamsBuilder . setInjectedPluginClasspath ( classpath )  ;", "return   getThis (  )  ;", "}", "METHOD_END"], "methodName": ["withInjectedClassPath"], "fileName": "org.gradle.tooling.internal.consumer.AbstractLongRunningOperation"}, {"methodBody": ["METHOD_START", "{", "List < StackTraceElement >    adjusted    =    new   ArrayList < StackTraceElement >  (  )  ;", "adjusted . addAll ( Arrays . asList ( failure . getStackTrace (  )  )  )  ;", "List < StackTraceElement >    currentThreadStack    =    Arrays . asList ( Thread . currentThread (  )  . getStackTrace (  )  )  ;", "if    (  !  ( currentThreadStack . isEmpty (  )  )  )     {", "adjusted . addAll ( currentThreadStack . subList (  2  ,    currentThreadStack . size (  )  )  )  ;", "}", "failure . setStackTrace ( adjustedArray ( new   StackTraceElement [  0  ]  )  )  ;", "return   failure ;", "}", "METHOD_END"], "methodName": ["attachCallerThreadStackTrace"], "fileName": "org.gradle.tooling.internal.consumer.BlockingResultHandler"}, {"methodBody": ["METHOD_START", "{", "Object   result ;", "try    {", "result    =    queue . take (  )  ;", "}    catch    ( InterruptedException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "if    ( result   instanceof   Throwable )     {", "throw   UncheckedException . throwAsUncheckedException (  . attachCallerThreadStackTrace (  (  ( Throwable )     ( result )  )  )  )  ;", "}", "if    ( result    =  =     (  . NULL )  )     {", "return   null ;", "}", "return   resultType . cast ( result )  ;", "}", "METHOD_END"], "methodName": ["getResult"], "fileName": "org.gradle.tooling.internal.consumer.BlockingResultHandler"}, {"methodBody": ["METHOD_START", "{", "queue . add (  ( result    =  =    null    ?    BlockingResultHandler . NULL    :    result )  )  ;", "}", "METHOD_END"], "methodName": ["onComplete"], "fileName": "org.gradle.tooling.internal.consumer.BlockingResultHandler"}, {"methodBody": ["METHOD_START", "{", "queue . add ( failure )  ;", "}", "METHOD_END"], "methodName": ["onFailure"], "fileName": "org.gradle.tooling.internal.consumer.BlockingResultHandler"}, {"methodBody": ["METHOD_START", "{", "ConsumerActionExecutor   lazyConnection    =    new   LazyConsumerActionExecutor ( distribution ,    toolingImplementationLoader ,    loggingProvider ,    parameters )  ;", "ConsumerActionExecutor   cancellableConnection    =    new   CancellableConsumerActionExecutor ( lazyConnection )  ;", "ConsumerActionExecutor   progressLoggingConnection    =    new   ProgressLoggingConsumerActionExecutor ( cancellableConnection ,    loggingProvider )  ;", "ConsumerActionExecutor   rethrowingErrorsConnection    =    new   RethrowingErrorsConsumerActionExecutor ( progressLoggingConnection )  ;", "AsyncConsumerActionExecutor   asyncConnection    =    new   DefaultAsyncConsumerActionExecutor ( rethrowingErrorsConnection ,    executorFactory )  ;", "return   new   DefaultProjectConnection ( asyncConnection ,    parameters )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.tooling.internal.consumer.ConnectionFactory"}, {"methodBody": ["METHOD_START", "{", "return   toolingImplementationLoader ;", "}", "METHOD_END"], "methodName": ["getToolingImplementationLoader"], "fileName": "org.gradle.tooling.internal.consumer.ConnectionFactory"}, {"methodBody": ["METHOD_START", "{", "UnsupportedJavaRuntimeException . javaDeprecationWarning (  )  ;", "UnsupportedJavaRuntimeException . assertUsingVersion (  \" Gradle   T   API \"  ,    VERSION _  1  _  7  )  ;", "}", "METHOD_END"], "methodName": ["checkJavaVersion"], "fileName": "org.gradle.tooling.internal.consumer.ConnectorServices"}, {"methodBody": ["METHOD_START", "{", "ConnectorServices . singletonRegistry . close (  )  ;", "}", "METHOD_END"], "methodName": ["close"], "fileName": "org.gradle.tooling.internal.consumer.ConnectorServices"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultCancellationTokenSource (  )  ;", "}", "METHOD_END"], "methodName": ["createCancellationTokenSource"], "fileName": "org.gradle.tooling.internal.consumer.ConnectorServices"}, {"methodBody": ["METHOD_START", "{", "return   ConnectorServices . singletonRegistry . getFactory ( DefaultGradleConnector . class )  . create (  )  ;", "}", "METHOD_END"], "methodName": ["createConnector"], "fileName": "org.gradle.tooling.internal.consumer.ConnectorServices"}, {"methodBody": ["METHOD_START", "{", "ConnectorServices . singletonRegistry . close (  )  ;", "ConnectorServices . singletonRegistry    =    new   ConnectorServices . ConnectorServiceRegistry (  )  ;", "}", "METHOD_END"], "methodName": ["reset"], "fileName": "org.gradle.tooling.internal.consumer.ConnectorServices"}, {"methodBody": ["METHOD_START", "{", "BlockingResultHandler < Object >    handler    =    new   BlockingResultHandler < Object >  ( Object . class )  ;", "run ( handler )  ;", "return    (  ( T )     ( handler . getResult (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["run"], "fileName": "org.gradle.tooling.internal.consumer.DefaultBuildActionExecuter"}, {"methodBody": ["METHOD_START", "{", "final   ConsumerOperationParameters   operationParameters    =    getConsumerOperationParameters (  )  ;", "connection . run ( new   ConsumerAction < T >  (  )     {", "public   ConsumerOperationParameters   getParameters (  )     {", "return   operationParameters ;", "}", "public   T   run ( ConsumerConnection   connection )     {", "T   result    =    connection . run ( buildAction ,    operationParameters )  ;", "return   result ;", "}", "}  ,    new   ResultHandlerAdapter < T >  ( handler ,    new   ExceptionTransformer ( new   api . Transformer < String ,    Throwable >  (  )     {", "@ Override", "public   String   transform ( Throwable   throwable )     {", "return   String . format (  \" Could   not   run   build   action   using    % s .  \"  ,    connection . getDisplayName (  )  )  ;", "}", "}  )  )  )  ;", "}", "METHOD_END"], "methodName": ["run"], "fileName": "org.gradle.tooling.internal.consumer.DefaultBuildActionExecuter"}, {"methodBody": ["METHOD_START", "{", "preprocessLaunchables ( launchables )  ;", "operationParamsBuilder . setLaunchables ( launchables )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["forLaunchables"], "fileName": "org.gradle.tooling.internal.consumer.DefaultBuildLauncher"}, {"methodBody": ["METHOD_START", "{", "return   forLaunchables ( Arrays . asList ( launchables )  )  ;", "}", "METHOD_END"], "methodName": ["forLaunchables"], "fileName": "org.gradle.tooling.internal.consumer.DefaultBuildLauncher"}, {"methodBody": ["METHOD_START", "{", "forLaunchables ( tasks )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["forTasks"], "fileName": "org.gradle.tooling.internal.consumer.DefaultBuildLauncher"}, {"methodBody": ["METHOD_START", "{", "operationParamsBuilder . setTasks ( Arrays . asList ( tasks )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["forTasks"], "fileName": "org.gradle.tooling.internal.consumer.DefaultBuildLauncher"}, {"methodBody": ["METHOD_START", "{", "forTasks ( Arrays . asList ( tasks )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["forTasks"], "fileName": "org.gradle.tooling.internal.consumer.DefaultBuildLauncher"}, {"methodBody": ["METHOD_START", "{", "BlockingResultHandler < Void >    handler    =    new   BlockingResultHandler < Void >  ( Void . class )  ;", "run ( handler )  ;", "handler . getResult (  )  ;", "}", "METHOD_END"], "methodName": ["run"], "fileName": "org.gradle.tooling.internal.consumer.DefaultBuildLauncher"}, {"methodBody": ["METHOD_START", "{", "final   ConsumerOperationParameters   operationParameters    =    getConsumerOperationParameters (  )  ;", "connection . run ( new   ConsumerAction < Void >  (  )     {", "public   ConsumerOperationParameters   getParameters (  )     {", "return   operationParameters ;", "}", "public   Void   run ( ConsumerConnection   connection )     {", "Void   sink    =    connection . run ( Void . class ,    operationParameters )  ;", "return   sink ;", "}", "}  ,    new    . ResultHandlerAdapter ( handler )  )  ;", "}", "METHOD_END"], "methodName": ["run"], "fileName": "org.gradle.tooling.internal.consumer.DefaultBuildLauncher"}, {"methodBody": ["METHOD_START", "{", "tokenImpl . token . cancel (  )  ;", "}", "METHOD_END"], "methodName": ["cancel"], "fileName": "org.gradle.tooling.internal.consumer.DefaultCancellationTokenSource"}, {"methodBody": ["METHOD_START", "{", "return   tokenImpl ;", "}", "METHOD_END"], "methodName": ["token"], "fileName": "org.gradle.tooling.internal.consumer.DefaultCancellationTokenSource"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultConnectionParameters . Builder (  )  ;", "}", "METHOD_END"], "methodName": ["builder"], "fileName": "org.gradle.tooling.internal.consumer.DefaultConnectionParameters"}, {"methodBody": ["METHOD_START", "{", "return   GradleVersion . current (  )  . getVersion (  )  ;", "}", "METHOD_END"], "methodName": ["getConsumerVersion"], "fileName": "org.gradle.tooling.internal.consumer.DefaultConnectionParameters"}, {"methodBody": ["METHOD_START", "{", "return   daemonBaseDir ;", "}", "METHOD_END"], "methodName": ["getDaemonBaseDir"], "fileName": "org.gradle.tooling.internal.consumer.DefaultConnectionParameters"}, {"methodBody": ["METHOD_START", "{", "return   daemonMaxIdleTimeUnits ;", "}", "METHOD_END"], "methodName": ["getDaemonMaxIdleTimeUnits"], "fileName": "org.gradle.tooling.internal.consumer.DefaultConnectionParameters"}, {"methodBody": ["METHOD_START", "{", "return   daemonMaxIdleTimeValue ;", "}", "METHOD_END"], "methodName": ["getDaemonMaxIdleTimeValue"], "fileName": "org.gradle.tooling.internal.consumer.DefaultConnectionParameters"}, {"methodBody": ["METHOD_START", "{", "return   gradleUserHomeDir ;", "}", "METHOD_END"], "methodName": ["getGradleUserHomeDir"], "fileName": "org.gradle.tooling.internal.consumer.DefaultConnectionParameters"}, {"methodBody": ["METHOD_START", "{", "return   verboseLogging ;", "}", "METHOD_END"], "methodName": ["getVerboseLogging"], "fileName": "org.gradle.tooling.internal.consumer.DefaultConnectionParameters"}, {"methodBody": ["METHOD_START", "{", "return   embedded ;", "}", "METHOD_END"], "methodName": ["isEmbedded"], "fileName": "org.gradle.tooling.internal.consumer.DefaultConnectionParameters"}, {"methodBody": ["METHOD_START", "{", "return   Executors . newSingleThreadExecutor (  )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.tooling.internal.consumer.DefaultExecutorServiceFactory"}, {"methodBody": ["METHOD_START", "{", "StringWriter   out    =    new   StringWriter (  )  ;", "PrintWriter   wrt    =    new   PrintWriter ( out )  ;", "t . printStackTrace ( wrt )  ;", "Throwable   cause    =    t . getCause (  )  ;", "causeFailure    =     (  ( cause    !  =    null )     &  &     ( cause    !  =    t )  )     ?     . fromThrowable ( cause )     :    null ;", "return   new    ( t . getMessage (  )  ,    out . toString (  )  ,    Collections . singletonList ( causeFailure )  )  ;", "}", "METHOD_END"], "methodName": ["fromThrowable"], "fileName": "org.gradle.tooling.internal.consumer.DefaultFailure"}, {"methodBody": ["METHOD_START", "{", "ConnectorServices . close (  )  ;", "}", "METHOD_END"], "methodName": ["close"], "fileName": "org.gradle.tooling.internal.consumer.DefaultGradleConnector"}, {"methodBody": ["METHOD_START", "{", "DefaultGradleConnector . LOGGER . debug (  \" Connecting   from   tooling   API   consumer   version    {  }  \"  ,    GradleVersion . current (  )  . getVersion (  )  )  ;", "ConnectionParameters   connectionParameters    =    connectionParamsBuilder . build (  )  ;", "if    (  ( connectionParameters . getProjectDir (  )  )     =  =    null )     {", "throw   new   IllegalStateException (  \" A   project   directory   must   be   specified   before   creating   a   connection .  \"  )  ;", "}", "if    (  ( distribution )     =  =    null )     {", "distribution    =    distributionFactory . getDefaultDistribution ( connectionParameters . getProjectDir (  )  ,     (  ( connectionParameters . isSearchUpwards (  )  )     !  =    null    ?    connectionParameters . isSearchUpwards (  )     :    true )  )  ;", "}", "return   connectionFactory . create ( distribution ,    connectionParameters )  ;", "}", "METHOD_END"], "methodName": ["connect"], "fileName": "org.gradle.tooling.internal.consumer.DefaultGradleConnector"}, {"methodBody": ["METHOD_START", "{", "connectionParamsBuilder . setDaemonBaseDir ( daemonBaseDir )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["daemonBaseDir"], "fileName": "org.gradle.tooling.internal.consumer.DefaultGradleConnector"}, {"methodBody": ["METHOD_START", "{", "connectionParamsBuilder . setDaemonMaxIdleTimeValue ( timeoutValue )  ;", "connectionParamsBuilder . setDaemonMaxIdleTimeUnits ( timeoutUnits )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["daemonMaxIdleTime"], "fileName": "org.gradle.tooling.internal.consumer.DefaultGradleConnector"}, {"methodBody": ["METHOD_START", "{", "connectionParamsBuilder . setEmbedded ( embedded )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["embedded"], "fileName": "org.gradle.tooling.internal.consumer.DefaultGradleConnector"}, {"methodBody": ["METHOD_START", "{", "connectionParamsBuilder . setProjectDir ( projectDir )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["forProjectDirectory"], "fileName": "org.gradle.tooling.internal.consumer.DefaultGradleConnector"}, {"methodBody": ["METHOD_START", "{", "return   connectionFactory ;", "}", "METHOD_END"], "methodName": ["getConnectionFactory"], "fileName": "org.gradle.tooling.internal.consumer.DefaultGradleConnector"}, {"methodBody": ["METHOD_START", "{", "connectionParamsBuilder . setSearchUpwards ( searchUpwards )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["searchUpwards"], "fileName": "org.gradle.tooling.internal.consumer.DefaultGradleConnector"}, {"methodBody": ["METHOD_START", "{", "connectionParamsBuilder . setVerboseLogging ( verboseLogging )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setVerboseLogging"], "fileName": "org.gradle.tooling.internal.consumer.DefaultGradleConnector"}, {"methodBody": ["METHOD_START", "{", "distribution    =    null ;", "return   this ;", "}", "METHOD_END"], "methodName": ["useBuildDistribution"], "fileName": "org.gradle.tooling.internal.consumer.DefaultGradleConnector"}, {"methodBody": ["METHOD_START", "{", "distribution    =    distributionFactory . getClasspathDistribution (  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["useClasspathDistribution"], "fileName": "org.gradle.tooling.internal.consumer.DefaultGradleConnector"}, {"methodBody": ["METHOD_START", "{", "distribution    =    distributionFactory . getDistribution ( gradleDistribution )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["useDistribution"], "fileName": "org.gradle.tooling.internal.consumer.DefaultGradleConnector"}, {"methodBody": ["METHOD_START", "{", "distributionFactory . setDistributionBaseDir ( distributionBaseDir )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["useDistributionBaseDir"], "fileName": "org.gradle.tooling.internal.consumer.DefaultGradleConnector"}, {"methodBody": ["METHOD_START", "{", "connectionParamsBuilder . setGradleUserHomeDir ( gradleUserHomeDir )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["useGradleUserHomeDir"], "fileName": "org.gradle.tooling.internal.consumer.DefaultGradleConnector"}, {"methodBody": ["METHOD_START", "{", "distribution    =    distributionFactory . getDistribution ( gradleVersion )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["useGradleVersion"], "fileName": "org.gradle.tooling.internal.consumer.DefaultGradleConnector"}, {"methodBody": ["METHOD_START", "{", "distribution    =    distributionFactory . getDistribution ( gradleHome )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["useInstallation"], "fileName": "org.gradle.tooling.internal.consumer.DefaultGradleConnector"}, {"methodBody": ["METHOD_START", "{", "return   className ;", "}", "METHOD_END"], "methodName": ["getClassName"], "fileName": "org.gradle.tooling.internal.consumer.DefaultInternalJvmTestRequest"}, {"methodBody": ["METHOD_START", "{", "return   methodName ;", "}", "METHOD_END"], "methodName": ["getMethodName"], "fileName": "org.gradle.tooling.internal.consumer.DefaultInternalJvmTestRequest"}, {"methodBody": ["METHOD_START", "{", "List < String >    rationalizedTasks    =    AbstractLongRunningOperation . rationalizeInput ( tasks )  ;", "operationParams . setTasks ( rationalizedTasks )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["forTasks"], "fileName": "org.gradle.tooling.internal.consumer.DefaultModelBuilder"}, {"methodBody": ["METHOD_START", "{", "BlockingResultHandler < T >    handler    =    new   BlockingResultHandler < T >  ( modelType )  ;", "get ( handler )  ;", "return   handler . getResult (  )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "org.gradle.tooling.internal.consumer.DefaultModelBuilder"}, {"methodBody": ["METHOD_START", "{", "final   ConsumerOperationParameters   operationParameters    =    getConsumerOperationParameters (  )  ;", "connection . run ( new   ConsumerAction < T >  (  )     {", "public   ConsumerOperationParameters   getParameters (  )     {", "return   operationParameters ;", "}", "public   T   run ( ConsumerConnection   connection )     {", "T   model    =    connection . run ( modelType ,    operationParameters )  ;", "return   model ;", "}", "}  ,    new   ResultHandlerAdapter < T >  ( handler )  )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "org.gradle.tooling.internal.consumer.DefaultModelBuilder"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultBuildActionExecuter < T >  ( buildAction ,    connection ,    parameters )  ;", "}", "METHOD_END"], "methodName": ["action"], "fileName": "org.gradle.tooling.internal.consumer.DefaultProjectConnection"}, {"methodBody": ["METHOD_START", "{", "connection . stop (  )  ;", "}", "METHOD_END"], "methodName": ["close"], "fileName": "org.gradle.tooling.internal.consumer.DefaultProjectConnection"}, {"methodBody": ["METHOD_START", "{", "return   model ( modelType )  . get (  )  ;", "}", "METHOD_END"], "methodName": ["getModel"], "fileName": "org.gradle.tooling.internal.consumer.DefaultProjectConnection"}, {"methodBody": ["METHOD_START", "{", "model ( modelType )  . get ( handler )  ;", "}", "METHOD_END"], "methodName": ["getModel"], "fileName": "org.gradle.tooling.internal.consumer.DefaultProjectConnection"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( modelType . isInterface (  )  )  )     {", "throw   new   IllegalArgumentException ( String . format (  \" Cannot   fetch   a   model   of   type    '  % s '    as   this   type   is   not   an   interface .  \"  ,    modelType . getName (  )  )  )  ;", "}", "return   new   DefaultModelBuilder < T >  ( modelType ,    c ,    parameters )  ;", "}", "METHOD_END"], "methodName": ["model"], "fileName": "org.gradle.tooling.internal.consumer.DefaultProjectConnection"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultBuildLauncher ( connection ,    parameters )  ;", "}", "METHOD_END"], "methodName": ["newBuild"], "fileName": "org.gradle.tooling.internal.consumer.DefaultProjectConnection"}, {"methodBody": ["METHOD_START", "{", "BlockingResultHandler < Void >    handler    =    new   BlockingResultHandler < Void >  ( Void . class )  ;", "run ( handler )  ;", "handler . getResult (  )  ;", "}", "METHOD_END"], "methodName": ["run"], "fileName": "org.gradle.tooling.internal.consumer.DefaultTestLauncher"}, {"methodBody": ["METHOD_START", "{", "if    (  ( operationDescriptors . isEmpty (  )  )     &  &     ( internalJvmTestRequests . isEmpty (  )  )  )     {", "throw   new   TestExecutionException (  \" No   test   declared   for   execution .  \"  )  ;", "}", "final   ConsumerOperationParameters   operationParameters    =    getConsumerOperationParameters (  )  ;", "final   TestExecutionRequest   testExecutionRequest    =    new   TestExecutionRequest ( operationDescriptors ,    ImmutableList . copyOf ( testClassNames )  ,    ImmutableSet . copyOf ( internalJvmTestRequests )  )  ;", "connection . run ( new   ConsumerAction < Void >  (  )     {", "public   ConsumerOperationParameters   getParameters (  )     {", "return   operationParameters ;", "}", "public   Void   run ( ConsumerConnection   connection )     {", "connection . runTests ( testExecutionRequest ,    getParameters (  )  )  ;", "return   null ;", "}", "}  ,    new    . ResultHandlerAdapter ( handler )  )  ;", "}", "METHOD_END"], "methodName": ["run"], "fileName": "org.gradle.tooling.internal.consumer.DefaultTestLauncher"}, {"methodBody": ["METHOD_START", "{", "return   new   DistributionFactory . ClasspathDistribution (  )  ;", "}", "METHOD_END"], "methodName": ["getClasspathDistribution"], "fileName": "org.gradle.tooling.internal.consumer.DistributionFactory"}, {"methodBody": ["METHOD_START", "{", "BuildLayout   layout    =    new   BuildLayoutFactory (  )  . getLayoutFor ( projectDir ,    searchUpwards )  ;", "WrapperExecutor   wrapper    =    WrapperExecutor . forProjectDirectory ( layout . getRootDirectory (  )  )  ;", "if    (  ( wrapper . getDistribution (  )  )     !  =    null )     {", "return   new    . ZippedDistribution ( wrapper . getConfiguration (  )  ,    distributionBaseDir ,    clock )  ;", "}", "return   getDownloadedDistribution ( GradleVersion . current (  )  . getVersion (  )  )  ;", "}", "METHOD_END"], "methodName": ["getDefaultDistribution"], "fileName": "org.gradle.tooling.internal.consumer.DistributionFactory"}, {"methodBody": ["METHOD_START", "{", "return   new   DistributionFactory . InstalledDistribution ( gradleHomeDir ,     (  (  \" Gradle   installation    '  \"     +    gradleHomeDir )     +     \"  '  \"  )  ,     (  (  \" Gradle   installation   directory    '  \"     +    gradleHomeDir )     +     \"  '  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["getDistribution"], "fileName": "org.gradle.tooling.internal.consumer.DistributionFactory"}, {"methodBody": ["METHOD_START", "{", "return   getDownloadedDistribution ( gradleVersion )  ;", "}", "METHOD_END"], "methodName": ["getDistribution"], "fileName": "org.gradle.tooling.internal.consumer.DistributionFactory"}, {"methodBody": ["METHOD_START", "{", "WrapperConfiguration   configuration    =    new   WrapperConfiguration (  )  ;", "configuration . setDistribution ( gradleDistribution )  ;", "return   new    . ZippedDistribution ( configuration ,    distributionBaseDir ,    clock )  ;", "}", "METHOD_END"], "methodName": ["getDistribution"], "fileName": "org.gradle.tooling.internal.consumer.DistributionFactory"}, {"methodBody": ["METHOD_START", "{", "URI   distUri    =    new   DistributionLocator (  )  . getDistributionFor ( GradleVersion . version ( gradleVersion )  )  ;", "return   getDistribution ( distUri )  ;", "}", "METHOD_END"], "methodName": ["getDownloadedDistribution"], "fileName": "org.gradle.tooling.internal.consumer.DistributionFactory"}, {"methodBody": ["METHOD_START", "{", "this . distributionBaseDir    =    distributionBaseDir ;", "}", "METHOD_END"], "methodName": ["setDistributionBaseDir"], "fileName": "org.gradle.tooling.internal.consumer.DistributionFactory"}, {"methodBody": ["METHOD_START", "{", "synchronized ( lock )     {", "canced    =    true ;", "lock . notifyAll (  )  ;", "}", "}", "METHOD_END"], "methodName": ["cancel"], "fileName": "org.gradle.tooling.internal.consumer.DistributionInstaller"}, {"methodBody": ["METHOD_START", "{", "String   displayName    =     \" Download    \"     +    address ;", "OperationDescriptor   descriptor    =    new   COperationDescriptor ( displayName )  ;", "long   startTime    =    clock . getCurrentTime (  )  ;", "buildProgressListener . onEvent ( new   DefaultStartEvent ( startTime ,     ( displayName    +     \"    started \"  )  ,    descriptor )  )  ;", "Throwable   failure    =    null ;", "try    {", "withProgressLogging ( address ,    destination ,    descriptor )  ;", "}    catch    ( Throwable   t )     {", "failure    =    t ;", "}", "long   endTime    =    clock . getCurrentTime (  )  ;", "OperationResult   result    =     ( failure    =  =    null )     ?    new   DefaultOperationSuccessResult ( startTime ,    endTime )     :    new   DefaultOperationFailureResult ( startTime ,    endTime ,    Collections . singletonList ( DefaultFailure . fromThrowable ( failure )  )  )  ;", "buildProgressListener . onEvent ( new   DefaultFinishEvent ( endTime ,     ( displayName    +     \"    finished \"  )  ,    descriptor ,    result )  )  ;", "if    ( failure    !  =    null )     {", "if    ( failure   instanceof   Exception )     {", "throw    (  ( Exception )     ( failure )  )  ;", "}", "throw   UncheckedException . throwAsUncheckedException ( failure )  ;", "}", "}", "METHOD_END"], "methodName": ["doDownload"], "fileName": "org.gradle.tooling.internal.consumer.DistributionInstaller"}, {"methodBody": ["METHOD_START", "{", "Install   install    =    new   Install ( new   Logger ( false )  ,    new   DistributionInstaller . AsyncDownload (  )  ,    new   PathAssembler ( userHomeDir )  )  ;", "return   install . createDist ( wrapperConfiguration )  ;", "}", "METHOD_END"], "methodName": ["install"], "fileName": "org.gradle.tooling.internal.consumer.DistributionInstaller"}, {"methodBody": ["METHOD_START", "{", "currentListener . set ( buildProgressListener )  ;", "try    {", "Thread   thread    =    new   Thread (  \" Distribution   download \"  )     {", "@ Override", "public   void   run (  )     {", "try    {", "new   Download ( new   Logger ( false )  ,    new    . ForwardingDownloadProgressListener ( operationDescriptor )  ,     . APP _ NAME ,    GradleVersion . current (  )  . getVersion (  )  )  . download ( address ,    destination )  ;", "}    catch    ( Throwable   t )     {", "synchronized ( lock )     {", "failure    =    t ;", "}", "}    finally    {", "synchronized ( lock )     {", "completed    =    true ;", "lock . notifyAll (  )  ;", "}", "}", "}", "}  ;", "thread . setDaemon ( true )  ;", "thread . start (  )  ;", "synchronized ( lock )     {", "while    (  (  !  ( completed )  )     &  &     (  !  ( cancelled )  )  )     {", "try    {", "lock . wait (  )  ;", "}    catch    ( InterruptedException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "}", "if    (  ( failure )     !  =    null )     {", "throw   failure ;", "}", "if    ( cancelled )     {", "thread . interrupt (  )  ;", "throw   new   CancellationException (  )  ;", "}", "}", "}    finally    {", "currentListener . set (  . NO _ OP )  ;", "}", "}", "METHOD_END"], "methodName": ["withAsyncDownload"], "fileName": "org.gradle.tooling.internal.consumer.DistributionInstaller"}, {"methodBody": ["METHOD_START", "{", "ProgressLogger   progressLogger    =    progressLoggerFactory . newOperation ( DistributionInstaller . class )  ;", "progressLogger . setDescription (  (  \" Download    \"     +    address )  )  ;", "progressLogger . started (  )  ;", "try    {", "withAsyncDownload ( address ,    destination ,    operationDescriptor )  ;", "}    finally    {", "progressLogger . completed (  )  ;", "}", "}", "METHOD_END"], "methodName": ["withProgressLogging"], "fileName": "org.gradle.tooling.internal.consumer.DistributionInstaller"}, {"methodBody": ["METHOD_START", "{", "return   connectionFailureProvider . transform ( failure )  ;", "}", "METHOD_END"], "methodName": ["connectionFailureMessage"], "fileName": "org.gradle.tooling.internal.consumer.ExceptionTransformer"}, {"methodBody": ["METHOD_START", "{", "handler . onComplete ( result )  ;", "}", "METHOD_END"], "methodName": ["onComplete"], "fileName": "org.gradle.tooling.internal.consumer.ResultHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "handler . onFailure ( exceptionTransformer . transform ( failure )  )  ;", "}", "METHOD_END"], "methodName": ["onFailure"], "fileName": "org.gradle.tooling.internal.consumer.ResultHandlerAdapter"}, {"methodBody": ["METHOD_START", "{", "return   services (  )  . listenerManager ;", "}", "METHOD_END"], "methodName": ["getListenerManager"], "fileName": "org.gradle.tooling.internal.consumer.SynchronizedLogging"}, {"methodBody": ["METHOD_START", "{", "return   services (  )  . progressLoggerFactory ;", "}", "METHOD_END"], "methodName": ["getProgressLoggerFactory"], "fileName": "org.gradle.tooling.internal.consumer.SynchronizedLogging"}, {"methodBody": ["METHOD_START", "{", "SynchronizedLogging . ThreadLoggingServices   threadServices    =    services . get (  )  ;", "if    ( threadServices    =  =    null )     {", "DefaultListenerManager   manager    =    new   DefaultListenerManager (  )  ;", "DefaultProgressLoggerFactory   progressLoggerFactory    =    new   DefaultProgressLoggerFactory ( manager . getBroadcaster ( ProgressListener . class )  ,    clock )  ;", "threadServices    =    new   SynchronizedLogging . ThreadLoggingServices ( manager ,    progressLoggerFactory )  ;", "services . set ( threadServices )  ;", "}", "return   threadServices ;", "}", "METHOD_END"], "methodName": ["services"], "fileName": "org.gradle.tooling.internal.consumer.SynchronizedLogging"}, {"methodBody": ["METHOD_START", "{", "return   CollectionUtils . collect ( operationDescriptors ,    new   Transformer < InternalTestDescriptor ,    OperationDescriptor >  (  )     {", "@ Override", "public   InternalTestDescriptor   transform ( OperationDescriptor   operationDescriptor )     {", "return    (  ( InternalTestDescriptor )     (  (  ( OperationDescriptorWrapper )     ( operationDescriptor )  )  . getInternalOperationDescriptor (  )  )  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["adaptDescriptors"], "fileName": "org.gradle.tooling.internal.consumer.TestExecutionRequest"}, {"methodBody": ["METHOD_START", "{", "return   internalJvmTestRequests ;", "}", "METHOD_END"], "methodName": ["getInternalJvmTestRequests"], "fileName": "org.gradle.tooling.internal.consumer.TestExecutionRequest"}, {"methodBody": ["METHOD_START", "{", "return   testClassNames ;", "}", "METHOD_END"], "methodName": ["getTestClassNames"], "fileName": "org.gradle.tooling.internal.consumer.TestExecutionRequest"}, {"methodBody": ["METHOD_START", "{", "return   actionExecutor . getDisplayName (  )  ;", "}", "METHOD_END"], "methodName": ["getDisplayName"], "fileName": "org.gradle.tooling.internal.consumer.async.DefaultAsyncConsumerActionExecutor"}, {"methodBody": ["METHOD_START", "{", "lifecycle . use ( new   Runnable (  )     {", "public   void   run (  )     {", "executor . execute ( new   Runnable (  )     {", "public   void   run (  )     {", "T   result ;", "try    {", "result    =    a . run ( action )  ;", "}    catch    ( Throwable   t )     {", "handler . onFailure ( t )  ;", "return ;", "}", "handler . onComplete ( result )  ;", "}", "}  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["run"], "fileName": "org.gradle.tooling.internal.consumer.async.DefaultAsyncConsumerActionExecutor"}, {"methodBody": ["METHOD_START", "{", "CompositeStoppable . stoppable ( lifecycle ,    executor ,    actionExecutor )  . stop (  )  ;", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "org.gradle.tooling.internal.consumer.async.DefaultAsyncConsumerActionExecutor"}, {"methodBody": ["METHOD_START", "{", "return   findModel ( null ,    modelType )  ;", "}", "METHOD_END"], "methodName": ["findModel"], "fileName": "org.gradle.tooling.internal.consumer.connection.AbstractBuildController"}, {"methodBody": ["METHOD_START", "{", "return   findModel ( null ,    modelType ,    parameterType ,    parameterInitializer )  ;", "}", "METHOD_END"], "methodName": ["findModel"], "fileName": "org.gradle.tooling.internal.consumer.connection.AbstractBuildController"}, {"methodBody": ["METHOD_START", "{", "return   findModel ( target ,    modelType ,    null ,    null )  ;", "}", "METHOD_END"], "methodName": ["findModel"], "fileName": "org.gradle.tooling.internal.consumer.connection.AbstractBuildController"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   getModel ( target ,    modelType ,    parameterType ,    parameterInitializer )  ;", "}    catch    ( UnsupportedVersionExcep   e )     {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["findModel"], "fileName": "org.gradle.tooling.internal.consumer.connection.AbstractBuildController"}, {"methodBody": ["METHOD_START", "{", "return   getModel ( null ,    GradleBuild . class )  ;", "}", "METHOD_END"], "methodName": ["getBuildModel"], "fileName": "org.gradle.tooling.internal.consumer.connection.AbstractBuildController"}, {"methodBody": ["METHOD_START", "{", "return   getModel ( null ,    modelType )  ;", "}", "METHOD_END"], "methodName": ["getModel"], "fileName": "org.gradle.tooling.internal.consumer.connection.AbstractBuildController"}, {"methodBody": ["METHOD_START", "{", "return   getModel ( null ,    modelType ,    parameterType ,    parameterInitializer )  ;", "}", "METHOD_END"], "methodName": ["getModel"], "fileName": "org.gradle.tooling.internal.consumer.connection.AbstractBuildController"}, {"methodBody": ["METHOD_START", "{", "return   getModel ( target ,    modelType ,    null ,    null )  ;", "}", "METHOD_END"], "methodName": ["getModel"], "fileName": "org.gradle.tooling.internal.consumer.connection.AbstractBuildController"}, {"methodBody": ["METHOD_START", "{", "return   delegate ;", "}", "METHOD_END"], "methodName": ["getDelegate"], "fileName": "org.gradle.tooling.internal.consumer.connection.AbstractConsumerConnection"}, {"methodBody": ["METHOD_START", "{", "return   delegate . getMetaData (  )  . getDisplayName (  )  ;", "}", "METHOD_END"], "methodName": ["getDisplayName"], "fileName": "org.gradle.tooling.internal.consumer.connection.AbstractConsumerConnection"}, {"methodBody": ["METHOD_START", "{", "return   providerMetaData ;", "}", "METHOD_END"], "methodName": ["getVersionDetails"], "fileName": "org.gradle.tooling.internal.consumer.connection.AbstractConsumerConnection"}, {"methodBody": ["METHOD_START", "{", "return   getModelProducer (  )  . produceModel ( type ,    operationParameters )  ;", "}", "METHOD_END"], "methodName": ["run"], "fileName": "org.gradle.tooling.internal.consumer.connection.AbstractConsumerConnection"}, {"methodBody": ["METHOD_START", "{", "return   getActionRunner (  )  . run ( action ,    operationParameters )  ;", "}", "METHOD_END"], "methodName": ["run"], "fileName": "org.gradle.tooling.internal.consumer.connection.AbstractConsumerConnection"}, {"methodBody": ["METHOD_START", "{", "throw   Exceptions . unsupportedFeature ( operationParameters . getEntryPointName (  )  ,    getVersionDetails (  )  . getVersion (  )  ,     \"  2  .  6  \"  )  ;", "}", "METHOD_END"], "methodName": ["runTests"], "fileName": "org.gradle.tooling.internal.consumer.connection.AbstractConsumerConnection"}, {"methodBody": ["METHOD_START", "{", "if    ( target   instanceof   ProjectModel )     {", "return    (  ( ProjectModel )     ( target )  )  . getProjectIdentifier (  )  . getProjectPath (  )  ;", "} else    {", "return    \"  :  \"  ;", "}", "}", "METHOD_END"], "methodName": ["getProjectPath"], "fileName": "org.gradle.tooling.internal.consumer.connection.BuildControllerAdapter"}, {"methodBody": ["METHOD_START", "{", "validateParameters ( parameterType ,    parameterInitializer )  ;", "if    ( parameterType    !  =    null )     {", "P   parameter    =    parameterType . cast ( Proxy . newProxyInstance ( parameterType . getClassLoader (  )  ,    new   Class [  ]  {    parameterType    }  ,    new   TParameterProxy (  )  )  )  ;", "parameterInitializer . execute ( parameter )  ;", "return   parameter ;", "} else    {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["initializeParameter"], "fileName": "org.gradle.tooling.internal.consumer.connection.BuildControllerAdapter"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( parameterType    =  =    null )     &  &     ( parameterInitializer    !  =    null )  )     |  |     (  ( parameterType    !  =    null )     &  &     ( parameterInitializer    =  =    null )  )  )     {", "throw   new   NullPointerException (  \" parameterType   and   parameterInitializer   both   need   to   be   set   for   a   parametrized   model   request .  \"  )  ;", "}", "if    ( parameterType    !  =    null )     {", "TParameterProxy . validateParameter ( parameterType )  ;", "}", "}", "METHOD_END"], "methodName": ["validateParameters"], "fileName": "org.gradle.tooling.internal.consumer.connection.BuildControllerAdapter"}, {"methodBody": ["METHOD_START", "{", "if    ( type . equals ( BuildInvocations . class )  )     {", "if    (  !  ( versionDetails . maySupportModel ( GradleProject . class )  )  )     {", "throw   Exceptions . unsupportedModel ( type ,    versionDetails . getVersion (  )  )  ;", "}", "GradleProject   gradleProject    =    delegate . produceModel ( GradleProject . class ,    operationParameters )  ;", "return   adapter . adapt ( type ,    new   BuildInvocationsConverter (  )  . convert ( gradleProject )  )  ;", "}", "return   delegate . produceModel ( type ,    operationParameters )  ;", "}", "METHOD_END"], "methodName": ["produceModel"], "fileName": "org.gradle.tooling.internal.consumer.connection.BuildInvocationsAdapterProducer"}, {"methodBody": ["METHOD_START", "{", "return   executor . run ( buildActionAdapter ,    cancellationTokenAdapter ,    operationParameters )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.tooling.internal.consumer.connection.CancellableActionRunner"}, {"methodBody": ["METHOD_START", "{", "File   rootDir    =    operationParameters . getProjectDir (  )  ;", "BuildResult < T >    result ;", "try    {", "try    {", "result    =    execute ( new   InternalBuildActionAdapter < T >  ( action ,    rootDir ,    versionDetails )  ,    new   BuildtionTokenAdapter ( operationParameters . gettionToken (  )  )  ,    operationParameters )  ;", "}    catch    ( RuntimeException   e )     {", "throw   exceptionTransformer . transform ( e )  ;", "}", "}    catch    ( InternalBuildActionFailureException   e )     {", "throw   new   BuildActionFailureException (  \" The   supplied   build   action   failed   with   an   exception .  \"  ,    e . getCause (  )  )  ;", "}", "return   result . getModel (  )  ;", "}", "METHOD_END"], "methodName": ["run"], "fileName": "org.gradle.tooling.internal.consumer.connection.CancellableActionRunner"}, {"methodBody": ["METHOD_START", "{", "return   new   PluginClasspathInjectionSupportedCheckModelProducer ( getVersionDetails (  )  . getVersion (  )  ,    new   CancellableModelBuilderBackedModelProducer ( adapter ,    getVersionDetails (  )  ,    modelMapping ,    connection ,    exceptionTransformer )  )  ;", "}", "METHOD_END"], "methodName": ["createModelProducer"], "fileName": "org.gradle.tooling.internal.consumer.connection.CancellableConsumerConnection"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( versionDetails . maySupportModel ( type )  )  )     {", "throw   Exceptions . unsupportedModel ( type ,    versionDetails . getVersion (  )  )  ;", "}", "final   ModelIdentifier   modelIdentifier    =    modelMapping . getModelIdentifierFromModelType ( type )  ;", "BuildResult <  ?  >    result ;", "try    {", "result    =    builder . getModel ( modelIdentifier ,    new   BuildtionTokenAdapter ( operationParameters . gettionToken (  )  )  ,    operationParameters )  ;", "}    catch    ( InternalUnsupportedModelException   e )     {", "throw   Exceptions . unknownModel ( type ,    e )  ;", "}    catch    ( RuntimeException   e )     {", "throw   exceptionTransformer . transform ( e )  ;", "}", "return   applyCompatibilityMapping ( adapter . builder ( type )  ,    operationParameters )  . build ( result . getModel (  )  )  ;", "}", "METHOD_END"], "methodName": ["produceModel"], "fileName": "org.gradle.tooling.internal.consumer.connection.CancellableModelBuilderBackedModelProducer"}, {"methodBody": ["METHOD_START", "{", "for    ( Throwable   t    =    e ;    t    !  =    null ;    t    =    t . getCause (  )  )     {", "if    (  (  \" BuildCancelledException \"  . equals ( t . getClass (  )  . getName (  )  )  )     |  |     (  \" BuildCancelledException \"  . equals ( t . getClass (  )  . getName (  )  )  )  )     {", "return   new   InternalBuildCancelledException ( e . getCause (  )  )  ;", "}", "}", "return   e ;", "}", "METHOD_END"], "methodName": ["transform"], "fileName": "org.gradle.tooling.internal.consumer.connection.CancellationExceptionTransformer"}, {"methodBody": ["METHOD_START", "{", "return   String . format ( DeprecatedVersionConsumerConnection . DEPRECATION _ WARNING ,    currentVersion )  ;", "}", "METHOD_END"], "methodName": ["createDeprecationMessage"], "fileName": "org.gradle.tooling.internal.consumer.connection.DeprecatedVersionConsumerConnection"}, {"methodBody": ["METHOD_START", "{", "if    (  ( parameters . getStandardOutput (  )  )     !  =    null )     {", "try    {", "parameters . getStandardOutput (  )  . write (  . createDeprecationMessage ( providerVersion )  . getBytes (  )  )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["outputDeprecationMessage"], "fileName": "org.gradle.tooling.internal.consumer.connection.DeprecatedVersionConsumerConnection"}, {"methodBody": ["METHOD_START", "{", "if    ( type . equals ( GradleBuild . class )  )     {", "GradleProject   gradleProject    =    delegate . produceModel ( GradleProject . class ,    operationParameters )  ;", "final   DefaultGradleBuild   convert    =    new   GradleBuildConverter (  )  . convert ( gradleProject )  ;", "return   mappingProvider . applyCompatibilityMapping ( adapter . builder ( type )  ,    operationParameters )  . build ( convert )  ;", "}", "return   delegate . produceModel ( type ,    operationParameters )  ;", "}", "METHOD_END"], "methodName": ["produceModel"], "fileName": "org.gradle.tooling.internal.consumer.connection.GradleBuildAdapterProducer"}, {"methodBody": ["METHOD_START", "{", "DefaultProjectIdentifier   projectIdentifier    =    new   DefaultProjectIdentifier ( parameters . getProjectDir (  )  ,     \"  :  \"  )  ;", "return   apply ( viewBuilder ,    projectIdentifier )  ;", "}", "METHOD_END"], "methodName": ["applyCompatibilityMapping"], "fileName": "org.gradle.tooling.internal.consumer.connection.HasCompatibilityMapping"}, {"methodBody": ["METHOD_START", "{", "viewBuilder . mixInTo ( GradleProject . class ,    new   GradleProjectIdentifierMixin ( projectIdentifier . getBuildIdentifier (  )  )  )  ;", "viewBuilder . mixInTo ( BasicGradleProject . class ,    new   BasicGradleProjectIdentifierMixin ( projectIdentifier . getBuildIdentifier (  )  )  )  ;", "FixedBuildIdentifierProvider   identifierProvider    =    new   FixedBuildIdentifierProvider ( projectIdentifier )  ;", "identifierProvider . applyTo ( viewBuilder )  ;", "viewBuilder . mixInTo ( GradleTask . class ,    TaskDisplayNameMixin . class )  ;", "viewBuilder . mixInTo ( IdeaProject . class ,    IdeaProjectJavaLanguageSettingsMixin . class )  ;", "viewBuilder . mixInTo ( IdeaDependency . class ,    IdeaModuleDependencyTargetNameMixin . class )  ;", "viewBuilder . mixInTo ( GradleBuild . class ,    new   IncludedBuildsMixin (  )  )  ;", "return   viewBuilder ;", "}", "METHOD_END"], "methodName": ["applyCompatibilityMapping"], "fileName": "org.gradle.tooling.internal.consumer.connection.HasCompatibilityMapping"}, {"methodBody": ["METHOD_START", "{", "ProtocolToModelAdapter   protocolToModelAdapter    =    new   ProtocolToModelAdapter ( new   ConsumerTargetTypeProvider (  )  )  ;", "BuildController   buildControllerAdapter    =    new   BuildControllerAdapter ( protocolToModelAdapter ,    new   ControllerAdapter (  )     {", "@ Override", "public   BuildResult <  ?  >    getModel ( Object   target ,    ModelIdentifier   modelIdentifier ,    Object   parameter )     {", "return   buildController . getModel ( target ,    modelIdentifier )  ;", "}", "}  ,    new   ModelMapping (  )  ,    rootDir )  ;", "buildControllerAdapter    =    new   BuildControllerWithoutParameterSupport ( versionDetails ,    buildControllerAdapter )  ;", "if    (  !  ( versionDetails . maySupportModel ( BuildInvocations . class )  )  )     {", "buildControllerAdapter    =    new   BuildInvocationsAdapterController ( protocolToModelAdapter ,    buildControllerAdapter )  ;", "}", "return   action . execute ( buildControllerAdapter )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.tooling.internal.consumer.connection.InternalBuildActionAdapter"}, {"methodBody": ["METHOD_START", "{", "ProtocolToModelAdapter   protocolToModelAdapter    =    new   ProtocolToModelAdapter ( new   ConsumerTargetTypeProvider (  )  )  ;", "BuildController   buildControllerAdapter    =    new   BuildControllerAdapter ( protocolToModelAdapter ,    new   ControllerAdapter (  )     {", "@ Override", "public   BuildResult <  ?  >    getModel ( Object   target ,    ModelIdentifier   modelIdentifier ,    Object   parameter )     {", "return   buildController . getModel ( target ,    modelIdentifier ,    parameter )  ;", "}", "}  ,    new   ModelMapping (  )  ,    rootDir )  ;", "return   action . execute ( buildControllerAdapter )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.tooling.internal.consumer.connection.InternalBuildActionAdapter"}, {"methodBody": ["METHOD_START", "{", "return   distribution . getDisplayName (  )  ;", "}", "METHOD_END"], "methodName": ["getDisplayName"], "fileName": "org.gradle.tooling.internal.consumer.connection.LazyConsumerActionExecutor"}, {"methodBody": ["METHOD_START", "{", "lock . lock (  )  ;", "try    {", "eing . remove ( Thread . currentThread (  )  )  ;", "condition . signalAll (  )  ;", "}    finally    {", "lock . unlock (  )  ;", "}", "}", "METHOD_END"], "methodName": ["onEndAction"], "fileName": "org.gradle.tooling.internal.consumer.connection.LazyConsumerActionExecutor"}, {"methodBody": ["METHOD_START", "{", "lock . lock (  )  ;", "try    {", "if    ( stopped )     {", "throw   new   IllegalStateException (  \" This      has   been   stopped .  \"  )  ;", "}", "executing . add ( Thread . currentThread (  )  )  ;", "if    (  (  )     =  =    null )     {", "ProgressLoggerFactory   progressLoggerFactory    =    loggingProvider . getProgressLoggerFactory (  )  ;", "=    implementationLoader . create ( distribution ,    progressLoggerFactory ,    buildProgressListener ,    Parameters ,    cancellationToken )  ;", "}", "return    ;", "}    finally    {", "lock . unlock (  )  ;", "}", "}", "METHOD_END"], "methodName": ["onStartAction"], "fileName": "org.gradle.tooling.internal.consumer.connection.LazyConsumerActionExecutor"}, {"methodBody": ["METHOD_START", "{", "try    {", "ConsumerOperationParameters   parameters    =    action . getParameters (  )  ;", "BuildCancellationToken   cancellationToken    =    parameters . getCancellationToken (  )  ;", "InternalBuildProgressListener   buildProgressListener    =    parameters . getBuildProgressListener (  )  ;", "ConsumerConnection       =    onStartAction ( cancellationToken ,    buildProgressListener )  ;", "return   action . run (  )  ;", "}    finally    {", "onEndAction (  )  ;", "}", "}", "METHOD_END"], "methodName": ["run"], "fileName": "org.gradle.tooling.internal.consumer.connection.LazyConsumerActionExecutor"}, {"methodBody": ["METHOD_START", "{", "lock . lock (  )  ;", "try    {", "stopped    =    true ;", "while    (  !  ( executing . isEmpty (  )  )  )     {", "try    {", "condition . await (  )  ;", "}    catch    ( InterruptedException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "}", "this    =    null ;", "}    finally    {", "lock . unlock (  )  ;", "}", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "org.gradle.tooling.internal.consumer.connection.LazyConsumerActionExecutor"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( versionDetails . maySupportModel ( type )  )  )     {", "throw   Exceptions . unsupport ( type ,    versionDetails . getVersion (  )  )  ;", "}", "final   ModelIdentifier   modelIdentifier    =    modelMapping . getModelIdentifierFromModelType ( type )  ;", "BuildResult <  ?  >    result ;", "try    {", "result    =    builder . getModel ( modelIdentifier ,    operationParameters )  ;", "}    catch    ( InternalUnsupportException   e )     {", "throw   Exceptions . unknownModel ( type ,    e )  ;", "}", "return   applyCompatibilityMapping ( adapter . builder ( type )  ,    operationParameters )  . build ( result . getModel (  )  )  ;", "}", "METHOD_END"], "methodName": ["produceModel"], "fileName": "org.gradle.tooling.internal.consumer.connection.ModelBuilderBackedModelProducer"}, {"methodBody": ["METHOD_START", "{", "return   distribution . getDisplayName (  )  ;", "}", "METHOD_END"], "methodName": ["getDisplayName"], "fileName": "org.gradle.tooling.internal.consumer.connection.NoToolingApiConnection"}, {"methodBody": ["METHOD_START", "{", "throw   Exceptions . unsupportedFeature ( operationParameters . getEntryPointName (  )  ,    distribution ,     \"  1  .  2  \"  )  ;", "}", "METHOD_END"], "methodName": ["run"], "fileName": "org.gradle.tooling.internal.consumer.connection.NoToolingApiConnection"}, {"methodBody": ["METHOD_START", "{", "throw   Exceptions . unsupportedFeature ( operationParameters . getEntryPointName (  )  ,    distribution ,     \"  1  .  8  \"  )  ;", "}", "METHOD_END"], "methodName": ["run"], "fileName": "org.gradle.tooling.internal.consumer.connection.NoToolingApiConnection"}, {"methodBody": ["METHOD_START", "{", "throw   Exceptions . unsupportedFeature ( operationParameters . getEntryPointName (  )  ,    distribution ,     \"  2  .  6  \"  )  ;", "}", "METHOD_END"], "methodName": ["runTests"], "fileName": "org.gradle.tooling.internal.consumer.connection.NoToolingApiConnection"}, {"methodBody": ["METHOD_START", "{", "return   delegate . getDisplayName (  )  ;", "}", "METHOD_END"], "methodName": ["getDisplayName"], "fileName": "org.gradle.tooling.internal.consumer.connection.NonCancellableConsumerConnectionAdapter"}, {"methodBody": ["METHOD_START", "{", "cancellationToken . removeCallback ( callback )  ;", "}", "METHOD_END"], "methodName": ["handleCancellationPostOperation"], "fileName": "org.gradle.tooling.internal.consumer.connection.NonCancellableConsumerConnectionAdapter"}, {"methodBody": ["METHOD_START", "{", "Runnable   callback    =    new   Runnable (  )     {", "public   void   run (  )     {", ". LOGGER . info (  \" Note :    Version   of   Gradle   provider   does   not   support   cancellation .    Upgrade   your   Gradle   build .  \"  )  ;", "}", "}  ;", "cancellationToken . addCallback ( callback )  ;", "return   callback ;", "}", "METHOD_END"], "methodName": ["handleCancellationPreOperation"], "fileName": "org.gradle.tooling.internal.consumer.connection.NonCancellableConsumerConnectionAdapter"}, {"methodBody": ["METHOD_START", "{", "Runnable   callback    =    handleCancellationPreOperation ( operationParameters . getCancellationToken (  )  )  ;", "try    {", "return   delegate . run ( type ,    operationParameters )  ;", "}    finally    {", "handleCancellationPostOperation ( operationParameters . getCancellationToken (  )  ,    callback )  ;", "}", "}", "METHOD_END"], "methodName": ["run"], "fileName": "org.gradle.tooling.internal.consumer.connection.NonCancellableConsumerConnectionAdapter"}, {"methodBody": ["METHOD_START", "{", "Runnable   callback    =    handleCancellationPreOperation ( operationParameters . getCancellationToken (  )  )  ;", "try    {", "return   delegate . run ( action ,    operationParameters )  ;", "}    finally    {", "handleCancellationPostOperation ( operationParameters . getCancellationToken (  )  ,    callback )  ;", "}", "}", "METHOD_END"], "methodName": ["run"], "fileName": "org.gradle.tooling.internal.consumer.connection.NonCancellableConsumerConnectionAdapter"}, {"methodBody": ["METHOD_START", "{", "delegate . runTests ( testExecutionRequest ,    operationParameters )  ;", "}", "METHOD_END"], "methodName": ["runTests"], "fileName": "org.gradle.tooling.internal.consumer.connection.NonCancellableConsumerConnectionAdapter"}, {"methodBody": ["METHOD_START", "{", "delegate . stop (  )  ;", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "org.gradle.tooling.internal.consumer.connection.NonCancellableConsumerConnectionAdapter"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( targetVersionDetails . supportsRunTasksBeforeExecutingAction (  )  )  )     {", "if    (  ( operations . getTasks (  )  )     !  =    null )     {", "throw   Exceptions . unsupportedFeature (  \" forTasks (  )    method   on   BuildActionExecuter \"  ,    targetVersionDetails . getVersion (  )  ,     \"  3  .  5  \"  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["validateBuildActionParameters"], "fileName": "org.gradle.tooling.internal.consumer.connection.ParameterValidatingConsumerConnection"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( targetVersionDetails . supportsEnvironmentVariablesCustomization (  )  )  )     {", "if    (  ( operations . getEnvironmentVariables (  )  )     !  =    null )     {", "throw   Exceptions . unsupportedFeature (  \" environment   variables   customization   feature \"  ,    targetVersionDetails . getVersion (  )  ,     \"  3  .  5  \"  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["validateParameters"], "fileName": "org.gradle.tooling.internal.consumer.connection.ParameterValidatingConsumerConnection"}, {"methodBody": ["METHOD_START", "{", "return    ( GradleVersion . version ( providerVersion )  . compareTo ( PluginClasspathInjectionSupportedCheckModelProducer . SUPPORTED _ VERSION )  )     >  =     0  ;", "}", "METHOD_END"], "methodName": ["isSupported"], "fileName": "org.gradle.tooling.internal.consumer.connection.PluginClasspathInjectionSupportedCheckModelProducer"}, {"methodBody": ["METHOD_START", "{", "return   actionExecutor . getDisplayName (  )  ;", "}", "METHOD_END"], "methodName": ["getDisplayName"], "fileName": "org.gradle.tooling.internal.consumer.connection.ProgressLoggingConsumerActionExecutor"}, {"methodBody": ["METHOD_START", "{", "ConsumerOperationParameters   parameters    =    action . getParameters (  )  ;", ". ProgressListenerAdapter   listener    =    new    . ProgressListenerAdapter ( parameters . getProgressListener (  )  )  ;", "ListenerManager   listenerManager    =    loggingProvider . getListenerManager (  )  ;", "listenerManager . addListener ( listener )  ;", "try    {", "ProgressLogger   progressLogger    =    loggingProvider . getProgressLoggerFactory (  )  . newOperation (  . class )  ;", "progressLogger . setDescription (  \" Build \"  )  ;", "progressLogger . started (  )  ;", "try    {", "return   actionExecutor . run ( action )  ;", "}    finally    {", "progressLogger . completed (  )  ;", "}", "}    finally    {", "listenerManager . removeListener ( listener )  ;", "}", "}", "METHOD_END"], "methodName": ["run"], "fileName": "org.gradle.tooling.internal.consumer.connection.ProgressLoggingConsumerActionExecutor"}, {"methodBody": ["METHOD_START", "{", "actionExecutor . stop (  )  ;", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "org.gradle.tooling.internal.consumer.connection.ProgressLoggingConsumerActionExecutor"}, {"methodBody": ["METHOD_START", "{", "if    ( methodName . startsWith (  \" get \"  )  )     {", "return    . getPropertyName ( methodName ,     \" get \"  )  ;", "} else", "if    ( methodName . startsWith (  \" is \"  )  )     {", "return    . getPropertyName ( methodName ,     \" is \"  )  ;", "} else", "if    ( methodName . startsWith (  \" set \"  )  )     {", "return    . getPropertyName ( methodName ,     \" set \"  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getPropertyName"], "fileName": "org.gradle.tooling.internal.consumer.connection.ToolingParameterProxy"}, {"methodBody": ["METHOD_START", "{", "String   property    =    methodName . replaceFirst ( prefix ,     \"  \"  )  ;", "return    ( Character . toLowerCase ( property . charAt (  0  )  )  )     +     ( property . substring (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["getPropertyName"], "fileName": "org.gradle.tooling.internal.consumer.connection.ToolingParameterProxy"}, {"methodBody": ["METHOD_START", "{", "if    ( ToolingParameterProxy . isSetter ( method )  )     {", "properties . put ( ToolingParameterProxy . getPropertyName ( method . getName (  )  )  ,    args [  0  ]  )  ;", "} else", "if    ( ToolingParameterProxy . isGetter ( method )  )     {", "return   properties . get ( ToolingParameterProxy . getPropertyName ( method . getName (  )  )  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["invoke"], "fileName": "org.gradle.tooling.internal.consumer.connection.ToolingParameterProxy"}, {"methodBody": ["METHOD_START", "{", "String   methodName    =    method . getName (  )  ;", "return    (  (  (  . isPrefixable ( methodName ,     \" get \"  )  )     |  |     (  . isPrefixable ( methodName ,     \" is \"  )  )  )     &  &     (  ( method . getParameterTypes (  )  . length )     =  =     0  )  )     &  &     (  !  ( method . getReturnType (  )  . equals ( void . class )  )  )  ;", "}", "METHOD_END"], "methodName": ["isGetter"], "fileName": "org.gradle.tooling.internal.consumer.connection.ToolingParameterProxy"}, {"methodBody": ["METHOD_START", "{", "return    (  ( methodName . startsWith ( prefix )  )     &  &     (  ( methodName . length (  )  )     >     ( prefix . length (  )  )  )  )     &  &     ( Character . isUpperCase ( methodName . charAt ( prefix . length (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["isPrefixable"], "fileName": "org.gradle.tooling.internal.consumer.connection.ToolingParameterProxy"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >  [  ]    parameterTypes    =    method . getParameterTypes (  )  ;", "return    (  (  (  . isPrefixable ( method . getName (  )  ,     \" set \"  )  )     &  &     (  ( parameterTypes . length )     =  =     1  )  )     &  &     (  !  ( parameterTypes [  0  ]  . equals ( void . class )  )  )  )     &  &     ( method . getReturnType (  )  . equals ( void . class )  )  ;", "}", "METHOD_END"], "methodName": ["isSetter"], "fileName": "org.gradle.tooling.internal.consumer.connection.ToolingParameterProxy"}, {"methodBody": ["METHOD_START", "{", "throw   new   IllegalArgumentException ( String . format (  \"  % s   is   not   a   valid   parameter   type .     % s \"  ,    clazz . getName (  )  ,    cause )  )  ;", "}", "METHOD_END"], "methodName": ["throwParameterValidationError"], "fileName": "org.gradle.tooling.internal.consumer.connection.ToolingParameterProxy"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( clazz . isInterface (  )  )  )     {", ". throwParameterValidationError ( clazz ,     \" It   must   be   an   interface .  \"  )  ;", "}", "Map < String ,    Class <  ?  >  >    setters    =    new   HashMap < String ,    Class <  ?  >  >  (  )  ;", "Map < String ,    Class <  ?  >  >    getters    =    new   HashMap < String ,    Class <  ?  >  >  (  )  ;", "for    ( Method   method    :    clazz . getDeclaredMethods (  )  )     {", "if    (  . isGetter ( method )  )     {", "String   property    =     . getPropertyName ( method . getName (  )  )  ;", "if    ( getters . containsKey ( property )  )     {", ". throwParameterValidationError ( clazz ,    String . format (  \" More   than   one   getter   for   property    % s   was   found .  \"  ,    property )  )  ;", "}", "getters . put ( property ,    method . getReturnType (  )  )  ;", "} else", "if    (  . isSetter ( method )  )     {", "String   property    =     . getPropertyName ( method . getName (  )  )  ;", "if    ( setters . containsKey ( property )  )     {", ". throwParameterValidationError ( clazz ,    String . format (  \" More   than   one   setter   for   property    % s   was   found .  \"  ,    property )  )  ;", "}", "setters . put ( property ,    method . getParameterTypes (  )  [  0  ]  )  ;", "} else    {", ". throwParameterValidationError ( clazz ,    String . format (  \" Method    % s   is   neither   a   setter   nor   a   getter .  \"  ,    method . getName (  )  )  )  ;", "}", "}", "if    (  ( setters . size (  )  )     !  =     ( getters . size (  )  )  )     {", ". throwParameterValidationError ( clazz ,     \" It   contains   a   different   number   of   getters   and   setters .  \"  )  ;", "}", "for    ( String   property    :    setters . keySet (  )  )     {", "if    (  !  ( getters . containsKey ( property )  )  )     {", ". throwParameterValidationError ( clazz ,    String . format (  \" A   setter   for   property    % s   was   found   but   no   getter .  \"  ,    property )  )  ;", "} else", "if    (  !  ( setters . get ( property )  . equals ( getters . get ( property )  )  )  )     {", ". throwParameterValidationError ( clazz ,    String . format (  \" Setter   and   getter   for   property    % s   have   non   corresponding   types .  \"  ,    property )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["validateParameter"], "fileName": "org.gradle.tooling.internal.consumer.connection.ToolingParameterProxy"}, {"methodBody": ["METHOD_START", "{", "throw   Exceptions . unsupportedFeature ( operationParameters . getEntryPointName (  )  ,    version ,     \"  1  .  8  \"  )  ;", "}", "METHOD_END"], "methodName": ["run"], "fileName": "org.gradle.tooling.internal.consumer.connection.UnsupportedActionRunner"}, {"methodBody": ["METHOD_START", "{", "return   new   VersionOnlyBuildEnvironment ( version )  ;", "}", "METHOD_END"], "methodName": ["doGetBuildEnvironment"], "fileName": "org.gradle.tooling.internal.consumer.connection.UnsupportedOlderVersionConnection"}, {"methodBody": ["METHOD_START", "{", "return   metaData . getDisplayName (  )  ;", "}", "METHOD_END"], "methodName": ["getDisplayName"], "fileName": "org.gradle.tooling.internal.consumer.connection.UnsupportedOlderVersionConnection"}, {"methodBody": ["METHOD_START", "{", "if    ( type . equals ( BuildEnvironment . class )  )     {", "return   adapter . adapt ( type ,    doGetBuildEnvironment (  )  )  ;", "}", "throw   new   VersionException ( String . format (  \" Support   for   builds   using   Gradle   versions   older   than    1  .  2    was   removed   in   tooling   API   version    3  .  0  .    You   are   currently   using   Gradle   version    % s .    You   should   upgrade   your   Gradle   build   to   use   Gradle    1  .  2    or   later .  \"  ,    version )  )  ;", "}", "METHOD_END"], "methodName": ["run"], "fileName": "org.gradle.tooling.internal.consumer.connection.UnsupportedOlderVersionConnection"}, {"methodBody": ["METHOD_START", "{", "return   new   UnsupportedActionRunner ( version )  . run ( action ,    operationParameters )  ;", "}", "METHOD_END"], "methodName": ["run"], "fileName": "org.gradle.tooling.internal.consumer.connection.UnsupportedOlderVersionConnection"}, {"methodBody": ["METHOD_START", "{", "throw   Exceptions . unsupportedFeature ( operationParameters . getEntryPointName (  )  ,    version ,     \"  2  .  6  \"  )  ;", "}", "METHOD_END"], "methodName": ["runTests"], "fileName": "org.gradle.tooling.internal.consumer.connection.UnsupportedOlderVersionConnection"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultProjectIdentifier ( buildIdentifier ,    gradleProject . getPath (  )  )  ;", "}", "METHOD_END"], "methodName": ["getProjectIdentifier"], "fileName": "org.gradle.tooling.internal.consumer.converters.BasicGradleProjectIdentifierMixin"}, {"methodBody": ["METHOD_START", "{", "Multimap < String ,    String >    aggregatedTasks    =    ArrayListMultimap . create (  )  ;", "collectTasks ( project ,    aggregatedTasks )  ;", "List < CProvidedTaskSelector >    selectors    =    Lists . newArrayList (  )  ;", "for    ( String   selectorName    :    aggregatedTasks . keySet (  )  )     {", "SortedSet < String >    selectorTasks    =    Sets . newTreeSet ( new   TaskNameComparator (  )  )  ;", "selectorTasks . addAll ( aggregatedTasks . get ( selectorName )  )  ;", "selectors . add ( new   CProvidedTaskSelector (  )  . setName ( selectorName )  . setTaskNames ( selectorTasks )  . setDescription (  (  ( project . getParent (  )  )     !  =    null    ?    String . format (  \"  % s :  % s   task   selector \"  ,    project . getPath (  )  ,    selectorName )     :    String . format (  \"  % s   task   selector \"  ,    selectorName )  )  )  . setDisplayName ( String . format (  \"  % s   in    % s   and   subprojects .  \"  ,    selectorName ,    project . getName (  )  )  )  )  ;", "}", "return   selectors ;", "}", "METHOD_END"], "methodName": ["buildRecursively"], "fileName": "org.gradle.tooling.internal.consumer.converters.BuildInvocationsConverter"}, {"methodBody": ["METHOD_START", "{", "for    ( GradleProject   childProject    :    project . getChildren (  )  )     {", "collectTasks ( childProject ,    aggregatedTasks )  ;", "}", "for    ( GradleTask   task    :    project . getTasks (  )  )     {", "aggregatedTasks . put ( task . getName (  )  ,    task . getPath (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["collectTasks"], "fileName": "org.gradle.tooling.internal.consumer.converters.BuildInvocationsConverter"}, {"methodBody": ["METHOD_START", "{", "List < ConsumerProvidedTaskSelector >    selectors    =    buildRecursively ( project )  ;", "return   new   ConsumerProvided ( project . getProjectIdentifier (  )  ,    selectors ,    convertTasks ( project . getTasks (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["convert"], "fileName": "org.gradle.tooling.internal.consumer.converters.BuildInvocationsConverter"}, {"methodBody": ["METHOD_START", "{", "List < ConsumerProvidedTask >    result    =    Lists . newArrayList (  )  ;", "for    ( GradleTask   task    :    tasks )     {", "result . add ( new   ConsumerProvidedTask (  )  . setName ( task . getName (  )  )  . setPath ( task . getPath (  )  )  . setDescription ( task . getDescription (  )  )  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["convertTasks"], "fileName": "org.gradle.tooling.internal.consumer.converters.BuildInvocationsConverter"}, {"methodBody": ["METHOD_START", "{", "return   projectIdentifier ;", "}", "METHOD_END"], "methodName": ["getProjectIdentifier"], "fileName": "org.gradle.tooling.internal.consumer.converters.ConsumerProvidedBuildInvocations"}, {"methodBody": ["METHOD_START", "{", "return   selectors ;", "}", "METHOD_END"], "methodName": ["getTaskSelectors"], "fileName": "org.gradle.tooling.internal.consumer.converters.ConsumerProvidedBuildInvocations"}, {"methodBody": ["METHOD_START", "{", "return   tasks ;", "}", "METHOD_END"], "methodName": ["getTasks"], "fileName": "org.gradle.tooling.internal.consumer.converters.ConsumerProvidedBuildInvocations"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >  [  ]    interfaces    =    protocolObject . getClass (  )  . getInterfaces (  )  ;", "for    ( Class <  ?  >    i    :    interfaces )     {", "if    ( configureds . containsKey ( i . getName (  )  )  )     {", "return   configureds . get ( i . getName (  )  )  . asSubclass ( initial )  ;", "}", "}", "return   initial ;", "}", "METHOD_END"], "methodName": ["getTargetType"], "fileName": "org.gradle.tooling.internal.consumer.converters.ConsumerTargetTypeProvider"}, {"methodBody": ["METHOD_START", "{", "builder . mixInTo ( BuildModel . class ,    this )  ;", "builder . mixInTo ( ProjectModel . class ,    this )  ;", "return   builder ;", "}", "METHOD_END"], "methodName": ["applyTo"], "fileName": "org.gradle.tooling.internal.consumer.converters.FixedBuildIdentifierProvider"}, {"methodBody": ["METHOD_START", "{", "return   buildIdentifier ;", "}", "METHOD_END"], "methodName": ["getBuildIdentifier"], "fileName": "org.gradle.tooling.internal.consumer.converters.FixedBuildIdentifierProvider"}, {"methodBody": ["METHOD_START", "{", "return   projectIdentifier ;", "}", "METHOD_END"], "methodName": ["getProjectIdentifier"], "fileName": "org.gradle.tooling.internal.consumer.converters.FixedBuildIdentifierProvider"}, {"methodBody": ["METHOD_START", "{", "DefaultGradleBuild   gradleBuild    =    new   DefaultGradleBuild (  )  ;", "PartialBasicGradleProject   rootProject    =    toPartialGradleProject ( project )  ;", "gradleBuild . setRootProject ( rootProject )  ;", "gradleBuild . addProject ( rootProject )  ;", "convertChildren ( gradleBuild ,    rootProject ,    project )  ;", "return   gradleBuild ;", "}", "METHOD_END"], "methodName": ["convert"], "fileName": "org.gradle.tooling.internal.consumer.converters.GradleBuildConverter"}, {"methodBody": ["METHOD_START", "{", "final   List <  ?    extends   GradleProject >    childProjects    =    new   ArrayList < GradleProject >  ( project . getChildren (  )  )  ;", "Collections . sort ( childProjects ,    new   Comparator < GradleProject >  (  )     {", "public   int   compare ( GradleProject   gp 1  ,    GradleProject   gp 2  )     {", "return   gp 1  . getName (  )  . compareTo ( gp 2  . getName (  )  )  ;", "}", "}  )  ;", "for    ( GradleProject   childProject    :    childProjects )     {", "PartialBasicGradleProject   basicGradleProject    =    toPartialGradleProject ( childProject )  ;", "g . addProject ( basicGradleProject )  ;", "basicGradleProject . setParent ( rootProject )  ;", "rootProject . addChild ( basicGradleProject )  ;", "convertChildren ( g ,    basicGradleProject ,    childProject )  ;", "}", "}", "METHOD_END"], "methodName": ["convertChildren"], "fileName": "org.gradle.tooling.internal.consumer.converters.GradleBuildConverter"}, {"methodBody": ["METHOD_START", "{", "PartialBasicGradleProject   basicGradleProject    =    new   PartialBasicGradleProject (  )  ;", "basicGradleProject . setName ( childProject . getName (  )  )  ;", "ProjectIdentifier   id    =    childProject . getProjectIdentifier (  )  ;", "basicGradleProject . setProjectIdentifier ( new   DefaultProjectIdentifier ( id . getBuildIdentifier (  )  . getRootDir (  )  ,    id . getProjectPath (  )  )  )  ;", "return   basicGradleProject ;", "}", "METHOD_END"], "methodName": ["toPartialGradleProject"], "fileName": "org.gradle.tooling.internal.consumer.converters.GradleBuildConverter"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultProjectIdentifier ( buildIdentifier ,    gradleProject . getPath (  )  )  ;", "}", "METHOD_END"], "methodName": ["getProjectIdentifier"], "fileName": "org.gradle.tooling.internal.consumer.converters.GradleProjectIdentifierMixin"}, {"methodBody": ["METHOD_START", "{", "if    (  ( ideaModuleDependency )    instanceof   IdeaModuleDependency )     {", "IdeaModuleDependency   dependency    =     (  ( IdeaModuleDependency )     ( ideaModuleDependency )  )  ;", "return   dependency . getDependencyModule (  )  . getName (  )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getTargetModuleName"], "fileName": "org.gradle.tooling.internal.consumer.converters.IdeaModuleDependencyTargetNameMixin"}, {"methodBody": ["METHOD_START", "{", "return   new   IdeaProjectJavaLanguageSettingsMixin . CompatibilityIdeaProjectJavaLanguageSettings ( ideaProject )  ;", "}", "METHOD_END"], "methodName": ["getJavaLanguageSettings"], "fileName": "org.gradle.tooling.internal.consumer.converters.IdeaProjectJavaLanguageSettingsMixin"}, {"methodBody": ["METHOD_START", "{", "return   ImmutableDomainObjectSet . of ( Collections .  < GradleBuild > emptyList (  )  )  ;", "}", "METHOD_END"], "methodName": ["getIncludedBuilds"], "fileName": "org.gradle.tooling.internal.consumer.converters.IncludedBuildsMixin"}, {"methodBody": ["METHOD_START", "{", "return    (  \" task    '  \"     +     ( task . getPath (  )  )  )     +     \"  '  \"  ;", "}", "METHOD_END"], "methodName": ["getDisplayName"], "fileName": "org.gradle.tooling.internal.consumer.converters.TaskDisplayNameMixin"}, {"methodBody": ["METHOD_START", "{", "int   depthDiff    =     ( getDepth ( taskName 1  )  )     -     ( getDepth ( taskName 2  )  )  ;", "if    ( depthDiff    !  =     0  )     {", "return   depthDiff ;", "}", "return   compareSegments ( taskName 1  ,    taskName 2  )  ;", "}", "METHOD_END"], "methodName": ["compare"], "fileName": "org.gradle.tooling.internal.consumer.converters.TaskNameComparator"}, {"methodBody": ["METHOD_START", "{", "int   colon 1     =    taskName 1  . indexOf (  '  :  '  )  ;", "int   colon 2     =    taskName 2  . indexOf (  '  :  '  )  ;", "if    (  ( colon 1     >     0  )     &  &     ( colon 2     >     0  )  )     {", "int   diff    =    taskName 1  . substring (  0  ,    colon 1  )  . compareTo ( taskName 2  . substring (  0  ,    colon 2  )  )  ;", "if    ( diff    !  =     0  )     {", "return   diff ;", "}", "}", "return   colon 1     =  =     (  -  1  )     ?    taskName 1  . compareTo ( taskName 2  )     :    compareSegments ( taskName 1  . substring (  ( colon 1     +     1  )  )  ,    taskName 2  . substring (  ( colon 2     +     1  )  )  )  ;", "}", "METHOD_END"], "methodName": ["compareSegments"], "fileName": "org.gradle.tooling.internal.consumer.converters.TaskNameComparator"}, {"methodBody": ["METHOD_START", "{", "int   counter    =     0  ;", "for    ( char   c    :    t . toCharArray (  )  )     {", "if    ( c    =  =     '  :  '  )     {", "counter +  +  ;", "}", "}", "return   counter ;", "}", "METHOD_END"], "methodName": ["getDepth"], "fileName": "org.gradle.tooling.internal.consumer.converters.TaskNameComparator"}, {"methodBody": ["METHOD_START", "{", "try    {", "CompositeStoppable . stoppable ( connecs . values (  )  )  . stop (  )  ;", "}    finally    {", "connecs . clear (  )  ;", "}", "}", "METHOD_END"], "methodName": ["close"], "fileName": "org.gradle.tooling.internal.consumer.loader.CachingToolingImplementationLoader"}, {"methodBody": ["METHOD_START", "{", "ClassPath   classpath    =    distribution . getToolingImplementationClasspath ( progressLoggerFactory ,    progressListener ,    connectionParameters . getGradleUserHomeDir (  )  ,    cancellationToken )  ;", "ConsumerConnection   connection    =    connections . get ( classpath )  ;", "if    ( connection    =  =    null )     {", "connection    =    loader . create ( distribution ,    progressLoggerFactory ,    progressListener ,    connectionParameters ,    cancellationToken )  ;", "connections . put ( classpath ,    connection )  ;", "}", "return   connection ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.tooling.internal.consumer.loader.CachingToolingImplementationLoader"}, {"methodBody": ["METHOD_START", "{", "DefaultToolingImplementationLoader . LOGGER . debug (  \" Using   tooling   provider   from    {  }  \"  ,    distribution . getDisplayName (  )  )  ;", "ClassLoader   serviceClassLoader    =    createImplementationClassLoader ( distribution ,    progressLoggerFactory ,    progressListener ,    connectionParameters . getGradleUserHomeDir (  )  ,    cancellationToken )  ;", "ServiceLocator   serviceLocator    =    new   DefaultServiceLocator ( serviceClassLoader )  ;", "try    {", "Factory < ConnectionVersion 4  >    factory    =    serviceLocator . findFactory ( ConnectionVersion 4  . class )  ;", "if    ( factory    =  =    null )     {", "return   new   NoToolingApiConnection ( distribution )  ;", "}", "ConnectionVersion 4    connection    =    factory . create (  )  ;", "ProtocolToModelAdapter   adapter    =    new   ProtocolToModelAdapter ( new   ConsumerTargetTypeProvider (  )  )  ;", "ModelMapping   modelMapping    =    new   ModelMapping (  )  ;", "if    ( connection   instanceof   InternalParameterAcceptingConnection )     {", "return   createConnection ( new   ParameterAcceptingConsumerConnection ( connection ,    modelMapping ,    adapter )  ,    connectionParameters )  ;", "} else", "if    ( connection   instanceof   InternalTestExecutionConnection )     {", "return   createConnection ( new   connection . TestExecutionConsumerConnection ( connection ,    modelMapping ,    adapter )  ,    connectionParameters )  ;", "} else", "if    ( connection   instanceof   StoppableConnection )     {", "return   createDeprecatedConnection ( new   connection . ShutdownAwareConsumerConnection ( connection ,    modelMapping ,    adapter )  ,    connectionParameters )  ;", "} else", "if    ( connection   instanceof   InternalCancellableConnection )     {", "return   createDeprecatedConnection ( new   connection . CancellableConsumerConnection ( connection ,    modelMapping ,    adapter )  ,    connectionParameters )  ;", "} else", "if    (  ( connection   instanceof   ModelBuilder )     &  &     ( connection   instanceof   InternalBuildActionExecutor )  )     {", "return   createDeprecatedConnection ( new   connection . ActionAwareConsumerConnection ( connection ,    modelMapping ,    adapter )  ,    connectionParameters )  ;", "} else", "if    ( connection   instanceof   ModelBuilder )     {", "return   createDeprecatedConnection ( new   connection . ModelBuilderBackedConsumerConnection ( connection ,    modelMapping ,    adapter )  ,    connectionParameters )  ;", "} else", "if    ( connection   instanceof   BuildActionRunner )     {", "return   createDeprecatedConnection ( new   connection . BuildActionRunnerBackedConsumerConnection ( connection ,    modelMapping ,    adapter )  ,    connectionParameters )  ;", "} else    {", "return   new   connection . UnsupportedOlderVersionConnection ( connection ,    adapter )  ;", "}", "}    catch    ( UnsupportedVersionException   e )     {", "throw   e ;", "}    catch    ( Throwable   t )     {", "throw   new   GradleConnectionException ( String . format (  \" Could   not   create   an   instance   of   Tooling   API   implementation   using   the   specified    % s .  \"  ,    distribution . getDisplayName (  )  )  ,    t )  ;", "}", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.tooling.internal.consumer.loader.DefaultToolingImplementationLoader"}, {"methodBody": ["METHOD_START", "{", "adaptedConnection . configure ( connectionParameters )  ;", "VersionDetails   versionDetails    =    adaptedConnection . getVersionDetails (  )  ;", "CConnection   delegate    =     ( versionDetails . supportsCancellation (  )  )     ?    adaptedConnection    :    new   NonCancellableCConnectionAdapter ( adaptedConnection )  ;", "return   new   ParameterValidatingCConnection ( versionDetails ,    delegate )  ;", "}", "METHOD_END"], "methodName": ["createConnection"], "fileName": "org.gradle.tooling.internal.consumer.loader.DefaultToolingImplementationLoader"}, {"methodBody": ["METHOD_START", "{", "return   new   DeprecatedVersionConsumerConnection ( createConnection ( adaptedConnection ,    connectionParameters )  ,    adaptedConnection . getVersionDetails (  )  )  ;", "}", "METHOD_END"], "methodName": ["createDeprecatedConnection"], "fileName": "org.gradle.tooling.internal.consumer.loader.DefaultToolingImplementationLoader"}, {"methodBody": ["METHOD_START", "{", "ClassPath   implementationClasspath    =    distribution . getToolingImplementationClasspath ( progressLoggerFactory ,    progressListener ,    userHomeDir ,    cancellationToken )  ;", ". LOGGER . debug (  \" Using   tooling   provider   classpath :     {  }  \"  ,    implementationClasspath )  ;", "FilteringClassLoader . Spec   filterSpec    =    new   FilteringClassLoader . Spec (  )  ;", "filterSpec . allowPackage (  \" protocol \"  )  ;", "FilteringClassLoader   filteringClassLoader    =    new   FilteringClassLoader ( classLoader ,    filterSpec )  ;", "return   new   VisitableURLClassLoader ( filteringClassLoader ,    implementationClasspath )  ;", "}", "METHOD_END"], "methodName": ["createImplementationClassLoader"], "fileName": "org.gradle.tooling.internal.consumer.loader.DefaultToolingImplementationLoader"}, {"methodBody": ["METHOD_START", "{", "lock . lock (  )  ;", "try    {", "CompositeStoppable . stoppable ( delegate )  . stop (  )  ;", "}    finally    {", "lock . unlock (  )  ;", "}", "}", "METHOD_END"], "methodName": ["close"], "fileName": "org.gradle.tooling.internal.consumer.loader.SynchronizedToolingImplementationLoader"}, {"methodBody": ["METHOD_START", "{", "if    ( lock . tryLock (  )  )     {", "try    {", "return   delegate . create ( distribution ,    progressLoggerFactory ,    progressListener ,    connectionParameters ,    cancellationToken )  ;", "}    finally    {", "lock . unlock (  )  ;", "}", "}", "ProgressLogger   logger    =    progressLoggerFactory . newOperation (  . class )  ;", "logger . setDescription (  \" Wait   for   the   other   thread   to   finish   acquiring   the   distribution \"  )  ;", "logger . started (  )  ;", "lock . lock (  )  ;", "try    {", "return   delegate . create ( distribution ,    progressLoggerFactory ,    progressListener ,    connectionParameters ,    cancellationToken )  ;", "}    finally    {", "lock . unlock (  )  ;", "logger . completed (  )  ;", "}", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.tooling.internal.consumer.loader.SynchronizedToolingImplementationLoader"}, {"methodBody": ["METHOD_START", "{", "return   cancellationToken . addCallback ( cancellationHandler )  ;", "}", "METHOD_END"], "methodName": ["addCallback"], "fileName": "org.gradle.tooling.internal.consumer.parameters.BuildCancellationTokenAdapter"}, {"methodBody": ["METHOD_START", "{", "return   cancellationToken . isCancellationRequested (  )  ;", "}", "METHOD_END"], "methodName": ["isCancellationRequested"], "fileName": "org.gradle.tooling.internal.consumer.parameters.BuildCancellationTokenAdapter"}, {"methodBody": ["METHOD_START", "{", "cancellationToken . removeCallback ( cancellationHandler )  ;", "}", "METHOD_END"], "methodName": ["removeCallback"], "fileName": "org.gradle.tooling.internal.consumer.parameters.BuildCancellationTokenAdapter"}, {"methodBody": ["METHOD_START", "{", "OperationDescriptor   cached    =    this . descriptorCache . get ( descriptor . getId (  )  )  ;", "if    ( cached    !  =    null )     {", "throw   new   IllegalStateException ( Strformat (  \" Operation    % s   already   available .  \"  ,    descriptor )  )  ;", "}", "descriptorCache . put ( descriptor . getId (  )  ,    clientDescriptor )  ;", "return   clientDescriptor ;", "}", "METHOD_END"], "methodName": ["addDescriptor"], "fileName": "org.gradle.tooling.internal.consumer.parameters.BuildProgressListenerAdapter"}, {"methodBody": ["METHOD_START", "{", "Class <  ?    extends   OperationDescriptor >    descriptorClass    =    descriptor . getClass (  )  ;", "if    (  !  ( type . isAssignableFrom ( descriptorClass )  )  )     {", "throw   new   IllegalStateException ( Strformat (  \" Unexpected   operation   type .    Required    % s   but   found    % s \"  ,    type . getName (  )  ,    descriptorClass . getName (  )  )  )  ;", "}", "return    (  ( T )     ( descriptor )  )  ;", "}", "METHOD_END"], "methodName": ["assertDescriptorType"], "fileName": "org.gradle.tooling.internal.consumer.parameters.BuildProgressListenerAdapter"}, {"methodBody": ["METHOD_START", "{", "if    ( event   instanceof   TestProgressEvent )     {", "testProgressListeners . getSource (  )  . statusChanged ( event )  ;", "} else", "if    ( event   instanceof   events . task . TaskProgressEvent )     {", "taskProgressListeners . getSource (  )  . statusChanged ( event )  ;", "} else    {", "buildOperationProgressListeners . getSource (  )  . statusChanged ( event )  ;", "}", "}", "METHOD_END"], "methodName": ["broadcastProgressEvent"], "fileName": "org.gradle.tooling.internal.consumer.parameters.BuildProgressListenerAdapter"}, {"methodBody": ["METHOD_START", "{", "ProgressEvent   progressEvent    =    toProgressEvent ( event )  ;", "if    ( progressEvent    !  =    null )     {", "buildOperations . getSource (  )  . statusChanged ( progressEvent )  ;", "}", "}", "METHOD_END"], "methodName": ["broadcastProgressEvent"], "fileName": "org.gradle.tooling.internal.consumer.parameters.BuildProgressListenerAdapter"}, {"methodBody": ["METHOD_START", "{", "TaskProgressEvent   taskProgressEvent    =    toTaskProgressEvent ( event )  ;", "if    ( taskProgressEvent    !  =    null )     {", "tasks . getSource (  )  . statusChanged ( taskProgressEvent )  ;", "}", "}", "METHOD_END"], "methodName": ["broadcastTaskProgressEvent"], "fileName": "org.gradle.tooling.internal.consumer.parameters.BuildProgressListenerAdapter"}, {"methodBody": ["METHOD_START", "{", "TestProgressEvent   testProgressEvent    =    toTestProgressEvent ( event )  ;", "if    ( testProgressEvent    !  =    null )     {", "tests . getSource (  )  . statusChanged ( testProgressEvent )  ;", "}", "}", "METHOD_END"], "methodName": ["broadcastTestProgressEvent"], "fileName": "org.gradle.tooling.internal.consumer.parameters.BuildProgressListenerAdapter"}, {"methodBody": ["METHOD_START", "{", "if    ( event   instanceof   ProgressEvent )     {", "broadcastProgressEvent (  (  ( ProgressEvent )     ( event )  )  )  ;", "} else", "if    ( event   instanceof   protocol . events . InternalTestProgressEvent )     {", "protocol . events . InternalTestProgressEvent   progressEvent    =     (  ( protocol . events . InternalTestProgressEvent )     ( event )  )  ;", "broadcastTestProgressEvent ( progressEvent )  ;", "} else", "if    ( event   instanceof   protocol . events . InternalProgressEvent )     {", "protocol . events . InternalProgressEvent   progressEvent    =     (  ( protocol . events . InternalProgressEvent )     ( event )  )  ;", "if    (  ( progressEvent . getDescriptor (  )  )    instanceof   protocol . events . InternalTaskDescriptor )     {", "broadcastTaskProgressEvent ( progressEvent )  ;", "} else    {", "broadcastProgressEvent ( progressEvent )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["doBroadcast"], "fileName": "org.gradle.tooling.internal.consumer.parameters.BuildProgressListenerAdapter"}, {"methodBody": ["METHOD_START", "{", "OperationDescriptor   descriptor    =    removeDescriptor ( OperationDescriptor . class ,    event . getDescriptor (  )  )  ;", "return   new   DefaultFinishEvent ( event . getEventTime (  )  ,    event . getDisplayName (  )  ,    descriptor ,     . toResult ( event . getResult (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["finishedEvent"], "fileName": "org.gradle.tooling.internal.consumer.parameters.BuildProgressListenerAdapter"}, {"methodBody": ["METHOD_START", "{", "if    ( parentId    =  =    null )     {", "return   null ;", "} else    {", "OperationDescriptor   operationDescriptor    =    descriptorCache . get ( parentId )  ;", "if    ( operationDescriptor    =  =    null )     {", "throw   new   IllegalStateException ( Strformat (  \" Parent   operation   with   id    % s   not   available .  \"  ,    parentId )  )  ;", "} else    {", "return   operationDescriptor ;", "}", "}", "}", "METHOD_END"], "methodName": ["getParentDescriptor"], "fileName": "org.gradle.tooling.internal.consumer.parameters.BuildProgressListenerAdapter"}, {"methodBody": ["METHOD_START", "{", "OperationDescriptor   cachedTestDescriptor    =    this . descriptorCache . remove ( descriptor . getId (  )  )  ;", "if    ( cachedTestDescriptor    =  =    null )     {", "throw   new   IllegalStateException ( Strformat (  \" Operation    % s   is   not   available .  \"  ,    descriptor )  )  ;", "}", "return   assertDescriptorType ( type ,    cachedTestDescriptor )  ;", "}", "METHOD_END"], "methodName": ["removeDescriptor"], "fileName": "org.gradle.tooling.internal.consumer.parameters.BuildProgressListenerAdapter"}, {"methodBody": ["METHOD_START", "{", "OperationDescriptor   descriptor    =    addDescriptor ( event . getDescriptor (  )  ,    toDescriptor ( event . getDescriptor (  )  )  )  ;", "return   new   DefaultStartEvent ( event . getEventTime (  )  ,    event . getDisplayN (  )  ,    descriptor )  ;", "}", "METHOD_END"], "methodName": ["startedEvent"], "fileName": "org.gradle.tooling.internal.consumer.parameters.BuildProgressListenerAdapter"}, {"methodBody": ["METHOD_START", "{", "TaskOperationDescriptor   descriptor    =    removeDescriptor ( TaskOperationDescriptor . class ,    event . getDescriptor (  )  )  ;", "return   new   DefaultTaskFinishEvent ( event . getEventTime (  )  ,    event . getDisplayName (  )  ,    descriptor ,     . toTaskResult (  (  ( InternalTaskResult )     ( event . getResult (  )  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["taskFinishedEvent"], "fileName": "org.gradle.tooling.internal.consumer.parameters.BuildProgressListenerAdapter"}, {"methodBody": ["METHOD_START", "{", "TaskOperationDescriptor   descriptor    =    addDescriptor ( event . getDescriptor (  )  ,    toTaskDescriptor (  (  ( InternalTaskDescriptor )     ( event . getDescriptor (  )  )  )  )  )  ;", "return   new   DefaultTaskStartEvent ( event . getEventTime (  )  ,    event . getDisplayName (  )  ,    descriptor )  ;", "}", "METHOD_END"], "methodName": ["taskStartedEvent"], "fileName": "org.gradle.tooling.internal.consumer.parameters.BuildProgressListenerAdapter"}, {"methodBody": ["METHOD_START", "{", "TestOperationDescriptor   descriptor    =    removeDescriptor ( TestOperationDescriptor . class ,    event . getDescriptor (  )  )  ;", "return   new   DefaultTestFinishEvent ( event . getEventTime (  )  ,    event . getDisplayN (  )  ,    descriptor ,    toTestResult ( event . getResult (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testFinishedEvent"], "fileName": "org.gradle.tooling.internal.consumer.parameters.BuildProgressListenerAdapter"}, {"methodBody": ["METHOD_START", "{", "TestOperationDescriptor   testDescriptor    =    addDescriptor ( event . getDescriptor (  )  ,    toTestDescriptor ( event . getDescriptor (  )  )  )  ;", "return   new   DefaultTestStartEvent ( event . getEventTime (  )  ,    event . getDisplayN (  )  ,    testDescriptor )  ;", "}", "METHOD_END"], "methodName": ["testStartedEvent"], "fileName": "org.gradle.tooling.internal.consumer.parameters.BuildProgressListenerAdapter"}, {"methodBody": ["METHOD_START", "{", "OperationDescriptor   parent    =    getParentDescriptor ( descriptor . getParentId (  )  )  ;", "return   new   DefaultOperationDescriptor ( descriptor ,    parent )  ;", "}", "METHOD_END"], "methodName": ["toDescriptor"], "fileName": "org.gradle.tooling.internal.consumer.parameters.BuildProgressListenerAdapter"}, {"methodBody": ["METHOD_START", "{", "return   origFailure    =  =    null    ?    null    :    new   DefaultFailure ( origFailure . getMessage (  )  ,    origFailure . getDescription (  )  ,    BuildProgressListenerAdapter . toFailures ( origFailure . getCauses (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["toFailure"], "fileName": "org.gradle.tooling.internal.consumer.parameters.BuildProgressListenerAdapter"}, {"methodBody": ["METHOD_START", "{", "if    ( causes    =  =    null )     {", "return   null ;", "}", "List < Failure >    failures    =    new   ArrayList < Failure >  (  )  ;", "for    ( InternalFailure   cause    :    causes )     {", "failures . add (  . toFailure ( cause )  )  ;", "}", "return   failures ;", "}", "METHOD_END"], "methodName": ["toFailures"], "fileName": "org.gradle.tooling.internal.consumer.parameters.BuildProgressListenerAdapter"}, {"methodBody": ["METHOD_START", "{", "if    ( InternalJvmTestDescriptor . KIND _ SUITE . equals ( testKind )  )     {", "return   JvmTestKind . SUITE ;", "} else", "if    ( InternalJvmTestDescriptor . KIND _ ATOMIC . equals ( testKind )  )     {", "return   JvmTestKind . ATOMIC ;", "} else    {", "return   JvmTestKind . UNKNOWN ;", "}", "}", "METHOD_END"], "methodName": ["toJvmTestKind"], "fileName": "org.gradle.tooling.internal.consumer.parameters.BuildProgressListenerAdapter"}, {"methodBody": ["METHOD_START", "{", "if    ( event   instanceof   InternalOperationStartedProgressEvent )     {", "return   startedEvent (  (  ( InternalOperationStartedProgressEvent )     ( event )  )  )  ;", "} else", "if    ( event   instanceof   protocol . events . InternalOperationFinishedProgressEvent )     {", "return   finishedEvent (  (  ( protocol . events . InternalOperationFinishedProgressEvent )     ( event )  )  )  ;", "} else    {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["toProgressEvent"], "fileName": "org.gradle.tooling.internal.consumer.parameters.BuildProgressListenerAdapter"}, {"methodBody": ["METHOD_START", "{", "if    ( result   instanceof   InternalSuccessResult )     {", "return   new   DefaultOperationSuccessResult ( result . getStartTime (  )  ,    result . getEndTime (  )  )  ;", "} else", "if    ( result   instanceof   protocol . events . InternalFailureResult )     {", "return   new   DefaultOperationFailureResult ( result . getStartTime (  )  ,    result . getEndTime (  )  ,    BuildProgressListenerAdapter . toFailures ( result . getFailures (  )  )  )  ;", "} else    {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["toResult"], "fileName": "org.gradle.tooling.internal.consumer.parameters.BuildProgressListenerAdapter"}, {"methodBody": ["METHOD_START", "{", "OperationDescriptor   parent    =    getParentDescriptor ( descriptor . getParentId (  )  )  ;", "return   new   DefaultTaskOperationDescriptor ( descriptor ,    descriptor . getTaskPath (  )  ,    parent )  ;", "}", "METHOD_END"], "methodName": ["toTaskDescriptor"], "fileName": "org.gradle.tooling.internal.consumer.parameters.BuildProgressListenerAdapter"}, {"methodBody": ["METHOD_START", "{", "if    ( event   instanceof   InternalOperationStartedProgressEvent )     {", "return   taskStartedEvent (  (  ( InternalOperationStartedProgressEvent )     ( event )  )  )  ;", "} else", "if    ( event   instanceof   protocol . events . InternalOperationFinishedProgressEvent )     {", "return   taskFinishedEvent (  (  ( protocol . events . InternalOperationFinishedProgressEvent )     ( event )  )  )  ;", "} else    {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["toTaskProgressEvent"], "fileName": "org.gradle.tooling.internal.consumer.parameters.BuildProgressListenerAdapter"}, {"methodBody": ["METHOD_START", "{", "boolean   fromCache    =    false ;", "if    ( result   instanceof   InternalTaskCachedResult )     {", "fromCache    =     (  ( InternalTaskCachedResult )     ( result )  )  . isFromCache (  )  ;", "}", "if    ( result   instanceof   InternalTaskSuccessResult )     {", "return   new   DefaultTaskSuccessResult ( result . getStartTime (  )  ,    result . getEndTime (  )  ,     (  ( InternalTaskSuccessResult )     ( result )  )  . isUpToDate (  )  ,    fromCache )  ;", "} else", "if    ( result   instanceof   protocol . events . InternalTaskSkippedResult )     {", "return   new   DefaultTaskSkippedResult ( result . getStartTime (  )  ,    result . getEndTime (  )  ,     (  ( protocol . events . InternalTaskSkippedResult )     ( result )  )  . getSkipMessage (  )  )  ;", "} else", "if    ( result   instanceof   protocol . events . InternalTaskFailureResult )     {", "return   new   DefaultTaskFailureResult ( result . getStartTime (  )  ,    result . getEndTime (  )  ,    BuildProgressListenerAdapter . toFailures ( result . getFailures (  )  )  )  ;", "} else    {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["toTaskResult"], "fileName": "org.gradle.tooling.internal.consumer.parameters.BuildProgressListenerAdapter"}, {"methodBody": ["METHOD_START", "{", "OperationDescriptor   parent    =    getParentDescriptor ( descriptor . getParentId (  )  )  ;", "if    ( descriptor   instanceof   InternalJvmTestDescriptor )     {", "InternalJvmTestDescriptor   jvmTestDescriptor    =     (  ( InternalJvmTestDescriptor )     ( descriptor )  )  ;", "return   new   DefaultJvmTestOperationDescriptor ( jvmTestDescriptor ,    parent ,     . toJvmTestKind ( jvmTestDescriptor . getTestKind (  )  )  ,    jvmTestDescriptor . getSuiteName (  )  ,    jvmTestDescriptor . getClassName (  )  ,    jvmTestDescriptor . getMethodName (  )  )  ;", "} else    {", "return   new   DefaultTestOperationDescriptor ( descriptor ,    parent )  ;", "}", "}", "METHOD_END"], "methodName": ["toTestDescriptor"], "fileName": "org.gradle.tooling.internal.consumer.parameters.BuildProgressListenerAdapter"}, {"methodBody": ["METHOD_START", "{", "if    ( event   instanceof   InternalTestStartedProgressEvent )     {", "return   testStartedEvent (  (  ( InternalTestStartedProgressEvent )     ( event )  )  )  ;", "} else", "if    ( event   instanceof   protocol . events . InternalTestFinishedProgressEvent )     {", "return   testFinishedEvent (  (  ( protocol . events . InternalTestFinishedProgressEvent )     ( event )  )  )  ;", "} else    {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["toTestProgressEvent"], "fileName": "org.gradle.tooling.internal.consumer.parameters.BuildProgressListenerAdapter"}, {"methodBody": ["METHOD_START", "{", "if    ( result   instanceof   InternalTestSuccessResult )     {", "return   new   DefaultTestSuccessResult ( result . getStartTime (  )  ,    result . getEndTime (  )  )  ;", "} else", "if    ( result   instanceof   protocol . events . InternalTestSkippedResult )     {", "return   new   DefaultTestSkippedResult ( result . getStartTime (  )  ,    result . getEndTime (  )  )  ;", "} else", "if    ( result   instanceof   protocol . events . InternalTestFailureResult )     {", "return   new   DefaultTestFailureResult ( result . getStartTime (  )  ,    result . getEndTime (  )  ,    BuildProgressListenerAdapter . toFailures ( result . getFailures (  )  )  )  ;", "} else    {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["toTestResult"], "fileName": "org.gradle.tooling.internal.consumer.parameters.BuildProgressListenerAdapter"}, {"methodBody": ["METHOD_START", "{", "return   new   ConsumerOperationParameters . Builder (  )  ;", "}", "METHOD_END"], "methodName": ["builder"], "fileName": "org.gradle.tooling.internal.consumer.parameters.ConsumerOperationParameters"}, {"methodBody": ["METHOD_START", "{", "return   arguments ;", "}", "METHOD_END"], "methodName": ["getArguments"], "fileName": "org.gradle.tooling.internal.consumer.parameters.ConsumerOperationParameters"}, {"methodBody": ["METHOD_START", "{", "return   buildProgressListener ;", "}", "METHOD_END"], "methodName": ["getBuildProgressListener"], "fileName": "org.gradle.tooling.internal.consumer.parameters.ConsumerOperationParameters"}, {"methodBody": ["METHOD_START", "{", "return    (  ( CancellationTokenInternal )     ( cancellationToken )  )  . getToken (  )  ;", "}", "METHOD_END"], "methodName": ["getCancellationToken"], "fileName": "org.gradle.tooling.internal.consumer.parameters.ConsumerOperationParameters"}, {"methodBody": ["METHOD_START", "{", "return   parameters . getDaemonBaseDir (  )  ;", "}", "METHOD_END"], "methodName": ["getDaemonBaseDir"], "fileName": "org.gradle.tooling.internal.consumer.parameters.ConsumerOperationParameters"}, {"methodBody": ["METHOD_START", "{", "return   parameters . getDaemonMaxIdleTimeUnits (  )  ;", "}", "METHOD_END"], "methodName": ["getDaemonMaxIdleTimeUnits"], "fileName": "org.gradle.tooling.internal.consumer.parameters.ConsumerOperationParameters"}, {"methodBody": ["METHOD_START", "{", "return   parameters . getDaemonMaxIdleTimeValue (  )  ;", "}", "METHOD_END"], "methodName": ["getDaemonMaxIdleTimeValue"], "fileName": "org.gradle.tooling.internal.consumer.parameters.ConsumerOperationParameters"}, {"methodBody": ["METHOD_START", "{", "return   entryPointName ;", "}", "METHOD_END"], "methodName": ["getEntryPointName"], "fileName": "org.gradle.tooling.internal.consumer.parameters.ConsumerOperationParameters"}, {"methodBody": ["METHOD_START", "{", "return   envVariables ;", "}", "METHOD_END"], "methodName": ["getEnvironmentVariables"], "fileName": "org.gradle.tooling.internal.consumer.parameters.ConsumerOperationParameters"}, {"methodBody": ["METHOD_START", "{", "return   parameters . getGradleUserHomeDir (  )  ;", "}", "METHOD_END"], "methodName": ["getGradleUserHomeDir"], "fileName": "org.gradle.tooling.internal.consumer.parameters.ConsumerOperationParameters"}, {"methodBody": ["METHOD_START", "{", "return   injectedPluginClasspath . getAsFiles (  )  ;", "}", "METHOD_END"], "methodName": ["getInjectedPluginClasspath"], "fileName": "org.gradle.tooling.internal.consumer.parameters.ConsumerOperationParameters"}, {"methodBody": ["METHOD_START", "{", "return   javaHome ;", "}", "METHOD_END"], "methodName": ["getJavaHome"], "fileName": "org.gradle.tooling.internal.consumer.parameters.ConsumerOperationParameters"}, {"methodBody": ["METHOD_START", "{", "return   jvmArguments ;", "}", "METHOD_END"], "methodName": ["getJvmArguments"], "fileName": "org.gradle.tooling.internal.consumer.parameters.ConsumerOperationParameters"}, {"methodBody": ["METHOD_START", "{", "return   launchables ;", "}", "METHOD_END"], "methodName": ["getLaunchables"], "fileName": "org.gradle.tooling.internal.consumer.parameters.ConsumerOperationParameters"}, {"methodBody": ["METHOD_START", "{", "return   progressListener ;", "}", "METHOD_END"], "methodName": ["getProgressListener"], "fileName": "org.gradle.tooling.internal.consumer.parameters.ConsumerOperationParameters"}, {"methodBody": ["METHOD_START", "{", "return   parameters . getProjectDir (  )  ;", "}", "METHOD_END"], "methodName": ["getProjectDir"], "fileName": "org.gradle.tooling.internal.consumer.parameters.ConsumerOperationParameters"}, {"methodBody": ["METHOD_START", "{", "return   stderr ;", "}", "METHOD_END"], "methodName": ["getStandardError"], "fileName": "org.gradle.tooling.internal.consumer.parameters.ConsumerOperationParameters"}, {"methodBody": ["METHOD_START", "{", "return   stdin ;", "}", "METHOD_END"], "methodName": ["getStandardInput"], "fileName": "org.gradle.tooling.internal.consumer.parameters.ConsumerOperationParameters"}, {"methodBody": ["METHOD_START", "{", "return   stdout ;", "}", "METHOD_END"], "methodName": ["getStandardOutput"], "fileName": "org.gradle.tooling.internal.consumer.parameters.ConsumerOperationParameters"}, {"methodBody": ["METHOD_START", "{", "return   startTime ;", "}", "METHOD_END"], "methodName": ["getStartTime"], "fileName": "org.gradle.tooling.internal.consumer.parameters.ConsumerOperationParameters"}, {"methodBody": ["METHOD_START", "{", "return   tasks ;", "}", "METHOD_END"], "methodName": ["getTasks"], "fileName": "org.gradle.tooling.internal.consumer.parameters.ConsumerOperationParameters"}, {"methodBody": ["METHOD_START", "{", "return   parameters . getVerboseLogging (  )  ;", "}", "METHOD_END"], "methodName": ["getVerboseLogging"], "fileName": "org.gradle.tooling.internal.consumer.parameters.ConsumerOperationParameters"}, {"methodBody": ["METHOD_START", "{", "return   colorOutput ;", "}", "METHOD_END"], "methodName": ["isColorOutput"], "fileName": "org.gradle.tooling.internal.consumer.parameters.ConsumerOperationParameters"}, {"methodBody": ["METHOD_START", "{", "return   parameters . isEmbedded (  )  ;", "}", "METHOD_END"], "methodName": ["isEmbedded"], "fileName": "org.gradle.tooling.internal.consumer.parameters.ConsumerOperationParameters"}, {"methodBody": ["METHOD_START", "{", "return   parameters . isSearchUpwards (  )  ;", "}", "METHOD_END"], "methodName": ["isSearchUpwards"], "fileName": "org.gradle.tooling.internal.consumer.parameters.ConsumerOperationParameters"}, {"methodBody": ["METHOD_START", "{", "if    ( javaHome    =  =    null )     {", "return ;", "}", "if    (  !  ( isDirectory (  )  )  )     {", "throw   new   IllegalArgumentExcep (  (  \" Supplied   You   supplied :     \"     +    javaHome )  )  ;", "}", "}", "METHOD_END"], "methodName": ["validateJavaHome"], "fileName": "org.gradle.tooling.internal.consumer.parameters.ConsumerOperationParameters"}, {"methodBody": ["METHOD_START", "{", "if    (  ( listenerFailure )     !  =    null )     {", "throw   new   NotificationException ( null ,     \" One   or   more   progress   listeners   failed   with   an   exception .  \"  ,    Collections . singletonList ( listenerFailure )  )  ;", "}", "}", "METHOD_END"], "methodName": ["rethrowErrors"], "fileName": "org.gradle.tooling.internal.consumer.parameters.FailsafeBuildProgressListenerAdapter"}, {"methodBody": ["METHOD_START", "{", "final   String   description    =     ( stack . isEmpty (  )  )     ?     \"  \"     :    stack . getFirst (  )  ;", "listeners . getSource (  )  . statusChanged ( new   Event (  )     {", "public   String   getDescription (  )     {", "return   description ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["fireChangeEvent"], "fileName": "org.gradle.tooling.internal.consumer.parameters.ProgressListenerAdapter"}, {"methodBody": ["METHOD_START", "{", "stack . removeFirst (  )  ;", "fireChangeEvent (  )  ;", "}", "METHOD_END"], "methodName": ["onOperationEnd"], "fileName": "org.gradle.tooling.internal.consumer.parameters.ProgressListenerAdapter"}, {"methodBody": ["METHOD_START", "{", "stack . addFirst (  ( description    =  =    null    ?     \"  \"     :    description )  )  ;", "fireChangeEvent (  )  ;", "}", "METHOD_END"], "methodName": ["onOperationStart"], "fileName": "org.gradle.tooling.internal.consumer.parameters.ProgressListenerAdapter"}, {"methodBody": ["METHOD_START", "{", "map . put ( HierarchicalEclipseProject . class ,     \" HierarchicalEclipseProject \"  )  ;", "map . put ( EclipseProject . class ,     \" EclipseProject \"  )  ;", "map . put ( IdeaProject . class ,     \" IdeaProject \"  )  ;", "map . put ( GradleProject . class ,     \" GradleProject \"  )  ;", "map . put ( BasicIdeaProject . class ,     \" BasicIdeaProject \"  )  ;", "map . put ( BuildEnvironment . class ,     \" BuildEnvironment \"  )  ;", "map . put ( ProjectOutcomes . class ,     \" ProjectOutcomes \"  )  ;", "map . put ( Void . class ,    Void . class . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["addModelNameMappings"], "fileName": "org.gradle.tooling.internal.consumer.versioning.ModelMapping"}, {"methodBody": ["METHOD_START", "{", "map . put ( HierarchicalEclipseProject . class ,    HierarchicalEclipseProjectVersion 1  . class )  ;", "map . put ( EclipseProject . class ,    EclipseProjectVersion 3  . class )  ;", "map . put ( IdeaProject . class ,    IIdeaProject . class )  ;", "map . put ( GradleProject . class ,    IGradleProject . class )  ;", "map . put ( BasicIdeaProject . class ,    IBasicIdeaProject . class )  ;", "map . put ( BuildEnvironment . class ,    IBuildEnvironment . class )  ;", "map . put ( ProjectOutcomes . class ,    IProjectOutcomes . class )  ;", "map . put ( Void . class ,    Void . class )  ;", "}", "METHOD_END"], "methodName": ["addModelToProtocolMappings"], "fileName": "org.gradle.tooling.internal.consumer.versioning.ModelMapping"}, {"methodBody": ["METHOD_START", "{", "map . put ( HierarchicalEclipseProject . class ,     \"  1  .  0  - milestone -  3  \"  )  ;", "map . put ( EclipseProject . class ,     \"  1  .  0  - milestone -  3  \"  )  ;", "map . put ( IdeaProject . class ,     \"  1  .  0  - milestone -  5  \"  )  ;", "map . put ( GProject . class ,     \"  1  .  0  - milestone -  5  \"  )  ;", "map . put ( BasicIdeaProject . class ,     \"  1  .  0  - milestone -  5  \"  )  ;", "map . put ( BuildEnvironment . class ,     \"  1  .  0  - milestone -  8  \"  )  ;", "map . put ( ProjectOutcomes . class ,     \"  1  .  2  \"  )  ;", "map . put ( Void . class ,     \"  1  .  0  - milestone -  3  \"  )  ;", "map . put ( GBuild . class ,     \"  1  .  8  \"  )  ;", "map . put ( ProjectPublications . class ,     \"  1  .  1  2  \"  )  ;", "}", "METHOD_END"], "methodName": ["addModelVersions"], "fileName": "org.gradle.tooling.internal.consumer.versioning.ModelMapping"}, {"methodBody": ["METHOD_START", "{", "if    ( modelType . equals ( Void . class )  )     {", "return   new    . DefaultModelIdentifier ( ModelIdentifier . NULL _ MODEL )  ;", "}", "String   modelName    =    getModelName ( modelType )  ;", "if    ( modelName    !  =    null )     {", "return   new    . DefaultModelIdentifier ( modelName )  ;", "}", "return   new    . DefaultModelIdentifier ( modelType . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["getModelIdentifierFromModelType"], "fileName": "org.gradle.tooling.internal.consumer.versioning.ModelMapping"}, {"methodBody": ["METHOD_START", "{", "return   ModelMapping . MODEL _ NAME _ MAP . get ( modelType )  ;", "}", "METHOD_END"], "methodName": ["getModelName"], "fileName": "org.gradle.tooling.internal.consumer.versioning.ModelMapping"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    modelType    =    ModelMapping . MODEL _ TO _ PROTOCOL _ MAP . inverse (  )  . get ( protocolType )  ;", "if    ( modelType    =  =    null )     {", "return   null ;", "}", "return   ModelMapping . MODEL _ NAME _ MAP . get ( modelType )  ;", "}", "METHOD_END"], "methodName": ["getModelNameFromProtocolType"], "fileName": "org.gradle.tooling.internal.consumer.versioning.ModelMapping"}, {"methodBody": ["METHOD_START", "{", "if    ( ModelMapping . MODEL _ TO _ PROTOCOL _ MAP . containsValue ( modelType )  )     {", "return   modelType ;", "}", "return   ModelMapping . MODEL _ TO _ PROTOCOL _ MAP . get ( modelType )  ;", "}", "METHOD_END"], "methodName": ["getProtocolType"], "fileName": "org.gradle.tooling.internal.consumer.versioning.ModelMapping"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    modelType    =    ModelMapping . MODEL _ NAME _ MAP . inverse (  )  . get ( name )  ;", "if    ( modelType    =  =    null )     {", "return   null ;", "}", "return   getProtocolType ( modelType )  ;", "}", "METHOD_END"], "methodName": ["getProtocolTypeFromModelName"], "fileName": "org.gradle.tooling.internal.consumer.versioning.ModelMapping"}, {"methodBody": ["METHOD_START", "{", "return   ModelMapping . MODEL _ VERSIONS . get ( modelType )  ;", "}", "METHOD_END"], "methodName": ["getVersionAdded"], "fileName": "org.gradle.tooling.internal.consumer.versioning.ModelMapping"}, {"methodBody": ["METHOD_START", "{", "return   VersionDetails . from ( GradleVersion . version ( version )  )  ;", "}", "METHOD_END"], "methodName": ["from"], "fileName": "org.gradle.tooling.internal.consumer.versioning.VersionDetails"}, {"methodBody": ["METHOD_START", "{", "if    (  ( version . getBaseVersion (  )  . compareTo ( GradleVersion . version (  \"  4  .  4  \"  )  )  )     >  =     0  )     {", "return   new    . R 4  4  ( version . getVersion (  )  )  ;", "}", "if    (  ( version . getBaseVersion (  )  . compareTo ( GradleVersion . version (  \"  3  .  5  \"  )  )  )     >  =     0  )     {", "return   new    . R 3  5  ( version . getVersion (  )  )  ;", "}", "if    (  ( version . compareTo ( GradleVersion . version (  \"  2  .  1  \"  )  )  )     >  =     0  )     {", "return   new    . R 2  1  ( version . getVersion (  )  )  ;", "}", "if    (  ( version . compareTo ( GradleVersion . version (  \"  1  .  1  2  \"  )  )  )     >  =     0  )     {", "return   new    . R 1  1  2  ( version . getVersion (  )  )  ;", "}", "if    (  ( version . compareTo ( GradleVersion . version (  \"  1  .  8  \"  )  )  )     >  =     0  )     {", "return   new    . R 1  8  ( version . getVersion (  )  )  ;", "}", "if    (  ( version . compareTo ( GradleVersion . version (  \"  1  .  6  \"  )  )  )     >  =     0  )     {", "return   new    . R 1  6  ( version . getVersion (  )  )  ;", "}", "return   new    . R 1  2  ( version . getVersion (  )  )  ;", "}", "METHOD_END"], "methodName": ["from"], "fileName": "org.gradle.tooling.internal.consumer.versioning.VersionDetails"}, {"methodBody": ["METHOD_START", "{", "return   providerVersion ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "org.gradle.tooling.internal.consumer.versioning.VersionDetails"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["maySupportModel"], "fileName": "org.gradle.tooling.internal.consumer.versioning.VersionDetails"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["supportsCancellation"], "fileName": "org.gradle.tooling.internal.consumer.versioning.VersionDetails"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["supportsEnvironmentVariablesCustomization"], "fileName": "org.gradle.tooling.internal.consumer.versioning.VersionDetails"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["supportsParameterizedToolingModels"], "fileName": "org.gradle.tooling.internal.consumer.versioning.VersionDetails"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["supportsRunTasksBeforeExecutingAction"], "fileName": "org.gradle.tooling.internal.consumer.versioning.VersionDetails"}, {"methodBody": ["METHOD_START", "{", "children . add ( child )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addChild"], "fileName": "org.gradle.tooling.internal.gradle.BasicGradleProject"}, {"methodBody": ["METHOD_START", "{", "return   children ;", "}", "METHOD_END"], "methodName": ["getChildren"], "fileName": "org.gradle.tooling.internal.gradle.BasicGradleProject"}, {"methodBody": ["METHOD_START", "{", "return   projectDirectory ;", "}", "METHOD_END"], "methodName": ["getProjectDirectory"], "fileName": "org.gradle.tooling.internal.gradle.BasicGradleProject"}, {"methodBody": ["METHOD_START", "{", "super . setName ( name )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.gradle.tooling.internal.gradle.BasicGradleProject"}, {"methodBody": ["METHOD_START", "{", "this . projectDirectory    =    projectDirectory ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setProjectDirectory"], "fileName": "org.gradle.tooling.internal.gradle.BasicGradleProject"}, {"methodBody": ["METHOD_START", "{", "return   description ;", "}", "METHOD_END"], "methodName": ["getDescription"], "fileName": "org.gradle.tooling.internal.gradle.ConsumerProvidedTask"}, {"methodBody": ["METHOD_START", "{", "return   displayName ;", "}", "METHOD_END"], "methodName": ["getDisplayName"], "fileName": "org.gradle.tooling.internal.gradle.ConsumerProvidedTask"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.tooling.internal.gradle.ConsumerProvidedTask"}, {"methodBody": ["METHOD_START", "{", "return   path ;", "}", "METHOD_END"], "methodName": ["getPath"], "fileName": "org.gradle.tooling.internal.gradle.ConsumerProvidedTask"}, {"methodBody": ["METHOD_START", "{", "SortedSet < String >    result    =    Sets . newTreeSet ( new   TaskNameComparator (  )  )  ;", "result . add ( getPath (  )  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["getTaskNames"], "fileName": "org.gradle.tooling.internal.gradle.ConsumerProvidedTask"}, {"methodBody": ["METHOD_START", "{", "this . description    =    description ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setDescription"], "fileName": "org.gradle.tooling.internal.gradle.ConsumerProvidedTask"}, {"methodBody": ["METHOD_START", "{", "this . displayName    =    displayName ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setDisplayName"], "fileName": "org.gradle.tooling.internal.gradle.ConsumerProvidedTask"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.gradle.tooling.internal.gradle.ConsumerProvidedTask"}, {"methodBody": ["METHOD_START", "{", "this . path    =    path ;", "retu   this ;", "}", "METHOD_END"], "methodName": ["setPath"], "fileName": "org.gradle.tooling.internal.gradle.ConsumerProvidedTask"}, {"methodBody": ["METHOD_START", "{", "return   description ;", "}", "METHOD_END"], "methodName": ["getDescription"], "fileName": "org.gradle.tooling.internal.gradle.ConsumerProvidedTaskSelector"}, {"methodBody": ["METHOD_START", "{", "return   displayName ;", "}", "METHOD_END"], "methodName": ["getDisplayName"], "fileName": "org.gradle.tooling.internal.gradle.ConsumerProvidedTaskSelector"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.tooling.internal.gradle.ConsumerProvidedTaskSelector"}, {"methodBody": ["METHOD_START", "{", "return   tasks ;", "}", "METHOD_END"], "methodName": ["getTaskNames"], "fileName": "org.gradle.tooling.internal.gradle.ConsumerProvidedTaskSelector"}, {"methodBody": ["METHOD_START", "{", "this . description    =    description ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setDescription"], "fileName": "org.gradle.tooling.internal.gradle.ConsumerProvidedTaskSelector"}, {"methodBody": ["METHOD_START", "{", "this . displayName    =    displayName ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setDisplayName"], "fileName": "org.gradle.tooling.internal.gradle.ConsumerProvidedTaskSelector"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.gradle.tooling.internal.gradle.ConsumerProvidedTaskSelector"}, {"methodBody": ["METHOD_START", "{", "this . tasks    =    tasks ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setTaskNames"], "fileName": "org.gradle.tooling.internal.gradle.ConsumerProvidedTaskSelector"}, {"methodBody": ["METHOD_START", "{", "return   rootDir ;", "}", "METHOD_END"], "methodName": ["getRootDir"], "fileName": "org.gradle.tooling.internal.gradle.DefaultBuildIdentifier"}, {"methodBody": ["METHOD_START", "{", "includedBuilds . add ( includedBuild )  ;", "}", "METHOD_END"], "methodName": ["addIncludedBuild"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradleBuild"}, {"methodBody": ["METHOD_START", "{", "projects . add ( project )  ;", "}", "METHOD_END"], "methodName": ["addProject"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradleBuild"}, {"methodBody": ["METHOD_START", "{", "return   buildIdentifier ;", "}", "METHOD_END"], "methodName": ["getBuildIdentifier"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradleBuild"}, {"methodBody": ["METHOD_START", "{", "return   includedBuilds ;", "}", "METHOD_END"], "methodName": ["getIncludedBuilds"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradleBuild"}, {"methodBody": ["METHOD_START", "{", "return   projects ;", "}", "METHOD_END"], "methodName": ["getProjects"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradleBuild"}, {"methodBody": ["METHOD_START", "{", "return   rootProject ;", "}", "METHOD_END"], "methodName": ["getRootProject"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradleBuild"}, {"methodBody": ["METHOD_START", "{", "this . rootProject    =    rootProject ;", "this . buildIdentifier    =    new   BuildIdentifier ( rootProject . getRootDir (  )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setRootProject"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradleBuild"}, {"methodBody": ["METHOD_START", "{", "return   group ;", "}", "METHOD_END"], "methodName": ["getGroup"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradleModuleVersion"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradleModuleVersion"}, {"methodBody": ["METHOD_START", "{", "return   version ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradleModuleVersion"}, {"methodBody": ["METHOD_START", "{", "if    ( path . equals ( this . getPath (  )  )  )     {", "return   this ;", "}", "for    (  < T >    child    :    children )     {", "< T >    found    =    child . findByPath ( path )  ;", "if    ( found    !  =    null )     {", "return   found ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["findByPath"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradleProject"}, {"methodBody": ["METHOD_START", "{", "return   buildDirectory ;", "}", "METHOD_END"], "methodName": ["getBuildDirectory"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradleProject"}, {"methodBody": ["METHOD_START", "{", "return   buildScript ;", "}", "METHOD_END"], "methodName": ["getBuildScript"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradleProject"}, {"methodBody": ["METHOD_START", "{", "return   children ;", "}", "METHOD_END"], "methodName": ["getChildren"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradleProject"}, {"methodBody": ["METHOD_START", "{", "return   description ;", "}", "METHOD_END"], "methodName": ["getDescription"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradleProject"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradleProject"}, {"methodBody": ["METHOD_START", "{", "return   parent ;", "}", "METHOD_END"], "methodName": ["getParent"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradleProject"}, {"methodBody": ["METHOD_START", "{", "return   projectIdentifier . getProjectPath (  )  ;", "}", "METHOD_END"], "methodName": ["getPath"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradleProject"}, {"methodBody": ["METHOD_START", "{", "return   projectDirectory ;", "}", "METHOD_END"], "methodName": ["getProjectDirectory"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradleProject"}, {"methodBody": ["METHOD_START", "{", "return   projectIdentifier ;", "}", "METHOD_END"], "methodName": ["getProjectIdentifier"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradleProject"}, {"methodBody": ["METHOD_START", "{", "return   tasks ;", "}", "METHOD_END"], "methodName": ["getTasks"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradleProject"}, {"methodBody": ["METHOD_START", "{", "this . buildDirectory    =    buildDirectory ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setBuildDirectory"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradleProject"}, {"methodBody": ["METHOD_START", "{", "this . children    =    children ;", "retu   this ;", "}", "METHOD_END"], "methodName": ["setChildren"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradleProject"}, {"methodBody": ["METHOD_START", "{", "this . description    =    description ;", "retu   this ;", "}", "METHOD_END"], "methodName": ["setDescription"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradleProject"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradleProject"}, {"methodBody": ["METHOD_START", "{", "this . parent    =    parent ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setParent"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradleProject"}, {"methodBody": ["METHOD_START", "{", "this . projectDirectory    =    projectDirectory ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setProjectDirectory"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradleProject"}, {"methodBody": ["METHOD_START", "{", "this . projectIdentifier    =    projectIdentifier ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setProjectIdentifier"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradleProject"}, {"methodBody": ["METHOD_START", "{", "this . tasks    =    tasks ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setTasks"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradleProject"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  \" GradleProject {  \"     +     \" path =  '  \"  )     +     ( getPath (  )  )  )     +     '  \\  '  '  )     +     '  }  '  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradleProject"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradlePublication"}, {"methodBody": ["METHOD_START", "{", "return   projectIdentifier ;", "}", "METHOD_END"], "methodName": ["getProjectIdentifier"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradlePublication"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradlePublication"}, {"methodBody": ["METHOD_START", "{", "this . projectIdentifier    =    projectIdentifier ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setProjectIdentifier"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradlePublication"}, {"methodBody": ["METHOD_START", "{", "return   Objects . toStringHelper ( this )  . add (  \" id \"  ,    id )  . toString (  )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradlePublication"}, {"methodBody": ["METHOD_START", "{", "return   sourceFile ;", "}", "METHOD_END"], "methodName": ["getSourceFile"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradleScript"}, {"methodBody": ["METHOD_START", "{", "this . sourceFile    =    sourceFile ;", "}", "METHOD_END"], "methodName": ["setSourceFile"], "fileName": "org.gradle.tooling.internal.gradle.DefaultGradleScript"}, {"methodBody": ["METHOD_START", "{", "return   build ;", "}", "METHOD_END"], "methodName": ["getBuildIdentifier"], "fileName": "org.gradle.tooling.internal.gradle.DefaultProjectIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   projectPath ;", "}", "METHOD_END"], "methodName": ["getProjectPath"], "fileName": "org.gradle.tooling.internal.gradle.DefaultProjectIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   projectIdentifier ;", "}", "METHOD_END"], "methodName": ["getProjectIdentifier"], "fileName": "org.gradle.tooling.internal.gradle.DefaultProjectPublications"}, {"methodBody": ["METHOD_START", "{", "return   publications ;", "}", "METHOD_END"], "methodName": ["getPublications"], "fileName": "org.gradle.tooling.internal.gradle.DefaultProjectPublications"}, {"methodBody": ["METHOD_START", "{", "this . projectIdentifier    =    projectIdentifier ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setProjectIdentifier"], "fileName": "org.gradle.tooling.internal.gradle.DefaultProjectPublications"}, {"methodBody": ["METHOD_START", "{", "this . publications    =    publications ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setPublications"], "fileName": "org.gradle.tooling.internal.gradle.DefaultProjectPublications"}, {"methodBody": ["METHOD_START", "{", "children . add ( child )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addChild"], "fileName": "org.gradle.tooling.internal.gradle.PartialBasicGradleProject"}, {"methodBody": ["METHOD_START", "{", "return   children ;", "}", "METHOD_END"], "methodName": ["getChildren"], "fileName": "org.gradle.tooling.internal.gradle.PartialBasicGradleProject"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.tooling.internal.gradle.PartialBasicGradleProject"}, {"methodBody": ["METHOD_START", "{", "return   parent ;", "}", "METHOD_END"], "methodName": ["getParent"], "fileName": "org.gradle.tooling.internal.gradle.PartialBasicGradleProject"}, {"methodBody": ["METHOD_START", "{", "return   projectIdentifier . getProjectPath (  )  ;", "}", "METHOD_END"], "methodName": ["getPath"], "fileName": "org.gradle.tooling.internal.gradle.PartialBasicGradleProject"}, {"methodBody": ["METHOD_START", "{", "return   projectIdentifier ;", "}", "METHOD_END"], "methodName": ["getProjectIdentifier"], "fileName": "org.gradle.tooling.internal.gradle.PartialBasicGradleProject"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.gradle.tooling.internal.gradle.PartialBasicGradleProject"}, {"methodBody": ["METHOD_START", "{", "this . parent    =    parent ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setParent"], "fileName": "org.gradle.tooling.internal.gradle.PartialBasicGradleProject"}, {"methodBody": ["METHOD_START", "{", "this . projectIdentifier    =    projectIdentifier ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setProjectIdentifier"], "fileName": "org.gradle.tooling.internal.gradle.PartialBasicGradleProject"}, {"methodBody": ["METHOD_START", "{", "return   String . format (  (  \" Unsupported   method :     % s .  \"     +     (  (  \"  \\ nThe   version   of   Gradle   you   connect   to   does   not   support   that   method .  \"     +     \"  \\ nTo   resolve   the   problem   you   can   change / upgrade   the   target   version   of   Gradle   you   connect   to .  \"  )     +     \"  \\ nAlternatively ,    you   can   ignore   this   exception   and   read   other   information   from   the   model .  \"  )  )  ,    method )  ;", "}", "METHOD_END"], "methodName": ["formatUnsupportedModelMethod"], "fileName": "org.gradle.tooling.model.internal.Exceptions"}, {"methodBody": ["METHOD_START", "{", "return   new   UnknownModelException ( String . format (  \" No   model   of   type    '  % s '    is   available   in   this   build .  \"  ,    type . getSimpleName (  )  )  ,    failure . getCause (  )  )  ;", "}", "METHOD_END"], "methodName": ["unknownModel"], "fileName": "org.gradle.tooling.model.internal.Exceptions"}, {"methodBody": ["METHOD_START", "{", "return   new   UnsupportedVersionException ( String . format (  \" The   version   of   Gradle   you   are   using    (  % s )    does   not   support   the    % s .    Support   for   this   is   available   in   Gradle    % s   and   all   later   versions .  \"  ,    targetVersion ,    feature ,    versionAdded )  )  ;", "}", "METHOD_END"], "methodName": ["unsupportedFeature"], "fileName": "org.gradle.tooling.model.internal.Exceptions"}, {"methodBody": ["METHOD_START", "{", "return   new   UnsupportedVersionException ( String . format (  \" The   version   of   Gradle   you   are   using    (  % s )    does   not   support   the    % s .    Support   for   this   is   available   in   Gradle    % s   and   all   later   versions .  \"  ,    distro . getDisplayName (  )  ,    feature ,    versionAdded )  )  ;", "}", "METHOD_END"], "methodName": ["unsupportedFeature"], "fileName": "org.gradle.tooling.model.internal.Exceptions"}, {"methodBody": ["METHOD_START", "{", "return   new   UnsupportedMethodException ( Exceptions . formatUnsupportedModelMethod ( method )  )  ;", "}", "METHOD_END"], "methodName": ["unsupportedMethod"], "fileName": "org.gradle.tooling.model.internal.Exceptions"}, {"methodBody": ["METHOD_START", "{", "ModelMapping   modelMapping    =    new   ModelMapping (  )  ;", "String   versionAdded    =    modelMapping . getVersionAdded ( modelType )  ;", "if    ( versionAdded    !  =    null )     {", "return   new   UnknownModel ( String . format (  \" The   version   of   Gradle   you   are   using    (  % s )    does   not   support   building   a   model   of   type    '  % s '  .    Support   for   building    '  % s '    models   was   added   in   Gradle    % s   and   is   available   in   all   later   versions .  \"  ,    targetVersion ,    modelType . getSimpleName (  )  ,    modelType . getSimpleName (  )  ,    versionAdded )  )  ;", "} else    {", "return   new   UnknownModel ( String . format (  \" The   version   of   Gradle   you   are   using    (  % s )    does   not   support   building   a   model   of   type    '  % s '  .    Support   for   building   custom   tooling   models   was   added   in   Gradle    1  .  6    and   is   available   in   all   later   versions .  \"  ,    targetVersion ,    modelType . getSimpleName (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["unsupportedModel"], "fileName": "org.gradle.tooling.model.internal.Exceptions"}, {"methodBody": ["METHOD_START", "{", "return   new   ArrayList < T >  ( elements )  ;", "}", "METHOD_END"], "methodName": ["getAll"], "fileName": "org.gradle.tooling.model.internal.ImmutableDomainObjectSet"}, {"methodBody": ["METHOD_START", "{", "return   getAll (  )  . get ( index )  ;", "}", "METHOD_END"], "methodName": ["getAt"], "fileName": "org.gradle.tooling.model.internal.ImmutableDomainObjectSet"}, {"methodBody": ["METHOD_START", "{", "return   new   ImmutableDomainObjectSet < T >  ( elements )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.tooling.model.internal.ImmutableDomainObjectSet"}]