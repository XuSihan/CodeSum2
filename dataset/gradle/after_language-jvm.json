[{"methodBody": ["METHOD_START", "{", "return   delegate ;", "}", "METHOD_END"], "methodName": ["getDelegate"], "fileName": "org.gradle.api.internal.tasks.compile.daemon.AbstractDaemonCompiler"}, {"methodBody": ["METHOD_START", "{", "BaseForkOptions   merged    =    new   BaseForkOptions (  )  ;", "merged . setMemoryInitialSize (  . mergeHeapSize ( left . getMemoryInitialSize (  )  ,    right . getMemoryInitialSize (  )  )  )  ;", "merged . setMemoryMaximumSize (  . mergeHeapSize ( left . getMemoryMaximumSize (  )  ,    right . getMemoryMaximumSize (  )  )  )  ;", "Set < String >    mergedJvmArgs    =     . normalized ( left . getJvmArgs (  )  )  ;", "mergedJvmArgs . addAll (  . normalized ( right . getJvmArgs (  )  )  )  ;", "merged . setJvmArgs ( Lists . newArrayList ( mergedJvmArgs )  )  ;", "return   merged ;", "}", "METHOD_END"], "methodName": ["mergeForkOptions"], "fileName": "org.gradle.api.internal.tasks.compile.daemon.AbstractDaemonCompiler"}, {"methodBody": ["METHOD_START", "{", "return   classpath ;", "}", "METHOD_END"], "methodName": ["getClasspath"], "fileName": "org.gradle.api.tasks.compile.AbstractCompile"}, {"methodBody": ["METHOD_START", "{", "return   destinationDir . getOrNull (  )  ;", "}", "METHOD_END"], "methodName": ["getDestinationDir"], "fileName": "org.gradle.api.tasks.compile.AbstractCompile"}, {"methodBody": ["METHOD_START", "{", "return   sourceCompatibility ;", "}", "METHOD_END"], "methodName": ["getSourceCompatibility"], "fileName": "org.gradle.api.tasks.compile.AbstractCompile"}, {"methodBody": ["METHOD_START", "{", "return   targetCompatibility ;", "}", "METHOD_END"], "methodName": ["getTargetCompatibility"], "fileName": "org.gradle.api.tasks.compile.AbstractCompile"}, {"methodBody": ["METHOD_START", "{", "this . classpath    =    configuration ;", "}", "METHOD_END"], "methodName": ["setClasspath"], "fileName": "org.gradle.api.tasks.compile.AbstractCompile"}, {"methodBody": ["METHOD_START", "{", "this . destinationDir . set ( destinationDir )  ;", "}", "METHOD_END"], "methodName": ["setDestinationDir"], "fileName": "org.gradle.api.tasks.compile.AbstractCompile"}, {"methodBody": ["METHOD_START", "{", "this . destinationDir . set ( destinationDir )  ;", "}", "METHOD_END"], "methodName": ["setDestinationDir"], "fileName": "org.gradle.api.tasks.compile.AbstractCompile"}, {"methodBody": ["METHOD_START", "{", "this . sourceCompatibility    =    sourceCompatibility ;", "}", "METHOD_END"], "methodName": ["setSourceCompatibility"], "fileName": "org.gradle.api.tasks.compile.AbstractCompile"}, {"methodBody": ["METHOD_START", "{", "this . targetCompatibility    =    targetCompatibility ;", "}", "METHOD_END"], "methodName": ["setTargetCompatibility"], "fileName": "org.gradle.api.tasks.compile.AbstractCompile"}, {"methodBody": ["METHOD_START", "{", "Object   value    =    JavaReflectionUtil . readableProperty ( this ,    Object . class ,    field . getName (  )  )  . getValue ( this )  ;", "if    ( value    !  =    null )     {", "map . put ( getAntPropertyName ( field . getName (  )  )  ,    getAntPropertyValue ( field . getName (  )  ,    value )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addValueToMapIfNotNull"], "fileName": "org.gradle.api.tasks.compile.AbstractOptions"}, {"methodBody": ["METHOD_START", "{", "if    ( args    =  =    null )     {", "return ;", "}", "for    ( Map . Entry < String ,    Object >    arg    :    args . entrySet (  )  )     {", "setProperty ( aetKey (  )  ,    aetValue (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["define"], "fileName": "org.gradle.api.tasks.compile.AbstractOptions"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["excludeFromAntProperties"], "fileName": "org.gradle.api.tasks.compile.AbstractOptions"}, {"methodBody": ["METHOD_START", "{", "return   fieldName ;", "}", "METHOD_END"], "methodName": ["getAntPropertyName"], "fileName": "org.gradle.api.tasks.compile.AbstractOptions"}, {"methodBody": ["METHOD_START", "{", "return   value ;", "}", "METHOD_END"], "methodName": ["getAntPropertyValue"], "fileName": "org.gradle.api.tasks.compile.AbstractOptions"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  ( field . getModifiers (  )  )     &     ( Modifier . STATIC )  )     =  =     0  )     &  &     (  !  ( field . getName (  )  . equals (  \" metaClass \"  )  )  )  )     &  &     (  !  ( field . getName (  )  . equals (  \" fileResolver \"  )  )  )  )     &  &     (  !  ( excludeFromAntProperties ( field . getName (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["isOptionField"], "fileName": "org.gradle.api.tasks.compile.AbstractOptions"}, {"methodBody": ["METHOD_START", "{", "final   Map < String ,    Object >    map    =    Maps . newHashMap (  )  ;", "Class <  ?  >    currClass    =    new   DslObject ( this )  . getDeclaredType (  )  ;", "while    ( currClass    !  =     (  . class )  )     {", "for    ( final   Field   field    :    currClass . getDeclaredFields (  )  )     {", "if    ( isOptionField ( field )  )     {", "DeprecationLogger . whileDisabled ( new   Runnable (  )     {", "@ Override", "public   void   run (  )     {", "addValueToMapIfNotNull ( map ,    field )  ;", "}", "}  )  ;", "}", "}", "currClass    =    currClass . getSuperclass (  )  ;", "}", "return   map ;", "}", "METHOD_END"], "methodName": ["optionMap"], "fileName": "org.gradle.api.tasks.compile.AbstractOptions"}, {"methodBody": ["METHOD_START", "{", "JavaReflectionUtil . writeableProperty ( getClass (  )  ,    property ,     ( value    =  =    null    ?    null    :    value . getClass (  )  )  )  . setValue ( this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setProperty"], "fileName": "org.gradle.api.tasks.compile.AbstractOptions"}, {"methodBody": ["METHOD_START", "{", "return   jvmArgs ;", "}", "METHOD_END"], "methodName": ["getJvmArgs"], "fileName": "org.gradle.api.tasks.compile.BaseForkOptions"}, {"methodBody": ["METHOD_START", "{", "return   memoryInitialSize ;", "}", "METHOD_END"], "methodName": ["getMemoryInitialSize"], "fileName": "org.gradle.api.tasks.compile.BaseForkOptions"}, {"methodBody": ["METHOD_START", "{", "return   memoryMaximumSize ;", "}", "METHOD_END"], "methodName": ["getMemoryMaximumSize"], "fileName": "org.gradle.api.tasks.compile.BaseForkOptions"}, {"methodBody": ["METHOD_START", "{", "this . jvmArgs    =    jvmArgs ;", "}", "METHOD_END"], "methodName": ["setJvmArgs"], "fileName": "org.gradle.api.tasks.compile.BaseForkOptions"}, {"methodBody": ["METHOD_START", "{", "this . memoryInitialSize    =    memoryInitialSize ;", "}", "METHOD_END"], "methodName": ["setMemoryInitialSize"], "fileName": "org.gradle.api.tasks.compile.BaseForkOptions"}, {"methodBody": ["METHOD_START", "{", "this . memoryMaximumSize    =    memoryMaximumSize ;", "}", "METHOD_END"], "methodName": ["setMemoryMaximumSize"], "fileName": "org.gradle.api.tasks.compile.BaseForkOptions"}, {"methodBody": ["METHOD_START", "{", "return   new   JvmSourceFile ( path ,    name . replaceAll (  \"  (  \\  \\  . java |  \\  \\  . scala )  \"  ,     \"  . class \"  )  ,    null )  ;", "}", "METHOD_END"], "methodName": ["getClassFile"], "fileName": "org.gradle.integtests.fixtures.jvm.JvmSourceFile"}, {"methodBody": ["METHOD_START", "{", "return   content ;", "}", "METHOD_END"], "methodName": ["getContent"], "fileName": "org.gradle.integtests.fixtures.jvm.JvmSourceFile"}, {"methodBody": ["METHOD_START", "{", "return   path . isEmpty (  )     ?    name    :     (  ( path )     +     \"  /  \"  )     +     ( name )  ;", "}", "METHOD_END"], "methodName": ["getFullPath"], "fileName": "org.gradle.integtests.fixtures.jvm.JvmSourceFile"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.integtests.fixtures.jvm.JvmSourceFile"}, {"methodBody": ["METHOD_START", "{", "return   path ;", "}", "METHOD_END"], "methodName": ["getPath"], "fileName": "org.gradle.integtests.fixtures.jvm.JvmSourceFile"}, {"methodBody": ["METHOD_START", "{", "return   Joiner . on (  '  /  '  )  . join ( basePath ,    path ,    name )  ;", "}", "METHOD_END"], "methodName": ["withPath"], "fileName": "org.gradle.integtests.fixtures.jvm.JvmSourceFile"}, {"methodBody": ["METHOD_START", "{", "TestFile   file    =    base . file ( path ,    name )  ;", "writeToFile ( file )  ;", "return   file ;", "}", "METHOD_END"], "methodName": ["writeToDir"], "fileName": "org.gradle.integtests.fixtures.jvm.JvmSourceFile"}, {"methodBody": ["METHOD_START", "{", "if    ( file . exists (  )  )     {", "file . write (  \"  \"  )  ;", "}", "file . write ( content )  ;", "}", "METHOD_END"], "methodName": ["writeToFile"], "fileName": "org.gradle.integtests.fixtures.jvm.JvmSourceFile"}]