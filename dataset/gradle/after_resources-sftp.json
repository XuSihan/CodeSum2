[{"methodBody": ["METHOD_START", "{", "return   idleClients . containsKey ( sftpHost )     ?    reuseExistingOrCreateNewClient ( sftpHost )     :    createNewClient ( sftpHost )  ;", "}", "METHOD_END"], "methodName": ["acquireClient"], "fileName": "org.gradle.internal.resource.transport.sftp.SftpClientFactory"}, {"methodBody": ["METHOD_START", "{", "LockableSftpClient   client    =    sftpClientCreator . createNewClient ( sftpHost )  ;", "allClients . add ( client )  ;", "return   client ;", "}", "METHOD_END"], "methodName": ["createNewClient"], "fileName": "org.gradle.internal.resource.transport.sftp.SftpClientFactory"}, {"methodBody": ["METHOD_START", "{", "synchronized ( lock )     {", "SftpHost   sftpHost    =    new   SftpHost ( uri ,    credentials )  ;", "return   acquire ( sftpHost )  ;", "}", "}", "METHOD_END"], "methodName": ["createSftpClient"], "fileName": "org.gradle.internal.resource.transport.sftp.SftpClientFactory"}, {"methodBody": ["METHOD_START", "{", "try    {", "client . stop (  )  ;", "}    finally    {", "alls . remove ( client )  ;", "}", "}", "METHOD_END"], "methodName": ["discard"], "fileName": "org.gradle.internal.resource.transport.sftp.SftpClientFactory"}, {"methodBody": ["METHOD_START", "{", "synchronized ( lock )     {", "idleClients . put ( s . getHost (  )  ,    s )  ;", "}", "}", "METHOD_END"], "methodName": ["releaseSftpClient"], "fileName": "org.gradle.internal.resource.transport.sftp.SftpClientFactory"}, {"methodBody": ["METHOD_START", "{", "List < LockableSftpClient >    clientsByHost    =    idleClients . get ( sftpHost )  ;", "LockableSftpClient   client    =    null ;", "if    ( clientsByHost . isEmpty (  )  )     {", ". LOGGER . debug (  \" No   existing   sftp   clients .       Creating   a   new   one .  \"  )  ;", "client    =    createNewClient ( sftpHost )  ;", "} else    {", "client    =    clientsByHost . remove (  0  )  ;", "if    (  !  ( client . isConnected (  )  )  )     {", ". LOGGER . info (  \" Tried   to   reuse   an   existing   sftp   client ,    but   unexpectedly   found   it   disconnected .       Discarding   and   trying   again .  \"  )  ;", "discard ( client )  ;", "client    =    reuseExistingOrCreateNewClient ( sftpHost )  ;", "} else    {", ". LOGGER . debug (  \" Reusing   an   existing   sftp   client .  \"  )  ;", "}", "}", "return   client ;", "}", "METHOD_END"], "methodName": ["reuseExistingOrCreateNewClient"], "fileName": "org.gradle.internal.resource.transport.sftp.SftpClientFactory"}, {"methodBody": ["METHOD_START", "{", "synchronized ( lock )     {", "try    {", "CompositeStoppable . stoppable ( alls )  . stop (  )  ;", "}    finally    {", "alls . clear (  )  ;", "idles . clear (  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "org.gradle.internal.resource.transport.sftp.SftpClientFactory"}, {"methodBody": ["METHOD_START", "{", "return   hostname ;", "}", "METHOD_END"], "methodName": ["getHostname"], "fileName": "org.gradle.internal.resource.transport.sftp.SftpHost"}, {"methodBody": ["METHOD_START", "{", "return   password ;", "}", "METHOD_END"], "methodName": ["getPassword"], "fileName": "org.gradle.internal.resource.transport.sftp.SftpHost"}, {"methodBody": ["METHOD_START", "{", "return   port ;", "}", "METHOD_END"], "methodName": ["getPort"], "fileName": "org.gradle.internal.resource.transport.sftp.SftpHost"}, {"methodBody": ["METHOD_START", "{", "return   username ;", "}", "METHOD_END"], "methodName": ["getUsername"], "fileName": "org.gradle.internal.resource.transport.sftp.SftpHost"}, {"methodBody": ["METHOD_START", "{", "clientFactory . releaseSftpClient ( client )  ;", "}", "METHOD_END"], "methodName": ["close"], "fileName": "org.gradle.internal.resource.transport.sftp.SftpResource"}, {"methodBody": ["METHOD_START", "{", "return   metaData ;", "}", "METHOD_END"], "methodName": ["getMetaData"], "fileName": "org.gradle.internal.resource.transport.sftp.SftpResource"}, {"methodBody": ["METHOD_START", "{", "return   uri ;", "}", "METHOD_END"], "methodName": ["getURI"], "fileName": "org.gradle.internal.resource.transport.sftp.SftpResource"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isLocal"], "fileName": "org.gradle.internal.resource.transport.sftp.SftpResource"}, {"methodBody": ["METHOD_START", "{", "LockableSftpClient   sftpClient    =    sftpClientFactory . createSftpClient ( uri ,    credentials )  ;", "try    {", "SftpATTRS   attributes    =    sftpClient . getSftpClient (  )  . lstat ( uri . getPath (  )  )  ;", "return   attributes    !  =    null    ?    toMetaData ( uri ,    attributes )     :    null ;", "}    catch    ( com . jcraft   e )     {", "if    (  ( e . id )     =  =     ( ChannelSftp . SSH _ FX _ NO _ SUCH _ FILE )  )     {", "return   null ;", "}", "throw   Exceptions . getFailed ( uri ,    e )  ;", "}    finally    {", "sftpClientFactory . releaseSftpClient ( sftpClient )  ;", "}", "}", "METHOD_END"], "methodName": ["getMetaData"], "fileName": "org.gradle.internal.resource.transport.sftp.SftpResourceAccessor"}, {"methodBody": ["METHOD_START", "{", "ExternalResourceMetaData   metaData    =    getMetaData ( location ,    revalidate )  ;", "return   metaData    !  =    null    ?    new    ( sftpClientFactory ,    metaData ,    location ,    credentials )     :    null ;", "}", "METHOD_END"], "methodName": ["openResource"], "fileName": "org.gradle.internal.resource.transport.sftp.SftpResourceAccessor"}, {"methodBody": ["METHOD_START", "{", "long   lastModified    =     -  1  ;", "long   contentLength    =     -  1  ;", "if    (  (  ( attributes . getFlags (  )  )     &     ( SftpATTRS . SSH _ FILEXFER _ ATTR _ ACMODTIME )  )     !  =     0  )     {", "lastModified    =     ( attributes . getMTime (  )  )     *     1  0  0  0  ;", "}", "if    (  (  ( attributes . getFlags (  )  )     &     ( SftpATTRS . SSH _ FILEXFER _ ATTR _ SIZE )  )     !  =     0  )     {", "contentLength    =    attributes . getSize (  )  ;", "}", "return   new   DefaultExternalMetaData ( uri ,    lastModified ,    contentLength )  ;", "}", "METHOD_END"], "methodName": ["toMetaData"], "fileName": "org.gradle.internal.resource.transport.sftp.SftpResourceAccessor"}, {"methodBody": ["METHOD_START", "{", "LockableSftpClient   client    =    sftpClientFactory . createSftpClient ( directory ,    credentials )  ;", "try    {", "@ SuppressWarnings (  \" unchecked \"  )", "Vector < ChannelSftp . LsEntry >    entries    =    client . getSftpClient (  )  . ls ( directory . getPath (  )  )  ;", "List < String >    list    =    new   ArrayList < String >  (  )  ;", "for    ( ChannelSftp . LsEntry   entry    :    entries )     {", "list . add ( entry . getFilename (  )  )  ;", "}", "return   list ;", "}    catch    ( com . jcraft   e )     {", "if    (  ( e . id )     =  =     ( ChannelSftp . SSH _ FX _ NO _ SUCH _ FILE )  )     {", "return   null ;", "}", "throw   new   api . resources . ResourceException ( directory ,    String . format (  \" Could   not   list   children   for   resource    '  % s '  .  \"  ,    directory )  ,    e )  ;", "}    finally    {", "sftpClientFactory . releaseSftpClient ( client )  ;", "}", "}", "METHOD_END"], "methodName": ["list"], "fileName": "org.gradle.internal.resource.transport.sftp.SftpResourceLister"}, {"methodBody": ["METHOD_START", "{", "String   parentPath    =    FilenameUtils . getFullPathNoEndSeparator ( uri . getPath (  )  )  ;", "if    ( parentPath . equals (  \"  /  \"  )  )     {", "return ;", "}", "URI   parent    =    uri . resolve ( parentPath )  ;", "try    {", "channel . lstat ( parentPath )  ;", "return ;", "}    catch    ( com . jcraft   e )     {", "if    (  ( e . id )     !  =     ( ChannelSftp . SSH _ FX _ NO _ SUCH _ FILE )  )     {", "throw   new   api . resources . ResourceException ( parent ,    String . format (  \" Could   not   lstat   resource    '  % s '  .  \"  ,    parent )  ,    e )  ;", "}", "}", "ensureParentDirectoryExists ( channel ,    parent )  ;", "try    {", "channel . mkdir ( parentPath )  ;", "}    catch    ( com . jcraft   e )     {", "throw   new   api . resources . ResourceException ( parent ,    String . format (  \" Could   not   create   resource    '  % s '  .  \"  ,    parent )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["ensureParentDirectoryExists"], "fileName": "org.gradle.internal.resource.transport.sftp.SftpResourceUploader"}, {"methodBody": ["METHOD_START", "{", "registration . addProvider ( new   SftpResourcesPluginServiceRegistry . GlobalScopeServices (  )  )  ;", "}", "METHOD_END"], "methodName": ["registerGlobalServices"], "fileName": "org.gradle.internal.resource.transport.sftp.SftpResourcesPluginServiceRegistry"}]