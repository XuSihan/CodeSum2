[{"methodBody": ["METHOD_START", "{", "LumberJack . ROOT . fine (  \" Oh ,    I ' m   a   lumberjack ,    and   I ' m   okay .  \"  )  ;", "LumberJack . OAK . fine (  \" I   sleep   all   night   and   I   work   all   day .  \"  )  ;", "LumberJack . ELM . fine (  \" He ' s   a   lumberjack ,    and   He ' s   okay .  \"  )  ;", "LumberJack . ELMER . fine (  \" He   sleeps   all   night   and   he   works   all   day .  \"  )  ;", "}", "METHOD_END"], "methodName": ["sing"], "fileName": "com.example.LumberJack"}, {"methodBody": ["METHOD_START", "{", "LumberJack   jack    =    new   LumberJack (  )  ;", "jack . sing (  )  ;", "}", "METHOD_END"], "methodName": ["singsTheSong"], "fileName": "com.example.LumberJackTest"}, {"methodBody": ["METHOD_START", "{", "System . out . println (  \" sys   out   fail \"  )  ;", "System . err . println (  \" sys   err   fail \"  )  ;", "Assert . fail (  )  ;", "}", "METHOD_END"], "methodName": ["fail"], "fileName": "org.gradle.FooTest"}, {"methodBody": ["METHOD_START", "{", "System . out . println (  \" sys   out   ok \"  )  ;", "System . err . println (  \" sys   err   ok \"  )  ;", "}", "METHOD_END"], "methodName": ["ok"], "fileName": "org.gradle.FooTest"}, {"methodBody": ["METHOD_START", "{", "Assert . fail (  )  ;", "}", "METHOD_END"], "methodName": ["otherFail"], "fileName": "org.gradle.OtherTest"}, {"methodBody": ["METHOD_START", "{", "System . out . println (  \" sys   out   from   ok   test   method \"  )  ;", "System . err . println (  \" sys   err   from   ok   test   method \"  )  ;", "}", "METHOD_END"], "methodName": ["otherOk"], "fileName": "org.gradle.OtherTest"}, {"methodBody": ["METHOD_START", "{", "Assert . fail (  )  ;", "}", "METHOD_END"], "methodName": ["fail"], "fileName": "org.gradle.Test"}, {"methodBody": ["METHOD_START", "{", "System . out . println (  \" sys   out   ok \"  )  ;", "System . err . println (  \" sys   err   ok \"  )  ;", "}", "METHOD_END"], "methodName": ["ok"], "fileName": "org.gradle.Test"}, {"methodBody": ["METHOD_START", "{", "System . out . println (  \" after   suite   class   out \"  )  ;", "System . err . println (  \" after   suite   class   err \"  )  ;", "}", "METHOD_END"], "methodName": ["end"], "fileName": "org.gradle.TestSuite"}, {"methodBody": ["METHOD_START", "{", "System . out . println (  \" before   suite   class   out \"  )  ;", "System . err . println (  \" before   suite   class   err \"  )  ;", "}", "METHOD_END"], "methodName": ["init"], "fileName": "org.gradle.TestSuite"}, {"methodBody": ["METHOD_START", "{", "return   descriptor ;", "}", "METHOD_END"], "methodName": ["getDescriptor"], "fileName": "org.gradle.api.internal.tasks.testing.DecoratingTestDescriptor"}, {"methodBody": ["METHOD_START", "{", "if    (  \" false \"  . equals ( options . getSystemProperties (  )  . get ( JULRedirector . READ _ LOGGING _ CONFIG _ FILE _ PROPERTY )  )  )     {", "SingleMessageLogger . nagUserOfDiscontinuedProperty ( JULRedirector . READ _ LOGGING _ CONFIG _ FILE _ PROPERTY ,     \" Change   your   test   to   work   with   your   \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["checkDeprecatedProperty"], "fileName": "org.gradle.api.internal.tasks.testing.JULRedirector"}, {"methodBody": ["METHOD_START", "{", "return   System . getProperty ( JULRedirector . READ _ LOGGING _ CONFIG _ FILE _ PROPERTY ,     \" true \"  )  . equals (  \" true \"  )  ;", "}", "METHOD_END"], "methodName": ["shouldReadLoggingConfigFile"], "fileName": "org.gradle.api.internal.tasks.testing.JULRedirector"}, {"methodBody": ["METHOD_START", "{", "return   endTime ;", "}", "METHOD_END"], "methodName": ["getEndTime"], "fileName": "org.gradle.api.internal.tasks.testing.TestCompleteEvent"}, {"methodBody": ["METHOD_START", "{", "return   resultType ;", "}", "METHOD_END"], "methodName": ["getResultType"], "fileName": "org.gradle.api.internal.tasks.testing.TestCompleteEvent"}, {"methodBody": ["METHOD_START", "{", "return   parentId ;", "}", "METHOD_END"], "methodName": ["getParentId"], "fileName": "org.gradle.api.internal.tasks.testing.TestStartEvent"}, {"methodBody": ["METHOD_START", "{", "return   startTime ;", "}", "METHOD_END"], "methodName": ["getStartTime"], "fileName": "org.gradle.api.internal.tasks.testing.TestStartEvent"}, {"methodBody": ["METHOD_START", "{", "return   new   TestStartEvent ( startTime ,    parentId )  ;", "}", "METHOD_END"], "methodName": ["withParentId"], "fileName": "org.gradle.api.internal.tasks.testing.TestStartEvent"}, {"methodBody": ["METHOD_START", "{", "return   commandLineTestNames ;", "}", "METHOD_END"], "methodName": ["getCommandLineIncludePatterns"], "fileName": "org.gradle.api.internal.tasks.testing.filter.DefaultTestFilter"}, {"methodBody": ["METHOD_START", "{", "for    ( String   name    :    testNamePatterns )     {", "validateName ( name )  ;", "}", "this . commandLineTestNames . clear (  )  ;", "this . commandLineTestNames . addAll ( testNamePatterns )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setCommandLineIncludePatterns"], "fileName": "org.gradle.api.internal.tasks.testing.filter.DefaultTestFilter"}, {"methodBody": ["METHOD_START", "{", "if    (  ( name    =  =    null )     |  |     (  ( name . length (  )  )     =  =     0  )  )     {", "throw   new   InvalidUserDataException (  \" Selected      name   cannot   be   null   or   empty .  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["validateName"], "fileName": "org.gradle.api.internal.tasks.testing.filter.DefaultTestFilter"}, {"methodBody": ["METHOD_START", "{", "String   simpleName    =    StringUtils . substringAfterLast ( fullQualifiedName ,     \"  .  \"  )  ;", "if    (  \"  \"  . equals ( simpleName )  )     {", "return   fullQualifiedName ;", "}", "return   simpleName ;", "}", "METHOD_END"], "methodName": ["getSimpleName"], "fileName": "org.gradle.api.internal.tasks.testing.filter.TestSelectionMatcher"}, {"methodBody": ["METHOD_START", "{", "if    ( includePatterns . isEmpty (  )  )     {", "return   true ;", "}", "for    (  . TestPattern   pattern    :    includePatterns )     {", "if    ( pattern . matchesClassAndMethod ( fullQualifiedName ,    methodName )  )     {", "return   true ;", "}", "if    ( pattern . matchesClass ( fullQualifiedName )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["matchesPattern"], "fileName": "org.gradle.api.internal.tasks.testing.filter.TestSelectionMatcher"}, {"methodBody": ["METHOD_START", "{", "return    ( matchesPattern ( buildScriptIncludePatterns ,    className ,    methodName )  )     &  &     ( matchesPattern ( commandLineIncludePatterns ,    className ,    methodName )  )  ;", "}", "METHOD_END"], "methodName": ["matchesTest"], "fileName": "org.gradle.api.internal.tasks.testing.filter.TestSelectionMatcher"}, {"methodBody": ["METHOD_START", "{", "return    ( mayIncludeClass ( buildScriptIncludePatterns ,    fullQualifiedClassName )  )     &  &     ( mayIncludeClass ( commandLineIncludePatterns ,    fullQualifiedClassName )  )  ;", "}", "METHOD_END"], "methodName": ["mayIncludeClass"], "fileName": "org.gradle.api.internal.tasks.testing.filter.TestSelectionMatcher"}, {"methodBody": ["METHOD_START", "{", "if    ( includePatterns . isEmpty (  )  )     {", "return   true ;", "}", "for    (  . TestPattern   pattern    :    includePatterns )     {", "if    ( pattern . mayIncludeClass ( fullQualifiedName )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["mayIncludeClass"], "fileName": "org.gradle.api.internal.tasks.testing.filter.TestSelectionMatcher"}, {"methodBody": ["METHOD_START", "{", "List < TestSelectionMatcher . TestPattern >    includePatterns    =    new   ArrayList < TestSelectionMatcher . TestPattern >  ( includedTests . size (  )  )  ;", "for    ( String   includedTest    :    includedTests )     {", "includePatterns . add ( new   TestSelectionMatcher . TestPattern ( includedTest )  )  ;", "}", "return   includePatterns ;", "}", "METHOD_END"], "methodName": ["preparePatternList"], "fileName": "org.gradle.api.internal.tasks.testing.filter.TestSelectionMatcher"}, {"methodBody": ["METHOD_START", "{", "Timer   clock    =    Time . startTimer (  )  ;", "buildOperationExecutor . run ( new   RunnableBuildOperation (  )     {", "@ Override", "public   void   run ( BuildOperationContext   context )     {", "File [  ]    oldXmlFiles    =    testResultsDir . listFiles ( new   FilenameFilter (  )     {", "@ Override", "public   boolean   accept ( File   dir ,    String   name )     {", "return    ( name . startsWith (  \" TEST \"  )  )     &  &     ( name . endsWith (  \"  . xml \"  )  )  ;", "}", "}  )  ;", "for    ( File   oldXmlFile    :    oldXmlFiles )     {", "GFileUtils . deleteQuietly ( oldXmlFile )  ;", "}", "}", "@ Override", "public   Builder   description (  )     {", "return   BuildOperationDescriptor . displayName (  \" Delete   old   JUnit   XML   results \"  )  ;", "}", "}  )  ;", "buildOperationExecutor . runAll ( new   Action < BuildOperationQueue <  . JUnitXmlReportFileGenerator >  >  (  )     {", "@ Override", "public   void   execute ( final   BuildOperationQueue <  . JUnitXmlReportFileGenerator >    queue )     {", "testResultsProvider . visitClasses ( new   Action < TestClassResult >  (  )     {", "public   void   execute ( final   TestClassResult   result )     {", "final   File   reportFile    =    new   File ( testResultsDir ,    getReportFileName ( result )  )  ;", "queue . add ( new    . JUnitXmlReportFileGenerator ( result ,    reportFile ,    xmlWriter )  )  ;", "}", "}  )  ;", "}", "}  )  ;", ". LOG . info (  \" Finished   generating   test   XML   results    (  {  }  )    into :     {  }  \"  ,    clock . getElapsed (  )  ,    testResultsDir )  ;", "}", "METHOD_END"], "methodName": ["generate"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.Binary2JUnitXmlReportGenerator"}, {"methodBody": ["METHOD_START", "{", "return    (  \" TEST -  \"     +     ( FileUtils . toSafeFileName ( result . getClassName (  )  )  )  )     +     \"  . xml \"  ;", "}", "METHOD_END"], "methodName": ["getReportFileName"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.Binary2JUnitXmlReportGenerator"}, {"methodBody": ["METHOD_START", "{", "String   className    =    result . getClassName (  )  ;", "long   classId    =    result . getId (  )  ;", "try    {", "SimpleXmlWriter   writer    =    new   SimpleXmlWriter ( output ,     \"        \"  )  ;", "writer . startElement (  \" testsuite \"  )  . attribute (  \" name \"  ,    className )  . attribute (  \" tests \"  ,    String . valueOf ( result . getTestsCount (  )  )  )  . attribute (  \" skipped \"  ,    String . valueOf ( result . getSkippedCount (  )  )  )  . attribute (  \" failures \"  ,    String . valueOf ( result . getFailuresCount (  )  )  )  . attribute (  \" errors \"  ,     \"  0  \"  )  . attribute (  \" timestamp \"  ,    DateUtils . format ( result . getStartTime (  )  ,    ISO 8  6  0  1  _ DATETIME _ PATTERN )  )  . attribute (  \" hostname \"  ,    hostName )  . attribute (  \" time \"  ,    String . valueOf (  (  ( result . getDuration (  )  )     /     1  0  0  0  .  0  )  )  )  ;", "writer . startElement (  \" properties \"  )  ;", "writer . endElement (  )  ;", "writeTests ( writer ,    result . getResults (  )  ,    className ,    classId )  ;", "writer . startElement (  \" system - out \"  )  ;", "writeOutputs ( writer ,    classId ,    outputAssociation . equals ( TestOutputAssociation . WITH _ SUITE )  ,    TestOutputEvent . Destination . StdOut )  ;", "writer . endElement (  )  ;", "writer . startElement (  \" system - err \"  )  ;", "writeOutputs ( writer ,    classId ,    outputAssociation . equals ( TestOutputAssociation . WITH _ SUITE )  ,    TestOutputEvent . Destination . StdErr )  ;", "writer . endElement (  )  ;", "writer . endElement (  )  ;", "}    catch    ( IOException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["write"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.JUnitXmlResultWriter"}, {"methodBody": ["METHOD_START", "{", "writer . startCDATA (  )  ;", "if    ( allClassOutput )     {", "testsProvider . writeAllOutput ( classId ,    destination ,    writer )  ;", "} else    {", "testsProvider . writeNonTestOutput ( classId ,    destination ,    writer )  ;", "}", "writer . endCDATA (  )  ;", "}", "METHOD_END"], "methodName": ["writeOutputs"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.JUnitXmlResultWriter"}, {"methodBody": ["METHOD_START", "{", "writer . startCDATA (  )  ;", "testsProvider . writeTestOutput ( classId ,    testId ,    destination ,    writer )  ;", "writer . endCDATA (  )  ;", "}", "METHOD_END"], "methodName": ["writeOutputs"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.JUnitXmlResultWriter"}, {"methodBody": ["METHOD_START", "{", "for    ( TestMethodResult   methodResult    :    methodResults )     {", "writer . startElement (  \" testcase \"  )  . attribute (  \" name \"  ,    methodResult . getName (  )  )  . attribute (  \" classname \"  ,    className )  . attribute (  \" time \"  ,    String . valueOf (  (  ( methodResult . getDuration (  )  )     /     1  0  0  0  .  0  )  )  )  ;", "if    (  ( methodResult . getResultType (  )  )     =  =     ( TestResult . ResultType . SKIPPED )  )     {", "writer . startElement (  \" skipped \"  )  ;", "writer . endElement (  )  ;", "} else    {", "for    ( TestFailure   failure    :    methodResult . getFailures (  )  )     {", "writer . startElement (  \" failure \"  )  . attribute (  \" message \"  ,    failure . getMessage (  )  )  . attribute (  \" type \"  ,    failure . getExceptionType (  )  )  ;", "writer . characters ( failure . getStackTrace (  )  )  ;", "writer . endElement (  )  ;", "}", "}", "if    ( outputAssociation . equals ( TestOutputAssociation . WITH _ TESTCASE )  )     {", "writer . startElement (  \" system - out \"  )  ;", "writeOutputs ( writer ,    classId ,    methodResult . getId (  )  ,    TestOutputEvent . Destination . StdOut )  ;", "writer . endElement (  )  ;", "writer . startElement (  \" system - err \"  )  ;", "writeOutputs ( writer ,    classId ,    methodResult . getId (  )  ,    TestOutputEvent . Destination . StdErr )  ;", "writer . endElement (  )  ;", "}", "writer . endElement (  )  ;", "}", "}", "METHOD_END"], "methodName": ["writeTests"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.JUnitXmlResultWriter"}, {"methodBody": ["METHOD_START", "{", "if    (  ( methodResult . getResultType (  )  )     =  =     ( TestResult . ResultType . FAILURE )  )     {", "( failuresCount )  +  +  ;", "}", "if    (  ( methodResult . getResultType (  )  )     =  =     ( TestResult . ResultType . SKIPPED )  )     {", "( skippedCount )  +  +  ;", "}", "methodResults . add ( methodResult )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestClassResult"}, {"methodBody": ["METHOD_START", "{", "return   classDisplayName ;", "}", "METHOD_END"], "methodName": ["getClassDisplayName"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestClassResult"}, {"methodBody": ["METHOD_START", "{", "return   className ;", "}", "METHOD_END"], "methodName": ["getClassName"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestClassResult"}, {"methodBody": ["METHOD_START", "{", "long   end    =    startTime ;", "for    ( TestMethod   m    :    methods )     {", "if    ( end    <     ( m . getEndTime (  )  )  )     {", "end    =    m . getEndTime (  )  ;", "}", "}", "return   end    -     ( startTime )  ;", "}", "METHOD_END"], "methodName": ["getDuration"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestClassResult"}, {"methodBody": ["METHOD_START", "{", "return   failuresCount ;", "}", "METHOD_END"], "methodName": ["getFailuresCount"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestClassResult"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestClassResult"}, {"methodBody": ["METHOD_START", "{", "return   methodResults ;", "}", "METHOD_END"], "methodName": ["getResults"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestClassResult"}, {"methodBody": ["METHOD_START", "{", "return   skippedCount ;", "}", "METHOD_END"], "methodName": ["getSkippedCount"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestClassResult"}, {"methodBody": ["METHOD_START", "{", "return   startTime ;", "}", "METHOD_END"], "methodName": ["getStartTime"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestClassResult"}, {"methodBody": ["METHOD_START", "{", "return   methodResults . size (  )  ;", "}", "METHOD_END"], "methodName": ["getTestsCount"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestClassResult"}, {"methodBody": ["METHOD_START", "{", "this . startTime    =    startTime ;", "}", "METHOD_END"], "methodName": ["setStartTime"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestClassResult"}, {"methodBody": ["METHOD_START", "{", "return   exceptionType ;", "}", "METHOD_END"], "methodName": ["getExceptionType"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestFailure"}, {"methodBody": ["METHOD_START", "{", "return   message ;", "}", "METHOD_END"], "methodName": ["getMessage"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestFailure"}, {"methodBody": ["METHOD_START", "{", "return   stackTrace ;", "}", "METHOD_END"], "methodName": ["getStackTrace"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestFailure"}, {"methodBody": ["METHOD_START", "{", "this . failures . add ( new   TestFailure ( message ,    stackTrace ,    exceptionType )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addFailure"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestMethodResult"}, {"methodBody": ["METHOD_START", "{", "resultType    =    result . getResultType (  )  ;", "duration    =     ( result . getEndTime (  )  )     -     ( result . getStartTime (  )  )  ;", "endTime    =    result . getEndTime (  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["completed"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestMethodResult"}, {"methodBody": ["METHOD_START", "{", "return   displayName ;", "}", "METHOD_END"], "methodName": ["getDisplayName"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestMethodResult"}, {"methodBody": ["METHOD_START", "{", "return   duration ;", "}", "METHOD_END"], "methodName": ["getDuration"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestMethodResult"}, {"methodBody": ["METHOD_START", "{", "return   endTime ;", "}", "METHOD_END"], "methodName": ["getEndTime"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestMethodResult"}, {"methodBody": ["METHOD_START", "{", "return   failures ;", "}", "METHOD_END"], "methodName": ["getFailures"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestMethodResult"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestMethodResult"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestMethodResult"}, {"methodBody": ["METHOD_START", "{", "return   resultType ;", "}", "METHOD_END"], "methodName": ["getResultType"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestMethodResult"}, {"methodBody": ["METHOD_START", "{", "return   new   File ( resultsDir ,     (  ( getOutputsFile (  )  . getName (  )  )     +     \"  . idx \"  )  )  ;", "}", "METHOD_END"], "methodName": ["getIndexFile"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestOutputStore"}, {"methodBody": ["METHOD_START", "{", "return   new   File ( resultsDir ,     \" output . bin \"  )  ;", "}", "METHOD_END"], "methodName": ["getOutputsFile"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestOutputStore"}, {"methodBody": ["METHOD_START", "{", "return   new   TestOutputStore . Reader (  )  ;", "}", "METHOD_END"], "methodName": ["reader"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestOutputStore"}, {"methodBody": ["METHOD_START", "{", "return   new   TestOutputStore . Writer (  )  ;", "}", "METHOD_END"], "methodName": ["writer"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestOutputStore"}, {"methodBody": ["METHOD_START", "{", "Thread   thread    =    Thread . currentThread (  )  ;", ". Reader   reader    =    readers . get ( thread )  ;", "if    ( reader    =  =    null )     {", "reader    =    outputStore . reader (  )  ;", "readers . put ( thread ,    reader )  ;", "}", "return   reader ;", "}", "METHOD_END"], "methodName": ["getReader"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestOutputStoreBackedResultsProvider"}, {"methodBody": ["METHOD_START", "{", "action . execute ( getReader (  )  )  ;", "}", "METHOD_END"], "methodName": ["withReader"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestOutputStoreBackedResultsProvider"}, {"methodBody": ["METHOD_START", "{", "return   throwable   instanceof   PlaceholderException    ?     (  ( PlaceholderException )     ( throwable )  )  . getExceptionClassName (  )     :    throwable . getClass (  )  . getName (  )  ;", "}", "METHOD_END"], "methodName": ["exceptionClassName"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestReportDataCollector"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   throwable . toStr )  ;", "}    catch    ( Throwable   t )     {", "StrexceptionClassName    =    exceptionClassName ( throwable )  ;", "return   Strformat (  \" Could   not   determine   failure   message   for   exception   of   type    % s :     % s \"  ,    exceptionClassName ,    t )  ;", "}", "}", "METHOD_END"], "methodName": ["failureMessage"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestReportDataCollector"}, {"methodBody": ["METHOD_START", "{", "StringWriter   stringWriter    =    new   StringWriter (  )  ;", "PrintWriter   writer    =    new   PrintWriter ( stringWriter )  ;", "throwable . printStackTrace ( writer )  ;", "writer . close (  )  ;", "return   stringWriter . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getStacktrace"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestReportDataCollector"}, {"methodBody": ["METHOD_START", "{", "try    {", "turn   getStacktrace ( throwable )  ;", "}    catch    ( Throwable   t )     {", "turn   getStacktrace ( t )  ;", "}", "}", "METHOD_END"], "methodName": ["stackTrace"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestReportDataCollector"}, {"methodBody": ["METHOD_START", "{", "return    ( resultsFile . exists (  )  )     &  &     (  ( resultsFile . length (  )  )     >     0  )  ;", "}", "METHOD_END"], "methodName": ["isHasResults"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestResultSerializer"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isHasResults (  )  )  )     {", "return ;", "}", "try    {", "InputStream   inputStream    =    new   FileInputStream ( resultsFile )  ;", "try    {", "Decoder   decoder    =    new   KryoBackedDecoder ( inputStream )  ;", "int   version    =    decoder . readSmallInt (  )  ;", "if    ( version    !  =     (  . RESULT _ VERSION )  )     {", "throw   new   IllegalArgumentException ( String . format (  \" Unexpected   result   file   version    % d   found   in    % s .  \"  ,    version ,    resultsFile )  )  ;", "}", "readResults ( decoder ,    visitor )  ;", "}    finally    {", "inputStream . close (  )  ;", "}", "}    catch    ( Exception   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["read"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestResultSerializer"}, {"methodBody": ["METHOD_START", "{", "long   id    =    decoder . readSmallLong (  )  ;", "String   className    =    decoder . readString (  )  ;", "String   classDisplayName    =    decoder . readString (  )  ;", "long   startTime    =    decoder . readLong (  )  ;", "TestClassResult    =    new   TestClassResult ( id ,    className ,    classDisplayName ,    startTime )  ;", "int   testMethodCount    =    decoder . readSmallInt (  )  ;", "for    ( int   i    =     0  ;    i    <    testMethodCount ;    i +  +  )     {", "TestMethodResult   methodResult    =    readMethodResult ( decoder )  ;", "add ( methodResult )  ;", "}", "return", "}", "METHOD_END"], "methodName": ["readClassResult"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestResultSerializer"}, {"methodBody": ["METHOD_START", "{", "long   id    =    decoder . readSmallLong (  )  ;", "String   name    =    decoder . readString (  )  ;", "String   displayName    =    decoder . readString (  )  ;", ". ResultType   resultType    =     . ResultType . values (  )  [ decoder . readSmallInt (  )  ]  ;", "long   duration    =    decoder . readSmallLong (  )  ;", "long   endTime    =    decoder . readLong (  )  ;", "TestMethodResult   methodResult    =    new   TestMethodResult ( id ,    name ,    displayName ,    resultType ,    duration ,    endTime )  ;", "int   failures    =    decoder . readSmallInt (  )  ;", "for    ( int   i    =     0  ;    i    <    failures ;    i +  +  )     {", "String   exceptionType    =    decoder . readString (  )  ;", "String   message    =    decoder . readString (  )  ;", "String   stackTrace    =    decoder . readString (  )  ;", "methodResult . addFailure ( message ,    stackTrace ,    exceptionType )  ;", "}", "return   methodResult ;", "}", "METHOD_END"], "methodName": ["readMethodResult"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestResultSerializer"}, {"methodBody": ["METHOD_START", "{", "int   classCount    =    decoder . readSmallInt (  )  ;", "for    ( int   i    =     0  ;    i    <    classCount ;    i +  +  )     {", "TestClass   class    =    readClass ( decoder )  ;", "visitor . execute ( class )  ;", "}", "}", "METHOD_END"], "methodName": ["readResults"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestResultSerializer"}, {"methodBody": ["METHOD_START", "{", "try    {", "OutputStream   outputStream    =    new   FileOutputStream ( resultsFile )  ;", "try    {", "if    (  !  ( results . isEmpty (  )  )  )     {", "FlushableEncoder   encoder    =    new   KryoBackedEncoder ( outputStream )  ;", "encoder . writeSmallInt (  . RESULT _ VERSION )  ;", "write ( results ,    encoder )  ;", "encoder . flush (  )  ;", "}", "}    finally    {", "outputStream . close (  )  ;", "}", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["write"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestResultSerializer"}, {"methodBody": ["METHOD_START", "{", "encoder . writeSmallInt ( results . size (  )  )  ;", "for    ( TestClassResult   result    :    results )     {", "write ( result ,    encoder )  ;", "}", "}", "METHOD_END"], "methodName": ["write"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestResultSerializer"}, {"methodBody": ["METHOD_START", "{", "encoder . writeSmallLong ( classResult . getId (  )  )  ;", "encoder . writeString ( classResult . getClassName (  )  )  ;", "encoder . writeString ( classResult . getClassDisplayName (  )  )  ;", "encoder . writeLong ( classResult . getStartTime (  )  )  ;", "encoder . writeSmallInt ( classResult . ges (  )  . size (  )  )  ;", "for    ( TestMethodResult   methodResult    :    classResult . ges (  )  )     {", "write ( methodResult ,    encoder )  ;", "}", "}", "METHOD_END"], "methodName": ["write"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestResultSerializer"}, {"methodBody": ["METHOD_START", "{", "encoder . writeSmallLong ( methodResult . getId (  )  )  ;", "encoder . writeString ( methodResult . getName (  )  )  ;", "encoder . writeString ( methodResult . getDisplayName (  )  )  ;", "encoder . writeSmallInt ( methodResult . geType (  )  . ordinal (  )  )  ;", "encoder . writeSmallLong ( methodResult . getDuration (  )  )  ;", "encoder . writeLong ( methodResult . getEndTime (  )  )  ;", "encoder . writeSmallInt ( methodResult . getFailures (  )  . size (  )  )  ;", "for    ( TestFailure   testFailure    :    methodResult . getFailures (  )  )     {", "encoder . writeString ( testFailure . getExceptionType (  )  )  ;", "encoder . writeString ( testFailure . getMessage (  )  )  ;", "encoder . writeString ( testFailure . getStackTrace (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["write"], "fileName": "org.gradle.api.internal.tasks.testing.junit.result.TestResultSerializer"}, {"methodBody": ["METHOD_START", "{", "List < String >    names    =    Lists . newArrayList (  )  ;", "Descriptor   current    =    descriptor ;", "while    ( current    !  =    null )     {", "if    ( isAtomicWhoseParentIsNotTheClass ( current )  )     {", "names . add (  (  (  ( current . getClassName (  )  )     +     \"  .  \"  )     +     ( current . getName (  )  )  )  )  ;", "} else    {", "names . add ( current . getName (  )  )  ;", "}", "current    =    current . getParent (  )  ;", "}", "int   effectiveDisplayGranularity    =     (  ( displayGranularity )     =  =     (  -  1  )  )     ?     ( names . size (  )  )     -     1     :    Math . min ( displayGranularity ,     (  ( names . size (  )  )     -     1  )  )  ;", "List < String >    displayedNames    =    Lists . reverse ( names )  . subList ( effectiveDisplayGranularity ,    names . size (  )  )  ;", "return    ( Joiner . on (  \"     >     \"  )  . join ( displayedNames )  )     +     \"     \"  ;", "}", "METHOD_END"], "methodName": ["getEventPath"], "fileName": "org.gradle.api.internal.tasks.testing.logging.AbstractTestLogger"}, {"methodBody": ["METHOD_START", "{", "switch    ( event )     {", "case   PASSED    :", "return   StyIdentifier ;", "case   FAILED    :", "return   StyFailure ;", "case   SKIPPED    :", "return   StyInfo ;", "default    :", "return   StyNormal ;", "}", "}", "METHOD_END"], "methodName": ["getStyle"], "fileName": "org.gradle.api.internal.tasks.testing.logging.AbstractTestLogger"}, {"methodBody": ["METHOD_START", "{", "return    (  (  !  ( current . isComposite (  )  )  )     &  &     (  ( current . getClassName (  )  )     !  =    null )  )     &  &     (  (  ( current . getParent (  )  )     =  =    null )     |  |     (  !  ( current . getClassName (  )  . equals ( current . getParent (  )  . getName (  )  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["isAtomicTestWhoseParentIsNotTheTestClass"], "fileName": "org.gradle.api.internal.tasks.testing.logging.AbstractTestLogger"}, {"methodBody": ["METHOD_START", "{", "logEvent ( descriptor ,    event ,    null )  ;", "}", "METHOD_END"], "methodName": ["logEvent"], "fileName": "org.gradle.api.internal.tasks.testing.logging.AbstractTestLogger"}, {"methodBody": ["METHOD_START", "{", "StyledTextOutput   output    =    textOutputFactory . create (  \" TestEventLogger \"  ,    logLevel )  ;", "if    (  (  !  ( descriptor . equals ( lastSeenTestDescriptor )  )  )     |  |     ( event    !  =     ( lastSeenTestEvent )  )  )     {", "output . println (  )  . append ( getEventPath ( descriptor )  )  ;", "output . withStyle ( getStyle ( event )  )  . println ( event . toString (  )  )  ;", "}", "lastSeenTestDescriptor    =    descriptor ;", "lastSeenTestEvent    =    event ;", "if    ( details    !  =    null )     {", "output . append ( TextUtil . toPlatformLineSeparators ( details )  )  ;", "}", "}", "METHOD_END"], "methodName": ["logEvent"], "fileName": "org.gradle.api.internal.tasks.testing.logging.AbstractTestLogger"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( targetClassName . startsWith ( className )  )  )     {", "return   false ;", "}", "String   suffix    =    targetClassName . substring ( className . length (  )  )  ;", "return    ( suffix . isEmpty (  )  )     |  |     (  . ANONYMOUS _ CLASS _ NAME _ SUFFIX . matcher ( suffix )  . matches (  )  )  ;", "}", "METHOD_END"], "methodName": ["classNameMatch"], "fileName": "org.gradle.api.internal.tasks.testing.logging.ClassMethodNameStackTraceSpec"}, {"methodBody": ["METHOD_START", "{", "return    (  ( this . methodName )     =  =    null )     |  |     ( this . methodName . equals ( methodName )  )  ;", "}", "METHOD_END"], "methodName": ["methodNameMatch"], "fileName": "org.gradle.api.internal.tasks.testing.logging.ClassMethodNameStackTraceSpec"}, {"methodBody": ["METHOD_START", "{", "return   getLifecycle (  )  ;", "}", "METHOD_END"], "methodName": ["getDefaultTestLogging"], "fileName": "org.gradle.api.internal.tasks.testing.logging.DefaultTestLoggingContainer"}, {"methodBody": ["METHOD_START", "{", "if    ( parentTrace    =  =    null )     {", "return    0  ;", "}", "int   commonElements    =     0  ;", "for    ( int   i    =     ( stackTrace . size (  )  )     -     1  ,    j    =     ( parentTrace . size (  )  )     -     1  ;     (  ( i    >  =     1  )     &  &     ( j    >  =     0  )  )     &  &     ( stackTrace . get ( i )  . equals ( parentTrace . get ( j )  )  )  ;    i -  -     ,    j -  -  )     {", "commonElements +  +  ;", "}", "return   commonElements ;", "}", "METHOD_END"], "methodName": ["countCommonElements"], "fileName": "org.gradle.api.internal.tasks.testing.logging.FullExceptionFormatter"}, {"methodBody": ["METHOD_START", "{", "List < Spec < StackTraceElement >  >    filters    =    Lists . newArrayList (  )  ;", "for    ( TestStackTraceFilter   type    :    testLogging . getStackTraceFilters (  )  )     {", "filters . add ( createFilter ( descriptor ,    type )  )  ;", "}", "return   new   specs . AndSpec < StackTraceElement >  ( filters )  ;", "}", "METHOD_END"], "methodName": ["createCompositeFilter"], "fileName": "org.gradle.api.internal.tasks.testing.logging.FullExceptionFormatter"}, {"methodBody": ["METHOD_START", "{", "switch    ( filterType )     {", "case   ENTRY _ POINT    :", "return   new   ClassMethodNameStackTraceSpec ( descriptor . getClassName (  )  ,    descriptor . getName (  )  )  ;", "case   TRUNCATE    :", "return   new   TruncatedStackTraceSpec ( new   ClassMethodNameStackTraceSpec ( descriptor . getClassName (  )  ,    null )  )  ;", "case   GROOVY    :", "return   new   GroovyStackTraceSpec (  )  ;", "default    :", "throw   new   AsserError (  )  ;", "}", "}", "METHOD_END"], "methodName": ["createFilter"], "fileName": "org.gradle.api.internal.tasks.testing.logging.FullExceptionFormatter"}, {"methodBody": ["METHOD_START", "{", "Spec < StackTraceElement >    filterSpec    =    createCompositeFilter ( descriptor )  ;", "StackTraceFilter   filter    =    new   StackTraceFilter ( filterSpec )  ;", "return   filter . filter ( e )  ;", "}", "METHOD_END"], "methodName": ["filterStackTrace"], "fileName": "org.gradle.api.internal.tasks.testing.logging.FullExceptionFormatter"}, {"methodBody": ["METHOD_START", "{", "String   exceptionIndent    =    Strings . repeat ( FullExceptionFormatter . INDENT ,     ( exceptionLevel    +     1  )  )  ;", "String   exceptionText    =     ( exceptionLevel    =  =     0  )     ?    exception . toString (  )     :     \"  \\ nCaused   by :  \\ n \"     +     ( exception . toString (  )  )  ;", "String   indentedText    =    TextUtil . indent ( exceptionText ,    exceptionIndent )  ;", "builder . append ( indentedText )  ;", "builder . append (  '  \\ n '  )  ;", "String   stackTraceIndent    =    exceptionIndent    +     ( FullExceptionFormatter . INDENT )  ;", "List < StackTraceElement >    stackTrace    =    null ;", "if    ( testLogging . getShowStackTraces (  )  )     {", "stackTrace    =    filterStackTrace ( exception ,    descriptor )  ;", "int   commonElements    =    countCommonElements ( stackTrace ,    parentTrace )  ;", "for    ( int   i    =     0  ;    i    <     (  ( stackTrace . size (  )  )     -    commonElements )  ;    i +  +  )     {", "builder . append ( stackTraceIndent )  ;", "builder . append (  \" at    \"  )  ;", "builder . append ( stackTrace . get ( i )  )  ;", "builder . append (  '  \\ n '  )  ;", "}", "if    ( commonElements    !  =     0  )     {", "builder . append ( stackTraceIndent )  ;", "builder . append (  \"  .  .  .     \"  )  ;", "builder . append ( commonElements )  ;", "builder . append (  \"    more \"  )  ;", "builder . append (  '  \\ n '  )  ;", "}", "}", "if    (  ( testLogging . getShowCauses (  )  )     &  &     (  ( exception . getCause (  )  )     !  =    null )  )     {", "printException ( descriptor ,    exception . getCause (  )  ,    stackTrace ,     ( exceptionLevel    +     1  )  ,    builder )  ;", "}", "}", "METHOD_END"], "methodName": ["printException"], "fileName": "org.gradle.api.internal.tasks.testing.logging.FullExceptionFormatter"}, {"methodBody": ["METHOD_START", "{", "return    ( element . getLineNumber (  )  )     <     0  ;", "}", "METHOD_END"], "methodName": ["isGeneratedMethod"], "fileName": "org.gradle.api.internal.tasks.testing.logging.GroovyStackTraceSpec"}, {"methodBody": ["METHOD_START", "{", "return   GroovyStackTraceSpec . INTERNAL _ CLASSES . matcher ( element . getClassName (  )  )  . matches (  )  ;", "}", "METHOD_END"], "methodName": ["isInternalClass"], "fileName": "org.gradle.api.internal.tasks.testing.logging.GroovyStackTraceSpec"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( qualifiedClassName . length (  )  )     <  =    maxLength )     |  |     (  ( qualifiedClassName . indexOf ( JavaClassNameFormatter . PACKAGE _ SEPARATOR )  )     =  =     (  -  1  )  )  )     {", "return   qualifiedClassName ;", "}", "final   int   maxLengthWithoutEllipsis    =    maxLength    -     3  ;", "int   beginIdx    =     0  ;", "int   endIdx    =    qualifiedClassName . lastIndexOf ( JavaClassNameFormatter . PACKAGE _ SEPARATOR )  ;", "int   iterations    =     0  ;", "while    (  ( beginIdx    +     (  ( qualifiedClassName . length (  )  )     -    endIdx )  )     <  =    maxLengthWithoutEllipsis )     {", "if    (  ( iterations    %     2  )     =  =     0  )     {", "int   tmp    =    qualifiedClassName . indexOf ( JavaClassNameFormatter . PACKAGE _ SEPARATOR ,     ( beginIdx    +     1  )  )  ;", "if    (  ( tmp    =  =     (  -  1  )  )     |  |     (  ( tmp    +     (  ( qualifiedClassName . length (  )  )     -    endIdx )  )     >    maxLengthWithoutEllipsis )  )     {", "break ;", "}", "beginIdx    =    tmp ;", "} else    {", "int   tmp    =    qualifiedClassName . lastIndexOf ( JavaClassNameFormatter . PACKAGE _ SEPARATOR ,     ( endIdx    -     1  )  )  ;", "if    (  ( tmp    =  =     (  -  1  )  )     |  |     (  ( beginIdx    +     (  ( qualifiedClassName . length (  )  )     -    tmp )  )     >    maxLengthWithoutEllipsis )  )     {", "break ;", "}", "endIdx    =    tmp ;", "}", "iterations +  +  ;", "}", "return    (  ( qualifiedClassName . substring (  0  ,    beginIdx )  )     +     \"  .  .  .  \"  )     +     ( qualifiedClassName . substring (  ( endIdx    +     1  )  )  )  ;", "}", "METHOD_END"], "methodName": ["abbreviateJavaPackage"], "fileName": "org.gradle.api.internal.tasks.testing.logging.JavaClassNameFormatter"}, {"methodBody": ["METHOD_START", "{", "String   indent    =    Strings . repeat ( ShortExceptionFormatter . INDENT ,    indentLevel )  ;", "builder . append ( indent )  ;", "if    ( cause )     {", "builder . append (  \" Caused   by :     \"  )  ;", "}", "String   className    =     ( exception   instanceof   PlaceholderException )     ?     (  ( PlaceholderException )     ( exception )  )  . getExceptionClassName (  )     :    exception . getClass (  )  . getName (  )  ;", "builder . append ( className )  ;", "StackTraceFilter   filter    =    new   StackTraceFilter ( new   ClassMethodNameStackTraceSpec ( descriptor . getClassName (  )  ,    null )  )  ;", "List < StackTraceElement >    stackTrace    =    filter . filter ( exception )  ;", "if    (  ( stackTrace . size (  )  )     >     0  )     {", "StackTraceElement   element    =    stackTrace . get (  0  )  ;", "builder . append (  \"    at    \"  )  ;", "builder . append ( element . getFileName (  )  )  ;", "builder . append (  '  :  '  )  ;", "builder . append ( element . getLineNumber (  )  )  ;", "}", "builder . append (  '  \\ n '  )  ;", "if    (  ( testLogging . getShowCauses (  )  )     &  &     (  ( exception . getCause (  )  )     !  =    null )  )     {", "printException ( descriptor ,    exception . getCause (  )  ,    true ,     ( indentLevel    +     1  )  ,    builder )  ;", "}", "}", "METHOD_END"], "methodName": ["printException"], "fileName": "org.gradle.api.internal.tasks.testing.logging.ShortExceptionFormatter"}, {"methodBody": ["METHOD_START", "{", "return   filter ( Arrays . asList ( throwable . getStackTrace (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["filter"], "fileName": "org.gradle.api.internal.tasks.testing.logging.StackTraceFilter"}, {"methodBody": ["METHOD_START", "{", "List < StackTraceElement >    filtered    =    Lists . newArrayList (  )  ;", "for    ( StackTraceElement   element    :    Lists . reverse ( stackTrace )  )     {", "if    ( filterSpec . isSatisfiedBy ( element )  )     {", "filtered . add ( element )  ;", "}", "}", "return   Lists . reverse ( filtered )  ;", "}", "METHOD_END"], "methodName": ["filter"], "fileName": "org.gradle.api.internal.tasks.testing.logging.StackTraceFilter"}, {"methodBody": ["METHOD_START", "{", "dest . append ( count )  ;", "dest . append (  \"     \"  )  ;", "dest . append ( noun )  ;", "if    ( count    !  =     1  )     {", "dest . append (  \" s \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["append"], "fileName": "org.gradle.api.internal.tasks.testing.logging.TestCountLogger"}, {"methodBody": ["METHOD_START", "{", "return   hadFailures ;", "}", "METHOD_END"], "methodName": ["hadFailures"], "fileName": "org.gradle.api.internal.tasks.testing.logging.TestCountLogger"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   builder    =    new   StringBuilder (  )  ;", "append ( builder ,    totals ,     \" test \"  )  ;", "builder . append (  \"    completed \"  )  ;", "if    (  ( faileds )     >     0  )     {", "builder . append (  \"  ,     \"  )  ;", "builder . append ( faileds )  ;", "builder . append (  \"    failed \"  )  ;", "}", "if    (  ( skippeds )     >     0  )     {", "builder . append (  \"  ,     \"  )  ;", "builder . append ( skippeds )  ;", "builder . append (  \"    skipped \"  )  ;", "}", "return   builder . toString (  )  ;", "}", "METHOD_END"], "methodName": ["summary"], "fileName": "org.gradle.api.internal.tasks.testing.logging.TestCountLogger"}, {"methodBody": ["METHOD_START", "{", "TestLogEvent   event    =    getEvent ( result )  ;", "if    ( shouldLogEvent ( descriptor ,    event )  )     {", "String   details    =     ( shouldLogExceptions ( result )  )     ?    exceptionFormatter . format ( descriptor ,    result . getExceptions (  )  )     :    null ;", "logEvent ( descriptor ,    event ,    details )  ;", "}", "}", "METHOD_END"], "methodName": ["after"], "fileName": "org.gradle.api.internal.tasks.testing.logging.TestEventLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( shouldLogEvent ( descriptor ,    TestLogEvent . STARTED )  )     {", "logEvent ( descriptor ,    TestLogEvent . STARTED )  ;", "}", "}", "METHOD_END"], "methodName": ["before"], "fileName": "org.gradle.api.internal.tasks.testing.logging.TestEventLogger"}, {"methodBody": ["METHOD_START", "{", "switch    ( result . getResultType (  )  )     {", "case   SUCCESS    :", "return   TestLog . PASSED ;", "case   FAILURE    :", "return   TestLog . FAILED ;", "case   SKIPPED    :", "return   TestLog . SKIPPED ;", "default    :", "throw   new   AssertionError (  )  ;", "}", "}", "METHOD_END"], "methodName": ["getEvent"], "fileName": "org.gradle.api.internal.tasks.testing.logging.TestEventLogger"}, {"methodBody": ["METHOD_START", "{", "int   level    =     0  ;", "while    (  ( descriptor . getParent (  )  )     !  =    null )     {", "level +  +  ;", "descriptor    =    descriptor . getParent (  )  ;", "}", "return   level ;", "}", "METHOD_END"], "methodName": ["getLevel"], "fileName": "org.gradle.api.internal.tasks.testing.logging.TestEventLogger"}, {"methodBody": ["METHOD_START", "{", "return   testLogging . getEvents (  )  . contains ( event )  ;", "}", "METHOD_END"], "methodName": ["isLoggedEventType"], "fileName": "org.gradle.api.internal.tasks.testing.logging.TestEventLogger"}, {"methodBody": ["METHOD_START", "{", "int   level    =    getLevel ( descriptor )  ;", "return    (  (  (  ( testLgetMinGranularity (  )  )     =  =     (  -  1  )  )     &  &     (  !  ( descriptor . isComposite (  )  )  )  )     |  |     (  (  ( testLgetMinGranularity (  )  )     >     (  -  1  )  )     &  &     ( level    >  =     ( testLgetMinGranularity (  )  )  )  )  )     &  &     (  (  ( testLgetMaxGranularity (  )  )     =  =     (  -  1  )  )     |  |     ( level    <  =     ( testLgetMaxGranularity (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["isLoggedGranularity"], "fileName": "org.gradle.api.internal.tasks.testing.logging.TestEventLogger"}, {"methodBody": ["METHOD_START", "{", "return    ( isLoggedGranularity ( descriptor )  )     &  &     ( isLoggedEventType ( event )  )  ;", "}", "METHOD_END"], "methodName": ["shouldLogEvent"], "fileName": "org.gradle.api.internal.tasks.testing.logging.TestEventLogger"}, {"methodBody": ["METHOD_START", "{", "return    ( testLogging . getShowExceptions (  )  )     &  &     (  !  ( result . getExceptions (  )  . isEmpty (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["shouldLogExceptions"], "fileName": "org.gradle.api.internal.tasks.testing.logging.TestEventLogger"}, {"methodBody": ["METHOD_START", "{", "for    ( ProgressLogger   progressLogger    :    testWorkerProgressLoggers . values (  )  )     {", "progressLogger . completed (  )  ;", "}", "testWorkerProgressLoggers . clear (  )  ;", "}", "METHOD_END"], "methodName": ["completeAll"], "fileName": "org.gradle.api.internal.tasks.testing.logging.TestWorkerProgressListener"}, {"methodBody": ["METHOD_START", "{", "DecoratingTestDescriptor   decoratingTestDescriptor    =     (  ( DecoratingTestDescriptor )     ( testDescriptor )  )  ;", "DefaultTestClassDescriptor   defaultTestClassDescriptor    =     (  ( DefaultTestClassDescriptor )     ( decoratingTestDescriptor . getDescriptor (  )  )  )  ;", "return    \" Executing   test    \"     +     ( JavaClassNameFormatter . abbreviateJavaPackage ( defaultTestClassDescriptor . getClassName (  )  ,     . MAX _ TEST _ NAME _ LENGTH )  )  ;", "}", "METHOD_END"], "methodName": ["createProgressLoggerDescription"], "fileName": "org.gradle.api.internal.tasks.testing.logging.TestWorkerProgressListener"}, {"methodBody": ["METHOD_START", "{", "return   testWorkerProgressLoggers ;", "}", "METHOD_END"], "methodName": ["getTestWorkerProgressLoggers"], "fileName": "org.gradle.api.internal.tasks.testing.logging.TestWorkerProgressListener"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( testDescriptor . isComposite (  )  )     &  &     ( testDescriptor   instanceof   DecoratingTestDescriptor )  )     &  &     (  (  (  ( DecoratingTestDescriptor )     ( testDescriptor )  )  . getDescriptor (  )  )    instanceof   DefaultTestClassDescriptor )  )     {", "return   true ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isDefaultTestClassDescriptor"], "fileName": "org.gradle.api.internal.tasks.testing.logging.TestWorkerProgressListener"}, {"methodBody": ["METHOD_START", "{", "listenerManager . addListener ( testListenerBuildOperationAdapter )  ;", "}", "METHOD_END"], "methodName": ["configure"], "fileName": "org.gradle.api.internal.tasks.testing.operations.TestExecutionBuildOperationBuildSessionScopeServices"}, {"methodBody": ["METHOD_START", "{", "return   new   TestListenerBuildOperationAdapter ( listener . getBroadcaster (  )  ,    buildOperationIdFactory ,    clock )  ;", "}", "METHOD_END"], "methodName": ["createTestListenerBuildOperationAdapter"], "fileName": "org.gradle.api.internal.tasks.testing.operations.TestExecutionBuildOperationBuildSessionScopeServices"}, {"methodBody": ["METHOD_START", "{", "TestListenerBuildOperationAdapter . Details   details    =    new   TestListenerBuildOperationAdapter . Details ( testDescriptor ,    testStartEvent . getStartTime (  )  )  ;", "TestListenerBuildOperationAdapter . InProgressExecuteTestBuildOperation   parentOperation    =    runningTests . get ( testDescriptor . getParent (  )  )  ;", "OperationIdentifier   parentId    =     ( parentOperation    =  =    null )     ?    CurrentBuildOperationRef . instance (  )  . getId (  )     :    parentOperation . descriptor . getId (  )  ;", "return   displayName ( testDescriptor . getName (  )  )  . details ( details )  . build ( newOperationIdentifier (  )  ,    parentId )  ;", "}", "METHOD_END"], "methodName": ["createTestBuildOperationDescriptor"], "fileName": "org.gradle.api.internal.tasks.testing.operations.TestListenerBuildOperationAdapter"}, {"methodBody": ["METHOD_START", "{", "return   new   OperationIdentifier ( buildOperationIdFactory . nextId (  )  )  ;", "}", "METHOD_END"], "methodName": ["newOperationIdentifier"], "fileName": "org.gradle.api.internal.tasks.testing.operations.TestListenerBuildOperationAdapter"}, {"methodBody": ["METHOD_START", "{", "try    {", ". stop (  )  ;", "}    finally    {", "=    null ;", "testCount    =     0  ;", "}", "}", "METHOD_END"], "methodName": ["endBatch"], "fileName": "org.gradle.api.internal.tasks.testing.processors.RestartEveryNTestClassProcessor"}, {"methodBody": ["METHOD_START", "{", "assert   testId    !  =    null ;", "if    (  ( System . out )     !  =    null )     {", "System . out . flush (  )  ;", "}", "if    (  ( System . err )     !  =    null )     {", "System . err . flush (  )  ;", "}", "outForwarder . oOwner    =    testId ;", "errForwarder . oOwner    =    testId ;", "}", "METHOD_END"], "methodName": ["setOutputOwner"], "fileName": "org.gradle.api.internal.tasks.testing.processors.TestOutputRedirector"}, {"methodBody": ["METHOD_START", "{", "assert    ( outForwarder . outputOwner )     !  =    null ;", "assert    ( errForwarder . outputOwner )     !  =    null ;", "r . redirectStandardOutputTo ( outForwarder )  ;", "r . redirectStandardErrorTo ( errForwarder )  ;", "r . start (  )  ;", "}", "METHOD_END"], "methodName": ["startRedirecting"], "fileName": "org.gradle.api.internal.tasks.testing.processors.TestOutputRedirector"}, {"methodBody": ["METHOD_START", "{", "redirector . stop (  )  ;", "}", "METHOD_END"], "methodName": ["stopRedirecting"], "fileName": "org.gradle.api.internal.tasks.testing.processors.TestOutputRedirector"}, {"methodBody": ["METHOD_START", "{", "PackageTestResults   packageResults    =    packages . get ( packageName )  ;", "if    ( packageResults    =  =    null )     {", "packageResults    =    new   PackageTestResults ( packageName ,    this )  ;", "packages . put ( packageName ,    packageResults )  ;", "}", "return   packageResults ;", "}", "METHOD_END"], "methodName": ["addPackage"], "fileName": "org.gradle.api.internal.tasks.testing.report.AllTestResults"}, {"methodBody": ["METHOD_START", "{", "String   packageName    =    StringUtils . substringBeforeLast ( className ,     \"  .  \"  )  ;", "if    ( packageName . equals ( className )  )     {", "packageName    =     \"  \"  ;", "}", "return   addPackage ( packageName )  ;", "}", "METHOD_END"], "methodName": ["addPackageForClass"], "fileName": "org.gradle.api.internal.tasks.testing.report.AllTestResults"}, {"methodBody": ["METHOD_START", "{", "PackageTestResults   packageResults    =    addPackageForClass ( className )  ;", "return   addTest ( packageResults . addTest ( classId ,    className ,    classDisplayName ,    testName ,    testDisplayName ,    duration )  )  ;", "}", "METHOD_END"], "methodName": ["addTest"], "fileName": "org.gradle.api.internal.tasks.testing.report.AllTestResults"}, {"methodBody": ["METHOD_START", "{", "return   addTest ( classId ,    className ,    className ,    testName ,    testName ,    duration )  ;", "}", "METHOD_END"], "methodName": ["addTest"], "fileName": "org.gradle.api.internal.tasks.testing.report.AllTestResults"}, {"methodBody": ["METHOD_START", "{", "return   addTestClass ( classId ,    className ,    className )  ;", "}", "METHOD_END"], "methodName": ["addTestClass"], "fileName": "org.gradle.api.internal.tasks.testing.report.AllTestResults"}, {"methodBody": ["METHOD_START", "{", "return   addPackageForClass ( className )  . addClass ( classId ,    className ,    classDisplayName )  ;", "}", "METHOD_END"], "methodName": ["addTestClass"], "fileName": "org.gradle.api.internal.tasks.testing.report.AllTestResults"}, {"methodBody": ["METHOD_START", "{", "return   packages . values (  )  ;", "}", "METHOD_END"], "methodName": ["getPackages"], "fileName": "org.gradle.api.internal.tasks.testing.report.AllTestResults"}, {"methodBody": ["METHOD_START", "{", "return   methodNameColumnExists (  )     ?    Arrays . asList (  \" Test \"  ,     \" Method   name \"  ,     \" Duration \"  ,     \" Result \"  )     :    Arrays . asList (  \" Test \"  ,     \" Duration \"  ,     \" Result \"  )  ;", "}", "METHOD_END"], "methodName": ["determineTableHeaders"], "fileName": "org.gradle.api.internal.tasks.testing.report.ClassPageRenderer"}, {"methodBody": ["METHOD_START", "{", "return   methodNameColumnExists (  )     ?    Arrays . asList ( test . getDisplayName (  )  ,    test . getName (  )  ,    test . getFormattedDuration (  )  ,    test . getFormattedResultType (  )  )     :    Arrays . asList ( test . getDisplayName (  )  ,    test . getFormattedDuration (  )  ,    test . getFormattedResultType (  )  )  ;", "}", "METHOD_END"], "methodName": ["determineTableRow"], "fileName": "org.gradle.api.internal.tasks.testing.report.ClassPageRenderer"}, {"methodBody": ["METHOD_START", "{", "for    ( TestResult   result    :    getResults (  )  . getTestResults (  )  )     {", "if    (  !  ( result . getName (  )  . equals ( result . getDisplayName (  )  )  )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["methodNameColumnExists"], "fileName": "org.gradle.api.internal.tasks.testing.report.ClassPageRenderer"}, {"methodBody": ["METHOD_START", "{", "writer . startElement (  \" thead \"  )  . startElement (  \" tr \"  )  ;", "for    ( String   header    :    headers )     {", "writer . startElement (  \" th \"  )  . characters ( header )  . endElement (  )  ;", "}", "writer . endElement (  )  . endElement (  )  ;", "}", "METHOD_END"], "methodName": ["renderTableHead"], "fileName": "org.gradle.api.internal.tasks.testing.report.ClassPageRenderer"}, {"methodBody": ["METHOD_START", "{", "writer . startElement (  \" tr \"  )  ;", "for    ( String   cell    :    determineTableRow ( test )  )     {", "writer . startElement (  \" td \"  )  . attribute (  \" class \"  ,    test . getStatus (  )  )  . characters ( cell )  . endElement (  )  ;", "}", "writer . endElement (  )  ;", "}", "METHOD_END"], "methodName": ["renderTableRow"], "fileName": "org.gradle.api.internal.tasks.testing.report.ClassPageRenderer"}, {"methodBody": ["METHOD_START", "{", "SimpleMarkupWriter   writer    =    htmlWriter . startElement (  \" table \"  )  ;", "rTableHead ( writer ,    determineTableHeaders (  )  )  ;", "for    ( TestResult   test    :    getResults (  )  . getTestResults (  )  )     {", "rTableRow ( writer ,    test )  ;", "}", "htmlWriter . endElement (  )  ;", "}", "METHOD_END"], "methodName": ["renderTests"], "fileName": "org.gradle.api.internal.tasks.testing.report.ClassPageRenderer"}, {"methodBody": ["METHOD_START", "{", "TestResult   test    =    new   TestResult ( testName ,    testDisplayName ,    duration ,    this )  ;", "results . add ( test )  ;", "return   addTest ( test )  ;", "}", "METHOD_END"], "methodName": ["addTest"], "fileName": "org.gradle.api.internal.tasks.testing.report.ClassTestResults"}, {"methodBody": ["METHOD_START", "{", "return   displayName ;", "}", "METHOD_END"], "methodName": ["getDisplayName"], "fileName": "org.gradle.api.internal.tasks.testing.report.ClassTestResults"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.gradle.api.internal.tasks.testing.report.ClassTestResults"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.api.internal.tasks.testing.report.ClassTestResults"}, {"methodBody": ["METHOD_START", "{", "return   packageResults ;", "}", "METHOD_END"], "methodName": ["getPackageResults"], "fileName": "org.gradle.api.internal.tasks.testing.report.ClassTestResults"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( displayName )     !  =    null )     &  &     (  !  ( displayName . equals ( name )  )  )  )     {", "return   displayName ;", "}", "return   getSimpleName (  )  ;", "}", "METHOD_END"], "methodName": ["getReportName"], "fileName": "org.gradle.api.internal.tasks.testing.report.ClassTestResults"}, {"methodBody": ["METHOD_START", "{", "String   simpleName    =    StringUtils . substringAfterLast ( name ,     \"  .  \"  )  ;", "if    ( simpleName . equals (  \"  \"  )  )     {", "return   name ;", "}", "return   simpleName ;", "}", "METHOD_END"], "methodName": ["getSimpleName"], "fileName": "org.gradle.api.internal.tasks.testing.report.ClassTestResults"}, {"methodBody": ["METHOD_START", "{", "return   results ;", "}", "METHOD_END"], "methodName": ["getTestResults"], "fileName": "org.gradle.api.internal.tasks.testing.report.ClassTestResults"}, {"methodBody": ["METHOD_START", "{", "( tests )  +  +  ;", "duration    +  =    test . getDuration (  )  ;", "return   test ;", "}", "METHOD_END"], "methodName": ["addTest"], "fileName": "org.gradle.api.internal.tasks.testing.report.CompositeTestResults"}, {"methodBody": ["METHOD_START", "{", "failures . add ( failedTest )  ;", "if    (  ( parent )     !  =    null )     {", "parent . failed ( failedTest )  ;", "}", "}", "METHOD_END"], "methodName": ["failed"], "fileName": "org.gradle.api.internal.tasks.testing.report.CompositeTestResults"}, {"methodBody": ["METHOD_START", "{", "return   failures . size (  )  ;", "}", "METHOD_END"], "methodName": ["getFailureCount"], "fileName": "org.gradle.api.internal.tasks.testing.report.CompositeTestResults"}, {"methodBody": ["METHOD_START", "{", "return   failures ;", "}", "METHOD_END"], "methodName": ["getFailures"], "fileName": "org.gradle.api.internal.tasks.testing.report.CompositeTestResults"}, {"methodBody": ["METHOD_START", "{", "Number   successRate    =    getSuccessRate (  )  ;", "if    ( successRate    =  =    null )     {", "return    \"  -  \"  ;", "}", "return   successRate    +     \"  %  \"  ;", "}", "METHOD_END"], "methodName": ["getFormattedSuccessRate"], "fileName": "org.gradle.api.internal.tasks.testing.report.CompositeTestResults"}, {"methodBody": ["METHOD_START", "{", "return   ignored ;", "}", "METHOD_END"], "methodName": ["getIgnored"], "fileName": "org.gradle.api.internal.tasks.testing.report.CompositeTestResults"}, {"methodBody": ["METHOD_START", "{", "return   ignored . size (  )  ;", "}", "METHOD_END"], "methodName": ["getIgnoredCount"], "fileName": "org.gradle.api.internal.tasks.testing.report.CompositeTestResults"}, {"methodBody": ["METHOD_START", "{", "return   parent ;", "}", "METHOD_END"], "methodName": ["getParent"], "fileName": "org.gradle.api.internal.tasks.testing.report.CompositeTestResults"}, {"methodBody": ["METHOD_START", "{", "return    ( tests )     -     ( getIgnoredCount (  )  )  ;", "}", "METHOD_END"], "methodName": ["getRunTestCount"], "fileName": "org.gradle.api.internal.tasks.testing.report.CompositeTestResults"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getRunTestCount (  )  )     =  =     0  )     {", "return   null ;", "}", "BigDecimal   runTests    =    BigDecimal . valueOf ( getRunTestCount (  )  )  ;", "BigDecimal   successful    =    BigDecimal . valueOf (  (  ( getRunTestCount (  )  )     -     ( getFailureCount (  )  )  )  )  ;", "return   successful . divide ( runTests ,     2  ,    BigDecimal . ROUND _ DOWN )  . multiply ( BigDecimal . valueOf (  1  0  0  )  )  . intValue (  )  ;", "}", "METHOD_END"], "methodName": ["getSuccessRate"], "fileName": "org.gradle.api.internal.tasks.testing.report.CompositeTestResults"}, {"methodBody": ["METHOD_START", "{", "return   tests ;", "}", "METHOD_END"], "methodName": ["getTestCount"], "fileName": "org.gradle.api.internal.tasks.testing.report.CompositeTestResults"}, {"methodBody": ["METHOD_START", "{", "String   otherUrl    =    model . getBaseUrl (  )  ;", "String   thisUrl    =    getBaseUrl (  )  ;", "int   maxPos    =    Math . min ( thisUrl . length (  )  ,    otherUrl . length (  )  )  ;", "int   endPrefix    =     0  ;", "while    ( endPrefix    <    maxPos )     {", "int   endA    =    thisUrl . indexOf (  '  /  '  ,    endPrefix )  ;", "int   endB    =    otherUrl . indexOf (  '  /  '  ,    endPrefix )  ;", "if    (  ( endA    !  =    endB )     |  |     ( endA    <     0  )  )     {", "break ;", "}", "if    (  !  ( thisUrl . regionMatches ( endPrefix ,    otherUrl ,    endPrefix ,     ( endA    -    endPrefix )  )  )  )     {", "break ;", "}", "endPrefix    =    endA    +     1  ;", "}", "StringBuilder   r    =    new   StringBuilder (  )  ;", "int   endA    =    endPrefix ;", "while    ( endA    <     ( thisUrl . length (  )  )  )     {", "int   pos    =    thisUrl . indexOf (  '  /  '  ,    endA )  ;", "if    ( pos    <     0  )     {", "break ;", "}", "r . append (  \"  .  .  /  \"  )  ;", "endA    =    pos    +     1  ;", "}", "r . append ( otherUrl . substring ( endPrefix )  )  ;", "return   r . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getUrlTo"], "fileName": "org.gradle.api.internal.tasks.testing.report.CompositeTestResults"}, {"methodBody": ["METHOD_START", "{", "ignored . add ( ignoredTest )  ;", "if    (  ( parent )     !  =    null )     {", "parent . ignored ( ignoredTest )  ;", "}", "}", "METHOD_END"], "methodName": ["ignored"], "fileName": "org.gradle.api.internal.tasks.testing.report.CompositeTestResults"}, {"methodBody": ["METHOD_START", "{", "try    {", "HtmlReportRenderer   htmlRenderer    =    new   HtmlReportRenderer (  )  ;", "buildOperationExecutor . run ( new   RunnableBuildOperation (  )     {", "@ Override", "public   void   run ( BuildOperationContext   context )     {", "GFileUtils . deleteQuietly ( new   File ( reportDir ,     \" packages \"  )  )  ;", "GFileUtils . deleteQuietly ( new   File ( reportDir ,     \" classes \"  )  )  ;", "}", "@ Override", "public   Builder   description (  )     {", "return   BuildOperationDescriptor . displayName (  \" Delete   old   HTML   results \"  )  ;", "}", "}  )  ;", "htmlRenderer . render ( model ,    new   ReportRenderer < AllTestResults ,    HtmlReportBuilder >  (  )     {", "@ Override", "public   void   render ( final   AllTestResults   model ,    final   HtmlReportBuilder   output )    throws   IOException    {", "buildOperationExecutor . runAll ( new   Action < BuildOperationQueue <  . HtmlReportFileGenerator <  ?    extends   CompositeTestResults >  >  >  (  )     {", "@ Override", "public   void   execute ( BuildOperationQueue <  . HtmlReportFileGenerator <  ?    extends   CompositeTestResults >  >    queue )     {", "queue . add (  . generator (  \" index . html \"  ,    model ,    new   OverviewPageRenderer (  )  ,    output )  )  ;", "for    ( PackageTestResults   packageResults    :    model . getPackages (  )  )     {", "queue . add (  . generator ( packageResults . getBaseUrl (  )  ,    packageResults ,    new   PackagePageRenderer (  )  ,    output )  )  ;", "for    ( ClassTestResults   classResults    :    packageResults . getClasses (  )  )     {", "queue . add (  . generator ( classResults . getBaseUrl (  )  ,    classResults ,    new   ClassPageRenderer ( resultsProvider )  ,    output )  )  ;", "}", "}", "}", "}  )  ;", "}", "}  ,    reportDir )  ;", "}    catch    ( Exception   e )     {", "throw   new   GradleException ( String . format (  \" Could   not   generate   test   report   to    '  % s '  .  \"  ,    reportDir )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["generateFiles"], "fileName": "org.gradle.api.internal.tasks.testing.report.DefaultTestReport"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultTestReport . HtmlReportFileGenerator < T >  ( fileUrl ,    results ,    renderer ,    output )  ;", "}", "METHOD_END"], "methodName": ["generator"], "fileName": "org.gradle.api.internal.tasks.testing.report.DefaultTestReport"}, {"methodBody": ["METHOD_START", "{", "final   AllTestResults   model    =    new   AllTestResults (  )  ;", "resultsProvider . visitClasses ( new   Action < TestClassResult >  (  )     {", "public   void   execute ( TestClassResult   classResult )     {", "model . addTestClass ( classResult . getId (  )  ,    classResult . getClassName (  )  ,    classResult . getClassDisplayName (  )  )  ;", "List < TestMethodResult >    collectedResults    =    classResult . getResults (  )  ;", "for    ( TestMethodResult   collectedResult    :    collectedResults )     {", "final   TestResult   testResult    =    model . addTest ( classResult . getId (  )  ,    classResult . getClassName (  )  ,    classResult . getClassDisplayName (  )  ,    collectedResult . getName (  )  ,    collectedResult . getDisplayName (  )  ,    collectedResult . getDuration (  )  )  ;", "if    (  ( collectedResult . getResultType (  )  )     =  =     ( tasks . testing . TestResult . ResultType . SKIPPED )  )     {", "testResult . setIgnored (  )  ;", "} else    {", "List < TestFailure >    failures    =    collectedResult . getFailures (  )  ;", "for    ( TestFailure   failure    :    failures )     {", "testResult . addFailure ( failure )  ;", "}", "}", "}", "}", "}  )  ;", "return   model ;", "}", "METHOD_END"], "methodName": ["loadModelFromProvider"], "fileName": "org.gradle.api.internal.tasks.testing.report.DefaultTestReport"}, {"methodBody": ["METHOD_START", "{", "DecimalFormatSymbols   symbols    =    new   DecimalFormatSymbols (  )  ;", "symbols . setDecimalSeparator (  '  .  '  )  ;", "DecimalFormat   format    =    new   DecimalFormat (  \"  #  .  #  \"  ,    symbols )  ;", "format . setParseBigDecimal ( true )  ;", "return    (  ( BigDecimal )     ( format . parse ( source )  )  )  ;", "}", "METHOD_END"], "methodName": ["parse"], "fileName": "org.gradle.api.internal.tasks.testing.report.LocaleSafeDecimalFormat"}, {"methodBody": ["METHOD_START", "{", "Locale   usesCommaAsDecimalSeparator    =    new   Locale (  \" PL \"  ,     \" pl \"  ,     \"  \"  )  ;", "Locale . setDefault ( usesCommaAsDecimalSeparator )  ;", "BigDecimal   result    =    new    (  )  . parse (  \"  1  .  0  5  \"  )  ;", "Assert . assertEquals (  1  .  0  5  ,    result . doubleValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["parsesCommaEvenInRareLocales"], "fileName": "org.gradle.api.internal.tasks.testing.report.LocaleSafeDecimalFormatTest"}, {"methodBody": ["METHOD_START", "{", "Locale . setDefault ( defaultLocale )  ;", "}", "METHOD_END"], "methodName": ["revertLocalToDefault"], "fileName": "org.gradle.api.internal.tasks.testing.report.LocaleSafeDecimalFormatTest"}, {"methodBody": ["METHOD_START", "{", "htmlWriter . startElement (  \" table \"  )  ;", "htmlWriter . startElement (  \" thead \"  )  ;", "htmlWriter . startElement (  \" tr \"  )  ;", "htmlWriter . startElement (  \" th \"  )  . characters (  \" Class \"  )  . endElement (  )  ;", "htmlWriter . startElement (  \" th \"  )  . characters (  \" Tests \"  )  . endElement (  )  ;", "htmlWriter . startElement (  \" th \"  )  . characters (  \" Failures \"  )  . endElement (  )  ;", "htmlWriter . startElement (  \" th \"  )  . characters (  \" Ignored \"  )  . endElement (  )  ;", "htmlWriter . startElement (  \" th \"  )  . characters (  \" Duration \"  )  . endElement (  )  ;", "htmlWriter . startElement (  \" th \"  )  . characters (  \" Success   rate \"  )  . endElement (  )  ;", "htmlWriter . endElement (  )  ;", "htmlWriter . endElement (  )  ;", "htmlWriter . startElement (  \" tbody \"  )  ;", "for    ( PackageTestResults   Package    :    getResults (  )  . getPackages (  )  )     {", "for    ( ClassTestResults   Class    :    Package . getClasses (  )  )     {", "htmlWriter . startElement (  \" tr \"  )  ;", "htmlWriter . startElement (  \" td \"  )  . attribute (  \" class \"  ,    Class . getStatusClass (  )  )  . endElement (  )  ;", "htmlWriter . startElement (  \" a \"  )  . attribute (  \" href \"  ,    asHtmlLinkEncoded ( Class . getBaseUrl (  )  )  )  . characters ( Class . getName (  )  )  . endElement (  )  ;", "htmlWriter . startElement (  \" td \"  )  . characters ( Integer . toString ( Class . getTestCount (  )  )  )  . endElement (  )  ;", "htmlWriter . startElement (  \" td \"  )  . characters ( Integer . toString ( Class . getFailureCount (  )  )  )  . endElement (  )  ;", "htmlWriter . startElement (  \" td \"  )  . characters ( Integer . toString ( Class . getIgnoredCount (  )  )  )  . endElement (  )  ;", "htmlWriter . startElement (  \" td \"  )  . characters ( Class . getFormattedDuration (  )  )  . endElement (  )  ;", "htmlWriter . startElement (  \" td \"  )  . attribute (  \" class \"  ,    Class . getStatusClass (  )  )  . characters ( Class . getFormattedSuccessRate (  )  )  . endElement (  )  ;", "htmlWriter . endElement (  )  ;", "}", "}", "htmlWriter . endElement (  )  ;", "htmlWriter . endElement (  )  ;", "}", "METHOD_END"], "methodName": ["renderClasses"], "fileName": "org.gradle.api.internal.tasks.testing.report.OverviewPageRenderer"}, {"methodBody": ["METHOD_START", "{", "htmlWriter . startElement (  \" table \"  )  ;", "htmlWriter . startElement (  \" thead \"  )  ;", "htmlWriter . startElement (  \" tr \"  )  ;", "htmlWriter . startElement (  \" th \"  )  . characters (  \" Package \"  )  . endElement (  )  ;", "htmlWriter . startElement (  \" th \"  )  . characters (  \" Tests \"  )  . endElement (  )  ;", "htmlWriter . startElement (  \" th \"  )  . characters (  \" Failures \"  )  . endElement (  )  ;", "htmlWriter . startElement (  \" th \"  )  . characters (  \" Ignored \"  )  . endElement (  )  ;", "htmlWriter . startElement (  \" th \"  )  . characters (  \" Duration \"  )  . endElement (  )  ;", "htmlWriter . startElement (  \" th \"  )  . characters (  \" Success   rate \"  )  . endElement (  )  ;", "htmlWriter . endElement (  )  ;", "htmlWriter . endElement (  )  ;", "htmlWriter . startElement (  \" tbody \"  )  ;", "for    ( PackageTestResults   Package    :    getResults (  )  . getPackages (  )  )     {", "htmlWriter . startElement (  \" tr \"  )  ;", "htmlWriter . startElement (  \" td \"  )  . attribute (  \" class \"  ,    Package . getStatusClass (  )  )  ;", "htmlWriter . startElement (  \" a \"  )  . attribute (  \" href \"  ,    Package . getBaseUrl (  )  )  . characters ( Package . getName (  )  )  . endElement (  )  ;", "htmlWriter . endElement (  )  ;", "htmlWriter . startElement (  \" td \"  )  . characters ( Integer . toString ( Package . getTestCount (  )  )  )  . endElement (  )  ;", "htmlWriter . startElement (  \" td \"  )  . characters ( Integer . toString ( Package . getFailureCount (  )  )  )  . endElement (  )  ;", "htmlWriter . startElement (  \" td \"  )  . characters ( Integer . toString ( Package . getIgnoredCount (  )  )  )  . endElement (  )  ;", "htmlWriter . startElement (  \" td \"  )  . characters ( Package . getFormattedDuration (  )  )  . endElement (  )  ;", "htmlWriter . startElement (  \" td \"  )  . attribute (  \" class \"  ,    Package . getStatusClass (  )  )  . characters ( Package . getFormattedSuccessRate (  )  )  . endElement (  )  ;", "htmlWriter . endElement (  )  ;", "}", "htmlWriter . endElement (  )  ;", "htmlWriter . endElement (  )  ;", "}", "METHOD_END"], "methodName": ["renderPackages"], "fileName": "org.gradle.api.internal.tasks.testing.report.OverviewPageRenderer"}, {"methodBody": ["METHOD_START", "{", "htmlWriter . startElement (  \" table \"  )  ;", "htmlWriter . startElement (  \" thread \"  )  ;", "htmlWriter . startElement (  \" tr \"  )  ;", "htmlWriter . startElement (  \" th \"  )  . characters (  \" Class \"  )  . endElement (  )  ;", "htmlWriter . startElement (  \" th \"  )  . characters (  \" Tests \"  )  . endElement (  )  ;", "htmlWriter . startElement (  \" th \"  )  . characters (  \" Failures \"  )  . endElement (  )  ;", "htmlWriter . startElement (  \" th \"  )  . characters (  \" Ignored \"  )  . endElement (  )  ;", "htmlWriter . startElement (  \" th \"  )  . characters (  \" Duration \"  )  . endElement (  )  ;", "htmlWriter . startElement (  \" th \"  )  . characters (  \" Success   rate \"  )  . endElement (  )  ;", "htmlWriter . endElement (  )  ;", "htmlWriter . endElement (  )  ;", "for    ( ClassTestResults   testClass    :    getResults (  )  . getClasses (  )  )     {", "htmlWriter . startElement (  \" tr \"  )  ;", "htmlWriter . startElement (  \" td \"  )  . attribute (  \" class \"  ,    testClass . getStatusClass (  )  )  ;", "htmlWriter . startElement (  \" a \"  )  . attribute (  \" href \"  ,    asHtmlLinkEncoded ( getResults (  )  . getUrlTo ( testClass )  )  )  . characters ( testClass . getRName (  )  )  . endElement (  )  ;", "htmlWriter . endElement (  )  ;", "htmlWriter . startElement (  \" td \"  )  . characters ( Integer . toString ( testClass . getTestCount (  )  )  )  . endElement (  )  ;", "htmlWriter . startElement (  \" td \"  )  . characters ( Integer . toString ( testClass . getFailureCount (  )  )  )  . endElement (  )  ;", "htmlWriter . startElement (  \" td \"  )  . characters ( Integer . toString ( testClass . getIgnoredCount (  )  )  )  . endElement (  )  ;", "htmlWriter . startElement (  \" td \"  )  . characters ( testClass . getFormattedDuration (  )  )  . endElement (  )  ;", "htmlWriter . startElement (  \" td \"  )  . attribute (  \" class \"  ,    testClass . getStatusClass (  )  )  . characters ( testClass . getFormattedSuccessRate (  )  )  . endElement (  )  ;", "htmlWriter . endElement (  )  ;", "}", "htmlWriter . endElement (  )  ;", "}", "METHOD_END"], "methodName": ["renderClasses"], "fileName": "org.gradle.api.internal.tasks.testing.report.PackagePageRenderer"}, {"methodBody": ["METHOD_START", "{", "return   addClass ( classId ,    className ,    className )  ;", "}", "METHOD_END"], "methodName": ["addClass"], "fileName": "org.gradle.api.internal.tasks.testing.report.PackageTestResults"}, {"methodBody": ["METHOD_START", "{", "ClassTestResults   classResults    =    classes . get ( className )  ;", "if    ( classResults    =  =    null )     {", "classResults    =    new   ClassTestResults ( classId ,    className ,    classDisplayName ,    this )  ;", "classes . put ( className ,    classResults )  ;", "}", "return   classResults ;", "}", "METHOD_END"], "methodName": ["addClass"], "fileName": "org.gradle.api.internal.tasks.testing.report.PackageTestResults"}, {"methodBody": ["METHOD_START", "{", "ClassTestResults   classResults    =    addClass ( classId ,    className ,    classDisplayName )  ;", "return   addTest ( classResults . addTest ( testName ,    testDisplayName ,    duration )  )  ;", "}", "METHOD_END"], "methodName": ["addTest"], "fileName": "org.gradle.api.internal.tasks.testing.report.PackageTestResults"}, {"methodBody": ["METHOD_START", "{", "return   addTest ( classId ,    className ,    className ,    testName ,    testName ,    duration )  ;", "}", "METHOD_END"], "methodName": ["addTest"], "fileName": "org.gradle.api.internal.tasks.testing.report.PackageTestResults"}, {"methodBody": ["METHOD_START", "{", "return   classes . values (  )  ;", "}", "METHOD_END"], "methodName": ["getClasses"], "fileName": "org.gradle.api.internal.tasks.testing.report.PackageTestResults"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.api.internal.tasks.testing.report.PackageTestResults"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( results . getFailures (  )  . isEmpty (  )  )  )     {", "addTab (  \" Failed   tests \"  ,    new   internal . ErroringAction < SimpleHtmlWriter >  (  )     {", "public   void   doExecute ( SimpleHtmlWriter   element )    throws   IOException    {", "renderFailures ( element )  ;", "}", "}  )  ;", "}", "}", "METHOD_END"], "methodName": ["addFailuresTab"], "fileName": "org.gradle.api.internal.tasks.testing.report.PageRenderer"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( results . getIgnored (  )  . isEmpty (  )  )  )     {", "addTab (  \" Ignored   tests \"  ,    new   internal . ErroringAction < SimpleHtmlWriter >  (  )     {", "public   void   doExecute ( SimpleHtmlWriter   htmlWriter )    throws   IOException    {", "renderIgnoredTests ( htmlWriter )  ;", "}", "}  )  ;", "}", "}", "METHOD_END"], "methodName": ["addIgnoredTab"], "fileName": "org.gradle.api.internal.tasks.testing.report.PageRenderer"}, {"methodBody": ["METHOD_START", "{", "tabsRenderer . add ( title ,    new   ReportRenderer < T ,    SimpleHtmlWriter >  (  )     {", "@ Override", "public   void   render ( T   model ,    SimpleHtmlWriter   writer )     {", "contentRenderer . execute ( writer )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["addTab"], "fileName": "org.gradle.api.internal.tasks.testing.report.PageRenderer"}, {"methodBody": ["METHOD_START", "{", "return   rawLink . replace (  \"  #  \"  ,     \"  %  2  3  \"  )  ;", "}", "METHOD_END"], "methodName": ["asHtmlLinkEncoded"], "fileName": "org.gradle.api.internal.tasks.testing.report.PageRenderer"}, {"methodBody": ["METHOD_START", "{", "return   results ;", "}", "METHOD_END"], "methodName": ["getResults"], "fileName": "org.gradle.api.internal.tasks.testing.report.PageRenderer"}, {"methodBody": ["METHOD_START", "{", "renderTestResultList ( htmlWriter ,    results . getFailures (  )  )  ;", "}", "METHOD_END"], "methodName": ["renderFailures"], "fileName": "org.gradle.api.internal.tasks.testing.report.PageRenderer"}, {"methodBody": ["METHOD_START", "{", "renderTestResultList ( htmlWriter ,    getResults (  )  . getIgnored (  )  )  ;", "}", "METHOD_END"], "methodName": ["renderIgnoredTests"], "fileName": "org.gradle.api.internal.tasks.testing.report.PageRenderer"}, {"methodBody": ["METHOD_START", "{", "tabsRenderer . render ( PageRenderer . getModel (  )  ,    htmlWriter )  ;", "}", "METHOD_END"], "methodName": ["renderTabs"], "fileName": "org.gradle.api.internal.tasks.testing.report.PageRenderer"}, {"methodBody": ["METHOD_START", "{", "htmlWriter . startElement (  \" ul \"  )  . attribute (  \" class \"  ,     \" linkList \"  )  ;", "for    ( TestResult   test    :    failures )     {", "htmlWriter . startElement (  \" li \"  )  ;", "htmlWriter . startElement (  \" a \"  )  . attribute (  \" href \"  ,    asHtmlLinkEncoded ( getResults (  )  . getUrlTo ( test . getClassResults (  )  )  )  )  . characters ( test . getClassResults (  )  . getRName (  )  )  . endElement (  )  ;", "htmlWriter . characters (  \"  .  \"  )  ;", "String   link    =     (  ( asHtmlLinkEncoded ( getResults (  )  . getUrlTo ( test . getClassResults (  )  )  )  )     +     \"  #  \"  )     +     ( test . getName (  )  )  ;", "htmlWriter . startElement (  \" a \"  )  . attribute (  \" href \"  ,    link )  . characters ( test . getDisplayName (  )  )  . endElement (  )  ;", "htmlWriter . endElement (  )  ;", "}", "htmlWriter . endElement (  )  ;", "}", "METHOD_END"], "methodName": ["renderTestResultList"], "fileName": "org.gradle.api.internal.tasks.testing.report.PageRenderer"}, {"methodBody": ["METHOD_START", "{", "classResults . failed ( this )  ;", "failures . add ( failure )  ;", "}", "METHOD_END"], "methodName": ["addFailure"], "fileName": "org.gradle.api.internal.tasks.testing.report.TestResult"}, {"methodBody": ["METHOD_START", "{", "return   classResults ;", "}", "METHOD_END"], "methodName": ["getClassResults"], "fileName": "org.gradle.api.internal.tasks.testing.report.TestResult"}, {"methodBody": ["METHOD_START", "{", "return   displayName ;", "}", "METHOD_END"], "methodName": ["getDisplayName"], "fileName": "org.gradle.api.internal.tasks.testing.report.TestResult"}, {"methodBody": ["METHOD_START", "{", "return   failures ;", "}", "METHOD_END"], "methodName": ["getFailures"], "fileName": "org.gradle.api.internal.tasks.testing.report.TestResult"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.gradle.api.internal.tasks.testing.report.TestResult"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.api.internal.tasks.testing.report.TestResult"}, {"methodBody": ["METHOD_START", "{", "return   ignored ;", "}", "METHOD_END"], "methodName": ["isIgnored"], "fileName": "org.gradle.api.internal.tasks.testing.report.TestResult"}, {"methodBody": ["METHOD_START", "{", "classResults . ignored ( this )  ;", "ignored    =    true ;", "}", "METHOD_END"], "methodName": ["setIgnored"], "fileName": "org.gradle.api.internal.tasks.testing.report.TestResult"}, {"methodBody": ["METHOD_START", "{", "return   TimeFormatting . formatDurationVeryTerse ( getDuration (  )  )  ;", "}", "METHOD_END"], "methodName": ["getFormattedDuration"], "fileName": "org.gradle.api.internal.tasks.testing.report.TestResultModel"}, {"methodBody": ["METHOD_START", "{", "switch    ( getResultType (  )  )     {", "case   SUCCESS    :", "return    \" passed \"  ;", "case   FAILURE    :", "return    \" failed \"  ;", "case   SKIPPED    :", "return    \" ignored \"  ;", "default    :", "throw   new   IllegalStateException (  )  ;", "}", "}", "METHOD_END"], "methodName": ["getFormattedResultType"], "fileName": "org.gradle.api.internal.tasks.testing.report.TestResultModel"}, {"methodBody": ["METHOD_START", "{", "switch    ( getResultType (  )  )     {", "case   SUCCESS    :", "return    \" success \"  ;", "case   FAILURE    :", "return    \" failures \"  ;", "case   SKIPPED    :", "return    \" skipped \"  ;", "default    :", "throw   new   IllegalStateException (  )  ;", "}", "}", "METHOD_END"], "methodName": ["getStatusClass"], "fileName": "org.gradle.api.internal.tasks.testing.report.TestResultModel"}, {"methodBody": ["METHOD_START", "{", "List < Object >    incompleteChildren    =    new   ArrayList < Object >  (  )  ;", "for    ( Map . Entry < Object ,    TestState >    entry    :    executing . entrySet (  )  )     {", "if    ( testId . equals ( entry . getValue (  )  . startEvent . getParentId (  )  )  )     {", "incompleteChildren . add ( entry . getKey (  )  )  ;", "}", "}", "if    (  !  ( incompleteChildren . isEmpty (  )  )  )     {", "TestCompleteEvent   skippedEvent    =    new   TestCompleteEvent ( endTime ,     . ResultType . SKIPPED )  ;", "for    ( Object   childTestId    :    incompleteChildren )     {", "completed ( childTestId ,    skippedEvent )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["ensureChildrenCompleted"], "fileName": "org.gradle.api.internal.tasks.testing.results.StateTrackingTestResultProcessor"}, {"methodBody": ["METHOD_START", "{", "TestState   state    =    executing . get ( testId )  ;", "if    ( state    !  =    null )     {", "return   state . test ;", "}", "if    (  ( currentParent )     !  =    null )     {", "return   currentParent ;", "}", "return   new   UnknownTestDescriptor (  )  ;", "}", "METHOD_END"], "methodName": ["findDescriptor"], "fileName": "org.gradle.api.internal.tasks.testing.results.StateTrackingTestResultProcessor"}, {"methodBody": ["METHOD_START", "{", "this . completeEvent    =    event ;", "resultType    =     ( isFailed (  )  )     ?    TestResult . ResultType . FAILURE    :     ( event . getResultType (  )  )     !  =    null    ?    event . getResultType (  )     :    TestResult . ResultType . SUCCESS ;", "if    (  !  ( test . isComposite (  )  )  )     {", "testCount    =     1  ;", "switch    ( resultType )     {", "case   SUCCESS    :", "successfulCount    =     1  ;", "break ;", "case   FAILURE    :", "failedCount    =     1  ;", "break ;", "}", "}", "if    (  ( startEvent . getParentId (  )  )     !  =    null )     {", "parentState    =    executing . get ( startEvent . getParentId (  )  )  ;", "if    ( parentState    !  =    null )     {", "if    ( isFailed (  )  )     {", "parentState . failedChild    =    true ;", "}", "parentState . testCount    +  =    testCount ;", "parentState . successfulCount    +  =    successfulCount ;", "parentState . failedCount    +  =    failedCount ;", "}", "}", "}", "METHOD_END"], "methodName": ["completed"], "fileName": "org.gradle.api.internal.tasks.testing.results.TestState"}, {"methodBody": ["METHOD_START", "{", "return   completeEvent . getEndTime (  )  ;", "}", "METHOD_END"], "methodName": ["getEndTime"], "fileName": "org.gradle.api.internal.tasks.testing.results.TestState"}, {"methodBody": ["METHOD_START", "{", "return    ( completeEvent . getEndTime (  )  )     -     ( startEvent . getStartTime (  )  )  ;", "}", "METHOD_END"], "methodName": ["getExecutionTime"], "fileName": "org.gradle.api.internal.tasks.testing.results.TestState"}, {"methodBody": ["METHOD_START", "{", "return   startEvent . getStartTime (  )  ;", "}", "METHOD_END"], "methodName": ["getStartTime"], "fileName": "org.gradle.api.internal.tasks.testing.results.TestState"}, {"methodBody": ["METHOD_START", "{", "return    ( failedChild )     |  |     (  !  ( failures . isEmpty (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["isFailed"], "fileName": "org.gradle.api.internal.tasks.testing.results.TestState"}, {"methodBody": ["METHOD_START", "{", "WorkerProcessBuilder   builder    =    workerFactory . create ( new   TestWorker ( processorFactory )  )  ;", "builder . setBaseName (  \" Gradle   Test   Executor \"  )  ;", "builder . setImplementationClasspath ( getTestWorkerImplementationClasspath (  )  )  ;", "builder . applicationClasspath ( classPath )  ;", "options . copyTo ( builder . getJavaCommand (  )  )  ;", "builder . getJavaCommand (  )  . jvmArgs (  \"  - Dnative = false \"  )  ;", "buildConfigAction . execute ( builder )  ;", "workerProcess    =    builder . build (  )  ;", "workerProcess . start (  )  ;", "ObjectConnection   connection    =    workerProcess . getConnection (  )  ;", "connection . useParameterSerializers ( TestEventSerializer . create (  )  )  ;", "connection . addIncoming ( TestResultProcessor . class ,    resultProcessor )  ;", "Remote   remoteProcessor    =    connection . addOutgoing ( Remote . class )  ;", "connection . connect (  )  ;", "remoteProcessor . startProcessing (  )  ;", "return   remoteProcessor ;", "}", "METHOD_END"], "methodName": ["forkProcess"], "fileName": "org.gradle.api.internal.tasks.testing.worker.ForkingTestClassProcessor"}, {"methodBody": ["METHOD_START", "{", "return   CollectionUtils . flattenCollections ( URL . class ,    moduleRegistry . getModule (  \" gradle - core - api \"  )  . getImplementationClasspath (  )  . getAsURLs (  )  ,    moduleRegistry . getModule (  \" gradle - core \"  )  . getImplementationClasspath (  )  . getAsURLs (  )  ,    moduleRegistry . getModule (  \" gradle - logging \"  )  . getImplementationClasspath (  )  . getAsURLs (  )  ,    moduleRegistry . getModule (  \" gradle - messaging \"  )  . getImplementationClasspath (  )  . getAsURLs (  )  ,    moduleRegistry . getModule (  \" gradle - base - services \"  )  . getImplementationClasspath (  )  . getAsURLs (  )  ,    moduleRegistry . getModule (  \" gradle - cli \"  )  . getImplementationClasspath (  )  . getAsURLs (  )  ,    moduleRegistry . getModule (  \" gradle - native \"  )  . getImplementationClasspath (  )  . getAsURLs (  )  ,    moduleRegistry . getModule (  \" gradle - testing - base \"  )  . getImplementationClasspath (  )  . getAsURLs (  )  ,    moduleRegistry . getModule (  \" gradle - testing - jvm \"  )  . getImplementationClasspath (  )  . getAsURLs (  )  ,    moduleRegistry . getModule (  \" gradle - testing - junit - platform \"  )  . getImplementationClasspath (  )  . getAsURLs (  )  ,    moduleRegistry . getExternalModule (  \" junit - platform - engine \"  )  . getImplementationClasspath (  )  . getAsURLs (  )  ,    moduleRegistry . getExternalModule (  \" junit - platform - launcher \"  )  . getImplementationClasspath (  )  . getAsURLs (  )  ,    moduleRegistry . getExternalModule (  \" junit - platform - commons \"  )  . getImplementationClasspath (  )  . getAsURLs (  )  ,    moduleRegistry . getModule (  \" gradle - process - services \"  )  . getImplementationClasspath (  )  . getAsURLs (  )  ,    moduleRegistry . getExternalModule (  \" slf 4 j - api \"  )  . getImplementationClasspath (  )  . getAsURLs (  )  ,    moduleRegistry . getExternalModule (  \" jul - to - slf 4 j \"  )  . getImplementationClasspath (  )  . getAsURLs (  )  ,    moduleRegistry . getExternalModule (  \" native - platform \"  )  . getImplementationClasspath (  )  . getAsURLs (  )  ,    moduleRegistry . getExternalModule (  \" kryo \"  )  . getImplementationClasspath (  )  . getAsURLs (  )  ,    moduleRegistry . getExternalModule (  \" commons - lang \"  )  . getImplementationClasspath (  )  . getAsURLs (  )  ,    moduleRegistry . getExternalModule (  \" junit \"  )  . getImplementationClasspath (  )  . getAsURLs (  )  )  ;", "}", "METHOD_END"], "methodName": ["getTestWorkerImplementationClasspath"], "fileName": "org.gradle.api.internal.tasks.testing.worker.ForkingTestClassProcessor"}, {"methodBody": ["METHOD_START", "{", "BaseSerializerFactory   factory    =    new   BaseSerializerFactory (  )  ;", "DefaultSerializerRegistry   registry    =    new   DefaultSerializerRegistry (  )  ;", "registry . register ( DefaultTestClassRunInfo . class ,    new    . DefaultTestClassRunInfoSerializer (  )  )  ;", "registry . register ( CompositeId . class ,    new    . IdSerializer (  )  )  ;", "registry . register ( DefaultTestSuiteDescriptor . class ,    new    . DefaultTestSuiteDescriptorSerializer (  )  )  ;", "registry . register ( WorkerTestClassProcessor . WorkerTestSuiteDescriptor . class ,    new    . WorkerTestSuiteDescriptorSerializer (  )  )  ;", "registry . register ( DefaultTestClassDescriptor . class ,    new    . DefaultTestClassDescriptorSerializer (  )  )  ;", "registry . register ( DefaultTestMethodDescriptor . class ,    new    . DefaultTestMethodDescriptorSerializer (  )  )  ;", "registry . register ( DefaultTestDescriptor . class ,    new    . DefaultTestDescriptorSerializer (  )  )  ;", "registry . register ( TestStartEvent . class ,    new    . TestStartEventSerializer (  )  )  ;", "registry . register ( TestCompleteEvent . class ,    new    . TestCompleteEventSerializer (  )  )  ;", "registry . register ( DefaultTestOutputEvent . class ,    new    . DefaultTestOutputEventSerializer (  )  )  ;", "registry . register ( Throwable . class ,    factory . getSerializerFor ( Throwable . class )  )  ;", "return   registry ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.api.internal.tasks.testing.worker.TestEventSerializer"}, {"methodBody": ["METHOD_START", "{", "TestClassProcessor   targetProcessor    =    factory . create ( testServices )  ;", "IdGenerator < Object >    idGenerator    =    testServices . get ( IdGenerator . class )  ;", "targetProcessor    =    new   WorkerTestClassProcessor ( targetProcessor ,    idGenerator . generateId (  )  ,    ProcessContext . getDisplayName (  )  ,    testServices . get ( Clock . class )  )  ;", "ContextClassLoaderProxy < TestClassProcessor >    proxy    =    new   ContextClassLoaderProxy < TestClassProcessor >  ( TestClassProcessor . class ,    targetProcessor ,    ProcessContext . getApplicationClassLoader (  )  )  ;", "processor    =    proxy . getSource (  )  ;", "ObjectConnection   serverConnection    =    ProcessContext . getServerConnection (  )  ;", "serverConnection . useParameterSerializers ( TestEventSerializer . create (  )  )  ;", "this . resultProcessor    =    serverConnection . addOutgoing ( TestResultProcessor . class )  ;", "serverConnection . addIncoming ( RemoteTestClassProcessor . class ,    this )  ;", "serverConnection . connect (  )  ;", "}", "METHOD_END"], "methodName": ["startReceivingTests"], "fileName": "org.gradle.api.internal.tasks.testing.worker.TestWorker"}, {"methodBody": ["METHOD_START", "{", "testListenerBroadcaster . add ( listener )  ;", "}", "METHOD_END"], "methodName": ["addTestListener"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "testOutputListenerBroadcaster . add ( listener )  ;", "}", "METHOD_END"], "methodName": ["addTestOutputListener"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "testListenerBroadcaster . add ( new   ClosureBackedMethodInvocationDispatch (  \" afterSuite \"  ,    closure )  )  ;", "}", "METHOD_END"], "methodName": ["afterSuite"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "testListenerBroadcaster . add ( new   ClosureBackedMethodInvocationDispatch (  \" afterTest \"  ,    closure )  )  ;", "}", "METHOD_END"], "methodName": ["afterTest"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "testListenerBroadcaster . add ( new   ClosureBackedMethodInvocationDispatch (  \" beforeSuite \"  ,    closure )  )  ;", "}", "METHOD_END"], "methodName": ["beforeSuite"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "testListenerBroadcaster . add ( new   ClosureBackedMethodInvocationDispatch (  \" beforeTest \"  ,    closure )  )  ;", "}", "METHOD_END"], "methodName": ["beforeTest"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "return    \" No   tests   found   for   given   includes :     \"     +     ( Joiner . on (  '     '  )  . join ( getNoMatchingTestErrorReasons (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createNoMatchingTestErrorMessage"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "TestResultsProvider   testResultsProvider    =    new   InMemoryTestResultsProvider ( results . values (  )  ,    testOutputStore )  ;", "try    {", "if    (  ( testReporter )     =  =    null )     {", "testReporter    =    new   DefaulReport ( getBuildOperationExecutor (  )  )  ;", "}", "JUnitXmlReport   junitXml    =    reports . getJunitXml (  )  ;", "if    ( junitXml . isEnabled (  )  )     {", "TestOutputAssociation   outputAssociation    =     ( junitXml . isOutputPerTestCase (  )  )     ?    TestOutputAssociation . WITH _ TESTCASE    :    TestOutputAssociation . WITH _ SUITE ;", "Binary 2 JUnitXmlReportGenerator   binary 2 JUnitXmlReportGenerator    =    new   Binary 2 JUnitXmlReportGenerator ( junitXml . getDestination (  )  ,    testResultsProvider ,    outputAssociation ,    getBuildOperationExecutor (  )  ,    getInetAddressFactory (  )  . getHostname (  )  )  ;", "binary 2 JUnitXmlReportGenerator . generate (  )  ;", "}", "DirectoryReport   html    =    reports . getHtml (  )  ;", "if    (  !  ( html . isEnabled (  )  )  )     {", "getLogger (  )  . info (  \" Test   report   disabled ,    omitting   generation   of   the   HTML   test   report .  \"  )  ;", "} else    {", "testReporter . generateReport ( testResultsProvider ,    html . getDestination (  )  )  ;", "}", "}    finally    {", "CompositeStoppable . stoppable ( testResultsProvider )  . stop (  )  ;", "testReporter    =    null ;", "}", "}", "METHOD_END"], "methodName": ["createReporting"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "for    ( LogLevel   level    :    LogLevel . values (  )  )     {", "if    ( getLogger (  )  . isEnabled ( level )  )     {", "return   level ;", "}", "}", "throw   new   AssertionError (  \" could   not   determine   current   log   level \"  )  ;", "}", "METHOD_END"], "methodName": ["determineCurrentLogLevel"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getFilter (  )  . isFailOnNoMatchingTests (  )  )     &  &     (  (  !  ( getFilter (  )  . getIncludePatterns (  )  . isEmpty (  )  )  )     |  |     (  !  ( filter . getCommandLineIncludePatterns (  )  . isEmpty (  )  )  )  )  )     {", "addTestListener ( new   NoMatchingTestsReporter ( createNoMatchingTestErrorMessage (  )  )  )  ;", "}", "LogLevel   currentLevel    =    determineCurrentLogLevel (  )  ;", "TestLogging   levelLogging    =    getTestLogging (  )  . get ( currentLevel )  ;", "TestExceptionFormatter   exceptionFormatter    =    getExceptionFormatter ( levelLogging )  ;", "TestEventLogger   eventLogger    =    new   TestEventLogger ( getTextOutputFactory (  )  ,    currentLevel ,    levelLogging ,    exceptionFormatter )  ;", "addTestListener ( eventLogger )  ;", "addTestOutputListener ( eventLogger )  ;", "TestExecutionSpec   executionSpec    =    createTestExecutionSpec (  )  ;", "File   binaryResultsDir    =    getBinResultsDir (  )  ;", "getProject (  )  . delete ( binaryResultsDir )  ;", "getProject (  )  . mkdir ( binaryResultsDir )  ;", "Map < String ,    TestClassResult >    results    =    new   HashMap < String ,    TestClassResult >  (  )  ;", "TestOutputStore   testOutputStore    =    new   TestOutputStore ( binaryResultsDir )  ;", "TestOutputStore . Writer   outputWriter    =    testOutputStore . writer (  )  ;", "TestReportDataCollector   testReportDataCollector    =    new   TestReportDataCollector ( results ,    outputWriter )  ;", "addTestListener ( testReportDataCollector )  ;", "addTestOutputListener ( testReportDataCollector )  ;", "TestCountLogger   testCountLogger    =    new   TestCountLogger ( getProgressLoggerFactory (  )  )  ;", "addTestListener ( testCountLogger )  ;", "getTestListenerInternalBroadcaster (  )  . add ( new   TestListenerAdapter ( testListenerBroadcaster . getSource (  )  ,    getTestOutputListenerBroadcaster (  )  . getSource (  )  )  )  ;", "ProgressLogger   parentProgressLogger    =    getProgressLoggerFactory (  )  . newOperation (  . class )  ;", "parentProgressLogger . setDescription (  \" Test   Execution \"  )  ;", "parentProgressLogger . started (  )  ;", "TestWorkerProgressListener   testWorkerProgressListener    =    new   TestWorkerProgressListener ( getProgressLoggerFactory (  )  ,    parentProgressLogger )  ;", "getTestListenerInternalBroadcaster (  )  . add ( testWorkerProgressListener )  ;", "TestExecuter   testExecuter    =    createTestExecuter (  )  ;", "TestListenerInternal   resultProcessorDelegate    =    getTestListenerInternalBroadcaster (  )  . getSource (  )  ;", "if    ( failFast )     {", "resultProcessorDelegate    =    new   FailFastTestListenerInternal ( testExecuter ,    resultProcessorDelegate )  ;", "}", "TestResultProcessor   resultProcessor    =    new   StateTrackingTestResultProcessor ( resultProcessorDelegate )  ;", "try    {", "testExecuter . execute ( executionSpec ,    resultProcessor )  ;", "}    finally    {", "parentProgressLogger . completed (  )  ;", "testWorkerProgressListener . completeAll (  )  ;", "testListenerBroadcaster . removeAll (  )  ;", "getTestOutputListenerBroadcaster (  )  . removeAll (  )  ;", "getTestListenerInternalBroadcaster (  )  . removeAll (  )  ;", "outputWriter . close (  )  ;", "}", "new   TestResultSerializer ( binaryResultsDir )  . write ( results . values (  )  )  ;", "createReporting ( results ,    testOutputStore )  ;", "if    ( testCountLogger . hadFailures (  )  )     {", "handleTestFailures (  )  ;", "}", "}", "METHOD_END"], "methodName": ["executeTests"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "return   binaryResultsDirectory . getAsFile (  )  . getOrNull (  )  ;", "}", "METHOD_END"], "methodName": ["getBinResultsDir"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "return   binaryResultsDirectory ;", "}", "METHOD_END"], "methodName": ["getBinaryResultsDirectory"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getBuildOperationExecutor"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "switch    ( testLogging . getExceptionFormat (  )  )     {", "case   SHORT    :", "return   new   ShortExceptionFormatter ( testLogging )  ;", "case   FULL    :", "return   new   FullExceptionFormatter ( testLogging )  ;", "default    :", "throw   new   AssertionError (  )  ;", "}", "}", "METHOD_END"], "methodName": ["getExceptionFormatter"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "return   failFast ;", "}", "METHOD_END"], "methodName": ["getFailFast"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "return   filter ;", "}", "METHOD_END"], "methodName": ["getFilter"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "return   ignoreFailures ;", "}", "METHOD_END"], "methodName": ["getIgnoreFailures"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getInetAddressFactory"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getInstantiator"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getListenerManager"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "List < String >    reasons    =    Lists . newArrayList (  )  ;", "if    (  !  ( getFilter (  )  . getIncludePatterns (  )  . isEmpty (  )  )  )     {", "reasons . add (  (  ( getFilter (  )  . getIncludePatterns (  )  )     +     \"  ( filter . includesMatching )  \"  )  )  ;", "}", "if    (  !  ( filter . getCommandLineIncludePatterns (  )  . isEmpty (  )  )  )     {", "reasons . add (  (  ( filter . getCommandLineIncludePatterns (  )  )     +     \"  (  -  - tests   filter )  \"  )  )  ;", "}", "return   reasons ;", "}", "METHOD_END"], "methodName": ["getNoMatchingTestErrorReasons"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getProgressLoggerFactory"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "return   reports ;", "}", "METHOD_END"], "methodName": ["getReports"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "return   testListenerInternalBroadcaster ;", "}", "METHOD_END"], "methodName": ["getTestListenerInternalBroadcaster"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "return   testLogging ;", "}", "METHOD_END"], "methodName": ["getTestLogging"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "return   testOutputListenerBroadcaster ;", "}", "METHOD_END"], "methodName": ["getTestOutputListenerBroadcaster"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getTextOutputFactory"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "String   message    =     \" There   were   failing   tests \"  ;", "DirectoryReport   htmlReport    =    getReports (  )  . getHtml (  )  ;", "if    ( htmlReport . isEnabled (  )  )     {", "String   reportUrl    =    new   ConsoleRenderer (  )  . asClickableFileUrl ( htmlReport . getEntryPoint (  )  )  ;", "message    =    message . concat (  (  \"  .    See   the   report   at :     \"     +    reportUrl )  )  ;", "} else    {", "DirectoryReport   junitXmlReport    =    getReports (  )  . getJunitXml (  )  ;", "if    ( junitXmlReport . isEnabled (  )  )     {", "String   resultsUrl    =    new   ConsoleRenderer (  )  . asClickableFileUrl ( junitXmlReport . getEntryPoint (  )  )  ;", "message    =    message . concat (  (  \"  .    See   the   results   at :     \"     +    resultsUrl )  )  ;", "}", "}", "if    ( getIgnoreFailures (  )  )     {", "getLogger (  )  . warn ( message )  ;", "} else    {", "throw   new   GException ( message )  ;", "}", "}", "METHOD_END"], "methodName": ["handleTestFailures"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "testOutputListenerBroadcaster . add ( new   ClosureBackedMethodInvocationDispatch (  \" onOutput \"  ,    closure )  )  ;", "}", "METHOD_END"], "methodName": ["onOutput"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "testListenerBroadcaster . remove ( listener )  ;", "}", "METHOD_END"], "methodName": ["removeTestListener"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "testOutputListenerBroadcaster . remove ( listener )  ;", "}", "METHOD_END"], "methodName": ["removeTestOutputListener"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "return   reports ( new   ClosureBackedAction < TestTaskReports >  ( closure )  )  ;", "}", "METHOD_END"], "methodName": ["reports"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "configureAction . execute ( reports )  ;", "return   reports ;", "}", "METHOD_END"], "methodName": ["reports"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "this . binaryResultsDirectory . set ( binResultsDir )  ;", "}", "METHOD_END"], "methodName": ["setBinResultsDir"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "this . failFast    =    failFast ;", "}", "METHOD_END"], "methodName": ["setFailFast"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "this . ignoreFailures    =    ignoreFailures ;", "}", "METHOD_END"], "methodName": ["setIgnoreFailures"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "filter . setCommandLineIncludePatterns ( testNamePattern )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setTestNameIncludePatterns"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "this . testReporter    =    testReporter ;", "}", "METHOD_END"], "methodName": ["setTestReporter"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "ConfigureUtil . configure ( closure ,    testLogging )  ;", "}", "METHOD_END"], "methodName": ["testLogging"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "action . execute ( testLogging )  ;", "}", "METHOD_END"], "methodName": ["testLogging"], "fileName": "org.gradle.api.tasks.testing.AbstractTestTask"}, {"methodBody": ["METHOD_START", "{", "DirectoryProperty   baseDirectory    =    project . getExtensions (  )  . getByType ( ReportingExtension . class )  . getBaseDirectory (  )  ;", "return   baseDirectory . dir (  (  (  (  . TESTS _ DIR _ NAME )     +     \"  /  \"  )     +     ( test . getName (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getTestReportsDir"], "fileName": "org.gradle.testing.base.plugins.TestingBasePlugin"}, {"methodBody": ["METHOD_START", "{", "return   project . getLayout (  )  . getBuildDirectory (  )  . dir (  (  (  ( TestingBasePlugin . TEST _ RESULTS _ DIR _ NAME )     +     \"  /  \"  )     +     ( test . getName (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getTestResultsDir"], "fileName": "org.gradle.testing.base.plugins.TestingBasePlugin"}]