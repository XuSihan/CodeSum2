[{"methodBody": ["METHOD_START", "{", "return   String . format (  \" https :  /  / docs . gradle . org /  % s / userguide /  % s . html \"  ,    gradleVersion . getVersion (  )  ,    id )  ;", "}", "METHOD_END"], "methodName": ["getDocumentationFor"], "fileName": "org.gradle.api.internal.DocumentationRegistry"}, {"methodBody": ["METHOD_START", "{", "return   String . format (  \" https :  /  / docs . gradle . org /  % s / userguide /  % s . html #  % s \"  ,    gradleVersion . getVersion (  )  ,    id ,    section )  ;", "}", "METHOD_END"], "methodName": ["getDocumentationFor"], "fileName": "org.gradle.api.internal.DocumentationRegistry"}, {"methodBody": ["METHOD_START", "{", "String   className    =    clazz . getName (  )  ;", "return   String . format (  \" https :  /  / docsorg /  % s / dsl /  % s . html #  % s :  % s \"  , ersion . getVersion (  )  ,    className ,    className ,    property )  ;", "}", "METHOD_END"], "methodName": ["getDslRefForProperty"], "fileName": "org.gradle.api.internal.DocumentationRegistry"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Logger )     ( LoggerFactory . getLogger ( c )  )  )  ;", "}", "METHOD_END"], "methodName": ["getLogger"], "fileName": "org.gradle.api.logging.Logging"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Logger )     ( LoggerFactory . getLogger ( name )  )  )  ;", "}", "METHOD_END"], "methodName": ["getLogger"], "fileName": "org.gradle.api.logging.Logging"}, {"methodBody": ["METHOD_START", "{", "logging . attachListener (  )  ;", "}", "METHOD_END"], "methodName": ["attachListener"], "fileName": "org.gradle.api.logging.LoggingTest"}, {"methodBody": ["METHOD_START", "{", "logging . setLevel ( LogLevel . WARN )  ;", "Logger   logger    =    Logging . getLogger (  . class )  ;", "assertTrue ( logger . isErrorEnabled (  )  )  ;", "assertTrue ( logger . isQuietEnabled (  )  )  ;", "assertTrue ( logger . isWarnEnabled (  )  )  ;", "assertFalse ( logger . isLifecycleEnabled (  )  )  ;", "assertFalse ( logger . isInfoEnabled (  )  )  ;", "assertFalse ( logger . isDebugEnabled (  )  )  ;", "assertFalse ( logger . isTraceEnabled (  )  )  ;", "assertTrue ( logger . isEnabled ( LogLevel . ERROR )  )  ;", "assertFalse ( logger . isEnabled ( LogLevel . INFO )  )  ;", "}", "METHOD_END"], "methodName": ["delegatesLevelIsEnabledToSlf4j"], "fileName": "org.gradle.api.logging.LoggingTest"}, {"methodBody": ["METHOD_START", "{", "final   Matcher < LogEvent >    matcher    =    new   BaseMatcher < LogEvent >  (  )     {", "public   void   describeTo ( Description   description )     {", "description . appendText (  \" level :     \"  )  . appendValue ( level )  . appendText (  \"  ,    text :  \"  )  . appendValue ( text )  ;", "}", "public   boolean   matches ( Object   o )     {", "LogEvent   event    =     (  ( LogEvent )     ( o )  )  ;", "return    (  ( event . getLogLevel (  )  )     =  =    level )     &  &     ( event . getMessage (  )  . equals ( text )  )  ;", "}", "}  ;", "context . checking ( new   Expectations (  )     {", "{", "one ( outputEventListener )  . onOutput ( with ( matcher )  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["expectLogMessage"], "fileName": "org.gradle.api.logging.LoggingTest"}, {"methodBody": ["METHOD_START", "{", "Logger   logger    =    Logging . getLogger ( LoggingTest . class )  ;", "context . checking ( new   Expectations (  )     {", "{", "never ( outputEventListener )  ;", "}", "}  )  ;", "logger . trace (  \" trace \"  )  ;", "}", "METHOD_END"], "methodName": ["ignoresTraceLevelLogging"], "fileName": "org.gradle.api.logging.LoggingTest"}, {"methodBody": ["METHOD_START", "{", "logging . resetLogging (  )  ;", "}", "METHOD_END"], "methodName": ["resetLogging"], "fileName": "org.gradle.api.logging.LoggingTest"}, {"methodBody": ["METHOD_START", "{", "Logger   logger    =    Logging . getLogger ( LoggingTest . class )  ;", "expectLogMessage ( LogLevel . DEBUG ,     \" debug \"  )  ;", "logger . debug (  \" debug \"  )  ;", "expectLogMessage ( LogLevel . INFO ,     \" info \"  )  ;", "logger . info (  \" info \"  )  ;", "expectLogMessage ( LogLevel . WARN ,     \" warn \"  )  ;", "logger . warn (  \" warn \"  )  ;", "expectLogMessage ( LogLevel . LIFECYCLE ,     \" lifecycle \"  )  ;", "logger . lifecycle (  \" lifecycle \"  )  ;", "expectLogMessage ( LogLevel . ERROR ,     \" error \"  )  ;", "logger . error (  \" error \"  )  ;", "expectLogMessage ( LogLevel . QUIET ,     \" quiet \"  )  ;", "logger . quiet (  \" quiet \"  )  ;", "expectLogMessage ( LogLevel . LIFECYCLE ,     \" lifecycle   via   level \"  )  ;", "logger . log ( LogLevel . LIFECYCLE ,     \" lifecycle   via   level \"  )  ;", "}", "METHOD_END"], "methodName": ["routesLogMessagesViaSlf4j"], "fileName": "org.gradle.api.logging.LoggingTest"}, {"methodBody": ["METHOD_START", "{", "return   message ;", "}", "METHOD_END"], "methodName": ["getMessage"], "fileName": "org.gradle.internal.featurelifecycle.FeatureUsage"}, {"methodBody": ["METHOD_START", "{", "return   stack ;", "}", "METHOD_END"], "methodName": ["getStack"], "fileName": "org.gradle.internal.featurelifecycle.FeatureUsage"}, {"methodBody": ["METHOD_START", "{", "for    (  ;    caller    <     ( stackTrace . length )  ;    caller +  +  )     {", "String   currentClassName    =    stackTrace [ caller ]  . getClassName (  )  ;", "if    (  (  (  (  (  !  ( currentClassName . startsWith (  \" \"  )  )  )     &  &     (  !  ( currentClassName . startsWith (  \" metaobject .  \"  )  )  )  )     &  &     (  !  ( currentClassName . startsWith (  \" groovy .  \"  )  )  )  )     &  &     (  !  ( currentClassName . startsWith (  \" \"  )  )  )  )     &  &     (  !  ( currentClassName . startsWith (  \" jdk . internal .  \"  )  )  )  )     {", "break ;", "}", "}", "return   caller ;", "}", "METHOD_END"], "methodName": ["skipSystemStackElements"], "fileName": "org.gradle.internal.featurelifecycle.FeatureUsage"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( stack . isEmpty (  )  )  )     {", "return   this ;", "}", "StackTraceElement [  ]    originalStack    =    new   Exception (  )  . getStackTrace (  )  ;", "final   String   calledFromName    =    calledFrom . getName (  )  ;", "boolean   calledFromFound    =    false ;", "int   caller ;", "for    ( caller    =     0  ;    caller    <     ( originalStack . length )  ;    caller +  +  )     {", "StackTraceElement   current    =    originalStack [ caller ]  ;", "if    (  ! calledFromFound )     {", "if    ( current . getClassName (  )  . startsWith ( calledFromName )  )     {", "calledFromFound    =    true ;", "}", "} else    {", "if    (  !  ( current . getClassName (  )  . startsWith ( calledFromName )  )  )     {", "break ;", "}", "}", "}", "caller    =     . skipSystemStackElements ( originalStack ,    caller )  ;", "List < StackTraceElement >    result    =    new   ArrayList < StackTraceElement >  (  )  ;", "for    (  ;    caller    <     ( originalStack . length )  ;    caller +  +  )     {", "result . add ( originalStack [ caller ]  )  ;", "}", "return   new    ( this ,    result )  ;", "}", "METHOD_END"], "methodName": ["withStackTrace"], "fileName": "org.gradle.internal.featurelifecycle.FeatureUsage"}, {"methodBody": ["METHOD_START", "{", "message . append ( lineSeparator )  ;", "message . append (  . RUN _ WITH _ STACKTRACE _ INFO )  ;", "}", "METHOD_END"], "methodName": ["appendRunWithStacktraceInfo"], "fileName": "org.gradle.internal.featurelifecycle.LoggingDeprecatedFeatureHandler"}, {"methodBody": ["METHOD_START", "{", "message . append ( lineSeparator )  ;", "message . append (  . ELEMENT _ PREFIX )  ;", "message . append ( frame . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["appendStackTraceElement"], "fileName": "org.gradle.internal.featurelifecycle.LoggingDeprecatedFeatureHandler"}, {"methodBody": ["METHOD_START", "{", "if    (  ( LoggingDeprecatedFeatureHandler . deprecationMessage )     =  =    null )     {", "LoggingDeprecatedFeatureHandler . deprecationMessage    =    LoggingDeprecatedFeatureHandler . initDeprecationMessage (  )  ;", "}", "return   LoggingDeprecatedFeatureHandler . deprecationMessage ;", "}", "METHOD_END"], "methodName": ["getDeprecationMessage"], "fileName": "org.gradle.internal.featurelifecycle.LoggingDeprecatedFeatureHandler"}, {"methodBody": ["METHOD_START", "{", "this . locationReporter    =    reporter ;", "this . warningMode    =    warningMode ;", "}", "METHOD_END"], "methodName": ["init"], "fileName": "org.gradle.internal.featurelifecycle.LoggingDeprecatedFeatureHandler"}, {"methodBody": ["METHOD_START", "{", "String   messageBase    =     \" has   been   deprecated   and   is   scheduled   to   be   removed   in \"  ;", "String   when    =    String . format (  \" Gradle    % s \"  ,    GradleVersion . current (  )  . getNextMajor (  )  . getVersion (  )  )  ;", "return   String . format (  \"  % s    % s \"  ,    messageBase ,    when )  ;", "}", "METHOD_END"], "methodName": ["initDeprecationMessage"], "fileName": "org.gradle.internal.featurelifecycle.LoggingDeprecatedFeatureHandler"}, {"methodBody": ["METHOD_START", "{", "String   fileName    =    element . getFileName (  )  ;", "if    ( fileName    =  =    null )     {", "return   false ;", "}", "fileName    =    fileName . toLowerCase ( Locale . US )  ;", "if    (  ( fileName . endsWith (  \"  )  )     |  |     ( fileName . endsWith (  \" kts \"  )  )  )     {", "return   true ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isGradleScriptElement"], "fileName": "org.gradle.internal.featurelifecycle.LoggingDeprecatedFeatureHandler"}, {"methodBody": ["METHOD_START", "{", "String   value    =    System . getProperty ( LoggingDeprecatedFeatureHandler . ORG _ GRADLE _ DEPRECATION _ TRACE _ PROPERTY _ NAME )  ;", "if    ( value    =  =    null )     {", "return   LoggingDeprecatedFeatureHandler . traceLoggingEnabled ;", "}", "return   Boolean . parseBoolean ( value )  ;", "}", "METHOD_END"], "methodName": ["isTraceLoggingEnabled"], "fileName": "org.gradle.internal.featurelifecycle.LoggingDeprecatedFeatureHandler"}, {"methodBody": ["METHOD_START", "{", "final   String   lineSeparator    =    SystemProperties . getInstance (  )  . getLineSeparator (  )  ;", "if    (  . isTraceLoggingEnabled (  )  )     {", "for    ( StackTraceElement   frame    :    stack )     {", ". appendStackTraceElement ( frame ,    message ,    lineSeparator )  ;", "}", "return ;", "}", "for    ( StackTraceElement   element    :    stack )     {", "if    (  . isGradleScriptElement ( element )  )     {", ". appendStackTraceElement ( element ,    message ,    lineSeparator )  ;", ". appendRunWithStacktraceInfo ( message ,    lineSeparator )  ;", "return ;", "}", "}", "}", "METHOD_END"], "methodName": ["logTraceIfNecessary"], "fileName": "org.gradle.internal.featurelifecycle.LoggingDeprecatedFeatureHandler"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( warningMode )     =  =     ( WarningMode . Summary )  )     &  &     (  !  ( messages . isEmpty (  )  )  )  )     {", ". LOGGER . warn (  \"  \\ n {  }     {  }  .  \\ n {  }     {  }  \"  ,     . WARNING _ SUMMARY ,    GradleVersion . current (  )  . getNextMajor (  )  . getVersion (  )  ,     . WARNING _ LOGGING _ DOCS _ MESSAGE ,     . DOCUMENTATION _ REGISTRY . getDocumentationFor (  \" command _ line _ interface \"  ,     \" sec : command _ line _ warnings \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["reportSuppressedDeprecations"], "fileName": "org.gradle.internal.featurelifecycle.LoggingDeprecatedFeatureHandler"}, {"methodBody": ["METHOD_START", "{", "messages . clear (  )  ;", "}", "METHOD_END"], "methodName": ["reset"], "fileName": "org.gradle.internal.featurelifecycle.LoggingDeprecatedFeatureHandler"}, {"methodBody": ["METHOD_START", "{", "LoggingDeprecatedFeatureHandler . traceLoggingEnabled    =    traceLoggingEnabled ;", "}", "METHOD_END"], "methodName": ["setTraceLoggingEnabled"], "fileName": "org.gradle.internal.featurelifecycle.LoggingDeprecatedFeatureHandler"}, {"methodBody": ["METHOD_START", "{", "features . clear (  )  ;", "}", "METHOD_END"], "methodName": ["reset"], "fileName": "org.gradle.internal.featurelifecycle.LoggingIncubatingFeatureHandler"}, {"methodBody": ["METHOD_START", "{", "return   SimulatedDeprecationMessageLogger . nagUserWith ( message )  ;", "}", "METHOD_END"], "methodName": ["indirectly"], "fileName": "org.gradle.internal.featurelifecycle.SimulatedDeprecationMessageLogger"}, {"methodBody": ["METHOD_START", "{", "return   SimulatedDeprecationMessageLogger . indirectly ( message )  ;", "}", "METHOD_END"], "methodName": ["indirectlySecondLevel"], "fileName": "org.gradle.internal.featurelifecycle.SimulatedDeprecationMessageLogger"}, {"methodBody": ["METHOD_START", "{", "return   new   FeatureUsage ( message ,    SimulatedDeprecationMessageLogger . class )  . withStackTrace (  )  ;", "}", "METHOD_END"], "methodName": ["nagUserWith"], "fileName": "org.gradle.internal.featurelifecycle.SimulatedDeprecationMessageLogger"}, {"methodBody": ["METHOD_START", "{", "return   SimulatedDeprecationMessageLogger . nagUserWith ( SimulatedDeprecationMessageLogger . DIRECT _ CALL )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.internal.featurelifecycle.SimulatedJavaCallLocation"}, {"methodBody": ["METHOD_START", "{", "return   SimulatedDeprecationMessageLogger . indirectly ( SimulatedDeprecationMessageLogger . INDIRECT _ CALL )  ;", "}", "METHOD_END"], "methodName": ["indirectly"], "fileName": "org.gradle.internal.featurelifecycle.SimulatedJavaCallLocation"}, {"methodBody": ["METHOD_START", "{", "return   SimulatedDeprecationMessageLogger . indirectlySecondLevel ( SimulatedDeprecationMessageLogger . INDIRECT _ CALL _  2  )  ;", "}", "METHOD_END"], "methodName": ["indirectly2"], "fileName": "org.gradle.internal.featurelifecycle.SimulatedJavaCallLocation"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   new   URI (  \" file \"  ,     \"  \"  ,    path . toURI (  )  . getPath (  )  ,    null ,    null )  . toStr (  )  ;", "}    catch    ( URISyntaxException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["asClickableFileUrl"], "fileName": "org.gradle.internal.logging.ConsoleRenderer"}, {"methodBody": ["METHOD_START", "{", "return   EqualsBuilder . reflectionEquals ( this ,    obj )  ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.gradle.internal.logging.DefaultLoggingConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   HashCodeBuilder . reflectionHashCode ( this )  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.gradle.internal.logging.DefaultLoggingConfiguration"}, {"methodBody": ["METHOD_START", "{", "for    ( BuildOption < LoggingConfiguration >    option    :    buildOptions )     {", "option . configure ( parser )  ;", "}", "}", "METHOD_END"], "methodName": ["configure"], "fileName": "org.gradle.internal.logging.LoggingCommandLineConverter"}, {"methodBody": ["METHOD_START", "{", "for    ( BuildOption < LoggingConfiguration >    option    :    buildOptions )     {", "option . applyFrom ( commandLine ,    loggingConfiguration )  ;", "}", "return   loggingConfiguration ;", "}", "METHOD_END"], "methodName": ["convert"], "fileName": "org.gradle.internal.logging.LoggingCommandLineConverter"}, {"methodBody": ["METHOD_START", "{", "return   logLevelMap . keySet (  )  ;", "}", "METHOD_END"], "methodName": ["getLogLevelOptions"], "fileName": "org.gradle.internal.logging.LoggingCommandLineConverter"}, {"methodBody": ["METHOD_START", "{", "return   new   HashSet < LogLevel >  ( Arrays . asList ( LogLevel . DEBUG ,    LogLevel . INFO ,    LogLevel . LIFECYCLE ,    LogLevel . QUIET ,    LogLevel . WARN )  )  ;", "}", "METHOD_END"], "methodName": ["getLogLevels"], "fileName": "org.gradle.internal.logging.LoggingCommandLineConverter"}, {"methodBody": ["METHOD_START", "{", "return   LoggingConfigurationBuildOptions . options ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "org.gradle.internal.logging.LoggingConfigurationBuildOptions"}, {"methodBody": ["METHOD_START", "{", "LoggingSystemAdapter . SnapshotImpl   snapshot    =     (  ( LoggingSystemAdapter . SnapshotImpl )     ( state )  )  ;", "logLevel    =    snapshot . level ;", "enabled    =    snapshot . enabled ;", "configurer . configure ( logLevel )  ;", "}", "METHOD_END"], "methodName": ["restore"], "fileName": "org.gradle.internal.logging.config.LoggingSystemAdapter"}, {"methodBody": ["METHOD_START", "{", "return   new   LoggingSystemAdapter . SnapshotImpl ( enabled ,    logLevel )  ;", "}", "METHOD_END"], "methodName": ["snapshot"], "fileName": "org.gradle.internal.logging.config.LoggingSystemAdapter"}, {"methodBody": ["METHOD_START", "{", "return   eventQueue ;", "}", "METHOD_END"], "methodName": ["getEventQueue"], "fileName": "org.gradle.internal.logging.console.AbstractUserInputRenderer"}, {"methodBody": ["METHOD_START", "{", "startInput ( prompt )  ;", "paused    =    true ;", "}", "METHOD_END"], "methodName": ["handleUserInputRequestEvent"], "fileName": "org.gradle.internal.logging.console.AbstractUserInputRenderer"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( paused )  )     {", "throw   new   IllegalStateException (  \" Cannot   resume   user   input   if   not   paused   yet \"  )  ;", "}", "paused    =    false ;", "finish (  )  ;", "replayEvents (  )  ;", "}", "METHOD_END"], "methodName": ["handleUserInputResumeEvent"], "fileName": "org.gradle.internal.logging.console.AbstractUserInputRenderer"}, {"methodBody": ["METHOD_START", "{", "ListIterator < OutputEvent >    iterator    =    eventQueue . listIterator (  )  ;", "while    ( iterator . hasNext (  )  )     {", "delegate . onOutput ( iterator . next (  )  )  ;", "iterator . remove (  )  ;", "}", "}", "METHOD_END"], "methodName": ["replayEvents"], "fileName": "org.gradle.internal.logging.console.AbstractUserInputRenderer"}, {"methodBody": ["METHOD_START", "{", "int   numberOfOverlappedRows    =     ( buildStatusArea . getWritePosition (  )  . row )     -     ( buildOutputArea . getWritePosition (  )  . row )  ;", "if    (  ( buildOutputArea . getWritePosition (  )  . col )     >     0  )     {", "numberOfOverlappedRows +  +  ;", "}", "if    ( numberOfOverlappedRows    >     0  )     {", "buildStatusArea . scrollDownBy ( numberOfOverlappedRows )  ;", "}", "ansiExecutor . write ( redrawAction )  ;", "}", "METHOD_END"], "methodName": ["redraw"], "fileName": "org.gradle.internal.logging.console.AnsiConsole"}, {"methodBody": ["METHOD_START", "{", "return    ( progressOpId . getId (  )  )     =  =     ( currentPhaseProgressOperationId )  ;", "}", "METHOD_END"], "methodName": ["isPhaseProgressEvent"], "fileName": "org.gradle.internal.logging.console.BuildStatusRenderer"}, {"methodBody": ["METHOD_START", "{", "return   new   ProgressBar ( BuildStatusRenderer . PROGRESS _ BAR _ PREFIX ,    BuildStatusRenderer . PROGRESS _ BAR _ WIDTH ,    BuildStatusRenderer . PROGRESS _ BAR _ SUFFIX ,    BuildStatusRenderer . PROGRESS _ BAR _ COMPLETE _ CHAR ,    BuildStatusRenderer . PROGRESS _ BAR _ INCOMPLETE _ CHAR ,    initialSuffix ,    initialProgress ,    totalProgress )  ;", "}", "METHOD_END"], "methodName": ["newProgressBar"], "fileName": "org.gradle.internal.logging.console.BuildStatusRenderer"}, {"methodBody": ["METHOD_START", "{", "progressBar    =    newProgressBar ( progressCompleteEvent . getStatus (  )  ,     0  ,     1  )  ;", "timerEnabled    =    false ;", "}", "METHOD_END"], "methodName": ["phaseEnded"], "fileName": "org.gradle.internal.logging.console.BuildStatusRenderer"}, {"methodBody": ["METHOD_START", "{", "if    (  ( progressBar )     !  =    null )     {", "progressBar . update ( progressEvent . isFail (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["phaseProgressed"], "fileName": "org.gradle.internal.logging.console.BuildStatusRenderer"}, {"methodBody": ["METHOD_START", "{", "timerEnabled    =    true ;", "currentPhaseProgressOperationId    =    progressrtEvent . getProgressOperationId (  )  . getId (  )  ;", "progressBar    =    newProgressBar ( progressrtEvent . getShortDescription (  )  ,     0  ,    progressrtEvent . getTotalProgress (  )  )  ;", "}", "METHOD_END"], "methodName": ["phaseStarted"], "fileName": "org.gradle.internal.logging.console.BuildStatusRenderer"}, {"methodBody": ["METHOD_START", "{", "if    (  ( progressBar )     !  =    null )     {", "bLabel . setText ( progressBar . formatProgress ( consoleMetaData . getCols (  )  ,    timerEnabled ,     ( now    -     ( buildStartTimestamp )  )  )  )  ;", "}", "console . flush (  )  ;", "}", "METHOD_END"], "methodName": ["renderNow"], "fileName": "org.gradle.internal.logging.console.BuildStatusRenderer"}, {"methodBody": ["METHOD_START", "{", "if    (  ( maximumAvailableLines )     =  =     (  -  1  )  )     {", "int   rows    =    MetaData . getRows (  )  ;", "maximumAvailableLines    =     ( rows    =  =     0  )     ?     4     :    rows    /     2  ;", "}", "return   Math . min ( ideal ,    maximumAvailableLines )  ;", "}", "METHOD_END"], "methodName": ["calculateNumWorkersForConsoleDisplay"], "fileName": "org.gradle.internal.logging.console.ConsoleLayoutCalculator"}, {"methodBody": ["METHOD_START", "{", "Cursor   result    =    new   Cursor (  )  ;", "result . row    =    row ;", "result . col    =    col ;", "return   result ;", "}", "METHOD_END"], "methodName": ["at"], "fileName": "org.gradle.internal.logging.console.Cursor"}, {"methodBody": ["METHOD_START", "{", "col    =     0  ;", "row    =     0  ;", "}", "METHOD_END"], "methodName": ["bottomLeft"], "fileName": "org.gradle.internal.logging.console.Cursor"}, {"methodBody": ["METHOD_START", "{", "if    ( position    =  =     ( this )  )     {", "return ;", "}", "thisl    =    positionl ;", "this . row    =    position . row ;", "}", "METHOD_END"], "methodName": ["copyFrom"], "fileName": "org.gradle.internal.logging.console.Cursor"}, {"methodBody": ["METHOD_START", "{", "Cursor   result    =    new   Cursor (  )  ;", "result . copyFrom ( position )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["from"], "fileName": "org.gradle.internal.logging.console.Cursor"}, {"methodBody": ["METHOD_START", "{", "Cursor   result    =    new   Cursor (  )  ;", "result . bottomLeft (  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["newBottomLeft"], "fileName": "org.gradle.internal.logging.console.Cursor"}, {"methodBody": ["METHOD_START", "{", "writeCursor . col    +  =    count ;", "cursor . copyFrom ( writeCursor )  ;", "}", "METHOD_END"], "methodName": ["charactersWritten"], "fileName": "org.gradle.internal.logging.console.DefaultAnsiExecutor"}, {"methodBody": ["METHOD_START", "{", "writeCursor . col    =     0  ;", "if    (  ( writeCursor . row )     >     0  )     {", "( writeCursor . row )  -  -  ;", "} else    {", "writeCursor . row    =     0  ;", "}", "cursor . copyFrom ( writeCursor )  ;", "}", "METHOD_END"], "methodName": ["newLineWritten"], "fileName": "org.gradle.internal.logging.console.DefaultAnsiExecutor"}, {"methodBody": ["METHOD_START", "{", "if    (  ( writeCursor . row )     =  =     ( position . row )  )     {", "if    (  ( writeCursorl )     =  =     ( positionl )  )     {", "return ;", "}", "if    (  ( writeCursorl )     <     ( positionl )  )     {", "ansi . cursorRight (  (  ( positionl )     -     ( writeCursorl )  )  )  ;", "} else    {", "ansi . cursorLeft (  (  ( writeCursorl )     -     ( positionl )  )  )  ;", "}", "} else    {", "if    (  ( writeCursorl )     >     0  )     {", "ansi . cursorLeft ( writeCursorl )  ;", "}", "if    (  ( writeCursor . row )     <     ( position . row )  )     {", "ansi . cursorUp (  (  ( position . row )     -     ( writeCursor . row )  )  )  ;", "} else    {", "ansi . cursorDown (  (  ( writeCursor . row )     -     ( position . row )  )  )  ;", "}", "if    (  ( positionl )     >     0  )     {", "ansi . cursorRight ( positionl )  ;", "}", "}", "writeCursorpyFrom ( position )  ;", "}", "METHOD_END"], "methodName": ["positionCursorAt"], "fileName": "org.gradle.internal.logging.console.DefaultAnsiExecutor"}, {"methodBody": ["METHOD_START", "{", "try    {", "target . append ( a . toString (  )  )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["write"], "fileName": "org.gradle.internal.logging.console.DefaultAnsiExecutor"}, {"methodBody": ["METHOD_START", "{", "defaults . put ( style ,    color )  ;", "}", "METHOD_END"], "methodName": ["addDefault"], "fileName": "org.gradle.internal.logging.console.DefaultColorMap"}, {"methodBody": ["METHOD_START", "{", "addDefault ( style . name (  )  . toLowerCase (  )  ,    colorSpec )  ;", "}", "METHOD_END"], "methodName": ["addDefault"], "fileName": "org.gradle.internal.logging.console.DefaultColorMap"}, {"methodBody": ["METHOD_START", "{", "String   colorSpec    =    getColorSpecForStyle ( styles [  0  ]  )  ;", "for    ( int   i    =     1  ;    i    <     ( styles . length )  ;    i +  +  )     {", "colorSpec    +  =     (  . COLOR _ DIVIDER )     +     ( getColorSpecForStyle ( styles [ i ]  )  )  ;", "}", "addDefault ( style . name (  )  . toLowerCase (  )  ,    colorSpec )  ;", "}", "METHOD_END"], "methodName": ["addDefault"], "fileName": "org.gradle.internal.logging.console.DefaultColorMap"}, {"methodBody": ["METHOD_START", "{", "String   colorSpec    =    getColorSpecForStyle ( style )  ;", ". Color   color    =    noDecoration ;", "if    ( colorSpec    !  =    null )     {", "color    =    createColorFromSpec ( colorSpec )  ;", "colorBySpec . put ( colorSpec ,    color )  ;", "}", "return   color ;", "}", "METHOD_END"], "methodName": ["createColor"], "fileName": "org.gradle.internal.logging.console.DefaultColorMap"}, {"methodBody": ["METHOD_START", "{", "ColorMap . Color   cachedColor    =    colorBySpec . get ( colorSpec )  ;", "if    ( cachedColor    !  =    null )     {", "return   cachedColor ;", "}", "if    ( colorSpec . equalsIgnoreCase (  . BOLD )  )     {", "return    . newBoldColor (  )  ;", "}", "if    ( colorSpec . equalsIgnoreCase (  \" reverse \"  )  )     {", "return    . newReverseColor (  )  ;", "}", "if    ( colorSpec . equalsIgnoreCase (  \" italic \"  )  )     {", "return    . newItalicColor (  )  ;", "}", "if    ( colorSpec . contains (  \"  -  \"  )  )     {", "String [  ]    colors    =    colorSpec . split (  \"  -  \"  )  ;", "ArrayList < ColorMap . Color >    colorList    =    new   ArrayList ( colors . length )  ;", "for    ( String   color    :    colors )     {", "colorList . add ( createColorFromSpec ( color )  )  ;", "}", "return   new    . CompositeColor ( colorList )  ;", "}", "Ansi . Color   ansiColor    =    Color . valueOf ( colorSpec . toUpperCase (  )  )  ;", "if    ( ansiColor    !  =     ( DEFAULT )  )     {", "return   new    . ForegroundColor ( ansiColor )  ;", "}", "return   noDecoration ;", "}", "METHOD_END"], "methodName": ["createColorFromSpec"], "fileName": "org.gradle.internal.logging.console.DefaultColorMap"}, {"methodBody": ["METHOD_START", "{", "ColorMap . Color   color    =    colorByStyle . get ( style )  ;", "if    ( color    =  =    null )     {", "color    =    createColor ( style )  ;", "colorByStyle . put ( style ,    color )  ;", "}", "return   color ;", "}", "METHOD_END"], "methodName": ["getColor"], "fileName": "org.gradle.internal.logging.console.DefaultColorMap"}, {"methodBody": ["METHOD_START", "{", "return   System . getProperty (  (  \" \"     +    style )  ,    defaults . get ( style )  )  ;", "}", "METHOD_END"], "methodName": ["getColorSpecForStyle"], "fileName": "org.gradle.internal.logging.console.DefaultColorMap"}, {"methodBody": ["METHOD_START", "{", "return   getColorSpecForStyle ( style . name (  )  . toLowerCase (  )  )  ;", "}", "METHOD_END"], "methodName": ["getColorSpecForStyle"], "fileName": "org.gradle.internal.logging.console.DefaultColorMap"}, {"methodBody": ["METHOD_START", "{", "return   getColor ( style . name (  )  . toLowerCase (  )  )  ;", "}", "METHOD_END"], "methodName": ["getColourFor"], "fileName": "org.gradle.internal.logging.console.DefaultColorMap"}, {"methodBody": ["METHOD_START", "{", "return   getColor ( DefaultColorMap . STATUS _ BAR )  ;", "}", "METHOD_END"], "methodName": ["getStatusBarColor"], "fileName": "org.gradle.internal.logging.console.DefaultColorMap"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultColorMap . AttributeColor ( Attribute . INTENSITY _ BOLD ,    Attribute . RESET )  ;", "}", "METHOD_END"], "methodName": ["newBoldColor"], "fileName": "org.gradle.internal.logging.console.DefaultColorMap"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultColorMap . AttributeColor ( Attribute . ITALIC ,    Attribute . ITALIC _ OFF )  ;", "}", "METHOD_END"], "methodName": ["newItalicColor"], "fileName": "org.gradle.internal.logging.console.DefaultColorMap"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultColorMap . AttributeColor ( Attribute . NEGATIVE _ ON ,    Attribute . NEGATIVE _ OFF )  ;", "}", "METHOD_END"], "methodName": ["newReverseColor"], "fileName": "org.gradle.internal.logging.console.DefaultColorMap"}, {"methodBody": ["METHOD_START", "{", "return   writePos ;", "}", "METHOD_END"], "methodName": ["getWritePosition"], "fileName": "org.gradle.internal.logging.console.DefaultRedrawableLabel"}, {"methodBody": ["METHOD_START", "{", "return    (  ( cursor . row )     =  =     ( writePos . row )  )     &  &     (  ( writePos . col )     >     ( cursor . col )  )  ;", "}", "METHOD_END"], "methodName": ["isOverlappingWith"], "fileName": "org.gradle.internal.logging.console.DefaultRedrawableLabel"}, {"methodBody": ["METHOD_START", "{", "( writePos . row )  +  +  ;", "}", "METHOD_END"], "methodName": ["newLineAdjustment"], "fileName": "org.gradle.internal.logging.console.DefaultRedrawableLabel"}, {"methodBody": ["METHOD_START", "{", "int   textLength    =     0  ;", "for    ( StyledTextOutputEvent . Span   span    :    spans )     {", "ansi . withStyle ( span . getStyle (  )  ,     . writeText ( span . getText (  )  )  )  ;", "textLength    +  =    span . getText (  )  . length (  )  ;", "}", "if    (  (  ( previousWriteRow )     =  =     ( absolutePositionRow )  )     &  &     ( textLength    <    writtenTextLength )  )     {", "ansi . eraseForward (  )  ;", "}", "}", "METHOD_END"], "methodName": ["redrawText"], "fileName": "org.gradle.internal.logging.console.DefaultRedrawableLabel"}, {"methodBody": ["METHOD_START", "{", "writePos . row    -  =    rows ;", "abutePositionRow    +  =    rows ;", "}", "METHOD_END"], "methodName": ["scrollBy"], "fileName": "org.gradle.internal.logging.console.DefaultRedrawableLabel"}, {"methodBody": ["METHOD_START", "{", "scrollBy ( rows )  ;", "}", "METHOD_END"], "methodName": ["scrollDownBy"], "fileName": "org.gradle.internal.logging.console.DefaultRedrawableLabel"}, {"methodBody": ["METHOD_START", "{", "scrollBy (  (  - rows )  )  ;", "}", "METHOD_END"], "methodName": ["scrollUpBy"], "fileName": "org.gradle.internal.logging.console.DefaultRedrawableLabel"}, {"methodBody": ["METHOD_START", "{", "this . isVisible    =    isVisible ;", "}", "METHOD_END"], "methodName": ["setVisible"], "fileName": "org.gradle.internal.logging.console.DefaultRedrawableLabel"}, {"methodBody": ["METHOD_START", "{", "return   new   Action < AnsiContext >  (  )     {", "@ Override", "public   void   execute ( AnsiContext   ansi )     {", "ansi . a ( text )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["writeText"], "fileName": "org.gradle.internal.logging.console.DefaultRedrawableLabel"}, {"methodBody": ["METHOD_START", "{", "return   writePos ;", "}", "METHOD_END"], "methodName": ["getWritePosition"], "fileName": "org.gradle.internal.logging.console.DefaultTextArea"}, {"methodBody": ["METHOD_START", "{", "( writePos . row )  +  +  ;", "}", "METHOD_END"], "methodName": ["newLineAdjustment"], "fileName": "org.gradle.internal.logging.console.DefaultTextArea"}, {"methodBody": ["METHOD_START", "{", "return   DefaultWorkInProgressFormatter . IDLE _ SPANS ;", "}", "METHOD_END"], "methodName": ["format"], "fileName": "org.gradle.internal.logging.console.DefaultWorkInProgressFormatter"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   builder    =    new   StringBuilder (  )  ;", "ProgressOperation   current    =    op ;", "while    (  ( current    !  =    null )     &  &     (  !  (  \" BuildProgressLogger \"  . equals ( current . getCategory (  )  )  )  )  )     {", "String   message    =    current . getMessage (  )  ;", "current    =    current . getParent (  )  ;", "if    ( message    =  =    null )     {", "continue ;", "}", "builder . insert (  0  ,     \"     >     \"  )  . insert (  3  ,    message )  ;", "}", "if    (  ( builder . length (  )  )     >     0  )     {", "builder . delete (  0  ,     1  )  ;", "} else    {", "return    . IDLE _ SPANS ;", "}", "return   Arrays . asList ( new   StyledTextOutputEvent . Span ( StyledTextOutput . Style . Header ,    trim ( builder )  )  )  ;", "}", "METHOD_END"], "methodName": ["format"], "fileName": "org.gradle.internal.logging.console.DefaultWorkInProgressFormatter"}, {"methodBody": ["METHOD_START", "{", "int   width    =     ( consoleMetaData . getCols (  )  )     -     1  ;", "if    (  ( width    >     0  )     &  &     ( width    <     ( formattedString . length (  )  )  )  )     {", "return   formattedString . substring (  0  ,    width )  ;", "}", "return   formattedString . toString (  )  ;", "}", "METHOD_END"], "methodName": ["trim"], "fileName": "org.gradle.internal.logging.console.DefaultWorkInProgressFormatter"}, {"methodBody": ["METHOD_START", "{", "return   entries . size (  )  ;", "}", "METHOD_END"], "methodName": ["getHeight"], "fileName": "org.gradle.internal.logging.console.MultiLineBuildProgressArea"}, {"methodBody": ["METHOD_START", "{", "return   statusAreaPos ;", "}", "METHOD_END"], "methodName": ["getWritePosition"], "fileName": "org.gradle.internal.logging.console.MultiLineBuildProgressArea"}, {"methodBody": ["METHOD_START", "{", "for    ( DefaultRedrawableLabel   label    :    entries )     {", "if    ( label . isOverlappingWith ( cursor )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isOverlappingWith"], "fileName": "org.gradle.internal.logging.console.MultiLineBuildProgressArea"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultRedrawableLabel ( Cursor . at (  ( row -  -  )  ,     0  )  )  ;", "}", "METHOD_END"], "methodName": ["newLabel"], "fileName": "org.gradle.internal.logging.console.MultiLineBuildProgressArea"}, {"methodBody": ["METHOD_START", "{", "( statusAreaPos . row )  +  +  ;", "for    ( DefaultRedrawableLabel   label    :    entries )     {", "label . newLineAdjustment (  )  ;", "}", "}", "METHOD_END"], "methodName": ["newLineAdjustment"], "fileName": "org.gradle.internal.logging.console.MultiLineBuildProgressArea"}, {"methodBody": ["METHOD_START", "{", "if    (  ( isVisible )     |  |     (  ( statusAreaPos . row )     <     0  )  )     {", "return   Cursor . newBottomLeft (  )  ;", "} else    {", "return   statusAreaPos ;", "}", "}", "METHOD_END"], "methodName": ["parkCursor"], "fileName": "org.gradle.internal.logging.console.MultiLineBuildProgressArea"}, {"methodBody": ["METHOD_START", "{", "int   newLines    =     (  (  0     -     ( statusAreaPos . row )  )     +     ( getHeight (  )  )  )     -     1  ;", "if    (  ( isVisible )     &  &     ( newLines    >     0  )  )     {", "ansi . cursorAt ( Cursor . newBottomLeft (  )  )  . newLines ( newLines )  ;", "}", "for    ( int   i    =     0  ;    i    <     ( entries . size (  )  )  ;     +  + i )     {", "DefaultRedrawableLabel   label    =    entries . get ( i )  ;", "label . redraw ( ansi )  ;", "if    (  (  ( isVisible )     &  &     ( newLines    >     0  )  )     &  &     (  ( i    +    newLines )     <     ( entries . size (  )  )  )  )     {", "int   currentLength    =    label . getWritePosition (  )  . col ;", "int   previousLength    =    entries . get (  ( i    +    newLines )  )  . getWritePosition (  )  . col ;", "if    ( currentLength    <    previousLength )     {", "ansi . writeAt ( label . getWritePosition (  )  )  . eraseForward (  )  ;", "}", "}", "}", "if    (  ( isPreviouslyVisible )     |  |     ( isVisible )  )     {", "ansi . cursorAt ( parkCursor (  )  )  ;", "}", "isPreviouslyVisible    =    isVisible ;", "}", "METHOD_END"], "methodName": ["redraw"], "fileName": "org.gradle.internal.logging.console.MultiLineBuildProgressArea"}, {"methodBody": ["METHOD_START", "{", "statusAreaPos . row    -  =    rows ;", "for    ( DefaultRedrawableLabel   label    :    entries )     {", "label . scrollBy ( rows )  ;", "}", "}", "METHOD_END"], "methodName": ["scrollBy"], "fileName": "org.gradle.internal.logging.console.MultiLineBuildProgressArea"}, {"methodBody": ["METHOD_START", "{", "scrollBy ( rows )  ;", "}", "METHOD_END"], "methodName": ["scrollDownBy"], "fileName": "org.gradle.internal.logging.console.MultiLineBuildProgressArea"}, {"methodBody": ["METHOD_START", "{", "scrollBy (  (  - rows )  )  ;", "}", "METHOD_END"], "methodName": ["scrollUpBy"], "fileName": "org.gradle.internal.logging.console.MultiLineBuildProgressArea"}, {"methodBody": ["METHOD_START", "{", "int   completedWidth    =     (  ( int )     (  (  (  ( current )     *     1  .  0  )     /     ( total )  )     *     ( progressBarWidth )  )  )  ;", "int   remainingWidth    =     ( progressBarWidth )     -    completedWidth ;", "String   statusPrefix    =    trimToConsole ( consoleCols ,     0  ,    progressBarPrefix )  ;", "String   coloredProgress    =    trimToConsole ( consoleCols ,    statusPrefix . length (  )  ,    new   String ( new   char [ completedWidth ]  )  . replace (  '  \\ u 0  0  0  0  '  ,    fillerChar )  )  ;", "String   statusSuffix    =    trimToConsole ( consoleCols ,    coloredProgress . length (  )  ,     (  (  (  (  (  (  (  ( new   String ( new   char [ remainingWidth ]  )  . replace (  '  \\ u 0  0  0  0  '  ,    incompleteChar )  )     +     ( progressBarSuffix )  )     +     \"     \"  )     +     (  ( int )     (  (  ( current )     *     1  0  0  .  0  )     /     ( total )  )  )  )     +     '  %  '  )     +     '     '  )     +     ( suffix )  )     +     ( timerEnabled    ?     (  \"     [  \"     +     ( elapsedTimeFormatter . format ( elapsedTime )  )  )     +     \"  ]  \"     :     \"  \"  )  )  )  ;", "return   Lists . newArrayList ( new   StyledTextOutputEvent . Span ( StyledTextOutput . Style . Header ,    statusPrefix )  ,    new   StyledTextOutputEvent . Span (  ( failing    ?    StyledTextOutput . Style . FailureHeader    :    StyledTextOutput . Style . SuccessHeader )  ,    coloredProgress )  ,    new   StyledTextOutputEvent . Span ( StyledTextOutput . Style . Header ,    statusSuffix )  )  ;", "}", "METHOD_END"], "methodName": ["formatProgress"], "fileName": "org.gradle.internal.logging.console.ProgressBar"}, {"methodBody": ["METHOD_START", "{", "int   consoleWidth    =    cols    -     1  ;", "int   remainingWidth    =    consoleWidth    -    prefixLength ;", "if    ( consoleWidth    <     0  )     {", "return   str ;", "}", "if    ( remainingWidth    <  =     0  )     {", "return    \"  \"  ;", "}", "if    ( consoleWidth    <     ( str . length (  )  )  )     {", "return   str . substring (  0  ,    consoleWidth )  ;", "}", "return   str ;", "}", "METHOD_END"], "methodName": ["trimToConsole"], "fileName": "org.gradle.internal.logging.console.ProgressBar"}, {"methodBody": ["METHOD_START", "{", "( this . current )  +  +  ;", "this . fail    =     ( this . fail )     |  |    fail ;", "}", "METHOD_END"], "methodName": ["update"], "fileName": "org.gradle.internal.logging.console.ProgressBar"}, {"methodBody": ["METHOD_START", "{", "if    (  ( children )     =  =    null )     {", "children    =    new   HashSet <  >  (  )  ;", "}", "return   children . add ( operation )  ;", "}", "METHOD_END"], "methodName": ["addChild"], "fileName": "org.gradle.internal.logging.console.ProgressOperation"}, {"methodBody": ["METHOD_START", "{", "return   category ;", "}", "METHOD_END"], "methodName": ["getCategory"], "fileName": "org.gradle.internal.logging.console.ProgressOperation"}, {"methodBody": ["METHOD_START", "{", "if    ( GUtil . isTrue ( status )  )     {", "return   status ;", "}", "if    ( GUtil . isTrue ( shortDescrip )  )     {", "return   shortDescrip ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getMessage"], "fileName": "org.gradle.internal.logging.console.ProgressOperation"}, {"methodBody": ["METHOD_START", "{", "return   operationId ;", "}", "METHOD_END"], "methodName": ["getOperationId"], "fileName": "org.gradle.internal.logging.console.ProgressOperation"}, {"methodBody": ["METHOD_START", "{", "return   parent ;", "}", "METHOD_END"], "methodName": ["getParent"], "fileName": "org.gradle.internal.logging.console.ProgressOperation"}, {"methodBody": ["METHOD_START", "{", "return    (  ( children )     !  =    null )     &  &     (  !  ( children . isEmpty (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["hasChildren"], "fileName": "org.gradle.internal.logging.console.ProgressOperation"}, {"methodBody": ["METHOD_START", "{", "if    (  ( children )     =  =    null )     {", "throw   new   IllegalStateException ( String . format (  \" Cannot   remove   child   o    [  % s ]    from   o   with   no   children    [  % s ]  \"  ,    o . getMessage (  )  ,    getMessage (  )  )  )  ;", "}", "return   children . remove ( o )  ;", "}", "METHOD_END"], "methodName": ["removeChild"], "fileName": "org.gradle.internal.logging.console.ProgressOperation"}, {"methodBody": ["METHOD_START", "{", "this . status    =    status ;", "}", "METHOD_END"], "methodName": ["setStatus"], "fileName": "org.gradle.internal.logging.console.ProgressOperation"}, {"methodBody": ["METHOD_START", "{", "ProgressOperation   op    =    operationsById . remove ( operationId )  ;", "if    ( op    =  =    null )     {", "throw   new   IllegalStateException (  (  (  \" Received   complete   event   for   an   unknown   operation    ( id :     \"     +    operationId )     +     \"  )  \"  )  )  ;", "}", "if    (  ( op . getParent (  )  )     !  =    null )     {", "op . getParent (  )  . removeChild ( op )  ;", "}", "return   op ;", "}", "METHOD_END"], "methodName": ["complete"], "fileName": "org.gradle.internal.logging.console.ProgressOperations"}, {"methodBody": ["METHOD_START", "{", "ProgressOperation   op    =    operationsById . get ( operationId )  ;", "if    ( op    =  =    null )     {", "throw   new   IllegalStateException (  (  (  \" Received   progress   event   for   an   unknown   operation    ( id :     \"     +    operationId )     +     \"  )  \"  )  )  ;", "}", "op . setStatus ( description )  ;", "return   op ;", "}", "METHOD_END"], "methodName": ["progress"], "fileName": "org.gradle.internal.logging.console.ProgressOperations"}, {"methodBody": ["METHOD_START", "{", "ProgressOperation   parent    =    null ;", "if    ( parentOperationId    !  =    null )     {", "parent    =    operationsById . get ( parentOperationId )  ;", "}", "ProgressOperation   operation    =    new   ProgressOperation ( description ,    status ,    category ,    operationId ,    parent )  ;", "if    ( parent    !  =    null )     {", "parent . addChild ( operation )  ;", "}", "operationsById . put ( operationId ,    operation )  ;", "return   operation ;", "}", "METHOD_END"], "methodName": ["start"], "fileName": "org.gradle.internal.logging.console.ProgressOperations"}, {"methodBody": ["METHOD_START", "{", "if    ( event   instanceof   LogLevelChangeEvent )     {", "LogLevelChangeEvent   changeEvent    =     (  ( LogLevelChangeEvent )     ( event )  )  ;", "boolean   newLogLevelIsDebug    =     ( changeEvent . getNewLogLevel (  )  )     =  =     ( LogLevel . DEBUG )  ;", "if    ( newLogLevelIsDebug    &  &     (  ( dateFormat )     =  =    null )  )     {", "dateFormat    =    new   SimpleDateFormat (  \" HH : mm : ss . SSS \"  )  ;", "}", "debugOutput    =    newLogLevelIsDebug ;", "}", "if    ( event   instanceof   RenderableOutputEvent )     {", "RenderableOutputEvent   outputEvent    =     (  ( RenderableOutputEvent )     ( event )  )  ;", "textOutput . style (  (  ( outputEvent . getLogLevel (  )  )     =  =     ( LogLevel . ERROR )     ?     . Style . Error    :     . Style . Normal )  )  ;", "if    (  ( debugOutput )     &  &     (  (  ( textOutput . atEndOfLine )     |  |     (  ( lastEvent )     =  =    null )  )     |  |     (  !  ( lastEvent . getCategory (  )  . equals ( outputEvent . getCategory (  )  )  )  )  )  )     {", "if    (  !  ( textOutput . atEndOfLine )  )     {", "textOutput . println (  )  ;", "}", "textOutput . text ( dateFormat . format ( new   Date ( outputEvent . getTimestamp (  )  )  )  )  ;", "textOutput . text (  \"     [  \"  )  ;", "textOutput . text ( outputEvent . getLogLevel (  )  )  ;", "textOutput . text (  \"  ]     [  \"  )  ;", "textOutput . text ( outputEvent . getCategory (  )  )  ;", "textOutput . text (  \"  ]     \"  )  ;", "}", "outputEvent . render ( textOutput )  ;", "lastEvent    =    outputEvent ;", "textOutput . style (  . Style . Normal )  ;", "}", "}", "METHOD_END"], "methodName": ["onOutput"], "fileName": "org.gradle.internal.logging.console.StyledTextOutputBackedRenderer"}, {"methodBody": ["METHOD_START", "{", "synchronized ( lock )     {", "queue . add ( newEvent )  ;", "if    ( newEvent   instanceof   UpdateNowEvent )     {", "currentTimePeriod    =     (  ( UpdateNowEvent )     ( newEvent )  )  . getTimestamp (  )  ;", "renderNow (  )  ;", "return ;", "}", "if    ( newEvent   instanceof   Flush )     {", "renderNow (  )  ;", "return ;", "}", "if    ( newEvent   instanceof   End )     {", "renderNow (  )  ;", "executor . shutdown (  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["onOutput"], "fileName": "org.gradle.internal.logging.console.ThrottlingOutputEventListener"}, {"methodBody": ["METHOD_START", "{", "for    ( OutputEvent   event    :    queue )     {", "listener . onOutput ( event )  ;", "}", "queue . clear (  )  ;", "lastUpdate    =    currentTimePeriod ;", "}", "METHOD_END"], "methodName": ["renderNow"], "fileName": "org.gradle.internal.logging.console.ThrottlingOutputEventListener"}, {"methodBody": ["METHOD_START", "{", "executor . scheduleAtFixedRate ( new   Runnable (  )     {", "@ Override", "public   void   run (  )     {", "on ( new   UpdateNowEvent ( clock . getCurrentTime (  )  )  )  ;", "}", "}  ,    throttleMs ,    throttleMs ,    TimeUnit . MILLISECONDS )  ;", "}", "METHOD_END"], "methodName": ["scheduleUpdateNow"], "fileName": "org.gradle.internal.logging.console.ThrottlingOutputEventListener"}, {"methodBody": ["METHOD_START", "{", "console . flush (  )  ;", "}", "METHOD_END"], "methodName": ["flushConsole"], "fileName": "org.gradle.internal.logging.console.UserInputConsoleRenderer"}, {"methodBody": ["METHOD_START", "{", "console . getBuildOutputArea (  )  . println ( message )  ;", "}", "METHOD_END"], "methodName": ["printToBuildProgressArea"], "fileName": "org.gradle.internal.logging.console.UserInputConsoleRenderer"}, {"methodBody": ["METHOD_START", "{", "console . getBuildProgressArea (  )  . setVisible ( visible )  ;", "}", "METHOD_END"], "methodName": ["toggleBuildProgressAreaVisibility"], "fileName": "org.gradle.internal.logging.console.UserInputConsoleRenderer"}, {"methodBody": ["METHOD_START", "{", "if    (  ( operation . hasChildren (  )  )     |  |     (  !  ( isRenderable ( operation )  )  )  )     {", "return ;", "}", "if    (  ( operation . getParent (  )  )     !  =    null )     {", "detach ( operation . getParent (  )  . getOperationId (  )  )  ;", "}", "if    ( unusedLabels . isEmpty (  )  )     {", "int   newValue    =     ( operationIdToAssignedLabels . size (  )  )     +     1  ;", "resizeTo ( newValue )  ;", "}", "if    ( unusedLabels . isEmpty (  )  )     {", "unassignedOperations . add ( operation )  ;", "} else    {", "attach ( operation ,    unusedLabels . pop (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["attach"], "fileName": "org.gradle.internal.logging.console.WorkInProgressRenderer"}, {"methodBody": ["METHOD_START", "{", "WorkInProgressRenderer . AssociationLabel   association    =    new   WorkInProgressRenderer . AssociationLabel ( operation ,    label )  ;", "operationIdToAssignedLabels . put ( operation . getOperationId (  )  ,    association )  ;", "}", "METHOD_END"], "methodName": ["attach"], "fileName": "org.gradle.internal.logging.console.WorkInProgressRenderer"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( isRenderable ( operation )  )  )     {", "return ;", "}", "detach ( operation . getOperationId (  )  )  ;", "unassignedOperations . remove ( operation )  ;", "if    (  (  ( operation . getParent (  )  )     !  =    null )     &  &     ( isRenderable ( operation . getParent (  )  )  )  )     {", "attach ( operation . getParent (  )  )  ;", "} else", "if    (  !  ( unassignedOperations . isEmpty (  )  )  )     {", "attach ( unassignedOperations . pop (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["detach"], "fileName": "org.gradle.internal.logging.console.WorkInProgressRenderer"}, {"methodBody": ["METHOD_START", "{", "WorkInProgressRenderer . AssociationLabel   association    =    operationIdToAssignedLabels . remove ( operationId )  ;", "if    ( association    !  =    null )     {", "unusedProgressLabels . push ( association . label )  ;", "}", "}", "METHOD_END"], "methodName": ["detach"], "fileName": "org.gradle.internal.logging.console.WorkInProgressRenderer"}, {"methodBody": ["METHOD_START", "{", "for    ( ProgressOperation   current    =    operation ;     ( current    !  =    null )     &  &     (  !  ( BuildStatusRenderer . BUILD _ PROGRESS _ CATEGORY . equals ( current . getCategory (  )  )  )  )  ;    current    =    current . getParent (  )  )     {", "if    (  ( current . getMessage (  )  )     !  =    null )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isRenderable"], "fileName": "org.gradle.internal.logging.console.WorkInProgressRenderer"}, {"methodBody": ["METHOD_START", "{", "if    ( queue . isEmpty (  )  )     {", "return ;", "}", "Set < OperationIdentifier >    completeEventOperationIds    =    toOperationIdSet ( Iterables . filter ( queue ,    ProgressCompleteEvent . class )  )  ;", "Set < OperationIdentifier >    operationIdsToSkip    =    new   HashSet < OperationIdentifier >  (  )  ;", "for    ( OutputEvent   event    :    queue )     {", "if    ( event   instanceof   ProgressStartEvent )     {", "progressArea . setVisible ( true )  ;", "ProgressStartEvent   startEvent    =     (  ( ProgressStartEvent )     ( event )  )  ;", "if    ( completeEventOperationIds . contains ( startEvent . getProgressOperationId (  )  )  )     {", "operationIdsToSkip . add ( startEvent . getProgressOperationId (  )  )  ;", "} else    {", "attach ( operations . start ( startEvent . getShortDescription (  )  ,    startEvent . getStatus (  )  ,    startEvent . getCategory (  )  ,    startEvent . getProgressOperationId (  )  ,    startEvent . getParentProgressOperationId (  )  )  )  ;", "}", "} else", "if    ( event   instanceof   ProgressCompleteEvent )     {", "ProgressCompleteEvent   completeEvent    =     (  ( ProgressCompleteEvent )     ( event )  )  ;", "if    (  !  ( operationIdsToSkip . contains ( completeEvent . getProgressOperationId (  )  )  )  )     {", "detach ( operations . complete ( completeEvent . getProgressOperationId (  )  )  )  ;", "}", "} else", "if    ( event   instanceof   events . ProgressEvent )     {", "events . ProgressEvent   progressEvent    =     (  ( events . ProgressEvent )     ( event )  )  ;", "if    (  !  ( operationIdsToSkip . contains ( progressEvent . getProgressOperationId (  )  )  )  )     {", "operations . progress ( progressEvent . getStatus (  )  ,    progressEvent . getProgressOperationId (  )  )  ;", "}", "}", "}", "queue . clear (  )  ;", "for    ( WorkInProgressRenderer . AssociationLabel   associatedLabel    :    operationIdToAssignedLabels . values (  )  )     {", "associatedLabel . renderNow (  )  ;", "}", "for    ( StyledLabel   emptyLabel    :    unusedProgressLabels )     {", "emptyLabel . setText ( labelFormatter . format (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["renderNow"], "fileName": "org.gradle.internal.logging.console.WorkInProgressRenderer"}, {"methodBody": ["METHOD_START", "{", "int   previousBuildProgressLabelCount    =    progressArea . getBuildProgressLabels (  )  . size (  )  ;", "newBuildProgressLabelCount    =    consoleLayoutCalculator . calculateNumWorkersForConsoleDisplay ( newBuildProgressLabelCount )  ;", "if    ( previousBuildProgressLabelCount    >  =    newBuildProgressLabelCount )     {", "return ;", "}", "progressArea . resizeBuildProgressTo ( newBuildProgressLabelCount )  ;", "for    ( int   i    =    newBuildProgressLabelCount    -     1  ;    i    >  =    previousBuildProgressLabelCount ;     -  - i )     {", "unusedProgressLabels . push ( progressArea . getBuildProgressLabels (  )  . get ( i )  )  ;", "}", "}", "METHOD_END"], "methodName": ["resizeTo"], "fileName": "org.gradle.internal.logging.console.WorkInProgressRenderer"}, {"methodBody": ["METHOD_START", "{", "return   Sets . newHashSet ( Iterables . transform ( events ,    new   com . google . common . base . Function < ProgressCompleteEvent ,    OperationIdentifier >  (  )     {", "@ Override", "public   OperationIdentifier   apply ( ProgressCompleteEvent   event )     {", "return   event . getProgressOperationId (  )  ;", "}", "}  )  )  ;", "}", "METHOD_END"], "methodName": ["toOperationIdSet"], "fileName": "org.gradle.internal.logging.console.WorkInProgressRenderer"}, {"methodBody": ["METHOD_START", "{", "return   category ;", "}", "METHOD_END"], "methodName": ["getCategory"], "fileName": "org.gradle.internal.logging.events.CategorisedOutputEvent"}, {"methodBody": ["METHOD_START", "{", "return   logLevel ;", "}", "METHOD_END"], "methodName": ["getLogLevel"], "fileName": "org.gradle.internal.logging.events.CategorisedOutputEvent"}, {"methodBody": ["METHOD_START", "{", "return   timestamp ;", "}", "METHOD_END"], "methodName": ["getTimestamp"], "fileName": "org.gradle.internal.logging.events.CategorisedOutputEvent"}, {"methodBody": ["METHOD_START", "{", "return   message ;", "}", "METHOD_END"], "methodName": ["getMessage"], "fileName": "org.gradle.internal.logging.events.LogEvent"}, {"methodBody": ["METHOD_START", "{", "return   throwable ;", "}", "METHOD_END"], "methodName": ["getThrowable"], "fileName": "org.gradle.internal.logging.events.LogEvent"}, {"methodBody": ["METHOD_START", "{", "output . text ( message )  ;", "output . prln (  )  ;", "if    (  ( throwable )     !  =    null )     {", "output . exception ( throwable )  ;", "}", "}", "METHOD_END"], "methodName": ["render"], "fileName": "org.gradle.internal.logging.events.LogEvent"}, {"methodBody": ["METHOD_START", "{", "return   newLogLevel ;", "}", "METHOD_END"], "methodName": ["getNewLogLevel"], "fileName": "org.gradle.internal.logging.events.LogLevelChangeEvent"}, {"methodBody": ["METHOD_START", "{", "return   progressOperationId ;", "}", "METHOD_END"], "methodName": ["getProgressOperationId"], "fileName": "org.gradle.internal.logging.events.ProgressCompleteEvent"}, {"methodBody": ["METHOD_START", "{", "return   status ;", "}", "METHOD_END"], "methodName": ["getStatus"], "fileName": "org.gradle.internal.logging.events.ProgressCompleteEvent"}, {"methodBody": ["METHOD_START", "{", "return   timestamp ;", "}", "METHOD_END"], "methodName": ["getTimestamp"], "fileName": "org.gradle.internal.logging.events.ProgressCompleteEvent"}, {"methodBody": ["METHOD_START", "{", "return   failed ;", "}", "METHOD_END"], "methodName": ["isFailed"], "fileName": "org.gradle.internal.logging.events.ProgressCompleteEvent"}, {"methodBody": ["METHOD_START", "{", "return   progressOperationId ;", "}", "METHOD_END"], "methodName": ["getProgressOperationId"], "fileName": "org.gradle.internal.logging.events.ProgressEvent"}, {"methodBody": ["METHOD_START", "{", "return   status ;", "}", "METHOD_END"], "methodName": ["getStatus"], "fileName": "org.gradle.internal.logging.events.ProgressEvent"}, {"methodBody": ["METHOD_START", "{", "return   failing ;", "}", "METHOD_END"], "methodName": ["isFailing"], "fileName": "org.gradle.internal.logging.events.ProgressEvent"}, {"methodBody": ["METHOD_START", "{", "return   buildOperationCategory ;", "}", "METHOD_END"], "methodName": ["getBuildOperationCategory"], "fileName": "org.gradle.internal.logging.events.ProgressStartEvent"}, {"methodBody": ["METHOD_START", "{", "return   buildOperationId ;", "}", "METHOD_END"], "methodName": ["getBuildOperationId"], "fileName": "org.gradle.internal.logging.events.ProgressStartEvent"}, {"methodBody": ["METHOD_START", "{", "return   description ;", "}", "METHOD_END"], "methodName": ["getDescription"], "fileName": "org.gradle.internal.logging.events.ProgressStartEvent"}, {"methodBody": ["METHOD_START", "{", "return   loggingHeader ;", "}", "METHOD_END"], "methodName": ["getLoggingHeader"], "fileName": "org.gradle.internal.logging.events.ProgressStartEvent"}, {"methodBody": ["METHOD_START", "{", "return   parentBuildOperationId ;", "}", "METHOD_END"], "methodName": ["getParentBuildOperationId"], "fileName": "org.gradle.internal.logging.events.ProgressStartEvent"}, {"methodBody": ["METHOD_START", "{", "return   parentProgressOperationId ;", "}", "METHOD_END"], "methodName": ["getParentProgressOperationId"], "fileName": "org.gradle.internal.logging.events.ProgressStartEvent"}, {"methodBody": ["METHOD_START", "{", "return   progressOperationId ;", "}", "METHOD_END"], "methodName": ["getProgressOperationId"], "fileName": "org.gradle.internal.logging.events.ProgressStartEvent"}, {"methodBody": ["METHOD_START", "{", "return   shortDescription ;", "}", "METHOD_END"], "methodName": ["getShortDescription"], "fileName": "org.gradle.internal.logging.events.ProgressStartEvent"}, {"methodBody": ["METHOD_START", "{", "return   status ;", "}", "METHOD_END"], "methodName": ["getStatus"], "fileName": "org.gradle.internal.logging.events.ProgressStartEvent"}, {"methodBody": ["METHOD_START", "{", "return   totalProgress ;", "}", "METHOD_END"], "methodName": ["getTotalProgress"], "fileName": "org.gradle.internal.logging.events.ProgressStartEvent"}, {"methodBody": ["METHOD_START", "{", "return   buildOperationStart ;", "}", "METHOD_END"], "methodName": ["isBuildOperationStart"], "fileName": "org.gradle.internal.logging.events.ProgressStartEvent"}, {"methodBody": ["METHOD_START", "{", "return   buildOperationId ;", "}", "METHOD_END"], "methodName": ["getBuildOperationId"], "fileName": "org.gradle.internal.logging.events.RenderableOutputEvent"}, {"methodBody": ["METHOD_START", "{", "return   spans ;", "}", "METHOD_END"], "methodName": ["getSpans"], "fileName": "org.gradle.internal.logging.events.StyledTextOutputEvent"}, {"methodBody": ["METHOD_START", "{", "return   new   StyledTextOutputEvent ( getTimestamp (  )  ,    getCategory (  )  ,    logLevel ,    getBuildOperationId (  )  ,    spans )  ;", "}", "METHOD_END"], "methodName": ["withLogLevel"], "fileName": "org.gradle.internal.logging.events.StyledTextOutputEvent"}, {"methodBody": ["METHOD_START", "{", "return   timestamp ;", "}", "METHOD_END"], "methodName": ["getTimestamp"], "fileName": "org.gradle.internal.logging.events.UpdateNowEvent"}, {"methodBody": ["METHOD_START", "{", "return   prompt ;", "}", "METHOD_END"], "methodName": ["getPrompt"], "fileName": "org.gradle.internal.logging.events.UserInputRequestEvent"}, {"methodBody": ["METHOD_START", "{", "StyledTextOutput . Style   messageStyle    =     ( failed )     ?    StyledTextOutput . Style . FailureHeader    :    StyledTextOutput . Style . Header ;", "return   new   StyledTextOutputEvent . Span ( messageStyle ,     (  \"  >     \"     +    message )  )  ;", "}", "METHOD_END"], "methodName": ["header"], "fileName": "org.gradle.internal.logging.format.PrettyPrefixedLogHeaderFormatter"}, {"methodBody": ["METHOD_START", "{", "StyledTextOutput . Style   statusStyle    =     ( failed )     ?    StyledTextOutput . Style . Failure    :    StyledTextOutput . Style . Info ;", "return   new   StyledTextOutputEvent . Span ( statusStyle ,     (  \"     \"     +    status )  )  ;", "}", "METHOD_END"], "methodName": ["status"], "fileName": "org.gradle.internal.logging.format.PrettyPrefixedLogHeaderFormatter"}, {"methodBody": ["METHOD_START", "{", "return   init ( loggerCategory ,    parentOperation ,    false ,    currentBuildOperationRef . getId (  )  ,    currentBuildOperationRef . getParentId (  )  ,    null )  ;", "}", "METHOD_END"], "methodName": ["init"], "fileName": "org.gradle.internal.logging.progress.DefaultProgressLoggerFactory"}, {"methodBody": ["METHOD_START", "{", "if    (  ( parentOperation    !  =    null )     &  &     (  !  ( parentOperation   instanceof   DefaultProgressLoggerFactory . ProgressLoggerImpl )  )  )     {", "throw   new   IllegalArgumentException (  \" Unexpected   parent   logger .  \"  )  ;", "}", "return   new   DefaultProgressLoggerFactory . ProgressLoggerImpl (  (  ( DefaultProgressLoggerFactory . ProgressLoggerImpl )     ( parentOperation )  )  ,    new   OperationIdentifier ( nextId . getAndIncrement (  )  )  ,    loggerCategory ,    progressListener ,    clock ,    buildOperationStart ,    buildOperationId ,    parentBuildOperationId ,    buildOperationCategory )  ;", "}", "METHOD_END"], "methodName": ["init"], "fileName": "org.gradle.internal.logging.progress.DefaultProgressLoggerFactory"}, {"methodBody": ["METHOD_START", "{", "return   newOperation ( loggerCategory . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["newOperation"], "fileName": "org.gradle.internal.logging.progress.DefaultProgressLoggerFactory"}, {"methodBody": ["METHOD_START", "{", "return   init ( loggerClass . toString (  )  ,    parent )  ;", "}", "METHOD_END"], "methodName": ["newOperation"], "fileName": "org.gradle.internal.logging.progress.DefaultProgressLoggerFactory"}, {"methodBody": ["METHOD_START", "{", "return   init ( loggerCategory . getName (  )  ,    null ,    true ,    buildOperationDescriptor . getId (  )  ,    buildOperationDescriptor . getParentId (  )  ,    buildOperationDescriptor . getOperationType (  )  )  ;", "}", "METHOD_END"], "methodName": ["newOperation"], "fileName": "org.gradle.internal.logging.progress.DefaultProgressLoggerFactory"}, {"methodBody": ["METHOD_START", "{", "return   init ( loggerCategory ,    null )  ;", "}", "METHOD_END"], "methodName": ["newOperation"], "fileName": "org.gradle.internal.logging.progress.DefaultProgressLoggerFactory"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( created )  )     {", "created    =    true ;", "return   getRoot (  )  ;", "}", "return   new (  )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.internal.logging.services.DefaultLoggingManagerFactory"}, {"methodBody": ["METHOD_START", "{", "return   rootManager ;", "}", "METHOD_END"], "methodName": ["getRoot"], "fileName": "org.gradle.internal.logging.services.DefaultLoggingManagerFactory"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultLoggingManager ( slfLoggingSystem ,    javaUtilLoggingSystem ,    stdOutLoggingSystem ,    stdErrLoggingSystem ,    loggingRouter )  ;", "}", "METHOD_END"], "methodName": ["newManager"], "fileName": "org.gradle.internal.logging.services.DefaultLoggingManagerFactory"}, {"methodBody": ["METHOD_START", "{", "return   new   LoggingBackedStyledTextOutput ( outputEventListener ,    logCategory ,    logLevel ,    clock )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.internal.logging.services.DefaultStyledTextOutputFactory"}, {"methodBody": ["METHOD_START", "{", "if    (  ( buffer . length (  )  )     >     0  )     {", "spans . add ( new   Event . Span ( this . style ,    buffer . toString (  )  )  )  ;", "buffer . setLength (  0  )  ;", "}", "this . style    =    style ;", "}", "METHOD_END"], "methodName": ["doStyleChange"], "fileName": "org.gradle.internal.logging.services.LoggingBackedStyledTextOutput"}, {"methodBody": ["METHOD_START", "{", "return   new   LoggingCommandLineConverter (  )  ;", "}", "METHOD_END"], "methodName": ["createCommandLineConverter"], "fileName": "org.gradle.internal.logging.services.LoggingServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "OutputEventListener   outputEventBroadcaster    =    outputEventListenerManager . getBroadcaster (  )  ;", "ourceSystem   stdout    =    new   DefaultStdOutystem ( getStdoutListener (  )  ,    get ( Clock . class )  )  ;", "stdout . setLevel ( LogLevel . QUIET )  ;", "ourceSystem   stderr    =    new   DefaultStdErrystem ( new   TextStreamOutputEventListener ( outputEventBroadcaster )  ,    get ( Clock . class )  )  ;", "stderr . setLevel ( LogLevel . ERROR )  ;", "return   new   DefaultLoggingManagerFactory ( renderer ,    new   ystemAdapter ( new   Slf 4 jLoggingConfigurer ( outputEventBroadcaster )  )  ,    new   JavaUtilystem (  )  ,    stdout ,    stderr )  ;", "}", "METHOD_END"], "methodName": ["createLoggingManagerFactory"], "fileName": "org.gradle.internal.logging.services.LoggingServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "return   manager . getBroadcaster (  )  ;", "}", "METHOD_END"], "methodName": ["createOutputEventListener"], "fileName": "org.gradle.internal.logging.services.LoggingServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "return   outputEventListenerManager ;", "}", "METHOD_END"], "methodName": ["createOutputEventListenerManager"], "fileName": "org.gradle.internal.logging.services.LoggingServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultProgressLoggerFactory ( new   ProgressLoggingBridge ( get ( OutputEventListener . class )  )  ,    get ( Clock . class )  )  ;", "}", "METHOD_END"], "methodName": ["createProgressLoggerFactory"], "fileName": "org.gradle.internal.logging.services.LoggingServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultStyledTextOutputFactory ( getStdoutListener (  )  ,    get ( Clock . class )  )  ;", "}", "METHOD_END"], "methodName": ["createStyledTextOutputFactory"], "fileName": "org.gradle.internal.logging.services.LoggingServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "return   Time . clock (  )  ;", "}", "METHOD_END"], "methodName": ["createTimeProvider"], "fileName": "org.gradle.internal.logging.services.LoggingServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "if    (  ( stdoutListener )     =  =    null )     {", "stdoutListener    =    new   TextStreamOutputEventListener ( get ( OutputEventListenerManager . class )  . getBroadcaster (  )  )  ;", "}", "return   stdoutListener ;", "}", "METHOD_END"], "methodName": ["getStdoutListener"], "fileName": "org.gradle.internal.logging.services.LoggingServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "return   new   OutputEventRenderer ( Time . clock (  )  )  ;", "}", "METHOD_END"], "methodName": ["makeOutputEventRenderer"], "fileName": "org.gradle.internal.logging.services.LoggingServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "LoggingServiceRegistry . CommandLineLogging   loggingServices    =    new   LoggingServiceRegistry . CommandLineLogging (  )  ;", "LoggingManagerInternal   rootLoggingManager    =    loggingServices . get ( DefaultLoggingManagerFactory . class )  . getRoot (  )  ;", "rootLoggingManager . captureSystemSources (  )  ;", "rootLoggingManager . attachSystemOutAndErr (  )  ;", "return   loggingServices ;", "}", "METHOD_END"], "methodName": ["newCommandLineProcessLogging"], "fileName": "org.gradle.internal.logging.services.LoggingServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "return   new   LoggingServiceRegistry . CommandLineLogging (  )  ;", "}", "METHOD_END"], "methodName": ["newEmbeddableLogging"], "fileName": "org.gradle.internal.logging.services.LoggingServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "return   new   LoggingServiceRegistry . NestedLogging (  )  ;", "}", "METHOD_END"], "methodName": ["newNestedLogging"], "fileName": "org.gradle.internal.logging.services.LoggingServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "listener . onOutput ( event )  ;", "}", "METHOD_END"], "methodName": ["completed"], "fileName": "org.gradle.internal.logging.services.ProgressLoggingBridge"}, {"methodBody": ["METHOD_START", "{", "listener . onOutput ( event )  ;", "}", "METHOD_END"], "methodName": ["progress"], "fileName": "org.gradle.internal.logging.services.ProgressLoggingBridge"}, {"methodBody": ["METHOD_START", "{", "listener . onOutput ( event )  ;", "}", "METHOD_END"], "methodName": ["started"], "fileName": "org.gradle.internal.logging.services.ProgressLoggingBridge"}, {"methodBody": ["METHOD_START", "{", "logLevel . set ( changeEvent . getNewLogLevel (  )  )  ;", "}", "METHOD_END"], "methodName": ["onLogLevelChange"], "fileName": "org.gradle.internal.logging.services.TextStreamOutputEventListener"}, {"methodBody": ["METHOD_START", "{", "if    ( event   instanceof   StyledTextOutputEvent )     {", "onTextEvent (  (  ( StyledTextOutputEvent )     ( event )  )  )  ;", "} else", "if    ( event   instanceof   events . LogLevelChangeEvent )     {", "onLogLevelChange (  (  ( events . LogLevelChangeEvent )     ( event )  )  )  ;", "} else    {", "throw   new   IllegalArgumentException (  )  ;", "}", "}", "METHOD_END"], "methodName": ["onOutput"], "fileName": "org.gradle.internal.logging.services.TextStreamOutputEventListener"}, {"methodBody": ["METHOD_START", "{", "if    (  ( textOutputEvent . getLogLevel (  )  )     !  =    null )     {", "listener . onOutput ( textOutputEvent )  ;", "} else    {", "listener . onOutput ( textOutputEvent . withLogLevel ( logLevel . get (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["onTextEvent"], "fileName": "org.gradle.internal.logging.services.TextStreamOutputEventListener"}, {"methodBody": ["METHOD_START", "{", "String   term    =    System . getenv (  \" TERM \"  )  ;", "return    ( term    !  =    null )     &  &     ( term . startsWith (  \" xterm \"  )  )  ;", "}", "METHOD_END"], "methodName": ["isXterm"], "fileName": "org.gradle.internal.logging.sink.AnsiConsoleUtil"}, {"methodBody": ["METHOD_START", "{", "try    {", "return    . wrapOutputStream ( stream ,    STDOUT _ FILENO )  ;", "}    catch    ( Throwable   ignore )     {", "return    . wrapOutputStream ( stream ,     0  )  ;", "}", "}", "METHOD_END"], "methodName": ["wrapOutputStream"], "fileName": "org.gradle.internal.logging.sink.AnsiConsoleUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( Boolean . getBoolean (  \" jansi . passthrough \"  )  )     {", "return   stream ;", "}", "if    ( Boolean . getBoolean (  \" jansi . strip \"  )  )     {", "return   new   AnsiOutputStream ( stream )  ;", "}", "String   os    =    System . getProperty (  \" os . name \"  )  ;", "if    (  ( os . startsWith (  \" Windows \"  )  )     &  &     (  !  (  . isXterm (  )  )  )  )     {", "final   long   stdOutputHandle    =    GetStdHandle ( STD _ OUTPUT _ HANDLE )  ;", "final   int [  ]    mode    =    new   int [  1  ]  ;", "if    (  (  ( stdOutputHandle    !  =     ( INVALID _ HANDLE _ VALUE )  )     &  &     (  0     !  =     ( GetConsoleMode ( stdOutputHandle ,    mode )  )  )  )     &  &     (  0     !  =     ( SetConsoleMode ( stdOutputHandle ,     (  (  ( mode [  0  ]  )     |     (  . ENABLE _ VIRTUAL _ TERMINAL _ PROCESSING )  )     |     (  . DISABLE _ NEWLINE _ AUTO _ RETURN )  )  )  )  )  )     {", "return   new   FilterOutputStream ( stream )     {", "@ Override", "public   void   close (  )    throws   IOException    {", "write ( REST _ CODE )  ;", "flush (  )  ;", "SetConsoleMode ( stdOutputHandle ,    mode [  0  ]  )  ;", "super . close (  )  ;", "}", "}  ;", "}", "try    {", "return   new    . WindowsAnsiOutputStream ( stream )  ;", "}    catch    ( Throwable   ignore )     {", "}", "return   new   AnsiOutputStream ( stream )  ;", "}", "try    {", "boolean   forceColored    =    Boolean . getBoolean (  \" jansi . force \"  )  ;", "if    (  (  (  !  (  . isXterm (  )  )  )     &  &     (  ! forceColored )  )     &  &     (  ( isatty ( fileno )  )     =  =     0  )  )     {", "return   new   AnsiOutputStream ( stream )  ;", "}", "}    catch    ( Throwable   ignore )     {", "}", "return   new   FilterOutputStream ( stream )     {", "@ Override", "public   void   close (  )    throws   IOException    {", "write ( REST _ CODE )  ;", "flush (  )  ;", "super . close (  )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["wrapOutputStream"], "fileName": "org.gradle.internal.logging.sink.AnsiConsoleUtil"}, {"methodBody": ["METHOD_START", "{", "ConsoleDetector   consoleDetector    =    NativeServices . getInstance (  )  . get ( ConsoleDetector . class )  ;", "ConsoleMetaData   consoleMetaData    =    consoleDetector . getConsole (  )  ;", "if    ( consoleMetaData    !  =    null )     {", ". configureRichConsole ( renderer ,    consoleMetaData ,    false ,    false )  ;", "} else    {", ". configurePlainConsole ( renderer )  ;", "}", "}", "METHOD_END"], "methodName": ["configureAutoConsole"], "fileName": "org.gradle.internal.logging.sink.ConsoleConfigureAction"}, {"methodBody": ["METHOD_START", "{", "renderer . addPlainConsole (  )  ;", "}", "METHOD_END"], "methodName": ["configurePlainConsole"], "fileName": "org.gradle.internal.logging.sink.ConsoleConfigureAction"}, {"methodBody": ["METHOD_START", "{", "ConsoleDetector   consoleDetector    =    NativeServices . getInstance (  )  . get ( ConsoleDetector . class )  ;", "ConsoleMetaData   consoleMetaData    =    consoleDetector . getConsole (  )  ;", ". configureRichConsole ( renderer ,    consoleMetaData ,     ( consoleMetaData    =  =    null )  ,    verbose )  ;", "}", "METHOD_END"], "methodName": ["configureRichConsole"], "fileName": "org.gradle.internal.logging.sink.ConsoleConfigureAction"}, {"methodBody": ["METHOD_START", "{", "consoleMetaData    =     ( consoleMetaData    =  =    null )     ?    FallbackConsoleMetaData . INSTANCE    :    consoleMetaData ;", "if    ( consoleMetaData . isStdOut (  )  )     {", "OutputStream   originalStdOut    =    renderer . getOriginalStdOut (  )  ;", "OutputStreamWriter   outStr    =    new   OutputStreamWriter (  ( force    ?    originalStdOut    :    AnsiConsoleUtil . wrapOutputStream ( originalStdOut )  )  )  ;", "Console   console    =    new   AnsiConsole ( outStr ,    outStr ,    renderer . getColourMap (  )  ,    consoleMetaData ,    force )  ;", "renderer . addRichConsole ( console ,    true ,    consoleMetaData . isStdErr (  )  ,    consoleMetaData ,    verbose )  ;", "} else", "if    ( consoleMetaData . isStdErr (  )  )     {", "OutputStream   originalStdErr    =    renderer . getOriginalStdErr (  )  ;", "OutputStreamWriter   errStr    =    new   OutputStreamWriter (  ( force    ?    originalStdErr    :    AnsiConsoleUtil . wrapOutputStream ( originalStdErr )  )  )  ;", "Console   console    =    new   AnsiConsole ( errStr ,    errStr ,    renderer . getColourMap (  )  ,    consoleMetaData ,    force )  ;", "renderer . addRichConsole ( console ,    false ,    true ,    consoleMetaData ,    verbose )  ;", "}", "}", "METHOD_END"], "methodName": ["configureRichConsole"], "fileName": "org.gradle.internal.logging.sink.ConsoleConfigureAction"}, {"methodBody": ["METHOD_START", "{", "if    ( consoleOutput    =  =     ( ConsoleOutput . Auto )  )     {", ". configureAutoConsole ( renderer )  ;", "} else", "if    ( consoleOutput    =  =     ( ConsoleOutput . Rich )  )     {", ". configureRichConsole ( renderer ,    false )  ;", "} else", "if    ( consoleOutput    =  =     ( ConsoleOutput . Verbose )  )     {", ". configureRichConsole ( renderer ,    true )  ;", "} else", "if    ( consoleOutput    =  =     ( ConsoleOutput . Plain )  )     {", ". configurePlainConsole ( renderer )  ;", "}", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.internal.logging.sink.ConsoleConfigureAction"}, {"methodBody": ["METHOD_START", "{", "return   Boolean . getBoolean ( ConsoleStateUtil . INTERACTIVE _ TOGGLE )  ;", "}", "METHOD_END"], "methodName": ["definesInteractiveSystemProperty"], "fileName": "org.gradle.internal.logging.sink.ConsoleStateUtil"}, {"methodBody": ["METHOD_START", "{", "return    ( ConsoleStateUtil . isInteractiveConsoleAttached (  )  )     |  |     ( ConsoleStateUtil . definesInteractiveSystemProperty (  )  )  ;", "}", "METHOD_END"], "methodName": ["isInteractive"], "fileName": "org.gradle.internal.logging.sink.ConsoleStateUtil"}, {"methodBody": ["METHOD_START", "{", "return    ( System . console (  )  )     !  =    null ;", "}", "METHOD_END"], "methodName": ["isInteractiveConsoleAttached"], "fileName": "org.gradle.internal.logging.sink.ConsoleStateUtil"}, {"methodBody": ["METHOD_START", "{", "OperationIdentifier   current    =    buildOpId ;", "while    ( current    !  =    null )     {", ". OperationState   state    =    operationsInProgress . get ( current )  ;", "if    ( state    =  =    null )     {", "break ;", "}", "if    ( state   instanceof    . OperationGroup )     {", "return    (  (  . OperationGroup )     ( state )  )  ;", "}", "current    =    state . parentBuildOp ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getGroupFor"], "fileName": "org.gradle.internal.logging.sink.GroupingProgressLogEventGenerator"}, {"methodBody": ["METHOD_START", "{", "GroupingProgressLogEventGenerator . OperationGroup   group    =    getGroupFor ( event . getBuildOperationId (  )  )  ;", "if    ( group    !  =    null )     {", "group . bufferOutput ( event )  ;", "} else    {", "onUngroupedOutput ( event )  ;", "}", "}", "METHOD_END"], "methodName": ["handleOutput"], "fileName": "org.gradle.internal.logging.sink.GroupingProgressLogEventGenerator"}, {"methodBody": ["METHOD_START", "{", "return    ( buildOperationCategory    =  =     ( BuildOperationCategory . TASK )  )     |  |     ( buildOperationCategory    =  =     ( BuildOperationCategory . CONFIGURE _ PROJECT )  )  ;", "}", "METHOD_END"], "methodName": ["isGroupedOperation"], "fileName": "org.gradle.internal.logging.sink.GroupingProgressLogEventGenerator"}, {"methodBody": ["METHOD_START", "{", "OperationIdentifier   buildOpId    =    progressIdToBuildOpIdMap . remove ( completeEvent . getProgressOperationId (  )  )  ;", ". OperationState   state    =    operationsInProgress . remove ( buildOpId )  ;", "if    ( state   instanceof    . OperationGroup )     {", ". OperationGroup   group    =     (  (  . OperationGroup )     ( state )  )  ;", "group . setStatus ( completeEvent . getStatus (  )  ,    completeEvent . isFailed (  )  )  ;", "group . flushOutput (  )  ;", "lastRenderedBuildOpId    =    null ;", "}", "}", "METHOD_END"], "methodName": ["onComplete"], "fileName": "org.gradle.internal.logging.sink.GroupingProgressLogEventGenerator"}, {"methodBody": ["METHOD_START", "{", "for    ( GroupingProgressLogEventGenerator . OperationState   state    :    operationsInProgress . values (  )  )     {", "state . flushOutput (  )  ;", "}", "listener . onOutput ( event )  ;", "operationsInProgress . clear (  )  ;", "progressIdToBuildOpIdMap . clear (  )  ;", "}", "METHOD_END"], "methodName": ["onEnd"], "fileName": "org.gradle.internal.logging.sink.GroupingProgressLogEventGenerator"}, {"methodBody": ["METHOD_START", "{", "if    ( event   instanceof   ProgressStartEvent )     {", "onStart (  (  ( ProgressStartEvent )     ( event )  )  )  ;", "} else", "if    ( event   instanceof   events . RenderableOutputEvent )     {", "handleOutput (  (  ( events . RenderableOutputEvent )     ( event )  )  )  ;", "} else", "if    ( event   instanceof   events . ProgressCompleteEvent )     {", "onComplete (  (  ( events . ProgressCompleteEvent )     ( event )  )  )  ;", "} else", "if    ( event   instanceof   events . EndOutputEvent )     {", "onEnd (  (  ( events . EndOutputEvent )     ( event )  )  )  ;", "} else", "if    ( event   instanceof   events . UpdateNowEvent )     {", "onUpdateNow (  (  ( events . UpdateNowEvent )     ( event )  )  )  ;", "} else", "if    (  !  ( event   instanceof   events . ProgressEvent )  )     {", "listener . onOutput ( event )  ;", "}", "}", "METHOD_END"], "methodName": ["onOutput"], "fileName": "org.gradle.internal.logging.sink.GroupingProgressLogEventGenerator"}, {"methodBody": ["METHOD_START", "{", "boolean   isGrouped    =    isGroupedOperation ( startEvent . getBuildOperationCategory (  )  )  ;", "OperationIdentifier   buildOpId    =    startEvent . getBuildOperationId (  )  ;", "if    ( startEvent . isBuildOperationStart (  )  )     {", "progressIdToBuildOpIdMap . put ( startEvent . getProgressOperationId (  )  ,    buildOpId )  ;", "if    ( isGrouped )     {", "operationsInProgress . put ( buildOpId ,    new    . OperationGroup ( startEvent . getCategory (  )  ,    startEvent . getLoggingHeader (  )  ,    startEvent . getDescription (  )  ,    startEvent . getTimestamp (  )  ,    startEvent . getParentBuildOperationId (  )  ,    buildOpId ,    startEvent . getBuildOperationCategory (  )  )  )  ;", "} else    {", "operationsInProgress . put ( buildOpId ,    new    . OperationState ( startEvent . getParentBuildOperationId (  )  ,    buildOpId )  )  ;", "}", "}", "if    (  (  ( GUtil . isTrue ( startEvent . getLoggingHeader (  )  )  )     &  &     (  !  ( startEvent . getLoggingHeader (  )  . equals ( startEvent . getShortDescription (  )  )  )  )  )     &  &     (  ( buildOpId    =  =    null )     |  |     (  ! isGrouped )  )  )     {", "onUngroupedOutput ( new   LogEvent ( startEvent . getTimestamp (  )  ,    startEvent . getCategory (  )  ,    startEvent . getLogLevel (  )  ,    startEvent . getLoggingHeader (  )  ,    null ,    null )  )  ;", "}", "}", "METHOD_END"], "methodName": ["onStart"], "fileName": "org.gradle.internal.logging.sink.GroupingProgressLogEventGenerator"}, {"methodBody": ["METHOD_START", "{", "if    (  ( lastRenderedBuildOpId )     !  =    null )     {", "listener . onOutput (  . spacerLine ( event . getTimestamp (  )  ,    event . getCategory (  )  )  )  ;", "lastRenderedBuildOpId    =    null ;", "needHeaderSeparator    =    true ;", "}", "listener . onOutput ( event )  ;", "}", "METHOD_END"], "methodName": ["onUngroupedOutput"], "fileName": "org.gradle.internal.logging.sink.GroupingProgressLogEventGenerator"}, {"methodBody": ["METHOD_START", "{", "currentTimePeriod    =    event . getTimestamp (  )  ;", "for    (  . OperationState   state    :    operationsInProgress . values (  )  )     {", "state . maybeFlushOutput ( event . getTimestamp (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["onUpdateNow"], "fileName": "org.gradle.internal.logging.sink.GroupingProgressLogEventGenerator"}, {"methodBody": ["METHOD_START", "{", "return   new   LogEvent ( timestamp ,    category ,    LogLevel . LIFECYCLE ,     \"  \"  ,    null )  ;", "}", "METHOD_END"], "methodName": ["spacerLine"], "fileName": "org.gradle.internal.logging.sink.GroupingProgressLogEventGenerator"}, {"methodBody": ["METHOD_START", "{", "if    ( listener    !  =    null )     {", "listener . onOutput ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["dispatch"], "fileName": "org.gradle.internal.logging.sink.LogEventDispatcher"}, {"methodBody": ["METHOD_START", "{", "return   broadcaster ;", "}", "METHOD_END"], "methodName": ["getBroadcaster"], "fileName": "org.gradle.internal.logging.sink.OutputEventListenerManager"}, {"methodBody": ["METHOD_START", "{", "if    (  ( other )     =  =    listener )     {", "other    =    null ;", "}", "}", "METHOD_END"], "methodName": ["removeListener"], "fileName": "org.gradle.internal.logging.sink.OutputEventListenerManager"}, {"methodBody": ["METHOD_START", "{", "other    =    listener ;", "}", "METHOD_END"], "methodName": ["setListener"], "fileName": "org.gradle.internal.logging.sink.OutputEventListenerManager"}, {"methodBody": ["METHOD_START", "{", "listener . onOutput ( new   LogLevelChangeEvent ( logLevel . get (  )  )  )  ;", "formatters . add ( listener )  ;", "}", "METHOD_END"], "methodName": ["addChain"], "fileName": "org.gradle.internal.logging.sink.OutputEventRenderer"}, {"methodBody": ["METHOD_START", "{", "synchronized ( lock )     {", "if    ( stdout    &  &    stderr )     {", "this . console    =    consoleChain ;", "removeSystemOutAsLDestination (  )  ;", "removeSystemErrAsLDestination (  )  ;", "} else", "if    ( stdout )     {", "this . console    =    onNonError ( consoleChain )  ;", "removeSystemOutAsLDestination (  )  ;", "} else", "if    ( stderr )     {", "this . console    =    onError ( consoleChain )  ;", "removeSystemErrAsLDestination (  )  ;", "} else    {", "this . console    =    consoleChain ;", "}", "addChain ( this . console )  ;", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["addConsoleChain"], "fileName": "org.gradle.internal.logging.sink.OutputEventRenderer"}, {"methodBody": ["METHOD_START", "{", "synchronized ( lock )     {", "addChain ( listener )  ;", "}", "}", "METHOD_END"], "methodName": ["addOutputEventListener"], "fileName": "org.gradle.internal.logging.sink.OutputEventRenderer"}, {"methodBody": ["METHOD_START", "{", "return   addPlainConsole ( new   StreamBackedStandardOutputListener (  (  ( Appendable )     ( originalStdOut )  )  )  ,    new   StreamBackedStandardOutputListener (  (  ( Appendable )     ( originalStdErr )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["addPlainConsole"], "fileName": "org.gradle.internal.logging.sink.OutputEventRenderer"}, {"methodBody": ["METHOD_START", "{", "final   OutputEventListener   stdoutChain    =    new   UserInputStandardOutputRenderer ( new   StyledTextOutputBackedRenderer ( new   StreamingStyledTextOutput ( outputListener )  )  ,    clock )  ;", "final   OutputEventListener   stderrChain    =    new   StyledTextOutputBackedRenderer ( new   StreamingStyledTextOutput ( errorListener )  )  ;", "OutputEventListener   consoleChain    =    new   ThrottlingOutputEventListener ( new   BuildLogLevelFilterRenderer ( new   GroupingProgressLogEventGenerator ( new   PlainConsoleDispatchingListener ( stderrChain ,    stdoutChain )  ,    new   PrettyPrefixedLogHeaderFormatter (  )  ,    true )  )  ,    clock )  ;", "return   addConsoleChain ( consoleChain ,    true ,    true )  ;", "}", "METHOD_END"], "methodName": ["addPlainConsole"], "fileName": "org.gradle.internal.logging.sink.OutputEventRenderer"}, {"methodBody": ["METHOD_START", "{", "return   addRichConsole ( console ,    stdout ,    stderr ,    consoleMetaData ,    false )  ;", "}", "METHOD_END"], "methodName": ["addRichConsole"], "fileName": "org.gradle.internal.logging.sink.OutputEventRenderer"}, {"methodBody": ["METHOD_START", "{", "final   OutputEventListener   consoleChain    =    new   ThrottlingOutputEventListener ( new   UserInputConsoleRenderer ( new   BuildStatusRenderer ( new   WorkInProgressRenderer ( new   BuildLogLevelFilterRenderer ( new   GroupingProgressLogEventGenerator ( new   StyledTextOutputBackedRenderer ( console . getBuildOutputArea (  )  )  ,    new   PrettyPrefixedLogHeaderFormatter (  )  ,    verbose )  )  ,    console . getBuildProgressArea (  )  ,    new   DefaultWorkInProgressFormatter ( consoleMetaData )  ,    new   ConsoleLayoutCalculator ( consoleMetaData )  )  ,    console . getStatusBar (  )  ,    console ,    consoleMetaData )  ,    console )  ,    clock )  ;", "return   addConsoleChain ( consoleChain ,    stdout ,    stderr )  ;", "}", "METHOD_END"], "methodName": ["addRichConsole"], "fileName": "org.gradle.internal.logging.sink.OutputEventRenderer"}, {"methodBody": ["METHOD_START", "{", "addStandardErrorListener ( new   StreamBackedStandardOutputListener ( outputStream )  )  ;", "}", "METHOD_END"], "methodName": ["addStandardErrorListener"], "fileName": "org.gradle.internal.logging.sink.OutputEventRenderer"}, {"methodBody": ["METHOD_START", "{", "synchronized ( lock )     {", "assertUserListenersEnabled (  )  ;", "userStrListeners . add ( listener )  ;", "}", "}", "METHOD_END"], "methodName": ["addStandardErrorListener"], "fileName": "org.gradle.internal.logging.sink.OutputEventRenderer"}, {"methodBody": ["METHOD_START", "{", "addStandardOutputListener ( new   StreamBackedStandardOutputListener ( outputStream )  )  ;", "}", "METHOD_END"], "methodName": ["addStandardOutputListener"], "fileName": "org.gradle.internal.logging.sink.OutputEventRenderer"}, {"methodBody": ["METHOD_START", "{", "synchronized ( lock )     {", "assertUserListenersEnabled (  )  ;", "userStdoutListeners . add ( listener )  ;", "}", "}", "METHOD_END"], "methodName": ["addStandardOutputListener"], "fileName": "org.gradle.internal.logging.sink.OutputEventRenderer"}, {"methodBody": ["METHOD_START", "{", "synchronized ( lock )     {", "originalStdErr    =    System . err ;", "if    (  ( stdErrListener )     !  =    null )     {", "removeChain ( stdErrListener )  ;", "}", "stdErrListener    =    new   OutputEventRenderer . LazyListener ( new   Factory < OutputEventListener >  (  )     {", "@ Override", "public   OutputEventListener   create (  )     {", "return   onError ( new   StyledTextOutputBackedRenderer ( new   StreamingStyledTextOutput ( new   StreamBackedStandardOutputListener (  (  ( Appendable )     ( originalStdErr )  )  )  )  )  )  ;", "}", "}  )  ;", "addChain ( stdErrListener )  ;", "}", "}", "METHOD_END"], "methodName": ["addSystemErrAsLoggingDestination"], "fileName": "org.gradle.internal.logging.sink.OutputEventRenderer"}, {"methodBody": ["METHOD_START", "{", "synchronized ( lock )     {", "originalStdOut    =    System . out ;", "if    (  ( stdOutListener )     !  =    null )     {", "removeChain ( stdOutListener )  ;", "}", "stdOutListener    =    new   OutputEventRenderer . LazyListener ( new   Factory < OutputEventListener >  (  )     {", "@ Override", "public   OutputEventListener   create (  )     {", "return   onNonError ( new   StyledTextOutputBackedRenderer ( new   StreamingStyledTextOutput ( new   StreamBackedStandardOutputListener (  (  ( Appendable )     ( originalStdOut )  )  )  )  )  )  ;", "}", "}  )  ;", "addChain ( stdOutListener )  ;", "}", "}", "METHOD_END"], "methodName": ["addSystemOutAsLoggingDestination"], "fileName": "org.gradle.internal.logging.sink.OutputEventRenderer"}, {"methodBody": ["METHOD_START", "{", "if    (  ( userListenerChain )     =  =    null )     {", "throw   new   IllegalStateException (  \" Custom   standard   output   listeners   not   enabled .  \"  )  ;", "}", "userListenerChain . onOutput ( new   Flush (  )  )  ;", "}", "METHOD_END"], "methodName": ["assertUserListenersEnabled"], "fileName": "org.gradle.internal.logging.sink.OutputEventRenderer"}, {"methodBody": ["METHOD_START", "{", "synchronized ( lock )     {", "ConsoleConfigureAction . execute ( this ,    console )  ;", "}", "}", "METHOD_END"], "methodName": ["attachProcessConsole"], "fileName": "org.gradle.internal.logging.sink.OutputEventRenderer"}, {"methodBody": ["METHOD_START", "{", "addSystemOutAsLoggingDestination (  )  ;", "addSystemErrAsLoggingDestination (  )  ;", "}", "METHOD_END"], "methodName": ["attachSystemOutAndErr"], "fileName": "org.gradle.internal.logging.sink.OutputEventRenderer"}, {"methodBody": ["METHOD_START", "{", "onOutput ( new   LogLevelChangeEvent ( logLevel )  )  ;", "}", "METHOD_END"], "methodName": ["configure"], "fileName": "org.gradle.internal.logging.sink.OutputEventRenderer"}, {"methodBody": ["METHOD_START", "{", "synchronized ( lock )     {", "if    (  ( colourMap )     =  =    null )     {", "colourMap    =    new   DefaultColorMap (  )  ;", "}", "}", "return   colourMap ;", "}", "METHOD_END"], "methodName": ["getColourMap"], "fileName": "org.gradle.internal.logging.sink.OutputEventRenderer"}, {"methodBody": ["METHOD_START", "{", "return   originalStdErr ;", "}", "METHOD_END"], "methodName": ["getOriginalStdErr"], "fileName": "org.gradle.internal.logging.sink.OutputEventRenderer"}, {"methodBody": ["METHOD_START", "{", "return   originalStdOut ;", "}", "METHOD_END"], "methodName": ["getOriginalStdOut"], "fileName": "org.gradle.internal.logging.sink.OutputEventRenderer"}, {"methodBody": ["METHOD_START", "{", "return    (  ( event   instanceof   ProgressStartEvent )     |  |     ( event   instanceof   ProgressEvent )  )     |  |     ( event   instanceof   ProgressCompleteEvent )  ;", "}", "METHOD_END"], "methodName": ["isProgressEvent"], "fileName": "org.gradle.internal.logging.sink.OutputEventRenderer"}, {"methodBody": ["METHOD_START", "{", "return   new   LogEventDispatcher ( null ,    listener )  ;", "}", "METHOD_END"], "methodName": ["onError"], "fileName": "org.gradle.internal.logging.sink.OutputEventRenderer"}, {"methodBody": ["METHOD_START", "{", "return   new   LogEventDispatcher ( listener ,    null )  ;", "}", "METHOD_END"], "methodName": ["onNonError"], "fileName": "org.gradle.internal.logging.sink.OutputEventRenderer"}, {"methodBody": ["METHOD_START", "{", "formatters . remove ( listener )  ;", "listener . onOutput ( new   End (  )  )  ;", "}", "METHOD_END"], "methodName": ["removeChain"], "fileName": "org.gradle.internal.logging.sink.OutputEventRenderer"}, {"methodBody": ["METHOD_START", "{", "synchronized ( lock )     {", "removeChain ( listener )  ;", "}", "}", "METHOD_END"], "methodName": ["removeOutputEventListener"], "fileName": "org.gradle.internal.logging.sink.OutputEventRenderer"}, {"methodBody": ["METHOD_START", "{", "synchronized ( lock )     {", "assertUserListenersEnabled (  )  ;", "userStrListeners . remove ( listener )  ;", "}", "}", "METHOD_END"], "methodName": ["removeStandardErrorListener"], "fileName": "org.gradle.internal.logging.sink.OutputEventRenderer"}, {"methodBody": ["METHOD_START", "{", "synchronized ( lock )     {", "assertUserListenersEnabled (  )  ;", "userStdoutListeners . remove ( listener )  ;", "}", "}", "METHOD_END"], "methodName": ["removeStandardOutputListener"], "fileName": "org.gradle.internal.logging.sink.OutputEventRenderer"}, {"methodBody": ["METHOD_START", "{", "synchronized ( lock )     {", "if    (  ( stdErrListener )     !  =    null )     {", "removeChain ( stdErrListener )  ;", "stdErrListener    =    null ;", "}", "}", "}", "METHOD_END"], "methodName": ["removeSystemErrAsLoggingDestination"], "fileName": "org.gradle.internal.logging.sink.OutputEventRenderer"}, {"methodBody": ["METHOD_START", "{", "synchronized ( lock )     {", "if    (  ( stdListener )     !  =    null )     {", "removeChain ( stdListener )  ;", "stdListener    =    null ;", "}", "}", "}", "METHOD_END"], "methodName": ["removeSystemOutAsLoggingDestination"], "fileName": "org.gradle.internal.logging.sink.OutputEventRenderer"}, {"methodBody": ["METHOD_START", "{", "operation . status    =    progressCompleteEvent . getStatus (  )  ;", "operation . completeTime    =    progressCompleteEvent . getTimestamp (  )  ;", "operation . complete (  )  ;", "}", "METHOD_END"], "methodName": ["completeOperation"], "fileName": "org.gradle.internal.logging.sink.ProgressLogEventGenerator"}, {"methodBody": ["METHOD_START", "{", "for    ( ProgressLogEventGenerator . Operation   operation    :    operations . values (  )  )     {", "operation . completeHeader (  )  ;", "}", "listener . onOutput ( event )  ;", "}", "METHOD_END"], "methodName": ["doOutput"], "fileName": "org.gradle.internal.logging.sink.ProgressLogEventGenerator"}, {"methodBody": ["METHOD_START", "{", "assert    !  ( operations . isEmpty (  )  )  ;", ". Operation   operation    =    operations . remove ( progressCompleteEvent . getProgressOperationId (  )  )  ;", "if    ( operation    =  =    null )     {", "Iterator < Map . Entry < OperationIdentifier ,     . Operation >  >    entryIterator    =    operations . entrySet (  )  . iterator (  )  ;", "Map . Entry < OperationIdentifier ,     . Operation >    lastEntry    =    entryIterator . next (  )  ;", "while    ( entryIterator . hasNext (  )  )     {", "lastEntry    =    entryIterator . next (  )  ;", "}", "entryIterator . remove (  )  ;", "operation    =    lastEntry . getValue (  )  ;", "}", "completeOperation ( progressCompleteEvent ,    operation )  ;", "}", "METHOD_END"], "methodName": ["onComplete"], "fileName": "org.gradle.internal.logging.sink.ProgressLogEventGenerator"}, {"methodBody": ["METHOD_START", "{", "if    ( event   instanceof   ProgressStartEvent )     {", "onStart (  (  ( ProgressStartEvent )     ( event )  )  )  ;", "} else", "if    ( event   instanceof   events . ProgressCompleteEvent )     {", "onComplete (  (  ( events . ProgressCompleteEvent )     ( event )  )  )  ;", "} else", "if    ( event   instanceof   events . RenderableOutputEvent )     {", "doOutput (  (  ( events . RenderableOutputEvent )     ( event )  )  )  ;", "} else", "if    (  !  ( event   instanceof   events . ProgressEvent )  )     {", "listener . onOutput ( event )  ;", "}", "}", "METHOD_END"], "methodName": ["onOutput"], "fileName": "org.gradle.internal.logging.sink.ProgressLogEventGenerator"}, {"methodBody": ["METHOD_START", "{", "ProgressLogEventGenerator . Operation   operation    =    new   ProgressLogEventGenerator . Operation ( progressStartEvent . getCategory (  )  ,    progressStartEvent . getLoggingHeader (  )  ,    progressStartEvent . getTimestamp (  )  ,    progressStartEvent . getBuildOperationId (  )  )  ;", "operations . put ( progressStartEvent . getProgressOperationId (  )  ,    operation )  ;", "if    (  !  (  (  ( progressStartEvent . getLoggingHeader (  )  )     !  =    null )     &  &     ( progressStartEvent . getLoggingHeader (  )  . equals ( progressStartEvent . getShortDescription (  )  )  )  )  )     {", "operation . startHeader (  )  ;", "}", "}", "METHOD_END"], "methodName": ["onStart"], "fileName": "org.gradle.internal.logging.sink.ProgressLogEventGenerator"}, {"methodBody": ["METHOD_START", "{", "if    ( isDebugEnabled (  )  )     {", "( LogLevel . DEBUG ,    null ,    message )  ;", "}", "}", "METHOD_END"], "methodName": ["debug"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isDebugEnabled (  )  )     {", "( LogLevel . DEBUG ,    null ,    format ,    arg )  ;", "}", "}", "METHOD_END"], "methodName": ["debug"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isDebugEnabled (  )  )     {", "( LogLevel . DEBUG ,    null ,    format ,    arg 1  ,    arg 2  )  ;", "}", "}", "METHOD_END"], "methodName": ["debug"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isDebugEnabled (  )  )     {", "( LogLevel . DEBUG ,    null ,    format ,    arguments )  ;", "}", "}", "METHOD_END"], "methodName": ["debug"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isDebugEnabled (  )  )     {", "( LogLevel . DEBUG ,    t ,    msg )  ;", "}", "}", "METHOD_END"], "methodName": ["debug"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isDebugEnabled ( marker )  )     {", "( LogLevel . DEBUG ,    null ,    msg )  ;", "}", "}", "METHOD_END"], "methodName": ["debug"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isDebugEnabled ( marker )  )     {", "( LogLevel . DEBUG ,    null ,    format ,    arg )  ;", "}", "}", "METHOD_END"], "methodName": ["debug"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isDebugEnabled ( marker )  )     {", "( LogLevel . DEBUG ,    null ,    format ,    arg 1  ,    arg 2  )  ;", "}", "}", "METHOD_END"], "methodName": ["debug"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isDebugEnabled ( marker )  )     {", "( LogLevel . DEBUG ,    null ,    format ,    argArray )  ;", "}", "}", "METHOD_END"], "methodName": ["debug"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isDebugEnabled ( marker )  )     {", "( LogLevel . DEBUG ,    t ,    msg )  ;", "}", "}", "METHOD_END"], "methodName": ["debug"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isErrorEnabled (  )  )     {", "( LogLevel . ERROR ,    null ,    message )  ;", "}", "}", "METHOD_END"], "methodName": ["error"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isErrorEnabled (  )  )     {", "( LogLevel . ERROR ,    null ,    format ,    arg )  ;", "}", "}", "METHOD_END"], "methodName": ["error"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isErrorEnabled (  )  )     {", "( LogLevel . ERROR ,    null ,    format ,    arg 1  ,    arg 2  )  ;", "}", "}", "METHOD_END"], "methodName": ["error"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isErrorEnabled (  )  )     {", "( LogLevel . ERROR ,    null ,    format ,    arguments )  ;", "}", "}", "METHOD_END"], "methodName": ["error"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isErrorEnabled (  )  )     {", "( LogLevel . ERROR ,    t ,    msg )  ;", "}", "}", "METHOD_END"], "methodName": ["error"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isErrorEnabled ( marker )  )     {", "( LogLevel . ERROR ,    null ,    msg )  ;", "}", "}", "METHOD_END"], "methodName": ["error"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isErrorEnabled ( marker )  )     {", "( LogLevel . ERROR ,    null ,    format ,    arg )  ;", "}", "}", "METHOD_END"], "methodName": ["error"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isErrorEnabled ( marker )  )     {", "( LogLevel . ERROR ,    null ,    format ,    arg 1  ,    arg 2  )  ;", "}", "}", "METHOD_END"], "methodName": ["error"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isErrorEnabled ( marker )  )     {", "( LogLevel . ERROR ,    null ,    format ,    argArray )  ;", "}", "}", "METHOD_END"], "methodName": ["error"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isErrorEnabled ( marker )  )     {", "( LogLevel . ERROR ,    t ,    msg )  ;", "}", "}", "METHOD_END"], "methodName": ["error"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isInfoEnabled (  )  )     {", "( LogLevel . INFO ,    null ,    message )  ;", "}", "}", "METHOD_END"], "methodName": ["info"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isInfoEnabled (  )  )     {", "( LogLevel . INFO ,    null ,    format ,    arg )  ;", "}", "}", "METHOD_END"], "methodName": ["info"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isInfoEnabled (  )  )     {", "( LogLevel . INFO ,    null ,    format ,    arg 1  ,    arg 2  )  ;", "}", "}", "METHOD_END"], "methodName": ["info"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isInfoEnabled (  )  )     {", "( LogLevel . INFO ,    null ,    format ,    arguments )  ;", "}", "}", "METHOD_END"], "methodName": ["info"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isInfoEnabled (  )  )     {", "( LogLevel . INFO ,    t ,    msg )  ;", "}", "}", "METHOD_END"], "methodName": ["info"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isInfoEnabled ( marker )  )     {", "( toLogLevel ( marker )  ,    null ,    msg )  ;", "}", "}", "METHOD_END"], "methodName": ["info"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isInfoEnabled ( marker )  )     {", "( toLogLevel ( marker )  ,    null ,    format ,    arg )  ;", "}", "}", "METHOD_END"], "methodName": ["info"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isInfoEnabled ( marker )  )     {", "( toLogLevel ( marker )  ,    null ,    format ,    arg 1  ,    arg 2  )  ;", "}", "}", "METHOD_END"], "methodName": ["info"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isInfoEnabled ( marker )  )     {", "( toLogLevel ( marker )  ,    null ,    format ,    argArray )  ;", "}", "}", "METHOD_END"], "methodName": ["info"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isInfoEnabled ( marker )  )     {", "( toLogLevel ( marker )  ,    t ,    msg )  ;", "}", "}", "METHOD_END"], "methodName": ["info"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "return   isLevelAtMost ( LogLevel . DEBUG )  ;", "}", "METHOD_END"], "methodName": ["isDebugEnabled"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "return   isDebugEnabled (  )  ;", "}", "METHOD_END"], "methodName": ["isDebugEnabled"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "return   isLevelAtMost ( LogLevel . ERROR )  ;", "}", "METHOD_END"], "methodName": ["isErrorEnabled"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "return   isErrorEnabled (  )  ;", "}", "METHOD_END"], "methodName": ["isErrorEnabled"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "return   isLevelAtMost ( LogLevel . INFO )  ;", "}", "METHOD_END"], "methodName": ["isInfoEnabled"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "return   isLevelAtMost ( toLogLevel ( marker )  )  ;", "}", "METHOD_END"], "methodName": ["isInfoEnabled"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "return    ( levelLimit . compareTo ( context . getLevel (  )  )  )     >  =     0  ;", "}", "METHOD_END"], "methodName": ["isLevelAtMost"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isTraceEnabled"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "return   isTraceEnabled (  )  ;", "}", "METHOD_END"], "methodName": ["isTraceEnabled"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "return   isLevelAtMost ( LogLevel . WARN )  ;", "}", "METHOD_END"], "methodName": ["isWarnEnabled"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "return   isWarnEnabled (  )  ;", "}", "METHOD_END"], "methodName": ["isWarnEnabled"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "OperationIdentifier   buildOperationId    =    CurrentBuildOperationRef . instance (  )  . getId (  )  ;", "LogEvent   logEvent    =    new   LogEvent ( clock . getCurrentTime (  )  ,    name ,    logLevel ,    message ,    throwable ,    buildOperationId )  ;", "outputEventListener    =    context . get (  )  ;", "try    {", "outputEventListener . onOutput ( logEvent )  ;", "}    catch    ( Throwable   e )     {", "e . printStackTrace ( System . out )  ;", "}", "}", "METHOD_END"], "methodName": ["log"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "log ( logLevel ,    throwable ,    format ,    new   Object [  ]  {    arg    }  )  ;", "}", "METHOD_END"], "methodName": ["log"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "log ( logLevel ,    throwable ,    format ,    new   Object [  ]  {    arg 1  ,    arg 2     }  )  ;", "}", "METHOD_END"], "methodName": ["log"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "FormattingTuple   tuple    =    MessageFormatter . arrayFormat ( format ,    args )  ;", "Throwable   edThrowable    =     ( throwable    =  =    null )     ?    tuple . getThrowable (  )     :    throwable ;", "log ( logLevel ,    edThrowable ,    tuple . getMessage (  )  )  ;", "}", "METHOD_END"], "methodName": ["log"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( marker    =  =    null )     {", "return   LogLevel . INFO ;", "}", "if    ( marker    =  =     ( LLIFECYCLE )  )     {", "return   LogLevel . LIFECYCLE ;", "}", "if    ( marker    =  =     ( LQUIET )  )     {", "return   LogLevel . QUIET ;", "}", "return   LogLevel . INFO ;", "}", "METHOD_END"], "methodName": ["toLogLevel"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isWarnEnabled (  )  )     {", "( LogLevel . WARN ,    null ,    message )  ;", "}", "}", "METHOD_END"], "methodName": ["warn"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isWarnEnabled (  )  )     {", "( LogLevel . WARN ,    null ,    format ,    arg )  ;", "}", "}", "METHOD_END"], "methodName": ["warn"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isWarnEnabled (  )  )     {", "( LogLevel . WARN ,    null ,    format ,    arg 1  ,    arg 2  )  ;", "}", "}", "METHOD_END"], "methodName": ["warn"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isWarnEnabled (  )  )     {", "( LogLevel . WARN ,    null ,    format ,    arguments )  ;", "}", "}", "METHOD_END"], "methodName": ["warn"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isWarnEnabled (  )  )     {", "( LogLevel . WARN ,    t ,    msg )  ;", "}", "}", "METHOD_END"], "methodName": ["warn"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isWarnEnabled ( marker )  )     {", "( LogLevel . WARN ,    null ,    msg )  ;", "}", "}", "METHOD_END"], "methodName": ["warn"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isWarnEnabled ( marker )  )     {", "( LogLevel . WARN ,    null ,    format ,    arg )  ;", "}", "}", "METHOD_END"], "methodName": ["warn"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isWarnEnabled ( marker )  )     {", "( LogLevel . WARN ,    null ,    format ,    arg 1  ,    arg 2  )  ;", "}", "}", "METHOD_END"], "methodName": ["warn"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isWarnEnabled ( marker )  )     {", "( LogLevel . WARN ,    null ,    format ,    argArray )  ;", "}", "}", "METHOD_END"], "methodName": ["warn"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( isWarnEnabled ( marker )  )     {", "( LogLevel . WARN ,    t ,    msg )  ;", "}", "}", "METHOD_END"], "methodName": ["warn"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLogger"}, {"methodBody": ["METHOD_START", "{", "loggers . put ( name ,    new   OutputEventListenerBackedLoggerContext . NoOpLogger ( name )  )  ;", "}", "METHOD_END"], "methodName": ["addNoOpLogger"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLoggerContext"}, {"methodBody": ["METHOD_START", "{", "addNoOpLogger ( OutputEventListenerBackedLoggerContext . HTTP _ CLIENT _ WIRE _ LOGGER _ NAME )  ;", "addNoOpLogger (  \" headers \"  )  ;", "addNoOpLogger ( OutputEventListenerBackedLoggerContext . META _ INF _ EXTENSION _ MODULE _ LOGGER _ NAME )  ;", "addNoOpLogger (  \" HttpRequestHandler \"  )  ;", "}", "METHOD_END"], "methodName": ["applyDefaultLoggersConfig"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLoggerContext"}, {"methodBody": ["METHOD_START", "{", "return   level . get (  )  ;", "}", "METHOD_END"], "methodName": ["getLevel"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLoggerContext"}, {"methodBody": ["METHOD_START", "{", "Logger   logger    =    loggers . get ( name )  ;", "if    ( logger    !  =    null )     {", "return   logger ;", "}", "logger    =    loggers . putIfAbsent ( name ,    new    ( name ,    this ,    clock )  )  ;", "return   logger    !  =    null    ?    logger    :    loggers . get ( name )  ;", "}", "METHOD_END"], "methodName": ["getLogger"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLoggerContext"}, {"methodBody": ["METHOD_START", "{", "return   outputEventListener . get (  )  ;", "}", "METHOD_END"], "methodName": ["getOutputEventListener"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLoggerContext"}, {"methodBody": ["METHOD_START", "{", "setLevel ( OutputEventListenerBackedLoggerContext . DEFAULT _ LOG _ LEVEL )  ;", "OutputEventRenderer   renderer    =    new   OutputEventRenderer ( clock )  ;", "renderer . attachSystemOutAndErr (  )  ;", "setOutputEventListener ( renderer )  ;", "}", "METHOD_END"], "methodName": ["reset"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLoggerContext"}, {"methodBody": ["METHOD_START", "{", "if    ( level    =  =    null )     {", "throw   new   IllegalArgumentException (  \" Global      level   cannot   be   set   to   null \"  )  ;", "}", "this . level . set ( level )  ;", "}", "METHOD_END"], "methodName": ["setLevel"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLoggerContext"}, {"methodBody": ["METHOD_START", "{", "this . outputEventListener . set ( outputEventListener )  ;", "}", "METHOD_END"], "methodName": ["setOutputEventListener"], "fileName": "org.gradle.internal.logging.slf4j.OutputEventListenerBackedLoggerContext"}, {"methodBody": ["METHOD_START", "{", "if    ( logLevel    =  =     ( currentLevel )  )     {", "return ;", "}", "OutputEventListenerBackederContext   context    =     (  ( OutputEventListenerBackederContext )     ( erFactory . getIerFactory (  )  )  )  ;", "if    (  ( currentLevel )     =  =    null )     {", "context . setOutputEventListener ( outputEventListener )  ;", "}", "currentLevel    =    logLevel ;", "context . setLevel ( logLevel )  ;", "}", "METHOD_END"], "methodName": ["configure"], "fileName": "org.gradle.internal.logging.slf4j.Slf4jLoggingConfigurer"}, {"methodBody": ["METHOD_START", "{", "if    ( installed )     {", "return ;", "}", "LogManager . getLogManager (  )  . reset (  )  ;", "SLF 4 JBridgeHandler . install (  )  ;", "er . setLevel ( level )  ;", "installed    =    true ;", "}", "METHOD_END"], "methodName": ["install"], "fileName": "org.gradle.internal.logging.source.JavaUtilLoggingSystem"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( installed )  )     {", "return ;", "}", "LogManager . getLogManager (  )  . reset (  )  ;", "er . setLevel ( level )  ;", "installed    =    false ;", "}", "METHOD_END"], "methodName": ["uninstall"], "fileName": "org.gradle.internal.logging.source.JavaUtilLoggingSystem"}, {"methodBody": ["METHOD_START", "{", "return   new   LoggingSystem . Snapshot (  )     {  }  ;", "}", "METHOD_END"], "methodName": ["dummy"], "fileName": "org.gradle.internal.logging.source.NoOpLoggingSystem"}, {"methodBody": ["METHOD_START", "{", "if    (  ( original )     =  =    null )     {", "PrintStream   originalStream    =    get (  )  ;", "original    =    new    . PrintStreamDestination ( originalStream )  ;", "}", "enabled    =    true ;", "outstr . flush (  )  ;", "outputEventListener . onOutput ( new   LogLevelChangeEvent ( logLevel )  )  ;", "destination . set ( listener )  ;", "if    (  ( get (  )  )     !  =     ( outstr )  )     {", "set ( outstr )  ;", "}", "}", "METHOD_END"], "methodName": ["install"], "fileName": "org.gradle.internal.logging.source.PrintStreamLoggingSystem"}, {"methodBody": ["METHOD_START", "{", "PrintStreamLoggingSystem . SnapshotImpl   snapshot    =     (  ( PrintStreamLoggingSystem . SnapshotImpl )     ( state )  )  ;", "enabled    =    snapshot . enabled ;", "logLevel    =    snapshot . logLevel ;", "if    ( enabled )     {", "install (  )  ;", "} else    {", "uninstall (  )  ;", "}", "}", "METHOD_END"], "methodName": ["restore"], "fileName": "org.gradle.internal.logging.source.PrintStreamLoggingSystem"}, {"methodBody": ["METHOD_START", "{", "return   new   PrintStreamLoggingSystem . SnapshotImpl ( enabled ,    logLevel )  ;", "}", "METHOD_END"], "methodName": ["snapshot"], "fileName": "org.gradle.internal.logging.source.PrintStreamLoggingSystem"}, {"methodBody": ["METHOD_START", "{", "if    (  ( original )     !  =    null )     {", "outstr . flush (  )  ;", "destination . set ( original )  ;", "set ( original . original )  ;", "original    =    null ;", "}", "}", "METHOD_END"], "methodName": ["uninstall"], "fileName": "org.gradle.internal.logging.source.PrintStreamLoggingSystem"}, {"methodBody": ["METHOD_START", "{", "text ( String . valueOf ( c )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["append"], "fileName": "org.gradle.internal.logging.text.AbstractStyledTextOutput"}, {"methodBody": ["METHOD_START", "{", "text (  ( csq    =  =    null    ?     \" null \"     :    csq )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["append"], "fileName": "org.gradle.internal.logging.text.AbstractStyledTextOutput"}, {"methodBody": ["METHOD_START", "{", "text (  ( csq    =  =    null    ?     \" null \"     :    csq . subSequence ( start ,    end )  )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["append"], "fileName": "org.gradle.internal.logging.text.AbstractStyledTextOutput"}, {"methodBody": ["METHOD_START", "{", "StringWriter   out    =    new   StringWriter (  )  ;", "PrintWriter   writer    =    new   PrintWriter ( out )  ;", "throwable . printStackTrace ( writer )  ;", "writer . close (  )  ;", "( out . toString (  )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["exception"], "fileName": "org.gradle.internal.logging.text.AbstractStyledTextOutput"}, {"methodBody": ["METHOD_START", "{", "text ( String . format ( pattern ,    args )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["format"], "fileName": "org.gradle.internal.logging.text.AbstractStyledTextOutput"}, {"methodBody": ["METHOD_START", "{", "format ( pattern ,    args )  ;", "println (  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["formatln"], "fileName": "org.gradle.internal.logging.text.AbstractStyledTextOutput"}, {"methodBody": ["METHOD_START", "{", "return   style ;", "}", "METHOD_END"], "methodName": ["getStyle"], "fileName": "org.gradle.internal.logging.text.AbstractStyledTextOutput"}, {"methodBody": ["METHOD_START", "{", "text ( output )  ;", "}", "METHOD_END"], "methodName": ["onOutput"], "fileName": "org.gradle.internal.logging.text.AbstractStyledTextOutput"}, {"methodBody": ["METHOD_START", "{", "text ( SystemProperties . getInstance (  )  . getLineSeparator (  )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["println"], "fileName": "org.gradle.internal.logging.text.AbstractStyledTextOutput"}, {"methodBody": ["METHOD_START", "{", "text ( text )  ;", "println (  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["println"], "fileName": "org.gradle.internal.logging.text.AbstractStyledTextOutput"}, {"methodBody": ["METHOD_START", "{", "if    ( style    !  =     ( this . style )  )     {", "this . style    =    style ;", "doChange ( style )  ;", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["style"], "fileName": "org.gradle.internal.logging.text.AbstractStyledTextOutput"}, {"methodBody": ["METHOD_START", "{", "doAppend (  ( text    =  =    null    ?     \" null \"     :    text . toString (  )  )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["text"], "fileName": "org.gradle.internal.logging.text.AbstractStyledTextOutput"}, {"methodBody": ["METHOD_START", "{", "return   new   AbstractStyledTextOutput . StyleOverrideTextOutput ( style ,    this )  ;", "}", "METHOD_END"], "methodName": ["withStyle"], "fileName": "org.gradle.internal.logging.text.AbstractStyledTextOutput"}, {"methodBody": ["METHOD_START", "{", "return   create ( logCategory . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.internal.logging.text.AbstractStyledTextOutputFactory"}, {"methodBody": ["METHOD_START", "{", "return   create ( logCategory . getName (  )  ,    logLevel )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.internal.logging.text.AbstractStyledTextOutputFactory"}, {"methodBody": ["METHOD_START", "{", "return   create ( logCategory ,    null )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.internal.logging.text.AbstractStyledTextOutputFactory"}, {"methodBody": ["METHOD_START", "{", "return   hasContent ;", "}", "METHOD_END"], "methodName": ["getHasContent"], "fileName": "org.gradle.internal.logging.text.BufferingStyledTextOutput"}, {"methodBody": ["METHOD_START", "{", "for    ( Action < StyledTextOutput >    event    :    events )     {", "event . execute ( output )  ;", "}", "events . clear (  )  ;", "}", "METHOD_END"], "methodName": ["writeTo"], "fileName": "org.gradle.internal.logging.text.BufferingStyledTextOutput"}, {"methodBody": ["METHOD_START", "{", "return   style ;", "}", "METHOD_END"], "methodName": ["getStyle"], "fileName": "org.gradle.internal.logging.text.Span"}, {"methodBody": ["METHOD_START", "{", "return   text ;", "}", "METHOD_END"], "methodName": ["getText"], "fileName": "org.gradle.internal.logging.text.Span"}, {"methodBody": ["METHOD_START", "{", "try    {", "appendable . append ( o )  ;", "flushable . flush (  )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["onOutput"], "fileName": "org.gradle.internal.logging.text.StreamBackedStandardOutputListener"}, {"methodBody": ["METHOD_START", "{", "if    (  ( closeab    !  =    null )     {", "closeabclose (  )  ;", "}", "}", "METHOD_END"], "methodName": ["close"], "fileName": "org.gradle.internal.logging.text.StreamingStyledTextOutput"}, {"methodBody": ["METHOD_START", "{", "return   new   StreamingStyledTextOutput ( target )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.internal.logging.text.StreamingStyledTextOutputFactory"}, {"methodBody": ["METHOD_START", "{", "return   color ;", "}", "METHOD_END"], "methodName": ["getColor"], "fileName": "org.gradle.internal.logging.text.Style"}, {"methodBody": ["METHOD_START", "{", "return   emphasises ;", "}", "METHOD_END"], "methodName": ["getEmphasises"], "fileName": "org.gradle.internal.logging.text.Style"}, {"methodBody": ["METHOD_START", "{", "return   new   Style ( Collections . EMPTY _ SET ,    color )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.internal.logging.text.Style"}, {"methodBody": ["METHOD_START", "{", "return   Style . of ( emphasis ,    Style . Color . DEFAULT )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.internal.logging.text.Style"}, {"methodBody": ["METHOD_START", "{", "return   new   Style ( EnumSet . of ( emphasis )  ,    color )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.internal.logging.text.Style"}, {"methodBody": ["METHOD_START", "{", "textOutputs . clear (  )  ;", "}", "METHOD_END"], "methodName": ["clear"], "fileName": "org.gradle.internal.logging.text.TestStyledTextOutputFactory"}, {"methodBody": ["METHOD_START", "{", "StyledTextOutput   textOutput    =    new   TestStyledTextOutput (  )  ;", "if    ( logCategory    !  =    null )     {", "textOutput . append (  \"  {  \"  )  . append ( logCategory )  . append (  \"  }  \"  )  ;", "}", "if    ( logLevel    !  =    null )     {", "textOutput . append (  \"  {  \"  )  . append ( logLevel . toString (  )  )  . append (  \"  }  \"  )  ;", "}", "textOutputs . add ( textOutput )  ;", "return   textOutput ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.internal.logging.text.TestStyledTextOutputFactory"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   builder    =    new   StringBuilder (  )  ;", "for    (    textOutput    :    textOutputs )     {", "builder . append ( textOutput )  ;", "}", "return   builder . toString (  )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.gradle.internal.logging.text.TestStyledTextOutputFactory"}, {"methodBody": ["METHOD_START", "{", "SingleMessageLogger . nagUserWith ( SingleMessageLogger . incubatingFeatureHandler ,    new   FeatureUsage ( incubatingFeature ,    SingleMessageLogger . class )  )  ;", "}", "METHOD_END"], "methodName": ["incubatingFeatureUsed"], "fileName": "org.gradle.util.SingleMessageLogger"}, {"methodBody": ["METHOD_START", "{", "SingleMessageLogger . deprecatedFeatureHandler . init ( reporter ,    warningMode )  ;", "}", "METHOD_END"], "methodName": ["init"], "fileName": "org.gradle.util.SingleMessageLogger"}, {"methodBody": ["METHOD_START", "{", "return   SingleMessageLogger . ENABLED . get (  )  ;", "}", "METHOD_END"], "methodName": ["isEnabled"], "fileName": "org.gradle.util.SingleMessageLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( SingleMessageLogger . isEnabled (  )  )     {", "SingleMessageLogger . nagUserWith ( String . format (  \"  % s    % s \"  ,    thing ,    LoggingDeprecatedFeatureHandler . getDeprecationMessage (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["nagUserOfDeprecated"], "fileName": "org.gradle.util.SingleMessageLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( SingleMessageLogger . isEnabled (  )  )     {", "SingleMessageLogger . nagUserWith ( String . format (  \"  % s    % s .     % s .  \"  ,    thing ,    LoggingDeprecatedFeatureHandler . getDeprecationMessage (  )  ,    explanation )  )  ;", "}", "}", "METHOD_END"], "methodName": ["nagUserOfDeprecated"], "fileName": "org.gradle.util.SingleMessageLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( SingleMessageLogger . isEnabled (  )  )     {", "SingleMessageLogger . nagUserOfDeprecated ( String . format (  \"  % s .    This   behaviour \"  ,    behaviour )  )  ;", "}", "}", "METHOD_END"], "methodName": ["nagUserOfDeprecatedBehaviour"], "fileName": "org.gradle.util.SingleMessageLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( SingleMessageLogger . isEnabled (  )  )     {", "if    ( StringUtils . isEmpty ( explanation )  )     {", "SingleMessageLogger . nagUserWith ( String . format (  \"  % s .    This    % s .  \"  ,    thing ,    LoggingDeprecatedFeatureHandler . getDeprecationMessage (  )  )  )  ;", "} else    {", "SingleMessageLogger . nagUserWith ( String . format (  \"  % s .    This    % s .     % s .  \"  ,    thing ,    LoggingDeprecatedFeatureHandler . getDeprecationMessage (  )  ,    explanation )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["nagUserOfDeprecatedThing"], "fileName": "org.gradle.util.SingleMessageLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( SingleMessageLogger . isEnabled (  )  )     {", "SingleMessageLogger . nagUserWith ( String . format (  \" The    % s    % s .     % s \"  ,    api ,    LoggingDeprecatedFeatureHandler . getDeprecationMessage (  )  ,    advice )  )  ;", "}", "}", "METHOD_END"], "methodName": ["nagUserOfDiscontinuedApi"], "fileName": "org.gradle.util.SingleMessageLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( SingleMessageLogger . isEnabled (  )  )     {", "SingleMessageLogger . nagUserWith ( String . format (  \" The    % s   method    % s .  \"  ,    methodName ,    LoggingDeprecatedFeatureHandler . getDeprecationMessage (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["nagUserOfDiscontinuedMethod"], "fileName": "org.gradle.util.SingleMessageLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( SingleMessageLogger . isEnabled (  )  )     {", "SingleMessageLogger . nagUserWith ( String . format (  \" The    % s   method    % s .     % s \"  ,    methodName ,    LoggingDeprecatedFeatureHandler . getDeprecationMessage (  )  ,    advice )  )  ;", "}", "}", "METHOD_END"], "methodName": ["nagUserOfDiscontinuedMethod"], "fileName": "org.gradle.util.SingleMessageLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( SingleMessageLogger . isEnabled (  )  )     {", "SingleMessageLogger . nagUserWith ( String . format (  \" The    % s   property    % s .     % s \"  ,    propertyName ,    LoggingDeprecatedFeatureHandler . getDeprecationMessage (  )  ,    advice )  )  ;", "}", "}", "METHOD_END"], "methodName": ["nagUserOfDiscontinuedProperty"], "fileName": "org.gradle.util.SingleMessageLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( SingleMessageLogger . isEnabled (  )  )     {", "SingleMessageLogger . nagUserWith ( String . format (  \" The    % s   plugin    % s .    Consider   using   the    % s   plugin   instead .  \"  ,    pluginName ,    LoggingDeprecatedFeatureHandler . getDeprecationMessage (  )  ,    replacement )  )  ;", "}", "}", "METHOD_END"], "methodName": ["nagUserOfPluginReplacedWithExternalOne"], "fileName": "org.gradle.util.SingleMessageLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( SingleMessageLogger . isEnabled (  )  )     {", "SingleMessageLogger . nagUserWith ( String . format (  \" The    % s   method    % s .    Please   use   the    % s   method   instead .  \"  ,    methodName ,    LoggingDeprecatedFeatureHandler . getDeprecationMessage (  )  ,    replacement )  )  ;", "}", "}", "METHOD_END"], "methodName": ["nagUserOfReplacedMethod"], "fileName": "org.gradle.util.SingleMessageLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( SingleMessageLogger . isEnabled (  )  )     {", "SingleMessageLogger . nagUserWith ( String . format (  \" The    % s   named   parameter    % s .    Please   use   the    % s   named   parameter   instead .  \"  ,    parameterName ,    LoggingDeprecatedFeatureHandler . getDeprecationMessage (  )  ,    replacement )  )  ;", "}", "}", "METHOD_END"], "methodName": ["nagUserOfReplacedNamedParameter"], "fileName": "org.gradle.util.SingleMessageLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( SingleMessageLogger . isEnabled (  )  )     {", "SingleMessageLogger . nagUserWith ( String . format (  \" The    % s   plugin    % s .    Please   use   the    % s   plugin   instead .  \"  ,    pluginName ,    LoggingDeprecatedFeatureHandler . getDeprecationMessage (  )  ,    replacement )  )  ;", "}", "}", "METHOD_END"], "methodName": ["nagUserOfReplacedPlugin"], "fileName": "org.gradle.util.SingleMessageLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( SingleMessageLogger . isEnabled (  )  )     {", "SingleMessageLogger . nagUserWith ( String . format (  \" The    % s   property    % s .    Please   use   the    % s   property   instead .  \"  ,    propertyName ,    LoggingDeprecatedFeatureHandler . getDeprecationMessage (  )  ,    replacement )  )  ;", "}", "}", "METHOD_END"], "methodName": ["nagUserOfReplacedProperty"], "fileName": "org.gradle.util.SingleMessageLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( SingleMessageLogger . isEnabled (  )  )     {", "SingleMessageLogger . nagUserWith ( String . format (  \" The    % s   task    % s .    Please   use   the    % s   task   instead .  \"  ,    taskName ,    LoggingDeprecatedFeatureHandler . getDeprecationMessage (  )  ,    replacement )  )  ;", "}", "}", "METHOD_END"], "methodName": ["nagUserOfReplacedTask"], "fileName": "org.gradle.util.SingleMessageLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( SingleMessageLogger . isEnabled (  )  )     {", "SingleMessageLogger . nagUserWith ( String . format (  \" The    % s   task   type    % s .    Please   use   the    % s   instead .  \"  ,    taskName ,    LoggingDeprecatedFeatureHandler . getDeprecationMessage (  )  ,    replacement )  )  ;", "}", "}", "METHOD_END"], "methodName": ["nagUserOfReplacedTaskType"], "fileName": "org.gradle.util.SingleMessageLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( SingleMessageLogger . isEnabled (  )  )     {", "SingleMessageLogger . nagUserWith ( String . format (  \" The    % s    % s .    Consider   using    % s   instead .  \"  ,    toolName ,    LoggingDeprecatedFeatureHandler . getDeprecationMessage (  )  ,    replacement )  )  ;", "}", "}", "METHOD_END"], "methodName": ["nagUserOfToolReplacedWithExternalOne"], "fileName": "org.gradle.util.SingleMessageLogger"}, {"methodBody": ["METHOD_START", "{", "if    ( SingleMessageLogger . isEnabled (  )  )     {", "SingleMessageLogger . nagUserWith ( SingleMessageLogger . deprecatedFeatureHandler ,    new   FeatureUsage ( message ,    SingleMessageLogger . class )  )  ;", "}", "}", "METHOD_END"], "methodName": ["nagUserWith"], "fileName": "org.gradle.util.SingleMessageLogger"}, {"methodBody": ["METHOD_START", "{", "handler . featureUsed ( usage )  ;", "}", "METHOD_END"], "methodName": ["nagUserWith"], "fileName": "org.gradle.util.SingleMessageLogger"}, {"methodBody": ["METHOD_START", "{", "SingleMessageLogger . deprecatedFeatureHandler . reportSuppressedDeprecations (  )  ;", "}", "METHOD_END"], "methodName": ["reportSuppressedDeprecations"], "fileName": "org.gradle.util.SingleMessageLogger"}, {"methodBody": ["METHOD_START", "{", "SingleMessageLogger . deprecatedFeatureHandler . reset (  )  ;", "SingleMessageLogger . incubatingFeatureHandler . reset (  )  ;", "}", "METHOD_END"], "methodName": ["reset"], "fileName": "org.gradle.util.SingleMessageLogger"}, {"methodBody": ["METHOD_START", "{", "SingleMessageLogger . ENABLED . set ( false )  ;", "try    {", "action . run (  )  ;", "}    finally    {", "SingleMessageLogger . ENABLED . set ( true )  ;", "}", "}", "METHOD_END"], "methodName": ["whileDisabled"], "fileName": "org.gradle.util.SingleMessageLogger"}, {"methodBody": ["METHOD_START", "{", "SingleMessageLogger . ENABLED . set ( false )  ;", "try    {", "return   factory . create (  )  ;", "}    finally    {", "SingleMessageLogger . ENABLED . set ( true )  ;", "}", "}", "METHOD_END"], "methodName": ["whileDisabled"], "fileName": "org.gradle.util.SingleMessageLogger"}, {"methodBody": ["METHOD_START", "{", "return   StaticLoggerBinder . SINGLETON ;", "}", "METHOD_END"], "methodName": ["getSingleton"], "fileName": "org.slf4j.impl.StaticLoggerBinder"}]