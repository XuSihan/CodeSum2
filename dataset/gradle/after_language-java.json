[{"methodBody": ["METHOD_START", "{", "if    ( compileOptions . isFork (  )  )     {", "ForkOptions   forkOptions    =    compileOptions . getForkOptions (  )  ;", "File   javaHome    =    forkOptions . getJavaHome (  )  ;", "if    ( javaHome    !  =    null )     {", "return   new   JavaHomeBased ( javaHome ,    javaCompilerFactory ,    execActionFactory ,    jvmVersionDetector )  ;", "}", "}", "return   new   CurrentJvm ( javaCompilerFactory ,    execActionFactory )  ;", "}", "METHOD_END"], "methodName": ["forCompileOptions"], "fileName": "org.gradle.api.internal.tasks.JavaToolChainFactory"}, {"methodBody": ["METHOD_START", "{", "ExecHandleBuilder   builder    =    execHandleFactory . newExec (  )  ;", "builder . setWorkingDir ( spec . getWorkingDir (  )  )  ;", "builder . setExecutable ( executable )  ;", "argumentsGenerator . collectArguments ( spec ,    new   ExecSpecBackedArgCollector ( builder )  )  ;", "builder . setIgnoreExitValue ( true )  ;", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["createCompilerHandle"], "fileName": "org.gradle.api.internal.tasks.compile.CommandLineJavaCompiler"}, {"methodBody": ["METHOD_START", "{", "handle . start (  )  ;", "ExecResult   result    =    handle . waitForFinish (  )  ;", "if    (  ( result . getExitValue (  )  )     !  =     0  )     {", "throw   new   ationFailedException ( result . getExitValue (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["executeCompiler"], "fileName": "org.gradle.api.internal.tasks.compile.CommandLineJavaCompiler"}, {"methodBody": ["METHOD_START", "{", "List < String >    launcherOptions    =    new   JavaCompilerArgumentsBuilder ( spec )  . includeLauncherOptions ( true )  . includeMainOptions ( false )  . includeClasspath ( false )  . build (  )  ;", "List < String >    remainingArgs    =    new   JavaCompilerArgumentsBuilder ( spec )  . includeSourceFiles ( true )  . build (  )  ;", "return   Iterables . concat ( launcherOptions ,    shortenArgs ( spec . getTempDir (  )  ,    remainingArgs )  )  ;", "}", "METHOD_END"], "methodName": ["generate"], "fileName": "org.gradle.api.internal.tasks.compile.CommandLineJavaCompilerArgumentsGenerator"}, {"methodBody": ["METHOD_START", "{", "return   ArgWriter . argsFileGenerator ( new   File ( tempDir ,     \" java - compiler - args . txt \"  )  ,    ArgWriter . unixStyleFactory (  )  )  . transform ( args )  ;", "}", "METHOD_END"], "methodName": ["shortenArgs"], "fileName": "org.gradle.api.internal.tasks.compile.CommandLineJavaCompilerArgumentsGenerator"}, {"methodBody": ["METHOD_START", "{", "outputs . doNotCacheIf (  \" Forking   compiler   via   ForkOptions . executable \"  ,    new   Spec < Task >  (  )     {", "@ Override", "public   boolean   isSatisfiedBy ( Task   element )     {", "return    ( compileOptions . isFork (  )  )     &  &     (  ( compileOptions . getForkOptions (  )  . getExecutable (  )  )     !  =    null )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["doNotCacheIfForkingViaExecutable"], "fileName": "org.gradle.api.internal.tasks.compile.CompilerForkUtils"}, {"methodBody": ["METHOD_START", "{", "this . compileOptions    =    new   MinimalJavaCompileOptions ( compileOptions )  ;", "}", "METHOD_END"], "methodName": ["setCompileOptions"], "fileName": "org.gradle.api.internal.tasks.compile.DefaultJavaCompileSpec"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( JavaCompileSpec . class . isAssignableFrom ( type )  )  )     {", "throw   new   IllegalArgumentException ( String . format (  \" Cannot   create   a   compiler   for   a   spec   with   type    % s \"  ,    type . getSimpleName (  )  )  )  ;", "}", "if    ( CommandLineJavaCompileSpec . class . isAssignableFrom ( type )  )     {", "return   new   CommandLineJavaCompiler ( execHandleFactory )  ;", "}", "Compiler < JavaCompileSpec >    compiler    =    new   JdkJavaCompiler ( javaHomeBased )  ;", "if    (  ( ForkingJavaCompileSpec . class . isAssignableFrom ( type )  )     &  &     (  ! jointCompilation )  )     {", "return   new   DaemonJavaCompiler ( workingDirProvider . getIdleWorkingDirectory (  )  ,    compiler ,    workerDaemonFactory ,    fileResolver )  ;", "}", "return   compiler ;", "}", "METHOD_END"], "methodName": ["createTargetCompiler"], "fileName": "org.gradle.api.internal.tasks.compile.DefaultJavaCompilerFactory"}, {"methodBody": ["METHOD_START", "{", "CompositeStoppable . stoppable ( processorClassloader )  . stop (  )  ;", "}", "METHOD_END"], "methodName": ["cleanupProcessors"], "fileName": "org.gradle.api.internal.tasks.compile.IncrementalAnnotationProcessingCompileTask"}, {"methodBody": ["METHOD_START", "{", "switch    ( type )     {", "case   ISOLATING    :", "return   new   Isolatingor ( processor ,    result )  ;", "case   AGGREGATING    :", "return   new   Aggregatingor ( processor ,    result )  ;", "default    :", "return   processor ;", "}", "}", "METHOD_END"], "methodName": ["decorateIfIncremental"], "fileName": "org.gradle.api.internal.tasks.compile.IncrementalAnnotationProcessingCompileTask"}, {"methodBody": ["METHOD_START", "{", "processorClassloader    =    new   URLClassLoader ( DefaultClassPath . of ( annotationProcessorPath )  . getAsURLArray (  )  )  ;", "List < Processor >    processors    =    new   ArrayList < Processor >  ( processorDeclarations . size (  )  )  ;", "for    ( orDeclaration   declaredProcessor    :    processorDeclarations )     {", "try    {", "Class <  ?  >    processorClass    =    processorClassloader . loadClass ( declaredProcessor . getClassName (  )  )  ;", "Processor   processor    =     (  ( Processor )     ( processorClass . newInstance (  )  )  )  ;", "processor    =    decorateIfIncremental ( processor ,    declaredProcessor . getType (  )  )  ;", "processors . add ( processor )  ;", "}    catch    ( Exception   e )     {", "throw   new   IllegalArgumentException ( e )  ;", "}", "}", "delegate . setProcessors ( processors )  ;", "}", "METHOD_END"], "methodName": ["setupProcessors"], "fileName": "org.gradle.api.internal.tasks.compile.IncrementalAnnotationProcessingCompileTask"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( includeClasspath )  )     {", "return ;", "}", "List < File >    classpath    =    spec . getClasspath (  )  ;", "args . add (  \"  - classpath \"  )  ;", "args . add (  ( classpath    =  =    null    ?     \"  \"     :    Joiner . on ( File . pathSeparatorChar )  . join ( classpath )  )  )  ;", "}", "METHOD_END"], "methodName": ["addClasspath"], "fileName": "org.gradle.api.internal.tasks.compile.JavaCompilerArgumentsBuilder"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( includeLauncherOptions )  )     {", "return ;", "}", "ForkOptions   forkOptions    =    spec . getOptions (  )  . getForkOptions (  )  ;", "if    (  ( forkOptions . getMemoryInitialSize (  )  )     !  =    null )     {", "args . add (  (  \"  - J - Xms \"     +     ( forkOptions . getMemoryInitialSize (  )  . trim (  )  )  )  )  ;", "}", "if    (  ( forkOptions . getMemoryMaximumSize (  )  )     !  =    null )     {", "args . add (  (  \"  - J - Xmx \"     +     ( forkOptions . getMemoryMaximumSize (  )  . trim (  )  )  )  )  ;", "}", "if    (  ( forkOptions . getJvmArgs (  )  )     !  =    null )     {", "args . addAll ( forkOptions . getJvmArgs (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addLauncherOptions"], "fileName": "org.gradle.api.internal.tasks.compile.JavaCompilerArgumentsBuilder"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( includeMainOptions )  )     {", "return ;", "}", "final   MinimalJavaCompileOptions   compileOptions    =    spec . getCompileOptions (  )  ;", "if    (  !  ( releaseOptionIsSet ( compilerArgs )  )  )     {", "String   sourceCompatibility    =    spec . getSourceCompatibility (  )  ;", "if    ( sourceCompatibility    !  =    null )     {", "args . add (  \"  - source \"  )  ;", "args . add ( sourceCompatibility )  ;", "}", "String   targetCompatibility    =    spec . getTargetCompatibility (  )  ;", "if    ( targetCompatibility    !  =    null )     {", "args . add (  \"  - target \"  )  ;", "args . add ( targetCompatibility )  ;", "}", "}", "File   destinationDir    =    spec . getDestinationDir (  )  ;", "if    ( destinationDir    !  =    null )     {", "args . add (  \"  - d \"  )  ;", "args . add ( destinationDir . getPath (  )  )  ;", "}", "if    ( compileOptions . isVerbose (  )  )     {", "args . add (  \"  - verbose \"  )  ;", "}", "if    ( compileOptions . isDeprecation (  )  )     {", "args . add (  \"  - deprecation \"  )  ;", "}", "if    (  !  ( compileOptions . isWarnings (  )  )  )     {", "args . add (  \"  - nowarn \"  )  ;", "}", "if    (  ( compileOptions . getEncoding (  )  )     !  =    null )     {", "args . add (  \"  - encoding \"  )  ;", "args . add ( compileOptions . getEncoding (  )  )  ;", "}", "String   bootClasspath    =    DeprecationLogger . whileDisabled ( new   Factory < String >  (  )     {", "@ Nullable", "@ Override", "@ SuppressWarnings (  \" deprecation \"  )", "public   String   create (  )     {", "return   compileOptions . getBootClasspath (  )  ;", "}", "}  )  ;", "if    ( bootClasspath    !  =    null )     {", "args . add (  \"  - bootclasspath \"  )  ;", "args . add ( bootClasspath )  ;", "}", "if    (  ( compileOptions . getExtensionDirs (  )  )     !  =    null )     {", "args . add (  \"  - extdirs \"  )  ;", "args . add ( compileOptions . getExtensionDirs (  )  )  ;", "}", "if    (  ( compileOptions . getAnnotationProcessorGeneratedSourcesDirectory (  )  )     !  =    null )     {", "args . add (  \"  - s \"  )  ;", "args . add ( compileOptions . getAnnotationProcessorGeneratedSourcesDirectory (  )  . getPath (  )  )  ;", "}", "if    ( compileOptions . isDebug (  )  )     {", "if    (  ( compileOptions . getDebugOptions (  )  . getDebugLevel (  )  )     !  =    null )     {", "args . add (  (  \"  - g :  \"     +     ( compileOptions . getDebugOptions (  )  . getDebugLevel (  )  . trim (  )  )  )  )  ;", "} else    {", "args . add (  \"  - g \"  )  ;", "}", "} else    {", "args . add (  \"  - g : none \"  )  ;", "}", "Collection < File >    sourcepath    =    compileOptions . getSourcepath (  )  ;", "String   userProvidedSourcepath    =    extractSourcepathFrom ( compilerArgs ,    false )  ;", "if    (  (  ( allowEmptySourcePath )     |  |     (  ( sourcepath    !  =    null )     &  &     (  !  ( sourcepath . isEmpty (  )  )  )  )  )     |  |     (  !  ( userProvidedSourcepath . isEmpty (  )  )  )  )     {", "args . add (  \"  - sourcepath \"  )  ;", "args . add (  ( sourcepath    =  =    null    ?    userProvidedSourcepath    :    Joiner . on ( File . pathSeparator )  . skipNulls (  )  . join ( GUtil . asPath ( sourcepath )  ,     ( userProvidedSourcepath . isEmpty (  )     ?    null    :    userProvidedSourcepath )  )  )  )  ;", "}", "if    (  (  ( spec . getSourceCompatibility (  )  )     =  =    null )     |  |     (  ( JavaVersion . toVersion ( spec . getSourceCompatibility (  )  )  . compareTo ( VERSION _  1  _  6  )  )     >  =     0  )  )     {", "List < File >    annotationProcessorPath    =    spec . getAnnotationProcessorPath (  )  ;", "if    (  ( annotationProcessorPath    =  =    null )     |  |     ( annotationProcessorPath . isEmpty (  )  )  )     {", "args . add (  \"  - proc : none \"  )  ;", "} else    {", "args . add (  \"  - processorpath \"  )  ;", "args . add ( Joiner . on ( File . pathSeparator )  . join ( annotationProcessorPath )  )  ;", "}", "}", "args . add (  . USE _ UNSHARED _ COMPILER _ TABLE _ OPTION )  ;", "}", "METHOD_END"], "methodName": ["addMainOptions"], "fileName": "org.gradle.api.internal.tasks.compile.JavaCompilerArgumentsBuilder"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( includeSourceF )  )     {", "return ;", "}", "for    ( Ff :    spec . getSource (  )  )     {", "args . add ( fgetPath (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addSourceFiles"], "fileName": "org.gradle.api.internal.tasks.compile.JavaCompilerArgumentsBuilder"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( includeMainOptions )  )     {", "return ;", "}", "if    ( compilerArgs    !  =    null )     {", "if    ( compilerArgs . contains (  \"  -  - module - source - path \"  )  )     {", "if    (  !  ( extractSourcepathFrom ( args ,    true )  . isEmpty (  )  )  )     {", ". LOGGER . warn (  \" You   specified   both    -  - module - source - path   and   a   sourcepath .    These   options   are   mutually   exclusive .    Removing   sourcepath .  \"  )  ;", "}", "}", "args . addAll ( compilerArgs )  ;", "}", "}", "METHOD_END"], "methodName": ["addUserProvidedArgs"], "fileName": "org.gradle.api.internal.tasks.compile.JavaCompilerArgumentsBuilder"}, {"methodBody": ["METHOD_START", "{", "args    =    new   ArrayList < String >  (  )  ;", "List < String >    compArgs    =    Lists . newArrayList ( spec . getCompileOptions (  )  . gets (  )  )  ;", "addLauncherOptions (  )  ;", "addMainOptions ( compArgs )  ;", "addClasspath (  )  ;", "addUserProvidedArgs ( compArgs )  ;", "addSourceFiles (  )  ;", "return   args ;", "}", "METHOD_END"], "methodName": ["build"], "fileName": "org.gradle.api.internal.tasks.compile.JavaCompilerArgumentsBuilder"}, {"methodBody": ["METHOD_START", "{", "Iterator < String >    argIterator    =    compilerArgs . iterator (  )  ;", "String   userProvidedSourcepath    =     \"  \"  ;", "while    ( argIterator . hasNext (  )  )     {", "String   current    =    argIterator . next (  )  ;", "if    (  ( current . equals (  \"  - sourcepath \"  )  )     |  |     ( current . equals (  \"  -  - source - path \"  )  )  )     {", "if    (  ! silently )     {", "DeprecationLogger . nagUserOfDeprecated (  \" Specifying   the   source   path   in   the   CompilerOptions   compilerArgs   property \"  ,     \" Instead ,    use   the   CompilerOptions   sourcepath   property   directly \"  )  ;", "}", "argIterator . remove (  )  ;", "if    ( argIterator . hasNext (  )  )     {", "userProvidedSourcepath    =    argIterator . next (  )  ;", "argIterator . remove (  )  ;", "}", "}", "}", "return   userProvidedSourcepath ;", "}", "METHOD_END"], "methodName": ["extractSourcepathFrom"], "fileName": "org.gradle.api.internal.tasks.compile.JavaCompilerArgumentsBuilder"}, {"methodBody": ["METHOD_START", "{", "includeClasspath    =    flag ;", "return   this ;", "}", "METHOD_END"], "methodName": ["includeClasspath"], "fileName": "org.gradle.api.internal.tasks.compile.JavaCompilerArgumentsBuilder"}, {"methodBody": ["METHOD_START", "{", "includeLauncherOptions    =    flag ;", "return   this ;", "}", "METHOD_END"], "methodName": ["includeLauncherOptions"], "fileName": "org.gradle.api.internal.tasks.compile.JavaCompilerArgumentsBuilder"}, {"methodBody": ["METHOD_START", "{", "includeMainOptions    =    flag ;", "return   this ;", "}", "METHOD_END"], "methodName": ["includeMainOptions"], "fileName": "org.gradle.api.internal.tasks.compile.JavaCompilerArgumentsBuilder"}, {"methodBody": ["METHOD_START", "{", "includeSourceFiles    =    flag ;", "return   this ;", "}", "METHOD_END"], "methodName": ["includeSourceFiles"], "fileName": "org.gradle.api.internal.tasks.compile.JavaCompilerArgumentsBuilder"}, {"methodBody": ["METHOD_START", "{", "allowEmptySourcePath    =    false ;", "return   this ;", "}", "METHOD_END"], "methodName": ["noEmptySourcePath"], "fileName": "org.gradle.api.internal.tasks.compile.JavaCompilerArgumentsBuilder"}, {"methodBody": ["METHOD_START", "{", "return    ( compilerArgs    !  =    null )     &  &     ( compilerArgs . contains (  \"  -  - release \"  )  )  ;", "}", "METHOD_END"], "methodName": ["releaseOptionIsSet"], "fileName": "org.gradle.api.internal.tasks.compile.JavaCompilerArgumentsBuilder"}, {"methodBody": ["METHOD_START", "{", "File   realJavaHome    =    currentJvmJavaHomeFactory . create (  )  ;", "File   javaHomeFromToolProvidersPointOfView    =    systemPropertiesJavaHomeFactory . create (  )  ;", "if    ( realJavaHome . equals ( javaHomeFromToolProvidersPointOfView )  )     {", "return   system . create (  )  ;", "}", "return   SystemProperties . getInstance (  )  . withJavaHome ( realJavaHome ,    system )  ;", "}", "METHOD_END"], "methodName": ["findCompiler"], "fileName": "org.gradle.api.internal.tasks.compile.JavaHomeBasedJavaCompilerFactory"}, {"methodBody": ["METHOD_START", "{", "List < String >    options    =    new   JavaCompilerArgumentsBuilder ( spec )  . build (  )  ;", "JavaCompiler   compiler    =    create (  )  ;", "MinimalJavaCompileOptions   compileOptions    =    spec . getCompileOptions (  )  ;", "StandardJavaFileManager   standardFileManager    =    compiler . getStandardFileManager ( null ,    null ,     (  ( compileOptions . getEncoding (  )  )     !  =    null    ?    Charset . forName ( compileOptions . getEncoding (  )  )     :    null )  )  ;", "Iterable <  ?    extends   JavaFileObject >    compilationUnits    =    standardFileManager . getJavaFileObjectsFromFiles ( spec . getSource (  )  )  ;", "StandardJavaFileManager   fileManager    =    standardFileManager ;", "if    (  ( JavaVersion . current (  )  . isJava 9 Compatible (  )  )     &  &     (  . emptySourcepathIn ( options )  )  )     {", "fileManager    =     (  ( StandardJavaFileManager )     ( SourcepathIgnoringProxy . proxy ( standardFileManager ,    StandardJavaFileManager . class )  )  )  ;", "}", "JavaCompiler . CompilationTask   task    =    compiler . getTask ( null ,    fileManager ,    null ,    options ,    spec . getClasses (  )  ,    compilationUnits )  ;", "Set < AnnotationProcessorDeclaration >    annotationProcessors    =    spec . getEffectiveAnnotationProcessors (  )  ;", "if    ( annotationProcessors    !  =    null )     {", "task    =    new   IncrementalAnnotationProcessingCompileTask ( task ,    annotationProcessors ,    spec . getAnnotationProcessorPath (  )  ,    result . getAnnotationProcessingResult (  )  )  ;", "}", "return   task ;", "}", "METHOD_END"], "methodName": ["createCompileTask"], "fileName": "org.gradle.api.internal.tasks.compile.JdkJavaCompiler"}, {"methodBody": ["METHOD_START", "{", "Iterator < String >    optionsIter    =    options . iterator (  )  ;", "while    ( optionsIter . hasNext (  )  )     {", "String   current    =    optionsIter . next (  )  ;", "if    (  ( current . equals (  \"  - sourcepath \"  )  )     |  |     ( current . equals (  \"  -  - source - path \"  )  )  )     {", "return   optionsIter . next (  )  . isEmpty (  )  ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["emptySourcepathIn"], "fileName": "org.gradle.api.internal.tasks.compile.JdkJavaCompiler"}, {"methodBody": ["METHOD_START", "{", "return   annotationProcessingResult ;", "}", "METHOD_END"], "methodName": ["getAnnotationProcessingResult"], "fileName": "org.gradle.api.internal.tasks.compile.JdkJavaCompilerResult"}, {"methodBody": ["METHOD_START", "{", "throw   new   IllegalStateException (  \" Could   not   create   system   Java   compiler \"  ,    e )  ;", "}", "METHOD_END"], "methodName": ["cannotCreateJavaCompiler"], "fileName": "org.gradle.api.internal.tasks.compile.JdkTools"}, {"methodBody": ["METHOD_START", "{", "JdkTools   jdkTools    =    JdkTools . INSTANCE . get (  )  ;", "if    ( jdkTools    =  =    null )     {", "JdkTools . INSTANCE . compareAndSet ( null ,    new   JdkTools ( Jvm . current (  )  )  )  ;", "jdkTools    =    JdkTools . INSTANCE . get (  )  ;", "}", "return   jdkTools ;", "}", "METHOD_END"], "methodName": ["current"], "fileName": "org.gradle.api.internal.tasks.compile.JdkTools"}, {"methodBody": ["METHOD_START", "{", "FilteringClassLoader . Spec   filterSpec    =    new   FilteringClassLoader . Spec (  )  ;", "if    ( java 9 atible )     {", "filterSpec . allowPackage (  \" com . sun . tools \"  )  ;", "}", "return   classLoaderFactory . createFilteringClassLoader ( ClassLoader . getSystemClassLoader (  )  ,    filterSpec )  ;", "}", "METHOD_END"], "methodName": ["getSystemFilteringClassLoader"], "fileName": "org.gradle.api.internal.tasks.compile.JdkTools"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    clazz ;", "try    {", "if    ( isJava 9 Compatible )     {", "clazz    =    isolatedToolsLoader . loadClass (  \" ToolProvider \"  )  ;", "try    {", "return    (  ( JavaCompiler )     ( clazz . getDeclaredMethod (  \" getSystemJavaCompiler \"  )  . invoke ( null )  )  )  ;", "}    catch    ( IllegalAccessException   e )     {", "cannotCreateJavaCompiler ( e )  ;", "}    catch    ( InvocationTargetException   e )     {", "cannotCreateJavaCompiler ( e )  ;", "}    catch    ( NoSuchMethodException   e )     {", "cannotCreateJavaCompiler ( e )  ;", "}", "} else    {", "clazz    =    isolatedToolsLoader . loadClass (  . DEFAULT _ COMPILER _ IMPL _ NAME )  ;", "}", "}    catch    ( ClassNotFoundException   e )     {", "throw   new   IllegalStateException (  (  \" Could   not   load   class    '  \"     +     (  . DEFAULT _ COMPILER _ IMPL _ NAME )  )  )  ;", "}", "return   DirectInstantiator . instantiate ( clazz . asSubclass ( JavaCompiler . class )  )  ;", "}", "METHOD_END"], "methodName": ["getSystemJavaCompiler"], "fileName": "org.gradle.api.internal.tasks.compile.JdkTools"}, {"methodBody": ["METHOD_START", "{", "return   annotationProcessorGeneratedSourcesDirectory ;", "}", "METHOD_END"], "methodName": ["getAnnotationProcessorGeneratedSourcesDirectory"], "fileName": "org.gradle.api.internal.tasks.compile.MinimalJavaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   bootClasspath ;", "}", "METHOD_END"], "methodName": ["getBootClasspath"], "fileName": "org.gradle.api.internal.tasks.compile.MinimalJavaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   compilerArgs ;", "}", "METHOD_END"], "methodName": ["getCompilerArgs"], "fileName": "org.gradle.api.internal.tasks.compile.MinimalJavaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   debugOptions ;", "}", "METHOD_END"], "methodName": ["getDebugOptions"], "fileName": "org.gradle.api.internal.tasks.compile.MinimalJavaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   encoding ;", "}", "METHOD_END"], "methodName": ["getEncoding"], "fileName": "org.gradle.api.internal.tasks.compile.MinimalJavaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   extensionDirs ;", "}", "METHOD_END"], "methodName": ["getExtensionDirs"], "fileName": "org.gradle.api.internal.tasks.compile.MinimalJavaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   forkOptions ;", "}", "METHOD_END"], "methodName": ["getForkOptions"], "fileName": "org.gradle.api.internal.tasks.compile.MinimalJavaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   sourcepath ;", "}", "METHOD_END"], "methodName": ["getSourcepath"], "fileName": "org.gradle.api.internal.tasks.compile.MinimalJavaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   debug ;", "}", "METHOD_END"], "methodName": ["isDebug"], "fileName": "org.gradle.api.internal.tasks.compile.MinimalJavaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   deprecation ;", "}", "METHOD_END"], "methodName": ["isDeprecation"], "fileName": "org.gradle.api.internal.tasks.compile.MinimalJavaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   failOnError ;", "}", "METHOD_END"], "methodName": ["isFailOnError"], "fileName": "org.gradle.api.internal.tasks.compile.MinimalJavaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   listFiles ;", "}", "METHOD_END"], "methodName": ["isListFiles"], "fileName": "org.gradle.api.internal.tasks.compile.MinimalJavaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   verbose ;", "}", "METHOD_END"], "methodName": ["isVerbose"], "fileName": "org.gradle.api.internal.tasks.compile.MinimalJavaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   warnings ;", "}", "METHOD_END"], "methodName": ["isWarnings"], "fileName": "org.gradle.api.internal.tasks.compile.MinimalJavaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . annotationProcessorGeneratedSourcesDirectory    =    annotationProcessorGeneratedSourcesDirectory ;", "}", "METHOD_END"], "methodName": ["setAnnotationProcessorGeneratedSourcesDirectory"], "fileName": "org.gradle.api.internal.tasks.compile.MinimalJavaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . bootClasspath    =    bootClasspath ;", "}", "METHOD_END"], "methodName": ["setBootClasspath"], "fileName": "org.gradle.api.internal.tasks.compile.MinimalJavaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . compilerArgs    =    compilerArgs ;", "}", "METHOD_END"], "methodName": ["setCompilerArgs"], "fileName": "org.gradle.api.internal.tasks.compile.MinimalJavaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . debug    =    debug ;", "}", "METHOD_END"], "methodName": ["setDebug"], "fileName": "org.gradle.api.internal.tasks.compile.MinimalJavaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . debugOptions    =    debugOptions ;", "}", "METHOD_END"], "methodName": ["setDebugOptions"], "fileName": "org.gradle.api.internal.tasks.compile.MinimalJavaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . deprecation    =    deprecation ;", "}", "METHOD_END"], "methodName": ["setDeprecation"], "fileName": "org.gradle.api.internal.tasks.compile.MinimalJavaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . encoding    =    encoding ;", "}", "METHOD_END"], "methodName": ["setEncoding"], "fileName": "org.gradle.api.internal.tasks.compile.MinimalJavaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . extensionDirs    =    extensionDirs ;", "}", "METHOD_END"], "methodName": ["setExtensionDirs"], "fileName": "org.gradle.api.internal.tasks.compile.MinimalJavaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . failOnError    =    failOnError ;", "}", "METHOD_END"], "methodName": ["setFailOnError"], "fileName": "org.gradle.api.internal.tasks.compile.MinimalJavaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . forkOptions    =    forkOptions ;", "}", "METHOD_END"], "methodName": ["setForkOptions"], "fileName": "org.gradle.api.internal.tasks.compile.MinimalJavaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . listFiles    =    listFiles ;", "}", "METHOD_END"], "methodName": ["setListFiles"], "fileName": "org.gradle.api.internal.tasks.compile.MinimalJavaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . sourcepath    =    sourcepath ;", "}", "METHOD_END"], "methodName": ["setSourcepath"], "fileName": "org.gradle.api.internal.tasks.compile.MinimalJavaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . verbose    =    verbose ;", "}", "METHOD_END"], "methodName": ["setVerbose"], "fileName": "org.gradle.api.internal.tasks.compile.MinimalJavaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . warnings    =    warnings ;", "}", "METHOD_END"], "methodName": ["setWarnings"], "fileName": "org.gradle.api.internal.tasks.compile.MinimalJavaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   delegate . execute ( spec )  ;", "}    catch    ( CompilationFailedException   e )     {", "if    ( spec . getCompileOptions (  )  . isFailOnError (  )  )     {", "throw   e ;", "}", ". LOGGER . debug (  \" Ignoring   compilation   failure .  \"  )  ;", "return   WorkResults . didWork ( false )  ;", "}", "}", "METHOD_END"], "methodName": ["delegateAndHandleErrors"], "fileName": "org.gradle.api.internal.tasks.compile.NormalizingJavaCompiler"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( NormalizingJavaCompiler . LOGGER . isDebugEnabled (  )  )  )     {", "return ;", "}", "List < String >    compilerArgs    =    new   JavaCompilerArgumentsBuilder ( spec )  . includeLauncherOptions ( true )  . includeSourceFiles ( true )  . build (  )  ;", "String   joinedArgs    =    Joiner . on (  '     '  )  . join ( compilerArgs )  ;", "NormalizingJavaCompiler . LOGGER . debug (  \" Compiler   arguments :     {  }  \"  ,    joinedArgs )  ;", "}", "METHOD_END"], "methodName": ["logCompilerArguments"], "fileName": "org.gradle.api.internal.tasks.compile.NormalizingJavaCompiler"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( spec . getCompileOptions (  )  . isListFiles (  )  )  )     {", "return ;", "}", "StringBuilder   builder    =    new   StringBuilder (  )  ;", "builder . append (  \" Source   files   to   be   compiled :  \"  )  ;", "for    ( File   file    :    spec . getSource (  )  )     {", "builder . append (  '  \\ n '  )  ;", "builder . append ( file )  ;", "}", ". LOGGER . quiet ( builder . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["logSourceFiles"], "fileName": "org.gradle.api.internal.tasks.compile.NormalizingJavaCompiler"}, {"methodBody": ["METHOD_START", "{", "FileCollection   javaOnly    =    spec . getSource (  )  . filter ( new   Spec < File >  (  )     {", "public   boolean   isSatisfiedBy ( File   element )     {", "return   FileUtils . hasExtension ( element ,     \"  . java \"  )  ;", "}", "}  )  ;", "spec . setSource ( new   file . collections . SimpleFileCollection ( getFiles (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveAndFilterSourceFiles"], "fileName": "org.gradle.api.internal.tasks.compile.NormalizingJavaCompiler"}, {"methodBody": ["METHOD_START", "{", "spec . getCompileOptions (  )  . setCompilerArgs ( CollectionUtils . toStringList ( spec . getCompileOptions (  )  . getCompilerArgs (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveNonStringsInCompilerArgs"], "fileName": "org.gradle.api.internal.tasks.compile.NormalizingJavaCompiler"}, {"methodBody": ["METHOD_START", "{", "if    ( jointProcessorPath . contains ( input . getFile (  )  )  )     {", "spec . setFullRebuildCause (  \"    processor   path   changed \"  ,    input . getFile (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["processChange"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.AnnotationProcessorChangeProcessor"}, {"methodBody": ["METHOD_START", "{", "if    ( input . isRemoved (  )  )     {", "String   className    =    previousCation . getClassName ( input . getFile (  )  . getAbsolutePath (  )  )  ;", "update ( input ,    spec ,    className ,    EMPTY _ SET )  ;", "return ;", "}", "final   ClassReader   classReader ;", "try    {", "classReader    =    new   ClassReader ( Files . toByteArray ( input . getFile (  )  )  )  ;", "String   className    =    classReader . getClassName (  )  . replaceAll (  \"  /  \"  ,     \"  .  \"  )  ;", "IntSet   constants    =    ClassDependenciesVisitor . retrieveConstants ( classReader )  ;", "update ( input ,    spec ,    className ,    constants )  ;", "}    catch    ( IOException   e )     {", "throw   new   IllegalArgumentException ( String . format (  \" Unable   to   read   class   file :     '  % s '  \"  ,    input . getFile (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["processChange"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.ClassChangeProcessor"}, {"methodBody": ["METHOD_START", "{", "DependentsSet   actualDependents    =    previousCompilation . getDependents ( className ,    newConstants )  ;", "if    ( actualDependents . isDependencyToAll (  )  )     {", "spec . setFullRebuildCause ( actualDependents . getDescription (  )  ,    input . getFile (  )  )  ;", "} else    {", "spec . getClassesToC (  )  . addAll ( actualDependents . getDependentClasses (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["update"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.ClassChangeProcessor"}, {"methodBody": ["METHOD_START", "{", "if    ( result   instanceof   RecompilationNotNecessary )     {", "return ;", "}", "Timer   clock    =    Time . startTimer (  )  ;", "CompilationResultAnalyzer   analyzer    =    new   CompilationResultAnalyzer ( this . analyzer ,    fileHasher )  ;", "visitAnnotationProcessingResult ( spec ,    result ,    analyzer )  ;", "visitClassFiles ( spec ,    analyzer )  ;", "ClassSetAnalysisData   data    =    analyzer . getAnalysis (  )  ;", "stash . put ( data )  ;", ". LOG . info (  \" Class   dependency   analysis   for   incremental   compilation   took    {  }  .  \"  ,    clock . getElapsed (  )  )  ;", "}", "METHOD_END"], "methodName": ["updateAnalysis"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.ClassSetAnalysisUpdater"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( spec . getEffectiveAnnotationProcessors (  )  . isEmpty (  )  )  )     {", "AnnotationProcessingResult   annotationProcessingResult    =    null ;", "if    ( result   instanceof   JdkJavaCrResult )     {", "annotationProcessingResult    =     (  ( JdkJavaCrResult )     ( result )  )  . getAnnotationProcessingResult (  )  ;", "}", "analyzer . visitAnnotationProcessingResult ( annotationProcessingResult )  ;", "}", "}", "METHOD_END"], "methodName": ["visitAnnotationProcessingResult"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.ClassSetAnalysisUpdater"}, {"methodBody": ["METHOD_START", "{", "Set < File >    baseDirs    =    Sets . newLinkedHashSet (  )  ;", "baseDirs . add ( spec . getDestinationDir (  )  )  ;", "Iterables . addAll ( baseDirs ,    Iterables . filter ( spec . getCompileClasspath (  )  ,     . IS _ CLASS _ DIRECTORY )  )  ;", "for    ( File   baseDir    :    baseDirs )     {", "fileOperations . fileTree ( baseDir )  . visit ( analyzer )  ;", "}", "}", "METHOD_END"], "methodName": ["visitClassFiles"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.ClassSetAnalysisUpdater"}, {"methodBody": ["METHOD_START", "{", "return    (  ( isSourceDirectorySet ( source )  )     |  |     ( isDirectoryTree ( source )  )  )     |  |     ( isDirectory ( source )  )  ;", "}", "METHOD_END"], "methodName": ["canInferSourceRoot"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.CompilationSourceDirs"}, {"methodBody": ["METHOD_START", "{", "for    ( Object   source    :    sources )     {", "if    (  !  ( canInferSourceRoot ( source )  )  )     {", ". LOG . info (  \" Cannot   infer   source   root ( s )    for   input   with   type    `  {  }  `  .    Supported   types   are    ` File `  ,     ` DirectoryTree `    and    ` SourceDirectorySet `  .    Unsupported   input :     {  }  \"  ,    source . getClass (  )  . getSimpleName (  )  ,    source )  ;", "return   false ;", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["canInferSourceRoots"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.CompilationSourceDirs"}, {"methodBody": ["METHOD_START", "{", "if    (  ( sourceRoots )     =  =    null )     {", "sourceRoots    =    Lists . newArrayList (  )  ;", "for    ( Object   source    :    sources )     {", "if    ( isDirectory ( source )  )     {", "sourceRoots . add (  (  ( File )     ( source )  )  )  ;", "} else", "if    ( isDirectoryTree ( source )  )     {", "sourceRoots . add (  (  ( file . DirectoryTree )     ( source )  )  . getDir (  )  )  ;", "} else", "if    ( isSourceDirectorySet ( source )  )     {", "sourceRoots . addAll (  (  ( file . SourceDirectorySet )     ( source )  )  . getSrcDirs (  )  )  ;", "} else    {", "throw   new   UnsupportedOperationException (  )  ;", "}", "}", "}", "return   sourceRoots ;", "}", "METHOD_END"], "methodName": ["getSourceRoots"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.CompilationSourceDirs"}, {"methodBody": ["METHOD_START", "{", "return    ( source   instanceof   File )     &  &     (  (  ( File )     ( source )  )  . isDirectory (  )  )  ;", "}", "METHOD_END"], "methodName": ["isDirectory"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.CompilationSourceDirs"}, {"methodBody": ["METHOD_START", "{", "return   source   instanceof   DirectoryTree ;", "}", "METHOD_END"], "methodName": ["isDirectoryTree"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.CompilationSourceDirs"}, {"methodBody": ["METHOD_START", "{", "return   source   instanceof   SourceDirectorySet ;", "}", "METHOD_END"], "methodName": ["isSourceDirectorySet"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.CompilationSourceDirs"}, {"methodBody": ["METHOD_START", "{", "return   spec . getAnnotationProcessorPath (  )  ;", "}", "METHOD_END"], "methodName": ["getAnnotationProcessorPath"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.CurrentCompilation"}, {"methodBody": ["METHOD_START", "{", "return   jarClasspathSnapshotProvider . getJarClasspathSnapshot ( spec . getCompileClasspath (  )  )  ;", "}", "METHOD_END"], "methodName": ["getClasspathSnapshot"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.CurrentCompilation"}, {"methodBody": ["METHOD_START", "{", "inputs . outOfDate ( action )  ;", "inputs . removed ( action )  ;", "}", "METHOD_END"], "methodName": ["visitChanges"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.CurrentCompilation"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    AnnotationProcessorDeclaration >    declarations    =    annotationProcessorDetector . detectProcessors ( spec . getAnnotationProcessorPath (  )  )  ;", "List < String >    compilerArgs    =    spec . getCompileOptions (  )  . getCompilerArgs (  )  ;", "int   processorIndex    =    compilerArgs . lastIndexOf (  \"  - processor \"  )  ;", "if    ( processorIndex    =  =     (  -  1  )  )     {", "return   Sets . newLinkedHashSet ( declarations . values (  )  )  ;", "}", "Collection < String >    explicitProcessors    =    Splitter . on (  '  ,  '  )  . splitToList ( compilerArgs . get (  ( processorIndex    +     1  )  )  )  ;", "Set < AnnotationProcessorDeclaration >    effectiveProcessors    =    Sets . newLinkedHashSet (  )  ;", "for    ( String   explicitProcessor    :    explicitProcessors )     {", "AnnotationProcessorDeclaration   declaration    =    declarations . get ( explicitProcessor )  ;", "if    ( declaration    !  =    null )     {", "effectiveProcessors . add ( declaration )  ;", "} else    {", "effectiveProcessors . add ( new   AnnotationProcessorDeclaration ( explicitProcessor ,    orType . UNKNOWN )  )  ;", "}", "}", "return   effectiveProcessors ;", "}", "METHOD_END"], "methodName": ["getEffectiveAnnotationProcessors"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.IncrementalAnnotationProcessingCompiler"}, {"methodBody": ["METHOD_START", "{", "Set < String >    classesToProcess    =    Sets . newHashSet ( recompilationSpec . getClassesToProcess (  )  )  ;", "classesToProcess . removeAll ( recompilationSpec . getClassesToCompile (  )  )  ;", "spec . setClasses ( classesToProcess )  ;", "}", "METHOD_END"], "methodName": ["addClassesToProcess"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.IncrementalCompilationInitializer"}, {"methodBody": ["METHOD_START", "{", "if    ( destinationDir    =  =    null )     {", "return ;", "}", "FileTree   deleteMe    =    fileOperations . fileTree ( destinationDir )  . matching ( classesToDelete )  ;", "fileOperations . delete ( deleteMe )  ;", "}", "METHOD_END"], "methodName": ["deleteStaleFilesIn"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.IncrementalCompilationInitializer"}, {"methodBody": ["METHOD_START", "{", "List < File >    classpath    =    Lists . newArrayList ( spec . getCompileClasspath (  )  )  ;", "File   destinationDir    =    spec . getDestinationDir (  )  ;", "classpath . add ( destinationDir )  ;", "spec . setCompileClasspath ( classpath )  ;", "}", "METHOD_END"], "methodName": ["includePreviousCompilationOutputOnClasspath"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.IncrementalCompilationInitializer"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( recompilationSpec . isBuildNeeded (  )  )  )     {", "spec . setSource ( new   SimpleFileCollection (  )  )  ;", "spec . setClasses ( Collections .  < String > emptySet (  )  )  ;", "return ;", "}", "Factory < PatternSet >    patternSetFactory    =    fileOperations . getFileResolver (  )  . getPatternSetFactory (  )  ;", "PatternSet   classesToDelete    =    patternSetFactory . create (  )  ;", "PatternSet   sourceToCompile    =    patternSetFactory . create (  )  ;", "preparePatterns ( recompilationSpec . getClassesToCompile (  )  ,    classesToDelete ,    sourceToCompile )  ;", "narrowDownSourcesToCompile ( spec ,    sourceToCompile )  ;", "includePreviousOutputOnClasspath ( spec )  ;", "addClassesToProcess ( spec ,    recompilationSpec )  ;", "deleteStaleFilesIn ( classesToDelete ,    spec . getDestinationDir (  )  )  ;", "deleteStaleFilesIn ( classesToDelete ,    spec . getCompileOptions (  )  . getAnnotationProcessorGeneratedSourcesDirectory (  )  )  ;", "}", "METHOD_END"], "methodName": ["initializeCompilation"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.IncrementalCompilationInitializer"}, {"methodBody": ["METHOD_START", "{", "spec . setSource ( spec . getSource (  )  . getAsFileTree (  )  . matching ( sourceToCompile )  )  ;", "}", "METHOD_END"], "methodName": ["narrowDownSourcesToCompile"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.IncrementalCompilationInitializer"}, {"methodBody": ["METHOD_START", "{", "for    ( String   staleClass    :    staleClasses )     {", "String   path    =    staleClass . replaceAll (  \"  \\  \\  .  \"  ,     \"  /  \"  )  ;", "filesToDelete . include ( path . concat (  \"  . class \"  )  )  ;", "filesToDelete . include ( path . concat (  \"  . java \"  )  )  ;", "filesToDelete . include ( path . concat (  \"  $  *  . class \"  )  )  ;", "filesToDelete . include ( path . concat (  \"  $  *  . java \"  )  )  ;", "sourceToClude ( path . concat (  \"  . java \"  )  )  ;", "sourceToClude ( path . concat (  \"  $  *  . java \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["preparePatterns"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.IncrementalCompilationInitializer"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( inputs . isIncremental (  )  )  )     {", ". LOG . info (  \"  {  }     -    is   not   incremental    ( e . g .    outputs   have   changed ,    no   previous   execution ,    etc .  )  .  \"  ,    displayName )  ;", "return   cleaningCompiler ;", "}", "if    (  !  ( sourceDirs . canInferSourceRoots (  )  )  )     {", ". LOG . info (  \"  {  }     -    is   not   incremental .    Unable   to   infer   the   source   directories .  \"  ,    displayName )  ;", "return   cleaningCompiler ;", "}", "List < AnnotationProcessorDeclaration >    nonIncrementalProcessors    =    getNonIncrementalProcessors (  )  ;", "if    (  !  ( nonIncrementalProcessors . isEmpty (  )  )  )     {", "warnAboutNonIncrementalProcessors ( nonIncrementalProcessors )  ;", "return   cleaningCompiler ;", "}", "ClassSetAnalysisData   data    =    compileCaches . getLocalClassSetAnalysisStore (  )  . get (  )  ;", "if    ( data    =  =    null )     {", ". LOG . info (  \"  {  }     -    is   not   incremental .    No   class   analysis   data   available   from   the   previous   build .  \"  ,    displayName )  ;", "return   cleaningCompiler ;", "}", "PreviousCompilation   previousCompilation    =    new   PreviousCompilation ( new   ClassSetAnalysis ( data )  ,    compileCaches . getLocalJarClasspathSnapshotStore (  )  ,    compileCaches . getJarSnapshotCache (  )  ,    compileCaches . getAnnotationProcessorPathStore (  )  )  ;", "return   new   SelectiveCompiler ( inputs ,    previousCompilation ,    cleaningCompiler ,    staleClassDetecter ,    compilationInitializer ,    jarClasspathSnapshotMaker )  ;", "}", "METHOD_END"], "methodName": ["getCompiler"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.IncrementalCompilerDecorator"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    AnnotationProcessorDeclaration >    allProcessors    =    annotationProcessorDetector . detectProcessors ( annotationProcessorPath )  ;", "List < AnnotationProcessorDeclaration >    nonProcessors    =    Lists . newArrayListWithCapacity ( allProcessors . size (  )  )  ;", "for    ( AnnotationProcessorDeclaration   processor    :    allProcessors . values (  )  )     {", "if    (  !  ( processor . getType (  )  . is (  )  )  )     {", "nonProcessors . add ( processor )  ;", "}", "}", "return   nonProcessors ;", "}", "METHOD_END"], "methodName": ["getNonIncrementalProcessors"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.IncrementalCompilerDecorator"}, {"methodBody": ["METHOD_START", "{", "Compiler < JavaCompileSpec >    compiler    =    getCompiler ( inputs ,    sourceDirs )  ;", "ResultStoringDecorator   compilationFinalizer    =    new   ResultStoringDecorator ( compiler ,    jarClasspathSnapshotMaker ,    classSetAnalysisUpdater ,    compileCaches . getAnnotationProcessorPathStore (  )  )  ;", "return   new   AnnotationProcessingCompiler ( compilationFinalizer ,    annotationProcessorDetector )  ;", "}", "METHOD_END"], "methodName": ["prepareCompiler"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.IncrementalCompilerDecorator"}, {"methodBody": ["METHOD_START", "{", "if    ( IncrementalCompilerDecorator . LOG . isInfoEnabled (  )  )     {", "StringBuilder   processorListing    =    new   StringBuilder (  )  ;", "for    ( AnnotationProcessorDeclaration   processor    :    nonIncrementalProcessors )     {", "processorListing . append ( TextUtil . getPlatformLineSeparator (  )  )  . append (  '  \\ t '  )  . append ( processor )  ;", "}", "IncrementalCompilerDecorator . LOG . info (  \"  {  }     -    is   not   incremental .    The   following   annotation   processors   don ' t   support   incremental   compilation :  {  }  \"  ,    displayName ,    processorListing )  ;", "}", "}", "METHOD_END"], "methodName": ["warnAboutNonIncrementalProcessors"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.IncrementalCompilerDecorator"}, {"methodBody": ["METHOD_START", "{", "final   LocalClassSetAnalysisStore   localClassSetAnalysisStore    =    generalCompileCaches . createLocalClassSetAnalysisStore ( path )  ;", "final   LocalJarClasspathSnapshotStore   localJarClasspathSnapshotStore    =    generalCompileCaches . createLocalJarClasspathSnapshotStore ( path )  ;", "final   AnnotationProcessorPathStore   annotationProcessorPathStore    =    generalCompileCaches . createAnnotationProcessorPathStore ( path )  ;", "return   new   CompileCaches (  )     {", "public   ClassAnalysisCache   getClassAnalysisCache (  )     {", "return   generalCompileCaches . getClassAnalysisCache (  )  ;", "}", "public   JarSnapshotCache   getJarSnapshotCache (  )     {", "return   generalCompileCaches . getJarSnapshotCache (  )  ;", "}", "public   LocalJarClasspathSnapshotStore   getLocalJarClasspathSnapshotStore (  )     {", "return   localJarClasspathSnapshotStore ;", "}", "public   LocalClassSetAnalysisStore   getLocalClassSetAnalysisStore (  )     {", "return   localClassSetAnalysisStore ;", "}", "@ Override", "public   AnnotationProcessorPathStore   getAnnotationProcessorPathStore (  )     {", "return   annotationProcessorPathStore ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["createCompileCaches"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.IncrementalCompilerFactory"}, {"methodBody": ["METHOD_START", "{", "CompileCaches   compileCaches    =    createCompileCaches ( compileDisplayName )  ;", "ClassDependenciesAnalyzer   analyzer    =    new   CachingClassDependenciesAnalyzer ( new   DefaultClassDependenciesAnalyzer (  )  ,    compileCaches . getClassAnalysisCache (  )  )  ;", "JarSnapshotter   jarSnapshotter    =    new   CachingJarSnapshotter ( streamHasher ,    fileHasher ,    analyzer ,    compileCaches . getJarSnapshotCache (  )  )  ;", "JarClasspathSnapshotMaker   jarClasspathSnapshotMaker    =    new   JarClasspathSnapshotMaker ( compileCaches . getLocalJarClasspathSnapshotStore (  )  ,    new   JarClasspathSnapshotFactory ( jarSnapshotter )  ,    new   ClasspathJarFinder ( fileOperations )  )  ;", "CompilationSourceDirs   sourceDirs    =    new   CompilationSourceDirs ( source )  ;", "SourceToNameConverter   sourceToNameConverter    =    new   SourceToNameConverter ( sourceDirs )  ;", "RecompilationSpecProvider   recompilationSpecProvider    =    new   RecompilationSpecProvider ( sourceToNameConverter ,    fileOperations )  ;", "ClassSetAnalysisUpdater   classSetAnalysisUpdater    =    new   ClassSetAnalysisUpdater ( compileCaches . getLocalClassSetAnalysisStore (  )  ,    fileOperations ,    analyzer ,    fileHasher )  ;", "IncrementalCompilationInitializer   compilationInitializer    =    new   IncrementalCompilationInitializer ( fileOperations )  ;", "Decorator   incrementalSupport    =    new   Decorator ( jarClasspathSnapshotMaker ,    compileCaches ,    compilationInitializer ,    cleaningJavaCompiler ,    compileDisplayName ,    recompilationSpecProvider ,    classSetAnalysisUpdater ,    sourceDirs ,    annotationProcessorClasspath ,    annotationProcessorDetector )  ;", "return   incrementalSupport . prepareCompiler ( inputs )  ;", "}", "METHOD_END"], "methodName": ["makeIncremental"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.IncrementalCompilerFactory"}, {"methodBody": ["METHOD_START", "{", "String   className    =    sourceToNameConverter . getClassName ( input . getFile (  )  )  ;", "spec . getClassesToC (  )  . add ( className )  ;", "DependentsSet   actualDependents    =    previousCompilation . getDependents ( className ,    EMPTY _ SET )  ;", "if    ( actualDependents . isDependencyToAll (  )  )     {", "spec . setFullRebuildCause ( actualDependents . getDescription (  )  ,    input . getFile (  )  )  ;", "return ;", "}", "spec . getClassesToC (  )  . addAll ( actualDependents . getDependentClasses (  )  )  ;", "}", "METHOD_END"], "methodName": ["processChange"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.JavaChangeProcessor"}, {"methodBody": ["METHOD_START", "{", "JarChangeProcessor   jarChangeProcessor    =    new   JarChangeProcessor ( fileOperations ,    current . getClasspathSnapshot (  )  ,    previous )  ;", "Map < File ,    JarSnapshot >    previousCJarSnapshots    =    previous . getJarSnapshots (  )  ;", "JarClasspathSnapshot   currentJarSnapshots    =    current . getClasspathSnapshot (  )  ;", "Set < File >    previousCJars    =    previousCJarSnapshots . keySet (  )  ;", "Set < File >    currentCJars    =    currentJarSnapshots . getJars (  )  ;", "List < Alignment < File >  >    alignment    =    Alignment . align ( currentCJars . toArray ( new   File [  0  ]  )  ,    previousCJars . toArray ( new   File [  0  ]  )  )  ;", "for    ( Alignment < File >    fileAlignment    :    alignment )     {", "switch    ( fileAlignment . getKind (  )  )     {", "case   added    :", "jarChangeProcessor . processChange ( FileChange . added ( fileAlignment . getCurrentValue (  )  . getAbsolutePath (  )  ,     \" jar \"  ,    RegularFile )  ,    spec )  ;", "break ;", "case   removed    :", "jarChangeProcessor . processChange ( FileChange . removed ( fileAlignment . getPreviousValue (  )  . getAbsolutePath (  )  ,     \" jar \"  ,    RegularFile )  ,    spec )  ;", "break ;", "case   transformed    :", "spec . setFullRebuildCause (  \" Classpath   has   been   changed \"  ,    null )  ;", "return ;", "case   identical    :", "File   key    =    fileAlignment . getPreviousValue (  )  ;", "JarSnapshot   previousSnapshot    =    previousCJarSnapshots . get ( key )  ;", "JarSnapshot   snapshot    =    currentJarSnapshots . getSnapshot ( key )  ;", "if    (  !  ( snapshot . getHash (  )  . equals ( previousSnapshot . getHash (  )  )  )  )     {", "jarChangeProcessor . processChange ( FileChange . modified ( key . getAbsolutePath (  )  ,     \" jar \"  ,    RegularFile ,    RegularFile )  ,    spec )  ;", "}", "break ;", "}", "}", "}", "METHOD_END"], "methodName": ["processJarClasspathChanges"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.RecompilationSpecProvider"}, {"methodBody": ["METHOD_START", "{", "JavaChangeProcessor   javaChangeProcessor    =    new   JavaChangeProcessor ( previous ,    sourceToNameConverter )  ;", "ClassChangeProcessor   classChangeProcessor    =    new   ClassChangeProcessor ( previous )  ;", "AnnotProcessorChangeProcessor   annotProcessorChangeProcessor    =    new   AnnotProcessorChangeProcessor ( current ,    previous )  ;", "InputChangeAction   action    =    new   InputChangeAction ( spec ,    javaChangeProcessor ,    classChangeProcessor ,    annotProcessorChangeProcessor )  ;", "current . visitChanges ( action )  ;", "}", "METHOD_END"], "methodName": ["processOtherChanges"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.RecompilationSpecProvider"}, {"methodBody": ["METHOD_START", "{", "RecompilationSpec   spec    =    new   RecompilationSpec (  )  ;", "processJarClasspathChanges ( current ,    previous ,    spec )  ;", "processOtherChanges ( current ,    previous ,    spec )  ;", "spec . getClassesToProcess (  )  . addAll ( previous . getAggregatedTypes (  )  . getDependentClasses (  )  )  ;", "return   spec ;", "}", "METHOD_END"], "methodName": ["provideRecompilationSpec"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.RecompilationSpecProvider"}, {"methodBody": ["METHOD_START", "{", "List < File >    dirs    =    sourceDirs . getSourceRoots (  )  ;", "for    ( File   sourceDir    :    dirs )     {", "if    ( getAbsolutePath (  )  . startsWith ( sourceDir . getAbsolutePath (  )  )  )     {", "String   relativePath    =    RelativePathUtil . relativePath ( sourceDir ,    javaSourceClass )  ;", "if    (  !  ( relativePath . startsWith (  \"  .  .  \"  )  )  )     {", "return   relativePath . replaceAll (  \"  /  \"  ,     \"  .  \"  )  . replaceAll (  \"  \\  \\  . java $  \"  ,     \"  \"  )  ;", "}", "}", "}", "throw   new   IllegalArgumentException ( String . format (  \" Unable   to   find   source   java   class :     '  % s '    because   it   does   not   belong   to   any   of   the   source   dirs :     '  % s '  \"  ,    javaSourceClass ,    dirs )  )  ;", "}", "METHOD_END"], "methodName": ["getClassName"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.SourceToNameConverter"}, {"methodBody": ["METHOD_START", "{", "return   accumulator . getAnalysis (  )  ;", "}", "METHOD_END"], "methodName": ["getAnalysis"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.analyzer.CompilationResultAnalyzer"}, {"methodBody": ["METHOD_START", "{", "if    ( annotationProcessingResult    =  =    null )     {", "accumulator . fullRebuildNeeded (  \" the   chosen   compiler   did   not   support      annotation   processing \"  )  ;", "} else    {", "accumulator . addAnnotationProcessingResult ( annotationProcessingResult )  ;", "}", "}", "METHOD_END"], "methodName": ["visitAnnotationProcessingResult"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.analyzer.CompilationResultAnalyzer"}, {"methodBody": ["METHOD_START", "{", "ClassReader   reader    =    new   ClassReader ( ByteStreams . toByteArray ( input )  )  ;", "String   className    =    reader . getClassName (  )  . replace (  \"  /  \"  ,     \"  .  \"  )  ;", "return   Visitor . analyze ( className ,    reader )  ;", "}", "METHOD_END"], "methodName": ["getClassAnalysis"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.analyzer.DefaultClassDependenciesAnalyzer"}, {"methodBody": ["METHOD_START", "{", "IntSet   constants    =    new   IntOpenHashSet (  2  )  ;", "Set < String >    classDependencies    =    Sets . newHashSet (  )  ;", "visitor    =    new    ( constants ,    classDependencies ,    new   ClassRelevancyFilter ( className )  ,    reader )  ;", "reader . accept ( visitor ,     (  ( ClassReader . SKIP _ DEBUG )     |     ( ClassReader . SKIP _ FRAMES )  )  )  ;", "return   new   ClassAnalysis ( className ,    classDependencies ,    visitor . isDependencyToAll (  )  ,    constants ,    visitor . getSuperTypes (  )  )  ;", "}", "METHOD_END"], "methodName": ["analyze"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.asm.ClassDependenciesVisitor"}, {"methodBody": ["METHOD_START", "{", "char [  ]    charBuffer    =    new   char [ reader . getMaxStringLength (  )  ]  ;", "for    ( int   i    =     1  ;    i    <     ( reader . getItemCount (  )  )  ;    i +  +  )     {", "int   itemOffset    =    reader . getItem ( i )  ;", "if    (  ( itemOffset    >     0  )     &  &     (  ( reader . readByte (  ( itemOffset    -     1  )  )  )     =  =     7  )  )     {", "String   classDescriptor    =    reader . readUTF 8  ( itemOffset ,    charBuffer )  ;", "Type   type    =    Type . getObjectType ( classDescriptor )  ;", "while    (  ( type . getSort (  )  )     =  =     ( Type . ARRAY )  )     {", "type    =    type . getElementType (  )  ;", "}", "if    (  ( type . getSort (  )  )     !  =     ( Type . OBJECT )  )     {", "continue ;", "}", "String   name    =    type . getClassName (  )  ;", "maybeAddtType ( name )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["collectClassDependencies"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.asm.ClassDependenciesVisitor"}, {"methodBody": ["METHOD_START", "{", "Type   type    =    Type . getType ( desc )  ;", "if    (  (  ( type . getSort (  )  )     =  =     ( Type . ARRAY )  )     &  &     (  ( type . getDimensions (  )  )     >     0  )  )     {", "type    =    type . getElType (  )  ;", "}", "return   type . getClassName (  )  ;", "}", "METHOD_END"], "methodName": ["descTypeOf"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.asm.ClassDependenciesVisitor"}, {"methodBody": ["METHOD_START", "{", "return   superTypes ;", "}", "METHOD_END"], "methodName": ["getSuperTypes"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.asm.ClassDependenciesVisitor"}, {"methodBody": ["METHOD_START", "{", "return    (  ( ClassDependenciesVisitor . isConstant ( access )  )     &  &     (  !  ( ClassDependenciesVisitor . isPrivate ( access )  )  )  )     &  &     ( value    !  =    null )  ;", "}", "METHOD_END"], "methodName": ["isAccessibleConstant"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.asm.ClassDependenciesVisitor"}, {"methodBody": ["METHOD_START", "{", "return    (  ( interfaces . length )     =  =     1  )     &  &     ( interfaces [  0  ]  . equals (  \" java / lang / annotation / Annotation \"  )  )  ;", "}", "METHOD_END"], "methodName": ["isAnnotationType"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.asm.ClassDependenciesVisitor"}, {"methodBody": ["METHOD_START", "{", "return    (  ( access    &     ( Opcodes . ACC _ FINAL )  )     !  =     0  )     &  &     (  ( access    &     ( Opcodes . ACC _ STATIC )  )     !  =     0  )  ;", "}", "METHOD_END"], "methodName": ["isConstant"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.asm.ClassDependenciesVisitor"}, {"methodBody": ["METHOD_START", "{", "return   dependencyToAll ;", "}", "METHOD_END"], "methodName": ["isDependencyToAll"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.asm.ClassDependenciesVisitor"}, {"methodBody": ["METHOD_START", "{", "return    ( access    &     ( Opcodes . ACC _ PRIVATE )  )     !  =     0  ;", "}", "METHOD_END"], "methodName": ["isPrivate"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.asm.ClassDependenciesVisitor"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( types )     !  =    null )     &  &     ( typeFilter . apply ( type )  )  )     {", "types . add ( type )  ;", "}", "}", "METHOD_END"], "methodName": ["maybeAddDependentType"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.asm.ClassDependenciesVisitor"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( superTypes )     !  =    null )     &  &     ( typeFilter . apply ( type )  )  )     {", "superTypes . add ( type )  ;", "}", "}", "METHOD_END"], "methodName": ["maybeAddSuperType"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.asm.ClassDependenciesVisitor"}, {"methodBody": ["METHOD_START", "{", "IntSet   constants    =    new   IntOpenHashSet (  2  )  ;", "visitor    =    new    ( constants )  ;", "reader . accept ( visitor ,     (  ( ClassReader . SKIP _ DEBUG )     |     ( ClassReader . SKIP _ FRAMES )  )  )  ;", "return   constants ;", "}", "METHOD_END"], "methodName": ["retrieveConstants"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.asm.ClassDependenciesVisitor"}, {"methodBody": ["METHOD_START", "{", "return   Type . getObjectType ( slashyStyleDesc )  . getClassName (  )  ;", "}", "METHOD_END"], "methodName": ["typeOfFromSlashyString"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.asm.ClassDependenciesVisitor"}, {"methodBody": ["METHOD_START", "{", "return    (  (  !  ( className . startsWith (  \" \"  )  )  )     &  &     (  !  ( excludedClassName . equals ( className )  )  )  )     &  &     (  !  ( ClassRelevancyFilter . PRIMITIVES . contains ( className )  )  )  ;", "}", "METHOD_END"], "methodName": ["apply"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.asm.ClassRelevancyFilter"}, {"methodBody": ["METHOD_START", "{", "return   addedClasses ;", "}", "METHOD_END"], "methodName": ["getAdded"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.AffectedClasses"}, {"methodBody": ["METHOD_START", "{", "return   altered ;", "}", "METHOD_END"], "methodName": ["getAltered"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.AffectedClasses"}, {"methodBody": ["METHOD_START", "{", "return   classDependencies ;", "}", "METHOD_END"], "methodName": ["getClassDependencies"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.ClassAnalysis"}, {"methodBody": ["METHOD_START", "{", "return   className ;", "}", "METHOD_END"], "methodName": ["getClassName"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.ClassAnalysis"}, {"methodBody": ["METHOD_START", "{", "return   constants ;", "}", "METHOD_END"], "methodName": ["getConstants"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.ClassAnalysis"}, {"methodBody": ["METHOD_START", "{", "return   superTypes ;", "}", "METHOD_END"], "methodName": ["getSuperTypes"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.ClassAnalysis"}, {"methodBody": ["METHOD_START", "{", "return   dependencyToAll ;", "}", "METHOD_END"], "methodName": ["isDependencyToAll"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.ClassAnalysis"}, {"methodBody": ["METHOD_START", "{", "for    ( Map . Entry < String ,    Set < String >  >    entry    :    annotationProcessingResult . getGeneratedTypesWithIsolatedOrigin (  )  . entrySet (  )  )     {", "String   originatingType    =    entry . getKey (  )  ;", "for    ( String   generatedType    :    entry . getValue (  )  )     {", "addDependency ( originatingType ,    generatedType )  ;", "addDependency ( generatedType ,    originatingType )  ;", "}", "}", "aggregatedTypes . addAll ( annotationProcessingResult . getAggregatedTypes (  )  )  ;", "dOnAll . addAll ( annotationProcessingResult . getGeneratedAggregatingTypes (  )  )  ;", "}", "METHOD_END"], "methodName": ["addAnnotationProcessingResult"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.ClassDependentsAccumulator"}, {"methodBody": ["METHOD_START", "{", "addClass ( classAnalysis )  ;", "filePathToClassName . put ( classFile . getAbsolutePath (  )  ,    classAnalysis . getClassName (  )  )  ;", "}", "METHOD_END"], "methodName": ["addClass"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.ClassDependentsAccumulator"}, {"methodBody": ["METHOD_START", "{", "if    ( seenClasses . contains ( className )  )     {", "return ;", "}", "seenClasses . add ( className )  ;", "classesToConstants . put ( className ,    constants )  ;", "if    ( dependencyToAll )     {", "dependenciesToAll . add ( className )  ;", "dependents . remove ( className )  ;", "}", "for    ( String   dependency    :    ccies )     {", "if    (  (  !  ( dependency . equals ( className )  )  )     &  &     (  !  ( dependenciesToAll . contains ( dependency )  )  )  )     {", "addDependency ( dependency ,    className )  ;", "}", "}", "for    ( String   superType    :    superTypes )     {", "parentToChildren . put ( superType ,    className )  ;", "}", "}", "METHOD_END"], "methodName": ["addClass"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.ClassDependentsAccumulator"}, {"methodBody": ["METHOD_START", "{", "addClass ( classAnalysis . getClassName (  )  ,    classAnalysis . isDependencyToAll (  )  ,    classAnalysis . getClassDependencies (  )  ,    classAnalysis . getConstants (  )  ,    classAnalysis . getSuperTypes (  )  )  ;", "}", "METHOD_END"], "methodName": ["addClass"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.ClassDependentsAccumulator"}, {"methodBody": ["METHOD_START", "{", "Set < String >    dependents    =    rememberClass ( dependency )  ;", "dependents . add ( dependent )  ;", "}", "METHOD_END"], "methodName": ["addDependency"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.ClassDependentsAccumulator"}, {"methodBody": ["METHOD_START", "{", "Builder < K ,    Set < V >  >    builder    =    ImmutableMap . builder (  )  ;", "for    ( K   key    :    timap . keySet (  )  )     {", "builder . put ( key ,    ImmutableSet . copyOf ( timap . get ( key )  )  )  ;", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["asMap"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.ClassDependentsAccumulator"}, {"methodBody": ["METHOD_START", "{", "this . fullRebuildCause    =    fullRebuildCause ;", "}", "METHOD_END"], "methodName": ["fullRebuildNeeded"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.ClassDependentsAccumulator"}, {"methodBody": ["METHOD_START", "{", "return   new   ClassSetAnalysisData ( filePathToClassName ,    getDependentsMap (  )  ,    getClassesToConstants (  )  ,    ClassDependentsAccumulator . asMap ( parentToChildren )  ,    DependentsSet . dependents ( aggregatedTypes )  ,    DependentsSet . dependents ( dependentsOnAll )  ,    fullRebuildCause )  ;", "}", "METHOD_END"], "methodName": ["getAnalysis"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.ClassDependentsAccumulator"}, {"methodBody": ["METHOD_START", "{", "return   classesToConstants ;", "}", "METHOD_END"], "methodName": ["getClassesToConstants"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.ClassDependentsAccumulator"}, {"methodBody": ["METHOD_START", "{", "if    (  ( dependenciesToAll . isEmpty (  )  )     &  &     ( dependents . isEmpty (  )  )  )     {", "return   Collections . emptyMap (  )  ;", "}", "Builder < String ,    Set >    builder    =    ImmutableMap . builder (  )  ;", "for    ( String   s    :    dependenciesToAll )     {", "builder . put ( s ,    Set . dependencyToAll (  )  )  ;", "}", "for    ( Map . Entry < String ,    Set < String >  >    entry    :    dependents . entrySet (  )  )     {", "builder . put ( entry . getKey (  )  ,    Set . dependents ( entry . getValue (  )  )  )  ;", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["getDependentsMap"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.ClassDependentsAccumulator"}, {"methodBody": ["METHOD_START", "{", "Set < String >    d    =    dependents . get ( className )  ;", "if    ( d    =  =    null )     {", "d    =    Sets . newHashSet (  )  ;", "dependents . put ( className ,    d )  ;", "}", "return   d ;", "}", "METHOD_END"], "methodName": ["rememberClass"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.ClassDependentsAccumulator"}, {"methodBody": ["METHOD_START", "{", "return   data . getAggregatedTypes (  )  ;", "}", "METHOD_END"], "methodName": ["getAggregatedTypes"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.ClassSetAnalysis"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.ClassSetAnalysis"}, {"methodBody": ["METHOD_START", "{", "Set < String >    result    =    null ;", "for    ( String   cls    :    classes )     {", "DependentsSet   d    =    getRelevantDependents ( cls ,    constants )  ;", "if    ( d . isDependencyToAll (  )  )     {", "return   d ;", "}", "Set < String >    dependentes    =    d . getDependentes (  )  ;", "if    ( dependentes . isEmpty (  )  )     {", "continue ;", "}", "if    ( result    =  =    null )     {", "result    =    Sets . newLinkedHashSet (  )  ;", "}", "result . addAll ( dependentes )  ;", "}", "return   result    =  =    null    ?    DependentsSet . empty (  )     :    DependentsSet . dependents ( result )  ;", "}", "METHOD_END"], "methodName": ["getRelevantDependents"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.ClassSetAnalysis"}, {"methodBody": ["METHOD_START", "{", "DependentsSet    =    data . getDependents ( className )  ;", "if    ( isDependencyToAll (  )  )     {", "return", "}", "if    (  !  ( constants . isEmpty (  )  )  )     {", "return   DependentsSet . dependencyToAll (  )  ;", "}", "DependentsSet   dependentsOnAll    =    data . getDependentsOnAll (  )  ;", "if    (  ( getDependentClasses (  )  . isEmpty (  )  )     &  &     ( dependentsOnAll . getDependentClasses (  )  . isEmpty (  )  )  )     {", "return", "}", "Set < String >    result    =    new   HashSet < String >  (  )  ;", "recurseDependents ( new   HashSet < String >  (  )  ,    result ,    Iterables . concat ( getDependentClasses (  )  ,    dependentsOnAll . getDependentClasses (  )  )  )  ;", "result . remove ( className )  ;", "return   DependentsSet . dependents ( result )  ;", "}", "METHOD_END"], "methodName": ["getRelevantDependents"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.ClassSetAnalysis"}, {"methodBody": ["METHOD_START", "{", "return   data . getDependents ( className )  . isDependencyToAll (  )  ;", "}", "METHOD_END"], "methodName": ["isDependencyToAll"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.ClassSetAnalysis"}, {"methodBody": ["METHOD_START", "{", "return   d . contains (  \"  $  \"  )  ;", "}", "METHOD_END"], "methodName": ["isNestedClass"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.ClassSetAnalysis"}, {"methodBody": ["METHOD_START", "{", "for    ( String   d    :    dependentClasses )     {", "if    (  !  ( visited . add ( d )  )  )     {", "continue ;", "}", "if    (  !  ( isNestedClass ( d )  )  )     {", "result . add ( d )  ;", "}", "DependentsSet   currentDependents    =    data . getDependents ( d )  ;", "if    (  !  ( currentDependents . isDependencyToAll (  )  )  )     {", "recurseDependents ( visited ,    result ,    currentDependents . getDependentClasses (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["recurseDependents"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.ClassSetAnalysis"}, {"methodBody": ["METHOD_START", "{", "return   aggregatedTypes ;", "}", "METHOD_END"], "methodName": ["getAggregatedTypes"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.ClassSetAnalysisData"}, {"methodBody": ["METHOD_START", "{", "Set < String >    children    =    classesToChildren . get ( className )  ;", "return   children    =  =    null    ?    Collections .  < String > emptySet (  )     :    children ;", "}", "METHOD_END"], "methodName": ["getChildren"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.ClassSetAnalysisData"}, {"methodBody": ["METHOD_START", "{", "return   filePathToClassName . get ( filePath )  ;", "}", "METHOD_END"], "methodName": ["getClassNameForFile"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.ClassSetAnalysisData"}, {"methodBody": ["METHOD_START", "{", "IntSet   integers    =    classesToConstants . get ( className )  ;", "if    ( integers    =  =    null )     {", "return   IntSets . EMPTY _ SET ;", "}", "return   integers ;", "}", "METHOD_END"], "methodName": ["getConstants"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.ClassSetAnalysisData"}, {"methodBody": ["METHOD_START", "{", "if    (  ( fullRebuildCause )     !  =    null )     {", "return   Dependent . dependencyToAll ( fullRebuildCause )  ;", "}", "Dependent   dependent    =    dependents . get ( className )  ;", "return   dependent    =  =    null    ?    Dependent . empty (  )     :    dependent ;", "}", "METHOD_END"], "methodName": ["getDependents"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.ClassSetAnalysisData"}, {"methodBody": ["METHOD_START", "{", "return   dependentsOnAll ;", "}", "METHOD_END"], "methodName": ["getDependentsOnAll"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.ClassSetAnalysisData"}, {"methodBody": ["METHOD_START", "{", "return   DependentsSet . DependencyToAll . INSTANCE ;", "}", "METHOD_END"], "methodName": ["dependencyToAll"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.DependentsSet"}, {"methodBody": ["METHOD_START", "{", "return   new   DependentsSet . DependencyToAll ( reason )  ;", "}", "METHOD_END"], "methodName": ["dependencyToAll"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.DependentsSet"}, {"methodBody": ["METHOD_START", "{", "if    (  ( dependentClasses . length )     =  =     0  )     {", "return    . empty (  )  ;", "} else    {", "return   new    . Default ( ImmutableSet . copyOf ( dependentClasses )  )  ;", "}", "}", "METHOD_END"], "methodName": ["dependents"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.DependentsSet"}, {"methodBody": ["METHOD_START", "{", "if    ( dependentClasses . isEmpty (  )  )     {", "return    . empty (  )  ;", "} else    {", "return   new    . Default ( ImmutableSet . copyOf ( dependentClasses )  )  ;", "}", "}", "METHOD_END"], "methodName": ["dependents"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.DependentsSet"}, {"methodBody": ["METHOD_START", "{", "return   DependentsSet . EmptyDependentsSet . INSTANCE ;", "}", "METHOD_END"], "methodName": ["empty"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.DependentsSet"}, {"methodBody": ["METHOD_START", "{", "String   path    =    relativePath ( compiledClassesDir ,    classFile )  ;", "if    (  ( path . startsWith (  \"  /  \"  )  )     |  |     ( path . startsWith (  \"  .  \"  )  )  )     {", "throw   new   IllegalArgumentException (  (  (  (  (  \" Given   input   class   file :     '  \"     +    classFile )     +     \"  '    is   not   located   inside   of    '  \"  )     +     ( compiledClassesDir )  )     +     \"  '  .  \"  )  )  ;", "}", "return   path . replaceAll (  \"  /  \"  ,     \"  .  \"  )  . replaceAll (  \"  \\  \\  . class \"  ,     \"  \"  )  ;", "}", "METHOD_END"], "methodName": ["getClassName"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.deps.OutputToNameConverter"}, {"methodBody": ["METHOD_START", "{", "return   fileHasher . hash ( jarArchive . file )  ;", "}", "METHOD_END"], "methodName": ["getHash"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.CachingJarSnapshotter"}, {"methodBody": ["METHOD_START", "{", "List < JarArchive >    out    =    new   LinkedList < JarArchive >  (  )  ;", "for    ( File   file    :    c )     {", "if    ( FileUtils . hasExtension ( file ,     \"  . jar \"  )  )     {", "out . add ( new   JarArchive ( file ,    fileOperations . zipTree ( file )  )  )  ;", "}", "}", "return   out ;", "}", "METHOD_END"], "methodName": ["findJarArchives"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.ClasspathJarFinder"}, {"methodBody": ["METHOD_START", "{", "final   Map < String ,    HashCode >    hashes    =    Maps . newHashMap (  )  ;", "final   ClassDependentsAccumulator   accumulator    =    new   ClassDependentsAccumulator (  )  ;", "jarArchive . contents . visit ( new   FileVisitor (  )     {", "public   void   visitDir ( FileVisitDetails   dirDetails )     {", "}", "public   void   visitFile ( FileVisitDetails   fileDetails )     {", "if    (  !  ( fileDetails . getName (  )  . endsWith (  \"  . class \"  )  )  )     {", "return ;", "}", "HashCode   classFileHash ;", "InputStream   inputStream    =    fileDetails . open (  )  ;", "try    {", "classFileHash    =    hasher . hash ( inputStream )  ;", "}    finally    {", "try    {", "inputStream . close (  )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "ClassAnalysis   analysis    =    analyzer . getClassAnalysis ( classFileHash ,    fileDetails )  ;", "accumulator . addClass ( analysis )  ;", "hashes . put ( analysis . getClassName (  )  ,    classFileHash )  ;", "}", "}  )  ;", "return   new    ( new   Data ( hash ,    hashes ,    accumulator . getAnalysis (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["createSnapshot"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.DefaultJarSnapshotter"}, {"methodBody": ["METHOD_START", "{", "if    ( jarChangeDetails . isAdded (  )  )     {", "if    ( jarClasspathSnapshot . isAnyClassDuplicated ( jarArchive )  )     {", "return   DependentsSet . dependencyToAll (  (  (  \" at   least   one   of   the   classes   of    '  \"     +     ( jarArchive . file . getName (  )  )  )     +     \"  '    is   already   present   in   classpath \"  )  )  ;", "} else    {", "return   DependentsSet . empty (  )  ;", "}", "}", "final   JarSnapshot   previous    =    previousCompilation . getJarSnapshot ( jarChangeDetails . getFile (  )  )  ;", "if    ( previous    =  =    null )     {", "return   DependentsSet . dependencyToAll (  (  (  \" missing   jar   snapshot   of    '  \"     +     ( jarArchive . file . getName (  )  )  )     +     \"  '    from   previous   build \"  )  )  ;", "}", "if    ( jarChangeDetails . isRemoved (  )  )     {", "DependentsSet   allClasses    =    previous . getAllClasses (  )  ;", "if    ( allClasses . isDependencyToAll (  )  )     {", "return   DependentsSet . dependencyToAll (  (  (  \" at   least   one   of   the   classes   of   removed   jar    '  \"     +     ( jarArchive . file . getName (  )  )  )     +     \"  '    requires   it \"  )  )  ;", "}", "return   previousCompilation . getDependents ( allClasses . getDependentClasses (  )  ,    previous . getAllConstants ( allClasses )  )  ;", "}", "if    ( jarChangeDetails . isModified (  )  )     {", "final   JarSnapshot   currentSnapshot    =    jarClasspathSnapshot . getSnapshot ( jarArchive )  ;", "AffectedClasses   affected    =    currentSnapshot . getAffectedClassesSince ( previous )  ;", "DependentsSet   altered    =    affected . getAltered (  )  ;", "if    ( altered . isDependencyToAll (  )  )     {", "return   altered ;", "}", "if    ( jarClasspathSnapshot . isAnyClassDuplicated ( affected . getAdded (  )  )  )     {", "return   DependentsSet . dependencyToAll (  (  (  \" at   least   one   of   the   classes   of   modified   jar    '  \"     +     ( jarArchive . file . getName (  )  )  )     +     \"  '    is   already   present   in   the   classpath \"  )  )  ;", "}", "final   Set < String >    dependentClasses    =    Sets . newHashSet ( altered . getDependentClasses (  )  )  ;", "final   Deque < String >    queue    =    Lists . newLinkedList ( dependentClasses )  ;", "while    (  !  ( queue . isEmpty (  )  )  )     {", "final   String   dependentClass    =    queue . poll (  )  ;", "jarClasspathSnapshot . forEachSnapshot ( new   Action < JarSnapshot >  (  )     {", "@ Override", "public   void   execute ( JarSnapshot   jarSnapshot )     {", "if    ( jarSnapshot    !  =    previous )     {", "ClassSetAnalysisData   data    =    jarSnapshot . getData (  )  . data ;", "Set < String >    children    =    data . getChildren ( dependentClass )  ;", "for    ( String   child    :    children )     {", "if    ( dependentClasses . add ( child )  )     {", "queue . add ( child )  ;", "}", "}", "}", "}", "}  )  ;", "}", "return   previousCompilation . getDependents ( dependentClasses ,    currentSnapshot . getRelevantConstants ( previous ,    dependentClasses )  )  ;", "}", "throw   new   IllegalArgumentException (  (  \" Unknown   input   file   details   provided :     \"     +    jarChangeDetails )  )  ;", "}", "METHOD_END"], "methodName": ["getActualDependents"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.JarChangeDependentsFinder"}, {"methodBody": ["METHOD_START", "{", "JarArchive   jarArchive    =    new   JarArchive ( input . getFile (  )  ,    fileOperations . zipTree ( input . getFile (  )  )  )  ;", "DependentsSet   actualDependents    =    dependentsFinder . getActualDependents ( input ,    jarArchive )  ;", "if    ( actualDependents . isDependencyToAll (  )  )     {", "spec . setFullRebuildCause ( actualDependents . getDescription (  )  ,    input . getFile (  )  )  ;", "return ;", "}", "spec . getClassesToC (  )  . addAll ( actualDependents . getDependentClasses (  )  )  ;", "}", "METHOD_END"], "methodName": ["processChange"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.JarChangeProcessor"}, {"methodBody": ["METHOD_START", "{", "for    ( JarSnapshot   jarSnapshot    :    jarSnapshots . values (  )  )     {", "action . execute ( jarSnapshot )  ;", "}", "}", "METHOD_END"], "methodName": ["forEachSnapshot"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.JarClasspathSnapshot"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.JarClasspathSnapshot"}, {"methodBody": ["METHOD_START", "{", "return   jarSnapshots . keySet (  )  ;", "}", "METHOD_END"], "methodName": ["getJars"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.JarClasspathSnapshot"}, {"methodBody": ["METHOD_START", "{", "return   jarSnapshots . get ( file )  ;", "}", "METHOD_END"], "methodName": ["getSnapshot"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.JarClasspathSnapshot"}, {"methodBody": ["METHOD_START", "{", "return   jarSnapshots . get ( jarArchive . file )  ;", "}", "METHOD_END"], "methodName": ["getSnapshot"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.JarClasspathSnapshot"}, {"methodBody": ["METHOD_START", "{", "boolean   noCommonElements    =    Collections . disjoint ( data . getDuplicateClasses (  )  ,    classNames )  ;", "return    ! noCommonElements ;", "}", "METHOD_END"], "methodName": ["isAnyClassDuplicated"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.JarClasspathSnapshot"}, {"methodBody": ["METHOD_START", "{", "JarSnapshot   snapshot    =    getSnapshot ( jarArchive )  ;", "return   isAnyClassDuplicated ( snapshot . getClasses (  )  )  ;", "}", "METHOD_END"], "methodName": ["isAnyClassDuplicated"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.JarClasspathSnapshot"}, {"methodBody": ["METHOD_START", "{", "return   duplicateClasses ;", "}", "METHOD_END"], "methodName": ["getDuplicateClasses"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.JarClasspathSnapshotData"}, {"methodBody": ["METHOD_START", "{", "return   jarHashes ;", "}", "METHOD_END"], "methodName": ["getJarHashes"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.JarClasspathSnapshotData"}, {"methodBody": ["METHOD_START", "{", "LinkedHashMap < File ,    JarSnapshot >    jarSnapshots    =    Maps . newLinkedHashMap (  )  ;", "LinkedHashMap < File ,    HashCode >    jarHashes    =    Maps . newLinkedHashMap (  )  ;", "Set < String >    allClasses    =    Sets . newHashSet (  )  ;", "Set < String >    duplicateClasses    =    Sets . newHashSet (  )  ;", "for    ( JarArchive   jar    :    jarArchives )     {", "if    ( jar . file . exists (  )  )     {", "JarSnapshot   snapshot    =    jarSnapshotter . createSnapshot ( jar )  ;", "jarSnapshots . put ( jar . file ,    snapshot )  ;", "jarHashes . put ( jar . file ,    snapshot . getHash (  )  )  ;", "for    ( String   c    :    snapshot . getClasses (  )  )     {", "if    (  !  ( allClasses . add ( c )  )  )     {", "duplicateClasses . add ( c )  ;", "}", "}", "}", "}", "Data   jarClasspathSnapshotData    =    new   Data ( jarHashes ,    duplicateClasses )  ;", "return   new    ( jarSnapshots ,    jarClasspathSnapshotData )  ;", "}", "METHOD_END"], "methodName": ["createSnapshot"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.JarClasspathSnapshotFactory"}, {"methodBody": ["METHOD_START", "{", "if    (  ( jarClasspathSnapshot )     !  =    null )     {", "return ;", "}", "Timer   clock    =    Time . startTimer (  )  ;", "Iterable < JarArchive >    jarArchives    =    classpathJarFinder . findJarArchives ( classpath )  ;", "jarClasspathSnapshot    =    classpathSnapshotFactory . createSnapshot ( jarArchives )  ;", "int   duplicatesCount    =    jarClasspathSnapshot . getData (  )  . getDuplicateClasses (  )  . size (  )  ;", "String   duplicateClassesMessage    =     ( duplicatesCount    =  =     0  )     ?     \"  \"     :     (  \"  .     \"     +    duplicatesCount )     +     \"    duplicate   classes   found   in   classpath    ( see   all   with    -  - debug )  \"  ;", ". LOG . info (  \" Created   jar   classpath   snapshot   for   incremental   compilation   in    {  }  {  }  .  \"  ,    clock . getElapsed (  )  ,    duplicateClassesMessage )  ;", ". LOG . debug (  \" While   calculating   jar   classpath   snapshot    {  }    duplicate   classes   were   found :     {  }  .  \"  ,    duplicatesCount ,    jarClasspathSnapshot . getData (  )  . getDuplicateClasses (  )  )  ;", "}", "METHOD_END"], "methodName": ["maybeInitialize"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.JarClasspathSnapshotMaker"}, {"methodBody": ["METHOD_START", "{", "Set < String >    addedClasses    =    new   HashSet < String >  ( getClasses (  )  )  ;", "addedClasses . oveAll ( other . getClasses (  )  )  ;", "return   addedClasses ;", "}", "METHOD_END"], "methodName": ["addedSince"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.JarSnapshot"}, {"methodBody": ["METHOD_START", "{", "final   Set < String >    affected    =    new   HashSet < String >  (  )  ;", "for    ( Map . Entry < String ,    HashCode >    otherClass    :    other . getHashes (  )  . entrySet (  )  )     {", "String   otherClassName    =    otherClass . getKey (  )  ;", "HashCode   otherClassBytes    =    otherClass . getValue (  )  ;", "HashCode   thisClsBytes    =    getHashes (  )  . get ( otherClassName )  ;", "if    (  ( thisClsBytes    =  =    null )     |  |     (  !  ( thisClsBytes . equals ( otherClassBytes )  )  )  )     {", "affected . add ( otherClassName )  ;", "DependentsSet   dependents    =    other . getAnalysis (  )  . getRelevantDependents ( otherClassName ,    EMPTY _ SET )  ;", "if    ( dependents . isDependencyToAll (  )  )     {", "return   dependents ;", "}", "affected . addAll ( dependents . getDependentClasses (  )  )  ;", "}", "}", "return   DependentsSet . dependents ( affected )  ;", "}", "METHOD_END"], "methodName": ["affectedSince"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.JarSnapshot"}, {"methodBody": ["METHOD_START", "{", "DependentsSet   affectedClasses    =    affectedSince ( other )  ;", "Set < String >    addedClasses    =    addedSince ( other )  ;", "return   new   AffectedClasses ( affectedClasses ,    addedClasses )  ;", "}", "METHOD_END"], "methodName": ["getAffectedClassesSince"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.JarSnapshot"}, {"methodBody": ["METHOD_START", "{", "final   Set < String >    result    =    new   HashSet < String >  (  )  ;", "for    ( Map . Entry < String ,    HashCode >    cls    :    getHashes (  )  . entrySet (  )  )     {", "String   className    =    cls . getKey (  )  ;", "if    ( getAnalysis (  )  . isDependencyToAll ( className )  )     {", "return   DependentsSet . dependencyToAll (  )  ;", "}", "result . add ( className )  ;", "}", "return   DependentsSet . dependents ( result )  ;", "}", "METHOD_END"], "methodName": ["getAllClasses"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.JarSnapshot"}, {"methodBody": ["METHOD_START", "{", "IntSet   result    =    new   IntOpenHashSet (  )  ;", "for    ( String   cn    :    depends . getDependClasses (  )  )     {", "result . addAll ( data . data . getConstants ( cn )  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["getAllConstants"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.JarSnapshot"}, {"methodBody": ["METHOD_START", "{", "return   new   ClassSetAnalysis ( data . data )  ;", "}", "METHOD_END"], "methodName": ["getAnalysis"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.JarSnapshot"}, {"methodBody": ["METHOD_START", "{", "return   data . hashes . keySet (  )  ;", "}", "METHOD_END"], "methodName": ["getClasses"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.JarSnapshot"}, {"methodBody": ["METHOD_START", "{", "return   data ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.JarSnapshot"}, {"methodBody": ["METHOD_START", "{", "return   data . hash ;", "}", "METHOD_END"], "methodName": ["getHash"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.JarSnapshot"}, {"methodBody": ["METHOD_START", "{", "return   data . hashes ;", "}", "METHOD_END"], "methodName": ["getHashes"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.JarSnapshot"}, {"methodBody": ["METHOD_START", "{", "IntSet   result    =    new   IntOpenHashSet (  )  ;", "for    ( String   affectedClass    :    affectedClasses )     {", "IntSet   difference    =    new   IntOpenHashSet ( other . getData (  )  . data . getConstants ( affectedClass )  )  ;", "difference . oveAll ( data . data . getConstants ( affectedClass )  )  ;", "result . addAll ( difference )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["getRelevantConstants"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.JarSnapshot"}, {"methodBody": ["METHOD_START", "{", "return   cache . get ( taskPath )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.LocalJarClasspathSnapshotStore"}, {"methodBody": ["METHOD_START", "{", "cache . put ( taskPath ,    data )  ;", "}", "METHOD_END"], "methodName": ["put"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.LocalJarClasspathSnapshotStore"}, {"methodBody": ["METHOD_START", "{", "return   analysis . getAggregatedTypes (  )  ;", "}", "METHOD_END"], "methodName": ["getAggregatedTypes"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.PreviousCompilation"}, {"methodBody": ["METHOD_START", "{", "return   annotationProcessorPathStore . get (  )  ;", "}", "METHOD_END"], "methodName": ["getAnnotationProcessorPath"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.PreviousCompilation"}, {"methodBody": ["METHOD_START", "{", "return   analysis . getData (  )  . getClassNameForFile ( path )  ;", "}", "METHOD_END"], "methodName": ["getClassName"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.PreviousCompilation"}, {"methodBody": ["METHOD_START", "{", "IntSet   constants    =    new   it . unimi . dsi . fastutil . ints . IntOpenHashSet ( analysis . getData (  )  . getConstants ( className )  )  ;", "constants . removeAll ( newConstants )  ;", "return   analysis . getRelevantDependents ( className ,    constants )  ;", "}", "METHOD_END"], "methodName": ["getDependents"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.PreviousCompilation"}, {"methodBody": ["METHOD_START", "{", "return   analysis . getRelevantDependents ( allClasses ,    constants )  ;", "}", "METHOD_END"], "methodName": ["getDependents"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.PreviousCompilation"}, {"methodBody": ["METHOD_START", "{", "if    (  ( jarSnapshots )     =  =    null )     {", "JarClasspathSnapshotData   data    =    classpathSnapshotStore . get (  )  ;", "jarSnapshots    =    jarSnapshotCache . getJarSnapshots ( data . getJarHashes (  )  )  ;", "}", "return   jarSnapshots . get ( file )  ;", "}", "METHOD_END"], "methodName": ["getJarSnapshot"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.PreviousCompilation"}, {"methodBody": ["METHOD_START", "{", "if    (  ( jarSnapshots )     =  =    null )     {", "JarClasspathSnapshotData   data    =    classpathSnapshotStore . get (  )  ;", "jarSnapshots    =    jarSnapshotCache . getJarSnapshots ( data . getJarHashes (  )  )  ;", "}", "return   Collecs . unmodifiableMap ( jarSnapshots )  ;", "}", "METHOD_END"], "methodName": ["getJarSnapshots"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.jar.PreviousCompilation"}, {"methodBody": ["METHOD_START", "{", "for    ( String   originatingElement    :    originatingElements )     {", "Set < String >    derived    =    generatedTypesByOrigin . get ( originatingElement )  ;", "if    ( derived    =  =    null )     {", "derived    =    new   LinkedHashSet < String >  (  )  ;", "generatedTypesByOrigin . put ( originatingElement ,    derived )  ;", "}", "derived . add ( name )  ;", "}", "}", "METHOD_END"], "methodName": ["addGeneratedType"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.processing.AnnotationProcessingResult"}, {"methodBody": ["METHOD_START", "{", "return   aggregatedTypes ;", "}", "METHOD_END"], "methodName": ["getAggregatedTypes"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.processing.AnnotationProcessingResult"}, {"methodBody": ["METHOD_START", "{", "return   generatedTypesDependingOnAllOthers ;", "}", "METHOD_END"], "methodName": ["getGeneratedAggregatingTypes"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.processing.AnnotationProcessingResult"}, {"methodBody": ["METHOD_START", "{", "return   generatedTypesByOrigin ;", "}", "METHOD_END"], "methodName": ["getGeneratedTypesWithIsolatedOrigin"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.processing.AnnotationProcessingResult"}, {"methodBody": ["METHOD_START", "{", "return   cache . get ( taskPath )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.processing.AnnotationProcessorPathStore"}, {"methodBody": ["METHOD_START", "{", "cache . put ( taskPath ,    processorPath )  ;", "}", "METHOD_END"], "methodName": ["put"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.processing.AnnotationProcessorPathStore"}, {"methodBody": ["METHOD_START", "{", "return   classesToCompile ;", "}", "METHOD_END"], "methodName": ["getClassesToCompile"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.recomp.RecompilationSpec"}, {"methodBody": ["METHOD_START", "{", "return   classesToProcess ;", "}", "METHOD_END"], "methodName": ["getClassesToProcess"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.recomp.RecompilationSpec"}, {"methodBody": ["METHOD_START", "{", "return   fullRebuildCause ;", "}", "METHOD_END"], "methodName": ["getFullRebuildCause"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.recomp.RecompilationSpec"}, {"methodBody": ["METHOD_START", "{", "return    (  ( isFullRebuildNeeded (  )  )     |  |     (  !  ( classesToCompile . isEmpty (  )  )  )  )     |  |     (  !  ( classesToProcess . isEmpty (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["isBuildNeeded"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.recomp.RecompilationSpec"}, {"methodBody": ["METHOD_START", "{", "return    ( fullRebuildCause )     !  =    null ;", "}", "METHOD_END"], "methodName": ["isFullRebuildNeeded"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.recomp.RecompilationSpec"}, {"methodBody": ["METHOD_START", "{", "fullRebuildCause    =     ( description    !  =    null )     ?    description    :     (  \"  '  \"     +     ( file . getName (  )  )  )     +     \"  '    was   changed \"  ;", "}", "METHOD_END"], "methodName": ["setFullRebuildCause"], "fileName": "org.gradle.api.internal.tasks.compile.incremental.recomp.RecompilationSpec"}, {"methodBody": ["METHOD_START", "{", "if    ( getSupportedAnnotationTypes (  )  . contains (  \"  *  \"  )  )     {", "result . getedTypes (  )  . addAll ( ElementUtils . getTopLevelTypeNames ( roundEnv . getRootElements (  )  )  )  ;", "} else    {", "for    ( TypeElement   annotation    :    annotations )     {", "result . getedTypes (  )  . addAll ( ElementUtils . getTopLevelTypeNames ( roundEnv . getElementsAnnotatedWith ( annotation )  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["recordAggregatedTypes"], "fileName": "org.gradle.api.internal.tasks.compile.processing.AggregatingProcessor"}, {"methodBody": ["METHOD_START", "{", "for    ( TypeElement   annotation    :    annotations )     {", "Retention   retention    =    annotation . getAnnotation ( Retention . class )  ;", "if    (  ( retention    !  =    null )     &  &     (  ( retention . value (  )  )     =  =     ( RetentionPolicy . SOURCE )  )  )     {", "messager . printMessage ( Diagnostic . Kind . ERROR ,     (  (  \"  '  @  \"     +     ( annotation . getSimpleName (  )  )  )     +     \"  '    has   source   retention .       annotation   processors   require   class   or   runtime   retention .  \"  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["validateAnnotations"], "fileName": "org.gradle.api.internal.tasks.compile.processing.AggregatingProcessor"}, {"methodBody": ["METHOD_START", "{", "return   className ;", "}", "METHOD_END"], "methodName": ["getClassName"], "fileName": "org.gradle.api.internal.tasks.compile.processing.AnnotationProcessorDeclaration"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.gradle.api.internal.tasks.compile.processing.AnnotationProcessorDeclaration"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    AnnotationProcessorDeclaration >    processors    =    Maps . newLinkedHashMap (  )  ;", "for    ( File   jarOrClassesDir    :    processorPath )     {", "for    ( AnnotationProcessorDeclaration   declaration    :    cache . get ( jarOrClassesDir )  )     {", "String   className    =    declaration . getClassName (  )  ;", "if    (  !  ( processors . containsKey ( className )  )  )     {", "processors . put ( className ,    declaration )  ;", "}", "}", "}", "return   processors ;", "}", "METHOD_END"], "methodName": ["detectProcessors"], "fileName": "org.gradle.api.internal.tasks.compile.processing.AnnotationProcessorDetector"}, {"methodBody": ["METHOD_START", "{", "boolean   hasExplicitProcessor    =    false ;", "List < String >    compilerArgs    =    compileOptions . getAllCompilerArgs (  )  ;", "int   pos    =    compilerArgs . indexOf (  \"  - processor \"  )  ;", "if    ( pos    >  =     0  )     {", "if    ( pos    =  =     (  ( compilerArgs . size (  )  )     -     1  )  )     {", "throw   new   InvalidUserDataException (  (  \" No   processor   specified   for   compiler   argument    - processor   in   requested   compiler   args :     \"     +     ( Joiner . on (  \"     \"  )  . join ( compilerArgs )  )  )  )  ;", "}", "hasExplicitProcessor    =    true ;", "}", "return   hasExplicitProcessor ;", "}", "METHOD_END"], "methodName": ["checkExplicitProcessorOption"], "fileName": "org.gradle.api.internal.tasks.compile.processing.AnnotationProcessorPathFactory"}, {"methodBody": ["METHOD_START", "{", "DeprecationLogger . nagUserOfDeprecated ( AnnotationProcessorPathFactory . PROCESSOR _ PATH _ DEPRECATION _ MESSAGE ,     \" Instead ,    use   the   CompilerOptions . annotationProcessorPath   property   directly \"  )  ;", "LinkedHashSet < File >    files    =    new   LinkedHashSet < File >  (  )  ;", "for    ( String   path    :    Splitter . on ( File . pathSeparatorChar )  . splitToList ( processorpath )  )     {", "files . add ( new   File ( path )  )  ;", "}", "return   files ;", "}", "METHOD_END"], "methodName": ["extractProcessorPath"], "fileName": "org.gradle.api.internal.tasks.compile.processing.AnnotationProcessorPathFactory"}, {"methodBody": ["METHOD_START", "{", "if    ( compileOptions . getAllCompilerArgs (  )  . contains (  \"  - proc : none \"  )  )     {", "return   fileCollectionFactory . empty (  \" annotation   processor   path \"  )  ;", "}", "final   FileCollection   annotationProcessorPath    =    compileOptions . get (  )  ;", "if    (  ( annotationProcessorPath    !  =    null )     &  &     (  !  ( annotationProcessorPath   instanceof   DefaultProcessorPath )  )  )     {", "return   annotationProcessorPath ;", "}", "FileCollection   processorPathFromCompilerArguments    =    getProcessorPathFromCompilerArguments ( compileOptions )  ;", "if    ( processorPathFromCompilerArguments    !  =    null )     {", "return   processorPathFromCompilerArguments ;", "}", "if    ( compileClasspath    =  =    null )     {", "return   annotationProcessorPath ;", "}", "return   getProcessorPathWithCompileClasspathFallback ( compileOptions ,    compileClasspath ,    annotationProcessorPath )  ;", "}", "METHOD_END"], "methodName": ["getEffectiveAnnotationProcessorClasspath"], "fileName": "org.gradle.api.internal.tasks.compile.processing.AnnotationProcessorPathFactory"}, {"methodBody": ["METHOD_START", "{", "final   FileCollection   annotationProcessorPath    =    compileOptions . getAnnotationProcessorPath (  )  ;", "List < String >    compilerArgs    =    compileOptions . getAllCompilerArgs (  )  ;", "int   pos    =    compilerArgs . indexOf (  \"  - processorpath \"  )  ;", "if    ( pos    <     0  )     {", "return   null ;", "}", "if    ( pos    =  =     (  ( compilerArgs . size (  )  )     -     1  )  )     {", "throw   new   InvalidUserDataException (  (  \" No   path   provided   for   compiler   argument    - processorpath   in   requested   compiler   args :     \"     +     ( Joiner . on (  \"     \"  )  . join ( compilerArgs )  )  )  )  ;", "}", "final   String   processorpath    =    compilerArgs . get (  ( pos    +     1  )  )  ;", "if    ( annotationProcessorPath    =  =    null )     {", "return   fileCollectionFactory . fixed (  \" annotation   processor   path \"  ,     . extractProcessorPath ( processorpath )  )  ;", "}", "return   fileCollectionFactory . create ( new   AbstractTaskDependency (  )     {", "@ Override", "public   void   visitDependencies ( TaskDependencyResolveContext   context )     {", "context . add ( annotationProcessorPath )  ;", "}", "}  ,    new   MinimalFileSet (  )     {", "@ Override", "public   Set < File >    getFiles (  )     {", "if    (  !  ( annotationProcessorPath . isEmpty (  )  )  )     {", "return   annotationProcessorPath . getFiles (  )  ;", "}", "return    . extractProcessorPath ( processorpath )  ;", "}", "@ Override", "public   final   String   getDisplayName (  )     {", "return    \" annotation   processor   path \"  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["getProcessorPathFromCompilerArguments"], "fileName": "org.gradle.api.internal.tasks.compile.processing.AnnotationProcessorPathFactory"}, {"methodBody": ["METHOD_START", "{", "final   boolean   hasExplicitProcessor    =    AnnotationProcessorPathFactory . checkExplicitProcessorOption ( compileOptions )  ;", "return   fileCollectionFactory . create ( new   AbstractTaskDependency (  )     {", "@ Override", "public   void   visitDependencies ( TaskDependencyResolveContext   context )     {", "if    ( annotationProcessorPath    !  =    null )     {", "context . add ( annotationProcessorPath )  ;", "}", "context . add ( compileClasspath )  ;", "}", "}  ,    new   MinimalFileSet (  )     {", "@ Override", "public   Set < File >    getFiles (  )     {", "if    (  ( annotationProcessorPath    !  =    null )     &  &     (  !  ( annotationProcessorPath . isEmpty (  )  )  )  )     {", "return   annotationProcessorPath . getFiles (  )  ;", "}", "if    ( hasExplicitProcessor )     {", "return   compileClasspath . getFiles (  )  ;", "}", "Map < String ,    AnnotationProcessorDeclaration >    processors    =    annotationProcessorDetector . detectProcessors ( compileClasspath )  ;", "if    (  !  ( processors . isEmpty (  )  )  )     {", "DeprecationLogger . nagUserWith (  (  (  (  (  (  (  ( AnnotationProcessorPathFactory . COMPILE _ CLASSPATH _ DEPRECATION _ MESSAGE )     +     \"     '  \"  )     +     ( Joiner . on (  \"  '    and    '  \"  )  . join ( processors . keySet (  )  )  )  )     +     \"  '  .     \"  )     +     \" Detecting   annotation   processors   on   the   compile   classpath   is   deprecated   and   Gradle    5  .  0    will   ignore   them .     \"  )     +     \" Please   add   them   to   the   annotation   processor   path   instead .     \"  )     +     \" If   you   did   not   intend   to   use   annotation   processors ,    you   can   use   the    '  - proc : none '    compiler   argument   to   ignore   them .  \"  )  )  ;", "return   compileClasspath . getFiles (  )  ;", "}", "return   Collections . emptySet (  )  ;", "}", "@ Override", "public   final   String   getDisplayName (  )     {", "return    \" annotation   processor   path \"  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["getProcessorPathWithCompileClasspathFallback"], "fileName": "org.gradle.api.internal.tasks.compile.processing.AnnotationProcessorPathFactory"}, {"methodBody": ["METHOD_START", "{", "Element   current    =    originatingElement ;", "Element   parent    =    originatingElement ;", "while    (  ( parent    !  =    null )     &  &     (  !  ( parent   instanceof   PackageElement )  )  )     {", "current    =    parent ;", "parent    =    current . getEnclosingElement (  )  ;", "}", "if    ( current   instanceof   PackageElement )     {", "String   packageName    =     (  ( PackageElement )     ( current )  )  . getQualifiedName (  )  . toString (  )  ;", "if    ( packageName . isEmpty (  )  )     {", "return    . PACKAGE _ TYPE _ NAME ;", "} else    {", "return    ( packageName    +     \"  .  \"  )     +     (  . PACKAGE _ TYPE _ NAME )  ;", "}", "}", "if    ( current   instanceof   TypeElement )     {", "return    (  ( TypeElement )     ( current )  )  . getQualifiedName (  )  . toString (  )  ;", "}", "throw   new   IllegalArgumentException (  (  \" Unexpected   element    \"     +    originatingElement )  )  ;", "}", "METHOD_END"], "methodName": ["getTopLevelTypeName"], "fileName": "org.gradle.api.internal.tasks.compile.processing.ElementUtils"}, {"methodBody": ["METHOD_START", "{", "if    (  ( originatingElements    =  =    null )     |  |     (  ( originatingElements . size (  )  )     =  =     0  )  )     {", "return   Collections . emptySet (  )  ;", "}", "if    (  ( originatingElements . size (  )  )     =  =     1  )     {", "String   topLevelTypeName    =     . getTopLevelTypeName ( originatingElements . iterator (  )  . next (  )  )  ;", "return   Collections . singleton ( topLevelTypeName )  ;", "}", "Set < String >    typeNames    =    Sets . newLinkedHashSet (  )  ;", "for    ( Element   element    :    originatingElements )     {", "String   topLevelTypeName    =     . getTopLevelTypeName ( element )  ;", "typeNames . add ( topLevelTypeName )  ;", "}", "return   typeNames ;", "}", "METHOD_END"], "methodName": ["getTopLevelTypeNames"], "fileName": "org.gradle.api.internal.tasks.compile.processing.ElementUtils"}, {"methodBody": ["METHOD_START", "{", "return   ElementUtils . getTopLevelTypeNames ( Arrays . asList ( originatingElements )  )  ;", "}", "METHOD_END"], "methodName": ["getTopLevelTypeNames"], "fileName": "org.gradle.api.internal.tasks.compile.processing.ElementUtils"}, {"methodBody": ["METHOD_START", "{", "return   incremental ;", "}", "METHOD_END"], "methodName": ["isIncremental"], "fileName": "org.gradle.api.internal.tasks.compile.processing.IncrementalAnnotationProcessorType"}, {"methodBody": ["METHOD_START", "{", "return   Proxy . newProxyInstance ( SourcepathIgnoringInvocationHandler . class . getClassLoader (  )  ,    new   Class [  ]  {    targetInterface    }  ,    new   SourcepathIgnoringInvocationHandler ( proxied )  )  ;", "}", "METHOD_END"], "methodName": ["proxy"], "fileName": "org.gradle.api.internal.tasks.compile.reflect.SourcepathIgnoringProxy"}, {"methodBody": ["METHOD_START", "{", "debug    =    true ;", "debug . define ( debugArgs )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["debug"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "fork    =    true ;", "fork . define ( forkArgs )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["fork"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < String >    builder    =    ImmutableList . builder (  )  ;", "builder . addAll ( CollectionUtils . stringize ( getrArgs (  )  )  )  ;", "for    ( CommandLineArgumentProvider   compilerArgumentProvider    :    getrArgumentProviders (  )  )     {", "builder . addAll ( compilerArgumentProvider . asArguments (  )  )  ;", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["getAllCompilerArgs"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   annotationProcessorGeneratedSourcesDirectory . getOrNull (  )  ;", "}", "METHOD_END"], "methodName": ["getAnnotationProcessorGeneratedSourcesDirectory"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   annotationProcessorPath ;", "}", "METHOD_END"], "methodName": ["getAnnotationProcessorPath"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "DeprecationLogger . nagUserOfReplacedProperty (  \" CompileOptions . bootClasspath \"  ,     \" CompileOptions . bootstrapClasspath \"  )  ;", "return    ( bootstrapClasspath )     =  =    null    ?    null    :    bootstrapClasspath . getAsPath (  )  ;", "}", "METHOD_END"], "methodName": ["getBootClasspath"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   bootstrapClasspath ;", "}", "METHOD_END"], "methodName": ["getBootstrapClasspath"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   compilerArgs ;", "}", "METHOD_END"], "methodName": ["getCompilerArgs"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   compilerArgumentProviders ;", "}", "METHOD_END"], "methodName": ["getCompilerArgumentProviders"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   debugOptions ;", "}", "METHOD_END"], "methodName": ["getDebugOptions"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   encoding ;", "}", "METHOD_END"], "methodName": ["getEncoding"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   extensionDirs ;", "}", "METHOD_END"], "methodName": ["getExtensionDirs"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   forkOptions ;", "}", "METHOD_END"], "methodName": ["getForkOptions"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   sourcepath ;", "}", "METHOD_END"], "methodName": ["getSourcepath"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   debug ;", "}", "METHOD_END"], "methodName": ["isDebug"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   deprecation ;", "}", "METHOD_END"], "methodName": ["isDeprecation"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   failOnError ;", "}", "METHOD_END"], "methodName": ["isFailOnError"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   fork ;", "}", "METHOD_END"], "methodName": ["isFork"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   incremental ;", "}", "METHOD_END"], "methodName": ["isIncremental"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   listFiles ;", "}", "METHOD_END"], "methodName": ["isListFiles"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   verbose ;", "}", "METHOD_END"], "methodName": ["isVerbose"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   warnings ;", "}", "METHOD_END"], "methodName": ["isWarnings"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . annotationProcessorGeneratedSourcesDirectory . set ( file )  ;", "}", "METHOD_END"], "methodName": ["setAnnotationProcessorGeneratedSourcesDirectory"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . annotationProcessorGeneratedSourcesDirectory . set ( file )  ;", "}", "METHOD_END"], "methodName": ["setAnnotationProcessorGeneratedSourcesDirectory"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . annotationProcessorPath    =    annotationProcessorPath ;", "}", "METHOD_END"], "methodName": ["setAnnotationProcessorPath"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "DeprecationLogger . nagUserOfReplacedProperty (  \" CompileOptions . bootClasspath \"  ,     \" CompileOptions . bootstrapClasspath \"  )  ;", "if    ( bootClasspath    =  =    null )     {", "this . bootstrapClasspath    =    null ;", "} else    {", "String [  ]    paths    =    StringUtils . split ( bootClasspath ,    File . pathSeparatorChar )  ;", "List < File >    files    =    Lists . newArrayListWithCapacity ( paths . length )  ;", "for    ( String   path    :    paths )     {", "files . add ( new   File ( path )  )  ;", "}", "this . bootstrapClasspath    =    new   SimpleFileCollection ( files )  ;", "}", "}", "METHOD_END"], "methodName": ["setBootClasspath"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . bootstrapClasspath    =    bootstrapClasspath ;", "}", "METHOD_END"], "methodName": ["setBootstrapClasspath"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . compilerArgs    =    compilerArgs ;", "}", "METHOD_END"], "methodName": ["setCompilerArgs"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . debug    =    debug ;", "}", "METHOD_END"], "methodName": ["setDebug"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . debugOptions    =    debugOptions ;", "}", "METHOD_END"], "methodName": ["setDebugOptions"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . deprecation    =    deprecation ;", "}", "METHOD_END"], "methodName": ["setDeprecation"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . encoding    =    encoding ;", "}", "METHOD_END"], "methodName": ["setEncoding"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . extensionDirs    =    extensionDirs ;", "}", "METHOD_END"], "methodName": ["setExtensionDirs"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . failOnError    =    failOnError ;", "}", "METHOD_END"], "methodName": ["setFailOnError"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . fork    =    fork ;", "}", "METHOD_END"], "methodName": ["setFork"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . forkOptions    =    forkOptions ;", "}", "METHOD_END"], "methodName": ["setForkOptions"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . incremental    =    incremental ;", "return   this ;", "}", "METHOD_END"], "methodName": ["setIncremental"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . listFiles    =    listFiles ;", "}", "METHOD_END"], "methodName": ["setListFiles"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . sourcepath    =    sourcepath ;", "}", "METHOD_END"], "methodName": ["setSourcepath"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . verbose    =    verbose ;", "}", "METHOD_END"], "methodName": ["setVerbose"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . warnings    =    warnings ;", "}", "METHOD_END"], "methodName": ["setWarnings"], "fileName": "org.gradle.api.tasks.compile.CompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   debugLevel ;", "}", "METHOD_END"], "methodName": ["getDebugLevel"], "fileName": "org.gradle.api.tasks.compile.DebugOptions"}, {"methodBody": ["METHOD_START", "{", "this . debugLevel    =    debugLevel ;", "}", "METHOD_END"], "methodName": ["setDebugLevel"], "fileName": "org.gradle.api.tasks.compile.DebugOptions"}, {"methodBody": ["METHOD_START", "{", "return   executable ;", "}", "METHOD_END"], "methodName": ["getExecutable"], "fileName": "org.gradle.api.tasks.compile.ForkOptions"}, {"methodBody": ["METHOD_START", "{", "return   javaHome ;", "}", "METHOD_END"], "methodName": ["getJavaHome"], "fileName": "org.gradle.api.tasks.compile.ForkOptions"}, {"methodBody": ["METHOD_START", "{", "return   tempDir ;", "}", "METHOD_END"], "methodName": ["getTempDir"], "fileName": "org.gradle.api.tasks.compile.ForkOptions"}, {"methodBody": ["METHOD_START", "{", "this . executable    =    executable ;", "}", "METHOD_END"], "methodName": ["setExecutable"], "fileName": "org.gradle.api.tasks.compile.ForkOptions"}, {"methodBody": ["METHOD_START", "{", "this . javaHome    =    javaHome ;", "}", "METHOD_END"], "methodName": ["setJavaHome"], "fileName": "org.gradle.api.tasks.compile.ForkOptions"}, {"methodBody": ["METHOD_START", "{", "this . tempDir    =    tempDir ;", "}", "METHOD_END"], "methodName": ["setTempDir"], "fileName": "org.gradle.api.tasks.compile.ForkOptions"}, {"methodBody": ["METHOD_START", "{", "DefaultJavaCompileSpec   spec    =    createSpec (  )  ;", "performCompilation ( spec ,    createCompiler ( spec )  )  ;", "}", "METHOD_END"], "methodName": ["compile"], "fileName": "org.gradle.api.tasks.compile.JavaCompile"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( compileOptions . isIncremental (  )  )  )     {", "compile (  )  ;", "return ;", "}", "DefaultSpec   spec    =    createSpec (  )  ;", "Compiler < Spec >    incrementalCompiler    =    getIncrementalCompilerFactory (  )  . makeIncremental ( createCompiler ( spec )  ,    getPath (  )  ,     (  ( IncrementalTaskInputsInternal )     ( inputs )  )  ,    source ,    getEffectiveAnnotationProcessorPath (  )  )  ;", "performCompilation ( spec ,    incrementalCompiler )  ;", "}", "METHOD_END"], "methodName": ["compile"], "fileName": "org.gradle.api.tasks.compile.JavaCompile"}, {"methodBody": ["METHOD_START", "{", "Compiler < JavaCompileSpec >    javaCompiler    =    CompilerUtil . castCompiler (  (  ( JavaToolChainInternal )     ( getToolChain (  )  )  )  . select ( getPlatform (  )  )  . newCompiler ( spec . getClass (  )  )  )  ;", "return   new   internal . tasks . compile . CleaningJavaCompiler ( javaCompiler ,    getOutputs (  )  )  ;", "}", "METHOD_END"], "methodName": ["createCompiler"], "fileName": "org.gradle.api.tasks.compile.JavaCompile"}, {"methodBody": ["METHOD_START", "{", "final   DefaultJavaCompileSpec   spec    =    new   DefaultJavaCompileSpecFactory ( compileOptions )  . create (  )  ;", "spec . setSource ( getSource (  )  )  ;", "spec . setDestinationDir ( getDestinationDir (  )  )  ;", "spec . setWorkingDir ( getProject (  )  . getProjectDir (  )  )  ;", "spec . setTempDir ( getTemporaryDir (  )  )  ;", "spec . setCompileClasspath ( ImmutableList . copyOf ( getClasspath (  )  )  )  ;", "spec . setAnnotationProcessorPath ( ImmutableList . copyOf ( getEffectiveAnnotationProcessorPath (  )  )  )  ;", "spec . setTargetCompatibility ( getTargetCompatibility (  )  )  ;", "spec . setSourceCompatibility ( getSourceCompatibility (  )  )  ;", "spec . setCompileOptions ( compileOptions )  ;", "return   spec ;", "}", "METHOD_END"], "methodName": ["createSpec"], "fileName": "org.gradle.api.tasks.compile.JavaCompile"}, {"methodBody": ["METHOD_START", "{", "AnnotationProcessorPathFactory   annotationProcessorPathFactory    =    getServices (  )  . get ( AnnotationProcessorPathFactory . class )  ;", "return   annotationProcessorPathFactory . getEffectiveAnnotationProcessorClasspath ( Options ,    getClasspath (  )  )  ;", "}", "METHOD_END"], "methodName": ["getEffectiveAnnotationProcessorPath"], "fileName": "org.gradle.api.tasks.compile.JavaCompile"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getIncrementalCompilerFactory"], "fileName": "org.gradle.api.tasks.compile.JavaCompile"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getJavaToolChainFactory"], "fileName": "org.gradle.api.tasks.compile.JavaCompile"}, {"methodBody": ["METHOD_START", "{", "return   compileOptions ;", "}", "METHOD_END"], "methodName": ["getOptions"], "fileName": "org.gradle.api.tasks.compile.JavaCompile"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultJavaPlatform ( JavaVersion . toVersion ( getTargetCompatibility (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getPlatform"], "fileName": "org.gradle.api.tasks.compile.JavaCompile"}, {"methodBody": ["METHOD_START", "{", "if    (  ( toolChain )     !  =    null )     {", "return   toolChain ;", "}", "return   getJavaToolChainFactory (  )  . forOptions ( getOptions (  )  )  ;", "}", "METHOD_END"], "methodName": ["getToolChain"], "fileName": "org.gradle.api.tasks.compile.JavaCompile"}, {"methodBody": ["METHOD_START", "{", "WorkResult   result    =    compiler . execute ( spec )  ;", "setDidWork ( result . getDidWork (  )  )  ;", "}", "METHOD_END"], "methodName": ["performCompilation"], "fileName": "org.gradle.api.tasks.compile.JavaCompile"}, {"methodBody": ["METHOD_START", "{", "this . toolChain    =    toolChain ;", "}", "METHOD_END"], "methodName": ["setToolChain"], "fileName": "org.gradle.api.tasks.compile.JavaCompile"}, {"methodBody": ["METHOD_START", "{", "JavadocSpec   spec    =    new   JavadocSpec (  )  ;", "spec . setExecutable ( getExecutable (  )  )  ;", "spec . setOptions ( options )  ;", "spec . setIgnoreFailures (  (  !  ( isFailOnError (  )  )  )  )  ;", "spec . setWorkingDir ( getProject (  )  . getProjectDir (  )  )  ;", "spec . setOptionsFile ( getOptionsFile (  )  )  ;", "Compiler < JavadocSpec >    generator    =     (  ( JavaToolChainInternal )     ( getToolChain (  )  )  )  . select ( getPlatform (  )  )  . newCompiler ( JavadocSpec . class )  ;", "generator . execute ( spec )  ;", "}", "METHOD_END"], "methodName": ["executeExternalJavadoc"], "fileName": "org.gradle.api.tasks.javadoc.Javadoc"}, {"methodBody": ["METHOD_START", "{", "final   File   destinationDir    =    getDestinationDir (  )  ;", "StandardDocletOptions   options    =    new   StandardDocletOptions (  (  ( StandardDocletOptions )     ( getOptions (  )  )  )  )  ;", "if    (  ( options . getDestinationDirectory (  )  )     =  =    null )     {", "options . destinationDirectory ( destinationDir )  ;", "}", "options . classpath ( new   ArrayList < File >  ( getClasspath (  )  . getFiles (  )  )  )  ;", "if    (  (  !  ( GUtil . isTrue ( options . getWindowTitle (  )  )  )  )     &  &     ( GUtil . isTrue ( getTitle (  )  )  )  )     {", "options . windowTitle ( getTitle (  )  )  ;", "}", "if    (  (  !  ( GUtil . isTrue ( options . getDocTitle (  )  )  )  )     &  &     ( GUtil . isTrue ( getTitle (  )  )  )  )     {", "options . setDocTitle ( getTitle (  )  )  ;", "}", "String   maxMemory    =    getMaxMemory (  )  ;", "if    ( maxMemory    !  =    null )     {", "final   List < String >    jFlags    =    options . getJFlags (  )  ;", "final   Iterator < String >    jFlagsIt    =    jFlags . iterator (  )  ;", "boolean   containsXmx    =    false ;", "while    (  (  ! containsXmx )     &  &     ( jFlagsIt . hasNext (  )  )  )     {", "final   String   jFlag    =    jFlagsIt . next (  )  ;", "if    ( jFlag . startsWith (  \"  - Xmx \"  )  )     {", "containsXmx    =    true ;", "}", "}", "if    (  ! containsXmx )     {", "options . jFlags (  (  \"  - Xmx \"     +    maxMemory )  )  ;", "}", "}", "List < String >    sourceNames    =    new   ArrayList < String >  (  )  ;", "for    ( File   sourceFile    :    getSource (  )  )     {", "sourceNames . add ( sourceFile . getAbsolutePath (  )  )  ;", "}", "options . setSourceNames ( sourceNames )  ;", "executeExternal ( options )  ;", "}", "METHOD_END"], "methodName": ["generate"], "fileName": "org.gradle.api.tasks.javadoc.Javadoc"}, {"methodBody": ["METHOD_START", "{", "return   classpath ;", "}", "METHOD_END"], "methodName": ["getClasspath"], "fileName": "org.gradle.api.tasks.javadoc.Javadoc"}, {"methodBody": ["METHOD_START", "{", "return   destinationDir ;", "}", "METHOD_END"], "methodName": ["getDestinationDir"], "fileName": "org.gradle.api.tasks.javadoc.Javadoc"}, {"methodBody": ["METHOD_START", "{", "return   executable ;", "}", "METHOD_END"], "methodName": ["getExecutable"], "fileName": "org.gradle.api.tasks.javadoc.Javadoc"}, {"methodBody": ["METHOD_START", "{", "return   maxMemory ;", "}", "METHOD_END"], "methodName": ["getMaxMemory"], "fileName": "org.gradle.api.tasks.javadoc.Javadoc"}, {"methodBody": ["METHOD_START", "{", "return   options ;", "}", "METHOD_END"], "methodName": ["getOptions"], "fileName": "org.gradle.api.tasks.javadoc.Javadoc"}, {"methodBody": ["METHOD_START", "{", "return   new   File ( getTemporaryDir (  )  ,     \" options \"  )  ;", "}", "METHOD_END"], "methodName": ["getOptionsFile"], "fileName": "org.gradle.api.tasks.javadoc.Javadoc"}, {"methodBody": ["METHOD_START", "{", "File   destinationDir    =    getDestinationDir (  )  ;", "if    ( destinationDir    =  =    null )     {", "destinationDir    =    options . getDestinationDirectory (  )  ;", "}", "return   destinationDir ;", "}", "METHOD_END"], "methodName": ["getOutputDirectory"], "fileName": "org.gradle.api.tasks.javadoc.Javadoc"}, {"methodBody": ["METHOD_START", "{", "return   DefaultJavaPlatform . current (  )  ;", "}", "METHOD_END"], "methodName": ["getPlatform"], "fileName": "org.gradle.api.tasks.javadoc.Javadoc"}, {"methodBody": ["METHOD_START", "{", "return   title ;", "}", "METHOD_END"], "methodName": ["getTitle"], "fileName": "org.gradle.api.tasks.javadoc.Javadoc"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getToolChain"], "fileName": "org.gradle.api.tasks.javadoc.Javadoc"}, {"methodBody": ["METHOD_START", "{", "return   failOnError ;", "}", "METHOD_END"], "methodName": ["isFailOnError"], "fileName": "org.gradle.api.tasks.javadoc.Javadoc"}, {"methodBody": ["METHOD_START", "{", "return   options . isVerbose (  )  ;", "}", "METHOD_END"], "methodName": ["isVerbose"], "fileName": "org.gradle.api.tasks.javadoc.Javadoc"}, {"methodBody": ["METHOD_START", "{", "ConfigureUtil . configure ( block ,    getOptions (  )  )  ;", "}", "METHOD_END"], "methodName": ["options"], "fileName": "org.gradle.api.tasks.javadoc.Javadoc"}, {"methodBody": ["METHOD_START", "{", "action . execute ( getOptions (  )  )  ;", "}", "METHOD_END"], "methodName": ["options"], "fileName": "org.gradle.api.tasks.javadoc.Javadoc"}, {"methodBody": ["METHOD_START", "{", "this . classpath    =    classpath ;", "}", "METHOD_END"], "methodName": ["setClasspath"], "fileName": "org.gradle.api.tasks.javadoc.Javadoc"}, {"methodBody": ["METHOD_START", "{", "this . destinationDir    =    destinationDir ;", "}", "METHOD_END"], "methodName": ["setDestinationDir"], "fileName": "org.gradle.api.tasks.javadoc.Javadoc"}, {"methodBody": ["METHOD_START", "{", "this . executable    =    executable ;", "}", "METHOD_END"], "methodName": ["setExecutable"], "fileName": "org.gradle.api.tasks.javadoc.Javadoc"}, {"methodBody": ["METHOD_START", "{", "this . failOnError    =    failOnError ;", "}", "METHOD_END"], "methodName": ["setFailOnError"], "fileName": "org.gradle.api.tasks.javadoc.Javadoc"}, {"methodBody": ["METHOD_START", "{", "this . maxMemory    =    maxMemory ;", "}", "METHOD_END"], "methodName": ["setMaxMemory"], "fileName": "org.gradle.api.tasks.javadoc.Javadoc"}, {"methodBody": ["METHOD_START", "{", "this . title    =    title ;", "}", "METHOD_END"], "methodName": ["setTitle"], "fileName": "org.gradle.api.tasks.javadoc.Javadoc"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["setToolChain"], "fileName": "org.gradle.api.tasks.javadoc.Javadoc"}, {"methodBody": ["METHOD_START", "{", "if    ( verbo )     {", "optionverbo (  )  ;", "}", "}", "METHOD_END"], "methodName": ["setVerbose"], "fileName": "org.gradle.api.tasks.javadoc.Javadoc"}, {"methodBody": ["METHOD_START", "{", "return   executable ;", "}", "METHOD_END"], "methodName": ["getExecutable"], "fileName": "org.gradle.api.tasks.javadoc.internal.JavadocSpec"}, {"methodBody": ["METHOD_START", "{", "return   options ;", "}", "METHOD_END"], "methodName": ["getOptions"], "fileName": "org.gradle.api.tasks.javadoc.internal.JavadocSpec"}, {"methodBody": ["METHOD_START", "{", "return   optionsFile ;", "}", "METHOD_END"], "methodName": ["getOptionsFile"], "fileName": "org.gradle.api.tasks.javadoc.internal.JavadocSpec"}, {"methodBody": ["METHOD_START", "{", "return   workingDir ;", "}", "METHOD_END"], "methodName": ["getWorkingDir"], "fileName": "org.gradle.api.tasks.javadoc.internal.JavadocSpec"}, {"methodBody": ["METHOD_START", "{", "return   ignoreFailures ;", "}", "METHOD_END"], "methodName": ["isIgnoreFailures"], "fileName": "org.gradle.api.tasks.javadoc.internal.JavadocSpec"}, {"methodBody": ["METHOD_START", "{", "this . executable    =    executable ;", "}", "METHOD_END"], "methodName": ["setExecutable"], "fileName": "org.gradle.api.tasks.javadoc.internal.JavadocSpec"}, {"methodBody": ["METHOD_START", "{", "this . ignoreFailures    =    ignoreFailures ;", "}", "METHOD_END"], "methodName": ["setIgnoreFailures"], "fileName": "org.gradle.api.tasks.javadoc.internal.JavadocSpec"}, {"methodBody": ["METHOD_START", "{", "this . options    =    options ;", "}", "METHOD_END"], "methodName": ["setOptions"], "fileName": "org.gradle.api.tasks.javadoc.internal.JavadocSpec"}, {"methodBody": ["METHOD_START", "{", "this . optionsFile    =    optionsFile ;", "}", "METHOD_END"], "methodName": ["setOptionsFile"], "fileName": "org.gradle.api.tasks.javadoc.internal.JavadocSpec"}, {"methodBody": ["METHOD_START", "{", "this . workingDir    =    workingDir ;", "}", "METHOD_END"], "methodName": ["setWorkingDir"], "fileName": "org.gradle.api.tasks.javadoc.internal.JavadocSpec"}, {"methodBody": ["METHOD_START", "{", "return   optionFile . addBooleanOption ( option )  ;", "}", "METHOD_END"], "methodName": ["addBooleanOption"], "fileName": "org.gradle.external.javadoc.CoreJavadocOptions"}, {"methodBody": ["METHOD_START", "{", "return   optionFile . addBooleanOption ( option ,    value )  ;", "}", "METHOD_END"], "methodName": ["addBooleanOption"], "fileName": "org.gradle.external.javadoc.CoreJavadocOptions"}, {"methodBody": ["METHOD_START", "{", "return   optionFile . addEnumOption ( option )  ;", "}", "METHOD_END"], "methodName": ["addEnumOption"], "fileName": "org.gradle.external.javadoc.CoreJavadocOptions"}, {"methodBody": ["METHOD_START", "{", "return   optionFile . addEnumOption ( option ,    value )  ;", "}", "METHOD_END"], "methodName": ["addEnumOption"], "fileName": "org.gradle.external.javadoc.CoreJavadocOptions"}, {"methodBody": ["METHOD_START", "{", "return   optionFile . addFileOption ( option )  ;", "}", "METHOD_END"], "methodName": ["addFileOption"], "fileName": "org.gradle.external.javadoc.CoreJavadocOptions"}, {"methodBody": ["METHOD_START", "{", "return   optionFile . addFileOption ( option ,    value )  ;", "}", "METHOD_END"], "methodName": ["addFileOption"], "fileName": "org.gradle.external.javadoc.CoreJavadocOptions"}, {"methodBody": ["METHOD_START", "{", "return   optionFile . addMultilineMultiValueOption ( option )  ;", "}", "METHOD_END"], "methodName": ["addMultilineMultiValueOption"], "fileName": "org.gradle.external.javadoc.CoreJavadocOptions"}, {"methodBody": ["METHOD_START", "{", "return   optionFile . addMultilineStringsOption ( option )  ;", "}", "METHOD_END"], "methodName": ["addMultilineStringsOption"], "fileName": "org.gradle.external.javadoc.CoreJavadocOptions"}, {"methodBody": ["METHOD_START", "{", "if    ( option   instanceof   JavadocOptionFileOptionInternal )     {", "return   optionFile . addOption ( Cast .  < JavadocOptionFileOptionInternal < T >  > uncheckedCast ( option )  )  ;", "}", "return   optionFile . addOption ( new   JavadocOptionFileOptionInternalAdapter < T >  ( option )  )  ;", "}", "METHOD_END"], "methodName": ["addOption"], "fileName": "org.gradle.external.javadoc.CoreJavadocOptions"}, {"methodBody": ["METHOD_START", "{", "return   optionFile . addPathOption ( option )  ;", "}", "METHOD_END"], "methodName": ["addPathOption"], "fileName": "org.gradle.external.javadoc.CoreJavadocOptions"}, {"methodBody": ["METHOD_START", "{", "return   optionFile . addPathOption ( option ,    joinBy )  ;", "}", "METHOD_END"], "methodName": ["addPathOption"], "fileName": "org.gradle.external.javadoc.CoreJavadocOptions"}, {"methodBody": ["METHOD_START", "{", "return   optionFile . addStringOption ( option )  ;", "}", "METHOD_END"], "methodName": ["addStringOption"], "fileName": "org.gradle.external.javadoc.CoreJavadocOptions"}, {"methodBody": ["METHOD_START", "{", "return   optionFile . addStringOption ( option ,    value )  ;", "}", "METHOD_END"], "methodName": ["addStringOption"], "fileName": "org.gradle.external.javadoc.CoreJavadocOptions"}, {"methodBody": ["METHOD_START", "{", "return   optionFile . addStringsOption ( option )  ;", "}", "METHOD_END"], "methodName": ["addStringsOption"], "fileName": "org.gradle.external.javadoc.CoreJavadocOptions"}, {"methodBody": ["METHOD_START", "{", "return   optionFile . addStringsOption ( option ,    joinBy )  ;", "}", "METHOD_END"], "methodName": ["addStringsOption"], "fileName": "org.gradle.external.javadoc.CoreJavadocOptions"}, {"methodBody": ["METHOD_START", "{", "return   extDocUrl ;", "}", "METHOD_END"], "methodName": ["getExtDocUrl"], "fileName": "org.gradle.external.javadoc.JavadocOfflineLink"}, {"methodBody": ["METHOD_START", "{", "return   packagelistLoc ;", "}", "METHOD_END"], "methodName": ["getPackagelistLoc"], "fileName": "org.gradle.external.javadoc.JavadocOfflineLink"}, {"methodBody": ["METHOD_START", "{", "return   author ( true )  ;", "}", "METHOD_END"], "methodName": ["author"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "setAuthor ( author )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["author"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "setBottom ( bottom )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["bottom"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "setCharSet ( charSet )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["charSet"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "if    ( items    =  =    null )     {", "return   null ;", "} else    {", "return   Lists . newArrayList ( items )  ;", "}", "}", "METHOD_END"], "methodName": ["copyOrNull"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "setDocEncoding ( docEncoding )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["docEncoding"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   docFilesSubDirs ( true )  ;", "}", "METHOD_END"], "methodName": ["docFilesSubDirs"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "setDocFilesSubDirs ( docFilesSubDirs )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["docFilesSubDirs"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "setDocTitle ( docTitle )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["docTitle"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   excludeDocFilesSubDir ( Arrays . asList ( excludeDocFilesSubDir )  )  ;", "}", "METHOD_END"], "methodName": ["excludeDocFilesSubDir"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . excludeDocFilesSubDir . getValue (  )  . addAll ( excludeDocFilesSubDir )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["excludeDocFilesSubDir"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "setFooter ( footer )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["footer"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   bottom . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["getBottom"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   charSet . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["getCharSet"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   docEncoding . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["getDocEncoding"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   docTitle . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["getDocTitle"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   excludeDocFilesSubDir . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["getExcludeDocFilesSubDir"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   footer . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["getFooter"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   groups . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["getGroups"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   helpFile . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["getHelpFile"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   links . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["getLinks"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   linksOffline . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["getLinksOffline"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   noQualifiers . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["getNoQualifiers"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   stylesheetFile . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["getStylesheetFile"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   tagletPath . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["getTagletPath"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   taglets . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["getTaglets"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   tags . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["getTags"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   group ( groupName ,    Arrays . asList ( packagePatterns )  )  ;", "}", "METHOD_END"], "methodName": ["group"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . groups . getValue (  )  . put ( groupName ,    packagePatterns )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["group"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "setGroups ( groups )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["group"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return    (  ( StandardJavadocDocletOptions )     ( optionFiles ( groupsFile )  )  )  ;", "}", "METHOD_END"], "methodName": ["groupsFile"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "setHelpFile ( helpFile )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["helpFile"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   author . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["isAuthor"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   docFilesSubDirs . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["isDocFilesSubDirs"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   keyWords . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["isKeyWords"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   linkSource . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["isLinkSource"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   noComment . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["isNoComment"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   noDeprecated . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["isNoDeprecated"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   noDeprecatedList . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["isNoDeprecatedList"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   noHelp . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["isNoHelp"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   noIndex . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["isNoIndex"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   noNavBar . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["isNoNavBar"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   noSince . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["isNoSince"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   noTimestamp . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["isNoTimestamp"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   noTree . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["isNoTree"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   serialWarn . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["isSerialWarn"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   splitIndex . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["isSplitIndex"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   use . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["isUse"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   version . getValue (  )  ;", "}", "METHOD_END"], "methodName": ["isVersion"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   keyWords ( true )  ;", "}", "METHOD_END"], "methodName": ["keyWords"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "setKeyWords ( keyWords )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["keyWords"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   linkSource ( true )  ;", "}", "METHOD_END"], "methodName": ["linkSource"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "setLinkSource ( linkSource )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["linkSource"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . links . getValue (  )  . addAll ( Arrays . asList ( links )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["links"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return    (  ( StandardJavadocDocletOptions )     ( optionFiles ( linksFile )  )  )  ;", "}", "METHOD_END"], "methodName": ["linksFile"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . linksOffline . getValue (  )  . add ( new   JavadocOfflineLink ( extDocUrl ,    packageListLoc )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["linksOffline"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return    (  ( StandardJavadocDocletOptions )     ( optionFiles ( linksOfflineFile )  )  )  ;", "}", "METHOD_END"], "methodName": ["linksOfflineFile"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   noComment ( true )  ;", "}", "METHOD_END"], "methodName": ["noComment"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "setNoComment ( noComment )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["noComment"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   noDeprecated ( true )  ;", "}", "METHOD_END"], "methodName": ["noDeprecated"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "setNoDeprecated ( nodeprecated )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["noDeprecated"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   noDeprecatedList ( true )  ;", "}", "METHOD_END"], "methodName": ["noDeprecatedList"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "setNoDeprecatedList ( noDeprecatedList )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["noDeprecatedList"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   noHelp ( true )  ;", "}", "METHOD_END"], "methodName": ["noHelp"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "setNoHelp ( noHelp )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["noHelp"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   noIndex ( true )  ;", "}", "METHOD_END"], "methodName": ["noIndex"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "setNoIndex ( noIndex )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["noIndex"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   noNavBar ( true )  ;", "}", "METHOD_END"], "methodName": ["noNavBar"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "setNoNavBar ( noNavBar )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["noNavBar"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . noQualifiers . getValue (  )  . addAll ( noQualifiers )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["noQualifier"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   noQualifier ( Arrays . asList ( noQualifiers )  )  ;", "}", "METHOD_END"], "methodName": ["noQualifiers"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   noSince ( true )  ;", "}", "METHOD_END"], "methodName": ["noSince"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "setNoSince ( noSince )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["noSince"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   noTimestamp ( true )  ;", "}", "METHOD_END"], "methodName": ["noTimestamp"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "setNoTimestamp ( noTimestamp )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["noTimestamp"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   noTree ( true )  ;", "}", "METHOD_END"], "methodName": ["noTree"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "setNoTree ( noTree )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["noTree"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   serialWarn ( true )  ;", "}", "METHOD_END"], "methodName": ["serialWarn"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "setSerialWarn ( serialWarn )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["serialWarn"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . author . setValue ( author )  ;", "}", "METHOD_END"], "methodName": ["setAuthor"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . bottom . setValue ( bottom )  ;", "}", "METHOD_END"], "methodName": ["setBottom"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . charSet . setValue ( charSet )  ;", "}", "METHOD_END"], "methodName": ["setCharSet"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . docEncoding . setValue ( docEncoding )  ;", "}", "METHOD_END"], "methodName": ["setDocEncoding"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . docFilesSubDirs . setValue ( docFilesSubDirs )  ;", "}", "METHOD_END"], "methodName": ["setDocFilesSubDirs"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . docTitle . setValue ( docTitle )  ;", "}", "METHOD_END"], "methodName": ["setDocTitle"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . excludeDocFilesSubDir . setValue ( excludeDocFilesSubDir )  ;", "}", "METHOD_END"], "methodName": ["setExcludeDocFilesSubDir"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . footer . setValue ( footer )  ;", "}", "METHOD_END"], "methodName": ["setFooter"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . groups . setValue ( groups )  ;", "}", "METHOD_END"], "methodName": ["setGroups"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . helpFile . setValue ( helpFile )  ;", "}", "METHOD_END"], "methodName": ["setHelpFile"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . keyWords . setValue ( keyWords )  ;", "}", "METHOD_END"], "methodName": ["setKeyWords"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . linkSource . setValue ( linkSource )  ;", "}", "METHOD_END"], "methodName": ["setLinkSource"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . links . setValue ( links )  ;", "}", "METHOD_END"], "methodName": ["setLinks"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . linksOffline . setValue ( linksOffline )  ;", "}", "METHOD_END"], "methodName": ["setLinksOffline"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . noComment . setValue ( noComment )  ;", "}", "METHOD_END"], "methodName": ["setNoComment"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . noDeprecated . setValue ( noDeprecated )  ;", "}", "METHOD_END"], "methodName": ["setNoDeprecated"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . noDeprecatedList . setValue ( noDeprecatedList )  ;", "}", "METHOD_END"], "methodName": ["setNoDeprecatedList"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . noHelp . setValue ( noHelp )  ;", "}", "METHOD_END"], "methodName": ["setNoHelp"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . noIndex . setValue ( noIndex )  ;", "}", "METHOD_END"], "methodName": ["setNoIndex"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . noNavBar . setValue ( noNavBar )  ;", "}", "METHOD_END"], "methodName": ["setNoNavBar"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . noQualifiers . setValue ( noQualifiers )  ;", "}", "METHOD_END"], "methodName": ["setNoQualifiers"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . noSince . setValue ( noSince )  ;", "}", "METHOD_END"], "methodName": ["setNoSince"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . noTimestamp . setValue ( noTimestamp )  ;", "}", "METHOD_END"], "methodName": ["setNoTimestamp"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . noTree . setValue ( noTree )  ;", "}", "METHOD_END"], "methodName": ["setNoTree"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . serialWarn . setValue ( serialWarn )  ;", "}", "METHOD_END"], "methodName": ["setSerialWarn"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . splitIndex . setValue ( splitIndex )  ;", "}", "METHOD_END"], "methodName": ["setSplitIndex"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . stylesheetFile . setValue ( stylesheetFile )  ;", "}", "METHOD_END"], "methodName": ["setStylesheetFile"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . tagletPath . setValue ( tagletPath )  ;", "}", "METHOD_END"], "methodName": ["setTagletPath"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . taglets . setValue ( taglets )  ;", "}", "METHOD_END"], "methodName": ["setTaglets"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . tags . setValue ( tags )  ;", "}", "METHOD_END"], "methodName": ["setTags"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . use . setValue ( use )  ;", "}", "METHOD_END"], "methodName": ["setUse"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . version . setValue ( version )  ;", "}", "METHOD_END"], "methodName": ["setVersion"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   splitIndex ( true )  ;", "}", "METHOD_END"], "methodName": ["splitIndex"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "setSplitIndex ( splitIndex )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["splitIndex"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "setStylesheetFile ( stylesheetFile )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["stylesheetFile"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   tagletPath ( Arrays . asList ( tagletPath )  )  ;", "}", "METHOD_END"], "methodName": ["tagletPath"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . tagletPath . getValue (  )  . addAll ( tagletPath )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["tagletPath"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   taglets ( Arrays . asList ( taglets )  )  ;", "}", "METHOD_END"], "methodName": ["taglets"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . taglets . getValue (  )  . addAll ( taglets )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["taglets"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   tags ( Arrays . asList ( tags )  )  ;", "}", "METHOD_END"], "methodName": ["tags"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "this . tags . getValue (  )  . addAll ( tags )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["tags"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return    (  ( StandardJavadocDocletOptions )     ( optionFiles ( tagsFile )  )  )  ;", "}", "METHOD_END"], "methodName": ["tagsFile"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   use ( true )  ;", "}", "METHOD_END"], "methodName": ["use"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "setUse ( use )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["use"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "return   version ( true )  ;", "}", "METHOD_END"], "methodName": ["version"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "setVersion ( version )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["version"], "fileName": "org.gradle.external.javadoc.StandardJavadocDocletOptions"}, {"methodBody": ["METHOD_START", "{", "if    ( directory    =  =    null )     {", "throw   new   IllegalArgumentException (  \" eDirectory    =  =    null !  \"  )  ;", "}", "if    (  !  ( directory . exists (  )  )  )     {", "throw   new   IllegalArgumentException (  \" eDirectory   doesn ' t   exists !  \"  )  ;", "}", "if    ( directory . isFile (  )  )     {", "throw   new   IllegalArgumentException (  \" eDirectory   is   a   file \"  )  ;", "}", "this . eDirectory    =    directory ;", "return   this ;", "}", "METHOD_END"], "methodName": ["execDirectory"], "fileName": "org.gradle.external.javadoc.internal.JavadocExecHandleBuilder"}, {"methodBody": ["METHOD_START", "{", "try    {", "options . write ( optionsFile )  ;", "}    catch    ( IOException   e )     {", "throw   new   GradleException (  \" Failed   to   store   \"  ,    e )  ;", "}", "ExecAction   execAction    =    execActionFactory . newExecAction (  )  ;", "execAction . workingDir ( execDirectory )  ;", "execAction . executable ( GUtil . elvis ( executable ,    Jvm . current (  )  . getutable (  )  )  )  ;", "execAction . args (  (  \"  @  \"     +     ( optionsFile . getAbsolutePath (  )  )  )  )  ;", "options . contributeCommandLineOptions ( execAction )  ;", "return   execAction ;", "}", "METHOD_END"], "methodName": ["getExecHandle"], "fileName": "org.gradle.external.javadoc.internal.JavadocExecHandleBuilder"}, {"methodBody": ["METHOD_START", "{", "return   executable ;", "}", "METHOD_END"], "methodName": ["getExecutable"], "fileName": "org.gradle.external.javadoc.internal.JavadocExecHandleBuilder"}, {"methodBody": ["METHOD_START", "{", "if    ( options    =  =    null )     {", "throw   new   IllegalAumentException (  \" options    =  =    null !  \"  )  ;", "}", "this . options    =    options ;", "return   this ;", "}", "METHOD_END"], "methodName": ["options"], "fileName": "org.gradle.external.javadoc.internal.JavadocExecHandleBuilder"}, {"methodBody": ["METHOD_START", "{", "this . optionsFile    =    optionsFile ;", "return   this ;", "}", "METHOD_END"], "methodName": ["optionsFile"], "fileName": "org.gradle.external.javadoc.internal.JavadocExecHandleBuilder"}, {"methodBody": ["METHOD_START", "{", "this . executable    =    executable ;", "}", "METHOD_END"], "methodName": ["setExecutable"], "fileName": "org.gradle.external.javadoc.internal.JavadocExecHandleBuilder"}, {"methodBody": ["METHOD_START", "{", "return   addBooleanOption ( option ,    false )  ;", "}", "METHOD_END"], "methodName": ["addBooleanOption"], "fileName": "org.gradle.external.javadoc.internal.JavadocOptionFile"}, {"methodBody": ["METHOD_START", "{", "return   addOption ( new   BooleanJavadocOptionFileOption ( option ,    value )  )  ;", "}", "METHOD_END"], "methodName": ["addBooleanOption"], "fileName": "org.gradle.external.javadoc.internal.JavadocOptionFile"}, {"methodBody": ["METHOD_START", "{", "return   addEnumOption ( option ,    null )  ;", "}", "METHOD_END"], "methodName": ["addEnumOption"], "fileName": "org.gradle.external.javadoc.internal.JavadocOptionFile"}, {"methodBody": ["METHOD_START", "{", "return   addOption ( new   EnumJavadocOptionFileOption < T >  ( option ,    value )  )  ;", "}", "METHOD_END"], "methodName": ["addEnumOption"], "fileName": "org.gradle.external.javadoc.internal.JavadocOptionFile"}, {"methodBody": ["METHOD_START", "{", "return   addFileOption ( option ,    null )  ;", "}", "METHOD_END"], "methodName": ["addFileOption"], "fileName": "org.gradle.external.javadoc.internal.JavadocOptionFile"}, {"methodBody": ["METHOD_START", "{", "return   addOption ( new   FileJavadocOptionFileOption ( option ,    value )  )  ;", "}", "METHOD_END"], "methodName": ["addFileOption"], "fileName": "org.gradle.external.javadoc.internal.JavadocOptionFile"}, {"methodBody": ["METHOD_START", "{", "return   addOption ( new   MultilineMultiValueJavadocOptionFileOption ( option ,    Lists .  < List < String >  > newArrayList (  )  ,     \"     \"  )  )  ;", "}", "METHOD_END"], "methodName": ["addMultilineMultiValueOption"], "fileName": "org.gradle.external.javadoc.internal.JavadocOptionFile"}, {"methodBody": ["METHOD_START", "{", "return   addOption ( new   MultilineStringsJavadocOptionFileOption ( option ,    Lists .  < String > newArrayList (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["addMultilineStringsOption"], "fileName": "org.gradle.external.javadoc.internal.JavadocOptionFile"}, {"methodBody": ["METHOD_START", "{", "if    ( option    =  =    null )     {", "throw   new   IllegalArgumentException (  \" option    =  =    null !  \"  )  ;", "}", "options . put ( option . get (  )  ,    option )  ;", "return   option ;", "}", "METHOD_END"], "methodName": ["addOption"], "fileName": "org.gradle.external.javadoc.internal.JavadocOptionFile"}, {"methodBody": ["METHOD_START", "{", "return   addPathOption ( option ,    System . getProperty (  \" path . separator \"  )  )  ;", "}", "METHOD_END"], "methodName": ["addPathOption"], "fileName": "org.gradle.external.javadoc.internal.JavadocOptionFile"}, {"methodBody": ["METHOD_START", "{", "return   addOption ( new   PathJavadocOptionFileOption ( option ,    Lists .  < File > newArrayList (  )  ,    joinBy )  )  ;", "}", "METHOD_END"], "methodName": ["addPathOption"], "fileName": "org.gradle.external.javadoc.internal.JavadocOptionFile"}, {"methodBody": ["METHOD_START", "{", "return   addStringOption ( option ,    null )  ;", "}", "METHOD_END"], "methodName": ["addStringOption"], "fileName": "org.gradle.external.javadoc.internal.JavadocOptionFile"}, {"methodBody": ["METHOD_START", "{", "return   addOption ( new   StringJavadocOptionFileOption ( option ,    value )  )  ;", "}", "METHOD_END"], "methodName": ["addStringOption"], "fileName": "org.gradle.external.javadoc.internal.JavadocOptionFile"}, {"methodBody": ["METHOD_START", "{", "return   addStringsOption ( option ,    System . getProperty (  \" path . separator \"  )  )  ;", "}", "METHOD_END"], "methodName": ["addStringsOption"], "fileName": "org.gradle.external.javadoc.internal.JavadocOptionFile"}, {"methodBody": ["METHOD_START", "{", "return   addOption ( new   StringsJavadocOptionFileOption ( option ,    Lists .  < String > newArrayList (  )  ,    joinBy )  )  ;", "}", "METHOD_END"], "methodName": ["addStringsOption"], "fileName": "org.gradle.external.javadoc.internal.JavadocOptionFile"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    JavadocOptionFileOptionInternal <  ?  >  >    duplicateOptions    =    Maps . newLinkedHashMap (  )  ;", "for    ( Map . Entry < String ,    JavadocOptionFileOptionInternal <  ?  >  >    entry    :    original . entrySet (  )  )     {", "duplicateOptions . put ( entry . getKey (  )  ,    entry . getValue (  )  . duplicate (  )  )  ;", "}", "return   duplicateOptions ;", "}", "METHOD_END"], "methodName": ["duplicateOptions"], "fileName": "org.gradle.external.javadoc.internal.JavadocOptionFile"}, {"methodBody": ["METHOD_START", "{", "JavadocOptionFileOption <  ?  >    foundOption    =    options . get ( option )  ;", "if    ( foundOption    =  =    null )     {", "throw   new   IllegalArgumentException (  (  \" Cannot   find   option    \"     +    option )  )  ;", "}", "return   Cast . uncheckedCast ( foundOption )  ;", "}", "METHOD_END"], "methodName": ["getOption"], "fileName": "org.gradle.external.javadoc.internal.JavadocOptionFile"}, {"methodBody": ["METHOD_START", "{", "return   Collections . unmodifiableMap ( options )  ;", "}", "METHOD_END"], "methodName": ["getOptions"], "fileName": "org.gradle.external.javadoc.internal.JavadocOptionFile"}, {"methodBody": ["METHOD_START", "{", "return   sourceNames ;", "}", "METHOD_END"], "methodName": ["getSourceNames"], "fileName": "org.gradle.external.javadoc.internal.JavadocOptionFile"}, {"methodBody": ["METHOD_START", "{", "if    ( optionFile    =  =    null )     {", "throw   new   IllegalArgumentException (  \" optionFile    =  =    null !  \"  )  ;", "}", "final   Writer   optionFileWriter    =    new   Writer ( this )  ;", "optionFileWriter . write ( optionFile )  ;", "}", "METHOD_END"], "methodName": ["write"], "fileName": "org.gradle.external.javadoc.internal.JavadocOptionFile"}, {"methodBody": ["METHOD_START", "{", "IoActions . writeTextFile ( outputFile ,    new   ErroringAction < BufferedWriter >  (  )     {", "@ Override", "protected   void   doExecute ( BufferedWriter   writer )    throws   Exception    {", "final   Map < String ,    JavadocOptionFileOption <  ?  >  >    options    =    new   TreeMap < String ,    JavadocOptionFileOption <  ?  >  >  ( optionFile . getOptions (  )  )  ;", "Context   writerContext    =    new   Context ( writer )  ;", "JavadocOptionFileOption <  ?  >    localeOption    =    options . remove (  \" locale \"  )  ;", "if    ( localeOption    !  =    null )     {", "localeOption . write ( writerContext )  ;", "}", "for    ( final   String   option    :    options . keySet (  )  )     {", "options . get ( option )  . write ( writerContext )  ;", "}", "optionFile . getSourceNames (  )  . write ( writerContext )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["write"], "fileName": "org.gradle.external.javadoc.internal.JavadocOptionFileWriter"}, {"methodBody": ["METHOD_START", "{", "writer . write ( SystemProperties . getInstance (  )  . getLineSeparator (  )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["newLine"], "fileName": "org.gradle.external.javadoc.internal.JavadocOptionFileWriterContext"}, {"methodBody": ["METHOD_START", "{", "writer . write ( string )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["write"], "fileName": "org.gradle.external.javadoc.internal.JavadocOptionFileWriterContext"}, {"methodBody": ["METHOD_START", "{", "for    ( String   value    :    values )     {", "writeValue ( option ,    value )  ;", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["writeMultilineValuesOption"], "fileName": "org.gradle.external.javadoc.internal.JavadocOptionFileWriterContext"}, {"methodBody": ["METHOD_START", "{", "writeOptionHeader ( option )  ;", "newLine (  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["writeOption"], "fileName": "org.gradle.external.javadoc.internal.JavadocOptionFileWriterContext"}, {"methodBody": ["METHOD_START", "{", "write (  \"  -  \"  )  ;", "write ( o )  ;", "write (  \"     \"  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["writeOptionHeader"], "fileName": "org.gradle.external.javadoc.internal.JavadocOptionFileWriterContext"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   builder    =    new   StringBuilder (  )  ;", "Iterator < File >    filesIt    =    files . iterator (  )  ;", "while    ( filesIt . hasNext (  )  )     {", "builder . append ( filesIt . next (  )  . getAbsolutePath (  )  )  ;", "if    ( filesIt . hasNext (  )  )     {", "builder . append ( joinValuesBy )  ;", "}", "}", "writeValue ( option ,    builder . toString (  )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["writePathOption"], "fileName": "org.gradle.external.javadoc.internal.JavadocOptionFileWriterContext"}, {"methodBody": ["METHOD_START", "{", "write (  \"  \\  '  \"  )  ;", "write ( value . replaceAll (  \"  \\  \\  \\  \\  \"  ,     \"  \\  \\  \\  \\  \\  \\  \\  \\  \"  )  . replaceAll ( SystemProperties . getInstance (  )  . getLineSeparator (  )  ,     (  \"  \\  \\  \\  \\  \"     +     ( SystemProperties . getInstance (  )  . getLineSeparator (  )  )  )  )  . replace (  \"  \\  '  \"  ,     \"  \\  \\  \\  '  \"  )  )  ;", "write (  \"  \\  '  \"  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["writeValue"], "fileName": "org.gradle.external.javadoc.internal.JavadocOptionFileWriterContext"}, {"methodBody": ["METHOD_START", "{", "writeOptionHeader ( option )  ;", "writeValue ( value )  ;", "newLine (  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["writeValueOption"], "fileName": "org.gradle.external.javadoc.internal.JavadocOptionFileWriterContext"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   builder    =    new   StringBuilder (  )  ;", "Iterator < String >    valuesIt    =    values . iterator (  )  ;", "while    ( valuesIt . hasNext (  )  )     {", "builder . append ( valuesIt . next (  )  )  ;", "if    ( valuesIt . hasNext (  )  )     {", "builder . append ( joinValuesBy )  ;", "}", "}", "writeValue ( option ,    builder . toString (  )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["writeValuesOption"], "fileName": "org.gradle.external.javadoc.internal.JavadocOptionFileWriterContext"}, {"methodBody": ["METHOD_START", "{", "writerContext . writeOptionHeader ( option )  ;", "writerContext . writeValue ( offlineLink . getExtDocUrl (  )  )  ;", "writerContext . write (  \"     \"  )  ;", "writerContext . writeValue ( offlineLink . getPackagelistLoc (  )  )  ;", "writerContext . newLine (  )  ;", "}", "METHOD_END"], "methodName": ["writeOfflineLink"], "fileName": "org.gradle.external.javadoc.internal.LinksOfflineJavadocOptionFileOption"}, {"methodBody": ["METHOD_START", "{", "int   currentLen    =    current . length ;", "int   previousLen    =    previous . length ;", "int [  ]  [  ]    costs    =    new   int [ currentLen    +     1  ]  [ previousLen    +     1  ]  ;", "for    ( int   j    =     0  ;    j    <  =    previousLen ;    j +  +  )     {", "costs [  0  ]  [ j ]     =    j ;", "}", "for    ( int   i    =     1  ;    i    <  =    currentLen ;    i +  +  )     {", "costs [ i ]  [  0  ]     =    i ;", "for    ( int   j    =     1  ;    j    <  =    previousLen ;    j +  +  )     {", "costs [ i ]  [ j ]     =    Math . min (  (  ( Math . min ( costs [  ( i    -     1  )  ]  [ j ]  ,    costs [ i ]  [  ( j    -     1  )  ]  )  )     +     1  )  ,     ( current [  ( i    -     1  )  ]  . equals ( previous [  ( j    -     1  )  ]  )     ?    costs [  ( i    -     1  )  ]  [  ( j    -     1  )  ]     :     ( costs [  ( i    -     1  )  ]  [  ( j    -     1  )  ]  )     +     1  )  )  ;", "}", "}", "List <  < T >  >    result    =    Lists . newLinkedList (  )  ;", "for    ( int   i    =    currentLen ,    j    =    previousLen ;     ( i    >     0  )     |  |     ( j    >     0  )  ;  )     {", "int   cost    =    costs [ i ]  [ j ]  ;", "if    (  (  ( i    >     0  )     &  &     ( j    >     0  )  )     &  &     ( cost    =  =     ( current [  ( i    -     1  )  ]  . equals ( previous [  ( j    -     1  )  ]  )     ?    costs [  ( i    -     1  )  ]  [  ( j    -     1  )  ]     :     ( costs [  ( i    -     1  )  ]  [  ( j    -     1  )  ]  )     +     1  )  )  )     {", "T   a    =    current [  (  -  - i )  ]  ;", "T   b    =    previous [  (  -  - j )  ]  ;", "if    ( a . equals ( b )  )     {", "result . add (  0  ,    new    < T >  ( b ,    a )  )  ;", "} else    {", "result . add (  0  ,    new    < T >  ( b ,    a )  )  ;", "}", "} else", "if    (  ( i    >     0  )     &  &     ( cost    =  =     (  1     +     ( costs [  ( i    -     1  )  ]  [ j ]  )  )  )  )     {", "result . add (  0  ,    new    < T >  ( null ,    current [  (  -  - i )  ]  )  )  ;", "} else", "if    (  ( j    >     0  )     &  &     ( cost    =  =     (  1     +     ( costs [ i ]  [  ( j    -     1  )  ]  )  )  )  )     {", "result . add (  0  ,    new    < T >  ( previous [  (  -  - j )  ]  ,    null )  )  ;", "} else    {", "throw   new   IllegalStateException (  \" Unexpected   cost   matrix \"  )  ;", "}", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["align"], "fileName": "org.gradle.internal.util.Alignment"}, {"methodBody": ["METHOD_START", "{", "return   currentValue ;", "}", "METHOD_END"], "methodName": ["getCurrentValue"], "fileName": "org.gradle.internal.util.Alignment"}, {"methodBody": ["METHOD_START", "{", "return   kind ;", "}", "METHOD_END"], "methodName": ["getKind"], "fileName": "org.gradle.internal.util.Alignment"}, {"methodBody": ["METHOD_START", "{", "return   previousValue ;", "}", "METHOD_END"], "methodName": ["getPreviousValue"], "fileName": "org.gradle.internal.util.Alignment"}, {"methodBody": ["METHOD_START", "{", "if    ( previous    =  =    current )     {", "return    . Kind . identical ;", "}", "if    ( previous    =  =    null )     {", "return    . Kind . added ;", "}", "if    ( current    =  =    null )     {", "return    . Kind . removed ;", "}", "if    ( current . equals ( previous )  )     {", "return    . Kind . identical ;", "}", "return    . Kind . transformed ;", "}", "METHOD_END"], "methodName": ["kindOf"], "fileName": "org.gradle.internal.util.Alignment"}, {"methodBody": ["METHOD_START", "{", "this . platform    =    platform ;", "}", "METHOD_END"], "methodName": ["setPlatform"], "fileName": "org.gradle.language.java.tasks.PlatformJavaCompile"}]