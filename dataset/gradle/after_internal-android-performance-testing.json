[{"methodBody": ["METHOD_START", "{", "libsByEquality . add ( androidLibrary )  ;", "libsByFile . put ( androidLibrary . getJarFile (  )  ,    androidLibrary )  ;", "libsByIdentity . put ( androidLibrary ,    androidLibrary )  ;", "unpack ( androidLibrary ,    libsBackingByIdentity )  ;", "for    ( AndroidLibrary   library    :    androidLibrary . getLibraryDependencies (  )  )     {", "inspect ( library )  ;", "}", "for    ( JavaLibrary   library    :    androidLibrary . getJavaDependencies (  )  )     {", "inspect ( library )  ;", "}", "}", "METHOD_END"], "methodName": ["inspect"], "fileName": "org.gradle.performance.android.Inspector"}, {"methodBody": ["METHOD_START", "{", "for    ( Variant   variant    :    androidProject . getVariants (  )  )     {", "inspect ( variant . getMainArtifact (  )  . getDependencies (  )  )  ;", "for    ( AndroidArtifact   otherArtifact    :    variant . getExtraAndroidArtifacts (  )  )     {", "inspect ( otherArtifact . getDependencies (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["inspect"], "fileName": "org.gradle.performance.android.Inspector"}, {"methodBody": ["METHOD_START", "{", "for    ( AndroidLibrary   androidLibrary    :    dependencies . getLibraries (  )  )     {", "inspect ( androidLibrary )  ;", "}", "for    ( JavaLibrary   javaLibrary    :    dependencies . getJavaLibraries (  )  )     {", "inspect ( javaLibrary )  ;", "}", "}", "METHOD_END"], "methodName": ["inspect"], "fileName": "org.gradle.performance.android.Inspector"}, {"methodBody": ["METHOD_START", "{", "add ( javaLibrary )  ;", "if    (  !  ( containsKey ( getJarFile (  )  )  )  )     {", "put ( getJarFile (  )  ,    javaLibrary )  ;", "}", "if    (  !  ( containsKey ( javaLibrary )  )  )     {", "put ( javaLibrary ,    javaLibrary )  ;", "}", "unpack ( javaLibrary ,    javaLibsBackingByIdentity )  ;", "for    ( JavaLibrary   library    :    getDependencies (  )  )     {", "i ( library )  ;", "}", "}", "METHOD_END"], "methodName": ["inspect"], "fileName": "org.gradle.performance.android.Inspector"}, {"methodBody": ["METHOD_START", "{", "System . out . println (  \"  *    Inspecting \"  )  ;", "Timer   timer    =    new   Timer (  )  ;", "for    ( AndroidProject   androidProject    :    models . values (  )  )     {", "if    ( androidProject    =  =    null )     {", "continue ;", "}", "inspect ( androidProject )  ;", "}", "timer . stop (  )  ;", "System . out . println (  (  \" Inspect   took    \"     +     ( timer . duration (  )  )  )  )  ;", "System . out . println (  \"  -  -  -  \"  )  ;", "System . out . println (  (  \" Android   libs :     \"     +     ( libsByEquality . size (  )  )  )  )  ;", "System . out . println (  (  \" Android   libs   by   file :     \"     +     ( libsByFile . size (  )  )  )  )  ;", "System . out . println (  (  \" Android   libs   by   id :     \"     +     ( libsByIdentity . size (  )  )  )  )  ;", "System . out . println (  (  \" Android   libs   by   id    ( backing )  :     \"     +     ( libsBackingByIdentity . size (  )  )  )  )  ;", "System . out . println (  (  \" Java   libs :     \"     +     ( size (  )  )  )  )  ;", "System . out . println (  (  \" Java   libs   by   file :     \"     +     ( size (  )  )  )  )  ;", "System . out . println (  (  \" Java   libs   by   id :     \"     +     ( size (  )  )  )  )  ;", "System . out . println (  (  \" Java   libs   by   id    ( backing )  :     \"     +     ( size (  )  )  )  )  ;", "System . out . println (  \"  -  -  -  \"  )  ;", "}", "METHOD_END"], "methodName": ["inspectModel"], "fileName": "org.gradle.performance.android.Inspector"}, {"methodBody": ["METHOD_START", "{", "Object   unpacked    =    new   ProtocolToModelAdapter (  )  . unpack ( library )  ;", "objectMap . put ( unpacked ,    unpacked )  ;", "}", "METHOD_END"], "methodName": ["unpack"], "fileName": "org.gradle.performance.android.Inspector"}, {"methodBody": ["METHOD_START", "{", "System . out . println (  (  \"  *    Fetching   model   for    \"     +    buildDir )  )  ;", "System . out . println (  (  \"  *    Using   tooling   API    \"     +     ( GradleVersion . current (  )  . getVersion (  )  )  )  )  ;", "Timer   timer    =    new   Timer (  )  ;", "GradleConnector   gradleConnector    =    GradleConnector . newConnector (  )  ;", "gradleConnector . forProjectDirectory ( buildDir )  ;", "(  ( tooling . internal . consumer . DefaultGradleConnector )     ( gradleConnector )  )  . embedded ( embedded )  ;", "if    ( gradleInstallDir    !  =    null )     {", "gradleConnector . useInstallation ( gradleInstallDir )  ;", "}", "ProjectConnection   connect    =    gradleConnector . connect (  )  ;", "try    {", "for    ( int   i    =     0  ;    i    <     5  ;    i +  +  )     {", "SyncAction . withProjectConnection ( connect ,    null )  ;", "}", "}    finally    {", "connect . close (  )  ;", "}", "timer . stop (  )  ;", "System . out . println (  (  \" total   time :     \"     +     ( timer . duration (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["fetch"], "fileName": "org.gradle.performance.android.Main"}, {"methodBody": ["METHOD_START", "{", "OptionParser   parser    =    new   OptionParser (  )  ;", "ArgumentAcceptingOptionSpec < String >    projectFlag    =    parser . accepts (  \" project - dir \"  ,     \" Gradle   project   directory \"  )  . withRequiredArg (  )  ;", "ArgumentAcceptingOptionSpec < String >    InstallFlag    =    parser . accepts (  \"  - install \"  ,     \" Gradle   installation   to   run   the   build   with \"  )  . withRequiredArg (  )  ;", "OptionSpecBuilder   sync    =    parser . accepts (  \" sync \"  ,     \" Simulate   Gradle   project   synchronization \"  )  ;", "OptionSpecBuilder   embeddedFlag    =    parser . accepts (  \" embedded \"  ,     \" Run   build   in - process \"  )  ;", "OptionSet   options    =    parser . parse ( args )  ;", "if    (  !  ( options . has ( projectFlag )  )  )     {", "System . out . println (  \" No   project   directory   specified .  \"  )  ;", "System . out . println (  )  ;", "parser . printHelpOn ( System . out )  ;", "return ;", "}", "File   buildDir    =    new   File ( options . valueOf ( projectFlag )  )  ;", "File   InstallDir    =     ( options . hasArgument ( InstallFlag )  )     ?    new   File ( options . valueOf ( InstallFlag )  )     :    null ;", "boolean   embedded    =    options . hasArgument ( embeddedFlag )  ;", "boolean   hasSimulation    =    options . has ( sync )  ;", "if    (  ( options . has ( sync )  )     |  |    hasSimulation )     {", "Main . fetch ( buildDir ,    InstallDir ,    embedded )  ;", "}", "System . exit (  0  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "org.gradle.performance.android.Main"}, {"methodBody": ["METHOD_START", "{", "System . out . println (  \"  *    Running   sync \"  )  ;", "Timer   syncTimer    =    new   Timer (  )  ;", "BuildActionExecuter < Map < String ,    AndroidProject >  >    modelBuilder    =    connect . action ( new   GetModel (  )  )  ;", "modelBuilder . setStandardOutput ( System . out )  ;", "modelBuilder . setStandardError ( System . err )  ;", "modelBuilder . forTasks (  \" generateDebugSources \"  )  ;", "modelBuilder . withArguments (  \"  - Dcombuild . gradle . overrideVersionCheck = true \"  ,     \"  - injected . build . model . only = true \"  ,     \"  - injected . build . model . only . versioned =  3  \"  ,     \"  - builder . sdkDownload = true \"  ,     \"  - s \"  )  ;", "modelBuilder . setJvmArguments (  \"  - Xmx 2 g \"  )  ;", "if    ( modelBuilderAction    !  =    null )     {", "modelBuilderAction . execute ( modelBuilder )  ;", "}", "Timer   actionTimer    =    new   Timer (  )  ;", "Map < String ,    AndroidProject >    models    =    modelBuilder . run (  )  ;", "actionTimer . stop (  )  ;", "System . out . println (  (  \" Running   action   took    \"     +     ( actionTimer . duration (  )  )  )  )  ;", "System . out . println (  (  \" Received   models :     \"     +     ( models . size (  )  )  )  )  ;", "new   Inspector (  )  . inspectModel ( models )  ;", "syncTimer . stop (  )  ;", "System . out . println (  (  \" Sync   took    \"     +     ( syncTimer . duration (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["withProjectConnection"], "fileName": "org.gradle.performance.android.SyncAction"}, {"methodBody": ["METHOD_START", "{", "return    ( BigDecimal . valueOf (  (  ( endTime )     -     ( startTime )  )  ,     9  )  )     +     \" s \"  ;", "}", "METHOD_END"], "methodName": ["duration"], "fileName": "org.gradle.performance.android.Timer"}, {"methodBody": ["METHOD_START", "{", "endTime    =    System . nanoTime (  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "org.gradle.performance.android.Timer"}]