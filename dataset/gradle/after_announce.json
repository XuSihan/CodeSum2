[{"methodBody": ["METHOD_START", "{", "project . getExtensions (  )  . create (  \" announce \"  ,    AnnouncePluginExtension . class ,    project )  ;", "}", "METHOD_END"], "methodName": ["apply"], "fileName": "org.gradle.api.plugins.announce.AnnouncePlugin"}, {"methodBody": ["METHOD_START", "{", "try    {", "rFactory . createAnnouncer ( type )  . send ( project . getName (  )  ,    msg )  ;", "}    catch    ( Exception   e )     {", "logger . warn (  (  (  (  (  \" Failed   to   send   message    \\  '  \"     +    msg )     +     \"  \\  '    to    \\  '  \"  )     +    type )     +     \"  \\  '  \"  )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["announce"], "fileName": "org.gradle.api.plugins.announce.AnnouncePluginExtension"}, {"methodBody": ["METHOD_START", "{", "return   announcerFactory ;", "}", "METHOD_END"], "methodName": ["getAnnouncerFactory"], "fileName": "org.gradle.api.plugins.announce.AnnouncePluginExtension"}, {"methodBody": ["METHOD_START", "{", "return   onDemandLocalAnnouncer ;", "}", "METHOD_END"], "methodName": ["getLocal"], "fileName": "org.gradle.api.plugins.announce.AnnouncePluginExtension"}, {"methodBody": ["METHOD_START", "{", "return   password ;", "}", "METHOD_END"], "methodName": ["getPassword"], "fileName": "org.gradle.api.plugins.announce.AnnouncePluginExtension"}, {"methodBody": ["METHOD_START", "{", "return   username ;", "}", "METHOD_END"], "methodName": ["getUsername"], "fileName": "org.gradle.api.plugins.announce.AnnouncePluginExtension"}, {"methodBody": ["METHOD_START", "{", "this . announcerFactory    =    announcerFactory ;", "}", "METHOD_END"], "methodName": ["setAnnouncerFactory"], "fileName": "org.gradle.api.plugins.announce.AnnouncePluginExtension"}, {"methodBody": ["METHOD_START", "{", "onDemandLocalAnnouncer . setLocal ( localAnnouncer )  ;", "}", "METHOD_END"], "methodName": ["setLocal"], "fileName": "org.gradle.api.plugins.announce.AnnouncePluginExtension"}, {"methodBody": ["METHOD_START", "{", "this . password    =    password ;", "}", "METHOD_END"], "methodName": ["setPassword"], "fileName": "org.gradle.api.plugins.announce.AnnouncePluginExtension"}, {"methodBody": ["METHOD_START", "{", "this . username    =    username ;", "}", "METHOD_END"], "methodName": ["setUsername"], "fileName": "org.gradle.api.plugins.announce.AnnouncePluginExtension"}, {"methodBody": ["METHOD_START", "{", "project . getPluginManager (  )  . apply ( AnnouncePlugin . class )  ;", "AnnouncePluginExtension   extension    =    project . getExtensions (  )  . findByType ( AnnouncePluginExtension . class )  ;", "AnnouncingBuildListener   listener    =    new   AnnouncingBuildListener ( extension . getLocal (  )  )  ;", "project . getGradle (  )  . addBuildListener ( listener )  ;", "}", "METHOD_END"], "methodName": ["apply"], "fileName": "org.gradle.api.plugins.announce.BuildAnnouncementsPlugin"}, {"methodBody": ["METHOD_START", "{", "if    (  ( taskCount )     =  =     0  )     {", "return    \" No   tasks   executed \"  ;", "}", "if    (  ( taskCount )     =  =     1  )     {", "return    \"  1    task   executed \"  ;", "}", "return    ( taskCount )     +     \"    tasks   executed \"  ;", "}", "METHOD_END"], "methodName": ["getTaskCountMessage"], "fileName": "org.gradle.api.plugins.announce.internal.AnnouncingBuildListener"}, {"methodBody": ["METHOD_START", "{", "if    (  ( failed . size (  )  )     =  =     1  )     {", "return    \"  1    task   failed \"  ;", "}", "return    ( failed . size (  )  )     +     \"    tasks   failed \"  ;", "}", "METHOD_END"], "methodName": ["getTaskFailureCountMessage"], "fileName": "org.gradle.api.plugins.announce.internal.AnnouncingBuildListener"}, {"methodBody": ["METHOD_START", "{", "if    (  ( failed . size (  )  )     =  =     1  )     {", "return    ( failed . get (  0  )  )     +     \"    failed \"  ;", "} else    {", "return    ( failed . size (  )  )     +     \"    tasks   failed \"  ;", "}", "}", "METHOD_END"], "methodName": ["getTaskFailureMessage"], "fileName": "org.gradle.api.plugins.announce.internal.AnnouncingBuildListener"}, {"methodBody": ["METHOD_START", "{", "if    (  \" local \"  . equals ( type )  )     {", "if    ( OperatingSystem . current (  )  . isWindows (  )  )     {", "return   createActualAnnouncer (  \" snarl \"  )  ;", "} else", "if    ( OperatingSystem . current (  )  . isMacOsX (  )  )     {", "return   createActualAnnouncer (  \" growl \"  )  ;", "} else    {", "return   createActualAnnouncer (  \" notify - send \"  )  ;", "}", "} else", "if    (  \" twitter \"  . equals ( type )  )     {", "String   username    =    announcePluginConvention . getUsername (  )  ;", "String   password    =    announcePluginConvention . getPassword (  )  ;", "return   new   Twitter ( username ,    password )  ;", "} else", "if    (  \" notify - send \"  . equals ( type )  )     {", "return   new   NotifySend ( processOperations ,    iconProvider )  ;", "} else", "if    (  \" snarl \"  . equals ( type )  )     {", "return   new   Snarl ( iconProvider )  ;", "} else", "if    (  \" growl \"  . equals ( type )  )     {", "if    (  !  ( isHeadless (  )  )  )     {", "try    {", "return   new   jdk 6  . AppleScriptBackedGrowlAnnouncer ( iconProvider )  ;", "}    catch    ( AnnouncerUnavailableException   e )     {", "}", "}", "return   new   GrowlNotifyBackedAnnouncer ( processOperations ,    iconProvider )  ;", "} else    {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["createActualAnnouncer"], "fileName": "org.gradle.api.plugins.announce.internal.DefaultAnnouncerFactory"}, {"methodBody": ["METHOD_START", "{", "Announcer   announcer    =    createActualAnnouncer ( type )  ;", "return   announcer    !  =    null    ?    new   IgnoreUnavailableAnnouncer ( announcer )     :    new   UnknownAnnouncer (  )  ;", "}", "METHOD_END"], "methodName": ["createAnnouncer"], "fileName": "org.gradle.api.plugins.announce.internal.DefaultAnnouncerFactory"}, {"methodBody": ["METHOD_START", "{", "final   File   icon    =    iconProvider . getIcon (  3  2  ,     3  2  )  ;", "List < String >    properties    =    Arrays . asList ( Snarl . formatProperty (  \" action \"  ,     \" notification \"  )  ,    Snarl . formatProperty (  \" app \"  ,     \" G   Snarl   Notifier \"  )  ,    Snarl . formatProperty (  \" class \"  ,     \" alert \"  )  ,    Snarl . formatProperty (  \" title \"  ,    title )  ,    Snarl . formatProperty (  \" text \"  ,    message )  ,    Snarl . formatProperty (  \" icon \"  ,     ( icon    =  =    null    ?    null    :    icon . getAbsolutePath (  )  )  )  ,    Snarl . formatProperty (  \" timeout \"  ,     \"  1  0  \"  )  )  ;", "return    (  ( Snarl . HEAD )     +     ( CollectionUtils . join (  \"  \"  ,    properties )  )  )     +     \"  \\ r \\ n \"  ;", "}", "METHOD_END"], "methodName": ["formatMessage"], "fileName": "org.gradle.api.plugins.announce.internal.Snarl"}, {"methodBody": ["METHOD_START", "{", "if    (  ( value    !  =    null )     &  &     (  !  ( value . isEmpty (  )  )  )  )     {", "return    (  (  \"  #  ?  \"     +    name )     +     \"  =  \"  )     +    value ;", "} else    {", "return    \"  \"  ;", "}", "}", "METHOD_END"], "methodName": ["formatProperty"], "fileName": "org.gradle.api.plugins.announce.internal.Snarl"}, {"methodBody": ["METHOD_START", "{", "Socket   socket    =    null ;", "try    {", "try    {", "socket    =    new   Socket ( host ,     9  8  8  7  )  ;", "}    catch    ( ConnectException   e )     {", "throw   new   ArUnavailableException (  (  (  \" Snarl   is   not   running   on   host    \"     +     ( String . valueOf ( host )  )  )     +     \"  .  \"  )  ,    e )  ;", "}", "PrintWriter   printWriter    =    null ;", "try    {", "final   OutputStream   outputStream    =    socket . getOutputStream (  )  ;", "printWriter    =    new   PrintWriter ( outputStream ,    true )  ;", "printWriter . println ( formatMessage ( title ,    message )  )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}    finally    {", "IOUtils . closeQuietly ( printWriter )  ;", "}", "}    catch    ( IOException   ioException )     {", "throw   new   UncheckedIOException ( ioException )  ;", "}    finally    {", "IOUtils . closeQuietly ( socket )  ;", "}", "}", "METHOD_END"], "methodName": ["send"], "fileName": "org.gradle.api.plugins.announce.internal.Snarl"}, {"methodBody": ["METHOD_START", "{", "return   value . replace (  \"  \\  \\  \"  ,     \"  \\  \\  \\  \\  \"  )  . replace (  \"  \\ r \"  ,     \"  \\  \\ r \"  )  ;", "}", "METHOD_END"], "methodName": ["escape"], "fileName": "org.gradle.api.plugins.announce.internal.jdk6.AppleScriptBackedGrowlAnnouncer"}]