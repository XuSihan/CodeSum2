[{"methodBody": ["METHOD_START", "{", "ZipEntry   buildReceipt    =    new   ZipEntry (  \" build - receipt . properties \"  )  ;", "buildReceipt . setTime ( CONSTANT _ TIME _ FOR _ ZIP _ ENTRIES )  ;", "zipOutputStream . putNextEntry ( buildReceipt )  ;", "String   contents    =     \" versionNumber =  \"     +     ( GVersion . current (  )  . getVersion (  )  )  ;", "zipOutputStream . write ( contents . getBytes ( StandardCharsets . ISO _  8  8  5  9  _  1  )  )  ;", "zipOutputStream . closeEntry (  )  ;", "}", "METHOD_END"], "methodName": ["addBuildReceipt"], "fileName": "org.gradle.api.tasks.wrapper.Wrapper"}, {"methodBody": ["METHOD_START", "{", "File   jarFileDestination    =    getJarFile (  )  ;", "File   unixScript    =    getScriptFile (  )  ;", "FileResolver   resolver    =    getFileLookup (  )  . getFileResolver ( unixScript . getParentFile (  )  )  ;", "String   jarFileRelativePath    =    resolver . resolveAsRelativePath ( jarFileDestination )  ;", "writeProperties ( getPropertiesFile (  )  )  ;", "writeWrapperTo ( jarFileDestination )  ;", "StartScriptGenerator   generator    =    new   StartScriptGenerator (  )  ;", "generator . setApplicationName (  \" Gradle \"  )  ;", "generator . setMainClassName ( GradleWrapperMain . class . getName (  )  )  ;", "generator . setClasspath ( WrapUtil . toList ( jarFileRelativePath )  )  ;", "generator . setOptsEnvironmentVar (  \" GRADLE _ OPTS \"  )  ;", "generator . setExitEnvironmentVar (  \" GRADLE _ EXIT _ CONSOLE \"  )  ;", "generator . setAppNameSystemProperty (  \" pname \"  )  ;", "generator . setScriptRelPath ( unixScript . getName (  )  )  ;", "generator . generateUnixScript ( unixScript )  ;", "generator . generateWindowsScript ( getBatchScript (  )  )  ;", "}", "METHOD_END"], "methodName": ["generate"], "fileName": "org.gradle.api.tasks.wrapper.Wrapper"}, {"methodBody": ["METHOD_START", "{", "return   archiveBase ;", "}", "METHOD_END"], "methodName": ["getArchiveBase"], "fileName": "org.gradle.api.tasks.wrapper.Wrapper"}, {"methodBody": ["METHOD_START", "{", "return   archivePath ;", "}", "METHOD_END"], "methodName": ["getArchivePath"], "fileName": "org.gradle.api.tasks.wrapper.Wrapper"}, {"methodBody": ["METHOD_START", "{", "return   Arrays . asList ( Wrapper . DistributionType . values (  )  )  ;", "}", "METHOD_END"], "methodName": ["getAvailableDistributionTypes"], "fileName": "org.gradle.api.tasks.wrapper.Wrapper"}, {"methodBody": ["METHOD_START", "{", "FiscriptFi =    getScriptFi )  ;", "return   new   FiscriptFigetParentFi )  ,    scriptFigetName (  )  . replaceFirst (  \"  (  \\  \\  .  [  ^  \\  \\  .  ]  +  )  ?  $  \"  ,     \"  . bat \"  )  )  ;", "}", "METHOD_END"], "methodName": ["getBatchScript"], "fileName": "org.gradle.api.tasks.wrapper.Wrapper"}, {"methodBody": ["METHOD_START", "{", "return   distributionBase ;", "}", "METHOD_END"], "methodName": ["getDistributionBase"], "fileName": "org.gradle.api.tasks.wrapper.Wrapper"}, {"methodBody": ["METHOD_START", "{", "return   distributionPath ;", "}", "METHOD_END"], "methodName": ["getDistributionPath"], "fileName": "org.gradle.api.tasks.wrapper.Wrapper"}, {"methodBody": ["METHOD_START", "{", "return   distributionSha 2  5  6 Sum ;", "}", "METHOD_END"], "methodName": ["getDistributionSha256Sum"], "fileName": "org.gradle.api.tasks.wrapper.Wrapper"}, {"methodBody": ["METHOD_START", "{", "return   distributionType ;", "}", "METHOD_END"], "methodName": ["getDistributionType"], "fileName": "org.gradle.api.tasks.wrapper.Wrapper"}, {"methodBody": ["METHOD_START", "{", "if    (  ( distributionUrl )     !  =    null )     {", "return   distributionUrl ;", "} else", "if    (  ( Version )     !  =    null )     {", "return   locator . getDistributionFor ( Version ,    distributionType . name (  )  . toLowerCase ( ENGLISH )  )  . toString (  )  ;", "} else    {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["getDistributionUrl"], "fileName": "org.gradle.api.tasks.wrapper.Wrapper"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getFileLookup"], "fileName": "org.gradle.api.tasks.wrapper.Wrapper"}, {"methodBody": ["METHOD_START", "{", "return   gradleVersion . getVersion (  )  ;", "}", "METHOD_END"], "methodName": ["getGradleVersion"], "fileName": "org.gradle.api.tasks.wrapper.Wrapper"}, {"methodBody": ["METHOD_START", "{", "return   getProject (  )  . file ( jarFile )  ;", "}", "METHOD_END"], "methodName": ["getJarFile"], "fileName": "org.gradle.api.tasks.wrapper.Wrapper"}, {"methodBody": ["METHOD_START", "{", "File   jarFileDestination    =    getJarFile (  )  ;", "return   new   File ( jarFileDestination . getParentFile (  )  ,    jarFileDestination . getName (  )  . replaceAll (  \"  \\  \\  . jar $  \"  ,     \"  . proties \"  )  )  ;", "}", "METHOD_END"], "methodName": ["getPropertiesFile"], "fileName": "org.gradle.api.tasks.wrapper.Wrapper"}, {"methodBody": ["METHOD_START", "{", "return   getProject (  )  . file ( scriptFile )  ;", "}", "METHOD_END"], "methodName": ["getScriptFile"], "fileName": "org.gradle.api.tasks.wrapper.Wrapper"}, {"methodBody": ["METHOD_START", "{", "this . archiveBase    =    archiveBase ;", "}", "METHOD_END"], "methodName": ["setArchiveBase"], "fileName": "org.gradle.api.tasks.wrapper.Wrapper"}, {"methodBody": ["METHOD_START", "{", "this . archivePath    =    archivePath ;", "}", "METHOD_END"], "methodName": ["setArchivePath"], "fileName": "org.gradle.api.tasks.wrapper.Wrapper"}, {"methodBody": ["METHOD_START", "{", "this . distributionBase    =    distributionBase ;", "}", "METHOD_END"], "methodName": ["setDistributionBase"], "fileName": "org.gradle.api.tasks.wrapper.Wrapper"}, {"methodBody": ["METHOD_START", "{", "this . distributionPath    =    distributionPath ;", "}", "METHOD_END"], "methodName": ["setDistributionPath"], "fileName": "org.gradle.api.tasks.wrapper.Wrapper"}, {"methodBody": ["METHOD_START", "{", "this . distributionSha 2  5  6 Sum    =    distributionSha 2  5  6 Sum ;", "}", "METHOD_END"], "methodName": ["setDistributionSha256Sum"], "fileName": "org.gradle.api.tasks.wrapper.Wrapper"}, {"methodBody": ["METHOD_START", "{", "this . distributionType    =    distributionType ;", "}", "METHOD_END"], "methodName": ["setDistributionType"], "fileName": "org.gradle.api.tasks.wrapper.Wrapper"}, {"methodBody": ["METHOD_START", "{", "this . distributionUrl    =    url ;", "}", "METHOD_END"], "methodName": ["setDistributionUrl"], "fileName": "org.gradle.api.tasks.wrapper.Wrapper"}, {"methodBody": ["METHOD_START", "{", "this . gradleVersion    =    GradleVersion . version ( gradleVersion )  ;", "}", "METHOD_END"], "methodName": ["setGradleVersion"], "fileName": "org.gradle.api.tasks.wrapper.Wrapper"}, {"methodBody": ["METHOD_START", "{", "this . jarFile    =    jarFile ;", "}", "METHOD_END"], "methodName": ["setJarFile"], "fileName": "org.gradle.api.tasks.wrapper.Wrapper"}, {"methodBody": ["METHOD_START", "{", "this . jarFile    =    jarFile ;", "}", "METHOD_END"], "methodName": ["setJarFile"], "fileName": "org.gradle.api.tasks.wrapper.Wrapper"}, {"methodBody": ["METHOD_START", "{", "this . scriptFile    =    scriptFile ;", "}", "METHOD_END"], "methodName": ["setScriptFile"], "fileName": "org.gradle.api.tasks.wrapper.Wrapper"}, {"methodBody": ["METHOD_START", "{", "this . scriptFile    =    scriptFile ;", "}", "METHOD_END"], "methodName": ["setScriptFile"], "fileName": "org.gradle.api.tasks.wrapper.Wrapper"}, {"methodBody": ["METHOD_START", "{", "Properties   wrapperProperties    =    new   Properties (  )  ;", "wrapperProperties . put ( DISTRIBUTION _ URL _ PROPERTY ,    getDistributionUrl (  )  )  ;", "if    (  ( distributionSha 2  5  6 Sum )     !  =    null )     {", "wrapperProperties . put ( DISTRIBUTION _ SHA _  2  5  6  _ SUM ,    distributionSha 2  5  6 Sum )  ;", "}", "wrapperProperties . put ( DISTRIBUTION _ BASE _ PROPERTY ,    distributionBase . toString (  )  )  ;", "wrapperProperties . put ( DISTRIBUTION _ PATH _ PROPERTY ,    distributionPath )  ;", "wrapperProperties . put ( ZIP _ STORE _ BASE _ PROPERTY ,    archiveBase . toString (  )  )  ;", "wrapperProperties . put ( ZIP _ STORE _ PATH _ PROPERTY ,    archivePath )  ;", "try    {", "PropertiesUtils . store ( wrapperProperties ,    propertiesFileDestination )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["writeProperties"], "fileName": "org.gradle.api.tasks.wrapper.Wrapper"}, {"methodBody": ["METHOD_START", "{", "InputStream   gradleWrapperJar    =    Wrapper . class . getResourceAsStream (  \"  / gradle - wrapper . jar \"  )  ;", "if    ( gradleWrapperJar    =  =    null )     {", "throw   new   GradleException (  \" Cannot   locate   wrapper   JAR   resource .  \"  )  ;", "}", "ZipInputStream   zipInputStream    =    null ;", "ZipOutputStream   zipOutputStream    =    null ;", "try    {", "zipInputStream    =    new   ZipInputStream ( gradleWrapperJar )  ;", "zipOutputStream    =    new   ZipOutputStream ( new   FileOutputStream ( destination )  )  ;", "for    ( ZipEntry   entry    =    zipInputStream . getNextEntry (  )  ;    entry    !  =    null ;    entry    =    zipInputStream . getNextEntry (  )  )     {", "zipOutputStream . putNextEntry ( entry )  ;", "if    (  !  ( entry . isDirectory (  )  )  )     {", "ByteStreams . copy ( zipInputStream ,    zipOutputStream )  ;", "}", "zipOutputStream . closeEntry (  )  ;", "}", "addBuildReceipt ( zipOutputStream )  ;", "}    catch    ( IOException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}    finally    {", "IoActions . closeQuietly ( zipInputStream )  ;", "IoActions . closeQuietly ( zipOutputStream )  ;", "}", "}", "METHOD_END"], "methodName": ["writeWrapperTo"], "fileName": "org.gradle.api.tasks.wrapper.Wrapper"}, {"methodBody": ["METHOD_START", "{", "TaskConfiguration . createInitTask ( project )  ;", "}", "METHOD_END"], "methodName": ["apply"], "fileName": "org.gradle.buildinit.plugins.BuildInitPlugin"}, {"methodBody": ["METHOD_START", "{", "TaskConfiguration . createWrapperTask ( project )  ;", "}", "METHOD_END"], "methodName": ["apply"], "fileName": "org.gradle.buildinit.plugins.WrapperPlugin"}, {"methodBody": ["METHOD_START", "{", "return   dependency (  \" compile \"  ,    comment ,    dependencies )  ;", "}", "METHOD_END"], "methodName": ["compileDependency"], "fileName": "org.gradle.buildinit.plugins.internal.BuildScriptBuilder"}, {"methodBody": ["METHOD_START", "{", "configSpecs . add ( new   BuildScriptBuilder . ConfigSpec ( selector ,    expression )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["configuration"], "fileName": "org.gradle.buildinit.plugins.internal.BuildScriptBuilder"}, {"methodBody": ["METHOD_START", "{", "return   configuration ( new   BuildScriptBuilder . ConventionSelector ( conventionName )  ,    new   BuildScriptBuilder . PropertyAssignment ( comment ,    propertyName ,    propertyValue )  )  ;", "}", "METHOD_END"], "methodName": ["conventionPropertyAssignment"], "fileName": "org.gradle.buildinit.plugins.internal.BuildScriptBuilder"}, {"methodBody": ["METHOD_START", "{", "return   new   TemplateOperation (  )     {", "@ Override", "public   void   generate (  )     {", "File   target    =    getTargetFile (  )  ;", "try    {", "PrintWriter   writer    =    new   PrintWriter ( new   FileWriter ( target )  )  ;", "try    {", ". PrettyPrinter   printer    =     . prettyPrinterFor ( dsl ,    writer )  ;", "printer . printFileHeader ( headerLines )  ;", "printer . printPlugins ( plugins )  ;", "printer . printConfigSpecs ( configSpecs )  ;", "if    (  !  ( dependencies . isEmpty (  )  )  )     {", "printer . printDependencies ( dependencies )  ;", "printer . printRepositories (  )  ;", "}", "}    finally    {", "writer . close (  )  ;", "}", "}    catch    ( Exception   e )     {", "throw   new   GradleException (  (  (  \" Could   not   generate   file    \"     +    target )     +     \"  .  \"  )  ,    e )  ;", "}", "}", "}  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.buildinit.plugins.internal.BuildScriptBuilder"}, {"methodBody": ["METHOD_START", "{", "this . dependencies . put ( configuration ,    new   BuildScriptBuilder . DepSpec ( comment ,    Arrays . asList ( dependencies )  )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["dependency"], "fileName": "org.gradle.buildinit.plugins.internal.BuildScriptBuilder"}, {"methodBody": ["METHOD_START", "{", "headerLines . addAll ( Splitter . on (  \"  \\ n \"  )  . splitToList ( comment )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["fileComment"], "fileName": "org.gradle.buildinit.plugins.internal.BuildScriptBuilder"}, {"methodBody": ["METHOD_START", "{", "return   fileResolver . resolve ( dsl . fileNameFor ( fileNameWithoutExtension )  )  ;", "}", "METHOD_END"], "methodName": ["getTargetFile"], "fileName": "org.gradle.buildinit.plugins.internal.BuildScriptBuilder"}, {"methodBody": ["METHOD_START", "{", "plugins . put ( pluginId ,    comment )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["plugin"], "fileName": "org.gradle.buildinit.plugins.internal.BuildScriptBuilder"}, {"methodBody": ["METHOD_START", "{", "return   new   BuildScriptBuilder . PrettyPrinter ( BuildScriptBuilder . syntaxFor ( dsl )  ,    writer )  ;", "}", "METHOD_END"], "methodName": ["prettyPrinterFor"], "fileName": "org.gradle.buildinit.plugins.internal.BuildScriptBuilder"}, {"methodBody": ["METHOD_START", "{", "return   configuration ( BuildScriptBuilder . NULL _ SELECTOR ,    new   BuildScriptBuilder . PropertyAssignment ( comment ,    propertyName ,    propertyValue )  )  ;", "}", "METHOD_END"], "methodName": ["propertyAssignment"], "fileName": "org.gradle.buildinit.plugins.internal.BuildScriptBuilder"}, {"methodBody": ["METHOD_START", "{", "switch    ( dsl )     {", "case   KOTLIN    :", "return   new    . KotlinSyntax (  )  ;", "case   GROOVY    :", "return   new    . GroovySyntax (  )  ;", "default    :", "throw   new   IllegalStateException (  )  ;", "}", "}", "METHOD_END"], "methodName": ["syntaxFor"], "fileName": "org.gradle.buildinit.plugins.internal.BuildScriptBuilder"}, {"methodBody": ["METHOD_START", "{", "return   configuration ( new   BuildScriptBuilder . TaskSelector ( taskName ,    taskType )  ,    new   BuildScriptBuilder . MethodInvocation ( comment ,    methodName )  )  ;", "}", "METHOD_END"], "methodName": ["taskMethodInvocation"], "fileName": "org.gradle.buildinit.plugins.internal.BuildScriptBuilder"}, {"methodBody": ["METHOD_START", "{", "return   configuration ( new   BuildScriptBuilder . TaskSelector ( taskName ,    taskType )  ,    new   BuildScriptBuilder . PropertyAssignment ( comment ,    propertyName ,    propertyValue )  )  ;", "}", "METHOD_END"], "methodName": ["taskPropertyAssignment"], "fileName": "org.gradle.buildinit.plugins.internal.BuildScriptBuilder"}, {"methodBody": ["METHOD_START", "{", "return   dependency (  \" testCompile \"  ,    comment ,    dependencies )  ;", "}", "METHOD_END"], "methodName": ["testCompileDependency"], "fileName": "org.gradle.buildinit.plugins.internal.BuildScriptBuilder"}, {"methodBody": ["METHOD_START", "{", "return   dependency (  \" testRuntime \"  ,    comment ,    dependencies )  ;", "}", "METHOD_END"], "methodName": ["testRuntimeDependency"], "fileName": "org.gradle.buildinit.plugins.internal.BuildScriptBuilder"}, {"methodBody": ["METHOD_START", "{", "return   libraryVersions . getProperty ( module )  ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "org.gradle.buildinit.plugins.internal.DefaultTemplateLibraryVersionProvider"}, {"methodBody": ["METHOD_START", "{", "switch    ( testFramework )     {", "case   SPOCK    :", "buildScriptBuilder (  \" Apply   the   groovy   to   also   add   support   for   Groovy    ( needed   for   Spock )  \"  ,     \" groovy \"  )  . dependency ( getTestImplementationConfigurationName (  )  ,     \" Use   the   latest   Groovy   version   for   Spock   testing \"  ,     (  \" groovy : groovy - all :  \"     +     ( libraryVersionProvider . getVersion (  \" groovy \"  )  )  )  )  . dependency ( getTestImplementationConfigurationName (  )  ,     \" Use   the   awesome   Spock   testing   and   specification   framework   even   with   Java \"  ,     (  \" spockframework : spock - core :  \"     +     ( libraryVersionProvider . getVersion (  \" spock \"  )  )  )  ,     (  \" junit : junit :  \"     +     ( libraryVersionProvider . getVersion (  \" junit \"  )  )  )  )  ;", "break ;", "case   TESTNG    :", "buildScriptBuilder . dependency ( getTestImplementationConfigurationName (  )  ,     \" Use   TestNG   framework ,    also   requires   calling   test . useTestNG (  )    below \"  ,     (  \" testng : testng :  \"     +     ( libraryVersionProvider . getVersion (  \" testng \"  )  )  )  )  . taskMethodInvocation (  \" Use   TestNG   for   unit   tests \"  ,     \" test \"  ,     \" Test \"  ,     \" useTestNG \"  )  ;", "break ;", "default    :", "buildScriptBuilder . dependency ( getTestImplementationConfigurationName (  )  ,     \" Use   JUnit   test   framework \"  ,     (  \" junit : junit :  \"     +     ( libraryVersionProvider . getVersion (  \" junit \"  )  )  )  )  ;", "break ;", "}", "}", "METHOD_END"], "methodName": ["addTestFramework"], "fileName": "org.gradle.buildinit.plugins.internal.JavaProjectInitDescriptor"}, {"methodBody": ["METHOD_START", "{", "buildScriptBuilder . dependency ( getImplementationConfigurationName (  )  ,     \" This   dependency   is   found   on   compile   classpath   of   this   component   and   consumers .  \"  ,     (  \" com . google . guava : guava :  \"     +     ( libraryVersionProvider . getVersion (  \" guava \"  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["configureBuildScript"], "fileName": "org.gradle.buildinit.plugins.internal.JavaProjectInitDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   JavaProjectInitDescriptor . DESCRIPTION ;", "}", "METHOD_END"], "methodName": ["getDescription"], "fileName": "org.gradle.buildinit.plugins.internal.JavaProjectInitDescriptor"}, {"methodBody": ["METHOD_START", "{", "return    \" compile \"  ;", "}", "METHOD_END"], "methodName": ["getImplementationConfigurationName"], "fileName": "org.gradle.buildinit.plugins.internal.JavaProjectInitDescriptor"}, {"methodBody": ["METHOD_START", "{", "return    \" test \"     +     ( StringUtils . capitalize ( getImplementationConfigurationName (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getTestImplementationConfigurationName"], "fileName": "org.gradle.buildinit.plugins.internal.JavaProjectInitDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   fromClazzTemplate ( clazzTemplate ,    sourceSetName ,    this . language )  ;", "}", "METHOD_END"], "methodName": ["fromClazzTemplate"], "fileName": "org.gradle.buildinit.plugins.internal.LanguageLibraryProjectInitDescriptor"}, {"methodBody": ["METHOD_START", "{", "String   targetFileName    =    clazzTemplate . substring (  (  ( clazzTemplate . lastIndexOf (  \"  /  \"  )  )     +     1  )  )  . replace (  \"  . template \"  ,     \"  \"  )  ;", "return   fromClazzTemplate ( clazzTemplate ,    sourceSetName ,    l ,    targetFileName )  ;", "}", "METHOD_END"], "methodName": ["fromClazzTemplate"], "fileName": "org.gradle.buildinit.plugins.internal.LanguageLibraryProjectInitDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   templateOperationFactory . newTemplateOperation (  )  . withTemplate ( clazzTemplate )  . withTarget (  (  (  (  (  (  \" src /  \"     +    sourceSetName )     +     \"  /  \"  )     +    language )     +     \"  /  \"  )     +    targetFileName )  )  . create (  )  ;", "}", "METHOD_END"], "methodName": ["fromClazzTemplate"], "fileName": "org.gradle.buildinit.plugins.internal.LanguageLibraryProjectInitDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   new   ConditionalTemplateOperation ( new   Factory < Boolean >  (  )     {", "public   Boolean   create (  )     {", "return    ( fileResolver . resolveFilesAsTree (  (  \" src / main /  \"     +     ( language )  )  )  . isEmpty (  )  )     |  |     ( fileResolver . resolveFilesAsTree (  (  \" src / test /  \"     +     ( language )  )  )  . isEmpty (  )  )  ;", "}", "}  ,    operations )  ;", "}", "METHOD_END"], "methodName": ["whenNoSourcesAvailable"], "fileName": "org.gradle.buildinit.plugins.internal.LanguageLibraryProjectInitDescriptor"}, {"methodBody": ["METHOD_START", "{", "if    ( registeredProjectDescriptors . containsKey ( descriptorID )  )     {", "throw   new   GradleException ( String . format (  \" ProjectDescriptor   with   ID    '  % s '    already   registered .  \"  ,    descriptorID )  )  ;", "}", "registeredProjectDescriptors . put ( descriptorID ,    descriptor )  ;", ". LOGGER . debug (  \" registered   setupDescriptor    {  }  \"  ,    descriptorID )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.gradle.buildinit.plugins.internal.ProjectLayoutSetupRegistry"}, {"methodBody": ["METHOD_START", "{", "return   registeredProjectDescriptors . get ( type )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "org.gradle.buildinit.plugins.internal.ProjectLayoutSetupRegistry"}, {"methodBody": ["METHOD_START", "{", "return   CollectionUtils . toList ( registeredProjectDescriptors . values (  )  )  ;", "}", "METHOD_END"], "methodName": ["getAll"], "fileName": "org.gradle.buildinit.plugins.internal.ProjectLayoutSetupRegistry"}, {"methodBody": ["METHOD_START", "{", "return   CollectionUtils . sort ( registeredProjectDescriptors . keySet (  )  )  ;", "}", "METHOD_END"], "methodName": ["getSupportedTypes"], "fileName": "org.gradle.buildinit.plugins.internal.ProjectLayoutSetupRegistry"}, {"methodBody": ["METHOD_START", "{", "return    ( get ( type )  )     !  =    null ;", "}", "METHOD_END"], "methodName": ["supports"], "fileName": "org.gradle.buildinit.plugins.internal.ProjectLayoutSetupRegistry"}, {"methodBody": ["METHOD_START", "{", "String   now    =    DateFormat . getDateTimeInstance ( DateFormat . SHORT ,    DateFormat . SHORT )  . format ( new   Date (  )  )  ;", "Map < String ,    String >    map    =    new   LinkedHashMap < String ,    String >  (  3  )  ;", "map . put (  \" genDate \"  ,    now )  ;", "map . put (  \" genUser \"  ,    System . getProperty (  \" user . name \"  )  )  ;", "map . put (  \" genGVersion \"  ,    GVersion . current (  )  . toString (  )  )  ;", "return   map ;", "}", "METHOD_END"], "methodName": ["loadDefaultBindings"], "fileName": "org.gradle.buildinit.plugins.internal.TemplateOperationFactory"}, {"methodBody": ["METHOD_START", "{", "return   new   TemplateOperationFactory . TemplateOperationBuilder ( defaultBindings )  ;", "}", "METHOD_END"], "methodName": ["newTemplateOperation"], "fileName": "org.gradle.buildinit.plugins.internal.TemplateOperationFactory"}, {"methodBody": ["METHOD_START", "{", "return   value . replace (  \"  \\  \\  \"  ,     \"  \\  \\  \\  \\  \"  )  ;", "}", "METHOD_END"], "methodName": ["getGroovyComment"], "fileName": "org.gradle.buildinit.plugins.internal.TemplateValue"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   result    =    new   StringBuilder (  )  ;", "for    ( int   i    =     0  ;    i    <     ( value . length (  )  )  ;    i +  +  )     {", "char   ch    =    value . charAt ( i )  ;", "switch    ( ch )     {", "case    '  \\  \\  '     :", "result . append (  '  \\  \\  '  )  . append (  '  \\  \\  '  )  ;", "break ;", "case    '  \\  '  '     :", "result . append (  '  \\  \\  '  )  . append (  '  \\  '  '  )  ;", "break ;", "case    '  \\ n '     :", "result . append (  '  \\  \\  '  )  . append (  ' n '  )  ;", "break ;", "case    '  \\ r '     :", "result . append (  '  \\  \\  '  )  . append (  ' r '  )  ;", "break ;", "case    '  \\ t '     :", "result . append (  '  \\  \\  '  )  . append (  ' t '  )  ;", "break ;", "case    '  \\ f '     :", "result . append (  '  \\  \\  '  )  . append (  ' f '  )  ;", "break ;", "case    '  \\ b '     :", "result . append (  '  \\  \\  '  )  . append (  ' b '  )  ;", "break ;", "default    :", "result . append ( ch )  ;", "}", "}", "return   result . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getGroovyString"], "fileName": "org.gradle.buildinit.plugins.internal.TemplateValue"}, {"methodBody": ["METHOD_START", "{", "TaskConfiguration . addInitPlaceholder ( projectInternal )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.buildinit.plugins.internal.action.BuildInitAutoApplyAction"}, {"methodBody": ["METHOD_START", "{", "return   xml . replaceFirst (  \"  ^  <  \\  \\  ? xml .  +  ?  \\  \\  ?  >  \"  ,     \"  \"  )  ;", "}", "METHOD_END"], "methodName": ["prepareXml"], "fileName": "org.gradle.buildinit.plugins.internal.maven.MavenProjectXmlWriter"}, {"methodBody": ["METHOD_START", "{", "assert    !  ( projects . isEmpty (  )  )     :     \" Cannot   prepare   the   Maven   projects   effective   XML   because   provided   projects   set   is   empty .  \"  ;", "if    (  ( projects . size (  )  )     =  =     1  )     {", "return   toXml ( projects . iterator (  )  . next (  )  )  ;", "}", "StringBuilder   out    =    new   StringBuilder (  \"  < projects >  \"  )  ;", "for    (    project    :    projects )     {", "out . append ( toXml ( project )  )  ;", "}", "return   out . append (  \"  <  / projects >  \"  )  . toString (  )  ;", "}", "METHOD_END"], "methodName": ["toXml"], "fileName": "org.gradle.buildinit.plugins.internal.maven.MavenProjectXmlWriter"}, {"methodBody": ["METHOD_START", "{", "StreamByteBuffer   out    =    new   StreamByteBuffer (  )  ;", "try    {", "new   MavenXpp 3 Writer (  )  . write ( out . getOutputStream (  )  ,    p . getModel (  )  )  ;", "}    catch    ( IOException   e )     {", "throw   new   RuntimeException (  (  \" Unable   to   serialize   Maven   model   to   XML .    Maven   p :     \"     +    p )  ,    e )  ;", "}", "return   prepareXml ( out . readAsString (  )  )  ;", "}", "METHOD_END"], "methodName": ["toXml"], "fileName": "org.gradle.buildinit.plugins.internal.maven.MavenProjectXmlWriter"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( pomFile . exists (  )  )  )     {", "throw   new   MavenConversionException ( String . format (  \" Unable   to   create   Maven   p   model .    The   POM   file    % s   does   not   exist .  \"  ,    pomFile )  )  ;", "}", "try    {", "return   createNow ( mavenSettings ,    pomFile )  ;", "}    catch    ( Exception   e )     {", "throw   new   MavenConversionException ( String . format (  \" Unable   to   create   Maven   p   model   using   POM    % s .  \"  ,    pomFile )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.buildinit.plugins.internal.maven.MavenProjectsCreator"}, {"methodBody": ["METHOD_START", "{", "ContainerConfiguration   containerConfiguration    =    new   DefaultContainerConfiguration (  )  . setClassWorld ( new   ClassWorld (  \" plexus . core \"  ,    ClassWorld . class . getClassLoader (  )  )  )  . setName (  \" mavenCore \"  )  ;", "DefaultPlexusContainer   container    =    new   DefaultPlexusContainer ( containerConfiguration )  ;", "ProjectBuilder   builder    =    container . lookup ( ProjectBuilder . class )  ;", "MavenExecutionRequest   executionRequest    =    new   DefaultMavenExecutionRequest (  )  ;", "final   Properties   properties    =    new   Properties (  )  ;", "properties . putAll ( SystemProperties . getInstance (  )  . asMap (  )  )  ;", "executionRequest . setSystemProperties ( properties )  ;", "MavenExecutionRequestPopulator   populator    =    container . lookup ( MavenExecutionRequestPopulator . class )  ;", "populator . populateFromSettings ( executionRequest ,    settings )  ;", "populator . populateDefaults ( executionRequest )  ;", "ProjectBuildingRequest   buildingRequest    =    executionRequest . getProjectBuildingRequest (  )  ;", "buildingRequest . setProcessPlugins ( false )  ;", "mavenProject    =    builder . build ( pomFile ,    buildingRequest )  . getProject (  )  ;", "Set <  >    reactorProjects    =    new   LinkedHashSet <  >  (  )  ;", "reactorProjects . add ( mavenProject )  ;", "List < ProjectBuildingResult >    allProjects    =    builder . build ( ImmutableList . of ( pomFile )  ,    true ,    buildingRequest )  ;", "CollectionUtils . collect ( allProjects ,    reactorProjects ,    new   Transformer <  ,    ProjectBuildingResult >  (  )     {", "public      transform ( ProjectBuildingResult   original )     {", "return   original . getProject (  )  ;", "}", "}  )  ;", "MavenExecutionResult   result    =    new   DefaultMavenExecutionResult (  )  ;", "result . setProject ( mavenProject )  ;", "RepositorySystemSession   repoSession    =    new   DefaultRepositorySystemSession (  )  ;", "MavenSession   session    =    new   MavenSession ( container ,    repoSession ,    executionRequest ,    result )  ;", "session . setCurrentProject ( mavenProject )  ;", "return   reactorProjects ;", "}", "METHOD_END"], "methodName": ["createNow"], "fileName": "org.gradle.buildinit.plugins.internal.maven.MavenProjectsCreator"}, {"methodBody": ["METHOD_START", "{", "return   fileNameWithoutExtension    +     ( fileExtension )  ;", "}", "METHOD_END"], "methodName": ["fileNameFor"], "fileName": "org.gradle.buildinit.plugins.internal.modifiers.BuildInitDsl"}, {"methodBody": ["METHOD_START", "{", "if    ( name    =  =    null )     {", "return    . GROOVY ;", "}", "for    (    language    :     . values (  )  )     {", "if    ( language . getId (  )  . equals ( name )  )     {", "return   language ;", "}", "}", "throw   new   GradleException (  (  (  \" The   requested   build   script   DSL    '  \"     +    name )     +     \"  '    is   not   supported .  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["fromName"], "fileName": "org.gradle.buildinit.plugins.internal.modifiers.BuildInitDsl"}, {"methodBody": ["METHOD_START", "{", "return   name (  )  . toLowerCase (  )  ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.gradle.buildinit.plugins.internal.modifiers.BuildInitDsl"}, {"methodBody": ["METHOD_START", "{", "return   wrapperDistributionType ;", "}", "METHOD_END"], "methodName": ["getWrapperDistributionType"], "fileName": "org.gradle.buildinit.plugins.internal.modifiers.BuildInitDsl"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < String >    supported    =    ImmutableList . builder (  )  ;", "for    (    dsl    :     . values (  )  )     {", "supported . add ( dsl . getId (  )  )  ;", "}", "return   supported . build (  )  ;", "}", "METHOD_END"], "methodName": ["listSupported"], "fileName": "org.gradle.buildinit.plugins.internal.modifiers.BuildInitDsl"}, {"methodBody": ["METHOD_START", "{", "if    ( name    =  =    null )     {", "return    . NONE ;", "}", "for    (    testFramework    :     . values (  )  )     {", "if    ( testFramework . getId (  )  . equals ( name )  )     {", "return   testFramework ;", "}", "}", "throw   new   GradleException (  (  (  \" The   requested   test   framework    '  \"     +    name )     +     \"  '    is   not   supported .  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["fromName"], "fileName": "org.gradle.buildinit.plugins.internal.modifiers.BuildInitTestFramework"}, {"methodBody": ["METHOD_START", "{", "return   name (  )  . toLowerCase (  )  ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.gradle.buildinit.plugins.internal.modifiers.BuildInitTestFramework"}, {"methodBody": ["METHOD_START", "{", "List < String >    result    =    new   ArrayList < String >  (  )  ;", "for    (    testFramework    :     . values (  )  )     {", "if    ( testFramework    !  =     (  . NONE )  )     {", "result . add ( testFramework . getId (  )  )  ;", "}", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["listSupported"], "fileName": "org.gradle.buildinit.plugins.internal.modifiers.BuildInitTestFramework"}, {"methodBody": ["METHOD_START", "{", "return   file (  \" pom . xml \"  )  . exists (  )     ?    BuildInitTypeIds . POM    :    BuildInitTypeIds . BASIC ;", "}", "METHOD_END"], "methodName": ["detectType"], "fileName": "org.gradle.buildinit.tasks.InitBuild"}, {"methodBody": ["METHOD_START", "{", "return   getProject (  )  . file ( path )  ;", "}", "METHOD_END"], "methodName": ["file"], "fileName": "org.gradle.buildinit.tasks.InitBuild"}, {"methodBody": ["METHOD_START", "{", "return   getProjectLayoutRegistry (  )  . getSupportedTypes (  )  ;", "}", "METHOD_END"], "methodName": ["getAvailableBuildTypes"], "fileName": "org.gradle.buildinit.tasks.InitBuild"}, {"methodBody": ["METHOD_START", "{", "return   BuildInitDsl . listSupported (  )  ;", "}", "METHOD_END"], "methodName": ["getAvailableDSLs"], "fileName": "org.gradle.buildinit.tasks.InitBuild"}, {"methodBody": ["METHOD_START", "{", "return   BuildInitTestFramework . listSupported (  )  ;", "}", "METHOD_END"], "methodName": ["getAvailableTestFrameworks"], "fileName": "org.gradle.buildinit.tasks.InitBuild"}, {"methodBody": ["METHOD_START", "{", "return   isNullOrEmpty ( dsl )     ?    BuildInitDsl . GROOVY . getId (  )     :    dsl ;", "}", "METHOD_END"], "methodName": ["getDsl"], "fileName": "org.gradle.buildinit.tasks.InitBuild"}, {"methodBody": ["METHOD_START", "{", "if    (  ( projectLayoutRistry )     =  =    null )     {", "projectLayoutRistry    = etServices (  ) et ( ProjectLayoutSetupRistry . class )  ;", "}", "return   projectLayoutRistry ;", "}", "METHOD_END"], "methodName": ["getProjectLayoutRegistry"], "fileName": "org.gradle.buildinit.tasks.InitBuild"}, {"methodBody": ["METHOD_START", "{", "return   testFramework ;", "}", "METHOD_END"], "methodName": ["getTestFramework"], "fileName": "org.gradle.buildinit.tasks.InitBuild"}, {"methodBody": ["METHOD_START", "{", "return   isNullOrEmpty ( type )     ?    detectType (  )     :    type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.gradle.buildinit.tasks.InitBuild"}, {"methodBody": ["METHOD_START", "{", "this . dsl    =    dsl ;", "}", "METHOD_END"], "methodName": ["setDsl"], "fileName": "org.gradle.buildinit.tasks.InitBuild"}, {"methodBody": ["METHOD_START", "{", "this . projectLayoutRegistry    =    projectLayoutRegistry ;", "}", "METHOD_END"], "methodName": ["setProjectLayoutRegistry"], "fileName": "org.gradle.buildinit.tasks.InitBuild"}, {"methodBody": ["METHOD_START", "{", "this . testFramework    =    testFramework ;", "}", "METHOD_END"], "methodName": ["setTestFramework"], "fileName": "org.gradle.buildinit.tasks.InitBuild"}, {"methodBody": ["METHOD_START", "{", "this . type    =    type ;", "}", "METHOD_END"], "methodName": ["setType"], "fileName": "org.gradle.buildinit.tasks.InitBuild"}, {"methodBody": ["METHOD_START", "{", "final   String   type    =    getType (  )  ;", "InitDsl   dsl    =    InitDsl . fromName ( getDsl (  )  )  ;", "InitTestFramework   testFramework    =    InitTestFramework . fromName ( getTestFramework (  )  )  ;", "final   ProjectLayoutSetupRegistry   projectLayoutRegistry    =    getProjectLayoutRegistry (  )  ;", "if    (  !  ( projectLayoutRegistry . supports ( type )  )  )     {", "String   supportedTypes    =    Joiner . on (  \"  ,     \"  )  . join ( Iterables . transform ( projectLayoutRegistry . getSupportedTypes (  )  ,    new   com . google . common . base . Function < String ,    String >  (  )     {", "@ Override", "public   String   apply ( String   input )     {", "return    (  \"  '  \"     +    input )     +     \"  '  \"  ;", "}", "}  )  )  ;", "throw   new   GradleException (  (  (  (  (  \" The   requested   build   setup   type    '  \"     +    type )     +     \"  '    is   not   supported .    Supported   types :     \"  )     +    supportedTypes )     +     \"  .  \"  )  )  ;", "}", "ProjectInitDescriptor   initDescriptor    =    projectLayoutRegistry . get ( type )  ;", "if    (  (  !  ( testFramework . equals ( InitTestFramework . NONE )  )  )     &  &     (  !  ( initDescriptor . supports ( testFramework )  )  )  )     {", "throw   new   GradleException (  (  (  (  (  \" The   requested   test   framework    '  \"     +     ( testFramework . getId (  )  )  )     +     \"  '    is   not   supported   in    '  \"  )     +    type )     +     \"  '    setup   type \"  )  )  ;", "}", "initDescriptor . generate ( dsl ,    testFramework )  ;", "}", "METHOD_END"], "methodName": ["setupProjectLayout"], "fileName": "org.gradle.buildinit.tasks.InitBuild"}, {"methodBody": ["METHOD_START", "{", "if    (  ( projectInternal . getParent (  )  )     =  =    null )     {", "projectInternal . getTasks (  )  . addPlaceholderAction (  \" init \"  ,    InitBuild . class ,    new    . InitBuildAction (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addInitPlaceholder"], "fileName": "org.gradle.buildinit.tasks.internal.TaskConfiguration"}, {"methodBody": ["METHOD_START", "{", "if    (  ( projectInternal . getParent (  )  )     =  =    null )     {", "projectInternal . getTasks (  )  . addPlaceholderAction (  \" wrapper \"  ,    Wrapper . class ,    new    . WrapperAction (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addWrapperPlaceholder"], "fileName": "org.gradle.buildinit.tasks.internal.TaskConfiguration"}, {"methodBody": ["METHOD_START", "{", "init . setGroup ( TaskConfiguration . GROUP )  ;", "init . setDescription (  \" Initializes   a   new   Gradle   build .  \"  )  ;", "final   Project   project    =    init . getProject (  )  ;", "init . onlyIf ( new   Spec < Task >  (  )     {", "@ Override", "public   boolean   isSatisfiedBy ( Task   element )     {", "Object   skippedMsg    =    TaskConfiguration . reasonToSkip ( project )  ;", "if    ( skippedMsg    !  =    null )     {", "project . getLogger (  )  . warn (  (  ( String )     ( skippedMsg )  )  )  ;", "return   false ;", "}", "return   true ;", "}", "}  )  ;", "init . dependsOn ( new   Callable < String >  (  )     {", "@ Override", "public   String   call (  )    throws   Exception    {", "if    (  ( TaskConfiguration . reasonToSkip ( project )  )     =  =    null )     {", "return    \" wrapper \"  ;", "} else    {", "return   null ;", "}", "}", "}  )  ;", "project . getGradle (  )  . getTaskGraph (  )  . whenReady ( new   Action < TaskExecutionGraph >  (  )     {", "@ Override", "public   void   execute ( TaskExecutionGraph   taskGraph )     {", "if    (  (  ( TaskConfiguration . reasonToSkip ( project )  )     =  =    null )     &  &     ( taskGraph . hasTask ( init )  )  )     {", "TaskConfiguration . wrapperTaskOf ( project )  . setDistributionType ( TaskConfiguration . wrapperDistributionTypeFor ( init . getDsl (  )  )  )  ;", "}", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureInit"], "fileName": "org.gradle.buildinit.tasks.internal.TaskConfiguration"}, {"methodBody": ["METHOD_START", "{", "wrapper . setGroup ( TaskConfiguration . GROUP )  ;", "wrapper . setDescription (  \" Generates   Gradle   wrapper   files .  \"  )  ;", "}", "METHOD_END"], "methodName": ["configureWrapper"], "fileName": "org.gradle.buildinit.tasks.internal.TaskConfiguration"}, {"methodBody": ["METHOD_START", "{", "TaskConfiguration . configureInit ( project . getTasks (  )  . create ( TaskConfiguration . INIT _ BUILD _ TASK _ NAME ,    InitBuild . class )  )  ;", "}", "METHOD_END"], "methodName": ["createInitTask"], "fileName": "org.gradle.buildinit.tasks.internal.TaskConfiguration"}, {"methodBody": ["METHOD_START", "{", "TaskConfiguration . configureWrapper ( project . getTasks (  )  . create (  \" wrapper \"  ,    Wrapper . class )  )  ;", "}", "METHOD_END"], "methodName": ["createWrapperTask"], "fileName": "org.gradle.buildinit.tasks.internal.TaskConfiguration"}, {"methodBody": ["METHOD_START", "{", "for    ( BuildInitDsl   dsl    :    BuildInitDsl . values (  )  )     {", "String   FileName    =    dsl . fileNameFor (  \"  \"  )  ;", "if    ( project . file ( FileName )  . exists (  )  )     {", "return    (  \" The      file    '  \"     +    FileName )     +     \"  '    already   exists .    Skipping      initialization .  \"  ;", "}", "String   settingsFileName    =    dsl . fileNameFor (  \" settings \"  )  ;", "if    ( project . file ( settingsFileName )  . exists (  )  )     {", "return    (  \" The   settings   file    '  \"     +    settingsFileName )     +     \"  '    already   exists .    Skipping      initialization .  \"  ;", "}", "}", "File   File    =    project . getBuildFile (  )  ;", "if    (  ( File    !  =    null )     &  &     ( File . exists (  )  )  )     {", "return    (  \" The      file    \\  '  \"     +     ( File . getName (  )  )  )     +     \"  \\  '    already   exists .    Skipping      initialization .  \"  ;", "}", "if    (  ( project . getSubprojects (  )  . size (  )  )     >     0  )     {", "return    \" This   Gradle   project   appears   to   be   part   of   an   existing   multi - project   Gradle    .    Skipping      initialization .  \"  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["reasonToSkip"], "fileName": "org.gradle.buildinit.tasks.internal.TaskConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   BuildInitDsl . fromName ( dsl )  . getWrapperDistributionType (  )  ;", "}", "METHOD_END"], "methodName": ["wrapperDistributionTypeFor"], "fileName": "org.gradle.buildinit.tasks.internal.TaskConfiguration"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Wrapper )     ( project . getTasks (  )  . getByName (  \" wrapper \"  )  )  )  ;", "}", "METHOD_END"], "methodName": ["wrapperTaskOf"], "fileName": "org.gradle.buildinit.tasks.internal.TaskConfiguration"}]