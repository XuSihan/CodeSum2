[{"methodBody": ["METHOD_START", "{", "CppTestExecutable   testBinary    =    objectFactory . newInstance ( DefaultCppTestExecutable . class ,     (  ( getName (  )  )     +     ( StringUtils . capitalize ( nameSuffix )  )  )  ,    getBaseName (  )  ,    getCppSource (  )  ,    getPrivateHeaderDirs (  )  ,    getImplementationDependencies (  )  ,    getTestedComponent (  )  ,    targetPlatform ,    toolChain ,    platformToolProvider ,    identity )  ;", "this . testBinary . set ( testBinary )  ;", "getBinaries (  )  . add ( testBinary )  ;", "return   testBinary ;", "}", "METHOD_END"], "methodName": ["addExecutable"], "fileName": "org.gradle.nativeplatform.test.cpp.internal.DefaultCppTestSuite"}, {"methodBody": ["METHOD_START", "{", "action . execute ( dependencies )  ;", "}", "METHOD_END"], "methodName": ["dependencies"], "fileName": "org.gradle.nativeplatform.test.cpp.internal.DefaultCppTestSuite"}, {"methodBody": ["METHOD_START", "{", "return   testedComponent ;", "}", "METHOD_END"], "methodName": ["getTestedComponent"], "fileName": "org.gradle.nativeplatform.test.cpp.internal.DefaultCppTestSuite"}, {"methodBody": ["METHOD_START", "{", "writeToFile ( sourceDir ,     \" gradle _ cunit _ main . c \"  )  ;", "writeToFile ( headerDir ,     \" gradle _ cunit _ register . h \"  )  ;", "}", "METHOD_END"], "methodName": ["generate"], "fileName": "org.gradle.nativeplatform.test.cunit.tasks.GenerateCUnitLauncher"}, {"methodBody": ["METHOD_START", "{", "return   headerDir ;", "}", "METHOD_END"], "methodName": ["getHeaderDir"], "fileName": "org.gradle.nativeplatform.test.cunit.tasks.GenerateCUnitLauncher"}, {"methodBody": ["METHOD_START", "{", "return   sourceDir ;", "}", "METHOD_END"], "methodName": ["getSourceDir"], "fileName": "org.gradle.nativeplatform.test.cunit.tasks.GenerateCUnitLauncher"}, {"methodBody": ["METHOD_START", "{", "this . headerDir    =    headerDir ;", "}", "METHOD_END"], "methodName": ["setHeaderDir"], "fileName": "org.gradle.nativeplatform.test.cunit.tasks.GenerateCUnitLauncher"}, {"methodBody": ["METHOD_START", "{", "this . sourceDir    =    sourceDir ;", "}", "METHOD_END"], "methodName": ["setSourceDir"], "fileName": "org.gradle.nativeplatform.test.cunit.tasks.GenerateCUnitLauncher"}, {"methodBody": ["METHOD_START", "{", "final   File   file    =    new   File ( directory ,    fileName )  ;", "GFileUtils . copyURLToFile ( getClass (  )  . getResource ( fileName )  ,    file )  ;", "}", "METHOD_END"], "methodName": ["writeToFile"], "fileName": "org.gradle.nativeplatform.test.cunit.tasks.GenerateCUnitLauncher"}, {"methodBody": ["METHOD_START", "{", "for    ( final   NativeComponentSpec   component    :    components . values (  )  )     {", "final   String   suiteName    =     ( component . getName (  )  )     +     \" Test \"  ;", "testSuites . create ( suiteName ,    testSuiteSpecClass ,    new   api . Action < S >  (  )     {", "@ Override", "public   void   execute ( S   testSuite )     {", "testSuite . testing ( component )  ;", "}", "}  )  ;", "}", "}", "METHOD_END"], "methodName": ["createConventionalTestSuites"], "fileName": "org.gradle.nativeplatform.test.internal.NativeTestSuites"}, {"methodBody": ["METHOD_START", "{", "for    ( final   NativeBinarySpec   testedBinary    :    NativeTestSuites . testedBinariesOf ( testSuite )  )     {", "if    ( testedBinary   instanceof   SharedLibraryBinary )     {", "continue ;", "}", "NativeTestSuites . createNativeTestSuiteBinary ( binaries ,    testSuite ,    testSuiteBinaryClass ,    typeString ,    testedBinary ,    buildDir ,    serviceRegistry )  ;", "}", "}", "METHOD_END"], "methodName": ["createNativeTestSuiteBinaries"], "fileName": "org.gradle.nativeplatform.test.internal.NativeTestSuites"}, {"methodBody": ["METHOD_START", "{", "final   BinaryNamingScheme   namingScheme    =    NativeTestSuites . namingSchemeFor ( testSuite ,     (  ( NativeBinarySpecInternal )     ( testedBinary )  )  ,    typeString )  ;", "final   NativeDependencyResolver   resolver    =    serviceRegistry . get ( NativeDependencyResolver . class )  ;", "binaries . create ( namingScheme . getBinaryName (  )  ,    testSuiteBinaryClass ,    new   Action < S >  (  )     {", "@ Override", "public   void   execute ( S   binary )     {", "final   NativeTestSuiteBinarySpecInternal   testBinary    =     (  ( NativeTestSuiteBinarySpecInternal )     ( binary )  )  ;", "testBinary . setTestedBinary (  (  ( NativeBinarySpecInternal )     ( testedBinary )  )  )  ;", "testBinary . setNamingScheme ( namingScheme )  ;", "testBinary . setResolver ( resolver )  ;", "testBinary . setToolChain ( testedBinary . getToolChain (  )  )  ;", "NativeExecutableFileSpec   executable    =    testBinary . getExecutable (  )  ;", "NativeInstallationSpec   installation    =    testBinary . getInstallation (  )  ;", "executable . setToolChain ( testedBinary . getToolChain (  )  )  ;", "executable . setFile ( executableFileFor ( testBinary ,    buildDir )  )  ;", "installation . setDirectory ( installationDirFor ( testBinary ,    buildDir )  )  ;", "NativeComponents . createInstallTask ( testBinary ,    installation ,    executable ,    namingScheme )  ;", "NativeComponents . createExecutableTask ( testBinary ,    testBinary . getExecutableFile (  )  )  ;", "NativeTestSuites . createRunTask ( testBinary ,    namingScheme . getTaskName (  \" run \"  )  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["createNativeTestSuiteBinary"], "fileName": "org.gradle.nativeplatform.test.internal.NativeTestSuites"}, {"methodBody": ["METHOD_START", "{", "testBinary . getTasks (  )  . create ( name ,    RunTestExecutable . class ,    new   Action < RunTestExecutable >  (  )     {", "@ Override", "public   void   execute ( RunTestExecutable   runTask )     {", "runTask . setDescription (  (  \" Runs   the    \"     +    testBinary )  )  ;", "testBinary . getTasks (  )  . add ( runTask )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["createRunTask"], "fileName": "org.gradle.nativeplatform.test.internal.NativeTestSuites"}, {"methodBody": ["METHOD_START", "{", "return   testedBinary . getNamingScheme (  )  . withComponentName ( testSuite . getBaseName (  )  )  . withBinaryType ( typeString )  . withRole (  \" executable \"  ,    true )  ;", "}", "METHOD_END"], "methodName": ["namingSchemeFor"], "fileName": "org.gradle.nativeplatform.test.internal.NativeTestSuites"}, {"methodBody": ["METHOD_START", "{", "return   NativeTestSuites . testedBinariesWithType ( NativeBinarySpec . class ,    testSuite )  ;", "}", "METHOD_END"], "methodName": ["testedBinariesOf"], "fileName": "org.gradle.nativeplatform.test.internal.NativeTestSuites"}, {"methodBody": ["METHOD_START", "{", "VariantComponentSpec   spec    =     (  ( VariantComponentSpec )     ( testSuite . getTestedComponent (  )  )  )  ;", "if    ( spec    =  =    null )     {", "throw   new   platform . base . InvalidModelException ( String . format (  \" Test   suite    '  % s '    doesn ' t   declare   component   under   test .    Please   specify   it   with    ` testing    $  . components . myComponent `  .  \"  ,    testSuite . getName (  )  )  )  ;", "}", "return   spec . getBinaries (  )  . withType ( type )  . values (  )  ;", "}", "METHOD_END"], "methodName": ["testedBinariesWithType"], "fileName": "org.gradle.nativeplatform.test.internal.NativeTestSuites"}, {"methodBody": ["METHOD_START", "{", "return   ignoreFailures ;", "}", "METHOD_END"], "methodName": ["getIgnoreFailures"], "fileName": "org.gradle.nativeplatform.test.tasks.RunTestExecutable"}, {"methodBody": ["METHOD_START", "{", "return   outputDir ;", "}", "METHOD_END"], "methodName": ["getOutputDir"], "fileName": "org.gradle.nativeplatform.test.tasks.RunTestExecutable"}, {"methodBody": ["METHOD_START", "{", "String   message    =     \" There   were   failing   tests \"  ;", "String   resultsUrl    =    new   ConsoleRenderer (  )  . asClickableFileUrl ( getOutputDir (  )  )  ;", "message    =    message . concat (  (  \"  .    See   the   results   at :     \"     +    resultsUrl )  )  ;", "if    ( isIgnoreFailures (  )  )     {", "getLogger (  )  . warn ( message )  ;", "} else    {", "throw   new   GException ( message ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["handleTestFailures"], "fileName": "org.gradle.nativeplatform.test.tasks.RunTestExecutable"}, {"methodBody": ["METHOD_START", "{", "return   ignoreFailures ;", "}", "METHOD_END"], "methodName": ["isIgnoreFailures"], "fileName": "org.gradle.nativeplatform.test.tasks.RunTestExecutable"}, {"methodBody": ["METHOD_START", "{", "this . ignoreFailures    =    ignoreFailures ;", "}", "METHOD_END"], "methodName": ["setIgnoreFailures"], "fileName": "org.gradle.nativeplatform.test.tasks.RunTestExecutable"}, {"methodBody": ["METHOD_START", "{", "this . outputDir    =    outputDir ;", "}", "METHOD_END"], "methodName": ["setOutputDir"], "fileName": "org.gradle.nativeplatform.test.tasks.RunTestExecutable"}, {"methodBody": ["METHOD_START", "{", "SwiftXCTestBundle   result    =    objectFactory . newInstance ( DefaultSwiftXCTestBundle . class ,     (  ( getName (  )  )     +     ( StringUtils . capitalize ( nameSuffix )  )  )  ,    getModule (  )  ,    false ,    getSwiftSource (  )  ,    getImplementationDependencies (  )  ,    targetPlatform ,    toolChain ,    platformToolProvider ,    identity )  ;", "getBinaries (  )  . add ( result )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["addBundle"], "fileName": "org.gradle.nativeplatform.test.xctest.internal.DefaultSwiftXCTestSuite"}, {"methodBody": ["METHOD_START", "{", "SwiftXCTestExecutable   result    =    objectFactory . newInstance ( DefaultSwiftXCTestExecutable . class ,     (  ( getName (  )  )     +     ( StringUtils . capitalize ( nameSuffix )  )  )  ,    getModule (  )  ,    false ,    getSwiftSource (  )  ,    getImplementationDependencies (  )  ,    targetPlatform ,    toolChain ,    platformToolProvider ,    identity )  ;", "getBinaries (  )  . add ( result )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["addExecutable"], "fileName": "org.gradle.nativeplatform.test.xctest.internal.DefaultSwiftXCTestSuite"}, {"methodBody": ["METHOD_START", "{", "action . execute ( dependencies )  ;", "}", "METHOD_END"], "methodName": ["dependencies"], "fileName": "org.gradle.nativeplatform.test.xctest.internal.DefaultSwiftXCTestSuite"}, {"methodBody": ["METHOD_START", "{", "return   testedComponent ;", "}", "METHOD_END"], "methodName": ["getTestedComponent"], "fileName": "org.gradle.nativeplatform.test.xctest.internal.DefaultSwiftXCTestSuite"}, {"methodBody": ["METHOD_START", "{", "return   descriptorInternal ;", "}", "METHOD_END"], "methodName": ["getDescriptorInternal"], "fileName": "org.gradle.nativeplatform.test.xctest.internal.execution.XCTestDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   messages ;", "}", "METHOD_END"], "methodName": ["getMessages"], "fileName": "org.gradle.nativeplatform.test.xctest.internal.execution.XCTestDescriptor"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getBuildOperationExcecutor"], "fileName": "org.gradle.nativeplatform.test.xctest.internal.execution.XCTestExecuter"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getClock"], "fileName": "org.gradle.nativeplatform.test.xctest.internal.execution.XCTestExecuter"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getExecHandleFactory"], "fileName": "org.gradle.nativeplatform.test.xctest.internal.execution.XCTestExecuter"}, {"methodBody": ["METHOD_START", "{", "return   new   LongIdGenerator (  )  ;", "}", "METHOD_END"], "methodName": ["getIdGenerator"], "fileName": "org.gradle.nativeplatform.test.xctest.internal.execution.XCTestExecuter"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getTimeProvider"], "fileName": "org.gradle.nativeplatform.test.xctest.internal.execution.XCTestExecuter"}, {"methodBody": ["METHOD_START", "{", "if    ( testFilter . contains (  \"  /  \"  )  )     {", "throw   new   IllegalArgumentException ( String . format (  \"  '  % s '    is   an   invalid   pattern .    Patterns   cannot   contain   forward   slash .  \"  ,    testFilter )  )  ;", "}", "return   testFilter ;", "}", "METHOD_END"], "methodName": ["disallowForwardSlash"], "fileName": "org.gradle.nativeplatform.test.xctest.internal.execution.XCTestSelection"}, {"methodBody": ["METHOD_START", "{", "return   ImmutableList . copyOf ( includedTests )  ;", "}", "METHOD_END"], "methodName": ["getIncludedTests"], "fileName": "org.gradle.nativeplatform.test.xctest.internal.execution.XCTestSelection"}, {"methodBody": ["METHOD_START", "{", "return   StringUtils . split ( includedTestCase ,     '  /  '  )  [  0  ]  ;", "}", "METHOD_END"], "methodName": ["getTestSuiteName"], "fileName": "org.gradle.nativeplatform.test.xctest.internal.execution.XCTestSelection"}, {"methodBody": ["METHOD_START", "{", "if    ( includedTests . isEmpty (  )  )     {", "includedTests . add (  . INCLUDE _ ALL _ TESTS )  ;", "}", "}", "METHOD_END"], "methodName": ["includeAllTestIfEmpty"], "fileName": "org.gradle.nativeplatform.test.xctest.internal.execution.XCTestSelection"}, {"methodBody": ["METHOD_START", "{", "return   includedTest . contains (  \"  /  \"  )  ;", "}", "METHOD_END"], "methodName": ["isIncludedTestCase"], "fileName": "org.gradle.nativeplatform.test.xctest.internal.execution.XCTestSelection"}, {"methodBody": ["METHOD_START", "{", "String [  ]    tokens    =    StringUtils . splitPreserveAllTokens ( testFilter ,     '  .  '  )  ;", "if    (  ( tokens . length )     >     3  )     {", "throw   new   IllegalArgumentException ( String . format (  \"  '  % s '    is   an   invalid   pattern .    Patterns   should   have   one   or   two   dots .  \"  ,    testFilter )  )  ;", "} else", "if    (  ( tokens . length )     =  =     3  )     {", "if    (  . WILDCARD . equals ( tokens [  2  ]  )  )     {", "String   filter    =     (  ( tokens [  0  ]  )     +     \"  .  \"  )     +     ( tokens [  1  ]  )  ;", "testSuiteCache . add ( filter )  ;", "return   filter ;", "} else", "if    ( tokens [  2  ]  . isEmpty (  )  )     {", "return   testFilter ;", "}", "return    (  (  (  ( tokens [  0  ]  )     +     \"  .  \"  )     +     ( tokens [  1  ]  )  )     +     \"  /  \"  )     +     ( tokens [  2  ]  )  ;", "} else", "if    (  (  ( tokens . length )     =  =     2  )     &  &     (  !  (  . WILDCARD . equals ( tokens [  1  ]  )  )  )  )     {", "testSuiteCache . add ( testFilter )  ;", "}", "return   testFilter ;", "}", "METHOD_END"], "methodName": ["prepareIncludedTest"], "fileName": "org.gradle.nativeplatform.test.xctest.internal.execution.XCTestSelection"}, {"methodBody": ["METHOD_START", "{", "for    ( String   testFilter    :    testFilters )     {", "includedTests . add ( prepareIncludedTest ( disallowForwardSlash ( testFilter )  ,    testSuiteCache )  )  ;", "}", "}", "METHOD_END"], "methodName": ["prepareIncludedTestList"], "fileName": "org.gradle.nativeplatform.test.xctest.internal.execution.XCTestSelection"}, {"methodBody": ["METHOD_START", "{", "for    ( Iterator < String >    it    =    includedTests . iterator (  )  ;    it . hasNext (  )  ;  )     {", "String   includedTest    =    it . next (  )  ;", "if    (  . isIncludedTestCase ( includedTest )  )     {", "if    ( testSuiteCache . contains (  . getTestSuiteName ( includedTest )  )  )     {", "it . remove (  )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["removeLogicalDuplication"], "fileName": "org.gradle.nativeplatform.test.xctest.internal.execution.XCTestSelection"}, {"methodBody": ["METHOD_START", "{", "return   path ;", "}", "METHOD_END"], "methodName": ["getPath"], "fileName": "org.gradle.nativeplatform.test.xctest.internal.execution.XCTestTestExecutionSpec"}, {"methodBody": ["METHOD_START", "{", "return   runScript ;", "}", "METHOD_END"], "methodName": ["getRunScript"], "fileName": "org.gradle.nativeplatform.test.xctest.internal.execution.XCTestTestExecutionSpec"}, {"methodBody": ["METHOD_START", "{", "return   testSelection ;", "}", "METHOD_END"], "methodName": ["getTestSelection"], "fileName": "org.gradle.nativeplatform.test.xctest.internal.execution.XCTestTestExecutionSpec"}, {"methodBody": ["METHOD_START", "{", "return   workingDir ;", "}", "METHOD_END"], "methodName": ["getWorkingDir"], "fileName": "org.gradle.nativeplatform.test.xctest.internal.execution.XCTestTestExecutionSpec"}, {"methodBody": ["METHOD_START", "{", "if    ( binary   instanceof   SwiftXCTestBundle )     {", "TaskContainer   tasks    =    project . getTasks (  )  ;", "final   Names   names    =    binary . getNames (  )  ;", "SwiftCompile   compile    =    binary . getCompileTask (  )  . get (  )  ;", "DefaultNativeP   currentP    =    new   DefaultNativeP (  \" current \"  )  ;", "final   ModelRegistry   modelRegistry    =    project . getModelRegistry (  )  ;", "NativeToolChain   toolChain    =    modelRegistry . realize (  \" toolChains \"  ,    NativeToolChainRegistryInternal . class )  . getForP ( currentP )  ;", "compile . getCompilerArgs (  )  . addAll ( project . provider ( new   Callable < List < String >  >  (  )     {", "@ Override", "public   List < String >    call (  )     {", "File   frameworkDir    =    new   File ( sdkPPathLocator . find (  )  ,     \" Developer / Library / Frameworks \"  )  ;", "return   Arrays . asList (  \"  - parse - as - library \"  ,     (  \"  - F \"     +     ( frameworkDir . getAbsolutePath (  )  )  )  )  ;", "}", "}  )  )  ;", "final   LinkMachOBundle   link    =    tasks . create ( names . getTaskName (  \" link \"  )  ,    LinkMachOBundle . class )  ;", "link . getLinkerArgs (  )  . set ( project . provider ( new   Callable < List < String >  >  (  )     {", "@ Override", "public   List < String >    call (  )     {", "File   frameworkDir    =    new   File ( sdkPPathLocator . find (  )  ,     \" Developer / Library / Frameworks \"  )  ;", "return   Lists . newArrayList (  (  \"  - F \"     +     ( frameworkDir . getAbsolutePath (  )  )  )  ,     \"  - framework \"  ,     \" XCTest \"  ,     \"  - Xlinker \"  ,     \"  - rpath \"  ,     \"  - Xlinker \"  ,     \"  @ executable _ path /  .  .  / Frameworks \"  ,     \"  - Xlinker \"  ,     \"  - rpath \"  ,     \"  - Xlinker \"  ,     \"  @ loader _ path /  .  .  / Frameworks \"  )  ;", "}", "}  )  )  ;", "InstallXCTestBundle   install    =    tasks . create ( names . getTaskName (  \" install \"  )  ,    InstallXCTestBundle . class )  ;", "install . getBundleBinaryFile (  )  . set ( link . getLinkedFile (  )  )  ;", "install . getInstallDirectory (  )  . set ( project . getLayout (  )  . getBuildDirectory (  )  . dir (  (  \" install /  \"     +     ( names . getDirName (  )  )  )  )  )  ;", "binary . getInstallDirectory (  )  . set ( install . getInstallDirectory (  )  )  ;", "link . source ( binary . getObjects (  )  )  ;", "link . lib ( binary . getLinkLibraries (  )  )  ;", "final   PToolProvider   toolProvider    =     (  ( NativeToolChainInternal )     ( toolChain )  )  . select ( currentP )  ;", "Provider < RegularFile >    exeLocation    =    project . getLayout (  )  . getBuildDirectory (  )  . file ( project . getProviders (  )  . provider ( new   Callable < String >  (  )     {", "@ Override", "public   String   call (  )     {", "return   toolProvider . getExecutableName (  (  (  \" exe /  \"     +     ( names . getDirName (  )  )  )     +     ( binary . getBaseName (  )  . get (  )  )  )  )  ;", "}", "}  )  )  ;", "link . getLinkedFile (  )  . set ( exeLocation )  ;", "link . getTargetP (  )  . set ( currentP )  ;", "link . getToolChain (  )  . set ( toolChain )  ;", "link . getDebuggable (  )  . set ( binary . isDebuggable (  )  )  ;", "binary . getExecutableFile (  )  . set ( link . getLinkedFile (  )  )  ;", "DefaultSwiftXCTestBundle   bundle    =     (  ( DefaultSwiftXCTestBundle )     ( binary )  )  ;", "bundle . getLinkTask (  )  . set ( link )  ;", "bundle . getRunScriptFile (  )  . set ( install . getRunScriptFile (  )  )  ;", "} else    {", "DefaultSwiftXCTestExecutable   executable    =     (  ( DefaultSwiftXCTestExecutable )     ( binary )  )  ;", "executable . getRunScriptFile (  )  . set ( executable . getInstallTask (  )  . get (  )  . getRunScriptFile (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["configureTestSuiteBuildingTasks"], "fileName": "org.gradle.nativeplatform.test.xctest.plugins.XCTestConventionPlugin"}, {"methodBody": ["METHOD_START", "{", "SwiftComponent   target    =    testSuite . getTestedComponent (  )  . getOrNull (  )  ;", "if    (  !  ( target   instanceof   ProductionSwiftComponent )  )     {", "return ;", "}", "final   ProductionSwiftComponent   testedComponent    =     (  ( ProductionSwiftComponent )     ( target )  )  ;", "final   TaskContainer   tasks    =    project . getTasks (  )  ;", "testedComponent . getBinaries (  )  . whenElementFinalized ( new   api . Action < SwiftBinary >  (  )     {", "@ Override", "public   void   execute ( SwiftBinary   testedBinary )     {", "if    ( testedBinary    !  =     ( testedComponent . getDevelopmentBinary (  )  . get (  )  )  )     {", "return ;", "}", "if    (  ( testSuite . getSourceCompatibility (  )  . getOrNull (  )  )     =  =    null )     {", "testExecutable . getSourceCompatibility (  )  . set ( testedBinary . getSourceCompatibility (  )  )  ;", "}", "final   AbstractLinkTask   linkTest    =    testExecutable . getLinkTask (  )  . get (  )  ;", "if    ( testedComponent   instanceof   SwiftApplication )     {", "final   UnexportMainSymbol   unexportMainSymbol    =    tasks . create (  \" relocateMainForTest \"  ,    UnexportMainSymbol . class )  ;", "unexportMainSymbol . source ( testedBinary . getObjects (  )  )  ;", "linkTest . source ( testedBinary . getObjects (  )  . filter ( new   api . specs . Spec < File >  (  )     {", "@ Override", "public   boolean   isSatisfiedBy ( File   objectFile )     {", "return    !  ( objectFile . equals ( unexportMainSymbol . getMainObject (  )  )  )  ;", "}", "}  )  )  ;", "linkTest . source ( unexportMainSymbol . getObjects (  )  )  ;", "} else    {", "linkTest . source ( testedBinary . getObjects (  )  )  ;", "}", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configureTestSuiteWithTestedComponentWhenAvailable"], "fileName": "org.gradle.nativeplatform.test.xctest.plugins.XCTestConventionPlugin"}, {"methodBody": ["METHOD_START", "{", "testTask . getTestInstallDirectory (  )  . set ( binary . getInstallDirectory (  )  )  ;", "testTask . getRunScriptFile (  )  . set ( binary . getRunScriptFile (  )  )  ;", "testTask . getWorkingDirectory (  )  . set ( binary . getInstallDirectory (  )  )  ;", "}", "METHOD_END"], "methodName": ["configureTestingTask"], "fileName": "org.gradle.nativeplatform.test.xctest.plugins.XCTestConventionPlugin"}, {"methodBody": ["METHOD_START", "{", "if    ( isDimensionVisible ( multivalueProperty )  )     {", "return   StringUtils . capitalize ( dimensionValue . getName (  )  . toLowerCase (  )  )  ;", "}", "return    \"  \"  ;", "}", "METHOD_END"], "methodName": ["createDimensionSuffix"], "fileName": "org.gradle.nativeplatform.test.xctest.plugins.XCTestConventionPlugin"}, {"methodBody": ["METHOD_START", "{", "DefaultSwiftXCTestSuite   testSuite    =    componentFactory . newInstance ( SwiftXCTestSuite . class ,    DefaultSwiftXCTestSuite . class ,     \" test \"  )  ;", "project . getExtensions (  )  . add ( SwiftXCTestSuite . class ,     \" xctest \"  ,    testSuite )  ;", "project . getComponents (  )  . add ( testSuite )  ;", "testSuite . getModule (  )  . set ( GUtil . toCamelCase (  (  ( project . getName (  )  )     +     \" Test \"  )  )  )  ;", "return   testSuite ;", "}", "METHOD_END"], "methodName": ["createTestSuite"], "fileName": "org.gradle.nativeplatform.test.xctest.plugins.XCTestConventionPlugin"}, {"methodBody": ["METHOD_START", "{", "TaskContainer   tasks    =    project . getTasks (  )  ;", "testTask    =    tasks . create (  \" xcTest \"  ,     . class )  ;", "testTask . setGroup ( VERIFICATION _ GROUP )  ;", "testTask . setDescription (  \" Executes      suites \"  )  ;", "return   testTask ;", "}", "METHOD_END"], "methodName": ["createTestingTask"], "fileName": "org.gradle.nativeplatform.test.xctest.plugins.XCTestConventionPlugin"}, {"methodBody": ["METHOD_START", "{", "return    ( multivalueProperty . size (  )  )     >     1  ;", "}", "METHOD_END"], "methodName": ["isDimensionVisible"], "fileName": "org.gradle.nativeplatform.test.xctest.plugins.XCTestConventionPlugin"}, {"methodBody": ["METHOD_START", "{", "RegularFile   bundle    =    getBundleBinaryFile (  )  . get (  )  ;", "File   bundleFile    =    bundle . getAsFile (  )  ;", "if    (  !  ( bundleFile . exists (  )  )  )     {", "return   null ;", "}", "return   bundleFile ;", "}", "METHOD_END"], "methodName": ["getBundleBinary"], "fileName": "org.gradle.nativeplatform.test.xctest.tasks.InstallXCTestBundle"}, {"methodBody": ["METHOD_START", "{", "return   bundleBinaryFile ;", "}", "METHOD_END"], "methodName": ["getBundleBinaryFile"], "fileName": "org.gradle.nativeplatform.test.xctest.tasks.InstallXCTestBundle"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getFileOperations"], "fileName": "org.gradle.nativeplatform.test.xctest.tasks.InstallXCTestBundle"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getFileSystem"], "fileName": "org.gradle.nativeplatform.test.xctest.tasks.InstallXCTestBundle"}, {"methodBody": ["METHOD_START", "{", "return   installDirectory ;", "}", "METHOD_END"], "methodName": ["getInstallDirectory"], "fileName": "org.gradle.nativeplatform.test.xctest.tasks.InstallXCTestBundle"}, {"methodBody": ["METHOD_START", "{", "return   installDirectory . file ( getProject (  )  . provider ( new   Callable < CharSequence >  (  )     {", "@ Override", "public   CharSequence   call (  )    throws   Exception    {", "return   FilenameUtils . removeExtension ( bundleBinaryFile . get (  )  . getAsFile (  )  . getName (  )  )  ;", "}", "}  )  )  ;", "}", "METHOD_END"], "methodName": ["getRunScriptFile"], "fileName": "org.gradle.nativeplatform.test.xctest.tasks.InstallXCTestBundle"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getSwiftStdlibToolLocator"], "fileName": "org.gradle.nativeplatform.test.xctest.tasks.InstallXCTestBundle"}, {"methodBody": ["METHOD_START", "{", "File   bundleFile    =    bundleBinaryFile . get (  )  . getAsFile (  )  ;", "File   bundleDir    =    installDirectory . get (  )  . file (  (  ( bundleFile . getName (  )  )     +     \"  \"  )  )  . getAsFile (  )  ;", "installToDir ( bundleDir ,    bundleFile )  ;", "File   runScript    =    getRunScriptFile (  )  . get (  )  . getAsFile (  )  ;", "String   runScriptText    =     (  (  (  \"  #  !  / bin / sh \"     +     (  (  \"  \\ nAPP _ BASE _ NAME =  ` dirname    \\  \"  $  0  \\  \"  `  \"     +     \"  \\ nXCTEST _ LOCATION =  ` xcrun    -  - find `  \"  )     +     \"  \\ nexec    \\  \"  $ XCTEST _ LOCATION \\  \"     \\  \"  $  @  \\  \"     \\  \"  $ APP _ BASE _ NAME /  \"  )  )     +     ( bundleDir . getName (  )  )  )     +     \"  \\  \"  \"  )     +     \"  \\ n \"  ;", "GFileUtils . writeFile ( runScriptText ,    runScript )  ;", "getFileSystem (  )  . chmod ( runScript ,     4  9  3  )  ;", "}", "METHOD_END"], "methodName": ["install"], "fileName": "org.gradle.nativeplatform.test.xctest.tasks.InstallXCTestBundle"}, {"methodBody": ["METHOD_START", "{", "getFileOperations (  )  . sync ( new   Action < CopySpec >  (  )     {", "@ Override", "public   void   execute ( CopySpec   copySpec )     {", "copySpec . from ( bundleFile ,    new   Action < CopySpec >  (  )     {", "@ Override", "public   void   execute ( CopySpec   copySpec )     {", "copySpec . into (  \" Contents / MacOS \"  )  ;", "}", "}  )  ;", "copySpec . into ( bundleDir )  ;", "}", "}  )  ;", "File   outputFile    =    new   File ( bundleDir ,     \" Contents / Info . plist \"  )  ;", "Files . write (  (  \"  <  ? xml   version =  \\  \"  1  .  0  \\  \"    encoding =  \\  \" UTF -  8  \\  \"  ?  >  \\ n \"     +     (  (  (  \"  <  ! DOCTYPE   plist   PUBLIC    \\  \"  -  /  / Apple /  / DTD   PLIST    1  .  0  /  / EN \\  \"     \\  \" http :  /  / www . apple . com / DTDs / PropertyList -  1  .  0  . dtd \\  \"  >  \\ n \"     +     \"  < plist   version =  \\  \"  1  .  0  \\  \"  >  \\ n \"  )     +     \"  < dict /  >  \\ n \"  )     +     \"  <  / plist >  \"  )  )  ,    outputFile ,    Charset . forName (  \" UTF -  8  \"  )  )  ;", "getProject (  )  . exec ( new   Action < ExecSpec >  (  )     {", "@ Override", "public   void   execute ( ExecSpec   execSpec )     {", "execSpec . setWorkingDir ( bundleDir )  ;", "execSpec . executable ( getSwiftStdlibToolLocator (  )  . find (  )  )  ;", "execSpec . args (  \"  -  - copy \"  ,     \"  -  - scan - executable \"  ,    bundleFile . getAbsolutePath (  )  ,     \"  -  - destination \"  ,    new   File ( bundleDir ,     \" Contents / Frameworks \"  )  . getAbsolutePath (  )  ,     \"  -  - platform \"  ,     \" macosx \"  ,     \"  -  - resource - destination \"  ,    new   File ( bundleDir ,     \" Contents / Resources \"  )  . getAbsolutePath (  )  ,     \"  -  - scan - folder \"  ,    new   File ( bundleDir ,     \" Contents / Frameworks \"  )  . getAbsolutePath (  )  )  ;", "}", "}  )  . assertNormalExitValue (  )  ;", "}", "METHOD_END"], "methodName": ["installToDir"], "fileName": "org.gradle.nativeplatform.test.xctest.tasks.InstallXCTestBundle"}, {"methodBody": ["METHOD_START", "{", "RegularFirunScript    =    getRunScriptFi )  . get (  )  ;", "FirunScriptFi =    runScript . getAsFi )  ;", "if    (  !  ( runScriptFiexists (  )  )  )     {", "return   null ;", "}", "return   runScriptFi", "}", "METHOD_END"], "methodName": ["getRunScript"], "fileName": "org.gradle.nativeplatform.test.xctest.tasks.XCTest"}, {"methodBody": ["METHOD_START", "{", "return   runScriptFile ;", "}", "METHOD_END"], "methodName": ["getRunScriptFile"], "fileName": "org.gradle.nativeplatform.test.xctest.tasks.XCTest"}, {"methodBody": ["METHOD_START", "{", "return   testInstallDirectory ;", "}", "METHOD_END"], "methodName": ["getTestInstallDirectory"], "fileName": "org.gradle.nativeplatform.test.xctest.tasks.XCTest"}, {"methodBody": ["METHOD_START", "{", "return   workingDirectory ;", "}", "METHOD_END"], "methodName": ["getWorkingDirectory"], "fileName": "org.gradle.nativeplatform.test.xctest.tasks.XCTest"}]