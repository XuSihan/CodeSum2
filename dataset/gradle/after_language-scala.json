[{"methodBody": ["METHOD_START", "{", "return   scalaClasspath ;", "}", "METHOD_END"], "methodName": ["getScalaClasspath"], "fileName": "org.gradle.api.internal.tasks.scala.DefaultScalaJavaJointCompileSpec"}, {"methodBody": ["METHOD_START", "{", "return   zincClasspath ;", "}", "METHOD_END"], "methodName": ["getZincClasspath"], "fileName": "org.gradle.api.internal.tasks.scala.DefaultScalaJavaJointCompileSpec"}, {"methodBody": ["METHOD_START", "{", "this . scalaClasspath    =    scalaClasspath ;", "}", "METHOD_END"], "methodName": ["setScalaClasspath"], "fileName": "org.gradle.api.internal.tasks.scala.DefaultScalaJavaJointCompileSpec"}, {"methodBody": ["METHOD_START", "{", "this . options    =    options ;", "}", "METHOD_END"], "methodName": ["setScalaCompileOptions"], "fileName": "org.gradle.api.internal.tasks.scala.DefaultScalaJavaJointCompileSpec"}, {"methodBody": ["METHOD_START", "{", "this . zincClasspath    =    zincClasspath ;", "}", "METHOD_END"], "methodName": ["setZincClasspath"], "fileName": "org.gradle.api.internal.tasks.scala.DefaultScalaJavaJointCompileSpec"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   delegate . execute ( spec )  ;", "}    catch    ( CompilationFailedException   e )     {", "if    (  ( spec . getCompileOptions (  )  . isFailOnError (  )  )     &  &     ( spec . getScalaCompileOptions (  )  . isFailOnError (  )  )  )     {", "throw   e ;", "}", ". LOGGER . debug (  \" Ignoring   compilation   failure .  \"  )  ;", "return   WorkResults . didWork ( false )  ;", "}", "}", "METHOD_END"], "methodName": ["delegateAndHandleErrors"], "fileName": "org.gradle.api.internal.tasks.scala.NormalizingScalaCompiler"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( NormalizingScalaCompiler . LOGGER . isDebugEnabled (  )  )  )     {", "return ;", "}", "List < String >    compilerArgs    =    new   JavaCompilerArgumentsBuilder ( spec )  . includeLauncherOptions ( true )  . includeSourceFiles ( true )  . build (  )  ;", "String   joinedArgs    =    Joiner . on (  '     '  )  . join ( compilerArgs )  ;", "NormalizingScalaCompiler . LOGGER . debug (  \" Java   compiler   arguments :     {  }  \"  ,    joinedArgs )  ;", "}", "METHOD_END"], "methodName": ["logCompilerArguments"], "fileName": "org.gradle.api.internal.tasks.scala.NormalizingScalaCompiler"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( spec . getScalaCompileOptions (  )  . isListFiles (  )  )  )     {", "return ;", "}", "StringBuilder   builder    =    new   StringBuilder (  )  ;", "builder . append (  \" Source   files   to   be   compiled :  \"  )  ;", "for    ( File   file    :    spec . getSource (  )  )     {", "builder . append (  '  \\ n '  )  ;", "builder . append ( file )  ;", "}", ". LOGGER . quiet ( builder . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["logSourceFiles"], "fileName": "org.gradle.api.internal.tasks.scala.NormalizingScalaCompiler"}, {"methodBody": ["METHOD_START", "{", "spec . setSource ( new   SimpleFileCollection ( spec . getSource (  )  . getFiles (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveAndFilterSourceFiles"], "fileName": "org.gradle.api.internal.tasks.scala.NormalizingScalaCompiler"}, {"methodBody": ["METHOD_START", "{", "List < File >    classPath    =    Lists . newArrayList ( spec . getCompileClasspath (  )  )  ;", "classPath . add ( spec . getDestinationDir (  )  )  ;", "spec . setCompileClasspath ( classPath )  ;", "if    (  . LOGGER . isDebugEnabled (  )  )     {", ". LOGGER . debug (  \" Class   path :     {  }  \"  ,    spec . getCompileClasspath (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["resolveClasspath"], "fileName": "org.gradle.api.internal.tasks.scala.NormalizingScalaCompiler"}, {"methodBody": ["METHOD_START", "{", "spec . getCompileOptions (  )  . setCompilerArgs ( CollectionUtils . toStringList ( spec . getCompileOptions (  )  . getCompilerArgs (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveNonStringsInCompilerArgs"], "fileName": "org.gradle.api.internal.tasks.scala.NormalizingScalaCompiler"}, {"methodBody": ["METHOD_START", "{", "if    ( value    !  =    null )     {", "result . add (  ( name    +     ( value . toString (  )  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addConcatenatedOption"], "fileName": "org.gradle.api.internal.tasks.scala.ZincScalaCompilerArgumentsGenerator"}, {"methodBody": ["METHOD_START", "{", "if    ( value )     {", "result . add ( name )  ;", "}", "}", "METHOD_END"], "methodName": ["addFlag"], "fileName": "org.gradle.api.internal.tasks.scala.ZincScalaCompilerArgumentsGenerator"}, {"methodBody": ["METHOD_START", "{", "if    ( value    !  =    null )     {", "result . add ( name )  ;", "result . add ( value . toString (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addOption"], "fileName": "org.gradle.api.internal.tasks.scala.ZincScalaCompilerArgumentsGenerator"}, {"methodBody": ["METHOD_START", "{", "List < String >    result    =    Lists . newArrayList (  )  ;", "BaseOptions   options    =    spec . getOptions (  )  ;", "addFlag (  \"  - deprecation \"  ,    options . isDeprecation (  )  ,    result )  ;", "addFlag (  \"  - unchecked \"  ,    options . isUnchecked (  )  ,    result )  ;", "addConcatenatedOption (  \"  - g :  \"  ,    options . getDebugLevel (  )  ,    result )  ;", "addFlag (  \"  - optimise \"  ,    options . isOptimize (  )  ,    result )  ;", "addOption (  \"  - encoding \"  ,    options . getEncoding (  )  ,    result )  ;", "addFlag (  \"  - verbose \"  ,     \" verbose \"  . equals ( options . getDebugLevel (  )  )  ,    result )  ;", "addFlag (  \"  - Ydebug \"  ,     \" debug \"  . equals ( options . getDebugLevel (  )  )  ,    result )  ;", "if    (  ( options . getLoggingPhases (  )  )     !  =    null )     {", "for    ( String   phase    :    options . getLoggingPhases (  )  )     {", "addConcatenatedOption (  \"  - Ylog :  \"  ,    phase ,    result )  ;", "}", "}", "if    (  ( options . getAdditionalParameters (  )  )     !  =    null )     {", "result . addAll ( options . getAdditionalParameters (  )  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["generate"], "fileName": "org.gradle.api.internal.tasks.scala.ZincScalaCompilerArgumentsGenerator"}, {"methodBody": ["METHOD_START", "{", "return   Compiler . compilerCache (  )  . get ( setup ,    new   AbstractFunction 0  < Compiler >  (  )     {", "public   com . typesafe . zinc . Compiler   apply (  )     {", "ScalaInstance   instance    =    com . typesafe . zinc . Compiler . scalaInstance ( setup )  ;", "File   interfaceJar    =    getCompilerInterface ( setup ,    instance ,    zincCache ,    logger )  ;", "AnalyzingCompiler   scalac    =    com . typesafe . zinc . Compiler . new ( instance ,    interfaceJar ,    logger )  ;", "JavaCompiler   javac    =    com . typesafe . zinc . Compiler . newJavaCompiler ( instance ,    setup . javaHome (  )  ,    setup . forkJava (  )  )  ;", "return   new   com . typesafe . zinc . Compiler ( scalac ,    javac )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["createCompiler"], "fileName": "org.gradle.api.internal.tasks.scala.ZincScalaCompilerFactory"}, {"methodBody": ["METHOD_START", "{", "File   zincCacheHomeDir    =    new   File ( System . getProperty ( ZincScalaCompilerUtil . ZINC _ CACHE _ HOME _ DIR _ SYSTEM _ PROPERTY ,    gradleUserHome . getAbsolutePath (  )  )  )  ;", "CacheRepository   cacheRepository    =     . ZincCompilerServices . getInstance ( zincCacheHomeDir )  . get ( CacheRepository . class )  ;", "String   zincVersion    =    Setup . zincVersion (  )  . published (  )  ;", "String   zincCacheKey    =    String . format (  \" zinc -  % s \"  ,    zincVersion )  ;", "String   zincCacheName    =    String . format (  \" Zinc    % s   compiler   cache \"  ,    zincVersion )  ;", "final   PersistentCache   zincCache    =    cacheRepository . cache ( zincCacheKey )  . withDisplayName ( zincCacheName )  . withLockOptions ( mode ( Exclusive )  )  . open (  )  ;", "Compiler   compiler ;", "try    {", "final   File   cacheDir    =    zincCache . getBaseDir (  )  ;", "final   String   userSuppliedZincDir    =    System . getProperty (  \" zinc . dir \"  )  ;", "if    (  ( userSuppliedZincDir    !  =    null )     &  &     (  !  ( userSuppliedZincDir . equals ( cacheDir . getAbsolutePath (  )  )  )  )  )     {", ". LOGGER . warn ( ZincScalaCompilerUtil . ZINC _ DIR _ IGNORED _ MESSAGE )  ;", "}", "compiler    =    SystemProperties . getInstance (  )  . withSystemProperty ( ZincScalaCompilerUtil . ZINC _ DIR _ SYSTEM _ PROPERTY ,    cacheDir . getAbsolutePath (  )  ,    new   Factory < Compiler >  (  )     {", "@ Override", "public   Compiler   create (  )     {", "Setup   zincSetup    =     . createZincSetup ( scalaClasspath ,    zincClasspath ,    logger )  ;", "return    . createCompiler ( zincSetup ,    zincCache ,    logger )  ;", "}", "}  )  ;", "}    finally    {", "zincCache . close (  )  ;", "}", "return   compiler ;", "}", "METHOD_END"], "methodName": ["createParallelSafeCompiler"], "fileName": "org.gradle.api.internal.tasks.scala.ZincScalaCompilerFactory"}, {"methodBody": ["METHOD_START", "{", "ScalaLocation   scalaLocation    =    ScalaLocation . fromPath ( Lists . newArrayList ( scalaClasspath )  )  ;", "SbtJars   sbtJars    =    SbtJars . fromPath ( Lists . newArrayList ( zincClasspath )  )  ;", "Setup   setup    =    Setup . create ( scalaLocation ,    sbtJars ,    Jvm . current (  )  . getJavaHome (  )  ,    true )  ;", "if    (  . LOGGER . isDebugEnabled (  )  )     {", "Setup . debug ( setup ,    logger )  ;", "}", "return   setup ;", "}", "METHOD_END"], "methodName": ["createZincSetup"], "fileName": "org.gradle.api.internal.tasks.scala.ZincScalaCompilerFactory"}, {"methodBody": ["METHOD_START", "{", "final   String   sbtInterfaceFileName    =     ( Compiler . interfaceId ( instance . actualVersion (  )  )  )     +     \"  . jar \"  ;", "final   File   compilerInterface    =    new   File ( setup . cacheDir (  )  ,    sbtInterfaceFileName )  ;", "if    ( compilerInterface . exists (  )  )     {", "return   zincCache . useCache ( new   Factory < File >  (  )     {", "@ Override", "public   File   create (  )     {", "return   compilerInterface ;", "}", "}  )  ;", "}", "try    {", "final   File   tmpDir    =    new   File ( zincCache . getBaseDir (  )  ,     \" tmp \"  )  ;", "tmpDir . mkdirs (  )  ;", "final   File   tempFile    =    File . createTempFile (  \" zinc \"  ,     \"  . jar \"  ,    tmpDir )  ;", "final   Timer   timer    =    Time . startTimer (  )  ;", "IC . compileInterfaceJar ( sbtInterfaceFileName ,    setup . compilerInterfaceSrc (  )  ,    tempFile ,    setup . sbtInterface (  )  ,    instance ,    logger )  ;", "final   String   interfaceCompletedMessage    =    String . format (  \" Zinc   interface   compilation   took    % s \"  ,    timer . getElapsed (  )  )  ;", "if    (  ( timer . getElapsedMillis (  )  )     >     3  0  0  0  0  )     {", ". LOGGER . warn ( interfaceCompletedMessage )  ;", "} else    {", ". LOGGER . debug ( interfaceCompletedMessage )  ;", "}", "return   zincCache . useCache ( new   Factory < File >  (  )     {", "public   File   create (  )     {", "if    (  !  ( compilerInterface . exists (  )  )  )     {", "GFileUtils . moveFile ( tempFile ,    compilerInterface )  ;", "} else    {", "GFileUtils . deleteQuietly ( tempFile )  ;", "}", "return   compilerInterface ;", "}", "}  )  ;", "}    catch    ( IOException   e )     {", "return   zincCache . useCache ( new   Factory < File >  (  )     {", "public   File   create (  )     {", "return   Compiler . compilerInterface ( setup ,    instance ,    logger )  ;", "}", "}  )  ;", "}", "}", "METHOD_END"], "methodName": ["getCompilerInterface"], "fileName": "org.gradle.api.internal.tasks.scala.ZincScalaCompilerFactory"}, {"methodBody": ["METHOD_START", "{", "return   analysisFile ;", "}", "METHOD_END"], "methodName": ["getAnalysisFile"], "fileName": "org.gradle.api.tasks.scala.IncrementalCompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   publishedCode ;", "}", "METHOD_END"], "methodName": ["getPublishedCode"], "fileName": "org.gradle.api.tasks.scala.IncrementalCompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . analysisFile    =    analysisFile ;", "}", "METHOD_END"], "methodName": ["setAnalysisFile"], "fileName": "org.gradle.api.tasks.scala.IncrementalCompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . publishedCode    =    publishedCode ;", "}", "METHOD_END"], "methodName": ["setPublishedCode"], "fileName": "org.gradle.api.tasks.scala.IncrementalCompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . scalaPlatform    =    scalaPlatform ;", "}", "METHOD_END"], "methodName": ["setScalaPlatform"], "fileName": "org.gradle.language.scala.internal.DefaultScalaJvmAssembly"}, {"methodBody": ["METHOD_START", "{", "Dependency   dependency    =    dependencyHandler . create ( dependencyNotation )  ;", "return   configurationContainer . detachedConfiguration ( dependency )  ;", "}", "METHOD_END"], "methodName": ["resolveDependency"], "fileName": "org.gradle.language.scala.internal.toolchain.DownloadingScalaToolChain"}, {"methodBody": ["METHOD_START", "{", "TreeFormatter   formatter    =    new   TreeFormatter (  )  ;", "this . explain ( formatter )  ;", "return   new   api . GradleException ( formatter . toString (  )  ,    exception )  ;", "}", "METHOD_END"], "methodName": ["failure"], "fileName": "org.gradle.language.scala.internal.toolchain.NotFoundScalaToolProvider"}, {"methodBody": ["METHOD_START", "{", "Map < File ,    File >    globalAnalysisMap    =    createOrGetGlobalAnalysisMap (  )  ;", "HashMap < File ,    File >    filteredMap    =    filterForClasspath ( globalAnalysisMap ,    spec . getCompileClasspath (  )  )  ;", "spec . setAnalysisMap ( filteredMap )  ;", "if    (  . LOGGER . isDebugEnabled (  )  )     {", ". LOGGER . debug (  \" Analysis   file :     {  }  \"  ,    scalaCompileOptions . getIncrementalOptions (  )  . getAnalysisFile (  )  )  ;", ". LOGGER . debug (  \" Published   code :     {  }  \"  ,    scalaCompileOptions . getIncrementalOptions (  )  . getPublishedCode (  )  )  ;", ". LOGGER . debug (  \" Analysis   map :     {  }  \"  ,    filteredMap )  ;", "}", "}", "METHOD_END"], "methodName": ["configureIncrementalCompilation"], "fileName": "org.gradle.language.scala.tasks.AbstractScalaCompile"}, {"methodBody": ["METHOD_START", "{", "ExtraPropertiesExtension   extraProperties    =    getProject (  )  . getRootProject (  )  . getExtensions (  )  . getExtraProperties (  )  ;", "Map < File ,    File >    analysisMap ;", "if    ( extraProperties . has (  \" scalaCompileAnalysisMap \"  )  )     {", "analysisMap    =     (  ( Map )     ( extraProperties . get (  \" scalaCompileAnalysisMap \"  )  )  )  ;", "} else    {", "analysisMap    =    Maps . newHashMap (  )  ;", "for    ( Project   project    :    getProject (  )  . getRootProject (  )  . getAllprojects (  )  )     {", "for    (    task    :    project . getTasks (  )  . withType (  . class )  )     {", "File   publishedCode    =    task . getScalaCompileOptions (  )  . getIncrementalOptions (  )  . getPublishedCode (  )  ;", "File   analysisFile    =    task . getScalaCompileOptions (  )  . getIncrementalOptions (  )  . getAnalysisFile (  )  ;", "analysisMap . put ( publishedCode ,    analysisFile )  ;", "}", "}", "extraProperties . set (  \" scalaCompileAnalysisMap \"  ,    Collections . unmodifiableMap ( analysisMap )  )  ;", "}", "return   analysisMap ;", "}", "METHOD_END"], "methodName": ["createOrGetGlobalAnalysisMap"], "fileName": "org.gradle.language.scala.tasks.AbstractScalaCompile"}, {"methodBody": ["METHOD_START", "{", "DefaultScalaJavaJointCompileSpec   spec    =    new   DefaultScalaJavaJointCompileSpecFactory ( compileOptions )  . create (  )  ;", "spec . setSource ( getSource (  )  )  ;", "spec . setDestinationDir ( getDestinationDir (  )  )  ;", "spec . setWorkingDir ( getProject (  )  . getProjectDir (  )  )  ;", "spec . setTempDir ( getTemporaryDir (  )  )  ;", "spec . setCompileClasspath ( ImmutableList . copyOf ( getClasspath (  )  )  )  ;", "spec . setSourceCompatibility ( getSourceCompatibility (  )  )  ;", "spec . setTargetCompatibility ( getTargetCompatibility (  )  )  ;", "spec . setCompileOptions ( getOptions (  )  )  ;", "spec . seOptions ( scalaCompileOptions )  ;", "spec . setAnnotationProcessorPath ( ImmutableList . copyOf ( getEffectiveAnnotationProcessorPath (  )  )  )  ;", "return   spec ;", "}", "METHOD_END"], "methodName": ["createSpec"], "fileName": "org.gradle.language.scala.tasks.AbstractScalaCompile"}, {"methodBody": ["METHOD_START", "{", "final   Set < File >    classpathLookup    =    Sets . newHashSet ( classpath )  ;", "return   Maps . newHashMap ( Maps . filterEntries ( analysisMap ,    new   com . google . common . base . Predicate < Map . Entry < File ,    File >  >  (  )     {", "public   boolean   apply ( Map . Entry < File ,    File >    entry )     {", "return   classpathLookup . contains ( entry . getKey (  )  )  ;", "}", "}  )  )  ;", "}", "METHOD_END"], "methodName": ["filterForClasspath"], "fileName": "org.gradle.language.scala.tasks.AbstractScalaCompile"}, {"methodBody": ["METHOD_START", "{", "AnnotationProcessorPathFactory   annotationProcessorPathFactory    =    getServices (  )  . get ( AnnotationProcessorPathFactory . class )  ;", "return   annotationProcessorPathFactory . getEffectiveAnnotationProcessorClasspath ( cOptions ,    getClasspath (  )  )  ;", "}", "METHOD_END"], "methodName": ["getEffectiveAnnotationProcessorPath"], "fileName": "org.gradle.language.scala.tasks.AbstractScalaCompile"}, {"methodBody": ["METHOD_START", "{", "return   JavaVersion . current (  )  . getMajorVersion (  )  ;", "}", "METHOD_END"], "methodName": ["getJvmVersion"], "fileName": "org.gradle.language.scala.tasks.AbstractScalaCompile"}, {"methodBody": ["METHOD_START", "{", "return   compileOptions ;", "}", "METHOD_END"], "methodName": ["getOptions"], "fileName": "org.gradle.language.scala.tasks.AbstractScalaCompile"}, {"methodBody": ["METHOD_START", "{", "return   scalaCompileOptions ;", "}", "METHOD_END"], "methodName": ["getScalaCompileOptions"], "fileName": "org.gradle.language.scala.tasks.AbstractScalaCompile"}, {"methodBody": ["METHOD_START", "{", "return   additionalParameters ;", "}", "METHOD_END"], "methodName": ["getAdditionalParameters"], "fileName": "org.gradle.language.scala.tasks.BaseScalaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   debugLevel ;", "}", "METHOD_END"], "methodName": ["getDebugLevel"], "fileName": "org.gradle.language.scala.tasks.BaseScalaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   encoding ;", "}", "METHOD_END"], "methodName": ["getEncoding"], "fileName": "org.gradle.language.scala.tasks.BaseScalaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   forkOptions ;", "}", "METHOD_END"], "methodName": ["getForkOptions"], "fileName": "org.gradle.language.scala.tasks.BaseScalaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   incrementalOptions ;", "}", "METHOD_END"], "methodName": ["getIncrementalOptions"], "fileName": "org.gradle.language.scala.tasks.BaseScalaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   loggingLevel ;", "}", "METHOD_END"], "methodName": ["getLoggingLevel"], "fileName": "org.gradle.language.scala.tasks.BaseScalaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   loggingPhases ;", "}", "METHOD_END"], "methodName": ["getLoggingPhases"], "fileName": "org.gradle.language.scala.tasks.BaseScalaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   deprecation ;", "}", "METHOD_END"], "methodName": ["isDeprecation"], "fileName": "org.gradle.language.scala.tasks.BaseScalaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   failOnError ;", "}", "METHOD_END"], "methodName": ["isFailOnError"], "fileName": "org.gradle.language.scala.tasks.BaseScalaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   force ;", "}", "METHOD_END"], "methodName": ["isForce"], "fileName": "org.gradle.language.scala.tasks.BaseScalaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   listFiles ;", "}", "METHOD_END"], "methodName": ["isListFiles"], "fileName": "org.gradle.language.scala.tasks.BaseScalaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   optimize ;", "}", "METHOD_END"], "methodName": ["isOptimize"], "fileName": "org.gradle.language.scala.tasks.BaseScalaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   unchecked ;", "}", "METHOD_END"], "methodName": ["isUnchecked"], "fileName": "org.gradle.language.scala.tasks.BaseScalaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . additionalParameters    =    additionalParameters ;", "}", "METHOD_END"], "methodName": ["setAdditionalParameters"], "fileName": "org.gradle.language.scala.tasks.BaseScalaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . debugLevel    =    debugLevel ;", "}", "METHOD_END"], "methodName": ["setDebugLevel"], "fileName": "org.gradle.language.scala.tasks.BaseScalaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . deprecation    =    deprecation ;", "}", "METHOD_END"], "methodName": ["setDeprecation"], "fileName": "org.gradle.language.scala.tasks.BaseScalaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . encoding    =    encoding ;", "}", "METHOD_END"], "methodName": ["setEncoding"], "fileName": "org.gradle.language.scala.tasks.BaseScalaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . failOnError    =    failOnError ;", "}", "METHOD_END"], "methodName": ["setFailOnError"], "fileName": "org.gradle.language.scala.tasks.BaseScalaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . force    =    force ;", "}", "METHOD_END"], "methodName": ["setForce"], "fileName": "org.gradle.language.scala.tasks.BaseScalaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . forkOptions    =    forkOptions ;", "}", "METHOD_END"], "methodName": ["setForkOptions"], "fileName": "org.gradle.language.scala.tasks.BaseScalaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . incrementalOptions    =    incrementalOptions ;", "}", "METHOD_END"], "methodName": ["setIncrementalOptions"], "fileName": "org.gradle.language.scala.tasks.BaseScalaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . listFiles    =    listFiles ;", "}", "METHOD_END"], "methodName": ["setListFiles"], "fileName": "org.gradle.language.scala.tasks.BaseScalaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . loggingLevel    =    loggingLevel ;", "}", "METHOD_END"], "methodName": ["setLoggingLevel"], "fileName": "org.gradle.language.scala.tasks.BaseScalaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . loggingPhases    =    loggingPhases ;", "}", "METHOD_END"], "methodName": ["setLoggingPhases"], "fileName": "org.gradle.language.scala.tasks.BaseScalaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . optimize    =    optimize ;", "}", "METHOD_END"], "methodName": ["setOptimize"], "fileName": "org.gradle.language.scala.tasks.BaseScalaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "this . unchecked    =    unchecked ;", "}", "METHOD_END"], "methodName": ["setUnchecked"], "fileName": "org.gradle.language.scala.tasks.BaseScalaCompileOptions"}, {"methodBody": ["METHOD_START", "{", "return   platform ;", "}", "METHOD_END"], "methodName": ["getPlatform"], "fileName": "org.gradle.language.scala.tasks.PlatformScalaCompile"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getToolChain"], "fileName": "org.gradle.language.scala.tasks.PlatformScalaCompile"}, {"methodBody": ["METHOD_START", "{", "this . platform    =    platform ;", "}", "METHOD_END"], "methodName": ["setPlatform"], "fileName": "org.gradle.language.scala.tasks.PlatformScalaCompile"}]