[{"methodBody": ["METHOD_START", "{", "return   buildScope ( null )  ;", "}", "METHOD_END"], "methodName": ["buildScope"], "fileName": "org.gradle.play.plugins.ide.internal.PlayIdeaPlugin"}, {"methodBody": ["METHOD_START", "{", "return   ImmutableMap .  < String ,    Collection < Configuration >  > builder (  )  . put (  \" plus \"  ,     ( plus    =  =    null    ?    Collections .  < Configuration > emptyList (  )     :    Collections . singletonList ( plus )  )  )  . put (  \" minus \"  ,    Collections .  < Configuration > emptyList (  )  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["buildScope"], "fileName": "org.gradle.play.plugins.ide.internal.PlayIdeaPlugin"}, {"methodBody": ["METHOD_START", "{", "return   ImmutableMap .  < String ,    Map < String ,    Collection < Configuration >  >  > builder (  )  . put (  \" PROVIDED \"  ,    buildScope (  )  )  . put (  \" COMPILE \"  ,    buildScope ( configurations . getByName ( COMPILE _ CONFIGURATION )  )  )  . put (  \" RUNTIME \"  ,    buildScope ( configurations . getByName ( RUN _ CONFIGURATION )  )  )  . put (  \" TEST \"  ,    buildScope ( configurations . getByName ( TEST _ COMPILE _ CONFIGURATION )  )  )  . build (  )  ;", "}", "METHOD_END"], "methodName": ["buildScopes"], "fileName": "org.gradle.play.plugins.ide.internal.PlayIdeaPlugin"}, {"methodBody": ["METHOD_START", "{", "IdeaModule   module    =    ideaModule . getModule (  )  ;", "module . setScopes ( buildScopes ( configurations )  )  ;", "ConventionMapping   conventionMapping    =    conventionMappingFor ( module )  ;", "conventionMapping . map (  \" sourceDirs \"  ,    new   Callable < Set < File >  >  (  )     {", "@ Override", "public   Set < File >    call (  )    throws   Exception    {", "Set < File >    sourceDirs    =    Sets . newHashSet ( playApplicationBinarySpec . getAssets (  )  . getAssetDirs (  )  )  ;", "return   CollectionUtils . inject ( sourceDirs ,    playApplicationBinarySpec . getInputs (  )  ,    new   api . Action < InjectionStep < Set < File >  ,    LanguageSourceSet >  >  (  )     {", "@ Override", "public   void   execute ( InjectionStep < Set < File >  ,    LanguageSourceSet >    step )     {", "step . getTarget (  )  . addAll ( step . getItem (  )  . getSource (  )  . getSrcDirs (  )  )  ;", "}", "}  )  ;", "}", "}  )  ;", "conventionMapping . map (  \" testSourceDirs \"  ,    new   Callable < Set < File >  >  (  )     {", "@ Override", "public   Set < File >    call (  )    throws   Exception    {", "return   Collections . singleton ( fileResolver . resolve (  \" test \"  )  )  ;", "}", "}  )  ;", "conventionMapping . map (  \" singleEntryLibraries \"  ,    new   Callable < Map < String ,    Iterable < File >  >  >  (  )     {", "@ Override", "public   Map < String ,    Iterable < File >  >    call (  )    throws   Exception    {", "return   ImmutableMap .  < String ,    Iterable < File >  > builder (  )  . put (  \" COMPILE \"  ,    Collections . singleton ( playApplicationBinarySpec . getClasses (  )  . getClassesDir (  )  )  )  . put (  \" RUNTIME \"  ,    playApplicationBinarySpec . getClasses (  )  . getResourceDirs (  )  )  . put (  \" TEST \"  ,    Collections . singleton ( new   File ( buildDir ,     \" playBinary / testClasses \"  )  )  )  . build (  )  ;", "}", "}  )  ;", "module . setScalaPlatform ( playApplicationBinarySpec . getTargetPlatform (  )  . getScalaPlatform (  )  )  ;", "conventionMapping . map (  \" targetBytecodeVersion \"  ,    new   Callable < JavaVersion >  (  )     {", "@ Override", "public   JavaVersion   call (  )    throws   Exception    {", "return   getTargetJavaVersion ( playApplicationBinarySpec )  ;", "}", "}  )  ;", "conventionMapping . map (  \" languageLevel \"  ,    new   Callable < IdeaLanguageLevel >  (  )     {", "@ Override", "public   IdeaLanguageLevel   call (  )    throws   Exception    {", "return   new   IdeaLanguageLevel ( getTargetJavaVersion ( playApplicationBinarySpec )  )  ;", "}", "}  )  ;", "ideaModule . dependsOn ( playApplicationBinarySpec . getInputs (  )  )  ;", "ideaModule . dependsOn ( playApplicationBinarySpec . getAssets (  )  )  ;", "}", "METHOD_END"], "methodName": ["configureIdeaModule"], "fileName": "org.gradle.play.plugins.ide.internal.PlayIdeaPlugin"}, {"methodBody": ["METHOD_START", "{", "return   new   DslObject ( module )  . getConventionMapping (  )  ;", "}", "METHOD_END"], "methodName": ["conventionMappingFor"], "fileName": "org.gradle.play.plugins.ide.internal.PlayIdeaPlugin"}, {"methodBody": ["METHOD_START", "{", "return   playApplicationBinarySpec . getTargetPlatform (  )  . getJavaPlatform (  )  . getTargetCompatibility (  )  ;", "}", "METHOD_END"], "methodName": ["getTargetJavaVersion"], "fileName": "org.gradle.play.plugins.ide.internal.PlayIdeaPlugin"}]