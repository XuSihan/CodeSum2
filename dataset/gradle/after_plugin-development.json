[{"methodBody": ["METHOD_START", "{", "return   pluginSourceSet ;", "}", "METHOD_END"], "methodName": ["getPluginSourceSet"], "fileName": "org.gradle.plugin.devel.GradlePluginDevelopmentExtension"}, {"methodBody": ["METHOD_START", "{", "return   plugins ;", "}", "METHOD_END"], "methodName": ["getPlugins"], "fileName": "org.gradle.plugin.devel.GradlePluginDevelopmentExtension"}, {"methodBody": ["METHOD_START", "{", "return   testSourceSets ;", "}", "METHOD_END"], "methodName": ["getTestSourceSets"], "fileName": "org.gradle.plugin.devel.GradlePluginDevelopmentExtension"}, {"methodBody": ["METHOD_START", "{", "return   automatedPublishing ;", "}", "METHOD_END"], "methodName": ["isAutomatedPublishing"], "fileName": "org.gradle.plugin.devel.GradlePluginDevelopmentExtension"}, {"methodBody": ["METHOD_START", "{", "this . pluginSourceSet    =    pluginSourceSet ;", "}", "METHOD_END"], "methodName": ["pluginSourceSet"], "fileName": "org.gradle.plugin.devel.GradlePluginDevelopmentExtension"}, {"methodBody": ["METHOD_START", "{", "action . execute ( plugins )  ;", "}", "METHOD_END"], "methodName": ["plugins"], "fileName": "org.gradle.plugin.devel.GradlePluginDevelopmentExtension"}, {"methodBody": ["METHOD_START", "{", "this . automatedPublishing    =    automatedPublishing ;", "}", "METHOD_END"], "methodName": ["setAutomatedPublishing"], "fileName": "org.gradle.plugin.devel.GradlePluginDevelopmentExtension"}, {"methodBody": ["METHOD_START", "{", "this . testSourceSets    =    Collections . unmodifiableSet ( new   HashSet < SourceSet >  ( Arrays . asList ( testSourceSets )  )  )  ;", "}", "METHOD_END"], "methodName": ["testSourceSets"], "fileName": "org.gradle.plugin.devel.GradlePluginDevelopmentExtension"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.gradle.plugin.devel.PluginDeclaration"}, {"methodBody": ["METHOD_START", "{", "return   implementationClass ;", "}", "METHOD_END"], "methodName": ["getImplementationClass"], "fileName": "org.gradle.plugin.devel.PluginDeclaration"}, {"methodBody": ["METHOD_START", "{", "this . id    =    id ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "org.gradle.plugin.devel.PluginDeclaration"}, {"methodBody": ["METHOD_START", "{", "this . implementationClass    =    implementationClass ;", "}", "METHOD_END"], "methodName": ["setImplementationClass"], "fileName": "org.gradle.plugin.devel.PluginDeclaration"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( pluginDevelopment . isAutomatedPublishing (  )  )  )     {", "return ;", "}", "SoftwareComponentContainer   componentContainer    =    services . get ( SoftwareComponentContainer . class )  ;", "SoftwareComponent   component    =    componentContainer . getByName (  \" java \"  )  ;", "PublicationContainer   publications    =    publishing . getPublications (  )  ;", "createcation ( component ,    publications )  ;", "}", "METHOD_END"], "methodName": ["addMainPublication"], "fileName": "org.gradle.plugin.devel.plugins.IvyPluginPublishingRules"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( pluginDevelopment . isAutomatedPublishing (  )  )  )     {", "return ;", "}", "PublicationContainer   publications    =    publishing . getPublications (  )  ;", "NamedDomainObjectContainer < PluginDeclaration >    declaredPlugins    =    pluginDevelopment . getPlugins (  )  ;", "for    ( PluginDeclaration   declaration    :    declaredPlugins )     {", "createIvyMarkerPublication ( declaration ,     (  ( IvyPublication )     ( publications . getByName (  \" pluginIvy \"  )  )  )  ,    publications )  ;", "}", "}", "METHOD_END"], "methodName": ["addMarkerPublications"], "fileName": "org.gradle.plugin.devel.plugins.IvyPluginPublishingRules"}, {"methodBody": ["METHOD_START", "{", "String   pluginId    =    declaration . getId (  )  ;", "IvyPublicationInternal   publication    =     (  ( IvyPublicationInternal )     ( publications . create (  (  ( declaration . getName (  )  )     +     \" PluginMarkerIvy \"  )  ,    IvyPublication . class )  )  )  ;", "publication . setAlias ( true )  ;", "publication . setOrganisation ( pluginId )  ;", "publication . setModule (  ( pluginId    +     ( PLUGIN _ MARKER _ SUFFIX )  )  )  ;", "publication . descriptor ( new   api . Action < IvyModuleDescriptorSpec >  (  )     {", "@ Override", "public   void   execute ( IvyModuleDescriptorSpec   descriptor )     {", "descriptor . withXml ( new   api . Action < XmlProvider >  (  )     {", "@ Override", "public   void   execute ( XmlProvider   xmlProvider )     {", "Element   root    =    xmlProvider . asElement (  )  ;", "Document   document    =    root . getOwnerDocument (  )  ;", "Node   dependencies    =    root . getElementsByTagName (  \" dependencies \"  )  . item (  0  )  ;", "Node   dependency    =    dependencies . appendChild ( document . createElement (  \" dependency \"  )  )  ;", "Attr   org    =    document . createAttribute (  \" org \"  )  ;", "setValue ( mainPublication . getOrganisation (  )  )  ;", "dependency . getAttributes (  )  . setNamedItem ( org )  ;", "Attr   name    =    document . createAttribute (  \" name \"  )  ;", "name . setValue ( mainPublication . getModule (  )  )  ;", "dependency . getAttributes (  )  . setNamedItem ( name )  ;", "Attr   rev    =    document . createAttribute (  \" rev \"  )  ;", "rev . setValue ( mainPublication . getRevision (  )  )  ;", "dependency . getAttributes (  )  . setNamedItem ( rev )  ;", "}", "}  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["createIvyMarkerPublication"], "fileName": "org.gradle.plugin.devel.plugins.IvyPluginPublishingRules"}, {"methodBody": ["METHOD_START", "{", "IvyPublication   publication    =    publications . maybeCreate (  \" pluginIvy \"  ,    IvyPublication . class )  ;", "publication . from ( component )  ;", "}", "METHOD_END"], "methodName": ["createIvyPluginPublication"], "fileName": "org.gradle.plugin.devel.plugins.IvyPluginPublishingRules"}, {"methodBody": ["METHOD_START", "{", "project . getPluginManager (  )  . apply ( JavaPlugin . class )  ;", "applyDependencies ( project )  ;", "DevelopmentExtension   extension    =    createExtension ( project )  ;", "configureJarTask ( project ,    extension )  ;", "configureTestKit ( project ,    extension )  ;", "configurePublishing ( project )  ;", "configureDescriptorGeneration ( project ,    extension )  ;", "validatePluginDeclarations ( project ,    extension )  ;", "configureTaskPropertiesValidation ( project )  ;", "}", "METHOD_END"], "methodName": ["apply"], "fileName": "org.gradle.plugin.devel.plugins.JavaGradlePluginPlugin"}, {"methodBody": ["METHOD_START", "{", "DependencyHandler   dependencies    =    project . getDependencies (  )  ;", "dependencies . add (  . COMPILE _ CONFIGURATION ,    dependencies . gradleApi (  )  )  ;", "}", "METHOD_END"], "methodName": ["applyDependencies"], "fileName": "org.gradle.plugin.devel.plugins.JavaGradlePluginPlugin"}, {"methodBody": ["METHOD_START", "{", "final   GeneratePluginDescriptors   generatePluginDescriptors    =    project . getTasks (  )  . create ( JavaGradlePluginPlugin . GENERATE _ PLUGIN _ DESCRIPTORS _ TASK _ NAME ,    GeneratePluginDescriptors . class )  ;", "generatePluginDescriptors . setGroup ( JavaGradlePluginPlugin . PLUGIN _ DEVELOPMENT _ GROUP )  ;", "generatePluginDescriptors . setDescription ( JavaGradlePluginPlugin . GENERATE _ PLUGIN _ DESCRIPTORS _ TASK _ DESCRIPTION )  ;", "generatePluginDescriptors . conventionMapping (  \" declarations \"  ,    new   Callable < List < PluginDeclaration >  >  (  )     {", "@ Override", "public   List < PluginDeclaration >    call (  )     {", "return   Lists . newArrayList ( extension . getPlugins (  )  )  ;", "}", "}  )  ;", "generatePluginDescriptors . conventionMapping (  \" outputDirectory \"  ,    new   Callable < File >  (  )     {", "@ Override", "public   File   call (  )     {", "return   new   File ( project . getBuildDir (  )  ,    generatePluginDescriptors . getName (  )  )  ;", "}", "}  )  ;", "Copy   processResources    =     (  ( Copy )     ( project . getTasks (  )  . getByName ( JavaGradlePluginPlugin . PROCESS _ RESOURCES _ TASK )  )  )  ;", "CopySpec   copyPluginDescriptors    =    processResources . getRootSpec (  )  . addChild (  )  ;", "copyPluginDescriptors . into (  \" META - INF / gradle - plugins \"  )  ;", "copyPluginDescriptors . from ( new   Callable < File >  (  )     {", "@ Override", "public   File   call (  )     {", "return   generatePluginDescriptors . getOutputDirectory (  )  ;", "}", "}  )  ;", "processResources . dependsOn ( generatePluginDescriptors )  ;", "}", "METHOD_END"], "methodName": ["configureDescriptorGeneration"], "fileName": "org.gradle.plugin.devel.plugins.JavaGradlePluginPlugin"}, {"methodBody": ["METHOD_START", "{", "Jar   jarTask    =     (  ( Jar )     ( project . getTasks (  )  . getByName ( JavaGradlePluginPlugin . JAR _ TASK )  )  )  ;", "List < PluginDescriptor >    descriptors    =    new   ArrayList < PluginDescriptor >  (  )  ;", "Set < String >    classList    =    new   HashSet < String >  (  )  ;", "JavaGradlePluginPlugin . PluginDescriptorCollectorAction   pluginDescriptorCollector    =    new   JavaGradlePluginPlugin . PluginDescriptorCollectorAction ( descriptors )  ;", "JavaGradlePluginPlugin . ClassManifestCollectorAction   classManifestCollector    =    new   JavaGradlePluginPlugin . ClassManifestCollectorAction ( classList )  ;", "JavaGradlePluginPlugin . PluginValidationAction   pluginValidationAction    =    new   JavaGradlePluginPlugin . PluginValidationAction ( extension . getPlugins (  )  ,    descriptors ,    classList )  ;", "jarTask . filesMatching ( JavaGradlePluginPlugin . PLUGIN _ DESCRIPTOR _ PATTERN ,    pluginDescriptorCollector )  ;", "jarTask . filesMatching ( JavaGradlePluginPlugin . CLASSES _ PATTERN ,    classManifestCollector )  ;", "jarTask . appendParallelSafeAction ( pluginValidationAction )  ;", "}", "METHOD_END"], "methodName": ["configureJarTask"], "fileName": "org.gradle.plugin.devel.plugins.JavaGradlePluginPlugin"}, {"methodBody": ["METHOD_START", "{", "project . getPluginManager (  )  . withPlugin (  \" maven - publish \"  ,    new   Action < AppliedPlugin >  (  )     {", "@ Override", "public   void   execute ( AppliedPlugin   appliedPlugin )     {", "project . getPluginManager (  )  . apply ( MavenPluginPublishingRules . class )  ;", "}", "}  )  ;", "project . getPluginManager (  )  . withPlugin (  \" ivy - publish \"  ,    new   Action < AppliedPlugin >  (  )     {", "@ Override", "public   void   execute ( AppliedPlugin   appliedPlugin )     {", "project . getPluginManager (  )  . apply ( IvyPluginPublishingRules . class )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["configurePublishing"], "fileName": "org.gradle.plugin.devel.plugins.JavaGradlePluginPlugin"}, {"methodBody": ["METHOD_START", "{", "ValidateTaskProperties   validator    =    project . getTasks (  )  . create ( JavaGradlePluginPlugin . VALIDATE _ TASK _ PROPERTIES _ TASK _ NAME ,    ValidateTaskProperties . class )  ;", "validator . setGroup ( JavaGradlePluginPlugin . PLUGIN _ DEVELOPMENT _ GROUP )  ;", "validator . setDescription ( JavaGradlePluginPlugin . VALIDATE _ TASK _ PROPERTIES _ TASK _ DESCRIPTION )  ;", "validator . getOutputFile (  )  . set ( project . getLayout (  )  . getBuildDirectory (  )  . file (  \" reports / task - properties / report . txt \"  )  )  ;", "final   SourceSet   mainSourceSet    =    project . getConvention (  )  . getPlugin ( JavaPluginConvention . class )  . getSourceSets (  )  . getByName ( MAIN _ SOURCE _ SET _ NAME )  ;", "validator . setClasses ( mainSourceSet . getOutput (  )  . getClassesDirs (  )  )  ;", "validator . setClasspath ( mainSourceSet . getCompileClasspath (  )  )  ;", "validator . dependsOn ( mainSourceSet . getOutput (  )  )  ;", "project . getTasks (  )  . getByName ( CHECK _ TASK _ NAME )  . dependsOn ( validator )  ;", "}", "METHOD_END"], "methodName": ["configureTaskPropertiesValidation"], "fileName": "org.gradle.plugin.devel.plugins.JavaGradlePluginPlugin"}, {"methodBody": ["METHOD_START", "{", "PluginUnderTestMetadata   pluginUnderTestMetadataTask    =    createAndConfigurePluginUnderTestMetadataTask ( project ,    extension )  ;", "establishTestKitAndPluginClasspathDependencies ( project ,    extension ,    pluginUnderTestMetadataTask )  ;", "}", "METHOD_END"], "methodName": ["configureTestKit"], "fileName": "org.gradle.plugin.devel.plugins.JavaGradlePluginPlugin"}, {"methodBody": ["METHOD_START", "{", "final   PluginUnderTestMetadata   pluginUnderTestMetadataTask    =    project . getTasks (  )  . create ( JavaGradlePluginPlugin . PLUGIN _ UNDER _ TEST _ METADATA _ TASK _ NAME ,    PluginUnderTestMetadata . class )  ;", "pluginUnderTestMetadataTask . setGroup ( JavaGradlePluginPlugin . PLUGIN _ DEVELOPMENT _ GROUP )  ;", "pluginUnderTestMetadataTask . setDescription ( JavaGradlePluginPlugin . PLUGIN _ UNDER _ TEST _ METADATA _ TASK _ DESCRIPTION )  ;", "final   Configuration   gradlePluginConfiguration    =    project . getConfigurations (  )  . detachedConfiguration ( project . getDependencies (  )  . gradleApi (  )  )  ;", "ConventionMapping   conventionMapping    =    new   DslObject ( pluginUnderTestMetadataTask )  . getConventionMapping (  )  ;", "conventionMapping . map (  \" pluginClasspath \"  ,    new   Callable < Object >  (  )     {", "public   Object   call (  )     {", "FileCollection   gradleApi    =    gradlePluginConfiguration . getIncoming (  )  . getFiles (  )  ;", "return   extension . getPluginSourceSet (  )  . getRuntimeClasspath (  )  . minus ( gradleApi )  ;", "}", "}  )  ;", "conventionMapping . map (  \" outputDirectory \"  ,    new   Callable < Object >  (  )     {", "public   Object   call (  )     {", "return   new   File ( project . getBuildDir (  )  ,    pluginUnderTestMetadataTask . getName (  )  )  ;", "}", "}  )  ;", "return   pluginUnderTestMetadataTask ;", "}", "METHOD_END"], "methodName": ["createAndConfigurePluginUnderTestMetadataTask"], "fileName": "org.gradle.plugin.devel.plugins.JavaGradlePluginPlugin"}, {"methodBody": ["METHOD_START", "{", "JavaPluginConvention   javaConvention    =    project . getConvention (  )  . getPlugin ( JavaPluginConvention . class )  ;", "SourceSet   defaultPluginSourceSet    =    getSourceSets (  )  . getByName ( MAIN _ SOURCE _ SET _ NAME )  ;", "SourceSet   defaultTestSourceSet    =    getSourceSets (  )  . getByName ( TEST _ SOURCE _ SET _ NAME )  ;", "return   project . getExtensions (  )  . create (  . EXTENSION _ NAME ,    GradlePluginDevelopmentExtension . class ,    project ,    defaultPluginSourceSet ,    defaultTestSourceSet )  ;", "}", "METHOD_END"], "methodName": ["createExtension"], "fileName": "org.gradle.plugin.devel.plugins.JavaGradlePluginPlugin"}, {"methodBody": ["METHOD_START", "{", "project . afterEvaluate ( new   JavaGradlePluginPlugin . TestKitAndPluginClasspathDependenciesAction ( extension ,    pluginClasspathTask )  )  ;", "}", "METHOD_END"], "methodName": ["establishTestKitAndPluginClasspathDependencies"], "fileName": "org.gradle.plugin.devel.plugins.JavaGradlePluginPlugin"}, {"methodBody": ["METHOD_START", "{", "project . afterEvaluate ( new   Action < Project >  (  )     {", "@ Override", "public   void   execute ( Project   project )     {", "for    ( PluginDeclaration   declaration    :    extension . getPlugins (  )  )     {", "if    (  ( declaration . getId (  )  )     =  =    null )     {", "throw   new   IllegalArgumentException ( String . format (  . DECLARATION _ MISSING _ ID _ MESSAGE ,    declaration . getName (  )  )  )  ;", "}", "if    (  ( declaration . getImplementationClass (  )  )     =  =    null )     {", "throw   new   IllegalArgumentException ( String . format (  . DECLARATION _ MISSING _ IMPLEMENTATION _ MESSAGE ,    declaration . getName (  )  )  )  ;", "}", "}", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["validatePluginDeclarations"], "fileName": "org.gradle.plugin.devel.plugins.JavaGradlePluginPlugin"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( pluginDevelopment . isAutomatedPublishing (  )  )  )     {", "return ;", "}", "SoftwareComponentContainer   componentContainer    =    services . get ( SoftwareComponentContainer . class )  ;", "SoftwareComponent   component    =    componentContainer . getByName (  \" java \"  )  ;", "PublicationContainer   publications    =    publishing . getPublications (  )  ;", "createcation ( component ,    publications )  ;", "}", "METHOD_END"], "methodName": ["addMainPublication"], "fileName": "org.gradle.plugin.devel.plugins.MavenPluginPublishingRules"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( pluginDevelopment . isAutomatedPublishing (  )  )  )     {", "return ;", "}", "PublicationContainer   publications    =    publishing . getPublications (  )  ;", "NamedDomainObjectContainer < PluginDeclaration >    declaredPlugins    =    pluginDevelopment . getPlugins (  )  ;", "for    ( PluginDeclaration   declaration    :    declaredPlugins )     {", "createMavenMarkerPublication ( declaration ,     (  ( MavenPublication )     ( publications . getByName (  \" pluginMaven \"  )  )  )  ,    publications )  ;", "}", "}", "METHOD_END"], "methodName": ["addMarkerPublications"], "fileName": "org.gradle.plugin.devel.plugins.MavenPluginPublishingRules"}, {"methodBody": ["METHOD_START", "{", "String   pluginId    =    declaration . getId (  )  ;", "MavenPublicationInternal   publication    =     (  ( MavenPublicationInternal )     ( publications . create (  (  ( declaration . getName (  )  )     +     \" PluginMarkerMaven \"  )  ,    MavenPublication . class )  )  )  ;", "publication . setAlias ( true )  ;", "publication . setArtifactId (  ( pluginId    +     ( PLUGIN _ MARKER _ SUFFIX )  )  )  ;", "publication . setGroupId ( pluginId )  ;", "publication . getPom (  )  . withXml ( new   api . Action < XmlProvider >  (  )     {", "@ Override", "public   void   execute ( XmlProvider   xmlProvider )     {", "Element   root    =    xmlProvider . asElement (  )  ;", "Document   document    =    root . getOwnerDocument (  )  ;", "Node   dependencies    =    root . appendChild ( document . createElement (  \" dependencies \"  )  )  ;", "Node   dependency    =    dependencies . appendChild ( document . createElement (  \" dependency \"  )  )  ;", "Node   groupId    =    dependency . appendChild ( document . createElement (  \" groupId \"  )  )  ;", "groupId . setTextContent ( coordinates . getGroupId (  )  )  ;", "Node   artifactId    =    dependency . appendChild ( document . createElement (  \" artifactId \"  )  )  ;", "artifactId . setTextContent ( coordinates . getArtifactId (  )  )  ;", "Node   version    =    dependency . appendChild ( document . createElement (  \" version \"  )  )  ;", "version . setTextContent ( coordinates . getVersion (  )  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["createMavenMarkerPublication"], "fileName": "org.gradle.plugin.devel.plugins.MavenPluginPublishingRules"}, {"methodBody": ["METHOD_START", "{", "MavenPublication   publication    =    publications . maybeCreate (  \" pluginMaven \"  ,    MavenPublication . class )  ;", "publication . from ( component )  ;", "}", "METHOD_END"], "methodName": ["createMavenPluginPublication"], "fileName": "org.gradle.plugin.devel.plugins.MavenPluginPublishingRules"}, {"methodBody": ["METHOD_START", "{", "try    {", "FileUtils . cleanDirecy ( getOutputDirecy (  )  )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["clearOutputDirectory"], "fileName": "org.gradle.plugin.devel.tasks.GeneratePluginDescriptors"}, {"methodBody": ["METHOD_START", "{", "clearOutputDirectory (  )  ;", "for    ( PluginDeclaration   declaration    :    getDeclarations (  )  )     {", "File   dFile    =    new   File ( getOutputDirectory (  )  ,     (  ( declaration . getId (  )  )     +     \"  . properties \"  )  )  ;", "Properties   properties    =    new   Properties (  )  ;", "properties . setProperty (  \" implementation - class \"  ,    declaration . getImplementationClass (  )  )  ;", "writePropertiesTo ( properties ,    dFile )  ;", "}", "}", "METHOD_END"], "methodName": ["generatePluginDescriptors"], "fileName": "org.gradle.plugin.devel.tasks.GeneratePluginDescriptors"}, {"methodBody": ["METHOD_START", "{", "return   declarations ;", "}", "METHOD_END"], "methodName": ["getDeclarations"], "fileName": "org.gradle.plugin.devel.tasks.GeneratePluginDescriptors"}, {"methodBody": ["METHOD_START", "{", "if    (  ( outputDirectory )     =  =    null )     {", "return   null ;", "}", "return   getProject (  )  . file ( outputDirectory )  ;", "}", "METHOD_END"], "methodName": ["getOutputDirectory"], "fileName": "org.gradle.plugin.devel.tasks.GeneratePluginDescriptors"}, {"methodBody": ["METHOD_START", "{", "this . declarations    =    declarations ;", "}", "METHOD_END"], "methodName": ["setDeclarations"], "fileName": "org.gradle.plugin.devel.tasks.GeneratePluginDescriptors"}, {"methodBody": ["METHOD_START", "{", "setOutputDirectory (  (  ( Object )     ( outputDirectory )  )  )  ;", "}", "METHOD_END"], "methodName": ["setOutputDirectory"], "fileName": "org.gradle.plugin.devel.tasks.GeneratePluginDescriptors"}, {"methodBody": ["METHOD_START", "{", "this . outputDirectory    =    outputDirectory ;", "}", "METHOD_END"], "methodName": ["setOutputDirectory"], "fileName": "org.gradle.plugin.devel.tasks.GeneratePluginDescriptors"}, {"methodBody": ["METHOD_START", "{", "try    {", "PropertiesUtils . store ( properties ,    dFile )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["writePropertiesTo"], "fileName": "org.gradle.plugin.devel.tasks.GeneratePluginDescriptors"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getPluginClasspath (  )  )     !  =    null )     {", "return   getPluginClasspath (  )  ;", "}", "return   Collections . emptyList (  )  ;", "}", "METHOD_END"], "methodName": ["classpathFiles"], "fileName": "org.gradle.plugin.devel.tasks.PluginUnderTestMetadata"}, {"methodBody": ["METHOD_START", "{", "Properties   properties    =    new   Properties (  )  ;", "if    (  (  ( getPluginClasspath (  )  )     !  =    null )     &  &     (  !  ( getPluginClasspath (  )  . isEmpty (  )  )  )  )     {", "properties . setProperty (  . IMPLEMENTATION _ CLASSPATH _ PROP _ KEY ,    implementationClasspath (  )  )  ;", "}", "File   outputFile    =    new   File ( getOutputDirectory (  )  ,     . METADATA _ FILE _ NAME )  ;", "saveProperties ( properties ,    outputFile )  ;", "}", "METHOD_END"], "methodName": ["generate"], "fileName": "org.gradle.plugin.devel.tasks.PluginUnderTestMetadata"}, {"methodBody": ["METHOD_START", "{", "return   outputDirectory ;", "}", "METHOD_END"], "methodName": ["getOutputDirectory"], "fileName": "org.gradle.plugin.devel.tasks.PluginUnderTestMetadata"}, {"methodBody": ["METHOD_START", "{", "return   collect ( classpathFiles (  )  ,    new   Transformer < String ,    File >  (  )     {", "@ Override", "public   String   transform ( File   file )     {", "return   file . getAbsolutePath (  )  . replaceAll (  \"  \\  \\  \\  \\  \"  ,     \"  /  \"  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["getPaths"], "fileName": "org.gradle.plugin.devel.tasks.PluginUnderTestMetadata"}, {"methodBody": ["METHOD_START", "{", "return   pluginClasspath ;", "}", "METHOD_END"], "methodName": ["getPluginClasspath"], "fileName": "org.gradle.plugin.devel.tasks.PluginUnderTestMetadata"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   implementationClasspath    =    new   StringBuilder (  )  ;", "Joiner . on ( FiathSeparator )  . appendTo ( implementationClasspath ,    getPaths (  )  )  ;", "return   implementationClasspath . toString (  )  ;", "}", "METHOD_END"], "methodName": ["implementationClasspath"], "fileName": "org.gradle.plugin.devel.tasks.PluginUnderTestMetadata"}, {"methodBody": ["METHOD_START", "{", "try    {", "PropertiesUtils . ste ( properties ,    outputFile )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["saveProperties"], "fileName": "org.gradle.plugin.devel.tasks.PluginUnderTestMetadata"}, {"methodBody": ["METHOD_START", "{", "this . outputDirectory    =    outputDirectory ;", "}", "METHOD_END"], "methodName": ["setOutputDirectory"], "fileName": "org.gradle.plugin.devel.tasks.PluginUnderTestMetadata"}, {"methodBody": ["METHOD_START", "{", "this . pluginClasspath    =    pluginClasspath ;", "}", "METHOD_END"], "methodName": ["setPluginClasspath"], "fileName": "org.gradle.plugin.devel.tasks.PluginUnderTestMetadata"}, {"methodBody": ["METHOD_START", "{", "if    ( problemMessages . isEmpty (  )  )     {", "getLogger (  )  . info (  \" Task   property   validation   finished   without   warnings .  \"  )  ;", "} else    {", "if    ( hasErrors    |  |     ( getFailOnWarning (  )  )  )     {", "if    ( getIgnoreFailures (  )  )     {", "getLogger (  )  . warn (  \" Task   property   validation   finished   with   errors .    See    {  }    for   more   information   on   how   to   annotate   task   properties .  {  }  \"  ,    getDocumentationRegistry (  )  . getDocumentationFor (  \" more _ about _ tasks \"  ,     \" sec : task _ input _ output _ annotations \"  )  ,     . toMessageList ( problemMessages )  )  ;", "} else    {", "throw   new   TaskValidationException ( String . format (  \" Task   property   validation   failed .    See    % s   for   more   information   on   how   to   annotate   task   properties .  \"  ,    getDocumentationRegistry (  )  . getDocumentationFor (  \" more _ about _ tasks \"  ,     \" sec : task _ input _ output _ annotations \"  )  )  ,     . toExceptionList ( problemMessages )  )  ;", "}", "} else    {", "getLogger (  )  . warn (  \" Task   property   validation   finished   with   warnings :  {  }  \"  ,     . toMessageList ( problemMessages )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["communicateResult"], "fileName": "org.gradle.plugin.devel.tasks.ValidateTaskProperties"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getClassLoaderFactory"], "fileName": "org.gradle.plugin.devel.tasks.ValidateTaskProperties"}, {"methodBody": ["METHOD_START", "{", "return   classes ;", "}", "METHOD_END"], "methodName": ["getClasses"], "fileName": "org.gradle.plugin.devel.tasks.ValidateTaskProperties"}, {"methodBody": ["METHOD_START", "{", "return   classpath ;", "}", "METHOD_END"], "methodName": ["getClasspath"], "fileName": "org.gradle.plugin.devel.tasks.ValidateTaskProperties"}, {"methodBody": ["METHOD_START", "{", "throw   new   UnsupportedOperationException (  )  ;", "}", "METHOD_END"], "methodName": ["getDocumentationRegistry"], "fileName": "org.gradle.plugin.devel.tasks.ValidateTaskProperties"}, {"methodBody": ["METHOD_START", "{", "return   failOnWarning ;", "}", "METHOD_END"], "methodName": ["getFailOnWarning"], "fileName": "org.gradle.plugin.devel.tasks.ValidateTaskProperties"}, {"methodBody": ["METHOD_START", "{", "return   outputFile ;", "}", "METHOD_END"], "methodName": ["getOutputFile"], "fileName": "org.gradle.plugin.devel.tasks.ValidateTaskProperties"}, {"methodBody": ["METHOD_START", "{", "this . classes    =    classes ;", "}", "METHOD_END"], "methodName": ["setClasses"], "fileName": "org.gradle.plugin.devel.tasks.ValidateTaskProperties"}, {"methodBody": ["METHOD_START", "{", "this . classpath    =    classpath ;", "}", "METHOD_END"], "methodName": ["setClasspath"], "fileName": "org.gradle.plugin.devel.tasks.ValidateTaskProperties"}, {"methodBody": ["METHOD_START", "{", "this . failOnWarning    =    failOnWarning ;", "}", "METHOD_END"], "methodName": ["setFailOnWarning"], "fileName": "org.gradle.plugin.devel.tasks.ValidateTaskProperties"}, {"methodBody": ["METHOD_START", "{", "if    ( outputFile . isPresent (  )  )     {", "File   output    =    outputFile . get (  )  . getAsFile (  )  ;", "output . createNewFile (  )  ;", "Files . write ( Joiner . on (  '  \\ n '  )  . join ( problemMessages )  ,    output ,    UTF _  8  )  ;", "}", "}", "METHOD_END"], "methodName": ["storeResults"], "fileName": "org.gradle.plugin.devel.tasks.ValidateTaskProperties"}, {"methodBody": ["METHOD_START", "{", "return   Lists . transform ( problemMessages ,    new   com . google . common . base . Function < String ,    InvalidUserDataException >  (  )     {", "@ Override", "@ SuppressWarnings (  \" NullableProblems \"  )", "public   InvalidUserDataException   apply ( String   problemMessage )     {", "return   new   InvalidUserDataException ( problemMessage )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["toExceptionList"], "fileName": "org.gradle.plugin.devel.tasks.ValidateTaskProperties"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   builder    =    new   StringBuilder (  )  ;", "for    ( String   problemMessage    :    problemMessages )     {", "builder . append ( String . format (  \"  % n       -     % s \"  ,    problemMessage )  )  ;", "}", "return   builder ;", "}", "METHOD_END"], "methodName": ["toMessageList"], "fileName": "org.gradle.plugin.devel.tasks.ValidateTaskProperties"}, {"methodBody": ["METHOD_START", "{", "ImmutableList . Builder < String >    builder    =    ImmutableList . builder (  )  ;", "for    ( Map . Entry < String ,    Boolean >    entry    :    problems . entrySet (  )  )     {", "String   problem    =    entry . getKey (  )  ;", "Boolean   error    =    entry . getue (  )  ;", "builder . add ( String . format (  \"  % s :     % s \"  ,     ( Boolean . TRUE . equals ( error )     ?     \" Error \"     :     \" Warning \"  )  ,    problem )  )  ;", "}", "return   builder . build (  )  ;", "}", "METHOD_END"], "methodName": ["toProblemMessages"], "fileName": "org.gradle.plugin.devel.tasks.ValidateTaskProperties"}, {"methodBody": ["METHOD_START", "{", "ClassLoader   previousContextClassLoader    =    Thread . currentThread (  )  . getContextClassLoader (  )  ;", "ClassPath   classPath    =    new   internal . classpath . DefaultClassPath ( Iterables . concat ( getClasses (  )  ,    getClasspath (  )  )  )  ;", "ClassLoader   classLoader    =    getClassLoaderFactory (  )  . createIsolatedClassLoader ( classPath )  ;", "Thread . currentThread (  )  . setContextClassLoader ( classLoader )  ;", "try    {", "validateTaskClasses ( classLoader )  ;", "}    finally    {", "Thread . currentThread (  )  . setContextClassLoader ( previousContextClassLoader )  ;", "ClassLoaderUtils . tryClose ( classLoader )  ;", "}", "}", "METHOD_END"], "methodName": ["validateTaskClasses"], "fileName": "org.gradle.plugin.devel.tasks.ValidateTaskProperties"}, {"methodBody": ["METHOD_START", "{", "final   Map < String ,    Boolean >    taskValidationProblems    =    Maps . newTreeMap (  )  ;", "final   Class <  ?  >    taskInterface ;", "final   Method   validatorMethod ;", "try    {", "taskInterface    =    classLoader . loadClass ( Task . class . getName (  )  )  ;", "Class <  ?  >    validatorClass    =    classLoader . loadClass (  \" PropertyValidationAccess \"  )  ;", "validatorMethod    =    validatorClass . getMethod (  \" collectTaskValidationProblems \"  ,    Class . class ,    Map . class )  ;", "}    catch    ( ClassNotFoundException   e )     {", "throw   new   RuntimeException ( e )  ;", "}    catch    ( NoSuchMethodException   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "getClasses (  )  . getAsFileTree (  )  . visit ( new   EmptyFileVisitor (  )     {", "@ Override", "public   void   visitFile ( FileVisitDetails   fileDetails )     {", "if    (  !  ( fileDetails . getPath (  )  . endsWith (  \"  . class \"  )  )  )     {", "return ;", "}", "ClassReader   reader ;", "try    {", "reader    =    new   ClassReader ( Files . asByteSource ( fileDetails . getFile (  )  )  . read (  )  )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "List < String >    classNames    =    Lists . newArrayList (  )  ;", "reader . accept ( new    . TaskNameCollectorVisitor ( classNames )  ,    SKIP _ CODE )  ;", "for    ( String   className    :    classNames )     {", "Class <  ?  >    clazz ;", "try    {", "clazz    =    classLoader . loadClass ( className )  ;", "}    catch    ( IllegalAccessError   e )     {", "throw   new   GradleException (  (  \" Could   not   load   class :     \"     +    className )  ,    e )  ;", "}    catch    ( ClassNotFoundException   e )     {", "throw   new   GradleException (  (  \" Could   not   load   class :     \"     +    className )  ,    e )  ;", "}    catch    ( NoClassDefFoundError   e )     {", "throw   new   GradleException (  (  \" Could   not   load   class :     \"     +    className )  ,    e )  ;", "}", "if    (  !  ( Modifier . isPublic ( clazz . getModifiers (  )  )  )  )     {", "continue ;", "}", "if    ( Modifier . isAbstract ( clazz . getModifiers (  )  )  )     {", "continue ;", "}", "if    (  !  ( taskInterface . isAssignableFrom ( clazz )  )  )     {", "continue ;", "}", "Class <  ?    extends   Task >    taskClass    =    Cast . uncheckedCast ( clazz )  ;", "try    {", "validatorMethod . invoke ( null ,    taskClass ,    taskValidationProblems )  ;", "}    catch    ( IllegalAccessException   e )     {", "throw   new   RuntimeException ( e )  ;", "}    catch    ( InvocationTargetException   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "}", "}", "}  )  ;", "List < String >    problemMessages    =     . toProblemMessages ( taskValidationProblems )  ;", "storeResults ( problemMessages )  ;", "communicateResult ( problemMessages ,    taskValidationProblems . values (  )  . contains ( Boolean . TRUE )  )  ;", "}", "METHOD_END"], "methodName": ["validateTaskClasses"], "fileName": "org.gradle.plugin.devel.tasks.ValidateTaskProperties"}]