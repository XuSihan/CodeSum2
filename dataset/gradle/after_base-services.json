[{"methodBody": ["METHOD_START", "{", "if    (  ! condition )     {", "throw   new   IllegalArgumentException (  (  (  \" Could   not   determine   java   v   from    '  \"     +    value )     +     \"  '  .  \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertTrue"], "fileName": "org.gradle.api.JavaVersion"}, {"methodBody": ["METHOD_START", "{", "List < Integer >    result    =    new   ArrayList < Integer >  (  )  ;", "for    ( String   s    :    versionStrs )     {", ". assertTrue ( value ,     (  !  (  . isNumberStartingWithZero ( s )  )  )  )  ;", "try    {", "result . add ( Integer . parseInt ( s )  )  ;", "}    catch    ( NumberFormatException   e )     {", ". assertTrue ( value ,    false )  ;", "}", "}", ". assertTrue ( value ,     (  (  !  ( result . isEmpty (  )  )  )     &  &     (  ( result . get (  0  )  )     >     0  )  )  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["convertToNumber"], "fileName": "org.gradle.api.JavaVersion"}, {"methodBody": ["METHOD_START", "{", "if    (  ( JavaVersion . currentJavaVersion )     =  =    null )     {", "JavaVersion . currentJavaVersion    =    JavaVersion . toVersion ( System . getProperty (  \" version \"  )  )  ;", "}", "return   JavaVersion . currentJavaVersion ;", "}", "METHOD_END"], "methodName": ["current"], "fileName": "org.gradle.api.JavaVersion"}, {"methodBody": ["METHOD_START", "{", "JavaVersion . assertTrue ( s ,     (  ( s . length (  )  )     !  =     0  )  )  ;", "for    ( int   i    =     0  ;    i    <     ( s . length (  )  )  ;     +  + i )     {", "if    (  !  ( JavaVersion . isDigitOrPeriod ( s . charAt ( i )  )  )  )     {", "JavaVersion . assertTrue ( s ,     ( i    !  =     0  )  )  ;", "return   i ;", "}", "}", "return   s . length (  )  ;", "}", "METHOD_END"], "methodName": ["findFirstNonVersionCharIndex"], "fileName": "org.gradle.api.JavaVersion"}, {"methodBody": ["METHOD_START", "{", "if    (  ( classData . length )     <     8  )     {", "throw   new   IllegalArgumentException (  \" Invalid   class   format .    Should   contain   at   least    8    bytes \"  )  ;", "}", "return    . forClassVersion (  (  ( classData [  7  ]  )     &     2  5  5  )  )  ;", "}", "METHOD_END"], "methodName": ["forClass"], "fileName": "org.gradle.api.JavaVersion"}, {"methodBody": ["METHOD_START", "{", "return   JavaVersion . getVersionForMajor (  ( classVersion    -     4  4  )  )  ;", "}", "METHOD_END"], "methodName": ["forClassVersion"], "fileName": "org.gradle.api.JavaVersion"}, {"methodBody": ["METHOD_START", "{", "return   String . valueOf (  (  ( ordinal (  )  )     +     1  )  )  ;", "}", "METHOD_END"], "methodName": ["getMajorVersion"], "fileName": "org.gradle.api.JavaVersion"}, {"methodBody": ["METHOD_START", "{", "return   versionName ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.api.JavaVersion"}, {"methodBody": ["METHOD_START", "{", "return   major    >  =     ( JavaVersion . values (  )  . length )     ?    JavaVersion . VERSION _ HIGHER    :    JavaVersion . values (  )  [  ( major    -     1  )  ]  ;", "}", "METHOD_END"], "methodName": ["getVersionForMajor"], "fileName": "org.gradle.api.JavaVersion"}, {"methodBody": ["METHOD_START", "{", "return    (  ( c    >  =     '  0  '  )     &  &     ( c    <  =     '  9  '  )  )     |  |     ( c    =  =     '  .  '  )  ;", "}", "METHOD_END"], "methodName": ["isDigitOrPeriod"], "fileName": "org.gradle.api.JavaVersion"}, {"methodBody": ["METHOD_START", "{", "return    ( this )     =  =     ( JavaVersion . VERSION _  1  _  1  0  )  ;", "}", "METHOD_END"], "methodName": ["isJava10"], "fileName": "org.gradle.api.JavaVersion"}, {"methodBody": ["METHOD_START", "{", "return    ( this . compareTo ( JavaVersion . VERSION _  1  _  1  0  )  )     >  =     0  ;", "}", "METHOD_END"], "methodName": ["isJava10Compatible"], "fileName": "org.gradle.api.JavaVersion"}, {"methodBody": ["METHOD_START", "{", "return    ( this )     =  =     ( JavaVersion . VERSION _  1  1  )  ;", "}", "METHOD_END"], "methodName": ["isJava11"], "fileName": "org.gradle.api.JavaVersion"}, {"methodBody": ["METHOD_START", "{", "return    ( this . compareTo ( JavaVersion . VERSION _  1  1  )  )     >  =     0  ;", "}", "METHOD_END"], "methodName": ["isJava11Compatible"], "fileName": "org.gradle.api.JavaVersion"}, {"methodBody": ["METHOD_START", "{", "return    ( this )     =  =     ( JavaVersion . VERSION _  1  _  5  )  ;", "}", "METHOD_END"], "methodName": ["isJava5"], "fileName": "org.gradle.api.JavaVersion"}, {"methodBody": ["METHOD_START", "{", "return    ( this . compareTo ( JavaVersion . VERSION _  1  _  5  )  )     >  =     0  ;", "}", "METHOD_END"], "methodName": ["isJava5Compatible"], "fileName": "org.gradle.api.JavaVersion"}, {"methodBody": ["METHOD_START", "{", "return    ( this )     =  =     ( JavaVersion . VERSION _  1  _  6  )  ;", "}", "METHOD_END"], "methodName": ["isJava6"], "fileName": "org.gradle.api.JavaVersion"}, {"methodBody": ["METHOD_START", "{", "return    ( this . compareTo ( JavaVersion . VERSION _  1  _  6  )  )     >  =     0  ;", "}", "METHOD_END"], "methodName": ["isJava6Compatible"], "fileName": "org.gradle.api.JavaVersion"}, {"methodBody": ["METHOD_START", "{", "return    ( this )     =  =     ( JavaVersion . VERSION _  1  _  7  )  ;", "}", "METHOD_END"], "methodName": ["isJava7"], "fileName": "org.gradle.api.JavaVersion"}, {"methodBody": ["METHOD_START", "{", "return    ( this . compareTo ( JavaVersion . VERSION _  1  _  7  )  )     >  =     0  ;", "}", "METHOD_END"], "methodName": ["isJava7Compatible"], "fileName": "org.gradle.api.JavaVersion"}, {"methodBody": ["METHOD_START", "{", "return    ( this )     =  =     ( JavaVersion . VERSION _  1  _  8  )  ;", "}", "METHOD_END"], "methodName": ["isJava8"], "fileName": "org.gradle.api.JavaVersion"}, {"methodBody": ["METHOD_START", "{", "return    ( this . compareTo ( JavaVersion . VERSION _  1  _  8  )  )     >  =     0  ;", "}", "METHOD_END"], "methodName": ["isJava8Compatible"], "fileName": "org.gradle.api.JavaVersion"}, {"methodBody": ["METHOD_START", "{", "return    ( this )     =  =     ( JavaVersion . VERSION _  1  _  9  )  ;", "}", "METHOD_END"], "methodName": ["isJava9"], "fileName": "org.gradle.api.JavaVersion"}, {"methodBody": ["METHOD_START", "{", "return    ( this . compareTo ( JavaVersion . VERSION _  1  _  9  )  )     >  =     0  ;", "}", "METHOD_END"], "methodName": ["isJava9Compatible"], "fileName": "org.gradle.api.JavaVersion"}, {"methodBody": ["METHOD_START", "{", "return    (  1     =  =     ( versions . get (  0  )  )  )     &  &     (  ( versions . size (  )  )     >     1  )  ;", "}", "METHOD_END"], "methodName": ["isLegacyVersion"], "fileName": "org.gradle.api.JavaVersion"}, {"methodBody": ["METHOD_START", "{", "return    (  ( number . length (  )  )     >     1  )     &  &     ( number . startsWith (  \"  0  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["isNumberStartingWithZero"], "fileName": "org.gradle.api.JavaVersion"}, {"methodBody": ["METHOD_START", "{", "JavaVersion . currentJavaVersion    =    null ;", "}", "METHOD_END"], "methodName": ["resetCurrent"], "fileName": "org.gradle.api.JavaVersion"}, {"methodBody": ["METHOD_START", "{", "if    ( value    =  =    null )     {", "return   null ;", "}", "if    ( value   instanceof    )     {", "return    (  (  )     ( value )  )  ;", "}", "String   name    =    value . toString (  )  ;", "int   firstNonVersionCharIndex    =     . findFirstNonVersionCharIndex ( name )  ;", "String [  ]    versionStrings    =    name . substring (  0  ,    firstNonVersionCharIndex )  . split (  \"  \\  \\  .  \"  )  ;", "List < Integer >    versions    =     . convertToNumber ( name ,    versionStrings )  ;", "if    (  . isLegacyVersion ( versions )  )     {", ". assertTrue ( name ,     (  ( versions . get (  1  )  )     >     0  )  )  ;", "return    . getVersionForMajor ( versions . get (  1  )  )  ;", "} else    {", "return    . getVersionForMajor ( versions . get (  0  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["toVersion"], "fileName": "org.gradle.api.JavaVersion"}, {"methodBody": ["METHOD_START", "{", "return   new   RelativePath ( endsWithFile ,    this ,    segments )  ;", "}", "METHOD_END"], "methodName": ["append"], "fileName": "org.gradle.api.file.RelativePath"}, {"methodBody": ["METHOD_START", "{", "return   new   RelativePath ( other . endsWithFile ,    this ,    other . segments )  ;", "}", "METHOD_END"], "methodName": ["append"], "fileName": "org.gradle.api.file.RelativePath"}, {"methodBody": ["METHOD_START", "{", "for    ( int   i    =     0  ;    i    <     ( source . length )  ;    i +  +  )     {", "target [  ( targetOffset    +    i )  ]     =     . internPathSegment ( source [ i ]  )  ;", "}", "}", "METHOD_END"], "methodName": ["copyAndInternSegments"], "fileName": "org.gradle.api.file.RelativePath"}, {"methodBody": ["METHOD_START", "{", "RelativePath . copySegments ( target ,    source ,    target . length )  ;", "}", "METHOD_END"], "methodName": ["copySegments"], "fileName": "org.gradle.api.file.RelativePath"}, {"methodBody": ["METHOD_START", "{", "System . arraycopy ( source ,     0  ,    target ,     0  ,    length )  ;", "}", "METHOD_END"], "methodName": ["copySegments"], "fileName": "org.gradle.api.file.RelativePath"}, {"methodBody": ["METHOD_START", "{", "return   new   File ( baseDir ,    getPathString (  )  )  ;", "}", "METHOD_END"], "methodName": ["getFile"], "fileName": "org.gradle.api.file.RelativePath"}, {"methodBody": ["METHOD_START", "{", "if    (  ( segments . length )     >     0  )     {", "return   segments [  (  ( segments . length )     -     1  )  ]  ;", "} else    {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["getLastName"], "fileName": "org.gradle.api.file.RelativePath"}, {"methodBody": ["METHOD_START", "{", "switch    ( segments . length )     {", "case    0     :", "return   null ;", "case    1     :", "return    . EMPTY _ ROOT ;", "default    :", "String [  ]    parentSegments    =    new   String [  ( segments . length )     -     1  ]  ;", ". copySegments ( parentSegments ,    segments )  ;", "return   new    ( false ,    parentSegments )  ;", "}", "}", "METHOD_END"], "methodName": ["getParent"], "fileName": "org.gradle.api.file.RelativePath"}, {"methodBody": ["METHOD_START", "{", "if    (  ( segments . length )     =  =     0  )     {", "return    \"  \"  ;", "}", "StringBuilder   p    =    new   StringBuilder (  2  5  6  )  ;", "for    ( int   i    =     0  ,    len    =    segments . length ;    i    <    len ;    i +  +  )     {", "if    ( i    !  =     0  )     {", "p . append (  '  /  '  )  ;", "}", "p . append ( segments [ i ]  )  ;", "}", "return   p . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getPathString"], "fileName": "org.gradle.api.file.RelativePath"}, {"methodBody": ["METHOD_START", "{", "return   segments ;", "}", "METHOD_END"], "methodName": ["getSegments"], "fileName": "org.gradle.api.file.RelativePath"}, {"methodBody": ["METHOD_START", "{", "return   RelativePath . PATH _ SEGMENT _ STRING _ INTERNER . intern ( sample )  ;", "}", "METHOD_END"], "methodName": ["internPathSegment"], "fileName": "org.gradle.api.file.RelativePath"}, {"methodBody": ["METHOD_START", "{", "return   endsWithFile ;", "}", "METHOD_END"], "methodName": ["isFile"], "fileName": "org.gradle.api.file.RelativePath"}, {"methodBody": ["METHOD_START", "{", "return   RelativePath . parse ( isFile ,    null ,    path )  ;", "}", "METHOD_END"], "methodName": ["parse"], "fileName": "org.gradle.api.file.RelativePath"}, {"methodBody": ["METHOD_START", "{", "String [  ]    names    =    StringUtils . split ( path ,    RelativePath . FILE _ PATH _ SEPARATORS )  ;", "return   new   RelativePath ( isFile ,    parent ,    names )  ;", "}", "METHOD_END"], "methodName": ["parse"], "fileName": "org.gradle.api.file.RelativePath"}, {"methodBody": ["METHOD_START", "{", "return   append ( other )  ;", "}", "METHOD_END"], "methodName": ["plus"], "fileName": "org.gradle.api.file.RelativePath"}, {"methodBody": ["METHOD_START", "{", "return   new   RelativePath ( false ,    segments )  . append ( this )  ;", "}", "METHOD_END"], "methodName": ["prepend"], "fileName": "org.gradle.api.file.RelativePath"}, {"methodBody": ["METHOD_START", "{", "String [  ]    newSegments    =    new   String [ segments . length ]  ;", ". copySegments ( newSegments ,    segments ,     (  ( segments . length )     -     1  )  )  ;", "newSegments [  (  ( segments . length )     -     1  )  ]     =     . internPathSegment ( name )  ;", "return   new    ( endsWithFile ,    newSegments )  ;", "}", "METHOD_END"], "methodName": ["replaceLastName"], "fileName": "org.gradle.api.file.RelativePath"}, {"methodBody": ["METHOD_START", "{", "ArrayList < String >    content    =    new   ArrayList < String >  ( Arrays . asList ( segments )  )  ;", "return   content . listIterator (  )  ;", "}", "METHOD_END"], "methodName": ["segmentIterator"], "fileName": "org.gradle.api.file.RelativePath"}, {"methodBody": ["METHOD_START", "{", "RelativePath   childPath    =    new   RelativePath ( false ,     \" one \"  ,     \" two \"  )  . append ( true ,     \" three \"  ,     \" four \"  )  ;", "assertPathContains ( childPath ,    true ,     \" one \"  ,     \" two \"  ,     \" three \"  ,     \" four \"  )  ;", "childPath    =    new   RelativePath ( false ,     \" one \"  ,     \" two \"  )  . append ( true )  ;", "assertPathContains ( childPath ,    true ,     \" one \"  ,     \" two \"  )  ;", "}", "METHOD_END"], "methodName": ["appendNames"], "fileName": "org.gradle.api.file.RelativePathTest"}, {"methodBody": ["METHOD_START", "{", "RelativePath   childPath    =    new   RelativePath ( false ,     \" one \"  ,     \" two \"  )  . append ( new   RelativePath ( true ,     \" three \"  ,     \" four \"  )  )  ;", "assertPathContains ( childPath ,    true ,     \" one \"  ,     \" two \"  ,     \" three \"  ,     \" four \"  )  ;", "childPath    =    new   RelativePath ( false ,     \" one \"  ,     \" two \"  )  . append ( new   RelativePath ( true )  )  ;", "assertPathContains ( childPath ,    true ,     \" one \"  ,     \" two \"  )  ;", "childPath    =    new   RelativePath ( false ,     \" one \"  ,     \" two \"  )  . plus ( new   RelativePath ( true ,     \" three \"  )  )  ;", "assertPathContains ( childPath ,    true ,     \" one \"  ,     \" two \"  ,     \" three \"  )  ;", "}", "METHOD_END"], "methodName": ["appendPath"], "fileName": "org.gradle.api.file.RelativePathTest"}, {"methodBody": ["METHOD_START", "{", "String [  ]    actualPaths    =    path . getSegments (  )  ;", "assertArrayEquals ( expectedSegments ,    actualPaths )  ;", "assertEquals ( isFile ,    path . isFile (  )  )  ;", "}", "METHOD_END"], "methodName": ["assertPathContains"], "fileName": "org.gradle.api.file.RelativePathTest"}, {"methodBody": ["METHOD_START", "{", "assertThat ( new   RelativePath ( true ,     \" a \"  ,     \" b \"  )  . getParent (  )  ,    equalTo ( new   RelativePath ( false ,     \" a \"  )  )  )  ;", "assertThat ( new   RelativePath ( false ,     \" a \"  ,     \" b \"  )  . getParent (  )  ,    equalTo ( new   RelativePath ( false ,     \" a \"  )  )  )  ;", "assertThat ( new   RelativePath ( false ,     \" a \"  )  . getParent (  )  ,    equalTo ( new   RelativePath ( false )  )  )  ;", "assertThat ( new   RelativePath ( false )  . getParent (  )  ,    nullValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["canGetParentOfPath"], "fileName": "org.gradle.api.file.RelativePathTest"}, {"methodBody": ["METHOD_START", "{", "RelativePath   path ;", "path    =    RelativePath . parse ( true ,     \" one \"  )  ;", "assertPathContains ( path ,    true ,     \" one \"  )  ;", "path    =    RelativePath . parse ( true ,     \" one / two \"  )  ;", "assertPathContains ( path ,    true ,     \" one \"  ,     \" two \"  )  ;", "path    =    RelativePath . parse ( true ,     \" one / two /  \"  )  ;", "assertPathContains ( path ,    true ,     \" one \"  ,     \" two \"  )  ;", "path    =    RelativePath . parse ( true ,    String . format (  \" one % stwo % s \"  ,    File . separator ,    File . separator )  )  ;", "assertPathContains ( path ,    true ,     \" one \"  ,     \" two \"  )  ;", "path    =    RelativePath . parse ( false ,     \"  \"  )  ;", "assertPathContains ( path ,    false )  ;", "path    =    RelativePath . parse ( false ,     \"  /  \"  )  ;", "assertPathContains ( path ,    false )  ;", "path    =    RelativePath . parse ( true ,     \"  / one \"  )  ;", "assertPathContains ( path ,    true ,     \" one \"  )  ;", "path    =    RelativePath . parse ( true ,     \"  / one / two \"  )  ;", "assertPathContains ( path ,    true ,     \" one \"  ,     \" two \"  )  ;", "}", "METHOD_END"], "methodName": ["canParsePathIntoRelativePath"], "fileName": "org.gradle.api.file.RelativePathTest"}, {"methodBody": ["METHOD_START", "{", "assertPathContains ( new   RelativePath ( true ,     \" old \"  )  . replaceLastName (  \" new \"  )  ,    true ,     \" new \"  )  ;", "assertPathContains ( new   RelativePath ( false ,     \" old \"  )  . replaceLastName (  \" new \"  )  ,    false ,     \" new \"  )  ;", "assertPathContains ( new   RelativePath ( true ,     \" a \"  ,     \" b \"  ,     \" old \"  )  . replaceLastName (  \" new \"  )  ,    true ,     \" a \"  ,     \" b \"  ,     \" new \"  )  ;", "}", "METHOD_END"], "methodName": ["canReplaceLastName"], "fileName": "org.gradle.api.file.RelativePathTest"}, {"methodBody": ["METHOD_START", "{", "assertThat ( new   RelativePath ( true )  ,    Matchers . strictlyEqual ( new   RelativePath ( true )  )  )  ;", "assertThat ( new   RelativePath ( true ,     \" one \"  )  ,    Matchers . strictlyEqual ( new   RelativePath ( true ,     \" one \"  )  )  )  ;", "assertThat ( new   RelativePath ( false ,     \" one \"  ,     \" two \"  )  ,    Matchers . strictlyEqual ( new   RelativePath ( false ,     \" one \"  ,     \" two \"  )  )  )  ;", "assertThat ( new   RelativePath ( true ,     \" one \"  )  ,    not ( equalTo ( new   RelativePath ( true ,     \" two \"  )  )  )  )  ;", "assertThat ( new   RelativePath ( true ,     \" one \"  )  ,    not ( equalTo ( new   RelativePath ( true ,     \" one \"  ,     \" two \"  )  )  )  )  ;", "assertThat ( new   RelativePath ( true ,     \" one \"  )  ,    not ( equalTo ( new   RelativePath ( false ,     \" one \"  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["hasWellBehavedEqualsAndHashCode"], "fileName": "org.gradle.api.file.RelativePathTest"}, {"methodBody": ["METHOD_START", "{", "RelativePath   childPath    =    new   RelativePath ( false ,     \" one \"  ,     \" two \"  )  . prepend (  \" three \"  ,     \" four \"  )  ;", "assertPathContains ( childPath ,    false ,     \" three \"  ,     \" four \"  ,     \" one \"  ,     \" two \"  )  ;", "childPath    =    new   RelativePath ( false ,     \" one \"  ,     \" two \"  )  . prepend (  )  ;", "assertPathContains ( childPath ,    false ,     \" one \"  ,     \" two \"  )  ;", "}", "METHOD_END"], "methodName": ["prependNames"], "fileName": "org.gradle.api.file.RelativePathTest"}, {"methodBody": ["METHOD_START", "{", "RelativePath   path ;", "path    =    new   RelativePath ( true ,     \" one \"  )  ;", "assertPathContains ( path ,    true ,     \" one \"  )  ;", "path    =    new   RelativePath ( false ,     \" one \"  ,     \" two \"  )  ;", "assertPathContains ( path ,    false ,     \" one \"  ,     \" two \"  )  ;", "}", "METHOD_END"], "methodName": ["testConstructors"], "fileName": "org.gradle.api.file.RelativePathTest"}, {"methodBody": ["METHOD_START", "{", "RelativePath   path    =    RelativePath . parse ( true ,     \"  / one / two \"  )  ;", "assertEquals (  ' o '  ,    path . charAt (  0  )  )  ;", "assertEquals (  '  /  '  ,    path . charAt (  3  )  )  ;", "assertEquals (  ' t '  ,    path . charAt (  4  )  )  ;", "}", "METHOD_END"], "methodName": ["testExistingCharAt"], "fileName": "org.gradle.api.file.RelativePathTest"}, {"methodBody": ["METHOD_START", "{", "assertEquals (  0  ,    RelativePath . parse ( true ,     \"  \"  )  . length (  )  )  ;", "assertEquals (  7  ,    RelativePath . parse ( true ,     \"  / one / two \"  )  . length (  )  )  ;", "}", "METHOD_END"], "methodName": ["testLength"], "fileName": "org.gradle.api.file.RelativePathTest"}, {"methodBody": ["METHOD_START", "{", "RelativePath   path    =    RelativePath . parse ( true ,     \"  / one / two \"  )  ;", "path . charAt (  (  -  1  )  )  ;", "}", "METHOD_END"], "methodName": ["testNegativeCharAt"], "fileName": "org.gradle.api.file.RelativePathTest"}, {"methodBody": ["METHOD_START", "{", "RelativePath   path    =    RelativePath . parse ( true ,     \"  / one / two \"  )  ;", "path . charAt (  2  5  )  ;", "}", "METHOD_END"], "methodName": ["testTooLargeCharAt"], "fileName": "org.gradle.api.file.RelativePathTest"}, {"methodBody": ["METHOD_START", "{", "return   GeneratedSubclass . class . isAssignableFrom ( clazz )  ;", "}", "METHOD_END"], "methodName": ["is"], "fileName": "org.gradle.api.internal.GeneratedSubclasses"}, {"methodBody": ["METHOD_START", "{", "if    ( GeneratedSubclasses . is ( clazz )  )     {", "return   clazz . getSuperclass (  )  ;", "} else    {", "return   clazz ;", "}", "}", "METHOD_END"], "methodName": ["unpack"], "fileName": "org.gradle.api.internal.GeneratedSubclasses"}, {"methodBody": ["METHOD_START", "{", "return   Collections . unmodifiableList ( Arrays . asList ( specs )  )  ;", "}", "METHOD_END"], "methodName": ["getSpecs"], "fileName": "org.gradle.api.specs.CompositeSpec"}, {"methodBody": ["METHOD_START", "{", "return   specs ;", "}", "METHOD_END"], "methodName": ["getSpecsArray"], "fileName": "org.gradle.api.specs.CompositeSpec"}, {"methodBody": ["METHOD_START", "{", "return    ( specs . length )     =  =     0  ;", "}", "METHOD_END"], "methodName": ["isEmpty"], "fileName": "org.gradle.api.specs.CompositeSpec"}, {"methodBody": ["METHOD_START", "{", "return    (  ( T )     ( object )  )  ;", "}", "METHOD_END"], "methodName": ["uncheckedCast"], "fileName": "org.gradle.api.specs.CompositeSpec"}, {"methodBody": ["METHOD_START", "{", "return   sourceSpec ;", "}", "METHOD_END"], "methodName": ["getSourceSpec"], "fileName": "org.gradle.api.specs.NotSpec"}, {"methodBody": ["METHOD_START", "{", "return    !  ( sourceSpec . isSatisfiedBy ( element )  )  ;", "}", "METHOD_END"], "methodName": ["isSatisfiedBy"], "fileName": "org.gradle.api.specs.NotSpec"}, {"methodBody": ["METHOD_START", "{", "return   CompositeSpec . uncheckedCast ( OrSpec . EMPTY )  ;", "}", "METHOD_END"], "methodName": ["empty"], "fileName": "org.gradle.api.specs.OrSpec"}, {"methodBody": ["METHOD_START", "{", "Spec <  ?    super   T >  [  ]     =    getSpecsArray (  )  ;", "if    (  ( length )     =  =     0  )     {", "return   true ;", "}", "for    ( Spec <  ?    super   T >    spec    :        {", "if    ( spec . isSatisfiedBy ( object )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isSatisfiedBy"], "fileName": "org.gradle.api.specs.OrSpec"}, {"methodBody": ["METHOD_START", "{", "if    (  ( specs . length )     =  =     0  )     {", "return   this ;", "}", "Spec <  ?    super   T >  [  ]    thisSpecs    =    getSpecsArray (  )  ;", "int   thisLength    =    thisSpecs . length ;", "if    ( thisLength    =  =     0  )     {", "return   new   OrSpec < T >  ( specs )  ;", "}", "Spec <  ?    super   T >  [  ]    combinedSpecs    =    CompositeSpec . uncheckedCast ( ObjectArrays . newArray ( Spec . class ,     ( thisLength    +     ( specs . length )  )  )  )  ;", "System . arraycopy ( thisSpecs ,     0  ,    combinedSpecs ,     0  ,    thisLength )  ;", "System . arraycopy ( specs ,     0  ,    combinedSpecs ,    thisLength ,    specs . length )  ;", "return   new   OrSpec < T >  ( combinedSpecs )  ;", "}", "METHOD_END"], "methodName": ["or"], "fileName": "org.gradle.api.specs.OrSpec"}, {"methodBody": ["METHOD_START", "{", "return   new   Action < T >  (  )     {", "@ Override", "public   void   execute ( T   t )     {", "collection . add ( t )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.gradle.internal.Actions"}, {"methodBody": ["METHOD_START", "{", "return   Actions . transformBefore ( action ,    Transformers . cast ( actionType )  )  ;", "}", "METHOD_END"], "methodName": ["castBefore"], "fileName": "org.gradle.internal.Actions"}, {"methodBody": ["METHOD_START", "{", "return   new   Actions . CompositeAction < T >  ( actions )  ;", "}", "METHOD_END"], "methodName": ["composite"], "fileName": "org.gradle.internal.Actions"}, {"methodBody": ["METHOD_START", "{", "return   Actions . composite ( Arrays . asList ( actions )  )  ;", "}", "METHOD_END"], "methodName": ["composite"], "fileName": "org.gradle.internal.Actions"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Action < T >  )     ( Actions . DO _ NOTHING )  )  ;", "}", "METHOD_END"], "methodName": ["doNothing"], "fileName": "org.gradle.internal.Actions"}, {"methodBody": ["METHOD_START", "{", "return   new   Actions . FilteredAction < T >  ( action ,    filter )  ;", "}", "METHOD_END"], "methodName": ["filter"], "fileName": "org.gradle.internal.Actions"}, {"methodBody": ["METHOD_START", "{", "return   ImmutableActionSet . of ( actions )  ;", "}", "METHOD_END"], "methodName": ["set"], "fileName": "org.gradle.internal.Actions"}, {"methodBody": ["METHOD_START", "{", "if    ( runnable    =  =    null )     {", "return    . doNothing (  )  ;", "} else    {", "return   new    . RunnableActionAdapter < T >  ( runnable )  ;", "}", "}", "METHOD_END"], "methodName": ["toAction"], "fileName": "org.gradle.internal.Actions"}, {"methodBody": ["METHOD_START", "{", "return   new   Actions . TransformingActionAdapter < T ,    I >  ( transformer ,    action )  ;", "}", "METHOD_END"], "methodName": ["transformBefore"], "fileName": "org.gradle.internal.Actions"}, {"methodBody": ["METHOD_START", "{", "action . execute ( instance )  ;", "return   instance ;", "}", "METHOD_END"], "methodName": ["with"], "fileName": "org.gradle.internal.Actions"}, {"methodBody": ["METHOD_START", "{", "return   new   BiAction < A ,    B >  (  )     {", "@ Override", "public   void   execute ( A   a ,    B   b )     {", "for    ( BiAction <  ?    super   A ,     ?    super   B >    action    :    actions )     {", "action . execute ( a ,    b )  ;", "}", "}", "}  ;", "}", "METHOD_END"], "methodName": ["composite"], "fileName": "org.gradle.internal.BiActions"}, {"methodBody": ["METHOD_START", "{", "return   BiActions . NOOP ;", "}", "METHOD_END"], "methodName": ["doNothing"], "fileName": "org.gradle.internal.BiActions"}, {"methodBody": ["METHOD_START", "{", "return   new   BiAction < A ,    Object >  (  )     {", "public   void   execute ( A   a ,    Object   o )     {", "action . execute ( a )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["usingFirstArgument"], "fileName": "org.gradle.internal.BiActions"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   outputType . cast ( object )  ;", "}    catch    ( ClassException   e )     {", "throw   new   ClassException ( String . format (  \" Failed   to   cast   object    % s   of   type    % s   to   target   type    % s \"  ,    object ,    object . getClass (  )  . getName (  )  ,    outputType . getName (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["cast"], "fileName": "org.gradle.internal.Cast"}, {"methodBody": ["METHOD_START", "{", "return    (  ( T )     ( object )  )  ;", "}", "METHOD_END"], "methodName": ["uncheckedCast"], "fileName": "org.gradle.internal.Cast"}, {"methodBody": ["METHOD_START", "{", "if    ( src   instanceof   DisplayName )     {", "DisplayName   displayName    =     (  ( DisplayName )     ( src )  )  ;", "stringBuilder . append ( displayName . getCapitalizedDisplayName (  )  )  ;", "} else    {", "int   pos    =    stringBuilder . length (  )  ;", "if    ( src   instanceof    )     {", "describable    =     (  (  )     ( src )  )  ;", "stringBuilder . append ( describable . getDisplayName (  )  )  ;", "} else    {", "stringBuilder . append ( src . toString (  )  )  ;", "}", "stringBuilder . setCharAt ( pos ,    Character . toUpperCase ( stringBuilder . charAt ( pos )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["appendCapDisplayName"], "fileName": "org.gradle.internal.Describables"}, {"methodBody": ["METHOD_START", "{", "if    ( src   instanceof   Describable )     {", "Describable   describable    =     (  ( Describable )     ( src )  )  ;", "stringBuilder . append ( describable . getDisplayName (  )  )  ;", "} else    {", "stringBuilder . append ( src . toString (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["appendDisplayName"], "fileName": "org.gradle.internal.Describables"}, {"methodBody": ["METHOD_START", "{", "return   new   Describables . MemoizingDescribable ( describable )  ;", "}", "METHOD_END"], "methodName": ["memoize"], "fileName": "org.gradle.internal.Describables"}, {"methodBody": ["METHOD_START", "{", "if    ( displayName   instanceof   DisplayName )     {", "return    (  ( DisplayName )     ( displayName )  )  ;", "}", "return   new    . FixedDescribable ( displayName )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.internal.Describables"}, {"methodBody": ["METHOD_START", "{", "return   new   Describables . TwoPartDescribable ( part 1  ,    part 2  )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.internal.Describables"}, {"methodBody": ["METHOD_START", "{", "return   new   Describables . ThreePartDescribable ( part 1  ,    part 2  ,    part 3  )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.internal.Describables"}, {"methodBody": ["METHOD_START", "{", "return   new   Describables . AbstractDescribable (  )     {", "@ Override", "public   String   getCapitalizedDisplayName (  )     {", "StringBuilder   result    =    asMutable (  )  ;", "result . setCharAt (  0  ,    Character . toUpperCase ( result . charAt (  0  )  )  )  ;", "return   result . toString (  )  ;", "}", "@ Override", "public   String   getDisplayName (  )     {", "return   asMutable (  )  . toString (  )  ;", "}", "private   StringBuilder   asMutable (  )     {", "StringBuilder   result    =    new   StringBuilder (  (  (  ( type . length (  )  )     +     ( name . length (  )  )  )     +     3  )  )  ;", "result . append ( type )  ;", "result . append (  \"     '  \"  )  ;", "result . append ( name )  ;", "result . append (  '  \\  '  '  )  ;", "return   result ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["withTypeAndName"], "fileName": "org.gradle.internal.Describables"}, {"methodBody": ["METHOD_START", "{", "try    {", "doExecute ( thing )  ;", "}    catch    ( Excep   e )     {", "throw   UncheckedExcep . throwAsUncheckedExcep ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.internal.ErroringAction"}, {"methodBody": ["METHOD_START", "{", "return   new   Factory < T >  (  )     {", "public   T   create (  )     {", "return   item ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["constant"], "fileName": "org.gradle.internal.Factories"}, {"methodBody": ["METHOD_START", "{", "return   Factories . constant ( null )  ;", "}", "METHOD_END"], "methodName": ["constantNull"], "fileName": "org.gradle.internal.Factories"}, {"methodBody": ["METHOD_START", "{", "return   new   Factories . CachingSoftReferenceFactory < T >  ( factory )  ;", "}", "METHOD_END"], "methodName": ["softReferenceCache"], "fileName": "org.gradle.internal.Factories"}, {"methodBody": ["METHOD_START", "{", "return   new   Factory < T >  (  )     {", "public   T   create (  )     {", "runnable . run (  )  ;", "return   null ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["toFactory"], "fileName": "org.gradle.internal.Factories"}, {"methodBody": ["METHOD_START", "{", "if    (  ( file . getAbsolutePath (  )  . length (  )  )     >     ( FileUtils . WINDOWS _ PATH _ LIMIT )  )     {", "throw   new   GradleException ( String . format (  \" Cannot   create   file .     '  % s '    exceeds   windows   path   limitation   of    % d   character .  \"  ,    file . getAbsolutePath (  )  ,    FileUtils . WINDOWS _ PATH _ LIMIT )  )  ;", "}", "return   file ;", "}", "METHOD_END"], "methodName": ["assertInWindowsPathLengthLimitation"], "fileName": "org.gradle.internal.FileUtils"}, {"methodBody": ["METHOD_START", "{", "List < File >    roots    =    new   LinkedList < File >  (  )  ;", "files    :    for    ( File   file    :    files )     {", "File   absoluteFile    =    file . getAbsoluteFile (  )  ;", "String   path    =    absoluteFile    +     ( File . separator )  ;", "Iterator < File >    rootsIterator    =    roots . iterator (  )  ;", "while    ( rootsIterator . hasNext (  )  )     {", "File   root    =    rootsIterator . next (  )  ;", "String   rootPath    =     ( root . getPath (  )  )     +     ( File . separator )  ;", "if    ( path . startsWith ( rootPath )  )     {", "continue   files ;", "}", "if    ( rootPath . startsWith ( path )  )     {", "rootsIterator . remove (  )  ;", "}", "}", "roots . add ( absoluteFile )  ;", "}", "return   roots ;", "}", "METHOD_END"], "methodName": ["calculateRoots"], "fileName": "org.gradle.internal.FileUtils"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   src . getCanonical (  )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["canonicalize"], "fileName": "org.gradle.internal.FileUtils"}, {"methodBody": ["METHOD_START", "{", "return   subject . regionMatches ( true ,     (  ( subject . length (  )  )     -     ( suffix . length (  )  )  )  ,    suffix ,     0  ,    suffix . length (  )  )  ;", "}", "METHOD_END"], "methodName": ["endsWithIgnoreCase"], "fileName": "org.gradle.internal.FileUtils"}, {"methodBody": ["METHOD_START", "{", "return   file . getPath (  )  . endsWith ( extension )  ;", "}", "METHOD_END"], "methodName": ["hasExtension"], "fileName": "org.gradle.internal.FileUtils"}, {"methodBody": ["METHOD_START", "{", "return   FileUtils . endsWithIgnoreCase ( fileName ,    extension )  ;", "}", "METHOD_END"], "methodName": ["hasExtensionIgnoresCase"], "fileName": "org.gradle.internal.FileUtils"}, {"methodBody": ["METHOD_START", "{", "String   path    =    src . getAbsolutePath (  )  ;", "String   normalizedPath    =    Filenam . normalize ( path )  ;", "if    ( normalizedPath    !  =    null )     {", "return   new   File ( normalizedPath )  ;", "}", "File   root    =    src ;", "File   parent    =    root . getParentFile (  )  ;", "while    ( parent    !  =    null )     {", "root    =    root . getParentFile (  )  ;", "parent    =    root . getParentFile (  )  ;", "}", "return   root ;", "}", "METHOD_END"], "methodName": ["normalize"], "fileName": "org.gradle.internal.FileUtils"}, {"methodBody": ["METHOD_START", "{", "int   fileNameStart    =    Math . max ( filePath . lastIndexOf (  '  /  '  )  ,    filePath . lastIndexOf (  '  \\  \\  '  )  )  ;", "int   extensionPos    =    filePath . lastIndexOf (  '  .  '  )  ;", "if    ( extensionPos    >    fileNameStart )     {", "return   filePath . substring (  0  ,    extensionPos )  ;", "}", "return   filePath ;", "}", "METHOD_END"], "methodName": ["removeExtension"], "fileName": "org.gradle.internal.FileUtils"}, {"methodBody": ["METHOD_START", "{", "int   size    =    name . length (  )  ;", "StringBuffer   rc    =    new   StringBuffer (  ( size    *     2  )  )  ;", "for    ( int   i    =     0  ;    i    <    size ;    i +  +  )     {", "char   c    =    name . charAt ( i )  ;", "boolean   valid    =     ( c    >  =     ' a '  )     &  &     ( c    <  =     ' z '  )  ;", "valid    =    valid    |  |     (  ( c    >  =     ' A '  )     &  &     ( c    <  =     ' Z '  )  )  ;", "valid    =    valid    |  |     (  ( c    >  =     '  0  '  )     &  &     ( c    <  =     '  9  '  )  )  ;", "valid    =     (  (  ( valid    |  |     ( c    =  =     '  _  '  )  )     |  |     ( c    =  =     '  -  '  )  )     |  |     ( c    =  =     '  .  '  )  )     |  |     ( c    =  =     '  $  '  )  ;", "if    ( valid )     {", "rc . append ( c )  ;", "} else    {", "rc . append (  '  #  '  )  ;", "rc . append ( Integer . toHexString ( c )  )  ;", "}", "}", "return   rc . toString (  )  ;", "}", "METHOD_END"], "methodName": ["toSafeFileName"], "fileName": "org.gradle.internal.FileUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( filePath . toLowerCase (  )  . endsWith ( extension )  )     {", "return   filePath ;", "}", "return    (  . removeExtension ( filePath )  )     +    extension ;", "}", "METHOD_END"], "methodName": ["withExtension"], "fileName": "org.gradle.internal.FileUtils"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( action    =  =     ( Actions . DO _ NOTHING )  )     |  |     ( action   instanceof   ImmutableActionSet . EmptySet )  )     |  |     ( action    =  =     ( this )  )  )     {", "return   this ;", "}", "if    ( action   instanceof   ImmutableActionSet . SingletonSet )     {", "ImmutableActionSet . SingletonSet < T >    singletonSet    =     (  ( ImmutableActionSet . SingletonSet )     ( action )  )  ;", "return   doAdd ( singletonSet . singleAction )  ;", "}", "if    ( action   instanceof   ImmutableActionSet . CompositeSet )     {", "ImmutableActionSet . CompositeSet < T >    compositeSet    =     (  ( ImmutableActionSet . CompositeSet )     ( action )  )  ;", "return   doAddAll ( compositeSet )  ;", "}", "return   doAdd ( action )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.gradle.internal.ImmutableActionSet"}, {"methodBody": ["METHOD_START", "{", "return   Cast . uncheckedCast ( ImmutableActionSet . EMPTY )  ;", "}", "METHOD_END"], "methodName": ["empty"], "fileName": "org.gradle.internal.ImmutableActionSet"}, {"methodBody": ["METHOD_START", "{", "if    (  ( actions . length )     =  =     0  )     {", "return    . empty (  )  ;", "}", "Builder < Action <  ?    super   T >  >    builder    =    ImmutableSet . builder (  )  ;", "for    ( Action <  ?    super   T >    action    :    actions )     {", "if    (  ( action    =  =     ( Actions . DO _ NOTHING )  )     |  |     ( action   instanceof    . EmptySet )  )     {", "continue ;", "}", "unpackAction ( action ,    builder )  ;", "}", "ImmutableSet < Action <  ?    super   T >  >    set    =    builder . build (  )  ;", "if    ( set . isEmpty (  )  )     {", "return    . empty (  )  ;", "}", "if    (  ( set . size (  )  )     =  =     1  )     {", "return   new    . SingletonSet < T >  ( set . iterator (  )  . next (  )  )  ;", "}", "return   new    . CompositeSet < T >  ( set )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.internal.ImmutableActionSet"}, {"methodBody": ["METHOD_START", "{", "if    ( action   instanceof   ImmutableActionSet . SingletonSet )     {", "ImmutableActionSet . SingletonSet < T >    singletonSet    =     (  ( ImmutableActionSet . SingletonSet )     ( action )  )  ;", "builder . add ( singletonSet . singleAction )  ;", "} else", "if    ( action   instanceof   ImmutableActionSet . CompositeSet )     {", "ImmutableActionSet . CompositeSet < T >    compositeSet    =     (  ( ImmutableActionSet . CompositeSet )     ( action )  )  ;", "builder . addAll ( compositeSet . multipleActions )  ;", "} else    {", "builder . add ( action )  ;", "}", "}", "METHOD_END"], "methodName": ["unpackAction"], "fileName": "org.gradle.internal.ImmutableActionSet"}, {"methodBody": ["METHOD_START", "{", "try    {", "if    ( resource    !  =    null )     {", "resource . close (  )  ;", "}", "}    catch    ( IOExcep   e )     {", "}", "}", "METHOD_END"], "methodName": ["closeQuietly"], "fileName": "org.gradle.internal.IoActions"}, {"methodBody": ["METHOD_START", "{", "return   new   IoActions . TextFileWriterIoAction ( output ,    encoding )  ;", "}", "METHOD_END"], "methodName": ["createTextFileWriteAction"], "fileName": "org.gradle.internal.IoActions"}, {"methodBody": ["METHOD_START", "{", "try    {", "if    ( resource    !  =    null )     {", "resource . close (  )  ;", "}", "}    catch    ( IOExcep   e )     {", "throw   new   UncheckedIOExcep ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["uncheckedClose"], "fileName": "org.gradle.internal.IoActions"}, {"methodBody": ["METHOD_START", "{", "try    {", "action . execute ( resource )  ;", "}    catch    ( Throwable   t )     {", ". closeQuietly ( resource )  ;", "throw   UncheckedException . throwAsUncheckedException ( t )  ;", "}", ". uncheckedClose ( resource )  ;", "}", "METHOD_END"], "methodName": ["withResource"], "fileName": "org.gradle.internal.IoActions"}, {"methodBody": ["METHOD_START", "{", "R   result ;", "try    {", "result    =    action . transform ( resource )  ;", "}    catch    ( Throwable   t )     {", ". closeQuietly ( resource )  ;", "throw   UncheckedException . throwAsUncheckedException ( t )  ;", "}", ". uncheckedClose ( resource )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["withResource"], "fileName": "org.gradle.internal.IoActions"}, {"methodBody": ["METHOD_START", "{", "IoActions . createTextFileWriteAction ( output ,    encoding )  . execute ( action )  ;", "}", "METHOD_END"], "methodName": ["writeTextFile"], "fileName": "org.gradle.internal.IoActions"}, {"methodBody": ["METHOD_START", "{", "IoActions . writeTextFile ( output ,    Charset . defaultCharset (  )  . name (  )  ,    action )  ;", "}", "METHOD_END"], "methodName": ["writeTextFile"], "fileName": "org.gradle.internal.IoActions"}, {"methodBody": ["METHOD_START", "{", "this . actions    =    actions . add ( action )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.gradle.internal.MutableActionSet"}, {"methodBody": ["METHOD_START", "{", "actions . execute ( t )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.internal.MutableActionSet"}, {"methodBody": ["METHOD_START", "{", "return   actions . isEmpty (  )  ;", "}", "METHOD_END"], "methodName": ["isEmpty"], "fileName": "org.gradle.internal.MutableActionSet"}, {"methodBody": ["METHOD_START", "{", "return   left ;", "}", "METHOD_END"], "methodName": ["getLeft"], "fileName": "org.gradle.internal.Pair"}, {"methodBody": ["METHOD_START", "{", "return   right ;", "}", "METHOD_END"], "methodName": ["getRight"], "fileName": "org.gradle.internal.Pair"}, {"methodBody": ["METHOD_START", "{", "return   left ;", "}", "METHOD_END"], "methodName": ["left"], "fileName": "org.gradle.internal.Pair"}, {"methodBody": ["METHOD_START", "{", "return   function . apply ( this )  ;", "}", "METHOD_END"], "methodName": ["map"], "fileName": "org.gradle.internal.Pair"}, {"methodBody": ["METHOD_START", "{", "return   Pair . of ( function . apply ( left )  ,    right )  ;", "}", "METHOD_END"], "methodName": ["mapLeft"], "fileName": "org.gradle.internal.Pair"}, {"methodBody": ["METHOD_START", "{", "return   Pair . of ( left ,    function . apply ( right )  )  ;", "}", "METHOD_END"], "methodName": ["mapRight"], "fileName": "org.gradle.internal.Pair"}, {"methodBody": ["METHOD_START", "{", "return   Pair . of ( Pair . of ( t ,    left )  ,    right )  ;", "}", "METHOD_END"], "methodName": ["nestLeft"], "fileName": "org.gradle.internal.Pair"}, {"methodBody": ["METHOD_START", "{", "return   Pair . of ( left ,    Pair . of ( t ,    right )  )  ;", "}", "METHOD_END"], "methodName": ["nestRight"], "fileName": "org.gradle.internal.Pair"}, {"methodBody": ["METHOD_START", "{", "return   new   Pair < L ,    R >  ( left ,    right )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.internal.Pair"}, {"methodBody": ["METHOD_START", "{", "return   Pair . of ( t ,    this )  ;", "}", "METHOD_END"], "methodName": ["pushLeft"], "fileName": "org.gradle.internal.Pair"}, {"methodBody": ["METHOD_START", "{", "return   Pair . of ( this ,    t )  ;", "}", "METHOD_END"], "methodName": ["pushRight"], "fileName": "org.gradle.internal.Pair"}, {"methodBody": ["METHOD_START", "{", "return   right ;", "}", "METHOD_END"], "methodName": ["right"], "fileName": "org.gradle.internal.Pair"}, {"methodBody": ["METHOD_START", "{", "return   new   com . google . common . base . Function < T ,    L >  (  )     {", "@ Override", "public   L   apply ( T   tuple )     {", "return   tuple . left ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["unpackLeft"], "fileName": "org.gradle.internal.Pair"}, {"methodBody": ["METHOD_START", "{", "return   new   com . google . common . base . Function < T ,    R >  (  )     {", "@ Override", "public   R   apply ( T   tuple )     {", "return   tuple . right ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["unpackRight"], "fileName": "org.gradle.internal.Pair"}, {"methodBody": ["METHOD_START", "{", "return   new   Spec < T >  (  )     {", "public   boolean   isSatisfiedBy ( T   element )     {", "return   type . isInstance ( element )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["isInstance"], "fileName": "org.gradle.internal.Specs"}, {"methodBody": ["METHOD_START", "{", "return    (  ( Map )     ( System . getProperties (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["asMap"], "fileName": "org.gradle.internal.SystemProperties"}, {"methodBody": ["METHOD_START", "{", "return   new   File ( System . getProperty (  \" user . dir \"  )  )  ;", "}", "METHOD_END"], "methodName": ["getCurrentDir"], "fileName": "org.gradle.internal.SystemProperties"}, {"methodBody": ["METHOD_START", "{", "return   SystemProperties . INSTANCE ;", "}", "METHOD_END"], "methodName": ["getInstance"], "fileName": "org.gradle.internal.SystemProperties"}, {"methodBody": ["METHOD_START", "{", "lock . lock (  )  ;", "File   javaHomeDir ;", "try    {", "javaHomeDir    =    new   File ( System . gety (  \" home \"  )  )  ;", "}    finally    {", "lock . unlock (  )  ;", "}", "return   javaHomeDir ;", "}", "METHOD_END"], "methodName": ["getJavaHomeDir"], "fileName": "org.gradle.internal.SystemProperties"}, {"methodBody": ["METHOD_START", "{", "return   System . getProperty (  \" tmpdir \"  )  ;", "}", "METHOD_END"], "methodName": ["getJavaIoTmpDir"], "fileName": "org.gradle.internal.SystemProperties"}, {"methodBody": ["METHOD_START", "{", "return   System . getProperty (  \" version \"  )  ;", "}", "METHOD_END"], "methodName": ["getJavaVersion"], "fileName": "org.gradle.internal.SystemProperties"}, {"methodBody": ["METHOD_START", "{", "return   System . getProperty (  \" line . separator \"  )  ;", "}", "METHOD_END"], "methodName": ["getLineSeparator"], "fileName": "org.gradle.internal.SystemProperties"}, {"methodBody": ["METHOD_START", "{", "return   SystemProperties . IMPORTANT _ NON _ STANDARD _ PROPERTIES ;", "}", "METHOD_END"], "methodName": ["getNonStandardImportantProperties"], "fileName": "org.gradle.internal.SystemProperties"}, {"methodBody": ["METHOD_START", "{", "return   SystemProperties . STANDARD _ PROPERTIES ;", "}", "METHOD_END"], "methodName": ["getStandardProperties"], "fileName": "org.gradle.internal.SystemProperties"}, {"methodBody": ["METHOD_START", "{", "return   System . getProperty (  \" user . home \"  )  ;", "}", "METHOD_END"], "methodName": ["getUserHome"], "fileName": "org.gradle.internal.SystemProperties"}, {"methodBody": ["METHOD_START", "{", "return   System . getProperty (  \" user . name \"  )  ;", "}", "METHOD_END"], "methodName": ["getUserName"], "fileName": "org.gradle.internal.SystemProperties"}, {"methodBody": ["METHOD_START", "{", "return   withSystemProperty (  \" home \"  ,    getAbsolutePath (  )  ,    factory )  ;", "}", "METHOD_END"], "methodName": ["withJavaHome"], "fileName": "org.gradle.internal.SystemProperties"}, {"methodBody": ["METHOD_START", "{", "lock . lock (  )  ;", "String   originalValue    =    System . gety ( propertyName )  ;", "System . sety ( propertyName ,    value )  ;", "try    {", "return   factory . create (  )  ;", "}    finally    {", "if    ( originalValue    !  =    null )     {", "System . sety ( propertyName ,    originalValue )  ;", "} else    {", "System . cleary ( propertyName )  ;", "}", "lock . unlock (  )  ;", "}", "}", "METHOD_END"], "methodName": ["withSystemProperty"], "fileName": "org.gradle.internal.SystemProperties"}, {"methodBody": ["METHOD_START", "{", "return   new   Transformers . CommandLineArgumentTransformer (  )  ;", "}", "METHOD_END"], "methodName": ["asSafeCommandLineArgument"], "fileName": "org.gradle.internal.Transformers"}, {"methodBody": ["METHOD_START", "{", "return   new   Transformers . ToStringTransformer < T >  (  )  ;", "}", "METHOD_END"], "methodName": ["asString"], "fileName": "org.gradle.internal.Transformers"}, {"methodBody": ["METHOD_START", "{", "return   new   Transformers . CastingTransformer < O ,    I >  ( outputType )  ;", "}", "METHOD_END"], "methodName": ["cast"], "fileName": "org.gradle.internal.Transformers"}, {"methodBody": ["METHOD_START", "{", "return   new   Transformer < T ,    I >  (  )     {", "public   T   transform ( I   original )     {", "return   t ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["constant"], "fileName": "org.gradle.internal.Transformers"}, {"methodBody": ["METHOD_START", "{", "return   new   Transformer < T ,    T >  (  )     {", "public   T   transform ( T   original )     {", "return   original ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["noOpTransformer"], "fileName": "org.gradle.internal.Transformers"}, {"methodBody": ["METHOD_START", "{", "return   new   Transformer < R ,    I >  (  )     {", "public   R   transform ( I   original )     {", "action . execute ( original )  ;", "return   null ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["toTransformer"], "fileName": "org.gradle.internal.Transformers"}, {"methodBody": ["METHOD_START", "{", "return   new   Transformer < R ,    Object >  (  )     {", "public   R   transform ( Object   original )     {", "return   factory . create (  )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["toTransformer"], "fileName": "org.gradle.internal.Transformers"}, {"methodBody": ["METHOD_START", "{", "return   new   Transformer < URL ,    URI >  (  )     {", "public   URL   transform ( URI   original )     {", "try    {", "return   original . toURL (  )  ;", "}    catch    ( MalformedURLException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "}", "}  ;", "}", "METHOD_END"], "methodName": ["toURL"], "fileName": "org.gradle.internal.Transformers"}, {"methodBody": ["METHOD_START", "{", "return   new   Transformer < Class < T >  ,    T >  (  )     {", "public   Class < T >    transform ( T   original )     {", "@ SuppressWarnings (  \" unchecked \"  )", "Class < T >    aClass    =     (  ( Class < T >  )     ( original . getClass (  )  )  )  ;", "return   aClass ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["type"], "fileName": "org.gradle.internal.Transformers"}, {"methodBody": ["METHOD_START", "{", "return   UncheckedException . throwAsUncheckedException ( t ,    false )  ;", "}", "METHOD_END"], "methodName": ["throwAsUncheckedException"], "fileName": "org.gradle.internal.UncheckedException"}, {"methodBody": ["METHOD_START", "{", "if    ( t   instanceof   RuntimeException )     {", "throw    (  ( RuntimeException )     ( t )  )  ;", "}", "if    ( t   instanceof   Error )     {", "throw    (  ( Error )     ( t )  )  ;", "}", "if    ( t   instanceof   IOException )     {", "if    ( preserveMessage )     {", "throw   new   UncheckedIOException ( t . getMessage (  )  ,    t )  ;", "} else    {", "throw   new   UncheckedIOException ( t )  ;", "}", "}", "if    ( preserveMessage )     {", "throw   new    ( t . getMessage (  )  ,    t )  ;", "} else    {", "throw   new    ( t )  ;", "}", "}", "METHOD_END"], "methodName": ["throwAsUncheckedException"], "fileName": "org.gradle.internal.UncheckedException"}, {"methodBody": ["METHOD_START", "{", "return   UncheckedException . throwAsUncheckedException ( e . getTargetException (  )  )  ;", "}", "METHOD_END"], "methodName": ["unwrapAndRethrow"], "fileName": "org.gradle.internal.UncheckedException"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this )     =  =    o )     {", "return   true ;", "}", "if    (  !  ( o   instanceof    )  )     {", "return   false ;", "}", "that    =     (  (  )     ( o )  )  ;", "return   parent . equals ( that . parent )  ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.gradle.internal.classloader.CachingClassLoader"}, {"methodBody": ["METHOD_START", "{", "return   parent . hashCode (  )  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.gradle.internal.classloader.CachingClassLoader"}, {"methodBody": ["METHOD_START", "{", "visitor . visitSpec ( new   CachingClassLoader . Spec (  )  )  ;", "visitor . visitParent ( getParent (  )  )  ;", "}", "METHOD_END"], "methodName": ["visit"], "fileName": "org.gradle.internal.classloader.CachingClassLoader"}, {"methodBody": ["METHOD_START", "{", "return   factory . createIsolatedClassLoader ( new   DefaultClassPath ( files )  )  ;", "}", "METHOD_END"], "methodName": ["createIsolatedClassLoader"], "fileName": "org.gradle.internal.classloader.ClassLoaderFactoryHelperExtension"}, {"methodBody": ["METHOD_START", "{", "return   Cast . uncheckedCast ( ClassLoaderUtils . UNSAFE . defineClass ( className ,    clazzBytes ,     0  ,    clazzBytes . length ,    targetClassLoader ,    null )  )  ;", "}", "METHOD_END"], "methodName": ["define"], "fileName": "org.gradle.internal.classloader.ClassLoaderUtils"}, {"methodBody": ["METHOD_START", "{", "try    {", "URL   url    =    new   URL (  \" jar : fi :  /  / valid _ jar _ url _ syntax . jar !  /  \"  )  ;", "URLConnection   urlConnection    =    url . openConnection (  )  ;", "urlConnection . setDefaultUseCaches ( false )  ;", "}    catch    ( MalformedURLException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}    catch    ( IOException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["disableUrlConnectionCaching"], "fileName": "org.gradle.internal.classloader.ClassLoaderUtils"}, {"methodBody": ["METHOD_START", "{", "JavaMethod < ClassLoader ,    T >    method ;", "try    {", "method    =    JavaReflectionUtil . method ( ClassLoader . class ,    clazz ,    firstChoice ,    params )  ;", "}    catch    ( Throwable   e )     {", "method    =    JavaReflectionUtil . method ( ClassLoader . class ,    clazz ,    fallback ,    params )  ;", "}", "return   method ;", "}", "METHOD_END"], "methodName": ["getMethodWithFallback"], "fileName": "org.gradle.internal.classloader.ClassLoaderUtils"}, {"methodBody": ["METHOD_START", "{", "return   ClassLoaderUtils . GET _ PACKAGE _ METHOD ;", "}", "METHOD_END"], "methodName": ["getPackageMethod"], "fileName": "org.gradle.internal.classloader.ClassLoaderUtils"}, {"methodBody": ["METHOD_START", "{", "return   ClassLoaderUtils . GET _ PACKAGES _ METHOD ;", "}", "METHOD_END"], "methodName": ["getPackagesMethod"], "fileName": "org.gradle.internal.classloader.ClassLoaderUtils"}, {"methodBody": ["METHOD_START", "{", "return   ClassLoader . getSystemClassLoader (  )  . getParent (  )  ;", "}", "METHOD_END"], "methodName": ["getPlatformClassLoader"], "fileName": "org.gradle.internal.classloader.ClassLoaderUtils"}, {"methodBody": ["METHOD_START", "{", "CompositeStoppable . stoppable ( classLoader )  . stop (  )  ;", "}", "METHOD_END"], "methodName": ["tryClose"], "fileName": "org.gradle.internal.classloader.ClassLoaderUtils"}, {"methodBody": ["METHOD_START", "{", "String   cp    =    System . getProperty ( ClassLoaderVisitor . JAVA _ CLASS _ PATH )  ;", "String [  ]    elements    =    cp . split ( File . pathSeparator )  ;", "URL [  ]    urls    =    new   URL [ elements . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( elements . length )  ;    i +  +  )     {", "try    {", "URL   url    =    new   File ( elements [ i ]  )  . toURI (  )  . toURL (  )  ;", "urls [ i ]     =    url ;", "}    catch    ( MalformedURLException   mue )     {", "throw   UncheckedException . throwAsUncheckedException ( mue )  ;", "}", "}", "return   urls ;", "}", "METHOD_END"], "methodName": ["extractJava9Classpath"], "fileName": "org.gradle.internal.classloader.ClassLoaderVisitor"}, {"methodBody": ["METHOD_START", "{", "return    (  ( URLClassLoader )     ( classLoader )  )  . getURLs (  )  ;", "}", "METHOD_END"], "methodName": ["extractPreJava9Classpath"], "fileName": "org.gradle.internal.classloader.ClassLoaderVisitor"}, {"methodBody": ["METHOD_START", "{", "return   classLoader   instanceof   URLClassLoader ;", "}", "METHOD_END"], "methodName": ["isPreJava9LauncherAppClassloader"], "fileName": "org.gradle.internal.classloader.ClassLoaderVisitor"}, {"methodBody": ["METHOD_START", "{", "if    ( classLoader    =  =     ( stopAt )  )     {", "visitSpec ( SystemSpec . INSTANCE )  ;", "return ;", "}", "if    ( classLoader   instanceof   Hierarchy )     {", "(  ( Hierarchy )     ( classLoader )  )  . visit ( this )  ;", "} else    {", "if    ( isPreJava 9 LauncherAppClassloader ( classLoader )  )     {", "visitClassPath ( extractPreJava 9 Classpath ( classLoader )  )  ;", "} else    {", "visitClassPath ( extractJava 9 Classpath (  )  )  ;", "}", "if    (  ( classLoader . getParent (  )  )     !  =    null )     {", "visitParent ( classLoader . getParent (  )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["visit"], "fileName": "org.gradle.internal.classloader.ClassLoaderVisitor"}, {"methodBody": ["METHOD_START", "{", "visit ( classLoader )  ;", "}", "METHOD_END"], "methodName": ["visitParent"], "fileName": "org.gradle.internal.classloader.ClassLoaderVisitor"}, {"methodBody": ["METHOD_START", "{", "try    {", "Set < URI >    original    =    new   HashSet < URI >  (  )  ;", "for    ( URL   url    :    classLoader . getURLs (  )  )     {", "original . add (  . toURI ( url )  )  ;", "}", "JavaMethod < URLClassLoader ,    Object >    method    =    JavaReflectionUtil . method ( URLClassLoader . class ,    Object . class ,     \" addURL \"  ,    URL . class )  ;", "for    ( URL   classpathElement    :    classpathElements )     {", "if    ( original . add (  . toURI ( classpathElement )  )  )     {", "method . invoke ( classLoader ,    classpathElement )  ;", "}", "}", "}    catch    ( Throwable   t )     {", "throw   new   RuntimeException ( String . format (  \" Could   not   add   URLs    % s   to   class   path   for   ClassLoader    % s \"  ,    classpathElements ,    classLoader )  ,    t )  ;", "}", "}", "METHOD_END"], "methodName": ["addUrl"], "fileName": "org.gradle.internal.classloader.ClasspathUtil"}, {"methodBody": ["METHOD_START", "{", "final   List < File >    implementationClassPath    =    new   ArrayList < File >  (  )  ;", "new   ClassLoaderVisitor (  )     {", "@ Override", "public   void   visitClassPath ( URL [  ]    classPath )     {", "for    ( URL   url    :    classPath )     {", "if    (  (  ( url . getProtocol (  )  )     !  =    null )     &  &     ( url . getProtocol (  )  . equals (  \" file \"  )  )  )     {", "try    {", "implementationClassPath . add ( new   File (  . toURI ( url )  )  )  ;", "}    catch    ( URISyntaxException   e )     {", "throw   new   UncheckedException ( e )  ;", "}", "}", "}", "}", "}  . visit ( classLoader )  ;", "return   DefaultClassPath . of ( implementationClassPath )  ;", "}", "METHOD_END"], "methodName": ["getClasspath"], "fileName": "org.gradle.internal.classloader.ClasspathUtil"}, {"methodBody": ["METHOD_START", "{", "URI   location ;", "try    {", "CodeSource   codeSource    =    targetClass . getProtectionDomain (  )  . getCodeSource (  )  ;", "if    (  ( codeSource    !  =    null )     &  &     (  ( codeSource . getLocation (  )  )     !  =    null )  )     {", "location    =     . toURI ( codeSource . getLocation (  )  )  ;", "if    ( location . getScheme (  )  . equals (  \" file \"  )  )     {", "return   new   File ( location )  ;", "}", "}", "if    (  ( targetClass . getClassLoader (  )  )     !  =    null )     {", "String   resourceName    =     ( targetClass . getName (  )  . replace (  '  .  '  ,     '  /  '  )  )     +     \"  . class \"  ;", "URL   resource    =    targetClass . getClassLoader (  )  . getResource ( resourceName )  ;", "if    ( resource    !  =    null )     {", "return    . getClasspathForResource ( resource ,    resourceName )  ;", "}", "}", "throw   new   GradleException ( String . format (  \" Cannot   determine   classpath   for   class    % s .  \"  ,    targetClass . getName (  )  )  )  ;", "}    catch    ( URISyntaxException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["getClasspathForClass"], "fileName": "org.gradle.internal.classloader.ClasspathUtil"}, {"methodBody": ["METHOD_START", "{", "try    {", "Class   clazz    =    Class . forName ( targetClassName )  ;", "if    (  ( clazz . getClassLoader (  )  )     =  =    null )     {", "return   null ;", "} else    {", "return    . getClasspathForClass ( Class . forName ( targetClassName )  )  ;", "}", "}    catch    ( ClassNotFoundException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["getClasspathForClass"], "fileName": "org.gradle.internal.classloader.ClasspathUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( classLoader    =  =    null )     {", "return    . getClasspathForResource ( ClassLoader . getSystemResource ( name )  ,    name )  ;", "} else    {", "return    . getClasspathForResource ( classLoader . getResource ( name )  ,    name )  ;", "}", "}", "METHOD_END"], "methodName": ["getClasspathForResource"], "fileName": "org.gradle.internal.classloader.ClasspathUtil"}, {"methodBody": ["METHOD_START", "{", "URI   location ;", "try    {", "location    =     . toURI ( resource )  ;", "String   path    =    location . getPath (  )  ;", "if    ( location . getScheme (  )  . equals (  \" file \"  )  )     {", "assert   path . endsWith (  (  \"  /  \"     +    name )  )  ;", "return   new   File ( path . substring (  0  ,     (  ( path . length (  )  )     -     (  ( name . length (  )  )     +     1  )  )  )  )  ;", "} else", "if    ( location . getScheme (  )  . equals (  \" jar \"  )  )     {", "String   schemeSpecificPart    =    location . getRawSchemeSpecificPart (  )  ;", "int   pos    =    schemeSpecificPart . indexOf (  \"  !  \"  )  ;", "if    ( pos    >     0  )     {", "assert   schemeSpecificPart . substring (  ( pos    +     1  )  )  . equals (  (  \"  /  \"     +    name )  )  ;", "URI   jarFile    =    new   URI ( schemeSpecificPart . substring (  0  ,    pos )  )  ;", "if    ( jarFile . getScheme (  )  . equals (  \" file \"  )  )     {", "return   new   File ( jarFile . getPath (  )  )  ;", "}", "}", "}", "}    catch    ( URISyntaxException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "throw   new   GradleException ( String . format (  \" Cannot   determine   classpath   for   resource    '  % s '    from   location    '  % s '  .  \"  ,    name ,    location )  )  ;", "}", "METHOD_END"], "methodName": ["getClasspathForResource"], "fileName": "org.gradle.internal.classloader.ClasspathUtil"}, {"methodBody": ["METHOD_START", "{", "try    {", "retu   url . toURI (  )  ;", "}    catch    ( URISyntaxException   e )     {", "try    {", "retu   new   URL ( url . getProtocol (  )  ,    url . getHost (  )  ,    url . getPort (  )  ,    url . getFile (  )  . replace (  \"     \"  ,     \"  %  2  0  \"  )  )  . toURI (  )  ;", "}    catch    ( MalformedURLException   e 1  )     {", "throw   new   UncheckedException ( e 1  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["toURI"], "fileName": "org.gradle.internal.classloader.ClasspathUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( file    !  =    null )     {", "return   Path . plus ( Collections . singletonList ( file )  )  ;", "}", "return   Path ;", "}", "METHOD_END"], "methodName": ["addToClassPath"], "fileName": "org.gradle.internal.classloader.DefaultClassLoaderFactory"}, {"methodBody": ["METHOD_START", "{", "return   new   VisitableURLClassLoader ( parent ,    classPath )  ;", "}", "METHOD_END"], "methodName": ["doCreateClassLoader"], "fileName": "org.gradle.internal.classloader.DefaultClassLoaderFactory"}, {"methodBody": ["METHOD_START", "{", "return   new   FilteringClassLoader ( parent ,    spec )  ;", "}", "METHOD_END"], "methodName": ["doCreateFilteringClassLoader"], "fileName": "org.gradle.internal.classloader.DefaultClassLoaderFactory"}, {"methodBody": ["METHOD_START", "{", "classLoaderSpec . allowClass ( locator . getFactory ( serviceType )  . getImplementationClass (  )  )  ;", "classLoaderSpec . allowResource (  (  \" META - INF / services /  \"     +     ( serviceType . getName (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["makeServiceVisible"], "fileName": "org.gradle.internal.classloader.DefaultClassLoaderFactory"}, {"methodBody": ["METHOD_START", "{", "return    ( ClassLoader . getSystemResource (  \" META - INF / services / SAXParserFactory \"  )  )     !  =    null ;", "}", "METHOD_END"], "methodName": ["needJaxpImpl"], "fileName": "org.gradle.internal.classloader.DefaultClassLoaderFactory"}, {"methodBody": ["METHOD_START", "{", "SAXParserFactory . newInstance (  )  . newSAXParser (  )  ;", "DocumentBuil . newInstance (  )  . newDocumentBuilder (  )  ;", "DatatypeFactory . newInstance (  )  . newXMLGregorianCalendar (  )  ;", "TransformerFactory . newInstance (  )  . newTransformer (  )  ;", "SchemaFactory . newInstance ( XMLConstants . W 3 C _ XML _ SCHEMA _ NS _ URI )  ;", "XPathFactory . newInstance (  )  . newXPath (  )  ;", "}", "METHOD_END"], "methodName": ["doStuff"], "fileName": "org.gradle.internal.classloader.DefaultClassLoaderFactoryTestHelper"}, {"methodBody": ["METHOD_START", "{", "int   count    =    items . size (  )  ;", "hasher . putInt ( count )  ;", "if    ( count    =  =     0  )     {", "return ;", "}", "String [  ]    sortedItems    =    items . toArray ( new   String [ count ]  )  ;", "Arrays . sort ( sortedItems )  ;", "for    ( String   item    :    sortedItems )     {", "hasher . putInt (  0  )  ;", "hasher . putString ( item )  ;", "}", "}", "METHOD_END"], "methodName": ["addToHash"], "fileName": "org.gradle.internal.classloader.DefaultHashingClassLoaderFactory"}, {"methodBody": ["METHOD_START", "{", "return   classpathHasher . hash ( classPath )  ;", "}", "METHOD_END"], "methodName": ["calculateClassLoaderHash"], "fileName": "org.gradle.internal.classloader.DefaultHashingClassLoaderFactory"}, {"methodBody": ["METHOD_START", "{", "Hasher   hasher    =    Hashing . md 5  (  )  . newHasher (  )  ;", ". addToHash ( hasher ,    spec . getClassNames (  )  )  ;", ". addToHash ( hasher ,    spec . getPackageNames (  )  )  ;", ". addToHash ( hasher ,    spec . getPackagePrefixes (  )  )  ;", ". addToHash ( hasher ,    spec . getResourcePrefixes (  )  )  ;", ". addToHash ( hasher ,    spec . getResourceNames (  )  )  ;", ". addToHash ( hasher ,    spec . getDisallowedClassNames (  )  )  ;", ". addToHash ( hasher ,    spec . getDisallowedPackagePrefixes (  )  )  ;", "return   hasher . hash (  )  ;", "}", "METHOD_END"], "methodName": ["calculateFilterSpecHash"], "fileName": "org.gradle.internal.classloader.DefaultHashingClassLoaderFactory"}, {"methodBody": ["METHOD_START", "{", "for    ( String   packagePrefix    :    disallowedPackagePrefixes )     {", "if    ( pkg . getName (  )  . startsWith ( packagePrefix )  )     {", "return   false ;", "}", "}", "if    (  . SYSTEM _ PACKAGES . contains ( pkg . getName (  )  )  )     {", "return   true ;", "}", "if    ( packageNames . contains ( pkg . getName (  )  )  )     {", "return   true ;", "}", "for    ( String   packagePrefix    :    packagePrefixes )     {", "if    ( pkg . getName (  )  . startsWith ( packagePrefix )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["allowed"], "fileName": "org.gradle.internal.classloader.FilteringClassLoader"}, {"methodBody": ["METHOD_START", "{", "if    ( resourceNames . contains ( resourceName )  )     {", "return   true ;", "}", "for    ( St   resourcePrefix    :    resourcePrefixes )     {", "if    ( resourceName . startsWith ( resourcePrefix )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["allowed"], "fileName": "org.gradle.internal.classloader.FilteringClassLoader"}, {"methodBody": ["METHOD_START", "{", "if    ( disallowedClassNames . contains ( className )  )     {", "return   false ;", "}", "for    ( String   packagePrefix    :    disallowedPackagePrefixes )     {", "if    ( className . startsWith ( packagePrefix )  )     {", "return   false ;", "}", "}", "if    ( classNames . contains ( className )  )     {", "return   true ;", "}", "for    ( String   packagePrefix    :    packagePrefixes )     {", "if    ( className . startsWith ( packagePrefix )  )     {", "return   true ;", "}", "if    (  ( packagePrefix . startsWith (  . DEFAULT _ PACKAGE )  )     &  &     ( isInDefaultPackage ( className )  )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["classAllowed"], "fileName": "org.gradle.internal.classloader.FilteringClassLoader"}, {"methodBody": ["METHOD_START", "{", "return    !  ( className . contains (  \"  .  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["isInDefaultPackage"], "fileName": "org.gradle.internal.classloader.FilteringClassLoader"}, {"methodBody": ["METHOD_START", "{", "visitor . visitSpec ( new   FilteringClassLoader . Spec ( classNames ,    packageNames ,    packagePrefixes ,    resourcePrefixes ,    resourceNames ,    disallowedClassNames ,    disallowedPackagePrefixes )  )  ;", "visitor . visitParent ( getParent (  )  )  ;", "}", "METHOD_END"], "methodName": ["visit"], "fileName": "org.gradle.internal.classloader.FilteringClassLoader"}, {"methodBody": ["METHOD_START", "{", "parents . add ( parent )  ;", "}", "METHOD_END"], "methodName": ["addParent"], "fileName": "org.gradle.internal.classloader.MultiParentClassLoader"}, {"methodBody": ["METHOD_START", "{", "return   ImmutableList . copyOf ( parents )  ;", "}", "METHOD_END"], "methodName": ["getParents"], "fileName": "org.gradle.internal.classloader.MultiParentClassLoader"}, {"methodBody": ["METHOD_START", "{", "visitor . visitSpec ( new   MultiParentClassLoader . Spec (  )  )  ;", "for    ( ClassLoader   parent    :    parents )     {", "visitor . visitParent ( parent )  ;", "}", "}", "METHOD_END"], "methodName": ["visit"], "fileName": "org.gradle.internal.classloader.MultiParentClassLoader"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["generateMissingClass"], "fileName": "org.gradle.internal.classloader.TransformingClassLoader"}, {"methodBody": ["METHOD_START", "{", "InputStream   inputStream    =    resource . openStream (  )  ;", "try    {", "return   ByteStreams . toByteArray ( inputStream )  ;", "}    fily    {", "inputStream . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["loadBytecode"], "fileName": "org.gradle.internal.classloader.TransformingClassLoader"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["shouldTransform"], "fileName": "org.gradle.internal.classloader.TransformingClassLoader"}, {"methodBody": ["METHOD_START", "{", "URL [  ]    urls    =    getURLs (  )  ;", "visitor . visitSpec ( new    . Spec ( Arrays . asList ( urls )  )  )  ;", "visitor . visitClassPath ( urls )  ;", "visitor . visitParent ( getParent (  )  )  ;", "}", "METHOD_END"], "methodName": ["visit"], "fileName": "org.gradle.internal.classloader.VisitableURLClassLoader"}, {"methodBody": ["METHOD_START", "{", "Set < File >    result    =    new   LinkedHashSet < File >  (  )  ;", "result . addAll ( files 1  )  ;", "result . addAll ( files 2  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["concat"], "fileName": "org.gradle.internal.classpath.DefaultClassPath"}, {"methodBody": ["METHOD_START", "{", "return   files ;", "}", "METHOD_END"], "methodName": ["getAsFiles"], "fileName": "org.gradle.internal.classpath.DefaultClassPath"}, {"methodBody": ["METHOD_START", "{", "List < URI >    urls    =    new   ArrayList < URI >  (  )  ;", "for    ( Fifi :    fi )     {", "urls . add ( fitoURI (  )  )  ;", "}", "return   urls ;", "}", "METHOD_END"], "methodName": ["getAsURIs"], "fileName": "org.gradle.internal.classpath.DefaultClassPath"}, {"methodBody": ["METHOD_START", "{", "Collection < URL >    result    =    getAsURLs (  )  ;", "return   result . toArray ( new   URL [  0  ]  )  ;", "}", "METHOD_END"], "methodName": ["getAsURLArray"], "fileName": "org.gradle.internal.classpath.DefaultClassPath"}, {"methodBody": ["METHOD_START", "{", "List < URL >    urls    =    new   ArrayList < URL >  (  )  ;", "for    ( Fifi :    fi )     {", "try    {", "urls . add ( fitoURI (  )  . toURL (  )  )  ;", "}    catch    ( MalformedURLException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "}", "return   urls ;", "}", "METHOD_END"], "methodName": ["getAsURLs"], "fileName": "org.gradle.internal.classpath.DefaultClassPath"}, {"methodBody": ["METHOD_START", "{", "return   files . isEmpty (  )  ;", "}", "METHOD_END"], "methodName": ["isEmpty"], "fileName": "org.gradle.internal.classpath.DefaultClassPath"}, {"methodBody": ["METHOD_START", "{", "if    (  ( files    =  =    null )     |  |     ( files . isEmpty (  )  )  )     {", "return   ClassPath . EMPTY ;", "} else    {", "return   new    ( files )  ;", "}", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.internal.classpath.DefaultClassPath"}, {"methodBody": ["METHOD_START", "{", "if    ( other . isEmpty (  )  )     {", "return   this ;", "}", "return   new    ( concat ( files ,    other )  )  ;", "}", "METHOD_END"], "methodName": ["plus"], "fileName": "org.gradle.internal.classpath.DefaultClassPath"}, {"methodBody": ["METHOD_START", "{", "if    ( files . isEmpty (  )  )     {", "return   other ;", "}", "if    ( other . isEmpty (  )  )     {", "return   this ;", "}", "return   new    ( concat ( files ,    other . getAsFiles (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["plus"], "fileName": "org.gradle.internal.classpath.DefaultClassPath"}, {"methodBody": ["METHOD_START", "{", "for    ( Object   closeable    :    elements )     {", "add ( closeable )  ;", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.gradle.internal.concurrent.CompositeStoppable"}, {"methodBody": ["METHOD_START", "{", "this . elements . add ( CompositeStoppable . toStoppable ( closeable )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.gradle.internal.concurrent.CompositeStoppable"}, {"methodBody": ["METHOD_START", "{", "for    ( Object   closeable    :    elements )     {", "add ( closeable )  ;", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.gradle.internal.concurrent.CompositeStoppable"}, {"methodBody": ["METHOD_START", "{", "Throwable   failure    =    null ;", "try    {", "for    ( Stoppable   element    :    elements )     {", "try    {", "element . stop (  )  ;", "}    catch    ( Throwable   throwable )     {", "if    ( failure    =  =    null )     {", "failure    =    throwable ;", "} else    {", ". LOGGER . error ( String . format (  \" Could   not   stop    % s .  \"  ,    element )  ,    throwable )  ;", "}", "}", "}", "}    finally    {", "elements . clear (  )  ;", "}", "if    ( failure    !  =    null )     {", "throw   UncheckedException . throwAsUncheckedException ( failure )  ;", "}", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "org.gradle.internal.concurrent.CompositeStoppable"}, {"methodBody": ["METHOD_START", "{", "return   new   CompositeStoppable (  )  . add ( elements )  ;", "}", "METHOD_END"], "methodName": ["stoppable"], "fileName": "org.gradle.internal.concurrent.CompositeStoppable"}, {"methodBody": ["METHOD_START", "{", "return   new   CompositeStoppable (  )  . add ( elements )  ;", "}", "METHOD_END"], "methodName": ["stoppable"], "fileName": "org.gradle.internal.concurrent.CompositeStoppable"}, {"methodBody": ["METHOD_START", "{", "if    ( object   instanceof   Stoppable )     {", "return    (  ( Stoppable )     ( object )  )  ;", "}", "if    ( object   instanceof   Closeable )     {", "final   Closeable   closeable    =     (  ( Closeable )     ( object )  )  ;", "return   new   Stoppable (  )     {", "@ Override", "public   String   toString (  )     {", "return   closeable . toString (  )  ;", "}", "public   void   stop (  )     {", "try    {", "closeable . close (  )  ;", "}    catch    ( IOException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "}", "}  ;", "}", "return    . NO _ OP _ STOPPABLE ;", "}", "METHOD_END"], "methodName": ["toStoppable"], "fileName": "org.gradle.internal.concurrent.CompositeStoppable"}, {"methodBody": ["METHOD_START", "{", "ManagedExecutor   executor    =    new   DefaultExecutorFactory . TrackedManagedExecutor ( createExecutor ( displayName )  ,    new   ExecutorPolicy . CatchAndRecordFailures (  )  )  ;", "executors . add ( executor )  ;", "return   executor ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.internal.concurrent.DefaultExecutorFactory"}, {"methodBody": ["METHOD_START", "{", "DefaultExecutorFactory . TrackedManagedExecutor   executor    =    new   DefaultExecutorFactory . TrackedManagedExecutor ( createExecutor ( displayName ,    fixedSize )  ,    new   ExecutorPolicy . CatchAndRecordFailures (  )  )  ;", "executors . add ( executor )  ;", "return   executor ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.internal.concurrent.DefaultExecutorFactory"}, {"methodBody": ["METHOD_START", "{", "return   Executors . newCachedThreadPool ( new   ThreadFactoryImpl ( displayName )  )  ;", "}", "METHOD_END"], "methodName": ["createExecutor"], "fileName": "org.gradle.internal.concurrent.DefaultExecutorFactory"}, {"methodBody": ["METHOD_START", "{", "return   Executors . newFixedThreadPool ( fixedSize ,    new   ThreadFactoryImpl ( displayName )  )  ;", "}", "METHOD_END"], "methodName": ["createExecutor"], "fileName": "org.gradle.internal.concurrent.DefaultExecutorFactory"}, {"methodBody": ["METHOD_START", "{", "return   new   ScheduledThreadPoolExecutor ( fixedSize ,    new   ThreadFactoryImpl ( displayName )  )  ;", "}", "METHOD_END"], "methodName": ["createScheduledExecutor"], "fileName": "org.gradle.internal.concurrent.DefaultExecutorFactory"}, {"methodBody": ["METHOD_START", "{", "try    {", "CompositeStoppable . stoppable ( es )  . stop (  )  ;", "}    finally    {", "es . clear (  )  ;", "}", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "org.gradle.internal.concurrent.DefaultExecutorFactory"}, {"methodBody": ["METHOD_START", "{", "return   EqualsBuilder . reflectionEquals ( this ,    obj )  ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "org.gradle.internal.concurrent.DefaultParallelismConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   HashCodeBuilder . reflectionHashCode ( this )  ;", "}", "METHOD_END"], "methodName": ["hashCode"], "fileName": "org.gradle.internal.concurrent.DefaultParallelismConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   GradleThread . GRADLE _ MANAGED . get (  )  ;", "}", "METHOD_END"], "methodName": ["isManaged"], "fileName": "org.gradle.internal.concurrent.GradleThread"}, {"methodBody": ["METHOD_START", "{", "GradleThread . GRADLE _ MANAGED . set ( Boolean . TRUE )  ;", "}", "METHOD_END"], "methodName": ["setManaged"], "fileName": "org.gradle.internal.concurrent.GradleThread"}, {"methodBody": ["METHOD_START", "{", "GradleThread . GRADLE _ MANAGED . set ( Boolean . FALSE )  ;", "}", "METHOD_END"], "methodName": ["setUnmanaged"], "fileName": "org.gradle.internal.concurrent.GradleThread"}, {"methodBody": ["METHOD_START", "{", "executor . execute ( trackedCommand ( command )  )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "org.gradle.internal.concurrent.ManagedExecutorImpl"}, {"methodBody": ["METHOD_START", "{", "executor . shutdown (  )  ;", "}", "METHOD_END"], "methodName": ["requestStop"], "fileName": "org.gradle.internal.concurrent.ManagedExecutorImpl"}, {"methodBody": ["METHOD_START", "{", "stop ( Integer . MAX _ VALUE ,    TimeUnit . SECONDS )  ;", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "org.gradle.internal.concurrent.ManagedExecutorImpl"}, {"methodBody": ["METHOD_START", "{", "requestStop (  )  ;", "if    (  ( executing . get (  )  )     !  =    null )     {", "throw   new   IllegalStateException (  \" Cannot   stop   this   executor   from   an   executor   thread .  \"  )  ;", "}", "try    {", "if    (  !  ( executor . awaitTermination ( timeoutValue ,    timeoutUnits )  )  )     {", "executor . shutdownNow (  )  ;", "throw   new   IllegalStateException (  \" Timeout   waiting   for      jobs   to   complete .  \"  )  ;", "}", "}    catch    ( InterruptedException   e )     {", "throw   new   UncheckedException ( e )  ;", "}", "executorPolicy . onStop (  )  ;", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "org.gradle.internal.concurrent.ManagedExecutorImpl"}, {"methodBody": ["METHOD_START", "{", "return   new   Runnable (  )     {", "public   void   run (  )     {", "executing . set ( command )  ;", "try    {", "ePolicy . onExecute ( command )  ;", "}    finally    {", "executing . set ( null )  ;", "}", "}", "}  ;", "}", "METHOD_END"], "methodName": ["trackedCommand"], "fileName": "org.gradle.internal.concurrent.ManagedExecutorImpl"}, {"methodBody": ["METHOD_START", "{", "return   new   Callable < V >  (  )     {", "public   V   call (  )    throws   Exception    {", "executing . set ( command )  ;", "try    {", "return   ePolicy . onExecute ( command )  ;", "}    finally    {", "executing . set ( null )  ;", "}", "}", "}  ;", "}", "METHOD_END"], "methodName": ["trackedCommand"], "fileName": "org.gradle.internal.concurrent.ManagedExecutorImpl"}, {"methodBody": ["METHOD_START", "{", "lock . lock (  )  ;", "try    {", "if    (  ( state )     =  =     (  . State . RUNNING )  )     {", "if    ( usages . isEmpty (  )  )     {", "state    =     . State . STOPPED ;", "} else    {", "state    =     . State . STOPPING ;", "}", "}", "}    finally    {", "lock . unlock (  )  ;", "}", "}", "METHOD_END"], "methodName": ["requestStop"], "fileName": "org.gradle.internal.concurrent.ServiceLifecycle"}, {"methodBody": ["METHOD_START", "{", "lock . lock (  )  ;", "try    {", "if    ( usages . containsKey ( Thread . currentThread (  )  )  )     {", "throw   new   IllegalStateException ( String . format (  \" Cannot   stop    % s   from   a   thread   that   is   using   it .  \"  ,    displayName )  )  ;", "}", "if    (  ( state )     =  =     (  . State . RUNNING )  )     {", "state    =     . State . STOPPING ;", "}", "while    (  !  ( usages . isEmpty (  )  )  )     {", "try    {", "condition . await (  )  ;", "}    catch    ( InterruptedException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "}", "if    (  ( state )     !  =     (  . State . STOPPED )  )     {", "state    =     . State . STOPPED ;", "}", "}    finally    {", "lock . unlock (  )  ;", "}", "}", "METHOD_END"], "methodName": ["stop"], "fileName": "org.gradle.internal.concurrent.ServiceLifecycle"}, {"methodBody": ["METHOD_START", "{", "use ( Factories . toFactory ( runnable )  )  ;", "}", "METHOD_END"], "methodName": ["use"], "fileName": "org.gradle.internal.concurrent.ServiceLifecycle"}, {"methodBody": ["METHOD_START", "{", "lock . lock (  )  ;", "try    {", "switch    ( state )     {", "case   STOPPING    :", "throw   new   IllegalStateException ( String . format (  \" Cannot   use    % s   as   it   is   currently   stopping .  \"  ,    displayName )  )  ;", "case   STOPPED    :", "throw   new   IllegalStateException ( String . format (  \" Cannot   use    % s   as   it   has   been   stopped .  \"  ,    displayName )  )  ;", "}", "Integer   depth    =    usages . get ( Thread . currentThread (  )  )  ;", "if    ( depth    =  =    null )     {", "usages . put ( Thread . currentThread (  )  ,     1  )  ;", "} else    {", "usages . put ( Thread . currentThread (  )  ,     ( depth    +     1  )  )  ;", "}", "}    finally    {", "lock . unlock (  )  ;", "}", "try    {", "return   factory . create (  )  ;", "}    finally    {", "lock . lock (  )  ;", "try    {", "Integer   depth    =    usages . remove ( Thread . currentThread (  )  )  ;", "if    ( depth    >     1  )     {", "usages . put ( Thread . currentThread (  )  ,     ( depth    -     1  )  )  ;", "}", "if    ( usages . isEmpty (  )  )     {", "condition . signalAll (  )  ;", "if    (  ( state )     =  =     (  . State . STOPPING )  )     {", "state    =     . State . STOPPED ;", "}", "}", "}    finally    {", "lock . unlock (  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["use"], "fileName": "org.gradle.internal.concurrent.ServiceLifecycle"}, {"methodBody": ["METHOD_START", "{", "lock . lock (  )  ;", "try    {", "operation . run (  )  ;", "}    fily    {", "lock . unlock (  )  ;", "}", "}", "METHOD_END"], "methodName": ["synchronize"], "fileName": "org.gradle.internal.concurrent.Synchronizer"}, {"methodBody": ["METHOD_START", "{", "lock . lock (  )  ;", "try    {", "return   factory . create (  )  ;", "}    fily    {", "lock . unlock (  )  ;", "}", "}", "METHOD_END"], "methodName": ["synchronize"], "fileName": "org.gradle.internal.concurrent.Synchronizer"}, {"methodBody": ["METHOD_START", "{", "Thread   thread    =    new   Thread ( new   ThreadFactoryImpl . ManagedThreadRunnable ( r )  )  ;", "long   count    =    counter . incrementAndGet (  )  ;", "if    ( count    =  =     1  )     {", "thread . setName ( displayName )  ;", "} else    {", "thread . setName (  (  (  ( displayName )     +     \"    Thread    \"  )     +    count )  )  ;", "}", "return   thread ;", "}", "METHOD_END"], "methodName": ["newThread"], "fileName": "org.gradle.internal.concurrent.ThreadFactoryImpl"}, {"methodBody": ["METHOD_START", "{", "return   causes ;", "}", "METHOD_END"], "methodName": ["getCauses"], "fileName": "org.gradle.internal.exceptions.DefaultMultiCauseException"}, {"methodBody": ["METHOD_START", "{", "this . causes . clear (  )  ;", "for    ( Throwable   cause    :    causes )     {", "this . causes . add ( cause )  ;", "}", "}", "METHOD_END"], "methodName": ["initCauses"], "fileName": "org.gradle.internal.exceptions.DefaultMultiCauseException"}, {"methodBody": ["METHOD_START", "{", "inputStream . defaultReadObject (  )  ;", "hideCause    =    threadLocal (  )  ;", "}", "METHOD_END"], "methodName": ["readObject"], "fileName": "org.gradle.internal.exceptions.DefaultMultiCauseException"}, {"methodBody": ["METHOD_START", "{", "return   new   ThreadLocal < Boolean >  (  )     {", "@ Override", "protected   Boolean   initialValue (  )     {", "return   false ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["threadLocal"], "fileName": "org.gradle.internal.exceptions.DefaultMultiCauseException"}, {"methodBody": ["METHOD_START", "{", "List < String >    formatted    =    new   ArrayList < String >  (  )  ;", "for    (  . Candidate   candidate    :    candidates . values (  )  )     {", "if    ( candidate . examples . isEmpty (  )  )     {", "formatted . add ( candidate . description )  ;", "} else    {", "formatted . add ( String . format (  \"  % s ,    for   example    % s .  \"  ,    candidate . description ,    Joiner . on (  \"  ,     \"  )  . join ( candidate . examples )  )  )  ;", "}", "}", "return   formatted ;", "}", "METHOD_END"], "methodName": ["format"], "fileName": "org.gradle.internal.exceptions.FormattingDiagnosticsVisitor"}, {"methodBody": ["METHOD_START", "{", "return   format ( candidates )  ;", "}", "METHOD_END"], "methodName": ["getCandidates"], "fileName": "org.gradle.internal.exceptions.FormattingDiagnosticsVisitor"}, {"methodBody": ["METHOD_START", "{", "return   values ;", "}", "METHOD_END"], "methodName": ["getValues"], "fileName": "org.gradle.internal.exceptions.ValueCollectingDiagnosticsVisitor"}, {"methodBody": ["METHOD_START", "{", "return   DefaultFileHierarchySet . EMPTY ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.internal.file.DefaultFileHierarchySet"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultFileHierarchySet . PrefixFileSet ( rootDir )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.internal.file.DefaultFileHierarchySet"}, {"methodBody": ["METHOD_START", "{", "FileHierarchySet   set    =    DefaultFileHierarchySet . EMPTY ;", "for    ( File   rootDir    :    rootDirs )     {", "set    =    set . plus ( rootDir )  ;", "}", "return   set ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.internal.file.DefaultFileHierarchySet"}, {"methodBody": ["METHOD_START", "{", "if    (  ( ch    >  =     '  0  '  )     &  &     ( ch    <  =     '  9  '  )  )     {", "return   ch    -     '  0  '  ;", "}", "if    (  ( ch    >  =     ' a '  )     &  &     ( ch    <  =     ' f '  )  )     {", "return    ( ch    -     ' a '  )     +     1  0  ;", "}", "if    (  ( ch    >  =     ' A '  )     &  &     ( ch    <  =     ' F '  )  )     {", "return    ( ch    -     ' A '  )     +     1  0  ;", "}", "throw   new   IllegalArgumentException (  (  \" Illegal   hexadecimal   charac :     \"     +    ch )  )  ;", "}", "METHOD_END"], "methodName": ["decode"], "fileName": "org.gradle.internal.hash.HashCode"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( bytes . length )     <     ( HashCode . MIN _ NUMBER _ OF _ BYTES )  )     |  |     (  ( bytes . length )     >     ( HashCode . MAX _ NUMBER _ OF _ BYTES )  )  )     {", "throw   new   IllegalArgumentException ( String . format (  \" Invalid   hash   code   length :     % d   bytes \"  ,    bytes . length )  )  ;", "}", "return   HashCode . fromBytesNoCopy ( bytes . clone (  )  )  ;", "}", "METHOD_END"], "methodName": ["fromBytes"], "fileName": "org.gradle.internal.hash.HashCode"}, {"methodBody": ["METHOD_START", "{", "return   new   HashCode ( bytes )  ;", "}", "METHOD_END"], "methodName": ["fromBytesNoCopy"], "fileName": "org.gradle.internal.hash.HashCode"}, {"methodBody": ["METHOD_START", "{", "return   HashCode . fromBytesNoCopy ( new   byte [  ]  {     (  ( byte )     ( value    >  >     2  4  )  )  ,     (  ( byte )     ( value    >  >     1  6  )  )  ,     (  ( byte )     ( value    >  >     8  )  )  ,     (  ( byte )     ( value )  )     }  )  ;", "}", "METHOD_END"], "methodName": ["fromInt"], "fileName": "org.gradle.internal.hash.HashCode"}, {"methodBody": ["METHOD_START", "{", "int   length    =    string . length (  )  ;", "if    (  (  (  ( length    %     2  )     !  =     0  )     |  |     ( length    <     (  (  . MIN _ NUMBER _ OF _ BYTES )     *     2  )  )  )     |  |     ( length    >     (  (  . MAX _ NUMBER _ OF _ BYTES )     *     2  )  )  )     {", "throw   new   IllegalArgumentException ( String . format (  \" Invalid   hash   code   length :     % d   characters \"  ,    length )  )  ;", "}", "byte [  ]    bytes    =    new   byte [ length    /     2  ]  ;", "for    ( int   i    =     0  ;    i    <    length ;    i    +  =     2  )     {", "int   ch 1     =     (  . decode ( string . charAt ( i )  )  )     <  <     4  ;", "int   ch 2     =     . decode ( string . charAt (  ( i    +     1  )  )  )  ;", "bytes [  ( i    /     2  )  ]     =     (  ( byte )     ( ch 1     +    ch 2  )  )  ;", "}", "return    . fromBytesNoCopy ( bytes )  ;", "}", "METHOD_END"], "methodName": ["fromString"], "fileName": "org.gradle.internal.hash.HashCode"}, {"methodBody": ["METHOD_START", "{", "return   bytes ;", "}", "METHOD_END"], "methodName": ["getBytes"], "fileName": "org.gradle.internal.hash.HashCode"}, {"methodBody": ["METHOD_START", "{", "return   bytes . length ;", "}", "METHOD_END"], "methodName": ["length"], "fileName": "org.gradle.internal.hash.HashCode"}, {"methodBody": ["METHOD_START", "{", "return   bytes . clone (  )  ;", "}", "METHOD_END"], "methodName": ["toByteArray"], "fileName": "org.gradle.internal.hash.HashCode"}, {"methodBody": ["METHOD_START", "{", "return   new   HashValue ( digest )  . asCompactString (  )  ;", "}", "METHOD_END"], "methodName": ["compactStringFor"], "fileName": "org.gradle.internal.hash.HashUtil"}, {"methodBody": ["METHOD_START", "{", "return   HashUtil . compactStringFor ( hashCode . getBytes (  )  )  ;", "}", "METHOD_END"], "methodName": ["compactStringFor"], "fileName": "org.gradle.internal.hash.HashUtil"}, {"methodBody": ["METHOD_START", "{", "return   HashUtil . createHash ( scriptText ,     \" MD 5  \"  )  . asCompactString (  )  ;", "}", "METHOD_END"], "methodName": ["createCompactMD5"], "fileName": "org.gradle.internal.hash.HashUtil"}, {"methodBody": ["METHOD_START", "{", "try    {", "return    . createHash ( new   FileInputStream ( file )  ,    algorithm )  ;", "}    catch    ( UncheckedIOException   e )     {", "throw   new   UncheckedIOException ( String . format (  \" Failed   to   create    % s   hash   for   file    % s .  \"  ,    algorithm ,    file . getAbsolutePath (  )  )  ,    e . getCause (  )  )  ;", "}    catch    ( FileNotFoundException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["createHash"], "fileName": "org.gradle.internal.hash.HashUtil"}, {"methodBody": ["METHOD_START", "{", "MessageDigest   messageDigest ;", "try    {", "messageDigest    =     . createMessageDigest ( algorithm )  ;", "byte [  ]    buffer    =    new   byte [  4  0  9  6  ]  ;", "try    {", "while    ( true )     {", "int   nread    =    instr . read ( buffer )  ;", "if    ( nread    <     0  )     {", "break ;", "}", "messageDigest . update ( buffer ,     0  ,    nread )  ;", "}", "}    finally    {", "instr . close (  )  ;", "}", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "return   new   HashValue ( messageDigest . digest (  )  )  ;", "}", "METHOD_END"], "methodName": ["createHash"], "fileName": "org.gradle.internal.hash.HashUtil"}, {"methodBody": ["METHOD_START", "{", "MessageDigest   messageDigest    =    HashUtil . createMessageDigest ( algorithm )  ;", "messageDigest . update ( scriptText . getBytes (  )  )  ;", "return   new   HashValue ( messageDigest . digest (  )  )  ;", "}", "METHOD_END"], "methodName": ["createHash"], "fileName": "org.gradle.internal.hash.HashUtil"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   MessageDigest . getInstance ( algithm )  ;", "}    catch    ( NoSuchAlgithmException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["createMessageDigest"], "fileName": "org.gradle.internal.hash.HashUtil"}, {"methodBody": ["METHOD_START", "{", "return   HashUtil . createHash ( new   ByteArrayInputStream ( bytes )  ,     \" SHA 1  \"  )  ;", "}", "METHOD_END"], "methodName": ["sha1"], "fileName": "org.gradle.internal.hash.HashUtil"}, {"methodBody": ["METHOD_START", "{", "return   HashUtil . createHash ( file ,     \" SHA 1  \"  )  ;", "}", "METHOD_END"], "methodName": ["sha1"], "fileName": "org.gradle.internal.hash.HashUtil"}, {"methodBody": ["METHOD_START", "{", "return   HashUtil . createHash ( inputStream ,     \" SHA 1  \"  )  ;", "}", "METHOD_END"], "methodName": ["sha1"], "fileName": "org.gradle.internal.hash.HashUtil"}, {"methodBody": ["METHOD_START", "{", "return   HashUtil . createHash ( new   ByteArrayInputStream ( bytes )  ,     \" SHA -  2  5  6  \"  )  ;", "}", "METHOD_END"], "methodName": ["sha256"], "fileName": "org.gradle.internal.hash.HashUtil"}, {"methodBody": ["METHOD_START", "{", "return   HashUtil . createHash ( file ,     \" SHA -  2  5  6  \"  )  ;", "}", "METHOD_END"], "methodName": ["sha256"], "fileName": "org.gradle.internal.hash.HashUtil"}, {"methodBody": ["METHOD_START", "{", "return   HashUtil . createHash ( inputStream ,     \" SHA -  2  5  6  \"  )  ;", "}", "METHOD_END"], "methodName": ["sha256"], "fileName": "org.gradle.internal.hash.HashUtil"}, {"methodBody": ["METHOD_START", "{", "return   digest ;", "}", "METHOD_END"], "methodName": ["asBigInteger"], "fileName": "org.gradle.internal.hash.HashValue"}, {"methodBody": ["METHOD_START", "{", "return   digest . toByteArray (  )  ;", "}", "METHOD_END"], "methodName": ["asByteArray"], "fileName": "org.gradle.internal.hash.HashValue"}, {"methodBody": ["METHOD_START", "{", "return   digest . toString (  3  6  )  ;", "}", "METHOD_END"], "methodName": ["asCompactString"], "fileName": "org.gradle.internal.hash.HashValue"}, {"methodBody": ["METHOD_START", "{", "return   digest . toString (  1  6  )  ;", "}", "METHOD_END"], "methodName": ["asHexString"], "fileName": "org.gradle.internal.hash.HashValue"}, {"methodBody": ["METHOD_START", "{", "return   Strings . padStart ( asHexString (  )  ,    expectedLength ,     '  0  '  )  ;", "}", "METHOD_END"], "methodName": ["asZeroPaddedHexString"], "fileName": "org.gradle.internal.hash.HashValue"}, {"methodBody": ["METHOD_START", "{", "if    (  ( inputString    =  =    null )     |  |     (  ( inputString . length (  )  )     =  =     0  )  )     {", "return   null ;", "}", "return   new    (  . parseInput ( inputString )  )  ;", "}", "METHOD_END"], "methodName": ["parse"], "fileName": "org.gradle.internal.hash.HashValue"}, {"methodBody": ["METHOD_START", "{", "if   putStg    =  =    null )     {", "return   null ;", "}", "Stg   cleaned    = putStg . trim (  )  . toLowerCase (  )  ;", "t   spaceIndex    =    cleaneddexOf (  '     '  )  ;", "if    ( spaceIndex    !  =     (  -  1  )  )     {", "Stg   firstPart    =    cleaned . substg (  0  ,    spaceIndex )  ;", "if    (  ( firstPart . startsWith (  \" md \"  )  )     |  |     ( firstPart . startsWith (  \" sha \"  )  )  )     {", "cleaned    =    cleaned . substg (  (  ( cleaned . lastIndexOf (  '     '  )  )     +     1  )  )  ;", "} else", "if    ( firstPart . endsWith (  \"  :  \"  )  )     {", "cleaned    =    cleaned . substg (  ( spaceIndex    +     1  )  )  . replace (  \"     \"  ,     \"  \"  )  ;", "} else    {", "cleaned    =    cleaned . substg (  0  ,    spaceIndex )  ;", "}", "}", "return   cleaned ;", "}", "METHOD_END"], "methodName": ["parseInput"], "fileName": "org.gradle.internal.hash.HashValue"}, {"methodBody": ["METHOD_START", "{", "return   Hashing . MD 5  ;", "}", "METHOD_END"], "methodName": ["md5"], "fileName": "org.gradle.internal.hash.Hashing"}, {"methodBody": ["METHOD_START", "{", "return   Hashing . SHA 1  ;", "}", "METHOD_END"], "methodName": ["sha1"], "fileName": "org.gradle.internal.hash.Hashing"}, {"methodBody": ["METHOD_START", "{", "return   hasher . hash (  )  ;", "}", "METHOD_END"], "methodName": ["hash"], "fileName": "org.gradle.internal.hash.HashingOutputStream"}, {"methodBody": ["METHOD_START", "{", "return   new   CompositeIdGenerator . CompositeId ( scope ,    generator . generateId (  )  )  ;", "}", "METHOD_END"], "methodName": ["generateId"], "fileName": "org.gradle.internal.id.CompositeIdGenerator"}, {"methodBody": ["METHOD_START", "{", "return   nextId . getAndIncrement (  )  ;", "}", "METHOD_END"], "methodName": ["generateId"], "fileName": "org.gradle.internal.id.LongIdGenerator"}, {"methodBody": ["METHOD_START", "{", "return   random . nextLong (  )  ;", "}", "METHOD_END"], "methodName": ["generateId"], "fileName": "org.gradle.internal.id.RandomLongIdGenerator"}, {"methodBody": ["METHOD_START", "{", "return   UUID . randomUUID (  )  ;", "}", "METHOD_END"], "methodName": ["generateId"], "fileName": "org.gradle.internal.id.UUIDGenerator"}, {"methodBody": ["METHOD_START", "{", "return   value ;", "}", "METHOD_END"], "methodName": ["asString"], "fileName": "org.gradle.internal.id.UniqueId"}, {"methodBody": ["METHOD_START", "{", "return   UniqueId . FACTORY ;", "}", "METHOD_END"], "methodName": ["factory"], "fileName": "org.gradle.internal.id.UniqueId"}, {"methodBody": ["METHOD_START", "{", "if    ( UniqueId . PATTERN . matcher ( string )  . matches (  )  )     {", "return   new   UniqueId ( string )  ;", "} else    {", "throw   new   IllegalArgumentException (  (  \" Invalid   unique   ID :     \"     +    string )  )  ;", "}", "}", "METHOD_END"], "methodName": ["from"], "fileName": "org.gradle.internal.id.UniqueId"}, {"methodBody": ["METHOD_START", "{", "long   msb    =    uuid . getMostSignificantBits (  )  ;", "long   lsb    =    uuid . getLeastSignificantBits (  )  ;", "byte [  ]    bytes    =    new   byte [  1  6  ]  ;", "ByteBuffer . wrap ( bytes )  . putLong ( msb )  . putLong ( lsb )  ;", "String   value    =     . ENCODING . encode ( bytes )  ;", "return   new    ( value )  ;", "}", "METHOD_END"], "methodName": ["from"], "fileName": "org.gradle.internal.id.UniqueId"}, {"methodBody": ["METHOD_START", "{", "return   UniqueId . from ( UUID . randomUUID (  )  )  ;", "}", "METHOD_END"], "methodName": ["generate"], "fileName": "org.gradle.internal.id.UniqueId"}, {"methodBody": ["METHOD_START", "{", "return   loader ;", "}", "METHOD_END"], "methodName": ["getClassLoader"], "fileName": "org.gradle.internal.io.ClassLoaderObjectInputStream"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   transformer . transform ( resource )  ;", "}    fily    {", "CompositeStoppable . stoppable ( resource )  . stop (  )  ;", "}", "}", "METHOD_END"], "methodName": ["get"], "fileName": "org.gradle.internal.io.IoUtils"}, {"methodBody": ["METHOD_START", "{", "hasBeenClosed    =    true ;", "flush (  )  ;", "handler . endOf ( null )  ;", "}", "METHOD_END"], "methodName": ["close"], "fileName": "org.gradle.internal.io.LineBufferingOutputStream"}, {"methodBody": ["METHOD_START", "{", "byte   currentByte    =     (  ( byte )     ( b    &     2  5  5  )  )  ;", "return    ( currentByte    =  =     ( lastSeparatorByte )  )     |  |     ( currentByte    =  =     '  \\ n '  )  ;", "}", "METHOD_END"], "methodName": ["endsWithLineSeparator"], "fileName": "org.gradle.internal.io.LineBufferingOutputStream"}, {"methodBody": ["METHOD_START", "{", "String   text    =    buffer . readAsString (  )  ;", "if    (  ( text . length (  )  )     >     0  )     {", "handler . text ( text )  ;", "}", "counter    =     0  ;", "}", "METHOD_END"], "methodName": ["flush"], "fileName": "org.gradle.internal.io.LineBufferingOutputStream"}, {"methodBody": ["METHOD_START", "{", "if    ( hasBeenClosed )     {", "throw   new   IOException (  \" The   s   has   been   closed .  \"  )  ;", "}", "output . write ( b )  ;", "( counter )  +  +  ;", "if    (  ( endsWithLineSeparator ( b )  )     |  |     (  ( counter )     >  =     ( lineMaxLength )  )  )     {", "flush (  )  ;", "}", "}", "METHOD_END"], "methodName": ["write"], "fileName": "org.gradle.internal.io.LineBufferingOutputStream"}, {"methodBody": ["METHOD_START", "{", "PrintStream   printStream    =    stream . get (  )  ;", "if    ( printStream    =  =    null )     {", "printStream    =    new   PrintStream ( new   Line ( handler )  )  ;", "stream . set ( printStream )  ;", "}", "return   printStream ;", "}", "METHOD_END"], "methodName": ["getStream"], "fileName": "org.gradle.internal.io.LinePerThreadBufferingOutputStream"}, {"methodBody": ["METHOD_START", "{", "return   stream . get (  )  ;", "}", "METHOD_END"], "methodName": ["maybeGetStream"], "fileName": "org.gradle.internal.io.LinePerThreadBufferingOutputStream"}, {"methodBody": ["METHOD_START", "{", "chunks . add ( chunk )  ;", "totalsUnreadInList    +  =    chunk . bytesUnread (  )  ;", "}", "METHOD_END"], "methodName": ["addChunk"], "fileName": "org.gradle.internal.io.StreamByteBuffer"}, {"methodBody": ["METHOD_START", "{", "for    ( byte [  ]    buf    :    listOfByteArrays )     {", "addChunk ( newChunk ( buf )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addChunks"], "fileName": "org.gradle.internal.io.StreamByteBuffer"}, {"methodBody": ["METHOD_START", "{", "int   spaceLeft    =    currentWriteChunk . spaceLeft (  )  ;", "if    ( spaceLeft    =  =     0  )     {", "addChunk ( currentWriteChunk )  ;", "currentWriteChunk    =    newChunk ( nextChunkSize )  ;", "if    (  ( nextChunkSize )     <     ( maxChunkSize )  )     {", "nextChunkSize    =    Math . min (  (  ( nextChunkSize )     *     2  )  ,    maxChunkSize )  ;", "}", "spaceLeft    =    currentWriteChunk . spaceLeft (  )  ;", "}", "return   spaceLeft ;", "}", "METHOD_END"], "methodName": ["allocateSpace"], "fileName": "org.gradle.internal.io.StreamByteBuffer"}, {"methodBody": ["METHOD_START", "{", "return   StreamByteBuffer . valueInRange ( value ,    StreamByteBuffer . DEFAULT _ CHUNK _ SIZE ,    StreamByteBuffer . MAX _ CHUNK _ SIZE )  ;", "}", "METHOD_END"], "methodName": ["chunkSizeInDefaultRange"], "fileName": "org.gradle.internal.io.StreamByteBuffer"}, {"methodBody": ["METHOD_START", "{", "chunks . clear (  )  ;", "currentReadChunk    =    null ;", "totalsUnreadInList    =     0  ;", "currentWriteChunk . clear (  )  ;", "}", "METHOD_END"], "methodName": ["clear"], "fileName": "org.gradle.internal.io.StreamByteBuffer"}, {"methodBody": ["METHOD_START", "{", "return   new   StreamByteBuffer ( StreamByteBuffer . chunkSizeInDefaultRange ( value )  )  ;", "}", "METHOD_END"], "methodName": ["createWithChunkSizeInDefaultRange"], "fileName": "org.gradle.internal.io.StreamByteBuffer"}, {"methodBody": ["METHOD_START", "{", "int   unreadSize    =    totalBytesUnread (  )  ;", "if    ( unreadSize    >     0  )     {", "return   readAsChar ( charset )  . toString (  )  ;", "}", "return    \"  \"  ;", "}", "METHOD_END"], "methodName": ["doReadAsString"], "fileName": "org.gradle.internal.io.StreamByteBuffer"}, {"methodBody": ["METHOD_START", "{", "return   input ;", "}", "METHOD_END"], "methodName": ["getInputStream"], "fileName": "org.gradle.internal.io.StreamByteBuffer"}, {"methodBody": ["METHOD_START", "{", "return   output ;", "}", "METHOD_END"], "methodName": ["getOutputStream"], "fileName": "org.gradle.internal.io.StreamByteBuffer"}, {"methodBody": ["METHOD_START", "{", "return    ( nextBuf    !  =    null )     &  &     ( nextBuf . hasRemaining (  )  )  ;", "}", "METHOD_END"], "methodName": ["hasRemaining"], "fileName": "org.gradle.internal.io.StreamByteBuffer"}, {"methodBody": ["METHOD_START", "{", "StreamByteBuffer   buffer    =    new   StreamByteBuffer ( StreamByteBuffer . chunkSizeInDefaultRange ( inputStream . available (  )  )  )  ;", "buffer . readFully ( inputStream )  ;", "return   buffer ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.internal.io.StreamByteBuffer"}, {"methodBody": ["METHOD_START", "{", "StreamByteBuffer   buffer    =    new   StreamByteBuffer ( StreamByteBuffer . chunkSizeInDefaultRange ( len )  )  ;", "buffer . readFrom ( inputStream ,    len )  ;", "return   buffer ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.internal.io.StreamByteBuffer"}, {"methodBody": ["METHOD_START", "{", "StreamByteBuffer   buffer    =    new   StreamByteBuffer (  )  ;", "buffer . addChunks ( listOfByteArrays )  ;", "return   buffer ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.internal.io.StreamByteBuffer"}, {"methodBody": ["METHOD_START", "{", "int   bytesUnread    =     (  ( currentReadChunk )     !  =    null )     ?    currentReadChunk . bytesUnread (  )     :     0  ;", "if    ( bytesUnread    =  =     0  )     {", "if    (  !  ( chunks . isEmpty (  )  )  )     {", "currentReadChunk    =    chunks . removeFirst (  )  ;", "bytesUnread    =    currentReadChunk . bytesUnread (  )  ;", "totalsUnreadInList    -  =    bytesUnread ;", "} else", "if    (  ( currentReadChunk )     !  =     ( currentWriteChunk )  )     {", "currentReadChunk    =    currentWriteChunk ;", "bytesUnread    =    currentReadChunk . bytesUnread (  )  ;", "} else    {", "bytesUnread    =     -  1  ;", "}", "}", "return   bytesUnread ;", "}", "METHOD_END"], "methodName": ["prepareRead"], "fileName": "org.gradle.internal.io.StreamByteBuffer"}, {"methodBody": ["METHOD_START", "{", "byte [  ]    buf    =    new   byte [ totalBytesUnread (  )  ]  ;", "input . readImpl ( buf ,     0  ,    buf . length )  ;", "return   buf ;", "}", "METHOD_END"], "methodName": ["readAsByteArray"], "fileName": "org.gradle.internal.io.StreamByteBuffer"}, {"methodBody": ["METHOD_START", "{", "CharsetDecoder   decoder    =    charset . newDecoder (  )  . onMalformedInput ( CodingErrorAction . REPLACE )  . onUnmappableCharacter ( CodingErrorAction . REPLACE )  ;", "CharBuffer   charbuffer    =    CharBuffer . allocate ( totalBytesUnread (  )  )  ;", "buf    =    null ;", "boolean   wasUnderflow    =    false ;", "nextBuf    =    null ;", "boolean   needsFlush    =    false ;", "while    (  (  ( hasRemaining ( nextBuf )  )     |  |     ( hasRemaining ( buf )  )  )     |  |     (  ( prepareRead (  )  )     !  =     (  -  1  )  )  )     {", "if    ( hasRemaining ( buf )  )     {", "if    (  ! wasUnderflow )     {", "throw   new   IllegalStateException (  \" Unexpected   state .    Buffer   has   remaining   bytes   without   underflow   in   decoding .  \"  )  ;", "}", "if    (  (  !  ( hasRemaining ( nextBuf )  )  )     &  &     (  ( prepareRead (  )  )     !  =     (  -  1  )  )  )     {", "nextBuf    =    currentReadChunk . readToNioBuffer (  )  ;", "}", "buf    =     . allocate (  (  ( buf . remaining (  )  )     +     1  )  )  . put ( buf )  ;", "buf . put ( nextBuf . get (  )  )  ;", "buf . flip (  )  ;", "} else    {", "if    ( hasRemaining ( nextBuf )  )     {", "buf    =    nextBuf ;", "} else", "if    (  ( prepareRead (  )  )     !  =     (  -  1  )  )     {", "buf    =    currentReadChunk . readToNioBuffer (  )  ;", "if    (  !  ( hasRemaining ( buf )  )  )     {", "throw   new   IllegalStateException (  \" Unexpected   state .    Buffer   is   empty .  \"  )  ;", "}", "}", "nextBuf    =    null ;", "}", "boolean   endOfInput    =     (  !  ( hasRemaining ( nextBuf )  )  )     &  &     (  ( prepareRead (  )  )     =  =     (  -  1  )  )  ;", "int   bufRemainingBefore    =    buf . remaining (  )  ;", "CoderResult   result    =    decoder . decode ( buf ,    charbuffer ,    false )  ;", "if    ( bufRemainingBefore    >     ( buf . remaining (  )  )  )     {", "needsFlush    =    true ;", "}", "if    ( endOfInput )     {", "result    =    decoder . decode (  . allocate (  0  )  ,    charbuffer ,    true )  ;", "if    (  !  ( result . isUnderflow (  )  )  )     {", "result . throwException (  )  ;", "}", "break ;", "}", "wasUnderflow    =    result . isUnderflow (  )  ;", "}", "if    ( needsFlush )     {", "CoderResult   result    =    decoder . flush ( charbuffer )  ;", "if    (  !  ( result . isUnderflow (  )  )  )     {", "result . throwException (  )  ;", "}", "}", "clear (  )  ;", "while    ( hasRemaining ( buf )  )     {", "byte   b    =    buf . get (  )  ;", "try    {", "getOutputStream (  )  . write ( b )  ;", "}    catch    ( IOException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "}", "charbuffer . flip (  )  ;", "return   charbuffer ;", "}", "METHOD_END"], "methodName": ["readAsCharBuffer"], "fileName": "org.gradle.internal.io.StreamByteBuffer"}, {"methodBody": ["METHOD_START", "{", "List < byte [  ]  >    listOfByteArrays    =    new   ArrayList < byte [  ]  >  (  (  ( chunks . size (  )  )     +     1  )  )  ;", "byte [  ]    buf ;", "while    (  ( buf    =    input . readNext (  )  )     !  =    null )     {", "if    (  ( buf . length )     >     0  )     {", "listOfByteArrays . add ( buf )  ;", "}", "}", "return   listOfByteArrays ;", "}", "METHOD_END"], "methodName": ["readAsListOfByteArrays"], "fileName": "org.gradle.internal.io.StreamByteBuffer"}, {"methodBody": ["METHOD_START", "{", "return   readAsString ( Charset . defaultCharset (  )  )  ;", "}", "METHOD_END"], "methodName": ["readAsString"], "fileName": "org.gradle.internal.io.StreamByteBuffer"}, {"methodBody": ["METHOD_START", "{", "Charset   charset    =    Charset . forName ( encoding )  ;", "return   dAsString ( charset )  ;", "}", "METHOD_END"], "methodName": ["readAsString"], "fileName": "org.gradle.internal.io.StreamByteBuffer"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   doReadAsing ( charset )  ;", "}    catch    ( CharacterCodingException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["readAsString"], "fileName": "org.gradle.internal.io.StreamByteBuffer"}, {"methodBody": ["METHOD_START", "{", "int   bytesLeft    =    len ;", "while    ( bytesLeft    >     0  )     {", "int   spaceLeft    =    allocateSpace (  )  ;", "int   limit    =    Math . min ( spaceLeft ,    bytesLeft )  ;", "int   readBytes    =    currentWriteChunk . readFrom ( input ,    limit )  ;", "if    ( readBytes    =  =     (  -  1  )  )     {", "throw   new   EOFException (  \" Unexpected   EOF \"  )  ;", "}", "bytesLeft    -  =    readBytes ;", "}", "}", "METHOD_END"], "methodName": ["readFrom"], "fileName": "org.gradle.internal.io.StreamByteBuffer"}, {"methodBody": ["METHOD_START", "{", "while    ( true )     {", "int   len    =    allocateSpace (  )  ;", "int   readBytes    =    currentWriteChunk . readFrom ( input ,    len )  ;", "if    ( readBytes    =  =     (  -  1  )  )     {", "break ;", "}", "}", "}", "METHOD_END"], "methodName": ["readFully"], "fileName": "org.gradle.internal.io.StreamByteBuffer"}, {"methodBody": ["METHOD_START", "{", "int   total    =    totalBytesUnreadInList ;", "if    (  ( currentReadChunk )     !  =    null )     {", "total    +  =    currentReadChunk . bytesUnread (  )  ;", "}", "if    (  (  ( currentWriteChunk )     !  =     ( currentReadChunk )  )     &  &     (  ( currentWriteChunk )     !  =    null )  )     {", "total    +  =    currentWriteChunk . bytesUnread (  )  ;", "}", "return   total ;", "}", "METHOD_END"], "methodName": ["totalBytesUnread"], "fileName": "org.gradle.internal.io.StreamByteBuffer"}, {"methodBody": ["METHOD_START", "{", "return   Math . min ( Math . max ( value ,    min )  ,    max )  ;", "}", "METHOD_END"], "methodName": ["valueInRange"], "fileName": "org.gradle.internal.io.StreamByteBuffer"}, {"methodBody": ["METHOD_START", "{", "while    (  ( prepareRead (  )  )     !  =     (  -  1  )  )     {", "currentReadChunk . writeTo ( target )  ;", "}", "}", "METHOD_END"], "methodName": ["writeTo"], "fileName": "org.gradle.internal.io.StreamByteBuffer"}, {"methodBody": ["METHOD_START", "{", "String   vendor    =    System . getProperty (  \" vendor \"  )  ;", "if    ( vendor . toLowerCase (  )  . startsWith (  \" apple   inc .  \"  )  )     {", "return   new   Jvm . AppleJvm ( OperatingSystem . current (  )  )  ;", "}", "if    ( vendor . toLowerCase (  )  . startsWith (  \" ibm   corporation \"  )  )     {", "return   new   Jvm . IbmJvm ( OperatingSystem . current (  )  )  ;", "}", "return   new   JImplementation ( OperatingSystem . current (  )  )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.internal.jvm.Jvm"}, {"methodBody": ["METHOD_START", "{", "Jvm    =    new   Jvm ( OperatingSystem . current (  )  ,    javaBase ,    javaVersion )  ;", "Jvm   current    =    Jvm . current (  )  ;", "return   getJavaHome (  )  . equals ( current . getJavaHome (  )  )     ?    current    :", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.internal.jvm.Jvm"}, {"methodBody": ["METHOD_START", "{", "Jvm   jvm    =    Jvm . CURRENT . get (  )  ;", "if    ( jvm    =  =    null )     {", "Jvm . CURRENT . compareAndSet ( null ,    Jvm . create (  )  )  ;", "jvm    =    Jvm . CURRENT . get (  )  ;", "}", "return   jvm ;", "}", "METHOD_END"], "methodName": ["current"], "fileName": "org.gradle.internal.jvm.Jvm"}, {"methodBody": ["METHOD_START", "{", "return   Jvm . create ( javaHome ,    javaVersion )  ;", "}", "METHOD_END"], "methodName": ["discovered"], "fileName": "org.gradle.internal.jvm.Jvm"}, {"methodBody": ["METHOD_START", "{", "File   exec    =    new   File ( getJavaHome (  )  ,     (  \" bin /  \"     +    command )  )  ;", "File   executable    =    new   File ( os . getExecutableName ( exec . getAbsolutePath (  )  )  )  ;", "if    ( executabsFile (  )  )     {", "return   executable ;", "}", "if    ( userSupplied )     {", "throw   new   JavaHomeException ( String . format (  (  \" The   supplied   \"     +     \"    I   cannot   find   the    % s   executable .    Tried   location :     % s \"  )  ,    command ,    executable . getAbsolutePath (  )  )  )  ;", "}", "File   pathExecutable    =    os . findInPath ( command )  ;", "if    ( pathExecutable    !  =    null )     {", "Jvm . LOGGER . info ( String . format (  \" Unable   to   find   the    '  % s '    executable   using   home :     % s .    We   found   it   on   the   PATH :     % s .  \"  ,    command ,    getJavaHome (  )  ,    pathExecutable )  )  ;", "return   pathExecutable ;", "}", "Jvm . LOGGER . warn (  (  \" Unable   to   find   the    '  {  }  '    executable .    Tried   the   java   home :     {  }    and   the   PATH .  \"     +     \"    We   will   assume   the   executable   can   be   ran   in   the   current   working   folder .  \"  )  ,    command ,    getJavaHome (  )  )  ;", "return   new   File ( os . getExecutableName ( command )  )  ;", "}", "METHOD_END"], "methodName": ["findExecutable"], "fileName": "org.gradle.internal.jvm.Jvm"}, {"methodBody": ["METHOD_START", "{", "File   toolsJar    =    findToolsJar ( javaBase )  ;", "if    ( toolsJar    !  =    null )     {", "return   toolsJar . getParentFile (  )  . getParentFile (  )  ;", "} else", "if    (  ( getName (  )  . equalsIgnoreCase (  \" jre \"  )  )     &  &     ( new   File ( getParentFile (  )  ,     \" bin / java \"  )  . exists (  )  )  )     {", "return   getParentFile (  )  ;", "} else    {", "return   javaBase ;", "}", "}", "METHOD_END"], "methodName": ["findJavaHome"], "fileName": "org.gradle.internal.jvm.Jvm"}, {"methodBody": ["METHOD_START", "{", "File   toolsJar    =    new   File ( javaHome ,     \" lib / tools . jar \"  )  ;", "if    ( toolsJar . exists (  )  )     {", "return   toolsJar ;", "}", "if    ( getName (  )  . equalsIgnoreCase (  \" jre \"  )  )     {", "javaHome    =    getParentFile (  )  ;", "toolsJar    =    new   File ( javaHome ,     \" lib / tools . jar \"  )  ;", "if    ( toolsJar . exists (  )  )     {", "return   toolsJar ;", "}", "}", "if    ( os . isWindows (  )  )     {", "String   version    =    SystemProperties . getInstance (  )  . getJavaVersion (  )  ;", "if    (  ( getName (  )  . matches (  \" jre \\  \\ d +  \"  )  )     |  |     ( getName (  )  . equals (  (  \" jre \"     +    version )  )  )  )     {", "javaHome    =    new   File ( getParentFile (  )  ,     (  \" jdk \"     +    version )  )  ;", "toolsJar    =    new   File ( javaHome ,     \" lib / tools . jar \"  )  ;", "if    ( toolsJar . exists (  )  )     {", "return   toolsJar ;", "}", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["findToolsJar"], "fileName": "org.gradle.internal.jvm.Jvm"}, {"methodBody": ["METHOD_START", "{", "if    (  ( javaHome    =  =    null )     |  |     (  !  ( isDirectory (  )  )  )  )     {", "throw   new   IllegalArgumentException (  (  \" Supplied   You   supplied :     \"     +    javaHome )  )  ;", "}", "Jvm    =    Jvm . create ( javaHome ,    null )  ;", "getJavaExecutable (  )  ;", "return", "}", "METHOD_END"], "methodName": ["forHome"], "fileName": "org.gradle.internal.jvm.Jvm"}, {"methodBody": ["METHOD_START", "{", "return   findExecutable ( name )  ;", "}", "METHOD_END"], "methodName": ["getExecutable"], "fileName": "org.gradle.internal.jvm.Jvm"}, {"methodBody": ["METHOD_START", "{", "return   envVars ;", "}", "METHOD_END"], "methodName": ["getInheritableEnvironmentVariables"], "fileName": "org.gradle.internal.jvm.Jvm"}, {"methodBody": ["METHOD_START", "{", "if    (  ( javaExecutable )     !  =    null )     {", "return   javaExecutable ;", "}", "javaExecutable    =    findExecutable (  \" java \"  )  ;", "return   javaExecutable ;", "}", "METHOD_END"], "methodName": ["getJavaExecutable"], "fileName": "org.gradle.internal.jvm.Jvm"}, {"methodBody": ["METHOD_START", "{", "return   javaHome ;", "}", "METHOD_END"], "methodName": ["getJavaHome"], "fileName": "org.gradle.internal.jvm.Jvm"}, {"methodBody": ["METHOD_START", "{", "return   javaVersion ;", "}", "METHOD_END"], "methodName": ["getJavaVersion"], "fileName": "org.gradle.internal.jvm.Jvm"}, {"methodBody": ["METHOD_START", "{", "if    (  ( javacExecutable )     !  =    null )     {", "return   javacExecutable ;", "}", "javacExecutable    =    findExecutable (  \" javac \"  )  ;", "return   javacExecutable ;", "}", "METHOD_END"], "methodName": ["getJavacExecutable"], "fileName": "org.gradle.internal.jvm.Jvm"}, {"methodBody": ["METHOD_START", "{", "if    (  ( javadocExecutable )     !  =    null )     {", "return   javadocExecutable ;", "}", "javadocExecutable    =    findExecutable (  \" javadoc \"  )  ;", "return   javadocExecutable ;", "}", "METHOD_END"], "methodName": ["getJavadocExecutable"], "fileName": "org.gradle.internal.jvm.Jvm"}, {"methodBody": ["METHOD_START", "{", "File   jreDir    =    new   File ( javaBase ,     \" jre \"  )  ;", "if    ( jreDir . isDirectory (  )  )     {", "return   new   Jvm . DefaultJre ( jreDir )  ;", "} else", "if    ( api . JavaVersion . current (  )  . isJava 9 Compatible (  )  )     {", "return   null ;", "}", "return   new   Jvm . DefaultJre ( javaBase )  ;", "}", "METHOD_END"], "methodName": ["getJre"], "fileName": "org.gradle.internal.jvm.Jvm"}, {"methodBody": ["METHOD_START", "{", "if    ( isJava 9 Compatible (  )  )     {", "return   null ;", "}", "if    ( os . isWindows (  )  )     {", "File   jreDir ;", "if    ( isJava 5  (  )  )     {", "jreDir    =    new   File ( getParentFile (  )  ,     (  \" jre \"     +     ( SystemProperties . getInstance (  )  . getJavaVersion (  )  )  )  )  ;", "} else    {", "jreDir    =    new   File ( getParentFile (  )  ,     (  \" jre \"     +     ( getMajorVersion (  )  )  )  )  ;", "}", "if    ( jreDir . isDirectory (  )  )     {", "return   new   JDefaultJre ( jreDir )  ;", "}", "}", "if    (  !  ( new   File ( javaHome ,     \" jre \"  )  . isDirectory (  )  )  )     {", "return   new   JDefaultJre ( javaHome )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getStandaloneJre"], "fileName": "org.gradle.internal.jvm.Jvm"}, {"methodBody": ["METHOD_START", "{", "if    (  ( toolsJar )     !  =    null )     {", "retu   toolsJar ;", "}", "toolsJar    =    findToolsJar ( javaBase )  ;", "retu   toolsJar ;", "}", "METHOD_END"], "methodName": ["getToolsJar"], "fileName": "org.gradle.internal.jvm.Jvm"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isIbmJvm"], "fileName": "org.gradle.internal.jvm.Jvm"}, {"methodBody": ["METHOD_START", "{", "return   new   BuildOperationDescriptor . Builder ( displayName )  ;", "}", "METHOD_END"], "methodName": ["displayName"], "fileName": "org.gradle.internal.operations.BuildOperationDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   details ;", "}", "METHOD_END"], "methodName": ["getDetails"], "fileName": "org.gradle.internal.operations.BuildOperationDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   displayName ;", "}", "METHOD_END"], "methodName": ["getDisplayName"], "fileName": "org.gradle.internal.operations.BuildOperationDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.gradle.internal.operations.BuildOperationDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.internal.operations.BuildOperationDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   operationType ;", "}", "METHOD_END"], "methodName": ["getOperationType"], "fileName": "org.gradle.internal.operations.BuildOperationDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   parentId ;", "}", "METHOD_END"], "methodName": ["getParentId"], "fileName": "org.gradle.internal.operations.BuildOperationDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   progressDisplayName ;", "}", "METHOD_END"], "methodName": ["getProgressDisplayName"], "fileName": "org.gradle.internal.operations.BuildOperationDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   operation ;", "}", "METHOD_END"], "methodName": ["getOperation"], "fileName": "org.gradle.internal.operations.BuildOperationFailure"}, {"methodBody": ["METHOD_START", "{", "ref . remove (  )  ;", "}", "METHOD_END"], "methodName": ["clear"], "fileName": "org.gradle.internal.operations.CurrentBuildOperationRef"}, {"methodBody": ["METHOD_START", "{", "return   ref . get (  )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "org.gradle.internal.operations.CurrentBuildOperationRef"}, {"methodBody": ["METHOD_START", "{", "BuildOperationRef   operationState    =    get (  )  ;", "return   operationState    =  =    null    ?    null    :    operationState . getId (  )  ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.gradle.internal.operations.CurrentBuildOperationRef"}, {"methodBody": ["METHOD_START", "{", "BuildOperationRef   operationState    =    get (  )  ;", "return   operationState    =  =    null    ?    null    :    operationState . getParentId (  )  ;", "}", "METHOD_END"], "methodName": ["getParentId"], "fileName": "org.gradle.internal.operations.CurrentBuildOperationRef"}, {"methodBody": ["METHOD_START", "{", "return   CurrentBuildOperationRef . INSTANCE ;", "}", "METHOD_END"], "methodName": ["instance"], "fileName": "org.gradle.internal.operations.CurrentBuildOperationRef"}, {"methodBody": ["METHOD_START", "{", "if    ( state    =  =    null )     {", "ref . remove (  )  ;", "} else    {", "ref . set ( state )  ;", "}", "}", "METHOD_END"], "methodName": ["set"], "fileName": "org.gradle.internal.operations.CurrentBuildOperationRef"}, {"methodBody": ["METHOD_START", "{", "lock . lock (  )  ;", "try    {", "failures . add ( failure )  ;", "}    fily    {", "lock . unlock (  )  ;", "}", "}", "METHOD_END"], "methodName": ["addFailure"], "fileName": "org.gradle.internal.operations.DefaultBuildOperationQueue"}, {"methodBody": ["METHOD_START", "{", "lock . lock (  )  ;", "try    {", "pendingOperations    =     ( pendingOperations )     -    count ;", "Complete . signalAll (  )  ;", "}    finally    {", "lock . unlock (  )  ;", "}", "}", "METHOD_END"], "methodName": ["completeOperations"], "fileName": "org.gradle.internal.operations.DefaultBuildOperationQueue"}, {"methodBody": ["METHOD_START", "{", "if    (  ( failures . size (  )  )     =  =     1  )     {", "return    \" A   build   operation   failed .  \"  ;", "}", "return    \" Multiple   build      failed .  \"  ;", "}", "METHOD_END"], "methodName": ["getFailureMessage"], "fileName": "org.gradle.internal.operations.DefaultBuildOperationQueue"}, {"methodBody": ["METHOD_START", "{", "lock . lock (  )  ;", "try    {", "if    (  ( queueState )     =  =     (  . QueueState . Done )  )     {", "throw   new   IllegalStateException (  \" Cannot   wait   for   completion   more   than   once .  \"  )  ;", "}", "queueState    =     . QueueState . Finishing ;", "workAvailable . signalAll (  )  ;", "}    finally    {", "lock . unlock (  )  ;", "}", "try    {", "new   WorkerRunnable (  )  . run (  )  ;", "}    catch    ( Throwable   t )     {", "addFailure ( t )  ;", "}", "lock . lock (  )  ;", "try    {", "while    (  ( pendingOperations )     >     0  )     {", "try    {", "operationsComplete . await (  )  ;", "}    catch    ( InterruptedException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "}", "queueState    =     . QueueState . Done ;", "if    (  !  ( failures . isEmpty (  )  )  )     {", "throw   new   MultipleBuildOperationFailures (  . getFailureMessage ( failures )  ,    failures ,    logLocation )  ;", "}", "}    finally    {", "lock . unlock (  )  ;", "}", "}", "METHOD_END"], "methodName": ["waitForCompletion"], "fileName": "org.gradle.internal.operations.DefaultBuildOperationQueue"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   sb    =    new   StringBuilder ( message )  ;", "int   count    =     0  ;", "for    ( Throwable   cause    :    causes )     {", "if    (  ( count +  +  )     <     (  . MAX _ CAUSES )  )     {", "sb . append ( String . format (  \"  % n             % s \"  ,    cause . getMessage (  )  )  )  ;", "}", "}", "int   suppressedFailureCount    =    count    -     (  . MAX _ CAUSES )  ;", "if    ( suppressedFailureCount    =  =     1  )     {", "sb . append ( String . format (  \"  % n             .  .  . and    % d   more   failure .  \"  ,    suppressedFailureCount )  )  ;", "} else", "if    ( suppressedFailureCount    >     1  )     {", "sb . append ( String . format (  \"  % n             .  .  . and    % d   more   failures .  \"  ,    suppressedFailureCount )  )  ;", "}", "if    ( logLocation    !  =    null )     {", "sb . append ( String . format (  \"  % nSee   the   complete   log   at :     \"  )  )  . append ( logLocation )  ;", "}", "return   sb . toString (  )  ;", "}", "METHOD_END"], "methodName": ["format"], "fileName": "org.gradle.internal.operations.MultipleBuildOperationFailures"}, {"methodBody": ["METHOD_START", "{", "return   endTime ;", "}", "METHOD_END"], "methodName": ["getEndTime"], "fileName": "org.gradle.internal.operations.OperationFinishEvent"}, {"methodBody": ["METHOD_START", "{", "return   failure ;", "}", "METHOD_END"], "methodName": ["getFailure"], "fileName": "org.gradle.internal.operations.OperationFinishEvent"}, {"methodBody": ["METHOD_START", "{", "return   result ;", "}", "METHOD_END"], "methodName": ["getResult"], "fileName": "org.gradle.internal.operations.OperationFinishEvent"}, {"methodBody": ["METHOD_START", "{", "return   startTime ;", "}", "METHOD_END"], "methodName": ["getStartTime"], "fileName": "org.gradle.internal.operations.OperationFinishEvent"}, {"methodBody": ["METHOD_START", "{", "return   id ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "org.gradle.internal.operations.OperationIdentifier"}, {"methodBody": ["METHOD_START", "{", "return   details ;", "}", "METHOD_END"], "methodName": ["getDetails"], "fileName": "org.gradle.internal.operations.OperationProgressEvent"}, {"methodBody": ["METHOD_START", "{", "return   time ;", "}", "METHOD_END"], "methodName": ["getTime"], "fileName": "org.gradle.internal.operations.OperationProgressEvent"}, {"methodBody": ["METHOD_START", "{", "return   startTime ;", "}", "METHOD_END"], "methodName": ["getStartTime"], "fileName": "org.gradle.internal.operations.OperationStartEvent"}, {"methodBody": ["METHOD_START", "{", "if    (  ( OperatingSystem . currentOs )     =  =    null )     {", "OperatingSystem . currentOs    =    OperatingSystem . forName ( System . getProperty (  \" os . name \"  )  )  ;", "}", "return   OperatingSystem . currentOs ;", "}", "METHOD_END"], "methodName": ["current"], "fileName": "org.gradle.internal.os.OperatingSystem"}, {"methodBody": ["METHOD_START", "{", "List < File >    all    =    new   LinkedList < File >  (  )  ;", "for    ( File   dir    :    getPath (  )  )     {", "File   candidate    =    new   File ( dir ,    name )  ;", "if    ( candidatsFile (  )  )     {", "all . add ( candidate )  ;", "}", "}", "return   all ;", "}", "METHOD_END"], "methodName": ["findAllInPath"], "fileName": "org.gradle.internal.os.OperatingSystem"}, {"methodBody": ["METHOD_START", "{", "String   exeName    =    getExecutableName ( name )  ;", "if    ( exeName . contains ( File . separator )  )     {", "File   candidate    =    new   File ( exeName )  ;", "if    ( candidate . isFile (  )  )     {", "return   candidate ;", "}", "return   null ;", "}", "for    ( File   dir    :    getPath (  )  )     {", "File   candidate    =    new   File ( dir ,    exeName )  ;", "if    ( candidate . isFile (  )  )     {", "return   candidate ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["findInPath"], "fileName": "org.gradle.internal.os.OperatingSystem"}, {"methodBody": ["METHOD_START", "{", "String   osName    =    os . toLowerCase (  )  ;", "if    ( osName . contains (  \" windows \"  )  )     {", "return    . WINDOWS ;", "} else", "if    (  (  ( osName . contains (  \" mac   os   x \"  )  )     |  |     ( osName . contains (  \" darwin \"  )  )  )     |  |     ( osName . contains (  \" osx \"  )  )  )     {", "return    . MAC _ OS ;", "} else", "if    (  ( osName . contains (  \" sunos \"  )  )     |  |     ( osName . contains (  \" solaris \"  )  )  )     {", "return    . SOLARIS ;", "} else", "if    ( osName . contains (  \" linux \"  )  )     {", "return    . LINUX ;", "} else", "if    ( osName . contains (  \" freebsd \"  )  )     {", "return    . FREE _ BSD ;", "} else    {", "return    . UNIX ;", "}", "}", "METHOD_END"], "methodName": ["forName"], "fileName": "org.gradle.internal.os.OperatingSystem"}, {"methodBody": ["METHOD_START", "{", "return   osName ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.internal.os.OperatingSystem"}, {"methodBody": ["METHOD_START", "{", "String   path    =    System . getenv ( getPathVar (  )  )  ;", "if    ( path    =  =    null )     {", "return   Collections . emptyList (  )  ;", "}", "List < File >    entries    =    new   ArrayList < File >  (  )  ;", "for    ( String   entry    :    path . split ( Pattern . quote ( File . pathSeparator )  )  )     {", "entries . add ( new   File ( entry )  )  ;", "}", "return   entries ;", "}", "METHOD_END"], "methodName": ["getPath"], "fileName": "org.gradle.internal.os.OperatingSystem"}, {"methodBody": ["METHOD_START", "{", "return    \" PATH \"  ;", "}", "METHOD_END"], "methodName": ["getPathVar"], "fileName": "org.gradle.internal.os.OperatingSystem"}, {"methodBody": ["METHOD_START", "{", "return   osVersion ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "org.gradle.internal.os.OperatingSystem"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isLinux"], "fileName": "org.gradle.internal.os.OperatingSystem"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isMacOsX"], "fileName": "org.gradle.internal.os.OperatingSystem"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isUnix"], "fileName": "org.gradle.internal.os.OperatingSystem"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["isWindows"], "fileName": "org.gradle.internal.os.OperatingSystem"}, {"methodBody": ["METHOD_START", "{", "OperatingSystem . currentOs    =    null ;", "}", "METHOD_END"], "methodName": ["resetCurrent"], "fileName": "org.gradle.internal.os.OperatingSystem"}, {"methodBody": ["METHOD_START", "{", "for    ( Object   arg    :    args )     {", "args ( arg )  ;", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["args"], "fileName": "org.gradle.internal.process.ArgWriter"}, {"methodBody": ["METHOD_START", "{", "for    ( int   i    =     0  ;    i    <     ( args . length )  ;    i +  +  )     {", "Object   arg    =    args [ i ]  ;", "if    ( i    >     0  )     {", "writer . print (  '     '  )  ;", "}", "String   str    =    arg . toString (  )  ;", "if    ( backslashEscape )     {", "str    =    str . replace (  \"  \\  \\  \"  ,     \"  \\  \\  \\  \\  \"  )  . replace (  \"  \\  \"  \"  ,     \"  \\  \\  \\  \"  \"  )  ;", "}", "if    ( str . isEmpty (  )  )     {", "writer . print (  \"  \\  \"  \\  \"  \"  )  ;", "} else", "if    (  . WHITESPACE . matcher ( str )  . find (  )  )     {", "writer . print (  '  \\  \"  '  )  ;", "writer . print ( str )  ;", "writer . print (  '  \\  \"  '  )  ;", "} else    {", "writer . print ( str )  ;", "}", "}", "writer . println (  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["args"], "fileName": "org.gradle.internal.process.ArgWriter"}, {"methodBody": ["METHOD_START", "{", "return   new   Transformer < List < String >  ,    List < String >  >  (  )     {", "@ Override", "public   List < String >    transform ( List < String >    args )     {", "if    ( args . isEmpty (  )  )     {", "return   args ;", "}", "argsFile . getParentFile (  )  . mkdirs (  )  ;", "try    {", "PrintWriter   writer    =    new   PrintWriter ( argsFile )  ;", "try    {", "argWriter    =    argWriterFactory . transform ( writer )  ;", "argWriter . args ( args )  ;", "}    finally    {", "writer . close (  )  ;", "}", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( String . format (  \" Could   not   write   options   file    '  % s '  .  \"  ,    argsFile . getAbsolutePath (  )  )  ,    e )  ;", "}", "return   Collections . singletonList (  (  \"  @  \"     +     ( argsFile . getAbsolutePath (  )  )  )  )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["argsFileGenerator"], "fileName": "org.gradle.internal.process.ArgWriter"}, {"methodBody": ["METHOD_START", "{", "return   new   ArgWriter ( writer ,    true )  ;", "}", "METHOD_END"], "methodName": ["unixStyle"], "fileName": "org.gradle.internal.process.ArgWriter"}, {"methodBody": ["METHOD_START", "{", "return   new   Transformer < ArgWriter ,    PrintWriter >  (  )     {", "public   ArgWriter   transform ( PrintWriter   original )     {", "return   ArgWriter . unixStyle ( original )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["unixStyleFactory"], "fileName": "org.gradle.internal.process.ArgWriter"}, {"methodBody": ["METHOD_START", "{", "return   new   ArgWriter ( writer ,    false )  ;", "}", "METHOD_END"], "methodName": ["windowsStyle"], "fileName": "org.gradle.internal.process.ArgWriter"}, {"methodBody": ["METHOD_START", "{", "return   new   Transformer < ArgWriter ,    PrintWriter >  (  )     {", "public   ArgWriter   transform ( PrintWriter   original )     {", "return   ArgWriter . windowsStyle ( original )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["windowsStyleFactory"], "fileName": "org.gradle.internal.process.ArgWriter"}, {"methodBody": ["METHOD_START", "{", "bh . consume ( cache . get ( randomClasses [  (  (  +  +  ( i )  )     %     ( CachedConstructorsBenchmark . ARR _ LEN )  )  ]  ,    CachedConstructorsBenchmark . EMPTY )  )  ;", "}", "METHOD_END"], "methodName": ["cached"], "fileName": "org.gradle.internal.reflect.CachedConstructorsBenchmark"}, {"methodBody": ["METHOD_START", "{", "randomClasses    =    new   Class [ CachedConstructorsBenchmark . ARR _ LEN ]  ;", "for    ( int   i    =     0  ;    i    <     ( randomClasses . length )  ;    i +  +  )     {", "randomClasses [ i ]     =    CachedConstructorsBenchmark . CLAZZ _ ARRAY [ CachedConstructorsBenchmark . RANDOM . nextInt ( CachedConstructorsBenchmark . CLAZZ _ ARRAY . length )  ]  ;", "}", "}", "METHOD_END"], "methodName": ["configClasses"], "fileName": "org.gradle.internal.reflect.CachedConstructorsBenchmark"}, {"methodBody": ["METHOD_START", "{", "bh . consume ( randomClasses [  (  (  +  +  ( i )  )     %     ( CachedConstructorsBenchmark . ARR _ LEN )  )  ]  . getConstructors (  )  )  ;", "}", "METHOD_END"], "methodName": ["uncached"], "fileName": "org.gradle.internal.reflect.CachedConstructorsBenchmark"}, {"methodBody": ["METHOD_START", "{", "MutableClassDetails   classDetails    =    new   MutableClassDetails ( type )  ;", ". visitGraph ( type ,    classDetails )  ;", "return   classDetails ;", "}", "METHOD_END"], "methodName": ["inspect"], "fileName": "org.gradle.internal.reflect.ClassInspector"}, {"methodBody": ["METHOD_START", "{", "for    ( Method   method    :    type . getDeclaredMethods (  )  )     {", "cDetails . method ( method )  ;", "if    (  (  ( Modifier . isPrivate ( method . getModifiers (  )  )  )     |  |     ( Modifier . isStatic ( method . getModifiers (  )  )  )  )     |  |     ( method . isBridge (  )  )  )     {", "continue ;", "}", "PropertyAccessorType   accessorType    =    PropertyAccessorType . of ( method )  ;", "if    (  ( accessorType    =  =     ( PropertyAccessorType . GET _ GETTER )  )     |  |     ( accessorType    =  =     ( PropertyAccessorType . IS _ GETTER )  )  )     {", "String   propertyName    =    accessorType . propertyNameFor ( method )  ;", "cDetails . property ( propertyName )  . addGetter ( method )  ;", "} else", "if    ( accessorType    =  =     ( PropertyAccessorType . SETTER )  )     {", "String   propertyName    =    accessorType . propertyNameFor ( method )  ;", "cDetails . property ( propertyName )  . addSetter ( method )  ;", "} else    {", "cDetails . instanceMethod ( method )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["inspectClass"], "fileName": "org.gradle.internal.reflect.ClassInspector"}, {"methodBody": ["METHOD_START", "{", "List < Class <  ?  >  >    supers    =    Lists . newArrayList (  )  ;", "Class <  ?  >    superclass    =    current . getSuperclass (  )  ;", "while    (  ( superclass    !  =    null )     &  &     ( superclass    !  =     ( Object . class )  )  )     {", "supers . add ( superclass )  ;", "superclass    =    superclass . getSuperclass (  )  ;", "}", "return   supers . toArray ( new   Class <  ?  >  [  0  ]  )  ;", "}", "METHOD_END"], "methodName": ["superClasses"], "fileName": "org.gradle.internal.reflect.ClassInspector"}, {"methodBody": ["METHOD_START", "{", "Set < Class <  ?  >  >    seen    =    new   HashSet < Class <  ?  >  >  (  )  ;", "List < Class <  ?  >  >    queue    =    new   ArrayList < Class <  ?  >  >  (  )  ;", "queue . add ( type )  ;", "Collections . addAll ( queue ,     . superClasses ( type )  )  ;", "while    (  !  ( queue . isEmpty (  )  )  )     {", "Class <  ?  >    current    =    queue . remove (  0  )  ;", "if    (  !  ( seen . add ( current )  )  )     {", "continue ;", "}", "if    (  !  ( current . equals ( type )  )  )     {", "classDetails . superType ( current )  ;", "}", ". inspectClass ( current ,    classDetails )  ;", "Collections . addAll ( queue ,    current . getInterfaces (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["visitGraph"], "fileName": "org.gradle.internal.reflect.ClassInspector"}, {"methodBody": ["METHOD_START", "{", "return   DirectInstantiator . INSTANCE . newInstance ( type ,    params )  ;", "}", "METHOD_END"], "methodName": ["instantiate"], "fileName": "org.gradle.internal.reflect.DirectInstantiator"}, {"methodBody": ["METHOD_START", "{", "try    {", "Class <  ?  >  [  ]    argTypes    =    wrapArgs ( params )  ;", "Constructor <  ?  >    match    =    null ;", "while    ( match    =  =    null )     {", "match    =    constructorCache . get ( type ,    argTypes )  . getMethod (  )  ;", "}", "return   type . cast ( match . newInstance ( params )  )  ;", "}    catch    ( InvocationTargetException   e )     {", "throw   new   ObjionException ( type ,    e . getCause (  )  )  ;", "}    catch    ( Throwable   t )     {", "throw   new   ObjionException ( type ,    t )  ;", "}", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.gradle.internal.reflect.DirectInstantiator"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >  [  ]    result    =    new   Class <  ?  >  [ params . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( result . length )  ;    i +  +  )     {", "Object   param    =    params [ i ]  ;", "if    ( param    =  =    null )     {", "continue ;", "}", "Class <  ?  >    pType    =    param . getClass (  )  ;", "if    ( pType . isPrimitive (  )  )     {", "pType    =    JavaRionUtil . getWrapperTypeForPrimitiveType ( pType )  ;", "}", "result [ i ]     =    pType ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["wrapArgs"], "fileName": "org.gradle.internal.reflect.DirectInstantiator"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   MessageDigest . getInstance ( name )  ;", "}    catch    ( NoSuchException   e )     {", "throw   new   AssertionError (  )  ;", "}", "}", "METHOD_END"], "methodName": ["getDigest"], "fileName": "org.gradle.internal.reflect.HashingAlgorithmsBenchmark"}, {"methodBody": ["METHOD_START", "{", "HashingAlgorithmsBenchmark . HashProcessor   processor    =    processorFactory . create (  )  ;", "processor . process ( input ,    blackhole )  ;", "}", "METHOD_END"], "methodName": ["measure"], "fileName": "org.gradle.internal.reflect.HashingAlgorithmsBenchmark"}, {"methodBody": ["METHOD_START", "{", "input    =    new   byte [ hashSize ]  ;", "random . nextBytes ( input )  ;", "processorFactory    =     . HASHERS . get ( type )  ;", "}", "METHOD_END"], "methodName": ["setup"], "fileName": "org.gradle.internal.reflect.HashingAlgorithmsBenchmark"}, {"methodBody": ["METHOD_START", "{", "for    ( Method   method    :    target . getDeclaredMethods (  )  )     {", "if    (  (  ! allowStatic )     &  &     ( Modifier . isStatic ( method . getModifiers (  )  )  )  )     {", "continue ;", "}", "if    (  ( method . getName (  )  . equals ( name )  )     &  &     ( Arrays . equals ( method . getParameterTypes (  )  ,    paramTypes )  )  )     {", "return   method ;", "}", "}", "Class <  ?  >    parent    =    target . getSuperclass (  )  ;", "if    ( parent    =  =    null )     {", "throw   new   NoSuchMethodException ( String . format (  \" Could   not   find   method    % s (  % s )    on    % s .  \"  ,    name ,    StringUtils . join ( paramTypes ,     \"  ,     \"  )  ,    origTarget . getSimpleName (  )  )  )  ;", "} else    {", "return    . findMethod ( origTarget ,    parent ,    name ,    allowStatic ,    paramTypes )  ;", "}", "}", "METHOD_END"], "methodName": ["findMethod"], "fileName": "org.gradle.internal.reflect.JavaMethod"}, {"methodBody": ["METHOD_START", "{", "return   method ;", "}", "METHOD_END"], "methodName": ["getMethod"], "fileName": "org.gradle.internal.reflect.JavaMethod"}, {"methodBody": ["METHOD_START", "{", "return   method . getParameterTypes (  )  ;", "}", "METHOD_END"], "methodName": ["getParameterTypes"], "fileName": "org.gradle.internal.reflect.JavaMethod"}, {"methodBody": ["METHOD_START", "{", "try    {", "Object   result    =    m . invoke ( target ,    args )  ;", "return   returnType . cast ( result )  ;", "}    catch    ( InvocationTargetException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e . getCause (  )  )  ;", "}    catch    ( Exception   e )     {", "throw   new   GradleException ( String . format (  \" Could   not   call    % s .  % s (  )    on    % s \"  ,    m . getDeclaringClass (  )  . getSimpleName (  )  ,    m . getName (  )  ,    target )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["invoke"], "fileName": "org.gradle.internal.reflect.JavaMethod"}, {"methodBody": ["METHOD_START", "{", "return   invoke ( null ,    args )  ;", "}", "METHOD_END"], "methodName": ["invokeStatic"], "fileName": "org.gradle.internal.reflect.JavaMethod"}, {"methodBody": ["METHOD_START", "{", "return   Modifier . isStatic ( method . getModifiers (  )  )  ;", "}", "METHOD_END"], "methodName": ["isStatic"], "fileName": "org.gradle.internal.reflect.JavaMethod"}, {"methodBody": ["METHOD_START", "{", "return   JavaReflectionUtil . findAllMethodsInternal ( target ,    predicate ,    new   JavaReflectionUtil . MultiMap < String ,    Method >  (  )  ,    new   ArrayList < Method >  (  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["findAllMethods"], "fileName": "org.gradle.internal.reflect.JavaReflectionUtil"}, {"methodBody": ["METHOD_START", "{", "for    ( final   Method   method    :    target . getDeclaredMethods (  )  )     {", "List < Method >    seenWithName    =    seen . get ( method . getName (  )  )  ;", "Method   override    =    CollectionUtils . findFirst ( seenWithName ,    new   Spec < Method >  (  )     {", "public   boolean   isSatisfiedBy ( Method   potentionOverride )     {", "return    ( potentionOverride . getName (  )  . equals ( method . getName (  )  )  )     &  &     ( Arrays . equals ( potentionOverride . getParameterTypes (  )  ,    method . getParameterTypes (  )  )  )  ;", "}", "}  )  ;", "if    ( override    =  =    null )     {", "seenWithName . add ( method )  ;", "if    ( predicate . isSatisfiedBy ( method )  )     {", "collector . add ( method )  ;", "if    ( stopAtFirst )     {", "return   collector ;", "}", "}", "}", "}", "Class <  ?  >    parent    =    target . getSuperclass (  )  ;", "if    ( parent    !  =    null )     {", "return    . findAllMethodsInternal ( parent ,    predicate ,    seen ,    collector ,    stopAtFirst )  ;", "}", "return   collector ;", "}", "METHOD_END"], "methodName": ["findAllMethodsInternal"], "fileName": "org.gradle.internal.reflect.JavaReflectionUtil"}, {"methodBody": ["METHOD_START", "{", "Field [  ]    fields    =    target . getFields (  )  ;", "for    ( Field   field    :    fields )     {", "if    ( fieldName . equals ( field . getName (  )  )  )     {", "return   field ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["findField"], "fileName": "org.gradle.internal.reflect.JavaReflectionUtil"}, {"methodBody": ["METHOD_START", "{", "Method [  ]    methods    =    target . getMethods (  )  ;", "String   getter    =     . toMethodName (  \" get \"  ,    property )  ;", "String   iser    =     . toMethodName (  \" is \"  ,    property )  ;", "for    ( Method   method    :    methods )     {", "String   methodName    =    method . getName (  )  ;", "if    (  ( getter . equals ( methodName )  )     &  &     (  ( PropertyAccessorType . of ( method )  )     =  =     ( PropertyAccessorType . GET _ GETTER )  )  )     {", "return   method ;", "}", "if    (  ( iser . equals ( methodName )  )     &  &     (  ( PropertyAccessorType . of ( method )  )     =  =     ( PropertyAccessorType . IS _ GETTER )  )  )     {", "return   method ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["findGetterMethod"], "fileName": "org.gradle.internal.reflect.JavaReflectionUtil"}, {"methodBody": ["METHOD_START", "{", "List < Method >    methods    =    JavaReflectionUtil . findAllMethodsInternal ( target ,    predicate ,    new   JavaReflectionUtil . MultiMap < String ,    Method >  (  )  ,    new   ArrayList < Method >  (  1  )  ,    true )  ;", "return   methods . isEmpty (  )     ?    null    :    methods . get (  0  )  ;", "}", "METHOD_END"], "methodName": ["findMethod"], "fileName": "org.gradle.internal.reflect.JavaReflectionUtil"}, {"methodBody": ["METHOD_START", "{", "return   JavaReflectionUtil . getAnnotation ( type ,    annotationType ,    true )  ;", "}", "METHOD_END"], "methodName": ["getAnnotation"], "fileName": "org.gradle.internal.reflect.JavaReflectionUtil"}, {"methodBody": ["METHOD_START", "{", "A   annotation ;", "if    ( checkType )     {", "annotation    =    type . getAnnotation ( annotationType )  ;", "if    ( annotation    !  =    null )     {", "return   annotation ;", "}", "}", "if    (  ( annotationType . getAnnotation ( Inherited . class )  )     !  =    null )     {", "for    ( Class <  ?  >    anInterface    :    type . getInterfaces (  )  )     {", "annotation    =     . getAnnotation ( anInterface ,    annotationType ,    true )  ;", "if    ( annotation    !  =    null )     {", "return   annotation ;", "}", "}", "}", "if    (  ( type . isInterface (  )  )     |  |     ( type . equals ( Object . class )  )  )     {", "return   null ;", "} else    {", "return    . getAnnotation ( type . getSuperclass (  )  ,    annotationType ,    false )  ;", "}", "}", "METHOD_END"], "methodName": ["getAnnotation"], "fileName": "org.gradle.internal.reflect.JavaReflectionUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( type    =  =     ( Character . TYPE )  )     {", "return   Character . class ;", "} else", "if    ( type    =  =     ( Boolean . TYPE )  )     {", "return   Boolean . class ;", "} else", "if    ( type    =  =     ( Long . TYPE )  )     {", "return   Long . class ;", "} else", "if    ( type    =  =     ( Integer . TYPE )  )     {", "return   Integer . class ;", "} else", "if    ( type    =  =     ( Short . TYPE )  )     {", "return   Short . class ;", "} else", "if    ( type    =  =     ( Byte . TYPE )  )     {", "return   Byte . class ;", "} else", "if    ( type    =  =     ( Float . TYPE )  )     {", "return   Float . class ;", "} else", "if    ( type    =  =     ( Double . TYPE )  )     {", "return   Double . class ;", "}", "throw   new   IllegalArgumentExcep ( String . format (  \" Don ' t   know   the   wrapper   type   for   primitive   type    % s .  \"  ,    type )  )  ;", "}", "METHOD_END"], "methodName": ["getWrapperTypeForPrimitiveType"], "fileName": "org.gradle.internal.reflect.JavaReflectionUtil"}, {"methodBody": ["METHOD_START", "{", "try    {", "return    ( objgetClass (  )  . getMethod (  \" toString \"  )  . getDeclaringClass (  )  )     =  =     ( Objclass )  ;", "}    catch    ( NoSuchMethodException   e )     {", "throw   new   UncheckedException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["hasDefaultToString"], "fileName": "org.gradle.internal.reflect.JavaReflectionUtil"}, {"methodBody": ["METHOD_START", "{", "@ SuppressWarnings (  \" unchecked \"  )", "Class < T >    targetClass    =     (  ( Class < T >  )     ( target . getClass (  )  )  )  ;", "return    . method ( targetClass ,    returnType ,    name ,    paramTypes )  ;", "}", "METHOD_END"], "methodName": ["method"], "fileName": "org.gradle.internal.reflect.JavaReflectionUtil"}, {"methodBody": ["METHOD_START", "{", "return   new   JavaMethod < T ,    R >  ( target ,    returnType ,    name ,    paramTypes )  ;", "}", "METHOD_END"], "methodName": ["method"], "fileName": "org.gradle.internal.reflect.JavaReflectionUtil"}, {"methodBody": ["METHOD_START", "{", "return   new   JavaMethod < T ,    R >  ( returnType ,    method )  ;", "}", "METHOD_END"], "methodName": ["method"], "fileName": "org.gradle.internal.reflect.JavaReflectionUtil"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    handlerClass    =    null ;", "if    ( Version . current (  )  . is 7 Compatible (  )  )     {", "try    {", "handlerClass    =    loader . loadClass ( jdk 7 Type )  ;", "}    catch    ( ClassNotFoundException   e )     {", "}", "}", "if    ( handlerClass    =  =    null )     {", "handlerClass    =    fallbackType ;", "}", "try    {", "return   Cast . uncheckedCast ( handlerClass . newInstance (  )  )  ;", "}    catch    ( Exception   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["newInstanceOrFallback"], "fileName": "org.gradle.internal.reflect.JavaReflectionUtil"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    targetType    =    target . getClass (  )  ;", "synchronized (  . PROPERTY _ CACHE )     {", "Set < String >    cached    =     . PROPERTY _ CACHE . get ( targetType )  ;", "if    ( cached    =  =    null )     {", "cached    =    ClassInspector . inspect ( targetType )  . getPropertyNames (  )  ;", ". PROPERTY _ CACHE . put ( targetType ,    cached )  ;", "}", "return   cached ;", "}", "}", "METHOD_END"], "methodName": ["propertyNames"], "fileName": "org.gradle.internal.reflect.JavaReflectionUtil"}, {"methodBody": ["METHOD_START", "{", "@ SuppressWarnings (  \" unchecked \"  )", "Class < T >    targetClass    =     (  ( Class < T >  )     ( target . getClass (  )  )  )  ;", "return    . readableField ( targetClass ,    fieldType ,    fieldName )  ;", "}", "METHOD_END"], "methodName": ["readableField"], "fileName": "org.gradle.internal.reflect.JavaReflectionUtil"}, {"methodBody": ["METHOD_START", "{", "Field   field    =    JavaReflectionUtil . findField ( target ,    fieldName )  ;", "if    ( field    =  =    null )     {", "throw   new   NoSuchPropertyException ( String . format (  \" Could   not   find   field    '  % s '    on   class    % s .  \"  ,    fieldName ,    target . getSimpleName (  )  )  )  ;", "}", "return   new   JavaReflectionUtil . FieldBackedPropertyAccessor < T ,    F >  ( fieldName ,    fieldType ,    field )  ;", "}", "METHOD_END"], "methodName": ["readableField"], "fileName": "org.gradle.internal.reflect.JavaReflectionUtil"}, {"methodBody": ["METHOD_START", "{", "@ SuppressWarnings (  \" unchecked \"  )", "Class < T >    targetClass    =     (  ( Class < T >  )     ( target . getClass (  )  )  )  ;", "return    . readableProperty ( targetClass ,    returnType ,    property )  ;", "}", "METHOD_END"], "methodName": ["readableProperty"], "fileName": "org.gradle.internal.reflect.JavaReflectionUtil"}, {"methodBody": ["METHOD_START", "{", "final   Method   getterMethod    =    JavaReflectionUtil . findGetterMethod ( target ,    property )  ;", "if    ( getterMethod    =  =    null )     {", "throw   new   NoSuchPropertyException ( String . format (  \" Could   not   find   getter   method   for   property    '  % s '    on   class    % s .  \"  ,    property ,    target . getSimpleName (  )  )  )  ;", "}", "return   new   JavaReflectionUtil . GetterMethodBackedPropertyAccessor < T ,    F >  ( property ,    returnType ,    getterMethod )  ;", "}", "METHOD_END"], "methodName": ["readableProperty"], "fileName": "org.gradle.internal.reflect.JavaReflectionUtil"}, {"methodBody": ["METHOD_START", "{", "return   new   JavaMethod < T ,    R >  ( target ,    returnType ,    name ,    true ,    paramTypes )  ;", "}", "METHOD_END"], "methodName": ["staticMethod"], "fileName": "org.gradle.internal.reflect.JavaReflectionUtil"}, {"methodBody": ["METHOD_START", "{", "return    ( prefix    +     ( Character . toUpperCase ( propertyName . charAt (  0  )  )  )  )     +     ( propertyName . substring (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["toMethodName"], "fileName": "org.gradle.internal.reflect.JavaReflectionUtil"}, {"methodBody": ["METHOD_START", "{", "Field   field    =    JavaReflectionUtil . findField ( target ,    fieldName )  ;", "if    ( field    !  =    null )     {", "return   new   JavaReflectionUtil . FieldBackedPropertyMutator ( fieldName ,    field )  ;", "}", "throw   new   NoSuchPropertyException ( String . format (  \" Could   not   find   writeable   field    '  % s '    on   class    % s .  \"  ,    fieldName ,    target . getSimpleName (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["writeableField"], "fileName": "org.gradle.internal.reflect.JavaReflectionUtil"}, {"methodBody": ["METHOD_START", "{", "PropertyMutator   mutator    =    JavaReflectionUtil . writeablePropertyIfExists ( target ,    property ,    valueType )  ;", "if    ( mutator    !  =    null )     {", "return   mutator ;", "}", "throw   new   NoSuchPropertyException ( String . format (  \" Could   not   find   setter   method   for   property    '  % s '     % s   on   class    % s .  \"  ,    property ,     ( valueType    =  =    null    ?     \" accepting   null   value \"     :     \" of   type    \"     +     ( valueType . getSimpleName (  )  )  )  ,    target . getSimpleName (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["writeableProperty"], "fileName": "org.gradle.internal.reflect.JavaReflectionUtil"}, {"methodBody": ["METHOD_START", "{", "String   setterName    =    JavaReflectionUtil . toMethodName (  \" set \"  ,    property )  ;", "Method   method    =    MethodUtils . getMatchingAccessibleMethod ( target ,    setterName ,    new   Class <  ?  >  [  ]  {    valueType    }  )  ;", "if    ( method    !  =    null )     {", "return   new   JavaReflectionUtil . MethodBackedPropertyMutator ( property ,    method )  ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["writeablePropertyIfExists"], "fileName": "org.gradle.internal.reflect.JavaReflectionUtil"}, {"methodBody": ["METHOD_START", "{", "return   String . format (  \"  % s .  % s \"  ,    a ,    b )  ;", "}", "METHOD_END"], "methodName": ["doSomeStuff"], "fileName": "org.gradle.internal.reflect.JavaTestSubject"}, {"methodBody": ["METHOD_START", "{", "return   true ;", "}", "METHOD_END"], "methodName": ["getMyOtherBooleanProperty"], "fileName": "org.gradle.internal.reflect.JavaTestSubject"}, {"methodBody": ["METHOD_START", "{", "return   myProp ;", "}", "METHOD_END"], "methodName": ["getMyProperty"], "fileName": "org.gradle.internal.reflect.JavaTestSubject"}, {"methodBody": ["METHOD_START", "{", "return   myProp 2  ;", "}", "METHOD_END"], "methodName": ["getMyProperty2"], "fileName": "org.gradle.internal.reflect.JavaTestSubject"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["getParamProperty"], "fileName": "org.gradle.internal.reflect.JavaTestSubject"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["getPrivateProperty"], "fileName": "org.gradle.internal.reflect.JavaTestSubject"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["getProtectedProperty"], "fileName": "org.gradle.internal.reflect.JavaTestSubject"}, {"methodBody": ["METHOD_START", "{", "return   JavaTestSubject . myStaticProperty ;", "}", "METHOD_END"], "methodName": ["getStaticProperty"], "fileName": "org.gradle.internal.reflect.JavaTestSubject"}, {"methodBody": ["METHOD_START", "{", "return   myBooleanProp ;", "}", "METHOD_END"], "methodName": ["isMyBooleanProperty"], "fileName": "org.gradle.internal.reflect.JavaTestSubject"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["isNotABooleanProperty"], "fileName": "org.gradle.internal.reflect.JavaTestSubject"}, {"methodBody": ["METHOD_START", "{", "return    \" parent \"  ;", "}", "METHOD_END"], "methodName": ["overridden"], "fileName": "org.gradle.internal.reflect.JavaTestSubject"}, {"methodBody": ["METHOD_START", "{", "return    \" parent \"  ;", "}", "METHOD_END"], "methodName": ["protectedMethod"], "fileName": "org.gradle.internal.reflect.JavaTestSubject"}, {"methodBody": ["METHOD_START", "{", "myBooleanProp    =    value ;", "}", "METHOD_END"], "methodName": ["setMyBooleanProperty"], "fileName": "org.gradle.internal.reflect.JavaTestSubject"}, {"methodBody": ["METHOD_START", "{", "myProp    =    value . toString (  )  ;", "}", "METHOD_END"], "methodName": ["setMyProperty"], "fileName": "org.gradle.internal.reflect.JavaTestSubject"}, {"methodBody": ["METHOD_START", "{", "myProp    =    value ;", "}", "METHOD_END"], "methodName": ["setMyProperty"], "fileName": "org.gradle.internal.reflect.JavaTestSubject"}, {"methodBody": ["METHOD_START", "{", "myProp 2     =    value . toString (  )  ;", "}", "METHOD_END"], "methodName": ["setMyProperty2"], "fileName": "org.gradle.internal.reflect.JavaTestSubject"}, {"methodBody": ["METHOD_START", "{", "myProp 2     =    value ;", "}", "METHOD_END"], "methodName": ["setMyProperty2"], "fileName": "org.gradle.internal.reflect.JavaTestSubject"}, {"methodBody": ["METHOD_START", "{", "JavaTestSubject . myStaticProperty    =    value ;", "}", "METHOD_END"], "methodName": ["setStaticProperty"], "fileName": "org.gradle.internal.reflect.JavaTestSubject"}, {"methodBody": ["METHOD_START", "{", "throw   new   JavaTestSubject . TestCheckedException ( failure )  ;", "}", "METHOD_END"], "methodName": ["throwsCheckedException"], "fileName": "org.gradle.internal.reflect.JavaTestSubject"}, {"methodBody": ["METHOD_START", "{", "throw   failure ;", "}", "METHOD_END"], "methodName": ["throwsException"], "fileName": "org.gradle.internal.reflect.JavaTestSubject"}, {"methodBody": ["METHOD_START", "{", "return   false ;", "}", "METHOD_END"], "methodName": ["getSubclassBoolean"], "fileName": "org.gradle.internal.reflect.JavaTestSubjectSubclass"}, {"methodBody": ["METHOD_START", "{", "return   new   MethodDescription ( name )  ;", "}", "METHOD_END"], "methodName": ["name"], "fileName": "org.gradle.internal.reflect.MethodDescription"}, {"methodBody": ["METHOD_START", "{", "return   MethodDescription . name (  \"  < init >  \"  )  . owner ( constructor . getDeclaringClass (  )  )  . takes ( constructor . getGenericParameterTypes (  )  )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.internal.reflect.MethodDescription"}, {"methodBody": ["METHOD_START", "{", "return   MethodDescription . name ( method . getName (  )  )  . owner ( method . getDeclaringClass (  )  )  . returns ( method . getGenericReturnType (  )  )  . takes ( method . getGenericParameterTypes (  )  )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.internal.reflect.MethodDescription"}, {"methodBody": ["METHOD_START", "{", "this . owner    =    typeName ( owner )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["owner"], "fileName": "org.gradle.internal.reflect.MethodDescription"}, {"methodBody": ["METHOD_START", "{", "this . returnType    =    typeName ( returnType )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["returns"], "fileName": "org.gradle.internal.reflect.MethodDescription"}, {"methodBody": ["METHOD_START", "{", "this . parameterTypes    =    Iterables . transform ( Arrays . asList ( parameterTypes )  ,    new   com . google . common . base . Function < Type ,    String >  (  )     {", "@ Override", "public   String   apply ( Type   input )     {", "return   typeName ( input )  ;", "}", "}  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["takes"], "fileName": "org.gradle.internal.reflect.MethodDescription"}, {"methodBody": ["METHOD_START", "{", "if    ( type    =  =    null )     {", "turn   null ;", "}", "turn   type   instanceof   Class    ?    Cast . cast ( Class . class ,    type )  . getName (  )     :    type . toString (  )  ;", "}", "METHOD_END"], "methodName": ["typeName"], "fileName": "org.gradle.internal.reflect.MethodDescription"}, {"methodBody": ["METHOD_START", "{", "MethodSignature   methodSignature    =    new   MethodSignature ( method . getName (  )  ,    method . getParameterTypes (  )  )  ;", "if    ( signatures . add ( methodSignature )  )     {", "methods . add ( method )  ;", "return   true ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.gradle.internal.reflect.MethodSet"}, {"methodBody": ["METHOD_START", "{", "return   methods ;", "}", "METHOD_END"], "methodName": ["getValues"], "fileName": "org.gradle.internal.reflect.MethodSet"}, {"methodBody": ["METHOD_START", "{", "return   methods . isEmpty (  )  ;", "}", "METHOD_END"], "methodName": ["isEmpty"], "fileName": "org.gradle.internal.reflect.MethodSet"}, {"methodBody": ["METHOD_START", "{", "return   methods . iterator (  )  ;", "}", "METHOD_END"], "methodName": ["iterator"], "fileName": "org.gradle.internal.reflect.MethodSet"}, {"methodBody": ["METHOD_START", "{", "instanceMethods . add ( method )  ;", "}", "METHOD_END"], "methodName": ["instanceMethod"], "fileName": "org.gradle.internal.reflect.MutableClassDetails"}, {"methodBody": ["METHOD_START", "{", "methods . add ( method )  ;", "}", "METHOD_END"], "methodName": ["method"], "fileName": "org.gradle.internal.reflect.MutableClassDetails"}, {"methodBody": ["METHOD_START", "{", "MutablePropertyDetails   property    =    properties . get ( propertyName )  ;", "if    ( property    =  =    null )     {", "property    =    new   MutablePropertyDetails ( propertyName )  ;", "properties . put ( propertyName ,    property )  ;", "}", "return   property ;", "}", "METHOD_END"], "methodName": ["property"], "fileName": "org.gradle.internal.reflect.MutableClassDetails"}, {"methodBody": ["METHOD_START", "{", "superTypes . add ( type )  ;", "}", "METHOD_END"], "methodName": ["superType"], "fileName": "org.gradle.internal.reflect.MutableClassDetails"}, {"methodBody": ["METHOD_START", "{", "getters . add ( method )  ;", "}", "METHOD_END"], "methodName": ["addGetter"], "fileName": "org.gradle.internal.reflect.MutablePropertyDetails"}, {"methodBody": ["METHOD_START", "{", "setters . add ( method )  ;", "}", "METHOD_END"], "methodName": ["addSetter"], "fileName": "org.gradle.internal.reflect.MutablePropertyDetails"}, {"methodBody": ["METHOD_START", "{", "if    ( PropertyAccessorType . isGetGetterName ( methodName )  )     {", "return   PropertyAccessorType . GET _ GETTER ;", "}", "if    ( PropertyAccessorType . isIsGetterName ( methodName )  )     {", "return   PropertyAccessorType . IS _ GETTER ;", "}", "if    ( PropertyAccessorType . isSetterName ( methodName )  )     {", "return   PropertyAccessorType . SETTER ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["fromName"], "fileName": "org.gradle.internal.reflect.PropertyAccessorType"}, {"methodBody": ["METHOD_START", "{", "return    ( accessorTypes . contains ( PropertyAccessorType . GET _ GETTER )  )     |  |     ( accessorTypes . contains ( PropertyAccessorType . IS _ GETTER )  )  ;", "}", "METHOD_END"], "methodName": ["hasGetter"], "fileName": "org.gradle.internal.reflect.PropertyAccessorType"}, {"methodBody": ["METHOD_START", "{", "return   accessorTypes . contains ( PropertyAccessorType . SETTER )  ;", "}", "METHOD_END"], "methodName": ["hasSetter"], "fileName": "org.gradle.internal.reflect.PropertyAccessorType"}, {"methodBody": ["METHOD_START", "{", "return   void . class . equals ( method . getReturnType (  )  )  ;", "}", "METHOD_END"], "methodName": ["hasVoidReturnType"], "fileName": "org.gradle.internal.reflect.PropertyAccessorType"}, {"methodBody": ["METHOD_START", "{", "return    ( methodName . startsWith (  \" get \"  )  )     &  &     (  ( methodName . length (  )  )     >     3  )  ;", "}", "METHOD_END"], "methodName": ["isGetGetterName"], "fileName": "org.gradle.internal.reflect.PropertyAccessorType"}, {"methodBody": ["METHOD_START", "{", "return    ( methodName . startsWith (  \" is \"  )  )     &  &     (  ( methodName . length (  )  )     >     2  )  ;", "}", "METHOD_END"], "methodName": ["isIsGetterName"], "fileName": "org.gradle.internal.reflect.PropertyAccessorType"}, {"methodBody": ["METHOD_START", "{", "return    ( methodName . startsWith (  \" set \"  )  )     &  &     (  ( methodName . length (  )  )     >     3  )  ;", "}", "METHOD_END"], "methodName": ["isSetterName"], "fileName": "org.gradle.internal.reflect.PropertyAccessorType"}, {"methodBody": ["METHOD_START", "{", "return   Modifier . isStatic ( method . getModifiers (  )  )  ;", "}", "METHOD_END"], "methodName": ["isStatic"], "fileName": "org.gradle.internal.reflect.PropertyAccessorType"}, {"methodBody": ["METHOD_START", "{", "if    ( PropertyAccessorType . isStatic ( method )  )     {", "return   null ;", "}", "String   methodName    =    method . getName (  )  ;", "if    (  (  !  ( PropertyAccessorType . hasVoidReturnType ( method )  )  )     &  &     ( PropertyAccessorType . takesNoParameter ( method )  )  )     {", "if    ( PropertyAccessorType . isGetGetterName ( methodName )  )     {", "return   PropertyAccessorType . GET _ GETTER ;", "}", "if    (  ( PropertyAccessorType . isIsGetterName ( methodName )  )     &  &     (  ( method . getReturnType (  )  . equals ( Boolean . TYPE )  )     |  |     ( method . getReturnType (  )  . equals ( Boolean . class )  )  )  )     {", "return   PropertyAccessorType . IS _ GETTER ;", "}", "}", "if    (  ( PropertyAccessorType . takesSingleParameter ( method )  )     &  &     ( PropertyAccessorType . isSetterName ( methodName )  )  )     {", "return   PropertyAccessorType . SETTER ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.internal.reflect.PropertyAccessorType"}, {"methodBody": ["METHOD_START", "{", "String   methodNamePrefixRemoved    =    methodName . substring ( prefixLength )  ;", "return   Introspector . decapitalize ( methodNamePrefixRemoved )  ;", "}", "METHOD_END"], "methodName": ["propertyNameFor"], "fileName": "org.gradle.internal.reflect.PropertyAccessorType"}, {"methodBody": ["METHOD_START", "{", "return   propertyNameFor ( method . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["propertyNameFor"], "fileName": "org.gradle.internal.reflect.PropertyAccessorType"}, {"methodBody": ["METHOD_START", "{", "return    ( method . getParameterTypes (  )  . length )     =  =     0  ;", "}", "METHOD_END"], "methodName": ["takesNoParameter"], "fileName": "org.gradle.internal.reflect.PropertyAccessorType"}, {"methodBody": ["METHOD_START", "{", "return    ( method . getParameterTypes (  )  . length )     =  =     1  ;", "}", "METHOD_END"], "methodName": ["takesSingleParameter"], "fileName": "org.gradle.internal.reflect.PropertyAccessorType"}, {"methodBody": ["METHOD_START", "{", "synchronized ( lock )     {", "return   c . get ( receiver ,    key )  ;", "}", "}", "METHOD_END"], "methodName": ["get"], "fileName": "org.gradle.internal.reflect.ReflectionCache"}, {"methodBody": ["METHOD_START", "{", "return   cache . size (  )  ;", "}", "METHOD_END"], "methodName": ["size"], "fileName": "org.gradle.internal.reflect.ReflectionCache"}, {"methodBody": ["METHOD_START", "{", "Set < Class <  ?  >  >    seenInterfaces    =    Sets . newHashSet (  )  ;", "Queue < Class <  ?    super   T >  >    queue    =    new   ArrayDeque < Class <  ?    super   T >  >  (  )  ;", "queue . add ( clazz )  ;", "Class <  ?    super   T >    type ;", "while    (  ( type    =    queue . poll (  )  )     !  =    null )     {", "if    ( excluded . contains ( type )  )     {", "continue ;", "}", "visitor . visitType ( type )  ;", "Class <  ?    super   T >    superclass    =    type . getSuperclass (  )  ;", "if    ( superclass    !  =    null )     {", "queue . add ( superclass )  ;", "}", "for    ( Class <  ?  >    iface    :    type . getInterfaces (  )  )     {", "if    ( seenInterfaces . add ( iface )  )     {", "queue . add ( Cast .  < Class <  ?    super   T >  > uncheckedCast ( iface )  )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["walkTypeHierarchy"], "fileName": "org.gradle.internal.reflect.Types"}, {"methodBody": ["METHOD_START", "{", "Types . walkTypeHierarchy ( clazz ,    Types . OBJECT _ TYPE ,    visitor )  ;", "}", "METHOD_END"], "methodName": ["walkTypeHierarchy"], "fileName": "org.gradle.internal.reflect.Types"}, {"methodBody": ["METHOD_START", "{", "threadResourceLockMap . put ( Thread . currentThread (  )  . getId (  )  ,    resourceLock )  ;", "}", "METHOD_END"], "methodName": ["associateResourceLock"], "fileName": "org.gradle.internal.resources.AbstractResourceLockRegistry"}, {"methodBody": ["METHOD_START", "{", "return   new   Action < ResourceLock >  (  )     {", "@ Override", "public   void   execute ( ResourceLock   resourceLock )     {", "associateResourceLock ( resourceLock )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["getLockAction"], "fileName": "org.gradle.internal.resources.AbstractResourceLockRegistry"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   rs . get ( displayName ,    new   Callable < T >  (  )     {", "@ Override", "public   T   call (  )    throws   Exception    {", "return   producer . create ( displayName ,    coordinationService ,    getLockAction (  )  ,    getUnlockAction (  )  )  ;", "}", "}  )  ;", "}    catch    ( ExecutionException   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["getOrRegisterResourceLock"], "fileName": "org.gradle.internal.resources.AbstractResourceLockRegistry"}, {"methodBody": ["METHOD_START", "{", "return   new   Action < ResourceLock >  (  )     {", "@ Override", "public   void   execute ( ResourceLock   resourceLock )     {", "unassocia ( resourceLock )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["getUnlockAction"], "fileName": "org.gradle.internal.resources.AbstractResourceLockRegistry"}, {"methodBody": ["METHOD_START", "{", "threadResourceLockMap . remove ( Thread . currentThread (  )  . getId (  )  ,    resourceLock )  ;", "}", "METHOD_END"], "methodName": ["unassociatResourceLock"], "fileName": "org.gradle.internal.resources.AbstractResourceLockRegistry"}, {"methodBody": ["METHOD_START", "{", "if    (  ( coordinationService . getCurrent (  )  )     =  =    null )     {", "throw   new   IllegalStateException (  \" No   State   is   associated   with   this   thread .  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["failIfNotInResourceLockStateChange"], "fileName": "org.gradle.internal.resources.AbstractTrackedResourceLock"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultResourceLockCoordinationService . AcquireLocks ( resourceLocks ,    true )  ;", "}", "METHOD_END"], "methodName": ["lock"], "fileName": "org.gradle.internal.resources.DefaultResourceLockCoordinationService"}, {"methodBody": ["METHOD_START", "{", "return   DefaultResourceLockCoordinationService . lock ( Arrays . asList ( resourceLocks )  )  ;", "}", "METHOD_END"], "methodName": ["lock"], "fileName": "org.gradle.internal.resources.DefaultResourceLockCoordinationService"}, {"methodBody": ["METHOD_START", "{", "if    ( resourceLockState . hasUnlockedResources (  )  )     {", "notifyStateChange (  )  ;", "}", "}", "METHOD_END"], "methodName": ["maybeNotifyStateChange"], "fileName": "org.gradle.internal.resources.DefaultResourceLockCoordinationService"}, {"methodBody": ["METHOD_START", "{", "synchronized ( lock )     {", "lock . notifyAll (  )  ;", "}", "}", "METHOD_END"], "methodName": ["notifyStateChange"], "fileName": "org.gradle.internal.resources.DefaultResourceLockCoordinationService"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultResourceLockCoordinationService . AcquireLocks ( resourceLocks ,    false )  ;", "}", "METHOD_END"], "methodName": ["tryLock"], "fileName": "org.gradle.internal.resources.DefaultResourceLockCoordinationService"}, {"methodBody": ["METHOD_START", "{", "return   DefaultResourceLockCoordinationService . tryLock ( Arrays . asList ( resourceLocks )  )  ;", "}", "METHOD_END"], "methodName": ["tryLock"], "fileName": "org.gradle.internal.resources.DefaultResourceLockCoordinationService"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultResourceLockCoordinationService . ReleaseLocks ( resourceLocks )  ;", "}", "METHOD_END"], "methodName": ["unlock"], "fileName": "org.gradle.internal.resources.DefaultResourceLockCoordinationService"}, {"methodBody": ["METHOD_START", "{", "return   DefaultResourceLockCoordinationService . unlock ( Arrays . asList ( resourceLocks )  )  ;", "}", "METHOD_END"], "methodName": ["unlock"], "fileName": "org.gradle.internal.resources.DefaultResourceLockCoordinationService"}, {"methodBody": ["METHOD_START", "{", "return   new   CachingServiceLocator ( other )  ;", "}", "METHOD_END"], "methodName": ["of"], "fileName": "org.gradle.internal.service.CachingServiceLocator"}, {"methodBody": ["METHOD_START", "{", "InputStream   inputStream    =    resource . openStream (  )  ;", "try    {", "BufferedReader   reader    =    new   BufferedReader ( new   InputStreamReader ( inputStream ,     \" UTF -  8  \"  )  )  ;", "List < String >    implementationClassNames    =    new   ArrayList < String >  (  )  ;", "String   line ;", "while    (  ( line    =    reader . readLine (  )  )     !  =    null )     {", "line    =    line . replaceAll (  \"  #  .  *  \"  ,     \"  \"  )  . trim (  )  ;", "if    (  ( line . length (  )  )     >     0  )     {", "implementationClassNames . add ( line )  ;", "}", "}", "return   implementationClassNames ;", "}    finally    {", "inputStream . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["extractImplementationClassNames"], "fileName": "org.gradle.internal.service.DefaultServiceLocator"}, {"methodBody": ["METHOD_START", "{", "List < DefaultServiceLocator . ServiceFactory < T >  >    factories    =    new   ArrayList < DefaultServiceLocator . ServiceFactory < T >  >  (  )  ;", "for    ( Class <  ?    extends   T >    implementationClass    :    implementationClasses )     {", "factories . add ( new   DefaultServiceLocator . ServiceFactory < T >  ( serviceType ,    implementationClass )  )  ;", "}", "return   factories ;", "}", "METHOD_END"], "methodName": ["factoriesFor"], "fileName": "org.gradle.internal.service.DefaultServiceLocator"}, {"methodBody": ["METHOD_START", "{", "return   factoriesFor ( serviceType ,    implementationsOf ( serviceType )  )  ;", "}", "METHOD_END"], "methodName": ["findFactoriesForServiceType"], "fileName": "org.gradle.internal.service.DefaultServiceLocator"}, {"methodBody": ["METHOD_START", "{", "String   resourceName    =     \" META - INF / services /  \"     +     ( serviceType . getName (  )  )  ;", "Set < String >    implementationClassNames    =    new   HashSet < String >  (  )  ;", "List < Class <  ?    extends   T >  >    implementations    =    new   ArrayList < Class <  ?    extends   T >  >  (  )  ;", "for    ( ClassLoader   classLoader    :    classLoaders )     {", "Enumeration < URL >    resources    =    classLoader . getResources ( resourceName )  ;", "while    ( resources . hasMoreElements (  )  )     {", "URL   resource    =    resources . nextElement (  )  ;", "List < String >    implementationClassNamesFromResource ;", "try    {", "implementationClassNamesFromResource    =    extractImplementationClassNames ( resource )  ;", "if    ( implementationClassNamesFromResource . isEmpty (  )  )     {", "throw   new   RuntimeException ( String . format (  \" No   implementation   class   for   service    '  % s '    specified .  \"  ,    serviceType . getName (  )  )  )  ;", "}", "}    catch    ( Throwable   e )     {", "throw   new   okupException ( String . format (  \" Could   not   determine   implementation   class   for   service    '  % s '    specified   in   resource    '  % s '  .  \"  ,    serviceType . getName (  )  ,    resource )  ,    e )  ;", "}", "for    ( String   implementationClassName    :    implementationClassNamesFromResource )     {", "if    ( implementationClassNames . add ( implementationClassName )  )     {", "try    {", "Class <  ?  >    implClass    =    classLoader . loadClass ( implementationClassName )  ;", "if    (  !  ( serviceType . isAssignableFrom ( implClass )  )  )     {", "throw   new   RuntimeException ( String . format (  \" Implementation   class    '  % s '    is   not   assignable   to   service   class    '  % s '  .  \"  ,    implementationClassName ,    serviceType . getName (  )  )  )  ;", "}", "implementations . add ( implClass . asSubclass ( serviceType )  )  ;", "}    catch    ( Throwable   e )     {", "throw   new   okupException ( String . format (  \" Could   not   load   implementation   class    '  % s '    for   service    '  % s '    specified   in   resource    '  % s '  .  \"  ,    implementationClassName ,    serviceType . getName (  )  ,    resource )  ,    e )  ;", "}", "}", "}", "}", "}", "return   implementations ;", "}", "METHOD_END"], "methodName": ["findServiceImplementations"], "fileName": "org.gradle.internal.service.DefaultServiceLocator"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   findServiceImplementations ( serviceType )  ;", "}    catch    ( okupException   e )     {", "throw   e ;", "}    catch    ( Exception   e )     {", "throw   new   okupException ( String . format (  \" Could   not   determine   implementation   classes   for   service    '  % s '  .  \"  ,    serviceType . getName (  )  )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["implementationsOf"], "fileName": "org.gradle.internal.service.DefaultServiceLocator"}, {"methodBody": ["METHOD_START", "{", "assertMutable (  )  ;", "ownServices . add ( new    . FixedInstanceService < T >  ( this ,    serviceType ,    serviceInstance )  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.gradle.internal.service.DefaultServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "assertMutable (  )  ;", "findProviderMethods ( provider )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addProvider"], "fileName": "org.gradle.internal.service.DefaultServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "Object [  ]    params    =    new   Object [ method . getParameterTypes (  )  . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( method . getParameterTypes (  )  . length )  ;    i +  +  )     {", "Type   paramType    =    method . getParameterTypes (  )  [ i ]  ;", "if    ( paramType . equals ( ServiceRegistration . class )  )     {", "params [ i ]     =    newRegistration (  )  ;", "} else    {", ". Service   paramProvider    =    find ( paramType ,    allServices )  ;", "if    ( paramProvider    =  =    null )     {", "throw   new   ServiceLookupException ( String . format (  \" Cannot   configure   services   using    % s .  % s (  )    as   required   service   of   type    % s   is   not   available .  \"  ,    method . getOwner (  )  . getSimpleName (  )  ,    method . getName (  )  ,     . format ( paramType )  )  )  ;", "}", "params [ i ]     =    paramProvider . get (  )  ;", "}", "}", "try    {", "method . invoke ( target ,    params )  ;", "}    catch    ( Exception   e )     {", "throw   new   ServiceLookupException ( String . format (  \" Could   not   configure   services   using    % s .  % s (  )  .  \"  ,    method . getOwner (  )  . getSimpleName (  )  ,    method . getName (  )  )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["applyConfigureMethod"], "fileName": "org.gradle.internal.service.DefaultServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "return   thisAsServiceProvider ;", "}", "METHOD_END"], "methodName": ["asProvider"], "fileName": "org.gradle.internal.service.DefaultServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "if    (  ( state . get (  )  )     !  =     ( DefaultServiceRegistry . State . INIT )  )     {", "throw   new   IllegalStateException (  (  (  \" Cannot   add   provide   to   service   registry    \"     +     ( this )  )     +     \"    as   it   is   no   longer   mutable \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertMutable"], "fileName": "org.gradle.internal.service.DefaultServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "if    ( serviceClass . isArray (  )  )     {", "throw   new   ServiceValidationException (  \" Locating   services   with   array   type   is   not   supported .  \"  )  ;", "}", "if    ( serviceClass . isAnnotation (  )  )     {", "throw   new   ServiceValidationException (  \" Locating   services   with   annotation   type   is   not   supported .  \"  )  ;", "}", "if    ( serviceClass    =  =     ( Object . class )  )     {", "throw   new   ServiceValidationException (  \" Locating   services   with   type   Object   is   not   supported .  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["assertValidServiceType"], "fileName": "org.gradle.internal.service.DefaultServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "noLongerMutable (  )  ;", "if    ( state . compareAndSet (  . State . STARTED ,     . State . CLOSED )  )     {", "CompositeStoppable . stoppable ( allServices )  . stop (  )  ;", "}", "}", "METHOD_END"], "methodName": ["close"], "fileName": "org.gradle.internal.service.DefaultServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "serviceRequested (  )  ;", "allServices . getAll ( serviceType ,    results )  ;", "}", "METHOD_END"], "methodName": ["collectServices"], "fileName": "org.gradle.internal.service.DefaultServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "DefaultServiceRegistry   registry    =    new   DefaultServiceRegistry (  )  ;", "for    ( Object   provider    :    providers )     {", "registry . addProvider ( provider )  ;", "}", "return   registry ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "org.gradle.internal.service.DefaultServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "if    ( serviceType   instanceof   ParameterizedType )     {", "ParameterizedType   parameterizedType    =     (  ( ParameterizedType )     ( serviceType )  )  ;", "Type   rawType    =    parameterizedType . getRawType (  )  ;", "if    ( rawType . equals ( Factory . class )  )     {", "final   Type   typeArg    =    parameterizedType . getActualTypeArguments (  )  [  0  ]  ;", "return   getFactoryService ( typeArg ,    serviceProvider )  ;", "}", "if    ( rawType   instanceof   Class )     {", "if    (  (  ( Class <  ?  >  )     ( rawType )  )  . isAssignableFrom ( List . class )  )     {", "Type   typeArg    =    parameterizedType . getActualTypeArguments (  )  [  0  ]  ;", "return   getCollectionService ( typeArg ,    serviceProvider )  ;", "}", ". assertValidServiceType (  (  ( Class <  ?  >  )     ( rawType )  )  )  ;", "return   serviceProvider . getService ( serviceType )  ;", "}", "}", "if    ( serviceType   instanceof   Class <  ?  >  )     {", ". assertValidServiceType (  (  ( Class <  ?  >  )     ( serviceType )  )  )  ;", "return   serviceProvider . getService ( serviceType )  ;", "}", "throw   new   ServiceValidationException ( String . format (  \" Locating   services   with   type    % s   is   not   supported .  \"  ,     . format ( serviceType )  )  )  ;", "}", "METHOD_END"], "methodName": ["find"], "fileName": "org.gradle.internal.service.DefaultServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    type    =    target . getClass (  )  ;", "RelevantMethods   methods    =    RelevantMethods . getMethods ( type )  ;", "for    ( ServiceMethod   method    :    methods . decorators )     {", "if    (  ( parentServices )     =  =    null )     {", "throw   new   ServiceLookupException ( String . format (  \" Cannot   use   decorator   method    % s .  % s (  )    when   no   parent   registry   is   provided .  \"  ,    type . getSimpleName (  )  ,    method . getName (  )  )  )  ;", "}", "ownServices . add ( new    . DecoratorMethodService ( this ,    target ,    method )  )  ;", "}", "for    ( ServiceMethod   method    :    methods . factories )     {", "ownServices . add ( new    . FactoryMethodService ( this ,    target ,    method )  )  ;", "}", "for    ( ServiceMethod   method    :    methods . configurers )     {", "applyConfigureMethod ( method ,    target )  ;", "}", "}", "METHOD_END"], "methodName": ["findProviderMethods"], "fileName": "org.gradle.internal.service.DefaultServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "if    ( type   instanceof   Class )     {", "Class <  ?  >    aClass    =     (  ( Class )     ( type )  )  ;", "return   aClass . getSimpleName (  )  ;", "} else", "if    ( type   instanceof   ParameterizedType )     {", "ParameterizedType   parameterizedType    =     (  ( ParameterizedType )     ( type )  )  ;", "StringBuilder   builder    =    new   StringBuilder (  )  ;", "builder . append (  . format ( parameterizedType . getRawType (  )  )  )  ;", "builder . append (  \"  <  \"  )  ;", "for    ( int   i    =     0  ;    i    <     ( parameterizedType . getActualTypeArguments (  )  . length )  ;    i +  +  )     {", "Type   typeParam    =    parameterizedType . getActualTypeArguments (  )  [ i ]  ;", "if    ( i    >     0  )     {", "builder . append (  \"  ,     \"  )  ;", "}", "builder . append (  . format ( typeParam )  )  ;", "}", "builder . append (  \"  >  \"  )  ;", "return   builder . toString (  )  ;", "}", "return   type . toString (  )  ;", "}", "METHOD_END"], "methodName": ["format"], "fileName": "org.gradle.internal.service.DefaultServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "return   serviceType . cast ( get (  (  ( Type )     ( serviceType )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "org.gradle.internal.service.DefaultServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "DefaultServiceRegistry . assertValidServiceType ( elementClass )  ;", "List < DefaultServiceRegistry . Service >    providers    =    new   ArrayList < DefaultServiceRegistry . Service >  (  )  ;", "serviceProvider . getAll ( elementClass ,    providers )  ;", "List < Object >    services    =    new   ArrayList < Object >  ( providers . size (  )  )  ;", "for    ( DefaultServiceRegistry . Service   service    :    providers )     {", "services . add ( service . get (  )  )  ;", "}", "return   new   DefaultServiceRegistry . CollectionService ( elementClass ,    services ,    providers )  ;", "}", "METHOD_END"], "methodName": ["getCollectionService"], "fileName": "org.gradle.internal.service.DefaultServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "if    ( elementType   instanceof   Class )     {", "Class <  ?  >    elementClass    =     (  ( Class <  ?  >  )     ( elementType )  )  ;", "return   getCollectionService ( elementClass ,    serviceProvider )  ;", "}", "if    ( elementType   instanceof   WildcardType )     {", "WildcardType   wildcardType    =     (  ( WildcardType )     ( elementType )  )  ;", "if    (  (  ( wildcardType . getUpperBounds (  )  [  0  ]  )    instanceof   Class )     &  &     (  ( wildcardType . getLowerBounds (  )  . length )     =  =     0  )  )     {", "Class <  ?  >    elementClass    =     (  ( Class <  ?  >  )     ( wildcardType . getUpperBounds (  )  [  0  ]  )  )  ;", "return   getCollectionService ( elementClass ,    serviceProvider )  ;", "}", "}", "throw   new   ServiceValidationException ( String . format (  \" Locating   services   with   type    % s   is   not   supported .  \"  ,     . format ( elementType )  )  )  ;", "}", "METHOD_END"], "methodName": ["getCollectionService"], "fileName": "org.gradle.internal.service.DefaultServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "return    ( displayName )     =  =    null    ?    getClass (  )  . getSimpleName (  )     :    displayName ;", "}", "METHOD_END"], "methodName": ["getDisplayName"], "fileName": "org.gradle.internal.service.DefaultServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "serviceRequested (  )  ;", "return   allServices . getFactory ( serviceType )  ;", "}", "METHOD_END"], "methodName": ["getFactoryService"], "fileName": "org.gradle.internal.service.DefaultServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "if    ( type   instanceof   Class )     {", "return   serviceProvider . getFactory (  (  ( Class )     ( type )  )  )  ;", "}", "if    ( type   instanceof   WildcardType )     {", "final   WildcardType   wildcardType    =     (  ( WildcardType )     ( type )  )  ;", "if    (  (  ( wildcardType . getLowerBounds (  )  . length )     =  =     1  )     &  &     (  ( wildcardType . getUpperBounds (  )  . length )     =  =     1  )  )     {", "if    (  (  ( wildcardType . getLowerBounds (  )  [  0  ]  )    instanceof   Class )     &  &     ( wildcardType . getUpperBounds (  )  [  0  ]  . equals ( Object . class )  )  )     {", "return   serviceProvider . getFactory (  (  ( Class <  ?  >  )     ( wildcardType . getLowerBounds (  )  [  0  ]  )  )  )  ;", "}", "}", "if    (  (  ( wildcardType . getLowerBounds (  )  . length )     =  =     0  )     &  &     (  ( wildcardType . getUpperBounds (  )  . length )     =  =     1  )  )     {", "if    (  ( wildcardType . getUpperBounds (  )  [  0  ]  )    instanceof   Class )     {", "return   serviceProvider . getFactory (  (  ( Class <  ?  >  )     ( wildcardType . getUpperBounds (  )  [  0  ]  )  )  )  ;", "}", "}", "}", "throw   new   ServiceValidationException ( String . format (  \" Locating   services   with   type    % s   is   not   supported .  \"  ,     . format ( type )  )  )  ;", "}", "METHOD_END"], "methodName": ["getFactoryService"], "fileName": "org.gradle.internal.service.DefaultServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "serviceRequested (  )  ;", "return   find ( serviceType ,    allServices )  ;", "}", "METHOD_END"], "methodName": ["getService"], "fileName": "org.gradle.internal.service.DefaultServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultServiceRegistry . Service (  )     {", "public   String   getDisplayName (  )     {", "return    \" ServiceRegistry    \"     +     ( DefaultServiceRegistry . this . getDisplayName (  )  )  ;", "}", "public   Object   get (  )     {", "return   DefaultServiceRegistry . this ;", "}", "public   void   requiredBy ( DefaultServiceRegistry . ServiceProvider   serviceProvider )     {", "}", "}  ;", "}", "METHOD_END"], "methodName": ["getThisAsService"], "fileName": "org.gradle.internal.service.DefaultServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "return    ( state . get (  )  )     =  =     ( DefaultServiceRegistry . State . CLOSED )  ;", "}", "METHOD_END"], "methodName": ["isClosed"], "fileName": "org.gradle.internal.service.DefaultServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "if    ( actual   instanceof   ParameterizedType )     {", "ParameterizedType   parameterizedType    =     (  ( ParameterizedType )     ( actual )  )  ;", "if    (  ( parameterizedType . getRawType (  )  )    instanceof   Class )     {", "return   expectedClass . isAssignableFrom (  (  ( Class )     ( parameterizedType . getRawType (  )  )  )  )  ;", "}", "} else", "if    ( actual   instanceof   Class )     {", "Class <  ?  >    other    =     (  ( Class <  ?  >  )     ( actual )  )  ;", "return   expectedClass . isAssignableFrom ( other )  ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isSatisfiedBy"], "fileName": "org.gradle.internal.service.DefaultServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "Type   expectedRawType    =    expectedParameterizedType . getRawType (  )  ;", "if    ( actual   instanceof   ParameterizedType )     {", "ParameterizedType   parameterizedType    =     (  ( ParameterizedType )     ( actual )  )  ;", "if    (  !  (  . isSatisfiedBy ( expectedRawType ,    parameterizedType . getRawType (  )  )  )  )     {", "return   false ;", "}", "Type [  ]    expectedTypeArguments    =    expectedParameterizedType . getActualTypeArguments (  )  ;", "for    ( int   i    =     0  ;    i    <     ( parameterizedType . getActualTypeArguments (  )  . length )  ;    i +  +  )     {", "Type   type    =    parameterizedType . getActualTypeArguments (  )  [ i ]  ;", "if    (  !  (  . isSatisfiedBy ( expectedTypeArguments [ i ]  ,    type )  )  )     {", "return   false ;", "}", "}", "return   true ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isSatisfiedBy"], "fileName": "org.gradle.internal.service.DefaultServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "if    ( expected . equals ( actual )  )     {", "return   true ;", "}", "if    ( expected   instanceof   Class )     {", "return    . isSatisfiedBy (  (  ( Class <  ?  >  )     ( expected )  )  ,    actual )  ;", "}", "if    ( expected   instanceof   ParameterizedType )     {", "return    . isSatisfiedBy (  (  ( ParameterizedType )     ( expected )  )  ,    actual )  ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isSatisfiedBy"], "fileName": "org.gradle.internal.service.DefaultServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "return   getFactory ( type )  . create (  )  ;", "}", "METHOD_END"], "methodName": ["newInstance"], "fileName": "org.gradle.internal.service.DefaultServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "return   new   ServiceRegistration (  )     {", "public    < T >    void   add ( Class < T >    serviceType ,    T   serviceInstance )     {", ". this . add ( serviceType ,    serviceInstance )  ;", "}", "public   void   add ( Class <  ?  >    serviceType )     {", "ownServices . add ( new    . ConstructorService (  . this ,    serviceType )  )  ;", "}", "public   void   addProvider ( Object   provider )     {", ". this . addProvider ( provider )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["newRegistration"], "fileName": "org.gradle.internal.service.DefaultServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "if    ( state . compareAndSet ( DefaultServiceRegistry . State . INIT ,    DefaultServiceRegistry . State . STARTED )  )     {", "ownServices . noLongerMutable (  )  ;", "}", "}", "METHOD_END"], "methodName": ["noLongerMutable"], "fileName": "org.gradle.internal.service.DefaultServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "assertMutable (  )  ;", "action . execute ( newation (  )  )  ;", "}", "METHOD_END"], "methodName": ["register"], "fileName": "org.gradle.internal.service.DefaultServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "noLongerMutable (  )  ;", "if    (  ( state . get (  )  )     =  =     (  . State . CLOSED )  )     {", "throw   new   IllegalStateException ( String . format (  \"  % s   has   been   closed .  \"  ,    getDisplayName (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["serviceRequested"], "fileName": "org.gradle.internal.service.DefaultServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "DefaultServiceRegistry . ServiceProvider   parentServices ;", "if    (  ( parents . length )     =  =     1  )     {", "parentServices    =    DefaultServiceRegistry . toParentServices ( parents [  0  ]  )  ;", "} else    {", "DefaultServiceRegistry . ServiceProvider [  ]    parentServiceProviders    =    new   DefaultServiceRegistry . ServiceProvider [ parents . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( parents . length )  ;    i +  +  )     {", "parentServiceProviders [ i ]     =    DefaultServiceRegistry . toParentServices ( parents [ i ]  )  ;", "}", "parentServices    =    new   DefaultServiceRegistry . CompositeServiceProvider ( parentServiceProviders )  ;", "}", "return   parentServices ;", "}", "METHOD_END"], "methodName": ["setupParentServices"], "fileName": "org.gradle.internal.service.DefaultServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "if    ( serviceRegistry   instanceof   DefaultServiceRegistry )     {", "return    (  ( DefaultServiceRegistry )     ( serviceRegistry )  )  . asProvider (  )  ;", "}", "return   new   DefaultServiceRegistry . ParentServices ( serviceRegistry )  ;", "}", "METHOD_END"], "methodName": ["toParentServices"], "fileName": "org.gradle.internal.service.DefaultServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "if    ( type   instanceof   Class )     {", "return    (  ( Class )     ( type )  )  ;", "} else    {", "if    ( type   instanceof   WildcardType )     {", "fi   WildcardType   wildcardType    =     (  ( WildcardType )     ( type )  )  ;", "if    (  (  ( wildcardType . getUpperBounds (  )  [  0  ]  )    instanceof   Class )     &  &     (  ( wildcardType . getLowerBounds (  )  . length )     =  =     0  )  )     {", "return    (  ( Class <  ?  >  )     ( wildcardType . getUpperBounds (  )  [  0  ]  )  )  ;", "}", "}", "ParameterizedType   parameterizedType    =     (  ( ParameterizedType )     ( type )  )  ;", "return    (  ( Class )     ( parameterizedType . getRawType (  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["unwrap"], "fileName": "org.gradle.internal.service.DefaultServiceRegistry"}, {"methodBody": ["METHOD_START", "{", "action . run (  )  ;", "retu    1  2  3  ;", "}", "METHOD_END"], "methodName": ["createInteger"], "fileName": "org.gradle.internal.service.ProviderWithGenericTypes"}, {"methodBody": ["METHOD_START", "{", "return   new   GenericRunnable < String >  (  )     {", "public   void   run (  )     {", "}", "}  ;", "}", "METHOD_END"], "methodName": ["createString"], "fileName": "org.gradle.internal.service.ProviderWithGenericTypes"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    type    =    builder . type ;", "Iterator < Method >    iterator    =    builder . remaining . iterator (  )  ;", "while    ( iterator . hasNext (  )  )     {", "Method   method    =    iterator . next (  )  ;", "if    ( method . getName (  )  . equals (  \" configure \"  )  )     {", "if    (  !  ( method . getReturnType (  )  . equals ( Void . TYPE )  )  )     {", "throw   new   ServiceLookupException ( String . format (  \" Method    % s .  % s (  )    must   return   void .  \"  ,    type . getSimpleName (  )  ,    method . getName (  )  )  )  ;", "}", "builder . add ( iterator ,    builder . configurers ,    method )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addConfigureMethods"], "fileName": "org.gradle.internal.service.RelevantMethods"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    type    =    builder . type ;", "Iterator < Method >    iterator    =    builder . remaining . iterator (  )  ;", "while    ( iterator . hasNext (  )  )     {", "Method   method    =    iterator . next (  )  ;", "if    (  (  (  ( method . getName (  )  . startsWith (  \" create \"  )  )     |  |     ( method . getName (  )  . startsWith (  \" decorate \"  )  )  )     &  &     (  ( method . getParameterTypes (  )  . length )     =  =     1  )  )     &  &     ( method . getParameterTypes (  )  [  0  ]  . equals ( method . getReturnType (  )  )  )  )     {", "if    ( method . getReturnType (  )  . equals ( Void . TYPE )  )     {", "throw   new   ServiceLookupException ( String . format (  \" Method    % s .  % s (  )    must   not   return   void .  \"  ,    type . getSimpleName (  )  ,    method . getName (  )  )  )  ;", "}", "builder . add ( iterator ,    builder . decorators ,    method )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addDecoratorMethods"], "fileName": "org.gradle.internal.service.RelevantMethods"}, {"methodBody": ["METHOD_START", "{", "Class <  ?  >    type    =    builder . type ;", "Iterator < Method >    iterator    =    builder . remaining . iterator (  )  ;", "while    ( iterator . hasNext (  )  )     {", "Method   method    =    iterator . next (  )  ;", "if    (  ( method . getName (  )  . startsWith (  \" create \"  )  )     &  &     (  !  ( Modifier . isStatic ( method . getModifiers (  )  )  )  )  )     {", "if    ( method . getReturnType (  )  . equals ( Void . TYPE )  )     {", "throw   new   ServiceLookupException ( String . format (  \" Method    % s .  % s (  )    must   not   return   void .  \"  ,    type . getSimpleName (  )  ,    method . getName (  )  )  )  ;", "}", "builder . add ( iterator ,    builder . factories ,    method )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["addFactoryMethods"], "fileName": "org.gradle.internal.service.RelevantMethods"}, {"methodBody": ["METHOD_START", "{", "RelevantMethodsBuilder   builder    =    new   RelevantMethodsBuilder ( type )  ;", "RelevantMethods   relevantMethods ;", "RelevantMethods . addDecoratorMethods ( builder )  ;", "RelevantMethods . addFactoryMethods ( builder )  ;", "RelevantMethods . addConfigureMethods ( builder )  ;", "relevantMethods    =    builder . build (  )  ;", "return   relevantMethods ;", "}", "METHOD_END"], "methodName": ["buildRelevantMethods"], "fileName": "org.gradle.internal.service.RelevantMethods"}, {"methodBody": ["METHOD_START", "{", "RelevantMethods   relevantMethods    =    RelevantMethods . METHODS _ CACHE . get ( type )  ;", "if    ( relevantMethods    =  =    null )     {", "relevantMethods    =    RelevantMethods . buildRelevantMethods ( type )  ;", "RelevantMethods . METHODS _ CACHE . putIfAbsent ( type ,    relevantMethods )  ;", "}", "return   relevantMethods ;", "}", "METHOD_END"], "methodName": ["getMethods"], "fileName": "org.gradle.internal.service.RelevantMethods"}, {"methodBody": ["METHOD_START", "{", "List < ServiceMethod >    result    =    new   ArrayList < ServiceMethod >  ( methods . size (  )  )  ;", "for    ( Method   method    :    methods )     {", "result . add (  . SERVICE _ METHOD _ FACTORY . toServiceMethod ( method )  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["toServiceMethodList"], "fileName": "org.gradle.internal.service.RelevantMethods"}, {"methodBody": ["METHOD_START", "{", "if    ( seen . add ( method . getName (  )  )  )     {", "b . add ( method )  ;", "}", "iterator . remove (  )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.gradle.internal.service.RelevantMethodsBuilder"}, {"methodBody": ["METHOD_START", "{", "return   new   RelevantMethods ( decorators ,    factories ,    configurers )  ;", "}", "METHOD_END"], "methodName": ["build"], "fileName": "org.gradle.internal.service.RelevantMethodsBuilder"}, {"methodBody": ["METHOD_START", "{", "DefaultServiceRegistry   registry    =    new   DefaultServiceRegistry ( displayName ,    parents . toArray ( new   ServiceRegistry [  0  ]  )  )  ;", "for    ( Object   provider    :    providers )     {", "registry . addProvider ( provider )  ;", "}", "return   registry ;", "}", "METHOD_END"], "methodName": ["build"], "fileName": "org.gradle.internal.service.ServiceRegistryBuilder"}, {"methodBody": ["METHOD_START", "{", "return   new   ServiceRegistryBuilder (  )  ;", "}", "METHOD_END"], "methodName": ["builder"], "fileName": "org.gradle.internal.service.ServiceRegistryBuilder"}, {"methodBody": ["METHOD_START", "{", "this . displayName    =    displayName ;", "return   this ;", "}", "METHOD_END"], "methodName": ["displayName"], "fileName": "org.gradle.internal.service.ServiceRegistryBuilder"}, {"methodBody": ["METHOD_START", "{", "this . parents . add ( parent )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["parent"], "fileName": "org.gradle.internal.service.ServiceRegistryBuilder"}, {"methodBody": ["METHOD_START", "{", "this . providers . add ( provider )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["provider"], "fileName": "org.gradle.internal.service.ServiceRegistryBuilder"}, {"methodBody": ["METHOD_START", "{", "return   type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.gradle.internal.service.UnknownServiceException"}, {"methodBody": ["METHOD_START", "{", "startTime    =    timeSource . nanoTime (  )  ;", "}", "METHOD_END"], "methodName": ["reset"], "fileName": "org.gradle.internal.time.DefaultTimer"}, {"methodBody": ["METHOD_START", "{", "long   prev ;", "long   next ;", "do    {", "prev    =    max . get (  )  ;", "next    =    Math . max ( prev ,    stamp )  ;", "}    while    (  !  ( max . compareAndSet ( prev ,    next )  )     )  ;", "return   next ;", "}", "METHOD_END"], "methodName": ["advance"], "fileName": "org.gradle.internal.time.MonotonicClock"}, {"methodBody": ["METHOD_START", "{", "long   nowNanos    =    timeSource . nanoTime (  )  ;", "long   syncNanos    =    syncNanosRef . get (  )  ;", "long   syncMillis    =    syncMillisRef . get (  )  ;", "long   sinceSyncNanos    =    nowNanos    -    syncNanos ;", "long   sinceSyncMillis    =    TimeUnit . NANOSECONDS . toMillis ( sinceSyncNanos )  ;", "if    ( syncIsDue ( nowNanos ,    syncNanos ,    sinceSyncMillis )  )     {", "return   sync ( syncMillis )  ;", "} else    {", "return   advance (  ( syncMillis    +    sinceSyncMillis )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getCurrentTime"], "fileName": "org.gradle.internal.time.MonotonicClock"}, {"methodBody": ["METHOD_START", "{", "long   newSyncMillis    =    advance ( timeSource . currentTimeMillis (  )  )  ;", "syncMillisRef . compareAndSet ( syncMillis ,    newSyncMillis )  ;", "return   newSyncMillis ;", "}", "METHOD_END"], "methodName": ["sync"], "fileName": "org.gradle.internal.time.MonotonicClock"}, {"methodBody": ["METHOD_START", "{", "return    ( sinceSyncMillis    >  =     ( syncIntervalMillis )  )     &  &     ( syncNanosRef . compareAndSet ( syncNanos ,    nowNanos )  )  ;", "}", "METHOD_END"], "methodName": ["syncIsDue"], "fileName": "org.gradle.internal.time.MonotonicClock"}, {"methodBody": ["METHOD_START", "{", "return   Time . CLOCK ;", "}", "METHOD_END"], "methodName": ["clock"], "fileName": "org.gradle.internal.time.Time"}, {"methodBody": ["METHOD_START", "{", "return   Time . CLOCK . getCurrentTime (  )  ;", "}", "METHOD_END"], "methodName": ["currentTimeMillis"], "fileName": "org.gradle.internal.time.Time"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultCountdownTimer ( TimeSource . SYSTEM ,    timeoutMillis ,    TimeUnit . MILLISECONDS )  ;", "}", "METHOD_END"], "methodName": ["startCountdownTimer"], "fileName": "org.gradle.internal.time.Time"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultCountdownTimer ( TimeSource . SYSTEM ,    timeout ,    unit )  ;", "}", "METHOD_END"], "methodName": ["startCountdownTimer"], "fileName": "org.gradle.internal.time.Time"}, {"methodBody": ["METHOD_START", "{", "return   new   DefaultTimer ( TimeSource . SYSTEM )  ;", "}", "METHOD_END"], "methodName": ["startTimer"], "fileName": "org.gradle.internal.time.Time"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   result    =    new   StringBuilder (  )  ;", "if    ( elapsedTimeInMs    >     (  . MILLIS _ PER _ HOUR )  )     {", "result . append (  ( elapsedTimeInMs    /     (  . MILLIS _ PER _ HOUR )  )  )  . append (  \" h    \"  )  ;", "}", "if    ( elapsedTimeInMs    >     (  . MILLIS _ PER _ MINUTE )  )     {", "result . append (  (  ( elapsedTimeInMs    %     (  . MILLIS _ PER _ HOUR )  )     /     (  . MILLIS _ PER _ MINUTE )  )  )  . append (  \" m    \"  )  ;", "}", "result . append (  (  ( elapsedTimeInMs    %     (  . MILLIS _ PER _ MINUTE )  )     /     1  0  0  0  )  )  . append (  \" s \"  )  ;", "return   result . toString (  )  ;", "}", "METHOD_END"], "methodName": ["formatDurationTerse"], "fileName": "org.gradle.internal.time.TimeFormatting"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   result    =    new   StringBuilder (  )  ;", "if    ( durationMillis    >     (  . MILLIS _ PER _ HOUR )  )     {", "result . append (  ( durationMillis    /     (  . MILLIS _ PER _ HOUR )  )  )  . append (  \"    hrs    \"  )  ;", "}", "if    ( durationMillis    >     (  ( long )     (  . MILLIS _ PER _ MINUTE )  )  )     {", "result . append (  (  ( durationMillis    %     (  . MILLIS _ PER _ HOUR )  )     /     (  . MILLIS _ PER _ MINUTE )  )  )  . append (  \"    mins    \"  )  ;", "}", "result . append (  (  ( durationMillis    %     (  . MILLIS _ PER _ MINUTE )  )     /     1  0  0  0  .  0  )  )  . append (  \"    secs \"  )  ;", "return   result . toString (  )  ;", "}", "METHOD_END"], "methodName": ["formatDurationVerbose"], "fileName": "org.gradle.internal.time.TimeFormatting"}, {"methodBody": ["METHOD_START", "{", "if    ( duration    =  =     0  )     {", "return    \"  0 s \"  ;", "}", "StringBuilder   result    =    new   StringBuilder (  )  ;", "long   days    =    duration    /     (  . MILLIS _ PER _ DAY )  ;", "duration    =    duration    %     (  . MILLIS _ PER _ DAY )  ;", "if    ( days    >     0  )     {", "result . append ( days )  ;", "result . append (  \" d \"  )  ;", "}", "long   hours    =    duration    /     (  . MILLIS _ PER _ HOUR )  ;", "duration    =    duration    %     (  . MILLIS _ PER _ HOUR )  ;", "if    (  ( hours    >     0  )     |  |     (  ( result . length (  )  )     >     0  )  )     {", "result . append ( hours )  ;", "result . append (  \" h \"  )  ;", "}", "long   minutes    =    duration    /     (  . MILLIS _ PER _ MINUTE )  ;", "duration    =    duration    %     (  . MILLIS _ PER _ MINUTE )  ;", "if    (  ( minutes    >     0  )     |  |     (  ( result . length (  )  )     >     0  )  )     {", "result . append ( minutes )  ;", "result . append (  \" m \"  )  ;", "}", "int   secondsScale    =     (  ( result . length (  )  )     >     0  )     ?     2     :     3  ;", "result . append ( BigDecimal . valueOf ( duration )  . divide ( BigDecimal . valueOf (  . MILLIS _ PER _ SECOND )  )  . setScale ( secondsScale ,    BigDecimal . ROUND _ HALF _ UP )  )  ;", "result . append (  \" s \"  )  ;", "return   result . toString (  )  ;", "}", "METHOD_END"], "methodName": ["formatDurationVeryTerse"], "fileName": "org.gradle.internal.time.TimeFormatting"}, {"methodBody": ["METHOD_START", "{", "Formatter   message    =    new   Formatter (  )  ;", "message . format (  \"  % s % n \"  ,    failure )  ;", "message . format (  \" The   following   types / formats   are    :  \"  )  ;", "for    ( String   format    :    formats )     {", "message . format (  \"  % n       -     % s \"  ,    format )  ;", "}", "if    ( GUtil . isTrue ( resolution )  )     {", "message . format (  \"  % n % n % s \"  ,    resolution )  ;", "}", "return   message . toString (  )  ;", "}", "METHOD_END"], "methodName": ["format"], "fileName": "org.gradle.internal.typeconversion.UnsupportedNotationException"}, {"methodBody": ["METHOD_START", "{", "return   notation ;", "}", "METHOD_END"], "methodName": ["getNotation"], "fileName": "org.gradle.internal.typeconversion.UnsupportedNotationException"}, {"methodBody": ["METHOD_START", "{", "if    ( bytes    <     0  )     {", "return    \"  -  \"  . concat (  . formatBytes (  (  - bytes )  )  )  ;", "}", "int   unit    =     1  0  0  0  ;", "if    ( bytes    <    unit )     {", "return   bytes    +     \"    B \"  ;", "}", "int   exp    =     (  ( int )     (  ( Math . log ( bytes )  )     /     ( Math . log ( unit )  )  )  )  ;", "char   pre    =     \" kMGTPE \"  . charAt (  ( exp    -     1  )  )  ;", "return   String . format (  \"  %  .  1 f    % sB \"  ,     ( bytes    /     ( Math . pow ( unit ,    exp )  )  )  ,    pre )  ;", "}", "METHOD_END"], "methodName": ["formatBytes"], "fileName": "org.gradle.internal.util.NumberUtil"}, {"methodBody": ["METHOD_START", "{", "String [  ]    sufixes    =    new   String [  ]  {     \" th \"  ,     \" st \"  ,     \" nd \"  ,     \" rd \"  ,     \" th \"  ,     \" th \"  ,     \" th \"  ,     \" th \"  ,     \" th \"  ,     \" th \"     }  ;", "switch    ( value    %     1  0  0  )     {", "case    1  1     :", "case    1  2     :", "case    1  3     :", "return   value    +     \" th \"  ;", "default    :", "return   value    +     ( sufixes [  ( value    %     1  0  )  ]  )  ;", "}", "}", "METHOD_END"], "methodName": ["ordinal"], "fileName": "org.gradle.internal.util.NumberUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  ( total    <     0  )     |  |     ( fraction    <     0  )  )     {", "throw   new   IllegalArgumentException (  (  (  (  (  \" Unable   to   calculate   percentage :     \"     +    fraction )     +     \"    of    \"  )     +    total )     +     \"  .    All   inputs   must   be    >  =     0  \"  )  )  ;", "}", "if    ( total    =  =     0  )     {", "return    0  ;", "}", "float   out    =     ( fraction    *     1  0  0  .  0 F )     /    total ;", "return    (  (  )     ( out )  )  ;", "}", "METHOD_END"], "methodName": ["percentOf"], "fileName": "org.gradle.internal.util.NumberUtil"}, {"methodBody": ["METHOD_START", "{", "PropertiesUtils . store ( properties ,    propertyFile ,    null ,    ISO _  8  8  5  9  _  1  ,     \"  \\ n \"  )  ;", "}", "METHOD_END"], "methodName": ["store"], "fileName": "org.gradle.internal.util.PropertiesUtils"}, {"methodBody": ["METHOD_START", "{", "BufferedOutputStream   outputStream    =    new   BufferedOutputStream ( new   FileOutputStream ( propertyFile )  )  ;", "try    {", ". store ( properties ,    outputStream ,    comment ,    charset ,    lineSeparator )  ;", "}    finally    {", "IoActions . closeQuietly ( outputStream )  ;", "}", "}", "METHOD_END"], "methodName": ["store"], "fileName": "org.gradle.internal.util.PropertiesUtils"}, {"methodBody": ["METHOD_START", "{", "String   rawContents ;", "if    ( charset . equals ( ISO _  8  8  5  9  _  1  )  )     {", "ByteArrayOutputStream   out    =    new   ByteArrayOutputStream (  )  ;", "properties . store ( out ,    comment )  ;", "rawContents    =    new   String ( out . toByteArray (  )  ,    Charsets . ISO _  8  8  5  9  _  1  )  ;", "} else    {", "StringWriter   out    =    new   StringWriter (  )  ;", "properties . store ( out ,    comment )  ;", "rawContents    =    out . toString (  )  ;", "}", "String   systemLineSeparator    =    System . getInstance (  )  . getLineSeparator (  )  ;", "List < String >    lines    =    Lists . newArrayList ( Splitter . on ( systemLineSeparator )  . omitEmptyStrings (  )  . split ( rawContents )  )  ;", "int   lastCommentLine    =     -  1  ;", "for    ( int   lineNo    =     0  ,    len    =    lines . size (  )  ;    lineNo    <    len ;    lineNo +  +  )     {", "String   line    =    lines . get ( lineNo )  ;", "if    ( line . startsWith (  \"  #  \"  )  )     {", "lastCommentLine    =    lineNo ;", "}", "}", "List < String >    nonCommentLines ;", "if    ( lastCommentLine    !  =     (  -  1  )  )     {", "lines . remove ( lastCommentLine )  ;", "nonCommentLines    =    lines . subList ( lastCommentLine ,    lines . size (  )  )  ;", "} else    {", "nonCommentLines    =    lines ;", "}", "Collections . sort ( nonCommentLines )  ;", "StringBuilder   builder    =    new   StringBuilder (  )  ;", "for    ( String   line    :    lines )     {", "builder . append ( line )  ;", "builder . append ( lineSeparator )  ;", "}", "outputStream . write ( builder . toString (  )  . getBytes ( charset )  )  ;", "}", "METHOD_END"], "methodName": ["store"], "fileName": "org.gradle.internal.util.PropertiesUtils"}, {"methodBody": ["METHOD_START", "{", "final   AtomicBoolean   allLocked    =    new   AtomicBoolean (  )  ;", "coordination . withStateLock ( new   Transformer < ResourceLockState . Disposition ,    ResourceLockState >  (  )     {", "@ Override", "public   ResourceLockState . Disposition   transform ( ResourceLockState   resourceLockState )     {", "allLocked . set ( CollectionUtils . every ( locks ,    new   Spec < ResourceLock >  (  )     {", "@ Override", "public   boolean   isSatisfiedBy ( ResourceLock   lock )     {", "return   lock . isLockedByCurrentThread (  )  ;", "}", "}  )  )  ;", "return   ResourceLockState . Disposition . FINISHED ;", "}", "}  )  ;", "return   allLocked . get (  )  ;", "}", "METHOD_END"], "methodName": ["allLockedByCurrentThread"], "fileName": "org.gradle.internal.work.DefaultWorkerLeaseService"}, {"methodBody": ["METHOD_START", "{", "int   workerId    =     ( counter )  +  +  ;", "Thread   ownerThread    =    Thread . currentThread (  )  ;", "return   wLockRegistry . getResourceLock ( parent ,    workerId ,    ownerThread )  ;", "}", "METHOD_END"], "methodName": ["getWorkerLease"], "fileName": "org.gradle.internal.work.DefaultWorkerLeaseService"}, {"methodBody": ["METHOD_START", "{", "WorkerLeaseRegistry . WorkerLease   workerLease    =    getCurrentWorkerLease (  )  ;", "List < ResourceLock >    allLocks    =    Lists . newArrayList (  )  ;", "allLocks . add ( workerLease )  ;", "Iterables . addAll ( allLocks ,    locks )  ;", "coordinationService . withStateLock ( DefaultResourceLockCoordinationService . unlock ( workerLease )  )  ;", "coordinationService . withStateLock ( DefaultResourceLockCoordinationService . lock ( allLocks )  )  ;", "}", "METHOD_END"], "methodName": ["releaseWorkerLeaseAndWaitFor"], "fileName": "org.gradle.internal.work.DefaultWorkerLeaseService"}, {"methodBody": ["METHOD_START", "{", "Collections . addAll ( t 1  ,    t 2  )  ;", "return   t 1  ;", "}", "METHOD_END"], "methodName": ["addAll"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "for    ( T   t    :    t 2  )     {", "t 1  . add ( t )  ;", "}", "return   t 1  ;", "}", "METHOD_END"], "methodName": ["addAll"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "return    ( CollectionUtils . findFirst ( source ,    filter )  )     !  =    null ;", "}", "METHOD_END"], "methodName": ["any"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "return    ( CollectionUtils . findFirst ( source ,    filter )  )     !  =    null ;", "}", "METHOD_END"], "methodName": ["any"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "return   Joiner . on (  \"     \"  )  . join ( CollectionUtils . collect ( arguments ,    Transformers . asSafeCommandLineArgument (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["asCommandLine"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "for    ( Object   o    :    input )     {", "Cast . cast ( type ,    o )  ;", "}", "return   Cast . uncheckedCast ( input )  ;", "}", "METHOD_END"], "methodName": ["checkedCast"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "return   CollectionUtils . collect ( Arrays . asList ( list )  ,    transformer )  ;", "}", "METHOD_END"], "methodName": ["collect"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "for    ( I   item    :    source )     {", "destina . add ( transformer . transform ( item )  )  ;", "}", "return   destina ;", "}", "METHOD_END"], "methodName": ["collect"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "return   CollectionUtils . collect ( source ,    new   LinkedList < R >  (  )  ,    transformer )  ;", "}", "METHOD_END"], "methodName": ["collect"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "return   CollectionUtils . collect ( list ,    new   ArrayList < R >  ( list . size (  )  )  ,    transformer )  ;", "}", "METHOD_END"], "methodName": ["collect"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "return   CollectionUtils . collect ( set ,    new   HashSet < R >  (  )  ,    transformer )  ;", "}", "METHOD_END"], "methodName": ["collect"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "assert    ( list . length )     <  =     ( destination . length )  ;", "for    ( int   i    =     0  ;    i    <     ( list . length )  ;     +  + i )     {", "destination [ i ]     =    transformer . transform ( list [ i ]  )  ;", "}", "return   destination ;", "}", "METHOD_END"], "methodName": ["collectArray"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "@ SuppressWarnings (  \" unchecked \"  )", "R [  ]    destination    =     (  ( R [  ]  )     ( Array . newInstance ( newType ,    list . length )  )  )  ;", "return    . collectArray ( list ,    destination ,    transformer )  ;", "}", "METHOD_END"], "methodName": ["collectArray"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "Map < K ,    V >    map    =    new   LinkedHashMap < K ,    V >  (  )  ;", ". collectMap ( map ,    items ,    keyGenerator )  ;", "return   map ;", "}", "METHOD_END"], "methodName": ["collectMap"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "for    ( V   item    :    items )     {", "destina . put ( keyGenerator . transform ( item )  ,    item )  ;", "}", "}", "METHOD_END"], "methodName": ["collectMap"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "Map < K ,    V >    map    =    new   LinkedHashMap < K ,    V >  (  )  ;", ". collectMapValues ( map ,    keys ,    keyGenerator )  ;", "return   map ;", "}", "METHOD_END"], "methodName": ["collectMapValues"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "for    ( K   item    :    keys )     {", "destina . put ( item ,    keyGenerator . transform ( item )  )  ;", "}", "}", "METHOD_END"], "methodName": ["collectMapValues"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "boolean   foundAtLeastOneNull    =    false ;", "List < E >    compacted    =    null ;", "int   i    =     0  ;", "for    ( E   element    :    list )     {", "if    ( element    =  =    null )     {", "if    (  ! foundAtLeastOneNull )     {", "compacted    =    new   ArrayList < E >  ( list . size (  )  )  ;", "if    ( i    >     0  )     {", "compacted . addAll ( list . subList (  0  ,    i )  )  ;", "}", "}", "foundAtLeastOneNull    =    true ;", "} else", "if    ( foundAtLeastOneNull )     {", "compacted . add ( element )  ;", "}", "+  + i ;", "}", "return   foundAtLeastOneNull    ?    compacted    :    list ;", "}", "METHOD_END"], "methodName": ["compact"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( left    =  =    null )     {", "throw   new   NullPointerException (  \"  ' left '    set   is   null \"  )  ;", "}", "if    ( right    =  =    null )     {", "throw   new   NullPointerException (  \"  ' right '    set   is   null \"  )  ;", "}", ". SetDiff < T >    setDiff    =    new    . SetDiff < T >  (  )  ;", "Map < Object ,    T >    indexedLeft    =     . collectMap ( left ,    compareBy )  ;", "Map < Object ,    T >    indexedRight    =     . collectMap ( right ,    compareBy )  ;", "for    ( Map . Entry < Object ,    T >    leftEntry    :    indexedLeft . entrySet (  )  )     {", "T   rightValue    =    indexedRight . remove ( leftEntry . getKey (  )  )  ;", "if    ( rightValue    =  =    null )     {", "setDiff . leftOnly . add ( leftEntry . getValue (  )  )  ;", "} else    {", "Pair < T ,    T >    pair    =    Pair . of ( leftEntry . getValue (  )  ,    rightValue )  ;", "setDiff . common . add ( pair )  ;", "}", "}", "for    ( T   rightValue    :    indexedRight . values (  )  )     {", "setDiff . rightOnly . add ( rightValue )  ;", "}", "return   setDiff ;", "}", "METHOD_END"], "methodName": ["diffSetsBy"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "for    ( T   thing    :    things )     {", "if    (  !  ( predicate . isSatisfiedBy ( thing )  )  )     {", "return   false ;", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["every"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "return   CollectionUtils . filter ( Arrays . asList ( array )  ,    new   LinkedList < T >  (  )  ,    filter )  ;", "}", "METHOD_END"], "methodName": ["filter"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "for    ( T   item    :    source )     {", "if    ( filter . isSatisfiedBy ( item )  )     {", "destina . add ( item )  ;", "}", "}", "return   destina ;", "}", "METHOD_END"], "methodName": ["filter"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "return   CollectionUtils . filter ( list ,    new   LinkedList < T >  (  )  ,    filter )  ;", "}", "METHOD_END"], "methodName": ["filter"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "for    ( Map . Entry < K ,    V >    entry    :    map . entrySet (  )  )     {", "if    ( filter . isSatisfiedBy ( entry )  )     {", "destina . put ( entry . getKey (  )  ,    entry . getValue (  )  )  ;", "}", "}", "return   destina ;", "}", "METHOD_END"], "methodName": ["filter"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "return   CollectionUtils . filter ( map ,    new   HashMap < K ,    V >  (  )  ,    filter )  ;", "}", "METHOD_END"], "methodName": ["filter"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "return   CollectionUtils . filter ( set ,    new   LinkedHashSet < T >  (  )  ,    filter )  ;", "}", "METHOD_END"], "methodName": ["filter"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "for    ( T   thing    :    source )     {", "if    ( filter . isSatisfiedBy ( thing )  )     {", "return   thing ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["findFirst"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "for    ( T   item    :    source )     {", "if    ( filter . isSatisfiedBy ( item )  )     {", "return   item ;", "}", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["findFirst"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "return   source . isEmpty (  )     ?    null    :    CollectionUtils . single ( source )  ;", "}", "METHOD_END"], "methodName": ["findSingle"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "return   source . iterator (  )  . next (  )  ;", "}", "METHOD_END"], "methodName": ["first"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( things    =  =    null )     {", "return   Collections . singletonList ( null )  ;", "} else", "if    (  ( things . length )     =  =     0  )     {", "return   Collections . emptyList (  )  ;", "} else", "if    (  ( things . length )     =  =     1  )     {", "Object   thing    =    things [  0  ]  ;", "if    ( thing    =  =    null )     {", "return   Collections . singletonList ( null )  ;", "}", "if    ( thing . getClass (  )  . isArray (  )  )     {", "Object [  ]    thingArray    =     (  ( Object [  ]  )     ( thing )  )  ;", "List < T >    list    =    new   ArrayList < T >  ( thingArray . length )  ;", "for    ( Object   thingThing    :    thingArray )     {", "list . addAll ( CollectionUtils . flattenCollections ( type ,    thingThing )  )  ;", "}", "return   list ;", "}", "if    ( thing   instanceof   java )     {", "java <  ?  >    collection    =     (  ( java <  ?  >  )     ( thing )  )  ;", "List < T >    list    =    new   ArrayList < T >  (  )  ;", "for    ( Object   element    :    collection )     {", "list . addAll ( CollectionUtils . flattenCollections ( type ,    element )  )  ;", "}", "return   list ;", "}", "return   Collections . singletonList ( cast ( type ,    thing )  )  ;", "} else    {", "List < T >    list    =    new   ArrayList < T >  (  )  ;", "for    ( Object   thing    :    things )     {", "list . addAll ( CollectionUtils . flattenCollections ( type ,    thing )  )  ;", "}", "return   list ;", "}", "}", "METHOD_END"], "methodName": ["flattenCollections"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "return   CollectionUtils . flattenCollections ( Object . class ,    things )  ;", "}", "METHOD_END"], "methodName": ["flattenCollections"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "Builder < K ,    V >    builder    =    ImmutableListMultimap . builder (  )  ;", "for    ( V   element    :    iterable )     {", "K   key    =    grouper . transform ( element )  ;", "builder . put ( key ,    element )  ;", "}", "return   builder . build (  )  . asMap (  )  ;", "}", "METHOD_END"], "methodName": ["groupBy"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( target    =  =    null )     {", "throw   new   NullPointerException (  \" The    ' target '    cannot   be   null \"  )  ;", "}", "if    ( items    =  =    null )     {", "throw   new   NullPointerException (  \" The    ' items '    cannot   be   null \"  )  ;", "}", "if    ( action    =  =    null )     {", "throw   new   NullPointerException (  \" The    ' action '    cannot   be   null \"  )  ;", "}", "for    ( I   item    :    items )     {", "action . execute ( new    . InjectionStep < T ,    I >  ( target ,    item )  )  ;", "}", "return   target ;", "}", "METHOD_END"], "methodName": ["inject"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "List < T >    result    =    new   ArrayList < T >  (  )  ;", "Iterator <  ?    extends    < T >  >    iterator    =    availableValuesByDescriptor . iterator (  )  ;", "if    ( iterator . hasNext (  )  )     {", "< T >    firstSet    =    iterator . next (  )  ;", "result . addAll ( firstSet )  ;", "while    ( iterator . hasNext (  )  )     {", "< T >    next    =    iterator . next (  )  ;", "result . retainAll ( next )  ;", "}", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["intersection"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( separator    =  =    null )     {", "throw   new   NullPointerExcep (  \" The    ' separator '    cannot   be   null \"  )  ;", "}", "if    ( objects    =  =    null )     {", "throw   new   NullPointerExcep (  \" The    ' objects '    cannot   be   null \"  )  ;", "}", "StringBuilder   string    =    new   StringBuilder (  )  ;", "Iterator <  ?  >    iterator    =    objects . iterator (  )  ;", "if    ( iterator . hasNext (  )  )     {", "string . append ( iterator . next (  )  . toString (  )  )  ;", "while    ( iterator . hasNext (  )  )     {", "string . append ( separator )  ;", "string . append ( iterator . next (  )  . toString (  )  )  ;", "}", "}", "return   string . toString (  )  ;", "}", "METHOD_END"], "methodName": ["join"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "return   CollectionUtils . join ( separator ,     ( objects    =  =    null    ?    null    :    Arrays . asList ( objects )  )  )  ;", "}", "METHOD_END"], "methodName": ["join"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "ImmutableList < T >    list    =    ImmutableList . copyOf ( iterable )  ;", "return   list . isEmpty (  )     ?    null    :    list ;", "}", "METHOD_END"], "methodName": ["nonEmptyOrNull"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "Preconditions . checkNotNull ( items ,     \" Cannot   partition   null   Collection \"  )  ;", "Preconditions . checkNotNull ( predicate ,     \" Cannot   apply   null   Spec   when   partitioning \"  )  ;", "Collection < T >    left    =    new   LinkedList < T >  (  )  ;", "Collection < T >    right    =    new   LinkedList < T >  (  )  ;", "for    ( T   item    :    items )     {", "if    ( predicate . isSatisfiedBy ( item )  )     {", "left . add ( item )  ;", "} else    {", "right . add ( item )  ;", "}", "}", "return   Pair . of ( left ,    right )  ;", "}", "METHOD_END"], "methodName": ["partition"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "boolean   replaced    =    false ;", "int   i    =     0  ;", "for    ( E   it    :    list )     {", "if    ( filter . isSatisfiedBy ( it )  )     {", "list . set ( i ,    transformer . transform ( it )  )  ;", "replaced    =    true ;", "}", "+  + i ;", "}", "return   replaced ;", "}", "METHOD_END"], "methodName": ["replace"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "Iterator <  ?    extends   T >    iterator    =    source . iterator (  )  ;", "if    (  !  ( iterator . hasNext (  )  )  )     {", "throw   new   NoSuchElementException (  \" Expecting   c   with   single   element ,    got   none .  \"  )  ;", "}", "T   element    =    iterator . next (  )  ;", "if    ( iterator . hasNext (  )  )     {", "throw   new   IllegalArgumentException (  \" Expecting   c   with   single   element ,    got   multiple .  \"  )  ;", "}", "return   element ;", "}", "METHOD_END"], "methodName": ["single"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "List < T >    copy    =    CollectionUtils . toMutableList ( things )  ;", "Collections . sort ( copy )  ;", "return   copy ;", "}", "METHOD_END"], "methodName": ["sort"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "List < T >    copy    =    CollectionUtils . toMutableList ( things )  ;", "Collections . sort ( copy ,    comparator )  ;", "return   copy ;", "}", "METHOD_END"], "methodName": ["sort"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "return   CollectionUtils . collect ( source ,    destination ,    Transformers . asString (  )  )  ;", "}", "METHOD_END"], "methodName": ["stringize"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "return   CollectionUtils . stringize ( source ,    new   ArrayList < String >  ( source . size (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["stringize"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "if    (  ( things    =  =    null )     |  |     (  ( things . length )     =  =     0  )  )     {", "return   new   ArrayList < T >  (  0  )  ;", "}", "List < T >    list    =    new   ArrayList < T >  ( things . length )  ;", "s . addAll ( list ,    things )  ;", "return   list ;", "}", "METHOD_END"], "methodName": ["toList"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( things   instanceof   List )     {", "@ SuppressWarnings (  \" unchecked \"  )", "List < T >    castThings    =     (  ( List < T >  )     ( things )  )  ;", "return   castThings ;", "}", "return    . toMutableList ( things )  ;", "}", "METHOD_END"], "methodName": ["toList"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "AbstractList < T >    list    =    new   ArrayList < T >  (  )  ;", "while    ( things . hasMoreElements (  )  )     {", "list . add ( things . nextElement (  )  )  ;", "}", "return   list ;", "}", "METHOD_END"], "methodName": ["toList"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( things    =  =    null )     {", "return   new   ArrayList < T >  (  0  )  ;", "}", "List < T >    list    =    new   ArrayList < T >  (  )  ;", "for    ( T   thing    :    things )     {", "list . add ( thing )  ;", "}", "return   list ;", "}", "METHOD_END"], "methodName": ["toMutableList"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( things    =  =    null )     {", "return   new   HashSet < T >  (  0  )  ;", "}", "if    ( things   instanceof   Set )     {", "@ SuppressWarnings (  \" unchecked \"  )", "Set < T >    castThings    =     (  ( Set < T >  )     ( things )  )  ;", "return   castThings ;", "}", "Set < T >    set    =    new   LinkedHashSet < T >  (  )  ;", "for    ( T   thing    :    things )     {", "set . add ( thing )  ;", "}", "return   set ;", "}", "METHOD_END"], "methodName": ["toSet"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "return   CollectionUtils . collect ( iterable ,    new   LinkedList < String >  (  )  ,    Transformers . asString (  )  )  ;", "}", "METHOD_END"], "methodName": ["toStringList"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "return   new   Iterable < T >  (  )     {", "private   final   Iterator <  ?    extends   Factory <  ?    extends   T >  >    delegate    =    factories . iterator (  )  ;", "public   Iterator < T >    iterator (  )     {", "return   new   Iterator < T >  (  )     {", "public   boolean   hasNext (  )     {", "return   delegate . hasNext (  )  ;", "}", "public   T   next (  )     {", "return   delegate . next (  )  . create (  )  ;", "}", "public   void   remove (  )     {", "throw   new   UnsupportedOperaExcep (  )  ;", "}", "}  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["unpack"], "fileName": "org.gradle.util.CollectionUtils"}, {"methodBody": ["METHOD_START", "{", "try    {", "return    . checksum ( file ,    checksum )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["checksum"], "fileName": "org.gradle.util.GFileUtils"}, {"methodBody": ["METHOD_START", "{", "try    {", ". cleanDirectory ( directory )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["cleanDirectory"], "fileName": "org.gradle.util.GFileUtils"}, {"methodBody": ["METHOD_START", "{", "try    {", ". copyDirectory ( source ,    destination )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["copyDirectory"], "fileName": "org.gradle.util.GFileUtils"}, {"methodBody": ["METHOD_START", "{", "try    {", ". copyFile ( source ,    destination )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["copyFile"], "fileName": "org.gradle.util.GFileUtils"}, {"methodBody": ["METHOD_START", "{", "try    {", ". copyURLToFile ( source ,    destination )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["copyURLToFile"], "fileName": "org.gradle.util.GFileUtils"}, {"methodBody": ["METHOD_START", "{", "try    {", ". deleteDirectory ( directory )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["deleteDirectory"], "fileName": "org.gradle.util.GFileUtils"}, {"methodBody": ["METHOD_START", "{", "if    ( file    !  =    null )     {", "return   file . delete (  )  ;", "} else    {", "return   false ;", "}", "}", "METHOD_END"], "methodName": ["deleteFileQuietly"], "fileName": "org.gradle.util.GFileUtils"}, {"methodBody": ["METHOD_START", "{", "return   FileUtils . deleteQuietly ( file )  ;", "}", "METHOD_END"], "methodName": ["deleteQuietly"], "fileName": "org.gradle.util.GFileUtils"}, {"methodBody": ["METHOD_START", "{", "try    {", ". forceDelete ( file )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["forceDelete"], "fileName": "org.gradle.util.GFileUtils"}, {"methodBody": ["METHOD_START", "{", "return   FileUtils . listFiles ( directory ,    extensions ,    recursive )  ;", "}", "METHOD_END"], "methodName": ["listFiles"], "fileName": "org.gradle.util.GFileUtils"}, {"methodBody": ["METHOD_START", "{", "dir    =    dir . getAbsoluteFile (  )  ;", "if    ( dir . isDirectory (  )  )     {", "return ;", "}", "if    (  ( dir . exists (  )  )     &  &     (  !  ( dir . isDirectory (  )  )  )  )     {", "throw   new   UncheckedIOException ( String . format (  \" Cannot   create   directory    '  % s '    as   it   already   exists ,    but   is   not   a   directory \"  ,    dir )  )  ;", "}", "List < File >    toCreate    =    new   LinkedList < File >  (  )  ;", "File   parent    =    dir . getParentFile (  )  ;", "while    (  !  ( parent . exists (  )  )  )     {", "toCreate . add ( parent )  ;", "parent    =    parent . getParentFile (  )  ;", "}", "Collections . reverse ( toCreate )  ;", "for    ( File   parentDirToCreate    :    toCreate )     {", "if    ( parentDirToCreate . isDirectory (  )  )     {", "continue ;", "}", "File   parentDirToCreateParent    =    parentDirToCreate . getParentFile (  )  ;", "if    (  !  ( parentDirToCreateParent . isDirectory (  )  )  )     {", "throw   new   UncheckedIOException ( String . format (  \" Cannot   create   parent   directory    '  % s '    when   creating   directory    '  % s '    as    '  % s '    is   not   a   directory \"  ,    parentDirToCreate ,    dir ,    parentDirToCreateParent )  )  ;", "}", "if    (  (  !  ( parentDirToCreate . mkdir (  )  )  )     &  &     (  !  ( parentDirToCreate . isDirectory (  )  )  )  )     {", "throw   new   UncheckedIOException ( String . format (  \" Failed   to   create   parent   directory    '  % s '    when   creating   directory    '  % s '  \"  ,    parentDirToCreate ,    dir )  )  ;", "}", "}", "if    (  (  !  ( dir . mkdir (  )  )  )     &  &     (  !  ( dir . isDirectory (  )  )  )  )     {", "throw   new   UncheckedIOException ( String . format (  \" Failed   to   create   directory    '  % s '  \"  ,    dir )  )  ;", "}", "}", "METHOD_END"], "methodName": ["mkdirs"], "fileName": "org.gradle.util.GFileUtils"}, {"methodBody": ["METHOD_START", "{", "try    {", ". moveDirectory ( source ,    destination )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["moveDirectory"], "fileName": "org.gradle.util.GFileUtils"}, {"methodBody": ["METHOD_START", "{", "boolean   rename    =    source . renameTo ( destination )  ;", "if    (  ! rename )     {", ". moveDirectory ( source ,    destination )  ;", "}", "}", "METHOD_END"], "methodName": ["moveExistingDirectory"], "fileName": "org.gradle.util.GFileUtils"}, {"methodBody": ["METHOD_START", "{", "boolean   rename    =    source . renameTo ( destination )  ;", "if    (  ! rename )     {", ". moveFile ( source ,    destination )  ;", "}", "}", "METHOD_END"], "methodName": ["moveExistingFile"], "fileName": "org.gradle.util.GFileUtils"}, {"methodBody": ["METHOD_START", "{", "try    {", ". moveFile ( source ,    destination )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["moveFile"], "fileName": "org.gradle.util.GFileUtils"}, {"methodBody": ["METHOD_START", "{", "try    {", "return    . openInputStream ( file )  ;", "}    catch    ( IOException   e )     {", "throw   new   RuntimeException (  (  \" Problems   opening   file   input   stream   for   file :     \"     +    file )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["openInputStream"], "fileName": "org.gradle.util.GFileUtils"}, {"methodBody": ["METHOD_START", "{", "File   parent    =    child . getParentFile (  )  ;", ". mkdirs ( parent )  ;", "return   parent ;", "}", "METHOD_END"], "methodName": ["parentMkdirs"], "fileName": "org.gradle.util.GFileUtils"}, {"methodBody": ["METHOD_START", "{", "return   GFileUtils . readFile ( file ,    Charset . defaultCharset (  )  . name (  )  )  ;", "}", "METHOD_END"], "methodName": ["readFile"], "fileName": "org.gradle.util.GFileUtils"}, {"methodBody": ["METHOD_START", "{", "try    {", "return    . readFileToString ( file ,    encoding )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["readFile"], "fileName": "org.gradle.util.GFileUtils"}, {"methodBody": ["METHOD_START", "{", "try    {", "return    . readFile ( file )  ;", "}    catch    ( Exception   e )     {", "return    (  (  \" Unable   to   read   file    '  \"     +    file )     +     \"  '    due   to :     \"  )     +     ( e . toString (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["readFileQuietly"], "fileName": "org.gradle.util.GFileUtils"}, {"methodBody": ["METHOD_START", "{", "BufferedReader   reader    =    null ;", "FileReader   fileReader    =    null ;", "try    {", "fileReader    =    new   FileReader ( file )  ;", "reader    =    new   BufferedReader ( fileReader )  ;", "LimitedDescription   description    =    new   LimitedDescription ( maxLines )  ;", "String   line    =    reader . readLine (  )  ;", "while    ( line    !  =    null )     {", "description . append ( line )  ;", "line    =    reader . readLine (  )  ;", "}", "return   description . toString (  )  ;", "}    catch    ( Exception   e )     {", "throw   new    . TailReadingException ( e )  ;", "}    finally    {", "IOUtils . closeQuietly ( fileReader )  ;", "IOUtils . closeQuietly ( reader )  ;", "}", "}", "METHOD_END"], "methodName": ["tail"], "fileName": "org.gradle.util.GFileUtils"}, {"methodBody": ["METHOD_START", "{", "List < String >    paths    =    new   ArrayList < String >  (  )  ;", "for    (    file    :    files )     {", "paths . add ( file . getAbsolutePath (  )  )  ;", "}", "return   paths ;", "}", "METHOD_END"], "methodName": ["toPaths"], "fileName": "org.gradle.util.GFileUtils"}, {"methodBody": ["METHOD_START", "{", "try    {", "if    (  !  ( file . createNewFile (  )  )  )     {", ". touchExisting ( file )  ;", "}", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["touch"], "fileName": "org.gradle.util.GFileUtils"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( file . setLastModified ( System . currentTimeMillis (  )  )  )  )     {", "throw   new   UncheckedIOException (  (  \" Could   not   update   time   stamp   for    \"     +    file )  )  ;", "}", "}", "METHOD_END"], "methodName": ["touchExisting"], "fileName": "org.gradle.util.GFileUtils"}, {"methodBody": ["METHOD_START", "{", "GFileUtils . writeFile ( content ,    destination ,    Charset . defaultCharset (  )  . name (  )  )  ;", "}", "METHOD_END"], "methodName": ["writeFile"], "fileName": "org.gradle.util.GFileUtils"}, {"methodBody": ["METHOD_START", "{", "try    {", ". writeStringToFile ( destination ,    content ,    encoding )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["writeFile"], "fileName": "org.gradle.util.GFileUtils"}, {"methodBody": ["METHOD_START", "{", "try    {", ". writeStringToFile ( file ,    data )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["writeStringToFile"], "fileName": "org.gradle.util.GFileUtils"}, {"methodBody": ["METHOD_START", "{", "HashMap   map    =    new   HashMap (  )  ;", "map . pAll ( map 1  )  ;", "map . pAll ( map 2  )  ;", "return   map ;", "}", "METHOD_END"], "methodName": ["addMaps"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "for    ( Iterable <  ?    extends   V >    src    :    srcs )     {", "for    ( V   v    :    src )     {", "if    ( failOnNull    &  &     ( v    =  =    null )  )     {", "throw   new   IllegalArgumentException (  (  \" Illegal   null   value   provided   in   this   collection :     \"     +    src )  )  ;", "}", "dest . add ( v )  ;", "}", "}", "return   dest ;", "}", "METHOD_END"], "methodName": ["addToCollection"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "return   GUtil . addToCollection ( dest ,    false ,    srcs )  ;", "}", "METHOD_END"], "methodName": ["addToCollection"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "for    ( Map . Entry <  ?  ,     ?  >    entry    :    src . entrySet (  )  )     {", "dest . put ( entry . getKey (  )  . toString (  )  ,    entry . getValue (  )  . toString (  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addToMap"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "return   CollectionUtils . join ( File . pathSeparator ,    collection )  ;", "}", "METHOD_END"], "methodName": ["asPath"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "return   new   Comparator < String >  (  )     {", "public   int   compare ( String   o 1  ,    String   o 2  )     {", "int   diff    =    o 1  . compareToIgnoreCase ( o 2  )  ;", "if    ( diff    !  =     0  )     {", "return   diff ;", "}", "return   o 1  . compareTo ( o 2  )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["caseInsensitive"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( input    =  =    null )     {", "return   Collections . emptyList (  )  ;", "} else", "if    ( input   instanceof   javaCollection )     {", "javaCollection   out    =    new   javaLinkedList (  )  ;", "GUtil . flatten (  (  ( javaCollection )     ( input )  )  ,    out ,    false ,    true )  ;", "return   out ;", "} else", "if    ( input . getClass (  )  . isArray (  )  )     {", "javaCollection   out    =    new   javaLinkedList (  )  ;", "GUtil . flatten ( asList (  (  ( Object [  ]  )     ( input )  )  )  ,    out ,    false ,    true )  ;", "return   out ;", "} else    {", "return   asList ( input )  ;", "}", "}", "METHOD_END"], "methodName": ["collectionize"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "return   GUtil . isTrue ( object )     ?    object    :    defaultValue ;", "}", "METHOD_END"], "methodName": ["elvis"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  ( longer   instanceof   String )     &  &     ( shorter   instanceof   String )  )     {", "return    (  ( String )     ( longer )  )  . endsWith (  (  ( String )     ( shorter )  )  )  ;", "}", "int   longerLength    =    longer . length (  )  ;", "int   shorterLength    =    shorter . length (  )  ;", "if    ( longerLength    <    shorterLength )     {", "return   false ;", "}", "for    ( int   i    =    shorterLength ;    i    >     0  ;    i -  -  )     {", "if    (  ( longer . charAt (  ( longerLength    -    i )  )  )     !  =     ( shorter . charAt (  ( shorterLength    -    i )  )  )  )     {", "return   false ;", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["endsWith"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "List <  ?    extends   T >    enumConstants    =    Arrays . asList ( enumType . getEnumConstants (  )  )  ;", "return   Collections . findFirst ( enumConstants ,    new   Spec < T >  (  )     {", "public   boolean   isSatisfiedBy ( T   enumValue )     {", "return   enumValue . name (  )  . equalsIgnoreCase ( literal )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["findEnumValue"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "return   GUtil . flatten ( Arrays . asList ( elements )  ,    addTo )  ;", "}", "METHOD_END"], "methodName": ["flatten"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "return   GUtil . flatten ( Arrays . asList ( elements )  ,    addTo ,    flattenMaps )  ;", "}", "METHOD_END"], "methodName": ["flatten"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "return   GUtil . flatten ( elements ,    new   ArrayList (  )  )  ;", "}", "METHOD_END"], "methodName": ["flatten"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "return   GUtil . flatten ( elements ,    addTo ,    true )  ;", "}", "METHOD_END"], "methodName": ["flatten"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "return   GUtil . flatten ( elements ,    addTo ,    flattenMapsAndArrays ,    flattenMapsAndArrays )  ;", "}", "METHOD_END"], "methodName": ["flatten"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "Iterator   iter    =    elements . iterator (  )  ;", "while    ( iter . hasNext (  )  )     {", "Object   element    =    iter . next (  )  ;", "if    ( element   instanceof   Collection )     {", "GUtil . flatten (  (  ( Collection )     ( element )  )  ,    addTo ,    flattenMaps ,    flattenArrays )  ;", "} else", "if    (  ( element   instanceof   javaMap )     &  &    flattenMaps )     {", "GUtil . flatten (  (  ( javaMap )     ( element )  )  . values (  )  ,    addTo ,    flattenMaps ,    flattenArrays )  ;", "} else", "if    (  ( element . getClass (  )  . isArray (  )  )     &  &    flattenArrays )     {", "GUtil . flatten ( asList (  (  ( Object [  ]  )     ( element )  )  )  ,    addTo ,    flattenMaps ,    flattenArrays )  ;", "} else    {", "addTo . add ( element )  ;", "}", "}", "return   addTo ;", "}", "METHOD_END"], "methodName": ["flatten"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "return   GUtil . flatten ( elements ,    new   ArrayList (  )  ,    flattenMapsAndArrays )  ;", "}", "METHOD_END"], "methodName": ["flatten"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "Collection < T >    out    =    new   LinkedList < T >  (  )  ;", ". flatten ( elements ,    out ,    true )  ;", "return    (  ( T )     ( out )  )  ;", "}", "METHOD_END"], "methodName": ["flattenElements"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( object    =  =    null )     {", "return   false ;", "}", "if    ( object   instanceof   Colction )     {", "return    (  (  ( Colction )     ( object )  )  . size (  )  )     >     0  ;", "} else", "if    ( object   instanceof   String )     {", "return    (  (  ( String )     ( object )  )  . ngth (  )  )     >     0  ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["isTrue"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "return   new   Comparator < T >  (  )     {", "public   int   compare ( T   o 1  ,    T   o 2  )     {", "boolean   o 1 Last    =     ( comparator . compare ( o 1  ,    lastValue )  )     =  =     0  ;", "boolean   o 2 Last    =     ( comparator . compare ( o 2  ,    lastValue )  )     =  =     0  ;", "if    ( o 1 Last    &  &    o 2 Last )     {", "return    0  ;", "}", "if    ( o 1 Last    &  &     (  ! o 2 Last )  )     {", "return    1  ;", "}", "if    (  (  ! o 1 Last )     &  &    o 2 Last )     {", "return    -  1  ;", "}", "return   comparator . compare ( o 1  ,    o 2  )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["last"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "try    {", "FileInputStream   inputStream    =    new   FileInputStream ( propertyFile )  ;", "try    {", "return    . loadProperties ( inputStream )  ;", "}    finally    {", "inputStream . close (  )  ;", "}", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["loadProperties"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "Properties   properties    =    new   Properties (  )  ;", "try    {", "properties . load ( inputStream )  ;", "inputStream . close (  )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "return   properties ;", "}", "METHOD_END"], "methodName": ["loadProperties"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "try    {", "URLConnection   uc    =    url . openConnection (  )  ;", "uc . setUseCaches ( false )  ;", "return    . loadProperties ( uc . getInputStream (  )  )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["loadProperties"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "Map   map    =    new   HashMap (  )  ;", "assert    (  ( objects . ngth )     %     2  )     =  =     0  ;", "for    ( int   i    =     0  ;    i    <     ( objects . ngth )  ;    i    +  =     2  )     {", "map . put ( objects [ i ]  ,    objects [  ( i    +     1  )  ]  )  ;", "}", "return   map ;", "}", "METHOD_END"], "methodName": ["map"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "List < String >    prefixed    =    new   ArrayList < String >  (  )  ;", "for    ( String   string    :    strings )     {", "prefixed . add (  ( prefix    +    string )  )  ;", "}", "return   prefixed ;", "}", "METHOD_END"], "methodName": ["prefix"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "try    {", "FiOutputStream   propertiesFiOutputStream    =    new   FiOutputStream ( propertyFi )  ;", "try    {", "properties . store ( propertiesFiOutputStream ,    null )  ;", "}    finally    {", "propertiesFiOutputStream . close (  )  ;", "}", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["saveProperties"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "try    {", "try    {", "properties . ste ( outputStream ,    null )  ;", "}    finally    {", "outputStream . close (  )  ;", "}", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["saveProperties"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "try    {", "FileOutputStream   propertiesFileOutputStream    =    new   FileOutputStream ( propertyFile )  ;", "try    {", ". savePropertiesNoDateComment ( properties ,    propertiesFileOutputStream )  ;", "}    finally    {", "propertiesFileOutputStream . close (  )  ;", "}", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["savePropertiesNoDateComment"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "GUtil . saveProperties ( properties ,    new   LineBufferingOutputStream ( new   SkipFirstTextStream ( new   WriterTextStream ( new   OutputStreamWriter ( outputStream ,    Charsets . ISO _  8  8  5  9  _  1  )  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["savePropertiesNoDateComment"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "StreamByteBuffer   buffer    =    new   StreamByteBuffer (  )  ;", ". serialize ( object ,    buffer . getOutputStream (  )  )  ;", "return   buffer . readAsByteArray (  )  ;", "}", "METHOD_END"], "methodName": ["serialize"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "try    {", "ObjectOpStream   objectOpStream    =    new   ObjectOpStream ( opStream )  ;", "objectOpStream . writeObject ( object )  ;", "objectOpStream . close (  )  ;", "}    catch    ( IOException   e )     {", "throw   new   UncheckedIOException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["serialize"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "return   GUtil . toCamelCase ( string ,    false )  ;", "}", "METHOD_END"], "methodName": ["toCamelCase"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( string    =  =    null )     {", "return   null ;", "}", "StringBuilder   builder    =    new   StringBuilder (  )  ;", "Matcher   matcher    =     . WORD _ SEPARATOR . matcher ( string )  ;", "int   pos    =     0  ;", "boolean   first    =    true ;", "while    ( matcher . find (  )  )     {", "String   chunk    =    string . subSequence ( pos ,    matcher . start (  )  )  . toString (  )  ;", "pos    =    matcher . end (  )  ;", "if    ( chunk . isEmpty (  )  )     {", "continue ;", "}", "if    ( lower    &  &    first )     {", "chunk    =    StringUtils . uncapitalize ( chunk )  ;", "first    =    false ;", "} else    {", "chunk    =    StringUtils . capitalize ( chunk )  ;", "}", "builder . append ( chunk )  ;", "}", "String   rest    =    string . subSequence ( pos ,    string . length (  )  )  . toString (  )  ;", "if    ( lower    &  &    first )     {", "rest    =    StringUtils . uncapitalize ( rest )  ;", "} else    {", "rest    =    StringUtils . capitalize ( rest )  ;", "}", "builder . append ( rest )  ;", "return   builder . toString (  )  ;", "}", "METHOD_END"], "methodName": ["toCamelCase"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( string    =  =    null )     {", "return   null ;", "}", "return    . toWords ( string ,     '  _  '  )  . toUpperCase (  )  ;", "}", "METHOD_END"], "methodName": ["toConstant"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( enumType . isInstance ( value )  )     {", "return   enumType . cast ( value )  ;", "}", "if    ( value   instanceof   CharSequence )     {", "final   String   literal    =    value . toString (  )  ;", "T   match    =     . findEnumValue ( enumType ,    literal )  ;", "if    ( match    !  =    null )     {", "return   match ;", "}", "final   String   alternativeLiteral    =     . toWords ( literal ,     '  _  '  )  ;", "match    =     . findEnumValue ( enumType ,    alternativeLiteral )  ;", "if    ( match    !  =    null )     {", "return   match ;", "}", "throw   new   IllegalArgumentException ( String . format (  \" Cannot   convert   string   value    '  % s '    to   an   enum   value   of   type    '  % s '     ( valid   case   insensitive   values :     % s )  \"  ,    literal ,    enumType . getName (  )  ,    CollectionUtils . join (  \"  ,     \"  ,    CollectionUtils . collect ( Arrays . asList ( enumType . getEnumConstants (  )  )  ,    new   Transformer < String ,    T >  (  )     {", "@ Override", "public   String   transform ( T   t )     {", "return   t . name (  )  ;", "}", "}  )  )  )  )  ;", "}", "throw   new   IllegalArgumentException ( String . format (  \" Cannot   convert   value    '  % s '    of   type    '  % s '    to   enum   type    '  % s '  \"  ,    value ,    value . getClass (  )  . getName (  )  ,    enumType . getName (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["toEnum"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "EnumSet < T >    result    =    EnumSet . noneOf ( enumType )  ;", "for    ( Object   value    :    values )     {", "result . add (  . toEnum ( enumType ,    value )  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["toEnumSet"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "return   GUtil . toEnumSet ( enumType ,    Arrays . asList ( values )  )  ;", "}", "METHOD_END"], "methodName": ["toEnumSet"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "return   GUtil . toCamelCase ( string ,    true )  ;", "}", "METHOD_END"], "methodName": ["toLowerCamelCase"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "Formatter   formatter    =    new   Formatter (  )  ;", "boolean   first    =    true ;", "for    ( Object   name    :    names )     {", "if    ( first )     {", "formatter . format (  \"  '  % s '  \"  ,    name )  ;", "first    =    false ;", "} else    {", "formatter . format (  \"  ,     '  % s '  \"  ,    name )  ;", "}", "}", "return   formatter . toString (  )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "return   GUtil . toWords ( string ,     '     '  )  ;", "}", "METHOD_END"], "methodName": ["toWords"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "if    ( string    =  =    null )     {", "return   null ;", "}", "StringBuilder   builder    =    new   StringBuilder (  )  ;", "int   pos    =     0  ;", "Matcher   matcher    =     . UPPER _ LOWER . matcher ( string )  ;", "while    ( pos    <     ( string . length (  )  )  )     {", "matcher . find ( pos )  ;", "if    (  ( matcher . end (  )  )     =  =    pos )     {", "pos +  +  ;", "continue ;", "}", "if    (  ( builder . length (  )  )     >     0  )     {", "builder . append ( separator )  ;", "}", "String   group 1     =    matcher . group (  1  )  . toLowerCase (  )  ;", "String   group 2     =    matcher . group (  2  )  ;", "if    (  ( group 2  . length (  )  )     =  =     0  )     {", "builder . append ( group 1  )  ;", "} else    {", "if    (  ( group 1  . length (  )  )     >     1  )     {", "builder . append ( group 1  . substring (  0  ,     (  ( group 1  . length (  )  )     -     1  )  )  )  ;", "builder . append ( separator )  ;", "builder . append ( group 1  . substring (  (  ( group 1  . length (  )  )     -     1  )  )  )  ;", "} else    {", "builder . append ( group 1  )  ;", "}", "builder . append ( group 2  )  ;", "}", "pos    =    matcher . end (  )  ;", "}", "return   builder . toString (  )  ;", "}", "METHOD_END"], "methodName": ["toWords"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   callabcall (  )  ;", "}    catch    ( Exception   e )     {", "throw   UncheckedException . throwAsUncheckedException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["uncheckedCall"], "fileName": "org.gradle.util.GUtil"}, {"methodBody": ["METHOD_START", "{", "String [  ]    majorVersionParts    =    versionPart . split (  \"  \\  \\  .  \"  )  ;", "String [  ]    otherMajorVersionParts    =    g . versionPart . split (  \"  \\  \\  .  \"  )  ;", "for    ( int   i    =     0  ;     ( i    <     ( majorVersionParts . length )  )     &  &     ( i    <     ( otherMajorVersionParts . length )  )  ;    i +  +  )     {", "int   part    =    Integer . parseInt ( majorVersionParts [ i ]  )  ;", "int   otherPart    =    Integer . parseInt ( otherMajorVersionParts [ i ]  )  ;", "if    ( part    >    otherPart )     {", "return    1  ;", "}", "if    ( otherPart    >    part )     {", "return    -  1  ;", "}", "}", "if    (  ( majorVersionParts . length )     >     ( otherMajorVersionParts . length )  )     {", "return    1  ;", "}", "if    (  ( majorVersionParts . length )     <     ( otherMajorVersionParts . length )  )     {", "return    -  1  ;", "}", "if    (  (  ( stage )     !  =    null )     &  &     (  ( g . stage )     !  =    null )  )     {", "int   diff    =    stage . compareTo ( g . stage )  ;", "if    ( diff    !  =     0  )     {", "return   diff ;", "}", "}", "if    (  (  ( stage )     =  =    null )     &  &     (  ( g . stage )     !  =    null )  )     {", "return    1  ;", "}", "if    (  (  ( stage )     !  =    null )     &  &     (  ( g . stage )     =  =    null )  )     {", "return    -  1  ;", "}", "if    (  (  ( snapshot )     !  =    null )     &  &     (  ( g . snapshot )     !  =    null )  )     {", "return   snapshot . compareTo ( g . snapshot )  ;", "}", "if    (  (  ( snapshot )     =  =    null )     &  &     (  ( g . snapshot )     !  =    null )  )     {", "return    1  ;", "}", "if    (  (  ( snapshot )     !  =    null )     &  &     (  ( g . snapshot )     =  =    null )  )     {", "return    -  1  ;", "}", "return    0  ;", "}", "METHOD_END"], "methodName": ["compareTo"], "fileName": "org.gradle.util.GradleVersion"}, {"methodBody": ["METHOD_START", "{", "return   GradleVersion . CURRENT ;", "}", "METHOD_END"], "methodName": ["current"], "fileName": "org.gradle.util.GradleVersion"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( stage )     =  =    null )     &  &     (  ( snapshot )     =  =    null )  )     {", "return   this ;", "}", "return    . version ( versionPart )  ;", "}", "METHOD_END"], "methodName": ["getBaseVersion"], "fileName": "org.gradle.util.GradleVersion"}, {"methodBody": ["METHOD_START", "{", "return   buildTime ;", "}", "METHOD_END"], "methodName": ["getBuildTime"], "fileName": "org.gradle.util.GradleVersion"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( stage )     !  =    null )     &  &     (  ( stage . stage )     =  =     ( GradleVersion . STAGE _ MILESTONE )  )  )     {", "return   GradleVersion . version (  (  ( majorPart )     +     \"  .  0  \"  )  )  ;", "}", "return   GradleVersion . version (  (  (  ( majorPart )     +     1  )     +     \"  .  0  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["getNextMajor"], "fileName": "org.gradle.util.GradleVersion"}, {"methodBody": ["METHOD_START", "{", "return   commitId ;", "}", "METHOD_END"], "methodName": ["getRevision"], "fileName": "org.gradle.util.GradleVersion"}, {"methodBody": ["METHOD_START", "{", "return   version ;", "}", "METHOD_END"], "methodName": ["getVersion"], "fileName": "org.gradle.util.GradleVersion"}, {"methodBody": ["METHOD_START", "{", "return    ( snapshot )     !  =    null ;", "}", "METHOD_END"], "methodName": ["isSnapshot"], "fileName": "org.gradle.util.GradleVersion"}, {"methodBody": ["METHOD_START", "{", "return    ( versionPart )     !  =    null ;", "}", "METHOD_END"], "methodName": ["isValid"], "fileName": "org.gradle.util.GradleVersion"}, {"methodBody": ["METHOD_START", "{", "return   new   GradleVersion ( version ,    null ,    null )  ;", "}", "METHOD_END"], "methodName": ["version"], "fileName": "org.gradle.util.GradleVersion"}, {"methodBody": ["METHOD_START", "{", "return   absolutePath ( Path . path ( path )  )  . getPath (  )  ;", "}", "METHOD_END"], "methodName": ["absolutePath"], "fileName": "org.gradle.util.Path"}, {"methodBody": ["METHOD_START", "{", "if    ( path . absolute )     {", "return   path ;", "}", "return   append ( path )  ;", "}", "METHOD_END"], "methodName": ["absolutePath"], "fileName": "org.gradle.util.Path"}, {"methodBody": ["METHOD_START", "{", "if    (  ( path . segments . length )     =  =     0  )     {", "return   this ;", "}", "String [  ]    concat    =    new   String [  ( segments . length )     +     ( path . segments . length )  ]  ;", "System . arraycopy ( segments ,     0  ,    concat ,     0  ,    segments . length )  ;", "System . arraycopy ( path . segments ,     0  ,    concat ,    segments . length ,    path . segments . length )  ;", "return   new    ( concat ,    absolute )  ;", "}", "METHOD_END"], "methodName": ["append"], "fileName": "org.gradle.util.Path"}, {"methodBody": ["METHOD_START", "{", "String [  ]    childSegments    =    new   String [  ( segments . length )     +     1  ]  ;", "System . arraycopy ( segments ,     0  ,    childSegments ,     0  ,    segments . length )  ;", "childSegments [ segments . length ]     =    name ;", "return   new    ( childSegments ,    absolute )  ;", "}", "METHOD_END"], "methodName": ["child"], "fileName": "org.gradle.util.Path"}, {"methodBody": ["METHOD_START", "{", "if    (  ( absolute )     &  &     (  !  ( other . absolute )  )  )     {", "return    1  ;", "}", "if    (  (  !  ( absolute )  )     &  &     ( other . absolute )  )     {", "return    -  1  ;", "}", "for    ( int   i    =     0  ;    i    <     ( Math . min ( segments . length ,    other . segments . length )  )  ;    i +  +  )     {", "int   diff    =     . STRING _ COMPARATOR . compare ( segments [ i ]  ,    other . segments [ i ]  )  ;", "if    ( diff    !  =     0  )     {", "return   diff ;", "}", "}", "int   lenDiff    =     ( segments . length )     -     ( other . segments . length )  ;", "if    ( lenDiff    >     0  )     {", "return    1  ;", "}", "if    ( lenDiff    <     0  )     {", "return    -  1  ;", "}", "return    0  ;", "}", "METHOD_END"], "methodName": ["compareTo"], "fileName": "org.gradle.util.Path"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   path    =    new   StringBuilder (  )  ;", "if    ( absolute )     {", "path . append (  . SEPARATOR )  ;", "}", "for    ( int   i    =     0  ;    i    <     ( segments . length )  ;    i +  +  )     {", "if    ( i    >     0  )     {", "path . append (  . SEPARATOR )  ;", "}", "String   segment    =    segments [ i ]  ;", "path . append ( segment )  ;", "}", "return   path . toString (  )  ;", "}", "METHOD_END"], "methodName": ["createFullPath"], "fileName": "org.gradle.util.Path"}, {"methodBody": ["METHOD_START", "{", "if    (  ( segments . length )     =  =     0  )     {", "return   null ;", "}", "return   segments [  (  ( segments . length )     -     1  )  ]  ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.gradle.util.Path"}, {"methodBody": ["METHOD_START", "{", "if    (  ( segments . length )     =  =     0  )     {", "return   null ;", "}", "if    (  ( segments . length )     =  =     1  )     {", "return   absolute    ?     . ROOT    :    null ;", "}", "String [  ]    parent    =    new   String [  ( segments . length )     -     1  ]  ;", "System . arraycopy ( segments ,     0  ,    parent ,     0  ,    parent . length )  ;", "return   new    ( parent ,    absolute )  ;", "}", "METHOD_END"], "methodName": ["getParent"], "fileName": "org.gradle.util.Path"}, {"methodBody": ["METHOD_START", "{", "if    (  ( fullPath )     =  =    null )     {", "fullPath    =    createFullPath (  )  ;", "}", "return   fullPath ;", "}", "METHOD_END"], "methodName": ["getPath"], "fileName": "org.gradle.util.Path"}, {"methodBody": ["METHOD_START", "{", "String [  ]    segments    =    StringUtils . split ( path ,    Path . SEPARATOR )  ;", "boolean   absolute    =    path . startsWith ( Path . SEPARATOR )  ;", "return   new   Path ( segments ,    absolute )  ;", "}", "METHOD_END"], "methodName": ["parsePath"], "fileName": "org.gradle.util.Path"}, {"methodBody": ["METHOD_START", "{", "if    ( Strings . isNullOrEmpty ( path )  )     {", "throw   new   InvalidUserDataException (  \" A   path   must   be   specified !  \"  )  ;", "}", "if    ( path . equals (  . SEPARATOR )  )     {", "return    . ROOT ;", "} else    {", "return    . parse ( path )  ;", "}", "}", "METHOD_END"], "methodName": ["path"], "fileName": "org.gradle.util.Path"}, {"methodBody": ["METHOD_START", "{", "return   relativePath ( Path . path ( path )  )  . getPath (  )  ;", "}", "METHOD_END"], "methodName": ["relativePath"], "fileName": "org.gradle.util.Path"}, {"methodBody": ["METHOD_START", "{", "if    (  ( path . absolute )     !  =     ( absolute )  )     {", "return   path ;", "}", "if    (  ( path . segments . length )     <     ( segments . length )  )     {", "return   path ;", "}", "for    ( int   i    =     0  ;    i    <     ( segments . length )  ;    i +  +  )     {", "if    (  !  ( path . segments [ i ]  . equals ( segments [ i ]  )  )  )     {", "return   path ;", "}", "}", "if    (  ( path . segments . length )     =  =     ( segments . length )  )     {", "return   path ;", "}", "String [  ]    newSegments    =    Arrays . copyOfRange ( path . segments ,    segments . length ,    path . segments . length )  ;", "return   new    ( newSegments ,    false )  ;", "}", "METHOD_END"], "methodName": ["relativePath"], "fileName": "org.gradle.util.Path"}, {"methodBody": ["METHOD_START", "{", "for    ( int   i    =     0  ;    i    <     ( str . length (  )  )  ;    i +  +  )     {", "if    ( Character . isWhitespace ( str . charAt ( i )  )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["containsWhitespace"], "fileName": "org.gradle.util.TextUtil"}, {"methodBody": ["METHOD_START", "{", "return   str    =  =    null    ?    null    :    str . replaceAll (  \"  \\ r \\ n |  \\ r |  \\ n \"  ,    sep )  ;", "}", "METHOD_END"], "methodName": ["convertLineSeparators"], "fileName": "org.gradle.util.TextUtil"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?    null    :    StringEscapeUtils . escapeJava ( obj . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["escapeString"], "fileName": "org.gradle.util.TextUtil"}, {"methodBody": ["METHOD_START", "{", "return   SystemProperties . getInstance (  )  . getLineSeparator (  )  ;", "}", "METHOD_END"], "methodName": ["getPlatformLineSeparator"], "fileName": "org.gradle.util.TextUtil"}, {"methodBody": ["METHOD_START", "{", "return    \"  \\ n \"  ;", "}", "METHOD_END"], "methodName": ["getUnixLineSeparator"], "fileName": "org.gradle.util.TextUtil"}, {"methodBody": ["METHOD_START", "{", "return    \"  \\ r \\ n \"  ;", "}", "METHOD_END"], "methodName": ["getWindowsLineSeparator"], "fileName": "org.gradle.util.TextUtil"}, {"methodBody": ["METHOD_START", "{", "StringBuilder   builder    =    new   StringBuilder (  )  ;", "String [  ]    lines    =    text . split (  \"  \\ n \"  )  ;", "for    ( int   i    =     0  ;    i    <     ( lines . length )  ;    i +  +  )     {", "String   line    =    lines [ i ]  ;", "if    (  !  (  . WHITESPACE . matcher ( line )  . matches (  )  )  )     {", "builder . append ( indent )  ;", "}", "builder . append ( line )  ;", "if    ( i    <     (  ( lines . length )     -     1  )  )     {", "builder . append (  '  \\ n '  )  ;", "}", "}", "return   builder . toString (  )  ;", "}", "METHOD_END"], "methodName": ["indent"], "fileName": "org.gradle.util.TextUtil"}, {"methodBody": ["METHOD_START", "{", "String   s    =    originalString . toString (  )  ;", "int   index    =    s . indexOf ( removeString )  ;", "if    ( index    =  =     (  -  1  )  )     {", "return   s ;", "}", "int   end    =    index    +     ( removeString . length (  )  )  ;", "if    (  ( s . length (  )  )     >    end )     {", "return    ( s . substring (  0  ,    index )  )     +     ( s . substring ( end )  )  ;", "}", "return   s . substring (  0  ,    index )  ;", "}", "METHOD_END"], "methodName": ["minus"], "fileName": "org.gradle.util.TextUtil"}, {"methodBody": ["METHOD_START", "{", "return   TextUtil . normaliseLineSeparators ( TextUtil . normaliseFileSeparators ( in )  )  ;", "}", "METHOD_END"], "methodName": ["normaliseFileAndLineSeparators"], "fileName": "org.gradle.util.TextUtil"}, {"methodBody": ["METHOD_START", "{", "return   path . replace ( File . separatorChar ,     '  /  '  )  ;", "}", "METHOD_END"], "methodName": ["normaliseFileSeparators"], "fileName": "org.gradle.util.TextUtil"}, {"methodBody": ["METHOD_START", "{", "return   str    =  =    null    ?    null    :    TextUtil . convertLineSeparators ( str ,     \"  \\ n \"  )  ;", "}", "METHOD_END"], "methodName": ["normaliseLineSeparators"], "fileName": "org.gradle.util.TextUtil"}, {"methodBody": ["METHOD_START", "{", "if    (  ( s 2  . length (  )  )     >  =     ( s 1  . length (  )  )  )     {", "return   s 1  ;", "} else    {", "return   s 2  ;", "}", "}", "METHOD_END"], "methodName": ["shorterOf"], "fileName": "org.gradle.util.TextUtil"}, {"methodBody": ["METHOD_START", "{", "return   str    =  =    null    ?    null    :    TextUtil . convertLineSeparators ( str ,    TextUtil . getPlatformLineSeparator (  )  )  ;", "}", "METHOD_END"], "methodName": ["toPlatformLineSeparators"], "fileName": "org.gradle.util.TextUtil"}, {"methodBody": ["METHOD_START", "{", "content . add (  0  ,    line )  ;", "if    (  ( content . size (  )  )     >     ( maxItems )  )     {", "content . removeLast (  )  ;", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["append"], "fileName": "org.gradle.util.internal.LimitedDescription"}, {"methodBody": ["METHOD_START", "{", "if    (  ( content . size (  )  )     =  =     0  )     {", "return    \"  <  < empty >  >  \"  ;", "}", "StringBuilder   out    =    new   StringBuilder (  )  ;", "List   reversed    =    Lists . reverse ( content )  ;", "for    ( Object   item    :    reversed )     {", "out . append ( item )  . append (  \"  \\ n \"  )  ;", "}", "return   out . toString (  )  ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "org.gradle.util.internal.LimitedDescription"}]