[{"methodBody": ["METHOD_START", "{", "this . components . add ( component )  ;", "}", "METHOD_END"], "methodName": ["addComponent"], "fileName": "com.foo.Component"}, {"methodBody": ["METHOD_START", "{", "return   components ;", "}", "METHOD_END"], "methodName": ["getComponents"], "fileName": "com.foo.Component"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.foo.Component"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "com.foo.Component"}, {"methodBody": ["METHOD_START", "{", "ManagedList < BeanDefinition >    children    =    new   ManagedList ( childElements . size (  )  )  ;", "for    ( Element   element    :    childElements )     {", "children . add (  . parseComponentElement ( element )  )  ;", "}", "factory . addPropertyValue (  \" children \"  ,    children )  ;", "}", "METHOD_END"], "methodName": ["parseChildComponents"], "fileName": "com.foo.ComponentBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "BeanDefinitionBuilder   component    =    BeanDefinitionBuilder . rootBeanDefinition ( Component . class )  ;", "component . addPropertyValue (  \" name \"  ,    element . getAttribute (  \" name \"  )  )  ;", "return   component . getBeanDefinition (  )  ;", "}", "METHOD_END"], "methodName": ["parseComponent"], "fileName": "com.foo.ComponentBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "BeanDefinitionBuilder   factory    =    BeanDefinitionBuilder . rootBeanDefinition ( ComponentFactoryBean . class )  ;", "factory . addPropertyValue (  \" parent \"  ,     . parseComponent ( element )  )  ;", "List < Element >    childElements    =    DomUtils . getChildElementsByTagName ( element ,     \" component \"  )  ;", "if    (  !  ( CollectionUtils . isEmpty ( childElements )  )  )     {", ". parseChildComponents ( childElements ,    factory )  ;", "}", "return   factory . getBeanDefinition (  )  ;", "}", "METHOD_END"], "methodName": ["parseComponentElement"], "fileName": "com.foo.ComponentBeanDefinitionParser"}, {"methodBody": ["METHOD_START", "{", "return   ComponentBeanDefinitionParserTests . bf . getBean (  \" bionic - family \"  ,    Component . class )  ;", "}", "METHOD_END"], "methodName": ["getBionicFamily"], "fileName": "com.foo.ComponentBeanDefinitionParserTests"}, {"methodBody": ["METHOD_START", "{", "ComponentBeanDefinitionParserTests . bf    =    new   DefaultListableBeanFactory (  )  ;", "new   XmlBeanDefinitionReader ( ComponentBeanDefinitionParserTests . bf )  . loadBeanDefinitions ( new   ClassPathResource (  \" com / foo / component - config . xml \"  )  )  ;", "}", "METHOD_END"], "methodName": ["setUpBeforeClass"], "fileName": "com.foo.ComponentBeanDefinitionParserTests"}, {"methodBody": ["METHOD_START", "{", "ComponentBeanDefinitionParserTests . bf . destroySingletons (  )  ;", "}", "METHOD_END"], "methodName": ["tearDownAfterClass"], "fileName": "com.foo.ComponentBeanDefinitionParserTests"}, {"methodBody": ["METHOD_START", "{", "Component   cp    =    getBionicFamily (  )  ;", "assertThat (  \" Bionic -  1  \"  ,    equalTo ( cp . getName (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testBionicBasic"], "fileName": "com.foo.ComponentBeanDefinitionParserTests"}, {"methodBody": ["METHOD_START", "{", "Component   cp    =    getBionicFamily (  )  ;", "List < Component >    components    =    cp . getComponents (  )  ;", "assertThat (  2  ,    equalTo ( components . size (  )  )  )  ;", "assertThat (  \" Mother -  1  \"  ,    equalTo ( components . get (  0  )  . getName (  )  )  )  ;", "assertThat (  \" Rock -  1  \"  ,    equalTo ( components . get (  1  )  . getName (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testBionicFirstLevelChildren"], "fileName": "com.foo.ComponentBeanDefinitionParserTests"}, {"methodBody": ["METHOD_START", "{", "Component   cp    =    getBionicFamily (  )  ;", "List < Component >    components    =    cp . getComponents (  )  . get (  0  )  . getComponents (  )  ;", "assertThat (  2  ,    equalTo ( components . size (  )  )  )  ;", "assertThat (  \" Karate -  1  \"  ,    equalTo ( components . get (  0  )  . getName (  )  )  )  ;", "assertThat (  \" Sport -  1  \"  ,    equalTo ( components . get (  1  )  . getName (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["testBionicSecondLevenChildren"], "fileName": "com.foo.ComponentBeanDefinitionParserTests"}, {"methodBody": ["METHOD_START", "{", "this . children    =    children ;", "}", "METHOD_END"], "methodName": ["setChildren"], "fileName": "com.foo.ComponentFactoryBean"}, {"methodBody": ["METHOD_START", "{", "this . parent    =    parent ;", "}", "METHOD_END"], "methodName": ["setParent"], "fileName": "com.foo.ComponentFactoryBean"}, {"methodBody": ["METHOD_START", "{", "XmlWebApplicationContext   wac    =    new   XmlWebApplicationContext (  )  ;", "wac . setConfigLocations (  . CONTEXT )  ;", "wac . refresh (  )  ;", "this . context    =    wac ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.aop.config.AopNamespaceHandlerScopeIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   oldRequest    =    new   MockHttpServletRequest (  )  ;", "MockHttpServletRequest   newRequest    =    new   MockHttpServletRequest (  )  ;", "RequestContextHolder . setRequestAttributes ( new   web . context . request . ServletRequestAttributes ( oldRequest )  )  ;", "ITestBean   scoped    =     (  ( ITestBean )     ( this . context . getBean (  \" requestScoped \"  )  )  )  ;", "assertTrue (  \" Should   be   AOP   proxy \"  ,    AopUtils . isAopProxy ( scoped )  )  ;", "assertTrue (  \" Should   be   target   class   proxy \"  ,     ( scoped   instanceof   TestBean )  )  ;", "ITestBean   testBean    =     (  ( ITestBean )     ( this . context . getBean (  \" testBean \"  )  )  )  ;", "assertTrue (  \" Should   be   AOP   proxy \"  ,    AopUtils . isAopProxy ( testBean )  )  ;", "assertFalse (  \" Regular   bean   should   be   JDK   proxy \"  ,     ( testBean   instanceof   TestBean )  )  ;", "String   rob    =     \" Rob   Harrop \"  ;", "String   bram    =     \" Bram   Smeets \"  ;", "assertEquals ( rob ,    scoped . getName (  )  )  ;", "scoped . setName ( bram )  ;", "RequestContextHolder . setRequestAttributes ( new   web . context . request . ServletRequestAttributes ( newRequest )  )  ;", "assertEquals ( rob ,    scoped . getName (  )  )  ;", "RequestContextHolder . setRequestAttributes ( new   web . context . request . ServletRequestAttributes ( oldRequest )  )  ;", "assertEquals ( bram ,    scoped . getName (  )  )  ;", "assertTrue (  \" Should   have   advisors \"  ,     (  (  (  ( Advised )     ( scoped )  )  . getAdvisors (  )  . length )     >     0  )  )  ;", "}", "METHOD_END"], "methodName": ["testRequestScoping"], "fileName": "org.springframework.aop.config.AopNamespaceHandlerScopeIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpSession   oldSession    =    new   MockHttpSession (  )  ;", "MockHttpSession   newSession    =    new   MockHttpSession (  )  ;", "MockHttpServletRequest   request    =    new   MockHttpServletRequest (  )  ;", "request . setSession ( oldSession )  ;", "RequestContextHolder . setRequestAttributes ( new   web . context . request . ServletRequestAttributes ( request )  )  ;", "ITestBean   scoped    =     (  ( ITestBean )     ( this . context . getBean (  \" sessionScoped \"  )  )  )  ;", "assertTrue (  \" Should   be   AOP   proxy \"  ,    AopUtils . isAopProxy ( scoped )  )  ;", "assertFalse (  \" Should   not   be   target   class   proxy \"  ,     ( scoped   instanceof   TestBean )  )  ;", "ITestBean   scopedAlias    =     (  ( ITestBean )     ( this . context . getBean (  \" sessionScopedAlias \"  )  )  )  ;", "assertSame ( scoped ,    scopedAlias )  ;", "ITestBean   testBean    =     (  ( ITestBean )     ( this . context . getBean (  \" testBean \"  )  )  )  ;", "assertTrue (  \" Should   be   AOP   proxy \"  ,    AopUtils . isAopProxy ( testBean )  )  ;", "assertFalse (  \" Regular   bean   should   be   JDK   proxy \"  ,     ( testBean   instanceof   TestBean )  )  ;", "String   rob    =     \" Rob   Harrop \"  ;", "String   bram    =     \" Bram   Smeets \"  ;", "assertEquals ( rob ,    scoped . getName (  )  )  ;", "scoped . setName ( bram )  ;", "request . setSession ( newSession )  ;", "assertEquals ( rob ,    scoped . getName (  )  )  ;", "request . setSession ( oldSession )  ;", "assertEquals ( bram ,    scoped . getName (  )  )  ;", "assertTrue (  \" Should   have   advisors \"  ,     (  (  (  ( Advised )     ( scoped )  )  . getAdvisors (  )  . length )     >     0  )  )  ;", "}", "METHOD_END"], "methodName": ["testSessionScoping"], "fileName": "org.springframework.aop.config.AopNamespaceHandlerScopeIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "ITestBean   scoped    =     (  ( ITestBean )     ( this . context . getBean (  \" singletonScoped \"  )  )  )  ;", "assertTrue (  \" Should   be   AOP   proxy \"  ,    AopUtils . isAopProxy ( scoped )  )  ;", "assertTrue (  \" Should   be   target   class   proxy \"  ,     ( scoped   instanceof   TestBean )  )  ;", "String   rob    =     \" Rob   Harrop \"  ;", "String   bram    =     \" Bram   Smeets \"  ;", "assertEquals ( rob ,    scoped . getName (  )  )  ;", "scoped . setName ( bram )  ;", "assertEquals ( bram ,    scoped . getName (  )  )  ;", "ITestBean   deserialized    =     (  ( ITestBean )     ( SerializUtils . serializeAndDeserialize ( scoped )  )  )  ;", "assertEquals ( bram ,    deserialized . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSingletonScoping"], "fileName": "org.springframework.aop.config.AopNamespaceHandlerScopeIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "return   new   ClassPathXmlApplicationContext ( AdvisorAutoProxyCreatorIntegrationTests . DEFAULT _ CONTEXT ,    AdvisorAutoProxyCreatorIntegrationTests . CLASS )  ;", "}", "METHOD_END"], "methodName": ["getBeanFactory"], "fileName": "org.springframework.aop.framework.autoproxy.AdvisorAutoProxyCreatorIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "DefaultAdvisorAutoProxyCreator   aapc    =     (  ( DefaultAdvisorAutoProxyCreator )     ( getBeanFactory (  )  . getBean ( AdvisorAutoProxyCreatorIntegrationTests . ADVISOR _ APC _ BEAN _ NAME )  )  )  ;", "assertEquals (  (  ( AdvisorAutoProxyCreatorIntegrationTests . ADVISOR _ APC _ BEAN _ NAME )     +     ( DefaultAdvisorAutoProxyCreator . SEPARATOR )  )  ,    aapc . getAdvisorBeanNamePrefix (  )  )  ;", "assertFalse ( aapc . isUsePrefix (  )  )  ;", "}", "METHOD_END"], "methodName": ["testDefaultExclusionPrefix"], "fileName": "org.springframework.aop.framework.autoproxy.AdvisorAutoProxyCreatorIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "BeanFactory   bf    =    getBeanFactory (  )  ;", "Object   o    =    bf . getBean (  \" noSetters \"  )  ;", "assertFalse ( AopUtils . isAop ( o )  )  ;", "}", "METHOD_END"], "methodName": ["testNoProxy"], "fileName": "org.springframework.aop.framework.autoproxy.AdvisorAutoProxyCreatorIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "BeanFactory   bf    =    getBeanFactory (  )  ;", "Object   bean    =    bf . getBean (  . TXMANAGER _ BEAN _ NAME )  ;", "assertTrue (  ( bean   instanceof   CallCountingTransactionManager )  )  ;", "CallCountingTransactionManager   txMan    =     (  ( CallCountingTransactionManager )     ( bf . getBean (  . TXMANAGER _ BEAN _ NAME )  )  )  ;", "Rollback   rb    =     (  ( Rollback )     ( bf . getBean (  \" rollback \"  )  )  )  ;", "assertEquals (  0  ,    txMan . commits )  ;", "rb . rollbackOnly ( false )  ;", "assertEquals (  \" Transaction   counts   match \"  ,     1  ,    txMan . commits )  ;", "assertEquals (  0  ,    txMan . rollbacks )  ;", "rb . rollbackOnly ( true )  ;", "assertEquals (  1  ,    txMan . rollbacks )  ;", "}", "METHOD_END"], "methodName": ["testProgrammaticRollback"], "fileName": "org.springframework.aop.framework.autoproxy.AdvisorAutoProxyCreatorIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "BeanFactory   bf    =    getBeanFactory (  )  ;", "IBean   test    =     (  ( IBean )     ( bf . getBean (  \" test \"  )  )  )  ;", "MethodCounter   counter    =     (  ( MethodCounter )     ( bf . getBean (  \" countingAdvice \"  )  )  )  ;", "assertEquals (  0  ,    counter . getCalls (  )  )  ;", "test . getName (  )  ;", "assertEquals (  1  ,    counter . getCalls (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRegexpApplied"], "fileName": "org.springframework.aop.framework.autoproxy.AdvisorAutoProxyCreatorIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "BeanFactory   bf    =    getBeanFactory (  )  ;", "Rollback   rb    =     (  ( Rollback )     ( bf . getBean (  \" rollback \"  )  )  )  ;", "CallCountingTransactionManager   txMan    =     (  ( CallCountingTransactionManager )     ( bf . getBean (  . TXMANAGER _ BEAN _ NAME )  )  )  ;", "OrderedTxCheckAdvisor   txc    =     (  ( OrderedTxCheckAdvisor )     ( bf . getBean (  \" orderedBeforeTransaction \"  )  )  )  ;", "assertEquals (  0  ,    txc . getCountingBeforeAdvice (  )  . getCalls (  )  )  ;", "assertEquals (  0  ,    txMan . commits )  ;", "rb . echoException ( null )  ;", "assertEquals (  0  ,    txc . getCountingBeforeAdvice (  )  . getCalls (  )  )  ;", "assertEquals (  \" Transaction   counts   match \"  ,     1  ,    txMan . commits )  ;", "assertEquals (  0  ,    txMan . rollbacks )  ;", "Exception   ex    =    new   Exception (  )  ;", "try    {", "rb . echoException ( ex )  ;", "}    catch    ( Exception   actual )     {", "assertEquals ( ex ,    actual )  ;", "}", "assertEquals (  \" Transaction   counts   match \"  ,     1  ,    txMan . rollbacks )  ;", "}", "METHOD_END"], "methodName": ["testRollbackRulesOnMethodCauseRollback"], "fileName": "org.springframework.aop.framework.autoproxy.AdvisorAutoProxyCreatorIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "BeanFactory   bf    =    getBeanFactory (  )  ;", "Rollback   rb    =     (  ( Rollback )     ( bf . getBean (  \" rollback \"  )  )  )  ;", "CallCountingTransactionManager   txMan    =     (  ( CallCountingTransactionManager )     ( bf . getBean (  . TXMANAGER _ BEAN _ NAME )  )  )  ;", "assertEquals (  0  ,    txMan . commits )  ;", "try    {", "rb . echoException ( new   ServletException (  )  )  ;", "}    catch    ( ServletException   ex )     {", "}", "assertEquals (  \" Transaction   counts   match \"  ,     1  ,    txMan . commits )  ;", "}", "METHOD_END"], "methodName": ["testRollbackRulesOnMethodPreventRollback"], "fileName": "org.springframework.aop.framework.autoproxy.AdvisorAutoProxyCreatorIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "BeanFactory   bf    =    getBeanFactory (  )  ;", "ITestBean   test    =     (  ( ITestBean )     ( bf . getBean (  \" test \"  )  )  )  ;", "CallCountingTransactionManager   txMan    =     (  ( CallCountingTransactionManager )     ( bf . getBean (  . TXMANAGER _ BEAN _ NAME )  )  )  ;", "OrderedTxCheckAdvisor   txc    =     (  ( OrderedTxCheckAdvisor )     ( bf . getBean (  \" orderedBeforeTransaction \"  )  )  )  ;", "assertEquals (  0  ,    txc . getCountingBeforeAdvice (  )  . getCalls (  )  )  ;", "assertEquals (  0  ,    txMan . commits )  ;", "assertEquals (  \" Initial   value   was   correct \"  ,     4  ,    test . getAge (  )  )  ;", "int   newAge    =     5  ;", "test . setAge ( newAge )  ;", "assertEquals (  1  ,    txc . getCountingBeforeAdvice (  )  . getCalls (  )  )  ;", "assertEquals (  \" New   value   set   correctly \"  ,    newAge ,    test . getAge (  )  )  ;", "assertEquals (  \" Transaction   counts   match \"  ,     1  ,    txMan . commits )  ;", "}", "METHOD_END"], "methodName": ["testTransactionAttributeOnMethod"], "fileName": "org.springframework.aop.framework.autoproxy.AdvisorAutoProxyCreatorIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "BeanFactory   bf    =    getBeanFactory (  )  ;", "ITestBean   test    =     (  ( ITestBean )     ( bf . getBean (  \" test \"  )  )  )  ;", "assertTrue ( AopUtils . isAop ( test )  )  ;", "}", "METHOD_END"], "methodName": ["testTxIsProxied"], "fileName": "org.springframework.aop.framework.autoproxy.AdvisorAutoProxyCreatorIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "return    -  1  ;", "}", "METHOD_END"], "methodName": ["getB"], "fileName": "org.springframework.aop.framework.autoproxy.NoSetters"}, {"methodBody": ["METHOD_START", "{", "return    (  ( CountingBeforeAdvice )     ( getAdvice (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getCountingBeforeAdvice"], "fileName": "org.springframework.aop.framework.autoproxy.OrderedTxCheckAdvisor"}, {"methodBody": ["METHOD_START", "{", "return   requireTransactionContext ;", "}", "METHOD_END"], "methodName": ["isRequireTransactionContext"], "fileName": "org.springframework.aop.framework.autoproxy.OrderedTxCheckAdvisor"}, {"methodBody": ["METHOD_START", "{", "this . requireTransactionContext    =    requireTransactionContext ;", "}", "METHOD_END"], "methodName": ["setRequireTransactionContext"], "fileName": "org.springframework.aop.framework.autoproxy.OrderedTxCheckAdvisor"}, {"methodBody": ["METHOD_START", "{", "if    ( ex    !  =    null )", "throw   ex ;", "}", "METHOD_END"], "methodName": ["echoException"], "fileName": "org.springframework.aop.framework.autoproxy.Rollback"}, {"methodBody": ["METHOD_START", "{", "if    ( rollbackOnly )     {", "setOnly (  )  ;", "}", "}", "METHOD_END"], "methodName": ["rollbackOnly"], "fileName": "org.springframework.aop.framework.autoproxy.Rollback"}, {"methodBody": ["METHOD_START", "{", "TransactionInterceptor . currentTransactionStatus (  )  . setRollbackOnly (  )  ;", "}", "METHOD_END"], "methodName": ["setRollbackOnly"], "fileName": "org.springframework.aop.framework.autoproxy.Rollback"}, {"methodBody": ["METHOD_START", "{", "EnableCachingIntegrationTests . FooRepository   repo    =    ctx . getBean ( EnableCachingIntegrationTests . FooRepository . class )  ;", "boolean   isCacheProxy    =    false ;", "if    ( AopUtils . isAopProxy ( repo )  )     {", "for    ( Advisor   advisor    :     (  ( Advised )     ( repo )  )  . getAdvisors (  )  )     {", "if    ( advisor   instanceof   BeanFactoryCacheOperationSourceAdvisor )     {", "isCacheProxy    =    true ;", "break ;", "}", "}", "}", "assertTrue (  \" FooRepository   is   not   a   cache   proxy \"  ,    isCacheProxy )  ;", "}", "METHOD_END"], "methodName": ["assertCacheProxying"], "fileName": "org.springframework.cache.annotation.EnableCachingIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "ctx . register (  . Config . class ,     . ProxyTargetClassCachingConfig . class )  ;", "ctx . refresh (  )  ;", "assertCacheProxying ( ctx )  ;", "assertThat ( AopUtils . isCglibProxy ( ctx . getBean (  . FooRepository . class )  )  ,    is ( true )  )  ;", "}", "METHOD_END"], "methodName": ["repositoryIsClassBasedCacheProxy"], "fileName": "org.springframework.cache.annotation.EnableCachingIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "ctx . register (  . Config . class ,     . AspectJCacheConfig . class )  ;", "try    {", "ctx . refresh (  )  ;", "}    catch    ( Exception   ex )     {", "assertTrue ( ex . getMessage (  )  . contains (  \" AspectJCachingConfiguration \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["repositoryUsesAspectJAdviceMode"], "fileName": "org.springframework.cache.annotation.EnableCachingIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "GenericWebApplicationContext   context    =    new   GenericWebApplicationContext (  )  ;", "ClassPathBeanDefinitionScanner   scanner    =    new   ClassPathBeanDefinitionScanner ( context )  ;", "scanner . setIncludeAnnotationConfig ( false )  ;", "scanner . setScopeMetadataResolver ( new   ScopeMetadataResolver (  )     {", "@ Override", "public   ScopeMetadata   resolveScopeMetadata ( BeanDefinition   definition )     {", "ScopeMetadata   metadata    =    new   ScopeMetadata (  )  ;", "if    ( definition   instanceof   AnnotatedBeanDefinition )     {", "AnnotatedBeanDefinition   annDef    =     (  ( AnnotatedBeanDefinition )     ( definition )  )  ;", "for    ( String   type    :    annDef . getMetadata (  )  . getAnnotationTypes (  )  )     {", "if    ( type . equals ( Singleton . class . getName (  )  )  )     {", "metadata . setScopeName ( SCOPE _ SINGLETON )  ;", "break ;", "} else", "if    ( annDef . getMetadata (  )  . getMetaAnnotationTypes ( type )  . contains ( getName (  )  )  )     {", "metadata . setScopeName ( type . substring (  (  ( type . length (  )  )     -     1  3  )  ,     (  ( type . length (  )  )     -     6  )  )  . toLowerCase (  )  )  ;", "metadata . setScopedProxyMode ( scopedProxyMode )  ;", "break ;", "} else", "if    ( type . startsWith (  \" inject \"  )  )     {", "metadata . setScopeName ( BeanDefinition . SCOPE _ PROTOTYPE )  ;", "}", "}", "}", "return   metadata ;", "}", "}  )  ;", "scanner . scan ( getClass (  )  . getPackage (  )  . getName (  )  )  ;", "scanner . scan ( getClass (  )  . getPackage (  )  . getName (  )  )  ;", "context . registerAlias (  \" c . SessionScopedTestBean \"  ,     \" session \"  )  ;", "context . refresh (  )  ;", "return   context ;", "}", "METHOD_END"], "methodName": ["createContext"], "fileName": "org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "this . oldRequestAttributes    =    new   ServletRequestAttributes ( new   MockHttpServletRequest (  )  )  ;", "this . newRequestAttributes    =    new   ServletRequestAttributes ( new   MockHttpServletRequest (  )  )  ;", "MockHttpServletRequest   oldRequestWithSession    =    new   MockHttpServletRequest (  )  ;", "oldRequestWithSession . setSession ( new   MockHttpSession (  )  )  ;", "this . oldRequestAttributesWithSession    =    new   ServletRequestAttributes ( oldRequestWithSession )  ;", "MockHttpServletRequest   newRequestWithSession    =    new   MockHttpServletRequest (  )  ;", "newRequestWithSession . setSession ( new   MockHttpSession (  )  )  ;", "this . newRequestAttributesWithSession    =    new   ServletRequestAttributes ( newRequestWithSession )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "RequestContextHolder . setRequestAttributes ( null )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "ApplicationContext   context    =    createContext ( NO )  ;", ". ScopedTestBean   bean    =     (  (  . ScopedTestBean )     ( context . getBean (  \" prototype \"  )  )  )  ;", "assertNotNull ( bean )  ;", "assertTrue ( context . isPrototype (  \" prototype \"  )  )  ;", "assertFalse ( context . isSingleton (  \" prototype \"  )  )  ;", "}", "METHOD_END"], "methodName": ["testPrototype"], "fileName": "org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "RequestContextHolder . setRequestAttributes ( oldRequestAttributes )  ;", "ApplicationContext   context    =    createContext ( NO )  ;", ". ScopedTestBean   bean    =     (  (  . ScopedTestBean )     ( context . getBean (  \" request \"  )  )  )  ;", "assertFalse ( AopUtils . isAopProxy ( bean )  )  ;", "assertEquals (  . DEFAULT _ NAME ,    bean . getName (  )  )  ;", "bean . setName (  . MODIFIED _ NAME )  ;", "RequestContextHolder . setRequestAttributes ( newRequestAttributes )  ;", "assertEquals (  . MODIFIED _ NAME ,    bean . getName (  )  )  ;", ". ScopedTestBean   bean 2     =     (  (  . ScopedTestBean )     ( context . getBean (  \" request \"  )  )  )  ;", "assertEquals (  . DEFAULT _ NAME ,    bean 2  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRequestScopeWithNoProxy"], "fileName": "org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "RequestContextHolder . setRequestAttributes ( oldRequestAttributes )  ;", "ApplicationContext   context    =    createContext ( INTERFACES )  ;", ". IScopedTestBean   bean    =     (  (  . IScopedTestBean )     ( context . getBean (  \" request \"  )  )  )  ;", "assertTrue ( AopUtils . isJdkDynamicProxy ( bean )  )  ;", "assertTrue (  ( bean   instanceof    . AnotherScopeTestInterface )  )  ;", "assertEquals (  . DEFAULT _ NAME ,    bean . getName (  )  )  ;", "bean . setName (  . MODIFIED _ NAME )  ;", "RequestContextHolder . setRequestAttributes ( newRequestAttributes )  ;", "assertEquals (  . DEFAULT _ NAME ,    bean . getName (  )  )  ;", "RequestContextHolder . setRequestAttributes ( oldRequestAttributes )  ;", "assertEquals (  . MODIFIED _ NAME ,    bean . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRequestScopeWithProxiedInterfaces"], "fileName": "org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "RequestContextHolder . setRequestAttributes ( oldRequestAttributes )  ;", "ApplicationContext   context    =    createContext ( TARGET _ CLASS )  ;", ". IScopedTestBean   bean    =     (  (  . IScopedTestBean )     ( context . getBean (  \" request \"  )  )  )  ;", "assertTrue ( AopUtils . isCglibProxy ( bean )  )  ;", "assertTrue (  ( bean   instanceof    . RequestScopedTestBean )  )  ;", "assertEquals (  . DEFAULT _ NAME ,    bean . getName (  )  )  ;", "bean . setName (  . MODIFIED _ NAME )  ;", "RequestContextHolder . setRequestAttributes ( newRequestAttributes )  ;", "assertEquals (  . DEFAULT _ NAME ,    bean . getName (  )  )  ;", "RequestContextHolder . setRequestAttributes ( oldRequestAttributes )  ;", "assertEquals (  . MODIFIED _ NAME ,    bean . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["testRequestScopeWithProxiedTargetClass"], "fileName": "org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "RequestContextHolder . setRequestAttributes ( oldRequestAttributesWithSession )  ;", "ApplicationContext   context    =    createContext ( NO )  ;", ". ScopedTestBean   bean    =     (  (  . ScopedTestBean )     ( context . getBean (  \" session \"  )  )  )  ;", "assertFalse ( AopUtils . isAopProxy ( bean )  )  ;", "assertEquals (  . DEFAULT _ NAME ,    bean . getName (  )  )  ;", "bean . setName (  . MODIFIED _ NAME )  ;", "RequestContextHolder . setRequestAttributes ( newRequestAttributesWithSession )  ;", "assertEquals (  . MODIFIED _ NAME ,    bean . getName (  )  )  ;", ". ScopedTestBean   bean 2     =     (  (  . ScopedTestBean )     ( context . getBean (  \" session \"  )  )  )  ;", "assertEquals (  . DEFAULT _ NAME ,    bean 2  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSessionScopeWithNoProxy"], "fileName": "org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "RequestContextHolder . setRequestAttributes ( oldRequestAttributesWithSession )  ;", "ApplicationContext   context    =    createContext ( INTERFACES )  ;", ". IScopedTestBean   bean    =     (  (  . IScopedTestBean )     ( context . getBean (  \" session \"  )  )  )  ;", "assertTrue ( AopUtils . isJdkDynamicProxy ( bean )  )  ;", "assertTrue (  ( bean   instanceof    . AnotherScopeTestInterface )  )  ;", "assertEquals (  . DEFAULT _ NAME ,    bean . getName (  )  )  ;", "bean . setName (  . MODIFIED _ NAME )  ;", "RequestContextHolder . setRequestAttributes ( newRequestAttributesWithSession )  ;", "assertEquals (  . DEFAULT _ NAME ,    bean . getName (  )  )  ;", "bean . setName (  . MODIFIED _ NAME )  ;", ". IScopedTestBean   bean 2     =     (  (  . IScopedTestBean )     ( context . getBean (  \" session \"  )  )  )  ;", "assertEquals (  . MODIFIED _ NAME ,    bean 2  . getName (  )  )  ;", "bean 2  . setName (  . DEFAULT _ NAME )  ;", "assertEquals (  . DEFAULT _ NAME ,    bean . getName (  )  )  ;", "RequestContextHolder . setRequestAttributes ( oldRequestAttributesWithSession )  ;", "assertEquals (  . MODIFIED _ NAME ,    bean . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSessionScopeWithProxiedInterfaces"], "fileName": "org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "RequestContextHolder . setRequestAttributes ( oldRequestAttributesWithSession )  ;", "ApplicationContext   context    =    createContext ( TARGET _ CLASS )  ;", ". IScopedTestBean   bean    =     (  (  . IScopedTestBean )     ( context . getBean (  \" session \"  )  )  )  ;", "assertTrue ( AopUtils . isCglibProxy ( bean )  )  ;", "assertTrue (  ( bean   instanceof    . ScopedTestBean )  )  ;", "assertTrue (  ( bean   instanceof    . SessionScopedTestBean )  )  ;", "assertEquals (  . DEFAULT _ NAME ,    bean . getName (  )  )  ;", "bean . setName (  . MODIFIED _ NAME )  ;", "RequestContextHolder . setRequestAttributes ( newRequestAttributesWithSession )  ;", "assertEquals (  . DEFAULT _ NAME ,    bean . getName (  )  )  ;", "bean . setName (  . MODIFIED _ NAME )  ;", ". IScopedTestBean   bean 2     =     (  (  . IScopedTestBean )     ( context . getBean (  \" session \"  )  )  )  ;", "assertEquals (  . MODIFIED _ NAME ,    bean 2  . getName (  )  )  ;", "bean 2  . setName (  . DEFAULT _ NAME )  ;", "assertEquals (  . DEFAULT _ NAME ,    bean . getName (  )  )  ;", "RequestContextHolder . setRequestAttributes ( oldRequestAttributesWithSession )  ;", "assertEquals (  . MODIFIED _ NAME ,    bean . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSessionScopeWithProxiedTargetClass"], "fileName": "org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "RequestContextHolder . setRequestAttributes ( oldRequestAttributes )  ;", "ApplicationContext   context    =    createContext ( INTERFACES )  ;", ". ScopedTestBean   bean    =     (  (  . ScopedTestBean )     ( context . getBean (  \" singleton \"  )  )  )  ;", "assertFalse ( AopUtils . isAopProxy ( bean )  )  ;", "assertEquals (  . DEFAULT _ NAME ,    bean . getName (  )  )  ;", "bean . setName (  . MODIFIED _ NAME )  ;", "RequestContextHolder . setRequestAttributes ( newRequestAttributes )  ;", "assertEquals (  . MODIFIED _ NAME ,    bean . getName (  )  )  ;", ". ScopedTestBean   bean 2     =     (  (  . ScopedTestBean )     ( context . getBean (  \" singleton \"  )  )  )  ;", "assertEquals (  . MODIFIED _ NAME ,    bean 2  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSingletonScopeIgnoresProxyInterfaces"], "fileName": "org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "RequestContextHolder . setRequestAttributes ( oldRequestAttributes )  ;", "ApplicationContext   context    =    createContext ( TARGET _ CLASS )  ;", ". ScopedTestBean   bean    =     (  (  . ScopedTestBean )     ( context . getBean (  \" singleton \"  )  )  )  ;", "assertFalse ( AopUtils . isAopProxy ( bean )  )  ;", "assertEquals (  . DEFAULT _ NAME ,    bean . getName (  )  )  ;", "bean . setName (  . MODIFIED _ NAME )  ;", "RequestContextHolder . setRequestAttributes ( newRequestAttributes )  ;", "assertEquals (  . MODIFIED _ NAME ,    bean . getName (  )  )  ;", ". ScopedTestBean   bean 2     =     (  (  . ScopedTestBean )     ( context . getBean (  \" singleton \"  )  )  )  ;", "assertEquals (  . MODIFIED _ NAME ,    bean 2  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSingletonScopeIgnoresProxyTargetClass"], "fileName": "org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "RequestContextHolder . setRequestAttributes ( oldRequestAttributes )  ;", "ApplicationContext   context    =    createContext ( NO )  ;", ". ScopedTestBean   bean    =     (  (  . ScopedTestBean )     ( context . getBean (  \" singleton \"  )  )  )  ;", "assertTrue ( context . isSingleton (  \" singleton \"  )  )  ;", "assertFalse ( context . isPrototype (  \" singleton \"  )  )  ;", "assertFalse ( AopUtils . isAopProxy ( bean )  )  ;", "assertEquals (  . DEFAULT _ NAME ,    bean . getName (  )  )  ;", "bean . setName (  . MODIFIED _ NAME )  ;", "RequestContextHolder . setRequestAttributes ( newRequestAttributes )  ;", "assertEquals (  . MODIFIED _ NAME ,    bean . getName (  )  )  ;", ". ScopedTestBean   bean 2     =     (  (  . ScopedTestBean )     ( context . getBean (  \" singleton \"  )  )  )  ;", "assertEquals (  . MODIFIED _ NAME ,    bean 2  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["testSingletonScopeWithNoProxy"], "fileName": "org.springframework.context.annotation.jsr330.ClassPathBeanDefinitionScannerJsr330ScopeIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "GenericWebApplicationContext   context    =    new   GenericWebApplicationContext (  )  ;", "scanner    =    new    ( context )  ;", "scanner . setIncludeAnnotationConfig ( false )  ;", "scanner . setBeanNameGenerator (  (    definition ,    registry )     -  >    definition . getScope (  )  )  ;", "scanner . setScopedProxyMode ( scopedProxyMode )  ;", "scanner . scan ( getClass (  )  . getPackage (  )  . getName (  )  )  ;", "scanner . scan ( getClass (  )  . getPackage (  )  . getName (  )  )  ;", "context . refresh (  )  ;", "return   context ;", "}", "METHOD_END"], "methodName": ["createContext"], "fileName": "org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "RequestContextHolder . setRequestAttributes ( oldRequestAttributes )  ;", "ApplicationContext   context    =    createContext ( ScopedProxyMode . NO )  ;", ". ScopedTestBean   bean    =     (  (  . ScopedTestBean )     ( context . getBean (  \" request \"  )  )  )  ;", "assertFalse ( AopUtils . isAopProxy ( bean )  )  ;", "assertEquals (  . DEFAULT _ NAME ,    bean . getName (  )  )  ;", "bean . setName (  . MODIFIED _ NAME )  ;", "RequestContextHolder . setRequestAttributes ( newRequestAttributes )  ;", "assertEquals (  . MODIFIED _ NAME ,    bean . getName (  )  )  ;", ". ScopedTestBean   bean 2     =     (  (  . ScopedTestBean )     ( context . getBean (  \" request \"  )  )  )  ;", "assertEquals (  . DEFAULT _ NAME ,    bean 2  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["requestScopeWithNoProxy"], "fileName": "org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "RequestContextHolder . setRequestAttributes ( oldRequestAttributes )  ;", "ApplicationContext   context    =    createContext ( ScopedProxyMode . INTERFACES )  ;", ". IScopedTestBean   bean    =     (  (  . IScopedTestBean )     ( context . getBean (  \" request \"  )  )  )  ;", "assertTrue ( AopUtils . isJdkDynamicProxy ( bean )  )  ;", "assertTrue (  ( bean   instanceof    . AnotherScopeTestInterface )  )  ;", "assertEquals (  . DEFAULT _ NAME ,    bean . getName (  )  )  ;", "bean . setName (  . MODIFIED _ NAME )  ;", "RequestContextHolder . setRequestAttributes ( newRequestAttributes )  ;", "assertEquals (  . DEFAULT _ NAME ,    bean . getName (  )  )  ;", "RequestContextHolder . setRequestAttributes ( oldRequestAttributes )  ;", "assertEquals (  . MODIFIED _ NAME ,    bean . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["requestScopeWithProxiedInterfaces"], "fileName": "org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "RequestContextHolder . setRequestAttributes ( oldRequestAttributes )  ;", "ApplicationContext   context    =    createContext ( ScopedProxyMode . TARGET _ CLASS )  ;", ". IScopedTestBean   bean    =     (  (  . IScopedTestBean )     ( context . getBean (  \" request \"  )  )  )  ;", "assertTrue ( AopUtils . isCglibProxy ( bean )  )  ;", "assertTrue (  ( bean   instanceof    . RequestScopedTestBean )  )  ;", "assertEquals (  . DEFAULT _ NAME ,    bean . getName (  )  )  ;", "bean . setName (  . MODIFIED _ NAME )  ;", "RequestContextHolder . setRequestAttributes ( newRequestAttributes )  ;", "assertEquals (  . DEFAULT _ NAME ,    bean . getName (  )  )  ;", "RequestContextHolder . setRequestAttributes ( oldRequestAttributes )  ;", "assertEquals (  . MODIFIED _ NAME ,    bean . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["requestScopeWithProxiedTargetClass"], "fileName": "org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "RequestContextHolder . setRequestAttributes ( oldRequestAttributesWithSession )  ;", "ApplicationContext   context    =    createContext ( ScopedProxyMode . NO )  ;", ". ScopedTestBean   bean    =     (  (  . ScopedTestBean )     ( context . getBean (  \" session \"  )  )  )  ;", "assertFalse ( AopUtils . isAopProxy ( bean )  )  ;", "assertEquals (  . DEFAULT _ NAME ,    bean . getName (  )  )  ;", "bean . setName (  . MODIFIED _ NAME )  ;", "RequestContextHolder . setRequestAttributes ( newRequestAttributesWithSession )  ;", "assertEquals (  . MODIFIED _ NAME ,    bean . getName (  )  )  ;", ". ScopedTestBean   bean 2     =     (  (  . ScopedTestBean )     ( context . getBean (  \" session \"  )  )  )  ;", "assertEquals (  . DEFAULT _ NAME ,    bean 2  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["sessionScopeWithNoProxy"], "fileName": "org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "RequestContextHolder . setRequestAttributes ( oldRequestAttributesWithSession )  ;", "ApplicationContext   context    =    createContext ( ScopedProxyMode . INTERFACES )  ;", ". IScopedTestBean   bean    =     (  (  . IScopedTestBean )     ( context . getBean (  \" session \"  )  )  )  ;", "assertTrue ( AopUtils . isJdkDynamicProxy ( bean )  )  ;", "assertTrue (  ( bean   instanceof    . AnotherScopeTestInterface )  )  ;", "assertEquals (  . DEFAULT _ NAME ,    bean . getName (  )  )  ;", "bean . setName (  . MODIFIED _ NAME )  ;", "RequestContextHolder . setRequestAttributes ( newRequestAttributesWithSession )  ;", "assertEquals (  . DEFAULT _ NAME ,    bean . getName (  )  )  ;", "bean . setName (  . MODIFIED _ NAME )  ;", ". IScopedTestBean   bean 2     =     (  (  . IScopedTestBean )     ( context . getBean (  \" session \"  )  )  )  ;", "assertEquals (  . MODIFIED _ NAME ,    bean 2  . getName (  )  )  ;", "bean 2  . setName (  . DEFAULT _ NAME )  ;", "assertEquals (  . DEFAULT _ NAME ,    bean . getName (  )  )  ;", "RequestContextHolder . setRequestAttributes ( oldRequestAttributesWithSession )  ;", "assertEquals (  . MODIFIED _ NAME ,    bean . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["sessionScopeWithProxiedInterfaces"], "fileName": "org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "RequestContextHolder . setRequestAttributes ( oldRequestAttributesWithSession )  ;", "ApplicationContext   context    =    createContext ( ScopedProxyMode . TARGET _ CLASS )  ;", ". IScopedTestBean   bean    =     (  (  . IScopedTestBean )     ( context . getBean (  \" session \"  )  )  )  ;", "assertTrue ( AopUtils . isCglibProxy ( bean )  )  ;", "assertTrue (  ( bean   instanceof    . ScopedTestBean )  )  ;", "assertTrue (  ( bean   instanceof    . SessionScopedTestBean )  )  ;", "assertEquals (  . DEFAULT _ NAME ,    bean . getName (  )  )  ;", "bean . setName (  . MODIFIED _ NAME )  ;", "RequestContextHolder . setRequestAttributes ( newRequestAttributesWithSession )  ;", "assertEquals (  . DEFAULT _ NAME ,    bean . getName (  )  )  ;", "bean . setName (  . MODIFIED _ NAME )  ;", ". IScopedTestBean   bean 2     =     (  (  . IScopedTestBean )     ( context . getBean (  \" session \"  )  )  )  ;", "assertEquals (  . MODIFIED _ NAME ,    bean 2  . getName (  )  )  ;", "bean 2  . setName (  . DEFAULT _ NAME )  ;", "assertEquals (  . DEFAULT _ NAME ,    bean . getName (  )  )  ;", "RequestContextHolder . setRequestAttributes ( oldRequestAttributesWithSession )  ;", "assertEquals (  . MODIFIED _ NAME ,    bean . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["sessionScopeWithProxiedTargetClass"], "fileName": "org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "MockHttpServletRequest   oldRequestWithSession    =    new   MockHttpServletRequest (  )  ;", "oldRequestWithSession . setSession ( new   MockHttpSession (  )  )  ;", "this . oldRequestAttributesWithSession    =    new   web . context . request . ServletRequestAttributes ( oldRequestWithSession )  ;", "MockHttpServletRequest   newRequestWithSession    =    new   MockHttpServletRequest (  )  ;", "newRequestWithSession . setSession ( new   MockHttpSession (  )  )  ;", "this . newRequestAttributesWithSession    =    new   web . context . request . ServletRequestAttributes ( newRequestWithSession )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "RequestContextHolder . setRequestAttributes ( oldRequestAttributes )  ;", "ApplicationContext   context    =    createContext ( ScopedProxyMode . INTERFACES )  ;", ". ScopedTestBean   bean    =     (  (  . ScopedTestBean )     ( context . getBean (  \" singleton \"  )  )  )  ;", "assertFalse ( AopUtils . isAopProxy ( bean )  )  ;", "assertEquals (  . DEFAULT _ NAME ,    bean . getName (  )  )  ;", "bean . setName (  . MODIFIED _ NAME )  ;", "RequestContextHolder . setRequestAttributes ( newRequestAttributes )  ;", "assertEquals (  . MODIFIED _ NAME ,    bean . getName (  )  )  ;", ". ScopedTestBean   bean 2     =     (  (  . ScopedTestBean )     ( context . getBean (  \" singleton \"  )  )  )  ;", "assertEquals (  . MODIFIED _ NAME ,    bean 2  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["singletonScopeIgnoresProxyInterfaces"], "fileName": "org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "RequestContextHolder . setRequestAttributes ( oldRequestAttributes )  ;", "ApplicationContext   context    =    createContext ( ScopedProxyMode . TARGET _ CLASS )  ;", ". ScopedTestBean   bean    =     (  (  . ScopedTestBean )     ( context . getBean (  \" singleton \"  )  )  )  ;", "assertFalse ( AopUtils . isAopProxy ( bean )  )  ;", "assertEquals (  . DEFAULT _ NAME ,    bean . getName (  )  )  ;", "bean . setName (  . MODIFIED _ NAME )  ;", "RequestContextHolder . setRequestAttributes ( newRequestAttributes )  ;", "assertEquals (  . MODIFIED _ NAME ,    bean . getName (  )  )  ;", ". ScopedTestBean   bean 2     =     (  (  . ScopedTestBean )     ( context . getBean (  \" singleton \"  )  )  )  ;", "assertEquals (  . MODIFIED _ NAME ,    bean 2  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["singletonScopeIgnoresProxyTargetClass"], "fileName": "org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "RequestContextHolder . setRequestAttributes ( oldRequestAttributes )  ;", "ApplicationContext   context    =    createContext ( ScopedProxyMode . NO )  ;", ". ScopedTestBean   bean    =     (  (  . ScopedTestBean )     ( context . getBean (  \" singleton \"  )  )  )  ;", "assertFalse ( AopUtils . isAopProxy ( bean )  )  ;", "assertEquals (  . DEFAULT _ NAME ,    bean . getName (  )  )  ;", "bean . setName (  . MODIFIED _ NAME )  ;", "RequestContextHolder . setRequestAttributes ( newRequestAttributes )  ;", "assertEquals (  . MODIFIED _ NAME ,    bean . getName (  )  )  ;", ". ScopedTestBean   bean 2     =     (  (  . ScopedTestBean )     ( context . getBean (  \" singleton \"  )  )  )  ;", "assertEquals (  . MODIFIED _ NAME ,    bean 2  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["singletonScopeWithNoProxy"], "fileName": "org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "RequestContextHolder . resetRequestAttributes (  )  ;", "}", "METHOD_END"], "methodName": ["tearDown"], "fileName": "org.springframework.context.annotation.scope.ClassPathBeanDefinitionScannerScopeIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "{", "ConfigurableApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "ctx . refresh (  )  ;", "}", "{", "ConfigurableApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "ctx . get (  )  . setRequiredProperties (  \" foo \"  ,     \" bar \"  )  ;", "try    {", "ctx . refresh (  )  ;", "fail (  \" expected   missing   property   exception \"  )  ;", "}    catch    ( MissingRequiredPropertiesException   ex )     {", "}", "}", "{", "ConfigurableApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "ctx . get (  )  . setRequiredProperties (  \" foo \"  )  ;", "ctx . set ( new   Mock (  )  . withProperty (  \" foo \"  ,     \" fooValue \"  )  )  ;", "ctx . refresh (  )  ;", "}", "}", "METHOD_END"], "methodName": ["abstractApplicationContextValidatesRequiredPropertiesOnRefresh"], "fileName": "org.springframework.core.env.EnvironmentSystemIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "GenericApplicationContext   ctx    =    new   GenericApplicationContext (  )  ;", "ctx . setEnvironment ( prodEnv )  ;", "new   AnnotatedBeanDefinitionReader ( ctx )  . register (  . Config . class )  ;", "ctx . refresh (  )  ;", "assertThat ( ctx . containsBean (  . Constants . DEV _ BEAN _ NAME )  ,    is ( false )  )  ;", "assertThat ( ctx . containsBean (  . Constants . PROD _ BEAN _ NAME )  ,    is ( true )  )  ;", "}", "METHOD_END"], "methodName": ["annotatedBeanDefinitionReader_inheritsEnvironmentFromEnvironmentCapableBDR"], "fileName": "org.springframework.core.env.EnvironmentSystemIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "assertHasStandardEnvironment ( ctx )  ;", "ctx . setEnvironment ( devEnv )  ;", "ctx . register (  . DevConfig . class )  ;", "ctx . refresh (  )  ;", "assertThat (  \" should   have   dev   bean \"  ,    ctx . containsBean (  . Constants . DEV _ BEAN _ NAME )  ,    is ( true )  )  ;", "assertThat (  \" should   have   transitive   bean \"  ,    ctx . containsBean (  . Constants . TRANSITIVE _ BEAN _ NAME )  ,    is ( true )  )  ;", "}", "METHOD_END"], "methodName": ["annotationConfigApplicationContext_withDevEnvAndDevConfigClass"], "fileName": "org.springframework.core.env.EnvironmentSystemIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "assertHasStandardEnvironment ( ctx )  ;", "ctx . setEnvironment ( prodEnv )  ;", "ctx . register (  . Config . class )  ;", "ctx . refresh (  )  ;", "assertEnvironmentAwareInvoked ( ctx ,    prodEnv )  ;", "assertThat (  \" should   have   prod   bean \"  ,    ctx . containsBean (  . Constants . PROD _ BEAN _ NAME )  ,    is ( true )  )  ;", "assertThat (  \" should   not   have   dev   bean \"  ,    ctx . containsBean (  . Constants . DEV _ BEAN _ NAME )  ,    is ( false )  )  ;", "assertThat (  \" should   not   have   transitive   bean \"  ,    ctx . containsBean (  . Constants . TRANSITIVE _ BEAN _ NAME )  ,    is ( false )  )  ;", "}", "METHOD_END"], "methodName": ["annotationConfigApplicationContext_withImportedConfigClasses"], "fileName": "org.springframework.core.env.EnvironmentSystemIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "assertHasStandardEnvironment ( ctx )  ;", "ctx . setEnvironment ( prodEnv )  ;", "ctx . register (  . EnvironmentAwareBean . class )  ;", "ctx . refresh (  )  ;", "assertEnvironmentAwareInvoked ( ctx ,    prodEnv )  ;", "}", "METHOD_END"], "methodName": ["annotationConfigApplicationContext_withPojos"], "fileName": "org.springframework.core.env.EnvironmentSystemIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "assertHasStandardEnvironment ( ctx )  ;", "ctx . setEnvironment ( prodEnv )  ;", "ctx . register (  . DevConfig . class )  ;", "ctx . refresh (  )  ;", "assertThat (  \" should   not   have   dev   bean \"  ,    ctx . containsBean (  . Constants . DEV _ BEAN _ NAME )  ,    is ( false )  )  ;", "assertThat (  \" should   not   have   transitive   bean \"  ,    ctx . containsBean (  . Constants . TRANSITIVE _ BEAN _ NAME )  ,    is ( false )  )  ;", "}", "METHOD_END"], "methodName": ["annotationConfigApplicationContext_withProdEnvAndDevConfigClass"], "fileName": "org.springframework.core.env.EnvironmentSystemIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "assertHasStandardEnvironment ( ctx )  ;", "ctx . setEnvironment ( prodEnv )  ;", "ctx . register (  . ProdConfig . class )  ;", "ctx . refresh (  )  ;", "assertThat (  \" should   have   prod   bean \"  ,    ctx . containsBean (  . Constants . PROD _ BEAN _ NAME )  ,    is ( true )  )  ;", "}", "METHOD_END"], "methodName": ["annotationConfigApplicationContext_withProdEnvAndProdConfigClass"], "fileName": "org.springframework.core.env.EnvironmentSystemIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigWebApplicationContext   ctx    =    new   AnnotationConfigWebApplicationContext (  )  ;", "ctx . setEnvironment ( prodWebEnv )  ;", "ctx . setConfigLocation (  . EnvironmentAwareBean . class . getName (  )  )  ;", "ctx . refresh (  )  ;", "assertHasEnvironment ( ctx ,    prodWebEnv )  ;", "assertEnvironmentBeanRegistered ( ctx )  ;", "assertEnvironmentAwareInvoked ( ctx ,    prodWebEnv )  ;", "}", "METHOD_END"], "methodName": ["annotationConfigWebApplicationContext"], "fileName": "org.springframework.core.env.EnvironmentSystemIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "assertThat ( ctx . getBean ( EnvironmentSystemIntegrationTests . EnvironmentAwareBean . class )  . environment ,    is ( expectedEnv )  )  ;", "}", "METHOD_END"], "methodName": ["assertEnvironmentAwareInvoked"], "fileName": "org.springframework.core.env.EnvironmentSystemIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "assertThat ( ctx . containsBean ( ENVIRONMENT _ BEAN _ NAME )  ,    is ( true )  )  ;", "}", "METHOD_END"], "methodName": ["assertEnvironmentBeanRegistered"], "fileName": "org.springframework.core.env.EnvironmentSystemIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "Environment   actualEnv    =    ctx . getEnvironment (  )  ;", "assertThat ( actualEnv ,    notNullValue (  )  )  ;", "assertThat ( actualEnv ,    is ( expectedEnv )  )  ;", "assertThat ( ctx . containsBean ( ENVIRONMENT _ BEAN _ NAME )  ,    is ( true )  )  ;", "}", "METHOD_END"], "methodName": ["assertHasEnvironment"], "fileName": "org.springframework.core.env.EnvironmentSystemIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "Environment   defaultEnv    =    ctx . getEnvironment (  )  ;", "assertThat ( defaultEnv ,    notNullValue (  )  )  ;", "assertThat ( defaultEnv ,    instanceOf ( StandardEnvironment . class )  )  ;", "}", "METHOD_END"], "methodName": ["assertHasStandardEnvironment"], "fileName": "org.springframework.core.env.EnvironmentSystemIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "Environment   defaultEnv    =    ctx . getEnvironment (  )  ;", "assertThat ( defaultEnv ,    notNullValue (  )  )  ;", "assertThat ( defaultEnv ,    instanceOf ( StandardServletEnvironment . class )  )  ;", "}", "METHOD_END"], "methodName": ["assertHasStandardServletEnvironment"], "fileName": "org.springframework.core.env.EnvironmentSystemIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "GenericApplicationContext   ctx    =    new   GenericApplicationContext (  )  ;", "ctx . setEnvironment ( prodEnv )  ;", "ClassPathBeanDefinitionScanner   scanner    =    new   ClassPathBeanDefinitionScanner ( ctx )  ;", "scanner . scan (  \" scan 2  \"  )  ;", "ctx . refresh (  )  ;", "assertThat ( scanner . getEnvironment (  )  ,    is (  (  ( Environment )     ( ctx . getEnvironment (  )  )  )  )  )  ;", "assertThat ( ctx . containsBean (  . Constants . DEV _ BEAN _ NAME )  ,    is ( false )  )  ;", "assertThat ( ctx . containsBean (  . Constants . PROD _ BEAN _ NAME )  ,    is ( true )  )  ;", "}", "METHOD_END"], "methodName": ["classPathBeanDefinitionScanner_inheritsEnvironmentFromEnvironmentCapableBDR_scanProfileAnnotatedComponents"], "fileName": "org.springframework.core.env.EnvironmentSystemIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "GenericApplicationContext   ctx    =    new   GenericApplicationContext (  )  ;", "ctx . setEnvironment ( prodEnv )  ;", "ClassPathBeanDefinitionScanner   scanner    =    new   ClassPathBeanDefinitionScanner ( ctx )  ;", "scanner . scan (  \" scan 1  \"  )  ;", "ctx . refresh (  )  ;", "assertThat ( ctx . containsBean (  . Constants . DEV _ BEAN _ NAME )  ,    is ( false )  )  ;", "assertThat ( ctx . containsBean (  . Constants . PROD _ BEAN _ NAME )  ,    is ( true )  )  ;", "}", "METHOD_END"], "methodName": ["classPathBeanDefinitionScanner_inheritsEnvironmentFromEnvironmentCapableBDR_scanProfileAnnotatedConfigClasses"], "fileName": "org.springframework.core.env.EnvironmentSystemIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "ConfigurableApplicationContext   ctx    =    new   ClassPathXmlApplicationContext ( EnvironmentSystemIntegrationTests . Constants . XML _ PATH )  ;", "ctx . setEnvironment ( prodEnv )  ;", "ctx . refresh (  )  ;", "assertEnvironmentBeanRegistered ( ctx )  ;", "assertHasEnvironment ( ctx ,    prodEnv )  ;", "assertEnvironmentAwareInvoked ( ctx ,    ctx . getEnvironment (  )  )  ;", "assertThat ( ctx . containsBean ( EnvironmentSystemIntegrationTests . Constants . DEV _ BEAN _ NAME )  ,    is ( false )  )  ;", "assertThat ( ctx . containsBean ( EnvironmentSystemIntegrationTests . Constants . PROD _ BEAN _ NAME )  ,    is ( true )  )  ;", "}", "METHOD_END"], "methodName": ["classPathXmlApplicationContext"], "fileName": "org.springframework.core.env.EnvironmentSystemIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "ClassPathResource   xml    =    new   ClassPathResource ( EnvironmentSystemIntegrationTests . Constants . XML _ PATH )  ;", "File   tmpFile    =    File . createTempFile (  \" test \"  ,     \" xml \"  )  ;", "FileCopyUtils . copy ( xml . getFile (  )  ,    tmpFile )  ;", "ConfigurableApplicationContext   ctx    =    new   FileSystemXmlApplicationContext ( new   String [  ]  {     \" file :  \"     +     ( tmpFile . getPath (  )  )     }  ,    false )  ;", "ctx . setEnvironment ( prodEnv )  ;", "ctx . refresh (  )  ;", "assertEnvironmentBeanRegistered ( ctx )  ;", "assertHasEnvironment ( ctx ,    prodEnv )  ;", "assertEnvironmentAwareInvoked ( ctx ,    ctx . getEnvironment (  )  )  ;", "assertThat ( ctx . containsBean ( EnvironmentSystemIntegrationTests . Constants . DEV _ BEAN _ NAME )  ,    is ( false )  )  ;", "assertThat ( ctx . containsBean ( EnvironmentSystemIntegrationTests . Constants . PROD _ BEAN _ NAME )  ,    is ( true )  )  ;", "}", "METHOD_END"], "methodName": ["fileSystemXmlApplicationContext"], "fileName": "org.springframework.core.env.EnvironmentSystemIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "GenericApplicationContext   ctx    =    new   GenericApplicationContext ( newBeanFactoryWithEnvironmentAwareBean (  )  )  ;", "ctx . setEnvironment ( prodEnv )  ;", "ctx . refresh (  )  ;", "assertHasEnvironment ( ctx ,    prodEnv )  ;", "assertEnvironmentBeanRegistered ( ctx )  ;", "assertEnvironmentAwareInvoked ( ctx ,    prodEnv )  ;", "}", "METHOD_END"], "methodName": ["genericApplicationContext_customEnv"], "fileName": "org.springframework.core.env.EnvironmentSystemIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "ConfigurableApplicationContext   ctx    =    new   GenericApplicationContext ( newBeanFactoryWithEnvironmentAwareBean (  )  )  ;", "ctx . refresh (  )  ;", "assertHasStandardEnvironment ( ctx )  ;", "assertEnvironmentBeanRegistered ( ctx )  ;", "assertEnvironmentAwareInvoked ( ctx ,    ctx . getEnvironment (  )  )  ;", "}", "METHOD_END"], "methodName": ["genericApplicationContext_standardEnv"], "fileName": "org.springframework.core.env.EnvironmentSystemIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "GenericXmlApplicationContext   ctx    =    new   GenericXmlApplicationContext (  )  ;", "assertHasStandardEnvironment ( ctx )  ;", "ctx . setEnvironment ( prodEnv )  ;", "ctx . load (  . Constants . XML _ PATH )  ;", "ctx . refresh (  )  ;", "assertHasEnvironment ( ctx ,    prodEnv )  ;", "assertEnvironmentBeanRegistered ( ctx )  ;", "assertEnvironmentAwareInvoked ( ctx ,    prodEnv )  ;", "assertThat ( ctx . containsBean (  . Constants . DEV _ BEAN _ NAME )  ,    is ( false )  )  ;", "assertThat ( ctx . containsBean (  . Constants . PROD _ BEAN _ NAME )  ,    is ( true )  )  ;", "}", "METHOD_END"], "methodName": ["genericXmlApplicationContext"], "fileName": "org.springframework.core.env.EnvironmentSystemIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "StandardEnvironment   derivedDevEnv    =    new   StandardEnvironment (  )  ;", "derivedDevEnv . setActiveProfiles (  . Constants . DERIVED _ DEV _ ENV _ NAME )  ;", "ctx . setEnvironment ( derivedDevEnv )  ;", "ctx . register (  . DerivedDevConfig . class )  ;", "ctx . refresh (  )  ;", "assertThat (  \" should   have   dev   bean \"  ,    ctx . containsBean (  . Constants . DEV _ BEAN _ NAME )  ,    is ( true )  )  ;", "assertThat (  \" should   have   derived   dev   bean \"  ,    ctx . containsBean (  . Constants . DERIVED _ DEV _ BEAN _ NAME )  ,    is ( true )  )  ;", "assertThat (  \" should   have   transitive   bean \"  ,    ctx . containsBean (  . Constants . TRANSITIVE _ BEAN _ NAME )  ,    is ( true )  )  ;", "}", "METHOD_END"], "methodName": ["mostSpecificDerivedClassDrivesEnvironment_withDerivedDevEnvAndDerivedDevConfigClass"], "fileName": "org.springframework.core.env.EnvironmentSystemIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "ctx . setEnvironment ( devEnv )  ;", "ctx . register (  . DerivedDevConfig . class )  ;", "ctx . refresh (  )  ;", "assertThat (  \" should   not   have   dev   bean \"  ,    ctx . containsBean (  . Constants . DEV _ BEAN _ NAME )  ,    is ( false )  )  ;", "assertThat (  \" should   not   have   derived   dev   bean \"  ,    ctx . containsBean (  . Constants . DERIVED _ DEV _ BEAN _ NAME )  ,    is ( false )  )  ;", "assertThat (  \" should   not   have   transitive   bean \"  ,    ctx . containsBean (  . Constants . TRANSITIVE _ BEAN _ NAME )  ,    is ( false )  )  ;", "}", "METHOD_END"], "methodName": ["mostSpecificDerivedClassDrivesEnvironment_withDevEnvAndDerivedDevConfigClass"], "fileName": "org.springframework.core.env.EnvironmentSystemIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "DefaultListableBeanFactory   bf    =    new   DefaultListableBeanFactory (  )  ;", "registerBeanDefinition ( bf )  ;", "return   bf ;", "}", "METHOD_END"], "methodName": ["newBeanFactoryWithEnvironmentAwareBean"], "fileName": "org.springframework.core.env.EnvironmentSystemIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "registry . registerBeanDefinition ( EnvironmentSystemIntegrationTests . Constants . ENVIRONMENT _ AWARE _ BEAN _ NAME ,    rootBeanDefinition ( EnvironmentSystemIntegrationTests . EnvironmentAwareBean . class )  . getBeanDefinition (  )  )  ;", "}", "METHOD_END"], "methodName": ["registerEnvironmentBeanDefinition"], "fileName": "org.springframework.core.env.EnvironmentSystemIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   servletContext    =    new   MockServletContext (  )  ;", "servletContext . addInitParameter (  \" pCommon \"  ,     \" pCommonContextValue \"  )  ;", "servletContext . addInitParameter (  \" pContext 1  \"  ,     \" pContext 1 Value \"  )  ;", "MockServletConfig   servletConfig    =    new   MockServletConfig ( servletContext )  ;", "servletConfig . addInitParameter (  \" pCommon \"  ,     \" pCommonConfigValue \"  )  ;", "servletConfig . addInitParameter (  \" pConfig 1  \"  ,     \" pConfig 1 Value \"  )  ;", "AbstractRefreshableWebApplicationContext   ctx    =    new   AnnotationConfigWebApplicationContext (  )  ;", "ctx . setConfigLocation (  . EnvironmentAwareBean . class . getName (  )  )  ;", "ctx . setServletConfig ( servletConfig )  ;", "ctx . refresh (  )  ;", "ConfigurableEnvironment   environment    =    ctx . getEnvironment (  )  ;", "assertThat ( environment ,    instanceOf ( StandardServletEnvironment . class )  )  ;", "MutablePropertySources   propertySources    =    environment . getPropertySources (  )  ;", "assertThat ( propertySources . contains ( SERVLET _ CONTEXT _ PROPERTY _ SOURCE _ NAME )  ,    is ( true )  )  ;", "assertThat ( propertySources . contains ( SERVLET _ CONFIG _ PROPERTY _ SOURCE _ NAME )  ,    is ( true )  )  ;", "assertThat ( environment . getProperty (  \" pCommon \"  )  ,    is (  \" pCommonConfigValue \"  )  )  ;", "assertThat ( propertySources . precedenceOf ( PropertySource . named ( SERVLET _ CONFIG _ PROPERTY _ SOURCE _ NAME )  )  ,    lessThan ( propertySources . precedenceOf ( PropertySource . named ( SERVLET _ CONTEXT _ PROPERTY _ SOURCE _ NAME )  )  )  )  ;", "assertThat ( environment . getProperty (  \" pContext 1  \"  )  ,    is (  \" pContext 1 Value \"  )  )  ;", "assertThat ( environment . getProperty (  \" pConfig 1  \"  )  ,    is (  \" pConfig 1 Value \"  )  )  ;", "assertThat ( propertySources . precedenceOf ( PropertySource . named ( SERVLET _ CONFIG _ PROPERTY _ SOURCE _ NAME )  )  ,    lessThan ( propertySources . precedenceOf ( PropertySource . named ( SYSTEM _ PROPERTIES _ PROPERTY _ SOURCE _ NAME )  )  )  )  ;", "MockPropertySource   mockSystemProperties    =    new   MockPropertySource ( StandardEnvironment . SYSTEM _ PROPERTIES _ PROPERTY _ SOURCE _ NAME )  ;", "mockSystemProperties . setProperty (  \" pCommon \"  ,     \" pCommonSysPropsValue \"  )  ;", "mockSystemProperties . setProperty (  \" pSysProps 1  \"  ,     \" pSysProps 1 Value \"  )  ;", "propertySources . replace ( SYSTEM _ PROPERTIES _ PROPERTY _ SOURCE _ NAME ,    mockSystemProperties )  ;", "assertThat ( environment . getProperty (  \" pCommon \"  )  ,    is (  \" pCommonConfigValue \"  )  )  ;", "assertThat ( environment . getProperty (  \" pSysProps 1  \"  )  ,    is (  \" pSysProps 1 Value \"  )  )  ;", "}", "METHOD_END"], "methodName": ["registerServletParamPropertySources_AbstractRefreshableWebApplicationContext"], "fileName": "org.springframework.core.env.EnvironmentSystemIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   servletContext    =    new   MockServletContext (  )  ;", "servletContext . addInitParameter (  \" pCommon \"  ,     \" pCommonContextValue \"  )  ;", "servletContext . addInitParameter (  \" pContext 1  \"  ,     \" pContext 1 Value \"  )  ;", "GenericWebApplicationContext   ctx    =    new   GenericWebApplicationContext (  )  ;", "ctx . setServletContext ( servletContext )  ;", "ctx . refresh (  )  ;", "Configurable   environment    =    ctx . get (  )  ;", "assertThat ( environment ,    instanceOf ( StandardServlet . class )  )  ;", "MutablePropertySources   propertySources    =    environment . getPropertySources (  )  ;", "assertThat ( propertySources . contains ( SERVLET _ CONTEXT _ PROPERTY _ SOURCE _ NAME )  ,    is ( true )  )  ;", "assertThat ( environment . getProperty (  \" pCommon \"  )  ,    is (  \" pCommonContextValue \"  )  )  ;", "assertThat ( environment . getProperty (  \" pContext 1  \"  )  ,    is (  \" pContext 1 Value \"  )  )  ;", "assertThat ( propertySources . precedenceOf ( PropertySource . named ( SERVLET _ CONTEXT _ PROPERTY _ SOURCE _ NAME )  )  ,    lessThan ( propertySources . precedenceOf ( PropertySource . named ( SYSTEM _ PROPERTIES _ PROPERTY _ SOURCE _ NAME )  )  )  )  ;", "MockPropertySource   mockSystemProperties    =    new   MockPropertySource ( Standard . SYSTEM _ PROPERTIES _ PROPERTY _ SOURCE _ NAME )  ;", "mockSystemProperties . setProperty (  \" pCommon \"  ,     \" pCommonSysPropsValue \"  )  ;", "mockSystemProperties . setProperty (  \" pSysProps 1  \"  ,     \" pSysProps 1 Value \"  )  ;", "propertySources . replace ( SYSTEM _ PROPERTIES _ PROPERTY _ SOURCE _ NAME ,    mockSystemProperties )  ;", "assertThat ( environment . getProperty (  \" pCommon \"  )  ,    is (  \" pCommonContextValue \"  )  )  ;", "assertThat ( environment . getProperty (  \" pSysProps 1  \"  )  ,    is (  \" pSysProps 1 Value \"  )  )  ;", "}", "METHOD_END"], "methodName": ["registerServletParamPropertySources_GenericWebApplicationContext"], "fileName": "org.springframework.core.env.EnvironmentSystemIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "MockServletContext   servletContext    =    new   MockServletContext (  )  ;", "servletContext . addInitParameter (  \" pCommon \"  ,     \" pCommonContextValue \"  )  ;", "servletContext . addInitParameter (  \" pContext 1  \"  ,     \" pContext 1 Value \"  )  ;", "MockServletConfig   servletConfig    =    new   MockServletConfig ( servletContext )  ;", "servletConfig . addInitParameter (  \" pCommon \"  ,     \" pCommonConfigValue \"  )  ;", "servletConfig . addInitParameter (  \" pConfig 1  \"  ,     \" pConfig 1 Value \"  )  ;", "StaticWebApplicationContext   ctx    =    new   StaticWebApplicationContext (  )  ;", "ctx . setServletConfig ( servletConfig )  ;", "ctx . refresh (  )  ;", "Configurable   environment    =    ctx . get (  )  ;", "MutablePropertySources   propertySources    =    environment . getPropertySources (  )  ;", "assertThat ( propertySources . contains ( SERVLET _ CONTEXT _ PROPERTY _ SOURCE _ NAME )  ,    is ( true )  )  ;", "assertThat ( propertySources . contains ( SERVLET _ CONFIG _ PROPERTY _ SOURCE _ NAME )  ,    is ( true )  )  ;", "assertThat ( environment . getProperty (  \" pCommon \"  )  ,    is (  \" pCommonConfigValue \"  )  )  ;", "assertThat ( propertySources . precedenceOf ( PropertySource . named ( SERVLET _ CONFIG _ PROPERTY _ SOURCE _ NAME )  )  ,    lessThan ( propertySources . precedenceOf ( PropertySource . named ( SERVLET _ CONTEXT _ PROPERTY _ SOURCE _ NAME )  )  )  )  ;", "assertThat ( environment . getProperty (  \" pContext 1  \"  )  ,    is (  \" pContext 1 Value \"  )  )  ;", "assertThat ( environment . getProperty (  \" pConfig 1  \"  )  ,    is (  \" pConfig 1 Value \"  )  )  ;", "assertThat ( propertySources . precedenceOf ( PropertySource . named ( SERVLET _ CONFIG _ PROPERTY _ SOURCE _ NAME )  )  ,    lessThan ( propertySources . precedenceOf ( PropertySource . named ( SYSTEM _ PROPERTIES _ PROPERTY _ SOURCE _ NAME )  )  )  )  ;", "MockPropertySource   mockSystemProperties    =    new   MockPropertySource ( Standard . SYSTEM _ PROPERTIES _ PROPERTY _ SOURCE _ NAME )  ;", "mockSystemProperties . setProperty (  \" pCommon \"  ,     \" pCommonSysPropsValue \"  )  ;", "mockSystemProperties . setProperty (  \" pSysProps 1  \"  ,     \" pSysProps 1 Value \"  )  ;", "propertySources . replace ( SYSTEM _ PROPERTIES _ PROPERTY _ SOURCE _ NAME ,    mockSystemProperties )  ;", "assertThat ( environment . getProperty (  \" pCommon \"  )  ,    is (  \" pCommonConfigValue \"  )  )  ;", "assertThat ( environment . getProperty (  \" pSysProps 1  \"  )  ,    is (  \" pSysProps 1 Value \"  )  )  ;", "}", "METHOD_END"], "methodName": ["registerServletParamPropertySources_StaticWebApplicationContext"], "fileName": "org.springframework.core.env.EnvironmentSystemIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "ResourceAdapterApplicationContext   ctx    =    new   ResourceAdapterApplicationContext ( new   SimpleBootstrapContext ( new   SimpleTaskWorkManager (  )  )  )  ;", "assertHasStandardEnvironment ( ctx )  ;", "registerEnvironmentBeanDefinition ( ctx )  ;", "ctx . setEnvironment ( prodEnv )  ;", "ctx . refresh (  )  ;", "assertHasEnvironment ( ctx ,    prodEnv )  ;", "assertEnvironmentBeanRegistered ( ctx )  ;", "assertEnvironmentAwareInvoked ( ctx ,    prodEnv )  ;", "}", "METHOD_END"], "methodName": ["resourceAdapterApplicationContext"], "fileName": "org.springframework.core.env.EnvironmentSystemIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "prodEnv . setActiveProfiles ( EnvironmentSystemIntegrationTests . Constants . PROD _ ENV _ NAME )  ;", "devEnv . setActiveProfiles ( EnvironmentSystemIntegrationTests . Constants . DEV _ ENV _ NAME )  ;", "prodWebEnv . setActiveProfiles ( EnvironmentSystemIntegrationTests . Constants . PROD _ ENV _ NAME )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.core.env.EnvironmentSystemIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "StaticApplicationContext   ctx    =    new   StaticApplicationContext (  )  ;", "assertHasStandard ( ctx )  ;", "registerBeanDefinition ( ctx )  ;", "ctx . set ( prodEnv )  ;", "ctx . refresh (  )  ;", "assertHas ( ctx ,    prodEnv )  ;", "assertBeanRegistered ( ctx )  ;", "assertAwareInvoked ( ctx ,    prodEnv )  ;", "}", "METHOD_END"], "methodName": ["staticApplicationContext"], "fileName": "org.springframework.core.env.EnvironmentSystemIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "StaticWebApplicationContext   ctx    =    new   StaticWebApplicationContext (  )  ;", "assertHasStandardServlet ( ctx )  ;", "registerBeanDefinition ( ctx )  ;", "ctx . set ( prodWebEnv )  ;", "ctx . refresh (  )  ;", "assertHas ( ctx ,    prodWebEnv )  ;", "assertBeanRegistered ( ctx )  ;", "assertAwareInvoked ( ctx ,    prodWebEnv )  ;", "}", "METHOD_END"], "methodName": ["staticWebApplicationContext"], "fileName": "org.springframework.core.env.EnvironmentSystemIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "GenericWebApplicationContext   ctx    =    new   GenericWebApplicationContext ( newBeanFactoryWithEnvironmentAwareBean (  )  )  ;", "assertHasStandardServletEnvironment ( ctx )  ;", "ctx . setEnvironment ( prodWebEnv )  ;", "ctx . refresh (  )  ;", "assertHasEnvironment ( ctx ,    prodWebEnv )  ;", "assertEnvironmentBeanRegistered ( ctx )  ;", "assertEnvironmentAwareInvoked ( ctx ,    prodWebEnv )  ;", "}", "METHOD_END"], "methodName": ["webApplicationContext"], "fileName": "org.springframework.core.env.EnvironmentSystemIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "GenericApplicationContext   ctx    =    new   GenericApplicationContext (  )  ;", "ctx . setEnvironment ( prodEnv )  ;", "new   XmlBeanDefinitionReader ( ctx )  . loadBeanDefinitions (  . Constants . XML _ PATH )  ;", "ctx . refresh (  )  ;", "assertThat ( ctx . containsBean (  . Constants . DEV _ BEAN _ NAME )  ,    is ( false )  )  ;", "assertThat ( ctx . containsBean (  . Constants . PROD _ BEAN _ NAME )  ,    is ( true )  )  ;", "}", "METHOD_END"], "methodName": ["xmlBeanDefinitionReader_inheritsEnvironmentFromEnvironmentCapableBDR"], "fileName": "org.springframework.core.env.EnvironmentSystemIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "AbstractRefreshableWebApplicationContext   ctx    =    new   XmlWebApplicationContext (  )  ;", "ctx . setConfigLocation (  (  \" classpath :  \"     +     (  . Constants . XML _ PATH )  )  )  ;", "ctx . setEnvironment ( prodWebEnv )  ;", "ctx . refresh (  )  ;", "assertHasEnvironment ( ctx ,    prodWebEnv )  ;", "assertEnvironmentBeanRegistered ( ctx )  ;", "assertEnvironmentAwareInvoked ( ctx ,    prodWebEnv )  ;", "assertThat ( ctx . containsBean (  . Constants . DEV _ BEAN _ NAME )  ,    is ( false )  )  ;", "assertThat ( ctx . containsBean (  . Constants . PROD _ BEAN _ NAME )  ,    is ( true )  )  ;", "}", "METHOD_END"], "methodName": ["xmlWebApplicationContext"], "fileName": "org.springframework.core.env.EnvironmentSystemIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "GenericApplicationContext   ctx    =    new   GenericApplicationContext (  )  ;", "ctx . registerBeanDefinition (  \" ppc \"  ,    rootBeanDefinition (  . class )  . addPropertyValue (  \" searchSystemEnvironment \"  ,    false )  . getBeanDefinition (  )  )  ;", "ctx . refresh (  )  ;", "ctx . getBean (  \" ppc \"  )  ;", "}", "METHOD_END"], "methodName": ["test"], "fileName": "org.springframework.core.env.PropertyPlaceholderConfigurerEnvironmentIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "return   new   Object (  )  ;", "}", "METHOD_END"], "methodName": ["devBean"], "fileName": "org.springframework.core.env.scan1.DevConfig"}, {"methodBody": ["METHOD_START", "{", "return   new   Object (  )  ;", "}", "METHOD_END"], "methodName": ["prodBean"], "fileName": "org.springframework.core.env.scan1.ProdConfig"}, {"methodBody": ["METHOD_START", "{", "if    ( conversionService . canConvert ( sourceType ,    targetType )  )     {", "return   true ;", "}", "if    (  (  !  ( String . class . isAssignableFrom ( sourceType )  )  )     &  &     (  !  ( String . class . isAssignableFrom ( targetType )  )  )  )     {", "return   false ;", "}", "if    (  !  ( String . class . isAssignableFrom ( sourceType )  )  )     {", "return    (  ( delegate . findCustomEditor ( sourceType ,    null )  )     !  =    null )     |  |     (  ( delegate . getDefaultEditor ( sourceType )  )     !  =    null )  ;", "}", "return    (  ( delegate . findCustomEditor ( targetType ,    null )  )     !  =    null )     |  |     (  ( delegate . getDefaultEditor ( targetType )  )     !  =    null )  ;", "}", "METHOD_END"], "methodName": ["canConvert"], "fileName": "org.springframework.expression.spel.support.BeanFactoryTypeConverter"}, {"methodBody": ["METHOD_START", "{", "this . conversionService    =    conversionService ;", "}", "METHOD_END"], "methodName": ["setConversionService"], "fileName": "org.springframework.expression.spel.support.BeanFactoryTypeConverter"}, {"methodBody": ["METHOD_START", "{", "Spr 7  5  3  8 Tests . AlwaysTrueReleaseStrategy   target    =    new   Spr 7  5  3  8 Tests . AlwaysTrueReleaseStrategy (  )  ;", "BeanFactoryTypeConverter   converter    =    new   BeanFactoryTypeConverter (  )  ;", "StandardEvaluationContext   context    =    new   StandardEvaluationContext (  )  ;", "context . setTypeConverter ( converter )  ;", "List < Spr 7  5  3  8 Tests . Foo >    arguments    =    new   ArrayList <  >  (  )  ;", "List < TypeDescriptor >    paramDescriptors    =    new   ArrayList <  >  (  )  ;", "Method   method    =    Spr 7  5  3  8 Tests . AlwaysTrueReleaseStrategy . class . getMethod (  \" checkCompleteness \"  ,    List . class )  ;", "paramDescriptors . add ( new   TypeDescriptor ( new   MethodParameter ( method ,     0  )  )  )  ;", "List < TypeDescriptor >    argumentTypes    =    new   ArrayList <  >  (  )  ;", "argumentTypes . add ( TypeDescriptor . forObject ( arguments )  )  ;", "ReflectiveMethodResolver   resolver    =    new   ReflectiveMethodResolver (  )  ;", "MethodExecutor   executor    =    resolver . resolve ( context ,    target ,     \" checkCompleteness \"  ,    argumentTypes )  ;", "Object   result    =    executor . execute ( context ,    target ,    arguments )  ;", "System . out . println (  (  \" Result :     \"     +    result )  )  ;", "}", "METHOD_END"], "methodName": ["repro"], "fileName": "org.springframework.expression.spel.support.Spr7538Tests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "ctx . register (  . Config . class ,     . JdkProxyTxConfig . class ,     . RepoConfigA . class )  ;", "try    {", "ctx . refresh (  )  ;", "fail (  \" Should   have   thrown   BeanCreationException \"  )  ;", "}    catch    ( BeanCreationException   ex )     {", "assertTrue (  (  ( ex . getRootCause (  )  )    instanceof   IllegalStateException )  )  ;", "}", "}", "METHOD_END"], "methodName": ["failsWhenJdkProxyAndScheduledMethodNotPresentOnInterface"], "fileName": "org.springframework.scheduling.annotation.ScheduledAndTransactionalAnnotationIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "Assume . group ( PERFORMANCE )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.scheduling.annotation.ScheduledAndTransactionalAnnotationIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "ctx . register (  . Config . class ,     . JdkProxyTxConfig . class ,     . RepoConfigB . class )  ;", "ctx . refresh (  )  ;", "Thread . sleep (  1  0  0  )  ;", ". MyRepositoryWithScheduledMethod   repository    =    ctx . getBean (  . MyRepositoryWithScheduledMethod . class )  ;", "CallCountingTransactionManager   txManager    =    ctx . getBean ( CallCountingTransactionManager . class )  ;", "assertThat (  \" repository   is   not   a   proxy \"  ,    AopUtils . isJdkDynamicProxy ( repository )  ,    is ( true )  )  ;", "assertThat (  \"  @ Scheduled   method   never   called \"  ,    repository . getInvocationCount (  )  ,    greaterThan (  0  )  )  ;", "assertThat (  \" no   transactions   were   committed \"  ,    txManager . commits ,    greaterThan (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["succeedsWhenJdkProxyAndScheduledMethodIsPresentOnInterface"], "fileName": "org.springframework.scheduling.annotation.ScheduledAndTransactionalAnnotationIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "ctx . register (  . Config . class ,     . SubclassProxyTxConfig . class ,     . RepoConfigA . class )  ;", "ctx . refresh (  )  ;", "Thread . sleep (  1  0  0  )  ;", ". MyRepository   repository    =    ctx . getBean (  . MyRepository . class )  ;", "CallCountingTransactionManager   txManager    =    ctx . getBean ( CallCountingTransactionManager . class )  ;", "assertThat (  \" repository   is   not   a   proxy \"  ,    AopUtils . isCglibProxy ( repository )  ,    equalTo ( true )  )  ;", "assertThat (  \"  @ Scheduled   method   never   called \"  ,    repository . getInvocationCount (  )  ,    greaterThan (  0  )  )  ;", "assertThat (  \" no   transactions   were   committed \"  ,    txManager . commits ,    greaterThan (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["succeedsWhenSubclassProxyAndScheduledMethodNotPresentOnInterface"], "fileName": "org.springframework.scheduling.annotation.ScheduledAndTransactionalAnnotationIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "ctx . register (  . AspectConfig . class ,     . MyRepositoryWithScheduledMethodImpl . class )  ;", "ctx . refresh (  )  ;", "Thread . sleep (  1  0  0  )  ;", ". MyRepositoryWithScheduledMethod   repository    =    ctx . getBean (  . MyRepositoryWithScheduledMethod . class )  ;", "assertThat (  \" repository   is   not   a   proxy \"  ,    AopUtils . isCglibProxy ( repository )  ,    is ( true )  )  ;", "assertThat (  \"  @ Scheduled   method   never   called \"  ,    repository . getInvocationCount (  )  ,    greaterThan (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["withAspectConfig"], "fileName": "org.springframework.scheduling.annotation.ScheduledAndTransactionalAnnotationIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "ctx . register (  . EnableTxAndCachingConfig . class )  ;", "ctx . refresh (  )  ;", "}", "METHOD_END"], "methodName": ["apcEscalation"], "fileName": "org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "EnableTransactionManagementIntegrationTests . FooRepository   repo    =    ctx . getBean ( EnableTransactionManagementIntegrationTests . FooRepository . class )  ;", "boolean   isTxProxy    =    false ;", "if    ( AopUtils . isAopProxy ( repo )  )     {", "for    ( Advisor   advisor    :     (  ( Advised )     ( repo )  )  . getAdvisors (  )  )     {", "if    ( advisor   instanceof   BeanFactoryTransactionAttributeSourceAdvisor )     {", "isTxProxy    =    true ;", "break ;", "}", "}", "}", "assertTrue (  \" FooRepository   is   not   a   TX   proxy \"  ,    isTxProxy )  ;", "repo . findAll (  )  ;", "}", "METHOD_END"], "methodName": ["assertTxProxying"], "fileName": "org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "ctx . register (  . ExplicitTxManagerConfig . class )  ;", "ctx . refresh (  )  ;", ". FooRepository   fooRepository    =    ctx . getBean (  . FooRepository . class )  ;", "fooRepository . findAll (  )  ;", "CallCountingTransactionManager   txManager 1     =    ctx . getBean (  \" txManager 1  \"  ,    CallCountingTransactionManager . class )  ;", "assertThat ( txManager 1  . begun ,    equalTo (  1  )  )  ;", "assertThat ( txManager 1  . commits ,    equalTo (  1  )  )  ;", "assertThat ( txManager 1  . rollbacks ,    equalTo (  0  )  )  ;", "CallCountingTransactionManager   txManager 2     =    ctx . getBean (  \" txManager 2  \"  ,    CallCountingTransactionManager . class )  ;", "assertThat ( txManager 2  . begun ,    equalTo (  0  )  )  ;", "assertThat ( txManager 2  . commits ,    equalTo (  0  )  )  ;", "assertThat ( txManager 2  . rollbacks ,    equalTo (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["explicitTxManager"], "fileName": "org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "ctx . register (  . ImplicitTxManagerConfig . class )  ;", "ctx . refresh (  )  ;", ". FooRepository   fooRepository    =    ctx . getBean (  . FooRepository . class )  ;", "fooRepository . findAll (  )  ;", "CallCountingTransactionManager   txManager    =    ctx . getBean ( CallCountingTransactionManager . class )  ;", "assertThat ( txManager . begun ,    equalTo (  1  )  )  ;", "assertThat ( txManager . commits ,    equalTo (  1  )  )  ;", "assertThat ( txManager . rollbacks ,    equalTo (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["implicitTxManager"], "fileName": "org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "ctx . register (  . Config . class ,     . ProxyTargetClassTxConfig . class )  ;", "ctx . refresh (  )  ;", "assertTxProxying ( ctx )  ;", "assertThat ( AopUtils . isCglibProxy ( ctx . getBean (  . FooRepository . class )  )  ,    is ( true )  )  ;", "}", "METHOD_END"], "methodName": ["repositoryIsClassBasedTxProxy"], "fileName": "org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "ctx . register (  . Config . class )  ;", "ctx . refresh (  )  ;", "try    {", "assertTxProxying ( ctx )  ;", "fail (  \" expected   exception \"  )  ;", "}    catch    ( AssertionError   ex )     {", "assertThat ( ex . getMessage (  )  ,    equalTo (  \" FooRepository   is   not   a   TX   proxy \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["repositoryIsNotTxProxy"], "fileName": "org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "ctx . register (  . Config . class ,     . CustomTxManagerNameConfig . class )  ;", "ctx . refresh (  )  ;", "assertTxProxying ( ctx )  ;", "}", "METHOD_END"], "methodName": ["repositoryIsTxProxy_withCustomTxManagerName"], "fileName": "org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "ctx . register (  . Config . class ,     . DefaultTxManagerNameConfig . class )  ;", "ctx . refresh (  )  ;", "assertTxProxying ( ctx )  ;", "}", "METHOD_END"], "methodName": ["repositoryIsTxProxy_withDefaultTxManagerName"], "fileName": "org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "ctx . register (  . Config . class ,     . NonConventionalTxManagerNameConfig . class )  ;", "ctx . refresh (  )  ;", "assertTxProxying ( ctx )  ;", "}", "METHOD_END"], "methodName": ["repositoryIsTxProxy_withNonConventionalTxManagerName_fallsBackToByTypeLookup"], "fileName": "org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "ctx . register (  . Config . class ,     . AspectJTxConfig . class )  ;", "try    {", "ctx . refresh (  )  ;", "}    catch    ( Exception   ex )     {", "assertTrue ( ex . getMessage (  )  . contains (  \" AspectJTransactionManagementConfiguration \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["repositoryUsesAspectJAdviceMode"], "fileName": "org.springframework.transaction.annotation.EnableTransactionManagementIntegrationTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "ctx . register ( PTCFalse . class ,    AnnotatedServiceWithoutInterface . class )  ;", "ctx . refresh (  )  ;", "AnnotatedServiceWithoutInterface   s    =    ctx . getBean ( AnnotatedServiceWithoutInterface . class )  ;", "assertTrue (  \" expected   a   subclass   proxy \"  ,    AopUtils . isCglibProxy ( s )  )  ;", "assertThat ( s ,    instanceOf ( AnnotatedServiceWithoutInterface . class )  )  ;", "}", "METHOD_END"], "methodName": ["annotatedServiceWithoutInterface_PTC_false"], "fileName": "org.springframework.transaction.annotation.ProxyAnnotationDiscoveryTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "ctx . register ( PTCTrue . class ,    AnnotatedServiceWithoutInterface . class )  ;", "ctx . refresh (  )  ;", "AnnotatedServiceWithoutInterface   s    =    ctx . getBean ( AnnotatedServiceWithoutInterface . class )  ;", "assertTrue (  \" expected   a   subclass   proxy \"  ,    AopUtils . isCglibProxy ( s )  )  ;", "assertThat ( s ,    instanceOf ( AnnotatedServiceWithoutInterface . class )  )  ;", "}", "METHOD_END"], "methodName": ["annotatedServiceWithoutInterface_PTC_true"], "fileName": "org.springframework.transaction.annotation.ProxyAnnotationDiscoveryTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "ctx . register ( PTCFalse . class ,    NonAnnotatedServiceImpl . class )  ;", "ctx . refresh (  )  ;", "AnnotatedService   s    =    ctx . getBean ( AnnotatedService . class )  ;", "assertTrue (  \" expected   a   jdk   proxy \"  ,    AopUtils . isJdkDynamicProxy ( s )  )  ;", "assertThat ( s ,    not ( instanceOf ( NonAnnotatedServiceImpl . class )  )  )  ;", "}", "METHOD_END"], "methodName": ["annotatedService_PTC_false"], "fileName": "org.springframework.transaction.annotation.ProxyAnnotationDiscoveryTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "ctx . register ( PTCTrue . class ,    NonAnnotatedServiceImpl . class )  ;", "ctx . refresh (  )  ;", "AnnotatedService   s    =    ctx . getBean ( AnnotatedService . class )  ;", "assertTrue (  \" expected   a   subclass   proxy \"  ,    AopUtils . isCglibProxy ( s )  )  ;", "assertThat ( s ,    instanceOf ( NonAnnotatedServiceImpl . class )  )  ;", "}", "METHOD_END"], "methodName": ["annotatedService_PTC_true"], "fileName": "org.springframework.transaction.annotation.ProxyAnnotationDiscoveryTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "ctx . register ( PTCFalse . class ,    AnnotatedServiceImpl . class )  ;", "ctx . refresh (  )  ;", "NonAnnotatedService   s    =    ctx . getBean ( NonAnnotatedService . class )  ;", "assertTrue (  \" expected   a   jdk   proxy \"  ,    AopUtils . isJdkDynamicProxy ( s )  )  ;", "assertThat ( s ,    not ( instanceOf ( AnnotatedServiceImpl . class )  )  )  ;", "}", "METHOD_END"], "methodName": ["nonAnnotatedService_PTC_false"], "fileName": "org.springframework.transaction.annotation.ProxyAnnotationDiscoveryTests"}, {"methodBody": ["METHOD_START", "{", "AnnotationConfigApplicationContext   ctx    =    new   AnnotationConfigApplicationContext (  )  ;", "ctx . register ( PTCTrue . class ,    AnnotatedServiceImpl . class )  ;", "ctx . refresh (  )  ;", "NonAnnotatedService   s    =    ctx . getBean ( NonAnnotatedService . class )  ;", "assertTrue (  \" expected   a   subclass   proxy \"  ,    AopUtils . isCglibProxy ( s )  )  ;", "assertThat ( s ,    instanceOf ( AnnotatedServiceImpl . class )  )  ;", "}", "METHOD_END"], "methodName": ["nonAnnotatedService_PTC_true"], "fileName": "org.springframework.transaction.annotation.ProxyAnnotationDiscoveryTests"}]