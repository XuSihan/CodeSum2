[{"methodBody": ["METHOD_START", "{", "return   CompareMatcher . isSimilarTo ( content )  . ignoreWhitespace (  )  ;", "}", "METHOD_END"], "methodName": ["isSimilarTo"], "fileName": "org.springframework.oxm.AbstractMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "DocumentBuilderFactory   documentBuilderFactory    =    DocumentBuilderFactory . newInstance (  )  ;", "documentBuilderFactory . setNamespaceAware ( true )  ;", "DocumentBuilder   builder    =    documentBuilderFactory . newDocumentBuilder (  )  ;", "Document   result    =    builder . newDocument (  )  ;", "DOMResult   domResult    =    new   DOMResult ( result )  ;", "marshaller . marshal ( flights ,    domResult )  ;", "Document   expected    =    builder . newDocument (  )  ;", "Element   flightsElement    =    expected . createElementNS (  \" http :  /  / samples . springframework . org / flight \"  ,     \" tns : flights \"  )  ;", "Attr   namespace    =    expected . createAttributeNS (  \" http :  /  / www . w 3  . org /  2  0  0  0  / xmlns /  \"  ,     \" xmlns : tns \"  )  ;", "namespace . setNodeValue (  \" http :  /  / samples . springframework . org / flight \"  )  ;", "flightsElement . setAttributeNode ( namespace )  ;", "expected . appendChild ( flightsElement )  ;", "Element   flightElement    =    expected . createElementNS (  \" http :  /  / samples . springframework . org / flight \"  ,     \" tns : flight \"  )  ;", "flightsElement . appendChild ( flightElement )  ;", "Element   numberElement    =    expected . createElementNS (  \" http :  /  / samples . springframework . org / flight \"  ,     \" tns : number \"  )  ;", "flightElement . appendChild ( numberElement )  ;", "Text   text    =    expected . createTextNode (  \"  4  2  \"  )  ;", "numberElement . appendChild ( text )  ;", "assertThat (  \" Marshaller   writes   invalid   DOMResult \"  ,    result ,     . isSimilarTo ( expected )  )  ;", "}", "METHOD_END"], "methodName": ["marshalDOMResult"], "fileName": "org.springframework.oxm.AbstractMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "DocumentBuilderFactory   documentBuilderFactory    =    DocumentBuilderFactory . newInstance (  )  ;", "documentBuilderFactory . setNamespaceAware ( true )  ;", "DocumentBuilder   builder    =    documentBuilderFactory . newDocumentBuilder (  )  ;", "DOMResult   domResult    =    new   DOMResult (  )  ;", "marshaller . marshal ( flights ,    domResult )  ;", ". assertTrue (  \" DOMResult   does   not   contain   a   Document \"  ,     (  ( domResult . getNode (  )  )    instanceof   Document )  )  ;", "Document   result    =     (  ( Document )     ( domResult . getNode (  )  )  )  ;", "Document   expected    =    builder . newDocument (  )  ;", "Element   flightsElement    =    expected . createElementNS (  \" http :  /  / samples . springframework . org / flight \"  ,     \" tns : flights \"  )  ;", "Attr   namespace    =    expected . createAttributeNS (  \" http :  /  / www . w 3  . org /  2  0  0  0  / xmlns /  \"  ,     \" xmlns : tns \"  )  ;", "namespace . setNodeValue (  \" http :  /  / samples . springframework . org / flight \"  )  ;", "flightsElement . setAttributeNode ( namespace )  ;", "expected . appendChild ( flightsElement )  ;", "Element   flightElement    =    expected . createElementNS (  \" http :  /  / samples . springframework . org / flight \"  ,     \" tns : flight \"  )  ;", "flightsElement . appendChild ( flightElement )  ;", "Element   numberElement    =    expected . createElementNS (  \" http :  /  / samples . springframework . org / flight \"  ,     \" tns : number \"  )  ;", "flightElement . appendChild ( numberElement )  ;", "Text   text    =    expected . createTextNode (  \"  4  2  \"  )  ;", "numberElement . appendChild ( text )  ;", "assertThat (  \" Marshaller   writes   invalid   DOMResult \"  ,    result ,     . isSimilarTo ( expected )  )  ;", "}", "METHOD_END"], "methodName": ["marshalEmptyDOMResult"], "fileName": "org.springframework.oxm.AbstractMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "XMLOutputFactory   outputFactory    =    XMLOutputFactory . newInstance (  )  ;", "StringWriter   writer    =    new   StringWriter (  )  ;", "XMLEventWriter   eventWriter    =    outputFactory . createXMLEventWriter ( writer )  ;", "StAXResult   result    =    new   StAXResult ( eventWriter )  ;", "marshaller . marshal ( flights ,    result )  ;", "assertThat (  \" Marshaller   writes   invalid   StreamResult \"  ,    writer . toString (  )  ,     . isSimilarTo (  . EXPECTED _ STRING )  )  ;", "}", "METHOD_END"], "methodName": ["marshalJaxp14StaxResultEventWriter"], "fileName": "org.springframework.oxm.AbstractMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "XMLOutputFactory   outputFactory    =    XMLOutputFactory . newInstance (  )  ;", "StringWriter   writer    =    new   StringWriter (  )  ;", "XMLStreamWriter   streamWriter    =    outputFactory . createXMLStreamWriter ( writer )  ;", "StAXResult   result    =    new   StAXResult ( streamWriter )  ;", "marshaller . marshal ( flights ,    result )  ;", "assertThat (  \" Marshaller   writes   invalid   StreamResult \"  ,    writer . toString (  )  ,     . isSimilarTo (  . EXPECTED _ STRING )  )  ;", "}", "METHOD_END"], "methodName": ["marshalJaxp14StaxResultStreamWriter"], "fileName": "org.springframework.oxm.AbstractMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "XMLOutputFactory   outputFactory    =    XMLOutputFactory . newInstance (  )  ;", "StringWriter   writer    =    new   StringWriter (  )  ;", "XMLEventWriter   eventWriter    =    outputFactory . createXMLEventWriter ( writer )  ;", "Result   result    =    StaxUtils . createStaxResult ( eventWriter )  ;", "marshaller . marshal ( flights ,    result )  ;", "assertThat (  \" Marshaller   writes   invalid   StreamResult \"  ,    writer . toString (  )  ,     . isSimilarTo (  . EXPECTED _ STRING )  )  ;", "}", "METHOD_END"], "methodName": ["marshalStaxResultEventWriter"], "fileName": "org.springframework.oxm.AbstractMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "XMLOutputFactory   outputFactory    =    XMLOutputFactory . newInstance (  )  ;", "StringWriter   writer    =    new   StringWriter (  )  ;", "XMLStreamWriter   streamWriter    =    outputFactory . createXMLStreamWriter ( writer )  ;", "Result   result    =    StaxUtils . createStaxResult ( streamWriter )  ;", "marshaller . marshal ( flights ,    result )  ;", "assertThat (  \" Marshaller   writes   invalid   StreamResult \"  ,    writer . toString (  )  ,     . isSimilarTo (  . EXPECTED _ STRING )  )  ;", "}", "METHOD_END"], "methodName": ["marshalStaxResultStreamWriter"], "fileName": "org.springframework.oxm.AbstractMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "ByteArrayOutputStream   os    =    new   ByteArrayOutputStream (  )  ;", "StreamResult   result    =    new   StreamResult ( os )  ;", "marshaller . marshal ( flights ,    result )  ;", "assertThat (  \" Marshaller   writes   invalid   StreamResult \"  ,    new   String ( os . toByteArray (  )  ,     \" UTF -  8  \"  )  ,     . isSimilarTo (  . EXPECTED _ STRING )  )  ;", "}", "METHOD_END"], "methodName": ["marshalStreamResultOutputStream"], "fileName": "org.springframework.oxm.AbstractMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "StringWriter   writer    =    new   StringWriter (  )  ;", "StreamResult   result    =    new   StreamResult ( writer )  ;", "marshaller . marshal ( flights ,    result )  ;", "assertThat (  \" Marshaller   writes   invalid   StreamResult \"  ,    writer . toString (  )  ,     . isSimilarTo (  . EXPECTED _ STRING )  )  ;", "}", "METHOD_END"], "methodName": ["marshalStreamResultWriter"], "fileName": "org.springframework.oxm.AbstractMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "marshaller    =    createMarshaller (  )  ;", "flights    =    createFlights (  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.oxm.AbstractMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "unmarshaller    =    createUnmarshaller (  )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "org.springframework.oxm.AbstractUnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "DocumentBuilder   builder    =    DocumentBuilderFactory . newInstance (  )  . newDocumentBuilder (  )  ;", "Document   document    =    builder . newDocument (  )  ;", "Element   flightsElement    =    document . createElementNS (  \" http :  /  / samplesrg / flight \"  ,     \" tns : flights \"  )  ;", "document . appendChild ( flightsElement )  ;", "Element   flightElement    =    document . createElementNS (  \" http :  /  / samplesrg / flight \"  ,     \" tns : flight \"  )  ;", "flightsElement . appendChild ( flightElement )  ;", "Element   numberElement    =    document . createElementNS (  \" http :  /  / samplesrg / flight \"  ,     \" tns : number \"  )  ;", "flightElement . appendChild ( numberElement )  ;", "Text   text    =    document . createTextNode (  \"  4  2  \"  )  ;", "numberElement . appendChild ( text )  ;", "DOMSource   source    =    new   DOMSource ( document )  ;", "Object   flights    =    unmarshaller . unmarshal ( source )  ;", "testFlights ( flights )  ;", "}", "METHOD_END"], "methodName": ["unmarshalDomSource"], "fileName": "org.springframework.oxm.AbstractUnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "XMLInputFactory   inputFactory    =    XMLInputFactory . newInstance (  )  ;", "XMLEventReader   eventReader    =    inputFactory . createXMLEventReader ( new   StringReader (  . INPUT _ STRING )  )  ;", "StAXSource   source    =    new   StAXSource ( eventReader )  ;", "Object   flights    =    unmarshaller . unmarshal ( source )  ;", "testFlights ( flights )  ;", "}", "METHOD_END"], "methodName": ["unmarshalJaxp14StaxSourceXmlEventReader"], "fileName": "org.springframework.oxm.AbstractUnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "XMLInputFactory   inputFactory    =    XMLInputFactory . newInstance (  )  ;", "XMLStreamReader   streamReader    =    inputFactory . createXMLStreamReader ( new   StringReader (  . INPUT _ STRING )  )  ;", "StAXSource   source    =    new   StAXSource ( streamReader )  ;", "Object   flights    =    unmarshaller . unmarshal ( source )  ;", "testFlights ( flights )  ;", "}", "METHOD_END"], "methodName": ["unmarshalJaxp14StaxSourceXmlStreamReader"], "fileName": "org.springframework.oxm.AbstractUnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "XMLInputFactory   inputFactory    =    XMLInputFactory . newInstance (  )  ;", "XMLStreamReader   streamReader    =    inputFactory . createXMLStreamReader ( new   StringReader (  . INPUT _ STRING )  )  ;", "streamReader . nextTag (  )  ;", ". assertEquals (  \" Invalid   element \"  ,    new   QName (  \" http :  /  / samples . springframework . org / flight \"  ,     \" flights \"  )  ,    streamReader . getName (  )  )  ;", "streamReader . nextTag (  )  ;", ". assertEquals (  \" Invalid   element \"  ,    new   QName (  \" http :  /  / samples . springframework . org / flight \"  ,     \" flight \"  )  ,    streamReader . getName (  )  )  ;", "Source   source    =    StaxUtils . createStaxSource ( streamReader )  ;", "Object   flight    =    unmarshaller . unmarshal ( source )  ;", "testFlight ( flight )  ;", "}", "METHOD_END"], "methodName": ["unmarshalPartialStaxSourceXmlStreamReader"], "fileName": "org.springframework.oxm.AbstractUnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "XMLReader   reader    =    XMLReaderFactory . createXMLReader (  )  ;", "SAXSource   source    =    new   SAXSource ( reader ,    new   InputSource ( new   StringReader (  . INPUT _ STRING )  )  )  ;", "Object   flights    =    unmarshaller . unmarshal ( source )  ;", "testFlights ( flights )  ;", "}", "METHOD_END"], "methodName": ["unmarshalSAXSource"], "fileName": "org.springframework.oxm.AbstractUnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "XMLInputFactory   inputFactory    =    XMLInputFactory . newInstance (  )  ;", "XMLEventReader   eventReader    =    inputFactory . createXMLEventReader ( new   StringReader (  . INPUT _ STRING )  )  ;", "Source   source    =    StaxUtils . createStaxSource ( eventReader )  ;", "Object   flights    =    unmarshaller . unmarshal ( source )  ;", "testFlights ( flights )  ;", "}", "METHOD_END"], "methodName": ["unmarshalStaxSourceXmlEventReader"], "fileName": "org.springframework.oxm.AbstractUnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "XMLInputFactory   inputFactory    =    XMLInputFactory . newInstance (  )  ;", "XMLStreamReader   streamReader    =    inputFactory . createXMLStreamReader ( new   StringReader (  . INPUT _ STRING )  )  ;", "Source   source    =    StaxUtils . createStaxSource ( streamReader )  ;", "Object   flights    =    unmarshaller . unmarshal ( source )  ;", "testFlights ( flights )  ;", "}", "METHOD_END"], "methodName": ["unmarshalStaxSourceXmlStreamReader"], "fileName": "org.springframework.oxm.AbstractUnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "StreamSource   source    =    new   StreamSource ( new   ByteArrayInputStream ( AbstractUnmarshallerTests . INPUT _ STRING . getBytes (  \" UTF -  8  \"  )  )  )  ;", "Object   flights    =    unmarshaller . unmarshal ( source )  ;", "testFlights ( flights )  ;", "}", "METHOD_END"], "methodName": ["unmarshalStreamSourceInputStream"], "fileName": "org.springframework.oxm.AbstractUnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "StreamSource   source    =    new   StreamSource ( new   StringReader ( AbstractUnmarshallerTests . INPUT _ STRING )  )  ;", "Object   flights    =    unmarshaller . unmarshal ( source )  ;", "testFlights ( flights )  ;", "}", "METHOD_END"], "methodName": ["unmarshalStreamSourceReader"], "fileName": "org.springframework.oxm.AbstractUnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "if    ( ex   instanceof   ValidationException )     {", "return   new   ValidationFailureException (  \" Castor   validation   exception \"  ,    ex )  ;", "} else", "if    ( ex   instanceof   MarshalException )     {", "if    ( marshalling )     {", "return   new   MarshallingFailureException (  \" Castor   marshalling   exception \"  ,    ex )  ;", "} else    {", "return   new   UnmarshallingFailureException (  \" Castor   unmarshalling   exception \"  ,    ex )  ;", "}", "} else    {", "return   new   UncategorizedMappingException (  \" Unknown   Castor   exception \"  ,    ex )  ;", "}", "}", "METHOD_END"], "methodName": ["convertCastorException"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "Assert . state (  (  ( this . xmlContext )     !  =    null )  ,     \" CastorMarshaller   not   initialized \"  )  ;", "Unmarshaller   unmarshaller    =    this . xmlContext . createUnmarshaller (  )  ;", "customizeUnmarshaller ( unmarshaller )  ;", "return   unmarshaller ;", "}", "METHOD_END"], "methodName": ["createUnmarshaller"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "XMLContext   context    =    new   XMLContext (  )  ;", "if    (  !  ( ObjectUtils . isEmpty ( mappingLocations )  )  )     {", "Mapping   mapping    =    new   Mapping (  )  ;", "for    ( Resource   mappingLocation    :    mappingLocations )     {", "mapping . loadMapping ( SaxResourceUtils . createInputSource ( mappingLocation )  )  ;", "}", "context . addMapping ( mapping )  ;", "}", "if    (  !  ( ObjectUtils . isEmpty ( targetClasses )  )  )     {", "context . addClasses ( targetClasses )  ;", "}", "if    (  !  ( ObjectUtils . isEmpty ( targetPackages )  )  )     {", "context . addPackages ( targetPackages )  ;", "}", "if    (  ( thisProperties )     !  =    null )     {", "thisProperties . forEach ( context :  : setProperty )  ;", "}", "return   context ;", "}", "METHOD_END"], "methodName": ["createXMLContext"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "marshaller . setValidation ( this . validating )  ;", "marshaller . setSuppressNamespaces ( this . suppressNamespaces )  ;", "marshaller . setSuppressXSIType ( this . suppressXsiType )  ;", "marshaller . setMarshalAsDocument ( this . marshalAsDocument )  ;", "marshaller . setMarshalExtendedType ( this . marshalExtendedType )  ;", "marshaller . setRootElement ( this . rootElement )  ;", "marshaller . setNoNamespaceSchemaLocation ( this . noNamespaceSchemaLocation )  ;", "marshaller . setSchemaLocation ( this . schemaLocation )  ;", "marshaller . setUseXSITypeAtRoot ( this . useXSITypeAtRoot )  ;", "if    (  ( this . doctypes )     !  =    null )     {", "this . doctypes . forEach ( marshaller :  : setDoctype )  ;", "}", "if    (  ( this . processingInstructions )     !  =    null )     {", "this . processingInstructions . forEach ( marshaller :  : addProcessingInstruction )  ;", "}", "if    (  ( this . namespaceMappings )     !  =    null )     {", "this . namespaceMappings . forEach ( marshaller :  : setNamespaceMapping )  ;", "}", "}", "METHOD_END"], "methodName": ["customizeMarshaller"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "unmarshaller . setValidation ( this . validating )  ;", "unmarshaller . setWhitespacePreserve ( this . whitespacePreserve )  ;", "unmarshaller . setIgnoreExtraAttributes ( this . ignoreExtraAttributes )  ;", "unmarshaller . setIgnoreExtraElements ( this . ignoreExtraElements )  ;", "unmarshaller . setObject ( this . rootObject )  ;", "unmarshaller . setReuseObjects ( this . reuseObjects )  ;", "unmarshaller . setClearCollections ( this . clearCollections )  ;", "if    (  ( this . namespaceToPackageMapping )     !  =    null )     {", "this . namespaceToPackageMapping . forEach ( unmarshaller :  : addNamespaceToPackageMapping )  ;", "}", "if    (  ( this . entityResolver )     !  =    null )     {", "unmarshaller . setEntityResolver ( this . entityResolver )  ;", "}", "if    (  ( this . classDescriptorResolver )     !  =    null )     {", "unmarshaller . setResolver ( this . classDescriptorResolver )  ;", "}", "if    (  ( this . idResolver )     !  =    null )     {", "unmarshaller . setIDResolver ( this . idResolver )  ;", "}", "if    (  ( this . objectFactory )     !  =    null )     {", "unmarshaller . setObjectFactory ( this . objectFactory )  ;", "}", "if    (  ( this . beanClassLoader )     !  =    null )     {", "unmarshaller . setClassLoader ( this . beanClassLoader )  ;", "}", "}", "METHOD_END"], "methodName": ["customizeUnmarshaller"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "try    {", "customize ( marshaller )  ;", "marshaller . marshal ( graph )  ;", "}    catch    ( XMLException   ex )     {", "throw   convertCastorException ( ex ,    true )  ;", "}", "}", "METHOD_END"], "methodName": ["doMarshal"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . castorProperties    =    castorProperties ;", "}", "METHOD_END"], "methodName": ["setCastorProperties"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . classDescriptorResolver    =    classDescriptorResolver ;", "}", "METHOD_END"], "methodName": ["setClassDescriptorResolver"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . clearCollections    =    clearCollections ;", "}", "METHOD_END"], "methodName": ["setClearCollections"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . doctypes    =    doctypes ;", "}", "METHOD_END"], "methodName": ["setDoctypes"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . encoding    =    encoding ;", "}", "METHOD_END"], "methodName": ["setEncoding"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . entityResolver    =    entityResolver ;", "}", "METHOD_END"], "methodName": ["setEntityResolver"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . idResolver    =    idResolver ;", "}", "METHOD_END"], "methodName": ["setIdResolver"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . ignoreExtraAttributes    =    ignoreExtraAttributes ;", "}", "METHOD_END"], "methodName": ["setIgnoreExtraAttributes"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . ignoreExtraElements    =    ignoreExtraElements ;", "}", "METHOD_END"], "methodName": ["setIgnoreExtraElements"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . mappingLocations    =    new   Resource [  ]  {    mappingLocation    }  ;", "}", "METHOD_END"], "methodName": ["setMappingLocation"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . mappingLocations    =    mappingLocations ;", "}", "METHOD_END"], "methodName": ["setMappingLocations"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . marshalAsDocument    =    marshalAsDocument ;", "}", "METHOD_END"], "methodName": ["setMarshalAsDocument"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . marshalExtendedType    =    marshalExtendedType ;", "}", "METHOD_END"], "methodName": ["setMarshalExtendedType"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . namespaceMappings    =    namespaceMappings ;", "}", "METHOD_END"], "methodName": ["setNamespaceMappings"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . namespaceToPackageMapping    =    namespaceToPackageMapping ;", "}", "METHOD_END"], "methodName": ["setNamespaceToPackageMapping"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . noNamespaceSchemaLocation    =    noNamespaceSchemaLocation ;", "}", "METHOD_END"], "methodName": ["setNoNamespaceSchemaLocation"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . objectFactory    =    objectFactory ;", "}", "METHOD_END"], "methodName": ["setObjectFactory"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . processingInstructions    =    processingInstructions ;", "}", "METHOD_END"], "methodName": ["setProcessingInstructions"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . reuseObjects    =    reuseObjects ;", "}", "METHOD_END"], "methodName": ["setReuseObjects"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . rootElement    =    rootElement ;", "}", "METHOD_END"], "methodName": ["setRootElement"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . rootObject    =    root ;", "}", "METHOD_END"], "methodName": ["setRootObject"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . schemaLocation    =    schemaLocation ;", "}", "METHOD_END"], "methodName": ["setSchemaLocation"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . suppressNamespaces    =    suppressNamespaces ;", "}", "METHOD_END"], "methodName": ["setSuppressNamespaces"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . suppressXsiType    =    suppressXsiType ;", "}", "METHOD_END"], "methodName": ["setSuppressXsiType"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . targetClasses    =    new   Class <  ?  >  [  ]  {    targetClass    }  ;", "}", "METHOD_END"], "methodName": ["setTargetClass"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . targetClasses    =    targetClasses ;", "}", "METHOD_END"], "methodName": ["setTargetClasses"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . targetPackages    =    new   String [  ]  {    targetPackage    }  ;", "}", "METHOD_END"], "methodName": ["setTargetPackage"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . targetPackages    =    targetPackages ;", "}", "METHOD_END"], "methodName": ["setTargetPackages"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . useXSITypeAtRoot    =    useXSITypeAtRoot ;", "}", "METHOD_END"], "methodName": ["setUseXSITypeAtRoot"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . validating    =    validating ;", "}", "METHOD_END"], "methodName": ["setValidating"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . whitespacePreserve    =    whitespacePreserve ;", "}", "METHOD_END"], "methodName": ["setWhitespacePreserve"], "fileName": "org.springframework.oxm.castor.CastorMarshaller"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    namespaces    =    new   HashMap <  >  (  )  ;", "namespaces . put (  \" tns \"  ,     \" http :  /  / samplesrg / flight \"  )  ;", "namespaces . put (  \" xsi \"  ,     \" http :  /  / www . w 3  . org /  2  0  0  1  / XMLSchema - instance \"  )  ;", "JAXPXPathEngine   engine    =    new   JAXPXPathEngine (  )  ;", "engine . setNamespaceContext ( namespaces )  ;", "Source   source    =    Input . fromString ( xmlDoc )  . build (  )  ;", "Iterable < Node >    nodeList    =    engine . selectNodes ( xpath ,    source )  ;", "assertEquals ( msg ,    expected ,    nodeList . iterator (  )  . next (  )  . getNodeValue (  )  )  ;", "}", "METHOD_END"], "methodName": ["assertXpathEvaluatesTo"], "fileName": "org.springframework.oxm.castor.CastorMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "CastorObject   castorObject    =    new   CastorObject (  )  ;", "castorObject . setName (  \" test \"  )  ;", "castorObject . setValue (  8  )  ;", "return   castorObject ;", "}", "METHOD_END"], "methodName": ["createCastorObject"], "fileName": "org.springframework.oxm.castor.CastorMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "StringWriter   writer    =    new   StringWriter (  )  ;", "StreamResult   result    =    new   StreamResult ( writer )  ;", "m . marshal ( object ,    result )  ;", "return   writer . toString (  )  ;", "}", "METHOD_END"], "methodName": ["marshal"], "fileName": "org.springframework.oxm.castor.CastorMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "marshaller . setMarshalAsDocument ( true )  ;", "String   result    =    marshalFlights (  )  ;", "assertThat (  \" Marshaller   wrote   invalid   result \"  ,    result ,    Abstract . isSimilarTo ( Abstract . EXPECTED _ STRING )  )  ;", "assertFalse (  \" Result   contains   xml   declaration .  \"  ,    result . matches (  \"  <  \\  \\  ?  \\  \\ s * xml \"  )  )  ;", "}", "METHOD_END"], "methodName": ["marshalAsDocumentFalse"], "fileName": "org.springframework.oxm.castor.CastorMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "marshaller . setMarshalAsDocument ( true )  ;", "String   result    =    marshalFlights (  )  ;", "assertThat (  \" Marshaller   wrote   invalid   result \"  ,    result ,    AbstractMarshallerTests . isSimilarTo (  . DOCUMENT _ EXPECTED _ STRING )  )  ;", "assertTrue (  \" Result   doesn ' t   contain   xml   declaration .  \"  ,    result . contains (  \"  <  ? xml   version =  \\  \"  1  .  0  \\  \"    encoding =  \\  \" UTF -  8  \\  \"  ?  >  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["marshalAsDocumentTrue"], "fileName": "org.springframework.oxm.castor.CastorMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "return   marshal ( flights )  ;", "}", "METHOD_END"], "methodName": ["marshalFlights"], "fileName": "org.springframework.oxm.castor.CastorMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "ContentHandler   contentHandler    =    mock ( ContentHandler . class )  ;", "SAXResult   result    =    new   SAXResult ( contentHandler )  ;", "marshaller . marshal ( flights ,    result )  ;", "InOrder   ordered    =    inOrder ( contentHandler )  ;", "ordered . verify ( contentHandler )  . startDocument (  )  ;", "ordered . verify ( contentHandler )  . startPrefixMapping (  \" tns \"  ,     \" http :  /  / samplesrg / flight \"  )  ;", "ordered . verify ( contentHandler )  . startElement ( eq (  \" http :  /  / samplesrg / flight \"  )  ,    eq (  \" flights \"  )  ,    eq (  \" tns : flights \"  )  ,    isA ( Attributes . class )  )  ;", "ordered . verify ( contentHandler )  . startElement ( eq (  \" http :  /  / samplesrg / flight \"  )  ,    eq (  \" flight \"  )  ,    eq (  \" tns : flight \"  )  ,    isA ( Attributes . class )  )  ;", "ordered . verify ( contentHandler )  . startElement ( eq (  \" http :  /  / samplesrg / flight \"  )  ,    eq (  \" number \"  )  ,    eq (  \" tns : number \"  )  ,    isA ( Attributes . class )  )  ;", "ordered . verify ( contentHandler )  . characters ( eq ( new   char [  ]  {     '  4  '  ,     '  2  '     }  )  ,    eq (  0  )  ,    eq (  2  )  )  ;", "ordered . verify ( contentHandler )  . endElement (  \" http :  /  / samplesrg / flight \"  ,     \" number \"  ,     \" tns : number \"  )  ;", "ordered . verify ( contentHandler )  . endElement (  \" http :  /  / samplesrg / flight \"  ,     \" flight \"  ,     \" tns : flight \"  )  ;", "ordered . verify ( contentHandler )  . endElement (  \" http :  /  / samplesrg / flight \"  ,     \" flights \"  ,     \" tns : flights \"  )  ;", "ordered . verify ( contentHandler )  . endPrefixMapping (  \" tns \"  )  ;", "ordered . verify ( contentHandler )  . endDocument (  )  ;", "}", "METHOD_END"], "methodName": ["marshalSaxResult"], "fileName": "org.springframework.oxm.castor.CastorMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "String   noNamespaceSchemaLocation    =     \" flights . xsd \"  ;", "marshaller . setNoNamespaceSchemaLocation ( noNamespaceSchemaLocation )  ;", "String   result    =    marshalFlights (  )  ;", "assertXpathEvaluatesTo (  \" The   xsi : noNamespaceSchemaLocation   hasn ' t   been   written   or   has   invalid   value .  \"  ,    noNamespaceSchemaLocation ,     \"  / tns : flights /  @ xsi : noNamespaceSchemaLocation \"  ,    result )  ;", "assertThat (  \" Marshaller   wrote   invalid   result \"  ,    result ,    Abstract . isSimilarTo ( Abstract . EXPECTED _ STRING )  )  ;", "}", "METHOD_END"], "methodName": ["noNamespaceSchemaLocation"], "fileName": "org.springframework.oxm.castor.CastorMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "marshaller . setRootElement (  \" canceledFlights \"  )  ;", "String   result    =    marshalFlights (  )  ;", "assertThat (  \" Marshaller   wrote   invalid   result \"  ,    result ,    AbstractMarshallerTests . isSimilarTo (  . ROOT _ ELEMENT _ EXPECTED _ STRING )  )  ;", "}", "METHOD_END"], "methodName": ["rootElement"], "fileName": "org.springframework.oxm.castor.CastorMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "String   schemaLocation    =     \" flights . xsd \"  ;", "marshaller . setSchemaLocation ( schemaLocation )  ;", "String   result    =    marshalFlights (  )  ;", "assertXpathEvaluatesTo (  \" The   xsi : noNamespaceSchemaLocation   hasn ' t   been   written   or   has   invalid   value .  \"  ,    schemaLocation ,     \"  / tns : flights /  @ xsi : schemaLocation \"  ,    result )  ;", "assertThat (  \" Marshaller   wrote   invalid   result \"  ,    result ,    Abstract . isSimilarTo ( Abstract . EXPECTED _ STRING )  )  ;", "}", "METHOD_END"], "methodName": ["schemaLocation"], "fileName": "org.springframework.oxm.castor.CastorMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue (  \" CastorMarshaller   does   not   support   Flights \"  ,    marshaller . supports ( Flights . class )  )  ;", "assertTrue (  \" CastorMarshaller   does   not   support   Flight \"  ,    marshaller . supports ( Flight . class )  )  ;", "}", "METHOD_END"], "methodName": ["supports"], "fileName": "org.springframework.oxm.castor.CastorMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "marshaller . setSuppressNamespaces ( false )  ;", "String   result    =    marshalFlights (  )  ;", "assertThat (  \" Marshaller   wrote   invalid   result \"  ,    result ,    Abstract . isSimilarTo ( Abstract . EXPECTED _ STRING )  )  ;", "}", "METHOD_END"], "methodName": ["suppressNamespacesFalse"], "fileName": "org.springframework.oxm.castor.CastorMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "marshaller . setSuppressNamespaces ( true )  ;", "String   result    =    marshalFlights (  )  ;", "assertThat (  \" Marshaller   wrote   invalid   result \"  ,    result ,    AbstractMarshallerTests . isSimilarTo (  . SUPPRESSED _ NAMESPACE _ EXPECTED _ STRING )  )  ;", "}", "METHOD_END"], "methodName": ["suppressNamespacesTrue"], "fileName": "org.springframework.oxm.castor.CastorMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "CastorObject   castorObject    =    createCastorObject (  )  ;", "marshaller . setSuppressXsiType ( false )  ;", "marshaller . setRootElement (  \" objects \"  )  ;", "String   result    =    marshal ( Arrays . asList ( castorObject )  )  ;", "assertThat (  \" Marshaller   wrote   invalid   result \"  ,    result ,    AbstractMarshallerTests . isSimilarTo (  . XSI _ EXPECTED _ STRING )  )  ;", "}", "METHOD_END"], "methodName": ["suppressXsiTypeFalse"], "fileName": "org.springframework.oxm.castor.CastorMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "CastorObject   castorObject    =    createCastorObject (  )  ;", "marshaller . setSuppressXsiType ( true )  ;", "marshaller . setRootElement (  \" objects \"  )  ;", "String   result    =    marshal ( Arrays . asList ( castorObject )  )  ;", "assertThat (  \" Marshaller   wrote   invalid   result \"  ,    result ,    AbstractMarshallerTests . isSimilarTo (  . SUPPRESSED _ XSI _ EXPECTED _ STRING )  )  ;", "}", "METHOD_END"], "methodName": ["suppressXsiTypeTrue"], "fileName": "org.springframework.oxm.castor.CastorMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "CastorObject   castorObject    =    createCastorObject (  )  ;", "marshaller . setSuppressXsiType ( false )  ;", "marshaller . setUseXSITypeAtRoot ( false )  ;", "marshaller . setRootElement (  \" objects \"  )  ;", "String   result    =    marshal ( Arrays . asList ( castorObject )  )  ;", "assertThat (  \" Marshaller   wrote   invalid   result \"  ,    result ,    AbstractMarshallerTests . isSimilarTo (  . ROOT _ WITHOUT _ XSI _ EXPECTED _ STRING )  )  ;", "}", "METHOD_END"], "methodName": ["useXsiTypeAsRootFalse"], "fileName": "org.springframework.oxm.castor.CastorMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "CastorObject   castorObject    =    createCastorObject (  )  ;", "marshaller . setSuppressXsiType ( false )  ;", "marshaller . setUseXSITypeAtRoot ( true )  ;", "marshaller . setRootElement (  \" objects \"  )  ;", "String   result    =    marshal ( Arrays . asList ( castorObject )  )  ;", "assertThat (  \" Marshaller   wrote   invalid   result \"  ,    result ,    AbstractMarshallerTests . isSimilarTo (  . ROOT _ WITH _ XSI _ EXPECTED _ STRING )  )  ;", "}", "METHOD_END"], "methodName": ["useXsiTypeAsRootTrue"], "fileName": "org.springframework.oxm.castor.CastorMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.springframework.oxm.castor.CastorObject"}, {"methodBody": ["METHOD_START", "{", "return   value ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "org.springframework.oxm.castor.CastorObject"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.springframework.oxm.castor.CastorObject"}, {"methodBody": ["METHOD_START", "{", "this . value    =    value ;", "}", "METHOD_END"], "methodName": ["setValue"], "fileName": "org.springframework.oxm.castor.CastorObject"}, {"methodBody": ["METHOD_START", "{", "Flights   flights    =    new   Flights (  )  ;", "flights . setFlight ( new   Flight [  ]  {    new   Flight (  )  ,    null    }  )  ;", "u . setRootObject ( flights )  ;", "u . setClearCollections ( false )  ;", "Object   result    =    unmarshalFlights (  )  ;", "assertSame (  \" Result   Flights   is   different   object .  \"  ,    flights ,    result )  ;", "assertEquals (  \" Result   Flights   has   incorrect   number   of   Flights .  \"  ,     3  ,     (  ( Flights )     ( result )  )  . getFlightCount (  )  )  ;", "assertNull (  \" Null   Flight   was   expected .  \"  ,    flights . getFlight (  )  [  1  ]  )  ;", "testFlight ( flights . getFlight (  )  [  2  ]  )  ;", "}", "METHOD_END"], "methodName": ["clearCollectionsFalse"], "fileName": "org.springframework.oxm.castor.CastorUnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "Flights   flights    =    new   Flights (  )  ;", "flights . setFlight ( new   Flight [  ]  {    new   Flight (  )     }  )  ;", "u . setRootObject ( flights )  ;", "u . setClearCollections ( true )  ;", "Object   result    =    unmarshalFlights (  )  ;", "assertSame (  \" Result   Flights   is   different   object .  \"  ,    flights ,    result )  ;", "assertEquals (  \" Result   Flights   has   incorrect   number   of   Flight .  \"  ,     1  ,     (  ( Flights )     ( result )  )  . getFlightCount (  )  )  ;", "testFlights ( result )  ;", "}", "METHOD_END"], "methodName": ["clearCollectionsTrue"], "fileName": "org.springframework.oxm.castor.CastorUnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "unmarshaller . setIgnoreExtraAttributes ( false )  ;", "unmarshal (  . EXTRA _ ATTRIBUTES _ STRING )  ;", "}", "METHOD_END"], "methodName": ["ignoreExtraAttributesFalse"], "fileName": "org.springframework.oxm.castor.CastorUnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "unmarshaller . setIgnoreExtraAttributes ( true )  ;", "Object   result    =    unmarshal (  . EXTRA _ ATTRIBUTES _ STRING )  ;", "testFlights ( result )  ;", "}", "METHOD_END"], "methodName": ["ignoreExtraAttributesTrue"], "fileName": "org.springframework.oxm.castor.CastorUnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "unmarshaller . setIgnoreExtraElements ( false )  ;", "unmarshal (  . EXTRA _ ELEMENTS _ STRING )  ;", "}", "METHOD_END"], "methodName": ["ignoreExtraElementsFalse"], "fileName": "org.springframework.oxm.castor.CastorUnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "unmarshaller . setIgnoreExtraElements ( true )  ;", "unmarshaller . setValidating ( false )  ;", "Object   result    =    unmarshal (  . EXTRA _ ELEMENTS _ STRING )  ;", "testFlights ( result )  ;", "}", "METHOD_END"], "methodName": ["ignoreExtraElementsTrue"], "fileName": "org.springframework.oxm.castor.CastorUnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "Flights   flights    =    new   Flights (  )  ;", "u . setRootObject ( flights )  ;", "Object   result    =    unmarshalFlights (  )  ;", "testFlights ( result )  ;", "assertSame (  \" Result   Flights   is   different   object .  \"  ,    flights ,    result )  ;", "}", "METHOD_END"], "methodName": ["rootObject"], "fileName": "org.springframework.oxm.castor.CastorUnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "CastorMarshaller   unmarshaller    =    new   CastorMarshaller (  )  ;", "unmarshaller . setMappingLocation ( new   ClassPathResource (  \" order - mapping . xml \"  ,    CastorMarshaller . class )  )  ;", "unmarshaller . setTargetClasses ( Order . class )  ;", "unmarshaller . afterPropertiesSet (  )  ;", "String   xml    =     \"  < order >  \"     +     (  (  \"  < order - item   id =  \\  \"  1  \\  \"    quantity =  \\  \"  1  5  \\  \"  /  >  \"     +     \"  < order - item   id =  \\  \"  3  \\  \"    quantity =  \\  \"  2  0  \\  \"  /  >  \"  )     +     \"  <  / order >  \"  )  ;", "Order   order    =     (  ( Order )     ( unmarshaller . unmarshal ( new   StreamSource ( new   StringReader ( xml )  )  )  )  )  ;", "assertEquals (  \" Invalid   amount   of   items \"  ,     2  ,    order . getOrderItemCount (  )  )  ;", "OrderItem   item    =    order . getOrderItem (  0  )  ;", "assertEquals (  \" Invalid   items \"  ,     \"  1  \"  ,    item . getId (  )  )  ;", "assertThat (  \" Invalid   items \"  ,    item . getQuantity (  )  ,    equalTo (  1  5  )  )  ;", "item    =    order . getOrderItem (  1  )  ;", "assertEquals (  \" Invalid   items \"  ,     \"  3  \"  ,    item . getId (  )  )  ;", "assertThat (  \" Invalid   items \"  ,    item . getQuantity (  )  ,    equalTo (  2  0  )  )  ;", "}", "METHOD_END"], "methodName": ["setBothTargetClassesAndMapping"], "fileName": "org.springframework.oxm.castor.CastorUnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "StreamSource   source    =    new   StreamSource ( new   StringReader ( xml )  )  ;", "return   u . unmarshal ( source )  ;", "}", "METHOD_END"], "methodName": ["unmarshal"], "fileName": "org.springframework.oxm.castor.CastorUnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "return   unmarshal ( AbstractUnmarshallerTests . INPUT _ STRING )  ;", "}", "METHOD_END"], "methodName": ["unmarshalFlights"], "fileName": "org.springframework.oxm.castor.CastorUnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "final   AtomicReference < XMLReader >    result    =    new   AtomicReference <  >  (  )  ;", "CastorMarshaller       =    new   CastorMarshaller (  )     {", "@ Override", "protected   Object   unmarshalSaxReader ( XMLReader   xmlReader ,    InputSource   inputSource )     {", "result . set ( xmlReader )  ;", "return   null ;", "}", "}  ;", ". unmarshal ( new   SAXSource ( new   InputSource (  \"  1  \"  )  )  )  ;", "assertNotNull ( result . get (  )  )  ;", "assertEquals ( true ,    result . get (  )  . getFeature (  \" http :  /  / apache . org / xml / features / disallow - doctype - decl \"  )  )  ;", "assertEquals ( false ,    result . get (  )  . getFeature (  \" http :  /  / xml . org / sax / features / external - general - entities \"  )  )  ;", "result . set ( null )  ;", ". setSupportDtd ( true )  ;", ". setProcessExternalEntities ( true )  ;", ". unmarshal ( new   SAXSource ( new   InputSource (  \"  1  \"  )  )  )  ;", "assertNotNull ( result . get (  )  )  ;", "assertEquals ( false ,    result . get (  )  . getFeature (  \" http :  /  / apache . org / xml / features / disallow - doctype - decl \"  )  )  ;", "assertEquals ( true ,    result . get (  )  . getFeature (  \" http :  /  / xml . org / sax / features / external - general - entities \"  )  )  ;", "}", "METHOD_END"], "methodName": ["unmarshalSaxSourceWithXmlOptions"], "fileName": "org.springframework.oxm.castor.CastorUnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "final   AtomicReference < XMLReader >    result    =    new   AtomicReference <  >  (  )  ;", "CastorMarshaller       =    new   CastorMarshaller (  )     {", "@ Override", "protected   Object   unmarshalSaxReader ( XMLReader   xmlReader ,    InputSource   inputSource )     {", "result . set ( xmlReader )  ;", "return   null ;", "}", "}  ;", ". unmarshal ( new   StreamSource (  \"  1  \"  )  )  ;", "assertNotNull ( result . get (  )  )  ;", "assertEquals ( true ,    result . get (  )  . getFeature (  \" http :  /  / apache . org / xml / features / disallow - doctype - decl \"  )  )  ;", "assertEquals ( false ,    result . get (  )  . getFeature (  \" http :  /  / xml . org / sax / features / external - general - entities \"  )  )  ;", "result . set ( null )  ;", ". setSupportDtd ( true )  ;", ". setProcessExternalEntities ( true )  ;", ". unmarshal ( new   StreamSource (  \"  1  \"  )  )  ;", "assertNotNull ( result . get (  )  )  ;", "assertEquals ( false ,    result . get (  )  . getFeature (  \" http :  /  / apache . org / xml / features / disallow - doctype - decl \"  )  )  ;", "assertEquals ( true ,    result . get (  )  . getFeature (  \" http :  /  / xml . org / sax / features / external - general - entities \"  )  )  ;", "}", "METHOD_END"], "methodName": ["unmarshalStreamSourceWithXmlOptions"], "fileName": "org.springframework.oxm.castor.CastorUnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "CastorMarshaller   unmarshaller    =    new   CastorMarshaller (  )  ;", "unmarshaller . setTargetClasses ( Flights . class )  ;", "unmarshaller . afterPropertiesSet (  )  ;", "StreamSource   source    =    new   StreamSource ( new   ByteArrayInputStream ( Abstract . INPUT _ STRING . getBytes (  \" UTF -  8  \"  )  )  )  ;", "Object   flights    =    unmarshaller . unmarshal ( source )  ;", "testFlights ( flights )  ;", "}", "METHOD_END"], "methodName": ["unmarshalTargetClass"], "fileName": "org.springframework.oxm.castor.CastorUnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "unmarshaller . setWhitespacePreserve ( false )  ;", "Object   result    =    unmarshalFlights (  )  ;", "testFlights ( result )  ;", "}", "METHOD_END"], "methodName": ["whitespacePreserveFalse"], "fileName": "org.springframework.oxm.castor.CastorUnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "unmarshaller . setWhitespacePreserve ( true )  ;", "Object   result    =    unmarshalFlights (  )  ;", "testFlights ( result )  ;", "}", "METHOD_END"], "methodName": ["whitespacePreserveTrue"], "fileName": "org.springframework.oxm.castor.CastorUnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "Jaxb 2 Marshaller   jaxb 2 Marshaller    =    applicationContext . getBean (  \" jaxb 2 ClassesMarshaller \"  ,    Jaxb 2 Marshaller . class )  ;", "assertNotNull ( jaxb 2 Marshaller )  ;", "}", "METHOD_END"], "methodName": ["jaxb2ClassesToBeBoundMarshaller"], "fileName": "org.springframework.oxm.config.OxmNamespaceHandlerTests"}, {"methodBody": ["METHOD_START", "{", "Jaxb 2 Marshaller   jaxb 2 Marshaller    =    applicationContext . getBean (  \" jaxb 2 ContextPathMarshaller \"  ,    Jaxb 2 Marshaller . class )  ;", "assertNotNull ( jaxb 2 Marshaller )  ;", "}", "METHOD_END"], "methodName": ["jaxb2ContextPathMarshaller"], "fileName": "org.springframework.oxm.config.OxmNamespaceHandlerTests"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "org.springframework.oxm.jaxb.Airplane"}, {"methodBody": ["METHOD_START", "{", "this . name    =    name ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "org.springframework.oxm.jaxb.Airplane"}, {"methodBody": ["METHOD_START", "{", "return   bytes ;", "}", "METHOD_END"], "methodName": ["getBytes"], "fileName": "org.springframework.oxm.jaxb.BinaryObject"}, {"methodBody": ["METHOD_START", "{", "return   dataHandler ;", "}", "METHOD_END"], "methodName": ["getDataHandler"], "fileName": "org.springframework.oxm.jaxb.BinaryObject"}, {"methodBody": ["METHOD_START", "{", "return   swaDataHandler ;", "}", "METHOD_END"], "methodName": ["getSwaDataHandler"], "fileName": "org.springframework.oxm.jaxb.BinaryObject"}, {"methodBody": ["METHOD_START", "{", "for    ( TypeFilter   filter    :    ClassPathJaxb 2 TypeScanner . JAXB 2  _ TYPE _ FILTERS )     {", "if    (  ( filter . match ( reader ,    factory )  )     &  &     (  !  ( reader . getClassMetadata (  )  . isInterface (  )  )  )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isJaxb2Class"], "fileName": "org.springframework.oxm.jaxb.ClassPathJaxb2TypeScanner"}, {"methodBody": ["METHOD_START", "{", "try    {", "List < Class <  ?  >  >    jaxb 2 Classes    =    new   ArrayList <  >  (  )  ;", "for    ( String   packageToScan    :    this . packagesToScan )     {", "String   pattern    =     (  ( ResourcePatternResolver . CLASSPATH _ ALL _ URL _ PREFIX )     +     ( ClassUtils . convertClassNameToResourcePath ( packageToScan )  )  )     +     (  . RESOURCE _ PATTERN )  ;", "Resource [  ]    resources    =    this . resourcePatternResolver . getResources ( pattern )  ;", "MetadataReaderFactory   metadataReaderFactory    =    new   CachingMetadataReaderFactory ( this . resourcePatternResolver )  ;", "for    ( Resource   resource    :    resources )     {", "MetadataReader   metadataReader    =    metadataReaderFactory . getMetadataReader ( resource )  ;", "if    ( isJaxb 2 Class ( metadataReader ,    metadataReaderFactory )  )     {", "String   className    =    metadataReader . getClassMetadata (  )  . getClassName (  )  ;", "Class <  ?  >    jaxb 2 AnnotatedClass    =    ClassUtils . forName ( className ,    this . resourcePatternResolver . getClassLoader (  )  )  ;", "jaxb 2 Classes . add ( jaxb 2 AnnotatedClass )  ;", "}", "}", "}", "return   ClassUtils . toClassArray ( jaxb 2 Classes )  ;", "}    catch    ( IOException   ex )     {", "throw   new   UncategorizedMappingException (  \" Failed   to   scan   classpath   for   unlisted   classes \"  ,    ex )  ;", "}    catch    ( ClassNotFoundException   ex )     {", "throw   new   UncategorizedMappingException (  \" Failed   to   load   annotated   classes   from   classpath \"  ,    ex )  ;", "}", "}", "METHOD_END"], "methodName": ["scanPackages"], "fileName": "org.springframework.oxm.jaxb.ClassPathJaxb2TypeScanner"}, {"methodBody": ["METHOD_START", "{", "if    ( ex   instanceof   ValidationException )     {", "return   new   ValidationFailureException (  \" JAXB   validation   exception \"  ,    ex )  ;", "} else", "if    ( ex   instanceof   MarshalException )     {", "return   new   MarshallingFailureException (  \" JAXB   marshalling   exception \"  ,    ex )  ;", "} else", "if    ( ex   instanceof   UnmarshalException )     {", "return   new   UnmarshallingFailureException (  \" JAXB   unmarshalling   exception \"  ,    ex )  ;", "} else    {", "return   new   UncategorizedMappingException (  \" Unknown   JAXB   exception \"  ,    ex )  ;", "}", "}", "METHOD_END"], "methodName": ["convertJaxbException"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "if    ( logger . isInfoEnabled (  )  )     {", "logger . info (  (  (  \" Creating   JAXBContext   with   classes   to   be   bound    [  \"     +     ( StringUtils . arrayToCommaDelimitedString ( classesToBeBound )  )  )     +     \"  ]  \"  )  )  ;", "}", "if    (  ( thisContextProperties )     !  =    null )     {", "return   JAXBContext . newInstance ( classesToBeBound ,    thisContextProperties )  ;", "} else    {", "return   JAXBContext . newInstance ( classesToBeBound )  ;", "}", "}", "METHOD_END"], "methodName": ["createJaxbContextFromClasses"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "if    ( logger . isInfoEnabled (  )  )     {", "logger . info (  (  (  \" Creating   JAXBContext   with   context   path    [  \"     +     ( this . contextPath )  )     +     \"  ]  \"  )  )  ;", "}", "if    (  ( thisContextProperties )     !  =    null )     {", "if    (  ( this . beanClassLoader )     !  =    null )     {", "return   JAXBContext . newInstance ( contextPath ,    this . beanClassLoader ,    thisContextProperties )  ;", "} else    {", "return   JAXBContext . newInstance ( contextPath ,    Thread . currentThread (  )  . getContextClassLoader (  )  ,    thisContextProperties )  ;", "}", "} else    {", "if    (  ( this . beanClassLoader )     !  =    null )     {", "return   JAXBContext . newInstance ( contextPath ,    this . beanClassLoader )  ;", "} else    {", "return   JAXBContext . newInstance ( contextPath )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["createJaxbContextFromContextPath"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "if    ( logger . isInfoEnabled (  )  )     {", "logger . info (  (  (  \" Creating   JAXBContext   by   scanning   packages    [  \"     +     ( StringUtils . arrayToCommaDelimitedString ( packagesToScan )  )  )     +     \"  ]  \"  )  )  ;", "}", "ClassPathTypeScanner   scanner    =    new   ClassPathTypeScanner ( this . beanClassLoader ,    packagesToScan )  ;", "Class <  ?  >  [  ]    jaxb 2 Classes    =    scanner . scanPackages (  )  ;", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  (  \" Found   JAXB 2    classes :     [  \"     +     ( StringUtils . arrayToCommaDelimitedString ( jaxb 2 Classes )  )  )     +     \"  ]  \"  )  )  ;", "}", "this . classesToBeBound    =    jaxb 2 Classes ;", "if    (  ( this . jaxbContextProperties )     !  =    null )     {", "return   JAXBContext . newInstance ( jaxb 2 Classes ,    this . jaxbContextProperties )  ;", "} else    {", "return   JAXBContext . newInstance ( jaxb 2 Classes )  ;", "}", "}", "METHOD_END"], "methodName": ["createJaxbContextFromPackages"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "try    {", "marshaller    =    getJaxbContext (  )  . create (  )  ;", "initJaxb ( marshaller )  ;", "return   marshaller ;", "}    catch    ( JAXBException   ex )     {", "throw   convertJaxbException ( ex )  ;", "}", "}", "METHOD_END"], "methodName": ["createMarshaller"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "try    {", "Unm   unm    =    getJaxbContext (  )  . createUnm (  )  ;", "initJaxbUnm ( unm )  ;", "return   unm ;", "}    catch    ( JAXBException   ex )     {", "throw   convertJaxbException ( ex )  ;", "}", "}", "METHOD_END"], "methodName": ["createUnmarshaller"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "return   this . classesToBeBound ;", "}", "METHOD_END"], "methodName": ["getClassesToBeBound"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "return   this . contextPath ;", "}", "METHOD_END"], "methodName": ["getContextPath"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "JAXBContext   context    =    this . jaxbContext ;", "if    ( context    !  =    null )     {", "return   context ;", "}", "synchronized ( this . jaxbContextMonitor )     {", "context    =    this . jaxbContext ;", "if    ( context    =  =    null )     {", "try    {", "if    ( StringUtils . hasLength ( this . contextPath )  )     {", "context    =    createJaxbContextFromContextPath ( this . contextPath )  ;", "} else", "if    (  !  ( util . ObjectUtils . isEmpty ( this . classesToBeBound )  )  )     {", "context    =    createJaxbContextFromClasses ( this . classesToBeBound )  ;", "} else", "if    (  !  ( util . ObjectUtils . isEmpty ( this . packagesToScan )  )  )     {", "context    =    createJaxbContextFromPackages ( this . packagesToScan )  ;", "} else    {", "context    =    JAXBContext . newInstance (  )  ;", "}", "this . jaxbContext    =    context ;", "}    catch    ( JAXBException   ex )     {", "throw   convertJaxbException ( ex )  ;", "}", "}", "return   context ;", "}", "}", "METHOD_END"], "methodName": ["getJaxbContext"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "return   this . packagesToScan ;", "}", "METHOD_END"], "methodName": ["getPackagesToScan"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . marshallerProperties )     !  =    null )     {", "for    ( String   name    :    this . marshallerProperties . keySet (  )  )     {", "marshaller . setProperty ( name ,    this . marshallerProperties . get ( name )  )  ;", "}", "}", "if    (  ( this . marshallerListener )     !  =    null )     {", "marshaller . setListener ( this . marshallerListener )  ;", "}", "if    (  ( this . validationEventHandler )     !  =    null )     {", "marshaller . setEventHandler ( this . validationEventHandler )  ;", "}", "if    (  ( this . adapters )     !  =    null )     {", "for    ( XmlAdapter <  ?  ,     ?  >    adapter    :    this . adapters )     {", "marshaller . setAdapter ( adapter )  ;", "}", "}", "if    (  ( this . schema )     !  =    null )     {", "marshaller . setSchema ( this . schema )  ;", "}", "}", "METHOD_END"], "methodName": ["initJaxbMarshaller"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . unmarshallerProperties )     !  =    null )     {", "for    ( String   name    :    this . unmarshallerProperties . keySet (  )  )     {", "unmarshaller . setProperty ( name ,    this . unmarshallerProperties . get ( name )  )  ;", "}", "}", "if    (  ( this . unmarshallerListener )     !  =    null )     {", "unmarshaller . setListener ( this . unmarshallerListener )  ;", "}", "if    (  ( this . validationEventHandler )     !  =    null )     {", "unmarshaller . setEventHandler ( this . validationEventHandler )  ;", "}", "if    (  ( this . adapters )     !  =    null )     {", "for    ( XmlAdapter <  ?  ,     ?  >    adapter    :    this . adapters )     {", "unmarshaller . setAdapter ( adapter )  ;", "}", "}", "if    (  ( this . schema )     !  =    null )     {", "unmarshaller . setSchema ( this . schema )  ;", "}", "}", "METHOD_END"], "methodName": ["initJaxbUnmarshaller"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  (  ( Boolean . class )     =  =    clazz )     |  |     (  ( Byte . class )     =  =    clazz )  )     |  |     (  ( Short . class )     =  =    clazz )  )     |  |     (  ( Integer . class )     =  =    clazz )  )     |  |     (  ( Long . class )     =  =    clazz )  )     |  |     (  ( Float . class )     =  =    clazz )  )     |  |     (  ( Double . class )     =  =    clazz )  ;", "}", "METHOD_END"], "methodName": ["isPrimitiveWrapper"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "return   this . processExternalEntities ;", "}", "METHOD_END"], "methodName": ["isProcessExternalEntities"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "return    (  (  (  (  (  (  (  (  (  (  (  ( String . class )     =  =    clazz )     |  |     ( BigInteger . class . isAssignableFrom ( clazz )  )  )     |  |     ( BigDecimal . class . isAssignableFrom ( clazz )  )  )     |  |     ( Calendar . class . isAssignableFrom ( clazz )  )  )     |  |     ( Date . class . isAssignableFrom ( clazz )  )  )     |  |     ( QName . class . isAssignableFrom ( clazz )  )  )     |  |     (  ( URI . class )     =  =    clazz )  )     |  |     ( XMLGregorianCalendar . class . isAssignableFrom ( clazz )  )  )     |  |     ( Duration . class . isAssignableFrom ( clazz )  )  )     |  |     (  ( Image . class )     =  =    clazz )  )     |  |     (  ( DataHandler . class )     =  =    clazz )  )     |  |     (  ( UUID . class )     =  =    clazz )  ;", "}", "METHOD_END"], "methodName": ["isStandardClass"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "return   this . supportDtd ;", "}", "METHOD_END"], "methodName": ["isSupportDtd"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "if    ( logger . isDebugEnabled (  )  )     {", "logger . debug (  (  \" Setting   validation   schema   to    \"     +     ( StUtils . arrayToCommaDelimitedSt ( this . schemaResources )  )  )  )  ;", "}", "Assert . notEmpty ( resources ,     \" No   resources   given \"  )  ;", "Assert . hasLength ( schemaLanguage ,     \" No   schema   language   provided \"  )  ;", "Source [  ]    schemaSources    =    new   Source [ resources . length ]  ;", "XMLReader   xmlReader    =    XMLReaderFactory . createXMLReader (  )  ;", "xmlReader . setFeature (  \" http :  /  / xml . org / sax / features / namespace - prefixes \"  ,    true )  ;", "for    ( int   i    =     0  ;    i    <     ( resources . length )  ;    i +  +  )     {", "Resource   resource    =    resources [ i ]  ;", "Assert . isTrue (  (  ( resource    !  =    null )     &  &     ( resource . exists (  )  )  )  ,     (  )     -  >     \" Resource   does   not   exist :     \"     +    resource )  ;", "InputSource   inputSource    =    SaxResourceUtils . createInputSource ( resource )  ;", "schemaSources [ i ]     =    new   SAXSource ( xmlReader ,    inputSource )  ;", "}", "SchemaFactory   schemaFactory    =    SchemaFactory . newInstance ( schemaLanguage )  ;", "if    (  ( this . schemaResourceResolver )     !  =    null )     {", "schemaFactory . setResourceResolver ( this . schemaResourceResolver )  ;", "}", "return   schemaFactory . newSchema ( schemaSources )  ;", "}", "METHOD_END"], "methodName": ["loadSchema"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "XMLStreamWriter   streamWriter    =    StaxUtils . getXMLStreamWriter ( staxResult )  ;", "if    ( streamWriter    !  =    null )     {", "jaxb . marshal ( graph ,    streamWriter )  ;", "} else    {", "XMLEventWriter   eventWriter    =    StaxUtils . getXMLEventWriter ( staxResult )  ;", "if    ( eventWriter    !  =    null )     {", "jaxb . marshal ( graph ,    eventWriter )  ;", "} else    {", "throw   new   IllegalArgumentException (  \" StAX   Result   contains   neither   XMLStreamWriter   nor   XMLEventConsumer \"  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["marshalStaxResult"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "if    (  ( StaxUtils . isStaxSource ( source )  )     |  |     ( source   instanceof   DOMSource )  )     {", "return   source ;", "}", "XMLReader   xmlReader    =    null ;", "InputSource   inputSource    =    null ;", "if    ( source   instanceof   SAXSource )     {", "SAXSource   saxSource    =     (  ( SAXSource )     ( source )  )  ;", "xmlReader    =    saxSource . getXMLReader (  )  ;", "inputSource    =    saxSource . getInputSource (  )  ;", "} else", "if    ( source   instanceof   StreamSource )     {", "StreamSource   streamSource    =     (  ( StreamSource )     ( source )  )  ;", "if    (  ( streamSource . getInputStream (  )  )     !  =    null )     {", "inputSource    =    new   InputSource ( streamSource . getInputStream (  )  )  ;", "} else", "if    (  ( streamSource . getReader (  )  )     !  =    null )     {", "inputSource    =    new   InputSource ( streamSource . getReader (  )  )  ;", "} else    {", "inputSource    =    new   InputSource ( streamSource . getSystemId (  )  )  ;", "}", "}", "try    {", "if    ( xmlReader    =  =    null )     {", "xmlReader    =    XMLReaderFactory . createXMLReader (  )  ;", "}", "xmlReader . setFeature (  \" http :  /  / apache . org / xml / features / disallow - doctype - decl \"  ,     (  !  ( isSupportDtd (  )  )  )  )  ;", "String   name    =     \" http :  /  / xml . org / sax / features / external - general - entities \"  ;", "xmlReader . setFeature ( name ,    isProcessExternalEntities (  )  )  ;", "if    (  !  ( isProcessExternalEntities (  )  )  )     {", "xmlReader . setEntityResolver (  . NO _ OP _ ENTITY _ RESOLVER )  ;", "}", "return   new   SAXSource ( xmlReader ,    inputSource )  ;", "}    catch    ( SAXException   ex )     {", "logger . warn (  \" Processing   of   external   entities   could   not   be   disabled \"  ,    ex )  ;", "return   source ;", "}", "}", "METHOD_END"], "methodName": ["processSource"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "this . adapters    =    adapters ;", "}", "METHOD_END"], "methodName": ["setAdapters"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "this . checkForXmlRootElement    =    checkForXmlRootElement ;", "}", "METHOD_END"], "methodName": ["setCheckForXmlRootElement"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "this . classesToBeBound    =    classesToBeBound ;", "}", "METHOD_END"], "methodName": ["setClassesToBeBound"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "this . contextPath    =    contextPath ;", "}", "METHOD_END"], "methodName": ["setContextPath"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "Assert . notEmpty ( contextPaths ,     \"  ' contextPaths '    must   not   be   empty \"  )  ;", "this . contextPath    =    StUtils . arrayToDelimitedSt ( contextPaths ,     \"  :  \"  )  ;", "}", "METHOD_END"], "methodName": ["setContextPaths"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "this . jaxbContextProperties    =    jaxbContextProperties ;", "}", "METHOD_END"], "methodName": ["setJaxbContextProperties"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "this . lazyInit    =    lazyInit ;", "}", "METHOD_END"], "methodName": ["setLazyInit"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "this . mappedClass    =    mappedClass ;", "}", "METHOD_END"], "methodName": ["setMappedClass"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "this . marshallerListener    =    marshallerListener ;", "}", "METHOD_END"], "methodName": ["setMarshallerListener"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "this . marshallerProperties    =    properties ;", "}", "METHOD_END"], "methodName": ["setMarshallerProperties"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "this . mtomEnabled    =    mtomEnabled ;", "}", "METHOD_END"], "methodName": ["setMtomEnabled"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "this . packagesToScan    =    packagesToScan ;", "}", "METHOD_END"], "methodName": ["setPackagesToScan"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "this . processExternalEntities    =    processExternalEntities ;", "if    ( processExternalEntities )     {", "setSupportDtd ( true )  ;", "}", "}", "METHOD_END"], "methodName": ["setProcessExternalEntities"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "this . schemaResources    =    new   Resource [  ]  {    schemaResource    }  ;", "}", "METHOD_END"], "methodName": ["setSchema"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "this . schemaLanguage    =    schemaLanguage ;", "}", "METHOD_END"], "methodName": ["setSchemaLanguage"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "this . schemaResourceResolver    =    schemaResourceResolver ;", "}", "METHOD_END"], "methodName": ["setSchemaResourceResolver"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "this . schemaResources    =    schemaResources ;", "}", "METHOD_END"], "methodName": ["setSchemas"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "this . supportDtd    =    supportDtd ;", "}", "METHOD_END"], "methodName": ["setSupportDtd"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "this . supportJaxbElementClass    =    supportJaxbElementClass ;", "}", "METHOD_END"], "methodName": ["setSupportJaxbElementClass"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "this . unmarshallerListener    =    unmarshallerListener ;", "}", "METHOD_END"], "methodName": ["setUnmarshallerListener"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "this . unmarshallerProperties    =    properties ;", "}", "METHOD_END"], "methodName": ["setUnmarshallerProperties"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "this . validationEventHandler    =    validationEventHandler ;", "}", "METHOD_END"], "methodName": ["setValidationEventHandler"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "if    ( checkForXmlRootElement    &  &     (  ( AnnotationUtils . findAnnotation ( clazz ,    XmlRootElement . class )  )     =  =    null )  )     {", "return   false ;", "}", "if    ( StringUtils . hasLength ( this . contextPath )  )     {", "String   packageName    =    ClassUtils . getPackageName ( clazz )  ;", "String [  ]    contextPaths    =    StringUtils . tokenizeToStringArray ( this . contextPath ,     \"  :  \"  )  ;", "for    ( String   contextPath    :    contextPaths )     {", "if    ( contextPath . equals ( packageName )  )     {", "return   true ;", "}", "}", "return   false ;", "} else", "if    (  !  ( util . ObjectUtils . isEmpty ( this . classesToBeBound )  )  )     {", "return   asList ( this . classesToBeBound )  . contains ( clazz )  ;", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["supportsInternal"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "XMLStreamReader   streamReader    =    StaxUtils . getXMLStreamReader ( staxSource )  ;", "if    ( streamReader    !  =    null )     {", "return    ( this . mappedClass )     !  =    null    ?    jaxbUnm . unmarshal ( streamReader ,    this . mappedClass )  . getValue (  )     :    jaxbUnm . unmarshal ( streamReader )  ;", "} else    {", "XMLEventReader   eventReader    =    StaxUtils . getXMLEventReader ( staxSource )  ;", "if    ( eventReader    !  =    null )     {", "return    ( this . mappedClass )     !  =    null    ?    jaxbUnm . unmarshal ( eventReader ,    this . mappedClass )  . getValue (  )     :    jaxbUnm . unmarshal ( eventReader )  ;", "} else    {", "throw   new   IllegalArgumentException (  \" StaxSource   contains   neither   XMLStreamReader   nor   XMLEventReader \"  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["unmarshalStaxSource"], "fileName": "org.springframework.oxm.jaxb.Jaxb2Marshaller"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["createDummyRootElement"], "fileName": "org.springframework.oxm.jaxb.Jaxb2MarshallerTests"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["createDummyType"], "fileName": "org.springframework.oxm.jaxb.Jaxb2MarshallerTests"}, {"methodBody": ["METHOD_START", "{", "marshaller    =    new   Jaxb 2 Marshaller (  )  ;", "marshaller . setContextPath (  . CONTEXT _ PATH )  ;", "marshaller . setLazyInit ( true )  ;", "marshaller . afterPropertiesSet (  )  ;", "StringWriter   writer    =    new   StringWriter (  )  ;", "StreamResult   result    =    new   StreamResult ( writer )  ;", "marshaller . marshal ( flights ,    result )  ;", "DifferenceEvaluator   ev    =    chain ( Default ,    downgradeDifferencesToEqual ( XML _ STANDALONE )  )  ;", "assertThat (  \" Marshaller   writes   invalid   StreamResult \"  ,    writer . toString (  )  ,    AbstractMarshallerTests . isSimilarTo ( AbstractMarshallerTests . EXPECTED _ STRING )  . withDifferenceEvaluator ( ev )  )  ;", "}", "METHOD_END"], "methodName": ["lazyInit"], "fileName": "org.springframework.oxm.jaxb.Jaxb2MarshallerTests"}, {"methodBody": ["METHOD_START", "{", "marshaller    =    new   Jaxb 2 Marshaller (  )  ;", "marshaller . setPackagesToScan (  \"  \"  )  ;", "marshaller . afterPropertiesSet (  )  ;", "Airplane   airplane    =    new   Airplane (  )  ;", "airplane . setName (  \" test \"  )  ;", "StringWriter   writer    =    new   StringWriter (  )  ;", "Result   result    =    new   StreamResult ( writer )  ;", "marshaller . marshal ( airplane ,    result )  ;", "DifferenceEvaluator   ev    =    chain ( Default ,    downgradeDifferencesToEqual ( XML _ STANDALONE )  )  ;", "assertThat (  \" Marshalling   should   use   root   Element \"  ,    writer . toString (  )  ,    AbstractMarshallerTests . isSimilarTo (  \"  < airplane >  < name > test <  / name >  <  / airplane >  \"  )  . withDifferenceEvaluator ( ev )  )  ;", "}", "METHOD_END"], "methodName": ["marshalAWrappedObjectHoldingAnXmlElementDeclElement"], "fileName": "org.springframework.oxm.jaxb.Jaxb2MarshallerTests"}, {"methodBody": ["METHOD_START", "{", "marshaller    =    new   Jaxb 2 Marshaller (  )  ;", "marshaller . setClassesToBeBound ( BinaryObject . class )  ;", "marshaller . setMtomEnabled ( true )  ;", "marshaller . afterPropertiesSet (  )  ;", "MimeContainer   mimeContainer    =    mock ( MimeContainer . class )  ;", "Resource   logo    =    new   ClassPathResource (  \" spring - ws . png \"  ,    getClass (  )  )  ;", "DataHandler   dataHandler    =    new   DataHandler ( new   FileDataSource ( logo . getFile (  )  )  )  ;", "given ( mimeContainer . convertToXopPackage (  )  )  . willReturn ( true )  ;", "byte [  ]    bytes    =    FileCopyUtils . copyToByteArray ( logo . getInputStream (  )  )  ;", "BinaryObject   object    =    new   BinaryObject ( bytes ,    dataHandler )  ;", "StringWriter   writer    =    new   StringWriter (  )  ;", "marshaller . marshal ( object ,    new   StreamResult ( writer )  ,    mimeContainer )  ;", "assertTrue (  \" No   XML   written \"  ,     (  ( writer . toString (  )  . length (  )  )     >     0  )  )  ;", "verify ( mimeContainer ,    times (  3  )  )  . addAttachment ( isA ( String . class )  ,    isA ( DataHandler . class )  )  ;", "}", "METHOD_END"], "methodName": ["marshalAttachments"], "fileName": "org.springframework.oxm.jaxb.Jaxb2MarshallerTests"}, {"methodBody": ["METHOD_START", "{", "Jaxb 2 Marshaller   marshaller    =    new   Jaxb 2 Marshaller (  )  ;", "marshaller . setClassesToBeBound ( FlightType . class )  ;", "marshaller . afterPropertiesSet (  )  ;", "Result   result    =    new   StreamResult ( new   StringWriter (  )  )  ;", "Flights   flights    =    new   Flights (  )  ;", "marshaller . marshal ( flights ,    result )  ;", "}", "METHOD_END"], "methodName": ["marshalInvalidClass"], "fileName": "org.springframework.oxm.jaxb.Jaxb2MarshallerTests"}, {"methodBody": ["METHOD_START", "{", "ContentHandler   contentHandler    =    mock ( ContentHandler . class )  ;", "SAXResult   result    =    new   SAXResult ( contentHandler )  ;", "marshaller . marshal ( flights ,    result )  ;", "InOrder   ordered    =    inOrder ( contentHandler )  ;", "ordered . verify ( contentHandler )  . setDocumentLocator ( isA ( Locator . class )  )  ;", "ordered . verify ( contentHandler )  . startDocument (  )  ;", "ordered . verify ( contentHandler )  . startPrefixMapping (  \"  \"  ,     \" http :  /  / samplesrg / flight \"  )  ;", "ordered . verify ( contentHandler )  . startElement ( eq (  \" http :  /  / samplesrg / flight \"  )  ,    eq (  \" flights \"  )  ,    eq (  \" flights \"  )  ,    isA ( Attributes . class )  )  ;", "ordered . verify ( contentHandler )  . startElement ( eq (  \" http :  /  / samplesrg / flight \"  )  ,    eq (  \" flight \"  )  ,    eq (  \" flight \"  )  ,    isA ( Attributes . class )  )  ;", "ordered . verify ( contentHandler )  . startElement ( eq (  \" http :  /  / samplesrg / flight \"  )  ,    eq (  \" number \"  )  ,    eq (  \" number \"  )  ,    isA ( Attributes . class )  )  ;", "ordered . verify ( contentHandler )  . characters ( isA ( char [  ]  . class )  ,    eq (  0  )  ,    eq (  2  )  )  ;", "ordered . verify ( contentHandler )  . endElement (  \" http :  /  / samplesrg / flight \"  ,     \" number \"  ,     \" number \"  )  ;", "ordered . verify ( contentHandler )  . endElement (  \" http :  /  / samplesrg / flight \"  ,     \" flight \"  ,     \" flight \"  )  ;", "ordered . verify ( contentHandler )  . endElement (  \" http :  /  / samplesrg / flight \"  ,     \" flights \"  ,     \" flights \"  )  ;", "ordered . verify ( contentHandler )  . endPrefixMapping (  \"  \"  )  ;", "ordered . verify ( contentHandler )  . endDocument (  )  ;", "}", "METHOD_END"], "methodName": ["marshalSAXResult"], "fileName": "org.springframework.oxm.jaxb.Jaxb2MarshallerTests"}, {"methodBody": ["METHOD_START", "{", "Jaxb 2 Marshaller   marshaller    =    new   Jaxb 2 Marshaller (  )  ;", "marshaller . afterPropertiesSet (  )  ;", "}", "METHOD_END"], "methodName": ["noContextPathOrClassesToBeBound"], "fileName": "org.springframework.oxm.jaxb.Jaxb2MarshallerTests"}, {"methodBody": ["METHOD_START", "{", "Jaxb 2 Marshaller   marshaller    =    new   Jaxb 2 Marshaller (  )  ;", "marshaller . setContextPath (  . CONTEXT _ PATH )  ;", "marshaller . setMarshallerProperties ( Collections .  < String ,    Object > singletonMap ( Marshaller . JAXB _ FORMATTED _ OUTPUT ,    Boolean . TRUE )  )  ;", "marshaller . afterPropertiesSet (  )  ;", "}", "METHOD_END"], "methodName": ["properties"], "fileName": "org.springframework.oxm.jaxb.Jaxb2MarshallerTests"}, {"methodBody": ["METHOD_START", "{", "marshaller    =    new   Jaxb 2 Marshaller (  )  ;", "marshaller . setClassesToBeBound ( Flights . class ,    FlightType . class )  ;", "marshaller . afterPropertiesSet (  )  ;", "testSupports (  )  ;", "}", "METHOD_END"], "methodName": ["supportsClassesToBeBound"], "fileName": "org.springframework.oxm.jaxb.Jaxb2MarshallerTests"}, {"methodBody": ["METHOD_START", "{", "testSupports (  )  ;", "}", "METHOD_END"], "methodName": ["supportsContextPath"], "fileName": "org.springframework.oxm.jaxb.Jaxb2MarshallerTests"}, {"methodBody": ["METHOD_START", "{", "marshaller    =    new   Jaxb 2 Marshaller (  )  ;", "marshaller . setPackagesToScan (  . CONTEXT _ PATH )  ;", "marshaller . afterPropertiesSet (  )  ;", "testSupports (  )  ;", "}", "METHOD_END"], "methodName": ["supportsPackagesToScan"], "fileName": "org.springframework.oxm.jaxb.Jaxb2MarshallerTests"}, {"methodBody": ["METHOD_START", "{", "marshaller    =    new   Jaxb 2 Marshaller (  )  ;", "marshaller . setClassesToBeBound (  . DummyRootElement . class ,     . DummyType . class )  ;", "marshaller . afterPropertiesSet (  )  ;", "assertTrue (  \" Jaxb 2 Marshaller   does   not   support   XmlRootElement   class \"  ,    marshaller . supports (  . DummyRootElement . class )  )  ;", "assertTrue (  \" Jaxb 2 Marshaller   does   not   support   XmlRootElement   generic   type \"  ,    marshaller . supports (  (  ( Type )     (  . DummyRootElement . class )  )  )  )  ;", "assertFalse (  \" Jaxb 2 Marshaller   supports   DummyType   class \"  ,    marshaller . supports (  . DummyType . class )  )  ;", "assertFalse (  \" Jaxb 2 Marshaller   supports   DummyType   type \"  ,    marshaller . supports (  (  ( Type )     (  . DummyType . class )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["supportsXmlRootElement"], "fileName": "org.springframework.oxm.jaxb.Jaxb2MarshallerTests"}, {"methodBody": ["METHOD_START", "{", "Jaxb 2 Marshaller   marshaller    =    new   Jaxb 2 Marshaller (  )  ;", "marshaller . setContextPath (  \" ab \"  )  ;", "marshaller . afterPropertiesSet (  )  ;", "}", "METHOD_END"], "methodName": ["testInvalidContextPath"], "fileName": "org.springframework.oxm.jaxb.Jaxb2MarshallerTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue (  \" Jaxb 2 Marshaller   does   not   support   Flights   class \"  ,    marshaller . supports ( Flights . class )  )  ;", "assertTrue (  \" Jaxb 2 Marshaller   does   not   support   Flights   generic   type \"  ,    marshaller . supports (  (  ( Type )     ( Flights . class )  )  )  )  ;", "assertFalse (  \" Jaxb 2 Marshaller   supports   FlightType   class \"  ,    marshaller . supports ( FlightType . class )  )  ;", "assertFalse (  \" Jaxb 2 Marshaller   supports   FlightType   type \"  ,    marshaller . supports (  (  ( Type )     ( FlightType . class )  )  )  )  ;", "Method   method    =    ObjectFactory . class . getDeclaredMethod (  \" createFlight \"  ,    FlightType . class )  ;", "assertTrue (  \" Jaxb 2 Marshaller   does   not   support   JAXBElement < FlightsType >  \"  ,    marshaller . supports ( method . getGenericReturnType (  )  )  )  ;", "marshaller . setSupportJaxbElementClass ( true )  ;", "JAXBElement < FlightType >    flightTypeJAXBElement    =    new   JAXBElement ( new   QName (  \" http :  /  / springframework . org \"  ,     \" flight \"  )  ,    FlightType . class ,    new   FlightType (  )  )  ;", "assertTrue (  \" Jaxb 2 Marshaller   does   not   support   JAXBElement < FlightsType >  \"  ,    marshaller . supports ( flightTypeJAXBElement . getClass (  )  )  )  ;", "assertFalse (  \" Jaxb 2 Marshaller   supports   class   not   in   context   path \"  ,    marshaller . supports (  . DummyRootElement . class )  )  ;", "assertFalse (  \" Jaxb 2 Marshaller   supports   type   not   in   context   path \"  ,    marshaller . supports (  (  ( Type )     (  . DummyRootElement . class )  )  )  )  ;", "method    =    getClass (  )  . getDeclaredMethod (  \" createDummyRootElement \"  )  ;", "assertFalse (  \" Jaxb 2 Marshaller   supports   JAXBElement   not   in   context   path \"  ,    marshaller . supports ( method . getGenericReturnType (  )  )  )  ;", "assertFalse (  \" Jaxb 2 Marshaller   supports   class   not   in   context   path \"  ,    marshaller . supports (  . DummyType . class )  )  ;", "assertFalse (  \" Jaxb 2 Marshaller   supports   type   not   in   context   path \"  ,    marshaller . supports (  (  ( Type )     (  . DummyType . class )  )  )  )  ;", "method    =    getClass (  )  . getDeclaredMethod (  \" createDummyType \"  )  ;", "assertFalse (  \" Jaxb 2 Marshaller   supports   JAXBElement   not   in   context   path \"  ,    marshaller . supports ( method . getGenericReturnType (  )  )  )  ;", "testSupportsPrimitives (  )  ;", "testSupportsStandardClasses (  )  ;", "}", "METHOD_END"], "methodName": ["testSupports"], "fileName": "org.springframework.oxm.jaxb.Jaxb2MarshallerTests"}, {"methodBody": ["METHOD_START", "{", "final   Primitives   primitives    =    new   Primitives (  )  ;", "ReflectionUtils . doWithMethods ( Primitives . class ,    new   ReflectionUtils . MethodCallback (  )     {", "@ Override", "public   void   doWith ( Method   method )    throws   IllegalAccessException ,    IllegalArgumentException    {", "Type   returnType    =    method . getGenericReturnType (  )  ;", "assertTrue (  (  (  \"    does   not   support   JAXBElement <  \"     +     ( method . getName (  )  . substring (  9  )  )  )     +     \"  >  \"  )  ,    marshaller . supports ( returnType )  )  ;", "try    {", "Object   returnValue    =    method . invoke ( primitives )  ;", "marshaller . marshal ( returnValue ,    new   StreamResult ( new   ByteArrayOutputStream (  )  )  )  ;", "}    catch    ( InvocationTargetException   e )     {", "fail ( e . getMessage (  )  )  ;", "}", "}", "}  ,    new   ReflectionUtils . MethodFilter (  )     {", "@ Override", "public   boolean   matches ( Method   method )     {", "return   method . getName (  )  . startsWith (  \" primitive \"  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["testSupportsPrimitives"], "fileName": "org.springframework.oxm.jaxb.Jaxb2MarshallerTests"}, {"methodBody": ["METHOD_START", "{", "final   StandardClasses   standardClasses    =    new   StandardClasses (  )  ;", "ReflectionUtils . doWithMethods ( StandardClasses . class ,    new   ReflectionUtils . MethodCallback (  )     {", "@ Override", "public   void   doWith ( Method   method )    throws   IllegalAccessException ,    IllegalArgumentException    {", "Type   returnType    =    method . getGenericReturnType (  )  ;", "assertTrue (  (  (  \"    does   not   support   JAXBElement <  \"     +     ( method . getName (  )  . substring (  1  3  )  )  )     +     \"  >  \"  )  ,    marshaller . supports ( returnType )  )  ;", "try    {", "Object   returnValue    =    method . invoke ( standardClasses )  ;", "marshaller . marshal ( returnValue ,    new   StreamResult ( new   ByteArrayOutputStream (  )  )  )  ;", "}    catch    ( InvocationTargetException   e )     {", "fail ( e . getMessage (  )  )  ;", "}", "}", "}  ,    new   ReflectionUtils . MethodFilter (  )     {", "@ Override", "public   boolean   matches ( Method   method )     {", "return   method . getName (  )  . startsWith (  \" standardClass \"  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["testSupportsStandardClasses"], "fileName": "org.springframework.oxm.jaxb.Jaxb2MarshallerTests"}, {"methodBody": ["METHOD_START", "{", "final   Unmarshaller   unmarshaller    =    mock ( Unmarshaller . class )  ;", "marshaller    =    new    (  )     {", "@ Override", "protected   Unmarshaller   createUnmarshaller (  )     {", "return   unmarshaller ;", "}", "}  ;", "marshaller . unmarshal ( new   SAXSource ( new   InputSource (  \"  1  \"  )  )  )  ;", "ArgumentCaptor < SAXSource >    sourceCaptor    =    ArgumentCaptor . forClass ( SAXSource . class )  ;", "verify ( unmarshaller )  . unmarshal ( sourceCaptor . capture (  )  )  ;", "SAXSource   result    =    sourceCaptor . getValue (  )  ;", "assertEquals ( true ,    result . getXMLReader (  )  . getFeature (  \" http :  /  / apache . org / xml / features / disallow - doctype - decl \"  )  )  ;", "assertEquals ( false ,    result . getXMLReader (  )  . getFeature (  \" http :  /  / xml . org / sax / features / external - general - entities \"  )  )  ;", "reset ( unmarshaller )  ;", "marshaller . setProcessExternalEntities ( true )  ;", "marshaller . setSupportDtd ( true )  ;", "marshaller . unmarshal ( new   SAXSource ( new   InputSource (  \"  1  \"  )  )  )  ;", "verify ( unmarshaller )  . unmarshal ( sourceCaptor . capture (  )  )  ;", "result    =    sourceCaptor . getValue (  )  ;", "assertEquals ( false ,    result . getXMLReader (  )  . getFeature (  \" http :  /  / apache . org / xml / features / disallow - doctype - decl \"  )  )  ;", "assertEquals ( true ,    result . getXMLReader (  )  . getFeature (  \" http :  /  / xml . org / sax / features / external - general - entities \"  )  )  ;", "}", "METHOD_END"], "methodName": ["unmarshalSaxSourceWithXmlOptions"], "fileName": "org.springframework.oxm.jaxb.Jaxb2MarshallerTests"}, {"methodBody": ["METHOD_START", "{", "final   Unmarshaller   unmarshaller    =    mock ( Unmarshaller . class )  ;", "marshaller    =    new    (  )     {", "@ Override", "protected   Unmarshaller   createUnmarshaller (  )     {", "return   unmarshaller ;", "}", "}  ;", "marshaller . unmarshal ( new   StreamSource (  \"  1  \"  )  )  ;", "ArgumentCaptor < SAXSource >    sourceCaptor    =    ArgumentCaptor . forClass ( SAXSource . class )  ;", "verify ( unmarshaller )  . unmarshal ( sourceCaptor . capture (  )  )  ;", "SAXSource   result    =    sourceCaptor . getValue (  )  ;", "assertEquals ( true ,    result . getXMLReader (  )  . getFeature (  \" http :  /  / apache . org / xml / features / disallow - doctype - decl \"  )  )  ;", "assertEquals ( false ,    result . getXMLReader (  )  . getFeature (  \" http :  /  / xml . org / sax / features / external - general - entities \"  )  )  ;", "reset ( unmarshaller )  ;", "marshaller . setProcessExternalEntities ( true )  ;", "marshaller . setSupportDtd ( true )  ;", "marshaller . unmarshal ( new   StreamSource (  \"  1  \"  )  )  ;", "verify ( unmarshaller )  . unmarshal ( sourceCaptor . capture (  )  )  ;", "result    =    sourceCaptor . getValue (  )  ;", "assertEquals ( false ,    result . getXMLReader (  )  . getFeature (  \" http :  /  / apache . org / xml / features / disallow - doctype - decl \"  )  )  ;", "assertEquals ( true ,    result . getXMLReader (  )  . getFeature (  \" http :  /  / xml . org / sax / features / external - general - entities \"  )  )  ;", "}", "METHOD_END"], "methodName": ["unmarshalStreamSourceWithXmlOptions"], "fileName": "org.springframework.oxm.jaxb.Jaxb2MarshallerTests"}, {"methodBody": ["METHOD_START", "{", "unmarshaller    =    new   Jaxb 2 Marshaller (  )  ;", "unmarshaller . setClassesToBeBound ( BinaryObject . class )  ;", "unmarshaller . setMtomEnabled ( true )  ;", "unmarshaller . afterPropertiesSet (  )  ;", "MimeContainer   mimeContainer    =    mock ( MimeContainer . class )  ;", "Resource   logo    =    new   ClassPathResource (  \" spring - ws . png \"  ,    getClass (  )  )  ;", "DataHandler   dataHandler    =    new   DataHandler ( new   FileDataSource ( logo . getFile (  )  )  )  ;", "given ( mimeContainer . isXopPackage (  )  )  . willReturn ( true )  ;", "given ( mimeContainer . getAttachment (  \"  <  6 b 7  6  5  2  8 d -  7 a 9 c -  4 def -  8 e 1  3  -  0  9  5 ab 8  9 e 9 bb 7  @ http :  /  / rg / spring - ws >  \"  )  )  . willReturn ( dataHandler )  ;", "given ( mimeContainer . getAttachment (  \"  <  9  9 bd 1  5  9  2  -  0  5  2  1  -  4  1 a 2  -  9  6  8  8  - a 8 bfb 4  0  1  9  2 fb @ http :  /  / rg / spring - ws >  \"  )  )  . willReturn ( dataHandler )  ;", "given ( mimeContainer . getAttachment (  \"  6  9  6 cfb 9 a -  4 d 2 d -  4  0  2 f - bb 5 c -  5  9 fa 6  9 e 7 f 0 b 3  @ spring - ws . png \"  )  )  . willReturn ( dataHandler )  ;", "String   content    =     \"  < binaryObject   xmlns =  ' http :  /  / rg / spring - ws '  >  \"     +     (  (  (  (  (  (  (  \"  < bytes >  \"     +     \"  < xop : Include   href =  ' cid :  6 b 7  6  5  2  8 d -  7 a 9 c -  4 def -  8 e 1  3  -  0  9  5 ab 8  9 e 9 bb 7  @ http :  /  / rg / spring - ws '    xmlns : xop =  ' http :  /  / www . w 3  . org /  2  0  0  4  /  0  8  / xop / include '  /  >  \"  )     +     \"  <  / bytes >  \"  )     +     \"  < dataHandler >  \"  )     +     \"  < xop : Include   href =  ' cid :  9  9 bd 1  5  9  2  -  0  5  2  1  -  4  1 a 2  -  9  6  8  8  - a 8 bfb 4  0  1  9  2 fb @ http :  /  / rg / spring - ws '    xmlns : xop =  ' http :  /  / www . w 3  . org /  2  0  0  4  /  0  8  / xop / include '  /  >  \"  )     +     \"  <  / dataHandler >  \"  )     +     \"  < swaDataHandler >  6  9  6 cfb 9 a -  4 d 2 d -  4  0  2 f - bb 5 c -  5  9 fa 6  9 e 7 f 0 b 3  @ spring - ws . png <  / swaDataHandler >  \"  )     +     \"  <  / binaryObject >  \"  )  ;", "StringReader   reader    =    new   StringReader ( content )  ;", "Object   result    =    unmarshaller . unmarshal ( new   StreamSource ( reader )  ,    mimeContainer )  ;", "assertTrue (  \" Result   is   not   a   BinaryObject \"  ,     ( result   instanceof   BinaryObject )  )  ;", "BinaryObject   object    =     (  ( BinaryObject )     ( result )  )  ;", "assertNotNull (  \" bytes   property   not   set \"  ,    object . getBytes (  )  )  ;", "assertTrue (  \" bytes   property   not   set \"  ,     (  ( object . getBytes (  )  . length )     >     0  )  )  ;", "assertNotNull (  \" datahandler   property   not   set \"  ,    object . getSwaDataHandler (  )  )  ;", "}", "METHOD_END"], "methodName": ["marshalAttachments"], "fileName": "org.springframework.oxm.jaxb.Jaxb2UnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "unmarshaller    =    new   Jaxb 2 Marshaller (  )  ;", "unmarshaller . setPackagesToScan ( new   String [  ]  {     \"  \"     }  )  ;", "unmarshaller . afterPropertiesSet (  )  ;", "Source   source    =    new   StreamSource ( new   StringReader (  \"  < brand - airplane >  < name > test <  / name >  <  / brand - airplane >  \"  )  )  ;", "JAXBElement < Airplane >    airplane    =     (  ( JAXBElement < Airplane >  )     ( unmarshaller . unmarshal ( source )  )  )  ;", "assertEquals (  \" Unmarshalling   via   explicit    @ XmlRegistry   tag   should   return   correct   type \"  ,     \" test \"  ,    airplane . getValue (  )  . getName (  )  )  ;", "}", "METHOD_END"], "methodName": ["unmarshalAnXmlReferingToAWrappedXmlElementDecl"], "fileName": "org.springframework.oxm.jaxb.Jaxb2UnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "Resource   resource    =    new   ClassPathResource (  \" jaxb 2  . xml \"  ,    getClass (  )  )  ;", "File   file    =    resource . getFile (  )  ;", "Flights   f    =     (  ( Flights )     ( u . unmarshal ( new   StreamSource ( file )  )  )  )  ;", "testFlights ( f )  ;", "}", "METHOD_END"], "methodName": ["unmarshalFile"], "fileName": "org.springframework.oxm.jaxb.Jaxb2UnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "return   new   JAXBElement <  >  ( Primitives . NAME ,    Boolean . class ,    true )  ;", "}", "METHOD_END"], "methodName": ["primitiveBoolean"], "fileName": "org.springframework.oxm.jaxb.Primitives"}, {"methodBody": ["METHOD_START", "{", "return   new   JAXBElement <  >  ( Primitives . NAME ,    Byte . class ,     (  ( byte )     (  4  2  )  )  )  ;", "}", "METHOD_END"], "methodName": ["primitiveByte"], "fileName": "org.springframework.oxm.jaxb.Primitives"}, {"methodBody": ["METHOD_START", "{", "return   new   JAXBElement <  >  ( Primitives . NAME ,    byte [  ]  . class ,    new   byte [  ]  {     4  2     }  )  ;", "}", "METHOD_END"], "methodName": ["primitiveByteArray"], "fileName": "org.springframework.oxm.jaxb.Primitives"}, {"methodBody": ["METHOD_START", "{", "return   new   JAXBElement <  >  ( Primitives . NAME ,    Double . class ,     4  2  .  0  )  ;", "}", "METHOD_END"], "methodName": ["primitiveDouble"], "fileName": "org.springframework.oxm.jaxb.Primitives"}, {"methodBody": ["METHOD_START", "{", "return   new   JAXBElement <  >  ( Primitives . NAME ,    Integer . class ,     4  2  )  ;", "}", "METHOD_END"], "methodName": ["primitiveInteger"], "fileName": "org.springframework.oxm.jaxb.Primitives"}, {"methodBody": ["METHOD_START", "{", "return   new   JAXBElement <  >  ( Primitives . NAME ,    Long . class ,     4  2 L )  ;", "}", "METHOD_END"], "methodName": ["primitiveLong"], "fileName": "org.springframework.oxm.jaxb.Primitives"}, {"methodBody": ["METHOD_START", "{", "return   new   JAXBElement <  >  ( Primitives . NAME ,    Short . class ,     (  ( short )     (  4  2  )  )  )  ;", "}", "METHOD_END"], "methodName": ["primitiveShort"], "fileName": "org.springframework.oxm.jaxb.Primitives"}, {"methodBody": ["METHOD_START", "{", "return   new   JAXBElement <  >  ( StandardClasses . NAME ,    BigDecimal . class ,    new   BigDecimal (  \"  4  2  .  0  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["standardClassBigDecimal"], "fileName": "org.springframework.oxm.jaxb.StandardClasses"}, {"methodBody": ["METHOD_START", "{", "return   new   JAXBElement <  >  ( StandardClasses . NAME ,    BigInteger . class ,    new   BigInteger (  \"  4  2  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["standardClassBigInteger"], "fileName": "org.springframework.oxm.jaxb.StandardClasses"}, {"methodBody": ["METHOD_START", "{", "return   new   JAXBElement <  >  ( StandardClasses . NAME ,    Calendar . class ,    Calendar . getInstance (  )  )  ;", "}", "METHOD_END"], "methodName": ["standardClassCalendar"], "fileName": "org.springframework.oxm.jaxb.StandardClasses"}, {"methodBody": ["METHOD_START", "{", "DataSource   dataSource    =    new   URLDataSource ( getClass (  )  . getResource (  \" spring - ws . png \"  )  )  ;", "DataHandler   dataHandler    =    new   DataHandler ( dataSource )  ;", "return   new   JAXBElement <  >  (  . NAME ,    DataHandler . class ,    dataHandler )  ;", "}", "METHOD_END"], "methodName": ["standardClassDataHandler"], "fileName": "org.springframework.oxm.jaxb.StandardClasses"}, {"methodBody": ["METHOD_START", "{", "return   new   JAXBElement <  >  ( StandardClasses . NAME ,    Date . class ,    new   Date (  )  )  ;", "}", "METHOD_END"], "methodName": ["standardClassDate"], "fileName": "org.springframework.oxm.jaxb.StandardClasses"}, {"methodBody": ["METHOD_START", "{", "Duration   duration    =    factory . newDuration (  4  2  0  0  0  )  ;", "return   new   JAXBElement <  >  (  . NAME ,    Duration . class ,    duration )  ;", "}", "METHOD_END"], "methodName": ["standardClassDuration"], "fileName": "org.springframework.oxm.jaxb.StandardClasses"}, {"methodBody": ["METHOD_START", "{", "return   new   JAXBElement <  >  ( StandardClasses . NAME ,    GregorianCalendar . class ,     (  ( GregorianCalendar )     ( Calendar . getInstance (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["standardClassGregorianCalendar"], "fileName": "org.springframework.oxm.jaxb.StandardClasses"}, {"methodBody": ["METHOD_START", "{", "Image   image    =    ImageIO . read ( getClass (  )  . getResourceAsStream (  \" spring - ws . png \"  )  )  ;", "return   new   JAXBElement <  >  (  . NAME ,    Image . class ,    image )  ;", "}", "METHOD_END"], "methodName": ["standardClassImage"], "fileName": "org.springframework.oxm.jaxb.StandardClasses"}, {"methodBody": ["METHOD_START", "{", "return   new   JAXBElement <  >  ( StandardClasses . NAME ,    QName . class ,    StandardClasses . NAME )  ;", "}", "METHOD_END"], "methodName": ["standardClassQName"], "fileName": "org.springframework.oxm.jaxb.StandardClasses"}, {"methodBody": ["METHOD_START", "{", "return   new   JAXBElement <  >  ( StandardClasses . NAME ,    String . class ,     \"  4  2  \"  )  ;", "}", "METHOD_END"], "methodName": ["standardClassString"], "fileName": "org.springframework.oxm.jaxb.StandardClasses"}, {"methodBody": ["METHOD_START", "{", "return   new   JAXBElement <  >  ( StandardClasses . NAME ,    URI . class ,    URI . create (  \" http :  /  / springframework . org \"  )  )  ;", "}", "METHOD_END"], "methodName": ["standardClassURI"], "fileName": "org.springframework.oxm.jaxb.StandardClasses"}, {"methodBody": ["METHOD_START", "{", "return   new   JAXBElement <  >  ( StandardClasses . NAME ,    UUID . class ,    UUID . randomUUID (  )  )  ;", "}", "METHOD_END"], "methodName": ["standardClassUUID"], "fileName": "org.springframework.oxm.jaxb.StandardClasses"}, {"methodBody": ["METHOD_START", "{", "XMLGregorianCalendar   calendar    =    factory . newXMLGregorianCalendar (  (  ( GregorianCalendar )     ( Calendar . getInstance (  )  )  )  )  ;", "return   new   JAXBElement <  >  (  . NAME ,    XMLGregorianCalendar . class ,    calendar )  ;", "}", "METHOD_END"], "methodName": ["standardClassXMLGregorianCalendar"], "fileName": "org.springframework.oxm.jaxb.StandardClasses"}, {"methodBody": ["METHOD_START", "{", "return   new   JAXBElement <  >  ( new   QName (  \" brand - airplane \"  )  ,    Airplane . class ,    null ,    airplane )  ;", "}", "METHOD_END"], "methodName": ["createAirplane"], "fileName": "org.springframework.oxm.jaxb.XmlRegObjectFactory"}, {"methodBody": ["METHOD_START", "{", "return   this . airline ;", "}", "METHOD_END"], "methodName": ["getAirline"], "fileName": "org.springframework.oxm.jibx.FlightType"}, {"methodBody": ["METHOD_START", "{", "return   this . number ;", "}", "METHOD_END"], "methodName": ["getNumber"], "fileName": "org.springframework.oxm.jibx.FlightType"}, {"methodBody": ["METHOD_START", "{", "this . airline    =    airline ;", "}", "METHOD_END"], "methodName": ["setAirline"], "fileName": "org.springframework.oxm.jibx.FlightType"}, {"methodBody": ["METHOD_START", "{", "this . number    =    number ;", "}", "METHOD_END"], "methodName": ["setNumber"], "fileName": "org.springframework.oxm.jibx.FlightType"}, {"methodBody": ["METHOD_START", "{", "flightList . add ( flight )  ;", "}", "METHOD_END"], "methodName": ["addFlight"], "fileName": "org.springframework.oxm.jibx.Flights"}, {"methodBody": ["METHOD_START", "{", "return   flightList . get ( index )  ;", "}", "METHOD_END"], "methodName": ["getFlight"], "fileName": "org.springframework.oxm.jibx.Flights"}, {"methodBody": ["METHOD_START", "{", "return   flightList . size (  )  ;", "}", "METHOD_END"], "methodName": ["sizeFlightList"], "fileName": "org.springframework.oxm.jibx.Flights"}, {"methodBody": ["METHOD_START", "{", "if    ( ex   instanceof   ValidationException )     {", "return   new   ValidationFailureException (  \" JiBX   validation   exception \"  ,    ex )  ;", "} else    {", "if    ( marshalling )     {", "return   new   ingFailureException (  \" JiBX   marshalling   exception \"  ,    ex )  ;", "} else    {", "return   new   UnmarshallingFailureException (  \" JiBX   unmarshalling   exception \"  ,    ex )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["convertJibxException"], "fileName": "org.springframework.oxm.jibx.JibxMarshaller"}, {"methodBody": ["METHOD_START", "{", "Assert . state (  (  ( this . bindingFactory )     !  =    null )  ,     \" JibxMarshaller   not   initialized \"  )  ;", "IMarshallingContext   marshallingContext    =    this . bindingFactory . createMarshallingContext (  )  ;", "marshallingContext . setIndent ( this . indent )  ;", "return   marshallingContext ;", "}", "METHOD_END"], "methodName": ["createMarshallingContext"], "fileName": "org.springframework.oxm.jibx.JibxMarshaller"}, {"methodBody": ["METHOD_START", "{", "Assert . state (  (  ( this . bindingFactory )     !  =    null )  ,     \" JibxMarshaller   not   initialized \"  )  ;", "return   this . bindingFactory . createUnmarshallingContext (  )  ;", "}", "METHOD_END"], "methodName": ["createUnmarshallingContext"], "fileName": "org.springframework.oxm.jibx.JibxMarshaller"}, {"methodBody": ["METHOD_START", "{", "if    ( StringUtils . hasLength ( docTypeRootElementName )  )     {", "IXMLWriter   xmlWriter    =    mingContext . getXmlWriter (  )  ;", "xmlWriter . writeDocType ( docTypeRootElementName ,    docTypeSystemId ,    docTypePublicId ,    docTypeInternalSubset )  ;", "}", "mingContext . marshalDocument ( graph )  ;", "}", "METHOD_END"], "methodName": ["marshalDocument"], "fileName": "org.springframework.oxm.jibx.JibxMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . bindingName    =    bindingName ;", "}", "METHOD_END"], "methodName": ["setBindingName"], "fileName": "org.springframework.oxm.jibx.JibxMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . docTypeInternalSubset    =    docTypeInternalSubset ;", "}", "METHOD_END"], "methodName": ["setDocTypeInternalSubset"], "fileName": "org.springframework.oxm.jibx.JibxMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . docTypePublicId    =    docTypePublicId ;", "}", "METHOD_END"], "methodName": ["setDocTypePublicId"], "fileName": "org.springframework.oxm.jibx.JibxMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . docTypeRootElementName    =    docTypeRootElementName ;", "}", "METHOD_END"], "methodName": ["setDocTypeRootElementName"], "fileName": "org.springframework.oxm.jibx.JibxMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . docTypeSystemId    =    docTypeSystemId ;", "}", "METHOD_END"], "methodName": ["setDocTypeSystemId"], "fileName": "org.springframework.oxm.jibx.JibxMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . encoding    =    encoding ;", "}", "METHOD_END"], "methodName": ["setEncoding"], "fileName": "org.springframework.oxm.jibx.JibxMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . indent    =    indent ;", "}", "METHOD_END"], "methodName": ["setIndent"], "fileName": "org.springframework.oxm.jibx.JibxMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . standalone    =    standalone ;", "}", "METHOD_END"], "methodName": ["setStandalone"], "fileName": "org.springframework.oxm.jibx.JibxMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . targetClass    =    targetClass ;", "}", "METHOD_END"], "methodName": ["setTargetClass"], "fileName": "org.springframework.oxm.jibx.JibxMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . targetPackage    =    targetPackage ;", "}", "METHOD_END"], "methodName": ["setTargetPackage"], "fileName": "org.springframework.oxm.jibx.JibxMarshaller"}, {"methodBody": ["METHOD_START", "{", "try    {", "ByteArrayOutputStream   os    =    new   ByteArrayOutputStream (  1  0  2  4  )  ;", "marshalOutputStream ( graph ,    os )  ;", "ByteArrayInputStream   is    =    new   ByteArrayInputStream ( os . toByteArray (  )  )  ;", "Transformer   transformer    =    this . transformerFactory . newTransformer (  )  ;", "transformer . transform ( new   StreamSource ( is )  ,    result )  ;", "}    catch    ( TransformerException   ex )     {", "throw   new   ingFailureException (  (  (  \" Could   not   transform   to    [  \"     +     ( ClassUtils . getShortName ( result . getClass (  )  )  )  )     +     \"  ]  \"  )  ,    ex )  ;", "}", "}", "METHOD_END"], "methodName": ["transformAndMarshal"], "fileName": "org.springframework.oxm.jibx.JibxMarshaller"}, {"methodBody": ["METHOD_START", "{", "try    {", "Transformer   transformer    =    this . transformerFactory . newTransformer (  )  ;", "if    ( encoding    !  =    null )     {", "transformer . setOutputProperty ( OutputKeys . ENCODING ,    encoding )  ;", "}", "ByteArrayOutputStream   os    =    new   ByteArrayOutputStream (  1  0  2  4  )  ;", "transformer . transform ( source ,    new   StreamResult ( os )  )  ;", "ByteArrayInputStream   is    =    new   ByteArrayInputStream ( os . toByteArray (  )  )  ;", "return   unmarshalInputStream ( is )  ;", "}    catch    ( TransformerException   ex )     {", "throw   new   ingFailureException (  (  (  \" Could   not   transform   from    [  \"     +     ( ClassUtils . getShortName ( source . getClass (  )  )  )  )     +     \"  ]  \"  )  ,    ex )  ;", "}", "}", "METHOD_END"], "methodName": ["transformAndUnmarshal"], "fileName": "org.springframework.oxm.jibx.JibxMarshaller"}, {"methodBody": ["METHOD_START", "{", "JibxMarshaller   marshaller    =    new   JibxMarshaller (  )  ;", "marshaller . afterPropertiesSet (  )  ;", "}", "METHOD_END"], "methodName": ["afterPropertiesSetNoContextPath"], "fileName": "org.springframework.oxm.jibx.JibxMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "Assume . assumeTrue ( System . getProperty (  \" version \"  )  . startsWith (  \"  1  .  8  .  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["compilerAssumptions"], "fileName": "org.springframework.oxm.jibx.JibxMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "marshaller . setDocTypeRootElementName (  \" flights \"  )  ;", "marshaller . setDocTypeSystemId (  \" flights . dtd \"  )  ;", "StringWriter   writer    =    new   StringWriter (  )  ;", "marshaller . marshal ( flights ,    new   StreamResult ( writer )  )  ;", "assertTrue (  \" doc   type   not   written \"  ,    writer . toString (  )  . contains (  \"  <  ! DOCTYPE   flights   SYSTEM    \\  \" flights . dtd \\  \"  >  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["dtd"], "fileName": "org.springframework.oxm.jibx.JibxMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "marshaller . setEncoding (  \" ISO -  8  8  5  9  -  1  \"  )  ;", "marshaller . setStandalone ( Boolean . TRUE )  ;", "StringWriter   writer    =    new   StringWriter (  )  ;", "marshaller . marshal ( flights ,    new   StreamResult ( writer )  )  ;", "assertTrue (  \" Encoding   and   standalone   not   set \"  ,    writer . toString (  )  . startsWith (  \"  <  ? xml   version =  \\  \"  1  .  0  \\  \"    encoding =  \\  \" ISO -  8  8  5  9  -  1  \\  \"    standalone =  \\  \" yes \\  \"  ?  >  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["encodingAndStandalone"], "fileName": "org.springframework.oxm.jibx.JibxMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "marshaller . setIndent (  4  )  ;", "StringWriter   writer    =    new   StringWriter (  )  ;", "marshaller . marshal ( flights ,    new   StreamResult ( writer )  )  ;", "String   expected    =     \"  <  ? xml   version =  \\  \"  1  .  0  \\  \"  ?  >  \\ n \"     +     (  (  (  (  \"  < flights   xmlns =  \\  \" http :  /  / samplesrg / flight \\  \"  >  \\ n \"     +     \"              < flight >  \\ n \"  )     +     \"                          < number >  4  2  <  / number >  \\ n \"  )     +     \"              <  / flight >  \\ n \"  )     +     \"  <  / flights >  \"  )  ;", "assertThat ( writer . toString (  )  ,    AbstractMarshallerTests . isSimilarTo ( expected )  . ignoreWhitespace (  )  )  ;", "}", "METHOD_END"], "methodName": ["indentation"], "fileName": "org.springframework.oxm.jibx.JibxMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue (  \" JibxMarshaller   does   not   support   Flights \"  ,    marshaller . supports ( Flights . class )  )  ;", "assertTrue (  \" JibxMarshaller   does   not   support   FlightType \"  ,    marshaller . supports ( FlightType . class )  )  ;", "assertFalse (  \" JibxMarshaller   supports   illegal   type \"  ,    marshaller . supports ( getClass (  )  )  )  ;", "}", "METHOD_END"], "methodName": ["supports"], "fileName": "org.springframework.oxm.jibx.JibxMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "Assume . assumeTrue ( System . getProperty (  \" version \"  )  . startsWith (  \"  1  .  8  .  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["compilerAssumptions"], "fileName": "org.springframework.oxm.jibx.JibxUnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "String   encoding    =     \" ISO -  8  8  5  9  -  1  \"  ;", "unmarshaller . setEncoding ( encoding )  ;", "StreamSource   source    =    new   StreamSource ( new   ByteArrayInputStream (  . INPUT _ STRING _ WITH _ SPECIAL _ CHARACTERS . getBytes ( encoding )  )  )  ;", "Object   flights    =    unmarshaller . unmarshal ( source )  ;", "testFlights ( flights )  ;", "FlightType   flight    =     (  ( Flights )     ( flights )  )  . getFlight (  0  )  ;", "assertEquals (  \" Airline   is   invalid \"  ,     \" Air   Libert \\ u 0  0 e 9  \"  ,    flight . getAirline (  )  )  ;", "}", "METHOD_END"], "methodName": ["unmarshalStreamSourceInputStreamUsingNonDefaultEncoding"], "fileName": "org.springframework.oxm.jibx.JibxUnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "DocumentBuilder   documentBuilder ;", "synchronized ( this . documentBuilderFactoryMonitor )     {", "if    (  ( this . documentBuilderFactory )     =  =    null )     {", "this . documentBuilderFactory    =    createDocumentBuilderFactory (  )  ;", "}", "documentBuilder    =    createDocumentBuilder ( this . documentBuilderFactory )  ;", "}", "return   documentBuilder . newDocument (  )  ;", "}    catch    ( ParserConfigurationException   ex )     {", "throw   new   UnmingFailureException (  (  \" Could   not   create   document   placeholder :     \"     +     ( ex . getMessage (  )  )  )  ,    ex )  ;", "}", "}", "METHOD_END"], "methodName": ["buildDocument"], "fileName": "org.springframework.oxm.support.AbstractMarshaller"}, {"methodBody": ["METHOD_START", "{", "DocumentBuilder   documentBuilder    =    factory . newDocumentBuilder (  )  ;", "if    (  !  ( isProcessExternalEntities (  )  )  )     {", "documentBuilder . setEntityResolver (  . NO _ OP _ ENTITY _ RESOLVER )  ;", "}", "return   documentBuilder ;", "}", "METHOD_END"], "methodName": ["createDocumentBuilder"], "fileName": "org.springframework.oxm.support.AbstractMarshaller"}, {"methodBody": ["METHOD_START", "{", "DocumentBuilderFactory   factory    =    DocumentBuilderFactory . newInstance (  )  ;", "factory . setValidating ( false )  ;", "factory . setNamespaceAware ( true )  ;", "factory . setFeature (  \" http :  /  / apache . org / xml / features / disallow - doctype - decl \"  ,     (  !  ( isSDtd (  )  )  )  )  ;", "factory . setFeature (  \" http :  /  / xml . org / sax / features / external - general - entities \"  ,    isProcessExternalEntities (  )  )  ;", "return   factory ;", "}", "METHOD_END"], "methodName": ["createDocumentBuilderFactory"], "fileName": "org.springframework.oxm.support.AbstractMarshaller"}, {"methodBody": ["METHOD_START", "{", "XMLReader   xmlReader    =    XMLReaderFactory . createXMLReader (  )  ;", "xmlReader . setFeature (  \" http :  /  / apache . org / xml / features / disallow - doctype - decl \"  ,     (  !  ( isSupportDtd (  )  )  )  )  ;", "xmlReader . setFeature (  \" http :  /  / xml . org / sax / features / external - general - entities \"  ,    isProcessExternalEntities (  )  )  ;", "if    (  !  ( isProcessExternalEntities (  )  )  )     {", "xmlReader . setEntityResolver (  . NO _ OP _ ENTITY _ RESOLVER )  ;", "}", "return   xmlReader ;", "}", "METHOD_END"], "methodName": ["createXmlReader"], "fileName": "org.springframework.oxm.support.AbstractMarshaller"}, {"methodBody": ["METHOD_START", "{", "return   null ;", "}", "METHOD_END"], "methodName": ["getDefaultEncoding"], "fileName": "org.springframework.oxm.support.AbstractMarshaller"}, {"methodBody": ["METHOD_START", "{", "return   this . processExternalEntities ;", "}", "METHOD_END"], "methodName": ["isProcessExternalEntities"], "fileName": "org.springframework.oxm.support.AbstractMarshaller"}, {"methodBody": ["METHOD_START", "{", "return   this . supportDtd ;", "}", "METHOD_END"], "methodName": ["isSupportDtd"], "fileName": "org.springframework.oxm.support.AbstractMarshaller"}, {"methodBody": ["METHOD_START", "{", "if    (  ( domResult . getNode (  )  )     =  =    null )     {", "domResult . setNode ( buildDocument (  )  )  ;", "}", "mDomNode ( graph ,    domResult . getNode (  )  )  ;", "}", "METHOD_END"], "methodName": ["marshalDomResult"], "fileName": "org.springframework.oxm.support.AbstractMarshaller"}, {"methodBody": ["METHOD_START", "{", "ContentHandler   contentHandler    =    saxResult . getHandler (  )  ;", "Assert . notNull ( contentHandler ,     \" ContentHandler   not   set   on   SAXResult \"  )  ;", "LexicalHandler   lexicalHandler    =    saxResult . getLexicalHandler (  )  ;", "mSaxHandlers ( graph ,    contentHandler ,    lexicalHandler )  ;", "}", "METHOD_END"], "methodName": ["marshalSaxResult"], "fileName": "org.springframework.oxm.support.AbstractMarshaller"}, {"methodBody": ["METHOD_START", "{", "XMLStreamWriter   streamWriter    =    StaxUtils . getXMLStreamWriter ( staxResult )  ;", "if    ( streamWriter    !  =    null )     {", "mXmlStreamWriter ( graph ,    streamWriter )  ;", "} else    {", "XMLEventWriter   eventWriter    =    StaxUtils . getXMLEventWriter ( staxResult )  ;", "if    ( eventWriter    !  =    null )     {", "mXmlEventWriter ( graph ,    eventWriter )  ;", "} else    {", "throw   new   IllegalArgumentException (  \" StaxResult   contains   neither   XMLStreamWriter   nor   XMLEventConsumer \"  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["marshalStaxResult"], "fileName": "org.springframework.oxm.support.AbstractMarshaller"}, {"methodBody": ["METHOD_START", "{", "if    (  ( streamResult . getOutputStream (  )  )     !  =    null )     {", "mOutputStream ( graph ,    streamResult . getOutputStream (  )  )  ;", "} else", "if    (  ( streamResult . getWriter (  )  )     !  =    null )     {", "mWriter ( graph ,    streamResult . getWriter (  )  )  ;", "} else    {", "throw   new   IllegalArgumentException (  \" StreamResult   contains   neither   OutputStream   nor   Writer \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["marshalStreamResult"], "fileName": "org.springframework.oxm.support.AbstractMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . processExternalEntities    =    processExternalEntities ;", "if    ( processExternalEntities )     {", "setSDtd ( true )  ;", "}", "}", "METHOD_END"], "methodName": ["setProcessExternalEntities"], "fileName": "org.springframework.oxm.support.AbstractMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . supportDtd    =    supportDtd ;", "}", "METHOD_END"], "methodName": ["setSupportDtd"], "fileName": "org.springframework.oxm.support.AbstractMarshaller"}, {"methodBody": ["METHOD_START", "{", "if    (  ( domSource . getNode (  )  )     =  =    null )     {", "domSource . setNode ( buildDocument (  )  )  ;", "}", "try    {", "return   unmarshalDomNode ( domSource . getNode (  )  )  ;", "}    catch    ( NullPointerException   ex )     {", "if    (  !  ( isSupportDtd (  )  )  )     {", "throw   new   UnmingFailureException (  (  \" NPE   while   unming .     \"     +     (  \" This   can   happen   on   JDK    1  .  6    due   to   the   presence   of   DTD    \"     +     \" declarations ,    which   are   disabled .  \"  )  )  ,    ex )  ;", "}", "throw   ex ;", "}", "}", "METHOD_END"], "methodName": ["unmarshalDomSource"], "fileName": "org.springframework.oxm.support.AbstractMarshaller"}, {"methodBody": ["METHOD_START", "{", "if    (  ( saxSource . getXMLReader (  )  )     =  =    null )     {", "try    {", "saxSource . setXMLReader ( createXmlReader (  )  )  ;", "}    catch    ( SAXException   ex )     {", "throw   new   UnmingFailureException (  \" Could   not   create   XMLReader   for   SAXSource \"  ,    ex )  ;", "}", "}", "if    (  ( saxSource . getInputSource (  )  )     =  =    null )     {", "saxSource . setInputSource ( new   InputSource (  )  )  ;", "}", "try    {", "return   unmarshalSaxReader ( saxSource . getXMLReader (  )  ,    saxSource . getInputSource (  )  )  ;", "}    catch    ( NullPointerException   ex )     {", "if    (  !  ( isSupportDtd (  )  )  )     {", "throw   new   UnmingFailureException (  (  \" NPE   while   unming .     \"     +     (  \" This   can   happen   on   JDK    1  .  6    due   to   the   presence   of   DTD    \"     +     \" declarations ,    which   are   disabled .  \"  )  )  )  ;", "}", "throw   ex ;", "}", "}", "METHOD_END"], "methodName": ["unmarshalSaxSource"], "fileName": "org.springframework.oxm.support.AbstractMarshaller"}, {"methodBody": ["METHOD_START", "{", "XMLStreamReader   streamReader    =    StaxUtils . getXMLStreamReader ( staxSource )  ;", "if    ( streamReader    !  =    null )     {", "return   unmXmlStreamReader ( streamReader )  ;", "} else    {", "XMLEventReader   eventReader    =    StaxUtils . getXMLEventReader ( staxSource )  ;", "if    ( eventReader    !  =    null )     {", "return   unmXmlEventReader ( eventReader )  ;", "} else    {", "throw   new   IllegalArgumentException (  \" StaxSource   contains   neither   XMLStreamReader   nor   XMLEventReader \"  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["unmarshalStaxSource"], "fileName": "org.springframework.oxm.support.AbstractMarshaller"}, {"methodBody": ["METHOD_START", "{", "if    (  ( streamSource . getInputStream (  )  )     !  =    null )     {", "if    (  ( isProcessExternalEntities (  )  )     &  &     ( isSDtd (  )  )  )     {", "return   unmarshalInputStream ( streamSource . getInputStream (  )  )  ;", "} else    {", "InputSource   inputSource    =    new   InputSource ( streamSource . getInputStream (  )  )  ;", "inputSource . setEncoding ( getDefaultEncoding (  )  )  ;", "return   unmarshalSaxSource ( new   SAXSource ( inputSource )  )  ;", "}", "} else", "if    (  ( streamSource . getReader (  )  )     !  =    null )     {", "if    (  ( isProcessExternalEntities (  )  )     &  &     ( isSDtd (  )  )  )     {", "return   unmarshalReader ( streamSource . getReader (  )  )  ;", "} else    {", "return   unmarshalSaxSource ( new   SAXSource ( new   InputSource ( streamSource . getReader (  )  )  )  )  ;", "}", "} else    {", "return   unmarshalSaxSource ( new   SAXSource ( new   InputSource ( streamSource . getSystemId (  )  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["unmarshalStreamSource"], "fileName": "org.springframework.oxm.support.AbstractMarshaller"}, {"methodBody": ["METHOD_START", "{", "return   this . content ;", "}", "METHOD_END"], "methodName": ["getContent"], "fileName": "org.springframework.oxm.support.MarshallingSource"}, {"methodBody": ["METHOD_START", "{", "return   this . marshaller ;", "}", "METHOD_END"], "methodName": ["getMarshaller"], "fileName": "org.springframework.oxm.support.MarshallingSource"}, {"methodBody": ["METHOD_START", "{", "InputSource   inputSource    =    new   InputSource ( resource . getInputStream (  )  )  ;", "inputSource . setSystemId (  . getSystemId ( resource )  )  ;", "return   inputSource ;", "}", "METHOD_END"], "methodName": ["createInputSource"], "fileName": "org.springframework.oxm.support.SaxResourceUtils"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   r . getURI (  )  . toString (  )  ;", "}    catch    ( IOException   ex )     {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["getSystemId"], "fileName": "org.springframework.oxm.support.SaxResourceUtils"}, {"methodBody": ["METHOD_START", "{", "return   flightNumber ;", "}", "METHOD_END"], "methodName": ["getFlightNumber"], "fileName": "org.springframework.oxm.xstream.Flight"}, {"methodBody": ["METHOD_START", "{", "this . flightNumber    =    number ;", "}", "METHOD_END"], "methodName": ["setFlightNumber"], "fileName": "org.springframework.oxm.xstream.Flight"}, {"methodBody": ["METHOD_START", "{", "return   flights ;", "}", "METHOD_END"], "methodName": ["getFlights"], "fileName": "org.springframework.oxm.xstream.Flights"}, {"methodBody": ["METHOD_START", "{", "return   strings ;", "}", "METHOD_END"], "methodName": ["getStrings"], "fileName": "org.springframework.oxm.xstream.Flights"}, {"methodBody": ["METHOD_START", "{", "this . flights    =    flights ;", "}", "METHOD_END"], "methodName": ["setFlights"], "fileName": "org.springframework.oxm.xstream.Flights"}, {"methodBody": ["METHOD_START", "{", "this . strings    =    strings ;", "}", "METHOD_END"], "methodName": ["setStrings"], "fileName": "org.springframework.oxm.xstream.Flights"}, {"methodBody": ["METHOD_START", "{", "XStream   xstream    =    constructXStream (  )  ;", "configureXStream ( xstream )  ;", "customizeXStream ( xstream )  ;", "return   xstream ;", "}", "METHOD_END"], "methodName": ["buildXStream"], "fileName": "org.springframework.oxm.xstream.XStreamMarshaller"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . converters )     !  =    null )     {", "for    ( int   i    =     0  ;    i    <     ( this . converters . length )  ;    i +  +  )     {", "if    (  ( this . converters [ i ]  )    instanceof   Converter )     {", "registerConverter (  (  ( Converter )     ( this . converters [ i ]  )  )  ,    i )  ;", "} else", "if    (  ( this . converters [ i ]  )    instanceof   com . thoughtworksconverters . SingleValueConverter )     {", "registerConverter (  (  ( com . thoughtworksconverters . SingleValueConverter )     ( this . converters [ i ]  )  )  ,    i )  ;", "} else    {", "throw   new   IllegalArgumentException (  (  (  \" Invalid   ConverterMatcher    [  \"     +     ( this . converters [ i ]  )  )     +     \"  ]  \"  )  )  ;", "}", "}", "}", "if    (  ( this . marshallingStrategy )     !  =    null )     {", "setMarshallingStrategy ( this . marshallingStrategy )  ;", "}", "if    (  ( this . mode )     !  =    null )     {", "setMode ( this . mode )  ;", "}", "try    {", "if    (  ( this . aliases )     !  =    null )     {", "Map < String ,    Class <  ?  >  >    classMap    =    toClassMap ( this . aliases )  ;", "classMap . forEach : alias )  ;", "}", "if    (  ( this . aliasesByType )     !  =    null )     {", "Map < String ,    Class <  ?  >  >    classMap    =    toClassMap ( this . aliasesByType )  ;", "classMap . forEach : aliasType )  ;", "}", "if    (  ( this . fieldAliases )     !  =    null )     {", "for    ( Map . Entry < String ,    String >    entry    :    this . fieldAliases . entrySet (  )  )     {", "String   alias    =    entry . getValue (  )  ;", "String   field    =    entry . getKey (  )  ;", "int   idx    =    field . lastIndexOf (  '  .  '  )  ;", "if    ( idx    !  =     (  -  1  )  )     {", "String   className    =    field . substring (  0  ,    idx )  ;", "Class <  ?  >    clazz    =    ClassUtils . forName ( className ,    this . beanClassLoader )  ;", "String   fieldName    =    field . substring (  ( idx    +     1  )  )  ;", "aliasField ( alias ,    clazz ,    fieldName )  ;", "} else    {", "throw   new   IllegalArgumentException (  (  (  \" Field   name    [  \"     +    field )     +     \"  ]    does   not   contain    '  .  '  \"  )  )  ;", "}", "}", "}", "}    catch    ( ClassNotFoundException   ex )     {", "throw   new   IllegalStateException (  \" Failed   to   load   specified   alias   class \"  ,    ex )  ;", "}", "if    (  ( this . useAttributeForTypes )     !  =    null )     {", "for    ( Class <  ?  >    type    :    this . useAttributeForTypes )     {", "useAttributeFor ( type )  ;", "}", "}", "if    (  ( this . useAttributeFor )     !  =    null )     {", "for    ( Map . Entry <  ?  ,     ?  >    entry    :    this . useAttributeFor . entrySet (  )  )     {", "if    (  ( entry . getKey (  )  )    instanceof   String )     {", "if    (  ( entry . getValue (  )  )    instanceof   Class )     {", "useAttributeFor (  (  ( String )     ( entry . getKey (  )  )  )  ,     (  ( Class <  ?  >  )     ( entry . getValue (  )  )  )  )  ;", "} else    {", "throw   new   IllegalArgumentException (  \"  ' useAttributesFor '    takes   Map < String ,    Class >    when   using   a   map   key   of   type   String \"  )  ;", "}", "} else", "if    (  ( entry . getKey (  )  )    instanceof   Class )     {", "Class <  ?  >    key    =     (  ( Class <  ?  >  )     ( entry . getKey (  )  )  )  ;", "if    (  ( entry . getValue (  )  )    instanceof   String )     {", "useAttributeFor ( key ,     (  ( String )     ( entry . getValue (  )  )  )  )  ;", "} else", "if    (  ( entry . getValue (  )  )    instanceof   List )     {", "@ SuppressWarnings (  \" unchecked \"  )", "List < Object >    listValue    =     (  ( List < Object >  )     ( entry . getValue (  )  )  )  ;", "for    ( Object   element    :    listValue )     {", "if    ( element   instanceof   String )     {", "useAttributeFor ( key ,     (  ( String )     ( element )  )  )  ;", "}", "}", "} else    {", "throw   new   IllegalArgumentException (  (  \"  ' useAttributesFor '    property   takes   either   Map < Class ,    String >     \"     +     \" or   Map < Class ,    List < String >  >    when   using   a   map   key   of   type   Class \"  )  )  ;", "}", "} else    {", "throw   new   IllegalArgumentException (  \"  ' useAttributesFor '    property   takes   either   a   map   key   of   type   String   or   Class \"  )  ;", "}", "}", "}", "if    (  ( this . implicitCollections )     !  =    null )     {", "this . implicitCollections . forEach (  (    key ,    fields )     -  >     {", "String [  ]    collectionFields    =    StringUtils . commaDelimitedListToStringArray ( fields )  ;", "for    ( String   collectionField    :    collectionFields )     {", "addImplicitCollection ( key ,    collectionField )  ;", "}", "}  )  ;", "}", "if    (  ( this . omittedFields )     !  =    null )     {", "this . omittedFields . forEach (  (    key ,    value )     -  >     {", "String [  ]    fields    =    StringUtils . commaDelimitedListToStringArray ( value )  ;", "for    ( String   field    :    fields )     {", "omitField ( key ,    field )  ;", "}", "}  )  ;", "}", "if    (  ( this . annotatedClasses )     !  =    null )     {", "processAnnotations ( this . annotatedClasses )  ;", "}", "if    ( this . autodetectAnnotations )     {", "autodetectAnnotations ( true )  ;", "}", "}", "METHOD_END"], "methodName": ["configureXStream"], "fileName": "org.springframework.oxm.xstream.XStreamMarshaller"}, {"methodBody": ["METHOD_START", "{", "return   new   XStream ( this . reflectionProvider ,    getDefaultDriver (  )  ,    new   ClassLoaderReference ( this . beanClassLoader )  ,    this . mapper ,    this . converterLookup ,    this . converterRegistry )     {", "@ Override", "protected   MapperWrapper   wrapMapper ( MapperWrapper   next )     {", "MapperWrapper   mapperToWrap    =    next ;", "if    (  ( mapperWrappers )     !  =    null )     {", "for    ( Class <  ?    extends   MapperWrapper >    mapperWrapper    :    mapperWrappers )     {", "Constructor <  ?    extends   MapperWrapper >    ctor ;", "try    {", "ctor    =    mapperWrapper . getConstructor (  . class )  ;", "}    catch    (    ex )     {", "try    {", "ctor    =    mapperWrapper . getConstructor (  . class )  ;", "}    catch    (    ex 2  )     {", "throw   new   IllegalStateException (  (  \" No   appropriate   MapperWrapper   constructor   found :     \"     +    mapperWrapper )  )  ;", "}", "}", "try    {", "mapperToWrap    =    ctor . newInstance ( mapperToWrap )  ;", "}    catch    (    ex )     {", "throw   new   IllegalStateException (  (  \" Failed   to   construct   MapperWrapper :     \"     +    mapperWrapper )  )  ;", "}", "}", "}", "return   mapperToWrap ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["constructXStream"], "fileName": "org.springframework.oxm.xstream.XStreamMarshaller"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( ex   instanceof   StreamException )     |  |     ( ex   instanceof   CannotResolveClassException )  )     |  |     ( ex   instanceof   ConversionException )  )     {", "if    ( marshalling )     {", "return   new   ingFailureException (  \" XStream   marshalling   exception \"  ,    ex )  ;", "} else    {", "return   new   UnmarshallingFailureException (  \" XStream   unmarshalling   exception \"  ,    ex )  ;", "}", "} else    {", "return   new   UncategorizedMappingException (  \" Unknown   XStream   exception \"  ,    ex )  ;", "}", "}", "METHOD_END"], "methodName": ["convertXStreamException"], "fileName": "org.springframework.oxm.xstream.XStreamMarshaller"}, {"methodBody": ["METHOD_START", "{", "try    {", "get (  )  . marshal ( graph ,    streamWriter ,    dataHolder )  ;", "}    catch    ( Exception   ex )     {", "throw   convertException ( ex ,    true )  ;", "}    finally    {", "try    {", "streamWriter . flush (  )  ;", "}    catch    ( Exception   ex )     {", "logger . debug (  \" Could   not   flush   HierarchicalStreamWriter \"  ,    ex )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["doMarshal"], "fileName": "org.springframework.oxm.xstream.XStreamMarshaller"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   get (  )  . unmarshal ( streamReader ,    null ,    dataHolder )  ;", "}    catch    ( Exception   ex )     {", "throw   convertException ( ex ,    false )  ;", "}", "}", "METHOD_END"], "methodName": ["doUnmarshal"], "fileName": "org.springframework.oxm.xstream.XStreamMarshaller"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . defaultDriver )     =  =    null )     {", "this . defaultDriver    =    new   XppDriver (  )  ;", "}", "return   this . defaultDriver ;", "}", "METHOD_END"], "methodName": ["getDefaultDriver"], "fileName": "org.springframework.oxm.xstream.XStreamMarshaller"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . xstream )     =  =    null )     {", "this . xstream    =    buildXStream (  )  ;", "}", "return   this . xstream ;", "}", "METHOD_END"], "methodName": ["getXStream"], "fileName": "org.springframework.oxm.xstream.XStreamMarshaller"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . streamDriver )     !  =    null )     {", "do ( graph ,    this . streamDriver . createWriter ( outputStream )  ,    dataHolder )  ;", "} else    {", "marshalWriter ( graph ,    new   OutputStreamWriter ( outputStream ,    this . encoding )  ,    dataHolder )  ;", "}", "}", "METHOD_END"], "methodName": ["marshalOutputStream"], "fileName": "org.springframework.oxm.xstream.XStreamMarshaller"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . streamDriver )     !  =    null )     {", "do ( graph ,    this . streamDriver . createWriter ( writer )  ,    dataHolder )  ;", "} else    {", "do ( graph ,    new   CompactWriter ( writer )  ,    dataHolder )  ;", "}", "}", "METHOD_END"], "methodName": ["marshalWriter"], "fileName": "org.springframework.oxm.xstream.XStreamMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . aliases    =    aliases ;", "}", "METHOD_END"], "methodName": ["setAliases"], "fileName": "org.springframework.oxm.xstream.XStreamMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . aliasesByType    =    aliasesByType ;", "}", "METHOD_END"], "methodName": ["setAliasesByType"], "fileName": "org.springframework.oxm.xstream.XStreamMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . annotatedClasses    =    annotatedClasses ;", "}", "METHOD_END"], "methodName": ["setAnnotatedClasses"], "fileName": "org.springframework.oxm.xstream.XStreamMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . autodetectAnnotations    =    autodetectAnnotations ;", "}", "METHOD_END"], "methodName": ["setAutodetectAnnotations"], "fileName": "org.springframework.oxm.xstream.XStreamMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . converterLookup    =    converterLookup ;", "if    ( converterLookup   instanceof   ConverterRegiy )     {", "this . converterRegiy    =     (  ( ConverterRegiy )     ( converterLookup )  )  ;", "}", "}", "METHOD_END"], "methodName": ["setConverterLookup"], "fileName": "org.springframework.oxm.xstream.XStreamMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . converterRegistry    =    converterRegistry ;", "}", "METHOD_END"], "methodName": ["setConverterRegistry"], "fileName": "org.springframework.oxm.xstream.XStreamMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . converters    =    converters ;", "}", "METHOD_END"], "methodName": ["setConverters"], "fileName": "org.springframework.oxm.xstream.XStreamMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . encoding    =    encoding ;", "}", "METHOD_END"], "methodName": ["setEncoding"], "fileName": "org.springframework.oxm.xstream.XStreamMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . fieldAliases    =    fieldAliases ;", "}", "METHOD_END"], "methodName": ["setFieldAliases"], "fileName": "org.springframework.oxm.xstream.XStreamMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . implicitCollections    =    implicitCollections ;", "}", "METHOD_END"], "methodName": ["setImplicitCollections"], "fileName": "org.springframework.oxm.xstream.XStreamMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . mapper    =    mapper ;", "}", "METHOD_END"], "methodName": ["setMapper"], "fileName": "org.springframework.oxm.xstream.XStreamMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . mapperWrappers    =    mapperWrappers ;", "}", "METHOD_END"], "methodName": ["setMapperWrappers"], "fileName": "org.springframework.oxm.xstream.XStreamMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . marshallingStrategy    =    marshallingStrategy ;", "}", "METHOD_END"], "methodName": ["setMarshallingStrategy"], "fileName": "org.springframework.oxm.xstream.XStreamMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . mode    =    mode ;", "}", "METHOD_END"], "methodName": ["setMode"], "fileName": "org.springframework.oxm.xstream.XStreamMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . nameCoder    =    nameCoder ;", "}", "METHOD_END"], "methodName": ["setNameCoder"], "fileName": "org.springframework.oxm.xstream.XStreamMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . omittedFields    =    omittedFields ;", "}", "METHOD_END"], "methodName": ["setOmittedFields"], "fileName": "org.springframework.oxm.xstream.XStreamMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . reflectionProvider    =    reflectionProvider ;", "}", "METHOD_END"], "methodName": ["setReflectionProvider"], "fileName": "org.springframework.oxm.xstream.XStreamMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . streamDriver    =    streamDriver ;", "this . defaultDriver    =    streamDriver ;", "}", "METHOD_END"], "methodName": ["setStreamDriver"], "fileName": "org.springframework.oxm.xstream.XStreamMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . supportedClasses    =    supportedClasses ;", "}", "METHOD_END"], "methodName": ["setSupportedClasses"], "fileName": "org.springframework.oxm.xstream.XStreamMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . useAttributeFor    =    useAttributeFor ;", "}", "METHOD_END"], "methodName": ["setUseAttributeFor"], "fileName": "org.springframework.oxm.xstream.XStreamMarshaller"}, {"methodBody": ["METHOD_START", "{", "this . useAttributeForTypes    =    useAttributeForTypes ;", "}", "METHOD_END"], "methodName": ["setUseAttributeForTypes"], "fileName": "org.springframework.oxm.xstream.XStreamMarshaller"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Class <  ?  >  >    result    =    new   LinkedHashMap <  >  ( map . size (  )  )  ;", "for    ( Map . Entry < String ,     ?  >    entry    :    map . entrySet (  )  )     {", "String   key    =    entry . getKey (  )  ;", "Object   value    =    entry . getValue (  )  ;", "Class <  ?  >    type ;", "if    ( value   instanceof   Class )     {", "type    =     (  ( Class <  ?  >  )     ( value )  )  ;", "} else", "if    ( value   instanceof   String )     {", "String   className    =     (  ( String )     ( value )  )  ;", "type    =    util . ClassUtils . forName ( className ,    this . beanClassLoader )  ;", "} else    {", "throw   new   IllegalArgumentException (  (  (  \" Unknown   value    [  \"     +    value )     +     \"  ]     -    expected   String   or   Class \"  )  )  ;", "}", "result . put ( key ,    type )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["toClassMap"], "fileName": "org.springframework.oxm.xstream.XStreamMarshaller"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . streamDriver )     !  =    null )     {", "return   doUnmarshal ( this . streamDriver . createReader ( inputStream )  ,    dataHolder )  ;", "} else    {", "return   unmarshalReader ( new   InputStreamReader ( inputStream ,    this . encoding )  ,    dataHolder )  ;", "}", "}", "METHOD_END"], "methodName": ["unmarshalInputStream"], "fileName": "org.springframework.oxm.xstream.XStreamMarshaller"}, {"methodBody": ["METHOD_START", "{", "return   doUnmarshal ( getDefaultDriver (  )  . createReader ( reader )  ,    dataHolder )  ;", "}", "METHOD_END"], "methodName": ["unmarshalReader"], "fileName": "org.springframework.oxm.xstream.XStreamMarshaller"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Class <  ?  >  >    aliases    =    new   HashMap <  >  (  )  ;", "aliases . put (  \" flight \"  ,    Flight . class )  ;", "FlightSubclass   flight    =    new   FlightSubclass (  )  ;", "flight . setFlightNumber (  4  2  )  ;", "marshaller . setAliasesByType ( aliases )  ;", "Writer   writer    =    new   StringWriter (  )  ;", "marshaller . marshal ( flight ,    new   StreamResult ( writer )  )  ;", "assertThat (  \" Marshaller   does   not   use   attributes \"  ,    writer . toString (  )  ,    isSimilarTo (  . EXPECTED _ STRING )  )  ;", "}", "METHOD_END"], "methodName": ["aliasesByTypeStringClassMap"], "fileName": "org.springframework.oxm.xstream.XStreamMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    aliases    =    new   HashMap <  >  (  )  ;", "aliases . put (  \" flight \"  ,    Flight . class . getName (  )  )  ;", "FlightSubclass   flight    =    new   FlightSubclass (  )  ;", "flight . setFlightNumber (  4  2  )  ;", "marshaller . setAliasesByType ( aliases )  ;", "Writer   writer    =    new   StringWriter (  )  ;", "marshaller . marshal ( flight ,    new   StreamResult ( writer )  )  ;", "assertThat (  \" Marshaller   does   not   use   attributes \"  ,    writer . toString (  )  ,    isSimilarTo (  . EXPECTED _ STRING )  )  ;", "}", "METHOD_END"], "methodName": ["aliasesByTypeStringStringMap"], "fileName": "org.springframework.oxm.xstream.XStreamMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "marshaller . setAnnotatedClasses ( Flight . class )  ;", "StringWriter   writer    =    new   StringWriter (  )  ;", "StreamResult   result    =    new   StreamResult ( writer )  ;", "Flight   flight    =    new   Flight (  )  ;", "flight . setFlightNumber (  4  2  )  ;", "marshaller . marshal ( flight ,    result )  ;", "String   expected    =     \"  < flight >  < number >  4  2  <  / number >  <  / flight >  \"  ;", "assertThat (  \"    writes   invalid   StreamResult \"  ,    writer . toString (  )  ,    isSimilarTo ( expected )  )  ;", "}", "METHOD_END"], "methodName": ["annotatedMarshalStreamResultWriter"], "fileName": "org.springframework.oxm.xstream.XStreamMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "Source   source    =    Input . fromString ( inXMLString )  . build (  )  ;", "Iterable < Node >    nodes    =    new   JAXPXPathEngine (  )  . selectNodes ( xPathExpression ,    source )  ;", "assertTrue (  (  \" Expecting   to   find   matches   for   Xpath    \"     +    xPathExpression )  ,     (  (  . count ( nodes )  )     >     0  )  )  ;", "}", "METHOD_END"], "methodName": ["assertXpathExists"], "fileName": "org.springframework.oxm.xstream.XStreamMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "Source   source    =    Input . fromString ( inXMLString )  . build (  )  ;", "Iterable < Node >    nodes    =    new   JAXPXPathEngine (  )  . selectNodes ( xPathExpression ,    source )  ;", "assertEquals (  (  \" Should   be   zero   matches   for   Xpath    \"     +    xPathExpression )  ,     0  ,     . count ( nodes )  )  ;", "}", "METHOD_END"], "methodName": ["assertXpathNotExists"], "fileName": "org.springframework.oxm.xstream.XStreamMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "marshaller . setConverters ( new   EncodedByteArrayConverter (  )  )  ;", "byte [  ]    buf    =    new   byte [  ]  {     1  ,     2     }  ;", "Writer   writer    =    new   StringWriter (  )  ;", "marshaller . marshal ( buf ,    new   StreamResult ( writer )  )  ;", "assertThat ( writer . toString (  )  ,    isSimilarTo (  \"  < byte - array > AQI =  <  / byte - array >  \"  )  )  ;", "Reader   reader    =    new   StringReader ( writer . toString (  )  )  ;", "byte [  ]    bufResult    =     (  ( byte [  ]  )     ( marshaller . unmarshal ( new   StreamSource ( reader )  )  )  )  ;", "assertTrue (  \" Invalid   result \"  ,    Arrays . equals ( buf ,    bufResult )  )  ;", "}", "METHOD_END"], "methodName": ["converters"], "fileName": "org.springframework.oxm.xstream.XStreamMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "assertNotNull ( nodes )  ;", "AtomicInteger   count    =    new   AtomicInteger (  )  ;", "nodes . forEach (  (    n )     -  >    count . incrementAndGet (  )  )  ;", "return   count . get (  )  ;", "}", "METHOD_END"], "methodName": ["count"], "fileName": "org.springframework.oxm.xstream.XStreamMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "marshaller    =    new   XStreamMarshaller (  )  ;", "Map < String ,    String >    aliases    =    new   HashMap <  >  (  )  ;", "aliases . put (  \" flight \"  ,    Flight . class . getName (  )  )  ;", "marshaller . setAliases ( aliases )  ;", "flight    =    new   Flight (  )  ;", "flight . setFlightNumber (  4  2 L )  ;", "}", "METHOD_END"], "methodName": ["createMarshaller"], "fileName": "org.springframework.oxm.xstream.XStreamMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "marshaller . setFieldAliases ( Collections . singletonMap (  \" flightNumber \"  ,     \" flightNo \"  )  )  ;", "Writer   writer    =    new   StringWriter (  )  ;", "marshaller . marshal ( flight ,    new   StreamResult ( writer )  )  ;", "String   expected    =     \"  < flight >  < flightNo >  4  2  <  / flightNo >  <  / flight >  \"  ;", "assertThat (  \" Marshaller   does   not   use   aliases \"  ,    writer . toString (  )  ,    isSimilarTo ( expected )  )  ;", "}", "METHOD_END"], "methodName": ["fieldAliases"], "fileName": "org.springframework.oxm.xstream.XStreamMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "Flights   flights    =    new   Flights (  )  ;", "flights . getFlights (  )  . add ( flight )  ;", "flights . getStrings (  )  . add (  \"  4  2  \"  )  ;", "Map < String ,    Class <  ?  >  >    aliases    =    new   HashMap <  >  (  )  ;", "aliases . put (  \" flight \"  ,    Flight . class )  ;", "aliases . put (  \" flights \"  ,    Flights . class )  ;", "marshaller . setAliases ( aliases )  ;", "Map   implicitCollections    =    Collections . singletonMap ( Flights . class ,     \" flights , strings \"  )  ;", "marshaller . setImplicitCollections ( implicitCollections )  ;", "Writer   writer    =    new   StringWriter (  )  ;", "marshaller . marshal ( flights ,    new   StreamResult ( writer )  )  ;", "String   result    =    writer . toString (  )  ;", ". assertXpathNotExists (  \"  / flights / flights \"  ,    result )  ;", ". assertXpathExists (  \"  / flights / flight \"  ,    result )  ;", ". assertXpathNotExists (  \"  / flights / strings \"  ,    result )  ;", ". assertXpathExists (  \"  / flights / string \"  ,    result )  ;", "}", "METHOD_END"], "methodName": ["implicitCollections"], "fileName": "org.springframework.oxm.xstream.XStreamMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "marshaller . setStreamDriver ( new   JettisonMappedXmlDriver (  )  )  ;", "Writer   writer    =    new   StringWriter (  )  ;", "marshaller . marshal ( flight ,    new   StreamResult ( writer )  )  ;", "assertEquals (  \" Invalid   result \"  ,     \"  {  \\  \" flight \\  \"  :  {  \\  \" flightNumber \\  \"  :  4  2  }  }  \"  ,    writer . toString (  )  )  ;", "Object   o    =    marshaller . unmarshal ( new   StreamSource ( new   StringReader ( writer . toString (  )  )  )  )  ;", "assertTrue (  \" Unmarshalled   object   is   not   Flights \"  ,     ( o   instanceof   Flight )  )  ;", "Flight   unflight    =     (  ( Flight )     ( o )  )  ;", "assertNotNull (  \" Flight   is   null \"  ,    unflight )  ;", "assertEquals (  \" Number   is   invalid \"  ,     4  2 L ,    unflight . getFlightNumber (  )  )  ;", "}", "METHOD_END"], "methodName": ["jettisonDriver"], "fileName": "org.springframework.oxm.xstream.XStreamMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "marshaller . setStreamDriver ( new   JsonHierarchicalStreamDriver (  )     {", "@ Override", "public   HierarchicalStreamWriter   createWriter ( Writer   writer )     {", "return   new   JsonWriter ( writer ,    JsonWriter . DROP _ ROOT _ MODE ,    new   JsonWriter . Format ( new   char [  0  ]  ,    new   char [  0  ]  ,     (  ( Format . SPACE _ AFTER _ LABEL )     |     ( Format . COMPACT _ EMPTY _ ELEMENT )  )  )  )  ;", "}", "}  )  ;", "Writer   writer    =    new   StringWriter (  )  ;", "marshaller . marshal ( flight ,    new   StreamResult ( writer )  )  ;", "assertEquals (  \" Invalid   result \"  ,     \"  {  \\  \" flightNumber \\  \"  :     4  2  }  \"  ,    writer . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["jsonDriver"], "fileName": "org.springframework.oxm.xstream.XStreamMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "DocumentBuilderFactory   documentBuilderFactory    =    DocumentBuilderFactory . newInstance (  )  ;", "DocumentBuilder   builder    =    documentBuilderFactory . newDocumentBuilder (  )  ;", "Document   document    =    builder . newDocument (  )  ;", "DOMResult   domResult    =    new   DOMResult ( document )  ;", "marshaller . marshal ( flight ,    domResult )  ;", "Document   expected    =    builder . newDocument (  )  ;", "Element   flightElement    =    expected . createElement (  \" flight \"  )  ;", "expected . appendChild ( flightElement )  ;", "Element   numberElement    =    expected . createElement (  \" flightNumber \"  )  ;", "flightElement . appendChild ( numberElement )  ;", "Text   text    =    expected . createTextNode (  \"  4  2  \"  )  ;", "numberElement . appendChild ( text )  ;", "assertThat (  \"    writes   invalid   DOMResult \"  ,    document ,    isSimilarTo ( expected )  )  ;", "}", "METHOD_END"], "methodName": ["marshalDOMResult"], "fileName": "org.springframework.oxm.xstream.XStreamMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "DocumentBuilderFactory   documentBuilderFactory    =    DocumentBuilderFactory . newInstance (  )  ;", "DocumentBuilder   builder    =    documentBuilderFactory . newDocumentBuilder (  )  ;", "Document   existent    =    builder . newDocument (  )  ;", "Element   rootElement    =    existent . createElement (  \" root \"  )  ;", "Element   flightsElement    =    existent . createElement (  \" flights \"  )  ;", "rootElement . appendChild ( flightsElement )  ;", "existent . appendChild ( rootElement )  ;", "DOMResult   domResult    =    new   DOMResult ( flightsElement )  ;", "marshaller . marshal ( flight ,    domResult )  ;", "Document   expected    =    builder . newDocument (  )  ;", "Element   eRootElement    =    expected . createElement (  \" root \"  )  ;", "Element   eFlightsElement    =    expected . createElement (  \" flights \"  )  ;", "Element   eFlightElement    =    expected . createElement (  \" flight \"  )  ;", "eRootElement . appendChild ( eFlightsElement )  ;", "eFlightsElement . appendChild ( eFlightElement )  ;", "expected . appendChild ( eRootElement )  ;", "Element   eNumberElement    =    expected . createElement (  \" flightNumber \"  )  ;", "eFlightElement . appendChild ( eNumberElement )  ;", "Text   text    =    expected . createTextNode (  \"  4  2  \"  )  ;", "eNumberElement . appendChild ( text )  ;", "assertThat (  \"    writes   invalid   DOMResult \"  ,    existent ,    isSimilarTo ( expected )  )  ;", "}", "METHOD_END"], "methodName": ["marshalDOMResultToExistentDocument"], "fileName": "org.springframework.oxm.xstream.XStreamMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "ContentHandler   contentHandler    =    mock ( ContentHandler . class )  ;", "SAXResult   result    =    new   SAXResult ( contentHandler )  ;", "m . marshal ( flight ,    result )  ;", "InOrder   ordered    =    inOrder ( contentHandler )  ;", "ordered . verify ( contentHandler )  . startDocument (  )  ;", "ordered . verify ( contentHandler )  . startElement ( eq (  \"  \"  )  ,    eq (  \" flight \"  )  ,    eq (  \" flight \"  )  ,    isA ( Attributes . class )  )  ;", "ordered . verify ( contentHandler )  . startElement ( eq (  \"  \"  )  ,    eq (  \" flightNumber \"  )  ,    eq (  \" flightNumber \"  )  ,    isA ( Attributes . class )  )  ;", "ordered . verify ( contentHandler )  . characters ( isA ( char [  ]  . class )  ,    eq (  0  )  ,    eq (  2  )  )  ;", "ordered . verify ( contentHandler )  . endElement (  \"  \"  ,     \" flightNumber \"  ,     \" flightNumber \"  )  ;", "ordered . verify ( contentHandler )  . endElement (  \"  \"  ,     \" flight \"  ,     \" flight \"  )  ;", "ordered . verify ( contentHandler )  . endDocument (  )  ;", "}", "METHOD_END"], "methodName": ["marshalSaxResult"], "fileName": "org.springframework.oxm.xstream.XStreamMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "XMLOutputFactory   outputFactory    =    XMLOutputFactory . newInstance (  )  ;", "StringWriter   writer    =    new   StringWriter (  )  ;", "XMLEventWriter   eventWriter    =    outputFactory . createXMLEventWriter ( writer )  ;", "Result   result    =    StaxUtils . createStaxResult ( eventWriter )  ;", "marshaller . marshal ( flight ,    result )  ;", "assertThat (  \" Marshaller   writes   invalid   StreamResult \"  ,    writer . toString (  )  ,    isSimilarTo (  . EXPECTED _ STRING )  )  ;", "}", "METHOD_END"], "methodName": ["marshalStaxResultXMLEventWriter"], "fileName": "org.springframework.oxm.xstream.XStreamMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "XMLOutputFactory   outputFactory    =    XMLOutputFactory . newInstance (  )  ;", "StringWriter   writer    =    new   StringWriter (  )  ;", "XMLStreamWriter   streamWriter    =    outputFactory . createXMLStreamWriter ( writer )  ;", "Result   result    =    StaxUtils . createStaxResult ( streamWriter )  ;", "marshaller . marshal ( flight ,    result )  ;", "assertThat (  \" Marshaller   writes   invalid   StreamResult \"  ,    writer . toString (  )  ,    isSimilarTo (  . EXPECTED _ STRING )  )  ;", "}", "METHOD_END"], "methodName": ["marshalStaxResultXMLStreamWriter"], "fileName": "org.springframework.oxm.xstream.XStreamMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "ByteArrayOutputStream   os    =    new   ByteArrayOutputStream (  )  ;", "StreamResult   result    =    new   StreamResult ( os )  ;", "marshaller . marshal ( flight ,    result )  ;", "String   s    =    new   String ( os . toByteArray (  )  ,     \" UTF -  8  \"  )  ;", "assertThat (  \" Marshaller   writes   invalid   StreamResult \"  ,    s ,    isSimilarTo (  . EXPECTED _ STRING )  )  ;", "}", "METHOD_END"], "methodName": ["marshalStreamResultOutputStream"], "fileName": "org.springframework.oxm.xstream.XStreamMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "StringWriter   writer    =    new   StringWriter (  )  ;", "StreamResult   result    =    new   StreamResult ( writer )  ;", "marshaller . marshal ( flight ,    result )  ;", "assertThat (  \" Marshaller   writes   invalid   StreamResult \"  ,    writer . toString (  )  ,    isSimilarTo (  . EXPECTED _ STRING )  )  ;", "}", "METHOD_END"], "methodName": ["marshalStreamResultWriter"], "fileName": "org.springframework.oxm.xstream.XStreamMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "Map   omittedFieldsMap    =    Collections . singletonMap ( Flight . class ,     \" flightNumber \"  )  ;", "marshaller . setOmittedFields ( omittedFieldsMap )  ;", "Writer   writer    =    new   StringWriter (  )  ;", "marshaller . marshal ( flight ,    new   StreamResult ( writer )  )  ;", ". assertXpathNotExists (  \"  / flight / flightNumber \"  ,    writer . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["omitFields"], "fileName": "org.springframework.oxm.xstream.XStreamMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "marshaller . setUseAttributeForTypes ( Long . TYPE )  ;", "Writer   writer    =    new   StringWriter (  )  ;", "marshaller . marshal ( flight ,    new   StreamResult ( writer )  )  ;", "String   expected    =     \"  < flight   flightNumber =  \\  \"  4  2  \\  \"     /  >  \"  ;", "assertThat (  \"    does   not   use   attributes \"  ,    writer . toString (  )  ,    isSimilarTo ( expected )  )  ;", "}", "METHOD_END"], "methodName": ["useAttributesFor"], "fileName": "org.springframework.oxm.xstream.XStreamMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "marshaller . setUseAttributeFor ( Collections . singletonMap ( Flight . class ,    Collections . singletonList (  \" flightNumber \"  )  )  )  ;", "Writer   writer    =    new   StringWriter (  )  ;", "marshaller . marshal ( flight ,    new   StreamResult ( writer )  )  ;", "String   expected    =     \"  < flight   flightNumber =  \\  \"  4  2  \\  \"     /  >  \"  ;", "assertThat (  \"    does   not   use   attributes \"  ,    writer . toString (  )  ,    isSimilarTo ( expected )  )  ;", "}", "METHOD_END"], "methodName": ["useAttributesForClassStringListMap"], "fileName": "org.springframework.oxm.xstream.XStreamMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "marshaller . setUseAttributeFor ( Collections . singletonMap ( Flight . class ,     \" flightNumber \"  )  )  ;", "Writer   writer    =    new   StringWriter (  )  ;", "marshaller . marshal ( flight ,    new   StreamResult ( writer )  )  ;", "String   expected    =     \"  < flight   flightNumber =  \\  \"  4  2  \\  \"     /  >  \"  ;", "assertThat (  \"    does   not   use   attributes \"  ,    writer . toString (  )  ,    isSimilarTo ( expected )  )  ;", "}", "METHOD_END"], "methodName": ["useAttributesForClassStringMap"], "fileName": "org.springframework.oxm.xstream.XStreamMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "marshaller . setUseAttributeFor ( Collections . singletonMap (  \" flightNumber \"  ,    Long . TYPE )  )  ;", "Writer   writer    =    new   StringWriter (  )  ;", "marshaller . marshal ( flight ,    new   StreamResult ( writer )  )  ;", "String   expected    =     \"  < flight   flightNumber =  \\  \"  4  2  \\  \"     /  >  \"  ;", "assertThat (  \"    does   not   use   attributes \"  ,    writer . toString (  )  ,    isSimilarTo ( expected )  )  ;", "}", "METHOD_END"], "methodName": ["useAttributesForStringClassMap"], "fileName": "org.springframework.oxm.xstream.XStreamMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "unmarshaller    =    new   XStreamMarshaller (  )  ;", "Map < String ,    Class <  ?  >  >    aliases    =    new   HashMap <  >  (  )  ;", "aliases . put (  \" flight \"  ,    Flight . class )  ;", "unmarshaller . setAliases ( aliases )  ;", "}", "METHOD_END"], "methodName": ["createUnmarshaller"], "fileName": "org.springframework.oxm.xstream.XStreamUnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "assertTrue (  \" Unmarshalled   object   is   not   Flights \"  ,     ( o   instanceof   Flight )  )  ;", "Flight   flight    =     (  ( Flight )     ( o )  )  ;", "assertNotNull (  \" Flight   is   null \"  ,    flight )  ;", "assertEquals (  \" Number   is   invalid \"  ,     4  2 L ,    flight . getFlightNumber (  )  )  ;", "}", "METHOD_END"], "methodName": ["testFlight"], "fileName": "org.springframework.oxm.xstream.XStreamUnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "DocumentBuilder   builder    =    DocumentBuilderFactory . newInstance (  )  . newDocumentBuilder (  )  ;", "Document   document    =    builder . parse ( new   InputSource ( new   StringReader (  . INPUT _ STRING )  )  )  ;", "DOMSource   source    =    new   DOMSource ( document )  ;", "Object   flight    =    unmarshaller . unmarshal ( source )  ;", "testFlight ( flight )  ;", "}", "METHOD_END"], "methodName": ["unmarshalDomSource"], "fileName": "org.springframework.oxm.xstream.XStreamUnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "XMLInputFactory   inputFactory    =    XMLInputFactory . newInstance (  )  ;", "XMLStreamReader   streamReader    =    inputFactory . createXMLStreamReader ( new   StringReader (  . INPUT _ STRING )  )  ;", "Source   source    =    StaxUtils . createStaxSource ( streamReader )  ;", "Object   flights    =    unmarshaller . unmarshal ( source )  ;", "testFlight ( flights )  ;", "}", "METHOD_END"], "methodName": ["unmarshalStaxSourceXmlStreamReader"], "fileName": "org.springframework.oxm.xstream.XStreamUnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "StreamSource   source    =    new   StreamSource ( new   ByteArrayInputStream ( XStreamUnmarshallerTests . INPUT _ STRING . getBytes (  \" UTF -  8  \"  )  )  )  ;", "Object   flights    =    unmarshaller . unmarshal ( source )  ;", "testFlight ( flights )  ;", "}", "METHOD_END"], "methodName": ["unmarshalStreamSourceInputStream"], "fileName": "org.springframework.oxm.xstream.XStreamUnmarshallerTests"}, {"methodBody": ["METHOD_START", "{", "StreamSource   source    =    new   StreamSource ( new   StringReader ( XStreamUnmarshallerTests . INPUT _ STRING )  )  ;", "Object   flights    =    unmarshaller . unmarshal ( source )  ;", "testFlight ( flights )  ;", "}", "METHOD_END"], "methodName": ["unmarshalStreamSourceReader"], "fileName": "org.springframework.oxm.xstream.XStreamUnmarshallerTests"}]