[{"methodBody": ["METHOD_START", "{", "Set < String >    stereotypes    =    new   LinkedHashSet <  >  (  )  ;", "this . stereotypesProviders . forEach (  (    p )     -  >    stereotypes . addAll ( p . getStereotypes ( element )  )  )  ;", "if    (  !  ( stereotypes . isEmpty (  )  )  )     {", "this . metadataCollector . add ( new   ItemMetadata ( this . typeHelper . getType ( element )  ,    stereotypes )  )  ;", "}", "}", "METHOD_END"], "methodName": ["addMetadataFor"], "fileName": "org.springframework.context.index.CandidateComponentsIndexer"}, {"methodBody": ["METHOD_START", "{", "List < StereotypesProvider >    result    =    new   ArrayList <  >  (  )  ;", "TypeHelper   typeHelper    =    new   TypeHelper ( env )  ;", "result . add ( new   dStereotypesProvider ( typeHelper )  )  ;", "result . add ( new   StandardStereotypesProvider ( typeHelper )  )  ;", "result . add ( new   PackageInfoStereotypesProvider (  )  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["getStereotypesProviders"], "fileName": "org.springframework.context.index.CandidateComponentsIndexer"}, {"methodBody": ["METHOD_START", "{", "addMetadataFor ( element )  ;", ". staticTypesIn ( element . getEnclosedElements (  )  )  . forEach ( this :  : processElement )  ;", "}", "METHOD_END"], "methodName": ["processElement"], "fileName": "org.springframework.context.index.CandidateComponentsIndexer"}, {"methodBody": ["METHOD_START", "{", "List < TypeElement >    list    =    new   ArrayList <  >  (  )  ;", "for    ( Element   e    :    elements )     {", "if    (  (  . TYPE _ KINDS . contains ( e . getKind (  )  )  )     &  &     ( e . getModifiers (  )  . contains ( Modifier . STATIC )  )  )", "list . add ( TypeElement . class . cast ( e )  )  ;", "}", "return   list ;", "}", "METHOD_END"], "methodName": ["staticTypesIn"], "fileName": "org.springframework.context.index.CandidateComponentsIndexer"}, {"methodBody": ["METHOD_START", "{", "CandidateComponentsMetadata   metadata    =    this . metadataCollector . getMetadata (  )  ;", "if    (  !  ( metadata . getItems (  )  . isEmpty (  )  )  )     {", "try    {", "this . metadataStore . writeMetadata ( metadata )  ;", "}    catch    ( IOException   ex )     {", "throw   new   IllegalStateException (  \" Failed   to   write   metadata \"  ,    ex )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["writeMetaData"], "fileName": "org.springframework.context.index.CandidateComponentsIndexer"}, {"methodBody": ["METHOD_START", "{", "testSingleComponent ( SampleManagedBean . class ,    ManagedBean . class )  ;", "}", "METHOD_END"], "methodName": ["cdiManagedBean"], "fileName": "org.springframework.context.index.CandidateComponentsIndexerTests"}, {"methodBody": ["METHOD_START", "{", "testSingleComponent ( SampleNamed . class ,    Named . class )  ;", "}", "METHOD_END"], "methodName": ["cdiNamed"], "fileName": "org.springframework.context.index.CandidateComponentsIndexerTests"}, {"methodBody": ["METHOD_START", "{", "CandidateComponentsIndexer   processor    =    new   CandidateComponentsIndexer (  )  ;", "this . compiler . getTask ( types )  . call ( processor )  ;", "return   readGeneratedMetadata ( this . compiler . getOutputLocation (  )  )  ;", "}", "METHOD_END"], "methodName": ["compile"], "fileName": "org.springframework.context.index.CandidateComponentsIndexerTests"}, {"methodBody": ["METHOD_START", "{", "CandidateComponentsIndexer   processor    =    new   CandidateComponentsIndexer (  )  ;", "this . compiler . getTask ( types )  . call ( processor )  ;", "return   readGeneratedMetadata ( this . compiler . getOutputLocation (  )  )  ;", "}", "METHOD_END"], "methodName": ["compile"], "fileName": "org.springframework.context.index.CandidateComponentsIndexerTests"}, {"methodBody": ["METHOD_START", "{", "this . compiler    =    new   TestCompiler ( this . temporaryFolder )  ;", "}", "METHOD_END"], "methodName": ["createCompiler"], "fileName": "org.springframework.context.index.CandidateComponentsIndexerTests"}, {"methodBody": ["METHOD_START", "{", "String   nestedType    =     \" Another $ AnotherPublicCandidate \"  ;", "Class <  ?  >    type    =    ClassUtils . forName ( nestedType ,    getClass (  )  . getClassLoader (  )  )  ;", "assertThat ( type ,    sameInstance ( SampleEmbedded . Another . AnotherPublicCandidate . class )  )  ;", "CandidateComponentsMetadata   metadata    =    compile ( SampleEmbedded . class )  ;", "assertThat ( metadata ,    Metadata . hasComponent ( SampleEmbedded . PublicCandidate . class ,    Component . class )  )  ;", "assertThat ( metadata ,    Metadata . hasComponent ( nestedType ,    Component . class . getName (  )  )  )  ;", "assertThat ( metadata . getItems (  )  ,    hasSize (  2  )  )  ;", "}", "METHOD_END"], "methodName": ["embeddedCandidatesAreDetected"], "fileName": "org.springframework.context.index.CandidateComponentsIndexerTests"}, {"methodBody": ["METHOD_START", "{", "CandidateComponentsMetadata   metadata    =    compile ( SampleNonStaticEmbedded . class )  ;", "assertThat ( metadata . getItems (  )  ,    hasSize (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["embeddedNonStaticCandidateAreIgnored"], "fileName": "org.springframework.context.index.CandidateComponentsIndexerTests"}, {"methodBody": ["METHOD_START", "{", "CandidateComponentsMetadata   metadata    =    compile ( CandidateComponentsIndexerTests . class )  ;", "assertThat ( metadata . getItems (  )  ,    hasSize (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["noAnnotation"], "fileName": "org.springframework.context.index.CandidateComponentsIndexerTests"}, {"methodBody": ["METHOD_START", "{", "CandidateComponentsMetadata   metadata    =    compile ( SampleNone . class )  ;", "assertThat ( metadata . getItems (  )  ,    hasSize (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["noCandidate"], "fileName": "org.springframework.context.index.CandidateComponentsIndexerTests"}, {"methodBody": ["METHOD_START", "{", "CandidateComponentsMetadata   metadata    =    compile (  \" sample / jpa / package - info \"  )  ;", "assertThat ( metadata ,    Metadata . hasComponent (  \" sample . jpa \"  ,     \" package - info \"  )  )  ;", "}", "METHOD_END"], "methodName": ["packageInfo"], "fileName": "org.springframework.context.index.CandidateComponentsIndexerTests"}, {"methodBody": ["METHOD_START", "{", "testSingleComponent ( SampleConverter . class ,    Converter . class )  ;", "}", "METHOD_END"], "methodName": ["persistenceConverter"], "fileName": "org.springframework.context.index.CandidateComponentsIndexerTests"}, {"methodBody": ["METHOD_START", "{", "testSingleComponent ( SampleEmbeddable . class ,    Embeddable . class )  ;", "}", "METHOD_END"], "methodName": ["persistenceEmbeddable"], "fileName": "org.springframework.context.index.CandidateComponentsIndexerTests"}, {"methodBody": ["METHOD_START", "{", "testSingleComponent ( SampleEntity . class ,    Entity . class )  ;", "}", "METHOD_END"], "methodName": ["persistenceEntity"], "fileName": "org.springframework.context.index.CandidateComponentsIndexerTests"}, {"methodBody": ["METHOD_START", "{", "testSingleComponent ( SampleMappedSuperClass . class ,    MappedSuperclass . class )  ;", "}", "METHOD_END"], "methodName": ["persistenceMappedSuperClass"], "fileName": "org.springframework.context.index.CandidateComponentsIndexerTests"}, {"methodBody": ["METHOD_START", "{", "try    {", "File   metadataFile    =    new   File ( outputLocation ,    MetadataStore . METADATA _ PATH )  ;", "if    ( metadataFile . isFile (  )  )     {", "return   PropertiesMarshaller . read ( new   FileInputStream ( metadataFile )  )  ;", "} else    {", "return   new   Metadata (  )  ;", "}", "}    catch    ( IOException   ex )     {", "throw   new   IllegalStateException (  \" Failed   to   read   metadata   from   disk \"  ,    ex )  ;", "}", "}", "METHOD_END"], "methodName": ["readGeneratedMetadata"], "fileName": "org.springframework.context.index.CandidateComponentsIndexerTests"}, {"methodBody": ["METHOD_START", "{", "testComponent ( SampleComponent . class )  ;", "}", "METHOD_END"], "methodName": ["stereotypeComponent"], "fileName": "org.springframework.context.index.CandidateComponentsIndexerTests"}, {"methodBody": ["METHOD_START", "{", "testComponent ( SampleController . class )  ;", "}", "METHOD_END"], "methodName": ["stereotypeController"], "fileName": "org.springframework.context.index.CandidateComponentsIndexerTests"}, {"methodBody": ["METHOD_START", "{", "testComponent ( SampleMetaController . class )  ;", "}", "METHOD_END"], "methodName": ["stereotypeControllerMetaAnnotation"], "fileName": "org.springframework.context.index.CandidateComponentsIndexerTests"}, {"methodBody": ["METHOD_START", "{", "testSingleComponent ( SampleMetaIndexedController . class ,    Component . class ,    MetaControllerIndexed . class )  ;", "}", "METHOD_END"], "methodName": ["stereotypeControllerMetaIndex"], "fileName": "org.springframework.context.index.CandidateComponentsIndexerTests"}, {"methodBody": ["METHOD_START", "{", "testComponent ( AbstractController . class )  ;", "}", "METHOD_END"], "methodName": ["stereotypeOnAbstractClass"], "fileName": "org.springframework.context.index.CandidateComponentsIndexerTests"}, {"methodBody": ["METHOD_START", "{", "testSingleComponent ( SampleRepository . class ,    Component . class )  ;", "}", "METHOD_END"], "methodName": ["stereotypeRepository"], "fileName": "org.springframework.context.index.CandidateComponentsIndexerTests"}, {"methodBody": ["METHOD_START", "{", "testComponent ( SampleService . class )  ;", "}", "METHOD_END"], "methodName": ["stereotypeService"], "fileName": "org.springframework.context.index.CandidateComponentsIndexerTests"}, {"methodBody": ["METHOD_START", "{", "CandidateComponentsMetadata   metadata    =    compile ( classes )  ;", "for    ( Class <  ?  >    c    :    classes )     {", "assertThat ( metadata ,    Metadata . hasComponent ( c ,    Component . class )  )  ;", "}", "assertThat ( metadata . getItems (  )  ,    hasSize ( classes . length )  )  ;", "}", "METHOD_END"], "methodName": ["testComponent"], "fileName": "org.springframework.context.index.CandidateComponentsIndexerTests"}, {"methodBody": ["METHOD_START", "{", "CandidateComponentsMetadata   metadata    =    compile ( target )  ;", "assertThat ( metadata ,    Metadata . hasComponent ( target ,    stereotypes )  )  ;", "assertThat ( metadata . getItems (  )  ,    hasSize (  1  )  )  ;", "}", "METHOD_END"], "methodName": ["testSingleComponent"], "fileName": "org.springframework.context.index.CandidateComponentsIndexerTests"}, {"methodBody": ["METHOD_START", "{", "testSingleComponent ( SampleRepo . class ,    Repo . class )  ;", "}", "METHOD_END"], "methodName": ["typeStereotypeFromInterfaceFromSuperClass"], "fileName": "org.springframework.context.index.CandidateComponentsIndexerTests"}, {"methodBody": ["METHOD_START", "{", "testSingleComponent ( SampleSpecializedRepo . class ,    Repo . class )  ;", "}", "METHOD_END"], "methodName": ["typeStereotypeFromMetaInterface"], "fileName": "org.springframework.context.index.CandidateComponentsIndexerTests"}, {"methodBody": ["METHOD_START", "{", "testSingleComponent ( SampleSmartRepo . class ,    Repo . class ,    SmartRepo . class )  ;", "}", "METHOD_END"], "methodName": ["typeStereotypeFromSeveralInterfaces"], "fileName": "org.springframework.context.index.CandidateComponentsIndexerTests"}, {"methodBody": ["METHOD_START", "{", "testSingleComponent ( Repo . class ,    Repo . class )  ;", "}", "METHOD_END"], "methodName": ["typeStereotypeOnIndexedInterface"], "fileName": "org.springframework.context.index.CandidateComponentsIndexerTests"}, {"methodBody": ["METHOD_START", "{", "testSingleComponent ( SpecializedRepo . class ,    Repo . class )  ;", "}", "METHOD_END"], "methodName": ["typeStereotypeOnInterface"], "fileName": "org.springframework.context.index.CandidateComponentsIndexerTests"}, {"methodBody": ["METHOD_START", "{", "testSingleComponent ( SmartRepo . class ,    Repo . class ,    SmartRepo . class )  ;", "}", "METHOD_END"], "methodName": ["typeStereotypeOnInterfaceFromSeveralInterfaces"], "fileName": "org.springframework.context.index.CandidateComponentsIndexerTests"}, {"methodBody": ["METHOD_START", "{", "this . items . add ( item )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.springframework.context.index.CandidateComponentsMetadata"}, {"methodBody": ["METHOD_START", "{", "return   Collections . unmodifiableList ( this . items )  ;", "}", "METHOD_END"], "methodName": ["getItems"], "fileName": "org.springframework.context.index.CandidateComponentsMetadata"}, {"methodBody": ["METHOD_START", "{", "if    ( isIndexedAnnotation ( annotation )  )     {", "s . add ( this . typeHelper . getType ( element )  )  ;", "}", "return   getCandidateAnnotationElement ( seen ,    annotation )  ;", "}", "METHOD_END"], "methodName": ["collectStereotypes"], "fileName": "org.springframework.context.index.IndexedStereotypesProvider"}, {"methodBody": ["METHOD_START", "{", "for    ( AnnotationMirror   annotation    :    this . typeHelper . getAllAnnotationMirrors ( element )  )     {", "Element   next    =    collect ( seen ,    stereotypes ,    element ,    annotation )  ;", "if    ( next    !  =    null )     {", "collectOnAnnotations ( seen ,    stereotypes ,    next )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["collectStereotypesOnAnnotations"], "fileName": "org.springframework.context.index.IndexedStereotypesProvider"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( seen . contains ( type )  )  )     {", "seen . add ( type )  ;", "if    ( isAnnotatedWithIndexed ( type )  )     {", "stereotypes . add ( this . typeHelper . getType ( type )  )  ;", "}", "Element   superClass    =    this . typeHelper . getSuperClass ( type )  ;", "if    ( superClass    !  =    null )     {", "collectOnTypes ( seen ,    stereotypes ,    superClass )  ;", "}", "this . typeHelper . getDirectInterfaces ( type )  . forEach (  (    i )     -  >    collectOnTypes ( seen ,    stereotypes ,    i )  )  ;", "}", "}", "METHOD_END"], "methodName": ["collectStereotypesOnTypes"], "fileName": "org.springframework.context.index.IndexedStereotypesProvider"}, {"methodBody": ["METHOD_START", "{", "Element   element    =    annotation . getAnnotationType (  )  . asElement (  )  ;", "if    ( seen . contains ( element )  )     {", "return   null ;", "}", "if    (  !  ( isAnnotation ( annotation )  )  )     {", "seen . add ( element )  ;", "}", "return    !  ( element . toString (  )  . startsWith (  \" lang \"  )  )     ?    element    :    null ;", "}", "METHOD_END"], "methodName": ["getCandidateAnnotationElement"], "fileName": "org.springframework.context.index.IndexedStereotypesProvider"}, {"methodBody": ["METHOD_START", "{", "for    ( AnnotationMirror   annotation    :    type . getAnnotationMirrors (  )  )     {", "if    ( isAnnotation ( annotation )  )     {", "return   true ;", "}", "}", "return   false ;", "}", "METHOD_END"], "methodName": ["isAnnotatedWithIndexed"], "fileName": "org.springframework.context.index.IndexedStereotypesProvider"}, {"methodBody": ["METHOD_START", "{", "return   IndexedStereotypesProvider . INDEXED _ ANNOTATION . equals ( annotation . getAnnotationType (  )  . toString (  )  )  ;", "}", "METHOD_END"], "methodName": ["isIndexedAnnotation"], "fileName": "org.springframework.context.index.IndexedStereotypesProvider"}, {"methodBody": ["METHOD_START", "{", "return   this . stereotypes ;", "}", "METHOD_END"], "methodName": ["getStereotypes"], "fileName": "org.springframework.context.index.ItemMetadata"}, {"methodBody": ["METHOD_START", "{", "return   this . type ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.springframework.context.index.ItemMetadata"}, {"methodBody": ["METHOD_START", "{", "return   new   Metadata . ItemMetadataMatcher ( type . getName (  )  ,    stereotypes )  ;", "}", "METHOD_END"], "methodName": ["hasComponent"], "fileName": "org.springframework.context.index.Metadata"}, {"methodBody": ["METHOD_START", "{", "return   new   Metadata . ItemMetadataMatcher ( type ,    stereotypes )  ;", "}", "METHOD_END"], "methodName": ["hasComponent"], "fileName": "org.springframework.context.index.Metadata"}, {"methodBody": ["METHOD_START", "{", "this . metadataItems . add ( metadata )  ;", "}", "METHOD_END"], "methodName": ["add"], "fileName": "org.springframework.context.index.MetadataCollector"}, {"methodBody": ["METHOD_START", "{", "return    ( this . processingEnvironment . getElementUtils (  )  . getTypeElement ( sourceType )  )     =  =    null ;", "}", "METHOD_END"], "methodName": ["deletedInCurrentBuild"], "fileName": "org.springframework.context.index.MetadataCollector"}, {"methodBody": ["METHOD_START", "{", "CandidateComponentsMetadata   metadata    =    new   CandidateComponentsMetadata (  )  ;", "for    ( ItemMetadata   item    :    this . metadataItems )     {", "metadata . add ( item )  ;", "}", "if    (  ( this . previousMetadata )     !  =    null )     {", "List < ItemMetadata >    items    =    this . previousMetadata . getItems (  )  ;", "for    ( ItemMetadata   item    :    items )     {", "if    ( shouldBeMerged ( item )  )     {", "metadata . add ( item )  ;", "}", "}", "}", "return   metadata ;", "}", "METHOD_END"], "methodName": ["getMetadata"], "fileName": "org.springframework.context.index.MetadataCollector"}, {"methodBody": ["METHOD_START", "{", "if    ( element   instanceof   TypeElement )     {", "this . processedSourceTypes . add ( this . typeHelper . getType ( element )  )  ;", "}", "}", "METHOD_END"], "methodName": ["markAsProcessed"], "fileName": "org.springframework.context.index.MetadataCollector"}, {"methodBody": ["METHOD_START", "{", "return   this . processedSourceTypes . contains ( sourceType )  ;", "}", "METHOD_END"], "methodName": ["processedInCurrentBuild"], "fileName": "org.springframework.context.index.MetadataCollector"}, {"methodBody": ["METHOD_START", "{", "for    ( Element   element    :    roundEnv . getRootElements (  )  )     {", "markAsProcessed ( element )  ;", "}", "}", "METHOD_END"], "methodName": ["processing"], "fileName": "org.springframework.context.index.MetadataCollector"}, {"methodBody": ["METHOD_START", "{", "String   sourceType    =    itemMetadata . getType (  )  ;", "return    (  ( sourceType    !  =    null )     &  &     (  !  ( deletedInCurrentBuild ( sourceType )  )  )  )     &  &     (  !  ( processedInCurrentBuild ( sourceType )  )  )  ;", "}", "METHOD_END"], "methodName": ["shouldBeMerged"], "fileName": "org.springframework.context.index.MetadataCollector"}, {"methodBody": ["METHOD_START", "{", "return   this . environment . getFiler (  )  . createResource ( StandardLocation . CLASS _ OUTPUT ,     \"  \"  ,    MetadataStore . METADATA _ PATH )  ;", "}", "METHOD_END"], "methodName": ["createMetadataResource"], "fileName": "org.springframework.context.index.MetadataStore"}, {"methodBody": ["METHOD_START", "{", "return   this . environment . getFiler (  )  . getResource ( StandardLocation . CLASS _ OUTPUT ,     \"  \"  ,    MetadataStore . METADATA _ PATH )  ;", "}", "METHOD_END"], "methodName": ["getMetadataResource"], "fileName": "org.springframework.context.index.MetadataStore"}, {"methodBody": ["METHOD_START", "{", "try    {", "return   read ( getResource (  )  . openInputStream (  )  )  ;", "}    catch    ( IOException   ex )     {", "return   null ;", "}", "}", "METHOD_END"], "methodName": ["readMetadata"], "fileName": "org.springframework.context.index.MetadataStore"}, {"methodBody": ["METHOD_START", "{", "try    {", "turn   PropertiesMarshaller . ad ( in )  ;", "}    finally    {", "in . close (  )  ;", "}", "}", "METHOD_END"], "methodName": ["readMetadata"], "fileName": "org.springframework.context.index.MetadataStore"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( metadata . getItems (  )  . isEmpty (  )  )  )     {", "try    ( OutputStream   outputStream    =    createResource (  )  . openOutputStream (  )  )     {", "PropertiesMarshaller . write ( metadata ,    outputStream )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["writeMetadata"], "fileName": "org.springframework.context.index.MetadataStore"}, {"methodBody": ["METHOD_START", "{", "CandidateComponentsMetadata   result    =    new   CandidateComponentsMetadata (  )  ;", "props    =    new    (  )  ;", "props . load ( in )  ;", "props . forEach (  (    type ,    value )     -  >     {", "Set < String >    candidates    =    new   HashSet <  >  ( Arrays . asList (  (  ( String )     ( value )  )  . split (  \"  ,  \"  )  )  )  ;", "result . add ( new   ItemMetadata (  (  ( String )     ( type )  )  ,    candidates )  )  ;", "}  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["read"], "fileName": "org.springframework.context.index.PropertiesMarshaller"}, {"methodBody": ["METHOD_START", "{", "Properties   props    =    new   Properties (  )  ;", "metadata . getItems (  )  . forEach (  (    m )     -  >    props . put ( m . getType (  )  ,    String . join (  \"  ,  \"  ,    m . getStereotypes (  )  )  )  )  ;", "props . store ( out ,     \"  \"  )  ;", "}", "METHOD_END"], "methodName": ["write"], "fileName": "org.springframework.context.index.PropertiesMarshaller"}, {"methodBody": ["METHOD_START", "{", "return   new   ItemMetadata ( type ,    new   HashSet <  >  ( Arrays . asList ( stereotypes )  )  )  ;", "}", "METHOD_END"], "methodName": ["createItem"], "fileName": "org.springframework.context.index.PropertiesMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "CandidateComponentsMetadata   metadata    =    new   CandidateComponentsMetadata (  )  ;", "metadata . add (  . createItem (  \" com . foo \"  ,     \" first \"  ,     \" second \"  )  )  ;", "metadata . add (  . createItem (  \" com . bar \"  ,     \" first \"  )  )  ;", "ByteArrayOutputStream   outputStream    =    new   ByteArrayOutputStream (  )  ;", "PropertiesMarshaller . write ( metadata ,    outputStream )  ;", "CandidateComponentsMetadata   readMetadata    =    PropertiesMarshaller . read ( new   ByteArrayInputStream ( outputStream . toByteArray (  )  )  )  ;", "assertThat ( readMetadata ,    Metadata . hasComponent (  \" com . foo \"  ,     \" first \"  ,     \" second \"  )  )  ;", "assertThat ( readMetadata ,    Metadata . hasComponent (  \" com . bar \"  ,     \" first \"  )  )  ;", "assertThat ( readMetadata . getItems (  )  ,    hasSize (  2  )  )  ;", "}", "METHOD_END"], "methodName": ["readWrite"], "fileName": "org.springframework.context.index.PropertiesMarshallerTests"}, {"methodBody": ["METHOD_START", "{", "return   this . env . getElementUtils (  )  . getAllAnnotationMirrors ( e )  ;", "}", "METHOD_END"], "methodName": ["getAllAnnotationMirrors"], "fileName": "org.springframework.context.index.TypeHelper"}, {"methodBody": ["METHOD_START", "{", "List <  ?    extends   TypeMirror >    superTypes    =    this . types . directSupertypes ( element . asType (  )  )  ;", "List < Element >    directInterfaces    =    new   ArrayList <  >  (  )  ;", "if    (  ( superTypes . size (  )  )     >     1  )     {", "for    ( int   i    =     1  ;    i    <     ( superTypes . size (  )  )  ;    i +  +  )     {", "Element   e    =    this . types . asElement ( superTypes . get ( i )  )  ;", "if    ( e    !  =    null )     {", "directInterfaces . add ( e )  ;", "}", "}", "}", "return   directInterfaces ;", "}", "METHOD_END"], "methodName": ["getDirectInterfaces"], "fileName": "org.springframework.context.index.TypeHelper"}, {"methodBody": ["METHOD_START", "{", "if    ( element   instanceof   QualifiedNameable )     {", "return    (  ( QualifiedNameable )     ( element )  )  . getQualifiedName (  )  . toSt (  )  ;", "}", "return   element . toSt (  )  ;", "}", "METHOD_END"], "methodName": ["getQualifiedName"], "fileName": "org.springframework.context.index.TypeHelper"}, {"methodBody": ["METHOD_START", "{", "List <  ?    extends   TypeMirror >    superTypes    =    this . types . directSupertypes ( element . asType (  )  )  ;", "if    ( superTypes . isEmpty (  )  )     {", "return   null ;", "}", "return   this . types . asElement ( superTypes . get (  0  )  )  ;", "}", "METHOD_END"], "methodName": ["getSuperClass"], "fileName": "org.springframework.context.index.TypeHelper"}, {"methodBody": ["METHOD_START", "{", "return   getType (  ( annotation    !  =    null    ?    annotation . getAnnotationType (  )     :    null )  )  ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.springframework.context.index.TypeHelper"}, {"methodBody": ["METHOD_START", "{", "return   getType (  ( element    !  =    null    ?    element . asType (  )     :    null )  )  ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.springframework.context.index.TypeHelper"}, {"methodBody": ["METHOD_START", "{", "if    ( type    =  =    null )     {", "return   null ;", "}", "if    ( type   instanceof   Declared )     {", "Declared   declared    =     (  ( Declared )     ( type )  )  ;", "Element   enclosingElement    =    declared . asElement (  )  . getEnclosingElement (  )  ;", "if    (  ( enclosingElement    !  =    null )     &  &     ( enclosingElement   instanceof   Element )  )     {", "return    (  ( getQualifiedName ( enclosingElement )  )     +     \"  $  \"  )     +     ( declared . asElement (  )  . getSimpleName (  )  . toString (  )  )  ;", "} else    {", "return   getQualifiedName ( declared . asElement (  )  )  ;", "}", "}", "return   type . toString (  )  ;", "}", "METHOD_END"], "methodName": ["getType"], "fileName": "org.springframework.context.index.TypeHelper"}, {"methodBody": ["METHOD_START", "{", "return   new   File ( getSourceFolder (  )  ,    TestCompiler . sourcePathFor ( type )  )  ;", "}", "METHOD_END"], "methodName": ["getFile"], "fileName": "org.springframework.context.index.test.TestCompiler"}, {"methodBody": ["METHOD_START", "{", "File [  ]    files    =    new   File [ types . length ]  ;", "for    ( int   i    =     0  ;    i    <     ( types . length )  ;    i +  +  )     {", "files [ i ]     =    getFile ( types [ i ]  )  ;", "}", "return   this . fileManager . getJavaFileObjects ( files )  ;", "}", "METHOD_END"], "methodName": ["getJavaFileObjects"], "fileName": "org.springframework.context.index.test.TestCompiler"}, {"methodBody": ["METHOD_START", "{", "return   this . outputLocation ;", "}", "METHOD_END"], "methodName": ["getOutputLocation"], "fileName": "org.springframework.context.index.test.TestCompiler"}, {"methodBody": ["METHOD_START", "{", "return   TestCompiler . ORIGINAL _ SOURCE _ FOLDER ;", "}", "METHOD_END"], "methodName": ["getSourceFolder"], "fileName": "org.springframework.context.index.test.TestCompiler"}, {"methodBody": ["METHOD_START", "{", "List < String >    names    =    Arrays . stream ( types )  . map ( Class :  : getName )  . collect ( Collectors . toList (  )  )  ;", "return   getTask ( names . toArray ( new   String [ names . size (  )  ]  )  )  ;", "}", "METHOD_END"], "methodName": ["getTask"], "fileName": "org.springframework.context.index.test.TestCompiler"}, {"methodBody": ["METHOD_START", "{", "return   new   TestCompiler . TestCompilationTask ( this . compiler . getTask ( null ,    this . fileManager ,    null ,    null ,    null ,    javaFileObjects )  )  ;", "}", "METHOD_END"], "methodName": ["getTask"], "fileName": "org.springframework.context.index.test.TestCompiler"}, {"methodBody": ["METHOD_START", "{", "Iterable <  ?    extends   JavaFileObject >    javaFileObjects    =    getJavaFileObjects ( types )  ;", "return   getTask ( javaFileObjects )  ;", "}", "METHOD_END"], "methodName": ["getTask"], "fileName": "org.springframework.context.index.test.TestCompiler"}, {"methodBody": ["METHOD_START", "{", "return    ( type . replace (  \"  .  \"  ,     \"  /  \"  )  )     +     \"  . java \"  ;", "}", "METHOD_END"], "methodName": ["sourcePathFor"], "fileName": "org.springframework.context.index.test.TestCompiler"}]